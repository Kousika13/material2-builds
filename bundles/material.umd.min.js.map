{"version":3,"file":"material.umd.min.js","sources":["../../src/lib/tree/node.ts","../../src/lib/tree/padding.ts","../../src/lib/tree/tree.ts","../../src/lib/tree/toggle.ts","../../src/lib/tree/tree-module.ts","../../src/lib/tree/data-source/flat-data-source.ts","../../src/lib/tree/data-source/nested-data-source.ts","../../src/lib/version.ts","../../src/lib/autocomplete/autocomplete-trigger.ts","../../src/lib/core/testing/month-constants.ts","../../src/lib/expansion/expansion-animations.ts","../../src/lib/select/select.ts","../../src/lib/tooltip/tooltip.ts","../../src/lib/tabs/ink-bar.ts","../../src/lib/tabs/tab-label.ts","../../src/lib/tabs/tab-content.ts","../../src/lib/tabs/tab.ts","../../src/lib/tabs/tabs-animations.ts","../../src/lib/tabs/tab-body.ts","../../src/lib/tabs/tab-label-wrapper.ts","../../src/lib/tabs/tab-header.ts","../../src/lib/tabs/tab-group.ts","../../src/lib/tabs/tab-nav-bar/tab-nav-bar.ts","../../src/lib/tabs/tabs-module.ts","../../src/lib/toolbar/toolbar.ts","../../src/lib/toolbar/toolbar-module.ts","../../src/lib/tree/outlet.ts","../../src/lib/sort/sort-header-intl.ts","../../src/lib/sort/sort-header.ts","../../src/lib/sort/sort-module.ts","../../src/lib/stepper/step-label.ts","../../src/lib/stepper/stepper-intl.ts","../../src/lib/stepper/step-header.ts","../../src/lib/stepper/stepper-animations.ts","../../src/lib/stepper/stepper-icon.ts","../../src/lib/stepper/stepper.ts","../../src/lib/stepper/stepper-button.ts","../../src/lib/stepper/stepper-module.ts","../../src/lib/table/table.ts","../../src/lib/table/cell.ts","../../src/lib/table/row.ts","../../src/lib/table/table-module.ts","../../src/lib/table/table-data-source.ts","../../src/lib/slider/slider.ts","../../src/lib/slider/slider-module.ts","../../src/lib/snack-bar/snack-bar-ref.ts","../../src/lib/snack-bar/snack-bar-config.ts","../../src/lib/snack-bar/snack-bar-animations.ts","../../src/lib/snack-bar/simple-snack-bar.ts","../../src/lib/snack-bar/snack-bar-container.ts","../../src/lib/snack-bar/snack-bar-module.ts","../../src/lib/snack-bar/snack-bar.ts","../../src/lib/sort/sort.ts","../../src/lib/sort/sort-animations.ts","../../src/lib/sidenav/drawer.ts","../../src/lib/sidenav/sidenav.ts","../../src/lib/sidenav/sidenav-module.ts","../../src/lib/slide-toggle/slide-toggle-config.ts","../../src/lib/slide-toggle/slide-toggle.ts","../../src/lib/slide-toggle/slide-toggle-module.ts","../../src/lib/progress-bar/progress-bar.ts","../../src/lib/progress-bar/progress-bar-module.ts","../../src/lib/progress-spinner/progress-spinner.ts","../../src/lib/progress-spinner/progress-spinner-module.ts","../../src/lib/radio/radio.ts","../../src/lib/radio/radio-module.ts","../../src/lib/sidenav/drawer-animations.ts","../../src/lib/select/select-module.ts","../../src/lib/tooltip/tooltip-animations.ts","../../src/lib/tooltip/tooltip-module.ts","../../src/lib/paginator/paginator-intl.ts","../../src/lib/paginator/paginator.ts","../../src/lib/paginator/paginator-module.ts","../../src/lib/menu/menu-content.ts","../../src/lib/menu/menu-animations.ts","../../src/lib/menu/menu-panel.ts","../../src/lib/menu/menu-item.ts","../../src/lib/menu/menu-directive.ts","../../src/lib/menu/menu-trigger.ts","../../src/lib/menu/menu-module.ts","../../src/lib/select/select-animations.ts","../../src/lib/list/selection-list.ts","../../src/lib/list/list-module.ts","../../src/lib/list/list.ts","../../src/lib/grid-list/grid-tile.ts","../../src/lib/grid-list/tile-coordinator.ts","../../src/lib/grid-list/tile-styler.ts","../../src/lib/grid-list/grid-list.ts","../../src/lib/grid-list/grid-list-module.ts","../../src/lib/icon/icon-registry.ts","../../src/lib/icon/icon.ts","../../src/lib/icon/icon-module.ts","../../src/lib/datepicker/datepicker.ts","../../src/lib/datepicker/datepicker-input.ts","../../src/lib/datepicker/datepicker-toggle.ts","../../src/lib/datepicker/datepicker-module.ts","../../src/lib/divider/divider.ts","../../src/lib/divider/divider-module.ts","../../src/lib/expansion/accordion.ts","../../src/lib/expansion/expansion-panel-content.ts","../../src/lib/expansion/expansion-panel.ts","../../src/lib/expansion/expansion-panel-header.ts","../../src/lib/expansion/expansion-module.ts","../../src/lib/datepicker/calendar-body.ts","../../src/lib/datepicker/month-view.ts","../../src/lib/datepicker/multi-year-view.ts","../../src/lib/datepicker/year-view.ts","../../src/lib/datepicker/calendar.ts","../../src/lib/datepicker/datepicker-animations.ts","../../src/lib/chips/chip-list.ts","../../src/lib/chips/chip-input.ts","../../src/lib/chips/chips-module.ts","../../src/lib/dialog/dialog-config.ts","../../src/lib/dialog/dialog-animations.ts","../../src/lib/dialog/dialog-container.ts","../../src/lib/dialog/dialog-ref.ts","../../src/lib/dialog/dialog.ts","../../src/lib/dialog/dialog-content-directives.ts","../../src/lib/dialog/dialog-module.ts","../../src/lib/input/autosize.ts","../../src/lib/input/input-value-accessor.ts","../../src/lib/input/input.ts","../../src/lib/input/input-module.ts","../../src/lib/datepicker/datepicker-intl.ts","../../src/lib/card/card.ts","../../src/lib/card/card-module.ts","../../src/lib/checkbox/checkbox-config.ts","../../src/lib/checkbox/checkbox.ts","../../src/lib/checkbox/checkbox-required-validator.ts","../../src/lib/checkbox/checkbox-module.ts","../../src/lib/chips/chip.ts","../../src/lib/chips/chip-default-options.ts","../../src/lib/button/button.ts","../../src/lib/button/button-module.ts","../../src/lib/button-toggle/button-toggle.ts","../../src/lib/button-toggle/button-toggle-module.ts","../../src/lib/autocomplete/autocomplete.ts","../../src/lib/autocomplete/autocomplete-origin.ts","../../src/lib/autocomplete/autocomplete-module.ts","../../src/lib/badge/badge.ts","../../src/lib/badge/badge-module.ts","../../src/lib/bottom-sheet/bottom-sheet-config.ts","../../src/lib/bottom-sheet/bottom-sheet-animations.ts","../../src/lib/bottom-sheet/bottom-sheet-container.ts","../../src/lib/bottom-sheet/bottom-sheet-module.ts","../../src/lib/bottom-sheet/bottom-sheet-ref.ts","../../src/lib/bottom-sheet/bottom-sheet.ts","../../src/lib/core/option/option.ts","../../src/lib/core/option/index.ts","../../src/lib/core/label/label-options.ts","../../src/lib/form-field/error.ts","../../src/lib/form-field/form-field-animations.ts","../../src/lib/form-field/form-field-control.ts","../../src/lib/form-field/hint.ts","../../src/lib/form-field/label.ts","../../src/lib/form-field/placeholder.ts","../../src/lib/form-field/prefix.ts","../../src/lib/form-field/suffix.ts","../../src/lib/form-field/form-field.ts","../../src/lib/form-field/form-field-module.ts","../../node_modules/tslib/tslib.es6.js","../../src/lib/core/common-behaviors/common-module.ts","../../src/lib/core/common-behaviors/disabled.ts","../../src/lib/core/common-behaviors/color.ts","../../src/lib/core/common-behaviors/disable-ripple.ts","../../src/lib/core/common-behaviors/tabindex.ts","../../src/lib/core/common-behaviors/error-state.ts","../../src/lib/core/common-behaviors/initialized.ts","../../src/lib/core/datetime/date-adapter.ts","../../src/lib/core/datetime/native-date-adapter.ts","../../src/lib/core/ripple/ripple-renderer.ts","../../src/lib/form-field/form-field-errors.ts","../../src/lib/input/input-errors.ts","../../src/lib/datepicker/datepicker-errors.ts","../../src/lib/grid-list/grid-list-measure.ts","../../src/lib/menu/menu-errors.ts","../../src/lib/select/select-errors.ts","../../src/lib/sort/sort-errors.ts","../../src/lib/core/animation/animation.ts","../../src/lib/core/datetime/date-formats.ts","../../src/lib/core/datetime/native-date-formats.ts","../../src/lib/core/datetime/index.ts","../../src/lib/core/error/error-options.ts","../../src/lib/core/gestures/gesture-config.ts","../../src/lib/core/line/line.ts","../../src/lib/core/ripple/ripple-ref.ts","../../src/lib/core/ripple/ripple.ts","../../src/lib/core/ripple/index.ts","../../src/lib/core/selection/pseudo-checkbox/pseudo-checkbox.ts","../../src/lib/core/selection/index.ts","../../src/lib/core/option/optgroup.ts"],"sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  CdkNestedTreeNode,\n  CdkTree,\n  CdkTreeNode,\n  CdkTreeNodeDef,\n} from '@angular/cdk/tree';\nimport {\n  AfterContentInit,\n  Attribute,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  Input,\n  IterableDiffers,\n  OnDestroy,\n  QueryList\n} from '@angular/core';\nimport {CanDisable, HasTabIndex, mixinDisabled, mixinTabIndex} from '@angular/material/core';\nimport {MatTreeNodeOutlet} from './outlet';\n\n\nexport const _MatTreeNodeMixinBase = mixinTabIndex(mixinDisabled(CdkTreeNode));\nexport const _MatNestedTreeNodeMixinBase = mixinTabIndex(mixinDisabled(CdkNestedTreeNode));\n\n/**\n * Wrapper for the CdkTree node with Material design styles.\n */\n@Directive({\n  selector: 'mat-tree-node',\n  exportAs: 'matTreeNode',\n  inputs: ['disabled', 'tabIndex'],\n  host: {\n    '[attr.aria-expanded]': 'isExpanded',\n    '[attr.aria-level]': 'role === \"treeitem\" ? level : null',\n    '[attr.role]': 'role',\n    'class': 'mat-tree-node'\n  },\n  providers: [{provide: CdkTreeNode, useExisting: MatTreeNode}]\n})\nexport class MatTreeNode<T> extends _MatTreeNodeMixinBase<T>\n    implements CanDisable, HasTabIndex {\n  @Input() role: 'treeitem' | 'group' = 'treeitem';\n\n  constructor(protected _elementRef: ElementRef,\n              protected _tree: CdkTree<T>,\n              @Attribute('tabindex') tabIndex: string) {\n    super(_elementRef, _tree);\n\n    this.tabIndex = Number(tabIndex) || 0;\n  }\n}\n\n/**\n * Wrapper for the CdkTree node definition with Material design styles.\n */\n@Directive({\n  selector: '[matTreeNodeDef]',\n  inputs: [\n    'when: matTreeNodeDefWhen'\n  ],\n  providers: [{provide: CdkTreeNodeDef, useExisting: MatTreeNodeDef}]\n})\nexport class MatTreeNodeDef<T> extends CdkTreeNodeDef<T> {\n  @Input('matTreeNode') data: T;\n}\n\n/**\n * Wrapper for the CdkTree nested node with Material design styles.\n */\n@Directive({\n  selector: 'mat-nested-tree-node',\n  exportAs: 'matNestedTreeNode',\n  host: {\n    '[attr.aria-expanded]': 'isExpanded',\n    '[attr.role]': 'role',\n    'class': 'mat-nested-tree-node',\n  },\n  inputs: ['disabled', 'tabIndex'],\n  providers: [\n    {provide: CdkNestedTreeNode, useExisting: MatNestedTreeNode},\n    {provide: CdkTreeNode, useExisting: MatNestedTreeNode}\n  ]\n})\nexport class MatNestedTreeNode<T> extends _MatNestedTreeNodeMixinBase<T>\n    implements AfterContentInit, CanDisable, HasTabIndex, OnDestroy {\n\n  @Input('matNestedTreeNode') node: T;\n\n  @ContentChildren(MatTreeNodeOutlet) nodeOutlet: QueryList<MatTreeNodeOutlet>;\n\n  constructor(protected _elementRef: ElementRef,\n              protected _tree: CdkTree<T>,\n              protected _differs: IterableDiffers,\n              @Attribute('tabindex') tabIndex: string) {\n    super(_elementRef, _tree, _differs);\n\n    this.tabIndex = Number(tabIndex) || 0;\n  }\n\n  // This is a workaround for https://github.com/angular/angular/issues/23091\n  // In aot mode, the lifecycle hooks from parent class are not called.\n  // TODO(tinayuangao): Remove when the angular issue #23091 is fixed\n  ngAfterContentInit() {\n    super.ngAfterContentInit();\n  }\n\n  ngOnDestroy() {\n    super.ngOnDestroy();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {CdkTreeNodePadding} from '@angular/cdk/tree';\nimport {Directive, Input} from '@angular/core';\n\n\n/**\n * Wrapper for the CdkTree padding with Material design styles.\n */\n@Directive({\n  selector: '[matTreeNodePadding]',\n  providers: [{provide: CdkTreeNodePadding, useExisting: MatTreeNodePadding}]\n})\nexport class MatTreeNodePadding<T> extends CdkTreeNodePadding<T> {\n\n  /** The level of depth of the tree node. The padding will be `level * indent` pixels. */\n  @Input('matTreeNodePadding') level: number;\n\n  /** The indent for each level. Default number 40px from material design menu sub-menu spec. */\n  @Input('matTreeNodePaddingIndent') indent: number;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ChangeDetectionStrategy, Component, ViewChild, ViewEncapsulation} from '@angular/core';\nimport {CdkTree} from '@angular/cdk/tree';\nimport {MatTreeNodeOutlet} from './outlet';\n\n/**\n * Wrapper for the CdkTable with Material design styles.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-tree',\n  exportAs: 'matTree',\n  template: `<ng-container matTreeNodeOutlet></ng-container>`,\n  host: {\n    'class': 'mat-tree',\n    'role': 'tree',\n  },\n  styleUrls: ['tree.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  providers: [{provide: CdkTree, useExisting: MatTree}]\n})\nexport class MatTree<T> extends CdkTree<T> {\n  // Outlets within the tree's template where the dataNodes will be inserted.\n  @ViewChild(MatTreeNodeOutlet) _nodeOutlet: MatTreeNodeOutlet;\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, Input} from '@angular/core';\nimport {CdkTreeNodeToggle} from '@angular/cdk/tree';\n\n/**\n * Wrapper for the CdkTree's toggle with Material design styles.\n */\n@Directive({\n  selector: '[matTreeNodeToggle]',\n  host: {\n    '(click)': '_toggle($event)',\n  },\n  providers: [{provide: CdkTreeNodeToggle, useExisting: MatTreeNodeToggle}]\n})\nexport class MatTreeNodeToggle<T> extends CdkTreeNodeToggle<T> {\n  @Input('matTreeNodeToggleRecursive') recursive: boolean = false;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\n\nimport {CdkTreeModule} from '@angular/cdk/tree';\nimport {CommonModule} from '@angular/common';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatNestedTreeNode, MatTreeNodeDef, MatTreeNode} from './node';\nimport {MatTree} from './tree';\nimport {MatTreeNodeToggle} from './toggle';\nimport {MatTreeNodeOutlet} from './outlet';\nimport {MatTreeNodePadding} from './padding';\n\nconst MAT_TREE_DIRECTIVES = [\n  MatNestedTreeNode,\n  MatTreeNodeDef,\n  MatTreeNodePadding,\n  MatTreeNodeToggle,\n  MatTree,\n  MatTreeNode,\n  MatTreeNodeOutlet\n];\n\n@NgModule({\n  imports: [CdkTreeModule, CommonModule, MatCommonModule],\n  exports: MAT_TREE_DIRECTIVES,\n  declarations: MAT_TREE_DIRECTIVES,\n})\nexport class MatTreeModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CollectionViewer, DataSource} from '@angular/cdk/collections';\nimport {FlatTreeControl, TreeControl} from '@angular/cdk/tree';\nimport {BehaviorSubject, merge, Observable} from 'rxjs';\nimport {map, take} from 'rxjs/operators';\n\n/**\n * Tree flattener to convert a normal type of node to node with children & level information.\n * Transform nested nodes of type `T` to flattened nodes of type `F`.\n *\n * For example, the input data of type `T` is nested, and contains its children data:\n *   SomeNode: {\n *     key: 'Fruits',\n *     children: [\n *       NodeOne: {\n *         key: 'Apple',\n *       },\n *       NodeTwo: {\n *        key: 'Pear',\n *      }\n *    ]\n *  }\n *  After flattener flatten the tree, the structure will become\n *  SomeNode: {\n *    key: 'Fruits',\n *    expandable: true,\n *    level: 1\n *  },\n *  NodeOne: {\n *    key: 'Apple',\n *    expandable: false,\n *    level: 2\n *  },\n *  NodeTwo: {\n *   key: 'Pear',\n *   expandable: false,\n *   level: 2\n * }\n * and the output flattened type is `F` with additional information.\n */\nexport class MatTreeFlattener<T, F> {\n\n  constructor(public transformFunction: (node: T, level: number) => F,\n              public getLevel: (node: F) => number,\n              public isExpandable: (node: F) => boolean,\n              public getChildren: (node: T) => Observable<T[]> | T[]) {}\n\n  _flattenNode(node: T, level: number,\n               resultNodes: F[], parentMap: boolean[]): F[] {\n    const flatNode = this.transformFunction(node, level);\n    resultNodes.push(flatNode);\n\n    if (this.isExpandable(flatNode)) {\n      const childrenNodes = this.getChildren(node);\n      if (Array.isArray(childrenNodes)) {\n        this._flattenChildren(childrenNodes, level, resultNodes, parentMap);\n      } else {\n        childrenNodes.pipe(take(1)).subscribe(children => {\n          this._flattenChildren(children, level, resultNodes, parentMap);\n        });\n      }\n    }\n    return resultNodes;\n  }\n\n  _flattenChildren(children: T[], level: number,\n                   resultNodes: F[], parentMap: boolean[]): void {\n    children.forEach((child, index) => {\n      let childParentMap: boolean[] = parentMap.slice();\n      childParentMap.push(index != children.length - 1);\n      this._flattenNode(child, level + 1, resultNodes, childParentMap);\n    });\n  }\n\n  /**\n   * Flatten a list of node type T to flattened version of node F.\n   * Please note that type T may be nested, and the length of `structuredData` may be different\n   * from that of returned list `F[]`.\n   */\n  flattenNodes(structuredData: T[]): F[] {\n    let resultNodes: F[] = [];\n    structuredData.forEach(node => this._flattenNode(node, 0, resultNodes, []));\n    return resultNodes;\n  }\n\n  /**\n   * Expand flattened node with current expansion status.\n   * The returned list may have different length.\n   */\n  expandFlattenedNodes(nodes: F[], treeControl: TreeControl<F>): F[] {\n    let results: F[] = [];\n    let currentExpand: boolean[] = [];\n    currentExpand[0] = true;\n\n    nodes.forEach(node => {\n      let expand = true;\n      for (let i = 0; i <= this.getLevel(node); i++) {\n        expand = expand && currentExpand[i];\n      }\n      if (expand) {\n        results.push(node);\n      }\n      if (this.isExpandable(node)) {\n        currentExpand[this.getLevel(node) + 1] = treeControl.isExpanded(node);\n      }\n    });\n    return results;\n  }\n}\n\n\n/**\n * Data source for flat tree.\n * The data source need to handle expansion/collapsion of the tree node and change the data feed\n * to `MatTree`.\n * The nested tree nodes of type `T` are flattened through `MatTreeFlattener`, and converted\n * to type `F` for `MatTree` to consume.\n */\nexport class MatTreeFlatDataSource<T, F> extends DataSource<F> {\n  _flattenedData = new BehaviorSubject<F[]>([]);\n\n  _expandedData = new BehaviorSubject<F[]>([]);\n\n  _data: BehaviorSubject<T[]>;\n  get data() { return this._data.value; }\n  set data(value: T[]) {\n    this._data.next(value);\n    this._flattenedData.next(this.treeFlattener.flattenNodes(this.data));\n    this.treeControl.dataNodes = this._flattenedData.value;\n  }\n\n  constructor(private treeControl: FlatTreeControl<F>,\n              private treeFlattener: MatTreeFlattener<T, F>,\n              initialData: T[] = []) {\n    super();\n    this._data = new BehaviorSubject<T[]>(initialData);\n  }\n\n  connect(collectionViewer: CollectionViewer): Observable<F[]> {\n    const changes = [\n      collectionViewer.viewChange,\n      this.treeControl.expansionModel.onChange!,\n      this._flattenedData\n    ];\n    return merge(...changes).pipe(map(() => {\n      this._expandedData.next(\n        this.treeFlattener.expandFlattenedNodes(this._flattenedData.value, this.treeControl));\n      return this._expandedData.value;\n    }));\n  }\n\n  disconnect() {\n    // no op\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CollectionViewer, DataSource} from '@angular/cdk/collections';\nimport {BehaviorSubject, merge, Observable} from 'rxjs';\nimport {map} from 'rxjs/operators';\n\n\n/**\n * Data source for nested tree.\n *\n * The data source for nested tree doesn't have to consider node flattener, or the way to expand\n * or collapse. The expansion/collapsion will be handled by TreeControl and each non-leaf node.\n */\nexport class MatTreeNestedDataSource<T> extends DataSource<T> {\n  _data = new BehaviorSubject<T[]>([]);\n\n  /**\n   * Data for the nested tree\n   */\n  get data() { return this._data.value; }\n  set data(value: T[]) { this._data.next(value); }\n\n  connect(collectionViewer: CollectionViewer): Observable<T[]> {\n    return merge(...[collectionViewer.viewChange, this._data])\n      .pipe(map(() => {\n        return this.data;\n      }));\n  }\n\n  disconnect() {\n    // no op\n  }\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Version} from '@angular/core';\n\n/** Current version of Angular Material. */\nexport const VERSION = new Version('6.3.3-623cd3d');\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {Directionality} from '@angular/cdk/bidi';\nimport {DOWN_ARROW, ENTER, ESCAPE, TAB, UP_ARROW} from '@angular/cdk/keycodes';\nimport {\n  FlexibleConnectedPositionStrategy,\n  Overlay,\n  OverlayConfig,\n  OverlayRef,\n  PositionStrategy,\n  ScrollStrategy,\n  ViewportRuler,\n} from '@angular/cdk/overlay';\nimport {TemplatePortal} from '@angular/cdk/portal';\nimport {DOCUMENT} from '@angular/common';\nimport {filter, take, switchMap, delay, tap, map} from 'rxjs/operators';\nimport {\n  ChangeDetectorRef,\n  Directive,\n  ElementRef,\n  forwardRef,\n  Host,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  ViewContainerRef,\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {\n  _countGroupLabelsBeforeOption,\n  _getOptionScrollPosition,\n  MatOption,\n  MatOptionSelectionChange,\n} from '@angular/material/core';\nimport {MatFormField} from '@angular/material/form-field';\nimport {Subscription, defer, fromEvent, merge, of as observableOf, Subject, Observable} from 'rxjs';\nimport {MatAutocomplete} from './autocomplete';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {MatAutocompleteOrigin} from './autocomplete-origin';\n\n\n/**\n * The following style constants are necessary to save here in order\n * to properly calculate the scrollTop of the panel. Because we are not\n * actually focusing the active item, scroll must be handled manually.\n */\n\n/** The height of each autocomplete option. */\nexport const AUTOCOMPLETE_OPTION_HEIGHT = 48;\n\n/** The total height of the autocomplete panel. */\nexport const AUTOCOMPLETE_PANEL_HEIGHT = 256;\n\n/** Injection token that determines the scroll handling while the autocomplete panel is open. */\nexport const MAT_AUTOCOMPLETE_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mat-autocomplete-scroll-strategy');\n\n/** @docs-private */\nexport function MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY(overlay: Overlay): () => ScrollStrategy {\n  return () => overlay.scrollStrategies.reposition();\n}\n\n/** @docs-private */\nexport const MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY_PROVIDER = {\n  provide: MAT_AUTOCOMPLETE_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY,\n};\n\n/**\n * Provider that allows the autocomplete to register as a ControlValueAccessor.\n * @docs-private\n */\nexport const MAT_AUTOCOMPLETE_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatAutocompleteTrigger),\n  multi: true\n};\n\n/**\n * Creates an error to be thrown when attempting to use an autocomplete trigger without a panel.\n */\nexport function getMatAutocompleteMissingPanelError(): Error {\n  return Error('Attempting to open an undefined instance of `mat-autocomplete`. ' +\n               'Make sure that the id passed to the `matAutocomplete` is correct and that ' +\n               'you\\'re attempting to open it after the ngAfterContentInit hook.');\n}\n\n\n@Directive({\n  selector: `input[matAutocomplete], textarea[matAutocomplete]`,\n  host: {\n    '[attr.autocomplete]': 'autocompleteAttribute',\n    '[attr.role]': 'autocompleteDisabled ? null : \"combobox\"',\n    '[attr.aria-autocomplete]': 'autocompleteDisabled ? null : \"list\"',\n    '[attr.aria-activedescendant]': 'activeOption?.id',\n    '[attr.aria-expanded]': 'autocompleteDisabled ? null : panelOpen.toString()',\n    '[attr.aria-owns]': 'autocompleteDisabled ? null : autocomplete?.id',\n    // Note: we use `focusin`, as opposed to `focus`, in order to open the panel\n    // a little earlier. This avoids issues where IE delays the focusing of the input.\n    '(focusin)': '_handleFocus()',\n    '(blur)': '_onTouched()',\n    '(input)': '_handleInput($event)',\n    '(keydown)': '_handleKeydown($event)',\n  },\n  exportAs: 'matAutocompleteTrigger',\n  providers: [MAT_AUTOCOMPLETE_VALUE_ACCESSOR]\n})\nexport class MatAutocompleteTrigger implements ControlValueAccessor, OnDestroy {\n  private _overlayRef: OverlayRef | null;\n  private _portal: TemplatePortal;\n  private _componentDestroyed = false;\n  private _autocompleteDisabled = false;\n\n  /** Old value of the native input. Used to work around issues with the `input` event on IE. */\n  private _previousValue: string | number | null;\n\n  /** Strategy that is used to position the panel. */\n  private _positionStrategy: FlexibleConnectedPositionStrategy;\n\n  /** Whether or not the label state is being overridden. */\n  private _manuallyFloatingLabel = false;\n\n  /** The subscription for closing actions (some are bound to document). */\n  private _closingActionsSubscription: Subscription;\n\n  /** Subscription to viewport size changes. */\n  private _viewportSubscription = Subscription.EMPTY;\n\n  /** Stream of keyboard events that can close the panel. */\n  private readonly _closeKeyEventStream = new Subject<void>();\n\n  /** `View -> model callback called when value changes` */\n  _onChange: (value: any) => void = () => {};\n\n  /** `View -> model callback called when autocomplete has been touched` */\n  _onTouched = () => {};\n\n  /** The autocomplete panel to be attached to this trigger. */\n  @Input('matAutocomplete') autocomplete: MatAutocomplete;\n\n  /**\n   * Reference relative to which to position the autocomplete panel.\n   * Defaults to the autocomplete trigger element.\n   */\n  @Input('matAutocompleteConnectedTo') connectedTo: MatAutocompleteOrigin;\n\n  /**\n   * `autocomplete` attribute to be set on the input element.\n   * @docs-private\n   */\n  @Input('autocomplete') autocompleteAttribute: string = 'off';\n\n  /**\n   * Whether the autocomplete is disabled. When disabled, the element will\n   * act as a regular input and the user won't be able to open the panel.\n   */\n  @Input('matAutocompleteDisabled')\n  get autocompleteDisabled(): boolean { return this._autocompleteDisabled; }\n  set autocompleteDisabled(value: boolean) {\n    this._autocompleteDisabled = coerceBooleanProperty(value);\n  }\n\n  constructor(private _element: ElementRef, private _overlay: Overlay,\n              private _viewContainerRef: ViewContainerRef,\n              private _zone: NgZone,\n              private _changeDetectorRef: ChangeDetectorRef,\n              @Inject(MAT_AUTOCOMPLETE_SCROLL_STRATEGY) private _scrollStrategy,\n              @Optional() private _dir: Directionality,\n              @Optional() @Host() private _formField: MatFormField,\n              @Optional() @Inject(DOCUMENT) private _document: any,\n              // @deletion-target 7.0.0 Make `_viewportRuler` required.\n              private _viewportRuler?: ViewportRuler) {}\n\n  ngOnDestroy() {\n    this._viewportSubscription.unsubscribe();\n    this._componentDestroyed = true;\n    this._destroyPanel();\n    this._closeKeyEventStream.complete();\n  }\n\n  /** Whether or not the autocomplete panel is open. */\n  get panelOpen(): boolean {\n    return this._overlayAttached && this.autocomplete.showPanel;\n  }\n  private _overlayAttached: boolean = false;\n\n  /** Opens the autocomplete suggestion panel. */\n  openPanel(): void {\n    this._attachOverlay();\n    this._floatLabel();\n  }\n\n  /** Closes the autocomplete suggestion panel. */\n  closePanel(): void {\n    this._resetLabel();\n\n    if (!this._overlayAttached) {\n      return;\n    }\n\n    if (this.panelOpen) {\n      // Only emit if the panel was visible.\n      this.autocomplete.closed.emit();\n    }\n\n    this.autocomplete._isOpen = this._overlayAttached = false;\n\n    if (this._overlayRef && this._overlayRef.hasAttached()) {\n      this._overlayRef.detach();\n      this._closingActionsSubscription.unsubscribe();\n    }\n\n    // Note that in some cases this can end up being called after the component is destroyed.\n    // Add a check to ensure that we don't try to run change detection on a destroyed view.\n    if (!this._componentDestroyed) {\n      // We need to trigger change detection manually, because\n      // `fromEvent` doesn't seem to do it at the proper time.\n      // This ensures that the label is reset when the\n      // user clicks outside.\n      this._changeDetectorRef.detectChanges();\n    }\n  }\n\n  /**\n   * A stream of actions that should close the autocomplete panel, including\n   * when an option is selected, on blur, and when TAB is pressed.\n   */\n  get panelClosingActions(): Observable<MatOptionSelectionChange|null> {\n    return merge(\n      this.optionSelections,\n      this.autocomplete._keyManager.tabOut.pipe(filter(() => this._overlayAttached)),\n      this._closeKeyEventStream,\n      this._outsideClickStream,\n      this._overlayRef ?\n          this._overlayRef.detachments().pipe(filter(() => this._overlayAttached)) :\n          observableOf()\n    ).pipe(\n      // Normalize the output so we return a consistent type.\n      map(event => event instanceof MatOptionSelectionChange ? event : null)\n    );\n  }\n\n  /** Stream of autocomplete option selections. */\n  readonly optionSelections: Observable<MatOptionSelectionChange> = defer(() => {\n    if (this.autocomplete && this.autocomplete.options) {\n     return merge(...this.autocomplete.options.map(option => option.onSelectionChange));\n    }\n\n    // If there are any subscribers before `ngAfterViewInit`, the `autocomplete` will be undefined.\n    // Return a stream that we'll replace with the real one once everything is in place.\n    return this._zone.onStable\n        .asObservable()\n        .pipe(take(1), switchMap(() => this.optionSelections));\n  });\n\n  /** The currently active option, coerced to MatOption type. */\n  get activeOption(): MatOption | null {\n    if (this.autocomplete && this.autocomplete._keyManager) {\n      return this.autocomplete._keyManager.activeItem;\n    }\n\n    return null;\n  }\n\n  /** Stream of clicks outside of the autocomplete panel. */\n  private get _outsideClickStream(): Observable<any> {\n    if (!this._document) {\n      return observableOf(null);\n    }\n\n    return merge(\n      fromEvent(this._document, 'click'),\n      fromEvent(this._document, 'touchend')\n    )\n    .pipe(filter((event: MouseEvent | TouchEvent) => {\n      const clickTarget = event.target as HTMLElement;\n      const formField = this._formField ?\n          this._formField._elementRef.nativeElement : null;\n\n      return this._overlayAttached &&\n              clickTarget !== this._element.nativeElement &&\n              (!formField || !formField.contains(clickTarget)) &&\n              (!!this._overlayRef && !this._overlayRef.overlayElement.contains(clickTarget));\n    }));\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  writeValue(value: any): void {\n    Promise.resolve(null).then(() => this._setTriggerValue(value));\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnChange(fn: (value: any) => {}): void {\n    this._onChange = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnTouched(fn: () => {}) {\n    this._onTouched = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  setDisabledState(isDisabled: boolean) {\n    this._element.nativeElement.disabled = isDisabled;\n  }\n\n  _handleKeydown(event: KeyboardEvent): void {\n    const keyCode = event.keyCode;\n\n    // Prevent the default action on all escape key presses. This is here primarily to bring IE\n    // in line with other browsers. By default, pressing escape on IE will cause it to revert\n    // the input value to the one that it had on focus, however it won't dispatch any events\n    // which means that the model value will be out of sync with the view.\n    if (keyCode === ESCAPE) {\n      event.preventDefault();\n    }\n\n    // Close when pressing ESCAPE or ALT + UP_ARROW, based on the a11y guidelines.\n    // See: https://www.w3.org/TR/wai-aria-practices-1.1/#textbox-keyboard-interaction\n    if (this.panelOpen && (keyCode === ESCAPE || (keyCode === UP_ARROW && event.altKey))) {\n      this._resetActiveItem();\n      this._closeKeyEventStream.next();\n      event.stopPropagation();\n    } else if (this.activeOption && keyCode === ENTER && this.panelOpen) {\n      this.activeOption._selectViaInteraction();\n      this._resetActiveItem();\n      event.preventDefault();\n    } else if (this.autocomplete) {\n      const prevActiveItem = this.autocomplete._keyManager.activeItem;\n      const isArrowKey = keyCode === UP_ARROW || keyCode === DOWN_ARROW;\n\n      if (this.panelOpen || keyCode === TAB) {\n        this.autocomplete._keyManager.onKeydown(event);\n      } else if (isArrowKey && this._canOpen()) {\n        this.openPanel();\n      }\n\n      if (isArrowKey || this.autocomplete._keyManager.activeItem !== prevActiveItem) {\n        this._scrollToOption();\n      }\n    }\n  }\n\n  _handleInput(event: KeyboardEvent): void {\n    let target = event.target as HTMLInputElement;\n    let value: number | string | null = target.value;\n\n    // Based on `NumberValueAccessor` from forms.\n    if (target.type === 'number') {\n      value = value == '' ? null : parseFloat(value);\n    }\n\n    // If the input has a placeholder, IE will fire the `input` event on page load,\n    // focus and blur, in addition to when the user actually changed the value. To\n    // filter out all of the extra events, we save the value on focus and between\n    // `input` events, and we check whether it changed.\n    // See: https://connect.microsoft.com/IE/feedback/details/885747/\n    if (this._previousValue !== value && document.activeElement === event.target) {\n      this._previousValue = value;\n      this._onChange(value);\n\n      if (this._canOpen()) {\n        this.openPanel();\n      }\n    }\n  }\n\n  _handleFocus(): void {\n    if (this._canOpen()) {\n      this._previousValue = this._element.nativeElement.value;\n      this._attachOverlay();\n      this._floatLabel(true);\n    }\n  }\n\n  /**\n   * In \"auto\" mode, the label will animate down as soon as focus is lost.\n   * This causes the value to jump when selecting an option with the mouse.\n   * This method manually floats the label until the panel can be closed.\n   * @param shouldAnimate Whether the label should be animated when it is floated.\n   */\n  private _floatLabel(shouldAnimate = false): void {\n    if (this._formField && this._formField.floatLabel === 'auto') {\n      if (shouldAnimate) {\n        this._formField._animateAndLockLabel();\n      } else {\n        this._formField.floatLabel = 'always';\n      }\n\n      this._manuallyFloatingLabel = true;\n    }\n  }\n\n  /** If the label has been manually elevated, return it to its normal state. */\n  private _resetLabel(): void  {\n    if (this._manuallyFloatingLabel) {\n      this._formField.floatLabel = 'auto';\n      this._manuallyFloatingLabel = false;\n    }\n  }\n\n  /**\n   * Given that we are not actually focusing active options, we must manually adjust scroll\n   * to reveal options below the fold. First, we find the offset of the option from the top\n   * of the panel. If that offset is below the fold, the new scrollTop will be the offset -\n   * the panel height + the option height, so the active option will be just visible at the\n   * bottom of the panel. If that offset is above the top of the visible panel, the new scrollTop\n   * will become the offset. If that offset is visible within the panel already, the scrollTop is\n   * not adjusted.\n   */\n  private _scrollToOption(): void {\n    const index = this.autocomplete._keyManager.activeItemIndex || 0;\n    const labelCount = _countGroupLabelsBeforeOption(index,\n        this.autocomplete.options, this.autocomplete.optionGroups);\n\n    const newScrollPosition = _getOptionScrollPosition(\n      index + labelCount,\n      AUTOCOMPLETE_OPTION_HEIGHT,\n      this.autocomplete._getScrollTop(),\n      AUTOCOMPLETE_PANEL_HEIGHT\n    );\n\n    this.autocomplete._setScrollTop(newScrollPosition);\n  }\n\n  /**\n   * This method listens to a stream of panel closing actions and resets the\n   * stream every time the option list changes.\n   */\n  private _subscribeToClosingActions(): Subscription {\n    const firstStable = this._zone.onStable.asObservable().pipe(take(1));\n    const optionChanges = this.autocomplete.options.changes.pipe(\n      tap(() => this._positionStrategy.reapplyLastPosition()),\n      // Defer emitting to the stream until the next tick, because changing\n      // bindings in here will cause \"changed after checked\" errors.\n      delay(0)\n    );\n\n    // When the zone is stable initially, and when the option list changes...\n    return merge(firstStable, optionChanges)\n      .pipe(\n        // create a new stream of panelClosingActions, replacing any previous streams\n        // that were created, and flatten it so our stream only emits closing events...\n        switchMap(() => {\n          this._resetActiveItem();\n          this.autocomplete._setVisibility();\n\n          if (this.panelOpen) {\n            this._overlayRef!.updatePosition();\n          }\n\n          return this.panelClosingActions;\n        }),\n        // when the first closing event occurs...\n        take(1)\n      )\n      // set the value, close the panel, and complete.\n      .subscribe(event => this._setValueAndClose(event));\n  }\n\n  /** Destroys the autocomplete suggestion panel. */\n  private _destroyPanel(): void {\n    if (this._overlayRef) {\n      this.closePanel();\n      this._overlayRef.dispose();\n      this._overlayRef = null;\n    }\n  }\n\n  private _setTriggerValue(value: any): void {\n    const toDisplay = this.autocomplete && this.autocomplete.displayWith ?\n      this.autocomplete.displayWith(value) :\n      value;\n\n    // Simply falling back to an empty string if the display value is falsy does not work properly.\n    // The display value can also be the number zero and shouldn't fall back to an empty string.\n    const inputValue = toDisplay != null ? toDisplay : '';\n\n    // If it's used within a `MatFormField`, we should set it through the property so it can go\n    // through change detection.\n    if (this._formField) {\n      this._formField._control.value = inputValue;\n    } else {\n      this._element.nativeElement.value = inputValue;\n    }\n  }\n\n  /**\n   * This method closes the panel, and if a value is specified, also sets the associated\n   * control to that value. It will also mark the control as dirty if this interaction\n   * stemmed from the user.\n   */\n  private _setValueAndClose(event: MatOptionSelectionChange | null): void {\n    if (event && event.source) {\n      this._clearPreviousSelectedOption(event.source);\n      this._setTriggerValue(event.source.value);\n      this._onChange(event.source.value);\n      this._element.nativeElement.focus();\n      this.autocomplete._emitSelectEvent(event.source);\n    }\n\n    this.closePanel();\n  }\n\n  /**\n   * Clear any previous selected option and emit a selection change event for this option\n   */\n  private _clearPreviousSelectedOption(skip: MatOption) {\n    this.autocomplete.options.forEach(option => {\n      if (option != skip && option.selected) {\n        option.deselect();\n      }\n    });\n  }\n\n  private _attachOverlay(): void {\n    if (!this.autocomplete) {\n      throw getMatAutocompleteMissingPanelError();\n    }\n\n    if (!this._overlayRef) {\n      this._portal = new TemplatePortal(this.autocomplete.template, this._viewContainerRef);\n      this._overlayRef = this._overlay.create(this._getOverlayConfig());\n\n      if (this._viewportRuler) {\n        this._viewportSubscription = this._viewportRuler.change().subscribe(() => {\n          if (this.panelOpen && this._overlayRef) {\n            this._overlayRef.updateSize({width: this._getPanelWidth()});\n          }\n        });\n      }\n    } else {\n      // Update the panel width and direction, in case anything has changed.\n      this._overlayRef.updateSize({width: this._getPanelWidth()});\n    }\n\n    if (this._overlayRef && !this._overlayRef.hasAttached()) {\n      this._overlayRef.attach(this._portal);\n      this._closingActionsSubscription = this._subscribeToClosingActions();\n    }\n\n    const wasOpen = this.panelOpen;\n\n    this.autocomplete._setVisibility();\n    this.autocomplete._isOpen = this._overlayAttached = true;\n\n    // We need to do an extra `panelOpen` check in here, because the\n    // autocomplete won't be shown if there are no options.\n    if (this.panelOpen && wasOpen !== this.panelOpen) {\n      this.autocomplete.opened.emit();\n    }\n  }\n\n  private _getOverlayConfig(): OverlayConfig {\n    return new OverlayConfig({\n      positionStrategy: this._getOverlayPosition(),\n      scrollStrategy: this._scrollStrategy(),\n      width: this._getPanelWidth(),\n      direction: this._dir\n    });\n  }\n\n  private _getOverlayPosition(): PositionStrategy {\n    this._positionStrategy = this._overlay.position()\n      .flexibleConnectedTo(this._getConnectedElement())\n      .withFlexibleDimensions(false)\n      .withPush(false)\n      .withPositions([\n        {originX: 'start', originY: 'bottom', overlayX: 'start', overlayY: 'top'},\n        {originX: 'start', originY: 'top', overlayX: 'start', overlayY: 'bottom'}\n      ]);\n\n    return this._positionStrategy;\n  }\n\n  private _getConnectedElement(): ElementRef {\n    if (this.connectedTo) {\n      return this.connectedTo.elementRef;\n    }\n\n    return this._formField ? this._formField.getConnectedOverlayOrigin() : this._element;\n  }\n\n  private _getPanelWidth(): number | string {\n    return this.autocomplete.panelWidth || this._getHostWidth();\n  }\n\n  /** Returns the width of the input element, so the panel width can match it. */\n  private _getHostWidth(): number {\n    return this._getConnectedElement().nativeElement.getBoundingClientRect().width;\n  }\n\n  /**\n   * Resets the active item to -1 so arrow events will activate the\n   * correct options, or to 0 if the consumer opted into it.\n   */\n  private _resetActiveItem(): void {\n    this.autocomplete._keyManager.setActiveItem(this.autocomplete.autoActiveFirstOption ? 0 : -1);\n  }\n\n  /** Determines whether the panel can be opened. */\n  private _canOpen(): boolean {\n    const element: HTMLInputElement = this._element.nativeElement;\n    return !element.readOnly && !element.disabled && !this._autocompleteDisabled;\n  }\n\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * When constructing a Date, the month is zero-based. This can be confusing, since people are\n * used to seeing them one-based. So we create these aliases to make writing the tests easier.\n */\nexport const JAN = 0, FEB = 1, MAR = 2, APR = 3, MAY = 4, JUN = 5, JUL = 6, AUG = 7, SEP = 8,\n    OCT = 9, NOV = 10, DEC = 11;\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  animateChild,\n  group,\n  state,\n  style,\n  transition,\n  trigger,\n  query,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/** Time and timing curve for expansion panel animations. */\nexport const EXPANSION_PANEL_ANIMATION_TIMING = '225ms cubic-bezier(0.4,0.0,0.2,1)';\n\n/** Animations used by the Material expansion panel. */\nexport const matExpansionAnimations: {\n  readonly indicatorRotate: AnimationTriggerMetadata;\n  readonly expansionHeaderHeight: AnimationTriggerMetadata;\n  readonly bodyExpansion: AnimationTriggerMetadata;\n} = {\n  /** Animation that rotates the indicator arrow. */\n  indicatorRotate: trigger('indicatorRotate', [\n    state('collapsed', style({transform: 'rotate(0deg)'})),\n    state('expanded', style({transform: 'rotate(180deg)'})),\n    transition('expanded <=> collapsed', animate(EXPANSION_PANEL_ANIMATION_TIMING)),\n  ]),\n\n  /** Animation that expands and collapses the panel header height. */\n  expansionHeaderHeight: trigger('expansionHeight', [\n    state('collapsed', style({\n      height: '{{collapsedHeight}}',\n    }), {\n      params: {collapsedHeight: '48px'},\n    }),\n    state('expanded', style({\n      height: '{{expandedHeight}}'\n    }), {\n      params: {expandedHeight: '64px'}\n    }),\n    transition('expanded <=> collapsed', group([\n      query('@indicatorRotate', animateChild(), {optional: true}),\n      animate(EXPANSION_PANEL_ANIMATION_TIMING),\n    ])),\n  ]),\n\n  /** Animation that expands and collapses the panel content. */\n  bodyExpansion: trigger('bodyExpansion', [\n    state('collapsed', style({height: '0px', visibility: 'hidden'})),\n    state('expanded', style({height: '*', visibility: 'visible'})),\n    transition('expanded <=> collapsed', animate(EXPANSION_PANEL_ANIMATION_TIMING)),\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ActiveDescendantKeyManager} from '@angular/cdk/a11y';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {SelectionModel} from '@angular/cdk/collections';\nimport {\n  DOWN_ARROW,\n  END,\n  ENTER,\n  HOME,\n  LEFT_ARROW,\n  RIGHT_ARROW,\n  SPACE,\n  UP_ARROW,\n  A,\n} from '@angular/cdk/keycodes';\nimport {\n  CdkConnectedOverlay,\n  Overlay,\n  RepositionScrollStrategy,\n  ScrollStrategy,\n  ViewportRuler,\n} from '@angular/cdk/overlay';\nimport {\n  AfterContentInit,\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  ContentChildren,\n  Directive,\n  DoCheck,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  InjectionToken,\n  Input,\n  isDevMode,\n  NgZone,\n  OnChanges,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Output,\n  QueryList,\n  Self,\n  SimpleChanges,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {ControlValueAccessor, FormGroupDirective, NgControl, NgForm} from '@angular/forms';\nimport {\n  _countGroupLabelsBeforeOption,\n  _getOptionScrollPosition,\n  CanDisable,\n  CanDisableRipple,\n  CanUpdateErrorState,\n  ErrorStateMatcher,\n  HasTabIndex,\n  MAT_OPTION_PARENT_COMPONENT,\n  MatOptgroup,\n  MatOption,\n  MatOptionSelectionChange,\n  mixinDisabled,\n  mixinDisableRipple,\n  mixinErrorState,\n  mixinTabIndex,\n} from '@angular/material/core';\nimport {MatFormField, MatFormFieldControl} from '@angular/material/form-field';\nimport {defer, merge, Observable, Subject} from 'rxjs';\nimport {\n  filter,\n  map,\n  startWith,\n  switchMap,\n  take,\n  takeUntil,\n  distinctUntilChanged,\n} from 'rxjs/operators';\nimport {matSelectAnimations} from './select-animations';\nimport {\n  getMatSelectDynamicMultipleError,\n  getMatSelectNonArrayValueError,\n  getMatSelectNonFunctionValueError,\n} from './select-errors';\n\n\nlet nextUniqueId = 0;\n\n/**\n * The following style constants are necessary to save here in order\n * to properly calculate the alignment of the selected option over\n * the trigger element.\n */\n\n/** The max height of the select's overlay panel */\nexport const SELECT_PANEL_MAX_HEIGHT = 256;\n\n/** The panel's padding on the x-axis */\nexport const SELECT_PANEL_PADDING_X = 16;\n\n/** The panel's x axis padding if it is indented (e.g. there is an option group). */\nexport const SELECT_PANEL_INDENT_PADDING_X = SELECT_PANEL_PADDING_X * 2;\n\n/** The height of the select items in `em` units. */\nexport const SELECT_ITEM_HEIGHT_EM = 3;\n\n/**\n * Distance between the panel edge and the option text in\n * multi-selection mode.\n *\n * (SELECT_PANEL_PADDING_X * 1.5) + 20 = 44\n * The padding is multiplied by 1.5 because the checkbox's margin is half the padding.\n * The checkbox width is 20px.\n */\nexport const SELECT_MULTIPLE_PANEL_PADDING_X = SELECT_PANEL_PADDING_X * 1.5 + 20;\n\n/**\n * The select panel will only \"fit\" inside the viewport if it is positioned at\n * this value or more away from the viewport boundary.\n */\nexport const SELECT_PANEL_VIEWPORT_PADDING = 8;\n\n/** Injection token that determines the scroll handling while a select is open. */\nexport const MAT_SELECT_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mat-select-scroll-strategy');\n\n/** @docs-private */\nexport function MAT_SELECT_SCROLL_STRATEGY_PROVIDER_FACTORY(overlay: Overlay):\n    () => RepositionScrollStrategy {\n  return () => overlay.scrollStrategies.reposition();\n}\n\n/** @docs-private */\nexport const MAT_SELECT_SCROLL_STRATEGY_PROVIDER = {\n  provide: MAT_SELECT_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_SELECT_SCROLL_STRATEGY_PROVIDER_FACTORY,\n};\n\n/** Change event object that is emitted when the select value has changed. */\nexport class MatSelectChange {\n  constructor(\n    /** Reference to the select that emitted the change event. */\n    public source: MatSelect,\n    /** Current value of the select that emitted the event. */\n    public value: any) { }\n}\n\n// Boilerplate for applying mixins to MatSelect.\n/** @docs-private */\nexport class MatSelectBase {\n  constructor(public _elementRef: ElementRef,\n              public _defaultErrorStateMatcher: ErrorStateMatcher,\n              public _parentForm: NgForm,\n              public _parentFormGroup: FormGroupDirective,\n              public ngControl: NgControl) {}\n}\nexport const _MatSelectMixinBase = mixinDisableRipple(\n    mixinTabIndex(mixinDisabled(mixinErrorState(MatSelectBase))));\n\n\n/**\n * Allows the user to customize the trigger that is displayed when the select has a value.\n */\n@Directive({\n  selector: 'mat-select-trigger'\n})\nexport class MatSelectTrigger {}\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-select',\n  exportAs: 'matSelect',\n  templateUrl: 'select.html',\n  styleUrls: ['select.css'],\n  inputs: ['disabled', 'disableRipple', 'tabIndex'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {\n    'role': 'listbox',\n    '[attr.id]': 'id',\n    '[attr.tabindex]': 'tabIndex',\n    '[attr.aria-label]': '_getAriaLabel()',\n    '[attr.aria-labelledby]': '_getAriaLabelledby()',\n    '[attr.aria-required]': 'required.toString()',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.aria-invalid]': 'errorState',\n    '[attr.aria-owns]': 'panelOpen ? _optionIds : null',\n    '[attr.aria-multiselectable]': 'multiple',\n    '[attr.aria-describedby]': '_ariaDescribedby || null',\n    '[attr.aria-activedescendant]': '_getAriaActiveDescendant()',\n    '[class.mat-select-disabled]': 'disabled',\n    '[class.mat-select-invalid]': 'errorState',\n    '[class.mat-select-required]': 'required',\n    'class': 'mat-select',\n    '(keydown)': '_handleKeydown($event)',\n    '(focus)': '_onFocus()',\n    '(blur)': '_onBlur()',\n  },\n  animations: [\n    matSelectAnimations.transformPanel,\n    matSelectAnimations.fadeInContent\n  ],\n  providers: [\n    {provide: MatFormFieldControl, useExisting: MatSelect},\n    {provide: MAT_OPTION_PARENT_COMPONENT, useExisting: MatSelect}\n  ],\n})\nexport class MatSelect extends _MatSelectMixinBase implements AfterContentInit, OnChanges,\n    OnDestroy, OnInit, DoCheck, ControlValueAccessor, CanDisable, HasTabIndex,\n    MatFormFieldControl<any>, CanUpdateErrorState, CanDisableRipple {\n  /** Whether or not the overlay panel is open. */\n  private _panelOpen = false;\n\n  /** Whether filling out the select is required in the form. */\n  private _required: boolean = false;\n\n  /** The scroll position of the overlay panel, calculated to center the selected option. */\n  private _scrollTop = 0;\n\n  /** The placeholder displayed in the trigger of the select. */\n  private _placeholder: string;\n\n  /** Whether the component is in multiple selection mode. */\n  private _multiple: boolean = false;\n\n  /** Comparison function to specify which option is displayed. Defaults to object equality. */\n  private _compareWith = (o1: any, o2: any) => o1 === o2;\n\n  /** Unique id for this input. */\n  private _uid = `mat-select-${nextUniqueId++}`;\n\n  /** Emits whenever the component is destroyed. */\n  private readonly _destroy = new Subject<void>();\n\n  /** The last measured value for the trigger's client bounding rect. */\n  _triggerRect: ClientRect;\n\n  /** The aria-describedby attribute on the select for improved a11y. */\n  _ariaDescribedby: string;\n\n  /** The cached font-size of the trigger element. */\n  _triggerFontSize = 0;\n\n  /** Deals with the selection logic. */\n  _selectionModel: SelectionModel<MatOption>;\n\n  /** Manages keyboard events for options in the panel. */\n  _keyManager: ActiveDescendantKeyManager<MatOption>;\n\n  /** `View -> model callback called when value changes` */\n  _onChange: (value: any) => void = () => {};\n\n  /** `View -> model callback called when select has been touched` */\n  _onTouched = () => {};\n\n  /** The IDs of child options to be passed to the aria-owns attribute. */\n  _optionIds: string = '';\n\n  /** The value of the select panel's transform-origin property. */\n  _transformOrigin: string = 'top';\n\n  /** Whether the panel's animation is done. */\n  _panelDoneAnimating: boolean = false;\n\n  /** Emits when the panel element is finished transforming in. */\n  _panelDoneAnimatingStream = new Subject<string>();\n\n  /** Strategy that will be used to handle scrolling while the select panel is open. */\n  _scrollStrategy = this._scrollStrategyFactory();\n\n  /**\n   * The y-offset of the overlay panel in relation to the trigger's top start corner.\n   * This must be adjusted to align the selected option text over the trigger text.\n   * when the panel opens. Will change based on the y-position of the selected option.\n   */\n  _offsetY = 0;\n\n  /**\n   * This position config ensures that the top \"start\" corner of the overlay\n   * is aligned with with the top \"start\" of the origin by default (overlapping\n   * the trigger completely). If the panel cannot fit below the trigger, it\n   * will fall back to a position above the trigger.\n   */\n  _positions = [\n    {\n      originX: 'start',\n      originY: 'top',\n      overlayX: 'start',\n      overlayY: 'top',\n    },\n    {\n      originX: 'start',\n      originY: 'bottom',\n      overlayX: 'start',\n      overlayY: 'bottom',\n    },\n  ];\n\n  /** Whether the component is disabling centering of the active option over the trigger. */\n  private _disableOptionCentering: boolean = false;\n\n  /** Whether the select is focused. */\n  get focused(): boolean {\n    return this._focused || this._panelOpen;\n  }\n  /**\n   * @deprecated Setter to be removed as this property is intended to be readonly.\n   * @deletion-target 8.0.0\n   */\n  set focused(value: boolean) {\n    this._focused = value;\n  }\n  private _focused = false;\n\n  /** A name for this control that can be used by `mat-form-field`. */\n  controlType = 'mat-select';\n\n  /** Trigger that opens the select. */\n  @ViewChild('trigger') trigger: ElementRef;\n\n  /** Panel containing the select options. */\n  @ViewChild('panel') panel: ElementRef;\n\n  /** Overlay pane containing the options. */\n  @ViewChild(CdkConnectedOverlay) overlayDir: CdkConnectedOverlay;\n\n  /** All of the defined select options. */\n  @ContentChildren(MatOption, { descendants: true }) options: QueryList<MatOption>;\n\n  /** All of the defined groups of options. */\n  @ContentChildren(MatOptgroup) optionGroups: QueryList<MatOptgroup>;\n\n  /** Classes to be passed to the select panel. Supports the same syntax as `ngClass`. */\n  @Input() panelClass: string|string[]|Set<string>|{[key: string]: any};\n\n  /** User-supplied override of the trigger element. */\n  @ContentChild(MatSelectTrigger) customTrigger: MatSelectTrigger;\n\n  /** Placeholder to be shown if no value has been selected. */\n  @Input()\n  get placeholder(): string { return this._placeholder; }\n  set placeholder(value: string) {\n    this._placeholder = value;\n    this.stateChanges.next();\n  }\n\n  /** Whether the component is required. */\n  @Input()\n  get required(): boolean { return this._required; }\n  set required(value: boolean) {\n    this._required = coerceBooleanProperty(value);\n    this.stateChanges.next();\n  }\n\n  /** Whether the user should be allowed to select multiple options. */\n  @Input()\n  get multiple(): boolean { return this._multiple; }\n  set multiple(value: boolean) {\n    if (this._selectionModel) {\n      throw getMatSelectDynamicMultipleError();\n    }\n\n    this._multiple = coerceBooleanProperty(value);\n  }\n\n  /** Whether to center the active option over the trigger. */\n  @Input()\n  get disableOptionCentering(): boolean { return this._disableOptionCentering; }\n  set disableOptionCentering(value: boolean) {\n    this._disableOptionCentering = coerceBooleanProperty(value);\n  }\n\n  /**\n   * A function to compare the option values with the selected values. The first argument\n   * is a value from an option. The second is a value from the selection. A boolean\n   * should be returned.\n   */\n  @Input()\n  get compareWith() { return this._compareWith; }\n  set compareWith(fn: (o1: any, o2: any) => boolean) {\n    if (typeof fn !== 'function') {\n      throw getMatSelectNonFunctionValueError();\n    }\n    this._compareWith = fn;\n    if (this._selectionModel) {\n      // A different comparator means the selection could change.\n      this._initializeSelection();\n    }\n  }\n\n  /** Value of the select control. */\n  @Input()\n  get value(): any { return this._value; }\n  set value(newValue: any) {\n    if (newValue !== this._value) {\n      this.writeValue(newValue);\n      this._value = newValue;\n    }\n  }\n  private _value: any;\n\n  /** Aria label of the select. If not specified, the placeholder will be used as label. */\n  @Input('aria-label') ariaLabel: string = '';\n\n  /** Input that can be used to specify the `aria-labelledby` attribute. */\n  @Input('aria-labelledby') ariaLabelledby: string;\n\n  /** An object used to control when error messages are shown. */\n  @Input() errorStateMatcher: ErrorStateMatcher;\n\n  /** Unique id of the element. */\n  @Input()\n  get id(): string { return this._id; }\n  set id(value: string) {\n    this._id = value || this._uid;\n    this.stateChanges.next();\n  }\n  private _id: string;\n\n  /** Combined stream of all of the child options' change events. */\n  readonly optionSelectionChanges: Observable<MatOptionSelectionChange> = defer(() => {\n    if (this.options) {\n      return merge(...this.options.map(option => option.onSelectionChange));\n    }\n\n    return this._ngZone.onStable\n      .asObservable()\n      .pipe(take(1), switchMap(() => this.optionSelectionChanges));\n  });\n\n   /** Event emitted when the select panel has been toggled. */\n   @Output() readonly openedChange: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n  /** Event emitted when the select has been opened. */\n  @Output('opened') readonly _openedStream: Observable<void> =\n      this.openedChange.pipe(filter(o => o), map(() => {}));\n\n  /** Event emitted when the select has been closed. */\n  @Output('closed') readonly _closedStream: Observable<void> =\n      this.openedChange.pipe(filter(o => !o), map(() => {}));\n\n   /** Event emitted when the selected value has been changed by the user. */\n  @Output() readonly selectionChange: EventEmitter<MatSelectChange> =\n      new EventEmitter<MatSelectChange>();\n\n  /**\n   * Event that emits whenever the raw value of the select changes. This is here primarily\n   * to facilitate the two-way binding for the `value` input.\n   * @docs-private\n   */\n  @Output() readonly valueChange: EventEmitter<any> = new EventEmitter<any>();\n\n  constructor(\n    private _viewportRuler: ViewportRuler,\n    private _changeDetectorRef: ChangeDetectorRef,\n    private _ngZone: NgZone,\n    _defaultErrorStateMatcher: ErrorStateMatcher,\n    elementRef: ElementRef,\n    @Optional() private _dir: Directionality,\n    @Optional() _parentForm: NgForm,\n    @Optional() _parentFormGroup: FormGroupDirective,\n    @Optional() private _parentFormField: MatFormField,\n    @Self() @Optional() public ngControl: NgControl,\n    @Attribute('tabindex') tabIndex: string,\n    @Inject(MAT_SELECT_SCROLL_STRATEGY) private _scrollStrategyFactory) {\n    super(elementRef, _defaultErrorStateMatcher, _parentForm,\n          _parentFormGroup, ngControl);\n\n    if (this.ngControl) {\n      // Note: we provide the value accessor through here, instead of\n      // the `providers` to avoid running into a circular import.\n      this.ngControl.valueAccessor = this;\n    }\n\n    this.tabIndex = parseInt(tabIndex) || 0;\n\n    // Force setter to be called in case id was not specified.\n    this.id = this.id;\n  }\n\n  ngOnInit() {\n    this._selectionModel = new SelectionModel<MatOption>(this.multiple);\n    this.stateChanges.next();\n\n    // We need `distinctUntilChanged` here, because some browsers will\n    // fire the animation end event twice for the same animation. See:\n    // https://github.com/angular/angular/issues/24084\n    this._panelDoneAnimatingStream\n      .pipe(distinctUntilChanged(), takeUntil(this._destroy))\n      .subscribe(() => {\n        if (this.panelOpen) {\n          this._scrollTop = 0;\n          this.openedChange.emit(true);\n        } else {\n          this.openedChange.emit(false);\n          this._panelDoneAnimating = false;\n          this.overlayDir.offsetX = 0;\n          this._changeDetectorRef.markForCheck();\n        }\n      });\n  }\n\n  ngAfterContentInit() {\n    this._initKeyManager();\n\n    this._selectionModel.onChange!.pipe(takeUntil(this._destroy)).subscribe(event => {\n      event.added.forEach(option => option.select());\n      event.removed.forEach(option => option.deselect());\n    });\n\n    this.options.changes.pipe(startWith(null), takeUntil(this._destroy)).subscribe(() => {\n      this._resetOptions();\n      this._initializeSelection();\n    });\n  }\n\n  ngDoCheck() {\n    if (this.ngControl) {\n      this.updateErrorState();\n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    // Updating the disabled state is handled by `mixinDisabled`, but we need to additionally let\n    // the parent form field know to run change detection when the disabled state changes.\n    if (changes.disabled) {\n      this.stateChanges.next();\n    }\n  }\n\n  ngOnDestroy() {\n    this._destroy.next();\n    this._destroy.complete();\n    this.stateChanges.complete();\n  }\n\n  /** Toggles the overlay panel open or closed. */\n  toggle(): void {\n    this.panelOpen ? this.close() : this.open();\n  }\n\n  /** Opens the overlay panel. */\n  open(): void {\n    if (this.disabled || !this.options || !this.options.length || this._panelOpen) {\n      return;\n    }\n\n    this._triggerRect = this.trigger.nativeElement.getBoundingClientRect();\n    // Note: The computed font-size will be a string pixel value (e.g. \"16px\").\n    // `parseInt` ignores the trailing 'px' and converts this to a number.\n    this._triggerFontSize = parseInt(getComputedStyle(this.trigger.nativeElement)['font-size']);\n\n    this._panelOpen = true;\n    this._keyManager.withHorizontalOrientation(null);\n    this._calculateOverlayPosition();\n    this._highlightCorrectOption();\n    this._changeDetectorRef.markForCheck();\n\n    // Set the font size on the panel element once it exists.\n    this._ngZone.onStable.asObservable().pipe(take(1)).subscribe(() => {\n      if (this._triggerFontSize && this.overlayDir.overlayRef &&\n          this.overlayDir.overlayRef.overlayElement) {\n        this.overlayDir.overlayRef.overlayElement.style.fontSize = `${this._triggerFontSize}px`;\n      }\n    });\n  }\n\n  /** Closes the overlay panel and focuses the host element. */\n  close(): void {\n    if (this._panelOpen) {\n      this._panelOpen = false;\n      this._keyManager.withHorizontalOrientation(this._isRtl() ? 'rtl' : 'ltr');\n      this._changeDetectorRef.markForCheck();\n      this._onTouched();\n    }\n  }\n\n  /**\n   * Sets the select's value. Part of the ControlValueAccessor interface\n   * required to integrate with Angular's core forms API.\n   *\n   * @param value New value to be written to the model.\n   */\n  writeValue(value: any): void {\n    if (this.options) {\n      this._setSelectionByValue(value);\n    }\n  }\n\n  /**\n   * Saves a callback function to be invoked when the select's value\n   * changes from user input. Part of the ControlValueAccessor interface\n   * required to integrate with Angular's core forms API.\n   *\n   * @param fn Callback to be triggered when the value changes.\n   */\n  registerOnChange(fn: (value: any) => void): void {\n    this._onChange = fn;\n  }\n\n  /**\n   * Saves a callback function to be invoked when the select is blurred\n   * by the user. Part of the ControlValueAccessor interface required\n   * to integrate with Angular's core forms API.\n   *\n   * @param fn Callback to be triggered when the component has been touched.\n   */\n  registerOnTouched(fn: () => {}): void {\n    this._onTouched = fn;\n  }\n\n  /**\n   * Disables the select. Part of the ControlValueAccessor interface required\n   * to integrate with Angular's core forms API.\n   *\n   * @param isDisabled Sets whether the component is disabled.\n   */\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n    this._changeDetectorRef.markForCheck();\n    this.stateChanges.next();\n  }\n\n  /** Whether or not the overlay panel is open. */\n  get panelOpen(): boolean {\n    return this._panelOpen;\n  }\n\n  /** The currently selected option. */\n  get selected(): MatOption | MatOption[] {\n    return this.multiple ? this._selectionModel.selected : this._selectionModel.selected[0];\n  }\n\n  /** The value displayed in the trigger. */\n  get triggerValue(): string {\n    if (this.empty) {\n      return '';\n    }\n\n    if (this._multiple) {\n      const selectedOptions = this._selectionModel.selected.map(option => option.viewValue);\n\n      if (this._isRtl()) {\n        selectedOptions.reverse();\n      }\n\n      // TODO(crisbeto): delimiter should be configurable for proper localization.\n      return selectedOptions.join(', ');\n    }\n\n    return this._selectionModel.selected[0].viewValue;\n  }\n\n  /** Whether the element is in RTL mode. */\n  _isRtl(): boolean {\n    return this._dir ? this._dir.value === 'rtl' : false;\n  }\n\n  /** Handles all keydown events on the select. */\n  _handleKeydown(event: KeyboardEvent): void {\n    if (!this.disabled) {\n      this.panelOpen ? this._handleOpenKeydown(event) : this._handleClosedKeydown(event);\n    }\n  }\n\n  /** Handles keyboard events while the select is closed. */\n  private _handleClosedKeydown(event: KeyboardEvent): void {\n    const keyCode = event.keyCode;\n    const isArrowKey = keyCode === DOWN_ARROW || keyCode === UP_ARROW ||\n        keyCode === LEFT_ARROW || keyCode === RIGHT_ARROW;\n    const isOpenKey = keyCode === ENTER || keyCode === SPACE;\n\n    // Open the select on ALT + arrow key to match the native <select>\n    if (isOpenKey || ((this.multiple || event.altKey) && isArrowKey)) {\n      event.preventDefault(); // prevents the page from scrolling down when pressing space\n      this.open();\n    } else if (!this.multiple) {\n      this._keyManager.onKeydown(event);\n    }\n  }\n\n  /** Handles keyboard events when the selected is open. */\n  private _handleOpenKeydown(event: KeyboardEvent): void {\n    const keyCode = event.keyCode;\n    const isArrowKey = keyCode === DOWN_ARROW || keyCode === UP_ARROW;\n    const manager = this._keyManager;\n\n    if (keyCode === HOME || keyCode === END) {\n      event.preventDefault();\n      keyCode === HOME ? manager.setFirstItemActive() : manager.setLastItemActive();\n    } else if (isArrowKey && event.altKey) {\n      // Close the select on ALT + arrow key to match the native <select>\n      event.preventDefault();\n      this.close();\n    } else if ((keyCode === ENTER || keyCode === SPACE) && manager.activeItem) {\n      event.preventDefault();\n      manager.activeItem._selectViaInteraction();\n    } else if (this._multiple && keyCode === A && event.ctrlKey) {\n      event.preventDefault();\n      const hasDeselectedOptions = this.options.some(option => !option.selected);\n      this.options.forEach(option => hasDeselectedOptions ? option.select() : option.deselect());\n    } else {\n      const previouslyFocusedIndex = manager.activeItemIndex;\n\n      manager.onKeydown(event);\n\n      if (this._multiple && isArrowKey && event.shiftKey && manager.activeItem &&\n          manager.activeItemIndex !== previouslyFocusedIndex) {\n        manager.activeItem._selectViaInteraction();\n      }\n    }\n  }\n\n  /**\n   * When the panel content is done fading in, the _panelDoneAnimating property is\n   * set so the proper class can be added to the panel.\n   */\n  _onFadeInDone(): void {\n    this._panelDoneAnimating = this.panelOpen;\n    this._changeDetectorRef.markForCheck();\n  }\n\n  _onFocus() {\n    if (!this.disabled) {\n      this._focused = true;\n      this.stateChanges.next();\n    }\n  }\n\n  /**\n   * Calls the touched callback only if the panel is closed. Otherwise, the trigger will\n   * \"blur\" to the panel when it opens, causing a false positive.\n   */\n  _onBlur() {\n    this._focused = false;\n\n    if (!this.disabled && !this.panelOpen) {\n      this._onTouched();\n      this._changeDetectorRef.markForCheck();\n      this.stateChanges.next();\n    }\n  }\n\n  /**\n   * Callback that is invoked when the overlay panel has been attached.\n   */\n  _onAttached(): void {\n    this.overlayDir.positionChange.pipe(take(1)).subscribe(() => {\n      this._changeDetectorRef.detectChanges();\n      this._calculateOverlayOffsetX();\n      this.panel.nativeElement.scrollTop = this._scrollTop;\n    });\n  }\n\n  /** Returns the theme to be used on the panel. */\n  _getPanelTheme(): string {\n    return this._parentFormField ? `mat-${this._parentFormField.color}` : '';\n  }\n\n  /** Whether the select has a value. */\n  get empty(): boolean {\n    return !this._selectionModel || this._selectionModel.isEmpty();\n  }\n\n  private _initializeSelection(): void {\n    // Defer setting the value in order to avoid the \"Expression\n    // has changed after it was checked\" errors from Angular.\n    Promise.resolve().then(() => {\n      this._setSelectionByValue(this.ngControl ? this.ngControl.value : this._value);\n    });\n  }\n\n  /**\n   * Sets the selected option based on a value. If no option can be\n   * found with the designated value, the select trigger is cleared.\n   */\n  private _setSelectionByValue(value: any | any[]): void {\n    if (this.multiple && value) {\n      if (!Array.isArray(value)) {\n        throw getMatSelectNonArrayValueError();\n      }\n\n      this._selectionModel.clear();\n      value.forEach((currentValue: any) => this._selectValue(currentValue));\n      this._sortValues();\n    } else {\n      this._selectionModel.clear();\n      const correspondingOption = this._selectValue(value);\n\n      // Shift focus to the active item. Note that we shouldn't do this in multiple\n      // mode, because we don't know what option the user interacted with last.\n      if (correspondingOption) {\n        this._keyManager.setActiveItem(correspondingOption);\n      }\n    }\n\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /**\n   * Finds and selects and option based on its value.\n   * @returns Option that has the corresponding value.\n   */\n  private _selectValue(value: any): MatOption | undefined {\n    const correspondingOption = this.options.find((option: MatOption) => {\n      try {\n        // Treat null as a special reset value.\n        return option.value != null && this._compareWith(option.value,  value);\n      } catch (error) {\n        if (isDevMode()) {\n          // Notify developers of errors in their comparator.\n          console.warn(error);\n        }\n        return false;\n      }\n    });\n\n    if (correspondingOption) {\n      this._selectionModel.select(correspondingOption);\n    }\n\n    return correspondingOption;\n  }\n\n  /** Sets up a key manager to listen to keyboard events on the overlay panel. */\n  private _initKeyManager() {\n    this._keyManager = new ActiveDescendantKeyManager<MatOption>(this.options)\n      .withTypeAhead()\n      .withVerticalOrientation()\n      .withHorizontalOrientation(this._isRtl() ? 'rtl' : 'ltr');\n\n    this._keyManager.tabOut.pipe(takeUntil(this._destroy)).subscribe(() => {\n      // Restore focus to the trigger before closing. Ensures that the focus\n      // position won't be lost if the user got focus into the overlay.\n      this.focus();\n      this.close();\n    });\n\n    this._keyManager.change.pipe(takeUntil(this._destroy)).subscribe(() => {\n      if (this._panelOpen && this.panel) {\n        this._scrollActiveOptionIntoView();\n      } else if (!this._panelOpen && !this.multiple && this._keyManager.activeItem) {\n        this._keyManager.activeItem._selectViaInteraction();\n      }\n    });\n  }\n\n  /** Drops current option subscriptions and IDs and resets from scratch. */\n  private _resetOptions(): void {\n    const changedOrDestroyed = merge(this.options.changes, this._destroy);\n\n    this.optionSelectionChanges.pipe(takeUntil(changedOrDestroyed)).subscribe(event => {\n      this._onSelect(event.source, event.isUserInput);\n\n      if (event.isUserInput && !this.multiple && this._panelOpen) {\n        this.close();\n        this.focus();\n      }\n    });\n\n    // Listen to changes in the internal state of the options and react accordingly.\n    // Handles cases like the labels of the selected options changing.\n    merge(...this.options.map(option => option._stateChanges))\n      .pipe(takeUntil(changedOrDestroyed))\n      .subscribe(() => {\n        this._changeDetectorRef.markForCheck();\n        this.stateChanges.next();\n      });\n\n    this._setOptionIds();\n  }\n\n  /** Invoked when an option is clicked. */\n  private _onSelect(option: MatOption, isUserInput: boolean): void {\n    const wasSelected = this._selectionModel.isSelected(option);\n\n    if (option.value == null && !this._multiple) {\n      option.deselect();\n      this._selectionModel.clear();\n      this._propagateChanges(option.value);\n    } else {\n      option.selected ? this._selectionModel.select(option) : this._selectionModel.deselect(option);\n\n      if (isUserInput) {\n        this._keyManager.setActiveItem(option);\n      }\n\n      if (this.multiple) {\n        this._sortValues();\n\n        if (isUserInput) {\n          // In case the user selected the option with their mouse, we\n          // want to restore focus back to the trigger, in order to\n          // prevent the select keyboard controls from clashing with\n          // the ones from `mat-option`.\n          this.focus();\n        }\n      }\n    }\n\n    if (wasSelected !== this._selectionModel.isSelected(option)) {\n      this._propagateChanges();\n    }\n\n    this.stateChanges.next();\n  }\n\n  /** Sorts the selected values in the selected based on their order in the panel. */\n  private _sortValues() {\n    if (this.multiple) {\n      const options = this.options.toArray();\n      this._selectionModel.sort((a, b) => options.indexOf(a) - options.indexOf(b));\n      this.stateChanges.next();\n    }\n  }\n\n  /** Emits change event to set the model value. */\n  private _propagateChanges(fallbackValue?: any): void {\n    let valueToEmit: any = null;\n\n    if (this.multiple) {\n      valueToEmit = (this.selected as MatOption[]).map(option => option.value);\n    } else {\n      valueToEmit = this.selected ? (this.selected as MatOption).value : fallbackValue;\n    }\n\n    this._value = valueToEmit;\n    this.valueChange.emit(valueToEmit);\n    this._onChange(valueToEmit);\n    this.selectionChange.emit(new MatSelectChange(this, valueToEmit));\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Records option IDs to pass to the aria-owns property. */\n  private _setOptionIds() {\n    this._optionIds = this.options.map(option => option.id).join(' ');\n  }\n\n  /**\n   * Highlights the selected item. If no option is selected, it will highlight\n   * the first item instead.\n   */\n  private _highlightCorrectOption(): void {\n    if (this._keyManager) {\n      if (this.empty) {\n        this._keyManager.setFirstItemActive();\n      } else {\n        this._keyManager.setActiveItem(this._selectionModel.selected[0]);\n      }\n    }\n  }\n\n  /** Scrolls the active option into view. */\n  private _scrollActiveOptionIntoView(): void {\n    const activeOptionIndex = this._keyManager.activeItemIndex || 0;\n    const labelCount = _countGroupLabelsBeforeOption(activeOptionIndex, this.options,\n        this.optionGroups);\n\n    this.panel.nativeElement.scrollTop = _getOptionScrollPosition(\n      activeOptionIndex + labelCount,\n      this._getItemHeight(),\n      this.panel.nativeElement.scrollTop,\n      SELECT_PANEL_MAX_HEIGHT\n    );\n  }\n\n  /** Focuses the select element. */\n  focus(): void {\n    this._elementRef.nativeElement.focus();\n  }\n\n  /** Gets the index of the provided option in the option list. */\n  private _getOptionIndex(option: MatOption): number | undefined {\n    return this.options.reduce((result: number, current: MatOption, index: number) => {\n      return result === undefined ? (option === current ? index : undefined) : result;\n    }, undefined);\n  }\n\n  /** Calculates the scroll position and x- and y-offsets of the overlay panel. */\n  private _calculateOverlayPosition(): void {\n    const itemHeight = this._getItemHeight();\n    const items = this._getItemCount();\n    const panelHeight = Math.min(items * itemHeight, SELECT_PANEL_MAX_HEIGHT);\n    const scrollContainerHeight = items * itemHeight;\n\n    // The farthest the panel can be scrolled before it hits the bottom\n    const maxScroll = scrollContainerHeight - panelHeight;\n\n    // If no value is selected we open the popup to the first item.\n    let selectedOptionOffset =\n        this.empty ? 0 : this._getOptionIndex(this._selectionModel.selected[0])!;\n\n    selectedOptionOffset += _countGroupLabelsBeforeOption(selectedOptionOffset, this.options,\n        this.optionGroups);\n\n    // We must maintain a scroll buffer so the selected option will be scrolled to the\n    // center of the overlay panel rather than the top.\n    const scrollBuffer = panelHeight / 2;\n    this._scrollTop = this._calculateOverlayScroll(selectedOptionOffset, scrollBuffer, maxScroll);\n    this._offsetY = this._calculateOverlayOffsetY(selectedOptionOffset, scrollBuffer, maxScroll);\n\n    this._checkOverlayWithinViewport(maxScroll);\n  }\n\n  /**\n   * Calculates the scroll position of the select's overlay panel.\n   *\n   * Attempts to center the selected option in the panel. If the option is\n   * too high or too low in the panel to be scrolled to the center, it clamps the\n   * scroll position to the min or max scroll positions respectively.\n   */\n  _calculateOverlayScroll(selectedIndex: number, scrollBuffer: number,\n                          maxScroll: number): number {\n    const itemHeight = this._getItemHeight();\n    const optionOffsetFromScrollTop = itemHeight * selectedIndex;\n    const halfOptionHeight = itemHeight / 2;\n\n    // Starts at the optionOffsetFromScrollTop, which scrolls the option to the top of the\n    // scroll container, then subtracts the scroll buffer to scroll the option down to\n    // the center of the overlay panel. Half the option height must be re-added to the\n    // scrollTop so the option is centered based on its middle, not its top edge.\n    const optimalScrollPosition = optionOffsetFromScrollTop - scrollBuffer + halfOptionHeight;\n    return Math.min(Math.max(0, optimalScrollPosition), maxScroll);\n  }\n\n  /** Returns the aria-label of the select component. */\n  _getAriaLabel(): string | null {\n    // If an ariaLabelledby value has been set by the consumer, the select should not overwrite the\n    // `aria-labelledby` value by setting the ariaLabel to the placeholder.\n    return this.ariaLabelledby ? null : this.ariaLabel || this.placeholder;\n  }\n\n  /** Returns the aria-labelledby of the select component. */\n  _getAriaLabelledby(): string | null {\n    if (this.ariaLabelledby) {\n      return this.ariaLabelledby;\n    }\n\n    // Note: we use `_getAriaLabel` here, because we want to check whether there's a\n    // computed label. `this.ariaLabel` is only the user-specified label.\n    if (!this._parentFormField || this._getAriaLabel()) {\n      return null;\n    }\n\n    return this._parentFormField._labelId || null;\n  }\n\n  /** Determines the `aria-activedescendant` to be set on the host. */\n  _getAriaActiveDescendant(): string | null {\n    if (this.panelOpen && this._keyManager && this._keyManager.activeItem) {\n      return this._keyManager.activeItem.id;\n    }\n\n    return null;\n  }\n\n  /**\n   * Sets the x-offset of the overlay panel in relation to the trigger's top start corner.\n   * This must be adjusted to align the selected option text over the trigger text when\n   * the panel opens. Will change based on LTR or RTL text direction. Note that the offset\n   * can't be calculated until the panel has been attached, because we need to know the\n   * content width in order to constrain the panel within the viewport.\n   */\n  private _calculateOverlayOffsetX(): void {\n    const overlayRect = this.overlayDir.overlayRef.overlayElement.getBoundingClientRect();\n    const viewportSize = this._viewportRuler.getViewportSize();\n    const isRtl = this._isRtl();\n    const paddingWidth = this.multiple ? SELECT_MULTIPLE_PANEL_PADDING_X + SELECT_PANEL_PADDING_X :\n                                         SELECT_PANEL_PADDING_X * 2;\n    let offsetX: number;\n\n    // Adjust the offset, depending on the option padding.\n    if (this.multiple) {\n      offsetX = SELECT_MULTIPLE_PANEL_PADDING_X;\n    } else {\n      let selected = this._selectionModel.selected[0] || this.options.first;\n      offsetX = selected && selected.group ? SELECT_PANEL_INDENT_PADDING_X : SELECT_PANEL_PADDING_X;\n    }\n\n    // Invert the offset in LTR.\n    if (!isRtl) {\n      offsetX *= -1;\n    }\n\n    // Determine how much the select overflows on each side.\n    const leftOverflow = 0 - (overlayRect.left + offsetX - (isRtl ? paddingWidth : 0));\n    const rightOverflow = overlayRect.right + offsetX - viewportSize.width\n                          + (isRtl ? 0 : paddingWidth);\n\n    // If the element overflows on either side, reduce the offset to allow it to fit.\n    if (leftOverflow > 0) {\n      offsetX += leftOverflow + SELECT_PANEL_VIEWPORT_PADDING;\n    } else if (rightOverflow > 0) {\n      offsetX -= rightOverflow + SELECT_PANEL_VIEWPORT_PADDING;\n    }\n\n    // Set the offset directly in order to avoid having to go through change detection and\n    // potentially triggering \"changed after it was checked\" errors. Round the value to avoid\n    // blurry content in some browsers.\n    this.overlayDir.offsetX = Math.round(offsetX);\n    this.overlayDir.overlayRef.updatePosition();\n  }\n\n  /**\n   * Calculates the y-offset of the select's overlay panel in relation to the\n   * top start corner of the trigger. It has to be adjusted in order for the\n   * selected option to be aligned over the trigger when the panel opens.\n   */\n  private _calculateOverlayOffsetY(selectedIndex: number, scrollBuffer: number,\n                                  maxScroll: number): number {\n    const itemHeight = this._getItemHeight();\n    const optionHeightAdjustment = (itemHeight - this._triggerRect.height) / 2;\n    const maxOptionsDisplayed = Math.floor(SELECT_PANEL_MAX_HEIGHT / itemHeight);\n    let optionOffsetFromPanelTop: number;\n\n    // Disable offset if requested by user by returning 0 as value to offset\n    if (this._disableOptionCentering) {\n      return 0;\n    }\n\n    if (this._scrollTop === 0) {\n      optionOffsetFromPanelTop = selectedIndex * itemHeight;\n    } else if (this._scrollTop === maxScroll) {\n      const firstDisplayedIndex = this._getItemCount() - maxOptionsDisplayed;\n      const selectedDisplayIndex = selectedIndex - firstDisplayedIndex;\n\n      // The first item is partially out of the viewport. Therefore we need to calculate what\n      // portion of it is shown in the viewport and account for it in our offset.\n      let partialItemHeight =\n          itemHeight - (this._getItemCount() * itemHeight - SELECT_PANEL_MAX_HEIGHT) % itemHeight;\n\n      // Because the panel height is longer than the height of the options alone,\n      // there is always extra padding at the top or bottom of the panel. When\n      // scrolled to the very bottom, this padding is at the top of the panel and\n      // must be added to the offset.\n      optionOffsetFromPanelTop = selectedDisplayIndex * itemHeight + partialItemHeight;\n    } else {\n      // If the option was scrolled to the middle of the panel using a scroll buffer,\n      // its offset will be the scroll buffer minus the half height that was added to\n      // center it.\n      optionOffsetFromPanelTop = scrollBuffer - itemHeight / 2;\n    }\n\n    // The final offset is the option's offset from the top, adjusted for the height difference,\n    // multiplied by -1 to ensure that the overlay moves in the correct direction up the page.\n    // The value is rounded to prevent some browsers from blurring the content.\n    return Math.round(optionOffsetFromPanelTop * -1 - optionHeightAdjustment);\n  }\n\n  /**\n   * Checks that the attempted overlay position will fit within the viewport.\n   * If it will not fit, tries to adjust the scroll position and the associated\n   * y-offset so the panel can open fully on-screen. If it still won't fit,\n   * sets the offset back to 0 to allow the fallback position to take over.\n   */\n  private _checkOverlayWithinViewport(maxScroll: number): void {\n    const itemHeight = this._getItemHeight();\n    const viewportSize = this._viewportRuler.getViewportSize();\n\n    const topSpaceAvailable = this._triggerRect.top - SELECT_PANEL_VIEWPORT_PADDING;\n    const bottomSpaceAvailable =\n        viewportSize.height - this._triggerRect.bottom - SELECT_PANEL_VIEWPORT_PADDING;\n\n    const panelHeightTop = Math.abs(this._offsetY);\n    const totalPanelHeight =\n        Math.min(this._getItemCount() * itemHeight, SELECT_PANEL_MAX_HEIGHT);\n    const panelHeightBottom = totalPanelHeight - panelHeightTop - this._triggerRect.height;\n\n    if (panelHeightBottom > bottomSpaceAvailable) {\n      this._adjustPanelUp(panelHeightBottom, bottomSpaceAvailable);\n    } else if (panelHeightTop > topSpaceAvailable) {\n     this._adjustPanelDown(panelHeightTop, topSpaceAvailable, maxScroll);\n    } else {\n      this._transformOrigin = this._getOriginBasedOnOption();\n    }\n  }\n\n  /** Adjusts the overlay panel up to fit in the viewport. */\n  private _adjustPanelUp(panelHeightBottom: number, bottomSpaceAvailable: number) {\n    // Browsers ignore fractional scroll offsets, so we need to round.\n    const distanceBelowViewport = Math.round(panelHeightBottom - bottomSpaceAvailable);\n\n    // Scrolls the panel up by the distance it was extending past the boundary, then\n    // adjusts the offset by that amount to move the panel up into the viewport.\n    this._scrollTop -= distanceBelowViewport;\n    this._offsetY -= distanceBelowViewport;\n    this._transformOrigin = this._getOriginBasedOnOption();\n\n    // If the panel is scrolled to the very top, it won't be able to fit the panel\n    // by scrolling, so set the offset to 0 to allow the fallback position to take\n    // effect.\n    if (this._scrollTop <= 0) {\n      this._scrollTop = 0;\n      this._offsetY = 0;\n      this._transformOrigin = `50% bottom 0px`;\n    }\n  }\n\n  /** Adjusts the overlay panel down to fit in the viewport. */\n  private _adjustPanelDown(panelHeightTop: number, topSpaceAvailable: number,\n                           maxScroll: number) {\n    // Browsers ignore fractional scroll offsets, so we need to round.\n    const distanceAboveViewport = Math.round(panelHeightTop - topSpaceAvailable);\n\n    // Scrolls the panel down by the distance it was extending past the boundary, then\n    // adjusts the offset by that amount to move the panel down into the viewport.\n    this._scrollTop += distanceAboveViewport;\n    this._offsetY += distanceAboveViewport;\n    this._transformOrigin = this._getOriginBasedOnOption();\n\n    // If the panel is scrolled to the very bottom, it won't be able to fit the\n    // panel by scrolling, so set the offset to 0 to allow the fallback position\n    // to take effect.\n    if (this._scrollTop >= maxScroll) {\n      this._scrollTop = maxScroll;\n      this._offsetY = 0;\n      this._transformOrigin = `50% top 0px`;\n      return;\n    }\n  }\n\n  /** Sets the transform origin point based on the selected option. */\n  private _getOriginBasedOnOption(): string {\n    const itemHeight = this._getItemHeight();\n    const optionHeightAdjustment = (itemHeight - this._triggerRect.height) / 2;\n    const originY = Math.abs(this._offsetY) - optionHeightAdjustment + itemHeight / 2;\n    return `50% ${originY}px 0px`;\n  }\n\n  /** Calculates the amount of items in the select. This includes options and group labels. */\n  private _getItemCount(): number {\n    return this.options.length + this.optionGroups.length;\n  }\n\n  /** Calculates the height of the select's options. */\n  private _getItemHeight(): number {\n    return this._triggerFontSize * SELECT_ITEM_HEIGHT_EM;\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  setDescribedByIds(ids: string[]) {\n    this._ariaDescribedby = ids.join(' ');\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  onContainerClick() {\n    this.focus();\n    this.open();\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  get shouldLabelFloat(): boolean {\n    return this._panelOpen || !this.empty;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {AnimationEvent} from '@angular/animations';\nimport {AriaDescriber, FocusMonitor} from '@angular/cdk/a11y';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {ESCAPE} from '@angular/cdk/keycodes';\nimport {BreakpointObserver, Breakpoints, BreakpointState} from '@angular/cdk/layout';\nimport {\n  FlexibleConnectedPositionStrategy,\n  HorizontalConnectionPos,\n  OriginConnectionPosition,\n  Overlay,\n  OverlayConnectionPosition,\n  OverlayRef,\n  ScrollDispatcher,\n  ScrollStrategy,\n  VerticalConnectionPos,\n} from '@angular/cdk/overlay';\nimport {Platform} from '@angular/cdk/platform';\nimport {ComponentPortal} from '@angular/cdk/portal';\nimport {take, takeUntil} from 'rxjs/operators';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  Directive,\n  ElementRef,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  ViewContainerRef,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {Subject, Observable} from 'rxjs';\nimport {matTooltipAnimations} from './tooltip-animations';\n\n\nexport type TooltipPosition = 'left' | 'right' | 'above' | 'below' | 'before' | 'after';\n\n/** Time in ms to throttle repositioning after scroll events. */\nexport const SCROLL_THROTTLE_MS = 20;\n\n/** CSS class that will be attached to the overlay panel. */\nexport const TOOLTIP_PANEL_CLASS = 'mat-tooltip-panel';\n\n/** Creates an error to be thrown if the user supplied an invalid tooltip position. */\nexport function getMatTooltipInvalidPositionError(position: string) {\n  return Error(`Tooltip position \"${position}\" is invalid.`);\n}\n\n/** Injection token that determines the scroll handling while a tooltip is visible. */\nexport const MAT_TOOLTIP_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mat-tooltip-scroll-strategy');\n\n/** @docs-private */\nexport function MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY(overlay: Overlay): () => ScrollStrategy {\n  return () => overlay.scrollStrategies.reposition({scrollThrottle: SCROLL_THROTTLE_MS});\n}\n\n/** @docs-private */\nexport const MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY_PROVIDER = {\n  provide: MAT_TOOLTIP_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY,\n};\n\n/** Default `matTooltip` options that can be overridden. */\nexport interface MatTooltipDefaultOptions {\n  showDelay: number;\n  hideDelay: number;\n  touchendHideDelay: number;\n}\n\n/** Injection token to be used to override the default options for `matTooltip`. */\nexport const MAT_TOOLTIP_DEFAULT_OPTIONS =\n    new InjectionToken<MatTooltipDefaultOptions>('mat-tooltip-default-options', {\n      providedIn: 'root',\n      factory: MAT_TOOLTIP_DEFAULT_OPTIONS_FACTORY\n    });\n\nexport function MAT_TOOLTIP_DEFAULT_OPTIONS_FACTORY(): MatTooltipDefaultOptions {\n  return {\n    showDelay: 0,\n    hideDelay: 0,\n    touchendHideDelay: 1500,\n  };\n}\n\n/**\n * Directive that attaches a material design tooltip to the host element. Animates the showing and\n * hiding of a tooltip provided position (defaults to below the element).\n *\n * https://material.google.com/components/tooltips.html\n */\n@Directive({\n  selector: '[matTooltip]',\n  exportAs: 'matTooltip',\n  host: {\n    '(longpress)': 'show()',\n    '(keydown)': '_handleKeydown($event)',\n    '(touchend)': '_handleTouchend()',\n  },\n})\nexport class MatTooltip implements OnDestroy {\n  _overlayRef: OverlayRef | null;\n  _tooltipInstance: TooltipComponent | null;\n\n  private _portal: ComponentPortal<TooltipComponent>;\n  private _position: TooltipPosition = 'below';\n  private _disabled: boolean = false;\n  private _tooltipClass: string|string[]|Set<string>|{[key: string]: any};\n\n  /** Allows the user to define the position of the tooltip relative to the parent element */\n  @Input('matTooltipPosition')\n  get position(): TooltipPosition { return this._position; }\n  set position(value: TooltipPosition) {\n    if (value !== this._position) {\n      this._position = value;\n\n      if (this._overlayRef) {\n        this._updatePosition();\n\n        if (this._tooltipInstance) {\n          this._tooltipInstance!.show(0);\n        }\n\n        this._overlayRef.updatePosition();\n      }\n    }\n  }\n\n  /** Disables the display of the tooltip. */\n  @Input('matTooltipDisabled')\n  get disabled(): boolean { return this._disabled; }\n  set disabled(value) {\n    this._disabled = coerceBooleanProperty(value);\n\n    // If tooltip is disabled, hide immediately.\n    if (this._disabled) {\n      this.hide(0);\n    }\n  }\n\n  /** The default delay in ms before showing the tooltip after show is called */\n  @Input('matTooltipShowDelay') showDelay = this._defaultOptions.showDelay;\n\n  /** The default delay in ms before hiding the tooltip after hide is called */\n  @Input('matTooltipHideDelay') hideDelay = this._defaultOptions.hideDelay;\n\n  private _message = '';\n\n  /** The message to be displayed in the tooltip */\n  @Input('matTooltip')\n  get message() { return this._message; }\n  set message(value: string) {\n    this._ariaDescriber.removeDescription(this._elementRef.nativeElement, this._message);\n\n    // If the message is not a string (e.g. number), convert it to a string and trim it.\n    this._message = value != null ? `${value}`.trim() : '';\n\n    if (!this._message && this._isTooltipVisible()) {\n      this.hide(0);\n    } else {\n      this._updateTooltipMessage();\n      this._ariaDescriber.describe(this._elementRef.nativeElement, this.message);\n    }\n  }\n\n  /** Classes to be passed to the tooltip. Supports the same syntax as `ngClass`. */\n  @Input('matTooltipClass')\n  get tooltipClass() { return this._tooltipClass; }\n  set tooltipClass(value: string|string[]|Set<string>|{[key: string]: any}) {\n    this._tooltipClass = value;\n    if (this._tooltipInstance) {\n      this._setTooltipClass(this._tooltipClass);\n    }\n  }\n\n  private _manualListeners = new Map<string, Function>();\n\n  /** Emits when the component is destroyed. */\n  private readonly _destroyed = new Subject<void>();\n\n  constructor(\n    private _overlay: Overlay,\n    private _elementRef: ElementRef,\n    private _scrollDispatcher: ScrollDispatcher,\n    private _viewContainerRef: ViewContainerRef,\n    private _ngZone: NgZone,\n    private _platform: Platform,\n    private _ariaDescriber: AriaDescriber,\n    private _focusMonitor: FocusMonitor,\n    @Inject(MAT_TOOLTIP_SCROLL_STRATEGY) private _scrollStrategy,\n    @Optional() private _dir: Directionality,\n    @Optional() @Inject(MAT_TOOLTIP_DEFAULT_OPTIONS)\n      private _defaultOptions: MatTooltipDefaultOptions) {\n\n    const element: HTMLElement = _elementRef.nativeElement;\n\n    // The mouse events shouldn't be bound on iOS devices, because\n    // they can prevent the first tap from firing its click event.\n    if (!_platform.IOS) {\n      this._manualListeners.set('mouseenter', () => this.show());\n      this._manualListeners.set('mouseleave', () => this.hide());\n\n      this._manualListeners\n        .forEach((listener, event) => _elementRef.nativeElement.addEventListener(event, listener));\n    } else if (element.nodeName === 'INPUT' || element.nodeName === 'TEXTAREA') {\n      // When we bind a gesture event on an element (in this case `longpress`), HammerJS\n      // will add some inline styles by default, including `user-select: none`. This is\n      // problematic on iOS, because it will prevent users from typing in inputs. If\n      // we're on iOS and the tooltip is attached on an input or textarea, we clear\n      // the `user-select` to avoid these issues.\n      element.style.webkitUserSelect = element.style.userSelect = '';\n    }\n\n    _focusMonitor.monitor(element).pipe(takeUntil(this._destroyed)).subscribe(origin => {\n      // Note that the focus monitor runs outside the Angular zone.\n      if (!origin) {\n        _ngZone.run(() => this.hide(0));\n      } else if (origin === 'keyboard') {\n        _ngZone.run(() => this.show());\n      }\n    });\n  }\n\n  /**\n   * Dispose the tooltip when destroyed.\n   */\n  ngOnDestroy() {\n    if (this._overlayRef) {\n      this._overlayRef.dispose();\n      this._tooltipInstance = null;\n    }\n\n    // Clean up the event listeners set in the constructor\n    if (!this._platform.IOS) {\n      this._manualListeners.forEach((listener, event) =>\n        this._elementRef.nativeElement.removeEventListener(event, listener));\n\n      this._manualListeners.clear();\n    }\n\n    this._destroyed.next();\n    this._destroyed.complete();\n\n    this._ariaDescriber.removeDescription(this._elementRef.nativeElement, this.message);\n    this._focusMonitor.stopMonitoring(this._elementRef.nativeElement);\n  }\n\n  /** Shows the tooltip after the delay in ms, defaults to tooltip-delay-show or 0ms if no input */\n  show(delay: number = this.showDelay): void {\n    if (this.disabled || !this.message) { return; }\n\n    const overlayRef = this._createOverlay();\n\n    this._detach();\n    this._portal = this._portal || new ComponentPortal(TooltipComponent, this._viewContainerRef);\n    this._tooltipInstance = overlayRef.attach(this._portal).instance;\n    this._tooltipInstance.afterHidden()\n      .pipe(takeUntil(this._destroyed))\n      .subscribe(() => this._detach());\n    this._setTooltipClass(this._tooltipClass);\n    this._updateTooltipMessage();\n    this._tooltipInstance!.show(delay);\n  }\n\n  /** Hides the tooltip after the delay in ms, defaults to tooltip-delay-hide or 0ms if no input */\n  hide(delay: number = this.hideDelay): void {\n    if (this._tooltipInstance) {\n      this._tooltipInstance.hide(delay);\n    }\n  }\n\n  /** Shows/hides the tooltip */\n  toggle(): void {\n    this._isTooltipVisible() ? this.hide() : this.show();\n  }\n\n  /** Returns true if the tooltip is currently visible to the user */\n  _isTooltipVisible(): boolean {\n    return !!this._tooltipInstance && this._tooltipInstance.isVisible();\n  }\n\n  /** Handles the keydown events on the host element. */\n  _handleKeydown(e: KeyboardEvent) {\n    if (this._isTooltipVisible() && e.keyCode === ESCAPE) {\n      e.stopPropagation();\n      this.hide(0);\n    }\n  }\n\n  /** Handles the touchend events on the host element. */\n  _handleTouchend() {\n    this.hide(this._defaultOptions.touchendHideDelay);\n  }\n\n  /** Create the overlay config and position strategy */\n  private _createOverlay(): OverlayRef {\n    if (this._overlayRef) {\n      return this._overlayRef;\n    }\n\n    // Create connected position strategy that listens for scroll events to reposition.\n    const strategy = this._overlay.position()\n      .flexibleConnectedTo(this._elementRef)\n      .withTransformOriginOn('.mat-tooltip')\n      .withFlexibleDimensions(false)\n      .withViewportMargin(8);\n\n    const scrollableAncestors = this._scrollDispatcher\n      .getAncestorScrollContainers(this._elementRef);\n\n    strategy.withScrollableContainers(scrollableAncestors);\n\n    strategy.positionChanges.pipe(takeUntil(this._destroyed)).subscribe(change => {\n      if (this._tooltipInstance) {\n        if (change.scrollableViewProperties.isOverlayClipped && this._tooltipInstance.isVisible()) {\n          // After position changes occur and the overlay is clipped by\n          // a parent scrollable then close the tooltip.\n          this._ngZone.run(() => this.hide(0));\n        }\n      }\n    });\n\n    this._overlayRef = this._overlay.create({\n      direction: this._dir,\n      positionStrategy: strategy,\n      panelClass: TOOLTIP_PANEL_CLASS,\n      scrollStrategy: this._scrollStrategy()\n    });\n\n    this._updatePosition();\n\n    this._overlayRef.detachments()\n      .pipe(takeUntil(this._destroyed))\n      .subscribe(() => this._detach());\n\n    return this._overlayRef;\n  }\n\n  /** Detaches the currently-attached tooltip. */\n  private _detach() {\n    if (this._overlayRef && this._overlayRef.hasAttached()) {\n      this._overlayRef.detach();\n    }\n\n    this._tooltipInstance = null;\n  }\n\n  /** Updates the position of the current tooltip. */\n  private _updatePosition() {\n    const position =\n        this._overlayRef!.getConfig().positionStrategy as FlexibleConnectedPositionStrategy;\n    const origin = this._getOrigin();\n    const overlay = this._getOverlayPosition();\n\n    position.withPositions([\n      {...origin.main, ...overlay.main},\n      {...origin.fallback, ...overlay.fallback}\n    ]);\n  }\n\n  /**\n   * Returns the origin position and a fallback position based on the user's position preference.\n   * The fallback position is the inverse of the origin (e.g. `'below' -> 'above'`).\n   */\n  _getOrigin(): {main: OriginConnectionPosition, fallback: OriginConnectionPosition} {\n    const isLtr = !this._dir || this._dir.value == 'ltr';\n    const position = this.position;\n    let originPosition: OriginConnectionPosition;\n\n    if (position == 'above' || position == 'below') {\n      originPosition = {originX: 'center', originY: position == 'above' ? 'top' : 'bottom'};\n    } else if (\n      position == 'before' ||\n      (position == 'left' && isLtr) ||\n      (position == 'right' && !isLtr)) {\n      originPosition = {originX: 'start', originY: 'center'};\n    } else if (\n      position == 'after' ||\n      (position == 'right' && isLtr) ||\n      (position == 'left' && !isLtr)) {\n      originPosition = {originX: 'end', originY: 'center'};\n    } else {\n      throw getMatTooltipInvalidPositionError(position);\n    }\n\n    const {x, y} = this._invertPosition(originPosition.originX, originPosition.originY);\n\n    return {\n      main: originPosition,\n      fallback: {originX: x, originY: y}\n    };\n  }\n\n  /** Returns the overlay position and a fallback position based on the user's preference */\n  _getOverlayPosition(): {main: OverlayConnectionPosition, fallback: OverlayConnectionPosition} {\n    const isLtr = !this._dir || this._dir.value == 'ltr';\n    const position = this.position;\n    let overlayPosition: OverlayConnectionPosition;\n\n    if (position == 'above') {\n      overlayPosition = {overlayX: 'center', overlayY: 'bottom'};\n    } else if (position == 'below') {\n      overlayPosition = {overlayX: 'center', overlayY: 'top'};\n    } else if (\n      position == 'before' ||\n      (position == 'left' && isLtr) ||\n      (position == 'right' && !isLtr)) {\n      overlayPosition = {overlayX: 'end', overlayY: 'center'};\n    } else if (\n      position == 'after' ||\n      (position == 'right' && isLtr) ||\n      (position == 'left' && !isLtr)) {\n      overlayPosition = {overlayX: 'start', overlayY: 'center'};\n    } else {\n      throw getMatTooltipInvalidPositionError(position);\n    }\n\n    const {x, y} = this._invertPosition(overlayPosition.overlayX, overlayPosition.overlayY);\n\n    return {\n      main: overlayPosition,\n      fallback: {overlayX: x, overlayY: y}\n    };\n  }\n\n  /** Updates the tooltip message and repositions the overlay according to the new message length */\n  private _updateTooltipMessage() {\n    // Must wait for the message to be painted to the tooltip so that the overlay can properly\n    // calculate the correct positioning based on the size of the text.\n    if (this._tooltipInstance) {\n      this._tooltipInstance.message = this.message;\n      this._tooltipInstance._markForCheck();\n\n      this._ngZone.onMicrotaskEmpty.asObservable().pipe(\n        take(1),\n        takeUntil(this._destroyed)\n      ).subscribe(() => {\n        if (this._tooltipInstance) {\n          this._overlayRef!.updatePosition();\n        }\n      });\n    }\n  }\n\n  /** Updates the tooltip class */\n  private _setTooltipClass(tooltipClass: string|string[]|Set<string>|{[key: string]: any}) {\n    if (this._tooltipInstance) {\n      this._tooltipInstance.tooltipClass = tooltipClass;\n      this._tooltipInstance._markForCheck();\n    }\n  }\n\n  /** Inverts an overlay position. */\n  private _invertPosition(x: HorizontalConnectionPos, y: VerticalConnectionPos) {\n    if (this.position === 'above' || this.position === 'below') {\n      if (y === 'top') {\n        y = 'bottom';\n      } else if (y === 'bottom') {\n        y = 'top';\n      }\n    } else {\n      if (x === 'end') {\n        x = 'start';\n      } else if (x === 'start') {\n        x = 'end';\n      }\n    }\n\n    return {x, y};\n  }\n}\n\nexport type TooltipVisibility = 'initial' | 'visible' | 'hidden';\n\n/**\n * Internal component that wraps the tooltip's content.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-tooltip-component',\n  templateUrl: 'tooltip.html',\n  styleUrls: ['tooltip.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  animations: [matTooltipAnimations.tooltipState],\n  host: {\n    // Forces the element to have a layout in IE and Edge. This fixes issues where the element\n    // won't be rendered if the animations are disabled or there is no web animations polyfill.\n    '[style.zoom]': '_visibility === \"visible\" ? 1 : null',\n    '(body:click)': 'this._handleBodyInteraction()',\n    'aria-hidden': 'true',\n  }\n})\nexport class TooltipComponent {\n  /** Message to display in the tooltip */\n  message: string;\n\n  /** Classes to be added to the tooltip. Supports the same syntax as `ngClass`. */\n  tooltipClass: string|string[]|Set<string>|{[key: string]: any};\n\n  /** The timeout ID of any current timer set to show the tooltip */\n  _showTimeoutId: number;\n\n  /** The timeout ID of any current timer set to hide the tooltip */\n  _hideTimeoutId: number;\n\n  /** Property watched by the animation framework to show or hide the tooltip */\n  _visibility: TooltipVisibility = 'initial';\n\n  /** Whether interactions on the page should close the tooltip */\n  private _closeOnInteraction: boolean = false;\n\n  /** Subject for notifying that the tooltip has been hidden from the view */\n  private readonly _onHide: Subject<any> = new Subject();\n\n  /** Stream that emits whether the user has a handset-sized display.  */\n  _isHandset: Observable<BreakpointState> = this._breakpointObserver.observe(Breakpoints.Handset);\n\n  constructor(\n    private _changeDetectorRef: ChangeDetectorRef,\n    private _breakpointObserver: BreakpointObserver) {}\n\n  /**\n   * Shows the tooltip with an animation originating from the provided origin\n   * @param delay Amount of milliseconds to the delay showing the tooltip.\n   */\n  show(delay: number): void {\n    // Cancel the delayed hide if it is scheduled\n    if (this._hideTimeoutId) {\n      clearTimeout(this._hideTimeoutId);\n    }\n\n    // Body interactions should cancel the tooltip if there is a delay in showing.\n    this._closeOnInteraction = true;\n    this._showTimeoutId = setTimeout(() => {\n      this._visibility = 'visible';\n\n      // Mark for check so if any parent component has set the\n      // ChangeDetectionStrategy to OnPush it will be checked anyways\n      this._markForCheck();\n    }, delay);\n  }\n\n  /**\n   * Begins the animation to hide the tooltip after the provided delay in ms.\n   * @param delay Amount of milliseconds to delay showing the tooltip.\n   */\n  hide(delay: number): void {\n    // Cancel the delayed show if it is scheduled\n    if (this._showTimeoutId) {\n      clearTimeout(this._showTimeoutId);\n    }\n\n    this._hideTimeoutId = setTimeout(() => {\n      this._visibility = 'hidden';\n\n      // Mark for check so if any parent component has set the\n      // ChangeDetectionStrategy to OnPush it will be checked anyways\n      this._markForCheck();\n    }, delay);\n  }\n\n  /** Returns an observable that notifies when the tooltip has been hidden from view. */\n  afterHidden(): Observable<void> {\n    return this._onHide.asObservable();\n  }\n\n  /** Whether the tooltip is being displayed. */\n  isVisible(): boolean {\n    return this._visibility === 'visible';\n  }\n\n  _animationStart() {\n    this._closeOnInteraction = false;\n  }\n\n  _animationDone(event: AnimationEvent): void {\n    const toState = event.toState as TooltipVisibility;\n\n    if (toState === 'hidden' && !this.isVisible()) {\n      this._onHide.next();\n    }\n\n    if (toState === 'visible' || toState === 'hidden') {\n      this._closeOnInteraction = true;\n    }\n  }\n\n  /**\n   * Interactions on the HTML body should close the tooltip immediately as defined in the\n   * material design spec.\n   * https://material.google.com/components/tooltips.html#tooltips-interaction\n   */\n  _handleBodyInteraction(): void {\n    if (this._closeOnInteraction) {\n      this.hide(0);\n    }\n  }\n\n  /**\n   * Marks that the tooltip needs to be checked in the next change detection run.\n   * Mainly used for rendering the initial text before positioning a tooltip, which\n   * can be problematic in components with OnPush change detection.\n   */\n  _markForCheck(): void {\n    this._changeDetectorRef.markForCheck();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, ElementRef, Inject, InjectionToken, NgZone} from '@angular/core';\n\n\n/**\n * Interface for a a MatInkBar positioner method, defining the positioning and width of the ink\n * bar in a set of tabs.\n */\n// tslint:disable-next-line class-name Using leading underscore to denote internal interface.\nexport interface _MatInkBarPositioner {\n  (element: HTMLElement): { left: string, width: string };\n}\n\n/** Injection token for the MatInkBar's Positioner. */\nexport const _MAT_INK_BAR_POSITIONER =\n  new InjectionToken<_MatInkBarPositioner>('MatInkBarPositioner', {\n    providedIn: 'root',\n    factory: _MAT_INK_BAR_POSITIONER_FACTORY\n  });\n\n/**\n * The default positioner function for the MatInkBar.\n * @docs-private\n */\nexport function _MAT_INK_BAR_POSITIONER_FACTORY(): _MatInkBarPositioner {\n  const method = (element: HTMLElement) => ({\n    left: element ? (element.offsetLeft || 0) + 'px' : '0',\n    width: element ? (element.offsetWidth || 0) + 'px' : '0',\n  });\n\n  return method;\n}\n\n/**\n * The ink-bar is used to display and animate the line underneath the current active tab label.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-ink-bar',\n  host: {\n    'class': 'mat-ink-bar',\n  },\n})\nexport class MatInkBar {\n  constructor(\n    private _elementRef: ElementRef,\n    private _ngZone: NgZone,\n    @Inject(_MAT_INK_BAR_POSITIONER) private _inkBarPositioner: _MatInkBarPositioner) { }\n\n  /**\n   * Calculates the styles from the provided element in order to align the ink-bar to that element.\n   * Shows the ink bar if previously set as hidden.\n   * @param element\n   */\n  alignToElement(element: HTMLElement) {\n    this.show();\n\n    if (typeof requestAnimationFrame !== 'undefined') {\n      this._ngZone.runOutsideAngular(() => {\n        requestAnimationFrame(() => this._setStyles(element));\n      });\n    } else {\n      this._setStyles(element);\n    }\n  }\n\n  /** Shows the ink bar. */\n  show(): void {\n    this._elementRef.nativeElement.style.visibility = 'visible';\n  }\n\n  /** Hides the ink bar. */\n  hide(): void {\n    this._elementRef.nativeElement.style.visibility = 'hidden';\n  }\n\n  /**\n   * Sets the proper styles to the ink bar element.\n   * @param element\n   */\n  private _setStyles(element: HTMLElement) {\n    const positions = this._inkBarPositioner(element);\n    const inkBar: HTMLElement = this._elementRef.nativeElement;\n\n    inkBar.style.left = positions.left;\n    inkBar.style.width = positions.width;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, TemplateRef, ViewContainerRef} from '@angular/core';\nimport {CdkPortal} from '@angular/cdk/portal';\n\n/** Used to flag tab labels for use with the portal directive */\n@Directive({\n  selector: '[mat-tab-label], [matTabLabel]',\n})\nexport class MatTabLabel extends CdkPortal {\n  constructor(templateRef: TemplateRef<any>, viewContainerRef: ViewContainerRef) {\n    super(templateRef, viewContainerRef);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, TemplateRef} from '@angular/core';\n\n/** Decorates the `ng-template` tags and reads out the template from it. */\n@Directive({selector: '[matTabContent]'})\nexport class MatTabContent {\n  constructor(public template: TemplateRef<any>) { }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {TemplatePortal} from '@angular/cdk/portal';\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  ContentChild,\n  Input,\n  OnChanges,\n  OnDestroy,\n  OnInit,\n  SimpleChanges,\n  TemplateRef,\n  ViewChild,\n  ViewContainerRef,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {CanDisable, mixinDisabled} from '@angular/material/core';\nimport {Subject} from 'rxjs';\nimport {MatTabLabel} from './tab-label';\nimport {MatTabContent} from './tab-content';\n\n\n// Boilerplate for applying mixins to MatTab.\n/** @docs-private */\nexport class MatTabBase {}\nexport const _MatTabMixinBase = mixinDisabled(MatTabBase);\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-tab',\n  templateUrl: 'tab.html',\n  inputs: ['disabled'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matTab',\n})\nexport class MatTab extends _MatTabMixinBase implements OnInit, CanDisable, OnChanges, OnDestroy {\n  /** Content for the tab label given by `<ng-template mat-tab-label>`. */\n  @ContentChild(MatTabLabel) templateLabel: MatTabLabel;\n\n  /**\n   * Template provided in the tab content that will be used if present, used to enable lazy-loading\n   */\n  @ContentChild(MatTabContent, {read: TemplateRef}) _explicitContent: TemplateRef<any>;\n\n  /** Template inside the MatTab view that contains an `<ng-content>`. */\n  @ViewChild(TemplateRef) _implicitContent: TemplateRef<any>;\n\n  /** Plain text label for the tab, used when there is no template label. */\n  @Input('label') textLabel: string = '';\n\n  /** Aria label for the tab. */\n  @Input('aria-label') ariaLabel: string;\n\n  /**\n   * Reference to the element that the tab is labelled by.\n   * Will be cleared if `aria-label` is set at the same time.\n   */\n  @Input('aria-labelledby') ariaLabelledby: string;\n\n  /** Portal that will be the hosted content of the tab */\n  private _contentPortal: TemplatePortal | null = null;\n\n  /** @docs-private */\n  get content(): TemplatePortal | null {\n    return this._contentPortal;\n  }\n\n  /** Emits whenever the label changes. */\n  readonly _labelChange = new Subject<void>();\n\n  /** Emits whenever the disable changes */\n  readonly _disableChange = new Subject<void>();\n\n  /**\n   * The relatively indexed position where 0 represents the center, negative is left, and positive\n   * represents the right.\n   */\n  position: number | null = null;\n\n  /**\n   * The initial relatively index origin of the tab if it was created and selected after there\n   * was already a selected tab. Provides context of what position the tab should originate from.\n   */\n  origin: number | null = null;\n\n  /**\n   * Whether the tab is currently active.\n   */\n  isActive = false;\n\n  constructor(private _viewContainerRef: ViewContainerRef) {\n    super();\n  }\n\n  ngOnChanges(changes: SimpleChanges): void {\n    if (changes.hasOwnProperty('textLabel')) {\n      this._labelChange.next();\n    }\n\n    if (changes.hasOwnProperty('disabled')) {\n      this._disableChange.next();\n    }\n  }\n\n  ngOnDestroy(): void {\n    this._disableChange.complete();\n    this._labelChange.complete();\n  }\n\n  ngOnInit(): void {\n    this._contentPortal = new TemplatePortal(\n        this._explicitContent || this._implicitContent, this._viewContainerRef);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/** Animations used by the Material tabs. */\nexport const matTabsAnimations: {\n  readonly translateTab: AnimationTriggerMetadata;\n} = {\n  /** Animation translates a tab along the X axis. */\n  translateTab: trigger('translateTab', [\n    // Note: transitions to `none` instead of 0, because some browsers might blur the content.\n    state('center, void, left-origin-center, right-origin-center', style({transform: 'none'})),\n    state('left', style({transform: 'translate3d(-100%, 0, 0)'})),\n    state('right', style({transform: 'translate3d(100%, 0, 0)'})),\n    transition('* => left, * => right, left => center, right => center',\n        animate('500ms cubic-bezier(0.35, 0, 0.25, 1)')),\n    transition('void => left-origin-center', [\n      style({transform: 'translate3d(-100%, 0, 0)'}),\n      animate('500ms cubic-bezier(0.35, 0, 0.25, 1)')\n    ]),\n    transition('void => right-origin-center', [\n      style({transform: 'translate3d(100%, 0, 0)'}),\n      animate('500ms cubic-bezier(0.35, 0, 0.25, 1)')\n    ])\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  Input,\n  Inject,\n  Output,\n  EventEmitter,\n  OnDestroy,\n  OnInit,\n  ElementRef,\n  Directive,\n  Optional,\n  ViewEncapsulation,\n  ChangeDetectionStrategy,\n  ComponentFactoryResolver,\n  ViewContainerRef,\n  forwardRef,\n  ViewChild,\n} from '@angular/core';\nimport {AnimationEvent} from '@angular/animations';\nimport {TemplatePortal, CdkPortalOutlet, PortalHostDirective} from '@angular/cdk/portal';\nimport {Directionality, Direction} from '@angular/cdk/bidi';\nimport {Subscription} from 'rxjs';\nimport {matTabsAnimations} from './tabs-animations';\nimport {startWith} from 'rxjs/operators';\n\n/**\n * These position states are used internally as animation states for the tab body. Setting the\n * position state to left, right, or center will transition the tab body from its current\n * position to its respective state. If there is not current position (void, in the case of a new\n * tab body), then there will be no transition animation to its state.\n *\n * In the case of a new tab body that should immediately be centered with an animating transition,\n * then left-origin-center or right-origin-center can be used, which will use left or right as its\n * psuedo-prior state.\n */\nexport type MatTabBodyPositionState =\n    'left' | 'center' | 'right' | 'left-origin-center' | 'right-origin-center';\n\n/**\n * The origin state is an internally used state that is set on a new tab body indicating if it\n * began to the left or right of the prior selected index. For example, if the selected index was\n * set to 1, and a new tab is created and selected at index 2, then the tab body would have an\n * origin of right because its index was greater than the prior selected index.\n */\nexport type MatTabBodyOriginState = 'left' | 'right';\n\n/**\n * The portal host directive for the contents of the tab.\n * @docs-private\n */\n@Directive({\n  selector: '[matTabBodyHost]'\n})\nexport class MatTabBodyPortal extends CdkPortalOutlet implements OnInit, OnDestroy {\n  /** Subscription to events for when the tab body begins centering. */\n  private _centeringSub = Subscription.EMPTY;\n  /** Subscription to events for when the tab body finishes leaving from center position. */\n  private _leavingSub = Subscription.EMPTY;\n\n  constructor(\n    componentFactoryResolver: ComponentFactoryResolver,\n    viewContainerRef: ViewContainerRef,\n    @Inject(forwardRef(() => MatTabBody)) private _host: MatTabBody) {\n      super(componentFactoryResolver, viewContainerRef);\n  }\n\n  /** Set initial visibility or set up subscription for changing visibility. */\n  ngOnInit(): void {\n    super.ngOnInit();\n\n    this._centeringSub = this._host._beforeCentering\n      .pipe(startWith(this._host._isCenterPosition(this._host._position)))\n      .subscribe((isCentering: boolean) => {\n        if (isCentering && !this.hasAttached()) {\n          this.attach(this._host._content);\n        }\n      });\n\n    this._leavingSub = this._host._afterLeavingCenter.subscribe(() => {\n      this.detach();\n    });\n  }\n\n  /** Clean up centering subscription. */\n  ngOnDestroy(): void {\n    super.ngOnDestroy();\n    this._centeringSub.unsubscribe();\n    this._leavingSub.unsubscribe();\n  }\n}\n\n/**\n * Wrapper for the contents of a tab.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-tab-body',\n  templateUrl: 'tab-body.html',\n  styleUrls: ['tab-body.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  animations: [matTabsAnimations.translateTab],\n  host: {\n    'class': 'mat-tab-body',\n  },\n})\nexport class MatTabBody implements OnInit {\n  /** Event emitted when the tab begins to animate towards the center as the active tab. */\n  @Output() readonly _onCentering: EventEmitter<number> = new EventEmitter<number>();\n\n  /** Event emitted before the centering of the tab begins. */\n  @Output() readonly _beforeCentering: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n  /** Event emitted before the centering of the tab begins. */\n  @Output() readonly _afterLeavingCenter: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n  /** Event emitted when the tab completes its animation towards the center. */\n  @Output() readonly _onCentered: EventEmitter<void> = new EventEmitter<void>(true);\n\n   /** The portal host inside of this container into which the tab body content will be loaded. */\n  @ViewChild(PortalHostDirective) _portalHost: PortalHostDirective;\n\n  /** The tab body content to display. */\n  @Input('content') _content: TemplatePortal;\n\n  /** The shifted index position of the tab body, where zero represents the active center tab. */\n  @Input()\n  set position(position: number) {\n    if (position < 0) {\n      this._position = this._getLayoutDirection() == 'ltr' ? 'left' : 'right';\n    } else if (position > 0) {\n      this._position = this._getLayoutDirection() == 'ltr' ? 'right' : 'left';\n    } else {\n      this._position = 'center';\n    }\n  }\n  _position: MatTabBodyPositionState;\n\n  /** The origin position from which this tab should appear when it is centered into view. */\n  @Input()\n  set origin(origin: number) {\n    if (origin == null) { return; }\n\n    const dir = this._getLayoutDirection();\n    if ((dir == 'ltr' && origin <= 0) || (dir == 'rtl' && origin > 0)) {\n      this._origin = 'left';\n    } else {\n      this._origin = 'right';\n    }\n  }\n  _origin: MatTabBodyOriginState;\n\n  constructor(private _elementRef: ElementRef,\n              @Optional() private _dir: Directionality) { }\n\n  /**\n   * After initialized, check if the content is centered and has an origin. If so, set the\n   * special position states that transition the tab from the left or right before centering.\n   */\n  ngOnInit() {\n    if (this._position == 'center' && this._origin) {\n      this._position = this._origin == 'left' ? 'left-origin-center' : 'right-origin-center';\n    }\n  }\n\n  _onTranslateTabStarted(e: AnimationEvent): void {\n    const isCentering = this._isCenterPosition(e.toState);\n    this._beforeCentering.emit(isCentering);\n    if (isCentering) {\n      this._onCentering.emit(this._elementRef.nativeElement.clientHeight);\n    }\n  }\n\n  _onTranslateTabComplete(e: AnimationEvent): void {\n    // If the transition to the center is complete, emit an event.\n    if (this._isCenterPosition(e.toState) && this._isCenterPosition(this._position)) {\n      this._onCentered.emit();\n    }\n\n    if (this._isCenterPosition(e.fromState) && !this._isCenterPosition(this._position)) {\n      this._afterLeavingCenter.emit();\n    }\n  }\n\n  /** The text direction of the containing app. */\n  _getLayoutDirection(): Direction {\n    return this._dir && this._dir.value === 'rtl' ? 'rtl' : 'ltr';\n  }\n\n  /** Whether the provided position state is considered center, regardless of origin. */\n  _isCenterPosition(position: MatTabBodyPositionState|string): boolean {\n    return position == 'center' ||\n        position == 'left-origin-center' ||\n        position == 'right-origin-center';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, ElementRef} from '@angular/core';\nimport {CanDisable, mixinDisabled} from '@angular/material/core';\n\n// Boilerplate for applying mixins to MatTabLabelWrapper.\n/** @docs-private */\nexport class MatTabLabelWrapperBase {}\nexport const _MatTabLabelWrapperMixinBase = mixinDisabled(MatTabLabelWrapperBase);\n\n/**\n * Used in the `mat-tab-group` view to display tab labels.\n * @docs-private\n */\n@Directive({\n  selector: '[matTabLabelWrapper]',\n  inputs: ['disabled'],\n  host: {\n    '[class.mat-tab-disabled]': 'disabled'\n  }\n})\nexport class MatTabLabelWrapper extends _MatTabLabelWrapperMixinBase implements CanDisable {\n  constructor(public elementRef: ElementRef) {\n    super();\n  }\n\n  /** Sets focus on the wrapper element */\n  focus(): void {\n    this.elementRef.nativeElement.focus();\n  }\n\n  getOffsetLeft(): number {\n    return this.elementRef.nativeElement.offsetLeft;\n  }\n\n  getOffsetWidth(): number {\n    return this.elementRef.nativeElement.offsetWidth;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Direction, Directionality} from '@angular/cdk/bidi';\nimport {coerceNumberProperty} from '@angular/cdk/coercion';\nimport {END, ENTER, HOME, SPACE} from '@angular/cdk/keycodes';\nimport {ViewportRuler} from '@angular/cdk/scrolling';\nimport {\n  AfterContentChecked,\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  ElementRef,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  Optional,\n  Output,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {CanDisableRipple, mixinDisableRipple} from '@angular/material/core';\nimport {merge, of as observableOf, Subscription} from 'rxjs';\nimport {MatInkBar} from './ink-bar';\nimport {MatTabLabelWrapper} from './tab-label-wrapper';\nimport {FocusKeyManager} from '@angular/cdk/a11y';\n\n\n/**\n * The directions that scrolling can go in when the header's tabs exceed the header width. 'After'\n * will scroll the header towards the end of the tabs list and 'before' will scroll towards the\n * beginning of the list.\n */\nexport type ScrollDirection = 'after' | 'before';\n\n/**\n * The distance in pixels that will be overshot when scrolling a tab label into view. This helps\n * provide a small affordance to the label next to it.\n */\nconst EXAGGERATED_OVERSCROLL = 60;\n\n// Boilerplate for applying mixins to MatTabHeader.\n/** @docs-private */\nexport class MatTabHeaderBase {}\nexport const _MatTabHeaderMixinBase = mixinDisableRipple(MatTabHeaderBase);\n\n/**\n * The header of the tab group which displays a list of all the tabs in the tab group. Includes\n * an ink bar that follows the currently selected tab. When the tabs list's width exceeds the\n * width of the header container, then arrows will be displayed to allow the user to scroll\n * left and right across the header.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-tab-header',\n  templateUrl: 'tab-header.html',\n  styleUrls: ['tab-header.css'],\n  inputs: ['disableRipple'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {\n    'class': 'mat-tab-header',\n    '[class.mat-tab-header-pagination-controls-enabled]': '_showPaginationControls',\n    '[class.mat-tab-header-rtl]': \"_getLayoutDirection() == 'rtl'\",\n  },\n})\nexport class MatTabHeader extends _MatTabHeaderMixinBase\n    implements AfterContentChecked, AfterContentInit, OnDestroy, CanDisableRipple {\n\n  @ContentChildren(MatTabLabelWrapper) _labelWrappers: QueryList<MatTabLabelWrapper>;\n  @ViewChild(MatInkBar) _inkBar: MatInkBar;\n  @ViewChild('tabListContainer') _tabListContainer: ElementRef;\n  @ViewChild('tabList') _tabList: ElementRef;\n\n  /** The distance in pixels that the tab labels should be translated to the left. */\n  private _scrollDistance = 0;\n\n  /** Whether the header should scroll to the selected index after the view has been checked. */\n  private _selectedIndexChanged = false;\n\n  /** Combines listeners that will re-align the ink bar whenever they're invoked. */\n  private _realignInkBar = Subscription.EMPTY;\n\n  /** Whether the controls for pagination should be displayed */\n  _showPaginationControls = false;\n\n  /** Whether the tab list can be scrolled more towards the end of the tab label list. */\n  _disableScrollAfter = true;\n\n  /** Whether the tab list can be scrolled more towards the beginning of the tab label list. */\n  _disableScrollBefore = true;\n\n  /**\n   * The number of tab labels that are displayed on the header. When this changes, the header\n   * should re-evaluate the scroll position.\n   */\n  private _tabLabelCount: number;\n\n  /** Whether the scroll distance has changed and should be applied after the view is checked. */\n  private _scrollDistanceChanged: boolean;\n\n  /** Used to manage focus between the tabs. */\n  private _keyManager: FocusKeyManager<MatTabLabelWrapper>;\n\n  private _selectedIndex: number = 0;\n\n  /** The index of the active tab. */\n  @Input()\n  get selectedIndex(): number { return this._selectedIndex; }\n  set selectedIndex(value: number) {\n    value = coerceNumberProperty(value);\n    this._selectedIndexChanged = this._selectedIndex != value;\n    this._selectedIndex = value;\n\n    if (this._keyManager) {\n      this._keyManager.updateActiveItemIndex(value);\n    }\n  }\n\n  /** Event emitted when the option is selected. */\n  @Output() readonly selectFocusedIndex = new EventEmitter();\n\n  /** Event emitted when a label is focused. */\n  @Output() readonly indexFocused = new EventEmitter();\n\n  constructor(private _elementRef: ElementRef,\n              private _changeDetectorRef: ChangeDetectorRef,\n              private _viewportRuler: ViewportRuler,\n              @Optional() private _dir: Directionality) {\n    super();\n  }\n\n  ngAfterContentChecked(): void {\n    // If the number of tab labels have changed, check if scrolling should be enabled\n    if (this._tabLabelCount != this._labelWrappers.length) {\n      this._updatePagination();\n      this._tabLabelCount = this._labelWrappers.length;\n      this._changeDetectorRef.markForCheck();\n    }\n\n    // If the selected index has changed, scroll to the label and check if the scrolling controls\n    // should be disabled.\n    if (this._selectedIndexChanged) {\n      this._scrollToLabel(this._selectedIndex);\n      this._checkScrollingControls();\n      this._alignInkBarToSelectedTab();\n      this._selectedIndexChanged = false;\n      this._changeDetectorRef.markForCheck();\n    }\n\n    // If the scroll distance has been changed (tab selected, focused, scroll controls activated),\n    // then translate the header to reflect this.\n    if (this._scrollDistanceChanged) {\n      this._updateTabScrollPosition();\n      this._scrollDistanceChanged = false;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  _handleKeydown(event: KeyboardEvent) {\n    switch (event.keyCode) {\n      case HOME:\n        this._keyManager.setFirstItemActive();\n        event.preventDefault();\n        break;\n      case END:\n        this._keyManager.setLastItemActive();\n        event.preventDefault();\n        break;\n      case ENTER:\n      case SPACE:\n        this.selectFocusedIndex.emit(this.focusIndex);\n        event.preventDefault();\n        break;\n      default:\n        this._keyManager.onKeydown(event);\n    }\n  }\n\n  /**\n   * Aligns the ink bar to the selected tab on load.\n   */\n  ngAfterContentInit() {\n    const dirChange = this._dir ? this._dir.change : observableOf(null);\n    const resize = this._viewportRuler.change(150);\n    const realign = () => {\n      this._updatePagination();\n      this._alignInkBarToSelectedTab();\n    };\n\n    this._keyManager = new FocusKeyManager(this._labelWrappers)\n      .withHorizontalOrientation(this._getLayoutDirection());\n\n    this._keyManager.updateActiveItemIndex(0);\n\n    // Defer the first call in order to allow for slower browsers to lay out the elements.\n    // This helps in cases where the user lands directly on a page with paginated tabs.\n    typeof requestAnimationFrame !== 'undefined' ? requestAnimationFrame(realign) : realign();\n\n    this._realignInkBar = merge(dirChange, resize).subscribe(() => {\n      realign();\n      this._keyManager.withHorizontalOrientation(this._getLayoutDirection());\n    });\n  }\n\n  ngOnDestroy() {\n    this._realignInkBar.unsubscribe();\n  }\n\n  /**\n   * Callback for when the MutationObserver detects that the content has changed.\n   */\n  _onContentChanges() {\n    this._updatePagination();\n    this._alignInkBarToSelectedTab();\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /**\n   * Updating the view whether pagination should be enabled or not\n   */\n  _updatePagination() {\n    this._checkPaginationEnabled();\n    this._checkScrollingControls();\n    this._updateTabScrollPosition();\n  }\n\n  /** Tracks which element has focus; used for keyboard navigation */\n  get focusIndex(): number {\n    return this._keyManager ? this._keyManager.activeItemIndex! : 0;\n  }\n\n  /** When the focus index is set, we must manually send focus to the correct label */\n  set focusIndex(value: number) {\n    if (!this._isValidIndex(value) || this.focusIndex == value || !this._keyManager) { return; }\n\n    this._keyManager.setActiveItem(value);\n    this.indexFocused.emit(value);\n    this._setTabFocus(value);\n  }\n\n  /**\n   * Determines if an index is valid.  If the tabs are not ready yet, we assume that the user is\n   * providing a valid index and return true.\n   */\n  _isValidIndex(index: number): boolean {\n    if (!this._labelWrappers) { return true; }\n\n    const tab = this._labelWrappers ? this._labelWrappers.toArray()[index] : null;\n    return !!tab && !tab.disabled;\n  }\n\n  /**\n   * Sets focus on the HTML element for the label wrapper and scrolls it into the view if\n   * scrolling is enabled.\n   */\n  _setTabFocus(tabIndex: number) {\n    if (this._showPaginationControls) {\n      this._scrollToLabel(tabIndex);\n    }\n\n    if (this._labelWrappers && this._labelWrappers.length) {\n      this._labelWrappers.toArray()[tabIndex].focus();\n\n      // Do not let the browser manage scrolling to focus the element, this will be handled\n      // by using translation. In LTR, the scroll left should be 0. In RTL, the scroll width\n      // should be the full width minus the offset width.\n      const containerEl = this._tabListContainer.nativeElement;\n      const dir = this._getLayoutDirection();\n\n      if (dir == 'ltr') {\n        containerEl.scrollLeft = 0;\n      } else {\n        containerEl.scrollLeft = containerEl.scrollWidth - containerEl.offsetWidth;\n      }\n    }\n  }\n\n  /** The layout direction of the containing app. */\n  _getLayoutDirection(): Direction {\n    return this._dir && this._dir.value === 'rtl' ? 'rtl' : 'ltr';\n  }\n\n  /** Performs the CSS transformation on the tab list that will cause the list to scroll. */\n  _updateTabScrollPosition() {\n    const scrollDistance = this.scrollDistance;\n    const translateX = this._getLayoutDirection() === 'ltr' ? -scrollDistance : scrollDistance;\n\n    this._tabList.nativeElement.style.transform = `translate3d(${translateX}px, 0, 0)`;\n  }\n\n  /** Sets the distance in pixels that the tab header should be transformed in the X-axis. */\n  get scrollDistance(): number { return this._scrollDistance; }\n  set scrollDistance(v: number) {\n    this._scrollDistance = Math.max(0, Math.min(this._getMaxScrollDistance(), v));\n\n    // Mark that the scroll distance has changed so that after the view is checked, the CSS\n    // transformation can move the header.\n    this._scrollDistanceChanged = true;\n    this._checkScrollingControls();\n  }\n\n  /**\n   * Moves the tab list in the 'before' or 'after' direction (towards the beginning of the list or\n   * the end of the list, respectively). The distance to scroll is computed to be a third of the\n   * length of the tab list view window.\n   *\n   * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n   * should be called sparingly.\n   */\n  _scrollHeader(scrollDir: ScrollDirection) {\n    const viewLength = this._tabListContainer.nativeElement.offsetWidth;\n\n    // Move the scroll distance one-third the length of the tab list's viewport.\n    this.scrollDistance += (scrollDir == 'before' ? -1 : 1) * viewLength / 3;\n  }\n\n  /**\n   * Moves the tab list such that the desired tab label (marked by index) is moved into view.\n   *\n   * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n   * should be called sparingly.\n   */\n  _scrollToLabel(labelIndex: number) {\n    const selectedLabel = this._labelWrappers ? this._labelWrappers.toArray()[labelIndex] : null;\n\n    if (!selectedLabel) { return; }\n\n    // The view length is the visible width of the tab labels.\n    const viewLength = this._tabListContainer.nativeElement.offsetWidth;\n\n    let labelBeforePos: number, labelAfterPos: number;\n    if (this._getLayoutDirection() == 'ltr') {\n      labelBeforePos = selectedLabel.getOffsetLeft();\n      labelAfterPos = labelBeforePos + selectedLabel.getOffsetWidth();\n    } else {\n      labelAfterPos = this._tabList.nativeElement.offsetWidth - selectedLabel.getOffsetLeft();\n      labelBeforePos = labelAfterPos - selectedLabel.getOffsetWidth();\n    }\n\n    const beforeVisiblePos = this.scrollDistance;\n    const afterVisiblePos = this.scrollDistance + viewLength;\n\n    if (labelBeforePos < beforeVisiblePos) {\n      // Scroll header to move label to the before direction\n      this.scrollDistance -= beforeVisiblePos - labelBeforePos + EXAGGERATED_OVERSCROLL;\n    } else if (labelAfterPos > afterVisiblePos) {\n      // Scroll header to move label to the after direction\n      this.scrollDistance += labelAfterPos - afterVisiblePos + EXAGGERATED_OVERSCROLL;\n    }\n  }\n\n  /**\n   * Evaluate whether the pagination controls should be displayed. If the scroll width of the\n   * tab list is wider than the size of the header container, then the pagination controls should\n   * be shown.\n   *\n   * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n   * should be called sparingly.\n   */\n  _checkPaginationEnabled() {\n    const isEnabled =\n        this._tabList.nativeElement.scrollWidth > this._elementRef.nativeElement.offsetWidth;\n\n    if (!isEnabled) {\n      this.scrollDistance = 0;\n    }\n\n    if (isEnabled !== this._showPaginationControls) {\n      this._changeDetectorRef.markForCheck();\n    }\n\n    this._showPaginationControls = isEnabled;\n  }\n\n  /**\n   * Evaluate whether the before and after controls should be enabled or disabled.\n   * If the header is at the beginning of the list (scroll distance is equal to 0) then disable the\n   * before button. If the header is at the end of the list (scroll distance is equal to the\n   * maximum distance we can scroll), then disable the after button.\n   *\n   * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n   * should be called sparingly.\n   */\n  _checkScrollingControls() {\n    // Check if the pagination arrows should be activated.\n    this._disableScrollBefore = this.scrollDistance == 0;\n    this._disableScrollAfter = this.scrollDistance == this._getMaxScrollDistance();\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /**\n   * Determines what is the maximum length in pixels that can be set for the scroll distance. This\n   * is equal to the difference in width between the tab list container and tab header container.\n   *\n   * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n   * should be called sparingly.\n   */\n  _getMaxScrollDistance(): number {\n    const lengthOfTabList = this._tabList.nativeElement.scrollWidth;\n    const viewLength = this._tabListContainer.nativeElement.offsetWidth;\n    return (lengthOfTabList - viewLength) || 0;\n  }\n\n  /** Tells the ink-bar to align itself to the current label wrapper */\n  _alignInkBarToSelectedTab(): void {\n    const selectedLabelWrapper = this._labelWrappers && this._labelWrappers.length ?\n        this._labelWrappers.toArray()[this.selectedIndex].elementRef.nativeElement :\n        null;\n\n    this._inkBar.alignToElement(selectedLabelWrapper);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty, coerceNumberProperty} from '@angular/cdk/coercion';\nimport {\n  AfterContentChecked,\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  ElementRef,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  Output,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {\n  CanColor,\n  CanDisableRipple,\n  mixinColor,\n  mixinDisableRipple,\n  ThemePalette\n} from '@angular/material/core';\nimport {merge, Subscription} from 'rxjs';\nimport {MatTab} from './tab';\nimport {MatTabHeader} from './tab-header';\n\n\n/** Used to generate unique ID's for each tab component */\nlet nextId = 0;\n\n/** A simple change event emitted on focus or selection changes. */\nexport class MatTabChangeEvent {\n  /** Index of the currently-selected tab. */\n  index: number;\n  /** Reference to the currently-selected tab. */\n  tab: MatTab;\n}\n\n/** Possible positions for the tab header. */\nexport type MatTabHeaderPosition = 'above' | 'below';\n\n// Boilerplate for applying mixins to MatTabGroup.\n/** @docs-private */\nexport class MatTabGroupBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatTabGroupMixinBase = mixinColor(mixinDisableRipple(MatTabGroupBase), 'primary');\n\n/**\n * Material design tab-group component.  Supports basic tab pairs (label + content) and includes\n * animated ink-bar, keyboard navigation, and screen reader.\n * See: https://material.io/design/components/tabs.html\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-tab-group',\n  exportAs: 'matTabGroup',\n  templateUrl: 'tab-group.html',\n  styleUrls: ['tab-group.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  inputs: ['color', 'disableRipple'],\n  host: {\n    'class': 'mat-tab-group',\n    '[class.mat-tab-group-dynamic-height]': 'dynamicHeight',\n    '[class.mat-tab-group-inverted-header]': 'headerPosition === \"below\"',\n  },\n})\nexport class MatTabGroup extends _MatTabGroupMixinBase implements AfterContentInit,\n    AfterContentChecked, OnDestroy, CanColor, CanDisableRipple {\n\n  @ContentChildren(MatTab) _tabs: QueryList<MatTab>;\n\n  @ViewChild('tabBodyWrapper') _tabBodyWrapper: ElementRef;\n\n  @ViewChild('tabHeader') _tabHeader: MatTabHeader;\n\n  /** The tab index that should be selected after the content has been checked. */\n  private _indexToSelect: number | null = 0;\n\n  /** Snapshot of the height of the tab body wrapper before another tab is activated. */\n  private _tabBodyWrapperHeight: number = 0;\n\n  /** Subscription to tabs being added/removed. */\n  private _tabsSubscription = Subscription.EMPTY;\n\n  /** Subscription to changes in the tab labels. */\n  private _tabLabelSubscription = Subscription.EMPTY;\n\n  /** Whether the tab group should grow to the size of the active tab. */\n  @Input()\n  get dynamicHeight(): boolean { return this._dynamicHeight; }\n  set dynamicHeight(value: boolean) { this._dynamicHeight = coerceBooleanProperty(value); }\n  private _dynamicHeight: boolean = false;\n\n  /** The index of the active tab. */\n  @Input()\n  get selectedIndex(): number | null { return this._selectedIndex; }\n  set selectedIndex(value: number | null) {\n    this._indexToSelect = coerceNumberProperty(value, null);\n  }\n  private _selectedIndex: number | null = null;\n\n  /** Position of the tab header. */\n  @Input() headerPosition: MatTabHeaderPosition = 'above';\n\n  /** Background color of the tab group. */\n  @Input()\n  get backgroundColor(): ThemePalette { return this._backgroundColor; }\n  set backgroundColor(value: ThemePalette) {\n    const nativeElement: HTMLElement = this._elementRef.nativeElement;\n\n    nativeElement.classList.remove(`mat-background-${this.backgroundColor}`);\n\n    if (value) {\n      nativeElement.classList.add(`mat-background-${value}`);\n    }\n\n    this._backgroundColor = value;\n  }\n  private _backgroundColor: ThemePalette;\n\n  /** Output to enable support for two-way binding on `[(selectedIndex)]` */\n  @Output() readonly selectedIndexChange: EventEmitter<number> = new EventEmitter<number>();\n\n  /** Event emitted when focus has changed within a tab group. */\n  @Output() readonly focusChange: EventEmitter<MatTabChangeEvent> =\n      new EventEmitter<MatTabChangeEvent>();\n\n  /** Event emitted when the body animation has completed */\n  @Output() readonly animationDone: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Event emitted when the tab selection has changed. */\n  @Output() readonly selectedTabChange: EventEmitter<MatTabChangeEvent> =\n      new EventEmitter<MatTabChangeEvent>(true);\n\n  private _groupId: number;\n\n  constructor(elementRef: ElementRef,\n              private _changeDetectorRef: ChangeDetectorRef) {\n    super(elementRef);\n    this._groupId = nextId++;\n  }\n\n  /**\n   * After the content is checked, this component knows what tabs have been defined\n   * and what the selected index should be. This is where we can know exactly what position\n   * each tab should be in according to the new selected index, and additionally we know how\n   * a new selected tab should transition in (from the left or right).\n   */\n  ngAfterContentChecked() {\n    // Clamp the next selected index to the boundsof 0 and the tabs length.\n    // Note the `|| 0`, which ensures that values like NaN can't get through\n    // and which would otherwise throw the component into an infinite loop\n    // (since Math.max(NaN, 0) === NaN).\n    let indexToSelect = this._indexToSelect =\n        Math.min(this._tabs.length - 1, Math.max(this._indexToSelect || 0, 0));\n\n    // If there is a change in selected index, emit a change event. Should not trigger if\n    // the selected index has not yet been initialized.\n    if (this._selectedIndex != indexToSelect && this._selectedIndex != null) {\n      const tabChangeEvent = this._createChangeEvent(indexToSelect);\n      this.selectedTabChange.emit(tabChangeEvent);\n      // Emitting this value after change detection has run\n      // since the checked content may contain this variable'\n      Promise.resolve().then(() => this.selectedIndexChange.emit(indexToSelect));\n    }\n\n    // Setup the position for each tab and optionally setup an origin on the next selected tab.\n    this._tabs.forEach((tab: MatTab, index: number) => {\n      tab.position = index - indexToSelect;\n      tab.isActive = index === indexToSelect;\n\n      // If there is already a selected tab, then set up an origin for the next selected tab\n      // if it doesn't have one already.\n      if (this._selectedIndex != null && tab.position == 0 && !tab.origin) {\n        tab.origin = indexToSelect - this._selectedIndex;\n      }\n    });\n\n    if (this._selectedIndex !== indexToSelect) {\n      this._selectedIndex = indexToSelect;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  ngAfterContentInit() {\n    this._subscribeToTabLabels();\n\n    // Subscribe to changes in the amount of tabs, in order to be\n    // able to re-render the content as new tabs are added or removed.\n    this._tabsSubscription = this._tabs.changes.subscribe(() => {\n      const tabs = this._tabs.toArray();\n\n      // Maintain the previously-selected tab if a new tab is added or removed.\n      for (let i = 0; i < tabs.length; i++) {\n        if (tabs[i].isActive) {\n          // Assign both to the `_indexToSelect` and `_selectedIndex` so we don't fire a changed\n          // event, otherwise the consumer may end up in an infinite loop in some edge cases like\n          // adding a tab within the `selectedIndexChange` event.\n          this._indexToSelect = this._selectedIndex = i;\n          break;\n        }\n      }\n\n      this._subscribeToTabLabels();\n      this._changeDetectorRef.markForCheck();\n    });\n  }\n\n  ngOnDestroy() {\n    this._tabsSubscription.unsubscribe();\n    this._tabLabelSubscription.unsubscribe();\n  }\n\n  /** Re-aligns the ink bar to the selected tab element. */\n  realignInkBar() {\n    if (this._tabHeader) {\n      this._tabHeader._alignInkBarToSelectedTab();\n    }\n  }\n\n  _focusChanged(index: number) {\n    this.focusChange.emit(this._createChangeEvent(index));\n  }\n\n  private _createChangeEvent(index: number): MatTabChangeEvent {\n    const event = new MatTabChangeEvent;\n    event.index = index;\n    if (this._tabs && this._tabs.length) {\n      event.tab = this._tabs.toArray()[index];\n    }\n    return event;\n  }\n\n  /**\n   * Subscribes to changes in the tab labels. This is needed, because the @Input for the label is\n   * on the MatTab component, whereas the data binding is inside the MatTabGroup. In order for the\n   * binding to be updated, we need to subscribe to changes in it and trigger change detection\n   * manually.\n   */\n  private _subscribeToTabLabels() {\n    if (this._tabLabelSubscription) {\n      this._tabLabelSubscription.unsubscribe();\n    }\n\n    this._tabLabelSubscription = merge(\n        ...this._tabs.map(tab => tab._disableChange),\n        ...this._tabs.map(tab => tab._labelChange)).subscribe(() => {\n      this._changeDetectorRef.markForCheck();\n    });\n  }\n\n  /** Returns a unique id for each tab label element */\n  _getTabLabelId(i: number): string {\n    return `mat-tab-label-${this._groupId}-${i}`;\n  }\n\n  /** Returns a unique id for each tab content element */\n  _getTabContentId(i: number): string {\n    return `mat-tab-content-${this._groupId}-${i}`;\n  }\n\n  /**\n   * Sets the height of the body wrapper to the height of the activating tab if dynamic\n   * height property is true.\n   */\n  _setTabBodyWrapperHeight(tabHeight: number): void {\n    if (!this._dynamicHeight || !this._tabBodyWrapperHeight) { return; }\n\n    const wrapper: HTMLElement = this._tabBodyWrapper.nativeElement;\n\n    wrapper.style.height = this._tabBodyWrapperHeight + 'px';\n\n    // This conditional forces the browser to paint the height so that\n    // the animation to the new height can have an origin.\n    if (this._tabBodyWrapper.nativeElement.offsetHeight) {\n      wrapper.style.height = tabHeight + 'px';\n    }\n  }\n\n  /** Removes the height of the tab body wrapper. */\n  _removeTabBodyWrapperHeight(): void {\n    this._tabBodyWrapperHeight = this._tabBodyWrapper.nativeElement.clientHeight;\n    this._tabBodyWrapper.nativeElement.style.height = '';\n    this.animationDone.emit();\n  }\n\n  /** Handle click events, setting new selected index if appropriate. */\n  _handleClick(tab: MatTab, tabHeader: MatTabHeader, idx: number) {\n    if (!tab.disabled) {\n      this.selectedIndex = tabHeader.focusIndex = idx;\n    }\n  }\n\n  /** Retrieves the tabindex for the tab. */\n  _getTabIndex(tab: MatTab, idx: number): number | null {\n    if (tab.disabled) {\n      return null;\n    }\n    return this.selectedIndex === idx ? 0 : -1;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {Directionality} from '@angular/cdk/bidi';\nimport {Platform} from '@angular/cdk/platform';\nimport {ViewportRuler} from '@angular/cdk/scrolling';\nimport {\n  AfterContentChecked,\n  AfterContentInit,\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  forwardRef,\n  Inject,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {\n  CanColor,\n  CanDisable,\n  CanDisableRipple,\n  HasTabIndex,\n  MAT_RIPPLE_GLOBAL_OPTIONS,\n  mixinColor,\n  mixinDisabled,\n  mixinDisableRipple,\n  mixinTabIndex, RippleConfig,\n  RippleGlobalOptions,\n  RippleRenderer,\n  RippleTarget,\n  ThemePalette,\n} from '@angular/material/core';\nimport {merge, of as observableOf, Subject} from 'rxjs';\nimport {takeUntil} from 'rxjs/operators';\nimport {MatInkBar} from '../ink-bar';\nimport {FocusMonitor} from '@angular/cdk/a11y';\n\n\n// Boilerplate for applying mixins to MatTabNav.\n/** @docs-private */\nexport class MatTabNavBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatTabNavMixinBase = mixinDisableRipple(mixinColor(MatTabNavBase, 'primary'));\n\n/**\n * Navigation component matching the styles of the tab group header.\n * Provides anchored navigation with animated ink bar.\n */\n@Component({\n  moduleId: module.id,\n  selector: '[mat-tab-nav-bar]',\n  exportAs: 'matTabNavBar, matTabNav',\n  inputs: ['color', 'disableRipple'],\n  templateUrl: 'tab-nav-bar.html',\n  styleUrls: ['tab-nav-bar.css'],\n  host: {'class': 'mat-tab-nav-bar'},\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatTabNav extends _MatTabNavMixinBase\n    implements AfterContentChecked, AfterContentInit, CanColor, CanDisableRipple, OnDestroy {\n\n  /** Subject that emits when the component has been destroyed. */\n  private readonly _onDestroy = new Subject<void>();\n\n  private _activeLinkChanged: boolean;\n  private _activeLinkElement: ElementRef | null;\n\n  @ViewChild(MatInkBar) _inkBar: MatInkBar;\n\n  /** Query list of all tab links of the tab navigation. */\n  @ContentChildren(forwardRef(() => MatTabLink), {descendants: true})\n  _tabLinks: QueryList<MatTabLink>;\n\n  /** Background color of the tab nav. */\n  @Input()\n  get backgroundColor(): ThemePalette { return this._backgroundColor; }\n  set backgroundColor(value: ThemePalette) {\n    const nativeElement: HTMLElement = this._elementRef.nativeElement;\n\n    nativeElement.classList.remove(`mat-background-${this.backgroundColor}`);\n\n    if (value) {\n      nativeElement.classList.add(`mat-background-${value}`);\n    }\n\n    this._backgroundColor = value;\n  }\n  private _backgroundColor: ThemePalette;\n\n  constructor(elementRef: ElementRef,\n              @Optional() private _dir: Directionality,\n              private _ngZone: NgZone,\n              private _changeDetectorRef: ChangeDetectorRef,\n              private _viewportRuler: ViewportRuler) {\n    super(elementRef);\n  }\n\n  /**\n   * Notifies the component that the active link has been changed.\n   * @deletion-target 7.0.0 `element` parameter to be removed.\n   */\n  updateActiveLink(element: ElementRef) {\n    // Note: keeping the `element` for backwards-compat, but isn't being used for anything.\n    // @deletion-target 7.0.0\n    this._activeLinkChanged = !!element;\n    this._changeDetectorRef.markForCheck();\n  }\n\n  ngAfterContentInit(): void {\n    this._ngZone.runOutsideAngular(() => {\n      const dirChange = this._dir ? this._dir.change : observableOf(null);\n\n      return merge(dirChange, this._viewportRuler.change(10))\n          .pipe(takeUntil(this._onDestroy))\n          .subscribe(() => this._alignInkBar());\n    });\n  }\n\n  /** Checks if the active link has been changed and, if so, will update the ink bar. */\n  ngAfterContentChecked(): void {\n    if (this._activeLinkChanged) {\n      const activeTab = this._tabLinks.find(tab => tab.active);\n\n      this._activeLinkElement = activeTab ? activeTab._elementRef : null;\n      this._alignInkBar();\n      this._activeLinkChanged = false;\n    }\n  }\n\n  ngOnDestroy() {\n    this._onDestroy.next();\n    this._onDestroy.complete();\n  }\n\n  /** Aligns the ink bar to the active link. */\n  _alignInkBar(): void {\n    if (this._activeLinkElement) {\n      this._inkBar.show();\n      this._inkBar.alignToElement(this._activeLinkElement.nativeElement);\n    } else {\n      this._inkBar.hide();\n    }\n  }\n}\n\n\n// Boilerplate for applying mixins to MatTabLink.\nexport class MatTabLinkBase {}\nexport const _MatTabLinkMixinBase =\n  mixinTabIndex(mixinDisableRipple(mixinDisabled(MatTabLinkBase)));\n\n/**\n * Link inside of a `mat-tab-nav-bar`.\n */\n@Directive({\n  selector: '[mat-tab-link], [matTabLink]',\n  exportAs: 'matTabLink',\n  inputs: ['disabled', 'disableRipple', 'tabIndex'],\n  host: {\n    'class': 'mat-tab-link',\n    '[attr.aria-current]': 'active',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.tabIndex]': 'tabIndex',\n    '[class.mat-tab-disabled]': 'disabled',\n    '[class.mat-tab-label-active]': 'active',\n    '(click)': '_handleClick($event)'\n  }\n})\nexport class MatTabLink extends _MatTabLinkMixinBase\n    implements OnDestroy, CanDisable, CanDisableRipple, HasTabIndex, RippleTarget {\n\n  /** Whether the tab link is active or not. */\n  protected _isActive: boolean = false;\n\n  /** Reference to the RippleRenderer for the tab-link. */\n  protected _tabLinkRipple: RippleRenderer;\n\n  /** Whether the ripples are globally disabled through the RippleGlobalOptions */\n  private _ripplesGloballyDisabled = false;\n\n  /** Whether the link is active. */\n  @Input()\n  get active(): boolean { return this._isActive; }\n  set active(value: boolean) {\n    if (value !== this._isActive) {\n      this._isActive = value;\n      this._tabNavBar.updateActiveLink(this._elementRef);\n    }\n  }\n\n  /**\n   * Ripple configuration for ripples that are launched on pointer down.\n   * @docs-private\n   */\n  rippleConfig: RippleConfig = {};\n\n  /**\n   * Whether ripples are disabled on interaction\n   * @docs-private\n   */\n  get rippleDisabled(): boolean {\n    return this.disabled || this.disableRipple || this._tabNavBar.disableRipple ||\n      this._ripplesGloballyDisabled;\n  }\n\n  constructor(private _tabNavBar: MatTabNav,\n              public _elementRef: ElementRef,\n              ngZone: NgZone,\n              platform: Platform,\n              @Optional() @Inject(MAT_RIPPLE_GLOBAL_OPTIONS) globalOptions: RippleGlobalOptions,\n              @Attribute('tabindex') tabIndex: string,\n              /**\n               * @deprecated\n               * @deletion-target 7.0.0 `_focusMonitor` parameter to be made required.\n               */\n              private _focusMonitor?: FocusMonitor) {\n    super();\n\n    this._tabLinkRipple = new RippleRenderer(this, ngZone, _elementRef, platform);\n    this._tabLinkRipple.setupTriggerEvents(_elementRef.nativeElement);\n\n    this.tabIndex = parseInt(tabIndex) || 0;\n\n    if (globalOptions) {\n      this._ripplesGloballyDisabled = !!globalOptions.disabled;\n      // TODO(paul): Once the speedFactor is removed, we no longer need to copy each single option.\n      this.rippleConfig = {\n        terminateOnPointerUp: globalOptions.terminateOnPointerUp,\n        speedFactor: globalOptions.baseSpeedFactor,\n        animation: globalOptions.animation,\n      };\n    }\n\n    if (_focusMonitor) {\n      _focusMonitor.monitor(_elementRef.nativeElement);\n    }\n  }\n\n  ngOnDestroy() {\n    this._tabLinkRipple._removeTriggerEvents();\n\n    if (this._focusMonitor) {\n      this._focusMonitor.stopMonitoring(this._elementRef.nativeElement);\n    }\n  }\n\n  /**\n   * Handles the click event, preventing default navigation if the tab link is disabled.\n   */\n  _handleClick(event: MouseEvent) {\n    if (this.disabled) {\n      event.preventDefault();\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ObserversModule} from '@angular/cdk/observers';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {MatInkBar} from './ink-bar';\nimport {MatTab} from './tab';\nimport {MatTabBody, MatTabBodyPortal} from './tab-body';\nimport {MatTabContent} from './tab-content';\nimport {MatTabGroup} from './tab-group';\nimport {MatTabHeader} from './tab-header';\nimport {MatTabLabel} from './tab-label';\nimport {MatTabLabelWrapper} from './tab-label-wrapper';\nimport {MatTabLink, MatTabNav} from './tab-nav-bar/tab-nav-bar';\nimport {A11yModule} from '@angular/cdk/a11y';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatCommonModule,\n    PortalModule,\n    MatRippleModule,\n    ObserversModule,\n    A11yModule,\n  ],\n  // Don't export all components because some are only to be used internally.\n  exports: [\n    MatCommonModule,\n    MatTabGroup,\n    MatTabLabel,\n    MatTab,\n    MatTabNav,\n    MatTabLink,\n    MatTabContent,\n  ],\n  declarations: [\n    MatTabGroup,\n    MatTabLabel,\n    MatTab,\n    MatInkBar,\n    MatTabLabelWrapper,\n    MatTabNav,\n    MatTabLink,\n    MatTabBody,\n    MatTabBodyPortal,\n    MatTabHeader,\n    MatTabContent,\n  ],\n})\nexport class MatTabsModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  AfterViewInit,\n  ChangeDetectionStrategy,\n  Component,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  isDevMode,\n  QueryList,\n  ViewEncapsulation,\n  Inject,\n} from '@angular/core';\nimport {CanColor, mixinColor} from '@angular/material/core';\nimport {Platform} from '@angular/cdk/platform';\nimport {DOCUMENT} from '@angular/common';\n\n// Boilerplate for applying mixins to MatToolbar.\n/** @docs-private */\nexport class MatToolbarBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatToolbarMixinBase = mixinColor(MatToolbarBase);\n\n@Directive({\n  selector: 'mat-toolbar-row',\n  exportAs: 'matToolbarRow',\n  host: {'class': 'mat-toolbar-row'},\n})\nexport class MatToolbarRow {}\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-toolbar',\n  exportAs: 'matToolbar',\n  templateUrl: 'toolbar.html',\n  styleUrls: ['toolbar.css'],\n  inputs: ['color'],\n  host: {\n    'class': 'mat-toolbar',\n    '[class.mat-toolbar-multiple-rows]': '_toolbarRows.length > 0',\n    '[class.mat-toolbar-single-row]': '_toolbarRows.length === 0',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatToolbar extends _MatToolbarMixinBase implements CanColor, AfterViewInit {\n  private _document: Document;\n\n  /** Reference to all toolbar row elements that have been projected. */\n  @ContentChildren(MatToolbarRow) _toolbarRows: QueryList<MatToolbarRow>;\n\n  constructor(\n    elementRef: ElementRef,\n    private _platform: Platform,\n    @Inject(DOCUMENT) document?: any) {\n    super(elementRef);\n\n    // TODO: make the document a required param when doing breaking changes.\n    this._document = document;\n  }\n\n  ngAfterViewInit() {\n    if (!isDevMode() || !this._platform.isBrowser) {\n      return;\n    }\n\n    this._checkToolbarMixedModes();\n    this._toolbarRows.changes.subscribe(() => this._checkToolbarMixedModes());\n  }\n\n  /**\n   * Throws an exception when developers are attempting to combine the different toolbar row modes.\n   */\n  private _checkToolbarMixedModes() {\n    if (!this._toolbarRows.length) {\n      return;\n    }\n\n    // Check if there are any other DOM nodes that can display content but aren't inside of\n    // a <mat-toolbar-row> element.\n    const isCombinedUsage = [].slice.call(this._elementRef.nativeElement.childNodes)\n      .filter(node => !(node.classList && node.classList.contains('mat-toolbar-row')))\n      .filter(node => node.nodeType !== (this._document ? this._document.COMMENT_NODE : 8))\n      .some(node => node.textContent.trim());\n\n    if (isCombinedUsage) {\n      throwToolbarMixedModesError();\n    }\n  }\n}\n\n/**\n * Throws an exception when attempting to combine the different toolbar row modes.\n * @docs-private\n */\nexport function throwToolbarMixedModesError() {\n  throw Error('MatToolbar: Attempting to combine different toolbar modes. ' +\n    'Either specify multiple `<mat-toolbar-row>` elements explicitly or just place content ' +\n    'inside of a `<mat-toolbar>` for a single row.');\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatToolbar, MatToolbarRow} from './toolbar';\n\n\n@NgModule({\n  imports: [MatCommonModule],\n  exports: [MatToolbar, MatToolbarRow, MatCommonModule],\n  declarations: [MatToolbar, MatToolbarRow],\n})\nexport class MatToolbarModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {CdkTreeNodeOutlet} from '@angular/cdk/tree';\nimport {\n  Directive,\n  ViewContainerRef,\n} from '@angular/core';\n\n/**\n * Outlet for nested CdkNode. Put `[matTreeNodeOutlet]` on a tag to place children dataNodes\n * inside the outlet.\n */\n@Directive({\n  selector: '[matTreeNodeOutlet]'\n})\nexport class MatTreeNodeOutlet implements CdkTreeNodeOutlet {\n  constructor(public viewContainer: ViewContainerRef) {}\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable, SkipSelf, Optional} from '@angular/core';\nimport {Subject} from 'rxjs';\n\n/**\n * To modify the labels and text displayed, create a new instance of MatSortHeaderIntl and\n * include it in a custom provider.\n */\n@Injectable({providedIn: 'root'})\nexport class MatSortHeaderIntl {\n  /**\n   * Stream that emits whenever the labels here are changed. Use this to notify\n   * components if the labels have changed after initialization.\n   */\n  readonly changes: Subject<void> = new Subject<void>();\n\n  /** ARIA label for the sorting button. */\n  sortButtonLabel = (id: string) => {\n    return `Change sorting for ${id}`;\n  }\n}\n/** @docs-private */\nexport function MAT_SORT_HEADER_INTL_PROVIDER_FACTORY(parentIntl: MatSortHeaderIntl) {\n  return parentIntl || new MatSortHeaderIntl();\n}\n\n/** @docs-private */\nexport const MAT_SORT_HEADER_INTL_PROVIDER = {\n  // If there is already an MatSortHeaderIntl available, use that. Otherwise, provide a new one.\n  provide: MatSortHeaderIntl,\n  deps: [[new Optional(), new SkipSelf(), MatSortHeaderIntl]],\n  useFactory: MAT_SORT_HEADER_INTL_PROVIDER_FACTORY\n};\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {CdkColumnDef} from '@angular/cdk/table';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  Input,\n  OnDestroy,\n  OnInit,\n  Optional,\n  ViewEncapsulation\n} from '@angular/core';\nimport {CanDisable, mixinDisabled} from '@angular/material/core';\nimport {merge, Subscription} from 'rxjs';\nimport {MatSort, MatSortable} from './sort';\nimport {matSortAnimations} from './sort-animations';\nimport {SortDirection} from './sort-direction';\nimport {getSortHeaderNotContainedWithinSortError} from './sort-errors';\nimport {MatSortHeaderIntl} from './sort-header-intl';\n\n\n// Boilerplate for applying mixins to the sort header.\n/** @docs-private */\nexport class MatSortHeaderBase {}\nexport const _MatSortHeaderMixinBase = mixinDisabled(MatSortHeaderBase);\n\n/**\n * Valid positions for the arrow to be in for its opacity and translation. If the state is a\n * sort direction, the position of the arrow will be above/below and opacity 0. If the state is\n * hint, the arrow will be in the center with a slight opacity. Active state means the arrow will\n * be fully opaque in the center.\n *\n * @docs-private\n */\nexport type ArrowViewState = SortDirection | 'hint' | 'active';\n\n/**\n * States describing the arrow's animated position (animating fromState to toState).\n * If the fromState is not defined, there will be no animated transition to the toState.\n * @docs-private\n */\nexport interface ArrowViewStateTransition {\n  fromState?: ArrowViewState;\n  toState: ArrowViewState;\n}\n\n/**\n * Applies sorting behavior (click to change sort) and styles to an element, including an\n * arrow to display the current sort direction.\n *\n * Must be provided with an id and contained within a parent MatSort directive.\n *\n * If used on header cells in a CdkTable, it will automatically default its id from its containing\n * column definition.\n */\n@Component({\n  moduleId: module.id,\n  selector: '[mat-sort-header]',\n  exportAs: 'matSortHeader',\n  templateUrl: 'sort-header.html',\n  styleUrls: ['sort-header.css'],\n  host: {\n    '(click)': '_handleClick()',\n    '(mouseenter)': '_setIndicatorHintVisible(true)',\n    '(longpress)': '_setIndicatorHintVisible(true)',\n    '(mouseleave)': '_setIndicatorHintVisible(false)',\n    '[attr.aria-sort]': '_getAriaSortAttribute()',\n    '[class.mat-sort-header-disabled]': '_isDisabled()',\n  },\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  inputs: ['disabled'],\n  animations: [\n    matSortAnimations.indicator,\n    matSortAnimations.leftPointer,\n    matSortAnimations.rightPointer,\n    matSortAnimations.arrowOpacity,\n    matSortAnimations.arrowPosition,\n    matSortAnimations.allowChildren,\n  ]\n})\nexport class MatSortHeader extends _MatSortHeaderMixinBase\n    implements CanDisable, MatSortable, OnDestroy, OnInit {\n  private _rerenderSubscription: Subscription;\n\n  /**\n   * Flag set to true when the indicator should be displayed while the sort is not active. Used to\n   * provide an affordance that the header is sortable by showing on focus and hover.\n   */\n  _showIndicatorHint: boolean = false;\n\n  /**\n   * The view transition state of the arrow (translation/ opacity) - indicates its `from` and `to`\n   * position through the animation. If animations are currently disabled, the fromState is removed\n   * so that there is no animation displayed.\n   */\n  _viewState: ArrowViewStateTransition;\n\n  /** The direction the arrow should be facing according to the current state. */\n  _arrowDirection: SortDirection = '';\n\n  /**\n   * Whether the view state animation should show the transition between the `from` and `to` states.\n   */\n  _disableViewStateAnimation = false;\n\n  /**\n   * ID of this sort header. If used within the context of a CdkColumnDef, this will default to\n   * the column's name.\n   */\n  @Input('mat-sort-header') id: string;\n\n  /** Sets the position of the arrow that displays when sorted. */\n  @Input() arrowPosition: 'before' | 'after' = 'after';\n\n  /** Overrides the sort start value of the containing MatSort for this MatSortable. */\n  @Input() start: 'asc' | 'desc';\n\n  /** Overrides the disable clear value of the containing MatSort for this MatSortable. */\n  @Input()\n  get disableClear(): boolean { return this._disableClear; }\n  set disableClear(v) { this._disableClear = coerceBooleanProperty(v); }\n  private _disableClear: boolean;\n\n  constructor(public _intl: MatSortHeaderIntl,\n              changeDetectorRef: ChangeDetectorRef,\n              @Optional() public _sort: MatSort,\n              @Optional() public _cdkColumnDef: CdkColumnDef) {\n\n    super();\n\n    if (!_sort) {\n      throw getSortHeaderNotContainedWithinSortError();\n    }\n\n    this._rerenderSubscription = merge(_sort.sortChange, _sort._stateChanges, _intl.changes)\n        .subscribe(() => {\n          if (this._isSorted()) {\n            this._updateArrowDirection();\n          }\n\n          // If this header was recently active and now no longer sorted, animate away the arrow.\n          if (!this._isSorted() && this._viewState && this._viewState.toState === 'active') {\n            this._disableViewStateAnimation = false;\n            this._setAnimationTransitionState({fromState: 'active', toState: this._arrowDirection});\n          }\n\n          changeDetectorRef.markForCheck();\n        });\n  }\n\n  ngOnInit() {\n    if (!this.id && this._cdkColumnDef) {\n      this.id = this._cdkColumnDef.name;\n    }\n\n    // Initialize the direction of the arrow and set the view state to be immediately that state.\n    this._updateArrowDirection();\n    this._setAnimationTransitionState(\n        {toState: this._isSorted() ? 'active' : this._arrowDirection});\n\n    this._sort.register(this);\n  }\n\n  ngOnDestroy() {\n    this._sort.deregister(this);\n    this._rerenderSubscription.unsubscribe();\n  }\n\n  /**\n   * Sets the \"hint\" state such that the arrow will be semi-transparently displayed as a hint to the\n   * user showing what the active sort will become. If set to false, the arrow will fade away.\n   */\n  _setIndicatorHintVisible(visible: boolean) {\n    // No-op if the sort header is disabled - should not make the hint visible.\n    if (this._isDisabled() && visible) { return; }\n\n    this._showIndicatorHint = visible;\n\n    if (!this._isSorted()) {\n      this._updateArrowDirection();\n      if (this._showIndicatorHint) {\n        this._setAnimationTransitionState({fromState: this._arrowDirection, toState: 'hint'});\n      } else {\n        this._setAnimationTransitionState({fromState: 'hint', toState: this._arrowDirection});\n      }\n    }\n  }\n\n  /**\n   * Sets the animation transition view state for the arrow's position and opacity. If the\n   * `disableViewStateAnimation` flag is set to true, the `fromState` will be ignored so that\n   * no animation appears.\n   */\n  _setAnimationTransitionState(viewState: ArrowViewStateTransition) {\n    this._viewState = viewState;\n\n    // If the animation for arrow position state (opacity/translation) should be disabled,\n    // remove the fromState so that it jumps right to the toState.\n    if (this._disableViewStateAnimation) {\n      this._viewState = {toState: viewState.toState};\n    }\n  }\n\n  /** Triggers the sort on this sort header and removes the indicator hint. */\n  _handleClick() {\n    if (this._isDisabled()) { return; }\n\n    this._sort.sort(this);\n\n    // Do not show the animation if the header was already shown in the right position.\n    if (this._viewState.toState === 'hint' || this._viewState.toState === 'active') {\n      this._disableViewStateAnimation = true;\n    }\n\n    // If the arrow is now sorted, animate the arrow into place. Otherwise, animate it away into\n    // the direction it is facing.\n    const viewState: ArrowViewStateTransition = this._isSorted() ?\n        {fromState: this._arrowDirection, toState: 'active'} :\n        {fromState: 'active', toState: this._arrowDirection};\n    this._setAnimationTransitionState(viewState);\n\n    this._showIndicatorHint = false;\n  }\n\n  /** Whether this MatSortHeader is currently sorted in either ascending or descending order. */\n  _isSorted() {\n    return this._sort.active == this.id &&\n        (this._sort.direction === 'asc' || this._sort.direction === 'desc');\n  }\n\n  /** Returns the animation state for the arrow direction (indicator and pointers). */\n  _getArrowDirectionState() {\n    return `${this._isSorted() ? 'active-' : ''}${this._arrowDirection}`;\n  }\n\n  /** Returns the arrow position state (opacity, translation). */\n  _getArrowViewState() {\n    const fromState = this._viewState.fromState;\n    return (fromState ? `${fromState}-to-` : '') + this._viewState.toState;\n  }\n\n  /**\n   * Updates the direction the arrow should be pointing. If it is not sorted, the arrow should be\n   * facing the start direction. Otherwise if it is sorted, the arrow should point in the currently\n   * active sorted direction. The reason this is updated through a function is because the direction\n   * should only be changed at specific times - when deactivated but the hint is displayed and when\n   * the sort is active and the direction changes. Otherwise the arrow's direction should linger\n   * in cases such as the sort becoming deactivated but we want to animate the arrow away while\n   * preserving its direction, even though the next sort direction is actually different and should\n   * only be changed once the arrow displays again (hint or activation).\n   */\n  _updateArrowDirection() {\n    this._arrowDirection = this._isSorted() ?\n        this._sort.direction :\n        (this.start || this._sort.start);\n  }\n\n  _isDisabled() {\n    return this._sort.disabled || this.disabled;\n  }\n\n  /**\n   * Gets the aria-sort attribute that should be applied to this sort header. If this header\n   * is not sorted, returns null so that the attribute is removed from the host element. Aria spec\n   * says that the aria-sort property should only be present on one header at a time, so removing\n   * ensures this is true.\n   */\n  _getAriaSortAttribute() {\n    if (!this._isSorted()) { return null; }\n\n    return this._sort.direction == 'asc' ? 'ascending' : 'descending';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatSortHeader} from './sort-header';\nimport {MatSort} from './sort';\nimport {MAT_SORT_HEADER_INTL_PROVIDER} from './sort-header-intl';\nimport {CommonModule} from '@angular/common';\n\n\n@NgModule({\n  imports: [CommonModule],\n  exports: [MatSort, MatSortHeader],\n  declarations: [MatSort, MatSortHeader],\n  providers: [MAT_SORT_HEADER_INTL_PROVIDER]\n})\nexport class MatSortModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, TemplateRef} from '@angular/core';\nimport {CdkStepLabel} from '@angular/cdk/stepper';\n\n@Directive({\n  selector: '[matStepLabel]',\n})\nexport class MatStepLabel extends CdkStepLabel {\n  constructor(template: TemplateRef<any>) {\n    super(template);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable} from '@angular/core';\nimport {Subject} from 'rxjs';\n\n\n/** Stepper data that is required for internationalization. */\n@Injectable({providedIn: 'root'})\nexport class MatStepperIntl {\n  /**\n   * Stream that emits whenever the labels here are changed. Use this to notify\n   * components if the labels have changed after initialization.\n   */\n  readonly changes: Subject<void> = new Subject<void>();\n\n  /** Label that is rendered below optional steps. */\n  optionalLabel: string = 'Optional';\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor} from '@angular/cdk/a11y';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  Input,\n  OnDestroy,\n  ViewEncapsulation,\n  TemplateRef,\n} from '@angular/core';\nimport {Subscription} from 'rxjs';\nimport {MatStepLabel} from './step-label';\nimport {MatStepperIntl} from './stepper-intl';\nimport {MatStepperIconContext} from './stepper-icon';\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-step-header',\n  templateUrl: 'step-header.html',\n  styleUrls: ['step-header.css'],\n  host: {\n    'class': 'mat-step-header',\n    'role': 'tab',\n  },\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatStepHeader implements OnDestroy {\n  private _intlSubscription: Subscription;\n\n  /** State of the given step. */\n  @Input() state: string;\n\n  /** Label of the given step. */\n  @Input() label: MatStepLabel | string;\n\n  /** Overrides for the header icons, passed in via the stepper. */\n  @Input() iconOverrides: {[key: string]: TemplateRef<MatStepperIconContext>};\n\n  /** Index of the given step. */\n  @Input() index: number;\n\n  /** Whether the given step is selected. */\n  @Input() selected: boolean;\n\n  /** Whether the given step label is active. */\n  @Input() active: boolean;\n\n  /** Whether the given step is optional. */\n  @Input() optional: boolean;\n\n  constructor(\n    public _intl: MatStepperIntl,\n    private _focusMonitor: FocusMonitor,\n    private _element: ElementRef,\n    changeDetectorRef: ChangeDetectorRef) {\n    _focusMonitor.monitor(_element.nativeElement, true);\n    this._intlSubscription = _intl.changes.subscribe(() => changeDetectorRef.markForCheck());\n  }\n\n  ngOnDestroy() {\n    this._intlSubscription.unsubscribe();\n    this._focusMonitor.stopMonitoring(this._element.nativeElement);\n  }\n\n  /** Returns string label of given step if it is a text label. */\n  _stringLabel(): string | null {\n    return this.label instanceof MatStepLabel ? null : this.label;\n  }\n\n  /** Returns MatStepLabel if the label of given step is a template label. */\n  _templateLabel(): MatStepLabel | null {\n    return this.label instanceof MatStepLabel ? this.label : null;\n  }\n\n  /** Returns the host HTML element. */\n  _getHostElement() {\n    return this._element.nativeElement;\n  }\n\n  /** Template context variables that are exposed to the `matStepperIcon` instances. */\n  _getIconContext(): MatStepperIconContext {\n    return {\n      index: this.index,\n      active: this.active,\n      optional: this.optional\n    };\n  }\n\n  focus() {\n    this._getHostElement().focus();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/** Animations used by the Material steppers. */\nexport const matStepperAnimations: {\n  readonly horizontalStepTransition: AnimationTriggerMetadata;\n  readonly verticalStepTransition: AnimationTriggerMetadata;\n} = {\n  /** Animation that transitions the step along the X axis in a horizontal stepper. */\n  horizontalStepTransition: trigger('stepTransition', [\n    state('previous', style({transform: 'translate3d(-100%, 0, 0)', visibility: 'hidden'})),\n    state('current', style({transform: 'none', visibility: 'visible'})),\n    state('next', style({transform: 'translate3d(100%, 0, 0)', visibility: 'hidden'})),\n    transition('* => *', animate('500ms cubic-bezier(0.35, 0, 0.25, 1)'))\n  ]),\n\n  /** Animation that transitions the step along the Y axis in a vertical stepper. */\n  verticalStepTransition: trigger('stepTransition', [\n    state('previous', style({height: '0px', visibility: 'hidden'})),\n    state('next', style({height: '0px', visibility: 'hidden'})),\n    state('current', style({height: '*', visibility: 'visible'})),\n    transition('* <=> current', animate('225ms cubic-bezier(0.4, 0.0, 0.2, 1)'))\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, Input, TemplateRef} from '@angular/core';\n\n/** Template context available to an attached `matStepperIcon`. */\nexport interface MatStepperIconContext {\n  /** Index of the step. */\n  index: number;\n  /** Whether the step is currently active. */\n  active: boolean;\n  /** Whether the step is optional. */\n  optional: boolean;\n}\n\n/**\n * Template to be used to override the icons inside the step header.\n */\n@Directive({\n  selector: 'ng-template[matStepperIcon]',\n})\nexport class MatStepperIcon {\n  /** Name of the icon to be overridden. */\n  @Input('matStepperIcon') name: 'edit' | 'done' | 'number';\n\n  constructor(public templateRef: TemplateRef<MatStepperIconContext>) {}\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directionality} from '@angular/cdk/bidi';\nimport {CdkStep, CdkStepper, StepContentPositionState} from '@angular/cdk/stepper';\nimport {AnimationEvent} from '@angular/animations';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  ContentChildren,\n  Directive,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Optional,\n  Output,\n  QueryList,\n  SkipSelf,\n  TemplateRef,\n  ViewChildren,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {FormControl, FormGroupDirective, NgForm} from '@angular/forms';\nimport {ErrorStateMatcher} from '@angular/material/core';\nimport {MatStepHeader} from './step-header';\nimport {MatStepLabel} from './step-label';\nimport {takeUntil} from 'rxjs/operators';\nimport {matStepperAnimations} from './stepper-animations';\nimport {MatStepperIcon, MatStepperIconContext} from './stepper-icon';\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-step',\n  templateUrl: 'step.html',\n  providers: [{provide: ErrorStateMatcher, useExisting: MatStep}],\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matStep',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatStep extends CdkStep implements ErrorStateMatcher {\n  /** Content for step label given by `<ng-template matStepLabel>`. */\n  @ContentChild(MatStepLabel) stepLabel: MatStepLabel;\n\n  constructor(@Inject(forwardRef(() => MatStepper)) stepper: MatStepper,\n              @SkipSelf() private _errorStateMatcher: ErrorStateMatcher) {\n    super(stepper);\n  }\n\n  /** Custom error state matcher that additionally checks for validity of interacted form. */\n  isErrorState(control: FormControl | null, form: FormGroupDirective | NgForm | null): boolean {\n    const originalErrorState = this._errorStateMatcher.isErrorState(control, form);\n\n    // Custom error state checks for the validity of form that is not submitted or touched\n    // since user can trigger a form change by calling for another step without directly\n    // interacting with the current form.\n    const customErrorState = !!(control && control.invalid && this.interacted);\n\n    return originalErrorState || customErrorState;\n  }\n}\n\n\n@Directive({\n  selector: '[matStepper]'\n})\nexport class MatStepper extends CdkStepper implements AfterContentInit {\n  /** The list of step headers of the steps in the stepper. */\n  @ViewChildren(MatStepHeader) _stepHeader: QueryList<MatStepHeader>;\n\n  /** Steps that the stepper holds. */\n  @ContentChildren(MatStep) _steps: QueryList<MatStep>;\n\n  /** Custom icon overrides passed in by the consumer. */\n  @ContentChildren(MatStepperIcon) _icons: QueryList<MatStepperIcon>;\n\n  /** Event emitted when the current step is done transitioning in. */\n  @Output() readonly animationDone: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Consumer-specified template-refs to be used to override the header icons. */\n  _iconOverrides: {[key: string]: TemplateRef<MatStepperIconContext>} = {};\n\n  ngAfterContentInit() {\n    const icons = this._icons.toArray();\n\n    ['edit', 'done', 'number'].forEach(name => {\n      const override = icons.find(icon => icon.name === name);\n\n      if (override) {\n        this._iconOverrides[name] = override.templateRef;\n      }\n    });\n\n    // Mark the component for change detection whenever the content children query changes\n    this._steps.changes.pipe(takeUntil(this._destroyed)).subscribe(() => this._stateChanged());\n  }\n\n  _animationDone(event: AnimationEvent) {\n    if ((event.toState as StepContentPositionState) === 'current') {\n      this.animationDone.emit();\n    }\n  }\n}\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-horizontal-stepper',\n  exportAs: 'matHorizontalStepper',\n  templateUrl: 'stepper-horizontal.html',\n  styleUrls: ['stepper.css'],\n  inputs: ['selectedIndex'],\n  host: {\n    'class': 'mat-stepper-horizontal',\n    'aria-orientation': 'horizontal',\n    'role': 'tablist',\n  },\n  animations: [matStepperAnimations.horizontalStepTransition],\n  providers: [{provide: MatStepper, useExisting: MatHorizontalStepper}],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatHorizontalStepper extends MatStepper { }\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-vertical-stepper',\n  exportAs: 'matVerticalStepper',\n  templateUrl: 'stepper-vertical.html',\n  styleUrls: ['stepper.css'],\n  inputs: ['selectedIndex'],\n  host: {\n    'class': 'mat-stepper-vertical',\n    'aria-orientation': 'vertical',\n    'role': 'tablist',\n  },\n  animations: [matStepperAnimations.verticalStepTransition],\n  providers: [{provide: MatStepper, useExisting: MatVerticalStepper}],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatVerticalStepper extends MatStepper {\n  constructor(@Optional() dir: Directionality, changeDetectorRef: ChangeDetectorRef) {\n    super(dir, changeDetectorRef);\n    this._orientation = 'vertical';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive} from '@angular/core';\nimport {CdkStepper, CdkStepperNext, CdkStepperPrevious} from '@angular/cdk/stepper';\nimport {MatStepper} from './stepper';\n\n/** Button that moves to the next step in a stepper workflow. */\n@Directive({\n  selector: 'button[matStepperNext]',\n  host: {\n    '(click)': '_stepper.next()',\n    '[type]': 'type',\n  },\n  inputs: ['type'],\n  providers: [{provide: CdkStepper, useExisting: MatStepper}]\n})\nexport class MatStepperNext extends CdkStepperNext {}\n\n/** Button that moves to the previous step in a stepper workflow. */\n@Directive({\n  selector: 'button[matStepperPrevious]',\n  host: {\n    '(click)': '_stepper.previous()',\n    '[type]': 'type',\n  },\n  inputs: ['type'],\n  providers: [{provide: CdkStepper, useExisting: MatStepper}]\n})\nexport class MatStepperPrevious extends CdkStepperPrevious {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {PortalModule} from '@angular/cdk/portal';\nimport {CdkStepperModule} from '@angular/cdk/stepper';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatButtonModule} from '@angular/material/button';\nimport {ErrorStateMatcher, MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {MatIconModule} from '@angular/material/icon';\nimport {MatStepHeader} from './step-header';\nimport {MatStepLabel} from './step-label';\nimport {MatHorizontalStepper, MatStep, MatStepper, MatVerticalStepper} from './stepper';\nimport {MatStepperNext, MatStepperPrevious} from './stepper-button';\nimport {MatStepperIcon} from './stepper-icon';\nimport {MatStepperIntl} from './stepper-intl';\n\n\n@NgModule({\n  imports: [\n    MatCommonModule,\n    CommonModule,\n    PortalModule,\n    MatButtonModule,\n    CdkStepperModule,\n    MatIconModule,\n    MatRippleModule,\n  ],\n  exports: [\n    MatCommonModule,\n    MatHorizontalStepper,\n    MatVerticalStepper,\n    MatStep,\n    MatStepLabel,\n    MatStepper,\n    MatStepperNext,\n    MatStepperPrevious,\n    MatStepHeader,\n    MatStepperIcon,\n  ],\n  declarations: [\n    MatHorizontalStepper,\n    MatVerticalStepper,\n    MatStep,\n    MatStepLabel,\n    MatStepper,\n    MatStepperNext,\n    MatStepperPrevious,\n    MatStepHeader,\n    MatStepperIcon,\n  ],\n  providers: [MatStepperIntl, ErrorStateMatcher],\n})\nexport class MatStepperModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  IterableDiffers,\n  Optional,\n  ViewEncapsulation\n} from '@angular/core';\nimport {CDK_TABLE_TEMPLATE, CdkTable} from '@angular/cdk/table';\nimport {Directionality} from '@angular/cdk/bidi';\n\n/**\n * Wrapper for the CdkTable with Material design styles.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-table, table[mat-table]',\n  exportAs: 'matTable',\n  template: CDK_TABLE_TEMPLATE,\n  styleUrls: ['table.css'],\n  host: {\n    'class': 'mat-table',\n  },\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatTable<T> extends CdkTable<T> {\n  /** Overrides the sticky CSS class set by the `CdkTable`. */\n  protected stickyCssClass = 'mat-table-sticky';\n\n  // TODO(andrewseguin): Remove this explicitly set constructor when the compiler knows how to\n  // properly build the es6 version of the class. Currently sets ctorParameters to empty due to a\n  // fixed bug.\n  // https://github.com/angular/tsickle/pull/760 - tsickle PR that fixed this\n  // https://github.com/angular/angular/pull/23531 - updates compiler-cli to fixed version\n  constructor(protected _differs: IterableDiffers,\n              protected _changeDetectorRef: ChangeDetectorRef,\n              protected _elementRef: ElementRef,\n              @Attribute('role') role: string,\n              @Optional() protected readonly _dir: Directionality) {\n    super(_differs, _changeDetectorRef, _elementRef, role, _dir);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, ElementRef, Input, TemplateRef} from '@angular/core';\nimport {\n  CdkCell,\n  CdkCellDef,\n  CdkColumnDef, CdkFooterCell, CdkFooterCellDef,\n  CdkHeaderCell,\n  CdkHeaderCellDef,\n} from '@angular/cdk/table';\n\n/**\n * Cell definition for the mat-table.\n * Captures the template of a column's data row cell as well as cell-specific properties.\n */\n@Directive({\n  selector: '[matCellDef]',\n  providers: [{provide: CdkCellDef, useExisting: MatCellDef}]\n})\nexport class MatCellDef extends CdkCellDef {\n  // TODO(andrewseguin): Remove this constructor after compiler-cli is updated; see issue #9329\n  constructor(/** @docs-private */ public template: TemplateRef<any>) {\n    super(template);\n  }\n}\n\n/**\n * Header cell definition for the mat-table.\n * Captures the template of a column's header cell and as well as cell-specific properties.\n */\n@Directive({\n  selector: '[matHeaderCellDef]',\n  providers: [{provide: CdkHeaderCellDef, useExisting: MatHeaderCellDef}]\n})\nexport class MatHeaderCellDef extends CdkHeaderCellDef {\n  // TODO(andrewseguin): Remove this constructor after compiler-cli is updated; see issue #9329\n  constructor(/** @docs-private */ public template: TemplateRef<any>) {\n    super(template);\n  }\n}\n\n/**\n * Footer cell definition for the mat-table.\n * Captures the template of a column's footer cell and as well as cell-specific properties.\n */\n@Directive({\n  selector: '[matFooterCellDef]',\n  providers: [{provide: CdkFooterCellDef, useExisting: MatFooterCellDef}]\n})\nexport class MatFooterCellDef extends CdkFooterCellDef {\n  // TODO(andrewseguin): Remove this constructor after compiler-cli is updated; see issue #9329\n  constructor(/** @docs-private */ public template: TemplateRef<any>) {\n    super(template);\n  }\n}\n\n/**\n * Column definition for the mat-table.\n * Defines a set of cells available for a table column.\n */\n@Directive({\n  selector: '[matColumnDef]',\n  providers: [{provide: CdkColumnDef, useExisting: MatColumnDef}],\n})\nexport class MatColumnDef extends CdkColumnDef {\n  /** Unique name for this column. */\n  @Input('matColumnDef') name: string;\n\n  /** Whether this column should be sticky positioned at the start of the row */\n  @Input() sticky: boolean;\n\n  /** Whether this column should be sticky positioned on the end of the row */\n  @Input() stickyEnd: boolean;\n}\n\n/** Header cell template container that adds the right classes and role. */\n@Directive({\n  selector: 'mat-header-cell, th[mat-header-cell]',\n  host: {\n    'class': 'mat-header-cell',\n    'role': 'columnheader',\n  },\n})\nexport class MatHeaderCell extends CdkHeaderCell {\n  constructor(columnDef: CdkColumnDef,\n              elementRef: ElementRef) {\n    super(columnDef, elementRef);\n    elementRef.nativeElement.classList.add(`mat-column-${columnDef.cssClassFriendlyName}`);\n  }\n}\n\n/** Footer cell template container that adds the right classes and role. */\n@Directive({\n  selector: 'mat-footer-cell, td[mat-footer-cell]',\n  host: {\n    'class': 'mat-footer-cell',\n    'role': 'gridcell',\n  },\n})\nexport class MatFooterCell extends CdkFooterCell {\n  constructor(columnDef: CdkColumnDef,\n              elementRef: ElementRef) {\n    super(columnDef, elementRef);\n    elementRef.nativeElement.classList.add(`mat-column-${columnDef.cssClassFriendlyName}`);\n  }\n}\n\n/** Cell template container that adds the right classes and role. */\n@Directive({\n  selector: 'mat-cell, td[mat-cell]',\n  host: {\n    'class': 'mat-cell',\n    'role': 'gridcell',\n  },\n})\nexport class MatCell extends CdkCell {\n  constructor(columnDef: CdkColumnDef,\n              elementRef: ElementRef) {\n    super(columnDef, elementRef);\n    elementRef.nativeElement.classList.add(`mat-column-${columnDef.cssClassFriendlyName}`);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  Directive,\n  IterableDiffers, TemplateRef,\n  ViewEncapsulation\n} from '@angular/core';\nimport {\n  CDK_ROW_TEMPLATE, CdkFooterRow, CdkFooterRowDef,\n  CdkHeaderRow,\n  CdkHeaderRowDef,\n  CdkRow,\n  CdkRowDef,\n} from '@angular/cdk/table';\n\n/**\n * Header row definition for the mat-table.\n * Captures the header row's template and other header properties such as the columns to display.\n */\n@Directive({\n  selector: '[matHeaderRowDef]',\n  providers: [{provide: CdkHeaderRowDef, useExisting: MatHeaderRowDef}],\n  inputs: ['columns: matHeaderRowDef', 'sticky: matHeaderRowDefSticky'],\n})\nexport class MatHeaderRowDef extends CdkHeaderRowDef {\n  // TODO(andrewseguin): Remove this constructor after compiler-cli is updated; see issue #9329\n  constructor(template: TemplateRef<any>, _differs: IterableDiffers) {\n    super(template, _differs);\n  }\n}\n\n/**\n * Footer row definition for the mat-table.\n * Captures the footer row's template and other footer properties such as the columns to display.\n */\n@Directive({\n  selector: '[matFooterRowDef]',\n  providers: [{provide: CdkFooterRowDef, useExisting: MatFooterRowDef}],\n  inputs: ['columns: matFooterRowDef', 'sticky: matFooterRowDefSticky'],\n})\nexport class MatFooterRowDef extends CdkFooterRowDef {\n  // TODO(andrewseguin): Remove this constructor after compiler-cli is updated; see issue #9329\n  constructor(template: TemplateRef<any>, _differs: IterableDiffers) {\n    super(template, _differs);\n  }\n}\n\n/**\n * Data row definition for the mat-table.\n * Captures the footer row's template and other footer properties such as the columns to display and\n * a when predicate that describes when this row should be used.\n */\n@Directive({\n  selector: '[matRowDef]',\n  providers: [{provide: CdkRowDef, useExisting: MatRowDef}],\n  inputs: ['columns: matRowDefColumns', 'when: matRowDefWhen'],\n})\nexport class MatRowDef<T> extends CdkRowDef<T> {\n  // TODO(andrewseguin): Remove this constructor after compiler-cli is updated; see issue #9329\n  constructor(template: TemplateRef<any>, _differs: IterableDiffers) {\n    super(template, _differs);\n  }\n}\n\n/** Footer template container that contains the cell outlet. Adds the right class and role. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-header-row, tr[mat-header-row]',\n  template: CDK_ROW_TEMPLATE,\n  host: {\n    'class': 'mat-header-row',\n    'role': 'row',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matHeaderRow',\n  providers: [{provide: CdkHeaderRow, useExisting: MatHeaderRow}],\n})\nexport class MatHeaderRow extends CdkHeaderRow { }\n\n/** Footer template container that contains the cell outlet. Adds the right class and role. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-footer-row, tr[mat-footer-row]',\n  template: CDK_ROW_TEMPLATE,\n  host: {\n    'class': 'mat-footer-row',\n    'role': 'row',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matFooterRow',\n  providers: [{provide: CdkFooterRow, useExisting: MatFooterRow}],\n})\nexport class MatFooterRow extends CdkFooterRow { }\n\n/** Data row template container that contains the cell outlet. Adds the right class and role. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-row, tr[mat-row]',\n  template: CDK_ROW_TEMPLATE,\n  host: {\n    'class': 'mat-row',\n    'role': 'row',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matRow',\n  providers: [{provide: CdkRow, useExisting: MatRow}],\n})\nexport class MatRow extends CdkRow { }\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatTable} from './table';\nimport {CdkTableModule} from '@angular/cdk/table';\nimport {\n  MatCell,\n  MatCellDef,\n  MatColumnDef,\n  MatFooterCell,\n  MatFooterCellDef,\n  MatHeaderCell,\n  MatHeaderCellDef\n} from './cell';\nimport {\n  MatFooterRow,\n  MatFooterRowDef,\n  MatHeaderRow,\n  MatHeaderRowDef,\n  MatRow,\n  MatRowDef\n} from './row';\nimport {CommonModule} from '@angular/common';\nimport {MatCommonModule} from '@angular/material/core';\n\nconst EXPORTED_DECLARATIONS = [\n  // Table\n  MatTable,\n\n  // Template defs\n  MatHeaderCellDef,\n  MatHeaderRowDef,\n  MatColumnDef,\n  MatCellDef,\n  MatRowDef,\n  MatFooterCellDef,\n  MatFooterRowDef,\n\n  // Cell directives\n  MatHeaderCell,\n  MatCell,\n  MatFooterCell,\n\n  // Row directions\n  MatHeaderRow,\n  MatRow,\n  MatFooterRow,\n];\n\n@NgModule({\n  imports: [CdkTableModule, CommonModule, MatCommonModule],\n  exports: EXPORTED_DECLARATIONS,\n  declarations: EXPORTED_DECLARATIONS,\n})\nexport class MatTableModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {_isNumberValue} from '@angular/cdk/coercion';\nimport {DataSource} from '@angular/cdk/table';\nimport {\n  BehaviorSubject,\n  combineLatest,\n  merge,\n  Observable,\n  of as observableOf,\n  Subscription\n} from 'rxjs';\nimport {MatPaginator, PageEvent} from '@angular/material/paginator';\nimport {MatSort, Sort} from '@angular/material/sort';\nimport {map} from 'rxjs/operators';\n\n\n/**\n * Data source that accepts a client-side data array and includes native support of filtering,\n * sorting (using MatSort), and pagination (using MatPaginator).\n *\n * Allows for sort customization by overriding sortingDataAccessor, which defines how data\n * properties are accessed. Also allows for filter customization by overriding filterTermAccessor,\n * which defines how row data is converted to a string for filter matching.\n */\nexport class MatTableDataSource<T> extends DataSource<T> {\n  /** Stream that emits when a new data array is set on the data source. */\n  private readonly _data: BehaviorSubject<T[]>;\n\n  /** Stream emitting render data to the table (depends on ordered data changes). */\n  private readonly _renderData = new BehaviorSubject<T[]>([]);\n\n  /** Stream that emits when a new filter string is set on the data source. */\n  private readonly _filter = new BehaviorSubject<string>('');\n\n  /**\n   * Subscription to the changes that should trigger an update to the table's rendered rows, such\n   * as filtering, sorting, pagination, or base data changes.\n   */\n  _renderChangesSubscription = Subscription.EMPTY;\n\n  /**\n   * The filtered set of data that has been matched by the filter string, or all the data if there\n   * is no filter. Useful for knowing the set of data the table represents.\n   * For example, a 'selectAll()' function would likely want to select the set of filtered data\n   * shown to the user rather than all the data.\n   */\n  filteredData: T[];\n\n  /** Array of data that should be rendered by the table, where each object represents one row. */\n  get data() { return this._data.value; }\n  set data(data: T[]) { this._data.next(data); }\n\n  /**\n   * Filter term that should be used to filter out objects from the data array. To override how\n   * data objects match to this filter string, provide a custom function for filterPredicate.\n   */\n  get filter(): string { return this._filter.value; }\n  set filter(filter: string) { this._filter.next(filter); }\n\n  /**\n   * Instance of the MatSort directive used by the table to control its sorting. Sort changes\n   * emitted by the MatSort will trigger an update to the table's rendered data.\n   */\n  get sort(): MatSort | null { return this._sort; }\n  set sort(sort: MatSort|null) {\n    this._sort = sort;\n    this._updateChangeSubscription();\n  }\n  private _sort: MatSort|null;\n\n  /**\n   * Instance of the MatPaginator component used by the table to control what page of the data is\n   * displayed. Page changes emitted by the MatPaginator will trigger an update to the\n   * table's rendered data.\n   *\n   * Note that the data source uses the paginator's properties to calculate which page of data\n   * should be displayed. If the paginator receives its properties as template inputs,\n   * e.g. `[pageLength]=100` or `[pageIndex]=1`, then be sure that the paginator's view has been\n   * initialized before assigning it to this data source.\n   */\n  get paginator(): MatPaginator | null { return this._paginator; }\n  set paginator(paginator: MatPaginator|null) {\n    this._paginator = paginator;\n    this._updateChangeSubscription();\n  }\n  private _paginator: MatPaginator|null;\n\n  /**\n   * Data accessor function that is used for accessing data properties for sorting through\n   * the default sortData function.\n   * This default function assumes that the sort header IDs (which defaults to the column name)\n   * matches the data's properties (e.g. column Xyz represents data['Xyz']).\n   * May be set to a custom function for different behavior.\n   * @param data Data object that is being accessed.\n   * @param sortHeaderId The name of the column that represents the data.\n   */\n  sortingDataAccessor: ((data: T, sortHeaderId: string) => string|number) =\n      (data: T, sortHeaderId: string): string|number => {\n    const value: any = data[sortHeaderId];\n    return _isNumberValue(value) ? Number(value) : value;\n  }\n\n  /**\n   * Gets a sorted copy of the data array based on the state of the MatSort. Called\n   * after changes are made to the filtered data or when sort changes are emitted from MatSort.\n   * By default, the function retrieves the active sort and its direction and compares data\n   * by retrieving data using the sortingDataAccessor. May be overridden for a custom implementation\n   * of data ordering.\n   * @param data The array of data that should be sorted.\n   * @param sort The connected MatSort that holds the current sort state.\n   */\n  sortData: ((data: T[], sort: MatSort) => T[]) = (data: T[], sort: MatSort): T[] => {\n    const active = sort.active;\n    const direction = sort.direction;\n    if (!active || direction == '') { return data; }\n\n    return data.sort((a, b) => {\n      let valueA = this.sortingDataAccessor(a, active);\n      let valueB = this.sortingDataAccessor(b, active);\n\n      // If both valueA and valueB exist (truthy), then compare the two. Otherwise, check if\n      // one value exists while the other doesn't. In this case, existing value should come first.\n      // This avoids inconsistent results when comparing values to undefined/null.\n      // If neither value exists, return 0 (equal).\n      let comparatorResult = 0;\n      if (valueA != null && valueB != null) {\n        // Check if one value is greater than the other; if equal, comparatorResult should remain 0.\n        if (valueA > valueB) {\n          comparatorResult = 1;\n        } else if (valueA < valueB) {\n          comparatorResult = -1;\n        }\n      } else if (valueA != null) {\n        comparatorResult = 1;\n      } else if (valueB != null) {\n        comparatorResult = -1;\n      }\n\n      return comparatorResult * (direction == 'asc' ? 1 : -1);\n    });\n  }\n\n  /**\n   * Checks if a data object matches the data source's filter string. By default, each data object\n   * is converted to a string of its properties and returns true if the filter has\n   * at least one occurrence in that string. By default, the filter string has its whitespace\n   * trimmed and the match is case-insensitive. May be overridden for a custom implementation of\n   * filter matching.\n   * @param data Data object used to check against the filter.\n   * @param filter Filter string that has been set on the data source.\n   * @returns Whether the filter matches against the data\n   */\n  filterPredicate: ((data: T, filter: string) => boolean) = (data: T, filter: string): boolean => {\n    // Transform the data into a lowercase string of all property values.\n    const accumulator = (currentTerm, key) => currentTerm + data[key];\n    const dataStr = Object.keys(data).reduce(accumulator, '').toLowerCase();\n\n    // Transform the filter by converting it to lowercase and removing whitespace.\n    const transformedFilter = filter.trim().toLowerCase();\n\n    return dataStr.indexOf(transformedFilter) != -1;\n  }\n\n  constructor(initialData: T[] = []) {\n    super();\n    this._data = new BehaviorSubject<T[]>(initialData);\n    this._updateChangeSubscription();\n  }\n\n  /**\n   * Subscribe to changes that should trigger an update to the table's rendered rows. When the\n   * changes occur, process the current state of the filter, sort, and pagination along with\n   * the provided base data and send it to the table for rendering.\n   */\n  _updateChangeSubscription() {\n    // Sorting and/or pagination should be watched if MatSort and/or MatPaginator are provided.\n    // The events should emit whenever the component emits a change or initializes, or if no\n    // component is provided, a stream with just a null event should be provided.\n    // The `sortChange` and `pageChange` acts as a signal to the combineLatests below so that the\n    // pipeline can progress to the next step. Note that the value from these streams are not used,\n    // they purely act as a signal to progress in the pipeline.\n    const sortChange: Observable<Sort|null> = this._sort ?\n        merge<Sort>(this._sort.sortChange, this._sort.initialized) :\n        observableOf(null);\n    const pageChange: Observable<PageEvent|null> = this._paginator ?\n        merge<PageEvent>(this._paginator.page, this._paginator.initialized) :\n        observableOf(null);\n\n    const dataStream = this._data;\n    // Watch for base data or filter changes to provide a filtered set of data.\n    const filteredData = combineLatest(dataStream, this._filter)\n      .pipe(map(([data]) => this._filterData(data)));\n    // Watch for filtered data or sort changes to provide an ordered set of data.\n    const orderedData = combineLatest(filteredData, sortChange)\n      .pipe(map(([data]) => this._orderData(data)));\n    // Watch for ordered data or page changes to provide a paged set of data.\n    const paginatedData = combineLatest(orderedData, pageChange)\n      .pipe(map(([data]) => this._pageData(data)));\n    // Watched for paged data changes and send the result to the table to render.\n    this._renderChangesSubscription.unsubscribe();\n    this._renderChangesSubscription = paginatedData.subscribe(data => this._renderData.next(data));\n  }\n\n  /**\n   * Returns a filtered data array where each filter object contains the filter string within\n   * the result of the filterTermAccessor function. If no filter is set, returns the data array\n   * as provided.\n   */\n  _filterData(data: T[]) {\n    // If there is a filter string, filter out data that does not contain it.\n    // Each data object is converted to a string using the function defined by filterTermAccessor.\n    // May be overridden for customization.\n    this.filteredData =\n        !this.filter ? data : data.filter(obj => this.filterPredicate(obj, this.filter));\n\n    if (this.paginator) { this._updatePaginator(this.filteredData.length); }\n\n    return this.filteredData;\n  }\n\n  /**\n   * Returns a sorted copy of the data if MatSort has a sort applied, otherwise just returns the\n   * data array as provided. Uses the default data accessor for data lookup, unless a\n   * sortDataAccessor function is defined.\n   */\n  _orderData(data: T[]): T[] {\n    // If there is no active sort or direction, return the data without trying to sort.\n    if (!this.sort) { return data; }\n\n    return this.sortData(data.slice(), this.sort);\n  }\n\n  /**\n   * Returns a paged splice of the provided data array according to the provided MatPaginator's page\n   * index and length. If there is no paginator provided, returns the data array as provided.\n   */\n  _pageData(data: T[]): T[] {\n    if (!this.paginator) { return data; }\n\n    const startIndex = this.paginator.pageIndex * this.paginator.pageSize;\n    return data.slice().splice(startIndex, this.paginator.pageSize);\n  }\n\n  /**\n   * Updates the paginator to reflect the length of the filtered data, and makes sure that the page\n   * index does not exceed the paginator's last page. Values are changed in a resolved promise to\n   * guard against making property changes within a round of change detection.\n   */\n  _updatePaginator(filteredDataLength: number) {\n    Promise.resolve().then(() => {\n      if (!this.paginator) { return; }\n\n      this.paginator.length = filteredDataLength;\n\n      // If the page index is set beyond the page, reduce it to the last page.\n      if (this.paginator.pageIndex > 0) {\n        const lastPageIndex = Math.ceil(this.paginator.length / this.paginator.pageSize) - 1 || 0;\n        this.paginator.pageIndex = Math.min(this.paginator.pageIndex, lastPageIndex);\n      }\n    });\n  }\n\n  /**\n   * Used by the MatTable. Called when it connects to the data source.\n   * @docs-private\n   */\n  connect() { return this._renderData; }\n\n  /**\n   * Used by the MatTable. Called when it is destroyed. No-op.\n   * @docs-private\n   */\n  disconnect() { }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor, FocusOrigin} from '@angular/cdk/a11y';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty, coerceNumberProperty} from '@angular/cdk/coercion';\nimport {\n  DOWN_ARROW,\n  END,\n  HOME,\n  LEFT_ARROW,\n  PAGE_DOWN,\n  PAGE_UP,\n  RIGHT_ARROW,\n  UP_ARROW,\n} from '@angular/cdk/keycodes';\nimport {\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Input,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Output,\n  ViewChild,\n  ViewEncapsulation,\n  Inject,\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {\n  CanColor,\n  CanDisable,\n  HammerInput,\n  HasTabIndex,\n  mixinColor,\n  mixinDisabled,\n  mixinTabIndex,\n} from '@angular/material/core';\nimport {Subscription} from 'rxjs';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\n\n/**\n * Visually, a 30px separation between tick marks looks best. This is very subjective but it is\n * the default separation we chose.\n */\nconst MIN_AUTO_TICK_SEPARATION = 30;\n\n/** The thumb gap size for a disabled slider. */\nconst DISABLED_THUMB_GAP = 7;\n\n/** The thumb gap size for a non-active slider at its minimum value. */\nconst MIN_VALUE_NONACTIVE_THUMB_GAP = 7;\n\n/** The thumb gap size for an active slider at its minimum value. */\nconst MIN_VALUE_ACTIVE_THUMB_GAP = 10;\n\n/**\n * Provider Expression that allows mat-slider to register as a ControlValueAccessor.\n * This allows it to support [(ngModel)] and [formControl].\n */\nexport const MAT_SLIDER_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatSlider),\n  multi: true\n};\n\n/** A simple change event emitted by the MatSlider component. */\nexport class MatSliderChange {\n  /** The MatSlider that changed. */\n  source: MatSlider;\n\n  /** The new value of the source slider. */\n  value: number | null;\n}\n\n\n// Boilerplate for applying mixins to MatSlider.\n/** @docs-private */\nexport class MatSliderBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatSliderMixinBase =\n  mixinTabIndex(mixinColor(mixinDisabled(MatSliderBase), 'accent'));\n\n/**\n * Allows users to select from a range of values by moving the slider thumb. It is similar in\n * behavior to the native `<input type=\"range\">` element.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-slider',\n  exportAs: 'matSlider',\n  providers: [MAT_SLIDER_VALUE_ACCESSOR],\n  host: {\n    '(focus)': '_onFocus()',\n    '(blur)': '_onBlur()',\n    '(click)': '_onClick($event)',\n    '(keydown)': '_onKeydown($event)',\n    '(keyup)': '_onKeyup()',\n    '(mouseenter)': '_onMouseenter()',\n    '(slide)': '_onSlide($event)',\n    '(slideend)': '_onSlideEnd()',\n    '(slidestart)': '_onSlideStart($event)',\n    'class': 'mat-slider',\n    'role': 'slider',\n    '[tabIndex]': 'tabIndex',\n    '[attr.aria-disabled]': 'disabled',\n    '[attr.aria-valuemax]': 'max',\n    '[attr.aria-valuemin]': 'min',\n    '[attr.aria-valuenow]': 'value',\n    '[attr.aria-orientation]': 'vertical ? \"vertical\" : \"horizontal\"',\n    '[class.mat-slider-disabled]': 'disabled',\n    '[class.mat-slider-has-ticks]': 'tickInterval',\n    '[class.mat-slider-horizontal]': '!vertical',\n    '[class.mat-slider-axis-inverted]': '_invertAxis',\n    '[class.mat-slider-sliding]': '_isSliding',\n    '[class.mat-slider-thumb-label-showing]': 'thumbLabel',\n    '[class.mat-slider-vertical]': 'vertical',\n    '[class.mat-slider-min-value]': '_isMinValue',\n    '[class.mat-slider-hide-last-tick]': 'disabled || _isMinValue && _thumbGap && _invertAxis',\n    '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"',\n  },\n  templateUrl: 'slider.html',\n  styleUrls: ['slider.css'],\n  inputs: ['disabled', 'color', 'tabIndex'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatSlider extends _MatSliderMixinBase\n    implements ControlValueAccessor, OnDestroy, CanDisable, CanColor, OnInit, HasTabIndex {\n  /** Whether the slider is inverted. */\n  @Input()\n  get invert(): boolean { return this._invert; }\n  set invert(value: boolean) {\n    this._invert = coerceBooleanProperty(value);\n  }\n  private _invert = false;\n\n  /** The maximum value that the slider can have. */\n  @Input()\n  get max(): number { return this._max; }\n  set max(v: number) {\n    this._max = coerceNumberProperty(v, this._max);\n    this._percent = this._calculatePercentage(this._value);\n\n    // Since this also modifies the percentage, we need to let the change detection know.\n    this._changeDetectorRef.markForCheck();\n  }\n  private _max: number = 100;\n\n  /** The minimum value that the slider can have. */\n  @Input()\n  get min(): number { return this._min; }\n  set min(v: number) {\n    this._min = coerceNumberProperty(v, this._min);\n\n    // If the value wasn't explicitly set by the user, set it to the min.\n    if (this._value === null) {\n      this.value = this._min;\n    }\n    this._percent = this._calculatePercentage(this._value);\n\n    // Since this also modifies the percentage, we need to let the change detection know.\n    this._changeDetectorRef.markForCheck();\n  }\n  private _min: number = 0;\n\n  /** The values at which the thumb will snap. */\n  @Input()\n  get step(): number { return this._step; }\n  set step(v: number) {\n    this._step = coerceNumberProperty(v, this._step);\n\n    if (this._step % 1 !== 0) {\n      this._roundToDecimal = this._step.toString().split('.').pop()!.length;\n    }\n\n    // Since this could modify the label, we need to notify the change detection.\n    this._changeDetectorRef.markForCheck();\n  }\n  private _step: number = 1;\n\n  /** Whether or not to show the thumb label. */\n  @Input()\n  get thumbLabel(): boolean { return this._thumbLabel; }\n  set thumbLabel(value: boolean) { this._thumbLabel = coerceBooleanProperty(value); }\n  private _thumbLabel: boolean = false;\n\n  /**\n   * How often to show ticks. Relative to the step so that a tick always appears on a step.\n   * Ex: Tick interval of 4 with a step of 3 will draw a tick every 4 steps (every 12 values).\n   */\n  @Input()\n  get tickInterval() { return this._tickInterval; }\n  set tickInterval(value: 'auto' | number) {\n    if (value === 'auto') {\n      this._tickInterval = 'auto';\n    } else if (typeof value === 'number' || typeof value === 'string') {\n      this._tickInterval = coerceNumberProperty(value, this._tickInterval as number);\n    } else {\n      this._tickInterval = 0;\n    }\n  }\n  private _tickInterval: 'auto' | number = 0;\n\n  /** Value of the slider. */\n  @Input()\n  get value(): number | null {\n    // If the value needs to be read and it is still uninitialized, initialize it to the min.\n    if (this._value === null) {\n      this.value = this._min;\n    }\n    return this._value;\n  }\n  set value(v: number | null) {\n    if (v !== this._value) {\n      let value = coerceNumberProperty(v);\n\n      // While incrementing by a decimal we can end up with values like 33.300000000000004.\n      // Truncate it to ensure that it matches the label and to make it easier to work with.\n      if (this._roundToDecimal) {\n        value = parseFloat(value.toFixed(this._roundToDecimal));\n      }\n\n      this._value = value;\n      this._percent = this._calculatePercentage(this._value);\n\n      // Since this also modifies the percentage, we need to let the change detection know.\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n  private _value: number | null = null;\n\n  /**\n   * Function that will be used to format the value before it is displayed\n   * in the thumb label. Can be used to format very large number in order\n   * for them to fit into the slider thumb.\n   */\n  @Input() displayWith: (value: number | null) => string | number;\n\n  /** Whether the slider is vertical. */\n  @Input()\n  get vertical(): boolean { return this._vertical; }\n  set vertical(value: boolean) {\n    this._vertical = coerceBooleanProperty(value);\n  }\n  private _vertical = false;\n\n  /** Event emitted when the slider value has changed. */\n  @Output() readonly change: EventEmitter<MatSliderChange> = new EventEmitter<MatSliderChange>();\n\n  /** Event emitted when the slider thumb moves. */\n  @Output() readonly input: EventEmitter<MatSliderChange> = new EventEmitter<MatSliderChange>();\n\n  /**\n   * Emits when the raw value of the slider changes. This is here primarily\n   * to facilitate the two-way binding for the `value` input.\n   * @docs-private\n   */\n  @Output() readonly valueChange: EventEmitter<number | null> = new EventEmitter<number | null>();\n\n  /** The value to be used for display purposes. */\n  get displayValue(): string | number {\n    if (this.displayWith) {\n      return this.displayWith(this.value);\n    }\n\n    // Note that this could be improved further by rounding something like 0.999 to 1 or\n    // 0.899 to 0.9, however it is very performance sensitive, because it gets called on\n    // every change detection cycle.\n    if (this._roundToDecimal && this.value && this.value % 1 !== 0) {\n      return this.value.toFixed(this._roundToDecimal);\n    }\n\n    return this.value || 0;\n  }\n\n  /** set focus to the host element */\n  focus() {\n    this._focusHostElement();\n  }\n\n  /** blur the host element */\n  blur() {\n    this._blurHostElement();\n  }\n\n  /** onTouch function registered via registerOnTouch (ControlValueAccessor). */\n  onTouched: () => any = () => {};\n\n  /** The percentage of the slider that coincides with the value. */\n  get percent(): number { return this._clamp(this._percent); }\n  private _percent: number = 0;\n\n  /**\n   * Whether or not the thumb is sliding.\n   * Used to determine if there should be a transition for the thumb and fill track.\n   */\n  _isSliding: boolean = false;\n\n  /**\n   * Whether or not the slider is active (clicked or sliding).\n   * Used to shrink and grow the thumb as according to the Material Design spec.\n   */\n  _isActive: boolean = false;\n\n  /**\n   * Whether the axis of the slider is inverted.\n   * (i.e. whether moving the thumb in the positive x or y direction decreases the slider's value).\n   */\n  get _invertAxis() {\n    // Standard non-inverted mode for a vertical slider should be dragging the thumb from bottom to\n    // top. However from a y-axis standpoint this is inverted.\n    return this.vertical ? !this.invert : this.invert;\n  }\n\n\n  /** Whether the slider is at its minimum value. */\n  get _isMinValue() {\n    return this.percent === 0;\n  }\n\n  /**\n   * The amount of space to leave between the slider thumb and the track fill & track background\n   * elements.\n   */\n  get _thumbGap() {\n    if (this.disabled) {\n      return DISABLED_THUMB_GAP;\n    }\n    if (this._isMinValue && !this.thumbLabel) {\n      return this._isActive ? MIN_VALUE_ACTIVE_THUMB_GAP : MIN_VALUE_NONACTIVE_THUMB_GAP;\n    }\n    return 0;\n  }\n\n  /** CSS styles for the track background element. */\n  get _trackBackgroundStyles(): { [key: string]: string } {\n    const axis = this.vertical ? 'Y' : 'X';\n    const scale = this.vertical ? `1, ${1 - this.percent}, 1` : `${1 - this.percent}, 1, 1`;\n    const sign = this._invertMouseCoords ? '-' : '';\n\n    return {\n      // scale3d avoids some rendering issues in Chrome. See #12071.\n      transform: `translate${axis}(${sign}${this._thumbGap}px) scale3d(${scale})`\n    };\n  }\n\n  /** CSS styles for the track fill element. */\n  get _trackFillStyles(): { [key: string]: string } {\n    const axis = this.vertical ? 'Y' : 'X';\n    const scale = this.vertical ? `1, ${this.percent}, 1` : `${this.percent}, 1, 1`;\n    const sign = this._invertMouseCoords ? '' : '-';\n\n    return {\n      // scale3d avoids some rendering issues in Chrome. See #12071.\n      transform: `translate${axis}(${sign}${this._thumbGap}px) scale3d(${scale})`\n    };\n  }\n\n  /** CSS styles for the ticks container element. */\n  get _ticksContainerStyles(): { [key: string]: string } {\n    let axis = this.vertical ? 'Y' : 'X';\n    // For a horizontal slider in RTL languages we push the ticks container off the left edge\n    // instead of the right edge to avoid causing a horizontal scrollbar to appear.\n    let sign = !this.vertical && this._direction == 'rtl' ? '' : '-';\n    let offset = this._tickIntervalPercent / 2 * 100;\n    return {\n      'transform': `translate${axis}(${sign}${offset}%)`\n    };\n  }\n\n  /** CSS styles for the ticks element. */\n  get _ticksStyles(): { [key: string]: string } {\n    let tickSize = this._tickIntervalPercent * 100;\n    let backgroundSize = this.vertical ? `2px ${tickSize}%` : `${tickSize}% 2px`;\n    let axis = this.vertical ? 'Y' : 'X';\n    // Depending on the direction we pushed the ticks container, push the ticks the opposite\n    // direction to re-center them but clip off the end edge. In RTL languages we need to flip the\n    // ticks 180 degrees so we're really cutting off the end edge abd not the start.\n    let sign = !this.vertical && this._direction == 'rtl' ? '-' : '';\n    let rotate = !this.vertical && this._direction == 'rtl' ? ' rotate(180deg)' : '';\n    let styles: { [key: string]: string } = {\n      'backgroundSize': backgroundSize,\n      // Without translateZ ticks sometimes jitter as the slider moves on Chrome & Firefox.\n      'transform': `translateZ(0) translate${axis}(${sign}${tickSize / 2}%)${rotate}`\n    };\n\n    if (this._isMinValue && this._thumbGap) {\n      let side = this.vertical ?\n          (this._invertAxis ? 'Bottom' : 'Top') :\n          (this._invertAxis ? 'Right' : 'Left');\n      styles[`padding${side}`] = `${this._thumbGap}px`;\n    }\n\n    return styles;\n  }\n\n  get _thumbContainerStyles(): { [key: string]: string } {\n    let axis = this.vertical ? 'Y' : 'X';\n    // For a horizontal slider in RTL languages we push the thumb container off the left edge\n    // instead of the right edge to avoid causing a horizontal scrollbar to appear.\n    let invertOffset =\n        (this._direction == 'rtl' && !this.vertical) ? !this._invertAxis : this._invertAxis;\n    let offset = (invertOffset ? this.percent : 1 - this.percent) * 100;\n    return {\n      'transform': `translate${axis}(-${offset}%)`\n    };\n  }\n\n  /** The size of a tick interval as a percentage of the size of the track. */\n  private _tickIntervalPercent: number = 0;\n\n  /** The dimensions of the slider. */\n  private _sliderDimensions: ClientRect | null = null;\n\n  private _controlValueAccessorChangeFn: (value: any) => void = () => {};\n\n  /** Decimal places to round to, based on the step amount. */\n  private _roundToDecimal: number;\n\n  /** Subscription to the Directionality change EventEmitter. */\n  private _dirChangeSubscription = Subscription.EMPTY;\n\n  /** The value of the slider when the slide start event fires. */\n  private _valueOnSlideStart: number | null;\n\n  /** Reference to the inner slider wrapper element. */\n  @ViewChild('sliderWrapper') private _sliderWrapper: ElementRef;\n\n  /**\n   * Whether mouse events should be converted to a slider position by calculating their distance\n   * from the right or bottom edge of the slider as opposed to the top or left.\n   */\n  private get _invertMouseCoords() {\n    return (this._direction == 'rtl' && !this.vertical) ? !this._invertAxis : this._invertAxis;\n  }\n\n  /** The language direction for this slider element. */\n  private get _direction() {\n    return (this._dir && this._dir.value == 'rtl') ? 'rtl' : 'ltr';\n  }\n\n  constructor(elementRef: ElementRef,\n              private _focusMonitor: FocusMonitor,\n              private _changeDetectorRef: ChangeDetectorRef,\n              @Optional() private _dir: Directionality,\n              @Attribute('tabindex') tabIndex: string,\n              // @deletion-target 7.0.0 `_animationMode` parameter to be made required.\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode?: string) {\n    super(elementRef);\n\n    this.tabIndex = parseInt(tabIndex) || 0;\n  }\n\n  ngOnInit() {\n    this._focusMonitor\n        .monitor(this._elementRef.nativeElement, true)\n        .subscribe((origin: FocusOrigin) => {\n          this._isActive = !!origin && origin !== 'keyboard';\n          this._changeDetectorRef.detectChanges();\n        });\n    if (this._dir) {\n      this._dirChangeSubscription = this._dir.change.subscribe(() => {\n        this._changeDetectorRef.markForCheck();\n      });\n    }\n  }\n\n  ngOnDestroy() {\n    this._focusMonitor.stopMonitoring(this._elementRef.nativeElement);\n    this._dirChangeSubscription.unsubscribe();\n  }\n\n  _onMouseenter() {\n    if (this.disabled) {\n      return;\n    }\n\n    // We save the dimensions of the slider here so we can use them to update the spacing of the\n    // ticks and determine where on the slider click and slide events happen.\n    this._sliderDimensions = this._getSliderDimensions();\n    this._updateTickIntervalPercent();\n  }\n\n  _onClick(event: MouseEvent) {\n    if (this.disabled) {\n      return;\n    }\n\n    let oldValue = this.value;\n    this._isSliding = false;\n    this._focusHostElement();\n    this._updateValueFromPosition({x: event.clientX, y: event.clientY});\n\n    // Emit a change and input event if the value changed.\n    if (oldValue != this.value) {\n      this._emitInputEvent();\n      this._emitChangeEvent();\n    }\n  }\n\n  _onSlide(event: HammerInput) {\n    if (this.disabled) {\n      return;\n    }\n\n    // The slide start event sometimes fails to fire on iOS, so if we're not already in the sliding\n    // state, call the slide start handler manually.\n    if (!this._isSliding) {\n      this._onSlideStart(null);\n    }\n\n    // Prevent the slide from selecting anything else.\n    event.preventDefault();\n\n    let oldValue = this.value;\n    this._updateValueFromPosition({x: event.center.x, y: event.center.y});\n\n    // Native range elements always emit `input` events when the value changed while sliding.\n    if (oldValue != this.value) {\n      this._emitInputEvent();\n    }\n  }\n\n  _onSlideStart(event: HammerInput | null) {\n    if (this.disabled || this._isSliding) {\n      return;\n    }\n\n    // Simulate mouseenter in case this is a mobile device.\n    this._onMouseenter();\n\n    this._isSliding = true;\n    this._focusHostElement();\n    this._valueOnSlideStart = this.value;\n\n    if (event) {\n      this._updateValueFromPosition({x: event.center.x, y: event.center.y});\n      event.preventDefault();\n    }\n  }\n\n  _onSlideEnd() {\n    this._isSliding = false;\n\n    if (this._valueOnSlideStart != this.value && !this.disabled) {\n      this._emitChangeEvent();\n    }\n    this._valueOnSlideStart = null;\n  }\n\n  _onFocus() {\n    // We save the dimensions of the slider here so we can use them to update the spacing of the\n    // ticks and determine where on the slider click and slide events happen.\n    this._sliderDimensions = this._getSliderDimensions();\n    this._updateTickIntervalPercent();\n  }\n\n  _onBlur() {\n    this.onTouched();\n  }\n\n  _onKeydown(event: KeyboardEvent) {\n    if (this.disabled) { return; }\n\n    let oldValue = this.value;\n\n    switch (event.keyCode) {\n      case PAGE_UP:\n        this._increment(10);\n        break;\n      case PAGE_DOWN:\n        this._increment(-10);\n        break;\n      case END:\n        this.value = this.max;\n        break;\n      case HOME:\n        this.value = this.min;\n        break;\n      case LEFT_ARROW:\n        // NOTE: For a sighted user it would make more sense that when they press an arrow key on an\n        // inverted slider the thumb moves in that direction. However for a blind user, nothing\n        // about the slider indicates that it is inverted. They will expect left to be decrement,\n        // regardless of how it appears on the screen. For speakers ofRTL languages, they probably\n        // expect left to mean increment. Therefore we flip the meaning of the side arrow keys for\n        // RTL. For inverted sliders we prefer a good a11y experience to having it \"look right\" for\n        // sighted users, therefore we do not swap the meaning.\n        this._increment(this._direction == 'rtl' ? 1 : -1);\n        break;\n      case UP_ARROW:\n        this._increment(1);\n        break;\n      case RIGHT_ARROW:\n        // See comment on LEFT_ARROW about the conditions under which we flip the meaning.\n        this._increment(this._direction == 'rtl' ? -1 : 1);\n        break;\n      case DOWN_ARROW:\n        this._increment(-1);\n        break;\n      default:\n        // Return if the key is not one that we explicitly handle to avoid calling preventDefault on\n        // it.\n        return;\n    }\n\n    if (oldValue != this.value) {\n      this._emitInputEvent();\n      this._emitChangeEvent();\n    }\n\n    this._isSliding = true;\n    event.preventDefault();\n  }\n\n  _onKeyup() {\n    this._isSliding = false;\n  }\n\n  /** Increments the slider by the given number of steps (negative number decrements). */\n  private _increment(numSteps: number) {\n    this.value = this._clamp((this.value || 0) + this.step * numSteps, this.min, this.max);\n  }\n\n  /** Calculate the new value from the new physical location. The value will always be snapped. */\n  private _updateValueFromPosition(pos: {x: number, y: number}) {\n    if (!this._sliderDimensions) {\n      return;\n    }\n\n    let offset = this.vertical ? this._sliderDimensions.top : this._sliderDimensions.left;\n    let size = this.vertical ? this._sliderDimensions.height : this._sliderDimensions.width;\n    let posComponent = this.vertical ? pos.y : pos.x;\n\n    // The exact value is calculated from the event and used to find the closest snap value.\n    let percent = this._clamp((posComponent - offset) / size);\n\n    if (this._invertMouseCoords) {\n      percent = 1 - percent;\n    }\n\n    // Since the steps may not divide cleanly into the max value, if the user\n    // slid to 0 or 100 percent, we jump to the min/max value. This approach\n    // is slightly more intuitive than using `Math.ceil` below, because it\n    // follows the user's pointer closer.\n    if (percent === 0) {\n      this.value = this.min;\n    } else if (percent === 1) {\n      this.value = this.max;\n    } else {\n      const exactValue = this._calculateValue(percent);\n\n      // This calculation finds the closest step by finding the closest\n      // whole number divisible by the step relative to the min.\n      const closestValue = Math.round((exactValue - this.min) / this.step) * this.step + this.min;\n\n      // The value needs to snap to the min and max.\n      this.value = this._clamp(closestValue, this.min, this.max);\n    }\n  }\n\n  /** Emits a change event if the current value is different from the last emitted value. */\n  private _emitChangeEvent() {\n    this._controlValueAccessorChangeFn(this.value);\n    this.valueChange.emit(this.value);\n    this.change.emit(this._createChangeEvent());\n  }\n\n  /** Emits an input event when the current value is different from the last emitted value. */\n  private _emitInputEvent() {\n    this.input.emit(this._createChangeEvent());\n  }\n\n  /** Updates the amount of space between ticks as a percentage of the width of the slider. */\n  private _updateTickIntervalPercent() {\n    if (!this.tickInterval || !this._sliderDimensions) {\n      return;\n    }\n\n    if (this.tickInterval == 'auto') {\n      let trackSize = this.vertical ? this._sliderDimensions.height : this._sliderDimensions.width;\n      let pixelsPerStep = trackSize * this.step / (this.max - this.min);\n      let stepsPerTick = Math.ceil(MIN_AUTO_TICK_SEPARATION / pixelsPerStep);\n      let pixelsPerTick = stepsPerTick * this.step;\n      this._tickIntervalPercent = pixelsPerTick / trackSize;\n    } else {\n      this._tickIntervalPercent = this.tickInterval * this.step / (this.max - this.min);\n    }\n  }\n\n  /** Creates a slider change object from the specified value. */\n  private _createChangeEvent(value = this.value): MatSliderChange {\n    let event = new MatSliderChange();\n\n    event.source = this;\n    event.value = value;\n\n    return event;\n  }\n\n  /** Calculates the percentage of the slider that a value is. */\n  private _calculatePercentage(value: number | null) {\n    return ((value || 0) - this.min) / (this.max - this.min);\n  }\n\n  /** Calculates the value a percentage of the slider corresponds to. */\n  private _calculateValue(percentage: number) {\n    return this.min + percentage * (this.max - this.min);\n  }\n\n  /** Return a number between two numbers. */\n  private _clamp(value: number, min = 0, max = 1) {\n    return Math.max(min, Math.min(value, max));\n  }\n\n  /**\n   * Get the bounding client rect of the slider track element.\n   * The track is used rather than the native element to ignore the extra space that the thumb can\n   * take up.\n   */\n  private _getSliderDimensions() {\n    return this._sliderWrapper ? this._sliderWrapper.nativeElement.getBoundingClientRect() : null;\n  }\n\n  /**\n   * Focuses the native element.\n   * Currently only used to allow a blur event to fire but will be used with keyboard input later.\n   */\n  private _focusHostElement() {\n    this._elementRef.nativeElement.focus();\n  }\n\n  /** Blurs the native element. */\n  private _blurHostElement() {\n    this._elementRef.nativeElement.blur();\n  }\n\n  /**\n   * Sets the model value. Implemented as part of ControlValueAccessor.\n   * @param value\n   */\n  writeValue(value: any) {\n    this.value = value;\n  }\n\n  /**\n   * Registers a callback to be triggered when the value has changed.\n   * Implemented as part of ControlValueAccessor.\n   * @param fn Callback to be registered.\n   */\n  registerOnChange(fn: (value: any) => void) {\n    this._controlValueAccessorChangeFn = fn;\n  }\n\n  /**\n   * Registers a callback to be triggered when the component is touched.\n   * Implemented as part of ControlValueAccessor.\n   * @param fn Callback to be registered.\n   */\n  registerOnTouched(fn: any) {\n    this.onTouched = fn;\n  }\n\n  /**\n   * Sets whether the component should be disabled.\n   * Implemented as part of ControlValueAccessor.\n   * @param isDisabled\n   */\n  setDisabledState(isDisabled: boolean) {\n    this.disabled = isDisabled;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {GestureConfig, MatCommonModule} from '@angular/material/core';\nimport {HAMMER_GESTURE_CONFIG} from '@angular/platform-browser';\nimport {MatSlider} from './slider';\n\n\n@NgModule({\n  imports: [CommonModule, MatCommonModule],\n  exports: [MatSlider, MatCommonModule],\n  declarations: [MatSlider],\n  providers: [{provide: HAMMER_GESTURE_CONFIG, useClass: GestureConfig}]\n})\nexport class MatSliderModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {OverlayRef} from '@angular/cdk/overlay';\nimport {Observable, Subject} from 'rxjs';\nimport {MatSnackBarContainer} from './snack-bar-container';\n\n\n/** Event that is emitted when a snack bar is dismissed. */\nexport interface MatSnackBarDismiss {\n  /** Whether the snack bar was dismissed using the action button. */\n  dismissedByAction: boolean;\n}\n\n/**\n * Reference to a snack bar dispatched from the snack bar service.\n */\nexport class MatSnackBarRef<T> {\n  /** The instance of the component making up the content of the snack bar. */\n  instance: T;\n\n  /**\n   * The instance of the component making up the content of the snack bar.\n   * @docs-private\n   */\n  containerInstance: MatSnackBarContainer;\n\n  /** Subject for notifying the user that the snack bar has been dismissed. */\n  private readonly _afterDismissed = new Subject<MatSnackBarDismiss>();\n\n  /** Subject for notifying the user that the snack bar has opened and appeared. */\n  private readonly _afterOpened = new Subject<void>();\n\n  /** Subject for notifying the user that the snack bar action was called. */\n  private readonly _onAction = new Subject<void>();\n\n  /**\n   * Timeout ID for the duration setTimeout call. Used to clear the timeout if the snackbar is\n   * dismissed before the duration passes.\n   */\n  private _durationTimeoutId: number;\n\n  /** Whether the snack bar was dismissed using the action button. */\n  private _dismissedByAction = false;\n\n  constructor(containerInstance: MatSnackBarContainer,\n              private _overlayRef: OverlayRef) {\n    this.containerInstance = containerInstance;\n    // Dismiss snackbar on action.\n    this.onAction().subscribe(() => this.dismiss());\n    containerInstance._onExit.subscribe(() => this._finishDismiss());\n  }\n\n  /** Dismisses the snack bar. */\n  dismiss(): void {\n    if (!this._afterDismissed.closed) {\n      this.containerInstance.exit();\n    }\n    clearTimeout(this._durationTimeoutId);\n  }\n\n  /** Marks the snackbar action clicked. */\n  dismissWithAction(): void {\n    if (!this._onAction.closed) {\n      this._dismissedByAction = true;\n      this._onAction.next();\n      this._onAction.complete();\n    }\n  }\n\n\n  /**\n   * Marks the snackbar action clicked.\n   * @deprecated Use `dismissWithAction` instead.\n   * @deletion-target 7.0.0\n   */\n  closeWithAction(): void {\n    this.dismissWithAction();\n  }\n\n  /** Dismisses the snack bar after some duration */\n  _dismissAfter(duration: number): void {\n    this._durationTimeoutId = setTimeout(() => this.dismiss(), duration);\n  }\n\n  /** Marks the snackbar as opened */\n  _open(): void {\n    if (!this._afterOpened.closed) {\n      this._afterOpened.next();\n      this._afterOpened.complete();\n    }\n  }\n\n  /** Cleans up the DOM after closing. */\n  private _finishDismiss(): void {\n    this._overlayRef.dispose();\n\n    if (!this._onAction.closed) {\n      this._onAction.complete();\n    }\n\n    this._afterDismissed.next({dismissedByAction: this._dismissedByAction});\n    this._afterDismissed.complete();\n    this._dismissedByAction = false;\n  }\n\n  /** Gets an observable that is notified when the snack bar is finished closing. */\n  afterDismissed(): Observable<MatSnackBarDismiss> {\n    return this._afterDismissed.asObservable();\n  }\n\n  /** Gets an observable that is notified when the snack bar has opened and appeared. */\n  afterOpened(): Observable<void> {\n    return this.containerInstance._onEnter;\n  }\n\n  /** Gets an observable that is notified when the snack bar action is called. */\n  onAction(): Observable<void> {\n    return this._onAction.asObservable();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ViewContainerRef, InjectionToken} from '@angular/core';\nimport {AriaLivePoliteness} from '@angular/cdk/a11y';\nimport {Direction} from '@angular/cdk/bidi';\n\n/** Injection token that can be used to access the data that was passed in to a snack bar. */\nexport const MAT_SNACK_BAR_DATA = new InjectionToken<any>('MatSnackBarData');\n\n/** Possible values for horizontalPosition on MatSnackBarConfig. */\nexport type MatSnackBarHorizontalPosition = 'start' | 'center' | 'end' | 'left' | 'right';\n\n/** Possible values for verticalPosition on MatSnackBarConfig. */\nexport type MatSnackBarVerticalPosition = 'top' | 'bottom';\n\n/**\n * Configuration used when opening a snack-bar.\n */\nexport class MatSnackBarConfig<D = any> {\n  /** The politeness level for the MatAriaLiveAnnouncer announcement. */\n  politeness?: AriaLivePoliteness = 'assertive';\n\n  /** Message to be announced by the MatAriaLiveAnnouncer */\n  announcementMessage?: string = '';\n\n  /** The view container to place the overlay for the snack bar into. */\n  viewContainerRef?: ViewContainerRef;\n\n  /** The length of time in milliseconds to wait before automatically dismissing the snack bar. */\n  duration?: number = 0;\n\n  /** Extra CSS classes to be added to the snack bar container. */\n  panelClass?: string | string[];\n\n  /** Text layout direction for the snack bar. */\n  direction?: Direction;\n\n  /** Data being injected into the child component. */\n  data?: D | null = null;\n\n  /** The horizontal position to place the snack bar. */\n  horizontalPosition?: MatSnackBarHorizontalPosition = 'center';\n\n  /** The vertical position to place the snack bar. */\n  verticalPosition?: MatSnackBarVerticalPosition = 'bottom';\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\nimport {AnimationCurves, AnimationDurations} from '@angular/material/core';\n\n/** Animations used by the Material snack bar. */\nexport const matSnackBarAnimations: {\n  readonly contentFade: AnimationTriggerMetadata;\n  readonly snackBarState: AnimationTriggerMetadata;\n} = {\n  /** Animation that slides the dialog in and out of view and fades the opacity. */\n  contentFade: trigger('contentFade', [\n    transition(':enter', [\n      style({opacity: '0'}),\n      animate(`${AnimationDurations.COMPLEX} ${AnimationCurves.STANDARD_CURVE}`)\n    ])\n  ]),\n\n  /** Animation that shows and hides a snack bar. */\n  snackBarState: trigger('state', [\n    state('visible-top, visible-bottom', style({transform: 'translateY(0%)'})),\n    transition('visible-top => hidden-top, visible-bottom => hidden-bottom',\n      animate(`${AnimationDurations.EXITING} ${AnimationCurves.ACCELERATION_CURVE}`)),\n    transition('void => visible-top, void => visible-bottom',\n      animate(`${AnimationDurations.ENTERING} ${AnimationCurves.DECELERATION_CURVE}`)),\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Component, ViewEncapsulation, Inject, ChangeDetectionStrategy} from '@angular/core';\nimport {MatSnackBarRef} from './snack-bar-ref';\nimport {MAT_SNACK_BAR_DATA} from './snack-bar-config';\nimport {matSnackBarAnimations} from './snack-bar-animations';\n\n\n/**\n * A component used to open as the default snack bar, matching material spec.\n * This should only be used internally by the snack bar service.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'simple-snack-bar',\n  templateUrl: 'simple-snack-bar.html',\n  styleUrls: ['simple-snack-bar.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  animations: [matSnackBarAnimations.contentFade],\n  host: {\n    '[@contentFade]': '',\n    'class': 'mat-simple-snackbar',\n  }\n})\nexport class SimpleSnackBar {\n  /** Data that was injected into the snack bar. */\n  data: { message: string, action: string };\n\n  constructor(\n    public snackBarRef: MatSnackBarRef<SimpleSnackBar>,\n    @Inject(MAT_SNACK_BAR_DATA) data: any) {\n    this.data = data;\n  }\n\n  /** Performs the action on the snack bar. */\n  action(): void {\n    this.snackBarRef.dismissWithAction();\n  }\n\n  /** If the action button should be shown. */\n  get hasAction(): boolean {\n    return !!this.data.action;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {AnimationEvent} from '@angular/animations';\nimport {\n  BasePortalOutlet,\n  CdkPortalOutlet,\n  ComponentPortal,\n  TemplatePortal,\n} from '@angular/cdk/portal';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ComponentRef,\n  ElementRef,\n  EmbeddedViewRef,\n  NgZone,\n  OnDestroy,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {Observable, Subject} from 'rxjs';\nimport {take} from 'rxjs/operators';\nimport {matSnackBarAnimations} from './snack-bar-animations';\nimport {MatSnackBarConfig} from './snack-bar-config';\n\n\n/**\n * Internal component that wraps user-provided snack bar content.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'snack-bar-container',\n  templateUrl: 'snack-bar-container.html',\n  styleUrls: ['snack-bar-container.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  animations: [matSnackBarAnimations.snackBarState],\n  host: {\n    'role': 'alert',\n    'class': 'mat-snack-bar-container',\n    '[@state]': '_animationState',\n    '(@state.done)': 'onAnimationEnd($event)'\n  },\n})\nexport class MatSnackBarContainer extends BasePortalOutlet implements OnDestroy {\n  /** Whether the component has been destroyed. */\n  private _destroyed = false;\n\n  /** The portal outlet inside of this container into which the snack bar content will be loaded. */\n  @ViewChild(CdkPortalOutlet) _portalOutlet: CdkPortalOutlet;\n\n  /** Subject for notifying that the snack bar has exited from view. */\n  readonly _onExit: Subject<any> = new Subject();\n\n  /** Subject for notifying that the snack bar has finished entering the view. */\n  readonly _onEnter: Subject<any> = new Subject();\n\n  /** The state of the snack bar animations. */\n  _animationState = 'void';\n\n  constructor(\n    private _ngZone: NgZone,\n    private _elementRef: ElementRef,\n    private _changeDetectorRef: ChangeDetectorRef,\n    /** The snack bar configuration. */\n    public snackBarConfig: MatSnackBarConfig) {\n\n    super();\n  }\n\n  /** Attach a component portal as content to this snack bar container. */\n  attachComponentPortal<T>(portal: ComponentPortal<T>): ComponentRef<T> {\n    this._assertNotAttached();\n    this._applySnackBarClasses();\n    return this._portalOutlet.attachComponentPortal(portal);\n  }\n\n  /** Attach a template portal as content to this snack bar container. */\n  attachTemplatePortal<C>(portal: TemplatePortal<C>): EmbeddedViewRef<C> {\n    this._assertNotAttached();\n    this._applySnackBarClasses();\n    return this._portalOutlet.attachTemplatePortal(portal);\n  }\n\n  /** Handle end of animations, updating the state of the snackbar. */\n  onAnimationEnd(event: AnimationEvent) {\n    const {fromState, toState} = event;\n\n    if ((toState === 'void' && fromState !== 'void') || toState.startsWith('hidden')) {\n      this._completeExit();\n    }\n\n    if (toState.startsWith('visible')) {\n      // Note: we shouldn't use `this` inside the zone callback,\n      // because it can cause a memory leak.\n      const onEnter = this._onEnter;\n\n      this._ngZone.run(() => {\n        onEnter.next();\n        onEnter.complete();\n      });\n    }\n  }\n\n  /** Begin animation of snack bar entrance into view. */\n  enter(): void {\n    if (!this._destroyed) {\n      this._animationState = `visible-${this.snackBarConfig.verticalPosition}`;\n      this._changeDetectorRef.detectChanges();\n    }\n  }\n\n  /** Begin animation of the snack bar exiting from view. */\n  exit(): Observable<void> {\n    this._animationState = `hidden-${this.snackBarConfig.verticalPosition}`;\n    return this._onExit;\n  }\n\n  /** Makes sure the exit callbacks have been invoked when the element is destroyed. */\n  ngOnDestroy() {\n    this._destroyed = true;\n    this._completeExit();\n  }\n\n  /**\n   * Waits for the zone to settle before removing the element. Helps prevent\n   * errors where we end up removing an element which is in the middle of an animation.\n   */\n  private _completeExit() {\n    this._ngZone.onMicrotaskEmpty.asObservable().pipe(take(1)).subscribe(() => {\n      this._onExit.next();\n      this._onExit.complete();\n    });\n  }\n\n  /** Applies the various positioning and user-configured CSS classes to the snack bar. */\n  private _applySnackBarClasses() {\n    const element: HTMLElement = this._elementRef.nativeElement;\n    const panelClasses = this.snackBarConfig.panelClass;\n\n    if (panelClasses) {\n      if (Array.isArray(panelClasses)) {\n        // Note that we can't use a spread here, because IE doesn't support multiple arguments.\n        panelClasses.forEach(cssClass => element.classList.add(cssClass));\n      } else {\n        element.classList.add(panelClasses);\n      }\n    }\n\n    if (this.snackBarConfig.horizontalPosition === 'center') {\n      element.classList.add('mat-snack-bar-center');\n    }\n\n    if (this.snackBarConfig.verticalPosition === 'top') {\n      element.classList.add('mat-snack-bar-top');\n    }\n  }\n\n  /** Asserts that no content is already attached to the container. */\n  private _assertNotAttached() {\n    if (this._portalOutlet.hasAttached()) {\n      throw Error('Attempting to attach snack bar content after content is already attached');\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatButtonModule} from '@angular/material/button';\nimport {SimpleSnackBar} from './simple-snack-bar';\nimport {MatSnackBarContainer} from './snack-bar-container';\n\n\n@NgModule({\n  imports: [\n    OverlayModule,\n    PortalModule,\n    CommonModule,\n    MatButtonModule,\n    MatCommonModule,\n  ],\n  exports: [MatSnackBarContainer, MatCommonModule],\n  declarations: [MatSnackBarContainer, SimpleSnackBar],\n  entryComponents: [MatSnackBarContainer, SimpleSnackBar],\n})\nexport class MatSnackBarModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {LiveAnnouncer} from '@angular/cdk/a11y';\nimport {BreakpointObserver, Breakpoints} from '@angular/cdk/layout';\nimport {Overlay, OverlayConfig, OverlayRef} from '@angular/cdk/overlay';\nimport {ComponentPortal, ComponentType, PortalInjector, TemplatePortal} from '@angular/cdk/portal';\nimport {\n  ComponentRef,\n  EmbeddedViewRef,\n  Inject,\n  Injectable,\n  InjectionToken,\n  Injector,\n  Optional,\n  SkipSelf,\n  TemplateRef,\n} from '@angular/core';\nimport {take, takeUntil} from 'rxjs/operators';\nimport {SimpleSnackBar} from './simple-snack-bar';\nimport {MAT_SNACK_BAR_DATA, MatSnackBarConfig} from './snack-bar-config';\nimport {MatSnackBarContainer} from './snack-bar-container';\nimport {MatSnackBarModule} from './snack-bar-module';\nimport {MatSnackBarRef} from './snack-bar-ref';\n\n\n/** Injection token that can be used to specify default snack bar. */\nexport const MAT_SNACK_BAR_DEFAULT_OPTIONS =\n    new InjectionToken<MatSnackBarConfig>('mat-snack-bar-default-options', {\n      providedIn: 'root',\n      factory: MAT_SNACK_BAR_DEFAULT_OPTIONS_FACTORY,\n    });\n\n/** @docs-private */\nexport function MAT_SNACK_BAR_DEFAULT_OPTIONS_FACTORY(): MatSnackBarConfig {\n  return new MatSnackBarConfig();\n}\n\n/**\n * Service to dispatch Material Design snack bar messages.\n */\n@Injectable({providedIn: MatSnackBarModule})\nexport class MatSnackBar {\n  /**\n   * Reference to the current snack bar in the view *at this level* (in the Angular injector tree).\n   * If there is a parent snack-bar service, all operations should delegate to that parent\n   * via `_openedSnackBarRef`.\n   */\n  private _snackBarRefAtThisLevel: MatSnackBarRef<any> | null = null;\n\n  /** Reference to the currently opened snackbar at *any* level. */\n  get _openedSnackBarRef(): MatSnackBarRef<any> | null {\n    const parent = this._parentSnackBar;\n    return parent ? parent._openedSnackBarRef : this._snackBarRefAtThisLevel;\n  }\n\n  set _openedSnackBarRef(value: MatSnackBarRef<any> | null) {\n    if (this._parentSnackBar) {\n      this._parentSnackBar._openedSnackBarRef = value;\n    } else {\n      this._snackBarRefAtThisLevel = value;\n    }\n  }\n\n  constructor(\n      private _overlay: Overlay,\n      private _live: LiveAnnouncer,\n      private _injector: Injector,\n      private _breakpointObserver: BreakpointObserver,\n      @Optional() @SkipSelf() private _parentSnackBar: MatSnackBar,\n      @Inject(MAT_SNACK_BAR_DEFAULT_OPTIONS) private _defaultConfig: MatSnackBarConfig) {}\n\n  /**\n   * Creates and dispatches a snack bar with a custom component for the content, removing any\n   * currently opened snack bars.\n   *\n   * @param component Component to be instantiated.\n   * @param config Extra configuration for the snack bar.\n   */\n  openFromComponent<T>(component: ComponentType<T>, config?: MatSnackBarConfig):\n    MatSnackBarRef<T> {\n    return this._attach(component, config) as MatSnackBarRef<T>;\n  }\n\n  /**\n   * Creates and dispatches a snack bar with a custom template for the content, removing any\n   * currently opened snack bars.\n   *\n   * @param template Template to be instantiated.\n   * @param config Extra configuration for the snack bar.\n   */\n  openFromTemplate(template: TemplateRef<any>, config?: MatSnackBarConfig):\n    MatSnackBarRef<EmbeddedViewRef<any>> {\n    return this._attach(template, config);\n  }\n\n  /**\n   * Opens a snackbar with a message and an optional action.\n   * @param message The message to show in the snackbar.\n   * @param action The label for the snackbar action.\n   * @param config Additional configuration options for the snackbar.\n   */\n  open(message: string, action: string = '', config?: MatSnackBarConfig):\n      MatSnackBarRef<SimpleSnackBar> {\n    const _config = {...this._defaultConfig, ...config};\n\n    // Since the user doesn't have access to the component, we can\n    // override the data to pass in our own message and action.\n    _config.data = {message, action};\n    _config.announcementMessage = message;\n\n    return this.openFromComponent(SimpleSnackBar, _config);\n  }\n\n  /**\n   * Dismisses the currently-visible snack bar.\n   */\n  dismiss(): void {\n    if (this._openedSnackBarRef) {\n      this._openedSnackBarRef.dismiss();\n    }\n  }\n\n  /**\n   * Attaches the snack bar container component to the overlay.\n   */\n  private _attachSnackBarContainer(overlayRef: OverlayRef,\n                                   config: MatSnackBarConfig): MatSnackBarContainer {\n\n    const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n    const injector = new PortalInjector(userInjector || this._injector, new WeakMap([\n      [MatSnackBarConfig, config]\n    ]));\n\n    const containerPortal =\n        new ComponentPortal(MatSnackBarContainer, config.viewContainerRef, injector);\n    const containerRef: ComponentRef<MatSnackBarContainer> = overlayRef.attach(containerPortal);\n    containerRef.instance.snackBarConfig = config;\n    return containerRef.instance;\n  }\n\n  /**\n   * Places a new component or a template as the content of the snack bar container.\n   */\n  private _attach<T>(content: ComponentType<T> | TemplateRef<T>, userConfig?: MatSnackBarConfig):\n    MatSnackBarRef<T | EmbeddedViewRef<any>> {\n\n    const config = {...new MatSnackBarConfig(), ...this._defaultConfig, ...userConfig};\n    const overlayRef = this._createOverlay(config);\n    const container = this._attachSnackBarContainer(overlayRef, config);\n    const snackBarRef = new MatSnackBarRef<T | EmbeddedViewRef<any>>(container, overlayRef);\n\n    if (content instanceof TemplateRef) {\n      const portal = new TemplatePortal(content, null!, {\n        $implicit: config.data,\n        snackBarRef\n      } as any);\n\n      snackBarRef.instance = container.attachTemplatePortal(portal);\n    } else {\n      const injector = this._createInjector(config, snackBarRef);\n      const portal = new ComponentPortal(content, undefined, injector);\n      const contentRef = container.attachComponentPortal<T>(portal);\n\n      // We can't pass this via the injector, because the injector is created earlier.\n      snackBarRef.instance = contentRef.instance;\n    }\n\n    // Subscribe to the breakpoint observer and attach the mat-snack-bar-handset class as\n    // appropriate. This class is applied to the overlay element because the overlay must expand to\n    // fill the width of the screen for full width snackbars.\n    this._breakpointObserver.observe(Breakpoints.Handset).pipe(\n      takeUntil(overlayRef.detachments().pipe(take(1)))\n    ).subscribe(state => {\n      if (state.matches) {\n        overlayRef.overlayElement.classList.add('mat-snack-bar-handset');\n      } else {\n        overlayRef.overlayElement.classList.remove('mat-snack-bar-handset');\n      }\n    });\n\n    this._animateSnackBar(snackBarRef, config);\n    this._openedSnackBarRef = snackBarRef;\n    return this._openedSnackBarRef;\n  }\n\n  /** Animates the old snack bar out and the new one in. */\n  private _animateSnackBar(snackBarRef: MatSnackBarRef<any>, config: MatSnackBarConfig) {\n    // When the snackbar is dismissed, clear the reference to it.\n    snackBarRef.afterDismissed().subscribe(() => {\n      // Clear the snackbar ref if it hasn't already been replaced by a newer snackbar.\n      if (this._openedSnackBarRef == snackBarRef) {\n        this._openedSnackBarRef = null;\n      }\n    });\n\n    if (this._openedSnackBarRef) {\n      // If a snack bar is already in view, dismiss it and enter the\n      // new snack bar after exit animation is complete.\n      this._openedSnackBarRef.afterDismissed().subscribe(() => {\n        snackBarRef.containerInstance.enter();\n      });\n      this._openedSnackBarRef.dismiss();\n    } else {\n      // If no snack bar is in view, enter the new snack bar.\n      snackBarRef.containerInstance.enter();\n    }\n\n    // If a dismiss timeout is provided, set up dismiss based on after the snackbar is opened.\n    if (config.duration && config.duration > 0) {\n      snackBarRef.afterOpened().subscribe(() => snackBarRef._dismissAfter(config.duration!));\n    }\n\n    if (config.announcementMessage) {\n      this._live.announce(config.announcementMessage, config.politeness);\n    }\n  }\n\n  /**\n   * Creates a new overlay and places it in the correct location.\n   * @param config The user-specified snack bar config.\n   */\n  private _createOverlay(config: MatSnackBarConfig): OverlayRef {\n    const overlayConfig = new OverlayConfig();\n    overlayConfig.direction = config.direction;\n\n    let positionStrategy = this._overlay.position().global();\n    // Set horizontal position.\n    const isRtl = config.direction === 'rtl';\n    const isLeft = (\n      config.horizontalPosition === 'left' ||\n      (config.horizontalPosition === 'start' && !isRtl) ||\n      (config.horizontalPosition === 'end' && isRtl));\n    const isRight = !isLeft && config.horizontalPosition !== 'center';\n    if (isLeft) {\n      positionStrategy.left('0');\n    } else if (isRight) {\n      positionStrategy.right('0');\n    } else {\n      positionStrategy.centerHorizontally();\n    }\n    // Set horizontal position.\n    if (config.verticalPosition === 'top') {\n      positionStrategy.top('0');\n    } else {\n      positionStrategy.bottom('0');\n    }\n\n    overlayConfig.positionStrategy = positionStrategy;\n    return this._overlay.create(overlayConfig);\n  }\n\n  /**\n   * Creates an injector to be used inside of a snack bar component.\n   * @param config Config that was used to create the snack bar.\n   * @param snackBarRef Reference to the snack bar.\n   */\n  private _createInjector<T>(\n      config: MatSnackBarConfig,\n      snackBarRef: MatSnackBarRef<T>): PortalInjector {\n\n    const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n\n    return new PortalInjector(userInjector || this._injector, new WeakMap<any, any>([\n      [MatSnackBarRef, snackBarRef],\n      [MAT_SNACK_BAR_DATA, config.data]\n    ]));\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Directive,\n  EventEmitter,\n  Input,\n  isDevMode,\n  OnChanges,\n  OnDestroy,\n  OnInit,\n  Output,\n} from '@angular/core';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {CanDisable, HasInitialized, mixinDisabled, mixinInitialized} from '@angular/material/core';\nimport {SortDirection} from './sort-direction';\nimport {\n  getSortDuplicateSortableIdError,\n  getSortHeaderMissingIdError,\n  getSortInvalidDirectionError\n} from './sort-errors';\nimport {Subject} from 'rxjs';\n\n/** Interface for a directive that holds sorting state consumed by `MatSortHeader`. */\nexport interface MatSortable {\n  /** The id of the column being sorted. */\n  id: string;\n\n  /** Starting sort direction. */\n  start: 'asc' | 'desc';\n\n  /** Whether to disable clearing the sorting state. */\n  disableClear: boolean;\n}\n\n/** The current sort state. */\nexport interface Sort {\n  /** The id of the column being sorted. */\n  active: string;\n\n  /** The sort direction. */\n  direction: SortDirection;\n}\n\n// Boilerplate for applying mixins to MatSort.\n/** @docs-private */\nexport class MatSortBase {}\nexport const _MatSortMixinBase = mixinInitialized(mixinDisabled(MatSortBase));\n\n/** Container for MatSortables to manage the sort state and provide default sort parameters. */\n@Directive({\n  selector: '[matSort]',\n  exportAs: 'matSort',\n  inputs: ['disabled: matSortDisabled']\n})\nexport class MatSort extends _MatSortMixinBase\n    implements CanDisable, HasInitialized, OnChanges, OnDestroy, OnInit {\n  /** Collection of all registered sortables that this directive manages. */\n  sortables = new Map<string, MatSortable>();\n\n  /** Used to notify any child components listening to state changes. */\n  readonly _stateChanges = new Subject<void>();\n\n  /** The id of the most recently sorted MatSortable. */\n  @Input('matSortActive') active: string;\n\n  /**\n   * The direction to set when an MatSortable is initially sorted.\n   * May be overriden by the MatSortable's sort start.\n   */\n  @Input('matSortStart') start: 'asc' | 'desc' = 'asc';\n\n  /** The sort direction of the currently active MatSortable. */\n  @Input('matSortDirection')\n  get direction(): SortDirection { return this._direction; }\n  set direction(direction: SortDirection) {\n    if (isDevMode() && direction && direction !== 'asc' && direction !== 'desc') {\n      throw getSortInvalidDirectionError(direction);\n    }\n    this._direction = direction;\n  }\n  private _direction: SortDirection = '';\n\n  /**\n   * Whether to disable the user from clearing the sort by finishing the sort direction cycle.\n   * May be overriden by the MatSortable's disable clear input.\n   */\n  @Input('matSortDisableClear')\n  get disableClear(): boolean { return this._disableClear; }\n  set disableClear(v: boolean) { this._disableClear = coerceBooleanProperty(v); }\n  private _disableClear: boolean;\n\n  /** Event emitted when the user changes either the active sort or sort direction. */\n  @Output('matSortChange') readonly sortChange: EventEmitter<Sort> = new EventEmitter<Sort>();\n\n  /**\n   * Register function to be used by the contained MatSortables. Adds the MatSortable to the\n   * collection of MatSortables.\n   */\n  register(sortable: MatSortable): void {\n    if (!sortable.id) {\n      throw getSortHeaderMissingIdError();\n    }\n\n    if (this.sortables.has(sortable.id)) {\n      throw getSortDuplicateSortableIdError(sortable.id);\n    }\n    this.sortables.set(sortable.id, sortable);\n  }\n\n  /**\n   * Unregister function to be used by the contained MatSortables. Removes the MatSortable from the\n   * collection of contained MatSortables.\n   */\n  deregister(sortable: MatSortable): void {\n    this.sortables.delete(sortable.id);\n  }\n\n  /** Sets the active sort id and determines the new sort direction. */\n  sort(sortable: MatSortable): void {\n    if (this.active != sortable.id) {\n      this.active = sortable.id;\n      this.direction = sortable.start ? sortable.start : this.start;\n    } else {\n      this.direction = this.getNextSortDirection(sortable);\n    }\n\n    this.sortChange.emit({active: this.active, direction: this.direction});\n  }\n\n  /** Returns the next sort direction of the active sortable, checking for potential overrides. */\n  getNextSortDirection(sortable: MatSortable): SortDirection {\n    if (!sortable) { return ''; }\n\n    // Get the sort direction cycle with the potential sortable overrides.\n    const disableClear = sortable.disableClear != null ? sortable.disableClear : this.disableClear;\n    let sortDirectionCycle = getSortDirectionCycle(sortable.start || this.start, disableClear);\n\n    // Get and return the next direction in the cycle\n    let nextDirectionIndex = sortDirectionCycle.indexOf(this.direction) + 1;\n    if (nextDirectionIndex >= sortDirectionCycle.length) { nextDirectionIndex = 0; }\n    return sortDirectionCycle[nextDirectionIndex];\n  }\n\n  ngOnInit() {\n    this._markInitialized();\n  }\n\n  ngOnChanges() {\n    this._stateChanges.next();\n  }\n\n  ngOnDestroy() {\n    this._stateChanges.complete();\n  }\n}\n\n/** Returns the sort direction cycle to use given the provided parameters of order and clear. */\nfunction getSortDirectionCycle(start: 'asc' | 'desc',\n                               disableClear: boolean): SortDirection[] {\n  let sortOrder: SortDirection[] = ['asc', 'desc'];\n  if (start == 'desc') { sortOrder.reverse(); }\n  if (!disableClear) { sortOrder.push(''); }\n\n  return sortOrder;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  keyframes,\n  AnimationTriggerMetadata, query, animateChild,\n} from '@angular/animations';\nimport {AnimationCurves, AnimationDurations} from '@angular/material/core';\n\nconst SORT_ANIMATION_TRANSITION = AnimationDurations.ENTERING + ' ' +\n                                  AnimationCurves.STANDARD_CURVE;\n\n/** Animations used by MatSort. */\nexport const matSortAnimations: {\n  readonly indicator: AnimationTriggerMetadata;\n  readonly leftPointer: AnimationTriggerMetadata;\n  readonly rightPointer: AnimationTriggerMetadata;\n  readonly arrowOpacity: AnimationTriggerMetadata;\n  readonly arrowPosition: AnimationTriggerMetadata;\n  readonly allowChildren: AnimationTriggerMetadata;\n} = {\n  /** Animation that moves the sort indicator. */\n  indicator: trigger('indicator', [\n    state('active-asc, asc', style({transform: 'translateY(0px)'})),\n    // 10px is the height of the sort indicator, minus the width of the pointers\n    state('active-desc, desc', style({transform: 'translateY(10px)'})),\n    transition('active-asc <=> active-desc', animate(SORT_ANIMATION_TRANSITION))\n  ]),\n\n  /** Animation that rotates the left pointer of the indicator based on the sorting direction. */\n  leftPointer: trigger('leftPointer', [\n    state('active-asc, asc', style({transform: 'rotate(-45deg)'})),\n    state('active-desc, desc', style({transform: 'rotate(45deg)'})),\n    transition('active-asc <=> active-desc', animate(SORT_ANIMATION_TRANSITION))\n  ]),\n\n  /** Animation that rotates the right pointer of the indicator based on the sorting direction. */\n  rightPointer: trigger('rightPointer', [\n    state('active-asc, asc', style({transform: 'rotate(45deg)'})),\n    state('active-desc, desc', style({transform: 'rotate(-45deg)'})),\n    transition('active-asc <=> active-desc', animate(SORT_ANIMATION_TRANSITION))\n  ]),\n\n  /** Animation that controls the arrow opacity. */\n  arrowOpacity: trigger('arrowOpacity', [\n    state('desc-to-active, asc-to-active, active', style({opacity: 1})),\n    state('desc-to-hint, asc-to-hint, hint', style({opacity: .54})),\n    state('hint-to-desc, active-to-desc, desc, hint-to-asc, active-to-asc, asc, void',\n        style({opacity: 0})),\n    // Transition between all states except for immediate transitions\n    transition('* => asc, * => desc, * => active, * => hint, * => void', animate('0ms')),\n    transition('* <=> *', animate(SORT_ANIMATION_TRANSITION)),\n  ]),\n\n  /**\n   * Animation for the translation of the arrow as a whole. States are separated into two\n   * groups: ones with animations and others that are immediate. Immediate states are asc, desc,\n   * peek, and active. The other states define a specific animation (source-to-destination)\n   * and are determined as a function of their prev user-perceived state and what the next state\n   * should be.\n   */\n  arrowPosition: trigger('arrowPosition', [\n    // Hidden Above => Hint Center\n    transition('* => desc-to-hint, * => desc-to-active',\n        animate(SORT_ANIMATION_TRANSITION, keyframes([\n          style({transform: 'translateY(-25%)'}),\n          style({transform: 'translateY(0)'})\n        ]))),\n    // Hint Center => Hidden Below\n    transition('* => hint-to-desc, * => active-to-desc',\n        animate(SORT_ANIMATION_TRANSITION, keyframes([\n          style({transform: 'translateY(0)'}),\n          style({transform: 'translateY(25%)'})\n        ]))),\n    // Hidden Below => Hint Center\n    transition('* => asc-to-hint, * => asc-to-active',\n        animate(SORT_ANIMATION_TRANSITION, keyframes([\n          style({transform: 'translateY(25%)'}),\n          style({transform: 'translateY(0)'})\n        ]))),\n    // Hint Center => Hidden Above\n    transition('* => hint-to-asc, * => active-to-asc',\n        animate(SORT_ANIMATION_TRANSITION, keyframes([\n          style({transform: 'translateY(0)'}),\n          style({transform: 'translateY(-25%)'})\n        ]))),\n    state('desc-to-hint, asc-to-hint, hint, desc-to-active, asc-to-active, active',\n        style({transform: 'translateY(0)'})),\n    state('hint-to-desc, active-to-desc, desc',\n        style({transform: 'translateY(-25%)'})),\n    state('hint-to-asc, active-to-asc, asc',\n        style({transform: 'translateY(25%)'})),\n  ]),\n\n  /** Necessary trigger that calls animate on children animations. */\n  allowChildren: trigger('allowChildren', [\n    transition('* <=> *', [\n      query('@*', animateChild(), {optional: true})\n    ])\n  ]),\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {AnimationEvent} from '@angular/animations';\nimport {FocusMonitor, FocusOrigin, FocusTrap, FocusTrapFactory} from '@angular/cdk/a11y';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {ESCAPE} from '@angular/cdk/keycodes';\nimport {Platform} from '@angular/cdk/platform';\nimport {CdkScrollable} from '@angular/cdk/scrolling';\nimport {DOCUMENT} from '@angular/common';\nimport {\n  AfterContentChecked,\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  ContentChildren,\n  DoCheck,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  Output,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {fromEvent, merge, Observable, Subject} from 'rxjs';\nimport {debounceTime, filter, map, startWith, take, takeUntil} from 'rxjs/operators';\nimport {matDrawerAnimations} from './drawer-animations';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\n\n\n/** Throws an exception when two MatDrawer are matching the same position. */\nexport function throwMatDuplicatedDrawerError(position: string) {\n  throw Error(`A drawer was already declared for 'position=\"${position}\"'`);\n}\n\n\n/** Result of the toggle promise that indicates the state of the drawer. */\nexport type MatDrawerToggleResult = 'open' | 'close';\n\n/** Configures whether drawers should use auto sizing by default. */\nexport const MAT_DRAWER_DEFAULT_AUTOSIZE =\n    new InjectionToken<boolean>('MAT_DRAWER_DEFAULT_AUTOSIZE', {\n      providedIn: 'root',\n      factory: MAT_DRAWER_DEFAULT_AUTOSIZE_FACTORY,\n    });\n\n/** @docs-private */\nexport function MAT_DRAWER_DEFAULT_AUTOSIZE_FACTORY(): boolean {\n  return false;\n}\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-drawer-content',\n  template: '<ng-content></ng-content>',\n  host: {\n    'class': 'mat-drawer-content',\n    '[style.margin-left.px]': '_container._contentMargins.left',\n    '[style.margin-right.px]': '_container._contentMargins.right',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatDrawerContent implements AfterContentInit {\n  constructor(\n      private _changeDetectorRef: ChangeDetectorRef,\n      @Inject(forwardRef(() => MatDrawerContainer)) public _container: MatDrawerContainer) {\n  }\n\n  ngAfterContentInit() {\n    this._container._contentMarginChanges.subscribe(() => {\n      this._changeDetectorRef.markForCheck();\n    });\n  }\n}\n\n\n/**\n * This component corresponds to a drawer that can be opened on the drawer container.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-drawer',\n  exportAs: 'matDrawer',\n  template: '<ng-content></ng-content>',\n  animations: [matDrawerAnimations.transformDrawer],\n  host: {\n    'class': 'mat-drawer',\n    '[@transform]': '_animationState',\n    '(@transform.start)': '_onAnimationStart($event)',\n    '(@transform.done)': '_onAnimationEnd($event)',\n    // must prevent the browser from aligning text based on value\n    '[attr.align]': 'null',\n    '[class.mat-drawer-end]': 'position === \"end\"',\n    '[class.mat-drawer-over]': 'mode === \"over\"',\n    '[class.mat-drawer-push]': 'mode === \"push\"',\n    '[class.mat-drawer-side]': 'mode === \"side\"',\n    'tabIndex': '-1',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatDrawer implements AfterContentInit, AfterContentChecked, OnDestroy {\n  private _focusTrap: FocusTrap;\n  private _elementFocusedBeforeDrawerWasOpened: HTMLElement | null = null;\n\n  /** Whether the drawer is initialized. Used for disabling the initial animation. */\n  private _enableAnimations = false;\n\n  /** The side that the drawer is attached to. */\n  @Input()\n  get position(): 'start' | 'end' { return this._position; }\n  set position(value: 'start' | 'end') {\n    // Make sure we have a valid value.\n    value = value === 'end' ? 'end' : 'start';\n    if (value != this._position) {\n      this._position = value;\n      this.onPositionChanged.emit();\n    }\n  }\n  private _position: 'start' | 'end' = 'start';\n\n  /** Mode of the drawer; one of 'over', 'push' or 'side'. */\n  @Input()\n  get mode(): 'over' | 'push' | 'side' { return this._mode; }\n  set mode(value: 'over' | 'push' | 'side') {\n    this._mode = value;\n    this._modeChanged.next();\n  }\n  private _mode: 'over' | 'push' | 'side' = 'over';\n\n  /** Whether the drawer can be closed with the escape key or by clicking on the backdrop. */\n  @Input()\n  get disableClose(): boolean { return this._disableClose; }\n  set disableClose(value: boolean) { this._disableClose = coerceBooleanProperty(value); }\n  private _disableClose: boolean = false;\n\n  /** Whether the drawer should focus the first focusable element automatically when opened. */\n  @Input()\n  get autoFocus(): boolean { return this._autoFocus; }\n  set autoFocus(value: boolean) { this._autoFocus = coerceBooleanProperty(value); }\n  private _autoFocus: boolean = true;\n\n  /** How the sidenav was opened (keypress, mouse click etc.) */\n  private _openedVia: FocusOrigin | null;\n\n  /** Emits whenever the drawer has started animating. */\n  _animationStarted = new EventEmitter<AnimationEvent>();\n\n  /** Current state of the sidenav animation. */\n  _animationState: 'open-instant' | 'open' | 'void' = 'void';\n\n  /** Event emitted when the drawer open state is changed. */\n  @Output() readonly openedChange: EventEmitter<boolean> =\n      // Note this has to be async in order to avoid some issues with two-bindings (see #8872).\n      new EventEmitter<boolean>(/* isAsync */true);\n\n  /** Event emitted when the drawer has been opened. */\n  @Output('opened')\n  get _openedStream(): Observable<void> {\n    return this.openedChange.pipe(filter(o => o), map(() => {}));\n  }\n\n  /** Event emitted when the drawer has started opening. */\n  @Output()\n  get openedStart(): Observable<void> {\n    return this._animationStarted.pipe(\n      filter(e => e.fromState !== e.toState && e.toState.indexOf('open') === 0),\n      map(() => {})\n    );\n  }\n\n  /** Event emitted when the drawer has been closed. */\n  @Output('closed')\n  get _closedStream(): Observable<void> {\n    return this.openedChange.pipe(filter(o => !o), map(() => {}));\n  }\n\n  /** Event emitted when the drawer has started closing. */\n  @Output()\n  get closedStart(): Observable<void> {\n    return this._animationStarted.pipe(\n      filter(e => e.fromState !== e.toState && e.toState === 'void'),\n      map(() => {})\n    );\n  }\n\n  /** Event emitted when the drawer's position changes. */\n  // tslint:disable-next-line:no-output-on-prefix\n  @Output('positionChanged') onPositionChanged: EventEmitter<void> = new EventEmitter<void>();\n\n  /**\n   * An observable that emits when the drawer mode changes. This is used by the drawer container to\n   * to know when to when the mode changes so it can adapt the margins on the content.\n   */\n  readonly _modeChanged = new Subject();\n\n  get _isFocusTrapEnabled(): boolean {\n    // The focus trap is only enabled when the drawer is open in any mode other than side.\n    return this.opened && this.mode !== 'side';\n  }\n\n  constructor(private _elementRef: ElementRef,\n              private _focusTrapFactory: FocusTrapFactory,\n              private _focusMonitor: FocusMonitor,\n              private _platform: Platform,\n              private _ngZone: NgZone,\n              @Optional() @Inject(DOCUMENT) private _doc: any) {\n\n    this.openedChange.subscribe((opened: boolean) => {\n      if (opened) {\n        if (this._doc) {\n          this._elementFocusedBeforeDrawerWasOpened = this._doc.activeElement as HTMLElement;\n        }\n\n        if (this._isFocusTrapEnabled && this._focusTrap) {\n          this._trapFocus();\n        }\n      } else {\n        this._restoreFocus();\n      }\n    });\n\n    /**\n     * Listen to `keydown` events outside the zone so that change detection is not run every\n     * time a key is pressed. Instead we re-enter the zone only if the `ESC` key is pressed\n     * and we don't have close disabled.\n     */\n    this._ngZone.runOutsideAngular(() => {\n        fromEvent(this._elementRef.nativeElement, 'keydown').pipe(\n            filter((event: KeyboardEvent) => event.keyCode === ESCAPE && !this.disableClose)\n        ).subscribe((event) => this._ngZone.run(() => {\n            this.close();\n            event.stopPropagation();\n        }));\n    });\n  }\n\n  /** Traps focus inside the drawer. */\n  private _trapFocus() {\n    if (!this.autoFocus) {\n      return;\n    }\n\n    this._focusTrap.focusInitialElementWhenReady().then(hasMovedFocus => {\n      // If there were no focusable elements, focus the sidenav itself so the keyboard navigation\n      // still works. We need to check that `focus` is a function due to Universal.\n      if (!hasMovedFocus && typeof this._elementRef.nativeElement.focus === 'function') {\n        this._elementRef.nativeElement.focus();\n      }\n    });\n  }\n\n  /**\n   * If focus is currently inside the drawer, restores it to where it was before the drawer\n   * opened.\n   */\n  private _restoreFocus() {\n    if (!this.autoFocus) {\n      return;\n    }\n\n    const activeEl = this._doc && this._doc.activeElement;\n\n    if (activeEl && this._elementRef.nativeElement.contains(activeEl)) {\n      if (this._elementFocusedBeforeDrawerWasOpened instanceof HTMLElement) {\n        this._focusMonitor.focusVia(this._elementFocusedBeforeDrawerWasOpened, this._openedVia);\n      } else {\n        this._elementRef.nativeElement.blur();\n      }\n    }\n\n    this._elementFocusedBeforeDrawerWasOpened = null;\n    this._openedVia = null;\n  }\n\n  ngAfterContentInit() {\n    this._focusTrap = this._focusTrapFactory.create(this._elementRef.nativeElement);\n    this._focusTrap.enabled = this._isFocusTrapEnabled;\n  }\n\n  ngAfterContentChecked() {\n    // Enable the animations after the lifecycle hooks have run, in order to avoid animating\n    // drawers that are open by default. When we're on the server, we shouldn't enable the\n    // animations, because we don't want the drawer to animate the first time the user sees\n    // the page.\n    if (this._platform.isBrowser) {\n      this._enableAnimations = true;\n    }\n  }\n\n  ngOnDestroy() {\n    if (this._focusTrap) {\n      this._focusTrap.destroy();\n    }\n  }\n\n  /**\n   * Whether the drawer is opened. We overload this because we trigger an event when it\n   * starts or end.\n   */\n  @Input()\n  get opened(): boolean { return this._opened; }\n  set opened(value: boolean) { this.toggle(coerceBooleanProperty(value)); }\n  private _opened: boolean = false;\n\n  /**\n   * Open the drawer.\n   * @param openedVia Whether the drawer was opened by a key press, mouse click or programmatically.\n   * Used for focus management after the sidenav is closed.\n   */\n  open(openedVia?: FocusOrigin): Promise<MatDrawerToggleResult> {\n    return this.toggle(true, openedVia);\n  }\n\n  /** Close the drawer. */\n  close(): Promise<MatDrawerToggleResult> {\n    return this.toggle(false);\n  }\n\n  /**\n   * Toggle this drawer.\n   * @param isOpen Whether the drawer should be open.\n   * @param openedVia Whether the drawer was opened by a key press, mouse click or programmatically.\n   * Used for focus management after the sidenav is closed.\n   */\n  toggle(isOpen: boolean = !this.opened, openedVia: FocusOrigin = 'program'):\n    Promise<MatDrawerToggleResult> {\n\n    this._opened = isOpen;\n\n    if (isOpen) {\n      this._animationState = this._enableAnimations ? 'open' : 'open-instant';\n      this._openedVia = openedVia;\n    } else {\n      this._animationState = 'void';\n      this._restoreFocus();\n    }\n\n    if (this._focusTrap) {\n      this._focusTrap.enabled = this._isFocusTrapEnabled;\n    }\n\n    return new Promise<MatDrawerToggleResult>(resolve => {\n      this.openedChange.pipe(take(1)).subscribe(open => resolve(open ? 'open' : 'close'));\n    });\n  }\n\n  _onAnimationStart(event: AnimationEvent) {\n    this._animationStarted.emit(event);\n  }\n\n  _onAnimationEnd(event: AnimationEvent) {\n    const {fromState, toState} = event;\n\n    if ((toState.indexOf('open') === 0 && fromState === 'void') ||\n        (toState === 'void' && fromState.indexOf('open') === 0)) {\n      this.openedChange.emit(this._opened);\n    }\n  }\n\n  get _width(): number {\n    return this._elementRef.nativeElement ? (this._elementRef.nativeElement.offsetWidth || 0) : 0;\n  }\n}\n\n\n/**\n * `<mat-drawer-container>` component.\n *\n * This is the parent component to one or two `<mat-drawer>`s that validates the state internally\n * and coordinates the backdrop and content styling.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-drawer-container',\n  exportAs: 'matDrawerContainer',\n  templateUrl: 'drawer-container.html',\n  styleUrls: ['drawer.css'],\n  host: {\n    'class': 'mat-drawer-container',\n    '[class.mat-drawer-container-explicit-backdrop]': '_backdropOverride',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatDrawerContainer implements AfterContentInit, DoCheck, OnDestroy {\n  @ContentChildren(MatDrawer) _drawers: QueryList<MatDrawer>;\n  @ContentChild(MatDrawerContent) _content: MatDrawerContent;\n\n  /** The drawer child with the `start` position. */\n  get start(): MatDrawer | null { return this._start; }\n\n  /** The drawer child with the `end` position. */\n  get end(): MatDrawer | null { return this._end; }\n\n  /**\n   * Whether to automatically resize the container whenever\n   * the size of any of its drawers changes.\n   *\n   * **Use at your own risk!** Enabling this option can cause layout thrashing by measuring\n   * the drawers on every change detection cycle. Can be configured globally via the\n   * `MAT_DRAWER_DEFAULT_AUTOSIZE` token.\n   */\n  @Input()\n  get autosize(): boolean { return this._autosize; }\n  set autosize(value: boolean) { this._autosize = coerceBooleanProperty(value); }\n  private _autosize: boolean;\n\n  /**\n   * Whether the drawer container should have a backdrop while one of the sidenavs is open.\n   * If explicitly set to `true`, the backdrop will be enabled for drawers in the `side`\n   * mode as well.\n   */\n  @Input()\n  get hasBackdrop() {\n    if (this._backdropOverride == null) {\n      return !this._start || this._start.mode !== 'side' || !this._end || this._end.mode !== 'side';\n    }\n\n    return this._backdropOverride;\n  }\n  set hasBackdrop(value: any) {\n    this._backdropOverride = value == null ? null : coerceBooleanProperty(value);\n  }\n  _backdropOverride: boolean | null;\n\n  /** Event emitted when the drawer backdrop is clicked. */\n  @Output() readonly backdropClick: EventEmitter<void> = new EventEmitter<void>();\n\n  /** The drawer at the start/end position, independent of direction. */\n  private _start: MatDrawer | null;\n  private _end: MatDrawer | null;\n\n  /**\n   * The drawer at the left/right. When direction changes, these will change as well.\n   * They're used as aliases for the above to set the left/right style properly.\n   * In LTR, _left == _start and _right == _end.\n   * In RTL, _left == _end and _right == _start.\n   */\n  private _left: MatDrawer | null;\n  private _right: MatDrawer | null;\n\n  /** Emits when the component is destroyed. */\n  private readonly _destroyed = new Subject<void>();\n\n  /** Emits on every ngDoCheck. Used for debouncing reflows. */\n  private readonly _doCheckSubject = new Subject<void>();\n\n  /**\n   * Margins to be applied to the content. These are used to push / shrink the drawer content when a\n   * drawer is open. We use margin rather than transform even for push mode because transform breaks\n   * fixed position elements inside of the transformed element.\n   */\n  _contentMargins: {left: number|null, right: number|null} = {left: null, right: null};\n\n  readonly _contentMarginChanges = new Subject<{left: number|null, right: number|null}>();\n\n  /** Reference to the CdkScrollable instance that wraps the scrollable content. */\n  @ViewChild(CdkScrollable) scrollable: CdkScrollable;\n\n  constructor(@Optional() private _dir: Directionality,\n              private _element: ElementRef,\n              private _ngZone: NgZone,\n              private _changeDetectorRef: ChangeDetectorRef,\n              @Inject(MAT_DRAWER_DEFAULT_AUTOSIZE) defaultAutosize = false,\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) private _animationMode?: string) {\n\n    // If a `Dir` directive exists up the tree, listen direction changes\n    // and update the left/right properties to point to the proper start/end.\n    if (_dir) {\n      _dir.change.pipe(takeUntil(this._destroyed)).subscribe(() => {\n        this._validateDrawers();\n        this._updateContentMargins();\n      });\n    }\n\n    this._autosize = defaultAutosize;\n  }\n\n  ngAfterContentInit() {\n    this._drawers.changes.pipe(startWith(null)).subscribe(() => {\n      this._validateDrawers();\n\n      this._drawers.forEach((drawer: MatDrawer) => {\n        this._watchDrawerToggle(drawer);\n        this._watchDrawerPosition(drawer);\n        this._watchDrawerMode(drawer);\n      });\n\n      if (!this._drawers.length ||\n          this._isDrawerOpen(this._start) ||\n          this._isDrawerOpen(this._end)) {\n        this._updateContentMargins();\n      }\n\n      this._changeDetectorRef.markForCheck();\n    });\n\n    this._doCheckSubject.pipe(\n      debounceTime(10), // Arbitrary debounce time, less than a frame at 60fps\n      takeUntil(this._destroyed)\n    ).subscribe(() => this._updateContentMargins());\n  }\n\n  ngOnDestroy() {\n    this._doCheckSubject.complete();\n    this._destroyed.next();\n    this._destroyed.complete();\n  }\n\n  /** Calls `open` of both start and end drawers */\n  open(): void {\n    this._drawers.forEach(drawer => drawer.open());\n  }\n\n  /** Calls `close` of both start and end drawers */\n  close(): void {\n    this._drawers.forEach(drawer => drawer.close());\n  }\n\n  ngDoCheck() {\n    // If users opted into autosizing, do a check every change detection cycle.\n    if (this._autosize && this._isPushed()) {\n      // Run outside the NgZone, otherwise the debouncer will throw us into an infinite loop.\n      this._ngZone.runOutsideAngular(() => this._doCheckSubject.next());\n    }\n  }\n\n  /**\n   * Subscribes to drawer events in order to set a class on the main container element when the\n   * drawer is open and the backdrop is visible. This ensures any overflow on the container element\n   * is properly hidden.\n   */\n  private _watchDrawerToggle(drawer: MatDrawer): void {\n    drawer._animationStarted.pipe(\n      takeUntil(this._drawers.changes),\n      filter((event: AnimationEvent) => event.fromState !== event.toState)\n    )\n    .subscribe((event: AnimationEvent) => {\n      // Set the transition class on the container so that the animations occur. This should not\n      // be set initially because animations should only be triggered via a change in state.\n      if (event.toState !== 'open-instant' && this._animationMode !== 'NoopAnimations') {\n        this._element.nativeElement.classList.add('mat-drawer-transition');\n      }\n\n      this._updateContentMargins();\n      this._changeDetectorRef.markForCheck();\n    });\n\n    if (drawer.mode !== 'side') {\n      drawer.openedChange.pipe(takeUntil(this._drawers.changes)).subscribe(() =>\n          this._setContainerClass(drawer.opened));\n    }\n  }\n\n  /**\n   * Subscribes to drawer onPositionChanged event in order to\n   * re-validate drawers when the position changes.\n   */\n  private _watchDrawerPosition(drawer: MatDrawer): void {\n    if (!drawer) {\n      return;\n    }\n    // NOTE: We need to wait for the microtask queue to be empty before validating,\n    // since both drawers may be swapping positions at the same time.\n    drawer.onPositionChanged.pipe(takeUntil(this._drawers.changes)).subscribe(() => {\n      this._ngZone.onMicrotaskEmpty.asObservable().pipe(take(1)).subscribe(() => {\n        this._validateDrawers();\n      });\n    });\n  }\n\n  /** Subscribes to changes in drawer mode so we can run change detection. */\n  private _watchDrawerMode(drawer: MatDrawer): void {\n    if (drawer) {\n      drawer._modeChanged.pipe(takeUntil(merge(this._drawers.changes, this._destroyed)))\n        .subscribe(() => {\n          this._updateContentMargins();\n          this._changeDetectorRef.markForCheck();\n        });\n    }\n  }\n\n  /** Toggles the 'mat-drawer-opened' class on the main 'mat-drawer-container' element. */\n  private _setContainerClass(isAdd: boolean): void {\n    if (isAdd) {\n      this._element.nativeElement.classList.add('mat-drawer-opened');\n    } else {\n      this._element.nativeElement.classList.remove('mat-drawer-opened');\n    }\n  }\n\n  /** Validate the state of the drawer children components. */\n  private _validateDrawers() {\n    this._start = this._end = null;\n\n    // Ensure that we have at most one start and one end drawer.\n    this._drawers.forEach(drawer => {\n      if (drawer.position == 'end') {\n        if (this._end != null) {\n          throwMatDuplicatedDrawerError('end');\n        }\n        this._end = drawer;\n      } else {\n        if (this._start != null) {\n          throwMatDuplicatedDrawerError('start');\n        }\n        this._start = drawer;\n      }\n    });\n\n    this._right = this._left = null;\n\n    // Detect if we're LTR or RTL.\n    if (this._dir && this._dir.value === 'rtl') {\n      this._left = this._end;\n      this._right = this._start;\n    } else {\n      this._left = this._start;\n      this._right = this._end;\n    }\n  }\n\n  /** Whether the container is being pushed to the side by one of the drawers. */\n  private _isPushed() {\n    return (this._isDrawerOpen(this._start) && this._start.mode != 'over') ||\n           (this._isDrawerOpen(this._end) && this._end.mode != 'over');\n  }\n\n  _onBackdropClicked() {\n    this.backdropClick.emit();\n    this._closeModalDrawer();\n  }\n\n  _closeModalDrawer() {\n    // Close all open drawers where closing is not disabled and the mode is not `side`.\n    [this._start, this._end]\n      .filter(drawer => drawer && !drawer.disableClose && this._canHaveBackdrop(drawer))\n      .forEach(drawer => drawer!.close());\n  }\n\n  _isShowingBackdrop(): boolean {\n    return (this._isDrawerOpen(this._start) && this._canHaveBackdrop(this._start)) ||\n           (this._isDrawerOpen(this._end) && this._canHaveBackdrop(this._end));\n  }\n\n  private _canHaveBackdrop(drawer: MatDrawer): boolean {\n    return drawer.mode !== 'side' || !!this._backdropOverride;\n  }\n\n  private _isDrawerOpen(drawer: MatDrawer | null): drawer is MatDrawer {\n    return drawer != null && drawer.opened;\n  }\n\n  /**\n   * Recalculates and updates the inline styles for the content. Note that this should be used\n   * sparingly, because it causes a reflow.\n   */\n  private _updateContentMargins() {\n    // 1. For drawers in `over` mode, they don't affect the content.\n    // 2. For drawers in `side` mode they should shrink the content. We do this by adding to the\n    //    left margin (for left drawer) or right margin (for right the drawer).\n    // 3. For drawers in `push` mode the should shift the content without resizing it. We do this by\n    //    adding to the left or right margin and simultaneously subtracting the same amount of\n    //    margin from the other side.\n\n    let left = 0;\n    let right = 0;\n\n    if (this._left && this._left.opened) {\n      if (this._left.mode == 'side') {\n        left += this._left._width;\n      } else if (this._left.mode == 'push') {\n        let width = this._left._width;\n        left += width;\n        right -= width;\n      }\n    }\n\n    if (this._right && this._right.opened) {\n      if (this._right.mode == 'side') {\n        right += this._right._width;\n      } else if (this._right.mode == 'push') {\n        let width = this._right._width;\n        right += width;\n        left -= width;\n      }\n    }\n\n    // If either `right` or `left` is zero, don't set a style to the element. This\n    // allows users to specify a custom size via CSS class in SSR scenarios where the\n    // measured widths will always be zero. Note that we reset to `null` here, rather\n    // than below, in order to ensure that the types in the `if` below are consistent.\n    left = left || null!;\n    right = right || null!;\n\n    if (left !== this._contentMargins.left || right !== this._contentMargins.right) {\n      this._contentMargins = {left, right};\n\n      // Pull back into the NgZone since in some cases we could be outside. We need to be careful\n      // to do it only when something changed, otherwise we can end up hitting the zone too often.\n      this._ngZone.run(() => this._contentMarginChanges.next(this._contentMargins));\n    }\n\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  ContentChildren,\n  forwardRef,\n  Inject,\n  Input,\n  ViewEncapsulation,\n  QueryList,\n} from '@angular/core';\nimport {MatDrawer, MatDrawerContainer, MatDrawerContent} from './drawer';\nimport {matDrawerAnimations} from './drawer-animations';\nimport {coerceBooleanProperty, coerceNumberProperty} from '@angular/cdk/coercion';\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-sidenav-content',\n  template: '<ng-content></ng-content>',\n  host: {\n    'class': 'mat-drawer-content mat-sidenav-content',\n    '[style.margin-left.px]': '_container._contentMargins.left',\n    '[style.margin-right.px]': '_container._contentMargins.right',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatSidenavContent extends MatDrawerContent {\n  constructor(\n      changeDetectorRef: ChangeDetectorRef,\n      @Inject(forwardRef(() => MatSidenavContainer)) container: MatSidenavContainer) {\n    super(changeDetectorRef, container);\n  }\n}\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-sidenav',\n  exportAs: 'matSidenav',\n  template: '<ng-content></ng-content>',\n  animations: [matDrawerAnimations.transformDrawer],\n  host: {\n    'class': 'mat-drawer mat-sidenav',\n    'tabIndex': '-1',\n    '[@transform]': '_animationState',\n    '(@transform.start)': '_onAnimationStart($event)',\n    '(@transform.done)': '_onAnimationEnd($event)',\n    // must prevent the browser from aligning text based on value\n    '[attr.align]': 'null',\n    '[class.mat-drawer-end]': 'position === \"end\"',\n    '[class.mat-drawer-over]': 'mode === \"over\"',\n    '[class.mat-drawer-push]': 'mode === \"push\"',\n    '[class.mat-drawer-side]': 'mode === \"side\"',\n    '[class.mat-sidenav-fixed]': 'fixedInViewport',\n    '[style.top.px]': 'fixedInViewport ? fixedTopGap : null',\n    '[style.bottom.px]': 'fixedInViewport ? fixedBottomGap : null',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatSidenav extends MatDrawer {\n  /** Whether the sidenav is fixed in the viewport. */\n  @Input()\n  get fixedInViewport(): boolean { return this._fixedInViewport; }\n  set fixedInViewport(value) { this._fixedInViewport = coerceBooleanProperty(value); }\n  private _fixedInViewport = false;\n\n  /**\n   * The gap between the top of the sidenav and the top of the viewport when the sidenav is in fixed\n   * mode.\n   */\n  @Input()\n  get fixedTopGap(): number { return this._fixedTopGap; }\n  set fixedTopGap(value) { this._fixedTopGap = coerceNumberProperty(value); }\n  private _fixedTopGap = 0;\n\n  /**\n   * The gap between the bottom of the sidenav and the bottom of the viewport when the sidenav is in\n   * fixed mode.\n   */\n  @Input()\n  get fixedBottomGap(): number { return this._fixedBottomGap; }\n  set fixedBottomGap(value) { this._fixedBottomGap = coerceNumberProperty(value); }\n  private _fixedBottomGap = 0;\n}\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-sidenav-container',\n  exportAs: 'matSidenavContainer',\n  templateUrl: 'sidenav-container.html',\n  styleUrls: ['drawer.css'],\n  host: {\n    'class': 'mat-drawer-container mat-sidenav-container',\n    '[class.mat-drawer-container-explicit-backdrop]': '_backdropOverride',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatSidenavContainer extends MatDrawerContainer {\n  @ContentChildren(MatSidenav) _drawers: QueryList<MatSidenav>;\n  @ContentChild(MatSidenavContent) _content: MatSidenavContent;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {PlatformModule} from '@angular/cdk/platform';\nimport {ScrollDispatchModule} from '@angular/cdk/scrolling';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatDrawer, MatDrawerContainer, MatDrawerContent} from './drawer';\nimport {MatSidenav, MatSidenavContainer, MatSidenavContent} from './sidenav';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatCommonModule,\n    ScrollDispatchModule,\n    PlatformModule,\n  ],\n  exports: [\n    MatCommonModule,\n    MatDrawer,\n    MatDrawerContainer,\n    MatDrawerContent,\n    MatSidenav,\n    MatSidenavContainer,\n    MatSidenavContent,\n  ],\n  declarations: [\n    MatDrawer,\n    MatDrawerContainer,\n    MatDrawerContent,\n    MatSidenav,\n    MatSidenavContainer,\n    MatSidenavContent,\n  ],\n})\nexport class MatSidenavModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {InjectionToken} from '@angular/core';\n\n\n/** Default `mat-slide-toggle` options that can be overridden. */\nexport interface MatSlideToggleDefaultOptions {\n  /** Whether toggle action triggers value changes in slide toggle. */\n  disableToggleValue?: boolean;\n  /** Whether drag action triggers value changes in slide toggle. */\n  disableDragValue?: boolean;\n}\n\n/** Injection token to be used to override the default options for `mat-slide-toggle`. */\nexport const MAT_SLIDE_TOGGLE_DEFAULT_OPTIONS =\n  new InjectionToken<MatSlideToggleDefaultOptions>('mat-slide-toggle-default-options', {\n    providedIn: 'root',\n    factory: () => ({disableToggleValue: false, disableDragValue: false})\n  });\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor, FocusOrigin} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {Platform} from '@angular/cdk/platform';\nimport {\n  AfterContentInit,\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Input,\n  OnDestroy,\n  Output,\n  ViewChild,\n  ViewEncapsulation,\n  NgZone,\n  Optional,\n  Inject,\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {\n  CanColor,\n  CanDisable,\n  CanDisableRipple,\n  HammerInput,\n  HasTabIndex,\n  MatRipple,\n  mixinColor,\n  mixinDisabled,\n  mixinDisableRipple,\n  mixinTabIndex,\n  RippleRef,\n} from '@angular/material/core';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\nimport {\n  MAT_SLIDE_TOGGLE_DEFAULT_OPTIONS,\n  MatSlideToggleDefaultOptions\n} from './slide-toggle-config';\n\n// Increasing integer for generating unique ids for slide-toggle components.\nlet nextUniqueId = 0;\n\nexport const MAT_SLIDE_TOGGLE_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatSlideToggle),\n  multi: true\n};\n\n/** Change event object emitted by a MatSlideToggle. */\nexport class MatSlideToggleChange {\n  constructor(\n    /** The source MatSlideToggle of the event. */\n    public source: MatSlideToggle,\n    /** The new `checked` value of the MatSlideToggle. */\n    public checked: boolean) { }\n}\n\n// Boilerplate for applying mixins to MatSlideToggle.\n/** @docs-private */\nexport class MatSlideToggleBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatSlideToggleMixinBase =\n  mixinTabIndex(mixinColor(mixinDisableRipple(mixinDisabled(MatSlideToggleBase)), 'accent'));\n\n/** Represents a slidable \"switch\" toggle that can be moved between on and off. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-slide-toggle',\n  exportAs: 'matSlideToggle',\n  host: {\n    'class': 'mat-slide-toggle',\n    '[id]': 'id',\n    '[class.mat-checked]': 'checked',\n    '[class.mat-disabled]': 'disabled',\n    '[class.mat-slide-toggle-label-before]': 'labelPosition == \"before\"',\n    '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"',\n  },\n  templateUrl: 'slide-toggle.html',\n  styleUrls: ['slide-toggle.css'],\n  providers: [MAT_SLIDE_TOGGLE_VALUE_ACCESSOR],\n  inputs: ['disabled', 'disableRipple', 'color', 'tabIndex'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatSlideToggle extends _MatSlideToggleMixinBase implements OnDestroy, AfterContentInit,\n    ControlValueAccessor, CanDisable, CanColor, HasTabIndex, CanDisableRipple {\n\n  private onChange = (_: any) => {};\n  private onTouched = () => {};\n\n  private _uniqueId: string = `mat-slide-toggle-${++nextUniqueId}`;\n  private _required: boolean = false;\n  private _checked: boolean = false;\n\n  /** Reference to the focus state ripple. */\n  private _focusRipple: RippleRef | null;\n\n  /** Whether the thumb is currently being dragged. */\n  private _dragging = false;\n\n  /** Previous checked state before drag started. */\n  private _previousChecked: boolean;\n\n  /** Width of the thumb bar of the slide-toggle. */\n  private _thumbBarWidth: number;\n\n  /** Percentage of the thumb while dragging. Percentage as fraction of 100. */\n  private _dragPercentage: number;\n\n  /** Reference to the thumb HTMLElement. */\n  @ViewChild('thumbContainer') _thumbEl: ElementRef<HTMLElement>;\n\n  /** Reference to the thumb bar HTMLElement. */\n  @ViewChild('toggleBar') _thumbBarEl: ElementRef<HTMLElement>;\n\n  /** Name value will be applied to the input element if present */\n  @Input() name: string | null = null;\n\n  /** A unique id for the slide-toggle input. If none is supplied, it will be auto-generated. */\n  @Input() id: string = this._uniqueId;\n\n  /** Whether the label should appear after or before the slide-toggle. Defaults to 'after' */\n  @Input() labelPosition: 'before' | 'after' = 'after';\n\n  /** Whether the slide-toggle element is checked or not */\n\n  /** Used to set the aria-label attribute on the underlying input element. */\n  @Input('aria-label') ariaLabel: string | null = null;\n\n  /** Used to set the aria-labelledby attribute on the underlying input element. */\n  @Input('aria-labelledby') ariaLabelledby: string | null = null;\n\n  /** Whether the slide-toggle is required. */\n  @Input()\n  get required(): boolean { return this._required; }\n  set required(value) { this._required = coerceBooleanProperty(value); }\n\n  /** Whether the slide-toggle element is checked or not */\n  @Input()\n  get checked(): boolean { return this._checked; }\n  set checked(value) {\n    this._checked = coerceBooleanProperty(value);\n    this._changeDetectorRef.markForCheck();\n  }\n  /** An event will be dispatched each time the slide-toggle changes its value. */\n  @Output() readonly change: EventEmitter<MatSlideToggleChange> =\n      new EventEmitter<MatSlideToggleChange>();\n\n  /**\n   * An event will be dispatched each time the slide-toggle input is toggled.\n   * This event always fire when user toggle the slide toggle, but does not mean the slide toggle's\n   * value is changed. The event does not fire when user drag to change the slide toggle value.\n   */\n  @Output() readonly toggleChange: EventEmitter<void> = new EventEmitter<void>();\n\n  /**\n   * An event will be dispatched each time the slide-toggle is dragged.\n   * This event always fire when user drag the slide toggle to make a change that greater than 50%.\n   * It does not mean the slide toggle's value is changed. The event does not fire when user toggle\n   * the slide toggle to change the slide toggle's value.\n   */\n  @Output() readonly dragChange: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Returns the unique id for the visual hidden input. */\n  get inputId(): string { return `${this.id || this._uniqueId}-input`; }\n\n  /** Reference to the underlying input element. */\n  @ViewChild('input') _inputElement: ElementRef;\n\n  /** Reference to the ripple directive on the thumb container. */\n  @ViewChild(MatRipple) _ripple: MatRipple;\n\n  constructor(elementRef: ElementRef,\n              /**\n               * @deprecated The `_platform` parameter to be removed.\n               * @deletion-target 7.0.0\n               */\n              _platform: Platform,\n              private _focusMonitor: FocusMonitor,\n              private _changeDetectorRef: ChangeDetectorRef,\n              @Attribute('tabindex') tabIndex: string,\n              private _ngZone: NgZone,\n              @Inject(MAT_SLIDE_TOGGLE_DEFAULT_OPTIONS)\n                  public defaults: MatSlideToggleDefaultOptions,\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode?: string) {\n    super(elementRef);\n    this.tabIndex = parseInt(tabIndex) || 0;\n  }\n\n  ngAfterContentInit() {\n    this._focusMonitor\n      .monitor(this._inputElement.nativeElement)\n      .subscribe(focusOrigin => this._onInputFocusChange(focusOrigin));\n  }\n\n  ngOnDestroy() {\n    this._focusMonitor.stopMonitoring(this._inputElement.nativeElement);\n  }\n\n  /** Method being called whenever the underlying input emits a change event. */\n  _onChangeEvent(event: Event) {\n    // We always have to stop propagation on the change event.\n    // Otherwise the change event, from the input element, will bubble up and\n    // emit its event object to the component's `change` output.\n    event.stopPropagation();\n\n    if (!this._dragging) {\n      this.toggleChange.emit();\n    }\n    // Releasing the pointer over the `<label>` element while dragging triggers another\n    // click event on the `<label>` element. This means that the checked state of the underlying\n    // input changed unintentionally and needs to be changed back. Or when the slide toggle's config\n    // disabled toggle change event by setting `disableToggleValue: true`, the slide toggle's value\n    // does not change, and the checked state of the underlying input needs to be changed back.\n    if (this._dragging || this.defaults.disableToggleValue) {\n      this._inputElement.nativeElement.checked = this.checked;\n      return;\n    }\n\n    // Sync the value from the underlying input element with the component instance.\n    this.checked = this._inputElement.nativeElement.checked;\n\n    // Emit our custom change event only if the underlying input emitted one. This ensures that\n    // there is no change event, when the checked state changes programmatically.\n    this._emitChangeEvent();\n  }\n\n  /** Method being called whenever the slide-toggle has been clicked. */\n  _onInputClick(event: Event) {\n    // We have to stop propagation for click events on the visual hidden input element.\n    // By default, when a user clicks on a label element, a generated click event will be\n    // dispatched on the associated input element. Since we are using a label element as our\n    // root container, the click event on the `slide-toggle` will be executed twice.\n    // The real click event will bubble up, and the generated click event also tries to bubble up.\n    // This will lead to multiple click events.\n    // Preventing bubbling for the second event will solve that issue.\n    event.stopPropagation();\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  writeValue(value: any): void {\n    this.checked = !!value;\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  registerOnChange(fn: any): void {\n    this.onChange = fn;\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  registerOnTouched(fn: any): void {\n    this.onTouched = fn;\n  }\n\n  /** Implemented as a part of ControlValueAccessor. */\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Focuses the slide-toggle. */\n  focus(): void {\n    this._focusMonitor.focusVia(this._inputElement.nativeElement, 'keyboard');\n  }\n\n  /** Toggles the checked state of the slide-toggle. */\n  toggle(): void {\n    this.checked = !this.checked;\n    this.onChange(this.checked);\n  }\n\n  /** Function is called whenever the focus changes for the input element. */\n  private _onInputFocusChange(focusOrigin: FocusOrigin) {\n    // TODO(paul): support `program`. See https://github.com/angular/material2/issues/9889\n    if (!this._focusRipple && focusOrigin === 'keyboard') {\n      // For keyboard focus show a persistent ripple as focus indicator.\n      this._focusRipple = this._ripple.launch(0, 0, {persistent: true});\n    } else if (!focusOrigin) {\n      this.onTouched();\n\n      // Fade out and clear the focus ripple if one is currently present.\n      if (this._focusRipple) {\n        this._focusRipple.fadeOut();\n        this._focusRipple = null;\n      }\n    }\n  }\n\n  /**\n   * Emits a change event on the `change` output. Also notifies the FormControl about the change.\n   */\n  private _emitChangeEvent() {\n    this.onChange(this.checked);\n    this.change.emit(new MatSlideToggleChange(this, this.checked));\n  }\n\n  /** Retrieves the percentage of thumb from the moved distance. Percentage as fraction of 100. */\n  private _getDragPercentage(distance: number) {\n    let percentage = (distance / this._thumbBarWidth) * 100;\n\n    // When the toggle was initially checked, then we have to start the drag at the end.\n    if (this._previousChecked) {\n      percentage += 100;\n    }\n\n    return Math.max(0, Math.min(percentage, 100));\n  }\n\n  _onDragStart() {\n    if (!this.disabled && !this._dragging) {\n      const thumbEl = this._thumbEl.nativeElement;\n      this._thumbBarWidth = this._thumbBarEl.nativeElement.clientWidth - thumbEl.clientWidth;\n      thumbEl.classList.add('mat-dragging');\n\n      this._previousChecked = this.checked;\n      this._dragging = true;\n    }\n  }\n\n  _onDrag(event: HammerInput) {\n    if (this._dragging) {\n      this._dragPercentage = this._getDragPercentage(event.deltaX);\n      // Calculate the moved distance based on the thumb bar width.\n      const dragX = (this._dragPercentage / 100) * this._thumbBarWidth;\n      this._thumbEl.nativeElement.style.transform = `translate3d(${dragX}px, 0, 0)`;\n    }\n  }\n\n  _onDragEnd() {\n    if (this._dragging) {\n      const newCheckedValue = this._dragPercentage > 50;\n\n      if (newCheckedValue !== this.checked) {\n        this.dragChange.emit();\n        if (!this.defaults.disableDragValue) {\n          this.checked = newCheckedValue;\n          this._emitChangeEvent();\n        }\n      }\n\n      // The drag should be stopped outside of the current event handler, otherwise the\n      // click event will be fired before it and will revert the drag change.\n      this._ngZone.runOutsideAngular(() => setTimeout(() => {\n        if (this._dragging) {\n          this._dragging = false;\n          this._thumbEl.nativeElement.classList.remove('mat-dragging');\n\n          // Reset the transform because the component will take care\n          // of the thumb position after drag.\n          this._thumbEl.nativeElement.style.transform = '';\n        }\n      }));\n    }\n  }\n\n  /** Method being called whenever the label text changes. */\n  _onLabelTextChange() {\n    // This method is getting called whenever the label of the slide-toggle changes.\n    // Since the slide-toggle uses the OnPush strategy we need to notify it about the change\n    // that has been recognized by the cdkObserveContent directive.\n    this._changeDetectorRef.markForCheck();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ObserversModule} from '@angular/cdk/observers';\nimport {NgModule} from '@angular/core';\nimport {GestureConfig, MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {HAMMER_GESTURE_CONFIG} from '@angular/platform-browser';\nimport {MatSlideToggle} from './slide-toggle';\n\n\n@NgModule({\n  imports: [MatRippleModule, MatCommonModule, ObserversModule],\n  exports: [MatSlideToggle, MatCommonModule],\n  declarations: [MatSlideToggle],\n  providers: [\n    {provide: HAMMER_GESTURE_CONFIG, useClass: GestureConfig}\n  ],\n})\nexport class MatSlideToggleModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  Component,\n  ChangeDetectionStrategy,\n  ElementRef,\n  Inject,\n  Input,\n  Optional,\n  ViewEncapsulation\n} from '@angular/core';\nimport {Location} from '@angular/common';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\nimport {CanColor, mixinColor} from '@angular/material/core';\n\n// TODO(josephperrott): Benchpress tests.\n// TODO(josephperrott): Add ARIA attributes for progress bar \"for\".\n\n// Boilerplate for applying mixins to MatProgressBar.\n/** @docs-private */\nexport class MatProgressBarBase {\n  constructor(public _elementRef: ElementRef) { }\n}\n\nexport const _MatProgressBarMixinBase = mixinColor(MatProgressBarBase, 'primary');\n\n/** Counter used to generate unique IDs for progress bars. */\nlet progressbarId = 0;\n\n/**\n * `<mat-progress-bar>` component.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-progress-bar',\n  exportAs: 'matProgressBar',\n  host: {\n    'role': 'progressbar',\n    'aria-valuemin': '0',\n    'aria-valuemax': '100',\n    '[attr.aria-valuenow]': 'value',\n    '[attr.mode]': 'mode',\n    'class': 'mat-progress-bar',\n    '[class._mat-animation-noopable]': `_animationMode === 'NoopAnimations'`,\n  },\n  inputs: ['color'],\n  templateUrl: 'progress-bar.html',\n  styleUrls: ['progress-bar.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatProgressBar extends _MatProgressBarMixinBase implements CanColor {\n  /**\n   * Current page path. Used to prefix SVG references which\n   * won't work on Safari unless they're prefixed with the path.\n   */\n  _currentPath: string;\n\n  constructor(public _elementRef: ElementRef,\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode?: string,\n              /**\n               * @deprecated `location` parameter to be made required.\n               * @deletion-target 8.0.0\n               */\n              @Optional() location?: Location) {\n    super(_elementRef);\n    this._currentPath = location ? location.path() : '';\n  }\n\n  /** Value of the progress bar. Defaults to zero. Mirrored to aria-valuenow. */\n  @Input()\n  get value(): number { return this._value; }\n  set value(v: number) { this._value = clamp(v || 0); }\n  private _value: number = 0;\n\n  /** Buffer value of the progress bar. Defaults to zero. */\n  @Input()\n  get bufferValue(): number { return this._bufferValue; }\n  set bufferValue(v: number) { this._bufferValue = clamp(v || 0); }\n  private _bufferValue: number = 0;\n\n  /**\n   * Mode of the progress bar.\n   *\n   * Input must be one of these values: determinate, indeterminate, buffer, query, defaults to\n   * 'determinate'.\n   * Mirrored to mode attribute.\n   */\n  @Input() mode: 'determinate' | 'indeterminate' | 'buffer' | 'query' = 'determinate';\n\n  /** The id of the progress bar. */\n  progressbarId = `mat-progress-bar-${progressbarId++}`;\n\n  /** Gets the current transform value for the progress bar's primary indicator. */\n  _primaryTransform() {\n    const scale = this.value / 100;\n    return {transform: `scaleX(${scale})`};\n  }\n\n  /**\n   * Gets the current transform value for the progress bar's buffer indicator. Only used if the\n   * progress mode is set to buffer, otherwise returns an undefined, causing no transformation.\n   */\n  _bufferTransform() {\n    if (this.mode === 'buffer') {\n      const scale = this.bufferValue / 100;\n      return {transform: `scaleX(${scale})`};\n    }\n  }\n}\n\n/** Clamps a value to be between two numbers, by default 0 and 100. */\nfunction clamp(v: number, min = 0, max = 100) {\n  return Math.max(min, Math.min(max, v));\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatProgressBar} from './progress-bar';\n\n\n@NgModule({\n  imports: [CommonModule, MatCommonModule],\n  exports: [MatProgressBar, MatCommonModule],\n  declarations: [MatProgressBar],\n})\nexport class MatProgressBarModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ChangeDetectionStrategy,\n  Inject,\n  Input,\n  ElementRef,\n  ViewEncapsulation,\n  Optional,\n  InjectionToken,\n} from '@angular/core';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\nimport {CanColor, mixinColor} from '@angular/material/core';\nimport {Platform} from '@angular/cdk/platform';\nimport {DOCUMENT} from '@angular/common';\nimport {coerceNumberProperty} from '@angular/cdk/coercion';\n\n/** Possible mode for a progress spinner. */\nexport type ProgressSpinnerMode = 'determinate' | 'indeterminate';\n\n/**\n * Base reference size of the spinner.\n * @docs-private\n */\nconst BASE_SIZE = 100;\n\n/**\n * Base reference stroke width of the spinner.\n * @docs-private\n */\nconst BASE_STROKE_WIDTH = 10;\n\n// Boilerplate for applying mixins to MatProgressSpinner.\n/** @docs-private */\nexport class MatProgressSpinnerBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatProgressSpinnerMixinBase = mixinColor(MatProgressSpinnerBase, 'primary');\n\n/** Default `mat-progress-spinner` options that can be overridden. */\nexport interface MatProgressSpinnerDefaultOptions {\n  /** Diameter of the spinner. */\n  diameter?: number;\n  /** Width of the spinner's stroke. */\n  strokeWidth?: number;\n  /**\n   * Whether the animations should be force to be enabled, ignoring if the current environment is\n   * using NoopAnimationsModule.\n   */\n  _forceAnimations?: boolean;\n}\n\n/** Injection token to be used to override the default options for `mat-progress-spinner`. */\nexport const MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS =\n    new InjectionToken<MatProgressSpinnerDefaultOptions>('mat-progress-spinner-default-options', {\n      providedIn: 'root',\n      factory: MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS_FACTORY,\n    });\n\n/** @docs-private */\nexport function MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS_FACTORY(): MatProgressSpinnerDefaultOptions {\n  return {diameter: BASE_SIZE};\n}\n\n// .0001 percentage difference is necessary in order to avoid unwanted animation frames\n// for example because the animation duration is 4 seconds, .1% accounts to 4ms\n// which are enough to see the flicker described in\n// https://github.com/angular/material2/issues/8984\nconst INDETERMINATE_ANIMATION_TEMPLATE = `\n @keyframes mat-progress-spinner-stroke-rotate-DIAMETER {\n    0%      { stroke-dashoffset: START_VALUE;  transform: rotate(0); }\n    12.5%   { stroke-dashoffset: END_VALUE;    transform: rotate(0); }\n    12.5001%  { stroke-dashoffset: END_VALUE;    transform: rotateX(180deg) rotate(72.5deg); }\n    25%     { stroke-dashoffset: START_VALUE;  transform: rotateX(180deg) rotate(72.5deg); }\n\n    25.0001%   { stroke-dashoffset: START_VALUE;  transform: rotate(270deg); }\n    37.5%   { stroke-dashoffset: END_VALUE;    transform: rotate(270deg); }\n    37.5001%  { stroke-dashoffset: END_VALUE;    transform: rotateX(180deg) rotate(161.5deg); }\n    50%     { stroke-dashoffset: START_VALUE;  transform: rotateX(180deg) rotate(161.5deg); }\n\n    50.0001%  { stroke-dashoffset: START_VALUE;  transform: rotate(180deg); }\n    62.5%   { stroke-dashoffset: END_VALUE;    transform: rotate(180deg); }\n    62.5001%  { stroke-dashoffset: END_VALUE;    transform: rotateX(180deg) rotate(251.5deg); }\n    75%     { stroke-dashoffset: START_VALUE;  transform: rotateX(180deg) rotate(251.5deg); }\n\n    75.0001%  { stroke-dashoffset: START_VALUE;  transform: rotate(90deg); }\n    87.5%   { stroke-dashoffset: END_VALUE;    transform: rotate(90deg); }\n    87.5001%  { stroke-dashoffset: END_VALUE;    transform: rotateX(180deg) rotate(341.5deg); }\n    100%    { stroke-dashoffset: START_VALUE;  transform: rotateX(180deg) rotate(341.5deg); }\n  }\n`;\n\n/**\n * `<mat-progress-spinner>` component.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-progress-spinner',\n  exportAs: 'matProgressSpinner',\n  host: {\n    'role': 'progressbar',\n    'class': 'mat-progress-spinner',\n    '[class._mat-animation-noopable]': `_noopAnimations`,\n    '[style.width.px]': 'diameter',\n    '[style.height.px]': 'diameter',\n    '[attr.aria-valuemin]': 'mode === \"determinate\" ? 0 : null',\n    '[attr.aria-valuemax]': 'mode === \"determinate\" ? 100 : null',\n    '[attr.aria-valuenow]': 'value',\n    '[attr.mode]': 'mode',\n  },\n  inputs: ['color'],\n  templateUrl: 'progress-spinner.html',\n  styleUrls: ['progress-spinner.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatProgressSpinner extends _MatProgressSpinnerMixinBase implements CanColor {\n\n  private _value = 0;\n  private _strokeWidth: number;\n  private _fallbackAnimation = false;\n\n  /** Tracks diameters of existing instances to de-dupe generated styles (default d = 100) */\n  private static diameters = new Set<number>([BASE_SIZE]);\n\n  /**\n   * Used for storing all of the generated keyframe animations.\n   * @dynamic\n   */\n  private static styleTag: HTMLStyleElement|null = null;\n\n  /** Whether the _mat-animation-noopable class should be applied, disabling animations.  */\n  _noopAnimations: boolean = this.animationMode === 'NoopAnimations' && (\n      !!this.defaults && !this.defaults._forceAnimations);\n\n  /** The diameter of the progress spinner (will set width and height of svg). */\n  @Input()\n  get diameter(): number { return this._diameter; }\n  set diameter(size: number) {\n    this._diameter = coerceNumberProperty(size);\n\n    if (!this._fallbackAnimation && !MatProgressSpinner.diameters.has(this._diameter)) {\n      this._attachStyleNode();\n    }\n  }\n  private _diameter = BASE_SIZE;\n\n  /** Stroke width of the progress spinner. */\n  @Input()\n  get strokeWidth(): number {\n    return this._strokeWidth || this.diameter / 10;\n  }\n  set strokeWidth(value: number) {\n    this._strokeWidth = coerceNumberProperty(value);\n  }\n\n  /** Mode of the progress circle */\n  @Input() mode: ProgressSpinnerMode = 'determinate';\n\n  /** Value of the progress circle. */\n  @Input()\n  get value(): number {\n    return this.mode === 'determinate' ? this._value : 0;\n  }\n  set value(newValue: number) {\n    this._value = Math.max(0, Math.min(100, coerceNumberProperty(newValue)));\n  }\n\n  constructor(public _elementRef: ElementRef,\n              platform: Platform,\n              @Optional() @Inject(DOCUMENT) private _document: any,\n              // @deletion-target 7.0.0 animationMode and defaults parameters to be made required.\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) private animationMode?: string,\n              @Inject(MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS)\n                  private defaults?: MatProgressSpinnerDefaultOptions) {\n\n    super(_elementRef);\n    this._fallbackAnimation = platform.EDGE || platform.TRIDENT;\n\n    if (defaults) {\n      if (defaults.diameter) {\n        this.diameter = defaults.diameter;\n      }\n\n      if (defaults.strokeWidth) {\n        this.strokeWidth = defaults.strokeWidth;\n      }\n    }\n\n    // On IE and Edge, we can't animate the `stroke-dashoffset`\n    // reliably so we fall back to a non-spec animation.\n    const animationClass =\n      `mat-progress-spinner-indeterminate${this._fallbackAnimation ? '-fallback' : ''}-animation`;\n\n    _elementRef.nativeElement.classList.add(animationClass);\n  }\n\n  /** The radius of the spinner, adjusted for stroke width. */\n  get _circleRadius() {\n    return (this.diameter - BASE_STROKE_WIDTH) / 2;\n  }\n\n  /** The view box of the spinner's svg element. */\n  get _viewBox() {\n    const viewBox = this._circleRadius * 2 + this.strokeWidth;\n    return `0 0 ${viewBox} ${viewBox}`;\n  }\n\n  /** The stroke circumference of the svg circle. */\n  get _strokeCircumference(): number {\n    return 2 * Math.PI * this._circleRadius;\n  }\n\n  /** The dash offset of the svg circle. */\n  get _strokeDashOffset() {\n    if (this.mode === 'determinate') {\n      return this._strokeCircumference * (100 - this._value) / 100;\n    }\n\n    // In fallback mode set the circle to 80% and rotate it with CSS.\n    if (this._fallbackAnimation && this.mode === 'indeterminate') {\n      return this._strokeCircumference * 0.2;\n    }\n\n    return null;\n  }\n\n  /** Stroke width of the circle in percent. */\n  get _circleStrokeWidth() {\n    return this.strokeWidth / this.diameter * 100;\n  }\n\n  /** Dynamically generates a style tag containing the correct animation for this diameter. */\n  private _attachStyleNode(): void {\n    let styleTag = MatProgressSpinner.styleTag;\n\n    if (!styleTag) {\n      styleTag = this._document.createElement('style');\n      this._document.head.appendChild(styleTag);\n      MatProgressSpinner.styleTag = styleTag;\n    }\n\n    if (styleTag && styleTag.sheet) {\n      (styleTag.sheet as CSSStyleSheet).insertRule(this._getAnimationText(), 0);\n    }\n\n    MatProgressSpinner.diameters.add(this.diameter);\n  }\n\n  /** Generates animation styles adjusted for the spinner's diameter. */\n  private _getAnimationText(): string {\n    return INDETERMINATE_ANIMATION_TEMPLATE\n        // Animation should begin at 5% and end at 80%\n        .replace(/START_VALUE/g, `${0.95 * this._strokeCircumference}`)\n        .replace(/END_VALUE/g, `${0.2 * this._strokeCircumference}`)\n        .replace(/DIAMETER/g, `${this.diameter}`);\n  }\n}\n\n\n/**\n * `<mat-spinner>` component.\n *\n * This is a component definition to be used as a convenience reference to create an\n * indeterminate `<mat-progress-spinner>` instance.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-spinner',\n  host: {\n    'role': 'progressbar',\n    'mode': 'indeterminate',\n    'class': 'mat-spinner mat-progress-spinner',\n    '[class._mat-animation-noopable]': `_noopAnimations`,\n    '[style.width.px]': 'diameter',\n    '[style.height.px]': 'diameter',\n  },\n  inputs: ['color'],\n  templateUrl: 'progress-spinner.html',\n  styleUrls: ['progress-spinner.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatSpinner extends MatProgressSpinner {\n  constructor(elementRef: ElementRef, platform: Platform,\n              @Optional() @Inject(DOCUMENT) document: any,\n              // @deletion-targets 7.0.0 animationMode and defaults parameters to be made required.\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) animationMode?: string,\n              @Inject(MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS)\n                  defaults?: MatProgressSpinnerDefaultOptions) {\n    super(elementRef, platform, document, animationMode, defaults);\n    this.mode = 'indeterminate';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatProgressSpinner, MatSpinner} from './progress-spinner';\n\n\n@NgModule({\n  imports: [MatCommonModule, CommonModule],\n  exports: [\n    MatProgressSpinner,\n    MatSpinner,\n    MatCommonModule\n  ],\n  declarations: [\n    MatProgressSpinner,\n    MatSpinner\n  ],\n})\nclass MatProgressSpinnerModule {}\n\nexport {MatProgressSpinnerModule};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor, FocusOrigin} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {UniqueSelectionDispatcher} from '@angular/cdk/collections';\nimport {\n  AfterContentInit,\n  AfterViewInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Input,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Output,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n  Inject,\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {\n  CanColor,\n  CanDisable,\n  CanDisableRipple,\n  HasTabIndex,\n  MatRipple,\n  mixinColor,\n  mixinDisabled,\n  mixinDisableRipple,\n  mixinTabIndex,\n  RippleRef,\n} from '@angular/material/core';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\n\n\n// Increasing integer for generating unique ids for radio components.\nlet nextUniqueId = 0;\n\n/**\n * Provider Expression that allows mat-radio-group to register as a ControlValueAccessor. This\n * allows it to support [(ngModel)] and ngControl.\n * @docs-private\n */\nexport const MAT_RADIO_GROUP_CONTROL_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatRadioGroup),\n  multi: true\n};\n\n/** Change event object emitted by MatRadio and MatRadioGroup. */\nexport class MatRadioChange {\n  constructor(\n    /** The MatRadioButton that emits the change event. */\n    public source: MatRadioButton,\n    /** The value of the MatRadioButton. */\n    public value: any) {}\n}\n\n\n// Boilerplate for applying mixins to MatRadioGroup.\n/** @docs-private */\nexport class MatRadioGroupBase { }\nexport const _MatRadioGroupMixinBase = mixinDisabled(MatRadioGroupBase);\n\n/**\n * A group of radio buttons. May contain one or more `<mat-radio-button>` elements.\n */\n@Directive({\n  selector: 'mat-radio-group',\n  exportAs: 'matRadioGroup',\n  providers: [MAT_RADIO_GROUP_CONTROL_VALUE_ACCESSOR],\n  host: {\n    'role': 'radiogroup',\n    'class': 'mat-radio-group',\n  },\n  inputs: ['disabled'],\n})\nexport class MatRadioGroup extends _MatRadioGroupMixinBase\n    implements AfterContentInit, ControlValueAccessor, CanDisable {\n\n  /** Selected value for the radio group. */\n  private _value: any = null;\n\n  /** The HTML name attribute applied to radio buttons in this group. */\n  private _name: string = `mat-radio-group-${nextUniqueId++}`;\n\n  /** The currently selected radio button. Should match value. */\n  private _selected: MatRadioButton | null = null;\n\n  /** Whether the `value` has been set to its initial value. */\n  private _isInitialized: boolean = false;\n\n  /** Whether the labels should appear after or before the radio-buttons. Defaults to 'after' */\n  private _labelPosition: 'before' | 'after' = 'after';\n\n  /** Whether the radio group is disabled. */\n  private _disabled: boolean = false;\n\n  /** Whether the radio group is required. */\n  private _required: boolean = false;\n\n  /** The method to be called in order to update ngModel */\n  _controlValueAccessorChangeFn: (value: any) => void = () => {};\n\n  /**\n   * onTouch function registered via registerOnTouch (ControlValueAccessor).\n   * @docs-private\n   */\n  onTouched: () => any = () => {};\n\n  /**\n   * Event emitted when the group value changes.\n   * Change events are only emitted when the value changes due to user interaction with\n   * a radio button (the same behavior as `<input type-\"radio\">`).\n   */\n  @Output() readonly change: EventEmitter<MatRadioChange> = new EventEmitter<MatRadioChange>();\n\n  /** Child radio buttons. */\n  @ContentChildren(forwardRef(() => MatRadioButton), { descendants: true })\n  _radios: QueryList<MatRadioButton>;\n\n  /** Name of the radio button group. All radio buttons inside this group will use this name. */\n  @Input()\n  get name(): string { return this._name; }\n  set name(value: string) {\n    this._name = value;\n    this._updateRadioButtonNames();\n  }\n\n  /** Whether the labels should appear after or before the radio-buttons. Defaults to 'after' */\n  @Input()\n  get labelPosition(): 'before' | 'after' {\n    return this._labelPosition;\n  }\n  set labelPosition(v) {\n    this._labelPosition = v === 'before' ? 'before' : 'after';\n    this._markRadiosForCheck();\n  }\n\n  /**\n   * Value for the radio-group. Should equal the value of the selected radio button if there is\n   * a corresponding radio button with a matching value. If there is not such a corresponding\n   * radio button, this value persists to be applied in case a new radio button is added with a\n   * matching value.\n   */\n  @Input()\n  get value(): any { return this._value; }\n  set value(newValue: any) {\n    if (this._value !== newValue) {\n      // Set this before proceeding to ensure no circular loop occurs with selection.\n      this._value = newValue;\n\n      this._updateSelectedRadioFromValue();\n      this._checkSelectedRadioButton();\n    }\n  }\n\n  _checkSelectedRadioButton() {\n    if (this._selected && !this._selected.checked) {\n      this._selected.checked = true;\n    }\n  }\n\n  /**\n   * The currently selected radio button. If set to a new radio button, the radio group value\n   * will be updated to match the new selected button.\n   */\n  @Input()\n  get selected() { return this._selected; }\n  set selected(selected: MatRadioButton | null) {\n    this._selected = selected;\n    this.value = selected ? selected.value : null;\n    this._checkSelectedRadioButton();\n  }\n\n  /** Whether the radio group is disabled */\n  @Input()\n  get disabled(): boolean { return this._disabled; }\n  set disabled(value) {\n    this._disabled = coerceBooleanProperty(value);\n    this._markRadiosForCheck();\n  }\n\n  /** Whether the radio group is required */\n  @Input()\n  get required(): boolean { return this._required; }\n  set required(value: boolean) {\n    this._required = coerceBooleanProperty(value);\n    this._markRadiosForCheck();\n  }\n\n  constructor(private _changeDetector: ChangeDetectorRef) {\n    super();\n  }\n\n  /**\n   * Initialize properties once content children are available.\n   * This allows us to propagate relevant attributes to associated buttons.\n   */\n  ngAfterContentInit() {\n    // Mark this component as initialized in AfterContentInit because the initial value can\n    // possibly be set by NgModel on MatRadioGroup, and it is possible that the OnInit of the\n    // NgModel occurs *after* the OnInit of the MatRadioGroup.\n    this._isInitialized = true;\n  }\n\n  /**\n   * Mark this group as being \"touched\" (for ngModel). Meant to be called by the contained\n   * radio buttons upon their blur.\n   */\n  _touch() {\n    if (this.onTouched) {\n      this.onTouched();\n    }\n  }\n\n  private _updateRadioButtonNames(): void {\n    if (this._radios) {\n      this._radios.forEach(radio => {\n        radio.name = this.name;\n      });\n    }\n  }\n\n  /** Updates the `selected` radio button from the internal _value state. */\n  private _updateSelectedRadioFromValue(): void {\n    // If the value already matches the selected radio, do nothing.\n    const isAlreadySelected = this._selected !== null && this._selected.value === this._value;\n\n    if (this._radios && !isAlreadySelected) {\n      this._selected = null;\n      this._radios.forEach(radio => {\n        radio.checked = this.value === radio.value;\n        if (radio.checked) {\n          this._selected = radio;\n        }\n      });\n    }\n  }\n\n  /** Dispatch change event with current selection and group value. */\n  _emitChangeEvent(): void {\n    if (this._isInitialized) {\n      this.change.emit(new MatRadioChange(this._selected!, this._value));\n    }\n  }\n\n  _markRadiosForCheck() {\n    if (this._radios) {\n      this._radios.forEach(radio => radio._markForCheck());\n    }\n  }\n\n  /**\n   * Sets the model value. Implemented as part of ControlValueAccessor.\n   * @param value\n   */\n  writeValue(value: any) {\n    this.value = value;\n    this._changeDetector.markForCheck();\n  }\n\n  /**\n   * Registers a callback to be triggered when the model value changes.\n   * Implemented as part of ControlValueAccessor.\n   * @param fn Callback to be registered.\n   */\n  registerOnChange(fn: (value: any) => void) {\n    this._controlValueAccessorChangeFn = fn;\n  }\n\n  /**\n   * Registers a callback to be triggered when the control is touched.\n   * Implemented as part of ControlValueAccessor.\n   * @param fn Callback to be registered.\n   */\n  registerOnTouched(fn: any) {\n    this.onTouched = fn;\n  }\n\n  /**\n   * Sets the disabled state of the control. Implemented as a part of ControlValueAccessor.\n   * @param isDisabled Whether the control should be disabled.\n   */\n  setDisabledState(isDisabled: boolean) {\n    this.disabled = isDisabled;\n    this._changeDetector.markForCheck();\n  }\n}\n\n// Boilerplate for applying mixins to MatRadioButton.\n/** @docs-private */\nexport class MatRadioButtonBase {\n  // Since the disabled property is manually defined for the MatRadioButton and isn't set up in\n  // the mixin base class. To be able to use the tabindex mixin, a disabled property must be\n  // defined to properly work.\n  disabled: boolean;\n\n  constructor(public _elementRef: ElementRef) {}\n}\n// As per Material design specifications the selection control radio should use the accent color\n// palette by default. https://material.io/guidelines/components/selection-controls.html\nexport const _MatRadioButtonMixinBase =\n    mixinColor(mixinDisableRipple(mixinTabIndex(MatRadioButtonBase)), 'accent');\n\n/**\n * A Material design radio-button. Typically placed inside of `<mat-radio-group>` elements.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-radio-button',\n  templateUrl: 'radio.html',\n  styleUrls: ['radio.css'],\n  inputs: ['color', 'disableRipple', 'tabIndex'],\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matRadioButton',\n  host: {\n    'class': 'mat-radio-button',\n    '[class.mat-radio-checked]': 'checked',\n    '[class.mat-radio-disabled]': 'disabled',\n    '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"',\n    '[attr.id]': 'id',\n    // Note: under normal conditions focus shouldn't land on this element, however it may be\n    // programmatically set, for example inside of a focus trap, in this case we want to forward\n    // the focus to the native element.\n    '(focus)': '_inputElement.nativeElement.focus()',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatRadioButton extends _MatRadioButtonMixinBase\n    implements OnInit, AfterViewInit, OnDestroy, CanColor, CanDisableRipple, HasTabIndex {\n\n  private _uniqueId: string = `mat-radio-${++nextUniqueId}`;\n\n  /** The unique ID for the radio button. */\n  @Input() id: string = this._uniqueId;\n\n  /** Analog to HTML 'name' attribute used to group radios for unique selection. */\n  @Input() name: string;\n\n  /** Used to set the 'aria-label' attribute on the underlying input element. */\n  @Input('aria-label') ariaLabel: string;\n\n  /** The 'aria-labelledby' attribute takes precedence as the element's text alternative. */\n  @Input('aria-labelledby') ariaLabelledby: string;\n\n  /** The 'aria-describedby' attribute is read after the element's label and field type. */\n  @Input('aria-describedby') ariaDescribedby: string;\n\n  /** Whether this radio button is checked. */\n  @Input()\n  get checked(): boolean { return this._checked; }\n  set checked(value: boolean) {\n    const newCheckedState = coerceBooleanProperty(value);\n    if (this._checked !== newCheckedState) {\n      this._checked = newCheckedState;\n      if (newCheckedState && this.radioGroup && this.radioGroup.value !== this.value) {\n        this.radioGroup.selected = this;\n      } else if (!newCheckedState && this.radioGroup && this.radioGroup.value === this.value) {\n\n        // When unchecking the selected radio button, update the selected radio\n        // property on the group.\n        this.radioGroup.selected = null;\n      }\n\n      if (newCheckedState) {\n        // Notify all radio buttons with the same name to un-check.\n        this._radioDispatcher.notify(this.id, this.name);\n      }\n      this._changeDetector.markForCheck();\n    }\n  }\n\n  /** The value of this radio button. */\n  @Input()\n  get value(): any { return this._value; }\n  set value(value: any) {\n    if (this._value !== value) {\n      this._value = value;\n      if (this.radioGroup !== null) {\n        if (!this.checked) {\n          // Update checked when the value changed to match the radio group's value\n          this.checked = this.radioGroup.value === value;\n        }\n        if (this.checked) {\n          this.radioGroup.selected = this;\n        }\n      }\n    }\n  }\n\n  /** Whether the label should appear after or before the radio button. Defaults to 'after' */\n  @Input()\n  get labelPosition(): 'before' | 'after' {\n    return this._labelPosition || (this.radioGroup && this.radioGroup.labelPosition) || 'after';\n  }\n  set labelPosition(value) {\n    this._labelPosition = value;\n  }\n  private _labelPosition: 'before' | 'after';\n\n  /** Whether the radio button is disabled. */\n  @Input()\n  get disabled(): boolean {\n    return this._disabled || (this.radioGroup !== null && this.radioGroup.disabled);\n  }\n  set disabled(value: boolean) {\n    const newDisabledState = coerceBooleanProperty(value);\n    if (this._disabled !== newDisabledState) {\n      this._disabled = newDisabledState;\n      this._changeDetector.markForCheck();\n    }\n  }\n\n  /** Whether the radio button is required. */\n  @Input()\n  get required(): boolean {\n    return this._required || (this.radioGroup && this.radioGroup.required);\n  }\n  set required(value: boolean) {\n    this._required = coerceBooleanProperty(value);\n  }\n\n  /**\n   * Event emitted when the checked state of this radio button changes.\n   * Change events are only emitted when the value changes due to user interaction with\n   * the radio button (the same behavior as `<input type-\"radio\">`).\n   */\n  @Output() readonly change: EventEmitter<MatRadioChange> = new EventEmitter<MatRadioChange>();\n\n  /** The parent radio group. May or may not be present. */\n  radioGroup: MatRadioGroup;\n\n  /** ID of the native input element inside `<mat-radio-button>` */\n  get inputId(): string { return `${this.id || this._uniqueId}-input`; }\n\n  /** Whether this radio is checked. */\n  private _checked: boolean = false;\n\n  /** Whether this radio is disabled. */\n  private _disabled: boolean;\n\n  /** Whether this radio is required. */\n  private _required: boolean;\n\n  /** Value assigned to this radio. */\n  private _value: any = null;\n\n  /** The child ripple instance. */\n  @ViewChild(MatRipple) _ripple: MatRipple;\n\n  /** Reference to the current focus ripple. */\n  private _focusRipple: RippleRef | null;\n\n  /** Unregister function for _radioDispatcher */\n  private _removeUniqueSelectionListener: () => void = () => {};\n\n  /** The native `<input type=radio>` element */\n  @ViewChild('input') _inputElement: ElementRef;\n\n  constructor(@Optional() radioGroup: MatRadioGroup,\n              elementRef: ElementRef,\n              private _changeDetector: ChangeDetectorRef,\n              private _focusMonitor: FocusMonitor,\n              private _radioDispatcher: UniqueSelectionDispatcher,\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode?: string) {\n    super(elementRef);\n\n    // Assertions. Ideally these should be stripped out by the compiler.\n    // TODO(jelbourn): Assert that there's no name binding AND a parent radio group.\n    this.radioGroup = radioGroup;\n\n    this._removeUniqueSelectionListener =\n      _radioDispatcher.listen((id: string, name: string) => {\n        if (id !== this.id && name === this.name) {\n          this.checked = false;\n        }\n      });\n  }\n\n  /** Focuses the radio button. */\n  focus(): void {\n    this._focusMonitor.focusVia(this._inputElement.nativeElement, 'keyboard');\n  }\n\n  /**\n   * Marks the radio button as needing checking for change detection.\n   * This method is exposed because the parent radio group will directly\n   * update bound properties of the radio button.\n   */\n  _markForCheck() {\n    // When group value changes, the button will not be notified. Use `markForCheck` to explicit\n    // update radio button's status\n    this._changeDetector.markForCheck();\n  }\n\n  ngOnInit() {\n    if (this.radioGroup) {\n      // If the radio is inside a radio group, determine if it should be checked\n      this.checked = this.radioGroup.value === this._value;\n      // Copy name from parent radio group\n      this.name = this.radioGroup.name;\n    }\n  }\n\n  ngAfterViewInit() {\n    this._focusMonitor\n      .monitor(this._inputElement.nativeElement)\n      .subscribe(focusOrigin => this._onInputFocusChange(focusOrigin));\n  }\n\n  ngOnDestroy() {\n    this._focusMonitor.stopMonitoring(this._inputElement.nativeElement);\n    this._removeUniqueSelectionListener();\n  }\n\n  /** Dispatch change event with current value. */\n  private _emitChangeEvent(): void {\n    this.change.emit(new MatRadioChange(this, this._value));\n  }\n\n  _isRippleDisabled() {\n    return this.disableRipple || this.disabled;\n  }\n\n  _onInputClick(event: Event) {\n    // We have to stop propagation for click events on the visual hidden input element.\n    // By default, when a user clicks on a label element, a generated click event will be\n    // dispatched on the associated input element. Since we are using a label element as our\n    // root container, the click event on the `radio-button` will be executed twice.\n    // The real click event will bubble up, and the generated click event also tries to bubble up.\n    // This will lead to multiple click events.\n    // Preventing bubbling for the second event will solve that issue.\n    event.stopPropagation();\n  }\n\n  /**\n   * Triggered when the radio button received a click or the input recognized any change.\n   * Clicking on a label element, will trigger a change event on the associated input.\n   */\n  _onInputChange(event: Event) {\n    // We always have to stop propagation on the change event.\n    // Otherwise the change event, from the input element, will bubble up and\n    // emit its event object to the `change` output.\n    event.stopPropagation();\n\n    const groupValueChanged = this.radioGroup && this.value !== this.radioGroup.value;\n    this.checked = true;\n    this._emitChangeEvent();\n\n    if (this.radioGroup) {\n      this.radioGroup._controlValueAccessorChangeFn(this.value);\n      this.radioGroup._touch();\n      if (groupValueChanged) {\n        this.radioGroup._emitChangeEvent();\n      }\n    }\n  }\n\n  /** Function is called whenever the focus changes for the input element. */\n  private _onInputFocusChange(focusOrigin: FocusOrigin) {\n    // TODO(paul): support `program`. See https://github.com/angular/material2/issues/9889\n    if (!this._focusRipple && focusOrigin === 'keyboard') {\n      this._focusRipple = this._ripple.launch(0, 0, {persistent: true});\n    } else if (!focusOrigin) {\n      if (this.radioGroup) {\n        this.radioGroup._touch();\n      }\n\n      if (this._focusRipple) {\n        this._focusRipple.fadeOut();\n        this._focusRipple = null;\n      }\n    }\n  }\n\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {MatRadioButton, MatRadioGroup} from './radio';\n\n\n@NgModule({\n  imports: [CommonModule, MatRippleModule, MatCommonModule],\n  exports: [MatRadioGroup, MatRadioButton, MatCommonModule],\n  declarations: [MatRadioGroup, MatRadioButton],\n})\nexport class MatRadioModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/** Animations used by the Material drawers. */\nexport const matDrawerAnimations: {\n  readonly transformDrawer: AnimationTriggerMetadata;\n} = {\n  /** Animation that slides a drawer in and out. */\n  transformDrawer: trigger('transform', [\n    state('open, open-instant', style({\n      'transform': 'translate3d(0, 0, 0)',\n      'visibility': 'visible',\n    })),\n    state('void', style({\n      // Avoids the shadow showing up when closed in SSR.\n      'box-shadow': 'none',\n      'visibility': 'hidden',\n    })),\n    transition('void => open-instant', animate('0ms')),\n    transition('void <=> open, open-instant => void',\n        animate('400ms cubic-bezier(0.25, 0.8, 0.25, 1)'))\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatOptionModule} from '@angular/material/core';\nimport {MatFormFieldModule} from '@angular/material/form-field';\nimport {MAT_SELECT_SCROLL_STRATEGY_PROVIDER, MatSelect, MatSelectTrigger} from './select';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    OverlayModule,\n    MatOptionModule,\n    MatCommonModule,\n  ],\n  exports: [MatFormFieldModule, MatSelect, MatSelectTrigger, MatOptionModule, MatCommonModule],\n  declarations: [MatSelect, MatSelectTrigger],\n  providers: [MAT_SELECT_SCROLL_STRATEGY_PROVIDER]\n})\nexport class MatSelectModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/** Animations used by MatTooltip. */\nexport const matTooltipAnimations: {\n  readonly tooltipState: AnimationTriggerMetadata;\n} = {\n  /** Animation that transitions a tooltip in and out. */\n  tooltipState: trigger('state', [\n    state('initial, void, hidden', style({transform: 'scale(0)'})),\n    state('visible', style({transform: 'scale(1)'})),\n    transition('* => visible', animate('150ms cubic-bezier(0.0, 0.0, 0.2, 1)')),\n    transition('* => hidden', animate('150ms cubic-bezier(0.4, 0.0, 1, 1)')),\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {A11yModule} from '@angular/cdk/a11y';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {\n  MatTooltip,\n  TooltipComponent,\n  MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY_PROVIDER,\n} from './tooltip';\n\n@NgModule({\n  imports: [\n    A11yModule,\n    CommonModule,\n    OverlayModule,\n    MatCommonModule,\n  ],\n  exports: [MatTooltip, TooltipComponent, MatCommonModule],\n  declarations: [MatTooltip, TooltipComponent],\n  entryComponents: [TooltipComponent],\n  providers: [MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY_PROVIDER]\n})\nexport class MatTooltipModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable, Optional, SkipSelf} from '@angular/core';\nimport {Subject} from 'rxjs';\n\n\n/**\n * To modify the labels and text displayed, create a new instance of MatPaginatorIntl and\n * include it in a custom provider\n */\n@Injectable({providedIn: 'root'})\nexport class MatPaginatorIntl {\n  /**\n   * Stream that emits whenever the labels here are changed. Use this to notify\n   * components if the labels have changed after initialization.\n   */\n  readonly changes: Subject<void> = new Subject<void>();\n\n  /** A label for the page size selector. */\n  itemsPerPageLabel: string = 'Items per page:';\n\n  /** A label for the button that increments the current page. */\n  nextPageLabel: string = 'Next page';\n\n  /** A label for the button that decrements the current page. */\n  previousPageLabel: string = 'Previous page';\n\n  /** A label for the button that moves to the first page. */\n  firstPageLabel: string = 'First page';\n\n  /** A label for the button that moves to the last page. */\n  lastPageLabel: string = 'Last page';\n\n  /** A label for the range of items within the current page and the length of the whole list. */\n  getRangeLabel = (page: number, pageSize: number, length: number) => {\n    if (length == 0 || pageSize == 0) { return `0 of ${length}`; }\n\n    length = Math.max(length, 0);\n\n    const startIndex = page * pageSize;\n\n    // If the start index exceeds the list length, do not try and fix the end index to the end.\n    const endIndex = startIndex < length ?\n        Math.min(startIndex + pageSize, length) :\n        startIndex + pageSize;\n\n    return `${startIndex + 1} - ${endIndex} of ${length}`;\n  }\n}\n\n/** @docs-private */\nexport function MAT_PAGINATOR_INTL_PROVIDER_FACTORY(parentIntl: MatPaginatorIntl) {\n  return parentIntl || new MatPaginatorIntl();\n}\n\n/** @docs-private */\nexport const MAT_PAGINATOR_INTL_PROVIDER = {\n  // If there is already an MatPaginatorIntl available, use that. Otherwise, provide a new one.\n  provide: MatPaginatorIntl,\n  deps: [[new Optional(), new SkipSelf(), MatPaginatorIntl]],\n  useFactory: MAT_PAGINATOR_INTL_PROVIDER_FACTORY\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceNumberProperty, coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  OnInit,\n  Output,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {Subscription} from 'rxjs';\nimport {MatPaginatorIntl} from './paginator-intl';\nimport {HasInitialized, mixinInitialized} from '@angular/material/core';\n\n/** The default page size if there is no page size and there are no provided page size options. */\nconst DEFAULT_PAGE_SIZE = 50;\n\n/**\n * Change event object that is emitted when the user selects a\n * different page size or navigates to another page.\n */\nexport class PageEvent {\n  /** The current page index. */\n  pageIndex: number;\n\n  /**\n   * Index of the page that was selected previously.\n   * @deletion-target 7.0.0 To be made into a required property.\n   */\n  previousPageIndex?: number;\n\n  /** The current page size */\n  pageSize: number;\n\n  /** The current total number of items being paged */\n  length: number;\n}\n\n// Boilerplate for applying mixins to MatPaginator.\n/** @docs-private */\nexport class MatPaginatorBase {}\nexport const _MatPaginatorBase = mixinInitialized(MatPaginatorBase);\n\n/**\n * Component to provide navigation between paged information. Displays the size of the current\n * page, user-selectable options to change that size, what items are being shown, and\n * navigational button to go to the previous or next page.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-paginator',\n  exportAs: 'matPaginator',\n  templateUrl: 'paginator.html',\n  styleUrls: ['paginator.css'],\n  host: {\n    'class': 'mat-paginator',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatPaginator extends _MatPaginatorBase implements OnInit, OnDestroy, HasInitialized {\n  private _initialized: boolean;\n  private _intlChanges: Subscription;\n\n  /** The zero-based page index of the displayed list of items. Defaulted to 0. */\n  @Input()\n  get pageIndex(): number { return this._pageIndex; }\n  set pageIndex(value: number) {\n    this._pageIndex = Math.max(coerceNumberProperty(value), 0);\n    this._changeDetectorRef.markForCheck();\n  }\n  _pageIndex: number = 0;\n\n  /** The length of the total number of items that are being paginated. Defaulted to 0. */\n  @Input()\n  get length(): number { return this._length; }\n  set length(value: number) {\n    this._length = coerceNumberProperty(value);\n    this._changeDetectorRef.markForCheck();\n  }\n  _length: number = 0;\n\n  /** Number of items to display on a page. By default set to 50. */\n  @Input()\n  get pageSize(): number { return this._pageSize; }\n  set pageSize(value: number) {\n    this._pageSize = Math.max(coerceNumberProperty(value), 0);\n    this._updateDisplayedPageSizeOptions();\n  }\n  private _pageSize: number;\n\n  /** The set of provided page size options to display to the user. */\n  @Input()\n  get pageSizeOptions(): number[] { return this._pageSizeOptions; }\n  set pageSizeOptions(value: number[]) {\n    this._pageSizeOptions = (value || []).map(p => coerceNumberProperty(p));\n    this._updateDisplayedPageSizeOptions();\n  }\n  private _pageSizeOptions: number[] = [];\n\n  /** Whether to hide the page size selection UI from the user. */\n  @Input()\n  get hidePageSize(): boolean { return this._hidePageSize; }\n  set hidePageSize(value: boolean) {\n    this._hidePageSize = coerceBooleanProperty(value);\n  }\n  private _hidePageSize = false;\n\n\n  /** Whether to show the first/last buttons UI to the user. */\n  @Input()\n  get showFirstLastButtons(): boolean { return this._showFirstLastButtons; }\n  set showFirstLastButtons(value: boolean) {\n    this._showFirstLastButtons = coerceBooleanProperty(value);\n  }\n  private _showFirstLastButtons = false;\n\n  /** Event emitted when the paginator changes the page size or page index. */\n  @Output() readonly page: EventEmitter<PageEvent> = new EventEmitter<PageEvent>();\n\n  /** Displayed set of page size options. Will be sorted and include current page size. */\n  _displayedPageSizeOptions: number[];\n\n  constructor(public _intl: MatPaginatorIntl,\n              private _changeDetectorRef: ChangeDetectorRef) {\n    super();\n    this._intlChanges = _intl.changes.subscribe(() => this._changeDetectorRef.markForCheck());\n  }\n\n  ngOnInit() {\n    this._initialized = true;\n    this._updateDisplayedPageSizeOptions();\n    this._markInitialized();\n  }\n\n  ngOnDestroy() {\n    this._intlChanges.unsubscribe();\n  }\n\n  /** Advances to the next page if it exists. */\n  nextPage(): void {\n    if (!this.hasNextPage()) { return; }\n\n    const previousPageIndex = this.pageIndex;\n    this.pageIndex++;\n    this._emitPageEvent(previousPageIndex);\n  }\n\n  /** Move back to the previous page if it exists. */\n  previousPage(): void {\n    if (!this.hasPreviousPage()) { return; }\n\n    const previousPageIndex = this.pageIndex;\n    this.pageIndex--;\n    this._emitPageEvent(previousPageIndex);\n  }\n\n  /** Move to the first page if not already there. */\n  firstPage(): void {\n    // hasPreviousPage being false implies at the start\n    if (!this.hasPreviousPage()) { return; }\n\n    const previousPageIndex = this.pageIndex;\n    this.pageIndex = 0;\n    this._emitPageEvent(previousPageIndex);\n  }\n\n  /** Move to the last page if not already there. */\n  lastPage(): void {\n    // hasNextPage being false implies at the end\n    if (!this.hasNextPage()) { return; }\n\n    const previousPageIndex = this.pageIndex;\n    this.pageIndex = this.getNumberOfPages();\n    this._emitPageEvent(previousPageIndex);\n  }\n\n  /** Whether there is a previous page. */\n  hasPreviousPage(): boolean {\n    return this.pageIndex >= 1 && this.pageSize != 0;\n  }\n\n  /** Whether there is a next page. */\n  hasNextPage(): boolean {\n    const numberOfPages = this.getNumberOfPages();\n    return this.pageIndex < numberOfPages && this.pageSize != 0;\n  }\n\n  /** Calculate the number of pages */\n  getNumberOfPages(): number {\n    return Math.ceil(this.length / this.pageSize) - 1;\n  }\n\n\n  /**\n   * Changes the page size so that the first item displayed on the page will still be\n   * displayed using the new page size.\n   *\n   * For example, if the page size is 10 and on the second page (items indexed 10-19) then\n   * switching so that the page size is 5 will set the third page as the current page so\n   * that the 10th item will still be displayed.\n   */\n  _changePageSize(pageSize: number) {\n    // Current page needs to be updated to reflect the new page size. Navigate to the page\n    // containing the previous page's first item.\n    const startIndex = this.pageIndex * this.pageSize;\n    const previousPageIndex = this.pageIndex;\n\n    this.pageIndex = Math.floor(startIndex / pageSize) || 0;\n    this.pageSize = pageSize;\n    this._emitPageEvent(previousPageIndex);\n  }\n\n  /**\n   * Updates the list of page size options to display to the user. Includes making sure that\n   * the page size is an option and that the list is sorted.\n   */\n  private _updateDisplayedPageSizeOptions() {\n    if (!this._initialized) { return; }\n\n    // If no page size is provided, use the first page size option or the default page size.\n    if (!this.pageSize) {\n      this._pageSize = this.pageSizeOptions.length != 0 ?\n          this.pageSizeOptions[0] :\n          DEFAULT_PAGE_SIZE;\n    }\n\n    this._displayedPageSizeOptions = this.pageSizeOptions.slice();\n\n    if (this._displayedPageSizeOptions.indexOf(this.pageSize) === -1) {\n      this._displayedPageSizeOptions.push(this.pageSize);\n    }\n\n    // Sort the numbers using a number-specific sort function.\n    this._displayedPageSizeOptions.sort((a, b) => a - b);\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Emits an event notifying that a change of the paginator's properties has been triggered. */\n  private _emitPageEvent(previousPageIndex: number) {\n    this.page.emit({\n      previousPageIndex,\n      pageIndex: this.pageIndex,\n      pageSize: this.pageSize,\n      length: this.length\n    });\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatButtonModule} from '@angular/material/button';\nimport {MatSelectModule} from '@angular/material/select';\nimport {MatTooltipModule} from '@angular/material/tooltip';\nimport {MatPaginator} from './paginator';\nimport {MAT_PAGINATOR_INTL_PROVIDER} from './paginator-intl';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatButtonModule,\n    MatSelectModule,\n    MatTooltipModule,\n  ],\n  exports: [MatPaginator],\n  declarations: [MatPaginator],\n  providers: [MAT_PAGINATOR_INTL_PROVIDER],\n})\nexport class MatPaginatorModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Directive,\n  TemplateRef,\n  ComponentFactoryResolver,\n  ApplicationRef,\n  Injector,\n  ViewContainerRef,\n  Inject,\n  OnDestroy,\n} from '@angular/core';\nimport {TemplatePortal, DomPortalOutlet} from '@angular/cdk/portal';\nimport {DOCUMENT} from '@angular/common';\n\n/**\n * Menu content that will be rendered lazily once the menu is opened.\n */\n@Directive({\n  selector: 'ng-template[matMenuContent]'\n})\nexport class MatMenuContent implements OnDestroy {\n  private _portal: TemplatePortal<any>;\n  private _outlet: DomPortalOutlet;\n\n  constructor(\n    private _template: TemplateRef<any>,\n    private _componentFactoryResolver: ComponentFactoryResolver,\n    private _appRef: ApplicationRef,\n    private _injector: Injector,\n    private _viewContainerRef: ViewContainerRef,\n    @Inject(DOCUMENT) private _document: any) {}\n\n  /**\n   * Attaches the content with a particular context.\n   * @docs-private\n   */\n  attach(context: any = {}) {\n    if (!this._portal) {\n      this._portal = new TemplatePortal(this._template, this._viewContainerRef);\n    }\n\n    this.detach();\n\n    if (!this._outlet) {\n      this._outlet = new DomPortalOutlet(this._document.createElement('div'),\n          this._componentFactoryResolver, this._appRef, this._injector);\n    }\n\n    const element: HTMLElement = this._template.elementRef.nativeElement;\n\n    // Because we support opening the same menu from different triggers (which in turn have their\n    // own `OverlayRef` panel), we have to re-insert the host element every time, otherwise we\n    // risk it staying attached to a pane that's no longer in the DOM.\n    element.parentNode!.insertBefore(this._outlet.outletElement, element);\n    this._portal.attach(this._outlet, context);\n  }\n\n  /**\n   * Detaches the content.\n   * @docs-private\n   */\n  detach() {\n    if (this._portal.isAttached) {\n      this._portal.detach();\n    }\n  }\n\n  ngOnDestroy() {\n    if (this._outlet) {\n      this._outlet.dispose();\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport{\n  trigger,\n  state,\n  style,\n  animate,\n  transition,\n  query,\n  group,\n  sequence,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/**\n * Animations used by the mat-menu component.\n * Animation duration and timing values are based on:\n * https://material.io/guidelines/components/menus.html#menus-usage\n */\nexport const matMenuAnimations: {\n  readonly transformMenu: AnimationTriggerMetadata;\n  readonly fadeInItems: AnimationTriggerMetadata;\n} = {\n  /**\n   * This animation controls the menu panel's entry and exit from the page.\n   *\n   * When the menu panel is added to the DOM, it scales in and fades in its border.\n   *\n   * When the menu panel is removed from the DOM, it simply fades out after a brief\n   * delay to display the ripple.\n   */\n  transformMenu: trigger('transformMenu', [\n    state('void', style({\n      opacity: 0,\n      // This starts off from 0.01, instead of 0, because there's an issue in the Angular animations\n      // as of 4.2, which causes the animation to be skipped if it starts from 0.\n      transform: 'scale(0.01, 0.01)'\n    })),\n    transition('void => enter', sequence([\n      query('.mat-menu-content', style({opacity: 0})),\n      animate('100ms linear', style({opacity: 1, transform: 'scale(1, 0.5)'})),\n      group([\n        query('.mat-menu-content', animate('400ms cubic-bezier(0.55, 0, 0.55, 0.2)',\n          style({opacity: 1})\n        )),\n        animate('300ms cubic-bezier(0.25, 0.8, 0.25, 1)', style({transform: 'scale(1, 1)'})),\n      ])\n    ])),\n    transition('* => void', animate('150ms 50ms linear', style({opacity: 0})))\n  ]),\n\n\n  /**\n   * This animation fades in the background color and content of the menu panel\n   * after its containing element is scaled in.\n   */\n  fadeInItems: trigger('fadeInItems', [\n    // TODO(crisbeto): this is inside the `transformMenu`\n    // now. Remove next time we do breaking changes.\n    state('showing', style({opacity: 1})),\n    transition('void => *', [\n      style({opacity: 0}),\n      animate('400ms 100ms cubic-bezier(0.55, 0, 0.55, 0.2)')\n    ])\n  ])\n};\n\n/**\n * @deprecated\n * @deletion-target 7.0.0\n */\nexport const fadeInItems = matMenuAnimations.fadeInItems;\n\n/**\n * @deprecated\n * @deletion-target 7.0.0\n */\nexport const transformMenu = matMenuAnimations.transformMenu;\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {EventEmitter, TemplateRef, InjectionToken} from '@angular/core';\nimport {MenuPositionX, MenuPositionY} from './menu-positions';\nimport {Direction} from '@angular/cdk/bidi';\nimport {FocusOrigin} from '@angular/cdk/a11y';\nimport {MatMenuContent} from './menu-content';\n\n/**\n * Injection token used to provide the parent menu to menu-specific components.\n * @docs-private\n */\nexport const MAT_MENU_PANEL = new InjectionToken<MatMenuPanel>('MAT_MENU_PANEL');\n\n/**\n * Interface for a custom menu panel that can be used with `matMenuTriggerFor`.\n * @docs-private\n */\nexport interface MatMenuPanel<T = any> {\n  xPosition: MenuPositionX;\n  yPosition: MenuPositionY;\n  overlapTrigger: boolean;\n  templateRef: TemplateRef<any>;\n  close: EventEmitter<void | 'click' | 'keydown' | 'tab'>;\n  parentMenu?: MatMenuPanel | undefined;\n  direction?: Direction;\n  focusFirstItem: (origin?: FocusOrigin) => void;\n  resetActiveItem: () => void;\n  setPositionClasses?: (x: MenuPositionX, y: MenuPositionY) => void;\n  setElevation?(depth: number): void;\n  lazyContent?: MatMenuContent;\n  backdropClass?: string;\n  hasBackdrop?: boolean;\n  addItem?: (item: T) => void;\n  removeItem?: (item: T) => void;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusableOption, FocusMonitor, FocusOrigin} from '@angular/cdk/a11y';\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  OnDestroy,\n  ViewEncapsulation,\n  Inject,\n  Optional,\n} from '@angular/core';\nimport {\n  CanDisable,\n  CanDisableRipple,\n  mixinDisabled,\n  mixinDisableRipple\n} from '@angular/material/core';\nimport {Subject} from 'rxjs';\nimport {DOCUMENT} from '@angular/common';\nimport {MAT_MENU_PANEL, MatMenuPanel} from './menu-panel';\n\n// Boilerplate for applying mixins to MatMenuItem.\n/** @docs-private */\nexport class MatMenuItemBase {}\nexport const _MatMenuItemMixinBase = mixinDisableRipple(mixinDisabled(MatMenuItemBase));\n\n/**\n * This directive is intended to be used inside an mat-menu tag.\n * It exists mostly to set the role attribute.\n */\n@Component({\n  moduleId: module.id,\n  selector: '[mat-menu-item]',\n  exportAs: 'matMenuItem',\n  inputs: ['disabled', 'disableRipple'],\n  host: {\n    'role': 'menuitem',\n    'class': 'mat-menu-item',\n    '[class.mat-menu-item-highlighted]': '_highlighted',\n    '[class.mat-menu-item-submenu-trigger]': '_triggersSubmenu',\n    '[attr.tabindex]': '_getTabIndex()',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.disabled]': 'disabled || null',\n    '(click)': '_checkDisabled($event)',\n    '(mouseenter)': '_handleMouseEnter()',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  templateUrl: 'menu-item.html',\n})\nexport class MatMenuItem extends _MatMenuItemMixinBase\n    implements FocusableOption, CanDisable, CanDisableRipple, OnDestroy {\n\n  private _document: Document;\n\n  /** Stream that emits when the menu item is hovered. */\n  readonly _hovered: Subject<MatMenuItem> = new Subject<MatMenuItem>();\n\n  /** Whether the menu item is highlighted. */\n  _highlighted: boolean = false;\n\n  /** Whether the menu item acts as a trigger for a sub-menu. */\n  _triggersSubmenu: boolean = false;\n\n  constructor(\n    private _elementRef: ElementRef,\n    @Inject(DOCUMENT) document?: any,\n    private _focusMonitor?: FocusMonitor,\n    @Inject(MAT_MENU_PANEL) @Optional() private _parentMenu?: MatMenuPanel<MatMenuItem>) {\n\n    // @deletion-target 7.0.0 make `_focusMonitor` and `document` required params.\n    super();\n\n    if (_focusMonitor) {\n      // Start monitoring the element so it gets the appropriate focused classes. We want\n      // to show the focus style for menu items only when the focus was not caused by a\n      // mouse or touch interaction.\n      _focusMonitor.monitor(this._getHostElement(), false);\n    }\n\n    if (_parentMenu && _parentMenu.addItem) {\n      _parentMenu.addItem(this);\n    }\n\n    this._document = document;\n  }\n\n  /** Focuses the menu item. */\n  focus(origin: FocusOrigin = 'program'): void {\n    if (this._focusMonitor) {\n      this._focusMonitor.focusVia(this._getHostElement(), origin);\n    } else {\n      this._getHostElement().focus();\n    }\n  }\n\n  ngOnDestroy() {\n    if (this._focusMonitor) {\n      this._focusMonitor.stopMonitoring(this._getHostElement());\n    }\n\n    if (this._parentMenu && this._parentMenu.removeItem) {\n      this._parentMenu.removeItem(this);\n    }\n\n    this._hovered.complete();\n  }\n\n  /** Used to set the `tabindex`. */\n  _getTabIndex(): string {\n    return this.disabled ? '-1' : '0';\n  }\n\n  /** Returns the host DOM element. */\n  _getHostElement(): HTMLElement {\n    return this._elementRef.nativeElement;\n  }\n\n  /** Prevents the default element actions if it is disabled. */\n  _checkDisabled(event: Event): void {\n    if (this.disabled) {\n      event.preventDefault();\n      event.stopPropagation();\n    }\n  }\n\n  /** Emits to the hover stream. */\n  _handleMouseEnter() {\n    this._hovered.next(this);\n  }\n\n  /** Gets the label to be used when determining whether the option should be focused. */\n  getLabel(): string {\n    const element: HTMLElement = this._elementRef.nativeElement;\n    const textNodeType = this._document ? this._document.TEXT_NODE : 3;\n    let output = '';\n\n    if (element.childNodes) {\n      const length = element.childNodes.length;\n\n      // Go through all the top-level text nodes and extract their text.\n      // We skip anything that's not a text node to prevent the text from\n      // being thrown off by something like an icon.\n      for (let i = 0; i < length; i++) {\n        if (element.childNodes[i].nodeType === textNodeType) {\n          output += element.childNodes[i].textContent;\n        }\n      }\n    }\n\n    return output.trim();\n  }\n\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusKeyManager, FocusOrigin} from '@angular/cdk/a11y';\nimport {Direction} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {ESCAPE, LEFT_ARROW, RIGHT_ARROW, DOWN_ARROW, UP_ARROW} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  Component,\n  ContentChild,\n  ContentChildren,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  OnDestroy,\n  Output,\n  TemplateRef,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n  OnInit,\n} from '@angular/core';\nimport {merge, Observable, Subject, Subscription} from 'rxjs';\nimport {startWith, switchMap, take} from 'rxjs/operators';\nimport {matMenuAnimations} from './menu-animations';\nimport {MatMenuContent} from './menu-content';\nimport {throwMatMenuInvalidPositionX, throwMatMenuInvalidPositionY} from './menu-errors';\nimport {MatMenuItem} from './menu-item';\nimport {MAT_MENU_PANEL, MatMenuPanel} from './menu-panel';\nimport {MenuPositionX, MenuPositionY} from './menu-positions';\nimport {AnimationEvent} from '@angular/animations';\n\n\n/** Default `mat-menu` options that can be overridden. */\nexport interface MatMenuDefaultOptions {\n  /** The x-axis position of the menu. */\n  xPosition: MenuPositionX;\n\n  /** The y-axis position of the menu. */\n  yPosition: MenuPositionY;\n\n  /** Whether the menu should overlap the menu trigger. */\n  overlapTrigger: boolean;\n\n  /** Class to be applied to the menu's backdrop. */\n  backdropClass: string;\n\n  /** Whether the menu has a backdrop. */\n  hasBackdrop?: boolean;\n}\n\n/** Injection token to be used to override the default options for `mat-menu`. */\nexport const MAT_MENU_DEFAULT_OPTIONS =\n    new InjectionToken<MatMenuDefaultOptions>('mat-menu-default-options', {\n      providedIn: 'root',\n      factory: MAT_MENU_DEFAULT_OPTIONS_FACTORY\n    });\n\n/** @docs-private */\nexport function MAT_MENU_DEFAULT_OPTIONS_FACTORY(): MatMenuDefaultOptions {\n  return {\n    overlapTrigger: true,\n    xPosition: 'after',\n    yPosition: 'below',\n    backdropClass: 'cdk-overlay-transparent-backdrop',\n  };\n}\n/**\n * Start elevation for the menu panel.\n * @docs-private\n */\nconst MAT_MENU_BASE_ELEVATION = 2;\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-menu',\n  templateUrl: 'menu.html',\n  styleUrls: ['menu.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matMenu',\n  animations: [\n    matMenuAnimations.transformMenu,\n    matMenuAnimations.fadeInItems\n  ],\n  providers: [\n    {provide: MAT_MENU_PANEL, useExisting: MatMenu}\n  ]\n})\nexport class MatMenu implements AfterContentInit, MatMenuPanel<MatMenuItem>, OnInit, OnDestroy {\n  private _keyManager: FocusKeyManager<MatMenuItem>;\n  private _xPosition: MenuPositionX = this._defaultOptions.xPosition;\n  private _yPosition: MenuPositionY = this._defaultOptions.yPosition;\n  private _previousElevation: string;\n\n  /** Menu items inside the current menu. */\n  private _items: MatMenuItem[] = [];\n\n  /** Emits whenever the amount of menu items changes. */\n  private _itemChanges = new Subject<MatMenuItem[]>();\n\n  /** Subscription to tab events on the menu panel */\n  private _tabSubscription = Subscription.EMPTY;\n\n  /** Config object to be passed into the menu's ngClass */\n  _classList: {[key: string]: boolean} = {};\n\n  /** Current state of the panel animation. */\n  _panelAnimationState: 'void' | 'enter' = 'void';\n\n  /** Emits whenever an animation on the menu completes. */\n  _animationDone = new Subject<AnimationEvent>();\n\n  /** Whether the menu is animating. */\n  _isAnimating: boolean;\n\n  /** Parent menu of the current menu panel. */\n  parentMenu: MatMenuPanel | undefined;\n\n  /** Layout direction of the menu. */\n  direction: Direction;\n\n  /** Class to be added to the backdrop element. */\n  @Input() backdropClass: string = this._defaultOptions.backdropClass;\n\n  /** Position of the menu in the X axis. */\n  @Input()\n  get xPosition(): MenuPositionX { return this._xPosition; }\n  set xPosition(value: MenuPositionX) {\n    if (value !== 'before' && value !== 'after') {\n      throwMatMenuInvalidPositionX();\n    }\n    this._xPosition = value;\n    this.setPositionClasses();\n  }\n\n  /** Position of the menu in the Y axis. */\n  @Input()\n  get yPosition(): MenuPositionY { return this._yPosition; }\n  set yPosition(value: MenuPositionY) {\n    if (value !== 'above' && value !== 'below') {\n      throwMatMenuInvalidPositionY();\n    }\n    this._yPosition = value;\n    this.setPositionClasses();\n  }\n\n  /** @docs-private */\n  @ViewChild(TemplateRef) templateRef: TemplateRef<any>;\n\n  /**\n   * List of the items inside of a menu.\n   * @deprecated\n   * @deletion-target 7.0.0\n   */\n  @ContentChildren(MatMenuItem) items: QueryList<MatMenuItem>;\n\n  /**\n   * Menu content that will be rendered lazily.\n   * @docs-private\n   */\n  @ContentChild(MatMenuContent) lazyContent: MatMenuContent;\n\n  /** Whether the menu should overlap its trigger. */\n  @Input()\n  get overlapTrigger(): boolean { return this._overlapTrigger; }\n  set overlapTrigger(value: boolean) {\n    this._overlapTrigger = coerceBooleanProperty(value);\n  }\n  private _overlapTrigger: boolean = this._defaultOptions.overlapTrigger;\n\n  /** Whether the menu has a backdrop. */\n  @Input()\n  get hasBackdrop(): boolean | undefined { return this._hasBackdrop; }\n  set hasBackdrop(value: boolean | undefined) {\n    this._hasBackdrop = coerceBooleanProperty(value);\n  }\n  private _hasBackdrop: boolean | undefined = this._defaultOptions.hasBackdrop;\n\n  /**\n   * This method takes classes set on the host mat-menu element and applies them on the\n   * menu template that displays in the overlay container.  Otherwise, it's difficult\n   * to style the containing menu from outside the component.\n   * @param classes list of class names\n   */\n  @Input('class')\n  set panelClass(classes: string) {\n    if (classes && classes.length) {\n      this._classList = classes.split(' ').reduce((obj: any, className: string) => {\n        obj[className] = true;\n        return obj;\n      }, {});\n\n      this._elementRef.nativeElement.className = '';\n    }\n  }\n\n  /**\n   * This method takes classes set on the host mat-menu element and applies them on the\n   * menu template that displays in the overlay container.  Otherwise, it's difficult\n   * to style the containing menu from outside the component.\n   * @deprecated Use `panelClass` instead.\n   * @deletion-target 7.0.0\n   */\n  @Input()\n  get classList(): string { return this.panelClass; }\n  set classList(classes: string) { this.panelClass = classes; }\n\n  /** Event emitted when the menu is closed. */\n  @Output() readonly closed: EventEmitter<void | 'click' | 'keydown' | 'tab'> =\n      new EventEmitter<void | 'click' | 'keydown' | 'tab'>();\n\n  /**\n   * Event emitted when the menu is closed.\n   * @deprecated Switch to `closed` instead\n   * @deletion-target 7.0.0\n   */\n  @Output() close = this.closed;\n\n  constructor(\n    private _elementRef: ElementRef,\n    private _ngZone: NgZone,\n    @Inject(MAT_MENU_DEFAULT_OPTIONS) private _defaultOptions: MatMenuDefaultOptions) { }\n\n  ngOnInit() {\n    this.setPositionClasses();\n  }\n\n  ngAfterContentInit() {\n    this._keyManager = new FocusKeyManager<MatMenuItem>(this._items).withWrap().withTypeAhead();\n    this._tabSubscription = this._keyManager.tabOut.subscribe(() => this.closed.emit('tab'));\n  }\n\n  ngOnDestroy() {\n    this._tabSubscription.unsubscribe();\n    this.closed.complete();\n  }\n\n  /** Stream that emits whenever the hovered menu item changes. */\n  _hovered(): Observable<MatMenuItem> {\n    return this._itemChanges.pipe(\n      startWith(this._items),\n      switchMap(items => merge(...items.map(item => item._hovered)))\n    );\n  }\n\n  /** Handle a keyboard event from the menu, delegating to the appropriate action. */\n  _handleKeydown(event: KeyboardEvent) {\n    const keyCode = event.keyCode;\n\n    switch (keyCode) {\n      case ESCAPE:\n        this.closed.emit('keydown');\n        event.stopPropagation();\n      break;\n      case LEFT_ARROW:\n        if (this.parentMenu && this.direction === 'ltr') {\n          this.closed.emit('keydown');\n        }\n      break;\n      case RIGHT_ARROW:\n        if (this.parentMenu && this.direction === 'rtl') {\n          this.closed.emit('keydown');\n        }\n      break;\n      default:\n        if (keyCode === UP_ARROW || keyCode === DOWN_ARROW) {\n          this._keyManager.setFocusOrigin('keyboard');\n        }\n\n        this._keyManager.onKeydown(event);\n    }\n  }\n\n  /**\n   * Focus the first item in the menu.\n   * @param origin Action from which the focus originated. Used to set the correct styling.\n   */\n  focusFirstItem(origin: FocusOrigin = 'program'): void {\n    // When the content is rendered lazily, it takes a bit before the items are inside the DOM.\n    if (this.lazyContent) {\n      this._ngZone.onStable.asObservable()\n        .pipe(take(1))\n        .subscribe(() => this._keyManager.setFocusOrigin(origin).setFirstItemActive());\n    } else {\n      this._keyManager.setFocusOrigin(origin).setFirstItemActive();\n    }\n  }\n\n  /**\n   * Resets the active item in the menu. This is used when the menu is opened, allowing\n   * the user to start from the first option when pressing the down arrow.\n   */\n  resetActiveItem() {\n    this._keyManager.setActiveItem(-1);\n  }\n\n  /**\n   * Sets the menu panel elevation.\n   * @param depth Number of parent menus that come before the menu.\n   */\n  setElevation(depth: number): void {\n    // The elevation starts at the base and increases by one for each level.\n    const newElevation = `mat-elevation-z${MAT_MENU_BASE_ELEVATION + depth}`;\n    const customElevation = Object.keys(this._classList).find(c => c.startsWith('mat-elevation-z'));\n\n    if (!customElevation || customElevation === this._previousElevation) {\n      if (this._previousElevation) {\n        this._classList[this._previousElevation] = false;\n      }\n\n      this._classList[newElevation] = true;\n      this._previousElevation = newElevation;\n    }\n  }\n\n  /**\n   * Registers a menu item with the menu.\n   * @docs-private\n   */\n  addItem(item: MatMenuItem) {\n    // We register the items through this method, rather than picking them up through\n    // `ContentChildren`, because we need the items to be picked up by their closest\n    // `mat-menu` ancestor. If we used `@ContentChildren(MatMenuItem, {descendants: true})`,\n    // all descendant items will bleed into the top-level menu in the case where the consumer\n    // has `mat-menu` instances nested inside each other.\n    if (this._items.indexOf(item) === -1) {\n      this._items.push(item);\n      this._itemChanges.next(this._items);\n    }\n  }\n\n  /**\n   * Removes an item from the menu.\n   * @docs-private\n   */\n  removeItem(item: MatMenuItem) {\n    const index = this._items.indexOf(item);\n\n    if (this._items.indexOf(item) > -1) {\n      this._items.splice(index, 1);\n      this._itemChanges.next(this._items);\n    }\n  }\n\n  /**\n   * Adds classes to the menu panel based on its position. Can be used by\n   * consumers to add specific styling based on the position.\n   * @param posX Position of the menu along the x axis.\n   * @param posY Position of the menu along the y axis.\n   * @docs-private\n   */\n  setPositionClasses(posX: MenuPositionX = this.xPosition, posY: MenuPositionY = this.yPosition) {\n    const classes = this._classList;\n    classes['mat-menu-before'] = posX === 'before';\n    classes['mat-menu-after'] = posX === 'after';\n    classes['mat-menu-above'] = posY === 'above';\n    classes['mat-menu-below'] = posY === 'below';\n  }\n\n  /** Starts the enter animation. */\n  _startAnimation() {\n    // @deletion-target 7.0.0 Combine with _resetAnimation.\n    this._panelAnimationState = 'enter';\n  }\n\n  /** Resets the panel animation to its initial state. */\n  _resetAnimation() {\n    // @deletion-target 7.0.0 Combine with _startAnimation.\n    this._panelAnimationState = 'void';\n  }\n\n  /** Callback that is invoked when the panel animation completes. */\n  _onAnimationDone(event: AnimationEvent) {\n    this._animationDone.next(event);\n    this._isAnimating = false;\n\n    // Scroll the content element to the top once the animation is done. This is necessary, because\n    // we move focus to the first item while it's still being animated, which can throw the browser\n    // off when it determines the scroll position. Alternatively we can move focus when the\n    // animation is done, however moving focus asynchronously will interrupt screen readers\n    // which are in the process of reading out the menu already. We take the `element` from\n    // the `event` since we can't use a `ViewChild` to access the pane.\n    if (event.toState === 'enter' && this._keyManager.activeItemIndex === 0) {\n      event.element.scrollTop = 0;\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor, FocusOrigin, isFakeMousedownFromScreenReader} from '@angular/cdk/a11y';\nimport {Direction, Directionality} from '@angular/cdk/bidi';\nimport {LEFT_ARROW, RIGHT_ARROW} from '@angular/cdk/keycodes';\nimport {\n  FlexibleConnectedPositionStrategy,\n  HorizontalConnectionPos,\n  Overlay,\n  OverlayConfig,\n  OverlayRef,\n  ScrollStrategy,\n  VerticalConnectionPos,\n} from '@angular/cdk/overlay';\nimport {TemplatePortal} from '@angular/cdk/portal';\nimport {\n  AfterContentInit,\n  Directive,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  InjectionToken,\n  Input,\n  OnDestroy,\n  Optional,\n  Output,\n  Self,\n  ViewContainerRef,\n} from '@angular/core';\nimport {asapScheduler, merge, of as observableOf, Subscription} from 'rxjs';\nimport {delay, filter, take, takeUntil} from 'rxjs/operators';\nimport {MatMenu} from './menu-directive';\nimport {throwMatMenuMissingError} from './menu-errors';\nimport {MatMenuItem} from './menu-item';\nimport {MatMenuPanel} from './menu-panel';\nimport {MenuPositionX, MenuPositionY} from './menu-positions';\n\n/** Injection token that determines the scroll handling while the menu is open. */\nexport const MAT_MENU_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mat-menu-scroll-strategy');\n\n/** @docs-private */\nexport function MAT_MENU_SCROLL_STRATEGY_FACTORY(overlay: Overlay): () => ScrollStrategy {\n  return () => overlay.scrollStrategies.reposition();\n}\n\n/** @docs-private */\nexport const MAT_MENU_SCROLL_STRATEGY_FACTORY_PROVIDER = {\n  provide: MAT_MENU_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_MENU_SCROLL_STRATEGY_FACTORY,\n};\n\n/** Default top padding of the menu panel. */\nexport const MENU_PANEL_TOP_PADDING = 8;\n\n// TODO(andrewseguin): Remove the kebab versions in favor of camelCased attribute selectors\n\n/**\n * This directive is intended to be used in conjunction with an mat-menu tag.  It is\n * responsible for toggling the display of the provided menu instance.\n */\n@Directive({\n  selector: `[mat-menu-trigger-for], [matMenuTriggerFor]`,\n  host: {\n    'aria-haspopup': 'true',\n    '[attr.aria-expanded]': 'menuOpen || null',\n    '(mousedown)': '_handleMousedown($event)',\n    '(keydown)': '_handleKeydown($event)',\n    '(click)': '_handleClick($event)',\n  },\n  exportAs: 'matMenuTrigger'\n})\nexport class MatMenuTrigger implements AfterContentInit, OnDestroy {\n  private _portal: TemplatePortal;\n  private _overlayRef: OverlayRef | null = null;\n  private _menuOpen: boolean = false;\n  private _closeSubscription = Subscription.EMPTY;\n  private _hoverSubscription = Subscription.EMPTY;\n\n  // Tracking input type is necessary so it's possible to only auto-focus\n  // the first item of the list when the menu is opened via the keyboard\n  private _openedByMouse: boolean = false;\n\n  /**\n   * @deprecated\n   * @deletion-target 7.0.0\n   */\n  @Input('mat-menu-trigger-for')\n  get _deprecatedMatMenuTriggerFor(): MatMenuPanel {\n    return this.menu;\n  }\n\n  set _deprecatedMatMenuTriggerFor(v: MatMenuPanel) {\n    this.menu = v;\n  }\n\n  /** References the menu instance that the trigger is associated with. */\n  @Input('matMenuTriggerFor') menu: MatMenuPanel;\n\n  /** Data to be passed along to any lazily-rendered content. */\n  @Input('matMenuTriggerData') menuData: any;\n\n  /** Event emitted when the associated menu is opened. */\n  @Output() readonly menuOpened: EventEmitter<void> = new EventEmitter<void>();\n\n  /**\n   * Event emitted when the associated menu is opened.\n   * @deprecated Switch to `menuOpened` instead\n   * @deletion-target 7.0.0\n   */\n  // tslint:disable-next-line:no-output-on-prefix\n  @Output() readonly onMenuOpen: EventEmitter<void> = this.menuOpened;\n\n  /** Event emitted when the associated menu is closed. */\n  @Output() readonly menuClosed: EventEmitter<void> = new EventEmitter<void>();\n\n  /**\n   * Event emitted when the associated menu is closed.\n   * @deprecated Switch to `menuClosed` instead\n   * @deletion-target 7.0.0\n   */\n  // tslint:disable-next-line:no-output-on-prefix\n  @Output() readonly onMenuClose: EventEmitter<void> = this.menuClosed;\n\n  constructor(private _overlay: Overlay,\n              private _element: ElementRef,\n              private _viewContainerRef: ViewContainerRef,\n              @Inject(MAT_MENU_SCROLL_STRATEGY) private _scrollStrategy,\n              @Optional() private _parentMenu: MatMenu,\n              @Optional() @Self() private _menuItemInstance: MatMenuItem,\n              @Optional() private _dir: Directionality,\n              // TODO(crisbeto): make the _focusMonitor required when doing breaking changes.\n              // @deletion-target 7.0.0\n              private _focusMonitor?: FocusMonitor) {\n\n    if (_menuItemInstance) {\n      _menuItemInstance._triggersSubmenu = this.triggersSubmenu();\n    }\n  }\n\n  ngAfterContentInit() {\n    this._checkMenu();\n\n    this.menu.close.subscribe(reason => {\n      this._destroyMenu();\n\n      // If a click closed the menu, we should close the entire chain of nested menus.\n      if ((reason === 'click' || reason === 'tab') && this._parentMenu) {\n        this._parentMenu.closed.emit(reason);\n      }\n    });\n\n    this._handleHover();\n  }\n\n  ngOnDestroy() {\n    if (this._overlayRef) {\n      this._overlayRef.dispose();\n      this._overlayRef = null;\n    }\n\n    this._cleanUpSubscriptions();\n  }\n\n  /** Whether the menu is open. */\n  get menuOpen(): boolean {\n    return this._menuOpen;\n  }\n\n  /** The text direction of the containing app. */\n  get dir(): Direction {\n    return this._dir && this._dir.value === 'rtl' ? 'rtl' : 'ltr';\n  }\n\n  /** Whether the menu triggers a sub-menu or a top-level one. */\n  triggersSubmenu(): boolean {\n    return !!(this._menuItemInstance && this._parentMenu);\n  }\n\n  /** Toggles the menu between the open and closed states. */\n  toggleMenu(): void {\n    return this._menuOpen ? this.closeMenu() : this.openMenu();\n  }\n\n  /** Opens the menu. */\n  openMenu(): void {\n    if (this._menuOpen) {\n      return;\n    }\n\n    const overlayRef = this._createOverlay();\n    this._setPosition(overlayRef.getConfig().positionStrategy as FlexibleConnectedPositionStrategy);\n    overlayRef.attach(this._portal);\n\n    if (this.menu.lazyContent) {\n      this.menu.lazyContent.attach(this.menuData);\n    }\n\n    this._closeSubscription = this._menuClosingActions().subscribe(() => this.closeMenu());\n    this._initMenu();\n\n    if (this.menu instanceof MatMenu) {\n      this.menu._startAnimation();\n    }\n  }\n\n  /** Closes the menu. */\n  closeMenu(): void {\n    this.menu.close.emit();\n  }\n\n  /**\n   * Focuses the menu trigger.\n   * @param origin Source of the menu trigger's focus.\n   */\n  focus(origin: FocusOrigin = 'program') {\n    if (this._focusMonitor) {\n      this._focusMonitor.focusVia(this._element.nativeElement, origin);\n    } else {\n      this._element.nativeElement.focus();\n    }\n  }\n\n  /** Closes the menu and does the necessary cleanup. */\n  private _destroyMenu() {\n    if (!this._overlayRef || !this.menuOpen) {\n      return;\n    }\n\n    const menu = this.menu;\n\n    this._closeSubscription.unsubscribe();\n    this._overlayRef.detach();\n\n    if (menu instanceof MatMenu) {\n      menu._resetAnimation();\n\n      if (menu.lazyContent) {\n        // Wait for the exit animation to finish before detaching the content.\n        menu._animationDone\n          .pipe(filter(event => event.toState === 'void'), take(1))\n          .subscribe(() => {\n            menu.lazyContent!.detach();\n            this._resetMenu();\n          });\n      } else {\n        this._resetMenu();\n      }\n    } else {\n      this._resetMenu();\n\n      if (menu.lazyContent) {\n        menu.lazyContent.detach();\n      }\n    }\n  }\n\n  /**\n   * This method sets the menu state to open and focuses the first item if\n   * the menu was opened via the keyboard.\n   */\n  private _initMenu(): void {\n    this.menu.parentMenu = this.triggersSubmenu() ? this._parentMenu : undefined;\n    this.menu.direction = this.dir;\n    this._setMenuElevation();\n    this._setIsMenuOpen(true);\n    this.menu.focusFirstItem(this._openedByMouse ? 'mouse' : 'program');\n  }\n\n  /** Updates the menu elevation based on the amount of parent menus that it has. */\n  private _setMenuElevation(): void {\n    if (this.menu.setElevation) {\n      let depth = 0;\n      let parentMenu = this.menu.parentMenu;\n\n      while (parentMenu) {\n        depth++;\n        parentMenu = parentMenu.parentMenu;\n      }\n\n      this.menu.setElevation(depth);\n    }\n  }\n\n  /**\n   * This method resets the menu when it's closed, most importantly restoring\n   * focus to the menu trigger if the menu was opened via the keyboard.\n   */\n  private _resetMenu(): void {\n    this._setIsMenuOpen(false);\n\n    // We should reset focus if the user is navigating using a keyboard or\n    // if we have a top-level trigger which might cause focus to be lost\n    // when clicking on the backdrop.\n    if (!this._openedByMouse) {\n      // Note that the focus style will show up both for `program` and\n      // `keyboard` so we don't have to specify which one it is.\n      this.focus();\n    } else if (!this.triggersSubmenu()) {\n      this.focus('mouse');\n    }\n\n    this._openedByMouse = false;\n  }\n\n  // set state rather than toggle to support triggers sharing a menu\n  private _setIsMenuOpen(isOpen: boolean): void {\n    this._menuOpen = isOpen;\n    this._menuOpen ? this.menuOpened.emit() : this.menuClosed.emit();\n\n    if (this.triggersSubmenu()) {\n      this._menuItemInstance._highlighted = isOpen;\n    }\n  }\n\n  /**\n   * This method checks that a valid instance of MatMenu has been passed into\n   * matMenuTriggerFor. If not, an exception is thrown.\n   */\n  private _checkMenu() {\n    if (!this.menu) {\n      throwMatMenuMissingError();\n    }\n  }\n\n  /**\n   * This method creates the overlay from the provided menu's template and saves its\n   * OverlayRef so that it can be attached to the DOM when openMenu is called.\n   */\n  private _createOverlay(): OverlayRef {\n    if (!this._overlayRef) {\n      this._portal = new TemplatePortal(this.menu.templateRef, this._viewContainerRef);\n      const config = this._getOverlayConfig();\n      this._subscribeToPositions(config.positionStrategy as FlexibleConnectedPositionStrategy);\n      this._overlayRef = this._overlay.create(config);\n    }\n\n    return this._overlayRef;\n  }\n\n  /**\n   * This method builds the configuration object needed to create the overlay, the OverlayState.\n   * @returns OverlayConfig\n   */\n  private _getOverlayConfig(): OverlayConfig {\n    return new OverlayConfig({\n      positionStrategy: this._overlay.position()\n          .flexibleConnectedTo(this._element)\n          .withTransformOriginOn('.mat-menu-panel'),\n      hasBackdrop: this.menu.hasBackdrop == null ? !this.triggersSubmenu() : this.menu.hasBackdrop,\n      backdropClass: this.menu.backdropClass || 'cdk-overlay-transparent-backdrop',\n      scrollStrategy: this._scrollStrategy(),\n      direction: this._dir\n    });\n  }\n\n  /**\n   * Listens to changes in the position of the overlay and sets the correct classes\n   * on the menu based on the new position. This ensures the animation origin is always\n   * correct, even if a fallback position is used for the overlay.\n   */\n  private _subscribeToPositions(position: FlexibleConnectedPositionStrategy): void {\n    if (this.menu.setPositionClasses) {\n      position.positionChanges.subscribe(change => {\n        const posX: MenuPositionX = change.connectionPair.overlayX === 'start' ? 'after' : 'before';\n        const posY: MenuPositionY = change.connectionPair.overlayY === 'top' ? 'below' : 'above';\n\n        this.menu.setPositionClasses!(posX, posY);\n      });\n    }\n  }\n\n  /**\n   * Sets the appropriate positions on a position strategy\n   * so the overlay connects with the trigger correctly.\n   * @param positionStrategy Strategy whose position to update.\n   */\n  private _setPosition(positionStrategy: FlexibleConnectedPositionStrategy) {\n    let [originX, originFallbackX]: HorizontalConnectionPos[] =\n        this.menu.xPosition === 'before' ? ['end', 'start'] : ['start', 'end'];\n\n    let [overlayY, overlayFallbackY]: VerticalConnectionPos[] =\n        this.menu.yPosition === 'above' ? ['bottom', 'top'] : ['top', 'bottom'];\n\n    let [originY, originFallbackY] = [overlayY, overlayFallbackY];\n    let [overlayX, overlayFallbackX] = [originX, originFallbackX];\n    let offsetY = 0;\n\n    if (this.triggersSubmenu()) {\n      // When the menu is a sub-menu, it should always align itself\n      // to the edges of the trigger, instead of overlapping it.\n      overlayFallbackX = originX = this.menu.xPosition === 'before' ? 'start' : 'end';\n      originFallbackX = overlayX = originX === 'end' ? 'start' : 'end';\n      offsetY = overlayY === 'bottom' ? MENU_PANEL_TOP_PADDING : -MENU_PANEL_TOP_PADDING;\n    } else if (!this.menu.overlapTrigger) {\n      originY = overlayY === 'top' ? 'bottom' : 'top';\n      originFallbackY = overlayFallbackY === 'top' ? 'bottom' : 'top';\n    }\n\n    positionStrategy.withPositions([\n      {originX, originY, overlayX, overlayY, offsetY},\n      {originX: originFallbackX, originY, overlayX: overlayFallbackX, overlayY, offsetY},\n      {\n        originX,\n        originY: originFallbackY,\n        overlayX,\n        overlayY: overlayFallbackY,\n        offsetY: -offsetY\n      },\n      {\n        originX: originFallbackX,\n        originY: originFallbackY,\n        overlayX: overlayFallbackX,\n        overlayY: overlayFallbackY,\n        offsetY: -offsetY\n      }\n    ]);\n  }\n\n  /** Cleans up the active subscriptions. */\n  private _cleanUpSubscriptions(): void {\n    this._closeSubscription.unsubscribe();\n    this._hoverSubscription.unsubscribe();\n  }\n\n  /** Returns a stream that emits whenever an action that should close the menu occurs. */\n  private _menuClosingActions() {\n    const backdrop = this._overlayRef!.backdropClick();\n    const detachments = this._overlayRef!.detachments();\n    const parentClose = this._parentMenu ? this._parentMenu.closed : observableOf();\n    const hover = this._parentMenu ? this._parentMenu._hovered().pipe(\n      filter(active => active !== this._menuItemInstance),\n      filter(() => this._menuOpen)\n    ) : observableOf();\n\n    return merge(backdrop, parentClose, hover, detachments);\n  }\n\n  /** Handles mouse presses on the trigger. */\n  _handleMousedown(event: MouseEvent): void {\n    if (!isFakeMousedownFromScreenReader(event)) {\n      this._openedByMouse = true;\n\n      // Since clicking on the trigger won't close the menu if it opens a sub-menu,\n      // we should prevent focus from moving onto it via click to avoid the\n      // highlight from lingering on the menu item.\n      if (this.triggersSubmenu()) {\n        event.preventDefault();\n      }\n    }\n  }\n\n  /** Handles key presses on the trigger. */\n  _handleKeydown(event: KeyboardEvent): void {\n    const keyCode = event.keyCode;\n\n    if (this.triggersSubmenu() && (\n            (keyCode === RIGHT_ARROW && this.dir === 'ltr') ||\n            (keyCode === LEFT_ARROW && this.dir === 'rtl'))) {\n      this.openMenu();\n    }\n  }\n\n  /** Handles click events on the trigger. */\n  _handleClick(event: MouseEvent): void {\n    if (this.triggersSubmenu()) {\n      // Stop event propagation to avoid closing the parent menu.\n      event.stopPropagation();\n      this.openMenu();\n    } else {\n      this.toggleMenu();\n    }\n  }\n\n  /** Handles the cases where the user hovers over the trigger. */\n  private _handleHover() {\n    // Subscribe to changes in the hovered item in order to toggle the panel.\n    if (!this.triggersSubmenu()) {\n      return;\n    }\n\n    this._hoverSubscription = this._parentMenu._hovered()\n      // Since we might have multiple competing triggers for the same menu (e.g. a sub-menu\n      // with different data and triggers), we have to delay it by a tick to ensure that\n      // it won't be closed immediately after it is opened.\n      .pipe(\n        filter(active => active === this._menuItemInstance && !active.disabled),\n        delay(0, asapScheduler)\n      )\n      .subscribe(() => {\n        this._openedByMouse = true;\n\n        // If the same menu is used between multiple triggers, it might still be animating\n        // while the new trigger tries to re-open it. Wait for the animation to finish\n        // before doing so. Also interrupt if the user moves to another item.\n        if (this.menu instanceof MatMenu && this.menu._isAnimating) {\n          this.menu._animationDone\n            .pipe(take(1), takeUntil(this._parentMenu._hovered()))\n            .subscribe(() => this.openMenu());\n        } else {\n          this.openMenu();\n        }\n      });\n  }\n\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {MatMenuContent} from './menu-content';\nimport {MatMenu} from './menu-directive';\nimport {MatMenuItem} from './menu-item';\nimport {\n  MatMenuTrigger,\n  MAT_MENU_SCROLL_STRATEGY_FACTORY_PROVIDER,\n} from './menu-trigger';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatCommonModule,\n    MatRippleModule,\n    OverlayModule,\n  ],\n  exports: [MatMenu, MatMenuItem, MatMenuTrigger, MatMenuContent, MatCommonModule],\n  declarations: [MatMenu, MatMenuItem, MatMenuTrigger, MatMenuContent],\n  providers: [MAT_MENU_SCROLL_STRATEGY_FACTORY_PROVIDER]\n})\nexport class MatMenuModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  animate,\n  AnimationTriggerMetadata,\n  state,\n  style,\n  transition,\n  trigger,\n  query,\n  animateChild,\n  group,\n} from '@angular/animations';\n\n/**\n * The following are all the animations for the mat-select component, with each\n * const containing the metadata for one animation.\n *\n * The values below match the implementation of the AngularJS Material mat-select animation.\n */\nexport const matSelectAnimations: {\n  readonly transformPanel: AnimationTriggerMetadata;\n  readonly fadeInContent: AnimationTriggerMetadata;\n} = {\n  /**\n   * This animation transforms the select's overlay panel on and off the page.\n   *\n   * When the panel is attached to the DOM, it expands its width by the amount of padding, scales it\n   * up to 100% on the Y axis, fades in its border, and translates slightly up and to the\n   * side to ensure the option text correctly overlaps the trigger text.\n   *\n   * When the panel is removed from the DOM, it simply fades out linearly.\n   */\n  transformPanel: trigger('transformPanel', [\n    state('void', style({\n      transform: 'scaleY(0)',\n      minWidth: '100%',\n      opacity: 0\n    })),\n    state('showing', style({\n      opacity: 1,\n      minWidth: 'calc(100% + 32px)', // 32px = 2 * 16px padding\n      transform: 'scaleY(1)'\n    })),\n    state('showing-multiple', style({\n      opacity: 1,\n      minWidth: 'calc(100% + 64px)', // 64px = 48px padding on the left + 16px padding on the right\n      transform: 'scaleY(1)'\n    })),\n    transition('void => *', group([\n      query('@fadeInContent', animateChild()),\n      animate('150ms cubic-bezier(0.25, 0.8, 0.25, 1)')\n    ])),\n    transition('* => void', [\n      animate('250ms 100ms linear', style({opacity: 0}))\n    ])\n  ]),\n\n  /**\n   * This animation fades in the background color and text content of the\n   * select's options. It is time delayed to occur 100ms after the overlay\n   * panel has transformed in.\n   */\n  fadeInContent: trigger('fadeInContent', [\n    state('showing', style({opacity: 1})),\n    transition('void => showing', [\n      style({opacity: 0}),\n      animate('150ms 100ms cubic-bezier(0.55, 0, 0.55, 0.2)')\n    ])\n  ])\n};\n\n\n/**\n * @deprecated\n * @deletion-target 7.0.0\n */\nexport const transformPanel = matSelectAnimations.transformPanel;\n\n/**\n * @deprecated\n * @deletion-target 7.0.0\n */\nexport const fadeInContent = matSelectAnimations.fadeInContent;\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusableOption, FocusKeyManager} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {SelectionModel} from '@angular/cdk/collections';\nimport {SPACE, ENTER, HOME, END, UP_ARROW, DOWN_ARROW, A} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  ContentChildren,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  OnDestroy,\n  OnInit,\n  Output,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {\n  CanDisableRipple,\n  MatLine,\n  MatLineSetter,\n  mixinDisableRipple,\n} from '@angular/material/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {Subscription} from 'rxjs';\nimport {MatListAvatarCssMatStyler} from './list';\n\n\n/** @docs-private */\nexport class MatSelectionListBase {}\nexport const _MatSelectionListMixinBase = mixinDisableRipple(MatSelectionListBase);\n\n/** @docs-private */\nexport class MatListOptionBase {}\nexport const _MatListOptionMixinBase = mixinDisableRipple(MatListOptionBase);\n\n/** @docs-private */\nexport const MAT_SELECTION_LIST_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatSelectionList),\n  multi: true\n};\n\n/** Change event that is being fired whenever the selected state of an option changes. */\nexport class MatSelectionListChange {\n  constructor(\n    /** Reference to the selection list that emitted the event. */\n    public source: MatSelectionList,\n    /** Reference to the option that has been changed. */\n    public option: MatListOption) {}\n}\n\n/**\n * Component for list-options of selection-list. Each list-option can automatically\n * generate a checkbox and can put current item into the selectionModel of selection-list\n * if the current item is selected.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-list-option',\n  exportAs: 'matListOption',\n  inputs: ['disableRipple'],\n  host: {\n    'role': 'option',\n    'class': 'mat-list-item mat-list-option',\n    '(focus)': '_handleFocus()',\n    '(blur)': '_handleBlur()',\n    '(click)': '_handleClick()',\n    'tabindex': '-1',\n    '[class.mat-list-item-disabled]': 'disabled',\n    '[class.mat-list-item-focus]': '_hasFocus',\n    '[class.mat-list-item-with-avatar]': '_avatar',\n    '[attr.aria-selected]': 'selected.toString()',\n    '[attr.aria-disabled]': 'disabled.toString()',\n  },\n  templateUrl: 'list-option.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatListOption extends _MatListOptionMixinBase\n    implements AfterContentInit, OnDestroy, OnInit, FocusableOption, CanDisableRipple {\n\n  private _selected = false;\n  private _disabled = false;\n\n  /** Whether the option has focus. */\n  _hasFocus: boolean = false;\n\n  @ContentChild(MatListAvatarCssMatStyler) _avatar: MatListAvatarCssMatStyler;\n  @ContentChildren(MatLine) _lines: QueryList<MatLine>;\n\n  /** DOM element containing the item's text. */\n  @ViewChild('text') _text: ElementRef;\n\n  /** Whether the label should appear before or after the checkbox. Defaults to 'after' */\n  @Input() checkboxPosition: 'before' | 'after' = 'after';\n\n  /** Value of the option */\n  @Input() value: any;\n\n  /** Whether the option is disabled. */\n  @Input()\n  get disabled() { return this._disabled || (this.selectionList && this.selectionList.disabled); }\n  set disabled(value: any) {\n    const newValue = coerceBooleanProperty(value);\n\n    if (newValue !== this._disabled) {\n      this._disabled = newValue;\n      this._changeDetector.markForCheck();\n    }\n  }\n\n  /** Whether the option is selected. */\n  @Input()\n  get selected(): boolean { return this.selectionList.selectedOptions.isSelected(this); }\n  set selected(value: boolean) {\n    const isSelected = coerceBooleanProperty(value);\n\n    if (isSelected !== this._selected) {\n      this._setSelected(isSelected);\n      this.selectionList._reportValueChange();\n    }\n  }\n\n  constructor(private _element: ElementRef,\n              private _changeDetector: ChangeDetectorRef,\n              /** @docs-private */\n              @Inject(forwardRef(() => MatSelectionList)) public selectionList: MatSelectionList) {\n    super();\n  }\n\n  ngOnInit() {\n    // List options that are selected at initialization can't be reported properly to the form\n    // control. This is because it takes some time until the selection-list knows about all\n    // available options. Also it can happen that the ControlValueAccessor has an initial value\n    // that should be used instead. Deferring the value change report to the next tick ensures\n    // that the form control value is not being overwritten.\n    const wasSelected = this._selected;\n\n    Promise.resolve().then(() => {\n      if (this._selected || wasSelected) {\n        this.selected = true;\n        this._changeDetector.markForCheck();\n      }\n    });\n  }\n\n  ngAfterContentInit() {\n    // TODO: consider turning the setter into a function, it doesn't do anything as a class.\n    // tslint:disable-next-line:no-unused-expression\n    new MatLineSetter(this._lines, this._element);\n  }\n\n  ngOnDestroy(): void {\n    if (this.selected) {\n      // We have to delay this until the next tick in order\n      // to avoid changed after checked errors.\n      Promise.resolve().then(() => this.selected = false);\n    }\n\n    this.selectionList._removeOptionFromList(this);\n  }\n\n  /** Toggles the selection state of the option. */\n  toggle(): void {\n    this.selected = !this.selected;\n  }\n\n  /** Allows for programmatic focusing of the option. */\n  focus(): void {\n    this._element.nativeElement.focus();\n  }\n\n  /**\n   * Returns the list item's text label. Implemented as a part of the FocusKeyManager.\n   * @docs-private\n   */\n  getLabel() {\n    return this._text ? this._text.nativeElement.textContent : '';\n  }\n\n  /** Whether this list item should show a ripple effect when clicked. */\n  _isRippleDisabled() {\n    return this.disabled || this.disableRipple || this.selectionList.disableRipple;\n  }\n\n  _handleClick() {\n    if (!this.disabled) {\n      this.toggle();\n\n      // Emit a change event if the selected state of the option changed through user interaction.\n      this.selectionList._emitChangeEvent(this);\n    }\n  }\n\n  _handleFocus() {\n    this._hasFocus = true;\n    this.selectionList._setFocusedOption(this);\n  }\n\n  _handleBlur() {\n    this._hasFocus = false;\n    this.selectionList._onTouched();\n  }\n\n  /** Retrieves the DOM element of the component host. */\n  _getHostElement(): HTMLElement {\n    return this._element.nativeElement;\n  }\n\n  /** Sets the selected state of the option. Returns whether the value has changed. */\n  _setSelected(selected: boolean): boolean {\n    if (selected === this._selected) {\n      return false;\n    }\n\n    this._selected = selected;\n\n    if (selected) {\n      this.selectionList.selectedOptions.select(this);\n    } else {\n      this.selectionList.selectedOptions.deselect(this);\n    }\n\n    this._changeDetector.markForCheck();\n    return true;\n  }\n\n  /**\n   * Notifies Angular that the option needs to be checked in the next change detection run. Mainly\n   * used to trigger an update of the list option if the disabled state of the selection list\n   * changed.\n   */\n  _markForCheck() {\n    this._changeDetector.markForCheck();\n  }\n}\n\n\n/**\n * Material Design list component where each item is a selectable option. Behaves as a listbox.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-selection-list',\n  exportAs: 'matSelectionList',\n  inputs: ['disabled', 'disableRipple', 'tabIndex'],\n  host: {\n    'role': 'listbox',\n    '[tabIndex]': 'tabIndex',\n    'class': 'mat-selection-list',\n    '(focus)': 'focus()',\n    '(blur)': '_onTouched()',\n    '(keydown)': '_keydown($event)',\n    '[attr.aria-disabled]': 'disabled.toString()',\n  },\n  template: '<ng-content></ng-content>',\n  styleUrls: ['list.css'],\n  encapsulation: ViewEncapsulation.None,\n  providers: [MAT_SELECTION_LIST_VALUE_ACCESSOR],\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class MatSelectionList extends _MatSelectionListMixinBase implements FocusableOption,\n    CanDisableRipple, AfterContentInit, ControlValueAccessor, OnDestroy {\n\n  /** The FocusKeyManager which handles focus. */\n  _keyManager: FocusKeyManager<MatListOption>;\n\n  /** The option components contained within this selection-list. */\n  @ContentChildren(MatListOption) options: QueryList<MatListOption>;\n\n  /** Emits a change event whenever the selected state of an option changes. */\n  @Output() readonly selectionChange: EventEmitter<MatSelectionListChange> =\n      new EventEmitter<MatSelectionListChange>();\n\n  /** Tabindex of the selection list. */\n  @Input() tabIndex: number = 0;\n\n  /**\n   * Function used for comparing an option against the selected value when determining which\n   * options should appear as selected. The first argument is the value of an options. The second\n   * one is a value from the selected value. A boolean must be returned.\n   */\n  @Input() compareWith: (o1: any, o2: any) => boolean;\n\n  /** Whether the selection list is disabled. */\n  @Input()\n  get disabled(): boolean { return this._disabled; }\n  set disabled(value: boolean) {\n    this._disabled = coerceBooleanProperty(value);\n\n    // The `MatSelectionList` and `MatListOption` are using the `OnPush` change detection\n    // strategy. Therefore the options will not check for any changes if the `MatSelectionList`\n    // changed its state. Since we know that a change to `disabled` property of the list affects\n    // the state of the options, we manually mark each option for check.\n    if (this.options) {\n      this.options.forEach(option => option._markForCheck());\n    }\n  }\n  private _disabled: boolean = false;\n\n  /** The currently selected options. */\n  selectedOptions: SelectionModel<MatListOption> = new SelectionModel<MatListOption>(true);\n\n  /** View to model callback that should be called whenever the selected options change. */\n  private _onChange: (value: any) => void = (_: any) => {};\n\n  /** Used for storing the values that were assigned before the options were initialized. */\n  private _tempValues: string[]|null;\n\n  /** Subscription to sync value changes in the SelectionModel back to the SelectionList. */\n  private _modelChanges = Subscription.EMPTY;\n\n  /** View to model callback that should be called if the list or its options lost focus. */\n  _onTouched: () => void = () => {};\n\n  constructor(private _element: ElementRef, @Attribute('tabindex') tabIndex: string) {\n    super();\n    this.tabIndex = parseInt(tabIndex) || 0;\n  }\n\n  ngAfterContentInit(): void {\n    this._keyManager = new FocusKeyManager<MatListOption>(this.options)\n      .withWrap()\n      .withTypeAhead()\n      // Allow disabled items to be focusable. For accessibility reasons, there must be a way for\n      // screenreader users, that allows reading the different options of the list.\n      .skipPredicate(() => false);\n\n    if (this._tempValues) {\n      this._setOptionsFromValues(this._tempValues);\n      this._tempValues = null;\n    }\n\n    // Sync external changes to the model back to the options.\n    this._modelChanges = this.selectedOptions.onChange!.subscribe(event => {\n      if (event.added) {\n        for (let item of event.added) {\n          item.selected = true;\n        }\n      }\n\n      if (event.removed) {\n        for (let item of event.removed) {\n          item.selected = false;\n        }\n      }\n    });\n  }\n\n  ngOnDestroy() {\n    this._modelChanges.unsubscribe();\n  }\n\n  /** Focuses the last active list option. */\n  focus() {\n    this._element.nativeElement.focus();\n  }\n\n  /** Selects all of the options. */\n  selectAll() {\n    this._setAllOptionsSelected(true);\n  }\n\n  /** Deselects all of the options. */\n  deselectAll() {\n    this._setAllOptionsSelected(false);\n  }\n\n  /** Sets the focused option of the selection-list. */\n  _setFocusedOption(option: MatListOption) {\n    this._keyManager.updateActiveItemIndex(this._getOptionIndex(option));\n  }\n\n  /** Removes an option from the selection list and updates the active item. */\n  _removeOptionFromList(option: MatListOption) {\n    if (option._hasFocus) {\n      const optionIndex = this._getOptionIndex(option);\n\n      // Check whether the option is the last item\n      if (optionIndex > 0) {\n        this._keyManager.setPreviousItemActive();\n      } else if (optionIndex === 0 && this.options.length > 1) {\n        this._keyManager.setNextItemActive();\n      }\n    }\n  }\n\n  /** Passes relevant key presses to our key manager. */\n  _keydown(event: KeyboardEvent) {\n    const keyCode = event.keyCode;\n    const manager = this._keyManager;\n    const previousFocusIndex = manager.activeItemIndex;\n\n    switch (keyCode) {\n      case SPACE:\n      case ENTER:\n        if (!this.disabled) {\n          this._toggleSelectOnFocusedOption();\n\n          // Always prevent space from scrolling the page since the list has focus\n          event.preventDefault();\n        }\n        break;\n      case HOME:\n      case END:\n        keyCode === HOME ? manager.setFirstItemActive() : manager.setLastItemActive();\n        event.preventDefault();\n        break;\n      case A:\n        if (event.ctrlKey) {\n          this.options.find(option => !option.selected) ? this.selectAll() : this.deselectAll();\n          event.preventDefault();\n        }\n        break;\n      default:\n        manager.onKeydown(event);\n    }\n\n    if ((keyCode === UP_ARROW || keyCode === DOWN_ARROW) && event.shiftKey &&\n        manager.activeItemIndex !== previousFocusIndex) {\n      this._toggleSelectOnFocusedOption();\n    }\n  }\n\n  /** Reports a value change to the ControlValueAccessor */\n  _reportValueChange() {\n    if (this.options) {\n      this._onChange(this._getSelectedOptionValues());\n    }\n  }\n\n  /** Emits a change event if the selected state of an option changed. */\n  _emitChangeEvent(option: MatListOption) {\n    this.selectionChange.emit(new MatSelectionListChange(this, option));\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  writeValue(values: string[]): void {\n    if (this.options) {\n      this._setOptionsFromValues(values || []);\n    } else {\n      this._tempValues = values;\n    }\n  }\n\n  /** Implemented as a part of ControlValueAccessor. */\n  setDisabledState(isDisabled: boolean): void {\n    if (this.options) {\n      this.options.forEach(option => option.disabled = isDisabled);\n    }\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  registerOnChange(fn: (value: any) => void): void {\n    this._onChange = fn;\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  registerOnTouched(fn: () => void): void {\n    this._onTouched = fn;\n  }\n\n  /** Sets the selected options based on the specified values. */\n  private _setOptionsFromValues(values: string[]) {\n    this.options.forEach(option => option._setSelected(false));\n\n    values\n      .map(value => {\n        return this.options.find(option =>\n            this.compareWith ? this.compareWith(option.value, value) : option.value === value);\n      })\n      .filter(Boolean)\n      .forEach(option => option!._setSelected(true));\n  }\n\n  /** Returns the values of the selected options. */\n  private _getSelectedOptionValues(): string[] {\n    return this.options.filter(option => option.selected).map(option => option.value);\n  }\n\n  /** Toggles the selected state of the currently focused option. */\n  private _toggleSelectOnFocusedOption(): void {\n    let focusedIndex = this._keyManager.activeItemIndex;\n\n    if (focusedIndex != null && this._isValidIndex(focusedIndex)) {\n      let focusedOption: MatListOption = this.options.toArray()[focusedIndex];\n\n      if (focusedOption) {\n        focusedOption.toggle();\n\n        // Emit a change event because the focused option changed its state through user\n        // interaction.\n        this._emitChangeEvent(focusedOption);\n      }\n    }\n  }\n\n  /**\n   * Sets the selected state on all of the options\n   * and emits an event if anything changed.\n   */\n  private _setAllOptionsSelected(isSelected: boolean) {\n    // Keep track of whether anything changed, because we only want to\n    // emit the changed event when something actually changed.\n    let hasChanged = false;\n\n    this.options.forEach(option => {\n      if (option._setSelected(isSelected)) {\n        hasChanged = true;\n      }\n    });\n\n    if (hasChanged) {\n      this._reportValueChange();\n    }\n  }\n\n  /**\n   * Utility to ensure all indexes are valid.\n   * @param index The index to be checked.\n   * @returns True if the index is valid for our list of options.\n   */\n  private _isValidIndex(index: number): boolean {\n    return index >= 0 && index < this.options.length;\n  }\n\n  /** Returns the index of the specified list option. */\n  private _getOptionIndex(option: MatListOption): number {\n    return this.options.toArray().indexOf(option);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {\n  MatCommonModule,\n  MatLineModule,\n  MatPseudoCheckboxModule,\n  MatRippleModule,\n} from '@angular/material/core';\nimport {\n  MatList,\n  MatNavList,\n  MatListAvatarCssMatStyler,\n  MatListIconCssMatStyler,\n  MatListItem,\n  MatListSubheaderCssMatStyler,\n} from './list';\nimport {MatListOption, MatSelectionList} from './selection-list';\nimport {MatDividerModule} from '@angular/material/divider';\n\n\n@NgModule({\n  imports: [MatLineModule, MatRippleModule, MatCommonModule, MatPseudoCheckboxModule, CommonModule],\n  exports: [\n    MatList,\n    MatNavList,\n    MatListItem,\n    MatListAvatarCssMatStyler,\n    MatLineModule,\n    MatCommonModule,\n    MatListIconCssMatStyler,\n    MatListSubheaderCssMatStyler,\n    MatPseudoCheckboxModule,\n    MatSelectionList,\n    MatListOption,\n    MatDividerModule\n  ],\n  declarations: [\n    MatList,\n    MatNavList,\n    MatListItem,\n    MatListAvatarCssMatStyler,\n    MatListIconCssMatStyler,\n    MatListSubheaderCssMatStyler,\n    MatSelectionList,\n    MatListOption\n  ],\n})\nexport class MatListModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  Component,\n  ContentChild,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  Optional,\n  QueryList,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {CanDisableRipple, MatLine, MatLineSetter, mixinDisableRipple} from '@angular/material/core';\n\n// Boilerplate for applying mixins to MatList.\n/** @docs-private */\nexport class MatListBase {}\nexport const _MatListMixinBase = mixinDisableRipple(MatListBase);\n\n// Boilerplate for applying mixins to MatListItem.\n/** @docs-private */\nexport class MatListItemBase {}\nexport const _MatListItemMixinBase = mixinDisableRipple(MatListItemBase);\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-nav-list',\n  exportAs: 'matNavList',\n  host: {\n    'role': 'navigation',\n    'class': 'mat-nav-list'\n  },\n  templateUrl: 'list.html',\n  styleUrls: ['list.css'],\n  inputs: ['disableRipple'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatNavList extends _MatListMixinBase implements CanDisableRipple {}\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-list',\n  exportAs: 'matList',\n  templateUrl: 'list.html',\n  host: {'class': 'mat-list'},\n  styleUrls: ['list.css'],\n  inputs: ['disableRipple'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatList extends _MatListMixinBase implements CanDisableRipple {}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-list-avatar], [matListAvatar]',\n  host: {'class': 'mat-list-avatar'}\n})\nexport class MatListAvatarCssMatStyler {}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-list-icon], [matListIcon]',\n  host: {'class': 'mat-list-icon'}\n})\nexport class MatListIconCssMatStyler {}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-subheader], [matSubheader]',\n  host: {'class': 'mat-subheader'}\n})\nexport class MatListSubheaderCssMatStyler {}\n\n/** An item within a Material Design list. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-list-item, a[mat-list-item]',\n  exportAs: 'matListItem',\n  host: {\n    'class': 'mat-list-item',\n    // @deletion-target 7.0.0 Remove `mat-list-item-avatar` in favor of `mat-list-item-with-avatar`.\n    '[class.mat-list-item-avatar]': '_avatar || _icon',\n    '[class.mat-list-item-with-avatar]': '_avatar || _icon',\n    '(focus)': '_handleFocus()',\n    '(blur)': '_handleBlur()',\n  },\n  inputs: ['disableRipple'],\n  templateUrl: 'list-item.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatListItem extends _MatListItemMixinBase implements AfterContentInit,\n    CanDisableRipple {\n  private _isNavList: boolean = false;\n\n  @ContentChildren(MatLine) _lines: QueryList<MatLine>;\n  @ContentChild(MatListAvatarCssMatStyler) _avatar: MatListAvatarCssMatStyler;\n  @ContentChild(MatListIconCssMatStyler) _icon: MatListIconCssMatStyler;\n\n  constructor(private _element: ElementRef,\n              @Optional() private _navList: MatNavList) {\n    super();\n    this._isNavList = !!_navList;\n  }\n\n  ngAfterContentInit() {\n    // TODO: consider turning the setter into a function, it doesn't do anything as a class.\n    // tslint:disable-next-line:no-unused-expression\n    new MatLineSetter(this._lines, this._element);\n  }\n\n  /** Whether this list item should show a ripple effect when clicked. */\n  _isRippleDisabled() {\n    return !this._isNavList || this.disableRipple || this._navList.disableRipple;\n  }\n\n  _handleFocus() {\n    this._element.nativeElement.classList.add('mat-list-item-focus');\n  }\n\n  _handleBlur() {\n    this._element.nativeElement.classList.remove('mat-list-item-focus');\n  }\n\n  /** Retrieves the DOM element of the component host. */\n  _getHostElement(): HTMLElement {\n    return this._element.nativeElement;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ViewEncapsulation,\n  ElementRef,\n  Input,\n  ContentChildren,\n  QueryList,\n  AfterContentInit,\n  Directive,\n  ChangeDetectionStrategy,\n} from '@angular/core';\nimport {MatLine, MatLineSetter} from '@angular/material/core';\nimport {coerceToNumber} from './grid-list-measure';\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-grid-tile',\n  exportAs: 'matGridTile',\n  host: {\n    'class': 'mat-grid-tile',\n  },\n  templateUrl: 'grid-tile.html',\n  styleUrls: ['grid-list.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatGridTile {\n  _rowspan: number = 1;\n  _colspan: number = 1;\n\n  constructor(private _element: ElementRef) {}\n\n  /** Amount of rows that the grid tile takes up. */\n  @Input()\n  get rowspan(): number { return this._rowspan; }\n  set rowspan(value: number) { this._rowspan = coerceToNumber(value); }\n\n  /** Amount of columns that the grid tile takes up. */\n  @Input()\n  get colspan(): number { return this._colspan; }\n  set colspan(value: number) { this._colspan = coerceToNumber(value); }\n\n  /**\n   * Sets the style of the grid-tile element.  Needs to be set manually to avoid\n   * \"Changed after checked\" errors that would occur with HostBinding.\n   */\n  _setStyle(property: string, value: any): void {\n    this._element.nativeElement.style[property] = value;\n  }\n}\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-grid-tile-header, mat-grid-tile-footer',\n  templateUrl: 'grid-tile-text.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatGridTileText implements AfterContentInit {\n  /**\n   *  Helper that watches the number of lines in a text area and sets\n   * a class on the host element that matches the line count.\n   */\n  _lineSetter: MatLineSetter;\n  @ContentChildren(MatLine) _lines: QueryList<MatLine>;\n\n  constructor(private _element: ElementRef) {}\n\n  ngAfterContentInit() {\n    this._lineSetter = new MatLineSetter(this._lines, this._element);\n  }\n}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-grid-avatar], [matGridAvatar]',\n  host: {'class': 'mat-grid-avatar'}\n})\nexport class MatGridAvatarCssMatStyler {}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-grid-tile-header',\n  host: {'class': 'mat-grid-tile-header'}\n})\nexport class MatGridTileHeaderCssMatStyler {}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-grid-tile-footer',\n  host: {'class': 'mat-grid-tile-footer'}\n})\nexport class MatGridTileFooterCssMatStyler {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {QueryList} from '@angular/core';\nimport {MatGridTile} from './grid-tile';\n\n/**\n * Class for determining, from a list of tiles, the (row, col) position of each of those tiles\n * in the grid. This is necessary (rather than just rendering the tiles in normal document flow)\n * because the tiles can have a rowspan.\n *\n * The positioning algorithm greedily places each tile as soon as it encounters a gap in the grid\n * large enough to accommodate it so that the tiles still render in the same order in which they\n * are given.\n *\n * The basis of the algorithm is the use of an array to track the already placed tiles. Each\n * element of the array corresponds to a column, and the value indicates how many cells in that\n * column are already occupied; zero indicates an empty cell. Moving \"down\" to the next row\n * decrements each value in the tracking array (indicating that the column is one cell closer to\n * being free).\n *\n * @docs-private\n */\nexport class TileCoordinator {\n  /** Tracking array (see class description). */\n  tracker: number[];\n\n  /** Index at which the search for the next gap will start. */\n  columnIndex: number = 0;\n\n  /** The current row index. */\n  rowIndex: number = 0;\n\n  /** Gets the total number of rows occupied by tiles */\n  get rowCount(): number { return this.rowIndex + 1; }\n\n  /**\n   * Gets the total span of rows occupied by tiles.\n   * Ex: A list with 1 row that contains a tile with rowspan 2 will have a total rowspan of 2.\n   */\n  get rowspan() {\n    let lastRowMax = Math.max(...this.tracker);\n    // if any of the tiles has a rowspan that pushes it beyond the total row count,\n    // add the difference to the rowcount\n    return lastRowMax > 1 ? this.rowCount + lastRowMax - 1 : this.rowCount;\n  }\n\n  /** The computed (row, col) position of each tile (the output). */\n  positions: TilePosition[];\n\n  constructor(numColumns: number, tiles: QueryList<MatGridTile>) {\n    this.tracker = new Array(numColumns);\n    this.tracker.fill(0, 0, this.tracker.length);\n\n    this.positions = tiles.map(tile => this._trackTile(tile));\n  }\n\n  /** Calculates the row and col position of a tile. */\n  private _trackTile(tile: MatGridTile): TilePosition {\n    // Find a gap large enough for this tile.\n    let gapStartIndex = this._findMatchingGap(tile.colspan);\n\n    // Place tile in the resulting gap.\n    this._markTilePosition(gapStartIndex, tile);\n\n    // The next time we look for a gap, the search will start at columnIndex, which should be\n    // immediately after the tile that has just been placed.\n    this.columnIndex = gapStartIndex + tile.colspan;\n\n    return new TilePosition(this.rowIndex, gapStartIndex);\n  }\n\n  /** Finds the next available space large enough to fit the tile. */\n  private _findMatchingGap(tileCols: number): number {\n    if (tileCols > this.tracker.length) {\n      throw Error(`mat-grid-list: tile with colspan ${tileCols} is wider than ` +\n                      `grid with cols=\"${this.tracker.length}\".`);\n    }\n\n    // Start index is inclusive, end index is exclusive.\n    let gapStartIndex = -1;\n    let gapEndIndex = -1;\n\n    // Look for a gap large enough to fit the given tile. Empty spaces are marked with a zero.\n    do {\n      // If we've reached the end of the row, go to the next row.\n      if (this.columnIndex + tileCols > this.tracker.length) {\n        this._nextRow();\n        continue;\n      }\n\n      gapStartIndex = this.tracker.indexOf(0, this.columnIndex);\n\n      // If there are no more empty spaces in this row at all, move on to the next row.\n      if (gapStartIndex == -1) {\n        this._nextRow();\n        continue;\n      }\n\n      gapEndIndex = this._findGapEndIndex(gapStartIndex);\n\n      // If a gap large enough isn't found, we want to start looking immediately after the current\n      // gap on the next iteration.\n      this.columnIndex = gapStartIndex + 1;\n\n      // Continue iterating until we find a gap wide enough for this tile.\n    } while (gapEndIndex - gapStartIndex < tileCols);\n\n    // If we still didn't manage to find a gap, ensure that the index is\n    // at least zero so the tile doesn't get pulled out of the grid.\n    return Math.max(gapStartIndex, 0);\n  }\n\n  /** Move \"down\" to the next row. */\n  private _nextRow(): void {\n    this.columnIndex = 0;\n    this.rowIndex++;\n\n    // Decrement all spaces by one to reflect moving down one row.\n    for (let i = 0; i < this.tracker.length; i++) {\n      this.tracker[i] = Math.max(0, this.tracker[i] - 1);\n    }\n  }\n\n  /**\n   * Finds the end index (exclusive) of a gap given the index from which to start looking.\n   * The gap ends when a non-zero value is found.\n   */\n  private _findGapEndIndex(gapStartIndex: number): number {\n    for (let i = gapStartIndex + 1; i < this.tracker.length; i++) {\n      if (this.tracker[i] != 0) {\n        return i;\n      }\n    }\n\n    // The gap ends with the end of the row.\n    return this.tracker.length;\n  }\n\n  /** Update the tile tracker to account for the given tile in the given space. */\n  private _markTilePosition(start: number, tile: MatGridTile): void {\n    for (let i = 0; i < tile.colspan; i++) {\n      this.tracker[start + i] = tile.rowspan;\n    }\n  }\n}\n\n/**\n * Simple data structure for tile position (row, col).\n * @docs-private\n */\nexport class TilePosition {\n  constructor(public row: number, public col: number) {}\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {MatGridList} from './grid-list';\nimport {MatGridTile} from './grid-tile';\nimport {TileCoordinator} from './tile-coordinator';\n\n/**\n * Sets the style properties for an individual tile, given the position calculated by the\n * Tile Coordinator.\n * @docs-private\n */\nexport abstract class TileStyler {\n  _gutterSize: string;\n  _rows: number = 0;\n  _rowspan: number = 0;\n  _cols: number;\n  _direction: string;\n\n  /**\n   * Adds grid-list layout info once it is available. Cannot be processed in the constructor\n   * because these properties haven't been calculated by that point.\n   *\n   * @param gutterSize Size of the grid's gutter.\n   * @param tracker Instance of the TileCoordinator.\n   * @param cols Amount of columns in the grid.\n   * @param direction Layout direction of the grid.\n   */\n  init(gutterSize: string, tracker: TileCoordinator, cols: number, direction: string): void {\n    this._gutterSize = normalizeUnits(gutterSize);\n    this._rows = tracker.rowCount;\n    this._rowspan = tracker.rowspan;\n    this._cols = cols;\n    this._direction = direction;\n  }\n\n  /**\n   * Computes the amount of space a single 1x1 tile would take up (width or height).\n   * Used as a basis for other calculations.\n   * @param sizePercent Percent of the total grid-list space that one 1x1 tile would take up.\n   * @param gutterFraction Fraction of the gutter size taken up by one 1x1 tile.\n   * @return The size of a 1x1 tile as an expression that can be evaluated via CSS calc().\n   */\n  getBaseTileSize(sizePercent: number, gutterFraction: number): string {\n    // Take the base size percent (as would be if evenly dividing the size between cells),\n    // and then subtracting the size of one gutter. However, since there are no gutters on the\n    // edges, each tile only uses a fraction (gutterShare = numGutters / numCells) of the gutter\n    // size. (Imagine having one gutter per tile, and then breaking up the extra gutter on the\n    // edge evenly among the cells).\n    return `(${sizePercent}% - (${this._gutterSize} * ${gutterFraction}))`;\n  }\n\n\n  /**\n   * Gets The horizontal or vertical position of a tile, e.g., the 'top' or 'left' property value.\n   * @param offset Number of tiles that have already been rendered in the row/column.\n   * @param baseSize Base size of a 1x1 tile (as computed in getBaseTileSize).\n   * @return Position of the tile as a CSS calc() expression.\n   */\n  getTilePosition(baseSize: string, offset: number): string {\n    // The position comes the size of a 1x1 tile plus gutter for each previous tile in the\n    // row/column (offset).\n    return offset === 0 ? '0' : calc(`(${baseSize} + ${this._gutterSize}) * ${offset}`);\n  }\n\n\n  /**\n   * Gets the actual size of a tile, e.g., width or height, taking rowspan or colspan into account.\n   * @param baseSize Base size of a 1x1 tile (as computed in getBaseTileSize).\n   * @param span The tile's rowspan or colspan.\n   * @return Size of the tile as a CSS calc() expression.\n   */\n  getTileSize(baseSize: string, span: number): string {\n    return `(${baseSize} * ${span}) + (${span - 1} * ${this._gutterSize})`;\n  }\n\n\n  /**\n   * Sets the style properties to be applied to a tile for the given row and column index.\n   * @param tile Tile to which to apply the styling.\n   * @param rowIndex Index of the tile's row.\n   * @param colIndex Index of the tile's column.\n   */\n  setStyle(tile: MatGridTile, rowIndex: number, colIndex: number): void {\n    // Percent of the available horizontal space that one column takes up.\n    let percentWidthPerTile = 100 / this._cols;\n\n    // Fraction of the vertical gutter size that each column takes up.\n    // For example, if there are 5 columns, each column uses 4/5 = 0.8 times the gutter width.\n    let gutterWidthFractionPerTile = (this._cols - 1) / this._cols;\n\n    this.setColStyles(tile, colIndex, percentWidthPerTile, gutterWidthFractionPerTile);\n    this.setRowStyles(tile, rowIndex, percentWidthPerTile, gutterWidthFractionPerTile);\n  }\n\n  /** Sets the horizontal placement of the tile in the list. */\n  setColStyles(tile: MatGridTile, colIndex: number, percentWidth: number,\n               gutterWidth: number) {\n    // Base horizontal size of a column.\n    let baseTileWidth = this.getBaseTileSize(percentWidth, gutterWidth);\n\n    // The width and horizontal position of each tile is always calculated the same way, but the\n    // height and vertical position depends on the rowMode.\n    let side = this._direction === 'rtl' ? 'right' : 'left';\n    tile._setStyle(side, this.getTilePosition(baseTileWidth, colIndex));\n    tile._setStyle('width', calc(this.getTileSize(baseTileWidth, tile.colspan)));\n  }\n\n  /**\n   * Calculates the total size taken up by gutters across one axis of a list.\n   */\n  getGutterSpan(): string {\n    return `${this._gutterSize} * (${this._rowspan} - 1)`;\n  }\n\n  /**\n   * Calculates the total size taken up by tiles across one axis of a list.\n   * @param tileHeight Height of the tile.\n   */\n  getTileSpan(tileHeight: string): string {\n    return `${this._rowspan} * ${this.getTileSize(tileHeight, 1)}`;\n  }\n\n  /**\n   * Sets the vertical placement of the tile in the list.\n   * This method will be implemented by each type of TileStyler.\n   * @docs-private\n   */\n  abstract setRowStyles(tile: MatGridTile, rowIndex: number, percentWidth: number,\n                        gutterWidth: number);\n\n  /**\n   * Calculates the computed height and returns the correct style property to set.\n   * This method can be implemented by each type of TileStyler.\n   * @docs-private\n   */\n  getComputedHeight(): [string, string] | null { return null; }\n\n  /**\n   * Called when the tile styler is swapped out with a different one. To be used for cleanup.\n   * @param list Grid list that the styler was attached to.\n   * @docs-private\n   */\n  abstract reset(list: MatGridList);\n}\n\n\n/**\n * This type of styler is instantiated when the user passes in a fixed row height.\n * Example `<mat-grid-list cols=\"3\" rowHeight=\"100px\">`\n * @docs-private\n */\nexport class FixedTileStyler extends TileStyler {\n\n  constructor(public fixedRowHeight: string) { super(); }\n\n  init(gutterSize: string, tracker: TileCoordinator, cols: number, direction: string) {\n    super.init(gutterSize, tracker, cols, direction);\n    this.fixedRowHeight = normalizeUnits(this.fixedRowHeight);\n  }\n\n  setRowStyles(tile: MatGridTile, rowIndex: number): void {\n    tile._setStyle('top', this.getTilePosition(this.fixedRowHeight, rowIndex));\n    tile._setStyle('height', calc(this.getTileSize(this.fixedRowHeight, tile.rowspan)));\n  }\n\n  getComputedHeight(): [string, string] {\n    return [\n      'height', calc(`${this.getTileSpan(this.fixedRowHeight)} + ${this.getGutterSpan()}`)\n    ];\n  }\n\n  reset(list: MatGridList) {\n    list._setListStyle(['height', null]);\n\n    list._tiles.forEach(tile => {\n      tile._setStyle('top', null);\n      tile._setStyle('height', null);\n    });\n  }\n}\n\n\n/**\n * This type of styler is instantiated when the user passes in a width:height ratio\n * for the row height.  Example `<mat-grid-list cols=\"3\" rowHeight=\"3:1\">`\n * @docs-private\n */\nexport class RatioTileStyler extends TileStyler {\n\n  /** Ratio width:height given by user to determine row height. */\n  rowHeightRatio: number;\n  baseTileHeight: string;\n\n  constructor(value: string) {\n    super();\n    this._parseRatio(value);\n  }\n\n  setRowStyles(tile: MatGridTile, rowIndex: number, percentWidth: number,\n               gutterWidth: number): void {\n    let percentHeightPerTile = percentWidth / this.rowHeightRatio;\n    this.baseTileHeight = this.getBaseTileSize(percentHeightPerTile, gutterWidth);\n\n    // Use padding-top and margin-top to maintain the given aspect ratio, as\n    // a percentage-based value for these properties is applied versus the *width* of the\n    // containing block. See http://www.w3.org/TR/CSS2/box.html#margin-properties\n    tile._setStyle('marginTop', this.getTilePosition(this.baseTileHeight, rowIndex));\n    tile._setStyle('paddingTop', calc(this.getTileSize(this.baseTileHeight, tile.rowspan)));\n  }\n\n  getComputedHeight(): [string, string] {\n    return [\n      'paddingBottom', calc(`${this.getTileSpan(this.baseTileHeight)} + ${this.getGutterSpan()}`)\n    ];\n  }\n\n  reset(list: MatGridList) {\n    list._setListStyle(['paddingBottom', null]);\n\n    list._tiles.forEach(tile => {\n      tile._setStyle('marginTop', null);\n      tile._setStyle('paddingTop', null);\n    });\n  }\n\n  private _parseRatio(value: string): void {\n    const ratioParts = value.split(':');\n\n    if (ratioParts.length !== 2) {\n      throw Error(`mat-grid-list: invalid ratio given for row-height: \"${value}\"`);\n    }\n\n    this.rowHeightRatio = parseFloat(ratioParts[0]) / parseFloat(ratioParts[1]);\n  }\n}\n\n/**\n * This type of styler is instantiated when the user selects a \"fit\" row height mode.\n * In other words, the row height will reflect the total height of the container divided\n * by the number of rows.  Example `<mat-grid-list cols=\"3\" rowHeight=\"fit\">`\n *\n * @docs-private\n */\nexport class FitTileStyler extends TileStyler {\n\n  setRowStyles(tile: MatGridTile, rowIndex: number): void {\n    // Percent of the available vertical space that one row takes up.\n    let percentHeightPerTile = 100 / this._rowspan;\n\n    // Fraction of the horizontal gutter size that each column takes up.\n    let gutterHeightPerTile = (this._rows - 1) / this._rows;\n\n    // Base vertical size of a column.\n    let baseTileHeight = this.getBaseTileSize(percentHeightPerTile, gutterHeightPerTile);\n\n    tile._setStyle('top', this.getTilePosition(baseTileHeight, rowIndex));\n    tile._setStyle('height', calc(this.getTileSize(baseTileHeight, tile.rowspan)));\n  }\n\n  reset(list: MatGridList) {\n    list._tiles.forEach(tile => {\n      tile._setStyle('top', null);\n      tile._setStyle('height', null);\n    });\n  }\n}\n\n\n/** Wraps a CSS string in a calc function */\nfunction calc(exp: string): string { return `calc(${exp})`; }\n\n\n/** Appends pixels to a CSS string if no units are given. */\nfunction normalizeUnits(value: string): string {\n  return (value.match(/px|em|rem/)) ? value : value + 'px';\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ViewEncapsulation,\n  AfterContentChecked,\n  OnInit,\n  Input,\n  ContentChildren,\n  QueryList,\n  ElementRef,\n  Optional,\n  ChangeDetectionStrategy,\n} from '@angular/core';\nimport {MatGridTile} from './grid-tile';\nimport {TileCoordinator} from './tile-coordinator';\nimport {TileStyler, FitTileStyler, RatioTileStyler, FixedTileStyler} from './tile-styler';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {\n  coerceToString,\n  coerceToNumber,\n} from './grid-list-measure';\n\n\n// TODO(kara): Conditional (responsive) column count / row size.\n// TODO(kara): Re-layout on window resize / media change (debounced).\n// TODO(kara): gridTileHeader and gridTileFooter.\n\nconst MAT_FIT_MODE = 'fit';\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-grid-list',\n  exportAs: 'matGridList',\n  templateUrl: 'grid-list.html',\n  styleUrls: ['grid-list.css'],\n  host: {\n    'class': 'mat-grid-list',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatGridList implements OnInit, AfterContentChecked {\n  /** Number of columns being rendered. */\n  private _cols: number;\n\n  /**\n   * Row height value passed in by user. This can be one of three types:\n   * - Number value (ex: \"100px\"):  sets a fixed row height to that value\n   * - Ratio value (ex: \"4:3\"): sets the row height based on width:height ratio\n   * - \"Fit\" mode (ex: \"fit\"): sets the row height to total height divided by number of rows\n   */\n  private _rowHeight: string;\n\n  /** The amount of space between tiles. This will be something like '5px' or '2em'. */\n  private _gutter: string = '1px';\n\n  /** Sets position and size styles for a tile */\n  private _tileStyler: TileStyler;\n\n  /** Query list of tiles that are being rendered. */\n  @ContentChildren(MatGridTile) _tiles: QueryList<MatGridTile>;\n\n  constructor(private _element: ElementRef, @Optional() private _dir: Directionality) {}\n\n  /** Amount of columns in the grid list. */\n  @Input()\n  get cols(): number { return this._cols; }\n  set cols(value: number) { this._cols = coerceToNumber(value); }\n\n  /** Size of the grid list's gutter in pixels. */\n  @Input()\n  get gutterSize(): string { return this._gutter; }\n  set gutterSize(value: string) { this._gutter = coerceToString(value); }\n\n  /** Set internal representation of row height from the user-provided value. */\n  @Input()\n  set rowHeight(value: string | number) {\n    const newValue = coerceToString(value);\n\n    if (newValue !== this._rowHeight) {\n      this._rowHeight = newValue;\n      this._setTileStyler(this._rowHeight);\n    }\n  }\n\n  ngOnInit() {\n    this._checkCols();\n    this._checkRowHeight();\n  }\n\n  /**\n   * The layout calculation is fairly cheap if nothing changes, so there's little cost\n   * to run it frequently.\n   */\n  ngAfterContentChecked() {\n    this._layoutTiles();\n  }\n\n  /** Throw a friendly error if cols property is missing */\n  private _checkCols() {\n    if (!this.cols) {\n      throw Error(`mat-grid-list: must pass in number of columns. ` +\n                  `Example: <mat-grid-list cols=\"3\">`);\n    }\n  }\n\n  /** Default to equal width:height if rowHeight property is missing */\n  private _checkRowHeight(): void {\n    if (!this._rowHeight) {\n      this._setTileStyler('1:1');\n    }\n  }\n\n  /** Creates correct Tile Styler subtype based on rowHeight passed in by user */\n  private _setTileStyler(rowHeight: string): void {\n    if (this._tileStyler) {\n      this._tileStyler.reset(this);\n    }\n\n    if (rowHeight === MAT_FIT_MODE) {\n      this._tileStyler = new FitTileStyler();\n    } else if (rowHeight && rowHeight.indexOf(':') > -1) {\n      this._tileStyler = new RatioTileStyler(rowHeight);\n    } else {\n      this._tileStyler = new FixedTileStyler(rowHeight);\n    }\n  }\n\n  /** Computes and applies the size and position for all children grid tiles. */\n  private _layoutTiles(): void {\n    const tracker = new TileCoordinator(this.cols, this._tiles);\n    const direction = this._dir ? this._dir.value : 'ltr';\n    this._tileStyler.init(this.gutterSize, tracker, this.cols, direction);\n\n    this._tiles.forEach((tile, index) => {\n      const pos = tracker.positions[index];\n      this._tileStyler.setStyle(tile, pos.row, pos.col);\n    });\n\n    this._setListStyle(this._tileStyler.getComputedHeight());\n  }\n\n  /** Sets style on the main grid-list element, given the style name and value. */\n  _setListStyle(style: [string, string | null] | null): void {\n    if (style) {\n      this._element.nativeElement.style[style[0]] = style[1];\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatLineModule, MatCommonModule} from '@angular/material/core';\nimport {\n  MatGridTile, MatGridTileText, MatGridTileFooterCssMatStyler,\n  MatGridTileHeaderCssMatStyler, MatGridAvatarCssMatStyler\n} from './grid-tile';\nimport {MatGridList} from './grid-list';\n\n\n@NgModule({\n  imports: [MatLineModule, MatCommonModule],\n  exports: [\n    MatGridList,\n    MatGridTile,\n    MatGridTileText,\n    MatLineModule,\n    MatCommonModule,\n    MatGridTileHeaderCssMatStyler,\n    MatGridTileFooterCssMatStyler,\n    MatGridAvatarCssMatStyler\n  ],\n  declarations: [\n    MatGridList,\n    MatGridTile,\n    MatGridTileText,\n    MatGridTileHeaderCssMatStyler,\n    MatGridTileFooterCssMatStyler,\n    MatGridAvatarCssMatStyler\n  ],\n})\nexport class MatGridListModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {DOCUMENT} from '@angular/common';\nimport {HttpClient, HttpErrorResponse} from '@angular/common/http';\nimport {\n  Inject,\n  Injectable,\n  InjectionToken,\n  Optional,\n  SecurityContext,\n  SkipSelf,\n} from '@angular/core';\nimport {DomSanitizer, SafeResourceUrl, SafeHtml} from '@angular/platform-browser';\nimport {forkJoin, Observable, of as observableOf, throwError as observableThrow} from 'rxjs';\nimport {catchError, finalize, map, share, tap} from 'rxjs/operators';\n\n\n/**\n * Returns an exception to be thrown in the case when attempting to\n * load an icon with a name that cannot be found.\n * @docs-private\n */\nexport function getMatIconNameNotFoundError(iconName: string): Error {\n  return Error(`Unable to find icon with the name \"${iconName}\"`);\n}\n\n\n/**\n * Returns an exception to be thrown when the consumer attempts to use\n * `<mat-icon>` without including @angular/http.\n * @docs-private\n */\nexport function getMatIconNoHttpProviderError(): Error {\n  return Error('Could not find HttpClient provider for use with Angular Material icons. ' +\n               'Please include the HttpClientModule from @angular/common/http in your ' +\n               'app imports.');\n}\n\n\n/**\n * Returns an exception to be thrown when a URL couldn't be sanitized.\n * @param url URL that was attempted to be sanitized.\n * @docs-private\n */\nexport function getMatIconFailedToSanitizeUrlError(url: SafeResourceUrl): Error {\n  return Error(`The URL provided to MatIconRegistry was not trusted as a resource URL ` +\n               `via Angular's DomSanitizer. Attempted URL was \"${url}\".`);\n}\n\n/**\n * Returns an exception to be thrown when a HTML string couldn't be sanitized.\n * @param literal HTML that was attempted to be sanitized.\n * @docs-private\n */\nexport function getMatIconFailedToSanitizeLiteralError(literal: SafeHtml): Error {\n  return Error(`The literal provided to MatIconRegistry was not trusted as safe HTML by ` +\n               `Angular's DomSanitizer. Attempted literal was \"${literal}\".`);\n}\n\n\n/**\n * Configuration for an icon, including the URL and possibly the cached SVG element.\n * @docs-private\n */\nclass SvgIconConfig {\n  url: SafeResourceUrl | null;\n  svgElement: SVGElement | null;\n\n  constructor(url: SafeResourceUrl);\n  constructor(svgElement: SVGElement);\n  constructor(data: SafeResourceUrl | SVGElement) {\n    // Note that we can't use `instanceof SVGElement` here,\n    // because it'll break during server-side rendering.\n    if (!!(data as any).nodeName) {\n      this.svgElement = data as SVGElement;\n    } else {\n      this.url = data as SafeResourceUrl;\n    }\n  }\n}\n\n/**\n * Service to register and display icons used by the `<mat-icon>` component.\n * - Registers icon URLs by namespace and name.\n * - Registers icon set URLs by namespace.\n * - Registers aliases for CSS classes, for use with icon fonts.\n * - Loads icons from URLs and extracts individual icons from icon sets.\n */\n@Injectable({providedIn: 'root'})\nexport class MatIconRegistry {\n  private _document: Document;\n\n  /**\n   * URLs and cached SVG elements for individual icons. Keys are of the format \"[namespace]:[icon]\".\n   */\n  private _svgIconConfigs = new Map<string, SvgIconConfig>();\n\n  /**\n   * SvgIconConfig objects and cached SVG elements for icon sets, keyed by namespace.\n   * Multiple icon sets can be registered under the same namespace.\n   */\n  private _iconSetConfigs = new Map<string, SvgIconConfig[]>();\n\n  /** Cache for icons loaded by direct URLs. */\n  private _cachedIconsByUrl = new Map<string, SVGElement>();\n\n  /** In-progress icon fetches. Used to coalesce multiple requests to the same URL. */\n  private _inProgressUrlFetches = new Map<string, Observable<string>>();\n\n  /** Map from font identifiers to their CSS class names. Used for icon fonts. */\n  private _fontCssClassesByAlias = new Map<string, string>();\n\n  /**\n   * The CSS class to apply when an `<mat-icon>` component has no icon name, url, or font specified.\n   * The default 'material-icons' value assumes that the material icon font has been loaded as\n   * described at http://google.github.io/material-design-icons/#icon-font-for-the-web\n   */\n  private _defaultFontSetClass = 'material-icons';\n\n  constructor(\n    @Optional() private _httpClient: HttpClient,\n    private _sanitizer: DomSanitizer,\n    @Optional() @Inject(DOCUMENT) document: any) {\n      this._document = document;\n    }\n\n  /**\n   * Registers an icon by URL in the default namespace.\n   * @param iconName Name under which the icon should be registered.\n   * @param url\n   */\n  addSvgIcon(iconName: string, url: SafeResourceUrl): this {\n    return this.addSvgIconInNamespace('', iconName, url);\n  }\n\n  /**\n   * Registers an icon using an HTML string in the default namespace.\n   * @param iconName Name under which the icon should be registered.\n   * @param literal SVG source of the icon.\n   */\n  addSvgIconLiteral(iconName: string, literal: SafeHtml): this {\n    return this.addSvgIconLiteralInNamespace('', iconName, literal);\n  }\n\n  /**\n   * Registers an icon by URL in the specified namespace.\n   * @param namespace Namespace in which the icon should be registered.\n   * @param iconName Name under which the icon should be registered.\n   * @param url\n   */\n  addSvgIconInNamespace(namespace: string, iconName: string, url: SafeResourceUrl): this {\n    return this._addSvgIconConfig(namespace, iconName, new SvgIconConfig(url));\n  }\n\n  /**\n   * Registers an icon using an HTML string in the specified namespace.\n   * @param namespace Namespace in which the icon should be registered.\n   * @param iconName Name under which the icon should be registered.\n   * @param literal SVG source of the icon.\n   */\n  addSvgIconLiteralInNamespace(namespace: string, iconName: string, literal: SafeHtml): this {\n    const sanitizedLiteral = this._sanitizer.sanitize(SecurityContext.HTML, literal);\n\n    if (!sanitizedLiteral) {\n      throw getMatIconFailedToSanitizeLiteralError(literal);\n    }\n\n    const svgElement = this._createSvgElementForSingleIcon(sanitizedLiteral);\n    return this._addSvgIconConfig(namespace, iconName, new SvgIconConfig(svgElement));\n  }\n\n  /**\n   * Registers an icon set by URL in the default namespace.\n   * @param url\n   */\n  addSvgIconSet(url: SafeResourceUrl): this {\n    return this.addSvgIconSetInNamespace('', url);\n  }\n\n  /**\n   * Registers an icon set using an HTML string in the default namespace.\n   * @param literal SVG source of the icon set.\n   */\n  addSvgIconSetLiteral(literal: SafeHtml): this {\n    return this.addSvgIconSetLiteralInNamespace('', literal);\n  }\n\n  /**\n   * Registers an icon set by URL in the specified namespace.\n   * @param namespace Namespace in which to register the icon set.\n   * @param url\n   */\n  addSvgIconSetInNamespace(namespace: string, url: SafeResourceUrl): this {\n    return this._addSvgIconSetConfig(namespace, new SvgIconConfig(url));\n  }\n\n  /**\n   * Registers an icon set using an HTML string in the specified namespace.\n   * @param namespace Namespace in which to register the icon set.\n   * @param literal SVG source of the icon set.\n   */\n  addSvgIconSetLiteralInNamespace(namespace: string, literal: SafeHtml): this {\n    const sanitizedLiteral = this._sanitizer.sanitize(SecurityContext.HTML, literal);\n\n    if (!sanitizedLiteral) {\n      throw getMatIconFailedToSanitizeLiteralError(literal);\n    }\n\n    const svgElement = this._svgElementFromString(sanitizedLiteral);\n    return this._addSvgIconSetConfig(namespace, new SvgIconConfig(svgElement));\n  }\n\n  /**\n   * Defines an alias for a CSS class name to be used for icon fonts. Creating an matIcon\n   * component with the alias as the fontSet input will cause the class name to be applied\n   * to the `<mat-icon>` element.\n   *\n   * @param alias Alias for the font.\n   * @param className Class name override to be used instead of the alias.\n   */\n  registerFontClassAlias(alias: string, className: string = alias): this {\n    this._fontCssClassesByAlias.set(alias, className);\n    return this;\n  }\n\n  /**\n   * Returns the CSS class name associated with the alias by a previous call to\n   * registerFontClassAlias. If no CSS class has been associated, returns the alias unmodified.\n   */\n  classNameForFontAlias(alias: string): string {\n    return this._fontCssClassesByAlias.get(alias) || alias;\n  }\n\n  /**\n   * Sets the CSS class name to be used for icon fonts when an `<mat-icon>` component does not\n   * have a fontSet input value, and is not loading an icon by name or URL.\n   *\n   * @param className\n   */\n  setDefaultFontSetClass(className: string): this {\n    this._defaultFontSetClass = className;\n    return this;\n  }\n\n  /**\n   * Returns the CSS class name to be used for icon fonts when an `<mat-icon>` component does not\n   * have a fontSet input value, and is not loading an icon by name or URL.\n   */\n  getDefaultFontSetClass(): string {\n    return this._defaultFontSetClass;\n  }\n\n  /**\n   * Returns an Observable that produces the icon (as an `<svg>` DOM element) from the given URL.\n   * The response from the URL may be cached so this will not always cause an HTTP request, but\n   * the produced element will always be a new copy of the originally fetched icon. (That is,\n   * it will not contain any modifications made to elements previously returned).\n   *\n   * @param safeUrl URL from which to fetch the SVG icon.\n   */\n  getSvgIconFromUrl(safeUrl: SafeResourceUrl): Observable<SVGElement> {\n    const url = this._sanitizer.sanitize(SecurityContext.RESOURCE_URL, safeUrl);\n\n    if (!url) {\n      throw getMatIconFailedToSanitizeUrlError(safeUrl);\n    }\n\n    const cachedIcon = this._cachedIconsByUrl.get(url);\n\n    if (cachedIcon) {\n      return observableOf(cloneSvg(cachedIcon));\n    }\n\n    return this._loadSvgIconFromConfig(new SvgIconConfig(safeUrl)).pipe(\n      tap(svg => this._cachedIconsByUrl.set(url!, svg)),\n      map(svg => cloneSvg(svg)),\n    );\n  }\n\n  /**\n   * Returns an Observable that produces the icon (as an `<svg>` DOM element) with the given name\n   * and namespace. The icon must have been previously registered with addIcon or addIconSet;\n   * if not, the Observable will throw an error.\n   *\n   * @param name Name of the icon to be retrieved.\n   * @param namespace Namespace in which to look for the icon.\n   */\n  getNamedSvgIcon(name: string, namespace: string = ''): Observable<SVGElement> {\n    // Return (copy of) cached icon if possible.\n    const key = iconKey(namespace, name);\n    const config = this._svgIconConfigs.get(key);\n\n    if (config) {\n      return this._getSvgFromConfig(config);\n    }\n\n    // See if we have any icon sets registered for the namespace.\n    const iconSetConfigs = this._iconSetConfigs.get(namespace);\n\n    if (iconSetConfigs) {\n      return this._getSvgFromIconSetConfigs(name, iconSetConfigs);\n    }\n\n    return observableThrow(getMatIconNameNotFoundError(key));\n  }\n\n  /**\n   * Returns the cached icon for a SvgIconConfig if available, or fetches it from its URL if not.\n   */\n  private _getSvgFromConfig(config: SvgIconConfig): Observable<SVGElement> {\n    if (config.svgElement) {\n      // We already have the SVG element for this icon, return a copy.\n      return observableOf(cloneSvg(config.svgElement));\n    } else {\n      // Fetch the icon from the config's URL, cache it, and return a copy.\n      return this._loadSvgIconFromConfig(config).pipe(\n        tap(svg => config.svgElement = svg),\n        map(svg => cloneSvg(svg)),\n      );\n    }\n  }\n\n  /**\n   * Attempts to find an icon with the specified name in any of the SVG icon sets.\n   * First searches the available cached icons for a nested element with a matching name, and\n   * if found copies the element to a new `<svg>` element. If not found, fetches all icon sets\n   * that have not been cached, and searches again after all fetches are completed.\n   * The returned Observable produces the SVG element if possible, and throws\n   * an error if no icon with the specified name can be found.\n   */\n  private _getSvgFromIconSetConfigs(name: string, iconSetConfigs: SvgIconConfig[]):\n      Observable<SVGElement> {\n    // For all the icon set SVG elements we've fetched, see if any contain an icon with the\n    // requested name.\n    const namedIcon = this._extractIconWithNameFromAnySet(name, iconSetConfigs);\n\n    if (namedIcon) {\n      // We could cache namedIcon in _svgIconConfigs, but since we have to make a copy every\n      // time anyway, there's probably not much advantage compared to just always extracting\n      // it from the icon set.\n      return observableOf(namedIcon);\n    }\n\n    // Not found in any cached icon sets. If there are icon sets with URLs that we haven't\n    // fetched, fetch them now and look for iconName in the results.\n    const iconSetFetchRequests: Observable<SVGElement | null>[] = iconSetConfigs\n      .filter(iconSetConfig => !iconSetConfig.svgElement)\n      .map(iconSetConfig => {\n        return this._loadSvgIconSetFromConfig(iconSetConfig).pipe(\n          catchError((err: HttpErrorResponse): Observable<SVGElement | null> => {\n            const url = this._sanitizer.sanitize(SecurityContext.RESOURCE_URL, iconSetConfig.url);\n\n            // Swallow errors fetching individual URLs so the\n            // combined Observable won't necessarily fail.\n            console.error(`Loading icon set URL: ${url} failed: ${err.message}`);\n            return observableOf(null);\n          })\n        );\n      });\n\n    // Fetch all the icon set URLs. When the requests complete, every IconSet should have a\n    // cached SVG element (unless the request failed), and we can check again for the icon.\n    return forkJoin(iconSetFetchRequests).pipe(map(() => {\n      const foundIcon = this._extractIconWithNameFromAnySet(name, iconSetConfigs);\n\n      if (!foundIcon) {\n        throw getMatIconNameNotFoundError(name);\n      }\n\n      return foundIcon;\n    }));\n  }\n\n  /**\n   * Searches the cached SVG elements for the given icon sets for a nested icon element whose \"id\"\n   * tag matches the specified name. If found, copies the nested element to a new SVG element and\n   * returns it. Returns null if no matching element is found.\n   */\n  private _extractIconWithNameFromAnySet(iconName: string, iconSetConfigs: SvgIconConfig[]):\n      SVGElement | null {\n    // Iterate backwards, so icon sets added later have precedence.\n    for (let i = iconSetConfigs.length - 1; i >= 0; i--) {\n      const config = iconSetConfigs[i];\n      if (config.svgElement) {\n        const foundIcon = this._extractSvgIconFromSet(config.svgElement, iconName);\n        if (foundIcon) {\n          return foundIcon;\n        }\n      }\n    }\n    return null;\n  }\n\n  /**\n   * Loads the content of the icon URL specified in the SvgIconConfig and creates an SVG element\n   * from it.\n   */\n  private _loadSvgIconFromConfig(config: SvgIconConfig): Observable<SVGElement> {\n    return this._fetchUrl(config.url)\n        .pipe(map(svgText => this._createSvgElementForSingleIcon(svgText)));\n  }\n\n  /**\n   * Loads the content of the icon set URL specified in the SvgIconConfig and creates an SVG element\n   * from it.\n   */\n  private _loadSvgIconSetFromConfig(config: SvgIconConfig): Observable<SVGElement> {\n    // If the SVG for this icon set has already been parsed, do nothing.\n    if (config.svgElement) {\n      return observableOf(config.svgElement);\n    }\n\n    return this._fetchUrl(config.url).pipe(map(svgText => {\n      // It is possible that the icon set was parsed and cached by an earlier request, so parsing\n      // only needs to occur if the cache is yet unset.\n      if (!config.svgElement) {\n        config.svgElement = this._svgElementFromString(svgText);\n      }\n\n      return config.svgElement;\n    }));\n  }\n\n  /**\n   * Creates a DOM element from the given SVG string, and adds default attributes.\n   */\n  private _createSvgElementForSingleIcon(responseText: string): SVGElement {\n    const svg = this._svgElementFromString(responseText);\n    this._setSvgAttributes(svg);\n    return svg;\n  }\n\n  /**\n   * Searches the cached element of the given SvgIconConfig for a nested icon element whose \"id\"\n   * tag matches the specified name. If found, copies the nested element to a new SVG element and\n   * returns it. Returns null if no matching element is found.\n   */\n  private _extractSvgIconFromSet(iconSet: SVGElement, iconName: string): SVGElement | null {\n    const iconSource = iconSet.querySelector('#' + iconName);\n\n    if (!iconSource) {\n      return null;\n    }\n\n    // Clone the element and remove the ID to prevent multiple elements from being added\n    // to the page with the same ID.\n    const iconElement = iconSource.cloneNode(true) as Element;\n    iconElement.removeAttribute('id');\n\n    // If the icon node is itself an <svg> node, clone and return it directly. If not, set it as\n    // the content of a new <svg> node.\n    if (iconElement.nodeName.toLowerCase() === 'svg') {\n      return this._setSvgAttributes(iconElement as SVGElement);\n    }\n\n    // If the node is a <symbol>, it won't be rendered so we have to convert it into <svg>. Note\n    // that the same could be achieved by referring to it via <use href=\"#id\">, however the <use>\n    // tag is problematic on Firefox, because it needs to include the current page path.\n    if (iconElement.nodeName.toLowerCase() === 'symbol') {\n      return this._setSvgAttributes(this._toSvgElement(iconElement));\n    }\n\n    // createElement('SVG') doesn't work as expected; the DOM ends up with\n    // the correct nodes, but the SVG content doesn't render. Instead we\n    // have to create an empty SVG node using innerHTML and append its content.\n    // Elements created using DOMParser.parseFromString have the same problem.\n    // http://stackoverflow.com/questions/23003278/svg-innerhtml-in-firefox-can-not-display\n    const svg = this._svgElementFromString('<svg></svg>');\n    // Clone the node so we don't remove it from the parent icon set element.\n    svg.appendChild(iconElement);\n\n    return this._setSvgAttributes(svg);\n  }\n\n  /**\n   * Creates a DOM element from the given SVG string.\n   */\n  private _svgElementFromString(str: string): SVGElement {\n    const div = this._document.createElement('DIV');\n    div.innerHTML = str;\n    const svg = div.querySelector('svg') as SVGElement;\n\n    if (!svg) {\n      throw Error('<svg> tag not found');\n    }\n\n    return svg;\n  }\n\n  /**\n   * Converts an element into an SVG node by cloning all of its children.\n   */\n  private _toSvgElement(element: Element): SVGElement {\n    let svg = this._svgElementFromString('<svg></svg>');\n\n    for (let i = 0; i < element.childNodes.length; i++) {\n      if (element.childNodes[i].nodeType === this._document.ELEMENT_NODE) {\n        svg.appendChild(element.childNodes[i].cloneNode(true));\n      }\n    }\n\n    return svg;\n  }\n\n  /**\n   * Sets the default attributes for an SVG element to be used as an icon.\n   */\n  private _setSvgAttributes(svg: SVGElement): SVGElement {\n    svg.setAttribute('fit', '');\n    svg.setAttribute('height', '100%');\n    svg.setAttribute('width', '100%');\n    svg.setAttribute('preserveAspectRatio', 'xMidYMid meet');\n    svg.setAttribute('focusable', 'false'); // Disable IE11 default behavior to make SVGs focusable.\n    return svg;\n  }\n\n  /**\n   * Returns an Observable which produces the string contents of the given URL. Results may be\n   * cached, so future calls with the same URL may not cause another HTTP request.\n   */\n  private _fetchUrl(safeUrl: SafeResourceUrl | null): Observable<string> {\n    if (!this._httpClient) {\n      throw getMatIconNoHttpProviderError();\n    }\n\n    if (safeUrl == null) {\n      throw Error(`Cannot fetch icon from URL \"${safeUrl}\".`);\n    }\n\n    const url = this._sanitizer.sanitize(SecurityContext.RESOURCE_URL, safeUrl);\n\n    if (!url) {\n      throw getMatIconFailedToSanitizeUrlError(safeUrl);\n    }\n\n    // Store in-progress fetches to avoid sending a duplicate request for a URL when there is\n    // already a request in progress for that URL. It's necessary to call share() on the\n    // Observable returned by http.get() so that multiple subscribers don't cause multiple XHRs.\n    const inProgressFetch = this._inProgressUrlFetches.get(url);\n\n    if (inProgressFetch) {\n      return inProgressFetch;\n    }\n\n    // TODO(jelbourn): for some reason, the `finalize` operator \"loses\" the generic type on the\n    // Observable. Figure out why and fix it.\n    const req = this._httpClient.get(url, {responseType: 'text'}).pipe(\n      finalize(() => this._inProgressUrlFetches.delete(url)),\n      share(),\n    );\n\n    this._inProgressUrlFetches.set(url, req);\n    return req;\n  }\n\n  /**\n   * Registers an icon config by name in the specified namespace.\n   * @param namespace Namespace in which to register the icon config.\n   * @param iconName Name under which to register the config.\n   * @param config Config to be registered.\n   */\n  private _addSvgIconConfig(namespace: string, iconName: string, config: SvgIconConfig): this {\n    this._svgIconConfigs.set(iconKey(namespace, iconName), config);\n    return this;\n  }\n\n  /**\n   * Registers an icon set config in the specified namespace.\n   * @param namespace Namespace in which to register the icon config.\n   * @param config Config to be registered.\n   */\n  private _addSvgIconSetConfig(namespace: string, config: SvgIconConfig): this {\n    const configNamespace = this._iconSetConfigs.get(namespace);\n\n    if (configNamespace) {\n      configNamespace.push(config);\n    } else {\n      this._iconSetConfigs.set(namespace, [config]);\n    }\n\n    return this;\n  }\n}\n\n/** @docs-private */\nexport function ICON_REGISTRY_PROVIDER_FACTORY(\n  parentRegistry: MatIconRegistry,\n  httpClient: HttpClient,\n  sanitizer: DomSanitizer,\n  document?: any) {\n  return parentRegistry || new MatIconRegistry(httpClient, sanitizer, document);\n}\n\n/** @docs-private */\nexport const ICON_REGISTRY_PROVIDER = {\n  // If there is already an MatIconRegistry available, use that. Otherwise, provide a new one.\n  provide: MatIconRegistry,\n  deps: [\n    [new Optional(), new SkipSelf(), MatIconRegistry],\n    [new Optional(), HttpClient],\n    DomSanitizer,\n    [new Optional(), DOCUMENT as InjectionToken<any>],\n  ],\n  useFactory: ICON_REGISTRY_PROVIDER_FACTORY,\n};\n\n/** Clones an SVGElement while preserving type information. */\nfunction cloneSvg(svg: SVGElement): SVGElement {\n  return svg.cloneNode(true) as SVGElement;\n}\n\n/** Returns the cache key to use for an icon namespace and name. */\nfunction iconKey(namespace: string, name: string) {\n  return namespace + ':' + name;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {take} from 'rxjs/operators';\nimport {\n  Attribute,\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  Input,\n  OnChanges,\n  OnInit,\n  SimpleChanges,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {CanColor, mixinColor} from '@angular/material/core';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {MatIconRegistry} from './icon-registry';\n\n\n// Boilerplate for applying mixins to MatIcon.\n/** @docs-private */\nexport class MatIconBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatIconMixinBase = mixinColor(MatIconBase);\n\n\n/**\n * Component to display an icon. It can be used in the following ways:\n *\n * - Specify the svgIcon input to load an SVG icon from a URL previously registered with the\n *   addSvgIcon, addSvgIconInNamespace, addSvgIconSet, or addSvgIconSetInNamespace methods of\n *   MatIconRegistry. If the svgIcon value contains a colon it is assumed to be in the format\n *   \"[namespace]:[name]\", if not the value will be the name of an icon in the default namespace.\n *   Examples:\n *     `<mat-icon svgIcon=\"left-arrow\"></mat-icon>\n *     <mat-icon svgIcon=\"animals:cat\"></mat-icon>`\n *\n * - Use a font ligature as an icon by putting the ligature text in the content of the `<mat-icon>`\n *   component. By default the Material icons font is used as described at\n *   http://google.github.io/material-design-icons/#icon-font-for-the-web. You can specify an\n *   alternate font by setting the fontSet input to either the CSS class to apply to use the\n *   desired font, or to an alias previously registered with MatIconRegistry.registerFontClassAlias.\n *   Examples:\n *     `<mat-icon>home</mat-icon>\n *     <mat-icon fontSet=\"myfont\">sun</mat-icon>`\n *\n * - Specify a font glyph to be included via CSS rules by setting the fontSet input to specify the\n *   font, and the fontIcon input to specify the icon. Typically the fontIcon will specify a\n *   CSS class which causes the glyph to be displayed via a :before selector, as in\n *   https://fortawesome.github.io/Font-Awesome/examples/\n *   Example:\n *     `<mat-icon fontSet=\"fa\" fontIcon=\"alarm\"></mat-icon>`\n */\n@Component({\n  moduleId: module.id,\n  template: '<ng-content></ng-content>',\n  selector: 'mat-icon',\n  exportAs: 'matIcon',\n  styleUrls: ['icon.css'],\n  inputs: ['color'],\n  host: {\n    'role': 'img',\n    'class': 'mat-icon',\n    '[class.mat-icon-inline]': 'inline',\n  },\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatIcon extends _MatIconMixinBase implements OnChanges, OnInit, CanColor {\n  /**\n   * Whether the icon should be inlined, automatically sizing the icon to match the font size of\n   * the element the icon is contained in.\n   */\n  @Input()\n  get inline(): boolean {\n    return this._inline;\n  }\n  set inline(inline: boolean) {\n    this._inline = coerceBooleanProperty(inline);\n  }\n  private _inline: boolean = false;\n\n  /** Name of the icon in the SVG icon set. */\n  @Input() svgIcon: string;\n\n  /** Font set that the icon is a part of. */\n  @Input()\n  get fontSet(): string { return this._fontSet; }\n  set fontSet(value: string) {\n    this._fontSet = this._cleanupFontValue(value);\n  }\n  private _fontSet: string;\n\n  /** Name of an icon within a font set. */\n  @Input()\n  get fontIcon(): string { return this._fontIcon; }\n  set fontIcon(value: string) {\n    this._fontIcon = this._cleanupFontValue(value);\n  }\n  private _fontIcon: string;\n\n  private _previousFontSetClass: string;\n  private _previousFontIconClass: string;\n\n  constructor(\n      elementRef: ElementRef,\n      private _iconRegistry: MatIconRegistry,\n      @Attribute('aria-hidden') ariaHidden: string) {\n    super(elementRef);\n\n    // If the user has not explicitly set aria-hidden, mark the icon as hidden, as this is\n    // the right thing to do for the majority of icon use-cases.\n    if (!ariaHidden) {\n      elementRef.nativeElement.setAttribute('aria-hidden', 'true');\n    }\n  }\n\n  /**\n   * Splits an svgIcon binding value into its icon set and icon name components.\n   * Returns a 2-element array of [(icon set), (icon name)].\n   * The separator for the two fields is ':'. If there is no separator, an empty\n   * string is returned for the icon set and the entire value is returned for\n   * the icon name. If the argument is falsy, returns an array of two empty strings.\n   * Throws an error if the name contains two or more ':' separators.\n   * Examples:\n   *   `'social:cake' -> ['social', 'cake']\n   *   'penguin' -> ['', 'penguin']\n   *   null -> ['', '']\n   *   'a:b:c' -> (throws Error)`\n   */\n  private _splitIconName(iconName: string): [string, string] {\n    if (!iconName) {\n      return ['', ''];\n    }\n    const parts = iconName.split(':');\n    switch (parts.length) {\n      case 1: return ['', parts[0]]; // Use default namespace.\n      case 2: return <[string, string]>parts;\n      default: throw Error(`Invalid icon name: \"${iconName}\"`);\n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    // Only update the inline SVG icon if the inputs changed, to avoid unnecessary DOM operations.\n    if (changes.svgIcon) {\n      if (this.svgIcon) {\n        const [namespace, iconName] = this._splitIconName(this.svgIcon);\n\n        this._iconRegistry.getNamedSvgIcon(iconName, namespace).pipe(take(1)).subscribe(\n          svg => this._setSvgElement(svg),\n          (err: Error) => console.log(`Error retrieving icon: ${err.message}`)\n        );\n      } else {\n        this._clearSvgElement();\n      }\n    }\n\n    if (this._usingFontIcon()) {\n      this._updateFontIconClasses();\n    }\n  }\n\n  ngOnInit() {\n    // Update font classes because ngOnChanges won't be called if none of the inputs are present,\n    // e.g. <mat-icon>arrow</mat-icon> In this case we need to add a CSS class for the default font.\n    if (this._usingFontIcon()) {\n      this._updateFontIconClasses();\n    }\n  }\n\n  private _usingFontIcon(): boolean {\n    return !this.svgIcon;\n  }\n\n  private _setSvgElement(svg: SVGElement) {\n    this._clearSvgElement();\n\n    // Workaround for IE11 and Edge ignoring `style` tags inside dynamically-created SVGs.\n    // See: https://developer.microsoft.com/en-us/microsoft-edge/platform/issues/10898469/\n    // Do this before inserting the element into the DOM, in order to avoid a style recalculation.\n    const styleTags = svg.querySelectorAll('style') as NodeListOf<HTMLStyleElement>;\n\n    for (let i = 0; i < styleTags.length; i++) {\n      styleTags[i].textContent += ' ';\n    }\n\n    this._elementRef.nativeElement.appendChild(svg);\n  }\n\n  private _clearSvgElement() {\n    const layoutElement: HTMLElement = this._elementRef.nativeElement;\n    let childCount = layoutElement.childNodes.length;\n\n    // Remove existing non-element child nodes and SVGs, and add the new SVG element. Note that\n    // we can't use innerHTML, because IE will throw if the element has a data binding.\n    while (childCount--) {\n      const child = layoutElement.childNodes[childCount];\n\n      // 1 corresponds to Node.ELEMENT_NODE. We remove all non-element nodes in order to get rid\n      // of any loose text nodes, as well as any SVG elements in order to remove any old icons.\n      if (child.nodeType !== 1 || child.nodeName.toLowerCase() === 'svg') {\n        layoutElement.removeChild(child);\n      }\n    }\n  }\n\n  private _updateFontIconClasses() {\n    if (!this._usingFontIcon()) {\n      return;\n    }\n\n    const elem: HTMLElement = this._elementRef.nativeElement;\n    const fontSetClass = this.fontSet ?\n        this._iconRegistry.classNameForFontAlias(this.fontSet) :\n        this._iconRegistry.getDefaultFontSetClass();\n\n    if (fontSetClass != this._previousFontSetClass) {\n      if (this._previousFontSetClass) {\n        elem.classList.remove(this._previousFontSetClass);\n      }\n      if (fontSetClass) {\n        elem.classList.add(fontSetClass);\n      }\n      this._previousFontSetClass = fontSetClass;\n    }\n\n    if (this.fontIcon != this._previousFontIconClass) {\n      if (this._previousFontIconClass) {\n        elem.classList.remove(this._previousFontIconClass);\n      }\n      if (this.fontIcon) {\n        elem.classList.add(this.fontIcon);\n      }\n      this._previousFontIconClass = this.fontIcon;\n    }\n  }\n\n  /**\n   * Cleans up a value to be used as a fontIcon or fontSet.\n   * Since the value ends up being assigned as a CSS class, we\n   * have to trim the value and omit space-separated values.\n   */\n  private _cleanupFontValue(value: string) {\n    return typeof value === 'string' ? value.trim().split(' ')[0] : value;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatIcon} from './icon';\n\n\n@NgModule({\n  imports: [MatCommonModule],\n  exports: [MatIcon, MatCommonModule],\n  declarations: [MatIcon],\n})\nexport class MatIconModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {ESCAPE, UP_ARROW} from '@angular/cdk/keycodes';\nimport {\n  Overlay,\n  OverlayConfig,\n  OverlayRef,\n  PositionStrategy,\n  ScrollStrategy,\n} from '@angular/cdk/overlay';\nimport {ComponentPortal, ComponentType} from '@angular/cdk/portal';\nimport {DOCUMENT} from '@angular/common';\nimport {take, filter} from 'rxjs/operators';\nimport {\n  AfterViewInit,\n  ChangeDetectionStrategy,\n  Component,\n  ComponentRef,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  Optional,\n  Output,\n  ViewChild,\n  ViewContainerRef,\n  ViewEncapsulation,\n  OnDestroy,\n} from '@angular/core';\nimport {CanColor, DateAdapter, mixinColor, ThemePalette} from '@angular/material/core';\nimport {MatDialog, MatDialogRef} from '@angular/material/dialog';\nimport {merge, Subject, Subscription} from 'rxjs';\nimport {createMissingDateImplError} from './datepicker-errors';\nimport {MatDatepickerInput} from './datepicker-input';\nimport {MatCalendar} from './calendar';\nimport {matDatepickerAnimations} from './datepicker-animations';\n\n/** Used to generate a unique ID for each datepicker instance. */\nlet datepickerUid = 0;\n\n/** Injection token that determines the scroll handling while the calendar is open. */\nexport const MAT_DATEPICKER_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mat-datepicker-scroll-strategy');\n\n/** @docs-private */\nexport function MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY(overlay: Overlay): () => ScrollStrategy {\n  return () => overlay.scrollStrategies.reposition();\n}\n\n/** @docs-private */\nexport const MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY_PROVIDER = {\n  provide: MAT_DATEPICKER_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY,\n};\n\n// Boilerplate for applying mixins to MatDatepickerContent.\n/** @docs-private */\nexport class MatDatepickerContentBase {\n  constructor(public _elementRef: ElementRef) { }\n}\nexport const _MatDatepickerContentMixinBase = mixinColor(MatDatepickerContentBase);\n\n/**\n * Component used as the content for the datepicker dialog and popup. We use this instead of using\n * MatCalendar directly as the content so we can control the initial focus. This also gives us a\n * place to put additional features of the popup that are not part of the calendar itself in the\n * future. (e.g. confirmation buttons).\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-datepicker-content',\n  templateUrl: 'datepicker-content.html',\n  styleUrls: ['datepicker-content.css'],\n  host: {\n    'class': 'mat-datepicker-content',\n    '[@transformPanel]': '\"enter\"',\n    '[class.mat-datepicker-content-touch]': 'datepicker.touchUi',\n  },\n  animations: [\n    matDatepickerAnimations.transformPanel,\n    matDatepickerAnimations.fadeInCalendar,\n  ],\n  exportAs: 'matDatepickerContent',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  inputs: ['color'],\n})\nexport class MatDatepickerContent<D> extends _MatDatepickerContentMixinBase\n  implements AfterViewInit, CanColor {\n\n  /** Reference to the internal calendar component. */\n  @ViewChild(MatCalendar) _calendar: MatCalendar<D>;\n\n  /** Reference to the datepicker that created the overlay. */\n  datepicker: MatDatepicker<D>;\n\n  /** Whether the datepicker is above or below the input. */\n  _isAbove: boolean;\n\n  constructor(elementRef: ElementRef) {\n    super(elementRef);\n  }\n\n  ngAfterViewInit() {\n    this._calendar.focusActiveCell();\n  }\n}\n\n\n// TODO(mmalerba): We use a component instead of a directive here so the user can use implicit\n// template reference variables (e.g. #d vs #d=\"matDatepicker\"). We can change this to a directive\n// if angular adds support for `exportAs: '$implicit'` on directives.\n/** Component responsible for managing the datepicker popup/dialog. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-datepicker',\n  template: '',\n  exportAs: 'matDatepicker',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatDatepicker<D> implements OnDestroy, CanColor {\n  /** An input indicating the type of the custom header component for the calendar, if set. */\n  @Input() calendarHeaderComponent: ComponentType<any>;\n\n  /** The date to open the calendar to initially. */\n  @Input()\n  get startAt(): D | null {\n    // If an explicit startAt is set we start there, otherwise we start at whatever the currently\n    // selected value is.\n    return this._startAt || (this._datepickerInput ? this._datepickerInput.value : null);\n  }\n  set startAt(value: D | null) {\n    this._startAt = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _startAt: D | null;\n\n  /** The view that the calendar should start in. */\n  @Input() startView: 'month' | 'year' = 'month';\n\n  /** Color palette to use on the datepicker's calendar. */\n  @Input()\n  get color(): ThemePalette {\n    return this._color ||\n        (this._datepickerInput ? this._datepickerInput._getThemePalette() : undefined);\n  }\n  set color(value: ThemePalette) {\n    this._color = value;\n  }\n  _color: ThemePalette;\n\n  /**\n   * Whether the calendar UI is in touch mode. In touch mode the calendar opens in a dialog rather\n   * than a popup and elements have more padding to allow for bigger touch targets.\n   */\n  @Input()\n  get touchUi(): boolean { return this._touchUi; }\n  set touchUi(value: boolean) {\n    this._touchUi = coerceBooleanProperty(value);\n  }\n  private _touchUi = false;\n\n  /** Whether the datepicker pop-up should be disabled. */\n  @Input()\n  get disabled(): boolean {\n    return this._disabled === undefined && this._datepickerInput ?\n        this._datepickerInput.disabled : !!this._disabled;\n  }\n  set disabled(value: boolean) {\n    const newValue = coerceBooleanProperty(value);\n\n    if (newValue !== this._disabled) {\n      this._disabled = newValue;\n      this._disabledChange.next(newValue);\n    }\n  }\n  private _disabled: boolean;\n\n  /**\n   * Emits selected year in multiyear view.\n   * This doesn't imply a change on the selected date.\n   */\n  @Output() readonly yearSelected: EventEmitter<D> = new EventEmitter<D>();\n\n  /**\n   * Emits selected month in year view.\n   * This doesn't imply a change on the selected date.\n   */\n  @Output() readonly monthSelected: EventEmitter<D> = new EventEmitter<D>();\n\n  /** Classes to be passed to the date picker panel. Supports the same syntax as `ngClass`. */\n  @Input() panelClass: string | string[];\n\n  /** Emits when the datepicker has been opened. */\n  @Output('opened') openedStream: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Emits when the datepicker has been closed. */\n  @Output('closed') closedStream: EventEmitter<void> = new EventEmitter<void>();\n\n\n  /** Whether the calendar is open. */\n  @Input()\n  get opened(): boolean { return this._opened; }\n  set opened(value: boolean) { value ? this.open() : this.close(); }\n  private _opened = false;\n\n  /** The id for the datepicker calendar. */\n  id: string = `mat-datepicker-${datepickerUid++}`;\n\n  /** The currently selected date. */\n  get _selected(): D | null { return this._validSelected; }\n  set _selected(value: D | null) { this._validSelected = value; }\n  private _validSelected: D | null = null;\n\n  /** The minimum selectable date. */\n  get _minDate(): D | null {\n    return this._datepickerInput && this._datepickerInput.min;\n  }\n\n  /** The maximum selectable date. */\n  get _maxDate(): D | null {\n    return this._datepickerInput && this._datepickerInput.max;\n  }\n\n  get _dateFilter(): (date: D | null) => boolean {\n    return this._datepickerInput && this._datepickerInput._dateFilter;\n  }\n\n  /** A reference to the overlay when the calendar is opened as a popup. */\n  _popupRef: OverlayRef;\n\n  /** A reference to the dialog when the calendar is opened as a dialog. */\n  private _dialogRef: MatDialogRef<MatDatepickerContent<D>> | null;\n\n  /** A portal containing the calendar for this datepicker. */\n  private _calendarPortal: ComponentPortal<MatDatepickerContent<D>>;\n\n  /** Reference to the component instantiated in popup mode. */\n  private _popupComponentRef: ComponentRef<MatDatepickerContent<D>> | null;\n\n  /** The element that was focused before the datepicker was opened. */\n  private _focusedElementBeforeOpen: HTMLElement | null = null;\n\n  /** Subscription to value changes in the associated input element. */\n  private _inputSubscription = Subscription.EMPTY;\n\n  /** The input element this datepicker is associated with. */\n  _datepickerInput: MatDatepickerInput<D>;\n\n  /** Emits when the datepicker is disabled. */\n  readonly _disabledChange = new Subject<boolean>();\n\n  /** Emits new selected date when selected date changes. */\n  readonly _selectedChanged = new Subject<D>();\n\n  constructor(private _dialog: MatDialog,\n              private _overlay: Overlay,\n              private _ngZone: NgZone,\n              private _viewContainerRef: ViewContainerRef,\n              @Inject(MAT_DATEPICKER_SCROLL_STRATEGY) private _scrollStrategy,\n              @Optional() private _dateAdapter: DateAdapter<D>,\n              @Optional() private _dir: Directionality,\n              @Optional() @Inject(DOCUMENT) private _document: any) {\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n  }\n\n  ngOnDestroy() {\n    this.close();\n    this._inputSubscription.unsubscribe();\n    this._disabledChange.complete();\n\n    if (this._popupRef) {\n      this._popupRef.dispose();\n      this._popupComponentRef = null;\n    }\n  }\n\n  /** Selects the given date */\n  _select(date: D): void {\n    let oldValue = this._selected;\n    this._selected = date;\n    if (!this._dateAdapter.sameDate(oldValue, this._selected)) {\n      this._selectedChanged.next(date);\n    }\n  }\n\n  /** Emits the selected year in multiyear view */\n  _selectYear(normalizedYear: D): void {\n    this.yearSelected.emit(normalizedYear);\n  }\n\n  /** Emits selected month in year view */\n  _selectMonth(normalizedMonth: D): void {\n    this.monthSelected.emit(normalizedMonth);\n  }\n\n  /**\n   * Register an input with this datepicker.\n   * @param input The datepicker input to register with this datepicker.\n   */\n  _registerInput(input: MatDatepickerInput<D>): void {\n    if (this._datepickerInput) {\n      throw Error('A MatDatepicker can only be associated with a single input.');\n    }\n    this._datepickerInput = input;\n    this._inputSubscription =\n        this._datepickerInput._valueChange.subscribe((value: D | null) => this._selected = value);\n  }\n\n  /** Open the calendar. */\n  open(): void {\n    if (this._opened || this.disabled) {\n      return;\n    }\n    if (!this._datepickerInput) {\n      throw Error('Attempted to open an MatDatepicker with no associated input.');\n    }\n    if (this._document) {\n      this._focusedElementBeforeOpen = this._document.activeElement;\n    }\n\n    this.touchUi ? this._openAsDialog() : this._openAsPopup();\n    this._opened = true;\n    this.openedStream.emit();\n  }\n\n  /** Close the calendar. */\n  close(): void {\n    if (!this._opened) {\n      return;\n    }\n    if (this._popupRef && this._popupRef.hasAttached()) {\n      this._popupRef.detach();\n    }\n    if (this._dialogRef) {\n      this._dialogRef.close();\n      this._dialogRef = null;\n    }\n    if (this._calendarPortal && this._calendarPortal.isAttached) {\n      this._calendarPortal.detach();\n    }\n\n    const completeClose = () => {\n      // The `_opened` could've been reset already if\n      // we got two events in quick succession.\n      if (this._opened) {\n        this._opened = false;\n        this.closedStream.emit();\n        this._focusedElementBeforeOpen = null;\n      }\n    };\n\n    if (this._focusedElementBeforeOpen &&\n      typeof this._focusedElementBeforeOpen.focus === 'function') {\n      // Because IE moves focus asynchronously, we can't count on it being restored before we've\n      // marked the datepicker as closed. If the event fires out of sequence and the element that\n      // we're refocusing opens the datepicker on focus, the user could be stuck with not being\n      // able to close the calendar at all. We work around it by making the logic, that marks\n      // the datepicker as closed, async as well.\n      this._focusedElementBeforeOpen.focus();\n      setTimeout(completeClose);\n    } else {\n      completeClose();\n    }\n  }\n\n  /** Open the calendar as a dialog. */\n  private _openAsDialog(): void {\n    this._dialogRef = this._dialog.open<MatDatepickerContent<D>>(MatDatepickerContent, {\n      direction: this._dir ? this._dir.value : 'ltr',\n      viewContainerRef: this._viewContainerRef,\n      panelClass: 'mat-datepicker-dialog',\n    });\n\n    this._dialogRef.afterClosed().subscribe(() => this.close());\n    this._dialogRef.componentInstance.datepicker = this;\n    this._setColor();\n  }\n\n  /** Open the calendar as a popup. */\n  private _openAsPopup(): void {\n    if (!this._calendarPortal) {\n      this._calendarPortal = new ComponentPortal<MatDatepickerContent<D>>(MatDatepickerContent,\n                                                                          this._viewContainerRef);\n    }\n\n    if (!this._popupRef) {\n      this._createPopup();\n    }\n\n    if (!this._popupRef.hasAttached()) {\n      this._popupComponentRef = this._popupRef.attach(this._calendarPortal);\n      this._popupComponentRef.instance.datepicker = this;\n      this._setColor();\n\n      // Update the position once the calendar has rendered.\n      this._ngZone.onStable.asObservable().pipe(take(1)).subscribe(() => {\n        this._popupRef.updatePosition();\n      });\n    }\n  }\n\n  /** Create the popup. */\n  private _createPopup(): void {\n    const overlayConfig = new OverlayConfig({\n      positionStrategy: this._createPopupPositionStrategy(),\n      hasBackdrop: true,\n      backdropClass: 'mat-overlay-transparent-backdrop',\n      direction: this._dir,\n      scrollStrategy: this._scrollStrategy(),\n      panelClass: 'mat-datepicker-popup',\n    });\n\n    this._popupRef = this._overlay.create(overlayConfig);\n    this._popupRef.overlayElement.setAttribute('role', 'dialog');\n\n    merge(\n      this._popupRef.backdropClick(),\n      this._popupRef.detachments(),\n      this._popupRef.keydownEvents().pipe(filter(event => {\n        // Closing on alt + up is only valid when there's an input associated with the datepicker.\n        return event.keyCode === ESCAPE ||\n               (this._datepickerInput && event.altKey && event.keyCode === UP_ARROW);\n      }))\n    ).subscribe(() => this.close());\n  }\n\n  /** Create the popup PositionStrategy. */\n  private _createPopupPositionStrategy(): PositionStrategy {\n    return this._overlay.position()\n      .flexibleConnectedTo(this._datepickerInput.getPopupConnectionElementRef())\n      .withTransformOriginOn('.mat-datepicker-content')\n      .withFlexibleDimensions(false)\n      .withViewportMargin(8)\n      .withPush(false)\n      .withPositions([\n        {\n          originX: 'start',\n          originY: 'bottom',\n          overlayX: 'start',\n          overlayY: 'top'\n        },\n        {\n          originX: 'start',\n          originY: 'top',\n          overlayX: 'start',\n          overlayY: 'bottom'\n        },\n        {\n          originX: 'end',\n          originY: 'bottom',\n          overlayX: 'end',\n          overlayY: 'top'\n        },\n        {\n          originX: 'end',\n          originY: 'top',\n          overlayX: 'end',\n          overlayY: 'bottom'\n        }\n      ]);\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n\n  /** Passes the current theme color along to the calendar overlay. */\n  private _setColor(): void {\n    const color = this.color;\n    if (this._popupComponentRef) {\n      this._popupComponentRef.instance.color = color;\n    }\n    if (this._dialogRef) {\n      this._dialogRef.componentInstance.color = color;\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {DOWN_ARROW} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  Directive,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  OnDestroy,\n  Optional,\n  Output,\n} from '@angular/core';\nimport {\n  AbstractControl,\n  ControlValueAccessor,\n  NG_VALIDATORS,\n  NG_VALUE_ACCESSOR,\n  ValidationErrors,\n  Validator,\n  ValidatorFn,\n  Validators\n} from '@angular/forms';\nimport {DateAdapter, MAT_DATE_FORMATS, MatDateFormats} from '@angular/material/core';\nimport {MatFormField} from '@angular/material/form-field';\nimport {MAT_INPUT_VALUE_ACCESSOR} from '@angular/material/input';\nimport {Subscription} from 'rxjs';\nimport {MatDatepicker} from './datepicker';\nimport {createMissingDateImplError} from './datepicker-errors';\n\n\nexport const MAT_DATEPICKER_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatDatepickerInput),\n  multi: true\n};\n\n\nexport const MAT_DATEPICKER_VALIDATORS: any = {\n  provide: NG_VALIDATORS,\n  useExisting: forwardRef(() => MatDatepickerInput),\n  multi: true\n};\n\n\n/**\n * An event used for datepicker input and change events. We don't always have access to a native\n * input or change event because the event may have been triggered by the user clicking on the\n * calendar popup. For consistency, we always use MatDatepickerInputEvent instead.\n */\nexport class MatDatepickerInputEvent<D> {\n  /** The new value for the target datepicker input. */\n  value: D | null;\n\n  constructor(\n    /** Reference to the datepicker input component that emitted the event. */\n    public target: MatDatepickerInput<D>,\n    /** Reference to the native input element associated with the datepicker input. */\n    public targetElement: HTMLElement) {\n    this.value = this.target.value;\n  }\n}\n\n\n/** Directive used to connect an input to a MatDatepicker. */\n@Directive({\n  selector: 'input[matDatepicker]',\n  providers: [\n    MAT_DATEPICKER_VALUE_ACCESSOR,\n    MAT_DATEPICKER_VALIDATORS,\n    {provide: MAT_INPUT_VALUE_ACCESSOR, useExisting: MatDatepickerInput},\n  ],\n  host: {\n    '[attr.aria-haspopup]': 'true',\n    '[attr.aria-owns]': '(_datepicker?.opened && _datepicker.id) || null',\n    '[attr.min]': 'min ? _dateAdapter.toIso8601(min) : null',\n    '[attr.max]': 'max ? _dateAdapter.toIso8601(max) : null',\n    '[disabled]': 'disabled',\n    '(input)': '_onInput($event.target.value)',\n    '(change)': '_onChange()',\n    '(blur)': '_onBlur()',\n    '(keydown)': '_onKeydown($event)',\n  },\n  exportAs: 'matDatepickerInput',\n})\nexport class MatDatepickerInput<D> implements AfterContentInit, ControlValueAccessor, OnDestroy,\n    Validator {\n  /** The datepicker that this input is associated with. */\n  @Input()\n  set matDatepicker(value: MatDatepicker<D>) {\n    this.registerDatepicker(value);\n  }\n  _datepicker: MatDatepicker<D>;\n\n  private registerDatepicker(value: MatDatepicker<D>) {\n    if (value) {\n      this._datepicker = value;\n      this._datepicker._registerInput(this);\n    }\n  }\n\n  /** Function that can be used to filter out dates within the datepicker. */\n  @Input()\n  set matDatepickerFilter(value: (date: D | null) => boolean) {\n    this._dateFilter = value;\n    this._validatorOnChange();\n  }\n  _dateFilter: (date: D | null) => boolean;\n\n  /** The value of the input. */\n  @Input()\n  get value(): D | null { return this._value; }\n  set value(value: D | null) {\n    value = this._dateAdapter.deserialize(value);\n    this._lastValueValid = !value || this._dateAdapter.isValid(value);\n    value = this._getValidDateOrNull(value);\n    const oldDate = this.value;\n    this._value = value;\n    this._formatValue(value);\n\n    if (!this._dateAdapter.sameDate(oldDate, value)) {\n      this._valueChange.emit(value);\n    }\n  }\n  private _value: D | null;\n\n  /** The minimum valid date. */\n  @Input()\n  get min(): D | null { return this._min; }\n  set min(value: D | null) {\n    this._min = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n    this._validatorOnChange();\n  }\n  private _min: D | null;\n\n  /** The maximum valid date. */\n  @Input()\n  get max(): D | null { return this._max; }\n  set max(value: D | null) {\n    this._max = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n    this._validatorOnChange();\n  }\n  private _max: D | null;\n\n  /** Whether the datepicker-input is disabled. */\n  @Input()\n  get disabled(): boolean { return !!this._disabled; }\n  set disabled(value: boolean) {\n    const newValue = coerceBooleanProperty(value);\n    const element = this._elementRef.nativeElement;\n\n    if (this._disabled !== newValue) {\n      this._disabled = newValue;\n      this._disabledChange.emit(newValue);\n    }\n\n    // We need to null check the `blur` method, because it's undefined during SSR.\n    if (newValue && element.blur) {\n      // Normally, native input elements automatically blur if they turn disabled. This behavior\n      // is problematic, because it would mean that it triggers another change detection cycle,\n      // which then causes a changed after checked error if the input element was focused before.\n      element.blur();\n    }\n  }\n  private _disabled: boolean;\n\n  /** Emits when a `change` event is fired on this `<input>`. */\n  @Output() readonly dateChange: EventEmitter<MatDatepickerInputEvent<D>> =\n      new EventEmitter<MatDatepickerInputEvent<D>>();\n\n  /** Emits when an `input` event is fired on this `<input>`. */\n  @Output() readonly dateInput: EventEmitter<MatDatepickerInputEvent<D>> =\n      new EventEmitter<MatDatepickerInputEvent<D>>();\n\n  /** Emits when the value changes (either due to user input or programmatic change). */\n  _valueChange = new EventEmitter<D | null>();\n\n  /** Emits when the disabled state has changed */\n  _disabledChange = new EventEmitter<boolean>();\n\n  _onTouched = () => {};\n\n  private _cvaOnChange: (value: any) => void = () => {};\n\n  private _validatorOnChange = () => {};\n\n  private _datepickerSubscription = Subscription.EMPTY;\n\n  private _localeSubscription = Subscription.EMPTY;\n\n  /** The form control validator for whether the input parses. */\n  private _parseValidator: ValidatorFn = (): ValidationErrors | null => {\n    return this._lastValueValid ?\n        null : {'matDatepickerParse': {'text': this._elementRef.nativeElement.value}};\n  }\n\n  /** The form control validator for the min date. */\n  private _minValidator: ValidatorFn = (control: AbstractControl): ValidationErrors | null => {\n    const controlValue = this._getValidDateOrNull(this._dateAdapter.deserialize(control.value));\n    return (!this.min || !controlValue ||\n        this._dateAdapter.compareDate(this.min, controlValue) <= 0) ?\n        null : {'matDatepickerMin': {'min': this.min, 'actual': controlValue}};\n  }\n\n  /** The form control validator for the max date. */\n  private _maxValidator: ValidatorFn = (control: AbstractControl): ValidationErrors | null => {\n    const controlValue = this._getValidDateOrNull(this._dateAdapter.deserialize(control.value));\n    return (!this.max || !controlValue ||\n        this._dateAdapter.compareDate(this.max, controlValue) >= 0) ?\n        null : {'matDatepickerMax': {'max': this.max, 'actual': controlValue}};\n  }\n\n  /** The form control validator for the date filter. */\n  private _filterValidator: ValidatorFn = (control: AbstractControl): ValidationErrors | null => {\n    const controlValue = this._getValidDateOrNull(this._dateAdapter.deserialize(control.value));\n    return !this._dateFilter || !controlValue || this._dateFilter(controlValue) ?\n        null : {'matDatepickerFilter': true};\n  }\n\n  /** The combined form control validator for this input. */\n  private _validator: ValidatorFn | null =\n      Validators.compose(\n          [this._parseValidator, this._minValidator, this._maxValidator, this._filterValidator]);\n\n  /** Whether the last value set on the input was valid. */\n  private _lastValueValid = false;\n\n  constructor(\n      private _elementRef: ElementRef,\n      @Optional() public _dateAdapter: DateAdapter<D>,\n      @Optional() @Inject(MAT_DATE_FORMATS) private _dateFormats: MatDateFormats,\n      @Optional() private _formField: MatFormField) {\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n    if (!this._dateFormats) {\n      throw createMissingDateImplError('MAT_DATE_FORMATS');\n    }\n\n    // Update the displayed date when the locale changes.\n    this._localeSubscription = _dateAdapter.localeChanges.subscribe(() => {\n      this.value = this.value;\n    });\n  }\n\n  ngAfterContentInit() {\n    if (this._datepicker) {\n      this._datepickerSubscription = this._datepicker._selectedChanged.subscribe((selected: D) => {\n        this.value = selected;\n        this._cvaOnChange(selected);\n        this._onTouched();\n        this.dateInput.emit(new MatDatepickerInputEvent(this, this._elementRef.nativeElement));\n        this.dateChange.emit(new MatDatepickerInputEvent(this, this._elementRef.nativeElement));\n      });\n    }\n  }\n\n  ngOnDestroy() {\n    this._datepickerSubscription.unsubscribe();\n    this._localeSubscription.unsubscribe();\n    this._valueChange.complete();\n    this._disabledChange.complete();\n  }\n\n  /** @docs-private */\n  registerOnValidatorChange(fn: () => void): void {\n    this._validatorOnChange = fn;\n  }\n\n  /** @docs-private */\n  validate(c: AbstractControl): ValidationErrors | null {\n    return this._validator ? this._validator(c) : null;\n  }\n\n  /**\n   * @deprecated\n   * @deletion-target 7.0.0 Use `getConnectedOverlayOrigin` instead\n   */\n  getPopupConnectionElementRef(): ElementRef {\n    return this.getConnectedOverlayOrigin();\n  }\n\n  /**\n   * Gets the element that the datepicker popup should be connected to.\n   * @return The element to connect the popup to.\n   */\n  getConnectedOverlayOrigin(): ElementRef {\n    return this._formField ? this._formField.getConnectedOverlayOrigin() : this._elementRef;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  writeValue(value: D): void {\n    this.value = value;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnChange(fn: (value: any) => void): void {\n    this._cvaOnChange = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnTouched(fn: () => void): void {\n    this._onTouched = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n  }\n\n  _onKeydown(event: KeyboardEvent) {\n    if (event.altKey && event.keyCode === DOWN_ARROW) {\n      this._datepicker.open();\n      event.preventDefault();\n    }\n  }\n\n  _onInput(value: string) {\n    let date = this._dateAdapter.parse(value, this._dateFormats.parse.dateInput);\n    this._lastValueValid = !date || this._dateAdapter.isValid(date);\n    date = this._getValidDateOrNull(date);\n\n    if (!this._dateAdapter.sameDate(date, this._value)) {\n      this._value = date;\n      this._cvaOnChange(date);\n      this._valueChange.emit(date);\n      this.dateInput.emit(new MatDatepickerInputEvent(this, this._elementRef.nativeElement));\n    }\n  }\n\n  _onChange() {\n    this.dateChange.emit(new MatDatepickerInputEvent(this, this._elementRef.nativeElement));\n  }\n\n  /** Returns the palette used by the input's form field, if any. */\n  _getThemePalette() {\n    return this._formField ? this._formField.color : undefined;\n  }\n\n  /** Handles blur events on the input. */\n  _onBlur() {\n    // Reformat the input only if we have a valid value.\n    if (this.value) {\n      this._formatValue(this.value);\n    }\n\n    this._onTouched();\n  }\n\n  /** Formats a value and sets it on the input element. */\n  private _formatValue(value: D | null) {\n    this._elementRef.nativeElement.value =\n        value ? this._dateAdapter.format(value, this._dateFormats.display.dateInput) : '';\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  Directive,\n  Input,\n  OnChanges,\n  OnDestroy,\n  SimpleChanges,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {merge, of as observableOf, Subscription} from 'rxjs';\nimport {MatDatepicker} from './datepicker';\nimport {MatDatepickerIntl} from './datepicker-intl';\n\n\n/** Can be used to override the icon of a `matDatepickerToggle`. */\n@Directive({\n  selector: '[matDatepickerToggleIcon]'\n})\nexport class MatDatepickerToggleIcon {}\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-datepicker-toggle',\n  templateUrl: 'datepicker-toggle.html',\n  styleUrls: ['datepicker-toggle.css'],\n  host: {\n    'class': 'mat-datepicker-toggle',\n    '[class.mat-datepicker-toggle-active]': 'datepicker && datepicker.opened',\n    '[class.mat-accent]': 'datepicker && datepicker.color === \"accent\"',\n    '[class.mat-warn]': 'datepicker && datepicker.color === \"warn\"',\n  },\n  exportAs: 'matDatepickerToggle',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatDatepickerToggle<D> implements AfterContentInit, OnChanges, OnDestroy {\n  private _stateChanges = Subscription.EMPTY;\n\n  /** Datepicker instance that the button will toggle. */\n  @Input('for') datepicker: MatDatepicker<D>;\n\n  /** Whether the toggle button is disabled. */\n  @Input()\n  get disabled(): boolean {\n    return this._disabled === undefined ? this.datepicker.disabled : !!this._disabled;\n  }\n  set disabled(value: boolean) {\n    this._disabled = coerceBooleanProperty(value);\n  }\n  private _disabled: boolean;\n\n  /** Custom icon set by the consumer. */\n  @ContentChild(MatDatepickerToggleIcon) _customIcon: MatDatepickerToggleIcon;\n\n  constructor(public _intl: MatDatepickerIntl, private _changeDetectorRef: ChangeDetectorRef) {}\n\n  ngOnChanges(changes: SimpleChanges) {\n    if (changes.datepicker) {\n      this._watchStateChanges();\n    }\n  }\n\n  ngOnDestroy() {\n    this._stateChanges.unsubscribe();\n  }\n\n  ngAfterContentInit() {\n    this._watchStateChanges();\n  }\n\n  _open(event: Event): void {\n    if (this.datepicker && !this.disabled) {\n      this.datepicker.open();\n      event.stopPropagation();\n    }\n  }\n\n  private _watchStateChanges() {\n    const datepickerDisabled = this.datepicker ? this.datepicker._disabledChange : observableOf();\n    const inputDisabled = this.datepicker && this.datepicker._datepickerInput ?\n        this.datepicker._datepickerInput._disabledChange : observableOf();\n    const datepickerToggled = this.datepicker ?\n        merge(this.datepicker.openedStream, this.datepicker.closedStream) :\n        observableOf();\n\n    this._stateChanges.unsubscribe();\n    this._stateChanges = merge(\n      this._intl.changes,\n      datepickerDisabled,\n      inputDisabled,\n      datepickerToggled\n    ).subscribe(() => this._changeDetectorRef.markForCheck());\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {A11yModule} from '@angular/cdk/a11y';\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatButtonModule} from '@angular/material/button';\nimport {MatDialogModule} from '@angular/material/dialog';\nimport {MatCalendar, MatCalendarHeader} from './calendar';\nimport {MatCalendarBody} from './calendar-body';\nimport {\n  MatDatepicker,\n  MatDatepickerContent,\n  MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY_PROVIDER,\n} from './datepicker';\nimport {MatDatepickerInput} from './datepicker-input';\nimport {MatDatepickerIntl} from './datepicker-intl';\nimport {MatDatepickerToggle, MatDatepickerToggleIcon} from './datepicker-toggle';\nimport {MatMonthView} from './month-view';\nimport {MatMultiYearView} from './multi-year-view';\nimport {MatYearView} from './year-view';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatButtonModule,\n    MatDialogModule,\n    OverlayModule,\n    A11yModule,\n    PortalModule,\n  ],\n  exports: [\n    MatCalendar,\n    MatCalendarBody,\n    MatDatepicker,\n    MatDatepickerContent,\n    MatDatepickerInput,\n    MatDatepickerToggle,\n    MatDatepickerToggleIcon,\n    MatMonthView,\n    MatYearView,\n    MatMultiYearView,\n    MatCalendarHeader,\n  ],\n  declarations: [\n    MatCalendar,\n    MatCalendarBody,\n    MatDatepicker,\n    MatDatepickerContent,\n    MatDatepickerInput,\n    MatDatepickerToggle,\n    MatDatepickerToggleIcon,\n    MatMonthView,\n    MatYearView,\n    MatMultiYearView,\n    MatCalendarHeader,\n  ],\n  providers: [\n    MatDatepickerIntl,\n    MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY_PROVIDER,\n  ],\n  entryComponents: [\n    MatDatepickerContent,\n    MatCalendarHeader,\n  ]\n})\nexport class MatDatepickerModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ChangeDetectionStrategy, Component, Input, ViewEncapsulation} from '@angular/core';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-divider',\n  host: {\n    'role': 'separator',\n    '[attr.aria-orientation]': 'vertical ? \"vertical\" : \"horizontal\"',\n    '[class.mat-divider-vertical]': 'vertical',\n    '[class.mat-divider-horizontal]': '!vertical',\n    '[class.mat-divider-inset]': 'inset',\n    'class': 'mat-divider'\n  },\n  template: '',\n  styleUrls: ['divider.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatDivider {\n  /** Whether the divider is vertically aligned. */\n  @Input()\n  get vertical(): boolean { return this._vertical; }\n  set vertical(value: boolean) { this._vertical = coerceBooleanProperty(value); }\n  private _vertical: boolean = false;\n\n  /** Whether the divider is an inset divider. */\n  @Input()\n  get inset(): boolean { return this._inset; }\n  set inset(value: boolean) { this._inset = coerceBooleanProperty(value); }\n  private _inset: boolean = false;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatDivider} from './divider';\n\n\n@NgModule({\n  imports: [MatCommonModule, CommonModule],\n  exports: [MatDivider, MatCommonModule],\n  declarations: [MatDivider],\n})\nexport class MatDividerModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, Input} from '@angular/core';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {CdkAccordion} from '@angular/cdk/accordion';\n\n/** MatAccordion's display modes. */\nexport type MatAccordionDisplayMode = 'default' | 'flat';\n\n/**\n * Directive for a Material Design Accordion.\n */\n@Directive({\n  selector: 'mat-accordion',\n  exportAs: 'matAccordion',\n  host: {\n    class: 'mat-accordion'\n  }\n})\nexport class MatAccordion extends CdkAccordion {\n  /** Whether the expansion indicator should be hidden. */\n  @Input()\n  get hideToggle(): boolean { return this._hideToggle; }\n  set hideToggle(show: boolean) { this._hideToggle = coerceBooleanProperty(show); }\n  private _hideToggle: boolean = false;\n\n  /**\n   * The display mode used for all expansion panels in the accordion. Currently two display\n   * modes exist:\n   *  default - a gutter-like spacing is placed around any expanded panel, placing the expanded\n   *     panel at a different elevation from the reset of the accordion.\n   *  flat - no spacing is placed around expanded panels, showing all panels at the same\n   *     elevation.\n   */\n  @Input() displayMode: MatAccordionDisplayMode = 'default';\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, TemplateRef} from '@angular/core';\n\n/**\n * Expansion panel content that will be rendered lazily\n * after the panel is opened for the first time.\n */\n@Directive({\n  selector: 'ng-template[matExpansionPanelContent]'\n})\nexport class MatExpansionPanelContent {\n  constructor(public _template: TemplateRef<any>) {}\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {AnimationEvent} from '@angular/animations';\nimport {CdkAccordionItem} from '@angular/cdk/accordion';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {UniqueSelectionDispatcher} from '@angular/cdk/collections';\nimport {TemplatePortal} from '@angular/cdk/portal';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  Directive,\n  Input,\n  OnChanges,\n  OnDestroy,\n  Optional,\n  SimpleChanges,\n  SkipSelf,\n  ViewContainerRef,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {Subject} from 'rxjs';\nimport {filter, startWith, take} from 'rxjs/operators';\nimport {MatAccordion} from './accordion';\nimport {matExpansionAnimations} from './expansion-animations';\nimport {MatExpansionPanelContent} from './expansion-panel-content';\n\n\n/** MatExpansionPanel's states. */\nexport type MatExpansionPanelState = 'expanded' | 'collapsed';\n\n/** Counter for generating unique element ids. */\nlet uniqueId = 0;\n\n/**\n * `<mat-expansion-panel>`\n *\n * This component can be used as a single element to show expandable content, or as one of\n * multiple children of an element with the MatAccordion directive attached.\n */\n@Component({\n  moduleId: module.id,\n  styleUrls: ['./expansion-panel.css'],\n  selector: 'mat-expansion-panel',\n  exportAs: 'matExpansionPanel',\n  templateUrl: './expansion-panel.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  inputs: ['disabled', 'expanded'],\n  outputs: ['opened', 'closed', 'expandedChange'],\n  animations: [matExpansionAnimations.bodyExpansion],\n  providers: [\n    // Provide MatAccordion as undefined to prevent nested expansion panels from registering\n    // to the same accordion.\n    {provide: MatAccordion, useValue: undefined},\n  ],\n  host: {\n    'class': 'mat-expansion-panel',\n    '[class.mat-expanded]': 'expanded',\n    '[class.mat-expansion-panel-spacing]': '_hasSpacing()',\n  }\n})\nexport class MatExpansionPanel extends CdkAccordionItem\n    implements AfterContentInit, OnChanges, OnDestroy {\n  /** Whether the toggle indicator should be hidden. */\n  @Input()\n  get hideToggle(): boolean { return this._hideToggle; }\n  set hideToggle(value: boolean) {\n    this._hideToggle = coerceBooleanProperty(value);\n  }\n  private _hideToggle = false;\n\n  /** Stream that emits for changes in `@Input` properties. */\n  readonly _inputChanges = new Subject<SimpleChanges>();\n\n  /** Optionally defined accordion the expansion panel belongs to. */\n  accordion: MatAccordion;\n\n  /** Content that will be rendered lazily. */\n  @ContentChild(MatExpansionPanelContent) _lazyContent: MatExpansionPanelContent;\n\n  /** Portal holding the user's content. */\n  _portal: TemplatePortal;\n\n  /** ID for the associated header element. Used for a11y labelling. */\n  _headerId = `mat-expansion-panel-header-${uniqueId++}`;\n\n  constructor(@Optional() @SkipSelf() accordion: MatAccordion,\n              _changeDetectorRef: ChangeDetectorRef,\n              _uniqueSelectionDispatcher: UniqueSelectionDispatcher,\n              private _viewContainerRef: ViewContainerRef) {\n    super(accordion, _changeDetectorRef, _uniqueSelectionDispatcher);\n    this.accordion = accordion;\n  }\n\n  /** Whether the expansion indicator should be hidden. */\n  _getHideToggle(): boolean {\n    if (this.accordion) {\n      return this.accordion.hideToggle;\n    }\n    return this.hideToggle;\n  }\n\n  /** Determines whether the expansion panel should have spacing between it and its siblings. */\n  _hasSpacing(): boolean {\n    if (this.accordion) {\n      return (this.expanded ? this.accordion.displayMode : this._getExpandedState()) === 'default';\n    }\n    return false;\n  }\n\n  /** Gets the expanded state string. */\n  _getExpandedState(): MatExpansionPanelState {\n    return this.expanded ? 'expanded' : 'collapsed';\n  }\n\n  ngAfterContentInit() {\n    if (this._lazyContent) {\n      // Render the content as soon as the panel becomes open.\n      this.opened.pipe(\n        startWith(null!),\n        filter(() => this.expanded && !this._portal),\n        take(1)\n      ).subscribe(() => {\n        this._portal = new TemplatePortal(this._lazyContent._template, this._viewContainerRef);\n      });\n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    this._inputChanges.next(changes);\n  }\n\n  ngOnDestroy() {\n    super.ngOnDestroy();\n    this._inputChanges.complete();\n  }\n\n  _bodyAnimation(event: AnimationEvent) {\n    const classList = event.element.classList;\n    const cssClass = 'mat-expanded';\n    const {phaseName, toState} = event;\n\n    // Toggle the body's `overflow: hidden` class when closing starts or when expansion ends in\n    // order to prevent the cases where switching too early would cause the animation to jump.\n    // Note that we do it directly on the DOM element to avoid the slight delay that comes\n    // with doing it via change detection.\n    if (phaseName === 'done' && toState === 'expanded') {\n      classList.add(cssClass);\n    } else if (phaseName === 'start' && toState === 'collapsed') {\n      classList.remove(cssClass);\n    }\n  }\n}\n\n@Directive({\n  selector: 'mat-action-row',\n  host: {\n    class: 'mat-action-row'\n  }\n})\nexport class MatExpansionPanelActionRow {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor} from '@angular/cdk/a11y';\nimport {ENTER, SPACE} from '@angular/cdk/keycodes';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  Directive,\n  ElementRef,\n  Host,\n  Input,\n  OnDestroy,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {merge, Subscription} from 'rxjs';\nimport {filter} from 'rxjs/operators';\nimport {matExpansionAnimations} from './expansion-animations';\nimport {MatExpansionPanel} from './expansion-panel';\n\n\n/**\n * `<mat-expansion-panel-header>`\n *\n * This component corresponds to the header element of an `<mat-expansion-panel>`.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-expansion-panel-header',\n  styleUrls: ['./expansion-panel-header.css'],\n  templateUrl: './expansion-panel-header.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  animations: [\n    matExpansionAnimations.indicatorRotate,\n    matExpansionAnimations.expansionHeaderHeight\n  ],\n  host: {\n    'class': 'mat-expansion-panel-header',\n    'role': 'button',\n    '[attr.id]': 'panel._headerId',\n    '[attr.tabindex]': 'panel.disabled ? -1 : 0',\n    '[attr.aria-controls]': '_getPanelId()',\n    '[attr.aria-expanded]': '_isExpanded()',\n    '[attr.aria-disabled]': 'panel.disabled',\n    '[class.mat-expanded]': '_isExpanded()',\n    '(click)': '_toggle()',\n    '(keydown)': '_keydown($event)',\n    '[@expansionHeight]': `{\n        value: _getExpandedState(),\n        params: {\n          collapsedHeight: collapsedHeight,\n          expandedHeight: expandedHeight\n        }\n    }`,\n  },\n})\nexport class MatExpansionPanelHeader implements OnDestroy {\n  private _parentChangeSubscription = Subscription.EMPTY;\n\n  constructor(\n    @Host() public panel: MatExpansionPanel,\n    private _element: ElementRef,\n    private _focusMonitor: FocusMonitor,\n    private _changeDetectorRef: ChangeDetectorRef) {\n\n    // Since the toggle state depends on an @Input on the panel, we\n    // need to  subscribe and trigger change detection manually.\n    this._parentChangeSubscription = merge(\n      panel.opened,\n      panel.closed,\n      panel._inputChanges.pipe(filter(changes => !!(changes.hideToggle || changes.disabled)))\n    )\n    .subscribe(() => this._changeDetectorRef.markForCheck());\n\n    _focusMonitor.monitor(_element.nativeElement);\n  }\n\n  /** Height of the header while the panel is expanded. */\n  @Input() expandedHeight: string;\n\n  /** Height of the header while the panel is collapsed. */\n  @Input() collapsedHeight: string;\n\n  /** Toggles the expanded state of the panel. */\n  _toggle(): void {\n    this.panel.toggle();\n  }\n\n  /** Gets whether the panel is expanded. */\n  _isExpanded(): boolean {\n    return this.panel.expanded;\n  }\n\n  /** Gets the expanded state string of the panel. */\n  _getExpandedState(): string {\n    return this.panel._getExpandedState();\n  }\n\n  /** Gets the panel id. */\n  _getPanelId(): string {\n    return this.panel.id;\n  }\n\n  /** Gets whether the expand indicator should be shown. */\n  _showToggle(): boolean {\n    return !this.panel.hideToggle && !this.panel.disabled;\n  }\n\n  /** Handle keydown event calling to toggle() if appropriate. */\n  _keydown(event: KeyboardEvent) {\n    switch (event.keyCode) {\n      // Toggle for space and enter keys.\n      case SPACE:\n      case ENTER:\n        event.preventDefault();\n        this._toggle();\n        break;\n      default:\n        return;\n    }\n  }\n\n  ngOnDestroy() {\n    this._parentChangeSubscription.unsubscribe();\n    this._focusMonitor.stopMonitoring(this._element.nativeElement);\n  }\n}\n\n/**\n * `<mat-panel-description>`\n *\n * This directive is to be used inside of the MatExpansionPanelHeader component.\n */\n@Directive({\n  selector: 'mat-panel-description',\n  host : {\n    class: 'mat-expansion-panel-header-description'\n  }\n})\nexport class MatExpansionPanelDescription {}\n\n/**\n * `<mat-panel-title>`\n *\n * This directive is to be used inside of the MatExpansionPanelHeader component.\n */\n@Directive({\n  selector: 'mat-panel-title',\n  host : {\n    class: 'mat-expansion-panel-header-title'\n  }\n})\nexport class MatExpansionPanelTitle {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CdkAccordionModule} from '@angular/cdk/accordion';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatAccordion} from './accordion';\nimport {MatExpansionPanel, MatExpansionPanelActionRow} from './expansion-panel';\nimport {MatExpansionPanelContent} from './expansion-panel-content';\nimport {\n  MatExpansionPanelDescription,\n  MatExpansionPanelHeader,\n  MatExpansionPanelTitle,\n} from './expansion-panel-header';\n\n\n@NgModule({\n  imports: [CommonModule, CdkAccordionModule, PortalModule],\n  exports: [\n    MatAccordion,\n    MatExpansionPanel,\n    MatExpansionPanelActionRow,\n    MatExpansionPanelHeader,\n    MatExpansionPanelTitle,\n    MatExpansionPanelDescription,\n    MatExpansionPanelContent,\n  ],\n  declarations: [\n    MatAccordion,\n    MatExpansionPanel,\n    MatExpansionPanelActionRow,\n    MatExpansionPanelHeader,\n    MatExpansionPanelTitle,\n    MatExpansionPanelDescription,\n    MatExpansionPanelContent,\n  ],\n})\nexport class MatExpansionModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  EventEmitter,\n  Input,\n  Output,\n  ViewEncapsulation,\n  NgZone,\n} from '@angular/core';\nimport {take} from 'rxjs/operators';\n\n/**\n * An internal class that represents the data corresponding to a single calendar cell.\n * @docs-private\n */\nexport class MatCalendarCell {\n  constructor(public value: number,\n              public displayValue: string,\n              public ariaLabel: string,\n              public enabled: boolean) {}\n}\n\n\n/**\n * An internal component used to display calendar data in a table.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: '[mat-calendar-body]',\n  templateUrl: 'calendar-body.html',\n  styleUrls: ['calendar-body.css'],\n  host: {\n    'class': 'mat-calendar-body',\n    'role': 'grid',\n    'attr.aria-readonly': 'true'\n  },\n  exportAs: 'matCalendarBody',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatCalendarBody {\n  /** The label for the table. (e.g. \"Jan 2017\"). */\n  @Input() label: string;\n\n  /** The cells to display in the table. */\n  @Input() rows: MatCalendarCell[][];\n\n  /** The value in the table that corresponds to today. */\n  @Input() todayValue: number;\n\n  /** The value in the table that is currently selected. */\n  @Input() selectedValue: number;\n\n  /** The minimum number of free cells needed to fit the label in the first row. */\n  @Input() labelMinRequiredCells: number;\n\n  /** The number of columns in the table. */\n  @Input() numCols = 7;\n\n  /** Whether to allow selection of disabled cells. */\n  @Input() allowDisabledSelection = false;\n\n  /** The cell number of the active cell in the table. */\n  @Input() activeCell = 0;\n\n  /**\n   * The aspect ratio (width / height) to use for the cells in the table. This aspect ratio will be\n   * maintained even as the table resizes.\n   */\n  @Input() cellAspectRatio = 1;\n\n  /** Emits when a new value is selected. */\n  @Output() readonly selectedValueChange: EventEmitter<number> = new EventEmitter<number>();\n\n  constructor(private _elementRef: ElementRef, private _ngZone: NgZone) { }\n\n  _cellClicked(cell: MatCalendarCell): void {\n    if (!this.allowDisabledSelection && !cell.enabled) {\n      return;\n    }\n    this.selectedValueChange.emit(cell.value);\n  }\n\n  /** The number of blank cells to put at the beginning for the first row. */\n  get _firstRowOffset(): number {\n    return this.rows && this.rows.length && this.rows[0].length ?\n        this.numCols - this.rows[0].length : 0;\n  }\n\n  _isActiveCell(rowIndex: number, colIndex: number): boolean {\n    let cellNumber = rowIndex * this.numCols + colIndex;\n\n    // Account for the fact that the first row may not have as many cells.\n    if (rowIndex) {\n      cellNumber -= this._firstRowOffset;\n    }\n\n    return cellNumber == this.activeCell;\n  }\n\n  /** Focuses the active cell after the microtask queue is empty. */\n  _focusActiveCell() {\n    this._ngZone.runOutsideAngular(() => {\n      this._ngZone.onStable.asObservable().pipe(take(1)).subscribe(() => {\n        this._elementRef.nativeElement.querySelector('.mat-calendar-body-active').focus();\n      });\n    });\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  DOWN_ARROW,\n  END,\n  ENTER,\n  HOME,\n  LEFT_ARROW,\n  PAGE_DOWN,\n  PAGE_UP,\n  RIGHT_ARROW,\n  UP_ARROW,\n} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  EventEmitter,\n  Inject,\n  Input,\n  Optional,\n  Output,\n  ViewEncapsulation,\n  ViewChild,\n} from '@angular/core';\nimport {DateAdapter, MAT_DATE_FORMATS, MatDateFormats} from '@angular/material/core';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {MatCalendarBody, MatCalendarCell} from './calendar-body';\nimport {createMissingDateImplError} from './datepicker-errors';\n\n\nconst DAYS_PER_WEEK = 7;\n\n\n/**\n * An internal component used to display a single month in the datepicker.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-month-view',\n  templateUrl: 'month-view.html',\n  exportAs: 'matMonthView',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class MatMonthView<D> implements AfterContentInit {\n  /**\n   * The date to display in this month view (everything other than the month and year is ignored).\n   */\n  @Input()\n  get activeDate(): D { return this._activeDate; }\n  set activeDate(value: D) {\n    const oldActiveDate = this._activeDate;\n    const validDate =\n        this._getValidDateOrNull(this._dateAdapter.deserialize(value)) || this._dateAdapter.today();\n    this._activeDate = this._dateAdapter.clampDate(validDate, this.minDate, this.maxDate);\n    if (!this._hasSameMonthAndYear(oldActiveDate, this._activeDate)) {\n      this._init();\n    }\n  }\n  private _activeDate: D;\n\n  /** The currently selected date. */\n  @Input()\n  get selected(): D | null { return this._selected; }\n  set selected(value: D | null) {\n    this._selected = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n    this._selectedDate = this._getDateInCurrentMonth(this._selected);\n  }\n  private _selected: D | null;\n\n  /** The minimum selectable date. */\n  @Input()\n  get minDate(): D | null { return this._minDate; }\n  set minDate(value: D | null) {\n    this._minDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _minDate: D | null;\n\n  /** The maximum selectable date. */\n  @Input()\n  get maxDate(): D | null { return this._maxDate; }\n  set maxDate(value: D | null) {\n    this._maxDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _maxDate: D | null;\n\n  /** A function used to filter which dates are selectable. */\n  @Input() dateFilter: (date: D) => boolean;\n\n  /** Emits when a new date is selected. */\n  @Output() readonly selectedChange: EventEmitter<D | null> = new EventEmitter<D | null>();\n\n  /** Emits when any date is selected. */\n  @Output() readonly _userSelection: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Emits when any date is activated. */\n  @Output() readonly activeDateChange: EventEmitter<D> = new EventEmitter<D>();\n\n  /** The body of calendar table */\n  @ViewChild(MatCalendarBody) _matCalendarBody: MatCalendarBody;\n\n  /** The label for this month (e.g. \"January 2017\"). */\n  _monthLabel: string;\n\n  /** Grid of calendar cells representing the dates of the month. */\n  _weeks: MatCalendarCell[][];\n\n  /** The number of blank cells in the first row before the 1st of the month. */\n  _firstWeekOffset: number;\n\n  /**\n   * The date of the month that the currently selected Date falls on.\n   * Null if the currently selected Date is in another month.\n   */\n  _selectedDate: number | null;\n\n  /** The date of the month that today falls on. Null if today is in another month. */\n  _todayDate: number | null;\n\n  /** The names of the weekdays. */\n  _weekdays: {long: string, narrow: string}[];\n\n  constructor(private _changeDetectorRef: ChangeDetectorRef,\n              @Optional() @Inject(MAT_DATE_FORMATS) private _dateFormats: MatDateFormats,\n              @Optional() public _dateAdapter: DateAdapter<D>,\n              @Optional() private _dir?: Directionality) {\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n    if (!this._dateFormats) {\n      throw createMissingDateImplError('MAT_DATE_FORMATS');\n    }\n\n    const firstDayOfWeek = this._dateAdapter.getFirstDayOfWeek();\n    const narrowWeekdays = this._dateAdapter.getDayOfWeekNames('narrow');\n    const longWeekdays = this._dateAdapter.getDayOfWeekNames('long');\n\n    // Rotate the labels for days of the week based on the configured first day of the week.\n    let weekdays = longWeekdays.map((long, i) => {\n      return {long, narrow: narrowWeekdays[i]};\n    });\n    this._weekdays = weekdays.slice(firstDayOfWeek).concat(weekdays.slice(0, firstDayOfWeek));\n\n    this._activeDate = this._dateAdapter.today();\n  }\n\n  ngAfterContentInit() {\n    this._init();\n  }\n\n  /** Handles when a new date is selected. */\n  _dateSelected(date: number) {\n    if (this._selectedDate != date) {\n      const selectedYear = this._dateAdapter.getYear(this.activeDate);\n      const selectedMonth = this._dateAdapter.getMonth(this.activeDate);\n      const selectedDate = this._dateAdapter.createDate(selectedYear, selectedMonth, date);\n\n      this.selectedChange.emit(selectedDate);\n    }\n\n    this._userSelection.emit();\n  }\n\n  /** Handles keydown events on the calendar body when calendar is in month view. */\n  _handleCalendarBodyKeydown(event: KeyboardEvent): void {\n    // TODO(mmalerba): We currently allow keyboard navigation to disabled dates, but just prevent\n    // disabled ones from being selected. This may not be ideal, we should look into whether\n    // navigation should skip over disabled dates, and if so, how to implement that efficiently.\n\n    const oldActiveDate = this._activeDate;\n    const isRtl = this._isRtl();\n\n    switch (event.keyCode) {\n      case LEFT_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate, isRtl ? 1 : -1);\n        break;\n      case RIGHT_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate, isRtl ? -1 : 1);\n        break;\n      case UP_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate, -7);\n        break;\n      case DOWN_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate, 7);\n        break;\n      case HOME:\n        this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate,\n            1 - this._dateAdapter.getDate(this._activeDate));\n        break;\n      case END:\n        this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate,\n            (this._dateAdapter.getNumDaysInMonth(this._activeDate) -\n              this._dateAdapter.getDate(this._activeDate)));\n        break;\n      case PAGE_UP:\n        this.activeDate = event.altKey ?\n            this._dateAdapter.addCalendarYears(this._activeDate, -1) :\n            this._dateAdapter.addCalendarMonths(this._activeDate, -1);\n        break;\n      case PAGE_DOWN:\n        this.activeDate = event.altKey ?\n            this._dateAdapter.addCalendarYears(this._activeDate, 1) :\n            this._dateAdapter.addCalendarMonths(this._activeDate, 1);\n        break;\n      case ENTER:\n        if (!this.dateFilter || this.dateFilter(this._activeDate)) {\n          this._dateSelected(this._dateAdapter.getDate(this._activeDate));\n          this._userSelection.emit();\n          // Prevent unexpected default actions such as form submission.\n          event.preventDefault();\n        }\n        return;\n      default:\n        // Don't prevent default or focus active cell on keys that we don't explicitly handle.\n        return;\n    }\n\n    if (this._dateAdapter.compareDate(oldActiveDate, this.activeDate)) {\n      this.activeDateChange.emit(this.activeDate);\n    }\n\n    this._focusActiveCell();\n    // Prevent unexpected default actions such as form submission.\n    event.preventDefault();\n  }\n\n  /** Initializes this month view. */\n  _init() {\n    this._selectedDate = this._getDateInCurrentMonth(this.selected);\n    this._todayDate = this._getDateInCurrentMonth(this._dateAdapter.today());\n    this._monthLabel =\n        this._dateAdapter.getMonthNames('short')[this._dateAdapter.getMonth(this.activeDate)]\n            .toLocaleUpperCase();\n\n    let firstOfMonth = this._dateAdapter.createDate(this._dateAdapter.getYear(this.activeDate),\n        this._dateAdapter.getMonth(this.activeDate), 1);\n    this._firstWeekOffset =\n        (DAYS_PER_WEEK + this._dateAdapter.getDayOfWeek(firstOfMonth) -\n         this._dateAdapter.getFirstDayOfWeek()) % DAYS_PER_WEEK;\n\n    this._createWeekCells();\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Focuses the active cell after the microtask queue is empty. */\n  _focusActiveCell() {\n    this._matCalendarBody._focusActiveCell();\n  }\n\n  /** Creates MatCalendarCells for the dates in this month. */\n  private _createWeekCells() {\n    const daysInMonth = this._dateAdapter.getNumDaysInMonth(this.activeDate);\n    const dateNames = this._dateAdapter.getDateNames();\n    this._weeks = [[]];\n    for (let i = 0, cell = this._firstWeekOffset; i < daysInMonth; i++, cell++) {\n      if (cell == DAYS_PER_WEEK) {\n        this._weeks.push([]);\n        cell = 0;\n      }\n      const date = this._dateAdapter.createDate(\n            this._dateAdapter.getYear(this.activeDate),\n            this._dateAdapter.getMonth(this.activeDate), i + 1);\n      const enabled = this._shouldEnableDate(date);\n      const ariaLabel = this._dateAdapter.format(date, this._dateFormats.display.dateA11yLabel);\n      this._weeks[this._weeks.length - 1]\n          .push(new MatCalendarCell(i + 1, dateNames[i], ariaLabel, enabled));\n    }\n  }\n\n  /** Date filter for the month */\n  private _shouldEnableDate(date: D): boolean {\n    return !!date &&\n        (!this.dateFilter || this.dateFilter(date)) &&\n        (!this.minDate || this._dateAdapter.compareDate(date, this.minDate) >= 0) &&\n        (!this.maxDate || this._dateAdapter.compareDate(date, this.maxDate) <= 0);\n  }\n\n  /**\n   * Gets the date in this month that the given Date falls on.\n   * Returns null if the given Date is in another month.\n   */\n  private _getDateInCurrentMonth(date: D | null): number | null {\n    return date && this._hasSameMonthAndYear(date, this.activeDate) ?\n        this._dateAdapter.getDate(date) : null;\n  }\n\n  /** Checks whether the 2 dates are non-null and fall within the same month of the same year. */\n  private _hasSameMonthAndYear(d1: D | null, d2: D | null): boolean {\n    return !!(d1 && d2 && this._dateAdapter.getMonth(d1) == this._dateAdapter.getMonth(d2) &&\n              this._dateAdapter.getYear(d1) == this._dateAdapter.getYear(d2));\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n\n  /** Determines whether the user has the RTL layout direction. */\n  private _isRtl() {\n    return this._dir && this._dir.value === 'rtl';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  DOWN_ARROW,\n  END,\n  ENTER,\n  HOME,\n  LEFT_ARROW,\n  PAGE_DOWN,\n  PAGE_UP,\n  RIGHT_ARROW,\n  UP_ARROW,\n} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  EventEmitter,\n  Input,\n  Optional,\n  Output,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {DateAdapter} from '@angular/material/core';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {MatCalendarBody, MatCalendarCell} from './calendar-body';\nimport {createMissingDateImplError} from './datepicker-errors';\n\nexport const yearsPerPage = 24;\n\nexport const yearsPerRow = 4;\n\n\n/**\n * An internal component used to display a year selector in the datepicker.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-multi-year-view',\n  templateUrl: 'multi-year-view.html',\n  exportAs: 'matMultiYearView',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class MatMultiYearView<D> implements AfterContentInit {\n  /** The date to display in this multi-year view (everything other than the year is ignored). */\n  @Input()\n  get activeDate(): D { return this._activeDate; }\n  set activeDate(value: D) {\n    let oldActiveDate = this._activeDate;\n    const validDate =\n        this._getValidDateOrNull(this._dateAdapter.deserialize(value)) || this._dateAdapter.today();\n    this._activeDate = this._dateAdapter.clampDate(validDate, this.minDate, this.maxDate);\n    if (Math.floor(this._dateAdapter.getYear(oldActiveDate) / yearsPerPage) !=\n        Math.floor(this._dateAdapter.getYear(this._activeDate) / yearsPerPage)) {\n      this._init();\n    }\n  }\n  private _activeDate: D;\n\n  /** The currently selected date. */\n  @Input()\n  get selected(): D | null { return this._selected; }\n  set selected(value: D | null) {\n    this._selected = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n    this._selectedYear = this._selected && this._dateAdapter.getYear(this._selected);\n  }\n  private _selected: D | null;\n\n  /** The minimum selectable date. */\n  @Input()\n  get minDate(): D | null { return this._minDate; }\n  set minDate(value: D | null) {\n    this._minDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _minDate: D | null;\n\n  /** The maximum selectable date. */\n  @Input()\n  get maxDate(): D | null { return this._maxDate; }\n  set maxDate(value: D | null) {\n    this._maxDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _maxDate: D | null;\n\n  /** A function used to filter which dates are selectable. */\n  @Input() dateFilter: (date: D) => boolean;\n\n  /** Emits when a new year is selected. */\n  @Output() readonly selectedChange: EventEmitter<D> = new EventEmitter<D>();\n\n  /** Emits the selected year. This doesn't imply a change on the selected date */\n  @Output() readonly yearSelected: EventEmitter<D> = new EventEmitter<D>();\n\n  /** Emits when any date is activated. */\n  @Output() readonly activeDateChange: EventEmitter<D> = new EventEmitter<D>();\n\n  /** The body of calendar table */\n  @ViewChild(MatCalendarBody) _matCalendarBody: MatCalendarBody;\n\n  /** Grid of calendar cells representing the currently displayed years. */\n  _years: MatCalendarCell[][];\n\n  /** The year that today falls on. */\n  _todayYear: number;\n\n  /** The year of the selected date. Null if the selected date is null. */\n  _selectedYear: number | null;\n\n  constructor(private _changeDetectorRef: ChangeDetectorRef,\n              @Optional() public _dateAdapter: DateAdapter<D>,\n              @Optional() private _dir?: Directionality) {\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n\n    this._activeDate = this._dateAdapter.today();\n  }\n\n  ngAfterContentInit() {\n    this._init();\n  }\n\n  /** Initializes this multi-year view. */\n  _init() {\n    this._todayYear = this._dateAdapter.getYear(this._dateAdapter.today());\n    let activeYear = this._dateAdapter.getYear(this._activeDate);\n    let activeOffset = activeYear % yearsPerPage;\n    this._years = [];\n    for (let i = 0, row: number[] = []; i < yearsPerPage; i++) {\n      row.push(activeYear - activeOffset + i);\n      if (row.length == yearsPerRow) {\n        this._years.push(row.map(year => this._createCellForYear(year)));\n        row = [];\n      }\n    }\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Handles when a new year is selected. */\n  _yearSelected(year: number) {\n    this.yearSelected.emit(this._dateAdapter.createDate(year, 0, 1));\n    let month = this._dateAdapter.getMonth(this.activeDate);\n    let daysInMonth =\n        this._dateAdapter.getNumDaysInMonth(this._dateAdapter.createDate(year, month, 1));\n    this.selectedChange.emit(this._dateAdapter.createDate(year, month,\n        Math.min(this._dateAdapter.getDate(this.activeDate), daysInMonth)));\n  }\n\n  /** Handles keydown events on the calendar body when calendar is in multi-year view. */\n  _handleCalendarBodyKeydown(event: KeyboardEvent): void {\n    // TODO(mmalerba): We currently allow keyboard navigation to disabled dates, but just prevent\n    // disabled ones from being selected. This may not be ideal, we should look into whether\n    // navigation should skip over disabled dates, and if so, how to implement that efficiently.\n\n    const oldActiveDate = this._activeDate;\n    const isRtl = this._isRtl();\n\n    switch (event.keyCode) {\n      case LEFT_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate, isRtl ? 1 : -1);\n        break;\n      case RIGHT_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate, isRtl ? -1 : 1);\n        break;\n      case UP_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate, -yearsPerRow);\n        break;\n      case DOWN_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate, yearsPerRow);\n        break;\n      case HOME:\n        this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate,\n            -this._dateAdapter.getYear(this._activeDate) % yearsPerPage);\n        break;\n      case END:\n        this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate,\n            yearsPerPage - this._dateAdapter.getYear(this._activeDate) % yearsPerPage - 1);\n        break;\n      case PAGE_UP:\n        this.activeDate =\n            this._dateAdapter.addCalendarYears(\n                this._activeDate, event.altKey ? -yearsPerPage * 10 : -yearsPerPage);\n        break;\n      case PAGE_DOWN:\n        this.activeDate =\n            this._dateAdapter.addCalendarYears(\n                this._activeDate, event.altKey ? yearsPerPage * 10 : yearsPerPage);\n        break;\n      case ENTER:\n        this._yearSelected(this._dateAdapter.getYear(this._activeDate));\n        break;\n      default:\n        // Don't prevent default or focus active cell on keys that we don't explicitly handle.\n        return;\n    }\n\n    if (this._dateAdapter.compareDate(oldActiveDate, this.activeDate)) {\n      this.activeDateChange.emit(this.activeDate);\n    }\n\n    this._focusActiveCell();\n    // Prevent unexpected default actions such as form submission.\n    event.preventDefault();\n  }\n\n  _getActiveCell(): number {\n    return this._dateAdapter.getYear(this.activeDate) % yearsPerPage;\n  }\n\n  /** Focuses the active cell after the microtask queue is empty. */\n  _focusActiveCell() {\n    this._matCalendarBody._focusActiveCell();\n  }\n\n  /** Creates an MatCalendarCell for the given year. */\n  private _createCellForYear(year: number) {\n    let yearName = this._dateAdapter.getYearName(this._dateAdapter.createDate(year, 0, 1));\n    return new MatCalendarCell(year, yearName, yearName, this._shouldEnableYear(year));\n  }\n\n  /** Whether the given year is enabled. */\n  private _shouldEnableYear(year: number) {\n    // disable if the year is greater than maxDate lower than minDate\n    if (year === undefined || year === null ||\n        (this.maxDate && year > this._dateAdapter.getYear(this.maxDate)) ||\n        (this.minDate && year < this._dateAdapter.getYear(this.minDate))) {\n      return false;\n    }\n\n    // enable if it reaches here and there's no filter defined\n    if (!this.dateFilter) {\n      return true;\n    }\n\n    const firstOfYear = this._dateAdapter.createDate(year, 0, 1);\n\n    // If any date in the year is enabled count the year as enabled.\n    for (let date = firstOfYear; this._dateAdapter.getYear(date) == year;\n      date = this._dateAdapter.addCalendarDays(date, 1)) {\n      if (this.dateFilter(date)) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n\n  /** Determines whether the user has the RTL layout direction. */\n  private _isRtl() {\n    return this._dir && this._dir.value === 'rtl';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  DOWN_ARROW,\n  END,\n  ENTER,\n  HOME,\n  LEFT_ARROW,\n  PAGE_DOWN,\n  PAGE_UP,\n  RIGHT_ARROW,\n  UP_ARROW,\n} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  EventEmitter,\n  Inject,\n  Input,\n  Optional,\n  Output,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {DateAdapter, MAT_DATE_FORMATS, MatDateFormats} from '@angular/material/core';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {MatCalendarBody, MatCalendarCell} from './calendar-body';\nimport {createMissingDateImplError} from './datepicker-errors';\n\n/**\n * An internal component used to display a single year in the datepicker.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-year-view',\n  templateUrl: 'year-view.html',\n  exportAs: 'matYearView',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class MatYearView<D> implements AfterContentInit {\n  /** The date to display in this year view (everything other than the year is ignored). */\n  @Input()\n  get activeDate(): D { return this._activeDate; }\n  set activeDate(value: D) {\n    let oldActiveDate = this._activeDate;\n    const validDate =\n        this._getValidDateOrNull(this._dateAdapter.deserialize(value)) || this._dateAdapter.today();\n    this._activeDate = this._dateAdapter.clampDate(validDate, this.minDate, this.maxDate);\n    if (this._dateAdapter.getYear(oldActiveDate) !== this._dateAdapter.getYear(this._activeDate)) {\n      this._init();\n    }\n  }\n  private _activeDate: D;\n\n  /** The currently selected date. */\n  @Input()\n  get selected(): D | null { return this._selected; }\n  set selected(value: D | null) {\n    this._selected = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n    this._selectedMonth = this._getMonthInCurrentYear(this._selected);\n  }\n  private _selected: D | null;\n\n  /** The minimum selectable date. */\n  @Input()\n  get minDate(): D | null { return this._minDate; }\n  set minDate(value: D | null) {\n    this._minDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _minDate: D | null;\n\n  /** The maximum selectable date. */\n  @Input()\n  get maxDate(): D | null { return this._maxDate; }\n  set maxDate(value: D | null) {\n    this._maxDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _maxDate: D | null;\n\n  /** A function used to filter which dates are selectable. */\n  @Input() dateFilter: (date: D) => boolean;\n\n  /** Emits when a new month is selected. */\n  @Output() readonly selectedChange: EventEmitter<D> = new EventEmitter<D>();\n\n  /** Emits the selected month. This doesn't imply a change on the selected date */\n  @Output() readonly monthSelected: EventEmitter<D> = new EventEmitter<D>();\n\n  /** Emits when any date is activated. */\n  @Output() readonly activeDateChange: EventEmitter<D> = new EventEmitter<D>();\n\n  /** The body of calendar table */\n  @ViewChild(MatCalendarBody) _matCalendarBody: MatCalendarBody;\n\n  /** Grid of calendar cells representing the months of the year. */\n  _months: MatCalendarCell[][];\n\n  /** The label for this year (e.g. \"2017\"). */\n  _yearLabel: string;\n\n  /** The month in this year that today falls on. Null if today is in a different year. */\n  _todayMonth: number | null;\n\n  /**\n   * The month in this year that the selected Date falls on.\n   * Null if the selected Date is in a different year.\n   */\n  _selectedMonth: number | null;\n\n  constructor(private _changeDetectorRef: ChangeDetectorRef,\n              @Optional() @Inject(MAT_DATE_FORMATS) private _dateFormats: MatDateFormats,\n              @Optional() public _dateAdapter: DateAdapter<D>,\n              @Optional() private _dir?: Directionality) {\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n    if (!this._dateFormats) {\n      throw createMissingDateImplError('MAT_DATE_FORMATS');\n    }\n\n    this._activeDate = this._dateAdapter.today();\n  }\n\n  ngAfterContentInit() {\n    this._init();\n  }\n\n  /** Handles when a new month is selected. */\n  _monthSelected(month: number) {\n    const normalizedDate =\n          this._dateAdapter.createDate(this._dateAdapter.getYear(this.activeDate), month, 1);\n\n    this.monthSelected.emit(normalizedDate);\n\n    const daysInMonth = this._dateAdapter.getNumDaysInMonth(normalizedDate);\n\n    this.selectedChange.emit(this._dateAdapter.createDate(\n        this._dateAdapter.getYear(this.activeDate), month,\n        Math.min(this._dateAdapter.getDate(this.activeDate), daysInMonth)));\n  }\n\n  /** Handles keydown events on the calendar body when calendar is in year view. */\n  _handleCalendarBodyKeydown(event: KeyboardEvent): void {\n    // TODO(mmalerba): We currently allow keyboard navigation to disabled dates, but just prevent\n    // disabled ones from being selected. This may not be ideal, we should look into whether\n    // navigation should skip over disabled dates, and if so, how to implement that efficiently.\n\n    const oldActiveDate = this._activeDate;\n    const isRtl = this._isRtl();\n\n    switch (event.keyCode) {\n      case LEFT_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate, isRtl ? 1 : -1);\n        break;\n      case RIGHT_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate, isRtl ? -1 : 1);\n        break;\n      case UP_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate, -4);\n        break;\n      case DOWN_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate, 4);\n        break;\n      case HOME:\n        this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate,\n            -this._dateAdapter.getMonth(this._activeDate));\n        break;\n      case END:\n        this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate,\n            11 - this._dateAdapter.getMonth(this._activeDate));\n        break;\n      case PAGE_UP:\n        this.activeDate =\n            this._dateAdapter.addCalendarYears(this._activeDate, event.altKey ? -10 : -1);\n        break;\n      case PAGE_DOWN:\n        this.activeDate =\n            this._dateAdapter.addCalendarYears(this._activeDate, event.altKey ? 10 : 1);\n        break;\n      case ENTER:\n        this._monthSelected(this._dateAdapter.getMonth(this._activeDate));\n        break;\n      default:\n        // Don't prevent default or focus active cell on keys that we don't explicitly handle.\n        return;\n    }\n\n    if (this._dateAdapter.compareDate(oldActiveDate, this.activeDate)) {\n      this.activeDateChange.emit(this.activeDate);\n    }\n\n    this._focusActiveCell();\n    // Prevent unexpected default actions such as form submission.\n    event.preventDefault();\n  }\n\n  /** Initializes this year view. */\n  _init() {\n    this._selectedMonth = this._getMonthInCurrentYear(this.selected);\n    this._todayMonth = this._getMonthInCurrentYear(this._dateAdapter.today());\n    this._yearLabel = this._dateAdapter.getYearName(this.activeDate);\n\n    let monthNames = this._dateAdapter.getMonthNames('short');\n    // First row of months only contains 5 elements so we can fit the year label on the same row.\n    this._months = [[0, 1, 2, 3], [4, 5, 6, 7], [8, 9, 10, 11]].map(row => row.map(\n        month => this._createCellForMonth(month, monthNames[month])));\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Focuses the active cell after the microtask queue is empty. */\n  _focusActiveCell() {\n    this._matCalendarBody._focusActiveCell();\n  }\n\n  /**\n   * Gets the month in this year that the given Date falls on.\n   * Returns null if the given Date is in another year.\n   */\n  private _getMonthInCurrentYear(date: D | null) {\n    return date && this._dateAdapter.getYear(date) == this._dateAdapter.getYear(this.activeDate) ?\n        this._dateAdapter.getMonth(date) : null;\n  }\n\n  /** Creates an MatCalendarCell for the given month. */\n  private _createCellForMonth(month: number, monthName: string) {\n    let ariaLabel = this._dateAdapter.format(\n        this._dateAdapter.createDate(this._dateAdapter.getYear(this.activeDate), month, 1),\n        this._dateFormats.display.monthYearA11yLabel);\n    return new MatCalendarCell(\n        month, monthName.toLocaleUpperCase(), ariaLabel, this._shouldEnableMonth(month));\n  }\n\n  /** Whether the given month is enabled. */\n  private _shouldEnableMonth(month: number) {\n\n    const activeYear = this._dateAdapter.getYear(this.activeDate);\n\n    if (month === undefined || month === null ||\n        this._isYearAndMonthAfterMaxDate(activeYear, month) ||\n        this._isYearAndMonthBeforeMinDate(activeYear, month)) {\n      return false;\n    }\n\n    if (!this.dateFilter) {\n      return true;\n    }\n\n    const firstOfMonth = this._dateAdapter.createDate(activeYear, month, 1);\n\n    // If any date in the month is enabled count the month as enabled.\n    for (let date = firstOfMonth; this._dateAdapter.getMonth(date) == month;\n         date = this._dateAdapter.addCalendarDays(date, 1)) {\n      if (this.dateFilter(date)) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  /**\n   * Tests whether the combination month/year is after this.maxDate, considering\n   * just the month and year of this.maxDate\n   */\n  private _isYearAndMonthAfterMaxDate(year: number, month: number) {\n    if (this.maxDate) {\n      const maxYear = this._dateAdapter.getYear(this.maxDate);\n      const maxMonth = this._dateAdapter.getMonth(this.maxDate);\n\n      return year > maxYear || (year === maxYear && month > maxMonth);\n    }\n\n    return false;\n  }\n\n  /**\n   * Tests whether the combination month/year is before this.minDate, considering\n   * just the month and year of this.minDate\n   */\n  private _isYearAndMonthBeforeMinDate(year: number, month: number) {\n    if (this.minDate) {\n      const minYear = this._dateAdapter.getYear(this.minDate);\n      const minMonth = this._dateAdapter.getMonth(this.minDate);\n\n      return year < minYear || (year === minYear && month < minMonth);\n    }\n\n    return false;\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n\n  /** Determines whether the user has the RTL layout direction. */\n  private _isRtl() {\n    return this._dir && this._dir.value === 'rtl';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ComponentPortal, ComponentType, Portal} from '@angular/cdk/portal';\nimport {\n  AfterContentInit,\n  AfterViewChecked,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  OnChanges,\n  OnDestroy,\n  Optional,\n  Output,\n  SimpleChanges,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {DateAdapter, MAT_DATE_FORMATS, MatDateFormats} from '@angular/material/core';\nimport {Subject, Subscription} from 'rxjs';\nimport {createMissingDateImplError} from './datepicker-errors';\nimport {MatDatepickerIntl} from './datepicker-intl';\nimport {MatMonthView} from './month-view';\nimport {MatMultiYearView, yearsPerPage} from './multi-year-view';\nimport {MatYearView} from './year-view';\n\n/**\n * Possible views for the calendar.\n * @docs-private\n */\nexport type MatCalendarView = 'month' | 'year' | 'multi-year';\n\n/** Default header for MatCalendar */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-calendar-header',\n  templateUrl: 'calendar-header.html',\n  exportAs: 'matCalendarHeader',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatCalendarHeader<D> {\n  constructor(private _intl: MatDatepickerIntl,\n              @Inject(forwardRef(() => MatCalendar)) public calendar: MatCalendar<D>,\n              @Optional() private _dateAdapter: DateAdapter<D>,\n              @Optional() @Inject(MAT_DATE_FORMATS) private _dateFormats: MatDateFormats,\n              changeDetectorRef: ChangeDetectorRef) {\n\n    this.calendar.stateChanges.subscribe(() => changeDetectorRef.markForCheck());\n  }\n\n  /** The label for the current calendar view. */\n  get periodButtonText(): string {\n    if (this.calendar.currentView == 'month') {\n      return this._dateAdapter\n          .format(this.calendar.activeDate, this._dateFormats.display.monthYearLabel)\n              .toLocaleUpperCase();\n    }\n    if (this.calendar.currentView == 'year') {\n      return this._dateAdapter.getYearName(this.calendar.activeDate);\n    }\n    const activeYear = this._dateAdapter.getYear(this.calendar.activeDate);\n    const firstYearInView = this._dateAdapter.getYearName(\n        this._dateAdapter.createDate(activeYear - activeYear % 24, 0, 1));\n    const lastYearInView = this._dateAdapter.getYearName(\n        this._dateAdapter.createDate(activeYear + yearsPerPage - 1 - activeYear % 24, 0, 1));\n    return `${firstYearInView} \\u2013 ${lastYearInView}`;\n  }\n\n  get periodButtonLabel(): string {\n    return this.calendar.currentView == 'month' ?\n        this._intl.switchToMultiYearViewLabel : this._intl.switchToMonthViewLabel;\n  }\n\n  /** The label for the the previous button. */\n  get prevButtonLabel(): string {\n    return {\n      'month': this._intl.prevMonthLabel,\n      'year': this._intl.prevYearLabel,\n      'multi-year': this._intl.prevMultiYearLabel\n    }[this.calendar.currentView];\n  }\n\n  /** The label for the the next button. */\n  get nextButtonLabel(): string {\n    return {\n      'month': this._intl.nextMonthLabel,\n      'year': this._intl.nextYearLabel,\n      'multi-year': this._intl.nextMultiYearLabel\n    }[this.calendar.currentView];\n  }\n\n  /** Handles user clicks on the period label. */\n  currentPeriodClicked(): void {\n    this.calendar.currentView = this.calendar.currentView == 'month' ? 'multi-year' : 'month';\n  }\n\n  /** Handles user clicks on the previous button. */\n  previousClicked(): void {\n    this.calendar.activeDate = this.calendar.currentView == 'month' ?\n        this._dateAdapter.addCalendarMonths(this.calendar.activeDate, -1) :\n            this._dateAdapter.addCalendarYears(\n                this.calendar.activeDate, this.calendar.currentView == 'year' ? -1 : -yearsPerPage\n            );\n  }\n\n  /** Handles user clicks on the next button. */\n  nextClicked(): void {\n    this.calendar.activeDate = this.calendar.currentView == 'month' ?\n        this._dateAdapter.addCalendarMonths(this.calendar.activeDate, 1) :\n            this._dateAdapter.addCalendarYears(\n                this.calendar.activeDate,\n                    this.calendar.currentView == 'year' ? 1 : yearsPerPage\n            );\n  }\n\n  /** Whether the previous period button is enabled. */\n  previousEnabled(): boolean {\n    if (!this.calendar.minDate) {\n      return true;\n    }\n    return !this.calendar.minDate ||\n        !this._isSameView(this.calendar.activeDate, this.calendar.minDate);\n  }\n\n  /** Whether the next period button is enabled. */\n  nextEnabled(): boolean {\n    return !this.calendar.maxDate ||\n        !this._isSameView(this.calendar.activeDate, this.calendar.maxDate);\n  }\n\n  /** Whether the two dates represent the same view in the current view mode (month or year). */\n  private _isSameView(date1: D, date2: D): boolean {\n    if (this.calendar.currentView == 'month') {\n      return this._dateAdapter.getYear(date1) == this._dateAdapter.getYear(date2) &&\n          this._dateAdapter.getMonth(date1) == this._dateAdapter.getMonth(date2);\n    }\n    if (this.calendar.currentView == 'year') {\n      return this._dateAdapter.getYear(date1) == this._dateAdapter.getYear(date2);\n    }\n    // Otherwise we are in 'multi-year' view.\n    return Math.floor(this._dateAdapter.getYear(date1) / yearsPerPage) ==\n        Math.floor(this._dateAdapter.getYear(date2) / yearsPerPage);\n  }\n}\n\n/**\n * A calendar that is used as part of the datepicker.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-calendar',\n  templateUrl: 'calendar.html',\n  styleUrls: ['calendar.css'],\n  host: {\n    'class': 'mat-calendar',\n  },\n  exportAs: 'matCalendar',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatCalendar<D> implements AfterContentInit, AfterViewChecked, OnDestroy, OnChanges {\n  /** An input indicating the type of the header component, if set. */\n  @Input() headerComponent: ComponentType<any>;\n\n  /** A portal containing the header component type for this calendar. */\n  _calendarHeaderPortal: Portal<any>;\n\n  private _intlChanges: Subscription;\n\n  /**\n   * Used for scheduling that focus should be moved to the active cell on the next tick.\n   * We need to schedule it, rather than do it immediately, because we have to wait\n   * for Angular to re-evaluate the view children.\n   */\n  private _moveFocusOnNextTick = false;\n\n  /** A date representing the period (month or year) to start the calendar in. */\n  @Input()\n  get startAt(): D | null { return this._startAt; }\n  set startAt(value: D | null) {\n    this._startAt = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _startAt: D | null;\n\n  /** Whether the calendar should be started in month or year view. */\n  @Input() startView: MatCalendarView = 'month';\n\n  /** The currently selected date. */\n  @Input()\n  get selected(): D | null { return this._selected; }\n  set selected(value: D | null) {\n    this._selected = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _selected: D | null;\n\n  /** The minimum selectable date. */\n  @Input()\n  get minDate(): D | null { return this._minDate; }\n  set minDate(value: D | null) {\n    this._minDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _minDate: D | null;\n\n  /** The maximum selectable date. */\n  @Input()\n  get maxDate(): D | null { return this._maxDate; }\n  set maxDate(value: D | null) {\n    this._maxDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _maxDate: D | null;\n\n  /** A function used to filter which dates are selectable. */\n  @Input() dateFilter: (date: D) => boolean;\n\n  /** Emits when the currently selected date changes. */\n  @Output() readonly selectedChange: EventEmitter<D> = new EventEmitter<D>();\n\n  /**\n   * Emits the year chosen in multiyear view.\n   * This doesn't imply a change on the selected date.\n   */\n  @Output() readonly yearSelected: EventEmitter<D> = new EventEmitter<D>();\n\n  /**\n   * Emits the month chosen in year view.\n   * This doesn't imply a change on the selected date.\n   */\n  @Output() readonly monthSelected: EventEmitter<D> = new EventEmitter<D>();\n\n  /** Emits when any date is selected. */\n  @Output() readonly _userSelection: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Reference to the current month view component. */\n  @ViewChild(MatMonthView) monthView: MatMonthView<D>;\n\n  /** Reference to the current year view component. */\n  @ViewChild(MatYearView) yearView: MatYearView<D>;\n\n  /** Reference to the current multi-year view component. */\n  @ViewChild(MatMultiYearView) multiYearView: MatMultiYearView<D>;\n\n  /**\n   * The current active date. This determines which time period is shown and which date is\n   * highlighted when using keyboard navigation.\n   */\n  get activeDate(): D { return this._clampedActiveDate; }\n  set activeDate(value: D) {\n    this._clampedActiveDate = this._dateAdapter.clampDate(value, this.minDate, this.maxDate);\n    this.stateChanges.next();\n  }\n  private _clampedActiveDate: D;\n\n  /** Whether the calendar is in month view. */\n  get currentView(): MatCalendarView { return this._currentView; }\n  set currentView(value: MatCalendarView) {\n    this._currentView = value;\n    this._moveFocusOnNextTick = true;\n  }\n  private _currentView: MatCalendarView;\n\n  /**\n   * Emits whenever there is a state change that the header may need to respond to.\n   */\n  stateChanges = new Subject<void>();\n\n  constructor(_intl: MatDatepickerIntl,\n              @Optional() private _dateAdapter: DateAdapter<D>,\n              @Optional() @Inject(MAT_DATE_FORMATS) private _dateFormats: MatDateFormats,\n              changeDetectorRef: ChangeDetectorRef) {\n\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n\n    if (!this._dateFormats) {\n      throw createMissingDateImplError('MAT_DATE_FORMATS');\n    }\n\n    this._intlChanges = _intl.changes.subscribe(() => {\n      changeDetectorRef.markForCheck();\n      this.stateChanges.next();\n    });\n  }\n\n  ngAfterContentInit() {\n    this._calendarHeaderPortal = new ComponentPortal(this.headerComponent || MatCalendarHeader);\n    this.activeDate = this.startAt || this._dateAdapter.today();\n\n    // Assign to the private property since we don't want to move focus on init.\n    this._currentView = this.startView;\n  }\n\n  ngAfterViewChecked() {\n    if (this._moveFocusOnNextTick) {\n      this._moveFocusOnNextTick = false;\n      this.focusActiveCell();\n    }\n  }\n\n  ngOnDestroy() {\n    this._intlChanges.unsubscribe();\n    this.stateChanges.complete();\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    const change = changes.minDate || changes.maxDate || changes.dateFilter;\n\n    if (change && !change.firstChange) {\n      const view = this._getCurrentViewComponent();\n\n      if (view) {\n        view._init();\n      }\n    }\n\n    this.stateChanges.next();\n  }\n\n  focusActiveCell() {\n    this._getCurrentViewComponent()._focusActiveCell();\n  }\n\n  /** Handles date selection in the month view. */\n  _dateSelected(date: D): void {\n    if (!this._dateAdapter.sameDate(date, this.selected)) {\n      this.selectedChange.emit(date);\n    }\n  }\n\n  /** Handles year selection in the multiyear view. */\n  _yearSelectedInMultiYearView(normalizedYear: D) {\n    this.yearSelected.emit(normalizedYear);\n  }\n\n  /** Handles month selection in the year view. */\n  _monthSelectedInYearView(normalizedMonth: D) {\n    this.monthSelected.emit(normalizedMonth);\n  }\n\n  _userSelected(): void {\n    this._userSelection.emit();\n  }\n\n  /** Handles year/month selection in the multi-year/year views. */\n  _goToDateInView(date: D, view: 'month' | 'year' | 'multi-year'): void {\n    this.activeDate = date;\n    this.currentView = view;\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n\n  /** Returns the component instance that corresponds to the current calendar view. */\n  private _getCurrentViewComponent() {\n    return this.monthView || this.yearView || this.multiYearView;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n  group,\n  query,\n  animateChild,\n} from '@angular/animations';\n\n/** Animations used by the Material datepicker. */\nexport const matDatepickerAnimations: {\n  readonly transformPanel: AnimationTriggerMetadata;\n  readonly fadeInCalendar: AnimationTriggerMetadata;\n} = {\n  /** Transforms the height of the datepicker's calendar. */\n  transformPanel: trigger('transformPanel', [\n    state('void', style({opacity: 0, transform: 'scale(1, 0)'})),\n    state('enter', style({opacity: 1, transform: 'scale(1, 1)'})),\n    transition('void => enter', group([\n      query('@fadeInCalendar', animateChild()),\n      animate('400ms cubic-bezier(0.25, 0.8, 0.25, 1)')\n    ])),\n    transition('* => void', animate('100ms linear', style({opacity: 0})))\n  ]),\n\n  /** Fades in the content of the calendar. */\n  fadeInCalendar: trigger('fadeInCalendar', [\n    state('void', style({opacity: 0})),\n    state('enter', style({opacity: 1})),\n    transition('void => *', animate('400ms 100ms cubic-bezier(0.55, 0, 0.55, 0.2)'))\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusKeyManager} from '@angular/cdk/a11y';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {SelectionModel} from '@angular/cdk/collections';\nimport {BACKSPACE} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  DoCheck,\n  ElementRef,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Output,\n  QueryList,\n  Self,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {ControlValueAccessor, FormGroupDirective, NgControl, NgForm} from '@angular/forms';\nimport {CanUpdateErrorState, ErrorStateMatcher, mixinErrorState} from '@angular/material/core';\nimport {MatFormFieldControl} from '@angular/material/form-field';\nimport {merge, Observable, Subscription} from 'rxjs';\nimport {startWith} from 'rxjs/operators';\nimport {MatChip, MatChipEvent, MatChipSelectionChange} from './chip';\nimport {MatChipInput} from './chip-input';\n\n\n// Boilerplate for applying mixins to MatChipList.\n/** @docs-private */\nexport class MatChipListBase {\n  constructor(public _defaultErrorStateMatcher: ErrorStateMatcher,\n              public _parentForm: NgForm,\n              public _parentFormGroup: FormGroupDirective,\n              /** @docs-private */\n              public ngControl: NgControl) {}\n}\nexport const _MatChipListMixinBase = mixinErrorState(MatChipListBase);\n\n\n// Increasing integer for generating unique ids for chip-list components.\nlet nextUniqueId = 0;\n\n/** Change event object that is emitted when the chip list value has changed. */\nexport class MatChipListChange {\n  constructor(\n    /** Chip list that emitted the event. */\n    public source: MatChipList,\n    /** Value of the chip list when the event was emitted. */\n    public value: any) { }\n}\n\n\n/**\n * A material design chips component (named ChipList for it's similarity to the List component).\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-chip-list',\n  template: `<div class=\"mat-chip-list-wrapper\"><ng-content></ng-content></div>`,\n  exportAs: 'matChipList',\n  host: {\n    '[attr.tabindex]': '_tabIndex',\n    '[attr.aria-describedby]': '_ariaDescribedby || null',\n    '[attr.aria-required]': 'required.toString()',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.aria-invalid]': 'errorState',\n    '[attr.aria-multiselectable]': 'multiple',\n    '[attr.role]': 'role',\n    '[class.mat-chip-list-disabled]': 'disabled',\n    '[class.mat-chip-list-invalid]': 'errorState',\n    '[class.mat-chip-list-required]': 'required',\n    '[attr.aria-orientation]': 'ariaOrientation',\n    'class': 'mat-chip-list',\n    '(focus)': 'focus()',\n    '(blur)': '_blur()',\n    '(keydown)': '_keydown($event)',\n    '[id]': '_uid',\n  },\n  providers: [{provide: MatFormFieldControl, useExisting: MatChipList}],\n  styleUrls: ['chips.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class MatChipList extends _MatChipListMixinBase implements MatFormFieldControl<any>,\n  ControlValueAccessor, AfterContentInit, DoCheck, OnInit, OnDestroy, CanUpdateErrorState {\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  readonly controlType: string = 'mat-chip-list';\n\n  /** When a chip is destroyed, we track the index so we can focus the appropriate next chip. */\n  protected _lastDestroyedIndex: number|null = null;\n\n  /** Track which chips we're listening to for focus/destruction. */\n  protected _chipSet: WeakMap<MatChip, boolean> = new WeakMap();\n\n  /** Subscription to tabbing out from the chip list. */\n  private _tabOutSubscription = Subscription.EMPTY;\n\n  /** Subscription to changes in the chip list. */\n  private _changeSubscription: Subscription;\n\n  /** Subscription to focus changes in the chips. */\n  private _chipFocusSubscription: Subscription | null;\n\n  /** Subscription to blur changes in the chips. */\n  private _chipBlurSubscription: Subscription | null;\n\n  /** Subscription to selection changes in chips. */\n  private _chipSelectionSubscription: Subscription | null;\n\n  /** Subscription to remove changes in chips. */\n  private _chipRemoveSubscription: Subscription | null;\n\n  /** The chip input to add more chips */\n  protected _chipInput: MatChipInput;\n\n  /** Uid of the chip list */\n  _uid: string = `mat-chip-list-${nextUniqueId++}`;\n\n  /** The aria-describedby attribute on the chip list for improved a11y. */\n  _ariaDescribedby: string;\n\n  /** Tab index for the chip list. */\n  _tabIndex = 0;\n\n  /**\n   * User defined tab index.\n   * When it is not null, use user defined tab index. Otherwise use _tabIndex\n   */\n  _userTabIndex: number | null = null;\n\n  /** The FocusKeyManager which handles focus. */\n  _keyManager: FocusKeyManager<MatChip>;\n\n  /** Function when touched */\n  _onTouched = () => {};\n\n  /** Function when changed */\n  _onChange: (value: any) => void = () => {};\n\n  _selectionModel: SelectionModel<MatChip>;\n\n  /** The array of selected chips inside chip list. */\n  get selected(): MatChip[] | MatChip {\n    return this.multiple ? this._selectionModel.selected : this._selectionModel.selected[0];\n  }\n\n  /** The ARIA role applied to the chip list. */\n  get role(): string | null { return this.empty ? null : 'listbox'; }\n\n  /** An object used to control when error messages are shown. */\n  @Input() errorStateMatcher: ErrorStateMatcher;\n\n  /** Whether the user should be allowed to select multiple chips. */\n  @Input()\n  get multiple(): boolean { return this._multiple; }\n  set multiple(value: boolean) {\n    this._multiple = coerceBooleanProperty(value);\n  }\n  private _multiple: boolean = false;\n\n  /**\n   * A function to compare the option values with the selected values. The first argument\n   * is a value from an option. The second is a value from the selection. A boolean\n   * should be returned.\n   */\n  @Input()\n  get compareWith(): (o1: any, o2: any) => boolean { return this._compareWith; }\n  set compareWith(fn: (o1: any, o2: any) => boolean) {\n    this._compareWith = fn;\n    if (this._selectionModel) {\n      // A different comparator means the selection could change.\n      this._initializeSelection();\n    }\n  }\n  private _compareWith = (o1: any, o2: any) => o1 === o2;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get value(): any { return this._value; }\n  set value(value: any) {\n    this.writeValue(value);\n    this._value = value;\n  }\n  protected _value: any;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  get id(): string {\n    return this._chipInput ? this._chipInput.id : this._uid;\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get required(): boolean { return this._required; }\n  set required(value: boolean) {\n    this._required = coerceBooleanProperty(value);\n    this.stateChanges.next();\n  }\n  protected _required: boolean = false;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get placeholder(): string {\n    return this._chipInput ? this._chipInput.placeholder : this._placeholder;\n  }\n  set placeholder(value: string) {\n    this._placeholder = value;\n    this.stateChanges.next();\n  }\n  protected _placeholder: string;\n\n  /** Whether any chips or the matChipInput inside of this chip-list has focus. */\n  get focused(): boolean {\n    return this.chips.some(chip => chip._hasFocus) ||\n      (this._chipInput && this._chipInput.focused);\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  get empty(): boolean {\n    return (!this._chipInput || this._chipInput.empty) && this.chips.length === 0;\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  get shouldLabelFloat(): boolean { return !this.empty || this.focused; }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get disabled(): boolean { return this.ngControl ? !!this.ngControl.disabled : this._disabled; }\n  set disabled(value: boolean) { this._disabled = coerceBooleanProperty(value); }\n  protected _disabled: boolean = false;\n\n  /** Orientation of the chip list. */\n  @Input('aria-orientation') ariaOrientation: 'horizontal' | 'vertical' = 'horizontal';\n\n  /**\n   * Whether or not this chip list is selectable. When a chip list is not selectable,\n   * the selected states for all the chips inside the chip list are always ignored.\n   */\n  @Input()\n  get selectable(): boolean { return this._selectable; }\n  set selectable(value: boolean) {\n    this._selectable = coerceBooleanProperty(value);\n    if (this.chips) {\n      this.chips.forEach(chip => chip.chipListSelectable = this._selectable);\n    }\n  }\n  protected _selectable: boolean = true;\n\n  @Input()\n  set tabIndex(value: number) {\n    this._userTabIndex = value;\n    this._tabIndex = value;\n  }\n\n  /** Combined stream of all of the child chips' selection change events. */\n  get chipSelectionChanges(): Observable<MatChipSelectionChange> {\n    return merge(...this.chips.map(chip => chip.selectionChange));\n  }\n\n  /** Combined stream of all of the child chips' focus change events. */\n  get chipFocusChanges(): Observable<MatChipEvent> {\n    return merge(...this.chips.map(chip => chip._onFocus));\n  }\n\n  /** Combined stream of all of the child chips' blur change events. */\n  get chipBlurChanges(): Observable<MatChipEvent> {\n    return merge(...this.chips.map(chip => chip._onBlur));\n  }\n\n  /** Combined stream of all of the child chips' remove change events. */\n  get chipRemoveChanges(): Observable<MatChipEvent> {\n    return merge(...this.chips.map(chip => chip.destroyed));\n  }\n\n  /** Event emitted when the selected chip list value has been changed by the user. */\n  @Output() readonly change: EventEmitter<MatChipListChange> =\n      new EventEmitter<MatChipListChange>();\n\n  /**\n   * Event that emits whenever the raw value of the chip-list changes. This is here primarily\n   * to facilitate the two-way binding for the `value` input.\n   * @docs-private\n   */\n  @Output() readonly valueChange: EventEmitter<any> = new EventEmitter<any>();\n\n  /** The chip components contained within this chip list. */\n  @ContentChildren(MatChip) chips: QueryList<MatChip>;\n\n  constructor(protected _elementRef: ElementRef,\n              private _changeDetectorRef: ChangeDetectorRef,\n              @Optional() private _dir: Directionality,\n              @Optional() _parentForm: NgForm,\n              @Optional() _parentFormGroup: FormGroupDirective,\n              _defaultErrorStateMatcher: ErrorStateMatcher,\n              /** @docs-private */\n              @Optional() @Self() public ngControl: NgControl) {\n    super(_defaultErrorStateMatcher, _parentForm, _parentFormGroup, ngControl);\n    if (this.ngControl) {\n      this.ngControl.valueAccessor = this;\n    }\n  }\n\n  ngAfterContentInit() {\n    this._keyManager = new FocusKeyManager<MatChip>(this.chips)\n      .withWrap()\n      .withVerticalOrientation()\n      .withHorizontalOrientation(this._dir ? this._dir.value : 'ltr');\n\n    // Prevents the chip list from capturing focus and redirecting\n    // it back to the first chip when the user tabs out.\n    this._tabOutSubscription = this._keyManager.tabOut.subscribe(() => {\n      this._tabIndex = -1;\n      setTimeout(() => this._tabIndex = this._userTabIndex || 0);\n    });\n\n    // When the list changes, re-subscribe\n    this._changeSubscription = this.chips.changes.pipe(startWith(null)).subscribe(() => {\n      this._resetChips();\n\n      // Reset chips selected/deselected status\n      this._initializeSelection();\n\n      // Check to see if we need to update our tab index\n      this._updateTabIndex();\n\n      // Check to see if we have a destroyed chip and need to refocus\n      this._updateFocusForDestroyedChips();\n\n      this.stateChanges.next();\n    });\n  }\n\n  ngOnInit() {\n    this._selectionModel = new SelectionModel<MatChip>(this.multiple, undefined, false);\n    this.stateChanges.next();\n  }\n\n  ngDoCheck() {\n    if (this.ngControl) {\n      // We need to re-evaluate this on every change detection cycle, because there are some\n      // error triggers that we can't subscribe to (e.g. parent form submissions). This means\n      // that whatever logic is in here has to be super lean or we risk destroying the performance.\n      this.updateErrorState();\n    }\n  }\n\n  ngOnDestroy() {\n    this._tabOutSubscription.unsubscribe();\n\n    if (this._changeSubscription) {\n      this._changeSubscription.unsubscribe();\n    }\n\n    if (this._chipRemoveSubscription) {\n      this._chipRemoveSubscription.unsubscribe();\n    }\n\n    this._dropSubscriptions();\n    this.stateChanges.complete();\n  }\n\n\n  /** Associates an HTML input element with this chip list. */\n  registerInput(inputElement: MatChipInput): void {\n    this._chipInput = inputElement;\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  setDescribedByIds(ids: string[]) { this._ariaDescribedby = ids.join(' '); }\n\n  // Implemented as part of ControlValueAccessor.\n  writeValue(value: any): void {\n    if (this.chips) {\n      this._setSelectionByValue(value, false);\n    }\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnChange(fn: (value: any) => void): void {\n    this._onChange = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnTouched(fn: () => void): void {\n    this._onTouched = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n    this._elementRef.nativeElement.disabled = isDisabled;\n    this.stateChanges.next();\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  onContainerClick() { this.focus(); }\n\n  /**\n   * Focuses the the first non-disabled chip in this chip list, or the associated input when there\n   * are no eligible chips.\n   */\n  focus(): void {\n    // TODO: ARIA says this should focus the first `selected` chip if any are selected.\n    // Focus on first element if there's no chipInput inside chip-list\n    if (this._chipInput && this._chipInput.focused) {\n      // do nothing\n    } else if (this.chips.length > 0) {\n      this._keyManager.setFirstItemActive();\n      this.stateChanges.next();\n    } else {\n      this._focusInput();\n      this.stateChanges.next();\n    }\n  }\n\n  /** Attempt to focus an input if we have one. */\n  _focusInput() {\n    if (this._chipInput) {\n      this._chipInput.focus();\n    }\n  }\n\n  /**\n   * Pass events to the keyboard manager. Available here for tests.\n   */\n  _keydown(event: KeyboardEvent) {\n    const target = event.target as HTMLElement;\n\n    // If they are on an empty input and hit backspace, focus the last chip\n    if (event.keyCode === BACKSPACE && this._isInputEmpty(target)) {\n      this._keyManager.setLastItemActive();\n      event.preventDefault();\n    } else if (target && target.classList.contains('mat-chip')) {\n      this._keyManager.onKeydown(event);\n      this.stateChanges.next();\n    }\n  }\n\n\n  /**\n   * Check the tab index as you should not be allowed to focus an empty list.\n   */\n  protected _updateTabIndex(): void {\n    // If we have 0 chips, we should not allow keyboard focus\n    this._tabIndex = this._userTabIndex || (this.chips.length === 0 ? -1 : 0);\n  }\n\n  /**\n   * Update key manager's active item when chip is deleted.\n   * If the deleted chip is the last chip in chip list, focus the new last chip.\n   * Otherwise focus the next chip in the list.\n   * Save `_lastDestroyedIndex` so we can set the correct focus.\n   */\n  protected _updateKeyManager(chip: MatChip) {\n    let chipIndex: number = this.chips.toArray().indexOf(chip);\n    if (this._isValidIndex(chipIndex)) {\n      if (chip._hasFocus) {\n        // Check whether the chip is not the last item\n        if (chipIndex < this.chips.length - 1) {\n          this._keyManager.setActiveItem(chipIndex);\n        } else if (chipIndex - 1 >= 0) {\n          this._keyManager.setActiveItem(chipIndex - 1);\n        }\n      }\n      if (this._keyManager.activeItemIndex === chipIndex) {\n        this._lastDestroyedIndex = chipIndex;\n      }\n    }\n  }\n\n  /**\n   * Checks to see if a focus chip was recently destroyed so that we can refocus the next closest\n   * one.\n   */\n  protected _updateFocusForDestroyedChips() {\n    let chipsArray = this.chips;\n\n    if (this._lastDestroyedIndex != null && chipsArray.length > 0 && this.focused) {\n      // Check whether the destroyed chip was the last item\n      const newFocusIndex = Math.min(this._lastDestroyedIndex, chipsArray.length - 1);\n      this._keyManager.setActiveItem(newFocusIndex);\n      let focusChip = this._keyManager.activeItem;\n      // Focus the chip\n      if (focusChip) {\n        focusChip.focus();\n      }\n    }\n\n    // Reset our destroyed index\n    this._lastDestroyedIndex = null;\n  }\n\n  /**\n   * Utility to ensure all indexes are valid.\n   *\n   * @param index The index to be checked.\n   * @returns True if the index is valid for our list of chips.\n   */\n  private _isValidIndex(index: number): boolean {\n    return index >= 0 && index < this.chips.length;\n  }\n\n  private _isInputEmpty(element: HTMLElement): boolean {\n    if (element && element.nodeName.toLowerCase() === 'input') {\n      let input = element as HTMLInputElement;\n      return !input.value;\n    }\n\n    return false;\n  }\n\n  _setSelectionByValue(value: any, isUserInput: boolean = true) {\n    this._clearSelection();\n    this.chips.forEach(chip => chip.deselect());\n\n    if (Array.isArray(value)) {\n      value.forEach(currentValue => this._selectValue(currentValue, isUserInput));\n      this._sortValues();\n    } else {\n      const correspondingChip = this._selectValue(value, isUserInput);\n\n      // Shift focus to the active item. Note that we shouldn't do this in multiple\n      // mode, because we don't know what chip the user interacted with last.\n      if (correspondingChip) {\n        if (isUserInput) {\n          this._keyManager.setActiveItem(correspondingChip);\n        }\n      }\n    }\n  }\n\n  /**\n   * Finds and selects the chip based on its value.\n   * @returns Chip that has the corresponding value.\n   */\n  private _selectValue(value: any, isUserInput: boolean = true): MatChip | undefined {\n\n    const correspondingChip = this.chips.find(chip => {\n      return chip.value != null && this._compareWith(chip.value,  value);\n    });\n\n    if (correspondingChip) {\n      isUserInput ? correspondingChip.selectViaInteraction() : correspondingChip.select();\n      this._selectionModel.select(correspondingChip);\n    }\n\n    return correspondingChip;\n  }\n\n  private _initializeSelection(): void {\n    // Defer setting the value in order to avoid the \"Expression\n    // has changed after it was checked\" errors from Angular.\n    Promise.resolve().then(() => {\n      if (this.ngControl || this._value) {\n        this._setSelectionByValue(this.ngControl ? this.ngControl.value : this._value, false);\n        this.stateChanges.next();\n      }\n    });\n  }\n\n  /**\n   * Deselects every chip in the list.\n   * @param skip Chip that should not be deselected.\n   */\n  private _clearSelection(skip?: MatChip): void {\n    this._selectionModel.clear();\n    this.chips.forEach(chip => {\n      if (chip !== skip) {\n        chip.deselect();\n      }\n    });\n    this.stateChanges.next();\n  }\n\n  /**\n   * Sorts the model values, ensuring that they keep the same\n   * order that they have in the panel.\n   */\n  private _sortValues(): void {\n    if (this._multiple) {\n      this._selectionModel.clear();\n\n      this.chips.forEach(chip => {\n        if (chip.selected) {\n          this._selectionModel.select(chip);\n        }\n      });\n      this.stateChanges.next();\n    }\n  }\n\n  /** Emits change event to set the model value. */\n  private _propagateChanges(fallbackValue?: any): void {\n    let valueToEmit: any = null;\n\n    if (Array.isArray(this.selected)) {\n      valueToEmit = this.selected.map(chip => chip.value);\n    } else {\n      valueToEmit = this.selected ? this.selected.value : fallbackValue;\n    }\n    this._value = valueToEmit;\n    this.change.emit(new MatChipListChange(this, valueToEmit));\n    this.valueChange.emit(valueToEmit);\n    this._onChange(valueToEmit);\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** When blurred, mark the field as touched when focus moved outside the chip list. */\n  _blur() {\n    this._keyManager.setActiveItem(-1);\n    if (!this.disabled) {\n      if (this._chipInput) {\n        // If there's a chip input, we should check whether the focus moved to chip input.\n        // If the focus is not moved to chip input, mark the field as touched. If the focus moved\n        // to chip input, do nothing.\n        // Timeout is needed to wait for the focus() event trigger on chip input.\n        setTimeout(() => {\n          if (!this.focused) {\n            this._markAsTouched();\n          }\n        });\n      } else {\n        // If there's no chip input, then mark the field as touched.\n        this._markAsTouched();\n      }\n    }\n  }\n\n  /** Mark the field as touched */\n  _markAsTouched() {\n    this._onTouched();\n    this._changeDetectorRef.markForCheck();\n    this.stateChanges.next();\n  }\n\n  private _resetChips() {\n    this._dropSubscriptions();\n    this._listenToChipsFocus();\n    this._listenToChipsSelection();\n    this._listenToChipsRemoved();\n  }\n\n\n  private _dropSubscriptions() {\n    if (this._chipFocusSubscription) {\n      this._chipFocusSubscription.unsubscribe();\n      this._chipFocusSubscription = null;\n    }\n\n    if (this._chipBlurSubscription) {\n      this._chipBlurSubscription.unsubscribe();\n      this._chipBlurSubscription = null;\n    }\n\n    if (this._chipSelectionSubscription) {\n      this._chipSelectionSubscription.unsubscribe();\n      this._chipSelectionSubscription = null;\n    }\n  }\n\n  /** Listens to user-generated selection events on each chip. */\n  private _listenToChipsSelection(): void {\n    this._chipSelectionSubscription = this.chipSelectionChanges.subscribe(event => {\n      event.source.selected\n        ? this._selectionModel.select(event.source)\n        : this._selectionModel.deselect(event.source);\n\n      // For single selection chip list, make sure the deselected value is unselected.\n      if (!this.multiple) {\n        this.chips.forEach(chip => {\n          if (!this._selectionModel.isSelected(chip) && chip.selected) {\n            chip.deselect();\n          }\n        });\n      }\n\n      if (event.isUserInput) {\n        this._propagateChanges();\n      }\n    });\n  }\n\n  /** Listens to user-generated selection events on each chip. */\n  private _listenToChipsFocus(): void {\n    this._chipFocusSubscription = this.chipFocusChanges.subscribe(event => {\n      let chipIndex: number = this.chips.toArray().indexOf(event.chip);\n\n      if (this._isValidIndex(chipIndex)) {\n        this._keyManager.updateActiveItemIndex(chipIndex);\n      }\n      this.stateChanges.next();\n    });\n\n    this._chipBlurSubscription = this.chipBlurChanges.subscribe(() => {\n      this._blur();\n      this.stateChanges.next();\n    });\n  }\n\n  private _listenToChipsRemoved(): void {\n    this._chipRemoveSubscription = this.chipRemoveChanges.subscribe(event => {\n      this._updateKeyManager(event.chip);\n    });\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {Directive, ElementRef, EventEmitter, Input, Output, Inject} from '@angular/core';\nimport {MatChipList} from './chip-list';\nimport {MAT_CHIPS_DEFAULT_OPTIONS, MatChipsDefaultOptions} from './chip-default-options';\n\n\n/** Represents an input event on a `matChipInput`. */\nexport interface MatChipInputEvent {\n  /** The native `<input>` element that the event is being fired for. */\n  input: HTMLInputElement;\n\n  /** The value of the input. */\n  value: string;\n}\n\n// Increasing integer for generating unique ids.\nlet nextUniqueId = 0;\n\n/**\n * Directive that adds chip-specific behaviors to an input element inside `<mat-form-field>`.\n * May be placed inside or outside of an `<mat-chip-list>`.\n */\n@Directive({\n  selector: 'input[matChipInputFor]',\n  exportAs: 'matChipInput, matChipInputFor',\n  host: {\n    'class': 'mat-chip-input mat-input-element',\n    '(keydown)': '_keydown($event)',\n    '(blur)': '_blur()',\n    '(focus)': '_focus()',\n    '(input)': '_onInput()',\n    '[id]': 'id',\n    '[attr.placeholder]': 'placeholder || null',\n  }\n})\nexport class MatChipInput {\n  /** Whether the control is focused. */\n  focused: boolean = false;\n  _chipList: MatChipList;\n\n  /** Register input for chip list */\n  @Input('matChipInputFor')\n  set chipList(value: MatChipList) {\n    if (value) {\n      this._chipList = value;\n      this._chipList.registerInput(this);\n    }\n  }\n\n  /**\n   * Whether or not the chipEnd event will be emitted when the input is blurred.\n   */\n  @Input('matChipInputAddOnBlur')\n  get addOnBlur(): boolean { return this._addOnBlur; }\n  set addOnBlur(value: boolean) { this._addOnBlur = coerceBooleanProperty(value); }\n  _addOnBlur: boolean = false;\n\n  /**\n   * The list of key codes that will trigger a chipEnd event.\n   *\n   * Defaults to `[ENTER]`.\n   */\n  // TODO(tinayuangao): Support Set here\n  @Input('matChipInputSeparatorKeyCodes')\n  separatorKeyCodes: number[] = this._defaultOptions.separatorKeyCodes;\n\n  /** Emitted when a chip is to be added. */\n  @Output('matChipInputTokenEnd')\n  chipEnd: EventEmitter<MatChipInputEvent> = new EventEmitter<MatChipInputEvent>();\n\n  /**\n   * The input's placeholder text.\n   * @deprecated Bind to the `placeholder` attribute directly.\n   * @deletion-target 7.0.0\n   */\n  @Input() placeholder: string = '';\n\n  /** Unique id for the input. */\n  @Input() id: string = `mat-chip-list-input-${nextUniqueId++}`;\n\n  /** Whether the input is empty. */\n  get empty(): boolean { return !this._inputElement.value; }\n\n  /** The native input element to which this directive is attached. */\n  protected _inputElement: HTMLInputElement;\n\n  constructor(\n    protected _elementRef: ElementRef,\n    @Inject(MAT_CHIPS_DEFAULT_OPTIONS) private _defaultOptions: MatChipsDefaultOptions) {\n    this._inputElement = this._elementRef.nativeElement as HTMLInputElement;\n  }\n\n  /** Utility method to make host definition/tests more clear. */\n  _keydown(event?: KeyboardEvent) {\n    this._emitChipEnd(event);\n  }\n\n  /** Checks to see if the blur should emit the (chipEnd) event. */\n  _blur() {\n    if (this.addOnBlur) {\n      this._emitChipEnd();\n    }\n    this.focused = false;\n    // Blur the chip list if it is not focused\n    if (!this._chipList.focused) {\n      this._chipList._blur();\n    }\n    this._chipList.stateChanges.next();\n  }\n\n  _focus() {\n    this.focused = true;\n    this._chipList.stateChanges.next();\n  }\n\n  /** Checks to see if the (chipEnd) event needs to be emitted. */\n  _emitChipEnd(event?: KeyboardEvent) {\n    if (!this._inputElement.value && !!event) {\n      this._chipList._keydown(event);\n    }\n    if (!event || this.separatorKeyCodes.indexOf(event.keyCode) > -1) {\n      this.chipEnd.emit({ input: this._inputElement, value: this._inputElement.value });\n\n      if (event) {\n        event.preventDefault();\n      }\n    }\n  }\n\n  _onInput() {\n    // Let chip list know whenever the value changes.\n    this._chipList.stateChanges.next();\n  }\n\n  /** Focuses the input. */\n  focus(): void { this._inputElement.focus(); }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ENTER} from '@angular/cdk/keycodes';\nimport {NgModule} from '@angular/core';\nimport {ErrorStateMatcher} from '@angular/material/core';\nimport {MatChip, MatChipAvatar, MatChipRemove, MatChipTrailingIcon} from './chip';\nimport {MAT_CHIPS_DEFAULT_OPTIONS, MatChipsDefaultOptions} from './chip-default-options';\nimport {MatChipInput} from './chip-input';\nimport {MatChipList} from './chip-list';\n\nconst CHIP_DECLARATIONS = [\n  MatChipList,\n  MatChip,\n  MatChipInput,\n  MatChipRemove,\n  MatChipAvatar,\n  MatChipTrailingIcon,\n];\n\n@NgModule({\n  exports: CHIP_DECLARATIONS,\n  declarations: CHIP_DECLARATIONS,\n  providers: [\n    ErrorStateMatcher,\n    {\n      provide: MAT_CHIPS_DEFAULT_OPTIONS,\n      useValue: {\n        separatorKeyCodes: [ENTER]\n      } as MatChipsDefaultOptions\n    }\n  ]\n})\nexport class MatChipsModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ViewContainerRef} from '@angular/core';\nimport {Direction} from '@angular/cdk/bidi';\nimport {ScrollStrategy} from '@angular/cdk/overlay';\n\n/** Valid ARIA roles for a dialog element. */\nexport type DialogRole = 'dialog' | 'alertdialog';\n\n/** Possible overrides for a dialog's position. */\nexport interface DialogPosition {\n  /** Override for the dialog's top position. */\n  top?: string;\n\n  /** Override for the dialog's bottom position. */\n  bottom?: string;\n\n  /** Override for the dialog's left position. */\n  left?: string;\n\n  /** Override for the dialog's right position. */\n  right?: string;\n}\n\n/**\n * Configuration for opening a modal dialog with the MatDialog service.\n */\nexport class MatDialogConfig<D = any> {\n\n  /**\n   * Where the attached component should live in Angular's *logical* component tree.\n   * This affects what is available for injection and the change detection order for the\n   * component instantiated inside of the dialog. This does not affect where the dialog\n   * content will be rendered.\n   */\n  viewContainerRef?: ViewContainerRef;\n\n  /** ID for the dialog. If omitted, a unique one will be generated. */\n  id?: string;\n\n  /** The ARIA role of the dialog element. */\n  role?: DialogRole = 'dialog';\n\n  /** Custom class for the overlay pane. */\n  panelClass?: string | string[] = '';\n\n  /** Whether the dialog has a backdrop. */\n  hasBackdrop?: boolean = true;\n\n  /** Custom class for the backdrop, */\n  backdropClass?: string = '';\n\n  /** Whether the user can use escape or clicking on the backdrop to close the modal. */\n  disableClose?: boolean = false;\n\n  /** Width of the dialog. */\n  width?: string = '';\n\n  /** Height of the dialog. */\n  height?: string = '';\n\n  /** Min-width of the dialog. If a number is provided, pixel units are assumed. */\n  minWidth?: number | string;\n\n  /** Min-height of the dialog. If a number is provided, pixel units are assumed. */\n  minHeight?: number | string;\n\n  /** Max-width of the dialog. If a number is provided, pixel units are assumed. Defaults to 80vw */\n  maxWidth?: number | string = '80vw';\n\n  /** Max-height of the dialog. If a number is provided, pixel units are assumed. */\n  maxHeight?: number | string;\n\n  /** Position overrides. */\n  position?: DialogPosition;\n\n  /** Data being injected into the child component. */\n  data?: D | null = null;\n\n  /** Layout direction for the dialog's content. */\n  direction?: Direction;\n\n  /** ID of the element that describes the dialog. */\n  ariaDescribedBy?: string | null = null;\n\n  /** Aria label to assign to the dialog element */\n  ariaLabel?: string | null = null;\n\n  /** Whether the dialog should focus the first focusable element on open. */\n  autoFocus?: boolean = true;\n\n  /** Scroll strategy to be used for the dialog. */\n  scrollStrategy?: ScrollStrategy;\n\n  /** Whether the dialog should close when the user goes backwards/forwards in history. */\n  closeOnNavigation?: boolean = true;\n\n  // TODO(jelbourn): add configuration for lifecycle hooks, ARIA labelling.\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/** Animations used by MatDialog. */\nexport const matDialogAnimations: {\n  readonly slideDialog: AnimationTriggerMetadata;\n} = {\n  /** Animation that slides the dialog in and out of view and fades the opacity. */\n  slideDialog: trigger('slideDialog', [\n    // Note: The `enter` animation doesn't transition to something like `translate3d(0, 0, 0)\n    // scale(1)`, because for some reason specifying the transform explicitly, causes IE both\n    // to blur the dialog content and decimate the animation performance. Leaving it as `none`\n    // solves both issues.\n    state('enter', style({ transform: 'none', opacity: 1 })),\n    state('void', style({ transform: 'translate3d(0, 25%, 0) scale(0.9)', opacity: 0 })),\n    state('exit', style({ transform: 'translate3d(0, 25%, 0)', opacity: 0 })),\n    transition('* => *', animate('400ms cubic-bezier(0.25, 0.8, 0.25, 1)')),\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ComponentRef,\n  ElementRef,\n  EmbeddedViewRef,\n  EventEmitter,\n  Inject,\n  Optional,\n  ChangeDetectorRef,\n  ViewChild,\n  ViewEncapsulation,\n  ChangeDetectionStrategy,\n} from '@angular/core';\nimport {DOCUMENT} from '@angular/common';\nimport {AnimationEvent} from '@angular/animations';\nimport {matDialogAnimations} from './dialog-animations';\nimport {\n  BasePortalOutlet,\n  ComponentPortal,\n  CdkPortalOutlet,\n  TemplatePortal\n} from '@angular/cdk/portal';\nimport {FocusTrap, FocusTrapFactory} from '@angular/cdk/a11y';\nimport {MatDialogConfig} from './dialog-config';\n\n\n/**\n * Throws an exception for the case when a ComponentPortal is\n * attached to a DomPortalOutlet without an origin.\n * @docs-private\n */\nexport function throwMatDialogContentAlreadyAttachedError() {\n  throw Error('Attempting to attach dialog content after content is already attached');\n}\n\n/**\n * Internal component that wraps user-provided dialog content.\n * Animation is based on https://material.io/guidelines/motion/choreography.html.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-dialog-container',\n  templateUrl: 'dialog-container.html',\n  styleUrls: ['dialog.css'],\n  encapsulation: ViewEncapsulation.None,\n  // Using OnPush for dialogs caused some G3 sync issues. Disabled until we can track them down.\n  // tslint:disable-next-line:validate-decorators\n  changeDetection: ChangeDetectionStrategy.Default,\n  animations: [matDialogAnimations.slideDialog],\n  host: {\n    'class': 'mat-dialog-container',\n    'tabindex': '-1',\n    'aria-modal': 'true',\n    '[attr.id]': '_id',\n    '[attr.role]': '_config.role',\n    '[attr.aria-labelledby]': '_config.ariaLabel ? null : _ariaLabelledBy',\n    '[attr.aria-label]': '_config.ariaLabel',\n    '[attr.aria-describedby]': '_config.ariaDescribedBy || null',\n    '[@slideDialog]': '_state',\n    '(@slideDialog.start)': '_onAnimationStart($event)',\n    '(@slideDialog.done)': '_onAnimationDone($event)',\n  },\n})\nexport class MatDialogContainer extends BasePortalOutlet {\n  /** The portal outlet inside of this container into which the dialog content will be loaded. */\n  @ViewChild(CdkPortalOutlet) _portalOutlet: CdkPortalOutlet;\n\n  /** The class that traps and manages focus within the dialog. */\n  private _focusTrap: FocusTrap;\n\n  /** Element that was focused before the dialog was opened. Save this to restore upon close. */\n  private _elementFocusedBeforeDialogWasOpened: HTMLElement | null = null;\n\n  /** State of the dialog animation. */\n  _state: 'void' | 'enter' | 'exit' = 'enter';\n\n  /** Emits when an animation state changes. */\n  _animationStateChanged = new EventEmitter<AnimationEvent>();\n\n  /** ID of the element that should be considered as the dialog's label. */\n  _ariaLabelledBy: string | null = null;\n\n  /** ID for the container DOM element. */\n  _id: string;\n\n  constructor(\n    private _elementRef: ElementRef,\n    private _focusTrapFactory: FocusTrapFactory,\n    private _changeDetectorRef: ChangeDetectorRef,\n    @Optional() @Inject(DOCUMENT) private _document: any,\n    /** The dialog configuration. */\n    public _config: MatDialogConfig) {\n\n    super();\n  }\n\n  /**\n   * Attach a ComponentPortal as content to this dialog container.\n   * @param portal Portal to be attached as the dialog content.\n   */\n  attachComponentPortal<T>(portal: ComponentPortal<T>): ComponentRef<T> {\n    if (this._portalOutlet.hasAttached()) {\n      throwMatDialogContentAlreadyAttachedError();\n    }\n\n    this._savePreviouslyFocusedElement();\n    return this._portalOutlet.attachComponentPortal(portal);\n  }\n\n  /**\n   * Attach a TemplatePortal as content to this dialog container.\n   * @param portal Portal to be attached as the dialog content.\n   */\n  attachTemplatePortal<C>(portal: TemplatePortal<C>): EmbeddedViewRef<C> {\n    if (this._portalOutlet.hasAttached()) {\n      throwMatDialogContentAlreadyAttachedError();\n    }\n\n    this._savePreviouslyFocusedElement();\n    return this._portalOutlet.attachTemplatePortal(portal);\n  }\n\n  /** Moves the focus inside the focus trap. */\n  private _trapFocus() {\n    if (!this._focusTrap) {\n      this._focusTrap = this._focusTrapFactory.create(this._elementRef.nativeElement);\n    }\n\n    // If were to attempt to focus immediately, then the content of the dialog would not yet be\n    // ready in instances where change detection has to run first. To deal with this, we simply\n    // wait for the microtask queue to be empty.\n    if (this._config.autoFocus) {\n      this._focusTrap.focusInitialElementWhenReady();\n    }\n  }\n\n  /** Restores focus to the element that was focused before the dialog opened. */\n  private _restoreFocus() {\n    const toFocus = this._elementFocusedBeforeDialogWasOpened;\n\n    // We need the extra check, because IE can set the `activeElement` to null in some cases.\n    if (toFocus && typeof toFocus.focus === 'function') {\n      toFocus.focus();\n    }\n\n    if (this._focusTrap) {\n      this._focusTrap.destroy();\n    }\n  }\n\n  /** Saves a reference to the element that was focused before the dialog was opened. */\n  private _savePreviouslyFocusedElement() {\n    if (this._document) {\n      this._elementFocusedBeforeDialogWasOpened = this._document.activeElement as HTMLElement;\n\n      // Note that there is no focus method when rendering on the server.\n      if (this._elementRef.nativeElement.focus) {\n        // Move focus onto the dialog immediately in order to prevent the user from accidentally\n        // opening multiple dialogs at the same time. Needs to be async, because the element\n        // may not be focusable immediately.\n        Promise.resolve().then(() => this._elementRef.nativeElement.focus());\n      }\n    }\n  }\n\n  /** Callback, invoked whenever an animation on the host completes. */\n  _onAnimationDone(event: AnimationEvent) {\n    if (event.toState === 'enter') {\n      this._trapFocus();\n    } else if (event.toState === 'exit') {\n      this._restoreFocus();\n    }\n\n    this._animationStateChanged.emit(event);\n  }\n\n  /** Callback, invoked when an animation on the host starts. */\n  _onAnimationStart(event: AnimationEvent) {\n    this._animationStateChanged.emit(event);\n  }\n\n  /** Starts the dialog exit animation. */\n  _startExitAnimation(): void {\n    this._state = 'exit';\n\n    // Mark the container for check so it can react if the\n    // view container is using OnPush change detection.\n    this._changeDetectorRef.markForCheck();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ESCAPE} from '@angular/cdk/keycodes';\nimport {GlobalPositionStrategy, OverlayRef} from '@angular/cdk/overlay';\nimport {Location} from '@angular/common';\nimport {Observable, Subject, Subscription, SubscriptionLike} from 'rxjs';\nimport {filter, take} from 'rxjs/operators';\nimport {DialogPosition} from './dialog-config';\nimport {MatDialogContainer} from './dialog-container';\n\n\n// TODO(jelbourn): resizing\n\n// Counter for unique dialog ids.\nlet uniqueId = 0;\n\n/**\n * Reference to a dialog opened via the MatDialog service.\n */\nexport class MatDialogRef<T, R = any> {\n  /** The instance of component opened into the dialog. */\n  componentInstance: T;\n\n  /** Whether the user is allowed to close the dialog. */\n  disableClose: boolean | undefined = this._containerInstance._config.disableClose;\n\n  /** Subject for notifying the user that the dialog has finished opening. */\n  private readonly _afterOpen = new Subject<void>();\n\n  /** Subject for notifying the user that the dialog has finished closing. */\n  private readonly _afterClosed = new Subject<R | undefined>();\n\n  /** Subject for notifying the user that the dialog has started closing. */\n  private readonly _beforeClose = new Subject<R | undefined>();\n\n  /** Result to be passed to afterClosed. */\n  private _result: R | undefined;\n\n  /** Subscription to changes in the user's location. */\n  private _locationChanges: SubscriptionLike = Subscription.EMPTY;\n\n  constructor(\n    private _overlayRef: OverlayRef,\n    public _containerInstance: MatDialogContainer,\n    location?: Location,\n    readonly id: string = `mat-dialog-${uniqueId++}`) {\n\n    // Pass the id along to the container.\n    _containerInstance._id = id;\n\n    // Emit when opening animation completes\n    _containerInstance._animationStateChanged.pipe(\n      filter(event => event.phaseName === 'done' && event.toState === 'enter'),\n      take(1)\n    )\n    .subscribe(() => {\n      this._afterOpen.next();\n      this._afterOpen.complete();\n    });\n\n    // Dispose overlay when closing animation is complete\n    _containerInstance._animationStateChanged.pipe(\n      filter(event => event.phaseName === 'done' && event.toState === 'exit'),\n      take(1)\n    ).subscribe(() => this._overlayRef.dispose());\n\n    _overlayRef.detachments().subscribe(() => {\n      this._beforeClose.next(this._result);\n      this._beforeClose.complete();\n      this._locationChanges.unsubscribe();\n      this._afterClosed.next(this._result);\n      this._afterClosed.complete();\n      this.componentInstance = null!;\n      this._overlayRef.dispose();\n    });\n\n    _overlayRef.keydownEvents()\n      .pipe(filter(event => event.keyCode === ESCAPE && !this.disableClose))\n      .subscribe(() => this.close());\n\n    if (location) {\n      // Close the dialog when the user goes forwards/backwards in history or when the location\n      // hash changes. Note that this usually doesn't include clicking on links (unless the user\n      // is using the `HashLocationStrategy`).\n      this._locationChanges = location.subscribe(() => {\n        if (this._containerInstance._config.closeOnNavigation) {\n          this.close();\n        }\n      });\n    }\n  }\n\n  /**\n   * Close the dialog.\n   * @param dialogResult Optional result to return to the dialog opener.\n   */\n  close(dialogResult?: R): void {\n    this._result = dialogResult;\n\n    // Transition the backdrop in parallel to the dialog.\n    this._containerInstance._animationStateChanged.pipe(\n      filter(event => event.phaseName === 'start'),\n      take(1)\n    )\n    .subscribe(() => {\n      this._beforeClose.next(dialogResult);\n      this._beforeClose.complete();\n      this._overlayRef.detachBackdrop();\n    });\n\n    this._containerInstance._startExitAnimation();\n  }\n\n  /**\n   * Gets an observable that is notified when the dialog is finished opening.\n   */\n  afterOpen(): Observable<void> {\n    return this._afterOpen.asObservable();\n  }\n\n  /**\n   * Gets an observable that is notified when the dialog is finished closing.\n   */\n  afterClosed(): Observable<R | undefined> {\n    return this._afterClosed.asObservable();\n  }\n\n  /**\n   * Gets an observable that is notified when the dialog has started closing.\n   */\n  beforeClose(): Observable<R | undefined> {\n    return this._beforeClose.asObservable();\n  }\n\n  /**\n   * Gets an observable that emits when the overlay's backdrop has been clicked.\n   */\n  backdropClick(): Observable<MouseEvent> {\n    return this._overlayRef.backdropClick();\n  }\n\n  /**\n   * Gets an observable that emits when keydown events are targeted on the overlay.\n   */\n  keydownEvents(): Observable<KeyboardEvent> {\n    return this._overlayRef.keydownEvents();\n  }\n\n  /**\n   * Updates the dialog's position.\n   * @param position New dialog position.\n   */\n  updatePosition(position?: DialogPosition): this {\n    let strategy = this._getPositionStrategy();\n\n    if (position && (position.left || position.right)) {\n      position.left ? strategy.left(position.left) : strategy.right(position.right);\n    } else {\n      strategy.centerHorizontally();\n    }\n\n    if (position && (position.top || position.bottom)) {\n      position.top ? strategy.top(position.top) : strategy.bottom(position.bottom);\n    } else {\n      strategy.centerVertically();\n    }\n\n    this._overlayRef.updatePosition();\n\n    return this;\n  }\n\n  /**\n   * Updates the dialog's width and height.\n   * @param width New width of the dialog.\n   * @param height New height of the dialog.\n   */\n  updateSize(width: string = '', height: string = ''): this {\n    this._getPositionStrategy().width(width).height(height);\n    this._overlayRef.updatePosition();\n    return this;\n  }\n\n  /** Fetches the position strategy object from the overlay ref. */\n  private _getPositionStrategy(): GlobalPositionStrategy {\n    return this._overlayRef.getConfig().positionStrategy as GlobalPositionStrategy;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directionality} from '@angular/cdk/bidi';\nimport {\n  Overlay,\n  OverlayConfig,\n  OverlayContainer,\n  OverlayRef,\n  ScrollStrategy,\n} from '@angular/cdk/overlay';\nimport {ComponentPortal, ComponentType, PortalInjector, TemplatePortal} from '@angular/cdk/portal';\nimport {Location} from '@angular/common';\nimport {\n  Inject,\n  Injectable,\n  InjectionToken,\n  Injector,\n  Optional,\n  SkipSelf,\n  TemplateRef,\n} from '@angular/core';\nimport {defer, Observable, of as observableOf, Subject} from 'rxjs';\nimport {startWith} from 'rxjs/operators';\nimport {MatDialogConfig} from './dialog-config';\nimport {MatDialogContainer} from './dialog-container';\nimport {MatDialogRef} from './dialog-ref';\n\n\n/** Injection token that can be used to access the data that was passed in to a dialog. */\nexport const MAT_DIALOG_DATA = new InjectionToken<any>('MatDialogData');\n\n/** Injection token that can be used to specify default dialog options. */\nexport const MAT_DIALOG_DEFAULT_OPTIONS =\n    new InjectionToken<MatDialogConfig>('mat-dialog-default-options');\n\n/** Injection token that determines the scroll handling while the dialog is open. */\nexport const MAT_DIALOG_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mat-dialog-scroll-strategy');\n\n/** @docs-private */\nexport function MAT_DIALOG_SCROLL_STRATEGY_FACTORY(overlay: Overlay): ()  => ScrollStrategy {\n  return () => overlay.scrollStrategies.block();\n}\n\n/** @docs-private */\nexport function MAT_DIALOG_SCROLL_STRATEGY_PROVIDER_FACTORY(overlay: Overlay):\n    () => ScrollStrategy {\n  return () => overlay.scrollStrategies.block();\n}\n\n/** @docs-private */\nexport const MAT_DIALOG_SCROLL_STRATEGY_PROVIDER = {\n  provide: MAT_DIALOG_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_DIALOG_SCROLL_STRATEGY_PROVIDER_FACTORY,\n};\n\n\n/**\n * Service to open Material Design modal dialogs.\n */\n@Injectable()\nexport class MatDialog {\n  private _openDialogsAtThisLevel: MatDialogRef<any>[] = [];\n  private readonly _afterAllClosedAtThisLevel = new Subject<void>();\n  private readonly _afterOpenAtThisLevel = new Subject<MatDialogRef<any>>();\n  private _ariaHiddenElements = new Map<Element, string|null>();\n\n  /** Keeps track of the currently-open dialogs. */\n  get openDialogs(): MatDialogRef<any>[] {\n    return this._parentDialog ? this._parentDialog.openDialogs : this._openDialogsAtThisLevel;\n  }\n\n  /** Stream that emits when a dialog has been opened. */\n  get afterOpen(): Subject<MatDialogRef<any>> {\n    return this._parentDialog ? this._parentDialog.afterOpen : this._afterOpenAtThisLevel;\n  }\n\n  get _afterAllClosed() {\n    const parent = this._parentDialog;\n    return parent ? parent._afterAllClosed : this._afterAllClosedAtThisLevel;\n  }\n\n  /**\n   * Stream that emits when all open dialog have finished closing.\n   * Will emit on subscribe if there are no open dialogs to begin with.\n   */\n  readonly afterAllClosed: Observable<void> = defer<void>(() => this.openDialogs.length ?\n      this._afterAllClosed :\n      this._afterAllClosed.pipe(startWith(undefined)));\n\n  constructor(\n      private _overlay: Overlay,\n      private _injector: Injector,\n      @Optional() private _location: Location,\n      @Optional() @Inject(MAT_DIALOG_DEFAULT_OPTIONS) private _defaultOptions,\n      @Inject(MAT_DIALOG_SCROLL_STRATEGY) private _scrollStrategy,\n      @Optional() @SkipSelf() private _parentDialog: MatDialog,\n      private _overlayContainer: OverlayContainer) {}\n\n  /**\n   * Opens a modal dialog containing the given component.\n   * @param componentOrTemplateRef Type of the component to load into the dialog,\n   *     or a TemplateRef to instantiate as the dialog content.\n   * @param config Extra configuration options.\n   * @returns Reference to the newly-opened dialog.\n   */\n  open<T, D = any, R = any>(componentOrTemplateRef: ComponentType<T> | TemplateRef<T>,\n          config?: MatDialogConfig<D>): MatDialogRef<T, R> {\n\n    config = _applyConfigDefaults(config, this._defaultOptions || new MatDialogConfig());\n\n    if (config.id && this.getDialogById(config.id)) {\n      throw Error(`Dialog with id \"${config.id}\" exists already. The dialog id must be unique.`);\n    }\n\n    const overlayRef = this._createOverlay(config);\n    const dialogContainer = this._attachDialogContainer(overlayRef, config);\n    const dialogRef = this._attachDialogContent<T, R>(componentOrTemplateRef,\n                                                      dialogContainer,\n                                                      overlayRef,\n                                                      config);\n\n    // If this is the first dialog that we're opening, hide all the non-overlay content.\n    if (!this.openDialogs.length) {\n      this._hideNonDialogContentFromAssistiveTechnology();\n    }\n\n    this.openDialogs.push(dialogRef);\n    dialogRef.afterClosed().subscribe(() => this._removeOpenDialog(dialogRef));\n    this.afterOpen.next(dialogRef);\n\n    return dialogRef;\n  }\n\n  /**\n   * Closes all of the currently-open dialogs.\n   */\n  closeAll(): void {\n    let i = this.openDialogs.length;\n\n    while (i--) {\n      // The `_openDialogs` property isn't updated after close until the rxjs subscription\n      // runs on the next microtask, in addition to modifying the array as we're going\n      // through it. We loop through all of them and call close without assuming that\n      // they'll be removed from the list instantaneously.\n      this.openDialogs[i].close();\n    }\n  }\n\n  /**\n   * Finds an open dialog by its id.\n   * @param id ID to use when looking up the dialog.\n   */\n  getDialogById(id: string): MatDialogRef<any> | undefined {\n    return this.openDialogs.find(dialog => dialog.id === id);\n  }\n\n  /**\n   * Creates the overlay into which the dialog will be loaded.\n   * @param config The dialog configuration.\n   * @returns A promise resolving to the OverlayRef for the created overlay.\n   */\n  private _createOverlay(config: MatDialogConfig): OverlayRef {\n    const overlayConfig = this._getOverlayConfig(config);\n    return this._overlay.create(overlayConfig);\n  }\n\n  /**\n   * Creates an overlay config from a dialog config.\n   * @param dialogConfig The dialog configuration.\n   * @returns The overlay configuration.\n   */\n  private _getOverlayConfig(dialogConfig: MatDialogConfig): OverlayConfig {\n    const state = new OverlayConfig({\n      positionStrategy: this._overlay.position().global(),\n      scrollStrategy: dialogConfig.scrollStrategy || this._scrollStrategy(),\n      panelClass: dialogConfig.panelClass,\n      hasBackdrop: dialogConfig.hasBackdrop,\n      direction: dialogConfig.direction,\n      minWidth: dialogConfig.minWidth,\n      minHeight: dialogConfig.minHeight,\n      maxWidth: dialogConfig.maxWidth,\n      maxHeight: dialogConfig.maxHeight\n    });\n\n    if (dialogConfig.backdropClass) {\n      state.backdropClass = dialogConfig.backdropClass;\n    }\n\n    return state;\n  }\n\n  /**\n   * Attaches an MatDialogContainer to a dialog's already-created overlay.\n   * @param overlay Reference to the dialog's underlying overlay.\n   * @param config The dialog configuration.\n   * @returns A promise resolving to a ComponentRef for the attached container.\n   */\n  private _attachDialogContainer(overlay: OverlayRef, config: MatDialogConfig): MatDialogContainer {\n    const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n    const injector = new PortalInjector(userInjector || this._injector, new WeakMap([\n      [MatDialogConfig, config]\n    ]));\n    const containerPortal =\n        new ComponentPortal(MatDialogContainer, config.viewContainerRef, injector);\n    const containerRef = overlay.attach<MatDialogContainer>(containerPortal);\n\n    return containerRef.instance;\n  }\n\n  /**\n   * Attaches the user-provided component to the already-created MatDialogContainer.\n   * @param componentOrTemplateRef The type of component being loaded into the dialog,\n   *     or a TemplateRef to instantiate as the content.\n   * @param dialogContainer Reference to the wrapping MatDialogContainer.\n   * @param overlayRef Reference to the overlay in which the dialog resides.\n   * @param config The dialog configuration.\n   * @returns A promise resolving to the MatDialogRef that should be returned to the user.\n   */\n  private _attachDialogContent<T, R>(\n      componentOrTemplateRef: ComponentType<T> | TemplateRef<T>,\n      dialogContainer: MatDialogContainer,\n      overlayRef: OverlayRef,\n      config: MatDialogConfig): MatDialogRef<T, R> {\n\n    // Create a reference to the dialog we're creating in order to give the user a handle\n    // to modify and close it.\n    const dialogRef =\n        new MatDialogRef<T, R>(overlayRef, dialogContainer, this._location, config.id);\n\n    // When the dialog backdrop is clicked, we want to close it.\n    if (config.hasBackdrop) {\n      overlayRef.backdropClick().subscribe(() => {\n        if (!dialogRef.disableClose) {\n          dialogRef.close();\n        }\n      });\n    }\n\n    if (componentOrTemplateRef instanceof TemplateRef) {\n      dialogContainer.attachTemplatePortal(\n        new TemplatePortal<T>(componentOrTemplateRef, null!,\n          <any>{ $implicit: config.data, dialogRef }));\n    } else {\n      const injector = this._createInjector<T>(config, dialogRef, dialogContainer);\n      const contentRef = dialogContainer.attachComponentPortal<T>(\n          new ComponentPortal(componentOrTemplateRef, undefined, injector));\n      dialogRef.componentInstance = contentRef.instance;\n    }\n\n    dialogRef\n      .updateSize(config.width, config.height)\n      .updatePosition(config.position);\n\n    return dialogRef;\n  }\n\n  /**\n   * Creates a custom injector to be used inside the dialog. This allows a component loaded inside\n   * of a dialog to close itself and, optionally, to return a value.\n   * @param config Config object that is used to construct the dialog.\n   * @param dialogRef Reference to the dialog.\n   * @param container Dialog container element that wraps all of the contents.\n   * @returns The custom injector that can be used inside the dialog.\n   */\n  private _createInjector<T>(\n      config: MatDialogConfig,\n      dialogRef: MatDialogRef<T>,\n      dialogContainer: MatDialogContainer): PortalInjector {\n\n    const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n\n    // The MatDialogContainer is injected in the portal as the MatDialogContainer and the dialog's\n    // content are created out of the same ViewContainerRef and as such, are siblings for injector\n    // purposes. To allow the hierarchy that is expected, the MatDialogContainer is explicitly\n    // added to the injection tokens.\n    const injectionTokens = new WeakMap<any, any>([\n      [MatDialogContainer, dialogContainer],\n      [MAT_DIALOG_DATA, config.data],\n      [MatDialogRef, dialogRef]\n    ]);\n\n    if (config.direction &&\n        (!userInjector || !userInjector.get<Directionality | null>(Directionality, null))) {\n      injectionTokens.set(Directionality, {\n        value: config.direction,\n        change: observableOf()\n      });\n    }\n\n    return new PortalInjector(userInjector || this._injector, injectionTokens);\n  }\n\n  /**\n   * Removes a dialog from the array of open dialogs.\n   * @param dialogRef Dialog to be removed.\n   */\n  private _removeOpenDialog(dialogRef: MatDialogRef<any>) {\n    const index = this.openDialogs.indexOf(dialogRef);\n\n    if (index > -1) {\n      this.openDialogs.splice(index, 1);\n\n      // If all the dialogs were closed, remove/restore the `aria-hidden`\n      // to a the siblings and emit to the `afterAllClosed` stream.\n      if (!this.openDialogs.length) {\n        this._ariaHiddenElements.forEach((previousValue, element) => {\n          if (previousValue) {\n            element.setAttribute('aria-hidden', previousValue);\n          } else {\n            element.removeAttribute('aria-hidden');\n          }\n        });\n\n        this._ariaHiddenElements.clear();\n        this._afterAllClosed.next();\n      }\n    }\n  }\n\n  /**\n   * Hides all of the content that isn't an overlay from assistive technology.\n   */\n  private _hideNonDialogContentFromAssistiveTechnology() {\n    const overlayContainer = this._overlayContainer.getContainerElement();\n\n    // Ensure that the overlay container is attached to the DOM.\n    if (overlayContainer.parentElement) {\n      const siblings = overlayContainer.parentElement.children;\n\n      for (let i = siblings.length - 1; i > -1; i--) {\n        let sibling = siblings[i];\n\n        if (sibling !== overlayContainer &&\n          sibling.nodeName !== 'SCRIPT' &&\n          sibling.nodeName !== 'STYLE' &&\n          !sibling.hasAttribute('aria-live')) {\n\n          this._ariaHiddenElements.set(sibling, sibling.getAttribute('aria-hidden'));\n          sibling.setAttribute('aria-hidden', 'true');\n        }\n      }\n    }\n\n  }\n\n}\n\n/**\n * Applies default options to the dialog config.\n * @param config Config to be modified.\n * @param defaultOptions Default options provided.\n * @returns The new configuration object.\n */\nfunction _applyConfigDefaults(\n    config?: MatDialogConfig, defaultOptions?: MatDialogConfig): MatDialogConfig {\n  return {...defaultOptions, ...config};\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Directive,\n  Input,\n  OnChanges,\n  OnInit,\n  Optional,\n  SimpleChanges,\n  ElementRef,\n} from '@angular/core';\nimport {MatDialog} from './dialog';\nimport {MatDialogRef} from './dialog-ref';\n\n/** Counter used to generate unique IDs for dialog elements. */\nlet dialogElementUid = 0;\n\n/**\n * Button that will close the current dialog.\n */\n@Directive({\n  selector: `button[mat-dialog-close], button[matDialogClose]`,\n  exportAs: 'matDialogClose',\n  host: {\n    '(click)': 'dialogRef.close(dialogResult)',\n    '[attr.aria-label]': 'ariaLabel',\n    'type': 'button', // Prevents accidental form submits.\n  }\n})\nexport class MatDialogClose implements OnInit, OnChanges {\n  /** Screenreader label for the button. */\n  @Input('aria-label') ariaLabel: string = 'Close dialog';\n\n  /** Dialog close input. */\n  @Input('mat-dialog-close') dialogResult: any;\n\n  @Input('matDialogClose') _matDialogClose: any;\n\n  constructor(\n    @Optional() public dialogRef: MatDialogRef<any>,\n    private _elementRef: ElementRef,\n    private _dialog: MatDialog) {}\n\n  ngOnInit() {\n    if (!this.dialogRef) {\n      // When this directive is included in a dialog via TemplateRef (rather than being\n      // in a Component), the DialogRef isn't available via injection because embedded\n      // views cannot be given a custom injector. Instead, we look up the DialogRef by\n      // ID. This must occur in `onInit`, as the ID binding for the dialog container won't\n      // be resolved at constructor time.\n      this.dialogRef = getClosestDialog(this._elementRef, this._dialog.openDialogs)!;\n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    const proxiedChange = changes._matDialogClose || changes._matDialogCloseResult;\n\n    if (proxiedChange) {\n      this.dialogResult = proxiedChange.currentValue;\n    }\n  }\n}\n\n/**\n * Title of a dialog element. Stays fixed to the top of the dialog when scrolling.\n */\n@Directive({\n  selector: '[mat-dialog-title], [matDialogTitle]',\n  exportAs: 'matDialogTitle',\n  host: {\n    'class': 'mat-dialog-title',\n    '[id]': 'id',\n  },\n})\nexport class MatDialogTitle implements OnInit {\n  @Input() id = `mat-dialog-title-${dialogElementUid++}`;\n\n  constructor(\n    @Optional() private _dialogRef: MatDialogRef<any>,\n    private _elementRef: ElementRef,\n    private _dialog: MatDialog) {}\n\n  ngOnInit() {\n    if (!this._dialogRef) {\n      this._dialogRef = getClosestDialog(this._elementRef, this._dialog.openDialogs)!;\n    }\n\n    if (this._dialogRef) {\n      Promise.resolve().then(() => {\n        const container = this._dialogRef._containerInstance;\n\n        if (container && !container._ariaLabelledBy) {\n          container._ariaLabelledBy = this.id;\n        }\n      });\n    }\n  }\n}\n\n\n/**\n * Scrollable content container of a dialog.\n */\n@Directive({\n  selector: `[mat-dialog-content], mat-dialog-content, [matDialogContent]`,\n  host: {'class': 'mat-dialog-content'}\n})\nexport class MatDialogContent {}\n\n\n/**\n * Container for the bottom action buttons in a dialog.\n * Stays fixed to the bottom when scrolling.\n */\n@Directive({\n  selector: `[mat-dialog-actions], mat-dialog-actions, [matDialogActions]`,\n  host: {'class': 'mat-dialog-actions'}\n})\nexport class MatDialogActions {}\n\n\n/**\n * Finds the closest MatDialogRef to an element by looking at the DOM.\n * @param element Element relative to which to look for a dialog.\n * @param openDialogs References to the currently-open dialogs.\n */\nfunction getClosestDialog(element: ElementRef, openDialogs: MatDialogRef<any>[]) {\n  let parent: HTMLElement | null = element.nativeElement.parentElement;\n\n  while (parent && !parent.classList.contains('mat-dialog-container')) {\n    parent = parent.parentElement;\n  }\n\n  return parent ? openDialogs.find(dialog => dialog.id === parent!.id) : null;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MAT_DIALOG_SCROLL_STRATEGY_PROVIDER, MatDialog} from './dialog';\nimport {MatDialogContainer} from './dialog-container';\nimport {\n  MatDialogActions,\n  MatDialogClose,\n  MatDialogContent,\n  MatDialogTitle,\n} from './dialog-content-directives';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    OverlayModule,\n    PortalModule,\n    MatCommonModule,\n  ],\n  exports: [\n    MatDialogContainer,\n    MatDialogClose,\n    MatDialogTitle,\n    MatDialogContent,\n    MatDialogActions,\n    MatCommonModule,\n  ],\n  declarations: [\n    MatDialogContainer,\n    MatDialogClose,\n    MatDialogTitle,\n    MatDialogActions,\n    MatDialogContent,\n  ],\n  providers: [\n    MatDialog,\n    MAT_DIALOG_SCROLL_STRATEGY_PROVIDER,\n  ],\n  entryComponents: [MatDialogContainer],\n})\nexport class MatDialogModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CdkTextareaAutosize} from '@angular/cdk/text-field';\nimport {Directive, Input} from '@angular/core';\n\n\n/**\n * Directive to automatically resize a textarea to fit its content.\n * @deprecated Use `cdkTextareaAutosize` from `@angular/cdk/text-field` instead.\n * @deletion-target 7.0.0\n */\n@Directive({\n  selector: 'textarea[mat-autosize], textarea[matTextareaAutosize]',\n  exportAs: 'matTextareaAutosize',\n  inputs: ['cdkAutosizeMinRows', 'cdkAutosizeMaxRows'],\n  host: {\n    'class': 'cdk-textarea-autosize mat-autosize',\n    // Textarea elements that have the directive applied should have a single row by default.\n    // Browsers normally show two rows by default and therefore this limits the minRows binding.\n    'rows': '1',\n    '(input)': '_noopInputHandler()',\n  },\n})\nexport class MatTextareaAutosize extends CdkTextareaAutosize {\n  @Input()\n  get matAutosizeMinRows(): number { return this.minRows; }\n  set matAutosizeMinRows(value: number) { this.minRows = value; }\n\n  @Input()\n  get matAutosizeMaxRows(): number { return this.maxRows; }\n  set matAutosizeMaxRows(value: number) { this.maxRows = value; }\n\n  @Input('mat-autosize')\n  get matAutosize(): boolean { return this.enabled; }\n  set matAutosize(value: boolean) { this.enabled = value; }\n\n  @Input()\n  get matTextareaAutosize(): boolean { return this.enabled; }\n  set matTextareaAutosize(value: boolean) { this.enabled = value; }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {InjectionToken} from '@angular/core';\n\n\n/**\n * This token is used to inject the object whose value should be set into `MatInput`. If none is\n * provided, the native `HTMLInputElement` is used. Directives like `MatDatepickerInput` can provide\n * themselves for this token, in order to make `MatInput` delegate the getting and setting of the\n * value to them.\n */\nexport const MAT_INPUT_VALUE_ACCESSOR =\n    new InjectionToken<{value: any}>('MAT_INPUT_VALUE_ACCESSOR');\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {getSupportedInputTypes, Platform} from '@angular/cdk/platform';\nimport {\n  Directive,\n  DoCheck,\n  ElementRef,\n  Inject,\n  Input,\n  OnChanges,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Self,\n  NgZone,\n} from '@angular/core';\nimport {FormGroupDirective, NgControl, NgForm} from '@angular/forms';\nimport {CanUpdateErrorState, ErrorStateMatcher, mixinErrorState} from '@angular/material/core';\nimport {MatFormFieldControl} from '@angular/material/form-field';\nimport {Subject} from 'rxjs';\nimport {AutofillMonitor} from '@angular/cdk/text-field';\nimport {getMatInputUnsupportedTypeError} from './input-errors';\nimport {MAT_INPUT_VALUE_ACCESSOR} from './input-value-accessor';\n\n\n// Invalid input type. Using one of these will throw an MatInputUnsupportedTypeError.\nconst MAT_INPUT_INVALID_TYPES = [\n  'button',\n  'checkbox',\n  'file',\n  'hidden',\n  'image',\n  'radio',\n  'range',\n  'reset',\n  'submit'\n];\n\nlet nextUniqueId = 0;\n\n// Boilerplate for applying mixins to MatInput.\n/** @docs-private */\nexport class MatInputBase {\n  constructor(public _defaultErrorStateMatcher: ErrorStateMatcher,\n              public _parentForm: NgForm,\n              public _parentFormGroup: FormGroupDirective,\n              /** @docs-private */\n              public ngControl: NgControl) {}\n}\nexport const _MatInputMixinBase = mixinErrorState(MatInputBase);\n\n/** Directive that allows a native input to work inside a `MatFormField`. */\n@Directive({\n  selector: `input[matInput], textarea[matInput]`,\n  exportAs: 'matInput',\n  host: {\n    /**\n     * @deletion-target 7.0.0 remove .mat-form-field-autofill-control in favor of AutofillMonitor.\n     */\n    'class': 'mat-input-element mat-form-field-autofill-control',\n    '[class.mat-input-server]': '_isServer',\n    // Native input properties that are overwritten by Angular inputs need to be synced with\n    // the native input element. Otherwise property bindings for those don't work.\n    '[attr.id]': 'id',\n    '[attr.placeholder]': 'placeholder',\n    '[disabled]': 'disabled',\n    '[required]': 'required',\n    '[readonly]': 'readonly',\n    '[attr.aria-describedby]': '_ariaDescribedby || null',\n    '[attr.aria-invalid]': 'errorState',\n    '[attr.aria-required]': 'required.toString()',\n    '(blur)': '_focusChanged(false)',\n    '(focus)': '_focusChanged(true)',\n    '(input)': '_onInput()',\n  },\n  providers: [{provide: MatFormFieldControl, useExisting: MatInput}],\n})\nexport class MatInput extends _MatInputMixinBase implements MatFormFieldControl<any>, OnChanges,\n    OnDestroy, OnInit, DoCheck, CanUpdateErrorState {\n  protected _uid = `mat-input-${nextUniqueId++}`;\n  protected _previousNativeValue: any;\n  private _inputValueAccessor: {value: any};\n  /** The aria-describedby attribute on the input for improved a11y. */\n  _ariaDescribedby: string;\n\n  /** Whether the component is being rendered on the server. */\n  _isServer = false;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  focused: boolean = false;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  readonly stateChanges: Subject<void> = new Subject<void>();\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  controlType: string = 'mat-input';\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  autofilled = false;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get disabled(): boolean {\n    if (this.ngControl && this.ngControl.disabled !== null) {\n      return this.ngControl.disabled;\n    }\n    return this._disabled;\n  }\n  set disabled(value: boolean) {\n    this._disabled = coerceBooleanProperty(value);\n\n    // Browsers may not fire the blur event if the input is disabled too quickly.\n    // Reset from here to ensure that the element doesn't become stuck.\n    if (this.focused) {\n      this.focused = false;\n      this.stateChanges.next();\n    }\n  }\n  protected _disabled = false;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get id(): string { return this._id; }\n  set id(value: string) { this._id = value || this._uid; }\n  protected _id: string;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input() placeholder: string;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get required(): boolean { return this._required; }\n  set required(value: boolean) { this._required = coerceBooleanProperty(value); }\n  protected _required = false;\n\n  /** Input type of the element. */\n  @Input()\n  get type(): string { return this._type; }\n  set type(value: string) {\n    this._type = value || 'text';\n    this._validateType();\n\n    // When using Angular inputs, developers are no longer able to set the properties on the native\n    // input element. To ensure that bindings for `type` work, we need to sync the setter\n    // with the native property. Textarea elements don't support the type property or attribute.\n    if (!this._isTextarea() && getSupportedInputTypes().has(this._type)) {\n      this._elementRef.nativeElement.type = this._type;\n    }\n  }\n  protected _type = 'text';\n\n  /** An object used to control when error messages are shown. */\n  @Input() errorStateMatcher: ErrorStateMatcher;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get value(): string { return this._inputValueAccessor.value; }\n  set value(value: string) {\n    if (value !== this.value) {\n      this._inputValueAccessor.value = value;\n      this.stateChanges.next();\n    }\n  }\n\n  /** Whether the element is readonly. */\n  @Input()\n  get readonly(): boolean { return this._readonly; }\n  set readonly(value: boolean) { this._readonly = coerceBooleanProperty(value); }\n  private _readonly = false;\n\n  protected _neverEmptyInputTypes = [\n    'date',\n    'datetime',\n    'datetime-local',\n    'month',\n    'time',\n    'week'\n  ].filter(t => getSupportedInputTypes().has(t));\n\n  constructor(protected _elementRef: ElementRef,\n              protected _platform: Platform,\n              /** @docs-private */\n              @Optional() @Self() public ngControl: NgControl,\n              @Optional() _parentForm: NgForm,\n              @Optional() _parentFormGroup: FormGroupDirective,\n              _defaultErrorStateMatcher: ErrorStateMatcher,\n              @Optional() @Self() @Inject(MAT_INPUT_VALUE_ACCESSOR) inputValueAccessor: any,\n              private _autofillMonitor: AutofillMonitor,\n              ngZone: NgZone) {\n    super(_defaultErrorStateMatcher, _parentForm, _parentFormGroup, ngControl);\n    // If no input value accessor was explicitly specified, use the element as the input value\n    // accessor.\n    this._inputValueAccessor = inputValueAccessor || this._elementRef.nativeElement;\n\n    this._previousNativeValue = this.value;\n\n    // Force setter to be called in case id was not specified.\n    this.id = this.id;\n\n    // On some versions of iOS the caret gets stuck in the wrong place when holding down the delete\n    // key. In order to get around this we need to \"jiggle\" the caret loose. Since this bug only\n    // exists on iOS, we only bother to install the listener on iOS.\n    if (_platform.IOS) {\n      ngZone.runOutsideAngular(() => {\n        _elementRef.nativeElement.addEventListener('keyup', (event: Event) => {\n          let el = event.target as HTMLInputElement;\n          if (!el.value && !el.selectionStart && !el.selectionEnd) {\n            // Note: Just setting `0, 0` doesn't fix the issue. Setting\n            // `1, 1` fixes it for the first time that you type text and\n            // then hold delete. Toggling to `1, 1` and then back to\n            // `0, 0` seems to completely fix it.\n            el.setSelectionRange(1, 1);\n            el.setSelectionRange(0, 0);\n          }\n        });\n      });\n    }\n\n    this._isServer = !this._platform.isBrowser;\n  }\n\n  ngOnInit() {\n    this._autofillMonitor.monitor(this._elementRef.nativeElement).subscribe(event => {\n      this.autofilled = event.isAutofilled;\n      this.stateChanges.next();\n    });\n  }\n\n  ngOnChanges() {\n    this.stateChanges.next();\n  }\n\n  ngOnDestroy() {\n    this.stateChanges.complete();\n    this._autofillMonitor.stopMonitoring(this._elementRef.nativeElement);\n  }\n\n  ngDoCheck() {\n    if (this.ngControl) {\n      // We need to re-evaluate this on every change detection cycle, because there are some\n      // error triggers that we can't subscribe to (e.g. parent form submissions). This means\n      // that whatever logic is in here has to be super lean or we risk destroying the performance.\n      this.updateErrorState();\n    }\n\n    // We need to dirty-check the native element's value, because there are some cases where\n    // we won't be notified when it changes (e.g. the consumer isn't using forms or they're\n    // updating the value using `emitEvent: false`).\n    this._dirtyCheckNativeValue();\n  }\n\n  /** Focuses the input. */\n  focus(): void { this._elementRef.nativeElement.focus(); }\n\n  /** Callback for the cases where the focused state of the input changes. */\n  _focusChanged(isFocused: boolean) {\n    if (isFocused !== this.focused && !this.readonly) {\n      this.focused = isFocused;\n      this.stateChanges.next();\n    }\n  }\n\n  _onInput() {\n    // This is a noop function and is used to let Angular know whenever the value changes.\n    // Angular will run a new change detection each time the `input` event has been dispatched.\n    // It's necessary that Angular recognizes the value change, because when floatingLabel\n    // is set to false and Angular forms aren't used, the placeholder won't recognize the\n    // value changes and will not disappear.\n    // Listening to the input event wouldn't be necessary when the input is using the\n    // FormsModule or ReactiveFormsModule, because Angular forms also listens to input events.\n  }\n\n  /** Does some manual dirty checking on the native input `value` property. */\n  protected _dirtyCheckNativeValue() {\n    const newValue = this.value;\n\n    if (this._previousNativeValue !== newValue) {\n      this._previousNativeValue = newValue;\n      this.stateChanges.next();\n    }\n  }\n\n  /** Make sure the input is a supported type. */\n  protected _validateType() {\n    if (MAT_INPUT_INVALID_TYPES.indexOf(this._type) > -1) {\n      throw getMatInputUnsupportedTypeError(this._type);\n    }\n  }\n\n  /** Checks whether the input type is one of the types that are never empty. */\n  protected _isNeverEmpty() {\n    return this._neverEmptyInputTypes.indexOf(this._type) > -1;\n  }\n\n  /** Checks whether the input is invalid based on the native validation. */\n  protected _isBadInput() {\n    // The `validity` property won't be present on platform-server.\n    let validity = (this._elementRef.nativeElement as HTMLInputElement).validity;\n    return validity && validity.badInput;\n  }\n\n  /** Determines if the component host is a textarea. */\n  protected _isTextarea() {\n    return this._elementRef.nativeElement.nodeName.toLowerCase() === 'textarea';\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  get empty(): boolean {\n    return !this._isNeverEmpty() && !this._elementRef.nativeElement.value && !this._isBadInput() &&\n        !this.autofilled;\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  get shouldLabelFloat(): boolean { return this.focused || !this.empty; }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  setDescribedByIds(ids: string[]) { this._ariaDescribedby = ids.join(' '); }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  onContainerClick() { this.focus(); }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {TextFieldModule} from '@angular/cdk/text-field';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {ErrorStateMatcher} from '@angular/material/core';\nimport {MatFormFieldModule} from '@angular/material/form-field';\nimport {MatTextareaAutosize} from './autosize';\nimport {MatInput} from './input';\n\n\n@NgModule({\n  declarations: [MatInput, MatTextareaAutosize],\n  imports: [\n    CommonModule,\n    TextFieldModule,\n    MatFormFieldModule,\n  ],\n  exports: [\n    TextFieldModule,\n    // We re-export the `MatFormFieldModule` since `MatInput` will almost always\n    // be used together with `MatFormField`.\n    MatFormFieldModule,\n    MatInput,\n    MatTextareaAutosize,\n  ],\n  providers: [ErrorStateMatcher],\n})\nexport class MatInputModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable} from '@angular/core';\nimport {Subject} from 'rxjs';\n\n\n/** Datepicker data that requires internationalization. */\n@Injectable({providedIn: 'root'})\nexport class MatDatepickerIntl {\n  /**\n   * Stream that emits whenever the labels here are changed. Use this to notify\n   * components if the labels have changed after initialization.\n   */\n  readonly changes: Subject<void> = new Subject<void>();\n\n  /** A label for the calendar popup (used by screen readers). */\n  calendarLabel: string = 'Calendar';\n\n  /** A label for the button used to open the calendar popup (used by screen readers). */\n  openCalendarLabel: string = 'Open calendar';\n\n  /** A label for the previous month button (used by screen readers). */\n  prevMonthLabel: string = 'Previous month';\n\n  /** A label for the next month button (used by screen readers). */\n  nextMonthLabel: string = 'Next month';\n\n  /** A label for the previous year button (used by screen readers). */\n  prevYearLabel: string = 'Previous year';\n\n  /** A label for the next year button (used by screen readers). */\n  nextYearLabel: string = 'Next year';\n\n  /** A label for the previous multi-year button (used by screen readers). */\n  prevMultiYearLabel: string = 'Previous 20 years';\n\n  /** A label for the next multi-year button (used by screen readers). */\n  nextMultiYearLabel: string = 'Next 20 years';\n\n  /** A label for the 'switch to month view' button (used by screen readers). */\n  switchToMonthViewLabel: string = 'Choose date';\n\n  /** A label for the 'switch to year view' button (used by screen readers). */\n  switchToMultiYearViewLabel: string = 'Choose month and year';\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ViewEncapsulation,\n  ChangeDetectionStrategy,\n  Directive,\n  Input,\n} from '@angular/core';\n\n\n/**\n * Content of a card, needed as it's used as a selector in the API.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-card-content',\n  host: {'class': 'mat-card-content'}\n})\nexport class MatCardContent {}\n\n/**\n * Title of a card, needed as it's used as a selector in the API.\n * @docs-private\n */\n@Directive({\n  selector: `mat-card-title, [mat-card-title], [matCardTitle]`,\n  host: {\n    'class': 'mat-card-title'\n  }\n})\nexport class MatCardTitle {}\n\n/**\n * Sub-title of a card, needed as it's used as a selector in the API.\n * @docs-private\n */\n@Directive({\n  selector: `mat-card-subtitle, [mat-card-subtitle], [matCardSubtitle]`,\n  host: {\n    'class': 'mat-card-subtitle'\n  }\n})\nexport class MatCardSubtitle {}\n\n/**\n * Action section of a card, needed as it's used as a selector in the API.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-card-actions',\n  exportAs: 'matCardActions',\n  host: {\n    'class': 'mat-card-actions',\n    '[class.mat-card-actions-align-end]': 'align === \"end\"',\n  }\n})\nexport class MatCardActions {\n  /** Position of the actions inside the card. */\n  @Input() align: 'start' | 'end' = 'start';\n}\n\n/**\n * Footer of a card, needed as it's used as a selector in the API.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-card-footer',\n  host: {'class': 'mat-card-footer'}\n})\nexport class MatCardFooter {}\n\n/**\n * Image used in a card, needed to add the mat- CSS styling.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-card-image], [matCardImage]',\n  host: {'class': 'mat-card-image'}\n})\nexport class MatCardImage {}\n\n/**\n * Image used in a card, needed to add the mat- CSS styling.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-card-sm-image], [matCardImageSmall]',\n  host: {'class': 'mat-card-sm-image'}\n})\nexport class MatCardSmImage {}\n\n/**\n * Image used in a card, needed to add the mat- CSS styling.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-card-md-image], [matCardImageMedium]',\n  host: {'class': 'mat-card-md-image'}\n})\nexport class MatCardMdImage {}\n\n/**\n * Image used in a card, needed to add the mat- CSS styling.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-card-lg-image], [matCardImageLarge]',\n  host: {'class': 'mat-card-lg-image'}\n})\nexport class MatCardLgImage {}\n\n/**\n * Large image used in a card, needed to add the mat- CSS styling.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-card-xl-image], [matCardImageXLarge]',\n  host: {'class': 'mat-card-xl-image'}\n})\nexport class MatCardXlImage {}\n\n/**\n * Avatar image used in a card, needed to add the mat- CSS styling.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-card-avatar], [matCardAvatar]',\n  host: {'class': 'mat-card-avatar'}\n})\nexport class MatCardAvatar {}\n\n\n/**\n * A basic content container component that adds the styles of a Material design card.\n *\n * While this component can be used alone, it also provides a number\n * of preset styles for common card sections, including:\n * - mat-card-title\n * - mat-card-subtitle\n * - mat-card-content\n * - mat-card-actions\n * - mat-card-footer\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-card',\n  exportAs: 'matCard',\n  templateUrl: 'card.html',\n  styleUrls: ['card.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {'class': 'mat-card'}\n})\nexport class MatCard {}\n\n\n/**\n * Component intended to be used within the `<mat-card>` component. It adds styles for a\n * preset header section (i.e. a title, subtitle, and avatar layout).\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-card-header',\n  templateUrl: 'card-header.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {'class': 'mat-card-header'}\n})\nexport class MatCardHeader {}\n\n\n/**\n * Component intended to be used within the `<mat-card>` component. It adds styles for a preset\n * layout that groups an image with a title section.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-card-title-group',\n  templateUrl: 'card-title-group.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {'class': 'mat-card-title-group'}\n})\nexport class MatCardTitleGroup {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {\n  MatCard,\n  MatCardActions,\n  MatCardAvatar,\n  MatCardContent,\n  MatCardFooter,\n  MatCardHeader,\n  MatCardImage,\n  MatCardLgImage,\n  MatCardMdImage,\n  MatCardSmImage,\n  MatCardSubtitle,\n  MatCardTitle,\n  MatCardTitleGroup,\n  MatCardXlImage,\n} from './card';\n\n\n@NgModule({\n  imports: [MatCommonModule],\n  exports: [\n    MatCard,\n    MatCardHeader,\n    MatCardTitleGroup,\n    MatCardContent,\n    MatCardTitle,\n    MatCardSubtitle,\n    MatCardActions,\n    MatCardFooter,\n    MatCardSmImage,\n    MatCardMdImage,\n    MatCardLgImage,\n    MatCardImage,\n    MatCardXlImage,\n    MatCardAvatar,\n    MatCommonModule,\n  ],\n  declarations: [\n    MatCard, MatCardHeader, MatCardTitleGroup, MatCardContent, MatCardTitle, MatCardSubtitle,\n    MatCardActions, MatCardFooter, MatCardSmImage, MatCardMdImage, MatCardLgImage, MatCardImage,\n    MatCardXlImage, MatCardAvatar,\n  ],\n})\nexport class MatCardModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {InjectionToken} from '@angular/core';\n\n\n/**\n * Checkbox click action when user click on input element.\n * noop: Do not toggle checked or indeterminate.\n * check: Only toggle checked status, ignore indeterminate.\n * check-indeterminate: Toggle checked status, set indeterminate to false. Default behavior.\n * undefined: Same as `check-indeterminate`.\n */\nexport type MatCheckboxClickAction = 'noop' | 'check' | 'check-indeterminate' | undefined;\n\n/**\n * Injection token that can be used to specify the checkbox click behavior.\n */\nexport const MAT_CHECKBOX_CLICK_ACTION =\n    new InjectionToken<MatCheckboxClickAction>('mat-checkbox-click-action');\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor, FocusOrigin} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  AfterViewInit,\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  Output,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {\n  CanColor,\n  CanDisable,\n  CanDisableRipple,\n  HasTabIndex,\n  MatRipple,\n  mixinColor,\n  mixinDisabled,\n  mixinDisableRipple,\n  mixinTabIndex,\n  RippleRef,\n} from '@angular/material/core';\nimport {MAT_CHECKBOX_CLICK_ACTION, MatCheckboxClickAction} from './checkbox-config';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\n\n\n// Increasing integer for generating unique ids for checkbox components.\nlet nextUniqueId = 0;\n\n/**\n * Provider Expression that allows mat-checkbox to register as a ControlValueAccessor.\n * This allows it to support [(ngModel)].\n * @docs-private\n */\nexport const MAT_CHECKBOX_CONTROL_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatCheckbox),\n  multi: true\n};\n\n/**\n * Represents the different states that require custom transitions between them.\n * @docs-private\n */\nexport enum TransitionCheckState {\n  /** The initial state of the component before any user interaction. */\n  Init,\n  /** The state representing the component when it's becoming checked. */\n  Checked,\n  /** The state representing the component when it's becoming unchecked. */\n  Unchecked,\n  /** The state representing the component when it's becoming indeterminate. */\n  Indeterminate\n}\n\n/** Change event object emitted by MatCheckbox. */\nexport class MatCheckboxChange {\n  /** The source MatCheckbox of the event. */\n  source: MatCheckbox;\n  /** The new `checked` value of the checkbox. */\n  checked: boolean;\n}\n\n// Boilerplate for applying mixins to MatCheckbox.\n/** @docs-private */\nexport class MatCheckboxBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatCheckboxMixinBase =\n  mixinTabIndex(mixinColor(mixinDisableRipple(mixinDisabled(MatCheckboxBase)), 'accent'));\n\n\n/**\n * A material design checkbox component. Supports all of the functionality of an HTML5 checkbox,\n * and exposes a similar API. A MatCheckbox can be either checked, unchecked, indeterminate, or\n * disabled. Note that all additional accessibility attributes are taken care of by the component,\n * so there is no need to provide them yourself. However, if you want to omit a label and still\n * have the checkbox be accessible, you may supply an [aria-label] input.\n * See: https://material.io/design/components/selection-controls.html\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-checkbox',\n  templateUrl: 'checkbox.html',\n  styleUrls: ['checkbox.css'],\n  exportAs: 'matCheckbox',\n  host: {\n    'class': 'mat-checkbox',\n    '[id]': 'id',\n    '[class.mat-checkbox-indeterminate]': 'indeterminate',\n    '[class.mat-checkbox-checked]': 'checked',\n    '[class.mat-checkbox-disabled]': 'disabled',\n    '[class.mat-checkbox-label-before]': 'labelPosition == \"before\"',\n    '[class._mat-animation-noopable]': `_animationMode === 'NoopAnimations'`,\n  },\n  providers: [MAT_CHECKBOX_CONTROL_VALUE_ACCESSOR],\n  inputs: ['disableRipple', 'color', 'tabIndex'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class MatCheckbox extends _MatCheckboxMixinBase implements ControlValueAccessor,\n    AfterViewInit, OnDestroy, CanColor, CanDisable, HasTabIndex, CanDisableRipple {\n\n  /**\n   * Attached to the aria-label attribute of the host element. In most cases, arial-labelledby will\n   * take precedence so this may be omitted.\n   */\n  @Input('aria-label') ariaLabel: string = '';\n\n  /**\n   * Users can specify the `aria-labelledby` attribute which will be forwarded to the input element\n   */\n  @Input('aria-labelledby') ariaLabelledby: string | null = null;\n\n  private _uniqueId: string = `mat-checkbox-${++nextUniqueId}`;\n\n  /** A unique id for the checkbox input. If none is supplied, it will be auto-generated. */\n  @Input() id: string = this._uniqueId;\n\n  /** Returns the unique id for the visual hidden input. */\n  get inputId(): string { return `${this.id || this._uniqueId}-input`; }\n\n  /** Whether the checkbox is required. */\n  @Input()\n  get required(): boolean { return this._required; }\n  set required(value: boolean) { this._required = coerceBooleanProperty(value); }\n  private _required: boolean;\n\n  /** Whether the label should appear after or before the checkbox. Defaults to 'after' */\n  @Input() labelPosition: 'before' | 'after' = 'after';\n\n  /** Name value will be applied to the input element if present */\n  @Input() name: string | null = null;\n\n  /** Event emitted when the checkbox's `checked` value changes. */\n  @Output() readonly change: EventEmitter<MatCheckboxChange> =\n      new EventEmitter<MatCheckboxChange>();\n\n  /** Event emitted when the checkbox's `indeterminate` value changes. */\n  @Output() readonly indeterminateChange: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n  /** The value attribute of the native input element */\n  @Input() value: string;\n\n  /** The native `<input type=\"checkbox\">` element */\n  @ViewChild('input') _inputElement: ElementRef;\n\n  /** Reference to the ripple instance of the checkbox. */\n  @ViewChild(MatRipple) ripple: MatRipple;\n\n  /**\n   * Called when the checkbox is blurred. Needed to properly implement ControlValueAccessor.\n   * @docs-private\n   */\n  _onTouched: () => any = () => {};\n\n  private _currentAnimationClass: string = '';\n\n  private _currentCheckState: TransitionCheckState = TransitionCheckState.Init;\n\n  private _controlValueAccessorChangeFn: (value: any) => void = () => {};\n\n  /** Reference to the focused state ripple. */\n  private _focusRipple: RippleRef | null;\n\n  constructor(elementRef: ElementRef,\n              private _changeDetectorRef: ChangeDetectorRef,\n              private _focusMonitor: FocusMonitor,\n              private _ngZone: NgZone,\n              @Attribute('tabindex') tabIndex: string,\n              @Optional() @Inject(MAT_CHECKBOX_CLICK_ACTION)\n                  private _clickAction: MatCheckboxClickAction,\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode?: string) {\n    super(elementRef);\n\n    this.tabIndex = parseInt(tabIndex) || 0;\n  }\n\n  ngAfterViewInit() {\n    this._focusMonitor\n      .monitor(this._inputElement.nativeElement)\n      .subscribe(focusOrigin => this._onInputFocusChange(focusOrigin));\n  }\n\n  ngOnDestroy() {\n    this._focusMonitor.stopMonitoring(this._inputElement.nativeElement);\n  }\n\n  /**\n   * Whether the checkbox is checked.\n   */\n  @Input()\n  get checked(): boolean { return this._checked; }\n  set checked(value: boolean) {\n    if (value != this.checked) {\n      this._checked = value;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n  private _checked: boolean = false;\n\n  /**\n   * Whether the checkbox is disabled. This fully overrides the implementation provided by\n   * mixinDisabled, but the mixin is still required because mixinTabIndex requires it.\n   */\n  @Input()\n  get disabled() { return this._disabled; }\n  set disabled(value: any) {\n    if (value != this.disabled) {\n      this._disabled = value;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n  private _disabled: boolean = false;\n\n  /**\n   * Whether the checkbox is indeterminate. This is also known as \"mixed\" mode and can be used to\n   * represent a checkbox with three states, e.g. a checkbox that represents a nested list of\n   * checkable items. Note that whenever checkbox is manually clicked, indeterminate is immediately\n   * set to false.\n   */\n  @Input()\n  get indeterminate(): boolean { return this._indeterminate; }\n  set indeterminate(value: boolean) {\n    const changed = value != this._indeterminate;\n    this._indeterminate = value;\n\n    if (changed) {\n      if (this._indeterminate) {\n        this._transitionCheckState(TransitionCheckState.Indeterminate);\n      } else {\n        this._transitionCheckState(\n          this.checked ? TransitionCheckState.Checked : TransitionCheckState.Unchecked);\n      }\n      this.indeterminateChange.emit(this._indeterminate);\n    }\n  }\n  private _indeterminate: boolean = false;\n\n  _isRippleDisabled() {\n    return this.disableRipple || this.disabled;\n  }\n\n  /** Method being called whenever the label text changes. */\n  _onLabelTextChange() {\n    // This method is getting called whenever the label of the checkbox changes.\n    // Since the checkbox uses the OnPush strategy we need to notify it about the change\n    // that has been recognized by the cdkObserveContent directive.\n    this._changeDetectorRef.markForCheck();\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  writeValue(value: any) {\n    this.checked = !!value;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnChange(fn: (value: any) => void) {\n    this._controlValueAccessorChangeFn = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnTouched(fn: any) {\n    this._onTouched = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  setDisabledState(isDisabled: boolean) {\n    this.disabled = isDisabled;\n  }\n\n  _getAriaChecked(): 'true' | 'false' | 'mixed' {\n    return this.checked ? 'true' : (this.indeterminate ? 'mixed' : 'false');\n  }\n\n  private _transitionCheckState(newState: TransitionCheckState) {\n    let oldState = this._currentCheckState;\n    let element: HTMLElement = this._elementRef.nativeElement;\n\n    if (oldState === newState) {\n      return;\n    }\n    if (this._currentAnimationClass.length > 0) {\n      element.classList.remove(this._currentAnimationClass);\n    }\n\n    this._currentAnimationClass = this._getAnimationClassForCheckStateTransition(\n        oldState, newState);\n    this._currentCheckState = newState;\n\n    if (this._currentAnimationClass.length > 0) {\n      element.classList.add(this._currentAnimationClass);\n\n      // Remove the animation class to avoid animation when the checkbox is moved between containers\n      const animationClass = this._currentAnimationClass;\n\n      this._ngZone.runOutsideAngular(() => {\n        setTimeout(() => {\n          element.classList.remove(animationClass);\n        }, 1000);\n      });\n    }\n  }\n\n  private _emitChangeEvent() {\n    let event = new MatCheckboxChange();\n    event.source = this;\n    event.checked = this.checked;\n\n    this._controlValueAccessorChangeFn(this.checked);\n    this.change.emit(event);\n  }\n\n  /** Function is called whenever the focus changes for the input element. */\n  private _onInputFocusChange(focusOrigin: FocusOrigin) {\n    // TODO(paul): support `program`. See https://github.com/angular/material2/issues/9889\n    if (!this._focusRipple && focusOrigin === 'keyboard') {\n      this._focusRipple = this.ripple.launch(0, 0, {persistent: true});\n    } else if (!focusOrigin) {\n      if (this._focusRipple) {\n        this._focusRipple.fadeOut();\n        this._focusRipple = null;\n      }\n\n      this._onTouched();\n    }\n  }\n\n  /** Toggles the `checked` state of the checkbox. */\n  toggle(): void {\n    this.checked = !this.checked;\n  }\n\n  /**\n   * Event handler for checkbox input element.\n   * Toggles checked state if element is not disabled.\n   * Do not toggle on (change) event since IE doesn't fire change event when\n   *   indeterminate checkbox is clicked.\n   * @param event\n   */\n  _onInputClick(event: Event) {\n    // We have to stop propagation for click events on the visual hidden input element.\n    // By default, when a user clicks on a label element, a generated click event will be\n    // dispatched on the associated input element. Since we are using a label element as our\n    // root container, the click event on the `checkbox` will be executed twice.\n    // The real click event will bubble up, and the generated click event also tries to bubble up.\n    // This will lead to multiple click events.\n    // Preventing bubbling for the second event will solve that issue.\n    event.stopPropagation();\n\n    // If resetIndeterminate is false, and the current state is indeterminate, do nothing on click\n    if (!this.disabled && this._clickAction !== 'noop') {\n      // When user manually click on the checkbox, `indeterminate` is set to false.\n      if (this.indeterminate && this._clickAction !== 'check') {\n\n        Promise.resolve().then(() => {\n          this._indeterminate = false;\n          this.indeterminateChange.emit(this._indeterminate);\n        });\n      }\n\n      this.toggle();\n      this._transitionCheckState(\n          this._checked ? TransitionCheckState.Checked : TransitionCheckState.Unchecked);\n\n      // Emit our custom change event if the native input emitted one.\n      // It is important to only emit it, if the native input triggered one, because\n      // we don't want to trigger a change event, when the `checked` variable changes for example.\n      this._emitChangeEvent();\n    } else if (!this.disabled && this._clickAction === 'noop') {\n      // Reset native input when clicked with noop. The native checkbox becomes checked after\n      // click, reset it to be align with `checked` value of `mat-checkbox`.\n      this._inputElement.nativeElement.checked = this.checked;\n      this._inputElement.nativeElement.indeterminate = this.indeterminate;\n    }\n  }\n\n  /** Focuses the checkbox. */\n  focus(): void {\n    this._focusMonitor.focusVia(this._inputElement.nativeElement, 'keyboard');\n  }\n\n  _onInteractionEvent(event: Event) {\n    // We always have to stop propagation on the change event.\n    // Otherwise the change event, from the input element, will bubble up and\n    // emit its event object to the `change` output.\n    event.stopPropagation();\n  }\n\n  private _getAnimationClassForCheckStateTransition(\n      oldState: TransitionCheckState, newState: TransitionCheckState): string {\n    // Don't transition if animations are disabled.\n    if (this._animationMode === 'NoopAnimations') {\n      return '';\n    }\n\n    let animSuffix: string = '';\n\n    switch (oldState) {\n      case TransitionCheckState.Init:\n        // Handle edge case where user interacts with checkbox that does not have [(ngModel)] or\n        // [checked] bound to it.\n        if (newState === TransitionCheckState.Checked) {\n          animSuffix = 'unchecked-checked';\n        } else if (newState == TransitionCheckState.Indeterminate) {\n          animSuffix = 'unchecked-indeterminate';\n        } else {\n          return '';\n        }\n        break;\n      case TransitionCheckState.Unchecked:\n        animSuffix = newState === TransitionCheckState.Checked ?\n            'unchecked-checked' : 'unchecked-indeterminate';\n        break;\n      case TransitionCheckState.Checked:\n        animSuffix = newState === TransitionCheckState.Unchecked ?\n            'checked-unchecked' : 'checked-indeterminate';\n        break;\n      case TransitionCheckState.Indeterminate:\n        animSuffix = newState === TransitionCheckState.Checked ?\n            'indeterminate-checked' : 'indeterminate-unchecked';\n        break;\n    }\n\n    return `mat-checkbox-anim-${animSuffix}`;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Directive,\n  forwardRef,\n  Provider,\n} from '@angular/core';\nimport {\n  CheckboxRequiredValidator,\n  NG_VALIDATORS,\n} from '@angular/forms';\n\nexport const MAT_CHECKBOX_REQUIRED_VALIDATOR: Provider = {\n  provide: NG_VALIDATORS,\n  useExisting: forwardRef(() => MatCheckboxRequiredValidator),\n  multi: true\n};\n\n/**\n * Validator for Material checkbox's required attribute in template-driven checkbox.\n * Current CheckboxRequiredValidator only work with `input type=checkbox` and does not\n * work with `mat-checkbox`.\n */\n@Directive({\n  selector: `mat-checkbox[required][formControlName],\n             mat-checkbox[required][formControl], mat-checkbox[required][ngModel]`,\n  providers: [MAT_CHECKBOX_REQUIRED_VALIDATOR],\n  host: {'[attr.required]': 'required ? \"\" : null'}\n})\nexport class MatCheckboxRequiredValidator extends CheckboxRequiredValidator {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ObserversModule} from '@angular/cdk/observers';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {MatCheckbox} from './checkbox';\nimport {MatCheckboxRequiredValidator} from './checkbox-required-validator';\n\n\n@NgModule({\n  imports: [CommonModule, MatRippleModule, MatCommonModule, ObserversModule],\n  exports: [MatCheckbox, MatCheckboxRequiredValidator, MatCommonModule],\n  declarations: [MatCheckbox, MatCheckboxRequiredValidator],\n})\nexport class MatCheckboxModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusableOption} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {BACKSPACE, DELETE, SPACE} from '@angular/cdk/keycodes';\nimport {Platform} from '@angular/cdk/platform';\nimport {\n  ContentChild,\n  Directive,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  Output,\n} from '@angular/core';\nimport {\n  CanColor,\n  CanDisable,\n  CanDisableRipple,\n  MAT_RIPPLE_GLOBAL_OPTIONS,\n  mixinColor,\n  mixinDisabled,\n  mixinDisableRipple,\n  RippleConfig,\n  RippleGlobalOptions,\n  RippleRenderer,\n  RippleTarget\n} from '@angular/material/core';\nimport {Subject} from 'rxjs';\n\n\n/** Represents an event fired on an individual `mat-chip`. */\nexport interface MatChipEvent {\n  /** The chip the event was fired on. */\n  chip: MatChip;\n}\n\n/** Event object emitted by MatChip when selected or deselected. */\nexport class MatChipSelectionChange {\n  constructor(\n    /** Reference to the chip that emitted the event. */\n    public source: MatChip,\n    /** Whether the chip that emitted the event is selected. */\n    public selected: boolean,\n    /** Whether the selection change was a result of a user interaction. */\n    public isUserInput = false) { }\n}\n\n\n// Boilerplate for applying mixins to MatChip.\n/** @docs-private */\nexport class MatChipBase {\n  constructor(public _elementRef: ElementRef) {}\n}\n\nexport const _MatChipMixinBase =\n    mixinColor(mixinDisableRipple(mixinDisabled(MatChipBase)), 'primary');\n\nconst CHIP_ATTRIBUTE_NAMES = ['mat-basic-chip'];\n\n/**\n * Dummy directive to add CSS class to chip avatar.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-chip-avatar, [matChipAvatar]',\n  host: {'class': 'mat-chip-avatar'}\n})\nexport class MatChipAvatar {}\n\n/**\n * Dummy directive to add CSS class to chip trailing icon.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-chip-trailing-icon, [matChipTrailingIcon]',\n  host: {'class': 'mat-chip-trailing-icon'}\n})\nexport class MatChipTrailingIcon {}\n\n/**\n * Material design styled Chip component. Used inside the MatChipList component.\n */\n@Directive({\n  selector: `mat-basic-chip, [mat-basic-chip], mat-chip, [mat-chip]`,\n  inputs: ['color', 'disabled', 'disableRipple'],\n  exportAs: 'matChip',\n  host: {\n    'class': 'mat-chip',\n    '[attr.tabindex]': 'disabled ? null : -1',\n    'role': 'option',\n    '[class.mat-chip-selected]': 'selected',\n    '[class.mat-chip-with-avatar]': 'avatar',\n    '[class.mat-chip-with-trailing-icon]': 'trailingIcon || removeIcon',\n    '[class.mat-chip-disabled]': 'disabled',\n    '[attr.disabled]': 'disabled || null',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.aria-selected]': 'ariaSelected',\n    '(click)': '_handleClick($event)',\n    '(keydown)': '_handleKeydown($event)',\n    '(focus)': 'focus()',\n    '(blur)': '_blur()',\n  },\n})\nexport class MatChip extends _MatChipMixinBase implements FocusableOption, OnDestroy, CanColor,\n    CanDisable, CanDisableRipple, RippleTarget {\n\n  /** Reference to the RippleRenderer for the chip. */\n  private _chipRipple: RippleRenderer;\n\n  /** Whether the ripples are globally disabled through the RippleGlobalOptions */\n  private _ripplesGloballyDisabled = false;\n\n  /**\n   * Ripple configuration for ripples that are launched on pointer down.\n   * @docs-private\n   */\n  rippleConfig: RippleConfig = {};\n\n  /**\n   * Whether ripples are disabled on interaction\n   * @docs-private\n   */\n  get rippleDisabled(): boolean {\n    return this.disabled || this.disableRipple || this._ripplesGloballyDisabled;\n  }\n\n  /** Whether the chip has focus. */\n  _hasFocus: boolean = false;\n\n  /** Whether the chip list is selectable */\n  chipListSelectable: boolean = true;\n\n  /** The chip avatar */\n  @ContentChild(MatChipAvatar) avatar: MatChipAvatar;\n\n  /** The chip's trailing icon. */\n  @ContentChild(MatChipTrailingIcon) trailingIcon: MatChipTrailingIcon;\n\n  /** The chip's remove toggler. */\n  @ContentChild(forwardRef(() => MatChipRemove)) removeIcon: MatChipRemove;\n\n  /** Whether the chip is selected. */\n  @Input()\n  get selected(): boolean { return this._selected; }\n  set selected(value: boolean) {\n    this._selected = coerceBooleanProperty(value);\n    this.selectionChange.emit({\n      source: this,\n      isUserInput: false,\n      selected: value\n    });\n  }\n  protected _selected: boolean = false;\n\n  /** The value of the chip. Defaults to the content inside `<mat-chip>` tags. */\n  @Input()\n  get value(): any {\n    return this._value != undefined\n      ? this._value\n      : this._elementRef.nativeElement.textContent;\n  }\n  set value(value: any) { this._value = value; }\n  protected _value: any;\n\n  /**\n   * Whether or not the chip is selectable. When a chip is not selectable,\n   * changes to it's selected state are always ignored. By default a chip is\n   * selectable, and it becomes non-selectable if it's parent chip list is\n   * not selectable.\n   */\n  @Input()\n  get selectable(): boolean { return this._selectable && this.chipListSelectable; }\n  set selectable(value: boolean) {\n    this._selectable = coerceBooleanProperty(value);\n  }\n  protected _selectable: boolean = true;\n\n  /**\n   * Determines whether or not the chip displays the remove styling and emits (removed) events.\n   */\n  @Input()\n  get removable(): boolean { return this._removable; }\n  set removable(value: boolean) {\n    this._removable = coerceBooleanProperty(value);\n  }\n  protected _removable: boolean = true;\n\n  /** Emits when the chip is focused. */\n  readonly _onFocus = new Subject<MatChipEvent>();\n\n  /** Emits when the chip is blured. */\n  readonly _onBlur = new Subject<MatChipEvent>();\n\n  /** Emitted when the chip is selected or deselected. */\n  @Output() readonly selectionChange: EventEmitter<MatChipSelectionChange> =\n      new EventEmitter<MatChipSelectionChange>();\n\n  /** Emitted when the chip is destroyed. */\n  @Output() readonly destroyed: EventEmitter<MatChipEvent> = new EventEmitter<MatChipEvent>();\n\n  /** Emitted when a chip is to be removed. */\n  @Output() readonly removed: EventEmitter<MatChipEvent> = new EventEmitter<MatChipEvent>();\n\n  /** The ARIA selected applied to the chip. */\n  get ariaSelected(): string | null {\n    return this.selectable ? this.selected.toString() : null;\n  }\n\n  constructor(public _elementRef: ElementRef,\n              ngZone: NgZone,\n              platform: Platform,\n              @Optional() @Inject(MAT_RIPPLE_GLOBAL_OPTIONS) globalOptions: RippleGlobalOptions) {\n    super(_elementRef);\n\n    this._addHostClassName();\n\n    this._chipRipple = new RippleRenderer(this, ngZone, _elementRef, platform);\n    this._chipRipple.setupTriggerEvents(_elementRef.nativeElement);\n\n    if (globalOptions) {\n      this._ripplesGloballyDisabled = !!globalOptions.disabled;\n      // TODO(paul): Once the speedFactor is removed, we no longer need to copy each single option.\n      this.rippleConfig = {\n        speedFactor: globalOptions.baseSpeedFactor,\n        animation: globalOptions.animation,\n        terminateOnPointerUp: globalOptions.terminateOnPointerUp,\n      };\n    }\n  }\n\n  _addHostClassName() {\n    // Add class for the different chips\n    for (const attr of CHIP_ATTRIBUTE_NAMES) {\n      if (this._elementRef.nativeElement.hasAttribute(attr) ||\n        this._elementRef.nativeElement.tagName.toLowerCase() === attr) {\n        (this._elementRef.nativeElement as HTMLElement).classList.add(attr);\n        return;\n      }\n    }\n    (this._elementRef.nativeElement as HTMLElement).classList.add('mat-standard-chip');\n  }\n\n  ngOnDestroy() {\n    this.destroyed.emit({chip: this});\n    this._chipRipple._removeTriggerEvents();\n  }\n\n  /** Selects the chip. */\n  select(): void {\n    this._selected = true;\n    this.selectionChange.emit({\n      source: this,\n      isUserInput: false,\n      selected: true\n    });\n  }\n\n  /** Deselects the chip. */\n  deselect(): void {\n    this._selected = false;\n    this.selectionChange.emit({\n      source: this,\n      isUserInput: false,\n      selected: false\n    });\n  }\n\n  /** Select this chip and emit selected event */\n  selectViaInteraction(): void {\n    this._selected = true;\n    // Emit select event when selected changes.\n    this.selectionChange.emit({\n      source: this,\n      isUserInput: true,\n      selected: true\n    });\n  }\n\n  /** Toggles the current selected state of this chip. */\n  toggleSelected(isUserInput: boolean = false): boolean {\n    this._selected = !this.selected;\n\n    this.selectionChange.emit({\n      source: this,\n      isUserInput,\n      selected: this._selected\n    });\n\n    return this.selected;\n  }\n\n  /** Allows for programmatic focusing of the chip. */\n  focus(): void {\n    if (!this._hasFocus) {\n      this._elementRef.nativeElement.focus();\n      this._onFocus.next({chip: this});\n    }\n    this._hasFocus = true;\n  }\n\n  /**\n   * Allows for programmatic removal of the chip. Called by the MatChipList when the DELETE or\n   * BACKSPACE keys are pressed.\n   *\n   * Informs any listeners of the removal request. Does not remove the chip from the DOM.\n   */\n  remove(): void {\n    if (this.removable) {\n      this.removed.emit({chip: this});\n    }\n  }\n\n  /** Ensures events fire properly upon click. */\n  _handleClick(event: Event) {\n    // Check disabled\n    if (this.disabled) {\n      return;\n    }\n\n    event.preventDefault();\n    event.stopPropagation();\n  }\n\n  /** Handle custom key presses. */\n  _handleKeydown(event: KeyboardEvent): void {\n    if (this.disabled) {\n      return;\n    }\n\n    switch (event.keyCode) {\n      case DELETE:\n      case BACKSPACE:\n        // If we are removable, remove the focused chip\n        this.remove();\n        // Always prevent so page navigation does not occur\n        event.preventDefault();\n        break;\n      case SPACE:\n        // If we are selectable, toggle the focused chip\n        if (this.selectable) {\n          this.toggleSelected(true);\n        }\n\n        // Always prevent space from scrolling the page since the list has focus\n        event.preventDefault();\n        break;\n    }\n  }\n\n  _blur(): void {\n    this._hasFocus = false;\n    this._onBlur.next({chip: this});\n  }\n}\n\n\n/**\n * Applies proper (click) support and adds styling for use with the Material Design \"cancel\" icon\n * available at https://material.io/icons/#ic_cancel.\n *\n * Example:\n *\n *     `<mat-chip>\n *       <mat-icon matChipRemove>cancel</mat-icon>\n *     </mat-chip>`\n *\n * You *may* use a custom icon, but you may need to override the `mat-chip-remove` positioning\n * styles to properly center the icon within the chip.\n */\n@Directive({\n  selector: '[matChipRemove]',\n  host: {\n    'class': 'mat-chip-remove mat-chip-trailing-icon',\n    '(click)': '_handleClick()',\n  }\n})\nexport class MatChipRemove {\n  constructor(protected _parentChip: MatChip) {\n  }\n\n  /** Calls the parent chip's public `remove()` method if applicable. */\n  _handleClick(): void {\n    if (this._parentChip.removable) {\n      this._parentChip.remove();\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {InjectionToken} from '@angular/core';\n\n/** Default options, for the chips module, that can be overridden. */\nexport interface MatChipsDefaultOptions {\n  /** The list of key codes that will trigger a chipEnd event. */\n  separatorKeyCodes: number[];\n}\n\n/** Injection token to be used to override the default options for the chips module. */\nexport const MAT_CHIPS_DEFAULT_OPTIONS =\n    new InjectionToken<MatChipsDefaultOptions>('mat-chips-default-options');\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor} from '@angular/cdk/a11y';\nimport {Platform} from '@angular/cdk/platform';\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  OnDestroy,\n  ViewChild,\n  ViewEncapsulation,\n  Optional,\n  Inject,\n} from '@angular/core';\nimport {\n  CanColor,\n  CanDisable,\n  CanDisableRipple,\n  MatRipple,\n  mixinColor,\n  mixinDisabled,\n  mixinDisableRipple\n} from '@angular/material/core';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\n\n/** Default color palette for round buttons (mat-fab and mat-mini-fab) */\nconst DEFAULT_ROUND_BUTTON_COLOR = 'accent';\n\n/** Default color palette for flat buttons (mat-flat-button) */\nconst DEFAULT_FLAT_BUTTON_COLOR = 'primary';\n\n/**\n * List of classes to add to MatButton instances based on host attributes to\n * style as different variants.\n */\nconst BUTTON_HOST_ATTRIBUTES = [\n  'mat-button',\n  'mat-flat-button',\n  'mat-icon-button',\n  'mat-raised-button',\n  'mat-stroked-button',\n  'mat-mini-fab',\n  'mat-fab',\n];\n\n// Boilerplate for applying mixins to MatButton.\n/** @docs-private */\nexport class MatButtonBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatButtonMixinBase = mixinColor(mixinDisabled(mixinDisableRipple(MatButtonBase)));\n\n\n/**\n * Material design button.\n */\n@Component({\n  moduleId: module.id,\n  selector: `button[mat-button], button[mat-raised-button], button[mat-icon-button],\n             button[mat-fab], button[mat-mini-fab], button[mat-stroked-button],\n             button[mat-flat-button]`,\n  exportAs: 'matButton',\n  host: {\n    '[disabled]': 'disabled || null',\n    '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"',\n  },\n  templateUrl: 'button.html',\n  styleUrls: ['button.css'],\n  inputs: ['disabled', 'disableRipple', 'color'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatButton extends _MatButtonMixinBase\n    implements OnDestroy, CanDisable, CanColor, CanDisableRipple {\n\n  /** Whether the button is round. */\n  readonly isRoundButton: boolean = this._hasHostAttributes('mat-fab', 'mat-mini-fab');\n\n  /** Whether the button is icon button. */\n  readonly isIconButton: boolean = this._hasHostAttributes('mat-icon-button');\n\n  /** Reference to the MatRipple instance of the button. */\n  @ViewChild(MatRipple) ripple: MatRipple;\n\n  constructor(elementRef: ElementRef,\n              /**\n               * @deprecated Platform checks for SSR are no longer needed\n               * @deletion-target 7.0.0\n               */\n              // tslint:disable-next-line:no-unused-variable\n              private _platform: Platform,\n              private _focusMonitor: FocusMonitor,\n              // @deletion-target 7.0.0 `_animationMode` parameter to be made required.\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode?: string) {\n    super(elementRef);\n\n    // For each of the variant selectors that is prevent in the button's host\n    // attributes, add the correct corresponding class.\n    for (const attr of BUTTON_HOST_ATTRIBUTES) {\n      if (this._hasHostAttributes(attr)) {\n        (elementRef.nativeElement as HTMLElement).classList.add(attr);\n      }\n    }\n\n    this._focusMonitor.monitor(this._elementRef.nativeElement, true);\n\n    if (this.isRoundButton) {\n      this.color = DEFAULT_ROUND_BUTTON_COLOR;\n    } else if (this._hasHostAttributes('mat-flat-button')) {\n      this.color = DEFAULT_FLAT_BUTTON_COLOR;\n    }\n  }\n\n  ngOnDestroy() {\n    this._focusMonitor.stopMonitoring(this._elementRef.nativeElement);\n  }\n\n  /** Focuses the button. */\n  focus(): void {\n    this._getHostElement().focus();\n  }\n\n  _getHostElement() {\n    return this._elementRef.nativeElement;\n  }\n\n  _isRippleDisabled() {\n    return this.disableRipple || this.disabled;\n  }\n\n  /** Gets whether the button has one of the given attributes. */\n  _hasHostAttributes(...attributes: string[]) {\n    return attributes.some(attribute => this._getHostElement().hasAttribute(attribute));\n  }\n}\n\n/**\n * Raised Material design button.\n */\n@Component({\n  moduleId: module.id,\n  selector: `a[mat-button], a[mat-raised-button], a[mat-icon-button], a[mat-fab],\n             a[mat-mini-fab], a[mat-stroked-button], a[mat-flat-button]`,\n  exportAs: 'matButton, matAnchor',\n  host: {\n    '[attr.tabindex]': 'disabled ? -1 : 0',\n    '[attr.disabled]': 'disabled || null',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '(click)': '_haltDisabledEvents($event)',\n    '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"',\n  },\n  inputs: ['disabled', 'disableRipple', 'color'],\n  templateUrl: 'button.html',\n  styleUrls: ['button.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatAnchor extends MatButton {\n\n  constructor(\n    platform: Platform,\n    focusMonitor: FocusMonitor,\n    elementRef: ElementRef,\n    // @deletion-target 7.0.0 `animationMode` parameter to be made required.\n    @Optional() @Inject(ANIMATION_MODULE_TYPE) animationMode?: string) {\n    super(elementRef, platform, focusMonitor, animationMode);\n  }\n\n  _haltDisabledEvents(event: Event) {\n    // A disabled button shouldn't apply any actions\n    if (this.disabled) {\n      event.preventDefault();\n      event.stopImmediatePropagation();\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {MatAnchor, MatButton} from './button';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatRippleModule,\n    MatCommonModule,\n  ],\n  exports: [\n    MatButton,\n    MatAnchor,\n    MatCommonModule,\n  ],\n  declarations: [\n    MatButton,\n    MatAnchor,\n  ],\n})\nexport class MatButtonModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Input,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Output,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {\n  CanDisable,\n  CanDisableRipple,\n  mixinDisabled,\n  mixinDisableRipple\n} from '@angular/material/core';\nimport {SelectionModel} from '@angular/cdk/collections';\n\n/** Acceptable types for a button toggle. */\nexport type ToggleType = 'checkbox' | 'radio';\n\n// Boilerplate for applying mixins to MatButtonToggleGroup and MatButtonToggleGroupMultiple\n/** @docs-private */\nexport class MatButtonToggleGroupBase {}\nexport const _MatButtonToggleGroupMixinBase = mixinDisabled(MatButtonToggleGroupBase);\n\n/**\n * Provider Expression that allows mat-button-toggle-group to register as a ControlValueAccessor.\n * This allows it to support [(ngModel)].\n * @docs-private\n */\nexport const MAT_BUTTON_TOGGLE_GROUP_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatButtonToggleGroup),\n  multi: true\n};\n\n/**\n * @deprecated Use `MatButtonToggleGroup` instead.\n * @deletion-target 7.0.0\n */\nexport class MatButtonToggleGroupMultiple {}\n\nlet _uniqueIdCounter = 0;\n\n/** Change event object emitted by MatButtonToggle. */\nexport class MatButtonToggleChange {\n  constructor(\n    /** The MatButtonToggle that emits the event. */\n    public source: MatButtonToggle,\n\n    /** The value assigned to the MatButtonToggle. */\n    public value: any) {}\n}\n\n/** Exclusive selection button toggle group that behaves like a radio-button group. */\n@Directive({\n  selector: 'mat-button-toggle-group',\n  providers: [\n    MAT_BUTTON_TOGGLE_GROUP_VALUE_ACCESSOR,\n    {provide: MatButtonToggleGroupMultiple, useExisting: MatButtonToggleGroup},\n  ],\n  inputs: ['disabled'],\n  host: {\n    'role': 'group',\n    'class': 'mat-button-toggle-group',\n    '[class.mat-button-toggle-vertical]': 'vertical'\n  },\n  exportAs: 'matButtonToggleGroup',\n})\nexport class MatButtonToggleGroup extends _MatButtonToggleGroupMixinBase implements\n  ControlValueAccessor, CanDisable, OnInit, AfterContentInit {\n\n  private _vertical = false;\n  private _multiple = false;\n  private _selectionModel: SelectionModel<MatButtonToggle>;\n\n  /**\n   * Reference to the raw value that the consumer tried to assign. The real\n   * value will exaclude any values from this one that don't correspond to a\n   * toggle. Useful for the cases where the value is assigned before the toggles\n   * have been initialized or at the same that they're being swapped out.\n   */\n  private _rawValue: any;\n\n  /**\n   * The method to be called in order to update ngModel.\n   * Now `ngModel` binding is not supported in multiple selection mode.\n   */\n  _controlValueAccessorChangeFn: (value: any) => void = () => {};\n\n  /** onTouch function registered via registerOnTouch (ControlValueAccessor). */\n  _onTouched: () => any = () => {};\n\n  /** Child button toggle buttons. */\n  @ContentChildren(forwardRef(() => MatButtonToggle)) _buttonToggles: QueryList<MatButtonToggle>;\n\n  /** `name` attribute for the underlying `input` element. */\n  @Input()\n  get name(): string { return this._name; }\n  set name(value: string) {\n    this._name = value;\n\n    if (this._buttonToggles) {\n      this._buttonToggles.forEach(toggle => toggle.name = this._name);\n    }\n  }\n  private _name = `mat-button-toggle-group-${_uniqueIdCounter++}`;\n\n  /** Whether the toggle group is vertical. */\n  @Input()\n  get vertical(): boolean { return this._vertical; }\n  set vertical(value: boolean) {\n    this._vertical = coerceBooleanProperty(value);\n  }\n\n  /** Value of the toggle group. */\n  @Input()\n  get value(): any {\n    const selected = this._selectionModel ? this._selectionModel.selected : [];\n\n    if (this.multiple) {\n      return selected.map(toggle => toggle.value);\n    }\n\n    return selected[0] ? selected[0].value : undefined;\n  }\n  set value(newValue: any) {\n    this._setSelectionByValue(newValue);\n    this.valueChange.emit(this.value);\n  }\n\n  /**\n   * Event that emits whenever the value of the group changes.\n   * Used to facilitate two-way data binding.\n   * @docs-private\n   */\n  @Output() readonly valueChange = new EventEmitter<any>();\n\n  /** Selected button toggles in the group. */\n  get selected() {\n    const selected = this._selectionModel.selected;\n    return this.multiple ? selected : (selected[0] || null);\n  }\n\n  /** Whether multiple button toggles can be selected. */\n  @Input()\n  get multiple(): boolean { return this._multiple; }\n  set multiple(value: boolean) {\n    this._multiple = coerceBooleanProperty(value);\n  }\n\n  /** Event emitted when the group's value changes. */\n  @Output() readonly change: EventEmitter<MatButtonToggleChange> =\n      new EventEmitter<MatButtonToggleChange>();\n\n  constructor(private _changeDetector: ChangeDetectorRef) {\n    super();\n  }\n\n  ngOnInit() {\n    this._selectionModel = new SelectionModel<MatButtonToggle>(this.multiple, undefined, false);\n  }\n\n  ngAfterContentInit() {\n    this._selectionModel.select(...this._buttonToggles.filter(toggle => toggle.checked));\n  }\n\n  /**\n   * Sets the model value. Implemented as part of ControlValueAccessor.\n   * @param value Value to be set to the model.\n   */\n  writeValue(value: any) {\n    this.value = value;\n    this._changeDetector.markForCheck();\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnChange(fn: (value: any) => void) {\n    this._controlValueAccessorChangeFn = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnTouched(fn: any) {\n    this._onTouched = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n\n    if (this._buttonToggles) {\n      this._buttonToggles.forEach(toggle => toggle._markForCheck());\n    }\n  }\n\n  /** Dispatch change event with current selection and group value. */\n  _emitChangeEvent(): void {\n    const selected = this.selected;\n    const source = Array.isArray(selected) ? selected[selected.length - 1] : selected;\n    const event = new MatButtonToggleChange(source!, this.value);\n    this._controlValueAccessorChangeFn(event.value);\n    this.change.emit(event);\n  }\n\n  /**\n   * Syncs a button toggle's selected state with the model value.\n   * @param toggle Toggle to be synced.\n   * @param select Whether the toggle should be selected.\n   * @param isUserInput Whether the change was a result of a user interaction.\n   */\n  _syncButtonToggle(toggle: MatButtonToggle, select: boolean, isUserInput = false) {\n    // Deselect the currently-selected toggle, if we're in single-selection\n    // mode and the button being toggled isn't selected at the moment.\n    if (!this.multiple && this.selected && !toggle.checked) {\n      (this.selected as MatButtonToggle).checked = false;\n    }\n\n    if (select) {\n      this._selectionModel.select(toggle);\n    } else {\n      this._selectionModel.deselect(toggle);\n    }\n\n    // Only emit the change event for user input.\n    if (isUserInput) {\n      this._emitChangeEvent();\n    }\n\n    // Note: we emit this one no matter whether it was a user interaction, because\n    // it is used by Angular to sync up the two-way data binding.\n    this.valueChange.emit(this.value);\n  }\n\n  /** Checks whether a button toggle is selected. */\n  _isSelected(toggle: MatButtonToggle) {\n    return this._selectionModel.isSelected(toggle);\n  }\n\n  /** Determines whether a button toggle should be checked on init. */\n  _isPrechecked(toggle: MatButtonToggle) {\n    if (typeof this._rawValue === 'undefined') {\n      return false;\n    }\n\n    if (this.multiple && Array.isArray(this._rawValue)) {\n      return this._rawValue.some(value => toggle.value != null && value === toggle.value);\n    }\n\n    return toggle.value === this._rawValue;\n  }\n\n  /** Updates the selection state of the toggles in the group based on a value. */\n  private _setSelectionByValue(value: any|any[]) {\n    this._rawValue = value;\n\n    if (!this._buttonToggles) {\n      return;\n    }\n\n    if (this.multiple && value) {\n      if (!Array.isArray(value)) {\n        throw Error('Value must be an array in multiple-selection mode.');\n      }\n\n      this._clearSelection();\n      value.forEach((currentValue: any) => this._selectValue(currentValue));\n    } else {\n      this._clearSelection();\n      this._selectValue(value);\n    }\n  }\n\n  /** Clears the selected toggles. */\n  private _clearSelection() {\n    this._selectionModel.clear();\n    this._buttonToggles.forEach(toggle => toggle.checked = false);\n  }\n\n  /** Selects a value if there's a toggle that corresponds to it. */\n  private _selectValue(value: any) {\n    const correspondingOption = this._buttonToggles.find(toggle => {\n      return toggle.value != null && toggle.value === value;\n    });\n\n    if (correspondingOption) {\n      correspondingOption.checked = true;\n      this._selectionModel.select(correspondingOption);\n    }\n  }\n}\n\n// Boilerplate for applying mixins to the MatButtonToggle class.\n/** @docs-private */\nexport class MatButtonToggleBase {}\nexport const _MatButtonToggleMixinBase = mixinDisableRipple(MatButtonToggleBase);\n\n/** Single button inside of a toggle group. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-button-toggle',\n  templateUrl: 'button-toggle.html',\n  styleUrls: ['button-toggle.css'],\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matButtonToggle',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  inputs: ['disableRipple'],\n  host: {\n    '[class.mat-button-toggle-standalone]': '!buttonToggleGroup',\n    '[class.mat-button-toggle-checked]': 'checked',\n    '[class.mat-button-toggle-disabled]': 'disabled',\n    'class': 'mat-button-toggle',\n    '[attr.id]': 'id',\n  }\n})\nexport class MatButtonToggle extends _MatButtonToggleMixinBase implements OnInit,\n  CanDisableRipple, OnDestroy {\n\n  private _isSingleSelector = false;\n  private _checked = false;\n\n  /**\n   * Attached to the aria-label attribute of the host element. In most cases, arial-labelledby will\n   * take precedence so this may be omitted.\n   */\n  @Input('aria-label') ariaLabel: string;\n\n  /**\n   * Users can specify the `aria-labelledby` attribute which will be forwarded to the input element\n   */\n  @Input('aria-labelledby') ariaLabelledby: string | null = null;\n\n  /** Type of the button toggle. Either 'radio' or 'checkbox'. */\n  _type: ToggleType;\n\n  @ViewChild('button') _buttonElement: ElementRef<HTMLButtonElement>;\n\n  /** The parent button toggle group (exclusive selection). Optional. */\n  buttonToggleGroup: MatButtonToggleGroup;\n\n  /** Unique ID for the underlying `button` element. */\n  get buttonId(): string { return `${this.id}-button`; }\n\n  /** The unique ID for this button toggle. */\n  @Input() id: string;\n\n  /** HTML's 'name' attribute used to group radios for unique selection. */\n  @Input() name: string;\n\n  /** MatButtonToggleGroup reads this to assign its own value. */\n  @Input() value: any;\n\n  /** Whether the button is checked. */\n  @Input()\n  get checked(): boolean {\n    return this.buttonToggleGroup ? this.buttonToggleGroup._isSelected(this) : this._checked;\n  }\n  set checked(value: boolean) {\n    const newValue = coerceBooleanProperty(value);\n\n    if (newValue !== this._checked) {\n      this._checked = newValue;\n\n      if (this.buttonToggleGroup) {\n        this.buttonToggleGroup._syncButtonToggle(this, this._checked);\n      }\n\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  /** Whether the button is disabled. */\n  @Input()\n  get disabled(): boolean {\n    return this._disabled || (this.buttonToggleGroup && this.buttonToggleGroup.disabled);\n  }\n  set disabled(value: boolean) { this._disabled = coerceBooleanProperty(value); }\n  private _disabled: boolean = false;\n\n  /** Event emitted when the group value changes. */\n  @Output() readonly change: EventEmitter<MatButtonToggleChange> =\n      new EventEmitter<MatButtonToggleChange>();\n\n  constructor(@Optional() toggleGroup: MatButtonToggleGroup,\n              private _changeDetectorRef: ChangeDetectorRef,\n              private _elementRef: ElementRef<HTMLElement>,\n              private _focusMonitor: FocusMonitor) {\n    super();\n\n    this.buttonToggleGroup = toggleGroup;\n  }\n\n  ngOnInit() {\n    this._isSingleSelector = this.buttonToggleGroup && !this.buttonToggleGroup.multiple;\n    this._type = this._isSingleSelector ? 'radio' : 'checkbox';\n    this.id = this.id || `mat-button-toggle-${_uniqueIdCounter++}`;\n\n    if (this._isSingleSelector) {\n      this.name = this.buttonToggleGroup.name;\n    }\n\n    if (this.buttonToggleGroup && this.buttonToggleGroup._isPrechecked(this)) {\n      this.checked = true;\n    }\n\n    this._focusMonitor.monitor(this._elementRef.nativeElement, true);\n  }\n\n  ngOnDestroy() {\n    this._focusMonitor.stopMonitoring(this._elementRef.nativeElement);\n  }\n\n  /** Focuses the button. */\n  focus(): void {\n    this._buttonElement.nativeElement.focus();\n  }\n\n  /** Checks the button toggle due to an interaction with the underlying native button. */\n  _onButtonClick() {\n    const newChecked = this._isSingleSelector ? true : !this._checked;\n\n    if (newChecked !== this._checked) {\n      this._checked = newChecked;\n      if (this.buttonToggleGroup) {\n        this.buttonToggleGroup._syncButtonToggle(this, this._checked, true);\n        this.buttonToggleGroup._onTouched();\n      }\n    }\n    // Emit a change event when it's the single selector\n    this.change.emit(new MatButtonToggleChange(this, this.value));\n  }\n\n  /**\n   * Marks the button toggle as needing checking for change detection.\n   * This method is exposed because the parent button toggle group will directly\n   * update bound properties of the radio button.\n   */\n  _markForCheck() {\n    // When the group value changes, the button will not be notified.\n    // Use `markForCheck` to explicit update button toggle's status.\n    this._changeDetectorRef.markForCheck();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {MatButtonToggle, MatButtonToggleGroup} from './button-toggle';\n\n\n@NgModule({\n  imports: [MatCommonModule, MatRippleModule],\n  exports: [MatCommonModule, MatButtonToggleGroup, MatButtonToggle],\n  declarations: [MatButtonToggleGroup, MatButtonToggle],\n})\nexport class MatButtonToggleModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  AfterContentInit,\n  Component,\n  ContentChildren,\n  ElementRef,\n  Input,\n  QueryList,\n  TemplateRef,\n  ViewChild,\n  ViewEncapsulation,\n  ChangeDetectorRef,\n  ChangeDetectionStrategy,\n  EventEmitter,\n  Output,\n  InjectionToken,\n  Inject,\n} from '@angular/core';\nimport {\n  MatOption,\n  MatOptgroup,\n  MAT_OPTION_PARENT_COMPONENT,\n  mixinDisableRipple,\n  CanDisableRipple,\n} from '@angular/material/core';\nimport {ActiveDescendantKeyManager} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\n\n\n/**\n * Autocomplete IDs need to be unique across components, so this counter exists outside of\n * the component definition.\n */\nlet _uniqueAutocompleteIdCounter = 0;\n\n/** Event object that is emitted when an autocomplete option is selected. */\nexport class MatAutocompleteSelectedEvent {\n  constructor(\n    /** Reference to the autocomplete panel that emitted the event. */\n    public source: MatAutocomplete,\n    /** Option that was selected. */\n    public option: MatOption) { }\n}\n\n// Boilerplate for applying mixins to MatAutocomplete.\n/** @docs-private */\nexport class MatAutocompleteBase {}\nexport const _MatAutocompleteMixinBase = mixinDisableRipple(MatAutocompleteBase);\n\n/** Default `mat-autocomplete` options that can be overridden. */\nexport interface MatAutocompleteDefaultOptions {\n  /** Whether the first option should be highlighted when an autocomplete panel is opened. */\n  autoActiveFirstOption?: boolean;\n}\n\n/** Injection token to be used to override the default options for `mat-autocomplete`. */\nexport const MAT_AUTOCOMPLETE_DEFAULT_OPTIONS =\n    new InjectionToken<MatAutocompleteDefaultOptions>('mat-autocomplete-default-options', {\n      providedIn: 'root',\n      factory: MAT_AUTOCOMPLETE_DEFAULT_OPTIONS_FACTORY,\n    });\n\n/** @docs-private */\nexport function MAT_AUTOCOMPLETE_DEFAULT_OPTIONS_FACTORY(): MatAutocompleteDefaultOptions {\n  return {autoActiveFirstOption: false};\n}\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-autocomplete',\n  templateUrl: 'autocomplete.html',\n  styleUrls: ['autocomplete.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  exportAs: 'matAutocomplete',\n  inputs: ['disableRipple'],\n  host: {\n    'class': 'mat-autocomplete'\n  },\n  providers: [\n    {provide: MAT_OPTION_PARENT_COMPONENT, useExisting: MatAutocomplete}\n  ]\n})\nexport class MatAutocomplete extends _MatAutocompleteMixinBase implements AfterContentInit,\n  CanDisableRipple {\n\n  /** Manages active item in option list based on key events. */\n  _keyManager: ActiveDescendantKeyManager<MatOption>;\n\n  /** Whether the autocomplete panel should be visible, depending on option length. */\n  showPanel: boolean = false;\n\n  /** Whether the autocomplete panel is open. */\n  get isOpen(): boolean { return this._isOpen && this.showPanel; }\n  _isOpen: boolean = false;\n\n  /** @docs-private */\n  @ViewChild(TemplateRef) template: TemplateRef<any>;\n\n  /** Element for the panel containing the autocomplete options. */\n  @ViewChild('panel') panel: ElementRef;\n\n  /** @docs-private */\n  @ContentChildren(MatOption, { descendants: true }) options: QueryList<MatOption>;\n\n  /** @docs-private */\n  @ContentChildren(MatOptgroup) optionGroups: QueryList<MatOptgroup>;\n\n  /** Function that maps an option's control value to its display value in the trigger. */\n  @Input() displayWith: ((value: any) => string) | null = null;\n\n  /**\n   * Whether the first option should be highlighted when the autocomplete panel is opened.\n   * Can be configured globally through the `MAT_AUTOCOMPLETE_DEFAULT_OPTIONS` token.\n   */\n  @Input()\n  get autoActiveFirstOption(): boolean { return this._autoActiveFirstOption; }\n  set autoActiveFirstOption(value: boolean) {\n    this._autoActiveFirstOption = coerceBooleanProperty(value);\n  }\n  private _autoActiveFirstOption: boolean;\n\n  /**\n   * Specify the width of the autocomplete panel.  Can be any CSS sizing value, otherwise it will\n   * match the width of its host.\n   */\n  @Input() panelWidth: string | number;\n\n  /** Event that is emitted whenever an option from the list is selected. */\n  @Output() readonly optionSelected: EventEmitter<MatAutocompleteSelectedEvent> =\n      new EventEmitter<MatAutocompleteSelectedEvent>();\n\n  /** Event that is emitted when the autocomplete panel is opened. */\n  @Output() readonly opened: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Event that is emitted when the autocomplete panel is closed. */\n  @Output() readonly closed: EventEmitter<void> = new EventEmitter<void>();\n\n  /**\n   * Takes classes set on the host mat-autocomplete element and applies them to the panel\n   * inside the overlay container to allow for easy styling.\n   */\n  @Input('class')\n  set classList(value: string) {\n    if (value && value.length) {\n      value.split(' ').forEach(className => this._classList[className.trim()] = true);\n      this._elementRef.nativeElement.className = '';\n    }\n  }\n  _classList: {[key: string]: boolean} = {};\n\n  /** Unique ID to be used by autocomplete trigger's \"aria-owns\" property. */\n  id: string = `mat-autocomplete-${_uniqueAutocompleteIdCounter++}`;\n\n  constructor(\n    private _changeDetectorRef: ChangeDetectorRef,\n    private _elementRef: ElementRef,\n    @Inject(MAT_AUTOCOMPLETE_DEFAULT_OPTIONS) defaults: MatAutocompleteDefaultOptions) {\n    super();\n\n    this._autoActiveFirstOption = !!defaults.autoActiveFirstOption;\n  }\n\n  ngAfterContentInit() {\n    this._keyManager = new ActiveDescendantKeyManager<MatOption>(this.options).withWrap();\n    // Set the initial visibility state.\n    this._setVisibility();\n  }\n\n  /**\n   * Sets the panel scrollTop. This allows us to manually scroll to display options\n   * above or below the fold, as they are not actually being focused when active.\n   */\n  _setScrollTop(scrollTop: number): void {\n    if (this.panel) {\n      this.panel.nativeElement.scrollTop = scrollTop;\n    }\n  }\n\n  /** Returns the panel's scrollTop. */\n  _getScrollTop(): number {\n    return this.panel ? this.panel.nativeElement.scrollTop : 0;\n  }\n\n  /** Panel should hide itself when the option list is empty. */\n  _setVisibility() {\n    this.showPanel = !!this.options.length;\n    this._classList['mat-autocomplete-visible'] = this.showPanel;\n    this._classList['mat-autocomplete-hidden'] = !this.showPanel;\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Emits the `select` event. */\n  _emitSelectEvent(option: MatOption): void {\n    const event = new MatAutocompleteSelectedEvent(this, option);\n    this.optionSelected.emit(event);\n  }\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, ElementRef} from '@angular/core';\n\n/**\n * Directive applied to an element to make it usable\n * as a connection point for an autocomplete panel.\n */\n@Directive({\n  selector: '[matAutocompleteOrigin]',\n  exportAs: 'matAutocompleteOrigin',\n})\nexport class MatAutocompleteOrigin {\n  constructor(\n      /** Reference to the element on which the directive is applied. */\n      public elementRef: ElementRef<HTMLElement>) { }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {MatOptionModule, MatCommonModule} from '@angular/material/core';\nimport {MatAutocomplete} from './autocomplete';\nimport {\n  MatAutocompleteTrigger,\n  MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY_PROVIDER,\n} from './autocomplete-trigger';\nimport {MatAutocompleteOrigin} from './autocomplete-origin';\n\n@NgModule({\n  imports: [MatOptionModule, OverlayModule, MatCommonModule, CommonModule],\n  exports: [\n    MatAutocomplete,\n    MatOptionModule,\n    MatAutocompleteTrigger,\n    MatAutocompleteOrigin,\n    MatCommonModule\n  ],\n  declarations: [MatAutocomplete, MatAutocompleteTrigger, MatAutocompleteOrigin],\n  providers: [MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY_PROVIDER],\n})\nexport class MatAutocompleteModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {AriaDescriber} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {DOCUMENT} from '@angular/common';\nimport {Directive, ElementRef, Inject, Input, NgZone, OnDestroy, Optional} from '@angular/core';\nimport {ThemePalette} from '@angular/material/core';\n\n\nlet nextId = 0;\n\nexport type MatBadgePosition = 'above after' | 'above before' | 'below before' | 'below after';\nexport type MatBadgeSize = 'small' | 'medium' | 'large';\n\n/** Directive to display a text badge. */\n@Directive({\n  selector: '[matBadge]',\n  host: {\n    'class': 'mat-badge',\n    '[class.mat-badge-overlap]': 'overlap',\n    '[class.mat-badge-above]': 'isAbove()',\n    '[class.mat-badge-below]': '!isAbove()',\n    '[class.mat-badge-before]': '!isAfter()',\n    '[class.mat-badge-after]': 'isAfter()',\n    '[class.mat-badge-small]': 'size === \"small\"',\n    '[class.mat-badge-medium]': 'size === \"medium\"',\n    '[class.mat-badge-large]': 'size === \"large\"',\n    '[class.mat-badge-hidden]': 'hidden',\n  },\n})\nexport class MatBadge implements OnDestroy {\n\n  /** The color of the badge. Can be `primary`, `accent`, or `warn`. */\n  @Input('matBadgeColor')\n  get color(): ThemePalette { return this._color; }\n  set color(value: ThemePalette) {\n    this._setColor(value);\n    this._color = value;\n  }\n  private _color: ThemePalette = 'primary';\n\n  /** Whether the badge should overlap its contents or not */\n  @Input('matBadgeOverlap')\n  get overlap(): boolean { return this._overlap; }\n  set overlap(val: boolean) {\n    this._overlap = coerceBooleanProperty(val);\n  }\n  private _overlap: boolean = true;\n\n  /**\n   * Position the badge should reside.\n   * Accepts any combination of 'above'|'below' and 'before'|'after'\n   */\n  @Input('matBadgePosition') position: MatBadgePosition = 'above after';\n\n  /** The content for the badge */\n  @Input('matBadge')\n  get content(): string { return this._content; }\n  set content(val: string) {\n    this._content = val;\n    this._updateTextContent();\n  }\n  private _content: string;\n\n  /** Message used to describe the decorated element via aria-describedby */\n  @Input('matBadgeDescription')\n  get description(): string { return this._description; }\n  set description(newDescription: string) {\n    if (newDescription !== this._description) {\n      this._updateHostAriaDescription(newDescription, this._description);\n      this._description = newDescription;\n    }\n  }\n  private _description: string;\n\n  /** Size of the badge. Can be 'small', 'medium', or 'large'. */\n  @Input('matBadgeSize') size: MatBadgeSize = 'medium';\n\n  /** Whether the badge is hidden. */\n  @Input('matBadgeHidden')\n  get hidden(): boolean { return this._hidden; }\n  set hidden(val: boolean) {\n    this._hidden = coerceBooleanProperty(val);\n  }\n  private _hidden: boolean;\n\n  /** Unique id for the badge */\n  _id: number = nextId++;\n\n  private _badgeElement: HTMLElement;\n\n  constructor(\n      @Optional() @Inject(DOCUMENT) private _document: any,\n      private _ngZone: NgZone,\n      private _elementRef: ElementRef,\n      private _ariaDescriber: AriaDescriber) {}\n\n  /** Whether the badge is above the host or not */\n  isAbove(): boolean {\n    return this.position.indexOf('below') === -1;\n  }\n\n  /** Whether the badge is after the host or not */\n  isAfter(): boolean {\n    return this.position.indexOf('before') === -1;\n  }\n\n  ngOnDestroy() {\n    if (this.description && this._badgeElement) {\n      this._ariaDescriber.removeDescription(this._badgeElement, this.description);\n    }\n  }\n\n  /** Injects a span element into the DOM with the content. */\n  private _updateTextContent(): HTMLSpanElement {\n    if (!this._badgeElement) {\n      this._badgeElement = this._createBadgeElement();\n    } else {\n      this._badgeElement.textContent = this.content;\n    }\n    return this._badgeElement;\n  }\n\n  /** Creates the badge element */\n  private _createBadgeElement(): HTMLElement {\n    const badgeElement = this._document.createElement('span');\n    const activeClass = 'mat-badge-active';\n\n    badgeElement.setAttribute('id', `mat-badge-content-${this._id}`);\n    badgeElement.classList.add('mat-badge-content');\n    badgeElement.textContent = this.content;\n\n    if (this.description) {\n      badgeElement.setAttribute('aria-label', this.description);\n    }\n\n    this._elementRef.nativeElement.appendChild(badgeElement);\n\n    // animate in after insertion\n    if (typeof requestAnimationFrame === 'function') {\n      this._ngZone.runOutsideAngular(() => {\n        requestAnimationFrame(() => {\n          badgeElement.classList.add(activeClass);\n        });\n      });\n    } else {\n      badgeElement.classList.add(activeClass);\n    }\n\n    return badgeElement;\n  }\n\n  /** Sets the aria-label property on the element */\n  private _updateHostAriaDescription(newDescription: string, oldDescription: string): void {\n    // ensure content available before setting label\n    const content = this._updateTextContent();\n\n    if (oldDescription) {\n      this._ariaDescriber.removeDescription(content, oldDescription);\n    }\n\n    if (newDescription) {\n      this._ariaDescriber.describe(content, newDescription);\n    }\n  }\n\n  /** Adds css theme class given the color to the component host */\n  private _setColor(colorPalette: ThemePalette) {\n    if (colorPalette !== this._color) {\n      if (this._color) {\n        this._elementRef.nativeElement.classList.remove(`mat-badge-${this._color}`);\n      }\n      if (colorPalette) {\n        this._elementRef.nativeElement.classList.add(`mat-badge-${colorPalette}`);\n      }\n    }\n  }\n\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {A11yModule} from '@angular/cdk/a11y';\nimport {MatBadge} from './badge';\n\n\n@NgModule({\n  imports: [\n    A11yModule,\n    MatCommonModule\n  ],\n  exports: [MatBadge],\n  declarations: [MatBadge],\n})\nexport class MatBadgeModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ViewContainerRef, InjectionToken} from '@angular/core';\nimport {Direction} from '@angular/cdk/bidi';\n\n/** Injection token that can be used to access the data that was passed in to a bottom sheet. */\nexport const MAT_BOTTOM_SHEET_DATA = new InjectionToken<any>('MatBottomSheetData');\n\n/**\n * Configuration used when opening a bottom sheet.\n */\nexport class MatBottomSheetConfig<D = any> {\n  /** The view container to place the overlay for the bottom sheet into. */\n  viewContainerRef?: ViewContainerRef;\n\n  /** Extra CSS classes to be added to the bottom sheet container. */\n  panelClass?: string | string[];\n\n  /** Text layout direction for the bottom sheet. */\n  direction?: Direction;\n\n  /** Data being injected into the child component. */\n  data?: D | null = null;\n\n  /** Whether the bottom sheet has a backdrop. */\n  hasBackdrop?: boolean = true;\n\n  /** Custom class for the backdrop. */\n  backdropClass?: string;\n\n  /** Whether the user can use escape or clicking outside to close the bottom sheet. */\n  disableClose?: boolean = false;\n\n  /** Aria label to assign to the bottom sheet element. */\n  ariaLabel?: string | null = null;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\nimport {AnimationCurves, AnimationDurations} from '@angular/material/core';\n\n/** Animations used by the Material bottom sheet. */\nexport const matBottomSheetAnimations: {\n  readonly bottomSheetState: AnimationTriggerMetadata;\n} = {\n  /** Animation that shows and hides a bottom sheet. */\n  bottomSheetState: trigger('state', [\n    state('void, hidden', style({transform: 'translateY(100%)'})),\n    state('visible', style({transform: 'translateY(0%)'})),\n    transition('visible => void, visible => hidden',\n        animate(`${AnimationDurations.COMPLEX} ${AnimationCurves.ACCELERATION_CURVE}`)),\n    transition('void => visible',\n        animate(`${AnimationDurations.EXITING} ${AnimationCurves.DECELERATION_CURVE}`)),\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ComponentRef,\n  EmbeddedViewRef,\n  ViewChild,\n  OnDestroy,\n  ElementRef,\n  ChangeDetectionStrategy,\n  ViewEncapsulation,\n  ChangeDetectorRef,\n  EventEmitter,\n  Inject,\n  Optional,\n} from '@angular/core';\nimport {AnimationEvent} from '@angular/animations';\nimport {\n  BasePortalOutlet,\n  ComponentPortal,\n  TemplatePortal,\n  CdkPortalOutlet,\n} from '@angular/cdk/portal';\nimport {BreakpointObserver, Breakpoints} from '@angular/cdk/layout';\nimport {MatBottomSheetConfig} from './bottom-sheet-config';\nimport {matBottomSheetAnimations} from './bottom-sheet-animations';\nimport {Subscription} from 'rxjs';\nimport {DOCUMENT} from '@angular/common';\nimport {FocusTrap, FocusTrapFactory} from '@angular/cdk/a11y';\n\n// TODO(crisbeto): consolidate some logic between this, MatDialog and MatSnackBar\n\n/**\n * Internal component that wraps user-provided bottom sheet content.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-bottom-sheet-container',\n  templateUrl: 'bottom-sheet-container.html',\n  styleUrls: ['bottom-sheet-container.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  animations: [matBottomSheetAnimations.bottomSheetState],\n  host: {\n    'class': 'mat-bottom-sheet-container',\n    'tabindex': '-1',\n    'role': 'dialog',\n    'aria-modal': 'true',\n    '[attr.aria-label]': 'bottomSheetConfig?.ariaLabel',\n    '[@state]': '_animationState',\n    '(@state.start)': '_onAnimationStart($event)',\n    '(@state.done)': '_onAnimationDone($event)'\n  },\n})\nexport class MatBottomSheetContainer extends BasePortalOutlet implements OnDestroy {\n  private _breakpointSubscription: Subscription;\n\n  /** The portal outlet inside of this container into which the content will be loaded. */\n  @ViewChild(CdkPortalOutlet) _portalOutlet: CdkPortalOutlet;\n\n  /** The state of the bottom sheet animations. */\n  _animationState: 'void' | 'visible' | 'hidden' = 'void';\n\n  /** Emits whenever the state of the animation changes. */\n  _animationStateChanged = new EventEmitter<AnimationEvent>();\n\n  /** The class that traps and manages focus within the bottom sheet. */\n  private _focusTrap: FocusTrap;\n\n  /** Element that was focused before the bottom sheet was opened. */\n  private _elementFocusedBeforeOpened: HTMLElement | null = null;\n\n  /** Server-side rendering-compatible reference to the global document object. */\n  private _document: Document;\n\n  /** Whether the component has been destroyed. */\n  private _destroyed: boolean;\n\n  constructor(\n    private _elementRef: ElementRef,\n    private _changeDetectorRef: ChangeDetectorRef,\n    private _focusTrapFactory: FocusTrapFactory,\n    breakpointObserver: BreakpointObserver,\n    @Optional() @Inject(DOCUMENT) document: any,\n    /** The bottom sheet configuration. */\n    public bottomSheetConfig: MatBottomSheetConfig) {\n    super();\n\n    this._document = document;\n    this._breakpointSubscription = breakpointObserver\n      .observe([Breakpoints.Medium, Breakpoints.Large, Breakpoints.XLarge])\n      .subscribe(() => {\n        this._toggleClass('mat-bottom-sheet-container-medium',\n            breakpointObserver.isMatched(Breakpoints.Medium));\n        this._toggleClass('mat-bottom-sheet-container-large',\n            breakpointObserver.isMatched(Breakpoints.Large));\n        this._toggleClass('mat-bottom-sheet-container-xlarge',\n            breakpointObserver.isMatched(Breakpoints.XLarge));\n      });\n  }\n\n  /** Attach a component portal as content to this bottom sheet container. */\n  attachComponentPortal<T>(portal: ComponentPortal<T>): ComponentRef<T> {\n    this._validatePortalAttached();\n    this._setPanelClass();\n    this._savePreviouslyFocusedElement();\n    return this._portalOutlet.attachComponentPortal(portal);\n  }\n\n  /** Attach a template portal as content to this bottom sheet container. */\n  attachTemplatePortal<C>(portal: TemplatePortal<C>): EmbeddedViewRef<C> {\n    this._validatePortalAttached();\n    this._setPanelClass();\n    this._savePreviouslyFocusedElement();\n    return this._portalOutlet.attachTemplatePortal(portal);\n  }\n\n  /** Begin animation of bottom sheet entrance into view. */\n  enter(): void {\n    if (!this._destroyed) {\n      this._animationState = 'visible';\n      this._changeDetectorRef.detectChanges();\n    }\n  }\n\n  /** Begin animation of the bottom sheet exiting from view. */\n  exit(): void {\n    if (!this._destroyed) {\n      this._animationState = 'hidden';\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  ngOnDestroy() {\n    this._breakpointSubscription.unsubscribe();\n    this._destroyed = true;\n  }\n\n  _onAnimationDone(event: AnimationEvent) {\n    if (event.toState === 'visible') {\n      this._trapFocus();\n    } else if (event.toState === 'hidden') {\n      this._restoreFocus();\n    }\n\n    this._animationStateChanged.emit(event);\n  }\n\n  _onAnimationStart(event: AnimationEvent) {\n    this._animationStateChanged.emit(event);\n  }\n\n  private _toggleClass(cssClass: string, add: boolean) {\n    const classList = this._elementRef.nativeElement.classList;\n    add ? classList.add(cssClass) : classList.remove(cssClass);\n  }\n\n  private _validatePortalAttached() {\n    if (this._portalOutlet.hasAttached()) {\n      throw Error('Attempting to attach bottom sheet content after content is already attached');\n    }\n  }\n\n  private _setPanelClass() {\n    const element: HTMLElement = this._elementRef.nativeElement;\n    const panelClass = this.bottomSheetConfig.panelClass;\n\n    if (Array.isArray(panelClass)) {\n      // Note that we can't use a spread here, because IE doesn't support multiple arguments.\n      panelClass.forEach(cssClass => element.classList.add(cssClass));\n    } else if (panelClass) {\n      element.classList.add(panelClass);\n    }\n  }\n\n\n  /** Moves the focus inside the focus trap. */\n  private _trapFocus() {\n    if (!this._focusTrap) {\n      this._focusTrap = this._focusTrapFactory.create(this._elementRef.nativeElement);\n    }\n\n    this._focusTrap.focusInitialElementWhenReady();\n  }\n\n  /** Restores focus to the element that was focused before the bottom sheet opened. */\n  private _restoreFocus() {\n    const toFocus = this._elementFocusedBeforeOpened;\n\n    // We need the extra check, because IE can set the `activeElement` to null in some cases.\n    if (toFocus && typeof toFocus.focus === 'function') {\n      toFocus.focus();\n    }\n\n    if (this._focusTrap) {\n      this._focusTrap.destroy();\n    }\n  }\n\n  /** Saves a reference to the element that was focused before the bottom sheet was opened. */\n  private _savePreviouslyFocusedElement() {\n    this._elementFocusedBeforeOpened = this._document.activeElement as HTMLElement;\n\n    // The `focus` method isn't available during server-side rendering.\n    if (this._elementRef.nativeElement.focus) {\n      Promise.resolve().then(() => this._elementRef.nativeElement.focus());\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatBottomSheetContainer} from './bottom-sheet-container';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    OverlayModule,\n    MatCommonModule,\n    PortalModule,\n  ],\n  exports: [MatBottomSheetContainer, MatCommonModule],\n  declarations: [MatBottomSheetContainer],\n  entryComponents: [MatBottomSheetContainer],\n})\nexport class MatBottomSheetModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ESCAPE} from '@angular/cdk/keycodes';\nimport {OverlayRef} from '@angular/cdk/overlay';\nimport {merge, Observable, Subject} from 'rxjs';\nimport {filter, take} from 'rxjs/operators';\nimport {MatBottomSheetContainer} from './bottom-sheet-container';\n\n\n/**\n * Reference to a bottom sheet dispatched from the bottom sheet service.\n */\nexport class MatBottomSheetRef<T = any, R = any> {\n  /** Instance of the component making up the content of the bottom sheet. */\n  instance: T;\n\n  /**\n   * Instance of the component into which the bottom sheet content is projected.\n   * @docs-private\n   */\n  containerInstance: MatBottomSheetContainer;\n\n  /** Subject for notifying the user that the bottom sheet has been dismissed. */\n  private readonly _afterDismissed = new Subject<R | undefined>();\n\n  /** Subject for notifying the user that the bottom sheet has opened and appeared. */\n  private readonly _afterOpened = new Subject<void>();\n\n  /** Result to be passed down to the `afterDismissed` stream. */\n  private _result: R | undefined;\n\n  constructor(containerInstance: MatBottomSheetContainer, private _overlayRef: OverlayRef) {\n    this.containerInstance = containerInstance;\n\n    // Emit when opening animation completes\n    containerInstance._animationStateChanged.pipe(\n      filter(event => event.phaseName === 'done' && event.toState === 'visible'),\n      take(1)\n    )\n    .subscribe(() => {\n      this._afterOpened.next();\n      this._afterOpened.complete();\n    });\n\n    // Dispose overlay when closing animation is complete\n    containerInstance._animationStateChanged.pipe(\n      filter(event => event.phaseName === 'done' && event.toState === 'hidden'),\n      take(1)\n    )\n    .subscribe(() => {\n      this._overlayRef.dispose();\n      this._afterDismissed.next(this._result);\n      this._afterDismissed.complete();\n    });\n\n    if (!containerInstance.bottomSheetConfig.disableClose) {\n      merge(\n        _overlayRef.backdropClick(),\n        _overlayRef.keydownEvents().pipe(filter(event => event.keyCode === ESCAPE))\n      ).subscribe(() => this.dismiss());\n    }\n  }\n\n  /**\n   * Dismisses the bottom sheet.\n   * @param result Data to be passed back to the bottom sheet opener.\n   */\n  dismiss(result?: R): void {\n    if (!this._afterDismissed.closed) {\n      // Transition the backdrop in parallel to the bottom sheet.\n      this.containerInstance._animationStateChanged.pipe(\n        filter(event => event.phaseName === 'start'),\n        take(1)\n      ).subscribe(() => this._overlayRef.detachBackdrop());\n\n      this._result = result;\n      this.containerInstance.exit();\n    }\n  }\n\n  /** Gets an observable that is notified when the bottom sheet is finished closing. */\n  afterDismissed(): Observable<R | undefined> {\n    return this._afterDismissed.asObservable();\n  }\n\n  /** Gets an observable that is notified when the bottom sheet has opened and appeared. */\n  afterOpened(): Observable<void> {\n    return this._afterOpened.asObservable();\n  }\n\n  /**\n   * Gets an observable that emits when the overlay's backdrop has been clicked.\n   */\n  backdropClick(): Observable<MouseEvent> {\n    return this._overlayRef.backdropClick();\n  }\n\n  /**\n   * Gets an observable that emits when keydown events are targeted on the overlay.\n   */\n  keydownEvents(): Observable<KeyboardEvent> {\n    return this._overlayRef.keydownEvents();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directionality} from '@angular/cdk/bidi';\nimport {Overlay, OverlayConfig, OverlayRef} from '@angular/cdk/overlay';\nimport {ComponentPortal, ComponentType, PortalInjector, TemplatePortal} from '@angular/cdk/portal';\nimport {ComponentRef, Injectable, Injector, Optional, SkipSelf, TemplateRef} from '@angular/core';\nimport {of as observableOf} from 'rxjs';\nimport {MAT_BOTTOM_SHEET_DATA, MatBottomSheetConfig} from './bottom-sheet-config';\nimport {MatBottomSheetContainer} from './bottom-sheet-container';\nimport {MatBottomSheetModule} from './bottom-sheet-module';\nimport {MatBottomSheetRef} from './bottom-sheet-ref';\n\n\n/**\n * Service to trigger Material Design bottom sheets.\n */\n@Injectable({providedIn: MatBottomSheetModule})\nexport class MatBottomSheet {\n  private _bottomSheetRefAtThisLevel: MatBottomSheetRef<any> | null = null;\n\n  /** Reference to the currently opened bottom sheet. */\n  get _openedBottomSheetRef(): MatBottomSheetRef<any> | null {\n    const parent = this._parentBottomSheet;\n    return parent ? parent._openedBottomSheetRef : this._bottomSheetRefAtThisLevel;\n  }\n\n  set _openedBottomSheetRef(value: MatBottomSheetRef<any> | null) {\n    if (this._parentBottomSheet) {\n      this._parentBottomSheet._openedBottomSheetRef = value;\n    } else {\n      this._bottomSheetRefAtThisLevel = value;\n    }\n  }\n\n  constructor(\n      private _overlay: Overlay,\n      private _injector: Injector,\n      @Optional() @SkipSelf() private _parentBottomSheet: MatBottomSheet) {}\n\n  open<T, D = any, R = any>(component: ComponentType<T>,\n                   config?: MatBottomSheetConfig<D>): MatBottomSheetRef<T, R>;\n  open<T, D = any, R = any>(template: TemplateRef<T>,\n                   config?: MatBottomSheetConfig<D>): MatBottomSheetRef<T, R>;\n\n  open<T, D = any, R = any>(componentOrTemplateRef: ComponentType<T> | TemplateRef<T>,\n                   config?: MatBottomSheetConfig<D>): MatBottomSheetRef<T, R> {\n\n    const _config = _applyConfigDefaults(config);\n    const overlayRef = this._createOverlay(_config);\n    const container = this._attachContainer(overlayRef, _config);\n    const ref = new MatBottomSheetRef<T, R>(container, overlayRef);\n\n    if (componentOrTemplateRef instanceof TemplateRef) {\n      container.attachTemplatePortal(new TemplatePortal<T>(componentOrTemplateRef, null!, {\n        $implicit: _config.data,\n        bottomSheetRef: ref\n      } as any));\n    } else {\n      const portal = new ComponentPortal(componentOrTemplateRef, undefined,\n            this._createInjector(_config, ref));\n      const contentRef = container.attachComponentPortal(portal);\n      ref.instance = contentRef.instance;\n    }\n\n    // When the bottom sheet is dismissed, clear the reference to it.\n    ref.afterDismissed().subscribe(() => {\n      // Clear the bottom sheet ref if it hasn't already been replaced by a newer one.\n      if (this._openedBottomSheetRef == ref) {\n        this._openedBottomSheetRef = null;\n      }\n    });\n\n    if (this._openedBottomSheetRef) {\n      // If a bottom sheet is already in view, dismiss it and enter the\n      // new bottom sheet after exit animation is complete.\n      this._openedBottomSheetRef.afterDismissed().subscribe(() => ref.containerInstance.enter());\n      this._openedBottomSheetRef.dismiss();\n    } else {\n      // If no bottom sheet is in view, enter the new bottom sheet.\n      ref.containerInstance.enter();\n    }\n\n    this._openedBottomSheetRef = ref;\n\n    return ref;\n  }\n\n  /**\n   * Dismisses the currently-visible bottom sheet.\n   */\n  dismiss(): void {\n    if (this._openedBottomSheetRef) {\n      this._openedBottomSheetRef.dismiss();\n    }\n  }\n\n  /**\n   * Attaches the bottom sheet container component to the overlay.\n   */\n  private _attachContainer(overlayRef: OverlayRef,\n                           config: MatBottomSheetConfig): MatBottomSheetContainer {\n\n    const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n    const injector = new PortalInjector(userInjector || this._injector, new WeakMap([\n      [MatBottomSheetConfig, config]\n    ]));\n\n    const containerPortal =\n        new ComponentPortal(MatBottomSheetContainer, config.viewContainerRef, injector);\n    const containerRef: ComponentRef<MatBottomSheetContainer> = overlayRef.attach(containerPortal);\n    return containerRef.instance;\n  }\n\n  /**\n   * Creates a new overlay and places it in the correct location.\n   * @param config The user-specified bottom sheet config.\n   */\n  private _createOverlay(config: MatBottomSheetConfig): OverlayRef {\n    const overlayConfig = new OverlayConfig({\n      direction: config.direction,\n      hasBackdrop: config.hasBackdrop,\n      maxWidth: '100%',\n      scrollStrategy: this._overlay.scrollStrategies.block(),\n      positionStrategy: this._overlay.position()\n        .global()\n        .centerHorizontally()\n        .bottom('0')\n    });\n\n    if (config.backdropClass) {\n      overlayConfig.backdropClass = config.backdropClass;\n    }\n\n    return this._overlay.create(overlayConfig);\n  }\n\n  /**\n   * Creates an injector to be used inside of a bottom sheet component.\n   * @param config Config that was used to create the bottom sheet.\n   * @param bottomSheetRef Reference to the bottom sheet.\n   */\n  private _createInjector<T>(config: MatBottomSheetConfig,\n                             bottomSheetRef: MatBottomSheetRef<T>): PortalInjector {\n\n    const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n    const injectionTokens = new WeakMap<any, any>([\n      [MatBottomSheetRef, bottomSheetRef],\n      [MAT_BOTTOM_SHEET_DATA, config.data]\n    ]);\n\n    if (config.direction &&\n        (!userInjector || !userInjector.get<Directionality | null>(Directionality, null))) {\n      injectionTokens.set(Directionality, {\n        value: config.direction,\n        change: observableOf()\n      });\n    }\n\n    return new PortalInjector(userInjector || this._injector, injectionTokens);\n  }\n}\n\n/**\n * Applies default options to the bottom sheet config.\n * @param config The configuration to which the defaults will be applied.\n * @returns The new configuration object with defaults applied.\n */\nfunction _applyConfigDefaults(config?: MatBottomSheetConfig): MatBottomSheetConfig {\n  return {...new MatBottomSheetConfig(), ...config};\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {ENTER, SPACE} from '@angular/cdk/keycodes';\nimport {\n  AfterViewChecked,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  InjectionToken,\n  Input,\n  OnDestroy,\n  Optional,\n  Output,\n  QueryList,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {Subject} from 'rxjs';\nimport {MatOptgroup} from './optgroup';\n\n/**\n * Option IDs need to be unique across components, so this counter exists outside of\n * the component definition.\n */\nlet _uniqueIdCounter = 0;\n\n/** Event object emitted by MatOption when selected or deselected. */\nexport class MatOptionSelectionChange {\n  constructor(\n    /** Reference to the option that emitted the event. */\n    public source: MatOption,\n    /** Whether the change in the option's value was a result of a user action. */\n    public isUserInput = false) { }\n}\n\n/**\n * Describes a parent component that manages a list of options.\n * Contains properties that the options can inherit.\n * @docs-private\n */\nexport interface MatOptionParentComponent {\n  disableRipple?: boolean;\n  multiple?: boolean;\n}\n\n/**\n * Injection token used to provide the parent component to options.\n */\nexport const MAT_OPTION_PARENT_COMPONENT =\n    new InjectionToken<MatOptionParentComponent>('MAT_OPTION_PARENT_COMPONENT');\n\n/**\n * Single option inside of a `<mat-select>` element.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-option',\n  exportAs: 'matOption',\n  host: {\n    'role': 'option',\n    '[attr.tabindex]': '_getTabIndex()',\n    '[class.mat-selected]': 'selected',\n    '[class.mat-option-multiple]': 'multiple',\n    '[class.mat-active]': 'active',\n    '[id]': 'id',\n    '[attr.aria-selected]': 'selected.toString()',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[class.mat-option-disabled]': 'disabled',\n    '(click)': '_selectViaInteraction()',\n    '(keydown)': '_handleKeydown($event)',\n    'class': 'mat-option',\n  },\n  styleUrls: ['option.css'],\n  templateUrl: 'option.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatOption implements AfterViewChecked, OnDestroy {\n  private _selected = false;\n  private _active = false;\n  private _disabled = false;\n  private _id = `mat-option-${_uniqueIdCounter++}`;\n  private _mostRecentViewValue = '';\n\n  /** Whether the wrapping component is in multiple selection mode. */\n  get multiple() { return this._parent && this._parent.multiple; }\n\n  /** The unique ID of the option. */\n  get id(): string { return this._id; }\n\n  /** Whether or not the option is currently selected. */\n  get selected(): boolean { return this._selected; }\n\n  /** The form value of the option. */\n  @Input() value: any;\n\n  /** Whether the option is disabled. */\n  @Input()\n  get disabled() { return (this.group && this.group.disabled) || this._disabled; }\n  set disabled(value: any) { this._disabled = coerceBooleanProperty(value); }\n\n  /** Whether ripples for the option are disabled. */\n  get disableRipple() { return this._parent && this._parent.disableRipple; }\n\n  /** Event emitted when the option is selected or deselected. */\n  // tslint:disable-next-line:no-output-on-prefix\n  @Output() readonly onSelectionChange = new EventEmitter<MatOptionSelectionChange>();\n\n  /** Emits when the state of the option changes and any parents have to be notified. */\n  readonly _stateChanges = new Subject<void>();\n\n  constructor(\n    private _element: ElementRef,\n    private _changeDetectorRef: ChangeDetectorRef,\n    @Optional() @Inject(MAT_OPTION_PARENT_COMPONENT) private _parent: MatOptionParentComponent,\n    @Optional() readonly group: MatOptgroup) {}\n\n  /**\n   * Whether or not the option is currently active and ready to be selected.\n   * An active option displays styles as if it is focused, but the\n   * focus is actually retained somewhere else. This comes in handy\n   * for components like autocomplete where focus must remain on the input.\n   */\n  get active(): boolean {\n    return this._active;\n  }\n\n  /**\n   * The displayed value of the option. It is necessary to show the selected option in the\n   * select's trigger.\n   */\n  get viewValue(): string {\n    // TODO(kara): Add input property alternative for node envs.\n    return (this._getHostElement().textContent || '').trim();\n  }\n\n  /** Selects the option. */\n  select(): void {\n    if (!this._selected) {\n      this._selected = true;\n      this._changeDetectorRef.markForCheck();\n      this._emitSelectionChangeEvent();\n    }\n  }\n\n  /** Deselects the option. */\n  deselect(): void {\n    if (this._selected) {\n      this._selected = false;\n      this._changeDetectorRef.markForCheck();\n      this._emitSelectionChangeEvent();\n    }\n  }\n\n  /** Sets focus onto this option. */\n  focus(): void {\n    const element = this._getHostElement();\n\n    if (typeof element.focus === 'function') {\n      element.focus();\n    }\n  }\n\n  /**\n   * This method sets display styles on the option to make it appear\n   * active. This is used by the ActiveDescendantKeyManager so key\n   * events will display the proper options as active on arrow key events.\n   */\n  setActiveStyles(): void {\n    if (!this._active) {\n      this._active = true;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  /**\n   * This method removes display styles on the option that made it appear\n   * active. This is used by the ActiveDescendantKeyManager so key\n   * events will display the proper options as active on arrow key events.\n   */\n  setInactiveStyles(): void {\n    if (this._active) {\n      this._active = false;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  /** Gets the label to be used when determining whether the option should be focused. */\n  getLabel(): string {\n    return this.viewValue;\n  }\n\n  /** Ensures the option is selected when activated from the keyboard. */\n  _handleKeydown(event: KeyboardEvent): void {\n    if (event.keyCode === ENTER || event.keyCode === SPACE) {\n      this._selectViaInteraction();\n\n      // Prevent the page from scrolling down and form submits.\n      event.preventDefault();\n    }\n  }\n\n  /**\n   * `Selects the option while indicating the selection came from the user. Used to\n   * determine if the select's view -> model callback should be invoked.`\n   */\n  _selectViaInteraction(): void {\n    if (!this.disabled) {\n      this._selected = this.multiple ? !this._selected : true;\n      this._changeDetectorRef.markForCheck();\n      this._emitSelectionChangeEvent(true);\n    }\n  }\n\n  /** Returns the correct tabindex for the option depending on disabled state. */\n  _getTabIndex(): string {\n    return this.disabled ? '-1' : '0';\n  }\n\n  /** Gets the host DOM element. */\n  _getHostElement(): HTMLElement {\n    return this._element.nativeElement;\n  }\n\n  ngAfterViewChecked() {\n    // Since parent components could be using the option's label to display the selected values\n    // (e.g. `mat-select`) and they don't have a way of knowing if the option's label has changed\n    // we have to check for changes in the DOM ourselves and dispatch an event. These checks are\n    // relatively cheap, however we still limit them only to selected options in order to avoid\n    // hitting the DOM too often.\n    if (this._selected) {\n      const viewValue = this.viewValue;\n\n      if (viewValue !== this._mostRecentViewValue) {\n        this._mostRecentViewValue = viewValue;\n        this._stateChanges.next();\n      }\n    }\n  }\n\n  ngOnDestroy() {\n    this._stateChanges.complete();\n  }\n\n  /** Emits the selection change event. */\n  private _emitSelectionChangeEvent(isUserInput = false): void {\n    this.onSelectionChange.emit(new MatOptionSelectionChange(this, isUserInput));\n  }\n}\n\n/**\n * Counts the amount of option group labels that precede the specified option.\n * @param optionIndex Index of the option at which to start counting.\n * @param options Flat list of all of the options.\n * @param optionGroups Flat list of all of the option groups.\n * @docs-private\n */\nexport function _countGroupLabelsBeforeOption(optionIndex: number, options: QueryList<MatOption>,\n  optionGroups: QueryList<MatOptgroup>): number {\n\n  if (optionGroups.length) {\n    let optionsArray = options.toArray();\n    let groups = optionGroups.toArray();\n    let groupCounter = 0;\n\n    for (let i = 0; i < optionIndex + 1; i++) {\n      if (optionsArray[i].group && optionsArray[i].group === groups[groupCounter]) {\n        groupCounter++;\n      }\n    }\n\n    return groupCounter;\n  }\n\n  return 0;\n}\n\n/**\n * Determines the position to which to scroll a panel in order for an option to be into view.\n * @param optionIndex Index of the option to be scrolled into the view.\n * @param optionHeight Height of the options.\n * @param currentScrollPosition Current scroll position of the panel.\n * @param panelHeight Height of the panel.\n * @docs-private\n */\nexport function _getOptionScrollPosition(optionIndex: number, optionHeight: number,\n    currentScrollPosition: number, panelHeight: number): number {\n  const optionOffset = optionIndex * optionHeight;\n\n  if (optionOffset < currentScrollPosition) {\n    return optionOffset;\n  }\n\n  if (optionOffset + optionHeight > currentScrollPosition + panelHeight) {\n    return Math.max(0, optionOffset - panelHeight + optionHeight);\n  }\n\n  return currentScrollPosition;\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {MatRippleModule} from '../ripple/index';\nimport {MatPseudoCheckboxModule} from '../selection/index';\nimport {MatOption} from './option';\nimport {MatOptgroup} from './optgroup';\n\n\n@NgModule({\n  imports: [MatRippleModule, CommonModule, MatPseudoCheckboxModule],\n  exports: [MatOption, MatOptgroup],\n  declarations: [MatOption, MatOptgroup]\n})\nexport class MatOptionModule {}\n\n\nexport * from './option';\nexport * from './optgroup';\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {InjectionToken} from '@angular/core';\n\n/** InjectionToken that can be used to specify the global label options. */\nexport const MAT_LABEL_GLOBAL_OPTIONS =\n  new InjectionToken<LabelOptions>('mat-label-global-options');\n\n/** Type for the available floatLabel values. */\nexport type FloatLabelType = 'always' | 'never' | 'auto';\n\n/** Configurable options for floating labels. */\nexport interface LabelOptions {\n  /**\n   * Whether the label should float `always`, `never`, or `auto` (only when necessary).\n   * Default behavior is assumed to be `auto`.\n   */\n  float?: FloatLabelType;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, Input} from '@angular/core';\n\n\nlet nextUniqueId = 0;\n\n\n/** Single error message to be shown underneath the form field. */\n@Directive({\n  selector: 'mat-error',\n  host: {\n    'class': 'mat-error',\n    'role': 'alert',\n    '[attr.id]': 'id',\n  }\n})\nexport class MatError {\n  @Input() id: string = `mat-error-${nextUniqueId++}`;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/** Animations used by the MatFormField. */\nexport const matFormFieldAnimations: {\n  readonly transitionMessages: AnimationTriggerMetadata\n} = {\n  /** Animation that transitions the form field's error and hint messages. */\n  transitionMessages: trigger('transitionMessages', [\n    // TODO(mmalerba): Use angular animations for label animation as well.\n    state('enter', style({ opacity: 1, transform: 'translateY(0%)' })),\n    transition('void => enter', [\n      style({ opacity: 0, transform: 'translateY(-100%)' }),\n      animate('300ms cubic-bezier(0.55, 0, 0.55, 0.2)'),\n    ]),\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Observable} from 'rxjs';\nimport {NgControl} from '@angular/forms';\n\n\n/** An interface which allows a control to work inside of a `MatFormField`. */\nexport abstract class MatFormFieldControl<T> {\n  /** The value of the control. */\n  value: T | null;\n\n  /**\n   * Stream that emits whenever the state of the control changes such that the parent `MatFormField`\n   * needs to run change detection.\n   */\n  readonly stateChanges: Observable<void>;\n\n  /** The element ID for this control. */\n  readonly id: string;\n\n  /** The placeholder for this control. */\n  readonly placeholder: string;\n\n  /** Gets the NgControl for this control. */\n  readonly ngControl: NgControl | null;\n\n  /** Whether the control is focused. */\n  readonly focused: boolean;\n\n  /** Whether the control is empty. */\n  readonly empty: boolean;\n\n  /** Whether the `MatFormField` label should try to float. */\n  readonly shouldLabelFloat: boolean;\n\n  /** Whether the control is required. */\n  readonly required: boolean;\n\n  /** Whether the control is disabled. */\n  readonly disabled: boolean;\n\n  /** Whether the control is in an error state. */\n  readonly errorState: boolean;\n\n  /**\n   * An optional name for the control type that can be used to distinguish `mat-form-field` elements\n   * based on their control type. The form field will add a class,\n   * `mat-form-field-type-{{controlType}}` to its root element.\n   */\n  readonly controlType?: string;\n\n  /**\n   * Whether the input is currently in an autofilled state. If property is not present on the\n   * control it is assumed to be false.\n   */\n  readonly autofilled?: boolean;\n\n  /** Sets the list of element IDs that currently describe this control. */\n  abstract setDescribedByIds(ids: string[]): void;\n\n  /** Handles a click on the control's container. */\n  abstract onContainerClick(event: MouseEvent): void;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, Input} from '@angular/core';\n\n\nlet nextUniqueId = 0;\n\n\n/** Hint text to be shown underneath the form field control. */\n@Directive({\n  selector: 'mat-hint',\n  host: {\n    'class': 'mat-hint',\n    '[class.mat-right]': 'align == \"end\"',\n    '[attr.id]': 'id',\n    // Remove align attribute to prevent it from interfering with layout.\n    '[attr.align]': 'null',\n  }\n})\nexport class MatHint {\n  /** Whether to align the hint label at the start or end of the line. */\n  @Input() align: 'start' | 'end' = 'start';\n\n  /** Unique ID for the hint. Used for the aria-describedby on the form field control. */\n  @Input() id: string = `mat-hint-${nextUniqueId++}`;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive} from '@angular/core';\n\n\n/** The floating label for a `mat-form-field`. */\n@Directive({\n  selector: 'mat-label'\n})\nexport class MatLabel {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive} from '@angular/core';\n\n\n/**\n * The placeholder text for an `MatFormField`.\n * @deprecated Use `<mat-label>` to specify the label and the `placeholder` attribute to specify the\n *     placeholder.\n * @deletion-target 8.0.0\n */\n@Directive({\n  selector: 'mat-placeholder'\n})\nexport class MatPlaceholder {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive} from '@angular/core';\n\n\n/** Prefix to be placed the the front of the form field. */\n@Directive({\n  selector: '[matPrefix]',\n})\nexport class MatPrefix {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive} from '@angular/core';\n\n\n/** Suffix to be placed at the end of the form field. */\n@Directive({\n  selector: '[matSuffix]',\n})\nexport class MatSuffix {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  AfterContentChecked,\n  AfterContentInit,\n  AfterViewInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  ContentChildren,\n  ElementRef,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  Optional,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {\n  CanColor,\n  FloatLabelType,\n  LabelOptions,\n  MAT_LABEL_GLOBAL_OPTIONS,\n  mixinColor,\n} from '@angular/material/core';\nimport {EMPTY, fromEvent, merge} from 'rxjs';\nimport {startWith, take} from 'rxjs/operators';\nimport {MatError} from './error';\nimport {matFormFieldAnimations} from './form-field-animations';\nimport {MatFormFieldControl} from './form-field-control';\nimport {\n  getMatFormFieldDuplicatedHintError,\n  getMatFormFieldMissingControlError,\n  getMatFormFieldPlaceholderConflictError,\n} from './form-field-errors';\nimport {MatHint} from './hint';\nimport {MatLabel} from './label';\nimport {MatPlaceholder} from './placeholder';\nimport {MatPrefix} from './prefix';\nimport {MatSuffix} from './suffix';\nimport {Platform} from '@angular/cdk/platform';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\n\n\nlet nextUniqueId = 0;\nconst floatingLabelScale = 0.75;\nconst outlineGapPadding = 5;\n\n\n/**\n * Boilerplate for applying mixins to MatFormField.\n * @docs-private\n */\nexport class MatFormFieldBase {\n  constructor(public _elementRef: ElementRef) { }\n}\n\n/**\n * Base class to which we're applying the form field mixins.\n * @docs-private\n */\nexport const _MatFormFieldMixinBase = mixinColor(MatFormFieldBase, 'primary');\n\n/** Possible appearance styles for the form field. */\nexport type MatFormFieldAppearance = 'legacy' | 'standard' | 'fill' | 'outline';\n\n/**\n * Represents the default options form the form field that can be configured\n * using the `MAT_FORM_FIELD_DEFAULT_OPTIONS` injection token.\n */\nexport interface MatFormFieldDefaultOptions {\n  appearance?: MatFormFieldAppearance;\n}\n\n/**\n * Injection token that can be used to configure the\n * default options for all form field within an app.\n */\nexport const MAT_FORM_FIELD_DEFAULT_OPTIONS =\n    new InjectionToken<MatFormFieldDefaultOptions>('MAT_FORM_FIELD_DEFAULT_OPTIONS');\n\n\n/** Container for form controls that applies Material Design styling and behavior. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-form-field',\n  exportAs: 'matFormField',\n  templateUrl: 'form-field.html',\n  // MatInput is a directive and can't have styles, so we need to include its styles here.\n  // The MatInput styles are fairly minimal so it shouldn't be a big deal for people who\n  // aren't using MatInput.\n  styleUrls: [\n    'form-field.css',\n    'form-field-fill.css',\n    'form-field-legacy.css',\n    'form-field-outline.css',\n    'form-field-standard.css',\n    '../input/input.css',\n  ],\n  animations: [matFormFieldAnimations.transitionMessages],\n  host: {\n    'class': 'mat-form-field',\n    '[class.mat-form-field-appearance-standard]': 'appearance == \"standard\"',\n    '[class.mat-form-field-appearance-fill]': 'appearance == \"fill\"',\n    '[class.mat-form-field-appearance-outline]': 'appearance == \"outline\"',\n    '[class.mat-form-field-appearance-legacy]': 'appearance == \"legacy\"',\n    '[class.mat-form-field-invalid]': '_control.errorState',\n    '[class.mat-form-field-can-float]': '_canLabelFloat',\n    '[class.mat-form-field-should-float]': '_shouldLabelFloat()',\n    '[class.mat-form-field-hide-placeholder]': '_hideControlPlaceholder()',\n    '[class.mat-form-field-disabled]': '_control.disabled',\n    '[class.mat-form-field-autofilled]': '_control.autofilled',\n    '[class.mat-focused]': '_control.focused',\n    '[class.mat-accent]': 'color == \"accent\"',\n    '[class.mat-warn]': 'color == \"warn\"',\n    '[class.ng-untouched]': '_shouldForward(\"untouched\")',\n    '[class.ng-touched]': '_shouldForward(\"touched\")',\n    '[class.ng-pristine]': '_shouldForward(\"pristine\")',\n    '[class.ng-dirty]': '_shouldForward(\"dirty\")',\n    '[class.ng-valid]': '_shouldForward(\"valid\")',\n    '[class.ng-invalid]': '_shouldForward(\"invalid\")',\n    '[class.ng-pending]': '_shouldForward(\"pending\")',\n    '[class._mat-animation-noopable]': '!_animationsEnabled',\n  },\n  inputs: ['color'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\n\nexport class MatFormField extends _MatFormFieldMixinBase\n    implements AfterContentInit, AfterContentChecked, AfterViewInit, CanColor {\n  private _labelOptions: LabelOptions;\n\n  /** The form-field appearance style. */\n  @Input()\n  get appearance(): MatFormFieldAppearance {\n    return this._appearance || this._defaultOptions && this._defaultOptions.appearance || 'legacy';\n  }\n  set appearance(value: MatFormFieldAppearance) {\n    // If we're switching to `outline` from another appearance, we have to recalculate the gap.\n    if (value !== this._appearance && value === 'outline') {\n      this._initialGapCalculated = false;\n    }\n\n    this._appearance = value;\n  }\n  _appearance: MatFormFieldAppearance;\n\n  /** Whether the required marker should be hidden. */\n  @Input()\n  get hideRequiredMarker(): boolean { return this._hideRequiredMarker; }\n  set hideRequiredMarker(value: boolean) {\n    this._hideRequiredMarker = coerceBooleanProperty(value);\n  }\n  private _hideRequiredMarker: boolean;\n\n  /** Override for the logic that disables the label animation in certain cases. */\n  private _showAlwaysAnimate = false;\n\n  /** Whether the floating label should always float or not. */\n  get _shouldAlwaysFloat(): boolean {\n    return this.floatLabel === 'always' && !this._showAlwaysAnimate;\n  }\n\n  /** Whether the label can float or not. */\n  get _canLabelFloat(): boolean { return this.floatLabel !== 'never'; }\n\n  /** State of the mat-hint and mat-error animations. */\n  _subscriptAnimationState: string = '';\n\n  /** Text for the form field hint. */\n  @Input()\n  get hintLabel(): string { return this._hintLabel; }\n  set hintLabel(value: string) {\n    this._hintLabel = value;\n    this._processHints();\n  }\n  private _hintLabel = '';\n\n  // Unique id for the hint label.\n  _hintLabelId: string = `mat-hint-${nextUniqueId++}`;\n\n  // Unique id for the internal form field label.\n  _labelId = `mat-form-field-label-${nextUniqueId++}`;\n\n  /**\n   * Whether the label should always float, never float or float as the user types.\n   *\n   * Note: only the legacy appearance supports the `never` option. `never` was originally added as a\n   * way to make the floating label emulate the behavior of a standard input placeholder. However\n   * the form field now supports both floating labels and placeholders. Therefore in the non-legacy\n   * appearances the `never` option has been disabled in favor of just using the placeholder.\n   */\n  @Input()\n  get floatLabel(): FloatLabelType {\n    return this.appearance !== 'legacy' && this._floatLabel === 'never' ? 'auto' : this._floatLabel;\n  }\n  set floatLabel(value: FloatLabelType) {\n    if (value !== this._floatLabel) {\n      this._floatLabel = value || this._labelOptions.float || 'auto';\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n  private _floatLabel: FloatLabelType;\n\n  /** Whether the Angular animations are enabled. */\n  _animationsEnabled: boolean;\n\n  _outlineGapWidth = 0;\n  _outlineGapStart = 0;\n  _initialGapCalculated = false;\n\n  /**\n   * @deprecated\n   * @deletion-target 7.0.0\n   */\n  @ViewChild('underline') underlineRef: ElementRef;\n\n  @ViewChild('connectionContainer') _connectionContainerRef: ElementRef;\n  @ViewChild('inputContainer') _inputContainerRef: ElementRef;\n  @ViewChild('label') private _label: ElementRef;\n  @ContentChild(MatFormFieldControl) _control: MatFormFieldControl<any>;\n  @ContentChild(MatPlaceholder) _placeholderChild: MatPlaceholder;\n  @ContentChild(MatLabel) _labelChild: MatLabel;\n  @ContentChildren(MatError) _errorChildren: QueryList<MatError>;\n  @ContentChildren(MatHint) _hintChildren: QueryList<MatHint>;\n  @ContentChildren(MatPrefix) _prefixChildren: QueryList<MatPrefix>;\n  @ContentChildren(MatSuffix) _suffixChildren: QueryList<MatSuffix>;\n\n  constructor(\n      public _elementRef: ElementRef,\n      private _changeDetectorRef: ChangeDetectorRef,\n      @Optional() @Inject(MAT_LABEL_GLOBAL_OPTIONS) labelOptions: LabelOptions,\n      @Optional() private _dir: Directionality,\n      @Optional() @Inject(MAT_FORM_FIELD_DEFAULT_OPTIONS) private _defaultOptions:\n          MatFormFieldDefaultOptions,\n      // @deletion-target 7.0.0 _platform, _ngZone and _animationMode to be made required.\n      private _platform?: Platform,\n      private _ngZone?: NgZone,\n      @Optional() @Inject(ANIMATION_MODULE_TYPE) _animationMode?: string) {\n    super(_elementRef);\n\n    this._labelOptions = labelOptions ? labelOptions : {};\n    this.floatLabel = this._labelOptions.float || 'auto';\n    this._animationsEnabled = _animationMode !== 'NoopAnimations';\n  }\n\n  /**\n   * Gets an ElementRef for the element that a overlay attached to the form-field should be\n   * positioned relative to.\n   */\n  getConnectedOverlayOrigin(): ElementRef {\n    return this._connectionContainerRef || this._elementRef;\n  }\n\n  ngAfterContentInit() {\n    this._validateControlChild();\n    if (this._control.controlType) {\n      this._elementRef.nativeElement.classList\n          .add(`mat-form-field-type-${this._control.controlType}`);\n    }\n\n    // Subscribe to changes in the child control state in order to update the form field UI.\n    this._control.stateChanges.pipe(startWith(null!)).subscribe(() => {\n      this._validatePlaceholders();\n      this._syncDescribedByIds();\n      this._changeDetectorRef.markForCheck();\n    });\n\n    // Run change detection if the value, prefix, or suffix changes.\n    const valueChanges = this._control.ngControl && this._control.ngControl.valueChanges || EMPTY;\n    merge(valueChanges, this._prefixChildren.changes, this._suffixChildren.changes)\n        .subscribe(() => this._changeDetectorRef.markForCheck());\n\n    // Re-validate when the number of hints changes.\n    this._hintChildren.changes.pipe(startWith(null)).subscribe(() => {\n      this._processHints();\n      this._changeDetectorRef.markForCheck();\n    });\n\n    // Update the aria-described by when the number of errors changes.\n    this._errorChildren.changes.pipe(startWith(null)).subscribe(() => {\n      this._syncDescribedByIds();\n      this._changeDetectorRef.markForCheck();\n    });\n  }\n\n  ngAfterContentChecked() {\n    this._validateControlChild();\n\n    if (!this._initialGapCalculated) {\n      // @deletion-target 7.0.0 Remove this check and else block once _ngZone is required.\n      if (this._ngZone) {\n        // It's important that we run this outside the `_ngZone`, because the `Promise.resolve`\n        // can kick us into an infinite change detection loop, if the `_initialGapCalculated`\n        // wasn't flipped on for some reason.\n        this._ngZone.runOutsideAngular(() => {\n          Promise.resolve().then(() => this.updateOutlineGap());\n        });\n      } else {\n        Promise.resolve().then(() => this.updateOutlineGap());\n      }\n    }\n  }\n\n  ngAfterViewInit() {\n    // Avoid animations on load.\n    this._subscriptAnimationState = 'enter';\n    this._changeDetectorRef.detectChanges();\n  }\n\n  /** Determines whether a class from the NgControl should be forwarded to the host element. */\n  _shouldForward(prop: string): boolean {\n    const ngControl = this._control ? this._control.ngControl : null;\n    return ngControl && ngControl[prop];\n  }\n\n  _hasPlaceholder() {\n    return !!(this._control && this._control.placeholder || this._placeholderChild);\n  }\n\n  _hasLabel() {\n    return !!this._labelChild;\n  }\n\n  _shouldLabelFloat() {\n    return this._canLabelFloat && (this._control.shouldLabelFloat || this._shouldAlwaysFloat);\n  }\n\n  _hideControlPlaceholder() {\n    // In the legacy appearance the placeholder is promoted to a label if no label is given.\n    return this.appearance === 'legacy' && !this._hasLabel() ||\n        this._hasLabel() && !this._shouldLabelFloat();\n  }\n\n  _hasFloatingLabel() {\n    // In the legacy appearance the placeholder is promoted to a label if no label is given.\n    return this._hasLabel() || this.appearance === 'legacy' && this._hasPlaceholder();\n  }\n\n  /** Determines whether to display hints or errors. */\n  _getDisplayedMessages(): 'error' | 'hint' {\n    return (this._errorChildren && this._errorChildren.length > 0 &&\n        this._control.errorState) ? 'error' : 'hint';\n  }\n\n  /** Animates the placeholder up and locks it in position. */\n  _animateAndLockLabel(): void {\n    if (this._hasFloatingLabel() && this._canLabelFloat) {\n      // If animations are disabled, we shouldn't go in here,\n      // because the `transitionend` will never fire.\n      if (this._animationsEnabled) {\n        this._showAlwaysAnimate = true;\n\n        fromEvent(this._label.nativeElement, 'transitionend').pipe(take(1)).subscribe(() => {\n          this._showAlwaysAnimate = false;\n        });\n      }\n\n      this.floatLabel = 'always';\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  /**\n   * Ensure that there is only one placeholder (either `placeholder` attribute on the child control\n   * or child element with the `mat-placeholder` directive).\n   */\n  private _validatePlaceholders() {\n    if (this._control.placeholder && this._placeholderChild) {\n      throw getMatFormFieldPlaceholderConflictError();\n    }\n  }\n\n  /** Does any extra processing that is required when handling the hints. */\n  private _processHints() {\n    this._validateHints();\n    this._syncDescribedByIds();\n  }\n\n  /**\n   * Ensure that there is a maximum of one of each `<mat-hint>` alignment specified, with the\n   * attribute being considered as `align=\"start\"`.\n   */\n  private _validateHints() {\n    if (this._hintChildren) {\n      let startHint: MatHint;\n      let endHint: MatHint;\n      this._hintChildren.forEach((hint: MatHint) => {\n        if (hint.align === 'start') {\n          if (startHint || this.hintLabel) {\n            throw getMatFormFieldDuplicatedHintError('start');\n          }\n          startHint = hint;\n        } else if (hint.align === 'end') {\n          if (endHint) {\n            throw getMatFormFieldDuplicatedHintError('end');\n          }\n          endHint = hint;\n        }\n      });\n    }\n  }\n\n  /**\n   * Sets the list of element IDs that describe the child control. This allows the control to update\n   * its `aria-describedby` attribute accordingly.\n   */\n  private _syncDescribedByIds() {\n    if (this._control) {\n      let ids: string[] = [];\n\n      if (this._getDisplayedMessages() === 'hint') {\n        let startHint = this._hintChildren ?\n            this._hintChildren.find(hint => hint.align === 'start') : null;\n        let endHint = this._hintChildren ?\n            this._hintChildren.find(hint => hint.align === 'end') : null;\n\n        if (startHint) {\n          ids.push(startHint.id);\n        } else if (this._hintLabel) {\n          ids.push(this._hintLabelId);\n        }\n\n        if (endHint) {\n          ids.push(endHint.id);\n        }\n      } else if (this._errorChildren) {\n        ids = this._errorChildren.map(error => error.id);\n      }\n\n      this._control.setDescribedByIds(ids);\n    }\n  }\n\n  /** Throws an error if the form field's control is missing. */\n  protected _validateControlChild() {\n    if (!this._control) {\n      throw getMatFormFieldMissingControlError();\n    }\n  }\n\n  /**\n   * Updates the width and position of the gap in the outline. Only relevant for the outline\n   * appearance.\n   */\n  updateOutlineGap() {\n    if (this.appearance === 'outline' && this._label && this._label.nativeElement.children.length) {\n      if (this._platform && !this._platform.isBrowser) {\n        // getBoundingClientRect isn't available on the server.\n        this._initialGapCalculated = true;\n        return;\n      }\n      if (!document.documentElement.contains(this._elementRef.nativeElement)) {\n        return;\n      }\n\n      const containerStart = this._getStartEnd(\n          this._connectionContainerRef.nativeElement.getBoundingClientRect());\n      const labelStart = this._getStartEnd(\n          this._label.nativeElement.children[0].getBoundingClientRect());\n      let labelWidth = 0;\n      for (const child of this._label.nativeElement.children) {\n        labelWidth += child.offsetWidth;\n      }\n      this._outlineGapStart = labelStart - containerStart - outlineGapPadding;\n      this._outlineGapWidth = labelWidth * floatingLabelScale + outlineGapPadding * 2;\n    } else {\n      this._outlineGapStart = 0;\n      this._outlineGapWidth = 0;\n    }\n    this._initialGapCalculated = true;\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Gets the start end of the rect considering the current directionality. */\n  private _getStartEnd(rect: ClientRect): number {\n    return this._dir && this._dir.value === 'rtl' ? rect.right : rect.left;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatError} from './error';\nimport {MatFormField} from './form-field';\nimport {MatHint} from './hint';\nimport {MatLabel} from './label';\nimport {MatPlaceholder} from './placeholder';\nimport {MatPrefix} from './prefix';\nimport {MatSuffix} from './suffix';\n\n\n@NgModule({\n  declarations: [\n    MatError,\n    MatFormField,\n    MatHint,\n    MatLabel,\n    MatPlaceholder,\n    MatPrefix,\n    MatSuffix,\n  ],\n  imports: [CommonModule],\n  exports: [\n    MatError,\n    MatFormField,\n    MatHint,\n    MatLabel,\n    MatPlaceholder,\n    MatPrefix,\n    MatSuffix,\n  ],\n})\nexport class MatFormFieldModule {}\n","/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)\r\n            t[p[i]] = s[p[i]];\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule, InjectionToken, Optional, Inject, isDevMode} from '@angular/core';\nimport {BidiModule} from '@angular/cdk/bidi';\n\n\n/** Injection token that configures whether the Material sanity checks are enabled. */\nexport const MATERIAL_SANITY_CHECKS = new InjectionToken<boolean>('mat-sanity-checks', {\n  providedIn: 'root',\n  factory: MATERIAL_SANITY_CHECKS_FACTORY,\n});\n\n/** @docs-private */\nexport function MATERIAL_SANITY_CHECKS_FACTORY(): boolean {\n  return true;\n}\n\n/**\n * Module that captures anything that should be loaded and/or run for *all* Angular Material\n * components. This includes Bidi, etc.\n *\n * This module should be imported to each top-level component module (e.g., MatTabsModule).\n */\n@NgModule({\n  imports: [BidiModule],\n  exports: [BidiModule],\n})\nexport class MatCommonModule {\n  /** Whether we've done the global sanity checks (e.g. a theme is loaded, there is a doctype). */\n  private _hasDoneGlobalChecks = false;\n\n  /** Whether we've already checked for HammerJs availability. */\n  private _hasCheckedHammer = false;\n\n  /** Reference to the global `document` object. */\n  private _document = typeof document === 'object' && document ? document : null;\n\n  /** Reference to the global 'window' object. */\n  private _window = typeof window === 'object' && window ? window : null;\n\n  constructor(@Optional() @Inject(MATERIAL_SANITY_CHECKS) private _sanityChecksEnabled: boolean) {\n    if (this._areChecksEnabled() && !this._hasDoneGlobalChecks) {\n      this._checkDoctypeIsDefined();\n      this._checkThemeIsPresent();\n      this._hasDoneGlobalChecks = true;\n    }\n  }\n\n  /** Whether any sanity checks are enabled */\n  private _areChecksEnabled(): boolean {\n    return this._sanityChecksEnabled && isDevMode() && !this._isTestEnv();\n  }\n\n  /** Whether the code is running in tests. */\n  private _isTestEnv() {\n    return this._window && (this._window['__karma__'] || this._window['jasmine']);\n  }\n\n  private _checkDoctypeIsDefined(): void {\n    if (this._document && !this._document.doctype) {\n      console.warn(\n        'Current document does not have a doctype. This may cause ' +\n        'some Angular Material components not to behave as expected.'\n      );\n    }\n  }\n\n  private _checkThemeIsPresent(): void {\n    if (this._document && typeof getComputedStyle === 'function') {\n      const testElement = this._document.createElement('div');\n\n      testElement.classList.add('mat-theme-loaded-marker');\n      this._document.body.appendChild(testElement);\n\n      const computedStyle = getComputedStyle(testElement);\n\n      // In some situations, the computed style of the test element can be null. For example in\n      // Firefox, the computed style is null if an application is running inside of a hidden iframe.\n      // See: https://bugzilla.mozilla.org/show_bug.cgi?id=548397\n      if (computedStyle && computedStyle.display !== 'none') {\n        console.warn(\n          'Could not find Angular Material core theme. Most Material ' +\n          'components may not work as expected. For more info refer ' +\n          'to the theming guide: https://material.angular.io/guide/theming'\n        );\n      }\n\n      this._document.body.removeChild(testElement);\n    }\n  }\n\n  /** Checks whether HammerJS is available. */\n  _checkHammerIsAvailable(): void {\n    if (this._hasCheckedHammer || !this._window) {\n      return;\n    }\n\n    if (this._areChecksEnabled() && !this._window['Hammer']) {\n      console.warn(\n        'Could not find HammerJS. Certain Angular Material components may not work correctly.');\n    }\n    this._hasCheckedHammer = true;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {Constructor} from './constructor';\n\n/** @docs-private */\nexport interface CanDisable {\n  /** Whether the component is disabled. */\n  disabled: boolean;\n}\n\n/** Mixin to augment a directive with a `disabled` property. */\nexport function mixinDisabled<T extends Constructor<{}>>(base: T): Constructor<CanDisable> & T {\n  return class extends base {\n    private _disabled: boolean = false;\n\n    get disabled() { return this._disabled; }\n    set disabled(value: any) { this._disabled = coerceBooleanProperty(value); }\n\n    constructor(...args: any[]) { super(...args); }\n  };\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Constructor} from './constructor';\nimport {ElementRef} from '@angular/core';\n\n/** @docs-private */\nexport interface CanColor {\n  /** Theme color palette for the component. */\n  color: ThemePalette;\n}\n\n/** @docs-private */\nexport interface HasElementRef {\n  _elementRef: ElementRef;\n}\n\n/** Possible color palette values. */\nexport type ThemePalette = 'primary' | 'accent' | 'warn' | undefined;\n\n/** Mixin to augment a directive with a `color` property. */\nexport function mixinColor<T extends Constructor<HasElementRef>>(base: T,\n    defaultColor?: ThemePalette): Constructor<CanColor> & T {\n  return class extends base {\n    private _color: ThemePalette;\n\n    get color(): ThemePalette { return this._color; }\n    set color(value: ThemePalette) {\n      const colorPalette = value || defaultColor;\n\n      if (colorPalette !== this._color) {\n        if (this._color) {\n          this._elementRef.nativeElement.classList.remove(`mat-${this._color}`);\n        }\n        if (colorPalette) {\n          this._elementRef.nativeElement.classList.add(`mat-${colorPalette}`);\n        }\n\n        this._color = colorPalette;\n      }\n    }\n\n    constructor(...args: any[]) {\n      super(...args);\n\n      // Set the default color that can be specified from the mixin.\n      this.color = defaultColor;\n    }\n  };\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {Constructor} from './constructor';\n\n/** @docs-private */\nexport interface CanDisableRipple {\n  /** Whether ripples are disabled. */\n  disableRipple: boolean;\n}\n\n/** Mixin to augment a directive with a `disableRipple` property. */\nexport function mixinDisableRipple<T extends Constructor<{}>>(base: T)\n    : Constructor<CanDisableRipple> & T {\n  return class extends base {\n    private _disableRipple: boolean = false;\n\n    /** Whether the ripple effect is disabled or not. */\n    get disableRipple() { return this._disableRipple; }\n    set disableRipple(value: any) { this._disableRipple = coerceBooleanProperty(value); }\n\n    constructor(...args: any[]) { super(...args); }\n  };\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Constructor} from './constructor';\nimport {CanDisable} from './disabled';\n\n/** @docs-private */\nexport interface HasTabIndex {\n  /** Tabindex of the component. */\n  tabIndex: number;\n}\n\n/** Mixin to augment a directive with a `tabIndex` property. */\nexport function mixinTabIndex<T extends Constructor<CanDisable>>(base: T, defaultTabIndex = 0)\n    : Constructor<HasTabIndex> & T {\n  return class extends base {\n    private _tabIndex: number = defaultTabIndex;\n\n    get tabIndex(): number { return this.disabled ? -1 : this._tabIndex; }\n    set tabIndex(value: number) {\n      // If the specified tabIndex value is null or undefined, fall back to the default value.\n      this._tabIndex = value != null ? value : defaultTabIndex;\n    }\n\n    constructor(...args: any[]) {\n      super(...args);\n    }\n  };\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Constructor} from './constructor';\nimport {ErrorStateMatcher} from '../error/error-options';\nimport {FormControl, FormGroupDirective, NgControl, NgForm} from '@angular/forms';\nimport {Subject} from 'rxjs';\n\n/** @docs-private */\nexport interface CanUpdateErrorState {\n  updateErrorState();\n  readonly stateChanges: Subject<void>;\n  errorState: boolean;\n  errorStateMatcher: ErrorStateMatcher;\n}\n\n/** @docs-private */\nexport interface HasErrorState {\n  _parentFormGroup: FormGroupDirective;\n  _parentForm: NgForm;\n  _defaultErrorStateMatcher: ErrorStateMatcher;\n  ngControl: NgControl;\n}\n\n/**\n * Mixin to augment a directive with updateErrorState method.\n * For component with `errorState` and need to update `errorState`.\n */\nexport function mixinErrorState<T extends Constructor<HasErrorState>>(base: T)\n: Constructor<CanUpdateErrorState> & T {\n  return class extends base {\n    /** Whether the component is in an error state. */\n    errorState: boolean = false;\n\n    /**\n     * Stream that emits whenever the state of the input changes such that the wrapping\n     * `MatFormField` needs to run change detection.\n     */\n    readonly stateChanges = new Subject<void>();\n\n    errorStateMatcher: ErrorStateMatcher;\n\n    updateErrorState() {\n      const oldState = this.errorState;\n      const parent = this._parentFormGroup || this._parentForm;\n      const matcher = this.errorStateMatcher || this._defaultErrorStateMatcher;\n      const control = this.ngControl ? this.ngControl.control as FormControl : null;\n      const newState = matcher.isErrorState(control, parent);\n\n      if (newState !== oldState) {\n        this.errorState = newState;\n        this.stateChanges.next();\n      }\n    }\n\n    constructor(...args: any[]) {\n      super(...args);\n    }\n  };\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Observable, Subscriber} from 'rxjs';\nimport {Constructor} from './constructor';\n\n\n/**\n * Mixin that adds an initialized property to a directive which, when subscribed to, will emit a\n * value once markInitialized has been called, which should be done during the ngOnInit function.\n * If the subscription is made after it has already been marked as initialized, then it will trigger\n * an emit immediately.\n * @docs-private\n */\nexport interface HasInitialized {\n  /** Stream that emits once during the directive/component's ngOnInit. */\n  initialized: Observable<void>;\n\n  /**\n   * Sets the state as initialized and must be called during ngOnInit to notify subscribers that\n   * the directive has been initialized.\n   * @docs-private\n   */\n  _markInitialized: () => void;\n}\n\n/** Mixin to augment a directive with an initialized property that will emits when ngOnInit ends. */\nexport function mixinInitialized<T extends Constructor<{}>>(base: T):\n    Constructor<HasInitialized> & T {\n  return class extends base {\n    /** Whether this directive has been marked as initialized. */\n    _isInitialized = false;\n\n    /**\n     * List of subscribers that subscribed before the directive was initialized. Should be notified\n     * during _markInitialized. Set to null after pending subscribers are notified, and should\n     * not expect to be populated after.\n     */\n    _pendingSubscribers: Subscriber<void>[] | null = [];\n\n    /**\n     * Observable stream that emits when the directive initializes. If already initialized, the\n     * subscriber is stored to be notified once _markInitialized is called.\n     */\n    initialized = new Observable<void>(subscriber => {\n      // If initialized, immediately notify the subscriber. Otherwise store the subscriber to notify\n      // when _markInitialized is called.\n      if (this._isInitialized) {\n        this._notifySubscriber(subscriber);\n      } else {\n        this._pendingSubscribers!.push(subscriber);\n      }\n    });\n\n    constructor(...args: any[]) { super(...args); }\n\n    /**\n     * Marks the state as initialized and notifies pending subscribers. Should be called at the end\n     * of ngOnInit.\n     * @docs-private\n     */\n    _markInitialized(): void {\n      if (this._isInitialized) {\n        throw Error('This directive has already been marked as initialized and ' +\n            'should not be called twice.');\n      }\n\n      this._isInitialized = true;\n\n      this._pendingSubscribers!.forEach(this._notifySubscriber);\n      this._pendingSubscribers = null;\n    }\n\n    /** Emits and completes the subscriber stream (should only emit once). */\n    _notifySubscriber(subscriber: Subscriber<void>): void {\n      subscriber.next();\n      subscriber.complete();\n    }\n  };\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {inject, InjectionToken, LOCALE_ID} from '@angular/core';\nimport {Observable, Subject} from 'rxjs';\n\n/** InjectionToken for datepicker that can be used to override default locale code. */\nexport const MAT_DATE_LOCALE = new InjectionToken<string>('MAT_DATE_LOCALE', {\n  providedIn: 'root',\n  factory: MAT_DATE_LOCALE_FACTORY,\n});\n\n/** @docs-private */\nexport function MAT_DATE_LOCALE_FACTORY(): string {\n  return inject(LOCALE_ID);\n}\n\n/**\n * No longer needed since MAT_DATE_LOCALE has been changed to a scoped injectable.\n * If you are importing and providing this in your code you can simply remove it.\n * @deprecated\n * @deletion-target 7.0.0\n */\nexport const MAT_DATE_LOCALE_PROVIDER = {provide: MAT_DATE_LOCALE, useExisting: LOCALE_ID};\n\n/** Adapts type `D` to be usable as a date by cdk-based components that work with dates. */\nexport abstract class DateAdapter<D> {\n  /** The locale to use for all dates. */\n  protected locale: any;\n\n  /** A stream that emits when the locale changes. */\n  get localeChanges(): Observable<void> { return this._localeChanges; }\n  protected _localeChanges = new Subject<void>();\n\n  /**\n   * Gets the year component of the given date.\n   * @param date The date to extract the year from.\n   * @returns The year component.\n   */\n  abstract getYear(date: D): number;\n\n  /**\n   * Gets the month component of the given date.\n   * @param date The date to extract the month from.\n   * @returns The month component (0-indexed, 0 = January).\n   */\n  abstract getMonth(date: D): number;\n\n  /**\n   * Gets the date of the month component of the given date.\n   * @param date The date to extract the date of the month from.\n   * @returns The month component (1-indexed, 1 = first of month).\n   */\n  abstract getDate(date: D): number;\n\n  /**\n   * Gets the day of the week component of the given date.\n   * @param date The date to extract the day of the week from.\n   * @returns The month component (0-indexed, 0 = Sunday).\n   */\n  abstract getDayOfWeek(date: D): number;\n\n  /**\n   * Gets a list of names for the months.\n   * @param style The naming style (e.g. long = 'January', short = 'Jan', narrow = 'J').\n   * @returns An ordered list of all month names, starting with January.\n   */\n  abstract getMonthNames(style: 'long' | 'short' | 'narrow'): string[];\n\n  /**\n   * Gets a list of names for the dates of the month.\n   * @returns An ordered list of all date of the month names, starting with '1'.\n   */\n  abstract getDateNames(): string[];\n\n  /**\n   * Gets a list of names for the days of the week.\n   * @param style The naming style (e.g. long = 'Sunday', short = 'Sun', narrow = 'S').\n   * @returns An ordered list of all weekday names, starting with Sunday.\n   */\n  abstract getDayOfWeekNames(style: 'long' | 'short' | 'narrow'): string[];\n\n  /**\n   * Gets the name for the year of the given date.\n   * @param date The date to get the year name for.\n   * @returns The name of the given year (e.g. '2017').\n   */\n  abstract getYearName(date: D): string;\n\n  /**\n   * Gets the first day of the week.\n   * @returns The first day of the week (0-indexed, 0 = Sunday).\n   */\n  abstract getFirstDayOfWeek(): number;\n\n  /**\n   * Gets the number of days in the month of the given date.\n   * @param date The date whose month should be checked.\n   * @returns The number of days in the month of the given date.\n   */\n  abstract getNumDaysInMonth(date: D): number;\n\n  /**\n   * Clones the given date.\n   * @param date The date to clone\n   * @returns A new date equal to the given date.\n   */\n  abstract clone(date: D): D;\n\n  /**\n   * Creates a date with the given year, month, and date. Does not allow over/under-flow of the\n   * month and date.\n   * @param year The full year of the date. (e.g. 89 means the year 89, not the year 1989).\n   * @param month The month of the date (0-indexed, 0 = January). Must be an integer 0 - 11.\n   * @param date The date of month of the date. Must be an integer 1 - length of the given month.\n   * @returns The new date, or null if invalid.\n   */\n  abstract createDate(year: number, month: number, date: number): D;\n\n  /**\n   * Gets today's date.\n   * @returns Today's date.\n   */\n  abstract today(): D;\n\n  /**\n   * Parses a date from a user-provided value.\n   * @param value The value to parse.\n   * @param parseFormat The expected format of the value being parsed\n   *     (type is implementation-dependent).\n   * @returns The parsed date.\n   */\n  abstract parse(value: any, parseFormat: any): D | null;\n\n  /**\n   * Formats a date as a string according to the given format.\n   * @param date The value to format.\n   * @param displayFormat The format to use to display the date as a string.\n   * @returns The formatted date string.\n   */\n  abstract format(date: D, displayFormat: any): string;\n\n  /**\n   * Adds the given number of years to the date. Years are counted as if flipping 12 pages on the\n   * calendar for each year and then finding the closest date in the new month. For example when\n   * adding 1 year to Feb 29, 2016, the resulting date will be Feb 28, 2017.\n   * @param date The date to add years to.\n   * @param years The number of years to add (may be negative).\n   * @returns A new date equal to the given one with the specified number of years added.\n   */\n  abstract addCalendarYears(date: D, years: number): D;\n\n  /**\n   * Adds the given number of months to the date. Months are counted as if flipping a page on the\n   * calendar for each month and then finding the closest date in the new month. For example when\n   * adding 1 month to Jan 31, 2017, the resulting date will be Feb 28, 2017.\n   * @param date The date to add months to.\n   * @param months The number of months to add (may be negative).\n   * @returns A new date equal to the given one with the specified number of months added.\n   */\n  abstract addCalendarMonths(date: D, months: number): D;\n\n  /**\n   * Adds the given number of days to the date. Days are counted as if moving one cell on the\n   * calendar for each day.\n   * @param date The date to add days to.\n   * @param days The number of days to add (may be negative).\n   * @returns A new date equal to the given one with the specified number of days added.\n   */\n  abstract addCalendarDays(date: D, days: number): D;\n\n  /**\n   * Gets the RFC 3339 compatible string (https://tools.ietf.org/html/rfc3339) for the given date.\n   * This method is used to generate date strings that are compatible with native HTML attributes\n   * such as the `min` or `max` attribute of an `<input>`.\n   * @param date The date to get the ISO date string for.\n   * @returns The ISO date string date string.\n   */\n  abstract toIso8601(date: D): string;\n\n  /**\n   * Checks whether the given object is considered a date instance by this DateAdapter.\n   * @param obj The object to check\n   * @returns Whether the object is a date instance.\n   */\n  abstract isDateInstance(obj: any): boolean;\n\n  /**\n   * Checks whether the given date is valid.\n   * @param date The date to check.\n   * @returns Whether the date is valid.\n   */\n  abstract isValid(date: D): boolean;\n\n  /**\n   * Gets date instance that is not valid.\n   * @returns An invalid date.\n   */\n  abstract invalid(): D;\n\n  /**\n   * Attempts to deserialize a value to a valid date object. This is different from parsing in that\n   * deserialize should only accept non-ambiguous, locale-independent formats (e.g. a ISO 8601\n   * string). The default implementation does not allow any deserialization, it simply checks that\n   * the given value is already a valid date object or null. The `<mat-datepicker>` will call this\n   * method on all of it's `@Input()` properties that accept dates. It is therefore possible to\n   * support passing values from your backend directly to these properties by overriding this method\n   * to also deserialize the format used by your backend.\n   * @param value The value to be deserialized into a date object.\n   * @returns The deserialized date object, either a valid date, null if the value can be\n   *     deserialized into a null date (e.g. the empty string), or an invalid date.\n   */\n  deserialize(value: any): D | null {\n    if (value == null || this.isDateInstance(value) && this.isValid(value)) {\n      return value;\n    }\n    return this.invalid();\n  }\n\n  /**\n   * Sets the locale used for all dates.\n   * @param locale The new locale.\n   */\n  setLocale(locale: any) {\n    this.locale = locale;\n    this._localeChanges.next();\n  }\n\n  /**\n   * Compares two dates.\n   * @param first The first date to compare.\n   * @param second The second date to compare.\n   * @returns 0 if the dates are equal, a number less than 0 if the first date is earlier,\n   *     a number greater than 0 if the first date is later.\n   */\n  compareDate(first: D, second: D): number {\n    return this.getYear(first) - this.getYear(second) ||\n        this.getMonth(first) - this.getMonth(second) ||\n        this.getDate(first) - this.getDate(second);\n  }\n\n  /**\n   * Checks if two dates are equal.\n   * @param first The first date to check.\n   * @param second The second date to check.\n   * @returns Whether the two dates are equal.\n   *     Null dates are considered equal to other null dates.\n   */\n  sameDate(first: D | null, second: D | null): boolean {\n    if (first && second) {\n      let firstValid = this.isValid(first);\n      let secondValid = this.isValid(second);\n      if (firstValid && secondValid) {\n        return !this.compareDate(first, second);\n      }\n      return firstValid == secondValid;\n    }\n    return first == second;\n  }\n\n  /**\n   * Clamp the given date between min and max dates.\n   * @param date The date to clamp.\n   * @param min The minimum value to allow. If null or omitted no min is enforced.\n   * @param max The maximum value to allow. If null or omitted no max is enforced.\n   * @returns `min` if `date` is less than `min`, `max` if date is greater than `max`,\n   *     otherwise `date`.\n   */\n  clampDate(date: D, min?: D | null, max?: D | null): D {\n    if (min && this.compareDate(date, min) < 0) {\n      return min;\n    }\n    if (max && this.compareDate(date, max) > 0) {\n      return max;\n    }\n    return date;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Platform} from '@angular/cdk/platform';\nimport {Inject, Injectable, Optional} from '@angular/core';\nimport {DateAdapter, MAT_DATE_LOCALE} from './date-adapter';\n\n// TODO(mmalerba): Remove when we no longer support safari 9.\n/** Whether the browser supports the Intl API. */\nconst SUPPORTS_INTL_API = typeof Intl != 'undefined';\n\n\n/** The default month names to use if Intl API is not available. */\nconst DEFAULT_MONTH_NAMES = {\n  'long': [\n    'January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September',\n    'October', 'November', 'December'\n  ],\n  'short': ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'],\n  'narrow': ['J', 'F', 'M', 'A', 'M', 'J', 'J', 'A', 'S', 'O', 'N', 'D']\n};\n\n\n/** The default date names to use if Intl API is not available. */\nconst DEFAULT_DATE_NAMES = range(31, i => String(i + 1));\n\n\n/** The default day of the week names to use if Intl API is not available. */\nconst DEFAULT_DAY_OF_WEEK_NAMES = {\n  'long': ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'],\n  'short': ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'],\n  'narrow': ['S', 'M', 'T', 'W', 'T', 'F', 'S']\n};\n\n\n/**\n * Matches strings that have the form of a valid RFC 3339 string\n * (https://tools.ietf.org/html/rfc3339). Note that the string may not actually be a valid date\n * because the regex will match strings an with out of bounds month, date, etc.\n */\nconst ISO_8601_REGEX =\n    /^\\d{4}-\\d{2}-\\d{2}(?:T\\d{2}:\\d{2}:\\d{2}(?:\\.\\d+)?(?:Z|(?:(?:\\+|-)\\d{2}:\\d{2}))?)?$/;\n\n\n/** Creates an array and fills it with values. */\nfunction range<T>(length: number, valueFunction: (index: number) => T): T[] {\n  const valuesArray = Array(length);\n  for (let i = 0; i < length; i++) {\n    valuesArray[i] = valueFunction(i);\n  }\n  return valuesArray;\n}\n\n/** Adapts the native JS Date for use with cdk-based components that work with dates. */\n@Injectable()\nexport class NativeDateAdapter extends DateAdapter<Date> {\n  /** Whether to clamp the date between 1 and 9999 to avoid IE and Edge errors. */\n  private readonly _clampDate: boolean;\n\n  /**\n   * Whether to use `timeZone: 'utc'` with `Intl.DateTimeFormat` when formatting dates.\n   * Without this `Intl.DateTimeFormat` sometimes chooses the wrong timeZone, which can throw off\n   * the result. (e.g. in the en-US locale `new Date(1800, 7, 14).toLocaleDateString()`\n   * will produce `'8/13/1800'`.\n   *\n   * TODO(mmalerba): drop this variable. It's not being used in the code right now. We're now\n   * getting the string representation of a Date object from it's utc representation. We're keeping\n   * it here for sometime, just for precaution, in case we decide to revert some of these changes\n   * though.\n   */\n  useUtcForDisplay: boolean = true;\n\n  constructor(@Optional() @Inject(MAT_DATE_LOCALE) matDateLocale: string, platform: Platform) {\n    super();\n    super.setLocale(matDateLocale);\n\n    // IE does its own time zone correction, so we disable this on IE.\n    this.useUtcForDisplay = !platform.TRIDENT;\n    this._clampDate = platform.TRIDENT || platform.EDGE;\n  }\n\n  getYear(date: Date): number {\n    return date.getFullYear();\n  }\n\n  getMonth(date: Date): number {\n    return date.getMonth();\n  }\n\n  getDate(date: Date): number {\n    return date.getDate();\n  }\n\n  getDayOfWeek(date: Date): number {\n    return date.getDay();\n  }\n\n  getMonthNames(style: 'long' | 'short' | 'narrow'): string[] {\n    if (SUPPORTS_INTL_API) {\n      const dtf = new Intl.DateTimeFormat(this.locale, {month: style, timeZone: 'utc'});\n      return range(12, i =>\n          this._stripDirectionalityCharacters(this._format(dtf, new Date(2017, i, 1))));\n    }\n    return DEFAULT_MONTH_NAMES[style];\n  }\n\n  getDateNames(): string[] {\n    if (SUPPORTS_INTL_API) {\n      const dtf = new Intl.DateTimeFormat(this.locale, {day: 'numeric', timeZone: 'utc'});\n      return range(31, i => this._stripDirectionalityCharacters(\n          this._format(dtf, new Date(2017, 0, i + 1))));\n    }\n    return DEFAULT_DATE_NAMES;\n  }\n\n  getDayOfWeekNames(style: 'long' | 'short' | 'narrow'): string[] {\n    if (SUPPORTS_INTL_API) {\n      const dtf = new Intl.DateTimeFormat(this.locale, {weekday: style, timeZone: 'utc'});\n      return range(7, i => this._stripDirectionalityCharacters(\n          this._format(dtf, new Date(2017, 0, i + 1))));\n    }\n    return DEFAULT_DAY_OF_WEEK_NAMES[style];\n  }\n\n  getYearName(date: Date): string {\n    if (SUPPORTS_INTL_API) {\n      const dtf = new Intl.DateTimeFormat(this.locale, {year: 'numeric', timeZone: 'utc'});\n      return this._stripDirectionalityCharacters(this._format(dtf, date));\n    }\n    return String(this.getYear(date));\n  }\n\n  getFirstDayOfWeek(): number {\n    // We can't tell using native JS Date what the first day of the week is, we default to Sunday.\n    return 0;\n  }\n\n  getNumDaysInMonth(date: Date): number {\n    return this.getDate(this._createDateWithOverflow(\n        this.getYear(date), this.getMonth(date) + 1, 0));\n  }\n\n  clone(date: Date): Date {\n    return this.createDate(this.getYear(date), this.getMonth(date), this.getDate(date));\n  }\n\n  createDate(year: number, month: number, date: number): Date {\n    // Check for invalid month and date (except upper bound on date which we have to check after\n    // creating the Date).\n    if (month < 0 || month > 11) {\n      throw Error(`Invalid month index \"${month}\". Month index has to be between 0 and 11.`);\n    }\n\n    if (date < 1) {\n      throw Error(`Invalid date \"${date}\". Date has to be greater than 0.`);\n    }\n\n    let result = this._createDateWithOverflow(year, month, date);\n    // Check that the date wasn't above the upper bound for the month, causing the month to overflow\n    if (result.getMonth() != month) {\n      throw Error(`Invalid date \"${date}\" for month with index \"${month}\".`);\n    }\n\n    return result;\n  }\n\n  today(): Date {\n    return new Date();\n  }\n\n  parse(value: any): Date | null {\n    // We have no way using the native JS Date to set the parse format or locale, so we ignore these\n    // parameters.\n    if (typeof value == 'number') {\n      return new Date(value);\n    }\n    return value ? new Date(Date.parse(value)) : null;\n  }\n\n  format(date: Date, displayFormat: Object): string {\n    if (!this.isValid(date)) {\n      throw Error('NativeDateAdapter: Cannot format invalid date.');\n    }\n\n    if (SUPPORTS_INTL_API) {\n      // On IE and Edge the i18n API will throw a hard error that can crash the entire app\n      // if we attempt to format a date whose year is less than 1 or greater than 9999.\n      if (this._clampDate && (date.getFullYear() < 1 || date.getFullYear() > 9999)) {\n        date = this.clone(date);\n        date.setFullYear(Math.max(1, Math.min(9999, date.getFullYear())));\n      }\n\n      displayFormat = {...displayFormat, timeZone: 'utc'};\n\n      const dtf = new Intl.DateTimeFormat(this.locale, displayFormat);\n      return this._stripDirectionalityCharacters(this._format(dtf, date));\n    }\n    return this._stripDirectionalityCharacters(date.toDateString());\n  }\n\n  addCalendarYears(date: Date, years: number): Date {\n    return this.addCalendarMonths(date, years * 12);\n  }\n\n  addCalendarMonths(date: Date, months: number): Date {\n    let newDate = this._createDateWithOverflow(\n        this.getYear(date), this.getMonth(date) + months, this.getDate(date));\n\n    // It's possible to wind up in the wrong month if the original month has more days than the new\n    // month. In this case we want to go to the last day of the desired month.\n    // Note: the additional + 12 % 12 ensures we end up with a positive number, since JS % doesn't\n    // guarantee this.\n    if (this.getMonth(newDate) != ((this.getMonth(date) + months) % 12 + 12) % 12) {\n      newDate = this._createDateWithOverflow(this.getYear(newDate), this.getMonth(newDate), 0);\n    }\n\n    return newDate;\n  }\n\n  addCalendarDays(date: Date, days: number): Date {\n    return this._createDateWithOverflow(\n        this.getYear(date), this.getMonth(date), this.getDate(date) + days);\n  }\n\n  toIso8601(date: Date): string {\n    return [\n      date.getUTCFullYear(),\n      this._2digit(date.getUTCMonth() + 1),\n      this._2digit(date.getUTCDate())\n    ].join('-');\n  }\n\n  /**\n   * Returns the given value if given a valid Date or null. Deserializes valid ISO 8601 strings\n   * (https://www.ietf.org/rfc/rfc3339.txt) into valid Dates and empty string into null. Returns an\n   * invalid date for all other values.\n   */\n  deserialize(value: any): Date | null {\n    if (typeof value === 'string') {\n      if (!value) {\n        return null;\n      }\n      // The `Date` constructor accepts formats other than ISO 8601, so we need to make sure the\n      // string is the right format first.\n      if (ISO_8601_REGEX.test(value)) {\n        let date = new Date(value);\n        if (this.isValid(date)) {\n          return date;\n        }\n      }\n    }\n    return super.deserialize(value);\n  }\n\n  isDateInstance(obj: any) {\n    return obj instanceof Date;\n  }\n\n  isValid(date: Date) {\n    return !isNaN(date.getTime());\n  }\n\n  invalid(): Date {\n    return new Date(NaN);\n  }\n\n  /** Creates a date but allows the month and date to overflow. */\n  private _createDateWithOverflow(year: number, month: number, date: number) {\n    const result = new Date(year, month, date);\n\n    // We need to correct for the fact that JS native Date treats years in range [0, 99] as\n    // abbreviations for 19xx.\n    if (year >= 0 && year < 100) {\n      result.setFullYear(this.getYear(result) - 1900);\n    }\n    return result;\n  }\n\n  /**\n   * Pads a number to make it two digits.\n   * @param n The number to pad.\n   * @returns The padded number.\n   */\n  private _2digit(n: number) {\n    return ('00' + n).slice(-2);\n  }\n\n  /**\n   * Strip out unicode LTR and RTL characters. Edge and IE insert these into formatted dates while\n   * other browsers do not. We remove them to make output consistent and because they interfere with\n   * date parsing.\n   * @param str The string to strip direction characters from.\n   * @returns The stripped string.\n   */\n  private _stripDirectionalityCharacters(str: string) {\n    return str.replace(/[\\u200e\\u200f]/g, '');\n  }\n\n  /**\n   * When converting Date object to string, javascript built-in functions may return wrong\n   * results because it applies its internal DST rules. The DST rules around the world change\n   * very frequently, and the current valid rule is not always valid in previous years though.\n   * We work around this problem building a new Date object which has its internal UTC\n   * representation with the local date and time.\n   * @param dtf Intl.DateTimeFormat object, containg the desired string format. It must have\n   *    timeZone set to 'utc' to work fine.\n   * @param date Date from which we want to get the string representation according to dtf\n   * @returns A Date object with its UTC representation based on the passed in date info\n   */\n  private _format(dtf: Intl.DateTimeFormat, date: Date) {\n    const d = new Date(Date.UTC(\n        date.getFullYear(), date.getMonth(), date.getDate(), date.getHours(),\n        date.getMinutes(), date.getSeconds(), date.getMilliseconds()));\n    return dtf.format(d);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {ElementRef, NgZone} from '@angular/core';\nimport {Platform, supportsPassiveEventListeners} from '@angular/cdk/platform';\nimport {RippleRef, RippleState} from './ripple-ref';\n\nexport type RippleConfig = {\n  color?: string;\n  centered?: boolean;\n  radius?: number;\n  persistent?: boolean;\n  animation?: RippleAnimationConfig;\n  terminateOnPointerUp?: boolean;\n  /**\n   * @deprecated Use the `animation` property instead.\n   * @deletion-target 7.0.0\n   */\n  speedFactor?: number;\n};\n\n/**\n * Interface that describes the configuration for the animation of a ripple.\n * There are two animation phases with different durations for the ripples.\n */\nexport interface RippleAnimationConfig {\n  /** Duration in milliseconds for the enter animation (expansion from point of contact). */\n  enterDuration?: number;\n  /** Duration in milliseconds for the exit animation (fade-out). */\n  exitDuration?: number;\n}\n\n/**\n * Interface that describes the target for launching ripples.\n * It defines the ripple configuration and disabled state for interaction ripples.\n * @docs-private\n */\nexport interface RippleTarget {\n  /** Configuration for ripples that are launched on pointer down. */\n  rippleConfig: RippleConfig;\n  /** Whether ripples on pointer down should be disabled. */\n  rippleDisabled: boolean;\n}\n\n/**\n * Default ripple animation configuration for ripples without an explicit\n * animation config specified.\n */\nexport const defaultRippleAnimationConfig = {\n  enterDuration: 450,\n  exitDuration: 400\n};\n\n/**\n * Timeout for ignoring mouse events. Mouse events will be temporary ignored after touch\n * events to avoid synthetic mouse events.\n */\nconst ignoreMouseEventsTimeout = 800;\n\n/**\n * Helper service that performs DOM manipulations. Not intended to be used outside this module.\n * The constructor takes a reference to the ripple directive's host element and a map of DOM\n * event handlers to be installed on the element that triggers ripple animations.\n * This will eventually become a custom renderer once Angular support exists.\n * @docs-private\n */\nexport class RippleRenderer {\n  /** Element where the ripples are being added to. */\n  private _containerElement: HTMLElement;\n\n  /** Element which triggers the ripple elements on mouse events. */\n  private _triggerElement: HTMLElement | null;\n\n  /** Whether the pointer is currently down or not. */\n  private _isPointerDown = false;\n\n  /** Events to be registered on the trigger element. */\n  private _triggerEvents = new Map<string, any>();\n\n  /** Set of currently active ripple references. */\n  private _activeRipples = new Set<RippleRef>();\n\n  /** Latest non-persistent ripple that was triggered. */\n  private _mostRecentTransientRipple: RippleRef | null;\n\n  /** Time in milliseconds when the last touchstart event happened. */\n  private _lastTouchStartEvent: number;\n\n  /** Options that apply to all the event listeners that are bound by the renderer. */\n  private _eventOptions = supportsPassiveEventListeners() ? ({passive: true} as any) : false;\n\n  /**\n   * Cached dimensions of the ripple container. Set when the first\n   * ripple is shown and cleared once no more ripples are visible.\n   */\n  private _containerRect: ClientRect | null;\n\n  constructor(private _target: RippleTarget,\n              private _ngZone: NgZone,\n              elementRef: ElementRef,\n              platform: Platform) {\n\n    // Only do anything if we're on the browser.\n    if (platform.isBrowser) {\n      this._containerElement = elementRef.nativeElement;\n\n      // Specify events which need to be registered on the trigger.\n      this._triggerEvents.set('mousedown', this.onMousedown);\n      this._triggerEvents.set('mouseup', this.onPointerUp);\n      this._triggerEvents.set('mouseleave', this.onPointerUp);\n\n      this._triggerEvents.set('touchstart', this.onTouchStart);\n      this._triggerEvents.set('touchend', this.onPointerUp);\n    }\n  }\n\n  /**\n   * Fades in a ripple at the given coordinates.\n   * @param x Coordinate within the element, along the X axis at which to start the ripple.\n   * @param y Coordinate within the element, along the Y axis at which to start the ripple.\n   * @param config Extra ripple options.\n   */\n  fadeInRipple(x: number, y: number, config: RippleConfig = {}): RippleRef {\n    const containerRect = this._containerRect =\n                          this._containerRect || this._containerElement.getBoundingClientRect();\n    const animationConfig = {...defaultRippleAnimationConfig, ...config.animation};\n\n    if (config.centered) {\n      x = containerRect.left + containerRect.width / 2;\n      y = containerRect.top + containerRect.height / 2;\n    }\n\n    const radius = config.radius || distanceToFurthestCorner(x, y, containerRect);\n    const offsetX = x - containerRect.left;\n    const offsetY = y - containerRect.top;\n    const duration = animationConfig.enterDuration / (config.speedFactor || 1);\n\n    const ripple = document.createElement('div');\n    ripple.classList.add('mat-ripple-element');\n\n    ripple.style.left = `${offsetX - radius}px`;\n    ripple.style.top = `${offsetY - radius}px`;\n    ripple.style.height = `${radius * 2}px`;\n    ripple.style.width = `${radius * 2}px`;\n\n    // If the color is not set, the default CSS color will be used.\n    ripple.style.backgroundColor = config.color || null;\n    ripple.style.transitionDuration = `${duration}ms`;\n\n    this._containerElement.appendChild(ripple);\n\n    // By default the browser does not recalculate the styles of dynamically created\n    // ripple elements. This is critical because then the `scale` would not animate properly.\n    enforceStyleRecalculation(ripple);\n\n    ripple.style.transform = 'scale(1)';\n\n    // Exposed reference to the ripple that will be returned.\n    const rippleRef = new RippleRef(this, ripple, config);\n\n    rippleRef.state = RippleState.FADING_IN;\n\n    // Add the ripple reference to the list of all active ripples.\n    this._activeRipples.add(rippleRef);\n\n    if (!config.persistent) {\n      this._mostRecentTransientRipple = rippleRef;\n    }\n\n    // Wait for the ripple element to be completely faded in.\n    // Once it's faded in, the ripple can be hidden immediately if the mouse is released.\n    this.runTimeoutOutsideZone(() => {\n      const isMostRecentTransientRipple = rippleRef === this._mostRecentTransientRipple;\n\n      rippleRef.state = RippleState.VISIBLE;\n\n      // When the timer runs out while the user has kept their pointer down, we want to\n      // keep only the persistent ripples and the latest transient ripple. We do this,\n      // because we don't want stacked transient ripples to appear after their enter\n      // animation has finished.\n      if (!config.persistent && (!isMostRecentTransientRipple || !this._isPointerDown)) {\n        rippleRef.fadeOut();\n      }\n    }, duration);\n\n    return rippleRef;\n  }\n\n  /** Fades out a ripple reference. */\n  fadeOutRipple(rippleRef: RippleRef) {\n    const wasActive = this._activeRipples.delete(rippleRef);\n\n    if (rippleRef === this._mostRecentTransientRipple) {\n      this._mostRecentTransientRipple = null;\n    }\n\n    // Clear out the cached bounding rect if we have no more ripples.\n    if (!this._activeRipples.size) {\n      this._containerRect = null;\n    }\n\n    // For ripples that are not active anymore, don't re-un the fade-out animation.\n    if (!wasActive) {\n      return;\n    }\n\n    const rippleEl = rippleRef.element;\n    const animationConfig = {...defaultRippleAnimationConfig, ...rippleRef.config.animation};\n\n    rippleEl.style.transitionDuration = `${animationConfig.exitDuration}ms`;\n    rippleEl.style.opacity = '0';\n    rippleRef.state = RippleState.FADING_OUT;\n\n    // Once the ripple faded out, the ripple can be safely removed from the DOM.\n    this.runTimeoutOutsideZone(() => {\n      rippleRef.state = RippleState.HIDDEN;\n      rippleEl.parentNode!.removeChild(rippleEl);\n    }, animationConfig.exitDuration);\n  }\n\n  /** Fades out all currently active ripples. */\n  fadeOutAll() {\n    this._activeRipples.forEach(ripple => ripple.fadeOut());\n  }\n\n  /** Sets up the trigger event listeners */\n  setupTriggerEvents(element: HTMLElement) {\n    if (!element || element === this._triggerElement) {\n      return;\n    }\n\n    // Remove all previously registered event listeners from the trigger element.\n    this._removeTriggerEvents();\n\n    this._ngZone.runOutsideAngular(() => {\n      this._triggerEvents.forEach((fn, type) =>\n          element.addEventListener(type, fn, this._eventOptions));\n    });\n\n    this._triggerElement = element;\n  }\n\n  /** Function being called whenever the trigger is being pressed using mouse. */\n  private onMousedown = (event: MouseEvent) => {\n    const isSyntheticEvent = this._lastTouchStartEvent &&\n        Date.now() < this._lastTouchStartEvent + ignoreMouseEventsTimeout;\n\n    if (!this._target.rippleDisabled && !isSyntheticEvent) {\n      this._isPointerDown = true;\n      this.fadeInRipple(event.clientX, event.clientY, this._target.rippleConfig);\n    }\n  }\n\n  /** Function being called whenever the trigger is being pressed using touch. */\n  private onTouchStart = (event: TouchEvent) => {\n    if (!this._target.rippleDisabled) {\n      // Some browsers fire mouse events after a `touchstart` event. Those synthetic mouse\n      // events will launch a second ripple if we don't ignore mouse events for a specific\n      // time after a touchstart event.\n      this._lastTouchStartEvent = Date.now();\n      this._isPointerDown = true;\n\n      this.fadeInRipple(\n          event.touches[0].clientX, event.touches[0].clientY, this._target.rippleConfig);\n    }\n  }\n\n  /** Function being called whenever the trigger is being released. */\n  private onPointerUp = () => {\n    if (!this._isPointerDown) {\n      return;\n    }\n\n    this._isPointerDown = false;\n\n    // Fade-out all ripples that are visible and not persistent.\n    this._activeRipples.forEach(ripple => {\n      // By default, only ripples that are completely visible will fade out on pointer release.\n      // If the `terminateOnPointerUp` option is set, ripples that still fade in will also fade out.\n      const isVisible = ripple.state === RippleState.VISIBLE ||\n        ripple.config.terminateOnPointerUp && ripple.state === RippleState.FADING_IN;\n\n      if (!ripple.config.persistent && isVisible) {\n        ripple.fadeOut();\n      }\n    });\n  }\n\n  /** Runs a timeout outside of the Angular zone to avoid triggering the change detection. */\n  private runTimeoutOutsideZone(fn: Function, delay = 0) {\n    this._ngZone.runOutsideAngular(() => setTimeout(fn, delay));\n  }\n\n  /** Removes previously registered event listeners from the trigger element. */\n  _removeTriggerEvents() {\n    if (this._triggerElement) {\n      this._triggerEvents.forEach((fn, type) => {\n        this._triggerElement!.removeEventListener(type, fn, this._eventOptions);\n      });\n    }\n  }\n}\n\n/** Enforces a style recalculation of a DOM element by computing its styles. */\nfunction enforceStyleRecalculation(element: HTMLElement) {\n  // Enforce a style recalculation by calling `getComputedStyle` and accessing any property.\n  // Calling `getPropertyValue` is important to let optimizers know that this is not a noop.\n  // See: https://gist.github.com/paulirish/5d52fb081b3570c81e3a\n  window.getComputedStyle(element).getPropertyValue('opacity');\n}\n\n/**\n * Returns the distance from the point (x, y) to the furthest corner of a rectangle.\n */\nfunction distanceToFurthestCorner(x: number, y: number, rect: ClientRect) {\n  const distX = Math.max(Math.abs(x - rect.left), Math.abs(x - rect.right));\n  const distY = Math.max(Math.abs(y - rect.top), Math.abs(y - rect.bottom));\n  return Math.sqrt(distX * distX + distY * distY);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** @docs-private */\nexport function getMatFormFieldPlaceholderConflictError(): Error {\n  return Error('Placeholder attribute and child element were both specified.');\n}\n\n/** @docs-private */\nexport function getMatFormFieldDuplicatedHintError(align: string): Error {\n  return Error(`A hint was already declared for 'align=\"${align}\"'.`);\n}\n\n/** @docs-private */\nexport function getMatFormFieldMissingControlError(): Error {\n  return Error('mat-form-field must contain a MatFormFieldControl.');\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** @docs-private */\nexport function getMatInputUnsupportedTypeError(type: string): Error {\n  return Error(`Input type \"${type}\" isn't supported by matInput.`);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** @docs-private */\nexport function createMissingDateImplError(provider: string) {\n  return Error(\n      `MatDatepicker: No provider found for ${provider}. You must import one of the following ` +\n      `modules at your application root: MatNativeDateModule, MatMomentDateModule, or provide a ` +\n      `custom implementation.`);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Converts values into strings. Falsy values become empty strings.\n * @docs-private\n */\nexport function coerceToString(value: string | number): string {\n  return `${value || ''}`;\n}\n\n/**\n * Converts a value that might be a string into a number.\n * @docs-private\n */\nexport function coerceToNumber(value: string | number): number {\n  return typeof value === 'string' ? parseInt(value, 10) : value;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Throws an exception for the case when menu trigger doesn't have a valid mat-menu instance\n * @docs-private\n */\nexport function throwMatMenuMissingError() {\n  throw Error(`mat-menu-trigger: must pass in an mat-menu instance.\n\n    Example:\n      <mat-menu #menu=\"matMenu\"></mat-menu>\n      <button [matMenuTriggerFor]=\"menu\"></button>`);\n}\n\n/**\n * Throws an exception for the case when menu's x-position value isn't valid.\n * In other words, it doesn't match 'before' or 'after'.\n * @docs-private\n */\nexport function throwMatMenuInvalidPositionX() {\n  throw Error(`x-position value must be either 'before' or after'.\n      Example: <mat-menu x-position=\"before\" #menu=\"matMenu\"></mat-menu>`);\n}\n\n/**\n * Throws an exception for the case when menu's y-position value isn't valid.\n * In other words, it doesn't match 'above' or 'below'.\n * @docs-private\n */\nexport function throwMatMenuInvalidPositionY() {\n  throw Error(`y-position value must be either 'above' or below'.\n      Example: <mat-menu y-position=\"above\" #menu=\"matMenu\"></mat-menu>`);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Returns an exception to be thrown when attempting to change a select's `multiple` option\n * after initialization.\n * @docs-private\n */\nexport function getMatSelectDynamicMultipleError(): Error {\n  return Error('Cannot change `multiple` mode of select after initialization.');\n}\n\n/**\n * Returns an exception to be thrown when attempting to assign a non-array value to a select\n * in `multiple` mode. Note that `undefined` and `null` are still valid values to allow for\n * resetting the value.\n * @docs-private\n */\nexport function getMatSelectNonArrayValueError(): Error {\n  return Error('Value must be an array in multiple-selection mode.');\n}\n\n/**\n * Returns an exception to be thrown when assigning a non-function value to the comparator\n * used to determine if a value corresponds to an option. Note that whether the function\n * actually takes two values and returns a boolean is not checked.\n */\nexport function getMatSelectNonFunctionValueError(): Error {\n  return Error('`compareWith` must be a function.');\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** @docs-private */\nexport function getSortDuplicateSortableIdError(id: string): Error {\n  return Error(`Cannot have two MatSortables with the same id (${id}).`);\n}\n\n/** @docs-private */\nexport function getSortHeaderNotContainedWithinSortError(): Error {\n  return Error(`MatSortHeader must be placed within a parent element with the MatSort directive.`);\n}\n\n/** @docs-private */\nexport function getSortHeaderMissingIdError(): Error {\n  return Error(`MatSortHeader must be provided with a unique id.`);\n}\n\n/** @docs-private */\nexport function getSortInvalidDirectionError(direction: string): Error {\n  return Error(`${direction} is not a valid sort direction ('asc' or 'desc').`);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** @docs-private */\nexport class AnimationCurves {\n  static STANDARD_CURVE = 'cubic-bezier(0.4,0.0,0.2,1)';\n  static DECELERATION_CURVE = 'cubic-bezier(0.0,0.0,0.2,1)';\n  static ACCELERATION_CURVE = 'cubic-bezier(0.4,0.0,1,1)';\n  static SHARP_CURVE = 'cubic-bezier(0.4,0.0,0.6,1)';\n}\n\n\n/** @docs-private */\nexport class AnimationDurations {\n  static COMPLEX = '375ms';\n  static ENTERING = '225ms';\n  static EXITING = '195ms';\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {InjectionToken} from '@angular/core';\n\n\nexport type MatDateFormats = {\n  parse: {\n    dateInput: any\n  },\n  display: {\n    dateInput: any,\n    monthYearLabel: any,\n    dateA11yLabel: any,\n    monthYearA11yLabel: any,\n  }\n};\n\n\nexport const MAT_DATE_FORMATS = new InjectionToken<MatDateFormats>('mat-date-formats');\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {MatDateFormats} from './date-formats';\n\n\nexport const MAT_NATIVE_DATE_FORMATS: MatDateFormats = {\n  parse: {\n    dateInput: null,\n  },\n  display: {\n    dateInput: {year: 'numeric', month: 'numeric', day: 'numeric'},\n    monthYearLabel: {year: 'numeric', month: 'short'},\n    dateA11yLabel: {year: 'numeric', month: 'long', day: 'numeric'},\n    monthYearA11yLabel: {year: 'numeric', month: 'long'},\n  }\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {PlatformModule} from '@angular/cdk/platform';\nimport {NgModule} from '@angular/core';\nimport {DateAdapter} from './date-adapter';\nimport {MAT_DATE_FORMATS} from './date-formats';\nimport {NativeDateAdapter} from './native-date-adapter';\nimport {MAT_NATIVE_DATE_FORMATS} from './native-date-formats';\n\nexport * from './date-adapter';\nexport * from './date-formats';\nexport * from './native-date-adapter';\nexport * from './native-date-formats';\n\n\n@NgModule({\n  imports: [PlatformModule],\n  providers: [\n    {provide: DateAdapter, useClass: NativeDateAdapter},\n  ],\n})\nexport class NativeDateModule {}\n\n\n@NgModule({\n  imports: [NativeDateModule],\n  providers: [{provide: MAT_DATE_FORMATS, useValue: MAT_NATIVE_DATE_FORMATS}],\n})\nexport class MatNativeDateModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable} from '@angular/core';\nimport {FormGroupDirective, NgForm, FormControl} from '@angular/forms';\n\n/** Error state matcher that matches when a control is invalid and dirty. */\n@Injectable()\nexport class ShowOnDirtyErrorStateMatcher implements ErrorStateMatcher {\n  isErrorState(control: FormControl | null, form: FormGroupDirective | NgForm | null): boolean {\n    return !!(control && control.invalid && (control.dirty || (form && form.submitted)));\n  }\n}\n\n/** Provider that defines how form controls behave with regards to displaying error messages. */\n@Injectable({providedIn: 'root'})\nexport class ErrorStateMatcher {\n  isErrorState(control: FormControl | null, form: FormGroupDirective | NgForm | null): boolean {\n    return !!(control && control.invalid && (control.touched || (form && form.submitted)));\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable, InjectionToken, Inject, Optional} from '@angular/core';\nimport {HammerGestureConfig} from '@angular/platform-browser';\nimport {MatCommonModule} from '../common-behaviors/common-module';\nimport {\n  HammerStatic,\n  HammerInstance,\n  Recognizer,\n  RecognizerStatic,\n  HammerOptions,\n} from './gesture-annotations';\n\n/**\n * Injection token that can be used to provide options to the Hammerjs instance.\n * More info at http://hammerjs.github.io/api/.\n */\nexport const MAT_HAMMER_OPTIONS = new InjectionToken<HammerOptions>('MAT_HAMMER_OPTIONS');\n\nconst ANGULAR_MATERIAL_SUPPORTED_HAMMER_GESTURES = [\n  'longpress',\n  'slide',\n  'slidestart',\n  'slideend',\n  'slideright',\n  'slideleft'\n];\n\n/**\n * Fake HammerInstance that is used when a Hammer instance is requested when HammerJS has not\n * been loaded on the page.\n */\nconst noopHammerInstance: HammerInstance = {\n  on: () => {},\n  off: () => {},\n};\n\n/** Adjusts configuration of our gesture library, Hammer. */\n@Injectable()\nexport class GestureConfig extends HammerGestureConfig {\n  /** List of new event names to add to the gesture support list */\n  events = ANGULAR_MATERIAL_SUPPORTED_HAMMER_GESTURES;\n\n  constructor(\n    @Optional() @Inject(MAT_HAMMER_OPTIONS) private _hammerOptions?: HammerOptions,\n    @Optional() commonModule?: MatCommonModule) {\n    super();\n    if (commonModule) {\n      commonModule._checkHammerIsAvailable();\n    }\n  }\n\n  /**\n   * Builds Hammer instance manually to add custom recognizers that match the Material Design spec.\n   *\n   * Our gesture names come from the Material Design gestures spec:\n   * https://material.io/design/#gestures-touch-mechanics\n   *\n   * More information on default recognizers can be found in Hammer docs:\n   * http://hammerjs.github.io/recognizer-pan/\n   * http://hammerjs.github.io/recognizer-press/\n   *\n   * @param element Element to which to assign the new HammerJS gestures.\n   * @returns Newly-created HammerJS instance.\n   */\n  buildHammer(element: HTMLElement): HammerInstance {\n    const hammer: HammerStatic = typeof window !== 'undefined' ? (window as any).Hammer : null;\n\n    if (!hammer) {\n      // If HammerJS is not loaded here, return the noop HammerInstance. This is necessary to\n      // ensure that omitting HammerJS completely will not cause any errors while *also* supporting\n      // the lazy-loading of HammerJS via the HAMMER_LOADER token introduced in Angular 6.1.\n      // Because we can't depend on HAMMER_LOADER's existance until 7.0, we have to always set\n      // `this.events` to the set we support, instead of conditionally setting it to `[]` if\n      // `HAMMER_LOADER` is present (and then throwing an Error here if `window.Hammer` is\n      // undefined).\n      // @deletion-target 7.0.0\n      return noopHammerInstance;\n    }\n\n    const mc = new hammer(element, this._hammerOptions || undefined);\n\n    // Default Hammer Recognizers.\n    const pan = new hammer.Pan();\n    const swipe = new hammer.Swipe();\n    const press = new hammer.Press();\n\n    // Notice that a HammerJS recognizer can only depend on one other recognizer once.\n    // Otherwise the previous `recognizeWith` will be dropped.\n    // TODO: Confirm threshold numbers with Material Design UX Team\n    const slide = this._createRecognizer(pan, {event: 'slide', threshold: 0}, swipe);\n    const longpress = this._createRecognizer(press, {event: 'longpress', time: 500});\n\n    // Overwrite the default `pan` event to use the swipe event.\n    pan.recognizeWith(swipe);\n\n    // Add customized gestures to Hammer manager\n    mc.add([swipe, press, pan, slide, longpress]);\n\n    return mc as HammerInstance;\n  }\n\n  /** Creates a new recognizer, without affecting the default recognizers of HammerJS */\n  private _createRecognizer(base: Recognizer, options: any, ...inheritances: Recognizer[]) {\n    let recognizer = new (base.constructor as RecognizerStatic)(options);\n\n    inheritances.push(base);\n    inheritances.forEach(item => recognizer.recognizeWith(item));\n\n    return recognizer;\n  }\n\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  NgModule,\n  Directive,\n  ElementRef,\n  QueryList,\n} from '@angular/core';\nimport {MatCommonModule} from '../common-behaviors/common-module';\n\n\n/**\n * Shared directive to count lines inside a text area, such as a list item.\n * Line elements can be extracted with a @ContentChildren(MatLine) query, then\n * counted by checking the query list's length.\n */\n@Directive({\n  selector: '[mat-line], [matLine]',\n  host: {'class': 'mat-line'}\n})\nexport class MatLine {}\n\n/**\n * Helper that takes a query list of lines and sets the correct class on the host.\n * @docs-private\n */\nexport class MatLineSetter {\n  constructor(private _lines: QueryList<MatLine>, private _element: ElementRef) {\n    this._setLineClass(this._lines.length);\n\n    this._lines.changes.subscribe(() => {\n      this._setLineClass(this._lines.length);\n    });\n  }\n\n  private _setLineClass(count: number): void {\n    this._resetClasses();\n    if (count === 2 || count === 3) {\n      this._setClass(`mat-${count}-line`, true);\n    } else if (count > 3) {\n      this._setClass(`mat-multi-line`, true);\n    }\n  }\n\n  private _resetClasses(): void {\n    this._setClass('mat-2-line', false);\n    this._setClass('mat-3-line', false);\n    this._setClass('mat-multi-line', false);\n  }\n\n  private _setClass(className: string, isAdd: boolean): void {\n    if (isAdd) {\n      this._element.nativeElement.classList.add(className);\n    } else {\n      this._element.nativeElement.classList.remove(className);\n    }\n  }\n\n}\n\n@NgModule({\n  imports: [MatCommonModule],\n  exports: [MatLine, MatCommonModule],\n  declarations: [MatLine],\n})\nexport class MatLineModule { }\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {RippleConfig, RippleRenderer} from './ripple-renderer';\n\n/** Possible states for a ripple element. */\nexport enum RippleState {\n  FADING_IN, VISIBLE, FADING_OUT, HIDDEN\n}\n\n/**\n * Reference to a previously launched ripple element.\n */\nexport class RippleRef {\n\n  /** Current state of the ripple reference. */\n  state: RippleState = RippleState.HIDDEN;\n\n  constructor(\n    private _renderer: RippleRenderer,\n    public element: HTMLElement,\n    public config: RippleConfig) {\n  }\n\n  /** Fades out the ripple element. */\n  fadeOut() {\n    this._renderer.fadeOutRipple(this);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Platform} from '@angular/cdk/platform';\nimport {\n  Directive,\n  ElementRef,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  OnDestroy,\n  OnInit,\n  Optional,\n} from '@angular/core';\nimport {RippleRef} from './ripple-ref';\nimport {RippleAnimationConfig, RippleConfig, RippleRenderer, RippleTarget} from './ripple-renderer';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\n\n/** Configurable options for `matRipple`. */\nexport interface RippleGlobalOptions {\n  /**\n   * Whether ripples should be disabled. Ripples can be still launched manually by using\n   * the `launch()` method. Therefore focus indicators will still show up.\n   */\n  disabled?: boolean;\n\n  /**\n   * Configuration for the animation duration of the ripples. There are two phases with different\n   * durations for the ripples. The animation durations will be overwritten if the\n   * `NoopAnimationsModule` is being used.\n   */\n  animation?: RippleAnimationConfig;\n\n  /**\n   * If set, the default duration of the fade-in animation is divided by this value. For example,\n   * setting it to 0.5 will cause the ripple fade-in animation to take twice as long.\n   * A changed speedFactor will not affect the fade-out duration of the ripples.\n   * @deprecated Use the `animation` global option instead.\n   * @deletion-target 7.0.0\n   */\n  baseSpeedFactor?: number;\n\n  /**\n   * Whether ripples should start fading out immediately after the mouse our touch is released. By\n   * default, ripples will wait for the enter animation to complete and for mouse or touch release.\n   */\n  terminateOnPointerUp?: boolean;\n}\n\n/** Injection token that can be used to specify the global ripple options. */\nexport const MAT_RIPPLE_GLOBAL_OPTIONS =\n    new InjectionToken<RippleGlobalOptions>('mat-ripple-global-options');\n\n@Directive({\n  selector: '[mat-ripple], [matRipple]',\n  exportAs: 'matRipple',\n  host: {\n    'class': 'mat-ripple',\n    '[class.mat-ripple-unbounded]': 'unbounded'\n  }\n})\nexport class MatRipple implements OnInit, OnDestroy, RippleTarget {\n\n  /** Custom color for all ripples. */\n  @Input('matRippleColor') color: string;\n\n  /** Whether the ripples should be visible outside the component's bounds. */\n  @Input('matRippleUnbounded') unbounded: boolean;\n\n  /**\n   * Whether the ripple always originates from the center of the host element's bounds, rather\n   * than originating from the location of the click event.\n   */\n  @Input('matRippleCentered') centered: boolean;\n\n  /**\n   * If set, the radius in pixels of foreground ripples when fully expanded. If unset, the radius\n   * will be the distance from the center of the ripple to the furthest corner of the host element's\n   * bounding rectangle.\n   */\n  @Input('matRippleRadius') radius: number = 0;\n\n  /**\n   * If set, the normal duration of ripple animations is divided by this value. For example,\n   * setting it to 0.5 will cause the animations to take twice as long.\n   * A changed speedFactor will not modify the fade-out duration of the ripples.\n   * @deprecated Use the [matRippleAnimation] binding instead.\n   * @deletion-target 7.0.0\n   */\n  @Input('matRippleSpeedFactor') speedFactor: number = 1;\n\n  /**\n   * Configuration for the ripple animation. Allows modifying the enter and exit animation\n   * duration of the ripples. The animation durations will be overwritten if the\n   * `NoopAnimationsModule` is being used.\n   */\n  @Input('matRippleAnimation') animation: RippleAnimationConfig;\n\n  /**\n   * Whether click events will not trigger the ripple. Ripples can be still launched manually\n   * by using the `launch()` method.\n   */\n  @Input('matRippleDisabled')\n  get disabled() { return this._disabled; }\n  set disabled(value: boolean) {\n    this._disabled = value;\n    this._setupTriggerEventsIfEnabled();\n  }\n  private _disabled: boolean = false;\n\n  /**\n   * The element that triggers the ripple when click events are received.\n   * Defaults to the directive's host element.\n   */\n  @Input('matRippleTrigger')\n  get trigger() { return this._trigger || this._elementRef.nativeElement; }\n  set trigger(trigger: HTMLElement) {\n    this._trigger = trigger;\n    this._setupTriggerEventsIfEnabled();\n  }\n  private _trigger: HTMLElement;\n\n  /** Renderer for the ripple DOM manipulations. */\n  private _rippleRenderer: RippleRenderer;\n\n  /** Options that are set globally for all ripples. */\n  private _globalOptions: RippleGlobalOptions;\n\n  /** Whether ripple directive is initialized and the input bindings are set. */\n  private _isInitialized: boolean = false;\n\n  constructor(private _elementRef: ElementRef,\n              ngZone: NgZone,\n              platform: Platform,\n              @Optional() @Inject(MAT_RIPPLE_GLOBAL_OPTIONS) globalOptions: RippleGlobalOptions,\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) animationMode?: string) {\n\n    this._globalOptions = globalOptions || {};\n    this._rippleRenderer = new RippleRenderer(this, ngZone, _elementRef, platform);\n\n    if (animationMode === 'NoopAnimations') {\n      this._globalOptions.animation = {enterDuration: 0, exitDuration: 0};\n    }\n  }\n\n  ngOnInit() {\n    this._isInitialized = true;\n    this._setupTriggerEventsIfEnabled();\n  }\n\n  ngOnDestroy() {\n    this._rippleRenderer._removeTriggerEvents();\n  }\n\n  /** Fades out all currently showing ripple elements. */\n  fadeOutAll() {\n    this._rippleRenderer.fadeOutAll();\n  }\n\n  /** Ripple configuration from the directive's input values. */\n  get rippleConfig(): RippleConfig {\n    return {\n      centered: this.centered,\n      radius: this.radius,\n      color: this.color,\n      animation: {...this._globalOptions.animation, ...this.animation},\n      terminateOnPointerUp: this._globalOptions.terminateOnPointerUp,\n      speedFactor: this.speedFactor * (this._globalOptions.baseSpeedFactor || 1),\n    };\n  }\n\n  /** Whether ripples on pointer-down are disabled or not. */\n  get rippleDisabled(): boolean {\n    return this.disabled || !!this._globalOptions.disabled;\n  }\n\n  /** Sets up the the trigger event listeners if ripples are enabled. */\n  private _setupTriggerEventsIfEnabled() {\n    if (!this.disabled && this._isInitialized) {\n      this._rippleRenderer.setupTriggerEvents(this.trigger);\n    }\n  }\n\n  /**\n   * Launches a manual ripple using the specified ripple configuration.\n   * @param config Configuration for the manual ripple.\n   */\n  launch(config: RippleConfig): RippleRef;\n\n  /**\n   * Launches a manual ripple at the specified coordinates within the element.\n   * @param x Coordinate within the element, along the X axis at which to fade-in the ripple.\n   * @param y Coordinate within the element, along the Y axis at which to fade-in the ripple.\n   * @param config Optional ripple configuration for the manual ripple.\n   */\n  launch(x: number, y: number, config?: RippleConfig): RippleRef;\n\n  /** Launches a manual ripple at the specified coordinated or just by the ripple config. */\n  launch(configOrX: number | RippleConfig, y: number = 0, config?: RippleConfig): RippleRef {\n    if (typeof configOrX === 'number') {\n      return this._rippleRenderer.fadeInRipple(configOrX, y, {...this.rippleConfig, ...config});\n    } else {\n      return this._rippleRenderer.fadeInRipple(0, 0, {...this.rippleConfig, ...configOrX});\n    }\n  }\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {PlatformModule} from '@angular/cdk/platform';\nimport {MatCommonModule} from '../common-behaviors/common-module';\nimport {MatRipple} from './ripple';\n\nexport * from './ripple';\nexport * from './ripple-ref';\nexport * from './ripple-renderer';\n\n@NgModule({\n  imports: [MatCommonModule, PlatformModule],\n  exports: [MatRipple, MatCommonModule],\n  declarations: [MatRipple],\n})\nexport class MatRippleModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ViewEncapsulation,\n  Input,\n  ChangeDetectionStrategy,\n  Inject,\n  Optional,\n} from '@angular/core';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\n\n/**\n * Possible states for a pseudo checkbox.\n * @docs-private\n */\nexport type MatPseudoCheckboxState = 'unchecked' | 'checked' | 'indeterminate';\n\n/**\n * Component that shows a simplified checkbox without including any kind of \"real\" checkbox.\n * Meant to be used when the checkbox is purely decorative and a large number of them will be\n * included, such as for the options in a multi-select. Uses no SVGs or complex animations.\n * Note that theming is meant to be handled by the parent element, e.g.\n * `mat-primary .mat-pseudo-checkbox`.\n *\n * Note that this component will be completely invisible to screen-reader users. This is *not*\n * interchangeable with `<mat-checkbox>` and should *not* be used if the user would directly\n * interact with the checkbox. The pseudo-checkbox should only be used as an implementation detail\n * of more complex components that appropriately handle selected / checked state.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  selector: 'mat-pseudo-checkbox',\n  styleUrls: ['pseudo-checkbox.css'],\n  template: '',\n  host: {\n    'class': 'mat-pseudo-checkbox',\n    '[class.mat-pseudo-checkbox-indeterminate]': 'state === \"indeterminate\"',\n    '[class.mat-pseudo-checkbox-checked]': 'state === \"checked\"',\n    '[class.mat-pseudo-checkbox-disabled]': 'disabled',\n    '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"',\n  },\n})\nexport class MatPseudoCheckbox {\n  /** Display state of the checkbox. */\n  @Input() state: MatPseudoCheckboxState = 'unchecked';\n\n  /** Whether the checkbox is disabled. */\n  @Input() disabled: boolean = false;\n\n  constructor(@Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode?: string) { }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatPseudoCheckbox} from './pseudo-checkbox/pseudo-checkbox';\n\n\n@NgModule({\n  exports: [MatPseudoCheckbox],\n  declarations: [MatPseudoCheckbox]\n})\nexport class MatPseudoCheckboxModule { }\n\n\nexport * from './pseudo-checkbox/pseudo-checkbox';\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Component, ViewEncapsulation, Input, ChangeDetectionStrategy} from '@angular/core';\nimport {mixinDisabled, CanDisable} from '../common-behaviors/disabled';\n\n// Boilerplate for applying mixins to MatOptgroup.\n/** @docs-private */\nexport class MatOptgroupBase { }\nexport const _MatOptgroupMixinBase = mixinDisabled(MatOptgroupBase);\n\n// Counter for unique group ids.\nlet _uniqueOptgroupIdCounter = 0;\n\n/**\n * Component that is used to group instances of `mat-option`.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-optgroup',\n  exportAs: 'matOptgroup',\n  templateUrl: 'optgroup.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  inputs: ['disabled'],\n  styleUrls: ['optgroup.css'],\n  host: {\n    'class': 'mat-optgroup',\n    'role': 'group',\n    '[class.mat-optgroup-disabled]': 'disabled',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.aria-labelledby]': '_labelId',\n  }\n})\nexport class MatOptgroup extends _MatOptgroupMixinBase implements CanDisable {\n  /** Label for the option group. */\n  @Input() label: string;\n\n  /** Unique id for the underlying label. */\n  _labelId: string = `mat-optgroup-label-${_uniqueOptgroupIdCounter++}`;\n}\n"],"names":["_this","_elementRef","_tree","role","tabIndex","Number","tslib_1.__extends","MatTreeNode","_super","type","Directive","args","selector","exportAs","inputs","host","[attr.aria-expanded]","[attr.aria-level]","[attr.role]","class","providers","provide","CdkTreeNode","useExisting","ElementRef","CdkTree","undefined","decorators","Attribute","Input","_MatTreeNodeMixinBase","MatTreeNodeDef","CdkTreeNodeDef","data","MatNestedTreeNode","_differs","call","this","prototype","ngAfterContentInit","ngOnDestroy","CdkNestedTreeNode","IterableDiffers","node","nodeOutlet","ContentChildren","MatTreeNodeOutlet","_MatNestedTreeNodeMixinBase","MatTreeNodePadding","CdkTreeNodePadding","level","indent","MatTree","Component","template","styles","encapsulation","ViewEncapsulation","None","changeDetection","ChangeDetectionStrategy","OnPush","recursive","MatTreeNodeToggle","(click)","CdkTreeNodeToggle","MAT_TREE_DIRECTIVES","NgModule","imports","CdkTreeModule","CommonModule","MatCommonModule","exports","declarations","MatTreeModule","MatTreeFlattener","transformFunction","getLevel","isExpandable","getChildren","_flattenNode","resultNodes","parentMap","flatNode","push","childrenNodes","Array","isArray","_flattenChildren","pipe","take","subscribe","children","forEach","child","index","childParentMap","slice","length","flattenNodes","structuredData","expandFlattenedNodes","nodes","treeControl","results","currentExpand","expand","i","isExpanded","MatTreeFlatDataSource","treeFlattener","initialData","_flattenedData","BehaviorSubject","_expandedData","_data","Object","defineProperty","value","next","dataNodes","connect","collectionViewer","changes","viewChange","expansionModel","merge","apply","map","disconnect","DataSource","MatTreeNestedDataSource","VERSION","Version","SELECT_PANEL_PADDING_X","NgZone","Inject","_MAT_INK_BAR_POSITIONER","MatInkBar","MatTabLabel","templateRef","viewContainerRef","TemplateRef","ViewContainerRef","CdkPortal","MatTabContent","MatTabBase","_MatTabMixinBase","mixinDisabled","MatTab","_viewContainerRef","textLabel","_contentPortal","_labelChange","Subject","_disableChange","position","origin","isActive","ngOnChanges","hasOwnProperty","complete","ngOnInit","TemplatePortal","_explicitContent","_implicitContent","propDecorators","ViewChild","ariaLabel","ariaLabelledby","matTabsAnimations","translateTab","trigger","state","style","transform","transition","animate","MatTabBodyPortal","componentFactoryResolver","_host","_centeringSub","Subscription","EMPTY","_leavingSub","_beforeCentering","startWith","_isCenterPosition","_position","isCentering","hasAttached","attach","_content","_afterLeavingCenter","detach","unsubscribe","ComponentFactoryResolver","MatTabBody","forwardRef","CdkPortalOutlet","_dir","_onCentering","EventEmitter","_onCentered","_getLayoutDirection","dir","_origin","_onTranslateTabStarted","e","toState","emit","nativeElement","clientHeight","_onTranslateTabComplete","fromState","animations","Output","_portalHost","PortalHostDirective","MatTabLabelWrapperBase","_MatTabLabelWrapperMixinBase","MatTabLabelWrapper","elementRef","focus","getOffsetLeft","offsetLeft","getOffsetWidth","offsetWidth","[class.mat-tab-disabled]","MatTabHeaderBase","_MatTabHeaderMixinBase","mixinDisableRipple","MatTabHeader","_changeDetectorRef","_viewportRuler","_scrollDistance","_selectedIndexChanged","_realignInkBar","_showPaginationControls","_disableScrollAfter","_disableScrollBefore","_selectedIndex","selectFocusedIndex","indexFocused","coerceNumberProperty","_keyManager","updateActiveItemIndex","ngAfterContentChecked","_tabLabelCount","_labelWrappers","_updatePagination","markForCheck","_scrollToLabel","_checkScrollingControls","_alignInkBarToSelectedTab","_scrollDistanceChanged","_updateTabScrollPosition","_handleKeydown","event","keyCode","HOME","setFirstItemActive","preventDefault","END","setLastItemActive","ENTER","SPACE","focusIndex","onKeydown","dirChange","change","observableOf","resize","realign","FocusKeyManager","withHorizontalOrientation","requestAnimationFrame","_onContentChanges","_checkPaginationEnabled","_isValidIndex","setActiveItem","_setTabFocus","tab","toArray","disabled","containerEl","_tabListContainer","scrollLeft","scrollWidth","scrollDistance","translateX","_tabList","v","Math","max","min","_getMaxScrollDistance","_scrollHeader","scrollDir","viewLength","labelIndex","selectedLabel","labelBeforePos","labelAfterPos","beforeVisiblePos","afterVisiblePos","isEnabled","selectedLabelWrapper","selectedIndex","_inkBar","alignToElement","[class.mat-tab-header-pagination-controls-enabled]","[class.mat-tab-header-rtl]","ViewportRuler","Directionality","Optional","nextId","MatTabChangeEvent","MatTabGroupBase","_MatTabGroupMixinBase","mixinColor","MatTabGroup","_indexToSelect","_tabBodyWrapperHeight","_tabsSubscription","_tabLabelSubscription","_dynamicHeight","headerPosition","selectedIndexChange","focusChange","animationDone","selectedTabChange","_groupId","coerceBooleanProperty","_backgroundColor","classList","remove","backgroundColor","add","indexToSelect","_tabs","tabChangeEvent","_createChangeEvent","Promise","resolve","then","_subscribeToTabLabels","tabs","realignInkBar","_tabHeader","_focusChanged","concat","_getTabLabelId","_getTabContentId","_setTabBodyWrapperHeight","tabHeight","wrapper","_tabBodyWrapper","height","offsetHeight","_removeTabBodyWrapperHeight","_handleClick","tabHeader","idx","_getTabIndex","[class.mat-tab-group-dynamic-height]","[class.mat-tab-group-inverted-header]","dynamicHeight","MatTabNavBase","_MatTabNavMixinBase","MatTabNav","_ngZone","_onDestroy","updateActiveLink","element","_activeLinkChanged","runOutsideAngular","takeUntil","_alignInkBar","activeTab","_tabLinks","find","active","_activeLinkElement","show","hide","ChangeDetectorRef","MatTabLinkBase","_MatTabLinkMixinBase","mixinTabIndex","_tabNavBar","_focusMonitor","_tabLinkRipple","setupTriggerEvents","parseInt","globalOptions","_ripplesGloballyDisabled","terminateOnPointerUp","speedFactor","baseSpeedFactor","animation","monitor","get","_isActive","enumerable","configurable","stopMonitoring","MatTabLink","[attr.aria-current]","[attr.aria-disabled]","[attr.tabIndex]","[class.mat-tab-label-active]","Platform","MAT_RIPPLE_GLOBAL_OPTIONS","FocusMonitor","PortalModule","MatRippleModule","ObserversModule","A11yModule","MatTabsModule","MatToolbarBase","_MatToolbarMixinBase","MatToolbarRow","MatToolbar","_platform","document","_document","ngAfterViewInit","isDevMode","isBrowser","_checkToolbarMixedModes","_toolbarRows","childNodes","filter","contains","nodeType","COMMENT_NODE","some","textContent","trim","throwToolbarMixedModesError","[class.mat-toolbar-multiple-rows]","[class.mat-toolbar-single-row]","DOCUMENT","MatToolbarModule","viewContainer","Injectable","providedIn","MatSortHeaderIntl","MAT_SORT_HEADER_INTL_PROVIDER","deps","SkipSelf","useFactory","MAT_SORT_HEADER_INTL_PROVIDER_FACTORY","MatSortHeaderBase","_MatSortHeaderMixinBase","MatSortHeader","_intl","changeDetectorRef","_sort","_cdkColumnDef","_showIndicatorHint","_arrowDirection","_disableViewStateAnimation","arrowPosition","getSortHeaderNotContainedWithinSortError","_rerenderSubscription","sortChange","_stateChanges","_isSorted","_updateArrowDirection","_viewState","_setAnimationTransitionState","_disableClear","id","name","register","deregister","_setIndicatorHintVisible","visible","_isDisabled","viewState","sort","direction","_getArrowDirectionState","_getArrowViewState","start","_getAriaSortAttribute","(mouseenter)","(longpress)","(mouseleave)","[attr.aria-sort]","[class.mat-sort-header-disabled]","matSortAnimations","indicator","leftPointer","rightPointer","arrowOpacity","allowChildren","MatSort","CdkColumnDef","disableClear","MatSortModule","MatStepLabel","CdkStepLabel","optionalLabel","MatStepperIntl","MatStepHeader","_element","_intlSubscription","_stringLabel","label","_templateLabel","_getHostElement","_getIconContext","optional","iconOverrides","selected","matStepperAnimations","horizontalStepTransition","visibility","verticalStepTransition","MatStepperIcon","MatStep","stepper","_errorStateMatcher","isErrorState","control","form","originalErrorState","customErrorState","invalid","interacted","ErrorStateMatcher","MatStepper","arguments","icons","_icons","override","icon","_iconOverrides","_steps","_destroyed","_stateChanged","MatHorizontalStepper","aria-orientation","MatVerticalStepper","ctorParameters","MatStepperNext","[type]","CdkStepper","CdkStepperNext","MatStepperPrevious","CdkStepperPrevious","MatButtonModule","CdkStepperModule","MatIconModule","MatStepperModule","MatTable","stickyCssClass","CDK_TABLE_TEMPLATE","MatCellDef","CdkCellDef","MatHeaderCellDef","CdkHeaderCellDef","MatFooterCellDef","CdkFooterCellDef","MatColumnDef","sticky","stickyEnd","MatHeaderCell","columnDef","cssClassFriendlyName","CdkHeaderCell","MatFooterCell","CdkFooterCell","MatCell","CdkCell","MatHeaderRowDef","CdkHeaderRowDef","MatFooterRowDef","CdkFooterRowDef","MatRowDef","CdkRowDef","MatHeaderRow","CDK_ROW_TEMPLATE","CdkHeaderRow","CdkFooterRow","MatFooterRow","MatRow","CdkRow","EXPORTED_DECLARATIONS","CdkTableModule","MatTableModule","MatTableDataSource","_renderData","_filter","_renderChangesSubscription","sortingDataAccessor","sortHeaderId","_isNumberValue","sortData","a","b","valueA","valueB","comparatorResult","filterPredicate","accumulator","currentTerm","key","dataStr","keys","reduce","toLowerCase","transformedFilter","indexOf","_updateChangeSubscription","_paginator","paginator","initialized","pageChange","page","dataStream","filteredData","combineLatest","_a","_filterData","orderedData","_orderData","paginatedData","_pageData","obj","_updatePaginator","startIndex","pageIndex","pageSize","splice","filteredDataLength","lastPageIndex","ceil","InjectionToken","factory","_MAT_INK_BAR_POSITIONER_FACTORY","_inkBarPositioner","_setStyles","positions","inkBar","left","width","_focusHostElement","MatSlider","blur","_blurHostElement","_clamp","_percent","vertical","invert","percent","_isMinValue","thumbLabel","axis","scale","_invertMouseCoords","_thumbGap","_direction","_tickIntervalPercent","tickSize","backgroundSize","sign","rotate","_invertAxis","detectChanges","_dirChangeSubscription","_onMouseenter","_sliderDimensions","_getSliderDimensions","_updateTickIntervalPercent","_onClick","oldValue","_isSliding","_updateValueFromPosition","x","clientX","y","clientY","_emitInputEvent","_emitChangeEvent","_onSlide","_onSlideStart","center","_valueOnSlideStart","_onSlideEnd","_onFocus","_onBlur","onTouched","_onKeydown","PAGE_UP","_increment","PAGE_DOWN","LEFT_ARROW","UP_ARROW","RIGHT_ARROW","DOWN_ARROW","_onKeyup","numSteps","step","pos","offset","top","size","posComponent","exactValue","_calculateValue","closestValue","round","_controlValueAccessorChangeFn","valueChange","input","tickInterval","trackSize","pixelsPerStep","stepsPerTick","pixelsPerTick","MatSliderChange","source","_calculatePercentage","percentage","_sliderWrapper","getBoundingClientRect","writeValue","registerOnChange","fn","registerOnTouched","setDisabledState","isDisabled","MAT_SLIDER_VALUE_ACCESSOR","(focus)","(blur)","(keydown)","(keyup)","(slide)","(slideend)","(slidestart)","[tabIndex]","[attr.aria-valuemax]","[attr.aria-valuemin]","[attr.aria-valuenow]","[attr.aria-orientation]","[class.mat-slider-disabled]","[class.mat-slider-has-ticks]","[class.mat-slider-horizontal]","[class.mat-slider-axis-inverted]","[class.mat-slider-sliding]","[class.mat-slider-thumb-label-showing]","[class.mat-slider-vertical]","[class.mat-slider-min-value]","[class.mat-slider-hide-last-tick]","[class._mat-animation-noopable]","ANIMATION_MODULE_TYPE","displayWith","HAMMER_GESTURE_CONFIG","useClass","GestureConfig","MatSliderModule","MatSnackBarRef","containerInstance","_overlayRef","_afterDismissed","_afterOpened","_onAction","_dismissedByAction","onAction","dismiss","_onExit","_finishDismiss","closed","exit","clearTimeout","_durationTimeoutId","dismissWithAction","closeWithAction","_dismissAfter","duration","setTimeout","_open","dispose","dismissedByAction","afterDismissed","asObservable","afterOpened","_onEnter","MAT_SNACK_BAR_DATA","MatSnackBarConfig","politeness","announcementMessage","horizontalPosition","verticalPosition","matSnackBarAnimations","contentFade","opacity","AnimationDurations","COMPLEX","AnimationCurves","STANDARD_CURVE","snackBarState","EXITING","ACCELERATION_CURVE","ENTERING","DECELERATION_CURVE","SimpleSnackBar","snackBarRef","action","[@contentFade]","MatSnackBarContainer","snackBarConfig","_animationState","attachComponentPortal","portal","_assertNotAttached","_applySnackBarClasses","_portalOutlet","attachTemplatePortal","onAnimationEnd","startsWith","_completeExit","onEnter_1","run","enter","onMicrotaskEmpty","panelClasses","panelClass","cssClass","Error","[@state]","(@state.done)","OverlayModule","entryComponents","MatSnackBarModule","MAT_SNACK_BAR_DEFAULT_OPTIONS","MAT_SNACK_BAR_DEFAULT_OPTIONS_FACTORY","MatSnackBar","_overlay","_live","_injector","_breakpointObserver","_parentSnackBar","_defaultConfig","_snackBarRefAtThisLevel","parent","_openedSnackBarRef","openFromComponent","component","config","_attach","openFromTemplate","open","message","_config","tslib_1.__assign","_attachSnackBarContainer","overlayRef","userInjector","injector","PortalInjector","WeakMap","containerPortal","ComponentPortal","containerRef","instance","content","userConfig","_createOverlay","container","$implicit","_createInjector","contentRef","observe","Breakpoints","Handset","detachments","matches","overlayElement","_animateSnackBar","announce","overlayConfig","OverlayConfig","positionStrategy","global","isRtl","isLeft","isRight","right","centerHorizontally","bottom","create","Overlay","LiveAnnouncer","Injector","BreakpointObserver","MatSortBase","_MatSortMixinBase","mixinInitialized","sortables","Map","getSortInvalidDirectionError","sortable","getSortHeaderMissingIdError","has","getSortDuplicateSortableIdError","set","delete","getNextSortDirection","sortDirectionCycle","getSortDirectionCycle","nextDirectionIndex","_markInitialized","SORT_ANIMATION_TRANSITION","keyframes","query","animateChild","sortButtonLabel","MatDrawerContent","_focusTrapFactory","_doc","_elementFocusedBeforeDrawerWasOpened","_mode","_disableClose","_autoFocus","openedChange","opened","_isFocusTrapEnabled","_focusTrap","_trapFocus","_restoreFocus","close","stopPropagation","MatDrawer","onPositionChanged","_modeChanged","mode","focusInitialElementWhenReady","hasMovedFocus","activeEl","activeElement","HTMLElement","focusVia","_openedVia","enabled","destroy","isOpen","openedVia","_opened","_enableAnimations","matDrawerAnimations","transformDrawer","[@transform]","(@transform.start)","(@transform.done)","[attr.align]","[class.mat-drawer-end]","[class.mat-drawer-over]","[class.mat-drawer-side]","_openedStream","openedStart","_closedStream","closedStart","_animationMode","backdropClick","_doCheckSubject","_autosize","defaultAutosize","MatDrawerContainer","_drawers","drawer","_watchDrawerToggle","_watchDrawerPosition","_watchDrawerMode","_isDrawerOpen","_start","_end","_updateContentMargins","debounceTime","ngDoCheck","_setContainerClass","throwMatDuplicatedDrawerError","_right","_left","_closeModalDrawer","disableClose","_canHaveBackdrop","_isShowingBackdrop","_width","_contentMarginChanges","_contentMargins","[class.mat-drawer-container-explicit-backdrop]","ContentChild","autosize","hasBackdrop","MatSidenavContent","[style.margin-left.px]","[style.margin-right.px]","MatSidenav","_fixedBottomGap","[class.mat-sidenav-fixed]","[style.top.px]","[style.bottom.px]","fixedInViewport","MatSidenavContainer","MatSidenavModule","ScrollDispatchModule","PlatformModule","MAT_SLIDE_TOGGLE_DEFAULT_OPTIONS","disableToggleValue","disableDragValue","nextUniqueId","MAT_SLIDE_TOGGLE_VALUE_ACCESSOR","NG_VALUE_ACCESSOR","MatSlideToggle","multi","MatSlideToggleChange","checked","MatSlideToggleBase","_MatSlideToggleMixinBase","defaults","onChange","_","_uniqueId","_required","_checked","_dragging","labelPosition","toggleChange","dragChange","_inputElement","focusOrigin","_onInputFocusChange","_onChangeEvent","_onInputClick","toggle","_focusRipple","fadeOut","_ripple","launch","persistent","_getDragPercentage","distance","_thumbBarWidth","_previousChecked","_onDragStart","thumbEl","_thumbEl","_thumbBarEl","clientWidth","_onDrag","_dragPercentage","deltaX","dragX","_onDragEnd","newCheckedValue","_onLabelTextChange","[id]","[class.mat-checked]","[class.mat-disabled]","[class.mat-slide-toggle-label-before]","required","MatRipple","MatSlideToggleModule","MatSliderBase","_MatSliderMixinBase","_invert","_max","_min","_step","_thumbLabel","_tickInterval","_value","_vertical","_roundToDecimal","toString","split","pop","parseFloat","toFixed","Location","MatProgressBar","MatProgressBarModule","BASE_SIZE","MatProgressSpinnerBase","_MatProgressSpinnerMixinBase","MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS","MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS_FACTORY","INDETERMINATE_ANIMATION_TEMPLATE","MatProgressSpinner","platform","animationMode","_fallbackAnimation","_noopAnimations","_forceAnimations","_diameter","EDGE","TRIDENT","diameter","strokeWidth","animationClass","diameters","_attachStyleNode","_strokeWidth","newValue","viewBox","_circleRadius","PI","_strokeCircumference","styleTag","createElement","head","appendChild","sheet","insertRule","_getAnimationText","replace","Set","[style.width.px]","[style.height.px]","[attr.mode]","MatSpinner","MatProgressSpinnerModule","MAT_RADIO_GROUP_CONTROL_VALUE_ACCESSOR","MatRadioGroup","MatRadioChange","MatRadioGroupBase","_MatRadioGroupMixinBase","_changeDetector","_name","_selected","_isInitialized","_labelPosition","_disabled","_updateRadioButtonNames","_markRadiosForCheck","_updateSelectedRadioFromValue","_checkSelectedRadioButton","_touch","_radios","radio","isAlreadySelected","_markForCheck","MatRadioButton","descendants","MatRadioButtonBase","_MatRadioButtonMixinBase","radioGroup","_radioDispatcher","_removeUniqueSelectionListener","listen","newCheckedState","notify","newDisabledState","_isRippleDisabled","disableRipple","_onInputChange","groupValueChanged","[class.mat-radio-checked]","[class.mat-radio-disabled]","[attr.id]","UniqueSelectionDispatcher","ariaDescribedby","MatRadioModule","box-shadow","MAT_DRAWER_DEFAULT_AUTOSIZE","MAT_DRAWER_DEFAULT_AUTOSIZE_FACTORY","_container","MatSelect","_getAriaActiveDescendant","panelOpen","activeItem","_calculateOverlayOffsetX","offsetX","overlayRect","overlayDir","viewportSize","getViewportSize","_isRtl","paddingWidth","multiple","SELECT_MULTIPLE_PANEL_PADDING_X","_selectionModel","options","first","group","leftOverflow","rightOverflow","updatePosition","_calculateOverlayOffsetY","scrollBuffer","maxScroll","optionOffsetFromPanelTop","itemHeight","_getItemHeight","optionHeightAdjustment","_triggerRect","maxOptionsDisplayed","floor","_disableOptionCentering","_scrollTop","firstDisplayedIndex","_getItemCount","selectedDisplayIndex","partialItemHeight","_checkOverlayWithinViewport","topSpaceAvailable","bottomSpaceAvailable","panelHeightTop","abs","_offsetY","totalPanelHeight","panelHeightBottom","_adjustPanelUp","_adjustPanelDown","_transformOrigin","_getOriginBasedOnOption","distanceBelowViewport","distanceAboveViewport","optionGroups","_triggerFontSize","setDescribedByIds","ids","_ariaDescribedby","join","onContainerClick","_panelOpen","empty","[attr.tabindex]","[attr.aria-label]","[attr.aria-labelledby]","[attr.aria-required]","[attr.aria-invalid]","[attr.aria-owns]","[attr.aria-multiselectable]","[attr.aria-describedby]","[attr.aria-activedescendant]","[class.mat-select-disabled]","[class.mat-select-invalid]","[class.mat-select-required]","matSelectAnimations","transformPanel","fadeInContent","MatFormFieldControl","MAT_OPTION_PARENT_COMPONENT","NgForm","FormGroupDirective","MatFormField","NgControl","Self","MAT_SELECT_SCROLL_STRATEGY","CdkConnectedOverlay","MatOption","MatOptgroup","customTrigger","MatSelectTrigger","placeholder","disableOptionCentering","compareWith","errorStateMatcher","selectionChange","MatOptionModule","MatFormFieldModule","MAT_SELECT_SCROLL_STRATEGY_PROVIDER","MatSelectModule","matTooltipAnimations","tooltipState","SCROLL_THROTTLE_MS","MAT_TOOLTIP_SCROLL_STRATEGY","MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY_PROVIDER","MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY","MAT_TOOLTIP_DEFAULT_OPTIONS","MAT_TOOLTIP_DEFAULT_OPTIONS_FACTORY","MatTooltip","_scrollDispatcher","_ariaDescriber","_scrollStrategy","_defaultOptions","showDelay","hideDelay","_message","_manualListeners","IOS","nodeName","webkitUserSelect","userSelect","listener","addEventListener","_updatePosition","_tooltipInstance","removeDescription","_isTooltipVisible","_updateTooltipMessage","describe","_tooltipClass","_setTooltipClass","removeEventListener","clear","delay","_detach","_portal","TooltipComponent","afterHidden","isVisible","ESCAPE","_handleTouchend","touchendHideDelay","strategy","flexibleConnectedTo","withTransformOriginOn","withFlexibleDimensions","withViewportMargin","scrollableAncestors","getAncestorScrollContainers","withScrollableContainers","positionChanges","scrollableViewProperties","isOverlayClipped","scrollStrategy","getConfig","_getOrigin","overlay","_getOverlayPosition","withPositions","main","fallback","originPosition","isLtr","originX","originY","getMatTooltipInvalidPositionError","_invertPosition","overlayPosition","overlayX","overlayY","tooltipClass","(touchend)","ScrollDispatcher","AriaDescriber","_visibility","_closeOnInteraction","_onHide","_isHandset","_hideTimeoutId","_showTimeoutId","_animationStart","_animationDone","_handleBodyInteraction","aria-hidden","MatTooltipModule","itemsPerPageLabel","nextPageLabel","previousPageLabel","firstPageLabel","lastPageLabel","getRangeLabel","MatPaginatorIntl","MAT_PAGINATOR_INTL_PROVIDER","MAT_PAGINATOR_INTL_PROVIDER_FACTORY","PageEvent","MatPaginatorBase","_MatPaginatorBase","MatPaginator","_pageIndex","_length","_pageSizeOptions","_hidePageSize","_showFirstLastButtons","_intlChanges","_pageSize","_updateDisplayedPageSizeOptions","p","_initialized","nextPage","hasNextPage","previousPageIndex","_emitPageEvent","previousPage","hasPreviousPage","firstPage","lastPage","getNumberOfPages","numberOfPages","_changePageSize","pageSizeOptions","_displayedPageSizeOptions","hidePageSize","showFirstLastButtons","MatPaginatorModule","MatProgressBarBase","_MatProgressBarMixinBase","progressbarId","location","_bufferValue","_currentPath","path","clamp","_primaryTransform","_bufferTransform","bufferValue","aria-valuemin","aria-valuemax","insertBefore","_outlet","outletElement","context","MatMenuContent","isAttached","ApplicationRef","matMenuAnimations","transformMenu","sequence","fadeInItems","MAT_MENU_PANEL","MatMenuItemBase","_MatMenuItemMixinBase","MatMenuItem","_parentMenu","_hovered","_highlighted","_triggersSubmenu","addItem","removeItem","_checkDisabled","_handleMouseEnter","getLabel","textNodeType","TEXT_NODE","output","length_1","[class.mat-menu-item-highlighted]","[class.mat-menu-item-submenu-trigger]","[attr.disabled]","MAT_MENU_DEFAULT_OPTIONS","MAT_MENU_DEFAULT_OPTIONS_FACTORY","MatMenu","_xPosition","xPosition","_yPosition","yPosition","_items","_itemChanges","_tabSubscription","_classList","_panelAnimationState","backdropClass","_overlapTrigger","overlapTrigger","_hasBackdrop","throwMatMenuInvalidPositionX","setPositionClasses","throwMatMenuInvalidPositionY","classes","className","withWrap","withTypeAhead","tabOut","switchMap","items","item","parentMenu","setFocusOrigin","focusFirstItem","lazyContent","onStable","resetActiveItem","setElevation","depth","newElevation","customElevation","c","_previousElevation","posX","posY","_startAnimation","_resetAnimation","_onAnimationDone","_isAnimating","activeItemIndex","scrollTop","MAT_MENU_SCROLL_STRATEGY","MAT_MENU_SCROLL_STRATEGY_FACTORY_PROVIDER","MAT_MENU_SCROLL_STRATEGY_FACTORY","MatMenuTrigger","_menuItemInstance","_menuOpen","_closeSubscription","_hoverSubscription","_openedByMouse","menuOpened","onMenuOpen","menuClosed","onMenuClose","triggersSubmenu","menu","_checkMenu","reason","_destroyMenu","_handleHover","_cleanUpSubscriptions","toggleMenu","closeMenu","openMenu","_setPosition","menuData","_menuClosingActions","_initMenu","menuOpen","_resetMenu","_setMenuElevation","_setIsMenuOpen","throwMatMenuMissingError","_getOverlayConfig","_subscribeToPositions","connectionPair","originFallbackX","_b","overlayFallbackY","_c","originFallbackY","_d","overlayFallbackX","offsetY","backdrop","parentClose","hover","_handleMousedown","isFakeMousedownFromScreenReader","asapScheduler","aria-haspopup","(mousedown)","_deprecatedMatMenuTriggerFor","MatMenuModule","minWidth","MAT_SELECT_SCROLL_STRATEGY_PROVIDER_FACTORY","MatSelectChange","MatSelectBase","_defaultErrorStateMatcher","_parentForm","_parentFormGroup","ngControl","_MatSelectMixinBase","mixinErrorState","_parentFormField","_scrollStrategyFactory","_multiple","_compareWith","o1","o2","_uid","_destroy","_onChange","_onTouched","_optionIds","_panelDoneAnimating","_panelDoneAnimatingStream","_positions","_focused","controlType","optionSelectionChanges","defer","option","onSelectionChange","o","valueAccessor","_placeholder","stateChanges","getMatSelectDynamicMultipleError","getMatSelectNonFunctionValueError","_initializeSelection","_id","SelectionModel","distinctUntilChanged","_initKeyManager","added","select","removed","deselect","_resetOptions","updateErrorState","getComputedStyle","_calculateOverlayPosition","_highlightCorrectOption","fontSize","_setSelectionByValue","selectedOptions","viewValue","reverse","_handleOpenKeydown","_handleClosedKeydown","isArrowKey","altKey","manager","A","ctrlKey","hasDeselectedOptions_1","previouslyFocusedIndex","shiftKey","_selectViaInteraction","_onFadeInDone","_onAttached","positionChange","panel","_getPanelTheme","color","isEmpty","getMatSelectNonArrayValueError","currentValue","_selectValue","_sortValues","correspondingOption","error","console","warn","ActiveDescendantKeyManager","withVerticalOrientation","_scrollActiveOptionIntoView","changedOrDestroyed","_onSelect","isUserInput","_setOptionIds","wasSelected","isSelected","_propagateChanges","options_1","fallbackValue","valueToEmit","activeOptionIndex","labelCount","_countGroupLabelsBeforeOption","_getOptionScrollPosition","_getOptionIndex","result","current","panelHeight","scrollContainerHeight","selectedOptionOffset","_calculateOverlayScroll","optionOffsetFromScrollTop","halfOptionHeight","optimalScrollPosition","_getAriaLabel","_getAriaLabelledby","_labelId","MAT_SELECTION_LIST_VALUE_ACCESSOR","MatSelectionList","MatListOption","_MatSelectionListMixinBase","MatLineModule","MatPseudoCheckboxModule","MatList","MatNavList","MatListItem","MatListAvatarCssMatStyler","MatListIconCssMatStyler","MatListSubheaderCssMatStyler","MatDividerModule","MatListModule","_template","_componentFactoryResolver","_appRef","DomPortalOutlet","[class.mat-list-item-avatar]","[class.mat-list-item-with-avatar]","_icon","MatSelectionListBase","MatListOptionBase","_MatListOptionMixinBase","MatSelectionListChange","selectionList","_hasFocus","checkboxPosition","_setSelected","_reportValueChange","MatLineSetter","_lines","_removeOptionFromList","_text","_handleFocus","_setFocusedOption","_handleBlur","tabindex","[class.mat-list-item-disabled]","[class.mat-list-item-focus]","[attr.aria-selected]","skipPredicate","_tempValues","_setOptionsFromValues","_modelChanges","_i","optionIndex","setNextItemActive","previousFocusIndex","_toggleSelectOnFocusedOption","selectAll","deselectAll","_getSelectedOptionValues","values","Boolean","focusedOption","focusedIndex","hasChanged","_MatListMixinBase","_navList","_isNavList","MatGridTileFooterCssMatStyler","TileCoordinator","numColumns","tiles","columnIndex","rowIndex","tracker","fill","tile","_trackTile","lastRowMax","rowCount","gapStartIndex","_findMatchingGap","colspan","_markTilePosition","TilePosition","tileCols","gapEndIndex","_nextRow","_findGapEndIndex","rowspan","row","col","TileStyler","_rows","_rowspan","init","gutterSize","cols","_gutterSize","normalizeUnits","_cols","getBaseTileSize","sizePercent","gutterFraction","getTilePosition","baseSize","calc","getTileSize","span","setStyle","colIndex","percentWidthPerTile","gutterWidthFractionPerTile","setColStyles","setRowStyles","percentWidth","gutterWidth","baseTileWidth","side","_setStyle","getGutterSpan","getTileSpan","tileHeight","getComputedHeight","FixedTileStyler","fixedRowHeight","reset","list","_setListStyle","_tiles","RatioTileStyler","_parseRatio","percentHeightPerTile","rowHeightRatio","baseTileHeight","ratioParts","FitTileStyler","gutterHeightPerTile","MatGridList","_gutter","coerceToNumber","coerceToString","_rowHeight","_setTileStyler","_checkCols","_checkRowHeight","_layoutTiles","rowHeight","_tileStyler","MatGridTile","MatGridTileText","MatGridTileHeaderCssMatStyler","MatGridAvatarCssMatStyler","MatGridListModule","SvgIconConfig","svgElement","url","MatIconRegistry","_httpClient","_sanitizer","_svgIconConfigs","_iconSetConfigs","_cachedIconsByUrl","_inProgressUrlFetches","_fontCssClassesByAlias","_defaultFontSetClass","addSvgIcon","iconName","addSvgIconInNamespace","addSvgIconLiteral","literal","addSvgIconLiteralInNamespace","namespace","_addSvgIconConfig","sanitizedLiteral","sanitize","SecurityContext","HTML","getMatIconFailedToSanitizeLiteralError","_createSvgElementForSingleIcon","addSvgIconSet","addSvgIconSetInNamespace","addSvgIconSetLiteral","addSvgIconSetLiteralInNamespace","_addSvgIconSetConfig","_svgElementFromString","registerFontClassAlias","alias","classNameForFontAlias","setDefaultFontSetClass","getDefaultFontSetClass","getSvgIconFromUrl","safeUrl","RESOURCE_URL","getMatIconFailedToSanitizeUrlError","cachedIcon","cloneSvg","_loadSvgIconFromConfig","tap","svg","getNamedSvgIcon","iconKey","_getSvgFromConfig","iconSetConfigs","_getSvgFromIconSetConfigs","observableThrow","getMatIconNameNotFoundError","namedIcon","_extractIconWithNameFromAnySet","iconSetFetchRequests","iconSetConfig","_loadSvgIconSetFromConfig","catchError","err","forkJoin","foundIcon","_extractSvgIconFromSet","_fetchUrl","svgText","responseText","_setSvgAttributes","iconSet","iconSource","querySelector","iconElement","cloneNode","removeAttribute","_toSvgElement","str","div","innerHTML","ELEMENT_NODE","setAttribute","getMatIconNoHttpProviderError","inProgressFetch","req","responseType","finalize","share","configNamespace","HttpClient","DomSanitizer","ICON_REGISTRY_PROVIDER","ICON_REGISTRY_PROVIDER_FACTORY","MatIconBase","_MatIconMixinBase","MatIcon","_iconRegistry","ariaHidden","_inline","inline","_fontSet","_cleanupFontValue","_fontIcon","_splitIconName","parts","svgIcon","_setSvgElement","log","_clearSvgElement","_usingFontIcon","_updateFontIconClasses","styleTags","querySelectorAll","layoutElement","childCount","removeChild","elem","fontSetClass","fontSet","_previousFontSetClass","fontIcon","_previousFontIconClass","[class.mat-icon-inline]","MatListBase","MatListItemBase","_MatListItemMixinBase","[@transformPanel]","[class.mat-datepicker-content-touch]","matDatepickerAnimations","fadeInCalendar","MatDatepickerContent","_dateAdapter","createMissingDateImplError","MatDatepicker","_disabledChange","_inputSubscription","_popupRef","_popupComponentRef","date","sameDate","_selectedChanged","_datepickerInput","_valueChange","_focusedElementBeforeOpen","touchUi","_openAsDialog","_openAsPopup","openedStream","_dialogRef","_calendarPortal","completeClose","closedStream","afterClosed","componentInstance","datepicker","_setColor","_createPopup","keydownEvents","withPush","MatDialog","MAT_DATEPICKER_SCROLL_STRATEGY","DateAdapter","calendarHeaderComponent","startAt","yearSelected","monthSelected","MAT_DATEPICKER_VALUE_ACCESSOR","MatDatepickerInput","MAT_DATEPICKER_VALIDATORS","NG_VALIDATORS","MatDatepickerInputEvent","target","targetElement","_dateFormats","_formField","dateChange","dateInput","_cvaOnChange","_validatorOnChange","_datepickerSubscription","_localeSubscription","_parseValidator","_lastValueValid","matDatepickerParse","text","_minValidator","controlValue","_getValidDateOrNull","deserialize","compareDate","matDatepickerMin","actual","_maxValidator","matDatepickerMax","_filterValidator","_dateFilter","matDatepickerFilter","_validator","Validators","compose","localeChanges","registerDatepicker","_datepicker","_registerInput","isValid","oldDate","_formatValue","registerOnValidatorChange","validate","getPopupConnectionElementRef","getConnectedOverlayOrigin","_onInput","parse","_getThemePalette","format","display","isDateInstance","MAT_INPUT_VALUE_ACCESSOR","[attr.aria-haspopup]","[attr.min]","[attr.max]","[disabled]","(input)","(change)","MAT_DATE_FORMATS","matDatepicker","MatDatepickerToggleIcon","MatDatepickerToggle","_watchStateChanges","datepickerDisabled","inputDisabled","datepickerToggled","[class.mat-datepicker-toggle-active]","[class.mat-accent]","[class.mat-warn]","_customIcon","MatDialogModule","MatCalendar","MatCalendarBody","MatMonthView","MatYearView","MatMultiYearView","MatCalendarHeader","MatDatepickerIntl","MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY_PROVIDER","MatDatepickerModule","_inset","MatDivider","[class.mat-divider-vertical]","[class.mat-divider-horizontal]","[class.mat-divider-inset]","_hideToggle","displayMode","MatAccordion","hideToggle","CdkAccordion","matExpansionAnimations","indicatorRotate","expansionHeaderHeight","params","collapsedHeight","expandedHeight","bodyExpansion","MatExpansionPanelContent","uniqueId","MatExpansionPanel","accordion","_uniqueSelectionDispatcher","_inputChanges","_headerId","_getHideToggle","_hasSpacing","expanded","_getExpandedState","_lazyContent","_bodyAnimation","phaseName","outputs","[class.mat-expanded]","[class.mat-expansion-panel-spacing]","MatExpansionPanelActionRow","MatExpansionPanelHeader","_parentChangeSubscription","_toggle","_isExpanded","_getPanelId","_showToggle","_keydown","[attr.aria-controls]","[@expansionHeight]","MatExpansionPanelDescription","MatExpansionPanelTitle","CdkAccordionModule","MatExpansionModule","_colspan","property","attr.aria-readonly","todayValue","selectedValue","labelMinRequiredCells","numCols","allowDisabledSelection","activeCell","cellAspectRatio","selectedValueChange","selectedChange","_userSelection","activeDateChange","firstDayOfWeek","getFirstDayOfWeek","narrowWeekdays","getDayOfWeekNames","longWeekdays","weekdays","long","narrow","_weekdays","_activeDate","today","oldActiveDate","validDate","clampDate","minDate","maxDate","_hasSameMonthAndYear","_init","_selectedDate","_getDateInCurrentMonth","_minDate","_maxDate","_dateSelected","selectedYear","getYear","activeDate","selectedMonth","getMonth","selectedDate","createDate","_handleCalendarBodyKeydown","addCalendarDays","getDate","getNumDaysInMonth","addCalendarYears","addCalendarMonths","dateFilter","_focusActiveCell","_todayDate","_monthLabel","getMonthNames","toLocaleUpperCase","firstOfMonth","_firstWeekOffset","getDayOfWeek","_createWeekCells","_matCalendarBody","daysInMonth","dateNames","getDateNames","_weeks","cell","_shouldEnableDate","dateA11yLabel","MatCalendarCell","d1","d2","_selectedYear","_todayYear","activeYear","activeOffset","_years","year","_createCellForYear","_yearSelected","month","yearsPerPage","_getActiveCell","yearName","getYearName","_shouldEnableYear","firstOfYear","_selectedMonth","_getMonthInCurrentYear","_monthSelected","normalizedDate","_todayMonth","_yearLabel","monthNames","_months","_createCellForMonth","monthName","monthYearA11yLabel","_shouldEnableMonth","_isYearAndMonthAfterMaxDate","_isYearAndMonthBeforeMinDate","maxYear","maxMonth","minYear","minMonth","calendar","currentView","monthYearLabel","switchToMultiYearViewLabel","switchToMonthViewLabel","prevMonthLabel","prevYearLabel","multi-year","prevMultiYearLabel","nextMonthLabel","nextYearLabel","nextMultiYearLabel","currentPeriodClicked","previousClicked","nextClicked","previousEnabled","_isSameView","nextEnabled","date1","date2","_moveFocusOnNextTick","_currentView","startView","focusActiveCell","firstChange","view","_getCurrentViewComponent","headerComponent","monthView","yearView","multiYearView","datepickerUid","MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY","MatDatepickerContentBase","_MatDatepickerContentMixinBase","_calendar","chip","MatChipListChange","MatChipList","_blur","_chipInput","focused","_markAsTouched","_resetChips","_dropSubscriptions","_listenToChipsFocus","_listenToChipsSelection","_listenToChipsRemoved","_chipFocusSubscription","_chipBlurSubscription","_chipSelectionSubscription","chipSelectionChanges","chips","chipFocusChanges","chipIndex","chipBlurChanges","_chipRemoveSubscription","chipRemoveChanges","_updateKeyManager","[class.mat-chip-list-disabled]","[class.mat-chip-list-invalid]","[class.mat-chip-list-required]","ariaOrientation","selectable","MatChip","MatChipInput","_addOnBlur","separatorKeyCodes","chipEnd","_chipList","registerInput","_emitChipEnd","addOnBlur","_focus","[attr.placeholder]","MAT_CHIPS_DEFAULT_OPTIONS","chipList","CHIP_DECLARATIONS","MatChipRemove","MatChipAvatar","MatChipTrailingIcon","ɵ0","useValue","MatChipsModule","MatDialogConfig","maxWidth","ariaDescribedBy","autoFocus","closeOnNavigation","matDialogAnimations","slideDialog","MatDialogContainer","_elementFocusedBeforeDialogWasOpened","_state","_animationStateChanged","_ariaLabelledBy","throwMatDialogContentAlreadyAttachedError","_savePreviouslyFocusedElement","toFocus","_onAnimationStart","_startExitAnimation","aria-modal","[@slideDialog]","(@slideDialog.start)","(@slideDialog.done)","MatDialogRef","_containerInstance","_afterOpen","_afterClosed","_beforeClose","_locationChanges","_result","dialogResult","detachBackdrop","afterOpen","beforeClose","_getPositionStrategy","centerVertically","updateSize","MAT_DIALOG_DATA","MAT_DIALOG_DEFAULT_OPTIONS","MAT_DIALOG_SCROLL_STRATEGY","MAT_DIALOG_SCROLL_STRATEGY_PROVIDER","MAT_DIALOG_SCROLL_STRATEGY_PROVIDER_FACTORY","_location","_parentDialog","_overlayContainer","_openDialogsAtThisLevel","_afterAllClosedAtThisLevel","_afterOpenAtThisLevel","_ariaHiddenElements","afterAllClosed","openDialogs","_afterAllClosed","componentOrTemplateRef","_applyConfigDefaults","getDialogById","dialogContainer","_attachDialogContainer","dialogRef","_attachDialogContent","_hideNonDialogContentFromAssistiveTechnology","_removeOpenDialog","closeAll","dialog","dialogConfig","minHeight","maxHeight","injectionTokens","previousValue","overlayContainer","getContainerElement","parentElement","siblings","sibling","hasAttribute","getAttribute","OverlayContainer","dialogElementUid","MatDialogClose","_dialog","getClosestDialog","proxiedChange","_matDialogClose","MatDialogTitle","MatDialogContent","MatDialogActions","MatTextareaAutosize","minRows","maxRows","rows","matAutosizeMinRows","matAutosizeMaxRows","matAutosize","matTextareaAutosize","CdkTextareaAutosize","MAT_INPUT_INVALID_TYPES","MatInputBase","_MatInputMixinBase","MatInput","inputValueAccessor","_autofillMonitor","ngZone","_isServer","autofilled","_type","_readonly","_neverEmptyInputTypes","t","getSupportedInputTypes","_inputValueAccessor","_previousNativeValue","el","selectionStart","selectionEnd","setSelectionRange","_validateType","_isTextarea","isAutofilled","_dirtyCheckNativeValue","isFocused","readonly","getMatInputUnsupportedTypeError","_isNeverEmpty","_isBadInput","validity","badInput","[class.mat-input-server]","[required]","[readonly]","AutofillMonitor","TextFieldModule","MatInputModule","calendarLabel","openCalendarLabel","displayValue","_cellClicked","_isActiveCell","cellNumber","_firstRowOffset","MatCard","MatCardHeader","MatCardTitleGroup","MatCardContent","MatCardTitle","MatCardSubtitle","MatCardActions","MatCardFooter","MatCardSmImage","MatCardMdImage","MatCardLgImage","MatCardImage","MatCardXlImage","MatCardAvatar","MatCardModule","MAT_CHECKBOX_CLICK_ACTION","MAT_CHECKBOX_CONTROL_VALUE_ACCESSOR","MatCheckbox","MatCheckboxChange","MatCheckboxBase","_MatCheckboxMixinBase","_clickAction","indeterminateChange","_currentAnimationClass","_currentCheckState","TransitionCheckState","Init","_indeterminate","changed","_transitionCheckState","Indeterminate","Checked","Unchecked","_getAriaChecked","indeterminate","newState","oldState","_getAnimationClassForCheckStateTransition","animationClass_1","ripple","_onInteractionEvent","animSuffix","[class.mat-checkbox-indeterminate]","[class.mat-checkbox-checked]","[class.mat-checkbox-disabled]","[class.mat-checkbox-label-before]","MAT_CHECKBOX_REQUIRED_VALIDATOR","MatCheckboxRequiredValidator","[attr.required]","CheckboxRequiredValidator","MatCheckboxModule","MatChipSelectionChange","MatChipBase","_MatChipMixinBase","CHIP_ATTRIBUTE_NAMES","rippleConfig","chipListSelectable","_selectable","_removable","destroyed","_addHostClassName","_chipRipple","RippleRenderer","CHIP_ATTRIBUTE_NAMES_1","attr","tagName","_removeTriggerEvents","selectViaInteraction","toggleSelected","removable","DELETE","BACKSPACE","[class.mat-chip-selected]","[class.mat-chip-with-avatar]","[class.mat-chip-with-trailing-icon]","[class.mat-chip-disabled]","avatar","trailingIcon","removeIcon","_parentChip","MatChipListBase","_MatChipListMixinBase","_lastDestroyedIndex","_chipSet","_tabOutSubscription","_tabIndex","_userTabIndex","_changeSubscription","_updateTabIndex","_updateFocusForDestroyedChips","inputElement","_focusInput","_isInputEmpty","chipsArray","newFocusIndex","focusChip","_clearSelection","correspondingChip","skip","MatButton","stopImmediatePropagation","MatAnchor","MatButtonToggleGroupBase","_MatButtonToggleGroupMixinBase","MAT_BUTTON_TOGGLE_GROUP_VALUE_ACCESSOR","MatButtonToggleGroup","MatButtonToggleGroupMultiple","_uniqueIdCounter","MatButtonToggleChange","_buttonToggles","_syncButtonToggle","_isSelected","_isPrechecked","_rawValue","[class.mat-button-toggle-vertical]","MatButtonToggle","MatButtonToggleBase","_MatButtonToggleMixinBase","toggleGroup","_isSingleSelector","buttonToggleGroup","_buttonElement","_onButtonClick","newChecked","[class.mat-button-toggle-standalone]","[class.mat-button-toggle-checked]","[class.mat-button-toggle-disabled]","MatButtonToggleModule","align","[class.mat-card-actions-align-end]","autoActiveFirstOption","panelWidth","optionSelected","MatAutocomplete","MatAutocompleteOrigin","MAT_AUTOCOMPLETE_SCROLL_STRATEGY","MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY_PROVIDER","MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY","MAT_AUTOCOMPLETE_VALUE_ACCESSOR","MatAutocompleteTrigger","_zone","_componentDestroyed","_autocompleteDisabled","_manuallyFloatingLabel","_viewportSubscription","_closeKeyEventStream","autocompleteAttribute","_overlayAttached","optionSelections","autocomplete","_destroyPanel","showPanel","openPanel","_attachOverlay","_floatLabel","closePanel","_resetLabel","_isOpen","_closingActionsSubscription","_outsideClickStream","MatOptionSelectionChange","fromEvent","clickTarget","formField","_setTriggerValue","_resetActiveItem","activeOption","prevActiveItem","TAB","_canOpen","_scrollToOption","_handleInput","_previousValue","shouldAnimate","floatLabel","_animateAndLockLabel","newScrollPosition","_getScrollTop","_setScrollTop","_subscribeToClosingActions","firstStable","optionChanges","_positionStrategy","reapplyLastPosition","_setVisibility","panelClosingActions","_setValueAndClose","toDisplay","inputValue","_control","_clearPreviousSelectedOption","_emitSelectEvent","getMatAutocompleteMissingPanelError","_getPanelWidth","wasOpen","_getConnectedElement","connectedTo","_getHostWidth","readOnly","[attr.autocomplete]","[attr.aria-autocomplete]","(focusin)","Host","autocompleteDisabled","MatAutocompleteModule","MatBadge","_color","_overlap","val","_updateTextContent","_description","newDescription","_updateHostAriaDescription","_hidden","isAbove","isAfter","description","_badgeElement","_createBadgeElement","badgeElement","oldDescription","colorPalette","[class.mat-badge-overlap]","[class.mat-badge-above]","[class.mat-badge-below]","[class.mat-badge-before]","[class.mat-badge-after]","[class.mat-badge-small]","[class.mat-badge-medium]","[class.mat-badge-large]","[class.mat-badge-hidden]","overlap","hidden","MatBadgeModule","MAT_BOTTOM_SHEET_DATA","MatBottomSheetConfig","matBottomSheetAnimations","bottomSheetState","MatBottomSheetContainer","breakpointObserver","bottomSheetConfig","_elementFocusedBeforeOpened","_breakpointSubscription","Medium","Large","XLarge","_toggleClass","isMatched","_validatePortalAttached","_setPanelClass","(@state.start)","FocusTrapFactory","MatBottomSheetModule","MatBottomSheetRef","MatBottomSheet","_parentBottomSheet","_bottomSheetRefAtThisLevel","_openedBottomSheetRef","_attachContainer","ref","bottomSheetRef","scrollStrategies","block","DEFAULT_ROUND_BUTTON_COLOR","DEFAULT_FLAT_BUTTON_COLOR","BUTTON_HOST_ATTRIBUTES","MatButtonBase","_MatButtonMixinBase","isRoundButton","_hasHostAttributes","isIconButton","BUTTON_HOST_ATTRIBUTES_1","attributes","attribute","_parent","_active","_emitSelectionChangeEvent","setActiveStyles","setInactiveStyles","ngAfterViewChecked","_mostRecentViewValue","[class.mat-selected]","[class.mat-option-multiple]","[class.mat-active]","[class.mat-option-disabled]","MAT_LABEL_GLOBAL_OPTIONS","MatError","matFormFieldAnimations","transitionMessages","[class.mat-right]","MatHint","MatLabel","MatPlaceholder","MatPrefix","MatSuffix","MatFormFieldBase","_MatFormFieldMixinBase","MAT_FORM_FIELD_DEFAULT_OPTIONS","labelOptions","_showAlwaysAnimate","_subscriptAnimationState","_hintLabel","_hintLabelId","_outlineGapWidth","_outlineGapStart","_initialGapCalculated","_labelOptions","float","_animationsEnabled","_appearance","appearance","_hideRequiredMarker","_processHints","_connectionContainerRef","_validateControlChild","_validatePlaceholders","_syncDescribedByIds","valueChanges","_prefixChildren","_suffixChildren","_hintChildren","_errorChildren","updateOutlineGap","_shouldForward","prop","_hasPlaceholder","_placeholderChild","_hasLabel","_labelChild","_shouldLabelFloat","_canLabelFloat","shouldLabelFloat","_shouldAlwaysFloat","_hideControlPlaceholder","_hasFloatingLabel","_getDisplayedMessages","errorState","_label","getMatFormFieldPlaceholderConflictError","_validateHints","startHint_1","endHint_1","hint","hintLabel","getMatFormFieldDuplicatedHintError","startHint","endHint","getMatFormFieldMissingControlError","documentElement","containerStart","_getStartEnd","labelStart","labelWidth","outlineGapPadding","rect","[class.mat-form-field-appearance-standard]","[class.mat-form-field-appearance-fill]","[class.mat-form-field-appearance-outline]","[class.mat-form-field-appearance-legacy]","[class.mat-form-field-invalid]","[class.mat-form-field-can-float]","[class.mat-form-field-should-float]","[class.mat-form-field-hide-placeholder]","[class.mat-form-field-disabled]","[class.mat-form-field-autofilled]","[class.mat-focused]","[class.ng-untouched]","[class.ng-touched]","[class.ng-pristine]","[class.ng-dirty]","[class.ng-valid]","[class.ng-invalid]","[class.ng-pending]","hideRequiredMarker","underlineRef","_inputContainerRef","_uniqueAutocompleteIdCounter","MatAutocompleteSelectedEvent","MatAutocompleteBase","_MatAutocompleteMixinBase","MAT_AUTOCOMPLETE_DEFAULT_OPTIONS","MAT_AUTOCOMPLETE_DEFAULT_OPTIONS_FACTORY","_autoActiveFirstOption","__extends","d","__","constructor","extendStatics","MATERIAL_SANITY_CHECKS_FACTORY","base","class_1","defaultColor","_disableRipple","defaultTabIndex","matcher","_pendingSubscribers","Observable","subscriber","_notifySubscriber","MAT_DATE_LOCALE_FACTORY","inject","LOCALE_ID","range","valueFunction","valuesArray","enforceStyleRecalculation","window","getPropertyValue","distanceToFurthestCorner","distX","distY","sqrt","optionsArray","groups","groupCounter","optionOffset","currentScrollPosition","optionHeight","reposition","MAT_DIALOG_SCROLL_STRATEGY_FACTORY","defaultOptions","provider","exp","match","parentRegistry","httpClient","sanitizer","scrollThrottle","parentIntl","sortOrder","setPrototypeOf","__proto__","__assign","assign","s","n","SHARP_CURVE","MATERIAL_SANITY_CHECKS","_sanityChecksEnabled","_hasDoneGlobalChecks","_hasCheckedHammer","_window","_areChecksEnabled","_checkDoctypeIsDefined","_checkThemeIsPresent","_isTestEnv","doctype","testElement","body","computedStyle","_checkHammerIsAvailable","BidiModule","MAT_DATE_LOCALE","MAT_DATE_LOCALE_PROVIDER","_localeChanges","setLocale","locale","second","firstValid","secondValid","SUPPORTS_INTL_API","Intl","DEFAULT_MONTH_NAMES","short","String","DEFAULT_DATE_NAMES","DEFAULT_DAY_OF_WEEK_NAMES","ISO_8601_REGEX","NativeDateAdapter","matDateLocale","useUtcForDisplay","_clampDate","getFullYear","getDay","dtf_1","DateTimeFormat","timeZone","_stripDirectionalityCharacters","_format","Date","dtf_2","day","dtf_3","weekday","dtf","_createDateWithOverflow","clone","displayFormat","setFullYear","toDateString","years","months","newDate","days","toIso8601","getUTCFullYear","_2digit","getUTCMonth","getUTCDate","test","isNaN","getTime","NaN","UTC","getHours","getMinutes","getSeconds","getMilliseconds","MAT_NATIVE_DATE_FORMATS","NativeDateModule","MatNativeDateModule","ShowOnDirtyErrorStateMatcher","dirty","submitted","touched","MAT_HAMMER_OPTIONS","ANGULAR_MATERIAL_SUPPORTED_HAMMER_GESTURES","ɵ1","noopHammerInstance","on","off","_hammerOptions","commonModule","events","buildHammer","hammer","Hammer","mc","pan","Pan","swipe","Swipe","press","Press","slide","_createRecognizer","threshold","longpress","time","recognizeWith","inheritances","recognizer","HammerGestureConfig","MatLine","_setLineClass","count","_resetClasses","_setClass","isAdd","RippleRef","_renderer","RippleState","HIDDEN","fadeOutRipple","defaultRippleAnimationConfig","enterDuration","exitDuration","ignoreMouseEventsTimeout","_target","_isPointerDown","_triggerEvents","_activeRipples","_eventOptions","supportsPassiveEventListeners","passive","onMousedown","isSyntheticEvent","_lastTouchStartEvent","now","rippleDisabled","fadeInRipple","onTouchStart","touches","onPointerUp","VISIBLE","FADING_IN","_containerElement","containerRect","_containerRect","animationConfig","centered","radius","transitionDuration","rippleRef","_mostRecentTransientRipple","runTimeoutOutsideZone","isMostRecentTransientRipple","wasActive","rippleEl","FADING_OUT","fadeOutAll","_triggerElement","_globalOptions","_rippleRenderer","_setupTriggerEventsIfEnabled","_trigger","configOrX","[class.mat-ripple-unbounded]","unbounded","MatPseudoCheckbox","[class.mat-pseudo-checkbox-indeterminate]","[class.mat-pseudo-checkbox-checked]","[class.mat-pseudo-checkbox-disabled]","MatOptgroupBase","_MatOptgroupMixinBase","_uniqueOptgroupIdCounter","[class.mat-optgroup-disabled]"],"mappings":"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"}