{"version":3,"file":"material.umd.min.js","sources":["../../src/lib/toolbar/toolbar.ts","../../src/lib/toolbar/toolbar-module.ts","../../src/lib/version.ts","../../src/lib/autocomplete/autocomplete-trigger.ts","../../src/lib/core/ripple/ripple-renderer.ts","../../src/lib/core/testing/month-constants.ts","../../src/lib/expansion/expansion-animations.ts","../../src/lib/select/select.ts","../../src/lib/tooltip/tooltip.ts","../../src/lib/table/row.ts","../../src/lib/table/table-module.ts","../../src/lib/table/table-data-source.ts","../../src/lib/tabs/ink-bar.ts","../../src/lib/tabs/tab-label.ts","../../src/lib/tabs/tab.ts","../../src/lib/tabs/tabs-animations.ts","../../src/lib/tabs/tab-body.ts","../../src/lib/tabs/tab-group.ts","../../src/lib/tabs/tab-label-wrapper.ts","../../src/lib/tabs/tab-header.ts","../../src/lib/tabs/tab-nav-bar/tab-nav-bar.ts","../../src/lib/tabs/tabs-module.ts","../../src/lib/snack-bar/snack-bar-animations.ts","../../src/lib/snack-bar/simple-snack-bar.ts","../../src/lib/snack-bar/snack-bar-container.ts","../../src/lib/snack-bar/snack-bar.ts","../../src/lib/snack-bar/snack-bar-module.ts","../../src/lib/sort/sort.ts","../../src/lib/sort/sort-header-intl.ts","../../src/lib/sort/sort-animations.ts","../../src/lib/sort/sort-header.ts","../../src/lib/sort/sort-module.ts","../../src/lib/stepper/step-label.ts","../../src/lib/stepper/stepper-intl.ts","../../src/lib/stepper/step-header.ts","../../src/lib/stepper/stepper-animations.ts","../../src/lib/stepper/stepper.ts","../../src/lib/stepper/stepper-button.ts","../../src/lib/stepper/stepper-module.ts","../../src/lib/table/table.ts","../../src/lib/table/cell.ts","../../src/lib/sidenav/sidenav.ts","../../src/lib/sidenav/sidenav-module.ts","../../src/lib/slide-toggle/slide-toggle.ts","../../src/lib/slide-toggle/slide-toggle-module.ts","../../src/lib/slider/slider.ts","../../src/lib/slider/slider-module.ts","../../src/lib/snack-bar/snack-bar-ref.ts","../../src/lib/snack-bar/snack-bar-config.ts","../../src/lib/progress-spinner/progress-spinner.ts","../../src/lib/progress-spinner/progress-spinner-module.ts","../../src/lib/radio/radio.ts","../../src/lib/radio/radio-module.ts","../../src/lib/sidenav/drawer-animations.ts","../../src/lib/sidenav/drawer.ts","../../src/lib/tooltip/tooltip-module.ts","../../src/lib/paginator/paginator-intl.ts","../../src/lib/paginator/paginator.ts","../../src/lib/paginator/paginator-module.ts","../../src/lib/progress-bar/progress-bar.ts","../../src/lib/progress-bar/progress-bar-module.ts","../../src/lib/menu/menu-directive.ts","../../src/lib/menu/menu-trigger.ts","../../src/lib/menu/menu-module.ts","../../src/lib/select/select-animations.ts","../../src/lib/select/select-module.ts","../../src/lib/tooltip/tooltip-animations.ts","../../src/lib/list/list.ts","../../src/lib/list/selection-list.ts","../../src/lib/list/list-module.ts","../../src/lib/menu/menu-animations.ts","../../src/lib/menu/menu-item.ts","../../src/lib/datepicker/datepicker-toggle.ts","../../src/lib/datepicker/datepicker-module.ts","../../src/lib/divider/divider.ts","../../src/lib/divider/divider-module.ts","../../src/lib/expansion/accordion.ts","../../src/lib/expansion/expansion-panel-content.ts","../../src/lib/expansion/expansion-panel.ts","../../src/lib/expansion/expansion-panel-header.ts","../../src/lib/expansion/expansion-module.ts","../../src/lib/grid-list/grid-tile.ts","../../src/lib/grid-list/tile-coordinator.ts","../../src/lib/grid-list/tile-styler.ts","../../src/lib/grid-list/grid-list.ts","../../src/lib/grid-list/grid-list-module.ts","../../src/lib/datepicker/month-view.ts","../../src/lib/datepicker/year-view.ts","../../src/lib/datepicker/calendar.ts","../../src/lib/datepicker/datepicker.ts","../../src/lib/datepicker/datepicker-input.ts","../../src/lib/dialog/dialog-container.ts","../../src/lib/dialog/dialog-ref.ts","../../src/lib/dialog/dialog.ts","../../src/lib/dialog/dialog-content-directives.ts","../../src/lib/dialog/dialog-module.ts","../../src/lib/icon/icon-registry.ts","../../src/lib/icon/icon.ts","../../src/lib/icon/icon-module.ts","../../src/lib/input/autosize.ts","../../src/lib/input/input-value-accessor.ts","../../src/lib/input/input.ts","../../src/lib/input/input-module.ts","../../src/lib/datepicker/datepicker-intl.ts","../../src/lib/datepicker/calendar-body.ts","../../src/lib/checkbox/checkbox.ts","../../src/lib/checkbox/checkbox-required-validator.ts","../../src/lib/checkbox/checkbox-module.ts","../../src/lib/chips/chip.ts","../../src/lib/chips/chip-list.ts","../../src/lib/chips/chip-input.ts","../../src/lib/chips/chips-module.ts","../../src/lib/dialog/dialog-config.ts","../../src/lib/dialog/dialog-animations.ts","../../src/lib/button/button.ts","../../src/lib/button/button-module.ts","../../src/lib/button-toggle/button-toggle.ts","../../src/lib/button-toggle/button-toggle-module.ts","../../src/lib/card/card.ts","../../src/lib/card/card-module.ts","../../src/lib/checkbox/checkbox-config.ts","../../src/lib/core/option/option.ts","../../src/lib/core/option/index.ts","../../src/lib/core/label/label-options.ts","../../src/lib/form-field/error.ts","../../src/lib/form-field/form-field-control.ts","../../src/lib/form-field/hint.ts","../../src/lib/form-field/placeholder.ts","../../src/lib/form-field/label.ts","../../src/lib/form-field/prefix.ts","../../src/lib/form-field/suffix.ts","../../src/lib/form-field/form-field-animations.ts","../../src/lib/form-field/form-field.ts","../../src/lib/form-field/form-field-module.ts","../../src/lib/autocomplete/autocomplete.ts","../../src/lib/autocomplete/autocomplete-module.ts","../../node_modules/tslib/tslib.es6.js","../../src/lib/core/common-behaviors/disabled.ts","../../src/lib/core/common-behaviors/color.ts","../../src/lib/core/common-behaviors/disable-ripple.ts","../../src/lib/core/common-behaviors/tabindex.ts","../../src/lib/core/common-behaviors/error-state.ts","../../src/lib/core/datetime/native-date-adapter.ts","../../src/lib/core/style/apply-transform.ts","../../src/lib/form-field/form-field-errors.ts","../../src/lib/input/input-errors.ts","../../src/lib/datepicker/datepicker-errors.ts","../../src/lib/grid-list/grid-list-measure.ts","../../src/lib/menu/menu-errors.ts","../../src/lib/select/select-errors.ts","../../src/lib/sort/sort-errors.ts","../../src/lib/core/animation/animation.ts","../../src/lib/core/common-behaviors/common-module.ts","../../src/lib/core/datetime/date-adapter.ts","../../src/lib/core/datetime/date-formats.ts","../../src/lib/core/datetime/native-date-formats.ts","../../src/lib/core/datetime/index.ts","../../src/lib/core/error/error-options.ts","../../src/lib/core/gestures/gesture-config.ts","../../src/lib/core/line/line.ts","../../src/lib/core/ripple/ripple-ref.ts","../../src/lib/core/ripple/ripple.ts","../../src/lib/core/ripple/index.ts","../../src/lib/core/selection/pseudo-checkbox/pseudo-checkbox.ts","../../src/lib/core/selection/index.ts","../../src/lib/core/option/optgroup.ts"],"sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  AfterViewInit,\n  ChangeDetectionStrategy,\n  Component,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  isDevMode,\n  QueryList,\n  ViewEncapsulation\n} from '@angular/core';\nimport {CanColor, mixinColor} from '@angular/material/core';\nimport {Platform} from '@angular/cdk/platform';\n\n// Boilerplate for applying mixins to MatToolbar.\n/** @docs-private */\nexport class MatToolbarBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatToolbarMixinBase = mixinColor(MatToolbarBase);\n\n@Directive({\n  selector: 'mat-toolbar-row',\n  exportAs: 'matToolbarRow',\n  host: {'class': 'mat-toolbar-row'},\n})\nexport class MatToolbarRow {}\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-toolbar',\n  exportAs: 'matToolbar',\n  templateUrl: 'toolbar.html',\n  styleUrls: ['toolbar.css'],\n  inputs: ['color'],\n  host: {\n    'class': 'mat-toolbar',\n    '[class.mat-toolbar-multiple-rows]': 'this._toolbarRows.length',\n    '[class.mat-toolbar-single-row]': '!this._toolbarRows.length'\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n})\nexport class MatToolbar extends _MatToolbarMixinBase implements CanColor, AfterViewInit {\n\n  /** Reference to all toolbar row elements that have been projected. */\n  @ContentChildren(MatToolbarRow) _toolbarRows: QueryList<MatToolbarRow>;\n\n  constructor(elementRef: ElementRef, private _platform: Platform) {\n    super(elementRef);\n  }\n\n  ngAfterViewInit() {\n    if (!isDevMode() || !this._platform.isBrowser) {\n      return;\n    }\n\n    this._checkToolbarMixedModes();\n    this._toolbarRows.changes.subscribe(() => this._checkToolbarMixedModes());\n  }\n\n  /**\n   * Throws an exception when developers are attempting to combine the different toolbar row modes.\n   */\n  private _checkToolbarMixedModes() {\n    if (!this._toolbarRows.length) {\n      return;\n    }\n\n    // Check if there are any other DOM nodes that can display content but aren't inside of\n    // a <mat-toolbar-row> element.\n    const isCombinedUsage = [].slice.call(this._elementRef.nativeElement.childNodes)\n      .filter(node => !(node.classList && node.classList.contains('mat-toolbar-row')))\n      .filter(node => node.nodeType !== Node.COMMENT_NODE)\n      .some(node => node.textContent.trim());\n\n    if (isCombinedUsage) {\n      throwToolbarMixedModesError();\n    }\n  }\n}\n\n/**\n * Throws an exception when attempting to combine the different toolbar row modes.\n * @docs-private\n */\nexport function throwToolbarMixedModesError() {\n  throw Error('MatToolbar: Attempting to combine different toolbar modes. ' +\n    'Either specify multiple `<mat-toolbar-row>` elements explicitly or just place content ' +\n    'inside of a `<mat-toolbar>` for a single row.');\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {PlatformModule} from '@angular/cdk/platform';\nimport {MatToolbar, MatToolbarRow} from './toolbar';\n\n@NgModule({\n  imports: [MatCommonModule, PlatformModule],\n  exports: [MatToolbar, MatToolbarRow, MatCommonModule],\n  declarations: [MatToolbar, MatToolbarRow],\n})\nexport class MatToolbarModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Version} from '@angular/core';\n\n/** Current version of Angular Material. */\nexport const VERSION = new Version('5.0.3-91ea1a1');\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {Directionality} from '@angular/cdk/bidi';\nimport {DOWN_ARROW, ENTER, ESCAPE, UP_ARROW, TAB} from '@angular/cdk/keycodes';\nimport {\n  ConnectedPositionStrategy,\n  Overlay,\n  OverlayRef,\n  OverlayConfig,\n  PositionStrategy,\n  ScrollStrategy,\n} from '@angular/cdk/overlay';\nimport {TemplatePortal} from '@angular/cdk/portal';\nimport {filter} from 'rxjs/operators/filter';\nimport {take} from 'rxjs/operators/take';\nimport {switchMap} from 'rxjs/operators/switchMap';\nimport {tap} from 'rxjs/operators/tap';\nimport {delay} from 'rxjs/operators/delay';\nimport {\n  ChangeDetectorRef,\n  Directive,\n  ElementRef,\n  forwardRef,\n  Host,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  ViewContainerRef,\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {MatOption, MatOptionSelectionChange} from '@angular/material/core';\nimport {MatFormField} from '@angular/material/form-field';\nimport {DOCUMENT} from '@angular/common';\nimport {Observable} from 'rxjs/Observable';\nimport {Subject} from 'rxjs/Subject';\nimport {fromEvent} from 'rxjs/observable/fromEvent';\nimport {merge} from 'rxjs/observable/merge';\nimport {of as observableOf} from 'rxjs/observable/of';\nimport {Subscription} from 'rxjs/Subscription';\nimport {MatAutocomplete} from './autocomplete';\n\n\n/**\n * The following style constants are necessary to save here in order\n * to properly calculate the scrollTop of the panel. Because we are not\n * actually focusing the active item, scroll must be handled manually.\n */\n\n/** The height of each autocomplete option. */\nexport const AUTOCOMPLETE_OPTION_HEIGHT = 48;\n\n/** The total height of the autocomplete panel. */\nexport const AUTOCOMPLETE_PANEL_HEIGHT = 256;\n\n/** Injection token that determines the scroll handling while the autocomplete panel is open. */\nexport const MAT_AUTOCOMPLETE_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mat-autocomplete-scroll-strategy');\n\n/** @docs-private */\nexport function MAT_AUTOCOMPLETE_SCROLL_STRATEGY_PROVIDER_FACTORY(overlay: Overlay):\n    () => ScrollStrategy {\n  return () => overlay.scrollStrategies.reposition();\n}\n\n/** @docs-private */\nexport const MAT_AUTOCOMPLETE_SCROLL_STRATEGY_PROVIDER = {\n  provide: MAT_AUTOCOMPLETE_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_AUTOCOMPLETE_SCROLL_STRATEGY_PROVIDER_FACTORY,\n};\n\n/**\n * Provider that allows the autocomplete to register as a ControlValueAccessor.\n * @docs-private\n */\nexport const MAT_AUTOCOMPLETE_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatAutocompleteTrigger),\n  multi: true\n};\n\n/**\n * Creates an error to be thrown when attempting to use an autocomplete trigger without a panel.\n */\nexport function getMatAutocompleteMissingPanelError(): Error {\n  return Error('Attempting to open an undefined instance of `mat-autocomplete`. ' +\n               'Make sure that the id passed to the `matAutocomplete` is correct and that ' +\n               'you\\'re attempting to open it after the ngAfterContentInit hook.');\n}\n\n@Directive({\n  selector: `input[matAutocomplete], textarea[matAutocomplete]`,\n  host: {\n    'role': 'combobox',\n    'autocomplete': 'off',\n    'aria-autocomplete': 'list',\n    '[attr.aria-activedescendant]': 'activeOption?.id',\n    '[attr.aria-expanded]': 'panelOpen.toString()',\n    '[attr.aria-owns]': 'autocomplete?.id',\n    // Note: we use `focusin`, as opposed to `focus`, in order to open the panel\n    // a little earlier. This avoids issues where IE delays the focusing of the input.\n    '(focusin)': '_handleFocus()',\n    '(blur)': '_onTouched()',\n    '(input)': '_handleInput($event)',\n    '(keydown)': '_handleKeydown($event)',\n  },\n  providers: [MAT_AUTOCOMPLETE_VALUE_ACCESSOR]\n})\nexport class MatAutocompleteTrigger implements ControlValueAccessor, OnDestroy {\n  private _overlayRef: OverlayRef | null;\n  private _portal: TemplatePortal<any>;\n  private _panelOpen: boolean = false;\n\n  /** Strategy that is used to position the panel. */\n  private _positionStrategy: ConnectedPositionStrategy;\n\n  /** Whether or not the label state is being overridden. */\n  private _manuallyFloatingLabel = false;\n\n  /** The subscription for closing actions (some are bound to document). */\n  private _closingActionsSubscription: Subscription;\n\n  /** Stream of escape keyboard events. */\n  private _escapeEventStream = new Subject<void>();\n\n  /** View -> model callback called when value changes */\n  _onChange: (value: any) => void = () => {};\n\n  /** View -> model callback called when autocomplete has been touched */\n  _onTouched = () => {};\n\n  /* The autocomplete panel to be attached to this trigger. */\n  @Input('matAutocomplete') autocomplete: MatAutocomplete;\n\n  constructor(private _element: ElementRef, private _overlay: Overlay,\n              private _viewContainerRef: ViewContainerRef,\n              private _zone: NgZone,\n              private _changeDetectorRef: ChangeDetectorRef,\n              @Inject(MAT_AUTOCOMPLETE_SCROLL_STRATEGY) private _scrollStrategy,\n              @Optional() private _dir: Directionality,\n              @Optional() @Host() private _formField: MatFormField,\n              @Optional() @Inject(DOCUMENT) private _document: any) {}\n\n  ngOnDestroy() {\n    this._destroyPanel();\n    this._escapeEventStream.complete();\n  }\n\n  /* Whether or not the autocomplete panel is open. */\n  get panelOpen(): boolean {\n    return this._panelOpen && this.autocomplete.showPanel;\n  }\n\n  /** Opens the autocomplete suggestion panel. */\n  openPanel(): void {\n    this._attachOverlay();\n    this._floatLabel();\n  }\n\n  /** Closes the autocomplete suggestion panel. */\n  closePanel(): void {\n    this._resetLabel();\n\n    if (this._panelOpen) {\n      this.autocomplete._isOpen = this._panelOpen = false;\n\n      if (this._overlayRef && this._overlayRef.hasAttached()) {\n        this._overlayRef.detach();\n        this._closingActionsSubscription.unsubscribe();\n      }\n\n      // We need to trigger change detection manually, because\n      // `fromEvent` doesn't seem to do it at the proper time.\n      // This ensures that the label is reset when the\n      // user clicks outside.\n      this._changeDetectorRef.detectChanges();\n    }\n  }\n\n  /**\n   * A stream of actions that should close the autocomplete panel, including\n   * when an option is selected, on blur, and when TAB is pressed.\n   */\n  get panelClosingActions(): Observable<MatOptionSelectionChange> {\n    return merge(\n      this.optionSelections,\n      this.autocomplete._keyManager.tabOut.pipe(filter(() => this._panelOpen)),\n      this._escapeEventStream,\n      this._outsideClickStream,\n      this._overlayRef ?\n          this._overlayRef.detachments().pipe(filter(() => this._panelOpen)) :\n          observableOf()\n    );\n  }\n\n  /** Stream of autocomplete option selections. */\n  get optionSelections(): Observable<MatOptionSelectionChange> {\n    return merge(...this.autocomplete.options.map(option => option.onSelectionChange));\n  }\n\n  /** The currently active option, coerced to MatOption type. */\n  get activeOption(): MatOption | null {\n    if (this.autocomplete && this.autocomplete._keyManager) {\n      return this.autocomplete._keyManager.activeItem;\n    }\n\n    return null;\n  }\n\n  /** Stream of clicks outside of the autocomplete panel. */\n  private get _outsideClickStream(): Observable<any> {\n    if (!this._document) {\n      return observableOf(null);\n    }\n\n    return merge(\n      fromEvent(this._document, 'click'),\n      fromEvent(this._document, 'touchend')\n    )\n    .pipe(filter((event: MouseEvent | TouchEvent) => {\n      const clickTarget = event.target as HTMLElement;\n      const formField = this._formField ?\n          this._formField._elementRef.nativeElement : null;\n\n      return this._panelOpen &&\n              clickTarget !== this._element.nativeElement &&\n              (!formField || !formField.contains(clickTarget)) &&\n              (!!this._overlayRef && !this._overlayRef.overlayElement.contains(clickTarget));\n    }));\n  }\n\n  /**\n   * Sets the autocomplete's value. Part of the ControlValueAccessor interface\n   * required to integrate with Angular's core forms API.\n   *\n   * @param value New value to be written to the model.\n   */\n  writeValue(value: any): void {\n    Promise.resolve(null).then(() => this._setTriggerValue(value));\n  }\n\n  /**\n   * Saves a callback function to be invoked when the autocomplete's value\n   * changes from user input. Part of the ControlValueAccessor interface\n   * required to integrate with Angular's core forms API.\n   *\n   * @param fn Callback to be triggered when the value changes.\n   */\n  registerOnChange(fn: (value: any) => {}): void {\n    this._onChange = fn;\n  }\n\n  /**\n   * Saves a callback function to be invoked when the autocomplete is blurred\n   * by the user. Part of the ControlValueAccessor interface required\n   * to integrate with Angular's core forms API.\n   *\n   * @param fn Callback to be triggered when the component has been touched.\n   */\n  registerOnTouched(fn: () => {}) {\n    this._onTouched = fn;\n  }\n\n  /**\n   * Disables the input. Implemented as a part of `ControlValueAccessor`.\n   * @param isDisabled Whether the component should be disabled.\n   */\n  setDisabledState(isDisabled: boolean) {\n    this._element.nativeElement.disabled = isDisabled;\n  }\n\n  _handleKeydown(event: KeyboardEvent): void {\n    const keyCode = event.keyCode;\n\n    if (keyCode === ESCAPE && this.panelOpen) {\n      this._resetActiveItem();\n      this._escapeEventStream.next();\n      event.stopPropagation();\n    } else if (this.activeOption && keyCode === ENTER && this.panelOpen) {\n      this.activeOption._selectViaInteraction();\n      this._resetActiveItem();\n      event.preventDefault();\n    } else {\n      const prevActiveItem = this.autocomplete._keyManager.activeItem;\n      const isArrowKey = keyCode === UP_ARROW || keyCode === DOWN_ARROW;\n\n      if (this.panelOpen || keyCode === TAB) {\n        this.autocomplete._keyManager.onKeydown(event);\n      } else if (isArrowKey) {\n        this.openPanel();\n      }\n\n      if (isArrowKey || this.autocomplete._keyManager.activeItem !== prevActiveItem) {\n        this._scrollToOption();\n      }\n    }\n  }\n\n  _handleInput(event: KeyboardEvent): void {\n    // We need to ensure that the input is focused, because IE will fire the `input`\n    // event on focus/blur/load if the input has a placeholder. See:\n    // https://connect.microsoft.com/IE/feedback/details/885747/\n    if (document.activeElement === event.target) {\n      this._onChange((event.target as HTMLInputElement).value);\n      this.openPanel();\n    }\n  }\n\n  _handleFocus(): void {\n    if (!this._element.nativeElement.readOnly) {\n      this._attachOverlay();\n      this._floatLabel(true);\n    }\n  }\n\n  /**\n   * In \"auto\" mode, the label will animate down as soon as focus is lost.\n   * This causes the value to jump when selecting an option with the mouse.\n   * This method manually floats the label until the panel can be closed.\n   * @param shouldAnimate Whether the label should be animated when it is floated.\n   */\n  private _floatLabel(shouldAnimate = false): void {\n    if (this._formField && this._formField.floatLabel === 'auto') {\n      if (shouldAnimate) {\n        this._formField._animateAndLockLabel();\n      } else {\n        this._formField.floatLabel = 'always';\n      }\n\n      this._manuallyFloatingLabel = true;\n    }\n  }\n\n  /** If the label has been manually elevated, return it to its normal state. */\n  private _resetLabel(): void  {\n    if (this._manuallyFloatingLabel) {\n      this._formField.floatLabel = 'auto';\n      this._manuallyFloatingLabel = false;\n    }\n  }\n\n  /**\n   * Given that we are not actually focusing active options, we must manually adjust scroll\n   * to reveal options below the fold. First, we find the offset of the option from the top\n   * of the panel. If that offset is below the fold, the new scrollTop will be the offset -\n   * the panel height + the option height, so the active option will be just visible at the\n   * bottom of the panel. If that offset is above the top of the visible panel, the new scrollTop\n   * will become the offset. If that offset is visible within the panel already, the scrollTop is\n   * not adjusted.\n   */\n  private _scrollToOption(): void {\n    const activeOptionIndex = this.autocomplete._keyManager.activeItemIndex || 0;\n    const labelCount = MatOption.countGroupLabelsBeforeOption(activeOptionIndex,\n        this.autocomplete.options, this.autocomplete.optionGroups);\n    const optionOffset = (activeOptionIndex + labelCount) * AUTOCOMPLETE_OPTION_HEIGHT;\n    const panelTop = this.autocomplete._getScrollTop();\n\n    if (optionOffset < panelTop) {\n      // Scroll up to reveal selected option scrolled above the panel top\n      this.autocomplete._setScrollTop(optionOffset);\n    } else if (optionOffset + AUTOCOMPLETE_OPTION_HEIGHT > panelTop + AUTOCOMPLETE_PANEL_HEIGHT) {\n      // Scroll down to reveal selected option scrolled below the panel bottom\n      const newScrollTop = optionOffset - AUTOCOMPLETE_PANEL_HEIGHT + AUTOCOMPLETE_OPTION_HEIGHT;\n      this.autocomplete._setScrollTop(Math.max(0, newScrollTop));\n    }\n  }\n\n  /**\n   * This method listens to a stream of panel closing actions and resets the\n   * stream every time the option list changes.\n   */\n  private _subscribeToClosingActions(): Subscription {\n    const firstStable = this._zone.onStable.asObservable().pipe(take(1));\n    const optionChanges = this.autocomplete.options.changes.pipe(\n      tap(() => this._positionStrategy.recalculateLastPosition()),\n      // Defer emitting to the stream until the next tick, because changing\n      // bindings in here will cause \"changed after checked\" errors.\n      delay(0)\n    );\n\n    // When the zone is stable initially, and when the option list changes...\n    return merge(firstStable, optionChanges)\n      .pipe(\n        // create a new stream of panelClosingActions, replacing any previous streams\n        // that were created, and flatten it so our stream only emits closing events...\n        switchMap(() => {\n          this._resetActiveItem();\n          this.autocomplete._setVisibility();\n          return this.panelClosingActions;\n        }),\n        // when the first closing event occurs...\n        take(1)\n      )\n      // set the value, close the panel, and complete.\n      .subscribe(event => this._setValueAndClose(event));\n  }\n\n  /** Destroys the autocomplete suggestion panel. */\n  private _destroyPanel(): void {\n    if (this._overlayRef) {\n      this.closePanel();\n      this._overlayRef.dispose();\n      this._overlayRef = null;\n    }\n  }\n\n  private _setTriggerValue(value: any): void {\n    const toDisplay = this.autocomplete && this.autocomplete.displayWith ?\n      this.autocomplete.displayWith(value) :\n      value;\n\n    // Simply falling back to an empty string if the display value is falsy does not work properly.\n    // The display value can also be the number zero and shouldn't fall back to an empty string.\n    const inputValue = toDisplay != null ? toDisplay : '';\n\n    // If it's used within a `MatFormField`, we should set it through the property so it can go\n    // through change detection.\n    if (this._formField) {\n      this._formField._control.value = inputValue;\n    } else {\n      this._element.nativeElement.value = inputValue;\n    }\n  }\n\n   /**\n   * This method closes the panel, and if a value is specified, also sets the associated\n   * control to that value. It will also mark the control as dirty if this interaction\n   * stemmed from the user.\n   */\n  private _setValueAndClose(event: MatOptionSelectionChange | null): void {\n    if (event && event.source) {\n      this._clearPreviousSelectedOption(event.source);\n      this._setTriggerValue(event.source.value);\n      this._onChange(event.source.value);\n      this._element.nativeElement.focus();\n      this.autocomplete._emitSelectEvent(event.source);\n    }\n\n    this.closePanel();\n  }\n\n  /**\n   * Clear any previous selected option and emit a selection change event for this option\n   */\n  private _clearPreviousSelectedOption(skip: MatOption) {\n    this.autocomplete.options.forEach(option => {\n      if (option != skip && option.selected) {\n        option.deselect();\n      }\n    });\n  }\n\n  private _attachOverlay(): void {\n    if (!this.autocomplete) {\n      throw getMatAutocompleteMissingPanelError();\n    }\n\n    if (!this._overlayRef) {\n      this._portal = new TemplatePortal(this.autocomplete.template, this._viewContainerRef);\n      this._overlayRef = this._overlay.create(this._getOverlayConfig());\n    } else {\n      /** Update the panel width, in case the host width has changed */\n      this._overlayRef.updateSize({width: this._getHostWidth()});\n    }\n\n    if (this._overlayRef && !this._overlayRef.hasAttached()) {\n      this._overlayRef.attach(this._portal);\n      this._closingActionsSubscription = this._subscribeToClosingActions();\n    }\n\n    this.autocomplete._setVisibility();\n    this.autocomplete._isOpen = this._panelOpen = true;\n  }\n\n  private _getOverlayConfig(): OverlayConfig {\n    return new OverlayConfig({\n      positionStrategy: this._getOverlayPosition(),\n      scrollStrategy: this._scrollStrategy(),\n      width: this._getHostWidth(),\n      direction: this._dir ? this._dir.value : 'ltr'\n    });\n  }\n\n  private _getOverlayPosition(): PositionStrategy {\n    this._positionStrategy =  this._overlay.position().connectedTo(\n        this._getConnectedElement(),\n        {originX: 'start', originY: 'bottom'}, {overlayX: 'start', overlayY: 'top'})\n        .withFallbackPosition(\n            {originX: 'start', originY: 'top'}, {overlayX: 'start', overlayY: 'bottom'}\n        );\n    return this._positionStrategy;\n  }\n\n  private _getConnectedElement(): ElementRef {\n    return this._formField ? this._formField._connectionContainerRef : this._element;\n  }\n\n  /** Returns the width of the input element, so the panel width can match it. */\n  private _getHostWidth(): number {\n    return this._getConnectedElement().nativeElement.getBoundingClientRect().width;\n  }\n\n  /** Reset active item to -1 so arrow events will activate the correct options.*/\n  private _resetActiveItem(): void {\n    this.autocomplete._keyManager.setActiveItem(-1);\n  }\n\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {ElementRef, NgZone} from '@angular/core';\nimport {Platform, supportsPassiveEventListeners} from '@angular/cdk/platform';\nimport {RippleRef, RippleState} from './ripple-ref';\n\n/** Fade-in duration for the ripples. Can be modified with the speedFactor option. */\nexport const RIPPLE_FADE_IN_DURATION = 450;\n\n/** Fade-out duration for the ripples in milliseconds. This can't be modified by the speedFactor. */\nexport const RIPPLE_FADE_OUT_DURATION = 400;\n\n/**\n * Timeout for ignoring mouse events. Mouse events will be temporary ignored after touch\n * events to avoid synthetic mouse events.\n */\nconst IGNORE_MOUSE_EVENTS_TIMEOUT = 800;\n\nexport type RippleConfig = {\n  color?: string;\n  centered?: boolean;\n  radius?: number;\n  speedFactor?: number;\n  persistent?: boolean;\n};\n\n/**\n * Interface that describes the target for launching ripples.\n * It defines the ripple configuration and disabled state for interaction ripples.\n * @docs-private\n */\nexport interface RippleTarget {\n  /** Configuration for ripples that are launched on pointer down. */\n  rippleConfig: RippleConfig;\n\n  /** Whether ripples on pointer down should be disabled. */\n  rippleDisabled: boolean;\n}\n\n/**\n * Helper service that performs DOM manipulations. Not intended to be used outside this module.\n * The constructor takes a reference to the ripple directive's host element and a map of DOM\n * event handlers to be installed on the element that triggers ripple animations.\n * This will eventually become a custom renderer once Angular support exists.\n * @docs-private\n */\nexport class RippleRenderer {\n\n  /** Element where the ripples are being added to. */\n  private _containerElement: HTMLElement;\n\n  /** Element which triggers the ripple elements on mouse events. */\n  private _triggerElement: HTMLElement | null;\n\n  /** Whether the pointer is currently down or not. */\n  private _isPointerDown = false;\n\n  /** Events to be registered on the trigger element. */\n  private _triggerEvents = new Map<string, any>();\n\n  /** Set of currently active ripple references. */\n  private _activeRipples = new Set<RippleRef>();\n\n  /** Time in milliseconds when the last touchstart event happened. */\n  private _lastTouchStartEvent: number;\n\n  /** Options that apply to all the event listeners that are bound by the renderer. */\n  private _eventOptions = supportsPassiveEventListeners() ? ({passive: true} as any) : false;\n\n  constructor(private _target: RippleTarget,\n              private _ngZone: NgZone,\n              elementRef: ElementRef,\n              platform: Platform) {\n\n    // Only do anything if we're on the browser.\n    if (platform.isBrowser) {\n      this._containerElement = elementRef.nativeElement;\n\n      // Specify events which need to be registered on the trigger.\n      this._triggerEvents.set('mousedown', this.onMousedown);\n      this._triggerEvents.set('mouseup', this.onPointerUp);\n      this._triggerEvents.set('mouseleave', this.onPointerUp);\n\n      this._triggerEvents.set('touchstart', this.onTouchStart);\n      this._triggerEvents.set('touchend', this.onPointerUp);\n    }\n  }\n\n  /**\n   * Fades in a ripple at the given coordinates.\n   * @param x Coordinate within the element, along the X axis at which to start the ripple.\n   * @param y Coordinate within the element, along the Y axis at which to start the ripple.\n   * @param config Extra ripple options.\n   */\n  fadeInRipple(x: number, y: number, config: RippleConfig = {}): RippleRef {\n    const containerRect = this._containerElement.getBoundingClientRect();\n\n    if (config.centered) {\n      x = containerRect.left + containerRect.width / 2;\n      y = containerRect.top + containerRect.height / 2;\n    }\n\n    const radius = config.radius || distanceToFurthestCorner(x, y, containerRect);\n    const duration = RIPPLE_FADE_IN_DURATION / (config.speedFactor || 1);\n    const offsetX = x - containerRect.left;\n    const offsetY = y - containerRect.top;\n\n    const ripple = document.createElement('div');\n    ripple.classList.add('mat-ripple-element');\n\n    ripple.style.left = `${offsetX - radius}px`;\n    ripple.style.top = `${offsetY - radius}px`;\n    ripple.style.height = `${radius * 2}px`;\n    ripple.style.width = `${radius * 2}px`;\n\n    // If the color is not set, the default CSS color will be used.\n    ripple.style.backgroundColor = config.color || null;\n    ripple.style.transitionDuration = `${duration}ms`;\n\n    this._containerElement.appendChild(ripple);\n\n    // By default the browser does not recalculate the styles of dynamically created\n    // ripple elements. This is critical because then the `scale` would not animate properly.\n    enforceStyleRecalculation(ripple);\n\n    ripple.style.transform = 'scale(1)';\n\n    // Exposed reference to the ripple that will be returned.\n    const rippleRef = new RippleRef(this, ripple, config);\n\n    rippleRef.state = RippleState.FADING_IN;\n\n    // Add the ripple reference to the list of all active ripples.\n    this._activeRipples.add(rippleRef);\n\n    // Wait for the ripple element to be completely faded in.\n    // Once it's faded in, the ripple can be hidden immediately if the mouse is released.\n    this.runTimeoutOutsideZone(() => {\n      rippleRef.state = RippleState.VISIBLE;\n\n      if (!config.persistent && !this._isPointerDown) {\n        rippleRef.fadeOut();\n      }\n    }, duration);\n\n    return rippleRef;\n  }\n\n  /** Fades out a ripple reference. */\n  fadeOutRipple(rippleRef: RippleRef) {\n    // For ripples that are not active anymore, don't re-un the fade-out animation.\n    if (!this._activeRipples.delete(rippleRef)) {\n      return;\n    }\n\n    const rippleEl = rippleRef.element;\n\n    rippleEl.style.transitionDuration = `${RIPPLE_FADE_OUT_DURATION}ms`;\n    rippleEl.style.opacity = '0';\n\n    rippleRef.state = RippleState.FADING_OUT;\n\n    // Once the ripple faded out, the ripple can be safely removed from the DOM.\n    this.runTimeoutOutsideZone(() => {\n      rippleRef.state = RippleState.HIDDEN;\n      rippleEl.parentNode!.removeChild(rippleEl);\n    }, RIPPLE_FADE_OUT_DURATION);\n  }\n\n  /** Fades out all currently active ripples. */\n  fadeOutAll() {\n    this._activeRipples.forEach(ripple => ripple.fadeOut());\n  }\n\n  /** Sets up the trigger event listeners */\n  setupTriggerEvents(element: HTMLElement) {\n    if (!element || element === this._triggerElement) {\n      return;\n    }\n\n    // Remove all previously registered event listeners from the trigger element.\n    this._removeTriggerEvents();\n\n    this._ngZone.runOutsideAngular(() => {\n      this._triggerEvents.forEach((fn, type) =>\n          element.addEventListener(type, fn, this._eventOptions));\n    });\n\n    this._triggerElement = element;\n  }\n\n  /** Function being called whenever the trigger is being pressed using mouse. */\n  private onMousedown = (event: MouseEvent) => {\n    const isSyntheticEvent = this._lastTouchStartEvent &&\n        Date.now() < this._lastTouchStartEvent + IGNORE_MOUSE_EVENTS_TIMEOUT;\n\n    if (!this._target.rippleDisabled && !isSyntheticEvent) {\n      this._isPointerDown = true;\n      this.fadeInRipple(event.clientX, event.clientY, this._target.rippleConfig);\n    }\n  }\n\n  /** Function being called whenever the trigger is being pressed using touch. */\n  private onTouchStart = (event: TouchEvent) => {\n    if (!this._target.rippleDisabled) {\n      // Some browsers fire mouse events after a `touchstart` event. Those synthetic mouse\n      // events will launch a second ripple if we don't ignore mouse events for a specific\n      // time after a touchstart event.\n      this._lastTouchStartEvent = Date.now();\n      this._isPointerDown = true;\n\n      this.fadeInRipple(\n          event.touches[0].clientX, event.touches[0].clientY, this._target.rippleConfig);\n    }\n  }\n\n  /** Function being called whenever the trigger is being released. */\n  private onPointerUp = () => {\n    if (!this._isPointerDown) {\n      return;\n    }\n\n    this._isPointerDown = false;\n\n    // Fade-out all ripples that are completely visible and not persistent.\n    this._activeRipples.forEach(ripple => {\n      if (!ripple.config.persistent && ripple.state === RippleState.VISIBLE) {\n        ripple.fadeOut();\n      }\n    });\n  }\n\n  /** Runs a timeout outside of the Angular zone to avoid triggering the change detection. */\n  private runTimeoutOutsideZone(fn: Function, delay = 0) {\n    this._ngZone.runOutsideAngular(() => setTimeout(fn, delay));\n  }\n\n  /** Removes previously registered event listeners from the trigger element. */\n  _removeTriggerEvents() {\n    if (this._triggerElement) {\n      this._triggerEvents.forEach((fn, type) => {\n        this._triggerElement!.removeEventListener(type, fn, this._eventOptions);\n      });\n    }\n  }\n}\n\n/** Enforces a style recalculation of a DOM element by computing its styles. */\nfunction enforceStyleRecalculation(element: HTMLElement) {\n  // Enforce a style recalculation by calling `getComputedStyle` and accessing any property.\n  // Calling `getPropertyValue` is important to let optimizers know that this is not a noop.\n  // See: https://gist.github.com/paulirish/5d52fb081b3570c81e3a\n  window.getComputedStyle(element).getPropertyValue('opacity');\n}\n\n/**\n * Returns the distance from the point (x, y) to the furthest corner of a rectangle.\n */\nfunction distanceToFurthestCorner(x: number, y: number, rect: ClientRect) {\n  const distX = Math.max(Math.abs(x - rect.left), Math.abs(x - rect.right));\n  const distY = Math.max(Math.abs(y - rect.top), Math.abs(y - rect.bottom));\n  return Math.sqrt(distX * distX + distY * distY);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * When constructing a Date, the month is zero-based. This can be confusing, since people are\n * used to seeing them one-based. So we create these aliases to make writing the tests easier.\n */\nexport const JAN = 0, FEB = 1, MAR = 2, APR = 3, MAY = 4, JUN = 5, JUL = 6, AUG = 7, SEP = 8,\n    OCT = 9, NOV = 10, DEC = 11;\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/** Time and timing curve for expansion panel animations. */\nexport const EXPANSION_PANEL_ANIMATION_TIMING = '225ms cubic-bezier(0.4,0.0,0.2,1)';\n\n/** Animations used by the Material expansion panel. */\nexport const matExpansionAnimations: {\n  readonly indicatorRotate: AnimationTriggerMetadata;\n  readonly expansionHeaderHeight: AnimationTriggerMetadata;\n  readonly bodyExpansion: AnimationTriggerMetadata;\n} = {\n  /** Animation that rotates the indicator arrow. */\n  indicatorRotate: trigger('indicatorRotate', [\n    state('collapsed', style({transform: 'rotate(0deg)'})),\n    state('expanded', style({transform: 'rotate(180deg)'})),\n    transition('expanded <=> collapsed', animate(EXPANSION_PANEL_ANIMATION_TIMING)),\n  ]),\n\n  /** Animation that expands and collapses the panel header height. */\n  expansionHeaderHeight: trigger('expansionHeight', [\n    state('collapsed', style({\n      height: '{{collapsedHeight}}',\n    }), {\n      params: {collapsedHeight: '48px'},\n    }),\n    state('expanded', style({\n      height: '{{expandedHeight}}'\n    }), {\n      params: {expandedHeight: '64px'}\n    }),\n    transition('expanded <=> collapsed', animate(EXPANSION_PANEL_ANIMATION_TIMING)),\n  ]),\n\n  /** Animation that expands and collapses the panel content. */\n  bodyExpansion: trigger('bodyExpansion', [\n    state('collapsed', style({height: '0px', visibility: 'hidden'})),\n    state('expanded', style({height: '*', visibility: 'visible'})),\n    transition('expanded <=> collapsed', animate(EXPANSION_PANEL_ANIMATION_TIMING)),\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {ActiveDescendantKeyManager} from '@angular/cdk/a11y';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {SelectionModel} from '@angular/cdk/collections';\nimport {DOWN_ARROW, END, ENTER, HOME, SPACE, UP_ARROW} from '@angular/cdk/keycodes';\nimport {\n  CdkConnectedOverlay,\n  Overlay,\n  RepositionScrollStrategy,\n  ScrollStrategy,\n  ViewportRuler,\n} from '@angular/cdk/overlay';\nimport {filter} from 'rxjs/operators/filter';\nimport {take} from 'rxjs/operators/take';\nimport {map} from 'rxjs/operators/map';\nimport {switchMap} from 'rxjs/operators/switchMap';\nimport {startWith} from 'rxjs/operators/startWith';\nimport {takeUntil} from 'rxjs/operators/takeUntil';\nimport {\n  AfterContentInit,\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  ContentChildren,\n  Directive,\n  DoCheck,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  InjectionToken,\n  Input,\n  isDevMode,\n  NgZone,\n  OnChanges,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Output,\n  QueryList,\n  Self,\n  SimpleChanges,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {\n  ControlValueAccessor,\n  FormGroupDirective,\n  NgControl,\n  NgForm\n} from '@angular/forms';\nimport {\n  CanDisable,\n  ErrorStateMatcher,\n  CanUpdateErrorState,\n  mixinErrorState,\n  HasTabIndex,\n  MatOptgroup,\n  MatOption,\n  MatOptionSelectionChange,\n  mixinDisabled,\n  mixinTabIndex,\n  MAT_OPTION_PARENT_COMPONENT,\n  mixinDisableRipple,\n  CanDisableRipple,\n} from '@angular/material/core';\nimport {MatFormField, MatFormFieldControl} from '@angular/material/form-field';\nimport {Observable} from 'rxjs/Observable';\nimport {merge} from 'rxjs/observable/merge';\nimport {Subject} from 'rxjs/Subject';\nimport {defer} from 'rxjs/observable/defer';\nimport {matSelectAnimations} from './select-animations';\nimport {\n  getMatSelectDynamicMultipleError,\n  getMatSelectNonArrayValueError,\n  getMatSelectNonFunctionValueError,\n} from './select-errors';\n\n\nlet nextUniqueId = 0;\n\n/**\n * The following style constants are necessary to save here in order\n * to properly calculate the alignment of the selected option over\n * the trigger element.\n */\n\n/** The max height of the select's overlay panel */\nexport const SELECT_PANEL_MAX_HEIGHT = 256;\n\n/** The panel's padding on the x-axis */\nexport const SELECT_PANEL_PADDING_X = 16;\n\n/** The panel's x axis padding if it is indented (e.g. there is an option group). */\nexport const SELECT_PANEL_INDENT_PADDING_X = SELECT_PANEL_PADDING_X * 2;\n\n/** The height of the select items in `em` units. */\nexport const SELECT_ITEM_HEIGHT_EM = 3;\n\n/**\n * Distance between the panel edge and the option text in\n * multi-selection mode.\n *\n * (SELECT_PANEL_PADDING_X * 1.5) + 20 = 44\n * The padding is multiplied by 1.5 because the checkbox's margin is half the padding.\n * The checkbox width is 20px.\n */\nexport const SELECT_MULTIPLE_PANEL_PADDING_X = SELECT_PANEL_PADDING_X * 1.5 + 20;\n\n/**\n * The select panel will only \"fit\" inside the viewport if it is positioned at\n * this value or more away from the viewport boundary.\n */\nexport const SELECT_PANEL_VIEWPORT_PADDING = 8;\n\n/** Injection token that determines the scroll handling while a select is open. */\nexport const MAT_SELECT_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mat-select-scroll-strategy');\n\n/** @docs-private */\nexport function MAT_SELECT_SCROLL_STRATEGY_PROVIDER_FACTORY(overlay: Overlay):\n    () => RepositionScrollStrategy {\n  return () => overlay.scrollStrategies.reposition();\n}\n\n/** @docs-private */\nexport const MAT_SELECT_SCROLL_STRATEGY_PROVIDER = {\n  provide: MAT_SELECT_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_SELECT_SCROLL_STRATEGY_PROVIDER_FACTORY,\n};\n\n/** Change event object that is emitted when the select value has changed. */\nexport class MatSelectChange {\n  constructor(\n    /** Reference to the select that emitted the change event. */\n    public source: MatSelect,\n    /** Current value of the select that emitted the event. */\n    public value: any) { }\n}\n\n// Boilerplate for applying mixins to MatSelect.\n/** @docs-private */\nexport class MatSelectBase {\n  constructor(public _elementRef: ElementRef,\n              public _defaultErrorStateMatcher: ErrorStateMatcher,\n              public _parentForm: NgForm,\n              public _parentFormGroup: FormGroupDirective,\n              public ngControl: NgControl) {}\n}\nexport const _MatSelectMixinBase = mixinDisableRipple(\n    mixinTabIndex(mixinDisabled(mixinErrorState(MatSelectBase))));\n\n\n/**\n * Allows the user to customize the trigger that is displayed when the select has a value.\n */\n@Directive({\n  selector: 'mat-select-trigger'\n})\nexport class MatSelectTrigger {}\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-select',\n  exportAs: 'matSelect',\n  templateUrl: 'select.html',\n  styleUrls: ['select.css'],\n  inputs: ['disabled', 'disableRipple', 'tabIndex'],\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {\n    'role': 'listbox',\n    '[attr.id]': 'id',\n    '[attr.tabindex]': 'tabIndex',\n    '[attr.aria-label]': '_ariaLabel',\n    '[attr.aria-labelledby]': 'ariaLabelledby',\n    '[attr.aria-required]': 'required.toString()',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.aria-invalid]': 'errorState',\n    '[attr.aria-owns]': '_optionIds',\n    '[attr.aria-multiselectable]': 'multiple',\n    '[attr.aria-describedby]': '_ariaDescribedby || null',\n    '[attr.aria-activedescendant]': '_getAriaActiveDescendant()',\n    '[class.mat-select-disabled]': 'disabled',\n    '[class.mat-select-invalid]': 'errorState',\n    '[class.mat-select-required]': 'required',\n    'class': 'mat-select',\n    '(keydown)': '_handleKeydown($event)',\n    '(focus)': '_onFocus()',\n    '(blur)': '_onBlur()',\n  },\n  animations: [\n    matSelectAnimations.transformPanel,\n    matSelectAnimations.fadeInContent\n  ],\n  providers: [\n    {provide: MatFormFieldControl, useExisting: MatSelect},\n    {provide: MAT_OPTION_PARENT_COMPONENT, useExisting: MatSelect}\n  ],\n})\nexport class MatSelect extends _MatSelectMixinBase implements AfterContentInit, OnChanges,\n    OnDestroy, OnInit, DoCheck, ControlValueAccessor, CanDisable, HasTabIndex,\n    MatFormFieldControl<any>, CanUpdateErrorState, CanDisableRipple {\n  /** Whether or not the overlay panel is open. */\n  private _panelOpen = false;\n\n  /** Whether filling out the select is required in the form.  */\n  private _required: boolean = false;\n\n  /** The scroll position of the overlay panel, calculated to center the selected option. */\n  private _scrollTop = 0;\n\n  /** The placeholder displayed in the trigger of the select. */\n  private _placeholder: string;\n\n  /** Whether the component is in multiple selection mode. */\n  private _multiple: boolean = false;\n\n  /** Comparison function to specify which option is displayed. Defaults to object equality. */\n  private _compareWith = (o1: any, o2: any) => o1 === o2;\n\n  /** Unique id for this input. */\n  private _uid = `mat-select-${nextUniqueId++}`;\n\n  /** Emits whenever the component is destroyed. */\n  private _destroy = new Subject<void>();\n\n  /** The last measured value for the trigger's client bounding rect. */\n  _triggerRect: ClientRect;\n\n  /** The aria-describedby attribute on the select for improved a11y. */\n  _ariaDescribedby: string;\n\n  /** The cached font-size of the trigger element. */\n  _triggerFontSize = 0;\n\n  /** Deals with the selection logic. */\n  _selectionModel: SelectionModel<MatOption>;\n\n  /** Manages keyboard events for options in the panel. */\n  _keyManager: ActiveDescendantKeyManager<MatOption>;\n\n  /** View -> model callback called when value changes */\n  _onChange: (value: any) => void = () => {};\n\n  /** View -> model callback called when select has been touched */\n  _onTouched = () => {};\n\n  /** The IDs of child options to be passed to the aria-owns attribute. */\n  _optionIds: string = '';\n\n  /** The value of the select panel's transform-origin property. */\n  _transformOrigin: string = 'top';\n\n  /** Whether the panel's animation is done. */\n  _panelDoneAnimating: boolean = false;\n\n  /** Strategy that will be used to handle scrolling while the select panel is open. */\n  _scrollStrategy = this._scrollStrategyFactory();\n\n  /**\n   * The y-offset of the overlay panel in relation to the trigger's top start corner.\n   * This must be adjusted to align the selected option text over the trigger text.\n   * when the panel opens. Will change based on the y-position of the selected option.\n   */\n  _offsetY = 0;\n\n  /**\n   * This position config ensures that the top \"start\" corner of the overlay\n   * is aligned with with the top \"start\" of the origin by default (overlapping\n   * the trigger completely). If the panel cannot fit below the trigger, it\n   * will fall back to a position above the trigger.\n   */\n  _positions = [\n    {\n      originX: 'start',\n      originY: 'top',\n      overlayX: 'start',\n      overlayY: 'top',\n    },\n    {\n      originX: 'start',\n      originY: 'bottom',\n      overlayX: 'start',\n      overlayY: 'bottom',\n    },\n  ];\n\n  /** Whether the select is focused. */\n  focused = false;\n\n  /** A name for this control that can be used by `mat-form-field`. */\n  controlType = 'mat-select';\n\n  /** Trigger that opens the select. */\n  @ViewChild('trigger') trigger: ElementRef;\n\n  /** Panel containing the select options. */\n  @ViewChild('panel') panel: ElementRef;\n\n  /** Overlay pane containing the options. */\n  @ViewChild(CdkConnectedOverlay) overlayDir: CdkConnectedOverlay;\n\n  /** All of the defined select options. */\n  @ContentChildren(MatOption, { descendants: true }) options: QueryList<MatOption>;\n\n  /** All of the defined groups of options. */\n  @ContentChildren(MatOptgroup) optionGroups: QueryList<MatOptgroup>;\n\n  /** Classes to be passed to the select panel. Supports the same syntax as `ngClass`. */\n  @Input() panelClass: string|string[]|Set<string>|{[key: string]: any};\n\n  /** User-supplied override of the trigger element. */\n  @ContentChild(MatSelectTrigger) customTrigger: MatSelectTrigger;\n\n  /** Placeholder to be shown if no value has been selected. */\n  @Input()\n  get placeholder() { return this._placeholder; }\n  set placeholder(value: string) {\n    this._placeholder = value;\n    this.stateChanges.next();\n  }\n\n  /** Whether the component is required. */\n  @Input()\n  get required() { return this._required; }\n  set required(value: any) {\n    this._required = coerceBooleanProperty(value);\n    this.stateChanges.next();\n  }\n\n  /** Whether the user should be allowed to select multiple options. */\n  @Input()\n  get multiple(): boolean { return this._multiple; }\n  set multiple(value: boolean) {\n    if (this._selectionModel) {\n      throw getMatSelectDynamicMultipleError();\n    }\n\n    this._multiple = coerceBooleanProperty(value);\n  }\n\n  /**\n   * A function to compare the option values with the selected values. The first argument\n   * is a value from an option. The second is a value from the selection. A boolean\n   * should be returned.\n   */\n  @Input()\n  get compareWith() { return this._compareWith; }\n  set compareWith(fn: (o1: any, o2: any) => boolean) {\n    if (typeof fn !== 'function') {\n      throw getMatSelectNonFunctionValueError();\n    }\n    this._compareWith = fn;\n    if (this._selectionModel) {\n      // A different comparator means the selection could change.\n      this._initializeSelection();\n    }\n  }\n\n  /** Value of the select control. */\n  @Input()\n  get value() { return this._value; }\n  set value(newValue: any) {\n    if (newValue !== this._value) {\n      this.writeValue(newValue);\n      this._value = newValue;\n    }\n  }\n  private _value: any;\n\n  /** Aria label of the select. If not specified, the placeholder will be used as label. */\n  @Input('aria-label') ariaLabel: string = '';\n\n  /** Input that can be used to specify the `aria-labelledby` attribute. */\n  @Input('aria-labelledby') ariaLabelledby: string;\n\n  /** An object used to control when error messages are shown. */\n  @Input() errorStateMatcher: ErrorStateMatcher;\n\n  /** Unique id of the element. */\n  @Input()\n  get id() { return this._id; }\n  set id(value: string) {\n    this._id = value || this._uid;\n    this.stateChanges.next();\n  }\n  private _id: string;\n\n  /** Combined stream of all of the child options' change events. */\n  optionSelectionChanges: Observable<MatOptionSelectionChange> = defer(() => {\n    if (this.options) {\n      return merge(...this.options.map(option => option.onSelectionChange));\n    }\n\n    return this._ngZone.onStable\n      .asObservable()\n      .pipe(take(1), switchMap(() => this.optionSelectionChanges));\n  });\n\n   /** Event emitted when the select has been opened. */\n   @Output() openedChange: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n   /** Event emitted when the select has been opened. */\n   @Output('opened')\n   get _openedStream(): Observable<void> {\n    return this.openedChange.pipe(filter(o => o), map(() => {}));\n  }\n\n  /** Event emitted when the select has been closed. */\n  @Output('closed')\n  get _closedStream(): Observable<void> {\n    return this.openedChange.pipe(filter(o => !o), map(() => {}));\n  }\n\n  /**\n   * Event emitted when the select has been opened.\n   * @deprecated Use `openedChange` instead.\n   */\n  @Output() onOpen: Observable<void> = this._openedStream;\n\n  /**\n   * Event emitted when the select has been closed.\n   * @deprecated Use `openedChange` instead.\n   */\n  @Output() onClose: Observable<void> = this._closedStream;\n\n   /** Event emitted when the selected value has been changed by the user. */\n  @Output() selectionChange: EventEmitter<MatSelectChange> = new EventEmitter<MatSelectChange>();\n\n  /**\n   * Event emitted when the selected value has been changed by the user.\n   * @deprecated Use `selectionChange` instead.\n   */\n  @Output() change: EventEmitter<MatSelectChange> = this.selectionChange;\n\n  /**\n   * Event that emits whenever the raw value of the select changes. This is here primarily\n   * to facilitate the two-way binding for the `value` input.\n   * @docs-private\n   */\n  @Output() valueChange = new EventEmitter<any>();\n\n  constructor(\n    private _viewportRuler: ViewportRuler,\n    private _changeDetectorRef: ChangeDetectorRef,\n    private _ngZone: NgZone,\n    _defaultErrorStateMatcher: ErrorStateMatcher,\n    elementRef: ElementRef,\n    @Optional() private _dir: Directionality,\n    @Optional() _parentForm: NgForm,\n    @Optional() _parentFormGroup: FormGroupDirective,\n    @Optional() private _parentFormField: MatFormField,\n    @Self() @Optional() public ngControl: NgControl,\n    @Attribute('tabindex') tabIndex: string,\n    @Inject(MAT_SELECT_SCROLL_STRATEGY) private _scrollStrategyFactory) {\n    super(elementRef, _defaultErrorStateMatcher, _parentForm,\n          _parentFormGroup, ngControl);\n\n    if (this.ngControl) {\n      this.ngControl.valueAccessor = this;\n    }\n\n    this.tabIndex = parseInt(tabIndex) || 0;\n\n    // Force setter to be called in case id was not specified.\n    this.id = this.id;\n  }\n\n  ngOnInit() {\n    this._selectionModel = new SelectionModel<MatOption>(this.multiple, undefined, false);\n    this.stateChanges.next();\n  }\n\n  ngAfterContentInit() {\n    this._initKeyManager();\n\n    this.options.changes.pipe(startWith(null), takeUntil(this._destroy)).subscribe(() => {\n      this._resetOptions();\n      this._initializeSelection();\n    });\n  }\n\n  ngDoCheck() {\n    if (this.ngControl) {\n      this.updateErrorState();\n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    // Updating the disabled state is handled by `mixinDisabled`, but we need to additionally let\n    // the parent form field know to run change detection when the disabled state changes.\n    if (changes.disabled) {\n      this.stateChanges.next();\n    }\n  }\n\n  ngOnDestroy() {\n    this._destroy.next();\n    this._destroy.complete();\n    this.stateChanges.complete();\n  }\n\n  /** Toggles the overlay panel open or closed. */\n  toggle(): void {\n    this.panelOpen ? this.close() : this.open();\n  }\n\n  /** Opens the overlay panel. */\n  open(): void {\n    if (this.disabled || !this.options || !this.options.length) {\n      return;\n    }\n\n    this._triggerRect = this.trigger.nativeElement.getBoundingClientRect();\n    // Note: The computed font-size will be a string pixel value (e.g. \"16px\").\n    // `parseInt` ignores the trailing 'px' and converts this to a number.\n    this._triggerFontSize = parseInt(getComputedStyle(this.trigger.nativeElement)['font-size']);\n\n    this._panelOpen = true;\n    this._calculateOverlayPosition();\n    this._highlightCorrectOption();\n    this._changeDetectorRef.markForCheck();\n\n    // Set the font size on the panel element once it exists.\n    this._ngZone.onStable.asObservable().pipe(take(1)).subscribe(() => {\n      if (this._triggerFontSize && this.overlayDir.overlayRef &&\n          this.overlayDir.overlayRef.overlayElement) {\n        this.overlayDir.overlayRef.overlayElement.style.fontSize = `${this._triggerFontSize}px`;\n      }\n    });\n  }\n\n  /** Closes the overlay panel and focuses the host element. */\n  close(): void {\n    if (this._panelOpen) {\n      this._panelOpen = false;\n      this._changeDetectorRef.markForCheck();\n      this._onTouched();\n      this.focus();\n    }\n  }\n\n  /**\n   * Sets the select's value. Part of the ControlValueAccessor interface\n   * required to integrate with Angular's core forms API.\n   *\n   * @param value New value to be written to the model.\n   */\n  writeValue(value: any): void {\n    if (this.options) {\n      this._setSelectionByValue(value);\n    }\n  }\n\n  /**\n   * Saves a callback function to be invoked when the select's value\n   * changes from user input. Part of the ControlValueAccessor interface\n   * required to integrate with Angular's core forms API.\n   *\n   * @param fn Callback to be triggered when the value changes.\n   */\n  registerOnChange(fn: (value: any) => void): void {\n    this._onChange = fn;\n  }\n\n  /**\n   * Saves a callback function to be invoked when the select is blurred\n   * by the user. Part of the ControlValueAccessor interface required\n   * to integrate with Angular's core forms API.\n   *\n   * @param fn Callback to be triggered when the component has been touched.\n   */\n  registerOnTouched(fn: () => {}): void {\n    this._onTouched = fn;\n  }\n\n  /**\n   * Disables the select. Part of the ControlValueAccessor interface required\n   * to integrate with Angular's core forms API.\n   *\n   * @param isDisabled Sets whether the component is disabled.\n   */\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n    this._changeDetectorRef.markForCheck();\n    this.stateChanges.next();\n  }\n\n  /** Whether or not the overlay panel is open. */\n  get panelOpen(): boolean {\n    return this._panelOpen;\n  }\n\n  /** The currently selected option. */\n  get selected(): MatOption | MatOption[] {\n    return this.multiple ? this._selectionModel.selected : this._selectionModel.selected[0];\n  }\n\n  /** The value displayed in the trigger. */\n  get triggerValue(): string {\n    if (this.empty) {\n      return '';\n    }\n\n    if (this._multiple) {\n      const selectedOptions = this._selectionModel.selected.map(option => option.viewValue);\n\n      if (this._isRtl()) {\n        selectedOptions.reverse();\n      }\n\n      // TODO(crisbeto): delimiter should be configurable for proper localization.\n      return selectedOptions.join(', ');\n    }\n\n    return this._selectionModel.selected[0].viewValue;\n  }\n\n  /** Whether the element is in RTL mode. */\n  _isRtl(): boolean {\n    return this._dir ? this._dir.value === 'rtl' : false;\n  }\n\n  /** Handles all keydown events on the select. */\n  _handleKeydown(event: KeyboardEvent): void {\n    if (!this.disabled) {\n      this.panelOpen ? this._handleOpenKeydown(event) : this._handleClosedKeydown(event);\n    }\n  }\n\n  /** Handles keyboard events while the select is closed. */\n  private _handleClosedKeydown(event: KeyboardEvent): void {\n    const keyCode = event.keyCode;\n    const isArrowKey = keyCode === DOWN_ARROW || keyCode === UP_ARROW;\n    const isOpenKey = keyCode === ENTER || keyCode === SPACE;\n\n    if (isOpenKey || ((this.multiple || event.altKey) && isArrowKey)) {\n      event.preventDefault(); // prevents the page from scrolling down when pressing space\n      this.open();\n    } else if (!this.multiple) {\n      this._keyManager.onKeydown(event);\n    }\n  }\n\n  /** Handles keyboard events when the selected is open. */\n  private _handleOpenKeydown(event: KeyboardEvent): void {\n    const keyCode = event.keyCode;\n\n    if (keyCode === HOME || keyCode === END) {\n      event.preventDefault();\n      keyCode === HOME ? this._keyManager.setFirstItemActive() :\n                         this._keyManager.setLastItemActive();\n    } else if ((keyCode === ENTER || keyCode === SPACE) && this._keyManager.activeItem) {\n      event.preventDefault();\n      this._keyManager.activeItem._selectViaInteraction();\n    } else {\n      const isArrowKey = keyCode === DOWN_ARROW || keyCode === UP_ARROW;\n      const previouslyFocusedIndex = this._keyManager.activeItemIndex;\n\n      this._keyManager.onKeydown(event);\n\n      if (this._multiple && isArrowKey && event.shiftKey && this._keyManager.activeItem &&\n          this._keyManager.activeItemIndex !== previouslyFocusedIndex) {\n        this._keyManager.activeItem._selectViaInteraction();\n      }\n    }\n  }\n\n  /**\n   * When the panel element is finished transforming in (though not fading in), it\n   * emits an event and focuses an option if the panel is open.\n   */\n  _onPanelDone(): void {\n    if (this.panelOpen) {\n      this._scrollTop = 0;\n      this.openedChange.emit(true);\n    } else {\n      this.openedChange.emit(false);\n      this._panelDoneAnimating = false;\n      this.overlayDir.offsetX = 0;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  /**\n   * When the panel content is done fading in, the _panelDoneAnimating property is\n   * set so the proper class can be added to the panel.\n   */\n  _onFadeInDone(): void {\n    this._panelDoneAnimating = this.panelOpen;\n    this._changeDetectorRef.markForCheck();\n  }\n\n  _onFocus() {\n    if (!this.disabled) {\n      this.focused = true;\n      this.stateChanges.next();\n    }\n  }\n\n  /**\n   * Calls the touched callback only if the panel is closed. Otherwise, the trigger will\n   * \"blur\" to the panel when it opens, causing a false positive.\n   */\n  _onBlur() {\n    if (!this.disabled && !this.panelOpen) {\n      this.focused = false;\n      this._onTouched();\n      this._changeDetectorRef.markForCheck();\n      this.stateChanges.next();\n    }\n  }\n\n  /**\n   * Callback that is invoked when the overlay panel has been attached.\n   */\n  _onAttached(): void {\n    this.overlayDir.positionChange.pipe(take(1)).subscribe(() => {\n      this._changeDetectorRef.detectChanges();\n      this._calculateOverlayOffsetX();\n      this.panel.nativeElement.scrollTop = this._scrollTop;\n    });\n  }\n\n  /** Returns the theme to be used on the panel. */\n  _getPanelTheme(): string {\n    return this._parentFormField ? `mat-${this._parentFormField.color}` : '';\n  }\n\n  /** Whether the select has a value. */\n  get empty(): boolean {\n    return !this._selectionModel || this._selectionModel.isEmpty();\n  }\n\n  private _initializeSelection(): void {\n    // Defer setting the value in order to avoid the \"Expression\n    // has changed after it was checked\" errors from Angular.\n    Promise.resolve().then(() => {\n      this._setSelectionByValue(this.ngControl ? this.ngControl.value : this._value);\n    });\n  }\n\n  /**\n   * Sets the selected option based on a value. If no option can be\n   * found with the designated value, the select trigger is cleared.\n   */\n  private _setSelectionByValue(value: any | any[], isUserInput = false): void {\n    if (this.multiple && value) {\n      if (!Array.isArray(value)) {\n        throw getMatSelectNonArrayValueError();\n      }\n\n      this._clearSelection();\n      value.forEach((currentValue: any) => this._selectValue(currentValue, isUserInput));\n      this._sortValues();\n    } else {\n      this._clearSelection();\n\n      const correspondingOption = this._selectValue(value, isUserInput);\n\n      // Shift focus to the active item. Note that we shouldn't do this in multiple\n      // mode, because we don't know what option the user interacted with last.\n      if (correspondingOption) {\n        this._keyManager.setActiveItem(this.options.toArray().indexOf(correspondingOption));\n      }\n    }\n\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /**\n   * Finds and selects and option based on its value.\n   * @returns Option that has the corresponding value.\n   */\n  private _selectValue(value: any, isUserInput = false): MatOption | undefined {\n    const correspondingOption = this.options.find((option: MatOption) => {\n      try {\n        // Treat null as a special reset value.\n        return option.value != null && this._compareWith(option.value,  value);\n      } catch (error) {\n        if (isDevMode()) {\n          // Notify developers of errors in their comparator.\n          console.warn(error);\n        }\n        return false;\n      }\n    });\n\n    if (correspondingOption) {\n      isUserInput ? correspondingOption._selectViaInteraction() : correspondingOption.select();\n      this._selectionModel.select(correspondingOption);\n      this.stateChanges.next();\n    }\n\n    return correspondingOption;\n  }\n\n\n  /**\n   * Clears the select trigger and deselects every option in the list.\n   * @param skip Option that should not be deselected.\n   */\n  private _clearSelection(skip?: MatOption): void {\n    this._selectionModel.clear();\n    this.options.forEach(option => {\n      if (option !== skip) {\n        option.deselect();\n      }\n    });\n    this.stateChanges.next();\n  }\n\n  /** Sets up a key manager to listen to keyboard events on the overlay panel. */\n  private _initKeyManager() {\n    this._keyManager = new ActiveDescendantKeyManager<MatOption>(this.options).withTypeAhead();\n    this._keyManager.tabOut.pipe(takeUntil(this._destroy)).subscribe(() => this.close());\n\n    this._keyManager.change.pipe(takeUntil(this._destroy)).subscribe(() => {\n      if (this._panelOpen && this.panel) {\n        this._scrollActiveOptionIntoView();\n      } else if (!this._panelOpen && !this.multiple && this._keyManager.activeItem) {\n        this._keyManager.activeItem._selectViaInteraction();\n      }\n    });\n  }\n\n  /** Drops current option subscriptions and IDs and resets from scratch. */\n  private _resetOptions(): void {\n    this.optionSelectionChanges.pipe(\n      takeUntil(merge(this._destroy, this.options.changes)),\n      filter(event => event.isUserInput)\n    ).subscribe(event => {\n      this._onSelect(event.source);\n\n      if (!this.multiple) {\n        this.close();\n      }\n    });\n\n    this._setOptionIds();\n  }\n\n  /** Invoked when an option is clicked. */\n  private _onSelect(option: MatOption): void {\n    const wasSelected = this._selectionModel.isSelected(option);\n\n    // TODO(crisbeto): handle blank/null options inside multi-select.\n    if (this.multiple) {\n      this._selectionModel.toggle(option);\n      this.stateChanges.next();\n      wasSelected ? option.deselect() : option.select();\n      this._sortValues();\n    } else {\n      this._clearSelection(option.value == null ? undefined : option);\n\n      if (option.value == null) {\n        this._propagateChanges(option.value);\n      } else {\n        this._selectionModel.select(option);\n        this.stateChanges.next();\n      }\n    }\n\n    if (wasSelected !== this._selectionModel.isSelected(option)) {\n      this._propagateChanges();\n    }\n  }\n\n  /**\n   * Sorts the model values, ensuring that they keep the same\n   * order that they have in the panel.\n   */\n  private _sortValues(): void {\n    if (this._multiple) {\n      this._selectionModel.clear();\n\n      this.options.forEach(option => {\n        if (option.selected) {\n          this._selectionModel.select(option);\n        }\n      });\n      this.stateChanges.next();\n    }\n  }\n\n  /** Emits change event to set the model value. */\n  private _propagateChanges(fallbackValue?: any): void {\n    let valueToEmit: any = null;\n\n    if (this.multiple) {\n      valueToEmit = (this.selected as MatOption[]).map(option => option.value);\n    } else {\n      valueToEmit = this.selected ? (this.selected as MatOption).value : fallbackValue;\n    }\n\n    this._value = valueToEmit;\n    this.valueChange.emit(valueToEmit);\n    this._onChange(valueToEmit);\n    this.selectionChange.emit(new MatSelectChange(this, valueToEmit));\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Records option IDs to pass to the aria-owns property. */\n  private _setOptionIds() {\n    this._optionIds = this.options.map(option => option.id).join(' ');\n  }\n\n  /**\n   * Highlights the selected item. If no option is selected, it will highlight\n   * the first item instead.\n   */\n  private _highlightCorrectOption(): void {\n    if (this._keyManager) {\n      if (this.empty) {\n        this._keyManager.setFirstItemActive();\n      } else {\n        this._keyManager.setActiveItem(this._getOptionIndex(this._selectionModel.selected[0])!);\n      }\n    }\n  }\n\n  /** Scrolls the active option into view. */\n  private _scrollActiveOptionIntoView(): void {\n    const itemHeight = this._getItemHeight();\n    const activeOptionIndex = this._keyManager.activeItemIndex || 0;\n    const labelCount = MatOption.countGroupLabelsBeforeOption(activeOptionIndex,\n        this.options, this.optionGroups);\n    const scrollOffset = (activeOptionIndex + labelCount) * itemHeight;\n    const panelTop = this.panel.nativeElement.scrollTop;\n\n    if (scrollOffset < panelTop) {\n      this.panel.nativeElement.scrollTop = scrollOffset;\n    } else if (scrollOffset + itemHeight > panelTop + SELECT_PANEL_MAX_HEIGHT) {\n      this.panel.nativeElement.scrollTop =\n          Math.max(0, scrollOffset - SELECT_PANEL_MAX_HEIGHT + itemHeight);\n    }\n  }\n\n  /** Focuses the select element. */\n  focus(): void {\n    this._elementRef.nativeElement.focus();\n  }\n\n  /** Gets the index of the provided option in the option list. */\n  private _getOptionIndex(option: MatOption): number | undefined {\n    return this.options.reduce((result: number, current: MatOption, index: number) => {\n      return result === undefined ? (option === current ? index : undefined) : result;\n    }, undefined);\n  }\n\n  /** Calculates the scroll position and x- and y-offsets of the overlay panel. */\n  private _calculateOverlayPosition(): void {\n    const itemHeight = this._getItemHeight();\n    const items = this._getItemCount();\n    const panelHeight = Math.min(items * itemHeight, SELECT_PANEL_MAX_HEIGHT);\n    const scrollContainerHeight = items * itemHeight;\n\n    // The farthest the panel can be scrolled before it hits the bottom\n    const maxScroll = scrollContainerHeight - panelHeight;\n\n    // If no value is selected we open the popup to the first item.\n    let selectedOptionOffset =\n        this.empty ? 0 : this._getOptionIndex(this._selectionModel.selected[0])!;\n\n    selectedOptionOffset += MatOption.countGroupLabelsBeforeOption(selectedOptionOffset,\n        this.options, this.optionGroups);\n\n    // We must maintain a scroll buffer so the selected option will be scrolled to the\n    // center of the overlay panel rather than the top.\n    const scrollBuffer = panelHeight / 2;\n    this._scrollTop = this._calculateOverlayScroll(selectedOptionOffset, scrollBuffer, maxScroll);\n    this._offsetY = this._calculateOverlayOffsetY(selectedOptionOffset, scrollBuffer, maxScroll);\n\n    this._checkOverlayWithinViewport(maxScroll);\n  }\n\n  /**\n   * Calculates the scroll position of the select's overlay panel.\n   *\n   * Attempts to center the selected option in the panel. If the option is\n   * too high or too low in the panel to be scrolled to the center, it clamps the\n   * scroll position to the min or max scroll positions respectively.\n   */\n  _calculateOverlayScroll(selectedIndex: number, scrollBuffer: number,\n                          maxScroll: number): number {\n    const itemHeight = this._getItemHeight();\n    const optionOffsetFromScrollTop = itemHeight * selectedIndex;\n    const halfOptionHeight = itemHeight / 2;\n\n    // Starts at the optionOffsetFromScrollTop, which scrolls the option to the top of the\n    // scroll container, then subtracts the scroll buffer to scroll the option down to\n    // the center of the overlay panel. Half the option height must be re-added to the\n    // scrollTop so the option is centered based on its middle, not its top edge.\n    const optimalScrollPosition = optionOffsetFromScrollTop - scrollBuffer + halfOptionHeight;\n    return Math.min(Math.max(0, optimalScrollPosition), maxScroll);\n  }\n\n  /** Returns the aria-label of the select component. */\n  get _ariaLabel(): string | null {\n    // If an ariaLabelledby value has been set, the select should not overwrite the\n    // `aria-labelledby` value by setting the ariaLabel to the placeholder.\n    return this.ariaLabelledby ? null : this.ariaLabel || this.placeholder;\n  }\n\n  /** Determines the `aria-activedescendant` to be set on the host. */\n  _getAriaActiveDescendant(): string | null {\n    if (this.panelOpen && this._keyManager && this._keyManager.activeItem) {\n      return this._keyManager.activeItem.id;\n    }\n\n    return null;\n  }\n\n  /**\n   * Sets the x-offset of the overlay panel in relation to the trigger's top start corner.\n   * This must be adjusted to align the selected option text over the trigger text when\n   * the panel opens. Will change based on LTR or RTL text direction. Note that the offset\n   * can't be calculated until the panel has been attached, because we need to know the\n   * content width in order to constrain the panel within the viewport.\n   */\n  private _calculateOverlayOffsetX(): void {\n    const overlayRect = this.overlayDir.overlayRef.overlayElement.getBoundingClientRect();\n    const viewportSize = this._viewportRuler.getViewportSize();\n    const isRtl = this._isRtl();\n    const paddingWidth = this.multiple ? SELECT_MULTIPLE_PANEL_PADDING_X + SELECT_PANEL_PADDING_X :\n                                         SELECT_PANEL_PADDING_X * 2;\n    let offsetX: number;\n\n    // Adjust the offset, depending on the option padding.\n    if (this.multiple) {\n      offsetX = SELECT_MULTIPLE_PANEL_PADDING_X;\n    } else {\n      let selected = this._selectionModel.selected[0] || this.options.first;\n      offsetX = selected && selected.group ? SELECT_PANEL_INDENT_PADDING_X : SELECT_PANEL_PADDING_X;\n    }\n\n    // Invert the offset in LTR.\n    if (!isRtl) {\n      offsetX *= -1;\n    }\n\n    // Determine how much the select overflows on each side.\n    const leftOverflow = 0 - (overlayRect.left + offsetX - (isRtl ? paddingWidth : 0));\n    const rightOverflow = overlayRect.right + offsetX - viewportSize.width\n                          + (isRtl ? 0 : paddingWidth);\n\n    // If the element overflows on either side, reduce the offset to allow it to fit.\n    if (leftOverflow > 0) {\n      offsetX += leftOverflow + SELECT_PANEL_VIEWPORT_PADDING;\n    } else if (rightOverflow > 0) {\n      offsetX -= rightOverflow + SELECT_PANEL_VIEWPORT_PADDING;\n    }\n\n    // Set the offset directly in order to avoid having to go through change detection and\n    // potentially triggering \"changed after it was checked\" errors.\n    this.overlayDir.offsetX = offsetX;\n    this.overlayDir.overlayRef.updatePosition();\n  }\n\n  /**\n   * Calculates the y-offset of the select's overlay panel in relation to the\n   * top start corner of the trigger. It has to be adjusted in order for the\n   * selected option to be aligned over the trigger when the panel opens.\n   */\n  private _calculateOverlayOffsetY(selectedIndex: number, scrollBuffer: number,\n                                  maxScroll: number): number {\n    const itemHeight = this._getItemHeight();\n    const optionHeightAdjustment = (itemHeight - this._triggerRect.height) / 2;\n    const maxOptionsDisplayed = Math.floor(SELECT_PANEL_MAX_HEIGHT / itemHeight);\n    let optionOffsetFromPanelTop: number;\n\n    if (this._scrollTop === 0) {\n      optionOffsetFromPanelTop = selectedIndex * itemHeight;\n    } else if (this._scrollTop === maxScroll) {\n      const firstDisplayedIndex = this._getItemCount() - maxOptionsDisplayed;\n      const selectedDisplayIndex = selectedIndex - firstDisplayedIndex;\n\n      // The first item is partially out of the viewport. Therefore we need to calculate what\n      // portion of it is shown in the viewport and account for it in our offset.\n      let partialItemHeight =\n          itemHeight - (this._getItemCount() * itemHeight - SELECT_PANEL_MAX_HEIGHT) % itemHeight;\n\n      // Because the panel height is longer than the height of the options alone,\n      // there is always extra padding at the top or bottom of the panel. When\n      // scrolled to the very bottom, this padding is at the top of the panel and\n      // must be added to the offset.\n      optionOffsetFromPanelTop = selectedDisplayIndex * itemHeight + partialItemHeight;\n    } else {\n      // If the option was scrolled to the middle of the panel using a scroll buffer,\n      // its offset will be the scroll buffer minus the half height that was added to\n      // center it.\n      optionOffsetFromPanelTop = scrollBuffer - itemHeight / 2;\n    }\n\n    // The final offset is the option's offset from the top, adjusted for the height\n    // difference, multiplied by -1 to ensure that the overlay moves in the correct\n    // direction up the page.\n    return optionOffsetFromPanelTop * -1 - optionHeightAdjustment;\n  }\n\n  /**\n   * Checks that the attempted overlay position will fit within the viewport.\n   * If it will not fit, tries to adjust the scroll position and the associated\n   * y-offset so the panel can open fully on-screen. If it still won't fit,\n   * sets the offset back to 0 to allow the fallback position to take over.\n   */\n  private _checkOverlayWithinViewport(maxScroll: number): void {\n    const itemHeight = this._getItemHeight();\n    const viewportSize = this._viewportRuler.getViewportSize();\n\n    const topSpaceAvailable = this._triggerRect.top - SELECT_PANEL_VIEWPORT_PADDING;\n    const bottomSpaceAvailable =\n        viewportSize.height - this._triggerRect.bottom - SELECT_PANEL_VIEWPORT_PADDING;\n\n    const panelHeightTop = Math.abs(this._offsetY);\n    const totalPanelHeight =\n        Math.min(this._getItemCount() * itemHeight, SELECT_PANEL_MAX_HEIGHT);\n    const panelHeightBottom = totalPanelHeight - panelHeightTop - this._triggerRect.height;\n\n    if (panelHeightBottom > bottomSpaceAvailable) {\n      this._adjustPanelUp(panelHeightBottom, bottomSpaceAvailable);\n    } else if (panelHeightTop > topSpaceAvailable) {\n     this._adjustPanelDown(panelHeightTop, topSpaceAvailable, maxScroll);\n    } else {\n      this._transformOrigin = this._getOriginBasedOnOption();\n    }\n  }\n\n  /** Adjusts the overlay panel up to fit in the viewport. */\n  private _adjustPanelUp(panelHeightBottom: number, bottomSpaceAvailable: number) {\n    // Browsers ignore fractional scroll offsets, so we need to round.\n    const distanceBelowViewport = Math.round(panelHeightBottom - bottomSpaceAvailable);\n\n    // Scrolls the panel up by the distance it was extending past the boundary, then\n    // adjusts the offset by that amount to move the panel up into the viewport.\n    this._scrollTop -= distanceBelowViewport;\n    this._offsetY -= distanceBelowViewport;\n    this._transformOrigin = this._getOriginBasedOnOption();\n\n    // If the panel is scrolled to the very top, it won't be able to fit the panel\n    // by scrolling, so set the offset to 0 to allow the fallback position to take\n    // effect.\n    if (this._scrollTop <= 0) {\n      this._scrollTop = 0;\n      this._offsetY = 0;\n      this._transformOrigin = `50% bottom 0px`;\n    }\n  }\n\n  /** Adjusts the overlay panel down to fit in the viewport. */\n  private _adjustPanelDown(panelHeightTop: number, topSpaceAvailable: number,\n                           maxScroll: number) {\n    // Browsers ignore fractional scroll offsets, so we need to round.\n    const distanceAboveViewport = Math.round(panelHeightTop - topSpaceAvailable);\n\n    // Scrolls the panel down by the distance it was extending past the boundary, then\n    // adjusts the offset by that amount to move the panel down into the viewport.\n    this._scrollTop += distanceAboveViewport;\n    this._offsetY += distanceAboveViewport;\n    this._transformOrigin = this._getOriginBasedOnOption();\n\n    // If the panel is scrolled to the very bottom, it won't be able to fit the\n    // panel by scrolling, so set the offset to 0 to allow the fallback position\n    // to take effect.\n    if (this._scrollTop >= maxScroll) {\n      this._scrollTop = maxScroll;\n      this._offsetY = 0;\n      this._transformOrigin = `50% top 0px`;\n      return;\n    }\n  }\n\n  /** Sets the transform origin point based on the selected option. */\n  private _getOriginBasedOnOption(): string {\n    const itemHeight = this._getItemHeight();\n    const optionHeightAdjustment = (itemHeight - this._triggerRect.height) / 2;\n    const originY = Math.abs(this._offsetY) - optionHeightAdjustment + itemHeight / 2;\n    return `50% ${originY}px 0px`;\n  }\n\n  /** Calculates the amount of items in the select. This includes options and group labels. */\n  private _getItemCount(): number {\n    return this.options.length + this.optionGroups.length;\n  }\n\n  /** Calculates the height of the select's options. */\n  private _getItemHeight(): number {\n    return this._triggerFontSize * SELECT_ITEM_HEIGHT_EM;\n  }\n\n  // Implemented as part of MatFormFieldControl.\n  setDescribedByIds(ids: string[]) {\n    this._ariaDescribedby = ids.join(' ');\n  }\n\n  // Implemented as part of MatFormFieldControl.\n  onContainerClick() {\n    this.focus();\n    this.open();\n  }\n\n  // Implemented as part of MatFormFieldControl.\n  get shouldLabelFloat(): boolean {\n    return this._panelOpen || !this.empty;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {AnimationEvent} from '@angular/animations';\nimport {AriaDescriber, FocusMonitor} from '@angular/cdk/a11y';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {ESCAPE} from '@angular/cdk/keycodes';\nimport {\n  ConnectionPositionPair,\n  HorizontalConnectionPos,\n  OriginConnectionPosition,\n  Overlay,\n  OverlayConfig,\n  OverlayConnectionPosition,\n  OverlayRef,\n  RepositionScrollStrategy,\n  ScrollStrategy,\n  VerticalConnectionPos,\n} from '@angular/cdk/overlay';\nimport {Platform} from '@angular/cdk/platform';\nimport {ComponentPortal} from '@angular/cdk/portal';\nimport {take} from 'rxjs/operators/take';\nimport {merge} from 'rxjs/observable/merge';\nimport {ScrollDispatcher} from '@angular/cdk/scrolling';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  Directive,\n  ElementRef,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  ViewContainerRef,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {Observable} from 'rxjs/Observable';\nimport {Subject} from 'rxjs/Subject';\nimport {matTooltipAnimations} from './tooltip-animations';\n\n\nexport type TooltipPosition = 'left' | 'right' | 'above' | 'below' | 'before' | 'after';\n\n/** Time in ms to throttle repositioning after scroll events. */\nexport const SCROLL_THROTTLE_MS = 20;\n\n/** CSS class that will be attached to the overlay panel. */\nexport const TOOLTIP_PANEL_CLASS = 'mat-tooltip-panel';\n\n/** Creates an error to be thrown if the user supplied an invalid tooltip position. */\nexport function getMatTooltipInvalidPositionError(position: string) {\n  return Error(`Tooltip position \"${position}\" is invalid.`);\n}\n\n/** Injection token that determines the scroll handling while a tooltip is visible. */\nexport const MAT_TOOLTIP_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mat-tooltip-scroll-strategy');\n\n/** @docs-private */\nexport function MAT_TOOLTIP_SCROLL_STRATEGY_PROVIDER_FACTORY(overlay: Overlay):\n    () => RepositionScrollStrategy {\n  return () => overlay.scrollStrategies.reposition({ scrollThrottle: SCROLL_THROTTLE_MS });\n}\n\n/** @docs-private */\nexport const MAT_TOOLTIP_SCROLL_STRATEGY_PROVIDER = {\n  provide: MAT_TOOLTIP_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_TOOLTIP_SCROLL_STRATEGY_PROVIDER_FACTORY\n};\n\n/** Default `matTooltip` options that can be overridden. */\nexport interface MatTooltipDefaultOptions {\n  showDelay: number;\n  hideDelay: number;\n  touchendHideDelay: number;\n}\n\n/** Injection token to be used to override the default options for `matTooltip`. */\nexport const MAT_TOOLTIP_DEFAULT_OPTIONS =\n    new InjectionToken<MatTooltipDefaultOptions>('mat-tooltip-default-options');\n\n/**\n * Directive that attaches a material design tooltip to the host element. Animates the showing and\n * hiding of a tooltip provided position (defaults to below the element).\n *\n * https://material.google.com/components/tooltips.html\n */\n@Directive({\n  selector: '[matTooltip]',\n  exportAs: 'matTooltip',\n  host: {\n    '(longpress)': 'show()',\n    '(keydown)': '_handleKeydown($event)',\n    '(touchend)': '_handleTouchend()',\n  },\n})\nexport class MatTooltip implements OnDestroy {\n  _overlayRef: OverlayRef | null;\n  _tooltipInstance: TooltipComponent | null;\n\n  private _position: TooltipPosition = 'below';\n  private _disabled: boolean = false;\n  private _tooltipClass: string|string[]|Set<string>|{[key: string]: any};\n\n  /** Allows the user to define the position of the tooltip relative to the parent element */\n  @Input('matTooltipPosition')\n  get position(): TooltipPosition { return this._position; }\n  set position(value: TooltipPosition) {\n    if (value !== this._position) {\n      this._position = value;\n\n      // TODO(andrewjs): When the overlay's position can be dynamically changed, do not destroy\n      // the tooltip.\n      if (this._tooltipInstance) {\n        this._disposeTooltip();\n      }\n    }\n  }\n\n  /** Disables the display of the tooltip. */\n  @Input('matTooltipDisabled')\n  get disabled(): boolean { return this._disabled; }\n  set disabled(value) {\n    this._disabled = coerceBooleanProperty(value);\n\n    // If tooltip is disabled, hide immediately.\n    if (this._disabled) {\n      this.hide(0);\n    }\n  }\n\n  /** @deprecated */\n  @Input('tooltip-position')\n  get _positionDeprecated(): TooltipPosition { return this._position; }\n  set _positionDeprecated(value: TooltipPosition) { this._position = value; }\n\n  /** The default delay in ms before showing the tooltip after show is called */\n  @Input('matTooltipShowDelay') showDelay =\n      this._defaultOptions ? this._defaultOptions.showDelay : 0;\n\n  /** The default delay in ms before hiding the tooltip after hide is called */\n  @Input('matTooltipHideDelay') hideDelay =\n      this._defaultOptions ? this._defaultOptions.hideDelay : 0;\n\n  private _message = '';\n\n  /** The message to be displayed in the tooltip */\n  @Input('matTooltip')\n  get message() { return this._message; }\n  set message(value: string) {\n    this._ariaDescriber.removeDescription(this._elementRef.nativeElement, this._message);\n\n    // If the message is not a string (e.g. number), convert it to a string and trim it.\n    this._message = value != null ? `${value}`.trim() : '';\n\n    if (!this._message && this._isTooltipVisible()) {\n      this.hide(0);\n    } else {\n      this._updateTooltipMessage();\n      this._ariaDescriber.describe(this._elementRef.nativeElement, this.message);\n    }\n  }\n\n  /** Classes to be passed to the tooltip. Supports the same syntax as `ngClass`. */\n  @Input('matTooltipClass')\n  get tooltipClass() { return this._tooltipClass; }\n  set tooltipClass(value: string|string[]|Set<string>|{[key: string]: any}) {\n    this._tooltipClass = value;\n    if (this._tooltipInstance) {\n      this._setTooltipClass(this._tooltipClass);\n    }\n  }\n\n  private _manualListeners = new Map<string, Function>();\n\n  constructor(\n    private _overlay: Overlay,\n    private _elementRef: ElementRef,\n    private _scrollDispatcher: ScrollDispatcher,\n    private _viewContainerRef: ViewContainerRef,\n    private _ngZone: NgZone,\n    private _platform: Platform,\n    private _ariaDescriber: AriaDescriber,\n    private _focusMonitor: FocusMonitor,\n    @Inject(MAT_TOOLTIP_SCROLL_STRATEGY) private _scrollStrategy,\n    @Optional() private _dir: Directionality,\n    @Optional() @Inject(MAT_TOOLTIP_DEFAULT_OPTIONS)\n      private _defaultOptions?: MatTooltipDefaultOptions) {\n\n    // TODO(crisbeto): make the `_defaultOptions` a required param next time we do breaking changes.\n\n    const element: HTMLElement = _elementRef.nativeElement;\n\n    // The mouse events shouldn't be bound on iOS devices, because\n    // they can prevent the first tap from firing its click event.\n    if (!_platform.IOS) {\n      this._manualListeners.set('mouseenter', () => this.show());\n      this._manualListeners.set('mouseleave', () => this.hide());\n\n      this._manualListeners\n        .forEach((listener, event) => _elementRef.nativeElement.addEventListener(event, listener));\n    } else if (element.nodeName === 'INPUT' || element.nodeName === 'TEXTAREA') {\n      // When we bind a gesture event on an element (in this case `longpress`), HammerJS\n      // will add some inline styles by default, including `user-select: none`. This is\n      // problematic on iOS, because it will prevent users from typing in inputs. If\n      // we're on iOS and the tooltip is attached on an input or textarea, we clear\n      // the `user-select` to avoid these issues.\n      element.style.webkitUserSelect = element.style.userSelect = '';\n    }\n\n    _focusMonitor.monitor(element, false).subscribe(origin => {\n      // Note that the focus monitor runs outside the Angular zone.\n      if (!origin) {\n        _ngZone.run(() => this.hide(0));\n      } else if (origin !== 'program') {\n        _ngZone.run(() => this.show());\n      }\n    });\n  }\n\n  /**\n   * Dispose the tooltip when destroyed.\n   */\n  ngOnDestroy() {\n    if (this._tooltipInstance) {\n      this._disposeTooltip();\n    }\n\n    // Clean up the event listeners set in the constructor\n    if (!this._platform.IOS) {\n      this._manualListeners.forEach((listener, event) => {\n        this._elementRef.nativeElement.removeEventListener(event, listener);\n      });\n\n      this._manualListeners.clear();\n    }\n\n    this._ariaDescriber.removeDescription(this._elementRef.nativeElement, this.message);\n    this._focusMonitor.stopMonitoring(this._elementRef.nativeElement);\n  }\n\n  /** Shows the tooltip after the delay in ms, defaults to tooltip-delay-show or 0ms if no input */\n  show(delay: number = this.showDelay): void {\n    if (this.disabled || !this.message) { return; }\n\n    if (!this._tooltipInstance) {\n      this._createTooltip();\n    }\n\n    this._setTooltipClass(this._tooltipClass);\n    this._updateTooltipMessage();\n    this._tooltipInstance!.show(this._position, delay);\n  }\n\n  /** Hides the tooltip after the delay in ms, defaults to tooltip-delay-hide or 0ms if no input */\n  hide(delay: number = this.hideDelay): void {\n    if (this._tooltipInstance) {\n      this._tooltipInstance.hide(delay);\n    }\n  }\n\n  /** Shows/hides the tooltip */\n  toggle(): void {\n    this._isTooltipVisible() ? this.hide() : this.show();\n  }\n\n  /** Returns true if the tooltip is currently visible to the user */\n  _isTooltipVisible(): boolean {\n    return !!this._tooltipInstance && this._tooltipInstance.isVisible();\n  }\n\n  /** Handles the keydown events on the host element. */\n  _handleKeydown(e: KeyboardEvent) {\n    if (this._isTooltipVisible() && e.keyCode === ESCAPE) {\n      e.stopPropagation();\n      this.hide(0);\n    }\n  }\n\n  /** Handles the touchend events on the host element. */\n  _handleTouchend() {\n    this.hide(this._defaultOptions ? this._defaultOptions.touchendHideDelay : 1500);\n  }\n\n  /** Create the tooltip to display */\n  private _createTooltip(): void {\n    const overlayRef = this._createOverlay();\n    const portal = new ComponentPortal(TooltipComponent, this._viewContainerRef);\n\n    this._tooltipInstance = overlayRef.attach(portal).instance;\n\n    // Dispose of the tooltip when the overlay is detached.\n    merge(this._tooltipInstance!.afterHidden(), overlayRef.detachments()).subscribe(() => {\n      // Check first if the tooltip has already been removed through this components destroy.\n      if (this._tooltipInstance) {\n        this._disposeTooltip();\n      }\n    });\n  }\n\n  /** Create the overlay config and position strategy */\n  private _createOverlay(): OverlayRef {\n    const origin = this._getOrigin();\n    const overlay = this._getOverlayPosition();\n\n    // Create connected position strategy that listens for scroll events to reposition.\n    const strategy = this._overlay\n      .position()\n      .connectedTo(this._elementRef, origin.main, overlay.main)\n      .withFallbackPosition(origin.fallback, overlay.fallback);\n\n    const scrollableAncestors = this._scrollDispatcher\n      .getAncestorScrollContainers(this._elementRef);\n\n    strategy.withScrollableContainers(scrollableAncestors);\n\n    strategy.onPositionChange.subscribe(change => {\n      if (this._tooltipInstance) {\n        if (change.scrollableViewProperties.isOverlayClipped && this._tooltipInstance.isVisible()) {\n          // After position changes occur and the overlay is clipped by\n          // a parent scrollable then close the tooltip.\n          this._ngZone.run(() => this.hide(0));\n        } else {\n          // Otherwise recalculate the origin based on the new position.\n          this._tooltipInstance._setTransformOrigin(change.connectionPair);\n        }\n      }\n    });\n\n    const config = new OverlayConfig({\n      direction: this._dir ? this._dir.value : 'ltr',\n      positionStrategy: strategy,\n      panelClass: TOOLTIP_PANEL_CLASS,\n      scrollStrategy: this._scrollStrategy()\n    });\n\n    this._overlayRef = this._overlay.create(config);\n\n    return this._overlayRef;\n  }\n\n  /** Disposes the current tooltip and the overlay it is attached to */\n  private _disposeTooltip(): void {\n    if (this._overlayRef) {\n      this._overlayRef.dispose();\n      this._overlayRef = null;\n    }\n\n    this._tooltipInstance = null;\n  }\n\n  /**\n   * Returns the origin position and a fallback position based on the user's position preference.\n   * The fallback position is the inverse of the origin (e.g. 'below' -> 'above').\n   */\n  _getOrigin(): {main: OriginConnectionPosition, fallback: OriginConnectionPosition} {\n    const isDirectionLtr = !this._dir || this._dir.value == 'ltr';\n    let position: OriginConnectionPosition;\n\n    if (this.position == 'above' || this.position == 'below') {\n      position = {originX: 'center', originY: this.position == 'above' ? 'top' : 'bottom'};\n    } else if (this.position == 'left' ||\n               this.position == 'before' && isDirectionLtr ||\n               this.position == 'after' && !isDirectionLtr) {\n      position = {originX: 'start', originY: 'center'};\n    } else if (this.position == 'right' ||\n               this.position == 'after' && isDirectionLtr ||\n               this.position == 'before' && !isDirectionLtr) {\n      position = {originX: 'end', originY: 'center'};\n    } else {\n      throw getMatTooltipInvalidPositionError(this.position);\n    }\n\n    const {x, y} = this._invertPosition(position.originX, position.originY);\n\n    return {\n      main: position,\n      fallback: {originX: x, originY: y}\n    };\n  }\n\n  /** Returns the overlay position and a fallback position based on the user's preference */\n  _getOverlayPosition(): {main: OverlayConnectionPosition, fallback: OverlayConnectionPosition} {\n    const isLtr = !this._dir || this._dir.value == 'ltr';\n    let position: OverlayConnectionPosition;\n\n    if (this.position == 'above') {\n      position = {overlayX: 'center', overlayY: 'bottom'};\n    } else if (this.position == 'below') {\n      position = {overlayX: 'center', overlayY: 'top'};\n    } else if (this.position == 'left' ||\n               this.position == 'before' && isLtr ||\n               this.position == 'after' && !isLtr) {\n      position = {overlayX: 'end', overlayY: 'center'};\n    } else if (this.position == 'right' ||\n               this.position == 'after' && isLtr ||\n               this.position == 'before' && !isLtr) {\n      position = {overlayX: 'start', overlayY: 'center'};\n    } else {\n      throw getMatTooltipInvalidPositionError(this.position);\n    }\n\n    const {x, y} = this._invertPosition(position.overlayX, position.overlayY);\n\n    return {\n      main: position,\n      fallback: {overlayX: x, overlayY: y}\n    };\n  }\n\n  /** Updates the tooltip message and repositions the overlay according to the new message length */\n  private _updateTooltipMessage() {\n    // Must wait for the message to be painted to the tooltip so that the overlay can properly\n    // calculate the correct positioning based on the size of the text.\n    if (this._tooltipInstance) {\n      this._tooltipInstance.message = this.message;\n      this._tooltipInstance._markForCheck();\n\n      this._ngZone.onMicrotaskEmpty.asObservable().pipe(take(1)).subscribe(() => {\n        if (this._tooltipInstance) {\n          this._overlayRef!.updatePosition();\n        }\n      });\n    }\n  }\n\n  /** Updates the tooltip class */\n  private _setTooltipClass(tooltipClass: string|string[]|Set<string>|{[key: string]: any}) {\n    if (this._tooltipInstance) {\n      this._tooltipInstance.tooltipClass = tooltipClass;\n      this._tooltipInstance._markForCheck();\n    }\n  }\n\n  /** Inverts an overlay position. */\n  private _invertPosition(x: HorizontalConnectionPos, y: VerticalConnectionPos) {\n    if (this.position === 'above' || this.position === 'below') {\n      if (y === 'top') {\n        y = 'bottom';\n      } else if (y === 'bottom') {\n        y = 'top';\n      }\n    } else {\n      if (x === 'end') {\n        x = 'start';\n      } else if (x === 'start') {\n        x = 'end';\n      }\n    }\n\n    return {x, y};\n  }\n}\n\nexport type TooltipVisibility = 'initial' | 'visible' | 'hidden';\n\n/**\n * Internal component that wraps the tooltip's content.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-tooltip-component',\n  templateUrl: 'tooltip.html',\n  styleUrls: ['tooltip.css'],\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  animations: [matTooltipAnimations.tooltipState],\n  host: {\n    // Forces the element to have a layout in IE and Edge. This fixes issues where the element\n    // won't be rendered if the animations are disabled or there is no web animations polyfill.\n    '[style.zoom]': '_visibility === \"visible\" ? 1 : null',\n    '(body:click)': 'this._handleBodyInteraction()',\n    'aria-hidden': 'true',\n  }\n})\nexport class TooltipComponent {\n  /** Message to display in the tooltip */\n  message: string;\n\n  /** Classes to be added to the tooltip. Supports the same syntax as `ngClass`. */\n  tooltipClass: string|string[]|Set<string>|{[key: string]: any};\n\n  /** The timeout ID of any current timer set to show the tooltip */\n  _showTimeoutId: number;\n\n  /** The timeout ID of any current timer set to hide the tooltip */\n  _hideTimeoutId: number;\n\n  /** Property watched by the animation framework to show or hide the tooltip */\n  _visibility: TooltipVisibility = 'initial';\n\n  /** Whether interactions on the page should close the tooltip */\n  private _closeOnInteraction: boolean = false;\n\n  /** The transform origin used in the animation for showing and hiding the tooltip */\n  _transformOrigin: 'top' | 'bottom' | 'left' | 'right' = 'bottom';\n\n  /** Current position of the tooltip. */\n  private _position: TooltipPosition;\n\n  /** Subject for notifying that the tooltip has been hidden from the view */\n  private _onHide: Subject<any> = new Subject();\n\n  constructor(private _changeDetectorRef: ChangeDetectorRef) {}\n\n  /**\n   * Shows the tooltip with an animation originating from the provided origin\n   * @param position Position of the tooltip.\n   * @param delay Amount of milliseconds to the delay showing the tooltip.\n   */\n  show(position: TooltipPosition, delay: number): void {\n    // Cancel the delayed hide if it is scheduled\n    if (this._hideTimeoutId) {\n      clearTimeout(this._hideTimeoutId);\n    }\n\n    // Body interactions should cancel the tooltip if there is a delay in showing.\n    this._closeOnInteraction = true;\n    this._position = position;\n    this._showTimeoutId = setTimeout(() => {\n      this._visibility = 'visible';\n\n      // Mark for check so if any parent component has set the\n      // ChangeDetectionStrategy to OnPush it will be checked anyways\n      this._markForCheck();\n    }, delay);\n  }\n\n  /**\n   * Begins the animation to hide the tooltip after the provided delay in ms.\n   * @param delay Amount of milliseconds to delay showing the tooltip.\n   */\n  hide(delay: number): void {\n    // Cancel the delayed show if it is scheduled\n    if (this._showTimeoutId) {\n      clearTimeout(this._showTimeoutId);\n    }\n\n    this._hideTimeoutId = setTimeout(() => {\n      this._visibility = 'hidden';\n\n      // Mark for check so if any parent component has set the\n      // ChangeDetectionStrategy to OnPush it will be checked anyways\n      this._markForCheck();\n    }, delay);\n  }\n\n  /** Returns an observable that notifies when the tooltip has been hidden from view. */\n  afterHidden(): Observable<void> {\n    return this._onHide.asObservable();\n  }\n\n  /** Whether the tooltip is being displayed. */\n  isVisible(): boolean {\n    return this._visibility === 'visible';\n  }\n\n  /** Sets the tooltip transform origin according to the position of the tooltip overlay. */\n  _setTransformOrigin(overlayPosition: ConnectionPositionPair) {\n    const axis = (this._position === 'above' || this._position === 'below') ? 'Y' : 'X';\n    const position = axis == 'X' ? overlayPosition.overlayX : overlayPosition.overlayY;\n\n    if (position === 'top' || position === 'bottom') {\n      this._transformOrigin = position;\n    } else if (position === 'start') {\n      this._transformOrigin = 'left';\n    } else if (position === 'end') {\n      this._transformOrigin = 'right';\n    } else {\n      throw getMatTooltipInvalidPositionError(this._position);\n    }\n  }\n\n  _animationStart() {\n    this._closeOnInteraction = false;\n  }\n\n  _animationDone(event: AnimationEvent): void {\n    const toState = event.toState as TooltipVisibility;\n\n    if (toState === 'hidden' && !this.isVisible()) {\n      this._onHide.next();\n    }\n\n    if (toState === 'visible' || toState === 'hidden') {\n      // Note: as of Angular 4.3, the animations module seems to fire the `start` callback before\n      // the end if animations are disabled. Make this call async to ensure that it still fires\n      // at the appropriate time.\n      Promise.resolve().then(() => this._closeOnInteraction = true);\n    }\n  }\n\n  /**\n   * Interactions on the HTML body should close the tooltip immediately as defined in the\n   * material design spec.\n   * https://material.google.com/components/tooltips.html#tooltips-interaction\n   */\n  _handleBodyInteraction(): void {\n    if (this._closeOnInteraction) {\n      this.hide(0);\n    }\n  }\n\n  /**\n   * Marks that the tooltip needs to be checked in the next change detection run.\n   * Mainly used for rendering the initial text before positioning a tooltip, which\n   * can be problematic in components with OnPush change detection.\n   */\n  _markForCheck(): void {\n    this._changeDetectorRef.markForCheck();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ChangeDetectionStrategy, Component, Directive, ViewEncapsulation} from '@angular/core';\nimport {\n  CDK_ROW_TEMPLATE,\n  CdkHeaderRow,\n  CdkHeaderRowDef,\n  CdkRow,\n  CdkRowDef,\n} from '@angular/cdk/table';\n\n/**\n * Header row definition for the mat-table.\n * Captures the header row's template and other header properties such as the columns to display.\n */\n@Directive({\n  selector: '[matHeaderRowDef]',\n  providers: [{provide: CdkHeaderRowDef, useExisting: MatHeaderRowDef}],\n  inputs: ['columns: matHeaderRowDef'],\n})\nexport class MatHeaderRowDef extends CdkHeaderRowDef { }\n\n/**\n * Data row definition for the mat-table.\n * Captures the header row's template and other row properties such as the columns to display and\n * a when predicate that describes when this row should be used.\n */\n@Directive({\n  selector: '[matRowDef]',\n  providers: [{provide: CdkRowDef, useExisting: MatRowDef}],\n  inputs: ['columns: matRowDefColumns', 'when: matRowDefWhen'],\n})\nexport class MatRowDef<T> extends CdkRowDef<T> {\n}\n\n/** Header template container that contains the cell outlet. Adds the right class and role. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-header-row',\n  template: CDK_ROW_TEMPLATE,\n  host: {\n    'class': 'mat-header-row',\n    'role': 'row',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matHeaderRow',\n  preserveWhitespaces: false,\n})\nexport class MatHeaderRow extends CdkHeaderRow { }\n\n/** Data row template container that contains the cell outlet. Adds the right class and role. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-row',\n  template: CDK_ROW_TEMPLATE,\n  host: {\n    'class': 'mat-row',\n    'role': 'row',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matRow',\n  preserveWhitespaces: false,\n})\nexport class MatRow extends CdkRow { }\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatTable} from './table';\nimport {CdkTableModule} from '@angular/cdk/table';\nimport {MatCell, MatCellDef, MatColumnDef, MatHeaderCell, MatHeaderCellDef} from './cell';\nimport {MatHeaderRow, MatHeaderRowDef, MatRow, MatRowDef} from './row';\nimport {CommonModule} from '@angular/common';\nimport {MatCommonModule} from '@angular/material/core';\n\n@NgModule({\n  imports: [CdkTableModule, CommonModule, MatCommonModule],\n  exports: [MatTable, MatCellDef, MatHeaderCellDef, MatColumnDef,\n    MatHeaderCell, MatCell, MatHeaderRow, MatRow,\n    MatHeaderRowDef, MatRowDef],\n  declarations: [MatTable, MatCellDef, MatHeaderCellDef, MatColumnDef,\n    MatHeaderCell, MatCell, MatHeaderRow, MatRow,\n    MatHeaderRowDef, MatRowDef],\n})\nexport class MatTableModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {DataSource} from '@angular/cdk/table';\nimport {BehaviorSubject} from 'rxjs/BehaviorSubject';\nimport {MatPaginator} from '@angular/material/paginator';\nimport {MatSort} from '@angular/material/sort';\nimport {Subscription} from 'rxjs/Subscription';\nimport {combineLatest} from 'rxjs/operators/combineLatest';\nimport {map} from 'rxjs/operators/map';\nimport {startWith} from 'rxjs/operators/startWith';\nimport {empty} from 'rxjs/observable/empty';\n\n/**\n * Data source that accepts a client-side data array and includes native support of filtering,\n * sorting (using MatSort), and pagination (using MatPaginator).\n *\n * Allows for sort customization by overriding sortingDataAccessor, which defines how data\n * properties are accessed. Also allows for filter customization by overriding filterTermAccessor,\n * which defines how row data is converted to a string for filter matching.\n */\nexport class MatTableDataSource<T> implements DataSource<T> {\n  /** Stream that emits when a new data array is set on the data source. */\n  private _data: BehaviorSubject<T[]>;\n\n  /** Stream emitting render data to the table (depends on ordered data changes). */\n  private _renderData = new BehaviorSubject<T[]>([]);\n\n  /** Stream that emits when a new filter string is set on the data source. */\n  private _filter = new BehaviorSubject<string>('');\n\n  /**\n   * Subscription to the changes that should trigger an update to the table's rendered rows, such\n   * as filtering, sorting, pagination, or base data changes.\n   */\n  _renderChangesSubscription: Subscription;\n\n  /**\n   * The filtered set of data that has been matched by the filter string, or all the data if there\n   * is no filter. Useful for knowing the set of data the table represents.\n   * For example, a 'selectAll()' function would likely want to select the set of filtered data\n   * shown to the user rather than all the data.\n   */\n  filteredData: T[];\n\n  /** Array of data that should be rendered by the table, where each object represents one row. */\n  set data(data: T[]) { this._data.next(data); }\n  get data() { return this._data.value; }\n\n  /**\n   * Filter term that should be used to filter out objects from the data array. To override how\n   * data objects match to this filter string, provide a custom function for filterPredicate.\n   */\n  set filter(filter: string) { this._filter.next(filter); }\n  get filter(): string { return this._filter.value; }\n\n  /**\n   * Instance of the MatSort directive used by the table to control its sorting. Sort changes\n   * emitted by the MatSort will trigger an update to the table's rendered data.\n   */\n  set sort(sort: MatSort|null) {\n    this._sort = sort;\n    this._updateChangeSubscription();\n  }\n  get sort(): MatSort|null { return this._sort; }\n  private _sort: MatSort|null;\n\n  /**\n   * Instance of the MatPaginator component used by the table to control what page of the data is\n   * displayed. Page changes emitted by the MatPaginator will trigger an update to the\n   * table's rendered data.\n   *\n   * Note that the data source uses the paginator's properties to calculate which page of data\n   * should be displayed. If the paginator receives its properties as template inputs,\n   * e.g. `[pageLength]=100` or `[pageIndex]=1`, then be sure that the paginator's view has been\n   * initialized before assigning it to this data source.\n   */\n  set paginator(paginator: MatPaginator|null) {\n    this._paginator = paginator;\n    this._updateChangeSubscription();\n  }\n  get paginator(): MatPaginator|null { return this._paginator; }\n  private _paginator: MatPaginator|null;\n\n  /**\n   * Data accessor function that is used for accessing data properties for sorting.\n   * This default function assumes that the sort header IDs (which defaults to the column name)\n   * matches the data's properties (e.g. column Xyz represents data['Xyz']).\n   * May be set to a custom function for different behavior.\n   * @param data Data object that is being accessed.\n   * @param sortHeaderId The name of the column that represents the data.\n   */\n  sortingDataAccessor: ((data: T, sortHeaderId: string) => string|number) =\n      (data: T, sortHeaderId: string): string|number => {\n    const value: any = data[sortHeaderId];\n\n    // If the value is a string and only whitespace, return the value.\n    // Otherwise +value will convert it to 0.\n    if (typeof value === 'string' && !value.trim()) {\n      return value;\n    }\n\n    return isNaN(+value) ? value : +value;\n  }\n\n  /**\n   * Checks if a data object matches the data source's filter string. By default, each data object\n   * is converted to a string of its properties and returns true if the filter has\n   * at least one occurrence in that string. By default, the filter string has its whitespace\n   * trimmed and the match is case-insensitive. May be overriden for a custom implementation of\n   * filter matching.\n   * @param data Data object used to check against the filter.\n   * @param filter Filter string that has been set on the data source.\n   * @returns Whether the filter matches against the data\n   */\n  filterPredicate: ((data: T, filter: string) => boolean) = (data: T, filter: string): boolean => {\n    // Transform the data into a lowercase string of all property values.\n    const accumulator = (currentTerm, key) => currentTerm + data[key];\n    const dataStr = Object.keys(data).reduce(accumulator, '').toLowerCase();\n\n    // Transform the filter by converting it to lowercase and removing whitespace.\n    const transformedFilter = filter.trim().toLowerCase();\n\n    return dataStr.indexOf(transformedFilter) != -1;\n  }\n\n  constructor(initialData: T[] = []) {\n    this._data = new BehaviorSubject<T[]>(initialData);\n    this._updateChangeSubscription();\n  }\n\n  /**\n   * Subscribe to changes that should trigger an update to the table's rendered rows. When the\n   * changes occur, process the current state of the filter, sort, and pagination along with\n   * the provided base data and send it to the table for rendering.\n   */\n  _updateChangeSubscription() {\n    // Sorting and/or pagination should be watched if MatSort and/or MatPaginator are provided.\n    // Otherwise, use an empty observable stream to take their place.\n    const sortChange = this._sort ? this._sort.sortChange : empty();\n    const pageChange = this._paginator ? this._paginator.page : empty();\n\n    if (this._renderChangesSubscription) {\n      this._renderChangesSubscription.unsubscribe();\n    }\n\n    // Watch for base data or filter changes to provide a filtered set of data.\n    this._renderChangesSubscription = this._data.pipe(\n      combineLatest(this._filter),\n      map(([data]) => this._filterData(data)),\n      // Watch for filtered data or sort changes to provide an ordered set of data.\n      combineLatest(sortChange.pipe(startWith(null!))),\n      map(([data]) => this._orderData(data)),\n      // Watch for ordered data or page changes to provide a paged set of data.\n      combineLatest(pageChange.pipe(startWith(null!))),\n      map(([data]) => this._pageData(data))\n    )\n    // Watched for paged data changes and send the result to the table to render.\n    .subscribe(data => this._renderData.next(data));\n  }\n\n  /**\n   * Returns a filtered data array where each filter object contains the filter string within\n   * the result of the filterTermAccessor function. If no filter is set, returns the data array\n   * as provided.\n   */\n  _filterData(data: T[]) {\n    // If there is a filter string, filter out data that does not contain it.\n    // Each data object is converted to a string using the function defined by filterTermAccessor.\n    // May be overriden for customization.\n    this.filteredData =\n        !this.filter ? data : data.filter(obj => this.filterPredicate(obj, this.filter));\n\n    if (this.paginator) { this._updatePaginator(this.filteredData.length); }\n\n    return this.filteredData;\n  }\n\n  /**\n   * Returns a sorted copy of the data if MatSort has a sort applied, otherwise just returns the\n   * data array as provided. Uses the default data accessor for data lookup, unless a\n   * sortDataAccessor function is defined.\n   */\n  _orderData(data: T[]): T[] {\n    // If there is no active sort or direction, return the data without trying to sort.\n    if (!this.sort || !this.sort.active || this.sort.direction == '') { return data; }\n\n    const active = this.sort.active;\n    const direction = this.sort.direction;\n\n    return data.slice().sort((a, b) => {\n      let valueA = this.sortingDataAccessor(a, active);\n      let valueB = this.sortingDataAccessor(b, active);\n      return (valueA < valueB ? -1 : 1) * (direction == 'asc' ? 1 : -1);\n    });\n  }\n\n  /**\n   * Returns a paged splice of the provided data array according to the provided MatPaginator's page\n   * index and length. If there is no paginator provided, returns the data array as provided.\n   */\n  _pageData(data: T[]): T[] {\n    if (!this.paginator) { return data; }\n\n    const startIndex = this.paginator.pageIndex * this.paginator.pageSize;\n    return data.slice().splice(startIndex, this.paginator.pageSize);\n  }\n\n  /**\n   * Updates the paginator to reflect the length of the filtered data, and makes sure that the page\n   * index does not exceed the paginator's last page. Values are changed in a resolved promise to\n   * guard against making property changes within a round of change detection.\n   */\n  _updatePaginator(filteredDataLength: number) {\n    Promise.resolve().then(() => {\n      if (!this.paginator) { return; }\n\n      this.paginator.length = filteredDataLength;\n\n      // If the page index is set beyond the page, reduce it to the last page.\n      if (this.paginator.pageIndex > 0) {\n        const lastPageIndex = Math.ceil(this.paginator.length / this.paginator.pageSize) - 1 || 0;\n        this.paginator.pageIndex = Math.min(this.paginator.pageIndex, lastPageIndex);\n      }\n    });\n  }\n\n  /**\n   * Used by the MatTable. Called when it connects to the data source.\n   * @docs-private\n   */\n  connect() { return this._renderData; }\n\n  /**\n   * Used by the MatTable. Called when it is destroyed. No-op.\n   * @docs-private\n   */\n  disconnect() { }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, ElementRef, NgZone} from '@angular/core';\n\n\n/**\n * The ink-bar is used to display and animate the line underneath the current active tab label.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-ink-bar',\n  host: {\n    'class': 'mat-ink-bar',\n  },\n})\nexport class MatInkBar {\n  constructor(\n    private _elementRef: ElementRef,\n    private _ngZone: NgZone) {}\n\n  /**\n   * Calculates the styles from the provided element in order to align the ink-bar to that element.\n   * Shows the ink bar if previously set as hidden.\n   * @param element\n   */\n  alignToElement(element: HTMLElement) {\n    this.show();\n\n    if (typeof requestAnimationFrame !== 'undefined') {\n      this._ngZone.runOutsideAngular(() => {\n        requestAnimationFrame(() => this._setStyles(element));\n      });\n    } else {\n      this._setStyles(element);\n    }\n  }\n\n  /** Shows the ink bar. */\n  show(): void {\n    this._elementRef.nativeElement.style.visibility = 'visible';\n  }\n\n  /** Hides the ink bar. */\n  hide(): void {\n    this._elementRef.nativeElement.style.visibility = 'hidden';\n  }\n\n  /**\n   * Sets the proper styles to the ink bar element.\n   * @param element\n   */\n  private _setStyles(element: HTMLElement) {\n    const inkBar: HTMLElement = this._elementRef.nativeElement;\n\n    inkBar.style.left = element ? (element.offsetLeft || 0) + 'px' : '0';\n    inkBar.style.width = element ? (element.offsetWidth || 0) + 'px' : '0';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, TemplateRef, ViewContainerRef} from '@angular/core';\nimport {CdkPortal} from '@angular/cdk/portal';\n\n/** Used to flag tab labels for use with the portal directive */\n@Directive({\n  selector: '[mat-tab-label], [matTabLabel]',\n})\nexport class MatTabLabel extends CdkPortal {\n  constructor(templateRef: TemplateRef<any>, viewContainerRef: ViewContainerRef) {\n    super(templateRef, viewContainerRef);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {TemplatePortal} from '@angular/cdk/portal';\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  ContentChild,\n  Input,\n  OnChanges,\n  OnDestroy,\n  OnInit,\n  SimpleChanges,\n  TemplateRef,\n  ViewChild,\n  ViewContainerRef,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {CanDisable, mixinDisabled} from '@angular/material/core';\nimport {Subject} from 'rxjs/Subject';\nimport {MatTabLabel} from './tab-label';\n\n\n// Boilerplate for applying mixins to MatTab.\n/** @docs-private */\nexport class MatTabBase {}\nexport const _MatTabMixinBase = mixinDisabled(MatTabBase);\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-tab',\n  templateUrl: 'tab.html',\n  inputs: ['disabled'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  exportAs: 'matTab',\n})\nexport class MatTab extends _MatTabMixinBase implements OnInit, CanDisable, OnChanges, OnDestroy {\n  /** Content for the tab label given by <ng-template mat-tab-label>. */\n  @ContentChild(MatTabLabel) templateLabel: MatTabLabel;\n\n  /** Template inside the MatTab view that contains an <ng-content>. */\n  @ViewChild(TemplateRef) _content: TemplateRef<any>;\n\n  /** The plain text label for the tab, used when there is no template label. */\n  @Input('label') textLabel: string = '';\n\n  /** The portal that will be the hosted content of the tab */\n  private _contentPortal: TemplatePortal<any> | null = null;\n\n  /** @docs-private */\n  get content(): TemplatePortal<any> | null {\n    return this._contentPortal;\n  }\n\n  /** Emits whenever the label changes. */\n  _labelChange = new Subject<void>();\n\n  /** Emits whenever the disable changes */\n  _disableChange = new Subject<void>();\n\n  /**\n   * The relatively indexed position where 0 represents the center, negative is left, and positive\n   * represents the right.\n   */\n  position: number | null = null;\n\n  /**\n   * The initial relatively index origin of the tab if it was created and selected after there\n   * was already a selected tab. Provides context of what position the tab should originate from.\n   */\n  origin: number | null = null;\n\n  /**\n   * Whether the tab is currently active.\n   */\n  isActive = false;\n\n  constructor(private _viewContainerRef: ViewContainerRef) {\n    super();\n  }\n\n  ngOnChanges(changes: SimpleChanges): void {\n    if (changes.hasOwnProperty('textLabel')) {\n      this._labelChange.next();\n    }\n\n    if (changes.hasOwnProperty('disabled')) {\n      this._disableChange.next();\n    }\n  }\n\n  ngOnDestroy(): void {\n    this._disableChange.complete();\n    this._labelChange.complete();\n  }\n\n  ngOnInit(): void {\n    this._contentPortal = new TemplatePortal(this._content, this._viewContainerRef);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/** Animations used by the Material tabs. */\nexport const matTabsAnimations: {\n  readonly translateTab: AnimationTriggerMetadata;\n} = {\n  /** Animation translates a tab along the X axis. */\n  translateTab: trigger('translateTab', [\n    // Note: transitions to `none` instead of 0, because some browsers might blur the content.\n    state('center, void, left-origin-center, right-origin-center', style({transform: 'none'})),\n    state('left', style({transform: 'translate3d(-100%, 0, 0)'})),\n    state('right', style({transform: 'translate3d(100%, 0, 0)'})),\n    transition('* => left, * => right, left => center, right => center',\n        animate('500ms cubic-bezier(0.35, 0, 0.25, 1)')),\n    transition('void => left-origin-center', [\n      style({transform: 'translate3d(-100%, 0, 0)'}),\n      animate('500ms cubic-bezier(0.35, 0, 0.25, 1)')\n    ]),\n    transition('void => right-origin-center', [\n      style({transform: 'translate3d(100%, 0, 0)'}),\n      animate('500ms cubic-bezier(0.35, 0, 0.25, 1)')\n    ])\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  Input,\n  Inject,\n  Output,\n  EventEmitter,\n  OnDestroy,\n  OnInit,\n  ElementRef,\n  Directive,\n  Optional,\n  ViewEncapsulation,\n  ChangeDetectionStrategy,\n  ComponentFactoryResolver,\n  ViewContainerRef,\n  forwardRef,\n} from '@angular/core';\nimport {AnimationEvent} from '@angular/animations';\nimport {TemplatePortal, CdkPortalOutlet} from '@angular/cdk/portal';\nimport {Directionality, Direction} from '@angular/cdk/bidi';\nimport {Subscription} from 'rxjs/Subscription';\nimport {matTabsAnimations} from './tabs-animations';\n\n/**\n * These position states are used internally as animation states for the tab body. Setting the\n * position state to left, right, or center will transition the tab body from its current\n * position to its respective state. If there is not current position (void, in the case of a new\n * tab body), then there will be no transition animation to its state.\n *\n * In the case of a new tab body that should immediately be centered with an animating transition,\n * then left-origin-center or right-origin-center can be used, which will use left or right as its\n * psuedo-prior state.\n */\nexport type MatTabBodyPositionState =\n    'left' | 'center' | 'right' | 'left-origin-center' | 'right-origin-center';\n\n/**\n * The origin state is an internally used state that is set on a new tab body indicating if it\n * began to the left or right of the prior selected index. For example, if the selected index was\n * set to 1, and a new tab is created and selected at index 2, then the tab body would have an\n * origin of right because its index was greater than the prior selected index.\n */\nexport type MatTabBodyOriginState = 'left' | 'right';\n\n/**\n * The portal host directive for the contents of the tab.\n * @docs-private\n */\n@Directive({\n  selector: '[matTabBodyHost]'\n})\nexport class MatTabBodyPortal extends CdkPortalOutlet implements OnInit, OnDestroy {\n  /** A subscription to events for when the tab body begins centering. */\n  private _centeringSub: Subscription;\n  /** A subscription to events for when the tab body finishes leaving from center position. */\n  private _leavingSub: Subscription;\n\n  constructor(\n    _componentFactoryResolver: ComponentFactoryResolver,\n    _viewContainerRef: ViewContainerRef,\n    @Inject(forwardRef(() => MatTabBody)) private _host: MatTabBody) {\n      super(_componentFactoryResolver, _viewContainerRef);\n  }\n\n  /** Set initial visibility or set up subscription for changing visibility. */\n  ngOnInit(): void {\n    if (this._host._isCenterPosition(this._host._position)) {\n      this.attach(this._host._content);\n    }\n    this._centeringSub = this._host._beforeCentering.subscribe((isCentering: boolean) => {\n      if (isCentering) {\n        if (!this.hasAttached()) {\n          this.attach(this._host._content);\n        }\n      }\n    });\n\n    this._leavingSub = this._host._afterLeavingCenter.subscribe(() => {\n      this.detach();\n    });\n  }\n\n  /** Clean up centering subscription. */\n  ngOnDestroy(): void {\n    if (this._centeringSub && !this._centeringSub.closed) {\n      this._centeringSub.unsubscribe();\n    }\n\n    if (this._leavingSub && !this._leavingSub.closed) {\n      this._leavingSub.unsubscribe();\n    }\n  }\n}\n\n/**\n * Wrapper for the contents of a tab.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-tab-body',\n  templateUrl: 'tab-body.html',\n  styleUrls: ['tab-body.css'],\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  animations: [matTabsAnimations.translateTab],\n  host: {\n    'class': 'mat-tab-body',\n  },\n})\nexport class MatTabBody implements OnInit {\n  /** Event emitted when the tab begins to animate towards the center as the active tab. */\n  @Output() _onCentering: EventEmitter<number> = new EventEmitter<number>();\n\n  /** Event emitted before the centering of the tab begins. */\n  @Output() _beforeCentering: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n  /** Event emitted before the centering of the tab begins. */\n  @Output() _afterLeavingCenter: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n  /** Event emitted when the tab completes its animation towards the center. */\n  @Output() _onCentered: EventEmitter<void> = new EventEmitter<void>(true);\n\n  /** The tab body content to display. */\n  @Input('content') _content: TemplatePortal<any>;\n\n  /** The shifted index position of the tab body, where zero represents the active center tab. */\n  _position: MatTabBodyPositionState;\n  @Input('position') set position(position: number) {\n    if (position < 0) {\n      this._position = this._getLayoutDirection() == 'ltr' ? 'left' : 'right';\n    } else if (position > 0) {\n      this._position = this._getLayoutDirection() == 'ltr' ? 'right' : 'left';\n    } else {\n      this._position = 'center';\n    }\n  }\n\n  /** The origin position from which this tab should appear when it is centered into view. */\n  _origin: MatTabBodyOriginState;\n\n  /** The origin position from which this tab should appear when it is centered into view. */\n  @Input('origin') set origin(origin: number) {\n    if (origin == null) { return; }\n\n    const dir = this._getLayoutDirection();\n    if ((dir == 'ltr' && origin <= 0) || (dir == 'rtl' && origin > 0)) {\n      this._origin = 'left';\n    } else {\n      this._origin = 'right';\n    }\n  }\n\n  constructor(private _elementRef: ElementRef,\n              @Optional() private _dir: Directionality) { }\n\n  /**\n   * After initialized, check if the content is centered and has an origin. If so, set the\n   * special position states that transition the tab from the left or right before centering.\n   */\n  ngOnInit() {\n    if (this._position == 'center' && this._origin) {\n      this._position = this._origin == 'left' ? 'left-origin-center' : 'right-origin-center';\n    }\n  }\n\n  _onTranslateTabStarted(e: AnimationEvent): void {\n    const isCentering = this._isCenterPosition(e.toState);\n    this._beforeCentering.emit(isCentering);\n    if (isCentering) {\n      this._onCentering.emit(this._elementRef.nativeElement.clientHeight);\n    }\n  }\n\n  _onTranslateTabComplete(e: AnimationEvent): void {\n    // If the transition to the center is complete, emit an event.\n    if (this._isCenterPosition(e.toState) && this._isCenterPosition(this._position)) {\n      this._onCentered.emit();\n    }\n\n    if (this._isCenterPosition(e.fromState) && !this._isCenterPosition(this._position)) {\n      this._afterLeavingCenter.emit();\n    }\n  }\n\n  /** The text direction of the containing app. */\n  _getLayoutDirection(): Direction {\n    return this._dir && this._dir.value === 'rtl' ? 'rtl' : 'ltr';\n  }\n\n  /** Whether the provided position state is considered center, regardless of origin. */\n  _isCenterPosition(position: MatTabBodyPositionState|string): boolean {\n    return position == 'center' ||\n        position == 'left-origin-center' ||\n        position == 'right-origin-center';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  AfterContentChecked,\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  ElementRef,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  Output,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {coerceBooleanProperty, coerceNumberProperty} from '@angular/cdk/coercion';\nimport {Subscription} from 'rxjs/Subscription';\nimport {MatTab} from './tab';\nimport {MatTabHeader} from './tab-header';\nimport {merge} from 'rxjs/observable/merge';\nimport {\n  CanColor,\n  CanDisableRipple,\n  mixinColor,\n  mixinDisableRipple,\n  ThemePalette\n} from '@angular/material/core';\n\n\n/** Used to generate unique ID's for each tab component */\nlet nextId = 0;\n\n/** A simple change event emitted on focus or selection changes. */\nexport class MatTabChangeEvent {\n  /** Index of the currently-selected tab. */\n  index: number;\n  /** Reference to the currently-selected tab. */\n  tab: MatTab;\n}\n\n/** Possible positions for the tab header. */\nexport type MatTabHeaderPosition = 'above' | 'below';\n\n// Boilerplate for applying mixins to MatTabGroup.\n/** @docs-private */\nexport class MatTabGroupBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatTabGroupMixinBase = mixinColor(mixinDisableRipple(MatTabGroupBase), 'primary');\n\n/**\n * Material design tab-group component.  Supports basic tab pairs (label + content) and includes\n * animated ink-bar, keyboard navigation, and screen reader.\n * See: https://www.google.com/design/spec/components/tabs.html\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-tab-group',\n  exportAs: 'matTabGroup',\n  templateUrl: 'tab-group.html',\n  styleUrls: ['tab-group.css'],\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  inputs: ['color', 'disableRipple'],\n  host: {\n    'class': 'mat-tab-group',\n    '[class.mat-tab-group-dynamic-height]': 'dynamicHeight',\n    '[class.mat-tab-group-inverted-header]': 'headerPosition === \"below\"',\n  },\n})\nexport class MatTabGroup extends _MatTabGroupMixinBase implements AfterContentInit,\n    AfterContentChecked, OnDestroy, CanColor, CanDisableRipple {\n\n  @ContentChildren(MatTab) _tabs: QueryList<MatTab>;\n\n  @ViewChild('tabBodyWrapper') _tabBodyWrapper: ElementRef;\n\n  /** The tab index that should be selected after the content has been checked. */\n  private _indexToSelect: number | null = 0;\n\n  /** Snapshot of the height of the tab body wrapper before another tab is activated. */\n  private _tabBodyWrapperHeight: number = 0;\n\n  /** Subscription to tabs being added/removed. */\n  private _tabsSubscription = Subscription.EMPTY;\n\n  /** Subscription to changes in the tab labels. */\n  private _tabLabelSubscription = Subscription.EMPTY;\n\n  /** Whether the tab group should grow to the size of the active tab. */\n  @Input()\n  get dynamicHeight(): boolean { return this._dynamicHeight; }\n  set dynamicHeight(value: boolean) { this._dynamicHeight = coerceBooleanProperty(value); }\n  private _dynamicHeight: boolean = false;\n\n  /** @deprecated */\n  @Input('mat-dynamic-height')\n  get _dynamicHeightDeprecated(): boolean { return this._dynamicHeight; }\n  set _dynamicHeightDeprecated(value: boolean) { this._dynamicHeight = value; }\n\n  /** The index of the active tab. */\n  @Input()\n  set selectedIndex(value: number | null) {\n    this._indexToSelect = coerceNumberProperty(value, null);\n  }\n  get selectedIndex(): number | null { return this._selectedIndex; }\n  private _selectedIndex: number | null = null;\n\n  /** Position of the tab header. */\n  @Input() headerPosition: MatTabHeaderPosition = 'above';\n\n  /** Background color of the tab group. */\n  @Input()\n  get backgroundColor(): ThemePalette { return this._backgroundColor; }\n  set backgroundColor(value: ThemePalette) {\n    const nativeElement: HTMLElement = this._elementRef.nativeElement;\n\n    nativeElement.classList.remove(`mat-background-${this.backgroundColor}`);\n\n    if (value) {\n      nativeElement.classList.add(`mat-background-${value}`);\n    }\n\n    this._backgroundColor = value;\n  }\n  private _backgroundColor: ThemePalette;\n\n  /** Output to enable support for two-way binding on `[(selectedIndex)]` */\n  @Output() selectedIndexChange: EventEmitter<number> = new EventEmitter();\n\n  /** Event emitted when focus has changed within a tab group. */\n  @Output() focusChange: EventEmitter<MatTabChangeEvent> = new EventEmitter<MatTabChangeEvent>();\n\n  /** Event emitted when the body animation has completed */\n  @Output() animationDone: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Event emitted when the tab selection has changed. */\n  @Output() selectedTabChange: EventEmitter<MatTabChangeEvent> =\n      new EventEmitter<MatTabChangeEvent>(true);\n\n  /**\n   * Event emitted when the tab selection has changed.\n   * @deprecated Use `selectedTabChange` instead.\n   */\n  @Output() selectChange: EventEmitter<MatTabChangeEvent> = this.selectedTabChange;\n\n  private _groupId: number;\n\n  constructor(elementRef: ElementRef,\n              private _changeDetectorRef: ChangeDetectorRef) {\n    super(elementRef);\n    this._groupId = nextId++;\n  }\n\n  /**\n   * After the content is checked, this component knows what tabs have been defined\n   * and what the selected index should be. This is where we can know exactly what position\n   * each tab should be in according to the new selected index, and additionally we know how\n   * a new selected tab should transition in (from the left or right).\n   */\n  ngAfterContentChecked(): void {\n    // Clamp the next selected index to the boundsof 0 and the tabs length.\n    // Note the `|| 0`, which ensures that values like NaN can't get through\n    // and which would otherwise throw the component into an infinite loop\n    // (since Math.max(NaN, 0) === NaN).\n    let indexToSelect = this._indexToSelect =\n        Math.min(this._tabs.length - 1, Math.max(this._indexToSelect || 0, 0));\n\n    // If there is a change in selected index, emit a change event. Should not trigger if\n    // the selected index has not yet been initialized.\n    if (this._selectedIndex != indexToSelect && this._selectedIndex != null) {\n      const tabChangeEvent = this._createChangeEvent(indexToSelect);\n      this.selectedTabChange.emit(tabChangeEvent);\n      // Emitting this value after change detection has run\n      // since the checked content may contain this variable'\n      Promise.resolve().then(() => this.selectedIndexChange.emit(indexToSelect));\n    }\n\n    // Setup the position for each tab and optionally setup an origin on the next selected tab.\n    this._tabs.forEach((tab: MatTab, index: number) => {\n      tab.position = index - indexToSelect;\n      tab.isActive = index === indexToSelect;\n\n      // If there is already a selected tab, then set up an origin for the next selected tab\n      // if it doesn't have one already.\n      if (this._selectedIndex != null && tab.position == 0 && !tab.origin) {\n        tab.origin = indexToSelect - this._selectedIndex;\n      }\n    });\n\n    if (this._selectedIndex !== indexToSelect) {\n      this._selectedIndex = indexToSelect;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  ngAfterContentInit() {\n    this._subscribeToTabLabels();\n\n    // Subscribe to changes in the amount of tabs, in order to be\n    // able to re-render the content as new tabs are added or removed.\n    this._tabsSubscription = this._tabs.changes.subscribe(() => {\n      this._subscribeToTabLabels();\n      this._changeDetectorRef.markForCheck();\n    });\n  }\n\n  ngOnDestroy() {\n    this._tabsSubscription.unsubscribe();\n    this._tabLabelSubscription.unsubscribe();\n  }\n\n  _focusChanged(index: number) {\n    this.focusChange.emit(this._createChangeEvent(index));\n  }\n\n  private _createChangeEvent(index: number): MatTabChangeEvent {\n    const event = new MatTabChangeEvent;\n    event.index = index;\n    if (this._tabs && this._tabs.length) {\n      event.tab = this._tabs.toArray()[index];\n    }\n    return event;\n  }\n\n  /**\n   * Subscribes to changes in the tab labels. This is needed, because the @Input for the label is\n   * on the MatTab component, whereas the data binding is inside the MatTabGroup. In order for the\n   * binding to be updated, we need to subscribe to changes in it and trigger change detection\n   * manually.\n   */\n  private _subscribeToTabLabels() {\n    if (this._tabLabelSubscription) {\n      this._tabLabelSubscription.unsubscribe();\n    }\n\n    this._tabLabelSubscription = merge(\n        ...this._tabs.map(tab => tab._disableChange),\n        ...this._tabs.map(tab => tab._labelChange)).subscribe(() => {\n      this._changeDetectorRef.markForCheck();\n    });\n  }\n\n  /** Returns a unique id for each tab label element */\n  _getTabLabelId(i: number): string {\n    return `mat-tab-label-${this._groupId}-${i}`;\n  }\n\n  /** Returns a unique id for each tab content element */\n  _getTabContentId(i: number): string {\n    return `mat-tab-content-${this._groupId}-${i}`;\n  }\n\n  /**\n   * Sets the height of the body wrapper to the height of the activating tab if dynamic\n   * height property is true.\n   */\n  _setTabBodyWrapperHeight(tabHeight: number): void {\n    if (!this._dynamicHeight || !this._tabBodyWrapperHeight) { return; }\n\n    const wrapper: HTMLElement = this._tabBodyWrapper.nativeElement;\n\n    wrapper.style.height = this._tabBodyWrapperHeight + 'px';\n\n    // This conditional forces the browser to paint the height so that\n    // the animation to the new height can have an origin.\n    if (this._tabBodyWrapper.nativeElement.offsetHeight) {\n      wrapper.style.height = tabHeight + 'px';\n    }\n  }\n\n  /** Removes the height of the tab body wrapper. */\n  _removeTabBodyWrapperHeight(): void {\n    this._tabBodyWrapperHeight = this._tabBodyWrapper.nativeElement.clientHeight;\n    this._tabBodyWrapper.nativeElement.style.height = '';\n    this.animationDone.emit();\n  }\n\n  /** Handle click events, setting new selected index if appropriate. */\n  _handleClick(tab: MatTab, tabHeader: MatTabHeader, idx: number) {\n    if (!tab.disabled) {\n      this.selectedIndex = tabHeader.focusIndex = idx;\n    }\n  }\n\n  /** Retrieves the tabindex for the tab. */\n  _getTabIndex(tab: MatTab, idx: number): number | null {\n    if (tab.disabled) {\n      return null;\n    }\n    return this.selectedIndex === idx ? 0 : -1;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, ElementRef} from '@angular/core';\nimport {CanDisable, mixinDisabled} from '@angular/material/core';\n\n// Boilerplate for applying mixins to MatTabLabelWrapper.\n/** @docs-private */\nexport class MatTabLabelWrapperBase {}\nexport const _MatTabLabelWrapperMixinBase = mixinDisabled(MatTabLabelWrapperBase);\n\n/**\n * Used in the `mat-tab-group` view to display tab labels.\n * @docs-private\n */\n@Directive({\n  selector: '[matTabLabelWrapper]',\n  inputs: ['disabled'],\n  host: {\n    '[class.mat-tab-disabled]': 'disabled'\n  }\n})\nexport class MatTabLabelWrapper extends _MatTabLabelWrapperMixinBase implements CanDisable {\n  constructor(public elementRef: ElementRef) {\n    super();\n  }\n\n  /** Sets focus on the wrapper element */\n  focus(): void {\n    this.elementRef.nativeElement.focus();\n  }\n\n  getOffsetLeft(): number {\n    return this.elementRef.nativeElement.offsetLeft;\n  }\n\n  getOffsetWidth(): number {\n    return this.elementRef.nativeElement.offsetWidth;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Direction, Directionality} from '@angular/cdk/bidi';\nimport {ENTER, LEFT_ARROW, RIGHT_ARROW, SPACE} from '@angular/cdk/keycodes';\nimport {\n  AfterContentChecked,\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  ElementRef,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  Optional,\n  Output,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {CanDisableRipple, mixinDisableRipple} from '@angular/material/core';\nimport {merge} from 'rxjs/observable/merge';\nimport {of as observableOf} from 'rxjs/observable/of';\nimport {Subscription} from 'rxjs/Subscription';\nimport {coerceNumberProperty} from '@angular/cdk/coercion';\nimport {MatInkBar} from './ink-bar';\nimport {MatTabLabelWrapper} from './tab-label-wrapper';\nimport {ViewportRuler} from '@angular/cdk/scrolling';\n\n\n/**\n * The directions that scrolling can go in when the header's tabs exceed the header width. 'After'\n * will scroll the header towards the end of the tabs list and 'before' will scroll towards the\n * beginning of the list.\n */\nexport type ScrollDirection = 'after' | 'before';\n\n/**\n * The distance in pixels that will be overshot when scrolling a tab label into view. This helps\n * provide a small affordance to the label next to it.\n */\nconst EXAGGERATED_OVERSCROLL = 60;\n\n// Boilerplate for applying mixins to MatTabHeader.\n/** @docs-private */\nexport class MatTabHeaderBase {}\nexport const _MatTabHeaderMixinBase = mixinDisableRipple(MatTabHeaderBase);\n\n/**\n * The header of the tab group which displays a list of all the tabs in the tab group. Includes\n * an ink bar that follows the currently selected tab. When the tabs list's width exceeds the\n * width of the header container, then arrows will be displayed to allow the user to scroll\n * left and right across the header.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-tab-header',\n  templateUrl: 'tab-header.html',\n  styleUrls: ['tab-header.css'],\n  inputs: ['disableRipple'],\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {\n    'class': 'mat-tab-header',\n    '[class.mat-tab-header-pagination-controls-enabled]': '_showPaginationControls',\n    '[class.mat-tab-header-rtl]': \"_getLayoutDirection() == 'rtl'\",\n  },\n})\nexport class MatTabHeader extends _MatTabHeaderMixinBase\n    implements AfterContentChecked, AfterContentInit, OnDestroy, CanDisableRipple {\n\n  @ContentChildren(MatTabLabelWrapper) _labelWrappers: QueryList<MatTabLabelWrapper>;\n  @ViewChild(MatInkBar) _inkBar: MatInkBar;\n  @ViewChild('tabListContainer') _tabListContainer: ElementRef;\n  @ViewChild('tabList') _tabList: ElementRef;\n\n  /** The tab index that is focused. */\n  private _focusIndex: number = 0;\n\n  /** The distance in pixels that the tab labels should be translated to the left. */\n  private _scrollDistance = 0;\n\n  /** Whether the header should scroll to the selected index after the view has been checked. */\n  private _selectedIndexChanged = false;\n\n  /** Combines listeners that will re-align the ink bar whenever they're invoked. */\n  private _realignInkBar = Subscription.EMPTY;\n\n  /** Whether the controls for pagination should be displayed */\n  _showPaginationControls = false;\n\n  /** Whether the tab list can be scrolled more towards the end of the tab label list. */\n  _disableScrollAfter = true;\n\n  /** Whether the tab list can be scrolled more towards the beginning of the tab label list. */\n  _disableScrollBefore = true;\n\n  /**\n   * The number of tab labels that are displayed on the header. When this changes, the header\n   * should re-evaluate the scroll position.\n   */\n  private _tabLabelCount: number;\n\n  /** Whether the scroll distance has changed and should be applied after the view is checked. */\n  private _scrollDistanceChanged: boolean;\n\n  private _selectedIndex: number = 0;\n\n  /** The index of the active tab. */\n  @Input()\n  get selectedIndex(): number { return this._selectedIndex; }\n  set selectedIndex(value: number) {\n    value = coerceNumberProperty(value);\n    this._selectedIndexChanged = this._selectedIndex != value;\n    this._selectedIndex = value;\n    this._focusIndex = value;\n  }\n\n  /** Event emitted when the option is selected. */\n  @Output() selectFocusedIndex = new EventEmitter();\n\n  /** Event emitted when a label is focused. */\n  @Output() indexFocused = new EventEmitter();\n\n  constructor(private _elementRef: ElementRef,\n              private _changeDetectorRef: ChangeDetectorRef,\n              private _viewportRuler: ViewportRuler,\n              @Optional() private _dir: Directionality) {\n    super();\n  }\n\n  ngAfterContentChecked(): void {\n    // If the number of tab labels have changed, check if scrolling should be enabled\n    if (this._tabLabelCount != this._labelWrappers.length) {\n      this._updatePagination();\n      this._tabLabelCount = this._labelWrappers.length;\n      this._changeDetectorRef.markForCheck();\n    }\n\n    // If the selected index has changed, scroll to the label and check if the scrolling controls\n    // should be disabled.\n    if (this._selectedIndexChanged) {\n      this._scrollToLabel(this._selectedIndex);\n      this._checkScrollingControls();\n      this._alignInkBarToSelectedTab();\n      this._selectedIndexChanged = false;\n      this._changeDetectorRef.markForCheck();\n    }\n\n    // If the scroll distance has been changed (tab selected, focused, scroll controls activated),\n    // then translate the header to reflect this.\n    if (this._scrollDistanceChanged) {\n      this._updateTabScrollPosition();\n      this._scrollDistanceChanged = false;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  _handleKeydown(event: KeyboardEvent) {\n    switch (event.keyCode) {\n      case RIGHT_ARROW:\n        this._focusNextTab();\n        break;\n      case LEFT_ARROW:\n        this._focusPreviousTab();\n        break;\n      case ENTER:\n      case SPACE:\n        this.selectFocusedIndex.emit(this.focusIndex);\n        event.preventDefault();\n        break;\n    }\n  }\n\n  /**\n   * Aligns the ink bar to the selected tab on load.\n   */\n  ngAfterContentInit() {\n    const dirChange = this._dir ? this._dir.change : observableOf(null);\n    const resize = this._viewportRuler.change(150);\n    const realign = () => {\n      this._updatePagination();\n      this._alignInkBarToSelectedTab();\n    };\n\n    // Defer the first call in order to allow for slower browsers to lay out the elements.\n    // This helps in cases where the user lands directly on a page with paginated tabs.\n    typeof requestAnimationFrame !== 'undefined' ? requestAnimationFrame(realign) : realign();\n    this._realignInkBar = merge(dirChange, resize).subscribe(realign);\n  }\n\n  ngOnDestroy() {\n    this._realignInkBar.unsubscribe();\n  }\n\n  /**\n   * Callback for when the MutationObserver detects that the content has changed.\n   */\n  _onContentChanges() {\n    this._updatePagination();\n    this._alignInkBarToSelectedTab();\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /**\n   * Updating the view whether pagination should be enabled or not\n   */\n  _updatePagination() {\n    this._checkPaginationEnabled();\n    this._checkScrollingControls();\n    this._updateTabScrollPosition();\n  }\n\n  /** When the focus index is set, we must manually send focus to the correct label */\n  set focusIndex(value: number) {\n    if (!this._isValidIndex(value) || this._focusIndex == value) { return; }\n\n    this._focusIndex = value;\n    this.indexFocused.emit(value);\n    this._setTabFocus(value);\n  }\n\n  /** Tracks which element has focus; used for keyboard navigation */\n  get focusIndex(): number { return this._focusIndex; }\n\n  /**\n   * Determines if an index is valid.  If the tabs are not ready yet, we assume that the user is\n   * providing a valid index and return true.\n   */\n  _isValidIndex(index: number): boolean {\n    if (!this._labelWrappers) { return true; }\n\n    const tab = this._labelWrappers ? this._labelWrappers.toArray()[index] : null;\n    return !!tab && !tab.disabled;\n  }\n\n  /**\n   * Sets focus on the HTML element for the label wrapper and scrolls it into the view if\n   * scrolling is enabled.\n   */\n  _setTabFocus(tabIndex: number) {\n    if (this._showPaginationControls) {\n      this._scrollToLabel(tabIndex);\n    }\n\n    if (this._labelWrappers && this._labelWrappers.length) {\n      this._labelWrappers.toArray()[tabIndex].focus();\n\n      // Do not let the browser manage scrolling to focus the element, this will be handled\n      // by using translation. In LTR, the scroll left should be 0. In RTL, the scroll width\n      // should be the full width minus the offset width.\n      const containerEl = this._tabListContainer.nativeElement;\n      const dir = this._getLayoutDirection();\n\n      if (dir == 'ltr') {\n        containerEl.scrollLeft = 0;\n      } else {\n        containerEl.scrollLeft = containerEl.scrollWidth - containerEl.offsetWidth;\n      }\n    }\n  }\n\n  /**\n   * Moves the focus towards the beginning or the end of the list depending on the offset provided.\n   * Valid offsets are 1 and -1.\n   */\n  _moveFocus(offset: number) {\n    if (this._labelWrappers) {\n      const tabs: MatTabLabelWrapper[] = this._labelWrappers.toArray();\n\n      for (let i = this.focusIndex + offset; i < tabs.length && i >= 0; i += offset) {\n        if (this._isValidIndex(i)) {\n          this.focusIndex = i;\n          return;\n        }\n      }\n    }\n  }\n\n  /** Increment the focus index by 1 until a valid tab is found. */\n  _focusNextTab(): void {\n    this._moveFocus(this._getLayoutDirection() == 'ltr' ? 1 : -1);\n  }\n\n  /** Decrement the focus index by 1 until a valid tab is found. */\n  _focusPreviousTab(): void {\n    this._moveFocus(this._getLayoutDirection() == 'ltr' ? -1 : 1);\n  }\n\n  /** The layout direction of the containing app. */\n  _getLayoutDirection(): Direction {\n    return this._dir && this._dir.value === 'rtl' ? 'rtl' : 'ltr';\n  }\n\n  /** Performs the CSS transformation on the tab list that will cause the list to scroll. */\n  _updateTabScrollPosition() {\n    const scrollDistance = this.scrollDistance;\n    const translateX = this._getLayoutDirection() === 'ltr' ? -scrollDistance : scrollDistance;\n\n    this._tabList.nativeElement.style.transform = `translate3d(${translateX}px, 0, 0)`;\n  }\n\n  /** Sets the distance in pixels that the tab header should be transformed in the X-axis. */\n  set scrollDistance(v: number) {\n    this._scrollDistance = Math.max(0, Math.min(this._getMaxScrollDistance(), v));\n\n    // Mark that the scroll distance has changed so that after the view is checked, the CSS\n    // transformation can move the header.\n    this._scrollDistanceChanged = true;\n    this._checkScrollingControls();\n  }\n  get scrollDistance(): number { return this._scrollDistance; }\n\n  /**\n   * Moves the tab list in the 'before' or 'after' direction (towards the beginning of the list or\n   * the end of the list, respectively). The distance to scroll is computed to be a third of the\n   * length of the tab list view window.\n   *\n   * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n   * should be called sparingly.\n   */\n  _scrollHeader(scrollDir: ScrollDirection) {\n    const viewLength = this._tabListContainer.nativeElement.offsetWidth;\n\n    // Move the scroll distance one-third the length of the tab list's viewport.\n    this.scrollDistance += (scrollDir == 'before' ? -1 : 1) * viewLength / 3;\n  }\n\n  /**\n   * Moves the tab list such that the desired tab label (marked by index) is moved into view.\n   *\n   * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n   * should be called sparingly.\n   */\n  _scrollToLabel(labelIndex: number) {\n    const selectedLabel = this._labelWrappers ? this._labelWrappers.toArray()[labelIndex] : null;\n\n    if (!selectedLabel) { return; }\n\n    // The view length is the visible width of the tab labels.\n    const viewLength = this._tabListContainer.nativeElement.offsetWidth;\n\n    let labelBeforePos: number, labelAfterPos: number;\n    if (this._getLayoutDirection() == 'ltr') {\n      labelBeforePos = selectedLabel.getOffsetLeft();\n      labelAfterPos = labelBeforePos + selectedLabel.getOffsetWidth();\n    } else {\n      labelAfterPos = this._tabList.nativeElement.offsetWidth - selectedLabel.getOffsetLeft();\n      labelBeforePos = labelAfterPos - selectedLabel.getOffsetWidth();\n    }\n\n    const beforeVisiblePos = this.scrollDistance;\n    const afterVisiblePos = this.scrollDistance + viewLength;\n\n    if (labelBeforePos < beforeVisiblePos) {\n      // Scroll header to move label to the before direction\n      this.scrollDistance -= beforeVisiblePos - labelBeforePos + EXAGGERATED_OVERSCROLL;\n    } else if (labelAfterPos > afterVisiblePos) {\n      // Scroll header to move label to the after direction\n      this.scrollDistance += labelAfterPos - afterVisiblePos + EXAGGERATED_OVERSCROLL;\n    }\n  }\n\n  /**\n   * Evaluate whether the pagination controls should be displayed. If the scroll width of the\n   * tab list is wider than the size of the header container, then the pagination controls should\n   * be shown.\n   *\n   * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n   * should be called sparingly.\n   */\n  _checkPaginationEnabled() {\n    const isEnabled =\n        this._tabList.nativeElement.scrollWidth > this._elementRef.nativeElement.offsetWidth;\n\n    if (!isEnabled) {\n      this.scrollDistance = 0;\n    }\n\n    if (isEnabled !== this._showPaginationControls) {\n      this._changeDetectorRef.markForCheck();\n    }\n\n    this._showPaginationControls = isEnabled;\n  }\n\n  /**\n   * Evaluate whether the before and after controls should be enabled or disabled.\n   * If the header is at the beginning of the list (scroll distance is equal to 0) then disable the\n   * before button. If the header is at the end of the list (scroll distance is equal to the\n   * maximum distance we can scroll), then disable the after button.\n   *\n   * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n   * should be called sparingly.\n   */\n  _checkScrollingControls() {\n    // Check if the pagination arrows should be activated.\n    this._disableScrollBefore = this.scrollDistance == 0;\n    this._disableScrollAfter = this.scrollDistance == this._getMaxScrollDistance();\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /**\n   * Determines what is the maximum length in pixels that can be set for the scroll distance. This\n   * is equal to the difference in width between the tab list container and tab header container.\n   *\n   * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n   * should be called sparingly.\n   */\n  _getMaxScrollDistance(): number {\n    const lengthOfTabList = this._tabList.nativeElement.scrollWidth;\n    const viewLength = this._tabListContainer.nativeElement.offsetWidth;\n    return (lengthOfTabList - viewLength) || 0;\n  }\n\n  /** Tells the ink-bar to align itself to the current label wrapper */\n  private _alignInkBarToSelectedTab(): void {\n    const selectedLabelWrapper = this._labelWrappers && this._labelWrappers.length ?\n        this._labelWrappers.toArray()[this.selectedIndex].elementRef.nativeElement :\n        null;\n\n    this._inkBar.alignToElement(selectedLabelWrapper);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {Platform} from '@angular/cdk/platform';\nimport {ViewportRuler} from '@angular/cdk/scrolling';\nimport {\n  AfterContentInit,\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  forwardRef,\n  Inject,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {\n  CanColor,\n  CanDisable,\n  CanDisableRipple,\n  HasTabIndex,\n  MAT_RIPPLE_GLOBAL_OPTIONS,\n  mixinColor,\n  mixinDisabled,\n  mixinDisableRipple,\n  mixinTabIndex, RippleConfig,\n  RippleGlobalOptions,\n  RippleRenderer,\n  RippleTarget,\n  ThemePalette,\n} from '@angular/material/core';\nimport {merge} from 'rxjs/observable/merge';\nimport {of as observableOf} from 'rxjs/observable/of';\nimport {takeUntil} from 'rxjs/operators/takeUntil';\nimport {Subject} from 'rxjs/Subject';\nimport {MatInkBar} from '../ink-bar';\n\n\n// Boilerplate for applying mixins to MatTabNav.\n/** @docs-private */\nexport class MatTabNavBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatTabNavMixinBase = mixinDisableRipple(mixinColor(MatTabNavBase, 'primary'));\n\n/**\n * Navigation component matching the styles of the tab group header.\n * Provides anchored navigation with animated ink bar.\n */\n@Component({\n  moduleId: module.id,\n  selector: '[mat-tab-nav-bar]',\n  exportAs: 'matTabNavBar, matTabNav',\n  inputs: ['color', 'disableRipple'],\n  templateUrl: 'tab-nav-bar.html',\n  styleUrls: ['tab-nav-bar.css'],\n  host: {'class': 'mat-tab-nav-bar'},\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatTabNav extends _MatTabNavMixinBase implements AfterContentInit, CanColor,\n    CanDisableRipple, OnDestroy {\n\n  /** Subject that emits when the component has been destroyed. */\n  private _onDestroy = new Subject<void>();\n\n  _activeLinkChanged: boolean;\n  _activeLinkElement: ElementRef;\n\n  @ViewChild(MatInkBar) _inkBar: MatInkBar;\n\n  /** Query list of all tab links of the tab navigation. */\n  @ContentChildren(forwardRef(() => MatTabLink), {descendants: true})\n  _tabLinks: QueryList<MatTabLink>;\n\n  /** Background color of the tab nav. */\n  @Input()\n  get backgroundColor(): ThemePalette { return this._backgroundColor; }\n  set backgroundColor(value: ThemePalette) {\n    const nativeElement: HTMLElement = this._elementRef.nativeElement;\n\n    nativeElement.classList.remove(`mat-background-${this.backgroundColor}`);\n\n    if (value) {\n      nativeElement.classList.add(`mat-background-${value}`);\n    }\n\n    this._backgroundColor = value;\n  }\n  private _backgroundColor: ThemePalette;\n\n  /** Whether ripples should be disabled for all links or not. */\n  get disableRipple() { return this._disableRipple; }\n  set disableRipple(value: boolean) {\n    this._disableRipple = coerceBooleanProperty(value);\n    this._setLinkDisableRipple();\n  }\n  private _disableRipple: boolean = false;\n\n  constructor(elementRef: ElementRef,\n              @Optional() private _dir: Directionality,\n              private _ngZone: NgZone,\n              private _changeDetectorRef: ChangeDetectorRef,\n              private _viewportRuler: ViewportRuler) {\n    super(elementRef);\n  }\n\n  /** Notifies the component that the active link has been changed. */\n  updateActiveLink(element: ElementRef) {\n    this._activeLinkChanged = this._activeLinkElement != element;\n    this._activeLinkElement = element;\n\n    if (this._activeLinkChanged) {\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  ngAfterContentInit(): void {\n    this._ngZone.runOutsideAngular(() => {\n      const dirChange = this._dir ? this._dir.change : observableOf(null);\n\n      return merge(dirChange, this._viewportRuler.change(10)).pipe(takeUntil(this._onDestroy))\n          .subscribe(() => this._alignInkBar());\n    });\n\n    this._setLinkDisableRipple();\n  }\n\n  /** Checks if the active link has been changed and, if so, will update the ink bar. */\n  ngAfterContentChecked(): void {\n    if (this._activeLinkChanged) {\n      this._alignInkBar();\n      this._activeLinkChanged = false;\n    }\n  }\n\n  ngOnDestroy() {\n    this._onDestroy.next();\n    this._onDestroy.complete();\n  }\n\n  /** Aligns the ink bar to the active link. */\n  _alignInkBar(): void {\n    if (this._activeLinkElement) {\n      this._inkBar.alignToElement(this._activeLinkElement.nativeElement);\n    }\n  }\n\n  /** Sets the `disableRipple` property on each link of the navigation bar. */\n  private _setLinkDisableRipple() {\n    if (this._tabLinks) {\n      this._tabLinks.forEach(link => link.disableRipple = this.disableRipple);\n    }\n  }\n}\n\n\n// Boilerplate for applying mixins to MatTabLink.\nexport class MatTabLinkBase {}\nexport const _MatTabLinkMixinBase =\n  mixinTabIndex(mixinDisableRipple(mixinDisabled(MatTabLinkBase)));\n\n/**\n * Link inside of a `mat-tab-nav-bar`.\n */\n@Directive({\n  selector: '[mat-tab-link], [matTabLink]',\n  exportAs: 'matTabLink',\n  inputs: ['disabled', 'disableRipple', 'tabIndex'],\n  host: {\n    'class': 'mat-tab-link',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.tabIndex]': 'tabIndex',\n    '[class.mat-tab-disabled]': 'disabled',\n    '[class.mat-tab-label-active]': 'active',\n  }\n})\nexport class MatTabLink extends _MatTabLinkMixinBase\n    implements OnDestroy, CanDisable, CanDisableRipple, HasTabIndex, RippleTarget {\n\n  /** Whether the tab link is active or not. */\n  private _isActive: boolean = false;\n\n  /** Reference to the RippleRenderer for the tab-link. */\n  private _tabLinkRipple: RippleRenderer;\n\n  /** Whether the link is active. */\n  @Input()\n  get active(): boolean { return this._isActive; }\n  set active(value: boolean) {\n    this._isActive = value;\n    if (value) {\n      this._tabNavBar.updateActiveLink(this._elementRef);\n    }\n  }\n\n  /**\n   * Ripple configuration for ripples that are launched on pointer down.\n   * @docs-private\n   */\n  rippleConfig: RippleConfig = {};\n\n  /**\n   * Whether ripples are disabled on interaction\n   * @docs-private\n   */\n  get rippleDisabled(): boolean {\n    return this.disabled || this.disableRipple;\n  }\n\n  constructor(private _tabNavBar: MatTabNav,\n              private _elementRef: ElementRef,\n              ngZone: NgZone,\n              platform: Platform,\n              @Optional() @Inject(MAT_RIPPLE_GLOBAL_OPTIONS) globalOptions: RippleGlobalOptions,\n              @Attribute('tabindex') tabIndex: string) {\n    super();\n\n    this._tabLinkRipple = new RippleRenderer(this, ngZone, _elementRef, platform);\n    this._tabLinkRipple.setupTriggerEvents(_elementRef.nativeElement);\n\n    this.tabIndex = parseInt(tabIndex) || 0;\n\n    if (globalOptions) {\n      this.rippleConfig = {speedFactor: globalOptions.baseSpeedFactor};\n    }\n  }\n\n  ngOnDestroy() {\n    this._tabLinkRipple._removeTriggerEvents();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ObserversModule} from '@angular/cdk/observers';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {ScrollDispatchModule, VIEWPORT_RULER_PROVIDER} from '@angular/cdk/scrolling';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {MatInkBar} from './ink-bar';\nimport {MatTab} from './tab';\nimport {MatTabBody, MatTabBodyPortal} from './tab-body';\nimport {MatTabGroup} from './tab-group';\nimport {MatTabHeader} from './tab-header';\nimport {MatTabLabel} from './tab-label';\nimport {MatTabLabelWrapper} from './tab-label-wrapper';\nimport {MatTabLink, MatTabNav} from './tab-nav-bar/tab-nav-bar';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatCommonModule,\n    PortalModule,\n    MatRippleModule,\n    ObserversModule,\n    ScrollDispatchModule,\n  ],\n  // Don't export all components because some are only to be used internally.\n  exports: [\n    MatCommonModule,\n    MatTabGroup,\n    MatTabLabel,\n    MatTab,\n    MatTabNav,\n    MatTabLink,\n  ],\n  declarations: [\n    MatTabGroup,\n    MatTabLabel,\n    MatTab,\n    MatInkBar,\n    MatTabLabelWrapper,\n    MatTabNav,\n    MatTabLink,\n    MatTabBody,\n    MatTabBodyPortal,\n    MatTabHeader\n  ],\n  providers: [VIEWPORT_RULER_PROVIDER],\n})\nexport class MatTabsModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\nimport {AnimationCurves, AnimationDurations} from '@angular/material/core';\n\n/** @docs-private */\nexport const SHOW_ANIMATION =\n  `${AnimationDurations.ENTERING} ${AnimationCurves.DECELERATION_CURVE}`;\n\n/** @docs-private */\nexport const HIDE_ANIMATION =\n  `${AnimationDurations.EXITING} ${AnimationCurves.ACCELERATION_CURVE}`;\n\n/** Animations used by the Material snack bar. */\nexport const matSnackBarAnimations: {\n  readonly contentFade: AnimationTriggerMetadata;\n  readonly snackBarState: AnimationTriggerMetadata;\n} = {\n  /** Animation that slides the dialog in and out of view and fades the opacity. */\n  contentFade: trigger('contentFade', [\n    transition(':enter', [\n      style({opacity: '0'}),\n      animate(`${AnimationDurations.COMPLEX} ${AnimationCurves.STANDARD_CURVE}`)\n    ])\n  ]),\n\n  /** Animation that shows and hides a snack bar. */\n  snackBarState: trigger('state', [\n    state('visible-top, visible-bottom', style({transform: 'translateY(0%)'})),\n    transition('visible-top => hidden-top, visible-bottom => hidden-bottom',\n      animate(HIDE_ANIMATION)),\n    transition('void => visible-top, void => visible-bottom', animate(SHOW_ANIMATION)),\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Component, ViewEncapsulation, Inject, ChangeDetectionStrategy} from '@angular/core';\nimport {MatSnackBarRef} from './snack-bar-ref';\nimport {MAT_SNACK_BAR_DATA} from './snack-bar-config';\nimport {matSnackBarAnimations} from './snack-bar-animations';\n\n\n/**\n * A component used to open as the default snack bar, matching material spec.\n * This should only be used internally by the snack bar service.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'simple-snack-bar',\n  templateUrl: 'simple-snack-bar.html',\n  styleUrls: ['simple-snack-bar.css'],\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  animations: [matSnackBarAnimations.contentFade],\n  host: {\n    '[@contentFade]': '',\n    'class': 'mat-simple-snackbar',\n  }\n})\nexport class SimpleSnackBar {\n  /** Data that was injected into the snack bar. */\n  data: { message: string, action: string };\n\n  constructor(\n    public snackBarRef: MatSnackBarRef<SimpleSnackBar>,\n    @Inject(MAT_SNACK_BAR_DATA) data: any) {\n    this.data = data;\n  }\n\n  /** Performs the action on the snack bar. */\n  action(): void {\n    this.snackBarRef.closeWithAction();\n  }\n\n  /** If the action button should be shown. */\n  get hasAction(): boolean {\n    return !!this.data.action;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ComponentRef,\n  EmbeddedViewRef,\n  ViewChild,\n  NgZone,\n  OnDestroy,\n  ElementRef,\n  ChangeDetectionStrategy,\n  ViewEncapsulation,\n  ChangeDetectorRef,\n} from '@angular/core';\nimport {AnimationEvent} from '@angular/animations';\nimport {\n  BasePortalOutlet,\n  ComponentPortal,\n  CdkPortalOutlet,\n} from '@angular/cdk/portal';\nimport {take} from 'rxjs/operators/take';\nimport {Observable} from 'rxjs/Observable';\nimport {Subject} from 'rxjs/Subject';\nimport {MatSnackBarConfig} from './snack-bar-config';\nimport {matSnackBarAnimations} from './snack-bar-animations';\n\n/**\n * Internal component that wraps user-provided snack bar content.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'snack-bar-container',\n  templateUrl: 'snack-bar-container.html',\n  styleUrls: ['snack-bar-container.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  animations: [matSnackBarAnimations.snackBarState],\n  host: {\n    'role': 'alert',\n    'class': 'mat-snack-bar-container',\n    '[@state]': '_animationState',\n    '(@state.done)': 'onAnimationEnd($event)'\n  },\n})\nexport class MatSnackBarContainer extends BasePortalOutlet implements OnDestroy {\n  /** Whether the component has been destroyed. */\n  private _destroyed = false;\n\n  /** The portal outlet inside of this container into which the snack bar content will be loaded. */\n  @ViewChild(CdkPortalOutlet) _portalOutlet: CdkPortalOutlet;\n\n  /** Subject for notifying that the snack bar has exited from view. */\n  _onExit: Subject<any> = new Subject();\n\n  /** Subject for notifying that the snack bar has finished entering the view. */\n  _onEnter: Subject<any> = new Subject();\n\n  /** The state of the snack bar animations. */\n  _animationState = 'void';\n\n  /** The snack bar configuration. */\n  snackBarConfig: MatSnackBarConfig;\n\n  constructor(\n    private _ngZone: NgZone,\n    private _elementRef: ElementRef,\n    private _changeDetectorRef: ChangeDetectorRef) {\n    super();\n  }\n\n  /** Attach a component portal as content to this snack bar container. */\n  attachComponentPortal<T>(portal: ComponentPortal<T>): ComponentRef<T> {\n    if (this._portalOutlet.hasAttached()) {\n      throw Error('Attempting to attach snack bar content after content is already attached');\n    }\n\n    const element: HTMLElement = this._elementRef.nativeElement;\n\n    if (this.snackBarConfig.panelClass || this.snackBarConfig.extraClasses) {\n      this._setCssClasses(this.snackBarConfig.panelClass);\n      this._setCssClasses(this.snackBarConfig.extraClasses);\n    }\n\n    if (this.snackBarConfig.horizontalPosition === 'center') {\n      element.classList.add('mat-snack-bar-center');\n    }\n\n    if (this.snackBarConfig.verticalPosition === 'top') {\n      element.classList.add('mat-snack-bar-top');\n    }\n\n    return this._portalOutlet.attachComponentPortal(portal);\n  }\n\n  /** Attach a template portal as content to this snack bar container. */\n  attachTemplatePortal(): EmbeddedViewRef<any> {\n    throw Error('Not yet implemented');\n  }\n\n  /** Handle end of animations, updating the state of the snackbar. */\n  onAnimationEnd(event: AnimationEvent) {\n    const {fromState, toState} = event;\n\n    if ((toState === 'void' && fromState !== 'void') || toState.startsWith('hidden')) {\n      this._completeExit();\n    }\n\n    if (toState.startsWith('visible')) {\n      // Note: we shouldn't use `this` inside the zone callback,\n      // because it can cause a memory leak.\n      const onEnter = this._onEnter;\n\n      this._ngZone.run(() => {\n        onEnter.next();\n        onEnter.complete();\n      });\n    }\n  }\n\n  /** Begin animation of snack bar entrance into view. */\n  enter(): void {\n    if (!this._destroyed) {\n      this._animationState = `visible-${this.snackBarConfig.verticalPosition}`;\n      this._changeDetectorRef.detectChanges();\n    }\n  }\n\n  /** Begin animation of the snack bar exiting from view. */\n  exit(): Observable<void> {\n    this._animationState = `hidden-${this.snackBarConfig.verticalPosition}`;\n    return this._onExit;\n  }\n\n  /** Makes sure the exit callbacks have been invoked when the element is destroyed. */\n  ngOnDestroy() {\n    this._destroyed = true;\n    this._completeExit();\n  }\n\n  /**\n   * Waits for the zone to settle before removing the element. Helps prevent\n   * errors where we end up removing an element which is in the middle of an animation.\n   */\n  private _completeExit() {\n    this._ngZone.onMicrotaskEmpty.asObservable().pipe(take(1)).subscribe(() => {\n      this._onExit.next();\n      this._onExit.complete();\n    });\n  }\n\n  /** Applies the user-specified list of CSS classes to the element. */\n  private _setCssClasses(classList: undefined|string|string[]) {\n    if (!classList) {\n      return;\n    }\n\n    const element = this._elementRef.nativeElement;\n\n    if (Array.isArray(classList)) {\n      // Note that we can't use a spread here, because IE doesn't support multiple arguments.\n      classList.forEach(cssClass => element.classList.add(cssClass));\n    } else {\n      element.classList.add(classList);\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {LiveAnnouncer} from '@angular/cdk/a11y';\nimport {BreakpointObserver, Breakpoints} from '@angular/cdk/layout';\nimport {Overlay, OverlayConfig, OverlayRef} from '@angular/cdk/overlay';\nimport {ComponentPortal, ComponentType, PortalInjector} from '@angular/cdk/portal';\nimport {ComponentRef, Injectable, Injector, Optional, SkipSelf} from '@angular/core';\nimport {take} from 'rxjs/operators/take';\nimport {takeUntil} from 'rxjs/operators/takeUntil';\nimport {SimpleSnackBar} from './simple-snack-bar';\nimport {MAT_SNACK_BAR_DATA, MatSnackBarConfig} from './snack-bar-config';\nimport {MatSnackBarContainer} from './snack-bar-container';\nimport {MatSnackBarRef} from './snack-bar-ref';\n\n\n/**\n * Service to dispatch Material Design snack bar messages.\n */\n@Injectable()\nexport class MatSnackBar {\n  /**\n   * Reference to the current snack bar in the view *at this level* (in the Angular injector tree).\n   * If there is a parent snack-bar service, all operations should delegate to that parent\n   * via `_openedSnackBarRef`.\n   */\n  private _snackBarRefAtThisLevel: MatSnackBarRef<any> | null = null;\n\n  /** Reference to the currently opened snackbar at *any* level. */\n  get _openedSnackBarRef(): MatSnackBarRef<any> | null {\n    const parent = this._parentSnackBar;\n    return parent ? parent._openedSnackBarRef : this._snackBarRefAtThisLevel;\n  }\n\n  set _openedSnackBarRef(value: MatSnackBarRef<any> | null) {\n    if (this._parentSnackBar) {\n      this._parentSnackBar._openedSnackBarRef = value;\n    } else {\n      this._snackBarRefAtThisLevel = value;\n    }\n  }\n\n  constructor(\n      private _overlay: Overlay,\n      private _live: LiveAnnouncer,\n      private _injector: Injector,\n      private _breakpointObserver: BreakpointObserver,\n      @Optional() @SkipSelf() private _parentSnackBar: MatSnackBar) {}\n\n  /**\n   * Creates and dispatches a snack bar with a custom component for the content, removing any\n   * currently opened snack bars.\n   *\n   * @param component Component to be instantiated.\n   * @param config Extra configuration for the snack bar.\n   */\n  openFromComponent<T>(component: ComponentType<T>, config?: MatSnackBarConfig): MatSnackBarRef<T> {\n    const _config = _applyConfigDefaults(config);\n    const snackBarRef = this._attach(component, _config);\n\n    // When the snackbar is dismissed, clear the reference to it.\n    snackBarRef.afterDismissed().subscribe(() => {\n      // Clear the snackbar ref if it hasn't already been replaced by a newer snackbar.\n      if (this._openedSnackBarRef == snackBarRef) {\n        this._openedSnackBarRef = null;\n      }\n    });\n\n    if (this._openedSnackBarRef) {\n      // If a snack bar is already in view, dismiss it and enter the\n      // new snack bar after exit animation is complete.\n      this._openedSnackBarRef.afterDismissed().subscribe(() => {\n        snackBarRef.containerInstance.enter();\n      });\n      this._openedSnackBarRef.dismiss();\n    } else {\n      // If no snack bar is in view, enter the new snack bar.\n      snackBarRef.containerInstance.enter();\n    }\n\n    // If a dismiss timeout is provided, set up dismiss based on after the snackbar is opened.\n    if (_config.duration && _config.duration > 0) {\n      snackBarRef.afterOpened().subscribe(() => snackBarRef._dismissAfter(_config!.duration!));\n    }\n\n    if (_config.announcementMessage) {\n      this._live.announce(_config.announcementMessage, _config.politeness);\n    }\n\n    this._openedSnackBarRef = snackBarRef;\n    return this._openedSnackBarRef;\n  }\n\n  /**\n   * Opens a snackbar with a message and an optional action.\n   * @param message The message to show in the snackbar.\n   * @param action The label for the snackbar action.\n   * @param config Additional configuration options for the snackbar.\n   */\n  open(message: string, action: string = '', config?: MatSnackBarConfig):\n      MatSnackBarRef<SimpleSnackBar> {\n    const _config = _applyConfigDefaults(config);\n\n    // Since the user doesn't have access to the component, we can\n    // override the data to pass in our own message and action.\n    _config.data = {message, action};\n    _config.announcementMessage = message;\n\n    return this.openFromComponent(SimpleSnackBar, _config);\n  }\n\n  /**\n   * Dismisses the currently-visible snack bar.\n   */\n  dismiss(): void {\n    if (this._openedSnackBarRef) {\n      this._openedSnackBarRef.dismiss();\n    }\n  }\n\n  /**\n   * Attaches the snack bar container component to the overlay.\n   */\n  private _attachSnackBarContainer(overlayRef: OverlayRef,\n                                   config: MatSnackBarConfig): MatSnackBarContainer {\n    const containerPortal = new ComponentPortal(MatSnackBarContainer, config.viewContainerRef);\n    const containerRef: ComponentRef<MatSnackBarContainer> = overlayRef.attach(containerPortal);\n    containerRef.instance.snackBarConfig = config;\n    return containerRef.instance;\n  }\n\n  /**\n   * Places a new component as the content of the snack bar container.\n   */\n  private _attach<T>(component: ComponentType<T>, config: MatSnackBarConfig): MatSnackBarRef<T> {\n    const overlayRef = this._createOverlay(config);\n    const container = this._attachSnackBarContainer(overlayRef, config);\n    const snackBarRef = new MatSnackBarRef<T>(container, overlayRef);\n    const injector = this._createInjector(config, snackBarRef);\n    const portal = new ComponentPortal(component, undefined, injector);\n    const contentRef = container.attachComponentPortal(portal);\n\n    // We can't pass this via the injector, because the injector is created earlier.\n    snackBarRef.instance = contentRef.instance;\n\n    // Subscribe to the breakpoint observer and attach the mat-snack-bar-handset class as\n    // appropriate. This class is applied to the overlay element because the overlay must expand to\n    // fill the width of the screen for full width snackbars.\n    this._breakpointObserver.observe(Breakpoints.Handset).pipe(\n      takeUntil(overlayRef.detachments().pipe(take(1)))\n    ).subscribe(state => {\n      if (state.matches) {\n        overlayRef.overlayElement.classList.add('mat-snack-bar-handset');\n      } else {\n        overlayRef.overlayElement.classList.remove('mat-snack-bar-handset');\n      }\n    });\n\n    return snackBarRef;\n  }\n\n  /**\n   * Creates a new overlay and places it in the correct location.\n   * @param config The user-specified snack bar config.\n   */\n  private _createOverlay(config: MatSnackBarConfig): OverlayRef {\n    const overlayConfig = new OverlayConfig();\n    overlayConfig.direction = config.direction;\n\n    let positionStrategy = this._overlay.position().global();\n    // Set horizontal position.\n    const isRtl = config.direction === 'rtl';\n    const isLeft = (\n      config.horizontalPosition === 'left' ||\n      (config.horizontalPosition === 'start' && !isRtl) ||\n      (config.horizontalPosition === 'end' && isRtl));\n    const isRight = !isLeft && config.horizontalPosition !== 'center';\n    if (isLeft) {\n      positionStrategy.left('0');\n    } else if (isRight) {\n      positionStrategy.right('0');\n    } else {\n      positionStrategy.centerHorizontally();\n    }\n    // Set horizontal position.\n    if (config.verticalPosition === 'top') {\n      positionStrategy.top('0');\n    } else {\n      positionStrategy.bottom('0');\n    }\n\n    overlayConfig.positionStrategy = positionStrategy;\n    return this._overlay.create(overlayConfig);\n  }\n\n  /**\n   * Creates an injector to be used inside of a snack bar component.\n   * @param config Config that was used to create the snack bar.\n   * @param snackBarRef Reference to the snack bar.\n   */\n  private _createInjector<T>(\n      config: MatSnackBarConfig,\n      snackBarRef: MatSnackBarRef<T>): PortalInjector {\n\n    const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n    const injectionTokens = new WeakMap();\n\n    injectionTokens.set(MatSnackBarRef, snackBarRef);\n    injectionTokens.set(MAT_SNACK_BAR_DATA, config.data);\n\n    return new PortalInjector(userInjector || this._injector, injectionTokens);\n  }\n}\n\n/**\n * Applies default options to the snackbar config.\n * @param config The configuration to which the defaults will be applied.\n * @returns The new configuration object with defaults applied.\n */\nfunction _applyConfigDefaults(config?: MatSnackBarConfig): MatSnackBarConfig {\n  return {...new MatSnackBarConfig(), ...config};\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {LIVE_ANNOUNCER_PROVIDER} from '@angular/cdk/a11y';\nimport {LayoutModule} from '@angular/cdk/layout';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatSnackBar} from './snack-bar';\nimport {MatSnackBarContainer} from './snack-bar-container';\nimport {SimpleSnackBar} from './simple-snack-bar';\n\n\n@NgModule({\n  imports: [\n    OverlayModule,\n    PortalModule,\n    CommonModule,\n    MatCommonModule,\n    LayoutModule,\n  ],\n  exports: [MatSnackBarContainer, MatCommonModule],\n  declarations: [MatSnackBarContainer, SimpleSnackBar],\n  entryComponents: [MatSnackBarContainer, SimpleSnackBar],\n  providers: [MatSnackBar, LIVE_ANNOUNCER_PROVIDER]\n})\nexport class MatSnackBarModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Directive,\n  EventEmitter,\n  Input,\n  isDevMode,\n  Output,\n  OnChanges,\n  OnDestroy,\n} from '@angular/core';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {CanDisable, mixinDisabled} from '@angular/material/core';\nimport {SortDirection} from './sort-direction';\nimport {\n  getSortInvalidDirectionError,\n  getSortDuplicateSortableIdError,\n  getSortHeaderMissingIdError\n} from './sort-errors';\nimport {Subject} from 'rxjs/Subject';\n\n/** Interface for a directive that holds sorting state consumed by `MatSortHeader`. */\nexport interface MatSortable {\n  /** The id of the column being sorted. */\n  id: string;\n\n  /** Starting sort direction. */\n  start: 'asc' | 'desc';\n\n  /** Whether to disable clearing the sorting state. */\n  disableClear: boolean;\n}\n\n/** The current sort state. */\nexport interface Sort {\n  /** The id of the column being sorted. */\n  active: string;\n\n  /** The sort direction. */\n  direction: SortDirection;\n}\n\n// Boilerplate for applying mixins to MatSort.\n/** @docs-private */\nexport class MatSortBase {}\nexport const _MatSortMixinBase = mixinDisabled(MatSortBase);\n\n/** Container for MatSortables to manage the sort state and provide default sort parameters. */\n@Directive({\n  selector: '[matSort]',\n  exportAs: 'matSort',\n  inputs: ['disabled: matSortDisabled']\n})\nexport class MatSort extends _MatSortMixinBase implements CanDisable, OnChanges, OnDestroy {\n  /** Collection of all registered sortables that this directive manages. */\n  sortables = new Map<string, MatSortable>();\n\n  /** Used to notify any child components listening to state changes. */\n  _stateChanges = new Subject<void>();\n\n  /** The id of the most recently sorted MatSortable. */\n  @Input('matSortActive') active: string;\n\n  /**\n   * The direction to set when an MatSortable is initially sorted.\n   * May be overriden by the MatSortable's sort start.\n   */\n  @Input('matSortStart') start: 'asc' | 'desc' = 'asc';\n\n  /** The sort direction of the currently active MatSortable. */\n  @Input('matSortDirection')\n  set direction(direction: SortDirection) {\n    if (isDevMode() && direction && direction !== 'asc' && direction !== 'desc') {\n      throw getSortInvalidDirectionError(direction);\n    }\n    this._direction = direction;\n  }\n  get direction(): SortDirection { return this._direction; }\n  private _direction: SortDirection = '';\n\n  /**\n   * Whether to disable the user from clearing the sort by finishing the sort direction cycle.\n   * May be overriden by the MatSortable's disable clear input.\n   */\n  @Input('matSortDisableClear')\n  get disableClear() { return this._disableClear; }\n  set disableClear(v: boolean) { this._disableClear = coerceBooleanProperty(v); }\n  private _disableClear: boolean;\n\n  /** Event emitted when the user changes either the active sort or sort direction. */\n  @Output('matSortChange') readonly sortChange = new EventEmitter<Sort>();\n\n  /**\n   * Register function to be used by the contained MatSortables. Adds the MatSortable to the\n   * collection of MatSortables.\n   */\n  register(sortable: MatSortable) {\n    if (!sortable.id) {\n      throw getSortHeaderMissingIdError();\n    }\n\n    if (this.sortables.has(sortable.id)) {\n      throw getSortDuplicateSortableIdError(sortable.id);\n    }\n    this.sortables.set(sortable.id, sortable);\n  }\n\n  /**\n   * Unregister function to be used by the contained MatSortables. Removes the MatSortable from the\n   * collection of contained MatSortables.\n   */\n  deregister(sortable: MatSortable) {\n    this.sortables.delete(sortable.id);\n  }\n\n  /** Sets the active sort id and determines the new sort direction. */\n  sort(sortable: MatSortable) {\n    if (this.active != sortable.id) {\n      this.active = sortable.id;\n      this.direction = sortable.start ? sortable.start : this.start;\n    } else {\n      this.direction = this.getNextSortDirection(sortable);\n    }\n\n    this.sortChange.next({active: this.active, direction: this.direction});\n  }\n\n  /** Returns the next sort direction of the active sortable, checking for potential overrides. */\n  getNextSortDirection(sortable: MatSortable): SortDirection {\n    if (!sortable) { return ''; }\n\n    // Get the sort direction cycle with the potential sortable overrides.\n    const disableClear = sortable.disableClear != null ? sortable.disableClear : this.disableClear;\n    let sortDirectionCycle = getSortDirectionCycle(sortable.start || this.start, disableClear);\n\n    // Get and return the next direction in the cycle\n    let nextDirectionIndex = sortDirectionCycle.indexOf(this.direction) + 1;\n    if (nextDirectionIndex >= sortDirectionCycle.length) { nextDirectionIndex = 0; }\n    return sortDirectionCycle[nextDirectionIndex];\n  }\n\n  ngOnChanges() {\n    this._stateChanges.next();\n  }\n\n  ngOnDestroy() {\n    this._stateChanges.complete();\n  }\n}\n\n/** Returns the sort direction cycle to use given the provided parameters of order and clear. */\nfunction getSortDirectionCycle(start: 'asc' | 'desc',\n                               disableClear: boolean): SortDirection[] {\n  let sortOrder: SortDirection[] = ['asc', 'desc'];\n  if (start == 'desc') { sortOrder.reverse(); }\n  if (!disableClear) { sortOrder.push(''); }\n\n  return sortOrder;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable, SkipSelf, Optional} from '@angular/core';\nimport {Subject} from 'rxjs/Subject';\nimport {SortDirection} from './sort-direction';\n\n/**\n * To modify the labels and text displayed, create a new instance of MatSortHeaderIntl and\n * include it in a custom provider.\n */\n@Injectable()\nexport class MatSortHeaderIntl {\n  /**\n   * Stream that emits whenever the labels here are changed. Use this to notify\n   * components if the labels have changed after initialization.\n   */\n  changes: Subject<void> = new Subject<void>();\n\n  /** ARIA label for the sorting button. */\n  sortButtonLabel = (id: string) => {\n    return `Change sorting for ${id}`;\n  }\n\n  /** A label to describe the current sort (visible only to screenreaders). */\n  sortDescriptionLabel = (id: string, direction: SortDirection) => {\n    return `Sorted by ${id} ${direction == 'asc' ? 'ascending' : 'descending'}`;\n  }\n}\n/** @docs-private */\nexport function MAT_SORT_HEADER_INTL_PROVIDER_FACTORY(parentIntl: MatSortHeaderIntl) {\n  return parentIntl || new MatSortHeaderIntl();\n}\n\n/** @docs-private */\nexport const MAT_SORT_HEADER_INTL_PROVIDER = {\n  // If there is already an MatSortHeaderIntl available, use that. Otherwise, provide a new one.\n  provide: MatSortHeaderIntl,\n  deps: [[new Optional(), new SkipSelf(), MatSortHeaderIntl]],\n  useFactory: MAT_SORT_HEADER_INTL_PROVIDER_FACTORY\n};\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  keyframes,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\nimport {AnimationCurves, AnimationDurations} from '@angular/material/core';\n\nconst SORT_ANIMATION_TRANSITION = AnimationDurations.ENTERING + ' ' +\n                                  AnimationCurves.STANDARD_CURVE;\n\n/** Animations used by MatSort. */\nexport const matSortAnimations: {\n  readonly indicator: AnimationTriggerMetadata;\n  readonly leftPointer: AnimationTriggerMetadata;\n  readonly rightPointer: AnimationTriggerMetadata;\n  readonly indicatorToggle: AnimationTriggerMetadata;\n} = {\n  /** Animation that moves the sort indicator. */\n  indicator: trigger('indicator', [\n    state('asc', style({transform: 'translateY(0px)'})),\n    // 10px is the height of the sort indicator, minus the width of the pointers\n    state('desc', style({transform: 'translateY(10px)'})),\n    transition('asc <=> desc', animate(SORT_ANIMATION_TRANSITION))\n  ]),\n\n  /** Animation that rotates the left pointer of the indicator based on the sorting direction. */\n  leftPointer: trigger('leftPointer', [\n    state('asc', style({transform: 'rotate(-45deg)'})),\n    state('desc', style({transform: 'rotate(45deg)'})),\n    transition('asc <=> desc', animate(SORT_ANIMATION_TRANSITION))\n  ]),\n\n  /** Animation that rotates the right pointer of the indicator based on the sorting direction. */\n  rightPointer: trigger('rightPointer', [\n    state('asc', style({transform: 'rotate(45deg)'})),\n    state('desc', style({transform: 'rotate(-45deg)'})),\n    transition('asc <=> desc', animate(SORT_ANIMATION_TRANSITION))\n  ]),\n\n  /** Animation that moves the indicator in and out of view when sorting is enabled/disabled. */\n  indicatorToggle: trigger('indicatorToggle', [\n    transition('void => asc', animate(SORT_ANIMATION_TRANSITION, keyframes([\n      style({transform: 'translateY(25%)', opacity: 0}),\n      style({transform: 'none', opacity: 1})\n    ]))),\n    transition('asc => void', animate(SORT_ANIMATION_TRANSITION, keyframes([\n      style({transform: 'none', opacity: 1}),\n      style({transform: 'translateY(-25%)', opacity: 0})\n    ]))),\n    transition('void => desc', animate(SORT_ANIMATION_TRANSITION, keyframes([\n      style({transform: 'translateY(-25%)', opacity: 0}),\n      style({transform: 'none', opacity: 1})\n    ]))),\n    transition('desc => void', animate(SORT_ANIMATION_TRANSITION, keyframes([\n      style({transform: 'none', opacity: 1}),\n      style({transform: 'translateY(25%)', opacity: 0})\n    ]))),\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  Input,\n  Optional,\n  ViewEncapsulation\n} from '@angular/core';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {CdkColumnDef} from '@angular/cdk/table';\nimport {Subscription} from 'rxjs/Subscription';\nimport {merge} from 'rxjs/observable/merge';\nimport {MatSort, MatSortable} from './sort';\nimport {MatSortHeaderIntl} from './sort-header-intl';\nimport {getSortHeaderNotContainedWithinSortError} from './sort-errors';\nimport {CanDisable, mixinDisabled} from '@angular/material/core';\nimport {matSortAnimations} from './sort-animations';\n\n// Boilerplate for applying mixins to the sort header.\n/** @docs-private */\nexport class MatSortHeaderBase {}\nexport const _MatSortHeaderMixinBase = mixinDisabled(MatSortHeaderBase);\n\n\n/**\n * Applies sorting behavior (click to change sort) and styles to an element, including an\n * arrow to display the current sort direction.\n *\n * Must be provided with an id and contained within a parent MatSort directive.\n *\n * If used on header cells in a CdkTable, it will automatically default its id from its containing\n * column definition.\n */\n@Component({\n  moduleId: module.id,\n  selector: '[mat-sort-header]',\n  exportAs: 'matSortHeader',\n  templateUrl: 'sort-header.html',\n  styleUrls: ['sort-header.css'],\n  host: {\n    '(click)': '_handleClick()',\n    '[class.mat-sort-header-sorted]': '_isSorted()',\n    '[class.mat-sort-header-disabled]': '_isDisabled()',\n  },\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  inputs: ['disabled'],\n  animations: [\n    matSortAnimations.indicator,\n    matSortAnimations.leftPointer,\n    matSortAnimations.rightPointer,\n    matSortAnimations.indicatorToggle\n  ]\n})\nexport class MatSortHeader extends _MatSortHeaderMixinBase implements MatSortable, CanDisable {\n  private _rerenderSubscription: Subscription;\n\n  /**\n   * ID of this sort header. If used within the context of a CdkColumnDef, this will default to\n   * the column's name.\n   */\n  @Input('mat-sort-header') id: string;\n\n  /** Sets the position of the arrow that displays when sorted. */\n  @Input() arrowPosition: 'before' | 'after' = 'after';\n\n  /** Overrides the sort start value of the containing MatSort for this MatSortable. */\n  @Input('start') start: 'asc' | 'desc';\n\n  /** Overrides the disable clear value of the containing MatSort for this MatSortable. */\n  @Input()\n  get disableClear(): boolean { return this._disableClear; }\n  set disableClear(v) { this._disableClear = coerceBooleanProperty(v); }\n  private _disableClear: boolean;\n\n  constructor(public _intl: MatSortHeaderIntl,\n              changeDetectorRef: ChangeDetectorRef,\n              @Optional() public _sort: MatSort,\n              @Optional() public _cdkColumnDef: CdkColumnDef) {\n\n    super();\n\n    if (!_sort) {\n      throw getSortHeaderNotContainedWithinSortError();\n    }\n\n    this._rerenderSubscription = merge(_sort.sortChange, _sort._stateChanges, _intl.changes)\n      .subscribe(() => changeDetectorRef.markForCheck());\n  }\n\n  ngOnInit() {\n    if (!this.id && this._cdkColumnDef) {\n      this.id = this._cdkColumnDef.name;\n    }\n\n    this._sort.register(this);\n  }\n\n  ngOnDestroy() {\n    this._sort.deregister(this);\n    this._rerenderSubscription.unsubscribe();\n  }\n\n  /** Handles click events on the header. */\n  _handleClick() {\n    if (!this._isDisabled()) {\n      this._sort.sort(this);\n    }\n  }\n\n  /** Whether this MatSortHeader is currently sorted in either ascending or descending order. */\n  _isSorted() {\n    return this._sort.active == this.id &&\n        (this._sort.direction === 'asc' || this._sort.direction === 'desc');\n  }\n\n  _isDisabled() {\n    return this._sort.disabled || this.disabled;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatSortHeader} from './sort-header';\nimport {MatSort} from './sort';\nimport {MAT_SORT_HEADER_INTL_PROVIDER} from './sort-header-intl';\nimport {CommonModule} from '@angular/common';\n\n\n@NgModule({\n  imports: [CommonModule],\n  exports: [MatSort, MatSortHeader],\n  declarations: [MatSort, MatSortHeader],\n  providers: [MAT_SORT_HEADER_INTL_PROVIDER]\n})\nexport class MatSortModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, TemplateRef} from '@angular/core';\nimport {CdkStepLabel} from '@angular/cdk/stepper';\n\n@Directive({\n  selector: '[matStepLabel]',\n})\nexport class MatStepLabel extends CdkStepLabel {\n  constructor(template: TemplateRef<any>) {\n    super(template);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable} from '@angular/core';\nimport {Subject} from 'rxjs/Subject';\n\n\n/** Stepper data that is required for internationalization. */\n@Injectable()\nexport class MatStepperIntl {\n  /**\n   * Stream that emits whenever the labels here are changed. Use this to notify\n   * components if the labels have changed after initialization.\n   */\n  changes: Subject<void> = new Subject<void>();\n\n  /** Label that is rendered below optional steps. */\n  optionalLabel = 'Optional';\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty, coerceNumberProperty} from '@angular/cdk/coercion';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  Input,\n  OnDestroy,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {Subscription} from 'rxjs/Subscription';\nimport {MatStepLabel} from './step-label';\nimport {MatStepperIntl} from './stepper-intl';\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-step-header',\n  templateUrl: 'step-header.html',\n  styleUrls: ['step-header.css'],\n  host: {\n    'class': 'mat-step-header',\n    'role': 'tab',\n  },\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatStepHeader implements OnDestroy {\n  private _intlSubscription: Subscription;\n\n  /** Icon for the given step. */\n  @Input() icon: string;\n\n  /** Label of the given step. */\n  @Input() label: MatStepLabel | string;\n\n  /** Index of the given step. */\n  @Input()\n  get index() { return this._index; }\n  set index(value: any) {\n    this._index = coerceNumberProperty(value);\n  }\n  private _index: number;\n\n  /** Whether the given step is selected. */\n  @Input()\n  get selected() { return this._selected; }\n  set selected(value: any) {\n    this._selected = coerceBooleanProperty(value);\n  }\n  private _selected: boolean;\n\n  /** Whether the given step label is active. */\n  @Input()\n  get active() { return this._active; }\n  set active(value: any) {\n    this._active = coerceBooleanProperty(value);\n  }\n  private _active: boolean;\n\n  /** Whether the given step is optional. */\n  @Input()\n  get optional() { return this._optional; }\n  set optional(value: any) {\n    this._optional = coerceBooleanProperty(value);\n  }\n  private _optional: boolean;\n\n  constructor(\n    public _intl: MatStepperIntl,\n    private _focusMonitor: FocusMonitor,\n    private _element: ElementRef,\n    changeDetectorRef: ChangeDetectorRef) {\n    _focusMonitor.monitor(_element.nativeElement, true);\n    this._intlSubscription = _intl.changes.subscribe(() => changeDetectorRef.markForCheck());\n  }\n\n  ngOnDestroy() {\n    this._intlSubscription.unsubscribe();\n    this._focusMonitor.stopMonitoring(this._element.nativeElement);\n  }\n\n  /** Returns string label of given step if it is a text label. */\n  _stringLabel(): string | null {\n    return this.label instanceof MatStepLabel ? null : this.label;\n  }\n\n  /** Returns MatStepLabel if the label of given step is a template label. */\n  _templateLabel(): MatStepLabel | null {\n    return this.label instanceof MatStepLabel ? this.label : null;\n  }\n\n  /** Returns the host HTML element. */\n  _getHostElement() {\n    return this._element.nativeElement;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/** Animations used by the Material steppers. */\nexport const matStepperAnimations: {\n  readonly horizontalStepTransition: AnimationTriggerMetadata;\n  readonly verticalStepTransition: AnimationTriggerMetadata;\n} = {\n  /** Animation that transitions the step along the X axis in a horizontal stepper. */\n  horizontalStepTransition: trigger('stepTransition', [\n    state('previous', style({transform: 'translate3d(-100%, 0, 0)', visibility: 'hidden'})),\n    state('current', style({transform: 'none', visibility: 'visible'})),\n    state('next', style({transform: 'translate3d(100%, 0, 0)', visibility: 'hidden'})),\n    transition('* => *', animate('500ms cubic-bezier(0.35, 0, 0.25, 1)'))\n  ]),\n\n  /** Animation that transitions the step along the Y axis in a vertical stepper. */\n  verticalStepTransition: trigger('stepTransition', [\n    state('previous', style({height: '0px', visibility: 'hidden'})),\n    state('next', style({height: '0px', visibility: 'hidden'})),\n    state('current', style({height: '*', visibility: 'visible'})),\n    transition('* <=> current', animate('225ms cubic-bezier(0.4, 0.0, 0.2, 1)'))\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CdkStep, CdkStepper} from '@angular/cdk/stepper';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {\n  AfterContentInit,\n  Component,\n  ContentChild,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  forwardRef,\n  Inject,\n  QueryList,\n  SkipSelf,\n  ViewChildren,\n  ViewEncapsulation,\n  ChangeDetectorRef,\n  ChangeDetectionStrategy,\n  Optional,\n} from '@angular/core';\nimport {FormControl, FormGroupDirective, NgForm} from '@angular/forms';\nimport {ErrorStateMatcher} from '@angular/material/core';\nimport {MatStepHeader} from './step-header';\nimport {MatStepLabel} from './step-label';\nimport {takeUntil} from 'rxjs/operators/takeUntil';\nimport {matStepperAnimations} from './stepper-animations';\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-step',\n  templateUrl: 'step.html',\n  providers: [{provide: ErrorStateMatcher, useExisting: MatStep}],\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matStep',\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatStep extends CdkStep implements ErrorStateMatcher {\n  /** Content for step label given by <ng-template matStepLabel>. */\n  @ContentChild(MatStepLabel) stepLabel: MatStepLabel;\n\n  constructor(@Inject(forwardRef(() => MatStepper)) stepper: MatStepper,\n              @SkipSelf() private _errorStateMatcher: ErrorStateMatcher) {\n    super(stepper);\n  }\n\n  /** Custom error state matcher that additionally checks for validity of interacted form. */\n  isErrorState(control: FormControl | null, form: FormGroupDirective | NgForm | null): boolean {\n    const originalErrorState = this._errorStateMatcher.isErrorState(control, form);\n\n    // Custom error state checks for the validity of form that is not submitted or touched\n    // since user can trigger a form change by calling for another step without directly\n    // interacting with the current form.\n    const customErrorState = !!(control && control.invalid && this.interacted);\n\n    return originalErrorState || customErrorState;\n  }\n}\n\n@Directive({\n  selector: '[matStepper]'\n})\nexport class MatStepper extends CdkStepper implements AfterContentInit {\n  /** The list of step headers of the steps in the stepper. */\n  @ViewChildren(MatStepHeader, {read: ElementRef}) _stepHeader: QueryList<ElementRef>;\n\n  /** Steps that the stepper holds. */\n  @ContentChildren(MatStep) _steps: QueryList<MatStep>;\n\n  ngAfterContentInit() {\n    // Mark the component for change detection whenever the content children query changes\n    this._steps.changes.pipe(takeUntil(this._destroyed)).subscribe(() => this._stateChanged());\n  }\n}\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-horizontal-stepper',\n  exportAs: 'matHorizontalStepper',\n  templateUrl: 'stepper-horizontal.html',\n  styleUrls: ['stepper.css'],\n  inputs: ['selectedIndex'],\n  host: {\n    'class': 'mat-stepper-horizontal',\n    'aria-orientation': 'horizontal',\n    'role': 'tablist',\n  },\n  animations: [matStepperAnimations.horizontalStepTransition],\n  providers: [{provide: MatStepper, useExisting: MatHorizontalStepper}],\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatHorizontalStepper extends MatStepper { }\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-vertical-stepper',\n  exportAs: 'matVerticalStepper',\n  templateUrl: 'stepper-vertical.html',\n  styleUrls: ['stepper.css'],\n  inputs: ['selectedIndex'],\n  host: {\n    'class': 'mat-stepper-vertical',\n    'aria-orientation': 'vertical',\n    'role': 'tablist',\n  },\n  animations: [matStepperAnimations.verticalStepTransition],\n  providers: [{provide: MatStepper, useExisting: MatVerticalStepper}],\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatVerticalStepper extends MatStepper {\n  constructor(@Optional() dir: Directionality, changeDetectorRef: ChangeDetectorRef) {\n    super(dir, changeDetectorRef);\n    this._orientation = 'vertical';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive} from '@angular/core';\nimport {CdkStepper, CdkStepperNext, CdkStepperPrevious} from '@angular/cdk/stepper';\nimport {MatStepper} from './stepper';\n\n/** Button that moves to the next step in a stepper workflow. */\n@Directive({\n  selector: 'button[matStepperNext]',\n  host: {'(click)': '_stepper.next()'},\n  providers: [{provide: CdkStepper, useExisting: MatStepper}]\n})\nexport class MatStepperNext extends CdkStepperNext { }\n\n/** Button that moves to the previous step in a stepper workflow. */\n@Directive({\n  selector: 'button[matStepperPrevious]',\n  host: {'(click)': '_stepper.previous()'},\n  providers: [{provide: CdkStepper, useExisting: MatStepper}]\n})\nexport class MatStepperPrevious extends CdkStepperPrevious { }\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {A11yModule} from '@angular/cdk/a11y';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {CdkStepperModule} from '@angular/cdk/stepper';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatButtonModule} from '@angular/material/button';\nimport {MatCommonModule, MatRippleModule, ErrorStateMatcher} from '@angular/material/core';\nimport {MatIconModule} from '@angular/material/icon';\nimport {MatStepHeader} from './step-header';\nimport {MatStepLabel} from './step-label';\nimport {MatHorizontalStepper, MatStep, MatStepper, MatVerticalStepper} from './stepper';\nimport {MatStepperNext, MatStepperPrevious} from './stepper-button';\nimport {MatStepperIntl} from './stepper-intl';\n\n\n@NgModule({\n  imports: [\n    MatCommonModule,\n    CommonModule,\n    PortalModule,\n    MatButtonModule,\n    CdkStepperModule,\n    MatIconModule,\n    A11yModule,\n    MatRippleModule,\n  ],\n  exports: [\n    MatCommonModule,\n    MatHorizontalStepper,\n    MatVerticalStepper,\n    MatStep,\n    MatStepLabel,\n    MatStepper,\n    MatStepperNext,\n    MatStepperPrevious,\n    MatStepHeader\n  ],\n  declarations: [MatHorizontalStepper, MatVerticalStepper, MatStep, MatStepLabel, MatStepper,\n    MatStepperNext, MatStepperPrevious, MatStepHeader],\n  providers: [MatStepperIntl, ErrorStateMatcher],\n})\nexport class MatStepperModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ChangeDetectionStrategy, Component, ViewEncapsulation} from '@angular/core';\nimport {CDK_TABLE_TEMPLATE, CdkTable} from '@angular/cdk/table';\n\n/**\n * Wrapper for the CdkTable with Material design styles.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-table',\n  exportAs: 'matTable',\n  template: CDK_TABLE_TEMPLATE,\n  styleUrls: ['table.css'],\n  host: {\n    'class': 'mat-table',\n  },\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatTable<T> extends CdkTable<T> { }\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, ElementRef, Input} from '@angular/core';\nimport {\n  CdkCell,\n  CdkCellDef,\n  CdkColumnDef,\n  CdkHeaderCell,\n  CdkHeaderCellDef,\n} from '@angular/cdk/table';\n\n/**\n * Cell definition for the mat-table.\n * Captures the template of a column's data row cell as well as cell-specific properties.\n */\n@Directive({\n  selector: '[matCellDef]',\n  providers: [{provide: CdkCellDef, useExisting: MatCellDef}]\n})\nexport class MatCellDef extends CdkCellDef { }\n\n/**\n * Header cell definition for the mat-table.\n * Captures the template of a column's header cell and as well as cell-specific properties.\n */\n@Directive({\n  selector: '[matHeaderCellDef]',\n  providers: [{provide: CdkHeaderCellDef, useExisting: MatHeaderCellDef}]\n})\nexport class MatHeaderCellDef extends CdkHeaderCellDef { }\n\n/**\n * Column definition for the mat-table.\n * Defines a set of cells available for a table column.\n */\n@Directive({\n  selector: '[matColumnDef]',\n  providers: [{provide: CdkColumnDef, useExisting: MatColumnDef}],\n})\nexport class MatColumnDef extends CdkColumnDef {\n  /** Unique name for this column. */\n  @Input('matColumnDef') name: string;\n}\n\n/** Header cell template container that adds the right classes and role. */\n@Directive({\n  selector: 'mat-header-cell',\n  host: {\n    'class': 'mat-header-cell',\n    'role': 'columnheader',\n  },\n})\nexport class MatHeaderCell extends CdkHeaderCell {\n  constructor(columnDef: CdkColumnDef,\n              elementRef: ElementRef) {\n    super(columnDef, elementRef);\n    elementRef.nativeElement.classList.add(`mat-column-${columnDef.cssClassFriendlyName}`);\n  }\n}\n\n/** Cell template container that adds the right classes and role. */\n@Directive({\n  selector: 'mat-cell',\n  host: {\n    'class': 'mat-cell',\n    'role': 'gridcell',\n  },\n})\nexport class MatCell extends CdkCell {\n  constructor(columnDef: CdkColumnDef,\n              elementRef: ElementRef) {\n    super(columnDef, elementRef);\n    elementRef.nativeElement.classList.add(`mat-column-${columnDef.cssClassFriendlyName}`);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  ChangeDetectionStrategy, ChangeDetectorRef,\n  Component, ContentChild,\n  ContentChildren, forwardRef, Inject, Input,\n  ViewEncapsulation\n} from '@angular/core';\nimport {MatDrawer, MatDrawerContainer, MatDrawerContent} from './drawer';\nimport {matDrawerAnimations} from './drawer-animations';\nimport {coerceBooleanProperty, coerceNumberProperty} from '@angular/cdk/coercion';\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-sidenav-content',\n  template: '<ng-content></ng-content>',\n  host: {\n    'class': 'mat-drawer-content mat-sidenav-content',\n    '[style.margin-left.px]': '_margins.left',\n    '[style.margin-right.px]': '_margins.right',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n})\nexport class MatSidenavContent extends MatDrawerContent {\n  constructor(\n      changeDetectorRef: ChangeDetectorRef,\n      @Inject(forwardRef(() => MatSidenavContainer)) container: MatSidenavContainer) {\n    super(changeDetectorRef, container);\n  }\n}\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-sidenav',\n  exportAs: 'matSidenav',\n  template: '<ng-content></ng-content>',\n  animations: [matDrawerAnimations.transformDrawer],\n  host: {\n    'class': 'mat-drawer mat-sidenav',\n    'tabIndex': '-1',\n    '[@transform]': '_animationState',\n    '(@transform.start)': '_onAnimationStart($event)',\n    '(@transform.done)': '_onAnimationEnd($event)',\n    '(keydown)': 'handleKeydown($event)',\n    // must prevent the browser from aligning text based on value\n    '[attr.align]': 'null',\n    '[class.mat-drawer-end]': 'position === \"end\"',\n    '[class.mat-drawer-over]': 'mode === \"over\"',\n    '[class.mat-drawer-push]': 'mode === \"push\"',\n    '[class.mat-drawer-side]': 'mode === \"side\"',\n    '[class.mat-sidenav-fixed]': 'fixedInViewport',\n    '[style.top.px]': 'fixedInViewport ? fixedTopGap : null',\n    '[style.bottom.px]': 'fixedInViewport ? fixedBottomGap : null',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n})\nexport class MatSidenav extends MatDrawer {\n  /** Whether the sidenav is fixed in the viewport. */\n  @Input()\n  get fixedInViewport(): boolean { return this._fixedInViewport; }\n  set fixedInViewport(value) { this._fixedInViewport = coerceBooleanProperty(value); }\n  private _fixedInViewport = false;\n\n  /**\n   * The gap between the top of the sidenav and the top of the viewport when the sidenav is in fixed\n   * mode.\n   */\n  @Input()\n  get fixedTopGap(): number { return this._fixedTopGap; }\n  set fixedTopGap(value) { this._fixedTopGap = coerceNumberProperty(value); }\n  private _fixedTopGap = 0;\n\n  /**\n   * The gap between the bottom of the sidenav and the bottom of the viewport when the sidenav is in\n   * fixed mode.\n   */\n  @Input()\n  get fixedBottomGap(): number { return this._fixedBottomGap; }\n  set fixedBottomGap(value) { this._fixedBottomGap = coerceNumberProperty(value); }\n  private _fixedBottomGap = 0;\n}\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-sidenav-container',\n  exportAs: 'matSidenavContainer',\n  templateUrl: 'sidenav-container.html',\n  styleUrls: ['drawer.css'],\n  host: {\n    'class': 'mat-drawer-container mat-sidenav-container',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n})\nexport class MatSidenavContainer extends MatDrawerContainer {\n  @ContentChildren(MatSidenav) _drawers;\n\n  @ContentChild(MatSidenavContent) _content;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {A11yModule} from '@angular/cdk/a11y';\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {ScrollDispatchModule} from '@angular/cdk/scrolling';\nimport {PlatformModule} from '@angular/cdk/platform';\nimport {MatSidenav, MatSidenavContainer, MatSidenavContent} from './sidenav';\nimport {\n  MatDrawer,\n  MatDrawerContainer,\n  MatDrawerContent,\n  MAT_DRAWER_DEFAULT_AUTOSIZE,\n} from './drawer';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatCommonModule,\n    A11yModule,\n    OverlayModule,\n    ScrollDispatchModule,\n    PlatformModule,\n  ],\n  exports: [\n    MatCommonModule,\n    MatDrawer,\n    MatDrawerContainer,\n    MatDrawerContent,\n    MatSidenav,\n    MatSidenavContainer,\n    MatSidenavContent,\n  ],\n  declarations: [\n    MatDrawer,\n    MatDrawerContainer,\n    MatDrawerContent,\n    MatSidenav,\n    MatSidenavContainer,\n    MatSidenavContent,\n  ],\n  providers: [\n    {provide: MAT_DRAWER_DEFAULT_AUTOSIZE, useValue: false}\n  ]\n})\nexport class MatSidenavModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor, FocusOrigin} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {Platform} from '@angular/cdk/platform';\nimport {\n  AfterContentInit,\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Input,\n  OnDestroy,\n  Output,\n  ViewChild,\n  ViewEncapsulation\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {\n  applyCssTransform,\n  CanColor,\n  CanDisable,\n  CanDisableRipple,\n  HammerInput,\n  HasTabIndex,\n  MatRipple,\n  mixinColor,\n  mixinDisabled,\n  mixinDisableRipple,\n  mixinTabIndex,\n  RippleConfig,\n  RippleRef,\n} from '@angular/material/core';\n\n// Increasing integer for generating unique ids for slide-toggle components.\nlet nextUniqueId = 0;\n\nexport const MAT_SLIDE_TOGGLE_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatSlideToggle),\n  multi: true\n};\n\n/** Change event object emitted by a MatSlideToggle. */\nexport class MatSlideToggleChange {\n  source: MatSlideToggle;\n  checked: boolean;\n}\n\n// Boilerplate for applying mixins to MatSlideToggle.\n/** @docs-private */\nexport class MatSlideToggleBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatSlideToggleMixinBase =\n  mixinTabIndex(mixinColor(mixinDisableRipple(mixinDisabled(MatSlideToggleBase)), 'accent'));\n\n/** Represents a slidable \"switch\" toggle that can be moved between on and off. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-slide-toggle',\n  exportAs: 'matSlideToggle',\n  host: {\n    'class': 'mat-slide-toggle',\n    '[id]': 'id',\n    '[class.mat-checked]': 'checked',\n    '[class.mat-disabled]': 'disabled',\n    '[class.mat-slide-toggle-label-before]': 'labelPosition == \"before\"',\n  },\n  templateUrl: 'slide-toggle.html',\n  styleUrls: ['slide-toggle.css'],\n  providers: [MAT_SLIDE_TOGGLE_VALUE_ACCESSOR],\n  inputs: ['disabled', 'disableRipple', 'color', 'tabIndex'],\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatSlideToggle extends _MatSlideToggleMixinBase implements OnDestroy, AfterContentInit,\n    ControlValueAccessor, CanDisable, CanColor, HasTabIndex, CanDisableRipple {\n\n  private onChange = (_: any) => {};\n  private onTouched = () => {};\n\n  private _uniqueId: string = `mat-slide-toggle-${++nextUniqueId}`;\n  private _slideRenderer: SlideToggleRenderer;\n  private _required: boolean = false;\n  private _checked: boolean = false;\n\n  /** Reference to the focus state ripple. */\n  private _focusRipple: RippleRef | null;\n\n  /** Name value will be applied to the input element if present */\n  @Input() name: string | null = null;\n\n  /** A unique id for the slide-toggle input. If none is supplied, it will be auto-generated. */\n  @Input() id: string = this._uniqueId;\n\n  /** Whether the label should appear after or before the slide-toggle. Defaults to 'after' */\n  @Input() labelPosition: 'before' | 'after' = 'after';\n\n  /** Whether the slide-toggle element is checked or not */\n\n  /** Used to set the aria-label attribute on the underlying input element. */\n  @Input('aria-label') ariaLabel: string | null = null;\n\n  /** Used to set the aria-labelledby attribute on the underlying input element. */\n  @Input('aria-labelledby') ariaLabelledby: string | null = null;\n\n  /** Whether the slide-toggle is required. */\n  @Input()\n  get required(): boolean { return this._required; }\n  set required(value) { this._required = coerceBooleanProperty(value); }\n\n  /** Whether the slide-toggle element is checked or not */\n  @Input()\n  get checked(): boolean { return this._checked; }\n  set checked(value) {\n    this._checked = coerceBooleanProperty(value);\n    this._changeDetectorRef.markForCheck();\n  }\n  /** An event will be dispatched each time the slide-toggle changes its value. */\n  @Output() change: EventEmitter<MatSlideToggleChange> = new EventEmitter<MatSlideToggleChange>();\n\n  /** Returns the unique id for the visual hidden input. */\n  get inputId(): string { return `${this.id || this._uniqueId}-input`; }\n\n  /** Reference to the underlying input element. */\n  @ViewChild('input') _inputElement: ElementRef;\n\n  /** Reference to the ripple directive on the thumb container. */\n  @ViewChild(MatRipple) _ripple: MatRipple;\n\n  /** Ripple configuration for the mouse ripples and focus indicators. */\n  _rippleConfig: RippleConfig = {centered: true, radius: 23, speedFactor: 1.5};\n\n  constructor(elementRef: ElementRef,\n              private _platform: Platform,\n              private _focusMonitor: FocusMonitor,\n              private _changeDetectorRef: ChangeDetectorRef,\n              @Attribute('tabindex') tabIndex: string) {\n\n    super(elementRef);\n    this.tabIndex = parseInt(tabIndex) || 0;\n  }\n\n  ngAfterContentInit() {\n    this._slideRenderer = new SlideToggleRenderer(this._elementRef, this._platform);\n\n    this._focusMonitor\n      .monitor(this._inputElement.nativeElement, false)\n      .subscribe(focusOrigin => this._onInputFocusChange(focusOrigin));\n  }\n\n  ngOnDestroy() {\n    this._focusMonitor.stopMonitoring(this._inputElement.nativeElement);\n  }\n\n  /** Method being called whenever the underlying input emits a change event. */\n  _onChangeEvent(event: Event) {\n    // We always have to stop propagation on the change event.\n    // Otherwise the change event, from the input element, will bubble up and\n    // emit its event object to the component's `change` output.\n    event.stopPropagation();\n\n    // Releasing the pointer over the `<label>` element while dragging triggers another\n    // click event on the `<label>` element. This means that the checked state of the underlying\n    // input changed unintentionally and needs to be changed back.\n    if (this._slideRenderer.dragging) {\n      this._inputElement.nativeElement.checked = this.checked;\n      return;\n    }\n\n    // Sync the value from the underlying input element with the component instance.\n    this.checked = this._inputElement.nativeElement.checked;\n\n    // Emit our custom change event only if the underlying input emitted one. This ensures that\n    // there is no change event, when the checked state changes programmatically.\n    this._emitChangeEvent();\n  }\n\n  /** Method being called whenever the slide-toggle has been clicked. */\n  _onInputClick(event: Event) {\n    // We have to stop propagation for click events on the visual hidden input element.\n    // By default, when a user clicks on a label element, a generated click event will be\n    // dispatched on the associated input element. Since we are using a label element as our\n    // root container, the click event on the `slide-toggle` will be executed twice.\n    // The real click event will bubble up, and the generated click event also tries to bubble up.\n    // This will lead to multiple click events.\n    // Preventing bubbling for the second event will solve that issue.\n    event.stopPropagation();\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  writeValue(value: any): void {\n    this.checked = !!value;\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  registerOnChange(fn: any): void {\n    this.onChange = fn;\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  registerOnTouched(fn: any): void {\n    this.onTouched = fn;\n  }\n\n  /** Implemented as a part of ControlValueAccessor. */\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Focuses the slide-toggle. */\n  focus() {\n    this._focusMonitor.focusVia(this._inputElement.nativeElement, 'keyboard');\n  }\n\n  /** Toggles the checked state of the slide-toggle. */\n  toggle() {\n    this.checked = !this.checked;\n  }\n\n  /** Function is called whenever the focus changes for the input element. */\n  private _onInputFocusChange(focusOrigin: FocusOrigin) {\n    if (!this._focusRipple && focusOrigin === 'keyboard') {\n      // For keyboard focus show a persistent ripple as focus indicator.\n      this._focusRipple = this._ripple.launch(0, 0, {persistent: true, ...this._rippleConfig});\n    } else if (!focusOrigin) {\n      this.onTouched();\n\n      // Fade out and clear the focus ripple if one is currently present.\n      if (this._focusRipple) {\n        this._focusRipple.fadeOut();\n        this._focusRipple = null;\n      }\n    }\n  }\n\n  /**\n   * Emits a change event on the `change` output. Also notifies the FormControl about the change.\n   */\n  private _emitChangeEvent() {\n    let event = new MatSlideToggleChange();\n    event.source = this;\n    event.checked = this.checked;\n    this.onChange(this.checked);\n    this.change.emit(event);\n  }\n\n  _onDragStart() {\n    if (!this.disabled) {\n      this._slideRenderer.startThumbDrag(this.checked);\n    }\n  }\n\n  _onDrag(event: HammerInput) {\n    if (this._slideRenderer.dragging) {\n      this._slideRenderer.updateThumbPosition(event.deltaX);\n    }\n  }\n\n  _onDragEnd() {\n    if (this._slideRenderer.dragging) {\n      const newCheckedValue = this._slideRenderer.dragPercentage > 50;\n\n      if (newCheckedValue !== this.checked) {\n        this.checked = newCheckedValue;\n        this._emitChangeEvent();\n      }\n\n      // The drag should be stopped outside of the current event handler, because otherwise the\n      // click event will be fired before and will revert the drag change.\n      setTimeout(() => this._slideRenderer.stopThumbDrag());\n    }\n  }\n\n  /** Method being called whenever the label text changes. */\n  _onLabelTextChange() {\n    // This method is getting called whenever the label of the slide-toggle changes.\n    // Since the slide-toggle uses the OnPush strategy we need to notify it about the change\n    // that has been recognized by the cdkObserveContent directive.\n    this._changeDetectorRef.markForCheck();\n  }\n}\n\n/**\n * Renderer for the Slide Toggle component, which separates DOM modification in its own class\n */\nclass SlideToggleRenderer {\n\n  /** Reference to the thumb HTMLElement. */\n  private _thumbEl: HTMLElement;\n\n  /** Reference to the thumb bar HTMLElement. */\n  private _thumbBarEl: HTMLElement;\n\n  /** Width of the thumb bar of the slide-toggle. */\n  private _thumbBarWidth: number;\n\n  /** Previous checked state before drag started. */\n  private _previousChecked: boolean;\n\n  /** Percentage of the thumb while dragging. Percentage as fraction of 100. */\n  dragPercentage: number;\n\n  /** Whether the thumb is currently being dragged. */\n  dragging: boolean = false;\n\n  constructor(elementRef: ElementRef, platform: Platform) {\n    // We only need to interact with these elements when we're on the browser, so only grab\n    // the reference in that case.\n    if (platform.isBrowser) {\n      this._thumbEl = elementRef.nativeElement.querySelector('.mat-slide-toggle-thumb-container');\n      this._thumbBarEl = elementRef.nativeElement.querySelector('.mat-slide-toggle-bar');\n    }\n  }\n\n  /** Initializes the drag of the slide-toggle. */\n  startThumbDrag(checked: boolean) {\n    if (this.dragging) { return; }\n\n    this._thumbBarWidth = this._thumbBarEl.clientWidth - this._thumbEl.clientWidth;\n    this._thumbEl.classList.add('mat-dragging');\n\n    this._previousChecked = checked;\n    this.dragging = true;\n  }\n\n  /** Resets the current drag and returns the new checked value. */\n  stopThumbDrag(): boolean {\n    if (!this.dragging) { return false; }\n\n    this.dragging = false;\n    this._thumbEl.classList.remove('mat-dragging');\n\n    // Reset the transform because the component will take care of the thumb position after drag.\n    applyCssTransform(this._thumbEl, '');\n\n    return this.dragPercentage > 50;\n  }\n\n  /** Updates the thumb containers position from the specified distance. */\n  updateThumbPosition(distance: number) {\n    this.dragPercentage = this._getDragPercentage(distance);\n    // Calculate the moved distance based on the thumb bar width.\n    let dragX = (this.dragPercentage / 100) * this._thumbBarWidth;\n    applyCssTransform(this._thumbEl, `translate3d(${dragX}px, 0, 0)`);\n  }\n\n  /** Retrieves the percentage of thumb from the moved distance. Percentage as fraction of 100. */\n  private _getDragPercentage(distance: number) {\n    let percentage = (distance / this._thumbBarWidth) * 100;\n\n    // When the toggle was initially checked, then we have to start the drag at the end.\n    if (this._previousChecked) {\n      percentage += 100;\n    }\n\n    return Math.max(0, Math.min(percentage, 100));\n  }\n\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ObserversModule} from '@angular/cdk/observers';\nimport {PlatformModule} from '@angular/cdk/platform';\nimport {NgModule} from '@angular/core';\nimport {\n  GestureConfig,\n  MatCommonModule,\n  MatRippleModule,\n} from '@angular/material/core';\nimport {HAMMER_GESTURE_CONFIG} from '@angular/platform-browser';\nimport {A11yModule} from '@angular/cdk/a11y';\nimport {MatSlideToggle} from './slide-toggle';\n\n\n@NgModule({\n  imports: [MatRippleModule, MatCommonModule, PlatformModule, ObserversModule, A11yModule],\n  exports: [MatSlideToggle, MatCommonModule],\n  declarations: [MatSlideToggle],\n  providers: [\n    {provide: HAMMER_GESTURE_CONFIG, useClass: GestureConfig}\n  ],\n})\nexport class MatSlideToggleModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor, FocusOrigin} from '@angular/cdk/a11y';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty, coerceNumberProperty} from '@angular/cdk/coercion';\nimport {\n  DOWN_ARROW,\n  END,\n  HOME,\n  LEFT_ARROW,\n  PAGE_DOWN,\n  PAGE_UP,\n  RIGHT_ARROW,\n  UP_ARROW,\n} from '@angular/cdk/keycodes';\nimport {\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Input,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Output,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {\n  CanColor,\n  CanDisable,\n  HammerInput,\n  HasTabIndex,\n  mixinColor,\n  mixinDisabled,\n  mixinTabIndex,\n} from '@angular/material/core';\nimport {Subscription} from 'rxjs/Subscription';\n\n/**\n * Visually, a 30px separation between tick marks looks best. This is very subjective but it is\n * the default separation we chose.\n */\nconst MIN_AUTO_TICK_SEPARATION = 30;\n\n/** The thumb gap size for a disabled slider. */\nconst DISABLED_THUMB_GAP = 7;\n\n/** The thumb gap size for a non-active slider at its minimum value. */\nconst MIN_VALUE_NONACTIVE_THUMB_GAP = 7;\n\n/** The thumb gap size for an active slider at its minimum value. */\nconst MIN_VALUE_ACTIVE_THUMB_GAP = 10;\n\n/**\n * Provider Expression that allows mat-slider to register as a ControlValueAccessor.\n * This allows it to support [(ngModel)] and [formControl].\n */\nexport const MAT_SLIDER_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatSlider),\n  multi: true\n};\n\n/** A simple change event emitted by the MatSlider component. */\nexport class MatSliderChange {\n  /** The MatSlider that changed. */\n  source: MatSlider;\n\n  /** The new value of the source slider. */\n  value: number | null;\n}\n\n\n// Boilerplate for applying mixins to MatSlider.\n/** @docs-private */\nexport class MatSliderBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatSliderMixinBase =\n  mixinTabIndex(mixinColor(mixinDisabled(MatSliderBase), 'accent'));\n\n/**\n * Allows users to select from a range of values by moving the slider thumb. It is similar in\n * behavior to the native `<input type=\"range\">` element.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-slider',\n  exportAs: 'matSlider',\n  providers: [MAT_SLIDER_VALUE_ACCESSOR],\n  host: {\n    '(focus)': '_onFocus()',\n    '(blur)': '_onBlur()',\n    '(click)': '_onClick($event)',\n    '(keydown)': '_onKeydown($event)',\n    '(keyup)': '_onKeyup()',\n    '(mouseenter)': '_onMouseenter()',\n    '(slide)': '_onSlide($event)',\n    '(slideend)': '_onSlideEnd()',\n    '(slidestart)': '_onSlideStart($event)',\n    'class': 'mat-slider',\n    'role': 'slider',\n    '[tabIndex]': 'tabIndex',\n    '[attr.aria-disabled]': 'disabled',\n    '[attr.aria-valuemax]': 'max',\n    '[attr.aria-valuemin]': 'min',\n    '[attr.aria-valuenow]': 'value',\n    '[attr.aria-orientation]': 'vertical ? \"vertical\" : \"horizontal\"',\n    '[class.mat-slider-disabled]': 'disabled',\n    '[class.mat-slider-has-ticks]': 'tickInterval',\n    '[class.mat-slider-horizontal]': '!vertical',\n    '[class.mat-slider-axis-inverted]': '_invertAxis',\n    '[class.mat-slider-sliding]': '_isSliding',\n    '[class.mat-slider-thumb-label-showing]': 'thumbLabel',\n    '[class.mat-slider-vertical]': 'vertical',\n    '[class.mat-slider-min-value]': '_isMinValue',\n    '[class.mat-slider-hide-last-tick]': 'disabled || _isMinValue && _thumbGap && _invertAxis',\n  },\n  templateUrl: 'slider.html',\n  styleUrls: ['slider.css'],\n  inputs: ['disabled', 'color', 'tabIndex'],\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatSlider extends _MatSliderMixinBase\n    implements ControlValueAccessor, OnDestroy, CanDisable, CanColor, OnInit, HasTabIndex {\n  /** Whether the slider is inverted. */\n  @Input()\n  get invert() { return this._invert; }\n  set invert(value: any) {\n    this._invert = coerceBooleanProperty(value);\n  }\n  private _invert = false;\n\n  /** The maximum value that the slider can have. */\n  @Input()\n  get max() { return this._max; }\n  set max(v: number) {\n    this._max = coerceNumberProperty(v, this._max);\n    this._percent = this._calculatePercentage(this._value);\n\n    // Since this also modifies the percentage, we need to let the change detection know.\n    this._changeDetectorRef.markForCheck();\n  }\n  private _max: number = 100;\n\n  /** The minimum value that the slider can have. */\n  @Input()\n  get min() { return this._min; }\n  set min(v: number) {\n    this._min = coerceNumberProperty(v, this._min);\n\n    // If the value wasn't explicitly set by the user, set it to the min.\n    if (this._value === null) {\n      this.value = this._min;\n    }\n    this._percent = this._calculatePercentage(this._value);\n\n    // Since this also modifies the percentage, we need to let the change detection know.\n    this._changeDetectorRef.markForCheck();\n  }\n  private _min: number = 0;\n\n  /** The values at which the thumb will snap. */\n  @Input()\n  get step() { return this._step; }\n  set step(v: number) {\n    this._step = coerceNumberProperty(v, this._step);\n\n    if (this._step % 1 !== 0) {\n      this._roundLabelTo = this._step.toString().split('.').pop()!.length;\n    }\n\n    // Since this could modify the label, we need to notify the change detection.\n    this._changeDetectorRef.markForCheck();\n  }\n  private _step: number = 1;\n\n  /** Whether or not to show the thumb label. */\n  @Input()\n  get thumbLabel(): boolean { return this._thumbLabel; }\n  set thumbLabel(value) { this._thumbLabel = coerceBooleanProperty(value); }\n  private _thumbLabel: boolean = false;\n\n  /** @deprecated */\n  @Input('thumb-label')\n  get _thumbLabelDeprecated(): boolean { return this._thumbLabel; }\n  set _thumbLabelDeprecated(value) { this._thumbLabel = value; }\n\n  /**\n   * How often to show ticks. Relative to the step so that a tick always appears on a step.\n   * Ex: Tick interval of 4 with a step of 3 will draw a tick every 4 steps (every 12 values).\n   */\n  @Input()\n  get tickInterval() { return this._tickInterval; }\n  set tickInterval(value: 'auto' | number) {\n    if (value === 'auto') {\n      this._tickInterval = 'auto';\n    } else if (typeof value === 'number' || typeof value === 'string') {\n      this._tickInterval = coerceNumberProperty(value, this._tickInterval as number);\n    } else {\n      this._tickInterval = 0;\n    }\n  }\n  private _tickInterval: 'auto' | number = 0;\n\n  /** @deprecated */\n  @Input('tick-interval')\n  get _tickIntervalDeprecated() { return this.tickInterval; }\n  set _tickIntervalDeprecated(v) { this.tickInterval = v; }\n\n  /** Value of the slider. */\n  @Input()\n  get value() {\n    // If the value needs to be read and it is still uninitialized, initialize it to the min.\n    if (this._value === null) {\n      this.value = this._min;\n    }\n    return this._value;\n  }\n  set value(v: number | null) {\n    if (v !== this._value) {\n      this._value = coerceNumberProperty(v, this._value || 0);\n      this._percent = this._calculatePercentage(this._value);\n\n      // Since this also modifies the percentage, we need to let the change detection know.\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n  private _value: number | null = null;\n\n  /** Whether the slider is vertical. */\n  @Input()\n  get vertical() { return this._vertical; }\n  set vertical(value: any) {\n    this._vertical = coerceBooleanProperty(value);\n  }\n  private _vertical = false;\n\n  /** Event emitted when the slider value has changed. */\n  @Output() change = new EventEmitter<MatSliderChange>();\n\n  /** Event emitted when the slider thumb moves. */\n  @Output() input = new EventEmitter<MatSliderChange>();\n\n  /** The value to be used for display purposes. */\n  get displayValue(): string | number {\n    // Note that this could be improved further by rounding something like 0.999 to 1 or\n    // 0.899 to 0.9, however it is very performance sensitive, because it gets called on\n    // every change detection cycle.\n    if (this._roundLabelTo && this.value && this.value % 1 !== 0) {\n      return this.value.toFixed(this._roundLabelTo);\n    }\n\n    return this.value || 0;\n  }\n\n  /** onTouch function registered via registerOnTouch (ControlValueAccessor). */\n  onTouched: () => any = () => {};\n\n  /** The percentage of the slider that coincides with the value. */\n  get percent(): number { return this._clamp(this._percent); }\n  private _percent: number = 0;\n\n  /**\n   * Whether or not the thumb is sliding.\n   * Used to determine if there should be a transition for the thumb and fill track.\n   */\n  _isSliding: boolean = false;\n\n  /**\n   * Whether or not the slider is active (clicked or sliding).\n   * Used to shrink and grow the thumb as according to the Material Design spec.\n   */\n  _isActive: boolean = false;\n\n  /**\n   * Whether the axis of the slider is inverted.\n   * (i.e. whether moving the thumb in the positive x or y direction decreases the slider's value).\n   */\n  get _invertAxis() {\n    // Standard non-inverted mode for a vertical slider should be dragging the thumb from bottom to\n    // top. However from a y-axis standpoint this is inverted.\n    return this.vertical ? !this.invert : this.invert;\n  }\n\n\n  /** Whether the slider is at its minimum value. */\n  get _isMinValue() {\n    return this.percent === 0;\n  }\n\n  /**\n   * The amount of space to leave between the slider thumb and the track fill & track background\n   * elements.\n   */\n  get _thumbGap() {\n    if (this.disabled) {\n      return DISABLED_THUMB_GAP;\n    }\n    if (this._isMinValue && !this.thumbLabel) {\n      return this._isActive ? MIN_VALUE_ACTIVE_THUMB_GAP : MIN_VALUE_NONACTIVE_THUMB_GAP;\n    }\n    return 0;\n  }\n\n  /** CSS styles for the track background element. */\n  get _trackBackgroundStyles(): { [key: string]: string } {\n    let axis = this.vertical ? 'Y' : 'X';\n    let sign = this._invertMouseCoords ? '-' : '';\n    return {\n      'transform': `translate${axis}(${sign}${this._thumbGap}px) scale${axis}(${1 - this.percent})`\n    };\n  }\n\n  /** CSS styles for the track fill element. */\n  get _trackFillStyles(): { [key: string]: string } {\n    let axis = this.vertical ? 'Y' : 'X';\n    let sign = this._invertMouseCoords ? '' : '-';\n    return {\n      'transform': `translate${axis}(${sign}${this._thumbGap}px) scale${axis}(${this.percent})`\n    };\n  }\n\n  /** CSS styles for the ticks container element. */\n  get _ticksContainerStyles(): { [key: string]: string } {\n    let axis = this.vertical ? 'Y' : 'X';\n    // For a horizontal slider in RTL languages we push the ticks container off the left edge\n    // instead of the right edge to avoid causing a horizontal scrollbar to appear.\n    let sign = !this.vertical && this._direction == 'rtl' ? '' : '-';\n    let offset = this._tickIntervalPercent / 2 * 100;\n    return {\n      'transform': `translate${axis}(${sign}${offset}%)`\n    };\n  }\n\n  /** CSS styles for the ticks element. */\n  get _ticksStyles(): { [key: string]: string } {\n    let tickSize = this._tickIntervalPercent * 100;\n    let backgroundSize = this.vertical ? `2px ${tickSize}%` : `${tickSize}% 2px`;\n    let axis = this.vertical ? 'Y' : 'X';\n    // Depending on the direction we pushed the ticks container, push the ticks the opposite\n    // direction to re-center them but clip off the end edge. In RTL languages we need to flip the\n    // ticks 180 degrees so we're really cutting off the end edge abd not the start.\n    let sign = !this.vertical && this._direction == 'rtl' ? '-' : '';\n    let rotate = !this.vertical && this._direction == 'rtl' ? ' rotate(180deg)' : '';\n    let styles: { [key: string]: string } = {\n      'backgroundSize': backgroundSize,\n      // Without translateZ ticks sometimes jitter as the slider moves on Chrome & Firefox.\n      'transform': `translateZ(0) translate${axis}(${sign}${tickSize / 2}%)${rotate}`\n    };\n\n    if (this._isMinValue && this._thumbGap) {\n      let side = this.vertical ?\n          (this._invertAxis ? 'Bottom' : 'Top') :\n          (this._invertAxis ? 'Right' : 'Left');\n      styles[`padding${side}`] = `${this._thumbGap}px`;\n    }\n\n    return styles;\n  }\n\n  get _thumbContainerStyles(): { [key: string]: string } {\n    let axis = this.vertical ? 'Y' : 'X';\n    // For a horizontal slider in RTL languages we push the thumb container off the left edge\n    // instead of the right edge to avoid causing a horizontal scrollbar to appear.\n    let invertOffset =\n        (this._direction == 'rtl' && !this.vertical) ? !this._invertAxis : this._invertAxis;\n    let offset = (invertOffset ? this.percent : 1 - this.percent) * 100;\n    return {\n      'transform': `translate${axis}(-${offset}%)`\n    };\n  }\n\n  /** The size of a tick interval as a percentage of the size of the track. */\n  private _tickIntervalPercent: number = 0;\n\n  /** The dimensions of the slider. */\n  private _sliderDimensions: ClientRect | null = null;\n\n  private _controlValueAccessorChangeFn: (value: any) => void = () => {};\n\n  /** Decimal places to round to, based on the step amount. */\n  private _roundLabelTo: number;\n\n  /** Subscription to the Directionality change EventEmitter. */\n  private _dirChangeSubscription = Subscription.EMPTY;\n\n  /** The value of the slider when the slide start event fires. */\n  private _valueOnSlideStart: number | null;\n\n  /** Reference to the inner slider wrapper element. */\n  @ViewChild('sliderWrapper') private _sliderWrapper: ElementRef;\n\n  /**\n   * Whether mouse events should be converted to a slider position by calculating their distance\n   * from the right or bottom edge of the slider as opposed to the top or left.\n   */\n  private get _invertMouseCoords() {\n    return (this._direction == 'rtl' && !this.vertical) ? !this._invertAxis : this._invertAxis;\n  }\n\n  /** The language direction for this slider element. */\n  private get _direction() {\n    return (this._dir && this._dir.value == 'rtl') ? 'rtl' : 'ltr';\n  }\n\n  constructor(elementRef: ElementRef,\n              private _focusMonitor: FocusMonitor,\n              private _changeDetectorRef: ChangeDetectorRef,\n              @Optional() private _dir: Directionality,\n              @Attribute('tabindex') tabIndex: string) {\n    super(elementRef);\n\n    this.tabIndex = parseInt(tabIndex) || 0;\n  }\n\n  ngOnInit() {\n    this._focusMonitor\n        .monitor(this._elementRef.nativeElement, true)\n        .subscribe((origin: FocusOrigin) => {\n          this._isActive = !!origin && origin !== 'keyboard';\n          this._changeDetectorRef.detectChanges();\n        });\n    if (this._dir) {\n      this._dirChangeSubscription = this._dir.change.subscribe(() => {\n        this._changeDetectorRef.markForCheck();\n      });\n    }\n  }\n\n  ngOnDestroy() {\n    this._focusMonitor.stopMonitoring(this._elementRef.nativeElement);\n    this._dirChangeSubscription.unsubscribe();\n  }\n\n  _onMouseenter() {\n    if (this.disabled) {\n      return;\n    }\n\n    // We save the dimensions of the slider here so we can use them to update the spacing of the\n    // ticks and determine where on the slider click and slide events happen.\n    this._sliderDimensions = this._getSliderDimensions();\n    this._updateTickIntervalPercent();\n  }\n\n  _onClick(event: MouseEvent) {\n    if (this.disabled) {\n      return;\n    }\n\n    let oldValue = this.value;\n    this._isSliding = false;\n    this._focusHostElement();\n    this._updateValueFromPosition({x: event.clientX, y: event.clientY});\n\n    /* Emit a change and input event if the value changed. */\n    if (oldValue != this.value) {\n      this._emitInputEvent();\n      this._emitChangeEvent();\n    }\n  }\n\n  _onSlide(event: HammerInput) {\n    if (this.disabled) {\n      return;\n    }\n\n    // The slide start event sometimes fails to fire on iOS, so if we're not already in the sliding\n    // state, call the slide start handler manually.\n    if (!this._isSliding) {\n      this._onSlideStart(null);\n    }\n\n    // Prevent the slide from selecting anything else.\n    event.preventDefault();\n\n    let oldValue = this.value;\n    this._updateValueFromPosition({x: event.center.x, y: event.center.y});\n\n    // Native range elements always emit `input` events when the value changed while sliding.\n    if (oldValue != this.value) {\n      this._emitInputEvent();\n    }\n  }\n\n  _onSlideStart(event: HammerInput | null) {\n    if (this.disabled || this._isSliding) {\n      return;\n    }\n\n    // Simulate mouseenter in case this is a mobile device.\n    this._onMouseenter();\n\n    this._isSliding = true;\n    this._focusHostElement();\n    this._valueOnSlideStart = this.value;\n\n    if (event) {\n      this._updateValueFromPosition({x: event.center.x, y: event.center.y});\n      event.preventDefault();\n    }\n  }\n\n  _onSlideEnd() {\n    this._isSliding = false;\n\n    if (this._valueOnSlideStart != this.value) {\n      this._emitChangeEvent();\n    }\n    this._valueOnSlideStart = null;\n  }\n\n  _onFocus() {\n    // We save the dimensions of the slider here so we can use them to update the spacing of the\n    // ticks and determine where on the slider click and slide events happen.\n    this._sliderDimensions = this._getSliderDimensions();\n    this._updateTickIntervalPercent();\n  }\n\n  _onBlur() {\n    this.onTouched();\n  }\n\n  _onKeydown(event: KeyboardEvent) {\n    if (this.disabled) { return; }\n\n    let oldValue = this.value;\n\n    switch (event.keyCode) {\n      case PAGE_UP:\n        this._increment(10);\n        break;\n      case PAGE_DOWN:\n        this._increment(-10);\n        break;\n      case END:\n        this.value = this.max;\n        break;\n      case HOME:\n        this.value = this.min;\n        break;\n      case LEFT_ARROW:\n        // NOTE: For a sighted user it would make more sense that when they press an arrow key on an\n        // inverted slider the thumb moves in that direction. However for a blind user, nothing\n        // about the slider indicates that it is inverted. They will expect left to be decrement,\n        // regardless of how it appears on the screen. For speakers ofRTL languages, they probably\n        // expect left to mean increment. Therefore we flip the meaning of the side arrow keys for\n        // RTL. For inverted sliders we prefer a good a11y experience to having it \"look right\" for\n        // sighted users, therefore we do not swap the meaning.\n        this._increment(this._direction == 'rtl' ? 1 : -1);\n        break;\n      case UP_ARROW:\n        this._increment(1);\n        break;\n      case RIGHT_ARROW:\n        // See comment on LEFT_ARROW about the conditions under which we flip the meaning.\n        this._increment(this._direction == 'rtl' ? -1 : 1);\n        break;\n      case DOWN_ARROW:\n        this._increment(-1);\n        break;\n      default:\n        // Return if the key is not one that we explicitly handle to avoid calling preventDefault on\n        // it.\n        return;\n    }\n\n    if (oldValue != this.value) {\n      this._emitInputEvent();\n      this._emitChangeEvent();\n    }\n\n    this._isSliding = true;\n    event.preventDefault();\n  }\n\n  _onKeyup() {\n    this._isSliding = false;\n  }\n\n  /** Increments the slider by the given number of steps (negative number decrements). */\n  private _increment(numSteps: number) {\n    this.value = this._clamp((this.value || 0) + this.step * numSteps, this.min, this.max);\n  }\n\n  /** Calculate the new value from the new physical location. The value will always be snapped. */\n  private _updateValueFromPosition(pos: {x: number, y: number}) {\n    if (!this._sliderDimensions) {\n      return;\n    }\n\n    let offset = this.vertical ? this._sliderDimensions.top : this._sliderDimensions.left;\n    let size = this.vertical ? this._sliderDimensions.height : this._sliderDimensions.width;\n    let posComponent = this.vertical ? pos.y : pos.x;\n\n    // The exact value is calculated from the event and used to find the closest snap value.\n    let percent = this._clamp((posComponent - offset) / size);\n    if (this._invertMouseCoords) {\n      percent = 1 - percent;\n    }\n    let exactValue = this._calculateValue(percent);\n\n    // This calculation finds the closest step by finding the closest whole number divisible by the\n    // step relative to the min.\n    let closestValue = Math.round((exactValue - this.min) / this.step) * this.step + this.min;\n    // The value needs to snap to the min and max.\n    this.value = this._clamp(closestValue, this.min, this.max);\n  }\n\n  /** Emits a change event if the current value is different from the last emitted value. */\n  private _emitChangeEvent() {\n    this._controlValueAccessorChangeFn(this.value);\n    this.change.emit(this._createChangeEvent());\n  }\n\n  /** Emits an input event when the current value is different from the last emitted value. */\n  private _emitInputEvent() {\n    this.input.emit(this._createChangeEvent());\n  }\n\n  /** Updates the amount of space between ticks as a percentage of the width of the slider. */\n  private _updateTickIntervalPercent() {\n    if (!this.tickInterval || !this._sliderDimensions) {\n      return;\n    }\n\n    if (this.tickInterval == 'auto') {\n      let trackSize = this.vertical ? this._sliderDimensions.height : this._sliderDimensions.width;\n      let pixelsPerStep = trackSize * this.step / (this.max - this.min);\n      let stepsPerTick = Math.ceil(MIN_AUTO_TICK_SEPARATION / pixelsPerStep);\n      let pixelsPerTick = stepsPerTick * this.step;\n      this._tickIntervalPercent = pixelsPerTick / trackSize;\n    } else {\n      this._tickIntervalPercent = this.tickInterval * this.step / (this.max - this.min);\n    }\n  }\n\n  /** Creates a slider change object from the specified value. */\n  private _createChangeEvent(value = this.value): MatSliderChange {\n    let event = new MatSliderChange();\n\n    event.source = this;\n    event.value = value;\n\n    return event;\n  }\n\n  /** Calculates the percentage of the slider that a value is. */\n  private _calculatePercentage(value: number | null) {\n    return ((value || 0) - this.min) / (this.max - this.min);\n  }\n\n  /** Calculates the value a percentage of the slider corresponds to. */\n  private _calculateValue(percentage: number) {\n    return this.min + percentage * (this.max - this.min);\n  }\n\n  /** Return a number between two numbers. */\n  private _clamp(value: number, min = 0, max = 1) {\n    return Math.max(min, Math.min(value, max));\n  }\n\n  /**\n   * Get the bounding client rect of the slider track element.\n   * The track is used rather than the native element to ignore the extra space that the thumb can\n   * take up.\n   */\n  private _getSliderDimensions() {\n    return this._sliderWrapper ? this._sliderWrapper.nativeElement.getBoundingClientRect() : null;\n  }\n\n  /**\n   * Focuses the native element.\n   * Currently only used to allow a blur event to fire but will be used with keyboard input later.\n   */\n  private _focusHostElement() {\n    this._elementRef.nativeElement.focus();\n  }\n\n  /**\n   * Sets the model value. Implemented as part of ControlValueAccessor.\n   * @param value\n   */\n  writeValue(value: any) {\n    this.value = value;\n  }\n\n  /**\n   * Registers a callback to eb triggered when the value has changed.\n   * Implemented as part of ControlValueAccessor.\n   * @param fn Callback to be registered.\n   */\n  registerOnChange(fn: (value: any) => void) {\n    this._controlValueAccessorChangeFn = fn;\n  }\n\n  /**\n   * Registers a callback to be triggered when the component is touched.\n   * Implemented as part of ControlValueAccessor.\n   * @param fn Callback to be registered.\n   */\n  registerOnTouched(fn: any) {\n    this.onTouched = fn;\n  }\n\n  /**\n   * Sets whether the component should be disabled.\n   * Implemented as part of ControlValueAccessor.\n   * @param isDisabled\n   */\n  setDisabledState(isDisabled: boolean) {\n    this.disabled = isDisabled;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {A11yModule} from '@angular/cdk/a11y';\nimport {BidiModule} from '@angular/cdk/bidi';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {GestureConfig, MatCommonModule} from '@angular/material/core';\nimport {HAMMER_GESTURE_CONFIG} from '@angular/platform-browser';\nimport {MatSlider} from './slider';\n\n\n@NgModule({\n  imports: [CommonModule, MatCommonModule, BidiModule, A11yModule],\n  exports: [MatSlider, MatCommonModule],\n  declarations: [MatSlider],\n  providers: [{provide: HAMMER_GESTURE_CONFIG, useClass: GestureConfig}]\n})\nexport class MatSliderModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {OverlayRef} from '@angular/cdk/overlay';\nimport {Observable} from 'rxjs/Observable';\nimport {Subject} from 'rxjs/Subject';\nimport {MatSnackBarContainer} from './snack-bar-container';\n\n/**\n * Reference to a snack bar dispatched from the snack bar service.\n */\nexport class MatSnackBarRef<T> {\n  /** The instance of the component making up the content of the snack bar. */\n  instance: T;\n\n  /**\n   * The instance of the component making up the content of the snack bar.\n   * @docs-private\n   */\n  containerInstance: MatSnackBarContainer;\n\n  /** Subject for notifying the user that the snack bar has closed. */\n  private _afterClosed = new Subject<void>();\n\n  /** Subject for notifying the user that the snack bar has opened and appeared. */\n  private _afterOpened = new Subject<void>();\n\n  /** Subject for notifying the user that the snack bar action was called. */\n  private _onAction = new Subject<void>();\n\n  /**\n   * Timeout ID for the duration setTimeout call. Used to clear the timeout if the snackbar is\n   * dismissed before the duration passes.\n   */\n  private _durationTimeoutId: number;\n\n  constructor(containerInstance: MatSnackBarContainer,\n              private _overlayRef: OverlayRef) {\n    this.containerInstance = containerInstance;\n    // Dismiss snackbar on action.\n    this.onAction().subscribe(() => this.dismiss());\n    containerInstance._onExit.subscribe(() => this._finishDismiss());\n  }\n\n  /** Dismisses the snack bar. */\n  dismiss(): void {\n    if (!this._afterClosed.closed) {\n      this.containerInstance.exit();\n    }\n    clearTimeout(this._durationTimeoutId);\n  }\n\n  /** Marks the snackbar action clicked. */\n  closeWithAction(): void {\n    if (!this._onAction.closed) {\n      this._onAction.next();\n      this._onAction.complete();\n    }\n  }\n\n  /** Dismisses the snack bar after some duration */\n  _dismissAfter(duration: number): void {\n    this._durationTimeoutId = setTimeout(() => this.dismiss(), duration);\n  }\n\n  /** Marks the snackbar as opened */\n  _open(): void {\n    if (!this._afterOpened.closed) {\n      this._afterOpened.next();\n      this._afterOpened.complete();\n    }\n  }\n\n  /** Cleans up the DOM after closing. */\n  private _finishDismiss(): void {\n    this._overlayRef.dispose();\n\n    if (!this._onAction.closed) {\n      this._onAction.complete();\n    }\n\n    this._afterClosed.next();\n    this._afterClosed.complete();\n  }\n\n  /** Gets an observable that is notified when the snack bar is finished closing. */\n  afterDismissed(): Observable<void> {\n    return this._afterClosed.asObservable();\n  }\n\n  /** Gets an observable that is notified when the snack bar has opened and appeared. */\n  afterOpened(): Observable<void> {\n    return this.containerInstance._onEnter;\n  }\n\n  /** Gets an observable that is notified when the snack bar action is called. */\n  onAction(): Observable<void> {\n    return this._onAction.asObservable();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ViewContainerRef, InjectionToken} from '@angular/core';\nimport {AriaLivePoliteness} from '@angular/cdk/a11y';\nimport {Direction} from '@angular/cdk/bidi';\n\nexport const MAT_SNACK_BAR_DATA = new InjectionToken<any>('MatSnackBarData');\n\n/** Possible values for horizontalPosition on MatSnackBarConfig. */\nexport type MatSnackBarHorizontalPosition = 'start' | 'center' | 'end' | 'left' | 'right';\n\n/** Possible values for verticalPosition on MatSnackBarConfig. */\nexport type MatSnackBarVerticalPosition = 'top' | 'bottom';\n\n/**\n * Configuration used when opening a snack-bar.\n */\nexport class MatSnackBarConfig {\n  /** The politeness level for the MatAriaLiveAnnouncer announcement. */\n  politeness?: AriaLivePoliteness = 'assertive';\n\n  /** Message to be announced by the MatAriaLiveAnnouncer */\n  announcementMessage?: string = '';\n\n  /** The view container to place the overlay for the snack bar into. */\n  viewContainerRef?: ViewContainerRef;\n\n  /** The length of time in milliseconds to wait before automatically dismissing the snack bar. */\n  duration?: number = 0;\n\n  /** Extra CSS classes to be added to the snack bar container. */\n  panelClass?: string | string[];\n\n  /**\n   * Extra CSS classes to be added to the snack bar container.\n   * @deprecated Use `panelClass` instead.\n   */\n extraClasses?: string | string[];\n\n  /** Text layout direction for the snack bar. */\n  direction?: Direction = 'ltr';\n\n  /** Data being injected into the child component. */\n  data?: any = null;\n\n  /** The horizontal position to place the snack bar. */\n  horizontalPosition?: MatSnackBarHorizontalPosition = 'center';\n\n  /** The vertical position to place the snack bar. */\n  verticalPosition?: MatSnackBarVerticalPosition = 'bottom';\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ChangeDetectionStrategy,\n  Input,\n  ElementRef,\n  SimpleChanges,\n  OnChanges,\n  ViewEncapsulation,\n  Optional,\n  Inject,\n} from '@angular/core';\nimport {CanColor, mixinColor} from '@angular/material/core';\nimport {Platform} from '@angular/cdk/platform';\nimport {DOCUMENT} from '@angular/common';\nimport {coerceNumberProperty} from '@angular/cdk/coercion';\n\n/** Possible mode for a progress spinner. */\nexport type ProgressSpinnerMode = 'determinate' | 'indeterminate';\n\n/**\n * Base reference size of the spinner.\n * @docs-private\n */\nconst BASE_SIZE = 100;\n\n/**\n * Base reference stroke width of the spinner.\n * @docs-private\n */\nconst BASE_STROKE_WIDTH = 10;\n\n// Boilerplate for applying mixins to MatProgressSpinner.\n/** @docs-private */\nexport class MatProgressSpinnerBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatProgressSpinnerMixinBase = mixinColor(MatProgressSpinnerBase, 'primary');\n\nconst INDETERMINATE_ANIMATION_TEMPLATE = `\n @keyframes mat-progress-spinner-stroke-rotate-DIAMETER {\n    0%      { stroke-dashoffset: START_VALUE;  transform: rotate(0); }\n    12.5%   { stroke-dashoffset: END_VALUE;    transform: rotate(0); }\n    12.51%  { stroke-dashoffset: END_VALUE;    transform: rotateX(180deg) rotate(72.5deg); }\n    25%     { stroke-dashoffset: START_VALUE;  transform: rotateX(180deg) rotate(72.5deg); }\n\n    25.1%   { stroke-dashoffset: START_VALUE;  transform: rotate(270deg); }\n    37.5%   { stroke-dashoffset: END_VALUE;    transform: rotate(270deg); }\n    37.51%  { stroke-dashoffset: END_VALUE;    transform: rotateX(180deg) rotate(161.5deg); }\n    50%     { stroke-dashoffset: START_VALUE;  transform: rotateX(180deg) rotate(161.5deg); }\n\n    50.01%  { stroke-dashoffset: START_VALUE;  transform: rotate(180deg); }\n    62.5%   { stroke-dashoffset: END_VALUE;    transform: rotate(180deg); }\n    62.51%  { stroke-dashoffset: END_VALUE;    transform: rotateX(180deg) rotate(251.5deg); }\n    75%     { stroke-dashoffset: START_VALUE;  transform: rotateX(180deg) rotate(251.5deg); }\n\n    75.01%  { stroke-dashoffset: START_VALUE;  transform: rotate(90deg); }\n    87.5%   { stroke-dashoffset: END_VALUE;    transform: rotate(90deg); }\n    87.51%  { stroke-dashoffset: END_VALUE;    transform: rotateX(180deg) rotate(341.5deg); }\n    100%    { stroke-dashoffset: START_VALUE;  transform: rotateX(180deg) rotate(341.5deg); }\n  }\n`;\n\n/**\n * <mat-progress-spinner> component.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-progress-spinner',\n  exportAs: 'matProgressSpinner',\n  host: {\n    'role': 'progressbar',\n    'class': 'mat-progress-spinner',\n    '[style.width.px]': '_elementSize',\n    '[style.height.px]': '_elementSize',\n    '[attr.aria-valuemin]': 'mode === \"determinate\" ? 0 : null',\n    '[attr.aria-valuemax]': 'mode === \"determinate\" ? 100 : null',\n    '[attr.aria-valuenow]': 'value',\n    '[attr.mode]': 'mode',\n  },\n  inputs: ['color'],\n  templateUrl: 'progress-spinner.html',\n  styleUrls: ['progress-spinner.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n})\nexport class MatProgressSpinner extends _MatProgressSpinnerMixinBase implements CanColor,\n  OnChanges {\n\n  private _value = 0;\n  private _strokeWidth: number;\n  private _fallbackAnimation = false;\n\n  /** The width and height of the host element. Will grow with stroke width. **/\n  _elementSize = BASE_SIZE;\n\n  /** Tracks diameters of existing instances to de-dupe generated styles (default d = 100) */\n  private static diameters = new Set<number>([BASE_SIZE]);\n\n  /**\n   * Used for storing all of the generated keyframe animations.\n   * @dynamic\n   */\n  private static styleTag: HTMLStyleElement|null = null;\n\n  /** The diameter of the progress spinner (will set width and height of svg). */\n  @Input()\n  get diameter(): number {\n    return this._diameter;\n  }\n  set diameter(size: number) {\n    this._diameter = coerceNumberProperty(size);\n\n    if (!this._fallbackAnimation && !MatProgressSpinner.diameters.has(this._diameter)) {\n      this._attachStyleNode();\n    }\n  }\n  private _diameter = BASE_SIZE;\n\n  /** Stroke width of the progress spinner. */\n  @Input()\n  get strokeWidth(): number {\n    return this._strokeWidth || this.diameter / 10;\n  }\n\n  set strokeWidth(value: number) {\n    this._strokeWidth = coerceNumberProperty(value);\n  }\n\n\n  /** Mode of the progress circle */\n  @Input() mode: ProgressSpinnerMode = 'determinate';\n\n  /** Value of the progress circle. */\n  @Input()\n  get value(): number {\n    return this.mode === 'determinate' ? this._value : 0;\n  }\n  set value(newValue: number) {\n    this._value = Math.max(0, Math.min(100, coerceNumberProperty(newValue)));\n  }\n\n  constructor(public _elementRef: ElementRef,\n              platform: Platform,\n              @Optional() @Inject(DOCUMENT) private _document: any) {\n\n    super(_elementRef);\n    this._fallbackAnimation = platform.EDGE || platform.TRIDENT;\n\n    // On IE and Edge, we can't animate the `stroke-dashoffset`\n    // reliably so we fall back to a non-spec animation.\n    const animationClass =\n      `mat-progress-spinner-indeterminate${this._fallbackAnimation ? '-fallback' : ''}-animation`;\n\n    _elementRef.nativeElement.classList.add(animationClass);\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    if (changes.strokeWidth || changes.diameter) {\n      this._elementSize = this._diameter + Math.max(this.strokeWidth - BASE_STROKE_WIDTH, 0);\n    }\n  }\n\n  /** The radius of the spinner, adjusted for stroke width. */\n  get _circleRadius() {\n    return (this.diameter - BASE_STROKE_WIDTH) / 2;\n  }\n\n  /** The view box of the spinner's svg element. */\n  get _viewBox() {\n    const viewBox = this._circleRadius * 2 + this.strokeWidth;\n    return `0 0 ${viewBox} ${viewBox}`;\n  }\n\n  /** The stroke circumference of the svg circle. */\n  get _strokeCircumference(): number {\n    return 2 * Math.PI * this._circleRadius;\n  }\n\n  /** The dash offset of the svg circle. */\n  get _strokeDashOffset() {\n    if (this.mode === 'determinate') {\n      return this._strokeCircumference * (100 - this._value) / 100;\n    }\n\n    // In fallback mode set the circle to 80% and rotate it with CSS.\n    if (this._fallbackAnimation && this.mode === 'indeterminate') {\n      return this._strokeCircumference * 0.2;\n    }\n\n    return null;\n  }\n\n  /** Stroke width of the circle in percent. */\n  get _circleStrokeWidth() {\n    return this.strokeWidth / this._elementSize * 100;\n  }\n\n  /** Dynamically generates a style tag containing the correct animation for this diameter. */\n  private _attachStyleNode(): void {\n    let styleTag = MatProgressSpinner.styleTag;\n\n    if (!styleTag) {\n      styleTag = this._document.createElement('style');\n      this._document.head.appendChild(styleTag);\n      MatProgressSpinner.styleTag = styleTag;\n    }\n\n    if (styleTag && styleTag.sheet) {\n      (styleTag.sheet as CSSStyleSheet).insertRule(this._getAnimationText(), 0);\n    }\n\n    MatProgressSpinner.diameters.add(this.diameter);\n  }\n\n  /** Generates animation styles adjusted for the spinner's diameter. */\n  private _getAnimationText(): string {\n    return INDETERMINATE_ANIMATION_TEMPLATE\n        // Animation should begin at 5% and end at 80%\n        .replace(/START_VALUE/g, `${0.95 * this._strokeCircumference}`)\n        .replace(/END_VALUE/g, `${0.2 * this._strokeCircumference}`)\n        .replace(/DIAMETER/g, `${this.diameter}`);\n  }\n}\n\n\n/**\n * <mat-spinner> component.\n *\n * This is a component definition to be used as a convenience reference to create an\n * indeterminate <mat-progress-spinner> instance.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-spinner',\n  host: {\n    'role': 'progressbar',\n    'mode': 'indeterminate',\n    'class': 'mat-spinner mat-progress-spinner',\n    '[style.width.px]': '_elementSize',\n    '[style.height.px]': '_elementSize',\n  },\n  inputs: ['color'],\n  templateUrl: 'progress-spinner.html',\n  styleUrls: ['progress-spinner.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n})\nexport class MatSpinner extends MatProgressSpinner {\n  constructor(elementRef: ElementRef, platform: Platform,\n              @Optional() @Inject(DOCUMENT) document: any) {\n    super(elementRef, platform, document);\n    this.mode = 'indeterminate';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {NgModule} from '@angular/core';\nimport {PlatformModule} from '@angular/cdk/platform';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatProgressSpinner, MatSpinner} from './progress-spinner';\n\n@NgModule({\n  imports: [MatCommonModule, PlatformModule],\n  exports: [\n    MatProgressSpinner,\n    MatSpinner,\n    MatCommonModule\n  ],\n  declarations: [\n    MatProgressSpinner,\n    MatSpinner\n  ],\n})\nclass MatProgressSpinnerModule {}\n\nexport {MatProgressSpinnerModule};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor, FocusOrigin} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {UniqueSelectionDispatcher} from '@angular/cdk/collections';\nimport {\n  AfterContentInit,\n  AfterViewInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Input,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Output,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {\n  CanColor,\n  CanDisable,\n  CanDisableRipple,\n  MatRipple,\n  mixinColor,\n  mixinDisabled,\n  mixinDisableRipple,\n  RippleConfig,\n  RippleRef,\n} from '@angular/material/core';\n\n// Increasing integer for generating unique ids for radio components.\nlet nextUniqueId = 0;\n\n/**\n * Provider Expression that allows mat-radio-group to register as a ControlValueAccessor. This\n * allows it to support [(ngModel)] and ngControl.\n * @docs-private\n */\nexport const MAT_RADIO_GROUP_CONTROL_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatRadioGroup),\n  multi: true\n};\n\n/** Change event object emitted by MatRadio and MatRadioGroup. */\nexport class MatRadioChange {\n  /** The MatRadioButton that emits the change event. */\n  source: MatRadioButton | null;\n  /** The value of the MatRadioButton. */\n  value: any;\n}\n\n\n// Boilerplate for applying mixins to MatRadioGroup.\n/** @docs-private */\nexport class MatRadioGroupBase { }\nexport const _MatRadioGroupMixinBase = mixinDisabled(MatRadioGroupBase);\n\n/**\n * A group of radio buttons. May contain one or more `<mat-radio-button>` elements.\n */\n@Directive({\n  selector: 'mat-radio-group',\n  exportAs: 'matRadioGroup',\n  providers: [MAT_RADIO_GROUP_CONTROL_VALUE_ACCESSOR],\n  host: {\n    'role': 'radiogroup',\n    'class': 'mat-radio-group',\n  },\n  inputs: ['disabled'],\n})\nexport class MatRadioGroup extends _MatRadioGroupMixinBase\n    implements AfterContentInit, ControlValueAccessor, CanDisable {\n  /**\n   * Selected value for group. Should equal the value of the selected radio button if there *is*\n   * a corresponding radio button with a matching value. If there is *not* such a corresponding\n   * radio button, this value persists to be applied in case a new radio button is added with a\n   * matching value.\n   */\n  private _value: any = null;\n\n  /** The HTML name attribute applied to radio buttons in this group. */\n  private _name: string = `mat-radio-group-${nextUniqueId++}`;\n\n  /** The currently selected radio button. Should match value. */\n  private _selected: MatRadioButton | null = null;\n\n  /** Whether the `value` has been set to its initial value. */\n  private _isInitialized: boolean = false;\n\n  /** Whether the labels should appear after or before the radio-buttons. Defaults to 'after' */\n  private _labelPosition: 'before' | 'after' = 'after';\n\n  /** Whether the radio group is disabled. */\n  private _disabled: boolean = false;\n\n  /** Whether the radio group is required. */\n  private _required: boolean = false;\n\n  /** The method to be called in order to update ngModel */\n  _controlValueAccessorChangeFn: (value: any) => void = () => {};\n\n  /**\n   * onTouch function registered via registerOnTouch (ControlValueAccessor).\n   * @docs-private\n   */\n  onTouched: () => any = () => {};\n\n  /**\n   * Event emitted when the group value changes.\n   * Change events are only emitted when the value changes due to user interaction with\n   * a radio button (the same behavior as `<input type-\"radio\">`).\n   */\n  @Output() change: EventEmitter<MatRadioChange> = new EventEmitter<MatRadioChange>();\n\n  /** Child radio buttons. */\n  @ContentChildren(forwardRef(() => MatRadioButton), { descendants: true })\n  _radios: QueryList<MatRadioButton>;\n\n  /** Name of the radio button group. All radio buttons inside this group will use this name. */\n  @Input()\n  get name(): string { return this._name; }\n  set name(value: string) {\n    this._name = value;\n    this._updateRadioButtonNames();\n  }\n\n  /**\n   * Alignment of the radio-buttons relative to their labels. Can be 'before' or 'after'.\n   * @deprecated\n   */\n  @Input()\n  get align(): 'start' | 'end' {\n    // align refers to the checkbox relative to the label, while labelPosition refers to the\n    // label relative to the checkbox. As such, they are inverted.\n    return this.labelPosition == 'after' ? 'start' : 'end';\n  }\n\n  set align(v) {\n    this.labelPosition = (v == 'start') ? 'after' : 'before';\n  }\n\n\n  /** Whether the labels should appear after or before the radio-buttons. Defaults to 'after' */\n  @Input()\n  get labelPosition(): 'before' | 'after' {\n    return this._labelPosition;\n  }\n\n  set labelPosition(v) {\n    this._labelPosition = (v == 'before') ? 'before' : 'after';\n    this._markRadiosForCheck();\n  }\n\n  /** Value of the radio button. */\n  @Input()\n  get value(): any { return this._value; }\n  set value(newValue: any) {\n    if (this._value != newValue) {\n      // Set this before proceeding to ensure no circular loop occurs with selection.\n      this._value = newValue;\n\n      this._updateSelectedRadioFromValue();\n      this._checkSelectedRadioButton();\n    }\n  }\n\n  _checkSelectedRadioButton() {\n    if (this._selected && !this._selected.checked) {\n      this._selected.checked = true;\n    }\n  }\n\n  /** Whether the radio button is selected. */\n  @Input()\n  get selected() { return this._selected; }\n  set selected(selected: MatRadioButton | null) {\n    this._selected = selected;\n    this.value = selected ? selected.value : null;\n    this._checkSelectedRadioButton();\n  }\n\n  /** Whether the radio group is disabled */\n  @Input()\n  get disabled(): boolean { return this._disabled; }\n  set disabled(value) {\n    this._disabled = coerceBooleanProperty(value);\n    this._markRadiosForCheck();\n  }\n\n  /** Whether the radio group is required */\n  @Input()\n  get required(): boolean { return this._required; }\n  set required(value: boolean) {\n    this._required = coerceBooleanProperty(value);\n    this._markRadiosForCheck();\n  }\n\n  constructor(private _changeDetector: ChangeDetectorRef) {\n    super();\n  }\n\n  /**\n   * Initialize properties once content children are available.\n   * This allows us to propagate relevant attributes to associated buttons.\n   */\n  ngAfterContentInit() {\n    // Mark this component as initialized in AfterContentInit because the initial value can\n    // possibly be set by NgModel on MatRadioGroup, and it is possible that the OnInit of the\n    // NgModel occurs *after* the OnInit of the MatRadioGroup.\n    this._isInitialized = true;\n  }\n\n  /**\n   * Mark this group as being \"touched\" (for ngModel). Meant to be called by the contained\n   * radio buttons upon their blur.\n   */\n  _touch() {\n    if (this.onTouched) {\n      this.onTouched();\n    }\n  }\n\n  private _updateRadioButtonNames(): void {\n    if (this._radios) {\n      this._radios.forEach(radio => {\n        radio.name = this.name;\n      });\n    }\n  }\n\n  /** Updates the `selected` radio button from the internal _value state. */\n  private _updateSelectedRadioFromValue(): void {\n    // If the value already matches the selected radio, do nothing.\n    const isAlreadySelected = this._selected != null && this._selected.value == this._value;\n\n    if (this._radios != null && !isAlreadySelected) {\n      this._selected = null;\n      this._radios.forEach(radio => {\n        radio.checked = this.value == radio.value;\n        if (radio.checked) {\n          this._selected = radio;\n        }\n      });\n    }\n  }\n\n  /** Dispatch change event with current selection and group value. */\n  _emitChangeEvent(): void {\n    if (this._isInitialized) {\n      const event = new MatRadioChange();\n      event.source = this._selected;\n      event.value = this._value;\n      this.change.emit(event);\n    }\n  }\n\n  _markRadiosForCheck() {\n    if (this._radios) {\n      this._radios.forEach(radio => radio._markForCheck());\n    }\n  }\n\n  /**\n   * Sets the model value. Implemented as part of ControlValueAccessor.\n   * @param value\n   */\n  writeValue(value: any) {\n    this.value = value;\n    this._changeDetector.markForCheck();\n  }\n\n  /**\n   * Registers a callback to be triggered when the model value changes.\n   * Implemented as part of ControlValueAccessor.\n   * @param fn Callback to be registered.\n   */\n  registerOnChange(fn: (value: any) => void) {\n    this._controlValueAccessorChangeFn = fn;\n  }\n\n  /**\n   * Registers a callback to be triggered when the control is touched.\n   * Implemented as part of ControlValueAccessor.\n   * @param fn Callback to be registered.\n   */\n  registerOnTouched(fn: any) {\n    this.onTouched = fn;\n  }\n\n  /**\n   * Sets the disabled state of the control. Implemented as a part of ControlValueAccessor.\n   * @param isDisabled Whether the control should be disabled.\n   */\n  setDisabledState(isDisabled: boolean) {\n    this.disabled = isDisabled;\n    this._changeDetector.markForCheck();\n  }\n}\n\n// Boilerplate for applying mixins to MatRadioButton.\n/** @docs-private */\nexport class MatRadioButtonBase {\n  constructor(public _elementRef: ElementRef) {}\n}\n// As per Material design specifications the selection control radio should use the accent color\n// palette by default. https://material.io/guidelines/components/selection-controls.html\nexport const _MatRadioButtonMixinBase =\n    mixinColor(mixinDisableRipple(MatRadioButtonBase), 'accent');\n\n/**\n * A radio-button. May be inside of\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-radio-button',\n  templateUrl: 'radio.html',\n  styleUrls: ['radio.css'],\n  inputs: ['color', 'disableRipple'],\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  exportAs: 'matRadioButton',\n  host: {\n    'class': 'mat-radio-button',\n    '[class.mat-radio-checked]': 'checked',\n    '[class.mat-radio-disabled]': 'disabled',\n    '[attr.id]': 'id',\n    // Note: under normal conditions focus shouldn't land on this element, however it may be\n    // programmatically set, for example inside of a focus trap, in this case we want to forward\n    // the focus to the native element.\n    '(focus)': '_inputElement.nativeElement.focus()',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatRadioButton extends _MatRadioButtonMixinBase\n    implements OnInit, AfterViewInit, OnDestroy, CanColor, CanDisableRipple {\n\n  private _uniqueId: string = `mat-radio-${++nextUniqueId}`;\n\n  /** The unique ID for the radio button. */\n  @Input() id: string = this._uniqueId;\n\n  /** Analog to HTML 'name' attribute used to group radios for unique selection. */\n  @Input() name: string;\n\n  /** Used to set the 'aria-label' attribute on the underlying input element. */\n  @Input('aria-label') ariaLabel: string;\n\n  /** The 'aria-labelledby' attribute takes precedence as the element's text alternative. */\n  @Input('aria-labelledby') ariaLabelledby: string;\n\n  /** Whether this radio button is checked. */\n  @Input()\n  get checked(): boolean { return this._checked; }\n  set checked(value: boolean) {\n    const newCheckedState = coerceBooleanProperty(value);\n\n    if (this._checked != newCheckedState) {\n      this._checked = newCheckedState;\n\n      if (newCheckedState && this.radioGroup && this.radioGroup.value != this.value) {\n        this.radioGroup.selected = this;\n      } else if (!newCheckedState && this.radioGroup && this.radioGroup.value == this.value) {\n        // When unchecking the selected radio button, update the selected radio\n        // property on the group.\n        this.radioGroup.selected = null;\n      }\n\n      if (newCheckedState) {\n        // Notify all radio buttons with the same name to un-check.\n        this._radioDispatcher.notify(this.id, this.name);\n      }\n      this._changeDetector.markForCheck();\n    }\n  }\n\n  /** The value of this radio button. */\n  @Input()\n  get value(): any {\n    return this._value;\n  }\n\n  set value(value: any) {\n    if (this._value != value) {\n      this._value = value;\n      if (this.radioGroup != null) {\n        if (!this.checked) {\n          // Update checked when the value changed to match the radio group's value\n          this.checked = this.radioGroup.value == value;\n        }\n        if (this.checked) {\n          this.radioGroup.selected = this;\n        }\n      }\n    }\n  }\n\n  /**\n   * Whether or not the radio-button should appear before or after the label.\n   * @deprecated\n   */\n  @Input()\n  get align(): 'start' | 'end' {\n    // align refers to the checkbox relative to the label, while labelPosition refers to the\n    // label relative to the checkbox. As such, they are inverted.\n    return this.labelPosition == 'after' ? 'start' : 'end';\n  }\n\n  set align(v) {\n    this.labelPosition = (v == 'start') ? 'after' : 'before';\n  }\n\n  private _labelPosition: 'before' | 'after';\n\n  /** Whether the label should appear after or before the radio button. Defaults to 'after' */\n  @Input()\n  get labelPosition(): 'before' | 'after' {\n    return this._labelPosition || (this.radioGroup && this.radioGroup.labelPosition) || 'after';\n  }\n\n  set labelPosition(value) {\n    this._labelPosition = value;\n  }\n\n  /** Whether the radio button is disabled. */\n  @Input()\n  get disabled(): boolean {\n    return this._disabled || (this.radioGroup != null && this.radioGroup.disabled);\n  }\n  set disabled(value: boolean) {\n    this._disabled = coerceBooleanProperty(value);\n  }\n\n  /** Whether the radio button is required. */\n  @Input()\n  get required(): boolean {\n    return this._required || (this.radioGroup && this.radioGroup.required);\n  }\n  set required(value: boolean) {\n    this._required = coerceBooleanProperty(value);\n  }\n\n  /**\n   * Event emitted when the checked state of this radio button changes.\n   * Change events are only emitted when the value changes due to user interaction with\n   * the radio button (the same behavior as `<input type-\"radio\">`).\n   */\n  @Output() change: EventEmitter<MatRadioChange> = new EventEmitter<MatRadioChange>();\n\n  /** The parent radio group. May or may not be present. */\n  radioGroup: MatRadioGroup;\n\n  /** ID of the native input element inside `<mat-radio-button>` */\n  get inputId(): string { return `${this.id || this._uniqueId}-input`; }\n\n  /** Whether this radio is checked. */\n  private _checked: boolean = false;\n\n  /** Whether this radio is disabled. */\n  private _disabled: boolean;\n\n  /** Whether this radio is required. */\n  private _required: boolean;\n\n  /** Value assigned to this radio.*/\n  private _value: any = null;\n\n  /** The child ripple instance. */\n  @ViewChild(MatRipple) _ripple: MatRipple;\n\n  /** Ripple configuration for the mouse ripples and focus indicators. */\n  _rippleConfig: RippleConfig = {centered: true, radius: 23, speedFactor: 1.5};\n\n  /** Reference to the current focus ripple. */\n  private _focusRipple: RippleRef | null;\n\n  /** Unregister function for _radioDispatcher **/\n  private _removeUniqueSelectionListener: () => void = () => {};\n\n  /** The native `<input type=radio>` element */\n  @ViewChild('input') _inputElement: ElementRef;\n\n  constructor(@Optional() radioGroup: MatRadioGroup,\n              elementRef: ElementRef,\n              private _changeDetector: ChangeDetectorRef,\n              private _focusMonitor: FocusMonitor,\n              private _radioDispatcher: UniqueSelectionDispatcher) {\n    super(elementRef);\n\n    // Assertions. Ideally these should be stripped out by the compiler.\n    // TODO(jelbourn): Assert that there's no name binding AND a parent radio group.\n    this.radioGroup = radioGroup;\n\n    this._removeUniqueSelectionListener =\n      _radioDispatcher.listen((id: string, name: string) => {\n        if (id != this.id && name == this.name) {\n          this.checked = false;\n        }\n      });\n  }\n\n  /** Focuses the radio button. */\n  focus(): void {\n    this._focusMonitor.focusVia(this._inputElement.nativeElement, 'keyboard');\n  }\n\n  /**\n   * Marks the radio button as needing checking for change detection.\n   * This method is exposed because the parent radio group will directly\n   * update bound properties of the radio button.\n   */\n  _markForCheck() {\n    // When group value changes, the button will not be notified. Use `markForCheck` to explicit\n    // update radio button's status\n    this._changeDetector.markForCheck();\n  }\n\n  ngOnInit() {\n    if (this.radioGroup) {\n      // If the radio is inside a radio group, determine if it should be checked\n      this.checked = this.radioGroup.value === this._value;\n      // Copy name from parent radio group\n      this.name = this.radioGroup.name;\n    }\n  }\n\n  ngAfterViewInit() {\n    this._focusMonitor\n      .monitor(this._inputElement.nativeElement, false)\n      .subscribe(focusOrigin => this._onInputFocusChange(focusOrigin));\n  }\n\n  ngOnDestroy() {\n    this._focusMonitor.stopMonitoring(this._inputElement.nativeElement);\n    this._removeUniqueSelectionListener();\n  }\n\n  /** Dispatch change event with current value. */\n  private _emitChangeEvent(): void {\n    const event = new MatRadioChange();\n    event.source = this;\n    event.value = this._value;\n    this.change.emit(event);\n  }\n\n  _isRippleDisabled() {\n    return this.disableRipple || this.disabled;\n  }\n\n  _onInputClick(event: Event) {\n    // We have to stop propagation for click events on the visual hidden input element.\n    // By default, when a user clicks on a label element, a generated click event will be\n    // dispatched on the associated input element. Since we are using a label element as our\n    // root container, the click event on the `radio-button` will be executed twice.\n    // The real click event will bubble up, and the generated click event also tries to bubble up.\n    // This will lead to multiple click events.\n    // Preventing bubbling for the second event will solve that issue.\n    event.stopPropagation();\n  }\n\n  /**\n   * Triggered when the radio button received a click or the input recognized any change.\n   * Clicking on a label element, will trigger a change event on the associated input.\n   */\n  _onInputChange(event: Event) {\n    // We always have to stop propagation on the change event.\n    // Otherwise the change event, from the input element, will bubble up and\n    // emit its event object to the `change` output.\n    event.stopPropagation();\n\n    const groupValueChanged = this.radioGroup && this.value != this.radioGroup.value;\n    this.checked = true;\n    this._emitChangeEvent();\n\n    if (this.radioGroup) {\n      this.radioGroup._controlValueAccessorChangeFn(this.value);\n      this.radioGroup._touch();\n      if (groupValueChanged) {\n        this.radioGroup._emitChangeEvent();\n      }\n    }\n  }\n\n  /** Function is called whenever the focus changes for the input element. */\n  private _onInputFocusChange(focusOrigin: FocusOrigin) {\n    if (!this._focusRipple && focusOrigin === 'keyboard') {\n      this._focusRipple = this._ripple.launch(0, 0, {persistent: true, ...this._rippleConfig});\n    } else if (!focusOrigin) {\n      if (this.radioGroup) {\n        this.radioGroup._touch();\n      }\n\n      if (this._focusRipple) {\n        this._focusRipple.fadeOut();\n        this._focusRipple = null;\n      }\n    }\n  }\n\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {A11yModule} from '@angular/cdk/a11y';\nimport {UNIQUE_SELECTION_DISPATCHER_PROVIDER} from '@angular/cdk/collections';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {MatRadioButton, MatRadioGroup} from './radio';\n\n@NgModule({\n  imports: [CommonModule, MatRippleModule, MatCommonModule, A11yModule],\n  exports: [MatRadioGroup, MatRadioButton, MatCommonModule],\n  providers: [UNIQUE_SELECTION_DISPATCHER_PROVIDER],\n  declarations: [MatRadioGroup, MatRadioButton],\n})\nexport class MatRadioModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/** Animations used by the Material drawers. */\nexport const matDrawerAnimations: {\n  readonly transformDrawer: AnimationTriggerMetadata;\n} = {\n  /** Animation that slides a drawer in and out. */\n  transformDrawer: trigger('transform', [\n    state('open, open-instant', style({\n      transform: 'translate3d(0, 0, 0)',\n      visibility: 'visible',\n    })),\n    state('void', style({\n      visibility: 'hidden',\n    })),\n    transition('void => open-instant', animate('0ms')),\n    transition('void <=> open, open-instant => void',\n        animate('400ms cubic-bezier(0.25, 0.8, 0.25, 1)'))\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {AnimationEvent} from '@angular/animations';\nimport {FocusTrap, FocusTrapFactory, FocusMonitor, FocusOrigin} from '@angular/cdk/a11y';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {ESCAPE} from '@angular/cdk/keycodes';\nimport {Platform} from '@angular/cdk/platform';\nimport {\n  AfterContentChecked,\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  ContentChildren,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  Output,\n  QueryList,\n  ViewEncapsulation,\n  InjectionToken,\n} from '@angular/core';\nimport {DOCUMENT} from '@angular/common';\nimport {merge} from 'rxjs/observable/merge';\nimport {filter} from 'rxjs/operators/filter';\nimport {take} from 'rxjs/operators/take';\nimport {startWith} from 'rxjs/operators/startWith';\nimport {takeUntil} from 'rxjs/operators/takeUntil';\nimport {debounceTime} from 'rxjs/operators/debounceTime';\nimport {map} from 'rxjs/operators/map';\nimport {Subject} from 'rxjs/Subject';\nimport {Observable} from 'rxjs/Observable';\nimport {matDrawerAnimations} from './drawer-animations';\n\n\n/** Throws an exception when two MatDrawer are matching the same position. */\nexport function throwMatDuplicatedDrawerError(position: string) {\n  throw Error(`A drawer was already declared for 'position=\"${position}\"'`);\n}\n\n\n/**\n * Drawer toggle promise result.\n * @deprecated\n */\nexport class MatDrawerToggleResult {\n  constructor(\n    /** Whether the drawer is opened or closed. */\n    public type: 'open' | 'close',\n    /** Whether the drawer animation is finished. */\n    public animationFinished: boolean) {}\n}\n\n/** Configures whether drawers should use auto sizing by default. */\nexport const MAT_DRAWER_DEFAULT_AUTOSIZE =\n    new InjectionToken<boolean>('MAT_DRAWER_DEFAULT_AUTOSIZE');\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-drawer-content',\n  template: '<ng-content></ng-content>',\n  host: {\n    'class': 'mat-drawer-content',\n    '[style.margin-left.px]': '_margins.left',\n    '[style.margin-right.px]': '_margins.right',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n})\nexport class MatDrawerContent implements AfterContentInit {\n  /**\n   * Margins to be applied to the content. These are used to push / shrink the drawer content when a\n   * drawer is open. We use margin rather than transform even for push mode because transform breaks\n   * fixed position elements inside of the transformed element.\n   */\n  _margins: {left: number|null, right: number|null} = {left: null, right: null};\n\n  constructor(\n      private _changeDetectorRef: ChangeDetectorRef,\n      @Inject(forwardRef(() => MatDrawerContainer)) private _container: MatDrawerContainer) {\n  }\n\n  ngAfterContentInit() {\n    this._container._contentMargins.subscribe(margins => {\n      this._margins = margins;\n      this._changeDetectorRef.markForCheck();\n    });\n  }\n}\n\n\n/**\n * This component corresponds to a drawer that can be opened on the drawer container.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-drawer',\n  exportAs: 'matDrawer',\n  template: '<ng-content></ng-content>',\n  animations: [matDrawerAnimations.transformDrawer],\n  host: {\n    'class': 'mat-drawer',\n    '[@transform]': '_animationState',\n    '(@transform.start)': '_onAnimationStart($event)',\n    '(@transform.done)': '_onAnimationEnd($event)',\n    '(keydown)': 'handleKeydown($event)',\n    // must prevent the browser from aligning text based on value\n    '[attr.align]': 'null',\n    '[class.mat-drawer-end]': 'position === \"end\"',\n    '[class.mat-drawer-over]': 'mode === \"over\"',\n    '[class.mat-drawer-push]': 'mode === \"push\"',\n    '[class.mat-drawer-side]': 'mode === \"side\"',\n    'tabIndex': '-1',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n})\nexport class MatDrawer implements AfterContentInit, AfterContentChecked, OnDestroy {\n  private _focusTrap: FocusTrap;\n  private _elementFocusedBeforeDrawerWasOpened: HTMLElement | null = null;\n\n  /** Whether the drawer is initialized. Used for disabling the initial animation. */\n  private _enableAnimations = false;\n\n  /** The side that the drawer is attached to. */\n  @Input()\n  get position(): 'start' | 'end' { return this._position; }\n  set position(value) {\n    // Make sure we have a valid value.\n    value = value === 'end' ? 'end' : 'start';\n    if (value != this._position) {\n      this._position = value;\n      this.onAlignChanged.emit();\n      this.onPositionChanged.emit();\n    }\n  }\n  private _position: 'start' | 'end' = 'start';\n\n  /** @deprecated */\n  @Input()\n  get align(): 'start' | 'end' { return this.position; }\n  set align(value) { this.position = value; }\n\n  /** Mode of the drawer; one of 'over', 'push' or 'side'. */\n  @Input()\n  get mode(): 'over' | 'push' | 'side' { return this._mode; }\n  set mode(value) {\n    this._mode = value;\n    this._modeChanged.next();\n  }\n  private _mode: 'over' | 'push' | 'side' = 'over';\n\n  /** Whether the drawer can be closed with the escape key or by clicking on the backdrop. */\n  @Input()\n  get disableClose(): boolean { return this._disableClose; }\n  set disableClose(value: boolean) { this._disableClose = coerceBooleanProperty(value); }\n  private _disableClose: boolean = false;\n\n  /** Whether the drawer is opened. */\n  private _opened: boolean = false;\n\n  /** How the sidenav was opened (keypress, mouse click etc.) */\n  private _openedVia: FocusOrigin | null;\n\n  /** Emits whenever the drawer has started animating. */\n  _animationStarted = new EventEmitter<AnimationEvent>();\n\n  /** Current state of the sidenav animation. */\n  _animationState: 'open-instant' | 'open' | 'void' = 'void';\n\n  /** Event emitted when the drawer open state is changed. */\n  @Output() openedChange: EventEmitter<boolean> =\n      // Note this has to be async in order to avoid some issues with two-bindings (see #8872).\n      new EventEmitter<boolean>(/* isAsync */true);\n\n  /** Event emitted when the drawer has been opened. */\n  @Output('opened')\n  get _openedStream(): Observable<void> {\n    return this.openedChange.pipe(filter(o => o), map(() => {}));\n  }\n\n  /** Event emitted when the drawer has started opening. */\n  @Output()\n  get openedStart(): Observable<void> {\n    return this._animationStarted.pipe(\n      filter(e => e.fromState !== e.toState && e.toState.indexOf('open') === 0),\n      map(() => {})\n    );\n  }\n\n  /** Event emitted when the drawer has been closed. */\n  @Output('closed')\n  get _closedStream(): Observable<void> {\n    return this.openedChange.pipe(filter(o => !o), map(() => {}));\n  }\n\n  /** Event emitted when the drawer has started closing. */\n  @Output()\n  get closedStart(): Observable<void> {\n    return this._animationStarted.pipe(\n      filter(e => e.fromState !== e.toState && e.toState === 'void'),\n      map(() => {})\n    );\n  }\n\n  /**\n   * Event emitted when the drawer is fully opened.\n   * @deprecated Use `opened` instead.\n   */\n  @Output('open') onOpen = this._openedStream;\n\n  /**\n   * Event emitted when the drawer is fully closed.\n   * @deprecated Use `closed` instead.\n   */\n  @Output('close') onClose = this._closedStream;\n\n  /** Event emitted when the drawer's position changes. */\n  @Output('positionChanged') onPositionChanged = new EventEmitter<void>();\n\n  /** @deprecated */\n  @Output('align-changed') onAlignChanged = new EventEmitter<void>();\n\n  /**\n   * An observable that emits when the drawer mode changes. This is used by the drawer container to\n   * to know when to when the mode changes so it can adapt the margins on the content.\n   */\n  _modeChanged = new Subject();\n\n  get _isFocusTrapEnabled(): boolean {\n    // The focus trap is only enabled when the drawer is open in any mode other than side.\n    return this.opened && this.mode !== 'side';\n  }\n\n  constructor(private _elementRef: ElementRef,\n              private _focusTrapFactory: FocusTrapFactory,\n              private _focusMonitor: FocusMonitor,\n              private _platform: Platform,\n              @Optional() @Inject(DOCUMENT) private _doc: any) {\n\n    this.openedChange.subscribe((opened: boolean) => {\n      if (opened) {\n        if (this._doc) {\n          this._elementFocusedBeforeDrawerWasOpened = this._doc.activeElement as HTMLElement;\n        }\n\n        if (this._isFocusTrapEnabled && this._focusTrap) {\n          this._trapFocus();\n        }\n      } else {\n        this._restoreFocus();\n      }\n    });\n  }\n\n  /** Traps focus inside the drawer. */\n  private _trapFocus() {\n    this._focusTrap.focusInitialElementWhenReady().then(hasMovedFocus => {\n      // If there were no focusable elements, focus the sidenav itself so the keyboard navigation\n      // still works. We need to check that `focus` is a function due to Universal.\n      if (!hasMovedFocus && typeof this._elementRef.nativeElement.focus === 'function') {\n        this._elementRef.nativeElement.focus();\n      }\n    });\n  }\n\n  /**\n   * If focus is currently inside the drawer, restores it to where it was before the drawer\n   * opened.\n   */\n  private _restoreFocus() {\n    const activeEl = this._doc && this._doc.activeElement;\n\n    if (activeEl && this._elementRef.nativeElement.contains(activeEl)) {\n      if (this._elementFocusedBeforeDrawerWasOpened instanceof HTMLElement) {\n        this._focusMonitor.focusVia(this._elementFocusedBeforeDrawerWasOpened, this._openedVia);\n      } else {\n        this._elementRef.nativeElement.blur();\n      }\n    }\n\n    this._elementFocusedBeforeDrawerWasOpened = null;\n    this._openedVia = null;\n  }\n\n  ngAfterContentInit() {\n    this._focusTrap = this._focusTrapFactory.create(this._elementRef.nativeElement);\n    this._focusTrap.enabled = this._isFocusTrapEnabled;\n  }\n\n  ngAfterContentChecked() {\n    // Enable the animations after the lifecycle hooks have run, in order to avoid animating\n    // drawers that are open by default. When we're on the server, we shouldn't enable the\n    // animations, because we don't want the drawer to animate the first time the user sees\n    // the page.\n    if (this._platform.isBrowser) {\n      this._enableAnimations = true;\n    }\n  }\n\n  ngOnDestroy() {\n    if (this._focusTrap) {\n      this._focusTrap.destroy();\n    }\n  }\n\n  /**\n   * Whether the drawer is opened. We overload this because we trigger an event when it\n   * starts or end.\n   */\n  @Input()\n  get opened(): boolean { return this._opened; }\n  set opened(v: boolean) {\n    this.toggle(coerceBooleanProperty(v));\n  }\n\n  /**\n   * Open the drawer.\n   * @param openedVia Whether the drawer was opened by a key press, mouse click or programmatically.\n   * Used for focus management after the sidenav is closed.\n   */\n  open(openedVia?: FocusOrigin): Promise<void> {\n    return this.toggle(true, openedVia);\n  }\n\n  /** Close the drawer. */\n  close(): Promise<void> {\n    return this.toggle(false);\n  }\n\n  /**\n   * Toggle this drawer.\n   * @param isOpen Whether the drawer should be open.\n   * @param openedVia Whether the drawer was opened by a key press, mouse click or programmatically.\n   * Used for focus management after the sidenav is closed.\n   */\n  toggle(isOpen: boolean = !this.opened, openedVia: FocusOrigin = 'program'):\n    Promise<void> {\n\n    this._opened = isOpen;\n\n    if (isOpen) {\n      this._animationState = this._enableAnimations ? 'open' : 'open-instant';\n      this._openedVia = openedVia;\n    } else {\n      this._animationState = 'void';\n      this._restoreFocus();\n    }\n\n    if (this._focusTrap) {\n      this._focusTrap.enabled = this._isFocusTrapEnabled;\n    }\n\n    // TODO(crisbeto): This promise is here for backwards-compatibility.\n    // It should be removed next time we do breaking changes in the drawer.\n    return new Promise<any>(resolve => {\n      this.openedChange.pipe(take(1)).subscribe(open => {\n        resolve(new MatDrawerToggleResult(open ? 'open' : 'close', true));\n      });\n    });\n  }\n\n  /**\n   * Handles the keyboard events.\n   * @docs-private\n   */\n  handleKeydown(event: KeyboardEvent) {\n    if (event.keyCode === ESCAPE && !this.disableClose) {\n      this.close();\n      event.stopPropagation();\n    }\n  }\n\n  _onAnimationStart(event: AnimationEvent) {\n    this._animationStarted.emit(event);\n  }\n\n  _onAnimationEnd(event: AnimationEvent) {\n    const {fromState, toState} = event;\n\n    if ((toState.indexOf('open') === 0 && fromState === 'void') ||\n        (toState === 'void' && fromState.indexOf('open') === 0)) {\n      this.openedChange.emit(this._opened);\n    }\n  }\n\n  get _width() {\n    return this._elementRef.nativeElement ? (this._elementRef.nativeElement.offsetWidth || 0) : 0;\n  }\n}\n\n\n/**\n * <mat-drawer-container> component.\n *\n * This is the parent component to one or two <mat-drawer>s that validates the state internally\n * and coordinates the backdrop and content styling.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-drawer-container',\n  exportAs: 'matDrawerContainer',\n  templateUrl: 'drawer-container.html',\n  styleUrls: ['drawer.css'],\n  host: {\n    'class': 'mat-drawer-container',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n})\nexport class MatDrawerContainer implements AfterContentInit, OnDestroy {\n  @ContentChildren(MatDrawer) _drawers: QueryList<MatDrawer>;\n  @ContentChild(MatDrawerContent) _content: MatDrawerContent;\n\n  /** The drawer child with the `start` position. */\n  get start(): MatDrawer | null { return this._start; }\n\n  /** The drawer child with the `end` position. */\n  get end(): MatDrawer | null { return this._end; }\n\n  /**\n   * Whether to automatically resize the container whenever\n   * the size of any of its drawers changes.\n   *\n   * **Use at your own risk!** Enabling this option can cause layout thrashing by measuring\n   * the drawers on every change detection cycle. Can be configured globally via the\n   * `MAT_DRAWER_DEFAULT_AUTOSIZE` token.\n   */\n  @Input()\n  get autosize(): boolean { return this._autosize; }\n  set autosize(value: boolean) { this._autosize = coerceBooleanProperty(value); }\n  private _autosize: boolean;\n\n  /** Event emitted when the drawer backdrop is clicked. */\n  @Output() backdropClick = new EventEmitter<void>();\n\n  /** The drawer at the start/end position, independent of direction. */\n  private _start: MatDrawer | null;\n  private _end: MatDrawer | null;\n\n  /**\n   * The drawer at the left/right. When direction changes, these will change as well.\n   * They're used as aliases for the above to set the left/right style properly.\n   * In LTR, _left == _start and _right == _end.\n   * In RTL, _left == _end and _right == _start.\n   */\n  private _left: MatDrawer | null;\n  private _right: MatDrawer | null;\n\n  /** Emits when the component is destroyed. */\n  private _destroyed = new Subject<void>();\n\n  /** Emits on every ngDoCheck. Used for debouncing reflows. */\n  private _doCheckSubject = new Subject<void>();\n\n  _contentMargins = new Subject<{left: number|null, right: number|null}>();\n\n  constructor(@Optional() private _dir: Directionality,\n              private _element: ElementRef,\n              private _ngZone: NgZone,\n              private _changeDetectorRef: ChangeDetectorRef,\n              @Inject(MAT_DRAWER_DEFAULT_AUTOSIZE) defaultAutosize = false) {\n\n    // If a `Dir` directive exists up the tree, listen direction changes\n    // and update the left/right properties to point to the proper start/end.\n    if (_dir) {\n      _dir.change.pipe(takeUntil(this._destroyed)).subscribe(() => {\n        this._validateDrawers();\n        this._updateContentMargins();\n      });\n    }\n\n    this._autosize = defaultAutosize;\n  }\n\n  ngAfterContentInit() {\n    this._drawers.changes.pipe(startWith(null)).subscribe(() => {\n      this._validateDrawers();\n\n      this._drawers.forEach((drawer: MatDrawer) => {\n        this._watchDrawerToggle(drawer);\n        this._watchDrawerPosition(drawer);\n        this._watchDrawerMode(drawer);\n      });\n\n      if (!this._drawers.length ||\n          this._isDrawerOpen(this._start) ||\n          this._isDrawerOpen(this._end)) {\n        this._updateContentMargins();\n      }\n\n      this._changeDetectorRef.markForCheck();\n    });\n\n    this._doCheckSubject.pipe(\n      debounceTime(10), // Arbitrary debounce time, less than a frame at 60fps\n      takeUntil(this._destroyed)\n    ).subscribe(() => this._updateContentMargins());\n  }\n\n  ngOnDestroy() {\n    this._doCheckSubject.complete();\n    this._destroyed.next();\n    this._destroyed.complete();\n  }\n\n  /** Calls `open` of both start and end drawers */\n  open(): void {\n    this._drawers.forEach(drawer => drawer.open());\n  }\n\n  /** Calls `close` of both start and end drawers */\n  close(): void {\n    this._drawers.forEach(drawer => drawer.close());\n  }\n\n  ngDoCheck() {\n    // If users opted into autosizing, do a check every change detection cycle.\n    if (this._autosize && this._isPushed()) {\n      // Run outside the NgZone, otherwise the debouncer will throw us into an infinite loop.\n      this._ngZone.runOutsideAngular(() => this._doCheckSubject.next());\n    }\n  }\n\n  /**\n   * Subscribes to drawer events in order to set a class on the main container element when the\n   * drawer is open and the backdrop is visible. This ensures any overflow on the container element\n   * is properly hidden.\n   */\n  private _watchDrawerToggle(drawer: MatDrawer): void {\n    drawer._animationStarted.pipe(\n      takeUntil(this._drawers.changes),\n      filter((event: AnimationEvent) => event.fromState !== event.toState)\n    )\n    .subscribe((event: AnimationEvent) => {\n      // Set the transition class on the container so that the animations occur. This should not\n      // be set initially because animations should only be triggered via a change in state.\n      if (event.toState !== 'open-instant') {\n        this._element.nativeElement.classList.add('mat-drawer-transition');\n      }\n\n      this._updateContentMargins();\n      this._changeDetectorRef.markForCheck();\n    });\n\n    if (drawer.mode !== 'side') {\n      drawer.openedChange.pipe(takeUntil(this._drawers.changes)).subscribe(() =>\n          this._setContainerClass(drawer.opened));\n    }\n  }\n\n  /**\n   * Subscribes to drawer onPositionChanged event in order to\n   * re-validate drawers when the position changes.\n   */\n  private _watchDrawerPosition(drawer: MatDrawer): void {\n    if (!drawer) {\n      return;\n    }\n    // NOTE: We need to wait for the microtask queue to be empty before validating,\n    // since both drawers may be swapping positions at the same time.\n    drawer.onPositionChanged.pipe(takeUntil(this._drawers.changes)).subscribe(() => {\n      this._ngZone.onMicrotaskEmpty.asObservable().pipe(take(1)).subscribe(() => {\n        this._validateDrawers();\n      });\n    });\n  }\n\n  /** Subscribes to changes in drawer mode so we can run change detection. */\n  private _watchDrawerMode(drawer: MatDrawer): void {\n    if (drawer) {\n      drawer._modeChanged.pipe(takeUntil(merge(this._drawers.changes, this._destroyed)))\n        .subscribe(() => {\n          this._updateContentMargins();\n          this._changeDetectorRef.markForCheck();\n        });\n    }\n  }\n\n  /** Toggles the 'mat-drawer-opened' class on the main 'mat-drawer-container' element. */\n  private _setContainerClass(isAdd: boolean): void {\n    if (isAdd) {\n      this._element.nativeElement.classList.add('mat-drawer-opened');\n    } else {\n      this._element.nativeElement.classList.remove('mat-drawer-opened');\n    }\n  }\n\n  /** Validate the state of the drawer children components. */\n  private _validateDrawers() {\n    this._start = this._end = null;\n\n    // Ensure that we have at most one start and one end drawer.\n    this._drawers.forEach(drawer => {\n      if (drawer.position == 'end') {\n        if (this._end != null) {\n          throwMatDuplicatedDrawerError('end');\n        }\n        this._end = drawer;\n      } else {\n        if (this._start != null) {\n          throwMatDuplicatedDrawerError('start');\n        }\n        this._start = drawer;\n      }\n    });\n\n    this._right = this._left = null;\n\n    // Detect if we're LTR or RTL.\n    if (!this._dir || this._dir.value == 'ltr') {\n      this._left = this._start;\n      this._right = this._end;\n    } else {\n      this._left = this._end;\n      this._right = this._start;\n    }\n  }\n\n  /** Whether the container is being pushed to the side by one of the drawers. */\n  private _isPushed() {\n    return (this._isDrawerOpen(this._start) && this._start!.mode != 'over') ||\n           (this._isDrawerOpen(this._end) && this._end!.mode != 'over');\n  }\n\n  _onBackdropClicked() {\n    this.backdropClick.emit();\n    this._closeModalDrawer();\n  }\n\n  _closeModalDrawer() {\n    // Close all open drawers where closing is not disabled and the mode is not `side`.\n    [this._start, this._end]\n      .filter(drawer => drawer && !drawer.disableClose && drawer.mode !== 'side')\n      .forEach(drawer => drawer!.close());\n  }\n\n  _isShowingBackdrop(): boolean {\n    return (this._isDrawerOpen(this._start) && this._start!.mode != 'side')\n        || (this._isDrawerOpen(this._end) && this._end!.mode != 'side');\n  }\n\n  private _isDrawerOpen(drawer: MatDrawer | null): boolean {\n    return drawer != null && drawer.opened;\n  }\n\n  /**\n   * Recalculates and updates the inline styles for the content. Note that this should be used\n   * sparingly, because it causes a reflow.\n   */\n  private _updateContentMargins() {\n    // 1. For drawers in `over` mode, they don't affect the content.\n    // 2. For drawers in `side` mode they should shrink the content. We do this by adding to the\n    //    left margin (for left drawer) or right margin (for right the drawer).\n    // 3. For drawers in `push` mode the should shift the content without resizing it. We do this by\n    //    adding to the left or right margin and simultaneously subtracting the same amount of\n    //    margin from the other side.\n\n    let left = 0;\n    let right = 0;\n\n    if (this._left && this._left.opened) {\n      if (this._left.mode == 'side') {\n        left += this._left._width;\n      } else if (this._left.mode == 'push') {\n        let width = this._left._width;\n        left += width;\n        right -= width;\n      }\n    }\n\n    if (this._right && this._right.opened) {\n      if (this._right.mode == 'side') {\n        right += this._right._width;\n      } else if (this._right.mode == 'push') {\n        let width = this._right._width;\n        right += width;\n        left -= width;\n      }\n    }\n\n    // Pull back into the NgZone since in some cases we could be outside.\n    this._ngZone.run(() => this._contentMargins.next({left, right}));\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {A11yModule, ARIA_DESCRIBER_PROVIDER} from '@angular/cdk/a11y';\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {PlatformModule} from '@angular/cdk/platform';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {\n  MAT_TOOLTIP_SCROLL_STRATEGY_PROVIDER,\n  MAT_TOOLTIP_DEFAULT_OPTIONS,\n  MatTooltip,\n  TooltipComponent,\n} from './tooltip';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    OverlayModule,\n    MatCommonModule,\n    PlatformModule,\n    A11yModule,\n  ],\n  exports: [MatTooltip, TooltipComponent, MatCommonModule],\n  declarations: [MatTooltip, TooltipComponent],\n  entryComponents: [TooltipComponent],\n  providers: [\n    MAT_TOOLTIP_SCROLL_STRATEGY_PROVIDER,\n    ARIA_DESCRIBER_PROVIDER,\n    {\n      provide: MAT_TOOLTIP_DEFAULT_OPTIONS,\n      useValue: {\n        showDelay: 0,\n        hideDelay: 0,\n        touchendHideDelay: 1500\n      }\n    }\n  ],\n})\nexport class MatTooltipModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable, SkipSelf, Optional } from '@angular/core';\nimport {Subject} from 'rxjs/Subject';\n\n/**\n * To modify the labels and text displayed, create a new instance of MatPaginatorIntl and\n * include it in a custom provider\n */\n@Injectable()\nexport class MatPaginatorIntl {\n  /**\n   * Stream that emits whenever the labels here are changed. Use this to notify\n   * components if the labels have changed after initialization.\n   */\n  changes: Subject<void> = new Subject<void>();\n\n  /** A label for the page size selector. */\n  itemsPerPageLabel = 'Items per page:';\n\n  /** A label for the button that increments the current page. */\n  nextPageLabel = 'Next page';\n\n  /** A label for the button that decrements the current page. */\n  previousPageLabel = 'Previous page';\n\n  /** A label for the range of items within the current page and the length of the whole list. */\n  getRangeLabel = (page: number, pageSize: number, length: number) => {\n    if (length == 0 || pageSize == 0) { return `0 of ${length}`; }\n\n    length = Math.max(length, 0);\n\n    const startIndex = page * pageSize;\n\n    // If the start index exceeds the list length, do not try and fix the end index to the end.\n    const endIndex = startIndex < length ?\n        Math.min(startIndex + pageSize, length) :\n        startIndex + pageSize;\n\n    return `${startIndex + 1} - ${endIndex} of ${length}`;\n  }\n}\n\n/** @docs-private */\nexport function MAT_PAGINATOR_INTL_PROVIDER_FACTORY(parentIntl: MatPaginatorIntl) {\n  return parentIntl || new MatPaginatorIntl();\n}\n\n/** @docs-private */\nexport const MAT_PAGINATOR_INTL_PROVIDER = {\n  // If there is already an MatPaginatorIntl available, use that. Otherwise, provide a new one.\n  provide: MatPaginatorIntl,\n  deps: [[new Optional(), new SkipSelf(), MatPaginatorIntl]],\n  useFactory: MAT_PAGINATOR_INTL_PROVIDER_FACTORY\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceNumberProperty} from '@angular/cdk/coercion';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  OnInit,\n  Output,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {Subscription} from 'rxjs/Subscription';\nimport {MatPaginatorIntl} from './paginator-intl';\n\n/** The default page size if there is no page size and there are no provided page size options. */\nconst DEFAULT_PAGE_SIZE = 50;\n\n/**\n * Change event object that is emitted when the user selects a\n * different page size or navigates to another page.\n */\nexport class PageEvent {\n  /** The current page index. */\n  pageIndex: number;\n\n  /** The current page size */\n  pageSize: number;\n\n  /** The current total number of items being paged */\n  length: number;\n}\n\n/**\n * Component to provide navigation between paged information. Displays the size of the current\n * page, user-selectable options to change that size, what items are being shown, and\n * navigational button to go to the previous or next page.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-paginator',\n  exportAs: 'matPaginator',\n  templateUrl: 'paginator.html',\n  styleUrls: ['paginator.css'],\n  host: {\n    'class': 'mat-paginator',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n})\nexport class MatPaginator implements OnInit, OnDestroy {\n  private _initialized: boolean;\n  private _intlChanges: Subscription;\n\n  /** The zero-based page index of the displayed list of items. Defaulted to 0. */\n  @Input()\n  get pageIndex(): number { return this._pageIndex; }\n  set pageIndex(pageIndex: number) {\n    this._pageIndex = coerceNumberProperty(pageIndex);\n    this._changeDetectorRef.markForCheck();\n  }\n  _pageIndex: number = 0;\n\n  /** The length of the total number of items that are being paginated. Defaulted to 0. */\n  @Input()\n  get length(): number { return this._length; }\n  set length(length: number) {\n    this._length = coerceNumberProperty(length);\n    this._changeDetectorRef.markForCheck();\n  }\n  _length: number = 0;\n\n  /** Number of items to display on a page. By default set to 50. */\n  @Input()\n  get pageSize(): number { return this._pageSize; }\n  set pageSize(pageSize: number) {\n    this._pageSize = coerceNumberProperty(pageSize);\n    this._updateDisplayedPageSizeOptions();\n  }\n  private _pageSize: number;\n\n  /** The set of provided page size options to display to the user. */\n  @Input()\n  get pageSizeOptions(): number[] { return this._pageSizeOptions; }\n  set pageSizeOptions(pageSizeOptions: number[]) {\n    this._pageSizeOptions = (pageSizeOptions || []).map(p => coerceNumberProperty(p));\n    this._updateDisplayedPageSizeOptions();\n  }\n  private _pageSizeOptions: number[] = [];\n\n  /** Event emitted when the paginator changes the page size or page index. */\n  @Output() page = new EventEmitter<PageEvent>();\n\n  /** Displayed set of page size options. Will be sorted and include current page size. */\n  _displayedPageSizeOptions: number[];\n\n  constructor(public _intl: MatPaginatorIntl,\n              private _changeDetectorRef: ChangeDetectorRef) {\n    this._intlChanges = _intl.changes.subscribe(() => this._changeDetectorRef.markForCheck());\n  }\n\n  ngOnInit() {\n    this._initialized = true;\n    this._updateDisplayedPageSizeOptions();\n  }\n\n  ngOnDestroy() {\n    this._intlChanges.unsubscribe();\n  }\n\n  /** Advances to the next page if it exists. */\n  nextPage() {\n    if (!this.hasNextPage()) { return; }\n    this.pageIndex++;\n    this._emitPageEvent();\n  }\n\n  /** Move back to the previous page if it exists. */\n  previousPage() {\n    if (!this.hasPreviousPage()) { return; }\n    this.pageIndex--;\n    this._emitPageEvent();\n  }\n\n  /** Whether there is a previous page. */\n  hasPreviousPage() {\n    return this.pageIndex >= 1 && this.pageSize != 0;\n  }\n\n  /** Whether there is a next page. */\n  hasNextPage() {\n    const numberOfPages = Math.ceil(this.length / this.pageSize) - 1;\n    return this.pageIndex < numberOfPages && this.pageSize != 0;\n  }\n\n  /**\n   * Changes the page size so that the first item displayed on the page will still be\n   * displayed using the new page size.\n   *\n   * For example, if the page size is 10 and on the second page (items indexed 10-19) then\n   * switching so that the page size is 5 will set the third page as the current page so\n   * that the 10th item will still be displayed.\n   */\n  _changePageSize(pageSize: number) {\n    // Current page needs to be updated to reflect the new page size. Navigate to the page\n    // containing the previous page's first item.\n    const startIndex = this.pageIndex * this.pageSize;\n    this.pageIndex = Math.floor(startIndex / pageSize) || 0;\n\n    this.pageSize = pageSize;\n    this._emitPageEvent();\n  }\n\n  /**\n   * Updates the list of page size options to display to the user. Includes making sure that\n   * the page size is an option and that the list is sorted.\n   */\n  private _updateDisplayedPageSizeOptions() {\n    if (!this._initialized) { return; }\n\n    // If no page size is provided, use the first page size option or the default page size.\n    if (!this.pageSize) {\n      this._pageSize = this.pageSizeOptions.length != 0 ?\n          this.pageSizeOptions[0] :\n          DEFAULT_PAGE_SIZE;\n    }\n\n    this._displayedPageSizeOptions = this.pageSizeOptions.slice();\n    if (this._displayedPageSizeOptions.indexOf(this.pageSize) == -1) {\n      this._displayedPageSizeOptions.push(this.pageSize);\n    }\n\n    // Sort the numbers using a number-specific sort function.\n    this._displayedPageSizeOptions.sort((a, b) => a - b);\n\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Emits an event notifying that a change of the paginator's properties has been triggered. */\n  private _emitPageEvent() {\n    this.page.next({\n      pageIndex: this.pageIndex,\n      pageSize: this.pageSize,\n      length: this.length\n    });\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatButtonModule} from '@angular/material/button';\nimport {MatSelectModule} from '@angular/material/select';\nimport {MatTooltipModule} from '@angular/material/tooltip';\nimport {MatPaginator} from './paginator';\nimport {MAT_PAGINATOR_INTL_PROVIDER} from './paginator-intl';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatButtonModule,\n    MatSelectModule,\n    MatTooltipModule,\n  ],\n  exports: [MatPaginator],\n  declarations: [MatPaginator],\n  providers: [MAT_PAGINATOR_INTL_PROVIDER],\n})\nexport class MatPaginatorModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Component, ChangeDetectionStrategy, Input, ViewEncapsulation} from '@angular/core';\n\n// TODO(josephperrott): Benchpress tests.\n// TODO(josephperrott): Add ARIA attributes for progressbar \"for\".\n\n\n/**\n * <mat-progress-bar> component.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-progress-bar',\n  exportAs: 'matProgressBar',\n  host: {\n    'role': 'progressbar',\n    'aria-valuemin': '0',\n    'aria-valuemax': '100',\n    '[attr.aria-valuenow]': 'value',\n    '[attr.mode]': 'mode',\n    '[class.mat-primary]': 'color == \"primary\"',\n    '[class.mat-accent]': 'color == \"accent\"',\n    '[class.mat-warn]': 'color == \"warn\"',\n    'class': 'mat-progress-bar',\n  },\n  templateUrl: 'progress-bar.html',\n  styleUrls: ['progress-bar.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n})\nexport class MatProgressBar {\n  /** Color of the progress bar. */\n  @Input() color: 'primary' | 'accent' | 'warn' = 'primary';\n\n  private _value: number = 0;\n\n  /** Value of the progressbar. Defaults to zero. Mirrored to aria-valuenow. */\n  @Input()\n  get value() { return this._value; }\n  set value(v: number) { this._value = clamp(v || 0); }\n\n  private _bufferValue: number = 0;\n\n  /** Buffer value of the progress bar. Defaults to zero. */\n  @Input()\n  get bufferValue() { return this._bufferValue; }\n  set bufferValue(v: number) { this._bufferValue = clamp(v || 0); }\n\n  /**\n   * Mode of the progress bar.\n   *\n   * Input must be one of these values: determinate, indeterminate, buffer, query, defaults to\n   * 'determinate'.\n   * Mirrored to mode attribute.\n   */\n  @Input() mode: 'determinate' | 'indeterminate' | 'buffer' | 'query' = 'determinate';\n\n  /** Gets the current transform value for the progress bar's primary indicator. */\n  _primaryTransform() {\n    let scale = this.value / 100;\n    return {transform: `scaleX(${scale})`};\n  }\n\n  /**\n   * Gets the current transform value for the progress bar's buffer indicator.  Only used if the\n   * progress mode is set to buffer, otherwise returns an undefined, causing no transformation.\n   */\n  _bufferTransform() {\n    if (this.mode == 'buffer') {\n      let scale = this.bufferValue / 100;\n      return {transform: `scaleX(${scale})`};\n    }\n  }\n}\n\n/** Clamps a value to be between two numbers, by default 0 and 100. */\nfunction clamp(v: number, min = 0, max = 100) {\n  return Math.max(min, Math.min(max, v));\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatProgressBar} from './progress-bar';\n\n\n@NgModule({\n  imports: [CommonModule, MatCommonModule],\n  exports: [MatProgressBar, MatCommonModule],\n  declarations: [MatProgressBar],\n})\nexport class MatProgressBarModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {AnimationEvent} from '@angular/animations';\nimport {FocusKeyManager} from '@angular/cdk/a11y';\nimport {Direction} from '@angular/cdk/bidi';\nimport {ESCAPE, LEFT_ARROW, RIGHT_ARROW} from '@angular/cdk/keycodes';\nimport {startWith} from 'rxjs/operators/startWith';\nimport {switchMap} from 'rxjs/operators/switchMap';\nimport {take} from 'rxjs/operators/take';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  Component,\n  ContentChildren,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  InjectionToken,\n  Input,\n  OnDestroy,\n  Output,\n  QueryList,\n  TemplateRef,\n  ViewChild,\n  ViewEncapsulation,\n  NgZone,\n} from '@angular/core';\nimport {Observable} from 'rxjs/Observable';\nimport {merge} from 'rxjs/observable/merge';\nimport {Subscription} from 'rxjs/Subscription';\nimport {matMenuAnimations} from './menu-animations';\nimport {throwMatMenuInvalidPositionX, throwMatMenuInvalidPositionY} from './menu-errors';\nimport {MatMenuItem} from './menu-item';\nimport {MatMenuPanel} from './menu-panel';\nimport {MenuPositionX, MenuPositionY} from './menu-positions';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\n\n\n/** Default `mat-menu` options that can be overridden. */\nexport interface MatMenuDefaultOptions {\n  /** The x-axis position of the menu. */\n  xPosition: MenuPositionX;\n\n  /** The y-axis position of the menu. */\n  yPosition: MenuPositionY;\n\n  /** Whether the menu should overlap the menu trigger. */\n  overlapTrigger: boolean;\n}\n\n/** Injection token to be used to override the default options for `mat-menu`. */\nexport const MAT_MENU_DEFAULT_OPTIONS =\n    new InjectionToken<MatMenuDefaultOptions>('mat-menu-default-options');\n\n/**\n * Start elevation for the menu panel.\n * @docs-private\n */\nconst MAT_MENU_BASE_ELEVATION = 2;\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-menu',\n  templateUrl: 'menu.html',\n  styleUrls: ['menu.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  animations: [\n    matMenuAnimations.transformMenu,\n    matMenuAnimations.fadeInItems\n  ],\n  exportAs: 'matMenu'\n})\nexport class MatMenu implements AfterContentInit, MatMenuPanel, OnDestroy {\n  private _keyManager: FocusKeyManager<MatMenuItem>;\n  private _xPosition: MenuPositionX = this._defaultOptions.xPosition;\n  private _yPosition: MenuPositionY = this._defaultOptions.yPosition;\n  private _previousElevation: string;\n\n  /** Subscription to tab events on the menu panel */\n  private _tabSubscription = Subscription.EMPTY;\n\n  /** Config object to be passed into the menu's ngClass */\n  _classList: {[key: string]: boolean} = {};\n\n  /** Current state of the panel animation. */\n  _panelAnimationState: 'void' | 'enter-start' | 'enter' = 'void';\n\n  /** Parent menu of the current menu panel. */\n  parentMenu: MatMenuPanel | undefined;\n\n  /** Layout direction of the menu. */\n  direction: Direction;\n\n  /** Position of the menu in the X axis. */\n  @Input()\n  get xPosition() { return this._xPosition; }\n  set xPosition(value: MenuPositionX) {\n    if (value !== 'before' && value !== 'after') {\n      throwMatMenuInvalidPositionX();\n    }\n    this._xPosition = value;\n    this.setPositionClasses();\n  }\n\n  /** Position of the menu in the Y axis. */\n  @Input()\n  get yPosition() { return this._yPosition; }\n  set yPosition(value: MenuPositionY) {\n    if (value !== 'above' && value !== 'below') {\n      throwMatMenuInvalidPositionY();\n    }\n    this._yPosition = value;\n    this.setPositionClasses();\n  }\n\n  /** @docs-private */\n  @ViewChild(TemplateRef) templateRef: TemplateRef<any>;\n\n  /** List of the items inside of a menu. */\n  @ContentChildren(MatMenuItem) items: QueryList<MatMenuItem>;\n\n  /** Whether the menu should overlap its trigger. */\n  @Input()\n  set overlapTrigger(value: boolean) {\n    this._overlapTrigger = coerceBooleanProperty(value);\n  }\n  get overlapTrigger(): boolean {\n    return this._overlapTrigger;\n  }\n  private _overlapTrigger: boolean = this._defaultOptions.overlapTrigger;\n\n  /**\n   * This method takes classes set on the host mat-menu element and applies them on the\n   * menu template that displays in the overlay container.  Otherwise, it's difficult\n   * to style the containing menu from outside the component.\n   * @param classes list of class names\n   */\n  @Input('class')\n  set panelClass(classes: string) {\n    if (classes && classes.length) {\n      this._classList = classes.split(' ').reduce((obj: any, className: string) => {\n        obj[className] = true;\n        return obj;\n      }, {});\n\n      this._elementRef.nativeElement.className = '';\n      this.setPositionClasses();\n    }\n  }\n\n  /**\n   * This method takes classes set on the host mat-menu element and applies them on the\n   * menu template that displays in the overlay container.  Otherwise, it's difficult\n   * to style the containing menu from outside the component.\n   * @deprecated Use `panelClass` instead.\n   */\n  @Input()\n  set classList(classes: string) { this.panelClass = classes; }\n  get classList(): string { return this.panelClass; }\n\n  /** Event emitted when the menu is closed. */\n  @Output() closed = new EventEmitter<void | 'click' | 'keydown'>();\n\n  /**\n   * Event emitted when the menu is closed.\n   * @deprecated Switch to `closed` instead\n   */\n  @Output() close = this.closed;\n\n  constructor(\n    private _elementRef: ElementRef,\n    private _ngZone: NgZone,\n    @Inject(MAT_MENU_DEFAULT_OPTIONS) private _defaultOptions: MatMenuDefaultOptions) { }\n\n  ngAfterContentInit() {\n    this._keyManager = new FocusKeyManager<MatMenuItem>(this.items).withWrap().withTypeAhead();\n    this._tabSubscription = this._keyManager.tabOut.subscribe(() => this.close.emit('keydown'));\n  }\n\n  ngOnDestroy() {\n    this._tabSubscription.unsubscribe();\n    this.closed.complete();\n  }\n\n  /** Stream that emits whenever the hovered menu item changes. */\n  _hovered(): Observable<MatMenuItem> {\n    if (this.items) {\n      return this.items.changes.pipe(\n        startWith(this.items),\n        switchMap(items => merge(...items.map(item => item._hovered)))\n      );\n    }\n\n    return this._ngZone.onStable\n      .asObservable()\n      .pipe(take(1), switchMap(() => this._hovered()));\n  }\n\n  /** Handle a keyboard event from the menu, delegating to the appropriate action. */\n  _handleKeydown(event: KeyboardEvent) {\n    switch (event.keyCode) {\n      case ESCAPE:\n        this.closed.emit('keydown');\n        event.stopPropagation();\n      break;\n      case LEFT_ARROW:\n        if (this.parentMenu && this.direction === 'ltr') {\n          this.closed.emit('keydown');\n        }\n      break;\n      case RIGHT_ARROW:\n        if (this.parentMenu && this.direction === 'rtl') {\n          this.closed.emit('keydown');\n        }\n      break;\n      default:\n        this._keyManager.onKeydown(event);\n    }\n  }\n\n  /**\n   * Focus the first item in the menu. This method is used by the menu trigger\n   * to focus the first item when the menu is opened by the ENTER key.\n   */\n  focusFirstItem() {\n    this._keyManager.setFirstItemActive();\n  }\n\n  /**\n   * Resets the active item in the menu. This is used when the menu is opened by mouse,\n   * allowing the user to start from the first option when pressing the down arrow.\n   */\n  resetActiveItem() {\n    this._keyManager.setActiveItem(-1);\n  }\n\n  /**\n   * It's necessary to set position-based classes to ensure the menu panel animation\n   * folds out from the correct direction.\n   */\n  setPositionClasses(posX: MenuPositionX = this.xPosition, posY: MenuPositionY = this.yPosition) {\n    this._classList['mat-menu-before'] = posX === 'before';\n    this._classList['mat-menu-after'] = posX === 'after';\n    this._classList['mat-menu-above'] = posY === 'above';\n    this._classList['mat-menu-below'] = posY === 'below';\n  }\n\n  /**\n   * Sets the menu panel elevation.\n   * @param depth Number of parent menus that come before the menu.\n   */\n  setElevation(depth: number): void {\n    // The elevation starts at the base and increases by one for each level.\n    const newElevation = `mat-elevation-z${MAT_MENU_BASE_ELEVATION + depth}`;\n    const customElevation = Object.keys(this._classList).find(c => c.startsWith('mat-elevation-z'));\n\n    if (!customElevation || customElevation === this._previousElevation) {\n      if (this._previousElevation) {\n        this._classList[this._previousElevation] = false;\n      }\n\n      this._classList[newElevation] = true;\n      this._previousElevation = newElevation;\n    }\n  }\n\n  /** Starts the enter animation. */\n  _startAnimation() {\n    this._panelAnimationState = 'enter-start';\n  }\n\n  /** Resets the panel animation to its initial state. */\n  _resetAnimation() {\n    this._panelAnimationState = 'void';\n  }\n\n  /** Callback that is invoked when the panel animation completes. */\n  _onAnimationDone(event: AnimationEvent) {\n    // After the initial expansion is done, trigger the second phase of the enter animation.\n    if (event.toState === 'enter-start') {\n      this._panelAnimationState = 'enter';\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {isFakeMousedownFromScreenReader} from '@angular/cdk/a11y';\nimport {Direction, Directionality} from '@angular/cdk/bidi';\nimport {LEFT_ARROW, RIGHT_ARROW} from '@angular/cdk/keycodes';\nimport {\n  ConnectedPositionStrategy,\n  HorizontalConnectionPos,\n  Overlay,\n  OverlayRef,\n  OverlayConfig,\n  RepositionScrollStrategy,\n  ScrollStrategy,\n  VerticalConnectionPos,\n} from '@angular/cdk/overlay';\nimport {TemplatePortal} from '@angular/cdk/portal';\nimport {filter} from 'rxjs/operators/filter';\nimport {\n  AfterContentInit,\n  Directive,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  InjectionToken,\n  Input,\n  OnDestroy,\n  Optional,\n  Output,\n  Self,\n  ViewContainerRef,\n} from '@angular/core';\nimport {merge} from 'rxjs/observable/merge';\nimport {of as observableOf} from 'rxjs/observable/of';\nimport {Subscription} from 'rxjs/Subscription';\nimport {MatMenu} from './menu-directive';\nimport {throwMatMenuMissingError} from './menu-errors';\nimport {MatMenuItem} from './menu-item';\nimport {MatMenuPanel} from './menu-panel';\nimport {MenuPositionX, MenuPositionY} from './menu-positions';\n\n/** Injection token that determines the scroll handling while the menu is open. */\nexport const MAT_MENU_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mat-menu-scroll-strategy');\n\n/** @docs-private */\nexport function MAT_MENU_SCROLL_STRATEGY_PROVIDER_FACTORY(overlay: Overlay):\n    () => RepositionScrollStrategy {\n  return () => overlay.scrollStrategies.reposition();\n}\n\n/** @docs-private */\nexport const MAT_MENU_SCROLL_STRATEGY_PROVIDER = {\n  provide: MAT_MENU_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_MENU_SCROLL_STRATEGY_PROVIDER_FACTORY,\n};\n\n\n// TODO(andrewseguin): Remove the kebab versions in favor of camelCased attribute selectors\n\n/** Default top padding of the menu panel. */\nexport const MENU_PANEL_TOP_PADDING = 8;\n\n/**\n * This directive is intended to be used in conjunction with an mat-menu tag.  It is\n * responsible for toggling the display of the provided menu instance.\n */\n@Directive({\n  selector: `[mat-menu-trigger-for], [matMenuTriggerFor]`,\n  host: {\n    'aria-haspopup': 'true',\n    '(mousedown)': '_handleMousedown($event)',\n    '(keydown)': '_handleKeydown($event)',\n    '(click)': '_handleClick($event)',\n  },\n  exportAs: 'matMenuTrigger'\n})\nexport class MatMenuTrigger implements AfterContentInit, OnDestroy {\n  private _portal: TemplatePortal<any>;\n  private _overlayRef: OverlayRef | null = null;\n  private _menuOpen: boolean = false;\n  private _closeSubscription = Subscription.EMPTY;\n  private _positionSubscription = Subscription.EMPTY;\n  private _hoverSubscription = Subscription.EMPTY;\n\n  // Tracking input type is necessary so it's possible to only auto-focus\n  // the first item of the list when the menu is opened via the keyboard\n  private _openedByMouse: boolean = false;\n\n  /** @deprecated */\n  @Input('mat-menu-trigger-for')\n  get _deprecatedMatMenuTriggerFor(): MatMenuPanel {\n    return this.menu;\n  }\n\n  set _deprecatedMatMenuTriggerFor(v: MatMenuPanel) {\n    this.menu = v;\n  }\n\n  /** References the menu instance that the trigger is associated with. */\n  @Input('matMenuTriggerFor') menu: MatMenuPanel;\n\n  /** Event emitted when the associated menu is opened. */\n  @Output() menuOpened = new EventEmitter<void>();\n\n  /**\n   * Event emitted when the associated menu is opened.\n   * @deprecated Switch to `menuOpened` instead\n   */\n  @Output() onMenuOpen = this.menuOpened;\n\n  /** Event emitted when the associated menu is closed. */\n  @Output() menuClosed = new EventEmitter<void>();\n\n  /**\n   * Event emitted when the associated menu is closed.\n   * @deprecated Switch to `menuClosed` instead\n   */\n  @Output() onMenuClose = this.menuClosed;\n\n  constructor(private _overlay: Overlay,\n              private _element: ElementRef,\n              private _viewContainerRef: ViewContainerRef,\n              @Inject(MAT_MENU_SCROLL_STRATEGY) private _scrollStrategy,\n              @Optional() private _parentMenu: MatMenu,\n              @Optional() @Self() private _menuItemInstance: MatMenuItem,\n              @Optional() private _dir: Directionality) {\n\n    if (_menuItemInstance) {\n      _menuItemInstance._triggersSubmenu = this.triggersSubmenu();\n    }\n  }\n\n  ngAfterContentInit() {\n    this._checkMenu();\n\n    this.menu.close.subscribe(reason => {\n      this._destroyMenu();\n\n      // If a click closed the menu, we should close the entire chain of nested menus.\n      if (reason === 'click' && this._parentMenu) {\n        this._parentMenu.closed.emit(reason);\n      }\n    });\n\n    if (this.triggersSubmenu()) {\n      // Subscribe to changes in the hovered item in order to toggle the panel.\n      this._hoverSubscription = this._parentMenu._hovered()\n          .pipe(filter(active => active === this._menuItemInstance))\n          .subscribe(() => {\n            this._openedByMouse = true;\n            this.openMenu();\n          });\n    }\n  }\n\n  ngOnDestroy() {\n    if (this._overlayRef) {\n      this._overlayRef.dispose();\n      this._overlayRef = null;\n    }\n\n    this._cleanUpSubscriptions();\n  }\n\n  /** Whether the menu is open. */\n  get menuOpen(): boolean {\n    return this._menuOpen;\n  }\n\n  /** The text direction of the containing app. */\n  get dir(): Direction {\n    return this._dir && this._dir.value === 'rtl' ? 'rtl' : 'ltr';\n  }\n\n  /** Whether the menu triggers a sub-menu or a top-level one. */\n  triggersSubmenu(): boolean {\n    return !!(this._menuItemInstance && this._parentMenu);\n  }\n\n  /** Toggles the menu between the open and closed states. */\n  toggleMenu(): void {\n    return this._menuOpen ? this.closeMenu() : this.openMenu();\n  }\n\n  /** Opens the menu. */\n  openMenu(): void {\n    if (!this._menuOpen) {\n      this._createOverlay().attach(this._portal);\n      this._closeSubscription = this._menuClosingActions().subscribe(() => this.closeMenu());\n      this._initMenu();\n\n      if (this.menu instanceof MatMenu) {\n        this.menu._startAnimation();\n      }\n    }\n  }\n\n  /** Closes the menu. */\n  closeMenu(): void {\n    this.menu.close.emit();\n  }\n\n  /** Focuses the menu trigger. */\n  focus() {\n    this._element.nativeElement.focus();\n  }\n\n  /** Closes the menu and does the necessary cleanup. */\n  private _destroyMenu() {\n    if (this._overlayRef && this.menuOpen) {\n      this._resetMenu();\n      this._closeSubscription.unsubscribe();\n      this._overlayRef.detach();\n\n      if (this.menu instanceof MatMenu) {\n        this.menu._resetAnimation();\n      }\n    }\n  }\n\n  /**\n   * This method sets the menu state to open and focuses the first item if\n   * the menu was opened via the keyboard.\n   */\n  private _initMenu(): void {\n    this.menu.parentMenu = this.triggersSubmenu() ? this._parentMenu : undefined;\n    this.menu.direction = this.dir;\n    this._setMenuElevation();\n    this._setIsMenuOpen(true);\n\n    // If the menu was opened by mouse, we focus the root node, which allows for the keyboard\n    // interactions to work. Otherwise, if the menu was opened by keyboard, we focus the first item.\n    if (this._openedByMouse) {\n      let rootNode = this._overlayRef!.overlayElement.firstElementChild as HTMLElement;\n\n      if (rootNode) {\n        this.menu.resetActiveItem();\n        rootNode.focus();\n      }\n    } else {\n      this.menu.focusFirstItem();\n    }\n  }\n\n  /** Updates the menu elevation based on the amount of parent menus that it has. */\n  private _setMenuElevation(): void {\n    if (this.menu.setElevation) {\n      let depth = 0;\n      let parentMenu = this.menu.parentMenu;\n\n      while (parentMenu) {\n        depth++;\n        parentMenu = parentMenu.parentMenu;\n      }\n\n      this.menu.setElevation(depth);\n    }\n  }\n\n  /**\n   * This method resets the menu when it's closed, most importantly restoring\n   * focus to the menu trigger if the menu was opened via the keyboard.\n   */\n  private _resetMenu(): void {\n    this._setIsMenuOpen(false);\n\n    // We should reset focus if the user is navigating using a keyboard or\n    // if we have a top-level trigger which might cause focus to be lost\n    // when clicking on the backdrop.\n    if (!this._openedByMouse || !this.triggersSubmenu()) {\n      this.focus();\n    }\n\n    this._openedByMouse = false;\n  }\n\n  // set state rather than toggle to support triggers sharing a menu\n  private _setIsMenuOpen(isOpen: boolean): void {\n    this._menuOpen = isOpen;\n    this._menuOpen ? this.menuOpened.emit() : this.menuClosed.emit();\n\n    if (this.triggersSubmenu()) {\n      this._menuItemInstance._highlighted = isOpen;\n    }\n  }\n\n  /**\n   * This method checks that a valid instance of MatMenu has been passed into\n   * matMenuTriggerFor. If not, an exception is thrown.\n   */\n  private _checkMenu() {\n    if (!this.menu) {\n      throwMatMenuMissingError();\n    }\n  }\n\n  /**\n   * This method creates the overlay from the provided menu's template and saves its\n   * OverlayRef so that it can be attached to the DOM when openMenu is called.\n   */\n  private _createOverlay(): OverlayRef {\n    if (!this._overlayRef) {\n      this._portal = new TemplatePortal(this.menu.templateRef, this._viewContainerRef);\n      const config = this._getOverlayConfig();\n      this._subscribeToPositions(config.positionStrategy as ConnectedPositionStrategy);\n      this._overlayRef = this._overlay.create(config);\n    }\n\n    return this._overlayRef;\n  }\n\n  /**\n   * This method builds the configuration object needed to create the overlay, the OverlayState.\n   * @returns OverlayConfig\n   */\n  private _getOverlayConfig(): OverlayConfig {\n    return new OverlayConfig({\n      positionStrategy: this._getPosition(),\n      hasBackdrop: !this.triggersSubmenu(),\n      backdropClass: 'cdk-overlay-transparent-backdrop',\n      direction: this.dir,\n      scrollStrategy: this._scrollStrategy()\n    });\n  }\n\n  /**\n   * Listens to changes in the position of the overlay and sets the correct classes\n   * on the menu based on the new position. This ensures the animation origin is always\n   * correct, even if a fallback position is used for the overlay.\n   */\n  private _subscribeToPositions(position: ConnectedPositionStrategy): void {\n    this._positionSubscription = position.onPositionChange.subscribe(change => {\n      const posX: MenuPositionX = change.connectionPair.overlayX === 'start' ? 'after' : 'before';\n      const posY: MenuPositionY = change.connectionPair.overlayY === 'top' ? 'below' : 'above';\n\n      this.menu.setPositionClasses(posX, posY);\n    });\n  }\n\n  /**\n   * This method builds the position strategy for the overlay, so the menu is properly connected\n   * to the trigger.\n   * @returns ConnectedPositionStrategy\n   */\n  private _getPosition(): ConnectedPositionStrategy {\n    let [originX, originFallbackX]: HorizontalConnectionPos[] =\n        this.menu.xPosition === 'before' ? ['end', 'start'] : ['start', 'end'];\n\n    let [overlayY, overlayFallbackY]: VerticalConnectionPos[] =\n        this.menu.yPosition === 'above' ? ['bottom', 'top'] : ['top', 'bottom'];\n\n    let [originY, originFallbackY] = [overlayY, overlayFallbackY];\n    let [overlayX, overlayFallbackX] = [originX, originFallbackX];\n    let offsetY = 0;\n\n    if (this.triggersSubmenu()) {\n      // When the menu is a sub-menu, it should always align itself\n      // to the edges of the trigger, instead of overlapping it.\n      overlayFallbackX = originX = this.menu.xPosition === 'before' ? 'start' : 'end';\n      originFallbackX = overlayX = originX === 'end' ? 'start' : 'end';\n      offsetY = overlayY === 'bottom' ? MENU_PANEL_TOP_PADDING : -MENU_PANEL_TOP_PADDING;\n    } else if (!this.menu.overlapTrigger) {\n      originY = overlayY === 'top' ? 'bottom' : 'top';\n      originFallbackY = overlayFallbackY === 'top' ? 'bottom' : 'top';\n    }\n\n    return this._overlay.position()\n        .connectedTo(this._element, {originX, originY}, {overlayX, overlayY})\n        .withDirection(this.dir)\n        .withOffsetY(offsetY)\n        .withFallbackPosition(\n            {originX: originFallbackX, originY},\n            {overlayX: overlayFallbackX, overlayY})\n        .withFallbackPosition(\n            {originX, originY: originFallbackY},\n            {overlayX, overlayY: overlayFallbackY},\n            undefined, -offsetY)\n        .withFallbackPosition(\n            {originX: originFallbackX, originY: originFallbackY},\n            {overlayX: overlayFallbackX, overlayY: overlayFallbackY},\n            undefined, -offsetY);\n  }\n\n  /** Cleans up the active subscriptions. */\n  private _cleanUpSubscriptions(): void {\n    this._closeSubscription.unsubscribe();\n    this._positionSubscription.unsubscribe();\n    this._hoverSubscription.unsubscribe();\n  }\n\n  /** Returns a stream that emits whenever an action that should close the menu occurs. */\n  private _menuClosingActions() {\n    const backdrop = this._overlayRef!.backdropClick();\n    const detachments = this._overlayRef!.detachments();\n    const parentClose = this._parentMenu ? this._parentMenu.close : observableOf();\n    const hover = this._parentMenu ? this._parentMenu._hovered().pipe(\n      filter(active => active !== this._menuItemInstance),\n      filter(() => this._menuOpen)\n    ) : observableOf();\n\n    return merge(backdrop, parentClose, hover, detachments);\n  }\n\n  /** Handles mouse presses on the trigger. */\n  _handleMousedown(event: MouseEvent): void {\n    if (!isFakeMousedownFromScreenReader(event)) {\n      this._openedByMouse = true;\n\n      // Since clicking on the trigger won't close the menu if it opens a sub-menu,\n      // we should prevent focus from moving onto it via click to avoid the\n      // highlight from lingering on the menu item.\n      if (this.triggersSubmenu()) {\n        event.preventDefault();\n      }\n    }\n  }\n\n  /** Handles key presses on the trigger. */\n  _handleKeydown(event: KeyboardEvent): void {\n    const keyCode = event.keyCode;\n\n    if (this.triggersSubmenu() && (\n            (keyCode === RIGHT_ARROW && this.dir === 'ltr') ||\n            (keyCode === LEFT_ARROW && this.dir === 'rtl'))) {\n      this.openMenu();\n    }\n  }\n\n  /** Handles click events on the trigger. */\n  _handleClick(event: MouseEvent): void {\n    if (this.triggersSubmenu()) {\n      // Stop event propagation to avoid closing the parent menu.\n      event.stopPropagation();\n      this.openMenu();\n    } else {\n      this.toggleMenu();\n    }\n  }\n\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {MatCommonModule} from '@angular/material/core';\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {MatMenu, MAT_MENU_DEFAULT_OPTIONS} from './menu-directive';\nimport {MatMenuItem} from './menu-item';\nimport {MatMenuTrigger, MAT_MENU_SCROLL_STRATEGY_PROVIDER} from './menu-trigger';\nimport {MatRippleModule} from '@angular/material/core';\n\n\n@NgModule({\n  imports: [\n    OverlayModule,\n    CommonModule,\n    MatRippleModule,\n    MatCommonModule,\n  ],\n  exports: [MatMenu, MatMenuItem, MatMenuTrigger, MatCommonModule],\n  declarations: [MatMenu, MatMenuItem, MatMenuTrigger],\n  providers: [\n    MAT_MENU_SCROLL_STRATEGY_PROVIDER,\n    {\n      provide: MAT_MENU_DEFAULT_OPTIONS,\n      useValue: {\n        overlapTrigger: true,\n        xPosition: 'after',\n        yPosition: 'below',\n      },\n    }\n  ],\n})\nexport class MatMenuModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  animate,\n  AnimationTriggerMetadata,\n  state,\n  style,\n  transition,\n  trigger,\n} from '@angular/animations';\n\n/**\n * The following are all the animations for the mat-select component, with each\n * const containing the metadata for one animation.\n *\n * The values below match the implementation of the AngularJS Material mat-select animation.\n */\nexport const matSelectAnimations: {\n  readonly transformPanel: AnimationTriggerMetadata;\n  readonly fadeInContent: AnimationTriggerMetadata;\n} = {\n  /**\n   * This animation transforms the select's overlay panel on and off the page.\n   *\n   * When the panel is attached to the DOM, it expands its width by the amount of padding, scales it\n   * up to 100% on the Y axis, fades in its border, and translates slightly up and to the\n   * side to ensure the option text correctly overlaps the trigger text.\n   *\n   * When the panel is removed from the DOM, it simply fades out linearly.\n   */\n  transformPanel: trigger('transformPanel', [\n    state('showing', style({\n      opacity: 1,\n      minWidth: 'calc(100% + 32px)', // 32px = 2 * 16px padding\n      transform: 'scaleY(1)'\n    })),\n    state('showing-multiple', style({\n      opacity: 1,\n      minWidth: 'calc(100% + 64px)', // 64px = 48px padding on the left + 16px padding on the right\n      transform: 'scaleY(1)'\n    })),\n    transition('void => *', [\n      style({\n        opacity: 0,\n        minWidth: '100%',\n        transform: 'scaleY(0)'\n      }),\n      animate('150ms cubic-bezier(0.25, 0.8, 0.25, 1)')\n    ]),\n    transition('* => void', [\n      animate('250ms 100ms linear', style({opacity: 0}))\n    ])\n  ]),\n\n  /**\n   * This animation fades in the background color and text content of the\n   * select's options. It is time delayed to occur 100ms after the overlay\n   * panel has transformed in.\n   */\n  fadeInContent: trigger('fadeInContent', [\n    state('showing', style({opacity: 1})),\n    transition('void => showing', [\n      style({opacity: 0}),\n      animate('150ms 100ms cubic-bezier(0.55, 0, 0.55, 0.2)')\n    ])\n  ])\n};\n\n\n/** @deprecated */\nexport const transformPanel = matSelectAnimations.transformPanel;\n\n/** @deprecated */\nexport const fadeInContent = matSelectAnimations.fadeInContent;\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {MatSelect, MatSelectTrigger, MAT_SELECT_SCROLL_STRATEGY_PROVIDER} from './select';\nimport {MatCommonModule, MatOptionModule} from '@angular/material/core';\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {MatFormFieldModule} from '@angular/material/form-field';\nimport {ErrorStateMatcher} from '@angular/material/core';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    OverlayModule,\n    MatOptionModule,\n    MatCommonModule,\n  ],\n  exports: [MatFormFieldModule, MatSelect, MatSelectTrigger, MatOptionModule, MatCommonModule],\n  declarations: [MatSelect, MatSelectTrigger],\n  providers: [MAT_SELECT_SCROLL_STRATEGY_PROVIDER, ErrorStateMatcher]\n})\nexport class MatSelectModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/** Animations used by MatTooltip. */\nexport const matTooltipAnimations: {\n  readonly tooltipState: AnimationTriggerMetadata;\n} = {\n  /** Animation that transitions a tooltip in and out. */\n  tooltipState: trigger('state', [\n    state('initial, void, hidden', style({transform: 'scale(0)'})),\n    state('visible', style({transform: 'scale(1)'})),\n    transition('* => visible', animate('150ms cubic-bezier(0.0, 0.0, 0.2, 1)')),\n    transition('* => hidden', animate('150ms cubic-bezier(0.4, 0.0, 1, 1)')),\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  Component,\n  ContentChild,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  Optional,\n  QueryList,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {CanDisableRipple, MatLine, MatLineSetter, mixinDisableRipple} from '@angular/material/core';\n\n// Boilerplate for applying mixins to MatList.\n/** @docs-private */\nexport class MatListBase {}\nexport const _MatListMixinBase = mixinDisableRipple(MatListBase);\n\n// Boilerplate for applying mixins to MatListItem.\n/** @docs-private */\nexport class MatListItemBase {}\nexport const _MatListItemMixinBase = mixinDisableRipple(MatListItemBase);\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-nav-list',\n  exportAs: 'matNavList',\n  host: {\n    'role': 'navigation',\n    'class': 'mat-nav-list'\n  },\n  templateUrl: 'list.html',\n  styleUrls: ['list.css'],\n  inputs: ['disableRipple'],\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatNavList extends _MatListMixinBase implements CanDisableRipple {}\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-list',\n  exportAs: 'matList',\n  templateUrl: 'list.html',\n  host: {'class': 'mat-list'},\n  styleUrls: ['list.css'],\n  inputs: ['disableRipple'],\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatList extends _MatListMixinBase implements CanDisableRipple {}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-list-avatar], [matListAvatar]',\n  host: {'class': 'mat-list-avatar'}\n})\nexport class MatListAvatarCssMatStyler {}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-list-icon], [matListIcon]',\n  host: {'class': 'mat-list-icon'}\n})\nexport class MatListIconCssMatStyler {}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-subheader], [matSubheader]',\n  host: {'class': 'mat-subheader'}\n})\nexport class MatListSubheaderCssMatStyler {}\n\n/** An item within a Material Design list. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-list-item, a[mat-list-item]',\n  exportAs: 'matListItem',\n  host: {\n    'class': 'mat-list-item',\n    '(focus)': '_handleFocus()',\n    '(blur)': '_handleBlur()',\n  },\n  inputs: ['disableRipple'],\n  templateUrl: 'list-item.html',\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatListItem extends _MatListItemMixinBase implements AfterContentInit,\n    CanDisableRipple {\n  private _lineSetter: MatLineSetter;\n  private _isNavList: boolean = false;\n\n  @ContentChildren(MatLine) _lines: QueryList<MatLine>;\n\n  @ContentChild(MatListAvatarCssMatStyler)\n  set _hasAvatar(avatar: MatListAvatarCssMatStyler) {\n    if (avatar != null) {\n      this._element.nativeElement.classList.add('mat-list-item-avatar');\n    } else {\n      this._element.nativeElement.classList.remove('mat-list-item-avatar');\n    }\n  }\n\n  constructor(private _element: ElementRef,\n              @Optional() private _navList: MatNavList) {\n    super();\n    this._isNavList = !!_navList;\n  }\n\n  ngAfterContentInit() {\n    this._lineSetter = new MatLineSetter(this._lines, this._element);\n  }\n\n  /** Whether this list item should show a ripple effect when clicked.  */\n  _isRippleDisabled() {\n    return !this._isNavList || this.disableRipple || this._navList.disableRipple;\n  }\n\n  _handleFocus() {\n    this._element.nativeElement.classList.add('mat-list-item-focus');\n  }\n\n  _handleBlur() {\n    this._element.nativeElement.classList.remove('mat-list-item-focus');\n  }\n\n  /** Retrieves the DOM element of the component host. */\n  _getHostElement(): HTMLElement {\n    return this._element.nativeElement;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusableOption, FocusKeyManager} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {SelectionModel} from '@angular/cdk/collections';\nimport {SPACE, ENTER, HOME, END} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Output,\n  QueryList,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {\n  CanDisable,\n  CanDisableRipple,\n  HasTabIndex,\n  MatLine,\n  MatLineSetter,\n  mixinDisabled,\n  mixinDisableRipple,\n  mixinTabIndex,\n} from '@angular/material/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\n\n\n/** @docs-private */\nexport class MatSelectionListBase {}\nexport const _MatSelectionListMixinBase =\n  mixinTabIndex(mixinDisableRipple(mixinDisabled(MatSelectionListBase)));\n\n/** @docs-private */\nexport class MatListOptionBase {}\nexport const _MatListOptionMixinBase = mixinDisableRipple(MatListOptionBase);\n\n/** @docs-private */\nexport const MAT_SELECTION_LIST_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatSelectionList),\n  multi: true\n};\n\n/**\n * Change event object emitted by MatListOption whenever the selected state changes.\n * @deprecated Use the `MatSelectionListChange` event on the selection list instead.\n */\nexport class MatListOptionChange {\n  constructor(\n    /** Reference to the list option that changed. */\n    public source: MatListOption,\n    /** The new selected state of the option. */\n    public selected: boolean) {}\n}\n\n/** Change event that is being fired whenever the selected state of an option changes. */\nexport class MatSelectionListChange {\n  constructor(\n    /** Reference to the selection list that emitted the event. */\n    public source: MatSelectionList,\n    /** Reference to the option that has been changed. */\n    public option: MatListOption) {}\n}\n\n/**\n * Component for list-options of selection-list. Each list-option can automatically\n * generate a checkbox and can put current item into the selectionModel of selection-list\n * if the current item is selected.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-list-option',\n  exportAs: 'matListOption',\n  inputs: ['disableRipple'],\n  host: {\n    'role': 'option',\n    'class': 'mat-list-item mat-list-option',\n    '(focus)': '_handleFocus()',\n    '(blur)': '_handleBlur()',\n    '(click)': '_handleClick()',\n    'tabindex': '-1',\n    '[class.mat-list-item-disabled]': 'disabled',\n    '[class.mat-list-item-focus]': '_hasFocus',\n    '[attr.aria-selected]': 'selected.toString()',\n    '[attr.aria-disabled]': 'disabled.toString()',\n  },\n  templateUrl: 'list-option.html',\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatListOption extends _MatListOptionMixinBase\n    implements AfterContentInit, OnDestroy, OnInit, FocusableOption, CanDisableRipple {\n\n  private _lineSetter: MatLineSetter;\n  private _selected: boolean = false;\n  private _disabled: boolean = false;\n\n  /** Whether the option has focus. */\n  _hasFocus: boolean = false;\n\n  @ContentChildren(MatLine) _lines: QueryList<MatLine>;\n\n  /** Whether the label should appear before or after the checkbox. Defaults to 'after' */\n  @Input() checkboxPosition: 'before' | 'after' = 'after';\n\n  /** Value of the option */\n  @Input() value: any;\n\n  /** Whether the option is disabled. */\n  @Input()\n  get disabled() { return (this.selectionList && this.selectionList.disabled) || this._disabled; }\n  set disabled(value: any) {\n    const newValue = coerceBooleanProperty(value);\n\n    if (newValue !== this._disabled) {\n      this._disabled = newValue;\n      this._changeDetector.markForCheck();\n    }\n  }\n\n  /** Whether the option is selected. */\n  @Input()\n  get selected(): boolean { return this.selectionList.selectedOptions.isSelected(this); }\n  set selected(value: boolean) {\n    const isSelected = coerceBooleanProperty(value);\n\n    if (isSelected !== this._selected) {\n      this._setSelected(isSelected);\n      this.selectionList._reportValueChange();\n    }\n  }\n\n  /**\n   * Emits a change event whenever the selected state of an option changes.\n   * @deprecated Use the `selectionChange` event on the `<mat-selection-list>` instead.\n   */\n  @Output() selectionChange: EventEmitter<MatListOptionChange> =\n    new EventEmitter<MatListOptionChange>();\n\n  constructor(private _element: ElementRef,\n              private _changeDetector: ChangeDetectorRef,\n              @Optional() @Inject(forwardRef(() => MatSelectionList))\n              public selectionList: MatSelectionList) {\n    super();\n  }\n\n  ngOnInit() {\n    if (this._selected) {\n      // List options that are selected at initialization can't be reported properly to the form\n      // control. This is because it takes some time until the selection-list knows about all\n      // available options. Also it can happen that the ControlValueAccessor has an initial value\n      // that should be used instead. Deferring the value change report to the next tick ensures\n      // that the form control value is not being overwritten.\n      Promise.resolve().then(() => this.selected = true);\n    }\n  }\n\n  ngAfterContentInit() {\n    this._lineSetter = new MatLineSetter(this._lines, this._element);\n  }\n\n  ngOnDestroy(): void {\n    this.selectionList._removeOptionFromList(this);\n  }\n\n  /** Toggles the selection state of the option. */\n  toggle(): void {\n    this.selected = !this.selected;\n  }\n\n  /** Allows for programmatic focusing of the option. */\n  focus(): void {\n    this._element.nativeElement.focus();\n  }\n\n  /** Whether this list item should show a ripple effect when clicked.  */\n  _isRippleDisabled() {\n    return this.disabled || this.disableRipple || this.selectionList.disableRipple;\n  }\n\n  _handleClick() {\n    if (!this.disabled) {\n      this.toggle();\n\n      // Emit a change event if the selected state of the option changed through user interaction.\n      this.selectionList._emitChangeEvent(this);\n\n      // TODO: the `selectionChange` event on the option is deprecated. Remove that in the future.\n      this._emitDeprecatedChangeEvent();\n    }\n  }\n\n  _handleFocus() {\n    this._hasFocus = true;\n    this.selectionList._setFocusedOption(this);\n  }\n\n  _handleBlur() {\n    this._hasFocus = false;\n    this.selectionList.onTouched();\n  }\n\n  /** Retrieves the DOM element of the component host. */\n  _getHostElement(): HTMLElement {\n    return this._element.nativeElement;\n  }\n\n  /** Sets the selected state of the option. */\n  _setSelected(selected: boolean) {\n    if (selected === this._selected) {\n      return;\n    }\n\n    this._selected = selected;\n\n    if (selected) {\n      this.selectionList.selectedOptions.select(this);\n    } else {\n      this.selectionList.selectedOptions.deselect(this);\n    }\n\n    this._changeDetector.markForCheck();\n  }\n\n  /** Emits a selectionChange event for this option. */\n  _emitDeprecatedChangeEvent() {\n    // TODO: the `selectionChange` event on the option is deprecated. Remove that in the future.\n    this.selectionChange.emit(new MatListOptionChange(this, this.selected));\n  }\n}\n\n\n/**\n * Material Design list component where each item is a selectable option. Behaves as a listbox.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-selection-list',\n  exportAs: 'matSelectionList',\n  inputs: ['disabled', 'disableRipple', 'tabIndex'],\n  host: {\n    'role': 'listbox',\n    '[tabIndex]': 'tabIndex',\n    'class': 'mat-selection-list',\n    '(focus)': 'focus()',\n    '(blur)': 'onTouched()',\n    '(keydown)': '_keydown($event)',\n    '[attr.aria-disabled]': 'disabled.toString()'},\n  template: '<ng-content></ng-content>',\n  styleUrls: ['list.css'],\n  encapsulation: ViewEncapsulation.None,\n  providers: [MAT_SELECTION_LIST_VALUE_ACCESSOR],\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class MatSelectionList extends _MatSelectionListMixinBase implements FocusableOption,\n    CanDisable, CanDisableRipple, HasTabIndex, AfterContentInit, ControlValueAccessor {\n\n  /** The FocusKeyManager which handles focus. */\n  _keyManager: FocusKeyManager<MatListOption>;\n\n  /** The option components contained within this selection-list. */\n  @ContentChildren(MatListOption) options: QueryList<MatListOption>;\n\n  /** Emits a change event whenever the selected state of an option changes. */\n  @Output() selectionChange: EventEmitter<MatSelectionListChange> =\n      new EventEmitter<MatSelectionListChange>();\n\n  /** The currently selected options. */\n  selectedOptions: SelectionModel<MatListOption> = new SelectionModel<MatListOption>(true);\n\n  /** View to model callback that should be called whenever the selected options change. */\n  private _onChange: (value: any) => void = (_: any) => {};\n\n  /** Used for storing the values that were assigned before the options were initialized. */\n  private _tempValues: string[]|null;\n\n  /** View to model callback that should be called if the list or its options lost focus. */\n  onTouched: () => void = () => {};\n\n  constructor(private _element: ElementRef, @Attribute('tabindex') tabIndex: string) {\n    super();\n\n    this.tabIndex = parseInt(tabIndex) || 0;\n  }\n\n  ngAfterContentInit(): void {\n    this._keyManager = new FocusKeyManager<MatListOption>(this.options).withWrap();\n\n    if (this._tempValues) {\n      this._setOptionsFromValues(this._tempValues);\n      this._tempValues = null;\n    }\n  }\n\n  /** Focus the selection-list. */\n  focus() {\n    this._element.nativeElement.focus();\n  }\n\n  /** Selects all of the options. */\n  selectAll() {\n    this.options.forEach(option => option._setSelected(true));\n    this._reportValueChange();\n  }\n\n  /** Deselects all of the options. */\n  deselectAll() {\n    this.options.forEach(option => option._setSelected(false));\n    this._reportValueChange();\n  }\n\n  /** Sets the focused option of the selection-list. */\n  _setFocusedOption(option: MatListOption) {\n    this._keyManager.updateActiveItemIndex(this._getOptionIndex(option));\n  }\n\n  /** Removes an option from the selection list and updates the active item. */\n  _removeOptionFromList(option: MatListOption) {\n    if (option._hasFocus) {\n      const optionIndex = this._getOptionIndex(option);\n\n      // Check whether the option is the last item\n      if (optionIndex > 0) {\n        this._keyManager.setPreviousItemActive();\n      } else if (optionIndex === 0 && this.options.length > 1) {\n        this._keyManager.setNextItemActive();\n      }\n    }\n  }\n\n  /** Passes relevant key presses to our key manager. */\n  _keydown(event: KeyboardEvent) {\n    switch (event.keyCode) {\n      case SPACE:\n      case ENTER:\n        this._toggleSelectOnFocusedOption();\n        // Always prevent space from scrolling the page since the list has focus\n        event.preventDefault();\n        break;\n      case HOME:\n      case END:\n        event.keyCode === HOME ? this._keyManager.setFirstItemActive() :\n                                 this._keyManager.setLastItemActive();\n        event.preventDefault();\n        break;\n      default:\n        this._keyManager.onKeydown(event);\n    }\n  }\n\n  /** Reports a value change to the ControlValueAccessor */\n  _reportValueChange() {\n    if (this.options) {\n      this._onChange(this._getSelectedOptionValues());\n    }\n  }\n\n  /** Emits a change event if the selected state of an option changed. */\n  _emitChangeEvent(option: MatListOption) {\n    this.selectionChange.emit(new MatSelectionListChange(this, option));\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  writeValue(values: string[]): void {\n    if (this.options) {\n      this._setOptionsFromValues(values || []);\n    } else {\n      this._tempValues = values;\n    }\n  }\n\n  /** Implemented as a part of ControlValueAccessor. */\n  setDisabledState(isDisabled: boolean): void {\n    if (this.options) {\n      this.options.forEach(option => option.disabled = isDisabled);\n    }\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  registerOnChange(fn: (value: any) => void): void {\n    this._onChange = fn;\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  registerOnTouched(fn: () => void): void {\n    this.onTouched = fn;\n  }\n\n  /** Returns the option with the specified value. */\n  private _getOptionByValue(value: string): MatListOption | undefined {\n    return this.options.find(option => option.value === value);\n  }\n\n  /** Sets the selected options based on the specified values. */\n  private _setOptionsFromValues(values: string[]) {\n    this.options.forEach(option => option._setSelected(false));\n\n    values\n      .map(value => this._getOptionByValue(value))\n      .filter(Boolean)\n      .forEach(option => option!._setSelected(true));\n  }\n\n  /** Returns the values of the selected options. */\n  private _getSelectedOptionValues(): string[] {\n    return this.options.filter(option => option.selected).map(option => option.value);\n  }\n\n  /** Toggles the selected state of the currently focused option. */\n  private _toggleSelectOnFocusedOption(): void {\n    let focusedIndex = this._keyManager.activeItemIndex;\n\n    if (focusedIndex != null && this._isValidIndex(focusedIndex)) {\n      let focusedOption: MatListOption = this.options.toArray()[focusedIndex];\n\n      if (focusedOption) {\n        focusedOption.toggle();\n\n        // Emit a change event because the focused option changed its state through user\n        // interaction.\n        this._emitChangeEvent(focusedOption);\n\n        // TODO: the `selectionChange` event on the option is deprecated. Remove that in the future.\n        focusedOption._emitDeprecatedChangeEvent();\n      }\n    }\n  }\n\n  /**\n   * Utility to ensure all indexes are valid.\n   * @param index The index to be checked.\n   * @returns True if the index is valid for our list of options.\n   */\n  private _isValidIndex(index: number): boolean {\n    return index >= 0 && index < this.options.length;\n  }\n\n  /** Returns the index of the specified list option. */\n  private _getOptionIndex(option: MatListOption): number {\n    return this.options.toArray().indexOf(option);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {\n  MatCommonModule,\n  MatLineModule,\n  MatPseudoCheckboxModule,\n  MatRippleModule,\n} from '@angular/material/core';\nimport {\n  MatList,\n  MatNavList,\n  MatListAvatarCssMatStyler,\n  MatListIconCssMatStyler,\n  MatListItem,\n  MatListSubheaderCssMatStyler,\n} from './list';\nimport {MatListOption, MatSelectionList} from './selection-list';\nimport {MatDividerModule} from '@angular/material/divider';\n\n\n@NgModule({\n  imports: [MatLineModule, MatRippleModule, MatCommonModule, MatPseudoCheckboxModule, CommonModule],\n  exports: [\n    MatList,\n    MatNavList,\n    MatListItem,\n    MatListAvatarCssMatStyler,\n    MatLineModule,\n    MatCommonModule,\n    MatListIconCssMatStyler,\n    MatListSubheaderCssMatStyler,\n    MatPseudoCheckboxModule,\n    MatSelectionList,\n    MatListOption,\n    MatDividerModule\n  ],\n  declarations: [\n    MatList,\n    MatNavList,\n    MatListItem,\n    MatListAvatarCssMatStyler,\n    MatListIconCssMatStyler,\n    MatListSubheaderCssMatStyler,\n    MatSelectionList,\n    MatListOption\n  ],\n})\nexport class MatListModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport{\n  trigger,\n  state,\n  style,\n  animate,\n  transition,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/**\n * Animations used by the mat-menu component.\n * Animation duration and timing values are based on:\n * https://material.io/guidelines/components/menus.html#menus-usage\n */\nexport const matMenuAnimations: {\n  readonly transformMenu: AnimationTriggerMetadata;\n  readonly fadeInItems: AnimationTriggerMetadata;\n} = {\n  /**\n   * This animation controls the menu panel's entry and exit from the page.\n   *\n   * When the menu panel is added to the DOM, it scales in and fades in its border.\n   *\n   * When the menu panel is removed from the DOM, it simply fades out after a brief\n   * delay to display the ripple.\n   */\n  transformMenu: trigger('transformMenu', [\n    // TODO(kara): switch to :enter and :leave once Mobile Safari is sorted out.\n    state('void', style({\n      opacity: 0,\n      // This starts off from 0.01, instead of 0, because there's an issue in the Angular animations\n      // as of 4.2, which causes the animation to be skipped if it starts from 0.\n      transform: 'scale(0.01, 0.01)'\n    })),\n    state('enter-start', style({\n      opacity: 1,\n      transform: 'scale(1, 0.5)'\n    })),\n    state('enter', style({\n      transform: 'scale(1, 1)'\n    })),\n    transition('void => enter-start', animate('100ms linear')),\n    transition('enter-start => enter', animate('300ms cubic-bezier(0.25, 0.8, 0.25, 1)')),\n    transition('* => void', animate('150ms 50ms linear', style({opacity: 0})))\n  ]),\n\n\n  /**\n   * This animation fades in the background color and content of the menu panel\n   * after its containing element is scaled in.\n   */\n  fadeInItems: trigger('fadeInItems', [\n    state('showing', style({opacity: 1})),\n    transition('void => *', [\n      style({opacity: 0}),\n      animate('400ms 100ms cubic-bezier(0.55, 0, 0.55, 0.2)')\n    ])\n  ])\n};\n\n/** @deprecated */\nexport const fadeInItems = matMenuAnimations.fadeInItems;\n\n/** @deprecated */\nexport const transformMenu = matMenuAnimations.transformMenu;\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusableOption} from '@angular/cdk/a11y';\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  OnDestroy,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {\n  CanDisable,\n  CanDisableRipple,\n  mixinDisabled,\n  mixinDisableRipple\n} from '@angular/material/core';\nimport {Subject} from 'rxjs/Subject';\n\n// Boilerplate for applying mixins to MatMenuItem.\n/** @docs-private */\nexport class MatMenuItemBase {}\nexport const _MatMenuItemMixinBase = mixinDisableRipple(mixinDisabled(MatMenuItemBase));\n\n/**\n * This directive is intended to be used inside an mat-menu tag.\n * It exists mostly to set the role attribute.\n */\n@Component({\n  moduleId: module.id,\n  selector: '[mat-menu-item]',\n  exportAs: 'matMenuItem',\n  inputs: ['disabled', 'disableRipple'],\n  host: {\n    'role': 'menuitem',\n    'class': 'mat-menu-item',\n    '[class.mat-menu-item-highlighted]': '_highlighted',\n    '[class.mat-menu-item-submenu-trigger]': '_triggersSubmenu',\n    '[attr.tabindex]': '_getTabIndex()',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.disabled]': 'disabled || null',\n    '(click)': '_checkDisabled($event)',\n    '(mouseenter)': '_emitHoverEvent()',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  templateUrl: 'menu-item.html',\n})\nexport class MatMenuItem extends _MatMenuItemMixinBase\n    implements FocusableOption, CanDisable, CanDisableRipple, OnDestroy {\n\n  /** Stream that emits when the menu item is hovered. */\n  _hovered: Subject<MatMenuItem> = new Subject();\n\n  /** Whether the menu item is highlighted. */\n  _highlighted: boolean = false;\n\n  /** Whether the menu item acts as a trigger for a sub-menu. */\n  _triggersSubmenu: boolean = false;\n\n  constructor(private _elementRef: ElementRef) {\n    super();\n  }\n\n  /** Focuses the menu item. */\n  focus(): void {\n    this._getHostElement().focus();\n  }\n\n  ngOnDestroy() {\n    this._hovered.complete();\n  }\n\n  /** Used to set the `tabindex`. */\n  _getTabIndex(): string {\n    return this.disabled ? '-1' : '0';\n  }\n\n  /** Returns the host DOM element. */\n  _getHostElement(): HTMLElement {\n    return this._elementRef.nativeElement;\n  }\n\n  /** Prevents the default element actions if it is disabled. */\n  _checkDisabled(event: Event): void {\n    if (this.disabled) {\n      event.preventDefault();\n      event.stopPropagation();\n    }\n  }\n\n  /** Emits to the hover stream. */\n  _emitHoverEvent() {\n    if (!this.disabled) {\n      this._hovered.next(this);\n    }\n  }\n\n  /** Gets the label to be used when determining whether the option should be focused. */\n  getLabel(): string {\n    const element: HTMLElement = this._elementRef.nativeElement;\n    let output = '';\n\n    if (element.childNodes) {\n      const length = element.childNodes.length;\n\n      // Go through all the top-level text nodes and extract their text.\n      // We skip anything that's not a text node to prevent the text from\n      // being thrown off by something like an icon.\n      for (let i = 0; i < length; i++) {\n        if (element.childNodes[i].nodeType === Node.TEXT_NODE) {\n          output += element.childNodes[i].textContent;\n        }\n      }\n    }\n\n    return output.trim();\n  }\n\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  Input,\n  OnChanges,\n  OnDestroy,\n  SimpleChanges,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {merge} from 'rxjs/observable/merge';\nimport {of as observableOf} from 'rxjs/observable/of';\nimport {Subscription} from 'rxjs/Subscription';\nimport {MatDatepicker} from './datepicker';\nimport {MatDatepickerIntl} from './datepicker-intl';\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-datepicker-toggle',\n  templateUrl: 'datepicker-toggle.html',\n  host: {\n    'class': 'mat-datepicker-toggle',\n  },\n  exportAs: 'matDatepickerToggle',\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatDatepickerToggle<D> implements AfterContentInit, OnChanges, OnDestroy {\n  private _stateChanges = Subscription.EMPTY;\n\n  /** Datepicker instance that the button will toggle. */\n  @Input('for') datepicker: MatDatepicker<D>;\n\n  /** Whether the toggle button is disabled. */\n  @Input()\n  get disabled(): boolean {\n    return this._disabled === undefined ? this.datepicker.disabled : !!this._disabled;\n  }\n  set disabled(value: boolean) {\n    this._disabled = coerceBooleanProperty(value);\n  }\n  private _disabled: boolean;\n\n  constructor(public _intl: MatDatepickerIntl, private _changeDetectorRef: ChangeDetectorRef) {}\n\n  ngOnChanges(changes: SimpleChanges) {\n    if (changes.datepicker) {\n      this._watchStateChanges();\n    }\n  }\n\n  ngOnDestroy() {\n    this._stateChanges.unsubscribe();\n  }\n\n  ngAfterContentInit() {\n    this._watchStateChanges();\n  }\n\n  _open(event: Event): void {\n    if (this.datepicker && !this.disabled) {\n      this.datepicker.open();\n      event.stopPropagation();\n    }\n  }\n\n  private _watchStateChanges() {\n    const datepickerDisabled = this.datepicker ? this.datepicker._disabledChange : observableOf();\n    const inputDisabled = this.datepicker && this.datepicker._datepickerInput ?\n        this.datepicker._datepickerInput._disabledChange : observableOf();\n\n    this._stateChanges.unsubscribe();\n    this._stateChanges = merge(this._intl.changes, datepickerDisabled, inputDisabled)\n        .subscribe(() => this._changeDetectorRef.markForCheck());\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {A11yModule} from '@angular/cdk/a11y';\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatButtonModule} from '@angular/material/button';\nimport {MatDialogModule} from '@angular/material/dialog';\nimport {MatIconModule} from '@angular/material/icon';\nimport {MatCalendar} from './calendar';\nimport {MatCalendarBody} from './calendar-body';\nimport {\n  MAT_DATEPICKER_SCROLL_STRATEGY_PROVIDER,\n  MatDatepicker,\n  MatDatepickerContent,\n} from './datepicker';\nimport {MatDatepickerInput} from './datepicker-input';\nimport {MatDatepickerIntl} from './datepicker-intl';\nimport {MatDatepickerToggle} from './datepicker-toggle';\nimport {MatMonthView} from './month-view';\nimport {MatYearView} from './year-view';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatButtonModule,\n    MatDialogModule,\n    MatIconModule,\n    OverlayModule,\n    A11yModule,\n  ],\n  exports: [\n    MatCalendar,\n    MatCalendarBody,\n    MatDatepicker,\n    MatDatepickerContent,\n    MatDatepickerInput,\n    MatDatepickerToggle,\n    MatMonthView,\n    MatYearView,\n  ],\n  declarations: [\n    MatCalendar,\n    MatCalendarBody,\n    MatDatepicker,\n    MatDatepickerContent,\n    MatDatepickerInput,\n    MatDatepickerToggle,\n    MatMonthView,\n    MatYearView,\n  ],\n  providers: [\n    MatDatepickerIntl,\n    MAT_DATEPICKER_SCROLL_STRATEGY_PROVIDER,\n  ],\n  entryComponents: [\n    MatDatepickerContent,\n  ]\n})\nexport class MatDatepickerModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ChangeDetectionStrategy, Component, Input, ViewEncapsulation} from '@angular/core';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-divider',\n  host: {\n    'role': 'separator',\n    '[attr.aria-orientation]': 'vertical ? \"vertical\" : \"horizontal\"',\n    '[class.mat-divider-vertical]': 'vertical',\n    '[class.mat-divider-inset]': 'inset',\n    'class': 'mat-divider'\n  },\n  template: '',\n  styleUrls: ['divider.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  preserveWhitespaces: false,\n})\nexport class MatDivider {\n  /** Whether the divider is vertically aligned. */\n  @Input() get vertical(): boolean { return this._vertical; }\n  set vertical(value: boolean) { this._vertical = coerceBooleanProperty(value); }\n  private _vertical: boolean = false;\n\n  /** Whether the divider is an inset divider. */\n  @Input() get inset(): boolean { return this._inset; }\n  set inset(value: boolean) { this._inset = coerceBooleanProperty(value); }\n  private _inset: boolean = false;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatDivider} from './divider';\n\n\n@NgModule({\n  imports: [MatCommonModule, CommonModule],\n  exports: [\n    MatDivider,\n    MatCommonModule,\n  ],\n  declarations: [\n    MatDivider,\n  ],\n})\nexport class MatDividerModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, Input} from '@angular/core';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {CdkAccordion} from '@angular/cdk/accordion';\n\n/** MatAccordion's display modes. */\nexport type MatAccordionDisplayMode = 'default' | 'flat';\n\n/**\n * Directive for a Material Design Accordion.\n */\n@Directive({\n  selector: 'mat-accordion',\n  exportAs: 'matAccordion',\n  host: {\n    class: 'mat-accordion'\n  }\n})\nexport class MatAccordion extends CdkAccordion {\n  /** Whether the expansion indicator should be hidden. */\n  @Input() get hideToggle(): boolean { return this._hideToggle; }\n  set hideToggle(show: boolean) { this._hideToggle = coerceBooleanProperty(show); }\n  private  _hideToggle: boolean = false;\n\n  /**\n   * The display mode used for all expansion panels in the accordion. Currently two display\n   * modes exist:\n   *   default - a gutter-like spacing is placed around any expanded panel, placing the expanded\n   *     panel at a different elevation from the reset of the accordion.\n   *  flat - no spacing is placed around expanded panels, showing all panels at the same\n   *     elevation.\n   */\n  @Input() displayMode: MatAccordionDisplayMode = 'default';\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, TemplateRef} from '@angular/core';\n\n/**\n * Expansion panel content that will be rendered lazily\n * after the panel is opened for the first time.\n */\n@Directive({\n  selector: 'ng-template[matExpansionPanelContent]'\n})\nexport class MatExpansionPanelContent {\n  constructor(public _template: TemplateRef<any>) {}\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  Directive,\n  forwardRef,\n  Host,\n  Input,\n  OnChanges,\n  OnDestroy,\n  Optional,\n  SimpleChanges,\n  ViewEncapsulation,\n  ViewContainerRef,\n  AfterContentInit,\n  ContentChild,\n} from '@angular/core';\nimport {CdkAccordionItem} from '@angular/cdk/accordion';\nimport {UniqueSelectionDispatcher} from '@angular/cdk/collections';\nimport {CanDisable, mixinDisabled} from '@angular/material/core';\nimport {TemplatePortal} from '@angular/cdk/portal';\nimport {Subject} from 'rxjs/Subject';\nimport {take} from 'rxjs/operators/take';\nimport {filter} from 'rxjs/operators/filter';\nimport {startWith} from 'rxjs/operators/startWith';\nimport {MatAccordion} from './accordion';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {MatExpansionPanelContent} from './expansion-panel-content';\nimport {matExpansionAnimations} from './expansion-animations';\n\n// Boilerplate for applying mixins to MatExpansionPanel.\n/** @docs-private */\n@Component({\n  template: '',\n  moduleId: module.id,\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatExpansionPanelBase extends CdkAccordionItem {\n  constructor(accordion: MatAccordion,\n              _changeDetectorRef: ChangeDetectorRef,\n              _uniqueSelectionDispatcher: UniqueSelectionDispatcher) {\n    super(accordion, _changeDetectorRef, _uniqueSelectionDispatcher);\n  }\n}\nexport const _MatExpansionPanelMixinBase = mixinDisabled(MatExpansionPanelBase);\n\n/** MatExpansionPanel's states. */\nexport type MatExpansionPanelState = 'expanded' | 'collapsed';\n\n/**\n * <mat-expansion-panel> component.\n *\n * This component can be used as a single element to show expandable content, or as one of\n * multiple children of an element with the MatAccordion directive attached.\n *\n * Please refer to README.md for examples on how to use it.\n */\n@Component({\n  moduleId: module.id,\n  styleUrls: ['./expansion-panel.css'],\n  selector: 'mat-expansion-panel',\n  exportAs: 'matExpansionPanel',\n  templateUrl: './expansion-panel.html',\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  inputs: ['disabled', 'expanded'],\n  outputs: ['opened', 'closed'],\n  animations: [matExpansionAnimations.bodyExpansion],\n  host: {\n    'class': 'mat-expansion-panel',\n    '[class.mat-expanded]': 'expanded',\n    '[class.mat-expansion-panel-spacing]': '_hasSpacing()',\n  },\n  providers: [\n    {provide: _MatExpansionPanelMixinBase, useExisting: forwardRef(() => MatExpansionPanel)}\n  ],\n})\nexport class MatExpansionPanel extends _MatExpansionPanelMixinBase\n    implements CanDisable, AfterContentInit, OnChanges, OnDestroy {\n\n  /** Whether the toggle indicator should be hidden. */\n  @Input()\n  get hideToggle(): boolean {\n    return this._hideToggle;\n  }\n  set hideToggle(value: boolean) {\n    this._hideToggle = coerceBooleanProperty(value);\n  }\n  private _hideToggle = false;\n\n  /** Stream that emits for changes in `@Input` properties. */\n  _inputChanges = new Subject<SimpleChanges>();\n\n  /** Optionally defined accordion the expansion panel belongs to. */\n  accordion: MatAccordion;\n\n  /** Content that will be rendered lazily. */\n  @ContentChild(MatExpansionPanelContent) _lazyContent: MatExpansionPanelContent;\n\n  /** Portal holding the user's content. */\n  _portal: TemplatePortal<any>;\n\n  constructor(@Optional() @Host() accordion: MatAccordion,\n              _changeDetectorRef: ChangeDetectorRef,\n              _uniqueSelectionDispatcher: UniqueSelectionDispatcher,\n              private _viewContainerRef: ViewContainerRef) {\n    super(accordion, _changeDetectorRef, _uniqueSelectionDispatcher);\n    this.accordion = accordion;\n  }\n\n  /** Whether the expansion indicator should be hidden. */\n  _getHideToggle(): boolean {\n    if (this.accordion) {\n      return this.accordion.hideToggle;\n    }\n    return this.hideToggle;\n  }\n\n  /** Determines whether the expansion panel should have spacing between it and its siblings. */\n  _hasSpacing(): boolean {\n    if (this.accordion) {\n      return (this.expanded ? this.accordion.displayMode : this._getExpandedState()) === 'default';\n    }\n    return false;\n  }\n\n  /** Gets the expanded state string. */\n  _getExpandedState(): MatExpansionPanelState {\n    return this.expanded ? 'expanded' : 'collapsed';\n  }\n\n  ngAfterContentInit() {\n    if (this._lazyContent) {\n      // Render the content as soon as the panel becomes open.\n      this.opened.pipe(\n        startWith(null!),\n        filter(() => this.expanded && !this._portal),\n        take(1)\n      ).subscribe(() => {\n        this._portal = new TemplatePortal<any>(this._lazyContent._template, this._viewContainerRef);\n      });\n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    this._inputChanges.next(changes);\n  }\n\n  ngOnDestroy() {\n    super.ngOnDestroy();\n    this._inputChanges.complete();\n  }\n}\n\n@Directive({\n  selector: 'mat-action-row',\n  host: {\n    class: 'mat-action-row'\n  }\n})\nexport class MatExpansionPanelActionRow {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor} from '@angular/cdk/a11y';\nimport {ENTER, SPACE} from '@angular/cdk/keycodes';\nimport {filter} from 'rxjs/operators/filter';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  Directive,\n  ElementRef,\n  Host,\n  Input,\n  OnDestroy,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {merge} from 'rxjs/observable/merge';\nimport {Subscription} from 'rxjs/Subscription';\nimport {MatExpansionPanel} from './expansion-panel';\nimport {matExpansionAnimations} from './expansion-animations';\n\n\n/**\n * <mat-expansion-panel-header> component.\n *\n * This component corresponds to the header element of an <mat-expansion-panel>.\n *\n * Please refer to README.md for examples on how to use it.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-expansion-panel-header',\n  styleUrls: ['./expansion-panel-header.css'],\n  templateUrl: './expansion-panel-header.html',\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  animations: [\n    matExpansionAnimations.indicatorRotate,\n    matExpansionAnimations.expansionHeaderHeight\n  ],\n  host: {\n    'class': 'mat-expansion-panel-header',\n    'role': 'button',\n    '[attr.tabindex]': 'panel.disabled ? -1 : 0',\n    '[attr.aria-controls]': '_getPanelId()',\n    '[attr.aria-expanded]': '_isExpanded()',\n    '[attr.aria-disabled]': 'panel.disabled',\n    '[class.mat-expanded]': '_isExpanded()',\n    '(click)': '_toggle()',\n    '(keyup)': '_keyup($event)',\n    '[@expansionHeight]': `{\n        value: _getExpandedState(),\n        params: {\n          collapsedHeight: collapsedHeight,\n          expandedHeight: expandedHeight\n        }\n    }`,\n  },\n})\nexport class MatExpansionPanelHeader implements OnDestroy {\n  private _parentChangeSubscription = Subscription.EMPTY;\n\n  constructor(\n    @Host() public panel: MatExpansionPanel,\n    private _element: ElementRef,\n    private _focusMonitor: FocusMonitor,\n    private _changeDetectorRef: ChangeDetectorRef) {\n\n    // Since the toggle state depends on an @Input on the panel, we\n    // need to  subscribe and trigger change detection manually.\n    this._parentChangeSubscription = merge(\n      panel.opened,\n      panel.closed,\n      panel._inputChanges.pipe(filter(changes => !!(changes.hideToggle || changes.disabled)))\n    )\n    .subscribe(() => this._changeDetectorRef.markForCheck());\n\n    _focusMonitor.monitor(_element.nativeElement, false);\n  }\n\n  /** Height of the header while the panel is expanded. */\n  @Input() expandedHeight: string;\n\n  /** Height of the header while the panel is collapsed. */\n  @Input() collapsedHeight: string;\n\n  /** Toggles the expanded state of the panel. */\n  _toggle(): void {\n    if (!this.panel.disabled) {\n      this.panel.toggle();\n    }\n  }\n\n  /** Gets whether the panel is expanded. */\n  _isExpanded(): boolean {\n    return this.panel.expanded;\n  }\n\n  /** Gets the expanded state string of the panel. */\n  _getExpandedState(): string {\n    return this.panel._getExpandedState();\n  }\n\n  /** Gets the panel id. */\n  _getPanelId(): string {\n    return this.panel.id;\n  }\n\n  /** Gets whether the expand indicator should be shown. */\n  _showToggle(): boolean {\n    return !this.panel.hideToggle && !this.panel.disabled;\n  }\n\n  /** Handle keyup event calling to toggle() if appropriate. */\n  _keyup(event: KeyboardEvent) {\n    switch (event.keyCode) {\n      // Toggle for space and enter keys.\n      case SPACE:\n      case ENTER:\n        event.preventDefault();\n        this._toggle();\n        break;\n      default:\n        return;\n    }\n  }\n\n  ngOnDestroy() {\n    this._parentChangeSubscription.unsubscribe();\n    this._focusMonitor.stopMonitoring(this._element.nativeElement);\n  }\n}\n\n/**\n * <mat-panel-description> directive.\n *\n * This direction is to be used inside of the MatExpansionPanelHeader component.\n */\n@Directive({\n  selector: 'mat-panel-description',\n  host : {\n    class: 'mat-expansion-panel-header-description'\n  }\n})\nexport class MatExpansionPanelDescription {}\n\n/**\n * <mat-panel-title> directive.\n *\n * This direction is to be used inside of the MatExpansionPanelHeader component.\n */\n@Directive({\n  selector: 'mat-panel-title',\n  host : {\n    class: 'mat-expansion-panel-header-title'\n  }\n})\nexport class MatExpansionPanelTitle {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {UNIQUE_SELECTION_DISPATCHER_PROVIDER} from '@angular/cdk/collections';\nimport {CdkAccordionModule} from '@angular/cdk/accordion';\nimport {A11yModule} from '@angular/cdk/a11y';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {MatAccordion} from './accordion';\nimport {MatExpansionPanelContent} from './expansion-panel-content';\nimport {\n  MatExpansionPanel,\n  MatExpansionPanelActionRow,\n  MatExpansionPanelBase\n} from './expansion-panel';\nimport {\n  MatExpansionPanelDescription,\n  MatExpansionPanelHeader,\n  MatExpansionPanelTitle,\n} from './expansion-panel-header';\n\n\n@NgModule({\n  imports: [CommonModule, A11yModule, CdkAccordionModule, PortalModule],\n  exports: [\n    MatAccordion,\n    MatExpansionPanel,\n    MatExpansionPanelActionRow,\n    MatExpansionPanelHeader,\n    MatExpansionPanelTitle,\n    MatExpansionPanelDescription,\n    MatExpansionPanelContent,\n  ],\n  declarations: [\n    MatExpansionPanelBase,\n    MatAccordion,\n    MatExpansionPanel,\n    MatExpansionPanelActionRow,\n    MatExpansionPanelHeader,\n    MatExpansionPanelTitle,\n    MatExpansionPanelDescription,\n    MatExpansionPanelContent,\n  ],\n  providers: [UNIQUE_SELECTION_DISPATCHER_PROVIDER]\n})\nexport class MatExpansionModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ViewEncapsulation,\n  ElementRef,\n  Input,\n  ContentChildren,\n  QueryList,\n  AfterContentInit,\n  Directive,\n  ChangeDetectionStrategy,\n} from '@angular/core';\nimport {MatLine, MatLineSetter} from '@angular/material/core';\nimport {coerceToNumber} from './grid-list-measure';\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-grid-tile',\n  exportAs: 'matGridTile',\n  host: {\n    'class': 'mat-grid-tile',\n  },\n  templateUrl: 'grid-tile.html',\n  styleUrls: ['grid-list.css'],\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatGridTile {\n  _rowspan: number = 1;\n  _colspan: number = 1;\n\n  constructor(private _element: ElementRef) {}\n\n  /** Amount of rows that the grid tile takes up. */\n  @Input()\n  get rowspan(): number { return this._rowspan; }\n  set rowspan(value) { this._rowspan = coerceToNumber(value); }\n\n  /** Amount of columns that the grid tile takes up. */\n  @Input()\n  get colspan(): number { return this._colspan; }\n  set colspan(value) { this._colspan = coerceToNumber(value); }\n\n  /**\n   * Sets the style of the grid-tile element.  Needs to be set manually to avoid\n   * \"Changed after checked\" errors that would occur with HostBinding.\n   */\n  _setStyle(property: string, value: any): void {\n    this._element.nativeElement.style[property] = value;\n  }\n}\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-grid-tile-header, mat-grid-tile-footer',\n  templateUrl: 'grid-tile-text.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n})\nexport class MatGridTileText implements AfterContentInit {\n  /**\n   *  Helper that watches the number of lines in a text area and sets\n   * a class on the host element that matches the line count.\n   */\n  _lineSetter: MatLineSetter;\n  @ContentChildren(MatLine) _lines: QueryList<MatLine>;\n\n  constructor(private _element: ElementRef) {}\n\n  ngAfterContentInit() {\n    this._lineSetter = new MatLineSetter(this._lines, this._element);\n  }\n}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-grid-avatar], [matGridAvatar]',\n  host: {'class': 'mat-grid-avatar'}\n})\nexport class MatGridAvatarCssMatStyler {}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-grid-tile-header',\n  host: {'class': 'mat-grid-tile-header'}\n})\nexport class MatGridTileHeaderCssMatStyler {}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-grid-tile-footer',\n  host: {'class': 'mat-grid-tile-footer'}\n})\nexport class MatGridTileFooterCssMatStyler {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {QueryList} from '@angular/core';\nimport {MatGridTile} from './grid-tile';\n\n/**\n * Class for determining, from a list of tiles, the (row, col) position of each of those tiles\n * in the grid. This is necessary (rather than just rendering the tiles in normal document flow)\n * because the tiles can have a rowspan.\n *\n * The positioning algorithm greedily places each tile as soon as it encounters a gap in the grid\n * large enough to accommodate it so that the tiles still render in the same order in which they\n * are given.\n *\n * The basis of the algorithm is the use of an array to track the already placed tiles. Each\n * element of the array corresponds to a column, and the value indicates how many cells in that\n * column are already occupied; zero indicates an empty cell. Moving \"down\" to the next row\n * decrements each value in the tracking array (indicating that the column is one cell closer to\n * being free).\n *\n * @docs-private\n */\nexport class TileCoordinator {\n  /** Tracking array (see class description). */\n  tracker: number[];\n\n  /** Index at which the search for the next gap will start. */\n  columnIndex: number = 0;\n\n  /** The current row index. */\n  rowIndex: number = 0;\n\n  /** Gets the total number of rows occupied by tiles */\n  get rowCount(): number { return this.rowIndex + 1; }\n\n  /** Gets the total span of rows occupied by tiles.\n   * Ex: A list with 1 row that contains a tile with rowspan 2 will have a total rowspan of 2. */\n  get rowspan() {\n    let lastRowMax = Math.max(...this.tracker);\n    // if any of the tiles has a rowspan that pushes it beyond the total row count,\n    // add the difference to the rowcount\n    return lastRowMax > 1 ? this.rowCount + lastRowMax - 1 : this.rowCount;\n  }\n\n  /** The computed (row, col) position of each tile (the output). */\n  positions: TilePosition[];\n\n  constructor(numColumns: number, tiles: QueryList<MatGridTile>) {\n    this.tracker = new Array(numColumns);\n    this.tracker.fill(0, 0, this.tracker.length);\n\n    this.positions = tiles.map(tile => this._trackTile(tile));\n  }\n\n  /** Calculates the row and col position of a tile. */\n  private _trackTile(tile: MatGridTile): TilePosition {\n    // Find a gap large enough for this tile.\n    let gapStartIndex = this._findMatchingGap(tile.colspan);\n\n    // Place tile in the resulting gap.\n    this._markTilePosition(gapStartIndex, tile);\n\n    // The next time we look for a gap, the search will start at columnIndex, which should be\n    // immediately after the tile that has just been placed.\n    this.columnIndex = gapStartIndex + tile.colspan;\n\n    return new TilePosition(this.rowIndex, gapStartIndex);\n  }\n\n  /** Finds the next available space large enough to fit the tile. */\n  private _findMatchingGap(tileCols: number): number {\n    if (tileCols > this.tracker.length) {\n      throw Error(`mat-grid-list: tile with colspan ${tileCols} is wider than ` +\n                      `grid with cols=\"${this.tracker.length}\".`);\n    }\n\n    // Start index is inclusive, end index is exclusive.\n    let gapStartIndex = -1;\n    let gapEndIndex = -1;\n\n    // Look for a gap large enough to fit the given tile. Empty spaces are marked with a zero.\n    do {\n      // If we've reached the end of the row, go to the next row.\n      if (this.columnIndex + tileCols > this.tracker.length) {\n        this._nextRow();\n        continue;\n      }\n\n      gapStartIndex = this.tracker.indexOf(0, this.columnIndex);\n\n      // If there are no more empty spaces in this row at all, move on to the next row.\n      if (gapStartIndex == -1) {\n        this._nextRow();\n        continue;\n      }\n\n      gapEndIndex = this._findGapEndIndex(gapStartIndex);\n\n      // If a gap large enough isn't found, we want to start looking immediately after the current\n      // gap on the next iteration.\n      this.columnIndex = gapStartIndex + 1;\n\n      // Continue iterating until we find a gap wide enough for this tile.\n    } while (gapEndIndex - gapStartIndex < tileCols);\n    return gapStartIndex;\n  }\n\n  /** Move \"down\" to the next row. */\n  private _nextRow(): void {\n    this.columnIndex = 0;\n    this.rowIndex++;\n\n    // Decrement all spaces by one to reflect moving down one row.\n    for (let i = 0; i < this.tracker.length; i++) {\n      this.tracker[i] = Math.max(0, this.tracker[i] - 1);\n    }\n  }\n\n  /**\n   * Finds the end index (exclusive) of a gap given the index from which to start looking.\n   * The gap ends when a non-zero value is found.\n   */\n  private _findGapEndIndex(gapStartIndex: number): number {\n    for (let i = gapStartIndex + 1; i < this.tracker.length; i++) {\n      if (this.tracker[i] != 0) {\n        return i;\n      }\n    }\n\n    // The gap ends with the end of the row.\n    return this.tracker.length;\n  }\n\n  /** Update the tile tracker to account for the given tile in the given space. */\n  private _markTilePosition(start: number, tile: MatGridTile): void {\n    for (let i = 0; i < tile.colspan; i++) {\n      this.tracker[start + i] = tile.rowspan;\n    }\n  }\n}\n\n/**\n * Simple data structure for tile position (row, col).\n * @docs-private\n */\nexport class TilePosition {\n  constructor(public row: number, public col: number) {}\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {MatGridList} from './grid-list';\nimport {MatGridTile} from './grid-tile';\nimport {TileCoordinator} from './tile-coordinator';\n\n/**\n * Sets the style properties for an individual tile, given the position calculated by the\n * Tile Coordinator.\n * @docs-private\n */\nexport abstract class TileStyler {\n  _gutterSize: string;\n  _rows: number = 0;\n  _rowspan: number = 0;\n  _cols: number;\n  _direction: string;\n\n  /**\n   * Adds grid-list layout info once it is available. Cannot be processed in the constructor\n   * because these properties haven't been calculated by that point.\n   *\n   * @param gutterSize Size of the grid's gutter.\n   * @param tracker Instance of the TileCoordinator.\n   * @param cols Amount of columns in the grid.\n   * @param direction Layout direction of the grid.\n   */\n  init(gutterSize: string, tracker: TileCoordinator, cols: number, direction: string): void {\n    this._gutterSize = normalizeUnits(gutterSize);\n    this._rows = tracker.rowCount;\n    this._rowspan = tracker.rowspan;\n    this._cols = cols;\n    this._direction = direction;\n  }\n\n  /**\n   * Computes the amount of space a single 1x1 tile would take up (width or height).\n   * Used as a basis for other calculations.\n   * @param sizePercent Percent of the total grid-list space that one 1x1 tile would take up.\n   * @param gutterFraction Fraction of the gutter size taken up by one 1x1 tile.\n   * @return The size of a 1x1 tile as an expression that can be evaluated via CSS calc().\n   */\n  getBaseTileSize(sizePercent: number, gutterFraction: number): string {\n    // Take the base size percent (as would be if evenly dividing the size between cells),\n    // and then subtracting the size of one gutter. However, since there are no gutters on the\n    // edges, each tile only uses a fraction (gutterShare = numGutters / numCells) of the gutter\n    // size. (Imagine having one gutter per tile, and then breaking up the extra gutter on the\n    // edge evenly among the cells).\n    return `(${sizePercent}% - (${this._gutterSize} * ${gutterFraction}))`;\n  }\n\n\n  /**\n   * Gets The horizontal or vertical position of a tile, e.g., the 'top' or 'left' property value.\n   * @param offset Number of tiles that have already been rendered in the row/column.\n   * @param baseSize Base size of a 1x1 tile (as computed in getBaseTileSize).\n   * @return Position of the tile as a CSS calc() expression.\n   */\n  getTilePosition(baseSize: string, offset: number): string {\n    // The position comes the size of a 1x1 tile plus gutter for each previous tile in the\n    // row/column (offset).\n    return offset === 0 ? '0' : calc(`(${baseSize} + ${this._gutterSize}) * ${offset}`);\n  }\n\n\n  /**\n   * Gets the actual size of a tile, e.g., width or height, taking rowspan or colspan into account.\n   * @param baseSize Base size of a 1x1 tile (as computed in getBaseTileSize).\n   * @param span The tile's rowspan or colspan.\n   * @return Size of the tile as a CSS calc() expression.\n   */\n  getTileSize(baseSize: string, span: number): string {\n    return `(${baseSize} * ${span}) + (${span - 1} * ${this._gutterSize})`;\n  }\n\n\n  /**\n   * Sets the style properties to be applied to a tile for the given row and column index.\n   * @param tile Tile to which to apply the styling.\n   * @param rowIndex Index of the tile's row.\n   * @param colIndex Index of the tile's column.\n   */\n  setStyle(tile: MatGridTile, rowIndex: number, colIndex: number): void {\n    // Percent of the available horizontal space that one column takes up.\n    let percentWidthPerTile = 100 / this._cols;\n\n    // Fraction of the vertical gutter size that each column takes up.\n    // For example, if there are 5 columns, each column uses 4/5 = 0.8 times the gutter width.\n    let gutterWidthFractionPerTile = (this._cols - 1) / this._cols;\n\n    this.setColStyles(tile, colIndex, percentWidthPerTile, gutterWidthFractionPerTile);\n    this.setRowStyles(tile, rowIndex, percentWidthPerTile, gutterWidthFractionPerTile);\n  }\n\n  /** Sets the horizontal placement of the tile in the list. */\n  setColStyles(tile: MatGridTile, colIndex: number, percentWidth: number,\n               gutterWidth: number) {\n    // Base horizontal size of a column.\n    let baseTileWidth = this.getBaseTileSize(percentWidth, gutterWidth);\n\n    // The width and horizontal position of each tile is always calculated the same way, but the\n    // height and vertical position depends on the rowMode.\n    let side = this._direction === 'ltr' ? 'left' : 'right';\n    tile._setStyle(side, this.getTilePosition(baseTileWidth, colIndex));\n    tile._setStyle('width', calc(this.getTileSize(baseTileWidth, tile.colspan)));\n  }\n\n  /**\n   * Calculates the total size taken up by gutters across one axis of a list.\n   */\n  getGutterSpan(): string {\n    return `${this._gutterSize} * (${this._rowspan} - 1)`;\n  }\n\n  /**\n   * Calculates the total size taken up by tiles across one axis of a list.\n   * @param tileHeight Height of the tile.\n   */\n  getTileSpan(tileHeight: string): string {\n    return `${this._rowspan} * ${this.getTileSize(tileHeight, 1)}`;\n  }\n\n  /**\n   * Sets the vertical placement of the tile in the list.\n   * This method will be implemented by each type of TileStyler.\n   * @docs-private\n   */\n  abstract setRowStyles(tile: MatGridTile, rowIndex: number, percentWidth: number,\n                        gutterWidth: number);\n\n  /**\n   * Calculates the computed height and returns the correct style property to set.\n   * This method can be implemented by each type of TileStyler.\n   * @docs-private\n   */\n  getComputedHeight(): [string, string] | null { return null; }\n\n  /**\n   * Called when the tile styler is swapped out with a different one. To be used for cleanup.\n   * @param list Grid list that the styler was attached to.\n   * @docs-private\n   */\n  abstract reset(list: MatGridList);\n}\n\n\n/**\n * This type of styler is instantiated when the user passes in a fixed row height.\n * Example <mat-grid-list cols=\"3\" rowHeight=\"100px\">\n * @docs-private\n */\nexport class FixedTileStyler extends TileStyler {\n\n  constructor(public fixedRowHeight: string) { super(); }\n\n  init(gutterSize: string, tracker: TileCoordinator, cols: number, direction: string) {\n    super.init(gutterSize, tracker, cols, direction);\n    this.fixedRowHeight = normalizeUnits(this.fixedRowHeight);\n  }\n\n  setRowStyles(tile: MatGridTile, rowIndex: number): void {\n    tile._setStyle('top', this.getTilePosition(this.fixedRowHeight, rowIndex));\n    tile._setStyle('height', calc(this.getTileSize(this.fixedRowHeight, tile.rowspan)));\n  }\n\n  getComputedHeight(): [string, string] {\n    return [\n      'height', calc(`${this.getTileSpan(this.fixedRowHeight)} + ${this.getGutterSpan()}`)\n    ];\n  }\n\n  reset(list: MatGridList) {\n    list._setListStyle(['height', null]);\n\n    list._tiles.forEach(tile => {\n      tile._setStyle('top', null);\n      tile._setStyle('height', null);\n    });\n  }\n}\n\n\n/**\n * This type of styler is instantiated when the user passes in a width:height ratio\n * for the row height.  Example <mat-grid-list cols=\"3\" rowHeight=\"3:1\">\n * @docs-private\n */\nexport class RatioTileStyler extends TileStyler {\n\n  /** Ratio width:height given by user to determine row height.*/\n  rowHeightRatio: number;\n  baseTileHeight: string;\n\n  constructor(value: string) {\n    super();\n    this._parseRatio(value);\n  }\n\n  setRowStyles(tile: MatGridTile, rowIndex: number, percentWidth: number,\n               gutterWidth: number): void {\n    let percentHeightPerTile = percentWidth / this.rowHeightRatio;\n    this.baseTileHeight = this.getBaseTileSize(percentHeightPerTile, gutterWidth);\n\n    // Use padding-top and margin-top to maintain the given aspect ratio, as\n    // a percentage-based value for these properties is applied versus the *width* of the\n    // containing block. See http://www.w3.org/TR/CSS2/box.html#margin-properties\n    tile._setStyle('margin-top', this.getTilePosition(this.baseTileHeight, rowIndex));\n    tile._setStyle('padding-top', calc(this.getTileSize(this.baseTileHeight, tile.rowspan)));\n  }\n\n  getComputedHeight(): [string, string] {\n    return [\n      'padding-bottom', calc(`${this.getTileSpan(this.baseTileHeight)} + ${this.getGutterSpan()}`)\n    ];\n  }\n\n  reset(list: MatGridList) {\n    list._setListStyle(['padding-bottom', null]);\n\n    list._tiles.forEach(tile => {\n      tile._setStyle('margin-top', null);\n      tile._setStyle('padding-top', null);\n    });\n  }\n\n  private _parseRatio(value: string): void {\n    const ratioParts = value.split(':');\n\n    if (ratioParts.length !== 2) {\n      throw Error(`mat-grid-list: invalid ratio given for row-height: \"${value}\"`);\n    }\n\n    this.rowHeightRatio = parseFloat(ratioParts[0]) / parseFloat(ratioParts[1]);\n  }\n}\n\n/**\n * This type of styler is instantiated when the user selects a \"fit\" row height mode.\n * In other words, the row height will reflect the total height of the container divided\n * by the number of rows.  Example <mat-grid-list cols=\"3\" rowHeight=\"fit\">\n *\n * @docs-private\n */\nexport class FitTileStyler extends TileStyler {\n\n  setRowStyles(tile: MatGridTile, rowIndex: number): void {\n    // Percent of the available vertical space that one row takes up.\n    let percentHeightPerTile = 100 / this._rowspan;\n\n    // Fraction of the horizontal gutter size that each column takes up.\n    let gutterHeightPerTile = (this._rows - 1) / this._rows;\n\n    // Base vertical size of a column.\n    let baseTileHeight = this.getBaseTileSize(percentHeightPerTile, gutterHeightPerTile);\n\n    tile._setStyle('top', this.getTilePosition(baseTileHeight, rowIndex));\n    tile._setStyle('height', calc(this.getTileSize(baseTileHeight, tile.rowspan)));\n  }\n\n  reset(list: MatGridList) {\n    list._tiles.forEach(tile => {\n      tile._setStyle('top', null);\n      tile._setStyle('height', null);\n    });\n  }\n}\n\n\n/** Wraps a CSS string in a calc function */\nfunction calc(exp: string): string { return `calc(${exp})`; }\n\n\n/** Appends pixels to a CSS string if no units are given. */\nfunction normalizeUnits(value: string): string {\n  return (value.match(/px|em|rem/)) ? value : value + 'px';\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ViewEncapsulation,\n  AfterContentChecked,\n  OnInit,\n  Input,\n  ContentChildren,\n  QueryList,\n  ElementRef,\n  Optional,\n  ChangeDetectionStrategy,\n} from '@angular/core';\nimport {MatGridTile} from './grid-tile';\nimport {TileCoordinator} from './tile-coordinator';\nimport {TileStyler, FitTileStyler, RatioTileStyler, FixedTileStyler} from './tile-styler';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {\n  coerceToString,\n  coerceToNumber,\n} from './grid-list-measure';\n\n\n// TODO(kara): Conditional (responsive) column count / row size.\n// TODO(kara): Re-layout on window resize / media change (debounced).\n// TODO(kara): gridTileHeader and gridTileFooter.\n\nconst MAT_FIT_MODE = 'fit';\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-grid-list',\n  exportAs: 'matGridList',\n  templateUrl: 'grid-list.html',\n  styleUrls: ['grid-list.css'],\n  host: {\n    'class': 'mat-grid-list',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n})\nexport class MatGridList implements OnInit, AfterContentChecked {\n  /** Number of columns being rendered. */\n  private _cols: number;\n\n  /**\n   * Row height value passed in by user. This can be one of three types:\n   * - Number value (ex: \"100px\"):  sets a fixed row height to that value\n   * - Ratio value (ex: \"4:3\"): sets the row height based on width:height ratio\n   * - \"Fit\" mode (ex: \"fit\"): sets the row height to total height divided by number of rows\n   */\n  private _rowHeight: string;\n\n  /** The amount of space between tiles. This will be something like '5px' or '2em'. */\n  private _gutter: string = '1px';\n\n  /** Sets position and size styles for a tile */\n  private _tileStyler: TileStyler;\n\n  /** Query list of tiles that are being rendered. */\n  @ContentChildren(MatGridTile) _tiles: QueryList<MatGridTile>;\n\n  constructor(private _element: ElementRef, @Optional() private _dir: Directionality) {}\n\n  /** Amount of columns in the grid list. */\n  @Input()\n  get cols() { return this._cols; }\n  set cols(value: any) { this._cols = coerceToNumber(value); }\n\n  /** Size of the grid list's gutter in pixels. */\n  @Input()\n  get gutterSize() { return this._gutter; }\n  set gutterSize(value: any) { this._gutter = coerceToString(value); }\n\n  /** Set internal representation of row height from the user-provided value. */\n  @Input()\n  set rowHeight(value: string | number) {\n    const newValue = coerceToString(value);\n\n    if (newValue !== this._rowHeight) {\n      this._rowHeight = newValue;\n      this._setTileStyler(this._rowHeight);\n    }\n  }\n\n  ngOnInit() {\n    this._checkCols();\n    this._checkRowHeight();\n  }\n\n  /**\n   * The layout calculation is fairly cheap if nothing changes, so there's little cost\n   * to run it frequently.\n   */\n  ngAfterContentChecked() {\n    this._layoutTiles();\n  }\n\n  /** Throw a friendly error if cols property is missing */\n  private _checkCols() {\n    if (!this.cols) {\n      throw Error(`mat-grid-list: must pass in number of columns. ` +\n                  `Example: <mat-grid-list cols=\"3\">`);\n    }\n  }\n\n  /** Default to equal width:height if rowHeight property is missing */\n  private _checkRowHeight(): void {\n    if (!this._rowHeight) {\n      this._setTileStyler('1:1');\n    }\n  }\n\n  /** Creates correct Tile Styler subtype based on rowHeight passed in by user */\n  private _setTileStyler(rowHeight: string): void {\n    if (this._tileStyler) {\n      this._tileStyler.reset(this);\n    }\n\n    if (rowHeight === MAT_FIT_MODE) {\n      this._tileStyler = new FitTileStyler();\n    } else if (rowHeight && rowHeight.indexOf(':') > -1) {\n      this._tileStyler = new RatioTileStyler(rowHeight);\n    } else {\n      this._tileStyler = new FixedTileStyler(rowHeight);\n    }\n  }\n\n  /** Computes and applies the size and position for all children grid tiles. */\n  private _layoutTiles(): void {\n    const tracker = new TileCoordinator(this.cols, this._tiles);\n    const direction = this._dir ? this._dir.value : 'ltr';\n    this._tileStyler.init(this.gutterSize, tracker, this.cols, direction);\n\n    this._tiles.forEach((tile, index) => {\n      const pos = tracker.positions[index];\n      this._tileStyler.setStyle(tile, pos.row, pos.col);\n    });\n\n    this._setListStyle(this._tileStyler.getComputedHeight());\n  }\n\n  /** Sets style on the main grid-list element, given the style name and value. */\n  _setListStyle(style: [string, string | null] | null): void {\n    if (style) {\n      this._element.nativeElement.style[style[0]] = style[1];\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatLineModule, MatCommonModule} from '@angular/material/core';\nimport {\n  MatGridTile, MatGridTileText, MatGridTileFooterCssMatStyler,\n  MatGridTileHeaderCssMatStyler, MatGridAvatarCssMatStyler\n} from './grid-tile';\nimport {MatGridList} from './grid-list';\n\n\n@NgModule({\n  imports: [MatLineModule, MatCommonModule],\n  exports: [\n    MatGridList,\n    MatGridTile,\n    MatGridTileText,\n    MatLineModule,\n    MatCommonModule,\n    MatGridTileHeaderCssMatStyler,\n    MatGridTileFooterCssMatStyler,\n    MatGridAvatarCssMatStyler\n  ],\n  declarations: [\n    MatGridList,\n    MatGridTile,\n    MatGridTileText,\n    MatGridTileHeaderCssMatStyler,\n    MatGridTileFooterCssMatStyler,\n    MatGridAvatarCssMatStyler\n  ],\n})\nexport class MatGridListModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  Component,\n  EventEmitter,\n  Inject,\n  Input,\n  Optional,\n  Output,\n  ViewEncapsulation,\n  ChangeDetectorRef,\n} from '@angular/core';\nimport {DateAdapter, MAT_DATE_FORMATS, MatDateFormats} from '@angular/material/core';\nimport {MatCalendarCell} from './calendar-body';\nimport {createMissingDateImplError} from './datepicker-errors';\n\n\nconst DAYS_PER_WEEK = 7;\n\n\n/**\n * An internal component used to display a single month in the datepicker.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-month-view',\n  templateUrl: 'month-view.html',\n  exportAs: 'matMonthView',\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatMonthView<D> implements AfterContentInit {\n  /**\n   * The date to display in this month view (everything other than the month and year is ignored).\n   */\n  @Input()\n  get activeDate(): D { return this._activeDate; }\n  set activeDate(value: D) {\n    let oldActiveDate = this._activeDate;\n    this._activeDate =\n        this._getValidDateOrNull(this._dateAdapter.deserialize(value)) || this._dateAdapter.today();\n    if (!this._hasSameMonthAndYear(oldActiveDate, this._activeDate)) {\n      this._init();\n    }\n  }\n  private _activeDate: D;\n\n  /** The currently selected date. */\n  @Input()\n  get selected(): D | null { return this._selected; }\n  set selected(value: D | null) {\n    this._selected = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n    this._selectedDate = this._getDateInCurrentMonth(this._selected);\n  }\n  private _selected: D | null;\n\n  /** A function used to filter which dates are selectable. */\n  @Input() dateFilter: (date: D) => boolean;\n\n  /** Emits when a new date is selected. */\n  @Output() selectedChange = new EventEmitter<D | null>();\n\n  /** Emits when any date is selected. */\n  @Output() _userSelection = new EventEmitter<void>();\n\n  /** The label for this month (e.g. \"January 2017\"). */\n  _monthLabel: string;\n\n  /** Grid of calendar cells representing the dates of the month. */\n  _weeks: MatCalendarCell[][];\n\n  /** The number of blank cells in the first row before the 1st of the month. */\n  _firstWeekOffset: number;\n\n  /**\n   * The date of the month that the currently selected Date falls on.\n   * Null if the currently selected Date is in another month.\n   */\n  _selectedDate: number | null;\n\n  /** The date of the month that today falls on. Null if today is in another month. */\n  _todayDate: number | null;\n\n  /** The names of the weekdays. */\n  _weekdays: {long: string, narrow: string}[];\n\n  constructor(@Optional() public _dateAdapter: DateAdapter<D>,\n              @Optional() @Inject(MAT_DATE_FORMATS) private _dateFormats: MatDateFormats,\n              private _changeDetectorRef: ChangeDetectorRef) {\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n    if (!this._dateFormats) {\n      throw createMissingDateImplError('MAT_DATE_FORMATS');\n    }\n\n    const firstDayOfWeek = this._dateAdapter.getFirstDayOfWeek();\n    const narrowWeekdays = this._dateAdapter.getDayOfWeekNames('narrow');\n    const longWeekdays = this._dateAdapter.getDayOfWeekNames('long');\n\n    // Rotate the labels for days of the week based on the configured first day of the week.\n    let weekdays = longWeekdays.map((long, i) => {\n      return {long, narrow: narrowWeekdays[i]};\n    });\n    this._weekdays = weekdays.slice(firstDayOfWeek).concat(weekdays.slice(0, firstDayOfWeek));\n\n    this._activeDate = this._dateAdapter.today();\n  }\n\n  ngAfterContentInit(): void {\n    this._init();\n  }\n\n  /** Handles when a new date is selected. */\n  _dateSelected(date: number) {\n    if (this._selectedDate != date) {\n      const selectedYear = this._dateAdapter.getYear(this.activeDate);\n      const selectedMonth = this._dateAdapter.getMonth(this.activeDate);\n      const selectedDate = this._dateAdapter.createDate(selectedYear, selectedMonth, date);\n\n      this.selectedChange.emit(selectedDate);\n    }\n\n    this._userSelection.emit();\n  }\n\n  /** Initializes this month view. */\n  _init() {\n    this._selectedDate = this._getDateInCurrentMonth(this.selected);\n    this._todayDate = this._getDateInCurrentMonth(this._dateAdapter.today());\n    this._monthLabel =\n        this._dateAdapter.getMonthNames('short')[this._dateAdapter.getMonth(this.activeDate)]\n            .toLocaleUpperCase();\n\n    let firstOfMonth = this._dateAdapter.createDate(this._dateAdapter.getYear(this.activeDate),\n        this._dateAdapter.getMonth(this.activeDate), 1);\n    this._firstWeekOffset =\n        (DAYS_PER_WEEK + this._dateAdapter.getDayOfWeek(firstOfMonth) -\n         this._dateAdapter.getFirstDayOfWeek()) % DAYS_PER_WEEK;\n\n    this._createWeekCells();\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Creates MatCalendarCells for the dates in this month. */\n  private _createWeekCells() {\n    let daysInMonth = this._dateAdapter.getNumDaysInMonth(this.activeDate);\n    let dateNames = this._dateAdapter.getDateNames();\n    this._weeks = [[]];\n    for (let i = 0, cell = this._firstWeekOffset; i < daysInMonth; i++, cell++) {\n      if (cell == DAYS_PER_WEEK) {\n        this._weeks.push([]);\n        cell = 0;\n      }\n      let date = this._dateAdapter.createDate(\n          this._dateAdapter.getYear(this.activeDate),\n          this._dateAdapter.getMonth(this.activeDate), i + 1);\n      let enabled = !this.dateFilter ||\n          this.dateFilter(date);\n      let ariaLabel = this._dateAdapter.format(date, this._dateFormats.display.dateA11yLabel);\n      this._weeks[this._weeks.length - 1]\n          .push(new MatCalendarCell(i + 1, dateNames[i], ariaLabel, enabled));\n    }\n  }\n\n  /**\n   * Gets the date in this month that the given Date falls on.\n   * Returns null if the given Date is in another month.\n   */\n  private _getDateInCurrentMonth(date: D | null): number | null {\n    return date && this._hasSameMonthAndYear(date, this.activeDate) ?\n        this._dateAdapter.getDate(date) : null;\n  }\n\n  /** Checks whether the 2 dates are non-null and fall within the same month of the same year. */\n  private _hasSameMonthAndYear(d1: D | null, d2: D | null): boolean {\n    return !!(d1 && d2 && this._dateAdapter.getMonth(d1) == this._dateAdapter.getMonth(d2) &&\n              this._dateAdapter.getYear(d1) == this._dateAdapter.getYear(d2));\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  Component,\n  EventEmitter,\n  Inject,\n  Input,\n  Optional,\n  Output,\n  ViewEncapsulation,\n  ChangeDetectorRef,\n} from '@angular/core';\nimport {DateAdapter, MAT_DATE_FORMATS, MatDateFormats} from '@angular/material/core';\nimport {MatCalendarCell} from './calendar-body';\nimport {createMissingDateImplError} from './datepicker-errors';\n\n\n/**\n * An internal component used to display a single year in the datepicker.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-year-view',\n  templateUrl: 'year-view.html',\n  exportAs: 'matYearView',\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatYearView<D> implements AfterContentInit {\n  /** The date to display in this year view (everything other than the year is ignored). */\n  @Input()\n  get activeDate(): D { return this._activeDate; }\n  set activeDate(value: D) {\n    let oldActiveDate = this._activeDate;\n    this._activeDate =\n        this._getValidDateOrNull(this._dateAdapter.deserialize(value)) || this._dateAdapter.today();\n    if (this._dateAdapter.getYear(oldActiveDate) != this._dateAdapter.getYear(this._activeDate)) {\n      this._init();\n    }\n  }\n  private _activeDate: D;\n\n  /** The currently selected date. */\n  @Input()\n  get selected(): D | null { return this._selected; }\n  set selected(value: D | null) {\n    this._selected = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n    this._selectedMonth = this._getMonthInCurrentYear(this._selected);\n  }\n  private _selected: D | null;\n\n  /** A function used to filter which dates are selectable. */\n  @Input() dateFilter: (date: D) => boolean;\n\n  /** Emits when a new month is selected. */\n  @Output() selectedChange = new EventEmitter<D>();\n\n  /** Grid of calendar cells representing the months of the year. */\n  _months: MatCalendarCell[][];\n\n  /** The label for this year (e.g. \"2017\"). */\n  _yearLabel: string;\n\n  /** The month in this year that today falls on. Null if today is in a different year. */\n  _todayMonth: number | null;\n\n  /**\n   * The month in this year that the selected Date falls on.\n   * Null if the selected Date is in a different year.\n   */\n  _selectedMonth: number | null;\n\n  constructor(@Optional() public _dateAdapter: DateAdapter<D>,\n              @Optional() @Inject(MAT_DATE_FORMATS) private _dateFormats: MatDateFormats,\n              private _changeDetectorRef: ChangeDetectorRef) {\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n    if (!this._dateFormats) {\n      throw createMissingDateImplError('MAT_DATE_FORMATS');\n    }\n\n    this._activeDate = this._dateAdapter.today();\n  }\n\n  ngAfterContentInit() {\n    this._init();\n  }\n\n  /** Handles when a new month is selected. */\n  _monthSelected(month: number) {\n    let daysInMonth = this._dateAdapter.getNumDaysInMonth(\n        this._dateAdapter.createDate(this._dateAdapter.getYear(this.activeDate), month, 1));\n    this.selectedChange.emit(this._dateAdapter.createDate(\n        this._dateAdapter.getYear(this.activeDate), month,\n        Math.min(this._dateAdapter.getDate(this.activeDate), daysInMonth)));\n  }\n\n  /** Initializes this month view. */\n  _init() {\n    this._selectedMonth = this._getMonthInCurrentYear(this.selected);\n    this._todayMonth = this._getMonthInCurrentYear(this._dateAdapter.today());\n    this._yearLabel = this._dateAdapter.getYearName(this.activeDate);\n\n    let monthNames = this._dateAdapter.getMonthNames('short');\n    // First row of months only contains 5 elements so we can fit the year label on the same row.\n    this._months = [[0, 1, 2, 3], [4, 5, 6, 7], [8, 9, 10, 11]].map(row => row.map(\n        month => this._createCellForMonth(month, monthNames[month])));\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /**\n   * Gets the month in this year that the given Date falls on.\n   * Returns null if the given Date is in another year.\n   */\n  private _getMonthInCurrentYear(date: D | null) {\n    return date && this._dateAdapter.getYear(date) == this._dateAdapter.getYear(this.activeDate) ?\n        this._dateAdapter.getMonth(date) : null;\n  }\n\n  /** Creates an MatCalendarCell for the given month. */\n  private _createCellForMonth(month: number, monthName: string) {\n    let ariaLabel = this._dateAdapter.format(\n        this._dateAdapter.createDate(this._dateAdapter.getYear(this.activeDate), month, 1),\n        this._dateFormats.display.monthYearA11yLabel);\n    return new MatCalendarCell(\n        month, monthName.toLocaleUpperCase(), ariaLabel, this._isMonthEnabled(month));\n  }\n\n  /** Whether the given month is enabled. */\n  private _isMonthEnabled(month: number) {\n    if (!this.dateFilter) {\n      return true;\n    }\n\n    let firstOfMonth = this._dateAdapter.createDate(\n        this._dateAdapter.getYear(this.activeDate), month, 1);\n\n    // If any date in the month is enabled count the month as enabled.\n    for (let date = firstOfMonth; this._dateAdapter.getMonth(date) == month;\n         date = this._dateAdapter.addCalendarDays(date, 1)) {\n      if (this.dateFilter(date)) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  DOWN_ARROW,\n  END,\n  ENTER,\n  HOME,\n  LEFT_ARROW,\n  PAGE_DOWN,\n  PAGE_UP,\n  RIGHT_ARROW,\n  UP_ARROW,\n} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  Output,\n  ViewEncapsulation,\n  ViewChild,\n  OnChanges,\n  SimpleChanges,\n} from '@angular/core';\nimport {DateAdapter, MAT_DATE_FORMATS, MatDateFormats} from '@angular/material/core';\nimport {take} from 'rxjs/operators/take';\nimport {Subscription} from 'rxjs/Subscription';\nimport {createMissingDateImplError} from './datepicker-errors';\nimport {MatDatepickerIntl} from './datepicker-intl';\nimport {MatMonthView} from './month-view';\nimport {MatYearView} from './year-view';\n\n\n/**\n * A calendar that is used as part of the datepicker.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-calendar',\n  templateUrl: 'calendar.html',\n  styleUrls: ['calendar.css'],\n  host: {\n    'class': 'mat-calendar',\n  },\n  exportAs: 'matCalendar',\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatCalendar<D> implements AfterContentInit, OnDestroy, OnChanges {\n  private _intlChanges: Subscription;\n\n  /** A date representing the period (month or year) to start the calendar in. */\n  @Input()\n  get startAt(): D | null { return this._startAt; }\n  set startAt(value: D | null) {\n    this._startAt = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _startAt: D | null;\n\n  /** Whether the calendar should be started in month or year view. */\n  @Input() startView: 'month' | 'year' = 'month';\n\n  /** The currently selected date. */\n  @Input()\n  get selected(): D | null { return this._selected; }\n  set selected(value: D | null) {\n    this._selected = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _selected: D | null;\n\n  /** The minimum selectable date. */\n  @Input()\n  get minDate(): D | null { return this._minDate; }\n  set minDate(value: D | null) {\n    this._minDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _minDate: D | null;\n\n  /** The maximum selectable date. */\n  @Input()\n  get maxDate(): D | null { return this._maxDate; }\n  set maxDate(value: D | null) {\n    this._maxDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _maxDate: D | null;\n\n  /** A function used to filter which dates are selectable. */\n  @Input() dateFilter: (date: D) => boolean;\n\n  /** Emits when the currently selected date changes. */\n  @Output() selectedChange = new EventEmitter<D>();\n\n  /** Emits when any date is selected. */\n  @Output() _userSelection = new EventEmitter<void>();\n\n  /** Reference to the current month view component. */\n  @ViewChild(MatMonthView) monthView: MatMonthView<D>;\n\n  /** Reference to the current year view component. */\n  @ViewChild(MatYearView) yearView: MatYearView<D>;\n\n  /** Date filter for the month and year views. */\n  _dateFilterForViews = (date: D) => {\n    return !!date &&\n        (!this.dateFilter || this.dateFilter(date)) &&\n        (!this.minDate || this._dateAdapter.compareDate(date, this.minDate) >= 0) &&\n        (!this.maxDate || this._dateAdapter.compareDate(date, this.maxDate) <= 0);\n  }\n\n  /**\n   * The current active date. This determines which time period is shown and which date is\n   * highlighted when using keyboard navigation.\n   */\n  get _activeDate(): D { return this._clampedActiveDate; }\n  set _activeDate(value: D) {\n    this._clampedActiveDate = this._dateAdapter.clampDate(value, this.minDate, this.maxDate);\n  }\n  private _clampedActiveDate: D;\n\n  /** Whether the calendar is in month view. */\n  _monthView: boolean;\n\n  /** The label for the current calendar view. */\n  get _periodButtonText(): string {\n    return this._monthView ?\n        this._dateAdapter.format(this._activeDate, this._dateFormats.display.monthYearLabel)\n            .toLocaleUpperCase() :\n        this._dateAdapter.getYearName(this._activeDate);\n  }\n\n  get _periodButtonLabel(): string {\n    return this._monthView ? this._intl.switchToYearViewLabel : this._intl.switchToMonthViewLabel;\n  }\n\n  /** The label for the the previous button. */\n  get _prevButtonLabel(): string {\n    return this._monthView ? this._intl.prevMonthLabel : this._intl.prevYearLabel;\n  }\n\n  /** The label for the the next button. */\n  get _nextButtonLabel(): string {\n    return this._monthView ? this._intl.nextMonthLabel : this._intl.nextYearLabel;\n  }\n\n  constructor(private _elementRef: ElementRef,\n              private _intl: MatDatepickerIntl,\n              private _ngZone: NgZone,\n              @Optional() private _dateAdapter: DateAdapter<D>,\n              @Optional() @Inject(MAT_DATE_FORMATS) private _dateFormats: MatDateFormats,\n              changeDetectorRef: ChangeDetectorRef) {\n\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n\n    if (!this._dateFormats) {\n      throw createMissingDateImplError('MAT_DATE_FORMATS');\n    }\n\n    this._intlChanges = _intl.changes.subscribe(() => changeDetectorRef.markForCheck());\n  }\n\n  ngAfterContentInit() {\n    this._activeDate = this.startAt || this._dateAdapter.today();\n    this._focusActiveCell();\n    this._monthView = this.startView != 'year';\n  }\n\n  ngOnDestroy() {\n    this._intlChanges.unsubscribe();\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    const change = changes.minDate || changes.maxDate || changes.dateFilter;\n\n    if (change && !change.firstChange) {\n      const view = this.monthView || this.yearView;\n\n      if (view) {\n        view._init();\n      }\n    }\n  }\n\n  /** Handles date selection in the month view. */\n  _dateSelected(date: D): void {\n    if (!this._dateAdapter.sameDate(date, this.selected)) {\n      this.selectedChange.emit(date);\n    }\n  }\n\n  _userSelected(): void {\n    this._userSelection.emit();\n  }\n\n  /** Handles month selection in the year view. */\n  _monthSelected(month: D): void {\n    this._activeDate = month;\n    this._monthView = true;\n  }\n\n  /** Handles user clicks on the period label. */\n  _currentPeriodClicked(): void {\n    this._monthView = !this._monthView;\n  }\n\n  /** Handles user clicks on the previous button. */\n  _previousClicked(): void {\n    this._activeDate = this._monthView ?\n        this._dateAdapter.addCalendarMonths(this._activeDate, -1) :\n        this._dateAdapter.addCalendarYears(this._activeDate, -1);\n  }\n\n  /** Handles user clicks on the next button. */\n  _nextClicked(): void {\n    this._activeDate = this._monthView ?\n        this._dateAdapter.addCalendarMonths(this._activeDate, 1) :\n        this._dateAdapter.addCalendarYears(this._activeDate, 1);\n  }\n\n  /** Whether the previous period button is enabled. */\n  _previousEnabled(): boolean {\n    if (!this.minDate) {\n      return true;\n    }\n    return !this.minDate || !this._isSameView(this._activeDate, this.minDate);\n  }\n\n  /** Whether the next period button is enabled. */\n  _nextEnabled(): boolean {\n    return !this.maxDate || !this._isSameView(this._activeDate, this.maxDate);\n  }\n\n  /** Handles keydown events on the calendar body. */\n  _handleCalendarBodyKeydown(event: KeyboardEvent): void {\n    // TODO(mmalerba): We currently allow keyboard navigation to disabled dates, but just prevent\n    // disabled ones from being selected. This may not be ideal, we should look into whether\n    // navigation should skip over disabled dates, and if so, how to implement that efficiently.\n    if (this._monthView) {\n      this._handleCalendarBodyKeydownInMonthView(event);\n    } else {\n      this._handleCalendarBodyKeydownInYearView(event);\n    }\n  }\n\n  /** Focuses the active cell after the microtask queue is empty. */\n  _focusActiveCell() {\n    this._ngZone.runOutsideAngular(() => {\n      this._ngZone.onStable.asObservable().pipe(take(1)).subscribe(() => {\n        this._elementRef.nativeElement.querySelector('.mat-calendar-body-active').focus();\n      });\n    });\n  }\n\n  /** Whether the two dates represent the same view in the current view mode (month or year). */\n  private _isSameView(date1: D, date2: D): boolean {\n    return this._monthView ?\n        this._dateAdapter.getYear(date1) == this._dateAdapter.getYear(date2) &&\n        this._dateAdapter.getMonth(date1) == this._dateAdapter.getMonth(date2) :\n        this._dateAdapter.getYear(date1) == this._dateAdapter.getYear(date2);\n  }\n\n  /** Handles keydown events on the calendar body when calendar is in month view. */\n  private _handleCalendarBodyKeydownInMonthView(event: KeyboardEvent): void {\n    switch (event.keyCode) {\n      case LEFT_ARROW:\n        this._activeDate = this._dateAdapter.addCalendarDays(this._activeDate, -1);\n        break;\n      case RIGHT_ARROW:\n        this._activeDate = this._dateAdapter.addCalendarDays(this._activeDate, 1);\n        break;\n      case UP_ARROW:\n        this._activeDate = this._dateAdapter.addCalendarDays(this._activeDate, -7);\n        break;\n      case DOWN_ARROW:\n        this._activeDate = this._dateAdapter.addCalendarDays(this._activeDate, 7);\n        break;\n      case HOME:\n        this._activeDate = this._dateAdapter.addCalendarDays(this._activeDate,\n            1 - this._dateAdapter.getDate(this._activeDate));\n        break;\n      case END:\n        this._activeDate = this._dateAdapter.addCalendarDays(this._activeDate,\n            (this._dateAdapter.getNumDaysInMonth(this._activeDate) -\n             this._dateAdapter.getDate(this._activeDate)));\n        break;\n      case PAGE_UP:\n        this._activeDate = event.altKey ?\n            this._dateAdapter.addCalendarYears(this._activeDate, -1) :\n            this._dateAdapter.addCalendarMonths(this._activeDate, -1);\n        break;\n      case PAGE_DOWN:\n        this._activeDate = event.altKey ?\n            this._dateAdapter.addCalendarYears(this._activeDate, 1) :\n            this._dateAdapter.addCalendarMonths(this._activeDate, 1);\n        break;\n      case ENTER:\n        if (this._dateFilterForViews(this._activeDate)) {\n          this._dateSelected(this._activeDate);\n          this._userSelected();\n          // Prevent unexpected default actions such as form submission.\n          event.preventDefault();\n        }\n        return;\n      default:\n        // Don't prevent default or focus active cell on keys that we don't explicitly handle.\n        return;\n    }\n\n    this._focusActiveCell();\n    // Prevent unexpected default actions such as form submission.\n    event.preventDefault();\n  }\n\n  /** Handles keydown events on the calendar body when calendar is in year view. */\n  private _handleCalendarBodyKeydownInYearView(event: KeyboardEvent): void {\n    switch (event.keyCode) {\n      case LEFT_ARROW:\n        this._activeDate = this._dateAdapter.addCalendarMonths(this._activeDate, -1);\n        break;\n      case RIGHT_ARROW:\n        this._activeDate = this._dateAdapter.addCalendarMonths(this._activeDate, 1);\n        break;\n      case UP_ARROW:\n        this._activeDate = this._prevMonthInSameCol(this._activeDate);\n        break;\n      case DOWN_ARROW:\n        this._activeDate = this._nextMonthInSameCol(this._activeDate);\n        break;\n      case HOME:\n        this._activeDate = this._dateAdapter.addCalendarMonths(this._activeDate,\n            -this._dateAdapter.getMonth(this._activeDate));\n        break;\n      case END:\n        this._activeDate = this._dateAdapter.addCalendarMonths(this._activeDate,\n            11 - this._dateAdapter.getMonth(this._activeDate));\n        break;\n      case PAGE_UP:\n        this._activeDate =\n            this._dateAdapter.addCalendarYears(this._activeDate, event.altKey ? -10 : -1);\n        break;\n      case PAGE_DOWN:\n        this._activeDate =\n            this._dateAdapter.addCalendarYears(this._activeDate, event.altKey ? 10 : 1);\n        break;\n      case ENTER:\n        this._monthSelected(this._activeDate);\n        break;\n      default:\n        // Don't prevent default or focus active cell on keys that we don't explicitly handle.\n        return;\n    }\n\n    this._focusActiveCell();\n    // Prevent unexpected default actions such as form submission.\n    event.preventDefault();\n  }\n\n  /**\n   * Determine the date for the month that comes before the given month in the same column in the\n   * calendar table.\n   */\n  private _prevMonthInSameCol(date: D): D {\n    // Decrement by 4 since there are 4 months per row.\n    return this._dateAdapter.addCalendarMonths(date, -4);\n  }\n\n  /**\n   * Determine the date for the month that comes after the given month in the same column in the\n   * calendar table.\n   */\n  private _nextMonthInSameCol(date: D): D {\n    // Increment by 4 since there are 4 months per row.\n    return this._dateAdapter.addCalendarMonths(date, 4);\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {ESCAPE} from '@angular/cdk/keycodes';\nimport {\n  Overlay,\n  OverlayConfig,\n  OverlayRef,\n  PositionStrategy,\n  RepositionScrollStrategy,\n  ScrollStrategy,\n} from '@angular/cdk/overlay';\nimport {ComponentPortal} from '@angular/cdk/portal';\nimport {take} from 'rxjs/operators/take';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  Component,\n  ComponentRef,\n  EventEmitter,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  Output,\n  ViewChild,\n  ViewContainerRef,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {DateAdapter} from '@angular/material/core';\nimport {MatDialog, MatDialogRef} from '@angular/material/dialog';\nimport {DOCUMENT} from '@angular/common';\nimport {Subject} from 'rxjs/Subject';\nimport {Subscription} from 'rxjs/Subscription';\nimport {merge} from 'rxjs/observable/merge';\nimport {MatCalendar} from './calendar';\nimport {createMissingDateImplError} from './datepicker-errors';\nimport {MatDatepickerInput} from './datepicker-input';\n\n\n/** Used to generate a unique ID for each datepicker instance. */\nlet datepickerUid = 0;\n\n/** Injection token that determines the scroll handling while the calendar is open. */\nexport const MAT_DATEPICKER_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mat-datepicker-scroll-strategy');\n\n/** @docs-private */\nexport function MAT_DATEPICKER_SCROLL_STRATEGY_PROVIDER_FACTORY(overlay: Overlay):\n    () => RepositionScrollStrategy {\n  return () => overlay.scrollStrategies.reposition();\n}\n\n/** @docs-private */\nexport const MAT_DATEPICKER_SCROLL_STRATEGY_PROVIDER = {\n  provide: MAT_DATEPICKER_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_DATEPICKER_SCROLL_STRATEGY_PROVIDER_FACTORY,\n};\n\n\n/**\n * Component used as the content for the datepicker dialog and popup. We use this instead of using\n * MatCalendar directly as the content so we can control the initial focus. This also gives us a\n * place to put additional features of the popup that are not part of the calendar itself in the\n * future. (e.g. confirmation buttons).\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-datepicker-content',\n  templateUrl: 'datepicker-content.html',\n  styleUrls: ['datepicker-content.css'],\n  host: {\n    'class': 'mat-datepicker-content',\n    '[class.mat-datepicker-content-touch]': 'datepicker.touchUi',\n    '(keydown)': '_handleKeydown($event)',\n  },\n  exportAs: 'matDatepickerContent',\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatDatepickerContent<D> implements AfterContentInit {\n  datepicker: MatDatepicker<D>;\n\n  @ViewChild(MatCalendar) _calendar: MatCalendar<D>;\n\n  ngAfterContentInit() {\n    this._calendar._focusActiveCell();\n  }\n\n  /**\n   * Handles keydown event on datepicker content.\n   * @param event The event.\n   */\n  _handleKeydown(event: KeyboardEvent): void {\n    if (event.keyCode === ESCAPE) {\n      this.datepicker.close();\n      event.preventDefault();\n      event.stopPropagation();\n    }\n  }\n}\n\n\n// TODO(mmalerba): We use a component instead of a directive here so the user can use implicit\n// template reference variables (e.g. #d vs #d=\"matDatepicker\"). We can change this to a directive\n// if angular adds support for `exportAs: '$implicit'` on directives.\n/** Component responsible for managing the datepicker popup/dialog. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-datepicker',\n  template: '',\n  exportAs: 'matDatepicker',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n})\nexport class MatDatepicker<D> implements OnDestroy {\n  /** The date to open the calendar to initially. */\n  @Input()\n  get startAt(): D | null {\n    // If an explicit startAt is set we start there, otherwise we start at whatever the currently\n    // selected value is.\n    return this._startAt || (this._datepickerInput ? this._datepickerInput.value : null);\n  }\n  set startAt(date: D | null) {\n    this._startAt = this._getValidDateOrNull(this._dateAdapter.deserialize(date));\n  }\n  private _startAt: D | null;\n\n  /** The view that the calendar should start in. */\n  @Input() startView: 'month' | 'year' = 'month';\n\n  /**\n   * Whether the calendar UI is in touch mode. In touch mode the calendar opens in a dialog rather\n   * than a popup and elements have more padding to allow for bigger touch targets.\n   */\n  @Input()\n  get touchUi(): boolean {\n    return this._touchUi;\n  }\n  set touchUi(value: boolean) {\n    this._touchUi = coerceBooleanProperty(value);\n  }\n  private _touchUi = false;\n\n  /** Whether the datepicker pop-up should be disabled. */\n  @Input()\n  get disabled(): boolean {\n    return this._disabled === undefined && this._datepickerInput ?\n        this._datepickerInput.disabled : !!this._disabled;\n  }\n  set disabled(value: boolean) {\n    const newValue = coerceBooleanProperty(value);\n\n    if (newValue !== this._disabled) {\n      this._disabled = newValue;\n      this._disabledChange.next(newValue);\n    }\n  }\n  private _disabled: boolean;\n\n  /**\n   * Emits new selected date when selected date changes.\n   * @deprecated Switch to the `dateChange` and `dateInput` binding on the input element.\n   */\n  @Output() selectedChanged = new EventEmitter<D>();\n\n  /** Classes to be passed to the date picker panel. Supports the same syntax as `ngClass`. */\n  @Input() panelClass: string | string[];\n\n  /** Emits when the datepicker has been opened. */\n  @Output('opened') openedStream: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Emits when the datepicker has been closed. */\n  @Output('closed') closedStream: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Whether the calendar is open. */\n  @Input()\n  get opened(): boolean { return this._opened; }\n  set opened(shouldOpen: boolean) { shouldOpen ? this.open() : this.close(); }\n  private _opened = false;\n\n  /** The id for the datepicker calendar. */\n  id = `mat-datepicker-${datepickerUid++}`;\n\n  /** The currently selected date. */\n  get _selected(): D | null { return this._validSelected; }\n  set _selected(value: D | null) { this._validSelected = value; }\n  private _validSelected: D | null = null;\n\n  /** The minimum selectable date. */\n  get _minDate(): D | null {\n    return this._datepickerInput && this._datepickerInput.min;\n  }\n\n  /** The maximum selectable date. */\n  get _maxDate(): D | null {\n    return this._datepickerInput && this._datepickerInput.max;\n  }\n\n  get _dateFilter(): (date: D | null) => boolean {\n    return this._datepickerInput && this._datepickerInput._dateFilter;\n  }\n\n  /** A reference to the overlay when the calendar is opened as a popup. */\n  private _popupRef: OverlayRef;\n\n  /** A reference to the dialog when the calendar is opened as a dialog. */\n  private _dialogRef: MatDialogRef<any> | null;\n\n  /** A portal containing the calendar for this datepicker. */\n  private _calendarPortal: ComponentPortal<MatDatepickerContent<D>>;\n\n  /** The element that was focused before the datepicker was opened. */\n  private _focusedElementBeforeOpen: HTMLElement | null = null;\n\n  private _inputSubscription = Subscription.EMPTY;\n\n  /** The input element this datepicker is associated with. */\n  _datepickerInput: MatDatepickerInput<D>;\n\n  /** Emits when the datepicker is disabled. */\n  _disabledChange = new Subject<boolean>();\n\n  constructor(private _dialog: MatDialog,\n              private _overlay: Overlay,\n              private _ngZone: NgZone,\n              private _viewContainerRef: ViewContainerRef,\n              @Inject(MAT_DATEPICKER_SCROLL_STRATEGY) private _scrollStrategy,\n              @Optional() private _dateAdapter: DateAdapter<D>,\n              @Optional() private _dir: Directionality,\n              @Optional() @Inject(DOCUMENT) private _document: any) {\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n  }\n\n  ngOnDestroy() {\n    this.close();\n    this._inputSubscription.unsubscribe();\n    this._disabledChange.complete();\n\n    if (this._popupRef) {\n      this._popupRef.dispose();\n    }\n  }\n\n  /** Selects the given date */\n  _select(date: D): void {\n    let oldValue = this._selected;\n    this._selected = date;\n    if (!this._dateAdapter.sameDate(oldValue, this._selected)) {\n      this.selectedChanged.emit(date);\n    }\n  }\n\n  /**\n   * Register an input with this datepicker.\n   * @param input The datepicker input to register with this datepicker.\n   */\n  _registerInput(input: MatDatepickerInput<D>): void {\n    if (this._datepickerInput) {\n      throw Error('A MatDatepicker can only be associated with a single input.');\n    }\n    this._datepickerInput = input;\n    this._inputSubscription =\n        this._datepickerInput._valueChange.subscribe((value: D | null) => this._selected = value);\n  }\n\n  /** Open the calendar. */\n  open(): void {\n    if (this._opened || this.disabled) {\n      return;\n    }\n    if (!this._datepickerInput) {\n      throw Error('Attempted to open an MatDatepicker with no associated input.');\n    }\n    if (this._document) {\n      this._focusedElementBeforeOpen = this._document.activeElement;\n    }\n\n    this.touchUi ? this._openAsDialog() : this._openAsPopup();\n    this._opened = true;\n    this.openedStream.emit();\n  }\n\n  /** Close the calendar. */\n  close(): void {\n    if (!this._opened) {\n      return;\n    }\n    if (this._popupRef && this._popupRef.hasAttached()) {\n      this._popupRef.detach();\n    }\n    if (this._dialogRef) {\n      this._dialogRef.close();\n      this._dialogRef = null;\n    }\n    if (this._calendarPortal && this._calendarPortal.isAttached) {\n      this._calendarPortal.detach();\n    }\n\n    const completeClose = () => {\n      // The `_opened` could've been reset already if\n      // we got two events in quick succession.\n      if (this._opened) {\n        this._opened = false;\n        this.closedStream.emit();\n        this._focusedElementBeforeOpen = null;\n      }\n    };\n\n    if (this._focusedElementBeforeOpen &&\n      typeof this._focusedElementBeforeOpen.focus === 'function') {\n      // Because IE moves focus asynchronously, we can't count on it being restored before we've\n      // marked the datepicker as closed. If the event fires out of sequence and the element that\n      // we're refocusing opens the datepicker on focus, the user could be stuck with not being\n      // able to close the calendar at all. We work around it by making the logic, that marks\n      // the datepicker as closed, async as well.\n      this._focusedElementBeforeOpen.focus();\n      setTimeout(completeClose);\n    } else {\n      completeClose();\n    }\n  }\n\n  /** Open the calendar as a dialog. */\n  private _openAsDialog(): void {\n    this._dialogRef = this._dialog.open(MatDatepickerContent, {\n      direction: this._dir ? this._dir.value : 'ltr',\n      viewContainerRef: this._viewContainerRef,\n      panelClass: 'mat-datepicker-dialog',\n    });\n    this._dialogRef.afterClosed().subscribe(() => this.close());\n    this._dialogRef.componentInstance.datepicker = this;\n  }\n\n  /** Open the calendar as a popup. */\n  private _openAsPopup(): void {\n    if (!this._calendarPortal) {\n      this._calendarPortal = new ComponentPortal(MatDatepickerContent, this._viewContainerRef);\n    }\n\n    if (!this._popupRef) {\n      this._createPopup();\n    }\n\n    if (!this._popupRef.hasAttached()) {\n      let componentRef: ComponentRef<MatDatepickerContent<D>> =\n          this._popupRef.attach(this._calendarPortal);\n      componentRef.instance.datepicker = this;\n\n      // Update the position once the calendar has rendered.\n      this._ngZone.onStable.asObservable().pipe(take(1)).subscribe(() => {\n        this._popupRef.updatePosition();\n      });\n    }\n  }\n\n  /** Create the popup. */\n  private _createPopup(): void {\n    const overlayConfig = new OverlayConfig({\n      positionStrategy: this._createPopupPositionStrategy(),\n      hasBackdrop: true,\n      backdropClass: 'mat-overlay-transparent-backdrop',\n      direction: this._dir ? this._dir.value : 'ltr',\n      scrollStrategy: this._scrollStrategy(),\n      panelClass: 'mat-datepicker-popup',\n    });\n\n    this._popupRef = this._overlay.create(overlayConfig);\n\n    merge(this._popupRef.backdropClick(), this._popupRef.detachments())\n      .subscribe(() => this.close());\n  }\n\n  /** Create the popup PositionStrategy. */\n  private _createPopupPositionStrategy(): PositionStrategy {\n    const fallbackOffset = this._datepickerInput._getPopupFallbackOffset();\n\n    return this._overlay.position()\n      .connectedTo(this._datepickerInput.getPopupConnectionElementRef(),\n        {originX: 'start', originY: 'bottom'},\n        {overlayX: 'start', overlayY: 'top'}\n      )\n      .withFallbackPosition(\n        {originX: 'start', originY: 'top'},\n        {overlayX: 'start', overlayY: 'bottom'},\n        undefined,\n        fallbackOffset\n      )\n      .withFallbackPosition(\n        {originX: 'end', originY: 'bottom'},\n        {overlayX: 'end', overlayY: 'top'}\n      )\n      .withFallbackPosition(\n        {originX: 'end', originY: 'top'},\n        {overlayX: 'end', overlayY: 'bottom'},\n        undefined,\n        fallbackOffset\n      );\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {DOWN_ARROW} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  Directive,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  OnDestroy,\n  Optional,\n  Output,\n} from '@angular/core';\nimport {\n  AbstractControl,\n  ControlValueAccessor,\n  NG_VALIDATORS,\n  NG_VALUE_ACCESSOR,\n  ValidationErrors,\n  Validator,\n  ValidatorFn,\n  Validators\n} from '@angular/forms';\nimport {DateAdapter, MAT_DATE_FORMATS, MatDateFormats} from '@angular/material/core';\nimport {MatFormField} from '@angular/material/form-field';\nimport {MAT_INPUT_VALUE_ACCESSOR} from '@angular/material/input';\nimport {Subscription} from 'rxjs/Subscription';\nimport {MatDatepicker} from './datepicker';\nimport {createMissingDateImplError} from './datepicker-errors';\n\n\nexport const MAT_DATEPICKER_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatDatepickerInput),\n  multi: true\n};\n\n\nexport const MAT_DATEPICKER_VALIDATORS: any = {\n  provide: NG_VALIDATORS,\n  useExisting: forwardRef(() => MatDatepickerInput),\n  multi: true\n};\n\n\n/**\n * An event used for datepicker input and change events. We don't always have access to a native\n * input or change event because the event may have been triggered by the user clicking on the\n * calendar popup. For consistency, we always use MatDatepickerInputEvent instead.\n */\nexport class MatDatepickerInputEvent<D> {\n  /** The new value for the target datepicker input. */\n  value: D | null;\n\n  constructor(\n    /** Reference to the datepicker input component that emitted the event. */\n    public target: MatDatepickerInput<D>,\n    /** Reference to the native input element associated with the datepicker input. */\n    public targetElement: HTMLElement) {\n    this.value = this.target.value;\n  }\n}\n\n\n/** Directive used to connect an input to a MatDatepicker. */\n@Directive({\n  selector: 'input[matDatepicker]',\n  providers: [\n    MAT_DATEPICKER_VALUE_ACCESSOR,\n    MAT_DATEPICKER_VALIDATORS,\n    {provide: MAT_INPUT_VALUE_ACCESSOR, useExisting: MatDatepickerInput},\n  ],\n  host: {\n    '[attr.aria-haspopup]': 'true',\n    '[attr.aria-owns]': '(_datepicker?.opened && _datepicker.id) || null',\n    '[attr.min]': 'min ? _dateAdapter.toIso8601(min) : null',\n    '[attr.max]': 'max ? _dateAdapter.toIso8601(max) : null',\n    '[disabled]': 'disabled',\n    '(input)': '_onInput($event.target.value)',\n    '(change)': '_onChange()',\n    '(blur)': '_onTouched()',\n    '(keydown)': '_onKeydown($event)',\n  },\n  exportAs: 'matDatepickerInput',\n})\nexport class MatDatepickerInput<D> implements AfterContentInit, ControlValueAccessor, OnDestroy,\n    Validator {\n  /** The datepicker that this input is associated with. */\n  @Input()\n  set matDatepicker(value: MatDatepicker<D>) {\n    this.registerDatepicker(value);\n  }\n  _datepicker: MatDatepicker<D>;\n\n  private registerDatepicker(value: MatDatepicker<D>) {\n    if (value) {\n      this._datepicker = value;\n      this._datepicker._registerInput(this);\n    }\n  }\n\n  /** Function that can be used to filter out dates within the datepicker. */\n  @Input()\n  set matDatepickerFilter(filter: (date: D | null) => boolean) {\n    this._dateFilter = filter;\n    this._validatorOnChange();\n  }\n  _dateFilter: (date: D | null) => boolean;\n\n  /** The value of the input. */\n  @Input()\n  get value(): D | null {\n    return this._value;\n  }\n  set value(value: D | null) {\n    value = this._dateAdapter.deserialize(value);\n    this._lastValueValid = !value || this._dateAdapter.isValid(value);\n    value = this._getValidDateOrNull(value);\n    let oldDate = this.value;\n    this._value = value;\n    this._elementRef.nativeElement.value =\n        value ? this._dateAdapter.format(value, this._dateFormats.display.dateInput) : '';\n    if (!this._dateAdapter.sameDate(oldDate, value)) {\n      this._valueChange.emit(value);\n    }\n  }\n  private _value: D | null;\n\n  /** The minimum valid date. */\n  @Input()\n  get min(): D | null { return this._min; }\n  set min(value: D | null) {\n    this._min = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n    this._validatorOnChange();\n  }\n  private _min: D | null;\n\n  /** The maximum valid date. */\n  @Input()\n  get max(): D | null { return this._max; }\n  set max(value: D | null) {\n    this._max = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n    this._validatorOnChange();\n  }\n  private _max: D | null;\n\n  /** Whether the datepicker-input is disabled. */\n  @Input()\n  get disabled() { return !!this._disabled; }\n  set disabled(value: any) {\n    const newValue = coerceBooleanProperty(value);\n\n    if (this._disabled !== newValue) {\n      this._disabled = newValue;\n      this._disabledChange.emit(newValue);\n    }\n  }\n  private _disabled: boolean;\n\n  /** Emits when a `change` event is fired on this `<input>`. */\n  @Output() dateChange = new EventEmitter<MatDatepickerInputEvent<D>>();\n\n  /** Emits when an `input` event is fired on this `<input>`. */\n  @Output() dateInput = new EventEmitter<MatDatepickerInputEvent<D>>();\n\n  /** Emits when the value changes (either due to user input or programmatic change). */\n  _valueChange = new EventEmitter<D|null>();\n\n  /** Emits when the disabled state has changed */\n  _disabledChange = new EventEmitter<boolean>();\n\n  _onTouched = () => {};\n\n  private _cvaOnChange: (value: any) => void = () => {};\n\n  private _validatorOnChange = () => {};\n\n  private _datepickerSubscription = Subscription.EMPTY;\n\n  private _localeSubscription = Subscription.EMPTY;\n\n  /** The form control validator for whether the input parses. */\n  private _parseValidator: ValidatorFn = (): ValidationErrors | null => {\n    return this._lastValueValid ?\n        null : {'matDatepickerParse': {'text': this._elementRef.nativeElement.value}};\n  }\n\n  /** The form control validator for the min date. */\n  private _minValidator: ValidatorFn = (control: AbstractControl): ValidationErrors | null => {\n    const controlValue = this._getValidDateOrNull(this._dateAdapter.deserialize(control.value));\n    return (!this.min || !controlValue ||\n        this._dateAdapter.compareDate(this.min, controlValue) <= 0) ?\n        null : {'matDatepickerMin': {'min': this.min, 'actual': controlValue}};\n  }\n\n  /** The form control validator for the max date. */\n  private _maxValidator: ValidatorFn = (control: AbstractControl): ValidationErrors | null => {\n    const controlValue = this._getValidDateOrNull(this._dateAdapter.deserialize(control.value));\n    return (!this.max || !controlValue ||\n        this._dateAdapter.compareDate(this.max, controlValue) >= 0) ?\n        null : {'matDatepickerMax': {'max': this.max, 'actual': controlValue}};\n  }\n\n  /** The form control validator for the date filter. */\n  private _filterValidator: ValidatorFn = (control: AbstractControl): ValidationErrors | null => {\n    const controlValue = this._getValidDateOrNull(this._dateAdapter.deserialize(control.value));\n    return !this._dateFilter || !controlValue || this._dateFilter(controlValue) ?\n        null : {'matDatepickerFilter': true};\n  }\n\n  /** The combined form control validator for this input. */\n  private _validator: ValidatorFn | null =\n      Validators.compose(\n          [this._parseValidator, this._minValidator, this._maxValidator, this._filterValidator]);\n\n  /** Whether the last value set on the input was valid. */\n  private _lastValueValid = false;\n\n  constructor(\n      private _elementRef: ElementRef,\n      @Optional() public _dateAdapter: DateAdapter<D>,\n      @Optional() @Inject(MAT_DATE_FORMATS) private _dateFormats: MatDateFormats,\n      @Optional() private _formField: MatFormField) {\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n    if (!this._dateFormats) {\n      throw createMissingDateImplError('MAT_DATE_FORMATS');\n    }\n\n    // Update the displayed date when the locale changes.\n    this._localeSubscription = _dateAdapter.localeChanges.subscribe(() => {\n      this.value = this.value;\n    });\n  }\n\n  ngAfterContentInit() {\n    if (this._datepicker) {\n      this._datepickerSubscription =\n          this._datepicker.selectedChanged.subscribe((selected: D) => {\n            this.value = selected;\n            this._cvaOnChange(selected);\n            this._onTouched();\n            this.dateInput.emit(new MatDatepickerInputEvent(this, this._elementRef.nativeElement));\n            this.dateChange.emit(new MatDatepickerInputEvent(this, this._elementRef.nativeElement));\n          });\n    }\n  }\n\n  ngOnDestroy() {\n    this._datepickerSubscription.unsubscribe();\n    this._localeSubscription.unsubscribe();\n    this._valueChange.complete();\n    this._disabledChange.complete();\n  }\n\n  registerOnValidatorChange(fn: () => void): void {\n    this._validatorOnChange = fn;\n  }\n\n  validate(c: AbstractControl): ValidationErrors | null {\n    return this._validator ? this._validator(c) : null;\n  }\n\n  /**\n   * Gets the element that the datepicker popup should be connected to.\n   * @return The element to connect the popup to.\n   */\n  getPopupConnectionElementRef(): ElementRef {\n    return this._formField ? this._formField.underlineRef : this._elementRef;\n  }\n\n  /**\n   * Determines the offset to be used when the calendar goes into a fallback position.\n   * Primarily used to prevent the calendar from overlapping the input.\n   */\n  _getPopupFallbackOffset(): number {\n    return this._formField ? -this._formField._inputContainerRef.nativeElement.clientHeight : 0;\n  }\n\n  // Implemented as part of ControlValueAccessor\n  writeValue(value: D): void {\n    this.value = value;\n  }\n\n  // Implemented as part of ControlValueAccessor\n  registerOnChange(fn: (value: any) => void): void {\n    this._cvaOnChange = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor\n  registerOnTouched(fn: () => void): void {\n    this._onTouched = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor\n  setDisabledState(disabled: boolean): void {\n    this.disabled = disabled;\n  }\n\n  _onKeydown(event: KeyboardEvent) {\n    if (event.altKey && event.keyCode === DOWN_ARROW) {\n      this._datepicker.open();\n      event.preventDefault();\n    }\n  }\n\n  _onInput(value: string) {\n    let date = this._dateAdapter.parse(value, this._dateFormats.parse.dateInput);\n    this._lastValueValid = !date || this._dateAdapter.isValid(date);\n    date = this._getValidDateOrNull(date);\n    this._value = date;\n    this._cvaOnChange(date);\n    this._valueChange.emit(date);\n    this.dateInput.emit(new MatDatepickerInputEvent(this, this._elementRef.nativeElement));\n  }\n\n  _onChange() {\n    this.dateChange.emit(new MatDatepickerInputEvent(this, this._elementRef.nativeElement));\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ComponentRef,\n  ElementRef,\n  EmbeddedViewRef,\n  EventEmitter,\n  Inject,\n  Optional,\n  ChangeDetectorRef,\n  ViewChild,\n  ViewEncapsulation,\n  ChangeDetectionStrategy,\n} from '@angular/core';\nimport {DOCUMENT} from '@angular/common';\nimport {AnimationEvent} from '@angular/animations';\nimport {matDialogAnimations} from './dialog-animations';\nimport {\n  BasePortalOutlet,\n  ComponentPortal,\n  CdkPortalOutlet,\n  TemplatePortal\n} from '@angular/cdk/portal';\nimport {FocusTrap, FocusTrapFactory} from '@angular/cdk/a11y';\nimport {MatDialogConfig} from './dialog-config';\n\n\n/**\n * Throws an exception for the case when a ComponentPortal is\n * attached to a DomPortalOutlet without an origin.\n * @docs-private\n */\nexport function throwMatDialogContentAlreadyAttachedError() {\n  throw Error('Attempting to attach dialog content after content is already attached');\n}\n\n/**\n * Internal component that wraps user-provided dialog content.\n * Animation is based on https://material.io/guidelines/motion/choreography.html.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-dialog-container',\n  templateUrl: 'dialog-container.html',\n  styleUrls: ['dialog.css'],\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  // Using OnPush for dialogs caused some G3 sync issues. Disabled until we can track them down.\n  // tslint:disable-next-line:validate-decorators\n  changeDetection: ChangeDetectionStrategy.Default,\n  animations: [matDialogAnimations.slideDialog],\n  host: {\n    'class': 'mat-dialog-container',\n    'tabindex': '-1',\n    '[attr.role]': '_config?.role',\n    '[attr.aria-labelledby]': '_config?.ariaLabel ? null : _ariaLabelledBy',\n    '[attr.aria-label]': '_config?.ariaLabel',\n    '[attr.aria-describedby]': '_config?.ariaDescribedBy || null',\n    '[@slideDialog]': '_state',\n    '(@slideDialog.start)': '_onAnimationStart($event)',\n    '(@slideDialog.done)': '_onAnimationDone($event)',\n  },\n})\nexport class MatDialogContainer extends BasePortalOutlet {\n  /** The portal outlet inside of this container into which the dialog content will be loaded. */\n  @ViewChild(CdkPortalOutlet) _portalOutlet: CdkPortalOutlet;\n\n  /** The class that traps and manages focus within the dialog. */\n  private _focusTrap: FocusTrap;\n\n  /** Element that was focused before the dialog was opened. Save this to restore upon close. */\n  private _elementFocusedBeforeDialogWasOpened: HTMLElement | null = null;\n\n  /** The dialog configuration. */\n  _config: MatDialogConfig;\n\n  /** State of the dialog animation. */\n  _state: 'void' | 'enter' | 'exit' = 'enter';\n\n  /** Emits when an animation state changes. */\n  _animationStateChanged = new EventEmitter<AnimationEvent>();\n\n  /** ID of the element that should be considered as the dialog's label. */\n  _ariaLabelledBy: string | null = null;\n\n  constructor(\n    private _elementRef: ElementRef,\n    private _focusTrapFactory: FocusTrapFactory,\n    private _changeDetectorRef: ChangeDetectorRef,\n    @Optional() @Inject(DOCUMENT) private _document: any) {\n\n    super();\n  }\n\n  /**\n   * Attach a ComponentPortal as content to this dialog container.\n   * @param portal Portal to be attached as the dialog content.\n   */\n  attachComponentPortal<T>(portal: ComponentPortal<T>): ComponentRef<T> {\n    if (this._portalOutlet.hasAttached()) {\n      throwMatDialogContentAlreadyAttachedError();\n    }\n\n    this._savePreviouslyFocusedElement();\n    return this._portalOutlet.attachComponentPortal(portal);\n  }\n\n  /**\n   * Attach a TemplatePortal as content to this dialog container.\n   * @param portal Portal to be attached as the dialog content.\n   */\n  attachTemplatePortal<C>(portal: TemplatePortal<C>): EmbeddedViewRef<C> {\n    if (this._portalOutlet.hasAttached()) {\n      throwMatDialogContentAlreadyAttachedError();\n    }\n\n    this._savePreviouslyFocusedElement();\n    return this._portalOutlet.attachTemplatePortal(portal);\n  }\n\n  /** Moves the focus inside the focus trap. */\n  private _trapFocus() {\n    if (!this._focusTrap) {\n      this._focusTrap = this._focusTrapFactory.create(this._elementRef.nativeElement);\n    }\n\n    // If were to attempt to focus immediately, then the content of the dialog would not yet be\n    // ready in instances where change detection has to run first. To deal with this, we simply\n    // wait for the microtask queue to be empty.\n    if (this._config.autoFocus) {\n      this._focusTrap.focusInitialElementWhenReady();\n    }\n  }\n\n  /** Restores focus to the element that was focused before the dialog opened. */\n  private _restoreFocus() {\n    const toFocus = this._elementFocusedBeforeDialogWasOpened;\n\n    // We need the extra check, because IE can set the `activeElement` to null in some cases.\n    if (toFocus && typeof toFocus.focus === 'function') {\n      toFocus.focus();\n    }\n\n    if (this._focusTrap) {\n      this._focusTrap.destroy();\n    }\n  }\n\n  /** Saves a reference to the element that was focused before the dialog was opened. */\n  private _savePreviouslyFocusedElement() {\n    if (this._document) {\n      this._elementFocusedBeforeDialogWasOpened = this._document.activeElement as HTMLElement;\n\n      // Move focus onto the dialog immediately in order to prevent the user from accidentally\n      // opening multiple dialogs at the same time. Needs to be async, because the element\n      // may not be focusable immediately.\n      Promise.resolve().then(() => this._elementRef.nativeElement.focus());\n    }\n  }\n\n  /** Callback, invoked whenever an animation on the host completes. */\n  _onAnimationDone(event: AnimationEvent) {\n    if (event.toState === 'enter') {\n      this._trapFocus();\n    } else if (event.toState === 'exit') {\n      this._restoreFocus();\n    }\n\n    this._animationStateChanged.emit(event);\n  }\n\n  /** Callback, invoked when an animation on the host starts. */\n  _onAnimationStart(event: AnimationEvent) {\n    this._animationStateChanged.emit(event);\n  }\n\n  /** Starts the dialog exit animation. */\n  _startExitAnimation(): void {\n    this._state = 'exit';\n\n    // Mark the container for check so it can react if the\n    // view container is using OnPush change detection.\n    this._changeDetectorRef.markForCheck();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {OverlayRef, GlobalPositionStrategy} from '@angular/cdk/overlay';\nimport {ESCAPE} from '@angular/cdk/keycodes';\nimport {filter} from 'rxjs/operators/filter';\nimport {take} from 'rxjs/operators/take';\nimport {DialogPosition} from './dialog-config';\nimport {Observable} from 'rxjs/Observable';\nimport {Subject} from 'rxjs/Subject';\nimport {MatDialogContainer} from './dialog-container';\n\n\n// TODO(jelbourn): resizing\n\n// Counter for unique dialog ids.\nlet uniqueId = 0;\n\n/**\n * Reference to a dialog opened via the MatDialog service.\n */\nexport class MatDialogRef<T, R = any> {\n  /** The instance of component opened into the dialog. */\n  componentInstance: T;\n\n  /** Whether the user is allowed to close the dialog. */\n  disableClose = this._containerInstance._config.disableClose;\n\n  /** Subject for notifying the user that the dialog has finished opening. */\n  private _afterOpen = new Subject<void>();\n\n  /** Subject for notifying the user that the dialog has finished closing. */\n  private _afterClosed = new Subject<R | undefined>();\n\n  /** Subject for notifying the user that the dialog has started closing. */\n  private _beforeClose = new Subject<R | undefined>();\n\n  /** Result to be passed to afterClosed. */\n  private _result: R | undefined;\n\n  constructor(\n    private _overlayRef: OverlayRef,\n    private _containerInstance: MatDialogContainer,\n    readonly id: string = `mat-dialog-${uniqueId++}`) {\n\n    // Emit when opening animation completes\n    _containerInstance._animationStateChanged.pipe(\n      filter(event => event.phaseName === 'done' && event.toState === 'enter'),\n      take(1)\n    )\n    .subscribe(() => {\n      this._afterOpen.next();\n      this._afterOpen.complete();\n    });\n\n    // Dispose overlay when closing animation is complete\n    _containerInstance._animationStateChanged.pipe(\n      filter(event => event.phaseName === 'done' && event.toState === 'exit'),\n      take(1)\n    )\n    .subscribe(() => {\n      this._overlayRef.dispose();\n      this._afterClosed.next(this._result);\n      this._afterClosed.complete();\n      this.componentInstance = null!;\n    });\n\n    _overlayRef.keydownEvents()\n      .pipe(filter(event => event.keyCode === ESCAPE && !this.disableClose))\n      .subscribe(() => this.close());\n  }\n\n  /**\n   * Close the dialog.\n   * @param dialogResult Optional result to return to the dialog opener.\n   */\n  close(dialogResult?: R): void {\n    this._result = dialogResult;\n\n    // Transition the backdrop in parallel to the dialog.\n    this._containerInstance._animationStateChanged.pipe(\n      filter(event => event.phaseName === 'start'),\n      take(1)\n    )\n    .subscribe(() => {\n      this._beforeClose.next(dialogResult);\n      this._beforeClose.complete();\n      this._overlayRef.detachBackdrop();\n    });\n\n    this._containerInstance._startExitAnimation();\n  }\n\n  /**\n   * Gets an observable that is notified when the dialog is finished opening.\n   */\n  afterOpen(): Observable<void> {\n    return this._afterOpen.asObservable();\n  }\n\n  /**\n   * Gets an observable that is notified when the dialog is finished closing.\n   */\n  afterClosed(): Observable<R | undefined> {\n    return this._afterClosed.asObservable();\n  }\n\n  /**\n   * Gets an observable that is notified when the dialog has started closing.\n   */\n  beforeClose(): Observable<R | undefined> {\n    return this._beforeClose.asObservable();\n  }\n\n  /**\n   * Gets an observable that emits when the overlay's backdrop has been clicked.\n   */\n  backdropClick(): Observable<void> {\n    return this._overlayRef.backdropClick();\n  }\n\n  /**\n   * Gets an observable that emits when keydown events are targeted on the overlay.\n   */\n  keydownEvents(): Observable<KeyboardEvent> {\n    return this._overlayRef.keydownEvents();\n  }\n\n  /**\n   * Updates the dialog's position.\n   * @param position New dialog position.\n   */\n  updatePosition(position?: DialogPosition): this {\n    let strategy = this._getPositionStrategy();\n\n    if (position && (position.left || position.right)) {\n      position.left ? strategy.left(position.left) : strategy.right(position.right);\n    } else {\n      strategy.centerHorizontally();\n    }\n\n    if (position && (position.top || position.bottom)) {\n      position.top ? strategy.top(position.top) : strategy.bottom(position.bottom);\n    } else {\n      strategy.centerVertically();\n    }\n\n    this._overlayRef.updatePosition();\n\n    return this;\n  }\n\n  /**\n   * Updates the dialog's width and height.\n   * @param width New width of the dialog.\n   * @param height New height of the dialog.\n   */\n  updateSize(width: string = 'auto', height: string = 'auto'): this {\n    this._getPositionStrategy().width(width).height(height);\n    this._overlayRef.updatePosition();\n    return this;\n  }\n\n  /** Fetches the position strategy object from the overlay ref. */\n  private _getPositionStrategy(): GlobalPositionStrategy {\n    return this._overlayRef.getConfig().positionStrategy as GlobalPositionStrategy;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directionality} from '@angular/cdk/bidi';\nimport {\n  Overlay,\n  OverlayConfig,\n  OverlayRef,\n  ScrollStrategy,\n  OverlayContainer,\n} from '@angular/cdk/overlay';\nimport {ComponentPortal, ComponentType, PortalInjector, TemplatePortal} from '@angular/cdk/portal';\nimport {Location} from '@angular/common';\nimport {\n  ComponentRef,\n  Inject,\n  Injectable,\n  InjectionToken,\n  Injector,\n  Optional,\n  SkipSelf,\n  TemplateRef,\n} from '@angular/core';\nimport {Observable} from 'rxjs/Observable';\nimport {defer} from 'rxjs/observable/defer';\nimport {of as observableOf} from 'rxjs/observable/of';\nimport {startWith} from 'rxjs/operators/startWith';\nimport {Subject} from 'rxjs/Subject';\nimport {MatDialogConfig} from './dialog-config';\nimport {MatDialogContainer} from './dialog-container';\nimport {MatDialogRef} from './dialog-ref';\n\n\nexport const MAT_DIALOG_DATA = new InjectionToken<any>('MatDialogData');\n\n/** Injection token that can be used to specify default dialog options. */\nexport const MAT_DIALOG_DEFAULT_OPTIONS =\n    new InjectionToken<MatDialogConfig>('mat-dialog-default-options');\n\n/** Injection token that determines the scroll handling while the dialog is open. */\nexport const MAT_DIALOG_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mat-dialog-scroll-strategy');\n\n/** @docs-private */\nexport function MAT_DIALOG_SCROLL_STRATEGY_PROVIDER_FACTORY(overlay: Overlay):\n    () => ScrollStrategy {\n  return () => overlay.scrollStrategies.block();\n}\n\n/** @docs-private */\nexport const MAT_DIALOG_SCROLL_STRATEGY_PROVIDER = {\n  provide: MAT_DIALOG_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_DIALOG_SCROLL_STRATEGY_PROVIDER_FACTORY,\n};\n\n\n/**\n * Service to open Material Design modal dialogs.\n */\n@Injectable()\nexport class MatDialog {\n  private _openDialogsAtThisLevel: MatDialogRef<any>[] = [];\n  private _afterAllClosedAtThisLevel = new Subject<void>();\n  private _afterOpenAtThisLevel = new Subject<MatDialogRef<any>>();\n  private _ariaHiddenElements = new Map<Element, string|null>();\n\n  /** Keeps track of the currently-open dialogs. */\n  get openDialogs(): MatDialogRef<any>[] {\n    return this._parentDialog ? this._parentDialog.openDialogs : this._openDialogsAtThisLevel;\n  }\n\n  /** Stream that emits when a dialog has been opened. */\n  get afterOpen(): Subject<MatDialogRef<any>> {\n    return this._parentDialog ? this._parentDialog.afterOpen : this._afterOpenAtThisLevel;\n  }\n\n  get _afterAllClosed() {\n    const parent = this._parentDialog;\n    return parent ? parent._afterAllClosed : this._afterAllClosedAtThisLevel;\n  }\n\n  /**\n   * Stream that emits when all open dialog have finished closing.\n   * Will emit on subscribe if there are no open dialogs to begin with.\n   */\n  afterAllClosed: Observable<void> = defer<void>(() => this.openDialogs.length ?\n      this._afterAllClosed :\n      this._afterAllClosed.pipe(startWith(undefined)));\n\n  constructor(\n      private _overlay: Overlay,\n      private _injector: Injector,\n      @Optional() location: Location,\n      @Optional() @Inject(MAT_DIALOG_DEFAULT_OPTIONS) private _defaultOptions,\n      @Inject(MAT_DIALOG_SCROLL_STRATEGY) private _scrollStrategy,\n      @Optional() @SkipSelf() private _parentDialog: MatDialog,\n      private _overlayContainer: OverlayContainer) {\n\n    // Close all of the dialogs when the user goes forwards/backwards in history or when the\n    // location hash changes. Note that this usually doesn't include clicking on links (unless\n    // the user is using the `HashLocationStrategy`).\n    if (!_parentDialog && location) {\n      location.subscribe(() => this.closeAll());\n    }\n  }\n\n  /**\n   * Opens a modal dialog containing the given component.\n   * @param componentOrTemplateRef Type of the component to load into the dialog,\n   *     or a TemplateRef to instantiate as the dialog content.\n   * @param config Extra configuration options.\n   * @returns Reference to the newly-opened dialog.\n   */\n  open<T, D = any>(componentOrTemplateRef: ComponentType<T> | TemplateRef<T>,\n          config?: MatDialogConfig<D>): MatDialogRef<T> {\n\n    config = _applyConfigDefaults(config, this._defaultOptions || new MatDialogConfig());\n\n    if (config.id && this.getDialogById(config.id)) {\n      throw Error(`Dialog with id \"${config.id}\" exists already. The dialog id must be unique.`);\n    }\n\n    const overlayRef = this._createOverlay(config);\n    const dialogContainer = this._attachDialogContainer(overlayRef, config);\n    const dialogRef =\n        this._attachDialogContent<T>(componentOrTemplateRef, dialogContainer, overlayRef, config);\n\n    // If this is the first dialog that we're opening, hide all the non-overlay content.\n    if (!this.openDialogs.length) {\n      this._hideNonDialogContentFromAssistiveTechnology();\n    }\n\n    this.openDialogs.push(dialogRef);\n    dialogRef.afterClosed().subscribe(() => this._removeOpenDialog(dialogRef));\n    this.afterOpen.next(dialogRef);\n\n    return dialogRef;\n  }\n\n  /**\n   * Closes all of the currently-open dialogs.\n   */\n  closeAll(): void {\n    let i = this.openDialogs.length;\n\n    while (i--) {\n      // The `_openDialogs` property isn't updated after close until the rxjs subscription\n      // runs on the next microtask, in addition to modifying the array as we're going\n      // through it. We loop through all of them and call close without assuming that\n      // they'll be removed from the list instantaneously.\n      this.openDialogs[i].close();\n    }\n  }\n\n  /**\n   * Finds an open dialog by its id.\n   * @param id ID to use when looking up the dialog.\n   */\n  getDialogById(id: string): MatDialogRef<any> | undefined {\n    return this.openDialogs.find(dialog => dialog.id === id);\n  }\n\n  /**\n   * Creates the overlay into which the dialog will be loaded.\n   * @param config The dialog configuration.\n   * @returns A promise resolving to the OverlayRef for the created overlay.\n   */\n  private _createOverlay(config: MatDialogConfig): OverlayRef {\n    const overlayConfig = this._getOverlayConfig(config);\n    return this._overlay.create(overlayConfig);\n  }\n\n  /**\n   * Creates an overlay config from a dialog config.\n   * @param dialogConfig The dialog configuration.\n   * @returns The overlay configuration.\n   */\n  private _getOverlayConfig(dialogConfig: MatDialogConfig): OverlayConfig {\n    const state = new OverlayConfig({\n      positionStrategy: this._overlay.position().global(),\n      scrollStrategy: dialogConfig.scrollStrategy || this._scrollStrategy(),\n      panelClass: dialogConfig.panelClass,\n      hasBackdrop: dialogConfig.hasBackdrop,\n      direction: dialogConfig.direction,\n      minWidth: dialogConfig.minWidth,\n      minHeight: dialogConfig.minHeight,\n      maxWidth: dialogConfig.maxWidth,\n      maxHeight: dialogConfig.maxHeight\n    });\n\n    if (dialogConfig.backdropClass) {\n      state.backdropClass = dialogConfig.backdropClass;\n    }\n\n    return state;\n  }\n\n  /**\n   * Attaches an MatDialogContainer to a dialog's already-created overlay.\n   * @param overlay Reference to the dialog's underlying overlay.\n   * @param config The dialog configuration.\n   * @returns A promise resolving to a ComponentRef for the attached container.\n   */\n  private _attachDialogContainer(overlay: OverlayRef, config: MatDialogConfig): MatDialogContainer {\n    let containerPortal = new ComponentPortal(MatDialogContainer, config.viewContainerRef);\n    let containerRef: ComponentRef<MatDialogContainer> = overlay.attach(containerPortal);\n    containerRef.instance._config = config;\n\n    return containerRef.instance;\n  }\n\n  /**\n   * Attaches the user-provided component to the already-created MatDialogContainer.\n   * @param componentOrTemplateRef The type of component being loaded into the dialog,\n   *     or a TemplateRef to instantiate as the content.\n   * @param dialogContainer Reference to the wrapping MatDialogContainer.\n   * @param overlayRef Reference to the overlay in which the dialog resides.\n   * @param config The dialog configuration.\n   * @returns A promise resolving to the MatDialogRef that should be returned to the user.\n   */\n  private _attachDialogContent<T>(\n      componentOrTemplateRef: ComponentType<T> | TemplateRef<T>,\n      dialogContainer: MatDialogContainer,\n      overlayRef: OverlayRef,\n      config: MatDialogConfig): MatDialogRef<T> {\n\n    // Create a reference to the dialog we're creating in order to give the user a handle\n    // to modify and close it.\n    const dialogRef = new MatDialogRef<T>(overlayRef, dialogContainer, config.id);\n\n    // When the dialog backdrop is clicked, we want to close it.\n    if (config.hasBackdrop) {\n      overlayRef.backdropClick().subscribe(() => {\n        if (!dialogRef.disableClose) {\n          dialogRef.close();\n        }\n      });\n    }\n\n    if (componentOrTemplateRef instanceof TemplateRef) {\n      dialogContainer.attachTemplatePortal(\n        new TemplatePortal<T>(componentOrTemplateRef, null!,\n          <any>{ $implicit: config.data, dialogRef }));\n    } else {\n      const injector = this._createInjector<T>(config, dialogRef, dialogContainer);\n      const contentRef = dialogContainer.attachComponentPortal<T>(\n          new ComponentPortal(componentOrTemplateRef, undefined, injector));\n      dialogRef.componentInstance = contentRef.instance;\n    }\n\n    dialogRef\n      .updateSize(config.width, config.height)\n      .updatePosition(config.position);\n\n    return dialogRef;\n  }\n\n  /**\n   * Creates a custom injector to be used inside the dialog. This allows a component loaded inside\n   * of a dialog to close itself and, optionally, to return a value.\n   * @param config Config object that is used to construct the dialog.\n   * @param dialogRef Reference to the dialog.\n   * @param container Dialog container element that wraps all of the contents.\n   * @returns The custom injector that can be used inside the dialog.\n   */\n  private _createInjector<T>(\n      config: MatDialogConfig,\n      dialogRef: MatDialogRef<T>,\n      dialogContainer: MatDialogContainer): PortalInjector {\n\n    const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n    const injectionTokens = new WeakMap();\n\n    injectionTokens.set(MatDialogRef, dialogRef);\n    // The MatDialogContainer is injected in the portal as the MatDialogContainer and the dialog's\n    // content are created out of the same ViewContainerRef and as such, are siblings for injector\n    // purposes.  To allow the hierarchy that is expected, the MatDialogContainer is explicitly\n    // added to the injection tokens.\n    injectionTokens.set(MatDialogContainer, dialogContainer);\n    injectionTokens.set(MAT_DIALOG_DATA, config.data);\n    injectionTokens.set(Directionality, {\n      value: config.direction,\n      change: observableOf()\n    });\n\n    return new PortalInjector(userInjector || this._injector, injectionTokens);\n  }\n\n  /**\n   * Removes a dialog from the array of open dialogs.\n   * @param dialogRef Dialog to be removed.\n   */\n  private _removeOpenDialog(dialogRef: MatDialogRef<any>) {\n    const index = this.openDialogs.indexOf(dialogRef);\n\n    if (index > -1) {\n      this.openDialogs.splice(index, 1);\n\n      // If all the dialogs were closed, remove/restore the `aria-hidden`\n      // to a the siblings and emit to the `afterAllClosed` stream.\n      if (!this.openDialogs.length) {\n        this._ariaHiddenElements.forEach((previousValue, element) => {\n          if (previousValue) {\n            element.setAttribute('aria-hidden', previousValue);\n          } else {\n            element.removeAttribute('aria-hidden');\n          }\n        });\n\n        this._ariaHiddenElements.clear();\n        this._afterAllClosed.next();\n      }\n    }\n  }\n\n  /**\n   * Hides all of the content that isn't an overlay from assistive technology.\n   */\n  private _hideNonDialogContentFromAssistiveTechnology() {\n    const overlayContainer = this._overlayContainer.getContainerElement();\n\n    // Ensure that the overlay container is attached to the DOM.\n    if (overlayContainer.parentElement) {\n      const siblings = overlayContainer.parentElement.children;\n\n      for (let i = siblings.length - 1; i > -1; i--) {\n        let sibling = siblings[i];\n\n        if (sibling !== overlayContainer &&\n          sibling.nodeName !== 'SCRIPT' &&\n          sibling.nodeName !== 'STYLE' &&\n          !sibling.hasAttribute('aria-live')) {\n\n          this._ariaHiddenElements.set(sibling, sibling.getAttribute('aria-hidden'));\n          sibling.setAttribute('aria-hidden', 'true');\n        }\n      }\n    }\n\n  }\n\n}\n\n/**\n * Applies default options to the dialog config.\n * @param config Config to be modified.\n * @param defaultOptions Default options provided.\n * @returns The new configuration object.\n */\nfunction _applyConfigDefaults(\n    config?: MatDialogConfig, defaultOptions?: MatDialogConfig): MatDialogConfig {\n  return {...defaultOptions, ...config};\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, Input, OnChanges, OnInit, Optional, SimpleChanges} from '@angular/core';\nimport {MatDialogRef} from './dialog-ref';\nimport {MatDialogContainer} from './dialog-container';\n\n/** Counter used to generate unique IDs for dialog elements. */\nlet dialogElementUid = 0;\n\n/**\n * Button that will close the current dialog.\n */\n@Directive({\n  selector: `button[mat-dialog-close], button[matDialogClose]`,\n  exportAs: 'matDialogClose',\n  host: {\n    '(click)': 'dialogRef.close(dialogResult)',\n    '[attr.aria-label]': 'ariaLabel',\n    'type': 'button', // Prevents accidental form submits.\n  }\n})\nexport class MatDialogClose implements OnChanges {\n  /** Screenreader label for the button. */\n  @Input('aria-label') ariaLabel: string = 'Close dialog';\n\n  /** Dialog close input. */\n  @Input('mat-dialog-close') dialogResult: any;\n\n  @Input('matDialogClose') _matDialogClose: any;\n\n  constructor(public dialogRef: MatDialogRef<any>) { }\n\n  ngOnChanges(changes: SimpleChanges) {\n    const proxiedChange = changes._matDialogClose || changes._matDialogCloseResult;\n\n    if (proxiedChange) {\n      this.dialogResult = proxiedChange.currentValue;\n    }\n  }\n}\n\n/**\n * Title of a dialog element. Stays fixed to the top of the dialog when scrolling.\n */\n@Directive({\n  selector: '[mat-dialog-title], [matDialogTitle]',\n  exportAs: 'matDialogTitle',\n  host: {\n    'class': 'mat-dialog-title',\n    '[id]': 'id',\n  },\n})\nexport class MatDialogTitle implements OnInit {\n  @Input() id = `mat-dialog-title-${dialogElementUid++}`;\n\n  constructor(@Optional() private _container: MatDialogContainer) { }\n\n  ngOnInit() {\n    if (this._container && !this._container._ariaLabelledBy) {\n      Promise.resolve().then(() => this._container._ariaLabelledBy = this.id);\n    }\n  }\n}\n\n\n/**\n * Scrollable content container of a dialog.\n */\n@Directive({\n  selector: `[mat-dialog-content], mat-dialog-content, [matDialogContent]`,\n  host: {'class': 'mat-dialog-content'}\n})\nexport class MatDialogContent { }\n\n\n/**\n * Container for the bottom action buttons in a dialog.\n * Stays fixed to the bottom when scrolling.\n */\n@Directive({\n  selector: `[mat-dialog-actions], mat-dialog-actions, [matDialogActions]`,\n  host: {'class': 'mat-dialog-actions'}\n})\nexport class MatDialogActions { }\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {A11yModule} from '@angular/cdk/a11y';\nimport {MatCommonModule} from '@angular/material/core';\nimport {\n  MatDialog,\n  MAT_DIALOG_SCROLL_STRATEGY_PROVIDER\n} from './dialog';\nimport {MatDialogContainer} from './dialog-container';\nimport {\n  MatDialogClose,\n  MatDialogContent,\n  MatDialogTitle,\n  MatDialogActions\n} from './dialog-content-directives';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    OverlayModule,\n    PortalModule,\n    A11yModule,\n    MatCommonModule,\n  ],\n  exports: [\n    MatDialogContainer,\n    MatDialogClose,\n    MatDialogTitle,\n    MatDialogContent,\n    MatDialogActions,\n    MatCommonModule,\n  ],\n  declarations: [\n    MatDialogContainer,\n    MatDialogClose,\n    MatDialogTitle,\n    MatDialogActions,\n    MatDialogContent,\n  ],\n  providers: [\n    MatDialog,\n    MAT_DIALOG_SCROLL_STRATEGY_PROVIDER,\n  ],\n  entryComponents: [MatDialogContainer],\n})\nexport class MatDialogModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {catchError} from 'rxjs/operators/catchError';\nimport {tap} from 'rxjs/operators/tap';\nimport {finalize} from 'rxjs/operators/finalize';\nimport {map} from 'rxjs/operators/map';\nimport {share} from 'rxjs/operators/share';\nimport {Injectable, Optional, SecurityContext, SkipSelf} from '@angular/core';\nimport {HttpClient} from '@angular/common/http';\nimport {DomSanitizer, SafeResourceUrl} from '@angular/platform-browser';\nimport {Observable} from 'rxjs/Observable';\nimport {forkJoin} from 'rxjs/observable/forkJoin';\nimport {of as observableOf} from 'rxjs/observable/of';\nimport {_throw as observableThrow} from 'rxjs/observable/throw';\n\n\n/**\n * Returns an exception to be thrown in the case when attempting to\n * load an icon with a name that cannot be found.\n * @docs-private\n */\nexport function getMatIconNameNotFoundError(iconName: string): Error {\n  return Error(`Unable to find icon with the name \"${iconName}\"`);\n}\n\n\n/**\n * Returns an exception to be thrown when the consumer attempts to use\n * `<mat-icon>` without including @angular/http.\n * @docs-private\n */\nexport function getMatIconNoHttpProviderError(): Error {\n  return Error('Could not find HttpClient provider for use with Angular Material icons. ' +\n               'Please include the HttpClientModule from @angular/common/http in your ' +\n               'app imports.');\n}\n\n\n/**\n * Returns an exception to be thrown when a URL couldn't be sanitized.\n * @param url URL that was attempted to be sanitized.\n * @docs-private\n */\nexport function getMatIconFailedToSanitizeError(url: SafeResourceUrl): Error {\n  return Error(`The URL provided to MatIconRegistry was not trusted as a resource URL ` +\n               `via Angular's DomSanitizer. Attempted URL was \"${url}\".`);\n}\n\n/**\n * Configuration for an icon, including the URL and possibly the cached SVG element.\n * @docs-private\n */\nclass SvgIconConfig {\n  svgElement: SVGElement | null = null;\n  constructor(public url: SafeResourceUrl) { }\n}\n\n/**\n * Service to register and display icons used by the <mat-icon> component.\n * - Registers icon URLs by namespace and name.\n * - Registers icon set URLs by namespace.\n * - Registers aliases for CSS classes, for use with icon fonts.\n * - Loads icons from URLs and extracts individual icons from icon sets.\n */\n@Injectable()\nexport class MatIconRegistry {\n  /**\n   * URLs and cached SVG elements for individual icons. Keys are of the format \"[namespace]:[icon]\".\n   */\n  private _svgIconConfigs = new Map<string, SvgIconConfig>();\n\n  /**\n   * SvgIconConfig objects and cached SVG elements for icon sets, keyed by namespace.\n   * Multiple icon sets can be registered under the same namespace.\n   */\n  private _iconSetConfigs = new Map<string, SvgIconConfig[]>();\n\n  /** Cache for icons loaded by direct URLs. */\n  private _cachedIconsByUrl = new Map<string, SVGElement>();\n\n  /** In-progress icon fetches. Used to coalesce multiple requests to the same URL. */\n  private _inProgressUrlFetches = new Map<string, Observable<string>>();\n\n  /** Map from font identifiers to their CSS class names. Used for icon fonts. */\n  private _fontCssClassesByAlias = new Map<string, string>();\n\n  /**\n   * The CSS class to apply when an <mat-icon> component has no icon name, url, or font specified.\n   * The default 'material-icons' value assumes that the material icon font has been loaded as\n   * described at http://google.github.io/material-design-icons/#icon-font-for-the-web\n   */\n  private _defaultFontSetClass = 'material-icons';\n\n  constructor(@Optional() private _httpClient: HttpClient, private _sanitizer: DomSanitizer) {}\n\n  /**\n   * Registers an icon by URL in the default namespace.\n   * @param iconName Name under which the icon should be registered.\n   * @param url\n   */\n  addSvgIcon(iconName: string, url: SafeResourceUrl): this {\n    return this.addSvgIconInNamespace('', iconName, url);\n  }\n\n  /**\n   * Registers an icon by URL in the specified namespace.\n   * @param namespace Namespace in which the icon should be registered.\n   * @param iconName Name under which the icon should be registered.\n   * @param url\n   */\n  addSvgIconInNamespace(namespace: string, iconName: string, url: SafeResourceUrl): this {\n    const key = iconKey(namespace, iconName);\n    this._svgIconConfigs.set(key, new SvgIconConfig(url));\n    return this;\n  }\n\n  /**\n   * Registers an icon set by URL in the default namespace.\n   * @param url\n   */\n  addSvgIconSet(url: SafeResourceUrl): this {\n    return this.addSvgIconSetInNamespace('', url);\n  }\n\n  /**\n   * Registers an icon set by URL in the specified namespace.\n   * @param namespace Namespace in which to register the icon set.\n   * @param url\n   */\n  addSvgIconSetInNamespace(namespace: string, url: SafeResourceUrl): this {\n    const config = new SvgIconConfig(url);\n    const configNamespace = this._iconSetConfigs.get(namespace);\n\n    if (configNamespace) {\n      configNamespace.push(config);\n    } else {\n      this._iconSetConfigs.set(namespace, [config]);\n    }\n    return this;\n  }\n\n  /**\n   * Defines an alias for a CSS class name to be used for icon fonts. Creating an matIcon\n   * component with the alias as the fontSet input will cause the class name to be applied\n   * to the <mat-icon> element.\n   *\n   * @param alias Alias for the font.\n   * @param className Class name override to be used instead of the alias.\n   */\n  registerFontClassAlias(alias: string, className: string = alias): this {\n    this._fontCssClassesByAlias.set(alias, className);\n    return this;\n  }\n\n  /**\n   * Returns the CSS class name associated with the alias by a previous call to\n   * registerFontClassAlias. If no CSS class has been associated, returns the alias unmodified.\n   */\n  classNameForFontAlias(alias: string): string {\n    return this._fontCssClassesByAlias.get(alias) || alias;\n  }\n\n  /**\n   * Sets the CSS class name to be used for icon fonts when an <mat-icon> component does not\n   * have a fontSet input value, and is not loading an icon by name or URL.\n   *\n   * @param className\n   */\n  setDefaultFontSetClass(className: string): this {\n    this._defaultFontSetClass = className;\n    return this;\n  }\n\n  /**\n   * Returns the CSS class name to be used for icon fonts when an <mat-icon> component does not\n   * have a fontSet input value, and is not loading an icon by name or URL.\n   */\n  getDefaultFontSetClass(): string {\n    return this._defaultFontSetClass;\n  }\n\n  /**\n   * Returns an Observable that produces the icon (as an `<svg>` DOM element) from the given URL.\n   * The response from the URL may be cached so this will not always cause an HTTP request, but\n   * the produced element will always be a new copy of the originally fetched icon. (That is,\n   * it will not contain any modifications made to elements previously returned).\n   *\n   * @param safeUrl URL from which to fetch the SVG icon.\n   */\n  getSvgIconFromUrl(safeUrl: SafeResourceUrl): Observable<SVGElement> {\n    let url = this._sanitizer.sanitize(SecurityContext.RESOURCE_URL, safeUrl);\n\n    if (!url) {\n      throw getMatIconFailedToSanitizeError(safeUrl);\n    }\n\n    let cachedIcon = this._cachedIconsByUrl.get(url);\n\n    if (cachedIcon) {\n      return observableOf(cloneSvg(cachedIcon));\n    }\n\n    return this._loadSvgIconFromConfig(new SvgIconConfig(safeUrl)).pipe(\n      tap(svg => this._cachedIconsByUrl.set(url!, svg)),\n      map(svg => cloneSvg(svg))\n    );\n  }\n\n  /**\n   * Returns an Observable that produces the icon (as an `<svg>` DOM element) with the given name\n   * and namespace. The icon must have been previously registered with addIcon or addIconSet;\n   * if not, the Observable will throw an error.\n   *\n   * @param name Name of the icon to be retrieved.\n   * @param namespace Namespace in which to look for the icon.\n   */\n  getNamedSvgIcon(name: string, namespace: string = ''): Observable<SVGElement> {\n    // Return (copy of) cached icon if possible.\n    const key = iconKey(namespace, name);\n    const config = this._svgIconConfigs.get(key);\n\n    if (config) {\n      return this._getSvgFromConfig(config);\n    }\n\n    // See if we have any icon sets registered for the namespace.\n    const iconSetConfigs = this._iconSetConfigs.get(namespace);\n\n    if (iconSetConfigs) {\n      return this._getSvgFromIconSetConfigs(name, iconSetConfigs);\n    }\n\n    return observableThrow(getMatIconNameNotFoundError(key));\n  }\n\n  /**\n   * Returns the cached icon for a SvgIconConfig if available, or fetches it from its URL if not.\n   */\n  private _getSvgFromConfig(config: SvgIconConfig): Observable<SVGElement> {\n    if (config.svgElement) {\n      // We already have the SVG element for this icon, return a copy.\n      return observableOf(cloneSvg(config.svgElement));\n    } else {\n      // Fetch the icon from the config's URL, cache it, and return a copy.\n      return this._loadSvgIconFromConfig(config).pipe(\n        tap(svg => config.svgElement = svg),\n        map(svg => cloneSvg(svg))\n      );\n    }\n  }\n\n  /**\n   * Attempts to find an icon with the specified name in any of the SVG icon sets.\n   * First searches the available cached icons for a nested element with a matching name, and\n   * if found copies the element to a new <svg> element. If not found, fetches all icon sets\n   * that have not been cached, and searches again after all fetches are completed.\n   * The returned Observable produces the SVG element if possible, and throws\n   * an error if no icon with the specified name can be found.\n   */\n  private _getSvgFromIconSetConfigs(name: string, iconSetConfigs: SvgIconConfig[]):\n      Observable<SVGElement> {\n    // For all the icon set SVG elements we've fetched, see if any contain an icon with the\n    // requested name.\n    const namedIcon = this._extractIconWithNameFromAnySet(name, iconSetConfigs);\n\n    if (namedIcon) {\n      // We could cache namedIcon in _svgIconConfigs, but since we have to make a copy every\n      // time anyway, there's probably not much advantage compared to just always extracting\n      // it from the icon set.\n      return observableOf(namedIcon);\n    }\n\n    // Not found in any cached icon sets. If there are icon sets with URLs that we haven't\n    // fetched, fetch them now and look for iconName in the results.\n    const iconSetFetchRequests: Observable<SVGElement | null>[] = iconSetConfigs\n      .filter(iconSetConfig => !iconSetConfig.svgElement)\n      .map(iconSetConfig => {\n        return this._loadSvgIconSetFromConfig(iconSetConfig).pipe(\n          catchError((err: any): Observable<SVGElement | null> => {\n            let url = this._sanitizer.sanitize(SecurityContext.RESOURCE_URL, iconSetConfig.url);\n\n            // Swallow errors fetching individual URLs so the combined Observable won't\n            // necessarily fail.\n            console.log(`Loading icon set URL: ${url} failed: ${err}`);\n            return observableOf(null);\n          }),\n          tap(svg => {\n            // Cache the SVG element.\n            if (svg) {\n              iconSetConfig.svgElement = svg;\n            }\n          })\n        );\n      });\n\n    // Fetch all the icon set URLs. When the requests complete, every IconSet should have a\n    // cached SVG element (unless the request failed), and we can check again for the icon.\n    return forkJoin(iconSetFetchRequests).pipe(map(() => {\n      const foundIcon = this._extractIconWithNameFromAnySet(name, iconSetConfigs);\n\n      if (!foundIcon) {\n        throw getMatIconNameNotFoundError(name);\n      }\n\n      return foundIcon;\n    }));\n  }\n\n  /**\n   * Searches the cached SVG elements for the given icon sets for a nested icon element whose \"id\"\n   * tag matches the specified name. If found, copies the nested element to a new SVG element and\n   * returns it. Returns null if no matching element is found.\n   */\n  private _extractIconWithNameFromAnySet(iconName: string, iconSetConfigs: SvgIconConfig[]):\n      SVGElement | null {\n    // Iterate backwards, so icon sets added later have precedence.\n    for (let i = iconSetConfigs.length - 1; i >= 0; i--) {\n      const config = iconSetConfigs[i];\n      if (config.svgElement) {\n        const foundIcon = this._extractSvgIconFromSet(config.svgElement, iconName);\n        if (foundIcon) {\n          return foundIcon;\n        }\n      }\n    }\n    return null;\n  }\n\n  /**\n   * Loads the content of the icon URL specified in the SvgIconConfig and creates an SVG element\n   * from it.\n   */\n  private _loadSvgIconFromConfig(config: SvgIconConfig): Observable<SVGElement> {\n    return this._fetchUrl(config.url)\n        .pipe(map(svgText => this._createSvgElementForSingleIcon(svgText)));\n  }\n\n  /**\n   * Loads the content of the icon set URL specified in the SvgIconConfig and creates an SVG element\n   * from it.\n   */\n  private _loadSvgIconSetFromConfig(config: SvgIconConfig): Observable<SVGElement> {\n    // TODO: Document that icons should only be loaded from trusted sources.\n    return this._fetchUrl(config.url).pipe(map(svgText => this._svgElementFromString(svgText)));\n  }\n\n  /**\n   * Creates a DOM element from the given SVG string, and adds default attributes.\n   */\n  private _createSvgElementForSingleIcon(responseText: string): SVGElement {\n    const svg = this._svgElementFromString(responseText);\n    this._setSvgAttributes(svg);\n    return svg;\n  }\n\n  /**\n   * Searches the cached element of the given SvgIconConfig for a nested icon element whose \"id\"\n   * tag matches the specified name. If found, copies the nested element to a new SVG element and\n   * returns it. Returns null if no matching element is found.\n   */\n  private _extractSvgIconFromSet(iconSet: SVGElement, iconName: string): SVGElement | null {\n    const iconSource = iconSet.querySelector('#' + iconName);\n\n    if (!iconSource) {\n      return null;\n    }\n\n    // Clone the element and remove the ID to prevent multiple elements from being added\n    // to the page with the same ID.\n    const iconElement = iconSource.cloneNode(true) as Element;\n    iconElement.id = '';\n\n    // If the icon node is itself an <svg> node, clone and return it directly. If not, set it as\n    // the content of a new <svg> node.\n    if (iconElement.nodeName.toLowerCase() === 'svg') {\n      return this._setSvgAttributes(iconElement as SVGElement);\n    }\n\n    // If the node is a <symbol>, it won't be rendered so we have to convert it into <svg>. Note\n    // that the same could be achieved by referring to it via <use href=\"#id\">, however the <use>\n    // tag is problematic on Firefox, because it needs to include the current page path.\n    if (iconElement.nodeName.toLowerCase() === 'symbol') {\n      return this._setSvgAttributes(this._toSvgElement(iconElement));\n    }\n\n    // createElement('SVG') doesn't work as expected; the DOM ends up with\n    // the correct nodes, but the SVG content doesn't render. Instead we\n    // have to create an empty SVG node using innerHTML and append its content.\n    // Elements created using DOMParser.parseFromString have the same problem.\n    // http://stackoverflow.com/questions/23003278/svg-innerhtml-in-firefox-can-not-display\n    const svg = this._svgElementFromString('<svg></svg>');\n    // Clone the node so we don't remove it from the parent icon set element.\n    svg.appendChild(iconElement);\n\n    return this._setSvgAttributes(svg);\n  }\n\n  /**\n   * Creates a DOM element from the given SVG string.\n   */\n  private _svgElementFromString(str: string): SVGElement {\n    const div = document.createElement('DIV');\n    div.innerHTML = str;\n    const svg = div.querySelector('svg') as SVGElement;\n    if (!svg) {\n      throw Error('<svg> tag not found');\n    }\n    return svg;\n  }\n\n  /**\n   * Converts an element into an SVG node by cloning all of its children.\n   */\n  private _toSvgElement(element: Element): SVGElement {\n    let svg = this._svgElementFromString('<svg></svg>');\n\n    for (let i = 0; i < element.childNodes.length; i++) {\n      // Note: 1 corresponds to `Node.ELEMENT_NODE` which we can't use in Universal.\n      if (element.childNodes[i].nodeType === 1) {\n        svg.appendChild(element.childNodes[i].cloneNode(true));\n      }\n    }\n\n    return svg;\n  }\n\n  /**\n   * Sets the default attributes for an SVG element to be used as an icon.\n   */\n  private _setSvgAttributes(svg: SVGElement): SVGElement {\n    if (!svg.getAttribute('xmlns')) {\n      svg.setAttribute('xmlns', 'http://www.w3.org/2000/svg');\n    }\n    svg.setAttribute('fit', '');\n    svg.setAttribute('height', '100%');\n    svg.setAttribute('width', '100%');\n    svg.setAttribute('preserveAspectRatio', 'xMidYMid meet');\n    svg.setAttribute('focusable', 'false'); // Disable IE11 default behavior to make SVGs focusable.\n    return svg;\n  }\n\n  /**\n   * Returns an Observable which produces the string contents of the given URL. Results may be\n   * cached, so future calls with the same URL may not cause another HTTP request.\n   */\n  private _fetchUrl(safeUrl: SafeResourceUrl): Observable<string> {\n    if (!this._httpClient) {\n      throw getMatIconNoHttpProviderError();\n    }\n\n    const url = this._sanitizer.sanitize(SecurityContext.RESOURCE_URL, safeUrl);\n\n    if (!url) {\n      throw getMatIconFailedToSanitizeError(safeUrl);\n    }\n\n    // Store in-progress fetches to avoid sending a duplicate request for a URL when there is\n    // already a request in progress for that URL. It's necessary to call share() on the\n    // Observable returned by http.get() so that multiple subscribers don't cause multiple XHRs.\n    const inProgressFetch = this._inProgressUrlFetches.get(url);\n\n    if (inProgressFetch) {\n      return inProgressFetch;\n    }\n\n    // TODO(jelbourn): for some reason, the `finally` operator \"loses\" the generic type on the\n    // Observable. Figure out why and fix it.\n    const req = this._httpClient.get(url, {responseType: 'text'}).pipe(\n      finalize(() => this._inProgressUrlFetches.delete(url)),\n      share()\n    );\n\n    this._inProgressUrlFetches.set(url, req);\n    return req;\n  }\n}\n\n/** @docs-private */\nexport function ICON_REGISTRY_PROVIDER_FACTORY(\n    parentRegistry: MatIconRegistry, httpClient: HttpClient, sanitizer: DomSanitizer) {\n  return parentRegistry || new MatIconRegistry(httpClient, sanitizer);\n}\n\n/** @docs-private */\nexport const ICON_REGISTRY_PROVIDER = {\n  // If there is already an MatIconRegistry available, use that. Otherwise, provide a new one.\n  provide: MatIconRegistry,\n  deps: [\n    [new Optional(), new SkipSelf(), MatIconRegistry],\n    [new Optional(), HttpClient],\n    DomSanitizer\n  ],\n  useFactory: ICON_REGISTRY_PROVIDER_FACTORY\n};\n\n/** Clones an SVGElement while preserving type information. */\nfunction cloneSvg(svg: SVGElement): SVGElement {\n  return svg.cloneNode(true) as SVGElement;\n}\n\n/** Returns the cache key to use for an icon namespace and name. */\nfunction iconKey(namespace: string, name: string) {\n  return namespace + ':' + name;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {take} from 'rxjs/operators/take';\nimport {\n  Attribute,\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  Input,\n  OnChanges,\n  OnInit,\n  SimpleChanges,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {CanColor, mixinColor} from '@angular/material/core';\nimport {MatIconRegistry} from './icon-registry';\n\n\n// Boilerplate for applying mixins to MatIcon.\n/** @docs-private */\nexport class MatIconBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatIconMixinBase = mixinColor(MatIconBase);\n\n\n/**\n * Component to display an icon. It can be used in the following ways:\n *\n * - Specify the svgIcon input to load an SVG icon from a URL previously registered with the\n *   addSvgIcon, addSvgIconInNamespace, addSvgIconSet, or addSvgIconSetInNamespace methods of\n *   MatIconRegistry. If the svgIcon value contains a colon it is assumed to be in the format\n *   \"[namespace]:[name]\", if not the value will be the name of an icon in the default namespace.\n *   Examples:\n *     <mat-icon svgIcon=\"left-arrow\"></mat-icon>\n *     <mat-icon svgIcon=\"animals:cat\"></mat-icon>\n *\n * - Use a font ligature as an icon by putting the ligature text in the content of the <mat-icon>\n *   component. By default the Material icons font is used as described at\n *   http://google.github.io/material-design-icons/#icon-font-for-the-web. You can specify an\n *   alternate font by setting the fontSet input to either the CSS class to apply to use the\n *   desired font, or to an alias previously registered with MatIconRegistry.registerFontClassAlias.\n *   Examples:\n *     <mat-icon>home</mat-icon>\n *     <mat-icon fontSet=\"myfont\">sun</mat-icon>\n *\n * - Specify a font glyph to be included via CSS rules by setting the fontSet input to specify the\n *   font, and the fontIcon input to specify the icon. Typically the fontIcon will specify a\n *   CSS class which causes the glyph to be displayed via a :before selector, as in\n *   https://fortawesome.github.io/Font-Awesome/examples/\n *   Example:\n *     <mat-icon fontSet=\"fa\" fontIcon=\"alarm\"></mat-icon>\n */\n@Component({\n  moduleId: module.id,\n  template: '<ng-content></ng-content>',\n  selector: 'mat-icon',\n  exportAs: 'matIcon',\n  styleUrls: ['icon.css'],\n  inputs: ['color'],\n  host: {\n    'role': 'img',\n    'class': 'mat-icon',\n  },\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatIcon extends _MatIconMixinBase implements OnChanges, OnInit, CanColor {\n\n  /** Name of the icon in the SVG icon set. */\n  @Input() svgIcon: string;\n\n  /** Font set that the icon is a part of. */\n  @Input() fontSet: string;\n\n  /** Name of an icon within a font set. */\n  @Input() fontIcon: string;\n\n  private _previousFontSetClass: string;\n  private _previousFontIconClass: string;\n\n  constructor(\n      elementRef: ElementRef,\n      private _iconRegistry: MatIconRegistry,\n      @Attribute('aria-hidden') ariaHidden: string) {\n    super(elementRef);\n\n    // If the user has not explicitly set aria-hidden, mark the icon as hidden, as this is\n    // the right thing to do for the majority of icon use-cases.\n    if (!ariaHidden) {\n      elementRef.nativeElement.setAttribute('aria-hidden', 'true');\n    }\n  }\n\n  /**\n   * Splits an svgIcon binding value into its icon set and icon name components.\n   * Returns a 2-element array of [(icon set), (icon name)].\n   * The separator for the two fields is ':'. If there is no separator, an empty\n   * string is returned for the icon set and the entire value is returned for\n   * the icon name. If the argument is falsy, returns an array of two empty strings.\n   * Throws an error if the name contains two or more ':' separators.\n   * Examples:\n   *   'social:cake' -> ['social', 'cake']\n   *   'penguin' -> ['', 'penguin']\n   *   null -> ['', '']\n   *   'a:b:c' -> (throws Error)\n   */\n  private _splitIconName(iconName: string): [string, string] {\n    if (!iconName) {\n      return ['', ''];\n    }\n    const parts = iconName.split(':');\n    switch (parts.length) {\n      case 1: return ['', parts[0]]; // Use default namespace.\n      case 2: return <[string, string]>parts;\n      default: throw Error(`Invalid icon name: \"${iconName}\"`);\n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    // Only update the inline SVG icon if the inputs changed, to avoid unnecessary DOM operations.\n    if (changes.svgIcon) {\n      if (this.svgIcon) {\n        const [namespace, iconName] = this._splitIconName(this.svgIcon);\n\n        this._iconRegistry.getNamedSvgIcon(iconName, namespace).pipe(take(1)).subscribe(\n          svg => this._setSvgElement(svg),\n          (err: Error) => console.log(`Error retrieving icon: ${err.message}`)\n        );\n      } else {\n        this._clearSvgElement();\n      }\n    }\n\n    if (this._usingFontIcon()) {\n      this._updateFontIconClasses();\n    }\n  }\n\n  ngOnInit() {\n    // Update font classes because ngOnChanges won't be called if none of the inputs are present,\n    // e.g. <mat-icon>arrow</mat-icon> In this case we need to add a CSS class for the default font.\n    if (this._usingFontIcon()) {\n      this._updateFontIconClasses();\n    }\n  }\n\n  private _usingFontIcon(): boolean {\n    return !this.svgIcon;\n  }\n\n  private _setSvgElement(svg: SVGElement) {\n    this._clearSvgElement();\n    this._elementRef.nativeElement.appendChild(svg);\n  }\n\n  private _clearSvgElement() {\n    const layoutElement: HTMLElement = this._elementRef.nativeElement;\n    const childCount = layoutElement.childNodes.length;\n\n    // Remove existing child nodes and add the new SVG element. Note that we can't\n    // use innerHTML, because IE will throw if the element has a data binding.\n    for (let i = 0; i < childCount; i++) {\n      layoutElement.removeChild(layoutElement.childNodes[i]);\n    }\n  }\n\n  private _updateFontIconClasses() {\n    if (!this._usingFontIcon()) {\n      return;\n    }\n\n    const elem: HTMLElement = this._elementRef.nativeElement;\n    const fontSetClass = this.fontSet ?\n        this._iconRegistry.classNameForFontAlias(this.fontSet) :\n        this._iconRegistry.getDefaultFontSetClass();\n\n    if (fontSetClass != this._previousFontSetClass) {\n      if (this._previousFontSetClass) {\n        elem.classList.remove(this._previousFontSetClass);\n      }\n      if (fontSetClass) {\n        elem.classList.add(fontSetClass);\n      }\n      this._previousFontSetClass = fontSetClass;\n    }\n\n    if (this.fontIcon != this._previousFontIconClass) {\n      if (this._previousFontIconClass) {\n        elem.classList.remove(this._previousFontIconClass);\n      }\n      if (this.fontIcon) {\n        elem.classList.add(this.fontIcon);\n      }\n      this._previousFontIconClass = this.fontIcon;\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatIcon} from './icon';\nimport {ICON_REGISTRY_PROVIDER} from './icon-registry';\n\n\n@NgModule({\n  imports: [MatCommonModule],\n  exports: [MatIcon, MatCommonModule],\n  declarations: [MatIcon],\n  providers: [ICON_REGISTRY_PROVIDER],\n})\nexport class MatIconModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Directive,\n  ElementRef,\n  Input,\n  AfterViewInit,\n  DoCheck,\n  OnDestroy,\n  NgZone,\n} from '@angular/core';\nimport {Platform} from '@angular/cdk/platform';\nimport {fromEvent} from 'rxjs/observable/fromEvent';\nimport {auditTime} from 'rxjs/operators/auditTime';\nimport {takeUntil} from 'rxjs/operators/takeUntil';\nimport {Subject} from 'rxjs/Subject';\n\n\n/**\n * Directive to automatically resize a textarea to fit its content.\n */\n@Directive({\n  selector: `textarea[mat-autosize], textarea[matTextareaAutosize]`,\n  exportAs: 'matTextareaAutosize',\n  host: {\n    'class': 'mat-autosize',\n    // Textarea elements that have the directive applied should have a single row by default.\n    // Browsers normally show two rows by default and therefore this limits the minRows binding.\n    'rows': '1',\n  },\n})\nexport class MatTextareaAutosize implements AfterViewInit, DoCheck, OnDestroy {\n  /** Keep track of the previous textarea value to avoid resizing when the value hasn't changed. */\n  private _previousValue: string;\n  private _destroyed = new Subject<void>();\n\n  private _minRows: number;\n  private _maxRows: number;\n\n  /** Minimum amount of rows in the textarea. */\n  @Input('matAutosizeMinRows')\n  get minRows() { return this._minRows; }\n  set minRows(value: number) {\n    this._minRows = value;\n    this._setMinHeight();\n  }\n\n  /** Maximum amount of rows in the textarea. */\n  @Input('matAutosizeMaxRows')\n  get maxRows() { return this._maxRows; }\n  set maxRows(value: number) {\n    this._maxRows = value;\n    this._setMaxHeight();\n  }\n\n  /** Cached height of a textarea with a single row. */\n  private _cachedLineHeight: number;\n\n  constructor(\n    private _elementRef: ElementRef,\n    private _platform: Platform,\n    private _ngZone?: NgZone) {}\n\n  // TODO(crisbeto): make the `_ngZone` a required param in the next major version.\n\n  /** Sets the minimum height of the textarea as determined by minRows. */\n  _setMinHeight(): void {\n    const minHeight = this.minRows && this._cachedLineHeight ?\n        `${this.minRows * this._cachedLineHeight}px` : null;\n\n    if (minHeight)  {\n      this._setTextareaStyle('minHeight', minHeight);\n    }\n  }\n\n  /** Sets the maximum height of the textarea as determined by maxRows. */\n  _setMaxHeight(): void {\n    const maxHeight = this.maxRows && this._cachedLineHeight ?\n        `${this.maxRows * this._cachedLineHeight}px` : null;\n\n    if (maxHeight) {\n      this._setTextareaStyle('maxHeight', maxHeight);\n    }\n  }\n\n  ngAfterViewInit() {\n    if (this._platform.isBrowser) {\n      this.resizeToFitContent();\n\n      if (this._ngZone) {\n        this._ngZone.runOutsideAngular(() => {\n          fromEvent(window, 'resize')\n            .pipe(auditTime(16), takeUntil(this._destroyed))\n            .subscribe(() => this.resizeToFitContent(true));\n        });\n      }\n    }\n  }\n\n  ngOnDestroy() {\n    this._destroyed.next();\n    this._destroyed.complete();\n  }\n\n  /** Sets a style property on the textarea element. */\n  private _setTextareaStyle(property: string, value: string): void {\n    const textarea = this._elementRef.nativeElement as HTMLTextAreaElement;\n    textarea.style[property] = value;\n  }\n\n  /**\n   * Cache the height of a single-row textarea if it has not already been cached.\n   *\n   * We need to know how large a single \"row\" of a textarea is in order to apply minRows and\n   * maxRows. For the initial version, we will assume that the height of a single line in the\n   * textarea does not ever change.\n   */\n  private _cacheTextareaLineHeight(): void {\n    if (this._cachedLineHeight) {\n      return;\n    }\n\n    let textarea = this._elementRef.nativeElement as HTMLTextAreaElement;\n\n    // Use a clone element because we have to override some styles.\n    let textareaClone = textarea.cloneNode(false) as HTMLTextAreaElement;\n    textareaClone.rows = 1;\n\n    // Use `position: absolute` so that this doesn't cause a browser layout and use\n    // `visibility: hidden` so that nothing is rendered. Clear any other styles that\n    // would affect the height.\n    textareaClone.style.position = 'absolute';\n    textareaClone.style.visibility = 'hidden';\n    textareaClone.style.border = 'none';\n    textareaClone.style.padding = '0';\n    textareaClone.style.height = '';\n    textareaClone.style.minHeight = '';\n    textareaClone.style.maxHeight = '';\n\n    // In Firefox it happens that textarea elements are always bigger than the specified amount\n    // of rows. This is because Firefox tries to add extra space for the horizontal scrollbar.\n    // As a workaround that removes the extra space for the scrollbar, we can just set overflow\n    // to hidden. This ensures that there is no invalid calculation of the line height.\n    // See Firefox bug report: https://bugzilla.mozilla.org/show_bug.cgi?id=33654\n    textareaClone.style.overflow = 'hidden';\n\n    textarea.parentNode!.appendChild(textareaClone);\n    this._cachedLineHeight = textareaClone.clientHeight;\n    textarea.parentNode!.removeChild(textareaClone);\n\n    // Min and max heights have to be re-calculated if the cached line height changes\n    this._setMinHeight();\n    this._setMaxHeight();\n  }\n\n  ngDoCheck() {\n    if (this._platform.isBrowser) {\n      this.resizeToFitContent();\n    }\n  }\n\n  /**\n   * Resize the textarea to fit its content.\n   * @param force Whether to force a height recalculation. By default the height will be\n   *    recalculated only if the value changed since the last call.\n   */\n  resizeToFitContent(force: boolean = false) {\n    this._cacheTextareaLineHeight();\n\n    // If we haven't determined the line-height yet, we know we're still hidden and there's no point\n    // in checking the height of the textarea.\n    if (!this._cachedLineHeight) {\n      return;\n    }\n\n    const textarea = this._elementRef.nativeElement as HTMLTextAreaElement;\n    const value = textarea.value;\n\n    // Only resize of the value changed since these calculations can be expensive.\n    if (value === this._previousValue && !force) {\n      return;\n    }\n\n    const placeholderText = textarea.placeholder;\n\n    // Reset the textarea height to auto in order to shrink back to its default size.\n    // Also temporarily force overflow:hidden, so scroll bars do not interfere with calculations.\n    // Long placeholders that are wider than the textarea width may lead to a bigger scrollHeight\n    // value. To ensure that the scrollHeight is not bigger than the content, the placeholders\n    // need to be removed temporarily.\n    textarea.style.height = 'auto';\n    textarea.style.overflow = 'hidden';\n    textarea.placeholder = '';\n\n    // Use the scrollHeight to know how large the textarea *would* be if fit its entire value.\n    textarea.style.height = `${textarea.scrollHeight}px`;\n    textarea.style.overflow = '';\n    textarea.placeholder = placeholderText;\n\n    this._previousValue = value;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {InjectionToken} from '@angular/core';\n\n\n/**\n * This token is used to inject the object whose value should be set into `MatInput`. If none is\n * provided, the native `HTMLInputElement` is used. Directives like `MatDatepickerInput` can provide\n * themselves for this token, in order to make `MatInput` delegate the getting and setting of the\n * value to them.\n */\nexport const MAT_INPUT_VALUE_ACCESSOR =\n    new InjectionToken<{value: any}>('MAT_INPUT_VALUE_ACCESSOR');\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {getSupportedInputTypes, Platform} from '@angular/cdk/platform';\nimport {\n  Directive,\n  DoCheck,\n  ElementRef,\n  Inject,\n  Input,\n  OnChanges,\n  OnDestroy,\n  Optional,\n  Self,\n} from '@angular/core';\nimport {FormGroupDirective, NgControl, NgForm} from '@angular/forms';\nimport {ErrorStateMatcher, mixinErrorState, CanUpdateErrorState} from '@angular/material/core';\nimport {MatFormFieldControl} from '@angular/material/form-field';\nimport {Subject} from 'rxjs/Subject';\nimport {getMatInputUnsupportedTypeError} from './input-errors';\nimport {MAT_INPUT_VALUE_ACCESSOR} from './input-value-accessor';\n\n\n// Invalid input type. Using one of these will throw an MatInputUnsupportedTypeError.\nconst MAT_INPUT_INVALID_TYPES = [\n  'button',\n  'checkbox',\n  'file',\n  'hidden',\n  'image',\n  'radio',\n  'range',\n  'reset',\n  'submit'\n];\n\nlet nextUniqueId = 0;\n\n// Boilerplate for applying mixins to MatInput.\n/** @docs-private */\nexport class MatInputBase {\n  constructor(public _defaultErrorStateMatcher: ErrorStateMatcher,\n              public _parentForm: NgForm,\n              public _parentFormGroup: FormGroupDirective,\n              public ngControl: NgControl) {}\n}\nexport const _MatInputMixinBase = mixinErrorState(MatInputBase);\n\n/** Directive that allows a native input to work inside a `MatFormField`. */\n@Directive({\n  selector: `input[matInput], textarea[matInput]`,\n  exportAs: 'matInput',\n  host: {\n    'class': 'mat-input-element mat-form-field-autofill-control',\n    '[class.mat-input-server]': '_isServer',\n    // Native input properties that are overwritten by Angular inputs need to be synced with\n    // the native input element. Otherwise property bindings for those don't work.\n    '[attr.id]': 'id',\n    '[placeholder]': 'placeholder',\n    '[disabled]': 'disabled',\n    '[required]': 'required',\n    '[readonly]': 'readonly',\n    '[attr.aria-describedby]': '_ariaDescribedby || null',\n    '[attr.aria-invalid]': 'errorState',\n    '[attr.aria-required]': 'required.toString()',\n    '(blur)': '_focusChanged(false)',\n    '(focus)': '_focusChanged(true)',\n    '(input)': '_onInput()',\n  },\n  providers: [{provide: MatFormFieldControl, useExisting: MatInput}],\n})\nexport class MatInput extends _MatInputMixinBase implements MatFormFieldControl<any>, OnChanges,\n    OnDestroy, DoCheck, CanUpdateErrorState {\n  /** Variables used as cache for getters and setters. */\n  protected _type = 'text';\n  protected _disabled = false;\n  protected _required = false;\n  protected _id: string;\n  protected _uid = `mat-input-${nextUniqueId++}`;\n  protected _previousNativeValue: any;\n  private _readonly = false;\n  private _inputValueAccessor: {value: any};\n\n  /** Whether the input is focused. */\n  focused = false;\n\n  /** The aria-describedby attribute on the input for improved a11y. */\n  _ariaDescribedby: string;\n\n  /** Whether the component is being rendered on the server. */\n  _isServer = false;\n\n  /**\n   * Stream that emits whenever the state of the input changes such that the wrapping `MatFormField`\n   * needs to run change detection.\n   */\n  stateChanges = new Subject<void>();\n\n  /** A name for this control that can be used by `mat-form-field`. */\n  controlType = 'mat-input';\n\n  /** Whether the element is disabled. */\n  @Input()\n  get disabled() { return this.ngControl ? this.ngControl.disabled : this._disabled; }\n  set disabled(value: any) {\n    this._disabled = coerceBooleanProperty(value);\n\n    // Browsers may not fire the blur event if the input is disabled too quickly.\n    // Reset from here to ensure that the element doesn't become stuck.\n    if (this.focused) {\n      this.focused = false;\n      this.stateChanges.next();\n    }\n  }\n\n  /** Unique id of the element. */\n  @Input()\n  get id() { return this._id; }\n  set id(value: string) { this._id = value || this._uid; }\n\n  /** Placeholder attribute of the element. */\n  @Input() placeholder: string = '';\n\n  /** Whether the element is required. */\n  @Input()\n  get required() { return this._required; }\n  set required(value: any) { this._required = coerceBooleanProperty(value); }\n\n  /** Input type of the element. */\n  @Input()\n  get type() { return this._type; }\n  set type(value: string) {\n    this._type = value || 'text';\n    this._validateType();\n\n    // When using Angular inputs, developers are no longer able to set the properties on the native\n    // input element. To ensure that bindings for `type` work, we need to sync the setter\n    // with the native property. Textarea elements don't support the type property or attribute.\n    if (!this._isTextarea() && getSupportedInputTypes().has(this._type)) {\n      this._elementRef.nativeElement.type = this._type;\n    }\n  }\n\n  /** An object used to control when error messages are shown. */\n  @Input() errorStateMatcher: ErrorStateMatcher;\n\n  /** The input element's value. */\n  @Input()\n  get value(): any { return this._inputValueAccessor.value; }\n  set value(value: any) {\n    if (value !== this.value) {\n      this._inputValueAccessor.value = value;\n      this.stateChanges.next();\n    }\n  }\n\n  /** Whether the element is readonly. */\n  @Input()\n  get readonly() { return this._readonly; }\n  set readonly(value: any) { this._readonly = coerceBooleanProperty(value); }\n\n  protected _neverEmptyInputTypes = [\n    'date',\n    'datetime',\n    'datetime-local',\n    'month',\n    'time',\n    'week'\n  ].filter(t => getSupportedInputTypes().has(t));\n\n  constructor(protected _elementRef: ElementRef,\n              protected _platform: Platform,\n              @Optional() @Self() public ngControl: NgControl,\n              @Optional() _parentForm: NgForm,\n              @Optional() _parentFormGroup: FormGroupDirective,\n              _defaultErrorStateMatcher: ErrorStateMatcher,\n              @Optional() @Self() @Inject(MAT_INPUT_VALUE_ACCESSOR) inputValueAccessor: any) {\n    super(_defaultErrorStateMatcher, _parentForm, _parentFormGroup, ngControl);\n    // If no input value accessor was explicitly specified, use the element as the input value\n    // accessor.\n    this._inputValueAccessor = inputValueAccessor || this._elementRef.nativeElement;\n\n    this._previousNativeValue = this.value;\n\n    // Force setter to be called in case id was not specified.\n    this.id = this.id;\n\n    // On some versions of iOS the caret gets stuck in the wrong place when holding down the delete\n    // key. In order to get around this we need to \"jiggle\" the caret loose. Since this bug only\n    // exists on iOS, we only bother to install the listener on iOS.\n    if (_platform.IOS) {\n      _elementRef.nativeElement.addEventListener('keyup', (event: Event) => {\n        let el = event.target as HTMLInputElement;\n        if (!el.value && !el.selectionStart && !el.selectionEnd) {\n          // Note: Just setting `0, 0` doesn't fix the issue. Setting `1, 1` fixes it for the first\n          // time that you type text and then hold delete. Toggling to `1, 1` and then back to\n          // `0, 0` seems to completely fix it.\n          el.setSelectionRange(1, 1);\n          el.setSelectionRange(0, 0);\n        }\n      });\n    }\n\n    this._isServer = !this._platform.isBrowser;\n  }\n\n  ngOnChanges() {\n    this.stateChanges.next();\n  }\n\n  ngOnDestroy() {\n    this.stateChanges.complete();\n  }\n\n  ngDoCheck() {\n    if (this.ngControl) {\n      // We need to re-evaluate this on every change detection cycle, because there are some\n      // error triggers that we can't subscribe to (e.g. parent form submissions). This means\n      // that whatever logic is in here has to be super lean or we risk destroying the performance.\n      this.updateErrorState();\n    } else {\n      // When the input isn't used together with `@angular/forms`, we need to check manually for\n      // changes to the native `value` property in order to update the floating label.\n      this._dirtyCheckNativeValue();\n    }\n  }\n\n  focus() { this._elementRef.nativeElement.focus(); }\n\n  /** Callback for the cases where the focused state of the input changes. */\n  _focusChanged(isFocused: boolean) {\n    if (isFocused !== this.focused && !this.readonly) {\n      this.focused = isFocused;\n      this.stateChanges.next();\n    }\n  }\n\n  _onInput() {\n    // This is a noop function and is used to let Angular know whenever the value changes.\n    // Angular will run a new change detection each time the `input` event has been dispatched.\n    // It's necessary that Angular recognizes the value change, because when floatingLabel\n    // is set to false and Angular forms aren't used, the placeholder won't recognize the\n    // value changes and will not disappear.\n    // Listening to the input event wouldn't be necessary when the input is using the\n    // FormsModule or ReactiveFormsModule, because Angular forms also listens to input events.\n  }\n\n  /** Does some manual dirty checking on the native input `value` property. */\n  protected _dirtyCheckNativeValue() {\n    const newValue = this.value;\n\n    if (this._previousNativeValue !== newValue) {\n      this._previousNativeValue = newValue;\n      this.stateChanges.next();\n    }\n  }\n\n  /** Make sure the input is a supported type. */\n  protected _validateType() {\n    if (MAT_INPUT_INVALID_TYPES.indexOf(this._type) > -1) {\n      throw getMatInputUnsupportedTypeError(this._type);\n    }\n  }\n\n  /** Checks whether the input type is one of the types that are never empty. */\n  protected _isNeverEmpty() {\n    return this._neverEmptyInputTypes.indexOf(this._type) > -1;\n  }\n\n  /** Checks whether the input is invalid based on the native validation. */\n  protected _isBadInput() {\n    // The `validity` property won't be present on platform-server.\n    let validity = (this._elementRef.nativeElement as HTMLInputElement).validity;\n    return validity && validity.badInput;\n  }\n\n  /** Determines if the component host is a textarea. If not recognizable it returns false. */\n  protected _isTextarea() {\n    let nativeElement = this._elementRef.nativeElement;\n\n    // In Universal, we don't have access to `nodeName`, but the same can be achieved with `name`.\n    // Note that this shouldn't be necessary once Angular switches to an API that resembles the\n    // DOM closer.\n    let nodeName = this._platform.isBrowser ? nativeElement.nodeName : nativeElement.name;\n    return nodeName ? nodeName.toLowerCase() === 'textarea' : false;\n  }\n\n  // Implemented as part of MatFormFieldControl.\n  get empty(): boolean {\n    return !this._isNeverEmpty() && !this._elementRef.nativeElement.value && !this._isBadInput();\n  }\n\n  // Implemented as part of MatFormFieldControl.\n  get shouldLabelFloat(): boolean { return this.focused || !this.empty; }\n\n  // Implemented as part of MatFormFieldControl.\n  setDescribedByIds(ids: string[]) { this._ariaDescribedby = ids.join(' '); }\n\n  // Implemented as part of MatFormFieldControl.\n  onContainerClick() { this.focus(); }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {PlatformModule} from '@angular/cdk/platform';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatFormFieldModule} from '@angular/material/form-field';\nimport {MatTextareaAutosize} from './autosize';\nimport {MatInput} from './input';\nimport {ErrorStateMatcher} from '@angular/material/core';\n\n\n@NgModule({\n  declarations: [\n    MatInput,\n    MatTextareaAutosize,\n  ],\n  imports: [\n    CommonModule,\n    MatFormFieldModule,\n    PlatformModule,\n  ],\n  exports: [\n    // We re-export the `MatFormFieldModule` since `MatInput` will almost always\n    // be used together with `MatFormField`.\n    MatFormFieldModule,\n    MatInput,\n    MatTextareaAutosize,\n  ],\n  providers: [ErrorStateMatcher],\n})\nexport class MatInputModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable} from '@angular/core';\nimport {Subject} from 'rxjs/Subject';\n\n\n/** Datepicker data that requires internationalization. */\n@Injectable()\nexport class MatDatepickerIntl {\n  /**\n   * Stream that emits whenever the labels here are changed. Use this to notify\n   * components if the labels have changed after initialization.\n   */\n  changes: Subject<void> = new Subject<void>();\n\n  /** A label for the calendar popup (used by screen readers). */\n  calendarLabel = 'Calendar';\n\n  /** A label for the button used to open the calendar popup (used by screen readers). */\n  openCalendarLabel = 'Open calendar';\n\n  /** A label for the previous month button (used by screen readers). */\n  prevMonthLabel = 'Previous month';\n\n  /** A label for the next month button (used by screen readers). */\n  nextMonthLabel = 'Next month';\n\n  /** A label for the previous year button (used by screen readers). */\n  prevYearLabel = 'Previous year';\n\n  /** A label for the next year button (used by screen readers). */\n  nextYearLabel = 'Next year';\n\n  /** A label for the 'switch to month view' button (used by screen readers). */\n  switchToMonthViewLabel = 'Change to month view';\n\n  /** A label for the 'switch to year view' button (used by screen readers). */\n  switchToYearViewLabel = 'Change to year view';\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  EventEmitter,\n  Input,\n  Output,\n  ViewEncapsulation\n} from '@angular/core';\n\n\n/**\n * An internal class that represents the data corresponding to a single calendar cell.\n * @docs-private\n */\nexport class MatCalendarCell {\n  constructor(public value: number,\n              public displayValue: string,\n              public ariaLabel: string,\n              public enabled: boolean) {}\n}\n\n\n/**\n * An internal component used to display calendar data in a table.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: '[mat-calendar-body]',\n  templateUrl: 'calendar-body.html',\n  styleUrls: ['calendar-body.css'],\n  host: {\n    'class': 'mat-calendar-body',\n  },\n  exportAs: 'matCalendarBody',\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatCalendarBody {\n  /** The label for the table. (e.g. \"Jan 2017\"). */\n  @Input() label: string;\n\n  /** The cells to display in the table. */\n  @Input() rows: MatCalendarCell[][];\n\n  /** The value in the table that corresponds to today. */\n  @Input() todayValue: number;\n\n  /** The value in the table that is currently selected. */\n  @Input() selectedValue: number;\n\n  /** The minimum number of free cells needed to fit the label in the first row. */\n  @Input() labelMinRequiredCells: number;\n\n  /** The number of columns in the table. */\n  @Input() numCols = 7;\n\n  /** Whether to allow selection of disabled cells. */\n  @Input() allowDisabledSelection = false;\n\n  /** The cell number of the active cell in the table. */\n  @Input() activeCell = 0;\n\n  /**\n   * The aspect ratio (width / height) to use for the cells in the table. This aspect ratio will be\n   * maintained even as the table resizes.\n   */\n  @Input() cellAspectRatio = 1;\n\n  /** Emits when a new value is selected. */\n  @Output() selectedValueChange = new EventEmitter<number>();\n\n  _cellClicked(cell: MatCalendarCell): void {\n    if (!this.allowDisabledSelection && !cell.enabled) {\n      return;\n    }\n    this.selectedValueChange.emit(cell.value);\n  }\n\n  /** The number of blank cells to put at the beginning for the first row. */\n  get _firstRowOffset(): number {\n    return this.rows && this.rows.length && this.rows[0].length ?\n        this.numCols - this.rows[0].length : 0;\n  }\n\n  _isActiveCell(rowIndex: number, colIndex: number): boolean {\n    let cellNumber = rowIndex * this.numCols + colIndex;\n\n    // Account for the fact that the first row may not have as many cells.\n    if (rowIndex) {\n      cellNumber -= this._firstRowOffset;\n    }\n\n    return cellNumber == this.activeCell;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor, FocusOrigin} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  AfterViewInit,\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  OnDestroy,\n  Optional,\n  Output,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {\n  CanColor,\n  CanDisable,\n  CanDisableRipple,\n  HasTabIndex,\n  MatRipple,\n  mixinColor,\n  mixinDisabled,\n  mixinDisableRipple,\n  mixinTabIndex,\n  RippleConfig,\n  RippleRef,\n} from '@angular/material/core';\nimport {MAT_CHECKBOX_CLICK_ACTION, MatCheckboxClickAction} from './checkbox-config';\n\n\n// Increasing integer for generating unique ids for checkbox components.\nlet nextUniqueId = 0;\n\n/**\n * Provider Expression that allows mat-checkbox to register as a ControlValueAccessor.\n * This allows it to support [(ngModel)].\n * @docs-private\n */\nexport const MAT_CHECKBOX_CONTROL_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatCheckbox),\n  multi: true\n};\n\n/**\n * Represents the different states that require custom transitions between them.\n * @docs-private\n */\nexport enum TransitionCheckState {\n  /** The initial state of the component before any user interaction. */\n  Init,\n  /** The state representing the component when it's becoming checked. */\n  Checked,\n  /** The state representing the component when it's becoming unchecked. */\n  Unchecked,\n  /** The state representing the component when it's becoming indeterminate. */\n  Indeterminate\n}\n\n/** Change event object emitted by MatCheckbox. */\nexport class MatCheckboxChange {\n  /** The source MatCheckbox of the event. */\n  source: MatCheckbox;\n  /** The new `checked` value of the checkbox. */\n  checked: boolean;\n}\n\n// Boilerplate for applying mixins to MatCheckbox.\n/** @docs-private */\nexport class MatCheckboxBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatCheckboxMixinBase =\n  mixinTabIndex(mixinColor(mixinDisableRipple(mixinDisabled(MatCheckboxBase)), 'accent'));\n\n\n/**\n * A material design checkbox component. Supports all of the functionality of an HTML5 checkbox,\n * and exposes a similar API. A MatCheckbox can be either checked, unchecked, indeterminate, or\n * disabled. Note that all additional accessibility attributes are taken care of by the component,\n * so there is no need to provide them yourself. However, if you want to omit a label and still\n * have the checkbox be accessible, you may supply an [aria-label] input.\n * See: https://www.google.com/design/spec/components/selection-controls.html\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-checkbox',\n  templateUrl: 'checkbox.html',\n  styleUrls: ['checkbox.css'],\n  exportAs: 'matCheckbox',\n  host: {\n    'class': 'mat-checkbox',\n    '[id]': 'id',\n    '[class.mat-checkbox-indeterminate]': 'indeterminate',\n    '[class.mat-checkbox-checked]': 'checked',\n    '[class.mat-checkbox-disabled]': 'disabled',\n    '[class.mat-checkbox-label-before]': 'labelPosition == \"before\"',\n  },\n  providers: [MAT_CHECKBOX_CONTROL_VALUE_ACCESSOR],\n  inputs: ['disabled', 'disableRipple', 'color', 'tabIndex'],\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class MatCheckbox extends _MatCheckboxMixinBase implements ControlValueAccessor,\n    AfterViewInit, OnDestroy, CanColor, CanDisable, HasTabIndex, CanDisableRipple {\n\n  /**\n   * Attached to the aria-label attribute of the host element. In most cases, arial-labelledby will\n   * take precedence so this may be omitted.\n   */\n  @Input('aria-label') ariaLabel: string = '';\n\n  /**\n   * Users can specify the `aria-labelledby` attribute which will be forwarded to the input element\n   */\n  @Input('aria-labelledby') ariaLabelledby: string | null = null;\n\n  private _uniqueId: string = `mat-checkbox-${++nextUniqueId}`;\n\n  /** A unique id for the checkbox input. If none is supplied, it will be auto-generated. */\n  @Input() id: string = this._uniqueId;\n\n  /** Returns the unique id for the visual hidden input. */\n  get inputId(): string { return `${this.id || this._uniqueId}-input`; }\n\n  private _required: boolean;\n\n  /** Whether the checkbox is required. */\n  @Input()\n  get required(): boolean { return this._required; }\n  set required(value) { this._required = coerceBooleanProperty(value); }\n\n  /**\n   * Whether or not the checkbox should appear before or after the label.\n   * @deprecated\n   */\n  @Input()\n  get align(): 'start' | 'end' {\n    // align refers to the checkbox relative to the label, while labelPosition refers to the\n    // label relative to the checkbox. As such, they are inverted.\n    return this.labelPosition == 'after' ? 'start' : 'end';\n  }\n\n  set align(v) {\n    this.labelPosition = (v == 'start') ? 'after' : 'before';\n  }\n\n  /** Whether the label should appear after or before the checkbox. Defaults to 'after' */\n  @Input() labelPosition: 'before' | 'after' = 'after';\n\n  /** Name value will be applied to the input element if present */\n  @Input() name: string | null = null;\n\n  /** Event emitted when the checkbox's `checked` value changes. */\n  @Output() change: EventEmitter<MatCheckboxChange> = new EventEmitter<MatCheckboxChange>();\n\n  /** Event emitted when the checkbox's `indeterminate` value changes. */\n  @Output() indeterminateChange: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n  /** The value attribute of the native input element */\n  @Input() value: string;\n\n  /** The native `<input type=\"checkbox\"> element */\n  @ViewChild('input') _inputElement: ElementRef;\n\n  /** Called when the checkbox is blurred. Needed to properly implement ControlValueAccessor. */\n  @ViewChild(MatRipple) _ripple: MatRipple;\n\n  /** Ripple configuration for the mouse ripples and focus indicators. */\n  _rippleConfig: RippleConfig = {centered: true, radius: 25, speedFactor: 1.5};\n\n  /**\n   * Called when the checkbox is blurred. Needed to properly implement ControlValueAccessor.\n   * @docs-private\n   */\n  onTouched: () => any = () => {};\n\n  private _currentAnimationClass: string = '';\n\n  private _currentCheckState: TransitionCheckState = TransitionCheckState.Init;\n\n  private _checked: boolean = false;\n\n  private _indeterminate: boolean = false;\n\n  private _controlValueAccessorChangeFn: (value: any) => void = () => {};\n\n  /** Reference to the focused state ripple. */\n  private _focusRipple: RippleRef | null;\n\n  constructor(elementRef: ElementRef,\n              private _changeDetectorRef: ChangeDetectorRef,\n              private _focusMonitor: FocusMonitor,\n              @Attribute('tabindex') tabIndex: string,\n              @Optional() @Inject(MAT_CHECKBOX_CLICK_ACTION)\n                  private _clickAction: MatCheckboxClickAction) {\n    super(elementRef);\n\n    this.tabIndex = parseInt(tabIndex) || 0;\n  }\n\n  ngAfterViewInit() {\n    this._focusMonitor\n      .monitor(this._inputElement.nativeElement, false)\n      .subscribe(focusOrigin => this._onInputFocusChange(focusOrigin));\n  }\n\n  ngOnDestroy() {\n    this._focusMonitor.stopMonitoring(this._inputElement.nativeElement);\n  }\n\n  /**\n   * Whether the checkbox is checked.\n   */\n  @Input() get checked() {\n    return this._checked;\n  }\n\n  set checked(checked: boolean) {\n    if (checked != this.checked) {\n      this._checked = checked;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  /**\n   * Whether the checkbox is indeterminate. This is also known as \"mixed\" mode and can be used to\n   * represent a checkbox with three states, e.g. a checkbox that represents a nested list of\n   * checkable items. Note that whenever checkbox is manually clicked, indeterminate is immediately\n   * set to false.\n   */\n  @Input() get indeterminate() {\n    return this._indeterminate;\n  }\n\n  set indeterminate(indeterminate: boolean) {\n    let changed =  indeterminate != this._indeterminate;\n    this._indeterminate = indeterminate;\n\n    if (changed) {\n      if (this._indeterminate) {\n        this._transitionCheckState(TransitionCheckState.Indeterminate);\n      } else {\n        this._transitionCheckState(\n          this.checked ? TransitionCheckState.Checked : TransitionCheckState.Unchecked);\n      }\n      this.indeterminateChange.emit(this._indeterminate);\n    }\n  }\n\n  _isRippleDisabled() {\n    return this.disableRipple || this.disabled;\n  }\n\n  /** Method being called whenever the label text changes. */\n  _onLabelTextChange() {\n    // This method is getting called whenever the label of the checkbox changes.\n    // Since the checkbox uses the OnPush strategy we need to notify it about the change\n    // that has been recognized by the cdkObserveContent directive.\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /**\n   * Sets the model value. Implemented as part of ControlValueAccessor.\n   * @param value Value to be set to the model.\n   */\n  writeValue(value: any) {\n    this.checked = !!value;\n  }\n\n  /**\n   * Registers a callback to be triggered when the value has changed.\n   * Implemented as part of ControlValueAccessor.\n   * @param fn Function to be called on change.\n   */\n  registerOnChange(fn: (value: any) => void) {\n    this._controlValueAccessorChangeFn = fn;\n  }\n\n  /**\n   * Registers a callback to be triggered when the control has been touched.\n   * Implemented as part of ControlValueAccessor.\n   * @param fn Callback to be triggered when the checkbox is touched.\n   */\n  registerOnTouched(fn: any) {\n    this.onTouched = fn;\n  }\n\n  /**\n   * Sets the checkbox's disabled state. Implemented as a part of ControlValueAccessor.\n   * @param isDisabled Whether the checkbox should be disabled.\n   */\n  setDisabledState(isDisabled: boolean) {\n    this.disabled = isDisabled;\n    this._changeDetectorRef.markForCheck();\n  }\n\n  _getAriaChecked(): 'true' | 'false' | 'mixed' {\n    return this.checked ? 'true' : (this.indeterminate ? 'mixed' : 'false');\n  }\n\n  private _transitionCheckState(newState: TransitionCheckState) {\n    let oldState = this._currentCheckState;\n    let element: HTMLElement = this._elementRef.nativeElement;\n\n    if (oldState === newState) {\n      return;\n    }\n    if (this._currentAnimationClass.length > 0) {\n      element.classList.remove(this._currentAnimationClass);\n    }\n\n    this._currentAnimationClass = this._getAnimationClassForCheckStateTransition(\n        oldState, newState);\n    this._currentCheckState = newState;\n\n    if (this._currentAnimationClass.length > 0) {\n      element.classList.add(this._currentAnimationClass);\n    }\n  }\n\n  private _emitChangeEvent() {\n    let event = new MatCheckboxChange();\n    event.source = this;\n    event.checked = this.checked;\n\n    this._controlValueAccessorChangeFn(this.checked);\n    this.change.emit(event);\n  }\n\n  /** Function is called whenever the focus changes for the input element. */\n  private _onInputFocusChange(focusOrigin: FocusOrigin) {\n    if (!this._focusRipple && focusOrigin === 'keyboard') {\n      this._focusRipple = this._ripple.launch(0, 0, {persistent: true, ...this._rippleConfig});\n    } else if (!focusOrigin) {\n      this._removeFocusRipple();\n      this.onTouched();\n    }\n  }\n\n  /** Toggles the `checked` state of the checkbox. */\n  toggle(): void {\n    this.checked = !this.checked;\n  }\n\n  /**\n   * Event handler for checkbox input element.\n   * Toggles checked state if element is not disabled.\n   * Do not toggle on (change) event since IE doesn't fire change event when\n   *   indeterminate checkbox is clicked.\n   * @param event\n   */\n  _onInputClick(event: Event) {\n    // We have to stop propagation for click events on the visual hidden input element.\n    // By default, when a user clicks on a label element, a generated click event will be\n    // dispatched on the associated input element. Since we are using a label element as our\n    // root container, the click event on the `checkbox` will be executed twice.\n    // The real click event will bubble up, and the generated click event also tries to bubble up.\n    // This will lead to multiple click events.\n    // Preventing bubbling for the second event will solve that issue.\n    event.stopPropagation();\n\n    // If resetIndeterminate is false, and the current state is indeterminate, do nothing on click\n    if (!this.disabled && this._clickAction !== 'noop') {\n      // When user manually click on the checkbox, `indeterminate` is set to false.\n      if (this.indeterminate && this._clickAction !== 'check') {\n\n        Promise.resolve().then(() => {\n          this._indeterminate = false;\n          this.indeterminateChange.emit(this._indeterminate);\n        });\n      }\n\n      this.toggle();\n      this._transitionCheckState(\n          this._checked ? TransitionCheckState.Checked : TransitionCheckState.Unchecked);\n\n      // Emit our custom change event if the native input emitted one.\n      // It is important to only emit it, if the native input triggered one, because\n      // we don't want to trigger a change event, when the `checked` variable changes for example.\n      this._emitChangeEvent();\n    } else if (!this.disabled && this._clickAction === 'noop') {\n      // Reset native input when clicked with noop. The native checkbox becomes checked after\n      // click, reset it to be align with `checked` value of `mat-checkbox`.\n      this._inputElement.nativeElement.checked = this.checked;\n      this._inputElement.nativeElement.indeterminate = this.indeterminate;\n    }\n  }\n\n  /** Focuses the checkbox. */\n  focus(): void {\n    this._focusMonitor.focusVia(this._inputElement.nativeElement, 'keyboard');\n  }\n\n  _onInteractionEvent(event: Event) {\n    // We always have to stop propagation on the change event.\n    // Otherwise the change event, from the input element, will bubble up and\n    // emit its event object to the `change` output.\n    event.stopPropagation();\n  }\n\n  private _getAnimationClassForCheckStateTransition(\n      oldState: TransitionCheckState, newState: TransitionCheckState): string {\n    let animSuffix: string = '';\n\n    switch (oldState) {\n      case TransitionCheckState.Init:\n        // Handle edge case where user interacts with checkbox that does not have [(ngModel)] or\n        // [checked] bound to it.\n        if (newState === TransitionCheckState.Checked) {\n          animSuffix = 'unchecked-checked';\n        } else if (newState == TransitionCheckState.Indeterminate) {\n          animSuffix = 'unchecked-indeterminate';\n        } else {\n          return '';\n        }\n        break;\n      case TransitionCheckState.Unchecked:\n        animSuffix = newState === TransitionCheckState.Checked ?\n            'unchecked-checked' : 'unchecked-indeterminate';\n        break;\n      case TransitionCheckState.Checked:\n        animSuffix = newState === TransitionCheckState.Unchecked ?\n            'checked-unchecked' : 'checked-indeterminate';\n        break;\n      case TransitionCheckState.Indeterminate:\n        animSuffix = newState === TransitionCheckState.Checked ?\n            'indeterminate-checked' : 'indeterminate-unchecked';\n        break;\n    }\n\n    return `mat-checkbox-anim-${animSuffix}`;\n  }\n\n  /** Fades out the focus state ripple. */\n  private _removeFocusRipple(): void {\n    if (this._focusRipple) {\n      this._focusRipple.fadeOut();\n      this._focusRipple = null;\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Directive,\n  forwardRef,\n  Provider,\n} from '@angular/core';\nimport {\n  CheckboxRequiredValidator,\n  NG_VALIDATORS,\n} from '@angular/forms';\n\nexport const MAT_CHECKBOX_REQUIRED_VALIDATOR: Provider = {\n  provide: NG_VALIDATORS,\n  useExisting: forwardRef(() => MatCheckboxRequiredValidator),\n  multi: true\n};\n\n/**\n * Validator for Material checkbox's required attribute in template-driven checkbox.\n * Current CheckboxRequiredValidator only work with `input type=checkbox` and does not\n * work with `mat-checkbox`.\n */\n@Directive({\n  selector: `mat-checkbox[required][formControlName],\n             mat-checkbox[required][formControl], mat-checkbox[required][ngModel]`,\n  providers: [MAT_CHECKBOX_REQUIRED_VALIDATOR],\n  host: {'[attr.required]': 'required ? \"\" : null'}\n})\nexport class MatCheckboxRequiredValidator extends CheckboxRequiredValidator {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {ObserversModule} from '@angular/cdk/observers';\nimport {MatRippleModule, MatCommonModule} from '@angular/material/core';\nimport {MatCheckbox} from './checkbox';\nimport {MatCheckboxRequiredValidator} from './checkbox-required-validator';\nimport {A11yModule} from '@angular/cdk/a11y';\n\n@NgModule({\n  imports: [CommonModule, MatRippleModule, MatCommonModule, ObserversModule, A11yModule],\n  exports: [MatCheckbox, MatCheckboxRequiredValidator, MatCommonModule],\n  declarations: [MatCheckbox, MatCheckboxRequiredValidator],\n})\nexport class MatCheckboxModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusableOption} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {BACKSPACE, DELETE, SPACE} from '@angular/cdk/keycodes';\nimport {\n  Directive,\n  ElementRef,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  Output,\n} from '@angular/core';\nimport {CanColor, CanDisable, mixinColor, mixinDisabled} from '@angular/material/core';\nimport {Subject} from 'rxjs/Subject';\n\n\n/** Represents an event fired on an individual `mat-chip`. */\nexport interface MatChipEvent {\n  /** The chip the event was fired on. */\n  chip: MatChip;\n}\n\n/** Event object emitted by MatChip when selected or deselected. */\nexport class MatChipSelectionChange {\n  constructor(\n    /** Reference to the chip that emitted the event. */\n    public source: MatChip,\n    /** Whether the chip that emitted the event is selected. */\n    public selected: boolean,\n    /** Whether the selection change was a result of a user interaction. */\n    public isUserInput = false) { }\n}\n\n\n// Boilerplate for applying mixins to MatChip.\n/** @docs-private */\nexport class MatChipBase {\n  constructor(public _elementRef: ElementRef) {}\n}\n\nexport const _MatChipMixinBase = mixinColor(mixinDisabled(MatChipBase), 'primary');\n\n\n/**\n * Dummy directive to add CSS class to basic chips.\n * @docs-private\n */\n@Directive({\n  selector: `mat-basic-chip, [mat-basic-chip]`,\n  host: {'class': 'mat-basic-chip'},\n})\nexport class MatBasicChip {\n}\n\n/**\n * Material design styled Chip component. Used inside the MatChipList component.\n */\n@Directive({\n  selector: `mat-basic-chip, [mat-basic-chip], mat-chip, [mat-chip]`,\n  inputs: ['color', 'disabled'],\n  exportAs: 'matChip',\n  host: {\n    'class': 'mat-chip',\n    '[attr.tabindex]': 'disabled ? null : -1',\n    'role': 'option',\n    '[class.mat-chip-selected]': 'selected',\n    '[attr.disabled]': 'disabled || null',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.aria-selected]': 'ariaSelected',\n    '(click)': '_handleClick($event)',\n    '(keydown)': '_handleKeydown($event)',\n    '(focus)': '_hasFocus = true',\n    '(blur)': '_blur()',\n  },\n\n})\nexport class MatChip extends _MatChipMixinBase implements FocusableOption, OnDestroy, CanColor,\n    CanDisable {\n\n  protected _value: any;\n\n  protected _selected: boolean = false;\n\n  protected _selectable: boolean = true;\n\n  protected _removable: boolean = true;\n\n  /** Whether the chip has focus. */\n  _hasFocus: boolean = false;\n\n  /** Whether the chip is selected. */\n  @Input()\n  get selected(): boolean {\n    return this._selected;\n  }\n  set selected(value: boolean) {\n    this._selected = coerceBooleanProperty(value);\n    this.selectionChange.emit({\n      source: this,\n      isUserInput: false,\n      selected: value\n    });\n  }\n  /** The value of the chip. Defaults to the content inside <mat-chip> tags. */\n  @Input()\n  get value(): any {\n    return this._value != undefined\n      ? this._value\n      : this._elementRef.nativeElement.textContent;\n  }\n  set value(newValue: any) {\n    this._value = newValue;\n  }\n\n  /**\n   * Whether or not the chips are selectable. When a chip is not selectable,\n   * changes to it's selected state are always ignored.\n   */\n  @Input() get selectable(): boolean {\n    return this._selectable;\n  }\n\n\n  set selectable(value: boolean) {\n    this._selectable = coerceBooleanProperty(value);\n  }\n\n  /**\n   * Determines whether or not the chip displays the remove styling and emits (remove) events.\n   */\n  @Input() get removable(): boolean {\n    return this._removable;\n  }\n\n\n  set removable(value: boolean) {\n    this._removable = coerceBooleanProperty(value);\n  }\n\n  /** Emits when the chip is focused. */\n  _onFocus = new Subject<MatChipEvent>();\n\n  /** Emits when the chip is blured. */\n  _onBlur = new Subject<MatChipEvent>();\n\n  /** Emitted when the chip is selected or deselected. */\n  @Output() selectionChange = new EventEmitter<MatChipSelectionChange>();\n\n  /** Emitted when the chip is destroyed. */\n  @Output() destroyed = new EventEmitter<MatChipEvent>();\n\n  /**\n   * Emitted when the chip is destroyed.\n   * @deprecated Use 'destroyed' instead.\n   */\n  @Output() destroy = this.destroyed;\n\n  /** Emitted when a chip is to be removed. */\n  @Output() removed = new EventEmitter<MatChipEvent>();\n\n  /**\n   * Emitted when a chip is to be removed.\n   * @deprecated Use `removed` instead.\n   */\n  @Output('remove') onRemove = this.removed;\n\n  get ariaSelected(): string | null {\n    return this.selectable ? this.selected.toString() : null;\n  }\n\n  constructor(public _elementRef: ElementRef) {\n    super(_elementRef);\n  }\n\n  ngOnDestroy(): void {\n    this.destroyed.emit({chip: this});\n  }\n\n  /** Selects the chip. */\n  select(): void {\n    this._selected = true;\n    this.selectionChange.emit({\n      source: this,\n      isUserInput: false,\n      selected: true\n    });\n  }\n\n  /** Deselects the chip. */\n  deselect(): void {\n    this._selected = false;\n    this.selectionChange.emit({\n      source: this,\n      isUserInput: false,\n      selected: false\n    });\n  }\n\n  /** Select this chip and emit selected event */\n  selectViaInteraction(): void {\n    this._selected = true;\n    // Emit select event when selected changes.\n    this.selectionChange.emit({\n      source: this,\n      isUserInput: true,\n      selected: true\n    });\n  }\n\n  /** Toggles the current selected state of this chip. */\n  toggleSelected(isUserInput: boolean = false): boolean {\n    this._selected = !this.selected;\n\n    this.selectionChange.emit({\n      source: this,\n      isUserInput,\n      selected: this._selected\n    });\n\n    return this.selected;\n  }\n\n  /** Allows for programmatic focusing of the chip. */\n  focus(): void {\n    this._elementRef.nativeElement.focus();\n    this._onFocus.next({chip: this});\n  }\n\n  /**\n   * Allows for programmatic removal of the chip. Called by the MatChipList when the DELETE or\n   * BACKSPACE keys are pressed.\n   *\n   * Informs any listeners of the removal request. Does not remove the chip from the DOM.\n   */\n  remove(): void {\n    if (this.removable) {\n      this.removed.emit({chip: this});\n    }\n  }\n\n  /** Ensures events fire properly upon click. */\n  _handleClick(event: Event) {\n    // Check disabled\n    if (this.disabled) {\n      return;\n    }\n\n    event.preventDefault();\n    event.stopPropagation();\n\n    this.focus();\n  }\n\n  /** Handle custom key presses. */\n  _handleKeydown(event: KeyboardEvent): void {\n    if (this.disabled) {\n      return;\n    }\n\n    switch (event.keyCode) {\n      case DELETE:\n      case BACKSPACE:\n        // If we are removable, remove the focused chip\n        this.remove();\n        // Always prevent so page navigation does not occur\n        event.preventDefault();\n        break;\n      case SPACE:\n        // If we are selectable, toggle the focused chip\n        if (this.selectable) {\n          this.toggleSelected(true);\n        }\n\n        // Always prevent space from scrolling the page since the list has focus\n        event.preventDefault();\n        break;\n    }\n  }\n\n  _blur(): void {\n    this._hasFocus = false;\n    this._onBlur.next({chip: this});\n  }\n}\n\n\n/**\n * Applies proper (click) support and adds styling for use with the Material Design \"cancel\" icon\n * available at https://material.io/icons/#ic_cancel.\n *\n * Example:\n *\n *     <mat-chip>\n *       <mat-icon matChipRemove>cancel</mat-icon>\n *     </mat-chip>\n *\n * You *may* use a custom icon, but you may need to override the `mat-chip-remove` positioning\n * styles to properly center the icon within the chip.\n */\n@Directive({\n  selector: '[matChipRemove]',\n  host: {\n    'class': 'mat-chip-remove',\n    '(click)': '_handleClick()',\n  }\n})\nexport class MatChipRemove {\n  constructor(protected _parentChip: MatChip) {\n  }\n\n  /** Calls the parent chip's public `remove()` method if applicable. */\n  _handleClick(): void {\n    if (this._parentChip.removable) {\n      this._parentChip.remove();\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusKeyManager} from '@angular/cdk/a11y';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {SelectionModel} from '@angular/cdk/collections';\nimport {BACKSPACE, LEFT_ARROW, RIGHT_ARROW} from '@angular/cdk/keycodes';\nimport {startWith} from 'rxjs/operators/startWith';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  DoCheck,\n  ElementRef,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Output,\n  QueryList,\n  Self,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {\n  ControlValueAccessor,\n  FormGroupDirective,\n  NgControl,\n  NgForm\n} from '@angular/forms';\nimport {ErrorStateMatcher, mixinErrorState, CanUpdateErrorState} from '@angular/material/core';\nimport {MatFormFieldControl} from '@angular/material/form-field';\nimport {Observable} from 'rxjs/Observable';\nimport {merge} from 'rxjs/observable/merge';\nimport {Subscription} from 'rxjs/Subscription';\nimport {MatChip, MatChipEvent, MatChipSelectionChange} from './chip';\nimport {MatChipInput} from './chip-input';\n\n// Boilerplate for applying mixins to MatChipList.\n/** @docs-private */\nexport class MatChipListBase {\n  constructor(public _defaultErrorStateMatcher: ErrorStateMatcher,\n              public _parentForm: NgForm,\n              public _parentFormGroup: FormGroupDirective,\n              public ngControl: NgControl) {}\n}\nexport const _MatChipListMixinBase = mixinErrorState(MatChipListBase);\n\n\n// Increasing integer for generating unique ids for chip-list components.\nlet nextUniqueId = 0;\n\n/** Change event object that is emitted when the chip list value has changed. */\nexport class MatChipListChange {\n  constructor(\n    /** Chip list that emitted the event. */\n    public source: MatChipList,\n    /** Value of the chip list when the event was emitted. */\n    public value: any) { }\n}\n\n\n/**\n * A material design chips component (named ChipList for it's similarity to the List component).\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-chip-list',\n  template: `<div class=\"mat-chip-list-wrapper\"><ng-content></ng-content></div>`,\n  exportAs: 'matChipList',\n  host: {\n    '[attr.tabindex]': '_tabIndex',\n    '[attr.aria-describedby]': '_ariaDescribedby || null',\n    '[attr.aria-required]': 'required.toString()',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.aria-invalid]': 'errorState',\n    '[attr.aria-multiselectable]': 'multiple',\n    '[attr.role]': 'role',\n    '[class.mat-chip-list-disabled]': 'disabled',\n    '[class.mat-chip-list-invalid]': 'errorState',\n    '[class.mat-chip-list-required]': 'required',\n    '[attr.aria-orientation]': 'ariaOrientation',\n    'class': 'mat-chip-list',\n    '(focus)': 'focus()',\n    '(blur)': '_blur()',\n    '(keydown)': '_keydown($event)'\n  },\n  providers: [{provide: MatFormFieldControl, useExisting: MatChipList}],\n  styleUrls: ['chips.css'],\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class MatChipList extends _MatChipListMixinBase implements MatFormFieldControl<any>,\n    ControlValueAccessor, AfterContentInit, DoCheck, OnInit, OnDestroy, CanUpdateErrorState {\n  readonly controlType = 'mat-chip-list';\n\n  /** When a chip is destroyed, we track the index so we can focus the appropriate next chip. */\n  protected _lastDestroyedIndex: number|null = null;\n\n  /** Track which chips we're listening to for focus/destruction. */\n  protected _chipSet: WeakMap<MatChip, boolean> = new WeakMap();\n\n  /** Subscription to tabbing out from the chip list. */\n  private _tabOutSubscription = Subscription.EMPTY;\n\n  /** Subscription to changes in the chip list. */\n  private _changeSubscription: Subscription;\n\n  /** Subscription to focus changes in the chips. */\n  private _chipFocusSubscription: Subscription|null;\n\n  /** Subscription to blur changes in the chips. */\n  private _chipBlurSubscription: Subscription|null;\n\n  /** Subscription to selection changes in chips. */\n  private _chipSelectionSubscription: Subscription|null;\n\n  /** Subscription to remove changes in chips. */\n  private _chipRemoveSubscription: Subscription|null;\n\n  /** Whether or not the chip is selectable. */\n  protected _selectable: boolean = true;\n\n  /** Whether the component is in multiple selection mode. */\n  private _multiple: boolean = false;\n\n  /** The chip input to add more chips */\n  protected _chipInput: MatChipInput;\n\n  /** Id of the chip list */\n  protected _id: string;\n\n  /** Uid of the chip list */\n  protected _uid: string = `mat-chip-list-${nextUniqueId++}`;\n\n  /** Whether this is required */\n  protected _required: boolean = false;\n\n  /** Whether this is disabled */\n  protected _disabled: boolean = false;\n\n  protected _value: any;\n\n  /** Placeholder for the chip list. Alternatively, placeholder can be set on MatChipInput */\n  protected _placeholder: string;\n\n  /** The aria-describedby attribute on the chip list for improved a11y. */\n  _ariaDescribedby: string;\n\n  /** Tab index for the chip list. */\n  _tabIndex = 0;\n\n  /**\n   * User defined tab index.\n   * When it is not null, use user defined tab index. Otherwise use _tabIndex\n   */\n  _userTabIndex: number | null = null;\n\n  /** The FocusKeyManager which handles focus. */\n  _keyManager: FocusKeyManager<MatChip>;\n\n  /** Function when touched */\n  _onTouched = () => {};\n\n  /** Function when changed */\n  _onChange: (value: any) => void = () => {};\n\n  _selectionModel: SelectionModel<MatChip>;\n\n  /** Comparison function to specify which option is displayed. Defaults to object equality. */\n  private _compareWith = (o1: any, o2: any) => o1 === o2;\n\n  /** The array of selected chips inside chip list. */\n  get selected(): MatChip[] | MatChip {\n    return this.multiple ? this._selectionModel.selected : this._selectionModel.selected[0];\n  }\n\n  get role(): string|null {\n    return this.empty ? null : 'listbox';\n  }\n\n  /** An object used to control when error messages are shown. */\n  @Input() errorStateMatcher: ErrorStateMatcher;\n\n  /** Whether the user should be allowed to select multiple chips. */\n  @Input()\n  get multiple(): boolean { return this._multiple; }\n  set multiple(value: boolean) {\n    this._multiple = coerceBooleanProperty(value);\n  }\n\n  /**\n   * A function to compare the option values with the selected values. The first argument\n   * is a value from an option. The second is a value from the selection. A boolean\n   * should be returned.\n   */\n  @Input()\n  get compareWith() { return this._compareWith; }\n  set compareWith(fn: (o1: any, o2: any) => boolean) {\n    this._compareWith = fn;\n    if (this._selectionModel) {\n      // A different comparator means the selection could change.\n      this._initializeSelection();\n    }\n  }\n\n  /** Required for FormFieldControl */\n  @Input()\n  get value() { return this._value; }\n  set value(newValue: any) {\n    this.writeValue(newValue);\n    this._value = newValue;\n  }\n\n  /** Required for FormFieldControl. The ID of the chip list */\n  @Input()\n  set id(value: string) {\n    this._id = value;\n    this.stateChanges.next();\n  }\n  get id() { return this._id || this._uid; }\n\n  /** Required for FormFieldControl. Whether the chip list is required. */\n  @Input()\n  set required(value: any) {\n    this._required = coerceBooleanProperty(value);\n    this.stateChanges.next();\n  }\n  get required() {\n    return this._required;\n  }\n\n  /** For FormFieldControl. Use chip input's placholder if there's a chip input */\n  @Input()\n  set placeholder(value: string) {\n    this._placeholder = value;\n    this.stateChanges.next();\n  }\n  get placeholder() {\n    return this._chipInput ? this._chipInput.placeholder : this._placeholder;\n  }\n\n  /** Whether any chips or the matChipInput inside of this chip-list has focus. */\n  get focused(): boolean {\n    return this.chips.some(chip => chip._hasFocus) ||\n      (this._chipInput && this._chipInput.focused);\n  }\n\n  /** Whether this chip-list contains no chips and no matChipInput. */\n  get empty(): boolean {\n    return (!this._chipInput || this._chipInput.empty) && this.chips.length === 0;\n  }\n\n  get shouldLabelFloat(): boolean {\n    return !this.empty || this.focused;\n  }\n\n  /** Whether this chip-list is disabled. */\n  @Input()\n  get disabled() { return this.ngControl ? this.ngControl.disabled : this._disabled; }\n  set disabled(value: any) { this._disabled = coerceBooleanProperty(value); }\n\n\n  /** Orientation of the chip list. */\n  @Input('aria-orientation') ariaOrientation: 'horizontal' | 'vertical' = 'horizontal';\n\n  /**\n   * Whether or not this chip is selectable. When a chip is not selectable,\n   * its selected state is always ignored.\n   */\n  @Input()\n  get selectable(): boolean { return this._selectable; }\n  set selectable(value: boolean) { this._selectable = coerceBooleanProperty(value); }\n\n  @Input()\n  set tabIndex(value: number) {\n    this._userTabIndex = value;\n    this._tabIndex = value;\n  }\n\n  /** Combined stream of all of the child chips' selection change events. */\n  get chipSelectionChanges(): Observable<MatChipSelectionChange> {\n    return merge(...this.chips.map(chip => chip.selectionChange));\n  }\n\n  /** Combined stream of all of the child chips' focus change events. */\n  get chipFocusChanges(): Observable<MatChipEvent> {\n    return merge(...this.chips.map(chip => chip._onFocus));\n  }\n\n  /** Combined stream of all of the child chips' blur change events. */\n  get chipBlurChanges(): Observable<MatChipEvent> {\n    return merge(...this.chips.map(chip => chip._onBlur));\n  }\n\n  /** Combined stream of all of the child chips' remove change events. */\n  get chipRemoveChanges(): Observable<MatChipEvent> {\n    return merge(...this.chips.map(chip => chip.destroy));\n  }\n\n  /** Event emitted when the selected chip list value has been changed by the user. */\n  @Output() change: EventEmitter<MatChipListChange> = new EventEmitter<MatChipListChange>();\n\n  /**\n   * Event that emits whenever the raw value of the chip-list changes. This is here primarily\n   * to facilitate the two-way binding for the `value` input.\n   * @docs-private\n   */\n  @Output() valueChange = new EventEmitter<any>();\n\n  /** The chip components contained within this chip list. */\n  @ContentChildren(MatChip) chips: QueryList<MatChip>;\n\n  constructor(protected _elementRef: ElementRef,\n              private _changeDetectorRef: ChangeDetectorRef,\n              @Optional() private _dir: Directionality,\n              @Optional() _parentForm: NgForm,\n              @Optional() _parentFormGroup: FormGroupDirective,\n              _defaultErrorStateMatcher: ErrorStateMatcher,\n              @Optional() @Self() public ngControl: NgControl) {\n    super(_defaultErrorStateMatcher, _parentForm, _parentFormGroup, ngControl);\n    if (this.ngControl) {\n      this.ngControl.valueAccessor = this;\n    }\n  }\n\n  ngAfterContentInit(): void {\n\n    this._keyManager = new FocusKeyManager<MatChip>(this.chips).withWrap();\n\n    // Prevents the chip list from capturing focus and redirecting\n    // it back to the first chip when the user tabs out.\n    this._tabOutSubscription = this._keyManager.tabOut.subscribe(() => {\n      this._tabIndex = -1;\n      setTimeout(() => this._tabIndex = this._userTabIndex || 0);\n    });\n\n    // When the list changes, re-subscribe\n    this._changeSubscription = this.chips.changes.pipe(startWith(null)).subscribe(() => {\n      this._resetChips();\n\n      // Reset chips selected/deselected status\n      this._initializeSelection();\n\n      // Check to see if we need to update our tab index\n      this._updateTabIndex();\n\n      // Check to see if we have a destroyed chip and need to refocus\n      this._updateFocusForDestroyedChips();\n    });\n  }\n\n  ngOnInit() {\n    this._selectionModel = new SelectionModel<MatChip>(this.multiple, undefined, false);\n    this.stateChanges.next();\n  }\n\n  ngDoCheck() {\n    if (this.ngControl) {\n      // We need to re-evaluate this on every change detection cycle, because there are some\n      // error triggers that we can't subscribe to (e.g. parent form submissions). This means\n      // that whatever logic is in here has to be super lean or we risk destroying the performance.\n      this.updateErrorState();\n    }\n  }\n\n  ngOnDestroy(): void {\n    this._tabOutSubscription.unsubscribe();\n\n    if (this._changeSubscription) {\n      this._changeSubscription.unsubscribe();\n    }\n    this._dropSubscriptions();\n    this.stateChanges.complete();\n  }\n\n\n  /** Associates an HTML input element with this chip list. */\n  registerInput(inputElement: MatChipInput) {\n    this._chipInput = inputElement;\n  }\n\n  // Implemented as part of MatFormFieldControl.\n  setDescribedByIds(ids: string[]) { this._ariaDescribedby = ids.join(' '); }\n\n  // Implemented as part of ControlValueAccessor\n  writeValue(value: any): void {\n    if (this.chips) {\n      this._setSelectionByValue(value, false);\n    }\n  }\n\n  // Implemented as part of ControlValueAccessor\n  registerOnChange(fn: (value: any) => void): void {\n    this._onChange = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor\n  registerOnTouched(fn: () => void): void {\n    this._onTouched = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor\n  setDisabledState(disabled: boolean): void {\n    this.disabled = disabled;\n    this._elementRef.nativeElement.disabled = disabled;\n    this.stateChanges.next();\n  }\n\n  onContainerClick() {\n    this.focus();\n  }\n\n  /**\n   * Focuses the the first non-disabled chip in this chip list, or the associated input when there\n   * are no eligible chips.\n   */\n  focus() {\n    // TODO: ARIA says this should focus the first `selected` chip if any are selected.\n    // Focus on first element if there's no chipInput inside chip-list\n    if (this._chipInput && this._chipInput.focused) {\n      // do nothing\n    } else if (this.chips.length > 0) {\n      this._keyManager.setFirstItemActive();\n      this.stateChanges.next();\n    } else {\n      this._focusInput();\n      this.stateChanges.next();\n    }\n  }\n\n  /** Attempt to focus an input if we have one. */\n  _focusInput() {\n    if (this._chipInput) {\n      this._chipInput.focus();\n    }\n  }\n\n  /**\n   * Pass events to the keyboard manager. Available here for tests.\n   */\n  _keydown(event: KeyboardEvent) {\n    let code = event.keyCode;\n    let target = event.target as HTMLElement;\n    let isInputEmpty = this._isInputEmpty(target);\n    let isRtl = this._dir && this._dir.value == 'rtl';\n\n    let isPrevKey = (code === (isRtl ? RIGHT_ARROW : LEFT_ARROW));\n    let isNextKey = (code === (isRtl ? LEFT_ARROW : RIGHT_ARROW));\n    let isBackKey = code === BACKSPACE;\n    // If they are on an empty input and hit backspace, focus the last chip\n    if (isInputEmpty && isBackKey) {\n      this._keyManager.setLastItemActive();\n      event.preventDefault();\n      return;\n    }\n\n    // If they are on a chip, check for space/left/right, otherwise pass to our key manager (like\n    // up/down keys)\n    if (target && target.classList.contains('mat-chip')) {\n      if (isPrevKey) {\n        this._keyManager.setPreviousItemActive();\n        event.preventDefault();\n      } else if (isNextKey) {\n        this._keyManager.setNextItemActive();\n        event.preventDefault();\n      } else {\n        this._keyManager.onKeydown(event);\n      }\n    }\n    this.stateChanges.next();\n  }\n\n\n  /**\n   * Check the tab index as you should not be allowed to focus an empty list.\n   */\n  protected _updateTabIndex(): void {\n    // If we have 0 chips, we should not allow keyboard focus\n    this._tabIndex = this._userTabIndex || (this.chips.length === 0 ? -1 : 0);\n  }\n\n  /**\n   * Update key manager's active item when chip is deleted.\n   * If the deleted chip is the last chip in chip list, focus the new last chip.\n   * Otherwise focus the next chip in the list.\n   * Save `_lastDestroyedIndex` so we can set the correct focus.\n   */\n  protected _updateKeyManager(chip: MatChip) {\n    let chipIndex: number = this.chips.toArray().indexOf(chip);\n    if (this._isValidIndex(chipIndex)) {\n      if (chip._hasFocus) {\n        // Check whether the chip is not the last item\n        if (chipIndex < this.chips.length - 1) {\n          this._keyManager.setActiveItem(chipIndex);\n        } else if (chipIndex - 1 >= 0) {\n          this._keyManager.setActiveItem(chipIndex - 1);\n        }\n      }\n      if (this._keyManager.activeItemIndex === chipIndex) {\n        this._lastDestroyedIndex = chipIndex;\n      }\n    }\n  }\n\n  /**\n   * Checks to see if a focus chip was recently destroyed so that we can refocus the next closest\n   * one.\n   */\n  protected _updateFocusForDestroyedChips() {\n    let chipsArray = this.chips;\n\n    if (this._lastDestroyedIndex != null && chipsArray.length > 0) {\n      // Check whether the destroyed chip was the last item\n      const newFocusIndex = Math.min(this._lastDestroyedIndex, chipsArray.length - 1);\n      this._keyManager.setActiveItem(newFocusIndex);\n      let focusChip = this._keyManager.activeItem;\n      // Focus the chip\n      if (focusChip) {\n        focusChip.focus();\n      }\n    }\n\n    // Reset our destroyed index\n    this._lastDestroyedIndex = null;\n  }\n\n  /**\n   * Utility to ensure all indexes are valid.\n   *\n   * @param index The index to be checked.\n   * @returns True if the index is valid for our list of chips.\n   */\n  private _isValidIndex(index: number): boolean {\n    return index >= 0 && index < this.chips.length;\n  }\n\n  private _isInputEmpty(element: HTMLElement): boolean {\n    if (element && element.nodeName.toLowerCase() === 'input') {\n      let input = element as HTMLInputElement;\n      return !input.value;\n    }\n\n    return false;\n  }\n\n  _setSelectionByValue(value: any, isUserInput: boolean = true) {\n    this._clearSelection();\n    this.chips.forEach(chip => chip.deselect());\n\n    if (Array.isArray(value)) {\n      value.forEach(currentValue => this._selectValue(currentValue, isUserInput));\n      this._sortValues();\n    } else {\n      const correspondingChip = this._selectValue(value, isUserInput);\n\n      // Shift focus to the active item. Note that we shouldn't do this in multiple\n      // mode, because we don't know what chip the user interacted with last.\n      if (correspondingChip) {\n        const correspondingChipIndex = this.chips.toArray().indexOf(correspondingChip);\n\n        if (isUserInput) {\n          this._keyManager.setActiveItem(correspondingChipIndex);\n        } else {\n          this._keyManager.updateActiveItemIndex(correspondingChipIndex);\n        }\n\n      }\n    }\n  }\n\n  /**\n   * Finds and selects the chip based on its value.\n   * @returns Chip that has the corresponding value.\n   */\n  private _selectValue(value: any, isUserInput: boolean = true): MatChip | undefined {\n\n    const correspondingChip = this.chips.find(chip => {\n      return chip.value != null && this._compareWith(chip.value,  value);\n    });\n\n    if (correspondingChip) {\n      isUserInput ? correspondingChip.selectViaInteraction() : correspondingChip.select();\n      this._selectionModel.select(correspondingChip);\n    }\n\n    return correspondingChip;\n  }\n\n  private _initializeSelection(): void {\n    // Defer setting the value in order to avoid the \"Expression\n    // has changed after it was checked\" errors from Angular.\n    Promise.resolve().then(() => {\n      if (this.ngControl || this._value) {\n        this._setSelectionByValue(this.ngControl ? this.ngControl.value : this._value, false);\n        this.stateChanges.next();\n      }\n    });\n  }\n\n  /**\n   * Deselects every chip in the list.\n   * @param skip Chip that should not be deselected.\n   */\n  private _clearSelection(skip?: MatChip): void {\n    this._selectionModel.clear();\n    this.chips.forEach(chip => {\n      if (chip !== skip) {\n        chip.deselect();\n      }\n    });\n    this.stateChanges.next();\n  }\n\n  /**\n   * Sorts the model values, ensuring that they keep the same\n   * order that they have in the panel.\n   */\n  private _sortValues(): void {\n    if (this._multiple) {\n      this._selectionModel.clear();\n\n      this.chips.forEach(chip => {\n        if (chip.selected) {\n          this._selectionModel.select(chip);\n        }\n      });\n      this.stateChanges.next();\n    }\n  }\n\n  /** Emits change event to set the model value. */\n  private _propagateChanges(fallbackValue?: any): void {\n    let valueToEmit: any = null;\n\n    if (Array.isArray(this.selected)) {\n      valueToEmit = this.selected.map(chip => chip.value);\n    } else {\n      valueToEmit = this.selected ? this.selected.value : fallbackValue;\n    }\n    this._value = valueToEmit;\n    this.change.emit(new MatChipListChange(this, valueToEmit));\n    this.valueChange.emit(valueToEmit);\n    this._onChange(valueToEmit);\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** When blurred, mark the field as touched when focus moved outside the chip list. */\n  _blur() {\n    if (!this.disabled) {\n      if (this._chipInput) {\n        // If there's a chip input, we should check whether the focus moved to chip input.\n        // If the focus is not moved to chip input, mark the field as touched. If the focus moved\n        // to chip input, do nothing.\n        // Timeout is needed to wait for the focus() event trigger on chip input.\n        setTimeout(() => {\n          if (!this.focused) {\n            this._markAsTouched();\n          }\n        });\n      } else {\n        // If there's no chip input, then mark the field as touched.\n        this._markAsTouched();\n      }\n    }\n  }\n\n  /** Mark the field as touched */\n  _markAsTouched() {\n    this._onTouched();\n    this._changeDetectorRef.markForCheck();\n    this.stateChanges.next();\n  }\n\n  private _resetChips() {\n    this._dropSubscriptions();\n    this._listenToChipsFocus();\n    this._listenToChipsSelection();\n    this._listenToChipsRemoved();\n  }\n\n\n  private _dropSubscriptions() {\n    if (this._chipFocusSubscription) {\n      this._chipFocusSubscription.unsubscribe();\n      this._chipFocusSubscription = null;\n    }\n\n    if (this._chipBlurSubscription) {\n      this._chipBlurSubscription.unsubscribe();\n      this._chipBlurSubscription = null;\n    }\n\n    if (this._chipSelectionSubscription) {\n      this._chipSelectionSubscription.unsubscribe();\n      this._chipSelectionSubscription = null;\n    }\n  }\n\n  /** Listens to user-generated selection events on each chip. */\n  private _listenToChipsSelection(): void {\n    this._chipSelectionSubscription = this.chipSelectionChanges.subscribe(event => {\n      event.source.selected\n        ? this._selectionModel.select(event.source)\n        : this._selectionModel.deselect(event.source);\n\n      // For single selection chip list, make sure the deselected value is unselected.\n      if (!this.multiple) {\n        this.chips.forEach(chip => {\n          if (!this._selectionModel.isSelected(chip) && chip.selected) {\n            chip.deselect();\n          }\n        });\n      }\n\n      if (event.isUserInput) {\n        this._propagateChanges();\n      }\n    });\n  }\n\n  /** Listens to user-generated selection events on each chip. */\n  private _listenToChipsFocus(): void {\n    this._chipFocusSubscription = this.chipFocusChanges.subscribe(event => {\n      let chipIndex: number = this.chips.toArray().indexOf(event.chip);\n\n      if (this._isValidIndex(chipIndex)) {\n        this._keyManager.updateActiveItemIndex(chipIndex);\n      }\n      this.stateChanges.next();\n    });\n\n    this._chipBlurSubscription = this.chipBlurChanges.subscribe(_ => {\n      this._blur();\n      this.stateChanges.next();\n    });\n  }\n\n  private _listenToChipsRemoved(): void {\n    this._chipRemoveSubscription = this.chipRemoveChanges.subscribe((event) => {\n      this._updateKeyManager(event.chip);\n    });\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {ENTER} from '@angular/cdk/keycodes';\nimport {Directive, ElementRef, EventEmitter, Input, Output} from '@angular/core';\nimport {MatChipList} from './chip-list';\n\n\n/** Represents an input event on a `matChipInput`. */\nexport interface MatChipInputEvent {\n  /** The native `<input>` element that the event is being fired for. */\n  input: HTMLInputElement;\n\n  /** The value of the input. */\n  value: string;\n}\n\n/**\n * Directive that adds chip-specific behaviors to an input element inside <mat-form-field>.\n * May be placed inside or outside of an <mat-chip-list>.\n */\n@Directive({\n  selector: 'input[matChipInputFor]',\n  exportAs: 'matChipInput, matChipInputFor',\n  host: {\n    'class': 'mat-chip-input mat-input-element',\n    '(keydown)': '_keydown($event)',\n    '(blur)': '_blur()',\n    '(focus)': '_focus()',\n    '(input)': '_onInput()',\n  }\n})\nexport class MatChipInput {\n  focused: boolean = false;\n  _chipList: MatChipList;\n\n  /** Register input for chip list */\n  @Input('matChipInputFor')\n  set chipList(value: MatChipList) {\n    if (value) {\n      this._chipList = value;\n      this._chipList.registerInput(this);\n    }\n  }\n\n  /**\n   * Whether or not the chipEnd event will be emitted when the input is blurred.\n   */\n  @Input('matChipInputAddOnBlur')\n  get addOnBlur() { return this._addOnBlur; }\n  set addOnBlur(value: boolean) { this._addOnBlur = coerceBooleanProperty(value); }\n  _addOnBlur: boolean = false;\n\n  /**\n   * The list of key codes that will trigger a chipEnd event.\n   *\n   * Defaults to `[ENTER]`.\n   */\n  // TODO(tinayuangao): Support Set here\n  @Input('matChipInputSeparatorKeyCodes') separatorKeyCodes: number[] = [ENTER];\n\n  /** Emitted when a chip is to be added. */\n  @Output('matChipInputTokenEnd')\n  chipEnd = new EventEmitter<MatChipInputEvent>();\n\n  /** The input's placeholder text. */\n  @Input() placeholder: string = '';\n\n  /** Whether the input is empty. */\n  get empty(): boolean {\n    let value: string | null = this._inputElement.value;\n    return (value == null || value === '');\n  }\n\n  /** The native input element to which this directive is attached. */\n  protected _inputElement: HTMLInputElement;\n\n  constructor(protected _elementRef: ElementRef) {\n    this._inputElement = this._elementRef.nativeElement as HTMLInputElement;\n  }\n\n  /** Utility method to make host definition/tests more clear. */\n  _keydown(event?: KeyboardEvent) {\n    this._emitChipEnd(event);\n  }\n\n  /** Checks to see if the blur should emit the (chipEnd) event. */\n  _blur() {\n    if (this.addOnBlur) {\n      this._emitChipEnd();\n    }\n    this.focused = false;\n    // Blur the chip list if it is not focused\n    if (!this._chipList.focused) {\n      this._chipList._blur();\n    }\n    this._chipList.stateChanges.next();\n  }\n\n  _focus() {\n    this.focused = true;\n    this._chipList.stateChanges.next();\n  }\n\n  /** Checks to see if the (chipEnd) event needs to be emitted. */\n  _emitChipEnd(event?: KeyboardEvent) {\n    if (!this._inputElement.value && !!event) {\n      this._chipList._keydown(event);\n    }\n    if (!event || this.separatorKeyCodes.indexOf(event.keyCode) > -1) {\n      this.chipEnd.emit({ input: this._inputElement, value: this._inputElement.value });\n\n      if (event) {\n        event.preventDefault();\n      }\n    }\n  }\n\n  _onInput() {\n    // Let chip list know whenever the value changes.\n    this._chipList.stateChanges.next();\n  }\n\n  focus() { this._inputElement.focus(); }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {ErrorStateMatcher} from '@angular/material/core';\nimport {MatChipList} from './chip-list';\nimport {MatBasicChip, MatChip, MatChipRemove} from './chip';\nimport {MatChipInput} from './chip-input';\n\n\n@NgModule({\n  imports: [],\n  exports: [MatChipList, MatChip, MatChipInput, MatChipRemove, MatChipRemove, MatBasicChip],\n  declarations: [MatChipList, MatChip, MatChipInput, MatChipRemove,  MatChipRemove, MatBasicChip],\n  providers: [ErrorStateMatcher]\n})\nexport class MatChipsModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ViewContainerRef} from '@angular/core';\nimport {Direction} from '@angular/cdk/bidi';\nimport {ScrollStrategy} from '@angular/cdk/overlay';\n\n/** Valid ARIA roles for a dialog element. */\nexport type DialogRole = 'dialog' | 'alertdialog';\n\n/** Possible overrides for a dialog's position. */\nexport interface DialogPosition {\n  /** Override for the dialog's top position. */\n  top?: string;\n\n  /** Override for the dialog's bottom position. */\n  bottom?: string;\n\n  /** Override for the dialog's left position. */\n  left?: string;\n\n  /** Override for the dialog's right position. */\n  right?: string;\n}\n\n/**\n * Configuration for opening a modal dialog with the MatDialog service.\n */\nexport class MatDialogConfig<D = any> {\n\n  /**\n   * Where the attached component should live in Angular's *logical* component tree.\n   * This affects what is available for injection and the change detection order for the\n   * component instantiated inside of the dialog. This does not affect where the dialog\n   * content will be rendered.\n   */\n  viewContainerRef?: ViewContainerRef;\n\n  /** ID for the dialog. If omitted, a unique one will be generated. */\n  id?: string;\n\n  /** The ARIA role of the dialog element. */\n  role?: DialogRole = 'dialog';\n\n  /** Custom class for the overlay pane. */\n  panelClass?: string | string[] = '';\n\n  /** Whether the dialog has a backdrop. */\n  hasBackdrop?: boolean = true;\n\n  /** Custom class for the backdrop, */\n  backdropClass?: string = '';\n\n  /** Whether the user can use escape or clicking outside to close a modal. */\n  disableClose?: boolean = false;\n\n  /** Width of the dialog. */\n  width?: string = '';\n\n  /** Height of the dialog. */\n  height?: string = '';\n\n  /** Min-width of the dialog. If a number is provided, pixel units are assumed. */\n  minWidth?: number | string;\n\n  /** Min-height of the dialog. If a number is provided, pixel units are assumed. */\n  minHeight?: number | string;\n\n  /** Max-width of the dialog. If a number is provided, pixel units are assumed. Defaults to 80vw */\n  maxWidth?: number | string = '80vw';\n\n  /** Max-height of the dialog. If a number is provided, pixel units are assumed. */\n  maxHeight?: number | string;\n\n  /** Position overrides. */\n  position?: DialogPosition;\n\n  /** Data being injected into the child component. */\n  data?: D | null = null;\n\n  /** Layout direction for the dialog's content. */\n  direction?: Direction = 'ltr';\n\n  /** ID of the element that describes the dialog.  */\n  ariaDescribedBy?: string | null = null;\n\n  /** Aria label to assign to the dialog element */\n  ariaLabel?: string | null = null;\n\n  /** Whether the dialog should focus the first focusable element on open. */\n  autoFocus?: boolean = true;\n\n  /** Scroll strategy to be used for the dialog. */\n  scrollStrategy?: ScrollStrategy;\n\n  // TODO(jelbourn): add configuration for lifecycle hooks, ARIA labelling.\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/** Animations used by MatDialog. */\nexport const matDialogAnimations: {\n  readonly slideDialog: AnimationTriggerMetadata;\n} = {\n  /** Animation that slides the dialog in and out of view and fades the opacity. */\n  slideDialog: trigger('slideDialog', [\n    // Note: The `enter` animation doesn't transition to something like `translate3d(0, 0, 0)\n    // scale(1)`, because for some reason specifying the transform explicitly, causes IE both\n    // to blur the dialog content and decimate the animation performance. Leaving it as `none`\n    // solves both issues.\n    state('enter', style({ transform: 'none', opacity: 1 })),\n    state('void', style({ transform: 'translate3d(0, 25%, 0) scale(0.9)', opacity: 0 })),\n    state('exit', style({ transform: 'translate3d(0, 25%, 0)', opacity: 0 })),\n    transition('* => *', animate('400ms cubic-bezier(0.25, 0.8, 0.25, 1)')),\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor} from '@angular/cdk/a11y';\nimport {Platform} from '@angular/cdk/platform';\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  Directive,\n  ElementRef,\n  forwardRef,\n  Inject,\n  OnDestroy,\n  Optional,\n  Self,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {\n  CanColor,\n  CanDisable,\n  CanDisableRipple,\n  mixinColor,\n  mixinDisabled,\n  mixinDisableRipple\n} from '@angular/material/core';\n\n\n// TODO(kara): Convert attribute selectors to classes when attr maps become available\n\n/** Default color palette for round buttons (mat-fab and mat-mini-fab) */\nconst DEFAULT_ROUND_BUTTON_COLOR = 'accent';\n\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: 'button[mat-button], a[mat-button]',\n  host: {'class': 'mat-button'}\n})\nexport class MatButtonCssMatStyler {}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: 'button[mat-raised-button], a[mat-raised-button]',\n  host: {'class': 'mat-raised-button'}\n})\nexport class MatRaisedButtonCssMatStyler {}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: 'button[mat-icon-button], a[mat-icon-button]',\n  host: {'class': 'mat-icon-button'}\n})\nexport class MatIconButtonCssMatStyler {}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: 'button[mat-fab], a[mat-fab]',\n  host: {'class': 'mat-fab'}\n})\nexport class MatFab {\n  constructor(@Self() @Optional() @Inject(forwardRef(() => MatButton)) button: MatButton,\n              @Self() @Optional() @Inject(forwardRef(() => MatAnchor)) anchor: MatAnchor) {\n    // Set the default color palette for the mat-fab components.\n    (button || anchor).color = DEFAULT_ROUND_BUTTON_COLOR;\n  }\n}\n\n/**\n * Directive that targets mini-fab buttons and anchors. It's used to apply the `mat-` class\n * to all mini-fab buttons and also is responsible for setting the default color palette.\n * @docs-private\n */\n@Directive({\n  selector: 'button[mat-mini-fab], a[mat-mini-fab]',\n  host: {'class': 'mat-mini-fab'}\n})\nexport class MatMiniFab {\n  constructor(@Self() @Optional() @Inject(forwardRef(() => MatButton)) button: MatButton,\n              @Self() @Optional() @Inject(forwardRef(() => MatAnchor)) anchor: MatAnchor) {\n    // Set the default color palette for the mat-mini-fab components.\n    (button || anchor).color = DEFAULT_ROUND_BUTTON_COLOR;\n  }\n}\n\n\n// Boilerplate for applying mixins to MatButton.\n/** @docs-private */\nexport class MatButtonBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatButtonMixinBase = mixinColor(mixinDisabled(mixinDisableRipple(MatButtonBase)));\n\n\n/**\n * Material design button.\n */\n@Component({\n  moduleId: module.id,\n  selector: `button[mat-button], button[mat-raised-button], button[mat-icon-button],\n             button[mat-fab], button[mat-mini-fab]`,\n  exportAs: 'matButton',\n  host: {\n    '[disabled]': 'disabled || null',\n  },\n  templateUrl: 'button.html',\n  styleUrls: ['button.css'],\n  inputs: ['disabled', 'disableRipple', 'color'],\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatButton extends _MatButtonMixinBase\n    implements OnDestroy, CanDisable, CanColor, CanDisableRipple {\n\n  /** Whether the button is round. */\n  _isRoundButton: boolean = this._hasHostAttributes('mat-fab', 'mat-mini-fab');\n\n  /** Whether the button is icon button. */\n  _isIconButton: boolean = this._hasHostAttributes('mat-icon-button');\n\n  constructor(elementRef: ElementRef,\n              private _platform: Platform,\n              private _focusMonitor: FocusMonitor) {\n    super(elementRef);\n    this._focusMonitor.monitor(this._elementRef.nativeElement, true);\n  }\n\n  ngOnDestroy() {\n    this._focusMonitor.stopMonitoring(this._elementRef.nativeElement);\n  }\n\n  /** Focuses the button. */\n  focus(): void {\n    this._getHostElement().focus();\n  }\n\n  _getHostElement() {\n    return this._elementRef.nativeElement;\n  }\n\n  _isRippleDisabled() {\n    return this.disableRipple || this.disabled;\n  }\n\n  /** Gets whether the button has one of the given attributes. */\n  _hasHostAttributes(...attributes: string[]) {\n    // If not on the browser, say that there are none of the attributes present.\n    // Since these only affect how the ripple displays (and ripples only happen on the client),\n    // detecting these attributes isn't necessary when not on the browser.\n    if (!this._platform.isBrowser) {\n      return false;\n    }\n\n    return attributes.some(attribute => this._getHostElement().hasAttribute(attribute));\n  }\n}\n\n/**\n * Raised Material design button.\n */\n@Component({\n  moduleId: module.id,\n  selector: `a[mat-button], a[mat-raised-button], a[mat-icon-button], a[mat-fab], a[mat-mini-fab]`,\n  exportAs: 'matButton, matAnchor',\n  host: {\n    '[attr.tabindex]': 'disabled ? -1 : 0',\n    '[attr.disabled]': 'disabled || null',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '(click)': '_haltDisabledEvents($event)',\n  },\n  inputs: ['disabled', 'disableRipple', 'color'],\n  templateUrl: 'button.html',\n  styleUrls: ['button.css'],\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatAnchor extends MatButton {\n  constructor(\n      platform: Platform,\n      focusMonitor: FocusMonitor,\n      elementRef: ElementRef) {\n    super(elementRef, platform, focusMonitor);\n  }\n\n  _haltDisabledEvents(event: Event) {\n    // A disabled button shouldn't apply any actions\n    if (this.disabled) {\n      event.preventDefault();\n      event.stopImmediatePropagation();\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {A11yModule} from '@angular/cdk/a11y';\nimport {\n  MatAnchor,\n  MatButton,\n  MatMiniFab,\n  MatButtonCssMatStyler,\n  MatFab,\n  MatIconButtonCssMatStyler,\n  MatRaisedButtonCssMatStyler\n} from './button';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatRippleModule,\n    MatCommonModule,\n    A11yModule,\n  ],\n  exports: [\n    MatButton,\n    MatAnchor,\n    MatMiniFab,\n    MatFab,\n    MatCommonModule,\n    MatButtonCssMatStyler,\n    MatRaisedButtonCssMatStyler,\n    MatIconButtonCssMatStyler,\n  ],\n  declarations: [\n    MatButton,\n    MatAnchor,\n    MatMiniFab,\n    MatFab,\n    MatButtonCssMatStyler,\n    MatRaisedButtonCssMatStyler,\n    MatIconButtonCssMatStyler,\n  ],\n})\nexport class MatButtonModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {UniqueSelectionDispatcher} from '@angular/cdk/collections';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Input,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Output,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {CanDisable, mixinDisabled} from '@angular/material/core';\n\n/** Acceptable types for a button toggle. */\nexport type ToggleType = 'checkbox' | 'radio';\n\n// Boilerplate for applying mixins to MatButtonToggleGroup and MatButtonToggleGroupMultiple\n/** @docs-private */\nexport class MatButtonToggleGroupBase {}\nexport const _MatButtonToggleGroupMixinBase = mixinDisabled(MatButtonToggleGroupBase);\n\n/**\n * Provider Expression that allows mat-button-toggle-group to register as a ControlValueAccessor.\n * This allows it to support [(ngModel)].\n * @docs-private\n */\nexport const MAT_BUTTON_TOGGLE_GROUP_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatButtonToggleGroup),\n  multi: true\n};\n\nlet _uniqueIdCounter = 0;\n\n/** Change event object emitted by MatButtonToggle. */\nexport class MatButtonToggleChange {\n  /** The MatButtonToggle that emits the event. */\n  source: MatButtonToggle | null;\n  /** The value assigned to the MatButtonToggle. */\n  value: any;\n}\n\n/** Exclusive selection button toggle group that behaves like a radio-button group. */\n@Directive({\n  selector: 'mat-button-toggle-group:not([multiple])',\n  providers: [MAT_BUTTON_TOGGLE_GROUP_VALUE_ACCESSOR],\n  inputs: ['disabled'],\n  host: {\n    'role': 'radiogroup',\n    'class': 'mat-button-toggle-group',\n    '[class.mat-button-toggle-vertical]': 'vertical'\n  },\n  exportAs: 'matButtonToggleGroup',\n})\nexport class MatButtonToggleGroup extends _MatButtonToggleGroupMixinBase\n    implements ControlValueAccessor, CanDisable {\n\n  /** The value for the button toggle group. Should match currently selected button toggle. */\n  private _value: any = null;\n\n  /** The HTML name attribute applied to toggles in this group. */\n  private _name: string = `mat-button-toggle-group-${_uniqueIdCounter++}`;\n\n  /** Whether the button toggle group should be vertical. */\n  private _vertical: boolean = false;\n\n  /** The currently selected button toggle, should match the value. */\n  private _selected: MatButtonToggle | null = null;\n\n  /**\n   * The method to be called in order to update ngModel.\n   * Now `ngModel` binding is not supported in multiple selection mode.\n   */\n  _controlValueAccessorChangeFn: (value: any) => void = () => {};\n\n  /** onTouch function registered via registerOnTouch (ControlValueAccessor). */\n  _onTouched: () => any = () => {};\n\n  /** Child button toggle buttons. */\n  @ContentChildren(forwardRef(() => MatButtonToggle)) _buttonToggles: QueryList<MatButtonToggle>;\n\n  /** `name` attribute for the underlying `input` element. */\n  @Input()\n  get name(): string {\n    return this._name;\n  }\n\n  set name(value: string) {\n    this._name = value;\n    this._updateButtonToggleNames();\n  }\n\n  /** Whether the toggle group is vertical. */\n  @Input()\n  get vertical(): boolean {\n    return this._vertical;\n  }\n\n  set vertical(value) {\n    this._vertical = coerceBooleanProperty(value);\n  }\n\n  /** Value of the toggle group. */\n  @Input()\n  get value(): any {\n    return this._value;\n  }\n  set value(newValue: any) {\n    if (this._value != newValue) {\n      this._value = newValue;\n      this.valueChange.emit(newValue);\n      this._updateSelectedButtonToggleFromValue();\n    }\n  }\n\n  /**\n   * Event that emits whenever the value of the group changes.\n   * Used to facilitate two-way data binding.\n   * @docs-private\n   */\n  @Output() valueChange = new EventEmitter<any>();\n\n  /** Whether the toggle group is selected. */\n  @Input()\n  get selected() {\n    return this._selected;\n  }\n\n  set selected(selected: MatButtonToggle | null) {\n    this._selected = selected;\n    this.value = selected ? selected.value : null;\n\n    if (selected && !selected.checked) {\n      selected.checked = true;\n    }\n  }\n\n  /** Event emitted when the group's value changes. */\n  @Output() change: EventEmitter<MatButtonToggleChange> = new EventEmitter<MatButtonToggleChange>();\n\n  constructor(private _changeDetector: ChangeDetectorRef) {\n    super();\n  }\n\n  private _updateButtonToggleNames(): void {\n    if (this._buttonToggles) {\n      this._buttonToggles.forEach((toggle) => {\n        toggle.name = this._name;\n      });\n    }\n  }\n\n  // TODO: Refactor into shared code with radio.\n  private _updateSelectedButtonToggleFromValue(): void {\n    let isAlreadySelected = this._selected != null && this._selected.value == this._value;\n\n    if (this._buttonToggles != null && !isAlreadySelected) {\n      let matchingButtonToggle = this._buttonToggles.filter(\n          buttonToggle => buttonToggle.value == this._value)[0];\n\n      if (matchingButtonToggle) {\n        this.selected = matchingButtonToggle;\n      } else if (this.value == null) {\n        this.selected = null;\n        this._buttonToggles.forEach(buttonToggle => {\n          buttonToggle.checked = false;\n        });\n      }\n    }\n  }\n\n  /** Dispatch change event with current selection and group value. */\n  _emitChangeEvent(): void {\n    let event = new MatButtonToggleChange();\n    event.source = this._selected;\n    event.value = this._value;\n    this._controlValueAccessorChangeFn(event.value);\n    this.change.emit(event);\n  }\n\n  /**\n   * Sets the model value. Implemented as part of ControlValueAccessor.\n   * @param value Value to be set to the model.\n   */\n  writeValue(value: any) {\n    this.value = value;\n    this._changeDetector.markForCheck();\n  }\n\n  /**\n   * Registers a callback that will be triggered when the value has changed.\n   * Implemented as part of ControlValueAccessor.\n   * @param fn On change callback function.\n   */\n  registerOnChange(fn: (value: any) => void) {\n    this._controlValueAccessorChangeFn = fn;\n  }\n\n  /**\n   * Registers a callback that will be triggered when the control has been touched.\n   * Implemented as part of ControlValueAccessor.\n   * @param fn On touch callback function.\n   */\n  registerOnTouched(fn: any) {\n    this._onTouched = fn;\n  }\n\n  /**\n   * Toggles the disabled state of the component. Implemented as part of ControlValueAccessor.\n   * @param isDisabled Whether the component should be disabled.\n   */\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n    this._markButtonTogglesForCheck();\n  }\n\n  private _markButtonTogglesForCheck() {\n    if (this._buttonToggles) {\n      this._buttonToggles.forEach((toggle) => toggle._markForCheck());\n    }\n  }\n}\n\n/** Multiple selection button-toggle group. `ngModel` is not supported in this mode. */\n@Directive({\n  selector: 'mat-button-toggle-group[multiple]',\n  exportAs: 'matButtonToggleGroup',\n  inputs: ['disabled'],\n  host: {\n    'class': 'mat-button-toggle-group',\n    '[class.mat-button-toggle-vertical]': 'vertical',\n    'role': 'group'\n  }\n})\nexport class MatButtonToggleGroupMultiple extends _MatButtonToggleGroupMixinBase\n    implements CanDisable {\n\n  /** Whether the button toggle group should be vertical. */\n  private _vertical: boolean = false;\n\n  /** Whether the toggle group is vertical. */\n  @Input()\n  get vertical(): boolean {\n    return this._vertical;\n  }\n\n  set vertical(value) {\n    this._vertical = coerceBooleanProperty(value);\n  }\n}\n\n/** Single button inside of a toggle group. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-button-toggle',\n  templateUrl: 'button-toggle.html',\n  styleUrls: ['button-toggle.css'],\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  exportAs: 'matButtonToggle',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {\n    '[class.mat-button-toggle-standalone]': '!buttonToggleGroup && !buttonToggleGroupMultiple',\n    '[class.mat-button-toggle-checked]': 'checked',\n    '[class.mat-button-toggle-disabled]': 'disabled',\n    'class': 'mat-button-toggle',\n    '[attr.id]': 'id',\n  }\n})\nexport class MatButtonToggle implements OnInit, OnDestroy {\n  /**\n   * Attached to the aria-label attribute of the host element. In most cases, arial-labelledby will\n   * take precedence so this may be omitted.\n   */\n  @Input('aria-label') ariaLabel: string = '';\n\n  /**\n   * Users can specify the `aria-labelledby` attribute which will be forwarded to the input element\n   */\n  @Input('aria-labelledby') ariaLabelledby: string | null = null;\n\n  /** Whether or not this button toggle is checked. */\n  private _checked: boolean = false;\n\n  /** Type of the button toggle. Either 'radio' or 'checkbox'. */\n  _type: ToggleType;\n\n  /** Whether or not this button toggle is disabled. */\n  private _disabled: boolean = false;\n\n  /** Value assigned to this button toggle. */\n  private _value: any = null;\n\n  /** Whether or not the button toggle is a single selection. */\n  private _isSingleSelector: boolean = false;\n\n  /** Unregister function for _buttonToggleDispatcher **/\n  private _removeUniqueSelectionListener: () => void = () => {};\n\n  @ViewChild('input') _inputElement: ElementRef;\n\n  /** The parent button toggle group (exclusive selection). Optional. */\n  buttonToggleGroup: MatButtonToggleGroup;\n\n  /** The parent button toggle group (multiple selection). Optional. */\n  buttonToggleGroupMultiple: MatButtonToggleGroupMultiple;\n\n  /** Unique ID for the underlying `input` element. */\n  get inputId(): string {\n    return `${this.id}-input`;\n  }\n\n  /** The unique ID for this button toggle. */\n  @Input() id: string;\n\n  /** HTML's 'name' attribute used to group radios for unique selection. */\n  @Input() name: string;\n\n  /** Whether the button is checked. */\n  @Input()\n  get checked(): boolean { return this._checked; }\n  set checked(newCheckedState: boolean) {\n    if (this._isSingleSelector && newCheckedState) {\n      // Notify all button toggles with the same name (in the same group) to un-check.\n      this._buttonToggleDispatcher.notify(this.id, this.name);\n      this._changeDetectorRef.markForCheck();\n    }\n\n    this._checked = newCheckedState;\n\n    if (newCheckedState && this._isSingleSelector && this.buttonToggleGroup.value != this.value) {\n      this.buttonToggleGroup.selected = this;\n    }\n  }\n\n  /** MatButtonToggleGroup reads this to assign its own value. */\n  @Input()\n  get value(): any {\n    return this._value;\n  }\n\n  set value(value: any) {\n    if (this._value != value) {\n      if (this.buttonToggleGroup != null && this.checked) {\n        this.buttonToggleGroup.value = value;\n      }\n      this._value = value;\n    }\n  }\n\n  /** Whether the button is disabled. */\n  @Input()\n  get disabled(): boolean {\n    return this._disabled || (this.buttonToggleGroup != null && this.buttonToggleGroup.disabled) ||\n        (this.buttonToggleGroupMultiple != null && this.buttonToggleGroupMultiple.disabled);\n  }\n\n  set disabled(value: boolean) {\n    this._disabled = coerceBooleanProperty(value);\n  }\n\n  /** Event emitted when the group value changes. */\n  @Output() change: EventEmitter<MatButtonToggleChange> = new EventEmitter<MatButtonToggleChange>();\n\n  constructor(@Optional() toggleGroup: MatButtonToggleGroup,\n              @Optional() toggleGroupMultiple: MatButtonToggleGroupMultiple,\n              private _changeDetectorRef: ChangeDetectorRef,\n              private _buttonToggleDispatcher: UniqueSelectionDispatcher,\n              private _elementRef: ElementRef,\n              private _focusMonitor: FocusMonitor) {\n\n    this.buttonToggleGroup = toggleGroup;\n    this.buttonToggleGroupMultiple = toggleGroupMultiple;\n\n    if (this.buttonToggleGroup) {\n      this._removeUniqueSelectionListener =\n        _buttonToggleDispatcher.listen((id: string, name: string) => {\n          if (id != this.id && name == this.name) {\n            this.checked = false;\n            this._changeDetectorRef.markForCheck();\n          }\n        });\n\n      this._type = 'radio';\n      this.name = this.buttonToggleGroup.name;\n      this._isSingleSelector = true;\n    } else {\n      // Even if there is no group at all, treat the button toggle as a checkbox so it can be\n      // toggled on or off.\n      this._type = 'checkbox';\n      this._isSingleSelector = false;\n    }\n  }\n\n  ngOnInit() {\n    if (this.id == null) {\n      this.id = `mat-button-toggle-${_uniqueIdCounter++}`;\n    }\n\n    if (this.buttonToggleGroup && this._value == this.buttonToggleGroup.value) {\n      this._checked = true;\n    }\n    this._focusMonitor.monitor(this._elementRef.nativeElement, true);\n  }\n\n  /** Focuses the button. */\n  focus() {\n    this._inputElement.nativeElement.focus();\n  }\n\n  /** Toggle the state of the current button toggle. */\n  private _toggle(): void {\n    this.checked = !this.checked;\n  }\n\n  /** Checks the button toggle due to an interaction with the underlying native input. */\n  _onInputChange(event: Event) {\n    event.stopPropagation();\n\n    if (this._isSingleSelector) {\n      // Propagate the change one-way via the group, which will in turn mark this\n      // button toggle as checked.\n      let groupValueChanged = this.buttonToggleGroup.selected != this;\n      this.checked = true;\n      this.buttonToggleGroup.selected = this;\n      this.buttonToggleGroup._onTouched();\n      if (groupValueChanged) {\n        this.buttonToggleGroup._emitChangeEvent();\n      }\n    } else {\n      this._toggle();\n    }\n\n    // Emit a change event when the native input does.\n    this._emitChangeEvent();\n  }\n\n  _onInputClick(event: Event) {\n    // We have to stop propagation for click events on the visual hidden input element.\n    // By default, when a user clicks on a label element, a generated click event will be\n    // dispatched on the associated input element. Since we are using a label element as our\n    // root container, the click event on the `slide-toggle` will be executed twice.\n    // The real click event will bubble up, and the generated click event also tries to bubble up.\n    // This will lead to multiple click events.\n    // Preventing bubbling for the second event will solve that issue.\n    event.stopPropagation();\n  }\n\n  /** Dispatch change event with current value. */\n  private _emitChangeEvent(): void {\n    let event = new MatButtonToggleChange();\n    event.source = this;\n    event.value = this._value;\n    this.change.emit(event);\n  }\n\n  // Unregister buttonToggleDispatcherListener on destroy\n  ngOnDestroy(): void {\n    this._removeUniqueSelectionListener();\n  }\n\n  /**\n   * Marks the button toggle as needing checking for change detection.\n   * This method is exposed because the parent button toggle group will directly\n   * update bound properties of the radio button.\n   */\n  _markForCheck() {\n    // When group value changes, the button will not be notified. Use `markForCheck` to explicit\n    // update button toggle's status\n    this._changeDetectorRef.markForCheck();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatButtonToggleGroup, MatButtonToggleGroupMultiple, MatButtonToggle} from './button-toggle';\nimport {MatCommonModule} from '@angular/material/core';\nimport {UNIQUE_SELECTION_DISPATCHER_PROVIDER} from '@angular/cdk/collections';\nimport {A11yModule} from '@angular/cdk/a11y';\n\n\n@NgModule({\n  imports: [MatCommonModule, A11yModule],\n  exports: [\n    MatButtonToggleGroup,\n    MatButtonToggleGroupMultiple,\n    MatButtonToggle,\n    MatCommonModule,\n  ],\n  declarations: [MatButtonToggleGroup, MatButtonToggleGroupMultiple, MatButtonToggle],\n  providers: [UNIQUE_SELECTION_DISPATCHER_PROVIDER]\n})\nexport class MatButtonToggleModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ViewEncapsulation,\n  ChangeDetectionStrategy,\n  Directive,\n  Input,\n} from '@angular/core';\n\n\n/**\n * Content of a card, needed as it's used as a selector in the API.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-card-content',\n  host: {'class': 'mat-card-content'}\n})\nexport class MatCardContent {}\n\n/**\n * Title of a card, needed as it's used as a selector in the API.\n * @docs-private\n */\n@Directive({\n  selector: `mat-card-title, [mat-card-title], [matCardTitle]`,\n  host: {\n    'class': 'mat-card-title'\n  }\n})\nexport class MatCardTitle {}\n\n/**\n * Sub-title of a card, needed as it's used as a selector in the API.\n * @docs-private\n */\n@Directive({\n  selector: `mat-card-subtitle, [mat-card-subtitle], [matCardSubtitle]`,\n  host: {\n    'class': 'mat-card-subtitle'\n  }\n})\nexport class MatCardSubtitle {}\n\n/**\n * Action section of a card, needed as it's used as a selector in the API.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-card-actions',\n  exportAs: 'matCardActions',\n  host: {\n    'class': 'mat-card-actions',\n    '[class.mat-card-actions-align-end]': 'align === \"end\"',\n  }\n})\nexport class MatCardActions {\n  /** Position of the actions inside the card. */\n  @Input() align: 'start' | 'end' = 'start';\n}\n\n/**\n * Footer of a card, needed as it's used as a selector in the API.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-card-footer',\n  host: {'class': 'mat-card-footer'}\n})\nexport class MatCardFooter {}\n\n/**\n * Image used in a card, needed to add the mat- CSS styling.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-card-image], [matCardImage]',\n  host: {'class': 'mat-card-image'}\n})\nexport class MatCardImage {}\n\n/**\n * Image used in a card, needed to add the mat- CSS styling.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-card-sm-image], [matCardImageSmall]',\n  host: {'class': 'mat-card-sm-image'}\n})\nexport class MatCardSmImage {}\n\n/**\n * Image used in a card, needed to add the mat- CSS styling.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-card-md-image], [matCardImageMedium]',\n  host: {'class': 'mat-card-md-image'}\n})\nexport class MatCardMdImage {}\n\n/**\n * Image used in a card, needed to add the mat- CSS styling.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-card-lg-image], [matCardImageLarge]',\n  host: {'class': 'mat-card-lg-image'}\n})\nexport class MatCardLgImage {}\n\n/**\n * Large image used in a card, needed to add the mat- CSS styling.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-card-xl-image], [matCardImageXLarge]',\n  host: {'class': 'mat-card-xl-image'}\n})\nexport class MatCardXlImage {}\n\n/**\n * Avatar image used in a card, needed to add the mat- CSS styling.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-card-avatar], [matCardAvatar]',\n  host: {'class': 'mat-card-avatar'}\n})\nexport class MatCardAvatar {}\n\n\n/**\n * A basic content container component that adds the styles of a Material design card.\n *\n * While this component can be used alone, it also provides a number\n * of preset styles for common card sections, including:\n * - mat-card-title\n * - mat-card-subtitle\n * - mat-card-content\n * - mat-card-actions\n * - mat-card-footer\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-card',\n  exportAs: 'matCard',\n  templateUrl: 'card.html',\n  styleUrls: ['card.css'],\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {'class': 'mat-card'}\n})\nexport class MatCard {}\n\n\n/**\n * Component intended to be used within the `<mat-card>` component. It adds styles for a\n * preset header section (i.e. a title, subtitle, and avatar layout).\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-card-header',\n  templateUrl: 'card-header.html',\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {'class': 'mat-card-header'}\n})\nexport class MatCardHeader {}\n\n\n/**\n * Component intended to be used within the <mat-card> component. It adds styles for a preset\n * layout that groups an image with a title section.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-card-title-group',\n  templateUrl: 'card-title-group.html',\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {'class': 'mat-card-title-group'}\n})\nexport class MatCardTitleGroup {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {\n  MatCard,\n  MatCardHeader,\n  MatCardTitleGroup,\n  MatCardContent,\n  MatCardTitle,\n  MatCardSubtitle,\n  MatCardActions,\n  MatCardFooter,\n  MatCardSmImage,\n  MatCardMdImage,\n  MatCardLgImage,\n  MatCardImage,\n  MatCardXlImage,\n  MatCardAvatar,\n} from './card';\n\n\n@NgModule({\n  imports: [MatCommonModule],\n  exports: [\n    MatCard,\n    MatCardHeader,\n    MatCardTitleGroup,\n    MatCardContent,\n    MatCardTitle,\n    MatCardSubtitle,\n    MatCardActions,\n    MatCardFooter,\n    MatCardSmImage,\n    MatCardMdImage,\n    MatCardLgImage,\n    MatCardImage,\n    MatCardXlImage,\n    MatCardAvatar,\n    MatCommonModule,\n  ],\n  declarations: [\n    MatCard, MatCardHeader, MatCardTitleGroup, MatCardContent, MatCardTitle, MatCardSubtitle,\n    MatCardActions, MatCardFooter, MatCardSmImage, MatCardMdImage, MatCardLgImage, MatCardImage,\n    MatCardXlImage, MatCardAvatar,\n  ],\n})\nexport class MatCardModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {InjectionToken} from '@angular/core';\n\n\n/**\n * Checkbox click action when user click on input element.\n * noop: Do not toggle checked or indeterminate.\n * check: Only toggle checked status, ignore indeterminate.\n * check-indeterminate: Toggle checked status, set indeterminate to false. Default behavior.\n * undefined: Same as `check-indeterminate`.\n */\nexport type MatCheckboxClickAction = 'noop' | 'check' | 'check-indeterminate' | undefined;\n\n/**\n * Injection token that can be used to specify the checkbox click behavior.\n */\nexport const MAT_CHECKBOX_CLICK_ACTION =\n    new InjectionToken<MatCheckboxClickAction>('mat-checkbox-click-action');\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {ENTER, SPACE} from '@angular/cdk/keycodes';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  EventEmitter,\n  Input,\n  Optional,\n  Output,\n  QueryList,\n  ViewEncapsulation,\n  InjectionToken,\n  Inject,\n} from '@angular/core';\nimport {MatOptgroup} from './optgroup';\n\n/**\n * Option IDs need to be unique across components, so this counter exists outside of\n * the component definition.\n */\nlet _uniqueIdCounter = 0;\n\n/** Event object emitted by MatOption when selected or deselected. */\nexport class MatOptionSelectionChange {\n  constructor(\n    /** Reference to the option that emitted the event. */\n    public source: MatOption,\n    /** Whether the change in the option's value was a result of a user action. */\n    public isUserInput = false) { }\n}\n\n/**\n * Describes a parent component that manages a list of options.\n * Contains properties that the options can inherit.\n * @docs-private\n */\nexport interface MatOptionParentComponent {\n  disableRipple?: boolean;\n  multiple?: boolean;\n}\n\n/**\n * Injection token used to provide the parent component to options.\n */\nexport const MAT_OPTION_PARENT_COMPONENT =\n    new InjectionToken<MatOptionParentComponent>('MAT_OPTION_PARENT_COMPONENT');\n\n/**\n * Single option inside of a `<mat-select>` element.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-option',\n  exportAs: 'matOption',\n  host: {\n    'role': 'option',\n    '[attr.tabindex]': '_getTabIndex()',\n    '[class.mat-selected]': 'selected',\n    '[class.mat-option-multiple]': 'multiple',\n    '[class.mat-active]': 'active',\n    '[id]': 'id',\n    '[attr.aria-selected]': 'selected.toString()',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[class.mat-option-disabled]': 'disabled',\n    '(click)': '_selectViaInteraction()',\n    '(keydown)': '_handleKeydown($event)',\n    'class': 'mat-option',\n  },\n  templateUrl: 'option.html',\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatOption {\n  private _selected = false;\n  private _active = false;\n  private _disabled = false;\n  private _id = `mat-option-${_uniqueIdCounter++}`;\n\n  /** Whether the wrapping component is in multiple selection mode. */\n  get multiple() { return this._parent && this._parent.multiple; }\n\n  /** The unique ID of the option. */\n  get id(): string { return this._id; }\n\n  /** Whether or not the option is currently selected. */\n  get selected(): boolean { return this._selected; }\n\n  /** The form value of the option. */\n  @Input() value: any;\n\n  /** Whether the option is disabled. */\n  @Input()\n  get disabled() { return (this.group && this.group.disabled) || this._disabled; }\n  set disabled(value: any) { this._disabled = coerceBooleanProperty(value); }\n\n  /** Whether ripples for the option are disabled. */\n  get disableRipple() { return this._parent && this._parent.disableRipple; }\n\n  /** Event emitted when the option is selected or deselected. */\n  @Output() onSelectionChange = new EventEmitter<MatOptionSelectionChange>();\n\n  constructor(\n    private _element: ElementRef,\n    private _changeDetectorRef: ChangeDetectorRef,\n    @Optional() @Inject(MAT_OPTION_PARENT_COMPONENT) private _parent: MatOptionParentComponent,\n    @Optional() readonly group: MatOptgroup) {}\n\n  /**\n   * Whether or not the option is currently active and ready to be selected.\n   * An active option displays styles as if it is focused, but the\n   * focus is actually retained somewhere else. This comes in handy\n   * for components like autocomplete where focus must remain on the input.\n   */\n  get active(): boolean {\n    return this._active;\n  }\n\n  /**\n   * The displayed value of the option. It is necessary to show the selected option in the\n   * select's trigger.\n   */\n  get viewValue(): string {\n    // TODO(kara): Add input property alternative for node envs.\n    return (this._getHostElement().textContent || '').trim();\n  }\n\n  /** Selects the option. */\n  select(): void {\n    this._selected = true;\n    this._changeDetectorRef.markForCheck();\n    this._emitSelectionChangeEvent();\n  }\n\n  /** Deselects the option. */\n  deselect(): void {\n    this._selected = false;\n    this._changeDetectorRef.markForCheck();\n    this._emitSelectionChangeEvent();\n  }\n\n  /** Sets focus onto this option. */\n  focus(): void {\n    const element = this._getHostElement();\n\n    if (typeof element.focus === 'function') {\n      element.focus();\n    }\n  }\n\n  /**\n   * This method sets display styles on the option to make it appear\n   * active. This is used by the ActiveDescendantKeyManager so key\n   * events will display the proper options as active on arrow key events.\n   */\n  setActiveStyles(): void {\n    if (!this._active) {\n      this._active = true;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  /**\n   * This method removes display styles on the option that made it appear\n   * active. This is used by the ActiveDescendantKeyManager so key\n   * events will display the proper options as active on arrow key events.\n   */\n  setInactiveStyles(): void {\n    if (this._active) {\n      this._active = false;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  /** Gets the label to be used when determining whether the option should be focused. */\n  getLabel(): string {\n    return this.viewValue;\n  }\n\n  /** Ensures the option is selected when activated from the keyboard. */\n  _handleKeydown(event: KeyboardEvent): void {\n    if (event.keyCode === ENTER || event.keyCode === SPACE) {\n      this._selectViaInteraction();\n\n      // Prevent the page from scrolling down and form submits.\n      event.preventDefault();\n    }\n  }\n\n  /**\n   * Selects the option while indicating the selection came from the user. Used to\n   * determine if the select's view -> model callback should be invoked.\n   */\n  _selectViaInteraction(): void {\n    if (!this.disabled) {\n      this._selected = this.multiple ? !this._selected : true;\n      this._changeDetectorRef.markForCheck();\n      this._emitSelectionChangeEvent(true);\n    }\n  }\n\n  /** Returns the correct tabindex for the option depending on disabled state. */\n  _getTabIndex(): string {\n    return this.disabled ? '-1' : '0';\n  }\n\n  /** Gets the host DOM element. */\n  _getHostElement(): HTMLElement {\n    return this._element.nativeElement;\n  }\n\n  /** Emits the selection change event. */\n  private _emitSelectionChangeEvent(isUserInput = false): void {\n    this.onSelectionChange.emit(new MatOptionSelectionChange(this, isUserInput));\n  }\n\n  /**\n   * Counts the amount of option group labels that precede the specified option.\n   * @param optionIndex Index of the option at which to start counting.\n   * @param options Flat list of all of the options.\n   * @param optionGroups Flat list of all of the option groups.\n   */\n  static countGroupLabelsBeforeOption(optionIndex: number, options: QueryList<MatOption>,\n    optionGroups: QueryList<MatOptgroup>): number {\n\n    if (optionGroups.length) {\n      let optionsArray = options.toArray();\n      let groups = optionGroups.toArray();\n      let groupCounter = 0;\n\n      for (let i = 0; i < optionIndex + 1; i++) {\n        if (optionsArray[i].group && optionsArray[i].group === groups[groupCounter]) {\n          groupCounter++;\n        }\n      }\n\n      return groupCounter;\n    }\n\n    return 0;\n  }\n\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {MatRippleModule} from '../ripple/index';\nimport {MatPseudoCheckboxModule} from '../selection/index';\nimport {MatOption} from './option';\nimport {MatOptgroup} from './optgroup';\n\n\n@NgModule({\n  imports: [MatRippleModule, CommonModule, MatPseudoCheckboxModule],\n  exports: [MatOption, MatOptgroup],\n  declarations: [MatOption, MatOptgroup]\n})\nexport class MatOptionModule {}\n\n\nexport * from './option';\nexport * from './optgroup';\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {InjectionToken} from '@angular/core';\n\n/** InjectionToken that can be used to specify the global label options. */\nexport const MAT_LABEL_GLOBAL_OPTIONS =\n  new InjectionToken<LabelOptions>('mat-label-global-options');\n\n/** Type for the available floatLabel values. */\nexport type FloatLabelType = 'always' | 'never' | 'auto';\n\n/** Configurable options for floating labels. */\nexport interface LabelOptions {\n  /**\n   * Whether the label should float `always`, `never`, or `auto` (only when necessary).\n   * Default behavior is assumed to be `auto`.\n   */\n  float?: FloatLabelType;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, Input} from '@angular/core';\n\n\nlet nextUniqueId = 0;\n\n\n/** Single error message to be shown underneath the form field. */\n@Directive({\n  selector: 'mat-error',\n  host: {\n    'class': 'mat-error',\n    'role': 'alert',\n    '[attr.id]': 'id',\n  }\n})\nexport class MatError {\n  @Input() id: string = `mat-error-${nextUniqueId++}`;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Observable} from 'rxjs/Observable';\nimport {NgControl} from '@angular/forms';\n\n\n/** An interface which allows a control to work inside of a `MatFormField`. */\nexport abstract class MatFormFieldControl<T> {\n  /** The value of the control. */\n  value: T | null;\n\n  /**\n   * Stream that emits whenever the state of the control changes such that the parent `MatFormField`\n   * needs to run change detection.\n   */\n  readonly stateChanges: Observable<void>;\n\n  /** The element ID for this control. */\n  readonly id: string;\n\n  /** The placeholder for this control. */\n  readonly placeholder: string;\n\n  /** Gets the NgControl for this control. */\n  readonly ngControl: NgControl | null;\n\n  /** Whether the control is focused. */\n  readonly focused: boolean;\n\n  /** Whether the control is empty. */\n  readonly empty: boolean;\n\n  /** Whether the `MatFormField` label should try to float. */\n  readonly shouldLabelFloat?: boolean;\n\n  /**\n   * Whether the `MatFormField` placeholder should try to float.\n   * @deprecated Use `shouldLabelFloat` instead.\n   */\n  readonly shouldPlaceholderFloat?: boolean;\n\n  /** Whether the control is required. */\n  readonly required: boolean;\n\n  /** Whether the control is disabled. */\n  readonly disabled: boolean;\n\n  /** Whether the control is in an error state. */\n  readonly errorState: boolean;\n\n  /**\n   * An optional name for the control type that can be used to distinguish `mat-form-field` elements\n   * based on their control type. The form field will add a class,\n   * `mat-form-field-type-{{controlType}}` to its root element.\n   */\n  readonly controlType?: string;\n\n  /** Sets the list of element IDs that currently describe this control. */\n  abstract setDescribedByIds(ids: string[]): void;\n\n  /** Handles a click on the control's container. */\n  abstract onContainerClick(event: MouseEvent): void;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, Input} from '@angular/core';\n\n\nlet nextUniqueId = 0;\n\n\n/** Hint text to be shown underneath the form field control. */\n@Directive({\n  selector: 'mat-hint',\n  host: {\n    'class': 'mat-hint',\n    '[class.mat-right]': 'align == \"end\"',\n    '[attr.id]': 'id',\n    // Remove align attribute to prevent it from interfering with layout.\n    '[attr.align]': 'null',\n  }\n})\nexport class MatHint {\n  /** Whether to align the hint label at the start or end of the line. */\n  @Input() align: 'start' | 'end' = 'start';\n\n  /** Unique ID for the hint. Used for the aria-describedby on the form field control. */\n  @Input() id: string = `mat-hint-${nextUniqueId++}`;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive} from '@angular/core';\n\n\n/** The placeholder text for an `MatFormField`. */\n@Directive({\n  selector: 'mat-placeholder'\n})\nexport class MatPlaceholder {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive} from '@angular/core';\n\n\n/** The floating label for a `mat-form-field`. */\n@Directive({\n  selector: 'mat-label'\n})\nexport class MatLabel {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive} from '@angular/core';\n\n\n/** Prefix to be placed the the front of the form field. */\n@Directive({\n  selector: '[matPrefix]',\n})\nexport class MatPrefix {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive} from '@angular/core';\n\n\n/** Suffix to be placed at the end of the form field. */\n@Directive({\n  selector: '[matSuffix]',\n})\nexport class MatSuffix {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/** Animations used by the MatFormField. */\nexport const matFormFieldAnimations: {\n  readonly transitionMessages: AnimationTriggerMetadata\n} = {\n  /** Animation that transitions the form field's error and hint messages. */\n  transitionMessages: trigger('transitionMessages', [\n    // TODO(mmalerba): Use angular animations for label animation as well.\n    state('enter', style({ opacity: 1, transform: 'translateY(0%)' })),\n    transition('void => enter', [\n      style({ opacity: 0, transform: 'translateY(-100%)' }),\n      animate('300ms cubic-bezier(0.55, 0, 0.55, 0.2)'),\n    ]),\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {take} from 'rxjs/operators/take';\nimport {startWith} from 'rxjs/operators/startWith';\nimport {\n  AfterContentChecked,\n  AfterContentInit,\n  AfterViewInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  ContentChildren,\n  ElementRef,\n  Inject,\n  Input,\n  Optional,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {FloatLabelType, MAT_LABEL_GLOBAL_OPTIONS, LabelOptions} from '@angular/material/core';\nimport {fromEvent} from 'rxjs/observable/fromEvent';\nimport {MatError} from './error';\nimport {MatFormFieldControl} from './form-field-control';\nimport {\n  getMatFormFieldDuplicatedHintError,\n  getMatFormFieldMissingControlError,\n  getMatFormFieldPlaceholderConflictError,\n} from './form-field-errors';\nimport {MatHint} from './hint';\nimport {MatPlaceholder} from './placeholder';\nimport {MatLabel} from './label';\nimport {MatPrefix} from './prefix';\nimport {MatSuffix} from './suffix';\nimport {matFormFieldAnimations} from './form-field-animations';\n\n\nlet nextUniqueId = 0;\n\n\n/** Container for form controls that applies Material Design styling and behavior. */\n@Component({\n  moduleId: module.id,\n  // TODO(mmalerba): the input-container selectors and classes are deprecated and will be removed.\n  selector: 'mat-input-container, mat-form-field',\n  exportAs: 'matFormField',\n  templateUrl: 'form-field.html',\n  // MatInput is a directive and can't have styles, so we need to include its styles here.\n  // The MatInput styles are fairly minimal so it shouldn't be a big deal for people who\n  // aren't using MatInput.\n  styleUrls: ['form-field.css', '../input/input.css'],\n  animations: [matFormFieldAnimations.transitionMessages],\n  host: {\n    'class': 'mat-input-container mat-form-field',\n    '[class.mat-input-invalid]': '_control.errorState',\n    '[class.mat-form-field-invalid]': '_control.errorState',\n    '[class.mat-form-field-can-float]': '_canLabelFloat',\n    '[class.mat-form-field-should-float]': '_shouldLabelFloat()',\n    '[class.mat-form-field-hide-placeholder]': '_hideControlPlaceholder()',\n    '[class.mat-form-field-disabled]': '_control.disabled',\n    '[class.mat-focused]': '_control.focused',\n    '[class.mat-primary]': 'color == \"primary\"',\n    '[class.mat-accent]': 'color == \"accent\"',\n    '[class.mat-warn]': 'color == \"warn\"',\n    '[class.ng-untouched]': '_shouldForward(\"untouched\")',\n    '[class.ng-touched]': '_shouldForward(\"touched\")',\n    '[class.ng-pristine]': '_shouldForward(\"pristine\")',\n    '[class.ng-dirty]': '_shouldForward(\"dirty\")',\n    '[class.ng-valid]': '_shouldForward(\"valid\")',\n    '[class.ng-invalid]': '_shouldForward(\"invalid\")',\n    '[class.ng-pending]': '_shouldForward(\"pending\")',\n  },\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\n\nexport class MatFormField implements AfterViewInit, AfterContentInit, AfterContentChecked {\n  private _labelOptions: LabelOptions;\n\n  /** Color of the form field underline, based on the theme. */\n  @Input() color: 'primary' | 'accent' | 'warn' = 'primary';\n\n  /** @deprecated Use `color` instead. */\n  @Input()\n  get dividerColor(): 'primary' | 'accent' | 'warn' { return this.color; }\n  set dividerColor(value) { this.color = value; }\n\n  /** Whether the required marker should be hidden. */\n  @Input()\n  get hideRequiredMarker() { return this._hideRequiredMarker; }\n  set hideRequiredMarker(value: any) {\n    this._hideRequiredMarker = coerceBooleanProperty(value);\n  }\n  private _hideRequiredMarker: boolean;\n\n  /** Override for the logic that disables the label animation in certain cases. */\n  private _showAlwaysAnimate = false;\n\n  /** Whether the floating label should always float or not. */\n  get _shouldAlwaysFloat() {\n    return this._floatLabel === 'always' && !this._showAlwaysAnimate;\n  }\n\n  /** Whether the label can float or not. */\n  get _canLabelFloat() { return this._floatLabel !== 'never'; }\n\n  /** State of the mat-hint and mat-error animations. */\n  _subscriptAnimationState: string = '';\n\n  /** Text for the form field hint. */\n  @Input()\n  get hintLabel() { return this._hintLabel; }\n  set hintLabel(value: string) {\n    this._hintLabel = value;\n    this._processHints();\n  }\n  private _hintLabel = '';\n\n  // Unique id for the hint label.\n  _hintLabelId: string = `mat-hint-${nextUniqueId++}`;\n\n  /**\n   * Whether the placeholder should always float, never float or float as the user types.\n   * @deprecated Use floatLabel instead.\n   */\n  @Input()\n  get floatPlaceholder() { return this._floatLabel; }\n  set floatPlaceholder(value: FloatLabelType) { this.floatLabel = value; }\n\n  /** Whether the label should always float, never float or float as the user types. */\n  @Input()\n  get floatLabel() { return this._floatLabel; }\n  set floatLabel(value: FloatLabelType) {\n    if (value !== this._floatLabel) {\n      this._floatLabel = value || this._labelOptions.float || 'auto';\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n  private _floatLabel: FloatLabelType;\n\n  /** Reference to the form field's underline element. */\n  @ViewChild('underline') underlineRef: ElementRef;\n  @ViewChild('connectionContainer') _connectionContainerRef: ElementRef;\n  @ViewChild('inputContainer') _inputContainerRef: ElementRef;\n  @ViewChild('label') private _label: ElementRef;\n  @ContentChild(MatFormFieldControl) _control: MatFormFieldControl<any>;\n  @ContentChild(MatPlaceholder) _placeholderChild: MatPlaceholder;\n  @ContentChild(MatLabel) _labelChild: MatLabel;\n  @ContentChildren(MatError) _errorChildren: QueryList<MatError>;\n  @ContentChildren(MatHint) _hintChildren: QueryList<MatHint>;\n  @ContentChildren(MatPrefix) _prefixChildren: QueryList<MatPrefix>;\n  @ContentChildren(MatSuffix) _suffixChildren: QueryList<MatSuffix>;\n\n  constructor(\n      public _elementRef: ElementRef,\n      private _changeDetectorRef: ChangeDetectorRef,\n      @Optional() @Inject(MAT_LABEL_GLOBAL_OPTIONS) labelOptions: LabelOptions) {\n    this._labelOptions = labelOptions ? labelOptions : {};\n    this.floatLabel = this._labelOptions.float || 'auto';\n  }\n\n  ngAfterContentInit() {\n    this._validateControlChild();\n    if (this._control.controlType) {\n      this._elementRef.nativeElement.classList\n          .add(`mat-form-field-type-${this._control.controlType}`);\n    }\n\n    // Subscribe to changes in the child control state in order to update the form field UI.\n    this._control.stateChanges.pipe(startWith(null!)).subscribe(() => {\n      this._validatePlaceholders();\n      this._syncDescribedByIds();\n      this._changeDetectorRef.markForCheck();\n    });\n\n    let ngControl = this._control.ngControl;\n    if (ngControl && ngControl.valueChanges) {\n      ngControl.valueChanges.subscribe(() => {\n        this._changeDetectorRef.markForCheck();\n      });\n    }\n\n    // Re-validate when the number of hints changes.\n    this._hintChildren.changes.pipe(startWith(null)).subscribe(() => {\n      this._processHints();\n      this._changeDetectorRef.markForCheck();\n    });\n\n    // Update the aria-described by when the number of errors changes.\n    this._errorChildren.changes.pipe(startWith(null)).subscribe(() => {\n      this._syncDescribedByIds();\n      this._changeDetectorRef.markForCheck();\n    });\n  }\n\n  ngAfterContentChecked() {\n    this._validateControlChild();\n  }\n\n  ngAfterViewInit() {\n    // Avoid animations on load.\n    this._subscriptAnimationState = 'enter';\n    this._changeDetectorRef.detectChanges();\n  }\n\n  /** Determines whether a class from the NgControl should be forwarded to the host element. */\n  _shouldForward(prop: string): boolean {\n    let ngControl = this._control ? this._control.ngControl : null;\n    return ngControl && (ngControl as any)[prop];\n  }\n\n  _hasPlaceholder() {\n    return !!(this._control.placeholder || this._placeholderChild);\n  }\n\n  _hasLabel() {\n    return !!this._labelChild;\n  }\n\n  _shouldLabelFloat() {\n    return this._canLabelFloat && (this._control.shouldLabelFloat ||\n        this._control.shouldPlaceholderFloat || this._shouldAlwaysFloat);\n  }\n\n  _hideControlPlaceholder() {\n    return !this._hasLabel() || !this._shouldLabelFloat();\n  }\n\n  _hasFloatingLabel() {\n    return this._hasLabel() || this._hasPlaceholder();\n  }\n\n  /** Determines whether to display hints or errors. */\n  _getDisplayedMessages(): 'error' | 'hint' {\n    return (this._errorChildren && this._errorChildren.length > 0 &&\n        this._control.errorState) ? 'error' : 'hint';\n  }\n\n  /** Animates the placeholder up and locks it in position. */\n  _animateAndLockLabel(): void {\n    if (this._hasFloatingLabel() && this._canLabelFloat) {\n      this._showAlwaysAnimate = true;\n      this._floatLabel = 'always';\n\n      fromEvent(this._label.nativeElement, 'transitionend').pipe(take(1)).subscribe(() => {\n        this._showAlwaysAnimate = false;\n      });\n\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  /**\n   * Ensure that there is only one placeholder (either `placeholder` attribute on the child control\n   * or child element with the `mat-placeholder` directive).\n   */\n  private _validatePlaceholders() {\n    if (this._control.placeholder && this._placeholderChild) {\n      throw getMatFormFieldPlaceholderConflictError();\n    }\n  }\n\n  /** Does any extra processing that is required when handling the hints. */\n  private _processHints() {\n    this._validateHints();\n    this._syncDescribedByIds();\n  }\n\n  /**\n   * Ensure that there is a maximum of one of each `<mat-hint>` alignment specified, with the\n   * attribute being considered as `align=\"start\"`.\n   */\n  private _validateHints() {\n    if (this._hintChildren) {\n      let startHint: MatHint;\n      let endHint: MatHint;\n      this._hintChildren.forEach((hint: MatHint) => {\n        if (hint.align == 'start') {\n          if (startHint || this.hintLabel) {\n            throw getMatFormFieldDuplicatedHintError('start');\n          }\n          startHint = hint;\n        } else if (hint.align == 'end') {\n          if (endHint) {\n            throw getMatFormFieldDuplicatedHintError('end');\n          }\n          endHint = hint;\n        }\n      });\n    }\n  }\n\n  /**\n   * Sets the list of element IDs that describe the child control. This allows the control to update\n   * its `aria-describedby` attribute accordingly.\n   */\n  private _syncDescribedByIds() {\n    if (this._control) {\n      let ids: string[] = [];\n\n      if (this._getDisplayedMessages() === 'hint') {\n        let startHint = this._hintChildren ?\n            this._hintChildren.find(hint => hint.align === 'start') : null;\n        let endHint = this._hintChildren ?\n            this._hintChildren.find(hint => hint.align === 'end') : null;\n\n        if (startHint) {\n          ids.push(startHint.id);\n        } else if (this._hintLabel) {\n          ids.push(this._hintLabelId);\n        }\n\n        if (endHint) {\n          ids.push(endHint.id);\n        }\n      } else if (this._errorChildren) {\n        ids = this._errorChildren.map(error => error.id);\n      }\n\n      this._control.setDescribedByIds(ids);\n    }\n  }\n\n  /** Throws an error if the form field's control is missing. */\n  protected _validateControlChild() {\n    if (!this._control) {\n      throw getMatFormFieldMissingControlError();\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {PlatformModule} from '@angular/cdk/platform';\nimport {MatError} from './error';\nimport {MatFormField} from './form-field';\nimport {MatHint} from './hint';\nimport {MatPlaceholder} from './placeholder';\nimport {MatPrefix} from './prefix';\nimport {MatSuffix} from './suffix';\nimport {MatLabel} from './label';\n\n\n@NgModule({\n  declarations: [\n    MatError,\n    MatHint,\n    MatFormField,\n    MatPlaceholder,\n    MatPrefix,\n    MatSuffix,\n    MatLabel,\n  ],\n  imports: [\n    CommonModule,\n    PlatformModule,\n  ],\n  exports: [\n    MatError,\n    MatHint,\n    MatFormField,\n    MatPlaceholder,\n    MatPrefix,\n    MatSuffix,\n    MatLabel,\n  ],\n})\nexport class MatFormFieldModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  AfterContentInit,\n  Component,\n  ContentChildren,\n  ElementRef,\n  Input,\n  QueryList,\n  TemplateRef,\n  ViewChild,\n  ViewEncapsulation,\n  ChangeDetectorRef,\n  ChangeDetectionStrategy,\n  EventEmitter,\n  Output,\n} from '@angular/core';\nimport {\n  MatOption,\n  MatOptgroup,\n  MAT_OPTION_PARENT_COMPONENT,\n  mixinDisableRipple,\n  CanDisableRipple,\n} from '@angular/material/core';\nimport {ActiveDescendantKeyManager} from '@angular/cdk/a11y';\n\n\n/**\n * Autocomplete IDs need to be unique across components, so this counter exists outside of\n * the component definition.\n */\nlet _uniqueAutocompleteIdCounter = 0;\n\n/** Event object that is emitted when an autocomplete option is selected */\nexport class MatAutocompleteSelectedEvent {\n  constructor(\n    /** Reference to the autocomplete panel that emitted the event. */\n    public source: MatAutocomplete,\n    /** Option that was selected. */\n    public option: MatOption) { }\n}\n\n// Boilerplate for applying mixins to MatAutocomplete.\n/** @docs-private */\nexport class MatAutocompleteBase {}\nexport const _MatAutocompleteMixinBase = mixinDisableRipple(MatAutocompleteBase);\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-autocomplete',\n  templateUrl: 'autocomplete.html',\n  styleUrls: ['autocomplete.css'],\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  exportAs: 'matAutocomplete',\n  inputs: ['disableRipple'],\n  host: {\n    'class': 'mat-autocomplete'\n  },\n  providers: [\n    {provide: MAT_OPTION_PARENT_COMPONENT, useExisting: MatAutocomplete}\n  ]\n})\nexport class MatAutocomplete extends _MatAutocompleteMixinBase implements AfterContentInit,\n  CanDisableRipple {\n\n  /** Manages active item in option list based on key events. */\n  _keyManager: ActiveDescendantKeyManager<MatOption>;\n\n  /** Whether the autocomplete panel should be visible, depending on option length. */\n  showPanel = false;\n\n  /** Whether the autocomplete panel is open. */\n  get isOpen(): boolean {\n    return this._isOpen && this.showPanel;\n  }\n  _isOpen: boolean = false;\n\n  /** @docs-private */\n  @ViewChild(TemplateRef) template: TemplateRef<any>;\n\n  /** Element for the panel containing the autocomplete options. */\n  @ViewChild('panel') panel: ElementRef;\n\n  /** @docs-private */\n  @ContentChildren(MatOption, { descendants: true }) options: QueryList<MatOption>;\n\n  /** @docs-private */\n  @ContentChildren(MatOptgroup) optionGroups: QueryList<MatOptgroup>;\n\n  /** Function that maps an option's control value to its display value in the trigger. */\n  @Input() displayWith: ((value: any) => string) | null = null;\n\n  /** Event that is emitted whenever an option from the list is selected. */\n  @Output() optionSelected: EventEmitter<MatAutocompleteSelectedEvent> =\n      new EventEmitter<MatAutocompleteSelectedEvent>();\n\n  /**\n   * Takes classes set on the host mat-autocomplete element and applies them to the panel\n   * inside the overlay container to allow for easy styling.\n   */\n  @Input('class')\n  set classList(classList: string) {\n    if (classList && classList.length) {\n      classList.split(' ').forEach(className => this._classList[className.trim()] = true);\n      this._elementRef.nativeElement.className = '';\n    }\n  }\n  _classList: {[key: string]: boolean} = {};\n\n  /** Unique ID to be used by autocomplete trigger's \"aria-owns\" property. */\n  id: string = `mat-autocomplete-${_uniqueAutocompleteIdCounter++}`;\n\n  constructor(private _changeDetectorRef: ChangeDetectorRef, private _elementRef: ElementRef) {\n    super();\n  }\n\n  ngAfterContentInit() {\n    this._keyManager = new ActiveDescendantKeyManager<MatOption>(this.options).withWrap();\n    // Set the initial visibiity state.\n    this._setVisibility();\n  }\n\n  /**\n   * Sets the panel scrollTop. This allows us to manually scroll to display options\n   * above or below the fold, as they are not actually being focused when active.\n   */\n  _setScrollTop(scrollTop: number): void {\n    if (this.panel) {\n      this.panel.nativeElement.scrollTop = scrollTop;\n    }\n  }\n\n  /** Returns the panel's scrollTop. */\n  _getScrollTop(): number {\n    return this.panel ? this.panel.nativeElement.scrollTop : 0;\n  }\n\n  /** Panel should hide itself when the option list is empty. */\n  _setVisibility() {\n    this.showPanel = !!this.options.length;\n    this._classList['mat-autocomplete-visible'] = this.showPanel;\n    this._classList['mat-autocomplete-hidden'] = !this.showPanel;\n    this._changeDetectorRef.markForCheck();\n}\n\n  /** Emits the `select` event. */\n  _emitSelectEvent(option: MatOption): void {\n    const event = new MatAutocompleteSelectedEvent(this, option);\n    this.optionSelected.emit(event);\n  }\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {MatOptionModule, MatCommonModule} from '@angular/material/core';\nimport {MatAutocomplete} from './autocomplete';\nimport {\n  MatAutocompleteTrigger,\n  MAT_AUTOCOMPLETE_SCROLL_STRATEGY_PROVIDER,\n} from './autocomplete-trigger';\n\n@NgModule({\n  imports: [MatOptionModule, OverlayModule, MatCommonModule, CommonModule],\n  exports: [MatAutocomplete, MatOptionModule, MatAutocompleteTrigger, MatCommonModule],\n  declarations: [MatAutocomplete, MatAutocompleteTrigger],\n  providers: [MAT_AUTOCOMPLETE_SCROLL_STRATEGY_PROVIDER],\n})\nexport class MatAutocompleteModule {}\n","/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = Object.setPrototypeOf ||\r\n    ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n    function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = Object.assign || function __assign(t) {\r\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n        s = arguments[i];\r\n        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n    }\r\n    return t;\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)\r\n            t[p[i]] = s[p[i]];\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = y[op[0] & 2 ? \"return\" : op[0] ? \"throw\" : \"next\"]) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [0, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r);  }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { if (o[n]) i[n] = function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; }; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator];\r\n    return m ? m.call(o) : typeof __values === \"function\" ? __values(o) : o[Symbol.iterator]();\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {Constructor} from './constructor';\n\n/** @docs-private */\nexport interface CanDisable {\n  disabled: boolean;\n}\n\n/** Mixin to augment a directive with a `disabled` property. */\nexport function mixinDisabled<T extends Constructor<{}>>(base: T): Constructor<CanDisable> & T {\n  return class extends base {\n    private _disabled: boolean = false;\n\n    get disabled() { return this._disabled; }\n    set disabled(value: any) { this._disabled = coerceBooleanProperty(value); }\n\n    constructor(...args: any[]) { super(...args); }\n  };\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Constructor} from './constructor';\nimport {ElementRef} from '@angular/core';\n\n/** @docs-private */\nexport interface CanColor {\n  color: ThemePalette;\n}\n\n/** @docs-private */\nexport interface HasElementRef {\n  _elementRef: ElementRef;\n}\n\n/** Possible color palette values.  */\nexport type ThemePalette = 'primary' | 'accent' | 'warn' | undefined;\n\n/** Mixin to augment a directive with a `color` property. */\nexport function mixinColor<T extends Constructor<HasElementRef>>(base: T,\n    defaultColor?: ThemePalette): Constructor<CanColor> & T {\n  return class extends base {\n    private _color: ThemePalette;\n\n    get color(): ThemePalette { return this._color; }\n    set color(value: ThemePalette) {\n      const colorPalette = value || defaultColor;\n\n      if (colorPalette !== this._color) {\n        if (this._color) {\n          this._elementRef.nativeElement.classList.remove(`mat-${this._color}`);\n        }\n        if (colorPalette) {\n          this._elementRef.nativeElement.classList.add(`mat-${colorPalette}`);\n        }\n\n        this._color = colorPalette;\n      }\n    }\n\n    constructor(...args: any[]) {\n      super(...args);\n\n      // Set the default color that can be specified from the mixin.\n      this.color = defaultColor;\n    }\n  };\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {Constructor} from './constructor';\n\n/** @docs-private */\nexport interface CanDisableRipple {\n  disableRipple: boolean;\n}\n\n/** Mixin to augment a directive with a `disableRipple` property. */\nexport function mixinDisableRipple<T extends Constructor<{}>>(base: T)\n    : Constructor<CanDisableRipple> & T {\n  return class extends base {\n    private _disableRipple: boolean = false;\n\n    /** Whether the ripple effect is disabled or not. */\n    get disableRipple() { return this._disableRipple; }\n    set disableRipple(value: any) { this._disableRipple = coerceBooleanProperty(value); }\n\n    constructor(...args: any[]) { super(...args); }\n  };\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Constructor} from './constructor';\nimport {CanDisable} from './disabled';\n\n/** @docs-private */\nexport interface HasTabIndex {\n  tabIndex: number;\n}\n\n/** Mixin to augment a directive with a `tabIndex` property. */\nexport function mixinTabIndex<T extends Constructor<CanDisable>>(base: T, defaultTabIndex = 0)\n    : Constructor<HasTabIndex> & T {\n  return class extends base {\n    private _tabIndex: number = defaultTabIndex;\n\n    get tabIndex(): number { return this.disabled ? -1 : this._tabIndex; }\n    set tabIndex(value: number) {\n      // If the specified tabIndex value is null or undefined, fall back to the default value.\n      this._tabIndex = value != null ? value : defaultTabIndex;\n    }\n\n    constructor(...args: any[]) {\n      super(...args);\n    }\n  };\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Constructor} from './constructor';\nimport {ErrorStateMatcher} from '../error/error-options';\nimport {FormControl, FormGroupDirective, NgControl, NgForm} from '@angular/forms';\nimport {Subject} from 'rxjs/Subject';\n\n/** @docs-private */\nexport interface CanUpdateErrorState {\n  updateErrorState();\n  stateChanges: Subject<void>;\n  errorState: boolean;\n  errorStateMatcher: ErrorStateMatcher;\n}\n\n/** @docs-private */\nexport interface HasErrorState {\n  _parentFormGroup: FormGroupDirective;\n  _parentForm: NgForm;\n  _defaultErrorStateMatcher: ErrorStateMatcher;\n  ngControl: NgControl;\n}\n\n/**\n * Mixin to augment a directive with updateErrorState method.\n * For component with `errorState` and need to update `errorState`.\n */\nexport function mixinErrorState<T extends Constructor<HasErrorState>>(base: T)\n: Constructor<CanUpdateErrorState> & T {\n  return class extends base {\n    /** Whether the component is in an error state. */\n    errorState: boolean = false;\n\n    /**\n     * Stream that emits whenever the state of the input changes such that the wrapping\n     * `MatFormField needs to run change detection.\n     */\n    stateChanges = new Subject<void>();\n\n    errorStateMatcher: ErrorStateMatcher;\n\n    updateErrorState() {\n      const oldState = this.errorState;\n      const parent = this._parentFormGroup || this._parentForm;\n      const matcher = this.errorStateMatcher || this._defaultErrorStateMatcher;\n      const control = this.ngControl ? this.ngControl.control as FormControl : null;\n      const newState = matcher.isErrorState(control, parent);\n\n      if (newState !== oldState) {\n        this.errorState = newState;\n        this.stateChanges.next();\n      }\n    }\n\n    constructor(...args: any[]) {\n      super(...args);\n    }\n  };\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Inject, Injectable, Optional} from '@angular/core';\nimport {DateAdapter, MAT_DATE_LOCALE} from './date-adapter';\n\n// TODO(mmalerba): Remove when we no longer support safari 9.\n/** Whether the browser supports the Intl API. */\nconst SUPPORTS_INTL_API = typeof Intl != 'undefined';\n\n\n/** The default month names to use if Intl API is not available. */\nconst DEFAULT_MONTH_NAMES = {\n  'long': [\n    'January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September',\n    'October', 'November', 'December'\n  ],\n  'short': ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'],\n  'narrow': ['J', 'F', 'M', 'A', 'M', 'J', 'J', 'A', 'S', 'O', 'N', 'D']\n};\n\n\n/** The default date names to use if Intl API is not available. */\nconst DEFAULT_DATE_NAMES = range(31, i => String(i + 1));\n\n\n/** The default day of the week names to use if Intl API is not available. */\nconst DEFAULT_DAY_OF_WEEK_NAMES = {\n  'long': ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'],\n  'short': ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'],\n  'narrow': ['S', 'M', 'T', 'W', 'T', 'F', 'S']\n};\n\n\n/**\n * Matches strings that have the form of a valid RFC 3339 string\n * (https://tools.ietf.org/html/rfc3339). Note that the string may not actually be a valid date\n * because the regex will match strings an with out of bounds month, date, etc.\n */\nconst ISO_8601_REGEX =\n    /^\\d{4}-\\d{2}-\\d{2}(?:T\\d{2}:\\d{2}:\\d{2}(?:\\.\\d+)?(?:Z|(?:(?:\\+|-)\\d{2}:\\d{2}))?)?$/;\n\n\n/** Creates an array and fills it with values. */\nfunction range<T>(length: number, valueFunction: (index: number) => T): T[] {\n  const valuesArray = Array(length);\n  for (let i = 0; i < length; i++) {\n    valuesArray[i] = valueFunction(i);\n  }\n  return valuesArray;\n}\n\n/** Adapts the native JS Date for use with cdk-based components that work with dates. */\n@Injectable()\nexport class NativeDateAdapter extends DateAdapter<Date> {\n  /**\n   * Whether to use `timeZone: 'utc'` with `Intl.DateTimeFormat` when formatting dates.\n   * Without this `Intl.DateTimeFormat` sometimes chooses the wrong timeZone, which can throw off\n   * the result. (e.g. in the en-US locale `new Date(1800, 7, 14).toLocaleDateString()`\n   * will produce `'8/13/1800'`.\n   */\n  useUtcForDisplay: boolean;\n\n  constructor(@Optional() @Inject(MAT_DATE_LOCALE) matDateLocale: string) {\n    super();\n    super.setLocale(matDateLocale);\n\n    // IE does its own time zone correction, so we disable this on IE.\n    // TODO(mmalerba): replace with !platform.TRIDENT, logic currently duplicated to avoid breaking\n    // change from injecting the Platform.\n    this.useUtcForDisplay = !(typeof document === 'object' && !!document &&\n        /(msie|trident)/i.test(navigator.userAgent));\n  }\n\n  getYear(date: Date): number {\n    return date.getFullYear();\n  }\n\n  getMonth(date: Date): number {\n    return date.getMonth();\n  }\n\n  getDate(date: Date): number {\n    return date.getDate();\n  }\n\n  getDayOfWeek(date: Date): number {\n    return date.getDay();\n  }\n\n  getMonthNames(style: 'long' | 'short' | 'narrow'): string[] {\n    if (SUPPORTS_INTL_API) {\n      let dtf = new Intl.DateTimeFormat(this.locale, {month: style});\n      return range(12, i => this._stripDirectionalityCharacters(dtf.format(new Date(2017, i, 1))));\n    }\n    return DEFAULT_MONTH_NAMES[style];\n  }\n\n  getDateNames(): string[] {\n    if (SUPPORTS_INTL_API) {\n      let dtf = new Intl.DateTimeFormat(this.locale, {day: 'numeric'});\n      return range(31, i => this._stripDirectionalityCharacters(\n          dtf.format(new Date(2017, 0, i + 1))));\n    }\n    return DEFAULT_DATE_NAMES;\n  }\n\n  getDayOfWeekNames(style: 'long' | 'short' | 'narrow'): string[] {\n    if (SUPPORTS_INTL_API) {\n      let dtf = new Intl.DateTimeFormat(this.locale, {weekday: style});\n      return range(7, i => this._stripDirectionalityCharacters(\n          dtf.format(new Date(2017, 0, i + 1))));\n    }\n    return DEFAULT_DAY_OF_WEEK_NAMES[style];\n  }\n\n  getYearName(date: Date): string {\n    if (SUPPORTS_INTL_API) {\n      let dtf = new Intl.DateTimeFormat(this.locale, {year: 'numeric'});\n      return this._stripDirectionalityCharacters(dtf.format(date));\n    }\n    return String(this.getYear(date));\n  }\n\n  getFirstDayOfWeek(): number {\n    // We can't tell using native JS Date what the first day of the week is, we default to Sunday.\n    return 0;\n  }\n\n  getNumDaysInMonth(date: Date): number {\n    return this.getDate(this._createDateWithOverflow(\n        this.getYear(date), this.getMonth(date) + 1, 0));\n  }\n\n  clone(date: Date): Date {\n    return this.createDate(this.getYear(date), this.getMonth(date), this.getDate(date));\n  }\n\n  createDate(year: number, month: number, date: number): Date {\n    // Check for invalid month and date (except upper bound on date which we have to check after\n    // creating the Date).\n    if (month < 0 || month > 11) {\n      throw Error(`Invalid month index \"${month}\". Month index has to be between 0 and 11.`);\n    }\n\n    if (date < 1) {\n      throw Error(`Invalid date \"${date}\". Date has to be greater than 0.`);\n    }\n\n    let result = this._createDateWithOverflow(year, month, date);\n\n    // Check that the date wasn't above the upper bound for the month, causing the month to overflow\n    if (result.getMonth() != month) {\n      throw Error(`Invalid date \"${date}\" for month with index \"${month}\".`);\n    }\n\n    return result;\n  }\n\n  today(): Date {\n    return new Date();\n  }\n\n  parse(value: any): Date | null {\n    // We have no way using the native JS Date to set the parse format or locale, so we ignore these\n    // parameters.\n    if (typeof value == 'number') {\n      return new Date(value);\n    }\n    return value ? new Date(Date.parse(value)) : null;\n  }\n\n  format(date: Date, displayFormat: Object): string {\n    if (!this.isValid(date)) {\n      throw Error('NativeDateAdapter: Cannot format invalid date.');\n    }\n    if (SUPPORTS_INTL_API) {\n      if (this.useUtcForDisplay) {\n        date = new Date(Date.UTC(\n            date.getFullYear(), date.getMonth(), date.getDate(), date.getHours(),\n            date.getMinutes(), date.getSeconds(), date.getMilliseconds()));\n        displayFormat = {...displayFormat, timeZone: 'utc'};\n      }\n      let dtf = new Intl.DateTimeFormat(this.locale, displayFormat);\n      return this._stripDirectionalityCharacters(dtf.format(date));\n    }\n    return this._stripDirectionalityCharacters(date.toDateString());\n  }\n\n  addCalendarYears(date: Date, years: number): Date {\n    return this.addCalendarMonths(date, years * 12);\n  }\n\n  addCalendarMonths(date: Date, months: number): Date {\n    let newDate = this._createDateWithOverflow(\n        this.getYear(date), this.getMonth(date) + months, this.getDate(date));\n\n    // It's possible to wind up in the wrong month if the original month has more days than the new\n    // month. In this case we want to go to the last day of the desired month.\n    // Note: the additional + 12 % 12 ensures we end up with a positive number, since JS % doesn't\n    // guarantee this.\n    if (this.getMonth(newDate) != ((this.getMonth(date) + months) % 12 + 12) % 12) {\n      newDate = this._createDateWithOverflow(this.getYear(newDate), this.getMonth(newDate), 0);\n    }\n\n    return newDate;\n  }\n\n  addCalendarDays(date: Date, days: number): Date {\n    return this._createDateWithOverflow(\n        this.getYear(date), this.getMonth(date), this.getDate(date) + days);\n  }\n\n  toIso8601(date: Date): string {\n    return [\n      date.getUTCFullYear(),\n      this._2digit(date.getUTCMonth() + 1),\n      this._2digit(date.getUTCDate())\n    ].join('-');\n  }\n\n  /**\n   * Returns the given value if given a valid Date or null. Deserializes valid ISO 8601 strings\n   * (https://www.ietf.org/rfc/rfc3339.txt) into valid Dates and empty string into null. Returns an\n   * invalid date for all other values.\n   */\n  deserialize(value: any): Date | null {\n    if (typeof value === 'string') {\n      if (!value) {\n        return null;\n      }\n      // The `Date` constructor accepts formats other than ISO 8601, so we need to make sure the\n      // string is the right format first.\n      if (ISO_8601_REGEX.test(value)) {\n        let date = new Date(value);\n        if (this.isValid(date)) {\n          return date;\n        }\n      }\n    }\n    return super.deserialize(value);\n  }\n\n  isDateInstance(obj: any) {\n    return obj instanceof Date;\n  }\n\n  isValid(date: Date) {\n    return !isNaN(date.getTime());\n  }\n\n  invalid(): Date {\n    return new Date(NaN);\n  }\n\n  /** Creates a date but allows the month and date to overflow. */\n  private _createDateWithOverflow(year: number, month: number, date: number) {\n    let result = new Date(year, month, date);\n\n    // We need to correct for the fact that JS native Date treats years in range [0, 99] as\n    // abbreviations for 19xx.\n    if (year >= 0 && year < 100) {\n      result.setFullYear(this.getYear(result) - 1900);\n    }\n    return result;\n  }\n\n  /**\n   * Pads a number to make it two digits.\n   * @param n The number to pad.\n   * @returns The padded number.\n   */\n  private _2digit(n: number) {\n    return ('00' + n).slice(-2);\n  }\n\n  /**\n   * Strip out unicode LTR and RTL characters. Edge and IE insert these into formatted dates while\n   * other browsers do not. We remove them to make output consistent and because they interfere with\n   * date parsing.\n   * @param str The string to strip direction characters from.\n   * @returns The stripped string.\n   */\n  private _stripDirectionalityCharacters(str: string) {\n    return str.replace(/[\\u200e\\u200f]/g, '');\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Applies a CSS transform to an element, including browser-prefixed properties.\n * @param element\n * @param transformValue\n */\nexport function applyCssTransform(element: HTMLElement, transformValue: string) {\n  // It's important to trim the result, because the browser will ignore the set operation\n  // if the string contains only whitespace.\n  let value = transformValue.trim();\n\n  element.style.transform = value;\n  element.style.webkitTransform = value;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** @docs-private */\nexport function getMatFormFieldPlaceholderConflictError(): Error {\n  return Error('Placeholder attribute and child element were both specified.');\n}\n\n/** @docs-private */\nexport function getMatFormFieldDuplicatedHintError(align: string): Error {\n  return Error(`A hint was already declared for 'align=\"${align}\"'.`);\n}\n\n/** @docs-private */\nexport function getMatFormFieldMissingControlError(): Error {\n  return Error('mat-form-field must contain a MatFormFieldControl.');\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** @docs-private */\nexport function getMatInputUnsupportedTypeError(type: string): Error {\n  return Error(`Input type \"${type}\" isn't supported by matInput.`);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** @docs-private */\nexport function createMissingDateImplError(provider: string) {\n  return Error(\n      `MatDatepicker: No provider found for ${provider}. You must import one of the following ` +\n      `modules at your application root: MatNativeDateModule, MatMomentDateModule, or provide a ` +\n      `custom implementation.`);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Converts values into strings. Falsy values become empty strings.\n * @docs-private\n */\nexport function coerceToString(value: string | number): string {\n  return `${value || ''}`;\n}\n\n/**\n * Converts a value that might be a string into a number.\n * @docs-private\n */\nexport function coerceToNumber(value: string | number): number {\n  return typeof value === 'string' ? parseInt(value, 10) : value;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Throws an exception for the case when menu trigger doesn't have a valid mat-menu instance\n * @docs-private\n */\nexport function throwMatMenuMissingError() {\n  throw Error(`mat-menu-trigger: must pass in an mat-menu instance.\n\n    Example:\n      <mat-menu #menu=\"matMenu\"></mat-menu>\n      <button [matMenuTriggerFor]=\"menu\"></button>`);\n}\n\n/**\n * Throws an exception for the case when menu's x-position value isn't valid.\n * In other words, it doesn't match 'before' or 'after'.\n * @docs-private\n */\nexport function throwMatMenuInvalidPositionX() {\n  throw Error(`x-position value must be either 'before' or after'.\n      Example: <mat-menu x-position=\"before\" #menu=\"matMenu\"></mat-menu>`);\n}\n\n/**\n * Throws an exception for the case when menu's y-position value isn't valid.\n * In other words, it doesn't match 'above' or 'below'.\n * @docs-private\n */\nexport function throwMatMenuInvalidPositionY() {\n  throw Error(`y-position value must be either 'above' or below'.\n      Example: <mat-menu y-position=\"above\" #menu=\"matMenu\"></mat-menu>`);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Returns an exception to be thrown when attempting to change a select's `multiple` option\n * after initialization.\n * @docs-private\n */\nexport function getMatSelectDynamicMultipleError(): Error {\n  return Error('Cannot change `multiple` mode of select after initialization.');\n}\n\n/**\n * Returns an exception to be thrown when attempting to assign a non-array value to a select\n * in `multiple` mode. Note that `undefined` and `null` are still valid values to allow for\n * resetting the value.\n * @docs-private\n */\nexport function getMatSelectNonArrayValueError(): Error {\n  return Error('Value must be an array in multiple-selection mode.');\n}\n\n/**\n * Returns an exception to be thrown when assigning a non-function value to the comparator\n * used to determine if a value corresponds to an option. Note that whether the function\n * actually takes two values and returns a boolean is not checked.\n */\nexport function getMatSelectNonFunctionValueError(): Error {\n  return Error('`compareWith` must be a function.');\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** @docs-private */\nexport function getSortDuplicateSortableIdError(id: string): Error {\n  return Error(`Cannot have two MatSortables with the same id (${id}).`);\n}\n\n/** @docs-private */\nexport function getSortHeaderNotContainedWithinSortError(): Error {\n  return Error(`MatSortHeader must be placed within a parent element with the MatSort directive.`);\n}\n\n/** @docs-private */\nexport function getSortHeaderMissingIdError(): Error {\n  return Error(`MatSortHeader must be provided with a unique id.`);\n}\n\n/** @docs-private */\nexport function getSortInvalidDirectionError(direction: string): Error {\n  return Error(`${direction} is not a valid sort direction ('asc' or 'desc').`);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** @docs-private */\nexport class AnimationCurves {\n  static STANDARD_CURVE = 'cubic-bezier(0.4,0.0,0.2,1)';\n  static DECELERATION_CURVE = 'cubic-bezier(0.0,0.0,0.2,1)';\n  static ACCELERATION_CURVE = 'cubic-bezier(0.4,0.0,1,1)';\n  static SHARP_CURVE = 'cubic-bezier(0.4,0.0,0.6,1)';\n}\n\n\n/** @docs-private */\nexport class AnimationDurations {\n  static COMPLEX = '375ms';\n  static ENTERING = '225ms';\n  static EXITING = '195ms';\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule, InjectionToken, Optional, Inject, isDevMode} from '@angular/core';\nimport {BidiModule} from '@angular/cdk/bidi';\n\n\n/** Injection token that configures whether the Material sanity checks are enabled. */\nexport const MATERIAL_SANITY_CHECKS = new InjectionToken<boolean>('mat-sanity-checks');\n\n\n/**\n * Module that captures anything that should be loaded and/or run for *all* Angular Material\n * components. This includes Bidi, etc.\n *\n * This module should be imported to each top-level component module (e.g., MatTabsModule).\n */\n@NgModule({\n  imports: [BidiModule],\n  exports: [BidiModule],\n  providers: [{\n    provide: MATERIAL_SANITY_CHECKS, useValue: true,\n  }],\n})\nexport class MatCommonModule {\n  /** Whether we've done the global sanity checks (e.g. a theme is loaded, there is a doctype). */\n  private _hasDoneGlobalChecks = false;\n\n  /** Whether we've already checked for HammerJs availability. */\n  private _hasCheckedHammer = false;\n\n  /** Reference to the global `document` object. */\n  private _document = typeof document === 'object' && document ? document : null;\n\n  /** Reference to the global 'window' object. */\n  private _window = typeof window === 'object' && window ? window : null;\n\n  constructor(@Optional() @Inject(MATERIAL_SANITY_CHECKS) private _sanityChecksEnabled: boolean) {\n    if (this._areChecksEnabled() && !this._hasDoneGlobalChecks) {\n      this._checkDoctypeIsDefined();\n      this._checkThemeIsPresent();\n      this._hasDoneGlobalChecks = true;\n    }\n  }\n\n  /** Whether any sanity checks are enabled */\n  private _areChecksEnabled(): boolean {\n    return this._sanityChecksEnabled && isDevMode() && !this._isTestEnv();\n  }\n\n  /** Whether the code is running in tests. */\n  private _isTestEnv() {\n    return this._window && (this._window['__karma__'] || this._window['jasmine']);\n  }\n\n  private _checkDoctypeIsDefined(): void {\n    if (this._document && !this._document.doctype) {\n      console.warn(\n        'Current document does not have a doctype. This may cause ' +\n        'some Angular Material components not to behave as expected.'\n      );\n    }\n  }\n\n  private _checkThemeIsPresent(): void {\n    if (this._document && typeof getComputedStyle === 'function') {\n      const testElement = this._document.createElement('div');\n\n      testElement.classList.add('mat-theme-loaded-marker');\n      this._document.body.appendChild(testElement);\n\n      const computedStyle = getComputedStyle(testElement);\n\n      // In some situations, the computed style of the test element can be null. For example in\n      // Firefox, the computed style is null if an application is running inside of a hidden iframe.\n      // See: https://bugzilla.mozilla.org/show_bug.cgi?id=548397\n      if (computedStyle && computedStyle.display !== 'none') {\n        console.warn(\n          'Could not find Angular Material core theme. Most Material ' +\n          'components may not work as expected. For more info refer ' +\n          'to the theming guide: https://material.angular.io/guide/theming'\n        );\n      }\n\n      this._document.body.removeChild(testElement);\n    }\n  }\n\n  /** Checks whether HammerJS is available. */\n  _checkHammerIsAvailable(): void {\n    if (this._hasCheckedHammer || !this._window) {\n      return;\n    }\n\n    if (this._areChecksEnabled() && !this._window['Hammer']) {\n      console.warn(\n        'Could not find HammerJS. Certain Angular Material components may not work correctly.');\n    }\n    this._hasCheckedHammer = true;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {InjectionToken, LOCALE_ID} from '@angular/core';\nimport {Observable} from 'rxjs/Observable';\nimport {Subject} from 'rxjs/Subject';\n\n\n/** InjectionToken for datepicker that can be used to override default locale code. */\nexport const MAT_DATE_LOCALE = new InjectionToken<string>('MAT_DATE_LOCALE');\n\n/** Provider for MAT_DATE_LOCALE injection token. */\nexport const MAT_DATE_LOCALE_PROVIDER = {provide: MAT_DATE_LOCALE, useExisting: LOCALE_ID};\n\n/** Adapts type `D` to be usable as a date by cdk-based components that work with dates. */\nexport abstract class DateAdapter<D> {\n  /** The locale to use for all dates. */\n  protected locale: any;\n\n  /** A stream that emits when the locale changes. */\n  get localeChanges(): Observable<void> { return this._localeChanges; }\n  protected _localeChanges= new Subject<void>();\n\n  /**\n   * Gets the year component of the given date.\n   * @param date The date to extract the year from.\n   * @returns The year component.\n   */\n  abstract getYear(date: D): number;\n\n  /**\n   * Gets the month component of the given date.\n   * @param date The date to extract the month from.\n   * @returns The month component (0-indexed, 0 = January).\n   */\n  abstract getMonth(date: D): number;\n\n  /**\n   * Gets the date of the month component of the given date.\n   * @param date The date to extract the date of the month from.\n   * @returns The month component (1-indexed, 1 = first of month).\n   */\n  abstract getDate(date: D): number;\n\n  /**\n   * Gets the day of the week component of the given date.\n   * @param date The date to extract the day of the week from.\n   * @returns The month component (0-indexed, 0 = Sunday).\n   */\n  abstract getDayOfWeek(date: D): number;\n\n  /**\n   * Gets a list of names for the months.\n   * @param style The naming style (e.g. long = 'January', short = 'Jan', narrow = 'J').\n   * @returns An ordered list of all month names, starting with January.\n   */\n  abstract getMonthNames(style: 'long' | 'short' | 'narrow'): string[];\n\n  /**\n   * Gets a list of names for the dates of the month.\n   * @returns An ordered list of all date of the month names, starting with '1'.\n   */\n  abstract getDateNames(): string[];\n\n  /**\n   * Gets a list of names for the days of the week.\n   * @param style The naming style (e.g. long = 'Sunday', short = 'Sun', narrow = 'S').\n   * @returns An ordered list of all weekday names, starting with Sunday.\n   */\n  abstract getDayOfWeekNames(style: 'long' | 'short' | 'narrow'): string[];\n\n  /**\n   * Gets the name for the year of the given date.\n   * @param date The date to get the year name for.\n   * @returns The name of the given year (e.g. '2017').\n   */\n  abstract getYearName(date: D): string;\n\n  /**\n   * Gets the first day of the week.\n   * @returns The first day of the week (0-indexed, 0 = Sunday).\n   */\n  abstract getFirstDayOfWeek(): number;\n\n  /**\n   * Gets the number of days in the month of the given date.\n   * @param date The date whose month should be checked.\n   * @returns The number of days in the month of the given date.\n   */\n  abstract getNumDaysInMonth(date: D): number;\n\n  /**\n   * Clones the given date.\n   * @param date The date to clone\n   * @returns A new date equal to the given date.\n   */\n  abstract clone(date: D): D;\n\n  /**\n   * Creates a date with the given year, month, and date. Does not allow over/under-flow of the\n   * month and date.\n   * @param year The full year of the date. (e.g. 89 means the year 89, not the year 1989).\n   * @param month The month of the date (0-indexed, 0 = January). Must be an integer 0 - 11.\n   * @param date The date of month of the date. Must be an integer 1 - length of the given month.\n   * @returns The new date, or null if invalid.\n   */\n  abstract createDate(year: number, month: number, date: number): D;\n\n  /**\n   * Gets today's date.\n   * @returns Today's date.\n   */\n  abstract today(): D;\n\n  /**\n   * Parses a date from a user-provided value.\n   * @param value The value to parse.\n   * @param parseFormat The expected format of the value being parsed\n   *     (type is implementation-dependent).\n   * @returns The parsed date.\n   */\n  abstract parse(value: any, parseFormat: any): D | null;\n\n  /**\n   * Formats a date as a string according to the given format.\n   * @param date The value to format.\n   * @param displayFormat The format to use to display the date as a string.\n   * @returns The formatted date string.\n   */\n  abstract format(date: D, displayFormat: any): string;\n\n  /**\n   * Adds the given number of years to the date. Years are counted as if flipping 12 pages on the\n   * calendar for each year and then finding the closest date in the new month. For example when\n   * adding 1 year to Feb 29, 2016, the resulting date will be Feb 28, 2017.\n   * @param date The date to add years to.\n   * @param years The number of years to add (may be negative).\n   * @returns A new date equal to the given one with the specified number of years added.\n   */\n  abstract addCalendarYears(date: D, years: number): D;\n\n  /**\n   * Adds the given number of months to the date. Months are counted as if flipping a page on the\n   * calendar for each month and then finding the closest date in the new month. For example when\n   * adding 1 month to Jan 31, 2017, the resulting date will be Feb 28, 2017.\n   * @param date The date to add months to.\n   * @param months The number of months to add (may be negative).\n   * @returns A new date equal to the given one with the specified number of months added.\n   */\n  abstract addCalendarMonths(date: D, months: number): D;\n\n  /**\n   * Adds the given number of days to the date. Days are counted as if moving one cell on the\n   * calendar for each day.\n   * @param date The date to add days to.\n   * @param days The number of days to add (may be negative).\n   * @returns A new date equal to the given one with the specified number of days added.\n   */\n  abstract addCalendarDays(date: D, days: number): D;\n\n  /**\n   * Gets the RFC 3339 compatible string (https://tools.ietf.org/html/rfc3339) for the given date.\n   * This method is used to generate date strings that are compatible with native HTML attributes\n   * such as the `min` or `max` attribute of an `<input>`.\n   * @param date The date to get the ISO date string for.\n   * @returns The ISO date string date string.\n   */\n  abstract toIso8601(date: D): string;\n\n  /**\n   * Checks whether the given object is considered a date instance by this DateAdapter.\n   * @param obj The object to check\n   * @returns Whether the object is a date instance.\n   */\n  abstract isDateInstance(obj: any): boolean;\n\n  /**\n   * Checks whether the given date is valid.\n   * @param date The date to check.\n   * @returns Whether the date is valid.\n   */\n  abstract isValid(date: D): boolean;\n\n  /**\n   * Gets date instance that is not valid.\n   * @returns An invalid date.\n   */\n  abstract invalid(): D;\n\n  /**\n   * Attempts to deserialize a value to a valid date object. This is different from parsing in that\n   * deserialize should only accept non-ambiguous, locale-independent formats (e.g. a ISO 8601\n   * string). The default implementation does not allow any deserialization, it simply checks that\n   * the given value is already a valid date object or null. The `<mat-datepicker>` will call this\n   * method on all of it's `@Input()` properties that accept dates. It is therefore possible to\n   * support passing values from your backend directly to these properties by overriding this method\n   * to also deserialize the format used by your backend.\n   * @param value The value to be deserialized into a date object.\n   * @returns The deserialized date object, either a valid date, null if the value can be\n   *     deserialized into a null date (e.g. the empty string), or an invalid date.\n   */\n  deserialize(value: any): D | null {\n    if (value == null || this.isDateInstance(value) && this.isValid(value)) {\n      return value;\n    }\n    return this.invalid();\n  }\n\n  /**\n   * Sets the locale used for all dates.\n   * @param locale The new locale.\n   */\n  setLocale(locale: any) {\n    this.locale = locale;\n    this._localeChanges.next();\n  }\n\n  /**\n   * Compares two dates.\n   * @param first The first date to compare.\n   * @param second The second date to compare.\n   * @returns 0 if the dates are equal, a number less than 0 if the first date is earlier,\n   *     a number greater than 0 if the first date is later.\n   */\n  compareDate(first: D, second: D): number {\n    return this.getYear(first) - this.getYear(second) ||\n        this.getMonth(first) - this.getMonth(second) ||\n        this.getDate(first) - this.getDate(second);\n  }\n\n  /**\n   * Checks if two dates are equal.\n   * @param first The first date to check.\n   * @param second The second date to check.\n   * @returns Whether the two dates are equal.\n   *     Null dates are considered equal to other null dates.\n   */\n  sameDate(first: D | null, second: D | null): boolean {\n    if (first && second) {\n      let firstValid = this.isValid(first);\n      let secondValid = this.isValid(second);\n      if (firstValid && secondValid) {\n        return !this.compareDate(first, second);\n      }\n      return firstValid == secondValid;\n    }\n    return first == second;\n  }\n\n  /**\n   * Clamp the given date between min and max dates.\n   * @param date The date to clamp.\n   * @param min The minimum value to allow. If null or omitted no min is enforced.\n   * @param max The maximum value to allow. If null or omitted no max is enforced.\n   * @returns `min` if `date` is less than `min`, `max` if date is greater than `max`,\n   *     otherwise `date`.\n   */\n  clampDate(date: D, min?: D | null, max?: D | null): D {\n    if (min && this.compareDate(date, min) < 0) {\n      return min;\n    }\n    if (max && this.compareDate(date, max) > 0) {\n      return max;\n    }\n    return date;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {InjectionToken} from '@angular/core';\n\n\nexport type MatDateFormats = {\n  parse: {\n    dateInput: any\n  },\n  display: {\n    dateInput: any,\n    monthYearLabel: any,\n    dateA11yLabel: any,\n    monthYearA11yLabel: any,\n  }\n};\n\n\nexport const MAT_DATE_FORMATS = new InjectionToken<MatDateFormats>('mat-date-formats');\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {MatDateFormats} from './date-formats';\n\n\nexport const MAT_NATIVE_DATE_FORMATS: MatDateFormats = {\n  parse: {\n    dateInput: null,\n  },\n  display: {\n    dateInput: {year: 'numeric', month: 'numeric', day: 'numeric'},\n    monthYearLabel: {year: 'numeric', month: 'short'},\n    dateA11yLabel: {year: 'numeric', month: 'long', day: 'numeric'},\n    monthYearA11yLabel: {year: 'numeric', month: 'long'},\n  }\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {DateAdapter, MAT_DATE_LOCALE_PROVIDER} from './date-adapter';\nimport {MAT_DATE_FORMATS} from './date-formats';\nimport {NativeDateAdapter} from './native-date-adapter';\nimport {MAT_NATIVE_DATE_FORMATS} from './native-date-formats';\n\nexport * from './date-adapter';\nexport * from './date-formats';\nexport * from './native-date-adapter';\nexport * from './native-date-formats';\n\n\n@NgModule({\n  providers: [\n    {provide: DateAdapter, useClass: NativeDateAdapter},\n    MAT_DATE_LOCALE_PROVIDER\n  ],\n})\nexport class NativeDateModule {}\n\n\n@NgModule({\n  imports: [NativeDateModule],\n  providers: [{provide: MAT_DATE_FORMATS, useValue: MAT_NATIVE_DATE_FORMATS}],\n})\nexport class MatNativeDateModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable} from '@angular/core';\nimport {FormGroupDirective, NgForm, FormControl} from '@angular/forms';\n\n/** Error state matcher that matches when a control is invalid and dirty. */\n@Injectable()\nexport class ShowOnDirtyErrorStateMatcher implements ErrorStateMatcher {\n  isErrorState(control: FormControl | null, form: FormGroupDirective | NgForm | null): boolean {\n    return !!(control && control.invalid && (control.dirty || (form && form.submitted)));\n  }\n}\n\n/** Provider that defines how form controls behave with regards to displaying error messages. */\n@Injectable()\nexport class ErrorStateMatcher {\n  isErrorState(control: FormControl | null, form: FormGroupDirective | NgForm | null): boolean {\n    return !!(control && control.invalid && (control.touched || (form && form.submitted)));\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable, InjectionToken, Inject, Optional} from '@angular/core';\nimport {HammerGestureConfig} from '@angular/platform-browser';\nimport {MatCommonModule} from '../common-behaviors/common-module';\nimport {\n  HammerStatic,\n  HammerInstance,\n  Recognizer,\n  RecognizerStatic,\n  HammerOptions,\n} from './gesture-annotations';\n\n/**\n * Injection token that can be used to provide options to the Hammerjs instance.\n * More info at http://hammerjs.github.io/api/.\n */\nexport const MAT_HAMMER_OPTIONS = new InjectionToken<HammerOptions>('MAT_HAMMER_OPTIONS');\n\n/* Adjusts configuration of our gesture library, Hammer. */\n@Injectable()\nexport class GestureConfig extends HammerGestureConfig {\n  private _hammer: HammerStatic = typeof window !== 'undefined' ? (window as any).Hammer : null;\n\n  /* List of new event names to add to the gesture support list */\n  events: string[] = this._hammer ? [\n    'longpress',\n    'slide',\n    'slidestart',\n    'slideend',\n    'slideright',\n    'slideleft'\n  ] : [];\n\n  constructor(\n    @Optional() @Inject(MAT_HAMMER_OPTIONS) private _hammerOptions?: HammerOptions,\n    @Optional() commonModule?: MatCommonModule) {\n    super();\n    if (commonModule) {\n      commonModule._checkHammerIsAvailable();\n    }\n  }\n\n  /**\n   * Builds Hammer instance manually to add custom recognizers that match the Material Design spec.\n   *\n   * Our gesture names come from the Material Design gestures spec:\n   * https://www.google.com/design/spec/patterns/gestures.html#gestures-touch-mechanics\n   *\n   * More information on default recognizers can be found in Hammer docs:\n   * http://hammerjs.github.io/recognizer-pan/\n   * http://hammerjs.github.io/recognizer-press/\n   *\n   * @param element Element to which to assign the new HammerJS gestures.\n   * @returns Newly-created HammerJS instance.\n   */\n  buildHammer(element: HTMLElement): HammerInstance {\n    const mc = new this._hammer(element, this._hammerOptions || undefined);\n\n    // Default Hammer Recognizers.\n    const pan = new this._hammer.Pan();\n    const swipe = new this._hammer.Swipe();\n    const press = new this._hammer.Press();\n\n    // Notice that a HammerJS recognizer can only depend on one other recognizer once.\n    // Otherwise the previous `recognizeWith` will be dropped.\n    // TODO: Confirm threshold numbers with Material Design UX Team\n    const slide = this._createRecognizer(pan, {event: 'slide', threshold: 0}, swipe);\n    const longpress = this._createRecognizer(press, {event: 'longpress', time: 500});\n\n    // Overwrite the default `pan` event to use the swipe event.\n    pan.recognizeWith(swipe);\n\n    // Add customized gestures to Hammer manager\n    mc.add([swipe, press, pan, slide, longpress]);\n\n    return mc as HammerInstance;\n  }\n\n  /** Creates a new recognizer, without affecting the default recognizers of HammerJS */\n  private _createRecognizer(base: Recognizer, options: any, ...inheritances: Recognizer[]) {\n    let recognizer = new (base.constructor as RecognizerStatic)(options);\n\n    inheritances.push(base);\n    inheritances.forEach(item => recognizer.recognizeWith(item));\n\n    return recognizer;\n  }\n\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  NgModule,\n  Directive,\n  ElementRef,\n  QueryList,\n} from '@angular/core';\nimport {MatCommonModule} from '../common-behaviors/common-module';\n\n\n/**\n * Shared directive to count lines inside a text area, such as a list item.\n * Line elements can be extracted with a @ContentChildren(MatLine) query, then\n * counted by checking the query list's length.\n */\n@Directive({\n  selector: '[mat-line], [matLine]',\n  host: {'class': 'mat-line'}\n})\nexport class MatLine {}\n\n/**\n * Helper that takes a query list of lines and sets the correct class on the host.\n * @docs-private\n */\nexport class MatLineSetter {\n  constructor(private _lines: QueryList<MatLine>, private _element: ElementRef) {\n    this._setLineClass(this._lines.length);\n\n    this._lines.changes.subscribe(() => {\n      this._setLineClass(this._lines.length);\n    });\n  }\n\n  private _setLineClass(count: number): void {\n    this._resetClasses();\n    if (count === 2 || count === 3) {\n      this._setClass(`mat-${count}-line`, true);\n    } else if (count > 3) {\n      this._setClass(`mat-multi-line`, true);\n    }\n  }\n\n  private _resetClasses(): void {\n    this._setClass('mat-2-line', false);\n    this._setClass('mat-3-line', false);\n    this._setClass('mat-multi-line', false);\n  }\n\n  private _setClass(className: string, isAdd: boolean): void {\n    if (isAdd) {\n      this._element.nativeElement.classList.add(className);\n    } else {\n      this._element.nativeElement.classList.remove(className);\n    }\n  }\n\n}\n\n@NgModule({\n  imports: [MatCommonModule],\n  exports: [MatLine, MatCommonModule],\n  declarations: [MatLine],\n})\nexport class MatLineModule { }\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {RippleConfig, RippleRenderer} from './ripple-renderer';\n\n/** Possible states for a ripple element. */\nexport enum RippleState {\n  FADING_IN, VISIBLE, FADING_OUT, HIDDEN\n}\n\n/**\n * Reference to a previously launched ripple element.\n */\nexport class RippleRef {\n\n  /** Current state of the ripple reference. */\n  state: RippleState = RippleState.HIDDEN;\n\n  constructor(\n    private _renderer: RippleRenderer,\n    public element: HTMLElement,\n    public config: RippleConfig) {\n  }\n\n  /** Fades out the ripple element. */\n  fadeOut() {\n    this._renderer.fadeOutRipple(this);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Platform} from '@angular/cdk/platform';\nimport {\n  Directive,\n  ElementRef,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  OnDestroy,\n  OnInit,\n  Optional,\n} from '@angular/core';\nimport {RippleRef} from './ripple-ref';\nimport {RippleConfig, RippleRenderer, RippleTarget} from './ripple-renderer';\n\n/** Configurable options for `matRipple`. */\nexport interface RippleGlobalOptions {\n  /**\n   * Whether ripples should be disabled. Ripples can be still launched manually by using\n   * the `launch()` method. Therefore focus indicators will still show up.\n   */\n  disabled?: boolean;\n\n  /**\n   * If set, the default duration of the fade-in animation is divided by this value. For example,\n   * setting it to 0.5 will cause the ripple fade-in animation to take twice as long.\n   * A changed speedFactor will not affect the fade-out duration of the ripples.\n   */\n  baseSpeedFactor?: number;\n}\n\n/** Injection token that can be used to specify the global ripple options. */\nexport const MAT_RIPPLE_GLOBAL_OPTIONS =\n    new InjectionToken<RippleGlobalOptions>('mat-ripple-global-options');\n\n@Directive({\n  selector: '[mat-ripple], [matRipple]',\n  exportAs: 'matRipple',\n  host: {\n    'class': 'mat-ripple',\n    '[class.mat-ripple-unbounded]': 'unbounded'\n  }\n})\nexport class MatRipple implements OnInit, OnDestroy, RippleTarget {\n\n  /** Custom color for all ripples. */\n  @Input('matRippleColor') color: string;\n\n  /** Whether the ripples should be visible outside the component's bounds. */\n  @Input('matRippleUnbounded') unbounded: boolean;\n\n  /**\n   * Whether the ripple always originates from the center of the host element's bounds, rather\n   * than originating from the location of the click event.\n   */\n  @Input('matRippleCentered') centered: boolean;\n\n  /**\n   * If set, the radius in pixels of foreground ripples when fully expanded. If unset, the radius\n   * will be the distance from the center of the ripple to the furthest corner of the host element's\n   * bounding rectangle.\n   */\n  @Input('matRippleRadius') radius: number = 0;\n\n  /**\n   * If set, the normal duration of ripple animations is divided by this value. For example,\n   * setting it to 0.5 will cause the animations to take twice as long.\n   * A changed speedFactor will not modify the fade-out duration of the ripples.\n   */\n  @Input('matRippleSpeedFactor') speedFactor: number = 1;\n\n  /**\n   * Whether click events will not trigger the ripple. Ripples can be still launched manually\n   * by using the `launch()` method.\n   */\n  @Input('matRippleDisabled')\n  get disabled() { return this._disabled; }\n  set disabled(value: boolean) {\n    this._disabled = value;\n    this._setupTriggerEventsIfEnabled();\n  }\n  private _disabled: boolean = false;\n\n  /**\n   * The element that triggers the ripple when click events are received.\n   * Defaults to the directive's host element.\n   */\n  @Input('matRippleTrigger')\n  get trigger() { return this._trigger || this._elementRef.nativeElement; }\n  set trigger(trigger: HTMLElement) {\n    this._trigger = trigger;\n    this._setupTriggerEventsIfEnabled();\n  }\n  private _trigger: HTMLElement;\n\n  /** Renderer for the ripple DOM manipulations. */\n  private _rippleRenderer: RippleRenderer;\n\n  /** Options that are set globally for all ripples. */\n  private _globalOptions: RippleGlobalOptions;\n\n  /** Whether ripple directive is initialized and the input bindings are set. */\n  private _isInitialized: boolean = false;\n\n  constructor(private _elementRef: ElementRef,\n              ngZone: NgZone,\n              platform: Platform,\n              @Optional() @Inject(MAT_RIPPLE_GLOBAL_OPTIONS) globalOptions: RippleGlobalOptions) {\n\n    this._globalOptions = globalOptions || {};\n    this._rippleRenderer = new RippleRenderer(this, ngZone, _elementRef, platform);\n  }\n\n  ngOnInit() {\n    this._isInitialized = true;\n    this._setupTriggerEventsIfEnabled();\n  }\n\n  ngOnDestroy() {\n    this._rippleRenderer._removeTriggerEvents();\n  }\n\n  /** Launches a manual ripple at the specified position. */\n  launch(x: number, y: number, config: RippleConfig = this): RippleRef {\n    return this._rippleRenderer.fadeInRipple(x, y, config);\n  }\n\n  /** Fades out all currently showing ripple elements. */\n  fadeOutAll() {\n    this._rippleRenderer.fadeOutAll();\n  }\n\n  /** Ripple configuration from the directive's input values. */\n  get rippleConfig(): RippleConfig {\n    return {\n      centered: this.centered,\n      speedFactor: this.speedFactor * (this._globalOptions.baseSpeedFactor || 1),\n      radius: this.radius,\n      color: this.color\n    };\n  }\n\n  /** Whether ripples on pointer-down are  disabled or not. */\n  get rippleDisabled(): boolean {\n    return this.disabled || !!this._globalOptions.disabled;\n  }\n\n  /** Sets up the the trigger event listeners if ripples are enabled. */\n  private _setupTriggerEventsIfEnabled() {\n    if (!this.disabled && this._isInitialized) {\n      this._rippleRenderer.setupTriggerEvents(this.trigger);\n    }\n  }\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {PlatformModule} from '@angular/cdk/platform';\nimport {MatCommonModule} from '../common-behaviors/common-module';\nimport {MatRipple} from './ripple';\n\nexport * from './ripple';\nexport * from './ripple-ref';\nexport * from './ripple-renderer';\n\n@NgModule({\n  imports: [MatCommonModule, PlatformModule],\n  exports: [MatRipple, MatCommonModule],\n  declarations: [MatRipple],\n})\nexport class MatRippleModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Component, ViewEncapsulation, Input, ChangeDetectionStrategy} from '@angular/core';\n\nexport type MatPseudoCheckboxState = 'unchecked' | 'checked' | 'indeterminate';\n\n/**\n * Component that shows a simplified checkbox without including any kind of \"real\" checkbox.\n * Meant to be used when the checkbox is purely decorative and a large number of them will be\n * included, such as for the options in a multi-select. Uses no SVGs or complex animations.\n * Note that theming is meant to be handled by the parent element, e.g.\n * `mat-primary .mat-pseudo-checkbox`.\n *\n * Note that this component will be completely invisible to screen-reader users. This is *not*\n * interchangeable with <mat-checkbox> and should *not* be used if the user would directly interact\n * with the checkbox. The pseudo-checkbox should only be used as an implementation detail of\n * more complex components that appropriately handle selected / checked state.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  selector: 'mat-pseudo-checkbox',\n  styleUrls: ['pseudo-checkbox.css'],\n  template: '',\n  host: {\n    'class': 'mat-pseudo-checkbox',\n    '[class.mat-pseudo-checkbox-indeterminate]': 'state === \"indeterminate\"',\n    '[class.mat-pseudo-checkbox-checked]': 'state === \"checked\"',\n    '[class.mat-pseudo-checkbox-disabled]': 'disabled',\n  },\n})\nexport class MatPseudoCheckbox {\n  /** Display state of the checkbox. */\n  @Input() state: MatPseudoCheckboxState = 'unchecked';\n\n  /** Whether the checkbox is disabled. */\n  @Input() disabled: boolean = false;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatPseudoCheckbox} from './pseudo-checkbox/pseudo-checkbox';\n\n\n@NgModule({\n  exports: [MatPseudoCheckbox],\n  declarations: [MatPseudoCheckbox]\n})\nexport class MatPseudoCheckboxModule { }\n\n\nexport * from './pseudo-checkbox/pseudo-checkbox';\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Component, ViewEncapsulation, Input, ChangeDetectionStrategy} from '@angular/core';\nimport {mixinDisabled, CanDisable} from '../common-behaviors/disabled';\n\n// Boilerplate for applying mixins to MatOptgroup.\n/** @docs-private */\nexport class MatOptgroupBase { }\nexport const _MatOptgroupMixinBase = mixinDisabled(MatOptgroupBase);\n\n// Counter for unique group ids.\nlet _uniqueOptgroupIdCounter = 0;\n\n/**\n * Component that is used to group instances of `mat-option`.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-optgroup',\n  exportAs: 'matOptgroup',\n  templateUrl: 'optgroup.html',\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  inputs: ['disabled'],\n  host: {\n    'class': 'mat-optgroup',\n    'role': 'group',\n    '[class.mat-optgroup-disabled]': 'disabled',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.aria-labelledby]': '_labelId',\n  }\n})\nexport class MatOptgroup extends _MatOptgroupMixinBase implements CanDisable {\n  /** Label for the option group. */\n  @Input() label: string;\n\n  /** Unique id for the underlying label. */\n  _labelId: string = `mat-optgroup-label-${_uniqueOptgroupIdCounter++}`;\n}\n"],"names":["filter","node","nodeType","Node","COMMENT_NODE","some","textContent","trim","throwToolbarMixedModesError","type","Component","args","selector","exportAs","template","styles","inputs","host","class","[class.mat-toolbar-multiple-rows]","[class.mat-toolbar-single-row]","changeDetection","ChangeDetectionStrategy","OnPush","encapsulation","ViewEncapsulation","None","preserveWhitespaces","MatToolbar","propDecorators","MatToolbarModule","NgModule","imports","MatCommonModule","PlatformModule","exports","MatToolbarRow","declarations","VERSION","Version","SELECT_PANEL_PADDING_X","role","MatRow","ctorParameters","MatTableModule","CdkTableModule","CommonModule","MatTable","MatCellDef","MatHeaderCellDef","MatColumnDef","MatHeaderCell","MatCell","MatHeaderRow","MatHeaderRowDef","MatRowDef","MatTableDataSource","initialData","this","_renderData","BehaviorSubject","_filter","sortingDataAccessor","data","sortHeaderId","value","isNaN","filterPredicate","accumulator","currentTerm","key","dataStr","Object","keys","reduce","toLowerCase","transformedFilter","indexOf","_data","_updateChangeSubscription","defineProperty","prototype","next","_sort","sort","_paginator","paginator","_this","sortChange","empty","pageChange","page","_renderChangesSubscription","unsubscribe","pipe","combineLatest","map","_a","_filterData","startWith","_orderData","_pageData","subscribe","filteredData","obj","_updatePaginator","length","active","direction","slice","a","b","startIndex","pageIndex","pageSize","splice","filteredDataLength","Promise","resolve","then","lastPageIndex","Math","ceil","min","connect","disconnect","MatInkBar","_elementRef","_ngZone","alignToElement","element","show","requestAnimationFrame","runOutsideAngular","_setStyles","nativeElement","style","visibility","hide","inkBar","left","offsetLeft","width","offsetWidth","Directive","ElementRef","NgZone","MatTabLabel","templateRef","viewContainerRef","_super","call","tslib_1.__extends","TemplateRef","ViewContainerRef","CdkPortal","MatTabBase","_MatTabMixinBase","mixinDisabled","MatTab","_viewContainerRef","textLabel","_contentPortal","_labelChange","Subject","_disableChange","position","origin","isActive","ngOnChanges","changes","hasOwnProperty","ngOnDestroy","complete","ngOnInit","TemplatePortal","_content","Input","matTabsAnimations","translateTab","trigger","state","transform","transition","animate","MatTabBodyPortal","_componentFactoryResolver","_host","_isCenterPosition","_position","attach","_centeringSub","_beforeCentering","isCentering","hasAttached","_leavingSub","_afterLeavingCenter","detach","closed","ComponentFactoryResolver","MatTabBody","decorators","Inject","forwardRef","CdkPortalOutlet","_dir","_onCentering","EventEmitter","_onCentered","_getLayoutDirection","dir","_origin","_onTranslateTabStarted","e","toState","emit","clientHeight","_onTranslateTabComplete","fromState","animations","Output","nextId","MatTabChangeEvent","MatTabGroupBase","_MatTabGroupMixinBase","mixinColor","mixinDisableRipple","MatTabGroup","elementRef","_changeDetectorRef","_indexToSelect","_tabBodyWrapperHeight","_tabsSubscription","Subscription","EMPTY","_tabLabelSubscription","_dynamicHeight","_selectedIndex","headerPosition","selectedIndexChange","focusChange","animationDone","selectedTabChange","selectChange","_groupId","coerceBooleanProperty","coerceNumberProperty","_backgroundColor","classList","remove","backgroundColor","add","ngAfterContentChecked","indexToSelect","_tabs","max","tabChangeEvent","_createChangeEvent","forEach","tab","index","markForCheck","ngAfterContentInit","_subscribeToTabLabels","_focusChanged","event","toArray","merge","apply","concat","_getTabLabelId","i","_getTabContentId","_setTabBodyWrapperHeight","tabHeight","wrapper","_tabBodyWrapper","height","offsetHeight","_removeTabBodyWrapperHeight","_handleClick","tabHeader","idx","disabled","selectedIndex","focusIndex","_getTabIndex","[class.mat-tab-group-dynamic-height]","[class.mat-tab-group-inverted-header]","dynamicHeight","_dynamicHeightDeprecated","MatTabLabelWrapperBase","_MatTabLabelWrapperMixinBase","MatTabLabelWrapper","focus","getOffsetLeft","getOffsetWidth","[class.mat-tab-disabled]","MatTabHeaderBase","_MatTabHeaderMixinBase","MatTabHeader","_viewportRuler","_focusIndex","_scrollDistance","_selectedIndexChanged","_realignInkBar","_showPaginationControls","_disableScrollAfter","_disableScrollBefore","selectFocusedIndex","indexFocused","_tabLabelCount","_labelWrappers","_updatePagination","_scrollToLabel","_checkScrollingControls","_alignInkBarToSelectedTab","_scrollDistanceChanged","_updateTabScrollPosition","_handleKeydown","keyCode","RIGHT_ARROW","_focusNextTab","LEFT_ARROW","_focusPreviousTab","ENTER","SPACE","preventDefault","dirChange","change","observableOf","resize","realign","_onContentChanges","_checkPaginationEnabled","_isValidIndex","_setTabFocus","tabIndex","containerEl","_tabListContainer","scrollLeft","scrollWidth","_moveFocus","offset","tabs","scrollDistance","translateX","_tabList","v","_getMaxScrollDistance","_scrollHeader","scrollDir","viewLength","labelIndex","selectedLabel","labelBeforePos","labelAfterPos","beforeVisiblePos","afterVisiblePos","isEnabled","selectedLabelWrapper","_inkBar","[class.mat-tab-header-pagination-controls-enabled]","[class.mat-tab-header-rtl]","ViewportRuler","Directionality","Optional","ViewChild","MatTabNavBase","_MatTabNavMixinBase","MatTabNav","_onDestroy","_disableRipple","_setLinkDisableRipple","updateActiveLink","_activeLinkChanged","_activeLinkElement","takeUntil","_alignInkBar","_tabLinks","link","disableRipple","ChangeDetectorRef","MatTabLinkBase","_MatTabLinkMixinBase","mixinTabIndex","_tabNavBar","_tabLinkRipple","setupTriggerEvents","parseInt","globalOptions","rippleConfig","speedFactor","baseSpeedFactor","get","enumerable","configurable","MatTabLink","[attr.aria-disabled]","[attr.tabIndex]","[class.mat-tab-label-active]","Platform","undefined","MAT_RIPPLE_GLOBAL_OPTIONS","Attribute","MatTabsModule","PortalModule","MatRippleModule","ObserversModule","ScrollDispatchModule","providers","VIEWPORT_RULER_PROVIDER","MatToolbarBase","_MatToolbarMixinBase","_platform","ngAfterViewInit","isDevMode","isBrowser","_checkToolbarMixedModes","_toolbarRows","childNodes","contains","contentFade","opacity","AnimationDurations","COMPLEX","AnimationCurves","STANDARD_CURVE","snackBarState","HIDE_ANIMATION","SHOW_ANIMATION","SimpleSnackBar","snackBarRef","action","closeWithAction","matSnackBarAnimations","[@contentFade]","MatSnackBarContainer","_destroyed","_onExit","_onEnter","_animationState","attachComponentPortal","portal","_portalOutlet","Error","snackBarConfig","panelClass","extraClasses","_setCssClasses","horizontalPosition","verticalPosition","attachTemplatePortal","onAnimationEnd","startsWith","_completeExit","onEnter_1","run","enter","detectChanges","exit","onMicrotaskEmpty","asObservable","take","Array","isArray","cssClass","[@state]","(@state.done)","BasePortalOutlet","MatSnackBar","_overlay","_live","_injector","_breakpointObserver","_parentSnackBar","_snackBarRefAtThisLevel","parent","_openedSnackBarRef","openFromComponent","component","config","_config","_applyConfigDefaults","_attach","afterDismissed","containerInstance","dismiss","duration","afterOpened","_dismissAfter","announcementMessage","announce","politeness","open","message","_attachSnackBarContainer","overlayRef","containerPortal","ComponentPortal","containerRef","instance","_createOverlay","container","MatSnackBarRef","injector","_createInjector","contentRef","observe","Breakpoints","Handset","detachments","matches","overlayElement","overlayConfig","OverlayConfig","positionStrategy","global","isRtl","isLeft","isRight","right","centerHorizontally","top","bottom","create","userInjector","injectionTokens","WeakMap","set","MAT_SNACK_BAR_DATA","PortalInjector","Injectable","Overlay","LiveAnnouncer","Injector","BreakpointObserver","SkipSelf","MatSnackBarModule","OverlayModule","LayoutModule","entryComponents","LIVE_ANNOUNCER_PROVIDER","MatSortBase","_MatSortMixinBase","sortables","Map","_stateChanges","start","_direction","MatSort","getSortInvalidDirectionError","_disableClear","register","sortable","id","getSortHeaderMissingIdError","has","getSortDuplicateSortableIdError","deregister","delete","getNextSortDirection","disableClear","sortDirectionCycle","getSortDirectionCycle","nextDirectionIndex","sortButtonLabel","sortDescriptionLabel","MatSortHeaderIntl","MAT_SORT_HEADER_INTL_PROVIDER","provide","deps","useFactory","MAT_SORT_HEADER_INTL_PROVIDER_FACTORY","SORT_ANIMATION_TRANSITION","ENTERING","matSortAnimations","indicator","leftPointer","rightPointer","indicatorToggle","keyframes","MatSortHeaderBase","_MatSortHeaderMixinBase","MatSortHeader","_intl","changeDetectorRef","_cdkColumnDef","arrowPosition","getSortHeaderNotContainedWithinSortError","_rerenderSubscription","name","_isDisabled","_isSorted","(click)","[class.mat-sort-header-sorted]","[class.mat-sort-header-disabled]","CdkColumnDef","MatSortModule","MatStepLabel","CdkStepLabel","optionalLabel","MatStepperIntl","MatStepHeader","_focusMonitor","_element","monitor","_intlSubscription","_index","_selected","_active","_optional","stopMonitoring","_stringLabel","label","_templateLabel","_getHostElement","selected","optional","matStepperAnimations","horizontalStepTransition","verticalStepTransition","MatStep","stepper","_errorStateMatcher","isErrorState","control","form","originalErrorState","customErrorState","invalid","interacted","ErrorStateMatcher","useExisting","MatStepper","arguments","_steps","_stateChanged","MatHorizontalStepper","aria-orientation","MatVerticalStepper","MatStepperNext","CdkStepper","CdkStepperNext","MatStepperPrevious","CdkStepperPrevious","MatStepperModule","MatButtonModule","CdkStepperModule","MatIconModule","A11yModule","CDK_TABLE_TEMPLATE","CdkTable","CdkCellDef","CdkHeaderCellDef","columnDef","cssClassFriendlyName","CdkHeaderCell","CdkCell","CdkHeaderRowDef","CdkRowDef","CDK_ROW_TEMPLATE","MatSidenavContainer","_drawers","ContentChildren","MatSidenav","ContentChild","MatSidenavContent","MatDrawerContainer","MatSidenavModule","MatDrawer","MatDrawerContent","MAT_DRAWER_DEFAULT_AUTOSIZE","useValue","nextUniqueId","MAT_SLIDE_TOGGLE_VALUE_ACCESSOR","NG_VALUE_ACCESSOR","MatSlideToggle","multi","MatSlideToggleChange","MatSlideToggleBase","_MatSlideToggleMixinBase","onChange","_","onTouched","_uniqueId","_required","_checked","labelPosition","ariaLabel","ariaLabelledby","_rippleConfig","centered","radius","_slideRenderer","SlideToggleRenderer","_inputElement","focusOrigin","_onInputFocusChange","_onChangeEvent","stopPropagation","dragging","checked","_emitChangeEvent","_onInputClick","writeValue","registerOnChange","fn","registerOnTouched","setDisabledState","isDisabled","focusVia","toggle","_focusRipple","fadeOut","_ripple","launch","tslib_1.__assign","persistent","source","_onDragStart","startThumbDrag","_onDrag","updateThumbPosition","deltaX","_onDragEnd","newCheckedValue","dragPercentage","setTimeout","stopThumbDrag","_onLabelTextChange","[id]","[class.mat-checked]","[class.mat-disabled]","[class.mat-slide-toggle-label-before]","FocusMonitor","required","MatRipple","_thumbBarEl","querySelector","_thumbBarWidth","clientWidth","_thumbEl","_previousChecked","applyCssTransform","dragX","percentage","MatSlideToggleModule","HAMMER_GESTURE_CONFIG","useClass","GestureConfig","MAT_SLIDER_VALUE_ACCESSOR","MatSlider","MatSliderChange","MatSliderBase","_MatSliderMixinBase","_invert","_max","_min","_step","_thumbLabel","_tickInterval","_value","_vertical","input","_percent","_isSliding","_isActive","_tickIntervalPercent","_sliderDimensions","_controlValueAccessorChangeFn","_dirChangeSubscription","_calculatePercentage","_roundLabelTo","toString","split","pop","tickInterval","toFixed","_clamp","vertical","invert","percent","_isMinValue","thumbLabel","axis","_invertMouseCoords","_thumbGap","tickSize","backgroundSize","sign","rotate","_invertAxis","_onMouseenter","_getSliderDimensions","_updateTickIntervalPercent","_onClick","oldValue","_focusHostElement","_updateValueFromPosition","x","clientX","y","clientY","_emitInputEvent","_onSlide","_onSlideStart","center","_valueOnSlideStart","_onSlideEnd","_onFocus","_onBlur","_onKeydown","PAGE_UP","_increment","PAGE_DOWN","END","HOME","UP_ARROW","DOWN_ARROW","_onKeyup","numSteps","step","pos","size","posComponent","exactValue","_calculateValue","closestValue","round","trackSize","pixelsPerStep","stepsPerTick","pixelsPerTick","_sliderWrapper","getBoundingClientRect","(focus)","(blur)","(keydown)","(keyup)","(mouseenter)","(slide)","(slideend)","(slidestart)","[tabIndex]","[attr.aria-valuemax]","[attr.aria-valuemin]","[attr.aria-valuenow]","[attr.aria-orientation]","[class.mat-slider-disabled]","[class.mat-slider-has-ticks]","[class.mat-slider-horizontal]","[class.mat-slider-axis-inverted]","[class.mat-slider-sliding]","[class.mat-slider-thumb-label-showing]","[class.mat-slider-vertical]","[class.mat-slider-min-value]","[class.mat-slider-hide-last-tick]","_thumbLabelDeprecated","_tickIntervalDeprecated","MatSliderModule","BidiModule","_overlayRef","_afterClosed","_afterOpened","_onAction","onAction","_finishDismiss","clearTimeout","_durationTimeoutId","_open","dispose","InjectionToken","MatSnackBarConfig","DECELERATION_CURVE","EXITING","ACCELERATION_CURVE","MatSpinner","MatProgressSpinner","MatProgressSpinnerModule","MAT_RADIO_GROUP_CONTROL_VALUE_ACCESSOR","MatRadioGroup","MatRadioChange","MatRadioGroupBase","_MatRadioGroupMixinBase","_changeDetector","_name","_isInitialized","_labelPosition","_disabled","_updateRadioButtonNames","_markRadiosForCheck","newValue","_updateSelectedRadioFromValue","_checkSelectedRadioButton","_touch","_radios","radio","isAlreadySelected","event_1","_markForCheck","MatRadioButton","descendants","align","MatRadioButtonBase","_MatRadioButtonMixinBase","radioGroup","_radioDispatcher","_removeUniqueSelectionListener","listen","newCheckedState","notify","_isRippleDisabled","_onInputChange","groupValueChanged","[class.mat-radio-checked]","[class.mat-radio-disabled]","[attr.id]","UniqueSelectionDispatcher","MatRadioModule","UNIQUE_SELECTION_DISPATCHER_PROVIDER","matDrawerAnimations","transformDrawer","MatDrawerToggleResult","animationFinished","_container","_margins","_contentMargins","margins","[style.margin-left.px]","[style.margin-right.px]","_focusTrapFactory","_doc","_elementFocusedBeforeDrawerWasOpened","_mode","_disableClose","opened","_isFocusTrapEnabled","_focusTrap","_trapFocus","_restoreFocus","onAlignChanged","onPositionChanged","_modeChanged","mode","HTMLElement","_openedVia","blur","enabled","destroy","isOpen","openedVia","_opened","_enableAnimations","close","openedChange","[@transform]","(@transform.start)","(@transform.done)","[attr.align]","[class.mat-drawer-end]","[class.mat-drawer-over]","[class.mat-drawer-side]","DOCUMENT","_openedStream","openedStart","_closedStream","closedStart","onOpen","onClose","backdropClick","_doCheckSubject","_autosize","defaultAutosize","drawer","_watchDrawerToggle","_watchDrawerPosition","_watchDrawerMode","_isDrawerOpen","_start","_end","_updateContentMargins","debounceTime","ngDoCheck","_setContainerClass","throwMatDuplicatedDrawerError","_right","_left","_closeModalDrawer","_isShowingBackdrop","_width","autosize","_fixedBottomGap","[class.mat-sidenav-fixed]","[style.top.px]","[style.bottom.px]","MatTooltip","_tooltipInstance","_disposeTooltip","_message","_ariaDescriber","removeDescription","_isTooltipVisible","_updateTooltipMessage","describe","_tooltipClass","_setTooltipClass","IOS","_manualListeners","listener","removeEventListener","clear","delay","showDelay","_createTooltip","hideDelay","isVisible","ESCAPE","_handleTouchend","_defaultOptions","touchendHideDelay","TooltipComponent","afterHidden","_getOrigin","overlay","_getOverlayPosition","strategy","connectedTo","main","withFallbackPosition","fallback","scrollableAncestors","_scrollDispatcher","getAncestorScrollContainers","withScrollableContainers","onPositionChange","scrollableViewProperties","isOverlayClipped","_setTransformOrigin","connectionPair","scrollStrategy","_scrollStrategy","isDirectionLtr","originX","originY","getMatTooltipInvalidPositionError","_invertPosition","isLtr","overlayX","overlayY","updatePosition","tooltipClass","(longpress)","(touchend)","ScrollDispatcher","AriaDescriber","MAT_TOOLTIP_SCROLL_STRATEGY","MAT_TOOLTIP_DEFAULT_OPTIONS","_positionDeprecated","_visibility","_closeOnInteraction","_transformOrigin","_onHide","_hideTimeoutId","_showTimeoutId","overlayPosition","_animationStart","_animationDone","_handleBodyInteraction","matTooltipAnimations","tooltipState","aria-hidden","ɵ0","MAT_TOOLTIP_SCROLL_STRATEGY_PROVIDER","ARIA_DESCRIBER_PROVIDER","MatTooltipModule","itemsPerPageLabel","nextPageLabel","previousPageLabel","getRangeLabel","MatPaginatorIntl","MAT_PAGINATOR_INTL_PROVIDER","MAT_PAGINATOR_INTL_PROVIDER_FACTORY","PageEvent","MatPaginator","_pageIndex","_length","_pageSizeOptions","_intlChanges","_pageSize","_updateDisplayedPageSizeOptions","pageSizeOptions","p","_initialized","nextPage","hasNextPage","_emitPageEvent","previousPage","hasPreviousPage","numberOfPages","_changePageSize","floor","_displayedPageSizeOptions","push","MatPaginatorModule","MatSelectModule","color","_bufferValue","MatProgressBar","clamp","_primaryTransform","_bufferTransform","bufferValue","aria-valuemin","aria-valuemax","[attr.mode]","[class.mat-primary]","[class.mat-accent]","[class.mat-warn]","MatProgressBarModule","BASE_SIZE","MatProgressSpinnerBase","_MatProgressSpinnerMixinBase","INDETERMINATE_ANIMATION_TEMPLATE","platform","_document","_fallbackAnimation","_elementSize","_diameter","EDGE","TRIDENT","animationClass","diameters","_attachStyleNode","_strokeWidth","diameter","strokeWidth","viewBox","_circleRadius","PI","_strokeCircumference","styleTag","createElement","head","appendChild","sheet","insertRule","_getAnimationText","replace","Set","[style.width.px]","[style.height.px]","document","matMenuAnimations","transformMenu","fadeInItems","MAT_MENU_DEFAULT_OPTIONS","MatMenu","items","MatMenuItem","overlapTrigger","MAT_MENU_SCROLL_STRATEGY","MAT_MENU_SCROLL_STRATEGY_PROVIDER","MAT_MENU_SCROLL_STRATEGY_PROVIDER_FACTORY","MatMenuTrigger","_parentMenu","_menuItemInstance","_menuOpen","_closeSubscription","_positionSubscription","_hoverSubscription","_openedByMouse","menuOpened","onMenuOpen","menuClosed","onMenuClose","_triggersSubmenu","triggersSubmenu","menu","_checkMenu","reason","_destroyMenu","_hovered","openMenu","_cleanUpSubscriptions","toggleMenu","closeMenu","_portal","_menuClosingActions","_initMenu","_startAnimation","menuOpen","_resetMenu","_resetAnimation","parentMenu","_setMenuElevation","_setIsMenuOpen","rootNode","resetActiveItem","focusFirstItem","setElevation","depth","_highlighted","throwMatMenuMissingError","_getOverlayConfig","_subscribeToPositions","_getPosition","hasBackdrop","backdropClass","posX","posY","setPositionClasses","xPosition","originFallbackX","_b","yPosition","overlayFallbackY","_c","originFallbackY","_d","overlayFallbackX","offsetY","withDirection","withOffsetY","backdrop","parentClose","hover","_handleMousedown","isFakeMousedownFromScreenReader","aria-haspopup","(mousedown)","Self","_deprecatedMatMenuTriggerFor","MatMenuModule","matSelectAnimations","transformPanel","minWidth","fadeInContent","MAT_SELECT_SCROLL_STRATEGY","MAT_SELECT_SCROLL_STRATEGY_PROVIDER","MAT_SELECT_SCROLL_STRATEGY_PROVIDER_FACTORY","MatSelectChange","MatSelectBase","_defaultErrorStateMatcher","_parentForm","_parentFormGroup","ngControl","_MatSelectMixinBase","mixinErrorState","MatSelectTrigger","MatSelect","_parentFormField","_scrollStrategyFactory","_panelOpen","_scrollTop","_multiple","_compareWith","o1","o2","_uid","_destroy","_triggerFontSize","_onChange","_onTouched","_optionIds","_panelDoneAnimating","_offsetY","_positions","focused","controlType","optionSelectionChanges","defer","options","option","onSelectionChange","onStable","switchMap","selectionChange","valueChange","valueAccessor","_placeholder","stateChanges","_selectionModel","getMatSelectDynamicMultipleError","getMatSelectNonFunctionValueError","_initializeSelection","_id","o","SelectionModel","multiple","_initKeyManager","_resetOptions","updateErrorState","panelOpen","_triggerRect","getComputedStyle","_calculateOverlayPosition","_highlightCorrectOption","overlayDir","fontSize","_setSelectionByValue","selectedOptions","viewValue","_isRtl","reverse","join","_handleOpenKeydown","_handleClosedKeydown","isArrowKey","altKey","_keyManager","onKeydown","setFirstItemActive","setLastItemActive","activeItem","previouslyFocusedIndex","activeItemIndex","shiftKey","_selectViaInteraction","_onPanelDone","offsetX","_onFadeInDone","_onAttached","positionChange","_calculateOverlayOffsetX","panel","scrollTop","_getPanelTheme","isEmpty","isUserInput","getMatSelectNonArrayValueError","_clearSelection","currentValue","_selectValue","_sortValues","correspondingOption","setActiveItem","find","error","console","warn","select","skip","deselect","ActiveDescendantKeyManager","withTypeAhead","tabOut","_scrollActiveOptionIntoView","_onSelect","_setOptionIds","wasSelected","isSelected","_propagateChanges","fallbackValue","valueToEmit","_getOptionIndex","itemHeight","_getItemHeight","activeOptionIndex","labelCount","MatOption","countGroupLabelsBeforeOption","optionGroups","scrollOffset","panelTop","result","current","_getItemCount","panelHeight","scrollContainerHeight","maxScroll","selectedOptionOffset","scrollBuffer","_calculateOverlayScroll","_calculateOverlayOffsetY","_checkOverlayWithinViewport","optionOffsetFromScrollTop","halfOptionHeight","optimalScrollPosition","placeholder","_getAriaActiveDescendant","overlayRect","viewportSize","getViewportSize","paddingWidth","SELECT_MULTIPLE_PANEL_PADDING_X","first","group","leftOverflow","rightOverflow","optionOffsetFromPanelTop","optionHeightAdjustment","maxOptionsDisplayed","firstDisplayedIndex","selectedDisplayIndex","partialItemHeight","topSpaceAvailable","bottomSpaceAvailable","panelHeightTop","abs","totalPanelHeight","panelHeightBottom","_adjustPanelUp","_adjustPanelDown","_getOriginBasedOnOption","distanceBelowViewport","distanceAboveViewport","setDescribedByIds","ids","_ariaDescribedby","onContainerClick","[attr.tabindex]","[attr.aria-label]","[attr.aria-labelledby]","[attr.aria-required]","[attr.aria-invalid]","[attr.aria-owns]","[attr.aria-multiselectable]","[attr.aria-describedby]","[attr.aria-activedescendant]","[class.mat-select-disabled]","[class.mat-select-invalid]","[class.mat-select-required]","MatFormFieldControl","MAT_OPTION_PARENT_COMPONENT","NgForm","FormGroupDirective","MatFormField","NgControl","CdkConnectedOverlay","MatOptgroup","customTrigger","compareWith","errorStateMatcher","MatOptionModule","MatFormFieldModule","SCROLL_THROTTLE_MS","MAT_TOOLTIP_SCROLL_STRATEGY_PROVIDER_FACTORY","nodeName","webkitUserSelect","userSelect","addEventListener","_navList","_isNavList","MatListItem","_lineSetter","MatLineSetter","_lines","_handleFocus","_handleBlur","MatNavList","_MatListItemMixinBase","MatSelectionListBase","_MatSelectionListMixinBase","MatListOptionBase","_MatListOptionMixinBase","MAT_SELECTION_LIST_VALUE_ACCESSOR","MatSelectionList","MatListOptionChange","MatSelectionListChange","MatListOption","selectionList","_hasFocus","checkboxPosition","_setSelected","_reportValueChange","_removeOptionFromList","_emitDeprecatedChangeEvent","_setFocusedOption","tabindex","[class.mat-list-item-disabled]","[class.mat-list-item-focus]","[attr.aria-selected]","_tempValues","_setOptionsFromValues","optionIndex","setNextItemActive","_toggleSelectOnFocusedOption","_getSelectedOptionValues","values","_getOptionByValue","Boolean","focusedOption","focusedIndex","MatListModule","MatLineModule","MatPseudoCheckboxModule","MatList","MatListAvatarCssMatStyler","MatListIconCssMatStyler","MatListSubheaderCssMatStyler","MatDividerModule","MatMenuItemBase","_MatMenuItemMixinBase","_checkDisabled","_emitHoverEvent","getLabel","output","length_1","TEXT_NODE","[class.mat-menu-item-highlighted]","[class.mat-menu-item-submenu-trigger]","[attr.disabled]","_xPosition","_yPosition","_tabSubscription","_classList","_panelAnimationState","_overlapTrigger","throwMatMenuInvalidPositionX","throwMatMenuInvalidPositionY","classes","className","FocusKeyManager","withWrap","item","newElevation","customElevation","c","_previousElevation","_onAnimationDone","MatDatepickerToggle","MatDatepickerModule","MatDialogModule","MatCalendar","MatCalendarBody","MatDatepicker","MatDatepickerContent","MatDatepickerInput","MatMonthView","MatYearView","MatDatepickerIntl","MAT_DATEPICKER_SCROLL_STRATEGY_PROVIDER","MatDivider","_inset","[class.mat-divider-vertical]","[class.mat-divider-inset]","_hideToggle","displayMode","MatAccordion","hideToggle","CdkAccordion","MatExpansionPanelContent","_template","matExpansionAnimations","indicatorRotate","expansionHeaderHeight","params","collapsedHeight","expandedHeight","bodyExpansion","MatExpansionPanelBase","accordion","_uniqueSelectionDispatcher","_MatExpansionPanelMixinBase","expanded","_getExpandedState","_lazyContent","_inputChanges","MatExpansionPanel","outputs","[class.mat-expanded]","[class.mat-expansion-panel-spacing]","Host","MatExpansionPanelActionRow","MatExpansionPanelHeader","_parentChangeSubscription","_toggle","_isExpanded","_getPanelId","_showToggle","_keyup","[attr.aria-controls]","[attr.aria-expanded]","[@expansionHeight]","MatExpansionModule","CdkAccordionModule","MatExpansionPanelTitle","MatExpansionPanelDescription","MatGridTile","_rowspan","_colspan","coerceToNumber","_setStyle","property","MatGridTileText","MatGridAvatarCssMatStyler","MatGridTileHeaderCssMatStyler","MatGridTileFooterCssMatStyler","TileCoordinator","numColumns","tiles","columnIndex","rowIndex","tracker","fill","positions","tile","_trackTile","lastRowMax","rowCount","gapStartIndex","_findMatchingGap","colspan","_markTilePosition","TilePosition","tileCols","gapEndIndex","_nextRow","_findGapEndIndex","rowspan","row","col","TileStyler","_rows","init","gutterSize","cols","_gutterSize","normalizeUnits","_cols","getBaseTileSize","sizePercent","gutterFraction","getTilePosition","baseSize","calc","getTileSize","span","setStyle","colIndex","percentWidthPerTile","gutterWidthFractionPerTile","setColStyles","setRowStyles","percentWidth","gutterWidth","baseTileWidth","side","getGutterSpan","getTileSpan","tileHeight","getComputedHeight","FixedTileStyler","fixedRowHeight","reset","list","_setListStyle","_tiles","RatioTileStyler","_parseRatio","percentHeightPerTile","rowHeightRatio","baseTileHeight","ratioParts","parseFloat","FitTileStyler","gutterHeightPerTile","MatGridList","_gutter","coerceToString","_rowHeight","_setTileStyler","_checkCols","_checkRowHeight","_layoutTiles","rowHeight","_tileStyler","MatGridListModule","MatListBase","_MatListMixinBase","MatListItemBase","_weeks","MatCalendarCell","dateNames","_getDateInCurrentMonth","date","_hasSameMonthAndYear","activeDate","_dateAdapter","getDate","d1","d2","getMonth","getYear","_getValidDateOrNull","isDateInstance","isValid","dateFilter","selectedChange","_userSelection","_dateFormats","createMissingDateImplError","_activeDate","today","oldActiveDate","deserialize","_init","_selectedMonth","_getMonthInCurrentYear","_monthSelected","month","daysInMonth","getNumDaysInMonth","createDate","_todayMonth","_yearLabel","getYearName","monthNames","getMonthNames","_months","_createCellForMonth","monthName","format","display","monthYearA11yLabel","toLocaleUpperCase","_isMonthEnabled","firstOfMonth","addCalendarDays","startView","_dateFilterForViews","minDate","compareDate","maxDate","_startAt","_minDate","_maxDate","_clampedActiveDate","clampDate","_monthView","monthYearLabel","switchToYearViewLabel","switchToMonthViewLabel","prevMonthLabel","prevYearLabel","nextMonthLabel","nextYearLabel","startAt","_focusActiveCell","firstChange","view","monthView","yearView","_dateSelected","sameDate","_userSelected","_currentPeriodClicked","_previousClicked","addCalendarMonths","addCalendarYears","_nextClicked","_previousEnabled","_isSameView","_nextEnabled","_handleCalendarBodyKeydown","_handleCalendarBodyKeydownInMonthView","_handleCalendarBodyKeydownInYearView","date1","date2","_prevMonthInSameCol","_nextMonthInSameCol","DateAdapter","MAT_DATE_FORMATS","datepickerUid","MAT_DATEPICKER_SCROLL_STRATEGY","MAT_DATEPICKER_SCROLL_STRATEGY_PROVIDER_FACTORY","_calendar","datepicker","[class.mat-datepicker-content-touch]","_disabledChange","_inputSubscription","_popupRef","selectedChanged","_datepickerInput","_valueChange","_focusedElementBeforeOpen","activeElement","touchUi","_openAsDialog","_openAsPopup","openedStream","_dialogRef","_calendarPortal","isAttached","completeClose","closedStream","afterClosed","componentInstance","_createPopup","getPopupConnectionElementRef","fallbackOffset","MatDialog","MAT_DATEPICKER_VALUE_ACCESSOR","MAT_DATEPICKER_VALIDATORS","NG_VALIDATORS","MatDatepickerInputEvent","target","targetElement","_formField","dateChange","dateInput","_cvaOnChange","_validatorOnChange","_datepickerSubscription","_localeSubscription","_parseValidator","_lastValueValid","matDatepickerParse","text","_minValidator","controlValue","matDatepickerMin","actual","_maxValidator","matDatepickerMax","_filterValidator","_dateFilter","matDatepickerFilter","_validator","Validators","compose","localeChanges","registerDatepicker","_datepicker","_registerInput","oldDate","registerOnValidatorChange","validate","underlineRef","_getPopupFallbackOffset","_inputContainerRef","_onInput","parse","MAT_INPUT_VALUE_ACCESSOR","[attr.aria-haspopup]","[attr.min]","[attr.max]","[disabled]","(input)","(change)","matDatepicker","_watchStateChanges","datepickerDisabled","inputDisabled","[attr.role]","[@slideDialog]","(@slideDialog.start)","(@slideDialog.done)","MatDialogContainer","uniqueId","MatDialogRef","_containerInstance","disableClose","_afterOpen","_beforeClose","_animationStateChanged","phaseName","_result","keydownEvents","dialogResult","detachBackdrop","_startExitAnimation","afterOpen","beforeClose","_getPositionStrategy","centerVertically","updateSize","getConfig","MAT_DIALOG_DATA","MAT_DIALOG_DEFAULT_OPTIONS","MAT_DIALOG_SCROLL_STRATEGY","MAT_DIALOG_SCROLL_STRATEGY_PROVIDER","MAT_DIALOG_SCROLL_STRATEGY_PROVIDER_FACTORY","location","_parentDialog","_overlayContainer","_openDialogsAtThisLevel","_afterAllClosedAtThisLevel","_afterOpenAtThisLevel","_ariaHiddenElements","afterAllClosed","openDialogs","_afterAllClosed","closeAll","componentOrTemplateRef","MatDialogConfig","getDialogById","dialogContainer","_attachDialogContainer","dialogRef","_attachDialogContent","_hideNonDialogContentFromAssistiveTechnology","_removeOpenDialog","dialog","dialogConfig","minHeight","maxWidth","maxHeight","$implicit","previousValue","setAttribute","removeAttribute","overlayContainer","getContainerElement","parentElement","siblings","children","sibling","hasAttribute","getAttribute","Location","OverlayContainer","dialogElementUid","MatDialogClose","proxiedChange","_matDialogClose","MatDialogTitle","_ariaLabelledBy","MatDialogContent","MatDialogActions","SvgIconConfig","url","svgElement","MatIconRegistry","_httpClient","_sanitizer","_svgIconConfigs","_iconSetConfigs","_cachedIconsByUrl","_inProgressUrlFetches","_fontCssClassesByAlias","_defaultFontSetClass","addSvgIcon","iconName","addSvgIconInNamespace","namespace","iconKey","addSvgIconSet","addSvgIconSetInNamespace","configNamespace","registerFontClassAlias","alias","classNameForFontAlias","setDefaultFontSetClass","getDefaultFontSetClass","getSvgIconFromUrl","safeUrl","sanitize","SecurityContext","RESOURCE_URL","getMatIconFailedToSanitizeError","cachedIcon","cloneSvg","_loadSvgIconFromConfig","tap","svg","getNamedSvgIcon","_getSvgFromConfig","iconSetConfigs","_getSvgFromIconSetConfigs","observableThrow","getMatIconNameNotFoundError","namedIcon","_extractIconWithNameFromAnySet","iconSetFetchRequests","iconSetConfig","_loadSvgIconSetFromConfig","catchError","err","log","forkJoin","foundIcon","_extractSvgIconFromSet","_fetchUrl","svgText","_createSvgElementForSingleIcon","_svgElementFromString","responseText","_setSvgAttributes","iconSet","iconSource","iconElement","cloneNode","_toSvgElement","str","div","innerHTML","getMatIconNoHttpProviderError","inProgressFetch","req","responseType","finalize","share","HttpClient","DomSanitizer","ICON_REGISTRY_PROVIDER","ICON_REGISTRY_PROVIDER_FACTORY","MatIconBase","_MatIconMixinBase","MatIcon","_iconRegistry","ariaHidden","_splitIconName","parts","svgIcon","_setSvgElement","_clearSvgElement","_usingFontIcon","_updateFontIconClasses","layoutElement","childCount","removeChild","elem","fontSetClass","fontSet","_previousFontSetClass","fontIcon","_previousFontIconClass","MatTextareaAutosize","_minRows","_setMinHeight","_maxRows","_setMaxHeight","minRows","_cachedLineHeight","_setTextareaStyle","maxRows","resizeToFitContent","fromEvent","window","auditTime","_cacheTextareaLineHeight","textarea","textareaClone","rows","border","padding","overflow","force","_previousValue","placeholderText","scrollHeight","MAT_INPUT_INVALID_TYPES","MatInputBase","_MatInputMixinBase","MatInput","inputValueAccessor","_type","_readonly","_isServer","_neverEmptyInputTypes","t","getSupportedInputTypes","_inputValueAccessor","_previousNativeValue","el","selectionStart","selectionEnd","setSelectionRange","_validateType","_isTextarea","_dirtyCheckNativeValue","isFocused","readonly","getMatInputUnsupportedTypeError","_isNeverEmpty","_isBadInput","validity","badInput","[class.mat-input-server]","[placeholder]","[required]","[readonly]","MatInputModule","calendarLabel","openCalendarLabel","displayValue","numCols","allowDisabledSelection","activeCell","cellAspectRatio","selectedValueChange","_cellClicked","cell","_isActiveCell","cellNumber","_firstRowOffset","todayValue","selectedValue","labelMinRequiredCells","firstDayOfWeek","getFirstDayOfWeek","narrowWeekdays","getDayOfWeekNames","longWeekdays","weekdays","long","narrow","_weekdays","_selectedDate","selectedYear","selectedMonth","selectedDate","_todayDate","_monthLabel","_firstWeekOffset","getDayOfWeek","_createWeekCells","getDateNames","dateA11yLabel","[class.mat-checkbox-indeterminate]","[class.mat-checkbox-checked]","[class.mat-checkbox-disabled]","[class.mat-checkbox-label-before]","MAT_CHECKBOX_CONTROL_VALUE_ACCESSOR","MAT_CHECKBOX_CLICK_ACTION","MatCheckbox","indeterminateChange","indeterminate","_MatCheckboxMixinBase","MAT_CHECKBOX_REQUIRED_VALIDATOR","MatCheckboxRequiredValidator","[attr.required]","CheckboxRequiredValidator","MatCheckboxModule","MatChipSelectionChange","MatChipBase","_MatChipMixinBase","MatBasicChip","MatChip","_selectable","_removable","destroyed","removed","onRemove","selectable","chip","selectViaInteraction","toggleSelected","removable","DELETE","BACKSPACE","_blur","[class.mat-chip-selected]","MatChipRemove","_parentChip","MatChipListBase","_MatChipListMixinBase","MatChipListChange","MatChipList","_lastDestroyedIndex","_chipSet","_tabOutSubscription","_tabIndex","_userTabIndex","ariaOrientation","_chipInput","chips","_changeSubscription","_resetChips","_updateTabIndex","_updateFocusForDestroyedChips","_dropSubscriptions","registerInput","inputElement","_focusInput","_keydown","code","isInputEmpty","_isInputEmpty","isPrevKey","isNextKey","isBackKey","setPreviousItemActive","_updateKeyManager","chipIndex","chipsArray","newFocusIndex","focusChip","correspondingChip","correspondingChipIndex","updateActiveItemIndex","_markAsTouched","_listenToChipsFocus","_listenToChipsSelection","_listenToChipsRemoved","_chipFocusSubscription","_chipBlurSubscription","_chipSelectionSubscription","chipSelectionChanges","chipFocusChanges","chipBlurChanges","_chipRemoveSubscription","chipRemoveChanges","[class.mat-chip-list-disabled]","[class.mat-chip-list-invalid]","[class.mat-chip-list-required]","MatChipInput","_addOnBlur","separatorKeyCodes","chipEnd","_chipList","_emitChipEnd","addOnBlur","_focus","chipList","MatChipsModule","ariaDescribedBy","autoFocus","matDialogAnimations","slideDialog","_elementFocusedBeforeDialogWasOpened","_state","throwMatDialogContentAlreadyAttachedError","_savePreviouslyFocusedElement","focusInitialElementWhenReady","toFocus","_onAnimationStart","MatButton","focusMonitor","stopImmediatePropagation","MatAnchor","MatMiniFab","MatFab","MatButtonCssMatStyler","MatRaisedButtonCssMatStyler","MatIconButtonCssMatStyler","MatButtonToggleGroupBase","_MatButtonToggleGroupMixinBase","MAT_BUTTON_TOGGLE_GROUP_VALUE_ACCESSOR","MatButtonToggleGroup","_uniqueIdCounter","MatButtonToggleChange","_updateButtonToggleNames","_updateSelectedButtonToggleFromValue","_buttonToggles","matchingButtonToggle","buttonToggle","_markButtonTogglesForCheck","[class.mat-button-toggle-vertical]","MatButtonToggle","MatButtonToggleGroupMultiple","toggleGroup","toggleGroupMultiple","_buttonToggleDispatcher","_isSingleSelector","buttonToggleGroup","buttonToggleGroupMultiple","[class.mat-button-toggle-standalone]","[class.mat-button-toggle-checked]","[class.mat-button-toggle-disabled]","MatButtonToggleModule","MatCardContent","MatCardTitle","MatCardSubtitle","[class.mat-card-actions-align-end]","MatCardActions","MatCardFooter","MatCardImage","MatCardSmImage","MatCardMdImage","MatCardLgImage","MatCardXlImage","MatCardAvatar","MatCardHeader","MatCardTitleGroup","MatCardModule","MatCard","MatCheckboxChange","MatCheckboxBase","_clickAction","_currentAnimationClass","_currentCheckState","TransitionCheckState","Init","_indeterminate","changed","_transitionCheckState","Indeterminate","Checked","Unchecked","_getAriaChecked","newState","oldState","_getAnimationClassForCheckStateTransition","_removeFocusRipple","_onInteractionEvent","animSuffix","MAT_LABEL_GLOBAL_OPTIONS","MatError","[class.mat-right]","MatHint","MatPlaceholder","MatLabel","MatPrefix","MatSuffix","matFormFieldAnimations","transitionMessages","labelOptions","_showAlwaysAnimate","_subscriptAnimationState","_hintLabel","_hintLabelId","_labelOptions","floatLabel","float","_hideRequiredMarker","_floatLabel","_processHints","_validateControlChild","_control","_validatePlaceholders","_syncDescribedByIds","valueChanges","_hintChildren","_errorChildren","_shouldForward","prop","_hasPlaceholder","_placeholderChild","_hasLabel","_labelChild","_shouldLabelFloat","_canLabelFloat","shouldLabelFloat","shouldPlaceholderFloat","_shouldAlwaysFloat","_hideControlPlaceholder","_hasFloatingLabel","_getDisplayedMessages","errorState","_animateAndLockLabel","_label","getMatFormFieldPlaceholderConflictError","_validateHints","startHint_1","endHint_1","hint","hintLabel","getMatFormFieldDuplicatedHintError","startHint","endHint","getMatFormFieldMissingControlError","[class.mat-input-invalid]","[class.mat-form-field-invalid]","[class.mat-form-field-can-float]","[class.mat-form-field-should-float]","[class.mat-form-field-hide-placeholder]","[class.mat-form-field-disabled]","[class.mat-focused]","[class.ng-untouched]","[class.ng-touched]","[class.ng-pristine]","[class.ng-dirty]","[class.ng-valid]","[class.ng-invalid]","[class.ng-pending]","hideRequiredMarker","floatPlaceholder","_connectionContainerRef","_prefixChildren","_suffixChildren","_uniqueAutocompleteIdCounter","MatAutocompleteSelectedEvent","MatAutocompleteBase","_MatAutocompleteMixinBase","MatAutocomplete","showPanel","_isOpen","displayWith","optionSelected","_setVisibility","_setScrollTop","_getScrollTop","_emitSelectEvent","MAT_AUTOCOMPLETE_SCROLL_STRATEGY","MAT_AUTOCOMPLETE_SCROLL_STRATEGY_PROVIDER","MAT_AUTOCOMPLETE_SCROLL_STRATEGY_PROVIDER_FACTORY","MAT_AUTOCOMPLETE_VALUE_ACCESSOR","MatAutocompleteTrigger","_zone","_manuallyFloatingLabel","_escapeEventStream","_destroyPanel","autocomplete","openPanel","_attachOverlay","closePanel","_resetLabel","_closingActionsSubscription","optionSelections","_outsideClickStream","clickTarget","formField","_setTriggerValue","_resetActiveItem","activeOption","prevActiveItem","TAB","_scrollToOption","_handleInput","readOnly","shouldAnimate","optionOffset","newScrollTop","_subscribeToClosingActions","firstStable","optionChanges","_positionStrategy","recalculateLastPosition","panelClosingActions","_setValueAndClose","toDisplay","inputValue","_clearPreviousSelectedOption","getMatAutocompleteMissingPanelError","_getHostWidth","_getConnectedElement","aria-autocomplete","(focusin)","MatAutocompleteModule","DEFAULT_ROUND_BUTTON_COLOR","button","anchor","MatButtonBase","_MatButtonMixinBase","_isRoundButton","_hasHostAttributes","_isIconButton","attributes","_i","attribute","__extends","d","__","constructor","extendStatics","base","class_1","defaultColor","_color","colorPalette","defaultTabIndex","matcher","range","valueFunction","valuesArray","enforceStyleRecalculation","getPropertyValue","distanceToFurthestCorner","rect","distX","distY","sqrt","transformValue","webkitTransform","scrollStrategies","reposition","block","defaultOptions","parentRegistry","httpClient","sanitizer","provider","exp","match","scrollThrottle","parentIntl","sortOrder","setPrototypeOf","__proto__","__assign","assign","s","n","SHARP_CURVE","MATERIAL_SANITY_CHECKS","_sanityChecksEnabled","_hasDoneGlobalChecks","_hasCheckedHammer","_window","_areChecksEnabled","_checkDoctypeIsDefined","_checkThemeIsPresent","_isTestEnv","doctype","testElement","body","computedStyle","_checkHammerIsAvailable","MAT_DATE_LOCALE","MAT_DATE_LOCALE_PROVIDER","LOCALE_ID","_localeChanges","setLocale","locale","second","firstValid","secondValid","SUPPORTS_INTL_API","Intl","DEFAULT_MONTH_NAMES","short","String","DEFAULT_DATE_NAMES","DEFAULT_DAY_OF_WEEK_NAMES","ISO_8601_REGEX","NativeDateAdapter","matDateLocale","useUtcForDisplay","test","navigator","userAgent","getFullYear","getDay","dtf_1","DateTimeFormat","_stripDirectionalityCharacters","Date","dtf_2","day","dtf_3","weekday","dtf","year","_createDateWithOverflow","clone","displayFormat","UTC","getHours","getMinutes","getSeconds","getMilliseconds","timeZone","toDateString","years","months","newDate","days","toIso8601","getUTCFullYear","_2digit","getUTCMonth","getUTCDate","getTime","NaN","setFullYear","MAT_NATIVE_DATE_FORMATS","NativeDateModule","MatNativeDateModule","ShowOnDirtyErrorStateMatcher","dirty","submitted","touched","MAT_HAMMER_OPTIONS","_hammerOptions","commonModule","_hammer","Hammer","events","buildHammer","mc","pan","Pan","swipe","Swipe","press","Press","slide","_createRecognizer","threshold","longpress","time","recognizeWith","inheritances","recognizer","HammerGestureConfig","MatLine","_setLineClass","count","_resetClasses","_setClass","isAdd","RippleRef","_renderer","RippleState","HIDDEN","fadeOutRipple","IGNORE_MOUSE_EVENTS_TIMEOUT","RippleRenderer","_target","_isPointerDown","_triggerEvents","_activeRipples","_eventOptions","supportsPassiveEventListeners","passive","onMousedown","isSyntheticEvent","_lastTouchStartEvent","now","rippleDisabled","fadeInRipple","onTouchStart","touches","onPointerUp","ripple","VISIBLE","_containerElement","containerRect","transitionDuration","rippleRef","FADING_IN","runTimeoutOutsideZone","rippleEl","RIPPLE_FADE_OUT_DURATION","FADING_OUT","fadeOutAll","_triggerElement","_removeTriggerEvents","ngZone","_globalOptions","_rippleRenderer","_setupTriggerEventsIfEnabled","_trigger","[class.mat-ripple-unbounded]","unbounded","[class.mat-pseudo-checkbox-indeterminate]","[class.mat-pseudo-checkbox-checked]","[class.mat-pseudo-checkbox-disabled]","MatPseudoCheckbox","MatOptgroupBase","_MatOptgroupMixinBase","_uniqueOptgroupIdCounter","_labelId","[class.mat-optgroup-disabled]","MatOptionSelectionChange","_parent","_emitSelectionChangeEvent","setActiveStyles","setInactiveStyles","optionsArray","groups","groupCounter","[class.mat-selected]","[class.mat-option-multiple]","[class.mat-active]","[class.mat-option-disabled]"],"mappings":"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"}