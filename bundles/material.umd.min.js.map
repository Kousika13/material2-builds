{"version":3,"file":"material.umd.min.js","sources":["../../src/lib/tabs/tab-header.ts","../../src/lib/tabs/tab-nav-bar/tab-nav-bar.ts","../../src/lib/tabs/tabs-module.ts","../../src/lib/toolbar/toolbar.ts","../../src/lib/toolbar/toolbar-module.ts","../../src/lib/tree/outlet.ts","../../src/lib/tree/node.ts","../../src/lib/tree/padding.ts","../../src/lib/tree/tree.ts","../../src/lib/tree/toggle.ts","../../src/lib/tree/tree-module.ts","../../src/lib/tree/data-source/flat-data-source.ts","../../src/lib/tree/data-source/nested-data-source.ts","../../src/lib/version.ts","../../src/lib/autocomplete/autocomplete-trigger.ts","../../src/lib/core/testing/month-constants.ts","../../src/lib/expansion/expansion-animations.ts","../../src/lib/select/select.ts","../../src/lib/tooltip/tooltip.ts","../../src/lib/stepper/stepper.ts","../../src/lib/stepper/stepper-button.ts","../../src/lib/stepper/stepper-module.ts","../../src/lib/table/table.ts","../../src/lib/table/cell.ts","../../src/lib/table/row.ts","../../src/lib/table/table-module.ts","../../src/lib/table/table-data-source.ts","../../src/lib/tabs/ink-bar.ts","../../src/lib/tabs/tab-label.ts","../../src/lib/tabs/tab-content.ts","../../src/lib/tabs/tab.ts","../../src/lib/tabs/tabs-animations.ts","../../src/lib/tabs/tab-body.ts","../../src/lib/tabs/tab-group.ts","../../src/lib/tabs/tab-label-wrapper.ts","../../src/lib/slider/slider.ts","../../src/lib/slider/slider-module.ts","../../src/lib/snack-bar/snack-bar-ref.ts","../../src/lib/snack-bar/snack-bar-config.ts","../../src/lib/snack-bar/snack-bar-animations.ts","../../src/lib/snack-bar/simple-snack-bar.ts","../../src/lib/snack-bar/snack-bar-container.ts","../../src/lib/snack-bar/snack-bar.ts","../../src/lib/snack-bar/snack-bar-module.ts","../../src/lib/sort/sort.ts","../../src/lib/sort/sort-header-intl.ts","../../src/lib/sort/sort-animations.ts","../../src/lib/sort/sort-header.ts","../../src/lib/sort/sort-module.ts","../../src/lib/stepper/step-label.ts","../../src/lib/stepper/stepper-intl.ts","../../src/lib/stepper/step-header.ts","../../src/lib/stepper/stepper-animations.ts","../../src/lib/stepper/stepper-icon.ts","../../src/lib/sidenav/sidenav.ts","../../src/lib/sidenav/sidenav-module.ts","../../src/lib/slide-toggle/slide-toggle.ts","../../src/lib/slide-toggle/slide-toggle-module.ts","../../src/lib/progress-spinner/progress-spinner.ts","../../src/lib/progress-spinner/progress-spinner-module.ts","../../src/lib/radio/radio.ts","../../src/lib/radio/radio-module.ts","../../src/lib/sidenav/drawer-animations.ts","../../src/lib/sidenav/drawer.ts","../../src/lib/select/select-module.ts","../../src/lib/tooltip/tooltip-animations.ts","../../src/lib/tooltip/tooltip-module.ts","../../src/lib/paginator/paginator-intl.ts","../../src/lib/paginator/paginator.ts","../../src/lib/paginator/paginator-module.ts","../../src/lib/progress-bar/progress-bar.ts","../../src/lib/progress-bar/progress-bar-module.ts","../../src/lib/menu/menu-directive.ts","../../src/lib/menu/menu-trigger.ts","../../src/lib/menu/menu-module.ts","../../src/lib/select/select-animations.ts","../../src/lib/list/selection-list.ts","../../src/lib/list/list-module.ts","../../src/lib/menu/menu-animations.ts","../../src/lib/menu/menu-item.ts","../../src/lib/menu/menu-content.ts","../../src/lib/list/list.ts","../../src/lib/icon/icon-registry.ts","../../src/lib/icon/icon.ts","../../src/lib/icon/icon-module.ts","../../src/lib/datepicker/datepicker-input.ts","../../src/lib/datepicker/datepicker-toggle.ts","../../src/lib/datepicker/datepicker-module.ts","../../src/lib/divider/divider.ts","../../src/lib/divider/divider-module.ts","../../src/lib/expansion/accordion.ts","../../src/lib/expansion/expansion-panel-content.ts","../../src/lib/expansion/expansion-panel.ts","../../src/lib/expansion/expansion-panel-header.ts","../../src/lib/expansion/expansion-module.ts","../../src/lib/grid-list/grid-tile.ts","../../src/lib/grid-list/tile-coordinator.ts","../../src/lib/grid-list/tile-styler.ts","../../src/lib/grid-list/grid-list.ts","../../src/lib/grid-list/grid-list-module.ts","../../src/lib/datepicker/multi-year-view.ts","../../src/lib/datepicker/year-view.ts","../../src/lib/datepicker/calendar.ts","../../src/lib/datepicker/datepicker-animations.ts","../../src/lib/datepicker/datepicker.ts","../../src/lib/dialog/dialog-container.ts","../../src/lib/dialog/dialog-ref.ts","../../src/lib/dialog/dialog.ts","../../src/lib/dialog/dialog-content-directives.ts","../../src/lib/dialog/dialog-module.ts","../../src/lib/input/autosize.ts","../../src/lib/input/input-value-accessor.ts","../../src/lib/input/input.ts","../../src/lib/input/input-module.ts","../../src/lib/datepicker/datepicker-intl.ts","../../src/lib/datepicker/calendar-body.ts","../../src/lib/datepicker/month-view.ts","../../src/lib/checkbox/checkbox.ts","../../src/lib/checkbox/checkbox-required-validator.ts","../../src/lib/checkbox/checkbox-module.ts","../../src/lib/chips/chip.ts","../../src/lib/chips/chip-list.ts","../../src/lib/chips/chip-input.ts","../../src/lib/chips/chips-module.ts","../../src/lib/dialog/dialog-config.ts","../../src/lib/dialog/dialog-animations.ts","../../src/lib/button/button.ts","../../src/lib/button/button-module.ts","../../src/lib/button-toggle/button-toggle.ts","../../src/lib/button-toggle/button-toggle-module.ts","../../src/lib/card/card.ts","../../src/lib/card/card-module.ts","../../src/lib/checkbox/checkbox-config.ts","../../src/lib/autocomplete/autocomplete-module.ts","../../src/lib/badge/badge.ts","../../src/lib/badge/badge-module.ts","../../src/lib/bottom-sheet/bottom-sheet-animations.ts","../../src/lib/bottom-sheet/bottom-sheet-container.ts","../../src/lib/bottom-sheet/bottom-sheet-config.ts","../../src/lib/bottom-sheet/bottom-sheet-ref.ts","../../src/lib/bottom-sheet/bottom-sheet.ts","../../src/lib/bottom-sheet/bottom-sheet-module.ts","../../src/lib/core/option/option.ts","../../src/lib/core/option/index.ts","../../src/lib/core/label/label-options.ts","../../src/lib/form-field/error.ts","../../src/lib/form-field/form-field-animations.ts","../../src/lib/form-field/form-field-control.ts","../../src/lib/form-field/hint.ts","../../src/lib/form-field/label.ts","../../src/lib/form-field/placeholder.ts","../../src/lib/form-field/prefix.ts","../../src/lib/form-field/suffix.ts","../../src/lib/form-field/form-field.ts","../../src/lib/form-field/form-field-module.ts","../../src/lib/autocomplete/autocomplete.ts","../../node_modules/tslib/tslib.es6.js","../../src/lib/core/common-behaviors/disabled.ts","../../src/lib/core/common-behaviors/color.ts","../../src/lib/core/common-behaviors/disable-ripple.ts","../../src/lib/core/common-behaviors/tabindex.ts","../../src/lib/core/common-behaviors/error-state.ts","../../src/lib/core/common-behaviors/initialized.ts","../../src/lib/core/datetime/native-date-adapter.ts","../../src/lib/core/ripple/ripple-renderer.ts","../../src/lib/form-field/form-field-errors.ts","../../src/lib/input/input-errors.ts","../../src/lib/datepicker/datepicker-errors.ts","../../src/lib/grid-list/grid-list-measure.ts","../../src/lib/menu/menu-errors.ts","../../src/lib/select/select-errors.ts","../../src/lib/sort/sort-errors.ts","../../src/lib/core/animation/animation.ts","../../src/lib/core/common-behaviors/common-module.ts","../../src/lib/core/datetime/date-adapter.ts","../../src/lib/core/datetime/date-formats.ts","../../src/lib/core/datetime/native-date-formats.ts","../../src/lib/core/datetime/index.ts","../../src/lib/core/error/error-options.ts","../../src/lib/core/gestures/gesture-config.ts","../../src/lib/core/line/line.ts","../../src/lib/core/ripple/ripple-ref.ts","../../src/lib/core/ripple/ripple.ts","../../src/lib/core/ripple/index.ts","../../src/lib/core/selection/pseudo-checkbox/pseudo-checkbox.ts","../../src/lib/core/selection/index.ts","../../src/lib/core/option/optgroup.ts"],"sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Direction, Directionality} from '@angular/cdk/bidi';\nimport {ENTER, LEFT_ARROW, RIGHT_ARROW, SPACE, HOME, END} from '@angular/cdk/keycodes';\nimport {\n  AfterContentChecked,\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  ElementRef,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  Optional,\n  Output,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {CanDisableRipple, mixinDisableRipple} from '@angular/material/core';\nimport {merge} from 'rxjs/observable/merge';\nimport {of as observableOf} from 'rxjs/observable/of';\nimport {Subscription} from 'rxjs/Subscription';\nimport {coerceNumberProperty} from '@angular/cdk/coercion';\nimport {MatInkBar} from './ink-bar';\nimport {MatTabLabelWrapper} from './tab-label-wrapper';\nimport {ViewportRuler} from '@angular/cdk/scrolling';\n\n\n/**\n * The directions that scrolling can go in when the header's tabs exceed the header width. 'After'\n * will scroll the header towards the end of the tabs list and 'before' will scroll towards the\n * beginning of the list.\n */\nexport type ScrollDirection = 'after' | 'before';\n\n/**\n * The distance in pixels that will be overshot when scrolling a tab label into view. This helps\n * provide a small affordance to the label next to it.\n */\nconst EXAGGERATED_OVERSCROLL = 60;\n\n// Boilerplate for applying mixins to MatTabHeader.\n/** @docs-private */\nexport class MatTabHeaderBase {}\nexport const _MatTabHeaderMixinBase = mixinDisableRipple(MatTabHeaderBase);\n\n/**\n * The header of the tab group which displays a list of all the tabs in the tab group. Includes\n * an ink bar that follows the currently selected tab. When the tabs list's width exceeds the\n * width of the header container, then arrows will be displayed to allow the user to scroll\n * left and right across the header.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-tab-header',\n  templateUrl: 'tab-header.html',\n  styleUrls: ['tab-header.css'],\n  inputs: ['disableRipple'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {\n    'class': 'mat-tab-header',\n    '[class.mat-tab-header-pagination-controls-enabled]': '_showPaginationControls',\n    '[class.mat-tab-header-rtl]': \"_getLayoutDirection() == 'rtl'\",\n  },\n})\nexport class MatTabHeader extends _MatTabHeaderMixinBase\n    implements AfterContentChecked, AfterContentInit, OnDestroy, CanDisableRipple {\n\n  @ContentChildren(MatTabLabelWrapper) _labelWrappers: QueryList<MatTabLabelWrapper>;\n  @ViewChild(MatInkBar) _inkBar: MatInkBar;\n  @ViewChild('tabListContainer') _tabListContainer: ElementRef;\n  @ViewChild('tabList') _tabList: ElementRef;\n\n  /** The tab index that is focused. */\n  private _focusIndex: number = 0;\n\n  /** The distance in pixels that the tab labels should be translated to the left. */\n  private _scrollDistance = 0;\n\n  /** Whether the header should scroll to the selected index after the view has been checked. */\n  private _selectedIndexChanged = false;\n\n  /** Combines listeners that will re-align the ink bar whenever they're invoked. */\n  private _realignInkBar = Subscription.EMPTY;\n\n  /** Whether the controls for pagination should be displayed */\n  _showPaginationControls = false;\n\n  /** Whether the tab list can be scrolled more towards the end of the tab label list. */\n  _disableScrollAfter = true;\n\n  /** Whether the tab list can be scrolled more towards the beginning of the tab label list. */\n  _disableScrollBefore = true;\n\n  /**\n   * The number of tab labels that are displayed on the header. When this changes, the header\n   * should re-evaluate the scroll position.\n   */\n  private _tabLabelCount: number;\n\n  /** Whether the scroll distance has changed and should be applied after the view is checked. */\n  private _scrollDistanceChanged: boolean;\n\n  private _selectedIndex: number = 0;\n\n  /** The index of the active tab. */\n  @Input()\n  get selectedIndex(): number { return this._selectedIndex; }\n  set selectedIndex(value: number) {\n    value = coerceNumberProperty(value);\n    this._selectedIndexChanged = this._selectedIndex != value;\n    this._selectedIndex = value;\n    this._focusIndex = value;\n  }\n\n  /** Event emitted when the option is selected. */\n  @Output() readonly selectFocusedIndex = new EventEmitter();\n\n  /** Event emitted when a label is focused. */\n  @Output() readonly indexFocused = new EventEmitter();\n\n  constructor(private _elementRef: ElementRef,\n              private _changeDetectorRef: ChangeDetectorRef,\n              private _viewportRuler: ViewportRuler,\n              @Optional() private _dir: Directionality) {\n    super();\n  }\n\n  ngAfterContentChecked(): void {\n    // If the number of tab labels have changed, check if scrolling should be enabled\n    if (this._tabLabelCount != this._labelWrappers.length) {\n      this._updatePagination();\n      this._tabLabelCount = this._labelWrappers.length;\n      this._changeDetectorRef.markForCheck();\n    }\n\n    // If the selected index has changed, scroll to the label and check if the scrolling controls\n    // should be disabled.\n    if (this._selectedIndexChanged) {\n      this._scrollToLabel(this._selectedIndex);\n      this._checkScrollingControls();\n      this._alignInkBarToSelectedTab();\n      this._selectedIndexChanged = false;\n      this._changeDetectorRef.markForCheck();\n    }\n\n    // If the scroll distance has been changed (tab selected, focused, scroll controls activated),\n    // then translate the header to reflect this.\n    if (this._scrollDistanceChanged) {\n      this._updateTabScrollPosition();\n      this._scrollDistanceChanged = false;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  _handleKeydown(event: KeyboardEvent) {\n    switch (event.keyCode) {\n      case RIGHT_ARROW:\n        this._focusNextTab();\n        break;\n      case LEFT_ARROW:\n        this._focusPreviousTab();\n        break;\n      case HOME:\n        this._focusFirstTab();\n        event.preventDefault();\n        break;\n      case END:\n        this._focusLastTab();\n        event.preventDefault();\n        break;\n      case ENTER:\n      case SPACE:\n        this.selectFocusedIndex.emit(this.focusIndex);\n        event.preventDefault();\n        break;\n    }\n  }\n\n  /**\n   * Aligns the ink bar to the selected tab on load.\n   */\n  ngAfterContentInit() {\n    const dirChange = this._dir ? this._dir.change : observableOf(null);\n    const resize = this._viewportRuler.change(150);\n    const realign = () => {\n      this._updatePagination();\n      this._alignInkBarToSelectedTab();\n    };\n\n    // Defer the first call in order to allow for slower browsers to lay out the elements.\n    // This helps in cases where the user lands directly on a page with paginated tabs.\n    typeof requestAnimationFrame !== 'undefined' ? requestAnimationFrame(realign) : realign();\n    this._realignInkBar = merge(dirChange, resize).subscribe(realign);\n  }\n\n  ngOnDestroy() {\n    this._realignInkBar.unsubscribe();\n  }\n\n  /**\n   * Callback for when the MutationObserver detects that the content has changed.\n   */\n  _onContentChanges() {\n    this._updatePagination();\n    this._alignInkBarToSelectedTab();\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /**\n   * Updating the view whether pagination should be enabled or not\n   */\n  _updatePagination() {\n    this._checkPaginationEnabled();\n    this._checkScrollingControls();\n    this._updateTabScrollPosition();\n  }\n\n  /** When the focus index is set, we must manually send focus to the correct label */\n  set focusIndex(value: number) {\n    if (!this._isValidIndex(value) || this._focusIndex == value) { return; }\n\n    this._focusIndex = value;\n    this.indexFocused.emit(value);\n    this._setTabFocus(value);\n  }\n\n  /** Tracks which element has focus; used for keyboard navigation */\n  get focusIndex(): number { return this._focusIndex; }\n\n  /**\n   * Determines if an index is valid.  If the tabs are not ready yet, we assume that the user is\n   * providing a valid index and return true.\n   */\n  _isValidIndex(index: number): boolean {\n    if (!this._labelWrappers) { return true; }\n\n    const tab = this._labelWrappers ? this._labelWrappers.toArray()[index] : null;\n    return !!tab && !tab.disabled;\n  }\n\n  /**\n   * Sets focus on the HTML element for the label wrapper and scrolls it into the view if\n   * scrolling is enabled.\n   */\n  _setTabFocus(tabIndex: number) {\n    if (this._showPaginationControls) {\n      this._scrollToLabel(tabIndex);\n    }\n\n    if (this._labelWrappers && this._labelWrappers.length) {\n      this._labelWrappers.toArray()[tabIndex].focus();\n\n      // Do not let the browser manage scrolling to focus the element, this will be handled\n      // by using translation. In LTR, the scroll left should be 0. In RTL, the scroll width\n      // should be the full width minus the offset width.\n      const containerEl = this._tabListContainer.nativeElement;\n      const dir = this._getLayoutDirection();\n\n      if (dir == 'ltr') {\n        containerEl.scrollLeft = 0;\n      } else {\n        containerEl.scrollLeft = containerEl.scrollWidth - containerEl.offsetWidth;\n      }\n    }\n  }\n\n  /**\n   * Moves the focus towards the beginning or the end of the list depending on the offset provided.\n   * Valid offsets are 1 and -1.\n   */\n  _moveFocus(offset: number) {\n    if (this._labelWrappers) {\n      const tabs: MatTabLabelWrapper[] = this._labelWrappers.toArray();\n\n      for (let i = this.focusIndex + offset; i < tabs.length && i >= 0; i += offset) {\n        if (this._isValidIndex(i)) {\n          this.focusIndex = i;\n          return;\n        }\n      }\n    }\n  }\n\n  /** Increment the focus index by 1 until a valid tab is found. */\n  _focusNextTab(): void {\n    this._moveFocus(this._getLayoutDirection() == 'ltr' ? 1 : -1);\n  }\n\n  /** Decrement the focus index by 1 until a valid tab is found. */\n  _focusPreviousTab(): void {\n    this._moveFocus(this._getLayoutDirection() == 'ltr' ? -1 : 1);\n  }\n\n  /** Focuses the first tab. */\n  private _focusFirstTab(): void {\n    for (let i = 0; i < this._labelWrappers.length; i++) {\n      if (this._isValidIndex(i)) {\n        this.focusIndex = i;\n        break;\n      }\n    }\n  }\n\n  /** Focuses the last tab. */\n  private _focusLastTab(): void {\n    for (let i = this._labelWrappers.length - 1; i > -1; i--) {\n      if (this._isValidIndex(i)) {\n        this.focusIndex = i;\n        break;\n      }\n    }\n  }\n\n  /** The layout direction of the containing app. */\n  _getLayoutDirection(): Direction {\n    return this._dir && this._dir.value === 'rtl' ? 'rtl' : 'ltr';\n  }\n\n  /** Performs the CSS transformation on the tab list that will cause the list to scroll. */\n  _updateTabScrollPosition() {\n    const scrollDistance = this.scrollDistance;\n    const translateX = this._getLayoutDirection() === 'ltr' ? -scrollDistance : scrollDistance;\n\n    this._tabList.nativeElement.style.transform = `translate3d(${translateX}px, 0, 0)`;\n  }\n\n  /** Sets the distance in pixels that the tab header should be transformed in the X-axis. */\n  get scrollDistance(): number { return this._scrollDistance; }\n  set scrollDistance(v: number) {\n    this._scrollDistance = Math.max(0, Math.min(this._getMaxScrollDistance(), v));\n\n    // Mark that the scroll distance has changed so that after the view is checked, the CSS\n    // transformation can move the header.\n    this._scrollDistanceChanged = true;\n    this._checkScrollingControls();\n  }\n\n  /**\n   * Moves the tab list in the 'before' or 'after' direction (towards the beginning of the list or\n   * the end of the list, respectively). The distance to scroll is computed to be a third of the\n   * length of the tab list view window.\n   *\n   * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n   * should be called sparingly.\n   */\n  _scrollHeader(scrollDir: ScrollDirection) {\n    const viewLength = this._tabListContainer.nativeElement.offsetWidth;\n\n    // Move the scroll distance one-third the length of the tab list's viewport.\n    this.scrollDistance += (scrollDir == 'before' ? -1 : 1) * viewLength / 3;\n  }\n\n  /**\n   * Moves the tab list such that the desired tab label (marked by index) is moved into view.\n   *\n   * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n   * should be called sparingly.\n   */\n  _scrollToLabel(labelIndex: number) {\n    const selectedLabel = this._labelWrappers ? this._labelWrappers.toArray()[labelIndex] : null;\n\n    if (!selectedLabel) { return; }\n\n    // The view length is the visible width of the tab labels.\n    const viewLength = this._tabListContainer.nativeElement.offsetWidth;\n\n    let labelBeforePos: number, labelAfterPos: number;\n    if (this._getLayoutDirection() == 'ltr') {\n      labelBeforePos = selectedLabel.getOffsetLeft();\n      labelAfterPos = labelBeforePos + selectedLabel.getOffsetWidth();\n    } else {\n      labelAfterPos = this._tabList.nativeElement.offsetWidth - selectedLabel.getOffsetLeft();\n      labelBeforePos = labelAfterPos - selectedLabel.getOffsetWidth();\n    }\n\n    const beforeVisiblePos = this.scrollDistance;\n    const afterVisiblePos = this.scrollDistance + viewLength;\n\n    if (labelBeforePos < beforeVisiblePos) {\n      // Scroll header to move label to the before direction\n      this.scrollDistance -= beforeVisiblePos - labelBeforePos + EXAGGERATED_OVERSCROLL;\n    } else if (labelAfterPos > afterVisiblePos) {\n      // Scroll header to move label to the after direction\n      this.scrollDistance += labelAfterPos - afterVisiblePos + EXAGGERATED_OVERSCROLL;\n    }\n  }\n\n  /**\n   * Evaluate whether the pagination controls should be displayed. If the scroll width of the\n   * tab list is wider than the size of the header container, then the pagination controls should\n   * be shown.\n   *\n   * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n   * should be called sparingly.\n   */\n  _checkPaginationEnabled() {\n    const isEnabled =\n        this._tabList.nativeElement.scrollWidth > this._elementRef.nativeElement.offsetWidth;\n\n    if (!isEnabled) {\n      this.scrollDistance = 0;\n    }\n\n    if (isEnabled !== this._showPaginationControls) {\n      this._changeDetectorRef.markForCheck();\n    }\n\n    this._showPaginationControls = isEnabled;\n  }\n\n  /**\n   * Evaluate whether the before and after controls should be enabled or disabled.\n   * If the header is at the beginning of the list (scroll distance is equal to 0) then disable the\n   * before button. If the header is at the end of the list (scroll distance is equal to the\n   * maximum distance we can scroll), then disable the after button.\n   *\n   * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n   * should be called sparingly.\n   */\n  _checkScrollingControls() {\n    // Check if the pagination arrows should be activated.\n    this._disableScrollBefore = this.scrollDistance == 0;\n    this._disableScrollAfter = this.scrollDistance == this._getMaxScrollDistance();\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /**\n   * Determines what is the maximum length in pixels that can be set for the scroll distance. This\n   * is equal to the difference in width between the tab list container and tab header container.\n   *\n   * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n   * should be called sparingly.\n   */\n  _getMaxScrollDistance(): number {\n    const lengthOfTabList = this._tabList.nativeElement.scrollWidth;\n    const viewLength = this._tabListContainer.nativeElement.offsetWidth;\n    return (lengthOfTabList - viewLength) || 0;\n  }\n\n  /** Tells the ink-bar to align itself to the current label wrapper */\n  private _alignInkBarToSelectedTab(): void {\n    const selectedLabelWrapper = this._labelWrappers && this._labelWrappers.length ?\n        this._labelWrappers.toArray()[this.selectedIndex].elementRef.nativeElement :\n        null;\n\n    this._inkBar.alignToElement(selectedLabelWrapper);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {Platform} from '@angular/cdk/platform';\nimport {ViewportRuler} from '@angular/cdk/scrolling';\nimport {\n  AfterContentInit,\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  forwardRef,\n  Inject,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {\n  CanColor,\n  CanDisable,\n  CanDisableRipple,\n  HasTabIndex,\n  MAT_RIPPLE_GLOBAL_OPTIONS,\n  mixinColor,\n  mixinDisabled,\n  mixinDisableRipple,\n  mixinTabIndex, RippleConfig,\n  RippleGlobalOptions,\n  RippleRenderer,\n  RippleTarget,\n  ThemePalette,\n} from '@angular/material/core';\nimport {merge} from 'rxjs/observable/merge';\nimport {of as observableOf} from 'rxjs/observable/of';\nimport {takeUntil} from 'rxjs/operators/takeUntil';\nimport {Subject} from 'rxjs/Subject';\nimport {MatInkBar} from '../ink-bar';\n\n\n// Boilerplate for applying mixins to MatTabNav.\n/** @docs-private */\nexport class MatTabNavBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatTabNavMixinBase = mixinColor(MatTabNavBase, 'primary');\n\n/**\n * Navigation component matching the styles of the tab group header.\n * Provides anchored navigation with animated ink bar.\n */\n@Component({\n  moduleId: module.id,\n  selector: '[mat-tab-nav-bar]',\n  exportAs: 'matTabNavBar, matTabNav',\n  inputs: ['color'],\n  templateUrl: 'tab-nav-bar.html',\n  styleUrls: ['tab-nav-bar.css'],\n  host: {'class': 'mat-tab-nav-bar'},\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatTabNav extends _MatTabNavMixinBase implements AfterContentInit, CanColor,\n    OnDestroy {\n\n  /** Subject that emits when the component has been destroyed. */\n  private readonly _onDestroy = new Subject<void>();\n\n  _activeLinkChanged: boolean;\n  _activeLinkElement: ElementRef;\n\n  @ViewChild(MatInkBar) _inkBar: MatInkBar;\n\n  /** Query list of all tab links of the tab navigation. */\n  @ContentChildren(forwardRef(() => MatTabLink), {descendants: true})\n  _tabLinks: QueryList<MatTabLink>;\n\n  /** Background color of the tab nav. */\n  @Input()\n  get backgroundColor(): ThemePalette { return this._backgroundColor; }\n  set backgroundColor(value: ThemePalette) {\n    const nativeElement: HTMLElement = this._elementRef.nativeElement;\n\n    nativeElement.classList.remove(`mat-background-${this.backgroundColor}`);\n\n    if (value) {\n      nativeElement.classList.add(`mat-background-${value}`);\n    }\n\n    this._backgroundColor = value;\n  }\n  private _backgroundColor: ThemePalette;\n\n  /** Whether ripples should be disabled for all links or not. */\n  @Input()\n  get disableRipple() { return this._disableRipple; }\n  set disableRipple(value: boolean) {\n    this._disableRipple = coerceBooleanProperty(value);\n    this._setLinkDisableRipple();\n  }\n  private _disableRipple: boolean = false;\n\n  constructor(elementRef: ElementRef,\n              @Optional() private _dir: Directionality,\n              private _ngZone: NgZone,\n              private _changeDetectorRef: ChangeDetectorRef,\n              private _viewportRuler: ViewportRuler) {\n    super(elementRef);\n  }\n\n  /** Notifies the component that the active link has been changed. */\n  updateActiveLink(element: ElementRef) {\n    this._activeLinkChanged = this._activeLinkElement != element;\n    this._activeLinkElement = element;\n\n    if (this._activeLinkChanged) {\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  ngAfterContentInit(): void {\n    this._ngZone.runOutsideAngular(() => {\n      const dirChange = this._dir ? this._dir.change : observableOf(null);\n\n      return merge(dirChange, this._viewportRuler.change(10)).pipe(takeUntil(this._onDestroy))\n          .subscribe(() => this._alignInkBar());\n    });\n\n    this._setLinkDisableRipple();\n  }\n\n  /** Checks if the active link has been changed and, if so, will update the ink bar. */\n  ngAfterContentChecked(): void {\n    if (this._activeLinkChanged) {\n      this._alignInkBar();\n      this._activeLinkChanged = false;\n    }\n  }\n\n  ngOnDestroy() {\n    this._onDestroy.next();\n    this._onDestroy.complete();\n  }\n\n  /** Aligns the ink bar to the active link. */\n  _alignInkBar(): void {\n    if (this._activeLinkElement) {\n      this._inkBar.alignToElement(this._activeLinkElement.nativeElement);\n    }\n  }\n\n  /** Sets the `disableRipple` property on each link of the navigation bar. */\n  private _setLinkDisableRipple() {\n    if (this._tabLinks) {\n      this._tabLinks.forEach(link => link.disableRipple = this.disableRipple);\n    }\n  }\n}\n\n\n// Boilerplate for applying mixins to MatTabLink.\nexport class MatTabLinkBase {}\nexport const _MatTabLinkMixinBase =\n  mixinTabIndex(mixinDisableRipple(mixinDisabled(MatTabLinkBase)));\n\n/**\n * Link inside of a `mat-tab-nav-bar`.\n */\n@Directive({\n  selector: '[mat-tab-link], [matTabLink]',\n  exportAs: 'matTabLink',\n  inputs: ['disabled', 'disableRipple', 'tabIndex'],\n  host: {\n    'class': 'mat-tab-link',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.tabIndex]': 'tabIndex',\n    '[class.mat-tab-disabled]': 'disabled',\n    '[class.mat-tab-label-active]': 'active',\n    '(click)': '_handleClick($event)'\n  }\n})\nexport class MatTabLink extends _MatTabLinkMixinBase\n    implements OnDestroy, CanDisable, CanDisableRipple, HasTabIndex, RippleTarget {\n\n  /** Whether the tab link is active or not. */\n  private _isActive: boolean = false;\n\n  /** Reference to the RippleRenderer for the tab-link. */\n  private _tabLinkRipple: RippleRenderer;\n\n  /** Whether the link is active. */\n  @Input()\n  get active(): boolean { return this._isActive; }\n  set active(value: boolean) {\n    this._isActive = value;\n    if (value) {\n      this._tabNavBar.updateActiveLink(this._elementRef);\n    }\n  }\n\n  /**\n   * Ripple configuration for ripples that are launched on pointer down.\n   * @docs-private\n   */\n  rippleConfig: RippleConfig = {};\n\n  /**\n   * Whether ripples are disabled on interaction\n   * @docs-private\n   */\n  get rippleDisabled(): boolean {\n    return this.disabled || this.disableRipple;\n  }\n\n  constructor(private _tabNavBar: MatTabNav,\n              private _elementRef: ElementRef,\n              ngZone: NgZone,\n              platform: Platform,\n              @Optional() @Inject(MAT_RIPPLE_GLOBAL_OPTIONS) globalOptions: RippleGlobalOptions,\n              @Attribute('tabindex') tabIndex: string) {\n    super();\n\n    this._tabLinkRipple = new RippleRenderer(this, ngZone, _elementRef, platform);\n    this._tabLinkRipple.setupTriggerEvents(_elementRef.nativeElement);\n\n    this.tabIndex = parseInt(tabIndex) || 0;\n\n    if (globalOptions) {\n      this.rippleConfig = {\n        terminateOnPointerUp: globalOptions.terminateOnPointerUp,\n        speedFactor: globalOptions.baseSpeedFactor,\n        animation: globalOptions.animation,\n      };\n    }\n  }\n\n  ngOnDestroy() {\n    this._tabLinkRipple._removeTriggerEvents();\n  }\n\n  /**\n   * Handles the click event, preventing default navigation if the tab link is disabled.\n   */\n  _handleClick(event: MouseEvent) {\n    if (this.disabled) {\n      event.preventDefault();\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ObserversModule} from '@angular/cdk/observers';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {ScrollDispatchModule, VIEWPORT_RULER_PROVIDER} from '@angular/cdk/scrolling';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {MatInkBar} from './ink-bar';\nimport {MatTab} from './tab';\nimport {MatTabBody, MatTabBodyPortal} from './tab-body';\nimport {MatTabGroup} from './tab-group';\nimport {MatTabHeader} from './tab-header';\nimport {MatTabLabel} from './tab-label';\nimport {MatTabLabelWrapper} from './tab-label-wrapper';\nimport {MatTabLink, MatTabNav} from './tab-nav-bar/tab-nav-bar';\nimport {MatTabContent} from './tab-content';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatCommonModule,\n    PortalModule,\n    MatRippleModule,\n    ObserversModule,\n    ScrollDispatchModule,\n  ],\n  // Don't export all components because some are only to be used internally.\n  exports: [\n    MatCommonModule,\n    MatTabGroup,\n    MatTabLabel,\n    MatTab,\n    MatTabNav,\n    MatTabLink,\n    MatTabContent,\n  ],\n  declarations: [\n    MatTabGroup,\n    MatTabLabel,\n    MatTab,\n    MatInkBar,\n    MatTabLabelWrapper,\n    MatTabNav,\n    MatTabLink,\n    MatTabBody,\n    MatTabBodyPortal,\n    MatTabHeader,\n    MatTabContent,\n  ],\n  providers: [VIEWPORT_RULER_PROVIDER],\n})\nexport class MatTabsModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  AfterViewInit,\n  ChangeDetectionStrategy,\n  Component,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  isDevMode,\n  QueryList,\n  ViewEncapsulation,\n  Inject,\n} from '@angular/core';\nimport {CanColor, mixinColor} from '@angular/material/core';\nimport {Platform} from '@angular/cdk/platform';\nimport {DOCUMENT} from '@angular/common';\n\n// Boilerplate for applying mixins to MatToolbar.\n/** @docs-private */\nexport class MatToolbarBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatToolbarMixinBase = mixinColor(MatToolbarBase);\n\n@Directive({\n  selector: 'mat-toolbar-row',\n  exportAs: 'matToolbarRow',\n  host: {'class': 'mat-toolbar-row'},\n})\nexport class MatToolbarRow {}\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-toolbar',\n  exportAs: 'matToolbar',\n  templateUrl: 'toolbar.html',\n  styleUrls: ['toolbar.css'],\n  inputs: ['color'],\n  host: {\n    'class': 'mat-toolbar',\n    '[class.mat-toolbar-multiple-rows]': 'this._toolbarRows.length',\n    '[class.mat-toolbar-single-row]': '!this._toolbarRows.length'\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatToolbar extends _MatToolbarMixinBase implements CanColor, AfterViewInit {\n  private _document: Document;\n\n  /** Reference to all toolbar row elements that have been projected. */\n  @ContentChildren(MatToolbarRow) _toolbarRows: QueryList<MatToolbarRow>;\n\n  constructor(\n    elementRef: ElementRef,\n    private _platform: Platform,\n    @Inject(DOCUMENT) document?: any) {\n    super(elementRef);\n\n    // TODO: make the document a required param when doing breaking changes.\n    this._document = document;\n  }\n\n  ngAfterViewInit() {\n    if (!isDevMode() || !this._platform.isBrowser) {\n      return;\n    }\n\n    this._checkToolbarMixedModes();\n    this._toolbarRows.changes.subscribe(() => this._checkToolbarMixedModes());\n  }\n\n  /**\n   * Throws an exception when developers are attempting to combine the different toolbar row modes.\n   */\n  private _checkToolbarMixedModes() {\n    if (!this._toolbarRows.length) {\n      return;\n    }\n\n    // Check if there are any other DOM nodes that can display content but aren't inside of\n    // a <mat-toolbar-row> element.\n    const isCombinedUsage = [].slice.call(this._elementRef.nativeElement.childNodes)\n      .filter(node => !(node.classList && node.classList.contains('mat-toolbar-row')))\n      .filter(node => node.nodeType !== (this._document ? this._document.COMMENT_NODE : 8))\n      .some(node => node.textContent.trim());\n\n    if (isCombinedUsage) {\n      throwToolbarMixedModesError();\n    }\n  }\n}\n\n/**\n * Throws an exception when attempting to combine the different toolbar row modes.\n * @docs-private\n */\nexport function throwToolbarMixedModesError() {\n  throw Error('MatToolbar: Attempting to combine different toolbar modes. ' +\n    'Either specify multiple `<mat-toolbar-row>` elements explicitly or just place content ' +\n    'inside of a `<mat-toolbar>` for a single row.');\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {PlatformModule} from '@angular/cdk/platform';\nimport {MatToolbar, MatToolbarRow} from './toolbar';\n\n@NgModule({\n  imports: [MatCommonModule, PlatformModule],\n  exports: [MatToolbar, MatToolbarRow, MatCommonModule],\n  declarations: [MatToolbar, MatToolbarRow],\n})\nexport class MatToolbarModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {CdkTreeNodeOutlet} from '@angular/cdk/tree';\nimport {\n  Directive,\n  ViewContainerRef,\n} from '@angular/core';\n\n/**\n * Outlet for nested CdkNode. Put `[matTreeNodeOutlet]` on a tag to place children dataNodes\n * inside the outlet.\n */\n@Directive({\n  selector: '[matTreeNodeOutlet]'\n})\nexport class MatTreeNodeOutlet implements CdkTreeNodeOutlet {\n  constructor(public viewContainer: ViewContainerRef) {}\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Attribute,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  Input,\n  QueryList\n} from '@angular/core';\nimport {\n  CdkNestedTreeNode,\n  CdkTree,\n  CdkTreeNodeDef,\n  CdkTreeNode,\n} from '@angular/cdk/tree';\nimport {MatTreeNodeOutlet} from './outlet';\nimport {mixinTabIndex, mixinDisabled, CanDisable, HasTabIndex} from '@angular/material/core';\n\n\nexport const _MatTreeNodeMixinBase = mixinTabIndex(mixinDisabled(CdkTreeNode));\nexport const _MatNestedTreeNodeMixinBase = mixinTabIndex(mixinDisabled(CdkNestedTreeNode));\n\n/**\n * Wrapper for the CdkTree node with Material design styles.\n */\n@Directive({\n  selector: 'mat-tree-node',\n  exportAs: 'matTreeNode',\n  inputs: ['disabled', 'tabIndex'],\n  host: {\n    '[attr.aria-expanded]': 'isExpanded',\n    '[attr.aria-level]': 'level',\n    '[attr.role]': 'role',\n    'class': 'mat-tree-node'\n  },\n  providers: [{provide: CdkTreeNode, useExisting: MatTreeNode}]\n})\nexport class MatTreeNode<T> extends _MatTreeNodeMixinBase<T> implements HasTabIndex, CanDisable {\n  @Input() role: 'treeitem' | 'group' = 'treeitem';\n\n  constructor(protected _elementRef: ElementRef,\n              protected _tree: CdkTree<T>,\n              @Attribute('tabindex') tabIndex: string) {\n    super(_elementRef, _tree);\n\n    this.tabIndex = Number(tabIndex) || 0;\n  }\n}\n\n/**\n * Wrapper for the CdkTree node definition with Material design styles.\n */\n@Directive({\n  selector: '[matTreeNodeDef]',\n  inputs: [\n    'when: matTreeNodeDefWhen'\n  ],\n  providers: [{provide: CdkTreeNodeDef, useExisting: MatTreeNodeDef}]\n})\nexport class MatTreeNodeDef<T> extends CdkTreeNodeDef<T> {\n  @Input('matTreeNode') data: T;\n}\n\n/**\n * Wrapper for the CdkTree nested node with Material design styles.\n */\n@Directive({\n  selector: 'mat-nested-tree-node',\n  exportAs: 'matNestedTreeNode',\n  host: {\n    '[attr.aria-expanded]': 'isExpanded',\n    '[attr.role]': 'role',\n    'class': 'mat-nested-tree-node',\n  },\n  inputs: ['disabled', 'tabIndex'],\n  providers: [\n    {provide: CdkNestedTreeNode, useExisting: MatNestedTreeNode},\n    {provide: CdkTreeNode, useExisting: MatNestedTreeNode}\n  ]\n})\nexport class MatNestedTreeNode<T> extends _MatNestedTreeNodeMixinBase<T>\n    implements HasTabIndex, CanDisable {\n\n  @Input('matNestedTreeNode') node: T;\n\n  @ContentChildren(MatTreeNodeOutlet) nodeOutlet: QueryList<MatTreeNodeOutlet>;\n\n  constructor(protected _elementRef: ElementRef,\n              protected _tree: CdkTree<T>,\n              @Attribute('tabindex') tabIndex: string) {\n    super(_elementRef, _tree);\n\n    this.tabIndex = Number(tabIndex) || 0;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {CdkTreeNodePadding} from '@angular/cdk/tree';\nimport {Directive, Input} from '@angular/core';\n\n\n/**\n * Wrapper for the CdkTree padding with Material design styles.\n */\n@Directive({\n  selector: '[matTreeNodePadding]',\n  providers: [{provide: CdkTreeNodePadding, useExisting: MatTreeNodePadding}]\n})\nexport class MatTreeNodePadding<T> extends CdkTreeNodePadding<T> {\n\n  /** The level of depth of the tree node. The padding will be `level * indent` pixels. */\n  @Input('matTreeNodePadding') level: number;\n\n  /** The indent for each level. Default number 40px from material design menu sub-menu spec. */\n  @Input('matTreeNodePaddingIndent') indent: number;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ChangeDetectionStrategy, Component, ViewChild, ViewEncapsulation} from '@angular/core';\nimport {CdkTree} from '@angular/cdk/tree';\nimport {MatTreeNodeOutlet} from './outlet';\n\n/**\n * Wrapper for the CdkTable with Material design styles.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-tree',\n  exportAs: 'matTree',\n  template: `<ng-container matTreeNodeOutlet></ng-container>`,\n  host: {\n    'class': 'mat-tree',\n    'role': 'tree',\n  },\n  styleUrls: ['tree.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  providers: [{provide: CdkTree, useExisting: MatTree}]\n})\nexport class MatTree<T> extends CdkTree<T> {\n  // Outlets within the tree's template where the dataNodes will be inserted.\n  @ViewChild(MatTreeNodeOutlet) _nodeOutlet: MatTreeNodeOutlet;\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, Input} from '@angular/core';\nimport {CdkTreeNodeToggle} from '@angular/cdk/tree';\n\n/**\n * Wrapper for the CdkTree's toggle with Material design styles.\n */\n@Directive({\n  selector: '[matTreeNodeToggle]',\n  host: {\n    '(click)': '_toggle($event)',\n  },\n  providers: [{provide: CdkTreeNodeToggle, useExisting: MatTreeNodeToggle}]\n})\nexport class MatTreeNodeToggle<T> extends CdkTreeNodeToggle<T> {\n  @Input('matTreeNodeToggleRecursive') recursive: boolean = true;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\n\nimport {CdkTreeModule} from '@angular/cdk/tree';\nimport {CommonModule} from '@angular/common';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatNestedTreeNode, MatTreeNodeDef, MatTreeNode} from './node';\nimport {MatTree} from './tree';\nimport {MatTreeNodeToggle} from './toggle';\nimport {MatTreeNodeOutlet} from './outlet';\nimport {MatTreeNodePadding} from './padding';\n\nconst MAT_TREE_DIRECTIVES = [\n  MatNestedTreeNode,\n  MatTreeNodeDef,\n  MatTreeNodePadding,\n  MatTreeNodeToggle,\n  MatTree,\n  MatTreeNode,\n  MatTreeNodeOutlet\n];\n\n@NgModule({\n  imports: [CdkTreeModule, CommonModule, MatCommonModule],\n  exports: MAT_TREE_DIRECTIVES,\n  declarations: MAT_TREE_DIRECTIVES,\n})\nexport class MatTreeModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CollectionViewer, DataSource} from '@angular/cdk/collections';\nimport {FlatTreeControl, TreeControl} from '@angular/cdk/tree';\nimport {Observable} from 'rxjs/Observable';\nimport {merge} from 'rxjs/observable/merge';\nimport {map} from 'rxjs/operators/map';\nimport {take} from 'rxjs/operators/take';\nimport {BehaviorSubject} from 'rxjs/BehaviorSubject';\n\n/**\n * Tree flattener to convert a normal type of node to node with children & level information.\n * Transform nested nodes of type `T` to flattened nodes of type `F`.\n *\n * For example, the input data of type `T` is nested, and contains its children data:\n *   SomeNode: {\n *     key: 'Fruits',\n *     children: [\n *       NodeOne: {\n *         key: 'Apple',\n *       },\n *       NodeTwo: {\n *        key: 'Pear',\n *      }\n *    ]\n *  }\n *  After flattener flatten the tree, the structure will become\n *  SomeNode: {\n *    key: 'Fruits',\n *    expandable: true,\n *    level: 1\n *  },\n *  NodeOne: {\n *    key: 'Apple',\n *    expandable: false,\n *    level: 2\n *  },\n *  NodeTwo: {\n *   key: 'Pear',\n *   expandable: false,\n *   level: 2\n * }\n * and the output flattened type is `F` with additional information.\n */\nexport class MatTreeFlattener<T, F> {\n\n  constructor(public transformFunction: (node: T, level: number) => F,\n              public getLevel: (node: F) => number,\n              public isExpandable: (node: F) => boolean,\n              public getChildren: (node: T) => Observable<T[]>) {}\n\n  _flattenNode(node: T, level: number,\n               resultNodes: F[], parentMap: boolean[]): F[] {\n    const flatNode = this.transformFunction(node, level);\n    resultNodes.push(flatNode);\n\n    if (this.isExpandable(flatNode)) {\n      this.getChildren(node).pipe(take(1)).subscribe(children => {\n        children.forEach((child, index) => {\n          let childParentMap: boolean[] = parentMap.slice();\n          childParentMap.push(index != children.length - 1);\n          this._flattenNode(child, level + 1, resultNodes, childParentMap);\n        });\n      });\n    }\n    return resultNodes;\n  }\n\n  /**\n   * Flatten a list of node type T to flattened version of node F.\n   * Please note that type T may be nested, and the length of `structuredData` may be different\n   * from that of returned list `F[]`.\n   */\n  flattenNodes(structuredData: T[]): F[] {\n    let resultNodes: F[] = [];\n    structuredData.forEach(node => this._flattenNode(node, 0, resultNodes, []));\n    return resultNodes;\n  }\n\n  /**\n   * Expand flattened node with current expansion status.\n   * The returned list may have different length.\n   */\n  expandFlattenedNodes(nodes: F[], treeControl: TreeControl<F>): F[] {\n    let results: F[] = [];\n    let currentExpand: boolean[] = [];\n    currentExpand[0] = true;\n\n    nodes.forEach((node) => {\n      let expand = true;\n      for (let i = 0; i <= this.getLevel(node); i++) {\n        expand = expand && currentExpand[i];\n      }\n      if (expand) {\n        results.push(node);\n      }\n      if (this.isExpandable(node)) {\n        currentExpand[this.getLevel(node) + 1] = treeControl.isExpanded(node);\n      }\n    });\n    return results;\n  }\n}\n\n\n/**\n * Data source for flat tree.\n * The data source need to handle expansion/collapsion of the tree node and change the data feed\n * to `MatTree`.\n * The nested tree nodes of type `T` are flattened through `MatTreeFlattener`, and converted\n * to type `F` for `MatTree` to consume.\n */\nexport class MatTreeFlatDataSource<T, F> extends DataSource<F> {\n  _flattenedData = new BehaviorSubject<F[]>([]);\n\n  _expandedData = new BehaviorSubject<F[]>([]);\n\n  _data: BehaviorSubject<T[]>;\n  get data() { return this._data.value; }\n  set data(value: T[]) {\n    this._data.next(value);\n    this._flattenedData.next(this.treeFlattener.flattenNodes(this.data));\n    this.treeControl.dataNodes = this._flattenedData.value;\n  }\n\n  constructor(private treeControl: FlatTreeControl<F>,\n              private treeFlattener: MatTreeFlattener<T, F>,\n              initialData: T[] = []) {\n    super();\n    this._data = new BehaviorSubject<T[]>(initialData);\n  }\n\n  connect(collectionViewer: CollectionViewer): Observable<F[]> {\n    const changes = [\n      collectionViewer.viewChange,\n      this.treeControl.expansionModel.onChange!,\n      this._flattenedData\n    ];\n    return merge(...changes).pipe(map(() => {\n      this._expandedData.next(\n        this.treeFlattener.expandFlattenedNodes(this._flattenedData.value, this.treeControl));\n      return this._expandedData.value;\n    }));\n  }\n\n  disconnect() {\n    // no op\n  }\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CollectionViewer, DataSource} from '@angular/cdk/collections';\nimport {Observable} from 'rxjs/Observable';\nimport {merge} from 'rxjs/observable/merge';\nimport {map} from 'rxjs/operators/map';\nimport {BehaviorSubject} from 'rxjs/BehaviorSubject';\n\n/**\n * Data source for nested tree.\n *\n * The data source for nested tree doesn't have to consider node flattener, or the way to expand\n * or collapse. The expansion/collapsion will be handled by TreeControl and each non-leaf node.\n */\nexport class MatTreeNestedDataSource<T> extends DataSource<T> {\n  _data = new BehaviorSubject<T[]>([]);\n\n  /**\n   * Data for the nested treee\n   */\n  get data() { return this._data.value; }\n  set data(value: T[]) { this._data.next(value); }\n\n  connect(collectionViewer: CollectionViewer): Observable<T[]> {\n    return merge(...[collectionViewer.viewChange, this._data])\n      .pipe(map(() => {\n        return this.data;\n      }));\n  }\n\n  disconnect() {\n    // no op\n  }\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Version} from '@angular/core';\n\n/** Current version of Angular Material. */\nexport const VERSION = new Version('6.0.0-beta.4-27e5f6e');\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {Directionality} from '@angular/cdk/bidi';\nimport {DOWN_ARROW, ENTER, ESCAPE, UP_ARROW, TAB} from '@angular/cdk/keycodes';\nimport {\n  FlexibleConnectedPositionStrategy,\n  Overlay,\n  OverlayRef,\n  OverlayConfig,\n  PositionStrategy,\n  ScrollStrategy,\n} from '@angular/cdk/overlay';\nimport {TemplatePortal} from '@angular/cdk/portal';\nimport {filter} from 'rxjs/operators/filter';\nimport {take} from 'rxjs/operators/take';\nimport {switchMap} from 'rxjs/operators/switchMap';\nimport {tap} from 'rxjs/operators/tap';\nimport {delay} from 'rxjs/operators/delay';\nimport {\n  ChangeDetectorRef,\n  Directive,\n  ElementRef,\n  forwardRef,\n  Host,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  ViewContainerRef,\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {\n  MatOption,\n  MatOptionSelectionChange,\n  _getOptionScrollPosition,\n  _countGroupLabelsBeforeOption,\n} from '@angular/material/core';\nimport {MatFormField} from '@angular/material/form-field';\nimport {DOCUMENT} from '@angular/common';\nimport {Observable} from 'rxjs/Observable';\nimport {Subject} from 'rxjs/Subject';\nimport {defer} from 'rxjs/observable/defer';\nimport {fromEvent} from 'rxjs/observable/fromEvent';\nimport {merge} from 'rxjs/observable/merge';\nimport {of as observableOf} from 'rxjs/observable/of';\nimport {Subscription} from 'rxjs/Subscription';\nimport {MatAutocomplete} from './autocomplete';\n\n\n/**\n * The following style constants are necessary to save here in order\n * to properly calculate the scrollTop of the panel. Because we are not\n * actually focusing the active item, scroll must be handled manually.\n */\n\n/** The height of each autocomplete option. */\nexport const AUTOCOMPLETE_OPTION_HEIGHT = 48;\n\n/** The total height of the autocomplete panel. */\nexport const AUTOCOMPLETE_PANEL_HEIGHT = 256;\n\n/** Injection token that determines the scroll handling while the autocomplete panel is open. */\nexport const MAT_AUTOCOMPLETE_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mat-autocomplete-scroll-strategy');\n\n/** @docs-private */\nexport function MAT_AUTOCOMPLETE_SCROLL_STRATEGY_PROVIDER_FACTORY(overlay: Overlay):\n    () => ScrollStrategy {\n  return () => overlay.scrollStrategies.reposition();\n}\n\n/** @docs-private */\nexport const MAT_AUTOCOMPLETE_SCROLL_STRATEGY_PROVIDER = {\n  provide: MAT_AUTOCOMPLETE_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_AUTOCOMPLETE_SCROLL_STRATEGY_PROVIDER_FACTORY,\n};\n\n/**\n * Provider that allows the autocomplete to register as a ControlValueAccessor.\n * @docs-private\n */\nexport const MAT_AUTOCOMPLETE_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatAutocompleteTrigger),\n  multi: true\n};\n\n/**\n * Creates an error to be thrown when attempting to use an autocomplete trigger without a panel.\n */\nexport function getMatAutocompleteMissingPanelError(): Error {\n  return Error('Attempting to open an undefined instance of `mat-autocomplete`. ' +\n               'Make sure that the id passed to the `matAutocomplete` is correct and that ' +\n               'you\\'re attempting to open it after the ngAfterContentInit hook.');\n}\n\n@Directive({\n  selector: `input[matAutocomplete], textarea[matAutocomplete]`,\n  host: {\n    'role': 'combobox',\n    'autocomplete': 'off',\n    'aria-autocomplete': 'list',\n    '[attr.aria-activedescendant]': 'activeOption?.id',\n    '[attr.aria-expanded]': 'panelOpen.toString()',\n    '[attr.aria-owns]': 'autocomplete?.id',\n    // Note: we use `focusin`, as opposed to `focus`, in order to open the panel\n    // a little earlier. This avoids issues where IE delays the focusing of the input.\n    '(focusin)': '_handleFocus()',\n    '(blur)': '_onTouched()',\n    '(input)': '_handleInput($event)',\n    '(keydown)': '_handleKeydown($event)',\n  },\n  exportAs: 'matAutocompleteTrigger',\n  providers: [MAT_AUTOCOMPLETE_VALUE_ACCESSOR]\n})\nexport class MatAutocompleteTrigger implements ControlValueAccessor, OnDestroy {\n  private _overlayRef: OverlayRef | null;\n  private _portal: TemplatePortal;\n  private _componentDestroyed = false;\n\n  /** Old value of the native input. Used to work around issues with the `input` event on IE. */\n  private _previousValue: string | number | null;\n\n  /** Strategy that is used to position the panel. */\n  private _positionStrategy: FlexibleConnectedPositionStrategy;\n\n  /** Whether or not the label state is being overridden. */\n  private _manuallyFloatingLabel = false;\n\n  /** The subscription for closing actions (some are bound to document). */\n  private _closingActionsSubscription: Subscription;\n\n  /** Stream of keyboard events that can close the panel. */\n  private readonly _closeKeyEventStream = new Subject<void>();\n\n  /** `View -> model callback called when value changes` */\n  _onChange: (value: any) => void = () => {};\n\n  /** `View -> model callback called when autocomplete has been touched` */\n  _onTouched = () => {};\n\n  /** The autocomplete panel to be attached to this trigger. */\n  @Input('matAutocomplete') autocomplete: MatAutocomplete;\n\n  constructor(private _element: ElementRef, private _overlay: Overlay,\n              private _viewContainerRef: ViewContainerRef,\n              private _zone: NgZone,\n              private _changeDetectorRef: ChangeDetectorRef,\n              @Inject(MAT_AUTOCOMPLETE_SCROLL_STRATEGY) private _scrollStrategy,\n              @Optional() private _dir: Directionality,\n              @Optional() @Host() private _formField: MatFormField,\n              @Optional() @Inject(DOCUMENT) private _document: any) {}\n\n  ngOnDestroy() {\n    this._componentDestroyed = true;\n    this._destroyPanel();\n    this._closeKeyEventStream.complete();\n  }\n\n  /** Whether or not the autocomplete panel is open. */\n  get panelOpen(): boolean {\n    return this._overlayAttached && this.autocomplete.showPanel;\n  }\n  private _overlayAttached: boolean = false;\n\n  /** Opens the autocomplete suggestion panel. */\n  openPanel(): void {\n    this._attachOverlay();\n    this._floatLabel();\n  }\n\n  /** Closes the autocomplete suggestion panel. */\n  closePanel(): void {\n    this._resetLabel();\n\n    if (!this._overlayAttached) {\n      return;\n    }\n\n    if (this.panelOpen) {\n      // Only emit if the panel was visible.\n      this.autocomplete.closed.emit();\n    }\n\n    this.autocomplete._isOpen = this._overlayAttached = false;\n\n    if (this._overlayRef && this._overlayRef.hasAttached()) {\n      this._overlayRef.detach();\n      this._closingActionsSubscription.unsubscribe();\n    }\n\n    // Note that in some cases this can end up being called after the component is destroyed.\n    // Add a check to ensure that we don't try to run change detection on a destroyed view.\n    if (!this._componentDestroyed) {\n      // We need to trigger change detection manually, because\n      // `fromEvent` doesn't seem to do it at the proper time.\n      // This ensures that the label is reset when the\n      // user clicks outside.\n      this._changeDetectorRef.detectChanges();\n    }\n  }\n\n  /**\n   * A stream of actions that should close the autocomplete panel, including\n   * when an option is selected, on blur, and when TAB is pressed.\n   */\n  get panelClosingActions(): Observable<MatOptionSelectionChange> {\n    return merge(\n      this.optionSelections,\n      this.autocomplete._keyManager.tabOut.pipe(filter(() => this._overlayAttached)),\n      this._closeKeyEventStream,\n      this._outsideClickStream,\n      this._overlayRef ?\n          this._overlayRef.detachments().pipe(filter(() => this._overlayAttached)) :\n          observableOf()\n    );\n  }\n\n  /** Stream of autocomplete option selections. */\n  readonly optionSelections: Observable<MatOptionSelectionChange> = defer(() => {\n    if (this.autocomplete && this.autocomplete.options) {\n     return merge(...this.autocomplete.options.map(option => option.onSelectionChange));\n    }\n\n    // If there are any subscribers before `ngAfterViewInit`, the `autocomplete` will be undefined.\n    // Return a stream that we'll replace with the real one once everything is in place.\n    return this._zone.onStable\n        .asObservable()\n        .pipe(take(1), switchMap(() => this.optionSelections));\n  });\n\n  /** The currently active option, coerced to MatOption type. */\n  get activeOption(): MatOption | null {\n    if (this.autocomplete && this.autocomplete._keyManager) {\n      return this.autocomplete._keyManager.activeItem;\n    }\n\n    return null;\n  }\n\n  /** Stream of clicks outside of the autocomplete panel. */\n  private get _outsideClickStream(): Observable<any> {\n    if (!this._document) {\n      return observableOf(null);\n    }\n\n    return merge(\n      fromEvent(this._document, 'click'),\n      fromEvent(this._document, 'touchend')\n    )\n    .pipe(filter((event: MouseEvent | TouchEvent) => {\n      const clickTarget = event.target as HTMLElement;\n      const formField = this._formField ?\n          this._formField._elementRef.nativeElement : null;\n\n      return this._overlayAttached &&\n              clickTarget !== this._element.nativeElement &&\n              (!formField || !formField.contains(clickTarget)) &&\n              (!!this._overlayRef && !this._overlayRef.overlayElement.contains(clickTarget));\n    }));\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  writeValue(value: any): void {\n    Promise.resolve(null).then(() => this._setTriggerValue(value));\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnChange(fn: (value: any) => {}): void {\n    this._onChange = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnTouched(fn: () => {}) {\n    this._onTouched = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  setDisabledState(isDisabled: boolean) {\n    this._element.nativeElement.disabled = isDisabled;\n  }\n\n  _handleKeydown(event: KeyboardEvent): void {\n    const keyCode = event.keyCode;\n\n    // Prevent the default action on all escape key presses. This is here primarily to bring IE\n    // in line with other browsers. By default, pressing escape on IE will cause it to revert\n    // the input value to the one that it had on focus, however it won't dispatch any events\n    // which means that the model value will be out of sync with the view.\n    if (keyCode === ESCAPE) {\n      event.preventDefault();\n    }\n\n    // Close when pressing ESCAPE or ALT + UP_ARROW, based on the a11y guidelines.\n    // See: https://www.w3.org/TR/wai-aria-practices-1.1/#textbox-keyboard-interaction\n    if (this.panelOpen && (keyCode === ESCAPE || (keyCode === UP_ARROW && event.altKey))) {\n      this._resetActiveItem();\n      this._closeKeyEventStream.next();\n      event.stopPropagation();\n    } else if (this.activeOption && keyCode === ENTER && this.panelOpen) {\n      this.activeOption._selectViaInteraction();\n      this._resetActiveItem();\n      event.preventDefault();\n    } else {\n      const prevActiveItem = this.autocomplete._keyManager.activeItem;\n      const isArrowKey = keyCode === UP_ARROW || keyCode === DOWN_ARROW;\n\n      if (this.panelOpen || keyCode === TAB) {\n        this.autocomplete._keyManager.onKeydown(event);\n      } else if (isArrowKey && this._canOpen()) {\n        this.openPanel();\n      }\n\n      if (isArrowKey || this.autocomplete._keyManager.activeItem !== prevActiveItem) {\n        this._scrollToOption();\n      }\n    }\n  }\n\n  _handleInput(event: KeyboardEvent): void {\n    let target = event.target as HTMLInputElement;\n    let value: number | string | null = target.value;\n\n    // Based on `NumberValueAccessor` from forms.\n    if (target.type === 'number') {\n      value = value == '' ? null : parseFloat(value);\n    }\n\n    // If the input has a placeholder, IE will fire the `input` event on page load,\n    // focus and blur, in addition to when the user actually changed the value. To\n    // filter out all of the extra events, we save the value on focus and between\n    // `input` events, and we check whether it changed.\n    // See: https://connect.microsoft.com/IE/feedback/details/885747/\n    if (this._canOpen() && this._previousValue !== value &&\n      document.activeElement === event.target) {\n      this._previousValue = value;\n      this._onChange(value);\n      this.openPanel();\n    }\n  }\n\n  _handleFocus(): void {\n    if (this._canOpen()) {\n      this._previousValue = this._element.nativeElement.value;\n      this._attachOverlay();\n      this._floatLabel(true);\n    }\n  }\n\n  /**\n   * In \"auto\" mode, the label will animate down as soon as focus is lost.\n   * This causes the value to jump when selecting an option with the mouse.\n   * This method manually floats the label until the panel can be closed.\n   * @param shouldAnimate Whether the label should be animated when it is floated.\n   */\n  private _floatLabel(shouldAnimate = false): void {\n    if (this._formField && this._formField.floatLabel === 'auto') {\n      if (shouldAnimate) {\n        this._formField._animateAndLockLabel();\n      } else {\n        this._formField.floatLabel = 'always';\n      }\n\n      this._manuallyFloatingLabel = true;\n    }\n  }\n\n  /** If the label has been manually elevated, return it to its normal state. */\n  private _resetLabel(): void  {\n    if (this._manuallyFloatingLabel) {\n      this._formField.floatLabel = 'auto';\n      this._manuallyFloatingLabel = false;\n    }\n  }\n\n  /**\n   * Given that we are not actually focusing active options, we must manually adjust scroll\n   * to reveal options below the fold. First, we find the offset of the option from the top\n   * of the panel. If that offset is below the fold, the new scrollTop will be the offset -\n   * the panel height + the option height, so the active option will be just visible at the\n   * bottom of the panel. If that offset is above the top of the visible panel, the new scrollTop\n   * will become the offset. If that offset is visible within the panel already, the scrollTop is\n   * not adjusted.\n   */\n  private _scrollToOption(): void {\n    const index = this.autocomplete._keyManager.activeItemIndex || 0;\n    const labelCount = _countGroupLabelsBeforeOption(index,\n        this.autocomplete.options, this.autocomplete.optionGroups);\n\n    const newScrollPosition = _getOptionScrollPosition(\n      index + labelCount,\n      AUTOCOMPLETE_OPTION_HEIGHT,\n      this.autocomplete._getScrollTop(),\n      AUTOCOMPLETE_PANEL_HEIGHT\n    );\n\n    this.autocomplete._setScrollTop(newScrollPosition);\n  }\n\n  /**\n   * This method listens to a stream of panel closing actions and resets the\n   * stream every time the option list changes.\n   */\n  private _subscribeToClosingActions(): Subscription {\n    const firstStable = this._zone.onStable.asObservable().pipe(take(1));\n    const optionChanges = this.autocomplete.options.changes.pipe(\n      tap(() => this._positionStrategy.reapplyLastPosition()),\n      // Defer emitting to the stream until the next tick, because changing\n      // bindings in here will cause \"changed after checked\" errors.\n      delay(0)\n    );\n\n    // When the zone is stable initially, and when the option list changes...\n    return merge(firstStable, optionChanges)\n      .pipe(\n        // create a new stream of panelClosingActions, replacing any previous streams\n        // that were created, and flatten it so our stream only emits closing events...\n        switchMap(() => {\n          this._resetActiveItem();\n          this.autocomplete._setVisibility();\n          return this.panelClosingActions;\n        }),\n        // when the first closing event occurs...\n        take(1)\n      )\n      // set the value, close the panel, and complete.\n      .subscribe(event => this._setValueAndClose(event));\n  }\n\n  /** Destroys the autocomplete suggestion panel. */\n  private _destroyPanel(): void {\n    if (this._overlayRef) {\n      this.closePanel();\n      this._overlayRef.dispose();\n      this._overlayRef = null;\n    }\n  }\n\n  private _setTriggerValue(value: any): void {\n    const toDisplay = this.autocomplete && this.autocomplete.displayWith ?\n      this.autocomplete.displayWith(value) :\n      value;\n\n    // Simply falling back to an empty string if the display value is falsy does not work properly.\n    // The display value can also be the number zero and shouldn't fall back to an empty string.\n    const inputValue = toDisplay != null ? toDisplay : '';\n\n    // If it's used within a `MatFormField`, we should set it through the property so it can go\n    // through change detection.\n    if (this._formField) {\n      this._formField._control.value = inputValue;\n    } else {\n      this._element.nativeElement.value = inputValue;\n    }\n  }\n\n  /**\n   * This method closes the panel, and if a value is specified, also sets the associated\n   * control to that value. It will also mark the control as dirty if this interaction\n   * stemmed from the user.\n   */\n  private _setValueAndClose(event: MatOptionSelectionChange | null): void {\n    if (event && event.source) {\n      this._clearPreviousSelectedOption(event.source);\n      this._setTriggerValue(event.source.value);\n      this._onChange(event.source.value);\n      this._element.nativeElement.focus();\n      this.autocomplete._emitSelectEvent(event.source);\n    }\n\n    this.closePanel();\n  }\n\n  /**\n   * Clear any previous selected option and emit a selection change event for this option\n   */\n  private _clearPreviousSelectedOption(skip: MatOption) {\n    this.autocomplete.options.forEach(option => {\n      if (option != skip && option.selected) {\n        option.deselect();\n      }\n    });\n  }\n\n  private _attachOverlay(): void {\n    if (!this.autocomplete) {\n      throw getMatAutocompleteMissingPanelError();\n    }\n\n    if (!this._overlayRef) {\n      this._portal = new TemplatePortal(this.autocomplete.template, this._viewContainerRef);\n      this._overlayRef = this._overlay.create(this._getOverlayConfig());\n    } else {\n      /** Update the panel width, in case the host width has changed */\n      this._overlayRef.updateSize({width: this._getHostWidth()});\n    }\n\n    if (this._overlayRef && !this._overlayRef.hasAttached()) {\n      this._overlayRef.attach(this._portal);\n      this._closingActionsSubscription = this._subscribeToClosingActions();\n    }\n\n    const wasOpen = this.panelOpen;\n\n    this.autocomplete._setVisibility();\n    this.autocomplete._isOpen = this._overlayAttached = true;\n\n    // We need to do an extra `panelOpen` check in here, because the\n    // autocomplete won't be shown if there are no options.\n    if (this.panelOpen && wasOpen !== this.panelOpen) {\n      this.autocomplete.opened.emit();\n    }\n  }\n\n  private _getOverlayConfig(): OverlayConfig {\n    return new OverlayConfig({\n      positionStrategy: this._getOverlayPosition(),\n      scrollStrategy: this._scrollStrategy(),\n      width: this._getHostWidth(),\n      direction: this._dir ? this._dir.value : 'ltr'\n    });\n  }\n\n  private _getOverlayPosition(): PositionStrategy {\n    this._positionStrategy = this._overlay.position()\n      .flexibleConnectedTo(this._getConnectedElement())\n      .withPositions([\n        {originX: 'start', originY: 'bottom', overlayX: 'start', overlayY: 'top'},\n        {originX: 'start', originY: 'top', overlayX: 'start', overlayY: 'bottom'}\n      ]);\n\n    return this._positionStrategy;\n  }\n\n  private _getConnectedElement(): ElementRef {\n    return this._formField ? this._formField.getConnectedOverlayOrigin() : this._element;\n  }\n\n  /** Returns the width of the input element, so the panel width can match it. */\n  private _getHostWidth(): number {\n    return this._getConnectedElement().nativeElement.getBoundingClientRect().width;\n  }\n\n  /**\n   * Resets the active item to -1 so arrow events will activate the\n   * correct options, or to 0 if the consumer opted into it.\n   */\n  private _resetActiveItem(): void {\n    this.autocomplete._keyManager.setActiveItem(this.autocomplete.autoActiveFirstOption ? 0 : -1);\n  }\n\n  /** Determines whether the panel can be opened. */\n  private _canOpen(): boolean {\n    const element: HTMLInputElement = this._element.nativeElement;\n    return !element.readOnly && !element.disabled;\n  }\n\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * When constructing a Date, the month is zero-based. This can be confusing, since people are\n * used to seeing them one-based. So we create these aliases to make writing the tests easier.\n */\nexport const JAN = 0, FEB = 1, MAR = 2, APR = 3, MAY = 4, JUN = 5, JUL = 6, AUG = 7, SEP = 8,\n    OCT = 9, NOV = 10, DEC = 11;\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  animateChild,\n  group,\n  state,\n  style,\n  transition,\n  trigger,\n  query,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/** Time and timing curve for expansion panel animations. */\nexport const EXPANSION_PANEL_ANIMATION_TIMING = '225ms cubic-bezier(0.4,0.0,0.2,1)';\n\n/** Animations used by the Material expansion panel. */\nexport const matExpansionAnimations: {\n  readonly indicatorRotate: AnimationTriggerMetadata;\n  readonly expansionHeaderHeight: AnimationTriggerMetadata;\n  readonly bodyExpansion: AnimationTriggerMetadata;\n} = {\n  /** Animation that rotates the indicator arrow. */\n  indicatorRotate: trigger('indicatorRotate', [\n    state('collapsed', style({transform: 'rotate(0deg)'})),\n    state('expanded', style({transform: 'rotate(180deg)'})),\n    transition('expanded <=> collapsed', animate(EXPANSION_PANEL_ANIMATION_TIMING)),\n  ]),\n\n  /** Animation that expands and collapses the panel header height. */\n  expansionHeaderHeight: trigger('expansionHeight', [\n    state('collapsed', style({\n      height: '{{collapsedHeight}}',\n    }), {\n      params: {collapsedHeight: '48px'},\n    }),\n    state('expanded', style({\n      height: '{{expandedHeight}}'\n    }), {\n      params: {expandedHeight: '64px'}\n    }),\n    transition('expanded <=> collapsed', group([\n      query('@indicatorRotate', animateChild(), {optional: true}),\n      animate(EXPANSION_PANEL_ANIMATION_TIMING),\n    ])),\n  ]),\n\n  /** Animation that expands and collapses the panel content. */\n  bodyExpansion: trigger('bodyExpansion', [\n    state('collapsed', style({height: '0px', visibility: 'hidden'})),\n    state('expanded', style({height: '*', visibility: 'visible'})),\n    transition('expanded <=> collapsed', animate(EXPANSION_PANEL_ANIMATION_TIMING)),\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {ActiveDescendantKeyManager} from '@angular/cdk/a11y';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {SelectionModel} from '@angular/cdk/collections';\nimport {\n  DOWN_ARROW,\n  END,\n  ENTER,\n  HOME,\n  SPACE,\n  UP_ARROW,\n  LEFT_ARROW,\n  RIGHT_ARROW,\n} from '@angular/cdk/keycodes';\nimport {\n  CdkConnectedOverlay,\n  Overlay,\n  RepositionScrollStrategy,\n  ScrollStrategy,\n  ViewportRuler,\n} from '@angular/cdk/overlay';\nimport {filter} from 'rxjs/operators/filter';\nimport {take} from 'rxjs/operators/take';\nimport {map} from 'rxjs/operators/map';\nimport {switchMap} from 'rxjs/operators/switchMap';\nimport {startWith} from 'rxjs/operators/startWith';\nimport {takeUntil} from 'rxjs/operators/takeUntil';\nimport {\n  AfterContentInit,\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  ContentChildren,\n  Directive,\n  DoCheck,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  InjectionToken,\n  Input,\n  isDevMode,\n  NgZone,\n  OnChanges,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Output,\n  QueryList,\n  Self,\n  SimpleChanges,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {\n  ControlValueAccessor,\n  FormGroupDirective,\n  NgControl,\n  NgForm\n} from '@angular/forms';\nimport {\n  CanDisable,\n  ErrorStateMatcher,\n  CanUpdateErrorState,\n  mixinErrorState,\n  HasTabIndex,\n  MatOptgroup,\n  MatOption,\n  MatOptionSelectionChange,\n  mixinDisabled,\n  mixinTabIndex,\n  MAT_OPTION_PARENT_COMPONENT,\n  mixinDisableRipple,\n  CanDisableRipple,\n  _countGroupLabelsBeforeOption,\n  _getOptionScrollPosition,\n} from '@angular/material/core';\nimport {MatFormField, MatFormFieldControl} from '@angular/material/form-field';\nimport {Observable} from 'rxjs/Observable';\nimport {merge} from 'rxjs/observable/merge';\nimport {Subject} from 'rxjs/Subject';\nimport {defer} from 'rxjs/observable/defer';\nimport {matSelectAnimations} from './select-animations';\nimport {\n  getMatSelectDynamicMultipleError,\n  getMatSelectNonArrayValueError,\n  getMatSelectNonFunctionValueError,\n} from './select-errors';\n\n\nlet nextUniqueId = 0;\n\n/**\n * The following style constants are necessary to save here in order\n * to properly calculate the alignment of the selected option over\n * the trigger element.\n */\n\n/** The max height of the select's overlay panel */\nexport const SELECT_PANEL_MAX_HEIGHT = 256;\n\n/** The panel's padding on the x-axis */\nexport const SELECT_PANEL_PADDING_X = 16;\n\n/** The panel's x axis padding if it is indented (e.g. there is an option group). */\nexport const SELECT_PANEL_INDENT_PADDING_X = SELECT_PANEL_PADDING_X * 2;\n\n/** The height of the select items in `em` units. */\nexport const SELECT_ITEM_HEIGHT_EM = 3;\n\n/**\n * Distance between the panel edge and the option text in\n * multi-selection mode.\n *\n * (SELECT_PANEL_PADDING_X * 1.5) + 20 = 44\n * The padding is multiplied by 1.5 because the checkbox's margin is half the padding.\n * The checkbox width is 20px.\n */\nexport const SELECT_MULTIPLE_PANEL_PADDING_X = SELECT_PANEL_PADDING_X * 1.5 + 20;\n\n/**\n * The select panel will only \"fit\" inside the viewport if it is positioned at\n * this value or more away from the viewport boundary.\n */\nexport const SELECT_PANEL_VIEWPORT_PADDING = 8;\n\n/** Injection token that determines the scroll handling while a select is open. */\nexport const MAT_SELECT_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mat-select-scroll-strategy');\n\n/** @docs-private */\nexport function MAT_SELECT_SCROLL_STRATEGY_PROVIDER_FACTORY(overlay: Overlay):\n    () => RepositionScrollStrategy {\n  return () => overlay.scrollStrategies.reposition();\n}\n\n/** @docs-private */\nexport const MAT_SELECT_SCROLL_STRATEGY_PROVIDER = {\n  provide: MAT_SELECT_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_SELECT_SCROLL_STRATEGY_PROVIDER_FACTORY,\n};\n\n/** Change event object that is emitted when the select value has changed. */\nexport class MatSelectChange {\n  constructor(\n    /** Reference to the select that emitted the change event. */\n    public source: MatSelect,\n    /** Current value of the select that emitted the event. */\n    public value: any) { }\n}\n\n// Boilerplate for applying mixins to MatSelect.\n/** @docs-private */\nexport class MatSelectBase {\n  constructor(public _elementRef: ElementRef,\n              public _defaultErrorStateMatcher: ErrorStateMatcher,\n              public _parentForm: NgForm,\n              public _parentFormGroup: FormGroupDirective,\n              public ngControl: NgControl) {}\n}\nexport const _MatSelectMixinBase = mixinDisableRipple(\n    mixinTabIndex(mixinDisabled(mixinErrorState(MatSelectBase))));\n\n\n/**\n * Allows the user to customize the trigger that is displayed when the select has a value.\n */\n@Directive({\n  selector: 'mat-select-trigger'\n})\nexport class MatSelectTrigger {}\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-select',\n  exportAs: 'matSelect',\n  templateUrl: 'select.html',\n  styleUrls: ['select.css'],\n  inputs: ['disabled', 'disableRipple', 'tabIndex'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {\n    'role': 'listbox',\n    '[attr.id]': 'id',\n    '[attr.tabindex]': 'tabIndex',\n    '[attr.aria-label]': '_ariaLabel',\n    '[attr.aria-labelledby]': 'ariaLabelledby',\n    '[attr.aria-required]': 'required.toString()',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.aria-invalid]': 'errorState',\n    '[attr.aria-owns]': 'panelOpen ? _optionIds : null',\n    '[attr.aria-multiselectable]': 'multiple',\n    '[attr.aria-describedby]': '_ariaDescribedby || null',\n    '[attr.aria-activedescendant]': '_getAriaActiveDescendant()',\n    '[class.mat-select-disabled]': 'disabled',\n    '[class.mat-select-invalid]': 'errorState',\n    '[class.mat-select-required]': 'required',\n    'class': 'mat-select',\n    '(keydown)': '_handleKeydown($event)',\n    '(focus)': '_onFocus()',\n    '(blur)': '_onBlur()',\n  },\n  animations: [\n    matSelectAnimations.transformPanel,\n    matSelectAnimations.fadeInContent\n  ],\n  providers: [\n    {provide: MatFormFieldControl, useExisting: MatSelect},\n    {provide: MAT_OPTION_PARENT_COMPONENT, useExisting: MatSelect}\n  ],\n})\nexport class MatSelect extends _MatSelectMixinBase implements AfterContentInit, OnChanges,\n    OnDestroy, OnInit, DoCheck, ControlValueAccessor, CanDisable, HasTabIndex,\n    MatFormFieldControl<any>, CanUpdateErrorState, CanDisableRipple {\n  /** Whether or not the overlay panel is open. */\n  private _panelOpen = false;\n\n  /** Whether filling out the select is required in the form. */\n  private _required: boolean = false;\n\n  /** The scroll position of the overlay panel, calculated to center the selected option. */\n  private _scrollTop = 0;\n\n  /** The placeholder displayed in the trigger of the select. */\n  private _placeholder: string;\n\n  /** Whether the component is in multiple selection mode. */\n  private _multiple: boolean = false;\n\n  /** Comparison function to specify which option is displayed. Defaults to object equality. */\n  private _compareWith = (o1: any, o2: any) => o1 === o2;\n\n  /** Unique id for this input. */\n  private _uid = `mat-select-${nextUniqueId++}`;\n\n  /** Emits whenever the component is destroyed. */\n  private readonly _destroy = new Subject<void>();\n\n  /** The last measured value for the trigger's client bounding rect. */\n  _triggerRect: ClientRect;\n\n  /** The aria-describedby attribute on the select for improved a11y. */\n  _ariaDescribedby: string;\n\n  /** The cached font-size of the trigger element. */\n  _triggerFontSize = 0;\n\n  /** Deals with the selection logic. */\n  _selectionModel: SelectionModel<MatOption>;\n\n  /** Manages keyboard events for options in the panel. */\n  _keyManager: ActiveDescendantKeyManager<MatOption>;\n\n  /** `View -> model callback called when value changes` */\n  _onChange: (value: any) => void = () => {};\n\n  /** `View -> model callback called when select has been touched` */\n  _onTouched = () => {};\n\n  /** The IDs of child options to be passed to the aria-owns attribute. */\n  _optionIds: string = '';\n\n  /** The value of the select panel's transform-origin property. */\n  _transformOrigin: string = 'top';\n\n  /** Whether the panel's animation is done. */\n  _panelDoneAnimating: boolean = false;\n\n  /** Strategy that will be used to handle scrolling while the select panel is open. */\n  _scrollStrategy = this._scrollStrategyFactory();\n\n  /**\n   * The y-offset of the overlay panel in relation to the trigger's top start corner.\n   * This must be adjusted to align the selected option text over the trigger text.\n   * when the panel opens. Will change based on the y-position of the selected option.\n   */\n  _offsetY = 0;\n\n  /**\n   * This position config ensures that the top \"start\" corner of the overlay\n   * is aligned with with the top \"start\" of the origin by default (overlapping\n   * the trigger completely). If the panel cannot fit below the trigger, it\n   * will fall back to a position above the trigger.\n   */\n  _positions = [\n    {\n      originX: 'start',\n      originY: 'top',\n      overlayX: 'start',\n      overlayY: 'top',\n    },\n    {\n      originX: 'start',\n      originY: 'bottom',\n      overlayX: 'start',\n      overlayY: 'bottom',\n    },\n  ];\n\n  /** Whether the component is disabling centering of the active option over the trigger. */\n  private _disableOptionCentering: boolean = false;\n\n  /** Whether the select is focused. */\n  focused: boolean = false;\n\n  /** A name for this control that can be used by `mat-form-field`. */\n  controlType = 'mat-select';\n\n  /** Trigger that opens the select. */\n  @ViewChild('trigger') trigger: ElementRef;\n\n  /** Panel containing the select options. */\n  @ViewChild('panel') panel: ElementRef;\n\n  /** Overlay pane containing the options. */\n  @ViewChild(CdkConnectedOverlay) overlayDir: CdkConnectedOverlay;\n\n  /** All of the defined select options. */\n  @ContentChildren(MatOption, { descendants: true }) options: QueryList<MatOption>;\n\n  /** All of the defined groups of options. */\n  @ContentChildren(MatOptgroup) optionGroups: QueryList<MatOptgroup>;\n\n  /** Classes to be passed to the select panel. Supports the same syntax as `ngClass`. */\n  @Input() panelClass: string|string[]|Set<string>|{[key: string]: any};\n\n  /** User-supplied override of the trigger element. */\n  @ContentChild(MatSelectTrigger) customTrigger: MatSelectTrigger;\n\n  /** Placeholder to be shown if no value has been selected. */\n  @Input()\n  get placeholder(): string { return this._placeholder; }\n  set placeholder(value: string) {\n    this._placeholder = value;\n    this.stateChanges.next();\n  }\n\n  /** Whether the component is required. */\n  @Input()\n  get required(): boolean { return this._required; }\n  set required(value: boolean) {\n    this._required = coerceBooleanProperty(value);\n    this.stateChanges.next();\n  }\n\n  /** Whether the user should be allowed to select multiple options. */\n  @Input()\n  get multiple(): boolean { return this._multiple; }\n  set multiple(value: boolean) {\n    if (this._selectionModel) {\n      throw getMatSelectDynamicMultipleError();\n    }\n\n    this._multiple = coerceBooleanProperty(value);\n  }\n\n  /** Whether to center the active option over the trigger. */\n  @Input()\n  get disableOptionCentering(): boolean { return this._disableOptionCentering; }\n  set disableOptionCentering(value: boolean) {\n    this._disableOptionCentering = coerceBooleanProperty(value);\n  }\n\n  /**\n   * A function to compare the option values with the selected values. The first argument\n   * is a value from an option. The second is a value from the selection. A boolean\n   * should be returned.\n   */\n  @Input()\n  get compareWith() { return this._compareWith; }\n  set compareWith(fn: (o1: any, o2: any) => boolean) {\n    if (typeof fn !== 'function') {\n      throw getMatSelectNonFunctionValueError();\n    }\n    this._compareWith = fn;\n    if (this._selectionModel) {\n      // A different comparator means the selection could change.\n      this._initializeSelection();\n    }\n  }\n\n  /** Value of the select control. */\n  @Input()\n  get value(): any { return this._value; }\n  set value(newValue: any) {\n    if (newValue !== this._value) {\n      this.writeValue(newValue);\n      this._value = newValue;\n    }\n  }\n  private _value: any;\n\n  /** Aria label of the select. If not specified, the placeholder will be used as label. */\n  @Input('aria-label') ariaLabel: string = '';\n\n  /** Input that can be used to specify the `aria-labelledby` attribute. */\n  @Input('aria-labelledby') ariaLabelledby: string;\n\n  /** An object used to control when error messages are shown. */\n  @Input() errorStateMatcher: ErrorStateMatcher;\n\n  /** Unique id of the element. */\n  @Input()\n  get id(): string { return this._id; }\n  set id(value: string) {\n    this._id = value || this._uid;\n    this.stateChanges.next();\n  }\n  private _id: string;\n\n  /** Combined stream of all of the child options' change events. */\n  readonly optionSelectionChanges: Observable<MatOptionSelectionChange> = defer(() => {\n    if (this.options) {\n      return merge(...this.options.map(option => option.onSelectionChange));\n    }\n\n    return this._ngZone.onStable\n      .asObservable()\n      .pipe(take(1), switchMap(() => this.optionSelectionChanges));\n  });\n\n   /** Event emitted when the select panel has been toggled. */\n   @Output() readonly openedChange: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n  /** Event emitted when the select has been opened. */\n  @Output('opened') readonly _openedStream: Observable<void> =\n      this.openedChange.pipe(filter(o => o), map(() => {}));\n\n  /** Event emitted when the select has been closed. */\n  @Output('closed') readonly _closedStream: Observable<void> =\n      this.openedChange.pipe(filter(o => !o), map(() => {}));\n\n   /** Event emitted when the selected value has been changed by the user. */\n  @Output() readonly selectionChange: EventEmitter<MatSelectChange> =\n      new EventEmitter<MatSelectChange>();\n\n  /**\n   * Event that emits whenever the raw value of the select changes. This is here primarily\n   * to facilitate the two-way binding for the `value` input.\n   * @docs-private\n   */\n  @Output() readonly valueChange: EventEmitter<any> = new EventEmitter<any>();\n\n  constructor(\n    private _viewportRuler: ViewportRuler,\n    private _changeDetectorRef: ChangeDetectorRef,\n    private _ngZone: NgZone,\n    _defaultErrorStateMatcher: ErrorStateMatcher,\n    elementRef: ElementRef,\n    @Optional() private _dir: Directionality,\n    @Optional() _parentForm: NgForm,\n    @Optional() _parentFormGroup: FormGroupDirective,\n    @Optional() private _parentFormField: MatFormField,\n    @Self() @Optional() public ngControl: NgControl,\n    @Attribute('tabindex') tabIndex: string,\n    @Inject(MAT_SELECT_SCROLL_STRATEGY) private _scrollStrategyFactory) {\n    super(elementRef, _defaultErrorStateMatcher, _parentForm,\n          _parentFormGroup, ngControl);\n\n    if (this.ngControl) {\n      // Note: we provide the value accessor through here, instead of\n      // the `providers` to avoid running into a circular import.\n      this.ngControl.valueAccessor = this;\n    }\n\n    this.tabIndex = parseInt(tabIndex) || 0;\n\n    // Force setter to be called in case id was not specified.\n    this.id = this.id;\n  }\n\n  ngOnInit() {\n    this._selectionModel = new SelectionModel<MatOption>(this.multiple, undefined, false);\n    this.stateChanges.next();\n  }\n\n  ngAfterContentInit() {\n    this._initKeyManager();\n\n    this.options.changes.pipe(startWith(null), takeUntil(this._destroy)).subscribe(() => {\n      this._resetOptions();\n      this._initializeSelection();\n    });\n  }\n\n  ngDoCheck() {\n    if (this.ngControl) {\n      this.updateErrorState();\n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    // Updating the disabled state is handled by `mixinDisabled`, but we need to additionally let\n    // the parent form field know to run change detection when the disabled state changes.\n    if (changes.disabled) {\n      this.stateChanges.next();\n    }\n  }\n\n  ngOnDestroy() {\n    this._destroy.next();\n    this._destroy.complete();\n    this.stateChanges.complete();\n  }\n\n  /** Toggles the overlay panel open or closed. */\n  toggle(): void {\n    this.panelOpen ? this.close() : this.open();\n  }\n\n  /** Opens the overlay panel. */\n  open(): void {\n    if (this.disabled || !this.options || !this.options.length) {\n      return;\n    }\n\n    this._triggerRect = this.trigger.nativeElement.getBoundingClientRect();\n    // Note: The computed font-size will be a string pixel value (e.g. \"16px\").\n    // `parseInt` ignores the trailing 'px' and converts this to a number.\n    this._triggerFontSize = parseInt(getComputedStyle(this.trigger.nativeElement)['font-size']);\n\n    this._panelOpen = true;\n    this._keyManager.withHorizontalOrientation(null);\n    this._calculateOverlayPosition();\n    this._highlightCorrectOption();\n    this._changeDetectorRef.markForCheck();\n\n    // Set the font size on the panel element once it exists.\n    this._ngZone.onStable.asObservable().pipe(take(1)).subscribe(() => {\n      if (this._triggerFontSize && this.overlayDir.overlayRef &&\n          this.overlayDir.overlayRef.overlayElement) {\n        this.overlayDir.overlayRef.overlayElement.style.fontSize = `${this._triggerFontSize}px`;\n      }\n    });\n  }\n\n  /** Closes the overlay panel and focuses the host element. */\n  close(): void {\n    if (this._panelOpen) {\n      this._panelOpen = false;\n      this._keyManager.withHorizontalOrientation(this._isRtl() ? 'rtl' : 'ltr');\n      this._changeDetectorRef.markForCheck();\n      this._onTouched();\n    }\n  }\n\n  /**\n   * Sets the select's value. Part of the ControlValueAccessor interface\n   * required to integrate with Angular's core forms API.\n   *\n   * @param value New value to be written to the model.\n   */\n  writeValue(value: any): void {\n    if (this.options) {\n      this._setSelectionByValue(value);\n    }\n  }\n\n  /**\n   * Saves a callback function to be invoked when the select's value\n   * changes from user input. Part of the ControlValueAccessor interface\n   * required to integrate with Angular's core forms API.\n   *\n   * @param fn Callback to be triggered when the value changes.\n   */\n  registerOnChange(fn: (value: any) => void): void {\n    this._onChange = fn;\n  }\n\n  /**\n   * Saves a callback function to be invoked when the select is blurred\n   * by the user. Part of the ControlValueAccessor interface required\n   * to integrate with Angular's core forms API.\n   *\n   * @param fn Callback to be triggered when the component has been touched.\n   */\n  registerOnTouched(fn: () => {}): void {\n    this._onTouched = fn;\n  }\n\n  /**\n   * Disables the select. Part of the ControlValueAccessor interface required\n   * to integrate with Angular's core forms API.\n   *\n   * @param isDisabled Sets whether the component is disabled.\n   */\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n    this._changeDetectorRef.markForCheck();\n    this.stateChanges.next();\n  }\n\n  /** Whether or not the overlay panel is open. */\n  get panelOpen(): boolean {\n    return this._panelOpen;\n  }\n\n  /** The currently selected option. */\n  get selected(): MatOption | MatOption[] {\n    return this.multiple ? this._selectionModel.selected : this._selectionModel.selected[0];\n  }\n\n  /** The value displayed in the trigger. */\n  get triggerValue(): string {\n    if (this.empty) {\n      return '';\n    }\n\n    if (this._multiple) {\n      const selectedOptions = this._selectionModel.selected.map(option => option.viewValue);\n\n      if (this._isRtl()) {\n        selectedOptions.reverse();\n      }\n\n      // TODO(crisbeto): delimiter should be configurable for proper localization.\n      return selectedOptions.join(', ');\n    }\n\n    return this._selectionModel.selected[0].viewValue;\n  }\n\n  /** Whether the element is in RTL mode. */\n  _isRtl(): boolean {\n    return this._dir ? this._dir.value === 'rtl' : false;\n  }\n\n  /** Handles all keydown events on the select. */\n  _handleKeydown(event: KeyboardEvent): void {\n    if (!this.disabled) {\n      this.panelOpen ? this._handleOpenKeydown(event) : this._handleClosedKeydown(event);\n    }\n  }\n\n  /** Handles keyboard events while the select is closed. */\n  private _handleClosedKeydown(event: KeyboardEvent): void {\n    const keyCode = event.keyCode;\n    const isArrowKey = keyCode === DOWN_ARROW || keyCode === UP_ARROW ||\n        keyCode === LEFT_ARROW || keyCode === RIGHT_ARROW;\n    const isOpenKey = keyCode === ENTER || keyCode === SPACE;\n\n    // Open the select on ALT + arrow key to match the native <select>\n    if (isOpenKey || ((this.multiple || event.altKey) && isArrowKey)) {\n      event.preventDefault(); // prevents the page from scrolling down when pressing space\n      this.open();\n    } else if (!this.multiple) {\n      this._keyManager.onKeydown(event);\n    }\n  }\n\n  /** Handles keyboard events when the selected is open. */\n  private _handleOpenKeydown(event: KeyboardEvent): void {\n    const keyCode = event.keyCode;\n    const isArrowKey = keyCode === DOWN_ARROW || keyCode === UP_ARROW;\n    const manager = this._keyManager;\n\n    if (keyCode === HOME || keyCode === END) {\n      event.preventDefault();\n      keyCode === HOME ? manager.setFirstItemActive() : manager.setLastItemActive();\n    } else if (isArrowKey && event.altKey) {\n      // Close the select on ALT + arrow key to match the native <select>\n      event.preventDefault();\n      this.close();\n    } else if ((keyCode === ENTER || keyCode === SPACE) && manager.activeItem) {\n      event.preventDefault();\n      manager.activeItem._selectViaInteraction();\n    } else {\n      const previouslyFocusedIndex = manager.activeItemIndex;\n\n      manager.onKeydown(event);\n\n      if (this._multiple && isArrowKey && event.shiftKey && manager.activeItem &&\n          manager.activeItemIndex !== previouslyFocusedIndex) {\n        manager.activeItem._selectViaInteraction();\n      }\n    }\n  }\n\n  /**\n   * When the panel element is finished transforming in (though not fading in), it\n   * emits an event and focuses an option if the panel is open.\n   */\n  _onPanelDone(): void {\n    if (this.panelOpen) {\n      this._scrollTop = 0;\n      this.openedChange.emit(true);\n    } else {\n      this.openedChange.emit(false);\n      this._panelDoneAnimating = false;\n      this.overlayDir.offsetX = 0;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  /**\n   * When the panel content is done fading in, the _panelDoneAnimating property is\n   * set so the proper class can be added to the panel.\n   */\n  _onFadeInDone(): void {\n    this._panelDoneAnimating = this.panelOpen;\n    this._changeDetectorRef.markForCheck();\n  }\n\n  _onFocus() {\n    if (!this.disabled) {\n      this.focused = true;\n      this.stateChanges.next();\n    }\n  }\n\n  /**\n   * Calls the touched callback only if the panel is closed. Otherwise, the trigger will\n   * \"blur\" to the panel when it opens, causing a false positive.\n   */\n  _onBlur() {\n    this.focused = false;\n\n    if (!this.disabled && !this.panelOpen) {\n      this._onTouched();\n      this._changeDetectorRef.markForCheck();\n      this.stateChanges.next();\n    }\n  }\n\n  /**\n   * Callback that is invoked when the overlay panel has been attached.\n   */\n  _onAttached(): void {\n    this.overlayDir.positionChange.pipe(take(1)).subscribe(() => {\n      this._changeDetectorRef.detectChanges();\n      this._calculateOverlayOffsetX();\n      this.panel.nativeElement.scrollTop = this._scrollTop;\n    });\n  }\n\n  /** Returns the theme to be used on the panel. */\n  _getPanelTheme(): string {\n    return this._parentFormField ? `mat-${this._parentFormField.color}` : '';\n  }\n\n  /** Whether the select has a value. */\n  get empty(): boolean {\n    return !this._selectionModel || this._selectionModel.isEmpty();\n  }\n\n  private _initializeSelection(): void {\n    // Defer setting the value in order to avoid the \"Expression\n    // has changed after it was checked\" errors from Angular.\n    Promise.resolve().then(() => {\n      this._setSelectionByValue(this.ngControl ? this.ngControl.value : this._value);\n    });\n  }\n\n  /**\n   * Sets the selected option based on a value. If no option can be\n   * found with the designated value, the select trigger is cleared.\n   */\n  private _setSelectionByValue(value: any | any[], isUserInput = false): void {\n    if (this.multiple && value) {\n      if (!Array.isArray(value)) {\n        throw getMatSelectNonArrayValueError();\n      }\n\n      this._clearSelection();\n      value.forEach((currentValue: any) => this._selectValue(currentValue, isUserInput));\n      this._sortValues();\n    } else {\n      this._clearSelection();\n\n      const correspondingOption = this._selectValue(value, isUserInput);\n\n      // Shift focus to the active item. Note that we shouldn't do this in multiple\n      // mode, because we don't know what option the user interacted with last.\n      if (correspondingOption) {\n        this._keyManager.setActiveItem(correspondingOption);\n      }\n    }\n\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /**\n   * Finds and selects and option based on its value.\n   * @returns Option that has the corresponding value.\n   */\n  private _selectValue(value: any, isUserInput = false): MatOption | undefined {\n    const correspondingOption = this.options.find((option: MatOption) => {\n      try {\n        // Treat null as a special reset value.\n        return option.value != null && this._compareWith(option.value,  value);\n      } catch (error) {\n        if (isDevMode()) {\n          // Notify developers of errors in their comparator.\n          console.warn(error);\n        }\n        return false;\n      }\n    });\n\n    if (correspondingOption) {\n      isUserInput ? correspondingOption._selectViaInteraction() : correspondingOption.select();\n      this._selectionModel.select(correspondingOption);\n      this.stateChanges.next();\n    }\n\n    return correspondingOption;\n  }\n\n\n  /**\n   * Clears the select trigger and deselects every option in the list.\n   * @param skip Option that should not be deselected.\n   */\n  private _clearSelection(skip?: MatOption): void {\n    this._selectionModel.clear();\n    this.options.forEach(option => {\n      if (option !== skip) {\n        option.deselect();\n      }\n    });\n    this.stateChanges.next();\n  }\n\n  /** Sets up a key manager to listen to keyboard events on the overlay panel. */\n  private _initKeyManager() {\n    this._keyManager = new ActiveDescendantKeyManager<MatOption>(this.options)\n      .withTypeAhead()\n      .withVerticalOrientation()\n      .withHorizontalOrientation(this._isRtl() ? 'rtl' : 'ltr');\n\n      this._keyManager.tabOut.pipe(takeUntil(this._destroy)).subscribe(() => this.close());\n    this._keyManager.change.pipe(takeUntil(this._destroy)).subscribe(() => {\n      if (this._panelOpen && this.panel) {\n        this._scrollActiveOptionIntoView();\n      } else if (!this._panelOpen && !this.multiple && this._keyManager.activeItem) {\n        this._keyManager.activeItem._selectViaInteraction();\n      }\n    });\n  }\n\n  /** Drops current option subscriptions and IDs and resets from scratch. */\n  private _resetOptions(): void {\n    const changedOrDestroyed = merge(this.options.changes, this._destroy);\n\n    this.optionSelectionChanges\n      .pipe(takeUntil(changedOrDestroyed), filter(event => event.isUserInput))\n      .subscribe(event => {\n        this._onSelect(event.source);\n\n        if (!this.multiple && this._panelOpen) {\n          this.close();\n          this.focus();\n        }\n      });\n\n    // Listen to changes in the internal state of the options and react accordingly.\n    // Handles cases like the labels of the selected options changing.\n    merge(...this.options.map(option => option._stateChanges))\n      .pipe(takeUntil(changedOrDestroyed))\n      .subscribe(() => {\n        this._changeDetectorRef.markForCheck();\n        this.stateChanges.next();\n      });\n\n    this._setOptionIds();\n  }\n\n  /** Invoked when an option is clicked. */\n  private _onSelect(option: MatOption): void {\n    const wasSelected = this._selectionModel.isSelected(option);\n\n    // TODO(crisbeto): handle blank/null options inside multi-select.\n    if (this.multiple) {\n      this._selectionModel.toggle(option);\n      this.stateChanges.next();\n      wasSelected ? option.deselect() : option.select();\n      this._keyManager.setActiveItem(option);\n      this._sortValues();\n    } else {\n      this._clearSelection(option.value == null ? undefined : option);\n\n      if (option.value == null) {\n        this._propagateChanges(option.value);\n      } else {\n        this._selectionModel.select(option);\n        this.stateChanges.next();\n      }\n    }\n\n    if (wasSelected !== this._selectionModel.isSelected(option)) {\n      this._propagateChanges();\n    }\n  }\n\n  /**\n   * Sorts the model values, ensuring that they keep the same\n   * order that they have in the panel.\n   */\n  private _sortValues(): void {\n    if (this._multiple) {\n      this._selectionModel.clear();\n\n      this.options.forEach(option => {\n        if (option.selected) {\n          this._selectionModel.select(option);\n        }\n      });\n      this.stateChanges.next();\n    }\n  }\n\n  /** Emits change event to set the model value. */\n  private _propagateChanges(fallbackValue?: any): void {\n    let valueToEmit: any = null;\n\n    if (this.multiple) {\n      valueToEmit = (this.selected as MatOption[]).map(option => option.value);\n    } else {\n      valueToEmit = this.selected ? (this.selected as MatOption).value : fallbackValue;\n    }\n\n    this._value = valueToEmit;\n    this.valueChange.emit(valueToEmit);\n    this._onChange(valueToEmit);\n    this.selectionChange.emit(new MatSelectChange(this, valueToEmit));\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Records option IDs to pass to the aria-owns property. */\n  private _setOptionIds() {\n    this._optionIds = this.options.map(option => option.id).join(' ');\n  }\n\n  /**\n   * Highlights the selected item. If no option is selected, it will highlight\n   * the first item instead.\n   */\n  private _highlightCorrectOption(): void {\n    if (this._keyManager) {\n      if (this.empty) {\n        this._keyManager.setFirstItemActive();\n      } else {\n        this._keyManager.setActiveItem(this._selectionModel.selected[0]);\n      }\n    }\n  }\n\n  /** Scrolls the active option into view. */\n  private _scrollActiveOptionIntoView(): void {\n    const activeOptionIndex = this._keyManager.activeItemIndex || 0;\n    const labelCount = _countGroupLabelsBeforeOption(activeOptionIndex, this.options,\n        this.optionGroups);\n\n    this.panel.nativeElement.scrollTop = _getOptionScrollPosition(\n      activeOptionIndex + labelCount,\n      this._getItemHeight(),\n      this.panel.nativeElement.scrollTop,\n      SELECT_PANEL_MAX_HEIGHT\n    );\n  }\n\n  /** Focuses the select element. */\n  focus(): void {\n    this._elementRef.nativeElement.focus();\n  }\n\n  /** Gets the index of the provided option in the option list. */\n  private _getOptionIndex(option: MatOption): number | undefined {\n    return this.options.reduce((result: number, current: MatOption, index: number) => {\n      return result === undefined ? (option === current ? index : undefined) : result;\n    }, undefined);\n  }\n\n  /** Calculates the scroll position and x- and y-offsets of the overlay panel. */\n  private _calculateOverlayPosition(): void {\n    const itemHeight = this._getItemHeight();\n    const items = this._getItemCount();\n    const panelHeight = Math.min(items * itemHeight, SELECT_PANEL_MAX_HEIGHT);\n    const scrollContainerHeight = items * itemHeight;\n\n    // The farthest the panel can be scrolled before it hits the bottom\n    const maxScroll = scrollContainerHeight - panelHeight;\n\n    // If no value is selected we open the popup to the first item.\n    let selectedOptionOffset =\n        this.empty ? 0 : this._getOptionIndex(this._selectionModel.selected[0])!;\n\n    selectedOptionOffset += _countGroupLabelsBeforeOption(selectedOptionOffset, this.options,\n        this.optionGroups);\n\n    // We must maintain a scroll buffer so the selected option will be scrolled to the\n    // center of the overlay panel rather than the top.\n    const scrollBuffer = panelHeight / 2;\n    this._scrollTop = this._calculateOverlayScroll(selectedOptionOffset, scrollBuffer, maxScroll);\n    this._offsetY = this._calculateOverlayOffsetY(selectedOptionOffset, scrollBuffer, maxScroll);\n\n    this._checkOverlayWithinViewport(maxScroll);\n  }\n\n  /**\n   * Calculates the scroll position of the select's overlay panel.\n   *\n   * Attempts to center the selected option in the panel. If the option is\n   * too high or too low in the panel to be scrolled to the center, it clamps the\n   * scroll position to the min or max scroll positions respectively.\n   */\n  _calculateOverlayScroll(selectedIndex: number, scrollBuffer: number,\n                          maxScroll: number): number {\n    const itemHeight = this._getItemHeight();\n    const optionOffsetFromScrollTop = itemHeight * selectedIndex;\n    const halfOptionHeight = itemHeight / 2;\n\n    // Starts at the optionOffsetFromScrollTop, which scrolls the option to the top of the\n    // scroll container, then subtracts the scroll buffer to scroll the option down to\n    // the center of the overlay panel. Half the option height must be re-added to the\n    // scrollTop so the option is centered based on its middle, not its top edge.\n    const optimalScrollPosition = optionOffsetFromScrollTop - scrollBuffer + halfOptionHeight;\n    return Math.min(Math.max(0, optimalScrollPosition), maxScroll);\n  }\n\n  /** Returns the aria-label of the select component. */\n  get _ariaLabel(): string | null {\n    // If an ariaLabelledby value has been set, the select should not overwrite the\n    // `aria-labelledby` value by setting the ariaLabel to the placeholder.\n    return this.ariaLabelledby ? null : this.ariaLabel || this.placeholder;\n  }\n\n  /** Determines the `aria-activedescendant` to be set on the host. */\n  _getAriaActiveDescendant(): string | null {\n    if (this.panelOpen && this._keyManager && this._keyManager.activeItem) {\n      return this._keyManager.activeItem.id;\n    }\n\n    return null;\n  }\n\n  /**\n   * Sets the x-offset of the overlay panel in relation to the trigger's top start corner.\n   * This must be adjusted to align the selected option text over the trigger text when\n   * the panel opens. Will change based on LTR or RTL text direction. Note that the offset\n   * can't be calculated until the panel has been attached, because we need to know the\n   * content width in order to constrain the panel within the viewport.\n   */\n  private _calculateOverlayOffsetX(): void {\n    const overlayRect = this.overlayDir.overlayRef.overlayElement.getBoundingClientRect();\n    const viewportSize = this._viewportRuler.getViewportSize();\n    const isRtl = this._isRtl();\n    const paddingWidth = this.multiple ? SELECT_MULTIPLE_PANEL_PADDING_X + SELECT_PANEL_PADDING_X :\n                                         SELECT_PANEL_PADDING_X * 2;\n    let offsetX: number;\n\n    // Adjust the offset, depending on the option padding.\n    if (this.multiple) {\n      offsetX = SELECT_MULTIPLE_PANEL_PADDING_X;\n    } else {\n      let selected = this._selectionModel.selected[0] || this.options.first;\n      offsetX = selected && selected.group ? SELECT_PANEL_INDENT_PADDING_X : SELECT_PANEL_PADDING_X;\n    }\n\n    // Invert the offset in LTR.\n    if (!isRtl) {\n      offsetX *= -1;\n    }\n\n    // Determine how much the select overflows on each side.\n    const leftOverflow = 0 - (overlayRect.left + offsetX - (isRtl ? paddingWidth : 0));\n    const rightOverflow = overlayRect.right + offsetX - viewportSize.width\n                          + (isRtl ? 0 : paddingWidth);\n\n    // If the element overflows on either side, reduce the offset to allow it to fit.\n    if (leftOverflow > 0) {\n      offsetX += leftOverflow + SELECT_PANEL_VIEWPORT_PADDING;\n    } else if (rightOverflow > 0) {\n      offsetX -= rightOverflow + SELECT_PANEL_VIEWPORT_PADDING;\n    }\n\n    // Set the offset directly in order to avoid having to go through change detection and\n    // potentially triggering \"changed after it was checked\" errors.\n    this.overlayDir.offsetX = offsetX;\n    this.overlayDir.overlayRef.updatePosition();\n  }\n\n  /**\n   * Calculates the y-offset of the select's overlay panel in relation to the\n   * top start corner of the trigger. It has to be adjusted in order for the\n   * selected option to be aligned over the trigger when the panel opens.\n   */\n  private _calculateOverlayOffsetY(selectedIndex: number, scrollBuffer: number,\n                                  maxScroll: number): number {\n    const itemHeight = this._getItemHeight();\n    const optionHeightAdjustment = (itemHeight - this._triggerRect.height) / 2;\n    const maxOptionsDisplayed = Math.floor(SELECT_PANEL_MAX_HEIGHT / itemHeight);\n    let optionOffsetFromPanelTop: number;\n\n    // Disable offset if requested by user by returning 0 as value to offset\n    if (this._disableOptionCentering) {\n      return 0;\n    }\n\n    if (this._scrollTop === 0) {\n      optionOffsetFromPanelTop = selectedIndex * itemHeight;\n    } else if (this._scrollTop === maxScroll) {\n      const firstDisplayedIndex = this._getItemCount() - maxOptionsDisplayed;\n      const selectedDisplayIndex = selectedIndex - firstDisplayedIndex;\n\n      // The first item is partially out of the viewport. Therefore we need to calculate what\n      // portion of it is shown in the viewport and account for it in our offset.\n      let partialItemHeight =\n          itemHeight - (this._getItemCount() * itemHeight - SELECT_PANEL_MAX_HEIGHT) % itemHeight;\n\n      // Because the panel height is longer than the height of the options alone,\n      // there is always extra padding at the top or bottom of the panel. When\n      // scrolled to the very bottom, this padding is at the top of the panel and\n      // must be added to the offset.\n      optionOffsetFromPanelTop = selectedDisplayIndex * itemHeight + partialItemHeight;\n    } else {\n      // If the option was scrolled to the middle of the panel using a scroll buffer,\n      // its offset will be the scroll buffer minus the half height that was added to\n      // center it.\n      optionOffsetFromPanelTop = scrollBuffer - itemHeight / 2;\n    }\n\n    // The final offset is the option's offset from the top, adjusted for the height\n    // difference, multiplied by -1 to ensure that the overlay moves in the correct\n    // direction up the page.\n    return optionOffsetFromPanelTop * -1 - optionHeightAdjustment;\n  }\n\n  /**\n   * Checks that the attempted overlay position will fit within the viewport.\n   * If it will not fit, tries to adjust the scroll position and the associated\n   * y-offset so the panel can open fully on-screen. If it still won't fit,\n   * sets the offset back to 0 to allow the fallback position to take over.\n   */\n  private _checkOverlayWithinViewport(maxScroll: number): void {\n    const itemHeight = this._getItemHeight();\n    const viewportSize = this._viewportRuler.getViewportSize();\n\n    const topSpaceAvailable = this._triggerRect.top - SELECT_PANEL_VIEWPORT_PADDING;\n    const bottomSpaceAvailable =\n        viewportSize.height - this._triggerRect.bottom - SELECT_PANEL_VIEWPORT_PADDING;\n\n    const panelHeightTop = Math.abs(this._offsetY);\n    const totalPanelHeight =\n        Math.min(this._getItemCount() * itemHeight, SELECT_PANEL_MAX_HEIGHT);\n    const panelHeightBottom = totalPanelHeight - panelHeightTop - this._triggerRect.height;\n\n    if (panelHeightBottom > bottomSpaceAvailable) {\n      this._adjustPanelUp(panelHeightBottom, bottomSpaceAvailable);\n    } else if (panelHeightTop > topSpaceAvailable) {\n     this._adjustPanelDown(panelHeightTop, topSpaceAvailable, maxScroll);\n    } else {\n      this._transformOrigin = this._getOriginBasedOnOption();\n    }\n  }\n\n  /** Adjusts the overlay panel up to fit in the viewport. */\n  private _adjustPanelUp(panelHeightBottom: number, bottomSpaceAvailable: number) {\n    // Browsers ignore fractional scroll offsets, so we need to round.\n    const distanceBelowViewport = Math.round(panelHeightBottom - bottomSpaceAvailable);\n\n    // Scrolls the panel up by the distance it was extending past the boundary, then\n    // adjusts the offset by that amount to move the panel up into the viewport.\n    this._scrollTop -= distanceBelowViewport;\n    this._offsetY -= distanceBelowViewport;\n    this._transformOrigin = this._getOriginBasedOnOption();\n\n    // If the panel is scrolled to the very top, it won't be able to fit the panel\n    // by scrolling, so set the offset to 0 to allow the fallback position to take\n    // effect.\n    if (this._scrollTop <= 0) {\n      this._scrollTop = 0;\n      this._offsetY = 0;\n      this._transformOrigin = `50% bottom 0px`;\n    }\n  }\n\n  /** Adjusts the overlay panel down to fit in the viewport. */\n  private _adjustPanelDown(panelHeightTop: number, topSpaceAvailable: number,\n                           maxScroll: number) {\n    // Browsers ignore fractional scroll offsets, so we need to round.\n    const distanceAboveViewport = Math.round(panelHeightTop - topSpaceAvailable);\n\n    // Scrolls the panel down by the distance it was extending past the boundary, then\n    // adjusts the offset by that amount to move the panel down into the viewport.\n    this._scrollTop += distanceAboveViewport;\n    this._offsetY += distanceAboveViewport;\n    this._transformOrigin = this._getOriginBasedOnOption();\n\n    // If the panel is scrolled to the very bottom, it won't be able to fit the\n    // panel by scrolling, so set the offset to 0 to allow the fallback position\n    // to take effect.\n    if (this._scrollTop >= maxScroll) {\n      this._scrollTop = maxScroll;\n      this._offsetY = 0;\n      this._transformOrigin = `50% top 0px`;\n      return;\n    }\n  }\n\n  /** Sets the transform origin point based on the selected option. */\n  private _getOriginBasedOnOption(): string {\n    const itemHeight = this._getItemHeight();\n    const optionHeightAdjustment = (itemHeight - this._triggerRect.height) / 2;\n    const originY = Math.abs(this._offsetY) - optionHeightAdjustment + itemHeight / 2;\n    return `50% ${originY}px 0px`;\n  }\n\n  /** Calculates the amount of items in the select. This includes options and group labels. */\n  private _getItemCount(): number {\n    return this.options.length + this.optionGroups.length;\n  }\n\n  /** Calculates the height of the select's options. */\n  private _getItemHeight(): number {\n    return this._triggerFontSize * SELECT_ITEM_HEIGHT_EM;\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  setDescribedByIds(ids: string[]) {\n    this._ariaDescribedby = ids.join(' ');\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  onContainerClick() {\n    this.focus();\n    this.open();\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  get shouldLabelFloat(): boolean {\n    return this._panelOpen || !this.empty;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {AnimationEvent} from '@angular/animations';\nimport {AriaDescriber, FocusMonitor} from '@angular/cdk/a11y';\nimport {Directionality, Direction} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {ESCAPE} from '@angular/cdk/keycodes';\nimport {\n  ConnectionPositionPair,\n  HorizontalConnectionPos,\n  OriginConnectionPosition,\n  Overlay,\n  ScrollDispatcher,\n  OverlayConnectionPosition,\n  OverlayRef,\n  RepositionScrollStrategy,\n  ScrollStrategy,\n  VerticalConnectionPos,\n  FlexibleConnectedPositionStrategy,\n} from '@angular/cdk/overlay';\nimport {Platform} from '@angular/cdk/platform';\nimport {ComponentPortal} from '@angular/cdk/portal';\nimport {take} from 'rxjs/operators/take';\nimport {takeUntil} from 'rxjs/operators/takeUntil';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  Directive,\n  ElementRef,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  ViewContainerRef,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {Observable} from 'rxjs/Observable';\nimport {Subject} from 'rxjs/Subject';\nimport {matTooltipAnimations} from './tooltip-animations';\nimport {BreakpointObserver, Breakpoints, BreakpointState} from '@angular/cdk/layout';\n\n\nexport type TooltipPosition = 'left' | 'right' | 'above' | 'below' | 'before' | 'after';\n\n/** Time in ms to throttle repositioning after scroll events. */\nexport const SCROLL_THROTTLE_MS = 20;\n\n/** CSS class that will be attached to the overlay panel. */\nexport const TOOLTIP_PANEL_CLASS = 'mat-tooltip-panel';\n\n/** Creates an error to be thrown if the user supplied an invalid tooltip position. */\nexport function getMatTooltipInvalidPositionError(position: string) {\n  return Error(`Tooltip position \"${position}\" is invalid.`);\n}\n\n/** Injection token that determines the scroll handling while a tooltip is visible. */\nexport const MAT_TOOLTIP_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mat-tooltip-scroll-strategy');\n\n/** @docs-private */\nexport function MAT_TOOLTIP_SCROLL_STRATEGY_PROVIDER_FACTORY(overlay: Overlay):\n    () => RepositionScrollStrategy {\n  return () => overlay.scrollStrategies.reposition({ scrollThrottle: SCROLL_THROTTLE_MS });\n}\n\n/** @docs-private */\nexport const MAT_TOOLTIP_SCROLL_STRATEGY_PROVIDER = {\n  provide: MAT_TOOLTIP_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_TOOLTIP_SCROLL_STRATEGY_PROVIDER_FACTORY\n};\n\n/** Default `matTooltip` options that can be overridden. */\nexport interface MatTooltipDefaultOptions {\n  showDelay: number;\n  hideDelay: number;\n  touchendHideDelay: number;\n}\n\n/** Injection token to be used to override the default options for `matTooltip`. */\nexport const MAT_TOOLTIP_DEFAULT_OPTIONS =\n    new InjectionToken<MatTooltipDefaultOptions>('mat-tooltip-default-options');\n\n/**\n * Directive that attaches a material design tooltip to the host element. Animates the showing and\n * hiding of a tooltip provided position (defaults to below the element).\n *\n * https://material.google.com/components/tooltips.html\n */\n@Directive({\n  selector: '[matTooltip]',\n  exportAs: 'matTooltip',\n  host: {\n    '(longpress)': 'show()',\n    '(keydown)': '_handleKeydown($event)',\n    '(touchend)': '_handleTouchend()',\n  },\n})\nexport class MatTooltip implements OnDestroy {\n  _overlayRef: OverlayRef | null;\n  _tooltipInstance: TooltipComponent | null;\n\n  private _portal: ComponentPortal<TooltipComponent>;\n  private _position: TooltipPosition = 'below';\n  private _disabled: boolean = false;\n  private _tooltipClass: string|string[]|Set<string>|{[key: string]: any};\n\n  /** Allows the user to define the position of the tooltip relative to the parent element */\n  @Input('matTooltipPosition')\n  get position(): TooltipPosition { return this._position; }\n  set position(value: TooltipPosition) {\n    if (value !== this._position) {\n      this._position = value;\n\n      if (this._overlayRef) {\n        // TODO(andrewjs): When the overlay's position can be\n        // dynamically changed, do not destroy the tooltip.\n        this._detach();\n        this._updatePosition();\n      }\n    }\n  }\n\n  /** Disables the display of the tooltip. */\n  @Input('matTooltipDisabled')\n  get disabled(): boolean { return this._disabled; }\n  set disabled(value) {\n    this._disabled = coerceBooleanProperty(value);\n\n    // If tooltip is disabled, hide immediately.\n    if (this._disabled) {\n      this.hide(0);\n    }\n  }\n\n  /** The default delay in ms before showing the tooltip after show is called */\n  @Input('matTooltipShowDelay') showDelay = this._defaultOptions.showDelay;\n\n  /** The default delay in ms before hiding the tooltip after hide is called */\n  @Input('matTooltipHideDelay') hideDelay = this._defaultOptions.hideDelay;\n\n  private _message = '';\n\n  /** The message to be displayed in the tooltip */\n  @Input('matTooltip')\n  get message() { return this._message; }\n  set message(value: string) {\n    this._ariaDescriber.removeDescription(this._elementRef.nativeElement, this._message);\n\n    // If the message is not a string (e.g. number), convert it to a string and trim it.\n    this._message = value != null ? `${value}`.trim() : '';\n\n    if (!this._message && this._isTooltipVisible()) {\n      this.hide(0);\n    } else {\n      this._updateTooltipMessage();\n      this._ariaDescriber.describe(this._elementRef.nativeElement, this.message);\n    }\n  }\n\n  /** Classes to be passed to the tooltip. Supports the same syntax as `ngClass`. */\n  @Input('matTooltipClass')\n  get tooltipClass() { return this._tooltipClass; }\n  set tooltipClass(value: string|string[]|Set<string>|{[key: string]: any}) {\n    this._tooltipClass = value;\n    if (this._tooltipInstance) {\n      this._setTooltipClass(this._tooltipClass);\n    }\n  }\n\n  private _manualListeners = new Map<string, Function>();\n\n  /** Emits when the component is destroyed. */\n  private readonly _destroyed = new Subject<void>();\n\n  constructor(\n    private _overlay: Overlay,\n    private _elementRef: ElementRef,\n    private _scrollDispatcher: ScrollDispatcher,\n    private _viewContainerRef: ViewContainerRef,\n    private _ngZone: NgZone,\n    private _platform: Platform,\n    private _ariaDescriber: AriaDescriber,\n    private _focusMonitor: FocusMonitor,\n    @Inject(MAT_TOOLTIP_SCROLL_STRATEGY) private _scrollStrategy,\n    @Optional() private _dir: Directionality,\n    @Optional() @Inject(MAT_TOOLTIP_DEFAULT_OPTIONS)\n      private _defaultOptions: MatTooltipDefaultOptions) {\n\n    const element: HTMLElement = _elementRef.nativeElement;\n\n    // The mouse events shouldn't be bound on iOS devices, because\n    // they can prevent the first tap from firing its click event.\n    if (!_platform.IOS) {\n      this._manualListeners.set('mouseenter', () => this.show());\n      this._manualListeners.set('mouseleave', () => this.hide());\n\n      this._manualListeners\n        .forEach((listener, event) => _elementRef.nativeElement.addEventListener(event, listener));\n    } else if (element.nodeName === 'INPUT' || element.nodeName === 'TEXTAREA') {\n      // When we bind a gesture event on an element (in this case `longpress`), HammerJS\n      // will add some inline styles by default, including `user-select: none`. This is\n      // problematic on iOS, because it will prevent users from typing in inputs. If\n      // we're on iOS and the tooltip is attached on an input or textarea, we clear\n      // the `user-select` to avoid these issues.\n      element.style.webkitUserSelect = element.style.userSelect = '';\n    }\n\n    _focusMonitor.monitor(element).pipe(takeUntil(this._destroyed)).subscribe(origin => {\n      // Note that the focus monitor runs outside the Angular zone.\n      if (!origin) {\n        _ngZone.run(() => this.hide(0));\n      } else if (origin !== 'program') {\n        _ngZone.run(() => this.show());\n      }\n    });\n  }\n\n  /**\n   * Dispose the tooltip when destroyed.\n   */\n  ngOnDestroy() {\n    if (this._overlayRef) {\n      this._overlayRef.dispose();\n      this._tooltipInstance = null;\n    }\n\n    // Clean up the event listeners set in the constructor\n    if (!this._platform.IOS) {\n      this._manualListeners.forEach((listener, event) =>\n        this._elementRef.nativeElement.removeEventListener(event, listener));\n\n      this._manualListeners.clear();\n    }\n\n    this._destroyed.next();\n    this._destroyed.complete();\n\n    this._ariaDescriber.removeDescription(this._elementRef.nativeElement, this.message);\n    this._focusMonitor.stopMonitoring(this._elementRef.nativeElement);\n  }\n\n  /** Shows the tooltip after the delay in ms, defaults to tooltip-delay-show or 0ms if no input */\n  show(delay: number = this.showDelay): void {\n    if (this.disabled || !this.message) { return; }\n\n    const overlayRef = this._createOverlay();\n\n    this._detach();\n    this._portal = this._portal || new ComponentPortal(TooltipComponent, this._viewContainerRef);\n    this._tooltipInstance = overlayRef.attach(this._portal).instance;\n    this._tooltipInstance.afterHidden()\n      .pipe(takeUntil(this._destroyed))\n      .subscribe(() => this._detach());\n    this._setTooltipClass(this._tooltipClass);\n    this._updateTooltipMessage();\n    this._tooltipInstance!.show(this._position, delay);\n  }\n\n  /** Hides the tooltip after the delay in ms, defaults to tooltip-delay-hide or 0ms if no input */\n  hide(delay: number = this.hideDelay): void {\n    if (this._tooltipInstance) {\n      this._tooltipInstance.hide(delay);\n    }\n  }\n\n  /** Shows/hides the tooltip */\n  toggle(): void {\n    this._isTooltipVisible() ? this.hide() : this.show();\n  }\n\n  /** Returns true if the tooltip is currently visible to the user */\n  _isTooltipVisible(): boolean {\n    return !!this._tooltipInstance && this._tooltipInstance.isVisible();\n  }\n\n  /** Handles the keydown events on the host element. */\n  _handleKeydown(e: KeyboardEvent) {\n    if (this._isTooltipVisible() && e.keyCode === ESCAPE) {\n      e.stopPropagation();\n      this.hide(0);\n    }\n  }\n\n  /** Handles the touchend events on the host element. */\n  _handleTouchend() {\n    this.hide(this._defaultOptions.touchendHideDelay);\n  }\n\n  /** Create the overlay config and position strategy */\n  private _createOverlay(): OverlayRef {\n    if (this._overlayRef) {\n      return this._overlayRef;\n    }\n\n    const origin = this._getOrigin();\n    const overlay = this._getOverlayPosition();\n    const direction = this._dir ? this._dir.value : 'ltr';\n\n    // Create connected position strategy that listens for scroll events to reposition.\n    const strategy = this._overlay.position()\n      .flexibleConnectedTo(this._elementRef)\n      .withFlexibleHeight(false)\n      .withFlexibleWidth(false)\n      .withViewportMargin(8)\n      .withPositions([\n        {...origin.main, ...overlay.main},\n        {...origin.fallback, ...overlay.fallback}\n      ]);\n\n    const scrollableAncestors = this._scrollDispatcher\n      .getAncestorScrollContainers(this._elementRef);\n\n    strategy.withScrollableContainers(scrollableAncestors);\n\n    strategy.positionChanges.pipe(takeUntil(this._destroyed)).subscribe(change => {\n      if (this._tooltipInstance) {\n        if (change.scrollableViewProperties.isOverlayClipped && this._tooltipInstance.isVisible()) {\n          // After position changes occur and the overlay is clipped by\n          // a parent scrollable then close the tooltip.\n          this._ngZone.run(() => this.hide(0));\n        } else {\n          // Otherwise recalculate the origin based on the new position.\n          this._tooltipInstance._setTransformOrigin(change.connectionPair, direction);\n        }\n      }\n    });\n\n    this._overlayRef = this._overlay.create({\n      direction,\n      positionStrategy: strategy,\n      panelClass: TOOLTIP_PANEL_CLASS,\n      scrollStrategy: this._scrollStrategy()\n    });\n\n    this._overlayRef.detachments()\n      .pipe(takeUntil(this._destroyed))\n      .subscribe(() => this._detach());\n\n    return this._overlayRef;\n  }\n\n  /** Detaches the currently-attached tooltip. */\n  private _detach() {\n    if (this._overlayRef && this._overlayRef.hasAttached()) {\n      this._overlayRef.detach();\n    }\n\n    this._tooltipInstance = null;\n  }\n\n  /** Updates the position of the current tooltip. */\n  private _updatePosition() {\n    const position =\n        this._overlayRef!.getConfig().positionStrategy as FlexibleConnectedPositionStrategy;\n    const origin = this._getOrigin();\n    const overlay = this._getOverlayPosition();\n\n    position\n      .withPositions([\n        {...origin.main, ...overlay.main},\n        {...origin.fallback, ...overlay.fallback}\n      ]);\n  }\n\n  /**\n   * Returns the origin position and a fallback position based on the user's position preference.\n   * The fallback position is the inverse of the origin (e.g. `'below' -> 'above'`).\n   */\n  _getOrigin(): {main: OriginConnectionPosition, fallback: OriginConnectionPosition} {\n    const isLtr = !this._dir || this._dir.value == 'ltr';\n    const position = this.position;\n    let originPosition: OriginConnectionPosition;\n\n    if (position == 'above' || position == 'below') {\n      originPosition = {originX: 'center', originY: position == 'above' ? 'top' : 'bottom'};\n    } else if (\n      position == 'before' ||\n      (position == 'left' && isLtr) ||\n      (position == 'right' && !isLtr)) {\n      originPosition = {originX: 'start', originY: 'center'};\n    } else if (\n      position == 'after' ||\n      (position == 'right' && isLtr) ||\n      (position == 'left' && !isLtr)) {\n      originPosition = {originX: 'end', originY: 'center'};\n    } else {\n      throw getMatTooltipInvalidPositionError(position);\n    }\n\n    const {x, y} = this._invertPosition(originPosition.originX, originPosition.originY);\n\n    return {\n      main: originPosition,\n      fallback: {originX: x, originY: y}\n    };\n  }\n\n  /** Returns the overlay position and a fallback position based on the user's preference */\n  _getOverlayPosition(): {main: OverlayConnectionPosition, fallback: OverlayConnectionPosition} {\n    const isLtr = !this._dir || this._dir.value == 'ltr';\n    const position = this.position;\n    let overlayPosition: OverlayConnectionPosition;\n\n    if (position == 'above') {\n      overlayPosition = {overlayX: 'center', overlayY: 'bottom'};\n    } else if (position == 'below') {\n      overlayPosition = {overlayX: 'center', overlayY: 'top'};\n    } else if (\n      position == 'before' ||\n      (position == 'left' && isLtr) ||\n      (position == 'right' && !isLtr)) {\n      overlayPosition = {overlayX: 'end', overlayY: 'center'};\n    } else if (\n      position == 'after' ||\n      (position == 'right' && isLtr) ||\n      (position == 'left' && !isLtr)) {\n      overlayPosition = {overlayX: 'start', overlayY: 'center'};\n    } else {\n      throw getMatTooltipInvalidPositionError(position);\n    }\n\n    const {x, y} = this._invertPosition(overlayPosition.overlayX, overlayPosition.overlayY);\n\n    return {\n      main: overlayPosition,\n      fallback: {overlayX: x, overlayY: y}\n    };\n  }\n\n  /** Updates the tooltip message and repositions the overlay according to the new message length */\n  private _updateTooltipMessage() {\n    // Must wait for the message to be painted to the tooltip so that the overlay can properly\n    // calculate the correct positioning based on the size of the text.\n    if (this._tooltipInstance) {\n      this._tooltipInstance.message = this.message;\n      this._tooltipInstance._markForCheck();\n\n      this._ngZone.onMicrotaskEmpty.asObservable().pipe(\n        take(1),\n        takeUntil(this._destroyed)\n      ).subscribe(() => {\n        if (this._tooltipInstance) {\n          this._overlayRef!.updatePosition();\n        }\n      });\n    }\n  }\n\n  /** Updates the tooltip class */\n  private _setTooltipClass(tooltipClass: string|string[]|Set<string>|{[key: string]: any}) {\n    if (this._tooltipInstance) {\n      this._tooltipInstance.tooltipClass = tooltipClass;\n      this._tooltipInstance._markForCheck();\n    }\n  }\n\n  /** Inverts an overlay position. */\n  private _invertPosition(x: HorizontalConnectionPos, y: VerticalConnectionPos) {\n    if (this.position === 'above' || this.position === 'below') {\n      if (y === 'top') {\n        y = 'bottom';\n      } else if (y === 'bottom') {\n        y = 'top';\n      }\n    } else {\n      if (x === 'end') {\n        x = 'start';\n      } else if (x === 'start') {\n        x = 'end';\n      }\n    }\n\n    return {x, y};\n  }\n}\n\nexport type TooltipVisibility = 'initial' | 'visible' | 'hidden';\n\n/**\n * Internal component that wraps the tooltip's content.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-tooltip-component',\n  templateUrl: 'tooltip.html',\n  styleUrls: ['tooltip.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  animations: [matTooltipAnimations.tooltipState],\n  host: {\n    // Forces the element to have a layout in IE and Edge. This fixes issues where the element\n    // won't be rendered if the animations are disabled or there is no web animations polyfill.\n    '[style.zoom]': '_visibility === \"visible\" ? 1 : null',\n    '(body:click)': 'this._handleBodyInteraction()',\n    'aria-hidden': 'true',\n  }\n})\nexport class TooltipComponent {\n  /** Message to display in the tooltip */\n  message: string;\n\n  /** Classes to be added to the tooltip. Supports the same syntax as `ngClass`. */\n  tooltipClass: string|string[]|Set<string>|{[key: string]: any};\n\n  /** The timeout ID of any current timer set to show the tooltip */\n  _showTimeoutId: number;\n\n  /** The timeout ID of any current timer set to hide the tooltip */\n  _hideTimeoutId: number;\n\n  /** Property watched by the animation framework to show or hide the tooltip */\n  _visibility: TooltipVisibility = 'initial';\n\n  /** Whether interactions on the page should close the tooltip */\n  private _closeOnInteraction: boolean = false;\n\n  /** The transform origin used in the animation for showing and hiding the tooltip */\n  _transformOrigin: 'top' | 'bottom' | 'left' | 'right' = 'bottom';\n\n  /** Current position of the tooltip. */\n  private _position: TooltipPosition;\n\n  /** Subject for notifying that the tooltip has been hidden from the view */\n  private readonly _onHide: Subject<any> = new Subject();\n\n  /** Stream that emits whether the user has a handset-sized display.  */\n  _isHandset: Observable<BreakpointState> = this._breakpointObserver.observe(Breakpoints.Handset);\n\n  constructor(\n    private _changeDetectorRef: ChangeDetectorRef,\n    private _breakpointObserver: BreakpointObserver) {}\n\n  /**\n   * Shows the tooltip with an animation originating from the provided origin\n   * @param position Position of the tooltip.\n   * @param delay Amount of milliseconds to the delay showing the tooltip.\n   */\n  show(position: TooltipPosition, delay: number): void {\n    // Cancel the delayed hide if it is scheduled\n    if (this._hideTimeoutId) {\n      clearTimeout(this._hideTimeoutId);\n    }\n\n    // Body interactions should cancel the tooltip if there is a delay in showing.\n    this._closeOnInteraction = true;\n    this._position = position;\n    this._showTimeoutId = setTimeout(() => {\n      this._visibility = 'visible';\n\n      // Mark for check so if any parent component has set the\n      // ChangeDetectionStrategy to OnPush it will be checked anyways\n      this._markForCheck();\n    }, delay);\n  }\n\n  /**\n   * Begins the animation to hide the tooltip after the provided delay in ms.\n   * @param delay Amount of milliseconds to delay showing the tooltip.\n   */\n  hide(delay: number): void {\n    // Cancel the delayed show if it is scheduled\n    if (this._showTimeoutId) {\n      clearTimeout(this._showTimeoutId);\n    }\n\n    this._hideTimeoutId = setTimeout(() => {\n      this._visibility = 'hidden';\n\n      // Mark for check so if any parent component has set the\n      // ChangeDetectionStrategy to OnPush it will be checked anyways\n      this._markForCheck();\n    }, delay);\n  }\n\n  /** Returns an observable that notifies when the tooltip has been hidden from view. */\n  afterHidden(): Observable<void> {\n    return this._onHide.asObservable();\n  }\n\n  /** Whether the tooltip is being displayed. */\n  isVisible(): boolean {\n    return this._visibility === 'visible';\n  }\n\n  /** Sets the tooltip transform origin according to the position of the tooltip overlay. */\n  _setTransformOrigin(overlayPosition: ConnectionPositionPair, direction: Direction) {\n    const axis = (this._position === 'above' || this._position === 'below') ? 'Y' : 'X';\n    const position = axis == 'X' ? overlayPosition.overlayX : overlayPosition.overlayY;\n\n    if (position === 'top' || position === 'bottom') {\n      this._transformOrigin = position;\n    } else if (position === 'start') {\n      this._transformOrigin = direction === 'ltr' ? 'left' : 'right';\n    } else if (position === 'end') {\n      this._transformOrigin = direction === 'ltr' ? 'right' : 'left';\n    } else {\n      throw getMatTooltipInvalidPositionError(this._position);\n    }\n  }\n\n  _animationStart() {\n    this._closeOnInteraction = false;\n  }\n\n  _animationDone(event: AnimationEvent): void {\n    const toState = event.toState as TooltipVisibility;\n\n    if (toState === 'hidden' && !this.isVisible()) {\n      this._onHide.next();\n    }\n\n    if (toState === 'visible' || toState === 'hidden') {\n      this._closeOnInteraction = true;\n    }\n  }\n\n  /**\n   * Interactions on the HTML body should close the tooltip immediately as defined in the\n   * material design spec.\n   * https://material.google.com/components/tooltips.html#tooltips-interaction\n   */\n  _handleBodyInteraction(): void {\n    if (this._closeOnInteraction) {\n      this.hide(0);\n    }\n  }\n\n  /**\n   * Marks that the tooltip needs to be checked in the next change detection run.\n   * Mainly used for rendering the initial text before positioning a tooltip, which\n   * can be problematic in components with OnPush change detection.\n   */\n  _markForCheck(): void {\n    this._changeDetectorRef.markForCheck();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CdkStep, CdkStepper} from '@angular/cdk/stepper';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {\n  AfterContentInit,\n  Component,\n  ContentChild,\n  ContentChildren,\n  Directive,\n  forwardRef,\n  Inject,\n  QueryList,\n  SkipSelf,\n  ViewChildren,\n  ViewEncapsulation,\n  ChangeDetectorRef,\n  ChangeDetectionStrategy,\n  Optional,\n  TemplateRef,\n} from '@angular/core';\nimport {FormControl, FormGroupDirective, NgForm} from '@angular/forms';\nimport {ErrorStateMatcher} from '@angular/material/core';\nimport {MatStepHeader} from './step-header';\nimport {MatStepLabel} from './step-label';\nimport {takeUntil} from 'rxjs/operators/takeUntil';\nimport {matStepperAnimations} from './stepper-animations';\nimport {MatStepperIcon} from './stepper-icon';\n\n/** Workaround for https://github.com/angular/angular/issues/17849 */\nexport const _MatStep = CdkStep;\nexport const _MatStepper = CdkStepper;\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-step',\n  templateUrl: 'step.html',\n  providers: [{provide: ErrorStateMatcher, useExisting: MatStep}],\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matStep',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatStep extends CdkStep implements ErrorStateMatcher {\n  /** Content for step label given by `<ng-template matStepLabel>`. */\n  @ContentChild(MatStepLabel) stepLabel: MatStepLabel;\n\n  constructor(@Inject(forwardRef(() => MatStepper)) stepper: MatStepper,\n              @SkipSelf() private _errorStateMatcher: ErrorStateMatcher) {\n    super(stepper);\n  }\n\n  /** Custom error state matcher that additionally checks for validity of interacted form. */\n  isErrorState(control: FormControl | null, form: FormGroupDirective | NgForm | null): boolean {\n    const originalErrorState = this._errorStateMatcher.isErrorState(control, form);\n\n    // Custom error state checks for the validity of form that is not submitted or touched\n    // since user can trigger a form change by calling for another step without directly\n    // interacting with the current form.\n    const customErrorState = !!(control && control.invalid && this.interacted);\n\n    return originalErrorState || customErrorState;\n  }\n}\n\n\n@Directive({\n  selector: '[matStepper]'\n})\nexport class MatStepper extends CdkStepper implements AfterContentInit {\n  /** The list of step headers of the steps in the stepper. */\n  @ViewChildren(MatStepHeader) _stepHeader: QueryList<MatStepHeader>;\n\n  /** Steps that the stepper holds. */\n  @ContentChildren(MatStep) _steps: QueryList<MatStep>;\n\n  /** Custom icon overrides passed in by the consumer. */\n  @ContentChildren(MatStepperIcon) _icons: QueryList<MatStepperIcon>;\n\n  /** Consumer-specified template-refs to be used to override the header icons. */\n  _iconOverrides: {[key: string]: TemplateRef<any>} = {};\n\n  ngAfterContentInit() {\n    const icons = this._icons.toArray();\n    const editOverride = icons.find(icon => icon.name === 'edit');\n    const doneOverride = icons.find(icon => icon.name === 'done');\n\n    if (editOverride) {\n      this._iconOverrides.edit = editOverride.templateRef;\n    }\n\n    if (doneOverride) {\n      this._iconOverrides.done = doneOverride.templateRef;\n    }\n\n    // Mark the component for change detection whenever the content children query changes\n    this._steps.changes.pipe(takeUntil(this._destroyed)).subscribe(() => this._stateChanged());\n  }\n}\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-horizontal-stepper',\n  exportAs: 'matHorizontalStepper',\n  templateUrl: 'stepper-horizontal.html',\n  styleUrls: ['stepper.css'],\n  inputs: ['selectedIndex'],\n  host: {\n    'class': 'mat-stepper-horizontal',\n    'aria-orientation': 'horizontal',\n    'role': 'tablist',\n  },\n  animations: [matStepperAnimations.horizontalStepTransition],\n  providers: [{provide: MatStepper, useExisting: MatHorizontalStepper}],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatHorizontalStepper extends MatStepper { }\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-vertical-stepper',\n  exportAs: 'matVerticalStepper',\n  templateUrl: 'stepper-vertical.html',\n  styleUrls: ['stepper.css'],\n  inputs: ['selectedIndex'],\n  host: {\n    'class': 'mat-stepper-vertical',\n    'aria-orientation': 'vertical',\n    'role': 'tablist',\n  },\n  animations: [matStepperAnimations.verticalStepTransition],\n  providers: [{provide: MatStepper, useExisting: MatVerticalStepper}],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatVerticalStepper extends MatStepper {\n  constructor(@Optional() dir: Directionality, changeDetectorRef: ChangeDetectorRef) {\n    super(dir, changeDetectorRef);\n    this._orientation = 'vertical';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive} from '@angular/core';\nimport {CdkStepper, CdkStepperNext, CdkStepperPrevious} from '@angular/cdk/stepper';\nimport {MatStepper} from './stepper';\n\n/** Button that moves to the next step in a stepper workflow. */\n@Directive({\n  selector: 'button[matStepperNext]',\n  host: {\n    '(click)': '_stepper.next()',\n    '[type]': 'type',\n  },\n  inputs: ['type'],\n  providers: [{provide: CdkStepper, useExisting: MatStepper}]\n})\nexport class MatStepperNext extends CdkStepperNext {}\n\n/** Button that moves to the previous step in a stepper workflow. */\n@Directive({\n  selector: 'button[matStepperPrevious]',\n  host: {\n    '(click)': '_stepper.previous()',\n    '[type]': 'type',\n  },\n  inputs: ['type'],\n  providers: [{provide: CdkStepper, useExisting: MatStepper}]\n})\nexport class MatStepperPrevious extends CdkStepperPrevious {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {A11yModule} from '@angular/cdk/a11y';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {CdkStepperModule} from '@angular/cdk/stepper';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatButtonModule} from '@angular/material/button';\nimport {MatCommonModule, MatRippleModule, ErrorStateMatcher} from '@angular/material/core';\nimport {MatIconModule} from '@angular/material/icon';\nimport {MatStepHeader} from './step-header';\nimport {MatStepLabel} from './step-label';\nimport {MatStepperNext, MatStepperPrevious} from './stepper-button';\nimport {MatStepperIntl} from './stepper-intl';\nimport {MatStepperIcon} from './stepper-icon';\nimport {MatHorizontalStepper, MatStep, MatStepper, MatVerticalStepper} from './stepper';\n\n\n@NgModule({\n  imports: [\n    MatCommonModule,\n    CommonModule,\n    PortalModule,\n    MatButtonModule,\n    CdkStepperModule,\n    MatIconModule,\n    A11yModule,\n    MatRippleModule,\n  ],\n  exports: [\n    MatCommonModule,\n    MatHorizontalStepper,\n    MatVerticalStepper,\n    MatStep,\n    MatStepLabel,\n    MatStepper,\n    MatStepperNext,\n    MatStepperPrevious,\n    MatStepHeader,\n    MatStepperIcon,\n  ],\n  declarations: [\n    MatHorizontalStepper,\n    MatVerticalStepper,\n    MatStep,\n    MatStepLabel,\n    MatStepper,\n    MatStepperNext,\n    MatStepperPrevious,\n    MatStepHeader,\n    MatStepperIcon,\n  ],\n  providers: [MatStepperIntl, ErrorStateMatcher],\n})\nexport class MatStepperModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ChangeDetectionStrategy, Component, ViewEncapsulation} from '@angular/core';\nimport {CDK_TABLE_TEMPLATE, CdkTable} from '@angular/cdk/table';\n\n/**\n * Wrapper for the CdkTable with Material design styles.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-table',\n  exportAs: 'matTable',\n  template: CDK_TABLE_TEMPLATE,\n  styleUrls: ['table.css'],\n  host: {\n    'class': 'mat-table',\n  },\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatTable<T> extends CdkTable<T> { }\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, ElementRef, Input} from '@angular/core';\nimport {\n  CdkCell,\n  CdkCellDef,\n  CdkColumnDef,\n  CdkHeaderCell,\n  CdkHeaderCellDef,\n} from '@angular/cdk/table';\n\n/**\n * Cell definition for the mat-table.\n * Captures the template of a column's data row cell as well as cell-specific properties.\n */\n@Directive({\n  selector: '[matCellDef]',\n  providers: [{provide: CdkCellDef, useExisting: MatCellDef}]\n})\nexport class MatCellDef extends CdkCellDef { }\n\n/**\n * Header cell definition for the mat-table.\n * Captures the template of a column's header cell and as well as cell-specific properties.\n */\n@Directive({\n  selector: '[matHeaderCellDef]',\n  providers: [{provide: CdkHeaderCellDef, useExisting: MatHeaderCellDef}]\n})\nexport class MatHeaderCellDef extends CdkHeaderCellDef { }\n\n/**\n * Column definition for the mat-table.\n * Defines a set of cells available for a table column.\n */\n@Directive({\n  selector: '[matColumnDef]',\n  providers: [{provide: CdkColumnDef, useExisting: MatColumnDef}],\n})\nexport class MatColumnDef extends CdkColumnDef {\n  /** Unique name for this column. */\n  @Input('matColumnDef') name: string;\n}\n\n/** Header cell template container that adds the right classes and role. */\n@Directive({\n  selector: 'mat-header-cell',\n  host: {\n    'class': 'mat-header-cell',\n    'role': 'columnheader',\n  },\n})\nexport class MatHeaderCell extends CdkHeaderCell {\n  constructor(columnDef: CdkColumnDef,\n              elementRef: ElementRef) {\n    super(columnDef, elementRef);\n    elementRef.nativeElement.classList.add(`mat-column-${columnDef.cssClassFriendlyName}`);\n  }\n}\n\n/** Cell template container that adds the right classes and role. */\n@Directive({\n  selector: 'mat-cell',\n  host: {\n    'class': 'mat-cell',\n    'role': 'gridcell',\n  },\n})\nexport class MatCell extends CdkCell {\n  constructor(columnDef: CdkColumnDef,\n              elementRef: ElementRef) {\n    super(columnDef, elementRef);\n    elementRef.nativeElement.classList.add(`mat-column-${columnDef.cssClassFriendlyName}`);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ChangeDetectionStrategy, Component, Directive, ViewEncapsulation} from '@angular/core';\nimport {\n  CDK_ROW_TEMPLATE,\n  CdkHeaderRow,\n  CdkHeaderRowDef,\n  CdkRow,\n  CdkRowDef,\n} from '@angular/cdk/table';\n\n/**\n * Header row definition for the mat-table.\n * Captures the header row's template and other header properties such as the columns to display.\n */\n@Directive({\n  selector: '[matHeaderRowDef]',\n  providers: [{provide: CdkHeaderRowDef, useExisting: MatHeaderRowDef}],\n  inputs: ['columns: matHeaderRowDef'],\n})\nexport class MatHeaderRowDef extends CdkHeaderRowDef { }\n\n/**\n * Data row definition for the mat-table.\n * Captures the header row's template and other row properties such as the columns to display and\n * a when predicate that describes when this row should be used.\n */\n@Directive({\n  selector: '[matRowDef]',\n  providers: [{provide: CdkRowDef, useExisting: MatRowDef}],\n  inputs: ['columns: matRowDefColumns', 'when: matRowDefWhen'],\n})\nexport class MatRowDef<T> extends CdkRowDef<T> {\n}\n\n/** Header template container that contains the cell outlet. Adds the right class and role. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-header-row',\n  template: CDK_ROW_TEMPLATE,\n  host: {\n    'class': 'mat-header-row',\n    'role': 'row',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matHeaderRow',\n})\nexport class MatHeaderRow extends CdkHeaderRow { }\n\n/** Data row template container that contains the cell outlet. Adds the right class and role. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-row',\n  template: CDK_ROW_TEMPLATE,\n  host: {\n    'class': 'mat-row',\n    'role': 'row',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matRow',\n})\nexport class MatRow extends CdkRow { }\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatTable} from './table';\nimport {CdkTableModule} from '@angular/cdk/table';\nimport {MatCell, MatCellDef, MatColumnDef, MatHeaderCell, MatHeaderCellDef} from './cell';\nimport {MatHeaderRow, MatHeaderRowDef, MatRow, MatRowDef} from './row';\nimport {CommonModule} from '@angular/common';\nimport {MatCommonModule} from '@angular/material/core';\n\n@NgModule({\n  imports: [CdkTableModule, CommonModule, MatCommonModule],\n  exports: [MatTable, MatCellDef, MatHeaderCellDef, MatColumnDef,\n    MatHeaderCell, MatCell, MatHeaderRow, MatRow,\n    MatHeaderRowDef, MatRowDef],\n  declarations: [MatTable, MatCellDef, MatHeaderCellDef, MatColumnDef,\n    MatHeaderCell, MatCell, MatHeaderRow, MatRow,\n    MatHeaderRowDef, MatRowDef],\n})\nexport class MatTableModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {DataSource} from '@angular/cdk/table';\nimport {BehaviorSubject} from 'rxjs/BehaviorSubject';\nimport {MatPaginator} from '@angular/material/paginator';\nimport {MatSort} from '@angular/material/sort';\nimport {Subscription} from 'rxjs/Subscription';\nimport {combineLatest} from 'rxjs/operators/combineLatest';\nimport {map} from 'rxjs/operators/map';\nimport {startWith} from 'rxjs/operators/startWith';\nimport {empty} from 'rxjs/observable/empty';\nimport {_isNumberValue} from '@angular/cdk/coercion';\n\n/**\n * Data source that accepts a client-side data array and includes native support of filtering,\n * sorting (using MatSort), and pagination (using MatPaginator).\n *\n * Allows for sort customization by overriding sortingDataAccessor, which defines how data\n * properties are accessed. Also allows for filter customization by overriding filterTermAccessor,\n * which defines how row data is converted to a string for filter matching.\n */\nexport class MatTableDataSource<T> extends DataSource<T> {\n  /** Stream that emits when a new data array is set on the data source. */\n  private readonly _data: BehaviorSubject<T[]>;\n\n  /** Stream emitting render data to the table (depends on ordered data changes). */\n  private readonly _renderData = new BehaviorSubject<T[]>([]);\n\n  /** Stream that emits when a new filter string is set on the data source. */\n  private readonly _filter = new BehaviorSubject<string>('');\n\n  /**\n   * Subscription to the changes that should trigger an update to the table's rendered rows, such\n   * as filtering, sorting, pagination, or base data changes.\n   */\n  _renderChangesSubscription: Subscription;\n\n  /**\n   * The filtered set of data that has been matched by the filter string, or all the data if there\n   * is no filter. Useful for knowing the set of data the table represents.\n   * For example, a 'selectAll()' function would likely want to select the set of filtered data\n   * shown to the user rather than all the data.\n   */\n  filteredData: T[];\n\n  /** Array of data that should be rendered by the table, where each object represents one row. */\n  get data() { return this._data.value; }\n  set data(data: T[]) { this._data.next(data); }\n\n  /**\n   * Filter term that should be used to filter out objects from the data array. To override how\n   * data objects match to this filter string, provide a custom function for filterPredicate.\n   */\n  get filter(): string { return this._filter.value; }\n  set filter(filter: string) { this._filter.next(filter); }\n\n  /**\n   * Instance of the MatSort directive used by the table to control its sorting. Sort changes\n   * emitted by the MatSort will trigger an update to the table's rendered data.\n   */\n  get sort(): MatSort | null { return this._sort; }\n  set sort(sort: MatSort|null) {\n    this._sort = sort;\n    this._updateChangeSubscription();\n  }\n  private _sort: MatSort|null;\n\n  /**\n   * Instance of the MatPaginator component used by the table to control what page of the data is\n   * displayed. Page changes emitted by the MatPaginator will trigger an update to the\n   * table's rendered data.\n   *\n   * Note that the data source uses the paginator's properties to calculate which page of data\n   * should be displayed. If the paginator receives its properties as template inputs,\n   * e.g. `[pageLength]=100` or `[pageIndex]=1`, then be sure that the paginator's view has been\n   * initialized before assigning it to this data source.\n   */\n  get paginator(): MatPaginator | null { return this._paginator; }\n  set paginator(paginator: MatPaginator|null) {\n    this._paginator = paginator;\n    this._updateChangeSubscription();\n  }\n  private _paginator: MatPaginator|null;\n\n  /**\n   * Data accessor function that is used for accessing data properties for sorting through\n   * the default sortData function.\n   * This default function assumes that the sort header IDs (which defaults to the column name)\n   * matches the data's properties (e.g. column Xyz represents data['Xyz']).\n   * May be set to a custom function for different behavior.\n   * @param data Data object that is being accessed.\n   * @param sortHeaderId The name of the column that represents the data.\n   */\n  sortingDataAccessor: ((data: T, sortHeaderId: string) => string|number) =\n      (data: T, sortHeaderId: string): string|number => {\n    const value: any = data[sortHeaderId];\n    return _isNumberValue(value) ? Number(value) : value;\n  }\n\n  /**\n   * Gets a sorted copy of the data array based on the state of the MatSort. Called\n   * after changes are made to the filtered data or when sort changes are emitted from MatSort.\n   * By default, the function retrieves the active sort and its direction and compares data\n   * by retrieving data using the sortingDataAccessor. May be overridden for a custom implementation\n   * of data ordering.\n   * @param data The array of data that should be sorted.\n   * @param sort The connected MatSort that holds the current sort state.\n   */\n  sortData: ((data: T[], sort: MatSort) => T[]) = (data: T[], sort: MatSort): T[] => {\n    const active = sort.active;\n    const direction = sort.direction;\n    if (!active || direction == '') { return data; }\n\n    return data.sort((a, b) => {\n      let valueA = this.sortingDataAccessor(a, active);\n      let valueB = this.sortingDataAccessor(b, active);\n\n      // If both valueA and valueB exist (truthy), then compare the two. Otherwise, check if\n      // one value exists while the other doesn't. In this case, existing value should come first.\n      // This avoids inconsistent results when comparing values to undefined/null.\n      // If neither value exists, return 0 (equal).\n      let comparatorResult = 0;\n      if (valueA && valueB) {\n        // Check if one value is greater than the other; if equal, comparatorResult should remain 0.\n        if (valueA > valueB) {\n          comparatorResult = 1;\n        } else if (valueA < valueB) {\n          comparatorResult = -1;\n        }\n      } else if (valueA) {\n        comparatorResult = 1;\n      } else if (valueB) {\n        comparatorResult = -1;\n      }\n\n      return comparatorResult * (direction == 'asc' ? 1 : -1);\n    });\n  }\n\n  /**\n   * Checks if a data object matches the data source's filter string. By default, each data object\n   * is converted to a string of its properties and returns true if the filter has\n   * at least one occurrence in that string. By default, the filter string has its whitespace\n   * trimmed and the match is case-insensitive. May be overridden for a custom implementation of\n   * filter matching.\n   * @param data Data object used to check against the filter.\n   * @param filter Filter string that has been set on the data source.\n   * @returns Whether the filter matches against the data\n   */\n  filterPredicate: ((data: T, filter: string) => boolean) = (data: T, filter: string): boolean => {\n    // Transform the data into a lowercase string of all property values.\n    const accumulator = (currentTerm, key) => currentTerm + data[key];\n    const dataStr = Object.keys(data).reduce(accumulator, '').toLowerCase();\n\n    // Transform the filter by converting it to lowercase and removing whitespace.\n    const transformedFilter = filter.trim().toLowerCase();\n\n    return dataStr.indexOf(transformedFilter) != -1;\n  }\n\n  constructor(initialData: T[] = []) {\n    super();\n    this._data = new BehaviorSubject<T[]>(initialData);\n    this._updateChangeSubscription();\n  }\n\n  /**\n   * Subscribe to changes that should trigger an update to the table's rendered rows. When the\n   * changes occur, process the current state of the filter, sort, and pagination along with\n   * the provided base data and send it to the table for rendering.\n   */\n  _updateChangeSubscription() {\n    // Sorting and/or pagination should be watched if MatSort and/or MatPaginator are provided.\n    // Otherwise, use an empty observable stream to take their place.\n    const sortChange = this._sort ? this._sort.sortChange : empty();\n    const pageChange = this._paginator ? this._paginator.page : empty();\n\n    if (this._renderChangesSubscription) {\n      this._renderChangesSubscription.unsubscribe();\n    }\n\n    // Watch for base data or filter changes to provide a filtered set of data.\n    this._renderChangesSubscription = this._data.pipe(\n      combineLatest(this._filter),\n      map(([data]) => this._filterData(data)),\n      // Watch for filtered data or sort changes to provide an ordered set of data.\n      combineLatest(sortChange.pipe(startWith(null!))),\n      map(([data]) => this._orderData(data)),\n      // Watch for ordered data or page changes to provide a paged set of data.\n      combineLatest(pageChange.pipe(startWith(null!))),\n      map(([data]) => this._pageData(data))\n    )\n    // Watched for paged data changes and send the result to the table to render.\n    .subscribe(data => this._renderData.next(data));\n  }\n\n  /**\n   * Returns a filtered data array where each filter object contains the filter string within\n   * the result of the filterTermAccessor function. If no filter is set, returns the data array\n   * as provided.\n   */\n  _filterData(data: T[]) {\n    // If there is a filter string, filter out data that does not contain it.\n    // Each data object is converted to a string using the function defined by filterTermAccessor.\n    // May be overridden for customization.\n    this.filteredData =\n        !this.filter ? data : data.filter(obj => this.filterPredicate(obj, this.filter));\n\n    if (this.paginator) { this._updatePaginator(this.filteredData.length); }\n\n    return this.filteredData;\n  }\n\n  /**\n   * Returns a sorted copy of the data if MatSort has a sort applied, otherwise just returns the\n   * data array as provided. Uses the default data accessor for data lookup, unless a\n   * sortDataAccessor function is defined.\n   */\n  _orderData(data: T[]): T[] {\n    // If there is no active sort or direction, return the data without trying to sort.\n    if (!this.sort) { return data; }\n\n    return this.sortData(data.slice(), this.sort);\n  }\n\n  /**\n   * Returns a paged splice of the provided data array according to the provided MatPaginator's page\n   * index and length. If there is no paginator provided, returns the data array as provided.\n   */\n  _pageData(data: T[]): T[] {\n    if (!this.paginator) { return data; }\n\n    const startIndex = this.paginator.pageIndex * this.paginator.pageSize;\n    return data.slice().splice(startIndex, this.paginator.pageSize);\n  }\n\n  /**\n   * Updates the paginator to reflect the length of the filtered data, and makes sure that the page\n   * index does not exceed the paginator's last page. Values are changed in a resolved promise to\n   * guard against making property changes within a round of change detection.\n   */\n  _updatePaginator(filteredDataLength: number) {\n    Promise.resolve().then(() => {\n      if (!this.paginator) { return; }\n\n      this.paginator.length = filteredDataLength;\n\n      // If the page index is set beyond the page, reduce it to the last page.\n      if (this.paginator.pageIndex > 0) {\n        const lastPageIndex = Math.ceil(this.paginator.length / this.paginator.pageSize) - 1 || 0;\n        this.paginator.pageIndex = Math.min(this.paginator.pageIndex, lastPageIndex);\n      }\n    });\n  }\n\n  /**\n   * Used by the MatTable. Called when it connects to the data source.\n   * @docs-private\n   */\n  connect() { return this._renderData; }\n\n  /**\n   * Used by the MatTable. Called when it is destroyed. No-op.\n   * @docs-private\n   */\n  disconnect() { }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, ElementRef, NgZone} from '@angular/core';\n\n\n/**\n * The ink-bar is used to display and animate the line underneath the current active tab label.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-ink-bar',\n  host: {\n    'class': 'mat-ink-bar',\n  },\n})\nexport class MatInkBar {\n  constructor(\n    private _elementRef: ElementRef,\n    private _ngZone: NgZone) {}\n\n  /**\n   * Calculates the styles from the provided element in order to align the ink-bar to that element.\n   * Shows the ink bar if previously set as hidden.\n   * @param element\n   */\n  alignToElement(element: HTMLElement) {\n    this.show();\n\n    if (typeof requestAnimationFrame !== 'undefined') {\n      this._ngZone.runOutsideAngular(() => {\n        requestAnimationFrame(() => this._setStyles(element));\n      });\n    } else {\n      this._setStyles(element);\n    }\n  }\n\n  /** Shows the ink bar. */\n  show(): void {\n    this._elementRef.nativeElement.style.visibility = 'visible';\n  }\n\n  /** Hides the ink bar. */\n  hide(): void {\n    this._elementRef.nativeElement.style.visibility = 'hidden';\n  }\n\n  /**\n   * Sets the proper styles to the ink bar element.\n   * @param element\n   */\n  private _setStyles(element: HTMLElement) {\n    const inkBar: HTMLElement = this._elementRef.nativeElement;\n\n    inkBar.style.left = element ? (element.offsetLeft || 0) + 'px' : '0';\n    inkBar.style.width = element ? (element.offsetWidth || 0) + 'px' : '0';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, TemplateRef, ViewContainerRef} from '@angular/core';\nimport {CdkPortal} from '@angular/cdk/portal';\n\n/** Used to flag tab labels for use with the portal directive */\n@Directive({\n  selector: '[mat-tab-label], [matTabLabel]',\n})\nexport class MatTabLabel extends CdkPortal {\n  constructor(templateRef: TemplateRef<any>, viewContainerRef: ViewContainerRef) {\n    super(templateRef, viewContainerRef);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, TemplateRef} from '@angular/core';\n\n/** Decorates the `ng-template` tags and reads out the template from it. */\n@Directive({selector: '[matTabContent]'})\nexport class MatTabContent {\n  constructor(public template: TemplateRef<any>) { }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {TemplatePortal} from '@angular/cdk/portal';\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  ContentChild,\n  Input,\n  OnChanges,\n  OnDestroy,\n  OnInit,\n  SimpleChanges,\n  TemplateRef,\n  ViewChild,\n  ViewContainerRef,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {CanDisable, mixinDisabled} from '@angular/material/core';\nimport {Subject} from 'rxjs/Subject';\nimport {MatTabLabel} from './tab-label';\nimport {MatTabContent} from './tab-content';\n\n\n// Boilerplate for applying mixins to MatTab.\n/** @docs-private */\nexport class MatTabBase {}\nexport const _MatTabMixinBase = mixinDisabled(MatTabBase);\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-tab',\n  templateUrl: 'tab.html',\n  inputs: ['disabled'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matTab',\n})\nexport class MatTab extends _MatTabMixinBase implements OnInit, CanDisable, OnChanges, OnDestroy {\n  /** Content for the tab label given by `<ng-template mat-tab-label>`. */\n  @ContentChild(MatTabLabel) templateLabel: MatTabLabel;\n\n  /**\n   * Template provided in the tab content that will be used if present, used to enable lazy-loading\n   */\n  @ContentChild(MatTabContent, {read: TemplateRef}) _explicitContent: TemplateRef<any>;\n\n  /** Template inside the MatTab view that contains an `<ng-content>`. */\n  @ViewChild(TemplateRef) _implicitContent: TemplateRef<any>;\n\n  /** The plain text label for the tab, used when there is no template label. */\n  @Input('label') textLabel: string = '';\n\n  /** The portal that will be the hosted content of the tab */\n  private _contentPortal: TemplatePortal | null = null;\n\n  /** @docs-private */\n  get content(): TemplatePortal | null {\n    return this._contentPortal;\n  }\n\n  /** Emits whenever the label changes. */\n  readonly _labelChange = new Subject<void>();\n\n  /** Emits whenever the disable changes */\n  readonly _disableChange = new Subject<void>();\n\n  /**\n   * The relatively indexed position where 0 represents the center, negative is left, and positive\n   * represents the right.\n   */\n  position: number | null = null;\n\n  /**\n   * The initial relatively index origin of the tab if it was created and selected after there\n   * was already a selected tab. Provides context of what position the tab should originate from.\n   */\n  origin: number | null = null;\n\n  /**\n   * Whether the tab is currently active.\n   */\n  isActive = false;\n\n  constructor(private _viewContainerRef: ViewContainerRef) {\n    super();\n  }\n\n  ngOnChanges(changes: SimpleChanges): void {\n    if (changes.hasOwnProperty('textLabel')) {\n      this._labelChange.next();\n    }\n\n    if (changes.hasOwnProperty('disabled')) {\n      this._disableChange.next();\n    }\n  }\n\n  ngOnDestroy(): void {\n    this._disableChange.complete();\n    this._labelChange.complete();\n  }\n\n  ngOnInit(): void {\n    this._contentPortal = new TemplatePortal(\n        this._explicitContent || this._implicitContent, this._viewContainerRef);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/** Animations used by the Material tabs. */\nexport const matTabsAnimations: {\n  readonly translateTab: AnimationTriggerMetadata;\n} = {\n  /** Animation translates a tab along the X axis. */\n  translateTab: trigger('translateTab', [\n    // Note: transitions to `none` instead of 0, because some browsers might blur the content.\n    state('center, void, left-origin-center, right-origin-center', style({transform: 'none'})),\n    state('left', style({transform: 'translate3d(-100%, 0, 0)'})),\n    state('right', style({transform: 'translate3d(100%, 0, 0)'})),\n    transition('* => left, * => right, left => center, right => center',\n        animate('500ms cubic-bezier(0.35, 0, 0.25, 1)')),\n    transition('void => left-origin-center', [\n      style({transform: 'translate3d(-100%, 0, 0)'}),\n      animate('500ms cubic-bezier(0.35, 0, 0.25, 1)')\n    ]),\n    transition('void => right-origin-center', [\n      style({transform: 'translate3d(100%, 0, 0)'}),\n      animate('500ms cubic-bezier(0.35, 0, 0.25, 1)')\n    ])\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  Input,\n  Inject,\n  Output,\n  EventEmitter,\n  OnDestroy,\n  OnInit,\n  ElementRef,\n  Directive,\n  Optional,\n  ViewEncapsulation,\n  ChangeDetectionStrategy,\n  ComponentFactoryResolver,\n  ViewContainerRef,\n  forwardRef,\n  ViewChild,\n} from '@angular/core';\nimport {AnimationEvent} from '@angular/animations';\nimport {TemplatePortal, CdkPortalOutlet, PortalHostDirective} from '@angular/cdk/portal';\nimport {Directionality, Direction} from '@angular/cdk/bidi';\nimport {Subscription} from 'rxjs/Subscription';\nimport {matTabsAnimations} from './tabs-animations';\n\n/**\n * These position states are used internally as animation states for the tab body. Setting the\n * position state to left, right, or center will transition the tab body from its current\n * position to its respective state. If there is not current position (void, in the case of a new\n * tab body), then there will be no transition animation to its state.\n *\n * In the case of a new tab body that should immediately be centered with an animating transition,\n * then left-origin-center or right-origin-center can be used, which will use left or right as its\n * psuedo-prior state.\n */\nexport type MatTabBodyPositionState =\n    'left' | 'center' | 'right' | 'left-origin-center' | 'right-origin-center';\n\n/**\n * The origin state is an internally used state that is set on a new tab body indicating if it\n * began to the left or right of the prior selected index. For example, if the selected index was\n * set to 1, and a new tab is created and selected at index 2, then the tab body would have an\n * origin of right because its index was greater than the prior selected index.\n */\nexport type MatTabBodyOriginState = 'left' | 'right';\n\n/**\n * The portal host directive for the contents of the tab.\n * @docs-private\n */\n@Directive({\n  selector: '[matTabBodyHost]'\n})\nexport class MatTabBodyPortal extends CdkPortalOutlet implements OnInit, OnDestroy {\n  /** A subscription to events for when the tab body begins centering. */\n  private _centeringSub: Subscription;\n  /** A subscription to events for when the tab body finishes leaving from center position. */\n  private _leavingSub: Subscription;\n\n  constructor(\n    _componentFactoryResolver: ComponentFactoryResolver,\n    _viewContainerRef: ViewContainerRef,\n    @Inject(forwardRef(() => MatTabBody)) private _host: MatTabBody) {\n      super(_componentFactoryResolver, _viewContainerRef);\n  }\n\n  /** Set initial visibility or set up subscription for changing visibility. */\n  ngOnInit(): void {\n    if (this._host._isCenterPosition(this._host._position)) {\n      this.attach(this._host._content);\n    }\n    this._centeringSub = this._host._beforeCentering.subscribe((isCentering: boolean) => {\n      if (isCentering && !this.hasAttached()) {\n        this.attach(this._host._content);\n      }\n    });\n\n    this._leavingSub = this._host._afterLeavingCenter.subscribe(() => {\n      this.detach();\n    });\n  }\n\n  /** Clean up centering subscription. */\n  ngOnDestroy(): void {\n    if (this._centeringSub && !this._centeringSub.closed) {\n      this._centeringSub.unsubscribe();\n    }\n\n    if (this._leavingSub && !this._leavingSub.closed) {\n      this._leavingSub.unsubscribe();\n    }\n  }\n}\n\n/**\n * Wrapper for the contents of a tab.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-tab-body',\n  templateUrl: 'tab-body.html',\n  styleUrls: ['tab-body.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  animations: [matTabsAnimations.translateTab],\n  host: {\n    'class': 'mat-tab-body',\n  },\n})\nexport class MatTabBody implements OnInit {\n  /** Event emitted when the tab begins to animate towards the center as the active tab. */\n  @Output() readonly _onCentering: EventEmitter<number> = new EventEmitter<number>();\n\n  /** Event emitted before the centering of the tab begins. */\n  @Output() readonly _beforeCentering: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n  /** Event emitted before the centering of the tab begins. */\n  @Output() readonly _afterLeavingCenter: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n  /** Event emitted when the tab completes its animation towards the center. */\n  @Output() readonly _onCentered: EventEmitter<void> = new EventEmitter<void>(true);\n\n   /** The portal host inside of this container into which the tab body content will be loaded. */\n  @ViewChild(PortalHostDirective) _portalHost: PortalHostDirective;\n\n  /** The tab body content to display. */\n  @Input('content') _content: TemplatePortal;\n\n  /** The shifted index position of the tab body, where zero represents the active center tab. */\n  @Input()\n  set position(position: number) {\n    if (position < 0) {\n      this._position = this._getLayoutDirection() == 'ltr' ? 'left' : 'right';\n    } else if (position > 0) {\n      this._position = this._getLayoutDirection() == 'ltr' ? 'right' : 'left';\n    } else {\n      this._position = 'center';\n    }\n  }\n  _position: MatTabBodyPositionState;\n\n  /** The origin position from which this tab should appear when it is centered into view. */\n  @Input()\n  set origin(origin: number) {\n    if (origin == null) { return; }\n\n    const dir = this._getLayoutDirection();\n    if ((dir == 'ltr' && origin <= 0) || (dir == 'rtl' && origin > 0)) {\n      this._origin = 'left';\n    } else {\n      this._origin = 'right';\n    }\n  }\n  _origin: MatTabBodyOriginState;\n\n  constructor(private _elementRef: ElementRef,\n              @Optional() private _dir: Directionality) { }\n\n  /**\n   * After initialized, check if the content is centered and has an origin. If so, set the\n   * special position states that transition the tab from the left or right before centering.\n   */\n  ngOnInit() {\n    if (this._position == 'center' && this._origin) {\n      this._position = this._origin == 'left' ? 'left-origin-center' : 'right-origin-center';\n    }\n  }\n\n  _onTranslateTabStarted(e: AnimationEvent): void {\n    const isCentering = this._isCenterPosition(e.toState);\n    this._beforeCentering.emit(isCentering);\n    if (isCentering) {\n      this._onCentering.emit(this._elementRef.nativeElement.clientHeight);\n    }\n  }\n\n  _onTranslateTabComplete(e: AnimationEvent): void {\n    // If the transition to the center is complete, emit an event.\n    if (this._isCenterPosition(e.toState) && this._isCenterPosition(this._position)) {\n      this._onCentered.emit();\n    }\n\n    if (this._isCenterPosition(e.fromState) && !this._isCenterPosition(this._position)) {\n      this._afterLeavingCenter.emit();\n    }\n  }\n\n  /** The text direction of the containing app. */\n  _getLayoutDirection(): Direction {\n    return this._dir && this._dir.value === 'rtl' ? 'rtl' : 'ltr';\n  }\n\n  /** Whether the provided position state is considered center, regardless of origin. */\n  _isCenterPosition(position: MatTabBodyPositionState|string): boolean {\n    return position == 'center' ||\n        position == 'left-origin-center' ||\n        position == 'right-origin-center';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  AfterContentChecked,\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  ElementRef,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  Output,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {coerceBooleanProperty, coerceNumberProperty} from '@angular/cdk/coercion';\nimport {Subscription} from 'rxjs/Subscription';\nimport {MatTab} from './tab';\nimport {MatTabHeader} from './tab-header';\nimport {merge} from 'rxjs/observable/merge';\nimport {\n  CanColor,\n  CanDisableRipple,\n  mixinColor,\n  mixinDisableRipple,\n  ThemePalette\n} from '@angular/material/core';\n\n\n/** Used to generate unique ID's for each tab component */\nlet nextId = 0;\n\n/** A simple change event emitted on focus or selection changes. */\nexport class MatTabChangeEvent {\n  /** Index of the currently-selected tab. */\n  index: number;\n  /** Reference to the currently-selected tab. */\n  tab: MatTab;\n}\n\n/** Possible positions for the tab header. */\nexport type MatTabHeaderPosition = 'above' | 'below';\n\n// Boilerplate for applying mixins to MatTabGroup.\n/** @docs-private */\nexport class MatTabGroupBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatTabGroupMixinBase = mixinColor(mixinDisableRipple(MatTabGroupBase), 'primary');\n\n/**\n * Material design tab-group component.  Supports basic tab pairs (label + content) and includes\n * animated ink-bar, keyboard navigation, and screen reader.\n * See: https://www.google.com/design/spec/components/tabs.html\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-tab-group',\n  exportAs: 'matTabGroup',\n  templateUrl: 'tab-group.html',\n  styleUrls: ['tab-group.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  inputs: ['color', 'disableRipple'],\n  host: {\n    'class': 'mat-tab-group',\n    '[class.mat-tab-group-dynamic-height]': 'dynamicHeight',\n    '[class.mat-tab-group-inverted-header]': 'headerPosition === \"below\"',\n  },\n})\nexport class MatTabGroup extends _MatTabGroupMixinBase implements AfterContentInit,\n    AfterContentChecked, OnDestroy, CanColor, CanDisableRipple {\n\n  @ContentChildren(MatTab) _tabs: QueryList<MatTab>;\n\n  @ViewChild('tabBodyWrapper') _tabBodyWrapper: ElementRef;\n\n  /** The tab index that should be selected after the content has been checked. */\n  private _indexToSelect: number | null = 0;\n\n  /** Snapshot of the height of the tab body wrapper before another tab is activated. */\n  private _tabBodyWrapperHeight: number = 0;\n\n  /** Subscription to tabs being added/removed. */\n  private _tabsSubscription = Subscription.EMPTY;\n\n  /** Subscription to changes in the tab labels. */\n  private _tabLabelSubscription = Subscription.EMPTY;\n\n  /** Whether the tab group should grow to the size of the active tab. */\n  @Input()\n  get dynamicHeight(): boolean { return this._dynamicHeight; }\n  set dynamicHeight(value: boolean) { this._dynamicHeight = coerceBooleanProperty(value); }\n  private _dynamicHeight: boolean = false;\n\n  /** The index of the active tab. */\n  @Input()\n  get selectedIndex(): number | null { return this._selectedIndex; }\n  set selectedIndex(value: number | null) {\n    this._indexToSelect = coerceNumberProperty(value, null);\n  }\n  private _selectedIndex: number | null = null;\n\n  /** Position of the tab header. */\n  @Input() headerPosition: MatTabHeaderPosition = 'above';\n\n  /** Background color of the tab group. */\n  @Input()\n  get backgroundColor(): ThemePalette { return this._backgroundColor; }\n  set backgroundColor(value: ThemePalette) {\n    const nativeElement: HTMLElement = this._elementRef.nativeElement;\n\n    nativeElement.classList.remove(`mat-background-${this.backgroundColor}`);\n\n    if (value) {\n      nativeElement.classList.add(`mat-background-${value}`);\n    }\n\n    this._backgroundColor = value;\n  }\n  private _backgroundColor: ThemePalette;\n\n  /** Output to enable support for two-way binding on `[(selectedIndex)]` */\n  @Output() readonly selectedIndexChange: EventEmitter<number> = new EventEmitter<number>();\n\n  /** Event emitted when focus has changed within a tab group. */\n  @Output() readonly focusChange: EventEmitter<MatTabChangeEvent> =\n      new EventEmitter<MatTabChangeEvent>();\n\n  /** Event emitted when the body animation has completed */\n  @Output() readonly animationDone: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Event emitted when the tab selection has changed. */\n  @Output() readonly selectedTabChange: EventEmitter<MatTabChangeEvent> =\n      new EventEmitter<MatTabChangeEvent>(true);\n\n  private _groupId: number;\n\n  constructor(elementRef: ElementRef,\n              private _changeDetectorRef: ChangeDetectorRef) {\n    super(elementRef);\n    this._groupId = nextId++;\n  }\n\n  /**\n   * After the content is checked, this component knows what tabs have been defined\n   * and what the selected index should be. This is where we can know exactly what position\n   * each tab should be in according to the new selected index, and additionally we know how\n   * a new selected tab should transition in (from the left or right).\n   */\n  ngAfterContentChecked() {\n    // Clamp the next selected index to the boundsof 0 and the tabs length.\n    // Note the `|| 0`, which ensures that values like NaN can't get through\n    // and which would otherwise throw the component into an infinite loop\n    // (since Math.max(NaN, 0) === NaN).\n    let indexToSelect = this._indexToSelect =\n        Math.min(this._tabs.length - 1, Math.max(this._indexToSelect || 0, 0));\n\n    // If there is a change in selected index, emit a change event. Should not trigger if\n    // the selected index has not yet been initialized.\n    if (this._selectedIndex != indexToSelect && this._selectedIndex != null) {\n      const tabChangeEvent = this._createChangeEvent(indexToSelect);\n      this.selectedTabChange.emit(tabChangeEvent);\n      // Emitting this value after change detection has run\n      // since the checked content may contain this variable'\n      Promise.resolve().then(() => this.selectedIndexChange.emit(indexToSelect));\n    }\n\n    // Setup the position for each tab and optionally setup an origin on the next selected tab.\n    this._tabs.forEach((tab: MatTab, index: number) => {\n      tab.position = index - indexToSelect;\n      tab.isActive = index === indexToSelect;\n\n      // If there is already a selected tab, then set up an origin for the next selected tab\n      // if it doesn't have one already.\n      if (this._selectedIndex != null && tab.position == 0 && !tab.origin) {\n        tab.origin = indexToSelect - this._selectedIndex;\n      }\n    });\n\n    if (this._selectedIndex !== indexToSelect) {\n      this._selectedIndex = indexToSelect;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  ngAfterContentInit() {\n    this._subscribeToTabLabels();\n\n    // Subscribe to changes in the amount of tabs, in order to be\n    // able to re-render the content as new tabs are added or removed.\n    this._tabsSubscription = this._tabs.changes.subscribe(() => {\n      this._subscribeToTabLabels();\n      this._changeDetectorRef.markForCheck();\n    });\n  }\n\n  ngOnDestroy() {\n    this._tabsSubscription.unsubscribe();\n    this._tabLabelSubscription.unsubscribe();\n  }\n\n  _focusChanged(index: number) {\n    this.focusChange.emit(this._createChangeEvent(index));\n  }\n\n  private _createChangeEvent(index: number): MatTabChangeEvent {\n    const event = new MatTabChangeEvent;\n    event.index = index;\n    if (this._tabs && this._tabs.length) {\n      event.tab = this._tabs.toArray()[index];\n    }\n    return event;\n  }\n\n  /**\n   * Subscribes to changes in the tab labels. This is needed, because the @Input for the label is\n   * on the MatTab component, whereas the data binding is inside the MatTabGroup. In order for the\n   * binding to be updated, we need to subscribe to changes in it and trigger change detection\n   * manually.\n   */\n  private _subscribeToTabLabels() {\n    if (this._tabLabelSubscription) {\n      this._tabLabelSubscription.unsubscribe();\n    }\n\n    this._tabLabelSubscription = merge(\n        ...this._tabs.map(tab => tab._disableChange),\n        ...this._tabs.map(tab => tab._labelChange)).subscribe(() => {\n      this._changeDetectorRef.markForCheck();\n    });\n  }\n\n  /** Returns a unique id for each tab label element */\n  _getTabLabelId(i: number): string {\n    return `mat-tab-label-${this._groupId}-${i}`;\n  }\n\n  /** Returns a unique id for each tab content element */\n  _getTabContentId(i: number): string {\n    return `mat-tab-content-${this._groupId}-${i}`;\n  }\n\n  /**\n   * Sets the height of the body wrapper to the height of the activating tab if dynamic\n   * height property is true.\n   */\n  _setTabBodyWrapperHeight(tabHeight: number): void {\n    if (!this._dynamicHeight || !this._tabBodyWrapperHeight) { return; }\n\n    const wrapper: HTMLElement = this._tabBodyWrapper.nativeElement;\n\n    wrapper.style.height = this._tabBodyWrapperHeight + 'px';\n\n    // This conditional forces the browser to paint the height so that\n    // the animation to the new height can have an origin.\n    if (this._tabBodyWrapper.nativeElement.offsetHeight) {\n      wrapper.style.height = tabHeight + 'px';\n    }\n  }\n\n  /** Removes the height of the tab body wrapper. */\n  _removeTabBodyWrapperHeight(): void {\n    this._tabBodyWrapperHeight = this._tabBodyWrapper.nativeElement.clientHeight;\n    this._tabBodyWrapper.nativeElement.style.height = '';\n    this.animationDone.emit();\n  }\n\n  /** Handle click events, setting new selected index if appropriate. */\n  _handleClick(tab: MatTab, tabHeader: MatTabHeader, idx: number) {\n    if (!tab.disabled) {\n      this.selectedIndex = tabHeader.focusIndex = idx;\n    }\n  }\n\n  /** Retrieves the tabindex for the tab. */\n  _getTabIndex(tab: MatTab, idx: number): number | null {\n    if (tab.disabled) {\n      return null;\n    }\n    return this.selectedIndex === idx ? 0 : -1;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, ElementRef} from '@angular/core';\nimport {CanDisable, mixinDisabled} from '@angular/material/core';\n\n// Boilerplate for applying mixins to MatTabLabelWrapper.\n/** @docs-private */\nexport class MatTabLabelWrapperBase {}\nexport const _MatTabLabelWrapperMixinBase = mixinDisabled(MatTabLabelWrapperBase);\n\n/**\n * Used in the `mat-tab-group` view to display tab labels.\n * @docs-private\n */\n@Directive({\n  selector: '[matTabLabelWrapper]',\n  inputs: ['disabled'],\n  host: {\n    '[class.mat-tab-disabled]': 'disabled'\n  }\n})\nexport class MatTabLabelWrapper extends _MatTabLabelWrapperMixinBase implements CanDisable {\n  constructor(public elementRef: ElementRef) {\n    super();\n  }\n\n  /** Sets focus on the wrapper element */\n  focus(): void {\n    this.elementRef.nativeElement.focus();\n  }\n\n  getOffsetLeft(): number {\n    return this.elementRef.nativeElement.offsetLeft;\n  }\n\n  getOffsetWidth(): number {\n    return this.elementRef.nativeElement.offsetWidth;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor, FocusOrigin} from '@angular/cdk/a11y';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty, coerceNumberProperty} from '@angular/cdk/coercion';\nimport {\n  DOWN_ARROW,\n  END,\n  HOME,\n  LEFT_ARROW,\n  PAGE_DOWN,\n  PAGE_UP,\n  RIGHT_ARROW,\n  UP_ARROW,\n} from '@angular/cdk/keycodes';\nimport {\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Input,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Output,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {\n  CanColor,\n  CanDisable,\n  HammerInput,\n  HasTabIndex,\n  mixinColor,\n  mixinDisabled,\n  mixinTabIndex,\n} from '@angular/material/core';\nimport {Subscription} from 'rxjs/Subscription';\n\n/**\n * Visually, a 30px separation between tick marks looks best. This is very subjective but it is\n * the default separation we chose.\n */\nconst MIN_AUTO_TICK_SEPARATION = 30;\n\n/** The thumb gap size for a disabled slider. */\nconst DISABLED_THUMB_GAP = 7;\n\n/** The thumb gap size for a non-active slider at its minimum value. */\nconst MIN_VALUE_NONACTIVE_THUMB_GAP = 7;\n\n/** The thumb gap size for an active slider at its minimum value. */\nconst MIN_VALUE_ACTIVE_THUMB_GAP = 10;\n\n/**\n * Provider Expression that allows mat-slider to register as a ControlValueAccessor.\n * This allows it to support [(ngModel)] and [formControl].\n */\nexport const MAT_SLIDER_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatSlider),\n  multi: true\n};\n\n/** A simple change event emitted by the MatSlider component. */\nexport class MatSliderChange {\n  /** The MatSlider that changed. */\n  source: MatSlider;\n\n  /** The new value of the source slider. */\n  value: number | null;\n}\n\n\n// Boilerplate for applying mixins to MatSlider.\n/** @docs-private */\nexport class MatSliderBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatSliderMixinBase =\n  mixinTabIndex(mixinColor(mixinDisabled(MatSliderBase), 'accent'));\n\n/**\n * Allows users to select from a range of values by moving the slider thumb. It is similar in\n * behavior to the native `<input type=\"range\">` element.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-slider',\n  exportAs: 'matSlider',\n  providers: [MAT_SLIDER_VALUE_ACCESSOR],\n  host: {\n    '(focus)': '_onFocus()',\n    '(blur)': '_onBlur()',\n    '(click)': '_onClick($event)',\n    '(keydown)': '_onKeydown($event)',\n    '(keyup)': '_onKeyup()',\n    '(mouseenter)': '_onMouseenter()',\n    '(slide)': '_onSlide($event)',\n    '(slideend)': '_onSlideEnd()',\n    '(slidestart)': '_onSlideStart($event)',\n    'class': 'mat-slider',\n    'role': 'slider',\n    '[tabIndex]': 'tabIndex',\n    '[attr.aria-disabled]': 'disabled',\n    '[attr.aria-valuemax]': 'max',\n    '[attr.aria-valuemin]': 'min',\n    '[attr.aria-valuenow]': 'value',\n    '[attr.aria-orientation]': 'vertical ? \"vertical\" : \"horizontal\"',\n    '[class.mat-slider-disabled]': 'disabled',\n    '[class.mat-slider-has-ticks]': 'tickInterval',\n    '[class.mat-slider-horizontal]': '!vertical',\n    '[class.mat-slider-axis-inverted]': '_invertAxis',\n    '[class.mat-slider-sliding]': '_isSliding',\n    '[class.mat-slider-thumb-label-showing]': 'thumbLabel',\n    '[class.mat-slider-vertical]': 'vertical',\n    '[class.mat-slider-min-value]': '_isMinValue',\n    '[class.mat-slider-hide-last-tick]': 'disabled || _isMinValue && _thumbGap && _invertAxis',\n  },\n  templateUrl: 'slider.html',\n  styleUrls: ['slider.css'],\n  inputs: ['disabled', 'color', 'tabIndex'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatSlider extends _MatSliderMixinBase\n    implements ControlValueAccessor, OnDestroy, CanDisable, CanColor, OnInit, HasTabIndex {\n  /** Whether the slider is inverted. */\n  @Input()\n  get invert(): boolean { return this._invert; }\n  set invert(value: boolean) {\n    this._invert = coerceBooleanProperty(value);\n  }\n  private _invert = false;\n\n  /** The maximum value that the slider can have. */\n  @Input()\n  get max(): number { return this._max; }\n  set max(v: number) {\n    this._max = coerceNumberProperty(v, this._max);\n    this._percent = this._calculatePercentage(this._value);\n\n    // Since this also modifies the percentage, we need to let the change detection know.\n    this._changeDetectorRef.markForCheck();\n  }\n  private _max: number = 100;\n\n  /** The minimum value that the slider can have. */\n  @Input()\n  get min(): number { return this._min; }\n  set min(v: number) {\n    this._min = coerceNumberProperty(v, this._min);\n\n    // If the value wasn't explicitly set by the user, set it to the min.\n    if (this._value === null) {\n      this.value = this._min;\n    }\n    this._percent = this._calculatePercentage(this._value);\n\n    // Since this also modifies the percentage, we need to let the change detection know.\n    this._changeDetectorRef.markForCheck();\n  }\n  private _min: number = 0;\n\n  /** The values at which the thumb will snap. */\n  @Input()\n  get step(): number { return this._step; }\n  set step(v: number) {\n    this._step = coerceNumberProperty(v, this._step);\n\n    if (this._step % 1 !== 0) {\n      this._roundLabelTo = this._step.toString().split('.').pop()!.length;\n    }\n\n    // Since this could modify the label, we need to notify the change detection.\n    this._changeDetectorRef.markForCheck();\n  }\n  private _step: number = 1;\n\n  /** Whether or not to show the thumb label. */\n  @Input()\n  get thumbLabel(): boolean { return this._thumbLabel; }\n  set thumbLabel(value: boolean) { this._thumbLabel = coerceBooleanProperty(value); }\n  private _thumbLabel: boolean = false;\n\n  /**\n   * How often to show ticks. Relative to the step so that a tick always appears on a step.\n   * Ex: Tick interval of 4 with a step of 3 will draw a tick every 4 steps (every 12 values).\n   */\n  @Input()\n  get tickInterval() { return this._tickInterval; }\n  set tickInterval(value: 'auto' | number) {\n    if (value === 'auto') {\n      this._tickInterval = 'auto';\n    } else if (typeof value === 'number' || typeof value === 'string') {\n      this._tickInterval = coerceNumberProperty(value, this._tickInterval as number);\n    } else {\n      this._tickInterval = 0;\n    }\n  }\n  private _tickInterval: 'auto' | number = 0;\n\n  /** Value of the slider. */\n  @Input()\n  get value(): number | null {\n    // If the value needs to be read and it is still uninitialized, initialize it to the min.\n    if (this._value === null) {\n      this.value = this._min;\n    }\n    return this._value;\n  }\n  set value(v: number | null) {\n    if (v !== this._value) {\n      this._value = coerceNumberProperty(v);\n      this._percent = this._calculatePercentage(this._value);\n\n      // Since this also modifies the percentage, we need to let the change detection know.\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n  private _value: number | null = null;\n\n  /**\n   * Function that will be used to format the value before it is displayed\n   * in the thumb label. Can be used to format very large number in order\n   * for them to fit into the slider thumb.\n   */\n  @Input() displayWith: (value: number | null) => string | number;\n\n  /** Whether the slider is vertical. */\n  @Input()\n  get vertical(): boolean { return this._vertical; }\n  set vertical(value: boolean) {\n    this._vertical = coerceBooleanProperty(value);\n  }\n  private _vertical = false;\n\n  /** Event emitted when the slider value has changed. */\n  @Output() readonly change: EventEmitter<MatSliderChange> = new EventEmitter<MatSliderChange>();\n\n  /** Event emitted when the slider thumb moves. */\n  @Output() readonly input: EventEmitter<MatSliderChange> = new EventEmitter<MatSliderChange>();\n\n  /** The value to be used for display purposes. */\n  get displayValue(): string | number {\n    if (this.displayWith) {\n      return this.displayWith(this.value);\n    }\n\n    // Note that this could be improved further by rounding something like 0.999 to 1 or\n    // 0.899 to 0.9, however it is very performance sensitive, because it gets called on\n    // every change detection cycle.\n    if (this._roundLabelTo && this.value && this.value % 1 !== 0) {\n      return this.value.toFixed(this._roundLabelTo);\n    }\n\n    return this.value || 0;\n  }\n\n  /** set focus to the host element */\n  focus() {\n    this._focusHostElement();\n  }\n\n  /** blur the host element */\n  blur() {\n    this._blurHostElement();\n  }\n\n  /** onTouch function registered via registerOnTouch (ControlValueAccessor). */\n  onTouched: () => any = () => {};\n\n  /** The percentage of the slider that coincides with the value. */\n  get percent(): number { return this._clamp(this._percent); }\n  private _percent: number = 0;\n\n  /**\n   * Whether or not the thumb is sliding.\n   * Used to determine if there should be a transition for the thumb and fill track.\n   */\n  _isSliding: boolean = false;\n\n  /**\n   * Whether or not the slider is active (clicked or sliding).\n   * Used to shrink and grow the thumb as according to the Material Design spec.\n   */\n  _isActive: boolean = false;\n\n  /**\n   * Whether the axis of the slider is inverted.\n   * (i.e. whether moving the thumb in the positive x or y direction decreases the slider's value).\n   */\n  get _invertAxis() {\n    // Standard non-inverted mode for a vertical slider should be dragging the thumb from bottom to\n    // top. However from a y-axis standpoint this is inverted.\n    return this.vertical ? !this.invert : this.invert;\n  }\n\n\n  /** Whether the slider is at its minimum value. */\n  get _isMinValue() {\n    return this.percent === 0;\n  }\n\n  /**\n   * The amount of space to leave between the slider thumb and the track fill & track background\n   * elements.\n   */\n  get _thumbGap() {\n    if (this.disabled) {\n      return DISABLED_THUMB_GAP;\n    }\n    if (this._isMinValue && !this.thumbLabel) {\n      return this._isActive ? MIN_VALUE_ACTIVE_THUMB_GAP : MIN_VALUE_NONACTIVE_THUMB_GAP;\n    }\n    return 0;\n  }\n\n  /** CSS styles for the track background element. */\n  get _trackBackgroundStyles(): { [key: string]: string } {\n    let axis = this.vertical ? 'Y' : 'X';\n    let sign = this._invertMouseCoords ? '-' : '';\n    return {\n      'transform': `translate${axis}(${sign}${this._thumbGap}px) scale${axis}(${1 - this.percent})`\n    };\n  }\n\n  /** CSS styles for the track fill element. */\n  get _trackFillStyles(): { [key: string]: string } {\n    let axis = this.vertical ? 'Y' : 'X';\n    let sign = this._invertMouseCoords ? '' : '-';\n    return {\n      'transform': `translate${axis}(${sign}${this._thumbGap}px) scale${axis}(${this.percent})`\n    };\n  }\n\n  /** CSS styles for the ticks container element. */\n  get _ticksContainerStyles(): { [key: string]: string } {\n    let axis = this.vertical ? 'Y' : 'X';\n    // For a horizontal slider in RTL languages we push the ticks container off the left edge\n    // instead of the right edge to avoid causing a horizontal scrollbar to appear.\n    let sign = !this.vertical && this._direction == 'rtl' ? '' : '-';\n    let offset = this._tickIntervalPercent / 2 * 100;\n    return {\n      'transform': `translate${axis}(${sign}${offset}%)`\n    };\n  }\n\n  /** CSS styles for the ticks element. */\n  get _ticksStyles(): { [key: string]: string } {\n    let tickSize = this._tickIntervalPercent * 100;\n    let backgroundSize = this.vertical ? `2px ${tickSize}%` : `${tickSize}% 2px`;\n    let axis = this.vertical ? 'Y' : 'X';\n    // Depending on the direction we pushed the ticks container, push the ticks the opposite\n    // direction to re-center them but clip off the end edge. In RTL languages we need to flip the\n    // ticks 180 degrees so we're really cutting off the end edge abd not the start.\n    let sign = !this.vertical && this._direction == 'rtl' ? '-' : '';\n    let rotate = !this.vertical && this._direction == 'rtl' ? ' rotate(180deg)' : '';\n    let styles: { [key: string]: string } = {\n      'backgroundSize': backgroundSize,\n      // Without translateZ ticks sometimes jitter as the slider moves on Chrome & Firefox.\n      'transform': `translateZ(0) translate${axis}(${sign}${tickSize / 2}%)${rotate}`\n    };\n\n    if (this._isMinValue && this._thumbGap) {\n      let side = this.vertical ?\n          (this._invertAxis ? 'Bottom' : 'Top') :\n          (this._invertAxis ? 'Right' : 'Left');\n      styles[`padding${side}`] = `${this._thumbGap}px`;\n    }\n\n    return styles;\n  }\n\n  get _thumbContainerStyles(): { [key: string]: string } {\n    let axis = this.vertical ? 'Y' : 'X';\n    // For a horizontal slider in RTL languages we push the thumb container off the left edge\n    // instead of the right edge to avoid causing a horizontal scrollbar to appear.\n    let invertOffset =\n        (this._direction == 'rtl' && !this.vertical) ? !this._invertAxis : this._invertAxis;\n    let offset = (invertOffset ? this.percent : 1 - this.percent) * 100;\n    return {\n      'transform': `translate${axis}(-${offset}%)`\n    };\n  }\n\n  /** The size of a tick interval as a percentage of the size of the track. */\n  private _tickIntervalPercent: number = 0;\n\n  /** The dimensions of the slider. */\n  private _sliderDimensions: ClientRect | null = null;\n\n  private _controlValueAccessorChangeFn: (value: any) => void = () => {};\n\n  /** Decimal places to round to, based on the step amount. */\n  private _roundLabelTo: number;\n\n  /** Subscription to the Directionality change EventEmitter. */\n  private _dirChangeSubscription = Subscription.EMPTY;\n\n  /** The value of the slider when the slide start event fires. */\n  private _valueOnSlideStart: number | null;\n\n  /** Reference to the inner slider wrapper element. */\n  @ViewChild('sliderWrapper') private _sliderWrapper: ElementRef;\n\n  /**\n   * Whether mouse events should be converted to a slider position by calculating their distance\n   * from the right or bottom edge of the slider as opposed to the top or left.\n   */\n  private get _invertMouseCoords() {\n    return (this._direction == 'rtl' && !this.vertical) ? !this._invertAxis : this._invertAxis;\n  }\n\n  /** The language direction for this slider element. */\n  private get _direction() {\n    return (this._dir && this._dir.value == 'rtl') ? 'rtl' : 'ltr';\n  }\n\n  constructor(elementRef: ElementRef,\n              private _focusMonitor: FocusMonitor,\n              private _changeDetectorRef: ChangeDetectorRef,\n              @Optional() private _dir: Directionality,\n              @Attribute('tabindex') tabIndex: string) {\n    super(elementRef);\n\n    this.tabIndex = parseInt(tabIndex) || 0;\n  }\n\n  ngOnInit() {\n    this._focusMonitor\n        .monitor(this._elementRef.nativeElement, true)\n        .subscribe((origin: FocusOrigin) => {\n          this._isActive = !!origin && origin !== 'keyboard';\n          this._changeDetectorRef.detectChanges();\n        });\n    if (this._dir) {\n      this._dirChangeSubscription = this._dir.change.subscribe(() => {\n        this._changeDetectorRef.markForCheck();\n      });\n    }\n  }\n\n  ngOnDestroy() {\n    this._focusMonitor.stopMonitoring(this._elementRef.nativeElement);\n    this._dirChangeSubscription.unsubscribe();\n  }\n\n  _onMouseenter() {\n    if (this.disabled) {\n      return;\n    }\n\n    // We save the dimensions of the slider here so we can use them to update the spacing of the\n    // ticks and determine where on the slider click and slide events happen.\n    this._sliderDimensions = this._getSliderDimensions();\n    this._updateTickIntervalPercent();\n  }\n\n  _onClick(event: MouseEvent) {\n    if (this.disabled) {\n      return;\n    }\n\n    let oldValue = this.value;\n    this._isSliding = false;\n    this._focusHostElement();\n    this._updateValueFromPosition({x: event.clientX, y: event.clientY});\n\n    // Emit a change and input event if the value changed.\n    if (oldValue != this.value) {\n      this._emitInputEvent();\n      this._emitChangeEvent();\n    }\n  }\n\n  _onSlide(event: HammerInput) {\n    if (this.disabled) {\n      return;\n    }\n\n    // The slide start event sometimes fails to fire on iOS, so if we're not already in the sliding\n    // state, call the slide start handler manually.\n    if (!this._isSliding) {\n      this._onSlideStart(null);\n    }\n\n    // Prevent the slide from selecting anything else.\n    event.preventDefault();\n\n    let oldValue = this.value;\n    this._updateValueFromPosition({x: event.center.x, y: event.center.y});\n\n    // Native range elements always emit `input` events when the value changed while sliding.\n    if (oldValue != this.value) {\n      this._emitInputEvent();\n    }\n  }\n\n  _onSlideStart(event: HammerInput | null) {\n    if (this.disabled || this._isSliding) {\n      return;\n    }\n\n    // Simulate mouseenter in case this is a mobile device.\n    this._onMouseenter();\n\n    this._isSliding = true;\n    this._focusHostElement();\n    this._valueOnSlideStart = this.value;\n\n    if (event) {\n      this._updateValueFromPosition({x: event.center.x, y: event.center.y});\n      event.preventDefault();\n    }\n  }\n\n  _onSlideEnd() {\n    this._isSliding = false;\n\n    if (this._valueOnSlideStart != this.value && !this.disabled) {\n      this._emitChangeEvent();\n    }\n    this._valueOnSlideStart = null;\n  }\n\n  _onFocus() {\n    // We save the dimensions of the slider here so we can use them to update the spacing of the\n    // ticks and determine where on the slider click and slide events happen.\n    this._sliderDimensions = this._getSliderDimensions();\n    this._updateTickIntervalPercent();\n  }\n\n  _onBlur() {\n    this.onTouched();\n  }\n\n  _onKeydown(event: KeyboardEvent) {\n    if (this.disabled) { return; }\n\n    let oldValue = this.value;\n\n    switch (event.keyCode) {\n      case PAGE_UP:\n        this._increment(10);\n        break;\n      case PAGE_DOWN:\n        this._increment(-10);\n        break;\n      case END:\n        this.value = this.max;\n        break;\n      case HOME:\n        this.value = this.min;\n        break;\n      case LEFT_ARROW:\n        // NOTE: For a sighted user it would make more sense that when they press an arrow key on an\n        // inverted slider the thumb moves in that direction. However for a blind user, nothing\n        // about the slider indicates that it is inverted. They will expect left to be decrement,\n        // regardless of how it appears on the screen. For speakers ofRTL languages, they probably\n        // expect left to mean increment. Therefore we flip the meaning of the side arrow keys for\n        // RTL. For inverted sliders we prefer a good a11y experience to having it \"look right\" for\n        // sighted users, therefore we do not swap the meaning.\n        this._increment(this._direction == 'rtl' ? 1 : -1);\n        break;\n      case UP_ARROW:\n        this._increment(1);\n        break;\n      case RIGHT_ARROW:\n        // See comment on LEFT_ARROW about the conditions under which we flip the meaning.\n        this._increment(this._direction == 'rtl' ? -1 : 1);\n        break;\n      case DOWN_ARROW:\n        this._increment(-1);\n        break;\n      default:\n        // Return if the key is not one that we explicitly handle to avoid calling preventDefault on\n        // it.\n        return;\n    }\n\n    if (oldValue != this.value) {\n      this._emitInputEvent();\n      this._emitChangeEvent();\n    }\n\n    this._isSliding = true;\n    event.preventDefault();\n  }\n\n  _onKeyup() {\n    this._isSliding = false;\n  }\n\n  /** Increments the slider by the given number of steps (negative number decrements). */\n  private _increment(numSteps: number) {\n    this.value = this._clamp((this.value || 0) + this.step * numSteps, this.min, this.max);\n  }\n\n  /** Calculate the new value from the new physical location. The value will always be snapped. */\n  private _updateValueFromPosition(pos: {x: number, y: number}) {\n    if (!this._sliderDimensions) {\n      return;\n    }\n\n    let offset = this.vertical ? this._sliderDimensions.top : this._sliderDimensions.left;\n    let size = this.vertical ? this._sliderDimensions.height : this._sliderDimensions.width;\n    let posComponent = this.vertical ? pos.y : pos.x;\n\n    // The exact value is calculated from the event and used to find the closest snap value.\n    let percent = this._clamp((posComponent - offset) / size);\n    if (this._invertMouseCoords) {\n      percent = 1 - percent;\n    }\n    let exactValue = this._calculateValue(percent);\n\n    // This calculation finds the closest step by finding the closest whole number divisible by the\n    // step relative to the min.\n    let closestValue = Math.round((exactValue - this.min) / this.step) * this.step + this.min;\n    // The value needs to snap to the min and max.\n    this.value = this._clamp(closestValue, this.min, this.max);\n  }\n\n  /** Emits a change event if the current value is different from the last emitted value. */\n  private _emitChangeEvent() {\n    this._controlValueAccessorChangeFn(this.value);\n    this.change.emit(this._createChangeEvent());\n  }\n\n  /** Emits an input event when the current value is different from the last emitted value. */\n  private _emitInputEvent() {\n    this.input.emit(this._createChangeEvent());\n  }\n\n  /** Updates the amount of space between ticks as a percentage of the width of the slider. */\n  private _updateTickIntervalPercent() {\n    if (!this.tickInterval || !this._sliderDimensions) {\n      return;\n    }\n\n    if (this.tickInterval == 'auto') {\n      let trackSize = this.vertical ? this._sliderDimensions.height : this._sliderDimensions.width;\n      let pixelsPerStep = trackSize * this.step / (this.max - this.min);\n      let stepsPerTick = Math.ceil(MIN_AUTO_TICK_SEPARATION / pixelsPerStep);\n      let pixelsPerTick = stepsPerTick * this.step;\n      this._tickIntervalPercent = pixelsPerTick / trackSize;\n    } else {\n      this._tickIntervalPercent = this.tickInterval * this.step / (this.max - this.min);\n    }\n  }\n\n  /** Creates a slider change object from the specified value. */\n  private _createChangeEvent(value = this.value): MatSliderChange {\n    let event = new MatSliderChange();\n\n    event.source = this;\n    event.value = value;\n\n    return event;\n  }\n\n  /** Calculates the percentage of the slider that a value is. */\n  private _calculatePercentage(value: number | null) {\n    return ((value || 0) - this.min) / (this.max - this.min);\n  }\n\n  /** Calculates the value a percentage of the slider corresponds to. */\n  private _calculateValue(percentage: number) {\n    return this.min + percentage * (this.max - this.min);\n  }\n\n  /** Return a number between two numbers. */\n  private _clamp(value: number, min = 0, max = 1) {\n    return Math.max(min, Math.min(value, max));\n  }\n\n  /**\n   * Get the bounding client rect of the slider track element.\n   * The track is used rather than the native element to ignore the extra space that the thumb can\n   * take up.\n   */\n  private _getSliderDimensions() {\n    return this._sliderWrapper ? this._sliderWrapper.nativeElement.getBoundingClientRect() : null;\n  }\n\n  /**\n   * Focuses the native element.\n   * Currently only used to allow a blur event to fire but will be used with keyboard input later.\n   */\n  private _focusHostElement() {\n    this._elementRef.nativeElement.focus();\n  }\n\n  /** Blurs the native element. */\n  private _blurHostElement() {\n    this._elementRef.nativeElement.blur();\n  }\n\n  /**\n   * Sets the model value. Implemented as part of ControlValueAccessor.\n   * @param value\n   */\n  writeValue(value: any) {\n    this.value = value;\n  }\n\n  /**\n   * Registers a callback to eb triggered when the value has changed.\n   * Implemented as part of ControlValueAccessor.\n   * @param fn Callback to be registered.\n   */\n  registerOnChange(fn: (value: any) => void) {\n    this._controlValueAccessorChangeFn = fn;\n  }\n\n  /**\n   * Registers a callback to be triggered when the component is touched.\n   * Implemented as part of ControlValueAccessor.\n   * @param fn Callback to be registered.\n   */\n  registerOnTouched(fn: any) {\n    this.onTouched = fn;\n  }\n\n  /**\n   * Sets whether the component should be disabled.\n   * Implemented as part of ControlValueAccessor.\n   * @param isDisabled\n   */\n  setDisabledState(isDisabled: boolean) {\n    this.disabled = isDisabled;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {A11yModule} from '@angular/cdk/a11y';\nimport {BidiModule} from '@angular/cdk/bidi';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {GestureConfig, MatCommonModule} from '@angular/material/core';\nimport {HAMMER_GESTURE_CONFIG} from '@angular/platform-browser';\nimport {MatSlider} from './slider';\n\n\n@NgModule({\n  imports: [CommonModule, MatCommonModule, BidiModule, A11yModule],\n  exports: [MatSlider, MatCommonModule],\n  declarations: [MatSlider],\n  providers: [{provide: HAMMER_GESTURE_CONFIG, useClass: GestureConfig}]\n})\nexport class MatSliderModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {OverlayRef} from '@angular/cdk/overlay';\nimport {Observable} from 'rxjs/Observable';\nimport {Subject} from 'rxjs/Subject';\nimport {MatSnackBarContainer} from './snack-bar-container';\n\n/** Event that is emitted when a snack bar is dismissed. */\nexport interface MatSnackBarDismiss {\n  /** Whether the snack bar was dismissed using the action button. */\n  dismissedByAction: boolean;\n}\n\n/**\n * Reference to a snack bar dispatched from the snack bar service.\n */\nexport class MatSnackBarRef<T> {\n  /** The instance of the component making up the content of the snack bar. */\n  instance: T;\n\n  /**\n   * The instance of the component making up the content of the snack bar.\n   * @docs-private\n   */\n  containerInstance: MatSnackBarContainer;\n\n  /** Subject for notifying the user that the snack bar has been dismissed. */\n  private readonly _afterDismissed = new Subject<MatSnackBarDismiss>();\n\n  /** Subject for notifying the user that the snack bar has opened and appeared. */\n  private readonly _afterOpened = new Subject<void>();\n\n  /** Subject for notifying the user that the snack bar action was called. */\n  private readonly _onAction = new Subject<void>();\n\n  /**\n   * Timeout ID for the duration setTimeout call. Used to clear the timeout if the snackbar is\n   * dismissed before the duration passes.\n   */\n  private _durationTimeoutId: number;\n\n  /** Whether the snack bar was dismissed using the action button. */\n  private _dismissedByAction = false;\n\n  constructor(containerInstance: MatSnackBarContainer,\n              private _overlayRef: OverlayRef) {\n    this.containerInstance = containerInstance;\n    // Dismiss snackbar on action.\n    this.onAction().subscribe(() => this.dismiss());\n    containerInstance._onExit.subscribe(() => this._finishDismiss());\n  }\n\n  /** Dismisses the snack bar. */\n  dismiss(): void {\n    if (!this._afterDismissed.closed) {\n      this.containerInstance.exit();\n    }\n    clearTimeout(this._durationTimeoutId);\n  }\n\n  /** Marks the snackbar action clicked. */\n  dismissWithAction(): void {\n    if (!this._onAction.closed) {\n      this._dismissedByAction = true;\n      this._onAction.next();\n      this._onAction.complete();\n    }\n  }\n\n\n  /**\n   * Marks the snackbar action clicked.\n   * @deprecated Use `dismissWithAction` instead.\n   * @deletion-target 7.0.0\n   */\n  closeWithAction(): void {\n    this.dismissWithAction();\n  }\n\n  /** Dismisses the snack bar after some duration */\n  _dismissAfter(duration: number): void {\n    this._durationTimeoutId = setTimeout(() => this.dismiss(), duration);\n  }\n\n  /** Marks the snackbar as opened */\n  _open(): void {\n    if (!this._afterOpened.closed) {\n      this._afterOpened.next();\n      this._afterOpened.complete();\n    }\n  }\n\n  /** Cleans up the DOM after closing. */\n  private _finishDismiss(): void {\n    this._overlayRef.dispose();\n\n    if (!this._onAction.closed) {\n      this._onAction.complete();\n    }\n\n    this._afterDismissed.next({dismissedByAction: this._dismissedByAction});\n    this._afterDismissed.complete();\n    this._dismissedByAction = false;\n  }\n\n  /** Gets an observable that is notified when the snack bar is finished closing. */\n  afterDismissed(): Observable<MatSnackBarDismiss> {\n    return this._afterDismissed.asObservable();\n  }\n\n  /** Gets an observable that is notified when the snack bar has opened and appeared. */\n  afterOpened(): Observable<void> {\n    return this.containerInstance._onEnter;\n  }\n\n  /** Gets an observable that is notified when the snack bar action is called. */\n  onAction(): Observable<void> {\n    return this._onAction.asObservable();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ViewContainerRef, InjectionToken} from '@angular/core';\nimport {AriaLivePoliteness} from '@angular/cdk/a11y';\nimport {Direction} from '@angular/cdk/bidi';\n\n/** Injection token that can be used to access the data that was passed in to a snack bar. */\nexport const MAT_SNACK_BAR_DATA = new InjectionToken<any>('MatSnackBarData');\n\n/** Possible values for horizontalPosition on MatSnackBarConfig. */\nexport type MatSnackBarHorizontalPosition = 'start' | 'center' | 'end' | 'left' | 'right';\n\n/** Possible values for verticalPosition on MatSnackBarConfig. */\nexport type MatSnackBarVerticalPosition = 'top' | 'bottom';\n\n/**\n * Configuration used when opening a snack-bar.\n */\nexport class MatSnackBarConfig<D = any> {\n  /** The politeness level for the MatAriaLiveAnnouncer announcement. */\n  politeness?: AriaLivePoliteness = 'assertive';\n\n  /** Message to be announced by the MatAriaLiveAnnouncer */\n  announcementMessage?: string = '';\n\n  /** The view container to place the overlay for the snack bar into. */\n  viewContainerRef?: ViewContainerRef;\n\n  /** The length of time in milliseconds to wait before automatically dismissing the snack bar. */\n  duration?: number = 0;\n\n  /** Extra CSS classes to be added to the snack bar container. */\n  panelClass?: string | string[];\n\n  /** Text layout direction for the snack bar. */\n  direction?: Direction;\n\n  /** Data being injected into the child component. */\n  data?: D | null = null;\n\n  /** The horizontal position to place the snack bar. */\n  horizontalPosition?: MatSnackBarHorizontalPosition = 'center';\n\n  /** The vertical position to place the snack bar. */\n  verticalPosition?: MatSnackBarVerticalPosition = 'bottom';\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\nimport {AnimationCurves, AnimationDurations} from '@angular/material/core';\n\n/** @docs-private */\nexport const SHOW_ANIMATION =\n  `${AnimationDurations.ENTERING} ${AnimationCurves.DECELERATION_CURVE}`;\n\n/** @docs-private */\nexport const HIDE_ANIMATION =\n  `${AnimationDurations.EXITING} ${AnimationCurves.ACCELERATION_CURVE}`;\n\n/** Animations used by the Material snack bar. */\nexport const matSnackBarAnimations: {\n  readonly contentFade: AnimationTriggerMetadata;\n  readonly snackBarState: AnimationTriggerMetadata;\n} = {\n  /** Animation that slides the dialog in and out of view and fades the opacity. */\n  contentFade: trigger('contentFade', [\n    transition(':enter', [\n      style({opacity: '0'}),\n      animate(`${AnimationDurations.COMPLEX} ${AnimationCurves.STANDARD_CURVE}`)\n    ])\n  ]),\n\n  /** Animation that shows and hides a snack bar. */\n  snackBarState: trigger('state', [\n    state('visible-top, visible-bottom', style({transform: 'translateY(0%)'})),\n    transition('visible-top => hidden-top, visible-bottom => hidden-bottom',\n      animate(HIDE_ANIMATION)),\n    transition('void => visible-top, void => visible-bottom', animate(SHOW_ANIMATION)),\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Component, ViewEncapsulation, Inject, ChangeDetectionStrategy} from '@angular/core';\nimport {MatSnackBarRef} from './snack-bar-ref';\nimport {MAT_SNACK_BAR_DATA} from './snack-bar-config';\nimport {matSnackBarAnimations} from './snack-bar-animations';\n\n\n/**\n * A component used to open as the default snack bar, matching material spec.\n * This should only be used internally by the snack bar service.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'simple-snack-bar',\n  templateUrl: 'simple-snack-bar.html',\n  styleUrls: ['simple-snack-bar.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  animations: [matSnackBarAnimations.contentFade],\n  host: {\n    '[@contentFade]': '',\n    'class': 'mat-simple-snackbar',\n  }\n})\nexport class SimpleSnackBar {\n  /** Data that was injected into the snack bar. */\n  data: { message: string, action: string };\n\n  constructor(\n    public snackBarRef: MatSnackBarRef<SimpleSnackBar>,\n    @Inject(MAT_SNACK_BAR_DATA) data: any) {\n    this.data = data;\n  }\n\n  /** Performs the action on the snack bar. */\n  action(): void {\n    this.snackBarRef.dismissWithAction();\n  }\n\n  /** If the action button should be shown. */\n  get hasAction(): boolean {\n    return !!this.data.action;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ComponentRef,\n  EmbeddedViewRef,\n  ViewChild,\n  NgZone,\n  OnDestroy,\n  ElementRef,\n  ChangeDetectionStrategy,\n  ViewEncapsulation,\n  ChangeDetectorRef,\n} from '@angular/core';\nimport {AnimationEvent} from '@angular/animations';\nimport {\n  BasePortalOutlet,\n  ComponentPortal,\n  CdkPortalOutlet,\n  TemplatePortal,\n} from '@angular/cdk/portal';\nimport {take} from 'rxjs/operators/take';\nimport {Observable} from 'rxjs/Observable';\nimport {Subject} from 'rxjs/Subject';\nimport {MatSnackBarConfig} from './snack-bar-config';\nimport {matSnackBarAnimations} from './snack-bar-animations';\n\n/**\n * Internal component that wraps user-provided snack bar content.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'snack-bar-container',\n  templateUrl: 'snack-bar-container.html',\n  styleUrls: ['snack-bar-container.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  animations: [matSnackBarAnimations.snackBarState],\n  host: {\n    'role': 'alert',\n    'class': 'mat-snack-bar-container',\n    '[@state]': '_animationState',\n    '(@state.done)': 'onAnimationEnd($event)'\n  },\n})\nexport class MatSnackBarContainer extends BasePortalOutlet implements OnDestroy {\n  /** Whether the component has been destroyed. */\n  private _destroyed = false;\n\n  /** The portal outlet inside of this container into which the snack bar content will be loaded. */\n  @ViewChild(CdkPortalOutlet) _portalOutlet: CdkPortalOutlet;\n\n  /** Subject for notifying that the snack bar has exited from view. */\n  readonly _onExit: Subject<any> = new Subject();\n\n  /** Subject for notifying that the snack bar has finished entering the view. */\n  readonly _onEnter: Subject<any> = new Subject();\n\n  /** The state of the snack bar animations. */\n  _animationState = 'void';\n\n  /** The snack bar configuration. */\n  snackBarConfig: MatSnackBarConfig;\n\n  constructor(\n    private _ngZone: NgZone,\n    private _elementRef: ElementRef,\n    private _changeDetectorRef: ChangeDetectorRef) {\n    super();\n  }\n\n  /** Attach a component portal as content to this snack bar container. */\n  attachComponentPortal<T>(portal: ComponentPortal<T>): ComponentRef<T> {\n    this._assertNotAttached();\n    this._applySnackBarClasses();\n    return this._portalOutlet.attachComponentPortal(portal);\n  }\n\n  /** Attach a template portal as content to this snack bar container. */\n  attachTemplatePortal<C>(portal: TemplatePortal<C>): EmbeddedViewRef<C> {\n    this._assertNotAttached();\n    this._applySnackBarClasses();\n    return this._portalOutlet.attachTemplatePortal(portal);\n  }\n\n  /** Handle end of animations, updating the state of the snackbar. */\n  onAnimationEnd(event: AnimationEvent) {\n    const {fromState, toState} = event;\n\n    if ((toState === 'void' && fromState !== 'void') || toState.startsWith('hidden')) {\n      this._completeExit();\n    }\n\n    if (toState.startsWith('visible')) {\n      // Note: we shouldn't use `this` inside the zone callback,\n      // because it can cause a memory leak.\n      const onEnter = this._onEnter;\n\n      this._ngZone.run(() => {\n        onEnter.next();\n        onEnter.complete();\n      });\n    }\n  }\n\n  /** Begin animation of snack bar entrance into view. */\n  enter(): void {\n    if (!this._destroyed) {\n      this._animationState = `visible-${this.snackBarConfig.verticalPosition}`;\n      this._changeDetectorRef.detectChanges();\n    }\n  }\n\n  /** Begin animation of the snack bar exiting from view. */\n  exit(): Observable<void> {\n    this._animationState = `hidden-${this.snackBarConfig.verticalPosition}`;\n    return this._onExit;\n  }\n\n  /** Makes sure the exit callbacks have been invoked when the element is destroyed. */\n  ngOnDestroy() {\n    this._destroyed = true;\n    this._completeExit();\n  }\n\n  /**\n   * Waits for the zone to settle before removing the element. Helps prevent\n   * errors where we end up removing an element which is in the middle of an animation.\n   */\n  private _completeExit() {\n    this._ngZone.onMicrotaskEmpty.asObservable().pipe(take(1)).subscribe(() => {\n      this._onExit.next();\n      this._onExit.complete();\n    });\n  }\n\n  /** Applies the various positioning and user-configured CSS classes to the snack bar. */\n  private _applySnackBarClasses() {\n    const element: HTMLElement = this._elementRef.nativeElement;\n    const panelClasses = this.snackBarConfig.panelClass;\n\n    if (panelClasses) {\n      if (Array.isArray(panelClasses)) {\n        // Note that we can't use a spread here, because IE doesn't support multiple arguments.\n        panelClasses.forEach(cssClass => element.classList.add(cssClass));\n      } else {\n        element.classList.add(panelClasses);\n      }\n    }\n\n    if (this.snackBarConfig.horizontalPosition === 'center') {\n      element.classList.add('mat-snack-bar-center');\n    }\n\n    if (this.snackBarConfig.verticalPosition === 'top') {\n      element.classList.add('mat-snack-bar-top');\n    }\n  }\n\n  /** Asserts that no content is already attached to the container. */\n  private _assertNotAttached() {\n    if (this._portalOutlet.hasAttached()) {\n      throw Error('Attempting to attach snack bar content after content is already attached');\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {LiveAnnouncer} from '@angular/cdk/a11y';\nimport {BreakpointObserver, Breakpoints} from '@angular/cdk/layout';\nimport {Overlay, OverlayConfig, OverlayRef} from '@angular/cdk/overlay';\nimport {ComponentPortal, TemplatePortal, ComponentType, PortalInjector} from '@angular/cdk/portal';\nimport {\n  ComponentRef,\n  EmbeddedViewRef,\n  Inject,\n  Injectable,\n  Injector,\n  InjectionToken,\n  Optional,\n  SkipSelf,\n  TemplateRef,\n} from '@angular/core';\nimport {take} from 'rxjs/operators/take';\nimport {takeUntil} from 'rxjs/operators/takeUntil';\nimport {SimpleSnackBar} from './simple-snack-bar';\nimport {MAT_SNACK_BAR_DATA, MatSnackBarConfig} from './snack-bar-config';\nimport {MatSnackBarContainer} from './snack-bar-container';\nimport {MatSnackBarRef} from './snack-bar-ref';\n\n\n/** Injection token that can be used to specify default snack bar. */\nexport const MAT_SNACK_BAR_DEFAULT_OPTIONS =\n    new InjectionToken<MatSnackBarConfig>('mat-snack-bar-default-options');\n\n/**\n * Service to dispatch Material Design snack bar messages.\n */\n@Injectable()\nexport class MatSnackBar {\n  /**\n   * Reference to the current snack bar in the view *at this level* (in the Angular injector tree).\n   * If there is a parent snack-bar service, all operations should delegate to that parent\n   * via `_openedSnackBarRef`.\n   */\n  private _snackBarRefAtThisLevel: MatSnackBarRef<any> | null = null;\n\n  /** Reference to the currently opened snackbar at *any* level. */\n  get _openedSnackBarRef(): MatSnackBarRef<any> | null {\n    const parent = this._parentSnackBar;\n    return parent ? parent._openedSnackBarRef : this._snackBarRefAtThisLevel;\n  }\n\n  set _openedSnackBarRef(value: MatSnackBarRef<any> | null) {\n    if (this._parentSnackBar) {\n      this._parentSnackBar._openedSnackBarRef = value;\n    } else {\n      this._snackBarRefAtThisLevel = value;\n    }\n  }\n\n  constructor(\n      private _overlay: Overlay,\n      private _live: LiveAnnouncer,\n      private _injector: Injector,\n      private _breakpointObserver: BreakpointObserver,\n      @Optional() @SkipSelf() private _parentSnackBar: MatSnackBar,\n      @Inject(MAT_SNACK_BAR_DEFAULT_OPTIONS) private _defaultConfig: MatSnackBarConfig) {}\n\n  /**\n   * Creates and dispatches a snack bar with a custom component for the content, removing any\n   * currently opened snack bars.\n   *\n   * @param component Component to be instantiated.\n   * @param config Extra configuration for the snack bar.\n   */\n  openFromComponent<T>(component: ComponentType<T>, config?: MatSnackBarConfig):\n    MatSnackBarRef<T> {\n    return this._attach(component, config) as MatSnackBarRef<T>;\n  }\n\n  /**\n   * Creates and dispatches a snack bar with a custom template for the content, removing any\n   * currently opened snack bars.\n   *\n   * @param template Template to be instantiated.\n   * @param config Extra configuration for the snack bar.\n   */\n  openFromTemplate(template: TemplateRef<any>, config?: MatSnackBarConfig):\n    MatSnackBarRef<EmbeddedViewRef<any>> {\n    return this._attach(template, config);\n  }\n\n  /**\n   * Opens a snackbar with a message and an optional action.\n   * @param message The message to show in the snackbar.\n   * @param action The label for the snackbar action.\n   * @param config Additional configuration options for the snackbar.\n   */\n  open(message: string, action: string = '', config?: MatSnackBarConfig):\n      MatSnackBarRef<SimpleSnackBar> {\n    const _config = {...this._defaultConfig, ...config};\n\n    // Since the user doesn't have access to the component, we can\n    // override the data to pass in our own message and action.\n    _config.data = {message, action};\n    _config.announcementMessage = message;\n\n    return this.openFromComponent(SimpleSnackBar, _config);\n  }\n\n  /**\n   * Dismisses the currently-visible snack bar.\n   */\n  dismiss(): void {\n    if (this._openedSnackBarRef) {\n      this._openedSnackBarRef.dismiss();\n    }\n  }\n\n  /**\n   * Attaches the snack bar container component to the overlay.\n   */\n  private _attachSnackBarContainer(overlayRef: OverlayRef,\n                                   config: MatSnackBarConfig): MatSnackBarContainer {\n    const containerPortal = new ComponentPortal(MatSnackBarContainer, config.viewContainerRef);\n    const containerRef: ComponentRef<MatSnackBarContainer> = overlayRef.attach(containerPortal);\n    containerRef.instance.snackBarConfig = config;\n    return containerRef.instance;\n  }\n\n  /**\n   * Places a new component or a template as the content of the snack bar container.\n   */\n  private _attach<T>(content: ComponentType<T> | TemplateRef<T>, userConfig?: MatSnackBarConfig):\n    MatSnackBarRef<T | EmbeddedViewRef<any>> {\n\n    const config = {...this._defaultConfig, ...userConfig};\n    const overlayRef = this._createOverlay(config);\n    const container = this._attachSnackBarContainer(overlayRef, config);\n    const snackBarRef = new MatSnackBarRef<T | EmbeddedViewRef<any>>(container, overlayRef);\n\n    if (content instanceof TemplateRef) {\n      const portal = new TemplatePortal(content, null!, {\n        $implicit: config.data,\n        snackBarRef\n      } as any);\n\n      snackBarRef.instance = container.attachTemplatePortal(portal);\n    } else {\n      const injector = this._createInjector(config, snackBarRef);\n      const portal = new ComponentPortal(content, undefined, injector);\n      const contentRef = container.attachComponentPortal<T>(portal);\n\n      // We can't pass this via the injector, because the injector is created earlier.\n      snackBarRef.instance = contentRef.instance;\n    }\n\n    // Subscribe to the breakpoint observer and attach the mat-snack-bar-handset class as\n    // appropriate. This class is applied to the overlay element because the overlay must expand to\n    // fill the width of the screen for full width snackbars.\n    this._breakpointObserver.observe(Breakpoints.Handset).pipe(\n      takeUntil(overlayRef.detachments().pipe(take(1)))\n    ).subscribe(state => {\n      if (state.matches) {\n        overlayRef.overlayElement.classList.add('mat-snack-bar-handset');\n      } else {\n        overlayRef.overlayElement.classList.remove('mat-snack-bar-handset');\n      }\n    });\n\n    this._animateSnackBar(snackBarRef, config);\n    this._openedSnackBarRef = snackBarRef;\n    return this._openedSnackBarRef;\n  }\n\n  /** Animates the old snack bar out and the new one in. */\n  private _animateSnackBar(snackBarRef: MatSnackBarRef<any>, config: MatSnackBarConfig) {\n    // When the snackbar is dismissed, clear the reference to it.\n    snackBarRef.afterDismissed().subscribe(() => {\n      // Clear the snackbar ref if it hasn't already been replaced by a newer snackbar.\n      if (this._openedSnackBarRef == snackBarRef) {\n        this._openedSnackBarRef = null;\n      }\n    });\n\n    if (this._openedSnackBarRef) {\n      // If a snack bar is already in view, dismiss it and enter the\n      // new snack bar after exit animation is complete.\n      this._openedSnackBarRef.afterDismissed().subscribe(() => {\n        snackBarRef.containerInstance.enter();\n      });\n      this._openedSnackBarRef.dismiss();\n    } else {\n      // If no snack bar is in view, enter the new snack bar.\n      snackBarRef.containerInstance.enter();\n    }\n\n    // If a dismiss timeout is provided, set up dismiss based on after the snackbar is opened.\n    if (config.duration && config.duration > 0) {\n      snackBarRef.afterOpened().subscribe(() => snackBarRef._dismissAfter(config.duration!));\n    }\n\n    if (config.announcementMessage) {\n      this._live.announce(config.announcementMessage, config.politeness);\n    }\n  }\n\n  /**\n   * Creates a new overlay and places it in the correct location.\n   * @param config The user-specified snack bar config.\n   */\n  private _createOverlay(config: MatSnackBarConfig): OverlayRef {\n    const overlayConfig = new OverlayConfig();\n    overlayConfig.direction = config.direction;\n\n    let positionStrategy = this._overlay.position().global();\n    // Set horizontal position.\n    const isRtl = config.direction === 'rtl';\n    const isLeft = (\n      config.horizontalPosition === 'left' ||\n      (config.horizontalPosition === 'start' && !isRtl) ||\n      (config.horizontalPosition === 'end' && isRtl));\n    const isRight = !isLeft && config.horizontalPosition !== 'center';\n    if (isLeft) {\n      positionStrategy.left('0');\n    } else if (isRight) {\n      positionStrategy.right('0');\n    } else {\n      positionStrategy.centerHorizontally();\n    }\n    // Set horizontal position.\n    if (config.verticalPosition === 'top') {\n      positionStrategy.top('0');\n    } else {\n      positionStrategy.bottom('0');\n    }\n\n    overlayConfig.positionStrategy = positionStrategy;\n    return this._overlay.create(overlayConfig);\n  }\n\n  /**\n   * Creates an injector to be used inside of a snack bar component.\n   * @param config Config that was used to create the snack bar.\n   * @param snackBarRef Reference to the snack bar.\n   */\n  private _createInjector<T>(\n      config: MatSnackBarConfig,\n      snackBarRef: MatSnackBarRef<T>): PortalInjector {\n\n    const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n    const injectionTokens = new WeakMap();\n\n    injectionTokens.set(MatSnackBarRef, snackBarRef);\n    injectionTokens.set(MAT_SNACK_BAR_DATA, config.data);\n\n    return new PortalInjector(userInjector || this._injector, injectionTokens);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {LIVE_ANNOUNCER_PROVIDER} from '@angular/cdk/a11y';\nimport {LayoutModule} from '@angular/cdk/layout';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatSnackBar, MAT_SNACK_BAR_DEFAULT_OPTIONS} from './snack-bar';\nimport {MatSnackBarContainer} from './snack-bar-container';\nimport {MatSnackBarConfig} from './snack-bar-config';\nimport {SimpleSnackBar} from './simple-snack-bar';\n\n\n/** @docs-private */\nexport function MAT_SNACK_BAR_DEFAULT_OPTIONS_PROVIDER_FACTORY() {\n  return new MatSnackBarConfig();\n}\n\n@NgModule({\n  imports: [\n    OverlayModule,\n    PortalModule,\n    CommonModule,\n    MatCommonModule,\n    LayoutModule,\n  ],\n  exports: [MatSnackBarContainer, MatCommonModule],\n  declarations: [MatSnackBarContainer, SimpleSnackBar],\n  entryComponents: [MatSnackBarContainer, SimpleSnackBar],\n  providers: [\n    MatSnackBar,\n    LIVE_ANNOUNCER_PROVIDER,\n    {\n      provide: MAT_SNACK_BAR_DEFAULT_OPTIONS,\n      useFactory: MAT_SNACK_BAR_DEFAULT_OPTIONS_PROVIDER_FACTORY\n    },\n  ]\n})\nexport class MatSnackBarModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Directive,\n  EventEmitter,\n  Input,\n  isDevMode,\n  Output,\n  OnChanges,\n  OnDestroy,\n} from '@angular/core';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {CanDisable, mixinDisabled} from '@angular/material/core';\nimport {SortDirection} from './sort-direction';\nimport {\n  getSortInvalidDirectionError,\n  getSortDuplicateSortableIdError,\n  getSortHeaderMissingIdError\n} from './sort-errors';\nimport {Subject} from 'rxjs/Subject';\n\n/** Interface for a directive that holds sorting state consumed by `MatSortHeader`. */\nexport interface MatSortable {\n  /** The id of the column being sorted. */\n  id: string;\n\n  /** Starting sort direction. */\n  start: 'asc' | 'desc';\n\n  /** Whether to disable clearing the sorting state. */\n  disableClear: boolean;\n}\n\n/** The current sort state. */\nexport interface Sort {\n  /** The id of the column being sorted. */\n  active: string;\n\n  /** The sort direction. */\n  direction: SortDirection;\n}\n\n// Boilerplate for applying mixins to MatSort.\n/** @docs-private */\nexport class MatSortBase {}\nexport const _MatSortMixinBase = mixinDisabled(MatSortBase);\n\n/** Container for MatSortables to manage the sort state and provide default sort parameters. */\n@Directive({\n  selector: '[matSort]',\n  exportAs: 'matSort',\n  inputs: ['disabled: matSortDisabled']\n})\nexport class MatSort extends _MatSortMixinBase implements CanDisable, OnChanges, OnDestroy {\n  /** Collection of all registered sortables that this directive manages. */\n  sortables = new Map<string, MatSortable>();\n\n  /** Used to notify any child components listening to state changes. */\n  readonly _stateChanges = new Subject<void>();\n\n  /** The id of the most recently sorted MatSortable. */\n  @Input('matSortActive') active: string;\n\n  /**\n   * The direction to set when an MatSortable is initially sorted.\n   * May be overriden by the MatSortable's sort start.\n   */\n  @Input('matSortStart') start: 'asc' | 'desc' = 'asc';\n\n  /** The sort direction of the currently active MatSortable. */\n  @Input('matSortDirection')\n  get direction(): SortDirection { return this._direction; }\n  set direction(direction: SortDirection) {\n    if (isDevMode() && direction && direction !== 'asc' && direction !== 'desc') {\n      throw getSortInvalidDirectionError(direction);\n    }\n    this._direction = direction;\n  }\n  private _direction: SortDirection = '';\n\n  /**\n   * Whether to disable the user from clearing the sort by finishing the sort direction cycle.\n   * May be overriden by the MatSortable's disable clear input.\n   */\n  @Input('matSortDisableClear')\n  get disableClear(): boolean { return this._disableClear; }\n  set disableClear(v: boolean) { this._disableClear = coerceBooleanProperty(v); }\n  private _disableClear: boolean;\n\n  /** Event emitted when the user changes either the active sort or sort direction. */\n  @Output('matSortChange') readonly sortChange: EventEmitter<Sort> = new EventEmitter<Sort>();\n\n  /**\n   * Register function to be used by the contained MatSortables. Adds the MatSortable to the\n   * collection of MatSortables.\n   */\n  register(sortable: MatSortable): void {\n    if (!sortable.id) {\n      throw getSortHeaderMissingIdError();\n    }\n\n    if (this.sortables.has(sortable.id)) {\n      throw getSortDuplicateSortableIdError(sortable.id);\n    }\n    this.sortables.set(sortable.id, sortable);\n  }\n\n  /**\n   * Unregister function to be used by the contained MatSortables. Removes the MatSortable from the\n   * collection of contained MatSortables.\n   */\n  deregister(sortable: MatSortable): void {\n    this.sortables.delete(sortable.id);\n  }\n\n  /** Sets the active sort id and determines the new sort direction. */\n  sort(sortable: MatSortable): void {\n    if (this.active != sortable.id) {\n      this.active = sortable.id;\n      this.direction = sortable.start ? sortable.start : this.start;\n    } else {\n      this.direction = this.getNextSortDirection(sortable);\n    }\n\n    this.sortChange.emit({active: this.active, direction: this.direction});\n  }\n\n  /** Returns the next sort direction of the active sortable, checking for potential overrides. */\n  getNextSortDirection(sortable: MatSortable): SortDirection {\n    if (!sortable) { return ''; }\n\n    // Get the sort direction cycle with the potential sortable overrides.\n    const disableClear = sortable.disableClear != null ? sortable.disableClear : this.disableClear;\n    let sortDirectionCycle = getSortDirectionCycle(sortable.start || this.start, disableClear);\n\n    // Get and return the next direction in the cycle\n    let nextDirectionIndex = sortDirectionCycle.indexOf(this.direction) + 1;\n    if (nextDirectionIndex >= sortDirectionCycle.length) { nextDirectionIndex = 0; }\n    return sortDirectionCycle[nextDirectionIndex];\n  }\n\n  ngOnChanges() {\n    this._stateChanges.next();\n  }\n\n  ngOnDestroy() {\n    this._stateChanges.complete();\n  }\n}\n\n/** Returns the sort direction cycle to use given the provided parameters of order and clear. */\nfunction getSortDirectionCycle(start: 'asc' | 'desc',\n                               disableClear: boolean): SortDirection[] {\n  let sortOrder: SortDirection[] = ['asc', 'desc'];\n  if (start == 'desc') { sortOrder.reverse(); }\n  if (!disableClear) { sortOrder.push(''); }\n\n  return sortOrder;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable, SkipSelf, Optional} from '@angular/core';\nimport {Subject} from 'rxjs/Subject';\nimport {SortDirection} from './sort-direction';\n\n/**\n * To modify the labels and text displayed, create a new instance of MatSortHeaderIntl and\n * include it in a custom provider.\n */\n@Injectable()\nexport class MatSortHeaderIntl {\n  /**\n   * Stream that emits whenever the labels here are changed. Use this to notify\n   * components if the labels have changed after initialization.\n   */\n  readonly changes: Subject<void> = new Subject<void>();\n\n  /** ARIA label for the sorting button. */\n  sortButtonLabel = (id: string) => {\n    return `Change sorting for ${id}`;\n  }\n\n  /** A label to describe the current sort (visible only to screenreaders). */\n  sortDescriptionLabel = (id: string, direction: SortDirection) => {\n    return `Sorted by ${id} ${direction == 'asc' ? 'ascending' : 'descending'}`;\n  }\n}\n/** @docs-private */\nexport function MAT_SORT_HEADER_INTL_PROVIDER_FACTORY(parentIntl: MatSortHeaderIntl) {\n  return parentIntl || new MatSortHeaderIntl();\n}\n\n/** @docs-private */\nexport const MAT_SORT_HEADER_INTL_PROVIDER = {\n  // If there is already an MatSortHeaderIntl available, use that. Otherwise, provide a new one.\n  provide: MatSortHeaderIntl,\n  deps: [[new Optional(), new SkipSelf(), MatSortHeaderIntl]],\n  useFactory: MAT_SORT_HEADER_INTL_PROVIDER_FACTORY\n};\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  keyframes,\n  AnimationTriggerMetadata, query, animateChild,\n} from '@angular/animations';\nimport {AnimationCurves, AnimationDurations} from '@angular/material/core';\n\nconst SORT_ANIMATION_TRANSITION = AnimationDurations.ENTERING + ' ' +\n                                  AnimationCurves.STANDARD_CURVE;\n\n/** Animations used by MatSort. */\nexport const matSortAnimations: {\n  readonly indicator: AnimationTriggerMetadata;\n  readonly leftPointer: AnimationTriggerMetadata;\n  readonly rightPointer: AnimationTriggerMetadata;\n  readonly arrowOpacity: AnimationTriggerMetadata;\n  readonly arrowPosition: AnimationTriggerMetadata;\n  readonly allowChildren: AnimationTriggerMetadata;\n} = {\n  /** Animation that moves the sort indicator. */\n  indicator: trigger('indicator', [\n    state('active-asc, asc', style({transform: 'translateY(0px)'})),\n    // 10px is the height of the sort indicator, minus the width of the pointers\n    state('active-desc, desc', style({transform: 'translateY(10px)'})),\n    transition('active-asc <=> active-desc', animate(SORT_ANIMATION_TRANSITION))\n  ]),\n\n  /** Animation that rotates the left pointer of the indicator based on the sorting direction. */\n  leftPointer: trigger('leftPointer', [\n    state('active-asc, asc', style({transform: 'rotate(-45deg)'})),\n    state('active-desc, desc', style({transform: 'rotate(45deg)'})),\n    transition('active-asc <=> active-desc', animate(SORT_ANIMATION_TRANSITION))\n  ]),\n\n  /** Animation that rotates the right pointer of the indicator based on the sorting direction. */\n  rightPointer: trigger('rightPointer', [\n    state('active-asc, asc', style({transform: 'rotate(45deg)'})),\n    state('active-desc, desc', style({transform: 'rotate(-45deg)'})),\n    transition('active-asc <=> active-desc', animate(SORT_ANIMATION_TRANSITION))\n  ]),\n\n  /** Animation that controls the arrow opacity. */\n  arrowOpacity: trigger('arrowOpacity', [\n    state('desc-to-active, asc-to-active, active', style({opacity: 1})),\n    state('desc-to-hint, asc-to-hint, hint', style({opacity: .54})),\n    state('hint-to-desc, active-to-desc, desc, hint-to-asc, active-to-asc, asc',\n        style({opacity: 0})),\n    // Transition between all states except for immediate transitions\n    transition('* => asc, * => desc, * => active, * => hint', animate('0ms')),\n    transition('* <=> *', animate(SORT_ANIMATION_TRANSITION))\n  ]),\n\n  /**\n   * Animation for the translation of the arrow as a whole. States are separated into two\n   * groups: ones with animations and others that are immediate. Immediate states are asc, desc,\n   * peek, and active. The other states define a specific animation (source-to-destination)\n   * and are determined as a function of their prev user-perceived state and what the next state\n   * should be.\n   */\n  arrowPosition: trigger('arrowPosition', [\n    // Hidden Above => Hint Center\n    transition('* => desc-to-hint, * => desc-to-active',\n        animate(SORT_ANIMATION_TRANSITION, keyframes([\n          style({transform: 'translateY(-25%)'}),\n          style({transform: 'translateY(0)'})\n        ]))),\n    // Hint Center => Hidden Below\n    transition('* => hint-to-desc, * => active-to-desc',\n        animate(SORT_ANIMATION_TRANSITION, keyframes([\n          style({transform: 'translateY(0)'}),\n          style({transform: 'translateY(25%)'})\n        ]))),\n    // Hidden Below => Hint Center\n    transition('* => asc-to-hint, * => asc-to-active',\n        animate(SORT_ANIMATION_TRANSITION, keyframes([\n          style({transform: 'translateY(25%)'}),\n          style({transform: 'translateY(0)'})\n        ]))),\n    // Hint Center => Hidden Above\n    transition('* => hint-to-asc, * => active-to-asc',\n        animate(SORT_ANIMATION_TRANSITION, keyframes([\n          style({transform: 'translateY(0)'}),\n          style({transform: 'translateY(-25%)'})\n        ]))),\n    state('desc-to-hint, asc-to-hint, hint, desc-to-active, asc-to-active, active',\n        style({transform: 'translateY(0)'})),\n    state('hint-to-desc, active-to-desc, desc',\n        style({transform: 'translateY(-25%)'})),\n    state('hint-to-asc, active-to-asc, asc',\n        style({transform: 'translateY(25%)'})),\n  ]),\n\n  /** Necessary trigger that calls animate on children animations. */\n  allowChildren: trigger('allowChildren', [\n    transition('* <=> *', [\n      query('@*', animateChild(), {optional: true})\n    ])\n  ]),\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  Input,\n  Optional,\n  ViewEncapsulation\n} from '@angular/core';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {CdkColumnDef} from '@angular/cdk/table';\nimport {Subscription} from 'rxjs/Subscription';\nimport {merge} from 'rxjs/observable/merge';\nimport {MatSort, MatSortable} from './sort';\nimport {SortDirection} from './sort-direction';\nimport {MatSortHeaderIntl} from './sort-header-intl';\nimport {getSortHeaderNotContainedWithinSortError} from './sort-errors';\nimport {CanDisable, mixinDisabled} from '@angular/material/core';\nimport {matSortAnimations} from './sort-animations';\n\n// Boilerplate for applying mixins to the sort header.\n/** @docs-private */\nexport class MatSortHeaderBase {}\nexport const _MatSortHeaderMixinBase = mixinDisabled(MatSortHeaderBase);\n\n/**\n * Valid positions for the arrow to be in for its opacity and translation. If the state is a\n * sort direction, the position of the arrow will be above/below and opacity 0. If the state is\n * hint, the arrow will be in the center with a slight opacity. Active state means the arrow will\n * be fully opaque in the center.\n *\n * @docs-private\n */\nexport type ArrowViewState = SortDirection | 'hint' | 'active';\n\n/**\n * States describing the arrow's animated position (animating fromState to toState).\n * If the fromState is not defined, there will be no animated transition to the toState.\n * @docs-private\n */\nexport interface ArrowViewStateTransition {\n  fromState?: ArrowViewState;\n  toState: ArrowViewState;\n}\n\n/**\n * Applies sorting behavior (click to change sort) and styles to an element, including an\n * arrow to display the current sort direction.\n *\n * Must be provided with an id and contained within a parent MatSort directive.\n *\n * If used on header cells in a CdkTable, it will automatically default its id from its containing\n * column definition.\n */\n@Component({\n  moduleId: module.id,\n  selector: '[mat-sort-header]',\n  exportAs: 'matSortHeader',\n  templateUrl: 'sort-header.html',\n  styleUrls: ['sort-header.css'],\n  host: {\n    '(click)': '_handleClick()',\n    '(mouseenter)': '_setIndicatorHintVisible(true)',\n    '(longpress)': '_setIndicatorHintVisible(true)',\n    '(mouseleave)': '_setIndicatorHintVisible(false)',\n    '[class.mat-sort-header-disabled]': '_isDisabled()',\n  },\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  inputs: ['disabled'],\n  animations: [\n    matSortAnimations.indicator,\n    matSortAnimations.leftPointer,\n    matSortAnimations.rightPointer,\n    matSortAnimations.arrowOpacity,\n    matSortAnimations.arrowPosition,\n    matSortAnimations.allowChildren,\n  ]\n})\nexport class MatSortHeader extends _MatSortHeaderMixinBase implements MatSortable, CanDisable {\n  private _rerenderSubscription: Subscription;\n\n  /**\n   * Flag set to true when the indicator should be displayed while the sort is not active. Used to\n   * provide an affordance that the header is sortable by showing on focus and hover.\n   */\n  _showIndicatorHint: boolean = false;\n\n  /**\n   * The view transition state of the arrow (translation/ opacity) - indicates its `from` and `to`\n   * position through the animation. If animations are currently disabled, the fromState is removed\n   * so that there is no animation displayed.\n   */\n  _viewState: ArrowViewStateTransition;\n\n  /** The direction the arrow should be facing according to the current state. */\n  _arrowDirection: SortDirection = '';\n\n  /**\n   * Whether the view state animation should show the transition between the `from` and `to` states.\n   */\n  _disableViewStateAnimation = false;\n\n  /**\n   * ID of this sort header. If used within the context of a CdkColumnDef, this will default to\n   * the column's name.\n   */\n  @Input('mat-sort-header') id: string;\n\n  /** Sets the position of the arrow that displays when sorted. */\n  @Input() arrowPosition: 'before' | 'after' = 'after';\n\n  /** Overrides the sort start value of the containing MatSort for this MatSortable. */\n  @Input() start: 'asc' | 'desc';\n\n  /** Overrides the disable clear value of the containing MatSort for this MatSortable. */\n  @Input()\n  get disableClear(): boolean { return this._disableClear; }\n  set disableClear(v) { this._disableClear = coerceBooleanProperty(v); }\n  private _disableClear: boolean;\n\n  constructor(public _intl: MatSortHeaderIntl,\n              changeDetectorRef: ChangeDetectorRef,\n              @Optional() public _sort: MatSort,\n              @Optional() public _cdkColumnDef: CdkColumnDef) {\n\n    super();\n\n    if (!_sort) {\n      throw getSortHeaderNotContainedWithinSortError();\n    }\n\n    this._rerenderSubscription = merge(_sort.sortChange, _sort._stateChanges, _intl.changes)\n        .subscribe(() => {\n          if (this._isSorted()) {\n            this._updateArrowDirection();\n          }\n\n          // If this header was recently active and now no longer sorted, animate away the arrow.\n          if (!this._isSorted() && this._viewState && this._viewState.toState === 'active') {\n            this._disableViewStateAnimation = false;\n            this._setAnimationTransitionState({fromState: 'active', toState: this._arrowDirection});\n          }\n\n          changeDetectorRef.markForCheck();\n        });\n  }\n\n  ngOnInit() {\n    if (!this.id && this._cdkColumnDef) {\n      this.id = this._cdkColumnDef.name;\n    }\n\n    // Initialize the direction of the arrow and set the view state to be immediately that state.\n    this._updateArrowDirection();\n    this._setAnimationTransitionState(\n        {toState: this._isSorted() ? 'active' : this._arrowDirection});\n\n    this._sort.register(this);\n  }\n\n  ngOnDestroy() {\n    this._sort.deregister(this);\n    this._rerenderSubscription.unsubscribe();\n  }\n\n  /**\n   * Sets the \"hint\" state such that the arrow will be semi-transparently displayed as a hint to the\n   * user showing what the active sort will become. If set to false, the arrow will fade away.\n   */\n  _setIndicatorHintVisible(visible: boolean) {\n    // No-op if the sort header is disabled - should not make the hint visible.\n    if (this._isDisabled() && visible) { return; }\n\n    this._showIndicatorHint = visible;\n\n    if (!this._isSorted()) {\n      this._updateArrowDirection();\n      if (this._showIndicatorHint) {\n        this._setAnimationTransitionState({fromState: this._arrowDirection, toState: 'hint'});\n      } else {\n        this._setAnimationTransitionState({fromState: 'hint', toState: this._arrowDirection});\n      }\n    }\n  }\n\n  /**\n   * Sets the animation transition view state for the arrow's position and opacity. If the\n   * `disableViewStateAnimation` flag is set to true, the `fromState` will be ignored so that\n   * no animation appears.\n   */\n  _setAnimationTransitionState(viewState: ArrowViewStateTransition) {\n    this._viewState = viewState;\n\n    // If the animation for arrow position state (opacity/translation) should be disabled,\n    // remove the fromState so that it jumps right to the toState.\n    if (this._disableViewStateAnimation) {\n      this._viewState = {toState: viewState.toState};\n    }\n  }\n\n  /** Triggers the sort on this sort header and removes the indicator hint. */\n  _handleClick() {\n    if (this._isDisabled()) { return; }\n\n    this._sort.sort(this);\n\n    // Do not show the animation if the header was already shown in the right position.\n    if (this._viewState.toState === 'hint' || this._viewState.toState === 'active') {\n      this._disableViewStateAnimation = true;\n    }\n\n    // If the arrow is now sorted, animate the arrow into place. Otherwise, animate it away into\n    // the direction it is facing.\n    const viewState: ArrowViewStateTransition = this._isSorted() ?\n        {fromState: this._arrowDirection, toState: 'active'} :\n        {fromState: 'active', toState: this._arrowDirection};\n    this._setAnimationTransitionState(viewState);\n\n    this._showIndicatorHint = false;\n  }\n\n  /** Whether this MatSortHeader is currently sorted in either ascending or descending order. */\n  _isSorted() {\n    return this._sort.active == this.id &&\n        (this._sort.direction === 'asc' || this._sort.direction === 'desc');\n  }\n\n  /** Returns the animation state for the arrow direction (indicator and pointers). */\n  _getArrowDirectionState() {\n    return `${this._isSorted() ? 'active-' : ''}${this._arrowDirection}`;\n  }\n\n  /** Returns the arrow position state (opacity, translation). */\n  _getArrowViewState() {\n    const fromState = this._viewState.fromState;\n    return (fromState ? `${fromState}-to-` : '') + this._viewState.toState;\n  }\n\n  /**\n   * Updates the direction the arrow should be pointing. If it is not sorted, the arrow should be\n   * facing the start direction. Otherwise if it is sorted, the arrow should point in the currently\n   * active sorted direction. The reason this is updated through a function is because the direction\n   * should only be changed at specific times - when deactivated but the hint is displayed and when\n   * the sort is active and the direction changes. Otherwise the arrow's direction should linger\n   * in cases such as the sort becoming deactivated but we want to animate the arrow away while\n   * preserving its direction, even though the next sort direction is actually different and should\n   * only be changed once the arrow displays again (hint or activation).\n   */\n  _updateArrowDirection() {\n    this._arrowDirection = this._isSorted() ?\n        this._sort.direction :\n        (this.start || this._sort.start);\n  }\n\n  _isDisabled() {\n    return this._sort.disabled || this.disabled;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatSortHeader} from './sort-header';\nimport {MatSort} from './sort';\nimport {MAT_SORT_HEADER_INTL_PROVIDER} from './sort-header-intl';\nimport {CommonModule} from '@angular/common';\n\n\n@NgModule({\n  imports: [CommonModule],\n  exports: [MatSort, MatSortHeader],\n  declarations: [MatSort, MatSortHeader],\n  providers: [MAT_SORT_HEADER_INTL_PROVIDER]\n})\nexport class MatSortModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, TemplateRef} from '@angular/core';\nimport {CdkStepLabel} from '@angular/cdk/stepper';\n\n@Directive({\n  selector: '[matStepLabel]',\n})\nexport class MatStepLabel extends CdkStepLabel {\n  constructor(template: TemplateRef<any>) {\n    super(template);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable} from '@angular/core';\nimport {Subject} from 'rxjs/Subject';\n\n\n/** Stepper data that is required for internationalization. */\n@Injectable()\nexport class MatStepperIntl {\n  /**\n   * Stream that emits whenever the labels here are changed. Use this to notify\n   * components if the labels have changed after initialization.\n   */\n  readonly changes: Subject<void> = new Subject<void>();\n\n  /** Label that is rendered below optional steps. */\n  optionalLabel: string = 'Optional';\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor} from '@angular/cdk/a11y';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  Input,\n  OnDestroy,\n  ViewEncapsulation,\n  TemplateRef,\n} from '@angular/core';\nimport {Subscription} from 'rxjs/Subscription';\nimport {MatStepLabel} from './step-label';\nimport {MatStepperIntl} from './stepper-intl';\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-step-header',\n  templateUrl: 'step-header.html',\n  styleUrls: ['step-header.css'],\n  host: {\n    'class': 'mat-step-header',\n    'role': 'tab',\n  },\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatStepHeader implements OnDestroy {\n  private _intlSubscription: Subscription;\n\n  /** State of the given step. */\n  @Input() state: string;\n\n  /** Label of the given step. */\n  @Input() label: MatStepLabel | string;\n\n  /** Overrides for the header icons, passed in via the stepper. */\n  @Input() iconOverrides: {[key: string]: TemplateRef<any>};\n\n  /** Index of the given step. */\n  @Input() index: number;\n\n  /** Whether the given step is selected. */\n  @Input() selected: boolean;\n\n  /** Whether the given step label is active. */\n  @Input() active: boolean;\n\n  /** Whether the given step is optional. */\n  @Input() optional: boolean;\n\n  constructor(\n    public _intl: MatStepperIntl,\n    private _focusMonitor: FocusMonitor,\n    private _element: ElementRef,\n    changeDetectorRef: ChangeDetectorRef) {\n    _focusMonitor.monitor(_element.nativeElement, true);\n    this._intlSubscription = _intl.changes.subscribe(() => changeDetectorRef.markForCheck());\n  }\n\n  ngOnDestroy() {\n    this._intlSubscription.unsubscribe();\n    this._focusMonitor.stopMonitoring(this._element.nativeElement);\n  }\n\n  /** Returns string label of given step if it is a text label. */\n  _stringLabel(): string | null {\n    return this.label instanceof MatStepLabel ? null : this.label;\n  }\n\n  /** Returns MatStepLabel if the label of given step is a template label. */\n  _templateLabel(): MatStepLabel | null {\n    return this.label instanceof MatStepLabel ? this.label : null;\n  }\n\n  /** Returns the host HTML element. */\n  _getHostElement() {\n    return this._element.nativeElement;\n  }\n\n  focus() {\n    this._getHostElement().focus();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/** Animations used by the Material steppers. */\nexport const matStepperAnimations: {\n  readonly horizontalStepTransition: AnimationTriggerMetadata;\n  readonly verticalStepTransition: AnimationTriggerMetadata;\n} = {\n  /** Animation that transitions the step along the X axis in a horizontal stepper. */\n  horizontalStepTransition: trigger('stepTransition', [\n    state('previous', style({transform: 'translate3d(-100%, 0, 0)', visibility: 'hidden'})),\n    state('current', style({transform: 'none', visibility: 'visible'})),\n    state('next', style({transform: 'translate3d(100%, 0, 0)', visibility: 'hidden'})),\n    transition('* => *', animate('500ms cubic-bezier(0.35, 0, 0.25, 1)'))\n  ]),\n\n  /** Animation that transitions the step along the Y axis in a vertical stepper. */\n  verticalStepTransition: trigger('stepTransition', [\n    state('previous', style({height: '0px', visibility: 'hidden'})),\n    state('next', style({height: '0px', visibility: 'hidden'})),\n    state('current', style({height: '*', visibility: 'visible'})),\n    transition('* <=> current', animate('225ms cubic-bezier(0.4, 0.0, 0.2, 1)'))\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, Input, TemplateRef} from '@angular/core';\n\n/**\n * Template to be used to override the icons inside the step header.\n */\n@Directive({\n  selector: 'ng-template[matStepperIcon]',\n})\nexport class MatStepperIcon {\n  /** Name of the icon to be overridden. */\n  @Input('matStepperIcon') name: 'edit' | 'done';\n\n  constructor(public templateRef: TemplateRef<any>) { }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  ContentChildren,\n  forwardRef,\n  Inject,\n  Input,\n  ViewEncapsulation,\n  QueryList,\n} from '@angular/core';\nimport {MatDrawer, MatDrawerContainer, MatDrawerContent} from './drawer';\nimport {matDrawerAnimations} from './drawer-animations';\nimport {coerceBooleanProperty, coerceNumberProperty} from '@angular/cdk/coercion';\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-sidenav-content',\n  template: '<ng-content></ng-content>',\n  host: {\n    'class': 'mat-drawer-content mat-sidenav-content',\n    '[style.margin-left.px]': '_margins.left',\n    '[style.margin-right.px]': '_margins.right',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatSidenavContent extends MatDrawerContent {\n  constructor(\n      changeDetectorRef: ChangeDetectorRef,\n      @Inject(forwardRef(() => MatSidenavContainer)) container: MatSidenavContainer) {\n    super(changeDetectorRef, container);\n  }\n}\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-sidenav',\n  exportAs: 'matSidenav',\n  template: '<ng-content></ng-content>',\n  animations: [matDrawerAnimations.transformDrawer],\n  host: {\n    'class': 'mat-drawer mat-sidenav',\n    'tabIndex': '-1',\n    '[@transform]': '_animationState',\n    '(@transform.start)': '_onAnimationStart($event)',\n    '(@transform.done)': '_onAnimationEnd($event)',\n    // must prevent the browser from aligning text based on value\n    '[attr.align]': 'null',\n    '[class.mat-drawer-end]': 'position === \"end\"',\n    '[class.mat-drawer-over]': 'mode === \"over\"',\n    '[class.mat-drawer-push]': 'mode === \"push\"',\n    '[class.mat-drawer-side]': 'mode === \"side\"',\n    '[class.mat-sidenav-fixed]': 'fixedInViewport',\n    '[style.top.px]': 'fixedInViewport ? fixedTopGap : null',\n    '[style.bottom.px]': 'fixedInViewport ? fixedBottomGap : null',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatSidenav extends MatDrawer {\n  /** Whether the sidenav is fixed in the viewport. */\n  @Input()\n  get fixedInViewport(): boolean { return this._fixedInViewport; }\n  set fixedInViewport(value) { this._fixedInViewport = coerceBooleanProperty(value); }\n  private _fixedInViewport = false;\n\n  /**\n   * The gap between the top of the sidenav and the top of the viewport when the sidenav is in fixed\n   * mode.\n   */\n  @Input()\n  get fixedTopGap(): number { return this._fixedTopGap; }\n  set fixedTopGap(value) { this._fixedTopGap = coerceNumberProperty(value); }\n  private _fixedTopGap = 0;\n\n  /**\n   * The gap between the bottom of the sidenav and the bottom of the viewport when the sidenav is in\n   * fixed mode.\n   */\n  @Input()\n  get fixedBottomGap(): number { return this._fixedBottomGap; }\n  set fixedBottomGap(value) { this._fixedBottomGap = coerceNumberProperty(value); }\n  private _fixedBottomGap = 0;\n}\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-sidenav-container',\n  exportAs: 'matSidenavContainer',\n  templateUrl: 'sidenav-container.html',\n  styleUrls: ['drawer.css'],\n  host: {\n    'class': 'mat-drawer-container mat-sidenav-container',\n    '[class.mat-drawer-container-explicit-backdrop]': '_backdropOverride',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatSidenavContainer extends MatDrawerContainer {\n  @ContentChildren(MatSidenav) _drawers: QueryList<MatSidenav>;\n  @ContentChild(MatSidenavContent) _content: MatSidenavContent;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {A11yModule} from '@angular/cdk/a11y';\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {ScrollDispatchModule} from '@angular/cdk/scrolling';\nimport {PlatformModule} from '@angular/cdk/platform';\nimport {MatSidenav, MatSidenavContainer, MatSidenavContent} from './sidenav';\nimport {\n  MatDrawer,\n  MatDrawerContainer,\n  MatDrawerContent,\n  MAT_DRAWER_DEFAULT_AUTOSIZE,\n} from './drawer';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatCommonModule,\n    A11yModule,\n    OverlayModule,\n    ScrollDispatchModule,\n    PlatformModule,\n  ],\n  exports: [\n    MatCommonModule,\n    MatDrawer,\n    MatDrawerContainer,\n    MatDrawerContent,\n    MatSidenav,\n    MatSidenavContainer,\n    MatSidenavContent,\n  ],\n  declarations: [\n    MatDrawer,\n    MatDrawerContainer,\n    MatDrawerContent,\n    MatSidenav,\n    MatSidenavContainer,\n    MatSidenavContent,\n  ],\n  providers: [\n    {provide: MAT_DRAWER_DEFAULT_AUTOSIZE, useValue: false}\n  ]\n})\nexport class MatSidenavModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor, FocusOrigin} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {Platform} from '@angular/cdk/platform';\nimport {\n  AfterContentInit,\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Input,\n  OnDestroy,\n  Output,\n  ViewChild,\n  ViewEncapsulation\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {\n  CanColor,\n  CanDisable,\n  CanDisableRipple,\n  HammerInput,\n  HasTabIndex,\n  MatRipple,\n  mixinColor,\n  mixinDisabled,\n  mixinDisableRipple,\n  mixinTabIndex,\n  RippleRef,\n} from '@angular/material/core';\n\n// Increasing integer for generating unique ids for slide-toggle components.\nlet nextUniqueId = 0;\n\nexport const MAT_SLIDE_TOGGLE_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatSlideToggle),\n  multi: true\n};\n\n/** Change event object emitted by a MatSlideToggle. */\nexport class MatSlideToggleChange {\n  constructor(\n    /** The source MatSlideToggle of the event. */\n    public source: MatSlideToggle,\n    /** The new `checked` value of the MatSlideToggle. */\n    public checked: boolean) { }\n}\n\n// Boilerplate for applying mixins to MatSlideToggle.\n/** @docs-private */\nexport class MatSlideToggleBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatSlideToggleMixinBase =\n  mixinTabIndex(mixinColor(mixinDisableRipple(mixinDisabled(MatSlideToggleBase)), 'accent'));\n\n/** Represents a slidable \"switch\" toggle that can be moved between on and off. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-slide-toggle',\n  exportAs: 'matSlideToggle',\n  host: {\n    'class': 'mat-slide-toggle',\n    '[id]': 'id',\n    '[class.mat-checked]': 'checked',\n    '[class.mat-disabled]': 'disabled',\n    '[class.mat-slide-toggle-label-before]': 'labelPosition == \"before\"',\n  },\n  templateUrl: 'slide-toggle.html',\n  styleUrls: ['slide-toggle.css'],\n  providers: [MAT_SLIDE_TOGGLE_VALUE_ACCESSOR],\n  inputs: ['disabled', 'disableRipple', 'color', 'tabIndex'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatSlideToggle extends _MatSlideToggleMixinBase implements OnDestroy, AfterContentInit,\n    ControlValueAccessor, CanDisable, CanColor, HasTabIndex, CanDisableRipple {\n\n  private onChange = (_: any) => {};\n  private onTouched = () => {};\n\n  private _uniqueId: string = `mat-slide-toggle-${++nextUniqueId}`;\n  private _slideRenderer: SlideToggleRenderer;\n  private _required: boolean = false;\n  private _checked: boolean = false;\n\n  /** Reference to the focus state ripple. */\n  private _focusRipple: RippleRef | null;\n\n  /** Name value will be applied to the input element if present */\n  @Input() name: string | null = null;\n\n  /** A unique id for the slide-toggle input. If none is supplied, it will be auto-generated. */\n  @Input() id: string = this._uniqueId;\n\n  /** Whether the label should appear after or before the slide-toggle. Defaults to 'after' */\n  @Input() labelPosition: 'before' | 'after' = 'after';\n\n  /** Whether the slide-toggle element is checked or not */\n\n  /** Used to set the aria-label attribute on the underlying input element. */\n  @Input('aria-label') ariaLabel: string | null = null;\n\n  /** Used to set the aria-labelledby attribute on the underlying input element. */\n  @Input('aria-labelledby') ariaLabelledby: string | null = null;\n\n  /** Whether the slide-toggle is required. */\n  @Input()\n  get required(): boolean { return this._required; }\n  set required(value) { this._required = coerceBooleanProperty(value); }\n\n  /** Whether the slide-toggle element is checked or not */\n  @Input()\n  get checked(): boolean { return this._checked; }\n  set checked(value) {\n    this._checked = coerceBooleanProperty(value);\n    this._changeDetectorRef.markForCheck();\n  }\n  /** An event will be dispatched each time the slide-toggle changes its value. */\n  @Output() readonly change: EventEmitter<MatSlideToggleChange> =\n      new EventEmitter<MatSlideToggleChange>();\n\n  /** Returns the unique id for the visual hidden input. */\n  get inputId(): string { return `${this.id || this._uniqueId}-input`; }\n\n  /** Reference to the underlying input element. */\n  @ViewChild('input') _inputElement: ElementRef;\n\n  /** Reference to the ripple directive on the thumb container. */\n  @ViewChild(MatRipple) _ripple: MatRipple;\n\n  constructor(elementRef: ElementRef,\n              private _platform: Platform,\n              private _focusMonitor: FocusMonitor,\n              private _changeDetectorRef: ChangeDetectorRef,\n              @Attribute('tabindex') tabIndex: string) {\n\n    super(elementRef);\n    this.tabIndex = parseInt(tabIndex) || 0;\n  }\n\n  ngAfterContentInit() {\n    this._slideRenderer = new SlideToggleRenderer(this._elementRef, this._platform);\n\n    this._focusMonitor\n      .monitor(this._inputElement.nativeElement)\n      .subscribe(focusOrigin => this._onInputFocusChange(focusOrigin));\n  }\n\n  ngOnDestroy() {\n    this._focusMonitor.stopMonitoring(this._inputElement.nativeElement);\n  }\n\n  /** Method being called whenever the underlying input emits a change event. */\n  _onChangeEvent(event: Event) {\n    // We always have to stop propagation on the change event.\n    // Otherwise the change event, from the input element, will bubble up and\n    // emit its event object to the component's `change` output.\n    event.stopPropagation();\n\n    // Releasing the pointer over the `<label>` element while dragging triggers another\n    // click event on the `<label>` element. This means that the checked state of the underlying\n    // input changed unintentionally and needs to be changed back.\n    if (this._slideRenderer.dragging) {\n      this._inputElement.nativeElement.checked = this.checked;\n      return;\n    }\n\n    // Sync the value from the underlying input element with the component instance.\n    this.checked = this._inputElement.nativeElement.checked;\n\n    // Emit our custom change event only if the underlying input emitted one. This ensures that\n    // there is no change event, when the checked state changes programmatically.\n    this._emitChangeEvent();\n  }\n\n  /** Method being called whenever the slide-toggle has been clicked. */\n  _onInputClick(event: Event) {\n    // We have to stop propagation for click events on the visual hidden input element.\n    // By default, when a user clicks on a label element, a generated click event will be\n    // dispatched on the associated input element. Since we are using a label element as our\n    // root container, the click event on the `slide-toggle` will be executed twice.\n    // The real click event will bubble up, and the generated click event also tries to bubble up.\n    // This will lead to multiple click events.\n    // Preventing bubbling for the second event will solve that issue.\n    event.stopPropagation();\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  writeValue(value: any): void {\n    this.checked = !!value;\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  registerOnChange(fn: any): void {\n    this.onChange = fn;\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  registerOnTouched(fn: any): void {\n    this.onTouched = fn;\n  }\n\n  /** Implemented as a part of ControlValueAccessor. */\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Focuses the slide-toggle. */\n  focus(): void {\n    this._focusMonitor.focusVia(this._inputElement.nativeElement, 'keyboard');\n  }\n\n  /** Toggles the checked state of the slide-toggle. */\n  toggle(): void {\n    this.checked = !this.checked;\n  }\n\n  /** Function is called whenever the focus changes for the input element. */\n  private _onInputFocusChange(focusOrigin: FocusOrigin) {\n    // TODO(paul): support `program`. See https://github.com/angular/material2/issues/9889\n    if (!this._focusRipple && focusOrigin === 'keyboard') {\n      // For keyboard focus show a persistent ripple as focus indicator.\n      this._focusRipple = this._ripple.launch(0, 0, {persistent: true});\n    } else if (!focusOrigin) {\n      this.onTouched();\n\n      // Fade out and clear the focus ripple if one is currently present.\n      if (this._focusRipple) {\n        this._focusRipple.fadeOut();\n        this._focusRipple = null;\n      }\n    }\n  }\n\n  /**\n   * Emits a change event on the `change` output. Also notifies the FormControl about the change.\n   */\n  private _emitChangeEvent() {\n    this.onChange(this.checked);\n    this.change.emit(new MatSlideToggleChange(this, this.checked));\n  }\n\n  _onDragStart() {\n    if (!this.disabled) {\n      this._slideRenderer.startThumbDrag(this.checked);\n    }\n  }\n\n  _onDrag(event: HammerInput) {\n    if (this._slideRenderer.dragging) {\n      this._slideRenderer.updateThumbPosition(event.deltaX);\n    }\n  }\n\n  _onDragEnd() {\n    if (this._slideRenderer.dragging) {\n      const newCheckedValue = this._slideRenderer.dragPercentage > 50;\n\n      if (newCheckedValue !== this.checked) {\n        this.checked = newCheckedValue;\n        this._emitChangeEvent();\n      }\n\n      // The drag should be stopped outside of the current event handler, because otherwise the\n      // click event will be fired before and will revert the drag change.\n      setTimeout(() => this._slideRenderer.stopThumbDrag());\n    }\n  }\n\n  /** Method being called whenever the label text changes. */\n  _onLabelTextChange() {\n    // This method is getting called whenever the label of the slide-toggle changes.\n    // Since the slide-toggle uses the OnPush strategy we need to notify it about the change\n    // that has been recognized by the cdkObserveContent directive.\n    this._changeDetectorRef.markForCheck();\n  }\n}\n\n/**\n * Renderer for the Slide Toggle component, which separates DOM modification in its own class\n */\nclass SlideToggleRenderer {\n\n  /** Reference to the thumb HTMLElement. */\n  private _thumbEl: HTMLElement;\n\n  /** Reference to the thumb bar HTMLElement. */\n  private _thumbBarEl: HTMLElement;\n\n  /** Width of the thumb bar of the slide-toggle. */\n  private _thumbBarWidth: number;\n\n  /** Previous checked state before drag started. */\n  private _previousChecked: boolean;\n\n  /** Percentage of the thumb while dragging. Percentage as fraction of 100. */\n  dragPercentage: number;\n\n  /** Whether the thumb is currently being dragged. */\n  dragging: boolean = false;\n\n  constructor(elementRef: ElementRef, platform: Platform) {\n    // We only need to interact with these elements when we're on the browser, so only grab\n    // the reference in that case.\n    if (platform.isBrowser) {\n      this._thumbEl = elementRef.nativeElement.querySelector('.mat-slide-toggle-thumb-container');\n      this._thumbBarEl = elementRef.nativeElement.querySelector('.mat-slide-toggle-bar');\n    }\n  }\n\n  /** Initializes the drag of the slide-toggle. */\n  startThumbDrag(checked: boolean): void {\n    if (this.dragging) { return; }\n\n    this._thumbBarWidth = this._thumbBarEl.clientWidth - this._thumbEl.clientWidth;\n    this._thumbEl.classList.add('mat-dragging');\n\n    this._previousChecked = checked;\n    this.dragging = true;\n  }\n\n  /** Resets the current drag and returns the new checked value. */\n  stopThumbDrag(): boolean {\n    if (!this.dragging) { return false; }\n\n    this.dragging = false;\n    this._thumbEl.classList.remove('mat-dragging');\n\n    // Reset the transform because the component will take care of the thumb position after drag.\n    this._thumbEl.style.transform = '';\n\n    return this.dragPercentage > 50;\n  }\n\n  /** Updates the thumb containers position from the specified distance. */\n  updateThumbPosition(distance: number): void {\n    this.dragPercentage = this._getDragPercentage(distance);\n    // Calculate the moved distance based on the thumb bar width.\n    const dragX = (this.dragPercentage / 100) * this._thumbBarWidth;\n    this._thumbEl.style.transform = `translate3d(${dragX}px, 0, 0)`;\n  }\n\n  /** Retrieves the percentage of thumb from the moved distance. Percentage as fraction of 100. */\n  private _getDragPercentage(distance: number) {\n    let percentage = (distance / this._thumbBarWidth) * 100;\n\n    // When the toggle was initially checked, then we have to start the drag at the end.\n    if (this._previousChecked) {\n      percentage += 100;\n    }\n\n    return Math.max(0, Math.min(percentage, 100));\n  }\n\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ObserversModule} from '@angular/cdk/observers';\nimport {PlatformModule} from '@angular/cdk/platform';\nimport {NgModule} from '@angular/core';\nimport {\n  GestureConfig,\n  MatCommonModule,\n  MatRippleModule,\n} from '@angular/material/core';\nimport {HAMMER_GESTURE_CONFIG} from '@angular/platform-browser';\nimport {A11yModule} from '@angular/cdk/a11y';\nimport {MatSlideToggle} from './slide-toggle';\n\n\n@NgModule({\n  imports: [MatRippleModule, MatCommonModule, PlatformModule, ObserversModule, A11yModule],\n  exports: [MatSlideToggle, MatCommonModule],\n  declarations: [MatSlideToggle],\n  providers: [\n    {provide: HAMMER_GESTURE_CONFIG, useClass: GestureConfig}\n  ],\n})\nexport class MatSlideToggleModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ChangeDetectionStrategy,\n  Input,\n  ElementRef,\n  SimpleChanges,\n  OnChanges,\n  ViewEncapsulation,\n  Optional,\n  Inject,\n} from '@angular/core';\nimport {CanColor, mixinColor} from '@angular/material/core';\nimport {Platform} from '@angular/cdk/platform';\nimport {DOCUMENT} from '@angular/common';\nimport {coerceNumberProperty} from '@angular/cdk/coercion';\n\n/** Possible mode for a progress spinner. */\nexport type ProgressSpinnerMode = 'determinate' | 'indeterminate';\n\n/**\n * Base reference size of the spinner.\n * @docs-private\n */\nconst BASE_SIZE = 100;\n\n/**\n * Base reference stroke width of the spinner.\n * @docs-private\n */\nconst BASE_STROKE_WIDTH = 10;\n\n// Boilerplate for applying mixins to MatProgressSpinner.\n/** @docs-private */\nexport class MatProgressSpinnerBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatProgressSpinnerMixinBase = mixinColor(MatProgressSpinnerBase, 'primary');\n\n// .0001 percentage difference is necessary in order to avoid unwanted animation frames\n// for example because the animation duration is 4 seconds, .1% accounts to 4ms\n// which are enough to see the flicker described in\n// https://github.com/angular/material2/issues/8984\nconst INDETERMINATE_ANIMATION_TEMPLATE = `\n @keyframes mat-progress-spinner-stroke-rotate-DIAMETER {\n    0%      { stroke-dashoffset: START_VALUE;  transform: rotate(0); }\n    12.5%   { stroke-dashoffset: END_VALUE;    transform: rotate(0); }\n    12.5001%  { stroke-dashoffset: END_VALUE;    transform: rotateX(180deg) rotate(72.5deg); }\n    25%     { stroke-dashoffset: START_VALUE;  transform: rotateX(180deg) rotate(72.5deg); }\n\n    25.0001%   { stroke-dashoffset: START_VALUE;  transform: rotate(270deg); }\n    37.5%   { stroke-dashoffset: END_VALUE;    transform: rotate(270deg); }\n    37.5001%  { stroke-dashoffset: END_VALUE;    transform: rotateX(180deg) rotate(161.5deg); }\n    50%     { stroke-dashoffset: START_VALUE;  transform: rotateX(180deg) rotate(161.5deg); }\n\n    50.0001%  { stroke-dashoffset: START_VALUE;  transform: rotate(180deg); }\n    62.5%   { stroke-dashoffset: END_VALUE;    transform: rotate(180deg); }\n    62.5001%  { stroke-dashoffset: END_VALUE;    transform: rotateX(180deg) rotate(251.5deg); }\n    75%     { stroke-dashoffset: START_VALUE;  transform: rotateX(180deg) rotate(251.5deg); }\n\n    75.0001%  { stroke-dashoffset: START_VALUE;  transform: rotate(90deg); }\n    87.5%   { stroke-dashoffset: END_VALUE;    transform: rotate(90deg); }\n    87.5001%  { stroke-dashoffset: END_VALUE;    transform: rotateX(180deg) rotate(341.5deg); }\n    100%    { stroke-dashoffset: START_VALUE;  transform: rotateX(180deg) rotate(341.5deg); }\n  }\n`;\n\n/**\n * `<mat-progress-spinner>` component.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-progress-spinner',\n  exportAs: 'matProgressSpinner',\n  host: {\n    'role': 'progressbar',\n    'class': 'mat-progress-spinner',\n    '[style.width.px]': '_elementSize',\n    '[style.height.px]': '_elementSize',\n    '[attr.aria-valuemin]': 'mode === \"determinate\" ? 0 : null',\n    '[attr.aria-valuemax]': 'mode === \"determinate\" ? 100 : null',\n    '[attr.aria-valuenow]': 'value',\n    '[attr.mode]': 'mode',\n  },\n  inputs: ['color'],\n  templateUrl: 'progress-spinner.html',\n  styleUrls: ['progress-spinner.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatProgressSpinner extends _MatProgressSpinnerMixinBase implements CanColor,\n  OnChanges {\n\n  private _value = 0;\n  private _strokeWidth: number;\n  private _fallbackAnimation = false;\n\n  /** The width and height of the host element. Will grow with stroke width. */\n  _elementSize = BASE_SIZE;\n\n  /** Tracks diameters of existing instances to de-dupe generated styles (default d = 100) */\n  private static diameters = new Set<number>([BASE_SIZE]);\n\n  /**\n   * Used for storing all of the generated keyframe animations.\n   * @dynamic\n   */\n  private static styleTag: HTMLStyleElement|null = null;\n\n  /** The diameter of the progress spinner (will set width and height of svg). */\n  @Input()\n  get diameter(): number { return this._diameter; }\n  set diameter(size: number) {\n    this._diameter = coerceNumberProperty(size);\n\n    if (!this._fallbackAnimation && !MatProgressSpinner.diameters.has(this._diameter)) {\n      this._attachStyleNode();\n    }\n    this._updateElementSize();\n  }\n  private _diameter = BASE_SIZE;\n\n  /** Stroke width of the progress spinner. */\n  @Input()\n  get strokeWidth(): number {\n    return this._strokeWidth || this.diameter / 10;\n  }\n  set strokeWidth(value: number) {\n    this._strokeWidth = coerceNumberProperty(value);\n  }\n\n\n  /** Mode of the progress circle */\n  @Input() mode: ProgressSpinnerMode = 'determinate';\n\n  /** Value of the progress circle. */\n  @Input()\n  get value(): number {\n    return this.mode === 'determinate' ? this._value : 0;\n  }\n  set value(newValue: number) {\n    this._value = Math.max(0, Math.min(100, coerceNumberProperty(newValue)));\n  }\n\n  constructor(public _elementRef: ElementRef,\n              platform: Platform,\n              @Optional() @Inject(DOCUMENT) private _document: any) {\n\n    super(_elementRef);\n    this._fallbackAnimation = platform.EDGE || platform.TRIDENT;\n\n    // On IE and Edge, we can't animate the `stroke-dashoffset`\n    // reliably so we fall back to a non-spec animation.\n    const animationClass =\n      `mat-progress-spinner-indeterminate${this._fallbackAnimation ? '-fallback' : ''}-animation`;\n\n    _elementRef.nativeElement.classList.add(animationClass);\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    if (changes.strokeWidth || changes.diameter) {\n      this._updateElementSize();\n    }\n  }\n\n  /** The radius of the spinner, adjusted for stroke width. */\n  get _circleRadius() {\n    return (this.diameter - BASE_STROKE_WIDTH) / 2;\n  }\n\n  /** The view box of the spinner's svg element. */\n  get _viewBox() {\n    const viewBox = this._circleRadius * 2 + this.strokeWidth;\n    return `0 0 ${viewBox} ${viewBox}`;\n  }\n\n  /** The stroke circumference of the svg circle. */\n  get _strokeCircumference(): number {\n    return 2 * Math.PI * this._circleRadius;\n  }\n\n  /** The dash offset of the svg circle. */\n  get _strokeDashOffset() {\n    if (this.mode === 'determinate') {\n      return this._strokeCircumference * (100 - this._value) / 100;\n    }\n\n    // In fallback mode set the circle to 80% and rotate it with CSS.\n    if (this._fallbackAnimation && this.mode === 'indeterminate') {\n      return this._strokeCircumference * 0.2;\n    }\n\n    return null;\n  }\n\n  /** Stroke width of the circle in percent. */\n  get _circleStrokeWidth() {\n    return this.strokeWidth / this._elementSize * 100;\n  }\n\n  /** Dynamically generates a style tag containing the correct animation for this diameter. */\n  private _attachStyleNode(): void {\n    let styleTag = MatProgressSpinner.styleTag;\n\n    if (!styleTag) {\n      styleTag = this._document.createElement('style');\n      this._document.head.appendChild(styleTag);\n      MatProgressSpinner.styleTag = styleTag;\n    }\n\n    if (styleTag && styleTag.sheet) {\n      (styleTag.sheet as CSSStyleSheet).insertRule(this._getAnimationText(), 0);\n    }\n\n    MatProgressSpinner.diameters.add(this.diameter);\n  }\n\n  /** Generates animation styles adjusted for the spinner's diameter. */\n  private _getAnimationText(): string {\n    return INDETERMINATE_ANIMATION_TEMPLATE\n        // Animation should begin at 5% and end at 80%\n        .replace(/START_VALUE/g, `${0.95 * this._strokeCircumference}`)\n        .replace(/END_VALUE/g, `${0.2 * this._strokeCircumference}`)\n        .replace(/DIAMETER/g, `${this.diameter}`);\n  }\n\n  /** Updates the spinner element size based on its diameter. */\n  private _updateElementSize() {\n    this._elementSize = this._diameter + Math.max(this.strokeWidth - BASE_STROKE_WIDTH, 0);\n  }\n}\n\n\n/**\n * `<mat-spinner>` component.\n *\n * This is a component definition to be used as a convenience reference to create an\n * indeterminate `<mat-progress-spinner>` instance.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-spinner',\n  host: {\n    'role': 'progressbar',\n    'mode': 'indeterminate',\n    'class': 'mat-spinner mat-progress-spinner',\n    '[style.width.px]': '_elementSize',\n    '[style.height.px]': '_elementSize',\n  },\n  inputs: ['color'],\n  templateUrl: 'progress-spinner.html',\n  styleUrls: ['progress-spinner.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatSpinner extends MatProgressSpinner {\n  constructor(elementRef: ElementRef, platform: Platform,\n              @Optional() @Inject(DOCUMENT) document: any) {\n    super(elementRef, platform, document);\n    this.mode = 'indeterminate';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {NgModule} from '@angular/core';\nimport {PlatformModule} from '@angular/cdk/platform';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatProgressSpinner, MatSpinner} from './progress-spinner';\n\n@NgModule({\n  imports: [MatCommonModule, PlatformModule],\n  exports: [\n    MatProgressSpinner,\n    MatSpinner,\n    MatCommonModule\n  ],\n  declarations: [\n    MatProgressSpinner,\n    MatSpinner\n  ],\n})\nclass MatProgressSpinnerModule {}\n\nexport {MatProgressSpinnerModule};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor, FocusOrigin} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {UniqueSelectionDispatcher} from '@angular/cdk/collections';\nimport {\n  AfterContentInit,\n  AfterViewInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Input,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Output,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {\n  CanColor,\n  CanDisable,\n  CanDisableRipple,\n  HasTabIndex,\n  MatRipple,\n  mixinColor,\n  mixinDisabled,\n  mixinDisableRipple,\n  mixinTabIndex,\n  RippleRef,\n} from '@angular/material/core';\n\n// Increasing integer for generating unique ids for radio components.\nlet nextUniqueId = 0;\n\n/**\n * Provider Expression that allows mat-radio-group to register as a ControlValueAccessor. This\n * allows it to support [(ngModel)] and ngControl.\n * @docs-private\n */\nexport const MAT_RADIO_GROUP_CONTROL_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatRadioGroup),\n  multi: true\n};\n\n/** Change event object emitted by MatRadio and MatRadioGroup. */\nexport class MatRadioChange {\n  constructor(\n    /** The MatRadioButton that emits the change event. */\n    public source: MatRadioButton,\n    /** The value of the MatRadioButton. */\n    public value: any) {}\n}\n\n\n// Boilerplate for applying mixins to MatRadioGroup.\n/** @docs-private */\nexport class MatRadioGroupBase { }\nexport const _MatRadioGroupMixinBase = mixinDisabled(MatRadioGroupBase);\n\n/**\n * A group of radio buttons. May contain one or more `<mat-radio-button>` elements.\n */\n@Directive({\n  selector: 'mat-radio-group',\n  exportAs: 'matRadioGroup',\n  providers: [MAT_RADIO_GROUP_CONTROL_VALUE_ACCESSOR],\n  host: {\n    'role': 'radiogroup',\n    'class': 'mat-radio-group',\n  },\n  inputs: ['disabled'],\n})\nexport class MatRadioGroup extends _MatRadioGroupMixinBase\n    implements AfterContentInit, ControlValueAccessor, CanDisable {\n  /**\n   * Selected value for group. Should equal the value of the selected radio button if there *is*\n   * a corresponding radio button with a matching value. If there is *not* such a corresponding\n   * radio button, this value persists to be applied in case a new radio button is added with a\n   * matching value.\n   */\n  private _value: any = null;\n\n  /** The HTML name attribute applied to radio buttons in this group. */\n  private _name: string = `mat-radio-group-${nextUniqueId++}`;\n\n  /** The currently selected radio button. Should match value. */\n  private _selected: MatRadioButton | null = null;\n\n  /** Whether the `value` has been set to its initial value. */\n  private _isInitialized: boolean = false;\n\n  /** Whether the labels should appear after or before the radio-buttons. Defaults to 'after' */\n  private _labelPosition: 'before' | 'after' = 'after';\n\n  /** Whether the radio group is disabled. */\n  private _disabled: boolean = false;\n\n  /** Whether the radio group is required. */\n  private _required: boolean = false;\n\n  /** The method to be called in order to update ngModel */\n  _controlValueAccessorChangeFn: (value: any) => void = () => {};\n\n  /**\n   * onTouch function registered via registerOnTouch (ControlValueAccessor).\n   * @docs-private\n   */\n  onTouched: () => any = () => {};\n\n  /**\n   * Event emitted when the group value changes.\n   * Change events are only emitted when the value changes due to user interaction with\n   * a radio button (the same behavior as `<input type-\"radio\">`).\n   */\n  @Output() readonly change: EventEmitter<MatRadioChange> = new EventEmitter<MatRadioChange>();\n\n  /** Child radio buttons. */\n  @ContentChildren(forwardRef(() => MatRadioButton), { descendants: true })\n  _radios: QueryList<MatRadioButton>;\n\n  /** Name of the radio button group. All radio buttons inside this group will use this name. */\n  @Input()\n  get name(): string { return this._name; }\n  set name(value: string) {\n    this._name = value;\n    this._updateRadioButtonNames();\n  }\n\n  /** Whether the labels should appear after or before the radio-buttons. Defaults to 'after' */\n  @Input()\n  get labelPosition(): 'before' | 'after' {\n    return this._labelPosition;\n  }\n  set labelPosition(v) {\n    this._labelPosition = v === 'before' ? 'before' : 'after';\n    this._markRadiosForCheck();\n  }\n\n  /** Value of the radio button. */\n  @Input()\n  get value(): any { return this._value; }\n  set value(newValue: any) {\n    if (this._value != newValue) {\n      // Set this before proceeding to ensure no circular loop occurs with selection.\n      this._value = newValue;\n\n      this._updateSelectedRadioFromValue();\n      this._checkSelectedRadioButton();\n    }\n  }\n\n  _checkSelectedRadioButton() {\n    if (this._selected && !this._selected.checked) {\n      this._selected.checked = true;\n    }\n  }\n\n  /** Whether the radio button is selected. */\n  @Input()\n  get selected() { return this._selected; }\n  set selected(selected: MatRadioButton | null) {\n    this._selected = selected;\n    this.value = selected ? selected.value : null;\n    this._checkSelectedRadioButton();\n  }\n\n  /** Whether the radio group is disabled */\n  @Input()\n  get disabled(): boolean { return this._disabled; }\n  set disabled(value) {\n    this._disabled = coerceBooleanProperty(value);\n    this._markRadiosForCheck();\n  }\n\n  /** Whether the radio group is required */\n  @Input()\n  get required(): boolean { return this._required; }\n  set required(value: boolean) {\n    this._required = coerceBooleanProperty(value);\n    this._markRadiosForCheck();\n  }\n\n  constructor(private _changeDetector: ChangeDetectorRef) {\n    super();\n  }\n\n  /**\n   * Initialize properties once content children are available.\n   * This allows us to propagate relevant attributes to associated buttons.\n   */\n  ngAfterContentInit() {\n    // Mark this component as initialized in AfterContentInit because the initial value can\n    // possibly be set by NgModel on MatRadioGroup, and it is possible that the OnInit of the\n    // NgModel occurs *after* the OnInit of the MatRadioGroup.\n    this._isInitialized = true;\n  }\n\n  /**\n   * Mark this group as being \"touched\" (for ngModel). Meant to be called by the contained\n   * radio buttons upon their blur.\n   */\n  _touch() {\n    if (this.onTouched) {\n      this.onTouched();\n    }\n  }\n\n  private _updateRadioButtonNames(): void {\n    if (this._radios) {\n      this._radios.forEach(radio => {\n        radio.name = this.name;\n      });\n    }\n  }\n\n  /** Updates the `selected` radio button from the internal _value state. */\n  private _updateSelectedRadioFromValue(): void {\n    // If the value already matches the selected radio, do nothing.\n    const isAlreadySelected = this._selected != null && this._selected.value == this._value;\n\n    if (this._radios != null && !isAlreadySelected) {\n      this._selected = null;\n      this._radios.forEach(radio => {\n        radio.checked = this.value == radio.value;\n        if (radio.checked) {\n          this._selected = radio;\n        }\n      });\n    }\n  }\n\n  /** Dispatch change event with current selection and group value. */\n  _emitChangeEvent(): void {\n    if (this._isInitialized) {\n      this.change.emit(new MatRadioChange(this._selected!, this._value));\n    }\n  }\n\n  _markRadiosForCheck() {\n    if (this._radios) {\n      this._radios.forEach(radio => radio._markForCheck());\n    }\n  }\n\n  /**\n   * Sets the model value. Implemented as part of ControlValueAccessor.\n   * @param value\n   */\n  writeValue(value: any) {\n    this.value = value;\n    this._changeDetector.markForCheck();\n  }\n\n  /**\n   * Registers a callback to be triggered when the model value changes.\n   * Implemented as part of ControlValueAccessor.\n   * @param fn Callback to be registered.\n   */\n  registerOnChange(fn: (value: any) => void) {\n    this._controlValueAccessorChangeFn = fn;\n  }\n\n  /**\n   * Registers a callback to be triggered when the control is touched.\n   * Implemented as part of ControlValueAccessor.\n   * @param fn Callback to be registered.\n   */\n  registerOnTouched(fn: any) {\n    this.onTouched = fn;\n  }\n\n  /**\n   * Sets the disabled state of the control. Implemented as a part of ControlValueAccessor.\n   * @param isDisabled Whether the control should be disabled.\n   */\n  setDisabledState(isDisabled: boolean) {\n    this.disabled = isDisabled;\n    this._changeDetector.markForCheck();\n  }\n}\n\n// Boilerplate for applying mixins to MatRadioButton.\n/** @docs-private */\nexport class MatRadioButtonBase {\n  // Since the disabled property is manually defined for the MatRadioButton and isn't set up in\n  // the mixin base class. To be able to use the tabindex mixin, a disabled property must be\n  // defined to properly work.\n  disabled: boolean;\n\n  constructor(public _elementRef: ElementRef) {}\n}\n// As per Material design specifications the selection control radio should use the accent color\n// palette by default. https://material.io/guidelines/components/selection-controls.html\nexport const _MatRadioButtonMixinBase =\n    mixinColor(mixinDisableRipple(mixinTabIndex(MatRadioButtonBase)), 'accent');\n\n/**\n * A Material design radio-button. Typically placed inside of `<mat-radio-group>` elements.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-radio-button',\n  templateUrl: 'radio.html',\n  styleUrls: ['radio.css'],\n  inputs: ['color', 'disableRipple', 'tabIndex'],\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matRadioButton',\n  host: {\n    'class': 'mat-radio-button',\n    '[class.mat-radio-checked]': 'checked',\n    '[class.mat-radio-disabled]': 'disabled',\n    '[attr.id]': 'id',\n    // Note: under normal conditions focus shouldn't land on this element, however it may be\n    // programmatically set, for example inside of a focus trap, in this case we want to forward\n    // the focus to the native element.\n    '(focus)': '_inputElement.nativeElement.focus()',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatRadioButton extends _MatRadioButtonMixinBase\n    implements OnInit, AfterViewInit, OnDestroy, CanColor, CanDisableRipple, HasTabIndex {\n\n  private _uniqueId: string = `mat-radio-${++nextUniqueId}`;\n\n  /** The unique ID for the radio button. */\n  @Input() id: string = this._uniqueId;\n\n  /** Analog to HTML 'name' attribute used to group radios for unique selection. */\n  @Input() name: string;\n\n  /** Used to set the 'aria-label' attribute on the underlying input element. */\n  @Input('aria-label') ariaLabel: string;\n\n  /** The 'aria-labelledby' attribute takes precedence as the element's text alternative. */\n  @Input('aria-labelledby') ariaLabelledby: string;\n\n  /** The 'aria-describedby' attribute is read after the element's label and field type. */\n  @Input('aria-describedby') ariaDescribedby: string;\n\n  /** Whether this radio button is checked. */\n  @Input()\n  get checked(): boolean { return this._checked; }\n  set checked(value: boolean) {\n    const newCheckedState = coerceBooleanProperty(value);\n\n    if (this._checked != newCheckedState) {\n      this._checked = newCheckedState;\n\n      if (newCheckedState && this.radioGroup && this.radioGroup.value != this.value) {\n        this.radioGroup.selected = this;\n      } else if (!newCheckedState && this.radioGroup && this.radioGroup.value == this.value) {\n        // When unchecking the selected radio button, update the selected radio\n        // property on the group.\n        this.radioGroup.selected = null;\n      }\n\n      if (newCheckedState) {\n        // Notify all radio buttons with the same name to un-check.\n        this._radioDispatcher.notify(this.id, this.name);\n      }\n      this._changeDetector.markForCheck();\n    }\n  }\n\n  /** The value of this radio button. */\n  @Input()\n  get value(): any { return this._value; }\n  set value(value: any) {\n    if (this._value != value) {\n      this._value = value;\n      if (this.radioGroup != null) {\n        if (!this.checked) {\n          // Update checked when the value changed to match the radio group's value\n          this.checked = this.radioGroup.value == value;\n        }\n        if (this.checked) {\n          this.radioGroup.selected = this;\n        }\n      }\n    }\n  }\n\n  /** Whether the label should appear after or before the radio button. Defaults to 'after' */\n  @Input()\n  get labelPosition(): 'before' | 'after' {\n    return this._labelPosition || (this.radioGroup && this.radioGroup.labelPosition) || 'after';\n  }\n  set labelPosition(value) {\n    this._labelPosition = value;\n  }\n  private _labelPosition: 'before' | 'after';\n\n  /** Whether the radio button is disabled. */\n  @Input()\n  get disabled(): boolean {\n    return this._disabled || (this.radioGroup != null && this.radioGroup.disabled);\n  }\n  set disabled(value: boolean) {\n    this._disabled = coerceBooleanProperty(value);\n  }\n\n  /** Whether the radio button is required. */\n  @Input()\n  get required(): boolean {\n    return this._required || (this.radioGroup && this.radioGroup.required);\n  }\n  set required(value: boolean) {\n    this._required = coerceBooleanProperty(value);\n  }\n\n  /**\n   * Event emitted when the checked state of this radio button changes.\n   * Change events are only emitted when the value changes due to user interaction with\n   * the radio button (the same behavior as `<input type-\"radio\">`).\n   */\n  @Output() readonly change: EventEmitter<MatRadioChange> = new EventEmitter<MatRadioChange>();\n\n  /** The parent radio group. May or may not be present. */\n  radioGroup: MatRadioGroup;\n\n  /** ID of the native input element inside `<mat-radio-button>` */\n  get inputId(): string { return `${this.id || this._uniqueId}-input`; }\n\n  /** Whether this radio is checked. */\n  private _checked: boolean = false;\n\n  /** Whether this radio is disabled. */\n  private _disabled: boolean;\n\n  /** Whether this radio is required. */\n  private _required: boolean;\n\n  /** Value assigned to this radio. */\n  private _value: any = null;\n\n  /** The child ripple instance. */\n  @ViewChild(MatRipple) _ripple: MatRipple;\n\n  /** Reference to the current focus ripple. */\n  private _focusRipple: RippleRef | null;\n\n  /** Unregister function for _radioDispatcher */\n  private _removeUniqueSelectionListener: () => void = () => {};\n\n  /** The native `<input type=radio>` element */\n  @ViewChild('input') _inputElement: ElementRef;\n\n  constructor(@Optional() radioGroup: MatRadioGroup,\n              elementRef: ElementRef,\n              private _changeDetector: ChangeDetectorRef,\n              private _focusMonitor: FocusMonitor,\n              private _radioDispatcher: UniqueSelectionDispatcher) {\n    super(elementRef);\n\n    // Assertions. Ideally these should be stripped out by the compiler.\n    // TODO(jelbourn): Assert that there's no name binding AND a parent radio group.\n    this.radioGroup = radioGroup;\n\n    this._removeUniqueSelectionListener =\n      _radioDispatcher.listen((id: string, name: string) => {\n        if (id != this.id && name == this.name) {\n          this.checked = false;\n        }\n      });\n  }\n\n  /** Focuses the radio button. */\n  focus(): void {\n    this._focusMonitor.focusVia(this._inputElement.nativeElement, 'keyboard');\n  }\n\n  /**\n   * Marks the radio button as needing checking for change detection.\n   * This method is exposed because the parent radio group will directly\n   * update bound properties of the radio button.\n   */\n  _markForCheck() {\n    // When group value changes, the button will not be notified. Use `markForCheck` to explicit\n    // update radio button's status\n    this._changeDetector.markForCheck();\n  }\n\n  ngOnInit() {\n    if (this.radioGroup) {\n      // If the radio is inside a radio group, determine if it should be checked\n      this.checked = this.radioGroup.value === this._value;\n      // Copy name from parent radio group\n      this.name = this.radioGroup.name;\n    }\n  }\n\n  ngAfterViewInit() {\n    this._focusMonitor\n      .monitor(this._inputElement.nativeElement)\n      .subscribe(focusOrigin => this._onInputFocusChange(focusOrigin));\n  }\n\n  ngOnDestroy() {\n    this._focusMonitor.stopMonitoring(this._inputElement.nativeElement);\n    this._removeUniqueSelectionListener();\n  }\n\n  /** Dispatch change event with current value. */\n  private _emitChangeEvent(): void {\n    this.change.emit(new MatRadioChange(this, this._value));\n  }\n\n  _isRippleDisabled() {\n    return this.disableRipple || this.disabled;\n  }\n\n  _onInputClick(event: Event) {\n    // We have to stop propagation for click events on the visual hidden input element.\n    // By default, when a user clicks on a label element, a generated click event will be\n    // dispatched on the associated input element. Since we are using a label element as our\n    // root container, the click event on the `radio-button` will be executed twice.\n    // The real click event will bubble up, and the generated click event also tries to bubble up.\n    // This will lead to multiple click events.\n    // Preventing bubbling for the second event will solve that issue.\n    event.stopPropagation();\n  }\n\n  /**\n   * Triggered when the radio button received a click or the input recognized any change.\n   * Clicking on a label element, will trigger a change event on the associated input.\n   */\n  _onInputChange(event: Event) {\n    // We always have to stop propagation on the change event.\n    // Otherwise the change event, from the input element, will bubble up and\n    // emit its event object to the `change` output.\n    event.stopPropagation();\n\n    const groupValueChanged = this.radioGroup && this.value != this.radioGroup.value;\n    this.checked = true;\n    this._emitChangeEvent();\n\n    if (this.radioGroup) {\n      this.radioGroup._controlValueAccessorChangeFn(this.value);\n      this.radioGroup._touch();\n      if (groupValueChanged) {\n        this.radioGroup._emitChangeEvent();\n      }\n    }\n  }\n\n  /** Function is called whenever the focus changes for the input element. */\n  private _onInputFocusChange(focusOrigin: FocusOrigin) {\n    // TODO(paul): support `program`. See https://github.com/angular/material2/issues/9889\n    if (!this._focusRipple && focusOrigin === 'keyboard') {\n      this._focusRipple = this._ripple.launch(0, 0, {persistent: true});\n    } else if (!focusOrigin) {\n      if (this.radioGroup) {\n        this.radioGroup._touch();\n      }\n\n      if (this._focusRipple) {\n        this._focusRipple.fadeOut();\n        this._focusRipple = null;\n      }\n    }\n  }\n\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {A11yModule} from '@angular/cdk/a11y';\nimport {UNIQUE_SELECTION_DISPATCHER_PROVIDER} from '@angular/cdk/collections';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {MatRadioButton, MatRadioGroup} from './radio';\n\n@NgModule({\n  imports: [CommonModule, MatRippleModule, MatCommonModule, A11yModule],\n  exports: [MatRadioGroup, MatRadioButton, MatCommonModule],\n  providers: [UNIQUE_SELECTION_DISPATCHER_PROVIDER],\n  declarations: [MatRadioGroup, MatRadioButton],\n})\nexport class MatRadioModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/** Animations used by the Material drawers. */\nexport const matDrawerAnimations: {\n  readonly transformDrawer: AnimationTriggerMetadata;\n} = {\n  /** Animation that slides a drawer in and out. */\n  transformDrawer: trigger('transform', [\n    state('open, open-instant', style({\n      transform: 'translate3d(0, 0, 0)',\n      visibility: 'visible',\n    })),\n    state('void', style({\n      visibility: 'hidden',\n    })),\n    transition('void => open-instant', animate('0ms')),\n    transition('void <=> open, open-instant => void',\n        animate('400ms cubic-bezier(0.25, 0.8, 0.25, 1)'))\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {AnimationEvent} from '@angular/animations';\nimport {FocusTrap, FocusTrapFactory, FocusMonitor, FocusOrigin} from '@angular/cdk/a11y';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {ESCAPE} from '@angular/cdk/keycodes';\nimport {Platform} from '@angular/cdk/platform';\nimport {\n  AfterContentChecked,\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  ContentChildren,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  Output,\n  QueryList,\n  ViewEncapsulation,\n  InjectionToken,\n  ViewChild,\n} from '@angular/core';\nimport {DOCUMENT} from '@angular/common';\nimport {merge} from 'rxjs/observable/merge';\nimport {filter} from 'rxjs/operators/filter';\nimport {take} from 'rxjs/operators/take';\nimport {startWith} from 'rxjs/operators/startWith';\nimport {takeUntil} from 'rxjs/operators/takeUntil';\nimport {debounceTime} from 'rxjs/operators/debounceTime';\nimport {map} from 'rxjs/operators/map';\nimport {fromEvent} from 'rxjs/observable/fromEvent';\nimport {Subject} from 'rxjs/Subject';\nimport {Observable} from 'rxjs/Observable';\nimport {matDrawerAnimations} from './drawer-animations';\nimport {CdkScrollable} from '@angular/cdk/scrolling';\n\n\n/** Throws an exception when two MatDrawer are matching the same position. */\nexport function throwMatDuplicatedDrawerError(position: string) {\n  throw Error(`A drawer was already declared for 'position=\"${position}\"'`);\n}\n\n\n/** Result of the toggle promise that indicates the state of the drawer. */\nexport type MatDrawerToggleResult = 'open' | 'close';\n\n/** Configures whether drawers should use auto sizing by default. */\nexport const MAT_DRAWER_DEFAULT_AUTOSIZE =\n    new InjectionToken<boolean>('MAT_DRAWER_DEFAULT_AUTOSIZE');\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-drawer-content',\n  template: '<ng-content></ng-content>',\n  host: {\n    'class': 'mat-drawer-content',\n    '[style.margin-left.px]': '_margins.left',\n    '[style.margin-right.px]': '_margins.right',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatDrawerContent implements AfterContentInit {\n  /**\n   * Margins to be applied to the content. These are used to push / shrink the drawer content when a\n   * drawer is open. We use margin rather than transform even for push mode because transform breaks\n   * fixed position elements inside of the transformed element.\n   */\n  _margins: {left: number|null, right: number|null} = {left: null, right: null};\n\n  constructor(\n      private _changeDetectorRef: ChangeDetectorRef,\n      @Inject(forwardRef(() => MatDrawerContainer)) private _container: MatDrawerContainer) {\n  }\n\n  ngAfterContentInit() {\n    this._container._contentMargins.subscribe(margins => {\n      this._margins = margins;\n      this._changeDetectorRef.markForCheck();\n    });\n  }\n}\n\n\n/**\n * This component corresponds to a drawer that can be opened on the drawer container.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-drawer',\n  exportAs: 'matDrawer',\n  template: '<ng-content></ng-content>',\n  animations: [matDrawerAnimations.transformDrawer],\n  host: {\n    'class': 'mat-drawer',\n    '[@transform]': '_animationState',\n    '(@transform.start)': '_onAnimationStart($event)',\n    '(@transform.done)': '_onAnimationEnd($event)',\n    // must prevent the browser from aligning text based on value\n    '[attr.align]': 'null',\n    '[class.mat-drawer-end]': 'position === \"end\"',\n    '[class.mat-drawer-over]': 'mode === \"over\"',\n    '[class.mat-drawer-push]': 'mode === \"push\"',\n    '[class.mat-drawer-side]': 'mode === \"side\"',\n    'tabIndex': '-1',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatDrawer implements AfterContentInit, AfterContentChecked, OnDestroy {\n  private _focusTrap: FocusTrap;\n  private _elementFocusedBeforeDrawerWasOpened: HTMLElement | null = null;\n\n  /** Whether the drawer is initialized. Used for disabling the initial animation. */\n  private _enableAnimations = false;\n\n  /** The side that the drawer is attached to. */\n  @Input()\n  get position(): 'start' | 'end' { return this._position; }\n  set position(value: 'start' | 'end') {\n    // Make sure we have a valid value.\n    value = value === 'end' ? 'end' : 'start';\n    if (value != this._position) {\n      this._position = value;\n      this.onPositionChanged.emit();\n    }\n  }\n  private _position: 'start' | 'end' = 'start';\n\n  /** Mode of the drawer; one of 'over', 'push' or 'side'. */\n  @Input()\n  get mode(): 'over' | 'push' | 'side' { return this._mode; }\n  set mode(value: 'over' | 'push' | 'side') {\n    this._mode = value;\n    this._modeChanged.next();\n  }\n  private _mode: 'over' | 'push' | 'side' = 'over';\n\n  /** Whether the drawer can be closed with the escape key or by clicking on the backdrop. */\n  @Input()\n  get disableClose(): boolean { return this._disableClose; }\n  set disableClose(value: boolean) { this._disableClose = coerceBooleanProperty(value); }\n  private _disableClose: boolean = false;\n\n  /** How the sidenav was opened (keypress, mouse click etc.) */\n  private _openedVia: FocusOrigin | null;\n\n  /** Emits whenever the drawer has started animating. */\n  _animationStarted = new EventEmitter<AnimationEvent>();\n\n  /** Current state of the sidenav animation. */\n  _animationState: 'open-instant' | 'open' | 'void' = 'void';\n\n  /** Event emitted when the drawer open state is changed. */\n  @Output() readonly openedChange: EventEmitter<boolean> =\n      // Note this has to be async in order to avoid some issues with two-bindings (see #8872).\n      new EventEmitter<boolean>(/* isAsync */true);\n\n  /** Event emitted when the drawer has been opened. */\n  @Output('opened')\n  get _openedStream(): Observable<void> {\n    return this.openedChange.pipe(filter(o => o), map(() => {}));\n  }\n\n  /** Event emitted when the drawer has started opening. */\n  @Output()\n  get openedStart(): Observable<void> {\n    return this._animationStarted.pipe(\n      filter(e => e.fromState !== e.toState && e.toState.indexOf('open') === 0),\n      map(() => {})\n    );\n  }\n\n  /** Event emitted when the drawer has been closed. */\n  @Output('closed')\n  get _closedStream(): Observable<void> {\n    return this.openedChange.pipe(filter(o => !o), map(() => {}));\n  }\n\n  /** Event emitted when the drawer has started closing. */\n  @Output()\n  get closedStart(): Observable<void> {\n    return this._animationStarted.pipe(\n      filter(e => e.fromState !== e.toState && e.toState === 'void'),\n      map(() => {})\n    );\n  }\n\n  /** Event emitted when the drawer's position changes. */\n  @Output('positionChanged') onPositionChanged: EventEmitter<void> = new EventEmitter<void>();\n\n  /**\n   * An observable that emits when the drawer mode changes. This is used by the drawer container to\n   * to know when to when the mode changes so it can adapt the margins on the content.\n   */\n  readonly _modeChanged = new Subject();\n\n  get _isFocusTrapEnabled(): boolean {\n    // The focus trap is only enabled when the drawer is open in any mode other than side.\n    return this.opened && this.mode !== 'side';\n  }\n\n  constructor(private _elementRef: ElementRef,\n              private _focusTrapFactory: FocusTrapFactory,\n              private _focusMonitor: FocusMonitor,\n              private _platform: Platform,\n              private _ngZone: NgZone,\n              @Optional() @Inject(DOCUMENT) private _doc: any) {\n\n    this.openedChange.subscribe((opened: boolean) => {\n      if (opened) {\n        if (this._doc) {\n          this._elementFocusedBeforeDrawerWasOpened = this._doc.activeElement as HTMLElement;\n        }\n\n        if (this._isFocusTrapEnabled && this._focusTrap) {\n          this._trapFocus();\n        }\n      } else {\n        this._restoreFocus();\n      }\n    });\n\n    /**\n     * Listen to `keydown` events outside the zone so that change detection is not run every\n     * time a key is pressed. Instead we re-enter the zone only if the `ESC` key is pressed\n     * and we don't have close disabled.\n     */\n    this._ngZone.runOutsideAngular(() => {\n        fromEvent(this._elementRef.nativeElement, 'keydown').pipe(\n            filter((event: KeyboardEvent) => event.keyCode === ESCAPE && !this.disableClose)\n        ).subscribe((event) => this._ngZone.run(() => {\n            this.close();\n            event.stopPropagation();\n        }));\n    });\n  }\n\n  /** Traps focus inside the drawer. */\n  private _trapFocus() {\n    this._focusTrap.focusInitialElementWhenReady().then(hasMovedFocus => {\n      // If there were no focusable elements, focus the sidenav itself so the keyboard navigation\n      // still works. We need to check that `focus` is a function due to Universal.\n      if (!hasMovedFocus && typeof this._elementRef.nativeElement.focus === 'function') {\n        this._elementRef.nativeElement.focus();\n      }\n    });\n  }\n\n  /**\n   * If focus is currently inside the drawer, restores it to where it was before the drawer\n   * opened.\n   */\n  private _restoreFocus() {\n    const activeEl = this._doc && this._doc.activeElement;\n\n    if (activeEl && this._elementRef.nativeElement.contains(activeEl)) {\n      if (this._elementFocusedBeforeDrawerWasOpened instanceof HTMLElement) {\n        this._focusMonitor.focusVia(this._elementFocusedBeforeDrawerWasOpened, this._openedVia);\n      } else {\n        this._elementRef.nativeElement.blur();\n      }\n    }\n\n    this._elementFocusedBeforeDrawerWasOpened = null;\n    this._openedVia = null;\n  }\n\n  ngAfterContentInit() {\n    this._focusTrap = this._focusTrapFactory.create(this._elementRef.nativeElement);\n    this._focusTrap.enabled = this._isFocusTrapEnabled;\n  }\n\n  ngAfterContentChecked() {\n    // Enable the animations after the lifecycle hooks have run, in order to avoid animating\n    // drawers that are open by default. When we're on the server, we shouldn't enable the\n    // animations, because we don't want the drawer to animate the first time the user sees\n    // the page.\n    if (this._platform.isBrowser) {\n      this._enableAnimations = true;\n    }\n  }\n\n  ngOnDestroy() {\n    if (this._focusTrap) {\n      this._focusTrap.destroy();\n    }\n  }\n\n  /**\n   * Whether the drawer is opened. We overload this because we trigger an event when it\n   * starts or end.\n   */\n  @Input()\n  get opened(): boolean { return this._opened; }\n  set opened(value: boolean) { this.toggle(coerceBooleanProperty(value)); }\n  private _opened: boolean = false;\n\n  /**\n   * Open the drawer.\n   * @param openedVia Whether the drawer was opened by a key press, mouse click or programmatically.\n   * Used for focus management after the sidenav is closed.\n   */\n  open(openedVia?: FocusOrigin): Promise<MatDrawerToggleResult> {\n    return this.toggle(true, openedVia);\n  }\n\n  /** Close the drawer. */\n  close(): Promise<MatDrawerToggleResult> {\n    return this.toggle(false);\n  }\n\n  /**\n   * Toggle this drawer.\n   * @param isOpen Whether the drawer should be open.\n   * @param openedVia Whether the drawer was opened by a key press, mouse click or programmatically.\n   * Used for focus management after the sidenav is closed.\n   */\n  toggle(isOpen: boolean = !this.opened, openedVia: FocusOrigin = 'program'):\n    Promise<MatDrawerToggleResult> {\n\n    this._opened = isOpen;\n\n    if (isOpen) {\n      this._animationState = this._enableAnimations ? 'open' : 'open-instant';\n      this._openedVia = openedVia;\n    } else {\n      this._animationState = 'void';\n      this._restoreFocus();\n    }\n\n    if (this._focusTrap) {\n      this._focusTrap.enabled = this._isFocusTrapEnabled;\n    }\n\n    return new Promise<MatDrawerToggleResult>(resolve => {\n      this.openedChange.pipe(take(1)).subscribe(open => resolve(open ? 'open' : 'close'));\n    });\n  }\n\n  _onAnimationStart(event: AnimationEvent) {\n    this._animationStarted.emit(event);\n  }\n\n  _onAnimationEnd(event: AnimationEvent) {\n    const {fromState, toState} = event;\n\n    if ((toState.indexOf('open') === 0 && fromState === 'void') ||\n        (toState === 'void' && fromState.indexOf('open') === 0)) {\n      this.openedChange.emit(this._opened);\n    }\n  }\n\n  get _width(): number {\n    return this._elementRef.nativeElement ? (this._elementRef.nativeElement.offsetWidth || 0) : 0;\n  }\n}\n\n\n/**\n * `<mat-drawer-container>` component.\n *\n * This is the parent component to one or two `<mat-drawer>`s that validates the state internally\n * and coordinates the backdrop and content styling.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-drawer-container',\n  exportAs: 'matDrawerContainer',\n  templateUrl: 'drawer-container.html',\n  styleUrls: ['drawer.css'],\n  host: {\n    'class': 'mat-drawer-container',\n    '[class.mat-drawer-container-explicit-backdrop]': '_backdropOverride',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatDrawerContainer implements AfterContentInit, OnDestroy {\n  @ContentChildren(MatDrawer) _drawers: QueryList<MatDrawer>;\n  @ContentChild(MatDrawerContent) _content: MatDrawerContent;\n\n  /** The drawer child with the `start` position. */\n  get start(): MatDrawer | null { return this._start; }\n\n  /** The drawer child with the `end` position. */\n  get end(): MatDrawer | null { return this._end; }\n\n  /**\n   * Whether to automatically resize the container whenever\n   * the size of any of its drawers changes.\n   *\n   * **Use at your own risk!** Enabling this option can cause layout thrashing by measuring\n   * the drawers on every change detection cycle. Can be configured globally via the\n   * `MAT_DRAWER_DEFAULT_AUTOSIZE` token.\n   */\n  @Input()\n  get autosize(): boolean { return this._autosize; }\n  set autosize(value: boolean) { this._autosize = coerceBooleanProperty(value); }\n  private _autosize: boolean;\n\n  /**\n   * Whether the drawer container should have a backdrop while one of the sidenavs is open.\n   * If explicitly set to `true`, the backdrop will be enabled for drawers in the `side`\n   * mode as well.\n   */\n  @Input()\n  get hasBackdrop() {\n    if (this._backdropOverride == null) {\n      return !this._start || this._start.mode !== 'side' || !this._end || this._end.mode !== 'side';\n    }\n\n    return this._backdropOverride;\n  }\n  set hasBackdrop(value: any) {\n    this._backdropOverride = value == null ? null : coerceBooleanProperty(value);\n  }\n  _backdropOverride: boolean | null;\n\n  /** Event emitted when the drawer backdrop is clicked. */\n  @Output() readonly backdropClick: EventEmitter<void> = new EventEmitter<void>();\n\n  /** The drawer at the start/end position, independent of direction. */\n  private _start: MatDrawer | null;\n  private _end: MatDrawer | null;\n\n  /**\n   * The drawer at the left/right. When direction changes, these will change as well.\n   * They're used as aliases for the above to set the left/right style properly.\n   * In LTR, _left == _start and _right == _end.\n   * In RTL, _left == _end and _right == _start.\n   */\n  private _left: MatDrawer | null;\n  private _right: MatDrawer | null;\n\n  /** Emits when the component is destroyed. */\n  private readonly _destroyed = new Subject<void>();\n\n  /** Emits on every ngDoCheck. Used for debouncing reflows. */\n  private readonly _doCheckSubject = new Subject<void>();\n\n  readonly _contentMargins = new Subject<{left: number|null, right: number|null}>();\n\n  /** Reference to the CdkScrollable instance that wraps the scrollable content. */\n  @ViewChild(CdkScrollable) scrollable: CdkScrollable;\n\n  constructor(@Optional() private _dir: Directionality,\n              private _element: ElementRef,\n              private _ngZone: NgZone,\n              private _changeDetectorRef: ChangeDetectorRef,\n              @Inject(MAT_DRAWER_DEFAULT_AUTOSIZE) defaultAutosize = false) {\n\n    // If a `Dir` directive exists up the tree, listen direction changes\n    // and update the left/right properties to point to the proper start/end.\n    if (_dir) {\n      _dir.change.pipe(takeUntil(this._destroyed)).subscribe(() => {\n        this._validateDrawers();\n        this._updateContentMargins();\n      });\n    }\n\n    this._autosize = defaultAutosize;\n  }\n\n  ngAfterContentInit() {\n    this._drawers.changes.pipe(startWith(null)).subscribe(() => {\n      this._validateDrawers();\n\n      this._drawers.forEach((drawer: MatDrawer) => {\n        this._watchDrawerToggle(drawer);\n        this._watchDrawerPosition(drawer);\n        this._watchDrawerMode(drawer);\n      });\n\n      if (!this._drawers.length ||\n          this._isDrawerOpen(this._start) ||\n          this._isDrawerOpen(this._end)) {\n        this._updateContentMargins();\n      }\n\n      this._changeDetectorRef.markForCheck();\n    });\n\n    this._doCheckSubject.pipe(\n      debounceTime(10), // Arbitrary debounce time, less than a frame at 60fps\n      takeUntil(this._destroyed)\n    ).subscribe(() => this._updateContentMargins());\n  }\n\n  ngOnDestroy() {\n    this._doCheckSubject.complete();\n    this._destroyed.next();\n    this._destroyed.complete();\n  }\n\n  /** Calls `open` of both start and end drawers */\n  open(): void {\n    this._drawers.forEach(drawer => drawer.open());\n  }\n\n  /** Calls `close` of both start and end drawers */\n  close(): void {\n    this._drawers.forEach(drawer => drawer.close());\n  }\n\n  ngDoCheck() {\n    // If users opted into autosizing, do a check every change detection cycle.\n    if (this._autosize && this._isPushed()) {\n      // Run outside the NgZone, otherwise the debouncer will throw us into an infinite loop.\n      this._ngZone.runOutsideAngular(() => this._doCheckSubject.next());\n    }\n  }\n\n  /**\n   * Subscribes to drawer events in order to set a class on the main container element when the\n   * drawer is open and the backdrop is visible. This ensures any overflow on the container element\n   * is properly hidden.\n   */\n  private _watchDrawerToggle(drawer: MatDrawer): void {\n    drawer._animationStarted.pipe(\n      takeUntil(this._drawers.changes),\n      filter((event: AnimationEvent) => event.fromState !== event.toState)\n    )\n    .subscribe((event: AnimationEvent) => {\n      // Set the transition class on the container so that the animations occur. This should not\n      // be set initially because animations should only be triggered via a change in state.\n      if (event.toState !== 'open-instant') {\n        this._element.nativeElement.classList.add('mat-drawer-transition');\n      }\n\n      this._updateContentMargins();\n      this._changeDetectorRef.markForCheck();\n    });\n\n    if (drawer.mode !== 'side') {\n      drawer.openedChange.pipe(takeUntil(this._drawers.changes)).subscribe(() =>\n          this._setContainerClass(drawer.opened));\n    }\n  }\n\n  /**\n   * Subscribes to drawer onPositionChanged event in order to\n   * re-validate drawers when the position changes.\n   */\n  private _watchDrawerPosition(drawer: MatDrawer): void {\n    if (!drawer) {\n      return;\n    }\n    // NOTE: We need to wait for the microtask queue to be empty before validating,\n    // since both drawers may be swapping positions at the same time.\n    drawer.onPositionChanged.pipe(takeUntil(this._drawers.changes)).subscribe(() => {\n      this._ngZone.onMicrotaskEmpty.asObservable().pipe(take(1)).subscribe(() => {\n        this._validateDrawers();\n      });\n    });\n  }\n\n  /** Subscribes to changes in drawer mode so we can run change detection. */\n  private _watchDrawerMode(drawer: MatDrawer): void {\n    if (drawer) {\n      drawer._modeChanged.pipe(takeUntil(merge(this._drawers.changes, this._destroyed)))\n        .subscribe(() => {\n          this._updateContentMargins();\n          this._changeDetectorRef.markForCheck();\n        });\n    }\n  }\n\n  /** Toggles the 'mat-drawer-opened' class on the main 'mat-drawer-container' element. */\n  private _setContainerClass(isAdd: boolean): void {\n    if (isAdd) {\n      this._element.nativeElement.classList.add('mat-drawer-opened');\n    } else {\n      this._element.nativeElement.classList.remove('mat-drawer-opened');\n    }\n  }\n\n  /** Validate the state of the drawer children components. */\n  private _validateDrawers() {\n    this._start = this._end = null;\n\n    // Ensure that we have at most one start and one end drawer.\n    this._drawers.forEach(drawer => {\n      if (drawer.position == 'end') {\n        if (this._end != null) {\n          throwMatDuplicatedDrawerError('end');\n        }\n        this._end = drawer;\n      } else {\n        if (this._start != null) {\n          throwMatDuplicatedDrawerError('start');\n        }\n        this._start = drawer;\n      }\n    });\n\n    this._right = this._left = null;\n\n    // Detect if we're LTR or RTL.\n    if (!this._dir || this._dir.value == 'ltr') {\n      this._left = this._start;\n      this._right = this._end;\n    } else {\n      this._left = this._end;\n      this._right = this._start;\n    }\n  }\n\n  /** Whether the container is being pushed to the side by one of the drawers. */\n  private _isPushed() {\n    return (this._isDrawerOpen(this._start) && this._start.mode != 'over') ||\n           (this._isDrawerOpen(this._end) && this._end.mode != 'over');\n  }\n\n  _onBackdropClicked() {\n    this.backdropClick.emit();\n    this._closeModalDrawer();\n  }\n\n  _closeModalDrawer() {\n    // Close all open drawers where closing is not disabled and the mode is not `side`.\n    [this._start, this._end]\n      .filter(drawer => drawer && !drawer.disableClose && this._canHaveBackdrop(drawer))\n      .forEach(drawer => drawer!.close());\n  }\n\n  _isShowingBackdrop(): boolean {\n    return (this._isDrawerOpen(this._start) && this._canHaveBackdrop(this._start)) ||\n           (this._isDrawerOpen(this._end) && this._canHaveBackdrop(this._end));\n  }\n\n  private _canHaveBackdrop(drawer: MatDrawer): boolean {\n    return drawer.mode !== 'side' || !!this._backdropOverride;\n  }\n\n  private _isDrawerOpen(drawer: MatDrawer | null): drawer is MatDrawer {\n    return drawer != null && drawer.opened;\n  }\n\n  /**\n   * Recalculates and updates the inline styles for the content. Note that this should be used\n   * sparingly, because it causes a reflow.\n   */\n  private _updateContentMargins() {\n    // 1. For drawers in `over` mode, they don't affect the content.\n    // 2. For drawers in `side` mode they should shrink the content. We do this by adding to the\n    //    left margin (for left drawer) or right margin (for right the drawer).\n    // 3. For drawers in `push` mode the should shift the content without resizing it. We do this by\n    //    adding to the left or right margin and simultaneously subtracting the same amount of\n    //    margin from the other side.\n\n    let left = 0;\n    let right = 0;\n\n    if (this._left && this._left.opened) {\n      if (this._left.mode == 'side') {\n        left += this._left._width;\n      } else if (this._left.mode == 'push') {\n        let width = this._left._width;\n        left += width;\n        right -= width;\n      }\n    }\n\n    if (this._right && this._right.opened) {\n      if (this._right.mode == 'side') {\n        right += this._right._width;\n      } else if (this._right.mode == 'push') {\n        let width = this._right._width;\n        right += width;\n        left -= width;\n      }\n    }\n\n    // Pull back into the NgZone since in some cases we could be outside.\n    this._ngZone.run(() => this._contentMargins.next({left, right}));\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {MatSelect, MatSelectTrigger, MAT_SELECT_SCROLL_STRATEGY_PROVIDER} from './select';\nimport {MatCommonModule, MatOptionModule} from '@angular/material/core';\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {MatFormFieldModule} from '@angular/material/form-field';\nimport {ErrorStateMatcher} from '@angular/material/core';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    OverlayModule,\n    MatOptionModule,\n    MatCommonModule,\n  ],\n  exports: [MatFormFieldModule, MatSelect, MatSelectTrigger, MatOptionModule, MatCommonModule],\n  declarations: [MatSelect, MatSelectTrigger],\n  providers: [MAT_SELECT_SCROLL_STRATEGY_PROVIDER, ErrorStateMatcher]\n})\nexport class MatSelectModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/** Animations used by MatTooltip. */\nexport const matTooltipAnimations: {\n  readonly tooltipState: AnimationTriggerMetadata;\n} = {\n  /** Animation that transitions a tooltip in and out. */\n  tooltipState: trigger('state', [\n    state('initial, void, hidden', style({transform: 'scale(0)'})),\n    state('visible', style({transform: 'scale(1)'})),\n    transition('* => visible', animate('150ms cubic-bezier(0.0, 0.0, 0.2, 1)')),\n    transition('* => hidden', animate('150ms cubic-bezier(0.4, 0.0, 1, 1)')),\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {A11yModule, ARIA_DESCRIBER_PROVIDER} from '@angular/cdk/a11y';\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {PlatformModule} from '@angular/cdk/platform';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {LayoutModule} from '@angular/cdk/layout';\nimport {\n  MAT_TOOLTIP_SCROLL_STRATEGY_PROVIDER,\n  MAT_TOOLTIP_DEFAULT_OPTIONS,\n  MatTooltip,\n  TooltipComponent,\n} from './tooltip';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    OverlayModule,\n    MatCommonModule,\n    PlatformModule,\n    A11yModule,\n    LayoutModule,\n  ],\n  exports: [MatTooltip, TooltipComponent, MatCommonModule],\n  declarations: [MatTooltip, TooltipComponent],\n  entryComponents: [TooltipComponent],\n  providers: [\n    MAT_TOOLTIP_SCROLL_STRATEGY_PROVIDER,\n    ARIA_DESCRIBER_PROVIDER,\n    {\n      provide: MAT_TOOLTIP_DEFAULT_OPTIONS,\n      useValue: {\n        showDelay: 0,\n        hideDelay: 0,\n        touchendHideDelay: 1500\n      }\n    }\n  ],\n})\nexport class MatTooltipModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable, SkipSelf, Optional } from '@angular/core';\nimport {Subject} from 'rxjs/Subject';\n\n/**\n * To modify the labels and text displayed, create a new instance of MatPaginatorIntl and\n * include it in a custom provider\n */\n@Injectable()\nexport class MatPaginatorIntl {\n  /**\n   * Stream that emits whenever the labels here are changed. Use this to notify\n   * components if the labels have changed after initialization.\n   */\n  readonly changes: Subject<void> = new Subject<void>();\n\n  /** A label for the page size selector. */\n  itemsPerPageLabel: string = 'Items per page:';\n\n  /** A label for the button that increments the current page. */\n  nextPageLabel: string = 'Next page';\n\n  /** A label for the button that decrements the current page. */\n  previousPageLabel: string = 'Previous page';\n\n  /** A label for the button that moves to the first page. */\n  firstPageLabel: string = 'First page';\n\n  /** A label for the button that moves to the last page. */\n  lastPageLabel: string = 'Last page';\n\n  /** A label for the range of items within the current page and the length of the whole list. */\n  getRangeLabel = (page: number, pageSize: number, length: number) => {\n    if (length == 0 || pageSize == 0) { return `0 of ${length}`; }\n\n    length = Math.max(length, 0);\n\n    const startIndex = page * pageSize;\n\n    // If the start index exceeds the list length, do not try and fix the end index to the end.\n    const endIndex = startIndex < length ?\n        Math.min(startIndex + pageSize, length) :\n        startIndex + pageSize;\n\n    return `${startIndex + 1} - ${endIndex} of ${length}`;\n  }\n}\n\n/** @docs-private */\nexport function MAT_PAGINATOR_INTL_PROVIDER_FACTORY(parentIntl: MatPaginatorIntl) {\n  return parentIntl || new MatPaginatorIntl();\n}\n\n/** @docs-private */\nexport const MAT_PAGINATOR_INTL_PROVIDER = {\n  // If there is already an MatPaginatorIntl available, use that. Otherwise, provide a new one.\n  provide: MatPaginatorIntl,\n  deps: [[new Optional(), new SkipSelf(), MatPaginatorIntl]],\n  useFactory: MAT_PAGINATOR_INTL_PROVIDER_FACTORY\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceNumberProperty, coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  OnInit,\n  Output,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {Subscription} from 'rxjs/Subscription';\nimport {MatPaginatorIntl} from './paginator-intl';\n\n/** The default page size if there is no page size and there are no provided page size options. */\nconst DEFAULT_PAGE_SIZE = 50;\n\n/**\n * Change event object that is emitted when the user selects a\n * different page size or navigates to another page.\n */\nexport class PageEvent {\n  /** The current page index. */\n  pageIndex: number;\n\n  /** The current page size */\n  pageSize: number;\n\n  /** The current total number of items being paged */\n  length: number;\n}\n\n/**\n * Component to provide navigation between paged information. Displays the size of the current\n * page, user-selectable options to change that size, what items are being shown, and\n * navigational button to go to the previous or next page.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-paginator',\n  exportAs: 'matPaginator',\n  templateUrl: 'paginator.html',\n  styleUrls: ['paginator.css'],\n  host: {\n    'class': 'mat-paginator',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatPaginator implements OnInit, OnDestroy {\n  private _initialized: boolean;\n  private _intlChanges: Subscription;\n\n  /** The zero-based page index of the displayed list of items. Defaulted to 0. */\n  @Input()\n  get pageIndex(): number { return this._pageIndex; }\n  set pageIndex(value: number) {\n    this._pageIndex = coerceNumberProperty(value);\n    this._changeDetectorRef.markForCheck();\n  }\n  _pageIndex: number = 0;\n\n  /** The length of the total number of items that are being paginated. Defaulted to 0. */\n  @Input()\n  get length(): number { return this._length; }\n  set length(value: number) {\n    this._length = coerceNumberProperty(value);\n    this._changeDetectorRef.markForCheck();\n  }\n  _length: number = 0;\n\n  /** Number of items to display on a page. By default set to 50. */\n  @Input()\n  get pageSize(): number { return this._pageSize; }\n  set pageSize(value: number) {\n    this._pageSize = coerceNumberProperty(value);\n    this._updateDisplayedPageSizeOptions();\n  }\n  private _pageSize: number;\n\n  /** The set of provided page size options to display to the user. */\n  @Input()\n  get pageSizeOptions(): number[] { return this._pageSizeOptions; }\n  set pageSizeOptions(value: number[]) {\n    this._pageSizeOptions = (value || []).map(p => coerceNumberProperty(p));\n    this._updateDisplayedPageSizeOptions();\n  }\n  private _pageSizeOptions: number[] = [];\n\n  /** Whether to hide the page size selection UI from the user. */\n  @Input()\n  get hidePageSize(): boolean { return this._hidePageSize; }\n  set hidePageSize(value: boolean) {\n    this._hidePageSize = coerceBooleanProperty(value);\n  }\n  private _hidePageSize = false;\n\n\n  /** Whether to show the first/last buttons UI to the user. */\n  @Input()\n  get showFirstLastButtons(): boolean { return this._showFirstLastButtons; }\n  set showFirstLastButtons(value: boolean) {\n    this._showFirstLastButtons = coerceBooleanProperty(value);\n  }\n  private _showFirstLastButtons = false;\n\n  /** Event emitted when the paginator changes the page size or page index. */\n  @Output() readonly page: EventEmitter<PageEvent> = new EventEmitter<PageEvent>();\n\n  /** Displayed set of page size options. Will be sorted and include current page size. */\n  _displayedPageSizeOptions: number[];\n\n  constructor(public _intl: MatPaginatorIntl,\n              private _changeDetectorRef: ChangeDetectorRef) {\n    this._intlChanges = _intl.changes.subscribe(() => this._changeDetectorRef.markForCheck());\n  }\n\n  ngOnInit() {\n    this._initialized = true;\n    this._updateDisplayedPageSizeOptions();\n  }\n\n  ngOnDestroy() {\n    this._intlChanges.unsubscribe();\n  }\n\n  /** Advances to the next page if it exists. */\n  nextPage(): void {\n    if (!this.hasNextPage()) { return; }\n    this.pageIndex++;\n    this._emitPageEvent();\n  }\n\n  /** Move back to the previous page if it exists. */\n  previousPage(): void {\n    if (!this.hasPreviousPage()) { return; }\n    this.pageIndex--;\n    this._emitPageEvent();\n  }\n\n  /** Move to the first page if not already there. */\n  firstPage(): void {\n    // hasPreviousPage being false implies at the start\n    if (!this.hasPreviousPage()) { return; }\n    this.pageIndex = 0;\n    this._emitPageEvent();\n  }\n\n  /** Move to the last page if not already there. */\n  lastPage(): void {\n    // hasNextPage being false implies at the end\n    if (!this.hasNextPage()) { return; }\n    this.pageIndex = this.getNumberOfPages();\n    this._emitPageEvent();\n  }\n\n  /** Whether there is a previous page. */\n  hasPreviousPage(): boolean {\n    return this.pageIndex >= 1 && this.pageSize != 0;\n  }\n\n  /** Whether there is a next page. */\n  hasNextPage(): boolean {\n    const numberOfPages = this.getNumberOfPages();\n    return this.pageIndex < numberOfPages && this.pageSize != 0;\n  }\n\n  /** Calculate the number of pages */\n  getNumberOfPages(): number {\n    return Math.ceil(this.length / this.pageSize) - 1;\n  }\n\n\n  /**\n   * Changes the page size so that the first item displayed on the page will still be\n   * displayed using the new page size.\n   *\n   * For example, if the page size is 10 and on the second page (items indexed 10-19) then\n   * switching so that the page size is 5 will set the third page as the current page so\n   * that the 10th item will still be displayed.\n   */\n  _changePageSize(pageSize: number) {\n    // Current page needs to be updated to reflect the new page size. Navigate to the page\n    // containing the previous page's first item.\n    const startIndex = this.pageIndex * this.pageSize;\n    this.pageIndex = Math.floor(startIndex / pageSize) || 0;\n\n    this.pageSize = pageSize;\n    this._emitPageEvent();\n  }\n\n  /**\n   * Updates the list of page size options to display to the user. Includes making sure that\n   * the page size is an option and that the list is sorted.\n   */\n  private _updateDisplayedPageSizeOptions() {\n    if (!this._initialized) { return; }\n\n    // If no page size is provided, use the first page size option or the default page size.\n    if (!this.pageSize) {\n      this._pageSize = this.pageSizeOptions.length != 0 ?\n          this.pageSizeOptions[0] :\n          DEFAULT_PAGE_SIZE;\n    }\n\n    this._displayedPageSizeOptions = this.pageSizeOptions.slice();\n    if (this._displayedPageSizeOptions.indexOf(this.pageSize) == -1) {\n      this._displayedPageSizeOptions.push(this.pageSize);\n    }\n\n    // Sort the numbers using a number-specific sort function.\n    this._displayedPageSizeOptions.sort((a, b) => a - b);\n\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Emits an event notifying that a change of the paginator's properties has been triggered. */\n  private _emitPageEvent() {\n    this.page.emit({\n      pageIndex: this.pageIndex,\n      pageSize: this.pageSize,\n      length: this.length\n    });\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatButtonModule} from '@angular/material/button';\nimport {MatSelectModule} from '@angular/material/select';\nimport {MatTooltipModule} from '@angular/material/tooltip';\nimport {MatPaginator} from './paginator';\nimport {MAT_PAGINATOR_INTL_PROVIDER} from './paginator-intl';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatButtonModule,\n    MatSelectModule,\n    MatTooltipModule,\n  ],\n  exports: [MatPaginator],\n  declarations: [MatPaginator],\n  providers: [MAT_PAGINATOR_INTL_PROVIDER],\n})\nexport class MatPaginatorModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  Component,\n  ChangeDetectionStrategy,\n  ElementRef,\n  Input,\n  ViewEncapsulation\n} from '@angular/core';\nimport {CanColor, mixinColor} from '@angular/material/core';\n\n// TODO(josephperrott): Benchpress tests.\n// TODO(josephperrott): Add ARIA attributes for progress bar \"for\".\n\n// Boilerplate for applying mixins to MatProgressBar.\n/** @docs-private */\nexport class MatProgressBarBase {\n  constructor(public _elementRef: ElementRef) { }\n}\n\nexport const _MatProgressBarMixinBase = mixinColor(MatProgressBarBase, 'primary');\n\n/** Counter used to generate unique IDs for progress bars. */\nlet progressbarId = 0;\n\n/**\n * `<mat-progress-bar>` component.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-progress-bar',\n  exportAs: 'matProgressBar',\n  host: {\n    'role': 'progressbar',\n    'aria-valuemin': '0',\n    'aria-valuemax': '100',\n    '[attr.aria-valuenow]': 'value',\n    '[attr.mode]': 'mode',\n    'class': 'mat-progress-bar',\n  },\n  inputs: ['color'],\n  templateUrl: 'progress-bar.html',\n  styleUrls: ['progress-bar.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatProgressBar extends _MatProgressBarMixinBase implements CanColor {\n\n  constructor(public _elementRef: ElementRef) {\n    super(_elementRef);\n  }\n\n  /** Value of the progress bar. Defaults to zero. Mirrored to aria-valuenow. */\n  @Input()\n  get value(): number { return this._value; }\n  set value(v: number) { this._value = clamp(v || 0); }\n  private _value: number = 0;\n\n  /** Buffer value of the progress bar. Defaults to zero. */\n  @Input()\n  get bufferValue(): number { return this._bufferValue; }\n  set bufferValue(v: number) { this._bufferValue = clamp(v || 0); }\n  private _bufferValue: number = 0;\n\n  /**\n   * Mode of the progress bar.\n   *\n   * Input must be one of these values: determinate, indeterminate, buffer, query, defaults to\n   * 'determinate'.\n   * Mirrored to mode attribute.\n   */\n  @Input() mode: 'determinate' | 'indeterminate' | 'buffer' | 'query' = 'determinate';\n\n  /** The id of the progress bar. */\n  progressbarId = `mat-progress-bar-${progressbarId++}`;\n\n  /** Gets the current transform value for the progress bar's primary indicator. */\n  _primaryTransform() {\n    const scale = this.value / 100;\n    return {transform: `scaleX(${scale})`};\n  }\n\n  /**\n   * Gets the current transform value for the progress bar's buffer indicator. Only used if the\n   * progress mode is set to buffer, otherwise returns an undefined, causing no transformation.\n   */\n  _bufferTransform() {\n    if (this.mode === 'buffer') {\n      const scale = this.bufferValue / 100;\n      return {transform: `scaleX(${scale})`};\n    }\n  }\n}\n\n/** Clamps a value to be between two numbers, by default 0 and 100. */\nfunction clamp(v: number, min = 0, max = 100) {\n  return Math.max(min, Math.min(max, v));\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatProgressBar} from './progress-bar';\n\n\n@NgModule({\n  imports: [CommonModule, MatCommonModule],\n  exports: [MatProgressBar, MatCommonModule],\n  declarations: [MatProgressBar],\n})\nexport class MatProgressBarModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusKeyManager} from '@angular/cdk/a11y';\nimport {Direction} from '@angular/cdk/bidi';\nimport {ESCAPE, LEFT_ARROW, RIGHT_ARROW} from '@angular/cdk/keycodes';\nimport {startWith} from 'rxjs/operators/startWith';\nimport {switchMap} from 'rxjs/operators/switchMap';\nimport {take} from 'rxjs/operators/take';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  Component,\n  ContentChild,\n  ContentChildren,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  InjectionToken,\n  Input,\n  OnDestroy,\n  Output,\n  QueryList,\n  TemplateRef,\n  ViewChild,\n  ViewEncapsulation,\n  NgZone,\n  OnInit,\n} from '@angular/core';\nimport {Observable} from 'rxjs/Observable';\nimport {Subject} from 'rxjs/Subject';\nimport {merge} from 'rxjs/observable/merge';\nimport {Subscription} from 'rxjs/Subscription';\nimport {matMenuAnimations} from './menu-animations';\nimport {throwMatMenuInvalidPositionX, throwMatMenuInvalidPositionY} from './menu-errors';\nimport {MatMenuItem} from './menu-item';\nimport {MatMenuPanel} from './menu-panel';\nimport {MatMenuContent} from './menu-content';\nimport {MenuPositionX, MenuPositionY} from './menu-positions';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {FocusOrigin} from '@angular/cdk/a11y';\n\n\n/** Default `mat-menu` options that can be overridden. */\nexport interface MatMenuDefaultOptions {\n  /** The x-axis position of the menu. */\n  xPosition: MenuPositionX;\n\n  /** The y-axis position of the menu. */\n  yPosition: MenuPositionY;\n\n  /** Whether the menu should overlap the menu trigger. */\n  overlapTrigger: boolean;\n\n  /** Class to be applied to the menu's backdrop. */\n  backdropClass: string;\n\n  /** Whether the menu has a backdrop. */\n  hasBackdrop: boolean;\n}\n\n/** Injection token to be used to override the default options for `mat-menu`. */\nexport const MAT_MENU_DEFAULT_OPTIONS =\n    new InjectionToken<MatMenuDefaultOptions>('mat-menu-default-options');\n\n/**\n * Start elevation for the menu panel.\n * @docs-private\n */\nconst MAT_MENU_BASE_ELEVATION = 2;\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-menu',\n  templateUrl: 'menu.html',\n  styleUrls: ['menu.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  animations: [\n    matMenuAnimations.transformMenu,\n    matMenuAnimations.fadeInItems\n  ],\n  exportAs: 'matMenu'\n})\nexport class MatMenu implements OnInit, AfterContentInit, MatMenuPanel, OnDestroy {\n  private _keyManager: FocusKeyManager<MatMenuItem>;\n  private _xPosition: MenuPositionX = this._defaultOptions.xPosition;\n  private _yPosition: MenuPositionY = this._defaultOptions.yPosition;\n  private _previousElevation: string;\n\n  /** Subscription to tab events on the menu panel */\n  private _tabSubscription = Subscription.EMPTY;\n\n  /** Config object to be passed into the menu's ngClass */\n  _classList: {[key: string]: boolean} = {};\n\n  /** Current state of the panel animation. */\n  _panelAnimationState: 'void' | 'enter' = 'void';\n\n  /** Emits whenever an animation on the menu completes. */\n  _animationDone = new Subject<void>();\n\n  /** Parent menu of the current menu panel. */\n  parentMenu: MatMenuPanel | undefined;\n\n  /** Layout direction of the menu. */\n  direction: Direction;\n\n  /** Class to be added to the backdrop element. */\n  @Input() backdropClass: string = this._defaultOptions.backdropClass;\n\n  /** Position of the menu in the X axis. */\n  @Input()\n  get xPosition(): MenuPositionX { return this._xPosition; }\n  set xPosition(value: MenuPositionX) {\n    if (value !== 'before' && value !== 'after') {\n      throwMatMenuInvalidPositionX();\n    }\n    this._xPosition = value;\n    this.setPositionClasses();\n  }\n\n  /** Position of the menu in the Y axis. */\n  @Input()\n  get yPosition(): MenuPositionY { return this._yPosition; }\n  set yPosition(value: MenuPositionY) {\n    if (value !== 'above' && value !== 'below') {\n      throwMatMenuInvalidPositionY();\n    }\n    this._yPosition = value;\n    this.setPositionClasses();\n  }\n\n  /** @docs-private */\n  @ViewChild(TemplateRef) templateRef: TemplateRef<any>;\n\n  /** List of the items inside of a menu. */\n  @ContentChildren(MatMenuItem) items: QueryList<MatMenuItem>;\n\n  /**\n   * Menu content that will be rendered lazily.\n   * @docs-private\n   */\n  @ContentChild(MatMenuContent) lazyContent: MatMenuContent;\n\n  /** Whether the menu should overlap its trigger. */\n  @Input()\n  get overlapTrigger(): boolean { return this._overlapTrigger; }\n  set overlapTrigger(value: boolean) {\n    this._overlapTrigger = coerceBooleanProperty(value);\n  }\n  private _overlapTrigger: boolean = this._defaultOptions.overlapTrigger;\n\n  /** Whether the menu has a backdrop. */\n  @Input()\n  get hasBackdrop(): boolean { return this._hasBackdrop; }\n  set hasBackdrop(value: boolean) {\n    this._hasBackdrop = coerceBooleanProperty(value);\n  }\n  private _hasBackdrop: boolean = this._defaultOptions.hasBackdrop;\n\n  /**\n   * This method takes classes set on the host mat-menu element and applies them on the\n   * menu template that displays in the overlay container.  Otherwise, it's difficult\n   * to style the containing menu from outside the component.\n   * @param classes list of class names\n   */\n  @Input('class')\n  set panelClass(classes: string) {\n    if (classes && classes.length) {\n      this._classList = classes.split(' ').reduce((obj: any, className: string) => {\n        obj[className] = true;\n        return obj;\n      }, {});\n\n      this._elementRef.nativeElement.className = '';\n      this.setPositionClasses();\n    }\n  }\n\n  /**\n   * This method takes classes set on the host mat-menu element and applies them on the\n   * menu template that displays in the overlay container.  Otherwise, it's difficult\n   * to style the containing menu from outside the component.\n   * @deprecated Use `panelClass` instead.\n   * @deletion-target 6.0.0\n   */\n  @Input()\n  get classList(): string { return this.panelClass; }\n  set classList(classes: string) { this.panelClass = classes; }\n\n  /** Event emitted when the menu is closed. */\n  @Output() readonly closed: EventEmitter<void | 'click' | 'keydown' | 'tab'> =\n      new EventEmitter<void | 'click' | 'keydown' | 'tab'>();\n\n  /**\n   * Event emitted when the menu is closed.\n   * @deprecated Switch to `closed` instead\n   * @deletion-target 6.0.0\n   */\n  @Output() close = this.closed;\n\n  constructor(\n    private _elementRef: ElementRef,\n    private _ngZone: NgZone,\n    @Inject(MAT_MENU_DEFAULT_OPTIONS) private _defaultOptions: MatMenuDefaultOptions) { }\n\n  ngOnInit() {\n    this.setPositionClasses();\n  }\n\n  ngAfterContentInit() {\n    this._keyManager = new FocusKeyManager<MatMenuItem>(this.items).withWrap().withTypeAhead();\n    this._tabSubscription = this._keyManager.tabOut.subscribe(() => this.close.emit('tab'));\n  }\n\n  ngOnDestroy() {\n    this._tabSubscription.unsubscribe();\n    this.closed.complete();\n  }\n\n  /** Stream that emits whenever the hovered menu item changes. */\n  _hovered(): Observable<MatMenuItem> {\n    if (this.items) {\n      return this.items.changes.pipe(\n        startWith(this.items),\n        switchMap(items => merge(...items.map(item => item._hovered)))\n      );\n    }\n\n    return this._ngZone.onStable\n      .asObservable()\n      .pipe(take(1), switchMap(() => this._hovered()));\n  }\n\n  /** Handle a keyboard event from the menu, delegating to the appropriate action. */\n  _handleKeydown(event: KeyboardEvent) {\n    switch (event.keyCode) {\n      case ESCAPE:\n        this.closed.emit('keydown');\n        event.stopPropagation();\n      break;\n      case LEFT_ARROW:\n        if (this.parentMenu && this.direction === 'ltr') {\n          this.closed.emit('keydown');\n        }\n      break;\n      case RIGHT_ARROW:\n        if (this.parentMenu && this.direction === 'rtl') {\n          this.closed.emit('keydown');\n        }\n      break;\n      default:\n        this._keyManager.onKeydown(event);\n    }\n  }\n\n  /**\n   * Focus the first item in the menu.\n   * @param origin Action from which the focus originated. Used to set the correct styling.\n   */\n  focusFirstItem(origin: FocusOrigin = 'program'): void {\n    // When the content is rendered lazily, it takes a bit before the items are inside the DOM.\n    if (this.lazyContent) {\n      this._ngZone.onStable.asObservable()\n        .pipe(take(1))\n        .subscribe(() => this._keyManager.setFocusOrigin(origin).setFirstItemActive());\n    } else {\n      this._keyManager.setFocusOrigin(origin).setFirstItemActive();\n    }\n  }\n\n  /**\n   * Resets the active item in the menu. This is used when the menu is opened, allowing\n   * the user to start from the first option when pressing the down arrow.\n   */\n  resetActiveItem() {\n    this._keyManager.setActiveItem(-1);\n  }\n\n  /**\n   * It's necessary to set position-based classes to ensure the menu panel animation\n   * folds out from the correct direction.\n   */\n  setPositionClasses(posX: MenuPositionX = this.xPosition, posY: MenuPositionY = this.yPosition) {\n    this._classList['mat-menu-before'] = posX === 'before';\n    this._classList['mat-menu-after'] = posX === 'after';\n    this._classList['mat-menu-above'] = posY === 'above';\n    this._classList['mat-menu-below'] = posY === 'below';\n  }\n\n  /**\n   * Sets the menu panel elevation.\n   * @param depth Number of parent menus that come before the menu.\n   */\n  setElevation(depth: number): void {\n    // The elevation starts at the base and increases by one for each level.\n    const newElevation = `mat-elevation-z${MAT_MENU_BASE_ELEVATION + depth}`;\n    const customElevation = Object.keys(this._classList).find(c => c.startsWith('mat-elevation-z'));\n\n    if (!customElevation || customElevation === this._previousElevation) {\n      if (this._previousElevation) {\n        this._classList[this._previousElevation] = false;\n      }\n\n      this._classList[newElevation] = true;\n      this._previousElevation = newElevation;\n    }\n  }\n\n  /** Starts the enter animation. */\n  _startAnimation() {\n    // @deletion-target 6.0.0 Combine with _resetAnimation.\n    this._panelAnimationState = 'enter';\n  }\n\n  /** Resets the panel animation to its initial state. */\n  _resetAnimation() {\n    // @deletion-target 6.0.0 Combine with _startAnimation.\n    this._panelAnimationState = 'void';\n  }\n\n  /** Callback that is invoked when the panel animation completes. */\n  _onAnimationDone() {\n    this._animationDone.next();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {isFakeMousedownFromScreenReader} from '@angular/cdk/a11y';\nimport {Direction, Directionality} from '@angular/cdk/bidi';\nimport {LEFT_ARROW, RIGHT_ARROW} from '@angular/cdk/keycodes';\nimport {\n  FlexibleConnectedPositionStrategy,\n  HorizontalConnectionPos,\n  Overlay,\n  OverlayRef,\n  OverlayConfig,\n  RepositionScrollStrategy,\n  ScrollStrategy,\n  VerticalConnectionPos,\n} from '@angular/cdk/overlay';\nimport {TemplatePortal} from '@angular/cdk/portal';\nimport {filter} from 'rxjs/operators/filter';\nimport {take} from 'rxjs/operators/take';\nimport {\n  AfterContentInit,\n  Directive,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  InjectionToken,\n  Input,\n  OnDestroy,\n  Optional,\n  Output,\n  Self,\n  ViewContainerRef,\n} from '@angular/core';\nimport {merge} from 'rxjs/observable/merge';\nimport {of as observableOf} from 'rxjs/observable/of';\nimport {Subscription} from 'rxjs/Subscription';\nimport {MatMenu} from './menu-directive';\nimport {throwMatMenuMissingError} from './menu-errors';\nimport {MatMenuItem} from './menu-item';\nimport {MatMenuPanel} from './menu-panel';\nimport {MenuPositionX, MenuPositionY} from './menu-positions';\nimport {FocusMonitor, FocusOrigin} from '@angular/cdk/a11y';\n\n/** Injection token that determines the scroll handling while the menu is open. */\nexport const MAT_MENU_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mat-menu-scroll-strategy');\n\n/** @docs-private */\nexport function MAT_MENU_SCROLL_STRATEGY_PROVIDER_FACTORY(overlay: Overlay):\n    () => RepositionScrollStrategy {\n  return () => overlay.scrollStrategies.reposition();\n}\n\n/** @docs-private */\nexport const MAT_MENU_SCROLL_STRATEGY_PROVIDER = {\n  provide: MAT_MENU_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_MENU_SCROLL_STRATEGY_PROVIDER_FACTORY,\n};\n\n\n// TODO(andrewseguin): Remove the kebab versions in favor of camelCased attribute selectors\n\n/** Default top padding of the menu panel. */\nexport const MENU_PANEL_TOP_PADDING = 8;\n\n/**\n * This directive is intended to be used in conjunction with an mat-menu tag.  It is\n * responsible for toggling the display of the provided menu instance.\n */\n@Directive({\n  selector: `[mat-menu-trigger-for], [matMenuTriggerFor]`,\n  host: {\n    'aria-haspopup': 'true',\n    '(mousedown)': '_handleMousedown($event)',\n    '(keydown)': '_handleKeydown($event)',\n    '(click)': '_handleClick($event)',\n  },\n  exportAs: 'matMenuTrigger'\n})\nexport class MatMenuTrigger implements AfterContentInit, OnDestroy {\n  private _portal: TemplatePortal;\n  private _overlayRef: OverlayRef | null = null;\n  private _menuOpen: boolean = false;\n  private _closeSubscription = Subscription.EMPTY;\n  private _hoverSubscription = Subscription.EMPTY;\n\n  // Tracking input type is necessary so it's possible to only auto-focus\n  // the first item of the list when the menu is opened via the keyboard\n  private _openedByMouse: boolean = false;\n\n  /**\n   * @deprecated\n   * @deletion-target 6.0.0\n   */\n  @Input('mat-menu-trigger-for')\n  get _deprecatedMatMenuTriggerFor(): MatMenuPanel {\n    return this.menu;\n  }\n\n  set _deprecatedMatMenuTriggerFor(v: MatMenuPanel) {\n    this.menu = v;\n  }\n\n  /** References the menu instance that the trigger is associated with. */\n  @Input('matMenuTriggerFor') menu: MatMenuPanel;\n\n  /** Data to be passed along to any lazily-rendered content. */\n  @Input('matMenuTriggerData') menuData: any;\n\n  /** Event emitted when the associated menu is opened. */\n  @Output() readonly menuOpened: EventEmitter<void> = new EventEmitter<void>();\n\n  /**\n   * Event emitted when the associated menu is opened.\n   * @deprecated Switch to `menuOpened` instead\n   * @deletion-target 6.0.0\n   */\n  @Output() readonly onMenuOpen: EventEmitter<void> = this.menuOpened;\n\n  /** Event emitted when the associated menu is closed. */\n  @Output() readonly menuClosed: EventEmitter<void> = new EventEmitter<void>();\n\n  /**\n   * Event emitted when the associated menu is closed.\n   * @deprecated Switch to `menuClosed` instead\n   * @deletion-target 6.0.0\n   */\n  @Output() readonly onMenuClose: EventEmitter<void> = this.menuClosed;\n\n  constructor(private _overlay: Overlay,\n              private _element: ElementRef,\n              private _viewContainerRef: ViewContainerRef,\n              @Inject(MAT_MENU_SCROLL_STRATEGY) private _scrollStrategy,\n              @Optional() private _parentMenu: MatMenu,\n              @Optional() @Self() private _menuItemInstance: MatMenuItem,\n              @Optional() private _dir: Directionality,\n              // TODO(crisbeto): make the _focusMonitor required when doing breaking changes.\n              private _focusMonitor?: FocusMonitor) {\n\n    if (_menuItemInstance) {\n      _menuItemInstance._triggersSubmenu = this.triggersSubmenu();\n    }\n  }\n\n  ngAfterContentInit() {\n    this._checkMenu();\n\n    this.menu.close.subscribe(reason => {\n      this._destroyMenu();\n\n      // If a click closed the menu, we should close the entire chain of nested menus.\n      if ((reason === 'click' || reason === 'tab') && this._parentMenu) {\n        this._parentMenu.closed.emit(reason);\n      }\n    });\n\n    if (this.triggersSubmenu()) {\n      // Subscribe to changes in the hovered item in order to toggle the panel.\n      this._hoverSubscription = this._parentMenu._hovered()\n          .pipe(filter(active => active === this._menuItemInstance))\n          .subscribe(() => {\n            this._openedByMouse = true;\n            this.openMenu();\n          });\n    }\n  }\n\n  ngOnDestroy() {\n    if (this._overlayRef) {\n      this._overlayRef.dispose();\n      this._overlayRef = null;\n    }\n\n    this._cleanUpSubscriptions();\n  }\n\n  /** Whether the menu is open. */\n  get menuOpen(): boolean {\n    return this._menuOpen;\n  }\n\n  /** The text direction of the containing app. */\n  get dir(): Direction {\n    return this._dir && this._dir.value === 'rtl' ? 'rtl' : 'ltr';\n  }\n\n  /** Whether the menu triggers a sub-menu or a top-level one. */\n  triggersSubmenu(): boolean {\n    return !!(this._menuItemInstance && this._parentMenu);\n  }\n\n  /** Toggles the menu between the open and closed states. */\n  toggleMenu(): void {\n    return this._menuOpen ? this.closeMenu() : this.openMenu();\n  }\n\n  /** Opens the menu. */\n  openMenu(): void {\n    if (this._menuOpen) {\n      return;\n    }\n\n    this._createOverlay().attach(this._portal);\n\n    if (this.menu.lazyContent) {\n      this.menu.lazyContent.attach(this.menuData);\n    }\n\n    this._closeSubscription = this._menuClosingActions().subscribe(() => this.closeMenu());\n    this._initMenu();\n\n    if (this.menu instanceof MatMenu) {\n      this.menu._startAnimation();\n    }\n  }\n\n  /** Closes the menu. */\n  closeMenu(): void {\n    this.menu.close.emit();\n  }\n\n  /**\n   * Focuses the menu trigger.\n   * @param origin Source of the menu trigger's focus.\n   */\n  focus(origin: FocusOrigin = 'program') {\n    if (this._focusMonitor) {\n      this._focusMonitor.focusVia(this._element.nativeElement, origin);\n    } else {\n      this._element.nativeElement.focus();\n    }\n  }\n\n  /** Closes the menu and does the necessary cleanup. */\n  private _destroyMenu() {\n    if (!this._overlayRef || !this.menuOpen) {\n      return;\n    }\n\n    const menu = this.menu;\n\n    this._resetMenu();\n    this._closeSubscription.unsubscribe();\n    this._overlayRef.detach();\n\n    if (menu instanceof MatMenu) {\n      menu._resetAnimation();\n\n      if (menu.lazyContent) {\n        // Wait for the exit animation to finish before detaching the content.\n        menu._animationDone\n          .pipe(take(1))\n          .subscribe(() => menu.lazyContent!.detach());\n      }\n    } else if (menu.lazyContent) {\n      menu.lazyContent.detach();\n    }\n  }\n\n  /**\n   * This method sets the menu state to open and focuses the first item if\n   * the menu was opened via the keyboard.\n   */\n  private _initMenu(): void {\n    this.menu.parentMenu = this.triggersSubmenu() ? this._parentMenu : undefined;\n    this.menu.direction = this.dir;\n    this._setMenuElevation();\n    this._setIsMenuOpen(true);\n    this.menu.focusFirstItem(this._openedByMouse ? 'mouse' : 'program');\n  }\n\n  /** Updates the menu elevation based on the amount of parent menus that it has. */\n  private _setMenuElevation(): void {\n    if (this.menu.setElevation) {\n      let depth = 0;\n      let parentMenu = this.menu.parentMenu;\n\n      while (parentMenu) {\n        depth++;\n        parentMenu = parentMenu.parentMenu;\n      }\n\n      this.menu.setElevation(depth);\n    }\n  }\n\n  /**\n   * This method resets the menu when it's closed, most importantly restoring\n   * focus to the menu trigger if the menu was opened via the keyboard.\n   */\n  private _resetMenu(): void {\n    this._setIsMenuOpen(false);\n\n    // We should reset focus if the user is navigating using a keyboard or\n    // if we have a top-level trigger which might cause focus to be lost\n    // when clicking on the backdrop.\n    if (!this._openedByMouse) {\n      // Note that the focus style will show up both for `program` and\n      // `keyboard` so we don't have to specify which one it is.\n      this.focus();\n    } else if (!this.triggersSubmenu()) {\n      this.focus('mouse');\n    }\n\n    this._openedByMouse = false;\n  }\n\n  // set state rather than toggle to support triggers sharing a menu\n  private _setIsMenuOpen(isOpen: boolean): void {\n    this._menuOpen = isOpen;\n    this._menuOpen ? this.menuOpened.emit() : this.menuClosed.emit();\n\n    if (this.triggersSubmenu()) {\n      this._menuItemInstance._highlighted = isOpen;\n    }\n  }\n\n  /**\n   * This method checks that a valid instance of MatMenu has been passed into\n   * matMenuTriggerFor. If not, an exception is thrown.\n   */\n  private _checkMenu() {\n    if (!this.menu) {\n      throwMatMenuMissingError();\n    }\n  }\n\n  /**\n   * This method creates the overlay from the provided menu's template and saves its\n   * OverlayRef so that it can be attached to the DOM when openMenu is called.\n   */\n  private _createOverlay(): OverlayRef {\n    if (!this._overlayRef) {\n      this._portal = new TemplatePortal(this.menu.templateRef, this._viewContainerRef);\n      const config = this._getOverlayConfig();\n      this._subscribeToPositions(config.positionStrategy as FlexibleConnectedPositionStrategy);\n      this._overlayRef = this._overlay.create(config);\n    }\n\n    return this._overlayRef;\n  }\n\n  /**\n   * This method builds the configuration object needed to create the overlay, the OverlayState.\n   * @returns OverlayConfig\n   */\n  private _getOverlayConfig(): OverlayConfig {\n    return new OverlayConfig({\n      positionStrategy: this._getPosition(),\n      hasBackdrop: this.menu.hasBackdrop == null ? !this.triggersSubmenu() : this.menu.hasBackdrop,\n      backdropClass: this.menu.backdropClass || 'cdk-overlay-transparent-backdrop',\n      direction: this.dir,\n      scrollStrategy: this._scrollStrategy()\n    });\n  }\n\n  /**\n   * Listens to changes in the position of the overlay and sets the correct classes\n   * on the menu based on the new position. This ensures the animation origin is always\n   * correct, even if a fallback position is used for the overlay.\n   */\n  private _subscribeToPositions(position: FlexibleConnectedPositionStrategy): void {\n    position.positionChanges.subscribe(change => {\n      const posX: MenuPositionX = change.connectionPair.overlayX === 'start' ? 'after' : 'before';\n      const posY: MenuPositionY = change.connectionPair.overlayY === 'top' ? 'below' : 'above';\n\n      this.menu.setPositionClasses(posX, posY);\n    });\n  }\n\n  /**\n   * This method builds the position strategy for the overlay, so the menu is properly connected\n   * to the trigger.\n   * @returns ConnectedPositionStrategy\n   */\n  private _getPosition(): FlexibleConnectedPositionStrategy {\n    let [originX, originFallbackX]: HorizontalConnectionPos[] =\n        this.menu.xPosition === 'before' ? ['end', 'start'] : ['start', 'end'];\n\n    let [overlayY, overlayFallbackY]: VerticalConnectionPos[] =\n        this.menu.yPosition === 'above' ? ['bottom', 'top'] : ['top', 'bottom'];\n\n    let [originY, originFallbackY] = [overlayY, overlayFallbackY];\n    let [overlayX, overlayFallbackX] = [originX, originFallbackX];\n    let offsetY = 0;\n\n    if (this.triggersSubmenu()) {\n      // When the menu is a sub-menu, it should always align itself\n      // to the edges of the trigger, instead of overlapping it.\n      overlayFallbackX = originX = this.menu.xPosition === 'before' ? 'start' : 'end';\n      originFallbackX = overlayX = originX === 'end' ? 'start' : 'end';\n      offsetY = overlayY === 'bottom' ? MENU_PANEL_TOP_PADDING : -MENU_PANEL_TOP_PADDING;\n    } else if (!this.menu.overlapTrigger) {\n      originY = overlayY === 'top' ? 'bottom' : 'top';\n      originFallbackY = overlayFallbackY === 'top' ? 'bottom' : 'top';\n    }\n\n    return this._overlay.position()\n        .flexibleConnectedTo(this._element)\n        .withPositions([\n          {originX, originY, overlayX, overlayY, offsetY},\n          {originX: originFallbackX, originY, overlayX: overlayFallbackX, overlayY, offsetY},\n          {\n            originX,\n            originY: originFallbackY,\n            overlayX,\n            overlayY: overlayFallbackY,\n            offsetY: -offsetY\n          },\n          {\n            originX: originFallbackX,\n            originY: originFallbackY,\n            overlayX: overlayFallbackX,\n            overlayY: overlayFallbackY,\n            offsetY: -offsetY\n          }\n        ]);\n  }\n\n  /** Cleans up the active subscriptions. */\n  private _cleanUpSubscriptions(): void {\n    this._closeSubscription.unsubscribe();\n    this._hoverSubscription.unsubscribe();\n  }\n\n  /** Returns a stream that emits whenever an action that should close the menu occurs. */\n  private _menuClosingActions() {\n    const backdrop = this._overlayRef!.backdropClick();\n    const detachments = this._overlayRef!.detachments();\n    const parentClose = this._parentMenu ? this._parentMenu.close : observableOf();\n    const hover = this._parentMenu ? this._parentMenu._hovered().pipe(\n      filter(active => active !== this._menuItemInstance),\n      filter(() => this._menuOpen)\n    ) : observableOf();\n\n    return merge(backdrop, parentClose, hover, detachments);\n  }\n\n  /** Handles mouse presses on the trigger. */\n  _handleMousedown(event: MouseEvent): void {\n    if (!isFakeMousedownFromScreenReader(event)) {\n      this._openedByMouse = true;\n\n      // Since clicking on the trigger won't close the menu if it opens a sub-menu,\n      // we should prevent focus from moving onto it via click to avoid the\n      // highlight from lingering on the menu item.\n      if (this.triggersSubmenu()) {\n        event.preventDefault();\n      }\n    }\n  }\n\n  /** Handles key presses on the trigger. */\n  _handleKeydown(event: KeyboardEvent): void {\n    const keyCode = event.keyCode;\n\n    if (this.triggersSubmenu() && (\n            (keyCode === RIGHT_ARROW && this.dir === 'ltr') ||\n            (keyCode === LEFT_ARROW && this.dir === 'rtl'))) {\n      this.openMenu();\n    }\n  }\n\n  /** Handles click events on the trigger. */\n  _handleClick(event: MouseEvent): void {\n    if (this.triggersSubmenu()) {\n      // Stop event propagation to avoid closing the parent menu.\n      event.stopPropagation();\n      this.openMenu();\n    } else {\n      this.toggleMenu();\n    }\n  }\n\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {A11yModule} from '@angular/cdk/a11y';\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {MAT_MENU_DEFAULT_OPTIONS, MatMenu} from './menu-directive';\nimport {MatMenuItem} from './menu-item';\nimport {MAT_MENU_SCROLL_STRATEGY_PROVIDER, MatMenuTrigger} from './menu-trigger';\nimport {MatMenuContent} from './menu-content';\n\n\n@NgModule({\n  imports: [\n    A11yModule,\n    CommonModule,\n    MatCommonModule,\n    MatRippleModule,\n    OverlayModule,\n    PortalModule,\n  ],\n  exports: [MatMenu, MatMenuItem, MatMenuTrigger, MatMenuContent, MatCommonModule],\n  declarations: [MatMenu, MatMenuItem, MatMenuTrigger, MatMenuContent],\n  providers: [\n    MAT_MENU_SCROLL_STRATEGY_PROVIDER,\n    {\n      provide: MAT_MENU_DEFAULT_OPTIONS,\n      useValue: {\n        overlapTrigger: true,\n        xPosition: 'after',\n        yPosition: 'below',\n        backdropClass: 'cdk-overlay-transparent-backdrop'\n      },\n    }\n  ],\n})\nexport class MatMenuModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  animate,\n  AnimationTriggerMetadata,\n  state,\n  style,\n  transition,\n  trigger,\n  query,\n  animateChild,\n  group,\n} from '@angular/animations';\n\n/**\n * The following are all the animations for the mat-select component, with each\n * const containing the metadata for one animation.\n *\n * The values below match the implementation of the AngularJS Material mat-select animation.\n */\nexport const matSelectAnimations: {\n  readonly transformPanel: AnimationTriggerMetadata;\n  readonly fadeInContent: AnimationTriggerMetadata;\n} = {\n  /**\n   * This animation transforms the select's overlay panel on and off the page.\n   *\n   * When the panel is attached to the DOM, it expands its width by the amount of padding, scales it\n   * up to 100% on the Y axis, fades in its border, and translates slightly up and to the\n   * side to ensure the option text correctly overlaps the trigger text.\n   *\n   * When the panel is removed from the DOM, it simply fades out linearly.\n   */\n  transformPanel: trigger('transformPanel', [\n    state('void', style({\n      transform: 'scaleY(0)',\n      minWidth: '100%',\n      opacity: 0\n    })),\n    state('showing', style({\n      opacity: 1,\n      minWidth: 'calc(100% + 32px)', // 32px = 2 * 16px padding\n      transform: 'scaleY(1)'\n    })),\n    state('showing-multiple', style({\n      opacity: 1,\n      minWidth: 'calc(100% + 64px)', // 64px = 48px padding on the left + 16px padding on the right\n      transform: 'scaleY(1)'\n    })),\n    transition('void => *', group([\n      query('@fadeInContent', animateChild()),\n      animate('150ms cubic-bezier(0.25, 0.8, 0.25, 1)')\n    ])),\n    transition('* => void', [\n      animate('250ms 100ms linear', style({opacity: 0}))\n    ])\n  ]),\n\n  /**\n   * This animation fades in the background color and text content of the\n   * select's options. It is time delayed to occur 100ms after the overlay\n   * panel has transformed in.\n   */\n  fadeInContent: trigger('fadeInContent', [\n    state('showing', style({opacity: 1})),\n    transition('void => showing', [\n      style({opacity: 0}),\n      animate('150ms 100ms cubic-bezier(0.55, 0, 0.55, 0.2)')\n    ])\n  ])\n};\n\n\n/**\n * @deprecated\n * @deletion-target 7.0.0\n */\nexport const transformPanel = matSelectAnimations.transformPanel;\n\n/**\n * @deprecated\n * @deletion-target 7.0.0\n */\nexport const fadeInContent = matSelectAnimations.fadeInContent;\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusableOption, FocusKeyManager} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {SelectionModel} from '@angular/cdk/collections';\nimport {SPACE, ENTER, HOME, END} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  OnDestroy,\n  OnInit,\n  Output,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {\n  CanDisable,\n  CanDisableRipple,\n  MatLine,\n  MatLineSetter,\n  mixinDisabled,\n  mixinDisableRipple,\n} from '@angular/material/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {Subscription} from 'rxjs/Subscription';\n\n\n/** @docs-private */\nexport class MatSelectionListBase {}\nexport const _MatSelectionListMixinBase = mixinDisableRipple(mixinDisabled(MatSelectionListBase));\n\n/** @docs-private */\nexport class MatListOptionBase {}\nexport const _MatListOptionMixinBase = mixinDisableRipple(MatListOptionBase);\n\n/** @docs-private */\nexport const MAT_SELECTION_LIST_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatSelectionList),\n  multi: true\n};\n\n/**\n * Change event object emitted by MatListOption whenever the selected state changes.\n * @deprecated Use the `MatSelectionListChange` event on the selection list instead.\n * @deletion-target 6.0.0\n */\nexport class MatListOptionChange {\n  constructor(\n    /** Reference to the list option that changed. */\n    public source: MatListOption,\n    /** The new selected state of the option. */\n    public selected: boolean) {}\n}\n\n/** Change event that is being fired whenever the selected state of an option changes. */\nexport class MatSelectionListChange {\n  constructor(\n    /** Reference to the selection list that emitted the event. */\n    public source: MatSelectionList,\n    /** Reference to the option that has been changed. */\n    public option: MatListOption) {}\n}\n\n/**\n * Component for list-options of selection-list. Each list-option can automatically\n * generate a checkbox and can put current item into the selectionModel of selection-list\n * if the current item is selected.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-list-option',\n  exportAs: 'matListOption',\n  inputs: ['disableRipple'],\n  host: {\n    'role': 'option',\n    'class': 'mat-list-item mat-list-option',\n    '(focus)': '_handleFocus()',\n    '(blur)': '_handleBlur()',\n    '(click)': '_handleClick()',\n    'tabindex': '-1',\n    '[class.mat-list-item-disabled]': 'disabled',\n    '[class.mat-list-item-focus]': '_hasFocus',\n    '[attr.aria-selected]': 'selected.toString()',\n    '[attr.aria-disabled]': 'disabled.toString()',\n  },\n  templateUrl: 'list-option.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatListOption extends _MatListOptionMixinBase\n    implements AfterContentInit, OnDestroy, OnInit, FocusableOption, CanDisableRipple {\n\n  private _selected = false;\n  private _disabled = false;\n\n  /** Whether the option has focus. */\n  _hasFocus: boolean = false;\n\n  @ContentChildren(MatLine) _lines: QueryList<MatLine>;\n\n  /** DOM element containing the item's text. */\n  @ViewChild('text') _text: ElementRef;\n\n  /** Whether the label should appear before or after the checkbox. Defaults to 'after' */\n  @Input() checkboxPosition: 'before' | 'after' = 'after';\n\n  /** Value of the option */\n  @Input() value: any;\n\n  /** Whether the option is disabled. */\n  @Input()\n  get disabled() { return this._disabled || (this.selectionList && this.selectionList.disabled); }\n  set disabled(value: any) {\n    const newValue = coerceBooleanProperty(value);\n\n    if (newValue !== this._disabled) {\n      this._disabled = newValue;\n      this._changeDetector.markForCheck();\n    }\n  }\n\n  /** Whether the option is selected. */\n  @Input()\n  get selected(): boolean { return this.selectionList.selectedOptions.isSelected(this); }\n  set selected(value: boolean) {\n    const isSelected = coerceBooleanProperty(value);\n\n    if (isSelected !== this._selected) {\n      this._setSelected(isSelected);\n      this.selectionList._reportValueChange();\n    }\n  }\n\n  /**\n   * Emits a change event whenever the selected state of an option changes.\n   * @deprecated Use the `selectionChange` event on the `<mat-selection-list>` instead.\n   * @deletion-target 6.0.0\n   */\n  @Output() readonly selectionChange: EventEmitter<MatListOptionChange> =\n    new EventEmitter<MatListOptionChange>();\n\n  constructor(private _element: ElementRef,\n              private _changeDetector: ChangeDetectorRef,\n              /** @docs-private */\n              @Inject(forwardRef(() => MatSelectionList)) public selectionList: MatSelectionList) {\n    super();\n  }\n\n  ngOnInit() {\n    // List options that are selected at initialization can't be reported properly to the form\n    // control. This is because it takes some time until the selection-list knows about all\n    // available options. Also it can happen that the ControlValueAccessor has an initial value\n    // that should be used instead. Deferring the value change report to the next tick ensures\n    // that the form control value is not being overwritten.\n    const wasSelected = this._selected;\n\n    Promise.resolve().then(() => {\n      if (this._selected || wasSelected) {\n        this.selected = true;\n        this._changeDetector.markForCheck();\n      }\n    });\n  }\n\n  ngAfterContentInit() {\n    // TODO: consider turning the setter into a function, it doesn't do anything as a class.\n    // tslint:disable-next-line:no-unused-expression\n    new MatLineSetter(this._lines, this._element);\n  }\n\n  ngOnDestroy(): void {\n    if (this.selected) {\n      // We have to delay this until the next tick in order\n      // to avoid changed after checked errors.\n      Promise.resolve().then(() => this.selected = false);\n    }\n\n    this.selectionList._removeOptionFromList(this);\n  }\n\n  /** Toggles the selection state of the option. */\n  toggle(): void {\n    this.selected = !this.selected;\n  }\n\n  /** Allows for programmatic focusing of the option. */\n  focus(): void {\n    this._element.nativeElement.focus();\n  }\n\n  /**\n   * Returns the list item's text label. Implemented as a part of the FocusKeyManager.\n   * @docs-private\n   */\n  getLabel() {\n    return this._text ? this._text.nativeElement.textContent : '';\n  }\n\n  /** Whether this list item should show a ripple effect when clicked. */\n  _isRippleDisabled() {\n    return this.disabled || this.disableRipple || this.selectionList.disableRipple;\n  }\n\n  _handleClick() {\n    if (!this.disabled) {\n      this.toggle();\n\n      // Emit a change event if the selected state of the option changed through user interaction.\n      this.selectionList._emitChangeEvent(this);\n\n      // TODO: the `selectionChange` event on the option is deprecated. Remove that in the future.\n      this._emitDeprecatedChangeEvent();\n    }\n  }\n\n  _handleFocus() {\n    this._hasFocus = true;\n    this.selectionList._setFocusedOption(this);\n  }\n\n  _handleBlur() {\n    this._hasFocus = false;\n    this.selectionList._onTouched();\n  }\n\n  /** Retrieves the DOM element of the component host. */\n  _getHostElement(): HTMLElement {\n    return this._element.nativeElement;\n  }\n\n  /** Sets the selected state of the option. */\n  _setSelected(selected: boolean) {\n    if (selected === this._selected) {\n      return;\n    }\n\n    this._selected = selected;\n\n    if (selected) {\n      this.selectionList.selectedOptions.select(this);\n    } else {\n      this.selectionList.selectedOptions.deselect(this);\n    }\n\n    this._changeDetector.markForCheck();\n  }\n\n  /** Emits a selectionChange event for this option. */\n  _emitDeprecatedChangeEvent() {\n    // TODO: the `selectionChange` event on the option is deprecated. Remove that in the future.\n    this.selectionChange.emit(new MatListOptionChange(this, this.selected));\n  }\n}\n\n\n/**\n * Material Design list component where each item is a selectable option. Behaves as a listbox.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-selection-list',\n  exportAs: 'matSelectionList',\n  inputs: ['disabled', 'disableRipple', 'tabIndex'],\n  host: {\n    'role': 'listbox',\n    '[tabIndex]': 'tabIndex',\n    'class': 'mat-selection-list',\n    '(focus)': 'focus()',\n    '(blur)': '_onTouched()',\n    '(keydown)': '_keydown($event)',\n    '[attr.aria-disabled]': 'disabled.toString()',\n  },\n  template: '<ng-content></ng-content>',\n  styleUrls: ['list.css'],\n  encapsulation: ViewEncapsulation.None,\n  providers: [MAT_SELECTION_LIST_VALUE_ACCESSOR],\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class MatSelectionList extends _MatSelectionListMixinBase implements FocusableOption,\n    CanDisable, CanDisableRipple, AfterContentInit, ControlValueAccessor, OnDestroy {\n\n  /** The FocusKeyManager which handles focus. */\n  _keyManager: FocusKeyManager<MatListOption>;\n\n  /** The option components contained within this selection-list. */\n  @ContentChildren(MatListOption) options: QueryList<MatListOption>;\n\n  /** Emits a change event whenever the selected state of an option changes. */\n  @Output() readonly selectionChange: EventEmitter<MatSelectionListChange> =\n      new EventEmitter<MatSelectionListChange>();\n\n  /** Tabindex of the selection list. */\n  @Input() tabIndex: number = 0;\n\n  /** The currently selected options. */\n  selectedOptions: SelectionModel<MatListOption> = new SelectionModel<MatListOption>(true);\n\n  /** View to model callback that should be called whenever the selected options change. */\n  private _onChange: (value: any) => void = (_: any) => {};\n\n  /** Used for storing the values that were assigned before the options were initialized. */\n  private _tempValues: string[]|null;\n\n  private _modelChanges = Subscription.EMPTY;\n\n  /** View to model callback that should be called if the list or its options lost focus. */\n  _onTouched: () => void = () => {};\n\n  constructor(private _element: ElementRef, @Attribute('tabindex') tabIndex: string) {\n    super();\n\n    this.tabIndex = parseInt(tabIndex) || 0;\n  }\n\n  ngAfterContentInit(): void {\n    this._keyManager = new FocusKeyManager<MatListOption>(this.options)\n      .withWrap()\n      .withTypeAhead()\n      // Allow disabled items to be focusable. For accessibility reasons, there must be a way for\n      // screenreader users, that allows reading the different options of the list.\n      .skipPredicate(() => false);\n\n    if (this._tempValues) {\n      this._setOptionsFromValues(this._tempValues);\n      this._tempValues = null;\n    }\n\n    // Sync external changes to the model back to the options.\n    this._modelChanges = this.selectedOptions.onChange!.subscribe(event => {\n      if (event.added) {\n        for (let item of event.added) {\n          item.selected = true;\n        }\n      }\n\n      if (event.removed) {\n        for (let item of event.removed) {\n          item.selected = false;\n        }\n      }\n    });\n  }\n\n  ngOnDestroy() {\n    this._modelChanges.unsubscribe();\n  }\n\n  /** Focuses the last active list option. */\n  focus() {\n    this._element.nativeElement.focus();\n  }\n\n  /** Selects all of the options. */\n  selectAll() {\n    this.options.forEach(option => option._setSelected(true));\n    this._reportValueChange();\n  }\n\n  /** Deselects all of the options. */\n  deselectAll() {\n    this.options.forEach(option => option._setSelected(false));\n    this._reportValueChange();\n  }\n\n  /** Sets the focused option of the selection-list. */\n  _setFocusedOption(option: MatListOption) {\n    this._keyManager.updateActiveItemIndex(this._getOptionIndex(option));\n  }\n\n  /** Removes an option from the selection list and updates the active item. */\n  _removeOptionFromList(option: MatListOption) {\n    if (option._hasFocus) {\n      const optionIndex = this._getOptionIndex(option);\n\n      // Check whether the option is the last item\n      if (optionIndex > 0) {\n        this._keyManager.setPreviousItemActive();\n      } else if (optionIndex === 0 && this.options.length > 1) {\n        this._keyManager.setNextItemActive();\n      }\n    }\n  }\n\n  /** Passes relevant key presses to our key manager. */\n  _keydown(event: KeyboardEvent) {\n    switch (event.keyCode) {\n      case SPACE:\n      case ENTER:\n        if (!this.disabled) {\n          this._toggleSelectOnFocusedOption();\n\n          // Always prevent space from scrolling the page since the list has focus\n          event.preventDefault();\n        }\n        break;\n      case HOME:\n      case END:\n        event.keyCode === HOME ? this._keyManager.setFirstItemActive() :\n                                 this._keyManager.setLastItemActive();\n        event.preventDefault();\n        break;\n      default:\n        this._keyManager.onKeydown(event);\n    }\n  }\n\n  /** Reports a value change to the ControlValueAccessor */\n  _reportValueChange() {\n    if (this.options) {\n      this._onChange(this._getSelectedOptionValues());\n    }\n  }\n\n  /** Emits a change event if the selected state of an option changed. */\n  _emitChangeEvent(option: MatListOption) {\n    this.selectionChange.emit(new MatSelectionListChange(this, option));\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  writeValue(values: string[]): void {\n    if (this.options) {\n      this._setOptionsFromValues(values || []);\n    } else {\n      this._tempValues = values;\n    }\n  }\n\n  /** Implemented as a part of ControlValueAccessor. */\n  setDisabledState(isDisabled: boolean): void {\n    if (this.options) {\n      this.options.forEach(option => option.disabled = isDisabled);\n    }\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  registerOnChange(fn: (value: any) => void): void {\n    this._onChange = fn;\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  registerOnTouched(fn: () => void): void {\n    this._onTouched = fn;\n  }\n\n  /** Returns the option with the specified value. */\n  private _getOptionByValue(value: string): MatListOption | undefined {\n    return this.options.find(option => option.value === value);\n  }\n\n  /** Sets the selected options based on the specified values. */\n  private _setOptionsFromValues(values: string[]) {\n    this.options.forEach(option => option._setSelected(false));\n\n    values\n      .map(value => this._getOptionByValue(value))\n      .filter(Boolean)\n      .forEach(option => option!._setSelected(true));\n  }\n\n  /** Returns the values of the selected options. */\n  private _getSelectedOptionValues(): string[] {\n    return this.options.filter(option => option.selected).map(option => option.value);\n  }\n\n  /** Toggles the selected state of the currently focused option. */\n  private _toggleSelectOnFocusedOption(): void {\n    let focusedIndex = this._keyManager.activeItemIndex;\n\n    if (focusedIndex != null && this._isValidIndex(focusedIndex)) {\n      let focusedOption: MatListOption = this.options.toArray()[focusedIndex];\n\n      if (focusedOption) {\n        focusedOption.toggle();\n\n        // Emit a change event because the focused option changed its state through user\n        // interaction.\n        this._emitChangeEvent(focusedOption);\n\n        // TODO: the `selectionChange` event on the option is deprecated. Remove that in the future.\n        focusedOption._emitDeprecatedChangeEvent();\n      }\n    }\n  }\n\n  /**\n   * Utility to ensure all indexes are valid.\n   * @param index The index to be checked.\n   * @returns True if the index is valid for our list of options.\n   */\n  private _isValidIndex(index: number): boolean {\n    return index >= 0 && index < this.options.length;\n  }\n\n  /** Returns the index of the specified list option. */\n  private _getOptionIndex(option: MatListOption): number {\n    return this.options.toArray().indexOf(option);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {\n  MatCommonModule,\n  MatLineModule,\n  MatPseudoCheckboxModule,\n  MatRippleModule,\n} from '@angular/material/core';\nimport {\n  MatList,\n  MatNavList,\n  MatListAvatarCssMatStyler,\n  MatListIconCssMatStyler,\n  MatListItem,\n  MatListSubheaderCssMatStyler,\n} from './list';\nimport {MatListOption, MatSelectionList} from './selection-list';\nimport {MatDividerModule} from '@angular/material/divider';\n\n\n@NgModule({\n  imports: [MatLineModule, MatRippleModule, MatCommonModule, MatPseudoCheckboxModule, CommonModule],\n  exports: [\n    MatList,\n    MatNavList,\n    MatListItem,\n    MatListAvatarCssMatStyler,\n    MatLineModule,\n    MatCommonModule,\n    MatListIconCssMatStyler,\n    MatListSubheaderCssMatStyler,\n    MatPseudoCheckboxModule,\n    MatSelectionList,\n    MatListOption,\n    MatDividerModule\n  ],\n  declarations: [\n    MatList,\n    MatNavList,\n    MatListItem,\n    MatListAvatarCssMatStyler,\n    MatListIconCssMatStyler,\n    MatListSubheaderCssMatStyler,\n    MatSelectionList,\n    MatListOption\n  ],\n})\nexport class MatListModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport{\n  trigger,\n  state,\n  style,\n  animate,\n  transition,\n  query,\n  group,\n  sequence,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/**\n * Animations used by the mat-menu component.\n * Animation duration and timing values are based on:\n * https://material.io/guidelines/components/menus.html#menus-usage\n */\nexport const matMenuAnimations: {\n  readonly transformMenu: AnimationTriggerMetadata;\n  readonly fadeInItems: AnimationTriggerMetadata;\n} = {\n  /**\n   * This animation controls the menu panel's entry and exit from the page.\n   *\n   * When the menu panel is added to the DOM, it scales in and fades in its border.\n   *\n   * When the menu panel is removed from the DOM, it simply fades out after a brief\n   * delay to display the ripple.\n   */\n  transformMenu: trigger('transformMenu', [\n    state('void', style({\n      opacity: 0,\n      // This starts off from 0.01, instead of 0, because there's an issue in the Angular animations\n      // as of 4.2, which causes the animation to be skipped if it starts from 0.\n      transform: 'scale(0.01, 0.01)'\n    })),\n    transition('void => enter', sequence([\n      query('.mat-menu-content', style({opacity: 0})),\n      animate('100ms linear', style({opacity: 1, transform: 'scale(1, 0.5)'})),\n      group([\n        query('.mat-menu-content', animate('400ms cubic-bezier(0.55, 0, 0.55, 0.2)',\n          style({opacity: 1})\n        )),\n        animate('300ms cubic-bezier(0.25, 0.8, 0.25, 1)', style({transform: 'scale(1, 1)'})),\n      ])\n    ])),\n    transition('* => void', animate('150ms 50ms linear', style({opacity: 0})))\n  ]),\n\n\n  /**\n   * This animation fades in the background color and content of the menu panel\n   * after its containing element is scaled in.\n   */\n  fadeInItems: trigger('fadeInItems', [\n    // TODO(crisbeto): this is inside the `transformMenu`\n    // now. Remove next time we do breaking changes.\n    state('showing', style({opacity: 1})),\n    transition('void => *', [\n      style({opacity: 0}),\n      animate('400ms 100ms cubic-bezier(0.55, 0, 0.55, 0.2)')\n    ])\n  ])\n};\n\n/**\n * @deprecated\n * @deletion-target 7.0.0\n */\nexport const fadeInItems = matMenuAnimations.fadeInItems;\n\n/**\n * @deprecated\n * @deletion-target 7.0.0\n */\nexport const transformMenu = matMenuAnimations.transformMenu;\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusableOption, FocusMonitor, FocusOrigin} from '@angular/cdk/a11y';\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  OnDestroy,\n  ViewEncapsulation,\n  Inject,\n} from '@angular/core';\nimport {\n  CanDisable,\n  CanDisableRipple,\n  mixinDisabled,\n  mixinDisableRipple\n} from '@angular/material/core';\nimport {Subject} from 'rxjs/Subject';\nimport {DOCUMENT} from '@angular/common';\n\n// Boilerplate for applying mixins to MatMenuItem.\n/** @docs-private */\nexport class MatMenuItemBase {}\nexport const _MatMenuItemMixinBase = mixinDisableRipple(mixinDisabled(MatMenuItemBase));\n\n/**\n * This directive is intended to be used inside an mat-menu tag.\n * It exists mostly to set the role attribute.\n */\n@Component({\n  moduleId: module.id,\n  selector: '[mat-menu-item]',\n  exportAs: 'matMenuItem',\n  inputs: ['disabled', 'disableRipple'],\n  host: {\n    'role': 'menuitem',\n    'class': 'mat-menu-item',\n    '[class.mat-menu-item-highlighted]': '_highlighted',\n    '[class.mat-menu-item-submenu-trigger]': '_triggersSubmenu',\n    '[attr.tabindex]': '_getTabIndex()',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.disabled]': 'disabled || null',\n    '(click)': '_checkDisabled($event)',\n    '(mouseenter)': '_emitHoverEvent()',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  templateUrl: 'menu-item.html',\n})\nexport class MatMenuItem extends _MatMenuItemMixinBase\n    implements FocusableOption, CanDisable, CanDisableRipple, OnDestroy {\n\n  private _document: Document;\n\n  /** Stream that emits when the menu item is hovered. */\n  readonly _hovered: Subject<MatMenuItem> = new Subject<MatMenuItem>();\n\n  /** Whether the menu item is highlighted. */\n  _highlighted: boolean = false;\n\n  /** Whether the menu item acts as a trigger for a sub-menu. */\n  _triggersSubmenu: boolean = false;\n\n  constructor(\n    private _elementRef: ElementRef,\n    @Inject(DOCUMENT) document?: any,\n    private _focusMonitor?: FocusMonitor) {\n\n    // @deletion-target 6.0.0 make `_focusMonitor` and `document` required params.\n    super();\n\n    if (_focusMonitor) {\n      // Start monitoring the element so it gets the appropriate focused classes. We want\n      // to show the focus style for menu items only when the focus was not caused by a\n      // mouse or touch interaction.\n      _focusMonitor.monitor(this._getHostElement(), false);\n    }\n\n    this._document = document;\n  }\n\n  /** Focuses the menu item. */\n  focus(origin: FocusOrigin = 'program'): void {\n    if (this._focusMonitor) {\n      this._focusMonitor.focusVia(this._getHostElement(), origin);\n    } else {\n      this._getHostElement().focus();\n    }\n  }\n\n  ngOnDestroy() {\n    if (this._focusMonitor) {\n      this._focusMonitor.stopMonitoring(this._getHostElement());\n    }\n\n    this._hovered.complete();\n  }\n\n  /** Used to set the `tabindex`. */\n  _getTabIndex(): string {\n    return this.disabled ? '-1' : '0';\n  }\n\n  /** Returns the host DOM element. */\n  _getHostElement(): HTMLElement {\n    return this._elementRef.nativeElement;\n  }\n\n  /** Prevents the default element actions if it is disabled. */\n  _checkDisabled(event: Event): void {\n    if (this.disabled) {\n      event.preventDefault();\n      event.stopPropagation();\n    }\n  }\n\n  /** Emits to the hover stream. */\n  _emitHoverEvent() {\n    if (!this.disabled) {\n      this._hovered.next(this);\n    }\n  }\n\n  /** Gets the label to be used when determining whether the option should be focused. */\n  getLabel(): string {\n    const element: HTMLElement = this._elementRef.nativeElement;\n    const textNodeType = this._document ? this._document.TEXT_NODE : 3;\n    let output = '';\n\n    if (element.childNodes) {\n      const length = element.childNodes.length;\n\n      // Go through all the top-level text nodes and extract their text.\n      // We skip anything that's not a text node to prevent the text from\n      // being thrown off by something like an icon.\n      for (let i = 0; i < length; i++) {\n        if (element.childNodes[i].nodeType === textNodeType) {\n          output += element.childNodes[i].textContent;\n        }\n      }\n    }\n\n    return output.trim();\n  }\n\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Directive,\n  TemplateRef,\n  ComponentFactoryResolver,\n  ApplicationRef,\n  Injector,\n  ViewContainerRef,\n  Inject,\n  OnDestroy,\n} from '@angular/core';\nimport {TemplatePortal, DomPortalOutlet} from '@angular/cdk/portal';\nimport {DOCUMENT} from '@angular/common';\n\n/**\n * Menu content that will be rendered lazily once the menu is opened.\n */\n@Directive({\n  selector: 'ng-template[matMenuContent]'\n})\nexport class MatMenuContent implements OnDestroy {\n  private _portal: TemplatePortal<any>;\n  private _outlet: DomPortalOutlet;\n\n  constructor(\n    private _template: TemplateRef<any>,\n    private _componentFactoryResolver: ComponentFactoryResolver,\n    private _appRef: ApplicationRef,\n    private _injector: Injector,\n    private _viewContainerRef: ViewContainerRef,\n    @Inject(DOCUMENT) private _document: any) {}\n\n  /**\n   * Attaches the content with a particular context.\n   * @docs-private\n   */\n  attach(context: any = {}) {\n    if (!this._portal) {\n      this._portal = new TemplatePortal(this._template, this._viewContainerRef);\n    }\n\n    this.detach();\n\n    if (!this._outlet) {\n      this._outlet = new DomPortalOutlet(this._document.createElement('div'),\n          this._componentFactoryResolver, this._appRef, this._injector);\n    }\n\n    const element: HTMLElement = this._template.elementRef.nativeElement;\n\n    // Because we support opening the same menu from different triggers (which in turn have their\n    // own `OverlayRef` panel), we have to re-insert the host element every time, otherwise we\n    // risk it staying attached to a pane that's no longer in the DOM.\n    element.parentNode!.insertBefore(this._outlet.outletElement, element);\n    this._portal.attach(this._outlet, context);\n  }\n\n  /**\n   * Detaches the content.\n   * @docs-private\n   */\n  detach() {\n    if (this._portal.isAttached) {\n      this._portal.detach();\n    }\n  }\n\n  ngOnDestroy() {\n    if (this._outlet) {\n      this._outlet.dispose();\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  Component,\n  ContentChild,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  Optional,\n  QueryList,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {CanDisableRipple, MatLine, MatLineSetter, mixinDisableRipple} from '@angular/material/core';\n\n// Boilerplate for applying mixins to MatList.\n/** @docs-private */\nexport class MatListBase {}\nexport const _MatListMixinBase = mixinDisableRipple(MatListBase);\n\n// Boilerplate for applying mixins to MatListItem.\n/** @docs-private */\nexport class MatListItemBase {}\nexport const _MatListItemMixinBase = mixinDisableRipple(MatListItemBase);\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-nav-list',\n  exportAs: 'matNavList',\n  host: {\n    'role': 'navigation',\n    'class': 'mat-nav-list'\n  },\n  templateUrl: 'list.html',\n  styleUrls: ['list.css'],\n  inputs: ['disableRipple'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatNavList extends _MatListMixinBase implements CanDisableRipple {}\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-list',\n  exportAs: 'matList',\n  templateUrl: 'list.html',\n  host: {'class': 'mat-list'},\n  styleUrls: ['list.css'],\n  inputs: ['disableRipple'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatList extends _MatListMixinBase implements CanDisableRipple {}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-list-avatar], [matListAvatar]',\n  host: {'class': 'mat-list-avatar'}\n})\nexport class MatListAvatarCssMatStyler {}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-list-icon], [matListIcon]',\n  host: {'class': 'mat-list-icon'}\n})\nexport class MatListIconCssMatStyler {}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-subheader], [matSubheader]',\n  host: {'class': 'mat-subheader'}\n})\nexport class MatListSubheaderCssMatStyler {}\n\n/** An item within a Material Design list. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-list-item, a[mat-list-item]',\n  exportAs: 'matListItem',\n  host: {\n    'class': 'mat-list-item',\n    // @deletion-target 7.0.0 Remove `mat-list-item-avatar` in favor of `mat-list-item-with-avatar`.\n    '[class.mat-list-item-avatar]': '_avatar',\n    '[class.mat-list-item-with-avatar]': '_avatar',\n    '(focus)': '_handleFocus()',\n    '(blur)': '_handleBlur()',\n  },\n  inputs: ['disableRipple'],\n  templateUrl: 'list-item.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatListItem extends _MatListItemMixinBase implements AfterContentInit,\n    CanDisableRipple {\n  private _isNavList: boolean = false;\n\n  @ContentChildren(MatLine) _lines: QueryList<MatLine>;\n  @ContentChild(MatListAvatarCssMatStyler) _avatar: MatListAvatarCssMatStyler;\n\n  constructor(private _element: ElementRef,\n              @Optional() private _navList: MatNavList) {\n    super();\n    this._isNavList = !!_navList;\n  }\n\n  ngAfterContentInit() {\n    // TODO: consider turning the setter into a function, it doesn't do anything as a class.\n    // tslint:disable-next-line:no-unused-expression\n    new MatLineSetter(this._lines, this._element);\n  }\n\n  /** Whether this list item should show a ripple effect when clicked. */\n  _isRippleDisabled() {\n    return !this._isNavList || this.disableRipple || this._navList.disableRipple;\n  }\n\n  _handleFocus() {\n    this._element.nativeElement.classList.add('mat-list-item-focus');\n  }\n\n  _handleBlur() {\n    this._element.nativeElement.classList.remove('mat-list-item-focus');\n  }\n\n  /** Retrieves the DOM element of the component host. */\n  _getHostElement(): HTMLElement {\n    return this._element.nativeElement;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {catchError} from 'rxjs/operators/catchError';\nimport {tap} from 'rxjs/operators/tap';\nimport {finalize} from 'rxjs/operators/finalize';\nimport {map} from 'rxjs/operators/map';\nimport {share} from 'rxjs/operators/share';\nimport {\n  Injectable,\n  Inject,\n  InjectionToken,\n  Optional,\n  SecurityContext,\n  SkipSelf,\n} from '@angular/core';\nimport {HttpClient} from '@angular/common/http';\nimport {DomSanitizer, SafeResourceUrl} from '@angular/platform-browser';\nimport {Observable} from 'rxjs/Observable';\nimport {forkJoin} from 'rxjs/observable/forkJoin';\nimport {of as observableOf} from 'rxjs/observable/of';\nimport {_throw as observableThrow} from 'rxjs/observable/throw';\nimport {DOCUMENT} from '@angular/common';\n\n\n/**\n * Returns an exception to be thrown in the case when attempting to\n * load an icon with a name that cannot be found.\n * @docs-private\n */\nexport function getMatIconNameNotFoundError(iconName: string): Error {\n  return Error(`Unable to find icon with the name \"${iconName}\"`);\n}\n\n\n/**\n * Returns an exception to be thrown when the consumer attempts to use\n * `<mat-icon>` without including @angular/http.\n * @docs-private\n */\nexport function getMatIconNoHttpProviderError(): Error {\n  return Error('Could not find HttpClient provider for use with Angular Material icons. ' +\n               'Please include the HttpClientModule from @angular/common/http in your ' +\n               'app imports.');\n}\n\n\n/**\n * Returns an exception to be thrown when a URL couldn't be sanitized.\n * @param url URL that was attempted to be sanitized.\n * @docs-private\n */\nexport function getMatIconFailedToSanitizeError(url: SafeResourceUrl): Error {\n  return Error(`The URL provided to MatIconRegistry was not trusted as a resource URL ` +\n               `via Angular's DomSanitizer. Attempted URL was \"${url}\".`);\n}\n\n/**\n * Configuration for an icon, including the URL and possibly the cached SVG element.\n * @docs-private\n */\nclass SvgIconConfig {\n  svgElement: SVGElement | null = null;\n  constructor(public url: SafeResourceUrl) { }\n}\n\n/**\n * Service to register and display icons used by the `<mat-icon>` component.\n * - Registers icon URLs by namespace and name.\n * - Registers icon set URLs by namespace.\n * - Registers aliases for CSS classes, for use with icon fonts.\n * - Loads icons from URLs and extracts individual icons from icon sets.\n */\n@Injectable()\nexport class MatIconRegistry {\n  private _document: Document;\n\n  /**\n   * URLs and cached SVG elements for individual icons. Keys are of the format \"[namespace]:[icon]\".\n   */\n  private _svgIconConfigs = new Map<string, SvgIconConfig>();\n\n  /**\n   * SvgIconConfig objects and cached SVG elements for icon sets, keyed by namespace.\n   * Multiple icon sets can be registered under the same namespace.\n   */\n  private _iconSetConfigs = new Map<string, SvgIconConfig[]>();\n\n  /** Cache for icons loaded by direct URLs. */\n  private _cachedIconsByUrl = new Map<string, SVGElement>();\n\n  /** In-progress icon fetches. Used to coalesce multiple requests to the same URL. */\n  private _inProgressUrlFetches = new Map<string, Observable<string>>();\n\n  /** Map from font identifiers to their CSS class names. Used for icon fonts. */\n  private _fontCssClassesByAlias = new Map<string, string>();\n\n  /**\n   * The CSS class to apply when an `<mat-icon>` component has no icon name, url, or font specified.\n   * The default 'material-icons' value assumes that the material icon font has been loaded as\n   * described at http://google.github.io/material-design-icons/#icon-font-for-the-web\n   */\n  private _defaultFontSetClass = 'material-icons';\n\n  constructor(\n    @Optional() private _httpClient: HttpClient,\n    private _sanitizer: DomSanitizer,\n    @Optional() @Inject(DOCUMENT) document?: any) {\n      // TODO(crisbeto): make _document required next major release.\n      this._document = document;\n    }\n\n  /**\n   * Registers an icon by URL in the default namespace.\n   * @param iconName Name under which the icon should be registered.\n   * @param url\n   */\n  addSvgIcon(iconName: string, url: SafeResourceUrl): this {\n    return this.addSvgIconInNamespace('', iconName, url);\n  }\n\n  /**\n   * Registers an icon by URL in the specified namespace.\n   * @param namespace Namespace in which the icon should be registered.\n   * @param iconName Name under which the icon should be registered.\n   * @param url\n   */\n  addSvgIconInNamespace(namespace: string, iconName: string, url: SafeResourceUrl): this {\n    const key = iconKey(namespace, iconName);\n    this._svgIconConfigs.set(key, new SvgIconConfig(url));\n    return this;\n  }\n\n  /**\n   * Registers an icon set by URL in the default namespace.\n   * @param url\n   */\n  addSvgIconSet(url: SafeResourceUrl): this {\n    return this.addSvgIconSetInNamespace('', url);\n  }\n\n  /**\n   * Registers an icon set by URL in the specified namespace.\n   * @param namespace Namespace in which to register the icon set.\n   * @param url\n   */\n  addSvgIconSetInNamespace(namespace: string, url: SafeResourceUrl): this {\n    const config = new SvgIconConfig(url);\n    const configNamespace = this._iconSetConfigs.get(namespace);\n\n    if (configNamespace) {\n      configNamespace.push(config);\n    } else {\n      this._iconSetConfigs.set(namespace, [config]);\n    }\n    return this;\n  }\n\n  /**\n   * Defines an alias for a CSS class name to be used for icon fonts. Creating an matIcon\n   * component with the alias as the fontSet input will cause the class name to be applied\n   * to the `<mat-icon>` element.\n   *\n   * @param alias Alias for the font.\n   * @param className Class name override to be used instead of the alias.\n   */\n  registerFontClassAlias(alias: string, className: string = alias): this {\n    this._fontCssClassesByAlias.set(alias, className);\n    return this;\n  }\n\n  /**\n   * Returns the CSS class name associated with the alias by a previous call to\n   * registerFontClassAlias. If no CSS class has been associated, returns the alias unmodified.\n   */\n  classNameForFontAlias(alias: string): string {\n    return this._fontCssClassesByAlias.get(alias) || alias;\n  }\n\n  /**\n   * Sets the CSS class name to be used for icon fonts when an `<mat-icon>` component does not\n   * have a fontSet input value, and is not loading an icon by name or URL.\n   *\n   * @param className\n   */\n  setDefaultFontSetClass(className: string): this {\n    this._defaultFontSetClass = className;\n    return this;\n  }\n\n  /**\n   * Returns the CSS class name to be used for icon fonts when an `<mat-icon>` component does not\n   * have a fontSet input value, and is not loading an icon by name or URL.\n   */\n  getDefaultFontSetClass(): string {\n    return this._defaultFontSetClass;\n  }\n\n  /**\n   * Returns an Observable that produces the icon (as an `<svg>` DOM element) from the given URL.\n   * The response from the URL may be cached so this will not always cause an HTTP request, but\n   * the produced element will always be a new copy of the originally fetched icon. (That is,\n   * it will not contain any modifications made to elements previously returned).\n   *\n   * @param safeUrl URL from which to fetch the SVG icon.\n   */\n  getSvgIconFromUrl(safeUrl: SafeResourceUrl): Observable<SVGElement> {\n    let url = this._sanitizer.sanitize(SecurityContext.RESOURCE_URL, safeUrl);\n\n    if (!url) {\n      throw getMatIconFailedToSanitizeError(safeUrl);\n    }\n\n    let cachedIcon = this._cachedIconsByUrl.get(url);\n\n    if (cachedIcon) {\n      return observableOf(cloneSvg(cachedIcon));\n    }\n\n    return this._loadSvgIconFromConfig(new SvgIconConfig(safeUrl)).pipe(\n      tap(svg => this._cachedIconsByUrl.set(url!, svg)),\n      map(svg => cloneSvg(svg)),\n    );\n  }\n\n  /**\n   * Returns an Observable that produces the icon (as an `<svg>` DOM element) with the given name\n   * and namespace. The icon must have been previously registered with addIcon or addIconSet;\n   * if not, the Observable will throw an error.\n   *\n   * @param name Name of the icon to be retrieved.\n   * @param namespace Namespace in which to look for the icon.\n   */\n  getNamedSvgIcon(name: string, namespace: string = ''): Observable<SVGElement> {\n    // Return (copy of) cached icon if possible.\n    const key = iconKey(namespace, name);\n    const config = this._svgIconConfigs.get(key);\n\n    if (config) {\n      return this._getSvgFromConfig(config);\n    }\n\n    // See if we have any icon sets registered for the namespace.\n    const iconSetConfigs = this._iconSetConfigs.get(namespace);\n\n    if (iconSetConfigs) {\n      return this._getSvgFromIconSetConfigs(name, iconSetConfigs);\n    }\n\n    return observableThrow(getMatIconNameNotFoundError(key));\n  }\n\n  /**\n   * Returns the cached icon for a SvgIconConfig if available, or fetches it from its URL if not.\n   */\n  private _getSvgFromConfig(config: SvgIconConfig): Observable<SVGElement> {\n    if (config.svgElement) {\n      // We already have the SVG element for this icon, return a copy.\n      return observableOf(cloneSvg(config.svgElement));\n    } else {\n      // Fetch the icon from the config's URL, cache it, and return a copy.\n      return this._loadSvgIconFromConfig(config).pipe(\n        tap(svg => config.svgElement = svg),\n        map(svg => cloneSvg(svg)),\n      );\n    }\n  }\n\n  /**\n   * Attempts to find an icon with the specified name in any of the SVG icon sets.\n   * First searches the available cached icons for a nested element with a matching name, and\n   * if found copies the element to a new `<svg>` element. If not found, fetches all icon sets\n   * that have not been cached, and searches again after all fetches are completed.\n   * The returned Observable produces the SVG element if possible, and throws\n   * an error if no icon with the specified name can be found.\n   */\n  private _getSvgFromIconSetConfigs(name: string, iconSetConfigs: SvgIconConfig[]):\n      Observable<SVGElement> {\n    // For all the icon set SVG elements we've fetched, see if any contain an icon with the\n    // requested name.\n    const namedIcon = this._extractIconWithNameFromAnySet(name, iconSetConfigs);\n\n    if (namedIcon) {\n      // We could cache namedIcon in _svgIconConfigs, but since we have to make a copy every\n      // time anyway, there's probably not much advantage compared to just always extracting\n      // it from the icon set.\n      return observableOf(namedIcon);\n    }\n\n    // Not found in any cached icon sets. If there are icon sets with URLs that we haven't\n    // fetched, fetch them now and look for iconName in the results.\n    const iconSetFetchRequests: Observable<SVGElement | null>[] = iconSetConfigs\n      .filter(iconSetConfig => !iconSetConfig.svgElement)\n      .map(iconSetConfig => {\n        return this._loadSvgIconSetFromConfig(iconSetConfig).pipe(\n          catchError((err: any): Observable<SVGElement | null> => {\n            let url = this._sanitizer.sanitize(SecurityContext.RESOURCE_URL, iconSetConfig.url);\n\n            // Swallow errors fetching individual URLs so the combined Observable won't\n            // necessarily fail.\n            console.log(`Loading icon set URL: ${url} failed: ${err}`);\n            return observableOf(null);\n          })\n        );\n      });\n\n    // Fetch all the icon set URLs. When the requests complete, every IconSet should have a\n    // cached SVG element (unless the request failed), and we can check again for the icon.\n    return forkJoin(iconSetFetchRequests).pipe(map(() => {\n      const foundIcon = this._extractIconWithNameFromAnySet(name, iconSetConfigs);\n\n      if (!foundIcon) {\n        throw getMatIconNameNotFoundError(name);\n      }\n\n      return foundIcon;\n    }));\n  }\n\n  /**\n   * Searches the cached SVG elements for the given icon sets for a nested icon element whose \"id\"\n   * tag matches the specified name. If found, copies the nested element to a new SVG element and\n   * returns it. Returns null if no matching element is found.\n   */\n  private _extractIconWithNameFromAnySet(iconName: string, iconSetConfigs: SvgIconConfig[]):\n      SVGElement | null {\n    // Iterate backwards, so icon sets added later have precedence.\n    for (let i = iconSetConfigs.length - 1; i >= 0; i--) {\n      const config = iconSetConfigs[i];\n      if (config.svgElement) {\n        const foundIcon = this._extractSvgIconFromSet(config.svgElement, iconName);\n        if (foundIcon) {\n          return foundIcon;\n        }\n      }\n    }\n    return null;\n  }\n\n  /**\n   * Loads the content of the icon URL specified in the SvgIconConfig and creates an SVG element\n   * from it.\n   */\n  private _loadSvgIconFromConfig(config: SvgIconConfig): Observable<SVGElement> {\n    return this._fetchUrl(config.url)\n        .pipe(map(svgText => this._createSvgElementForSingleIcon(svgText)));\n  }\n\n  /**\n   * Loads the content of the icon set URL specified in the SvgIconConfig and creates an SVG element\n   * from it.\n   */\n  private _loadSvgIconSetFromConfig(config: SvgIconConfig): Observable<SVGElement> {\n    // If the SVG for this icon set has already been parsed, do nothing.\n    if (config.svgElement) {\n      return observableOf(config.svgElement);\n    }\n\n    return this._fetchUrl(config.url).pipe(map(svgText => {\n      // It is possible that the icon set was parsed and cached by an earlier request, so parsing\n      // only needs to occur if the cache is yet unset.\n      if (!config.svgElement) {\n        config.svgElement = this._svgElementFromString(svgText);\n      }\n\n      return config.svgElement;\n    }));\n  }\n\n  /**\n   * Creates a DOM element from the given SVG string, and adds default attributes.\n   */\n  private _createSvgElementForSingleIcon(responseText: string): SVGElement {\n    const svg = this._svgElementFromString(responseText);\n    this._setSvgAttributes(svg);\n    return svg;\n  }\n\n  /**\n   * Searches the cached element of the given SvgIconConfig for a nested icon element whose \"id\"\n   * tag matches the specified name. If found, copies the nested element to a new SVG element and\n   * returns it. Returns null if no matching element is found.\n   */\n  private _extractSvgIconFromSet(iconSet: SVGElement, iconName: string): SVGElement | null {\n    const iconSource = iconSet.querySelector('#' + iconName);\n\n    if (!iconSource) {\n      return null;\n    }\n\n    // Clone the element and remove the ID to prevent multiple elements from being added\n    // to the page with the same ID.\n    const iconElement = iconSource.cloneNode(true) as Element;\n    iconElement.id = '';\n\n    // If the icon node is itself an <svg> node, clone and return it directly. If not, set it as\n    // the content of a new <svg> node.\n    if (iconElement.nodeName.toLowerCase() === 'svg') {\n      return this._setSvgAttributes(iconElement as SVGElement);\n    }\n\n    // If the node is a <symbol>, it won't be rendered so we have to convert it into <svg>. Note\n    // that the same could be achieved by referring to it via <use href=\"#id\">, however the <use>\n    // tag is problematic on Firefox, because it needs to include the current page path.\n    if (iconElement.nodeName.toLowerCase() === 'symbol') {\n      return this._setSvgAttributes(this._toSvgElement(iconElement));\n    }\n\n    // createElement('SVG') doesn't work as expected; the DOM ends up with\n    // the correct nodes, but the SVG content doesn't render. Instead we\n    // have to create an empty SVG node using innerHTML and append its content.\n    // Elements created using DOMParser.parseFromString have the same problem.\n    // http://stackoverflow.com/questions/23003278/svg-innerhtml-in-firefox-can-not-display\n    const svg = this._svgElementFromString('<svg></svg>');\n    // Clone the node so we don't remove it from the parent icon set element.\n    svg.appendChild(iconElement);\n\n    return this._setSvgAttributes(svg);\n  }\n\n  /**\n   * Creates a DOM element from the given SVG string.\n   */\n  private _svgElementFromString(str: string): SVGElement {\n    if (this._document || typeof document !== 'undefined') {\n      const div = (this._document || document).createElement('DIV');\n      div.innerHTML = str;\n      const svg = div.querySelector('svg') as SVGElement;\n      if (!svg) {\n        throw Error('<svg> tag not found');\n      }\n      return svg;\n    }\n\n    throw new Error('MatIconRegistry could not resolve document.');\n  }\n\n  /**\n   * Converts an element into an SVG node by cloning all of its children.\n   */\n  private _toSvgElement(element: Element): SVGElement {\n    let svg = this._svgElementFromString('<svg></svg>');\n\n    for (let i = 0; i < element.childNodes.length; i++) {\n      if (element.childNodes[i].nodeType === this._document.ELEMENT_NODE) {\n        svg.appendChild(element.childNodes[i].cloneNode(true));\n      }\n    }\n\n    return svg;\n  }\n\n  /**\n   * Sets the default attributes for an SVG element to be used as an icon.\n   */\n  private _setSvgAttributes(svg: SVGElement): SVGElement {\n    svg.setAttribute('fit', '');\n    svg.setAttribute('height', '100%');\n    svg.setAttribute('width', '100%');\n    svg.setAttribute('preserveAspectRatio', 'xMidYMid meet');\n    svg.setAttribute('focusable', 'false'); // Disable IE11 default behavior to make SVGs focusable.\n    return svg;\n  }\n\n  /**\n   * Returns an Observable which produces the string contents of the given URL. Results may be\n   * cached, so future calls with the same URL may not cause another HTTP request.\n   */\n  private _fetchUrl(safeUrl: SafeResourceUrl): Observable<string> {\n    if (!this._httpClient) {\n      throw getMatIconNoHttpProviderError();\n    }\n\n    const url = this._sanitizer.sanitize(SecurityContext.RESOURCE_URL, safeUrl);\n\n    if (!url) {\n      throw getMatIconFailedToSanitizeError(safeUrl);\n    }\n\n    // Store in-progress fetches to avoid sending a duplicate request for a URL when there is\n    // already a request in progress for that URL. It's necessary to call share() on the\n    // Observable returned by http.get() so that multiple subscribers don't cause multiple XHRs.\n    const inProgressFetch = this._inProgressUrlFetches.get(url);\n\n    if (inProgressFetch) {\n      return inProgressFetch;\n    }\n\n    // TODO(jelbourn): for some reason, the `finally` operator \"loses\" the generic type on the\n    // Observable. Figure out why and fix it.\n    const req = this._httpClient.get(url, {responseType: 'text'}).pipe(\n      finalize(() => this._inProgressUrlFetches.delete(url)),\n      share(),\n    );\n\n    this._inProgressUrlFetches.set(url, req);\n    return req;\n  }\n}\n\n/** @docs-private */\nexport function ICON_REGISTRY_PROVIDER_FACTORY(\n  parentRegistry: MatIconRegistry,\n  httpClient: HttpClient,\n  sanitizer: DomSanitizer,\n  document?: any) {\n  return parentRegistry || new MatIconRegistry(httpClient, sanitizer, document);\n}\n\n/** @docs-private */\nexport const ICON_REGISTRY_PROVIDER = {\n  // If there is already an MatIconRegistry available, use that. Otherwise, provide a new one.\n  provide: MatIconRegistry,\n  deps: [\n    [new Optional(), new SkipSelf(), MatIconRegistry],\n    [new Optional(), HttpClient],\n    DomSanitizer,\n    [new Optional(), DOCUMENT as InjectionToken<any>],\n  ],\n  useFactory: ICON_REGISTRY_PROVIDER_FACTORY,\n};\n\n/** Clones an SVGElement while preserving type information. */\nfunction cloneSvg(svg: SVGElement): SVGElement {\n  return svg.cloneNode(true) as SVGElement;\n}\n\n/** Returns the cache key to use for an icon namespace and name. */\nfunction iconKey(namespace: string, name: string) {\n  return namespace + ':' + name;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {take} from 'rxjs/operators/take';\nimport {\n  Attribute,\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  Input,\n  OnChanges,\n  OnInit,\n  SimpleChanges,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {CanColor, mixinColor} from '@angular/material/core';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {MatIconRegistry} from './icon-registry';\n\n\n// Boilerplate for applying mixins to MatIcon.\n/** @docs-private */\nexport class MatIconBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatIconMixinBase = mixinColor(MatIconBase);\n\n\n/**\n * Component to display an icon. It can be used in the following ways:\n *\n * - Specify the svgIcon input to load an SVG icon from a URL previously registered with the\n *   addSvgIcon, addSvgIconInNamespace, addSvgIconSet, or addSvgIconSetInNamespace methods of\n *   MatIconRegistry. If the svgIcon value contains a colon it is assumed to be in the format\n *   \"[namespace]:[name]\", if not the value will be the name of an icon in the default namespace.\n *   Examples:\n *     `<mat-icon svgIcon=\"left-arrow\"></mat-icon>\n *     <mat-icon svgIcon=\"animals:cat\"></mat-icon>`\n *\n * - Use a font ligature as an icon by putting the ligature text in the content of the `<mat-icon>`\n *   component. By default the Material icons font is used as described at\n *   http://google.github.io/material-design-icons/#icon-font-for-the-web. You can specify an\n *   alternate font by setting the fontSet input to either the CSS class to apply to use the\n *   desired font, or to an alias previously registered with MatIconRegistry.registerFontClassAlias.\n *   Examples:\n *     `<mat-icon>home</mat-icon>\n *     <mat-icon fontSet=\"myfont\">sun</mat-icon>`\n *\n * - Specify a font glyph to be included via CSS rules by setting the fontSet input to specify the\n *   font, and the fontIcon input to specify the icon. Typically the fontIcon will specify a\n *   CSS class which causes the glyph to be displayed via a :before selector, as in\n *   https://fortawesome.github.io/Font-Awesome/examples/\n *   Example:\n *     `<mat-icon fontSet=\"fa\" fontIcon=\"alarm\"></mat-icon>`\n */\n@Component({\n  moduleId: module.id,\n  template: '<ng-content></ng-content>',\n  selector: 'mat-icon',\n  exportAs: 'matIcon',\n  styleUrls: ['icon.css'],\n  inputs: ['color'],\n  host: {\n    'role': 'img',\n    'class': 'mat-icon',\n    '[class.mat-icon-inline]': 'inline',\n  },\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatIcon extends _MatIconMixinBase implements OnChanges, OnInit, CanColor {\n\n  /**\n   * Whether the icon should be inlined, automatically sizing the icon to match the font size of\n   * the element the icon is contained in.\n   */\n  @Input()\n  get inline(): boolean {\n    return this._inline;\n  }\n  set inline(inline: boolean) {\n    this._inline = coerceBooleanProperty(inline);\n  }\n  private _inline: boolean = false;\n\n  /** Name of the icon in the SVG icon set. */\n  @Input() svgIcon: string;\n\n  /** Font set that the icon is a part of. */\n  @Input()\n  get fontSet(): string { return this._fontSet; }\n  set fontSet(value: string) {\n    this._fontSet = this._cleanupFontValue(value);\n  }\n  private _fontSet: string;\n\n  /** Name of an icon within a font set. */\n  @Input()\n  get fontIcon(): string { return this._fontIcon; }\n  set fontIcon(value: string) {\n    this._fontIcon = this._cleanupFontValue(value);\n  }\n  private _fontIcon: string;\n\n  private _previousFontSetClass: string;\n  private _previousFontIconClass: string;\n\n  constructor(\n      elementRef: ElementRef,\n      private _iconRegistry: MatIconRegistry,\n      @Attribute('aria-hidden') ariaHidden: string) {\n    super(elementRef);\n\n    // If the user has not explicitly set aria-hidden, mark the icon as hidden, as this is\n    // the right thing to do for the majority of icon use-cases.\n    if (!ariaHidden) {\n      elementRef.nativeElement.setAttribute('aria-hidden', 'true');\n    }\n  }\n\n  /**\n   * Splits an svgIcon binding value into its icon set and icon name components.\n   * Returns a 2-element array of [(icon set), (icon name)].\n   * The separator for the two fields is ':'. If there is no separator, an empty\n   * string is returned for the icon set and the entire value is returned for\n   * the icon name. If the argument is falsy, returns an array of two empty strings.\n   * Throws an error if the name contains two or more ':' separators.\n   * Examples:\n   *   `'social:cake' -> ['social', 'cake']\n   *   'penguin' -> ['', 'penguin']\n   *   null -> ['', '']\n   *   'a:b:c' -> (throws Error)`\n   */\n  private _splitIconName(iconName: string): [string, string] {\n    if (!iconName) {\n      return ['', ''];\n    }\n    const parts = iconName.split(':');\n    switch (parts.length) {\n      case 1: return ['', parts[0]]; // Use default namespace.\n      case 2: return <[string, string]>parts;\n      default: throw Error(`Invalid icon name: \"${iconName}\"`);\n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    // Only update the inline SVG icon if the inputs changed, to avoid unnecessary DOM operations.\n    if (changes.svgIcon) {\n      if (this.svgIcon) {\n        const [namespace, iconName] = this._splitIconName(this.svgIcon);\n\n        this._iconRegistry.getNamedSvgIcon(iconName, namespace).pipe(take(1)).subscribe(\n          svg => this._setSvgElement(svg),\n          (err: Error) => console.log(`Error retrieving icon: ${err.message}`)\n        );\n      } else {\n        this._clearSvgElement();\n      }\n    }\n\n    if (this._usingFontIcon()) {\n      this._updateFontIconClasses();\n    }\n  }\n\n  ngOnInit() {\n    // Update font classes because ngOnChanges won't be called if none of the inputs are present,\n    // e.g. <mat-icon>arrow</mat-icon> In this case we need to add a CSS class for the default font.\n    if (this._usingFontIcon()) {\n      this._updateFontIconClasses();\n    }\n  }\n\n  private _usingFontIcon(): boolean {\n    return !this.svgIcon;\n  }\n\n  private _setSvgElement(svg: SVGElement) {\n    this._clearSvgElement();\n    this._elementRef.nativeElement.appendChild(svg);\n  }\n\n  private _clearSvgElement() {\n    const layoutElement: HTMLElement = this._elementRef.nativeElement;\n    const childCount = layoutElement.childNodes.length;\n\n    // Remove existing child nodes and add the new SVG element. Note that we can't\n    // use innerHTML, because IE will throw if the element has a data binding.\n    for (let i = 0; i < childCount; i++) {\n      layoutElement.removeChild(layoutElement.childNodes[i]);\n    }\n  }\n\n  private _updateFontIconClasses() {\n    if (!this._usingFontIcon()) {\n      return;\n    }\n\n    const elem: HTMLElement = this._elementRef.nativeElement;\n    const fontSetClass = this.fontSet ?\n        this._iconRegistry.classNameForFontAlias(this.fontSet) :\n        this._iconRegistry.getDefaultFontSetClass();\n\n    if (fontSetClass != this._previousFontSetClass) {\n      if (this._previousFontSetClass) {\n        elem.classList.remove(this._previousFontSetClass);\n      }\n      if (fontSetClass) {\n        elem.classList.add(fontSetClass);\n      }\n      this._previousFontSetClass = fontSetClass;\n    }\n\n    if (this.fontIcon != this._previousFontIconClass) {\n      if (this._previousFontIconClass) {\n        elem.classList.remove(this._previousFontIconClass);\n      }\n      if (this.fontIcon) {\n        elem.classList.add(this.fontIcon);\n      }\n      this._previousFontIconClass = this.fontIcon;\n    }\n  }\n\n  /**\n   * Cleans up a value to be used as a fontIcon or fontSet.\n   * Since the value ends up being assigned as a CSS class, we\n   * have to trim the value and omit space-separated values.\n   */\n  private _cleanupFontValue(value: string) {\n    return typeof value === 'string' ? value.trim().split(' ')[0] : value;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatIcon} from './icon';\nimport {ICON_REGISTRY_PROVIDER} from './icon-registry';\n\n\n@NgModule({\n  imports: [MatCommonModule],\n  exports: [MatIcon, MatCommonModule],\n  declarations: [MatIcon],\n  providers: [ICON_REGISTRY_PROVIDER],\n})\nexport class MatIconModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {DOWN_ARROW} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  Directive,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  OnDestroy,\n  Optional,\n  Output,\n} from '@angular/core';\nimport {\n  AbstractControl,\n  ControlValueAccessor,\n  NG_VALIDATORS,\n  NG_VALUE_ACCESSOR,\n  ValidationErrors,\n  Validator,\n  ValidatorFn,\n  Validators\n} from '@angular/forms';\nimport {DateAdapter, MAT_DATE_FORMATS, MatDateFormats} from '@angular/material/core';\nimport {MatFormField} from '@angular/material/form-field';\nimport {MAT_INPUT_VALUE_ACCESSOR} from '@angular/material/input';\nimport {Subscription} from 'rxjs/Subscription';\nimport {MatDatepicker} from './datepicker';\nimport {createMissingDateImplError} from './datepicker-errors';\n\n\nexport const MAT_DATEPICKER_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatDatepickerInput),\n  multi: true\n};\n\n\nexport const MAT_DATEPICKER_VALIDATORS: any = {\n  provide: NG_VALIDATORS,\n  useExisting: forwardRef(() => MatDatepickerInput),\n  multi: true\n};\n\n\n/**\n * An event used for datepicker input and change events. We don't always have access to a native\n * input or change event because the event may have been triggered by the user clicking on the\n * calendar popup. For consistency, we always use MatDatepickerInputEvent instead.\n */\nexport class MatDatepickerInputEvent<D> {\n  /** The new value for the target datepicker input. */\n  value: D | null;\n\n  constructor(\n    /** Reference to the datepicker input component that emitted the event. */\n    public target: MatDatepickerInput<D>,\n    /** Reference to the native input element associated with the datepicker input. */\n    public targetElement: HTMLElement) {\n    this.value = this.target.value;\n  }\n}\n\n\n/** Directive used to connect an input to a MatDatepicker. */\n@Directive({\n  selector: 'input[matDatepicker]',\n  providers: [\n    MAT_DATEPICKER_VALUE_ACCESSOR,\n    MAT_DATEPICKER_VALIDATORS,\n    {provide: MAT_INPUT_VALUE_ACCESSOR, useExisting: MatDatepickerInput},\n  ],\n  host: {\n    '[attr.aria-haspopup]': 'true',\n    '[attr.aria-owns]': '(_datepicker?.opened && _datepicker.id) || null',\n    '[attr.min]': 'min ? _dateAdapter.toIso8601(min) : null',\n    '[attr.max]': 'max ? _dateAdapter.toIso8601(max) : null',\n    '[disabled]': 'disabled',\n    '(input)': '_onInput($event.target.value)',\n    '(change)': '_onChange()',\n    '(blur)': '_onTouched()',\n    '(keydown)': '_onKeydown($event)',\n  },\n  exportAs: 'matDatepickerInput',\n})\nexport class MatDatepickerInput<D> implements AfterContentInit, ControlValueAccessor, OnDestroy,\n    Validator {\n  /** The datepicker that this input is associated with. */\n  @Input()\n  set matDatepicker(value: MatDatepicker<D>) {\n    this.registerDatepicker(value);\n  }\n  _datepicker: MatDatepicker<D>;\n\n  private registerDatepicker(value: MatDatepicker<D>) {\n    if (value) {\n      this._datepicker = value;\n      this._datepicker._registerInput(this);\n    }\n  }\n\n  /** Function that can be used to filter out dates within the datepicker. */\n  @Input()\n  set matDatepickerFilter(value: (date: D | null) => boolean) {\n    this._dateFilter = value;\n    this._validatorOnChange();\n  }\n  _dateFilter: (date: D | null) => boolean;\n\n  /** The value of the input. */\n  @Input()\n  get value(): D | null { return this._value; }\n  set value(value: D | null) {\n    value = this._dateAdapter.deserialize(value);\n    this._lastValueValid = !value || this._dateAdapter.isValid(value);\n    value = this._getValidDateOrNull(value);\n    let oldDate = this.value;\n    this._value = value;\n    this._elementRef.nativeElement.value =\n        value ? this._dateAdapter.format(value, this._dateFormats.display.dateInput) : '';\n    if (!this._dateAdapter.sameDate(oldDate, value)) {\n      this._valueChange.emit(value);\n    }\n  }\n  private _value: D | null;\n\n  /** The minimum valid date. */\n  @Input()\n  get min(): D | null { return this._min; }\n  set min(value: D | null) {\n    this._min = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n    this._validatorOnChange();\n  }\n  private _min: D | null;\n\n  /** The maximum valid date. */\n  @Input()\n  get max(): D | null { return this._max; }\n  set max(value: D | null) {\n    this._max = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n    this._validatorOnChange();\n  }\n  private _max: D | null;\n\n  /** Whether the datepicker-input is disabled. */\n  @Input()\n  get disabled(): boolean { return !!this._disabled; }\n  set disabled(value: boolean) {\n    const newValue = coerceBooleanProperty(value);\n    const element = this._elementRef.nativeElement;\n\n    if (this._disabled !== newValue) {\n      this._disabled = newValue;\n      this._disabledChange.emit(newValue);\n    }\n\n    // We need to null check the `blur` method, because it's undefined during SSR.\n    if (newValue && element.blur) {\n      // Normally, native input elements automatically blur if they turn disabled. This behavior\n      // is problematic, because it would mean that it triggers another change detection cycle,\n      // which then causes a changed after checked error if the input element was focused before.\n      element.blur();\n    }\n  }\n  private _disabled: boolean;\n\n  /** Emits when a `change` event is fired on this `<input>`. */\n  @Output() readonly dateChange: EventEmitter<MatDatepickerInputEvent<D>> =\n      new EventEmitter<MatDatepickerInputEvent<D>>();\n\n  /** Emits when an `input` event is fired on this `<input>`. */\n  @Output() readonly dateInput: EventEmitter<MatDatepickerInputEvent<D>> =\n      new EventEmitter<MatDatepickerInputEvent<D>>();\n\n  /** Emits when the value changes (either due to user input or programmatic change). */\n  _valueChange = new EventEmitter<D | null>();\n\n  /** Emits when the disabled state has changed */\n  _disabledChange = new EventEmitter<boolean>();\n\n  _onTouched = () => {};\n\n  private _cvaOnChange: (value: any) => void = () => {};\n\n  private _validatorOnChange = () => {};\n\n  private _datepickerSubscription = Subscription.EMPTY;\n\n  private _localeSubscription = Subscription.EMPTY;\n\n  /** The form control validator for whether the input parses. */\n  private _parseValidator: ValidatorFn = (): ValidationErrors | null => {\n    return this._lastValueValid ?\n        null : {'matDatepickerParse': {'text': this._elementRef.nativeElement.value}};\n  }\n\n  /** The form control validator for the min date. */\n  private _minValidator: ValidatorFn = (control: AbstractControl): ValidationErrors | null => {\n    const controlValue = this._getValidDateOrNull(this._dateAdapter.deserialize(control.value));\n    return (!this.min || !controlValue ||\n        this._dateAdapter.compareDate(this.min, controlValue) <= 0) ?\n        null : {'matDatepickerMin': {'min': this.min, 'actual': controlValue}};\n  }\n\n  /** The form control validator for the max date. */\n  private _maxValidator: ValidatorFn = (control: AbstractControl): ValidationErrors | null => {\n    const controlValue = this._getValidDateOrNull(this._dateAdapter.deserialize(control.value));\n    return (!this.max || !controlValue ||\n        this._dateAdapter.compareDate(this.max, controlValue) >= 0) ?\n        null : {'matDatepickerMax': {'max': this.max, 'actual': controlValue}};\n  }\n\n  /** The form control validator for the date filter. */\n  private _filterValidator: ValidatorFn = (control: AbstractControl): ValidationErrors | null => {\n    const controlValue = this._getValidDateOrNull(this._dateAdapter.deserialize(control.value));\n    return !this._dateFilter || !controlValue || this._dateFilter(controlValue) ?\n        null : {'matDatepickerFilter': true};\n  }\n\n  /** The combined form control validator for this input. */\n  private _validator: ValidatorFn | null =\n      Validators.compose(\n          [this._parseValidator, this._minValidator, this._maxValidator, this._filterValidator]);\n\n  /** Whether the last value set on the input was valid. */\n  private _lastValueValid = false;\n\n  constructor(\n      private _elementRef: ElementRef,\n      @Optional() public _dateAdapter: DateAdapter<D>,\n      @Optional() @Inject(MAT_DATE_FORMATS) private _dateFormats: MatDateFormats,\n      @Optional() private _formField: MatFormField) {\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n    if (!this._dateFormats) {\n      throw createMissingDateImplError('MAT_DATE_FORMATS');\n    }\n\n    // Update the displayed date when the locale changes.\n    this._localeSubscription = _dateAdapter.localeChanges.subscribe(() => {\n      this.value = this.value;\n    });\n  }\n\n  ngAfterContentInit() {\n    if (this._datepicker) {\n      this._datepickerSubscription =\n          this._datepicker.selectedChanged.subscribe((selected: D) => {\n            this.value = selected;\n            this._cvaOnChange(selected);\n            this._onTouched();\n            this.dateInput.emit(new MatDatepickerInputEvent(this, this._elementRef.nativeElement));\n            this.dateChange.emit(new MatDatepickerInputEvent(this, this._elementRef.nativeElement));\n          });\n    }\n  }\n\n  ngOnDestroy() {\n    this._datepickerSubscription.unsubscribe();\n    this._localeSubscription.unsubscribe();\n    this._valueChange.complete();\n    this._disabledChange.complete();\n  }\n\n  /** @docs-private */\n  registerOnValidatorChange(fn: () => void): void {\n    this._validatorOnChange = fn;\n  }\n\n  /** @docs-private */\n  validate(c: AbstractControl): ValidationErrors | null {\n    return this._validator ? this._validator(c) : null;\n  }\n\n  /**\n   * @deprecated\n   * @deletion-target 7.0.0 Use `getConnectedOverlayOrigin` instead\n   */\n  getPopupConnectionElementRef(): ElementRef {\n    return this.getConnectedOverlayOrigin();\n  }\n\n  /**\n   * Gets the element that the datepicker popup should be connected to.\n   * @return The element to connect the popup to.\n   */\n  getConnectedOverlayOrigin(): ElementRef {\n    return this._formField ? this._formField.getConnectedOverlayOrigin() : this._elementRef;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  writeValue(value: D): void {\n    this.value = value;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnChange(fn: (value: any) => void): void {\n    this._cvaOnChange = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnTouched(fn: () => void): void {\n    this._onTouched = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n  }\n\n  _onKeydown(event: KeyboardEvent) {\n    if (event.altKey && event.keyCode === DOWN_ARROW) {\n      this._datepicker.open();\n      event.preventDefault();\n    }\n  }\n\n  _onInput(value: string) {\n    let date = this._dateAdapter.parse(value, this._dateFormats.parse.dateInput);\n    this._lastValueValid = !date || this._dateAdapter.isValid(date);\n    date = this._getValidDateOrNull(date);\n    this._value = date;\n    this._cvaOnChange(date);\n    this._valueChange.emit(date);\n    this.dateInput.emit(new MatDatepickerInputEvent(this, this._elementRef.nativeElement));\n  }\n\n  _onChange() {\n    this.dateChange.emit(new MatDatepickerInputEvent(this, this._elementRef.nativeElement));\n  }\n\n  /** Returns the palette used by the input's form field, if any. */\n  _getThemePalette() {\n    return this._formField ? this._formField.color : undefined;\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  Input,\n  OnChanges,\n  OnDestroy,\n  SimpleChanges,\n  ViewEncapsulation,\n  Directive,\n  ContentChild,\n} from '@angular/core';\nimport {merge} from 'rxjs/observable/merge';\nimport {of as observableOf} from 'rxjs/observable/of';\nimport {Subscription} from 'rxjs/Subscription';\nimport {MatDatepicker} from './datepicker';\nimport {MatDatepickerIntl} from './datepicker-intl';\n\n\n/** Can be used to override the icon of a `matDatepickerToggle`. */\n@Directive({\n  selector: '[matDatepickerToggleIcon]'\n})\nexport class MatDatepickerToggleIcon {}\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-datepicker-toggle',\n  templateUrl: 'datepicker-toggle.html',\n  styleUrls: ['datepicker-toggle.css'],\n  host: {\n    'class': 'mat-datepicker-toggle',\n    '[class.mat-datepicker-toggle-active]': 'datepicker && datepicker.opened',\n    '[class.mat-accent]': 'datepicker && datepicker.color === \"accent\"',\n    '[class.mat-warn]': 'datepicker && datepicker.color === \"warn\"',\n  },\n  exportAs: 'matDatepickerToggle',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatDatepickerToggle<D> implements AfterContentInit, OnChanges, OnDestroy {\n  private _stateChanges = Subscription.EMPTY;\n\n  /** Datepicker instance that the button will toggle. */\n  @Input('for') datepicker: MatDatepicker<D>;\n\n  /** Whether the toggle button is disabled. */\n  @Input()\n  get disabled(): boolean {\n    return this._disabled === undefined ? this.datepicker.disabled : !!this._disabled;\n  }\n  set disabled(value: boolean) {\n    this._disabled = coerceBooleanProperty(value);\n  }\n  private _disabled: boolean;\n\n  /** Custom icon set by the consumer. */\n  @ContentChild(MatDatepickerToggleIcon) _customIcon: MatDatepickerToggleIcon;\n\n  constructor(public _intl: MatDatepickerIntl, private _changeDetectorRef: ChangeDetectorRef) {}\n\n  ngOnChanges(changes: SimpleChanges) {\n    if (changes.datepicker) {\n      this._watchStateChanges();\n    }\n  }\n\n  ngOnDestroy() {\n    this._stateChanges.unsubscribe();\n  }\n\n  ngAfterContentInit() {\n    this._watchStateChanges();\n  }\n\n  _open(event: Event): void {\n    if (this.datepicker && !this.disabled) {\n      this.datepicker.open();\n      event.stopPropagation();\n    }\n  }\n\n  private _watchStateChanges() {\n    const datepickerDisabled = this.datepicker ? this.datepicker._disabledChange : observableOf();\n    const inputDisabled = this.datepicker && this.datepicker._datepickerInput ?\n        this.datepicker._datepickerInput._disabledChange : observableOf();\n    const datepickerToggled = this.datepicker ?\n        merge(this.datepicker.openedStream, this.datepicker.closedStream) :\n        observableOf();\n\n    this._stateChanges.unsubscribe();\n    this._stateChanges = merge(\n      this._intl.changes,\n      datepickerDisabled,\n      inputDisabled,\n      datepickerToggled\n    ).subscribe(() => this._changeDetectorRef.markForCheck());\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {A11yModule} from '@angular/cdk/a11y';\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatButtonModule} from '@angular/material/button';\nimport {MatDialogModule} from '@angular/material/dialog';\nimport {MatCalendar} from './calendar';\nimport {MatCalendarBody} from './calendar-body';\nimport {\n  MAT_DATEPICKER_SCROLL_STRATEGY_PROVIDER,\n  MatDatepicker,\n  MatDatepickerContent,\n} from './datepicker';\nimport {MatDatepickerInput} from './datepicker-input';\nimport {MatDatepickerIntl} from './datepicker-intl';\nimport {MatDatepickerToggle, MatDatepickerToggleIcon} from './datepicker-toggle';\nimport {MatMonthView} from './month-view';\nimport {MatMultiYearView} from './multi-year-view';\nimport {MatYearView} from './year-view';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatButtonModule,\n    MatDialogModule,\n    OverlayModule,\n    A11yModule,\n  ],\n  exports: [\n    MatCalendar,\n    MatCalendarBody,\n    MatDatepicker,\n    MatDatepickerContent,\n    MatDatepickerInput,\n    MatDatepickerToggle,\n    MatDatepickerToggleIcon,\n    MatMonthView,\n    MatYearView,\n    MatMultiYearView,\n  ],\n  declarations: [\n    MatCalendar,\n    MatCalendarBody,\n    MatDatepicker,\n    MatDatepickerContent,\n    MatDatepickerInput,\n    MatDatepickerToggle,\n    MatDatepickerToggleIcon,\n    MatMonthView,\n    MatYearView,\n    MatMultiYearView,\n  ],\n  providers: [\n    MatDatepickerIntl,\n    MAT_DATEPICKER_SCROLL_STRATEGY_PROVIDER,\n  ],\n  entryComponents: [\n    MatDatepickerContent,\n  ]\n})\nexport class MatDatepickerModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ChangeDetectionStrategy, Component, Input, ViewEncapsulation} from '@angular/core';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-divider',\n  host: {\n    'role': 'separator',\n    '[attr.aria-orientation]': 'vertical ? \"vertical\" : \"horizontal\"',\n    '[class.mat-divider-vertical]': 'vertical',\n    '[class.mat-divider-inset]': 'inset',\n    'class': 'mat-divider'\n  },\n  template: '',\n  styleUrls: ['divider.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatDivider {\n  /** Whether the divider is vertically aligned. */\n  @Input()\n  get vertical(): boolean { return this._vertical; }\n  set vertical(value: boolean) { this._vertical = coerceBooleanProperty(value); }\n  private _vertical: boolean = false;\n\n  /** Whether the divider is an inset divider. */\n  @Input()\n  get inset(): boolean { return this._inset; }\n  set inset(value: boolean) { this._inset = coerceBooleanProperty(value); }\n  private _inset: boolean = false;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatDivider} from './divider';\n\n\n@NgModule({\n  imports: [MatCommonModule, CommonModule],\n  exports: [\n    MatDivider,\n    MatCommonModule,\n  ],\n  declarations: [\n    MatDivider,\n  ],\n})\nexport class MatDividerModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, Input} from '@angular/core';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {CdkAccordion} from '@angular/cdk/accordion';\n\n/** MatAccordion's display modes. */\nexport type MatAccordionDisplayMode = 'default' | 'flat';\n\n/**\n * Directive for a Material Design Accordion.\n */\n@Directive({\n  selector: 'mat-accordion',\n  exportAs: 'matAccordion',\n  host: {\n    class: 'mat-accordion'\n  }\n})\nexport class MatAccordion extends CdkAccordion {\n  /** Whether the expansion indicator should be hidden. */\n  @Input()\n  get hideToggle(): boolean { return this._hideToggle; }\n  set hideToggle(show: boolean) { this._hideToggle = coerceBooleanProperty(show); }\n  private _hideToggle: boolean = false;\n\n  /**\n   * The display mode used for all expansion panels in the accordion. Currently two display\n   * modes exist:\n   *  default - a gutter-like spacing is placed around any expanded panel, placing the expanded\n   *     panel at a different elevation from the reset of the accordion.\n   *  flat - no spacing is placed around expanded panels, showing all panels at the same\n   *     elevation.\n   */\n  @Input() displayMode: MatAccordionDisplayMode = 'default';\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, TemplateRef} from '@angular/core';\n\n/**\n * Expansion panel content that will be rendered lazily\n * after the panel is opened for the first time.\n */\n@Directive({\n  selector: 'ng-template[matExpansionPanelContent]'\n})\nexport class MatExpansionPanelContent {\n  constructor(public _template: TemplateRef<any>) {}\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {AnimationEvent} from '@angular/animations';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  Directive,\n  Host,\n  Input,\n  OnChanges,\n  OnDestroy,\n  Optional,\n  SimpleChanges,\n  ViewEncapsulation,\n  ViewContainerRef,\n  AfterContentInit,\n  ContentChild,\n} from '@angular/core';\nimport {CdkAccordionItem} from '@angular/cdk/accordion';\nimport {UniqueSelectionDispatcher} from '@angular/cdk/collections';\nimport {TemplatePortal} from '@angular/cdk/portal';\nimport {Subject} from 'rxjs/Subject';\nimport {take} from 'rxjs/operators/take';\nimport {filter} from 'rxjs/operators/filter';\nimport {startWith} from 'rxjs/operators/startWith';\nimport {MatAccordion} from './accordion';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {MatExpansionPanelContent} from './expansion-panel-content';\nimport {matExpansionAnimations} from './expansion-animations';\n\n/** MatExpansionPanel's states. */\nexport type MatExpansionPanelState = 'expanded' | 'collapsed';\n\n/** Counter for generating unique element ids. */\nlet uniqueId = 0;\n\n/**\n * `<mat-expansion-panel>`\n *\n * This component can be used as a single element to show expandable content, or as one of\n * multiple children of an element with the MdAccordion directive attached.\n */\n@Component({\n  moduleId: module.id,\n  styleUrls: ['./expansion-panel.css'],\n  selector: 'mat-expansion-panel',\n  exportAs: 'matExpansionPanel',\n  templateUrl: './expansion-panel.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  inputs: ['disabled', 'expanded'],\n  outputs: ['opened', 'closed', 'expandedChange'],\n  animations: [matExpansionAnimations.bodyExpansion],\n  host: {\n    'class': 'mat-expansion-panel',\n    '[class.mat-expanded]': 'expanded',\n    '[class.mat-expansion-panel-spacing]': '_hasSpacing()',\n  }\n})\nexport class MatExpansionPanel extends CdkAccordionItem\n    implements AfterContentInit, OnChanges, OnDestroy {\n  /** Whether the toggle indicator should be hidden. */\n  @Input()\n  get hideToggle(): boolean { return this._hideToggle; }\n  set hideToggle(value: boolean) {\n    this._hideToggle = coerceBooleanProperty(value);\n  }\n  private _hideToggle = false;\n\n  /** Stream that emits for changes in `@Input` properties. */\n  readonly _inputChanges = new Subject<SimpleChanges>();\n\n  /** Optionally defined accordion the expansion panel belongs to. */\n  accordion: MatAccordion;\n\n  /** Content that will be rendered lazily. */\n  @ContentChild(MatExpansionPanelContent) _lazyContent: MatExpansionPanelContent;\n\n  /** Portal holding the user's content. */\n  _portal: TemplatePortal;\n\n  /** ID for the associated header element. Used for a11y labelling. */\n  _headerId = `mat-expansion-panel-header-${uniqueId++}`;\n\n  constructor(@Optional() @Host() accordion: MatAccordion,\n              _changeDetectorRef: ChangeDetectorRef,\n              _uniqueSelectionDispatcher: UniqueSelectionDispatcher,\n              private _viewContainerRef: ViewContainerRef) {\n    super(accordion, _changeDetectorRef, _uniqueSelectionDispatcher);\n    this.accordion = accordion;\n  }\n\n  /** Whether the expansion indicator should be hidden. */\n  _getHideToggle(): boolean {\n    if (this.accordion) {\n      return this.accordion.hideToggle;\n    }\n    return this.hideToggle;\n  }\n\n  /** Determines whether the expansion panel should have spacing between it and its siblings. */\n  _hasSpacing(): boolean {\n    if (this.accordion) {\n      return (this.expanded ? this.accordion.displayMode : this._getExpandedState()) === 'default';\n    }\n    return false;\n  }\n\n  /** Gets the expanded state string. */\n  _getExpandedState(): MatExpansionPanelState {\n    return this.expanded ? 'expanded' : 'collapsed';\n  }\n\n  ngAfterContentInit() {\n    if (this._lazyContent) {\n      // Render the content as soon as the panel becomes open.\n      this.opened.pipe(\n        startWith(null!),\n        filter(() => this.expanded && !this._portal),\n        take(1)\n      ).subscribe(() => {\n        this._portal = new TemplatePortal(this._lazyContent._template, this._viewContainerRef);\n      });\n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    this._inputChanges.next(changes);\n  }\n\n  ngOnDestroy() {\n    super.ngOnDestroy();\n    this._inputChanges.complete();\n  }\n\n  _bodyAnimation(event: AnimationEvent) {\n    const classList = event.element.classList;\n    const cssClass = 'mat-expanded';\n    const {phaseName, toState} = event;\n\n    // Toggle the body's `overflow: hidden` class when closing starts or when expansion ends in\n    // order to prevent the cases where switching too early would cause the animation to jump.\n    // Note that we do it directly on the DOM element to avoid the slight delay that comes\n    // with doing it via change detection.\n    if (phaseName === 'done' && toState === 'expanded') {\n      classList.add(cssClass);\n    } else if (phaseName === 'start' && toState === 'collapsed') {\n      classList.remove(cssClass);\n    }\n  }\n}\n\n@Directive({\n  selector: 'mat-action-row',\n  host: {\n    class: 'mat-action-row'\n  }\n})\nexport class MatExpansionPanelActionRow {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor} from '@angular/cdk/a11y';\nimport {ENTER, SPACE} from '@angular/cdk/keycodes';\nimport {filter} from 'rxjs/operators/filter';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  Directive,\n  ElementRef,\n  Host,\n  Input,\n  OnDestroy,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {merge} from 'rxjs/observable/merge';\nimport {Subscription} from 'rxjs/Subscription';\nimport {MatExpansionPanel} from './expansion-panel';\nimport {matExpansionAnimations} from './expansion-animations';\n\n\n/**\n * `<mat-expansion-panel-header>`\n *\n * This component corresponds to the header element of an `<mat-expansion-panel>`.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-expansion-panel-header',\n  styleUrls: ['./expansion-panel-header.css'],\n  templateUrl: './expansion-panel-header.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  animations: [\n    matExpansionAnimations.indicatorRotate,\n    matExpansionAnimations.expansionHeaderHeight\n  ],\n  host: {\n    'class': 'mat-expansion-panel-header',\n    'role': 'button',\n    '[attr.id]': 'panel._headerId',\n    '[attr.tabindex]': 'panel.disabled ? -1 : 0',\n    '[attr.aria-controls]': '_getPanelId()',\n    '[attr.aria-expanded]': '_isExpanded()',\n    '[attr.aria-disabled]': 'panel.disabled',\n    '[class.mat-expanded]': '_isExpanded()',\n    '(click)': '_toggle()',\n    '(keydown)': '_keydown($event)',\n    '[@expansionHeight]': `{\n        value: _getExpandedState(),\n        params: {\n          collapsedHeight: collapsedHeight,\n          expandedHeight: expandedHeight\n        }\n    }`,\n  },\n})\nexport class MatExpansionPanelHeader implements OnDestroy {\n  private _parentChangeSubscription = Subscription.EMPTY;\n\n  constructor(\n    @Host() public panel: MatExpansionPanel,\n    private _element: ElementRef,\n    private _focusMonitor: FocusMonitor,\n    private _changeDetectorRef: ChangeDetectorRef) {\n\n    // Since the toggle state depends on an @Input on the panel, we\n    // need to  subscribe and trigger change detection manually.\n    this._parentChangeSubscription = merge(\n      panel.opened,\n      panel.closed,\n      panel._inputChanges.pipe(filter(changes => !!(changes.hideToggle || changes.disabled)))\n    )\n    .subscribe(() => this._changeDetectorRef.markForCheck());\n\n    _focusMonitor.monitor(_element.nativeElement);\n  }\n\n  /** Height of the header while the panel is expanded. */\n  @Input() expandedHeight: string;\n\n  /** Height of the header while the panel is collapsed. */\n  @Input() collapsedHeight: string;\n\n  /** Toggles the expanded state of the panel. */\n  _toggle(): void {\n    this.panel.toggle();\n  }\n\n  /** Gets whether the panel is expanded. */\n  _isExpanded(): boolean {\n    return this.panel.expanded;\n  }\n\n  /** Gets the expanded state string of the panel. */\n  _getExpandedState(): string {\n    return this.panel._getExpandedState();\n  }\n\n  /** Gets the panel id. */\n  _getPanelId(): string {\n    return this.panel.id;\n  }\n\n  /** Gets whether the expand indicator should be shown. */\n  _showToggle(): boolean {\n    return !this.panel.hideToggle && !this.panel.disabled;\n  }\n\n  /** Handle keydown event calling to toggle() if appropriate. */\n  _keydown(event: KeyboardEvent) {\n    switch (event.keyCode) {\n      // Toggle for space and enter keys.\n      case SPACE:\n      case ENTER:\n        event.preventDefault();\n        this._toggle();\n        break;\n      default:\n        return;\n    }\n  }\n\n  ngOnDestroy() {\n    this._parentChangeSubscription.unsubscribe();\n    this._focusMonitor.stopMonitoring(this._element.nativeElement);\n  }\n}\n\n/**\n * `<mat-panel-description>`\n *\n * This direction is to be used inside of the MatExpansionPanelHeader component.\n */\n@Directive({\n  selector: 'mat-panel-description',\n  host : {\n    class: 'mat-expansion-panel-header-description'\n  }\n})\nexport class MatExpansionPanelDescription {}\n\n/**\n * `<mat-panel-title>`\n *\n * This direction is to be used inside of the MatExpansionPanelHeader component.\n */\n@Directive({\n  selector: 'mat-panel-title',\n  host : {\n    class: 'mat-expansion-panel-header-title'\n  }\n})\nexport class MatExpansionPanelTitle {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {UNIQUE_SELECTION_DISPATCHER_PROVIDER} from '@angular/cdk/collections';\nimport {CdkAccordionModule} from '@angular/cdk/accordion';\nimport {A11yModule} from '@angular/cdk/a11y';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {MatAccordion} from './accordion';\nimport {MatExpansionPanelContent} from './expansion-panel-content';\nimport {\n  MatExpansionPanel,\n  MatExpansionPanelActionRow\n} from './expansion-panel';\nimport {\n  MatExpansionPanelDescription,\n  MatExpansionPanelHeader,\n  MatExpansionPanelTitle,\n} from './expansion-panel-header';\n\n\n@NgModule({\n  imports: [CommonModule, A11yModule, CdkAccordionModule, PortalModule],\n  exports: [\n    MatAccordion,\n    MatExpansionPanel,\n    MatExpansionPanelActionRow,\n    MatExpansionPanelHeader,\n    MatExpansionPanelTitle,\n    MatExpansionPanelDescription,\n    MatExpansionPanelContent,\n  ],\n  declarations: [\n    MatAccordion,\n    MatExpansionPanel,\n    MatExpansionPanelActionRow,\n    MatExpansionPanelHeader,\n    MatExpansionPanelTitle,\n    MatExpansionPanelDescription,\n    MatExpansionPanelContent,\n  ],\n  providers: [UNIQUE_SELECTION_DISPATCHER_PROVIDER]\n})\nexport class MatExpansionModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ViewEncapsulation,\n  ElementRef,\n  Input,\n  ContentChildren,\n  QueryList,\n  AfterContentInit,\n  Directive,\n  ChangeDetectionStrategy,\n} from '@angular/core';\nimport {MatLine, MatLineSetter} from '@angular/material/core';\nimport {coerceToNumber} from './grid-list-measure';\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-grid-tile',\n  exportAs: 'matGridTile',\n  host: {\n    'class': 'mat-grid-tile',\n  },\n  templateUrl: 'grid-tile.html',\n  styleUrls: ['grid-list.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatGridTile {\n  _rowspan: number = 1;\n  _colspan: number = 1;\n\n  constructor(private _element: ElementRef) {}\n\n  /** Amount of rows that the grid tile takes up. */\n  @Input()\n  get rowspan(): number { return this._rowspan; }\n  set rowspan(value: number) { this._rowspan = coerceToNumber(value); }\n\n  /** Amount of columns that the grid tile takes up. */\n  @Input()\n  get colspan(): number { return this._colspan; }\n  set colspan(value: number) { this._colspan = coerceToNumber(value); }\n\n  /**\n   * Sets the style of the grid-tile element.  Needs to be set manually to avoid\n   * \"Changed after checked\" errors that would occur with HostBinding.\n   */\n  _setStyle(property: string, value: any): void {\n    this._element.nativeElement.style[property] = value;\n  }\n}\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-grid-tile-header, mat-grid-tile-footer',\n  templateUrl: 'grid-tile-text.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatGridTileText implements AfterContentInit {\n  /**\n   *  Helper that watches the number of lines in a text area and sets\n   * a class on the host element that matches the line count.\n   */\n  _lineSetter: MatLineSetter;\n  @ContentChildren(MatLine) _lines: QueryList<MatLine>;\n\n  constructor(private _element: ElementRef) {}\n\n  ngAfterContentInit() {\n    this._lineSetter = new MatLineSetter(this._lines, this._element);\n  }\n}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-grid-avatar], [matGridAvatar]',\n  host: {'class': 'mat-grid-avatar'}\n})\nexport class MatGridAvatarCssMatStyler {}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-grid-tile-header',\n  host: {'class': 'mat-grid-tile-header'}\n})\nexport class MatGridTileHeaderCssMatStyler {}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-grid-tile-footer',\n  host: {'class': 'mat-grid-tile-footer'}\n})\nexport class MatGridTileFooterCssMatStyler {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {QueryList} from '@angular/core';\nimport {MatGridTile} from './grid-tile';\n\n/**\n * Class for determining, from a list of tiles, the (row, col) position of each of those tiles\n * in the grid. This is necessary (rather than just rendering the tiles in normal document flow)\n * because the tiles can have a rowspan.\n *\n * The positioning algorithm greedily places each tile as soon as it encounters a gap in the grid\n * large enough to accommodate it so that the tiles still render in the same order in which they\n * are given.\n *\n * The basis of the algorithm is the use of an array to track the already placed tiles. Each\n * element of the array corresponds to a column, and the value indicates how many cells in that\n * column are already occupied; zero indicates an empty cell. Moving \"down\" to the next row\n * decrements each value in the tracking array (indicating that the column is one cell closer to\n * being free).\n *\n * @docs-private\n */\nexport class TileCoordinator {\n  /** Tracking array (see class description). */\n  tracker: number[];\n\n  /** Index at which the search for the next gap will start. */\n  columnIndex: number = 0;\n\n  /** The current row index. */\n  rowIndex: number = 0;\n\n  /** Gets the total number of rows occupied by tiles */\n  get rowCount(): number { return this.rowIndex + 1; }\n\n  /**\n   * Gets the total span of rows occupied by tiles.\n   * Ex: A list with 1 row that contains a tile with rowspan 2 will have a total rowspan of 2.\n   */\n  get rowspan() {\n    let lastRowMax = Math.max(...this.tracker);\n    // if any of the tiles has a rowspan that pushes it beyond the total row count,\n    // add the difference to the rowcount\n    return lastRowMax > 1 ? this.rowCount + lastRowMax - 1 : this.rowCount;\n  }\n\n  /** The computed (row, col) position of each tile (the output). */\n  positions: TilePosition[];\n\n  constructor(numColumns: number, tiles: QueryList<MatGridTile>) {\n    this.tracker = new Array(numColumns);\n    this.tracker.fill(0, 0, this.tracker.length);\n\n    this.positions = tiles.map(tile => this._trackTile(tile));\n  }\n\n  /** Calculates the row and col position of a tile. */\n  private _trackTile(tile: MatGridTile): TilePosition {\n    // Find a gap large enough for this tile.\n    let gapStartIndex = this._findMatchingGap(tile.colspan);\n\n    // Place tile in the resulting gap.\n    this._markTilePosition(gapStartIndex, tile);\n\n    // The next time we look for a gap, the search will start at columnIndex, which should be\n    // immediately after the tile that has just been placed.\n    this.columnIndex = gapStartIndex + tile.colspan;\n\n    return new TilePosition(this.rowIndex, gapStartIndex);\n  }\n\n  /** Finds the next available space large enough to fit the tile. */\n  private _findMatchingGap(tileCols: number): number {\n    if (tileCols > this.tracker.length) {\n      throw Error(`mat-grid-list: tile with colspan ${tileCols} is wider than ` +\n                      `grid with cols=\"${this.tracker.length}\".`);\n    }\n\n    // Start index is inclusive, end index is exclusive.\n    let gapStartIndex = -1;\n    let gapEndIndex = -1;\n\n    // Look for a gap large enough to fit the given tile. Empty spaces are marked with a zero.\n    do {\n      // If we've reached the end of the row, go to the next row.\n      if (this.columnIndex + tileCols > this.tracker.length) {\n        this._nextRow();\n        continue;\n      }\n\n      gapStartIndex = this.tracker.indexOf(0, this.columnIndex);\n\n      // If there are no more empty spaces in this row at all, move on to the next row.\n      if (gapStartIndex == -1) {\n        this._nextRow();\n        continue;\n      }\n\n      gapEndIndex = this._findGapEndIndex(gapStartIndex);\n\n      // If a gap large enough isn't found, we want to start looking immediately after the current\n      // gap on the next iteration.\n      this.columnIndex = gapStartIndex + 1;\n\n      // Continue iterating until we find a gap wide enough for this tile.\n    } while (gapEndIndex - gapStartIndex < tileCols);\n\n    // If we still didn't manage to find a gap, ensure that the index is\n    // at least zero so the tile doesn't get pulled out of the grid.\n    return Math.max(gapStartIndex, 0);\n  }\n\n  /** Move \"down\" to the next row. */\n  private _nextRow(): void {\n    this.columnIndex = 0;\n    this.rowIndex++;\n\n    // Decrement all spaces by one to reflect moving down one row.\n    for (let i = 0; i < this.tracker.length; i++) {\n      this.tracker[i] = Math.max(0, this.tracker[i] - 1);\n    }\n  }\n\n  /**\n   * Finds the end index (exclusive) of a gap given the index from which to start looking.\n   * The gap ends when a non-zero value is found.\n   */\n  private _findGapEndIndex(gapStartIndex: number): number {\n    for (let i = gapStartIndex + 1; i < this.tracker.length; i++) {\n      if (this.tracker[i] != 0) {\n        return i;\n      }\n    }\n\n    // The gap ends with the end of the row.\n    return this.tracker.length;\n  }\n\n  /** Update the tile tracker to account for the given tile in the given space. */\n  private _markTilePosition(start: number, tile: MatGridTile): void {\n    for (let i = 0; i < tile.colspan; i++) {\n      this.tracker[start + i] = tile.rowspan;\n    }\n  }\n}\n\n/**\n * Simple data structure for tile position (row, col).\n * @docs-private\n */\nexport class TilePosition {\n  constructor(public row: number, public col: number) {}\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {MatGridList} from './grid-list';\nimport {MatGridTile} from './grid-tile';\nimport {TileCoordinator} from './tile-coordinator';\n\n/**\n * Sets the style properties for an individual tile, given the position calculated by the\n * Tile Coordinator.\n * @docs-private\n */\nexport abstract class TileStyler {\n  _gutterSize: string;\n  _rows: number = 0;\n  _rowspan: number = 0;\n  _cols: number;\n  _direction: string;\n\n  /**\n   * Adds grid-list layout info once it is available. Cannot be processed in the constructor\n   * because these properties haven't been calculated by that point.\n   *\n   * @param gutterSize Size of the grid's gutter.\n   * @param tracker Instance of the TileCoordinator.\n   * @param cols Amount of columns in the grid.\n   * @param direction Layout direction of the grid.\n   */\n  init(gutterSize: string, tracker: TileCoordinator, cols: number, direction: string): void {\n    this._gutterSize = normalizeUnits(gutterSize);\n    this._rows = tracker.rowCount;\n    this._rowspan = tracker.rowspan;\n    this._cols = cols;\n    this._direction = direction;\n  }\n\n  /**\n   * Computes the amount of space a single 1x1 tile would take up (width or height).\n   * Used as a basis for other calculations.\n   * @param sizePercent Percent of the total grid-list space that one 1x1 tile would take up.\n   * @param gutterFraction Fraction of the gutter size taken up by one 1x1 tile.\n   * @return The size of a 1x1 tile as an expression that can be evaluated via CSS calc().\n   */\n  getBaseTileSize(sizePercent: number, gutterFraction: number): string {\n    // Take the base size percent (as would be if evenly dividing the size between cells),\n    // and then subtracting the size of one gutter. However, since there are no gutters on the\n    // edges, each tile only uses a fraction (gutterShare = numGutters / numCells) of the gutter\n    // size. (Imagine having one gutter per tile, and then breaking up the extra gutter on the\n    // edge evenly among the cells).\n    return `(${sizePercent}% - (${this._gutterSize} * ${gutterFraction}))`;\n  }\n\n\n  /**\n   * Gets The horizontal or vertical position of a tile, e.g., the 'top' or 'left' property value.\n   * @param offset Number of tiles that have already been rendered in the row/column.\n   * @param baseSize Base size of a 1x1 tile (as computed in getBaseTileSize).\n   * @return Position of the tile as a CSS calc() expression.\n   */\n  getTilePosition(baseSize: string, offset: number): string {\n    // The position comes the size of a 1x1 tile plus gutter for each previous tile in the\n    // row/column (offset).\n    return offset === 0 ? '0' : calc(`(${baseSize} + ${this._gutterSize}) * ${offset}`);\n  }\n\n\n  /**\n   * Gets the actual size of a tile, e.g., width or height, taking rowspan or colspan into account.\n   * @param baseSize Base size of a 1x1 tile (as computed in getBaseTileSize).\n   * @param span The tile's rowspan or colspan.\n   * @return Size of the tile as a CSS calc() expression.\n   */\n  getTileSize(baseSize: string, span: number): string {\n    return `(${baseSize} * ${span}) + (${span - 1} * ${this._gutterSize})`;\n  }\n\n\n  /**\n   * Sets the style properties to be applied to a tile for the given row and column index.\n   * @param tile Tile to which to apply the styling.\n   * @param rowIndex Index of the tile's row.\n   * @param colIndex Index of the tile's column.\n   */\n  setStyle(tile: MatGridTile, rowIndex: number, colIndex: number): void {\n    // Percent of the available horizontal space that one column takes up.\n    let percentWidthPerTile = 100 / this._cols;\n\n    // Fraction of the vertical gutter size that each column takes up.\n    // For example, if there are 5 columns, each column uses 4/5 = 0.8 times the gutter width.\n    let gutterWidthFractionPerTile = (this._cols - 1) / this._cols;\n\n    this.setColStyles(tile, colIndex, percentWidthPerTile, gutterWidthFractionPerTile);\n    this.setRowStyles(tile, rowIndex, percentWidthPerTile, gutterWidthFractionPerTile);\n  }\n\n  /** Sets the horizontal placement of the tile in the list. */\n  setColStyles(tile: MatGridTile, colIndex: number, percentWidth: number,\n               gutterWidth: number) {\n    // Base horizontal size of a column.\n    let baseTileWidth = this.getBaseTileSize(percentWidth, gutterWidth);\n\n    // The width and horizontal position of each tile is always calculated the same way, but the\n    // height and vertical position depends on the rowMode.\n    let side = this._direction === 'rtl' ? 'right' : 'left';\n    tile._setStyle(side, this.getTilePosition(baseTileWidth, colIndex));\n    tile._setStyle('width', calc(this.getTileSize(baseTileWidth, tile.colspan)));\n  }\n\n  /**\n   * Calculates the total size taken up by gutters across one axis of a list.\n   */\n  getGutterSpan(): string {\n    return `${this._gutterSize} * (${this._rowspan} - 1)`;\n  }\n\n  /**\n   * Calculates the total size taken up by tiles across one axis of a list.\n   * @param tileHeight Height of the tile.\n   */\n  getTileSpan(tileHeight: string): string {\n    return `${this._rowspan} * ${this.getTileSize(tileHeight, 1)}`;\n  }\n\n  /**\n   * Sets the vertical placement of the tile in the list.\n   * This method will be implemented by each type of TileStyler.\n   * @docs-private\n   */\n  abstract setRowStyles(tile: MatGridTile, rowIndex: number, percentWidth: number,\n                        gutterWidth: number);\n\n  /**\n   * Calculates the computed height and returns the correct style property to set.\n   * This method can be implemented by each type of TileStyler.\n   * @docs-private\n   */\n  getComputedHeight(): [string, string] | null { return null; }\n\n  /**\n   * Called when the tile styler is swapped out with a different one. To be used for cleanup.\n   * @param list Grid list that the styler was attached to.\n   * @docs-private\n   */\n  abstract reset(list: MatGridList);\n}\n\n\n/**\n * This type of styler is instantiated when the user passes in a fixed row height.\n * Example `<mat-grid-list cols=\"3\" rowHeight=\"100px\">`\n * @docs-private\n */\nexport class FixedTileStyler extends TileStyler {\n\n  constructor(public fixedRowHeight: string) { super(); }\n\n  init(gutterSize: string, tracker: TileCoordinator, cols: number, direction: string) {\n    super.init(gutterSize, tracker, cols, direction);\n    this.fixedRowHeight = normalizeUnits(this.fixedRowHeight);\n  }\n\n  setRowStyles(tile: MatGridTile, rowIndex: number): void {\n    tile._setStyle('top', this.getTilePosition(this.fixedRowHeight, rowIndex));\n    tile._setStyle('height', calc(this.getTileSize(this.fixedRowHeight, tile.rowspan)));\n  }\n\n  getComputedHeight(): [string, string] {\n    return [\n      'height', calc(`${this.getTileSpan(this.fixedRowHeight)} + ${this.getGutterSpan()}`)\n    ];\n  }\n\n  reset(list: MatGridList) {\n    list._setListStyle(['height', null]);\n\n    list._tiles.forEach(tile => {\n      tile._setStyle('top', null);\n      tile._setStyle('height', null);\n    });\n  }\n}\n\n\n/**\n * This type of styler is instantiated when the user passes in a width:height ratio\n * for the row height.  Example `<mat-grid-list cols=\"3\" rowHeight=\"3:1\">`\n * @docs-private\n */\nexport class RatioTileStyler extends TileStyler {\n\n  /** Ratio width:height given by user to determine row height. */\n  rowHeightRatio: number;\n  baseTileHeight: string;\n\n  constructor(value: string) {\n    super();\n    this._parseRatio(value);\n  }\n\n  setRowStyles(tile: MatGridTile, rowIndex: number, percentWidth: number,\n               gutterWidth: number): void {\n    let percentHeightPerTile = percentWidth / this.rowHeightRatio;\n    this.baseTileHeight = this.getBaseTileSize(percentHeightPerTile, gutterWidth);\n\n    // Use padding-top and margin-top to maintain the given aspect ratio, as\n    // a percentage-based value for these properties is applied versus the *width* of the\n    // containing block. See http://www.w3.org/TR/CSS2/box.html#margin-properties\n    tile._setStyle('marginTop', this.getTilePosition(this.baseTileHeight, rowIndex));\n    tile._setStyle('paddingTop', calc(this.getTileSize(this.baseTileHeight, tile.rowspan)));\n  }\n\n  getComputedHeight(): [string, string] {\n    return [\n      'paddingBottom', calc(`${this.getTileSpan(this.baseTileHeight)} + ${this.getGutterSpan()}`)\n    ];\n  }\n\n  reset(list: MatGridList) {\n    list._setListStyle(['paddingBottom', null]);\n\n    list._tiles.forEach(tile => {\n      tile._setStyle('marginTop', null);\n      tile._setStyle('paddingTop', null);\n    });\n  }\n\n  private _parseRatio(value: string): void {\n    const ratioParts = value.split(':');\n\n    if (ratioParts.length !== 2) {\n      throw Error(`mat-grid-list: invalid ratio given for row-height: \"${value}\"`);\n    }\n\n    this.rowHeightRatio = parseFloat(ratioParts[0]) / parseFloat(ratioParts[1]);\n  }\n}\n\n/**\n * This type of styler is instantiated when the user selects a \"fit\" row height mode.\n * In other words, the row height will reflect the total height of the container divided\n * by the number of rows.  Example `<mat-grid-list cols=\"3\" rowHeight=\"fit\">`\n *\n * @docs-private\n */\nexport class FitTileStyler extends TileStyler {\n\n  setRowStyles(tile: MatGridTile, rowIndex: number): void {\n    // Percent of the available vertical space that one row takes up.\n    let percentHeightPerTile = 100 / this._rowspan;\n\n    // Fraction of the horizontal gutter size that each column takes up.\n    let gutterHeightPerTile = (this._rows - 1) / this._rows;\n\n    // Base vertical size of a column.\n    let baseTileHeight = this.getBaseTileSize(percentHeightPerTile, gutterHeightPerTile);\n\n    tile._setStyle('top', this.getTilePosition(baseTileHeight, rowIndex));\n    tile._setStyle('height', calc(this.getTileSize(baseTileHeight, tile.rowspan)));\n  }\n\n  reset(list: MatGridList) {\n    list._tiles.forEach(tile => {\n      tile._setStyle('top', null);\n      tile._setStyle('height', null);\n    });\n  }\n}\n\n\n/** Wraps a CSS string in a calc function */\nfunction calc(exp: string): string { return `calc(${exp})`; }\n\n\n/** Appends pixels to a CSS string if no units are given. */\nfunction normalizeUnits(value: string): string {\n  return (value.match(/px|em|rem/)) ? value : value + 'px';\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ViewEncapsulation,\n  AfterContentChecked,\n  OnInit,\n  Input,\n  ContentChildren,\n  QueryList,\n  ElementRef,\n  Optional,\n  ChangeDetectionStrategy,\n} from '@angular/core';\nimport {MatGridTile} from './grid-tile';\nimport {TileCoordinator} from './tile-coordinator';\nimport {TileStyler, FitTileStyler, RatioTileStyler, FixedTileStyler} from './tile-styler';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {\n  coerceToString,\n  coerceToNumber,\n} from './grid-list-measure';\n\n\n// TODO(kara): Conditional (responsive) column count / row size.\n// TODO(kara): Re-layout on window resize / media change (debounced).\n// TODO(kara): gridTileHeader and gridTileFooter.\n\nconst MAT_FIT_MODE = 'fit';\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-grid-list',\n  exportAs: 'matGridList',\n  templateUrl: 'grid-list.html',\n  styleUrls: ['grid-list.css'],\n  host: {\n    'class': 'mat-grid-list',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatGridList implements OnInit, AfterContentChecked {\n  /** Number of columns being rendered. */\n  private _cols: number;\n\n  /**\n   * Row height value passed in by user. This can be one of three types:\n   * - Number value (ex: \"100px\"):  sets a fixed row height to that value\n   * - Ratio value (ex: \"4:3\"): sets the row height based on width:height ratio\n   * - \"Fit\" mode (ex: \"fit\"): sets the row height to total height divided by number of rows\n   */\n  private _rowHeight: string;\n\n  /** The amount of space between tiles. This will be something like '5px' or '2em'. */\n  private _gutter: string = '1px';\n\n  /** Sets position and size styles for a tile */\n  private _tileStyler: TileStyler;\n\n  /** Query list of tiles that are being rendered. */\n  @ContentChildren(MatGridTile) _tiles: QueryList<MatGridTile>;\n\n  constructor(private _element: ElementRef, @Optional() private _dir: Directionality) {}\n\n  /** Amount of columns in the grid list. */\n  @Input()\n  get cols(): number { return this._cols; }\n  set cols(value: number) { this._cols = coerceToNumber(value); }\n\n  /** Size of the grid list's gutter in pixels. */\n  @Input()\n  get gutterSize(): string { return this._gutter; }\n  set gutterSize(value: string) { this._gutter = coerceToString(value); }\n\n  /** Set internal representation of row height from the user-provided value. */\n  @Input()\n  set rowHeight(value: string | number) {\n    const newValue = coerceToString(value);\n\n    if (newValue !== this._rowHeight) {\n      this._rowHeight = newValue;\n      this._setTileStyler(this._rowHeight);\n    }\n  }\n\n  ngOnInit() {\n    this._checkCols();\n    this._checkRowHeight();\n  }\n\n  /**\n   * The layout calculation is fairly cheap if nothing changes, so there's little cost\n   * to run it frequently.\n   */\n  ngAfterContentChecked() {\n    this._layoutTiles();\n  }\n\n  /** Throw a friendly error if cols property is missing */\n  private _checkCols() {\n    if (!this.cols) {\n      throw Error(`mat-grid-list: must pass in number of columns. ` +\n                  `Example: <mat-grid-list cols=\"3\">`);\n    }\n  }\n\n  /** Default to equal width:height if rowHeight property is missing */\n  private _checkRowHeight(): void {\n    if (!this._rowHeight) {\n      this._setTileStyler('1:1');\n    }\n  }\n\n  /** Creates correct Tile Styler subtype based on rowHeight passed in by user */\n  private _setTileStyler(rowHeight: string): void {\n    if (this._tileStyler) {\n      this._tileStyler.reset(this);\n    }\n\n    if (rowHeight === MAT_FIT_MODE) {\n      this._tileStyler = new FitTileStyler();\n    } else if (rowHeight && rowHeight.indexOf(':') > -1) {\n      this._tileStyler = new RatioTileStyler(rowHeight);\n    } else {\n      this._tileStyler = new FixedTileStyler(rowHeight);\n    }\n  }\n\n  /** Computes and applies the size and position for all children grid tiles. */\n  private _layoutTiles(): void {\n    const tracker = new TileCoordinator(this.cols, this._tiles);\n    const direction = this._dir ? this._dir.value : 'ltr';\n    this._tileStyler.init(this.gutterSize, tracker, this.cols, direction);\n\n    this._tiles.forEach((tile, index) => {\n      const pos = tracker.positions[index];\n      this._tileStyler.setStyle(tile, pos.row, pos.col);\n    });\n\n    this._setListStyle(this._tileStyler.getComputedHeight());\n  }\n\n  /** Sets style on the main grid-list element, given the style name and value. */\n  _setListStyle(style: [string, string | null] | null): void {\n    if (style) {\n      this._element.nativeElement.style[style[0]] = style[1];\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatLineModule, MatCommonModule} from '@angular/material/core';\nimport {\n  MatGridTile, MatGridTileText, MatGridTileFooterCssMatStyler,\n  MatGridTileHeaderCssMatStyler, MatGridAvatarCssMatStyler\n} from './grid-tile';\nimport {MatGridList} from './grid-list';\n\n\n@NgModule({\n  imports: [MatLineModule, MatCommonModule],\n  exports: [\n    MatGridList,\n    MatGridTile,\n    MatGridTileText,\n    MatLineModule,\n    MatCommonModule,\n    MatGridTileHeaderCssMatStyler,\n    MatGridTileFooterCssMatStyler,\n    MatGridAvatarCssMatStyler\n  ],\n  declarations: [\n    MatGridList,\n    MatGridTile,\n    MatGridTileText,\n    MatGridTileHeaderCssMatStyler,\n    MatGridTileFooterCssMatStyler,\n    MatGridAvatarCssMatStyler\n  ],\n})\nexport class MatGridListModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  DOWN_ARROW,\n  END,\n  ENTER,\n  HOME,\n  LEFT_ARROW,\n  PAGE_DOWN,\n  PAGE_UP,\n  RIGHT_ARROW,\n  UP_ARROW,\n} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  EventEmitter,\n  Input,\n  Optional,\n  Output,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {DateAdapter} from '@angular/material/core';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {MatCalendarBody, MatCalendarCell} from './calendar-body';\nimport {createMissingDateImplError} from './datepicker-errors';\n\nexport const yearsPerPage = 24;\n\nexport const yearsPerRow = 4;\n\n\n/**\n * An internal component used to display a year selector in the datepicker.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-multi-year-view',\n  templateUrl: 'multi-year-view.html',\n  exportAs: 'matMultiYearView',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class MatMultiYearView<D> implements AfterContentInit {\n  /** The date to display in this multi-year view (everything other than the year is ignored). */\n  @Input()\n  get activeDate(): D { return this._activeDate; }\n  set activeDate(value: D) {\n    let oldActiveDate = this._activeDate;\n    const validDate =\n        this._getValidDateOrNull(this._dateAdapter.deserialize(value)) || this._dateAdapter.today();\n    this._activeDate = this._dateAdapter.clampDate(validDate, this.minDate, this.maxDate);\n    if (Math.floor(this._dateAdapter.getYear(oldActiveDate) / yearsPerPage) !=\n        Math.floor(this._dateAdapter.getYear(this._activeDate) / yearsPerPage)) {\n      this._init();\n    }\n  }\n  private _activeDate: D;\n\n  /** The currently selected date. */\n  @Input()\n  get selected(): D | null { return this._selected; }\n  set selected(value: D | null) {\n    this._selected = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n    this._selectedYear = this._selected && this._dateAdapter.getYear(this._selected);\n  }\n  private _selected: D | null;\n\n  /** The minimum selectable date. */\n  @Input()\n  get minDate(): D | null { return this._minDate; }\n  set minDate(value: D | null) {\n    this._minDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _minDate: D | null;\n\n  /** The maximum selectable date. */\n  @Input()\n  get maxDate(): D | null { return this._maxDate; }\n  set maxDate(value: D | null) {\n    this._maxDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _maxDate: D | null;\n\n  /** A function used to filter which dates are selectable. */\n  @Input() dateFilter: (date: D) => boolean;\n\n  /** Emits when a new year is selected. */\n  @Output() readonly selectedChange: EventEmitter<D> = new EventEmitter<D>();\n\n  /** Emits the selected year. This doesn't imply a change on the selected date */\n  @Output() readonly yearSelected: EventEmitter<D> = new EventEmitter<D>();\n\n  /** The body of calendar table */\n  @ViewChild(MatCalendarBody) _matCalendarBody;\n\n  /** Grid of calendar cells representing the currently displayed years. */\n  _years: MatCalendarCell[][];\n\n  /** The year that today falls on. */\n  _todayYear: number;\n\n  /** The year of the selected date. Null if the selected date is null. */\n  _selectedYear: number | null;\n\n  constructor(private _changeDetectorRef: ChangeDetectorRef,\n              @Optional() public _dateAdapter: DateAdapter<D>,\n              @Optional() private _dir?: Directionality) {\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n\n    this._activeDate = this._dateAdapter.today();\n  }\n\n  ngAfterContentInit() {\n    this._init();\n    this._focusActiveCell();\n  }\n\n  /** Initializes this multi-year view. */\n  _init() {\n    this._todayYear = this._dateAdapter.getYear(this._dateAdapter.today());\n    let activeYear = this._dateAdapter.getYear(this._activeDate);\n    let activeOffset = activeYear % yearsPerPage;\n    this._years = [];\n    for (let i = 0, row: number[] = []; i < yearsPerPage; i++) {\n      row.push(activeYear - activeOffset + i);\n      if (row.length == yearsPerRow) {\n        this._years.push(row.map(year => this._createCellForYear(year)));\n        row = [];\n      }\n    }\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Handles when a new year is selected. */\n  _yearSelected(year: number) {\n    this.yearSelected.emit(this._dateAdapter.createDate(year, 0, 1));\n    let month = this._dateAdapter.getMonth(this.activeDate);\n    let daysInMonth =\n        this._dateAdapter.getNumDaysInMonth(this._dateAdapter.createDate(year, month, 1));\n    this.selectedChange.emit(this._dateAdapter.createDate(year, month,\n        Math.min(this._dateAdapter.getDate(this.activeDate), daysInMonth)));\n  }\n\n  /** Handles keydown events on the calendar body when calendar is in multi-year view. */\n  _handleCalendarBodyKeydown(event: KeyboardEvent): void {\n    // TODO(mmalerba): We currently allow keyboard navigation to disabled dates, but just prevent\n    // disabled ones from being selected. This may not be ideal, we should look into whether\n    // navigation should skip over disabled dates, and if so, how to implement that efficiently.\n\n    const isRtl = this._isRtl();\n\n    switch (event.keyCode) {\n      case LEFT_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate, isRtl ? 1 : -1);\n        break;\n      case RIGHT_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate, isRtl ? -1 : 1);\n        break;\n      case UP_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate, -yearsPerRow);\n        break;\n      case DOWN_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate, yearsPerRow);\n        break;\n      case HOME:\n        this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate,\n            -this._dateAdapter.getYear(this._activeDate) % yearsPerPage);\n        break;\n      case END:\n        this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate,\n            yearsPerPage - this._dateAdapter.getYear(this._activeDate) % yearsPerPage - 1);\n        break;\n      case PAGE_UP:\n        this.activeDate =\n            this._dateAdapter.addCalendarYears(\n                this._activeDate, event.altKey ? -yearsPerPage * 10 : -yearsPerPage);\n        break;\n      case PAGE_DOWN:\n        this.activeDate =\n            this._dateAdapter.addCalendarYears(\n                this._activeDate, event.altKey ? yearsPerPage * 10 : yearsPerPage);\n        break;\n      case ENTER:\n        this._yearSelected(this._dateAdapter.getYear(this._activeDate));\n        break;\n      default:\n        // Don't prevent default or focus active cell on keys that we don't explicitly handle.\n        return;\n    }\n\n    this._focusActiveCell();\n    // Prevent unexpected default actions such as form submission.\n    event.preventDefault();\n  }\n\n  _getActiveCell(): number {\n    return this._dateAdapter.getYear(this.activeDate) % yearsPerPage;\n  }\n\n  /** Focuses the active cell after the microtask queue is empty. */\n  private _focusActiveCell() {\n    this._matCalendarBody._focusActiveCell();\n  }\n\n  /** Creates an MatCalendarCell for the given year. */\n  private _createCellForYear(year: number) {\n    let yearName = this._dateAdapter.getYearName(this._dateAdapter.createDate(year, 0, 1));\n    return new MatCalendarCell(year, yearName, yearName, this._shouldEnableYear(year));\n  }\n\n  /** Whether the given year is enabled. */\n  private _shouldEnableYear(year: number) {\n    // disable if the year is greater than maxDate lower than minDate\n    if (year === undefined || year === null ||\n        (this.maxDate && year > this._dateAdapter.getYear(this.maxDate)) ||\n        (this.minDate && year < this._dateAdapter.getYear(this.minDate))) {\n      return false;\n    }\n\n    // enable if it reaches here and there's no filter defined\n    if (!this.dateFilter) {\n      return true;\n    }\n\n    const firstOfYear = this._dateAdapter.createDate(year, 0, 1);\n\n    // If any date in the year is enabled count the year as enabled.\n    for (let date = firstOfYear; this._dateAdapter.getYear(date) == year;\n      date = this._dateAdapter.addCalendarDays(date, 1)) {\n      if (this.dateFilter(date)) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n\n  /** Determines whether the user has the RTL layout direction. */\n  private _isRtl() {\n    return this._dir && this._dir.value === 'rtl';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  DOWN_ARROW,\n  END,\n  ENTER,\n  HOME,\n  LEFT_ARROW,\n  PAGE_DOWN,\n  PAGE_UP,\n  RIGHT_ARROW,\n  UP_ARROW,\n} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  EventEmitter,\n  Inject,\n  Input,\n  Optional,\n  Output,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {DateAdapter, MAT_DATE_FORMATS, MatDateFormats} from '@angular/material/core';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {MatCalendarBody, MatCalendarCell} from './calendar-body';\nimport {createMissingDateImplError} from './datepicker-errors';\n\n/**\n * An internal component used to display a single year in the datepicker.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-year-view',\n  templateUrl: 'year-view.html',\n  exportAs: 'matYearView',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class MatYearView<D> implements AfterContentInit {\n  /** The date to display in this year view (everything other than the year is ignored). */\n  @Input()\n  get activeDate(): D { return this._activeDate; }\n  set activeDate(value: D) {\n    let oldActiveDate = this._activeDate;\n    const validDate =\n        this._getValidDateOrNull(this._dateAdapter.deserialize(value)) || this._dateAdapter.today();\n    this._activeDate = this._dateAdapter.clampDate(validDate, this.minDate, this.maxDate);\n    if (this._dateAdapter.getYear(oldActiveDate) !== this._dateAdapter.getYear(this._activeDate)) {\n      this._init();\n    }\n  }\n  private _activeDate: D;\n\n  /** The currently selected date. */\n  @Input()\n  get selected(): D | null { return this._selected; }\n  set selected(value: D | null) {\n    this._selected = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n    this._selectedMonth = this._getMonthInCurrentYear(this._selected);\n  }\n  private _selected: D | null;\n\n  /** The minimum selectable date. */\n  @Input()\n  get minDate(): D | null { return this._minDate; }\n  set minDate(value: D | null) {\n    this._minDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _minDate: D | null;\n\n  /** The maximum selectable date. */\n  @Input()\n  get maxDate(): D | null { return this._maxDate; }\n  set maxDate(value: D | null) {\n    this._maxDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _maxDate: D | null;\n\n  /** A function used to filter which dates are selectable. */\n  @Input() dateFilter: (date: D) => boolean;\n\n  /** Emits when a new month is selected. */\n  @Output() readonly selectedChange: EventEmitter<D> = new EventEmitter<D>();\n\n  /** Emits the selected month. This doesn't imply a change on the selected date */\n  @Output() readonly monthSelected: EventEmitter<D> = new EventEmitter<D>();\n\n  /** The body of calendar table */\n  @ViewChild(MatCalendarBody) _matCalendarBody;\n\n  /** Grid of calendar cells representing the months of the year. */\n  _months: MatCalendarCell[][];\n\n  /** The label for this year (e.g. \"2017\"). */\n  _yearLabel: string;\n\n  /** The month in this year that today falls on. Null if today is in a different year. */\n  _todayMonth: number | null;\n\n  /**\n   * The month in this year that the selected Date falls on.\n   * Null if the selected Date is in a different year.\n   */\n  _selectedMonth: number | null;\n\n  constructor(private _changeDetectorRef: ChangeDetectorRef,\n              @Optional() @Inject(MAT_DATE_FORMATS) private _dateFormats: MatDateFormats,\n              @Optional() public _dateAdapter: DateAdapter<D>,\n              @Optional() private _dir?: Directionality) {\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n    if (!this._dateFormats) {\n      throw createMissingDateImplError('MAT_DATE_FORMATS');\n    }\n\n    this._activeDate = this._dateAdapter.today();\n  }\n\n  ngAfterContentInit() {\n    this._init();\n    this._focusActiveCell();\n  }\n\n  /** Handles when a new month is selected. */\n  _monthSelected(month: number) {\n    const normalizedDate =\n          this._dateAdapter.createDate(this._dateAdapter.getYear(this.activeDate), month, 1);\n\n    this.monthSelected.emit(normalizedDate);\n\n    const daysInMonth = this._dateAdapter.getNumDaysInMonth(normalizedDate);\n\n    this.selectedChange.emit(this._dateAdapter.createDate(\n        this._dateAdapter.getYear(this.activeDate), month,\n        Math.min(this._dateAdapter.getDate(this.activeDate), daysInMonth)));\n  }\n\n  /** Handles keydown events on the calendar body when calendar is in year view. */\n  _handleCalendarBodyKeydown(event: KeyboardEvent): void {\n    // TODO(mmalerba): We currently allow keyboard navigation to disabled dates, but just prevent\n    // disabled ones from being selected. This may not be ideal, we should look into whether\n    // navigation should skip over disabled dates, and if so, how to implement that efficiently.\n\n    const isRtl = this._isRtl();\n\n    switch (event.keyCode) {\n      case LEFT_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate, isRtl ? 1 : -1);\n        break;\n      case RIGHT_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate, isRtl ? -1 : 1);\n        break;\n      case UP_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate, -4);\n        break;\n      case DOWN_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate, 4);\n        break;\n      case HOME:\n        this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate,\n            -this._dateAdapter.getMonth(this._activeDate));\n        break;\n      case END:\n        this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate,\n            11 - this._dateAdapter.getMonth(this._activeDate));\n        break;\n      case PAGE_UP:\n        this.activeDate =\n            this._dateAdapter.addCalendarYears(this._activeDate, event.altKey ? -10 : -1);\n        break;\n      case PAGE_DOWN:\n        this.activeDate =\n            this._dateAdapter.addCalendarYears(this._activeDate, event.altKey ? 10 : 1);\n        break;\n      case ENTER:\n        this._monthSelected(this._dateAdapter.getMonth(this._activeDate));\n        break;\n      default:\n        // Don't prevent default or focus active cell on keys that we don't explicitly handle.\n        return;\n    }\n\n    this._focusActiveCell();\n    // Prevent unexpected default actions such as form submission.\n    event.preventDefault();\n  }\n\n  /** Initializes this year view. */\n  _init() {\n    this._selectedMonth = this._getMonthInCurrentYear(this.selected);\n    this._todayMonth = this._getMonthInCurrentYear(this._dateAdapter.today());\n    this._yearLabel = this._dateAdapter.getYearName(this.activeDate);\n\n    let monthNames = this._dateAdapter.getMonthNames('short');\n    // First row of months only contains 5 elements so we can fit the year label on the same row.\n    this._months = [[0, 1, 2, 3], [4, 5, 6, 7], [8, 9, 10, 11]].map(row => row.map(\n        month => this._createCellForMonth(month, monthNames[month])));\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Focuses the active cell after the microtask queue is empty. */\n  private _focusActiveCell() {\n    this._matCalendarBody._focusActiveCell();\n  }\n\n  /**\n   * Gets the month in this year that the given Date falls on.\n   * Returns null if the given Date is in another year.\n   */\n  private _getMonthInCurrentYear(date: D | null) {\n    return date && this._dateAdapter.getYear(date) == this._dateAdapter.getYear(this.activeDate) ?\n        this._dateAdapter.getMonth(date) : null;\n  }\n\n  /** Creates an MatCalendarCell for the given month. */\n  private _createCellForMonth(month: number, monthName: string) {\n    let ariaLabel = this._dateAdapter.format(\n        this._dateAdapter.createDate(this._dateAdapter.getYear(this.activeDate), month, 1),\n        this._dateFormats.display.monthYearA11yLabel);\n    return new MatCalendarCell(\n        month, monthName.toLocaleUpperCase(), ariaLabel, this._shouldEnableMonth(month));\n  }\n\n  /** Whether the given month is enabled. */\n  private _shouldEnableMonth(month: number) {\n\n    const activeYear = this._dateAdapter.getYear(this.activeDate);\n\n    if (month === undefined || month === null ||\n        this._isYearAndMonthAfterMaxDate(activeYear, month) ||\n        this._isYearAndMonthBeforeMinDate(activeYear, month)) {\n      return false;\n    }\n\n    if (!this.dateFilter) {\n      return true;\n    }\n\n    const firstOfMonth = this._dateAdapter.createDate(activeYear, month, 1);\n\n    // If any date in the month is enabled count the month as enabled.\n    for (let date = firstOfMonth; this._dateAdapter.getMonth(date) == month;\n         date = this._dateAdapter.addCalendarDays(date, 1)) {\n      if (this.dateFilter(date)) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  /**\n   * Tests whether the combination month/year is after this.maxDate, considering\n   * just the month and year of this.maxDate\n   */\n  private _isYearAndMonthAfterMaxDate(year: number, month: number) {\n    if (this.maxDate) {\n      const maxYear = this._dateAdapter.getYear(this.maxDate);\n      const maxMonth = this._dateAdapter.getMonth(this.maxDate);\n\n      return year > maxYear || (year === maxYear && month > maxMonth);\n    }\n\n    return false;\n  }\n\n  /**\n   * Tests whether the combination month/year is before this.minDate, considering\n   * just the month and year of this.minDate\n   */\n  private _isYearAndMonthBeforeMinDate(year: number, month: number) {\n    if (this.minDate) {\n      const minYear = this._dateAdapter.getYear(this.minDate);\n      const minMonth = this._dateAdapter.getMonth(this.minDate);\n\n      return year < minYear || (year === minYear && month < minMonth);\n    }\n\n    return false;\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n\n  /** Determines whether the user has the RTL layout direction. */\n  private _isRtl() {\n    return this._dir && this._dir.value === 'rtl';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  EventEmitter,\n  Inject,\n  Input,\n  OnChanges,\n  OnDestroy,\n  Optional,\n  Output,\n  SimpleChanges,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {DateAdapter, MAT_DATE_FORMATS, MatDateFormats} from '@angular/material/core';\nimport {Subscription} from 'rxjs/Subscription';\nimport {createMissingDateImplError} from './datepicker-errors';\nimport {MatDatepickerIntl} from './datepicker-intl';\nimport {MatMonthView} from './month-view';\nimport {MatMultiYearView, yearsPerPage} from './multi-year-view';\nimport {MatYearView} from './year-view';\n\n\n/**\n * A calendar that is used as part of the datepicker.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-calendar',\n  templateUrl: 'calendar.html',\n  styleUrls: ['calendar.css'],\n  host: {\n    'class': 'mat-calendar',\n  },\n  exportAs: 'matCalendar',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatCalendar<D> implements AfterContentInit, OnDestroy, OnChanges {\n  private _intlChanges: Subscription;\n\n  /** A date representing the period (month or year) to start the calendar in. */\n  @Input()\n  get startAt(): D | null { return this._startAt; }\n  set startAt(value: D | null) {\n    this._startAt = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _startAt: D | null;\n\n  /** Whether the calendar should be started in month or year view. */\n  @Input() startView: 'month' | 'year' | 'multi-year' = 'month';\n\n  /** The currently selected date. */\n  @Input()\n  get selected(): D | null { return this._selected; }\n  set selected(value: D | null) {\n    this._selected = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _selected: D | null;\n\n  /** The minimum selectable date. */\n  @Input()\n  get minDate(): D | null { return this._minDate; }\n  set minDate(value: D | null) {\n    this._minDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _minDate: D | null;\n\n  /** The maximum selectable date. */\n  @Input()\n  get maxDate(): D | null { return this._maxDate; }\n  set maxDate(value: D | null) {\n    this._maxDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _maxDate: D | null;\n\n  /** A function used to filter which dates are selectable. */\n  @Input() dateFilter: (date: D) => boolean;\n\n  /** Emits when the currently selected date changes. */\n  @Output() readonly selectedChange: EventEmitter<D> = new EventEmitter<D>();\n\n  /**\n   * Emits the year chosen in multiyear view.\n   * This doesn't imply a change on the selected date.\n   */\n  @Output() readonly yearSelected: EventEmitter<D> = new EventEmitter<D>();\n\n  /**\n   * Emits the month chosen in year view.\n   * This doesn't imply a change on the selected date.\n   */\n  @Output() readonly monthSelected: EventEmitter<D> = new EventEmitter<D>();\n\n  /** Emits when any date is selected. */\n  @Output() readonly _userSelection: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Reference to the current month view component. */\n  @ViewChild(MatMonthView) monthView: MatMonthView<D>;\n\n  /** Reference to the current year view component. */\n  @ViewChild(MatYearView) yearView: MatYearView<D>;\n\n  /** Reference to the current multi-year view component. */\n  @ViewChild(MatMultiYearView) multiYearView: MatMultiYearView<D>;\n\n  /**\n   * The current active date. This determines which time period is shown and which date is\n   * highlighted when using keyboard navigation.\n   */\n  get _activeDate(): D { return this._clampedActiveDate; }\n  set _activeDate(value: D) {\n    this._clampedActiveDate = this._dateAdapter.clampDate(value, this.minDate, this.maxDate);\n  }\n  private _clampedActiveDate: D;\n\n  /** Whether the calendar is in month view. */\n  _currentView: 'month' | 'year' | 'multi-year';\n\n  /** The label for the current calendar view. */\n  get _periodButtonText(): string {\n    if (this._currentView == 'month') {\n      return this._dateAdapter.format(this._activeDate, this._dateFormats.display.monthYearLabel)\n          .toLocaleUpperCase();\n    }\n    if (this._currentView == 'year') {\n      return this._dateAdapter.getYearName(this._activeDate);\n    }\n    const activeYear = this._dateAdapter.getYear(this._activeDate);\n    const firstYearInView = this._dateAdapter.getYearName(\n        this._dateAdapter.createDate(activeYear - activeYear % 24, 0, 1));\n    const lastYearInView = this._dateAdapter.getYearName(\n        this._dateAdapter.createDate(activeYear + yearsPerPage - 1 - activeYear % 24, 0, 1));\n    return `${firstYearInView} \\u2013 ${lastYearInView}`;\n  }\n\n  get _periodButtonLabel(): string {\n    return this._currentView == 'month' ?\n        this._intl.switchToMultiYearViewLabel : this._intl.switchToMonthViewLabel;\n  }\n\n  /** The label for the the previous button. */\n  get _prevButtonLabel(): string {\n    return {\n      'month': this._intl.prevMonthLabel,\n      'year': this._intl.prevYearLabel,\n      'multi-year': this._intl.prevMultiYearLabel\n    }[this._currentView];\n  }\n\n  /** The label for the the next button. */\n  get _nextButtonLabel(): string {\n    return {\n      'month': this._intl.nextMonthLabel,\n      'year': this._intl.nextYearLabel,\n      'multi-year': this._intl.nextMultiYearLabel\n    }[this._currentView];\n  }\n\n  constructor(private _intl: MatDatepickerIntl,\n              @Optional() private _dateAdapter: DateAdapter<D>,\n              @Optional() @Inject(MAT_DATE_FORMATS) private _dateFormats: MatDateFormats,\n              changeDetectorRef: ChangeDetectorRef) {\n\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n\n    if (!this._dateFormats) {\n      throw createMissingDateImplError('MAT_DATE_FORMATS');\n    }\n\n    this._intlChanges = _intl.changes.subscribe(() => changeDetectorRef.markForCheck());\n  }\n\n  ngAfterContentInit() {\n    this._activeDate = this.startAt || this._dateAdapter.today();\n    this._currentView = this.startView;\n  }\n\n  ngOnDestroy() {\n    this._intlChanges.unsubscribe();\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    const change = changes.minDate || changes.maxDate || changes.dateFilter;\n\n    if (change && !change.firstChange) {\n      const view = this.monthView || this.yearView || this.multiYearView;\n\n      if (view) {\n        view._init();\n      }\n    }\n  }\n\n  /** Handles date selection in the month view. */\n  _dateSelected(date: D): void {\n    if (!this._dateAdapter.sameDate(date, this.selected)) {\n      this.selectedChange.emit(date);\n    }\n  }\n\n  /** Handles year selection in the multiyear view. */\n  _yearSelectedInMultiYearView(normalizedYear: D) {\n    this.yearSelected.emit(normalizedYear);\n  }\n\n  /** Handles month selection in the year view. */\n  _monthSelectedInYearView(normalizedMonth: D) {\n    this.monthSelected.emit(normalizedMonth);\n  }\n\n  _userSelected(): void {\n    this._userSelection.emit();\n  }\n\n  /** Handles year/month selection in the multi-year/year views. */\n  _goToDateInView(date: D, view: 'month' | 'year' | 'multi-year'): void {\n    this._activeDate = date;\n    this._currentView = view;\n  }\n\n  /** Handles user clicks on the period label. */\n  _currentPeriodClicked(): void {\n    this._currentView = this._currentView == 'month' ? 'multi-year' : 'month';\n  }\n\n  /** Handles user clicks on the previous button. */\n  _previousClicked(): void {\n    this._activeDate = this._currentView == 'month' ?\n        this._dateAdapter.addCalendarMonths(this._activeDate, -1) :\n        this._dateAdapter.addCalendarYears(\n            this._activeDate, this._currentView == 'year' ? -1 : -yearsPerPage);\n  }\n\n  /** Handles user clicks on the next button. */\n  _nextClicked(): void {\n    this._activeDate = this._currentView == 'month' ?\n        this._dateAdapter.addCalendarMonths(this._activeDate, 1) :\n        this._dateAdapter.addCalendarYears(\n            this._activeDate, this._currentView == 'year' ? 1 : yearsPerPage);\n  }\n\n  /** Whether the previous period button is enabled. */\n  _previousEnabled(): boolean {\n    if (!this.minDate) {\n      return true;\n    }\n    return !this.minDate || !this._isSameView(this._activeDate, this.minDate);\n  }\n\n  /** Whether the next period button is enabled. */\n  _nextEnabled(): boolean {\n    return !this.maxDate || !this._isSameView(this._activeDate, this.maxDate);\n  }\n\n  /** Whether the two dates represent the same view in the current view mode (month or year). */\n  private _isSameView(date1: D, date2: D): boolean {\n    if (this._currentView == 'month') {\n      return this._dateAdapter.getYear(date1) == this._dateAdapter.getYear(date2) &&\n          this._dateAdapter.getMonth(date1) == this._dateAdapter.getMonth(date2);\n    }\n    if (this._currentView == 'year') {\n      return this._dateAdapter.getYear(date1) == this._dateAdapter.getYear(date2);\n    }\n    // Otherwise we are in 'multi-year' view.\n    return Math.floor(this._dateAdapter.getYear(date1) / yearsPerPage) ==\n        Math.floor(this._dateAdapter.getYear(date2) / yearsPerPage);\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/** Animations used by the Material datepicker. */\nexport const matDatepickerAnimations: {\n  readonly transformPanel: AnimationTriggerMetadata;\n  readonly fadeInCalendar: AnimationTriggerMetadata;\n} = {\n  /** Transforms the height of the datepicker's calendar. */\n  transformPanel: trigger('transformPanel', [\n    state('void', style({opacity: 0, transform: 'scale(1, 0)'})),\n    state('enter', style({opacity: 1, transform: 'scale(1, 1)'})),\n    transition('void => enter', animate('400ms cubic-bezier(0.25, 0.8, 0.25, 1)')),\n    transition('* => void', animate('100ms linear', style({opacity: 0})))\n  ]),\n\n  /** Fades in the content of the calendar. */\n  fadeInCalendar: trigger('fadeInCalendar', [\n    state('void', style({opacity: 0})),\n    state('enter', style({opacity: 1})),\n    transition('void => *', animate('400ms 100ms cubic-bezier(0.55, 0, 0.55, 0.2)'))\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {ESCAPE} from '@angular/cdk/keycodes';\nimport {\n  Overlay,\n  OverlayConfig,\n  OverlayRef,\n  PositionStrategy,\n  RepositionScrollStrategy,\n  ScrollStrategy,\n  FlexibleConnectedPositionStrategy,\n} from '@angular/cdk/overlay';\nimport {ComponentPortal} from '@angular/cdk/portal';\nimport {take} from 'rxjs/operators/take';\nimport {filter} from 'rxjs/operators/filter';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  Component,\n  ComponentRef,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  Output,\n  ViewChild,\n  ViewContainerRef,\n  ViewEncapsulation,\n  ChangeDetectorRef,\n  OnInit,\n} from '@angular/core';\nimport {CanColor, DateAdapter, mixinColor, ThemePalette} from '@angular/material/core';\nimport {MatDialog, MatDialogRef} from '@angular/material/dialog';\nimport {DOCUMENT} from '@angular/common';\nimport {Subject} from 'rxjs/Subject';\nimport {Subscription} from 'rxjs/Subscription';\nimport {merge} from 'rxjs/observable/merge';\nimport {createMissingDateImplError} from './datepicker-errors';\nimport {MatDatepickerInput} from './datepicker-input';\nimport {MatCalendar} from './calendar';\nimport {matDatepickerAnimations} from './datepicker-animations';\n\n/** Used to generate a unique ID for each datepicker instance. */\nlet datepickerUid = 0;\n\n/** Injection token that determines the scroll handling while the calendar is open. */\nexport const MAT_DATEPICKER_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mat-datepicker-scroll-strategy');\n\n/** @docs-private */\nexport function MAT_DATEPICKER_SCROLL_STRATEGY_PROVIDER_FACTORY(overlay: Overlay):\n    () => RepositionScrollStrategy {\n  return () => overlay.scrollStrategies.reposition();\n}\n\n/** @docs-private */\nexport const MAT_DATEPICKER_SCROLL_STRATEGY_PROVIDER = {\n  provide: MAT_DATEPICKER_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_DATEPICKER_SCROLL_STRATEGY_PROVIDER_FACTORY,\n};\n\n// Boilerplate for applying mixins to MatDatepickerContent.\n/** @docs-private */\nexport class MatDatepickerContentBase {\n  constructor(public _elementRef: ElementRef) { }\n}\nexport const _MatDatepickerContentMixinBase = mixinColor(MatDatepickerContentBase);\n\n/**\n * Component used as the content for the datepicker dialog and popup. We use this instead of using\n * MatCalendar directly as the content so we can control the initial focus. This also gives us a\n * place to put additional features of the popup that are not part of the calendar itself in the\n * future. (e.g. confirmation buttons).\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-datepicker-content',\n  templateUrl: 'datepicker-content.html',\n  styleUrls: ['datepicker-content.css'],\n  host: {\n    'class': 'mat-datepicker-content',\n    '[@transformPanel]': '\"enter\"',\n    '[class.mat-datepicker-content-touch]': 'datepicker.touchUi',\n    '[class.mat-datepicker-content-above]': '_isAbove',\n  },\n  animations: [\n    matDatepickerAnimations.transformPanel,\n    matDatepickerAnimations.fadeInCalendar,\n  ],\n  exportAs: 'matDatepickerContent',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  inputs: ['color'],\n})\nexport class MatDatepickerContent<D> extends _MatDatepickerContentMixinBase\n  implements AfterContentInit, CanColor, OnInit, OnDestroy {\n\n  /** Subscription to changes in the overlay's position. */\n  private _positionChange: Subscription|null;\n\n  /** Reference to the internal calendar component. */\n  @ViewChild(MatCalendar) _calendar: MatCalendar<D>;\n\n  /** Reference to the datepicker that created the overlay. */\n  datepicker: MatDatepicker<D>;\n\n  /** Whether the datepicker is above or below the input. */\n  _isAbove: boolean;\n\n  constructor(\n    elementRef: ElementRef,\n    private _changeDetectorRef: ChangeDetectorRef,\n    private _ngZone: NgZone) {\n    super(elementRef);\n  }\n\n  ngOnInit() {\n    if (!this.datepicker._popupRef || this._positionChange) {\n      return;\n    }\n\n    const positionStrategy =\n      this.datepicker._popupRef.getConfig().positionStrategy! as FlexibleConnectedPositionStrategy;\n\n    this._positionChange = positionStrategy.positionChanges.subscribe(change => {\n      const isAbove = change.connectionPair.overlayY === 'bottom';\n\n      if (isAbove !== this._isAbove) {\n        this._ngZone.run(() => {\n          this._isAbove = isAbove;\n          this._changeDetectorRef.markForCheck();\n        });\n      }\n    });\n  }\n\n  ngAfterContentInit() {\n    this._focusActiveCell();\n  }\n\n  /** Focuses the active cell after the microtask queue is empty. */\n  private _focusActiveCell() {\n    this._ngZone.runOutsideAngular(() => {\n      this._ngZone.onStable.asObservable().pipe(take(1)).subscribe(() => {\n        this._elementRef.nativeElement.querySelector('.mat-calendar-body-active').focus();\n      });\n    });\n  }\n\n  ngOnDestroy() {\n    if (this._positionChange) {\n      this._positionChange.unsubscribe();\n      this._positionChange = null;\n    }\n  }\n}\n\n\n// TODO(mmalerba): We use a component instead of a directive here so the user can use implicit\n// template reference variables (e.g. #d vs #d=\"matDatepicker\"). We can change this to a directive\n// if angular adds support for `exportAs: '$implicit'` on directives.\n/** Component responsible for managing the datepicker popup/dialog. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-datepicker',\n  template: '',\n  exportAs: 'matDatepicker',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatDatepicker<D> implements OnDestroy, CanColor {\n  /** The date to open the calendar to initially. */\n  @Input()\n  get startAt(): D | null {\n    // If an explicit startAt is set we start there, otherwise we start at whatever the currently\n    // selected value is.\n    return this._startAt || (this._datepickerInput ? this._datepickerInput.value : null);\n  }\n  set startAt(value: D | null) {\n    this._startAt = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _startAt: D | null;\n\n  /** The view that the calendar should start in. */\n  @Input() startView: 'month' | 'year' = 'month';\n\n  /** Color palette to use on the datepicker's calendar. */\n  @Input()\n  get color(): ThemePalette {\n    return this._color ||\n        (this._datepickerInput ? this._datepickerInput._getThemePalette() : undefined);\n  }\n  set color(value: ThemePalette) {\n    this._color = value;\n  }\n  _color: ThemePalette;\n\n  /**\n   * Whether the calendar UI is in touch mode. In touch mode the calendar opens in a dialog rather\n   * than a popup and elements have more padding to allow for bigger touch targets.\n   */\n  @Input()\n  get touchUi(): boolean { return this._touchUi; }\n  set touchUi(value: boolean) {\n    this._touchUi = coerceBooleanProperty(value);\n  }\n  private _touchUi = false;\n\n  /** Whether the datepicker pop-up should be disabled. */\n  @Input()\n  get disabled(): boolean {\n    return this._disabled === undefined && this._datepickerInput ?\n        this._datepickerInput.disabled : !!this._disabled;\n  }\n  set disabled(value: boolean) {\n    const newValue = coerceBooleanProperty(value);\n\n    if (newValue !== this._disabled) {\n      this._disabled = newValue;\n      this._disabledChange.next(newValue);\n    }\n  }\n  private _disabled: boolean;\n\n  /**\n   * Emits new selected date when selected date changes.\n   * @deprecated Switch to the `dateChange` and `dateInput` binding on the input element.\n   * @deletion-target 6.0.0\n   */\n  @Output() readonly selectedChanged: EventEmitter<D> = new EventEmitter<D>();\n\n  /**\n   * Emits selected year in multiyear view.\n   * This doesn't imply a change on the selected date.\n   */\n  @Output() readonly yearSelected: EventEmitter<D> = new EventEmitter<D>();\n\n  /**\n   * Emits selected month in year view.\n   * This doesn't imply a change on the selected date.\n   */\n  @Output() readonly monthSelected: EventEmitter<D> = new EventEmitter<D>();\n\n  /** Classes to be passed to the date picker panel. Supports the same syntax as `ngClass`. */\n  @Input() panelClass: string | string[];\n\n  /** Emits when the datepicker has been opened. */\n  @Output('opened') openedStream: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Emits when the datepicker has been closed. */\n  @Output('closed') closedStream: EventEmitter<void> = new EventEmitter<void>();\n\n\n  /** Whether the calendar is open. */\n  @Input()\n  get opened(): boolean { return this._opened; }\n  set opened(value: boolean) { value ? this.open() : this.close(); }\n  private _opened = false;\n\n  /** The id for the datepicker calendar. */\n  id: string = `mat-datepicker-${datepickerUid++}`;\n\n  /** The currently selected date. */\n  get _selected(): D | null { return this._validSelected; }\n  set _selected(value: D | null) { this._validSelected = value; }\n  private _validSelected: D | null = null;\n\n  /** The minimum selectable date. */\n  get _minDate(): D | null {\n    return this._datepickerInput && this._datepickerInput.min;\n  }\n\n  /** The maximum selectable date. */\n  get _maxDate(): D | null {\n    return this._datepickerInput && this._datepickerInput.max;\n  }\n\n  get _dateFilter(): (date: D | null) => boolean {\n    return this._datepickerInput && this._datepickerInput._dateFilter;\n  }\n\n  /** A reference to the overlay when the calendar is opened as a popup. */\n  _popupRef: OverlayRef;\n\n  /** A reference to the dialog when the calendar is opened as a dialog. */\n  private _dialogRef: MatDialogRef<MatDatepickerContent<D>> | null;\n\n  /** A portal containing the calendar for this datepicker. */\n  private _calendarPortal: ComponentPortal<MatDatepickerContent<D>>;\n\n  /** Reference to the component instantiated in popup mode. */\n  private _popupComponentRef: ComponentRef<MatDatepickerContent<D>> | null;\n\n  /** The element that was focused before the datepicker was opened. */\n  private _focusedElementBeforeOpen: HTMLElement | null = null;\n\n  /** Subscription to value changes in the associated input element. */\n  private _inputSubscription = Subscription.EMPTY;\n\n  /** The input element this datepicker is associated with. */\n  _datepickerInput: MatDatepickerInput<D>;\n\n  /** Emits when the datepicker is disabled. */\n  readonly _disabledChange = new Subject<boolean>();\n\n  constructor(private _dialog: MatDialog,\n              private _overlay: Overlay,\n              private _ngZone: NgZone,\n              private _viewContainerRef: ViewContainerRef,\n              @Inject(MAT_DATEPICKER_SCROLL_STRATEGY) private _scrollStrategy,\n              @Optional() private _dateAdapter: DateAdapter<D>,\n              @Optional() private _dir: Directionality,\n              @Optional() @Inject(DOCUMENT) private _document: any) {\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n  }\n\n  ngOnDestroy() {\n    this.close();\n    this._inputSubscription.unsubscribe();\n    this._disabledChange.complete();\n\n    if (this._popupRef) {\n      this._popupRef.dispose();\n      this._popupComponentRef = null;\n    }\n  }\n\n  /** Selects the given date */\n  _select(date: D): void {\n    let oldValue = this._selected;\n    this._selected = date;\n    if (!this._dateAdapter.sameDate(oldValue, this._selected)) {\n      this.selectedChanged.emit(date);\n    }\n  }\n\n  /** Emits the selected year in multiyear view */\n  _selectYear(normalizedYear: D): void {\n    this.yearSelected.emit(normalizedYear);\n  }\n\n  /** Emits selected month in year view */\n  _selectMonth(normalizedMonth: D): void {\n    this.monthSelected.emit(normalizedMonth);\n  }\n\n  /**\n   * Register an input with this datepicker.\n   * @param input The datepicker input to register with this datepicker.\n   */\n  _registerInput(input: MatDatepickerInput<D>): void {\n    if (this._datepickerInput) {\n      throw Error('A MatDatepicker can only be associated with a single input.');\n    }\n    this._datepickerInput = input;\n    this._inputSubscription =\n        this._datepickerInput._valueChange.subscribe((value: D | null) => this._selected = value);\n  }\n\n  /** Open the calendar. */\n  open(): void {\n    if (this._opened || this.disabled) {\n      return;\n    }\n    if (!this._datepickerInput) {\n      throw Error('Attempted to open an MatDatepicker with no associated input.');\n    }\n    if (this._document) {\n      this._focusedElementBeforeOpen = this._document.activeElement;\n    }\n\n    this.touchUi ? this._openAsDialog() : this._openAsPopup();\n    this._opened = true;\n    this.openedStream.emit();\n  }\n\n  /** Close the calendar. */\n  close(): void {\n    if (!this._opened) {\n      return;\n    }\n    if (this._popupRef && this._popupRef.hasAttached()) {\n      this._popupRef.detach();\n    }\n    if (this._dialogRef) {\n      this._dialogRef.close();\n      this._dialogRef = null;\n    }\n    if (this._calendarPortal && this._calendarPortal.isAttached) {\n      this._calendarPortal.detach();\n    }\n\n    const completeClose = () => {\n      // The `_opened` could've been reset already if\n      // we got two events in quick succession.\n      if (this._opened) {\n        this._opened = false;\n        this.closedStream.emit();\n        this._focusedElementBeforeOpen = null;\n      }\n    };\n\n    if (this._focusedElementBeforeOpen &&\n      typeof this._focusedElementBeforeOpen.focus === 'function') {\n      // Because IE moves focus asynchronously, we can't count on it being restored before we've\n      // marked the datepicker as closed. If the event fires out of sequence and the element that\n      // we're refocusing opens the datepicker on focus, the user could be stuck with not being\n      // able to close the calendar at all. We work around it by making the logic, that marks\n      // the datepicker as closed, async as well.\n      this._focusedElementBeforeOpen.focus();\n      setTimeout(completeClose);\n    } else {\n      completeClose();\n    }\n  }\n\n  /** Open the calendar as a dialog. */\n  private _openAsDialog(): void {\n    this._dialogRef = this._dialog.open<MatDatepickerContent<D>>(MatDatepickerContent, {\n      direction: this._dir ? this._dir.value : 'ltr',\n      viewContainerRef: this._viewContainerRef,\n      panelClass: 'mat-datepicker-dialog',\n    });\n    if (this._dialogRef) {\n      this._dialogRef.afterClosed().subscribe(() => this.close());\n      this._dialogRef.componentInstance.datepicker = this;\n    }\n    this._setColor();\n  }\n\n  /** Open the calendar as a popup. */\n  private _openAsPopup(): void {\n    if (!this._calendarPortal) {\n      this._calendarPortal = new ComponentPortal<MatDatepickerContent<D>>(MatDatepickerContent,\n                                                                          this._viewContainerRef);\n    }\n\n    if (!this._popupRef) {\n      this._createPopup();\n    }\n\n    if (!this._popupRef.hasAttached()) {\n      this._popupComponentRef = this._popupRef.attach(this._calendarPortal);\n      this._popupComponentRef.instance.datepicker = this;\n      this._setColor();\n\n      // Update the position once the calendar has rendered.\n      this._ngZone.onStable.asObservable().pipe(take(1)).subscribe(() => {\n        this._popupRef.updatePosition();\n      });\n    }\n  }\n\n  /** Create the popup. */\n  private _createPopup(): void {\n    const overlayConfig = new OverlayConfig({\n      positionStrategy: this._createPopupPositionStrategy(),\n      hasBackdrop: true,\n      backdropClass: 'mat-overlay-transparent-backdrop',\n      direction: this._dir ? this._dir.value : 'ltr',\n      scrollStrategy: this._scrollStrategy(),\n      panelClass: 'mat-datepicker-popup',\n    });\n\n    this._popupRef = this._overlay.create(overlayConfig);\n\n    merge(\n      this._popupRef.backdropClick(),\n      this._popupRef.detachments(),\n      this._popupRef.keydownEvents().pipe(filter(event => event.keyCode === ESCAPE))\n    ).subscribe(() => this.close());\n  }\n\n  /** Create the popup PositionStrategy. */\n  private _createPopupPositionStrategy(): PositionStrategy {\n    return this._overlay.position()\n      .flexibleConnectedTo(this._datepickerInput.getPopupConnectionElementRef())\n      .withFlexibleHeight(false)\n      .withFlexibleWidth(false)\n      .withViewportMargin(8)\n      .withPositions([\n        {\n          originX: 'start',\n          originY: 'bottom',\n          overlayX: 'start',\n          overlayY: 'top'\n        },\n        {\n          originX: 'start',\n          originY: 'top',\n          overlayX: 'start',\n          overlayY: 'bottom'\n        },\n        {\n          originX: 'end',\n          originY: 'bottom',\n          overlayX: 'end',\n          overlayY: 'top'\n        },\n        {\n          originX: 'end',\n          originY: 'top',\n          overlayX: 'end',\n          overlayY: 'bottom'\n        }\n      ]);\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n\n  /** Passes the current theme color along to the calendar overlay. */\n  private _setColor(): void {\n    const color = this.color;\n    if (this._popupComponentRef) {\n      this._popupComponentRef.instance.color = color;\n    }\n    if (this._dialogRef) {\n      this._dialogRef.componentInstance.color = color;\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ComponentRef,\n  ElementRef,\n  EmbeddedViewRef,\n  EventEmitter,\n  Inject,\n  Optional,\n  ChangeDetectorRef,\n  ViewChild,\n  ViewEncapsulation,\n  ChangeDetectionStrategy,\n} from '@angular/core';\nimport {DOCUMENT} from '@angular/common';\nimport {AnimationEvent} from '@angular/animations';\nimport {matDialogAnimations} from './dialog-animations';\nimport {\n  BasePortalOutlet,\n  ComponentPortal,\n  CdkPortalOutlet,\n  TemplatePortal\n} from '@angular/cdk/portal';\nimport {FocusTrap, FocusTrapFactory} from '@angular/cdk/a11y';\nimport {MatDialogConfig} from './dialog-config';\n\n\n/**\n * Throws an exception for the case when a ComponentPortal is\n * attached to a DomPortalOutlet without an origin.\n * @docs-private\n */\nexport function throwMatDialogContentAlreadyAttachedError() {\n  throw Error('Attempting to attach dialog content after content is already attached');\n}\n\n/**\n * Internal component that wraps user-provided dialog content.\n * Animation is based on https://material.io/guidelines/motion/choreography.html.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-dialog-container',\n  templateUrl: 'dialog-container.html',\n  styleUrls: ['dialog.css'],\n  encapsulation: ViewEncapsulation.None,\n  // Using OnPush for dialogs caused some G3 sync issues. Disabled until we can track them down.\n  // tslint:disable-next-line:validate-decorators\n  changeDetection: ChangeDetectionStrategy.Default,\n  animations: [matDialogAnimations.slideDialog],\n  host: {\n    'class': 'mat-dialog-container',\n    'tabindex': '-1',\n    '[attr.id]': '_id',\n    '[attr.role]': '_config?.role',\n    '[attr.aria-labelledby]': '_config?.ariaLabel ? null : _ariaLabelledBy',\n    '[attr.aria-label]': '_config?.ariaLabel',\n    '[attr.aria-describedby]': '_config?.ariaDescribedBy || null',\n    '[@slideDialog]': '_state',\n    '(@slideDialog.start)': '_onAnimationStart($event)',\n    '(@slideDialog.done)': '_onAnimationDone($event)',\n  },\n})\nexport class MatDialogContainer extends BasePortalOutlet {\n  /** The portal outlet inside of this container into which the dialog content will be loaded. */\n  @ViewChild(CdkPortalOutlet) _portalOutlet: CdkPortalOutlet;\n\n  /** The class that traps and manages focus within the dialog. */\n  private _focusTrap: FocusTrap;\n\n  /** Element that was focused before the dialog was opened. Save this to restore upon close. */\n  private _elementFocusedBeforeDialogWasOpened: HTMLElement | null = null;\n\n  /** The dialog configuration. */\n  _config: MatDialogConfig;\n\n  /** State of the dialog animation. */\n  _state: 'void' | 'enter' | 'exit' = 'enter';\n\n  /** Emits when an animation state changes. */\n  _animationStateChanged = new EventEmitter<AnimationEvent>();\n\n  /** ID of the element that should be considered as the dialog's label. */\n  _ariaLabelledBy: string | null = null;\n\n  /** ID for the container DOM element. */\n  _id: string;\n\n  constructor(\n    private _elementRef: ElementRef,\n    private _focusTrapFactory: FocusTrapFactory,\n    private _changeDetectorRef: ChangeDetectorRef,\n    @Optional() @Inject(DOCUMENT) private _document: any) {\n\n    super();\n  }\n\n  /**\n   * Attach a ComponentPortal as content to this dialog container.\n   * @param portal Portal to be attached as the dialog content.\n   */\n  attachComponentPortal<T>(portal: ComponentPortal<T>): ComponentRef<T> {\n    if (this._portalOutlet.hasAttached()) {\n      throwMatDialogContentAlreadyAttachedError();\n    }\n\n    this._savePreviouslyFocusedElement();\n    return this._portalOutlet.attachComponentPortal(portal);\n  }\n\n  /**\n   * Attach a TemplatePortal as content to this dialog container.\n   * @param portal Portal to be attached as the dialog content.\n   */\n  attachTemplatePortal<C>(portal: TemplatePortal<C>): EmbeddedViewRef<C> {\n    if (this._portalOutlet.hasAttached()) {\n      throwMatDialogContentAlreadyAttachedError();\n    }\n\n    this._savePreviouslyFocusedElement();\n    return this._portalOutlet.attachTemplatePortal(portal);\n  }\n\n  /** Moves the focus inside the focus trap. */\n  private _trapFocus() {\n    if (!this._focusTrap) {\n      this._focusTrap = this._focusTrapFactory.create(this._elementRef.nativeElement);\n    }\n\n    // If were to attempt to focus immediately, then the content of the dialog would not yet be\n    // ready in instances where change detection has to run first. To deal with this, we simply\n    // wait for the microtask queue to be empty.\n    if (this._config.autoFocus) {\n      this._focusTrap.focusInitialElementWhenReady();\n    }\n  }\n\n  /** Restores focus to the element that was focused before the dialog opened. */\n  private _restoreFocus() {\n    const toFocus = this._elementFocusedBeforeDialogWasOpened;\n\n    // We need the extra check, because IE can set the `activeElement` to null in some cases.\n    if (toFocus && typeof toFocus.focus === 'function') {\n      toFocus.focus();\n    }\n\n    if (this._focusTrap) {\n      this._focusTrap.destroy();\n    }\n  }\n\n  /** Saves a reference to the element that was focused before the dialog was opened. */\n  private _savePreviouslyFocusedElement() {\n    if (this._document) {\n      this._elementFocusedBeforeDialogWasOpened = this._document.activeElement as HTMLElement;\n\n      // Note that there is no focus method when rendering on the server.\n      if (this._elementRef.nativeElement.focus) {\n        // Move focus onto the dialog immediately in order to prevent the user from accidentally\n        // opening multiple dialogs at the same time. Needs to be async, because the element\n        // may not be focusable immediately.\n        Promise.resolve().then(() => this._elementRef.nativeElement.focus());\n      }\n    }\n  }\n\n  /** Callback, invoked whenever an animation on the host completes. */\n  _onAnimationDone(event: AnimationEvent) {\n    if (event.toState === 'enter') {\n      this._trapFocus();\n    } else if (event.toState === 'exit') {\n      this._restoreFocus();\n    }\n\n    this._animationStateChanged.emit(event);\n  }\n\n  /** Callback, invoked when an animation on the host starts. */\n  _onAnimationStart(event: AnimationEvent) {\n    this._animationStateChanged.emit(event);\n  }\n\n  /** Starts the dialog exit animation. */\n  _startExitAnimation(): void {\n    this._state = 'exit';\n\n    // Mark the container for check so it can react if the\n    // view container is using OnPush change detection.\n    this._changeDetectorRef.markForCheck();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {OverlayRef, GlobalPositionStrategy} from '@angular/cdk/overlay';\nimport {ESCAPE} from '@angular/cdk/keycodes';\nimport {Location} from '@angular/common';\nimport {filter} from 'rxjs/operators/filter';\nimport {take} from 'rxjs/operators/take';\nimport {DialogPosition} from './dialog-config';\nimport {Observable} from 'rxjs/Observable';\nimport {Subject} from 'rxjs/Subject';\nimport {Subscription, ISubscription} from 'rxjs/Subscription';\nimport {MatDialogContainer} from './dialog-container';\n\n\n// TODO(jelbourn): resizing\n\n// Counter for unique dialog ids.\nlet uniqueId = 0;\n\n/**\n * Reference to a dialog opened via the MatDialog service.\n */\nexport class MatDialogRef<T, R = any> {\n  /** The instance of component opened into the dialog. */\n  componentInstance: T;\n\n  /** Whether the user is allowed to close the dialog. */\n  disableClose: boolean | undefined = this._containerInstance._config.disableClose;\n\n  /** Subject for notifying the user that the dialog has finished opening. */\n  private readonly _afterOpen = new Subject<void>();\n\n  /** Subject for notifying the user that the dialog has finished closing. */\n  private readonly _afterClosed = new Subject<R | undefined>();\n\n  /** Subject for notifying the user that the dialog has started closing. */\n  private readonly _beforeClose = new Subject<R | undefined>();\n\n  /** Result to be passed to afterClosed. */\n  private _result: R | undefined;\n\n  /** Subscription to changes in the user's location. */\n  private _locationChanges: ISubscription = Subscription.EMPTY;\n\n  constructor(\n    private _overlayRef: OverlayRef,\n    public _containerInstance: MatDialogContainer,\n    location?: Location,\n    readonly id: string = `mat-dialog-${uniqueId++}`) {\n\n    // Pass the id along to the container.\n    _containerInstance._id = id;\n\n    // Emit when opening animation completes\n    _containerInstance._animationStateChanged.pipe(\n      filter(event => event.phaseName === 'done' && event.toState === 'enter'),\n      take(1)\n    )\n    .subscribe(() => {\n      this._afterOpen.next();\n      this._afterOpen.complete();\n    });\n\n    // Dispose overlay when closing animation is complete\n    _containerInstance._animationStateChanged.pipe(\n      filter(event => event.phaseName === 'done' && event.toState === 'exit'),\n      take(1)\n    )\n    .subscribe(() => {\n      this._overlayRef.dispose();\n      this._locationChanges.unsubscribe();\n      this._afterClosed.next(this._result);\n      this._afterClosed.complete();\n      this.componentInstance = null!;\n    });\n\n    _overlayRef.keydownEvents()\n      .pipe(filter(event => event.keyCode === ESCAPE && !this.disableClose))\n      .subscribe(() => this.close());\n\n    if (location) {\n      // Close the dialog when the user goes forwards/backwards in history or when the location\n      // hash changes. Note that this usually doesn't include clicking on links (unless the user\n      // is using the `HashLocationStrategy`).\n      this._locationChanges = location.subscribe(() => {\n        if (this._containerInstance._config.closeOnNavigation) {\n          this.close();\n        }\n      });\n    }\n  }\n\n  /**\n   * Close the dialog.\n   * @param dialogResult Optional result to return to the dialog opener.\n   */\n  close(dialogResult?: R): void {\n    this._result = dialogResult;\n\n    // Transition the backdrop in parallel to the dialog.\n    this._containerInstance._animationStateChanged.pipe(\n      filter(event => event.phaseName === 'start'),\n      take(1)\n    )\n    .subscribe(() => {\n      this._beforeClose.next(dialogResult);\n      this._beforeClose.complete();\n      this._overlayRef.detachBackdrop();\n    });\n\n    this._containerInstance._startExitAnimation();\n  }\n\n  /**\n   * Gets an observable that is notified when the dialog is finished opening.\n   */\n  afterOpen(): Observable<void> {\n    return this._afterOpen.asObservable();\n  }\n\n  /**\n   * Gets an observable that is notified when the dialog is finished closing.\n   */\n  afterClosed(): Observable<R | undefined> {\n    return this._afterClosed.asObservable();\n  }\n\n  /**\n   * Gets an observable that is notified when the dialog has started closing.\n   */\n  beforeClose(): Observable<R | undefined> {\n    return this._beforeClose.asObservable();\n  }\n\n  /**\n   * Gets an observable that emits when the overlay's backdrop has been clicked.\n   */\n  backdropClick(): Observable<MouseEvent> {\n    return this._overlayRef.backdropClick();\n  }\n\n  /**\n   * Gets an observable that emits when keydown events are targeted on the overlay.\n   */\n  keydownEvents(): Observable<KeyboardEvent> {\n    return this._overlayRef.keydownEvents();\n  }\n\n  /**\n   * Updates the dialog's position.\n   * @param position New dialog position.\n   */\n  updatePosition(position?: DialogPosition): this {\n    let strategy = this._getPositionStrategy();\n\n    if (position && (position.left || position.right)) {\n      position.left ? strategy.left(position.left) : strategy.right(position.right);\n    } else {\n      strategy.centerHorizontally();\n    }\n\n    if (position && (position.top || position.bottom)) {\n      position.top ? strategy.top(position.top) : strategy.bottom(position.bottom);\n    } else {\n      strategy.centerVertically();\n    }\n\n    this._overlayRef.updatePosition();\n\n    return this;\n  }\n\n  /**\n   * Updates the dialog's width and height.\n   * @param width New width of the dialog.\n   * @param height New height of the dialog.\n   */\n  updateSize(width: string = 'auto', height: string = 'auto'): this {\n    this._getPositionStrategy().width(width).height(height);\n    this._overlayRef.updatePosition();\n    return this;\n  }\n\n  /** Fetches the position strategy object from the overlay ref. */\n  private _getPositionStrategy(): GlobalPositionStrategy {\n    return this._overlayRef.getConfig().positionStrategy as GlobalPositionStrategy;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directionality} from '@angular/cdk/bidi';\nimport {\n  Overlay,\n  OverlayConfig,\n  OverlayRef,\n  ScrollStrategy,\n  OverlayContainer,\n} from '@angular/cdk/overlay';\nimport {ComponentPortal, ComponentType, PortalInjector, TemplatePortal} from '@angular/cdk/portal';\nimport {Location} from '@angular/common';\nimport {\n  ComponentRef,\n  Inject,\n  Injectable,\n  InjectionToken,\n  Injector,\n  Optional,\n  SkipSelf,\n  TemplateRef,\n} from '@angular/core';\nimport {Observable} from 'rxjs/Observable';\nimport {defer} from 'rxjs/observable/defer';\nimport {of as observableOf} from 'rxjs/observable/of';\nimport {startWith} from 'rxjs/operators/startWith';\nimport {Subject} from 'rxjs/Subject';\nimport {MatDialogConfig} from './dialog-config';\nimport {MatDialogContainer} from './dialog-container';\nimport {MatDialogRef} from './dialog-ref';\n\n/** Injection token that can be used to access the data that was passed in to a dialog. */\nexport const MAT_DIALOG_DATA = new InjectionToken<any>('MatDialogData');\n\n/** Injection token that can be used to specify default dialog options. */\nexport const MAT_DIALOG_DEFAULT_OPTIONS =\n    new InjectionToken<MatDialogConfig>('mat-dialog-default-options');\n\n/** Injection token that determines the scroll handling while the dialog is open. */\nexport const MAT_DIALOG_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mat-dialog-scroll-strategy');\n\n/** @docs-private */\nexport function MAT_DIALOG_SCROLL_STRATEGY_PROVIDER_FACTORY(overlay: Overlay):\n    () => ScrollStrategy {\n  return () => overlay.scrollStrategies.block();\n}\n\n/** @docs-private */\nexport const MAT_DIALOG_SCROLL_STRATEGY_PROVIDER = {\n  provide: MAT_DIALOG_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_DIALOG_SCROLL_STRATEGY_PROVIDER_FACTORY,\n};\n\n\n/**\n * Service to open Material Design modal dialogs.\n */\n@Injectable()\nexport class MatDialog {\n  private _openDialogsAtThisLevel: MatDialogRef<any>[] = [];\n  private readonly _afterAllClosedAtThisLevel = new Subject<void>();\n  private readonly _afterOpenAtThisLevel = new Subject<MatDialogRef<any>>();\n  private _ariaHiddenElements = new Map<Element, string|null>();\n\n  /** Keeps track of the currently-open dialogs. */\n  get openDialogs(): MatDialogRef<any>[] {\n    return this._parentDialog ? this._parentDialog.openDialogs : this._openDialogsAtThisLevel;\n  }\n\n  /** Stream that emits when a dialog has been opened. */\n  get afterOpen(): Subject<MatDialogRef<any>> {\n    return this._parentDialog ? this._parentDialog.afterOpen : this._afterOpenAtThisLevel;\n  }\n\n  get _afterAllClosed() {\n    const parent = this._parentDialog;\n    return parent ? parent._afterAllClosed : this._afterAllClosedAtThisLevel;\n  }\n\n  /**\n   * Stream that emits when all open dialog have finished closing.\n   * Will emit on subscribe if there are no open dialogs to begin with.\n   */\n  readonly afterAllClosed: Observable<void> = defer<void>(() => this.openDialogs.length ?\n      this._afterAllClosed :\n      this._afterAllClosed.pipe(startWith(undefined)));\n\n  constructor(\n      private _overlay: Overlay,\n      private _injector: Injector,\n      @Optional() private _location: Location,\n      @Optional() @Inject(MAT_DIALOG_DEFAULT_OPTIONS) private _defaultOptions,\n      @Inject(MAT_DIALOG_SCROLL_STRATEGY) private _scrollStrategy,\n      @Optional() @SkipSelf() private _parentDialog: MatDialog,\n      private _overlayContainer: OverlayContainer) {}\n\n  /**\n   * Opens a modal dialog containing the given component.\n   * @param componentOrTemplateRef Type of the component to load into the dialog,\n   *     or a TemplateRef to instantiate as the dialog content.\n   * @param config Extra configuration options.\n   * @returns Reference to the newly-opened dialog.\n   */\n  open<T, D = any>(componentOrTemplateRef: ComponentType<T> | TemplateRef<T>,\n          config?: MatDialogConfig<D>): MatDialogRef<T> {\n\n    config = _applyConfigDefaults(config, this._defaultOptions || new MatDialogConfig());\n\n    if (config.id && this.getDialogById(config.id)) {\n      throw Error(`Dialog with id \"${config.id}\" exists already. The dialog id must be unique.`);\n    }\n\n    const overlayRef = this._createOverlay(config);\n    const dialogContainer = this._attachDialogContainer(overlayRef, config);\n    const dialogRef =\n        this._attachDialogContent<T>(componentOrTemplateRef, dialogContainer, overlayRef, config);\n\n    // If this is the first dialog that we're opening, hide all the non-overlay content.\n    if (!this.openDialogs.length) {\n      this._hideNonDialogContentFromAssistiveTechnology();\n    }\n\n    this.openDialogs.push(dialogRef);\n    dialogRef.afterClosed().subscribe(() => this._removeOpenDialog(dialogRef));\n    this.afterOpen.next(dialogRef);\n\n    return dialogRef;\n  }\n\n  /**\n   * Closes all of the currently-open dialogs.\n   */\n  closeAll(): void {\n    let i = this.openDialogs.length;\n\n    while (i--) {\n      // The `_openDialogs` property isn't updated after close until the rxjs subscription\n      // runs on the next microtask, in addition to modifying the array as we're going\n      // through it. We loop through all of them and call close without assuming that\n      // they'll be removed from the list instantaneously.\n      this.openDialogs[i].close();\n    }\n  }\n\n  /**\n   * Finds an open dialog by its id.\n   * @param id ID to use when looking up the dialog.\n   */\n  getDialogById(id: string): MatDialogRef<any> | undefined {\n    return this.openDialogs.find(dialog => dialog.id === id);\n  }\n\n  /**\n   * Creates the overlay into which the dialog will be loaded.\n   * @param config The dialog configuration.\n   * @returns A promise resolving to the OverlayRef for the created overlay.\n   */\n  private _createOverlay(config: MatDialogConfig): OverlayRef {\n    const overlayConfig = this._getOverlayConfig(config);\n    return this._overlay.create(overlayConfig);\n  }\n\n  /**\n   * Creates an overlay config from a dialog config.\n   * @param dialogConfig The dialog configuration.\n   * @returns The overlay configuration.\n   */\n  private _getOverlayConfig(dialogConfig: MatDialogConfig): OverlayConfig {\n    const state = new OverlayConfig({\n      positionStrategy: this._overlay.position().global(),\n      scrollStrategy: dialogConfig.scrollStrategy || this._scrollStrategy(),\n      panelClass: dialogConfig.panelClass,\n      hasBackdrop: dialogConfig.hasBackdrop,\n      direction: dialogConfig.direction,\n      minWidth: dialogConfig.minWidth,\n      minHeight: dialogConfig.minHeight,\n      maxWidth: dialogConfig.maxWidth,\n      maxHeight: dialogConfig.maxHeight\n    });\n\n    if (dialogConfig.backdropClass) {\n      state.backdropClass = dialogConfig.backdropClass;\n    }\n\n    return state;\n  }\n\n  /**\n   * Attaches an MatDialogContainer to a dialog's already-created overlay.\n   * @param overlay Reference to the dialog's underlying overlay.\n   * @param config The dialog configuration.\n   * @returns A promise resolving to a ComponentRef for the attached container.\n   */\n  private _attachDialogContainer(overlay: OverlayRef, config: MatDialogConfig): MatDialogContainer {\n    let containerPortal = new ComponentPortal(MatDialogContainer, config.viewContainerRef);\n    let containerRef: ComponentRef<MatDialogContainer> = overlay.attach(containerPortal);\n    containerRef.instance._config = config;\n\n    return containerRef.instance;\n  }\n\n  /**\n   * Attaches the user-provided component to the already-created MatDialogContainer.\n   * @param componentOrTemplateRef The type of component being loaded into the dialog,\n   *     or a TemplateRef to instantiate as the content.\n   * @param dialogContainer Reference to the wrapping MatDialogContainer.\n   * @param overlayRef Reference to the overlay in which the dialog resides.\n   * @param config The dialog configuration.\n   * @returns A promise resolving to the MatDialogRef that should be returned to the user.\n   */\n  private _attachDialogContent<T>(\n      componentOrTemplateRef: ComponentType<T> | TemplateRef<T>,\n      dialogContainer: MatDialogContainer,\n      overlayRef: OverlayRef,\n      config: MatDialogConfig): MatDialogRef<T> {\n\n    // Create a reference to the dialog we're creating in order to give the user a handle\n    // to modify and close it.\n    const dialogRef = new MatDialogRef<T>(overlayRef, dialogContainer, this._location, config.id);\n\n    // When the dialog backdrop is clicked, we want to close it.\n    if (config.hasBackdrop) {\n      overlayRef.backdropClick().subscribe(() => {\n        if (!dialogRef.disableClose) {\n          dialogRef.close();\n        }\n      });\n    }\n\n    if (componentOrTemplateRef instanceof TemplateRef) {\n      dialogContainer.attachTemplatePortal(\n        new TemplatePortal<T>(componentOrTemplateRef, null!,\n          <any>{ $implicit: config.data, dialogRef }));\n    } else {\n      const injector = this._createInjector<T>(config, dialogRef, dialogContainer);\n      const contentRef = dialogContainer.attachComponentPortal<T>(\n          new ComponentPortal(componentOrTemplateRef, undefined, injector));\n      dialogRef.componentInstance = contentRef.instance;\n    }\n\n    dialogRef\n      .updateSize(config.width, config.height)\n      .updatePosition(config.position);\n\n    return dialogRef;\n  }\n\n  /**\n   * Creates a custom injector to be used inside the dialog. This allows a component loaded inside\n   * of a dialog to close itself and, optionally, to return a value.\n   * @param config Config object that is used to construct the dialog.\n   * @param dialogRef Reference to the dialog.\n   * @param container Dialog container element that wraps all of the contents.\n   * @returns The custom injector that can be used inside the dialog.\n   */\n  private _createInjector<T>(\n      config: MatDialogConfig,\n      dialogRef: MatDialogRef<T>,\n      dialogContainer: MatDialogContainer): PortalInjector {\n\n    const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n    const injectionTokens = new WeakMap();\n\n    // The MatDialogContainer is injected in the portal as the MatDialogContainer and the dialog's\n    // content are created out of the same ViewContainerRef and as such, are siblings for injector\n    // purposes. To allow the hierarchy that is expected, the MatDialogContainer is explicitly\n    // added to the injection tokens.\n    injectionTokens\n      .set(MatDialogContainer, dialogContainer)\n      .set(MAT_DIALOG_DATA, config.data)\n      .set(MatDialogRef, dialogRef);\n\n    if (!userInjector || !userInjector.get(Directionality, null)) {\n      injectionTokens.set(Directionality, {\n        value: config.direction,\n        change: observableOf()\n      });\n    }\n\n    return new PortalInjector(userInjector || this._injector, injectionTokens);\n  }\n\n  /**\n   * Removes a dialog from the array of open dialogs.\n   * @param dialogRef Dialog to be removed.\n   */\n  private _removeOpenDialog(dialogRef: MatDialogRef<any>) {\n    const index = this.openDialogs.indexOf(dialogRef);\n\n    if (index > -1) {\n      this.openDialogs.splice(index, 1);\n\n      // If all the dialogs were closed, remove/restore the `aria-hidden`\n      // to a the siblings and emit to the `afterAllClosed` stream.\n      if (!this.openDialogs.length) {\n        this._ariaHiddenElements.forEach((previousValue, element) => {\n          if (previousValue) {\n            element.setAttribute('aria-hidden', previousValue);\n          } else {\n            element.removeAttribute('aria-hidden');\n          }\n        });\n\n        this._ariaHiddenElements.clear();\n        this._afterAllClosed.next();\n      }\n    }\n  }\n\n  /**\n   * Hides all of the content that isn't an overlay from assistive technology.\n   */\n  private _hideNonDialogContentFromAssistiveTechnology() {\n    const overlayContainer = this._overlayContainer.getContainerElement();\n\n    // Ensure that the overlay container is attached to the DOM.\n    if (overlayContainer.parentElement) {\n      const siblings = overlayContainer.parentElement.children;\n\n      for (let i = siblings.length - 1; i > -1; i--) {\n        let sibling = siblings[i];\n\n        if (sibling !== overlayContainer &&\n          sibling.nodeName !== 'SCRIPT' &&\n          sibling.nodeName !== 'STYLE' &&\n          !sibling.hasAttribute('aria-live')) {\n\n          this._ariaHiddenElements.set(sibling, sibling.getAttribute('aria-hidden'));\n          sibling.setAttribute('aria-hidden', 'true');\n        }\n      }\n    }\n\n  }\n\n}\n\n/**\n * Applies default options to the dialog config.\n * @param config Config to be modified.\n * @param defaultOptions Default options provided.\n * @returns The new configuration object.\n */\nfunction _applyConfigDefaults(\n    config?: MatDialogConfig, defaultOptions?: MatDialogConfig): MatDialogConfig {\n  return {...defaultOptions, ...config};\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Directive,\n  Input,\n  OnChanges,\n  OnInit,\n  Optional,\n  SimpleChanges,\n  ElementRef,\n} from '@angular/core';\nimport {MatDialog} from './dialog';\nimport {MatDialogRef} from './dialog-ref';\n\n/** Counter used to generate unique IDs for dialog elements. */\nlet dialogElementUid = 0;\n\n/**\n * Button that will close the current dialog.\n */\n@Directive({\n  selector: `button[mat-dialog-close], button[matDialogClose]`,\n  exportAs: 'matDialogClose',\n  host: {\n    '(click)': 'dialogRef.close(dialogResult)',\n    '[attr.aria-label]': 'ariaLabel',\n    'type': 'button', // Prevents accidental form submits.\n  }\n})\nexport class MatDialogClose implements OnInit, OnChanges {\n  /** Screenreader label for the button. */\n  @Input('aria-label') ariaLabel: string = 'Close dialog';\n\n  /** Dialog close input. */\n  @Input('mat-dialog-close') dialogResult: any;\n\n  @Input('matDialogClose') _matDialogClose: any;\n\n  constructor(\n    @Optional() public dialogRef: MatDialogRef<any>,\n    private _elementRef: ElementRef,\n    private _dialog: MatDialog) {}\n\n  ngOnInit() {\n    if (!this.dialogRef) {\n      // When this directive is included in a dialog via TemplateRef (rather than being\n      // in a Component), the DialogRef isn't available via injection because embedded\n      // views cannot be given a custom injector. Instead, we look up the DialogRef by\n      // ID. This must occur in `onInit`, as the ID binding for the dialog container won't\n      // be resolved at constructor time.\n      this.dialogRef = getClosestDialog(this._elementRef, this._dialog.openDialogs)!;\n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    const proxiedChange = changes._matDialogClose || changes._matDialogCloseResult;\n\n    if (proxiedChange) {\n      this.dialogResult = proxiedChange.currentValue;\n    }\n  }\n}\n\n/**\n * Title of a dialog element. Stays fixed to the top of the dialog when scrolling.\n */\n@Directive({\n  selector: '[mat-dialog-title], [matDialogTitle]',\n  exportAs: 'matDialogTitle',\n  host: {\n    'class': 'mat-dialog-title',\n    '[id]': 'id',\n  },\n})\nexport class MatDialogTitle implements OnInit {\n  @Input() id = `mat-dialog-title-${dialogElementUid++}`;\n\n  constructor(\n    @Optional() private _dialogRef: MatDialogRef<any>,\n    private _elementRef: ElementRef,\n    private _dialog: MatDialog) {}\n\n  ngOnInit() {\n    if (!this._dialogRef) {\n      this._dialogRef = getClosestDialog(this._elementRef, this._dialog.openDialogs)!;\n    }\n\n    if (this._dialogRef) {\n      Promise.resolve().then(() => {\n        const container = this._dialogRef._containerInstance;\n\n        if (container && !container._ariaLabelledBy) {\n          container._ariaLabelledBy = this.id;\n        }\n      });\n    }\n  }\n}\n\n\n/**\n * Scrollable content container of a dialog.\n */\n@Directive({\n  selector: `[mat-dialog-content], mat-dialog-content, [matDialogContent]`,\n  host: {'class': 'mat-dialog-content'}\n})\nexport class MatDialogContent {}\n\n\n/**\n * Container for the bottom action buttons in a dialog.\n * Stays fixed to the bottom when scrolling.\n */\n@Directive({\n  selector: `[mat-dialog-actions], mat-dialog-actions, [matDialogActions]`,\n  host: {'class': 'mat-dialog-actions'}\n})\nexport class MatDialogActions {}\n\n\n/**\n * Finds the closest MatDialogRef to an element by looking at the DOM.\n * @param element Element relative to which to look for a dialog.\n * @param openDialogs References to the currently-open dialogs.\n */\nfunction getClosestDialog(element: ElementRef, openDialogs: MatDialogRef<any>[]) {\n  let parent: HTMLElement | null = element.nativeElement.parentElement;\n\n  while (parent && !parent.classList.contains('mat-dialog-container')) {\n    parent = parent.parentElement;\n  }\n\n  return parent ? openDialogs.find(dialog => dialog.id === parent!.id) : null;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {A11yModule} from '@angular/cdk/a11y';\nimport {MatCommonModule} from '@angular/material/core';\nimport {\n  MatDialog,\n  MAT_DIALOG_SCROLL_STRATEGY_PROVIDER\n} from './dialog';\nimport {MatDialogContainer} from './dialog-container';\nimport {\n  MatDialogClose,\n  MatDialogContent,\n  MatDialogTitle,\n  MatDialogActions\n} from './dialog-content-directives';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    OverlayModule,\n    PortalModule,\n    A11yModule,\n    MatCommonModule,\n  ],\n  exports: [\n    MatDialogContainer,\n    MatDialogClose,\n    MatDialogTitle,\n    MatDialogContent,\n    MatDialogActions,\n    MatCommonModule,\n  ],\n  declarations: [\n    MatDialogContainer,\n    MatDialogClose,\n    MatDialogTitle,\n    MatDialogActions,\n    MatDialogContent,\n  ],\n  providers: [\n    MatDialog,\n    MAT_DIALOG_SCROLL_STRATEGY_PROVIDER,\n  ],\n  entryComponents: [MatDialogContainer],\n})\nexport class MatDialogModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CdkTextareaAutosize} from '@angular/cdk/text-field';\nimport {Directive, Input} from '@angular/core';\n\n\n/**\n * Directive to automatically resize a textarea to fit its content.\n * @deletion-target 7.0.0 deprecate in favor of `cdkTextareaAutosize`.\n */\n@Directive({\n  selector: 'textarea[mat-autosize], textarea[matTextareaAutosize]',\n  exportAs: 'matTextareaAutosize',\n  inputs: ['cdkAutosizeMinRows', 'cdkAutosizeMaxRows'],\n  host: {\n    'class': 'cdk-textarea-autosize mat-autosize',\n    // Textarea elements that have the directive applied should have a single row by default.\n    // Browsers normally show two rows by default and therefore this limits the minRows binding.\n    'rows': '1',\n    '(input)': '_noopInputHandler()',\n  },\n})\nexport class MatTextareaAutosize extends CdkTextareaAutosize {\n  @Input()\n  get matAutosizeMinRows(): number { return this.minRows; }\n  set matAutosizeMinRows(value: number) { this.minRows = value; }\n\n  @Input()\n  get matAutosizeMaxRows(): number { return this.maxRows; }\n  set matAutosizeMaxRows(value: number) { this.maxRows = value; }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {InjectionToken} from '@angular/core';\n\n\n/**\n * This token is used to inject the object whose value should be set into `MatInput`. If none is\n * provided, the native `HTMLInputElement` is used. Directives like `MatDatepickerInput` can provide\n * themselves for this token, in order to make `MatInput` delegate the getting and setting of the\n * value to them.\n */\nexport const MAT_INPUT_VALUE_ACCESSOR =\n    new InjectionToken<{value: any}>('MAT_INPUT_VALUE_ACCESSOR');\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {getSupportedInputTypes, Platform} from '@angular/cdk/platform';\nimport {\n  Directive,\n  DoCheck,\n  ElementRef,\n  Inject,\n  Input,\n  OnChanges,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Self,\n} from '@angular/core';\nimport {FormGroupDirective, NgControl, NgForm} from '@angular/forms';\nimport {CanUpdateErrorState, ErrorStateMatcher, mixinErrorState} from '@angular/material/core';\nimport {MatFormFieldControl} from '@angular/material/form-field';\nimport {Subject} from 'rxjs/Subject';\nimport {AutofillMonitor} from '@angular/cdk/text-field';\nimport {getMatInputUnsupportedTypeError} from './input-errors';\nimport {MAT_INPUT_VALUE_ACCESSOR} from './input-value-accessor';\n\n\n// Invalid input type. Using one of these will throw an MatInputUnsupportedTypeError.\nconst MAT_INPUT_INVALID_TYPES = [\n  'button',\n  'checkbox',\n  'file',\n  'hidden',\n  'image',\n  'radio',\n  'range',\n  'reset',\n  'submit'\n];\n\nlet nextUniqueId = 0;\n\n// Boilerplate for applying mixins to MatInput.\n/** @docs-private */\nexport class MatInputBase {\n  constructor(public _defaultErrorStateMatcher: ErrorStateMatcher,\n              public _parentForm: NgForm,\n              public _parentFormGroup: FormGroupDirective,\n              /** @docs-private */\n              public ngControl: NgControl) {}\n}\nexport const _MatInputMixinBase = mixinErrorState(MatInputBase);\n\n/** Directive that allows a native input to work inside a `MatFormField`. */\n@Directive({\n  selector: `input[matInput], textarea[matInput]`,\n  exportAs: 'matInput',\n  host: {\n    /**\n     * @deletion-target 7.0.0 remove .mat-form-field-autofill-control in favor of AutofillMonitor.\n     */\n    'class': 'mat-input-element mat-form-field-autofill-control',\n    '[class.mat-input-server]': '_isServer',\n    // Native input properties that are overwritten by Angular inputs need to be synced with\n    // the native input element. Otherwise property bindings for those don't work.\n    '[attr.id]': 'id',\n    '[attr.placeholder]': 'placeholder',\n    '[disabled]': 'disabled',\n    '[required]': 'required',\n    '[readonly]': 'readonly',\n    '[attr.aria-describedby]': '_ariaDescribedby || null',\n    '[attr.aria-invalid]': 'errorState',\n    '[attr.aria-required]': 'required.toString()',\n    '(blur)': '_focusChanged(false)',\n    '(focus)': '_focusChanged(true)',\n    '(input)': '_onInput()',\n  },\n  providers: [{provide: MatFormFieldControl, useExisting: MatInput}],\n})\nexport class MatInput extends _MatInputMixinBase implements MatFormFieldControl<any>, OnChanges,\n    OnDestroy, OnInit, DoCheck, CanUpdateErrorState {\n  protected _uid = `mat-input-${nextUniqueId++}`;\n  protected _previousNativeValue: any;\n  private _inputValueAccessor: {value: any};\n  /** The aria-describedby attribute on the input for improved a11y. */\n  _ariaDescribedby: string;\n\n  /** Whether the component is being rendered on the server. */\n  _isServer = false;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  focused: boolean = false;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  readonly stateChanges: Subject<void> = new Subject<void>();\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  controlType: string = 'mat-input';\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  autofilled = false;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get disabled(): boolean {\n    if (this.ngControl && this.ngControl.disabled !== null) {\n      return this.ngControl.disabled;\n    }\n    return this._disabled;\n  }\n  set disabled(value: boolean) {\n    this._disabled = coerceBooleanProperty(value);\n\n    // Browsers may not fire the blur event if the input is disabled too quickly.\n    // Reset from here to ensure that the element doesn't become stuck.\n    if (this.focused) {\n      this.focused = false;\n      this.stateChanges.next();\n    }\n  }\n  protected _disabled = false;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get id(): string { return this._id; }\n  set id(value: string) { this._id = value || this._uid; }\n  protected _id: string;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input() placeholder: string;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get required(): boolean { return this._required; }\n  set required(value: boolean) { this._required = coerceBooleanProperty(value); }\n  protected _required = false;\n\n  /** Input type of the element. */\n  @Input()\n  get type(): string { return this._type; }\n  set type(value: string) {\n    this._type = value || 'text';\n    this._validateType();\n\n    // When using Angular inputs, developers are no longer able to set the properties on the native\n    // input element. To ensure that bindings for `type` work, we need to sync the setter\n    // with the native property. Textarea elements don't support the type property or attribute.\n    if (!this._isTextarea() && getSupportedInputTypes().has(this._type)) {\n      this._elementRef.nativeElement.type = this._type;\n    }\n  }\n  protected _type = 'text';\n\n  /** An object used to control when error messages are shown. */\n  @Input() errorStateMatcher: ErrorStateMatcher;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get value(): string { return this._inputValueAccessor.value; }\n  set value(value: string) {\n    if (value !== this.value) {\n      this._inputValueAccessor.value = value;\n      this.stateChanges.next();\n    }\n  }\n\n  /** Whether the element is readonly. */\n  @Input()\n  get readonly(): boolean { return this._readonly; }\n  set readonly(value: boolean) { this._readonly = coerceBooleanProperty(value); }\n  private _readonly = false;\n\n  protected _neverEmptyInputTypes = [\n    'date',\n    'datetime',\n    'datetime-local',\n    'month',\n    'time',\n    'week'\n  ].filter(t => getSupportedInputTypes().has(t));\n\n  constructor(protected _elementRef: ElementRef,\n              protected _platform: Platform,\n              /** @docs-private */\n              @Optional() @Self() public ngControl: NgControl,\n              @Optional() _parentForm: NgForm,\n              @Optional() _parentFormGroup: FormGroupDirective,\n              _defaultErrorStateMatcher: ErrorStateMatcher,\n              @Optional() @Self() @Inject(MAT_INPUT_VALUE_ACCESSOR) inputValueAccessor: any,\n              private _autofillMonitor: AutofillMonitor) {\n    super(_defaultErrorStateMatcher, _parentForm, _parentFormGroup, ngControl);\n    // If no input value accessor was explicitly specified, use the element as the input value\n    // accessor.\n    this._inputValueAccessor = inputValueAccessor || this._elementRef.nativeElement;\n\n    this._previousNativeValue = this.value;\n\n    // Force setter to be called in case id was not specified.\n    this.id = this.id;\n\n    // On some versions of iOS the caret gets stuck in the wrong place when holding down the delete\n    // key. In order to get around this we need to \"jiggle\" the caret loose. Since this bug only\n    // exists on iOS, we only bother to install the listener on iOS.\n    if (_platform.IOS) {\n      _elementRef.nativeElement.addEventListener('keyup', (event: Event) => {\n        let el = event.target as HTMLInputElement;\n        if (!el.value && !el.selectionStart && !el.selectionEnd) {\n          // Note: Just setting `0, 0` doesn't fix the issue. Setting `1, 1` fixes it for the first\n          // time that you type text and then hold delete. Toggling to `1, 1` and then back to\n          // `0, 0` seems to completely fix it.\n          el.setSelectionRange(1, 1);\n          el.setSelectionRange(0, 0);\n        }\n      });\n    }\n\n    this._isServer = !this._platform.isBrowser;\n  }\n\n  ngOnInit() {\n    this._autofillMonitor.monitor(this._elementRef.nativeElement).subscribe(event => {\n      this.autofilled = event.isAutofilled;\n      this.stateChanges.next();\n    });\n  }\n\n  ngOnChanges() {\n    this.stateChanges.next();\n  }\n\n  ngOnDestroy() {\n    this.stateChanges.complete();\n    this._autofillMonitor.stopMonitoring(this._elementRef.nativeElement);\n  }\n\n  ngDoCheck() {\n    if (this.ngControl) {\n      // We need to re-evaluate this on every change detection cycle, because there are some\n      // error triggers that we can't subscribe to (e.g. parent form submissions). This means\n      // that whatever logic is in here has to be super lean or we risk destroying the performance.\n      this.updateErrorState();\n    }\n\n    // We need to dirty-check the native element's value, because there are some cases where\n    // we won't be notified when it changes (e.g. the consumer isn't using forms or they're\n    // updating the value using `emitEvent: false`).\n    this._dirtyCheckNativeValue();\n  }\n\n  /** Focuses the input. */\n  focus(): void { this._elementRef.nativeElement.focus(); }\n\n  /** Callback for the cases where the focused state of the input changes. */\n  _focusChanged(isFocused: boolean) {\n    if (isFocused !== this.focused && !this.readonly) {\n      this.focused = isFocused;\n      this.stateChanges.next();\n    }\n  }\n\n  _onInput() {\n    // This is a noop function and is used to let Angular know whenever the value changes.\n    // Angular will run a new change detection each time the `input` event has been dispatched.\n    // It's necessary that Angular recognizes the value change, because when floatingLabel\n    // is set to false and Angular forms aren't used, the placeholder won't recognize the\n    // value changes and will not disappear.\n    // Listening to the input event wouldn't be necessary when the input is using the\n    // FormsModule or ReactiveFormsModule, because Angular forms also listens to input events.\n  }\n\n  /** Does some manual dirty checking on the native input `value` property. */\n  protected _dirtyCheckNativeValue() {\n    const newValue = this.value;\n\n    if (this._previousNativeValue !== newValue) {\n      this._previousNativeValue = newValue;\n      this.stateChanges.next();\n    }\n  }\n\n  /** Make sure the input is a supported type. */\n  protected _validateType() {\n    if (MAT_INPUT_INVALID_TYPES.indexOf(this._type) > -1) {\n      throw getMatInputUnsupportedTypeError(this._type);\n    }\n  }\n\n  /** Checks whether the input type is one of the types that are never empty. */\n  protected _isNeverEmpty() {\n    return this._neverEmptyInputTypes.indexOf(this._type) > -1;\n  }\n\n  /** Checks whether the input is invalid based on the native validation. */\n  protected _isBadInput() {\n    // The `validity` property won't be present on platform-server.\n    let validity = (this._elementRef.nativeElement as HTMLInputElement).validity;\n    return validity && validity.badInput;\n  }\n\n  /** Determines if the component host is a textarea. If not recognizable it returns false. */\n  protected _isTextarea() {\n    let nativeElement = this._elementRef.nativeElement;\n\n    // In Universal, we don't have access to `nodeName`, but the same can be achieved with `name`.\n    // Note that this shouldn't be necessary once Angular switches to an API that resembles the\n    // DOM closer.\n    let nodeName = this._platform.isBrowser ? nativeElement.nodeName : nativeElement.name;\n    return nodeName ? nodeName.toLowerCase() === 'textarea' : false;\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  get empty(): boolean {\n    return !this._isNeverEmpty() && !this._elementRef.nativeElement.value && !this._isBadInput() &&\n        !this.autofilled;\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  get shouldLabelFloat(): boolean { return this.focused || !this.empty; }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  setDescribedByIds(ids: string[]) { this._ariaDescribedby = ids.join(' '); }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  onContainerClick() { this.focus(); }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {TextFieldModule} from '@angular/cdk/text-field';\nimport {PlatformModule} from '@angular/cdk/platform';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {ErrorStateMatcher} from '@angular/material/core';\nimport {MatFormFieldModule} from '@angular/material/form-field';\nimport {MatTextareaAutosize} from './autosize';\nimport {MatInput} from './input';\n\n\n@NgModule({\n  declarations: [MatInput, MatTextareaAutosize],\n  imports: [\n    CommonModule,\n    TextFieldModule,\n    MatFormFieldModule,\n    PlatformModule,\n  ],\n  exports: [\n    TextFieldModule,\n    // We re-export the `MatFormFieldModule` since `MatInput` will almost always\n    // be used together with `MatFormField`.\n    MatFormFieldModule,\n    MatInput,\n    MatTextareaAutosize,\n  ],\n  providers: [ErrorStateMatcher],\n})\nexport class MatInputModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable} from '@angular/core';\nimport {Subject} from 'rxjs/Subject';\n\n\n/** Datepicker data that requires internationalization. */\n@Injectable()\nexport class MatDatepickerIntl {\n  /**\n   * Stream that emits whenever the labels here are changed. Use this to notify\n   * components if the labels have changed after initialization.\n   */\n  readonly changes: Subject<void> = new Subject<void>();\n\n  /** A label for the calendar popup (used by screen readers). */\n  calendarLabel: string = 'Calendar';\n\n  /** A label for the button used to open the calendar popup (used by screen readers). */\n  openCalendarLabel: string = 'Open calendar';\n\n  /** A label for the previous month button (used by screen readers). */\n  prevMonthLabel: string = 'Previous month';\n\n  /** A label for the next month button (used by screen readers). */\n  nextMonthLabel: string = 'Next month';\n\n  /** A label for the previous year button (used by screen readers). */\n  prevYearLabel: string = 'Previous year';\n\n  /** A label for the next year button (used by screen readers). */\n  nextYearLabel: string = 'Next year';\n\n  /** A label for the previous multi-year button (used by screen readers). */\n  prevMultiYearLabel: string = 'Previous 20 years';\n\n  /** A label for the next multi-year button (used by screen readers). */\n  nextMultiYearLabel: string = 'Next 20 years';\n\n  /** A label for the 'switch to month view' button (used by screen readers). */\n  switchToMonthViewLabel: string = 'Choose date';\n\n  /** A label for the 'switch to year view' button (used by screen readers). */\n  switchToMultiYearViewLabel: string = 'Choose month and year';\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  EventEmitter,\n  Input,\n  Output,\n  ViewEncapsulation,\n  NgZone,\n} from '@angular/core';\nimport {take} from 'rxjs/operators/take';\n\n/**\n * An internal class that represents the data corresponding to a single calendar cell.\n * @docs-private\n */\nexport class MatCalendarCell {\n  constructor(public value: number,\n              public displayValue: string,\n              public ariaLabel: string,\n              public enabled: boolean) {}\n}\n\n\n/**\n * An internal component used to display calendar data in a table.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: '[mat-calendar-body]',\n  templateUrl: 'calendar-body.html',\n  styleUrls: ['calendar-body.css'],\n  host: {\n    'class': 'mat-calendar-body',\n    'role': 'grid',\n    'attr.aria-readonly': 'true'\n  },\n  exportAs: 'matCalendarBody',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatCalendarBody {\n  /** The label for the table. (e.g. \"Jan 2017\"). */\n  @Input() label: string;\n\n  /** The cells to display in the table. */\n  @Input() rows: MatCalendarCell[][];\n\n  /** The value in the table that corresponds to today. */\n  @Input() todayValue: number;\n\n  /** The value in the table that is currently selected. */\n  @Input() selectedValue: number;\n\n  /** The minimum number of free cells needed to fit the label in the first row. */\n  @Input() labelMinRequiredCells: number;\n\n  /** The number of columns in the table. */\n  @Input() numCols = 7;\n\n  /** Whether to allow selection of disabled cells. */\n  @Input() allowDisabledSelection = false;\n\n  /** The cell number of the active cell in the table. */\n  @Input() activeCell = 0;\n\n  /**\n   * The aspect ratio (width / height) to use for the cells in the table. This aspect ratio will be\n   * maintained even as the table resizes.\n   */\n  @Input() cellAspectRatio = 1;\n\n  /** Emits when a new value is selected. */\n  @Output() readonly selectedValueChange: EventEmitter<number> = new EventEmitter<number>();\n\n  constructor(private _elementRef: ElementRef, private _ngZone: NgZone) { }\n\n  _cellClicked(cell: MatCalendarCell): void {\n    if (!this.allowDisabledSelection && !cell.enabled) {\n      return;\n    }\n    this.selectedValueChange.emit(cell.value);\n  }\n\n  /** The number of blank cells to put at the beginning for the first row. */\n  get _firstRowOffset(): number {\n    return this.rows && this.rows.length && this.rows[0].length ?\n        this.numCols - this.rows[0].length : 0;\n  }\n\n  _isActiveCell(rowIndex: number, colIndex: number): boolean {\n    let cellNumber = rowIndex * this.numCols + colIndex;\n\n    // Account for the fact that the first row may not have as many cells.\n    if (rowIndex) {\n      cellNumber -= this._firstRowOffset;\n    }\n\n    return cellNumber == this.activeCell;\n  }\n\n  /** Focuses the active cell after the microtask queue is empty. */\n  _focusActiveCell() {\n    this._ngZone.runOutsideAngular(() => {\n      this._ngZone.onStable.asObservable().pipe(take(1)).subscribe(() => {\n        this._elementRef.nativeElement.querySelector('.mat-calendar-body-active').focus();\n      });\n    });\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  DOWN_ARROW,\n  END,\n  ENTER,\n  HOME,\n  LEFT_ARROW,\n  PAGE_DOWN,\n  PAGE_UP,\n  RIGHT_ARROW,\n  UP_ARROW,\n} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  EventEmitter,\n  Inject,\n  Input,\n  Optional,\n  Output,\n  ViewEncapsulation,\n  ViewChild,\n} from '@angular/core';\nimport {DateAdapter, MAT_DATE_FORMATS, MatDateFormats} from '@angular/material/core';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {MatCalendarBody, MatCalendarCell} from './calendar-body';\nimport {createMissingDateImplError} from './datepicker-errors';\n\n\nconst DAYS_PER_WEEK = 7;\n\n\n/**\n * An internal component used to display a single month in the datepicker.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-month-view',\n  templateUrl: 'month-view.html',\n  exportAs: 'matMonthView',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class MatMonthView<D> implements AfterContentInit {\n  /**\n   * The date to display in this month view (everything other than the month and year is ignored).\n   */\n  @Input()\n  get activeDate(): D { return this._activeDate; }\n  set activeDate(value: D) {\n    const oldActiveDate = this._activeDate;\n    const validDate =\n        this._getValidDateOrNull(this._dateAdapter.deserialize(value)) || this._dateAdapter.today();\n    this._activeDate = this._dateAdapter.clampDate(validDate, this.minDate, this.maxDate);\n    if (!this._hasSameMonthAndYear(oldActiveDate, this._activeDate)) {\n      this._init();\n    }\n  }\n  private _activeDate: D;\n\n  /** The currently selected date. */\n  @Input()\n  get selected(): D | null { return this._selected; }\n  set selected(value: D | null) {\n    this._selected = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n    this._selectedDate = this._getDateInCurrentMonth(this._selected);\n  }\n  private _selected: D | null;\n\n  /** The minimum selectable date. */\n  @Input()\n  get minDate(): D | null { return this._minDate; }\n  set minDate(value: D | null) {\n    this._minDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _minDate: D | null;\n\n  /** The maximum selectable date. */\n  @Input()\n  get maxDate(): D | null { return this._maxDate; }\n  set maxDate(value: D | null) {\n    this._maxDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _maxDate: D | null;\n\n  /** A function used to filter which dates are selectable. */\n  @Input() dateFilter: (date: D) => boolean;\n\n  /** Emits when a new date is selected. */\n  @Output() readonly selectedChange: EventEmitter<D | null> = new EventEmitter<D | null>();\n\n  /** Emits when any date is selected. */\n  @Output() readonly _userSelection: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Emits when any date is activated. */\n  @Output() readonly activeDateChange: EventEmitter<D> = new EventEmitter<D>();\n\n  /** The body of calendar table */\n  @ViewChild(MatCalendarBody) _matCalendarBody;\n\n  /** The label for this month (e.g. \"January 2017\"). */\n  _monthLabel: string;\n\n  /** Grid of calendar cells representing the dates of the month. */\n  _weeks: MatCalendarCell[][];\n\n  /** The number of blank cells in the first row before the 1st of the month. */\n  _firstWeekOffset: number;\n\n  /**\n   * The date of the month that the currently selected Date falls on.\n   * Null if the currently selected Date is in another month.\n   */\n  _selectedDate: number | null;\n\n  /** The date of the month that today falls on. Null if today is in another month. */\n  _todayDate: number | null;\n\n  /** The names of the weekdays. */\n  _weekdays: {long: string, narrow: string}[];\n\n  constructor(private _changeDetectorRef: ChangeDetectorRef,\n              @Optional() @Inject(MAT_DATE_FORMATS) private _dateFormats: MatDateFormats,\n              @Optional() public _dateAdapter: DateAdapter<D>,\n              @Optional() private _dir?: Directionality) {\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n    if (!this._dateFormats) {\n      throw createMissingDateImplError('MAT_DATE_FORMATS');\n    }\n\n    const firstDayOfWeek = this._dateAdapter.getFirstDayOfWeek();\n    const narrowWeekdays = this._dateAdapter.getDayOfWeekNames('narrow');\n    const longWeekdays = this._dateAdapter.getDayOfWeekNames('long');\n\n    // Rotate the labels for days of the week based on the configured first day of the week.\n    let weekdays = longWeekdays.map((long, i) => {\n      return {long, narrow: narrowWeekdays[i]};\n    });\n    this._weekdays = weekdays.slice(firstDayOfWeek).concat(weekdays.slice(0, firstDayOfWeek));\n\n    this._activeDate = this._dateAdapter.today();\n  }\n\n  ngAfterContentInit() {\n    this._init();\n    this._focusActiveCell();\n  }\n\n  /** Handles when a new date is selected. */\n  _dateSelected(date: number) {\n    if (this._selectedDate != date) {\n      const selectedYear = this._dateAdapter.getYear(this.activeDate);\n      const selectedMonth = this._dateAdapter.getMonth(this.activeDate);\n      const selectedDate = this._dateAdapter.createDate(selectedYear, selectedMonth, date);\n\n      this.selectedChange.emit(selectedDate);\n    }\n\n    this._userSelection.emit();\n  }\n\n  /** Handles keydown events on the calendar body when calendar is in month view. */\n  _handleCalendarBodyKeydown(event: KeyboardEvent): void {\n    // TODO(mmalerba): We currently allow keyboard navigation to disabled dates, but just prevent\n    // disabled ones from being selected. This may not be ideal, we should look into whether\n    // navigation should skip over disabled dates, and if so, how to implement that efficiently.\n\n    const oldActiveDate = this._activeDate;\n\n    const isRtl = this._isRtl();\n    switch (event.keyCode) {\n      case LEFT_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate, isRtl ? 1 : -1);\n        break;\n      case RIGHT_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate, isRtl ? -1 : 1);\n        break;\n      case UP_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate, -7);\n        break;\n      case DOWN_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate, 7);\n        break;\n      case HOME:\n        this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate,\n            1 - this._dateAdapter.getDate(this._activeDate));\n        break;\n      case END:\n        this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate,\n            (this._dateAdapter.getNumDaysInMonth(this._activeDate) -\n              this._dateAdapter.getDate(this._activeDate)));\n        break;\n      case PAGE_UP:\n        this.activeDate = event.altKey ?\n            this._dateAdapter.addCalendarYears(this._activeDate, -1) :\n            this._dateAdapter.addCalendarMonths(this._activeDate, -1);\n        break;\n      case PAGE_DOWN:\n        this.activeDate = event.altKey ?\n            this._dateAdapter.addCalendarYears(this._activeDate, 1) :\n            this._dateAdapter.addCalendarMonths(this._activeDate, 1);\n        break;\n      case ENTER:\n        if (!this.dateFilter || this.dateFilter(this._activeDate)) {\n          this._dateSelected(this._dateAdapter.getDate(this._activeDate));\n          this._userSelection.emit();\n          // Prevent unexpected default actions such as form submission.\n          event.preventDefault();\n        }\n        return;\n      default:\n        // Don't prevent default or focus active cell on keys that we don't explicitly handle.\n        return;\n    }\n\n    if (this._dateAdapter.compareDate(oldActiveDate, this.activeDate)) {\n      this.activeDateChange.emit(this.activeDate);\n    }\n\n    this._focusActiveCell();\n    // Prevent unexpected default actions such as form submission.\n    event.preventDefault();\n  }\n\n  /** Initializes this month view. */\n  _init() {\n    this._selectedDate = this._getDateInCurrentMonth(this.selected);\n    this._todayDate = this._getDateInCurrentMonth(this._dateAdapter.today());\n    this._monthLabel =\n        this._dateAdapter.getMonthNames('short')[this._dateAdapter.getMonth(this.activeDate)]\n            .toLocaleUpperCase();\n\n    let firstOfMonth = this._dateAdapter.createDate(this._dateAdapter.getYear(this.activeDate),\n        this._dateAdapter.getMonth(this.activeDate), 1);\n    this._firstWeekOffset =\n        (DAYS_PER_WEEK + this._dateAdapter.getDayOfWeek(firstOfMonth) -\n         this._dateAdapter.getFirstDayOfWeek()) % DAYS_PER_WEEK;\n\n    this._createWeekCells();\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Focuses the active cell after the microtask queue is empty. */\n  private _focusActiveCell() {\n    this._matCalendarBody._focusActiveCell();\n  }\n\n  /** Creates MatCalendarCells for the dates in this month. */\n  private _createWeekCells() {\n    const daysInMonth = this._dateAdapter.getNumDaysInMonth(this.activeDate);\n    const dateNames = this._dateAdapter.getDateNames();\n    this._weeks = [[]];\n    for (let i = 0, cell = this._firstWeekOffset; i < daysInMonth; i++, cell++) {\n      if (cell == DAYS_PER_WEEK) {\n        this._weeks.push([]);\n        cell = 0;\n      }\n      const date = this._dateAdapter.createDate(\n            this._dateAdapter.getYear(this.activeDate),\n            this._dateAdapter.getMonth(this.activeDate), i + 1);\n      const enabled = this._shouldEnableDate(date);\n      const ariaLabel = this._dateAdapter.format(date, this._dateFormats.display.dateA11yLabel);\n      this._weeks[this._weeks.length - 1]\n          .push(new MatCalendarCell(i + 1, dateNames[i], ariaLabel, enabled));\n    }\n  }\n\n  /** Date filter for the month */\n  private _shouldEnableDate(date: D): boolean {\n    return !!date &&\n        (!this.dateFilter || this.dateFilter(date)) &&\n        (!this.minDate || this._dateAdapter.compareDate(date, this.minDate) >= 0) &&\n        (!this.maxDate || this._dateAdapter.compareDate(date, this.maxDate) <= 0);\n  }\n\n  /**\n   * Gets the date in this month that the given Date falls on.\n   * Returns null if the given Date is in another month.\n   */\n  private _getDateInCurrentMonth(date: D | null): number | null {\n    return date && this._hasSameMonthAndYear(date, this.activeDate) ?\n        this._dateAdapter.getDate(date) : null;\n  }\n\n  /** Checks whether the 2 dates are non-null and fall within the same month of the same year. */\n  private _hasSameMonthAndYear(d1: D | null, d2: D | null): boolean {\n    return !!(d1 && d2 && this._dateAdapter.getMonth(d1) == this._dateAdapter.getMonth(d2) &&\n              this._dateAdapter.getYear(d1) == this._dateAdapter.getYear(d2));\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n\n  /** Determines whether the user has the RTL layout direction. */\n  private _isRtl() {\n    return this._dir && this._dir.value === 'rtl';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor, FocusOrigin} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  AfterViewInit,\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  OnDestroy,\n  Optional,\n  Output,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {\n  CanColor,\n  CanDisable,\n  CanDisableRipple,\n  HasTabIndex,\n  MatRipple,\n  mixinColor,\n  mixinDisabled,\n  mixinDisableRipple,\n  mixinTabIndex,\n  RippleRef,\n} from '@angular/material/core';\nimport {MAT_CHECKBOX_CLICK_ACTION, MatCheckboxClickAction} from './checkbox-config';\n\n\n// Increasing integer for generating unique ids for checkbox components.\nlet nextUniqueId = 0;\n\n/**\n * Provider Expression that allows mat-checkbox to register as a ControlValueAccessor.\n * This allows it to support [(ngModel)].\n * @docs-private\n */\nexport const MAT_CHECKBOX_CONTROL_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatCheckbox),\n  multi: true\n};\n\n/**\n * Represents the different states that require custom transitions between them.\n * @docs-private\n */\nexport enum TransitionCheckState {\n  /** The initial state of the component before any user interaction. */\n  Init,\n  /** The state representing the component when it's becoming checked. */\n  Checked,\n  /** The state representing the component when it's becoming unchecked. */\n  Unchecked,\n  /** The state representing the component when it's becoming indeterminate. */\n  Indeterminate\n}\n\n/** Change event object emitted by MatCheckbox. */\nexport class MatCheckboxChange {\n  /** The source MatCheckbox of the event. */\n  source: MatCheckbox;\n  /** The new `checked` value of the checkbox. */\n  checked: boolean;\n}\n\n// Boilerplate for applying mixins to MatCheckbox.\n/** @docs-private */\nexport class MatCheckboxBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatCheckboxMixinBase =\n  mixinTabIndex(mixinColor(mixinDisableRipple(mixinDisabled(MatCheckboxBase)), 'accent'));\n\n\n/**\n * A material design checkbox component. Supports all of the functionality of an HTML5 checkbox,\n * and exposes a similar API. A MatCheckbox can be either checked, unchecked, indeterminate, or\n * disabled. Note that all additional accessibility attributes are taken care of by the component,\n * so there is no need to provide them yourself. However, if you want to omit a label and still\n * have the checkbox be accessible, you may supply an [aria-label] input.\n * See: https://www.google.com/design/spec/components/selection-controls.html\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-checkbox',\n  templateUrl: 'checkbox.html',\n  styleUrls: ['checkbox.css'],\n  exportAs: 'matCheckbox',\n  host: {\n    'class': 'mat-checkbox',\n    '[id]': 'id',\n    '[class.mat-checkbox-indeterminate]': 'indeterminate',\n    '[class.mat-checkbox-checked]': 'checked',\n    '[class.mat-checkbox-disabled]': 'disabled',\n    '[class.mat-checkbox-label-before]': 'labelPosition == \"before\"',\n  },\n  providers: [MAT_CHECKBOX_CONTROL_VALUE_ACCESSOR],\n  inputs: ['disabled', 'disableRipple', 'color', 'tabIndex'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class MatCheckbox extends _MatCheckboxMixinBase implements ControlValueAccessor,\n    AfterViewInit, OnDestroy, CanColor, CanDisable, HasTabIndex, CanDisableRipple {\n\n  /**\n   * Attached to the aria-label attribute of the host element. In most cases, arial-labelledby will\n   * take precedence so this may be omitted.\n   */\n  @Input('aria-label') ariaLabel: string = '';\n\n  /**\n   * Users can specify the `aria-labelledby` attribute which will be forwarded to the input element\n   */\n  @Input('aria-labelledby') ariaLabelledby: string | null = null;\n\n  private _uniqueId: string = `mat-checkbox-${++nextUniqueId}`;\n\n  /** A unique id for the checkbox input. If none is supplied, it will be auto-generated. */\n  @Input() id: string = this._uniqueId;\n\n  /** Returns the unique id for the visual hidden input. */\n  get inputId(): string { return `${this.id || this._uniqueId}-input`; }\n\n  /** Whether the checkbox is required. */\n  @Input()\n  get required(): boolean { return this._required; }\n  set required(value: boolean) { this._required = coerceBooleanProperty(value); }\n  private _required: boolean;\n\n  /** Whether the label should appear after or before the checkbox. Defaults to 'after' */\n  @Input() labelPosition: 'before' | 'after' = 'after';\n\n  /** Name value will be applied to the input element if present */\n  @Input() name: string | null = null;\n\n  /** Event emitted when the checkbox's `checked` value changes. */\n  @Output() readonly change: EventEmitter<MatCheckboxChange> =\n      new EventEmitter<MatCheckboxChange>();\n\n  /** Event emitted when the checkbox's `indeterminate` value changes. */\n  @Output() readonly indeterminateChange: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n  /** The value attribute of the native input element */\n  @Input() value: string;\n\n  /** The native `<input type=\"checkbox\">` element */\n  @ViewChild('input') _inputElement: ElementRef;\n\n  /** Reference to the ripple instance of the checkbox. */\n  @ViewChild(MatRipple) ripple: MatRipple;\n\n  /**\n   * Called when the checkbox is blurred. Needed to properly implement ControlValueAccessor.\n   * @docs-private\n   */\n  _onTouched: () => any = () => {};\n\n  private _currentAnimationClass: string = '';\n\n  private _currentCheckState: TransitionCheckState = TransitionCheckState.Init;\n\n  private _controlValueAccessorChangeFn: (value: any) => void = () => {};\n\n  /** Reference to the focused state ripple. */\n  private _focusRipple: RippleRef | null;\n\n  constructor(elementRef: ElementRef,\n              private _changeDetectorRef: ChangeDetectorRef,\n              private _focusMonitor: FocusMonitor,\n              @Attribute('tabindex') tabIndex: string,\n              @Optional() @Inject(MAT_CHECKBOX_CLICK_ACTION)\n                  private _clickAction: MatCheckboxClickAction) {\n    super(elementRef);\n\n    this.tabIndex = parseInt(tabIndex) || 0;\n  }\n\n  ngAfterViewInit() {\n    this._focusMonitor\n      .monitor(this._inputElement.nativeElement)\n      .subscribe(focusOrigin => this._onInputFocusChange(focusOrigin));\n  }\n\n  ngOnDestroy() {\n    this._focusMonitor.stopMonitoring(this._inputElement.nativeElement);\n  }\n\n  /**\n   * Whether the checkbox is checked.\n   */\n  @Input()\n  get checked(): boolean { return this._checked; }\n  set checked(value: boolean) {\n    if (value != this.checked) {\n      this._checked = value;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n  private _checked: boolean = false;\n\n  /**\n   * Whether the checkbox is indeterminate. This is also known as \"mixed\" mode and can be used to\n   * represent a checkbox with three states, e.g. a checkbox that represents a nested list of\n   * checkable items. Note that whenever checkbox is manually clicked, indeterminate is immediately\n   * set to false.\n   */\n  @Input()\n  get indeterminate(): boolean { return this._indeterminate; }\n  set indeterminate(value: boolean) {\n    const changed = value != this._indeterminate;\n    this._indeterminate = value;\n\n    if (changed) {\n      if (this._indeterminate) {\n        this._transitionCheckState(TransitionCheckState.Indeterminate);\n      } else {\n        this._transitionCheckState(\n          this.checked ? TransitionCheckState.Checked : TransitionCheckState.Unchecked);\n      }\n      this.indeterminateChange.emit(this._indeterminate);\n    }\n  }\n  private _indeterminate: boolean = false;\n\n  _isRippleDisabled() {\n    return this.disableRipple || this.disabled;\n  }\n\n  /** Method being called whenever the label text changes. */\n  _onLabelTextChange() {\n    // This method is getting called whenever the label of the checkbox changes.\n    // Since the checkbox uses the OnPush strategy we need to notify it about the change\n    // that has been recognized by the cdkObserveContent directive.\n    this._changeDetectorRef.markForCheck();\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  writeValue(value: any) {\n    this.checked = !!value;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnChange(fn: (value: any) => void) {\n    this._controlValueAccessorChangeFn = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnTouched(fn: any) {\n    this._onTouched = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  setDisabledState(isDisabled: boolean) {\n    this.disabled = isDisabled;\n    this._changeDetectorRef.markForCheck();\n  }\n\n  _getAriaChecked(): 'true' | 'false' | 'mixed' {\n    return this.checked ? 'true' : (this.indeterminate ? 'mixed' : 'false');\n  }\n\n  private _transitionCheckState(newState: TransitionCheckState) {\n    let oldState = this._currentCheckState;\n    let element: HTMLElement = this._elementRef.nativeElement;\n\n    if (oldState === newState) {\n      return;\n    }\n    if (this._currentAnimationClass.length > 0) {\n      element.classList.remove(this._currentAnimationClass);\n    }\n\n    this._currentAnimationClass = this._getAnimationClassForCheckStateTransition(\n        oldState, newState);\n    this._currentCheckState = newState;\n\n    if (this._currentAnimationClass.length > 0) {\n      element.classList.add(this._currentAnimationClass);\n    }\n  }\n\n  private _emitChangeEvent() {\n    let event = new MatCheckboxChange();\n    event.source = this;\n    event.checked = this.checked;\n\n    this._controlValueAccessorChangeFn(this.checked);\n    this.change.emit(event);\n  }\n\n  /** Function is called whenever the focus changes for the input element. */\n  private _onInputFocusChange(focusOrigin: FocusOrigin) {\n    // TODO(paul): support `program`. See https://github.com/angular/material2/issues/9889\n    if (!this._focusRipple && focusOrigin === 'keyboard') {\n      this._focusRipple = this.ripple.launch(0, 0, {persistent: true});\n    } else if (!focusOrigin) {\n      this._removeFocusRipple();\n      this._onTouched();\n    }\n  }\n\n  /** Toggles the `checked` state of the checkbox. */\n  toggle(): void {\n    this.checked = !this.checked;\n  }\n\n  /**\n   * Event handler for checkbox input element.\n   * Toggles checked state if element is not disabled.\n   * Do not toggle on (change) event since IE doesn't fire change event when\n   *   indeterminate checkbox is clicked.\n   * @param event\n   */\n  _onInputClick(event: Event) {\n    // We have to stop propagation for click events on the visual hidden input element.\n    // By default, when a user clicks on a label element, a generated click event will be\n    // dispatched on the associated input element. Since we are using a label element as our\n    // root container, the click event on the `checkbox` will be executed twice.\n    // The real click event will bubble up, and the generated click event also tries to bubble up.\n    // This will lead to multiple click events.\n    // Preventing bubbling for the second event will solve that issue.\n    event.stopPropagation();\n\n    // If resetIndeterminate is false, and the current state is indeterminate, do nothing on click\n    if (!this.disabled && this._clickAction !== 'noop') {\n      // When user manually click on the checkbox, `indeterminate` is set to false.\n      if (this.indeterminate && this._clickAction !== 'check') {\n\n        Promise.resolve().then(() => {\n          this._indeterminate = false;\n          this.indeterminateChange.emit(this._indeterminate);\n        });\n      }\n\n      this.toggle();\n      this._transitionCheckState(\n          this._checked ? TransitionCheckState.Checked : TransitionCheckState.Unchecked);\n\n      // Emit our custom change event if the native input emitted one.\n      // It is important to only emit it, if the native input triggered one, because\n      // we don't want to trigger a change event, when the `checked` variable changes for example.\n      this._emitChangeEvent();\n    } else if (!this.disabled && this._clickAction === 'noop') {\n      // Reset native input when clicked with noop. The native checkbox becomes checked after\n      // click, reset it to be align with `checked` value of `mat-checkbox`.\n      this._inputElement.nativeElement.checked = this.checked;\n      this._inputElement.nativeElement.indeterminate = this.indeterminate;\n    }\n  }\n\n  /** Focuses the checkbox. */\n  focus(): void {\n    this._focusMonitor.focusVia(this._inputElement.nativeElement, 'keyboard');\n  }\n\n  _onInteractionEvent(event: Event) {\n    // We always have to stop propagation on the change event.\n    // Otherwise the change event, from the input element, will bubble up and\n    // emit its event object to the `change` output.\n    event.stopPropagation();\n  }\n\n  private _getAnimationClassForCheckStateTransition(\n      oldState: TransitionCheckState, newState: TransitionCheckState): string {\n    let animSuffix: string = '';\n\n    switch (oldState) {\n      case TransitionCheckState.Init:\n        // Handle edge case where user interacts with checkbox that does not have [(ngModel)] or\n        // [checked] bound to it.\n        if (newState === TransitionCheckState.Checked) {\n          animSuffix = 'unchecked-checked';\n        } else if (newState == TransitionCheckState.Indeterminate) {\n          animSuffix = 'unchecked-indeterminate';\n        } else {\n          return '';\n        }\n        break;\n      case TransitionCheckState.Unchecked:\n        animSuffix = newState === TransitionCheckState.Checked ?\n            'unchecked-checked' : 'unchecked-indeterminate';\n        break;\n      case TransitionCheckState.Checked:\n        animSuffix = newState === TransitionCheckState.Unchecked ?\n            'checked-unchecked' : 'checked-indeterminate';\n        break;\n      case TransitionCheckState.Indeterminate:\n        animSuffix = newState === TransitionCheckState.Checked ?\n            'indeterminate-checked' : 'indeterminate-unchecked';\n        break;\n    }\n\n    return `mat-checkbox-anim-${animSuffix}`;\n  }\n\n  /** Fades out the focus state ripple. */\n  private _removeFocusRipple(): void {\n    if (this._focusRipple) {\n      this._focusRipple.fadeOut();\n      this._focusRipple = null;\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Directive,\n  forwardRef,\n  Provider,\n} from '@angular/core';\nimport {\n  CheckboxRequiredValidator,\n  NG_VALIDATORS,\n} from '@angular/forms';\n\nexport const MAT_CHECKBOX_REQUIRED_VALIDATOR: Provider = {\n  provide: NG_VALIDATORS,\n  useExisting: forwardRef(() => MatCheckboxRequiredValidator),\n  multi: true\n};\n\n/**\n * Validator for Material checkbox's required attribute in template-driven checkbox.\n * Current CheckboxRequiredValidator only work with `input type=checkbox` and does not\n * work with `mat-checkbox`.\n */\n@Directive({\n  selector: `mat-checkbox[required][formControlName],\n             mat-checkbox[required][formControl], mat-checkbox[required][ngModel]`,\n  providers: [MAT_CHECKBOX_REQUIRED_VALIDATOR],\n  host: {'[attr.required]': 'required ? \"\" : null'}\n})\nexport class MatCheckboxRequiredValidator extends CheckboxRequiredValidator {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {ObserversModule} from '@angular/cdk/observers';\nimport {MatRippleModule, MatCommonModule} from '@angular/material/core';\nimport {MatCheckbox} from './checkbox';\nimport {MatCheckboxRequiredValidator} from './checkbox-required-validator';\nimport {A11yModule} from '@angular/cdk/a11y';\n\n@NgModule({\n  imports: [CommonModule, MatRippleModule, MatCommonModule, ObserversModule, A11yModule],\n  exports: [MatCheckbox, MatCheckboxRequiredValidator, MatCommonModule],\n  declarations: [MatCheckbox, MatCheckboxRequiredValidator],\n})\nexport class MatCheckboxModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusableOption} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {BACKSPACE, DELETE, SPACE} from '@angular/cdk/keycodes';\nimport {Platform} from '@angular/cdk/platform';\nimport {\n  ContentChild,\n  Directive,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  Output,\n} from '@angular/core';\nimport {\n  CanColor,\n  CanDisable,\n  CanDisableRipple,\n  MAT_RIPPLE_GLOBAL_OPTIONS,\n  mixinColor,\n  mixinDisabled,\n  mixinDisableRipple,\n  RippleConfig,\n  RippleGlobalOptions,\n  RippleRenderer,\n  RippleTarget\n} from '@angular/material/core';\nimport {Subject} from 'rxjs/Subject';\n\n\n/** Represents an event fired on an individual `mat-chip`. */\nexport interface MatChipEvent {\n  /** The chip the event was fired on. */\n  chip: MatChip;\n}\n\n/** Event object emitted by MatChip when selected or deselected. */\nexport class MatChipSelectionChange {\n  constructor(\n    /** Reference to the chip that emitted the event. */\n    public source: MatChip,\n    /** Whether the chip that emitted the event is selected. */\n    public selected: boolean,\n    /** Whether the selection change was a result of a user interaction. */\n    public isUserInput = false) { }\n}\n\n\n// Boilerplate for applying mixins to MatChip.\n/** @docs-private */\nexport class MatChipBase {\n  constructor(public _elementRef: ElementRef) {}\n}\n\nexport const _MatChipMixinBase =\n    mixinColor(mixinDisableRipple(mixinDisabled(MatChipBase)), 'primary');\n\nconst CHIP_ATTRIBUTE_NAMES = ['mat-basic-chip'];\n\n/**\n * Dummy directive to add CSS class to chip avatar.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-chip-avatar, [matChipAvatar]',\n  host: {'class': 'mat-chip-avatar'}\n})\nexport class MatChipAvatar {}\n\n/**\n * Dummy directive to add CSS class to chip trailing icon.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-chip-trailing-icon, [matChipTrailingIcon]',\n  host: {'class': 'mat-chip-trailing-icon'}\n})\nexport class MatChipTrailingIcon {}\n\n/**\n * Material design styled Chip component. Used inside the MatChipList component.\n */\n@Directive({\n  selector: `mat-basic-chip, [mat-basic-chip], mat-chip, [mat-chip]`,\n  inputs: ['color', 'disabled', 'disableRipple'],\n  exportAs: 'matChip',\n  host: {\n    'class': 'mat-chip',\n    '[attr.tabindex]': 'disabled ? null : -1',\n    'role': 'option',\n    '[class.mat-chip-selected]': 'selected',\n    '[class.mat-chip-with-avatar]': 'avatar',\n    '[class.mat-chip-with-trailing-icon]': 'trailingIcon || removeIcon',\n    '[class.mat-chip-disabled]': 'disabled',\n    '[attr.disabled]': 'disabled || null',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.aria-selected]': 'ariaSelected',\n    '(click)': '_handleClick($event)',\n    '(keydown)': '_handleKeydown($event)',\n    '(focus)': 'focus()',\n    '(blur)': '_blur()',\n  },\n})\nexport class MatChip extends _MatChipMixinBase implements FocusableOption, OnDestroy, CanColor,\n    CanDisable, CanDisableRipple, RippleTarget {\n  /**\n   * Ripple configuration for ripples that are launched on pointer down.\n   * @docs-private\n   */\n  rippleConfig: RippleConfig = {};\n\n  /** Reference to the RippleRenderer for the chip. */\n  private _chipRipple: RippleRenderer;\n\n  /**\n   * Whether ripples are disabled on interaction\n   * @docs-private\n   */\n  get rippleDisabled(): boolean {\n    return this.disabled || this.disableRipple;\n  }\n\n  /** Whether the chip has focus. */\n  _hasFocus: boolean = false;\n\n  /** Whether the chip list is selectable */\n  chipListSelectable: boolean = true;\n\n  /** The chip avatar */\n  @ContentChild(MatChipAvatar) avatar: MatChipAvatar;\n\n  /** The chip's trailing icon. */\n  @ContentChild(MatChipTrailingIcon) trailingIcon: MatChipTrailingIcon;\n\n  /** The chip's remove toggler. */\n  @ContentChild(forwardRef(() => MatChipRemove)) removeIcon: MatChipRemove;\n\n  /** Whether the chip is selected. */\n  @Input()\n  get selected(): boolean { return this._selected; }\n  set selected(value: boolean) {\n    this._selected = coerceBooleanProperty(value);\n    this.selectionChange.emit({\n      source: this,\n      isUserInput: false,\n      selected: value\n    });\n  }\n  protected _selected: boolean = false;\n\n  /** The value of the chip. Defaults to the content inside `<mat-chip>` tags. */\n  @Input()\n  get value(): any {\n    return this._value != undefined\n      ? this._value\n      : this._elementRef.nativeElement.textContent;\n  }\n  set value(value: any) { this._value = value; }\n  protected _value: any;\n\n  /**\n   * Whether or not the chip is selectable. When a chip is not selectable,\n   * changes to it's selected state are always ignored. By default a chip is\n   * selectable, and it becomes non-selectable if it's parent chip list is\n   * not selectable.\n   */\n  @Input()\n  get selectable(): boolean { return this._selectable && this.chipListSelectable; }\n  set selectable(value: boolean) {\n    this._selectable = coerceBooleanProperty(value);\n  }\n  protected _selectable: boolean = true;\n\n  /**\n   * Determines whether or not the chip displays the remove styling and emits (removed) events.\n   */\n  @Input()\n  get removable(): boolean { return this._removable; }\n  set removable(value: boolean) {\n    this._removable = coerceBooleanProperty(value);\n  }\n  protected _removable: boolean = true;\n\n  /** Emits when the chip is focused. */\n  readonly _onFocus = new Subject<MatChipEvent>();\n\n  /** Emits when the chip is blured. */\n  readonly _onBlur = new Subject<MatChipEvent>();\n\n  /** Emitted when the chip is selected or deselected. */\n  @Output() readonly selectionChange: EventEmitter<MatChipSelectionChange> =\n      new EventEmitter<MatChipSelectionChange>();\n\n  /** Emitted when the chip is destroyed. */\n  @Output() readonly destroyed: EventEmitter<MatChipEvent> = new EventEmitter<MatChipEvent>();\n\n  /** Emitted when a chip is to be removed. */\n  @Output() readonly removed: EventEmitter<MatChipEvent> = new EventEmitter<MatChipEvent>();\n\n  /** The ARIA selected applied to the chip. */\n  get ariaSelected(): string | null {\n    return this.selectable ? this.selected.toString() : null;\n  }\n\n  constructor(public _elementRef: ElementRef,\n              ngZone: NgZone,\n              platform: Platform,\n              @Optional() @Inject(MAT_RIPPLE_GLOBAL_OPTIONS) globalOptions: RippleGlobalOptions) {\n    super(_elementRef);\n\n    this._addHostClassName();\n\n    this._chipRipple = new RippleRenderer(this, ngZone, _elementRef, platform);\n    this._chipRipple.setupTriggerEvents(_elementRef.nativeElement);\n\n    if (globalOptions) {\n      this.rippleConfig = {\n        speedFactor: globalOptions.baseSpeedFactor,\n        animation: globalOptions.animation,\n        terminateOnPointerUp: globalOptions.terminateOnPointerUp,\n      };\n    }\n  }\n\n  _addHostClassName() {\n    // Add class for the different chips\n    for (const attr of CHIP_ATTRIBUTE_NAMES) {\n      if (this._elementRef.nativeElement.hasAttribute(attr) ||\n        this._elementRef.nativeElement.tagName.toLowerCase() === attr) {\n        (this._elementRef.nativeElement as HTMLElement).classList.add(attr);\n        return;\n      }\n    }\n    (this._elementRef.nativeElement as HTMLElement).classList.add('mat-standard-chip');\n  }\n\n  ngOnDestroy() {\n    this.destroyed.emit({chip: this});\n    this._chipRipple._removeTriggerEvents();\n  }\n\n  /** Selects the chip. */\n  select(): void {\n    this._selected = true;\n    this.selectionChange.emit({\n      source: this,\n      isUserInput: false,\n      selected: true\n    });\n  }\n\n  /** Deselects the chip. */\n  deselect(): void {\n    this._selected = false;\n    this.selectionChange.emit({\n      source: this,\n      isUserInput: false,\n      selected: false\n    });\n  }\n\n  /** Select this chip and emit selected event */\n  selectViaInteraction(): void {\n    this._selected = true;\n    // Emit select event when selected changes.\n    this.selectionChange.emit({\n      source: this,\n      isUserInput: true,\n      selected: true\n    });\n  }\n\n  /** Toggles the current selected state of this chip. */\n  toggleSelected(isUserInput: boolean = false): boolean {\n    this._selected = !this.selected;\n\n    this.selectionChange.emit({\n      source: this,\n      isUserInput,\n      selected: this._selected\n    });\n\n    return this.selected;\n  }\n\n  /** Allows for programmatic focusing of the chip. */\n  focus(): void {\n    if (!this._hasFocus) {\n      this._elementRef.nativeElement.focus();\n      this._onFocus.next({chip: this});\n    }\n    this._hasFocus = true;\n  }\n\n  /**\n   * Allows for programmatic removal of the chip. Called by the MatChipList when the DELETE or\n   * BACKSPACE keys are pressed.\n   *\n   * Informs any listeners of the removal request. Does not remove the chip from the DOM.\n   */\n  remove(): void {\n    if (this.removable) {\n      this.removed.emit({chip: this});\n    }\n  }\n\n  /** Ensures events fire properly upon click. */\n  _handleClick(event: Event) {\n    // Check disabled\n    if (this.disabled) {\n      return;\n    }\n\n    event.preventDefault();\n    event.stopPropagation();\n  }\n\n  /** Handle custom key presses. */\n  _handleKeydown(event: KeyboardEvent): void {\n    if (this.disabled) {\n      return;\n    }\n\n    switch (event.keyCode) {\n      case DELETE:\n      case BACKSPACE:\n        // If we are removable, remove the focused chip\n        this.remove();\n        // Always prevent so page navigation does not occur\n        event.preventDefault();\n        break;\n      case SPACE:\n        // If we are selectable, toggle the focused chip\n        if (this.selectable) {\n          this.toggleSelected(true);\n        }\n\n        // Always prevent space from scrolling the page since the list has focus\n        event.preventDefault();\n        break;\n    }\n  }\n\n  _blur(): void {\n    this._hasFocus = false;\n    this._onBlur.next({chip: this});\n  }\n}\n\n\n/**\n * Applies proper (click) support and adds styling for use with the Material Design \"cancel\" icon\n * available at https://material.io/icons/#ic_cancel.\n *\n * Example:\n *\n *     `<mat-chip>\n *       <mat-icon matChipRemove>cancel</mat-icon>\n *     </mat-chip>`\n *\n * You *may* use a custom icon, but you may need to override the `mat-chip-remove` positioning\n * styles to properly center the icon within the chip.\n */\n@Directive({\n  selector: '[matChipRemove]',\n  host: {\n    'class': 'mat-chip-remove mat-chip-trailing-icon',\n    '(click)': '_handleClick()',\n  }\n})\nexport class MatChipRemove {\n  constructor(protected _parentChip: MatChip) {\n  }\n\n  /** Calls the parent chip's public `remove()` method if applicable. */\n  _handleClick(): void {\n    if (this._parentChip.removable) {\n      this._parentChip.remove();\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusKeyManager} from '@angular/cdk/a11y';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {SelectionModel} from '@angular/cdk/collections';\nimport {BACKSPACE} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  DoCheck,\n  ElementRef,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Output,\n  QueryList,\n  Self,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {ControlValueAccessor, FormGroupDirective, NgControl, NgForm} from '@angular/forms';\nimport {CanUpdateErrorState, ErrorStateMatcher, mixinErrorState} from '@angular/material/core';\nimport {MatFormFieldControl} from '@angular/material/form-field';\nimport {Observable} from 'rxjs/Observable';\nimport {merge} from 'rxjs/observable/merge';\nimport {startWith} from 'rxjs/operators/startWith';\nimport {Subscription} from 'rxjs/Subscription';\nimport {MatChip, MatChipEvent, MatChipSelectionChange} from './chip';\nimport {MatChipInput} from './chip-input';\n\n// Boilerplate for applying mixins to MatChipList.\n/** @docs-private */\nexport class MatChipListBase {\n  constructor(public _defaultErrorStateMatcher: ErrorStateMatcher,\n              public _parentForm: NgForm,\n              public _parentFormGroup: FormGroupDirective,\n              /** @docs-private */\n              public ngControl: NgControl) {}\n}\nexport const _MatChipListMixinBase = mixinErrorState(MatChipListBase);\n\n\n// Increasing integer for generating unique ids for chip-list components.\nlet nextUniqueId = 0;\n\n/** Change event object that is emitted when the chip list value has changed. */\nexport class MatChipListChange {\n  constructor(\n    /** Chip list that emitted the event. */\n    public source: MatChipList,\n    /** Value of the chip list when the event was emitted. */\n    public value: any) { }\n}\n\n\n/**\n * A material design chips component (named ChipList for it's similarity to the List component).\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-chip-list',\n  template: `<div class=\"mat-chip-list-wrapper\"><ng-content></ng-content></div>`,\n  exportAs: 'matChipList',\n  host: {\n    '[attr.tabindex]': '_tabIndex',\n    '[attr.aria-describedby]': '_ariaDescribedby || null',\n    '[attr.aria-required]': 'required.toString()',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.aria-invalid]': 'errorState',\n    '[attr.aria-multiselectable]': 'multiple',\n    '[attr.role]': 'role',\n    '[class.mat-chip-list-disabled]': 'disabled',\n    '[class.mat-chip-list-invalid]': 'errorState',\n    '[class.mat-chip-list-required]': 'required',\n    '[attr.aria-orientation]': 'ariaOrientation',\n    'class': 'mat-chip-list',\n    '(focus)': 'focus()',\n    '(blur)': '_blur()',\n    '(keydown)': '_keydown($event)',\n    '[id]': '_uid',\n  },\n  providers: [{provide: MatFormFieldControl, useExisting: MatChipList}],\n  styleUrls: ['chips.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class MatChipList extends _MatChipListMixinBase implements MatFormFieldControl<any>,\n  ControlValueAccessor, AfterContentInit, DoCheck, OnInit, OnDestroy, CanUpdateErrorState {\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  readonly controlType: string = 'mat-chip-list';\n\n  /** When a chip is destroyed, we track the index so we can focus the appropriate next chip. */\n  protected _lastDestroyedIndex: number|null = null;\n\n  /** Track which chips we're listening to for focus/destruction. */\n  protected _chipSet: WeakMap<MatChip, boolean> = new WeakMap();\n\n  /** Subscription to tabbing out from the chip list. */\n  private _tabOutSubscription = Subscription.EMPTY;\n\n  /** Subscription to changes in the chip list. */\n  private _changeSubscription: Subscription;\n\n  /** Subscription to focus changes in the chips. */\n  private _chipFocusSubscription: Subscription | null;\n\n  /** Subscription to blur changes in the chips. */\n  private _chipBlurSubscription: Subscription | null;\n\n  /** Subscription to selection changes in chips. */\n  private _chipSelectionSubscription: Subscription | null;\n\n  /** Subscription to remove changes in chips. */\n  private _chipRemoveSubscription: Subscription | null;\n\n  /** The chip input to add more chips */\n  protected _chipInput: MatChipInput;\n\n  /** Uid of the chip list */\n  _uid: string = `mat-chip-list-${nextUniqueId++}`;\n\n  /** The aria-describedby attribute on the chip list for improved a11y. */\n  _ariaDescribedby: string;\n\n  /** Tab index for the chip list. */\n  _tabIndex = 0;\n\n  /**\n   * User defined tab index.\n   * When it is not null, use user defined tab index. Otherwise use _tabIndex\n   */\n  _userTabIndex: number | null = null;\n\n  /** The FocusKeyManager which handles focus. */\n  _keyManager: FocusKeyManager<MatChip>;\n\n  /** Function when touched */\n  _onTouched = () => {};\n\n  /** Function when changed */\n  _onChange: (value: any) => void = () => {};\n\n  _selectionModel: SelectionModel<MatChip>;\n\n  /** The array of selected chips inside chip list. */\n  get selected(): MatChip[] | MatChip {\n    return this.multiple ? this._selectionModel.selected : this._selectionModel.selected[0];\n  }\n\n  /** The ARIA role applied to the chip list. */\n  get role(): string | null { return this.empty ? null : 'listbox'; }\n\n  /** An object used to control when error messages are shown. */\n  @Input() errorStateMatcher: ErrorStateMatcher;\n\n  /** Whether the user should be allowed to select multiple chips. */\n  @Input()\n  get multiple(): boolean { return this._multiple; }\n  set multiple(value: boolean) {\n    this._multiple = coerceBooleanProperty(value);\n  }\n  private _multiple: boolean = false;\n\n  /**\n   * A function to compare the option values with the selected values. The first argument\n   * is a value from an option. The second is a value from the selection. A boolean\n   * should be returned.\n   */\n  @Input()\n  get compareWith(): (o1: any, o2: any) => boolean { return this._compareWith; }\n  set compareWith(fn: (o1: any, o2: any) => boolean) {\n    this._compareWith = fn;\n    if (this._selectionModel) {\n      // A different comparator means the selection could change.\n      this._initializeSelection();\n    }\n  }\n  private _compareWith = (o1: any, o2: any) => o1 === o2;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get value(): any { return this._value; }\n  set value(value: any) {\n    this.writeValue(value);\n    this._value = value;\n  }\n  protected _value: any;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  get id(): string {\n    return this._chipInput ? this._chipInput.id : this._uid;\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get required(): boolean { return this._required; }\n  set required(value: boolean) {\n    this._required = coerceBooleanProperty(value);\n    this.stateChanges.next();\n  }\n  protected _required: boolean = false;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get placeholder(): string {\n    return this._chipInput ? this._chipInput.placeholder : this._placeholder;\n  }\n  set placeholder(value: string) {\n    this._placeholder = value;\n    this.stateChanges.next();\n  }\n  protected _placeholder: string;\n\n  /** Whether any chips or the matChipInput inside of this chip-list has focus. */\n  get focused(): boolean {\n    return this.chips.some(chip => chip._hasFocus) ||\n      (this._chipInput && this._chipInput.focused);\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  get empty(): boolean {\n    return (!this._chipInput || this._chipInput.empty) && this.chips.length === 0;\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  get shouldLabelFloat(): boolean { return !this.empty || this.focused; }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get disabled(): boolean { return this.ngControl ? !!this.ngControl.disabled : this._disabled; }\n  set disabled(value: boolean) { this._disabled = coerceBooleanProperty(value); }\n  protected _disabled: boolean = false;\n\n  /** Orientation of the chip list. */\n  @Input('aria-orientation') ariaOrientation: 'horizontal' | 'vertical' = 'horizontal';\n\n  /**\n   * Whether or not this chip list is selectable. When a chip list is not selectable,\n   * the selected states for all the chips inside the chip list are always ignored.\n   */\n  @Input()\n  get selectable(): boolean { return this._selectable; }\n  set selectable(value: boolean) {\n    this._selectable = coerceBooleanProperty(value);\n    if (this.chips) {\n      this.chips.forEach(chip => chip.chipListSelectable = this._selectable);\n    }\n  }\n  protected _selectable: boolean = true;\n\n  @Input()\n  set tabIndex(value: number) {\n    this._userTabIndex = value;\n    this._tabIndex = value;\n  }\n\n  /** Combined stream of all of the child chips' selection change events. */\n  get chipSelectionChanges(): Observable<MatChipSelectionChange> {\n    return merge(...this.chips.map(chip => chip.selectionChange));\n  }\n\n  /** Combined stream of all of the child chips' focus change events. */\n  get chipFocusChanges(): Observable<MatChipEvent> {\n    return merge(...this.chips.map(chip => chip._onFocus));\n  }\n\n  /** Combined stream of all of the child chips' blur change events. */\n  get chipBlurChanges(): Observable<MatChipEvent> {\n    return merge(...this.chips.map(chip => chip._onBlur));\n  }\n\n  /** Combined stream of all of the child chips' remove change events. */\n  get chipRemoveChanges(): Observable<MatChipEvent> {\n    return merge(...this.chips.map(chip => chip.destroyed));\n  }\n\n  /** Event emitted when the selected chip list value has been changed by the user. */\n  @Output() readonly change: EventEmitter<MatChipListChange> =\n      new EventEmitter<MatChipListChange>();\n\n  /**\n   * Event that emits whenever the raw value of the chip-list changes. This is here primarily\n   * to facilitate the two-way binding for the `value` input.\n   * @docs-private\n   */\n  @Output() readonly valueChange: EventEmitter<any> = new EventEmitter<any>();\n\n  /** The chip components contained within this chip list. */\n  @ContentChildren(MatChip) chips: QueryList<MatChip>;\n\n  constructor(protected _elementRef: ElementRef,\n              private _changeDetectorRef: ChangeDetectorRef,\n              @Optional() private _dir: Directionality,\n              @Optional() _parentForm: NgForm,\n              @Optional() _parentFormGroup: FormGroupDirective,\n              _defaultErrorStateMatcher: ErrorStateMatcher,\n              /** @docs-private */\n              @Optional() @Self() public ngControl: NgControl) {\n    super(_defaultErrorStateMatcher, _parentForm, _parentFormGroup, ngControl);\n    if (this.ngControl) {\n      this.ngControl.valueAccessor = this;\n    }\n  }\n\n  ngAfterContentInit() {\n    this._keyManager = new FocusKeyManager<MatChip>(this.chips)\n      .withWrap()\n      .withVerticalOrientation()\n      .withHorizontalOrientation(this._dir ? this._dir.value : 'ltr');\n\n    // Prevents the chip list from capturing focus and redirecting\n    // it back to the first chip when the user tabs out.\n    this._tabOutSubscription = this._keyManager.tabOut.subscribe(() => {\n      this._tabIndex = -1;\n      setTimeout(() => this._tabIndex = this._userTabIndex || 0);\n    });\n\n    // When the list changes, re-subscribe\n    this._changeSubscription = this.chips.changes.pipe(startWith(null)).subscribe(() => {\n      this._resetChips();\n\n      // Reset chips selected/deselected status\n      this._initializeSelection();\n\n      // Check to see if we need to update our tab index\n      this._updateTabIndex();\n\n      // Check to see if we have a destroyed chip and need to refocus\n      this._updateFocusForDestroyedChips();\n\n      this.stateChanges.next();\n    });\n  }\n\n  ngOnInit() {\n    this._selectionModel = new SelectionModel<MatChip>(this.multiple, undefined, false);\n    this.stateChanges.next();\n  }\n\n  ngDoCheck() {\n    if (this.ngControl) {\n      // We need to re-evaluate this on every change detection cycle, because there are some\n      // error triggers that we can't subscribe to (e.g. parent form submissions). This means\n      // that whatever logic is in here has to be super lean or we risk destroying the performance.\n      this.updateErrorState();\n    }\n  }\n\n  ngOnDestroy() {\n    this._tabOutSubscription.unsubscribe();\n\n    if (this._changeSubscription) {\n      this._changeSubscription.unsubscribe();\n    }\n\n    if (this._chipRemoveSubscription) {\n      this._chipRemoveSubscription.unsubscribe();\n    }\n\n    this._dropSubscriptions();\n    this.stateChanges.complete();\n  }\n\n\n  /** Associates an HTML input element with this chip list. */\n  registerInput(inputElement: MatChipInput): void {\n    this._chipInput = inputElement;\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  setDescribedByIds(ids: string[]) { this._ariaDescribedby = ids.join(' '); }\n\n  // Implemented as part of ControlValueAccessor.\n  writeValue(value: any): void {\n    if (this.chips) {\n      this._setSelectionByValue(value, false);\n    }\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnChange(fn: (value: any) => void): void {\n    this._onChange = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnTouched(fn: () => void): void {\n    this._onTouched = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n    this._elementRef.nativeElement.disabled = isDisabled;\n    this.stateChanges.next();\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  onContainerClick() { this.focus(); }\n\n  /**\n   * Focuses the the first non-disabled chip in this chip list, or the associated input when there\n   * are no eligible chips.\n   */\n  focus(): void {\n    // TODO: ARIA says this should focus the first `selected` chip if any are selected.\n    // Focus on first element if there's no chipInput inside chip-list\n    if (this._chipInput && this._chipInput.focused) {\n      // do nothing\n    } else if (this.chips.length > 0) {\n      this._keyManager.setFirstItemActive();\n      this.stateChanges.next();\n    } else {\n      this._focusInput();\n      this.stateChanges.next();\n    }\n  }\n\n  /** Attempt to focus an input if we have one. */\n  _focusInput() {\n    if (this._chipInput) {\n      this._chipInput.focus();\n    }\n  }\n\n  /**\n   * Pass events to the keyboard manager. Available here for tests.\n   */\n  _keydown(event: KeyboardEvent) {\n    const target = event.target as HTMLElement;\n\n    // If they are on an empty input and hit backspace, focus the last chip\n    if (event.keyCode === BACKSPACE && this._isInputEmpty(target)) {\n      this._keyManager.setLastItemActive();\n      event.preventDefault();\n    } else if (target && target.classList.contains('mat-chip')) {\n      this._keyManager.onKeydown(event);\n      this.stateChanges.next();\n    }\n  }\n\n\n  /**\n   * Check the tab index as you should not be allowed to focus an empty list.\n   */\n  protected _updateTabIndex(): void {\n    // If we have 0 chips, we should not allow keyboard focus\n    this._tabIndex = this._userTabIndex || (this.chips.length === 0 ? -1 : 0);\n  }\n\n  /**\n   * Update key manager's active item when chip is deleted.\n   * If the deleted chip is the last chip in chip list, focus the new last chip.\n   * Otherwise focus the next chip in the list.\n   * Save `_lastDestroyedIndex` so we can set the correct focus.\n   */\n  protected _updateKeyManager(chip: MatChip) {\n    let chipIndex: number = this.chips.toArray().indexOf(chip);\n    if (this._isValidIndex(chipIndex)) {\n      if (chip._hasFocus) {\n        // Check whether the chip is not the last item\n        if (chipIndex < this.chips.length - 1) {\n          this._keyManager.setActiveItem(chipIndex);\n        } else if (chipIndex - 1 >= 0) {\n          this._keyManager.setActiveItem(chipIndex - 1);\n        }\n      }\n      if (this._keyManager.activeItemIndex === chipIndex) {\n        this._lastDestroyedIndex = chipIndex;\n      }\n    }\n  }\n\n  /**\n   * Checks to see if a focus chip was recently destroyed so that we can refocus the next closest\n   * one.\n   */\n  protected _updateFocusForDestroyedChips() {\n    let chipsArray = this.chips;\n\n    if (this._lastDestroyedIndex != null && chipsArray.length > 0 && this.focused) {\n      // Check whether the destroyed chip was the last item\n      const newFocusIndex = Math.min(this._lastDestroyedIndex, chipsArray.length - 1);\n      this._keyManager.setActiveItem(newFocusIndex);\n      let focusChip = this._keyManager.activeItem;\n      // Focus the chip\n      if (focusChip) {\n        focusChip.focus();\n      }\n    }\n\n    // Reset our destroyed index\n    this._lastDestroyedIndex = null;\n  }\n\n  /**\n   * Utility to ensure all indexes are valid.\n   *\n   * @param index The index to be checked.\n   * @returns True if the index is valid for our list of chips.\n   */\n  private _isValidIndex(index: number): boolean {\n    return index >= 0 && index < this.chips.length;\n  }\n\n  private _isInputEmpty(element: HTMLElement): boolean {\n    if (element && element.nodeName.toLowerCase() === 'input') {\n      let input = element as HTMLInputElement;\n      return !input.value;\n    }\n\n    return false;\n  }\n\n  _setSelectionByValue(value: any, isUserInput: boolean = true) {\n    this._clearSelection();\n    this.chips.forEach(chip => chip.deselect());\n\n    if (Array.isArray(value)) {\n      value.forEach(currentValue => this._selectValue(currentValue, isUserInput));\n      this._sortValues();\n    } else {\n      const correspondingChip = this._selectValue(value, isUserInput);\n\n      // Shift focus to the active item. Note that we shouldn't do this in multiple\n      // mode, because we don't know what chip the user interacted with last.\n      if (correspondingChip) {\n        if (isUserInput) {\n          this._keyManager.setActiveItem(correspondingChip);\n        }\n      }\n    }\n  }\n\n  /**\n   * Finds and selects the chip based on its value.\n   * @returns Chip that has the corresponding value.\n   */\n  private _selectValue(value: any, isUserInput: boolean = true): MatChip | undefined {\n\n    const correspondingChip = this.chips.find(chip => {\n      return chip.value != null && this._compareWith(chip.value,  value);\n    });\n\n    if (correspondingChip) {\n      isUserInput ? correspondingChip.selectViaInteraction() : correspondingChip.select();\n      this._selectionModel.select(correspondingChip);\n    }\n\n    return correspondingChip;\n  }\n\n  private _initializeSelection(): void {\n    // Defer setting the value in order to avoid the \"Expression\n    // has changed after it was checked\" errors from Angular.\n    Promise.resolve().then(() => {\n      if (this.ngControl || this._value) {\n        this._setSelectionByValue(this.ngControl ? this.ngControl.value : this._value, false);\n        this.stateChanges.next();\n      }\n    });\n  }\n\n  /**\n   * Deselects every chip in the list.\n   * @param skip Chip that should not be deselected.\n   */\n  private _clearSelection(skip?: MatChip): void {\n    this._selectionModel.clear();\n    this.chips.forEach(chip => {\n      if (chip !== skip) {\n        chip.deselect();\n      }\n    });\n    this.stateChanges.next();\n  }\n\n  /**\n   * Sorts the model values, ensuring that they keep the same\n   * order that they have in the panel.\n   */\n  private _sortValues(): void {\n    if (this._multiple) {\n      this._selectionModel.clear();\n\n      this.chips.forEach(chip => {\n        if (chip.selected) {\n          this._selectionModel.select(chip);\n        }\n      });\n      this.stateChanges.next();\n    }\n  }\n\n  /** Emits change event to set the model value. */\n  private _propagateChanges(fallbackValue?: any): void {\n    let valueToEmit: any = null;\n\n    if (Array.isArray(this.selected)) {\n      valueToEmit = this.selected.map(chip => chip.value);\n    } else {\n      valueToEmit = this.selected ? this.selected.value : fallbackValue;\n    }\n    this._value = valueToEmit;\n    this.change.emit(new MatChipListChange(this, valueToEmit));\n    this.valueChange.emit(valueToEmit);\n    this._onChange(valueToEmit);\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** When blurred, mark the field as touched when focus moved outside the chip list. */\n  _blur() {\n    this._keyManager.setActiveItem(-1);\n    if (!this.disabled) {\n      if (this._chipInput) {\n        // If there's a chip input, we should check whether the focus moved to chip input.\n        // If the focus is not moved to chip input, mark the field as touched. If the focus moved\n        // to chip input, do nothing.\n        // Timeout is needed to wait for the focus() event trigger on chip input.\n        setTimeout(() => {\n          if (!this.focused) {\n            this._markAsTouched();\n          }\n        });\n      } else {\n        // If there's no chip input, then mark the field as touched.\n        this._markAsTouched();\n      }\n    }\n  }\n\n  /** Mark the field as touched */\n  _markAsTouched() {\n    this._onTouched();\n    this._changeDetectorRef.markForCheck();\n    this.stateChanges.next();\n  }\n\n  private _resetChips() {\n    this._dropSubscriptions();\n    this._listenToChipsFocus();\n    this._listenToChipsSelection();\n    this._listenToChipsRemoved();\n  }\n\n\n  private _dropSubscriptions() {\n    if (this._chipFocusSubscription) {\n      this._chipFocusSubscription.unsubscribe();\n      this._chipFocusSubscription = null;\n    }\n\n    if (this._chipBlurSubscription) {\n      this._chipBlurSubscription.unsubscribe();\n      this._chipBlurSubscription = null;\n    }\n\n    if (this._chipSelectionSubscription) {\n      this._chipSelectionSubscription.unsubscribe();\n      this._chipSelectionSubscription = null;\n    }\n  }\n\n  /** Listens to user-generated selection events on each chip. */\n  private _listenToChipsSelection(): void {\n    this._chipSelectionSubscription = this.chipSelectionChanges.subscribe(event => {\n      event.source.selected\n        ? this._selectionModel.select(event.source)\n        : this._selectionModel.deselect(event.source);\n\n      // For single selection chip list, make sure the deselected value is unselected.\n      if (!this.multiple) {\n        this.chips.forEach(chip => {\n          if (!this._selectionModel.isSelected(chip) && chip.selected) {\n            chip.deselect();\n          }\n        });\n      }\n\n      if (event.isUserInput) {\n        this._propagateChanges();\n      }\n    });\n  }\n\n  /** Listens to user-generated selection events on each chip. */\n  private _listenToChipsFocus(): void {\n    this._chipFocusSubscription = this.chipFocusChanges.subscribe(event => {\n      let chipIndex: number = this.chips.toArray().indexOf(event.chip);\n\n      if (this._isValidIndex(chipIndex)) {\n        this._keyManager.updateActiveItemIndex(chipIndex);\n      }\n      this.stateChanges.next();\n    });\n\n    this._chipBlurSubscription = this.chipBlurChanges.subscribe(() => {\n      this._blur();\n      this.stateChanges.next();\n    });\n  }\n\n  private _listenToChipsRemoved(): void {\n    this._chipRemoveSubscription = this.chipRemoveChanges.subscribe(event => {\n      this._updateKeyManager(event.chip);\n    });\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {ENTER} from '@angular/cdk/keycodes';\nimport {Directive, ElementRef, EventEmitter, Input, Output} from '@angular/core';\nimport {MatChipList} from './chip-list';\n\n\n/** Represents an input event on a `matChipInput`. */\nexport interface MatChipInputEvent {\n  /** The native `<input>` element that the event is being fired for. */\n  input: HTMLInputElement;\n\n  /** The value of the input. */\n  value: string;\n}\n\n// Increasing integer for generating unique ids.\nlet nextUniqueId = 0;\n\n/**\n * Directive that adds chip-specific behaviors to an input element inside `<mat-form-field>`.\n * May be placed inside or outside of an `<mat-chip-list>`.\n */\n@Directive({\n  selector: 'input[matChipInputFor]',\n  exportAs: 'matChipInput, matChipInputFor',\n  host: {\n    'class': 'mat-chip-input mat-input-element',\n    '(keydown)': '_keydown($event)',\n    '(blur)': '_blur()',\n    '(focus)': '_focus()',\n    '(input)': '_onInput()',\n    '[id]': 'id',\n  }\n})\nexport class MatChipInput {\n  /** Whether the control is focused. */\n  focused: boolean = false;\n  _chipList: MatChipList;\n\n  /** Register input for chip list */\n  @Input('matChipInputFor')\n  set chipList(value: MatChipList) {\n    if (value) {\n      this._chipList = value;\n      this._chipList.registerInput(this);\n    }\n  }\n\n  /**\n   * Whether or not the chipEnd event will be emitted when the input is blurred.\n   */\n  @Input('matChipInputAddOnBlur')\n  get addOnBlur(): boolean { return this._addOnBlur; }\n  set addOnBlur(value: boolean) { this._addOnBlur = coerceBooleanProperty(value); }\n  _addOnBlur: boolean = false;\n\n  /**\n   * The list of key codes that will trigger a chipEnd event.\n   *\n   * Defaults to `[ENTER]`.\n   */\n  // TODO(tinayuangao): Support Set here\n  @Input('matChipInputSeparatorKeyCodes') separatorKeyCodes: number[] = [ENTER];\n\n  /** Emitted when a chip is to be added. */\n  @Output('matChipInputTokenEnd')\n  chipEnd: EventEmitter<MatChipInputEvent> = new EventEmitter<MatChipInputEvent>();\n\n  /** The input's placeholder text. */\n  @Input() placeholder: string = '';\n\n  /** Unique id for the input. */\n  @Input() id: string = `mat-chip-list-input-${nextUniqueId++}`;\n\n  /** Whether the input is empty. */\n  get empty(): boolean { return !this._inputElement.value; }\n\n  /** The native input element to which this directive is attached. */\n  protected _inputElement: HTMLInputElement;\n\n  constructor(protected _elementRef: ElementRef) {\n    this._inputElement = this._elementRef.nativeElement as HTMLInputElement;\n  }\n\n  /** Utility method to make host definition/tests more clear. */\n  _keydown(event?: KeyboardEvent) {\n    this._emitChipEnd(event);\n  }\n\n  /** Checks to see if the blur should emit the (chipEnd) event. */\n  _blur() {\n    if (this.addOnBlur) {\n      this._emitChipEnd();\n    }\n    this.focused = false;\n    // Blur the chip list if it is not focused\n    if (!this._chipList.focused) {\n      this._chipList._blur();\n    }\n    this._chipList.stateChanges.next();\n  }\n\n  _focus() {\n    this.focused = true;\n    this._chipList.stateChanges.next();\n  }\n\n  /** Checks to see if the (chipEnd) event needs to be emitted. */\n  _emitChipEnd(event?: KeyboardEvent) {\n    if (!this._inputElement.value && !!event) {\n      this._chipList._keydown(event);\n    }\n    if (!event || this.separatorKeyCodes.indexOf(event.keyCode) > -1) {\n      this.chipEnd.emit({ input: this._inputElement, value: this._inputElement.value });\n\n      if (event) {\n        event.preventDefault();\n      }\n    }\n  }\n\n  _onInput() {\n    // Let chip list know whenever the value changes.\n    this._chipList.stateChanges.next();\n  }\n\n  /** Focuses the input. */\n  focus(): void { this._inputElement.focus(); }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {PlatformModule} from '@angular/cdk/platform';\nimport {NgModule} from '@angular/core';\nimport {ErrorStateMatcher} from '@angular/material/core';\nimport {MatChip, MatChipAvatar, MatChipRemove, MatChipTrailingIcon} from './chip';\nimport {MatChipInput} from './chip-input';\nimport {MatChipList} from './chip-list';\n\nconst CHIP_DECLARATIONS = [\n  MatChipList,\n  MatChip,\n  MatChipInput,\n  MatChipRemove,\n  MatChipAvatar,\n  MatChipTrailingIcon,\n];\n\n@NgModule({\n  imports: [PlatformModule],\n  exports: CHIP_DECLARATIONS,\n  declarations: CHIP_DECLARATIONS,\n  providers: [ErrorStateMatcher]\n})\nexport class MatChipsModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ViewContainerRef} from '@angular/core';\nimport {Direction} from '@angular/cdk/bidi';\nimport {ScrollStrategy} from '@angular/cdk/overlay';\n\n/** Valid ARIA roles for a dialog element. */\nexport type DialogRole = 'dialog' | 'alertdialog';\n\n/** Possible overrides for a dialog's position. */\nexport interface DialogPosition {\n  /** Override for the dialog's top position. */\n  top?: string;\n\n  /** Override for the dialog's bottom position. */\n  bottom?: string;\n\n  /** Override for the dialog's left position. */\n  left?: string;\n\n  /** Override for the dialog's right position. */\n  right?: string;\n}\n\n/**\n * Configuration for opening a modal dialog with the MatDialog service.\n */\nexport class MatDialogConfig<D = any> {\n\n  /**\n   * Where the attached component should live in Angular's *logical* component tree.\n   * This affects what is available for injection and the change detection order for the\n   * component instantiated inside of the dialog. This does not affect where the dialog\n   * content will be rendered.\n   */\n  viewContainerRef?: ViewContainerRef;\n\n  /** ID for the dialog. If omitted, a unique one will be generated. */\n  id?: string;\n\n  /** The ARIA role of the dialog element. */\n  role?: DialogRole = 'dialog';\n\n  /** Custom class for the overlay pane. */\n  panelClass?: string | string[] = '';\n\n  /** Whether the dialog has a backdrop. */\n  hasBackdrop?: boolean = true;\n\n  /** Custom class for the backdrop, */\n  backdropClass?: string = '';\n\n  /** Whether the user can use escape or clicking outside to close a modal. */\n  disableClose?: boolean = false;\n\n  /** Width of the dialog. */\n  width?: string = '';\n\n  /** Height of the dialog. */\n  height?: string = '';\n\n  /** Min-width of the dialog. If a number is provided, pixel units are assumed. */\n  minWidth?: number | string;\n\n  /** Min-height of the dialog. If a number is provided, pixel units are assumed. */\n  minHeight?: number | string;\n\n  /** Max-width of the dialog. If a number is provided, pixel units are assumed. Defaults to 80vw */\n  maxWidth?: number | string = '80vw';\n\n  /** Max-height of the dialog. If a number is provided, pixel units are assumed. */\n  maxHeight?: number | string;\n\n  /** Position overrides. */\n  position?: DialogPosition;\n\n  /** Data being injected into the child component. */\n  data?: D | null = null;\n\n  /** Layout direction for the dialog's content. */\n  direction?: Direction;\n\n  /** ID of the element that describes the dialog. */\n  ariaDescribedBy?: string | null = null;\n\n  /** Aria label to assign to the dialog element */\n  ariaLabel?: string | null = null;\n\n  /** Whether the dialog should focus the first focusable element on open. */\n  autoFocus?: boolean = true;\n\n  /** Scroll strategy to be used for the dialog. */\n  scrollStrategy?: ScrollStrategy;\n\n  /** Whether the dialog should close when the user goes backwards/forwards in history. */\n  closeOnNavigation?: boolean = true;\n\n  // TODO(jelbourn): add configuration for lifecycle hooks, ARIA labelling.\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/** Animations used by MatDialog. */\nexport const matDialogAnimations: {\n  readonly slideDialog: AnimationTriggerMetadata;\n} = {\n  /** Animation that slides the dialog in and out of view and fades the opacity. */\n  slideDialog: trigger('slideDialog', [\n    // Note: The `enter` animation doesn't transition to something like `translate3d(0, 0, 0)\n    // scale(1)`, because for some reason specifying the transform explicitly, causes IE both\n    // to blur the dialog content and decimate the animation performance. Leaving it as `none`\n    // solves both issues.\n    state('enter', style({ transform: 'none', opacity: 1 })),\n    state('void', style({ transform: 'translate3d(0, 25%, 0) scale(0.9)', opacity: 0 })),\n    state('exit', style({ transform: 'translate3d(0, 25%, 0)', opacity: 0 })),\n    transition('* => *', animate('400ms cubic-bezier(0.25, 0.8, 0.25, 1)')),\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor} from '@angular/cdk/a11y';\nimport {Platform} from '@angular/cdk/platform';\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  OnDestroy,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {\n  CanColor,\n  CanDisable,\n  CanDisableRipple,\n  MatRipple,\n  mixinColor,\n  mixinDisabled,\n  mixinDisableRipple\n} from '@angular/material/core';\n\n/** Default color palette for round buttons (mat-fab and mat-mini-fab) */\nconst DEFAULT_ROUND_BUTTON_COLOR = 'accent';\n\n/** Default color palette for flat buttons (mat-flat-button) */\nconst DEFAULT_FLAT_BUTTON_COLOR = 'primary';\n\n/**\n * List of classes to add to MatButton instances based on host attributes to\n * style as different variants.\n */\nconst BUTTON_HOST_ATTRIBUTES = [\n  'mat-button',\n  'mat-flat-button',\n  'mat-icon-button',\n  'mat-raised-button',\n  'mat-stroked-button',\n  'mat-mini-fab',\n  'mat-fab',\n];\n\n// Boilerplate for applying mixins to MatButton.\n/** @docs-private */\nexport class MatButtonBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatButtonMixinBase = mixinColor(mixinDisabled(mixinDisableRipple(MatButtonBase)));\n\n\n/**\n * Material design button.\n */\n@Component({\n  moduleId: module.id,\n  selector: `button[mat-button], button[mat-raised-button], button[mat-icon-button],\n             button[mat-fab], button[mat-mini-fab], button[mat-stroked-button],\n             button[mat-flat-button]`,\n  exportAs: 'matButton',\n  host: {\n    '[disabled]': 'disabled || null',\n  },\n  templateUrl: 'button.html',\n  styleUrls: ['button.css'],\n  inputs: ['disabled', 'disableRipple', 'color'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatButton extends _MatButtonMixinBase\n    implements OnDestroy, CanDisable, CanColor, CanDisableRipple {\n\n  /** Whether the button is round. */\n  _isRoundButton: boolean = this._hasHostAttributes('mat-fab', 'mat-mini-fab');\n\n  /** Whether the button is icon button. */\n  _isIconButton: boolean = this._hasHostAttributes('mat-icon-button');\n\n  /** Reference to the MatRipple instance of the button. */\n  @ViewChild(MatRipple) ripple: MatRipple;\n\n  constructor(elementRef: ElementRef,\n              private _platform: Platform,\n              private _focusMonitor: FocusMonitor) {\n    super(elementRef);\n\n    // For each of the variant selectors that is prevent in the button's host\n    // attributes, add the correct corresponding class.\n    for (const attr of BUTTON_HOST_ATTRIBUTES) {\n      if (this._hasHostAttributes(attr)) {\n        (elementRef.nativeElement as HTMLElement).classList.add(attr);\n      }\n    }\n\n    this._focusMonitor.monitor(this._elementRef.nativeElement, true);\n\n    if (this._isRoundButton) {\n      this.color = DEFAULT_ROUND_BUTTON_COLOR;\n    } else if (this._hasHostAttributes('mat-flat-button')) {\n      this.color = DEFAULT_FLAT_BUTTON_COLOR;\n    }\n  }\n\n  ngOnDestroy() {\n    this._focusMonitor.stopMonitoring(this._elementRef.nativeElement);\n  }\n\n  /** Focuses the button. */\n  focus(): void {\n    this._getHostElement().focus();\n  }\n\n  _getHostElement() {\n    return this._elementRef.nativeElement;\n  }\n\n  _isRippleDisabled() {\n    return this.disableRipple || this.disabled;\n  }\n\n  /** Gets whether the button has one of the given attributes. */\n  _hasHostAttributes(...attributes: string[]) {\n    // If not on the browser, say that there are none of the attributes present.\n    // Since these only affect how the ripple displays (and ripples only happen on the client),\n    // detecting these attributes isn't necessary when not on the browser.\n    if (!this._platform.isBrowser) {\n      return false;\n    }\n\n    return attributes.some(attribute => this._getHostElement().hasAttribute(attribute));\n  }\n}\n\n/**\n * Raised Material design button.\n */\n@Component({\n  moduleId: module.id,\n  selector: `a[mat-button], a[mat-raised-button], a[mat-icon-button], a[mat-fab],\n             a[mat-mini-fab], a[mat-stroked-button], a[mat-flat-button]`,\n  exportAs: 'matButton, matAnchor',\n  host: {\n    '[attr.tabindex]': 'disabled ? -1 : 0',\n    '[attr.disabled]': 'disabled || null',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '(click)': '_haltDisabledEvents($event)',\n  },\n  inputs: ['disabled', 'disableRipple', 'color'],\n  templateUrl: 'button.html',\n  styleUrls: ['button.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatAnchor extends MatButton {\n  constructor(\n      platform: Platform,\n      focusMonitor: FocusMonitor,\n      elementRef: ElementRef) {\n    super(elementRef, platform, focusMonitor);\n  }\n\n  _haltDisabledEvents(event: Event) {\n    // A disabled button shouldn't apply any actions\n    if (this.disabled) {\n      event.preventDefault();\n      event.stopImmediatePropagation();\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {A11yModule} from '@angular/cdk/a11y';\nimport {\n  MatAnchor,\n  MatButton,\n} from './button';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatRippleModule,\n    MatCommonModule,\n    A11yModule,\n  ],\n  exports: [\n    MatButton,\n    MatAnchor,\n    MatCommonModule,\n  ],\n  declarations: [\n    MatButton,\n    MatAnchor,\n  ],\n})\nexport class MatButtonModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Input,\n  OnInit,\n  Optional,\n  Output,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {\n  CanDisable,\n  CanDisableRipple,\n  mixinDisabled,\n  mixinDisableRipple\n} from '@angular/material/core';\nimport {SelectionModel} from '@angular/cdk/collections';\n\n/** Acceptable types for a button toggle. */\nexport type ToggleType = 'checkbox' | 'radio';\n\n// Boilerplate for applying mixins to MatButtonToggleGroup and MatButtonToggleGroupMultiple\n/** @docs-private */\nexport class MatButtonToggleGroupBase {}\nexport const _MatButtonToggleGroupMixinBase = mixinDisabled(MatButtonToggleGroupBase);\n\n/**\n * Provider Expression that allows mat-button-toggle-group to register as a ControlValueAccessor.\n * This allows it to support [(ngModel)].\n * @docs-private\n */\nexport const MAT_BUTTON_TOGGLE_GROUP_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatButtonToggleGroup),\n  multi: true\n};\n\n/**\n * @deprecated Use `MatButtonToggleGroup` instead.\n * @deletion-target 7.0.0\n */\nexport class MatButtonToggleGroupMultiple {}\n\nlet _uniqueIdCounter = 0;\n\n/** Change event object emitted by MatButtonToggle. */\nexport class MatButtonToggleChange {\n  constructor(\n    /** The MatButtonToggle that emits the event. */\n    public source: MatButtonToggle,\n\n    /** The value assigned to the MatButtonToggle. */\n    public value: any) {}\n}\n\n/** Exclusive selection button toggle group that behaves like a radio-button group. */\n@Directive({\n  selector: 'mat-button-toggle-group',\n  providers: [\n    MAT_BUTTON_TOGGLE_GROUP_VALUE_ACCESSOR,\n    {provide: MatButtonToggleGroupMultiple, useExisting: MatButtonToggleGroup},\n  ],\n  inputs: ['disabled'],\n  host: {\n    '[attr.role]': 'multiple ? \"group\" : \"radiogroup\"',\n    'class': 'mat-button-toggle-group',\n    '[class.mat-button-toggle-vertical]': 'vertical'\n  },\n  exportAs: 'matButtonToggleGroup',\n})\nexport class MatButtonToggleGroup extends _MatButtonToggleGroupMixinBase implements\n  ControlValueAccessor, CanDisable, OnInit, AfterContentInit {\n\n  private _vertical = false;\n  private _multiple = false;\n  private _selectionModel: SelectionModel<MatButtonToggle>;\n\n  /**\n   * Used for storing a value temporarily, if it is assigned\n   * before the button toggles are initialized.\n   */\n  private _tempValue: any;\n\n  /**\n   * The method to be called in order to update ngModel.\n   * Now `ngModel` binding is not supported in multiple selection mode.\n   */\n  _controlValueAccessorChangeFn: (value: any) => void = () => {};\n\n  /** onTouch function registered via registerOnTouch (ControlValueAccessor). */\n  _onTouched: () => any = () => {};\n\n  /** Child button toggle buttons. */\n  @ContentChildren(forwardRef(() => MatButtonToggle)) _buttonToggles: QueryList<MatButtonToggle>;\n\n  /** `name` attribute for the underlying `input` element. */\n  @Input()\n  get name(): string { return this._name; }\n  set name(value: string) {\n    this._name = value;\n\n    if (this._buttonToggles) {\n      this._buttonToggles.forEach(toggle => toggle.name = this._name);\n    }\n  }\n  private _name = `mat-button-toggle-group-${_uniqueIdCounter++}`;\n\n  /** Whether the toggle group is vertical. */\n  @Input()\n  get vertical(): boolean { return this._vertical; }\n  set vertical(value: boolean) {\n    this._vertical = coerceBooleanProperty(value);\n  }\n\n  /** Value of the toggle group. */\n  @Input()\n  get value(): any {\n    const selected = this._selectionModel ? this._selectionModel.selected : [];\n\n    if (this.multiple) {\n      return selected.map(toggle => toggle.value);\n    }\n\n    return selected[0] ? selected[0].value : undefined;\n  }\n  set value(newValue: any) {\n    this._setSelectionByValue(newValue);\n    this.valueChange.emit(this.value);\n  }\n\n  /**\n   * Event that emits whenever the value of the group changes.\n   * Used to facilitate two-way data binding.\n   * @docs-private\n   */\n  @Output() readonly valueChange = new EventEmitter<any>();\n\n  /**\n   * Selected button toggles in the group.\n   * @deprecated\n   * @deletion-target 6.0.0\n   */\n  @Input()\n  get selected() {\n    const selected = this._selectionModel.selected;\n    return this.multiple ? selected : (selected[0] || null);\n  }\n  set selected(selected: MatButtonToggle | MatButtonToggle[] | null) {\n    if (this._buttonToggles) {\n      this._clearSelection();\n\n      if (Array.isArray(selected)) {\n        selected.forEach(toggle => toggle.checked = true);\n      } else if (selected) {\n        selected.checked = true;\n      }\n    }\n  }\n\n  /** Whether multiple button toggles can be selected. */\n  @Input()\n  get multiple(): boolean { return this._multiple; }\n  set multiple(value: boolean) {\n    this._multiple = coerceBooleanProperty(value);\n  }\n\n  /** Event emitted when the group's value changes. */\n  @Output() readonly change: EventEmitter<MatButtonToggleChange> =\n      new EventEmitter<MatButtonToggleChange>();\n\n  constructor(private _changeDetector: ChangeDetectorRef) {\n    super();\n  }\n\n  ngOnInit() {\n    this._selectionModel = new SelectionModel<MatButtonToggle>(this.multiple, undefined, false);\n  }\n\n  ngAfterContentInit() {\n    // If there was an attempt to assign a value before init, use it to set the\n    // initial selection, otherwise check the `checked` state of the toggles.\n    if (typeof this._tempValue !== 'undefined') {\n      this._setSelectionByValue(this._tempValue);\n      this._tempValue = undefined;\n    } else {\n      this._selectionModel.select(...this._buttonToggles.filter(toggle => toggle.checked));\n    }\n  }\n\n  /**\n   * Sets the model value. Implemented as part of ControlValueAccessor.\n   * @param value Value to be set to the model.\n   */\n  writeValue(value: any) {\n    this.value = value;\n    this._changeDetector.markForCheck();\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnChange(fn: (value: any) => void) {\n    this._controlValueAccessorChangeFn = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnTouched(fn: any) {\n    this._onTouched = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n\n    if (this._buttonToggles) {\n      this._buttonToggles.forEach(toggle => toggle._markForCheck());\n    }\n  }\n\n  /** Dispatch change event with current selection and group value. */\n  _emitChangeEvent(): void {\n    const selected = this.selected;\n    const source = Array.isArray(selected) ? selected[selected.length - 1] : selected;\n    const event = new MatButtonToggleChange(source!, this.value);\n    this._controlValueAccessorChangeFn(event.value);\n    this.change.emit(event);\n  }\n\n  /**\n   * Syncs a button toggle's selected state with the model value.\n   * @param toggle Toggle to be synced.\n   * @param select Whether the toggle should be selected.\n   * @param isUserInput Whether the change was a result of a user interaction.\n   */\n  _syncButtonToggle(toggle: MatButtonToggle, select: boolean, isUserInput = false) {\n    // Deselect the currently-selected toggle, if we're in single-selection\n    // mode and the button being toggled isn't selected at the moment.\n    if (!this.multiple && this.selected && !toggle.checked) {\n      (this.selected as MatButtonToggle).checked = false;\n    }\n\n    if (select) {\n      this._selectionModel.select(toggle);\n    } else {\n      this._selectionModel.deselect(toggle);\n    }\n\n    // Only emit the change event for user input.\n    if (isUserInput) {\n      this._emitChangeEvent();\n    }\n\n    // Note: we emit this one no matter whether it was a user interaction, because\n    // it is used by Angular to sync up the two-way data binding.\n    this.valueChange.emit(this.value);\n  }\n\n  /** Checks whether a button toggle is selected. */\n  _isSelected(toggle: MatButtonToggle) {\n    return this._selectionModel.isSelected(toggle);\n  }\n\n  /** Updates the selection state of the toggles in the group based on a value. */\n  private _setSelectionByValue(value: any|any[]) {\n    // If the toggles haven't been initialized yet, save the value for later.\n    if (!this._buttonToggles) {\n      this._tempValue = value;\n      return;\n    }\n\n    if (this.multiple && value) {\n      if (!Array.isArray(value)) {\n        throw Error('Value must be an array in multiple-selection mode.');\n      }\n\n      this._clearSelection();\n      value.forEach((currentValue: any) => this._selectValue(currentValue));\n    } else {\n      this._clearSelection();\n      this._selectValue(value);\n    }\n  }\n\n  /** Clears the selected toggles. */\n  private _clearSelection() {\n    this._selectionModel.clear();\n    this._buttonToggles.forEach(toggle => toggle.checked = false);\n  }\n\n  /** Selects a value if there's a toggle that corresponds to it. */\n  private _selectValue(value: any) {\n    const correspondingOption = this._buttonToggles.find(toggle => {\n      return toggle.value != null && toggle.value === value;\n    });\n\n    if (correspondingOption) {\n      correspondingOption.checked = true;\n      this._selectionModel.select(correspondingOption);\n    }\n  }\n}\n\n// Boilerplate for applying mixins to the MatButtonToggle class.\n/** @docs-private */\nexport class MatButtonToggleBase {}\nexport const _MatButtonToggleMixinBase = mixinDisableRipple(MatButtonToggleBase);\n\n/** Single button inside of a toggle group. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-button-toggle',\n  templateUrl: 'button-toggle.html',\n  styleUrls: ['button-toggle.css'],\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matButtonToggle',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  inputs: ['disableRipple'],\n  host: {\n    '[class.mat-button-toggle-standalone]': '!buttonToggleGroup',\n    '[class.mat-button-toggle-checked]': 'checked',\n    '[class.mat-button-toggle-disabled]': 'disabled',\n    'class': 'mat-button-toggle',\n    '[attr.id]': 'id',\n  }\n})\nexport class MatButtonToggle extends _MatButtonToggleMixinBase implements OnInit, CanDisableRipple {\n\n  private _isSingleSelector = false;\n  private _checked = false;\n\n  /**\n   * Attached to the aria-label attribute of the host element. In most cases, arial-labelledby will\n   * take precedence so this may be omitted.\n   */\n  @Input('aria-label') ariaLabel: string = '';\n\n  /**\n   * Users can specify the `aria-labelledby` attribute which will be forwarded to the input element\n   */\n  @Input('aria-labelledby') ariaLabelledby: string | null = null;\n\n  /** Type of the button toggle. Either 'radio' or 'checkbox'. */\n  _type: ToggleType;\n\n  @ViewChild('input') _inputElement: ElementRef;\n\n  /** The parent button toggle group (exclusive selection). Optional. */\n  buttonToggleGroup: MatButtonToggleGroup;\n\n  /** Unique ID for the underlying `input` element. */\n  get inputId(): string { return `${this.id}-input`; }\n\n  /** The unique ID for this button toggle. */\n  @Input() id: string;\n\n  /** HTML's 'name' attribute used to group radios for unique selection. */\n  @Input() name: string;\n\n  /** MatButtonToggleGroup reads this to assign its own value. */\n  @Input() value: any;\n\n  /** Whether the button is checked. */\n  @Input()\n  get checked(): boolean {\n    return this.buttonToggleGroup ? this.buttonToggleGroup._isSelected(this) : this._checked;\n  }\n  set checked(value: boolean) {\n    const newValue = coerceBooleanProperty(value);\n\n    if (newValue !== this._checked) {\n      this._checked = newValue;\n\n      if (this.buttonToggleGroup) {\n        this.buttonToggleGroup._syncButtonToggle(this, this._checked);\n      }\n\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  /** Whether the button is disabled. */\n  @Input()\n  get disabled(): boolean {\n    return this._disabled || (this.buttonToggleGroup && this.buttonToggleGroup.disabled);\n  }\n  set disabled(value: boolean) { this._disabled = coerceBooleanProperty(value); }\n  private _disabled: boolean = false;\n\n  /** Event emitted when the group value changes. */\n  @Output() readonly change: EventEmitter<MatButtonToggleChange> =\n      new EventEmitter<MatButtonToggleChange>();\n\n  constructor(@Optional() toggleGroup: MatButtonToggleGroup,\n              private _changeDetectorRef: ChangeDetectorRef,\n              private _elementRef: ElementRef,\n              private _focusMonitor: FocusMonitor) {\n    super();\n\n    this.buttonToggleGroup = toggleGroup;\n  }\n\n  ngOnInit() {\n    this._isSingleSelector = this.buttonToggleGroup && !this.buttonToggleGroup.multiple;\n    this._type = this._isSingleSelector ? 'radio' : 'checkbox';\n    this.id = this.id || `mat-button-toggle-${_uniqueIdCounter++}`;\n\n    if (this._isSingleSelector) {\n      this.name = this.buttonToggleGroup.name;\n    }\n\n    this._focusMonitor.monitor(this._elementRef.nativeElement, true);\n  }\n\n  /** Focuses the button. */\n  focus(): void {\n    this._inputElement.nativeElement.focus();\n  }\n\n  /** Checks the button toggle due to an interaction with the underlying native input. */\n  _onInputChange(event: Event) {\n    event.stopPropagation();\n\n    this._checked = this._isSingleSelector ? true : !this._checked;\n\n    if (this.buttonToggleGroup) {\n      this.buttonToggleGroup._syncButtonToggle(this, this._checked, true);\n      this.buttonToggleGroup._onTouched();\n    }\n\n    // Emit a change event when the native input does.\n    this.change.emit(new MatButtonToggleChange(this, this.value));\n  }\n\n  _onInputClick(event: Event) {\n    // We have to stop propagation for click events on the visual hidden input element.\n    // By default, when a user clicks on a label element, a generated click event will be\n    // dispatched on the associated input element. Since we are using a label element as our\n    // root container, the click event on the `slide-toggle` will be executed twice.\n    // The real click event will bubble up, and the generated click event also tries to bubble up.\n    // This will lead to multiple click events.\n    // Preventing bubbling for the second event will solve that issue.\n    event.stopPropagation();\n  }\n\n  /**\n   * Marks the button toggle as needing checking for change detection.\n   * This method is exposed because the parent button toggle group will directly\n   * update bound properties of the radio button.\n   */\n  _markForCheck() {\n    // When group value changes, the button will not be notified. Use `markForCheck` to explicit\n    // update button toggle's status\n    this._changeDetectorRef.markForCheck();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatButtonToggleGroup, MatButtonToggle} from './button-toggle';\nimport {MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {A11yModule} from '@angular/cdk/a11y';\n\n\n@NgModule({\n  imports: [MatCommonModule, MatRippleModule, A11yModule],\n  exports: [MatCommonModule, MatButtonToggleGroup, MatButtonToggle],\n  declarations: [MatButtonToggleGroup, MatButtonToggle],\n})\nexport class MatButtonToggleModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ViewEncapsulation,\n  ChangeDetectionStrategy,\n  Directive,\n  Input,\n} from '@angular/core';\n\n\n/**\n * Content of a card, needed as it's used as a selector in the API.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-card-content',\n  host: {'class': 'mat-card-content'}\n})\nexport class MatCardContent {}\n\n/**\n * Title of a card, needed as it's used as a selector in the API.\n * @docs-private\n */\n@Directive({\n  selector: `mat-card-title, [mat-card-title], [matCardTitle]`,\n  host: {\n    'class': 'mat-card-title'\n  }\n})\nexport class MatCardTitle {}\n\n/**\n * Sub-title of a card, needed as it's used as a selector in the API.\n * @docs-private\n */\n@Directive({\n  selector: `mat-card-subtitle, [mat-card-subtitle], [matCardSubtitle]`,\n  host: {\n    'class': 'mat-card-subtitle'\n  }\n})\nexport class MatCardSubtitle {}\n\n/**\n * Action section of a card, needed as it's used as a selector in the API.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-card-actions',\n  exportAs: 'matCardActions',\n  host: {\n    'class': 'mat-card-actions',\n    '[class.mat-card-actions-align-end]': 'align === \"end\"',\n  }\n})\nexport class MatCardActions {\n  /** Position of the actions inside the card. */\n  @Input() align: 'start' | 'end' = 'start';\n}\n\n/**\n * Footer of a card, needed as it's used as a selector in the API.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-card-footer',\n  host: {'class': 'mat-card-footer'}\n})\nexport class MatCardFooter {}\n\n/**\n * Image used in a card, needed to add the mat- CSS styling.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-card-image], [matCardImage]',\n  host: {'class': 'mat-card-image'}\n})\nexport class MatCardImage {}\n\n/**\n * Image used in a card, needed to add the mat- CSS styling.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-card-sm-image], [matCardImageSmall]',\n  host: {'class': 'mat-card-sm-image'}\n})\nexport class MatCardSmImage {}\n\n/**\n * Image used in a card, needed to add the mat- CSS styling.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-card-md-image], [matCardImageMedium]',\n  host: {'class': 'mat-card-md-image'}\n})\nexport class MatCardMdImage {}\n\n/**\n * Image used in a card, needed to add the mat- CSS styling.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-card-lg-image], [matCardImageLarge]',\n  host: {'class': 'mat-card-lg-image'}\n})\nexport class MatCardLgImage {}\n\n/**\n * Large image used in a card, needed to add the mat- CSS styling.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-card-xl-image], [matCardImageXLarge]',\n  host: {'class': 'mat-card-xl-image'}\n})\nexport class MatCardXlImage {}\n\n/**\n * Avatar image used in a card, needed to add the mat- CSS styling.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-card-avatar], [matCardAvatar]',\n  host: {'class': 'mat-card-avatar'}\n})\nexport class MatCardAvatar {}\n\n\n/**\n * A basic content container component that adds the styles of a Material design card.\n *\n * While this component can be used alone, it also provides a number\n * of preset styles for common card sections, including:\n * - mat-card-title\n * - mat-card-subtitle\n * - mat-card-content\n * - mat-card-actions\n * - mat-card-footer\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-card',\n  exportAs: 'matCard',\n  templateUrl: 'card.html',\n  styleUrls: ['card.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {'class': 'mat-card'}\n})\nexport class MatCard {}\n\n\n/**\n * Component intended to be used within the `<mat-card>` component. It adds styles for a\n * preset header section (i.e. a title, subtitle, and avatar layout).\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-card-header',\n  templateUrl: 'card-header.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {'class': 'mat-card-header'}\n})\nexport class MatCardHeader {}\n\n\n/**\n * Component intended to be used within the `<mat-card>` component. It adds styles for a preset\n * layout that groups an image with a title section.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-card-title-group',\n  templateUrl: 'card-title-group.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {'class': 'mat-card-title-group'}\n})\nexport class MatCardTitleGroup {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {\n  MatCard,\n  MatCardHeader,\n  MatCardTitleGroup,\n  MatCardContent,\n  MatCardTitle,\n  MatCardSubtitle,\n  MatCardActions,\n  MatCardFooter,\n  MatCardSmImage,\n  MatCardMdImage,\n  MatCardLgImage,\n  MatCardImage,\n  MatCardXlImage,\n  MatCardAvatar,\n} from './card';\n\n\n@NgModule({\n  imports: [MatCommonModule],\n  exports: [\n    MatCard,\n    MatCardHeader,\n    MatCardTitleGroup,\n    MatCardContent,\n    MatCardTitle,\n    MatCardSubtitle,\n    MatCardActions,\n    MatCardFooter,\n    MatCardSmImage,\n    MatCardMdImage,\n    MatCardLgImage,\n    MatCardImage,\n    MatCardXlImage,\n    MatCardAvatar,\n    MatCommonModule,\n  ],\n  declarations: [\n    MatCard, MatCardHeader, MatCardTitleGroup, MatCardContent, MatCardTitle, MatCardSubtitle,\n    MatCardActions, MatCardFooter, MatCardSmImage, MatCardMdImage, MatCardLgImage, MatCardImage,\n    MatCardXlImage, MatCardAvatar,\n  ],\n})\nexport class MatCardModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {InjectionToken} from '@angular/core';\n\n\n/**\n * Checkbox click action when user click on input element.\n * noop: Do not toggle checked or indeterminate.\n * check: Only toggle checked status, ignore indeterminate.\n * check-indeterminate: Toggle checked status, set indeterminate to false. Default behavior.\n * undefined: Same as `check-indeterminate`.\n */\nexport type MatCheckboxClickAction = 'noop' | 'check' | 'check-indeterminate' | undefined;\n\n/**\n * Injection token that can be used to specify the checkbox click behavior.\n */\nexport const MAT_CHECKBOX_CLICK_ACTION =\n    new InjectionToken<MatCheckboxClickAction>('mat-checkbox-click-action');\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {MatOptionModule, MatCommonModule} from '@angular/material/core';\nimport {MatAutocomplete, MAT_AUTOCOMPLETE_DEFAULT_OPTIONS} from './autocomplete';\nimport {\n  MatAutocompleteTrigger,\n  MAT_AUTOCOMPLETE_SCROLL_STRATEGY_PROVIDER,\n} from './autocomplete-trigger';\n\n@NgModule({\n  imports: [MatOptionModule, OverlayModule, MatCommonModule, CommonModule],\n  exports: [MatAutocomplete, MatOptionModule, MatAutocompleteTrigger, MatCommonModule],\n  declarations: [MatAutocomplete, MatAutocompleteTrigger],\n  providers: [\n    MAT_AUTOCOMPLETE_SCROLL_STRATEGY_PROVIDER,\n    {provide: MAT_AUTOCOMPLETE_DEFAULT_OPTIONS, useValue: false}\n  ],\n})\nexport class MatAutocompleteModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {AriaDescriber} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {DOCUMENT} from '@angular/common';\nimport {Directive, ElementRef, Inject, Input, NgZone, OnDestroy, Optional} from '@angular/core';\nimport {ThemePalette} from '@angular/material/core';\n\n\nlet nextId = 0;\n\nexport type MatBadgePosition = 'above after' | 'above before' | 'below before' | 'below after';\nexport type MatBadgeSize = 'small' | 'medium' | 'large';\n\n/** Directive to display a text badge. */\n@Directive({\n  selector: '[matBadge]',\n  host: {\n    'class': 'mat-badge',\n    '[class.mat-badge-overlap]': 'overlap',\n    '[class.mat-badge-above]': 'isAbove()',\n    '[class.mat-badge-below]': '!isAbove()',\n    '[class.mat-badge-before]': '!isAfter()',\n    '[class.mat-badge-after]': 'isAfter()',\n    '[class.mat-badge-small]': 'size === \"small\"',\n    '[class.mat-badge-medium]': 'size === \"medium\"',\n    '[class.mat-badge-large]': 'size === \"large\"',\n    '[class.mat-badge-hidden]': 'hidden',\n  },\n})\nexport class MatBadge implements OnDestroy {\n\n  /** The color of the badge. Can be `primary`, `accent`, or `warn`. */\n  @Input('matBadgeColor')\n  get color(): ThemePalette { return this._color; }\n  set color(value: ThemePalette) {\n    this._setColor(value);\n    this._color = value;\n  }\n  private _color: ThemePalette = 'primary';\n\n  /** Whether the badge should overlap its contents or not */\n  @Input('matBadgeOverlap')\n  get overlap(): boolean { return this._overlap; }\n  set overlap(val: boolean) {\n    this._overlap = coerceBooleanProperty(val);\n  }\n  private _overlap: boolean = true;\n\n  /**\n   * Position the badge should reside.\n   * Accepts any combination of 'above'|'below' and 'before'|'after'\n   */\n  @Input('matBadgePosition') position: MatBadgePosition = 'above after';\n\n  /** The content for the badge */\n  @Input('matBadge')\n  get content(): string { return this._content; }\n  set content(val: string) {\n    this._content = val;\n    this._updateTextContent();\n  }\n  private _content: string;\n\n  /** Message used to describe the decorated element via aria-describedby */\n  @Input('matBadgeDescription')\n  get description(): string { return this._description; }\n  set description(newDescription: string) {\n    if (newDescription !== this._description) {\n      this._updateHostAriaDescription(newDescription, this._description);\n      this._description = newDescription;\n    }\n  }\n  private _description: string;\n\n  /** Size of the badge. Can be 'small', 'medium', or 'large'. */\n  @Input('matBadgeSize') size: MatBadgeSize = 'medium';\n\n  /** Whether the badge is hidden. */\n  @Input('matBadgeHidden')\n  get hidden(): boolean { return this._hidden; }\n  set hidden(val: boolean) {\n    this._hidden = coerceBooleanProperty(val);\n  }\n  private _hidden: boolean;\n\n  /** Unique id for the badge */\n  _id: number = nextId++;\n\n  private _badgeElement: HTMLElement;\n\n  constructor(\n      @Optional() @Inject(DOCUMENT) private _document: any,\n      private _ngZone: NgZone,\n      private _elementRef: ElementRef,\n      private _ariaDescriber: AriaDescriber) {}\n\n  /** Whether the badge is above the host or not */\n  isAbove(): boolean {\n    return this.position.indexOf('below') === -1;\n  }\n\n  /** Whether the badge is after the host or not */\n  isAfter(): boolean {\n    return this.position.indexOf('before') === -1;\n  }\n\n  ngOnDestroy() {\n    if (this.description && this._badgeElement) {\n      this._ariaDescriber.removeDescription(this._badgeElement, this.description);\n    }\n  }\n\n  /** Injects a span element into the DOM with the content. */\n  private _updateTextContent(): HTMLSpanElement {\n    if (!this._badgeElement) {\n      this._badgeElement = this._createBadgeElement();\n    } else {\n      this._badgeElement.textContent = this.content;\n    }\n    return this._badgeElement;\n  }\n\n  /** Creates the badge element */\n  private _createBadgeElement(): HTMLElement {\n    const badgeElement = this._document.createElement('span');\n    const activeClass = 'mat-badge-active';\n\n    badgeElement.setAttribute('id', `mat-badge-content-${this._id}`);\n    badgeElement.classList.add('mat-badge-content');\n    badgeElement.textContent = this.content;\n\n    if (this.description) {\n      badgeElement.setAttribute('aria-label', this.description);\n    }\n\n    this._elementRef.nativeElement.appendChild(badgeElement);\n\n    // animate in after insertion\n    if (typeof requestAnimationFrame === 'function') {\n      this._ngZone.runOutsideAngular(() => {\n        requestAnimationFrame(() => {\n          badgeElement.classList.add(activeClass);\n        });\n      });\n    } else {\n      badgeElement.classList.add(activeClass);\n    }\n\n    return badgeElement;\n  }\n\n  /** Sets the aria-label property on the element */\n  private _updateHostAriaDescription(newDescription: string, oldDescription: string): void {\n    // ensure content available before setting label\n    const content = this._updateTextContent();\n\n    if (oldDescription) {\n      this._ariaDescriber.removeDescription(content, oldDescription);\n    }\n\n    if (newDescription) {\n      this._ariaDescriber.describe(content, newDescription);\n    }\n  }\n\n  /** Adds css theme class given the color to the component host */\n  private _setColor(colorPalette: ThemePalette) {\n    if (colorPalette !== this._color) {\n      if (this._color) {\n        this._elementRef.nativeElement.classList.remove(`mat-badge-${this._color}`);\n      }\n      if (colorPalette) {\n        this._elementRef.nativeElement.classList.add(`mat-badge-${colorPalette}`);\n      }\n    }\n  }\n\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {A11yModule} from '@angular/cdk/a11y';\nimport {MatBadge} from './badge';\n\n\n@NgModule({\n  imports: [\n    MatCommonModule,\n    A11yModule,\n  ],\n  exports: [\n    MatBadge,\n  ],\n  declarations: [\n    MatBadge,\n  ],\n})\nexport class MatBadgeModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\nimport {AnimationCurves, AnimationDurations} from '@angular/material/core';\n\n/** Animations used by the Material bottom sheet. */\nexport const matBottomSheetAnimations: {\n  readonly bottomSheetState: AnimationTriggerMetadata;\n} = {\n  /** Animation that shows and hides a bottom sheet. */\n  bottomSheetState: trigger('state', [\n    state('void, hidden', style({transform: 'translateY(100%)'})),\n    state('visible', style({transform: 'translateY(0%)'})),\n    transition('visible => void, visible => hidden',\n        animate(`${AnimationDurations.COMPLEX} ${AnimationCurves.ACCELERATION_CURVE}`)),\n    transition('void => visible',\n        animate(`${AnimationDurations.EXITING} ${AnimationCurves.DECELERATION_CURVE}`)),\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ComponentRef,\n  EmbeddedViewRef,\n  ViewChild,\n  OnDestroy,\n  ElementRef,\n  ChangeDetectionStrategy,\n  ViewEncapsulation,\n  ChangeDetectorRef,\n  EventEmitter,\n  Inject,\n  Optional,\n} from '@angular/core';\nimport {AnimationEvent} from '@angular/animations';\nimport {\n  BasePortalOutlet,\n  ComponentPortal,\n  TemplatePortal,\n  CdkPortalOutlet,\n} from '@angular/cdk/portal';\nimport {BreakpointObserver, Breakpoints} from '@angular/cdk/layout';\nimport {MatBottomSheetConfig} from './bottom-sheet-config';\nimport {matBottomSheetAnimations} from './bottom-sheet-animations';\nimport {Subscription} from 'rxjs/Subscription';\nimport {DOCUMENT} from '@angular/common';\nimport {FocusTrap, FocusTrapFactory} from '@angular/cdk/a11y';\n\n// TODO(crisbeto): consolidate some logic between this, MatDialog and MatSnackBar\n\n/**\n * Internal component that wraps user-provided bottom sheet content.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-bottom-sheet-container',\n  templateUrl: 'bottom-sheet-container.html',\n  styleUrls: ['bottom-sheet-container.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  animations: [matBottomSheetAnimations.bottomSheetState],\n  host: {\n    'class': 'mat-bottom-sheet-container',\n    'tabindex': '-1',\n    'role': 'dialog',\n    '[attr.aria-label]': 'bottomSheetConfig?.ariaLabel',\n    '[@state]': '_animationState',\n    '(@state.start)': '_onAnimationStart($event)',\n    '(@state.done)': '_onAnimationDone($event)'\n  },\n})\nexport class MatBottomSheetContainer extends BasePortalOutlet implements OnDestroy {\n  private _breakpointSubscription: Subscription;\n\n  /** The portal outlet inside of this container into which the content will be loaded. */\n  @ViewChild(CdkPortalOutlet) _portalOutlet: CdkPortalOutlet;\n\n  /** The state of the bottom sheet animations. */\n  _animationState: 'void' | 'visible' | 'hidden' = 'void';\n\n  /** Emits whenever the state of the animation changes. */\n  _animationStateChanged = new EventEmitter<AnimationEvent>();\n\n  /** The bottom sheet configuration. */\n  bottomSheetConfig: MatBottomSheetConfig;\n\n  /** The class that traps and manages focus within the bottom sheet. */\n  private _focusTrap: FocusTrap;\n\n  /** Element that was focused before the bottom sheet was opened. */\n  private _elementFocusedBeforeOpened: HTMLElement | null = null;\n\n  /** Server-side rendering-compatible reference to the global document object. */\n  private _document: Document;\n\n  /** Whether the component has been destroyed. */\n  private _destroyed: boolean;\n\n  constructor(\n    private _elementRef: ElementRef,\n    private _changeDetectorRef: ChangeDetectorRef,\n    private _focusTrapFactory: FocusTrapFactory,\n    breakpointObserver: BreakpointObserver,\n    @Optional() @Inject(DOCUMENT) document: any) {\n    super();\n\n    this._document = document;\n    this._breakpointSubscription = breakpointObserver\n      .observe([Breakpoints.Medium, Breakpoints.Large, Breakpoints.XLarge])\n      .subscribe(() => {\n        this._toggleClass('mat-bottom-sheet-container-medium',\n            breakpointObserver.isMatched(Breakpoints.Medium));\n        this._toggleClass('mat-bottom-sheet-container-large',\n            breakpointObserver.isMatched(Breakpoints.Large));\n        this._toggleClass('mat-bottom-sheet-container-xlarge',\n            breakpointObserver.isMatched(Breakpoints.XLarge));\n      });\n  }\n\n  /** Attach a component portal as content to this bottom sheet container. */\n  attachComponentPortal<T>(portal: ComponentPortal<T>): ComponentRef<T> {\n    this._validatePortalAttached();\n    this._setPanelClass();\n    this._savePreviouslyFocusedElement();\n    return this._portalOutlet.attachComponentPortal(portal);\n  }\n\n  /** Attach a template portal as content to this bottom sheet container. */\n  attachTemplatePortal<C>(portal: TemplatePortal<C>): EmbeddedViewRef<C> {\n    this._validatePortalAttached();\n    this._setPanelClass();\n    this._savePreviouslyFocusedElement();\n    return this._portalOutlet.attachTemplatePortal(portal);\n  }\n\n  /** Begin animation of bottom sheet entrance into view. */\n  enter(): void {\n    if (!this._destroyed) {\n      this._animationState = 'visible';\n      this._changeDetectorRef.detectChanges();\n    }\n  }\n\n  /** Begin animation of the bottom sheet exiting from view. */\n  exit(): void {\n    if (!this._destroyed) {\n      this._animationState = 'hidden';\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  ngOnDestroy() {\n    this._breakpointSubscription.unsubscribe();\n    this._destroyed = true;\n  }\n\n  _onAnimationDone(event: AnimationEvent) {\n    if (event.toState === 'visible') {\n      this._trapFocus();\n    } else if (event.toState === 'hidden') {\n      this._restoreFocus();\n    }\n\n    this._animationStateChanged.emit(event);\n  }\n\n  _onAnimationStart(event: AnimationEvent) {\n    this._animationStateChanged.emit(event);\n  }\n\n  private _toggleClass(cssClass: string, add: boolean) {\n    const classList = this._elementRef.nativeElement.classList;\n    add ? classList.add(cssClass) : classList.remove(cssClass);\n  }\n\n  private _validatePortalAttached() {\n    if (this._portalOutlet.hasAttached()) {\n      throw Error('Attempting to attach bottom sheet content after content is already attached');\n    }\n  }\n\n  private _setPanelClass() {\n    const element: HTMLElement = this._elementRef.nativeElement;\n    const panelClass = this.bottomSheetConfig.panelClass;\n\n    if (Array.isArray(panelClass)) {\n      // Note that we can't use a spread here, because IE doesn't support multiple arguments.\n      panelClass.forEach(cssClass => element.classList.add(cssClass));\n    } else if (panelClass) {\n      element.classList.add(panelClass);\n    }\n  }\n\n\n  /** Moves the focus inside the focus trap. */\n  private _trapFocus() {\n    if (!this._focusTrap) {\n      this._focusTrap = this._focusTrapFactory.create(this._elementRef.nativeElement);\n    }\n\n    this._focusTrap.focusInitialElementWhenReady();\n  }\n\n  /** Restores focus to the element that was focused before the bottom sheet opened. */\n  private _restoreFocus() {\n    const toFocus = this._elementFocusedBeforeOpened;\n\n    // We need the extra check, because IE can set the `activeElement` to null in some cases.\n    if (toFocus && typeof toFocus.focus === 'function') {\n      toFocus.focus();\n    }\n\n    if (this._focusTrap) {\n      this._focusTrap.destroy();\n    }\n  }\n\n  /** Saves a reference to the element that was focused before the bottom sheet was opened. */\n  private _savePreviouslyFocusedElement() {\n    this._elementFocusedBeforeOpened = this._document.activeElement as HTMLElement;\n    Promise.resolve().then(() => this._elementRef.nativeElement.focus());\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ViewContainerRef, InjectionToken} from '@angular/core';\nimport {Direction} from '@angular/cdk/bidi';\n\n/** Injection token that can be used to access the data that was passed in to a bottom sheet. */\nexport const MAT_BOTTOM_SHEET_DATA = new InjectionToken<any>('MatBottomSheetData');\n\n/**\n * Configuration used when opening a bottom sheet.\n */\nexport class MatBottomSheetConfig<D = any> {\n  /** The view container to place the overlay for the bottom sheet into. */\n  viewContainerRef?: ViewContainerRef;\n\n  /** Extra CSS classes to be added to the bottom sheet container. */\n  panelClass?: string | string[];\n\n  /** Text layout direction for the bottom sheet. */\n  direction?: Direction;\n\n  /** Data being injected into the child component. */\n  data?: D | null = null;\n\n  /** Whether the bottom sheet has a backdrop. */\n  hasBackdrop?: boolean = true;\n\n  /** Custom class for the backdrop. */\n  backdropClass?: string;\n\n  /** Whether the user can use escape or clicking outside to close the bottom sheet. */\n  disableClose?: boolean = false;\n\n  /** Aria label to assign to the bottom sheet element. */\n  ariaLabel?: string | null = null;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {OverlayRef} from '@angular/cdk/overlay';\nimport {ESCAPE} from '@angular/cdk/keycodes';\nimport {Observable} from 'rxjs/Observable';\nimport {Subject} from 'rxjs/Subject';\nimport {merge} from 'rxjs/observable/merge';\nimport {filter} from 'rxjs/operators/filter';\nimport {take} from 'rxjs/operators/take';\nimport {MatBottomSheetContainer} from './bottom-sheet-container';\n\n/**\n * Reference to a bottom sheet dispatched from the bottom sheet service.\n */\nexport class MatBottomSheetRef<T = any, R = any> {\n  /** Instance of the component making up the content of the bottom sheet. */\n  instance: T;\n\n  /**\n   * Instance of the component into which the bottom sheet content is projected.\n   * @docs-private\n   */\n  containerInstance: MatBottomSheetContainer;\n\n  /** Subject for notifying the user that the bottom sheet has been dismissed. */\n  private readonly _afterDismissed = new Subject<R | undefined>();\n\n  /** Subject for notifying the user that the bottom sheet has opened and appeared. */\n  private readonly _afterOpened = new Subject<void>();\n\n  /** Result to be passed down to the `afterDismissed` stream. */\n  private _result: R | undefined;\n\n  constructor(containerInstance: MatBottomSheetContainer, private _overlayRef: OverlayRef) {\n    this.containerInstance = containerInstance;\n\n    // Emit when opening animation completes\n    containerInstance._animationStateChanged.pipe(\n      filter(event => event.phaseName === 'done' && event.toState === 'visible'),\n      take(1)\n    )\n    .subscribe(() => {\n      this._afterOpened.next();\n      this._afterOpened.complete();\n    });\n\n    // Dispose overlay when closing animation is complete\n    containerInstance._animationStateChanged.pipe(\n      filter(event => event.phaseName === 'done' && event.toState === 'hidden'),\n      take(1)\n    )\n    .subscribe(() => {\n      this._overlayRef.dispose();\n      this._afterDismissed.next(this._result);\n      this._afterDismissed.complete();\n    });\n\n    if (!containerInstance.bottomSheetConfig.disableClose) {\n      merge(\n        _overlayRef.backdropClick(),\n        _overlayRef._keydownEvents.pipe(filter(event => event.keyCode === ESCAPE))\n      ).subscribe(() => this.dismiss());\n    }\n  }\n\n  /**\n   * Dismisses the bottom sheet.\n   * @param result Data to be passed back to the bottom sheet opener.\n   */\n  dismiss(result?: R): void {\n    if (!this._afterDismissed.closed) {\n      // Transition the backdrop in parallel to the bottom sheet.\n      this.containerInstance._animationStateChanged.pipe(\n        filter(event => event.phaseName === 'start'),\n        take(1)\n      ).subscribe(() => this._overlayRef.detachBackdrop());\n\n      this._result = result;\n      this.containerInstance.exit();\n    }\n  }\n\n  /** Gets an observable that is notified when the bottom sheet is finished closing. */\n  afterDismissed(): Observable<R | undefined> {\n    return this._afterDismissed.asObservable();\n  }\n\n  /** Gets an observable that is notified when the bottom sheet has opened and appeared. */\n  afterOpened(): Observable<void> {\n    return this._afterOpened.asObservable();\n  }\n\n  /**\n   * Gets an observable that emits when the overlay's backdrop has been clicked.\n   */\n  backdropClick(): Observable<MouseEvent> {\n    return this._overlayRef.backdropClick();\n  }\n\n  /**\n   * Gets an observable that emits when keydown events are targeted on the overlay.\n   */\n  keydownEvents(): Observable<KeyboardEvent> {\n    return this._overlayRef.keydownEvents();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Overlay, OverlayConfig, OverlayRef} from '@angular/cdk/overlay';\nimport {ComponentPortal, TemplatePortal, ComponentType, PortalInjector} from '@angular/cdk/portal';\nimport {ComponentRef, TemplateRef, Injectable, Injector, Optional, SkipSelf} from '@angular/core';\nimport {MatBottomSheetConfig, MAT_BOTTOM_SHEET_DATA} from './bottom-sheet-config';\nimport {MatBottomSheetRef} from './bottom-sheet-ref';\nimport {MatBottomSheetContainer} from './bottom-sheet-container';\nimport {of as observableOf} from 'rxjs/observable/of';\nimport {Directionality} from '@angular/cdk/bidi';\n\n/**\n * Service to trigger Material Design bottom sheets.\n */\n@Injectable()\nexport class MatBottomSheet {\n  private _bottomSheetRefAtThisLevel: MatBottomSheetRef<any> | null = null;\n\n  /** Reference to the currently opened bottom sheet. */\n  get _openedBottomSheetRef(): MatBottomSheetRef<any> | null {\n    const parent = this._parentBottomSheet;\n    return parent ? parent._openedBottomSheetRef : this._bottomSheetRefAtThisLevel;\n  }\n\n  set _openedBottomSheetRef(value: MatBottomSheetRef<any> | null) {\n    if (this._parentBottomSheet) {\n      this._parentBottomSheet._openedBottomSheetRef = value;\n    } else {\n      this._bottomSheetRefAtThisLevel = value;\n    }\n  }\n\n  constructor(\n      private _overlay: Overlay,\n      private _injector: Injector,\n      @Optional() @SkipSelf() private _parentBottomSheet: MatBottomSheet) {}\n\n  open<T, D = any, R = any>(component: ComponentType<T>,\n                   config?: MatBottomSheetConfig<D>): MatBottomSheetRef<T, R>;\n  open<T, D = any, R = any>(template: TemplateRef<T>,\n                   config?: MatBottomSheetConfig<D>): MatBottomSheetRef<T, R>;\n\n  open<T, D = any, R = any>(componentOrTemplateRef: ComponentType<T> | TemplateRef<T>,\n                   config?: MatBottomSheetConfig<D>): MatBottomSheetRef<T, R> {\n\n    const _config = _applyConfigDefaults(config);\n    const overlayRef = this._createOverlay(_config);\n    const container = this._attachContainer(overlayRef, _config);\n    const ref = new MatBottomSheetRef<T, R>(container, overlayRef);\n\n    if (componentOrTemplateRef instanceof TemplateRef) {\n      container.attachTemplatePortal(new TemplatePortal<T>(componentOrTemplateRef, null!, {\n        $implicit: _config.data,\n        bottomSheetRef: ref\n      } as any));\n    } else {\n      const portal = new ComponentPortal(componentOrTemplateRef, undefined,\n            this._createInjector(_config, ref));\n      const contentRef = container.attachComponentPortal(portal);\n      ref.instance = contentRef.instance;\n    }\n\n    // When the bottom sheet is dismissed, clear the reference to it.\n    ref.afterDismissed().subscribe(() => {\n      // Clear the bottom sheet ref if it hasn't already been replaced by a newer one.\n      if (this._openedBottomSheetRef == ref) {\n        this._openedBottomSheetRef = null;\n      }\n    });\n\n    if (this._openedBottomSheetRef) {\n      // If a bottom sheet is already in view, dismiss it and enter the\n      // new bottom sheet after exit animation is complete.\n      this._openedBottomSheetRef.afterDismissed().subscribe(() => ref.containerInstance.enter());\n      this._openedBottomSheetRef.dismiss();\n    } else {\n      // If no bottom sheet is in view, enter the new bottom sheet.\n      ref.containerInstance.enter();\n    }\n\n    this._openedBottomSheetRef = ref;\n\n    return ref;\n  }\n\n  /**\n   * Dismisses the currently-visible bottom sheet.\n   */\n  dismiss(): void {\n    if (this._openedBottomSheetRef) {\n      this._openedBottomSheetRef.dismiss();\n    }\n  }\n\n  /**\n   * Attaches the bottom sheet container component to the overlay.\n   */\n  private _attachContainer(overlayRef: OverlayRef,\n                           config: MatBottomSheetConfig): MatBottomSheetContainer {\n    const containerPortal = new ComponentPortal(MatBottomSheetContainer, config.viewContainerRef);\n    const containerRef: ComponentRef<MatBottomSheetContainer> = overlayRef.attach(containerPortal);\n    containerRef.instance.bottomSheetConfig = config;\n    return containerRef.instance;\n  }\n\n  /**\n   * Creates a new overlay and places it in the correct location.\n   * @param config The user-specified bottom sheet config.\n   */\n  private _createOverlay(config: MatBottomSheetConfig): OverlayRef {\n    const overlayConfig = new OverlayConfig({\n      direction: config.direction,\n      hasBackdrop: config.hasBackdrop,\n      maxWidth: '100%',\n      scrollStrategy: this._overlay.scrollStrategies.block(),\n      positionStrategy: this._overlay.position()\n        .global()\n        .centerHorizontally()\n        .bottom('0')\n    });\n\n    if (config.backdropClass) {\n      overlayConfig.backdropClass = config.backdropClass;\n    }\n\n    return this._overlay.create(overlayConfig);\n  }\n\n  /**\n   * Creates an injector to be used inside of a bottom sheet component.\n   * @param config Config that was used to create the bottom sheet.\n   * @param bottomSheetRef Reference to the bottom sheet.\n   */\n  private _createInjector<T>(config: MatBottomSheetConfig,\n                             bottomSheetRef: MatBottomSheetRef<T>): PortalInjector {\n\n    const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n    const injectionTokens = new WeakMap();\n\n    injectionTokens.set(MatBottomSheetRef, bottomSheetRef);\n    injectionTokens.set(MAT_BOTTOM_SHEET_DATA, config.data);\n\n    if (!userInjector || !userInjector.get(Directionality, null)) {\n      injectionTokens.set(Directionality, {\n        value: config.direction,\n        change: observableOf()\n      });\n    }\n\n    return new PortalInjector(userInjector || this._injector, injectionTokens);\n  }\n}\n\n/**\n * Applies default options to the bottom sheet config.\n * @param config The configuration to which the defaults will be applied.\n * @returns The new configuration object with defaults applied.\n */\nfunction _applyConfigDefaults(config?: MatBottomSheetConfig): MatBottomSheetConfig {\n  return {...new MatBottomSheetConfig(), ...config};\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {MatCommonModule} from '@angular/material/core';\nimport {A11yModule} from '@angular/cdk/a11y';\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {LayoutModule} from '@angular/cdk/layout';\nimport {MatBottomSheetContainer} from './bottom-sheet-container';\nimport {MatBottomSheet} from './bottom-sheet';\n\n\n@NgModule({\n  imports: [\n    A11yModule,\n    CommonModule,\n    OverlayModule,\n    MatCommonModule,\n    PortalModule,\n    LayoutModule,\n  ],\n  exports: [MatBottomSheetContainer, MatCommonModule],\n  declarations: [MatBottomSheetContainer],\n  entryComponents: [MatBottomSheetContainer],\n  providers: [MatBottomSheet],\n})\nexport class MatBottomSheetModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {ENTER, SPACE} from '@angular/cdk/keycodes';\nimport {Subject} from 'rxjs/Subject';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  EventEmitter,\n  Input,\n  Optional,\n  Output,\n  QueryList,\n  ViewEncapsulation,\n  InjectionToken,\n  Inject,\n  AfterViewChecked,\n} from '@angular/core';\nimport {MatOptgroup} from './optgroup';\n\n/**\n * Option IDs need to be unique across components, so this counter exists outside of\n * the component definition.\n */\nlet _uniqueIdCounter = 0;\n\n/** Event object emitted by MatOption when selected or deselected. */\nexport class MatOptionSelectionChange {\n  constructor(\n    /** Reference to the option that emitted the event. */\n    public source: MatOption,\n    /** Whether the change in the option's value was a result of a user action. */\n    public isUserInput = false) { }\n}\n\n/**\n * Describes a parent component that manages a list of options.\n * Contains properties that the options can inherit.\n * @docs-private\n */\nexport interface MatOptionParentComponent {\n  disableRipple?: boolean;\n  multiple?: boolean;\n}\n\n/**\n * Injection token used to provide the parent component to options.\n */\nexport const MAT_OPTION_PARENT_COMPONENT =\n    new InjectionToken<MatOptionParentComponent>('MAT_OPTION_PARENT_COMPONENT');\n\n/**\n * Single option inside of a `<mat-select>` element.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-option',\n  exportAs: 'matOption',\n  host: {\n    'role': 'option',\n    '[attr.tabindex]': '_getTabIndex()',\n    '[class.mat-selected]': 'selected',\n    '[class.mat-option-multiple]': 'multiple',\n    '[class.mat-active]': 'active',\n    '[id]': 'id',\n    '[attr.aria-selected]': 'selected.toString()',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[class.mat-option-disabled]': 'disabled',\n    '(click)': '_selectViaInteraction()',\n    '(keydown)': '_handleKeydown($event)',\n    'class': 'mat-option',\n  },\n  styleUrls: ['option.css'],\n  templateUrl: 'option.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatOption implements AfterViewChecked {\n  private _selected = false;\n  private _active = false;\n  private _disabled = false;\n  private _id = `mat-option-${_uniqueIdCounter++}`;\n  private _mostRecentViewValue = '';\n\n  /** Whether the wrapping component is in multiple selection mode. */\n  get multiple() { return this._parent && this._parent.multiple; }\n\n  /** The unique ID of the option. */\n  get id(): string { return this._id; }\n\n  /** Whether or not the option is currently selected. */\n  get selected(): boolean { return this._selected; }\n\n  /** The form value of the option. */\n  @Input() value: any;\n\n  /** Whether the option is disabled. */\n  @Input()\n  get disabled() { return (this.group && this.group.disabled) || this._disabled; }\n  set disabled(value: any) { this._disabled = coerceBooleanProperty(value); }\n\n  /** Whether ripples for the option are disabled. */\n  get disableRipple() { return this._parent && this._parent.disableRipple; }\n\n  /** Event emitted when the option is selected or deselected. */\n  @Output() readonly onSelectionChange = new EventEmitter<MatOptionSelectionChange>();\n\n  /** Emits when the state of the option changes and any parents have to be notified. */\n  readonly _stateChanges = new Subject<void>();\n\n  constructor(\n    private _element: ElementRef,\n    private _changeDetectorRef: ChangeDetectorRef,\n    @Optional() @Inject(MAT_OPTION_PARENT_COMPONENT) private _parent: MatOptionParentComponent,\n    @Optional() readonly group: MatOptgroup) {}\n\n  /**\n   * Whether or not the option is currently active and ready to be selected.\n   * An active option displays styles as if it is focused, but the\n   * focus is actually retained somewhere else. This comes in handy\n   * for components like autocomplete where focus must remain on the input.\n   */\n  get active(): boolean {\n    return this._active;\n  }\n\n  /**\n   * The displayed value of the option. It is necessary to show the selected option in the\n   * select's trigger.\n   */\n  get viewValue(): string {\n    // TODO(kara): Add input property alternative for node envs.\n    return (this._getHostElement().textContent || '').trim();\n  }\n\n  /** Selects the option. */\n  select(): void {\n    this._selected = true;\n    this._changeDetectorRef.markForCheck();\n    this._emitSelectionChangeEvent();\n  }\n\n  /** Deselects the option. */\n  deselect(): void {\n    this._selected = false;\n    this._changeDetectorRef.markForCheck();\n    this._emitSelectionChangeEvent();\n  }\n\n  /** Sets focus onto this option. */\n  focus(): void {\n    const element = this._getHostElement();\n\n    if (typeof element.focus === 'function') {\n      element.focus();\n    }\n  }\n\n  /**\n   * This method sets display styles on the option to make it appear\n   * active. This is used by the ActiveDescendantKeyManager so key\n   * events will display the proper options as active on arrow key events.\n   */\n  setActiveStyles(): void {\n    if (!this._active) {\n      this._active = true;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  /**\n   * This method removes display styles on the option that made it appear\n   * active. This is used by the ActiveDescendantKeyManager so key\n   * events will display the proper options as active on arrow key events.\n   */\n  setInactiveStyles(): void {\n    if (this._active) {\n      this._active = false;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  /** Gets the label to be used when determining whether the option should be focused. */\n  getLabel(): string {\n    return this.viewValue;\n  }\n\n  /** Ensures the option is selected when activated from the keyboard. */\n  _handleKeydown(event: KeyboardEvent): void {\n    if (event.keyCode === ENTER || event.keyCode === SPACE) {\n      this._selectViaInteraction();\n\n      // Prevent the page from scrolling down and form submits.\n      event.preventDefault();\n    }\n  }\n\n  /**\n   * `Selects the option while indicating the selection came from the user. Used to\n   * determine if the select's view -> model callback should be invoked.`\n   */\n  _selectViaInteraction(): void {\n    if (!this.disabled) {\n      this._selected = this.multiple ? !this._selected : true;\n      this._changeDetectorRef.markForCheck();\n      this._emitSelectionChangeEvent(true);\n    }\n  }\n\n  /** Returns the correct tabindex for the option depending on disabled state. */\n  _getTabIndex(): string {\n    return this.disabled ? '-1' : '0';\n  }\n\n  /** Gets the host DOM element. */\n  _getHostElement(): HTMLElement {\n    return this._element.nativeElement;\n  }\n\n  ngAfterViewChecked() {\n    // Since parent components could be using the option's label to display the selected values\n    // (e.g. `mat-select`) and they don't have a way of knowing if the option's label has changed\n    // we have to check for changes in the DOM ourselves and dispatch an event. These checks are\n    // relatively cheap, however we still limit them only to selected options in order to avoid\n    // hitting the DOM too often.\n    if (this._selected) {\n      const viewValue = this.viewValue;\n\n      if (viewValue !== this._mostRecentViewValue) {\n        this._mostRecentViewValue = viewValue;\n        this._stateChanges.next();\n      }\n    }\n  }\n\n  /** Emits the selection change event. */\n  private _emitSelectionChangeEvent(isUserInput = false): void {\n    this.onSelectionChange.emit(new MatOptionSelectionChange(this, isUserInput));\n  }\n}\n\n/**\n * Counts the amount of option group labels that precede the specified option.\n * @param optionIndex Index of the option at which to start counting.\n * @param options Flat list of all of the options.\n * @param optionGroups Flat list of all of the option groups.\n * @docs-private\n */\nexport function _countGroupLabelsBeforeOption(optionIndex: number, options: QueryList<MatOption>,\n  optionGroups: QueryList<MatOptgroup>): number {\n\n  if (optionGroups.length) {\n    let optionsArray = options.toArray();\n    let groups = optionGroups.toArray();\n    let groupCounter = 0;\n\n    for (let i = 0; i < optionIndex + 1; i++) {\n      if (optionsArray[i].group && optionsArray[i].group === groups[groupCounter]) {\n        groupCounter++;\n      }\n    }\n\n    return groupCounter;\n  }\n\n  return 0;\n}\n\n/**\n * Determines the position to which to scroll a panel in order for an option to be into view.\n * @param optionIndex Index of the option to be scrolled into the view.\n * @param optionHeight Height of the options.\n * @param currentScrollPosition Current scroll position of the panel.\n * @param panelHeight Height of the panel.\n * @docs-private\n */\nexport function _getOptionScrollPosition(optionIndex: number, optionHeight: number,\n    currentScrollPosition: number, panelHeight: number): number {\n  const optionOffset = optionIndex * optionHeight;\n\n  if (optionOffset < currentScrollPosition) {\n    return optionOffset;\n  }\n\n  if (optionOffset + optionHeight > currentScrollPosition + panelHeight) {\n    return Math.max(0, optionOffset - panelHeight + optionHeight);\n  }\n\n  return currentScrollPosition;\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {MatRippleModule} from '../ripple/index';\nimport {MatPseudoCheckboxModule} from '../selection/index';\nimport {MatOption} from './option';\nimport {MatOptgroup} from './optgroup';\n\n\n@NgModule({\n  imports: [MatRippleModule, CommonModule, MatPseudoCheckboxModule],\n  exports: [MatOption, MatOptgroup],\n  declarations: [MatOption, MatOptgroup]\n})\nexport class MatOptionModule {}\n\n\nexport * from './option';\nexport * from './optgroup';\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {InjectionToken} from '@angular/core';\n\n/** InjectionToken that can be used to specify the global label options. */\nexport const MAT_LABEL_GLOBAL_OPTIONS =\n  new InjectionToken<LabelOptions>('mat-label-global-options');\n\n/** Type for the available floatLabel values. */\nexport type FloatLabelType = 'always' | 'never' | 'auto';\n\n/** Configurable options for floating labels. */\nexport interface LabelOptions {\n  /**\n   * Whether the label should float `always`, `never`, or `auto` (only when necessary).\n   * Default behavior is assumed to be `auto`.\n   */\n  float?: FloatLabelType;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, Input} from '@angular/core';\n\n\nlet nextUniqueId = 0;\n\n\n/** Single error message to be shown underneath the form field. */\n@Directive({\n  selector: 'mat-error',\n  host: {\n    'class': 'mat-error',\n    'role': 'alert',\n    '[attr.id]': 'id',\n  }\n})\nexport class MatError {\n  @Input() id: string = `mat-error-${nextUniqueId++}`;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/** Animations used by the MatFormField. */\nexport const matFormFieldAnimations: {\n  readonly transitionMessages: AnimationTriggerMetadata\n} = {\n  /** Animation that transitions the form field's error and hint messages. */\n  transitionMessages: trigger('transitionMessages', [\n    // TODO(mmalerba): Use angular animations for label animation as well.\n    state('enter', style({ opacity: 1, transform: 'translateY(0%)' })),\n    transition('void => enter', [\n      style({ opacity: 0, transform: 'translateY(-100%)' }),\n      animate('300ms cubic-bezier(0.55, 0, 0.55, 0.2)'),\n    ]),\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Observable} from 'rxjs/Observable';\nimport {NgControl} from '@angular/forms';\n\n\n/** An interface which allows a control to work inside of a `MatFormField`. */\nexport abstract class MatFormFieldControl<T> {\n  /** The value of the control. */\n  value: T | null;\n\n  /**\n   * Stream that emits whenever the state of the control changes such that the parent `MatFormField`\n   * needs to run change detection.\n   */\n  readonly stateChanges: Observable<void>;\n\n  /** The element ID for this control. */\n  readonly id: string;\n\n  /** The placeholder for this control. */\n  readonly placeholder: string;\n\n  /** Gets the NgControl for this control. */\n  readonly ngControl: NgControl | null;\n\n  /** Whether the control is focused. */\n  readonly focused: boolean;\n\n  /** Whether the control is empty. */\n  readonly empty: boolean;\n\n  /** Whether the `MatFormField` label should try to float. */\n  readonly shouldLabelFloat: boolean;\n\n  /** Whether the control is required. */\n  readonly required: boolean;\n\n  /** Whether the control is disabled. */\n  readonly disabled: boolean;\n\n  /** Whether the control is in an error state. */\n  readonly errorState: boolean;\n\n  /**\n   * An optional name for the control type that can be used to distinguish `mat-form-field` elements\n   * based on their control type. The form field will add a class,\n   * `mat-form-field-type-{{controlType}}` to its root element.\n   */\n  readonly controlType?: string;\n\n  /**\n   * Whether the input is currently in an autofilled state. If property is not present on the\n   * control it is assumed to be false.\n   */\n  readonly autofilled?: boolean;\n\n  /** Sets the list of element IDs that currently describe this control. */\n  abstract setDescribedByIds(ids: string[]): void;\n\n  /** Handles a click on the control's container. */\n  abstract onContainerClick(event: MouseEvent): void;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, Input} from '@angular/core';\n\n\nlet nextUniqueId = 0;\n\n\n/** Hint text to be shown underneath the form field control. */\n@Directive({\n  selector: 'mat-hint',\n  host: {\n    'class': 'mat-hint',\n    '[class.mat-right]': 'align == \"end\"',\n    '[attr.id]': 'id',\n    // Remove align attribute to prevent it from interfering with layout.\n    '[attr.align]': 'null',\n  }\n})\nexport class MatHint {\n  /** Whether to align the hint label at the start or end of the line. */\n  @Input() align: 'start' | 'end' = 'start';\n\n  /** Unique ID for the hint. Used for the aria-describedby on the form field control. */\n  @Input() id: string = `mat-hint-${nextUniqueId++}`;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive} from '@angular/core';\n\n\n/** The floating label for a `mat-form-field`. */\n@Directive({\n  selector: 'mat-label'\n})\nexport class MatLabel {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive} from '@angular/core';\n\n\n/** The placeholder text for an `MatFormField`. */\n@Directive({\n  selector: 'mat-placeholder'\n})\nexport class MatPlaceholder {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive} from '@angular/core';\n\n\n/** Prefix to be placed the the front of the form field. */\n@Directive({\n  selector: '[matPrefix]',\n})\nexport class MatPrefix {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive} from '@angular/core';\n\n\n/** Suffix to be placed at the end of the form field. */\n@Directive({\n  selector: '[matSuffix]',\n})\nexport class MatSuffix {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  AfterContentChecked,\n  AfterContentInit,\n  AfterViewInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  ContentChildren,\n  ElementRef,\n  Inject,\n  InjectionToken,\n  Input,\n  Optional,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {\n  CanColor,\n  FloatLabelType,\n  LabelOptions,\n  MAT_LABEL_GLOBAL_OPTIONS,\n  mixinColor,\n} from '@angular/material/core';\nimport {fromEvent} from 'rxjs/observable/fromEvent';\nimport {startWith} from 'rxjs/operators/startWith';\nimport {take} from 'rxjs/operators/take';\nimport {MatError} from './error';\nimport {matFormFieldAnimations} from './form-field-animations';\nimport {MatFormFieldControl} from './form-field-control';\nimport {\n  getMatFormFieldDuplicatedHintError,\n  getMatFormFieldMissingControlError,\n  getMatFormFieldPlaceholderConflictError,\n} from './form-field-errors';\nimport {MatHint} from './hint';\nimport {MatLabel} from './label';\nimport {MatPlaceholder} from './placeholder';\nimport {MatPrefix} from './prefix';\nimport {MatSuffix} from './suffix';\n\n\nlet nextUniqueId = 0;\nconst floatingLabelScale = 0.75;\nconst outlineGapPadding = 5;\n\n\n// Boilerplate for applying mixins to MatFormField.\n/** @docs-private */\nexport class MatFormFieldBase {\n  constructor(public _elementRef: ElementRef) { }\n}\n\n\nexport const _MatFormFieldMixinBase = mixinColor(MatFormFieldBase, 'primary');\n\n\nexport type MatFormFieldAppearance = 'legacy' | 'standard' | 'fill' | 'outline';\n\n\nexport interface MatFormFieldDefaultOptions {\n  appearance?: MatFormFieldAppearance;\n}\n\nexport const MAT_FORM_FIELD_DEFAULT_OPTIONS =\n    new InjectionToken<MatFormFieldDefaultOptions>('MAT_FORM_FIELD_DEFAULT_OPTIONS');\n\n\n/** Container for form controls that applies Material Design styling and behavior. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-form-field',\n  exportAs: 'matFormField',\n  templateUrl: 'form-field.html',\n  // MatInput is a directive and can't have styles, so we need to include its styles here.\n  // The MatInput styles are fairly minimal so it shouldn't be a big deal for people who\n  // aren't using MatInput.\n  styleUrls: [\n    'form-field.css',\n    'form-field-fill.css',\n    'form-field-legacy.css',\n    'form-field-outline.css',\n    'form-field-standard.css',\n    '../input/input.css',\n  ],\n  animations: [matFormFieldAnimations.transitionMessages],\n  host: {\n    'class': 'mat-form-field',\n    '[class.mat-form-field-appearance-standard]': 'appearance == \"standard\"',\n    '[class.mat-form-field-appearance-fill]': 'appearance == \"fill\"',\n    '[class.mat-form-field-appearance-outline]': 'appearance == \"outline\"',\n    '[class.mat-form-field-appearance-legacy]': 'appearance == \"legacy\"',\n    '[class.mat-form-field-invalid]': '_control.errorState',\n    '[class.mat-form-field-can-float]': '_canLabelFloat',\n    '[class.mat-form-field-should-float]': '_shouldLabelFloat()',\n    '[class.mat-form-field-hide-placeholder]': '_hideControlPlaceholder()',\n    '[class.mat-form-field-disabled]': '_control.disabled',\n    '[class.mat-form-field-autofilled]': '_control.autofilled',\n    '[class.mat-focused]': '_control.focused',\n    '[class.mat-accent]': 'color == \"accent\"',\n    '[class.mat-warn]': 'color == \"warn\"',\n    '[class.ng-untouched]': '_shouldForward(\"untouched\")',\n    '[class.ng-touched]': '_shouldForward(\"touched\")',\n    '[class.ng-pristine]': '_shouldForward(\"pristine\")',\n    '[class.ng-dirty]': '_shouldForward(\"dirty\")',\n    '[class.ng-valid]': '_shouldForward(\"valid\")',\n    '[class.ng-invalid]': '_shouldForward(\"invalid\")',\n    '[class.ng-pending]': '_shouldForward(\"pending\")',\n  },\n  inputs: ['color'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\n\nexport class MatFormField extends _MatFormFieldMixinBase\n    implements AfterContentInit, AfterContentChecked, AfterViewInit, CanColor {\n  private _labelOptions: LabelOptions;\n\n  /** The form-field appearance style. */\n  @Input()\n  get appearance(): MatFormFieldAppearance {\n    return this._appearance || this._defaultOptions && this._defaultOptions.appearance || 'legacy';\n  }\n  set appearance(value: MatFormFieldAppearance) {\n    this._appearance = value;\n  }\n  _appearance: MatFormFieldAppearance;\n\n  /** Whether the required marker should be hidden. */\n  @Input()\n  get hideRequiredMarker(): boolean { return this._hideRequiredMarker; }\n  set hideRequiredMarker(value: boolean) {\n    this._hideRequiredMarker = coerceBooleanProperty(value);\n  }\n  private _hideRequiredMarker: boolean;\n\n  /** Override for the logic that disables the label animation in certain cases. */\n  private _showAlwaysAnimate = false;\n\n  /** Whether the floating label should always float or not. */\n  get _shouldAlwaysFloat(): boolean {\n    return this.floatLabel === 'always' && !this._showAlwaysAnimate;\n  }\n\n  /** Whether the label can float or not. */\n  get _canLabelFloat(): boolean { return this.floatLabel !== 'never'; }\n\n  /** State of the mat-hint and mat-error animations. */\n  _subscriptAnimationState: string = '';\n\n  /** Text for the form field hint. */\n  @Input()\n  get hintLabel(): string { return this._hintLabel; }\n  set hintLabel(value: string) {\n    this._hintLabel = value;\n    this._processHints();\n  }\n  private _hintLabel = '';\n\n  // Unique id for the hint label.\n  _hintLabelId: string = `mat-hint-${nextUniqueId++}`;\n\n  /**\n   * Whether the label should always float, never float or float as the user types.\n   *\n   * Note: only the legacy appearance supports the `never` option. `never` was originally added as a\n   * way to make the floating label emulate the behavior of a standard input placeholder. However\n   * the form field now supports both floating labels and placeholders. Therefore in the non-legacy\n   * appearances the `never` option has been disabled in favor of just using the placeholder.\n   */\n  @Input()\n  get floatLabel(): FloatLabelType {\n    return this.appearance !== 'legacy' && this._floatLabel === 'never' ? 'auto' : this._floatLabel;\n  }\n  set floatLabel(value: FloatLabelType) {\n    if (value !== this._floatLabel) {\n      this._floatLabel = value || this._labelOptions.float || 'auto';\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n  private _floatLabel: FloatLabelType;\n\n  _outlineGapWidth = 0;\n\n  _outlineGapStart = 0;\n\n  /**\n   * @deprecated\n   * @deletion-target 7.0.0\n   */\n  @ViewChild('underline') underlineRef: ElementRef;\n\n  @ViewChild('connectionContainer') _connectionContainerRef: ElementRef;\n  @ViewChild('inputContainer') _inputContainerRef: ElementRef;\n  @ViewChild('label') private _label: ElementRef;\n  @ContentChild(MatFormFieldControl) _control: MatFormFieldControl<any>;\n  @ContentChild(MatPlaceholder) _placeholderChild: MatPlaceholder;\n  @ContentChild(MatLabel) _labelChild: MatLabel;\n  @ContentChildren(MatError) _errorChildren: QueryList<MatError>;\n  @ContentChildren(MatHint) _hintChildren: QueryList<MatHint>;\n  @ContentChildren(MatPrefix) _prefixChildren: QueryList<MatPrefix>;\n  @ContentChildren(MatSuffix) _suffixChildren: QueryList<MatSuffix>;\n\n  constructor(\n      public _elementRef: ElementRef,\n      private _changeDetectorRef: ChangeDetectorRef,\n      @Optional() @Inject(MAT_LABEL_GLOBAL_OPTIONS) labelOptions: LabelOptions,\n      @Optional() private _dir: Directionality,\n      @Optional() @Inject(MAT_FORM_FIELD_DEFAULT_OPTIONS) private _defaultOptions:\n          MatFormFieldDefaultOptions) {\n    super(_elementRef);\n\n    this._labelOptions = labelOptions ? labelOptions : {};\n    this.floatLabel = this._labelOptions.float || 'auto';\n  }\n\n  /**\n   * Gets an ElementRef for the element that a overlay attached to the form-field should be\n   * positioned relative to.\n   */\n  getConnectedOverlayOrigin(): ElementRef {\n    return this._connectionContainerRef || this._elementRef;\n  }\n\n  ngAfterContentInit() {\n    this._validateControlChild();\n    if (this._control.controlType) {\n      this._elementRef.nativeElement.classList\n          .add(`mat-form-field-type-${this._control.controlType}`);\n    }\n\n    // Subscribe to changes in the child control state in order to update the form field UI.\n    this._control.stateChanges.pipe(startWith(null!)).subscribe(() => {\n      this._validatePlaceholders();\n      this._syncDescribedByIds();\n      this._changeDetectorRef.markForCheck();\n    });\n\n    let ngControl = this._control.ngControl;\n    if (ngControl && ngControl.valueChanges) {\n      ngControl.valueChanges.subscribe(() => {\n        this._changeDetectorRef.markForCheck();\n      });\n    }\n\n    // Re-validate when the number of hints changes.\n    this._hintChildren.changes.pipe(startWith(null)).subscribe(() => {\n      this._processHints();\n      this._changeDetectorRef.markForCheck();\n    });\n\n    // Update the aria-described by when the number of errors changes.\n    this._errorChildren.changes.pipe(startWith(null)).subscribe(() => {\n      this._syncDescribedByIds();\n      this._changeDetectorRef.markForCheck();\n    });\n\n    Promise.resolve().then(() => {\n      this.updateOutlineGap();\n      this._changeDetectorRef.markForCheck();\n    });\n  }\n\n  ngAfterContentChecked() {\n    this._validateControlChild();\n  }\n\n  ngAfterViewInit() {\n    // Avoid animations on load.\n    this._subscriptAnimationState = 'enter';\n    this._changeDetectorRef.detectChanges();\n  }\n\n  /** Determines whether a class from the NgControl should be forwarded to the host element. */\n  _shouldForward(prop: string): boolean {\n    let ngControl = this._control ? this._control.ngControl : null;\n    return ngControl && (ngControl as any)[prop];\n  }\n\n  _hasPlaceholder() {\n    return !!(this._control && this._control.placeholder || this._placeholderChild);\n  }\n\n  _hasLabel() {\n    return !!this._labelChild;\n  }\n\n  _shouldLabelFloat() {\n    return this._canLabelFloat && (this._control.shouldLabelFloat || this._shouldAlwaysFloat);\n  }\n\n  _hideControlPlaceholder() {\n    // In the legacy appearance the placeholder is promoted to a label if no label is given.\n    return this.appearance === 'legacy' && !this._hasLabel() ||\n        this._hasLabel() && !this._shouldLabelFloat();\n  }\n\n  _hasFloatingLabel() {\n    // In the legacy appearance the placeholder is promoted to a label if no label is given.\n    return this._hasLabel() || this.appearance === 'legacy' && this._hasPlaceholder();\n  }\n\n  /** Determines whether to display hints or errors. */\n  _getDisplayedMessages(): 'error' | 'hint' {\n    return (this._errorChildren && this._errorChildren.length > 0 &&\n        this._control.errorState) ? 'error' : 'hint';\n  }\n\n  /** Animates the placeholder up and locks it in position. */\n  _animateAndLockLabel(): void {\n    if (this._hasFloatingLabel() && this._canLabelFloat) {\n      this._showAlwaysAnimate = true;\n      this.floatLabel = 'always';\n\n      fromEvent(this._label.nativeElement, 'transitionend').pipe(take(1)).subscribe(() => {\n        this._showAlwaysAnimate = false;\n      });\n\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  /**\n   * Ensure that there is only one placeholder (either `placeholder` attribute on the child control\n   * or child element with the `mat-placeholder` directive).\n   */\n  private _validatePlaceholders() {\n    if (this._control.placeholder && this._placeholderChild) {\n      throw getMatFormFieldPlaceholderConflictError();\n    }\n  }\n\n  /** Does any extra processing that is required when handling the hints. */\n  private _processHints() {\n    this._validateHints();\n    this._syncDescribedByIds();\n  }\n\n  /**\n   * Ensure that there is a maximum of one of each `<mat-hint>` alignment specified, with the\n   * attribute being considered as `align=\"start\"`.\n   */\n  private _validateHints() {\n    if (this._hintChildren) {\n      let startHint: MatHint;\n      let endHint: MatHint;\n      this._hintChildren.forEach((hint: MatHint) => {\n        if (hint.align === 'start') {\n          if (startHint || this.hintLabel) {\n            throw getMatFormFieldDuplicatedHintError('start');\n          }\n          startHint = hint;\n        } else if (hint.align === 'end') {\n          if (endHint) {\n            throw getMatFormFieldDuplicatedHintError('end');\n          }\n          endHint = hint;\n        }\n      });\n    }\n  }\n\n  /**\n   * Sets the list of element IDs that describe the child control. This allows the control to update\n   * its `aria-describedby` attribute accordingly.\n   */\n  private _syncDescribedByIds() {\n    if (this._control) {\n      let ids: string[] = [];\n\n      if (this._getDisplayedMessages() === 'hint') {\n        let startHint = this._hintChildren ?\n            this._hintChildren.find(hint => hint.align === 'start') : null;\n        let endHint = this._hintChildren ?\n            this._hintChildren.find(hint => hint.align === 'end') : null;\n\n        if (startHint) {\n          ids.push(startHint.id);\n        } else if (this._hintLabel) {\n          ids.push(this._hintLabelId);\n        }\n\n        if (endHint) {\n          ids.push(endHint.id);\n        }\n      } else if (this._errorChildren) {\n        ids = this._errorChildren.map(error => error.id);\n      }\n\n      this._control.setDescribedByIds(ids);\n    }\n  }\n\n  /** Throws an error if the form field's control is missing. */\n  protected _validateControlChild() {\n    if (!this._control) {\n      throw getMatFormFieldMissingControlError();\n    }\n  }\n\n  /**\n   * Updates the width and position of the gap in the outline. Only relevant for the outline\n   * appearance.\n   */\n  updateOutlineGap() {\n    if (this.appearance === 'outline' && this._label && this._label.nativeElement.children.length) {\n      const containerStart = this._getStartEnd(\n          this._connectionContainerRef.nativeElement.getBoundingClientRect());\n      const labelStart = this._getStartEnd(\n          this._label.nativeElement.children[0].getBoundingClientRect());\n      let labelWidth = 0;\n      for (const child of this._label.nativeElement.children) {\n        labelWidth += child.offsetWidth;\n      }\n      this._outlineGapStart = labelStart - containerStart - outlineGapPadding;\n      this._outlineGapWidth = labelWidth * floatingLabelScale + outlineGapPadding * 2;\n    } else {\n      this._outlineGapStart = 0;\n      this._outlineGapWidth = 0;\n    }\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Gets the start end of the rect considering the current directionality. */\n  private _getStartEnd(rect: ClientRect): number {\n    return this._dir && this._dir.value === 'rtl' ? rect.right : rect.left;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {PlatformModule} from '@angular/cdk/platform';\nimport {MatError} from './error';\nimport {MatFormField} from './form-field';\nimport {MatHint} from './hint';\nimport {MatPlaceholder} from './placeholder';\nimport {MatPrefix} from './prefix';\nimport {MatSuffix} from './suffix';\nimport {MatLabel} from './label';\n\n\n@NgModule({\n  declarations: [\n    MatError,\n    MatHint,\n    MatFormField,\n    MatPlaceholder,\n    MatPrefix,\n    MatSuffix,\n    MatLabel,\n  ],\n  imports: [\n    CommonModule,\n    PlatformModule,\n  ],\n  exports: [\n    MatError,\n    MatHint,\n    MatFormField,\n    MatPlaceholder,\n    MatPrefix,\n    MatSuffix,\n    MatLabel,\n  ],\n})\nexport class MatFormFieldModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  AfterContentInit,\n  Component,\n  ContentChildren,\n  ElementRef,\n  Input,\n  QueryList,\n  TemplateRef,\n  ViewChild,\n  ViewEncapsulation,\n  ChangeDetectorRef,\n  ChangeDetectionStrategy,\n  EventEmitter,\n  Output,\n  InjectionToken,\n  Inject,\n} from '@angular/core';\nimport {\n  MatOption,\n  MatOptgroup,\n  MAT_OPTION_PARENT_COMPONENT,\n  mixinDisableRipple,\n  CanDisableRipple,\n} from '@angular/material/core';\nimport {ActiveDescendantKeyManager} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\n\n\n/**\n * Autocomplete IDs need to be unique across components, so this counter exists outside of\n * the component definition.\n */\nlet _uniqueAutocompleteIdCounter = 0;\n\n/** Event object that is emitted when an autocomplete option is selected. */\nexport class MatAutocompleteSelectedEvent {\n  constructor(\n    /** Reference to the autocomplete panel that emitted the event. */\n    public source: MatAutocomplete,\n    /** Option that was selected. */\n    public option: MatOption) { }\n}\n\n// Boilerplate for applying mixins to MatAutocomplete.\n/** @docs-private */\nexport class MatAutocompleteBase {}\nexport const _MatAutocompleteMixinBase = mixinDisableRipple(MatAutocompleteBase);\n\n/** Default `mat-autocomplete` options that can be overridden. */\nexport interface MatAutocompleteDefaultOptions {\n  /** Whether the first option should be highlighted when an autocomplete panel is opened. */\n  autoActiveFirstOption?: boolean;\n}\n\n/** Injection token to be used to override the default options for `mat-autocomplete`. */\nexport const MAT_AUTOCOMPLETE_DEFAULT_OPTIONS =\n    new InjectionToken<MatAutocompleteDefaultOptions>('mat-autocomplete-default-options');\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-autocomplete',\n  templateUrl: 'autocomplete.html',\n  styleUrls: ['autocomplete.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  exportAs: 'matAutocomplete',\n  inputs: ['disableRipple'],\n  host: {\n    'class': 'mat-autocomplete'\n  },\n  providers: [\n    {provide: MAT_OPTION_PARENT_COMPONENT, useExisting: MatAutocomplete}\n  ]\n})\nexport class MatAutocomplete extends _MatAutocompleteMixinBase implements AfterContentInit,\n  CanDisableRipple {\n\n  /** Manages active item in option list based on key events. */\n  _keyManager: ActiveDescendantKeyManager<MatOption>;\n\n  /** Whether the autocomplete panel should be visible, depending on option length. */\n  showPanel: boolean = false;\n\n  /** Whether the autocomplete panel is open. */\n  get isOpen(): boolean { return this._isOpen && this.showPanel; }\n  _isOpen: boolean = false;\n\n  /** @docs-private */\n  @ViewChild(TemplateRef) template: TemplateRef<any>;\n\n  /** Element for the panel containing the autocomplete options. */\n  @ViewChild('panel') panel: ElementRef;\n\n  /** @docs-private */\n  @ContentChildren(MatOption, { descendants: true }) options: QueryList<MatOption>;\n\n  /** @docs-private */\n  @ContentChildren(MatOptgroup) optionGroups: QueryList<MatOptgroup>;\n\n  /** Function that maps an option's control value to its display value in the trigger. */\n  @Input() displayWith: ((value: any) => string) | null = null;\n\n  /**\n   * Whether the first option should be highlighted when the autocomplete panel is opened.\n   * Can be configured globally through the `MAT_AUTOCOMPLETE_DEFAULT_OPTIONS` token.\n   */\n  @Input()\n  get autoActiveFirstOption(): boolean { return this._autoActiveFirstOption; }\n  set autoActiveFirstOption(value: boolean) {\n    this._autoActiveFirstOption = coerceBooleanProperty(value);\n  }\n  private _autoActiveFirstOption: boolean;\n\n\n  /** Event that is emitted whenever an option from the list is selected. */\n  @Output() readonly optionSelected: EventEmitter<MatAutocompleteSelectedEvent> =\n      new EventEmitter<MatAutocompleteSelectedEvent>();\n\n  /** Event that is emitted when the autocomplete panel is opened. */\n  @Output() readonly opened: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Event that is emitted when the autocomplete panel is closed. */\n  @Output() readonly closed: EventEmitter<void> = new EventEmitter<void>();\n\n  /**\n   * Takes classes set on the host mat-autocomplete element and applies them to the panel\n   * inside the overlay container to allow for easy styling.\n   */\n  @Input('class')\n  set classList(value: string) {\n    if (value && value.length) {\n      value.split(' ').forEach(className => this._classList[className.trim()] = true);\n      this._elementRef.nativeElement.className = '';\n    }\n  }\n  _classList: {[key: string]: boolean} = {};\n\n  /** Unique ID to be used by autocomplete trigger's \"aria-owns\" property. */\n  id: string = `mat-autocomplete-${_uniqueAutocompleteIdCounter++}`;\n\n  constructor(\n    private _changeDetectorRef: ChangeDetectorRef,\n    private _elementRef: ElementRef,\n    @Inject(MAT_AUTOCOMPLETE_DEFAULT_OPTIONS) defaults: MatAutocompleteDefaultOptions) {\n    super();\n\n    this._autoActiveFirstOption = !!defaults.autoActiveFirstOption;\n  }\n\n  ngAfterContentInit() {\n    this._keyManager = new ActiveDescendantKeyManager<MatOption>(this.options).withWrap();\n    // Set the initial visibility state.\n    this._setVisibility();\n  }\n\n  /**\n   * Sets the panel scrollTop. This allows us to manually scroll to display options\n   * above or below the fold, as they are not actually being focused when active.\n   */\n  _setScrollTop(scrollTop: number): void {\n    if (this.panel) {\n      this.panel.nativeElement.scrollTop = scrollTop;\n    }\n  }\n\n  /** Returns the panel's scrollTop. */\n  _getScrollTop(): number {\n    return this.panel ? this.panel.nativeElement.scrollTop : 0;\n  }\n\n  /** Panel should hide itself when the option list is empty. */\n  _setVisibility() {\n    this.showPanel = !!this.options.length;\n    this._classList['mat-autocomplete-visible'] = this.showPanel;\n    this._classList['mat-autocomplete-hidden'] = !this.showPanel;\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Emits the `select` event. */\n  _emitSelectEvent(option: MatOption): void {\n    const event = new MatAutocompleteSelectedEvent(this, option);\n    this.optionSelected.emit(event);\n  }\n}\n\n","/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = Object.setPrototypeOf ||\r\n    ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n    function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = Object.assign || function __assign(t) {\r\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n        s = arguments[i];\r\n        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n    }\r\n    return t;\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)\r\n            t[p[i]] = s[p[i]];\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = y[op[0] & 2 ? \"return\" : op[0] ? \"throw\" : \"next\"]) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [0, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r);  }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { if (o[n]) i[n] = function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; }; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator];\r\n    return m ? m.call(o) : typeof __values === \"function\" ? __values(o) : o[Symbol.iterator]();\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {Constructor} from './constructor';\n\n/** @docs-private */\nexport interface CanDisable {\n  /** Whether the component is disabled. */\n  disabled: boolean;\n}\n\n/** Mixin to augment a directive with a `disabled` property. */\nexport function mixinDisabled<T extends Constructor<{}>>(base: T): Constructor<CanDisable> & T {\n  return class extends base {\n    private _disabled: boolean = false;\n\n    get disabled() { return this._disabled; }\n    set disabled(value: any) { this._disabled = coerceBooleanProperty(value); }\n\n    constructor(...args: any[]) { super(...args); }\n  };\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Constructor} from './constructor';\nimport {ElementRef} from '@angular/core';\n\n/** @docs-private */\nexport interface CanColor {\n  /** Theme color palette for the component. */\n  color: ThemePalette;\n}\n\n/** @docs-private */\nexport interface HasElementRef {\n  _elementRef: ElementRef;\n}\n\n/** Possible color palette values. */\nexport type ThemePalette = 'primary' | 'accent' | 'warn' | undefined;\n\n/** Mixin to augment a directive with a `color` property. */\nexport function mixinColor<T extends Constructor<HasElementRef>>(base: T,\n    defaultColor?: ThemePalette): Constructor<CanColor> & T {\n  return class extends base {\n    private _color: ThemePalette;\n\n    get color(): ThemePalette { return this._color; }\n    set color(value: ThemePalette) {\n      const colorPalette = value || defaultColor;\n\n      if (colorPalette !== this._color) {\n        if (this._color) {\n          this._elementRef.nativeElement.classList.remove(`mat-${this._color}`);\n        }\n        if (colorPalette) {\n          this._elementRef.nativeElement.classList.add(`mat-${colorPalette}`);\n        }\n\n        this._color = colorPalette;\n      }\n    }\n\n    constructor(...args: any[]) {\n      super(...args);\n\n      // Set the default color that can be specified from the mixin.\n      this.color = defaultColor;\n    }\n  };\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {Constructor} from './constructor';\n\n/** @docs-private */\nexport interface CanDisableRipple {\n  /** Whether ripples are disabled. */\n  disableRipple: boolean;\n}\n\n/** Mixin to augment a directive with a `disableRipple` property. */\nexport function mixinDisableRipple<T extends Constructor<{}>>(base: T)\n    : Constructor<CanDisableRipple> & T {\n  return class extends base {\n    private _disableRipple: boolean = false;\n\n    /** Whether the ripple effect is disabled or not. */\n    get disableRipple() { return this._disableRipple; }\n    set disableRipple(value: any) { this._disableRipple = coerceBooleanProperty(value); }\n\n    constructor(...args: any[]) { super(...args); }\n  };\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Constructor} from './constructor';\nimport {CanDisable} from './disabled';\n\n/** @docs-private */\nexport interface HasTabIndex {\n  /** Tabindex of the component. */\n  tabIndex: number;\n}\n\n/** Mixin to augment a directive with a `tabIndex` property. */\nexport function mixinTabIndex<T extends Constructor<CanDisable>>(base: T, defaultTabIndex = 0)\n    : Constructor<HasTabIndex> & T {\n  return class extends base {\n    private _tabIndex: number = defaultTabIndex;\n\n    get tabIndex(): number { return this.disabled ? -1 : this._tabIndex; }\n    set tabIndex(value: number) {\n      // If the specified tabIndex value is null or undefined, fall back to the default value.\n      this._tabIndex = value != null ? value : defaultTabIndex;\n    }\n\n    constructor(...args: any[]) {\n      super(...args);\n    }\n  };\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Constructor} from './constructor';\nimport {ErrorStateMatcher} from '../error/error-options';\nimport {FormControl, FormGroupDirective, NgControl, NgForm} from '@angular/forms';\nimport {Subject} from 'rxjs/Subject';\n\n/** @docs-private */\nexport interface CanUpdateErrorState {\n  updateErrorState();\n  readonly stateChanges: Subject<void>;\n  errorState: boolean;\n  errorStateMatcher: ErrorStateMatcher;\n}\n\n/** @docs-private */\nexport interface HasErrorState {\n  _parentFormGroup: FormGroupDirective;\n  _parentForm: NgForm;\n  _defaultErrorStateMatcher: ErrorStateMatcher;\n  ngControl: NgControl;\n}\n\n/**\n * Mixin to augment a directive with updateErrorState method.\n * For component with `errorState` and need to update `errorState`.\n */\nexport function mixinErrorState<T extends Constructor<HasErrorState>>(base: T)\n: Constructor<CanUpdateErrorState> & T {\n  return class extends base {\n    /** Whether the component is in an error state. */\n    errorState: boolean = false;\n\n    /**\n     * Stream that emits whenever the state of the input changes such that the wrapping\n     * `MatFormField` needs to run change detection.\n     */\n    readonly stateChanges = new Subject<void>();\n\n    errorStateMatcher: ErrorStateMatcher;\n\n    updateErrorState() {\n      const oldState = this.errorState;\n      const parent = this._parentFormGroup || this._parentForm;\n      const matcher = this.errorStateMatcher || this._defaultErrorStateMatcher;\n      const control = this.ngControl ? this.ngControl.control as FormControl : null;\n      const newState = matcher.isErrorState(control, parent);\n\n      if (newState !== oldState) {\n        this.errorState = newState;\n        this.stateChanges.next();\n      }\n    }\n\n    constructor(...args: any[]) {\n      super(...args);\n    }\n  };\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Constructor} from './constructor';\nimport {Observable} from 'rxjs/Observable';\nimport {Subscriber} from 'rxjs/Subscriber';\n\n/**\n * Mixin that adds an initialized property to a directive which, when subscribed to, will emit a\n * value once markInitialized has been called, which should be done during the ngOnInit function.\n * If the subscription is made after it has already been marked as initialized, then it will trigger\n * an emit immediately.\n * @docs-private\n */\nexport interface HasInitialized {\n  /** Stream that emits once during the directive/component's ngOnInit. */\n  initialized: Observable<void>;\n\n  /**\n   * Sets the state as initialized and must be called during ngOnInit to notify subscribers that\n   * the directive has been initialized.\n   * @docs-private\n   */\n  _markInitialized: () => void;\n}\n\n/** Mixin to augment a directive with an initialized property that will emits when ngOnInit ends. */\nexport function mixinInitialized<T extends Constructor<{}>>(base: T):\n    Constructor<HasInitialized> & T {\n  return class extends base {\n    /** Whether this directive has been marked as initialized. */\n    _isInitialized = false;\n\n    /**\n     * List of subscribers that subscribed before the directive was initialized. Should be notified\n     * during _markInitialized. Set to null after pending subscribers are notified, and should\n     * not expect to be populated after.\n     */\n    _pendingSubscribers: Subscriber<void>[] | null = [];\n\n    /**\n     * Observable stream that emits when the directive initializes. If already initialized, the\n     * subscriber is stored to be notified once _markInitialized is called.\n     */\n    initialized = new Observable<void>(subscriber => {\n      // If initialized, immediately notify the subscriber. Otherwise store the subscriber to notify\n      // when _markInitialized is called.\n      if (this._isInitialized) {\n        this._notifySubscriber(subscriber);\n      } else {\n        this._pendingSubscribers!.push(subscriber);\n      }\n    });\n\n    constructor(...args: any[]) { super(...args); }\n\n    /**\n     * Marks the state as initialized and notifies pending subscribers. Should be called at the end\n     * of ngOnInit.\n     * @docs-private\n     */\n    _markInitialized(): void {\n      if (this._isInitialized) {\n        throw Error('This directive has already been marked as initialized and ' +\n            'should not be called twice.');\n      }\n\n      this._isInitialized = true;\n\n      this._pendingSubscribers!.forEach(this._notifySubscriber);\n      this._pendingSubscribers = null;\n    }\n\n    /** Emits and completes the subscriber stream (should only emit once). */\n    _notifySubscriber(subscriber: Subscriber<void>): void {\n      subscriber.next();\n      subscriber.complete();\n    }\n  };\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Platform} from '@angular/cdk/platform';\nimport {Inject, Injectable, Optional} from '@angular/core';\nimport {DateAdapter, MAT_DATE_LOCALE} from './date-adapter';\n\n// TODO(mmalerba): Remove when we no longer support safari 9.\n/** Whether the browser supports the Intl API. */\nconst SUPPORTS_INTL_API = typeof Intl != 'undefined';\n\n\n/** The default month names to use if Intl API is not available. */\nconst DEFAULT_MONTH_NAMES = {\n  'long': [\n    'January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September',\n    'October', 'November', 'December'\n  ],\n  'short': ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'],\n  'narrow': ['J', 'F', 'M', 'A', 'M', 'J', 'J', 'A', 'S', 'O', 'N', 'D']\n};\n\n\n/** The default date names to use if Intl API is not available. */\nconst DEFAULT_DATE_NAMES = range(31, i => String(i + 1));\n\n\n/** The default day of the week names to use if Intl API is not available. */\nconst DEFAULT_DAY_OF_WEEK_NAMES = {\n  'long': ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'],\n  'short': ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'],\n  'narrow': ['S', 'M', 'T', 'W', 'T', 'F', 'S']\n};\n\n\n/**\n * Matches strings that have the form of a valid RFC 3339 string\n * (https://tools.ietf.org/html/rfc3339). Note that the string may not actually be a valid date\n * because the regex will match strings an with out of bounds month, date, etc.\n */\nconst ISO_8601_REGEX =\n    /^\\d{4}-\\d{2}-\\d{2}(?:T\\d{2}:\\d{2}:\\d{2}(?:\\.\\d+)?(?:Z|(?:(?:\\+|-)\\d{2}:\\d{2}))?)?$/;\n\n\n/** Creates an array and fills it with values. */\nfunction range<T>(length: number, valueFunction: (index: number) => T): T[] {\n  const valuesArray = Array(length);\n  for (let i = 0; i < length; i++) {\n    valuesArray[i] = valueFunction(i);\n  }\n  return valuesArray;\n}\n\n/** Adapts the native JS Date for use with cdk-based components that work with dates. */\n@Injectable()\nexport class NativeDateAdapter extends DateAdapter<Date> {\n  /** Whether to clamp the date between 1 and 9999 to avoid IE and Edge errors. */\n  private readonly _clampDate: boolean;\n\n  /**\n   * Whether to use `timeZone: 'utc'` with `Intl.DateTimeFormat` when formatting dates.\n   * Without this `Intl.DateTimeFormat` sometimes chooses the wrong timeZone, which can throw off\n   * the result. (e.g. in the en-US locale `new Date(1800, 7, 14).toLocaleDateString()`\n   * will produce `'8/13/1800'`.\n   *\n   * TODO(mmalerba): drop this variable. It's not being used in the code right now. We're now\n   * getting the string representation of a Date object from it's utc representation. We're keeping\n   * it here for sometime, just for precaution, in case we decide to revert some of these changes\n   * though.\n   */\n  useUtcForDisplay: boolean = true;\n\n  constructor(@Optional() @Inject(MAT_DATE_LOCALE) matDateLocale: string, platform: Platform) {\n    super();\n    super.setLocale(matDateLocale);\n\n    // IE does its own time zone correction, so we disable this on IE.\n    this.useUtcForDisplay = !platform.TRIDENT;\n    this._clampDate = platform.TRIDENT || platform.EDGE;\n  }\n\n  getYear(date: Date): number {\n    return date.getFullYear();\n  }\n\n  getMonth(date: Date): number {\n    return date.getMonth();\n  }\n\n  getDate(date: Date): number {\n    return date.getDate();\n  }\n\n  getDayOfWeek(date: Date): number {\n    return date.getDay();\n  }\n\n  getMonthNames(style: 'long' | 'short' | 'narrow'): string[] {\n    if (SUPPORTS_INTL_API) {\n      const dtf = new Intl.DateTimeFormat(this.locale, {month: style, timeZone: 'utc'});\n      return range(12, i =>\n          this._stripDirectionalityCharacters(this._format(dtf, new Date(2017, i, 1))));\n    }\n    return DEFAULT_MONTH_NAMES[style];\n  }\n\n  getDateNames(): string[] {\n    if (SUPPORTS_INTL_API) {\n      const dtf = new Intl.DateTimeFormat(this.locale, {day: 'numeric', timeZone: 'utc'});\n      return range(31, i => this._stripDirectionalityCharacters(\n          this._format(dtf, new Date(2017, 0, i + 1))));\n    }\n    return DEFAULT_DATE_NAMES;\n  }\n\n  getDayOfWeekNames(style: 'long' | 'short' | 'narrow'): string[] {\n    if (SUPPORTS_INTL_API) {\n      const dtf = new Intl.DateTimeFormat(this.locale, {weekday: style, timeZone: 'utc'});\n      return range(7, i => this._stripDirectionalityCharacters(\n          this._format(dtf, new Date(2017, 0, i + 1))));\n    }\n    return DEFAULT_DAY_OF_WEEK_NAMES[style];\n  }\n\n  getYearName(date: Date): string {\n    if (SUPPORTS_INTL_API) {\n      const dtf = new Intl.DateTimeFormat(this.locale, {year: 'numeric', timeZone: 'utc'});\n      return this._stripDirectionalityCharacters(this._format(dtf, date));\n    }\n    return String(this.getYear(date));\n  }\n\n  getFirstDayOfWeek(): number {\n    // We can't tell using native JS Date what the first day of the week is, we default to Sunday.\n    return 0;\n  }\n\n  getNumDaysInMonth(date: Date): number {\n    return this.getDate(this._createDateWithOverflow(\n        this.getYear(date), this.getMonth(date) + 1, 0));\n  }\n\n  clone(date: Date): Date {\n    return this.createDate(this.getYear(date), this.getMonth(date), this.getDate(date));\n  }\n\n  createDate(year: number, month: number, date: number): Date {\n    // Check for invalid month and date (except upper bound on date which we have to check after\n    // creating the Date).\n    if (month < 0 || month > 11) {\n      throw Error(`Invalid month index \"${month}\". Month index has to be between 0 and 11.`);\n    }\n\n    if (date < 1) {\n      throw Error(`Invalid date \"${date}\". Date has to be greater than 0.`);\n    }\n\n    let result = this._createDateWithOverflow(year, month, date);\n    // Check that the date wasn't above the upper bound for the month, causing the month to overflow\n    if (result.getMonth() != month) {\n      throw Error(`Invalid date \"${date}\" for month with index \"${month}\".`);\n    }\n\n    return result;\n  }\n\n  today(): Date {\n    return new Date();\n  }\n\n  parse(value: any): Date | null {\n    // We have no way using the native JS Date to set the parse format or locale, so we ignore these\n    // parameters.\n    if (typeof value == 'number') {\n      return new Date(value);\n    }\n    return value ? new Date(Date.parse(value)) : null;\n  }\n\n  format(date: Date, displayFormat: Object): string {\n    if (!this.isValid(date)) {\n      throw Error('NativeDateAdapter: Cannot format invalid date.');\n    }\n\n    if (SUPPORTS_INTL_API) {\n      // On IE and Edge the i18n API will throw a hard error that can crash the entire app\n      // if we attempt to format a date whose year is less than 1 or greater than 9999.\n      if (this._clampDate && (date.getFullYear() < 1 || date.getFullYear() > 9999)) {\n        date = this.clone(date);\n        date.setFullYear(Math.max(1, Math.min(9999, date.getFullYear())));\n      }\n\n      displayFormat = {...displayFormat, timeZone: 'utc'};\n\n      const dtf = new Intl.DateTimeFormat(this.locale, displayFormat);\n      return this._stripDirectionalityCharacters(this._format(dtf, date));\n    }\n    return this._stripDirectionalityCharacters(date.toDateString());\n  }\n\n  addCalendarYears(date: Date, years: number): Date {\n    return this.addCalendarMonths(date, years * 12);\n  }\n\n  addCalendarMonths(date: Date, months: number): Date {\n    let newDate = this._createDateWithOverflow(\n        this.getYear(date), this.getMonth(date) + months, this.getDate(date));\n\n    // It's possible to wind up in the wrong month if the original month has more days than the new\n    // month. In this case we want to go to the last day of the desired month.\n    // Note: the additional + 12 % 12 ensures we end up with a positive number, since JS % doesn't\n    // guarantee this.\n    if (this.getMonth(newDate) != ((this.getMonth(date) + months) % 12 + 12) % 12) {\n      newDate = this._createDateWithOverflow(this.getYear(newDate), this.getMonth(newDate), 0);\n    }\n\n    return newDate;\n  }\n\n  addCalendarDays(date: Date, days: number): Date {\n    return this._createDateWithOverflow(\n        this.getYear(date), this.getMonth(date), this.getDate(date) + days);\n  }\n\n  toIso8601(date: Date): string {\n    return [\n      date.getUTCFullYear(),\n      this._2digit(date.getUTCMonth() + 1),\n      this._2digit(date.getUTCDate())\n    ].join('-');\n  }\n\n  /**\n   * Returns the given value if given a valid Date or null. Deserializes valid ISO 8601 strings\n   * (https://www.ietf.org/rfc/rfc3339.txt) into valid Dates and empty string into null. Returns an\n   * invalid date for all other values.\n   */\n  deserialize(value: any): Date | null {\n    if (typeof value === 'string') {\n      if (!value) {\n        return null;\n      }\n      // The `Date` constructor accepts formats other than ISO 8601, so we need to make sure the\n      // string is the right format first.\n      if (ISO_8601_REGEX.test(value)) {\n        let date = new Date(value);\n        if (this.isValid(date)) {\n          return date;\n        }\n      }\n    }\n    return super.deserialize(value);\n  }\n\n  isDateInstance(obj: any) {\n    return obj instanceof Date;\n  }\n\n  isValid(date: Date) {\n    return !isNaN(date.getTime());\n  }\n\n  invalid(): Date {\n    return new Date(NaN);\n  }\n\n  /** Creates a date but allows the month and date to overflow. */\n  private _createDateWithOverflow(year: number, month: number, date: number) {\n    const result = new Date(year, month, date);\n\n    // We need to correct for the fact that JS native Date treats years in range [0, 99] as\n    // abbreviations for 19xx.\n    if (year >= 0 && year < 100) {\n      result.setFullYear(this.getYear(result) - 1900);\n    }\n    return result;\n  }\n\n  /**\n   * Pads a number to make it two digits.\n   * @param n The number to pad.\n   * @returns The padded number.\n   */\n  private _2digit(n: number) {\n    return ('00' + n).slice(-2);\n  }\n\n  /**\n   * Strip out unicode LTR and RTL characters. Edge and IE insert these into formatted dates while\n   * other browsers do not. We remove them to make output consistent and because they interfere with\n   * date parsing.\n   * @param str The string to strip direction characters from.\n   * @returns The stripped string.\n   */\n  private _stripDirectionalityCharacters(str: string) {\n    return str.replace(/[\\u200e\\u200f]/g, '');\n  }\n\n  /**\n   * When converting Date object to string, javascript built-in functions may return wrong\n   * results because it applies its internal DST rules. The DST rules around the world change\n   * very frequently, and the current valid rule is not always valid in previous years though.\n   * We work around this problem building a new Date object which has its internal UTC\n   * representation with the local date and time.\n   * @param dtf Intl.DateTimeFormat object, containg the desired string format. It must have\n   *    timeZone set to 'utc' to work fine.\n   * @param date Date from which we want to get the string representation according to dtf\n   * @returns A Date object with its UTC representation based on the passed in date info\n   */\n  private _format(dtf: Intl.DateTimeFormat, date: Date) {\n    const d = new Date(Date.UTC(\n        date.getFullYear(), date.getMonth(), date.getDate(), date.getHours(),\n        date.getMinutes(), date.getSeconds(), date.getMilliseconds()));\n    return dtf.format(d);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {ElementRef, NgZone} from '@angular/core';\nimport {Platform, supportsPassiveEventListeners} from '@angular/cdk/platform';\nimport {RippleRef, RippleState} from './ripple-ref';\n\nexport type RippleConfig = {\n  color?: string;\n  centered?: boolean;\n  radius?: number;\n  persistent?: boolean;\n  animation?: RippleAnimationConfig;\n  terminateOnPointerUp?: boolean;\n  /**\n   * @deprecated Use the `animation` property instead.\n   * @deletion-target 7.0.0\n   */\n  speedFactor?: number;\n};\n\n/**\n * Interface that describes the configuration for the animation of a ripple.\n * There are two animation phases with different durations for the ripples.\n */\nexport interface RippleAnimationConfig {\n  /** Duration in milliseconds for the enter animation (expansion from point of contact). */\n  enterDuration?: number;\n  /** Duration in milliseconds for the exit animation (fade-out). */\n  exitDuration?: number;\n}\n\n/**\n * Interface that describes the target for launching ripples.\n * It defines the ripple configuration and disabled state for interaction ripples.\n * @docs-private\n */\nexport interface RippleTarget {\n  /** Configuration for ripples that are launched on pointer down. */\n  rippleConfig: RippleConfig;\n  /** Whether ripples on pointer down should be disabled. */\n  rippleDisabled: boolean;\n}\n\n/**\n * Default ripple animation configuration for ripples without an explicit\n * animation config specified.\n */\nexport const defaultRippleAnimationConfig = {\n  enterDuration: 450,\n  exitDuration: 400\n};\n\n/**\n * Timeout for ignoring mouse events. Mouse events will be temporary ignored after touch\n * events to avoid synthetic mouse events.\n */\nconst ignoreMouseEventsTimeout = 800;\n\n/**\n * Helper service that performs DOM manipulations. Not intended to be used outside this module.\n * The constructor takes a reference to the ripple directive's host element and a map of DOM\n * event handlers to be installed on the element that triggers ripple animations.\n * This will eventually become a custom renderer once Angular support exists.\n * @docs-private\n */\nexport class RippleRenderer {\n  /** Element where the ripples are being added to. */\n  private _containerElement: HTMLElement;\n\n  /** Element which triggers the ripple elements on mouse events. */\n  private _triggerElement: HTMLElement | null;\n\n  /** Whether the pointer is currently down or not. */\n  private _isPointerDown = false;\n\n  /** Events to be registered on the trigger element. */\n  private _triggerEvents = new Map<string, any>();\n\n  /** Set of currently active ripple references. */\n  private _activeRipples = new Set<RippleRef>();\n\n  /** Time in milliseconds when the last touchstart event happened. */\n  private _lastTouchStartEvent: number;\n\n  /** Options that apply to all the event listeners that are bound by the renderer. */\n  private _eventOptions = supportsPassiveEventListeners() ? ({passive: true} as any) : false;\n\n  /**\n   * Cached dimensions of the ripple container. Set when the first\n   * ripple is shown and cleared once no more ripples are visible.\n   */\n  private _containerRect: ClientRect | null;\n\n  constructor(private _target: RippleTarget,\n              private _ngZone: NgZone,\n              elementRef: ElementRef,\n              platform: Platform) {\n\n    // Only do anything if we're on the browser.\n    if (platform.isBrowser) {\n      this._containerElement = elementRef.nativeElement;\n\n      // Specify events which need to be registered on the trigger.\n      this._triggerEvents.set('mousedown', this.onMousedown);\n      this._triggerEvents.set('mouseup', this.onPointerUp);\n      this._triggerEvents.set('mouseleave', this.onPointerUp);\n\n      this._triggerEvents.set('touchstart', this.onTouchStart);\n      this._triggerEvents.set('touchend', this.onPointerUp);\n    }\n  }\n\n  /**\n   * Fades in a ripple at the given coordinates.\n   * @param x Coordinate within the element, along the X axis at which to start the ripple.\n   * @param y Coordinate within the element, along the Y axis at which to start the ripple.\n   * @param config Extra ripple options.\n   */\n  fadeInRipple(x: number, y: number, config: RippleConfig = {}): RippleRef {\n    const containerRect = this._containerRect =\n                          this._containerRect || this._containerElement.getBoundingClientRect();\n    const animationConfig = {...defaultRippleAnimationConfig, ...config.animation};\n\n    if (config.centered) {\n      x = containerRect.left + containerRect.width / 2;\n      y = containerRect.top + containerRect.height / 2;\n    }\n\n    const radius = config.radius || distanceToFurthestCorner(x, y, containerRect);\n    const offsetX = x - containerRect.left;\n    const offsetY = y - containerRect.top;\n    const duration = animationConfig.enterDuration / (config.speedFactor || 1);\n\n    const ripple = document.createElement('div');\n    ripple.classList.add('mat-ripple-element');\n\n    ripple.style.left = `${offsetX - radius}px`;\n    ripple.style.top = `${offsetY - radius}px`;\n    ripple.style.height = `${radius * 2}px`;\n    ripple.style.width = `${radius * 2}px`;\n\n    // If the color is not set, the default CSS color will be used.\n    ripple.style.backgroundColor = config.color || null;\n    ripple.style.transitionDuration = `${duration}ms`;\n\n    this._containerElement.appendChild(ripple);\n\n    // By default the browser does not recalculate the styles of dynamically created\n    // ripple elements. This is critical because then the `scale` would not animate properly.\n    enforceStyleRecalculation(ripple);\n\n    ripple.style.transform = 'scale(1)';\n\n    // Exposed reference to the ripple that will be returned.\n    const rippleRef = new RippleRef(this, ripple, config);\n\n    rippleRef.state = RippleState.FADING_IN;\n\n    // Add the ripple reference to the list of all active ripples.\n    this._activeRipples.add(rippleRef);\n\n    // Wait for the ripple element to be completely faded in.\n    // Once it's faded in, the ripple can be hidden immediately if the mouse is released.\n    this.runTimeoutOutsideZone(() => {\n      rippleRef.state = RippleState.VISIBLE;\n\n      if (!config.persistent && !this._isPointerDown) {\n        rippleRef.fadeOut();\n      }\n    }, duration);\n\n    return rippleRef;\n  }\n\n  /** Fades out a ripple reference. */\n  fadeOutRipple(rippleRef: RippleRef) {\n    const wasActive = this._activeRipples.delete(rippleRef);\n\n    // Clear out the cached bounding rect if we have no more ripples.\n    if (!this._activeRipples.size) {\n      this._containerRect = null;\n    }\n\n    // For ripples that are not active anymore, don't re-un the fade-out animation.\n    if (!wasActive) {\n      return;\n    }\n\n    const rippleEl = rippleRef.element;\n    const animationConfig = {...defaultRippleAnimationConfig, ...rippleRef.config.animation};\n\n    rippleEl.style.transitionDuration = `${animationConfig.exitDuration}ms`;\n    rippleEl.style.opacity = '0';\n    rippleRef.state = RippleState.FADING_OUT;\n\n    // Once the ripple faded out, the ripple can be safely removed from the DOM.\n    this.runTimeoutOutsideZone(() => {\n      rippleRef.state = RippleState.HIDDEN;\n      rippleEl.parentNode!.removeChild(rippleEl);\n    }, animationConfig.exitDuration);\n  }\n\n  /** Fades out all currently active ripples. */\n  fadeOutAll() {\n    this._activeRipples.forEach(ripple => ripple.fadeOut());\n  }\n\n  /** Sets up the trigger event listeners */\n  setupTriggerEvents(element: HTMLElement) {\n    if (!element || element === this._triggerElement) {\n      return;\n    }\n\n    // Remove all previously registered event listeners from the trigger element.\n    this._removeTriggerEvents();\n\n    this._ngZone.runOutsideAngular(() => {\n      this._triggerEvents.forEach((fn, type) =>\n          element.addEventListener(type, fn, this._eventOptions));\n    });\n\n    this._triggerElement = element;\n  }\n\n  /** Function being called whenever the trigger is being pressed using mouse. */\n  private onMousedown = (event: MouseEvent) => {\n    const isSyntheticEvent = this._lastTouchStartEvent &&\n        Date.now() < this._lastTouchStartEvent + ignoreMouseEventsTimeout;\n\n    if (!this._target.rippleDisabled && !isSyntheticEvent) {\n      this._isPointerDown = true;\n      this.fadeInRipple(event.clientX, event.clientY, this._target.rippleConfig);\n    }\n  }\n\n  /** Function being called whenever the trigger is being pressed using touch. */\n  private onTouchStart = (event: TouchEvent) => {\n    if (!this._target.rippleDisabled) {\n      // Some browsers fire mouse events after a `touchstart` event. Those synthetic mouse\n      // events will launch a second ripple if we don't ignore mouse events for a specific\n      // time after a touchstart event.\n      this._lastTouchStartEvent = Date.now();\n      this._isPointerDown = true;\n\n      this.fadeInRipple(\n          event.touches[0].clientX, event.touches[0].clientY, this._target.rippleConfig);\n    }\n  }\n\n  /** Function being called whenever the trigger is being released. */\n  private onPointerUp = () => {\n    if (!this._isPointerDown) {\n      return;\n    }\n\n    this._isPointerDown = false;\n\n    // Fade-out all ripples that are visible and not persistent.\n    this._activeRipples.forEach(ripple => {\n      // By default, only ripples that are completely visible will fade out on pointer release.\n      // If the `terminateOnPointerUp` option is set, ripples that still fade in will also fade out.\n      const isVisible = ripple.state === RippleState.VISIBLE ||\n        ripple.config.terminateOnPointerUp && ripple.state === RippleState.FADING_IN;\n\n      if (!ripple.config.persistent && isVisible) {\n        ripple.fadeOut();\n      }\n    });\n  }\n\n  /** Runs a timeout outside of the Angular zone to avoid triggering the change detection. */\n  private runTimeoutOutsideZone(fn: Function, delay = 0) {\n    this._ngZone.runOutsideAngular(() => setTimeout(fn, delay));\n  }\n\n  /** Removes previously registered event listeners from the trigger element. */\n  _removeTriggerEvents() {\n    if (this._triggerElement) {\n      this._triggerEvents.forEach((fn, type) => {\n        this._triggerElement!.removeEventListener(type, fn, this._eventOptions);\n      });\n    }\n  }\n}\n\n/** Enforces a style recalculation of a DOM element by computing its styles. */\nfunction enforceStyleRecalculation(element: HTMLElement) {\n  // Enforce a style recalculation by calling `getComputedStyle` and accessing any property.\n  // Calling `getPropertyValue` is important to let optimizers know that this is not a noop.\n  // See: https://gist.github.com/paulirish/5d52fb081b3570c81e3a\n  window.getComputedStyle(element).getPropertyValue('opacity');\n}\n\n/**\n * Returns the distance from the point (x, y) to the furthest corner of a rectangle.\n */\nfunction distanceToFurthestCorner(x: number, y: number, rect: ClientRect) {\n  const distX = Math.max(Math.abs(x - rect.left), Math.abs(x - rect.right));\n  const distY = Math.max(Math.abs(y - rect.top), Math.abs(y - rect.bottom));\n  return Math.sqrt(distX * distX + distY * distY);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** @docs-private */\nexport function getMatFormFieldPlaceholderConflictError(): Error {\n  return Error('Placeholder attribute and child element were both specified.');\n}\n\n/** @docs-private */\nexport function getMatFormFieldDuplicatedHintError(align: string): Error {\n  return Error(`A hint was already declared for 'align=\"${align}\"'.`);\n}\n\n/** @docs-private */\nexport function getMatFormFieldMissingControlError(): Error {\n  return Error('mat-form-field must contain a MatFormFieldControl.');\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** @docs-private */\nexport function getMatInputUnsupportedTypeError(type: string): Error {\n  return Error(`Input type \"${type}\" isn't supported by matInput.`);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** @docs-private */\nexport function createMissingDateImplError(provider: string) {\n  return Error(\n      `MatDatepicker: No provider found for ${provider}. You must import one of the following ` +\n      `modules at your application root: MatNativeDateModule, MatMomentDateModule, or provide a ` +\n      `custom implementation.`);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Converts values into strings. Falsy values become empty strings.\n * @docs-private\n */\nexport function coerceToString(value: string | number): string {\n  return `${value || ''}`;\n}\n\n/**\n * Converts a value that might be a string into a number.\n * @docs-private\n */\nexport function coerceToNumber(value: string | number): number {\n  return typeof value === 'string' ? parseInt(value, 10) : value;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Throws an exception for the case when menu trigger doesn't have a valid mat-menu instance\n * @docs-private\n */\nexport function throwMatMenuMissingError() {\n  throw Error(`mat-menu-trigger: must pass in an mat-menu instance.\n\n    Example:\n      <mat-menu #menu=\"matMenu\"></mat-menu>\n      <button [matMenuTriggerFor]=\"menu\"></button>`);\n}\n\n/**\n * Throws an exception for the case when menu's x-position value isn't valid.\n * In other words, it doesn't match 'before' or 'after'.\n * @docs-private\n */\nexport function throwMatMenuInvalidPositionX() {\n  throw Error(`x-position value must be either 'before' or after'.\n      Example: <mat-menu x-position=\"before\" #menu=\"matMenu\"></mat-menu>`);\n}\n\n/**\n * Throws an exception for the case when menu's y-position value isn't valid.\n * In other words, it doesn't match 'above' or 'below'.\n * @docs-private\n */\nexport function throwMatMenuInvalidPositionY() {\n  throw Error(`y-position value must be either 'above' or below'.\n      Example: <mat-menu y-position=\"above\" #menu=\"matMenu\"></mat-menu>`);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Returns an exception to be thrown when attempting to change a select's `multiple` option\n * after initialization.\n * @docs-private\n */\nexport function getMatSelectDynamicMultipleError(): Error {\n  return Error('Cannot change `multiple` mode of select after initialization.');\n}\n\n/**\n * Returns an exception to be thrown when attempting to assign a non-array value to a select\n * in `multiple` mode. Note that `undefined` and `null` are still valid values to allow for\n * resetting the value.\n * @docs-private\n */\nexport function getMatSelectNonArrayValueError(): Error {\n  return Error('Value must be an array in multiple-selection mode.');\n}\n\n/**\n * Returns an exception to be thrown when assigning a non-function value to the comparator\n * used to determine if a value corresponds to an option. Note that whether the function\n * actually takes two values and returns a boolean is not checked.\n */\nexport function getMatSelectNonFunctionValueError(): Error {\n  return Error('`compareWith` must be a function.');\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** @docs-private */\nexport function getSortDuplicateSortableIdError(id: string): Error {\n  return Error(`Cannot have two MatSortables with the same id (${id}).`);\n}\n\n/** @docs-private */\nexport function getSortHeaderNotContainedWithinSortError(): Error {\n  return Error(`MatSortHeader must be placed within a parent element with the MatSort directive.`);\n}\n\n/** @docs-private */\nexport function getSortHeaderMissingIdError(): Error {\n  return Error(`MatSortHeader must be provided with a unique id.`);\n}\n\n/** @docs-private */\nexport function getSortInvalidDirectionError(direction: string): Error {\n  return Error(`${direction} is not a valid sort direction ('asc' or 'desc').`);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** @docs-private */\nexport class AnimationCurves {\n  static STANDARD_CURVE = 'cubic-bezier(0.4,0.0,0.2,1)';\n  static DECELERATION_CURVE = 'cubic-bezier(0.0,0.0,0.2,1)';\n  static ACCELERATION_CURVE = 'cubic-bezier(0.4,0.0,1,1)';\n  static SHARP_CURVE = 'cubic-bezier(0.4,0.0,0.6,1)';\n}\n\n\n/** @docs-private */\nexport class AnimationDurations {\n  static COMPLEX = '375ms';\n  static ENTERING = '225ms';\n  static EXITING = '195ms';\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule, InjectionToken, Optional, Inject, isDevMode} from '@angular/core';\nimport {BidiModule} from '@angular/cdk/bidi';\n\n\n/** Injection token that configures whether the Material sanity checks are enabled. */\nexport const MATERIAL_SANITY_CHECKS = new InjectionToken<boolean>('mat-sanity-checks');\n\n\n/**\n * Module that captures anything that should be loaded and/or run for *all* Angular Material\n * components. This includes Bidi, etc.\n *\n * This module should be imported to each top-level component module (e.g., MatTabsModule).\n */\n@NgModule({\n  imports: [BidiModule],\n  exports: [BidiModule],\n  providers: [{\n    provide: MATERIAL_SANITY_CHECKS, useValue: true,\n  }],\n})\nexport class MatCommonModule {\n  /** Whether we've done the global sanity checks (e.g. a theme is loaded, there is a doctype). */\n  private _hasDoneGlobalChecks = false;\n\n  /** Whether we've already checked for HammerJs availability. */\n  private _hasCheckedHammer = false;\n\n  /** Reference to the global `document` object. */\n  private _document = typeof document === 'object' && document ? document : null;\n\n  /** Reference to the global 'window' object. */\n  private _window = typeof window === 'object' && window ? window : null;\n\n  constructor(@Optional() @Inject(MATERIAL_SANITY_CHECKS) private _sanityChecksEnabled: boolean) {\n    if (this._areChecksEnabled() && !this._hasDoneGlobalChecks) {\n      this._checkDoctypeIsDefined();\n      this._checkThemeIsPresent();\n      this._hasDoneGlobalChecks = true;\n    }\n  }\n\n  /** Whether any sanity checks are enabled */\n  private _areChecksEnabled(): boolean {\n    return this._sanityChecksEnabled && isDevMode() && !this._isTestEnv();\n  }\n\n  /** Whether the code is running in tests. */\n  private _isTestEnv() {\n    return this._window && (this._window['__karma__'] || this._window['jasmine']);\n  }\n\n  private _checkDoctypeIsDefined(): void {\n    if (this._document && !this._document.doctype) {\n      console.warn(\n        'Current document does not have a doctype. This may cause ' +\n        'some Angular Material components not to behave as expected.'\n      );\n    }\n  }\n\n  private _checkThemeIsPresent(): void {\n    if (this._document && typeof getComputedStyle === 'function') {\n      const testElement = this._document.createElement('div');\n\n      testElement.classList.add('mat-theme-loaded-marker');\n      this._document.body.appendChild(testElement);\n\n      const computedStyle = getComputedStyle(testElement);\n\n      // In some situations, the computed style of the test element can be null. For example in\n      // Firefox, the computed style is null if an application is running inside of a hidden iframe.\n      // See: https://bugzilla.mozilla.org/show_bug.cgi?id=548397\n      if (computedStyle && computedStyle.display !== 'none') {\n        console.warn(\n          'Could not find Angular Material core theme. Most Material ' +\n          'components may not work as expected. For more info refer ' +\n          'to the theming guide: https://material.angular.io/guide/theming'\n        );\n      }\n\n      this._document.body.removeChild(testElement);\n    }\n  }\n\n  /** Checks whether HammerJS is available. */\n  _checkHammerIsAvailable(): void {\n    if (this._hasCheckedHammer || !this._window) {\n      return;\n    }\n\n    if (this._areChecksEnabled() && !this._window['Hammer']) {\n      console.warn(\n        'Could not find HammerJS. Certain Angular Material components may not work correctly.');\n    }\n    this._hasCheckedHammer = true;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {InjectionToken, LOCALE_ID} from '@angular/core';\nimport {Observable} from 'rxjs/Observable';\nimport {Subject} from 'rxjs/Subject';\n\n\n/** InjectionToken for datepicker that can be used to override default locale code. */\nexport const MAT_DATE_LOCALE = new InjectionToken<string>('MAT_DATE_LOCALE');\n\n/** Provider for MAT_DATE_LOCALE injection token. */\nexport const MAT_DATE_LOCALE_PROVIDER = {provide: MAT_DATE_LOCALE, useExisting: LOCALE_ID};\n\n/** Adapts type `D` to be usable as a date by cdk-based components that work with dates. */\nexport abstract class DateAdapter<D> {\n  /** The locale to use for all dates. */\n  protected locale: any;\n\n  /** A stream that emits when the locale changes. */\n  get localeChanges(): Observable<void> { return this._localeChanges; }\n  protected _localeChanges = new Subject<void>();\n\n  /**\n   * Gets the year component of the given date.\n   * @param date The date to extract the year from.\n   * @returns The year component.\n   */\n  abstract getYear(date: D): number;\n\n  /**\n   * Gets the month component of the given date.\n   * @param date The date to extract the month from.\n   * @returns The month component (0-indexed, 0 = January).\n   */\n  abstract getMonth(date: D): number;\n\n  /**\n   * Gets the date of the month component of the given date.\n   * @param date The date to extract the date of the month from.\n   * @returns The month component (1-indexed, 1 = first of month).\n   */\n  abstract getDate(date: D): number;\n\n  /**\n   * Gets the day of the week component of the given date.\n   * @param date The date to extract the day of the week from.\n   * @returns The month component (0-indexed, 0 = Sunday).\n   */\n  abstract getDayOfWeek(date: D): number;\n\n  /**\n   * Gets a list of names for the months.\n   * @param style The naming style (e.g. long = 'January', short = 'Jan', narrow = 'J').\n   * @returns An ordered list of all month names, starting with January.\n   */\n  abstract getMonthNames(style: 'long' | 'short' | 'narrow'): string[];\n\n  /**\n   * Gets a list of names for the dates of the month.\n   * @returns An ordered list of all date of the month names, starting with '1'.\n   */\n  abstract getDateNames(): string[];\n\n  /**\n   * Gets a list of names for the days of the week.\n   * @param style The naming style (e.g. long = 'Sunday', short = 'Sun', narrow = 'S').\n   * @returns An ordered list of all weekday names, starting with Sunday.\n   */\n  abstract getDayOfWeekNames(style: 'long' | 'short' | 'narrow'): string[];\n\n  /**\n   * Gets the name for the year of the given date.\n   * @param date The date to get the year name for.\n   * @returns The name of the given year (e.g. '2017').\n   */\n  abstract getYearName(date: D): string;\n\n  /**\n   * Gets the first day of the week.\n   * @returns The first day of the week (0-indexed, 0 = Sunday).\n   */\n  abstract getFirstDayOfWeek(): number;\n\n  /**\n   * Gets the number of days in the month of the given date.\n   * @param date The date whose month should be checked.\n   * @returns The number of days in the month of the given date.\n   */\n  abstract getNumDaysInMonth(date: D): number;\n\n  /**\n   * Clones the given date.\n   * @param date The date to clone\n   * @returns A new date equal to the given date.\n   */\n  abstract clone(date: D): D;\n\n  /**\n   * Creates a date with the given year, month, and date. Does not allow over/under-flow of the\n   * month and date.\n   * @param year The full year of the date. (e.g. 89 means the year 89, not the year 1989).\n   * @param month The month of the date (0-indexed, 0 = January). Must be an integer 0 - 11.\n   * @param date The date of month of the date. Must be an integer 1 - length of the given month.\n   * @returns The new date, or null if invalid.\n   */\n  abstract createDate(year: number, month: number, date: number): D;\n\n  /**\n   * Gets today's date.\n   * @returns Today's date.\n   */\n  abstract today(): D;\n\n  /**\n   * Parses a date from a user-provided value.\n   * @param value The value to parse.\n   * @param parseFormat The expected format of the value being parsed\n   *     (type is implementation-dependent).\n   * @returns The parsed date.\n   */\n  abstract parse(value: any, parseFormat: any): D | null;\n\n  /**\n   * Formats a date as a string according to the given format.\n   * @param date The value to format.\n   * @param displayFormat The format to use to display the date as a string.\n   * @returns The formatted date string.\n   */\n  abstract format(date: D, displayFormat: any): string;\n\n  /**\n   * Adds the given number of years to the date. Years are counted as if flipping 12 pages on the\n   * calendar for each year and then finding the closest date in the new month. For example when\n   * adding 1 year to Feb 29, 2016, the resulting date will be Feb 28, 2017.\n   * @param date The date to add years to.\n   * @param years The number of years to add (may be negative).\n   * @returns A new date equal to the given one with the specified number of years added.\n   */\n  abstract addCalendarYears(date: D, years: number): D;\n\n  /**\n   * Adds the given number of months to the date. Months are counted as if flipping a page on the\n   * calendar for each month and then finding the closest date in the new month. For example when\n   * adding 1 month to Jan 31, 2017, the resulting date will be Feb 28, 2017.\n   * @param date The date to add months to.\n   * @param months The number of months to add (may be negative).\n   * @returns A new date equal to the given one with the specified number of months added.\n   */\n  abstract addCalendarMonths(date: D, months: number): D;\n\n  /**\n   * Adds the given number of days to the date. Days are counted as if moving one cell on the\n   * calendar for each day.\n   * @param date The date to add days to.\n   * @param days The number of days to add (may be negative).\n   * @returns A new date equal to the given one with the specified number of days added.\n   */\n  abstract addCalendarDays(date: D, days: number): D;\n\n  /**\n   * Gets the RFC 3339 compatible string (https://tools.ietf.org/html/rfc3339) for the given date.\n   * This method is used to generate date strings that are compatible with native HTML attributes\n   * such as the `min` or `max` attribute of an `<input>`.\n   * @param date The date to get the ISO date string for.\n   * @returns The ISO date string date string.\n   */\n  abstract toIso8601(date: D): string;\n\n  /**\n   * Checks whether the given object is considered a date instance by this DateAdapter.\n   * @param obj The object to check\n   * @returns Whether the object is a date instance.\n   */\n  abstract isDateInstance(obj: any): boolean;\n\n  /**\n   * Checks whether the given date is valid.\n   * @param date The date to check.\n   * @returns Whether the date is valid.\n   */\n  abstract isValid(date: D): boolean;\n\n  /**\n   * Gets date instance that is not valid.\n   * @returns An invalid date.\n   */\n  abstract invalid(): D;\n\n  /**\n   * Attempts to deserialize a value to a valid date object. This is different from parsing in that\n   * deserialize should only accept non-ambiguous, locale-independent formats (e.g. a ISO 8601\n   * string). The default implementation does not allow any deserialization, it simply checks that\n   * the given value is already a valid date object or null. The `<mat-datepicker>` will call this\n   * method on all of it's `@Input()` properties that accept dates. It is therefore possible to\n   * support passing values from your backend directly to these properties by overriding this method\n   * to also deserialize the format used by your backend.\n   * @param value The value to be deserialized into a date object.\n   * @returns The deserialized date object, either a valid date, null if the value can be\n   *     deserialized into a null date (e.g. the empty string), or an invalid date.\n   */\n  deserialize(value: any): D | null {\n    if (value == null || this.isDateInstance(value) && this.isValid(value)) {\n      return value;\n    }\n    return this.invalid();\n  }\n\n  /**\n   * Sets the locale used for all dates.\n   * @param locale The new locale.\n   */\n  setLocale(locale: any) {\n    this.locale = locale;\n    this._localeChanges.next();\n  }\n\n  /**\n   * Compares two dates.\n   * @param first The first date to compare.\n   * @param second The second date to compare.\n   * @returns 0 if the dates are equal, a number less than 0 if the first date is earlier,\n   *     a number greater than 0 if the first date is later.\n   */\n  compareDate(first: D, second: D): number {\n    return this.getYear(first) - this.getYear(second) ||\n        this.getMonth(first) - this.getMonth(second) ||\n        this.getDate(first) - this.getDate(second);\n  }\n\n  /**\n   * Checks if two dates are equal.\n   * @param first The first date to check.\n   * @param second The second date to check.\n   * @returns Whether the two dates are equal.\n   *     Null dates are considered equal to other null dates.\n   */\n  sameDate(first: D | null, second: D | null): boolean {\n    if (first && second) {\n      let firstValid = this.isValid(first);\n      let secondValid = this.isValid(second);\n      if (firstValid && secondValid) {\n        return !this.compareDate(first, second);\n      }\n      return firstValid == secondValid;\n    }\n    return first == second;\n  }\n\n  /**\n   * Clamp the given date between min and max dates.\n   * @param date The date to clamp.\n   * @param min The minimum value to allow. If null or omitted no min is enforced.\n   * @param max The maximum value to allow. If null or omitted no max is enforced.\n   * @returns `min` if `date` is less than `min`, `max` if date is greater than `max`,\n   *     otherwise `date`.\n   */\n  clampDate(date: D, min?: D | null, max?: D | null): D {\n    if (min && this.compareDate(date, min) < 0) {\n      return min;\n    }\n    if (max && this.compareDate(date, max) > 0) {\n      return max;\n    }\n    return date;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {InjectionToken} from '@angular/core';\n\n\nexport type MatDateFormats = {\n  parse: {\n    dateInput: any\n  },\n  display: {\n    dateInput: any,\n    monthYearLabel: any,\n    dateA11yLabel: any,\n    monthYearA11yLabel: any,\n  }\n};\n\n\nexport const MAT_DATE_FORMATS = new InjectionToken<MatDateFormats>('mat-date-formats');\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {MatDateFormats} from './date-formats';\n\n\nexport const MAT_NATIVE_DATE_FORMATS: MatDateFormats = {\n  parse: {\n    dateInput: null,\n  },\n  display: {\n    dateInput: {year: 'numeric', month: 'numeric', day: 'numeric'},\n    monthYearLabel: {year: 'numeric', month: 'short'},\n    dateA11yLabel: {year: 'numeric', month: 'long', day: 'numeric'},\n    monthYearA11yLabel: {year: 'numeric', month: 'long'},\n  }\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {PlatformModule} from '@angular/cdk/platform';\nimport {NgModule} from '@angular/core';\nimport {DateAdapter, MAT_DATE_LOCALE_PROVIDER} from './date-adapter';\nimport {MAT_DATE_FORMATS} from './date-formats';\nimport {NativeDateAdapter} from './native-date-adapter';\nimport {MAT_NATIVE_DATE_FORMATS} from './native-date-formats';\n\nexport * from './date-adapter';\nexport * from './date-formats';\nexport * from './native-date-adapter';\nexport * from './native-date-formats';\n\n\n@NgModule({\n  imports: [PlatformModule],\n  providers: [\n    {provide: DateAdapter, useClass: NativeDateAdapter},\n    MAT_DATE_LOCALE_PROVIDER\n  ],\n})\nexport class NativeDateModule {}\n\n\n@NgModule({\n  imports: [NativeDateModule],\n  providers: [{provide: MAT_DATE_FORMATS, useValue: MAT_NATIVE_DATE_FORMATS}],\n})\nexport class MatNativeDateModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable} from '@angular/core';\nimport {FormGroupDirective, NgForm, FormControl} from '@angular/forms';\n\n/** Error state matcher that matches when a control is invalid and dirty. */\n@Injectable()\nexport class ShowOnDirtyErrorStateMatcher implements ErrorStateMatcher {\n  isErrorState(control: FormControl | null, form: FormGroupDirective | NgForm | null): boolean {\n    return !!(control && control.invalid && (control.dirty || (form && form.submitted)));\n  }\n}\n\n/** Provider that defines how form controls behave with regards to displaying error messages. */\n@Injectable()\nexport class ErrorStateMatcher {\n  isErrorState(control: FormControl | null, form: FormGroupDirective | NgForm | null): boolean {\n    return !!(control && control.invalid && (control.touched || (form && form.submitted)));\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable, InjectionToken, Inject, Optional} from '@angular/core';\nimport {HammerGestureConfig} from '@angular/platform-browser';\nimport {MatCommonModule} from '../common-behaviors/common-module';\nimport {\n  HammerStatic,\n  HammerInstance,\n  Recognizer,\n  RecognizerStatic,\n  HammerOptions,\n} from './gesture-annotations';\n\n/**\n * Injection token that can be used to provide options to the Hammerjs instance.\n * More info at http://hammerjs.github.io/api/.\n */\nexport const MAT_HAMMER_OPTIONS = new InjectionToken<HammerOptions>('MAT_HAMMER_OPTIONS');\n\n/** Adjusts configuration of our gesture library, Hammer. */\n@Injectable()\nexport class GestureConfig extends HammerGestureConfig {\n  private _hammer: HammerStatic = typeof window !== 'undefined' ? (window as any).Hammer : null;\n\n  /** List of new event names to add to the gesture support list */\n  events: string[] = this._hammer ? [\n    'longpress',\n    'slide',\n    'slidestart',\n    'slideend',\n    'slideright',\n    'slideleft'\n  ] : [];\n\n  constructor(\n    @Optional() @Inject(MAT_HAMMER_OPTIONS) private _hammerOptions?: HammerOptions,\n    @Optional() commonModule?: MatCommonModule) {\n    super();\n    if (commonModule) {\n      commonModule._checkHammerIsAvailable();\n    }\n  }\n\n  /**\n   * Builds Hammer instance manually to add custom recognizers that match the Material Design spec.\n   *\n   * Our gesture names come from the Material Design gestures spec:\n   * https://www.google.com/design/spec/patterns/gestures.html#gestures-touch-mechanics\n   *\n   * More information on default recognizers can be found in Hammer docs:\n   * http://hammerjs.github.io/recognizer-pan/\n   * http://hammerjs.github.io/recognizer-press/\n   *\n   * @param element Element to which to assign the new HammerJS gestures.\n   * @returns Newly-created HammerJS instance.\n   */\n  buildHammer(element: HTMLElement): HammerInstance {\n    const mc = new this._hammer(element, this._hammerOptions || undefined);\n\n    // Default Hammer Recognizers.\n    const pan = new this._hammer.Pan();\n    const swipe = new this._hammer.Swipe();\n    const press = new this._hammer.Press();\n\n    // Notice that a HammerJS recognizer can only depend on one other recognizer once.\n    // Otherwise the previous `recognizeWith` will be dropped.\n    // TODO: Confirm threshold numbers with Material Design UX Team\n    const slide = this._createRecognizer(pan, {event: 'slide', threshold: 0}, swipe);\n    const longpress = this._createRecognizer(press, {event: 'longpress', time: 500});\n\n    // Overwrite the default `pan` event to use the swipe event.\n    pan.recognizeWith(swipe);\n\n    // Add customized gestures to Hammer manager\n    mc.add([swipe, press, pan, slide, longpress]);\n\n    return mc as HammerInstance;\n  }\n\n  /** Creates a new recognizer, without affecting the default recognizers of HammerJS */\n  private _createRecognizer(base: Recognizer, options: any, ...inheritances: Recognizer[]) {\n    let recognizer = new (base.constructor as RecognizerStatic)(options);\n\n    inheritances.push(base);\n    inheritances.forEach(item => recognizer.recognizeWith(item));\n\n    return recognizer;\n  }\n\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  NgModule,\n  Directive,\n  ElementRef,\n  QueryList,\n} from '@angular/core';\nimport {MatCommonModule} from '../common-behaviors/common-module';\n\n\n/**\n * Shared directive to count lines inside a text area, such as a list item.\n * Line elements can be extracted with a @ContentChildren(MatLine) query, then\n * counted by checking the query list's length.\n */\n@Directive({\n  selector: '[mat-line], [matLine]',\n  host: {'class': 'mat-line'}\n})\nexport class MatLine {}\n\n/**\n * Helper that takes a query list of lines and sets the correct class on the host.\n * @docs-private\n */\nexport class MatLineSetter {\n  constructor(private _lines: QueryList<MatLine>, private _element: ElementRef) {\n    this._setLineClass(this._lines.length);\n\n    this._lines.changes.subscribe(() => {\n      this._setLineClass(this._lines.length);\n    });\n  }\n\n  private _setLineClass(count: number): void {\n    this._resetClasses();\n    if (count === 2 || count === 3) {\n      this._setClass(`mat-${count}-line`, true);\n    } else if (count > 3) {\n      this._setClass(`mat-multi-line`, true);\n    }\n  }\n\n  private _resetClasses(): void {\n    this._setClass('mat-2-line', false);\n    this._setClass('mat-3-line', false);\n    this._setClass('mat-multi-line', false);\n  }\n\n  private _setClass(className: string, isAdd: boolean): void {\n    if (isAdd) {\n      this._element.nativeElement.classList.add(className);\n    } else {\n      this._element.nativeElement.classList.remove(className);\n    }\n  }\n\n}\n\n@NgModule({\n  imports: [MatCommonModule],\n  exports: [MatLine, MatCommonModule],\n  declarations: [MatLine],\n})\nexport class MatLineModule { }\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {RippleConfig, RippleRenderer} from './ripple-renderer';\n\n/** Possible states for a ripple element. */\nexport enum RippleState {\n  FADING_IN, VISIBLE, FADING_OUT, HIDDEN\n}\n\n/**\n * Reference to a previously launched ripple element.\n */\nexport class RippleRef {\n\n  /** Current state of the ripple reference. */\n  state: RippleState = RippleState.HIDDEN;\n\n  constructor(\n    private _renderer: RippleRenderer,\n    public element: HTMLElement,\n    public config: RippleConfig) {\n  }\n\n  /** Fades out the ripple element. */\n  fadeOut() {\n    this._renderer.fadeOutRipple(this);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Platform} from '@angular/cdk/platform';\nimport {\n  Directive,\n  ElementRef,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  OnDestroy,\n  OnInit,\n  Optional,\n} from '@angular/core';\nimport {RippleRef} from './ripple-ref';\nimport {RippleAnimationConfig, RippleConfig, RippleRenderer, RippleTarget} from './ripple-renderer';\n\n/** Configurable options for `matRipple`. */\nexport interface RippleGlobalOptions {\n  /**\n   * Whether ripples should be disabled. Ripples can be still launched manually by using\n   * the `launch()` method. Therefore focus indicators will still show up.\n   */\n  disabled?: boolean;\n\n  /**\n   * Configuration for the animation duration of the ripples.\n   * There are two phases with different durations for the ripples.\n   */\n  animation?: RippleAnimationConfig;\n\n  /**\n   * If set, the default duration of the fade-in animation is divided by this value. For example,\n   * setting it to 0.5 will cause the ripple fade-in animation to take twice as long.\n   * A changed speedFactor will not affect the fade-out duration of the ripples.\n   * @deprecated Use the `animation` global option instead.\n   * @deletion-target 7.0.0\n   */\n  baseSpeedFactor?: number;\n\n  /**\n   * Whether ripples should start fading out immediately after the mouse our touch is released. By\n   * default, ripples will wait for the enter animation to complete and for mouse or touch release.\n   */\n  terminateOnPointerUp?: boolean;\n}\n\n/** Injection token that can be used to specify the global ripple options. */\nexport const MAT_RIPPLE_GLOBAL_OPTIONS =\n    new InjectionToken<RippleGlobalOptions>('mat-ripple-global-options');\n\n@Directive({\n  selector: '[mat-ripple], [matRipple]',\n  exportAs: 'matRipple',\n  host: {\n    'class': 'mat-ripple',\n    '[class.mat-ripple-unbounded]': 'unbounded'\n  }\n})\nexport class MatRipple implements OnInit, OnDestroy, RippleTarget {\n\n  /** Custom color for all ripples. */\n  @Input('matRippleColor') color: string;\n\n  /** Whether the ripples should be visible outside the component's bounds. */\n  @Input('matRippleUnbounded') unbounded: boolean;\n\n  /**\n   * Whether the ripple always originates from the center of the host element's bounds, rather\n   * than originating from the location of the click event.\n   */\n  @Input('matRippleCentered') centered: boolean;\n\n  /**\n   * If set, the radius in pixels of foreground ripples when fully expanded. If unset, the radius\n   * will be the distance from the center of the ripple to the furthest corner of the host element's\n   * bounding rectangle.\n   */\n  @Input('matRippleRadius') radius: number = 0;\n\n  /**\n   * If set, the normal duration of ripple animations is divided by this value. For example,\n   * setting it to 0.5 will cause the animations to take twice as long.\n   * A changed speedFactor will not modify the fade-out duration of the ripples.\n   * @deprecated Use the [matRippleAnimation] binding instead.\n   * @deletion-target 7.0.0\n   */\n  @Input('matRippleSpeedFactor') speedFactor: number = 1;\n\n  /**\n   * Configuration for the ripple animation. Allows modifying the enter and exit animation\n   * duration of the ripples.\n   */\n  @Input('matRippleAnimation') animation: RippleAnimationConfig;\n\n  /**\n   * Whether click events will not trigger the ripple. Ripples can be still launched manually\n   * by using the `launch()` method.\n   */\n  @Input('matRippleDisabled')\n  get disabled() { return this._disabled; }\n  set disabled(value: boolean) {\n    this._disabled = value;\n    this._setupTriggerEventsIfEnabled();\n  }\n  private _disabled: boolean = false;\n\n  /**\n   * The element that triggers the ripple when click events are received.\n   * Defaults to the directive's host element.\n   */\n  @Input('matRippleTrigger')\n  get trigger() { return this._trigger || this._elementRef.nativeElement; }\n  set trigger(trigger: HTMLElement) {\n    this._trigger = trigger;\n    this._setupTriggerEventsIfEnabled();\n  }\n  private _trigger: HTMLElement;\n\n  /** Renderer for the ripple DOM manipulations. */\n  private _rippleRenderer: RippleRenderer;\n\n  /** Options that are set globally for all ripples. */\n  private _globalOptions: RippleGlobalOptions;\n\n  /** Whether ripple directive is initialized and the input bindings are set. */\n  private _isInitialized: boolean = false;\n\n  constructor(private _elementRef: ElementRef,\n              ngZone: NgZone,\n              platform: Platform,\n              @Optional() @Inject(MAT_RIPPLE_GLOBAL_OPTIONS) globalOptions: RippleGlobalOptions) {\n\n    this._globalOptions = globalOptions || {};\n    this._rippleRenderer = new RippleRenderer(this, ngZone, _elementRef, platform);\n  }\n\n  ngOnInit() {\n    this._isInitialized = true;\n    this._setupTriggerEventsIfEnabled();\n  }\n\n  ngOnDestroy() {\n    this._rippleRenderer._removeTriggerEvents();\n  }\n\n  /** Fades out all currently showing ripple elements. */\n  fadeOutAll() {\n    this._rippleRenderer.fadeOutAll();\n  }\n\n  /** Ripple configuration from the directive's input values. */\n  get rippleConfig(): RippleConfig {\n    return {\n      centered: this.centered,\n      radius: this.radius,\n      color: this.color,\n      animation: {...this._globalOptions.animation, ...this.animation},\n      terminateOnPointerUp: this._globalOptions.terminateOnPointerUp,\n      speedFactor: this.speedFactor * (this._globalOptions.baseSpeedFactor || 1),\n    };\n  }\n\n  /** Whether ripples on pointer-down are disabled or not. */\n  get rippleDisabled(): boolean {\n    return this.disabled || !!this._globalOptions.disabled;\n  }\n\n  /** Sets up the the trigger event listeners if ripples are enabled. */\n  private _setupTriggerEventsIfEnabled() {\n    if (!this.disabled && this._isInitialized) {\n      this._rippleRenderer.setupTriggerEvents(this.trigger);\n    }\n  }\n\n  /**\n   * Launches a manual ripple using the specified ripple configuration.\n   * @param config Configuration for the manual ripple.\n   */\n  launch(config: RippleConfig): RippleRef;\n\n  /**\n   * Launches a manual ripple at the specified coordinates within the element.\n   * @param x Coordinate within the element, along the X axis at which to fade-in the ripple.\n   * @param y Coordinate within the element, along the Y axis at which to fade-in the ripple.\n   * @param config Optional ripple configuration for the manual ripple.\n   */\n  launch(x: number, y: number, config?: RippleConfig): RippleRef;\n\n  /** Launches a manual ripple at the specified coordinated or just by the ripple config. */\n  launch(configOrX: number | RippleConfig, y: number = 0, config?: RippleConfig): RippleRef {\n    if (typeof configOrX === 'number') {\n      return this._rippleRenderer.fadeInRipple(configOrX, y, {...this.rippleConfig, ...config});\n    } else {\n      return this._rippleRenderer.fadeInRipple(0, 0, {...this.rippleConfig, ...configOrX});\n    }\n  }\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {PlatformModule} from '@angular/cdk/platform';\nimport {MatCommonModule} from '../common-behaviors/common-module';\nimport {MatRipple} from './ripple';\n\nexport * from './ripple';\nexport * from './ripple-ref';\nexport * from './ripple-renderer';\n\n@NgModule({\n  imports: [MatCommonModule, PlatformModule],\n  exports: [MatRipple, MatCommonModule],\n  declarations: [MatRipple],\n})\nexport class MatRippleModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Component, ViewEncapsulation, Input, ChangeDetectionStrategy} from '@angular/core';\n\nexport type MatPseudoCheckboxState = 'unchecked' | 'checked' | 'indeterminate';\n\n/**\n * Component that shows a simplified checkbox without including any kind of \"real\" checkbox.\n * Meant to be used when the checkbox is purely decorative and a large number of them will be\n * included, such as for the options in a multi-select. Uses no SVGs or complex animations.\n * Note that theming is meant to be handled by the parent element, e.g.\n * `mat-primary .mat-pseudo-checkbox`.\n *\n * Note that this component will be completely invisible to screen-reader users. This is *not*\n * interchangeable with `<mat-checkbox>` and should *not* be used if the user would directly\n * interact with the checkbox. The pseudo-checkbox should only be used as an implementation detail\n * of more complex components that appropriately handle selected / checked state.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  selector: 'mat-pseudo-checkbox',\n  styleUrls: ['pseudo-checkbox.css'],\n  template: '',\n  host: {\n    'class': 'mat-pseudo-checkbox',\n    '[class.mat-pseudo-checkbox-indeterminate]': 'state === \"indeterminate\"',\n    '[class.mat-pseudo-checkbox-checked]': 'state === \"checked\"',\n    '[class.mat-pseudo-checkbox-disabled]': 'disabled',\n  },\n})\nexport class MatPseudoCheckbox {\n  /** Display state of the checkbox. */\n  @Input() state: MatPseudoCheckboxState = 'unchecked';\n\n  /** Whether the checkbox is disabled. */\n  @Input() disabled: boolean = false;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatPseudoCheckbox} from './pseudo-checkbox/pseudo-checkbox';\n\n\n@NgModule({\n  exports: [MatPseudoCheckbox],\n  declarations: [MatPseudoCheckbox]\n})\nexport class MatPseudoCheckboxModule { }\n\n\nexport * from './pseudo-checkbox/pseudo-checkbox';\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Component, ViewEncapsulation, Input, ChangeDetectionStrategy} from '@angular/core';\nimport {mixinDisabled, CanDisable} from '../common-behaviors/disabled';\n\n// Boilerplate for applying mixins to MatOptgroup.\n/** @docs-private */\nexport class MatOptgroupBase { }\nexport const _MatOptgroupMixinBase = mixinDisabled(MatOptgroupBase);\n\n// Counter for unique group ids.\nlet _uniqueOptgroupIdCounter = 0;\n\n/**\n * Component that is used to group instances of `mat-option`.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-optgroup',\n  exportAs: 'matOptgroup',\n  templateUrl: 'optgroup.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  inputs: ['disabled'],\n  styleUrls: ['optgroup.css'],\n  host: {\n    'class': 'mat-optgroup',\n    'role': 'group',\n    '[class.mat-optgroup-disabled]': 'disabled',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.aria-labelledby]': '_labelId',\n  }\n})\nexport class MatOptgroup extends _MatOptgroupMixinBase implements CanDisable {\n  /** Label for the option group. */\n  @Input() label: string;\n\n  /** Unique id for the underlying label. */\n  _labelId: string = `mat-optgroup-label-${_uniqueOptgroupIdCounter++}`;\n}\n"],"names":["inputs","encapsulation","ViewEncapsulation","None","changeDetection","ChangeDetectionStrategy","OnPush","host","class","[class.mat-tab-header-pagination-controls-enabled]","[class.mat-tab-header-rtl]","type","ViewportRuler","Directionality","decorators","Optional","MatTabHeader","propDecorators","_tabListContainer","ViewChild","args","_tabList","selectedIndex","Input","selectFocusedIndex","Output","indexFocused","MatTabNavBase","_elementRef","this","_MatTabNavMixinBase","mixinColor","MatTabNav","elementRef","_dir","_ngZone","_changeDetectorRef","_viewportRuler","_this","_super","call","_onDestroy","Subject","_disableRipple","tslib_1.__extends","Object","defineProperty","prototype","_backgroundColor","value","nativeElement","classList","remove","backgroundColor","add","coerceBooleanProperty","_setLinkDisableRipple","updateActiveLink","element","_activeLinkChanged","_activeLinkElement","markForCheck","ngAfterContentInit","runOutsideAngular","dirChange","change","observableOf","merge","pipe","takeUntil","subscribe","_alignInkBar","ngAfterContentChecked","ngOnDestroy","next","complete","_inkBar","alignToElement","_tabLinks","forEach","link","disableRipple","Component","selector","exportAs","template","styles","NgZone","ChangeDetectorRef","MatTabLinkBase","_MatTabLinkMixinBase","mixinTabIndex","mixinDisableRipple","mixinDisabled","_tabNavBar","_tabLinkRipple","setupTriggerEvents","tabIndex","parseInt","globalOptions","rippleConfig","terminateOnPointerUp","speedFactor","baseSpeedFactor","animation","get","enumerable","configurable","event","preventDefault","MatTabLink","Directive","[attr.aria-disabled]","[attr.tabIndex]","[class.mat-tab-disabled]","[class.mat-tab-label-active]","(click)","Platform","undefined","Inject","MAT_RIPPLE_GLOBAL_OPTIONS","Attribute","NgModule","imports","CommonModule","MatCommonModule","PortalModule","MatRippleModule","ObserversModule","ScrollDispatchModule","exports","MatTabGroup","MatTabLabel","MatTab","MatTabContent","declarations","MatInkBar","MatTabLabelWrapper","MatTabBody","MatTabBodyPortal","providers","VIEWPORT_RULER_PROVIDER","MatTabsModule","MatToolbarBase","_MatToolbarMixinBase","MatToolbarRow","MatToolbar","_platform","document","_document","ngAfterViewInit","isDevMode","isBrowser","_checkToolbarMixedModes","_toolbarRows","changes","length","slice","childNodes","filter","node","contains","nodeType","COMMENT_NODE","some","textContent","trim","throwToolbarMixedModesError","[class.mat-toolbar-multiple-rows]","[class.mat-toolbar-single-row]","DOCUMENT","PlatformModule","MatToolbarModule","MatTreeNodeOutlet","viewContainer","ViewContainerRef","_MatTreeNodeMixinBase","CdkTreeNode","_MatNestedTreeNodeMixinBase","CdkNestedTreeNode","MatTreeNode","_tree","role","Number","[attr.aria-expanded]","[attr.aria-level]","[attr.role]","provide","useExisting","ElementRef","CdkTree","MatTreeNodeDef","CdkTreeNodeDef","data","MatNestedTreeNode","nodeOutlet","ContentChildren","MatTreeNodePadding","CdkTreeNodePadding","level","indent","MatTree","recursive","MatTreeNodeToggle","CdkTreeNodeToggle","MAT_TREE_DIRECTIVES","CdkTreeModule","MatTreeModule","MatTreeFlattener","transformFunction","getLevel","isExpandable","getChildren","_flattenNode","resultNodes","parentMap","flatNode","push","take","children","child","index","childParentMap","flattenNodes","structuredData","expandFlattenedNodes","nodes","treeControl","results","currentExpand","expand","i","isExpanded","MatTreeFlatDataSource","treeFlattener","initialData","_flattenedData","BehaviorSubject","_expandedData","_data","dataNodes","connect","collectionViewer","viewChange","expansionModel","apply","map","disconnect","DataSource","MatTreeNestedDataSource","VERSION","Version","SELECT_PANEL_PADDING_X","aria-orientation","animations","matStepperAnimations","verticalStepTransition","MatStepper","MatVerticalStepper","ctorParameters","MatStepperNext","[type]","CdkStepper","CdkStepperNext","MatStepperPrevious","CdkStepperPrevious","MatButtonModule","CdkStepperModule","MatIconModule","A11yModule","MatHorizontalStepper","MatStep","MatStepLabel","MatStepHeader","MatStepperIcon","MatStepperIntl","ErrorStateMatcher","MatStepperModule","MatTable","CDK_TABLE_TEMPLATE","MatCellDef","CdkCellDef","MatHeaderCellDef","CdkHeaderCellDef","MatColumnDef","CdkColumnDef","name","MatHeaderCell","columnDef","cssClassFriendlyName","CdkHeaderCell","MatCell","CdkCell","MatHeaderRowDef","CdkHeaderRowDef","MatRowDef","CdkRowDef","MatHeaderRow","CDK_ROW_TEMPLATE","arguments","MatRow","CdkTableModule","MatTableModule","MatTableDataSource","_renderData","_filter","sortingDataAccessor","sortHeaderId","_isNumberValue","sortData","sort","active","direction","a","b","valueA","valueB","comparatorResult","filterPredicate","accumulator","currentTerm","key","dataStr","keys","reduce","toLowerCase","transformedFilter","indexOf","_updateChangeSubscription","_sort","_paginator","paginator","sortChange","empty","pageChange","page","_renderChangesSubscription","unsubscribe","combineLatest","_a","_filterData","startWith","_orderData","_pageData","filteredData","obj","_updatePaginator","startIndex","pageIndex","pageSize","splice","filteredDataLength","Promise","resolve","then","lastPageIndex","Math","ceil","min","show","requestAnimationFrame","_setStyles","style","visibility","hide","inkBar","left","offsetLeft","width","offsetWidth","templateRef","viewContainerRef","TemplateRef","CdkPortal","MatTabBase","_MatTabMixinBase","_viewContainerRef","textLabel","_contentPortal","_labelChange","_disableChange","position","origin","isActive","ngOnChanges","hasOwnProperty","ngOnInit","TemplatePortal","_explicitContent","_implicitContent","matTabsAnimations","translateTab","trigger","state","transform","transition","animate","_componentFactoryResolver","_host","_isCenterPosition","_position","attach","_content","_centeringSub","_beforeCentering","isCentering","hasAttached","_leavingSub","_afterLeavingCenter","detach","closed","ComponentFactoryResolver","forwardRef","CdkPortalOutlet","_onCentering","EventEmitter","_onCentered","_getLayoutDirection","dir","_origin","_onTranslateTabStarted","e","toState","emit","clientHeight","_onTranslateTabComplete","fromState","_portalHost","PortalHostDirective","nextId","MatTabChangeEvent","MatTabGroupBase","_MatTabGroupMixinBase","_indexToSelect","_tabBodyWrapperHeight","_tabsSubscription","Subscription","EMPTY","_tabLabelSubscription","_dynamicHeight","_selectedIndex","headerPosition","selectedIndexChange","focusChange","animationDone","selectedTabChange","_groupId","coerceNumberProperty","indexToSelect","_tabs","max","tabChangeEvent","_createChangeEvent","tab","_subscribeToTabLabels","_focusChanged","toArray","concat","_getTabLabelId","_getTabContentId","_setTabBodyWrapperHeight","tabHeight","wrapper","_tabBodyWrapper","height","offsetHeight","_removeTabBodyWrapperHeight","_handleClick","tabHeader","idx","disabled","focusIndex","_getTabIndex","[class.mat-tab-group-dynamic-height]","[class.mat-tab-group-inverted-header]","dynamicHeight","MatTabLabelWrapperBase","_MatTabLabelWrapperMixinBase","focus","getOffsetLeft","getOffsetWidth","MatTabHeaderBase","_MatTabHeaderMixinBase","_focusIndex","_scrollDistance","_selectedIndexChanged","_realignInkBar","_showPaginationControls","_disableScrollAfter","_disableScrollBefore","_tabLabelCount","_labelWrappers","_updatePagination","_scrollToLabel","_checkScrollingControls","_alignInkBarToSelectedTab","_scrollDistanceChanged","_updateTabScrollPosition","_handleKeydown","keyCode","RIGHT_ARROW","_focusNextTab","LEFT_ARROW","_focusPreviousTab","HOME","_focusFirstTab","END","_focusLastTab","ENTER","SPACE","resize","realign","_onContentChanges","_checkPaginationEnabled","_isValidIndex","_setTabFocus","containerEl","scrollLeft","scrollWidth","_moveFocus","offset","tabs","scrollDistance","translateX","v","_getMaxScrollDistance","_scrollHeader","scrollDir","viewLength","labelIndex","selectedLabel","labelBeforePos","labelAfterPos","beforeVisiblePos","afterVisiblePos","isEnabled","selectedLabelWrapper","MatSlider","step","thumbLabel","tickInterval","displayWith","vertical","input","_sliderWrapper","BidiModule","HAMMER_GESTURE_CONFIG","useClass","GestureConfig","MatSliderModule","MatSnackBarRef","containerInstance","_overlayRef","_afterDismissed","_afterOpened","_onAction","_dismissedByAction","onAction","dismiss","_onExit","_finishDismiss","exit","clearTimeout","_durationTimeoutId","dismissWithAction","closeWithAction","_dismissAfter","duration","setTimeout","_open","dispose","dismissedByAction","afterDismissed","asObservable","afterOpened","_onEnter","MAT_SNACK_BAR_DATA","InjectionToken","MatSnackBarConfig","politeness","announcementMessage","horizontalPosition","verticalPosition","SHOW_ANIMATION","AnimationDurations","ENTERING","AnimationCurves","DECELERATION_CURVE","HIDE_ANIMATION","EXITING","ACCELERATION_CURVE","matSnackBarAnimations","contentFade","opacity","COMPLEX","STANDARD_CURVE","snackBarState","SimpleSnackBar","snackBarRef","action","[@contentFade]","MatSnackBarContainer","_destroyed","_animationState","attachComponentPortal","portal","_assertNotAttached","_applySnackBarClasses","_portalOutlet","attachTemplatePortal","onAnimationEnd","startsWith","_completeExit","onEnter_1","run","enter","snackBarConfig","detectChanges","onMicrotaskEmpty","panelClasses","panelClass","Array","isArray","cssClass","Error","[@state]","(@state.done)","MAT_SNACK_BAR_DEFAULT_OPTIONS","MatSnackBar","_overlay","_live","_injector","_breakpointObserver","_parentSnackBar","_defaultConfig","_snackBarRefAtThisLevel","parent","_openedSnackBarRef","openFromComponent","component","config","_attach","openFromTemplate","open","message","_config","tslib_1.__assign","_attachSnackBarContainer","overlayRef","containerPortal","ComponentPortal","containerRef","instance","content","userConfig","_createOverlay","container","$implicit","injector","_createInjector","contentRef","observe","Breakpoints","Handset","detachments","matches","overlayElement","_animateSnackBar","announce","overlayConfig","OverlayConfig","positionStrategy","global","isRtl","isLeft","isRight","right","centerHorizontally","top","bottom","create","userInjector","injectionTokens","WeakMap","set","PortalInjector","Injectable","Overlay","LiveAnnouncer","Injector","BreakpointObserver","SkipSelf","OverlayModule","LayoutModule","entryComponents","LIVE_ANNOUNCER_PROVIDER","useFactory","MAT_SNACK_BAR_DEFAULT_OPTIONS_PROVIDER_FACTORY","MatSnackBarModule","MatSortBase","_MatSortMixinBase","sortables","Map","_stateChanges","start","_direction","MatSort","getSortInvalidDirectionError","_disableClear","register","sortable","id","getSortHeaderMissingIdError","has","getSortDuplicateSortableIdError","deregister","delete","getNextSortDirection","disableClear","sortDirectionCycle","getSortDirectionCycle","nextDirectionIndex","sortButtonLabel","sortDescriptionLabel","MatSortHeaderIntl","MAT_SORT_HEADER_INTL_PROVIDER","deps","MAT_SORT_HEADER_INTL_PROVIDER_FACTORY","SORT_ANIMATION_TRANSITION","matSortAnimations","indicator","leftPointer","rightPointer","arrowOpacity","arrowPosition","keyframes","allowChildren","query","animateChild","optional","MatSortHeaderBase","_MatSortHeaderMixinBase","MatSortHeader","_intl","changeDetectorRef","_cdkColumnDef","_showIndicatorHint","_arrowDirection","_disableViewStateAnimation","getSortHeaderNotContainedWithinSortError","_rerenderSubscription","_isSorted","_updateArrowDirection","_viewState","_setAnimationTransitionState","_setIndicatorHintVisible","visible","_isDisabled","viewState","_getArrowDirectionState","_getArrowViewState","(mouseenter)","(longpress)","(mouseleave)","[class.mat-sort-header-disabled]","MatSortModule","CdkStepLabel","optionalLabel","_focusMonitor","_element","monitor","_intlSubscription","stopMonitoring","_stringLabel","label","_templateLabel","_getHostElement","iconOverrides","selected","horizontalStepTransition","_MatStep","CdkStep","_MatStepper","stepper","_errorStateMatcher","isErrorState","control","form","originalErrorState","customErrorState","invalid","interacted","icons","_icons","editOverride","find","icon","doneOverride","_iconOverrides","_steps","_stateChanged","MatSidenavContent","MatSidenav","_fixedBottomGap","matDrawerAnimations","transformDrawer","[@transform]","(@transform.start)","(@transform.done)","[attr.align]","[class.mat-drawer-end]","[class.mat-drawer-over]","[class.mat-drawer-side]","[class.mat-sidenav-fixed]","[style.top.px]","[style.bottom.px]","MatDrawer","MatSidenavContainer","[class.mat-drawer-container-explicit-backdrop]","_drawers","ContentChild","MatDrawerContainer","MatDrawerContent","MAT_DRAWER_DEFAULT_AUTOSIZE","useValue","MatSidenavModule","nextUniqueId","MAT_SLIDE_TOGGLE_VALUE_ACCESSOR","NG_VALUE_ACCESSOR","MatSlideToggle","multi","MatSlideToggleChange","source","checked","MatSlideToggleBase","_MatSlideToggleMixinBase","onChange","_","onTouched","_uniqueId","_required","_checked","labelPosition","ariaLabel","ariaLabelledby","_slideRenderer","SlideToggleRenderer","_inputElement","focusOrigin","_onInputFocusChange","_onChangeEvent","stopPropagation","dragging","_emitChangeEvent","_onInputClick","writeValue","registerOnChange","fn","registerOnTouched","setDisabledState","isDisabled","focusVia","toggle","_focusRipple","fadeOut","_ripple","launch","persistent","_onDragStart","startThumbDrag","_onDrag","updateThumbPosition","deltaX","_onDragEnd","newCheckedValue","dragPercentage","stopThumbDrag","_onLabelTextChange","[id]","[class.mat-checked]","[class.mat-disabled]","[class.mat-slide-toggle-label-before]","FocusMonitor","required","MatRipple","_thumbBarEl","querySelector","_thumbBarWidth","clientWidth","_thumbEl","_previousChecked","dragX","percentage","MatSlideToggleModule","MAT_SLIDER_VALUE_ACCESSOR","MatSliderChange","MatSliderBase","_MatSliderMixinBase","_invert","_max","_min","_step","_thumbLabel","_tickInterval","_value","_vertical","_percent","_isSliding","_isActive","_tickIntervalPercent","_sliderDimensions","_controlValueAccessorChangeFn","_dirChangeSubscription","_calculatePercentage","_roundLabelTo","toString","split","pop","toFixed","_focusHostElement","blur","_blurHostElement","_clamp","invert","percent","_isMinValue","axis","_invertMouseCoords","_thumbGap","tickSize","backgroundSize","sign","rotate","_invertAxis","_onMouseenter","_getSliderDimensions","_updateTickIntervalPercent","_onClick","oldValue","_updateValueFromPosition","x","clientX","y","clientY","_emitInputEvent","_onSlide","_onSlideStart","center","_valueOnSlideStart","_onSlideEnd","_onFocus","_onBlur","_onKeydown","PAGE_UP","_increment","PAGE_DOWN","UP_ARROW","DOWN_ARROW","_onKeyup","numSteps","pos","size","posComponent","exactValue","_calculateValue","closestValue","round","trackSize","pixelsPerStep","stepsPerTick","pixelsPerTick","getBoundingClientRect","(focus)","(blur)","(keydown)","(keyup)","(slide)","(slideend)","(slidestart)","[tabIndex]","[attr.aria-valuemax]","[attr.aria-valuemin]","[attr.aria-valuenow]","[attr.aria-orientation]","[class.mat-slider-disabled]","[class.mat-slider-has-ticks]","[class.mat-slider-horizontal]","[class.mat-slider-axis-inverted]","[class.mat-slider-sliding]","[class.mat-slider-thumb-label-showing]","[class.mat-slider-vertical]","[class.mat-slider-min-value]","[class.mat-slider-hide-last-tick]","MatProgressSpinner","mode","platform","[style.width.px]","[style.height.px]","MatSpinner","MatProgressSpinnerModule","MAT_RADIO_GROUP_CONTROL_VALUE_ACCESSOR","MatRadioGroup","MatRadioChange","MatRadioGroupBase","_MatRadioGroupMixinBase","_changeDetector","_name","_selected","_isInitialized","_labelPosition","_disabled","_updateRadioButtonNames","_markRadiosForCheck","newValue","_updateSelectedRadioFromValue","_checkSelectedRadioButton","_touch","_radios","radio","isAlreadySelected","_markForCheck","MatRadioButton","descendants","MatRadioButtonBase","_MatRadioButtonMixinBase","radioGroup","_radioDispatcher","_removeUniqueSelectionListener","listen","newCheckedState","notify","_isRippleDisabled","_onInputChange","groupValueChanged","[class.mat-radio-checked]","[class.mat-radio-disabled]","[attr.id]","UniqueSelectionDispatcher","ariaDescribedby","UNIQUE_SELECTION_DISPATCHER_PROVIDER","MatRadioModule","_container","_margins","_contentMargins","margins","[style.margin-left.px]","[style.margin-right.px]","_focusTrapFactory","_doc","_elementFocusedBeforeDrawerWasOpened","_mode","_disableClose","openedChange","opened","_isFocusTrapEnabled","_focusTrap","_trapFocus","_restoreFocus","close","onPositionChanged","_modeChanged","HTMLElement","_openedVia","enabled","destroy","isOpen","openedVia","_opened","_enableAnimations","_openedStream","openedStart","_closedStream","closedStart","backdropClick","_doCheckSubject","_autosize","defaultAutosize","drawer","_watchDrawerToggle","_watchDrawerPosition","_watchDrawerMode","_isDrawerOpen","_start","_end","_updateContentMargins","debounceTime","ngDoCheck","_setContainerClass","throwMatDuplicatedDrawerError","_right","_left","_closeModalDrawer","disableClose","_canHaveBackdrop","_isShowingBackdrop","_width","autosize","hasBackdrop","errorStateMatcher","selectionChange","valueChange","MatSelect","MatSelectModule","MatOptionModule","MatFormFieldModule","MatSelectTrigger","MAT_SELECT_SCROLL_STRATEGY_PROVIDER","matTooltipAnimations","tooltipState","SCROLL_THROTTLE_MS","MAT_TOOLTIP_SCROLL_STRATEGY","MAT_TOOLTIP_SCROLL_STRATEGY_PROVIDER","MAT_TOOLTIP_SCROLL_STRATEGY_PROVIDER_FACTORY","MAT_TOOLTIP_DEFAULT_OPTIONS","MatTooltip","_scrollDispatcher","_ariaDescriber","_scrollStrategy","_defaultOptions","showDelay","hideDelay","_message","_manualListeners","IOS","nodeName","webkitUserSelect","userSelect","listener","addEventListener","_detach","_updatePosition","removeDescription","_isTooltipVisible","_updateTooltipMessage","describe","_tooltipClass","_tooltipInstance","_setTooltipClass","removeEventListener","clear","delay","_portal","TooltipComponent","afterHidden","isVisible","ESCAPE","_handleTouchend","touchendHideDelay","_getOrigin","overlay","_getOverlayPosition","strategy","flexibleConnectedTo","withFlexibleHeight","withFlexibleWidth","withViewportMargin","withPositions","main","fallback","scrollableAncestors","getAncestorScrollContainers","withScrollableContainers","positionChanges","scrollableViewProperties","isOverlayClipped","_setTransformOrigin","connectionPair","scrollStrategy","getConfig","originPosition","isLtr","originX","originY","getMatTooltipInvalidPositionError","_invertPosition","overlayPosition","overlayX","overlayY","updatePosition","tooltipClass","(touchend)","ScrollDispatcher","AriaDescriber","_visibility","_closeOnInteraction","_transformOrigin","_onHide","_isHandset","_hideTimeoutId","_showTimeoutId","_animationStart","_animationDone","_handleBodyInteraction","aria-hidden","ɵ0","ARIA_DESCRIBER_PROVIDER","MatTooltipModule","itemsPerPageLabel","nextPageLabel","previousPageLabel","firstPageLabel","lastPageLabel","getRangeLabel","MatPaginatorIntl","MAT_PAGINATOR_INTL_PROVIDER","MAT_PAGINATOR_INTL_PROVIDER_FACTORY","PageEvent","MatPaginator","_pageIndex","_length","_pageSizeOptions","_hidePageSize","_showFirstLastButtons","_intlChanges","_pageSize","_updateDisplayedPageSizeOptions","p","_initialized","nextPage","hasNextPage","_emitPageEvent","previousPage","hasPreviousPage","firstPage","lastPage","getNumberOfPages","numberOfPages","_changePageSize","floor","pageSizeOptions","_displayedPageSizeOptions","hidePageSize","showFirstLastButtons","MatPaginatorModule","MatProgressBarBase","_MatProgressBarMixinBase","progressbarId","MatProgressBar","_bufferValue","clamp","_primaryTransform","_bufferTransform","bufferValue","aria-valuemin","aria-valuemax","[attr.mode]","MatProgressBarModule","BASE_SIZE","MatProgressSpinnerBase","_MatProgressSpinnerMixinBase","INDETERMINATE_ANIMATION_TEMPLATE","_fallbackAnimation","_elementSize","_diameter","EDGE","TRIDENT","animationClass","diameters","_attachStyleNode","_updateElementSize","_strokeWidth","diameter","viewBox","_circleRadius","strokeWidth","PI","_strokeCircumference","styleTag","createElement","head","appendChild","sheet","insertRule","_getAnimationText","replace","Set","_previousElevation","newElevation","MatMenu","_startAnimation","_panelAnimationState","_resetAnimation","_onAnimationDone","matMenuAnimations","transformMenu","fadeInItems","MAT_MENU_DEFAULT_OPTIONS","yPosition","items","MatMenuItem","lazyContent","MatMenuContent","overlapTrigger","MAT_MENU_SCROLL_STRATEGY","MAT_MENU_SCROLL_STRATEGY_PROVIDER","MAT_MENU_SCROLL_STRATEGY_PROVIDER_FACTORY","MatMenuTrigger","_parentMenu","_menuItemInstance","_menuOpen","_closeSubscription","_hoverSubscription","_openedByMouse","menuOpened","onMenuOpen","menuClosed","onMenuClose","_triggersSubmenu","triggersSubmenu","menu","_checkMenu","reason","_destroyMenu","_hovered","openMenu","_cleanUpSubscriptions","toggleMenu","closeMenu","menuData","_menuClosingActions","_initMenu","menuOpen","_resetMenu","parentMenu","_setMenuElevation","_setIsMenuOpen","focusFirstItem","setElevation","depth","_highlighted","throwMatMenuMissingError","_getOverlayConfig","_subscribeToPositions","_getPosition","backdropClass","posX","posY","setPositionClasses","xPosition","originFallbackX","_b","overlayFallbackY","_c","originFallbackY","_d","overlayFallbackX","offsetY","backdrop","parentClose","hover","_handleMousedown","isFakeMousedownFromScreenReader","aria-haspopup","(mousedown)","Self","_deprecatedMatMenuTriggerFor","MatMenuModule","matSelectAnimations","transformPanel","minWidth","group","fadeInContent","MAT_SELECT_SCROLL_STRATEGY","MAT_SELECT_SCROLL_STRATEGY_PROVIDER_FACTORY","MatSelectChange","MatSelectBase","_defaultErrorStateMatcher","_parentForm","_parentFormGroup","ngControl","_MatSelectMixinBase","mixinErrorState","_parentFormField","_scrollStrategyFactory","_panelOpen","_scrollTop","_multiple","_compareWith","o1","o2","_uid","_destroy","_triggerFontSize","_onChange","_onTouched","_optionIds","_panelDoneAnimating","_offsetY","_positions","_disableOptionCentering","focused","controlType","optionSelectionChanges","defer","options","option","onSelectionChange","onStable","switchMap","o","valueAccessor","_placeholder","stateChanges","_selectionModel","getMatSelectDynamicMultipleError","getMatSelectNonFunctionValueError","_initializeSelection","_id","SelectionModel","multiple","_initKeyManager","_resetOptions","updateErrorState","panelOpen","_triggerRect","getComputedStyle","_keyManager","withHorizontalOrientation","_calculateOverlayPosition","_highlightCorrectOption","overlayDir","fontSize","_isRtl","_setSelectionByValue","selectedOptions","viewValue","reverse","join","_handleOpenKeydown","_handleClosedKeydown","isArrowKey","altKey","onKeydown","manager","setFirstItemActive","setLastItemActive","activeItem","previouslyFocusedIndex","activeItemIndex","shiftKey","_selectViaInteraction","_onPanelDone","offsetX","_onFadeInDone","_onAttached","positionChange","_calculateOverlayOffsetX","panel","scrollTop","_getPanelTheme","color","isEmpty","isUserInput","getMatSelectNonArrayValueError","_clearSelection","currentValue","_selectValue","_sortValues","correspondingOption","setActiveItem","error","console","warn","select","skip","deselect","ActiveDescendantKeyManager","withTypeAhead","withVerticalOrientation","tabOut","_scrollActiveOptionIntoView","changedOrDestroyed","_onSelect","_setOptionIds","wasSelected","isSelected","_propagateChanges","fallbackValue","valueToEmit","activeOptionIndex","labelCount","_countGroupLabelsBeforeOption","optionGroups","_getOptionScrollPosition","_getItemHeight","_getOptionIndex","result","current","itemHeight","_getItemCount","panelHeight","scrollContainerHeight","maxScroll","selectedOptionOffset","scrollBuffer","_calculateOverlayScroll","_calculateOverlayOffsetY","_checkOverlayWithinViewport","optionOffsetFromScrollTop","halfOptionHeight","optimalScrollPosition","placeholder","_getAriaActiveDescendant","overlayRect","viewportSize","getViewportSize","paddingWidth","SELECT_MULTIPLE_PANEL_PADDING_X","first","leftOverflow","rightOverflow","optionOffsetFromPanelTop","optionHeightAdjustment","maxOptionsDisplayed","firstDisplayedIndex","selectedDisplayIndex","partialItemHeight","topSpaceAvailable","bottomSpaceAvailable","panelHeightTop","abs","totalPanelHeight","panelHeightBottom","_adjustPanelUp","_adjustPanelDown","_getOriginBasedOnOption","distanceBelowViewport","distanceAboveViewport","setDescribedByIds","ids","_ariaDescribedby","onContainerClick","[attr.tabindex]","[attr.aria-label]","[attr.aria-labelledby]","[attr.aria-required]","[attr.aria-invalid]","[attr.aria-owns]","[attr.aria-multiselectable]","[attr.aria-describedby]","[attr.aria-activedescendant]","[class.mat-select-disabled]","[class.mat-select-invalid]","[class.mat-select-required]","MatFormFieldControl","MAT_OPTION_PARENT_COMPONENT","NgForm","FormGroupDirective","MatFormField","NgControl","CdkConnectedOverlay","MatOption","MatOptgroup","customTrigger","disableOptionCentering","compareWith","focusedOption","focusedIndex","_emitDeprecatedChangeEvent","MatSelectionList","MAT_SELECTION_LIST_VALUE_ACCESSOR","MatListOption","_MatSelectionListMixinBase","MatLineModule","MatPseudoCheckboxModule","MatList","MatNavList","MatListItem","MatListAvatarCssMatStyler","MatListIconCssMatStyler","MatListSubheaderCssMatStyler","MatDividerModule","MatListModule","sequence","MatMenuItemBase","_MatMenuItemMixinBase","_checkDisabled","_emitHoverEvent","getLabel","textNodeType","TEXT_NODE","output","length_1","[class.mat-menu-item-highlighted]","[class.mat-menu-item-submenu-trigger]","[attr.disabled]","_template","_appRef","context","_outlet","DomPortalOutlet","insertBefore","outletElement","isAttached","ApplicationRef","_xPosition","_yPosition","_tabSubscription","_classList","_overlapTrigger","_hasBackdrop","throwMatMenuInvalidPositionX","throwMatMenuInvalidPositionY","classes","className","FocusKeyManager","withWrap","item","setFocusOrigin","resetActiveItem","customElevation","c","_navList","_isNavList","_handleFocus","_handleBlur","[class.mat-list-item-avatar]","[class.mat-list-item-with-avatar]","MatSelectionListBase","MatListOptionBase","_MatListOptionMixinBase","MatListOptionChange","MatSelectionListChange","selectionList","_hasFocus","checkboxPosition","_setSelected","_reportValueChange","MatLineSetter","_lines","_removeOptionFromList","_text","_setFocusedOption","tabindex","[class.mat-list-item-disabled]","[class.mat-list-item-focus]","[attr.aria-selected]","skipPredicate","_tempValues","_setOptionsFromValues","_modelChanges","_i","added","removed","optionIndex","setNextItemActive","_toggleSelectOnFocusedOption","_getSelectedOptionValues","values","_getOptionByValue","Boolean","ICON_REGISTRY_PROVIDER_FACTORY","MatIconBase","_MatIconMixinBase","MatIcon","_iconRegistry","ariaHidden","_inline","setAttribute","inline","_fontSet","_cleanupFontValue","_fontIcon","_splitIconName","iconName","parts","svgIcon","namespace","getNamedSvgIcon","svg","_setSvgElement","err","log","_clearSvgElement","_usingFontIcon","_updateFontIconClasses","layoutElement","childCount","removeChild","elem","fontSetClass","fontSet","classNameForFontAlias","getDefaultFontSetClass","_previousFontSetClass","fontIcon","_previousFontIconClass","[class.mat-icon-inline]","ICON_REGISTRY_PROVIDER","MatListBase","_MatListMixinBase","MatListItemBase","_MatListItemMixinBase","MatDatepickerInput","dateChange","MatDatepickerInputEvent","_getThemePalette","_formField","_getValidDateOrNull","_dateAdapter","isDateInstance","isValid","MAT_DATEPICKER_VALUE_ACCESSOR","MAT_DATEPICKER_VALIDATORS","MAT_INPUT_VALUE_ACCESSOR","[attr.aria-haspopup]","[attr.min]","[attr.max]","[disabled]","(input)","(change)","DateAdapter","MAT_DATE_FORMATS","matDatepicker","matDatepickerFilter","dateInput","MatDatepickerToggleIcon","MatDatepickerToggle","datepicker","_watchStateChanges","datepickerDisabled","_disabledChange","inputDisabled","_datepickerInput","datepickerToggled","openedStream","closedStream","[class.mat-datepicker-toggle-active]","[class.mat-accent]","[class.mat-warn]","_customIcon","MatDialogModule","MatCalendar","MatCalendarBody","MatDatepicker","MatDatepickerContent","MatMonthView","MatYearView","MatMultiYearView","MatDatepickerIntl","MAT_DATEPICKER_SCROLL_STRATEGY_PROVIDER","MatDatepickerModule","_inset","MatDivider","[class.mat-divider-vertical]","[class.mat-divider-inset]","_hideToggle","displayMode","MatAccordion","hideToggle","CdkAccordion","MatExpansionPanelContent","matExpansionAnimations","indicatorRotate","expansionHeaderHeight","params","collapsedHeight","expandedHeight","bodyExpansion","uniqueId","MatExpansionPanel","accordion","_uniqueSelectionDispatcher","_inputChanges","_headerId","_getHideToggle","_hasSpacing","expanded","_getExpandedState","_lazyContent","_bodyAnimation","phaseName","outputs","[class.mat-expanded]","[class.mat-expansion-panel-spacing]","MatExpansionPanelActionRow","MatExpansionPanelHeader","_parentChangeSubscription","_toggle","_isExpanded","_getPanelId","_showToggle","_keydown","[attr.aria-controls]","[@expansionHeight]","CdkAccordionModule","MatExpansionPanelTitle","MatExpansionPanelDescription","MatExpansionModule","MatGridTile","_rowspan","_colspan","coerceToNumber","_setStyle","property","MatGridTileText","MatGridAvatarCssMatStyler","MatGridTileHeaderCssMatStyler","MatGridTileFooterCssMatStyler","TileCoordinator","numColumns","tiles","columnIndex","rowIndex","tracker","fill","positions","tile","_trackTile","lastRowMax","rowCount","gapStartIndex","_findMatchingGap","colspan","_markTilePosition","TilePosition","tileCols","gapEndIndex","_nextRow","_findGapEndIndex","rowspan","row","col","TileStyler","_rows","init","gutterSize","cols","_gutterSize","normalizeUnits","_cols","getBaseTileSize","sizePercent","gutterFraction","getTilePosition","baseSize","calc","getTileSize","span","setStyle","colIndex","percentWidthPerTile","gutterWidthFractionPerTile","setColStyles","setRowStyles","percentWidth","gutterWidth","baseTileWidth","side","getGutterSpan","getTileSpan","tileHeight","getComputedHeight","FixedTileStyler","fixedRowHeight","reset","list","_setListStyle","_tiles","RatioTileStyler","_parseRatio","percentHeightPerTile","rowHeightRatio","baseTileHeight","ratioParts","parseFloat","FitTileStyler","gutterHeightPerTile","MatGridList","_gutter","coerceToString","_rowHeight","_setTileStyler","_checkCols","_checkRowHeight","_layoutTiles","rowHeight","_tileStyler","MatGridListModule","SvgIconConfig","url","svgElement","MatIconRegistry","_httpClient","_sanitizer","_svgIconConfigs","_iconSetConfigs","_cachedIconsByUrl","_inProgressUrlFetches","_fontCssClassesByAlias","_defaultFontSetClass","addSvgIcon","addSvgIconInNamespace","iconKey","addSvgIconSet","addSvgIconSetInNamespace","configNamespace","registerFontClassAlias","alias","setDefaultFontSetClass","getSvgIconFromUrl","safeUrl","sanitize","SecurityContext","RESOURCE_URL","getMatIconFailedToSanitizeError","cachedIcon","cloneSvg","_loadSvgIconFromConfig","tap","_getSvgFromConfig","iconSetConfigs","_getSvgFromIconSetConfigs","observableThrow","getMatIconNameNotFoundError","namedIcon","_extractIconWithNameFromAnySet","iconSetFetchRequests","iconSetConfig","_loadSvgIconSetFromConfig","catchError","forkJoin","foundIcon","_extractSvgIconFromSet","_fetchUrl","svgText","_createSvgElementForSingleIcon","_svgElementFromString","responseText","_setSvgAttributes","iconSet","iconSource","iconElement","cloneNode","_toSvgElement","str","div","innerHTML","ELEMENT_NODE","getMatIconNoHttpProviderError","inProgressFetch","req","responseType","finalize","share","HttpClient","DomSanitizer","year","maxDate","getYear","minDate","dateFilter","firstOfYear","createDate","date","addCalendarDays","selectedChange","yearSelected","_matCalendarBody","_dateFormats","monthSelected","createMissingDateImplError","_activeDate","today","oldActiveDate","validDate","deserialize","clampDate","_init","_selectedMonth","_getMonthInCurrentYear","_minDate","_maxDate","_focusActiveCell","_monthSelected","month","normalizedDate","activeDate","daysInMonth","getNumDaysInMonth","getDate","_handleCalendarBodyKeydown","addCalendarMonths","getMonth","addCalendarYears","_todayMonth","_yearLabel","getYearName","monthNames","getMonthNames","_months","_createCellForMonth","monthName","format","display","monthYearA11yLabel","MatCalendarCell","toLocaleUpperCase","_shouldEnableMonth","activeYear","_isYearAndMonthAfterMaxDate","_isYearAndMonthBeforeMinDate","firstOfMonth","maxYear","maxMonth","minYear","minMonth","startView","_userSelection","_startAt","_clampedActiveDate","_currentView","monthYearLabel","switchToMultiYearViewLabel","switchToMonthViewLabel","prevMonthLabel","prevYearLabel","multi-year","prevMultiYearLabel","nextMonthLabel","nextYearLabel","nextMultiYearLabel","startAt","firstChange","view","monthView","yearView","multiYearView","_dateSelected","sameDate","_yearSelectedInMultiYearView","normalizedYear","_monthSelectedInYearView","normalizedMonth","_userSelected","_goToDateInView","_currentPeriodClicked","_previousClicked","_nextClicked","_previousEnabled","_isSameView","_nextEnabled","date1","date2","matDatepickerAnimations","fadeInCalendar","datepickerUid","MAT_DATEPICKER_SCROLL_STRATEGY","MAT_DATEPICKER_SCROLL_STRATEGY_PROVIDER_FACTORY","MatDatepickerContentBase","_MatDatepickerContentMixinBase","_popupRef","_positionChange","isAbove","_isAbove","[@transformPanel]","[class.mat-datepicker-content-touch]","[class.mat-datepicker-content-above]","_inputSubscription","_popupComponentRef","selectedChanged","_valueChange","_focusedElementBeforeOpen","activeElement","touchUi","_openAsDialog","_openAsPopup","_dialogRef","_calendarPortal","completeClose","afterClosed","componentInstance","_setColor","_createPopup","keydownEvents","MatDialog","NG_VALIDATORS","target","targetElement","_cvaOnChange","_validatorOnChange","_datepickerSubscription","_localeSubscription","_parseValidator","_lastValueValid","matDatepickerParse","text","_minValidator","controlValue","compareDate","matDatepickerMin","actual","_maxValidator","matDatepickerMax","_filterValidator","_dateFilter","_validator","Validators","compose","localeChanges","registerDatepicker","_datepicker","_registerInput","oldDate","registerOnValidatorChange","validate","getPopupConnectionElementRef","getConnectedOverlayOrigin","_onInput","parse","[@slideDialog]","(@slideDialog.start)","(@slideDialog.done)","MatDialogContainer","MatDialogRef","_containerInstance","location","_afterOpen","_afterClosed","_beforeClose","_locationChanges","_animationStateChanged","_result","closeOnNavigation","dialogResult","detachBackdrop","_startExitAnimation","afterOpen","beforeClose","_getPositionStrategy","centerVertically","updateSize","MAT_DIALOG_DATA","MAT_DIALOG_DEFAULT_OPTIONS","MAT_DIALOG_SCROLL_STRATEGY","MAT_DIALOG_SCROLL_STRATEGY_PROVIDER","MAT_DIALOG_SCROLL_STRATEGY_PROVIDER_FACTORY","_location","_parentDialog","_overlayContainer","_openDialogsAtThisLevel","_afterAllClosedAtThisLevel","_afterOpenAtThisLevel","_ariaHiddenElements","afterAllClosed","openDialogs","_afterAllClosed","componentOrTemplateRef","_applyConfigDefaults","MatDialogConfig","getDialogById","dialogContainer","_attachDialogContainer","dialogRef","_attachDialogContent","_hideNonDialogContentFromAssistiveTechnology","_removeOpenDialog","closeAll","dialog","dialogConfig","minHeight","maxWidth","maxHeight","previousValue","removeAttribute","overlayContainer","getContainerElement","parentElement","siblings","sibling","hasAttribute","getAttribute","Location","OverlayContainer","dialogElementUid","MatDialogClose","_dialog","getClosestDialog","proxiedChange","_matDialogClose","MatDialogTitle","_ariaLabelledBy","MatDialogContent","MatDialogActions","MatTextareaAutosize","minRows","maxRows","rows","matAutosizeMinRows","matAutosizeMaxRows","CdkTextareaAutosize","MAT_INPUT_INVALID_TYPES","MatInputBase","_MatInputMixinBase","MatInput","inputValueAccessor","_autofillMonitor","_isServer","autofilled","_type","_readonly","_neverEmptyInputTypes","t","getSupportedInputTypes","_inputValueAccessor","_previousNativeValue","el","selectionStart","selectionEnd","setSelectionRange","_validateType","_isTextarea","isAutofilled","_dirtyCheckNativeValue","isFocused","readonly","getMatInputUnsupportedTypeError","_isNeverEmpty","_isBadInput","validity","badInput","[class.mat-input-server]","[attr.placeholder]","[required]","[readonly]","AutofillMonitor","TextFieldModule","MatInputModule","calendarLabel","openCalendarLabel","displayValue","numCols","allowDisabledSelection","activeCell","cellAspectRatio","selectedValueChange","_cellClicked","cell","_isActiveCell","cellNumber","_firstRowOffset","attr.aria-readonly","todayValue","selectedValue","labelMinRequiredCells","activeDateChange","firstDayOfWeek","getFirstDayOfWeek","narrowWeekdays","getDayOfWeekNames","longWeekdays","weekdays","long","narrow","_weekdays","_hasSameMonthAndYear","_selectedDate","_getDateInCurrentMonth","selectedYear","selectedMonth","selectedDate","_todayDate","_monthLabel","_firstWeekOffset","getDayOfWeek","_createWeekCells","dateNames","getDateNames","_weeks","_shouldEnableDate","dateA11yLabel","d1","d2","_selectedYear","_todayYear","activeOffset","_years","_createCellForYear","_yearSelected","yearsPerPage","_getActiveCell","yearName","_shouldEnableYear","[class.mat-checkbox-indeterminate]","[class.mat-checkbox-checked]","[class.mat-checkbox-disabled]","[class.mat-checkbox-label-before]","MAT_CHECKBOX_CONTROL_VALUE_ACCESSOR","MAT_CHECKBOX_CLICK_ACTION","MatCheckbox","indeterminateChange","ripple","indeterminate","MAT_CHECKBOX_REQUIRED_VALIDATOR","MatCheckboxRequiredValidator","[attr.required]","CheckboxRequiredValidator","MatCheckboxModule","MatChipSelectionChange","MatChipBase","_MatChipMixinBase","CHIP_ATTRIBUTE_NAMES","MatChipAvatar","MatChipTrailingIcon","MatChip","ngZone","chipListSelectable","_selectable","_removable","destroyed","_addHostClassName","_chipRipple","RippleRenderer","selectable","CHIP_ATTRIBUTE_NAMES_1","attr","tagName","chip","_removeTriggerEvents","selectViaInteraction","toggleSelected","removable","DELETE","BACKSPACE","_blur","[class.mat-chip-selected]","[class.mat-chip-with-avatar]","[class.mat-chip-with-trailing-icon]","[class.mat-chip-disabled]","avatar","trailingIcon","removeIcon","MatChipRemove","_parentChip","MatChipListBase","_MatChipListMixinBase","MatChipListChange","MatChipList","_lastDestroyedIndex","_chipSet","_tabOutSubscription","_tabIndex","_userTabIndex","ariaOrientation","_chipInput","chips","_changeSubscription","_resetChips","_updateTabIndex","_updateFocusForDestroyedChips","_chipRemoveSubscription","_dropSubscriptions","registerInput","inputElement","_focusInput","_isInputEmpty","_updateKeyManager","chipIndex","chipsArray","newFocusIndex","focusChip","correspondingChip","_markAsTouched","_listenToChipsFocus","_listenToChipsSelection","_listenToChipsRemoved","_chipFocusSubscription","_chipBlurSubscription","_chipSelectionSubscription","chipSelectionChanges","chipFocusChanges","updateActiveItemIndex","chipBlurChanges","chipRemoveChanges","[class.mat-chip-list-disabled]","[class.mat-chip-list-invalid]","[class.mat-chip-list-required]","MatChipInput","_addOnBlur","separatorKeyCodes","chipEnd","_chipList","_emitChipEnd","addOnBlur","_focus","chipList","CHIP_DECLARATIONS","MatChipsModule","ariaDescribedBy","autoFocus","matDialogAnimations","slideDialog","_elementFocusedBeforeDialogWasOpened","_state","throwMatDialogContentAlreadyAttachedError","_savePreviouslyFocusedElement","focusInitialElementWhenReady","toFocus","_onAnimationStart","MatAnchor","MatButton","MatButtonToggleGroupBase","_MatButtonToggleGroupMixinBase","MAT_BUTTON_TOGGLE_GROUP_VALUE_ACCESSOR","MatButtonToggleGroup","MatButtonToggleGroupMultiple","_uniqueIdCounter","MatButtonToggleChange","_buttonToggles","_tempValue","_syncButtonToggle","_isSelected","[class.mat-button-toggle-vertical]","MatButtonToggle","MatButtonToggleBase","_MatButtonToggleMixinBase","toggleGroup","_isSingleSelector","buttonToggleGroup","[class.mat-button-toggle-standalone]","[class.mat-button-toggle-checked]","[class.mat-button-toggle-disabled]","MatButtonToggleModule","MatCardContent","MatCardTitle","MatCardSubtitle","align","[class.mat-card-actions-align-end]","MatCardActions","MatCardFooter","MatCardImage","MatCardSmImage","MatCardMdImage","MatCardLgImage","MatCardXlImage","MatCardAvatar","MatCardHeader","MatCardTitleGroup","MatCard","MatCardModule","MatCheckboxChange","MatCheckboxBase","_MatCheckboxMixinBase","_clickAction","_currentAnimationClass","_currentCheckState","TransitionCheckState","Init","_indeterminate","changed","_transitionCheckState","Indeterminate","Checked","Unchecked","_getAriaChecked","newState","oldState","_getAnimationClassForCheckStateTransition","_removeFocusRipple","_onInteractionEvent","animSuffix","MatAutocompleteTrigger","fromEvent","clickTarget","formField","_overlayAttached","_setTriggerValue","_resetActiveItem","_closeKeyEventStream","activeOption","prevActiveItem","autocomplete","TAB","_canOpen","openPanel","_scrollToOption","_handleInput","_previousValue","_attachOverlay","_floatLabel","shouldAnimate","floatLabel","_animateAndLockLabel","_manuallyFloatingLabel","_resetLabel","newScrollPosition","_getScrollTop","_setScrollTop","_subscribeToClosingActions","firstStable","_zone","optionChanges","_positionStrategy","reapplyLastPosition","_setVisibility","panelClosingActions","_setValueAndClose","_destroyPanel","closePanel","toDisplay","inputValue","_control","_clearPreviousSelectedOption","_emitSelectEvent","getMatAutocompleteMissingPanelError","_getHostWidth","_closingActionsSubscription","wasOpen","_isOpen","_getConnectedElement","autoActiveFirstOption","readOnly","aria-autocomplete","(focusin)","MAT_AUTOCOMPLETE_VALUE_ACCESSOR","MAT_AUTOCOMPLETE_SCROLL_STRATEGY","Host","MatAutocomplete","MAT_AUTOCOMPLETE_SCROLL_STRATEGY_PROVIDER","MAT_AUTOCOMPLETE_DEFAULT_OPTIONS","MatAutocompleteModule","MatBadge","_color","_overlap","val","_updateTextContent","_description","newDescription","_updateHostAriaDescription","_hidden","isAfter","description","_badgeElement","_createBadgeElement","badgeElement","oldDescription","colorPalette","[class.mat-badge-overlap]","[class.mat-badge-above]","[class.mat-badge-below]","[class.mat-badge-before]","[class.mat-badge-after]","[class.mat-badge-small]","[class.mat-badge-medium]","[class.mat-badge-large]","[class.mat-badge-hidden]","overlap","hidden","MatBadgeModule","matBottomSheetAnimations","bottomSheetState","MatBottomSheetContainer","breakpointObserver","_elementFocusedBeforeOpened","_breakpointSubscription","Medium","Large","XLarge","_toggleClass","isMatched","_validatePortalAttached","_setPanelClass","bottomSheetConfig","(@state.start)","FocusTrapFactory","MAT_BOTTOM_SHEET_DATA","MatBottomSheetConfig","MatBottomSheetRef","_keydownEvents","MatBottomSheet","_parentBottomSheet","_bottomSheetRefAtThisLevel","_openedBottomSheetRef","_attachContainer","ref","bottomSheetRef","scrollStrategies","block","MatBottomSheetModule","DEFAULT_ROUND_BUTTON_COLOR","DEFAULT_FLAT_BUTTON_COLOR","BUTTON_HOST_ATTRIBUTES","MatButtonBase","_MatButtonMixinBase","_isRoundButton","_hasHostAttributes","_isIconButton","BUTTON_HOST_ATTRIBUTES_1","attributes","attribute","focusMonitor","stopImmediatePropagation","_parent","_active","_emitSelectionChangeEvent","setActiveStyles","setInactiveStyles","ngAfterViewChecked","_mostRecentViewValue","MatOptionSelectionChange","[class.mat-selected]","[class.mat-option-multiple]","[class.mat-active]","[class.mat-option-disabled]","MAT_LABEL_GLOBAL_OPTIONS","MatError","matFormFieldAnimations","transitionMessages","[class.mat-right]","MatHint","MatLabel","MatPlaceholder","MatPrefix","MatSuffix","MatFormFieldBase","_MatFormFieldMixinBase","MAT_FORM_FIELD_DEFAULT_OPTIONS","labelOptions","_showAlwaysAnimate","_subscriptAnimationState","_hintLabel","_hintLabelId","_outlineGapWidth","_outlineGapStart","_labelOptions","float","_appearance","appearance","_hideRequiredMarker","_processHints","_connectionContainerRef","_validateControlChild","_validatePlaceholders","_syncDescribedByIds","valueChanges","_hintChildren","_errorChildren","updateOutlineGap","_shouldForward","prop","_hasPlaceholder","_placeholderChild","_hasLabel","_labelChild","_shouldLabelFloat","_canLabelFloat","shouldLabelFloat","_shouldAlwaysFloat","_hideControlPlaceholder","_hasFloatingLabel","_getDisplayedMessages","errorState","_label","getMatFormFieldPlaceholderConflictError","_validateHints","startHint_1","endHint_1","hint","hintLabel","getMatFormFieldDuplicatedHintError","startHint","endHint","getMatFormFieldMissingControlError","containerStart","_getStartEnd","labelStart","labelWidth","outlineGapPadding","rect","[class.mat-form-field-appearance-standard]","[class.mat-form-field-appearance-fill]","[class.mat-form-field-appearance-outline]","[class.mat-form-field-appearance-legacy]","[class.mat-form-field-invalid]","[class.mat-form-field-can-float]","[class.mat-form-field-should-float]","[class.mat-form-field-hide-placeholder]","[class.mat-form-field-disabled]","[class.mat-form-field-autofilled]","[class.mat-focused]","[class.ng-untouched]","[class.ng-touched]","[class.ng-pristine]","[class.ng-dirty]","[class.ng-valid]","[class.ng-invalid]","[class.ng-pending]","underlineRef","_inputContainerRef","_prefixChildren","_suffixChildren","_uniqueAutocompleteIdCounter","MatAutocompleteSelectedEvent","MatAutocompleteBase","_MatAutocompleteMixinBase","defaults","showPanel","optionSelected","_autoActiveFirstOption","MAT_AUTOCOMPLETE_SCROLL_STRATEGY_PROVIDER_FACTORY","_componentDestroyed","optionSelections","_outsideClickStream","__extends","d","__","constructor","extendStatics","base","class_1","defaultColor","defaultTabIndex","matcher","mixinInitialized","_pendingSubscribers","initialized","Observable","subscriber","_notifySubscriber","_markInitialized","range","valueFunction","valuesArray","enforceStyleRecalculation","window","getPropertyValue","distanceToFurthestCorner","distX","distY","sqrt","optionsArray","groups","groupCounter","optionOffset","currentScrollPosition","optionHeight","reposition","defaultOptions","provider","exp","match","parentRegistry","httpClient","sanitizer","scrollThrottle","parentIntl","sortOrder","setPrototypeOf","__proto__","__assign","assign","s","n","SHARP_CURVE","MATERIAL_SANITY_CHECKS","_sanityChecksEnabled","_hasDoneGlobalChecks","_hasCheckedHammer","_window","_areChecksEnabled","_checkDoctypeIsDefined","_checkThemeIsPresent","_isTestEnv","doctype","testElement","body","computedStyle","_checkHammerIsAvailable","MAT_DATE_LOCALE","MAT_DATE_LOCALE_PROVIDER","LOCALE_ID","_localeChanges","setLocale","locale","second","firstValid","secondValid","SUPPORTS_INTL_API","Intl","DEFAULT_MONTH_NAMES","short","String","DEFAULT_DATE_NAMES","DEFAULT_DAY_OF_WEEK_NAMES","ISO_8601_REGEX","NativeDateAdapter","matDateLocale","useUtcForDisplay","_clampDate","getFullYear","getDay","dtf_1","DateTimeFormat","timeZone","_stripDirectionalityCharacters","_format","Date","dtf_2","day","dtf_3","weekday","dtf","_createDateWithOverflow","clone","displayFormat","setFullYear","toDateString","years","months","newDate","days","toIso8601","getUTCFullYear","_2digit","getUTCMonth","getUTCDate","test","isNaN","getTime","NaN","UTC","getHours","getMinutes","getSeconds","getMilliseconds","MAT_NATIVE_DATE_FORMATS","NativeDateModule","MatNativeDateModule","ShowOnDirtyErrorStateMatcher","dirty","submitted","touched","MAT_HAMMER_OPTIONS","_hammerOptions","commonModule","_hammer","Hammer","events","buildHammer","mc","pan","Pan","swipe","Swipe","press","Press","slide","_createRecognizer","threshold","longpress","time","recognizeWith","inheritances","recognizer","HammerGestureConfig","MatLine","_setLineClass","count","_resetClasses","_setClass","isAdd","RippleRef","_renderer","RippleState","HIDDEN","fadeOutRipple","defaultRippleAnimationConfig","enterDuration","exitDuration","ignoreMouseEventsTimeout","_target","_isPointerDown","_triggerEvents","_activeRipples","_eventOptions","supportsPassiveEventListeners","passive","onMousedown","isSyntheticEvent","_lastTouchStartEvent","now","rippleDisabled","fadeInRipple","onTouchStart","touches","onPointerUp","VISIBLE","FADING_IN","_containerElement","containerRect","_containerRect","animationConfig","centered","radius","transitionDuration","rippleRef","runTimeoutOutsideZone","wasActive","rippleEl","FADING_OUT","fadeOutAll","_triggerElement","_globalOptions","_rippleRenderer","_setupTriggerEventsIfEnabled","_trigger","configOrX","[class.mat-ripple-unbounded]","unbounded","[class.mat-pseudo-checkbox-indeterminate]","[class.mat-pseudo-checkbox-checked]","[class.mat-pseudo-checkbox-disabled]","MatPseudoCheckbox","MatOptgroupBase","_MatOptgroupMixinBase","_uniqueOptgroupIdCounter","_labelId","[class.mat-optgroup-disabled]"],"mappings":"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"}