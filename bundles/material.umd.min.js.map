{"version":3,"file":"material.umd.min.js","sources":["../../src/lib/toolbar/toolbar.ts","../../src/lib/toolbar/toolbar-module.ts","../../src/lib/version.ts","../../src/lib/autocomplete/autocomplete-trigger.ts","../../src/lib/core/ripple/ripple-renderer.ts","../../src/lib/core/testing/month-constants.ts","../../src/lib/expansion/expansion-animations.ts","../../src/lib/select/select.ts","../../src/lib/tooltip/tooltip.ts","../../src/lib/table/row.ts","../../src/lib/table/table-module.ts","../../src/lib/table/table-data-source.ts","../../src/lib/tabs/ink-bar.ts","../../src/lib/tabs/tab-label.ts","../../src/lib/tabs/tab.ts","../../src/lib/tabs/tabs-animations.ts","../../src/lib/tabs/tab-body.ts","../../src/lib/tabs/tab-group.ts","../../src/lib/tabs/tab-label-wrapper.ts","../../src/lib/tabs/tab-header.ts","../../src/lib/tabs/tab-nav-bar/tab-nav-bar.ts","../../src/lib/tabs/tabs-module.ts","../../src/lib/snack-bar/snack-bar-config.ts","../../src/lib/snack-bar/snack-bar-animations.ts","../../src/lib/snack-bar/simple-snack-bar.ts","../../src/lib/snack-bar/snack-bar-container.ts","../../src/lib/snack-bar/snack-bar.ts","../../src/lib/snack-bar/snack-bar-module.ts","../../src/lib/sort/sort.ts","../../src/lib/sort/sort-header-intl.ts","../../src/lib/sort/sort-animations.ts","../../src/lib/sort/sort-header.ts","../../src/lib/sort/sort-module.ts","../../src/lib/stepper/step-label.ts","../../src/lib/stepper/stepper-intl.ts","../../src/lib/stepper/step-header.ts","../../src/lib/stepper/stepper-animations.ts","../../src/lib/stepper/stepper.ts","../../src/lib/stepper/stepper-button.ts","../../src/lib/stepper/stepper-module.ts","../../src/lib/table/table.ts","../../src/lib/table/cell.ts","../../src/lib/sidenav/sidenav.ts","../../src/lib/sidenav/sidenav-module.ts","../../src/lib/slide-toggle/slide-toggle.ts","../../src/lib/slide-toggle/slide-toggle-module.ts","../../src/lib/slider/slider.ts","../../src/lib/slider/slider-module.ts","../../src/lib/snack-bar/snack-bar-ref.ts","../../src/lib/progress-spinner/progress-spinner.ts","../../src/lib/progress-spinner/progress-spinner-module.ts","../../src/lib/radio/radio.ts","../../src/lib/radio/radio-module.ts","../../src/lib/sidenav/drawer-animations.ts","../../src/lib/sidenav/drawer.ts","../../src/lib/tooltip/tooltip-module.ts","../../src/lib/paginator/paginator-intl.ts","../../src/lib/paginator/paginator.ts","../../src/lib/paginator/paginator-module.ts","../../src/lib/progress-bar/progress-bar.ts","../../src/lib/progress-bar/progress-bar-module.ts","../../src/lib/menu/menu-directive.ts","../../src/lib/menu/menu-trigger.ts","../../src/lib/menu/menu-module.ts","../../src/lib/select/select-animations.ts","../../src/lib/select/select-module.ts","../../src/lib/tooltip/tooltip-animations.ts","../../src/lib/list/list.ts","../../src/lib/list/selection-list.ts","../../src/lib/list/list-module.ts","../../src/lib/menu/menu-animations.ts","../../src/lib/menu/menu-item.ts","../../src/lib/datepicker/datepicker-input.ts","../../src/lib/datepicker/datepicker-toggle.ts","../../src/lib/datepicker/datepicker-module.ts","../../src/lib/divider/divider.ts","../../src/lib/divider/divider-module.ts","../../src/lib/expansion/accordion.ts","../../src/lib/expansion/expansion-panel-content.ts","../../src/lib/expansion/expansion-panel.ts","../../src/lib/expansion/expansion-panel-header.ts","../../src/lib/expansion/expansion-module.ts","../../src/lib/grid-list/grid-tile.ts","../../src/lib/grid-list/tile-coordinator.ts","../../src/lib/grid-list/tile-styler.ts","../../src/lib/grid-list/grid-list.ts","../../src/lib/grid-list/grid-list-module.ts","../../src/lib/datepicker/month-view.ts","../../src/lib/datepicker/multi-year-view.ts","../../src/lib/datepicker/year-view.ts","../../src/lib/datepicker/calendar.ts","../../src/lib/datepicker/datepicker.ts","../../src/lib/dialog/dialog-container.ts","../../src/lib/dialog/dialog-ref.ts","../../src/lib/dialog/dialog.ts","../../src/lib/dialog/dialog-content-directives.ts","../../src/lib/dialog/dialog-module.ts","../../src/lib/icon/icon-registry.ts","../../src/lib/icon/icon.ts","../../src/lib/icon/icon-module.ts","../../src/lib/input/autosize.ts","../../src/lib/input/input-value-accessor.ts","../../src/lib/input/input.ts","../../src/lib/input/input-module.ts","../../src/lib/datepicker/datepicker-intl.ts","../../src/lib/datepicker/calendar-body.ts","../../src/lib/checkbox/checkbox.ts","../../src/lib/checkbox/checkbox-required-validator.ts","../../src/lib/checkbox/checkbox-module.ts","../../src/lib/chips/chip.ts","../../src/lib/chips/chip-list.ts","../../src/lib/chips/chip-input.ts","../../src/lib/chips/chips-module.ts","../../src/lib/dialog/dialog-config.ts","../../src/lib/dialog/dialog-animations.ts","../../src/lib/button/button.ts","../../src/lib/button/button-module.ts","../../src/lib/button-toggle/button-toggle.ts","../../src/lib/button-toggle/button-toggle-module.ts","../../src/lib/card/card.ts","../../src/lib/card/card-module.ts","../../src/lib/checkbox/checkbox-config.ts","../../src/lib/core/option/option.ts","../../src/lib/core/option/index.ts","../../src/lib/core/label/label-options.ts","../../src/lib/form-field/error.ts","../../src/lib/form-field/form-field-control.ts","../../src/lib/form-field/hint.ts","../../src/lib/form-field/placeholder.ts","../../src/lib/form-field/label.ts","../../src/lib/form-field/prefix.ts","../../src/lib/form-field/suffix.ts","../../src/lib/form-field/form-field-animations.ts","../../src/lib/form-field/form-field.ts","../../src/lib/form-field/form-field-module.ts","../../src/lib/autocomplete/autocomplete.ts","../../src/lib/autocomplete/autocomplete-module.ts","../../node_modules/tslib/tslib.es6.js","../../src/lib/core/common-behaviors/disabled.ts","../../src/lib/core/common-behaviors/color.ts","../../src/lib/core/common-behaviors/disable-ripple.ts","../../src/lib/core/common-behaviors/tabindex.ts","../../src/lib/core/common-behaviors/error-state.ts","../../src/lib/core/datetime/native-date-adapter.ts","../../src/lib/core/style/apply-transform.ts","../../src/lib/form-field/form-field-errors.ts","../../src/lib/input/input-errors.ts","../../src/lib/datepicker/datepicker-errors.ts","../../src/lib/grid-list/grid-list-measure.ts","../../src/lib/menu/menu-errors.ts","../../src/lib/select/select-errors.ts","../../src/lib/sort/sort-errors.ts","../../src/lib/core/animation/animation.ts","../../src/lib/core/common-behaviors/common-module.ts","../../src/lib/core/datetime/date-adapter.ts","../../src/lib/core/datetime/date-formats.ts","../../src/lib/core/datetime/native-date-formats.ts","../../src/lib/core/datetime/index.ts","../../src/lib/core/error/error-options.ts","../../src/lib/core/gestures/gesture-config.ts","../../src/lib/core/line/line.ts","../../src/lib/core/ripple/ripple-ref.ts","../../src/lib/core/ripple/ripple.ts","../../src/lib/core/ripple/index.ts","../../src/lib/core/selection/pseudo-checkbox/pseudo-checkbox.ts","../../src/lib/core/selection/index.ts","../../src/lib/core/option/optgroup.ts"],"sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  AfterViewInit,\n  ChangeDetectionStrategy,\n  Component,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  isDevMode,\n  QueryList,\n  ViewEncapsulation\n} from '@angular/core';\nimport {CanColor, mixinColor} from '@angular/material/core';\nimport {Platform} from '@angular/cdk/platform';\n\n// Boilerplate for applying mixins to MatToolbar.\n/** @docs-private */\nexport class MatToolbarBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatToolbarMixinBase = mixinColor(MatToolbarBase);\n\n@Directive({\n  selector: 'mat-toolbar-row',\n  exportAs: 'matToolbarRow',\n  host: {'class': 'mat-toolbar-row'},\n})\nexport class MatToolbarRow {}\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-toolbar',\n  exportAs: 'matToolbar',\n  templateUrl: 'toolbar.html',\n  styleUrls: ['toolbar.css'],\n  inputs: ['color'],\n  host: {\n    'class': 'mat-toolbar',\n    '[class.mat-toolbar-multiple-rows]': 'this._toolbarRows.length',\n    '[class.mat-toolbar-single-row]': '!this._toolbarRows.length'\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n})\nexport class MatToolbar extends _MatToolbarMixinBase implements CanColor, AfterViewInit {\n\n  /** Reference to all toolbar row elements that have been projected. */\n  @ContentChildren(MatToolbarRow) _toolbarRows: QueryList<MatToolbarRow>;\n\n  constructor(elementRef: ElementRef, private _platform: Platform) {\n    super(elementRef);\n  }\n\n  ngAfterViewInit() {\n    if (!isDevMode() || !this._platform.isBrowser) {\n      return;\n    }\n\n    this._checkToolbarMixedModes();\n    this._toolbarRows.changes.subscribe(() => this._checkToolbarMixedModes());\n  }\n\n  /**\n   * Throws an exception when developers are attempting to combine the different toolbar row modes.\n   */\n  private _checkToolbarMixedModes() {\n    if (!this._toolbarRows.length) {\n      return;\n    }\n\n    // Check if there are any other DOM nodes that can display content but aren't inside of\n    // a <mat-toolbar-row> element.\n    const isCombinedUsage = [].slice.call(this._elementRef.nativeElement.childNodes)\n      .filter(node => !(node.classList && node.classList.contains('mat-toolbar-row')))\n      .filter(node => node.nodeType !== Node.COMMENT_NODE)\n      .some(node => node.textContent.trim());\n\n    if (isCombinedUsage) {\n      throwToolbarMixedModesError();\n    }\n  }\n}\n\n/**\n * Throws an exception when attempting to combine the different toolbar row modes.\n * @docs-private\n */\nexport function throwToolbarMixedModesError() {\n  throw Error('MatToolbar: Attempting to combine different toolbar modes. ' +\n    'Either specify multiple `<mat-toolbar-row>` elements explicitly or just place content ' +\n    'inside of a `<mat-toolbar>` for a single row.');\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {PlatformModule} from '@angular/cdk/platform';\nimport {MatToolbar, MatToolbarRow} from './toolbar';\n\n@NgModule({\n  imports: [MatCommonModule, PlatformModule],\n  exports: [MatToolbar, MatToolbarRow, MatCommonModule],\n  declarations: [MatToolbar, MatToolbarRow],\n})\nexport class MatToolbarModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Version} from '@angular/core';\n\n/** Current version of Angular Material. */\nexport const VERSION = new Version('5.1.0-df44767');\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {Directionality} from '@angular/cdk/bidi';\nimport {DOWN_ARROW, ENTER, ESCAPE, UP_ARROW, TAB} from '@angular/cdk/keycodes';\nimport {\n  ConnectedPositionStrategy,\n  Overlay,\n  OverlayRef,\n  OverlayConfig,\n  PositionStrategy,\n  ScrollStrategy,\n} from '@angular/cdk/overlay';\nimport {TemplatePortal} from '@angular/cdk/portal';\nimport {filter} from 'rxjs/operators/filter';\nimport {take} from 'rxjs/operators/take';\nimport {switchMap} from 'rxjs/operators/switchMap';\nimport {tap} from 'rxjs/operators/tap';\nimport {delay} from 'rxjs/operators/delay';\nimport {\n  ChangeDetectorRef,\n  Directive,\n  ElementRef,\n  forwardRef,\n  Host,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  ViewContainerRef,\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {MatOption, MatOptionSelectionChange} from '@angular/material/core';\nimport {MatFormField} from '@angular/material/form-field';\nimport {DOCUMENT} from '@angular/common';\nimport {Observable} from 'rxjs/Observable';\nimport {Subject} from 'rxjs/Subject';\nimport {defer} from 'rxjs/observable/defer';\nimport {fromEvent} from 'rxjs/observable/fromEvent';\nimport {merge} from 'rxjs/observable/merge';\nimport {of as observableOf} from 'rxjs/observable/of';\nimport {Subscription} from 'rxjs/Subscription';\nimport {MatAutocomplete} from './autocomplete';\n\n\n/**\n * The following style constants are necessary to save here in order\n * to properly calculate the scrollTop of the panel. Because we are not\n * actually focusing the active item, scroll must be handled manually.\n */\n\n/** The height of each autocomplete option. */\nexport const AUTOCOMPLETE_OPTION_HEIGHT = 48;\n\n/** The total height of the autocomplete panel. */\nexport const AUTOCOMPLETE_PANEL_HEIGHT = 256;\n\n/** Injection token that determines the scroll handling while the autocomplete panel is open. */\nexport const MAT_AUTOCOMPLETE_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mat-autocomplete-scroll-strategy');\n\n/** @docs-private */\nexport function MAT_AUTOCOMPLETE_SCROLL_STRATEGY_PROVIDER_FACTORY(overlay: Overlay):\n    () => ScrollStrategy {\n  return () => overlay.scrollStrategies.reposition();\n}\n\n/** @docs-private */\nexport const MAT_AUTOCOMPLETE_SCROLL_STRATEGY_PROVIDER = {\n  provide: MAT_AUTOCOMPLETE_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_AUTOCOMPLETE_SCROLL_STRATEGY_PROVIDER_FACTORY,\n};\n\n/**\n * Provider that allows the autocomplete to register as a ControlValueAccessor.\n * @docs-private\n */\nexport const MAT_AUTOCOMPLETE_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatAutocompleteTrigger),\n  multi: true\n};\n\n/**\n * Creates an error to be thrown when attempting to use an autocomplete trigger without a panel.\n */\nexport function getMatAutocompleteMissingPanelError(): Error {\n  return Error('Attempting to open an undefined instance of `mat-autocomplete`. ' +\n               'Make sure that the id passed to the `matAutocomplete` is correct and that ' +\n               'you\\'re attempting to open it after the ngAfterContentInit hook.');\n}\n\n@Directive({\n  selector: `input[matAutocomplete], textarea[matAutocomplete]`,\n  host: {\n    'role': 'combobox',\n    'autocomplete': 'off',\n    'aria-autocomplete': 'list',\n    '[attr.aria-activedescendant]': 'activeOption?.id',\n    '[attr.aria-expanded]': 'panelOpen.toString()',\n    '[attr.aria-owns]': 'autocomplete?.id',\n    // Note: we use `focusin`, as opposed to `focus`, in order to open the panel\n    // a little earlier. This avoids issues where IE delays the focusing of the input.\n    '(focusin)': '_handleFocus()',\n    '(blur)': '_onTouched()',\n    '(input)': '_handleInput($event)',\n    '(keydown)': '_handleKeydown($event)',\n  },\n  providers: [MAT_AUTOCOMPLETE_VALUE_ACCESSOR]\n})\nexport class MatAutocompleteTrigger implements ControlValueAccessor, OnDestroy {\n  private _overlayRef: OverlayRef | null;\n  private _portal: TemplatePortal<any>;\n  private _panelOpen: boolean = false;\n\n  /** Strategy that is used to position the panel. */\n  private _positionStrategy: ConnectedPositionStrategy;\n\n  /** Whether or not the label state is being overridden. */\n  private _manuallyFloatingLabel = false;\n\n  /** The subscription for closing actions (some are bound to document). */\n  private _closingActionsSubscription: Subscription;\n\n  /** Stream of escape keyboard events. */\n  private _escapeEventStream = new Subject<void>();\n\n  /** View -> model callback called when value changes */\n  _onChange: (value: any) => void = () => {};\n\n  /** View -> model callback called when autocomplete has been touched */\n  _onTouched = () => {};\n\n  /** The autocomplete panel to be attached to this trigger. */\n  @Input('matAutocomplete') autocomplete: MatAutocomplete;\n\n  constructor(private _element: ElementRef, private _overlay: Overlay,\n              private _viewContainerRef: ViewContainerRef,\n              private _zone: NgZone,\n              private _changeDetectorRef: ChangeDetectorRef,\n              @Inject(MAT_AUTOCOMPLETE_SCROLL_STRATEGY) private _scrollStrategy,\n              @Optional() private _dir: Directionality,\n              @Optional() @Host() private _formField: MatFormField,\n              @Optional() @Inject(DOCUMENT) private _document: any) {}\n\n  ngOnDestroy() {\n    this._destroyPanel();\n    this._escapeEventStream.complete();\n  }\n\n  /** Whether or not the autocomplete panel is open. */\n  get panelOpen(): boolean {\n    return this._panelOpen && this.autocomplete.showPanel;\n  }\n\n  /** Opens the autocomplete suggestion panel. */\n  openPanel(): void {\n    this._attachOverlay();\n    this._floatLabel();\n  }\n\n  /** Closes the autocomplete suggestion panel. */\n  closePanel(): void {\n    this._resetLabel();\n\n    if (this._panelOpen) {\n      this.autocomplete._isOpen = this._panelOpen = false;\n\n      if (this._overlayRef && this._overlayRef.hasAttached()) {\n        this._overlayRef.detach();\n        this._closingActionsSubscription.unsubscribe();\n      }\n\n      // We need to trigger change detection manually, because\n      // `fromEvent` doesn't seem to do it at the proper time.\n      // This ensures that the label is reset when the\n      // user clicks outside.\n      this._changeDetectorRef.detectChanges();\n    }\n  }\n\n  /**\n   * A stream of actions that should close the autocomplete panel, including\n   * when an option is selected, on blur, and when TAB is pressed.\n   */\n  get panelClosingActions(): Observable<MatOptionSelectionChange> {\n    return merge(\n      this.optionSelections,\n      this.autocomplete._keyManager.tabOut.pipe(filter(() => this._panelOpen)),\n      this._escapeEventStream,\n      this._outsideClickStream,\n      this._overlayRef ?\n          this._overlayRef.detachments().pipe(filter(() => this._panelOpen)) :\n          observableOf()\n    );\n  }\n\n  /** Stream of autocomplete option selections. */\n  optionSelections: Observable<MatOptionSelectionChange> = defer(() => {\n    if (this.autocomplete && this.autocomplete.options) {\n     return merge(...this.autocomplete.options.map(option => option.onSelectionChange));\n    }\n\n    // If there are any subscribers before `ngAfterViewInit`, the `autocomplete` will be undefined.\n    // Return a stream that we'll replace with the real one once everything is in place.\n    return this._zone.onStable\n        .asObservable()\n        .pipe(take(1), switchMap(() => this.optionSelections));\n  });\n\n  /** The currently active option, coerced to MatOption type. */\n  get activeOption(): MatOption | null {\n    if (this.autocomplete && this.autocomplete._keyManager) {\n      return this.autocomplete._keyManager.activeItem;\n    }\n\n    return null;\n  }\n\n  /** Stream of clicks outside of the autocomplete panel. */\n  private get _outsideClickStream(): Observable<any> {\n    if (!this._document) {\n      return observableOf(null);\n    }\n\n    return merge(\n      fromEvent(this._document, 'click'),\n      fromEvent(this._document, 'touchend')\n    )\n    .pipe(filter((event: MouseEvent | TouchEvent) => {\n      const clickTarget = event.target as HTMLElement;\n      const formField = this._formField ?\n          this._formField._elementRef.nativeElement : null;\n\n      return this._panelOpen &&\n              clickTarget !== this._element.nativeElement &&\n              (!formField || !formField.contains(clickTarget)) &&\n              (!!this._overlayRef && !this._overlayRef.overlayElement.contains(clickTarget));\n    }));\n  }\n\n  /**\n   * Sets the autocomplete's value. Part of the ControlValueAccessor interface\n   * required to integrate with Angular's core forms API.\n   *\n   * @param value New value to be written to the model.\n   */\n  writeValue(value: any): void {\n    Promise.resolve(null).then(() => this._setTriggerValue(value));\n  }\n\n  /**\n   * Saves a callback function to be invoked when the autocomplete's value\n   * changes from user input. Part of the ControlValueAccessor interface\n   * required to integrate with Angular's core forms API.\n   *\n   * @param fn Callback to be triggered when the value changes.\n   */\n  registerOnChange(fn: (value: any) => {}): void {\n    this._onChange = fn;\n  }\n\n  /**\n   * Saves a callback function to be invoked when the autocomplete is blurred\n   * by the user. Part of the ControlValueAccessor interface required\n   * to integrate with Angular's core forms API.\n   *\n   * @param fn Callback to be triggered when the component has been touched.\n   */\n  registerOnTouched(fn: () => {}) {\n    this._onTouched = fn;\n  }\n\n  /**\n   * Disables the input. Implemented as a part of `ControlValueAccessor`.\n   * @param isDisabled Whether the component should be disabled.\n   */\n  setDisabledState(isDisabled: boolean) {\n    this._element.nativeElement.disabled = isDisabled;\n  }\n\n  _handleKeydown(event: KeyboardEvent): void {\n    const keyCode = event.keyCode;\n\n    if (keyCode === ESCAPE && this.panelOpen) {\n      this._resetActiveItem();\n      this._escapeEventStream.next();\n      event.stopPropagation();\n    } else if (this.activeOption && keyCode === ENTER && this.panelOpen) {\n      this.activeOption._selectViaInteraction();\n      this._resetActiveItem();\n      event.preventDefault();\n    } else {\n      const prevActiveItem = this.autocomplete._keyManager.activeItem;\n      const isArrowKey = keyCode === UP_ARROW || keyCode === DOWN_ARROW;\n\n      if (this.panelOpen || keyCode === TAB) {\n        this.autocomplete._keyManager.onKeydown(event);\n      } else if (isArrowKey) {\n        this.openPanel();\n      }\n\n      if (isArrowKey || this.autocomplete._keyManager.activeItem !== prevActiveItem) {\n        this._scrollToOption();\n      }\n    }\n  }\n\n  _handleInput(event: KeyboardEvent): void {\n    // We need to ensure that the input is focused, because IE will fire the `input`\n    // event on focus/blur/load if the input has a placeholder. See:\n    // https://connect.microsoft.com/IE/feedback/details/885747/\n    if (document.activeElement === event.target) {\n      this._onChange((event.target as HTMLInputElement).value);\n      this.openPanel();\n    }\n  }\n\n  _handleFocus(): void {\n    if (!this._element.nativeElement.readOnly) {\n      this._attachOverlay();\n      this._floatLabel(true);\n    }\n  }\n\n  /**\n   * In \"auto\" mode, the label will animate down as soon as focus is lost.\n   * This causes the value to jump when selecting an option with the mouse.\n   * This method manually floats the label until the panel can be closed.\n   * @param shouldAnimate Whether the label should be animated when it is floated.\n   */\n  private _floatLabel(shouldAnimate = false): void {\n    if (this._formField && this._formField.floatLabel === 'auto') {\n      if (shouldAnimate) {\n        this._formField._animateAndLockLabel();\n      } else {\n        this._formField.floatLabel = 'always';\n      }\n\n      this._manuallyFloatingLabel = true;\n    }\n  }\n\n  /** If the label has been manually elevated, return it to its normal state. */\n  private _resetLabel(): void  {\n    if (this._manuallyFloatingLabel) {\n      this._formField.floatLabel = 'auto';\n      this._manuallyFloatingLabel = false;\n    }\n  }\n\n  /**\n   * Given that we are not actually focusing active options, we must manually adjust scroll\n   * to reveal options below the fold. First, we find the offset of the option from the top\n   * of the panel. If that offset is below the fold, the new scrollTop will be the offset -\n   * the panel height + the option height, so the active option will be just visible at the\n   * bottom of the panel. If that offset is above the top of the visible panel, the new scrollTop\n   * will become the offset. If that offset is visible within the panel already, the scrollTop is\n   * not adjusted.\n   */\n  private _scrollToOption(): void {\n    const activeOptionIndex = this.autocomplete._keyManager.activeItemIndex || 0;\n    const labelCount = MatOption.countGroupLabelsBeforeOption(activeOptionIndex,\n        this.autocomplete.options, this.autocomplete.optionGroups);\n    const optionOffset = (activeOptionIndex + labelCount) * AUTOCOMPLETE_OPTION_HEIGHT;\n    const panelTop = this.autocomplete._getScrollTop();\n\n    if (optionOffset < panelTop) {\n      // Scroll up to reveal selected option scrolled above the panel top\n      this.autocomplete._setScrollTop(optionOffset);\n    } else if (optionOffset + AUTOCOMPLETE_OPTION_HEIGHT > panelTop + AUTOCOMPLETE_PANEL_HEIGHT) {\n      // Scroll down to reveal selected option scrolled below the panel bottom\n      const newScrollTop = optionOffset - AUTOCOMPLETE_PANEL_HEIGHT + AUTOCOMPLETE_OPTION_HEIGHT;\n      this.autocomplete._setScrollTop(Math.max(0, newScrollTop));\n    }\n  }\n\n  /**\n   * This method listens to a stream of panel closing actions and resets the\n   * stream every time the option list changes.\n   */\n  private _subscribeToClosingActions(): Subscription {\n    const firstStable = this._zone.onStable.asObservable().pipe(take(1));\n    const optionChanges = this.autocomplete.options.changes.pipe(\n      tap(() => this._positionStrategy.recalculateLastPosition()),\n      // Defer emitting to the stream until the next tick, because changing\n      // bindings in here will cause \"changed after checked\" errors.\n      delay(0)\n    );\n\n    // When the zone is stable initially, and when the option list changes...\n    return merge(firstStable, optionChanges)\n      .pipe(\n        // create a new stream of panelClosingActions, replacing any previous streams\n        // that were created, and flatten it so our stream only emits closing events...\n        switchMap(() => {\n          this._resetActiveItem();\n          this.autocomplete._setVisibility();\n          return this.panelClosingActions;\n        }),\n        // when the first closing event occurs...\n        take(1)\n      )\n      // set the value, close the panel, and complete.\n      .subscribe(event => this._setValueAndClose(event));\n  }\n\n  /** Destroys the autocomplete suggestion panel. */\n  private _destroyPanel(): void {\n    if (this._overlayRef) {\n      this.closePanel();\n      this._overlayRef.dispose();\n      this._overlayRef = null;\n    }\n  }\n\n  private _setTriggerValue(value: any): void {\n    const toDisplay = this.autocomplete && this.autocomplete.displayWith ?\n      this.autocomplete.displayWith(value) :\n      value;\n\n    // Simply falling back to an empty string if the display value is falsy does not work properly.\n    // The display value can also be the number zero and shouldn't fall back to an empty string.\n    const inputValue = toDisplay != null ? toDisplay : '';\n\n    // If it's used within a `MatFormField`, we should set it through the property so it can go\n    // through change detection.\n    if (this._formField) {\n      this._formField._control.value = inputValue;\n    } else {\n      this._element.nativeElement.value = inputValue;\n    }\n  }\n\n  /**\n   * This method closes the panel, and if a value is specified, also sets the associated\n   * control to that value. It will also mark the control as dirty if this interaction\n   * stemmed from the user.\n   */\n  private _setValueAndClose(event: MatOptionSelectionChange | null): void {\n    if (event && event.source) {\n      this._clearPreviousSelectedOption(event.source);\n      this._setTriggerValue(event.source.value);\n      this._onChange(event.source.value);\n      this._element.nativeElement.focus();\n      this.autocomplete._emitSelectEvent(event.source);\n    }\n\n    this.closePanel();\n  }\n\n  /**\n   * Clear any previous selected option and emit a selection change event for this option\n   */\n  private _clearPreviousSelectedOption(skip: MatOption) {\n    this.autocomplete.options.forEach(option => {\n      if (option != skip && option.selected) {\n        option.deselect();\n      }\n    });\n  }\n\n  private _attachOverlay(): void {\n    if (!this.autocomplete) {\n      throw getMatAutocompleteMissingPanelError();\n    }\n\n    if (!this._overlayRef) {\n      this._portal = new TemplatePortal(this.autocomplete.template, this._viewContainerRef);\n      this._overlayRef = this._overlay.create(this._getOverlayConfig());\n    } else {\n      /** Update the panel width, in case the host width has changed */\n      this._overlayRef.updateSize({width: this._getHostWidth()});\n    }\n\n    if (this._overlayRef && !this._overlayRef.hasAttached()) {\n      this._overlayRef.attach(this._portal);\n      this._closingActionsSubscription = this._subscribeToClosingActions();\n    }\n\n    this.autocomplete._setVisibility();\n    this.autocomplete._isOpen = this._panelOpen = true;\n  }\n\n  private _getOverlayConfig(): OverlayConfig {\n    return new OverlayConfig({\n      positionStrategy: this._getOverlayPosition(),\n      scrollStrategy: this._scrollStrategy(),\n      width: this._getHostWidth(),\n      direction: this._dir ? this._dir.value : 'ltr'\n    });\n  }\n\n  private _getOverlayPosition(): PositionStrategy {\n    this._positionStrategy = this._overlay.position().connectedTo(\n        this._getConnectedElement(),\n        {originX: 'start', originY: 'bottom'}, {overlayX: 'start', overlayY: 'top'})\n        .withFallbackPosition(\n            {originX: 'start', originY: 'top'}, {overlayX: 'start', overlayY: 'bottom'}\n        );\n    return this._positionStrategy;\n  }\n\n  private _getConnectedElement(): ElementRef {\n    return this._formField ? this._formField._connectionContainerRef : this._element;\n  }\n\n  /** Returns the width of the input element, so the panel width can match it. */\n  private _getHostWidth(): number {\n    return this._getConnectedElement().nativeElement.getBoundingClientRect().width;\n  }\n\n  /** Reset active item to -1 so arrow events will activate the correct options. */\n  private _resetActiveItem(): void {\n    this.autocomplete._keyManager.setActiveItem(-1);\n  }\n\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {ElementRef, NgZone} from '@angular/core';\nimport {Platform, supportsPassiveEventListeners} from '@angular/cdk/platform';\nimport {RippleRef, RippleState} from './ripple-ref';\n\n/** Fade-in duration for the ripples. Can be modified with the speedFactor option. */\nexport const RIPPLE_FADE_IN_DURATION = 450;\n\n/** Fade-out duration for the ripples in milliseconds. This can't be modified by the speedFactor. */\nexport const RIPPLE_FADE_OUT_DURATION = 400;\n\n/**\n * Timeout for ignoring mouse events. Mouse events will be temporary ignored after touch\n * events to avoid synthetic mouse events.\n */\nconst IGNORE_MOUSE_EVENTS_TIMEOUT = 800;\n\nexport type RippleConfig = {\n  color?: string;\n  centered?: boolean;\n  radius?: number;\n  speedFactor?: number;\n  persistent?: boolean;\n};\n\n/**\n * Interface that describes the target for launching ripples.\n * It defines the ripple configuration and disabled state for interaction ripples.\n * @docs-private\n */\nexport interface RippleTarget {\n  /** Configuration for ripples that are launched on pointer down. */\n  rippleConfig: RippleConfig;\n\n  /** Whether ripples on pointer down should be disabled. */\n  rippleDisabled: boolean;\n}\n\n/**\n * Helper service that performs DOM manipulations. Not intended to be used outside this module.\n * The constructor takes a reference to the ripple directive's host element and a map of DOM\n * event handlers to be installed on the element that triggers ripple animations.\n * This will eventually become a custom renderer once Angular support exists.\n * @docs-private\n */\nexport class RippleRenderer {\n\n  /** Element where the ripples are being added to. */\n  private _containerElement: HTMLElement;\n\n  /** Element which triggers the ripple elements on mouse events. */\n  private _triggerElement: HTMLElement | null;\n\n  /** Whether the pointer is currently down or not. */\n  private _isPointerDown = false;\n\n  /** Events to be registered on the trigger element. */\n  private _triggerEvents = new Map<string, any>();\n\n  /** Set of currently active ripple references. */\n  private _activeRipples = new Set<RippleRef>();\n\n  /** Time in milliseconds when the last touchstart event happened. */\n  private _lastTouchStartEvent: number;\n\n  /** Options that apply to all the event listeners that are bound by the renderer. */\n  private _eventOptions = supportsPassiveEventListeners() ? ({passive: true} as any) : false;\n\n  constructor(private _target: RippleTarget,\n              private _ngZone: NgZone,\n              elementRef: ElementRef,\n              platform: Platform) {\n\n    // Only do anything if we're on the browser.\n    if (platform.isBrowser) {\n      this._containerElement = elementRef.nativeElement;\n\n      // Specify events which need to be registered on the trigger.\n      this._triggerEvents.set('mousedown', this.onMousedown);\n      this._triggerEvents.set('mouseup', this.onPointerUp);\n      this._triggerEvents.set('mouseleave', this.onPointerUp);\n\n      this._triggerEvents.set('touchstart', this.onTouchStart);\n      this._triggerEvents.set('touchend', this.onPointerUp);\n    }\n  }\n\n  /**\n   * Fades in a ripple at the given coordinates.\n   * @param x Coordinate within the element, along the X axis at which to start the ripple.\n   * @param y Coordinate within the element, along the Y axis at which to start the ripple.\n   * @param config Extra ripple options.\n   */\n  fadeInRipple(x: number, y: number, config: RippleConfig = {}): RippleRef {\n    const containerRect = this._containerElement.getBoundingClientRect();\n\n    if (config.centered) {\n      x = containerRect.left + containerRect.width / 2;\n      y = containerRect.top + containerRect.height / 2;\n    }\n\n    const radius = config.radius || distanceToFurthestCorner(x, y, containerRect);\n    const duration = RIPPLE_FADE_IN_DURATION / (config.speedFactor || 1);\n    const offsetX = x - containerRect.left;\n    const offsetY = y - containerRect.top;\n\n    const ripple = document.createElement('div');\n    ripple.classList.add('mat-ripple-element');\n\n    ripple.style.left = `${offsetX - radius}px`;\n    ripple.style.top = `${offsetY - radius}px`;\n    ripple.style.height = `${radius * 2}px`;\n    ripple.style.width = `${radius * 2}px`;\n\n    // If the color is not set, the default CSS color will be used.\n    ripple.style.backgroundColor = config.color || null;\n    ripple.style.transitionDuration = `${duration}ms`;\n\n    this._containerElement.appendChild(ripple);\n\n    // By default the browser does not recalculate the styles of dynamically created\n    // ripple elements. This is critical because then the `scale` would not animate properly.\n    enforceStyleRecalculation(ripple);\n\n    ripple.style.transform = 'scale(1)';\n\n    // Exposed reference to the ripple that will be returned.\n    const rippleRef = new RippleRef(this, ripple, config);\n\n    rippleRef.state = RippleState.FADING_IN;\n\n    // Add the ripple reference to the list of all active ripples.\n    this._activeRipples.add(rippleRef);\n\n    // Wait for the ripple element to be completely faded in.\n    // Once it's faded in, the ripple can be hidden immediately if the mouse is released.\n    this.runTimeoutOutsideZone(() => {\n      rippleRef.state = RippleState.VISIBLE;\n\n      if (!config.persistent && !this._isPointerDown) {\n        rippleRef.fadeOut();\n      }\n    }, duration);\n\n    return rippleRef;\n  }\n\n  /** Fades out a ripple reference. */\n  fadeOutRipple(rippleRef: RippleRef) {\n    // For ripples that are not active anymore, don't re-un the fade-out animation.\n    if (!this._activeRipples.delete(rippleRef)) {\n      return;\n    }\n\n    const rippleEl = rippleRef.element;\n\n    rippleEl.style.transitionDuration = `${RIPPLE_FADE_OUT_DURATION}ms`;\n    rippleEl.style.opacity = '0';\n\n    rippleRef.state = RippleState.FADING_OUT;\n\n    // Once the ripple faded out, the ripple can be safely removed from the DOM.\n    this.runTimeoutOutsideZone(() => {\n      rippleRef.state = RippleState.HIDDEN;\n      rippleEl.parentNode!.removeChild(rippleEl);\n    }, RIPPLE_FADE_OUT_DURATION);\n  }\n\n  /** Fades out all currently active ripples. */\n  fadeOutAll() {\n    this._activeRipples.forEach(ripple => ripple.fadeOut());\n  }\n\n  /** Sets up the trigger event listeners */\n  setupTriggerEvents(element: HTMLElement) {\n    if (!element || element === this._triggerElement) {\n      return;\n    }\n\n    // Remove all previously registered event listeners from the trigger element.\n    this._removeTriggerEvents();\n\n    this._ngZone.runOutsideAngular(() => {\n      this._triggerEvents.forEach((fn, type) =>\n          element.addEventListener(type, fn, this._eventOptions));\n    });\n\n    this._triggerElement = element;\n  }\n\n  /** Function being called whenever the trigger is being pressed using mouse. */\n  private onMousedown = (event: MouseEvent) => {\n    const isSyntheticEvent = this._lastTouchStartEvent &&\n        Date.now() < this._lastTouchStartEvent + IGNORE_MOUSE_EVENTS_TIMEOUT;\n\n    if (!this._target.rippleDisabled && !isSyntheticEvent) {\n      this._isPointerDown = true;\n      this.fadeInRipple(event.clientX, event.clientY, this._target.rippleConfig);\n    }\n  }\n\n  /** Function being called whenever the trigger is being pressed using touch. */\n  private onTouchStart = (event: TouchEvent) => {\n    if (!this._target.rippleDisabled) {\n      // Some browsers fire mouse events after a `touchstart` event. Those synthetic mouse\n      // events will launch a second ripple if we don't ignore mouse events for a specific\n      // time after a touchstart event.\n      this._lastTouchStartEvent = Date.now();\n      this._isPointerDown = true;\n\n      this.fadeInRipple(\n          event.touches[0].clientX, event.touches[0].clientY, this._target.rippleConfig);\n    }\n  }\n\n  /** Function being called whenever the trigger is being released. */\n  private onPointerUp = () => {\n    if (!this._isPointerDown) {\n      return;\n    }\n\n    this._isPointerDown = false;\n\n    // Fade-out all ripples that are completely visible and not persistent.\n    this._activeRipples.forEach(ripple => {\n      if (!ripple.config.persistent && ripple.state === RippleState.VISIBLE) {\n        ripple.fadeOut();\n      }\n    });\n  }\n\n  /** Runs a timeout outside of the Angular zone to avoid triggering the change detection. */\n  private runTimeoutOutsideZone(fn: Function, delay = 0) {\n    this._ngZone.runOutsideAngular(() => setTimeout(fn, delay));\n  }\n\n  /** Removes previously registered event listeners from the trigger element. */\n  _removeTriggerEvents() {\n    if (this._triggerElement) {\n      this._triggerEvents.forEach((fn, type) => {\n        this._triggerElement!.removeEventListener(type, fn, this._eventOptions);\n      });\n    }\n  }\n}\n\n/** Enforces a style recalculation of a DOM element by computing its styles. */\nfunction enforceStyleRecalculation(element: HTMLElement) {\n  // Enforce a style recalculation by calling `getComputedStyle` and accessing any property.\n  // Calling `getPropertyValue` is important to let optimizers know that this is not a noop.\n  // See: https://gist.github.com/paulirish/5d52fb081b3570c81e3a\n  window.getComputedStyle(element).getPropertyValue('opacity');\n}\n\n/**\n * Returns the distance from the point (x, y) to the furthest corner of a rectangle.\n */\nfunction distanceToFurthestCorner(x: number, y: number, rect: ClientRect) {\n  const distX = Math.max(Math.abs(x - rect.left), Math.abs(x - rect.right));\n  const distY = Math.max(Math.abs(y - rect.top), Math.abs(y - rect.bottom));\n  return Math.sqrt(distX * distX + distY * distY);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * When constructing a Date, the month is zero-based. This can be confusing, since people are\n * used to seeing them one-based. So we create these aliases to make writing the tests easier.\n */\nexport const JAN = 0, FEB = 1, MAR = 2, APR = 3, MAY = 4, JUN = 5, JUL = 6, AUG = 7, SEP = 8,\n    OCT = 9, NOV = 10, DEC = 11;\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/** Time and timing curve for expansion panel animations. */\nexport const EXPANSION_PANEL_ANIMATION_TIMING = '225ms cubic-bezier(0.4,0.0,0.2,1)';\n\n/** Animations used by the Material expansion panel. */\nexport const matExpansionAnimations: {\n  readonly indicatorRotate: AnimationTriggerMetadata;\n  readonly expansionHeaderHeight: AnimationTriggerMetadata;\n  readonly bodyExpansion: AnimationTriggerMetadata;\n} = {\n  /** Animation that rotates the indicator arrow. */\n  indicatorRotate: trigger('indicatorRotate', [\n    state('collapsed', style({transform: 'rotate(0deg)'})),\n    state('expanded', style({transform: 'rotate(180deg)'})),\n    transition('expanded <=> collapsed', animate(EXPANSION_PANEL_ANIMATION_TIMING)),\n  ]),\n\n  /** Animation that expands and collapses the panel header height. */\n  expansionHeaderHeight: trigger('expansionHeight', [\n    state('collapsed', style({\n      height: '{{collapsedHeight}}',\n    }), {\n      params: {collapsedHeight: '48px'},\n    }),\n    state('expanded', style({\n      height: '{{expandedHeight}}'\n    }), {\n      params: {expandedHeight: '64px'}\n    }),\n    transition('expanded <=> collapsed', animate(EXPANSION_PANEL_ANIMATION_TIMING)),\n  ]),\n\n  /** Animation that expands and collapses the panel content. */\n  bodyExpansion: trigger('bodyExpansion', [\n    state('collapsed', style({height: '0px', visibility: 'hidden'})),\n    state('expanded', style({height: '*', visibility: 'visible'})),\n    transition('expanded <=> collapsed', animate(EXPANSION_PANEL_ANIMATION_TIMING)),\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {ActiveDescendantKeyManager} from '@angular/cdk/a11y';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {SelectionModel} from '@angular/cdk/collections';\nimport {DOWN_ARROW, END, ENTER, HOME, SPACE, UP_ARROW} from '@angular/cdk/keycodes';\nimport {\n  CdkConnectedOverlay,\n  Overlay,\n  RepositionScrollStrategy,\n  ScrollStrategy,\n  ViewportRuler,\n} from '@angular/cdk/overlay';\nimport {filter} from 'rxjs/operators/filter';\nimport {take} from 'rxjs/operators/take';\nimport {map} from 'rxjs/operators/map';\nimport {switchMap} from 'rxjs/operators/switchMap';\nimport {startWith} from 'rxjs/operators/startWith';\nimport {takeUntil} from 'rxjs/operators/takeUntil';\nimport {\n  AfterContentInit,\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  ContentChildren,\n  Directive,\n  DoCheck,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  InjectionToken,\n  Input,\n  isDevMode,\n  NgZone,\n  OnChanges,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Output,\n  QueryList,\n  Self,\n  SimpleChanges,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {\n  ControlValueAccessor,\n  FormGroupDirective,\n  NgControl,\n  NgForm\n} from '@angular/forms';\nimport {\n  CanDisable,\n  ErrorStateMatcher,\n  CanUpdateErrorState,\n  mixinErrorState,\n  HasTabIndex,\n  MatOptgroup,\n  MatOption,\n  MatOptionSelectionChange,\n  mixinDisabled,\n  mixinTabIndex,\n  MAT_OPTION_PARENT_COMPONENT,\n  mixinDisableRipple,\n  CanDisableRipple,\n} from '@angular/material/core';\nimport {MatFormField, MatFormFieldControl} from '@angular/material/form-field';\nimport {Observable} from 'rxjs/Observable';\nimport {merge} from 'rxjs/observable/merge';\nimport {Subject} from 'rxjs/Subject';\nimport {defer} from 'rxjs/observable/defer';\nimport {matSelectAnimations} from './select-animations';\nimport {\n  getMatSelectDynamicMultipleError,\n  getMatSelectNonArrayValueError,\n  getMatSelectNonFunctionValueError,\n} from './select-errors';\n\n\nlet nextUniqueId = 0;\n\n/**\n * The following style constants are necessary to save here in order\n * to properly calculate the alignment of the selected option over\n * the trigger element.\n */\n\n/** The max height of the select's overlay panel */\nexport const SELECT_PANEL_MAX_HEIGHT = 256;\n\n/** The panel's padding on the x-axis */\nexport const SELECT_PANEL_PADDING_X = 16;\n\n/** The panel's x axis padding if it is indented (e.g. there is an option group). */\nexport const SELECT_PANEL_INDENT_PADDING_X = SELECT_PANEL_PADDING_X * 2;\n\n/** The height of the select items in `em` units. */\nexport const SELECT_ITEM_HEIGHT_EM = 3;\n\n/**\n * Distance between the panel edge and the option text in\n * multi-selection mode.\n *\n * (SELECT_PANEL_PADDING_X * 1.5) + 20 = 44\n * The padding is multiplied by 1.5 because the checkbox's margin is half the padding.\n * The checkbox width is 20px.\n */\nexport const SELECT_MULTIPLE_PANEL_PADDING_X = SELECT_PANEL_PADDING_X * 1.5 + 20;\n\n/**\n * The select panel will only \"fit\" inside the viewport if it is positioned at\n * this value or more away from the viewport boundary.\n */\nexport const SELECT_PANEL_VIEWPORT_PADDING = 8;\n\n/** Injection token that determines the scroll handling while a select is open. */\nexport const MAT_SELECT_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mat-select-scroll-strategy');\n\n/** @docs-private */\nexport function MAT_SELECT_SCROLL_STRATEGY_PROVIDER_FACTORY(overlay: Overlay):\n    () => RepositionScrollStrategy {\n  return () => overlay.scrollStrategies.reposition();\n}\n\n/** @docs-private */\nexport const MAT_SELECT_SCROLL_STRATEGY_PROVIDER = {\n  provide: MAT_SELECT_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_SELECT_SCROLL_STRATEGY_PROVIDER_FACTORY,\n};\n\n/** Change event object that is emitted when the select value has changed. */\nexport class MatSelectChange {\n  constructor(\n    /** Reference to the select that emitted the change event. */\n    public source: MatSelect,\n    /** Current value of the select that emitted the event. */\n    public value: any) { }\n}\n\n// Boilerplate for applying mixins to MatSelect.\n/** @docs-private */\nexport class MatSelectBase {\n  constructor(public _elementRef: ElementRef,\n              public _defaultErrorStateMatcher: ErrorStateMatcher,\n              public _parentForm: NgForm,\n              public _parentFormGroup: FormGroupDirective,\n              public ngControl: NgControl) {}\n}\nexport const _MatSelectMixinBase = mixinDisableRipple(\n    mixinTabIndex(mixinDisabled(mixinErrorState(MatSelectBase))));\n\n\n/**\n * Allows the user to customize the trigger that is displayed when the select has a value.\n */\n@Directive({\n  selector: 'mat-select-trigger'\n})\nexport class MatSelectTrigger {}\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-select',\n  exportAs: 'matSelect',\n  templateUrl: 'select.html',\n  styleUrls: ['select.css'],\n  inputs: ['disabled', 'disableRipple', 'tabIndex'],\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {\n    'role': 'listbox',\n    '[attr.id]': 'id',\n    '[attr.tabindex]': 'tabIndex',\n    '[attr.aria-label]': '_ariaLabel',\n    '[attr.aria-labelledby]': 'ariaLabelledby',\n    '[attr.aria-required]': 'required.toString()',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.aria-invalid]': 'errorState',\n    '[attr.aria-owns]': 'panelOpen ? _optionIds : null',\n    '[attr.aria-multiselectable]': 'multiple',\n    '[attr.aria-describedby]': '_ariaDescribedby || null',\n    '[attr.aria-activedescendant]': '_getAriaActiveDescendant()',\n    '[class.mat-select-disabled]': 'disabled',\n    '[class.mat-select-invalid]': 'errorState',\n    '[class.mat-select-required]': 'required',\n    'class': 'mat-select',\n    '(keydown)': '_handleKeydown($event)',\n    '(focus)': '_onFocus()',\n    '(blur)': '_onBlur()',\n  },\n  animations: [\n    matSelectAnimations.transformPanel,\n    matSelectAnimations.fadeInContent\n  ],\n  providers: [\n    {provide: MatFormFieldControl, useExisting: MatSelect},\n    {provide: MAT_OPTION_PARENT_COMPONENT, useExisting: MatSelect}\n  ],\n})\nexport class MatSelect extends _MatSelectMixinBase implements AfterContentInit, OnChanges,\n    OnDestroy, OnInit, DoCheck, ControlValueAccessor, CanDisable, HasTabIndex,\n    MatFormFieldControl<any>, CanUpdateErrorState, CanDisableRipple {\n  /** Whether or not the overlay panel is open. */\n  private _panelOpen = false;\n\n  /** Whether filling out the select is required in the form. */\n  private _required: boolean = false;\n\n  /** The scroll position of the overlay panel, calculated to center the selected option. */\n  private _scrollTop = 0;\n\n  /** The placeholder displayed in the trigger of the select. */\n  private _placeholder: string;\n\n  /** Whether the component is in multiple selection mode. */\n  private _multiple: boolean = false;\n\n  /** Comparison function to specify which option is displayed. Defaults to object equality. */\n  private _compareWith = (o1: any, o2: any) => o1 === o2;\n\n  /** Unique id for this input. */\n  private _uid = `mat-select-${nextUniqueId++}`;\n\n  /** Emits whenever the component is destroyed. */\n  private _destroy = new Subject<void>();\n\n  /** The last measured value for the trigger's client bounding rect. */\n  _triggerRect: ClientRect;\n\n  /** The aria-describedby attribute on the select for improved a11y. */\n  _ariaDescribedby: string;\n\n  /** The cached font-size of the trigger element. */\n  _triggerFontSize = 0;\n\n  /** Deals with the selection logic. */\n  _selectionModel: SelectionModel<MatOption>;\n\n  /** Manages keyboard events for options in the panel. */\n  _keyManager: ActiveDescendantKeyManager<MatOption>;\n\n  /** View -> model callback called when value changes */\n  _onChange: (value: any) => void = () => {};\n\n  /** View -> model callback called when select has been touched */\n  _onTouched = () => {};\n\n  /** The IDs of child options to be passed to the aria-owns attribute. */\n  _optionIds: string = '';\n\n  /** The value of the select panel's transform-origin property. */\n  _transformOrigin: string = 'top';\n\n  /** Whether the panel's animation is done. */\n  _panelDoneAnimating: boolean = false;\n\n  /** Strategy that will be used to handle scrolling while the select panel is open. */\n  _scrollStrategy = this._scrollStrategyFactory();\n\n  /**\n   * The y-offset of the overlay panel in relation to the trigger's top start corner.\n   * This must be adjusted to align the selected option text over the trigger text.\n   * when the panel opens. Will change based on the y-position of the selected option.\n   */\n  _offsetY = 0;\n\n  /**\n   * This position config ensures that the top \"start\" corner of the overlay\n   * is aligned with with the top \"start\" of the origin by default (overlapping\n   * the trigger completely). If the panel cannot fit below the trigger, it\n   * will fall back to a position above the trigger.\n   */\n  _positions = [\n    {\n      originX: 'start',\n      originY: 'top',\n      overlayX: 'start',\n      overlayY: 'top',\n    },\n    {\n      originX: 'start',\n      originY: 'bottom',\n      overlayX: 'start',\n      overlayY: 'bottom',\n    },\n  ];\n\n  /** Whether the select is focused. */\n  focused: boolean = false;\n\n  /** A name for this control that can be used by `mat-form-field`. */\n  controlType = 'mat-select';\n\n  /** Trigger that opens the select. */\n  @ViewChild('trigger') trigger: ElementRef;\n\n  /** Panel containing the select options. */\n  @ViewChild('panel') panel: ElementRef;\n\n  /** Overlay pane containing the options. */\n  @ViewChild(CdkConnectedOverlay) overlayDir: CdkConnectedOverlay;\n\n  /** All of the defined select options. */\n  @ContentChildren(MatOption, { descendants: true }) options: QueryList<MatOption>;\n\n  /** All of the defined groups of options. */\n  @ContentChildren(MatOptgroup) optionGroups: QueryList<MatOptgroup>;\n\n  /** Classes to be passed to the select panel. Supports the same syntax as `ngClass`. */\n  @Input() panelClass: string|string[]|Set<string>|{[key: string]: any};\n\n  /** User-supplied override of the trigger element. */\n  @ContentChild(MatSelectTrigger) customTrigger: MatSelectTrigger;\n\n  /** Placeholder to be shown if no value has been selected. */\n  @Input()\n  get placeholder(): string { return this._placeholder; }\n  set placeholder(value: string) {\n    this._placeholder = value;\n    this.stateChanges.next();\n  }\n\n  /** Whether the component is required. */\n  @Input()\n  get required(): boolean { return this._required; }\n  set required(value: boolean) {\n    this._required = coerceBooleanProperty(value);\n    this.stateChanges.next();\n  }\n\n  /** Whether the user should be allowed to select multiple options. */\n  @Input()\n  get multiple(): boolean { return this._multiple; }\n  set multiple(value: boolean) {\n    if (this._selectionModel) {\n      throw getMatSelectDynamicMultipleError();\n    }\n\n    this._multiple = coerceBooleanProperty(value);\n  }\n\n  /**\n   * A function to compare the option values with the selected values. The first argument\n   * is a value from an option. The second is a value from the selection. A boolean\n   * should be returned.\n   */\n  @Input()\n  get compareWith() { return this._compareWith; }\n  set compareWith(fn: (o1: any, o2: any) => boolean) {\n    if (typeof fn !== 'function') {\n      throw getMatSelectNonFunctionValueError();\n    }\n    this._compareWith = fn;\n    if (this._selectionModel) {\n      // A different comparator means the selection could change.\n      this._initializeSelection();\n    }\n  }\n\n  /** Value of the select control. */\n  @Input()\n  get value(): any { return this._value; }\n  set value(newValue: any) {\n    if (newValue !== this._value) {\n      this.writeValue(newValue);\n      this._value = newValue;\n    }\n  }\n  private _value: any;\n\n  /** Aria label of the select. If not specified, the placeholder will be used as label. */\n  @Input('aria-label') ariaLabel: string = '';\n\n  /** Input that can be used to specify the `aria-labelledby` attribute. */\n  @Input('aria-labelledby') ariaLabelledby: string;\n\n  /** An object used to control when error messages are shown. */\n  @Input() errorStateMatcher: ErrorStateMatcher;\n\n  /** Unique id of the element. */\n  @Input()\n  get id(): string { return this._id; }\n  set id(value: string) {\n    this._id = value || this._uid;\n    this.stateChanges.next();\n  }\n  private _id: string;\n\n  /** Combined stream of all of the child options' change events. */\n  optionSelectionChanges: Observable<MatOptionSelectionChange> = defer(() => {\n    if (this.options) {\n      return merge(...this.options.map(option => option.onSelectionChange));\n    }\n\n    return this._ngZone.onStable\n      .asObservable()\n      .pipe(take(1), switchMap(() => this.optionSelectionChanges));\n  });\n\n   /** Event emitted when the select has been opened. */\n   @Output() openedChange: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n   /** Event emitted when the select has been opened. */\n   @Output('opened')\n   get _openedStream(): Observable<void> {\n    return this.openedChange.pipe(filter(o => o), map(() => {}));\n  }\n\n  /** Event emitted when the select has been closed. */\n  @Output('closed')\n  get _closedStream(): Observable<void> {\n    return this.openedChange.pipe(filter(o => !o), map(() => {}));\n  }\n\n  /**\n   * Event emitted when the select has been opened.\n   * @deprecated Use `openedChange` instead.\n   */\n  @Output() onOpen: Observable<void> = this._openedStream;\n\n  /**\n   * Event emitted when the select has been closed.\n   * @deprecated Use `openedChange` instead.\n   */\n  @Output() onClose: Observable<void> = this._closedStream;\n\n   /** Event emitted when the selected value has been changed by the user. */\n  @Output() selectionChange: EventEmitter<MatSelectChange> = new EventEmitter<MatSelectChange>();\n\n  /**\n   * Event emitted when the selected value has been changed by the user.\n   * @deprecated Use `selectionChange` instead.\n   */\n  @Output() change: EventEmitter<MatSelectChange> = this.selectionChange;\n\n  /**\n   * Event that emits whenever the raw value of the select changes. This is here primarily\n   * to facilitate the two-way binding for the `value` input.\n   * @docs-private\n   */\n  @Output() valueChange: EventEmitter<any> = new EventEmitter<any>();\n\n  constructor(\n    private _viewportRuler: ViewportRuler,\n    private _changeDetectorRef: ChangeDetectorRef,\n    private _ngZone: NgZone,\n    _defaultErrorStateMatcher: ErrorStateMatcher,\n    elementRef: ElementRef,\n    @Optional() private _dir: Directionality,\n    @Optional() _parentForm: NgForm,\n    @Optional() _parentFormGroup: FormGroupDirective,\n    @Optional() private _parentFormField: MatFormField,\n    @Self() @Optional() public ngControl: NgControl,\n    @Attribute('tabindex') tabIndex: string,\n    @Inject(MAT_SELECT_SCROLL_STRATEGY) private _scrollStrategyFactory) {\n    super(elementRef, _defaultErrorStateMatcher, _parentForm,\n          _parentFormGroup, ngControl);\n\n    if (this.ngControl) {\n      // Note: we provide the value accessor through here, instead of\n      // the `providers` to avoid running into a circular import.\n      this.ngControl.valueAccessor = this;\n    }\n\n    this.tabIndex = parseInt(tabIndex) || 0;\n\n    // Force setter to be called in case id was not specified.\n    this.id = this.id;\n  }\n\n  ngOnInit() {\n    this._selectionModel = new SelectionModel<MatOption>(this.multiple, undefined, false);\n    this.stateChanges.next();\n  }\n\n  ngAfterContentInit() {\n    this._initKeyManager();\n\n    this.options.changes.pipe(startWith(null), takeUntil(this._destroy)).subscribe(() => {\n      this._resetOptions();\n      this._initializeSelection();\n    });\n  }\n\n  ngDoCheck() {\n    if (this.ngControl) {\n      this.updateErrorState();\n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    // Updating the disabled state is handled by `mixinDisabled`, but we need to additionally let\n    // the parent form field know to run change detection when the disabled state changes.\n    if (changes.disabled) {\n      this.stateChanges.next();\n    }\n  }\n\n  ngOnDestroy() {\n    this._destroy.next();\n    this._destroy.complete();\n    this.stateChanges.complete();\n  }\n\n  /** Toggles the overlay panel open or closed. */\n  toggle(): void {\n    this.panelOpen ? this.close() : this.open();\n  }\n\n  /** Opens the overlay panel. */\n  open(): void {\n    if (this.disabled || !this.options || !this.options.length) {\n      return;\n    }\n\n    this._triggerRect = this.trigger.nativeElement.getBoundingClientRect();\n    // Note: The computed font-size will be a string pixel value (e.g. \"16px\").\n    // `parseInt` ignores the trailing 'px' and converts this to a number.\n    this._triggerFontSize = parseInt(getComputedStyle(this.trigger.nativeElement)['font-size']);\n\n    this._panelOpen = true;\n    this._calculateOverlayPosition();\n    this._highlightCorrectOption();\n    this._changeDetectorRef.markForCheck();\n\n    // Set the font size on the panel element once it exists.\n    this._ngZone.onStable.asObservable().pipe(take(1)).subscribe(() => {\n      if (this._triggerFontSize && this.overlayDir.overlayRef &&\n          this.overlayDir.overlayRef.overlayElement) {\n        this.overlayDir.overlayRef.overlayElement.style.fontSize = `${this._triggerFontSize}px`;\n      }\n    });\n  }\n\n  /** Closes the overlay panel and focuses the host element. */\n  close(): void {\n    if (this._panelOpen) {\n      this._panelOpen = false;\n      this._changeDetectorRef.markForCheck();\n      this._onTouched();\n    }\n  }\n\n  /**\n   * Sets the select's value. Part of the ControlValueAccessor interface\n   * required to integrate with Angular's core forms API.\n   *\n   * @param value New value to be written to the model.\n   */\n  writeValue(value: any): void {\n    if (this.options) {\n      this._setSelectionByValue(value);\n    }\n  }\n\n  /**\n   * Saves a callback function to be invoked when the select's value\n   * changes from user input. Part of the ControlValueAccessor interface\n   * required to integrate with Angular's core forms API.\n   *\n   * @param fn Callback to be triggered when the value changes.\n   */\n  registerOnChange(fn: (value: any) => void): void {\n    this._onChange = fn;\n  }\n\n  /**\n   * Saves a callback function to be invoked when the select is blurred\n   * by the user. Part of the ControlValueAccessor interface required\n   * to integrate with Angular's core forms API.\n   *\n   * @param fn Callback to be triggered when the component has been touched.\n   */\n  registerOnTouched(fn: () => {}): void {\n    this._onTouched = fn;\n  }\n\n  /**\n   * Disables the select. Part of the ControlValueAccessor interface required\n   * to integrate with Angular's core forms API.\n   *\n   * @param isDisabled Sets whether the component is disabled.\n   */\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n    this._changeDetectorRef.markForCheck();\n    this.stateChanges.next();\n  }\n\n  /** Whether or not the overlay panel is open. */\n  get panelOpen(): boolean {\n    return this._panelOpen;\n  }\n\n  /** The currently selected option. */\n  get selected(): MatOption | MatOption[] {\n    return this.multiple ? this._selectionModel.selected : this._selectionModel.selected[0];\n  }\n\n  /** The value displayed in the trigger. */\n  get triggerValue(): string {\n    if (this.empty) {\n      return '';\n    }\n\n    if (this._multiple) {\n      const selectedOptions = this._selectionModel.selected.map(option => option.viewValue);\n\n      if (this._isRtl()) {\n        selectedOptions.reverse();\n      }\n\n      // TODO(crisbeto): delimiter should be configurable for proper localization.\n      return selectedOptions.join(', ');\n    }\n\n    return this._selectionModel.selected[0].viewValue;\n  }\n\n  /** Whether the element is in RTL mode. */\n  _isRtl(): boolean {\n    return this._dir ? this._dir.value === 'rtl' : false;\n  }\n\n  /** Handles all keydown events on the select. */\n  _handleKeydown(event: KeyboardEvent): void {\n    if (!this.disabled) {\n      this.panelOpen ? this._handleOpenKeydown(event) : this._handleClosedKeydown(event);\n    }\n  }\n\n  /** Handles keyboard events while the select is closed. */\n  private _handleClosedKeydown(event: KeyboardEvent): void {\n    const keyCode = event.keyCode;\n    const isArrowKey = keyCode === DOWN_ARROW || keyCode === UP_ARROW;\n    const isOpenKey = keyCode === ENTER || keyCode === SPACE;\n\n    if (isOpenKey || ((this.multiple || event.altKey) && isArrowKey)) {\n      event.preventDefault(); // prevents the page from scrolling down when pressing space\n      this.open();\n    } else if (!this.multiple) {\n      this._keyManager.onKeydown(event);\n    }\n  }\n\n  /** Handles keyboard events when the selected is open. */\n  private _handleOpenKeydown(event: KeyboardEvent): void {\n    const keyCode = event.keyCode;\n\n    if (keyCode === HOME || keyCode === END) {\n      event.preventDefault();\n      keyCode === HOME ? this._keyManager.setFirstItemActive() :\n                         this._keyManager.setLastItemActive();\n    } else if ((keyCode === ENTER || keyCode === SPACE) && this._keyManager.activeItem) {\n      event.preventDefault();\n      this._keyManager.activeItem._selectViaInteraction();\n    } else {\n      const isArrowKey = keyCode === DOWN_ARROW || keyCode === UP_ARROW;\n      const previouslyFocusedIndex = this._keyManager.activeItemIndex;\n\n      this._keyManager.onKeydown(event);\n\n      if (this._multiple && isArrowKey && event.shiftKey && this._keyManager.activeItem &&\n          this._keyManager.activeItemIndex !== previouslyFocusedIndex) {\n        this._keyManager.activeItem._selectViaInteraction();\n      }\n    }\n  }\n\n  /**\n   * When the panel element is finished transforming in (though not fading in), it\n   * emits an event and focuses an option if the panel is open.\n   */\n  _onPanelDone(): void {\n    if (this.panelOpen) {\n      this._scrollTop = 0;\n      this.openedChange.emit(true);\n    } else {\n      this.openedChange.emit(false);\n      this._panelDoneAnimating = false;\n      this.overlayDir.offsetX = 0;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  /**\n   * When the panel content is done fading in, the _panelDoneAnimating property is\n   * set so the proper class can be added to the panel.\n   */\n  _onFadeInDone(): void {\n    this._panelDoneAnimating = this.panelOpen;\n    this._changeDetectorRef.markForCheck();\n  }\n\n  _onFocus() {\n    if (!this.disabled) {\n      this.focused = true;\n      this.stateChanges.next();\n    }\n  }\n\n  /**\n   * Calls the touched callback only if the panel is closed. Otherwise, the trigger will\n   * \"blur\" to the panel when it opens, causing a false positive.\n   */\n  _onBlur() {\n    this.focused = false;\n\n    if (!this.disabled && !this.panelOpen) {\n      this._onTouched();\n      this._changeDetectorRef.markForCheck();\n      this.stateChanges.next();\n    }\n  }\n\n  /**\n   * Callback that is invoked when the overlay panel has been attached.\n   */\n  _onAttached(): void {\n    this.overlayDir.positionChange.pipe(take(1)).subscribe(() => {\n      this._changeDetectorRef.detectChanges();\n      this._calculateOverlayOffsetX();\n      this.panel.nativeElement.scrollTop = this._scrollTop;\n    });\n  }\n\n  /** Returns the theme to be used on the panel. */\n  _getPanelTheme(): string {\n    return this._parentFormField ? `mat-${this._parentFormField.color}` : '';\n  }\n\n  /** Whether the select has a value. */\n  get empty(): boolean {\n    return !this._selectionModel || this._selectionModel.isEmpty();\n  }\n\n  private _initializeSelection(): void {\n    // Defer setting the value in order to avoid the \"Expression\n    // has changed after it was checked\" errors from Angular.\n    Promise.resolve().then(() => {\n      this._setSelectionByValue(this.ngControl ? this.ngControl.value : this._value);\n    });\n  }\n\n  /**\n   * Sets the selected option based on a value. If no option can be\n   * found with the designated value, the select trigger is cleared.\n   */\n  private _setSelectionByValue(value: any | any[], isUserInput = false): void {\n    if (this.multiple && value) {\n      if (!Array.isArray(value)) {\n        throw getMatSelectNonArrayValueError();\n      }\n\n      this._clearSelection();\n      value.forEach((currentValue: any) => this._selectValue(currentValue, isUserInput));\n      this._sortValues();\n    } else {\n      this._clearSelection();\n\n      const correspondingOption = this._selectValue(value, isUserInput);\n\n      // Shift focus to the active item. Note that we shouldn't do this in multiple\n      // mode, because we don't know what option the user interacted with last.\n      if (correspondingOption) {\n        this._keyManager.setActiveItem(this.options.toArray().indexOf(correspondingOption));\n      }\n    }\n\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /**\n   * Finds and selects and option based on its value.\n   * @returns Option that has the corresponding value.\n   */\n  private _selectValue(value: any, isUserInput = false): MatOption | undefined {\n    const correspondingOption = this.options.find((option: MatOption) => {\n      try {\n        // Treat null as a special reset value.\n        return option.value != null && this._compareWith(option.value,  value);\n      } catch (error) {\n        if (isDevMode()) {\n          // Notify developers of errors in their comparator.\n          console.warn(error);\n        }\n        return false;\n      }\n    });\n\n    if (correspondingOption) {\n      isUserInput ? correspondingOption._selectViaInteraction() : correspondingOption.select();\n      this._selectionModel.select(correspondingOption);\n      this.stateChanges.next();\n    }\n\n    return correspondingOption;\n  }\n\n\n  /**\n   * Clears the select trigger and deselects every option in the list.\n   * @param skip Option that should not be deselected.\n   */\n  private _clearSelection(skip?: MatOption): void {\n    this._selectionModel.clear();\n    this.options.forEach(option => {\n      if (option !== skip) {\n        option.deselect();\n      }\n    });\n    this.stateChanges.next();\n  }\n\n  /** Sets up a key manager to listen to keyboard events on the overlay panel. */\n  private _initKeyManager() {\n    this._keyManager = new ActiveDescendantKeyManager<MatOption>(this.options).withTypeAhead();\n    this._keyManager.tabOut.pipe(takeUntil(this._destroy)).subscribe(() => this.close());\n\n    this._keyManager.change.pipe(takeUntil(this._destroy)).subscribe(() => {\n      if (this._panelOpen && this.panel) {\n        this._scrollActiveOptionIntoView();\n      } else if (!this._panelOpen && !this.multiple && this._keyManager.activeItem) {\n        this._keyManager.activeItem._selectViaInteraction();\n      }\n    });\n  }\n\n  /** Drops current option subscriptions and IDs and resets from scratch. */\n  private _resetOptions(): void {\n    this.optionSelectionChanges.pipe(\n      takeUntil(merge(this._destroy, this.options.changes)),\n      filter(event => event.isUserInput)\n    ).subscribe(event => {\n      this._onSelect(event.source);\n\n      if (!this.multiple && this._panelOpen) {\n        this.close();\n        this.focus();\n      }\n    });\n\n    this._setOptionIds();\n  }\n\n  /** Invoked when an option is clicked. */\n  private _onSelect(option: MatOption): void {\n    const wasSelected = this._selectionModel.isSelected(option);\n\n    // TODO(crisbeto): handle blank/null options inside multi-select.\n    if (this.multiple) {\n      this._selectionModel.toggle(option);\n      this.stateChanges.next();\n      wasSelected ? option.deselect() : option.select();\n      this._keyManager.setActiveItem(this._getOptionIndex(option)!);\n      this._sortValues();\n    } else {\n      this._clearSelection(option.value == null ? undefined : option);\n\n      if (option.value == null) {\n        this._propagateChanges(option.value);\n      } else {\n        this._selectionModel.select(option);\n        this.stateChanges.next();\n      }\n    }\n\n    if (wasSelected !== this._selectionModel.isSelected(option)) {\n      this._propagateChanges();\n    }\n  }\n\n  /**\n   * Sorts the model values, ensuring that they keep the same\n   * order that they have in the panel.\n   */\n  private _sortValues(): void {\n    if (this._multiple) {\n      this._selectionModel.clear();\n\n      this.options.forEach(option => {\n        if (option.selected) {\n          this._selectionModel.select(option);\n        }\n      });\n      this.stateChanges.next();\n    }\n  }\n\n  /** Emits change event to set the model value. */\n  private _propagateChanges(fallbackValue?: any): void {\n    let valueToEmit: any = null;\n\n    if (this.multiple) {\n      valueToEmit = (this.selected as MatOption[]).map(option => option.value);\n    } else {\n      valueToEmit = this.selected ? (this.selected as MatOption).value : fallbackValue;\n    }\n\n    this._value = valueToEmit;\n    this.valueChange.emit(valueToEmit);\n    this._onChange(valueToEmit);\n    this.selectionChange.emit(new MatSelectChange(this, valueToEmit));\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Records option IDs to pass to the aria-owns property. */\n  private _setOptionIds() {\n    this._optionIds = this.options.map(option => option.id).join(' ');\n  }\n\n  /**\n   * Highlights the selected item. If no option is selected, it will highlight\n   * the first item instead.\n   */\n  private _highlightCorrectOption(): void {\n    if (this._keyManager) {\n      if (this.empty) {\n        this._keyManager.setFirstItemActive();\n      } else {\n        this._keyManager.setActiveItem(this._getOptionIndex(this._selectionModel.selected[0])!);\n      }\n    }\n  }\n\n  /** Scrolls the active option into view. */\n  private _scrollActiveOptionIntoView(): void {\n    const itemHeight = this._getItemHeight();\n    const activeOptionIndex = this._keyManager.activeItemIndex || 0;\n    const labelCount = MatOption.countGroupLabelsBeforeOption(activeOptionIndex,\n        this.options, this.optionGroups);\n    const scrollOffset = (activeOptionIndex + labelCount) * itemHeight;\n    const panelTop = this.panel.nativeElement.scrollTop;\n\n    if (scrollOffset < panelTop) {\n      this.panel.nativeElement.scrollTop = scrollOffset;\n    } else if (scrollOffset + itemHeight > panelTop + SELECT_PANEL_MAX_HEIGHT) {\n      this.panel.nativeElement.scrollTop =\n          Math.max(0, scrollOffset - SELECT_PANEL_MAX_HEIGHT + itemHeight);\n    }\n  }\n\n  /** Focuses the select element. */\n  focus(): void {\n    this._elementRef.nativeElement.focus();\n  }\n\n  /** Gets the index of the provided option in the option list. */\n  private _getOptionIndex(option: MatOption): number | undefined {\n    return this.options.reduce((result: number, current: MatOption, index: number) => {\n      return result === undefined ? (option === current ? index : undefined) : result;\n    }, undefined);\n  }\n\n  /** Calculates the scroll position and x- and y-offsets of the overlay panel. */\n  private _calculateOverlayPosition(): void {\n    const itemHeight = this._getItemHeight();\n    const items = this._getItemCount();\n    const panelHeight = Math.min(items * itemHeight, SELECT_PANEL_MAX_HEIGHT);\n    const scrollContainerHeight = items * itemHeight;\n\n    // The farthest the panel can be scrolled before it hits the bottom\n    const maxScroll = scrollContainerHeight - panelHeight;\n\n    // If no value is selected we open the popup to the first item.\n    let selectedOptionOffset =\n        this.empty ? 0 : this._getOptionIndex(this._selectionModel.selected[0])!;\n\n    selectedOptionOffset += MatOption.countGroupLabelsBeforeOption(selectedOptionOffset,\n        this.options, this.optionGroups);\n\n    // We must maintain a scroll buffer so the selected option will be scrolled to the\n    // center of the overlay panel rather than the top.\n    const scrollBuffer = panelHeight / 2;\n    this._scrollTop = this._calculateOverlayScroll(selectedOptionOffset, scrollBuffer, maxScroll);\n    this._offsetY = this._calculateOverlayOffsetY(selectedOptionOffset, scrollBuffer, maxScroll);\n\n    this._checkOverlayWithinViewport(maxScroll);\n  }\n\n  /**\n   * Calculates the scroll position of the select's overlay panel.\n   *\n   * Attempts to center the selected option in the panel. If the option is\n   * too high or too low in the panel to be scrolled to the center, it clamps the\n   * scroll position to the min or max scroll positions respectively.\n   */\n  _calculateOverlayScroll(selectedIndex: number, scrollBuffer: number,\n                          maxScroll: number): number {\n    const itemHeight = this._getItemHeight();\n    const optionOffsetFromScrollTop = itemHeight * selectedIndex;\n    const halfOptionHeight = itemHeight / 2;\n\n    // Starts at the optionOffsetFromScrollTop, which scrolls the option to the top of the\n    // scroll container, then subtracts the scroll buffer to scroll the option down to\n    // the center of the overlay panel. Half the option height must be re-added to the\n    // scrollTop so the option is centered based on its middle, not its top edge.\n    const optimalScrollPosition = optionOffsetFromScrollTop - scrollBuffer + halfOptionHeight;\n    return Math.min(Math.max(0, optimalScrollPosition), maxScroll);\n  }\n\n  /** Returns the aria-label of the select component. */\n  get _ariaLabel(): string | null {\n    // If an ariaLabelledby value has been set, the select should not overwrite the\n    // `aria-labelledby` value by setting the ariaLabel to the placeholder.\n    return this.ariaLabelledby ? null : this.ariaLabel || this.placeholder;\n  }\n\n  /** Determines the `aria-activedescendant` to be set on the host. */\n  _getAriaActiveDescendant(): string | null {\n    if (this.panelOpen && this._keyManager && this._keyManager.activeItem) {\n      return this._keyManager.activeItem.id;\n    }\n\n    return null;\n  }\n\n  /**\n   * Sets the x-offset of the overlay panel in relation to the trigger's top start corner.\n   * This must be adjusted to align the selected option text over the trigger text when\n   * the panel opens. Will change based on LTR or RTL text direction. Note that the offset\n   * can't be calculated until the panel has been attached, because we need to know the\n   * content width in order to constrain the panel within the viewport.\n   */\n  private _calculateOverlayOffsetX(): void {\n    const overlayRect = this.overlayDir.overlayRef.overlayElement.getBoundingClientRect();\n    const viewportSize = this._viewportRuler.getViewportSize();\n    const isRtl = this._isRtl();\n    const paddingWidth = this.multiple ? SELECT_MULTIPLE_PANEL_PADDING_X + SELECT_PANEL_PADDING_X :\n                                         SELECT_PANEL_PADDING_X * 2;\n    let offsetX: number;\n\n    // Adjust the offset, depending on the option padding.\n    if (this.multiple) {\n      offsetX = SELECT_MULTIPLE_PANEL_PADDING_X;\n    } else {\n      let selected = this._selectionModel.selected[0] || this.options.first;\n      offsetX = selected && selected.group ? SELECT_PANEL_INDENT_PADDING_X : SELECT_PANEL_PADDING_X;\n    }\n\n    // Invert the offset in LTR.\n    if (!isRtl) {\n      offsetX *= -1;\n    }\n\n    // Determine how much the select overflows on each side.\n    const leftOverflow = 0 - (overlayRect.left + offsetX - (isRtl ? paddingWidth : 0));\n    const rightOverflow = overlayRect.right + offsetX - viewportSize.width\n                          + (isRtl ? 0 : paddingWidth);\n\n    // If the element overflows on either side, reduce the offset to allow it to fit.\n    if (leftOverflow > 0) {\n      offsetX += leftOverflow + SELECT_PANEL_VIEWPORT_PADDING;\n    } else if (rightOverflow > 0) {\n      offsetX -= rightOverflow + SELECT_PANEL_VIEWPORT_PADDING;\n    }\n\n    // Set the offset directly in order to avoid having to go through change detection and\n    // potentially triggering \"changed after it was checked\" errors.\n    this.overlayDir.offsetX = offsetX;\n    this.overlayDir.overlayRef.updatePosition();\n  }\n\n  /**\n   * Calculates the y-offset of the select's overlay panel in relation to the\n   * top start corner of the trigger. It has to be adjusted in order for the\n   * selected option to be aligned over the trigger when the panel opens.\n   */\n  private _calculateOverlayOffsetY(selectedIndex: number, scrollBuffer: number,\n                                  maxScroll: number): number {\n    const itemHeight = this._getItemHeight();\n    const optionHeightAdjustment = (itemHeight - this._triggerRect.height) / 2;\n    const maxOptionsDisplayed = Math.floor(SELECT_PANEL_MAX_HEIGHT / itemHeight);\n    let optionOffsetFromPanelTop: number;\n\n    if (this._scrollTop === 0) {\n      optionOffsetFromPanelTop = selectedIndex * itemHeight;\n    } else if (this._scrollTop === maxScroll) {\n      const firstDisplayedIndex = this._getItemCount() - maxOptionsDisplayed;\n      const selectedDisplayIndex = selectedIndex - firstDisplayedIndex;\n\n      // The first item is partially out of the viewport. Therefore we need to calculate what\n      // portion of it is shown in the viewport and account for it in our offset.\n      let partialItemHeight =\n          itemHeight - (this._getItemCount() * itemHeight - SELECT_PANEL_MAX_HEIGHT) % itemHeight;\n\n      // Because the panel height is longer than the height of the options alone,\n      // there is always extra padding at the top or bottom of the panel. When\n      // scrolled to the very bottom, this padding is at the top of the panel and\n      // must be added to the offset.\n      optionOffsetFromPanelTop = selectedDisplayIndex * itemHeight + partialItemHeight;\n    } else {\n      // If the option was scrolled to the middle of the panel using a scroll buffer,\n      // its offset will be the scroll buffer minus the half height that was added to\n      // center it.\n      optionOffsetFromPanelTop = scrollBuffer - itemHeight / 2;\n    }\n\n    // The final offset is the option's offset from the top, adjusted for the height\n    // difference, multiplied by -1 to ensure that the overlay moves in the correct\n    // direction up the page.\n    return optionOffsetFromPanelTop * -1 - optionHeightAdjustment;\n  }\n\n  /**\n   * Checks that the attempted overlay position will fit within the viewport.\n   * If it will not fit, tries to adjust the scroll position and the associated\n   * y-offset so the panel can open fully on-screen. If it still won't fit,\n   * sets the offset back to 0 to allow the fallback position to take over.\n   */\n  private _checkOverlayWithinViewport(maxScroll: number): void {\n    const itemHeight = this._getItemHeight();\n    const viewportSize = this._viewportRuler.getViewportSize();\n\n    const topSpaceAvailable = this._triggerRect.top - SELECT_PANEL_VIEWPORT_PADDING;\n    const bottomSpaceAvailable =\n        viewportSize.height - this._triggerRect.bottom - SELECT_PANEL_VIEWPORT_PADDING;\n\n    const panelHeightTop = Math.abs(this._offsetY);\n    const totalPanelHeight =\n        Math.min(this._getItemCount() * itemHeight, SELECT_PANEL_MAX_HEIGHT);\n    const panelHeightBottom = totalPanelHeight - panelHeightTop - this._triggerRect.height;\n\n    if (panelHeightBottom > bottomSpaceAvailable) {\n      this._adjustPanelUp(panelHeightBottom, bottomSpaceAvailable);\n    } else if (panelHeightTop > topSpaceAvailable) {\n     this._adjustPanelDown(panelHeightTop, topSpaceAvailable, maxScroll);\n    } else {\n      this._transformOrigin = this._getOriginBasedOnOption();\n    }\n  }\n\n  /** Adjusts the overlay panel up to fit in the viewport. */\n  private _adjustPanelUp(panelHeightBottom: number, bottomSpaceAvailable: number) {\n    // Browsers ignore fractional scroll offsets, so we need to round.\n    const distanceBelowViewport = Math.round(panelHeightBottom - bottomSpaceAvailable);\n\n    // Scrolls the panel up by the distance it was extending past the boundary, then\n    // adjusts the offset by that amount to move the panel up into the viewport.\n    this._scrollTop -= distanceBelowViewport;\n    this._offsetY -= distanceBelowViewport;\n    this._transformOrigin = this._getOriginBasedOnOption();\n\n    // If the panel is scrolled to the very top, it won't be able to fit the panel\n    // by scrolling, so set the offset to 0 to allow the fallback position to take\n    // effect.\n    if (this._scrollTop <= 0) {\n      this._scrollTop = 0;\n      this._offsetY = 0;\n      this._transformOrigin = `50% bottom 0px`;\n    }\n  }\n\n  /** Adjusts the overlay panel down to fit in the viewport. */\n  private _adjustPanelDown(panelHeightTop: number, topSpaceAvailable: number,\n                           maxScroll: number) {\n    // Browsers ignore fractional scroll offsets, so we need to round.\n    const distanceAboveViewport = Math.round(panelHeightTop - topSpaceAvailable);\n\n    // Scrolls the panel down by the distance it was extending past the boundary, then\n    // adjusts the offset by that amount to move the panel down into the viewport.\n    this._scrollTop += distanceAboveViewport;\n    this._offsetY += distanceAboveViewport;\n    this._transformOrigin = this._getOriginBasedOnOption();\n\n    // If the panel is scrolled to the very bottom, it won't be able to fit the\n    // panel by scrolling, so set the offset to 0 to allow the fallback position\n    // to take effect.\n    if (this._scrollTop >= maxScroll) {\n      this._scrollTop = maxScroll;\n      this._offsetY = 0;\n      this._transformOrigin = `50% top 0px`;\n      return;\n    }\n  }\n\n  /** Sets the transform origin point based on the selected option. */\n  private _getOriginBasedOnOption(): string {\n    const itemHeight = this._getItemHeight();\n    const optionHeightAdjustment = (itemHeight - this._triggerRect.height) / 2;\n    const originY = Math.abs(this._offsetY) - optionHeightAdjustment + itemHeight / 2;\n    return `50% ${originY}px 0px`;\n  }\n\n  /** Calculates the amount of items in the select. This includes options and group labels. */\n  private _getItemCount(): number {\n    return this.options.length + this.optionGroups.length;\n  }\n\n  /** Calculates the height of the select's options. */\n  private _getItemHeight(): number {\n    return this._triggerFontSize * SELECT_ITEM_HEIGHT_EM;\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  setDescribedByIds(ids: string[]) {\n    this._ariaDescribedby = ids.join(' ');\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  onContainerClick() {\n    this.focus();\n    this.open();\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  get shouldPlaceholderFloat(): boolean {\n    return this._panelOpen || !this.empty;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {AnimationEvent} from '@angular/animations';\nimport {AriaDescriber, FocusMonitor} from '@angular/cdk/a11y';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {ESCAPE} from '@angular/cdk/keycodes';\nimport {\n  ConnectionPositionPair,\n  HorizontalConnectionPos,\n  OriginConnectionPosition,\n  Overlay,\n  OverlayConfig,\n  OverlayConnectionPosition,\n  OverlayRef,\n  RepositionScrollStrategy,\n  ScrollStrategy,\n  VerticalConnectionPos,\n} from '@angular/cdk/overlay';\nimport {Platform} from '@angular/cdk/platform';\nimport {ComponentPortal} from '@angular/cdk/portal';\nimport {take} from 'rxjs/operators/take';\nimport {merge} from 'rxjs/observable/merge';\nimport {ScrollDispatcher} from '@angular/cdk/scrolling';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  Directive,\n  ElementRef,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  ViewContainerRef,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {Observable} from 'rxjs/Observable';\nimport {Subject} from 'rxjs/Subject';\nimport {matTooltipAnimations} from './tooltip-animations';\n\n\nexport type TooltipPosition = 'left' | 'right' | 'above' | 'below' | 'before' | 'after';\n\n/** Time in ms to throttle repositioning after scroll events. */\nexport const SCROLL_THROTTLE_MS = 20;\n\n/** CSS class that will be attached to the overlay panel. */\nexport const TOOLTIP_PANEL_CLASS = 'mat-tooltip-panel';\n\n/** Creates an error to be thrown if the user supplied an invalid tooltip position. */\nexport function getMatTooltipInvalidPositionError(position: string) {\n  return Error(`Tooltip position \"${position}\" is invalid.`);\n}\n\n/** Injection token that determines the scroll handling while a tooltip is visible. */\nexport const MAT_TOOLTIP_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mat-tooltip-scroll-strategy');\n\n/** @docs-private */\nexport function MAT_TOOLTIP_SCROLL_STRATEGY_PROVIDER_FACTORY(overlay: Overlay):\n    () => RepositionScrollStrategy {\n  return () => overlay.scrollStrategies.reposition({ scrollThrottle: SCROLL_THROTTLE_MS });\n}\n\n/** @docs-private */\nexport const MAT_TOOLTIP_SCROLL_STRATEGY_PROVIDER = {\n  provide: MAT_TOOLTIP_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_TOOLTIP_SCROLL_STRATEGY_PROVIDER_FACTORY\n};\n\n/** Default `matTooltip` options that can be overridden. */\nexport interface MatTooltipDefaultOptions {\n  showDelay: number;\n  hideDelay: number;\n  touchendHideDelay: number;\n}\n\n/** Injection token to be used to override the default options for `matTooltip`. */\nexport const MAT_TOOLTIP_DEFAULT_OPTIONS =\n    new InjectionToken<MatTooltipDefaultOptions>('mat-tooltip-default-options');\n\n/**\n * Directive that attaches a material design tooltip to the host element. Animates the showing and\n * hiding of a tooltip provided position (defaults to below the element).\n *\n * https://material.google.com/components/tooltips.html\n */\n@Directive({\n  selector: '[matTooltip]',\n  exportAs: 'matTooltip',\n  host: {\n    '(longpress)': 'show()',\n    '(keydown)': '_handleKeydown($event)',\n    '(touchend)': '_handleTouchend()',\n  },\n})\nexport class MatTooltip implements OnDestroy {\n  _overlayRef: OverlayRef | null;\n  _tooltipInstance: TooltipComponent | null;\n\n  private _position: TooltipPosition = 'below';\n  private _disabled: boolean = false;\n  private _tooltipClass: string|string[]|Set<string>|{[key: string]: any};\n\n  /** Allows the user to define the position of the tooltip relative to the parent element */\n  @Input('matTooltipPosition')\n  get position(): TooltipPosition { return this._position; }\n  set position(value: TooltipPosition) {\n    if (value !== this._position) {\n      this._position = value;\n\n      // TODO(andrewjs): When the overlay's position can be dynamically changed, do not destroy\n      // the tooltip.\n      if (this._tooltipInstance) {\n        this._disposeTooltip();\n      }\n    }\n  }\n\n  /** Disables the display of the tooltip. */\n  @Input('matTooltipDisabled')\n  get disabled(): boolean { return this._disabled; }\n  set disabled(value) {\n    this._disabled = coerceBooleanProperty(value);\n\n    // If tooltip is disabled, hide immediately.\n    if (this._disabled) {\n      this.hide(0);\n    }\n  }\n\n  /** @deprecated */\n  @Input('tooltip-position')\n  get _positionDeprecated(): TooltipPosition { return this._position; }\n  set _positionDeprecated(value: TooltipPosition) { this._position = value; }\n\n  /** The default delay in ms before showing the tooltip after show is called */\n  @Input('matTooltipShowDelay') showDelay =\n      this._defaultOptions ? this._defaultOptions.showDelay : 0;\n\n  /** The default delay in ms before hiding the tooltip after hide is called */\n  @Input('matTooltipHideDelay') hideDelay =\n      this._defaultOptions ? this._defaultOptions.hideDelay : 0;\n\n  private _message = '';\n\n  /** The message to be displayed in the tooltip */\n  @Input('matTooltip')\n  get message() { return this._message; }\n  set message(value: string) {\n    this._ariaDescriber.removeDescription(this._elementRef.nativeElement, this._message);\n\n    // If the message is not a string (e.g. number), convert it to a string and trim it.\n    this._message = value != null ? `${value}`.trim() : '';\n\n    if (!this._message && this._isTooltipVisible()) {\n      this.hide(0);\n    } else {\n      this._updateTooltipMessage();\n      this._ariaDescriber.describe(this._elementRef.nativeElement, this.message);\n    }\n  }\n\n  /** Classes to be passed to the tooltip. Supports the same syntax as `ngClass`. */\n  @Input('matTooltipClass')\n  get tooltipClass() { return this._tooltipClass; }\n  set tooltipClass(value: string|string[]|Set<string>|{[key: string]: any}) {\n    this._tooltipClass = value;\n    if (this._tooltipInstance) {\n      this._setTooltipClass(this._tooltipClass);\n    }\n  }\n\n  private _manualListeners = new Map<string, Function>();\n\n  constructor(\n    private _overlay: Overlay,\n    private _elementRef: ElementRef,\n    private _scrollDispatcher: ScrollDispatcher,\n    private _viewContainerRef: ViewContainerRef,\n    private _ngZone: NgZone,\n    private _platform: Platform,\n    private _ariaDescriber: AriaDescriber,\n    private _focusMonitor: FocusMonitor,\n    @Inject(MAT_TOOLTIP_SCROLL_STRATEGY) private _scrollStrategy,\n    @Optional() private _dir: Directionality,\n    @Optional() @Inject(MAT_TOOLTIP_DEFAULT_OPTIONS)\n      private _defaultOptions?: MatTooltipDefaultOptions) {\n\n    // TODO(crisbeto): make the `_defaultOptions` a required param next time we do breaking changes.\n\n    const element: HTMLElement = _elementRef.nativeElement;\n\n    // The mouse events shouldn't be bound on iOS devices, because\n    // they can prevent the first tap from firing its click event.\n    if (!_platform.IOS) {\n      this._manualListeners.set('mouseenter', () => this.show());\n      this._manualListeners.set('mouseleave', () => this.hide());\n\n      this._manualListeners\n        .forEach((listener, event) => _elementRef.nativeElement.addEventListener(event, listener));\n    } else if (element.nodeName === 'INPUT' || element.nodeName === 'TEXTAREA') {\n      // When we bind a gesture event on an element (in this case `longpress`), HammerJS\n      // will add some inline styles by default, including `user-select: none`. This is\n      // problematic on iOS, because it will prevent users from typing in inputs. If\n      // we're on iOS and the tooltip is attached on an input or textarea, we clear\n      // the `user-select` to avoid these issues.\n      element.style.webkitUserSelect = element.style.userSelect = '';\n    }\n\n    _focusMonitor.monitor(element).subscribe(origin => {\n      // Note that the focus monitor runs outside the Angular zone.\n      if (!origin) {\n        _ngZone.run(() => this.hide(0));\n      } else if (origin !== 'program') {\n        _ngZone.run(() => this.show());\n      }\n    });\n  }\n\n  /**\n   * Dispose the tooltip when destroyed.\n   */\n  ngOnDestroy() {\n    if (this._tooltipInstance) {\n      this._disposeTooltip();\n    }\n\n    // Clean up the event listeners set in the constructor\n    if (!this._platform.IOS) {\n      this._manualListeners.forEach((listener, event) => {\n        this._elementRef.nativeElement.removeEventListener(event, listener);\n      });\n\n      this._manualListeners.clear();\n    }\n\n    this._ariaDescriber.removeDescription(this._elementRef.nativeElement, this.message);\n    this._focusMonitor.stopMonitoring(this._elementRef.nativeElement);\n  }\n\n  /** Shows the tooltip after the delay in ms, defaults to tooltip-delay-show or 0ms if no input */\n  show(delay: number = this.showDelay): void {\n    if (this.disabled || !this.message) { return; }\n\n    if (!this._tooltipInstance) {\n      this._createTooltip();\n    }\n\n    this._setTooltipClass(this._tooltipClass);\n    this._updateTooltipMessage();\n    this._tooltipInstance!.show(this._position, delay);\n  }\n\n  /** Hides the tooltip after the delay in ms, defaults to tooltip-delay-hide or 0ms if no input */\n  hide(delay: number = this.hideDelay): void {\n    if (this._tooltipInstance) {\n      this._tooltipInstance.hide(delay);\n    }\n  }\n\n  /** Shows/hides the tooltip */\n  toggle(): void {\n    this._isTooltipVisible() ? this.hide() : this.show();\n  }\n\n  /** Returns true if the tooltip is currently visible to the user */\n  _isTooltipVisible(): boolean {\n    return !!this._tooltipInstance && this._tooltipInstance.isVisible();\n  }\n\n  /** Handles the keydown events on the host element. */\n  _handleKeydown(e: KeyboardEvent) {\n    if (this._isTooltipVisible() && e.keyCode === ESCAPE) {\n      e.stopPropagation();\n      this.hide(0);\n    }\n  }\n\n  /** Handles the touchend events on the host element. */\n  _handleTouchend() {\n    this.hide(this._defaultOptions ? this._defaultOptions.touchendHideDelay : 1500);\n  }\n\n  /** Create the tooltip to display */\n  private _createTooltip(): void {\n    const overlayRef = this._createOverlay();\n    const portal = new ComponentPortal(TooltipComponent, this._viewContainerRef);\n\n    this._tooltipInstance = overlayRef.attach(portal).instance;\n\n    // Dispose of the tooltip when the overlay is detached.\n    merge(this._tooltipInstance!.afterHidden(), overlayRef.detachments()).subscribe(() => {\n      // Check first if the tooltip has already been removed through this components destroy.\n      if (this._tooltipInstance) {\n        this._disposeTooltip();\n      }\n    });\n  }\n\n  /** Create the overlay config and position strategy */\n  private _createOverlay(): OverlayRef {\n    const origin = this._getOrigin();\n    const overlay = this._getOverlayPosition();\n\n    // Create connected position strategy that listens for scroll events to reposition.\n    const strategy = this._overlay\n      .position()\n      .connectedTo(this._elementRef, origin.main, overlay.main)\n      .withFallbackPosition(origin.fallback, overlay.fallback);\n\n    const scrollableAncestors = this._scrollDispatcher\n      .getAncestorScrollContainers(this._elementRef);\n\n    strategy.withScrollableContainers(scrollableAncestors);\n\n    strategy.onPositionChange.subscribe(change => {\n      if (this._tooltipInstance) {\n        if (change.scrollableViewProperties.isOverlayClipped && this._tooltipInstance.isVisible()) {\n          // After position changes occur and the overlay is clipped by\n          // a parent scrollable then close the tooltip.\n          this._ngZone.run(() => this.hide(0));\n        } else {\n          // Otherwise recalculate the origin based on the new position.\n          this._tooltipInstance._setTransformOrigin(change.connectionPair);\n        }\n      }\n    });\n\n    const config = new OverlayConfig({\n      direction: this._dir ? this._dir.value : 'ltr',\n      positionStrategy: strategy,\n      panelClass: TOOLTIP_PANEL_CLASS,\n      scrollStrategy: this._scrollStrategy()\n    });\n\n    this._overlayRef = this._overlay.create(config);\n\n    return this._overlayRef;\n  }\n\n  /** Disposes the current tooltip and the overlay it is attached to */\n  private _disposeTooltip(): void {\n    if (this._overlayRef) {\n      this._overlayRef.dispose();\n      this._overlayRef = null;\n    }\n\n    this._tooltipInstance = null;\n  }\n\n  /**\n   * Returns the origin position and a fallback position based on the user's position preference.\n   * The fallback position is the inverse of the origin (e.g. 'below' -> 'above').\n   */\n  _getOrigin(): {main: OriginConnectionPosition, fallback: OriginConnectionPosition} {\n    const isDirectionLtr = !this._dir || this._dir.value == 'ltr';\n    let position: OriginConnectionPosition;\n\n    if (this.position == 'above' || this.position == 'below') {\n      position = {originX: 'center', originY: this.position == 'above' ? 'top' : 'bottom'};\n    } else if (this.position == 'left' ||\n               this.position == 'before' && isDirectionLtr ||\n               this.position == 'after' && !isDirectionLtr) {\n      position = {originX: 'start', originY: 'center'};\n    } else if (this.position == 'right' ||\n               this.position == 'after' && isDirectionLtr ||\n               this.position == 'before' && !isDirectionLtr) {\n      position = {originX: 'end', originY: 'center'};\n    } else {\n      throw getMatTooltipInvalidPositionError(this.position);\n    }\n\n    const {x, y} = this._invertPosition(position.originX, position.originY);\n\n    return {\n      main: position,\n      fallback: {originX: x, originY: y}\n    };\n  }\n\n  /** Returns the overlay position and a fallback position based on the user's preference */\n  _getOverlayPosition(): {main: OverlayConnectionPosition, fallback: OverlayConnectionPosition} {\n    const isLtr = !this._dir || this._dir.value == 'ltr';\n    let position: OverlayConnectionPosition;\n\n    if (this.position == 'above') {\n      position = {overlayX: 'center', overlayY: 'bottom'};\n    } else if (this.position == 'below') {\n      position = {overlayX: 'center', overlayY: 'top'};\n    } else if (this.position == 'left' ||\n               this.position == 'before' && isLtr ||\n               this.position == 'after' && !isLtr) {\n      position = {overlayX: 'end', overlayY: 'center'};\n    } else if (this.position == 'right' ||\n               this.position == 'after' && isLtr ||\n               this.position == 'before' && !isLtr) {\n      position = {overlayX: 'start', overlayY: 'center'};\n    } else {\n      throw getMatTooltipInvalidPositionError(this.position);\n    }\n\n    const {x, y} = this._invertPosition(position.overlayX, position.overlayY);\n\n    return {\n      main: position,\n      fallback: {overlayX: x, overlayY: y}\n    };\n  }\n\n  /** Updates the tooltip message and repositions the overlay according to the new message length */\n  private _updateTooltipMessage() {\n    // Must wait for the message to be painted to the tooltip so that the overlay can properly\n    // calculate the correct positioning based on the size of the text.\n    if (this._tooltipInstance) {\n      this._tooltipInstance.message = this.message;\n      this._tooltipInstance._markForCheck();\n\n      this._ngZone.onMicrotaskEmpty.asObservable().pipe(take(1)).subscribe(() => {\n        if (this._tooltipInstance) {\n          this._overlayRef!.updatePosition();\n        }\n      });\n    }\n  }\n\n  /** Updates the tooltip class */\n  private _setTooltipClass(tooltipClass: string|string[]|Set<string>|{[key: string]: any}) {\n    if (this._tooltipInstance) {\n      this._tooltipInstance.tooltipClass = tooltipClass;\n      this._tooltipInstance._markForCheck();\n    }\n  }\n\n  /** Inverts an overlay position. */\n  private _invertPosition(x: HorizontalConnectionPos, y: VerticalConnectionPos) {\n    if (this.position === 'above' || this.position === 'below') {\n      if (y === 'top') {\n        y = 'bottom';\n      } else if (y === 'bottom') {\n        y = 'top';\n      }\n    } else {\n      if (x === 'end') {\n        x = 'start';\n      } else if (x === 'start') {\n        x = 'end';\n      }\n    }\n\n    return {x, y};\n  }\n}\n\nexport type TooltipVisibility = 'initial' | 'visible' | 'hidden';\n\n/**\n * Internal component that wraps the tooltip's content.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-tooltip-component',\n  templateUrl: 'tooltip.html',\n  styleUrls: ['tooltip.css'],\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  animations: [matTooltipAnimations.tooltipState],\n  host: {\n    // Forces the element to have a layout in IE and Edge. This fixes issues where the element\n    // won't be rendered if the animations are disabled or there is no web animations polyfill.\n    '[style.zoom]': '_visibility === \"visible\" ? 1 : null',\n    '(body:click)': 'this._handleBodyInteraction()',\n    'aria-hidden': 'true',\n  }\n})\nexport class TooltipComponent {\n  /** Message to display in the tooltip */\n  message: string;\n\n  /** Classes to be added to the tooltip. Supports the same syntax as `ngClass`. */\n  tooltipClass: string|string[]|Set<string>|{[key: string]: any};\n\n  /** The timeout ID of any current timer set to show the tooltip */\n  _showTimeoutId: number;\n\n  /** The timeout ID of any current timer set to hide the tooltip */\n  _hideTimeoutId: number;\n\n  /** Property watched by the animation framework to show or hide the tooltip */\n  _visibility: TooltipVisibility = 'initial';\n\n  /** Whether interactions on the page should close the tooltip */\n  private _closeOnInteraction: boolean = false;\n\n  /** The transform origin used in the animation for showing and hiding the tooltip */\n  _transformOrigin: 'top' | 'bottom' | 'left' | 'right' = 'bottom';\n\n  /** Current position of the tooltip. */\n  private _position: TooltipPosition;\n\n  /** Subject for notifying that the tooltip has been hidden from the view */\n  private _onHide: Subject<any> = new Subject();\n\n  constructor(private _changeDetectorRef: ChangeDetectorRef) {}\n\n  /**\n   * Shows the tooltip with an animation originating from the provided origin\n   * @param position Position of the tooltip.\n   * @param delay Amount of milliseconds to the delay showing the tooltip.\n   */\n  show(position: TooltipPosition, delay: number): void {\n    // Cancel the delayed hide if it is scheduled\n    if (this._hideTimeoutId) {\n      clearTimeout(this._hideTimeoutId);\n    }\n\n    // Body interactions should cancel the tooltip if there is a delay in showing.\n    this._closeOnInteraction = true;\n    this._position = position;\n    this._showTimeoutId = setTimeout(() => {\n      this._visibility = 'visible';\n\n      // Mark for check so if any parent component has set the\n      // ChangeDetectionStrategy to OnPush it will be checked anyways\n      this._markForCheck();\n    }, delay);\n  }\n\n  /**\n   * Begins the animation to hide the tooltip after the provided delay in ms.\n   * @param delay Amount of milliseconds to delay showing the tooltip.\n   */\n  hide(delay: number): void {\n    // Cancel the delayed show if it is scheduled\n    if (this._showTimeoutId) {\n      clearTimeout(this._showTimeoutId);\n    }\n\n    this._hideTimeoutId = setTimeout(() => {\n      this._visibility = 'hidden';\n\n      // Mark for check so if any parent component has set the\n      // ChangeDetectionStrategy to OnPush it will be checked anyways\n      this._markForCheck();\n    }, delay);\n  }\n\n  /** Returns an observable that notifies when the tooltip has been hidden from view. */\n  afterHidden(): Observable<void> {\n    return this._onHide.asObservable();\n  }\n\n  /** Whether the tooltip is being displayed. */\n  isVisible(): boolean {\n    return this._visibility === 'visible';\n  }\n\n  /** Sets the tooltip transform origin according to the position of the tooltip overlay. */\n  _setTransformOrigin(overlayPosition: ConnectionPositionPair) {\n    const axis = (this._position === 'above' || this._position === 'below') ? 'Y' : 'X';\n    const position = axis == 'X' ? overlayPosition.overlayX : overlayPosition.overlayY;\n\n    if (position === 'top' || position === 'bottom') {\n      this._transformOrigin = position;\n    } else if (position === 'start') {\n      this._transformOrigin = 'left';\n    } else if (position === 'end') {\n      this._transformOrigin = 'right';\n    } else {\n      throw getMatTooltipInvalidPositionError(this._position);\n    }\n  }\n\n  _animationStart() {\n    this._closeOnInteraction = false;\n  }\n\n  _animationDone(event: AnimationEvent): void {\n    const toState = event.toState as TooltipVisibility;\n\n    if (toState === 'hidden' && !this.isVisible()) {\n      this._onHide.next();\n    }\n\n    if (toState === 'visible' || toState === 'hidden') {\n      // Note: as of Angular 4.3, the animations module seems to fire the `start` callback before\n      // the end if animations are disabled. Make this call async to ensure that it still fires\n      // at the appropriate time.\n      Promise.resolve().then(() => this._closeOnInteraction = true);\n    }\n  }\n\n  /**\n   * Interactions on the HTML body should close the tooltip immediately as defined in the\n   * material design spec.\n   * https://material.google.com/components/tooltips.html#tooltips-interaction\n   */\n  _handleBodyInteraction(): void {\n    if (this._closeOnInteraction) {\n      this.hide(0);\n    }\n  }\n\n  /**\n   * Marks that the tooltip needs to be checked in the next change detection run.\n   * Mainly used for rendering the initial text before positioning a tooltip, which\n   * can be problematic in components with OnPush change detection.\n   */\n  _markForCheck(): void {\n    this._changeDetectorRef.markForCheck();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ChangeDetectionStrategy, Component, Directive, ViewEncapsulation} from '@angular/core';\nimport {\n  CDK_ROW_TEMPLATE,\n  CdkHeaderRow,\n  CdkHeaderRowDef,\n  CdkRow,\n  CdkRowDef,\n} from '@angular/cdk/table';\n\n/**\n * Header row definition for the mat-table.\n * Captures the header row's template and other header properties such as the columns to display.\n */\n@Directive({\n  selector: '[matHeaderRowDef]',\n  providers: [{provide: CdkHeaderRowDef, useExisting: MatHeaderRowDef}],\n  inputs: ['columns: matHeaderRowDef'],\n})\nexport class MatHeaderRowDef extends CdkHeaderRowDef { }\n\n/**\n * Data row definition for the mat-table.\n * Captures the header row's template and other row properties such as the columns to display and\n * a when predicate that describes when this row should be used.\n */\n@Directive({\n  selector: '[matRowDef]',\n  providers: [{provide: CdkRowDef, useExisting: MatRowDef}],\n  inputs: ['columns: matRowDefColumns', 'when: matRowDefWhen'],\n})\nexport class MatRowDef<T> extends CdkRowDef<T> {\n}\n\n/** Header template container that contains the cell outlet. Adds the right class and role. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-header-row',\n  template: CDK_ROW_TEMPLATE,\n  host: {\n    'class': 'mat-header-row',\n    'role': 'row',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matHeaderRow',\n  preserveWhitespaces: false,\n})\nexport class MatHeaderRow extends CdkHeaderRow { }\n\n/** Data row template container that contains the cell outlet. Adds the right class and role. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-row',\n  template: CDK_ROW_TEMPLATE,\n  host: {\n    'class': 'mat-row',\n    'role': 'row',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matRow',\n  preserveWhitespaces: false,\n})\nexport class MatRow extends CdkRow { }\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatTable} from './table';\nimport {CdkTableModule} from '@angular/cdk/table';\nimport {MatCell, MatCellDef, MatColumnDef, MatHeaderCell, MatHeaderCellDef} from './cell';\nimport {MatHeaderRow, MatHeaderRowDef, MatRow, MatRowDef} from './row';\nimport {CommonModule} from '@angular/common';\nimport {MatCommonModule} from '@angular/material/core';\n\n@NgModule({\n  imports: [CdkTableModule, CommonModule, MatCommonModule],\n  exports: [MatTable, MatCellDef, MatHeaderCellDef, MatColumnDef,\n    MatHeaderCell, MatCell, MatHeaderRow, MatRow,\n    MatHeaderRowDef, MatRowDef],\n  declarations: [MatTable, MatCellDef, MatHeaderCellDef, MatColumnDef,\n    MatHeaderCell, MatCell, MatHeaderRow, MatRow,\n    MatHeaderRowDef, MatRowDef],\n})\nexport class MatTableModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {DataSource} from '@angular/cdk/table';\nimport {BehaviorSubject} from 'rxjs/BehaviorSubject';\nimport {MatPaginator} from '@angular/material/paginator';\nimport {MatSort} from '@angular/material/sort';\nimport {Subscription} from 'rxjs/Subscription';\nimport {combineLatest} from 'rxjs/operators/combineLatest';\nimport {map} from 'rxjs/operators/map';\nimport {startWith} from 'rxjs/operators/startWith';\nimport {empty} from 'rxjs/observable/empty';\n\n/**\n * Data source that accepts a client-side data array and includes native support of filtering,\n * sorting (using MatSort), and pagination (using MatPaginator).\n *\n * Allows for sort customization by overriding sortingDataAccessor, which defines how data\n * properties are accessed. Also allows for filter customization by overriding filterTermAccessor,\n * which defines how row data is converted to a string for filter matching.\n */\nexport class MatTableDataSource<T> implements DataSource<T> {\n  /** Stream that emits when a new data array is set on the data source. */\n  private _data: BehaviorSubject<T[]>;\n\n  /** Stream emitting render data to the table (depends on ordered data changes). */\n  private _renderData = new BehaviorSubject<T[]>([]);\n\n  /** Stream that emits when a new filter string is set on the data source. */\n  private _filter = new BehaviorSubject<string>('');\n\n  /**\n   * Subscription to the changes that should trigger an update to the table's rendered rows, such\n   * as filtering, sorting, pagination, or base data changes.\n   */\n  _renderChangesSubscription: Subscription;\n\n  /**\n   * The filtered set of data that has been matched by the filter string, or all the data if there\n   * is no filter. Useful for knowing the set of data the table represents.\n   * For example, a 'selectAll()' function would likely want to select the set of filtered data\n   * shown to the user rather than all the data.\n   */\n  filteredData: T[];\n\n  /** Array of data that should be rendered by the table, where each object represents one row. */\n  get data() { return this._data.value; }\n  set data(data: T[]) { this._data.next(data); }\n\n  /**\n   * Filter term that should be used to filter out objects from the data array. To override how\n   * data objects match to this filter string, provide a custom function for filterPredicate.\n   */\n  get filter(): string { return this._filter.value; }\n  set filter(filter: string) { this._filter.next(filter); }\n\n  /**\n   * Instance of the MatSort directive used by the table to control its sorting. Sort changes\n   * emitted by the MatSort will trigger an update to the table's rendered data.\n   */\n  get sort(): MatSort | null { return this._sort; }\n  set sort(sort: MatSort|null) {\n    this._sort = sort;\n    this._updateChangeSubscription();\n  }\n  private _sort: MatSort|null;\n\n  /**\n   * Instance of the MatPaginator component used by the table to control what page of the data is\n   * displayed. Page changes emitted by the MatPaginator will trigger an update to the\n   * table's rendered data.\n   *\n   * Note that the data source uses the paginator's properties to calculate which page of data\n   * should be displayed. If the paginator receives its properties as template inputs,\n   * e.g. `[pageLength]=100` or `[pageIndex]=1`, then be sure that the paginator's view has been\n   * initialized before assigning it to this data source.\n   */\n  get paginator(): MatPaginator | null { return this._paginator; }\n  set paginator(paginator: MatPaginator|null) {\n    this._paginator = paginator;\n    this._updateChangeSubscription();\n  }\n  private _paginator: MatPaginator|null;\n\n  /**\n   * Data accessor function that is used for accessing data properties for sorting.\n   * This default function assumes that the sort header IDs (which defaults to the column name)\n   * matches the data's properties (e.g. column Xyz represents data['Xyz']).\n   * May be set to a custom function for different behavior.\n   * @param data Data object that is being accessed.\n   * @param sortHeaderId The name of the column that represents the data.\n   */\n  sortingDataAccessor: ((data: T, sortHeaderId: string) => string|number) =\n      (data: T, sortHeaderId: string): string|number => {\n    const value: any = data[sortHeaderId];\n\n    // If the value is a string and only whitespace, return the value.\n    // Otherwise +value will convert it to 0.\n    if (typeof value === 'string' && !value.trim()) {\n      return value;\n    }\n\n    return isNaN(+value) ? value : +value;\n  }\n\n  /**\n   * Checks if a data object matches the data source's filter string. By default, each data object\n   * is converted to a string of its properties and returns true if the filter has\n   * at least one occurrence in that string. By default, the filter string has its whitespace\n   * trimmed and the match is case-insensitive. May be overriden for a custom implementation of\n   * filter matching.\n   * @param data Data object used to check against the filter.\n   * @param filter Filter string that has been set on the data source.\n   * @returns Whether the filter matches against the data\n   */\n  filterPredicate: ((data: T, filter: string) => boolean) = (data: T, filter: string): boolean => {\n    // Transform the data into a lowercase string of all property values.\n    const accumulator = (currentTerm, key) => currentTerm + data[key];\n    const dataStr = Object.keys(data).reduce(accumulator, '').toLowerCase();\n\n    // Transform the filter by converting it to lowercase and removing whitespace.\n    const transformedFilter = filter.trim().toLowerCase();\n\n    return dataStr.indexOf(transformedFilter) != -1;\n  }\n\n  constructor(initialData: T[] = []) {\n    this._data = new BehaviorSubject<T[]>(initialData);\n    this._updateChangeSubscription();\n  }\n\n  /**\n   * Subscribe to changes that should trigger an update to the table's rendered rows. When the\n   * changes occur, process the current state of the filter, sort, and pagination along with\n   * the provided base data and send it to the table for rendering.\n   */\n  _updateChangeSubscription() {\n    // Sorting and/or pagination should be watched if MatSort and/or MatPaginator are provided.\n    // Otherwise, use an empty observable stream to take their place.\n    const sortChange = this._sort ? this._sort.sortChange : empty();\n    const pageChange = this._paginator ? this._paginator.page : empty();\n\n    if (this._renderChangesSubscription) {\n      this._renderChangesSubscription.unsubscribe();\n    }\n\n    // Watch for base data or filter changes to provide a filtered set of data.\n    this._renderChangesSubscription = this._data.pipe(\n      combineLatest(this._filter),\n      map(([data]) => this._filterData(data)),\n      // Watch for filtered data or sort changes to provide an ordered set of data.\n      combineLatest(sortChange.pipe(startWith(null!))),\n      map(([data]) => this._orderData(data)),\n      // Watch for ordered data or page changes to provide a paged set of data.\n      combineLatest(pageChange.pipe(startWith(null!))),\n      map(([data]) => this._pageData(data))\n    )\n    // Watched for paged data changes and send the result to the table to render.\n    .subscribe(data => this._renderData.next(data));\n  }\n\n  /**\n   * Returns a filtered data array where each filter object contains the filter string within\n   * the result of the filterTermAccessor function. If no filter is set, returns the data array\n   * as provided.\n   */\n  _filterData(data: T[]) {\n    // If there is a filter string, filter out data that does not contain it.\n    // Each data object is converted to a string using the function defined by filterTermAccessor.\n    // May be overriden for customization.\n    this.filteredData =\n        !this.filter ? data : data.filter(obj => this.filterPredicate(obj, this.filter));\n\n    if (this.paginator) { this._updatePaginator(this.filteredData.length); }\n\n    return this.filteredData;\n  }\n\n  /**\n   * Returns a sorted copy of the data if MatSort has a sort applied, otherwise just returns the\n   * data array as provided. Uses the default data accessor for data lookup, unless a\n   * sortDataAccessor function is defined.\n   */\n  _orderData(data: T[]): T[] {\n    // If there is no active sort or direction, return the data without trying to sort.\n    if (!this.sort || !this.sort.active || this.sort.direction == '') { return data; }\n\n    const active = this.sort.active;\n    const direction = this.sort.direction;\n\n    return data.slice().sort((a, b) => {\n      let valueA = this.sortingDataAccessor(a, active);\n      let valueB = this.sortingDataAccessor(b, active);\n      return (valueA < valueB ? -1 : 1) * (direction == 'asc' ? 1 : -1);\n    });\n  }\n\n  /**\n   * Returns a paged splice of the provided data array according to the provided MatPaginator's page\n   * index and length. If there is no paginator provided, returns the data array as provided.\n   */\n  _pageData(data: T[]): T[] {\n    if (!this.paginator) { return data; }\n\n    const startIndex = this.paginator.pageIndex * this.paginator.pageSize;\n    return data.slice().splice(startIndex, this.paginator.pageSize);\n  }\n\n  /**\n   * Updates the paginator to reflect the length of the filtered data, and makes sure that the page\n   * index does not exceed the paginator's last page. Values are changed in a resolved promise to\n   * guard against making property changes within a round of change detection.\n   */\n  _updatePaginator(filteredDataLength: number) {\n    Promise.resolve().then(() => {\n      if (!this.paginator) { return; }\n\n      this.paginator.length = filteredDataLength;\n\n      // If the page index is set beyond the page, reduce it to the last page.\n      if (this.paginator.pageIndex > 0) {\n        const lastPageIndex = Math.ceil(this.paginator.length / this.paginator.pageSize) - 1 || 0;\n        this.paginator.pageIndex = Math.min(this.paginator.pageIndex, lastPageIndex);\n      }\n    });\n  }\n\n  /**\n   * Used by the MatTable. Called when it connects to the data source.\n   * @docs-private\n   */\n  connect() { return this._renderData; }\n\n  /**\n   * Used by the MatTable. Called when it is destroyed. No-op.\n   * @docs-private\n   */\n  disconnect() { }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, ElementRef, NgZone} from '@angular/core';\n\n\n/**\n * The ink-bar is used to display and animate the line underneath the current active tab label.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-ink-bar',\n  host: {\n    'class': 'mat-ink-bar',\n  },\n})\nexport class MatInkBar {\n  constructor(\n    private _elementRef: ElementRef,\n    private _ngZone: NgZone) {}\n\n  /**\n   * Calculates the styles from the provided element in order to align the ink-bar to that element.\n   * Shows the ink bar if previously set as hidden.\n   * @param element\n   */\n  alignToElement(element: HTMLElement) {\n    this.show();\n\n    if (typeof requestAnimationFrame !== 'undefined') {\n      this._ngZone.runOutsideAngular(() => {\n        requestAnimationFrame(() => this._setStyles(element));\n      });\n    } else {\n      this._setStyles(element);\n    }\n  }\n\n  /** Shows the ink bar. */\n  show(): void {\n    this._elementRef.nativeElement.style.visibility = 'visible';\n  }\n\n  /** Hides the ink bar. */\n  hide(): void {\n    this._elementRef.nativeElement.style.visibility = 'hidden';\n  }\n\n  /**\n   * Sets the proper styles to the ink bar element.\n   * @param element\n   */\n  private _setStyles(element: HTMLElement) {\n    const inkBar: HTMLElement = this._elementRef.nativeElement;\n\n    inkBar.style.left = element ? (element.offsetLeft || 0) + 'px' : '0';\n    inkBar.style.width = element ? (element.offsetWidth || 0) + 'px' : '0';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, TemplateRef, ViewContainerRef} from '@angular/core';\nimport {CdkPortal} from '@angular/cdk/portal';\n\n/** Used to flag tab labels for use with the portal directive */\n@Directive({\n  selector: '[mat-tab-label], [matTabLabel]',\n})\nexport class MatTabLabel extends CdkPortal {\n  constructor(templateRef: TemplateRef<any>, viewContainerRef: ViewContainerRef) {\n    super(templateRef, viewContainerRef);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {TemplatePortal} from '@angular/cdk/portal';\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  ContentChild,\n  Input,\n  OnChanges,\n  OnDestroy,\n  OnInit,\n  SimpleChanges,\n  TemplateRef,\n  ViewChild,\n  ViewContainerRef,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {CanDisable, mixinDisabled} from '@angular/material/core';\nimport {Subject} from 'rxjs/Subject';\nimport {MatTabLabel} from './tab-label';\n\n\n// Boilerplate for applying mixins to MatTab.\n/** @docs-private */\nexport class MatTabBase {}\nexport const _MatTabMixinBase = mixinDisabled(MatTabBase);\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-tab',\n  templateUrl: 'tab.html',\n  inputs: ['disabled'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  exportAs: 'matTab',\n})\nexport class MatTab extends _MatTabMixinBase implements OnInit, CanDisable, OnChanges, OnDestroy {\n  /** Content for the tab label given by <ng-template mat-tab-label>. */\n  @ContentChild(MatTabLabel) templateLabel: MatTabLabel;\n\n  /** Template inside the MatTab view that contains an <ng-content>. */\n  @ViewChild(TemplateRef) _content: TemplateRef<any>;\n\n  /** The plain text label for the tab, used when there is no template label. */\n  @Input('label') textLabel: string = '';\n\n  /** The portal that will be the hosted content of the tab */\n  private _contentPortal: TemplatePortal<any> | null = null;\n\n  /** @docs-private */\n  get content(): TemplatePortal<any> | null {\n    return this._contentPortal;\n  }\n\n  /** Emits whenever the label changes. */\n  _labelChange = new Subject<void>();\n\n  /** Emits whenever the disable changes */\n  _disableChange = new Subject<void>();\n\n  /**\n   * The relatively indexed position where 0 represents the center, negative is left, and positive\n   * represents the right.\n   */\n  position: number | null = null;\n\n  /**\n   * The initial relatively index origin of the tab if it was created and selected after there\n   * was already a selected tab. Provides context of what position the tab should originate from.\n   */\n  origin: number | null = null;\n\n  /**\n   * Whether the tab is currently active.\n   */\n  isActive = false;\n\n  constructor(private _viewContainerRef: ViewContainerRef) {\n    super();\n  }\n\n  ngOnChanges(changes: SimpleChanges): void {\n    if (changes.hasOwnProperty('textLabel')) {\n      this._labelChange.next();\n    }\n\n    if (changes.hasOwnProperty('disabled')) {\n      this._disableChange.next();\n    }\n  }\n\n  ngOnDestroy(): void {\n    this._disableChange.complete();\n    this._labelChange.complete();\n  }\n\n  ngOnInit(): void {\n    this._contentPortal = new TemplatePortal(this._content, this._viewContainerRef);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/** Animations used by the Material tabs. */\nexport const matTabsAnimations: {\n  readonly translateTab: AnimationTriggerMetadata;\n} = {\n  /** Animation translates a tab along the X axis. */\n  translateTab: trigger('translateTab', [\n    // Note: transitions to `none` instead of 0, because some browsers might blur the content.\n    state('center, void, left-origin-center, right-origin-center', style({transform: 'none'})),\n    state('left', style({transform: 'translate3d(-100%, 0, 0)'})),\n    state('right', style({transform: 'translate3d(100%, 0, 0)'})),\n    transition('* => left, * => right, left => center, right => center',\n        animate('500ms cubic-bezier(0.35, 0, 0.25, 1)')),\n    transition('void => left-origin-center', [\n      style({transform: 'translate3d(-100%, 0, 0)'}),\n      animate('500ms cubic-bezier(0.35, 0, 0.25, 1)')\n    ]),\n    transition('void => right-origin-center', [\n      style({transform: 'translate3d(100%, 0, 0)'}),\n      animate('500ms cubic-bezier(0.35, 0, 0.25, 1)')\n    ])\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  Input,\n  Inject,\n  Output,\n  EventEmitter,\n  OnDestroy,\n  OnInit,\n  ElementRef,\n  Directive,\n  Optional,\n  ViewEncapsulation,\n  ChangeDetectionStrategy,\n  ComponentFactoryResolver,\n  ViewContainerRef,\n  forwardRef,\n} from '@angular/core';\nimport {AnimationEvent} from '@angular/animations';\nimport {TemplatePortal, CdkPortalOutlet} from '@angular/cdk/portal';\nimport {Directionality, Direction} from '@angular/cdk/bidi';\nimport {Subscription} from 'rxjs/Subscription';\nimport {matTabsAnimations} from './tabs-animations';\n\n/**\n * These position states are used internally as animation states for the tab body. Setting the\n * position state to left, right, or center will transition the tab body from its current\n * position to its respective state. If there is not current position (void, in the case of a new\n * tab body), then there will be no transition animation to its state.\n *\n * In the case of a new tab body that should immediately be centered with an animating transition,\n * then left-origin-center or right-origin-center can be used, which will use left or right as its\n * psuedo-prior state.\n */\nexport type MatTabBodyPositionState =\n    'left' | 'center' | 'right' | 'left-origin-center' | 'right-origin-center';\n\n/**\n * The origin state is an internally used state that is set on a new tab body indicating if it\n * began to the left or right of the prior selected index. For example, if the selected index was\n * set to 1, and a new tab is created and selected at index 2, then the tab body would have an\n * origin of right because its index was greater than the prior selected index.\n */\nexport type MatTabBodyOriginState = 'left' | 'right';\n\n/**\n * The portal host directive for the contents of the tab.\n * @docs-private\n */\n@Directive({\n  selector: '[matTabBodyHost]'\n})\nexport class MatTabBodyPortal extends CdkPortalOutlet implements OnInit, OnDestroy {\n  /** A subscription to events for when the tab body begins centering. */\n  private _centeringSub: Subscription;\n  /** A subscription to events for when the tab body finishes leaving from center position. */\n  private _leavingSub: Subscription;\n\n  constructor(\n    _componentFactoryResolver: ComponentFactoryResolver,\n    _viewContainerRef: ViewContainerRef,\n    @Inject(forwardRef(() => MatTabBody)) private _host: MatTabBody) {\n      super(_componentFactoryResolver, _viewContainerRef);\n  }\n\n  /** Set initial visibility or set up subscription for changing visibility. */\n  ngOnInit(): void {\n    if (this._host._isCenterPosition(this._host._position)) {\n      this.attach(this._host._content);\n    }\n    this._centeringSub = this._host._beforeCentering.subscribe((isCentering: boolean) => {\n      if (isCentering) {\n        if (!this.hasAttached()) {\n          this.attach(this._host._content);\n        }\n      }\n    });\n\n    this._leavingSub = this._host._afterLeavingCenter.subscribe(() => {\n      this.detach();\n    });\n  }\n\n  /** Clean up centering subscription. */\n  ngOnDestroy(): void {\n    if (this._centeringSub && !this._centeringSub.closed) {\n      this._centeringSub.unsubscribe();\n    }\n\n    if (this._leavingSub && !this._leavingSub.closed) {\n      this._leavingSub.unsubscribe();\n    }\n  }\n}\n\n/**\n * Wrapper for the contents of a tab.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-tab-body',\n  templateUrl: 'tab-body.html',\n  styleUrls: ['tab-body.css'],\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  animations: [matTabsAnimations.translateTab],\n  host: {\n    'class': 'mat-tab-body',\n  },\n})\nexport class MatTabBody implements OnInit {\n  /** Event emitted when the tab begins to animate towards the center as the active tab. */\n  @Output() _onCentering: EventEmitter<number> = new EventEmitter<number>();\n\n  /** Event emitted before the centering of the tab begins. */\n  @Output() _beforeCentering: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n  /** Event emitted before the centering of the tab begins. */\n  @Output() _afterLeavingCenter: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n  /** Event emitted when the tab completes its animation towards the center. */\n  @Output() _onCentered: EventEmitter<void> = new EventEmitter<void>(true);\n\n  /** The tab body content to display. */\n  @Input('content') _content: TemplatePortal<any>;\n\n  /** The shifted index position of the tab body, where zero represents the active center tab. */\n  @Input()\n  set position(position: number) {\n    if (position < 0) {\n      this._position = this._getLayoutDirection() == 'ltr' ? 'left' : 'right';\n    } else if (position > 0) {\n      this._position = this._getLayoutDirection() == 'ltr' ? 'right' : 'left';\n    } else {\n      this._position = 'center';\n    }\n  }\n  _position: MatTabBodyPositionState;\n\n  /** The origin position from which this tab should appear when it is centered into view. */\n  @Input()\n  set origin(origin: number) {\n    if (origin == null) { return; }\n\n    const dir = this._getLayoutDirection();\n    if ((dir == 'ltr' && origin <= 0) || (dir == 'rtl' && origin > 0)) {\n      this._origin = 'left';\n    } else {\n      this._origin = 'right';\n    }\n  }\n  _origin: MatTabBodyOriginState;\n\n  constructor(private _elementRef: ElementRef,\n              @Optional() private _dir: Directionality) { }\n\n  /**\n   * After initialized, check if the content is centered and has an origin. If so, set the\n   * special position states that transition the tab from the left or right before centering.\n   */\n  ngOnInit() {\n    if (this._position == 'center' && this._origin) {\n      this._position = this._origin == 'left' ? 'left-origin-center' : 'right-origin-center';\n    }\n  }\n\n  _onTranslateTabStarted(e: AnimationEvent): void {\n    const isCentering = this._isCenterPosition(e.toState);\n    this._beforeCentering.emit(isCentering);\n    if (isCentering) {\n      this._onCentering.emit(this._elementRef.nativeElement.clientHeight);\n    }\n  }\n\n  _onTranslateTabComplete(e: AnimationEvent): void {\n    // If the transition to the center is complete, emit an event.\n    if (this._isCenterPosition(e.toState) && this._isCenterPosition(this._position)) {\n      this._onCentered.emit();\n    }\n\n    if (this._isCenterPosition(e.fromState) && !this._isCenterPosition(this._position)) {\n      this._afterLeavingCenter.emit();\n    }\n  }\n\n  /** The text direction of the containing app. */\n  _getLayoutDirection(): Direction {\n    return this._dir && this._dir.value === 'rtl' ? 'rtl' : 'ltr';\n  }\n\n  /** Whether the provided position state is considered center, regardless of origin. */\n  _isCenterPosition(position: MatTabBodyPositionState|string): boolean {\n    return position == 'center' ||\n        position == 'left-origin-center' ||\n        position == 'right-origin-center';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  AfterContentChecked,\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  ElementRef,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  Output,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {coerceBooleanProperty, coerceNumberProperty} from '@angular/cdk/coercion';\nimport {Subscription} from 'rxjs/Subscription';\nimport {MatTab} from './tab';\nimport {MatTabHeader} from './tab-header';\nimport {merge} from 'rxjs/observable/merge';\nimport {\n  CanColor,\n  CanDisableRipple,\n  mixinColor,\n  mixinDisableRipple,\n  ThemePalette\n} from '@angular/material/core';\n\n\n/** Used to generate unique ID's for each tab component */\nlet nextId = 0;\n\n/** A simple change event emitted on focus or selection changes. */\nexport class MatTabChangeEvent {\n  /** Index of the currently-selected tab. */\n  index: number;\n  /** Reference to the currently-selected tab. */\n  tab: MatTab;\n}\n\n/** Possible positions for the tab header. */\nexport type MatTabHeaderPosition = 'above' | 'below';\n\n// Boilerplate for applying mixins to MatTabGroup.\n/** @docs-private */\nexport class MatTabGroupBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatTabGroupMixinBase = mixinColor(mixinDisableRipple(MatTabGroupBase), 'primary');\n\n/**\n * Material design tab-group component.  Supports basic tab pairs (label + content) and includes\n * animated ink-bar, keyboard navigation, and screen reader.\n * See: https://www.google.com/design/spec/components/tabs.html\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-tab-group',\n  exportAs: 'matTabGroup',\n  templateUrl: 'tab-group.html',\n  styleUrls: ['tab-group.css'],\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  inputs: ['color', 'disableRipple'],\n  host: {\n    'class': 'mat-tab-group',\n    '[class.mat-tab-group-dynamic-height]': 'dynamicHeight',\n    '[class.mat-tab-group-inverted-header]': 'headerPosition === \"below\"',\n  },\n})\nexport class MatTabGroup extends _MatTabGroupMixinBase implements AfterContentInit,\n    AfterContentChecked, OnDestroy, CanColor, CanDisableRipple {\n\n  @ContentChildren(MatTab) _tabs: QueryList<MatTab>;\n\n  @ViewChild('tabBodyWrapper') _tabBodyWrapper: ElementRef;\n\n  /** The tab index that should be selected after the content has been checked. */\n  private _indexToSelect: number | null = 0;\n\n  /** Snapshot of the height of the tab body wrapper before another tab is activated. */\n  private _tabBodyWrapperHeight: number = 0;\n\n  /** Subscription to tabs being added/removed. */\n  private _tabsSubscription = Subscription.EMPTY;\n\n  /** Subscription to changes in the tab labels. */\n  private _tabLabelSubscription = Subscription.EMPTY;\n\n  /** Whether the tab group should grow to the size of the active tab. */\n  @Input()\n  get dynamicHeight(): boolean { return this._dynamicHeight; }\n  set dynamicHeight(value: boolean) { this._dynamicHeight = coerceBooleanProperty(value); }\n  private _dynamicHeight: boolean = false;\n\n  /** @deprecated */\n  @Input('mat-dynamic-height')\n  get _dynamicHeightDeprecated(): boolean { return this._dynamicHeight; }\n  set _dynamicHeightDeprecated(value: boolean) { this._dynamicHeight = value; }\n\n  /** The index of the active tab. */\n  @Input()\n  get selectedIndex(): number | null { return this._selectedIndex; }\n  set selectedIndex(value: number | null) {\n    this._indexToSelect = coerceNumberProperty(value, null);\n  }\n  private _selectedIndex: number | null = null;\n\n  /** Position of the tab header. */\n  @Input() headerPosition: MatTabHeaderPosition = 'above';\n\n  /** Background color of the tab group. */\n  @Input()\n  get backgroundColor(): ThemePalette { return this._backgroundColor; }\n  set backgroundColor(value: ThemePalette) {\n    const nativeElement: HTMLElement = this._elementRef.nativeElement;\n\n    nativeElement.classList.remove(`mat-background-${this.backgroundColor}`);\n\n    if (value) {\n      nativeElement.classList.add(`mat-background-${value}`);\n    }\n\n    this._backgroundColor = value;\n  }\n  private _backgroundColor: ThemePalette;\n\n  /** Output to enable support for two-way binding on `[(selectedIndex)]` */\n  @Output() selectedIndexChange: EventEmitter<number> = new EventEmitter();\n\n  /** Event emitted when focus has changed within a tab group. */\n  @Output() focusChange: EventEmitter<MatTabChangeEvent> = new EventEmitter<MatTabChangeEvent>();\n\n  /** Event emitted when the body animation has completed */\n  @Output() animationDone: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Event emitted when the tab selection has changed. */\n  @Output() selectedTabChange: EventEmitter<MatTabChangeEvent> =\n      new EventEmitter<MatTabChangeEvent>(true);\n\n  /**\n   * Event emitted when the tab selection has changed.\n   * @deprecated Use `selectedTabChange` instead.\n   */\n  @Output() selectChange: EventEmitter<MatTabChangeEvent> = this.selectedTabChange;\n\n  private _groupId: number;\n\n  constructor(elementRef: ElementRef,\n              private _changeDetectorRef: ChangeDetectorRef) {\n    super(elementRef);\n    this._groupId = nextId++;\n  }\n\n  /**\n   * After the content is checked, this component knows what tabs have been defined\n   * and what the selected index should be. This is where we can know exactly what position\n   * each tab should be in according to the new selected index, and additionally we know how\n   * a new selected tab should transition in (from the left or right).\n   */\n  ngAfterContentChecked(): void {\n    // Clamp the next selected index to the boundsof 0 and the tabs length.\n    // Note the `|| 0`, which ensures that values like NaN can't get through\n    // and which would otherwise throw the component into an infinite loop\n    // (since Math.max(NaN, 0) === NaN).\n    let indexToSelect = this._indexToSelect =\n        Math.min(this._tabs.length - 1, Math.max(this._indexToSelect || 0, 0));\n\n    // If there is a change in selected index, emit a change event. Should not trigger if\n    // the selected index has not yet been initialized.\n    if (this._selectedIndex != indexToSelect && this._selectedIndex != null) {\n      const tabChangeEvent = this._createChangeEvent(indexToSelect);\n      this.selectedTabChange.emit(tabChangeEvent);\n      // Emitting this value after change detection has run\n      // since the checked content may contain this variable'\n      Promise.resolve().then(() => this.selectedIndexChange.emit(indexToSelect));\n    }\n\n    // Setup the position for each tab and optionally setup an origin on the next selected tab.\n    this._tabs.forEach((tab: MatTab, index: number) => {\n      tab.position = index - indexToSelect;\n      tab.isActive = index === indexToSelect;\n\n      // If there is already a selected tab, then set up an origin for the next selected tab\n      // if it doesn't have one already.\n      if (this._selectedIndex != null && tab.position == 0 && !tab.origin) {\n        tab.origin = indexToSelect - this._selectedIndex;\n      }\n    });\n\n    if (this._selectedIndex !== indexToSelect) {\n      this._selectedIndex = indexToSelect;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  ngAfterContentInit() {\n    this._subscribeToTabLabels();\n\n    // Subscribe to changes in the amount of tabs, in order to be\n    // able to re-render the content as new tabs are added or removed.\n    this._tabsSubscription = this._tabs.changes.subscribe(() => {\n      this._subscribeToTabLabels();\n      this._changeDetectorRef.markForCheck();\n    });\n  }\n\n  ngOnDestroy() {\n    this._tabsSubscription.unsubscribe();\n    this._tabLabelSubscription.unsubscribe();\n  }\n\n  _focusChanged(index: number) {\n    this.focusChange.emit(this._createChangeEvent(index));\n  }\n\n  private _createChangeEvent(index: number): MatTabChangeEvent {\n    const event = new MatTabChangeEvent;\n    event.index = index;\n    if (this._tabs && this._tabs.length) {\n      event.tab = this._tabs.toArray()[index];\n    }\n    return event;\n  }\n\n  /**\n   * Subscribes to changes in the tab labels. This is needed, because the @Input for the label is\n   * on the MatTab component, whereas the data binding is inside the MatTabGroup. In order for the\n   * binding to be updated, we need to subscribe to changes in it and trigger change detection\n   * manually.\n   */\n  private _subscribeToTabLabels() {\n    if (this._tabLabelSubscription) {\n      this._tabLabelSubscription.unsubscribe();\n    }\n\n    this._tabLabelSubscription = merge(\n        ...this._tabs.map(tab => tab._disableChange),\n        ...this._tabs.map(tab => tab._labelChange)).subscribe(() => {\n      this._changeDetectorRef.markForCheck();\n    });\n  }\n\n  /** Returns a unique id for each tab label element */\n  _getTabLabelId(i: number): string {\n    return `mat-tab-label-${this._groupId}-${i}`;\n  }\n\n  /** Returns a unique id for each tab content element */\n  _getTabContentId(i: number): string {\n    return `mat-tab-content-${this._groupId}-${i}`;\n  }\n\n  /**\n   * Sets the height of the body wrapper to the height of the activating tab if dynamic\n   * height property is true.\n   */\n  _setTabBodyWrapperHeight(tabHeight: number): void {\n    if (!this._dynamicHeight || !this._tabBodyWrapperHeight) { return; }\n\n    const wrapper: HTMLElement = this._tabBodyWrapper.nativeElement;\n\n    wrapper.style.height = this._tabBodyWrapperHeight + 'px';\n\n    // This conditional forces the browser to paint the height so that\n    // the animation to the new height can have an origin.\n    if (this._tabBodyWrapper.nativeElement.offsetHeight) {\n      wrapper.style.height = tabHeight + 'px';\n    }\n  }\n\n  /** Removes the height of the tab body wrapper. */\n  _removeTabBodyWrapperHeight(): void {\n    this._tabBodyWrapperHeight = this._tabBodyWrapper.nativeElement.clientHeight;\n    this._tabBodyWrapper.nativeElement.style.height = '';\n    this.animationDone.emit();\n  }\n\n  /** Handle click events, setting new selected index if appropriate. */\n  _handleClick(tab: MatTab, tabHeader: MatTabHeader, idx: number) {\n    if (!tab.disabled) {\n      this.selectedIndex = tabHeader.focusIndex = idx;\n    }\n  }\n\n  /** Retrieves the tabindex for the tab. */\n  _getTabIndex(tab: MatTab, idx: number): number | null {\n    if (tab.disabled) {\n      return null;\n    }\n    return this.selectedIndex === idx ? 0 : -1;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, ElementRef} from '@angular/core';\nimport {CanDisable, mixinDisabled} from '@angular/material/core';\n\n// Boilerplate for applying mixins to MatTabLabelWrapper.\n/** @docs-private */\nexport class MatTabLabelWrapperBase {}\nexport const _MatTabLabelWrapperMixinBase = mixinDisabled(MatTabLabelWrapperBase);\n\n/**\n * Used in the `mat-tab-group` view to display tab labels.\n * @docs-private\n */\n@Directive({\n  selector: '[matTabLabelWrapper]',\n  inputs: ['disabled'],\n  host: {\n    '[class.mat-tab-disabled]': 'disabled'\n  }\n})\nexport class MatTabLabelWrapper extends _MatTabLabelWrapperMixinBase implements CanDisable {\n  constructor(public elementRef: ElementRef) {\n    super();\n  }\n\n  /** Sets focus on the wrapper element */\n  focus(): void {\n    this.elementRef.nativeElement.focus();\n  }\n\n  getOffsetLeft(): number {\n    return this.elementRef.nativeElement.offsetLeft;\n  }\n\n  getOffsetWidth(): number {\n    return this.elementRef.nativeElement.offsetWidth;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Direction, Directionality} from '@angular/cdk/bidi';\nimport {ENTER, LEFT_ARROW, RIGHT_ARROW, SPACE} from '@angular/cdk/keycodes';\nimport {\n  AfterContentChecked,\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  ElementRef,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  Optional,\n  Output,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {CanDisableRipple, mixinDisableRipple} from '@angular/material/core';\nimport {merge} from 'rxjs/observable/merge';\nimport {of as observableOf} from 'rxjs/observable/of';\nimport {Subscription} from 'rxjs/Subscription';\nimport {coerceNumberProperty} from '@angular/cdk/coercion';\nimport {MatInkBar} from './ink-bar';\nimport {MatTabLabelWrapper} from './tab-label-wrapper';\nimport {ViewportRuler} from '@angular/cdk/scrolling';\n\n\n/**\n * The directions that scrolling can go in when the header's tabs exceed the header width. 'After'\n * will scroll the header towards the end of the tabs list and 'before' will scroll towards the\n * beginning of the list.\n */\nexport type ScrollDirection = 'after' | 'before';\n\n/**\n * The distance in pixels that will be overshot when scrolling a tab label into view. This helps\n * provide a small affordance to the label next to it.\n */\nconst EXAGGERATED_OVERSCROLL = 60;\n\n// Boilerplate for applying mixins to MatTabHeader.\n/** @docs-private */\nexport class MatTabHeaderBase {}\nexport const _MatTabHeaderMixinBase = mixinDisableRipple(MatTabHeaderBase);\n\n/**\n * The header of the tab group which displays a list of all the tabs in the tab group. Includes\n * an ink bar that follows the currently selected tab. When the tabs list's width exceeds the\n * width of the header container, then arrows will be displayed to allow the user to scroll\n * left and right across the header.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-tab-header',\n  templateUrl: 'tab-header.html',\n  styleUrls: ['tab-header.css'],\n  inputs: ['disableRipple'],\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {\n    'class': 'mat-tab-header',\n    '[class.mat-tab-header-pagination-controls-enabled]': '_showPaginationControls',\n    '[class.mat-tab-header-rtl]': \"_getLayoutDirection() == 'rtl'\",\n  },\n})\nexport class MatTabHeader extends _MatTabHeaderMixinBase\n    implements AfterContentChecked, AfterContentInit, OnDestroy, CanDisableRipple {\n\n  @ContentChildren(MatTabLabelWrapper) _labelWrappers: QueryList<MatTabLabelWrapper>;\n  @ViewChild(MatInkBar) _inkBar: MatInkBar;\n  @ViewChild('tabListContainer') _tabListContainer: ElementRef;\n  @ViewChild('tabList') _tabList: ElementRef;\n\n  /** The tab index that is focused. */\n  private _focusIndex: number = 0;\n\n  /** The distance in pixels that the tab labels should be translated to the left. */\n  private _scrollDistance = 0;\n\n  /** Whether the header should scroll to the selected index after the view has been checked. */\n  private _selectedIndexChanged = false;\n\n  /** Combines listeners that will re-align the ink bar whenever they're invoked. */\n  private _realignInkBar = Subscription.EMPTY;\n\n  /** Whether the controls for pagination should be displayed */\n  _showPaginationControls = false;\n\n  /** Whether the tab list can be scrolled more towards the end of the tab label list. */\n  _disableScrollAfter = true;\n\n  /** Whether the tab list can be scrolled more towards the beginning of the tab label list. */\n  _disableScrollBefore = true;\n\n  /**\n   * The number of tab labels that are displayed on the header. When this changes, the header\n   * should re-evaluate the scroll position.\n   */\n  private _tabLabelCount: number;\n\n  /** Whether the scroll distance has changed and should be applied after the view is checked. */\n  private _scrollDistanceChanged: boolean;\n\n  private _selectedIndex: number = 0;\n\n  /** The index of the active tab. */\n  @Input()\n  get selectedIndex(): number { return this._selectedIndex; }\n  set selectedIndex(value: number) {\n    value = coerceNumberProperty(value);\n    this._selectedIndexChanged = this._selectedIndex != value;\n    this._selectedIndex = value;\n    this._focusIndex = value;\n  }\n\n  /** Event emitted when the option is selected. */\n  @Output() selectFocusedIndex = new EventEmitter();\n\n  /** Event emitted when a label is focused. */\n  @Output() indexFocused = new EventEmitter();\n\n  constructor(private _elementRef: ElementRef,\n              private _changeDetectorRef: ChangeDetectorRef,\n              private _viewportRuler: ViewportRuler,\n              @Optional() private _dir: Directionality) {\n    super();\n  }\n\n  ngAfterContentChecked(): void {\n    // If the number of tab labels have changed, check if scrolling should be enabled\n    if (this._tabLabelCount != this._labelWrappers.length) {\n      this._updatePagination();\n      this._tabLabelCount = this._labelWrappers.length;\n      this._changeDetectorRef.markForCheck();\n    }\n\n    // If the selected index has changed, scroll to the label and check if the scrolling controls\n    // should be disabled.\n    if (this._selectedIndexChanged) {\n      this._scrollToLabel(this._selectedIndex);\n      this._checkScrollingControls();\n      this._alignInkBarToSelectedTab();\n      this._selectedIndexChanged = false;\n      this._changeDetectorRef.markForCheck();\n    }\n\n    // If the scroll distance has been changed (tab selected, focused, scroll controls activated),\n    // then translate the header to reflect this.\n    if (this._scrollDistanceChanged) {\n      this._updateTabScrollPosition();\n      this._scrollDistanceChanged = false;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  _handleKeydown(event: KeyboardEvent) {\n    switch (event.keyCode) {\n      case RIGHT_ARROW:\n        this._focusNextTab();\n        break;\n      case LEFT_ARROW:\n        this._focusPreviousTab();\n        break;\n      case ENTER:\n      case SPACE:\n        this.selectFocusedIndex.emit(this.focusIndex);\n        event.preventDefault();\n        break;\n    }\n  }\n\n  /**\n   * Aligns the ink bar to the selected tab on load.\n   */\n  ngAfterContentInit() {\n    const dirChange = this._dir ? this._dir.change : observableOf(null);\n    const resize = this._viewportRuler.change(150);\n    const realign = () => {\n      this._updatePagination();\n      this._alignInkBarToSelectedTab();\n    };\n\n    // Defer the first call in order to allow for slower browsers to lay out the elements.\n    // This helps in cases where the user lands directly on a page with paginated tabs.\n    typeof requestAnimationFrame !== 'undefined' ? requestAnimationFrame(realign) : realign();\n    this._realignInkBar = merge(dirChange, resize).subscribe(realign);\n  }\n\n  ngOnDestroy() {\n    this._realignInkBar.unsubscribe();\n  }\n\n  /**\n   * Callback for when the MutationObserver detects that the content has changed.\n   */\n  _onContentChanges() {\n    this._updatePagination();\n    this._alignInkBarToSelectedTab();\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /**\n   * Updating the view whether pagination should be enabled or not\n   */\n  _updatePagination() {\n    this._checkPaginationEnabled();\n    this._checkScrollingControls();\n    this._updateTabScrollPosition();\n  }\n\n  /** When the focus index is set, we must manually send focus to the correct label */\n  set focusIndex(value: number) {\n    if (!this._isValidIndex(value) || this._focusIndex == value) { return; }\n\n    this._focusIndex = value;\n    this.indexFocused.emit(value);\n    this._setTabFocus(value);\n  }\n\n  /** Tracks which element has focus; used for keyboard navigation */\n  get focusIndex(): number { return this._focusIndex; }\n\n  /**\n   * Determines if an index is valid.  If the tabs are not ready yet, we assume that the user is\n   * providing a valid index and return true.\n   */\n  _isValidIndex(index: number): boolean {\n    if (!this._labelWrappers) { return true; }\n\n    const tab = this._labelWrappers ? this._labelWrappers.toArray()[index] : null;\n    return !!tab && !tab.disabled;\n  }\n\n  /**\n   * Sets focus on the HTML element for the label wrapper and scrolls it into the view if\n   * scrolling is enabled.\n   */\n  _setTabFocus(tabIndex: number) {\n    if (this._showPaginationControls) {\n      this._scrollToLabel(tabIndex);\n    }\n\n    if (this._labelWrappers && this._labelWrappers.length) {\n      this._labelWrappers.toArray()[tabIndex].focus();\n\n      // Do not let the browser manage scrolling to focus the element, this will be handled\n      // by using translation. In LTR, the scroll left should be 0. In RTL, the scroll width\n      // should be the full width minus the offset width.\n      const containerEl = this._tabListContainer.nativeElement;\n      const dir = this._getLayoutDirection();\n\n      if (dir == 'ltr') {\n        containerEl.scrollLeft = 0;\n      } else {\n        containerEl.scrollLeft = containerEl.scrollWidth - containerEl.offsetWidth;\n      }\n    }\n  }\n\n  /**\n   * Moves the focus towards the beginning or the end of the list depending on the offset provided.\n   * Valid offsets are 1 and -1.\n   */\n  _moveFocus(offset: number) {\n    if (this._labelWrappers) {\n      const tabs: MatTabLabelWrapper[] = this._labelWrappers.toArray();\n\n      for (let i = this.focusIndex + offset; i < tabs.length && i >= 0; i += offset) {\n        if (this._isValidIndex(i)) {\n          this.focusIndex = i;\n          return;\n        }\n      }\n    }\n  }\n\n  /** Increment the focus index by 1 until a valid tab is found. */\n  _focusNextTab(): void {\n    this._moveFocus(this._getLayoutDirection() == 'ltr' ? 1 : -1);\n  }\n\n  /** Decrement the focus index by 1 until a valid tab is found. */\n  _focusPreviousTab(): void {\n    this._moveFocus(this._getLayoutDirection() == 'ltr' ? -1 : 1);\n  }\n\n  /** The layout direction of the containing app. */\n  _getLayoutDirection(): Direction {\n    return this._dir && this._dir.value === 'rtl' ? 'rtl' : 'ltr';\n  }\n\n  /** Performs the CSS transformation on the tab list that will cause the list to scroll. */\n  _updateTabScrollPosition() {\n    const scrollDistance = this.scrollDistance;\n    const translateX = this._getLayoutDirection() === 'ltr' ? -scrollDistance : scrollDistance;\n\n    this._tabList.nativeElement.style.transform = `translate3d(${translateX}px, 0, 0)`;\n  }\n\n  /** Sets the distance in pixels that the tab header should be transformed in the X-axis. */\n  get scrollDistance(): number { return this._scrollDistance; }\n  set scrollDistance(v: number) {\n    this._scrollDistance = Math.max(0, Math.min(this._getMaxScrollDistance(), v));\n\n    // Mark that the scroll distance has changed so that after the view is checked, the CSS\n    // transformation can move the header.\n    this._scrollDistanceChanged = true;\n    this._checkScrollingControls();\n  }\n\n  /**\n   * Moves the tab list in the 'before' or 'after' direction (towards the beginning of the list or\n   * the end of the list, respectively). The distance to scroll is computed to be a third of the\n   * length of the tab list view window.\n   *\n   * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n   * should be called sparingly.\n   */\n  _scrollHeader(scrollDir: ScrollDirection) {\n    const viewLength = this._tabListContainer.nativeElement.offsetWidth;\n\n    // Move the scroll distance one-third the length of the tab list's viewport.\n    this.scrollDistance += (scrollDir == 'before' ? -1 : 1) * viewLength / 3;\n  }\n\n  /**\n   * Moves the tab list such that the desired tab label (marked by index) is moved into view.\n   *\n   * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n   * should be called sparingly.\n   */\n  _scrollToLabel(labelIndex: number) {\n    const selectedLabel = this._labelWrappers ? this._labelWrappers.toArray()[labelIndex] : null;\n\n    if (!selectedLabel) { return; }\n\n    // The view length is the visible width of the tab labels.\n    const viewLength = this._tabListContainer.nativeElement.offsetWidth;\n\n    let labelBeforePos: number, labelAfterPos: number;\n    if (this._getLayoutDirection() == 'ltr') {\n      labelBeforePos = selectedLabel.getOffsetLeft();\n      labelAfterPos = labelBeforePos + selectedLabel.getOffsetWidth();\n    } else {\n      labelAfterPos = this._tabList.nativeElement.offsetWidth - selectedLabel.getOffsetLeft();\n      labelBeforePos = labelAfterPos - selectedLabel.getOffsetWidth();\n    }\n\n    const beforeVisiblePos = this.scrollDistance;\n    const afterVisiblePos = this.scrollDistance + viewLength;\n\n    if (labelBeforePos < beforeVisiblePos) {\n      // Scroll header to move label to the before direction\n      this.scrollDistance -= beforeVisiblePos - labelBeforePos + EXAGGERATED_OVERSCROLL;\n    } else if (labelAfterPos > afterVisiblePos) {\n      // Scroll header to move label to the after direction\n      this.scrollDistance += labelAfterPos - afterVisiblePos + EXAGGERATED_OVERSCROLL;\n    }\n  }\n\n  /**\n   * Evaluate whether the pagination controls should be displayed. If the scroll width of the\n   * tab list is wider than the size of the header container, then the pagination controls should\n   * be shown.\n   *\n   * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n   * should be called sparingly.\n   */\n  _checkPaginationEnabled() {\n    const isEnabled =\n        this._tabList.nativeElement.scrollWidth > this._elementRef.nativeElement.offsetWidth;\n\n    if (!isEnabled) {\n      this.scrollDistance = 0;\n    }\n\n    if (isEnabled !== this._showPaginationControls) {\n      this._changeDetectorRef.markForCheck();\n    }\n\n    this._showPaginationControls = isEnabled;\n  }\n\n  /**\n   * Evaluate whether the before and after controls should be enabled or disabled.\n   * If the header is at the beginning of the list (scroll distance is equal to 0) then disable the\n   * before button. If the header is at the end of the list (scroll distance is equal to the\n   * maximum distance we can scroll), then disable the after button.\n   *\n   * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n   * should be called sparingly.\n   */\n  _checkScrollingControls() {\n    // Check if the pagination arrows should be activated.\n    this._disableScrollBefore = this.scrollDistance == 0;\n    this._disableScrollAfter = this.scrollDistance == this._getMaxScrollDistance();\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /**\n   * Determines what is the maximum length in pixels that can be set for the scroll distance. This\n   * is equal to the difference in width between the tab list container and tab header container.\n   *\n   * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n   * should be called sparingly.\n   */\n  _getMaxScrollDistance(): number {\n    const lengthOfTabList = this._tabList.nativeElement.scrollWidth;\n    const viewLength = this._tabListContainer.nativeElement.offsetWidth;\n    return (lengthOfTabList - viewLength) || 0;\n  }\n\n  /** Tells the ink-bar to align itself to the current label wrapper */\n  private _alignInkBarToSelectedTab(): void {\n    const selectedLabelWrapper = this._labelWrappers && this._labelWrappers.length ?\n        this._labelWrappers.toArray()[this.selectedIndex].elementRef.nativeElement :\n        null;\n\n    this._inkBar.alignToElement(selectedLabelWrapper);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {Platform} from '@angular/cdk/platform';\nimport {ViewportRuler} from '@angular/cdk/scrolling';\nimport {\n  AfterContentInit,\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  forwardRef,\n  Inject,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {\n  CanColor,\n  CanDisable,\n  CanDisableRipple,\n  HasTabIndex,\n  MAT_RIPPLE_GLOBAL_OPTIONS,\n  mixinColor,\n  mixinDisabled,\n  mixinDisableRipple,\n  mixinTabIndex, RippleConfig,\n  RippleGlobalOptions,\n  RippleRenderer,\n  RippleTarget,\n  ThemePalette,\n} from '@angular/material/core';\nimport {merge} from 'rxjs/observable/merge';\nimport {of as observableOf} from 'rxjs/observable/of';\nimport {takeUntil} from 'rxjs/operators/takeUntil';\nimport {Subject} from 'rxjs/Subject';\nimport {MatInkBar} from '../ink-bar';\n\n\n// Boilerplate for applying mixins to MatTabNav.\n/** @docs-private */\nexport class MatTabNavBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatTabNavMixinBase = mixinColor(MatTabNavBase, 'primary');\n\n/**\n * Navigation component matching the styles of the tab group header.\n * Provides anchored navigation with animated ink bar.\n */\n@Component({\n  moduleId: module.id,\n  selector: '[mat-tab-nav-bar]',\n  exportAs: 'matTabNavBar, matTabNav',\n  inputs: ['color'],\n  templateUrl: 'tab-nav-bar.html',\n  styleUrls: ['tab-nav-bar.css'],\n  host: {'class': 'mat-tab-nav-bar'},\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatTabNav extends _MatTabNavMixinBase implements AfterContentInit, CanColor,\n    OnDestroy {\n\n  /** Subject that emits when the component has been destroyed. */\n  private _onDestroy = new Subject<void>();\n\n  _activeLinkChanged: boolean;\n  _activeLinkElement: ElementRef;\n\n  @ViewChild(MatInkBar) _inkBar: MatInkBar;\n\n  /** Query list of all tab links of the tab navigation. */\n  @ContentChildren(forwardRef(() => MatTabLink), {descendants: true})\n  _tabLinks: QueryList<MatTabLink>;\n\n  /** Background color of the tab nav. */\n  @Input()\n  get backgroundColor(): ThemePalette { return this._backgroundColor; }\n  set backgroundColor(value: ThemePalette) {\n    const nativeElement: HTMLElement = this._elementRef.nativeElement;\n\n    nativeElement.classList.remove(`mat-background-${this.backgroundColor}`);\n\n    if (value) {\n      nativeElement.classList.add(`mat-background-${value}`);\n    }\n\n    this._backgroundColor = value;\n  }\n  private _backgroundColor: ThemePalette;\n\n  /** Whether ripples should be disabled for all links or not. */\n  @Input()\n  get disableRipple() { return this._disableRipple; }\n  set disableRipple(value: boolean) {\n    this._disableRipple = coerceBooleanProperty(value);\n    this._setLinkDisableRipple();\n  }\n  private _disableRipple: boolean = false;\n\n  constructor(elementRef: ElementRef,\n              @Optional() private _dir: Directionality,\n              private _ngZone: NgZone,\n              private _changeDetectorRef: ChangeDetectorRef,\n              private _viewportRuler: ViewportRuler) {\n    super(elementRef);\n  }\n\n  /** Notifies the component that the active link has been changed. */\n  updateActiveLink(element: ElementRef) {\n    this._activeLinkChanged = this._activeLinkElement != element;\n    this._activeLinkElement = element;\n\n    if (this._activeLinkChanged) {\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  ngAfterContentInit(): void {\n    this._ngZone.runOutsideAngular(() => {\n      const dirChange = this._dir ? this._dir.change : observableOf(null);\n\n      return merge(dirChange, this._viewportRuler.change(10)).pipe(takeUntil(this._onDestroy))\n          .subscribe(() => this._alignInkBar());\n    });\n\n    this._setLinkDisableRipple();\n  }\n\n  /** Checks if the active link has been changed and, if so, will update the ink bar. */\n  ngAfterContentChecked(): void {\n    if (this._activeLinkChanged) {\n      this._alignInkBar();\n      this._activeLinkChanged = false;\n    }\n  }\n\n  ngOnDestroy() {\n    this._onDestroy.next();\n    this._onDestroy.complete();\n  }\n\n  /** Aligns the ink bar to the active link. */\n  _alignInkBar(): void {\n    if (this._activeLinkElement) {\n      this._inkBar.alignToElement(this._activeLinkElement.nativeElement);\n    }\n  }\n\n  /** Sets the `disableRipple` property on each link of the navigation bar. */\n  private _setLinkDisableRipple() {\n    if (this._tabLinks) {\n      this._tabLinks.forEach(link => link.disableRipple = this.disableRipple);\n    }\n  }\n}\n\n\n// Boilerplate for applying mixins to MatTabLink.\nexport class MatTabLinkBase {}\nexport const _MatTabLinkMixinBase =\n  mixinTabIndex(mixinDisableRipple(mixinDisabled(MatTabLinkBase)));\n\n/**\n * Link inside of a `mat-tab-nav-bar`.\n */\n@Directive({\n  selector: '[mat-tab-link], [matTabLink]',\n  exportAs: 'matTabLink',\n  inputs: ['disabled', 'disableRipple', 'tabIndex'],\n  host: {\n    'class': 'mat-tab-link',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.tabIndex]': 'tabIndex',\n    '[class.mat-tab-disabled]': 'disabled',\n    '[class.mat-tab-label-active]': 'active',\n  }\n})\nexport class MatTabLink extends _MatTabLinkMixinBase\n    implements OnDestroy, CanDisable, CanDisableRipple, HasTabIndex, RippleTarget {\n\n  /** Whether the tab link is active or not. */\n  private _isActive: boolean = false;\n\n  /** Reference to the RippleRenderer for the tab-link. */\n  private _tabLinkRipple: RippleRenderer;\n\n  /** Whether the link is active. */\n  @Input()\n  get active(): boolean { return this._isActive; }\n  set active(value: boolean) {\n    this._isActive = value;\n    if (value) {\n      this._tabNavBar.updateActiveLink(this._elementRef);\n    }\n  }\n\n  /**\n   * Ripple configuration for ripples that are launched on pointer down.\n   * @docs-private\n   */\n  rippleConfig: RippleConfig = {};\n\n  /**\n   * Whether ripples are disabled on interaction\n   * @docs-private\n   */\n  get rippleDisabled(): boolean {\n    return this.disabled || this.disableRipple;\n  }\n\n  constructor(private _tabNavBar: MatTabNav,\n              private _elementRef: ElementRef,\n              ngZone: NgZone,\n              platform: Platform,\n              @Optional() @Inject(MAT_RIPPLE_GLOBAL_OPTIONS) globalOptions: RippleGlobalOptions,\n              @Attribute('tabindex') tabIndex: string) {\n    super();\n\n    this._tabLinkRipple = new RippleRenderer(this, ngZone, _elementRef, platform);\n    this._tabLinkRipple.setupTriggerEvents(_elementRef.nativeElement);\n\n    this.tabIndex = parseInt(tabIndex) || 0;\n\n    if (globalOptions) {\n      this.rippleConfig = {speedFactor: globalOptions.baseSpeedFactor};\n    }\n  }\n\n  ngOnDestroy() {\n    this._tabLinkRipple._removeTriggerEvents();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ObserversModule} from '@angular/cdk/observers';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {ScrollDispatchModule, VIEWPORT_RULER_PROVIDER} from '@angular/cdk/scrolling';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {MatInkBar} from './ink-bar';\nimport {MatTab} from './tab';\nimport {MatTabBody, MatTabBodyPortal} from './tab-body';\nimport {MatTabGroup} from './tab-group';\nimport {MatTabHeader} from './tab-header';\nimport {MatTabLabel} from './tab-label';\nimport {MatTabLabelWrapper} from './tab-label-wrapper';\nimport {MatTabLink, MatTabNav} from './tab-nav-bar/tab-nav-bar';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatCommonModule,\n    PortalModule,\n    MatRippleModule,\n    ObserversModule,\n    ScrollDispatchModule,\n  ],\n  // Don't export all components because some are only to be used internally.\n  exports: [\n    MatCommonModule,\n    MatTabGroup,\n    MatTabLabel,\n    MatTab,\n    MatTabNav,\n    MatTabLink,\n  ],\n  declarations: [\n    MatTabGroup,\n    MatTabLabel,\n    MatTab,\n    MatInkBar,\n    MatTabLabelWrapper,\n    MatTabNav,\n    MatTabLink,\n    MatTabBody,\n    MatTabBodyPortal,\n    MatTabHeader\n  ],\n  providers: [VIEWPORT_RULER_PROVIDER],\n})\nexport class MatTabsModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ViewContainerRef, InjectionToken} from '@angular/core';\nimport {AriaLivePoliteness} from '@angular/cdk/a11y';\nimport {Direction} from '@angular/cdk/bidi';\n\n/** Injection token that can be used to access the data that was passed in to a snack bar. */\nexport const MAT_SNACK_BAR_DATA = new InjectionToken<any>('MatSnackBarData');\n\n/** Possible values for horizontalPosition on MatSnackBarConfig. */\nexport type MatSnackBarHorizontalPosition = 'start' | 'center' | 'end' | 'left' | 'right';\n\n/** Possible values for verticalPosition on MatSnackBarConfig. */\nexport type MatSnackBarVerticalPosition = 'top' | 'bottom';\n\n/**\n * Configuration used when opening a snack-bar.\n */\nexport class MatSnackBarConfig<D = any> {\n  /** The politeness level for the MatAriaLiveAnnouncer announcement. */\n  politeness?: AriaLivePoliteness = 'assertive';\n\n  /** Message to be announced by the MatAriaLiveAnnouncer */\n  announcementMessage?: string = '';\n\n  /** The view container to place the overlay for the snack bar into. */\n  viewContainerRef?: ViewContainerRef;\n\n  /** The length of time in milliseconds to wait before automatically dismissing the snack bar. */\n  duration?: number = 0;\n\n  /** Extra CSS classes to be added to the snack bar container. */\n  panelClass?: string | string[];\n\n  /**\n   * Extra CSS classes to be added to the snack bar container.\n   * @deprecated Use `panelClass` instead.\n   */\n  extraClasses?: string | string[];\n\n  /** Text layout direction for the snack bar. */\n  direction?: Direction = 'ltr';\n\n  /** Data being injected into the child component. */\n  data?: D | null = null;\n\n  /** The horizontal position to place the snack bar. */\n  horizontalPosition?: MatSnackBarHorizontalPosition = 'center';\n\n  /** The vertical position to place the snack bar. */\n  verticalPosition?: MatSnackBarVerticalPosition = 'bottom';\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\nimport {AnimationCurves, AnimationDurations} from '@angular/material/core';\n\n/** @docs-private */\nexport const SHOW_ANIMATION =\n  `${AnimationDurations.ENTERING} ${AnimationCurves.DECELERATION_CURVE}`;\n\n/** @docs-private */\nexport const HIDE_ANIMATION =\n  `${AnimationDurations.EXITING} ${AnimationCurves.ACCELERATION_CURVE}`;\n\n/** Animations used by the Material snack bar. */\nexport const matSnackBarAnimations: {\n  readonly contentFade: AnimationTriggerMetadata;\n  readonly snackBarState: AnimationTriggerMetadata;\n} = {\n  /** Animation that slides the dialog in and out of view and fades the opacity. */\n  contentFade: trigger('contentFade', [\n    transition(':enter', [\n      style({opacity: '0'}),\n      animate(`${AnimationDurations.COMPLEX} ${AnimationCurves.STANDARD_CURVE}`)\n    ])\n  ]),\n\n  /** Animation that shows and hides a snack bar. */\n  snackBarState: trigger('state', [\n    state('visible-top, visible-bottom', style({transform: 'translateY(0%)'})),\n    transition('visible-top => hidden-top, visible-bottom => hidden-bottom',\n      animate(HIDE_ANIMATION)),\n    transition('void => visible-top, void => visible-bottom', animate(SHOW_ANIMATION)),\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Component, ViewEncapsulation, Inject, ChangeDetectionStrategy} from '@angular/core';\nimport {MatSnackBarRef} from './snack-bar-ref';\nimport {MAT_SNACK_BAR_DATA} from './snack-bar-config';\nimport {matSnackBarAnimations} from './snack-bar-animations';\n\n\n/**\n * A component used to open as the default snack bar, matching material spec.\n * This should only be used internally by the snack bar service.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'simple-snack-bar',\n  templateUrl: 'simple-snack-bar.html',\n  styleUrls: ['simple-snack-bar.css'],\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  animations: [matSnackBarAnimations.contentFade],\n  host: {\n    '[@contentFade]': '',\n    'class': 'mat-simple-snackbar',\n  }\n})\nexport class SimpleSnackBar {\n  /** Data that was injected into the snack bar. */\n  data: { message: string, action: string };\n\n  constructor(\n    public snackBarRef: MatSnackBarRef<SimpleSnackBar>,\n    @Inject(MAT_SNACK_BAR_DATA) data: any) {\n    this.data = data;\n  }\n\n  /** Performs the action on the snack bar. */\n  action(): void {\n    this.snackBarRef.closeWithAction();\n  }\n\n  /** If the action button should be shown. */\n  get hasAction(): boolean {\n    return !!this.data.action;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ComponentRef,\n  EmbeddedViewRef,\n  ViewChild,\n  NgZone,\n  OnDestroy,\n  ElementRef,\n  ChangeDetectionStrategy,\n  ViewEncapsulation,\n  ChangeDetectorRef,\n} from '@angular/core';\nimport {AnimationEvent} from '@angular/animations';\nimport {\n  BasePortalOutlet,\n  ComponentPortal,\n  CdkPortalOutlet,\n} from '@angular/cdk/portal';\nimport {take} from 'rxjs/operators/take';\nimport {Observable} from 'rxjs/Observable';\nimport {Subject} from 'rxjs/Subject';\nimport {MatSnackBarConfig} from './snack-bar-config';\nimport {matSnackBarAnimations} from './snack-bar-animations';\n\n/**\n * Internal component that wraps user-provided snack bar content.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'snack-bar-container',\n  templateUrl: 'snack-bar-container.html',\n  styleUrls: ['snack-bar-container.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  animations: [matSnackBarAnimations.snackBarState],\n  host: {\n    'role': 'alert',\n    'class': 'mat-snack-bar-container',\n    '[@state]': '_animationState',\n    '(@state.done)': 'onAnimationEnd($event)'\n  },\n})\nexport class MatSnackBarContainer extends BasePortalOutlet implements OnDestroy {\n  /** Whether the component has been destroyed. */\n  private _destroyed = false;\n\n  /** The portal outlet inside of this container into which the snack bar content will be loaded. */\n  @ViewChild(CdkPortalOutlet) _portalOutlet: CdkPortalOutlet;\n\n  /** Subject for notifying that the snack bar has exited from view. */\n  _onExit: Subject<any> = new Subject();\n\n  /** Subject for notifying that the snack bar has finished entering the view. */\n  _onEnter: Subject<any> = new Subject();\n\n  /** The state of the snack bar animations. */\n  _animationState = 'void';\n\n  /** The snack bar configuration. */\n  snackBarConfig: MatSnackBarConfig;\n\n  constructor(\n    private _ngZone: NgZone,\n    private _elementRef: ElementRef,\n    private _changeDetectorRef: ChangeDetectorRef) {\n    super();\n  }\n\n  /** Attach a component portal as content to this snack bar container. */\n  attachComponentPortal<T>(portal: ComponentPortal<T>): ComponentRef<T> {\n    if (this._portalOutlet.hasAttached()) {\n      throw Error('Attempting to attach snack bar content after content is already attached');\n    }\n\n    const element: HTMLElement = this._elementRef.nativeElement;\n\n    if (this.snackBarConfig.panelClass || this.snackBarConfig.extraClasses) {\n      this._setCssClasses(this.snackBarConfig.panelClass);\n      this._setCssClasses(this.snackBarConfig.extraClasses);\n    }\n\n    if (this.snackBarConfig.horizontalPosition === 'center') {\n      element.classList.add('mat-snack-bar-center');\n    }\n\n    if (this.snackBarConfig.verticalPosition === 'top') {\n      element.classList.add('mat-snack-bar-top');\n    }\n\n    return this._portalOutlet.attachComponentPortal(portal);\n  }\n\n  /** Attach a template portal as content to this snack bar container. */\n  attachTemplatePortal(): EmbeddedViewRef<any> {\n    throw Error('Not yet implemented');\n  }\n\n  /** Handle end of animations, updating the state of the snackbar. */\n  onAnimationEnd(event: AnimationEvent) {\n    const {fromState, toState} = event;\n\n    if ((toState === 'void' && fromState !== 'void') || toState.startsWith('hidden')) {\n      this._completeExit();\n    }\n\n    if (toState.startsWith('visible')) {\n      // Note: we shouldn't use `this` inside the zone callback,\n      // because it can cause a memory leak.\n      const onEnter = this._onEnter;\n\n      this._ngZone.run(() => {\n        onEnter.next();\n        onEnter.complete();\n      });\n    }\n  }\n\n  /** Begin animation of snack bar entrance into view. */\n  enter(): void {\n    if (!this._destroyed) {\n      this._animationState = `visible-${this.snackBarConfig.verticalPosition}`;\n      this._changeDetectorRef.detectChanges();\n    }\n  }\n\n  /** Begin animation of the snack bar exiting from view. */\n  exit(): Observable<void> {\n    this._animationState = `hidden-${this.snackBarConfig.verticalPosition}`;\n    return this._onExit;\n  }\n\n  /** Makes sure the exit callbacks have been invoked when the element is destroyed. */\n  ngOnDestroy() {\n    this._destroyed = true;\n    this._completeExit();\n  }\n\n  /**\n   * Waits for the zone to settle before removing the element. Helps prevent\n   * errors where we end up removing an element which is in the middle of an animation.\n   */\n  private _completeExit() {\n    this._ngZone.onMicrotaskEmpty.asObservable().pipe(take(1)).subscribe(() => {\n      this._onExit.next();\n      this._onExit.complete();\n    });\n  }\n\n  /** Applies the user-specified list of CSS classes to the element. */\n  private _setCssClasses(classList: undefined|string|string[]) {\n    if (!classList) {\n      return;\n    }\n\n    const element = this._elementRef.nativeElement;\n\n    if (Array.isArray(classList)) {\n      // Note that we can't use a spread here, because IE doesn't support multiple arguments.\n      classList.forEach(cssClass => element.classList.add(cssClass));\n    } else {\n      element.classList.add(classList);\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {LiveAnnouncer} from '@angular/cdk/a11y';\nimport {BreakpointObserver, Breakpoints} from '@angular/cdk/layout';\nimport {Overlay, OverlayConfig, OverlayRef} from '@angular/cdk/overlay';\nimport {ComponentPortal, ComponentType, PortalInjector} from '@angular/cdk/portal';\nimport {ComponentRef, Injectable, Injector, Optional, SkipSelf} from '@angular/core';\nimport {take} from 'rxjs/operators/take';\nimport {takeUntil} from 'rxjs/operators/takeUntil';\nimport {SimpleSnackBar} from './simple-snack-bar';\nimport {MAT_SNACK_BAR_DATA, MatSnackBarConfig} from './snack-bar-config';\nimport {MatSnackBarContainer} from './snack-bar-container';\nimport {MatSnackBarRef} from './snack-bar-ref';\n\n\n/**\n * Service to dispatch Material Design snack bar messages.\n */\n@Injectable()\nexport class MatSnackBar {\n  /**\n   * Reference to the current snack bar in the view *at this level* (in the Angular injector tree).\n   * If there is a parent snack-bar service, all operations should delegate to that parent\n   * via `_openedSnackBarRef`.\n   */\n  private _snackBarRefAtThisLevel: MatSnackBarRef<any> | null = null;\n\n  /** Reference to the currently opened snackbar at *any* level. */\n  get _openedSnackBarRef(): MatSnackBarRef<any> | null {\n    const parent = this._parentSnackBar;\n    return parent ? parent._openedSnackBarRef : this._snackBarRefAtThisLevel;\n  }\n\n  set _openedSnackBarRef(value: MatSnackBarRef<any> | null) {\n    if (this._parentSnackBar) {\n      this._parentSnackBar._openedSnackBarRef = value;\n    } else {\n      this._snackBarRefAtThisLevel = value;\n    }\n  }\n\n  constructor(\n      private _overlay: Overlay,\n      private _live: LiveAnnouncer,\n      private _injector: Injector,\n      private _breakpointObserver: BreakpointObserver,\n      @Optional() @SkipSelf() private _parentSnackBar: MatSnackBar) {}\n\n  /**\n   * Creates and dispatches a snack bar with a custom component for the content, removing any\n   * currently opened snack bars.\n   *\n   * @param component Component to be instantiated.\n   * @param config Extra configuration for the snack bar.\n   */\n  openFromComponent<T>(component: ComponentType<T>, config?: MatSnackBarConfig): MatSnackBarRef<T> {\n    const _config = _applyConfigDefaults(config);\n    const snackBarRef = this._attach(component, _config);\n\n    // When the snackbar is dismissed, clear the reference to it.\n    snackBarRef.afterDismissed().subscribe(() => {\n      // Clear the snackbar ref if it hasn't already been replaced by a newer snackbar.\n      if (this._openedSnackBarRef == snackBarRef) {\n        this._openedSnackBarRef = null;\n      }\n    });\n\n    if (this._openedSnackBarRef) {\n      // If a snack bar is already in view, dismiss it and enter the\n      // new snack bar after exit animation is complete.\n      this._openedSnackBarRef.afterDismissed().subscribe(() => {\n        snackBarRef.containerInstance.enter();\n      });\n      this._openedSnackBarRef.dismiss();\n    } else {\n      // If no snack bar is in view, enter the new snack bar.\n      snackBarRef.containerInstance.enter();\n    }\n\n    // If a dismiss timeout is provided, set up dismiss based on after the snackbar is opened.\n    if (_config.duration && _config.duration > 0) {\n      snackBarRef.afterOpened().subscribe(() => snackBarRef._dismissAfter(_config!.duration!));\n    }\n\n    if (_config.announcementMessage) {\n      this._live.announce(_config.announcementMessage, _config.politeness);\n    }\n\n    this._openedSnackBarRef = snackBarRef;\n    return this._openedSnackBarRef;\n  }\n\n  /**\n   * Opens a snackbar with a message and an optional action.\n   * @param message The message to show in the snackbar.\n   * @param action The label for the snackbar action.\n   * @param config Additional configuration options for the snackbar.\n   */\n  open(message: string, action: string = '', config?: MatSnackBarConfig):\n      MatSnackBarRef<SimpleSnackBar> {\n    const _config = _applyConfigDefaults(config);\n\n    // Since the user doesn't have access to the component, we can\n    // override the data to pass in our own message and action.\n    _config.data = {message, action};\n    _config.announcementMessage = message;\n\n    return this.openFromComponent(SimpleSnackBar, _config);\n  }\n\n  /**\n   * Dismisses the currently-visible snack bar.\n   */\n  dismiss(): void {\n    if (this._openedSnackBarRef) {\n      this._openedSnackBarRef.dismiss();\n    }\n  }\n\n  /**\n   * Attaches the snack bar container component to the overlay.\n   */\n  private _attachSnackBarContainer(overlayRef: OverlayRef,\n                                   config: MatSnackBarConfig): MatSnackBarContainer {\n    const containerPortal = new ComponentPortal(MatSnackBarContainer, config.viewContainerRef);\n    const containerRef: ComponentRef<MatSnackBarContainer> = overlayRef.attach(containerPortal);\n    containerRef.instance.snackBarConfig = config;\n    return containerRef.instance;\n  }\n\n  /**\n   * Places a new component as the content of the snack bar container.\n   */\n  private _attach<T>(component: ComponentType<T>, config: MatSnackBarConfig): MatSnackBarRef<T> {\n    const overlayRef = this._createOverlay(config);\n    const container = this._attachSnackBarContainer(overlayRef, config);\n    const snackBarRef = new MatSnackBarRef<T>(container, overlayRef);\n    const injector = this._createInjector(config, snackBarRef);\n    const portal = new ComponentPortal(component, undefined, injector);\n    const contentRef = container.attachComponentPortal(portal);\n\n    // We can't pass this via the injector, because the injector is created earlier.\n    snackBarRef.instance = contentRef.instance;\n\n    // Subscribe to the breakpoint observer and attach the mat-snack-bar-handset class as\n    // appropriate. This class is applied to the overlay element because the overlay must expand to\n    // fill the width of the screen for full width snackbars.\n    this._breakpointObserver.observe(Breakpoints.Handset).pipe(\n      takeUntil(overlayRef.detachments().pipe(take(1)))\n    ).subscribe(state => {\n      if (state.matches) {\n        overlayRef.overlayElement.classList.add('mat-snack-bar-handset');\n      } else {\n        overlayRef.overlayElement.classList.remove('mat-snack-bar-handset');\n      }\n    });\n\n    return snackBarRef;\n  }\n\n  /**\n   * Creates a new overlay and places it in the correct location.\n   * @param config The user-specified snack bar config.\n   */\n  private _createOverlay(config: MatSnackBarConfig): OverlayRef {\n    const overlayConfig = new OverlayConfig();\n    overlayConfig.direction = config.direction;\n\n    let positionStrategy = this._overlay.position().global();\n    // Set horizontal position.\n    const isRtl = config.direction === 'rtl';\n    const isLeft = (\n      config.horizontalPosition === 'left' ||\n      (config.horizontalPosition === 'start' && !isRtl) ||\n      (config.horizontalPosition === 'end' && isRtl));\n    const isRight = !isLeft && config.horizontalPosition !== 'center';\n    if (isLeft) {\n      positionStrategy.left('0');\n    } else if (isRight) {\n      positionStrategy.right('0');\n    } else {\n      positionStrategy.centerHorizontally();\n    }\n    // Set horizontal position.\n    if (config.verticalPosition === 'top') {\n      positionStrategy.top('0');\n    } else {\n      positionStrategy.bottom('0');\n    }\n\n    overlayConfig.positionStrategy = positionStrategy;\n    return this._overlay.create(overlayConfig);\n  }\n\n  /**\n   * Creates an injector to be used inside of a snack bar component.\n   * @param config Config that was used to create the snack bar.\n   * @param snackBarRef Reference to the snack bar.\n   */\n  private _createInjector<T>(\n      config: MatSnackBarConfig,\n      snackBarRef: MatSnackBarRef<T>): PortalInjector {\n\n    const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n    const injectionTokens = new WeakMap();\n\n    injectionTokens.set(MatSnackBarRef, snackBarRef);\n    injectionTokens.set(MAT_SNACK_BAR_DATA, config.data);\n\n    return new PortalInjector(userInjector || this._injector, injectionTokens);\n  }\n}\n\n/**\n * Applies default options to the snackbar config.\n * @param config The configuration to which the defaults will be applied.\n * @returns The new configuration object with defaults applied.\n */\nfunction _applyConfigDefaults(config?: MatSnackBarConfig): MatSnackBarConfig {\n  return {...new MatSnackBarConfig(), ...config};\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {LIVE_ANNOUNCER_PROVIDER} from '@angular/cdk/a11y';\nimport {LayoutModule} from '@angular/cdk/layout';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatSnackBar} from './snack-bar';\nimport {MatSnackBarContainer} from './snack-bar-container';\nimport {SimpleSnackBar} from './simple-snack-bar';\n\n\n@NgModule({\n  imports: [\n    OverlayModule,\n    PortalModule,\n    CommonModule,\n    MatCommonModule,\n    LayoutModule,\n  ],\n  exports: [MatSnackBarContainer, MatCommonModule],\n  declarations: [MatSnackBarContainer, SimpleSnackBar],\n  entryComponents: [MatSnackBarContainer, SimpleSnackBar],\n  providers: [MatSnackBar, LIVE_ANNOUNCER_PROVIDER]\n})\nexport class MatSnackBarModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Directive,\n  EventEmitter,\n  Input,\n  isDevMode,\n  Output,\n  OnChanges,\n  OnDestroy,\n} from '@angular/core';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {CanDisable, mixinDisabled} from '@angular/material/core';\nimport {SortDirection} from './sort-direction';\nimport {\n  getSortInvalidDirectionError,\n  getSortDuplicateSortableIdError,\n  getSortHeaderMissingIdError\n} from './sort-errors';\nimport {Subject} from 'rxjs/Subject';\n\n/** Interface for a directive that holds sorting state consumed by `MatSortHeader`. */\nexport interface MatSortable {\n  /** The id of the column being sorted. */\n  id: string;\n\n  /** Starting sort direction. */\n  start: 'asc' | 'desc';\n\n  /** Whether to disable clearing the sorting state. */\n  disableClear: boolean;\n}\n\n/** The current sort state. */\nexport interface Sort {\n  /** The id of the column being sorted. */\n  active: string;\n\n  /** The sort direction. */\n  direction: SortDirection;\n}\n\n// Boilerplate for applying mixins to MatSort.\n/** @docs-private */\nexport class MatSortBase {}\nexport const _MatSortMixinBase = mixinDisabled(MatSortBase);\n\n/** Container for MatSortables to manage the sort state and provide default sort parameters. */\n@Directive({\n  selector: '[matSort]',\n  exportAs: 'matSort',\n  inputs: ['disabled: matSortDisabled']\n})\nexport class MatSort extends _MatSortMixinBase implements CanDisable, OnChanges, OnDestroy {\n  /** Collection of all registered sortables that this directive manages. */\n  sortables = new Map<string, MatSortable>();\n\n  /** Used to notify any child components listening to state changes. */\n  _stateChanges = new Subject<void>();\n\n  /** The id of the most recently sorted MatSortable. */\n  @Input('matSortActive') active: string;\n\n  /**\n   * The direction to set when an MatSortable is initially sorted.\n   * May be overriden by the MatSortable's sort start.\n   */\n  @Input('matSortStart') start: 'asc' | 'desc' = 'asc';\n\n  /** The sort direction of the currently active MatSortable. */\n  @Input('matSortDirection')\n  get direction(): SortDirection { return this._direction; }\n  set direction(direction: SortDirection) {\n    if (isDevMode() && direction && direction !== 'asc' && direction !== 'desc') {\n      throw getSortInvalidDirectionError(direction);\n    }\n    this._direction = direction;\n  }\n  private _direction: SortDirection = '';\n\n  /**\n   * Whether to disable the user from clearing the sort by finishing the sort direction cycle.\n   * May be overriden by the MatSortable's disable clear input.\n   */\n  @Input('matSortDisableClear')\n  get disableClear(): boolean { return this._disableClear; }\n  set disableClear(v: boolean) { this._disableClear = coerceBooleanProperty(v); }\n  private _disableClear: boolean;\n\n  /** Event emitted when the user changes either the active sort or sort direction. */\n  @Output('matSortChange') readonly sortChange: EventEmitter<Sort> = new EventEmitter<Sort>();\n\n  /**\n   * Register function to be used by the contained MatSortables. Adds the MatSortable to the\n   * collection of MatSortables.\n   */\n  register(sortable: MatSortable): void {\n    if (!sortable.id) {\n      throw getSortHeaderMissingIdError();\n    }\n\n    if (this.sortables.has(sortable.id)) {\n      throw getSortDuplicateSortableIdError(sortable.id);\n    }\n    this.sortables.set(sortable.id, sortable);\n  }\n\n  /**\n   * Unregister function to be used by the contained MatSortables. Removes the MatSortable from the\n   * collection of contained MatSortables.\n   */\n  deregister(sortable: MatSortable): void {\n    this.sortables.delete(sortable.id);\n  }\n\n  /** Sets the active sort id and determines the new sort direction. */\n  sort(sortable: MatSortable): void {\n    if (this.active != sortable.id) {\n      this.active = sortable.id;\n      this.direction = sortable.start ? sortable.start : this.start;\n    } else {\n      this.direction = this.getNextSortDirection(sortable);\n    }\n\n    this.sortChange.next({active: this.active, direction: this.direction});\n  }\n\n  /** Returns the next sort direction of the active sortable, checking for potential overrides. */\n  getNextSortDirection(sortable: MatSortable): SortDirection {\n    if (!sortable) { return ''; }\n\n    // Get the sort direction cycle with the potential sortable overrides.\n    const disableClear = sortable.disableClear != null ? sortable.disableClear : this.disableClear;\n    let sortDirectionCycle = getSortDirectionCycle(sortable.start || this.start, disableClear);\n\n    // Get and return the next direction in the cycle\n    let nextDirectionIndex = sortDirectionCycle.indexOf(this.direction) + 1;\n    if (nextDirectionIndex >= sortDirectionCycle.length) { nextDirectionIndex = 0; }\n    return sortDirectionCycle[nextDirectionIndex];\n  }\n\n  ngOnChanges() {\n    this._stateChanges.next();\n  }\n\n  ngOnDestroy() {\n    this._stateChanges.complete();\n  }\n}\n\n/** Returns the sort direction cycle to use given the provided parameters of order and clear. */\nfunction getSortDirectionCycle(start: 'asc' | 'desc',\n                               disableClear: boolean): SortDirection[] {\n  let sortOrder: SortDirection[] = ['asc', 'desc'];\n  if (start == 'desc') { sortOrder.reverse(); }\n  if (!disableClear) { sortOrder.push(''); }\n\n  return sortOrder;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable, SkipSelf, Optional} from '@angular/core';\nimport {Subject} from 'rxjs/Subject';\nimport {SortDirection} from './sort-direction';\n\n/**\n * To modify the labels and text displayed, create a new instance of MatSortHeaderIntl and\n * include it in a custom provider.\n */\n@Injectable()\nexport class MatSortHeaderIntl {\n  /**\n   * Stream that emits whenever the labels here are changed. Use this to notify\n   * components if the labels have changed after initialization.\n   */\n  changes: Subject<void> = new Subject<void>();\n\n  /** ARIA label for the sorting button. */\n  sortButtonLabel = (id: string) => {\n    return `Change sorting for ${id}`;\n  }\n\n  /** A label to describe the current sort (visible only to screenreaders). */\n  sortDescriptionLabel = (id: string, direction: SortDirection) => {\n    return `Sorted by ${id} ${direction == 'asc' ? 'ascending' : 'descending'}`;\n  }\n}\n/** @docs-private */\nexport function MAT_SORT_HEADER_INTL_PROVIDER_FACTORY(parentIntl: MatSortHeaderIntl) {\n  return parentIntl || new MatSortHeaderIntl();\n}\n\n/** @docs-private */\nexport const MAT_SORT_HEADER_INTL_PROVIDER = {\n  // If there is already an MatSortHeaderIntl available, use that. Otherwise, provide a new one.\n  provide: MatSortHeaderIntl,\n  deps: [[new Optional(), new SkipSelf(), MatSortHeaderIntl]],\n  useFactory: MAT_SORT_HEADER_INTL_PROVIDER_FACTORY\n};\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  keyframes,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\nimport {AnimationCurves, AnimationDurations} from '@angular/material/core';\n\nconst SORT_ANIMATION_TRANSITION = AnimationDurations.ENTERING + ' ' +\n                                  AnimationCurves.STANDARD_CURVE;\n\n/** Animations used by MatSort. */\nexport const matSortAnimations: {\n  readonly indicator: AnimationTriggerMetadata;\n  readonly leftPointer: AnimationTriggerMetadata;\n  readonly rightPointer: AnimationTriggerMetadata;\n  readonly indicatorToggle: AnimationTriggerMetadata;\n} = {\n  /** Animation that moves the sort indicator. */\n  indicator: trigger('indicator', [\n    state('asc', style({transform: 'translateY(0px)'})),\n    // 10px is the height of the sort indicator, minus the width of the pointers\n    state('desc', style({transform: 'translateY(10px)'})),\n    transition('asc <=> desc', animate(SORT_ANIMATION_TRANSITION))\n  ]),\n\n  /** Animation that rotates the left pointer of the indicator based on the sorting direction. */\n  leftPointer: trigger('leftPointer', [\n    state('asc', style({transform: 'rotate(-45deg)'})),\n    state('desc', style({transform: 'rotate(45deg)'})),\n    transition('asc <=> desc', animate(SORT_ANIMATION_TRANSITION))\n  ]),\n\n  /** Animation that rotates the right pointer of the indicator based on the sorting direction. */\n  rightPointer: trigger('rightPointer', [\n    state('asc', style({transform: 'rotate(45deg)'})),\n    state('desc', style({transform: 'rotate(-45deg)'})),\n    transition('asc <=> desc', animate(SORT_ANIMATION_TRANSITION))\n  ]),\n\n  /** Animation that moves the indicator in and out of view when sorting is enabled/disabled. */\n  indicatorToggle: trigger('indicatorToggle', [\n    transition('void => asc', animate(SORT_ANIMATION_TRANSITION, keyframes([\n      style({transform: 'translateY(25%)', opacity: 0}),\n      style({transform: 'none', opacity: 1})\n    ]))),\n    transition('asc => void', animate(SORT_ANIMATION_TRANSITION, keyframes([\n      style({transform: 'none', opacity: 1}),\n      style({transform: 'translateY(-25%)', opacity: 0})\n    ]))),\n    transition('void => desc', animate(SORT_ANIMATION_TRANSITION, keyframes([\n      style({transform: 'translateY(-25%)', opacity: 0}),\n      style({transform: 'none', opacity: 1})\n    ]))),\n    transition('desc => void', animate(SORT_ANIMATION_TRANSITION, keyframes([\n      style({transform: 'none', opacity: 1}),\n      style({transform: 'translateY(25%)', opacity: 0})\n    ]))),\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  Input,\n  Optional,\n  ViewEncapsulation\n} from '@angular/core';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {CdkColumnDef} from '@angular/cdk/table';\nimport {Subscription} from 'rxjs/Subscription';\nimport {merge} from 'rxjs/observable/merge';\nimport {MatSort, MatSortable} from './sort';\nimport {MatSortHeaderIntl} from './sort-header-intl';\nimport {getSortHeaderNotContainedWithinSortError} from './sort-errors';\nimport {CanDisable, mixinDisabled} from '@angular/material/core';\nimport {matSortAnimations} from './sort-animations';\n\n// Boilerplate for applying mixins to the sort header.\n/** @docs-private */\nexport class MatSortHeaderBase {}\nexport const _MatSortHeaderMixinBase = mixinDisabled(MatSortHeaderBase);\n\n\n/**\n * Applies sorting behavior (click to change sort) and styles to an element, including an\n * arrow to display the current sort direction.\n *\n * Must be provided with an id and contained within a parent MatSort directive.\n *\n * If used on header cells in a CdkTable, it will automatically default its id from its containing\n * column definition.\n */\n@Component({\n  moduleId: module.id,\n  selector: '[mat-sort-header]',\n  exportAs: 'matSortHeader',\n  templateUrl: 'sort-header.html',\n  styleUrls: ['sort-header.css'],\n  host: {\n    '(click)': '_handleClick()',\n    '[class.mat-sort-header-sorted]': '_isSorted()',\n    '[class.mat-sort-header-disabled]': '_isDisabled()',\n  },\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  inputs: ['disabled'],\n  animations: [\n    matSortAnimations.indicator,\n    matSortAnimations.leftPointer,\n    matSortAnimations.rightPointer,\n    matSortAnimations.indicatorToggle\n  ]\n})\nexport class MatSortHeader extends _MatSortHeaderMixinBase implements MatSortable, CanDisable {\n  private _rerenderSubscription: Subscription;\n\n  /**\n   * ID of this sort header. If used within the context of a CdkColumnDef, this will default to\n   * the column's name.\n   */\n  @Input('mat-sort-header') id: string;\n\n  /** Sets the position of the arrow that displays when sorted. */\n  @Input() arrowPosition: 'before' | 'after' = 'after';\n\n  /** Overrides the sort start value of the containing MatSort for this MatSortable. */\n  @Input() start: 'asc' | 'desc';\n\n  /** Overrides the disable clear value of the containing MatSort for this MatSortable. */\n  @Input()\n  get disableClear(): boolean { return this._disableClear; }\n  set disableClear(v) { this._disableClear = coerceBooleanProperty(v); }\n  private _disableClear: boolean;\n\n  constructor(public _intl: MatSortHeaderIntl,\n              changeDetectorRef: ChangeDetectorRef,\n              @Optional() public _sort: MatSort,\n              @Optional() public _cdkColumnDef: CdkColumnDef) {\n\n    super();\n\n    if (!_sort) {\n      throw getSortHeaderNotContainedWithinSortError();\n    }\n\n    this._rerenderSubscription = merge(_sort.sortChange, _sort._stateChanges, _intl.changes)\n      .subscribe(() => changeDetectorRef.markForCheck());\n  }\n\n  ngOnInit() {\n    if (!this.id && this._cdkColumnDef) {\n      this.id = this._cdkColumnDef.name;\n    }\n\n    this._sort.register(this);\n  }\n\n  ngOnDestroy() {\n    this._sort.deregister(this);\n    this._rerenderSubscription.unsubscribe();\n  }\n\n  /** Handles click events on the header. */\n  _handleClick() {\n    if (!this._isDisabled()) {\n      this._sort.sort(this);\n    }\n  }\n\n  /** Whether this MatSortHeader is currently sorted in either ascending or descending order. */\n  _isSorted() {\n    return this._sort.active == this.id &&\n        (this._sort.direction === 'asc' || this._sort.direction === 'desc');\n  }\n\n  _isDisabled() {\n    return this._sort.disabled || this.disabled;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatSortHeader} from './sort-header';\nimport {MatSort} from './sort';\nimport {MAT_SORT_HEADER_INTL_PROVIDER} from './sort-header-intl';\nimport {CommonModule} from '@angular/common';\n\n\n@NgModule({\n  imports: [CommonModule],\n  exports: [MatSort, MatSortHeader],\n  declarations: [MatSort, MatSortHeader],\n  providers: [MAT_SORT_HEADER_INTL_PROVIDER]\n})\nexport class MatSortModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, TemplateRef} from '@angular/core';\nimport {CdkStepLabel} from '@angular/cdk/stepper';\n\n@Directive({\n  selector: '[matStepLabel]',\n})\nexport class MatStepLabel extends CdkStepLabel {\n  constructor(template: TemplateRef<any>) {\n    super(template);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable} from '@angular/core';\nimport {Subject} from 'rxjs/Subject';\n\n\n/** Stepper data that is required for internationalization. */\n@Injectable()\nexport class MatStepperIntl {\n  /**\n   * Stream that emits whenever the labels here are changed. Use this to notify\n   * components if the labels have changed after initialization.\n   */\n  changes: Subject<void> = new Subject<void>();\n\n  /** Label that is rendered below optional steps. */\n  optionalLabel: string = 'Optional';\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty, coerceNumberProperty} from '@angular/cdk/coercion';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  Input,\n  OnDestroy,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {Subscription} from 'rxjs/Subscription';\nimport {MatStepLabel} from './step-label';\nimport {MatStepperIntl} from './stepper-intl';\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-step-header',\n  templateUrl: 'step-header.html',\n  styleUrls: ['step-header.css'],\n  host: {\n    'class': 'mat-step-header',\n    'role': 'tab',\n  },\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatStepHeader implements OnDestroy {\n  private _intlSubscription: Subscription;\n\n  /** Icon for the given step. */\n  @Input() icon: string;\n\n  /** Label of the given step. */\n  @Input() label: MatStepLabel | string;\n\n  /** Index of the given step. */\n  @Input()\n  get index(): number { return this._index; }\n  set index(value: number) { this._index = coerceNumberProperty(value); }\n  private _index: number;\n\n  /** Whether the given step is selected. */\n  @Input()\n  get selected(): boolean { return this._selected; }\n  set selected(value: boolean) { this._selected = coerceBooleanProperty(value); }\n  private _selected: boolean;\n\n  /** Whether the given step label is active. */\n  @Input()\n  get active(): boolean { return this._active; }\n  set active(value: boolean) { this._active = coerceBooleanProperty(value); }\n  private _active: boolean;\n\n  /** Whether the given step is optional. */\n  @Input()\n  get optional(): boolean { return this._optional; }\n  set optional(value: boolean) { this._optional = coerceBooleanProperty(value); }\n  private _optional: boolean;\n\n  constructor(\n    public _intl: MatStepperIntl,\n    private _focusMonitor: FocusMonitor,\n    private _element: ElementRef,\n    changeDetectorRef: ChangeDetectorRef) {\n    _focusMonitor.monitor(_element.nativeElement, true);\n    this._intlSubscription = _intl.changes.subscribe(() => changeDetectorRef.markForCheck());\n  }\n\n  ngOnDestroy() {\n    this._intlSubscription.unsubscribe();\n    this._focusMonitor.stopMonitoring(this._element.nativeElement);\n  }\n\n  /** Returns string label of given step if it is a text label. */\n  _stringLabel(): string | null {\n    return this.label instanceof MatStepLabel ? null : this.label;\n  }\n\n  /** Returns MatStepLabel if the label of given step is a template label. */\n  _templateLabel(): MatStepLabel | null {\n    return this.label instanceof MatStepLabel ? this.label : null;\n  }\n\n  /** Returns the host HTML element. */\n  _getHostElement() {\n    return this._element.nativeElement;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/** Animations used by the Material steppers. */\nexport const matStepperAnimations: {\n  readonly horizontalStepTransition: AnimationTriggerMetadata;\n  readonly verticalStepTransition: AnimationTriggerMetadata;\n} = {\n  /** Animation that transitions the step along the X axis in a horizontal stepper. */\n  horizontalStepTransition: trigger('stepTransition', [\n    state('previous', style({transform: 'translate3d(-100%, 0, 0)', visibility: 'hidden'})),\n    state('current', style({transform: 'none', visibility: 'visible'})),\n    state('next', style({transform: 'translate3d(100%, 0, 0)', visibility: 'hidden'})),\n    transition('* => *', animate('500ms cubic-bezier(0.35, 0, 0.25, 1)'))\n  ]),\n\n  /** Animation that transitions the step along the Y axis in a vertical stepper. */\n  verticalStepTransition: trigger('stepTransition', [\n    state('previous', style({height: '0px', visibility: 'hidden'})),\n    state('next', style({height: '0px', visibility: 'hidden'})),\n    state('current', style({height: '*', visibility: 'visible'})),\n    transition('* <=> current', animate('225ms cubic-bezier(0.4, 0.0, 0.2, 1)'))\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CdkStep, CdkStepper} from '@angular/cdk/stepper';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {\n  AfterContentInit,\n  Component,\n  ContentChild,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  forwardRef,\n  Inject,\n  QueryList,\n  SkipSelf,\n  ViewChildren,\n  ViewEncapsulation,\n  ChangeDetectorRef,\n  ChangeDetectionStrategy,\n  Optional,\n} from '@angular/core';\nimport {FormControl, FormGroupDirective, NgForm} from '@angular/forms';\nimport {ErrorStateMatcher} from '@angular/material/core';\nimport {MatStepHeader} from './step-header';\nimport {MatStepLabel} from './step-label';\nimport {takeUntil} from 'rxjs/operators/takeUntil';\nimport {matStepperAnimations} from './stepper-animations';\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-step',\n  templateUrl: 'step.html',\n  providers: [{provide: ErrorStateMatcher, useExisting: MatStep}],\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matStep',\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatStep extends CdkStep implements ErrorStateMatcher {\n  /** Content for step label given by <ng-template matStepLabel>. */\n  @ContentChild(MatStepLabel) stepLabel: MatStepLabel;\n\n  constructor(@Inject(forwardRef(() => MatStepper)) stepper: MatStepper,\n              @SkipSelf() private _errorStateMatcher: ErrorStateMatcher) {\n    super(stepper);\n  }\n\n  /** Custom error state matcher that additionally checks for validity of interacted form. */\n  isErrorState(control: FormControl | null, form: FormGroupDirective | NgForm | null): boolean {\n    const originalErrorState = this._errorStateMatcher.isErrorState(control, form);\n\n    // Custom error state checks for the validity of form that is not submitted or touched\n    // since user can trigger a form change by calling for another step without directly\n    // interacting with the current form.\n    const customErrorState = !!(control && control.invalid && this.interacted);\n\n    return originalErrorState || customErrorState;\n  }\n}\n\n@Directive({\n  selector: '[matStepper]'\n})\nexport class MatStepper extends CdkStepper implements AfterContentInit {\n  /** The list of step headers of the steps in the stepper. */\n  @ViewChildren(MatStepHeader, {read: ElementRef}) _stepHeader: QueryList<ElementRef>;\n\n  /** Steps that the stepper holds. */\n  @ContentChildren(MatStep) _steps: QueryList<MatStep>;\n\n  ngAfterContentInit() {\n    // Mark the component for change detection whenever the content children query changes\n    this._steps.changes.pipe(takeUntil(this._destroyed)).subscribe(() => this._stateChanged());\n  }\n}\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-horizontal-stepper',\n  exportAs: 'matHorizontalStepper',\n  templateUrl: 'stepper-horizontal.html',\n  styleUrls: ['stepper.css'],\n  inputs: ['selectedIndex'],\n  host: {\n    'class': 'mat-stepper-horizontal',\n    'aria-orientation': 'horizontal',\n    'role': 'tablist',\n  },\n  animations: [matStepperAnimations.horizontalStepTransition],\n  providers: [{provide: MatStepper, useExisting: MatHorizontalStepper}],\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatHorizontalStepper extends MatStepper { }\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-vertical-stepper',\n  exportAs: 'matVerticalStepper',\n  templateUrl: 'stepper-vertical.html',\n  styleUrls: ['stepper.css'],\n  inputs: ['selectedIndex'],\n  host: {\n    'class': 'mat-stepper-vertical',\n    'aria-orientation': 'vertical',\n    'role': 'tablist',\n  },\n  animations: [matStepperAnimations.verticalStepTransition],\n  providers: [{provide: MatStepper, useExisting: MatVerticalStepper}],\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatVerticalStepper extends MatStepper {\n  constructor(@Optional() dir: Directionality, changeDetectorRef: ChangeDetectorRef) {\n    super(dir, changeDetectorRef);\n    this._orientation = 'vertical';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive} from '@angular/core';\nimport {CdkStepper, CdkStepperNext, CdkStepperPrevious} from '@angular/cdk/stepper';\nimport {MatStepper} from './stepper';\n\n/** Button that moves to the next step in a stepper workflow. */\n@Directive({\n  selector: 'button[matStepperNext]',\n  host: {\n    '(click)': '_stepper.next()',\n    '[type]': 'type',\n  },\n  inputs: ['type'],\n  providers: [{provide: CdkStepper, useExisting: MatStepper}]\n})\nexport class MatStepperNext extends CdkStepperNext {}\n\n/** Button that moves to the previous step in a stepper workflow. */\n@Directive({\n  selector: 'button[matStepperPrevious]',\n  host: {\n    '(click)': '_stepper.previous()',\n    '[type]': 'type',\n  },\n  inputs: ['type'],\n  providers: [{provide: CdkStepper, useExisting: MatStepper}]\n})\nexport class MatStepperPrevious extends CdkStepperPrevious {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {A11yModule} from '@angular/cdk/a11y';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {CdkStepperModule} from '@angular/cdk/stepper';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatButtonModule} from '@angular/material/button';\nimport {MatCommonModule, MatRippleModule, ErrorStateMatcher} from '@angular/material/core';\nimport {MatIconModule} from '@angular/material/icon';\nimport {MatStepHeader} from './step-header';\nimport {MatStepLabel} from './step-label';\nimport {MatHorizontalStepper, MatStep, MatStepper, MatVerticalStepper} from './stepper';\nimport {MatStepperNext, MatStepperPrevious} from './stepper-button';\nimport {MatStepperIntl} from './stepper-intl';\n\n\n@NgModule({\n  imports: [\n    MatCommonModule,\n    CommonModule,\n    PortalModule,\n    MatButtonModule,\n    CdkStepperModule,\n    MatIconModule,\n    A11yModule,\n    MatRippleModule,\n  ],\n  exports: [\n    MatCommonModule,\n    MatHorizontalStepper,\n    MatVerticalStepper,\n    MatStep,\n    MatStepLabel,\n    MatStepper,\n    MatStepperNext,\n    MatStepperPrevious,\n    MatStepHeader\n  ],\n  declarations: [MatHorizontalStepper, MatVerticalStepper, MatStep, MatStepLabel, MatStepper,\n    MatStepperNext, MatStepperPrevious, MatStepHeader],\n  providers: [MatStepperIntl, ErrorStateMatcher],\n})\nexport class MatStepperModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ChangeDetectionStrategy, Component, ViewEncapsulation} from '@angular/core';\nimport {CDK_TABLE_TEMPLATE, CdkTable} from '@angular/cdk/table';\n\n/**\n * Wrapper for the CdkTable with Material design styles.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-table',\n  exportAs: 'matTable',\n  template: CDK_TABLE_TEMPLATE,\n  styleUrls: ['table.css'],\n  host: {\n    'class': 'mat-table',\n  },\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatTable<T> extends CdkTable<T> { }\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, ElementRef, Input} from '@angular/core';\nimport {\n  CdkCell,\n  CdkCellDef,\n  CdkColumnDef,\n  CdkHeaderCell,\n  CdkHeaderCellDef,\n} from '@angular/cdk/table';\n\n/**\n * Cell definition for the mat-table.\n * Captures the template of a column's data row cell as well as cell-specific properties.\n */\n@Directive({\n  selector: '[matCellDef]',\n  providers: [{provide: CdkCellDef, useExisting: MatCellDef}]\n})\nexport class MatCellDef extends CdkCellDef { }\n\n/**\n * Header cell definition for the mat-table.\n * Captures the template of a column's header cell and as well as cell-specific properties.\n */\n@Directive({\n  selector: '[matHeaderCellDef]',\n  providers: [{provide: CdkHeaderCellDef, useExisting: MatHeaderCellDef}]\n})\nexport class MatHeaderCellDef extends CdkHeaderCellDef { }\n\n/**\n * Column definition for the mat-table.\n * Defines a set of cells available for a table column.\n */\n@Directive({\n  selector: '[matColumnDef]',\n  providers: [{provide: CdkColumnDef, useExisting: MatColumnDef}],\n})\nexport class MatColumnDef extends CdkColumnDef {\n  /** Unique name for this column. */\n  @Input('matColumnDef') name: string;\n}\n\n/** Header cell template container that adds the right classes and role. */\n@Directive({\n  selector: 'mat-header-cell',\n  host: {\n    'class': 'mat-header-cell',\n    'role': 'columnheader',\n  },\n})\nexport class MatHeaderCell extends CdkHeaderCell {\n  constructor(columnDef: CdkColumnDef,\n              elementRef: ElementRef) {\n    super(columnDef, elementRef);\n    elementRef.nativeElement.classList.add(`mat-column-${columnDef.cssClassFriendlyName}`);\n  }\n}\n\n/** Cell template container that adds the right classes and role. */\n@Directive({\n  selector: 'mat-cell',\n  host: {\n    'class': 'mat-cell',\n    'role': 'gridcell',\n  },\n})\nexport class MatCell extends CdkCell {\n  constructor(columnDef: CdkColumnDef,\n              elementRef: ElementRef) {\n    super(columnDef, elementRef);\n    elementRef.nativeElement.classList.add(`mat-column-${columnDef.cssClassFriendlyName}`);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  ChangeDetectionStrategy, ChangeDetectorRef,\n  Component, ContentChild,\n  ContentChildren, forwardRef, Inject, Input,\n  ViewEncapsulation\n} from '@angular/core';\nimport {MatDrawer, MatDrawerContainer, MatDrawerContent} from './drawer';\nimport {matDrawerAnimations} from './drawer-animations';\nimport {coerceBooleanProperty, coerceNumberProperty} from '@angular/cdk/coercion';\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-sidenav-content',\n  template: '<ng-content></ng-content>',\n  host: {\n    'class': 'mat-drawer-content mat-sidenav-content',\n    '[style.margin-left.px]': '_margins.left',\n    '[style.margin-right.px]': '_margins.right',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n})\nexport class MatSidenavContent extends MatDrawerContent {\n  constructor(\n      changeDetectorRef: ChangeDetectorRef,\n      @Inject(forwardRef(() => MatSidenavContainer)) container: MatSidenavContainer) {\n    super(changeDetectorRef, container);\n  }\n}\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-sidenav',\n  exportAs: 'matSidenav',\n  template: '<ng-content></ng-content>',\n  animations: [matDrawerAnimations.transformDrawer],\n  host: {\n    'class': 'mat-drawer mat-sidenav',\n    'tabIndex': '-1',\n    '[@transform]': '_animationState',\n    '(@transform.start)': '_onAnimationStart($event)',\n    '(@transform.done)': '_onAnimationEnd($event)',\n    '(keydown)': 'handleKeydown($event)',\n    // must prevent the browser from aligning text based on value\n    '[attr.align]': 'null',\n    '[class.mat-drawer-end]': 'position === \"end\"',\n    '[class.mat-drawer-over]': 'mode === \"over\"',\n    '[class.mat-drawer-push]': 'mode === \"push\"',\n    '[class.mat-drawer-side]': 'mode === \"side\"',\n    '[class.mat-sidenav-fixed]': 'fixedInViewport',\n    '[style.top.px]': 'fixedInViewport ? fixedTopGap : null',\n    '[style.bottom.px]': 'fixedInViewport ? fixedBottomGap : null',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n})\nexport class MatSidenav extends MatDrawer {\n  /** Whether the sidenav is fixed in the viewport. */\n  @Input()\n  get fixedInViewport(): boolean { return this._fixedInViewport; }\n  set fixedInViewport(value) { this._fixedInViewport = coerceBooleanProperty(value); }\n  private _fixedInViewport = false;\n\n  /**\n   * The gap between the top of the sidenav and the top of the viewport when the sidenav is in fixed\n   * mode.\n   */\n  @Input()\n  get fixedTopGap(): number { return this._fixedTopGap; }\n  set fixedTopGap(value) { this._fixedTopGap = coerceNumberProperty(value); }\n  private _fixedTopGap = 0;\n\n  /**\n   * The gap between the bottom of the sidenav and the bottom of the viewport when the sidenav is in\n   * fixed mode.\n   */\n  @Input()\n  get fixedBottomGap(): number { return this._fixedBottomGap; }\n  set fixedBottomGap(value) { this._fixedBottomGap = coerceNumberProperty(value); }\n  private _fixedBottomGap = 0;\n}\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-sidenav-container',\n  exportAs: 'matSidenavContainer',\n  templateUrl: 'sidenav-container.html',\n  styleUrls: ['drawer.css'],\n  host: {\n    'class': 'mat-drawer-container mat-sidenav-container',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n})\nexport class MatSidenavContainer extends MatDrawerContainer {\n  @ContentChildren(MatSidenav) _drawers;\n\n  @ContentChild(MatSidenavContent) _content;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {A11yModule} from '@angular/cdk/a11y';\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {ScrollDispatchModule} from '@angular/cdk/scrolling';\nimport {PlatformModule} from '@angular/cdk/platform';\nimport {MatSidenav, MatSidenavContainer, MatSidenavContent} from './sidenav';\nimport {\n  MatDrawer,\n  MatDrawerContainer,\n  MatDrawerContent,\n  MAT_DRAWER_DEFAULT_AUTOSIZE,\n} from './drawer';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatCommonModule,\n    A11yModule,\n    OverlayModule,\n    ScrollDispatchModule,\n    PlatformModule,\n  ],\n  exports: [\n    MatCommonModule,\n    MatDrawer,\n    MatDrawerContainer,\n    MatDrawerContent,\n    MatSidenav,\n    MatSidenavContainer,\n    MatSidenavContent,\n  ],\n  declarations: [\n    MatDrawer,\n    MatDrawerContainer,\n    MatDrawerContent,\n    MatSidenav,\n    MatSidenavContainer,\n    MatSidenavContent,\n  ],\n  providers: [\n    {provide: MAT_DRAWER_DEFAULT_AUTOSIZE, useValue: false}\n  ]\n})\nexport class MatSidenavModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor, FocusOrigin} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {Platform} from '@angular/cdk/platform';\nimport {\n  AfterContentInit,\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Input,\n  OnDestroy,\n  Output,\n  ViewChild,\n  ViewEncapsulation\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {\n  applyCssTransform,\n  CanColor,\n  CanDisable,\n  CanDisableRipple,\n  HammerInput,\n  HasTabIndex,\n  MatRipple,\n  mixinColor,\n  mixinDisabled,\n  mixinDisableRipple,\n  mixinTabIndex,\n  RippleConfig,\n  RippleRef,\n} from '@angular/material/core';\n\n// Increasing integer for generating unique ids for slide-toggle components.\nlet nextUniqueId = 0;\n\nexport const MAT_SLIDE_TOGGLE_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatSlideToggle),\n  multi: true\n};\n\n/** Change event object emitted by a MatSlideToggle. */\nexport class MatSlideToggleChange {\n  constructor(\n    /** The source MatSlideToggle of the event. */\n    public source: MatSlideToggle,\n    /** The new `checked` value of the MatSlideToggle. */\n    public checked: boolean) { }\n}\n\n// Boilerplate for applying mixins to MatSlideToggle.\n/** @docs-private */\nexport class MatSlideToggleBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatSlideToggleMixinBase =\n  mixinTabIndex(mixinColor(mixinDisableRipple(mixinDisabled(MatSlideToggleBase)), 'accent'));\n\n/** Represents a slidable \"switch\" toggle that can be moved between on and off. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-slide-toggle',\n  exportAs: 'matSlideToggle',\n  host: {\n    'class': 'mat-slide-toggle',\n    '[id]': 'id',\n    '[class.mat-checked]': 'checked',\n    '[class.mat-disabled]': 'disabled',\n    '[class.mat-slide-toggle-label-before]': 'labelPosition == \"before\"',\n  },\n  templateUrl: 'slide-toggle.html',\n  styleUrls: ['slide-toggle.css'],\n  providers: [MAT_SLIDE_TOGGLE_VALUE_ACCESSOR],\n  inputs: ['disabled', 'disableRipple', 'color', 'tabIndex'],\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatSlideToggle extends _MatSlideToggleMixinBase implements OnDestroy, AfterContentInit,\n    ControlValueAccessor, CanDisable, CanColor, HasTabIndex, CanDisableRipple {\n\n  private onChange = (_: any) => {};\n  private onTouched = () => {};\n\n  private _uniqueId: string = `mat-slide-toggle-${++nextUniqueId}`;\n  private _slideRenderer: SlideToggleRenderer;\n  private _required: boolean = false;\n  private _checked: boolean = false;\n\n  /** Reference to the focus state ripple. */\n  private _focusRipple: RippleRef | null;\n\n  /** Name value will be applied to the input element if present */\n  @Input() name: string | null = null;\n\n  /** A unique id for the slide-toggle input. If none is supplied, it will be auto-generated. */\n  @Input() id: string = this._uniqueId;\n\n  /** Whether the label should appear after or before the slide-toggle. Defaults to 'after' */\n  @Input() labelPosition: 'before' | 'after' = 'after';\n\n  /** Whether the slide-toggle element is checked or not */\n\n  /** Used to set the aria-label attribute on the underlying input element. */\n  @Input('aria-label') ariaLabel: string | null = null;\n\n  /** Used to set the aria-labelledby attribute on the underlying input element. */\n  @Input('aria-labelledby') ariaLabelledby: string | null = null;\n\n  /** Whether the slide-toggle is required. */\n  @Input()\n  get required(): boolean { return this._required; }\n  set required(value) { this._required = coerceBooleanProperty(value); }\n\n  /** Whether the slide-toggle element is checked or not */\n  @Input()\n  get checked(): boolean { return this._checked; }\n  set checked(value) {\n    this._checked = coerceBooleanProperty(value);\n    this._changeDetectorRef.markForCheck();\n  }\n  /** An event will be dispatched each time the slide-toggle changes its value. */\n  @Output() change: EventEmitter<MatSlideToggleChange> = new EventEmitter<MatSlideToggleChange>();\n\n  /** Returns the unique id for the visual hidden input. */\n  get inputId(): string { return `${this.id || this._uniqueId}-input`; }\n\n  /** Reference to the underlying input element. */\n  @ViewChild('input') _inputElement: ElementRef;\n\n  /** Reference to the ripple directive on the thumb container. */\n  @ViewChild(MatRipple) _ripple: MatRipple;\n\n  /** Ripple configuration for the mouse ripples and focus indicators. */\n  _rippleConfig: RippleConfig = {centered: true, radius: 23, speedFactor: 1.5};\n\n  constructor(elementRef: ElementRef,\n              private _platform: Platform,\n              private _focusMonitor: FocusMonitor,\n              private _changeDetectorRef: ChangeDetectorRef,\n              @Attribute('tabindex') tabIndex: string) {\n\n    super(elementRef);\n    this.tabIndex = parseInt(tabIndex) || 0;\n  }\n\n  ngAfterContentInit() {\n    this._slideRenderer = new SlideToggleRenderer(this._elementRef, this._platform);\n\n    this._focusMonitor\n      .monitor(this._inputElement.nativeElement)\n      .subscribe(focusOrigin => this._onInputFocusChange(focusOrigin));\n  }\n\n  ngOnDestroy() {\n    this._focusMonitor.stopMonitoring(this._inputElement.nativeElement);\n  }\n\n  /** Method being called whenever the underlying input emits a change event. */\n  _onChangeEvent(event: Event) {\n    // We always have to stop propagation on the change event.\n    // Otherwise the change event, from the input element, will bubble up and\n    // emit its event object to the component's `change` output.\n    event.stopPropagation();\n\n    // Releasing the pointer over the `<label>` element while dragging triggers another\n    // click event on the `<label>` element. This means that the checked state of the underlying\n    // input changed unintentionally and needs to be changed back.\n    if (this._slideRenderer.dragging) {\n      this._inputElement.nativeElement.checked = this.checked;\n      return;\n    }\n\n    // Sync the value from the underlying input element with the component instance.\n    this.checked = this._inputElement.nativeElement.checked;\n\n    // Emit our custom change event only if the underlying input emitted one. This ensures that\n    // there is no change event, when the checked state changes programmatically.\n    this._emitChangeEvent();\n  }\n\n  /** Method being called whenever the slide-toggle has been clicked. */\n  _onInputClick(event: Event) {\n    // We have to stop propagation for click events on the visual hidden input element.\n    // By default, when a user clicks on a label element, a generated click event will be\n    // dispatched on the associated input element. Since we are using a label element as our\n    // root container, the click event on the `slide-toggle` will be executed twice.\n    // The real click event will bubble up, and the generated click event also tries to bubble up.\n    // This will lead to multiple click events.\n    // Preventing bubbling for the second event will solve that issue.\n    event.stopPropagation();\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  writeValue(value: any): void {\n    this.checked = !!value;\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  registerOnChange(fn: any): void {\n    this.onChange = fn;\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  registerOnTouched(fn: any): void {\n    this.onTouched = fn;\n  }\n\n  /** Implemented as a part of ControlValueAccessor. */\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Focuses the slide-toggle. */\n  focus(): void {\n    this._focusMonitor.focusVia(this._inputElement.nativeElement, 'keyboard');\n  }\n\n  /** Toggles the checked state of the slide-toggle. */\n  toggle(): void {\n    this.checked = !this.checked;\n  }\n\n  /** Function is called whenever the focus changes for the input element. */\n  private _onInputFocusChange(focusOrigin: FocusOrigin) {\n    if (!this._focusRipple && focusOrigin === 'keyboard') {\n      // For keyboard focus show a persistent ripple as focus indicator.\n      this._focusRipple = this._ripple.launch(0, 0, {persistent: true, ...this._rippleConfig});\n    } else if (!focusOrigin) {\n      this.onTouched();\n\n      // Fade out and clear the focus ripple if one is currently present.\n      if (this._focusRipple) {\n        this._focusRipple.fadeOut();\n        this._focusRipple = null;\n      }\n    }\n  }\n\n  /**\n   * Emits a change event on the `change` output. Also notifies the FormControl about the change.\n   */\n  private _emitChangeEvent() {\n    this.onChange(this.checked);\n    this.change.emit(new MatSlideToggleChange(this, this.checked));\n  }\n\n  _onDragStart() {\n    if (!this.disabled) {\n      this._slideRenderer.startThumbDrag(this.checked);\n    }\n  }\n\n  _onDrag(event: HammerInput) {\n    if (this._slideRenderer.dragging) {\n      this._slideRenderer.updateThumbPosition(event.deltaX);\n    }\n  }\n\n  _onDragEnd() {\n    if (this._slideRenderer.dragging) {\n      const newCheckedValue = this._slideRenderer.dragPercentage > 50;\n\n      if (newCheckedValue !== this.checked) {\n        this.checked = newCheckedValue;\n        this._emitChangeEvent();\n      }\n\n      // The drag should be stopped outside of the current event handler, because otherwise the\n      // click event will be fired before and will revert the drag change.\n      setTimeout(() => this._slideRenderer.stopThumbDrag());\n    }\n  }\n\n  /** Method being called whenever the label text changes. */\n  _onLabelTextChange() {\n    // This method is getting called whenever the label of the slide-toggle changes.\n    // Since the slide-toggle uses the OnPush strategy we need to notify it about the change\n    // that has been recognized by the cdkObserveContent directive.\n    this._changeDetectorRef.markForCheck();\n  }\n}\n\n/**\n * Renderer for the Slide Toggle component, which separates DOM modification in its own class\n */\nclass SlideToggleRenderer {\n\n  /** Reference to the thumb HTMLElement. */\n  private _thumbEl: HTMLElement;\n\n  /** Reference to the thumb bar HTMLElement. */\n  private _thumbBarEl: HTMLElement;\n\n  /** Width of the thumb bar of the slide-toggle. */\n  private _thumbBarWidth: number;\n\n  /** Previous checked state before drag started. */\n  private _previousChecked: boolean;\n\n  /** Percentage of the thumb while dragging. Percentage as fraction of 100. */\n  dragPercentage: number;\n\n  /** Whether the thumb is currently being dragged. */\n  dragging: boolean = false;\n\n  constructor(elementRef: ElementRef, platform: Platform) {\n    // We only need to interact with these elements when we're on the browser, so only grab\n    // the reference in that case.\n    if (platform.isBrowser) {\n      this._thumbEl = elementRef.nativeElement.querySelector('.mat-slide-toggle-thumb-container');\n      this._thumbBarEl = elementRef.nativeElement.querySelector('.mat-slide-toggle-bar');\n    }\n  }\n\n  /** Initializes the drag of the slide-toggle. */\n  startThumbDrag(checked: boolean): void {\n    if (this.dragging) { return; }\n\n    this._thumbBarWidth = this._thumbBarEl.clientWidth - this._thumbEl.clientWidth;\n    this._thumbEl.classList.add('mat-dragging');\n\n    this._previousChecked = checked;\n    this.dragging = true;\n  }\n\n  /** Resets the current drag and returns the new checked value. */\n  stopThumbDrag(): boolean {\n    if (!this.dragging) { return false; }\n\n    this.dragging = false;\n    this._thumbEl.classList.remove('mat-dragging');\n\n    // Reset the transform because the component will take care of the thumb position after drag.\n    applyCssTransform(this._thumbEl, '');\n\n    return this.dragPercentage > 50;\n  }\n\n  /** Updates the thumb containers position from the specified distance. */\n  updateThumbPosition(distance: number): void {\n    this.dragPercentage = this._getDragPercentage(distance);\n    // Calculate the moved distance based on the thumb bar width.\n    const dragX = (this.dragPercentage / 100) * this._thumbBarWidth;\n    applyCssTransform(this._thumbEl, `translate3d(${dragX}px, 0, 0)`);\n  }\n\n  /** Retrieves the percentage of thumb from the moved distance. Percentage as fraction of 100. */\n  private _getDragPercentage(distance: number) {\n    let percentage = (distance / this._thumbBarWidth) * 100;\n\n    // When the toggle was initially checked, then we have to start the drag at the end.\n    if (this._previousChecked) {\n      percentage += 100;\n    }\n\n    return Math.max(0, Math.min(percentage, 100));\n  }\n\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ObserversModule} from '@angular/cdk/observers';\nimport {PlatformModule} from '@angular/cdk/platform';\nimport {NgModule} from '@angular/core';\nimport {\n  GestureConfig,\n  MatCommonModule,\n  MatRippleModule,\n} from '@angular/material/core';\nimport {HAMMER_GESTURE_CONFIG} from '@angular/platform-browser';\nimport {A11yModule} from '@angular/cdk/a11y';\nimport {MatSlideToggle} from './slide-toggle';\n\n\n@NgModule({\n  imports: [MatRippleModule, MatCommonModule, PlatformModule, ObserversModule, A11yModule],\n  exports: [MatSlideToggle, MatCommonModule],\n  declarations: [MatSlideToggle],\n  providers: [\n    {provide: HAMMER_GESTURE_CONFIG, useClass: GestureConfig}\n  ],\n})\nexport class MatSlideToggleModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor, FocusOrigin} from '@angular/cdk/a11y';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty, coerceNumberProperty} from '@angular/cdk/coercion';\nimport {\n  DOWN_ARROW,\n  END,\n  HOME,\n  LEFT_ARROW,\n  PAGE_DOWN,\n  PAGE_UP,\n  RIGHT_ARROW,\n  UP_ARROW,\n} from '@angular/cdk/keycodes';\nimport {\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Input,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Output,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {\n  CanColor,\n  CanDisable,\n  HammerInput,\n  HasTabIndex,\n  mixinColor,\n  mixinDisabled,\n  mixinTabIndex,\n} from '@angular/material/core';\nimport {Subscription} from 'rxjs/Subscription';\n\n/**\n * Visually, a 30px separation between tick marks looks best. This is very subjective but it is\n * the default separation we chose.\n */\nconst MIN_AUTO_TICK_SEPARATION = 30;\n\n/** The thumb gap size for a disabled slider. */\nconst DISABLED_THUMB_GAP = 7;\n\n/** The thumb gap size for a non-active slider at its minimum value. */\nconst MIN_VALUE_NONACTIVE_THUMB_GAP = 7;\n\n/** The thumb gap size for an active slider at its minimum value. */\nconst MIN_VALUE_ACTIVE_THUMB_GAP = 10;\n\n/**\n * Provider Expression that allows mat-slider to register as a ControlValueAccessor.\n * This allows it to support [(ngModel)] and [formControl].\n */\nexport const MAT_SLIDER_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatSlider),\n  multi: true\n};\n\n/** A simple change event emitted by the MatSlider component. */\nexport class MatSliderChange {\n  /** The MatSlider that changed. */\n  source: MatSlider;\n\n  /** The new value of the source slider. */\n  value: number | null;\n}\n\n\n// Boilerplate for applying mixins to MatSlider.\n/** @docs-private */\nexport class MatSliderBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatSliderMixinBase =\n  mixinTabIndex(mixinColor(mixinDisabled(MatSliderBase), 'accent'));\n\n/**\n * Allows users to select from a range of values by moving the slider thumb. It is similar in\n * behavior to the native `<input type=\"range\">` element.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-slider',\n  exportAs: 'matSlider',\n  providers: [MAT_SLIDER_VALUE_ACCESSOR],\n  host: {\n    '(focus)': '_onFocus()',\n    '(blur)': '_onBlur()',\n    '(click)': '_onClick($event)',\n    '(keydown)': '_onKeydown($event)',\n    '(keyup)': '_onKeyup()',\n    '(mouseenter)': '_onMouseenter()',\n    '(slide)': '_onSlide($event)',\n    '(slideend)': '_onSlideEnd()',\n    '(slidestart)': '_onSlideStart($event)',\n    'class': 'mat-slider',\n    'role': 'slider',\n    '[tabIndex]': 'tabIndex',\n    '[attr.aria-disabled]': 'disabled',\n    '[attr.aria-valuemax]': 'max',\n    '[attr.aria-valuemin]': 'min',\n    '[attr.aria-valuenow]': 'value',\n    '[attr.aria-orientation]': 'vertical ? \"vertical\" : \"horizontal\"',\n    '[class.mat-slider-disabled]': 'disabled',\n    '[class.mat-slider-has-ticks]': 'tickInterval',\n    '[class.mat-slider-horizontal]': '!vertical',\n    '[class.mat-slider-axis-inverted]': '_invertAxis',\n    '[class.mat-slider-sliding]': '_isSliding',\n    '[class.mat-slider-thumb-label-showing]': 'thumbLabel',\n    '[class.mat-slider-vertical]': 'vertical',\n    '[class.mat-slider-min-value]': '_isMinValue',\n    '[class.mat-slider-hide-last-tick]': 'disabled || _isMinValue && _thumbGap && _invertAxis',\n  },\n  templateUrl: 'slider.html',\n  styleUrls: ['slider.css'],\n  inputs: ['disabled', 'color', 'tabIndex'],\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatSlider extends _MatSliderMixinBase\n    implements ControlValueAccessor, OnDestroy, CanDisable, CanColor, OnInit, HasTabIndex {\n  /** Whether the slider is inverted. */\n  @Input()\n  get invert(): boolean { return this._invert; }\n  set invert(value: boolean) {\n    this._invert = coerceBooleanProperty(value);\n  }\n  private _invert = false;\n\n  /** The maximum value that the slider can have. */\n  @Input()\n  get max(): number { return this._max; }\n  set max(v: number) {\n    this._max = coerceNumberProperty(v, this._max);\n    this._percent = this._calculatePercentage(this._value);\n\n    // Since this also modifies the percentage, we need to let the change detection know.\n    this._changeDetectorRef.markForCheck();\n  }\n  private _max: number = 100;\n\n  /** The minimum value that the slider can have. */\n  @Input()\n  get min(): number { return this._min; }\n  set min(v: number) {\n    this._min = coerceNumberProperty(v, this._min);\n\n    // If the value wasn't explicitly set by the user, set it to the min.\n    if (this._value === null) {\n      this.value = this._min;\n    }\n    this._percent = this._calculatePercentage(this._value);\n\n    // Since this also modifies the percentage, we need to let the change detection know.\n    this._changeDetectorRef.markForCheck();\n  }\n  private _min: number = 0;\n\n  /** The values at which the thumb will snap. */\n  @Input()\n  get step(): number { return this._step; }\n  set step(v: number) {\n    this._step = coerceNumberProperty(v, this._step);\n\n    if (this._step % 1 !== 0) {\n      this._roundLabelTo = this._step.toString().split('.').pop()!.length;\n    }\n\n    // Since this could modify the label, we need to notify the change detection.\n    this._changeDetectorRef.markForCheck();\n  }\n  private _step: number = 1;\n\n  /** Whether or not to show the thumb label. */\n  @Input()\n  get thumbLabel(): boolean { return this._thumbLabel; }\n  set thumbLabel(value: boolean) { this._thumbLabel = coerceBooleanProperty(value); }\n  private _thumbLabel: boolean = false;\n\n  /** @deprecated */\n  @Input('thumb-label')\n  get _thumbLabelDeprecated(): boolean { return this._thumbLabel; }\n  set _thumbLabelDeprecated(value) { this._thumbLabel = value; }\n\n  /**\n   * How often to show ticks. Relative to the step so that a tick always appears on a step.\n   * Ex: Tick interval of 4 with a step of 3 will draw a tick every 4 steps (every 12 values).\n   */\n  @Input()\n  get tickInterval() { return this._tickInterval; }\n  set tickInterval(value: 'auto' | number) {\n    if (value === 'auto') {\n      this._tickInterval = 'auto';\n    } else if (typeof value === 'number' || typeof value === 'string') {\n      this._tickInterval = coerceNumberProperty(value, this._tickInterval as number);\n    } else {\n      this._tickInterval = 0;\n    }\n  }\n  private _tickInterval: 'auto' | number = 0;\n\n  /** @deprecated */\n  @Input('tick-interval')\n  get _tickIntervalDeprecated() { return this.tickInterval; }\n  set _tickIntervalDeprecated(v) { this.tickInterval = v; }\n\n  /** Value of the slider. */\n  @Input()\n  get value(): number | null {\n    // If the value needs to be read and it is still uninitialized, initialize it to the min.\n    if (this._value === null) {\n      this.value = this._min;\n    }\n    return this._value;\n  }\n  set value(v: number | null) {\n    if (v !== this._value) {\n      this._value = coerceNumberProperty(v, this._value || 0);\n      this._percent = this._calculatePercentage(this._value);\n\n      // Since this also modifies the percentage, we need to let the change detection know.\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n  private _value: number | null = null;\n\n  /** Whether the slider is vertical. */\n  @Input()\n  get vertical(): boolean { return this._vertical; }\n  set vertical(value: boolean) {\n    this._vertical = coerceBooleanProperty(value);\n  }\n  private _vertical = false;\n\n  /** Event emitted when the slider value has changed. */\n  @Output() change: EventEmitter<MatSliderChange> = new EventEmitter<MatSliderChange>();\n\n  /** Event emitted when the slider thumb moves. */\n  @Output() input: EventEmitter<MatSliderChange> = new EventEmitter<MatSliderChange>();\n\n  /** The value to be used for display purposes. */\n  get displayValue(): string | number {\n    // Note that this could be improved further by rounding something like 0.999 to 1 or\n    // 0.899 to 0.9, however it is very performance sensitive, because it gets called on\n    // every change detection cycle.\n    if (this._roundLabelTo && this.value && this.value % 1 !== 0) {\n      return this.value.toFixed(this._roundLabelTo);\n    }\n\n    return this.value || 0;\n  }\n\n  /** set focus to the host element */\n  focus() {\n    this._focusHostElement();\n  }\n\n  /** blur the host element */\n  blur() {\n    this._blurHostElement();\n  }\n\n  /** onTouch function registered via registerOnTouch (ControlValueAccessor). */\n  onTouched: () => any = () => {};\n\n  /** The percentage of the slider that coincides with the value. */\n  get percent(): number { return this._clamp(this._percent); }\n  private _percent: number = 0;\n\n  /**\n   * Whether or not the thumb is sliding.\n   * Used to determine if there should be a transition for the thumb and fill track.\n   */\n  _isSliding: boolean = false;\n\n  /**\n   * Whether or not the slider is active (clicked or sliding).\n   * Used to shrink and grow the thumb as according to the Material Design spec.\n   */\n  _isActive: boolean = false;\n\n  /**\n   * Whether the axis of the slider is inverted.\n   * (i.e. whether moving the thumb in the positive x or y direction decreases the slider's value).\n   */\n  get _invertAxis() {\n    // Standard non-inverted mode for a vertical slider should be dragging the thumb from bottom to\n    // top. However from a y-axis standpoint this is inverted.\n    return this.vertical ? !this.invert : this.invert;\n  }\n\n\n  /** Whether the slider is at its minimum value. */\n  get _isMinValue() {\n    return this.percent === 0;\n  }\n\n  /**\n   * The amount of space to leave between the slider thumb and the track fill & track background\n   * elements.\n   */\n  get _thumbGap() {\n    if (this.disabled) {\n      return DISABLED_THUMB_GAP;\n    }\n    if (this._isMinValue && !this.thumbLabel) {\n      return this._isActive ? MIN_VALUE_ACTIVE_THUMB_GAP : MIN_VALUE_NONACTIVE_THUMB_GAP;\n    }\n    return 0;\n  }\n\n  /** CSS styles for the track background element. */\n  get _trackBackgroundStyles(): { [key: string]: string } {\n    let axis = this.vertical ? 'Y' : 'X';\n    let sign = this._invertMouseCoords ? '-' : '';\n    return {\n      'transform': `translate${axis}(${sign}${this._thumbGap}px) scale${axis}(${1 - this.percent})`\n    };\n  }\n\n  /** CSS styles for the track fill element. */\n  get _trackFillStyles(): { [key: string]: string } {\n    let axis = this.vertical ? 'Y' : 'X';\n    let sign = this._invertMouseCoords ? '' : '-';\n    return {\n      'transform': `translate${axis}(${sign}${this._thumbGap}px) scale${axis}(${this.percent})`\n    };\n  }\n\n  /** CSS styles for the ticks container element. */\n  get _ticksContainerStyles(): { [key: string]: string } {\n    let axis = this.vertical ? 'Y' : 'X';\n    // For a horizontal slider in RTL languages we push the ticks container off the left edge\n    // instead of the right edge to avoid causing a horizontal scrollbar to appear.\n    let sign = !this.vertical && this._direction == 'rtl' ? '' : '-';\n    let offset = this._tickIntervalPercent / 2 * 100;\n    return {\n      'transform': `translate${axis}(${sign}${offset}%)`\n    };\n  }\n\n  /** CSS styles for the ticks element. */\n  get _ticksStyles(): { [key: string]: string } {\n    let tickSize = this._tickIntervalPercent * 100;\n    let backgroundSize = this.vertical ? `2px ${tickSize}%` : `${tickSize}% 2px`;\n    let axis = this.vertical ? 'Y' : 'X';\n    // Depending on the direction we pushed the ticks container, push the ticks the opposite\n    // direction to re-center them but clip off the end edge. In RTL languages we need to flip the\n    // ticks 180 degrees so we're really cutting off the end edge abd not the start.\n    let sign = !this.vertical && this._direction == 'rtl' ? '-' : '';\n    let rotate = !this.vertical && this._direction == 'rtl' ? ' rotate(180deg)' : '';\n    let styles: { [key: string]: string } = {\n      'backgroundSize': backgroundSize,\n      // Without translateZ ticks sometimes jitter as the slider moves on Chrome & Firefox.\n      'transform': `translateZ(0) translate${axis}(${sign}${tickSize / 2}%)${rotate}`\n    };\n\n    if (this._isMinValue && this._thumbGap) {\n      let side = this.vertical ?\n          (this._invertAxis ? 'Bottom' : 'Top') :\n          (this._invertAxis ? 'Right' : 'Left');\n      styles[`padding${side}`] = `${this._thumbGap}px`;\n    }\n\n    return styles;\n  }\n\n  get _thumbContainerStyles(): { [key: string]: string } {\n    let axis = this.vertical ? 'Y' : 'X';\n    // For a horizontal slider in RTL languages we push the thumb container off the left edge\n    // instead of the right edge to avoid causing a horizontal scrollbar to appear.\n    let invertOffset =\n        (this._direction == 'rtl' && !this.vertical) ? !this._invertAxis : this._invertAxis;\n    let offset = (invertOffset ? this.percent : 1 - this.percent) * 100;\n    return {\n      'transform': `translate${axis}(-${offset}%)`\n    };\n  }\n\n  /** The size of a tick interval as a percentage of the size of the track. */\n  private _tickIntervalPercent: number = 0;\n\n  /** The dimensions of the slider. */\n  private _sliderDimensions: ClientRect | null = null;\n\n  private _controlValueAccessorChangeFn: (value: any) => void = () => {};\n\n  /** Decimal places to round to, based on the step amount. */\n  private _roundLabelTo: number;\n\n  /** Subscription to the Directionality change EventEmitter. */\n  private _dirChangeSubscription = Subscription.EMPTY;\n\n  /** The value of the slider when the slide start event fires. */\n  private _valueOnSlideStart: number | null;\n\n  /** Reference to the inner slider wrapper element. */\n  @ViewChild('sliderWrapper') private _sliderWrapper: ElementRef;\n\n  /**\n   * Whether mouse events should be converted to a slider position by calculating their distance\n   * from the right or bottom edge of the slider as opposed to the top or left.\n   */\n  private get _invertMouseCoords() {\n    return (this._direction == 'rtl' && !this.vertical) ? !this._invertAxis : this._invertAxis;\n  }\n\n  /** The language direction for this slider element. */\n  private get _direction() {\n    return (this._dir && this._dir.value == 'rtl') ? 'rtl' : 'ltr';\n  }\n\n  constructor(elementRef: ElementRef,\n              private _focusMonitor: FocusMonitor,\n              private _changeDetectorRef: ChangeDetectorRef,\n              @Optional() private _dir: Directionality,\n              @Attribute('tabindex') tabIndex: string) {\n    super(elementRef);\n\n    this.tabIndex = parseInt(tabIndex) || 0;\n  }\n\n  ngOnInit() {\n    this._focusMonitor\n        .monitor(this._elementRef.nativeElement, true)\n        .subscribe((origin: FocusOrigin) => {\n          this._isActive = !!origin && origin !== 'keyboard';\n          this._changeDetectorRef.detectChanges();\n        });\n    if (this._dir) {\n      this._dirChangeSubscription = this._dir.change.subscribe(() => {\n        this._changeDetectorRef.markForCheck();\n      });\n    }\n  }\n\n  ngOnDestroy() {\n    this._focusMonitor.stopMonitoring(this._elementRef.nativeElement);\n    this._dirChangeSubscription.unsubscribe();\n  }\n\n  _onMouseenter() {\n    if (this.disabled) {\n      return;\n    }\n\n    // We save the dimensions of the slider here so we can use them to update the spacing of the\n    // ticks and determine where on the slider click and slide events happen.\n    this._sliderDimensions = this._getSliderDimensions();\n    this._updateTickIntervalPercent();\n  }\n\n  _onClick(event: MouseEvent) {\n    if (this.disabled) {\n      return;\n    }\n\n    let oldValue = this.value;\n    this._isSliding = false;\n    this._focusHostElement();\n    this._updateValueFromPosition({x: event.clientX, y: event.clientY});\n\n    // Emit a change and input event if the value changed.\n    if (oldValue != this.value) {\n      this._emitInputEvent();\n      this._emitChangeEvent();\n    }\n  }\n\n  _onSlide(event: HammerInput) {\n    if (this.disabled) {\n      return;\n    }\n\n    // The slide start event sometimes fails to fire on iOS, so if we're not already in the sliding\n    // state, call the slide start handler manually.\n    if (!this._isSliding) {\n      this._onSlideStart(null);\n    }\n\n    // Prevent the slide from selecting anything else.\n    event.preventDefault();\n\n    let oldValue = this.value;\n    this._updateValueFromPosition({x: event.center.x, y: event.center.y});\n\n    // Native range elements always emit `input` events when the value changed while sliding.\n    if (oldValue != this.value) {\n      this._emitInputEvent();\n    }\n  }\n\n  _onSlideStart(event: HammerInput | null) {\n    if (this.disabled || this._isSliding) {\n      return;\n    }\n\n    // Simulate mouseenter in case this is a mobile device.\n    this._onMouseenter();\n\n    this._isSliding = true;\n    this._focusHostElement();\n    this._valueOnSlideStart = this.value;\n\n    if (event) {\n      this._updateValueFromPosition({x: event.center.x, y: event.center.y});\n      event.preventDefault();\n    }\n  }\n\n  _onSlideEnd() {\n    this._isSliding = false;\n\n    if (this._valueOnSlideStart != this.value) {\n      this._emitChangeEvent();\n    }\n    this._valueOnSlideStart = null;\n  }\n\n  _onFocus() {\n    // We save the dimensions of the slider here so we can use them to update the spacing of the\n    // ticks and determine where on the slider click and slide events happen.\n    this._sliderDimensions = this._getSliderDimensions();\n    this._updateTickIntervalPercent();\n  }\n\n  _onBlur() {\n    this.onTouched();\n  }\n\n  _onKeydown(event: KeyboardEvent) {\n    if (this.disabled) { return; }\n\n    let oldValue = this.value;\n\n    switch (event.keyCode) {\n      case PAGE_UP:\n        this._increment(10);\n        break;\n      case PAGE_DOWN:\n        this._increment(-10);\n        break;\n      case END:\n        this.value = this.max;\n        break;\n      case HOME:\n        this.value = this.min;\n        break;\n      case LEFT_ARROW:\n        // NOTE: For a sighted user it would make more sense that when they press an arrow key on an\n        // inverted slider the thumb moves in that direction. However for a blind user, nothing\n        // about the slider indicates that it is inverted. They will expect left to be decrement,\n        // regardless of how it appears on the screen. For speakers ofRTL languages, they probably\n        // expect left to mean increment. Therefore we flip the meaning of the side arrow keys for\n        // RTL. For inverted sliders we prefer a good a11y experience to having it \"look right\" for\n        // sighted users, therefore we do not swap the meaning.\n        this._increment(this._direction == 'rtl' ? 1 : -1);\n        break;\n      case UP_ARROW:\n        this._increment(1);\n        break;\n      case RIGHT_ARROW:\n        // See comment on LEFT_ARROW about the conditions under which we flip the meaning.\n        this._increment(this._direction == 'rtl' ? -1 : 1);\n        break;\n      case DOWN_ARROW:\n        this._increment(-1);\n        break;\n      default:\n        // Return if the key is not one that we explicitly handle to avoid calling preventDefault on\n        // it.\n        return;\n    }\n\n    if (oldValue != this.value) {\n      this._emitInputEvent();\n      this._emitChangeEvent();\n    }\n\n    this._isSliding = true;\n    event.preventDefault();\n  }\n\n  _onKeyup() {\n    this._isSliding = false;\n  }\n\n  /** Increments the slider by the given number of steps (negative number decrements). */\n  private _increment(numSteps: number) {\n    this.value = this._clamp((this.value || 0) + this.step * numSteps, this.min, this.max);\n  }\n\n  /** Calculate the new value from the new physical location. The value will always be snapped. */\n  private _updateValueFromPosition(pos: {x: number, y: number}) {\n    if (!this._sliderDimensions) {\n      return;\n    }\n\n    let offset = this.vertical ? this._sliderDimensions.top : this._sliderDimensions.left;\n    let size = this.vertical ? this._sliderDimensions.height : this._sliderDimensions.width;\n    let posComponent = this.vertical ? pos.y : pos.x;\n\n    // The exact value is calculated from the event and used to find the closest snap value.\n    let percent = this._clamp((posComponent - offset) / size);\n    if (this._invertMouseCoords) {\n      percent = 1 - percent;\n    }\n    let exactValue = this._calculateValue(percent);\n\n    // This calculation finds the closest step by finding the closest whole number divisible by the\n    // step relative to the min.\n    let closestValue = Math.round((exactValue - this.min) / this.step) * this.step + this.min;\n    // The value needs to snap to the min and max.\n    this.value = this._clamp(closestValue, this.min, this.max);\n  }\n\n  /** Emits a change event if the current value is different from the last emitted value. */\n  private _emitChangeEvent() {\n    this._controlValueAccessorChangeFn(this.value);\n    this.change.emit(this._createChangeEvent());\n  }\n\n  /** Emits an input event when the current value is different from the last emitted value. */\n  private _emitInputEvent() {\n    this.input.emit(this._createChangeEvent());\n  }\n\n  /** Updates the amount of space between ticks as a percentage of the width of the slider. */\n  private _updateTickIntervalPercent() {\n    if (!this.tickInterval || !this._sliderDimensions) {\n      return;\n    }\n\n    if (this.tickInterval == 'auto') {\n      let trackSize = this.vertical ? this._sliderDimensions.height : this._sliderDimensions.width;\n      let pixelsPerStep = trackSize * this.step / (this.max - this.min);\n      let stepsPerTick = Math.ceil(MIN_AUTO_TICK_SEPARATION / pixelsPerStep);\n      let pixelsPerTick = stepsPerTick * this.step;\n      this._tickIntervalPercent = pixelsPerTick / trackSize;\n    } else {\n      this._tickIntervalPercent = this.tickInterval * this.step / (this.max - this.min);\n    }\n  }\n\n  /** Creates a slider change object from the specified value. */\n  private _createChangeEvent(value = this.value): MatSliderChange {\n    let event = new MatSliderChange();\n\n    event.source = this;\n    event.value = value;\n\n    return event;\n  }\n\n  /** Calculates the percentage of the slider that a value is. */\n  private _calculatePercentage(value: number | null) {\n    return ((value || 0) - this.min) / (this.max - this.min);\n  }\n\n  /** Calculates the value a percentage of the slider corresponds to. */\n  private _calculateValue(percentage: number) {\n    return this.min + percentage * (this.max - this.min);\n  }\n\n  /** Return a number between two numbers. */\n  private _clamp(value: number, min = 0, max = 1) {\n    return Math.max(min, Math.min(value, max));\n  }\n\n  /**\n   * Get the bounding client rect of the slider track element.\n   * The track is used rather than the native element to ignore the extra space that the thumb can\n   * take up.\n   */\n  private _getSliderDimensions() {\n    return this._sliderWrapper ? this._sliderWrapper.nativeElement.getBoundingClientRect() : null;\n  }\n\n  /**\n   * Focuses the native element.\n   * Currently only used to allow a blur event to fire but will be used with keyboard input later.\n   */\n  private _focusHostElement() {\n    this._elementRef.nativeElement.focus();\n  }\n\n  /** Blurs the native element. */\n  private _blurHostElement() {\n    this._elementRef.nativeElement.blur();\n  }\n\n  /**\n   * Sets the model value. Implemented as part of ControlValueAccessor.\n   * @param value\n   */\n  writeValue(value: any) {\n    this.value = value;\n  }\n\n  /**\n   * Registers a callback to eb triggered when the value has changed.\n   * Implemented as part of ControlValueAccessor.\n   * @param fn Callback to be registered.\n   */\n  registerOnChange(fn: (value: any) => void) {\n    this._controlValueAccessorChangeFn = fn;\n  }\n\n  /**\n   * Registers a callback to be triggered when the component is touched.\n   * Implemented as part of ControlValueAccessor.\n   * @param fn Callback to be registered.\n   */\n  registerOnTouched(fn: any) {\n    this.onTouched = fn;\n  }\n\n  /**\n   * Sets whether the component should be disabled.\n   * Implemented as part of ControlValueAccessor.\n   * @param isDisabled\n   */\n  setDisabledState(isDisabled: boolean) {\n    this.disabled = isDisabled;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {A11yModule} from '@angular/cdk/a11y';\nimport {BidiModule} from '@angular/cdk/bidi';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {GestureConfig, MatCommonModule} from '@angular/material/core';\nimport {HAMMER_GESTURE_CONFIG} from '@angular/platform-browser';\nimport {MatSlider} from './slider';\n\n\n@NgModule({\n  imports: [CommonModule, MatCommonModule, BidiModule, A11yModule],\n  exports: [MatSlider, MatCommonModule],\n  declarations: [MatSlider],\n  providers: [{provide: HAMMER_GESTURE_CONFIG, useClass: GestureConfig}]\n})\nexport class MatSliderModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {OverlayRef} from '@angular/cdk/overlay';\nimport {Observable} from 'rxjs/Observable';\nimport {Subject} from 'rxjs/Subject';\nimport {MatSnackBarContainer} from './snack-bar-container';\n\n/**\n * Reference to a snack bar dispatched from the snack bar service.\n */\nexport class MatSnackBarRef<T> {\n  /** The instance of the component making up the content of the snack bar. */\n  instance: T;\n\n  /**\n   * The instance of the component making up the content of the snack bar.\n   * @docs-private\n   */\n  containerInstance: MatSnackBarContainer;\n\n  /** Subject for notifying the user that the snack bar has closed. */\n  private _afterClosed = new Subject<void>();\n\n  /** Subject for notifying the user that the snack bar has opened and appeared. */\n  private _afterOpened = new Subject<void>();\n\n  /** Subject for notifying the user that the snack bar action was called. */\n  private _onAction = new Subject<void>();\n\n  /**\n   * Timeout ID for the duration setTimeout call. Used to clear the timeout if the snackbar is\n   * dismissed before the duration passes.\n   */\n  private _durationTimeoutId: number;\n\n  constructor(containerInstance: MatSnackBarContainer,\n              private _overlayRef: OverlayRef) {\n    this.containerInstance = containerInstance;\n    // Dismiss snackbar on action.\n    this.onAction().subscribe(() => this.dismiss());\n    containerInstance._onExit.subscribe(() => this._finishDismiss());\n  }\n\n  /** Dismisses the snack bar. */\n  dismiss(): void {\n    if (!this._afterClosed.closed) {\n      this.containerInstance.exit();\n    }\n    clearTimeout(this._durationTimeoutId);\n  }\n\n  /** Marks the snackbar action clicked. */\n  closeWithAction(): void {\n    if (!this._onAction.closed) {\n      this._onAction.next();\n      this._onAction.complete();\n    }\n  }\n\n  /** Dismisses the snack bar after some duration */\n  _dismissAfter(duration: number): void {\n    this._durationTimeoutId = setTimeout(() => this.dismiss(), duration);\n  }\n\n  /** Marks the snackbar as opened */\n  _open(): void {\n    if (!this._afterOpened.closed) {\n      this._afterOpened.next();\n      this._afterOpened.complete();\n    }\n  }\n\n  /** Cleans up the DOM after closing. */\n  private _finishDismiss(): void {\n    this._overlayRef.dispose();\n\n    if (!this._onAction.closed) {\n      this._onAction.complete();\n    }\n\n    this._afterClosed.next();\n    this._afterClosed.complete();\n  }\n\n  /** Gets an observable that is notified when the snack bar is finished closing. */\n  afterDismissed(): Observable<void> {\n    return this._afterClosed.asObservable();\n  }\n\n  /** Gets an observable that is notified when the snack bar has opened and appeared. */\n  afterOpened(): Observable<void> {\n    return this.containerInstance._onEnter;\n  }\n\n  /** Gets an observable that is notified when the snack bar action is called. */\n  onAction(): Observable<void> {\n    return this._onAction.asObservable();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ChangeDetectionStrategy,\n  Input,\n  ElementRef,\n  SimpleChanges,\n  OnChanges,\n  ViewEncapsulation,\n  Optional,\n  Inject,\n} from '@angular/core';\nimport {CanColor, mixinColor} from '@angular/material/core';\nimport {Platform} from '@angular/cdk/platform';\nimport {DOCUMENT} from '@angular/common';\nimport {coerceNumberProperty} from '@angular/cdk/coercion';\n\n/** Possible mode for a progress spinner. */\nexport type ProgressSpinnerMode = 'determinate' | 'indeterminate';\n\n/**\n * Base reference size of the spinner.\n * @docs-private\n */\nconst BASE_SIZE = 100;\n\n/**\n * Base reference stroke width of the spinner.\n * @docs-private\n */\nconst BASE_STROKE_WIDTH = 10;\n\n// Boilerplate for applying mixins to MatProgressSpinner.\n/** @docs-private */\nexport class MatProgressSpinnerBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatProgressSpinnerMixinBase = mixinColor(MatProgressSpinnerBase, 'primary');\n\nconst INDETERMINATE_ANIMATION_TEMPLATE = `\n @keyframes mat-progress-spinner-stroke-rotate-DIAMETER {\n    0%      { stroke-dashoffset: START_VALUE;  transform: rotate(0); }\n    12.5%   { stroke-dashoffset: END_VALUE;    transform: rotate(0); }\n    12.51%  { stroke-dashoffset: END_VALUE;    transform: rotateX(180deg) rotate(72.5deg); }\n    25%     { stroke-dashoffset: START_VALUE;  transform: rotateX(180deg) rotate(72.5deg); }\n\n    25.1%   { stroke-dashoffset: START_VALUE;  transform: rotate(270deg); }\n    37.5%   { stroke-dashoffset: END_VALUE;    transform: rotate(270deg); }\n    37.51%  { stroke-dashoffset: END_VALUE;    transform: rotateX(180deg) rotate(161.5deg); }\n    50%     { stroke-dashoffset: START_VALUE;  transform: rotateX(180deg) rotate(161.5deg); }\n\n    50.01%  { stroke-dashoffset: START_VALUE;  transform: rotate(180deg); }\n    62.5%   { stroke-dashoffset: END_VALUE;    transform: rotate(180deg); }\n    62.51%  { stroke-dashoffset: END_VALUE;    transform: rotateX(180deg) rotate(251.5deg); }\n    75%     { stroke-dashoffset: START_VALUE;  transform: rotateX(180deg) rotate(251.5deg); }\n\n    75.01%  { stroke-dashoffset: START_VALUE;  transform: rotate(90deg); }\n    87.5%   { stroke-dashoffset: END_VALUE;    transform: rotate(90deg); }\n    87.51%  { stroke-dashoffset: END_VALUE;    transform: rotateX(180deg) rotate(341.5deg); }\n    100%    { stroke-dashoffset: START_VALUE;  transform: rotateX(180deg) rotate(341.5deg); }\n  }\n`;\n\n/**\n * <mat-progress-spinner> component.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-progress-spinner',\n  exportAs: 'matProgressSpinner',\n  host: {\n    'role': 'progressbar',\n    'class': 'mat-progress-spinner',\n    '[style.width.px]': '_elementSize',\n    '[style.height.px]': '_elementSize',\n    '[attr.aria-valuemin]': 'mode === \"determinate\" ? 0 : null',\n    '[attr.aria-valuemax]': 'mode === \"determinate\" ? 100 : null',\n    '[attr.aria-valuenow]': 'value',\n    '[attr.mode]': 'mode',\n  },\n  inputs: ['color'],\n  templateUrl: 'progress-spinner.html',\n  styleUrls: ['progress-spinner.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n})\nexport class MatProgressSpinner extends _MatProgressSpinnerMixinBase implements CanColor,\n  OnChanges {\n\n  private _value = 0;\n  private _strokeWidth: number;\n  private _fallbackAnimation = false;\n\n  /** The width and height of the host element. Will grow with stroke width. */\n  _elementSize = BASE_SIZE;\n\n  /** Tracks diameters of existing instances to de-dupe generated styles (default d = 100) */\n  private static diameters = new Set<number>([BASE_SIZE]);\n\n  /**\n   * Used for storing all of the generated keyframe animations.\n   * @dynamic\n   */\n  private static styleTag: HTMLStyleElement|null = null;\n\n  /** The diameter of the progress spinner (will set width and height of svg). */\n  @Input()\n  get diameter(): number { return this._diameter; }\n  set diameter(size: number) {\n    this._diameter = coerceNumberProperty(size);\n\n    if (!this._fallbackAnimation && !MatProgressSpinner.diameters.has(this._diameter)) {\n      this._attachStyleNode();\n    }\n  }\n  private _diameter = BASE_SIZE;\n\n  /** Stroke width of the progress spinner. */\n  @Input()\n  get strokeWidth(): number {\n    return this._strokeWidth || this.diameter / 10;\n  }\n  set strokeWidth(value: number) {\n    this._strokeWidth = coerceNumberProperty(value);\n  }\n\n\n  /** Mode of the progress circle */\n  @Input() mode: ProgressSpinnerMode = 'determinate';\n\n  /** Value of the progress circle. */\n  @Input()\n  get value(): number {\n    return this.mode === 'determinate' ? this._value : 0;\n  }\n  set value(newValue: number) {\n    this._value = Math.max(0, Math.min(100, coerceNumberProperty(newValue)));\n  }\n\n  constructor(public _elementRef: ElementRef,\n              platform: Platform,\n              @Optional() @Inject(DOCUMENT) private _document: any) {\n\n    super(_elementRef);\n    this._fallbackAnimation = platform.EDGE || platform.TRIDENT;\n\n    // On IE and Edge, we can't animate the `stroke-dashoffset`\n    // reliably so we fall back to a non-spec animation.\n    const animationClass =\n      `mat-progress-spinner-indeterminate${this._fallbackAnimation ? '-fallback' : ''}-animation`;\n\n    _elementRef.nativeElement.classList.add(animationClass);\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    if (changes.strokeWidth || changes.diameter) {\n      this._elementSize = this._diameter + Math.max(this.strokeWidth - BASE_STROKE_WIDTH, 0);\n    }\n  }\n\n  /** The radius of the spinner, adjusted for stroke width. */\n  get _circleRadius() {\n    return (this.diameter - BASE_STROKE_WIDTH) / 2;\n  }\n\n  /** The view box of the spinner's svg element. */\n  get _viewBox() {\n    const viewBox = this._circleRadius * 2 + this.strokeWidth;\n    return `0 0 ${viewBox} ${viewBox}`;\n  }\n\n  /** The stroke circumference of the svg circle. */\n  get _strokeCircumference(): number {\n    return 2 * Math.PI * this._circleRadius;\n  }\n\n  /** The dash offset of the svg circle. */\n  get _strokeDashOffset() {\n    if (this.mode === 'determinate') {\n      return this._strokeCircumference * (100 - this._value) / 100;\n    }\n\n    // In fallback mode set the circle to 80% and rotate it with CSS.\n    if (this._fallbackAnimation && this.mode === 'indeterminate') {\n      return this._strokeCircumference * 0.2;\n    }\n\n    return null;\n  }\n\n  /** Stroke width of the circle in percent. */\n  get _circleStrokeWidth() {\n    return this.strokeWidth / this._elementSize * 100;\n  }\n\n  /** Dynamically generates a style tag containing the correct animation for this diameter. */\n  private _attachStyleNode(): void {\n    let styleTag = MatProgressSpinner.styleTag;\n\n    if (!styleTag) {\n      styleTag = this._document.createElement('style');\n      this._document.head.appendChild(styleTag);\n      MatProgressSpinner.styleTag = styleTag;\n    }\n\n    if (styleTag && styleTag.sheet) {\n      (styleTag.sheet as CSSStyleSheet).insertRule(this._getAnimationText(), 0);\n    }\n\n    MatProgressSpinner.diameters.add(this.diameter);\n  }\n\n  /** Generates animation styles adjusted for the spinner's diameter. */\n  private _getAnimationText(): string {\n    return INDETERMINATE_ANIMATION_TEMPLATE\n        // Animation should begin at 5% and end at 80%\n        .replace(/START_VALUE/g, `${0.95 * this._strokeCircumference}`)\n        .replace(/END_VALUE/g, `${0.2 * this._strokeCircumference}`)\n        .replace(/DIAMETER/g, `${this.diameter}`);\n  }\n}\n\n\n/**\n * <mat-spinner> component.\n *\n * This is a component definition to be used as a convenience reference to create an\n * indeterminate <mat-progress-spinner> instance.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-spinner',\n  host: {\n    'role': 'progressbar',\n    'mode': 'indeterminate',\n    'class': 'mat-spinner mat-progress-spinner',\n    '[style.width.px]': '_elementSize',\n    '[style.height.px]': '_elementSize',\n  },\n  inputs: ['color'],\n  templateUrl: 'progress-spinner.html',\n  styleUrls: ['progress-spinner.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n})\nexport class MatSpinner extends MatProgressSpinner {\n  constructor(elementRef: ElementRef, platform: Platform,\n              @Optional() @Inject(DOCUMENT) document: any) {\n    super(elementRef, platform, document);\n    this.mode = 'indeterminate';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {NgModule} from '@angular/core';\nimport {PlatformModule} from '@angular/cdk/platform';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatProgressSpinner, MatSpinner} from './progress-spinner';\n\n@NgModule({\n  imports: [MatCommonModule, PlatformModule],\n  exports: [\n    MatProgressSpinner,\n    MatSpinner,\n    MatCommonModule\n  ],\n  declarations: [\n    MatProgressSpinner,\n    MatSpinner\n  ],\n})\nclass MatProgressSpinnerModule {}\n\nexport {MatProgressSpinnerModule};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor, FocusOrigin} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {UniqueSelectionDispatcher} from '@angular/cdk/collections';\nimport {\n  AfterContentInit,\n  AfterViewInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Input,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Output,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {\n  CanColor,\n  CanDisable,\n  CanDisableRipple,\n  MatRipple,\n  mixinColor,\n  mixinDisabled,\n  mixinDisableRipple,\n  RippleConfig,\n  RippleRef,\n} from '@angular/material/core';\n\n// Increasing integer for generating unique ids for radio components.\nlet nextUniqueId = 0;\n\n/**\n * Provider Expression that allows mat-radio-group to register as a ControlValueAccessor. This\n * allows it to support [(ngModel)] and ngControl.\n * @docs-private\n */\nexport const MAT_RADIO_GROUP_CONTROL_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatRadioGroup),\n  multi: true\n};\n\n/** Change event object emitted by MatRadio and MatRadioGroup. */\nexport class MatRadioChange {\n  /** The MatRadioButton that emits the change event. */\n  source: MatRadioButton | null;\n  /** The value of the MatRadioButton. */\n  value: any;\n}\n\n\n// Boilerplate for applying mixins to MatRadioGroup.\n/** @docs-private */\nexport class MatRadioGroupBase { }\nexport const _MatRadioGroupMixinBase = mixinDisabled(MatRadioGroupBase);\n\n/**\n * A group of radio buttons. May contain one or more `<mat-radio-button>` elements.\n */\n@Directive({\n  selector: 'mat-radio-group',\n  exportAs: 'matRadioGroup',\n  providers: [MAT_RADIO_GROUP_CONTROL_VALUE_ACCESSOR],\n  host: {\n    'role': 'radiogroup',\n    'class': 'mat-radio-group',\n  },\n  inputs: ['disabled'],\n})\nexport class MatRadioGroup extends _MatRadioGroupMixinBase\n    implements AfterContentInit, ControlValueAccessor, CanDisable {\n  /**\n   * Selected value for group. Should equal the value of the selected radio button if there *is*\n   * a corresponding radio button with a matching value. If there is *not* such a corresponding\n   * radio button, this value persists to be applied in case a new radio button is added with a\n   * matching value.\n   */\n  private _value: any = null;\n\n  /** The HTML name attribute applied to radio buttons in this group. */\n  private _name: string = `mat-radio-group-${nextUniqueId++}`;\n\n  /** The currently selected radio button. Should match value. */\n  private _selected: MatRadioButton | null = null;\n\n  /** Whether the `value` has been set to its initial value. */\n  private _isInitialized: boolean = false;\n\n  /** Whether the labels should appear after or before the radio-buttons. Defaults to 'after' */\n  private _labelPosition: 'before' | 'after' = 'after';\n\n  /** Whether the radio group is disabled. */\n  private _disabled: boolean = false;\n\n  /** Whether the radio group is required. */\n  private _required: boolean = false;\n\n  /** The method to be called in order to update ngModel */\n  _controlValueAccessorChangeFn: (value: any) => void = () => {};\n\n  /**\n   * onTouch function registered via registerOnTouch (ControlValueAccessor).\n   * @docs-private\n   */\n  onTouched: () => any = () => {};\n\n  /**\n   * Event emitted when the group value changes.\n   * Change events are only emitted when the value changes due to user interaction with\n   * a radio button (the same behavior as `<input type-\"radio\">`).\n   */\n  @Output() change: EventEmitter<MatRadioChange> = new EventEmitter<MatRadioChange>();\n\n  /** Child radio buttons. */\n  @ContentChildren(forwardRef(() => MatRadioButton), { descendants: true })\n  _radios: QueryList<MatRadioButton>;\n\n  /** Name of the radio button group. All radio buttons inside this group will use this name. */\n  @Input()\n  get name(): string { return this._name; }\n  set name(value: string) {\n    this._name = value;\n    this._updateRadioButtonNames();\n  }\n\n  /**\n   * Alignment of the radio-buttons relative to their labels. Can be 'before' or 'after'.\n   * @deprecated\n   */\n  @Input()\n  get align(): 'start' | 'end' {\n    // align refers to the checkbox relative to the label, while labelPosition refers to the\n    // label relative to the checkbox. As such, they are inverted.\n    return this.labelPosition == 'after' ? 'start' : 'end';\n  }\n  set align(v) {\n    this.labelPosition = (v == 'start') ? 'after' : 'before';\n  }\n\n\n  /** Whether the labels should appear after or before the radio-buttons. Defaults to 'after' */\n  @Input()\n  get labelPosition(): 'before' | 'after' {\n    return this._labelPosition;\n  }\n  set labelPosition(v) {\n    this._labelPosition = (v == 'before') ? 'before' : 'after';\n    this._markRadiosForCheck();\n  }\n\n  /** Value of the radio button. */\n  @Input()\n  get value(): any { return this._value; }\n  set value(newValue: any) {\n    if (this._value != newValue) {\n      // Set this before proceeding to ensure no circular loop occurs with selection.\n      this._value = newValue;\n\n      this._updateSelectedRadioFromValue();\n      this._checkSelectedRadioButton();\n    }\n  }\n\n  _checkSelectedRadioButton() {\n    if (this._selected && !this._selected.checked) {\n      this._selected.checked = true;\n    }\n  }\n\n  /** Whether the radio button is selected. */\n  @Input()\n  get selected() { return this._selected; }\n  set selected(selected: MatRadioButton | null) {\n    this._selected = selected;\n    this.value = selected ? selected.value : null;\n    this._checkSelectedRadioButton();\n  }\n\n  /** Whether the radio group is disabled */\n  @Input()\n  get disabled(): boolean { return this._disabled; }\n  set disabled(value) {\n    this._disabled = coerceBooleanProperty(value);\n    this._markRadiosForCheck();\n  }\n\n  /** Whether the radio group is required */\n  @Input()\n  get required(): boolean { return this._required; }\n  set required(value: boolean) {\n    this._required = coerceBooleanProperty(value);\n    this._markRadiosForCheck();\n  }\n\n  constructor(private _changeDetector: ChangeDetectorRef) {\n    super();\n  }\n\n  /**\n   * Initialize properties once content children are available.\n   * This allows us to propagate relevant attributes to associated buttons.\n   */\n  ngAfterContentInit() {\n    // Mark this component as initialized in AfterContentInit because the initial value can\n    // possibly be set by NgModel on MatRadioGroup, and it is possible that the OnInit of the\n    // NgModel occurs *after* the OnInit of the MatRadioGroup.\n    this._isInitialized = true;\n  }\n\n  /**\n   * Mark this group as being \"touched\" (for ngModel). Meant to be called by the contained\n   * radio buttons upon their blur.\n   */\n  _touch() {\n    if (this.onTouched) {\n      this.onTouched();\n    }\n  }\n\n  private _updateRadioButtonNames(): void {\n    if (this._radios) {\n      this._radios.forEach(radio => {\n        radio.name = this.name;\n      });\n    }\n  }\n\n  /** Updates the `selected` radio button from the internal _value state. */\n  private _updateSelectedRadioFromValue(): void {\n    // If the value already matches the selected radio, do nothing.\n    const isAlreadySelected = this._selected != null && this._selected.value == this._value;\n\n    if (this._radios != null && !isAlreadySelected) {\n      this._selected = null;\n      this._radios.forEach(radio => {\n        radio.checked = this.value == radio.value;\n        if (radio.checked) {\n          this._selected = radio;\n        }\n      });\n    }\n  }\n\n  /** Dispatch change event with current selection and group value. */\n  _emitChangeEvent(): void {\n    if (this._isInitialized) {\n      const event = new MatRadioChange();\n      event.source = this._selected;\n      event.value = this._value;\n      this.change.emit(event);\n    }\n  }\n\n  _markRadiosForCheck() {\n    if (this._radios) {\n      this._radios.forEach(radio => radio._markForCheck());\n    }\n  }\n\n  /**\n   * Sets the model value. Implemented as part of ControlValueAccessor.\n   * @param value\n   */\n  writeValue(value: any) {\n    this.value = value;\n    this._changeDetector.markForCheck();\n  }\n\n  /**\n   * Registers a callback to be triggered when the model value changes.\n   * Implemented as part of ControlValueAccessor.\n   * @param fn Callback to be registered.\n   */\n  registerOnChange(fn: (value: any) => void) {\n    this._controlValueAccessorChangeFn = fn;\n  }\n\n  /**\n   * Registers a callback to be triggered when the control is touched.\n   * Implemented as part of ControlValueAccessor.\n   * @param fn Callback to be registered.\n   */\n  registerOnTouched(fn: any) {\n    this.onTouched = fn;\n  }\n\n  /**\n   * Sets the disabled state of the control. Implemented as a part of ControlValueAccessor.\n   * @param isDisabled Whether the control should be disabled.\n   */\n  setDisabledState(isDisabled: boolean) {\n    this.disabled = isDisabled;\n    this._changeDetector.markForCheck();\n  }\n}\n\n// Boilerplate for applying mixins to MatRadioButton.\n/** @docs-private */\nexport class MatRadioButtonBase {\n  constructor(public _elementRef: ElementRef) {}\n}\n// As per Material design specifications the selection control radio should use the accent color\n// palette by default. https://material.io/guidelines/components/selection-controls.html\nexport const _MatRadioButtonMixinBase =\n    mixinColor(mixinDisableRipple(MatRadioButtonBase), 'accent');\n\n/**\n * A Material design radio-button. Typically placed inside of `<mat-radio-group>` elements.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-radio-button',\n  templateUrl: 'radio.html',\n  styleUrls: ['radio.css'],\n  inputs: ['color', 'disableRipple'],\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  exportAs: 'matRadioButton',\n  host: {\n    'class': 'mat-radio-button',\n    '[class.mat-radio-checked]': 'checked',\n    '[class.mat-radio-disabled]': 'disabled',\n    '[attr.id]': 'id',\n    // Note: under normal conditions focus shouldn't land on this element, however it may be\n    // programmatically set, for example inside of a focus trap, in this case we want to forward\n    // the focus to the native element.\n    '(focus)': '_inputElement.nativeElement.focus()',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatRadioButton extends _MatRadioButtonMixinBase\n    implements OnInit, AfterViewInit, OnDestroy, CanColor, CanDisableRipple {\n\n  private _uniqueId: string = `mat-radio-${++nextUniqueId}`;\n\n  /** The unique ID for the radio button. */\n  @Input() id: string = this._uniqueId;\n\n  /** Analog to HTML 'name' attribute used to group radios for unique selection. */\n  @Input() name: string;\n\n  /** Used to set the 'aria-label' attribute on the underlying input element. */\n  @Input('aria-label') ariaLabel: string;\n\n  /** The 'aria-labelledby' attribute takes precedence as the element's text alternative. */\n  @Input('aria-labelledby') ariaLabelledby: string;\n\n  /** Whether this radio button is checked. */\n  @Input()\n  get checked(): boolean { return this._checked; }\n  set checked(value: boolean) {\n    const newCheckedState = coerceBooleanProperty(value);\n\n    if (this._checked != newCheckedState) {\n      this._checked = newCheckedState;\n\n      if (newCheckedState && this.radioGroup && this.radioGroup.value != this.value) {\n        this.radioGroup.selected = this;\n      } else if (!newCheckedState && this.radioGroup && this.radioGroup.value == this.value) {\n        // When unchecking the selected radio button, update the selected radio\n        // property on the group.\n        this.radioGroup.selected = null;\n      }\n\n      if (newCheckedState) {\n        // Notify all radio buttons with the same name to un-check.\n        this._radioDispatcher.notify(this.id, this.name);\n      }\n      this._changeDetector.markForCheck();\n    }\n  }\n\n  /** The value of this radio button. */\n  @Input()\n  get value(): any { return this._value; }\n  set value(value: any) {\n    if (this._value != value) {\n      this._value = value;\n      if (this.radioGroup != null) {\n        if (!this.checked) {\n          // Update checked when the value changed to match the radio group's value\n          this.checked = this.radioGroup.value == value;\n        }\n        if (this.checked) {\n          this.radioGroup.selected = this;\n        }\n      }\n    }\n  }\n\n  /**\n   * Whether or not the radio-button should appear before or after the label.\n   * @deprecated\n   */\n  @Input()\n  get align(): 'start' | 'end' {\n    // align refers to the checkbox relative to the label, while labelPosition refers to the\n    // label relative to the checkbox. As such, they are inverted.\n    return this.labelPosition == 'after' ? 'start' : 'end';\n  }\n  set align(v) {\n    this.labelPosition = (v == 'start') ? 'after' : 'before';\n  }\n\n  private _labelPosition: 'before' | 'after';\n\n  /** Whether the label should appear after or before the radio button. Defaults to 'after' */\n  @Input()\n  get labelPosition(): 'before' | 'after' {\n    return this._labelPosition || (this.radioGroup && this.radioGroup.labelPosition) || 'after';\n  }\n  set labelPosition(value) {\n    this._labelPosition = value;\n  }\n\n  /** Whether the radio button is disabled. */\n  @Input()\n  get disabled(): boolean {\n    return this._disabled || (this.radioGroup != null && this.radioGroup.disabled);\n  }\n  set disabled(value: boolean) {\n    this._disabled = coerceBooleanProperty(value);\n  }\n\n  /** Whether the radio button is required. */\n  @Input()\n  get required(): boolean {\n    return this._required || (this.radioGroup && this.radioGroup.required);\n  }\n  set required(value: boolean) {\n    this._required = coerceBooleanProperty(value);\n  }\n\n  /**\n   * Event emitted when the checked state of this radio button changes.\n   * Change events are only emitted when the value changes due to user interaction with\n   * the radio button (the same behavior as `<input type-\"radio\">`).\n   */\n  @Output() change: EventEmitter<MatRadioChange> = new EventEmitter<MatRadioChange>();\n\n  /** The parent radio group. May or may not be present. */\n  radioGroup: MatRadioGroup;\n\n  /** ID of the native input element inside `<mat-radio-button>` */\n  get inputId(): string { return `${this.id || this._uniqueId}-input`; }\n\n  /** Whether this radio is checked. */\n  private _checked: boolean = false;\n\n  /** Whether this radio is disabled. */\n  private _disabled: boolean;\n\n  /** Whether this radio is required. */\n  private _required: boolean;\n\n  /** Value assigned to this radio. */\n  private _value: any = null;\n\n  /** The child ripple instance. */\n  @ViewChild(MatRipple) _ripple: MatRipple;\n\n  /** Ripple configuration for the mouse ripples and focus indicators. */\n  _rippleConfig: RippleConfig = {centered: true, radius: 23, speedFactor: 1.5};\n\n  /** Reference to the current focus ripple. */\n  private _focusRipple: RippleRef | null;\n\n  /** Unregister function for _radioDispatcher */\n  private _removeUniqueSelectionListener: () => void = () => {};\n\n  /** The native `<input type=radio>` element */\n  @ViewChild('input') _inputElement: ElementRef;\n\n  constructor(@Optional() radioGroup: MatRadioGroup,\n              elementRef: ElementRef,\n              private _changeDetector: ChangeDetectorRef,\n              private _focusMonitor: FocusMonitor,\n              private _radioDispatcher: UniqueSelectionDispatcher) {\n    super(elementRef);\n\n    // Assertions. Ideally these should be stripped out by the compiler.\n    // TODO(jelbourn): Assert that there's no name binding AND a parent radio group.\n    this.radioGroup = radioGroup;\n\n    this._removeUniqueSelectionListener =\n      _radioDispatcher.listen((id: string, name: string) => {\n        if (id != this.id && name == this.name) {\n          this.checked = false;\n        }\n      });\n  }\n\n  /** Focuses the radio button. */\n  focus(): void {\n    this._focusMonitor.focusVia(this._inputElement.nativeElement, 'keyboard');\n  }\n\n  /**\n   * Marks the radio button as needing checking for change detection.\n   * This method is exposed because the parent radio group will directly\n   * update bound properties of the radio button.\n   */\n  _markForCheck() {\n    // When group value changes, the button will not be notified. Use `markForCheck` to explicit\n    // update radio button's status\n    this._changeDetector.markForCheck();\n  }\n\n  ngOnInit() {\n    if (this.radioGroup) {\n      // If the radio is inside a radio group, determine if it should be checked\n      this.checked = this.radioGroup.value === this._value;\n      // Copy name from parent radio group\n      this.name = this.radioGroup.name;\n    }\n  }\n\n  ngAfterViewInit() {\n    this._focusMonitor\n      .monitor(this._inputElement.nativeElement)\n      .subscribe(focusOrigin => this._onInputFocusChange(focusOrigin));\n  }\n\n  ngOnDestroy() {\n    this._focusMonitor.stopMonitoring(this._inputElement.nativeElement);\n    this._removeUniqueSelectionListener();\n  }\n\n  /** Dispatch change event with current value. */\n  private _emitChangeEvent(): void {\n    const event = new MatRadioChange();\n    event.source = this;\n    event.value = this._value;\n    this.change.emit(event);\n  }\n\n  _isRippleDisabled() {\n    return this.disableRipple || this.disabled;\n  }\n\n  _onInputClick(event: Event) {\n    // We have to stop propagation for click events on the visual hidden input element.\n    // By default, when a user clicks on a label element, a generated click event will be\n    // dispatched on the associated input element. Since we are using a label element as our\n    // root container, the click event on the `radio-button` will be executed twice.\n    // The real click event will bubble up, and the generated click event also tries to bubble up.\n    // This will lead to multiple click events.\n    // Preventing bubbling for the second event will solve that issue.\n    event.stopPropagation();\n  }\n\n  /**\n   * Triggered when the radio button received a click or the input recognized any change.\n   * Clicking on a label element, will trigger a change event on the associated input.\n   */\n  _onInputChange(event: Event) {\n    // We always have to stop propagation on the change event.\n    // Otherwise the change event, from the input element, will bubble up and\n    // emit its event object to the `change` output.\n    event.stopPropagation();\n\n    const groupValueChanged = this.radioGroup && this.value != this.radioGroup.value;\n    this.checked = true;\n    this._emitChangeEvent();\n\n    if (this.radioGroup) {\n      this.radioGroup._controlValueAccessorChangeFn(this.value);\n      this.radioGroup._touch();\n      if (groupValueChanged) {\n        this.radioGroup._emitChangeEvent();\n      }\n    }\n  }\n\n  /** Function is called whenever the focus changes for the input element. */\n  private _onInputFocusChange(focusOrigin: FocusOrigin) {\n    if (!this._focusRipple && focusOrigin === 'keyboard') {\n      this._focusRipple = this._ripple.launch(0, 0, {persistent: true, ...this._rippleConfig});\n    } else if (!focusOrigin) {\n      if (this.radioGroup) {\n        this.radioGroup._touch();\n      }\n\n      if (this._focusRipple) {\n        this._focusRipple.fadeOut();\n        this._focusRipple = null;\n      }\n    }\n  }\n\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {A11yModule} from '@angular/cdk/a11y';\nimport {UNIQUE_SELECTION_DISPATCHER_PROVIDER} from '@angular/cdk/collections';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {MatRadioButton, MatRadioGroup} from './radio';\n\n@NgModule({\n  imports: [CommonModule, MatRippleModule, MatCommonModule, A11yModule],\n  exports: [MatRadioGroup, MatRadioButton, MatCommonModule],\n  providers: [UNIQUE_SELECTION_DISPATCHER_PROVIDER],\n  declarations: [MatRadioGroup, MatRadioButton],\n})\nexport class MatRadioModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/** Animations used by the Material drawers. */\nexport const matDrawerAnimations: {\n  readonly transformDrawer: AnimationTriggerMetadata;\n} = {\n  /** Animation that slides a drawer in and out. */\n  transformDrawer: trigger('transform', [\n    state('open, open-instant', style({\n      transform: 'translate3d(0, 0, 0)',\n      visibility: 'visible',\n    })),\n    state('void', style({\n      visibility: 'hidden',\n    })),\n    transition('void => open-instant', animate('0ms')),\n    transition('void <=> open, open-instant => void',\n        animate('400ms cubic-bezier(0.25, 0.8, 0.25, 1)'))\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {AnimationEvent} from '@angular/animations';\nimport {FocusTrap, FocusTrapFactory, FocusMonitor, FocusOrigin} from '@angular/cdk/a11y';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {ESCAPE} from '@angular/cdk/keycodes';\nimport {Platform} from '@angular/cdk/platform';\nimport {\n  AfterContentChecked,\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  ContentChildren,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  Output,\n  QueryList,\n  ViewEncapsulation,\n  InjectionToken,\n} from '@angular/core';\nimport {DOCUMENT} from '@angular/common';\nimport {merge} from 'rxjs/observable/merge';\nimport {filter} from 'rxjs/operators/filter';\nimport {take} from 'rxjs/operators/take';\nimport {startWith} from 'rxjs/operators/startWith';\nimport {takeUntil} from 'rxjs/operators/takeUntil';\nimport {debounceTime} from 'rxjs/operators/debounceTime';\nimport {map} from 'rxjs/operators/map';\nimport {Subject} from 'rxjs/Subject';\nimport {Observable} from 'rxjs/Observable';\nimport {matDrawerAnimations} from './drawer-animations';\n\n\n/** Throws an exception when two MatDrawer are matching the same position. */\nexport function throwMatDuplicatedDrawerError(position: string) {\n  throw Error(`A drawer was already declared for 'position=\"${position}\"'`);\n}\n\n\n/**\n * Drawer toggle promise result.\n * @deprecated\n */\nexport class MatDrawerToggleResult {\n  constructor(\n    /** Whether the drawer is opened or closed. */\n    public type: 'open' | 'close',\n    /** Whether the drawer animation is finished. */\n    public animationFinished: boolean) {}\n}\n\n/** Configures whether drawers should use auto sizing by default. */\nexport const MAT_DRAWER_DEFAULT_AUTOSIZE =\n    new InjectionToken<boolean>('MAT_DRAWER_DEFAULT_AUTOSIZE');\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-drawer-content',\n  template: '<ng-content></ng-content>',\n  host: {\n    'class': 'mat-drawer-content',\n    '[style.margin-left.px]': '_margins.left',\n    '[style.margin-right.px]': '_margins.right',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n})\nexport class MatDrawerContent implements AfterContentInit {\n  /**\n   * Margins to be applied to the content. These are used to push / shrink the drawer content when a\n   * drawer is open. We use margin rather than transform even for push mode because transform breaks\n   * fixed position elements inside of the transformed element.\n   */\n  _margins: {left: number|null, right: number|null} = {left: null, right: null};\n\n  constructor(\n      private _changeDetectorRef: ChangeDetectorRef,\n      @Inject(forwardRef(() => MatDrawerContainer)) private _container: MatDrawerContainer) {\n  }\n\n  ngAfterContentInit() {\n    this._container._contentMargins.subscribe(margins => {\n      this._margins = margins;\n      this._changeDetectorRef.markForCheck();\n    });\n  }\n}\n\n\n/**\n * This component corresponds to a drawer that can be opened on the drawer container.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-drawer',\n  exportAs: 'matDrawer',\n  template: '<ng-content></ng-content>',\n  animations: [matDrawerAnimations.transformDrawer],\n  host: {\n    'class': 'mat-drawer',\n    '[@transform]': '_animationState',\n    '(@transform.start)': '_onAnimationStart($event)',\n    '(@transform.done)': '_onAnimationEnd($event)',\n    '(keydown)': 'handleKeydown($event)',\n    // must prevent the browser from aligning text based on value\n    '[attr.align]': 'null',\n    '[class.mat-drawer-end]': 'position === \"end\"',\n    '[class.mat-drawer-over]': 'mode === \"over\"',\n    '[class.mat-drawer-push]': 'mode === \"push\"',\n    '[class.mat-drawer-side]': 'mode === \"side\"',\n    'tabIndex': '-1',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n})\nexport class MatDrawer implements AfterContentInit, AfterContentChecked, OnDestroy {\n  private _focusTrap: FocusTrap;\n  private _elementFocusedBeforeDrawerWasOpened: HTMLElement | null = null;\n\n  /** Whether the drawer is initialized. Used for disabling the initial animation. */\n  private _enableAnimations = false;\n\n  /** The side that the drawer is attached to. */\n  @Input()\n  get position(): 'start' | 'end' { return this._position; }\n  set position(value: 'start' | 'end') {\n    // Make sure we have a valid value.\n    value = value === 'end' ? 'end' : 'start';\n    if (value != this._position) {\n      this._position = value;\n      this.onAlignChanged.emit();\n      this.onPositionChanged.emit();\n    }\n  }\n  private _position: 'start' | 'end' = 'start';\n\n  /** @deprecated */\n  @Input()\n  get align(): 'start' | 'end' { return this.position; }\n  set align(value: 'start' | 'end') { this.position = value; }\n\n  /** Mode of the drawer; one of 'over', 'push' or 'side'. */\n  @Input()\n  get mode(): 'over' | 'push' | 'side' { return this._mode; }\n  set mode(value: 'over' | 'push' | 'side') {\n    this._mode = value;\n    this._modeChanged.next();\n  }\n  private _mode: 'over' | 'push' | 'side' = 'over';\n\n  /** Whether the drawer can be closed with the escape key or by clicking on the backdrop. */\n  @Input()\n  get disableClose(): boolean { return this._disableClose; }\n  set disableClose(value: boolean) { this._disableClose = coerceBooleanProperty(value); }\n  private _disableClose: boolean = false;\n\n  /** Whether the drawer is opened. */\n  private _opened: boolean = false;\n\n  /** How the sidenav was opened (keypress, mouse click etc.) */\n  private _openedVia: FocusOrigin | null;\n\n  /** Emits whenever the drawer has started animating. */\n  _animationStarted = new EventEmitter<AnimationEvent>();\n\n  /** Current state of the sidenav animation. */\n  _animationState: 'open-instant' | 'open' | 'void' = 'void';\n\n  /** Event emitted when the drawer open state is changed. */\n  @Output() openedChange: EventEmitter<boolean> =\n      // Note this has to be async in order to avoid some issues with two-bindings (see #8872).\n      new EventEmitter<boolean>(/* isAsync */true);\n\n  /** Event emitted when the drawer has been opened. */\n  @Output('opened')\n  get _openedStream(): Observable<void> {\n    return this.openedChange.pipe(filter(o => o), map(() => {}));\n  }\n\n  /** Event emitted when the drawer has started opening. */\n  @Output()\n  get openedStart(): Observable<void> {\n    return this._animationStarted.pipe(\n      filter(e => e.fromState !== e.toState && e.toState.indexOf('open') === 0),\n      map(() => {})\n    );\n  }\n\n  /** Event emitted when the drawer has been closed. */\n  @Output('closed')\n  get _closedStream(): Observable<void> {\n    return this.openedChange.pipe(filter(o => !o), map(() => {}));\n  }\n\n  /** Event emitted when the drawer has started closing. */\n  @Output()\n  get closedStart(): Observable<void> {\n    return this._animationStarted.pipe(\n      filter(e => e.fromState !== e.toState && e.toState === 'void'),\n      map(() => {})\n    );\n  }\n\n  /**\n   * Event emitted when the drawer is fully opened.\n   * @deprecated Use `opened` instead.\n   */\n  @Output('open') onOpen: Observable<void> = this._openedStream;\n\n  /**\n   * Event emitted when the drawer is fully closed.\n   * @deprecated Use `closed` instead.\n   */\n  @Output('close') onClose: Observable<void> = this._closedStream;\n\n  /** Event emitted when the drawer's position changes. */\n  @Output('positionChanged') onPositionChanged: EventEmitter<void> = new EventEmitter<void>();\n\n  /** @deprecated */\n  @Output('align-changed') onAlignChanged: EventEmitter<void> = new EventEmitter<void>();\n\n  /**\n   * An observable that emits when the drawer mode changes. This is used by the drawer container to\n   * to know when to when the mode changes so it can adapt the margins on the content.\n   */\n  _modeChanged = new Subject();\n\n  get _isFocusTrapEnabled(): boolean {\n    // The focus trap is only enabled when the drawer is open in any mode other than side.\n    return this.opened && this.mode !== 'side';\n  }\n\n  constructor(private _elementRef: ElementRef,\n              private _focusTrapFactory: FocusTrapFactory,\n              private _focusMonitor: FocusMonitor,\n              private _platform: Platform,\n              @Optional() @Inject(DOCUMENT) private _doc: any) {\n\n    this.openedChange.subscribe((opened: boolean) => {\n      if (opened) {\n        if (this._doc) {\n          this._elementFocusedBeforeDrawerWasOpened = this._doc.activeElement as HTMLElement;\n        }\n\n        if (this._isFocusTrapEnabled && this._focusTrap) {\n          this._trapFocus();\n        }\n      } else {\n        this._restoreFocus();\n      }\n    });\n  }\n\n  /** Traps focus inside the drawer. */\n  private _trapFocus() {\n    this._focusTrap.focusInitialElementWhenReady().then(hasMovedFocus => {\n      // If there were no focusable elements, focus the sidenav itself so the keyboard navigation\n      // still works. We need to check that `focus` is a function due to Universal.\n      if (!hasMovedFocus && typeof this._elementRef.nativeElement.focus === 'function') {\n        this._elementRef.nativeElement.focus();\n      }\n    });\n  }\n\n  /**\n   * If focus is currently inside the drawer, restores it to where it was before the drawer\n   * opened.\n   */\n  private _restoreFocus() {\n    const activeEl = this._doc && this._doc.activeElement;\n\n    if (activeEl && this._elementRef.nativeElement.contains(activeEl)) {\n      if (this._elementFocusedBeforeDrawerWasOpened instanceof HTMLElement) {\n        this._focusMonitor.focusVia(this._elementFocusedBeforeDrawerWasOpened, this._openedVia);\n      } else {\n        this._elementRef.nativeElement.blur();\n      }\n    }\n\n    this._elementFocusedBeforeDrawerWasOpened = null;\n    this._openedVia = null;\n  }\n\n  ngAfterContentInit() {\n    this._focusTrap = this._focusTrapFactory.create(this._elementRef.nativeElement);\n    this._focusTrap.enabled = this._isFocusTrapEnabled;\n  }\n\n  ngAfterContentChecked() {\n    // Enable the animations after the lifecycle hooks have run, in order to avoid animating\n    // drawers that are open by default. When we're on the server, we shouldn't enable the\n    // animations, because we don't want the drawer to animate the first time the user sees\n    // the page.\n    if (this._platform.isBrowser) {\n      this._enableAnimations = true;\n    }\n  }\n\n  ngOnDestroy() {\n    if (this._focusTrap) {\n      this._focusTrap.destroy();\n    }\n  }\n\n  /**\n   * Whether the drawer is opened. We overload this because we trigger an event when it\n   * starts or end.\n   */\n  @Input()\n  get opened(): boolean { return this._opened; }\n  set opened(v: boolean) { this.toggle(coerceBooleanProperty(v)); }\n\n  /**\n   * Open the drawer.\n   * @param openedVia Whether the drawer was opened by a key press, mouse click or programmatically.\n   * Used for focus management after the sidenav is closed.\n   */\n  open(openedVia?: FocusOrigin): Promise<void> {\n    return this.toggle(true, openedVia);\n  }\n\n  /** Close the drawer. */\n  close(): Promise<void> {\n    return this.toggle(false);\n  }\n\n  /**\n   * Toggle this drawer.\n   * @param isOpen Whether the drawer should be open.\n   * @param openedVia Whether the drawer was opened by a key press, mouse click or programmatically.\n   * Used for focus management after the sidenav is closed.\n   */\n  toggle(isOpen: boolean = !this.opened, openedVia: FocusOrigin = 'program'):\n    Promise<void> {\n\n    this._opened = isOpen;\n\n    if (isOpen) {\n      this._animationState = this._enableAnimations ? 'open' : 'open-instant';\n      this._openedVia = openedVia;\n    } else {\n      this._animationState = 'void';\n      this._restoreFocus();\n    }\n\n    if (this._focusTrap) {\n      this._focusTrap.enabled = this._isFocusTrapEnabled;\n    }\n\n    // TODO(crisbeto): This promise is here for backwards-compatibility.\n    // It should be removed next time we do breaking changes in the drawer.\n    return new Promise<any>(resolve => {\n      this.openedChange.pipe(take(1)).subscribe(open => {\n        resolve(new MatDrawerToggleResult(open ? 'open' : 'close', true));\n      });\n    });\n  }\n\n  /**\n   * Handles the keyboard events.\n   * @docs-private\n   */\n  handleKeydown(event: KeyboardEvent) {\n    if (event.keyCode === ESCAPE && !this.disableClose) {\n      this.close();\n      event.stopPropagation();\n    }\n  }\n\n  _onAnimationStart(event: AnimationEvent) {\n    this._animationStarted.emit(event);\n  }\n\n  _onAnimationEnd(event: AnimationEvent) {\n    const {fromState, toState} = event;\n\n    if ((toState.indexOf('open') === 0 && fromState === 'void') ||\n        (toState === 'void' && fromState.indexOf('open') === 0)) {\n      this.openedChange.emit(this._opened);\n    }\n  }\n\n  get _width() {\n    return this._elementRef.nativeElement ? (this._elementRef.nativeElement.offsetWidth || 0) : 0;\n  }\n}\n\n\n/**\n * <mat-drawer-container> component.\n *\n * This is the parent component to one or two <mat-drawer>s that validates the state internally\n * and coordinates the backdrop and content styling.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-drawer-container',\n  exportAs: 'matDrawerContainer',\n  templateUrl: 'drawer-container.html',\n  styleUrls: ['drawer.css'],\n  host: {\n    'class': 'mat-drawer-container',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n})\nexport class MatDrawerContainer implements AfterContentInit, OnDestroy {\n  @ContentChildren(MatDrawer) _drawers: QueryList<MatDrawer>;\n  @ContentChild(MatDrawerContent) _content: MatDrawerContent;\n\n  /** The drawer child with the `start` position. */\n  get start(): MatDrawer | null { return this._start; }\n\n  /** The drawer child with the `end` position. */\n  get end(): MatDrawer | null { return this._end; }\n\n  /**\n   * Whether to automatically resize the container whenever\n   * the size of any of its drawers changes.\n   *\n   * **Use at your own risk!** Enabling this option can cause layout thrashing by measuring\n   * the drawers on every change detection cycle. Can be configured globally via the\n   * `MAT_DRAWER_DEFAULT_AUTOSIZE` token.\n   */\n  @Input()\n  get autosize(): boolean { return this._autosize; }\n  set autosize(value: boolean) { this._autosize = coerceBooleanProperty(value); }\n  private _autosize: boolean;\n\n  /** Event emitted when the drawer backdrop is clicked. */\n  @Output() backdropClick = new EventEmitter<void>();\n\n  /** The drawer at the start/end position, independent of direction. */\n  private _start: MatDrawer | null;\n  private _end: MatDrawer | null;\n\n  /**\n   * The drawer at the left/right. When direction changes, these will change as well.\n   * They're used as aliases for the above to set the left/right style properly.\n   * In LTR, _left == _start and _right == _end.\n   * In RTL, _left == _end and _right == _start.\n   */\n  private _left: MatDrawer | null;\n  private _right: MatDrawer | null;\n\n  /** Emits when the component is destroyed. */\n  private _destroyed = new Subject<void>();\n\n  /** Emits on every ngDoCheck. Used for debouncing reflows. */\n  private _doCheckSubject = new Subject<void>();\n\n  _contentMargins = new Subject<{left: number|null, right: number|null}>();\n\n  constructor(@Optional() private _dir: Directionality,\n              private _element: ElementRef,\n              private _ngZone: NgZone,\n              private _changeDetectorRef: ChangeDetectorRef,\n              @Inject(MAT_DRAWER_DEFAULT_AUTOSIZE) defaultAutosize = false) {\n\n    // If a `Dir` directive exists up the tree, listen direction changes\n    // and update the left/right properties to point to the proper start/end.\n    if (_dir) {\n      _dir.change.pipe(takeUntil(this._destroyed)).subscribe(() => {\n        this._validateDrawers();\n        this._updateContentMargins();\n      });\n    }\n\n    this._autosize = defaultAutosize;\n  }\n\n  ngAfterContentInit() {\n    this._drawers.changes.pipe(startWith(null)).subscribe(() => {\n      this._validateDrawers();\n\n      this._drawers.forEach((drawer: MatDrawer) => {\n        this._watchDrawerToggle(drawer);\n        this._watchDrawerPosition(drawer);\n        this._watchDrawerMode(drawer);\n      });\n\n      if (!this._drawers.length ||\n          this._isDrawerOpen(this._start) ||\n          this._isDrawerOpen(this._end)) {\n        this._updateContentMargins();\n      }\n\n      this._changeDetectorRef.markForCheck();\n    });\n\n    this._doCheckSubject.pipe(\n      debounceTime(10), // Arbitrary debounce time, less than a frame at 60fps\n      takeUntil(this._destroyed)\n    ).subscribe(() => this._updateContentMargins());\n  }\n\n  ngOnDestroy() {\n    this._doCheckSubject.complete();\n    this._destroyed.next();\n    this._destroyed.complete();\n  }\n\n  /** Calls `open` of both start and end drawers */\n  open(): void {\n    this._drawers.forEach(drawer => drawer.open());\n  }\n\n  /** Calls `close` of both start and end drawers */\n  close(): void {\n    this._drawers.forEach(drawer => drawer.close());\n  }\n\n  ngDoCheck() {\n    // If users opted into autosizing, do a check every change detection cycle.\n    if (this._autosize && this._isPushed()) {\n      // Run outside the NgZone, otherwise the debouncer will throw us into an infinite loop.\n      this._ngZone.runOutsideAngular(() => this._doCheckSubject.next());\n    }\n  }\n\n  /**\n   * Subscribes to drawer events in order to set a class on the main container element when the\n   * drawer is open and the backdrop is visible. This ensures any overflow on the container element\n   * is properly hidden.\n   */\n  private _watchDrawerToggle(drawer: MatDrawer): void {\n    drawer._animationStarted.pipe(\n      takeUntil(this._drawers.changes),\n      filter((event: AnimationEvent) => event.fromState !== event.toState)\n    )\n    .subscribe((event: AnimationEvent) => {\n      // Set the transition class on the container so that the animations occur. This should not\n      // be set initially because animations should only be triggered via a change in state.\n      if (event.toState !== 'open-instant') {\n        this._element.nativeElement.classList.add('mat-drawer-transition');\n      }\n\n      this._updateContentMargins();\n      this._changeDetectorRef.markForCheck();\n    });\n\n    if (drawer.mode !== 'side') {\n      drawer.openedChange.pipe(takeUntil(this._drawers.changes)).subscribe(() =>\n          this._setContainerClass(drawer.opened));\n    }\n  }\n\n  /**\n   * Subscribes to drawer onPositionChanged event in order to\n   * re-validate drawers when the position changes.\n   */\n  private _watchDrawerPosition(drawer: MatDrawer): void {\n    if (!drawer) {\n      return;\n    }\n    // NOTE: We need to wait for the microtask queue to be empty before validating,\n    // since both drawers may be swapping positions at the same time.\n    drawer.onPositionChanged.pipe(takeUntil(this._drawers.changes)).subscribe(() => {\n      this._ngZone.onMicrotaskEmpty.asObservable().pipe(take(1)).subscribe(() => {\n        this._validateDrawers();\n      });\n    });\n  }\n\n  /** Subscribes to changes in drawer mode so we can run change detection. */\n  private _watchDrawerMode(drawer: MatDrawer): void {\n    if (drawer) {\n      drawer._modeChanged.pipe(takeUntil(merge(this._drawers.changes, this._destroyed)))\n        .subscribe(() => {\n          this._updateContentMargins();\n          this._changeDetectorRef.markForCheck();\n        });\n    }\n  }\n\n  /** Toggles the 'mat-drawer-opened' class on the main 'mat-drawer-container' element. */\n  private _setContainerClass(isAdd: boolean): void {\n    if (isAdd) {\n      this._element.nativeElement.classList.add('mat-drawer-opened');\n    } else {\n      this._element.nativeElement.classList.remove('mat-drawer-opened');\n    }\n  }\n\n  /** Validate the state of the drawer children components. */\n  private _validateDrawers() {\n    this._start = this._end = null;\n\n    // Ensure that we have at most one start and one end drawer.\n    this._drawers.forEach(drawer => {\n      if (drawer.position == 'end') {\n        if (this._end != null) {\n          throwMatDuplicatedDrawerError('end');\n        }\n        this._end = drawer;\n      } else {\n        if (this._start != null) {\n          throwMatDuplicatedDrawerError('start');\n        }\n        this._start = drawer;\n      }\n    });\n\n    this._right = this._left = null;\n\n    // Detect if we're LTR or RTL.\n    if (!this._dir || this._dir.value == 'ltr') {\n      this._left = this._start;\n      this._right = this._end;\n    } else {\n      this._left = this._end;\n      this._right = this._start;\n    }\n  }\n\n  /** Whether the container is being pushed to the side by one of the drawers. */\n  private _isPushed() {\n    return (this._isDrawerOpen(this._start) && this._start!.mode != 'over') ||\n           (this._isDrawerOpen(this._end) && this._end!.mode != 'over');\n  }\n\n  _onBackdropClicked() {\n    this.backdropClick.emit();\n    this._closeModalDrawer();\n  }\n\n  _closeModalDrawer() {\n    // Close all open drawers where closing is not disabled and the mode is not `side`.\n    [this._start, this._end]\n      .filter(drawer => drawer && !drawer.disableClose && drawer.mode !== 'side')\n      .forEach(drawer => drawer!.close());\n  }\n\n  _isShowingBackdrop(): boolean {\n    return (this._isDrawerOpen(this._start) && this._start!.mode != 'side')\n        || (this._isDrawerOpen(this._end) && this._end!.mode != 'side');\n  }\n\n  private _isDrawerOpen(drawer: MatDrawer | null): boolean {\n    return drawer != null && drawer.opened;\n  }\n\n  /**\n   * Recalculates and updates the inline styles for the content. Note that this should be used\n   * sparingly, because it causes a reflow.\n   */\n  private _updateContentMargins() {\n    // 1. For drawers in `over` mode, they don't affect the content.\n    // 2. For drawers in `side` mode they should shrink the content. We do this by adding to the\n    //    left margin (for left drawer) or right margin (for right the drawer).\n    // 3. For drawers in `push` mode the should shift the content without resizing it. We do this by\n    //    adding to the left or right margin and simultaneously subtracting the same amount of\n    //    margin from the other side.\n\n    let left = 0;\n    let right = 0;\n\n    if (this._left && this._left.opened) {\n      if (this._left.mode == 'side') {\n        left += this._left._width;\n      } else if (this._left.mode == 'push') {\n        let width = this._left._width;\n        left += width;\n        right -= width;\n      }\n    }\n\n    if (this._right && this._right.opened) {\n      if (this._right.mode == 'side') {\n        right += this._right._width;\n      } else if (this._right.mode == 'push') {\n        let width = this._right._width;\n        right += width;\n        left -= width;\n      }\n    }\n\n    // Pull back into the NgZone since in some cases we could be outside.\n    this._ngZone.run(() => this._contentMargins.next({left, right}));\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {A11yModule, ARIA_DESCRIBER_PROVIDER} from '@angular/cdk/a11y';\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {PlatformModule} from '@angular/cdk/platform';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {\n  MAT_TOOLTIP_SCROLL_STRATEGY_PROVIDER,\n  MAT_TOOLTIP_DEFAULT_OPTIONS,\n  MatTooltip,\n  TooltipComponent,\n} from './tooltip';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    OverlayModule,\n    MatCommonModule,\n    PlatformModule,\n    A11yModule,\n  ],\n  exports: [MatTooltip, TooltipComponent, MatCommonModule],\n  declarations: [MatTooltip, TooltipComponent],\n  entryComponents: [TooltipComponent],\n  providers: [\n    MAT_TOOLTIP_SCROLL_STRATEGY_PROVIDER,\n    ARIA_DESCRIBER_PROVIDER,\n    {\n      provide: MAT_TOOLTIP_DEFAULT_OPTIONS,\n      useValue: {\n        showDelay: 0,\n        hideDelay: 0,\n        touchendHideDelay: 1500\n      }\n    }\n  ],\n})\nexport class MatTooltipModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable, SkipSelf, Optional } from '@angular/core';\nimport {Subject} from 'rxjs/Subject';\n\n/**\n * To modify the labels and text displayed, create a new instance of MatPaginatorIntl and\n * include it in a custom provider\n */\n@Injectable()\nexport class MatPaginatorIntl {\n  /**\n   * Stream that emits whenever the labels here are changed. Use this to notify\n   * components if the labels have changed after initialization.\n   */\n  changes: Subject<void> = new Subject<void>();\n\n  /** A label for the page size selector. */\n  itemsPerPageLabel: string = 'Items per page:';\n\n  /** A label for the button that increments the current page. */\n  nextPageLabel: string = 'Next page';\n\n  /** A label for the button that decrements the current page. */\n  previousPageLabel: string = 'Previous page';\n\n  /** A label for the range of items within the current page and the length of the whole list. */\n  getRangeLabel = (page: number, pageSize: number, length: number) => {\n    if (length == 0 || pageSize == 0) { return `0 of ${length}`; }\n\n    length = Math.max(length, 0);\n\n    const startIndex = page * pageSize;\n\n    // If the start index exceeds the list length, do not try and fix the end index to the end.\n    const endIndex = startIndex < length ?\n        Math.min(startIndex + pageSize, length) :\n        startIndex + pageSize;\n\n    return `${startIndex + 1} - ${endIndex} of ${length}`;\n  }\n}\n\n/** @docs-private */\nexport function MAT_PAGINATOR_INTL_PROVIDER_FACTORY(parentIntl: MatPaginatorIntl) {\n  return parentIntl || new MatPaginatorIntl();\n}\n\n/** @docs-private */\nexport const MAT_PAGINATOR_INTL_PROVIDER = {\n  // If there is already an MatPaginatorIntl available, use that. Otherwise, provide a new one.\n  provide: MatPaginatorIntl,\n  deps: [[new Optional(), new SkipSelf(), MatPaginatorIntl]],\n  useFactory: MAT_PAGINATOR_INTL_PROVIDER_FACTORY\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceNumberProperty} from '@angular/cdk/coercion';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  OnInit,\n  Output,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {Subscription} from 'rxjs/Subscription';\nimport {MatPaginatorIntl} from './paginator-intl';\n\n/** The default page size if there is no page size and there are no provided page size options. */\nconst DEFAULT_PAGE_SIZE = 50;\n\n/**\n * Change event object that is emitted when the user selects a\n * different page size or navigates to another page.\n */\nexport class PageEvent {\n  /** The current page index. */\n  pageIndex: number;\n\n  /** The current page size */\n  pageSize: number;\n\n  /** The current total number of items being paged */\n  length: number;\n}\n\n/**\n * Component to provide navigation between paged information. Displays the size of the current\n * page, user-selectable options to change that size, what items are being shown, and\n * navigational button to go to the previous or next page.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-paginator',\n  exportAs: 'matPaginator',\n  templateUrl: 'paginator.html',\n  styleUrls: ['paginator.css'],\n  host: {\n    'class': 'mat-paginator',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n})\nexport class MatPaginator implements OnInit, OnDestroy {\n  private _initialized: boolean;\n  private _intlChanges: Subscription;\n\n  /** The zero-based page index of the displayed list of items. Defaulted to 0. */\n  @Input()\n  get pageIndex(): number { return this._pageIndex; }\n  set pageIndex(pageIndex: number) {\n    this._pageIndex = coerceNumberProperty(pageIndex);\n    this._changeDetectorRef.markForCheck();\n  }\n  _pageIndex: number = 0;\n\n  /** The length of the total number of items that are being paginated. Defaulted to 0. */\n  @Input()\n  get length(): number { return this._length; }\n  set length(length: number) {\n    this._length = coerceNumberProperty(length);\n    this._changeDetectorRef.markForCheck();\n  }\n  _length: number = 0;\n\n  /** Number of items to display on a page. By default set to 50. */\n  @Input()\n  get pageSize(): number { return this._pageSize; }\n  set pageSize(pageSize: number) {\n    this._pageSize = coerceNumberProperty(pageSize);\n    this._updateDisplayedPageSizeOptions();\n  }\n  private _pageSize: number;\n\n  /** The set of provided page size options to display to the user. */\n  @Input()\n  get pageSizeOptions(): number[] { return this._pageSizeOptions; }\n  set pageSizeOptions(pageSizeOptions: number[]) {\n    this._pageSizeOptions = (pageSizeOptions || []).map(p => coerceNumberProperty(p));\n    this._updateDisplayedPageSizeOptions();\n  }\n  private _pageSizeOptions: number[] = [];\n\n  /** Whether to hide the page size selection UI from the user. */\n  @Input() hidePageSize = false;\n\n  /** Event emitted when the paginator changes the page size or page index. */\n  @Output() page = new EventEmitter<PageEvent>();\n\n  /** Displayed set of page size options. Will be sorted and include current page size. */\n  _displayedPageSizeOptions: number[];\n\n  constructor(public _intl: MatPaginatorIntl,\n              private _changeDetectorRef: ChangeDetectorRef) {\n    this._intlChanges = _intl.changes.subscribe(() => this._changeDetectorRef.markForCheck());\n  }\n\n  ngOnInit() {\n    this._initialized = true;\n    this._updateDisplayedPageSizeOptions();\n  }\n\n  ngOnDestroy() {\n    this._intlChanges.unsubscribe();\n  }\n\n  /** Advances to the next page if it exists. */\n  nextPage(): void {\n    if (!this.hasNextPage()) { return; }\n    this.pageIndex++;\n    this._emitPageEvent();\n  }\n\n  /** Move back to the previous page if it exists. */\n  previousPage(): void {\n    if (!this.hasPreviousPage()) { return; }\n    this.pageIndex--;\n    this._emitPageEvent();\n  }\n\n  /** Whether there is a previous page. */\n  hasPreviousPage(): boolean {\n    return this.pageIndex >= 1 && this.pageSize != 0;\n  }\n\n  /** Whether there is a next page. */\n  hasNextPage(): boolean {\n    const numberOfPages = Math.ceil(this.length / this.pageSize) - 1;\n    return this.pageIndex < numberOfPages && this.pageSize != 0;\n  }\n\n  /**\n   * Changes the page size so that the first item displayed on the page will still be\n   * displayed using the new page size.\n   *\n   * For example, if the page size is 10 and on the second page (items indexed 10-19) then\n   * switching so that the page size is 5 will set the third page as the current page so\n   * that the 10th item will still be displayed.\n   */\n  _changePageSize(pageSize: number) {\n    // Current page needs to be updated to reflect the new page size. Navigate to the page\n    // containing the previous page's first item.\n    const startIndex = this.pageIndex * this.pageSize;\n    this.pageIndex = Math.floor(startIndex / pageSize) || 0;\n\n    this.pageSize = pageSize;\n    this._emitPageEvent();\n  }\n\n  /**\n   * Updates the list of page size options to display to the user. Includes making sure that\n   * the page size is an option and that the list is sorted.\n   */\n  private _updateDisplayedPageSizeOptions() {\n    if (!this._initialized) { return; }\n\n    // If no page size is provided, use the first page size option or the default page size.\n    if (!this.pageSize) {\n      this._pageSize = this.pageSizeOptions.length != 0 ?\n          this.pageSizeOptions[0] :\n          DEFAULT_PAGE_SIZE;\n    }\n\n    this._displayedPageSizeOptions = this.pageSizeOptions.slice();\n    if (this._displayedPageSizeOptions.indexOf(this.pageSize) == -1) {\n      this._displayedPageSizeOptions.push(this.pageSize);\n    }\n\n    // Sort the numbers using a number-specific sort function.\n    this._displayedPageSizeOptions.sort((a, b) => a - b);\n\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Emits an event notifying that a change of the paginator's properties has been triggered. */\n  private _emitPageEvent() {\n    this.page.next({\n      pageIndex: this.pageIndex,\n      pageSize: this.pageSize,\n      length: this.length\n    });\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatButtonModule} from '@angular/material/button';\nimport {MatSelectModule} from '@angular/material/select';\nimport {MatTooltipModule} from '@angular/material/tooltip';\nimport {MatPaginator} from './paginator';\nimport {MAT_PAGINATOR_INTL_PROVIDER} from './paginator-intl';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatButtonModule,\n    MatSelectModule,\n    MatTooltipModule,\n  ],\n  exports: [MatPaginator],\n  declarations: [MatPaginator],\n  providers: [MAT_PAGINATOR_INTL_PROVIDER],\n})\nexport class MatPaginatorModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Component, ChangeDetectionStrategy, Input, ViewEncapsulation} from '@angular/core';\n\n// TODO(josephperrott): Benchpress tests.\n// TODO(josephperrott): Add ARIA attributes for progressbar \"for\".\n\n\n/**\n * <mat-progress-bar> component.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-progress-bar',\n  exportAs: 'matProgressBar',\n  host: {\n    'role': 'progressbar',\n    'aria-valuemin': '0',\n    'aria-valuemax': '100',\n    '[attr.aria-valuenow]': 'value',\n    '[attr.mode]': 'mode',\n    '[class.mat-primary]': 'color == \"primary\"',\n    '[class.mat-accent]': 'color == \"accent\"',\n    '[class.mat-warn]': 'color == \"warn\"',\n    'class': 'mat-progress-bar',\n  },\n  templateUrl: 'progress-bar.html',\n  styleUrls: ['progress-bar.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n})\nexport class MatProgressBar {\n  /** Color of the progress bar. */\n  @Input() color: 'primary' | 'accent' | 'warn' = 'primary';\n\n  private _value: number = 0;\n\n  /** Value of the progressbar. Defaults to zero. Mirrored to aria-valuenow. */\n  @Input()\n  get value(): number { return this._value; }\n  set value(v: number) { this._value = clamp(v || 0); }\n\n  private _bufferValue: number = 0;\n\n  /** Buffer value of the progress bar. Defaults to zero. */\n  @Input()\n  get bufferValue(): number { return this._bufferValue; }\n  set bufferValue(v: number) { this._bufferValue = clamp(v || 0); }\n\n  /**\n   * Mode of the progress bar.\n   *\n   * Input must be one of these values: determinate, indeterminate, buffer, query, defaults to\n   * 'determinate'.\n   * Mirrored to mode attribute.\n   */\n  @Input() mode: 'determinate' | 'indeterminate' | 'buffer' | 'query' = 'determinate';\n\n  /** Gets the current transform value for the progress bar's primary indicator. */\n  _primaryTransform() {\n    let scale = this.value / 100;\n    return {transform: `scaleX(${scale})`};\n  }\n\n  /**\n   * Gets the current transform value for the progress bar's buffer indicator.  Only used if the\n   * progress mode is set to buffer, otherwise returns an undefined, causing no transformation.\n   */\n  _bufferTransform() {\n    if (this.mode == 'buffer') {\n      let scale = this.bufferValue / 100;\n      return {transform: `scaleX(${scale})`};\n    }\n  }\n}\n\n/** Clamps a value to be between two numbers, by default 0 and 100. */\nfunction clamp(v: number, min = 0, max = 100) {\n  return Math.max(min, Math.min(max, v));\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatProgressBar} from './progress-bar';\n\n\n@NgModule({\n  imports: [CommonModule, MatCommonModule],\n  exports: [MatProgressBar, MatCommonModule],\n  declarations: [MatProgressBar],\n})\nexport class MatProgressBarModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {AnimationEvent} from '@angular/animations';\nimport {FocusKeyManager} from '@angular/cdk/a11y';\nimport {Direction} from '@angular/cdk/bidi';\nimport {ESCAPE, LEFT_ARROW, RIGHT_ARROW} from '@angular/cdk/keycodes';\nimport {startWith} from 'rxjs/operators/startWith';\nimport {switchMap} from 'rxjs/operators/switchMap';\nimport {take} from 'rxjs/operators/take';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  Component,\n  ContentChildren,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  InjectionToken,\n  Input,\n  OnDestroy,\n  Output,\n  QueryList,\n  TemplateRef,\n  ViewChild,\n  ViewEncapsulation,\n  NgZone,\n} from '@angular/core';\nimport {Observable} from 'rxjs/Observable';\nimport {merge} from 'rxjs/observable/merge';\nimport {Subscription} from 'rxjs/Subscription';\nimport {matMenuAnimations} from './menu-animations';\nimport {throwMatMenuInvalidPositionX, throwMatMenuInvalidPositionY} from './menu-errors';\nimport {MatMenuItem} from './menu-item';\nimport {MatMenuPanel} from './menu-panel';\nimport {MenuPositionX, MenuPositionY} from './menu-positions';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {FocusOrigin} from '@angular/cdk/a11y';\n\n\n/** Default `mat-menu` options that can be overridden. */\nexport interface MatMenuDefaultOptions {\n  /** The x-axis position of the menu. */\n  xPosition: MenuPositionX;\n\n  /** The y-axis position of the menu. */\n  yPosition: MenuPositionY;\n\n  /** Whether the menu should overlap the menu trigger. */\n  overlapTrigger: boolean;\n}\n\n/** Injection token to be used to override the default options for `mat-menu`. */\nexport const MAT_MENU_DEFAULT_OPTIONS =\n    new InjectionToken<MatMenuDefaultOptions>('mat-menu-default-options');\n\n/**\n * Start elevation for the menu panel.\n * @docs-private\n */\nconst MAT_MENU_BASE_ELEVATION = 2;\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-menu',\n  templateUrl: 'menu.html',\n  styleUrls: ['menu.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  animations: [\n    matMenuAnimations.transformMenu,\n    matMenuAnimations.fadeInItems\n  ],\n  exportAs: 'matMenu'\n})\nexport class MatMenu implements AfterContentInit, MatMenuPanel, OnDestroy {\n  private _keyManager: FocusKeyManager<MatMenuItem>;\n  private _xPosition: MenuPositionX = this._defaultOptions.xPosition;\n  private _yPosition: MenuPositionY = this._defaultOptions.yPosition;\n  private _previousElevation: string;\n\n  /** Subscription to tab events on the menu panel */\n  private _tabSubscription = Subscription.EMPTY;\n\n  /** Config object to be passed into the menu's ngClass */\n  _classList: {[key: string]: boolean} = {};\n\n  /** Current state of the panel animation. */\n  _panelAnimationState: 'void' | 'enter-start' | 'enter' = 'void';\n\n  /** Parent menu of the current menu panel. */\n  parentMenu: MatMenuPanel | undefined;\n\n  /** Layout direction of the menu. */\n  direction: Direction;\n\n  /** Position of the menu in the X axis. */\n  @Input()\n  get xPosition(): MenuPositionX { return this._xPosition; }\n  set xPosition(value: MenuPositionX) {\n    if (value !== 'before' && value !== 'after') {\n      throwMatMenuInvalidPositionX();\n    }\n    this._xPosition = value;\n    this.setPositionClasses();\n  }\n\n  /** Position of the menu in the Y axis. */\n  @Input()\n  get yPosition(): MenuPositionY { return this._yPosition; }\n  set yPosition(value: MenuPositionY) {\n    if (value !== 'above' && value !== 'below') {\n      throwMatMenuInvalidPositionY();\n    }\n    this._yPosition = value;\n    this.setPositionClasses();\n  }\n\n  /** @docs-private */\n  @ViewChild(TemplateRef) templateRef: TemplateRef<any>;\n\n  /** List of the items inside of a menu. */\n  @ContentChildren(MatMenuItem) items: QueryList<MatMenuItem>;\n\n  /** Whether the menu should overlap its trigger. */\n  @Input()\n  get overlapTrigger(): boolean { return this._overlapTrigger; }\n  set overlapTrigger(value: boolean) {\n    this._overlapTrigger = coerceBooleanProperty(value);\n  }\n  private _overlapTrigger: boolean = this._defaultOptions.overlapTrigger;\n\n  /**\n   * This method takes classes set on the host mat-menu element and applies them on the\n   * menu template that displays in the overlay container.  Otherwise, it's difficult\n   * to style the containing menu from outside the component.\n   * @param classes list of class names\n   */\n  @Input('class')\n  set panelClass(classes: string) {\n    if (classes && classes.length) {\n      this._classList = classes.split(' ').reduce((obj: any, className: string) => {\n        obj[className] = true;\n        return obj;\n      }, {});\n\n      this._elementRef.nativeElement.className = '';\n      this.setPositionClasses();\n    }\n  }\n\n  /**\n   * This method takes classes set on the host mat-menu element and applies them on the\n   * menu template that displays in the overlay container.  Otherwise, it's difficult\n   * to style the containing menu from outside the component.\n   * @deprecated Use `panelClass` instead.\n   */\n  @Input()\n  get classList(): string { return this.panelClass; }\n  set classList(classes: string) { this.panelClass = classes; }\n\n  /** Event emitted when the menu is closed. */\n  @Output() closed: EventEmitter<void | 'click' | 'keydown'>\n      = new EventEmitter<void | 'click' | 'keydown'>();\n\n  /**\n   * Event emitted when the menu is closed.\n   * @deprecated Switch to `closed` instead\n   */\n  @Output() close = this.closed;\n\n  constructor(\n    private _elementRef: ElementRef,\n    private _ngZone: NgZone,\n    @Inject(MAT_MENU_DEFAULT_OPTIONS) private _defaultOptions: MatMenuDefaultOptions) { }\n\n  ngAfterContentInit() {\n    this._keyManager = new FocusKeyManager<MatMenuItem>(this.items).withWrap().withTypeAhead();\n    this._tabSubscription = this._keyManager.tabOut.subscribe(() => this.close.emit('keydown'));\n  }\n\n  ngOnDestroy() {\n    this._tabSubscription.unsubscribe();\n    this.closed.complete();\n  }\n\n  /** Stream that emits whenever the hovered menu item changes. */\n  _hovered(): Observable<MatMenuItem> {\n    if (this.items) {\n      return this.items.changes.pipe(\n        startWith(this.items),\n        switchMap(items => merge(...items.map(item => item._hovered)))\n      );\n    }\n\n    return this._ngZone.onStable\n      .asObservable()\n      .pipe(take(1), switchMap(() => this._hovered()));\n  }\n\n  /** Handle a keyboard event from the menu, delegating to the appropriate action. */\n  _handleKeydown(event: KeyboardEvent) {\n    switch (event.keyCode) {\n      case ESCAPE:\n        this.closed.emit('keydown');\n        event.stopPropagation();\n      break;\n      case LEFT_ARROW:\n        if (this.parentMenu && this.direction === 'ltr') {\n          this.closed.emit('keydown');\n        }\n      break;\n      case RIGHT_ARROW:\n        if (this.parentMenu && this.direction === 'rtl') {\n          this.closed.emit('keydown');\n        }\n      break;\n      default:\n        this._keyManager.onKeydown(event);\n    }\n  }\n\n  /**\n   * Focus the first item in the menu.\n   * @param origin Action from which the focus originated. Used to set the correct styling.\n   */\n  focusFirstItem(origin: FocusOrigin = 'program'): void {\n    // TODO(crisbeto): make the origin required when doing breaking changes.\n    this._keyManager.setFocusOrigin(origin).setFirstItemActive();\n  }\n\n  /**\n   * Resets the active item in the menu. This is used when the menu is opened, allowing\n   * the user to start from the first option when pressing the down arrow.\n   */\n  resetActiveItem() {\n    this._keyManager.setActiveItem(-1);\n  }\n\n  /**\n   * It's necessary to set position-based classes to ensure the menu panel animation\n   * folds out from the correct direction.\n   */\n  setPositionClasses(posX: MenuPositionX = this.xPosition, posY: MenuPositionY = this.yPosition) {\n    this._classList['mat-menu-before'] = posX === 'before';\n    this._classList['mat-menu-after'] = posX === 'after';\n    this._classList['mat-menu-above'] = posY === 'above';\n    this._classList['mat-menu-below'] = posY === 'below';\n  }\n\n  /**\n   * Sets the menu panel elevation.\n   * @param depth Number of parent menus that come before the menu.\n   */\n  setElevation(depth: number): void {\n    // The elevation starts at the base and increases by one for each level.\n    const newElevation = `mat-elevation-z${MAT_MENU_BASE_ELEVATION + depth}`;\n    const customElevation = Object.keys(this._classList).find(c => c.startsWith('mat-elevation-z'));\n\n    if (!customElevation || customElevation === this._previousElevation) {\n      if (this._previousElevation) {\n        this._classList[this._previousElevation] = false;\n      }\n\n      this._classList[newElevation] = true;\n      this._previousElevation = newElevation;\n    }\n  }\n\n  /** Starts the enter animation. */\n  _startAnimation() {\n    this._panelAnimationState = 'enter-start';\n  }\n\n  /** Resets the panel animation to its initial state. */\n  _resetAnimation() {\n    this._panelAnimationState = 'void';\n  }\n\n  /** Callback that is invoked when the panel animation completes. */\n  _onAnimationDone(event: AnimationEvent) {\n    // After the initial expansion is done, trigger the second phase of the enter animation.\n    if (event.toState === 'enter-start') {\n      this._panelAnimationState = 'enter';\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {isFakeMousedownFromScreenReader} from '@angular/cdk/a11y';\nimport {Direction, Directionality} from '@angular/cdk/bidi';\nimport {LEFT_ARROW, RIGHT_ARROW} from '@angular/cdk/keycodes';\nimport {\n  ConnectedPositionStrategy,\n  HorizontalConnectionPos,\n  Overlay,\n  OverlayRef,\n  OverlayConfig,\n  RepositionScrollStrategy,\n  ScrollStrategy,\n  VerticalConnectionPos,\n} from '@angular/cdk/overlay';\nimport {TemplatePortal} from '@angular/cdk/portal';\nimport {filter} from 'rxjs/operators/filter';\nimport {\n  AfterContentInit,\n  Directive,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  InjectionToken,\n  Input,\n  OnDestroy,\n  Optional,\n  Output,\n  Self,\n  ViewContainerRef,\n} from '@angular/core';\nimport {merge} from 'rxjs/observable/merge';\nimport {of as observableOf} from 'rxjs/observable/of';\nimport {Subscription} from 'rxjs/Subscription';\nimport {MatMenu} from './menu-directive';\nimport {throwMatMenuMissingError} from './menu-errors';\nimport {MatMenuItem} from './menu-item';\nimport {MatMenuPanel} from './menu-panel';\nimport {MenuPositionX, MenuPositionY} from './menu-positions';\n\n/** Injection token that determines the scroll handling while the menu is open. */\nexport const MAT_MENU_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mat-menu-scroll-strategy');\n\n/** @docs-private */\nexport function MAT_MENU_SCROLL_STRATEGY_PROVIDER_FACTORY(overlay: Overlay):\n    () => RepositionScrollStrategy {\n  return () => overlay.scrollStrategies.reposition();\n}\n\n/** @docs-private */\nexport const MAT_MENU_SCROLL_STRATEGY_PROVIDER = {\n  provide: MAT_MENU_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_MENU_SCROLL_STRATEGY_PROVIDER_FACTORY,\n};\n\n\n// TODO(andrewseguin): Remove the kebab versions in favor of camelCased attribute selectors\n\n/** Default top padding of the menu panel. */\nexport const MENU_PANEL_TOP_PADDING = 8;\n\n/**\n * This directive is intended to be used in conjunction with an mat-menu tag.  It is\n * responsible for toggling the display of the provided menu instance.\n */\n@Directive({\n  selector: `[mat-menu-trigger-for], [matMenuTriggerFor]`,\n  host: {\n    'aria-haspopup': 'true',\n    '(mousedown)': '_handleMousedown($event)',\n    '(keydown)': '_handleKeydown($event)',\n    '(click)': '_handleClick($event)',\n  },\n  exportAs: 'matMenuTrigger'\n})\nexport class MatMenuTrigger implements AfterContentInit, OnDestroy {\n  private _portal: TemplatePortal<any>;\n  private _overlayRef: OverlayRef | null = null;\n  private _menuOpen: boolean = false;\n  private _closeSubscription = Subscription.EMPTY;\n  private _positionSubscription = Subscription.EMPTY;\n  private _hoverSubscription = Subscription.EMPTY;\n\n  // Tracking input type is necessary so it's possible to only auto-focus\n  // the first item of the list when the menu is opened via the keyboard\n  private _openedByMouse: boolean = false;\n\n  /** @deprecated */\n  @Input('mat-menu-trigger-for')\n  get _deprecatedMatMenuTriggerFor(): MatMenuPanel {\n    return this.menu;\n  }\n\n  set _deprecatedMatMenuTriggerFor(v: MatMenuPanel) {\n    this.menu = v;\n  }\n\n  /** References the menu instance that the trigger is associated with. */\n  @Input('matMenuTriggerFor') menu: MatMenuPanel;\n\n  /** Event emitted when the associated menu is opened. */\n  @Output() menuOpened: EventEmitter<void> = new EventEmitter<void>();\n\n  /**\n   * Event emitted when the associated menu is opened.\n   * @deprecated Switch to `menuOpened` instead\n   */\n  @Output() onMenuOpen: EventEmitter<void> = this.menuOpened;\n\n  /** Event emitted when the associated menu is closed. */\n  @Output() menuClosed: EventEmitter<void> = new EventEmitter<void>();\n\n  /**\n   * Event emitted when the associated menu is closed.\n   * @deprecated Switch to `menuClosed` instead\n   */\n  @Output() onMenuClose: EventEmitter<void> = this.menuClosed;\n\n  constructor(private _overlay: Overlay,\n              private _element: ElementRef,\n              private _viewContainerRef: ViewContainerRef,\n              @Inject(MAT_MENU_SCROLL_STRATEGY) private _scrollStrategy,\n              @Optional() private _parentMenu: MatMenu,\n              @Optional() @Self() private _menuItemInstance: MatMenuItem,\n              @Optional() private _dir: Directionality) {\n\n    if (_menuItemInstance) {\n      _menuItemInstance._triggersSubmenu = this.triggersSubmenu();\n    }\n  }\n\n  ngAfterContentInit() {\n    this._checkMenu();\n\n    this.menu.close.subscribe(reason => {\n      this._destroyMenu();\n\n      // If a click closed the menu, we should close the entire chain of nested menus.\n      if (reason === 'click' && this._parentMenu) {\n        this._parentMenu.closed.emit(reason);\n      }\n    });\n\n    if (this.triggersSubmenu()) {\n      // Subscribe to changes in the hovered item in order to toggle the panel.\n      this._hoverSubscription = this._parentMenu._hovered()\n          .pipe(filter(active => active === this._menuItemInstance))\n          .subscribe(() => {\n            this._openedByMouse = true;\n            this.openMenu();\n          });\n    }\n  }\n\n  ngOnDestroy() {\n    if (this._overlayRef) {\n      this._overlayRef.dispose();\n      this._overlayRef = null;\n    }\n\n    this._cleanUpSubscriptions();\n  }\n\n  /** Whether the menu is open. */\n  get menuOpen(): boolean {\n    return this._menuOpen;\n  }\n\n  /** The text direction of the containing app. */\n  get dir(): Direction {\n    return this._dir && this._dir.value === 'rtl' ? 'rtl' : 'ltr';\n  }\n\n  /** Whether the menu triggers a sub-menu or a top-level one. */\n  triggersSubmenu(): boolean {\n    return !!(this._menuItemInstance && this._parentMenu);\n  }\n\n  /** Toggles the menu between the open and closed states. */\n  toggleMenu(): void {\n    return this._menuOpen ? this.closeMenu() : this.openMenu();\n  }\n\n  /** Opens the menu. */\n  openMenu(): void {\n    if (!this._menuOpen) {\n      this._createOverlay().attach(this._portal);\n      this._closeSubscription = this._menuClosingActions().subscribe(() => this.closeMenu());\n      this._initMenu();\n\n      if (this.menu instanceof MatMenu) {\n        this.menu._startAnimation();\n      }\n    }\n  }\n\n  /** Closes the menu. */\n  closeMenu(): void {\n    this.menu.close.emit();\n  }\n\n  /** Focuses the menu trigger. */\n  focus() {\n    this._element.nativeElement.focus();\n  }\n\n  /** Closes the menu and does the necessary cleanup. */\n  private _destroyMenu() {\n    if (this._overlayRef && this.menuOpen) {\n      this._resetMenu();\n      this._closeSubscription.unsubscribe();\n      this._overlayRef.detach();\n\n      if (this.menu instanceof MatMenu) {\n        this.menu._resetAnimation();\n      }\n    }\n  }\n\n  /**\n   * This method sets the menu state to open and focuses the first item if\n   * the menu was opened via the keyboard.\n   */\n  private _initMenu(): void {\n    this.menu.parentMenu = this.triggersSubmenu() ? this._parentMenu : undefined;\n    this.menu.direction = this.dir;\n    this._setMenuElevation();\n    this._setIsMenuOpen(true);\n    this.menu.focusFirstItem(this._openedByMouse ? 'mouse' : 'program');\n  }\n\n  /** Updates the menu elevation based on the amount of parent menus that it has. */\n  private _setMenuElevation(): void {\n    if (this.menu.setElevation) {\n      let depth = 0;\n      let parentMenu = this.menu.parentMenu;\n\n      while (parentMenu) {\n        depth++;\n        parentMenu = parentMenu.parentMenu;\n      }\n\n      this.menu.setElevation(depth);\n    }\n  }\n\n  /**\n   * This method resets the menu when it's closed, most importantly restoring\n   * focus to the menu trigger if the menu was opened via the keyboard.\n   */\n  private _resetMenu(): void {\n    this._setIsMenuOpen(false);\n\n    // We should reset focus if the user is navigating using a keyboard or\n    // if we have a top-level trigger which might cause focus to be lost\n    // when clicking on the backdrop.\n    if (!this._openedByMouse || !this.triggersSubmenu()) {\n      this.focus();\n    }\n\n    this._openedByMouse = false;\n  }\n\n  // set state rather than toggle to support triggers sharing a menu\n  private _setIsMenuOpen(isOpen: boolean): void {\n    this._menuOpen = isOpen;\n    this._menuOpen ? this.menuOpened.emit() : this.menuClosed.emit();\n\n    if (this.triggersSubmenu()) {\n      this._menuItemInstance._highlighted = isOpen;\n    }\n  }\n\n  /**\n   * This method checks that a valid instance of MatMenu has been passed into\n   * matMenuTriggerFor. If not, an exception is thrown.\n   */\n  private _checkMenu() {\n    if (!this.menu) {\n      throwMatMenuMissingError();\n    }\n  }\n\n  /**\n   * This method creates the overlay from the provided menu's template and saves its\n   * OverlayRef so that it can be attached to the DOM when openMenu is called.\n   */\n  private _createOverlay(): OverlayRef {\n    if (!this._overlayRef) {\n      this._portal = new TemplatePortal(this.menu.templateRef, this._viewContainerRef);\n      const config = this._getOverlayConfig();\n      this._subscribeToPositions(config.positionStrategy as ConnectedPositionStrategy);\n      this._overlayRef = this._overlay.create(config);\n    }\n\n    return this._overlayRef;\n  }\n\n  /**\n   * This method builds the configuration object needed to create the overlay, the OverlayState.\n   * @returns OverlayConfig\n   */\n  private _getOverlayConfig(): OverlayConfig {\n    return new OverlayConfig({\n      positionStrategy: this._getPosition(),\n      hasBackdrop: !this.triggersSubmenu(),\n      backdropClass: 'cdk-overlay-transparent-backdrop',\n      direction: this.dir,\n      scrollStrategy: this._scrollStrategy()\n    });\n  }\n\n  /**\n   * Listens to changes in the position of the overlay and sets the correct classes\n   * on the menu based on the new position. This ensures the animation origin is always\n   * correct, even if a fallback position is used for the overlay.\n   */\n  private _subscribeToPositions(position: ConnectedPositionStrategy): void {\n    this._positionSubscription = position.onPositionChange.subscribe(change => {\n      const posX: MenuPositionX = change.connectionPair.overlayX === 'start' ? 'after' : 'before';\n      const posY: MenuPositionY = change.connectionPair.overlayY === 'top' ? 'below' : 'above';\n\n      this.menu.setPositionClasses(posX, posY);\n    });\n  }\n\n  /**\n   * This method builds the position strategy for the overlay, so the menu is properly connected\n   * to the trigger.\n   * @returns ConnectedPositionStrategy\n   */\n  private _getPosition(): ConnectedPositionStrategy {\n    let [originX, originFallbackX]: HorizontalConnectionPos[] =\n        this.menu.xPosition === 'before' ? ['end', 'start'] : ['start', 'end'];\n\n    let [overlayY, overlayFallbackY]: VerticalConnectionPos[] =\n        this.menu.yPosition === 'above' ? ['bottom', 'top'] : ['top', 'bottom'];\n\n    let [originY, originFallbackY] = [overlayY, overlayFallbackY];\n    let [overlayX, overlayFallbackX] = [originX, originFallbackX];\n    let offsetY = 0;\n\n    if (this.triggersSubmenu()) {\n      // When the menu is a sub-menu, it should always align itself\n      // to the edges of the trigger, instead of overlapping it.\n      overlayFallbackX = originX = this.menu.xPosition === 'before' ? 'start' : 'end';\n      originFallbackX = overlayX = originX === 'end' ? 'start' : 'end';\n      offsetY = overlayY === 'bottom' ? MENU_PANEL_TOP_PADDING : -MENU_PANEL_TOP_PADDING;\n    } else if (!this.menu.overlapTrigger) {\n      originY = overlayY === 'top' ? 'bottom' : 'top';\n      originFallbackY = overlayFallbackY === 'top' ? 'bottom' : 'top';\n    }\n\n    return this._overlay.position()\n        .connectedTo(this._element, {originX, originY}, {overlayX, overlayY})\n        .withDirection(this.dir)\n        .withOffsetY(offsetY)\n        .withFallbackPosition(\n            {originX: originFallbackX, originY},\n            {overlayX: overlayFallbackX, overlayY})\n        .withFallbackPosition(\n            {originX, originY: originFallbackY},\n            {overlayX, overlayY: overlayFallbackY},\n            undefined, -offsetY)\n        .withFallbackPosition(\n            {originX: originFallbackX, originY: originFallbackY},\n            {overlayX: overlayFallbackX, overlayY: overlayFallbackY},\n            undefined, -offsetY);\n  }\n\n  /** Cleans up the active subscriptions. */\n  private _cleanUpSubscriptions(): void {\n    this._closeSubscription.unsubscribe();\n    this._positionSubscription.unsubscribe();\n    this._hoverSubscription.unsubscribe();\n  }\n\n  /** Returns a stream that emits whenever an action that should close the menu occurs. */\n  private _menuClosingActions() {\n    const backdrop = this._overlayRef!.backdropClick();\n    const detachments = this._overlayRef!.detachments();\n    const parentClose = this._parentMenu ? this._parentMenu.close : observableOf();\n    const hover = this._parentMenu ? this._parentMenu._hovered().pipe(\n      filter(active => active !== this._menuItemInstance),\n      filter(() => this._menuOpen)\n    ) : observableOf();\n\n    return merge(backdrop, parentClose, hover, detachments);\n  }\n\n  /** Handles mouse presses on the trigger. */\n  _handleMousedown(event: MouseEvent): void {\n    if (!isFakeMousedownFromScreenReader(event)) {\n      this._openedByMouse = true;\n\n      // Since clicking on the trigger won't close the menu if it opens a sub-menu,\n      // we should prevent focus from moving onto it via click to avoid the\n      // highlight from lingering on the menu item.\n      if (this.triggersSubmenu()) {\n        event.preventDefault();\n      }\n    }\n  }\n\n  /** Handles key presses on the trigger. */\n  _handleKeydown(event: KeyboardEvent): void {\n    const keyCode = event.keyCode;\n\n    if (this.triggersSubmenu() && (\n            (keyCode === RIGHT_ARROW && this.dir === 'ltr') ||\n            (keyCode === LEFT_ARROW && this.dir === 'rtl'))) {\n      this.openMenu();\n    }\n  }\n\n  /** Handles click events on the trigger. */\n  _handleClick(event: MouseEvent): void {\n    if (this.triggersSubmenu()) {\n      // Stop event propagation to avoid closing the parent menu.\n      event.stopPropagation();\n      this.openMenu();\n    } else {\n      this.toggleMenu();\n    }\n  }\n\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {MatCommonModule} from '@angular/material/core';\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {MatMenu, MAT_MENU_DEFAULT_OPTIONS} from './menu-directive';\nimport {MatMenuItem} from './menu-item';\nimport {MatMenuTrigger, MAT_MENU_SCROLL_STRATEGY_PROVIDER} from './menu-trigger';\nimport {MatRippleModule} from '@angular/material/core';\nimport {A11yModule} from '@angular/cdk/a11y';\n\n\n@NgModule({\n  imports: [\n    OverlayModule,\n    CommonModule,\n    MatRippleModule,\n    MatCommonModule,\n    A11yModule,\n  ],\n  exports: [MatMenu, MatMenuItem, MatMenuTrigger, MatCommonModule],\n  declarations: [MatMenu, MatMenuItem, MatMenuTrigger],\n  providers: [\n    MAT_MENU_SCROLL_STRATEGY_PROVIDER,\n    {\n      provide: MAT_MENU_DEFAULT_OPTIONS,\n      useValue: {\n        overlapTrigger: true,\n        xPosition: 'after',\n        yPosition: 'below',\n      },\n    }\n  ],\n})\nexport class MatMenuModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  animate,\n  AnimationTriggerMetadata,\n  state,\n  style,\n  transition,\n  trigger,\n} from '@angular/animations';\n\n/**\n * The following are all the animations for the mat-select component, with each\n * const containing the metadata for one animation.\n *\n * The values below match the implementation of the AngularJS Material mat-select animation.\n */\nexport const matSelectAnimations: {\n  readonly transformPanel: AnimationTriggerMetadata;\n  readonly fadeInContent: AnimationTriggerMetadata;\n} = {\n  /**\n   * This animation transforms the select's overlay panel on and off the page.\n   *\n   * When the panel is attached to the DOM, it expands its width by the amount of padding, scales it\n   * up to 100% on the Y axis, fades in its border, and translates slightly up and to the\n   * side to ensure the option text correctly overlaps the trigger text.\n   *\n   * When the panel is removed from the DOM, it simply fades out linearly.\n   */\n  transformPanel: trigger('transformPanel', [\n    state('showing', style({\n      opacity: 1,\n      minWidth: 'calc(100% + 32px)', // 32px = 2 * 16px padding\n      transform: 'scaleY(1)'\n    })),\n    state('showing-multiple', style({\n      opacity: 1,\n      minWidth: 'calc(100% + 64px)', // 64px = 48px padding on the left + 16px padding on the right\n      transform: 'scaleY(1)'\n    })),\n    transition('void => *', [\n      style({\n        opacity: 0,\n        minWidth: '100%',\n        transform: 'scaleY(0)'\n      }),\n      animate('150ms cubic-bezier(0.25, 0.8, 0.25, 1)')\n    ]),\n    transition('* => void', [\n      animate('250ms 100ms linear', style({opacity: 0}))\n    ])\n  ]),\n\n  /**\n   * This animation fades in the background color and text content of the\n   * select's options. It is time delayed to occur 100ms after the overlay\n   * panel has transformed in.\n   */\n  fadeInContent: trigger('fadeInContent', [\n    state('showing', style({opacity: 1})),\n    transition('void => showing', [\n      style({opacity: 0}),\n      animate('150ms 100ms cubic-bezier(0.55, 0, 0.55, 0.2)')\n    ])\n  ])\n};\n\n\n/** @deprecated */\nexport const transformPanel = matSelectAnimations.transformPanel;\n\n/** @deprecated */\nexport const fadeInContent = matSelectAnimations.fadeInContent;\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {MatSelect, MatSelectTrigger, MAT_SELECT_SCROLL_STRATEGY_PROVIDER} from './select';\nimport {MatCommonModule, MatOptionModule} from '@angular/material/core';\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {MatFormFieldModule} from '@angular/material/form-field';\nimport {ErrorStateMatcher} from '@angular/material/core';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    OverlayModule,\n    MatOptionModule,\n    MatCommonModule,\n  ],\n  exports: [MatFormFieldModule, MatSelect, MatSelectTrigger, MatOptionModule, MatCommonModule],\n  declarations: [MatSelect, MatSelectTrigger],\n  providers: [MAT_SELECT_SCROLL_STRATEGY_PROVIDER, ErrorStateMatcher]\n})\nexport class MatSelectModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/** Animations used by MatTooltip. */\nexport const matTooltipAnimations: {\n  readonly tooltipState: AnimationTriggerMetadata;\n} = {\n  /** Animation that transitions a tooltip in and out. */\n  tooltipState: trigger('state', [\n    state('initial, void, hidden', style({transform: 'scale(0)'})),\n    state('visible', style({transform: 'scale(1)'})),\n    transition('* => visible', animate('150ms cubic-bezier(0.0, 0.0, 0.2, 1)')),\n    transition('* => hidden', animate('150ms cubic-bezier(0.4, 0.0, 1, 1)')),\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  Component,\n  ContentChild,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  Optional,\n  QueryList,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {CanDisableRipple, MatLine, MatLineSetter, mixinDisableRipple} from '@angular/material/core';\n\n// Boilerplate for applying mixins to MatList.\n/** @docs-private */\nexport class MatListBase {}\nexport const _MatListMixinBase = mixinDisableRipple(MatListBase);\n\n// Boilerplate for applying mixins to MatListItem.\n/** @docs-private */\nexport class MatListItemBase {}\nexport const _MatListItemMixinBase = mixinDisableRipple(MatListItemBase);\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-nav-list',\n  exportAs: 'matNavList',\n  host: {\n    'role': 'navigation',\n    'class': 'mat-nav-list'\n  },\n  templateUrl: 'list.html',\n  styleUrls: ['list.css'],\n  inputs: ['disableRipple'],\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatNavList extends _MatListMixinBase implements CanDisableRipple {}\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-list',\n  exportAs: 'matList',\n  templateUrl: 'list.html',\n  host: {'class': 'mat-list'},\n  styleUrls: ['list.css'],\n  inputs: ['disableRipple'],\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatList extends _MatListMixinBase implements CanDisableRipple {}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-list-avatar], [matListAvatar]',\n  host: {'class': 'mat-list-avatar'}\n})\nexport class MatListAvatarCssMatStyler {}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-list-icon], [matListIcon]',\n  host: {'class': 'mat-list-icon'}\n})\nexport class MatListIconCssMatStyler {}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-subheader], [matSubheader]',\n  host: {'class': 'mat-subheader'}\n})\nexport class MatListSubheaderCssMatStyler {}\n\n/** An item within a Material Design list. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-list-item, a[mat-list-item]',\n  exportAs: 'matListItem',\n  host: {\n    'class': 'mat-list-item',\n    '(focus)': '_handleFocus()',\n    '(blur)': '_handleBlur()',\n  },\n  inputs: ['disableRipple'],\n  templateUrl: 'list-item.html',\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatListItem extends _MatListItemMixinBase implements AfterContentInit,\n    CanDisableRipple {\n  private _lineSetter: MatLineSetter;\n  private _isNavList: boolean = false;\n\n  @ContentChildren(MatLine) _lines: QueryList<MatLine>;\n\n  @ContentChild(MatListAvatarCssMatStyler)\n  set _hasAvatar(avatar: MatListAvatarCssMatStyler) {\n    if (avatar != null) {\n      this._element.nativeElement.classList.add('mat-list-item-avatar');\n    } else {\n      this._element.nativeElement.classList.remove('mat-list-item-avatar');\n    }\n  }\n\n  constructor(private _element: ElementRef,\n              @Optional() private _navList: MatNavList) {\n    super();\n    this._isNavList = !!_navList;\n  }\n\n  ngAfterContentInit() {\n    this._lineSetter = new MatLineSetter(this._lines, this._element);\n  }\n\n  /** Whether this list item should show a ripple effect when clicked. */\n  _isRippleDisabled() {\n    return !this._isNavList || this.disableRipple || this._navList.disableRipple;\n  }\n\n  _handleFocus() {\n    this._element.nativeElement.classList.add('mat-list-item-focus');\n  }\n\n  _handleBlur() {\n    this._element.nativeElement.classList.remove('mat-list-item-focus');\n  }\n\n  /** Retrieves the DOM element of the component host. */\n  _getHostElement(): HTMLElement {\n    return this._element.nativeElement;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusableOption, FocusKeyManager} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {SelectionModel} from '@angular/cdk/collections';\nimport {SPACE, ENTER, HOME, END} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Output,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {\n  CanDisable,\n  CanDisableRipple,\n  HasTabIndex,\n  MatLine,\n  MatLineSetter,\n  mixinDisabled,\n  mixinDisableRipple,\n  mixinTabIndex,\n} from '@angular/material/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\n\n\n/** @docs-private */\nexport class MatSelectionListBase {}\nexport const _MatSelectionListMixinBase =\n  mixinTabIndex(mixinDisableRipple(mixinDisabled(MatSelectionListBase)));\n\n/** @docs-private */\nexport class MatListOptionBase {}\nexport const _MatListOptionMixinBase = mixinDisableRipple(MatListOptionBase);\n\n/** @docs-private */\nexport const MAT_SELECTION_LIST_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatSelectionList),\n  multi: true\n};\n\n/**\n * Change event object emitted by MatListOption whenever the selected state changes.\n * @deprecated Use the `MatSelectionListChange` event on the selection list instead.\n */\nexport class MatListOptionChange {\n  constructor(\n    /** Reference to the list option that changed. */\n    public source: MatListOption,\n    /** The new selected state of the option. */\n    public selected: boolean) {}\n}\n\n/** Change event that is being fired whenever the selected state of an option changes. */\nexport class MatSelectionListChange {\n  constructor(\n    /** Reference to the selection list that emitted the event. */\n    public source: MatSelectionList,\n    /** Reference to the option that has been changed. */\n    public option: MatListOption) {}\n}\n\n/**\n * Component for list-options of selection-list. Each list-option can automatically\n * generate a checkbox and can put current item into the selectionModel of selection-list\n * if the current item is selected.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-list-option',\n  exportAs: 'matListOption',\n  inputs: ['disableRipple'],\n  host: {\n    'role': 'option',\n    'class': 'mat-list-item mat-list-option',\n    '(focus)': '_handleFocus()',\n    '(blur)': '_handleBlur()',\n    '(click)': '_handleClick()',\n    'tabindex': '-1',\n    '[class.mat-list-item-disabled]': 'disabled',\n    '[class.mat-list-item-focus]': '_hasFocus',\n    '[attr.aria-selected]': 'selected.toString()',\n    '[attr.aria-disabled]': 'disabled.toString()',\n  },\n  templateUrl: 'list-option.html',\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatListOption extends _MatListOptionMixinBase\n    implements AfterContentInit, OnDestroy, OnInit, FocusableOption, CanDisableRipple {\n\n  private _lineSetter: MatLineSetter;\n  private _selected: boolean = false;\n  private _disabled: boolean = false;\n\n  /** Whether the option has focus. */\n  _hasFocus: boolean = false;\n\n  @ContentChildren(MatLine) _lines: QueryList<MatLine>;\n\n  /** DOM element containing the item's text. */\n  @ViewChild('text') _text: ElementRef;\n\n  /** Whether the label should appear before or after the checkbox. Defaults to 'after' */\n  @Input() checkboxPosition: 'before' | 'after' = 'after';\n\n  /** Value of the option */\n  @Input() value: any;\n\n  /** Whether the option is disabled. */\n  @Input()\n  get disabled() { return (this.selectionList && this.selectionList.disabled) || this._disabled; }\n  set disabled(value: any) {\n    const newValue = coerceBooleanProperty(value);\n\n    if (newValue !== this._disabled) {\n      this._disabled = newValue;\n      this._changeDetector.markForCheck();\n    }\n  }\n\n  /** Whether the option is selected. */\n  @Input()\n  get selected(): boolean { return this.selectionList.selectedOptions.isSelected(this); }\n  set selected(value: boolean) {\n    const isSelected = coerceBooleanProperty(value);\n\n    if (isSelected !== this._selected) {\n      this._setSelected(isSelected);\n      this.selectionList._reportValueChange();\n    }\n  }\n\n  /**\n   * Emits a change event whenever the selected state of an option changes.\n   * @deprecated Use the `selectionChange` event on the `<mat-selection-list>` instead.\n   */\n  @Output() selectionChange: EventEmitter<MatListOptionChange> =\n    new EventEmitter<MatListOptionChange>();\n\n  constructor(private _element: ElementRef,\n              private _changeDetector: ChangeDetectorRef,\n              @Optional() @Inject(forwardRef(() => MatSelectionList))\n              public selectionList: MatSelectionList) {\n    super();\n  }\n\n  ngOnInit() {\n    if (this._selected) {\n      // List options that are selected at initialization can't be reported properly to the form\n      // control. This is because it takes some time until the selection-list knows about all\n      // available options. Also it can happen that the ControlValueAccessor has an initial value\n      // that should be used instead. Deferring the value change report to the next tick ensures\n      // that the form control value is not being overwritten.\n      Promise.resolve().then(() => this.selected = true);\n    }\n  }\n\n  ngAfterContentInit() {\n    this._lineSetter = new MatLineSetter(this._lines, this._element);\n  }\n\n  ngOnDestroy(): void {\n    if (this.selected) {\n      // We have to delay this until the next tick in order\n      // to avoid changed after checked errors.\n      Promise.resolve().then(() => this.selected = false);\n    }\n\n    this.selectionList._removeOptionFromList(this);\n  }\n\n  /** Toggles the selection state of the option. */\n  toggle(): void {\n    this.selected = !this.selected;\n  }\n\n  /** Allows for programmatic focusing of the option. */\n  focus(): void {\n    this._element.nativeElement.focus();\n  }\n\n  /**\n   * Returns the list item's text label. Implemented as a part of the FocusKeyManager.\n   * @docs-private\n   */\n  getLabel() {\n    return this._text ? this._text.nativeElement.textContent : '';\n  }\n\n  /** Whether this list item should show a ripple effect when clicked. */\n  _isRippleDisabled() {\n    return this.disabled || this.disableRipple || this.selectionList.disableRipple;\n  }\n\n  _handleClick() {\n    if (!this.disabled) {\n      this.toggle();\n\n      // Emit a change event if the selected state of the option changed through user interaction.\n      this.selectionList._emitChangeEvent(this);\n\n      // TODO: the `selectionChange` event on the option is deprecated. Remove that in the future.\n      this._emitDeprecatedChangeEvent();\n    }\n  }\n\n  _handleFocus() {\n    this._hasFocus = true;\n    this.selectionList._setFocusedOption(this);\n  }\n\n  _handleBlur() {\n    this._hasFocus = false;\n    this.selectionList.onTouched();\n  }\n\n  /** Retrieves the DOM element of the component host. */\n  _getHostElement(): HTMLElement {\n    return this._element.nativeElement;\n  }\n\n  /** Sets the selected state of the option. */\n  _setSelected(selected: boolean) {\n    if (selected === this._selected) {\n      return;\n    }\n\n    this._selected = selected;\n\n    if (selected) {\n      this.selectionList.selectedOptions.select(this);\n    } else {\n      this.selectionList.selectedOptions.deselect(this);\n    }\n\n    this._changeDetector.markForCheck();\n  }\n\n  /** Emits a selectionChange event for this option. */\n  _emitDeprecatedChangeEvent() {\n    // TODO: the `selectionChange` event on the option is deprecated. Remove that in the future.\n    this.selectionChange.emit(new MatListOptionChange(this, this.selected));\n  }\n}\n\n\n/**\n * Material Design list component where each item is a selectable option. Behaves as a listbox.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-selection-list',\n  exportAs: 'matSelectionList',\n  inputs: ['disabled', 'disableRipple', 'tabIndex'],\n  host: {\n    'role': 'listbox',\n    '[tabIndex]': 'tabIndex',\n    'class': 'mat-selection-list',\n    '(focus)': 'focus()',\n    '(blur)': 'onTouched()',\n    '(keydown)': '_keydown($event)',\n    '[attr.aria-disabled]': 'disabled.toString()'},\n  template: '<ng-content></ng-content>',\n  styleUrls: ['list.css'],\n  encapsulation: ViewEncapsulation.None,\n  providers: [MAT_SELECTION_LIST_VALUE_ACCESSOR],\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class MatSelectionList extends _MatSelectionListMixinBase implements FocusableOption,\n    CanDisable, CanDisableRipple, HasTabIndex, AfterContentInit, ControlValueAccessor {\n\n  /** The FocusKeyManager which handles focus. */\n  _keyManager: FocusKeyManager<MatListOption>;\n\n  /** The option components contained within this selection-list. */\n  @ContentChildren(MatListOption) options: QueryList<MatListOption>;\n\n  /** Emits a change event whenever the selected state of an option changes. */\n  @Output() selectionChange: EventEmitter<MatSelectionListChange> =\n      new EventEmitter<MatSelectionListChange>();\n\n  /** The currently selected options. */\n  selectedOptions: SelectionModel<MatListOption> = new SelectionModel<MatListOption>(true);\n\n  /** View to model callback that should be called whenever the selected options change. */\n  private _onChange: (value: any) => void = (_: any) => {};\n\n  /** Used for storing the values that were assigned before the options were initialized. */\n  private _tempValues: string[]|null;\n\n  /** View to model callback that should be called if the list or its options lost focus. */\n  onTouched: () => void = () => {};\n\n  constructor(private _element: ElementRef, @Attribute('tabindex') tabIndex: string) {\n    super();\n\n    this.tabIndex = parseInt(tabIndex) || 0;\n  }\n\n  ngAfterContentInit(): void {\n    this._keyManager = new FocusKeyManager<MatListOption>(this.options).withWrap().withTypeAhead();\n\n    if (this._tempValues) {\n      this._setOptionsFromValues(this._tempValues);\n      this._tempValues = null;\n    }\n  }\n\n  /** Focus the selection-list. */\n  focus() {\n    this._element.nativeElement.focus();\n  }\n\n  /** Selects all of the options. */\n  selectAll() {\n    this.options.forEach(option => option._setSelected(true));\n    this._reportValueChange();\n  }\n\n  /** Deselects all of the options. */\n  deselectAll() {\n    this.options.forEach(option => option._setSelected(false));\n    this._reportValueChange();\n  }\n\n  /** Sets the focused option of the selection-list. */\n  _setFocusedOption(option: MatListOption) {\n    this._keyManager.updateActiveItemIndex(this._getOptionIndex(option));\n  }\n\n  /** Removes an option from the selection list and updates the active item. */\n  _removeOptionFromList(option: MatListOption) {\n    if (option._hasFocus) {\n      const optionIndex = this._getOptionIndex(option);\n\n      // Check whether the option is the last item\n      if (optionIndex > 0) {\n        this._keyManager.setPreviousItemActive();\n      } else if (optionIndex === 0 && this.options.length > 1) {\n        this._keyManager.setNextItemActive();\n      }\n    }\n  }\n\n  /** Passes relevant key presses to our key manager. */\n  _keydown(event: KeyboardEvent) {\n    switch (event.keyCode) {\n      case SPACE:\n      case ENTER:\n        this._toggleSelectOnFocusedOption();\n        // Always prevent space from scrolling the page since the list has focus\n        event.preventDefault();\n        break;\n      case HOME:\n      case END:\n        event.keyCode === HOME ? this._keyManager.setFirstItemActive() :\n                                 this._keyManager.setLastItemActive();\n        event.preventDefault();\n        break;\n      default:\n        this._keyManager.onKeydown(event);\n    }\n  }\n\n  /** Reports a value change to the ControlValueAccessor */\n  _reportValueChange() {\n    if (this.options) {\n      this._onChange(this._getSelectedOptionValues());\n    }\n  }\n\n  /** Emits a change event if the selected state of an option changed. */\n  _emitChangeEvent(option: MatListOption) {\n    this.selectionChange.emit(new MatSelectionListChange(this, option));\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  writeValue(values: string[]): void {\n    if (this.options) {\n      this._setOptionsFromValues(values || []);\n    } else {\n      this._tempValues = values;\n    }\n  }\n\n  /** Implemented as a part of ControlValueAccessor. */\n  setDisabledState(isDisabled: boolean): void {\n    if (this.options) {\n      this.options.forEach(option => option.disabled = isDisabled);\n    }\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  registerOnChange(fn: (value: any) => void): void {\n    this._onChange = fn;\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  registerOnTouched(fn: () => void): void {\n    this.onTouched = fn;\n  }\n\n  /** Returns the option with the specified value. */\n  private _getOptionByValue(value: string): MatListOption | undefined {\n    return this.options.find(option => option.value === value);\n  }\n\n  /** Sets the selected options based on the specified values. */\n  private _setOptionsFromValues(values: string[]) {\n    this.options.forEach(option => option._setSelected(false));\n\n    values\n      .map(value => this._getOptionByValue(value))\n      .filter(Boolean)\n      .forEach(option => option!._setSelected(true));\n  }\n\n  /** Returns the values of the selected options. */\n  private _getSelectedOptionValues(): string[] {\n    return this.options.filter(option => option.selected).map(option => option.value);\n  }\n\n  /** Toggles the selected state of the currently focused option. */\n  private _toggleSelectOnFocusedOption(): void {\n    let focusedIndex = this._keyManager.activeItemIndex;\n\n    if (focusedIndex != null && this._isValidIndex(focusedIndex)) {\n      let focusedOption: MatListOption = this.options.toArray()[focusedIndex];\n\n      if (focusedOption) {\n        focusedOption.toggle();\n\n        // Emit a change event because the focused option changed its state through user\n        // interaction.\n        this._emitChangeEvent(focusedOption);\n\n        // TODO: the `selectionChange` event on the option is deprecated. Remove that in the future.\n        focusedOption._emitDeprecatedChangeEvent();\n      }\n    }\n  }\n\n  /**\n   * Utility to ensure all indexes are valid.\n   * @param index The index to be checked.\n   * @returns True if the index is valid for our list of options.\n   */\n  private _isValidIndex(index: number): boolean {\n    return index >= 0 && index < this.options.length;\n  }\n\n  /** Returns the index of the specified list option. */\n  private _getOptionIndex(option: MatListOption): number {\n    return this.options.toArray().indexOf(option);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {\n  MatCommonModule,\n  MatLineModule,\n  MatPseudoCheckboxModule,\n  MatRippleModule,\n} from '@angular/material/core';\nimport {\n  MatList,\n  MatNavList,\n  MatListAvatarCssMatStyler,\n  MatListIconCssMatStyler,\n  MatListItem,\n  MatListSubheaderCssMatStyler,\n} from './list';\nimport {MatListOption, MatSelectionList} from './selection-list';\nimport {MatDividerModule} from '@angular/material/divider';\n\n\n@NgModule({\n  imports: [MatLineModule, MatRippleModule, MatCommonModule, MatPseudoCheckboxModule, CommonModule],\n  exports: [\n    MatList,\n    MatNavList,\n    MatListItem,\n    MatListAvatarCssMatStyler,\n    MatLineModule,\n    MatCommonModule,\n    MatListIconCssMatStyler,\n    MatListSubheaderCssMatStyler,\n    MatPseudoCheckboxModule,\n    MatSelectionList,\n    MatListOption,\n    MatDividerModule\n  ],\n  declarations: [\n    MatList,\n    MatNavList,\n    MatListItem,\n    MatListAvatarCssMatStyler,\n    MatListIconCssMatStyler,\n    MatListSubheaderCssMatStyler,\n    MatSelectionList,\n    MatListOption\n  ],\n})\nexport class MatListModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport{\n  trigger,\n  state,\n  style,\n  animate,\n  transition,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/**\n * Animations used by the mat-menu component.\n * Animation duration and timing values are based on:\n * https://material.io/guidelines/components/menus.html#menus-usage\n */\nexport const matMenuAnimations: {\n  readonly transformMenu: AnimationTriggerMetadata;\n  readonly fadeInItems: AnimationTriggerMetadata;\n} = {\n  /**\n   * This animation controls the menu panel's entry and exit from the page.\n   *\n   * When the menu panel is added to the DOM, it scales in and fades in its border.\n   *\n   * When the menu panel is removed from the DOM, it simply fades out after a brief\n   * delay to display the ripple.\n   */\n  transformMenu: trigger('transformMenu', [\n    // TODO(kara): switch to :enter and :leave once Mobile Safari is sorted out.\n    state('void', style({\n      opacity: 0,\n      // This starts off from 0.01, instead of 0, because there's an issue in the Angular animations\n      // as of 4.2, which causes the animation to be skipped if it starts from 0.\n      transform: 'scale(0.01, 0.01)'\n    })),\n    state('enter-start', style({\n      opacity: 1,\n      transform: 'scale(1, 0.5)'\n    })),\n    state('enter', style({\n      transform: 'scale(1, 1)'\n    })),\n    transition('void => enter-start', animate('100ms linear')),\n    transition('enter-start => enter', animate('300ms cubic-bezier(0.25, 0.8, 0.25, 1)')),\n    transition('* => void', animate('150ms 50ms linear', style({opacity: 0})))\n  ]),\n\n\n  /**\n   * This animation fades in the background color and content of the menu panel\n   * after its containing element is scaled in.\n   */\n  fadeInItems: trigger('fadeInItems', [\n    state('showing', style({opacity: 1})),\n    transition('void => *', [\n      style({opacity: 0}),\n      animate('400ms 100ms cubic-bezier(0.55, 0, 0.55, 0.2)')\n    ])\n  ])\n};\n\n/** @deprecated */\nexport const fadeInItems = matMenuAnimations.fadeInItems;\n\n/** @deprecated */\nexport const transformMenu = matMenuAnimations.transformMenu;\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusableOption, FocusMonitor, FocusOrigin} from '@angular/cdk/a11y';\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  OnDestroy,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {\n  CanDisable,\n  CanDisableRipple,\n  mixinDisabled,\n  mixinDisableRipple\n} from '@angular/material/core';\nimport {Subject} from 'rxjs/Subject';\n\n// Boilerplate for applying mixins to MatMenuItem.\n/** @docs-private */\nexport class MatMenuItemBase {}\nexport const _MatMenuItemMixinBase = mixinDisableRipple(mixinDisabled(MatMenuItemBase));\n\n/**\n * This directive is intended to be used inside an mat-menu tag.\n * It exists mostly to set the role attribute.\n */\n@Component({\n  moduleId: module.id,\n  selector: '[mat-menu-item]',\n  exportAs: 'matMenuItem',\n  inputs: ['disabled', 'disableRipple'],\n  host: {\n    'role': 'menuitem',\n    'class': 'mat-menu-item',\n    '[class.mat-menu-item-highlighted]': '_highlighted',\n    '[class.mat-menu-item-submenu-trigger]': '_triggersSubmenu',\n    '[attr.tabindex]': '_getTabIndex()',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.disabled]': 'disabled || null',\n    '(click)': '_checkDisabled($event)',\n    '(mouseenter)': '_emitHoverEvent()',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  templateUrl: 'menu-item.html',\n})\nexport class MatMenuItem extends _MatMenuItemMixinBase\n    implements FocusableOption, CanDisable, CanDisableRipple, OnDestroy {\n\n  /** Stream that emits when the menu item is hovered. */\n  _hovered: Subject<MatMenuItem> = new Subject<MatMenuItem>();\n\n  /** Whether the menu item is highlighted. */\n  _highlighted: boolean = false;\n\n  /** Whether the menu item acts as a trigger for a sub-menu. */\n  _triggersSubmenu: boolean = false;\n\n  constructor(\n    private _elementRef: ElementRef,\n    // TODO(crisbeto): switch to a required param when doing breaking changes.\n    private _focusMonitor?: FocusMonitor) {\n    super();\n\n    if (_focusMonitor) {\n      // Start monitoring the element so it gets the appropriate focused classes. We want\n      // to show the focus style for menu items only when the focus was not caused by a\n      // mouse or touch interaction.\n      _focusMonitor.monitor(this._getHostElement(), false);\n    }\n  }\n\n  /** Focuses the menu item. */\n  focus(origin: FocusOrigin = 'program'): void {\n    if (this._focusMonitor) {\n      this._focusMonitor.focusVia(this._getHostElement(), origin);\n    } else {\n      this._getHostElement().focus();\n    }\n  }\n\n  ngOnDestroy() {\n    if (this._focusMonitor) {\n      this._focusMonitor.stopMonitoring(this._getHostElement());\n    }\n\n    this._hovered.complete();\n  }\n\n  /** Used to set the `tabindex`. */\n  _getTabIndex(): string {\n    return this.disabled ? '-1' : '0';\n  }\n\n  /** Returns the host DOM element. */\n  _getHostElement(): HTMLElement {\n    return this._elementRef.nativeElement;\n  }\n\n  /** Prevents the default element actions if it is disabled. */\n  _checkDisabled(event: Event): void {\n    if (this.disabled) {\n      event.preventDefault();\n      event.stopPropagation();\n    }\n  }\n\n  /** Emits to the hover stream. */\n  _emitHoverEvent() {\n    if (!this.disabled) {\n      this._hovered.next(this);\n    }\n  }\n\n  /** Gets the label to be used when determining whether the option should be focused. */\n  getLabel(): string {\n    const element: HTMLElement = this._elementRef.nativeElement;\n    let output = '';\n\n    if (element.childNodes) {\n      const length = element.childNodes.length;\n\n      // Go through all the top-level text nodes and extract their text.\n      // We skip anything that's not a text node to prevent the text from\n      // being thrown off by something like an icon.\n      for (let i = 0; i < length; i++) {\n        if (element.childNodes[i].nodeType === Node.TEXT_NODE) {\n          output += element.childNodes[i].textContent;\n        }\n      }\n    }\n\n    return output.trim();\n  }\n\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {DOWN_ARROW} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  Directive,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  OnDestroy,\n  Optional,\n  Output,\n} from '@angular/core';\nimport {\n  AbstractControl,\n  ControlValueAccessor,\n  NG_VALIDATORS,\n  NG_VALUE_ACCESSOR,\n  ValidationErrors,\n  Validator,\n  ValidatorFn,\n  Validators\n} from '@angular/forms';\nimport {DateAdapter, MAT_DATE_FORMATS, MatDateFormats} from '@angular/material/core';\nimport {MatFormField} from '@angular/material/form-field';\nimport {MAT_INPUT_VALUE_ACCESSOR} from '@angular/material/input';\nimport {Subscription} from 'rxjs/Subscription';\nimport {MatDatepicker} from './datepicker';\nimport {createMissingDateImplError} from './datepicker-errors';\n\n\nexport const MAT_DATEPICKER_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatDatepickerInput),\n  multi: true\n};\n\n\nexport const MAT_DATEPICKER_VALIDATORS: any = {\n  provide: NG_VALIDATORS,\n  useExisting: forwardRef(() => MatDatepickerInput),\n  multi: true\n};\n\n\n/**\n * An event used for datepicker input and change events. We don't always have access to a native\n * input or change event because the event may have been triggered by the user clicking on the\n * calendar popup. For consistency, we always use MatDatepickerInputEvent instead.\n */\nexport class MatDatepickerInputEvent<D> {\n  /** The new value for the target datepicker input. */\n  value: D | null;\n\n  constructor(\n    /** Reference to the datepicker input component that emitted the event. */\n    public target: MatDatepickerInput<D>,\n    /** Reference to the native input element associated with the datepicker input. */\n    public targetElement: HTMLElement) {\n    this.value = this.target.value;\n  }\n}\n\n\n/** Directive used to connect an input to a MatDatepicker. */\n@Directive({\n  selector: 'input[matDatepicker]',\n  providers: [\n    MAT_DATEPICKER_VALUE_ACCESSOR,\n    MAT_DATEPICKER_VALIDATORS,\n    {provide: MAT_INPUT_VALUE_ACCESSOR, useExisting: MatDatepickerInput},\n  ],\n  host: {\n    '[attr.aria-haspopup]': 'true',\n    '[attr.aria-owns]': '(_datepicker?.opened && _datepicker.id) || null',\n    '[attr.min]': 'min ? _dateAdapter.toIso8601(min) : null',\n    '[attr.max]': 'max ? _dateAdapter.toIso8601(max) : null',\n    '[disabled]': 'disabled',\n    '(input)': '_onInput($event.target.value)',\n    '(change)': '_onChange()',\n    '(blur)': '_onTouched()',\n    '(keydown)': '_onKeydown($event)',\n  },\n  exportAs: 'matDatepickerInput',\n})\nexport class MatDatepickerInput<D> implements AfterContentInit, ControlValueAccessor, OnDestroy,\n    Validator {\n  /** The datepicker that this input is associated with. */\n  @Input()\n  set matDatepicker(value: MatDatepicker<D>) {\n    this.registerDatepicker(value);\n  }\n  _datepicker: MatDatepicker<D>;\n\n  private registerDatepicker(value: MatDatepicker<D>) {\n    if (value) {\n      this._datepicker = value;\n      this._datepicker._registerInput(this);\n    }\n  }\n\n  /** Function that can be used to filter out dates within the datepicker. */\n  @Input()\n  set matDatepickerFilter(filter: (date: D | null) => boolean) {\n    this._dateFilter = filter;\n    this._validatorOnChange();\n  }\n  _dateFilter: (date: D | null) => boolean;\n\n  /** The value of the input. */\n  @Input()\n  get value(): D | null { return this._value; }\n  set value(value: D | null) {\n    value = this._dateAdapter.deserialize(value);\n    this._lastValueValid = !value || this._dateAdapter.isValid(value);\n    value = this._getValidDateOrNull(value);\n    let oldDate = this.value;\n    this._value = value;\n    this._elementRef.nativeElement.value =\n        value ? this._dateAdapter.format(value, this._dateFormats.display.dateInput) : '';\n    if (!this._dateAdapter.sameDate(oldDate, value)) {\n      this._valueChange.emit(value);\n    }\n  }\n  private _value: D | null;\n\n  /** The minimum valid date. */\n  @Input()\n  get min(): D | null { return this._min; }\n  set min(value: D | null) {\n    this._min = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n    this._validatorOnChange();\n  }\n  private _min: D | null;\n\n  /** The maximum valid date. */\n  @Input()\n  get max(): D | null { return this._max; }\n  set max(value: D | null) {\n    this._max = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n    this._validatorOnChange();\n  }\n  private _max: D | null;\n\n  /** Whether the datepicker-input is disabled. */\n  @Input()\n  get disabled(): boolean { return !!this._disabled; }\n  set disabled(value: boolean) {\n    const newValue = coerceBooleanProperty(value);\n\n    if (this._disabled !== newValue) {\n      this._disabled = newValue;\n      this._disabledChange.emit(newValue);\n    }\n  }\n  private _disabled: boolean;\n\n  /** Emits when a `change` event is fired on this `<input>`. */\n  @Output() dateChange: EventEmitter<MatDatepickerInputEvent<D>>\n      = new EventEmitter<MatDatepickerInputEvent<D>>();\n\n  /** Emits when an `input` event is fired on this `<input>`. */\n  @Output() dateInput: EventEmitter<MatDatepickerInputEvent<D>>\n      = new EventEmitter<MatDatepickerInputEvent<D>>();\n\n  /** Emits when the value changes (either due to user input or programmatic change). */\n  _valueChange = new EventEmitter<D|null>();\n\n  /** Emits when the disabled state has changed */\n  _disabledChange = new EventEmitter<boolean>();\n\n  _onTouched = () => {};\n\n  private _cvaOnChange: (value: any) => void = () => {};\n\n  private _validatorOnChange = () => {};\n\n  private _datepickerSubscription = Subscription.EMPTY;\n\n  private _localeSubscription = Subscription.EMPTY;\n\n  /** The form control validator for whether the input parses. */\n  private _parseValidator: ValidatorFn = (): ValidationErrors | null => {\n    return this._lastValueValid ?\n        null : {'matDatepickerParse': {'text': this._elementRef.nativeElement.value}};\n  }\n\n  /** The form control validator for the min date. */\n  private _minValidator: ValidatorFn = (control: AbstractControl): ValidationErrors | null => {\n    const controlValue = this._getValidDateOrNull(this._dateAdapter.deserialize(control.value));\n    return (!this.min || !controlValue ||\n        this._dateAdapter.compareDate(this.min, controlValue) <= 0) ?\n        null : {'matDatepickerMin': {'min': this.min, 'actual': controlValue}};\n  }\n\n  /** The form control validator for the max date. */\n  private _maxValidator: ValidatorFn = (control: AbstractControl): ValidationErrors | null => {\n    const controlValue = this._getValidDateOrNull(this._dateAdapter.deserialize(control.value));\n    return (!this.max || !controlValue ||\n        this._dateAdapter.compareDate(this.max, controlValue) >= 0) ?\n        null : {'matDatepickerMax': {'max': this.max, 'actual': controlValue}};\n  }\n\n  /** The form control validator for the date filter. */\n  private _filterValidator: ValidatorFn = (control: AbstractControl): ValidationErrors | null => {\n    const controlValue = this._getValidDateOrNull(this._dateAdapter.deserialize(control.value));\n    return !this._dateFilter || !controlValue || this._dateFilter(controlValue) ?\n        null : {'matDatepickerFilter': true};\n  }\n\n  /** The combined form control validator for this input. */\n  private _validator: ValidatorFn | null =\n      Validators.compose(\n          [this._parseValidator, this._minValidator, this._maxValidator, this._filterValidator]);\n\n  /** Whether the last value set on the input was valid. */\n  private _lastValueValid = false;\n\n  constructor(\n      private _elementRef: ElementRef,\n      @Optional() public _dateAdapter: DateAdapter<D>,\n      @Optional() @Inject(MAT_DATE_FORMATS) private _dateFormats: MatDateFormats,\n      @Optional() private _formField: MatFormField) {\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n    if (!this._dateFormats) {\n      throw createMissingDateImplError('MAT_DATE_FORMATS');\n    }\n\n    // Update the displayed date when the locale changes.\n    this._localeSubscription = _dateAdapter.localeChanges.subscribe(() => {\n      this.value = this.value;\n    });\n  }\n\n  ngAfterContentInit() {\n    if (this._datepicker) {\n      this._datepickerSubscription =\n          this._datepicker.selectedChanged.subscribe((selected: D) => {\n            this.value = selected;\n            this._cvaOnChange(selected);\n            this._onTouched();\n            this.dateInput.emit(new MatDatepickerInputEvent(this, this._elementRef.nativeElement));\n            this.dateChange.emit(new MatDatepickerInputEvent(this, this._elementRef.nativeElement));\n          });\n    }\n  }\n\n  ngOnDestroy() {\n    this._datepickerSubscription.unsubscribe();\n    this._localeSubscription.unsubscribe();\n    this._valueChange.complete();\n    this._disabledChange.complete();\n  }\n\n  /** @docs-private */\n  registerOnValidatorChange(fn: () => void): void {\n    this._validatorOnChange = fn;\n  }\n\n  validate(c: AbstractControl): ValidationErrors | null {\n    return this._validator ? this._validator(c) : null;\n  }\n\n  /**\n   * Gets the element that the datepicker popup should be connected to.\n   * @return The element to connect the popup to.\n   */\n  getPopupConnectionElementRef(): ElementRef {\n    return this._formField ? this._formField.underlineRef : this._elementRef;\n  }\n\n  /**\n   * Determines the offset to be used when the calendar goes into a fallback position.\n   * Primarily used to prevent the calendar from overlapping the input.\n   */\n  _getPopupFallbackOffset(): number {\n    return this._formField ? -this._formField._inputContainerRef.nativeElement.clientHeight : 0;\n  }\n\n  // Implemented as part of ControlValueAccessor\n  writeValue(value: D): void {\n    this.value = value;\n  }\n\n  // Implemented as part of ControlValueAccessor\n  registerOnChange(fn: (value: any) => void): void {\n    this._cvaOnChange = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor\n  registerOnTouched(fn: () => void): void {\n    this._onTouched = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor\n  setDisabledState(disabled: boolean): void {\n    this.disabled = disabled;\n  }\n\n  _onKeydown(event: KeyboardEvent) {\n    if (event.altKey && event.keyCode === DOWN_ARROW) {\n      this._datepicker.open();\n      event.preventDefault();\n    }\n  }\n\n  _onInput(value: string) {\n    let date = this._dateAdapter.parse(value, this._dateFormats.parse.dateInput);\n    this._lastValueValid = !date || this._dateAdapter.isValid(date);\n    date = this._getValidDateOrNull(date);\n    this._value = date;\n    this._cvaOnChange(date);\n    this._valueChange.emit(date);\n    this.dateInput.emit(new MatDatepickerInputEvent(this, this._elementRef.nativeElement));\n  }\n\n  _onChange() {\n    this.dateChange.emit(new MatDatepickerInputEvent(this, this._elementRef.nativeElement));\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  Input,\n  OnChanges,\n  OnDestroy,\n  SimpleChanges,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {merge} from 'rxjs/observable/merge';\nimport {of as observableOf} from 'rxjs/observable/of';\nimport {Subscription} from 'rxjs/Subscription';\nimport {MatDatepicker} from './datepicker';\nimport {MatDatepickerIntl} from './datepicker-intl';\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-datepicker-toggle',\n  templateUrl: 'datepicker-toggle.html',\n  host: {\n    'class': 'mat-datepicker-toggle',\n  },\n  exportAs: 'matDatepickerToggle',\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatDatepickerToggle<D> implements AfterContentInit, OnChanges, OnDestroy {\n  private _stateChanges = Subscription.EMPTY;\n\n  /** Datepicker instance that the button will toggle. */\n  @Input('for') datepicker: MatDatepicker<D>;\n\n  /** Whether the toggle button is disabled. */\n  @Input()\n  get disabled(): boolean {\n    return this._disabled === undefined ? this.datepicker.disabled : !!this._disabled;\n  }\n  set disabled(value: boolean) {\n    this._disabled = coerceBooleanProperty(value);\n  }\n  private _disabled: boolean;\n\n  constructor(public _intl: MatDatepickerIntl, private _changeDetectorRef: ChangeDetectorRef) {}\n\n  ngOnChanges(changes: SimpleChanges) {\n    if (changes.datepicker) {\n      this._watchStateChanges();\n    }\n  }\n\n  ngOnDestroy() {\n    this._stateChanges.unsubscribe();\n  }\n\n  ngAfterContentInit() {\n    this._watchStateChanges();\n  }\n\n  _open(event: Event): void {\n    if (this.datepicker && !this.disabled) {\n      this.datepicker.open();\n      event.stopPropagation();\n    }\n  }\n\n  private _watchStateChanges() {\n    const datepickerDisabled = this.datepicker ? this.datepicker._disabledChange : observableOf();\n    const inputDisabled = this.datepicker && this.datepicker._datepickerInput ?\n        this.datepicker._datepickerInput._disabledChange : observableOf();\n\n    this._stateChanges.unsubscribe();\n    this._stateChanges = merge(this._intl.changes, datepickerDisabled, inputDisabled)\n        .subscribe(() => this._changeDetectorRef.markForCheck());\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {A11yModule} from '@angular/cdk/a11y';\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatButtonModule} from '@angular/material/button';\nimport {MatDialogModule} from '@angular/material/dialog';\nimport {MatIconModule} from '@angular/material/icon';\nimport {MatCalendar} from './calendar';\nimport {MatCalendarBody} from './calendar-body';\nimport {\n  MAT_DATEPICKER_SCROLL_STRATEGY_PROVIDER,\n  MatDatepicker,\n  MatDatepickerContent,\n} from './datepicker';\nimport {MatDatepickerInput} from './datepicker-input';\nimport {MatDatepickerIntl} from './datepicker-intl';\nimport {MatDatepickerToggle} from './datepicker-toggle';\nimport {MatMonthView} from './month-view';\nimport {MatMultiYearView} from './multi-year-view';\nimport {MatYearView} from './year-view';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatButtonModule,\n    MatDialogModule,\n    MatIconModule,\n    OverlayModule,\n    A11yModule,\n  ],\n  exports: [\n    MatCalendar,\n    MatCalendarBody,\n    MatDatepicker,\n    MatDatepickerContent,\n    MatDatepickerInput,\n    MatDatepickerToggle,\n    MatMonthView,\n    MatYearView,\n    MatMultiYearView,\n  ],\n  declarations: [\n    MatCalendar,\n    MatCalendarBody,\n    MatDatepicker,\n    MatDatepickerContent,\n    MatDatepickerInput,\n    MatDatepickerToggle,\n    MatMonthView,\n    MatYearView,\n    MatMultiYearView,\n  ],\n  providers: [\n    MatDatepickerIntl,\n    MAT_DATEPICKER_SCROLL_STRATEGY_PROVIDER,\n  ],\n  entryComponents: [\n    MatDatepickerContent,\n  ]\n})\nexport class MatDatepickerModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ChangeDetectionStrategy, Component, Input, ViewEncapsulation} from '@angular/core';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-divider',\n  host: {\n    'role': 'separator',\n    '[attr.aria-orientation]': 'vertical ? \"vertical\" : \"horizontal\"',\n    '[class.mat-divider-vertical]': 'vertical',\n    '[class.mat-divider-inset]': 'inset',\n    'class': 'mat-divider'\n  },\n  template: '',\n  styleUrls: ['divider.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  preserveWhitespaces: false,\n})\nexport class MatDivider {\n  /** Whether the divider is vertically aligned. */\n  @Input()\n  get vertical(): boolean { return this._vertical; }\n  set vertical(value: boolean) { this._vertical = coerceBooleanProperty(value); }\n  private _vertical: boolean = false;\n\n  /** Whether the divider is an inset divider. */\n  @Input()\n  get inset(): boolean { return this._inset; }\n  set inset(value: boolean) { this._inset = coerceBooleanProperty(value); }\n  private _inset: boolean = false;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatDivider} from './divider';\n\n\n@NgModule({\n  imports: [MatCommonModule, CommonModule],\n  exports: [\n    MatDivider,\n    MatCommonModule,\n  ],\n  declarations: [\n    MatDivider,\n  ],\n})\nexport class MatDividerModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, Input} from '@angular/core';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {CdkAccordion} from '@angular/cdk/accordion';\n\n/** MatAccordion's display modes. */\nexport type MatAccordionDisplayMode = 'default' | 'flat';\n\n/**\n * Directive for a Material Design Accordion.\n */\n@Directive({\n  selector: 'mat-accordion',\n  exportAs: 'matAccordion',\n  host: {\n    class: 'mat-accordion'\n  }\n})\nexport class MatAccordion extends CdkAccordion {\n  /** Whether the expansion indicator should be hidden. */\n  @Input()\n  get hideToggle(): boolean { return this._hideToggle; }\n  set hideToggle(show: boolean) { this._hideToggle = coerceBooleanProperty(show); }\n  private _hideToggle: boolean = false;\n\n  /**\n   * The display mode used for all expansion panels in the accordion. Currently two display\n   * modes exist:\n   *   default - a gutter-like spacing is placed around any expanded panel, placing the expanded\n   *     panel at a different elevation from the reset of the accordion.\n   *  flat - no spacing is placed around expanded panels, showing all panels at the same\n   *     elevation.\n   */\n  @Input() displayMode: MatAccordionDisplayMode = 'default';\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, TemplateRef} from '@angular/core';\n\n/**\n * Expansion panel content that will be rendered lazily\n * after the panel is opened for the first time.\n */\n@Directive({\n  selector: 'ng-template[matExpansionPanelContent]'\n})\nexport class MatExpansionPanelContent {\n  constructor(public _template: TemplateRef<any>) {}\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  Directive,\n  forwardRef,\n  Host,\n  Input,\n  OnChanges,\n  OnDestroy,\n  Optional,\n  SimpleChanges,\n  ViewEncapsulation,\n  ViewContainerRef,\n  AfterContentInit,\n  ContentChild,\n} from '@angular/core';\nimport {CdkAccordionItem} from '@angular/cdk/accordion';\nimport {UniqueSelectionDispatcher} from '@angular/cdk/collections';\nimport {CanDisable, mixinDisabled} from '@angular/material/core';\nimport {TemplatePortal} from '@angular/cdk/portal';\nimport {Subject} from 'rxjs/Subject';\nimport {take} from 'rxjs/operators/take';\nimport {filter} from 'rxjs/operators/filter';\nimport {startWith} from 'rxjs/operators/startWith';\nimport {MatAccordion} from './accordion';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {MatExpansionPanelContent} from './expansion-panel-content';\nimport {matExpansionAnimations} from './expansion-animations';\n\n// Boilerplate for applying mixins to MatExpansionPanel.\n/** @docs-private */\n@Component({\n  template: '',\n  moduleId: module.id,\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatExpansionPanelBase extends CdkAccordionItem {\n  constructor(accordion: MatAccordion,\n              _changeDetectorRef: ChangeDetectorRef,\n              _uniqueSelectionDispatcher: UniqueSelectionDispatcher) {\n    super(accordion, _changeDetectorRef, _uniqueSelectionDispatcher);\n  }\n}\nexport const _MatExpansionPanelMixinBase = mixinDisabled(MatExpansionPanelBase);\n\n/** MatExpansionPanel's states. */\nexport type MatExpansionPanelState = 'expanded' | 'collapsed';\n\n/**\n * <mat-expansion-panel>\n *\n * This component can be used as a single element to show expandable content, or as one of\n * multiple children of an element with the MdAccordion directive attached.\n */\n@Component({\n  moduleId: module.id,\n  styleUrls: ['./expansion-panel.css'],\n  selector: 'mat-expansion-panel',\n  exportAs: 'matExpansionPanel',\n  templateUrl: './expansion-panel.html',\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  inputs: ['disabled', 'expanded'],\n  outputs: ['opened', 'closed'],\n  animations: [matExpansionAnimations.bodyExpansion],\n  host: {\n    'class': 'mat-expansion-panel',\n    '[class.mat-expanded]': 'expanded',\n    '[class.mat-expansion-panel-spacing]': '_hasSpacing()',\n  },\n  providers: [\n    {provide: _MatExpansionPanelMixinBase, useExisting: forwardRef(() => MatExpansionPanel)}\n  ],\n})\nexport class MatExpansionPanel extends _MatExpansionPanelMixinBase\n    implements CanDisable, AfterContentInit, OnChanges, OnDestroy {\n\n  /** Whether the toggle indicator should be hidden. */\n  @Input()\n  get hideToggle(): boolean { return this._hideToggle; }\n  set hideToggle(value: boolean) {\n    this._hideToggle = coerceBooleanProperty(value);\n  }\n  private _hideToggle = false;\n\n  /** Stream that emits for changes in `@Input` properties. */\n  _inputChanges = new Subject<SimpleChanges>();\n\n  /** Optionally defined accordion the expansion panel belongs to. */\n  accordion: MatAccordion;\n\n  /** Content that will be rendered lazily. */\n  @ContentChild(MatExpansionPanelContent) _lazyContent: MatExpansionPanelContent;\n\n  /** Portal holding the user's content. */\n  _portal: TemplatePortal<any>;\n\n  constructor(@Optional() @Host() accordion: MatAccordion,\n              _changeDetectorRef: ChangeDetectorRef,\n              _uniqueSelectionDispatcher: UniqueSelectionDispatcher,\n              private _viewContainerRef: ViewContainerRef) {\n    super(accordion, _changeDetectorRef, _uniqueSelectionDispatcher);\n    this.accordion = accordion;\n  }\n\n  /** Whether the expansion indicator should be hidden. */\n  _getHideToggle(): boolean {\n    if (this.accordion) {\n      return this.accordion.hideToggle;\n    }\n    return this.hideToggle;\n  }\n\n  /** Determines whether the expansion panel should have spacing between it and its siblings. */\n  _hasSpacing(): boolean {\n    if (this.accordion) {\n      return (this.expanded ? this.accordion.displayMode : this._getExpandedState()) === 'default';\n    }\n    return false;\n  }\n\n  /** Gets the expanded state string. */\n  _getExpandedState(): MatExpansionPanelState {\n    return this.expanded ? 'expanded' : 'collapsed';\n  }\n\n  ngAfterContentInit() {\n    if (this._lazyContent) {\n      // Render the content as soon as the panel becomes open.\n      this.opened.pipe(\n        startWith(null!),\n        filter(() => this.expanded && !this._portal),\n        take(1)\n      ).subscribe(() => {\n        this._portal = new TemplatePortal<any>(this._lazyContent._template, this._viewContainerRef);\n      });\n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    this._inputChanges.next(changes);\n  }\n\n  ngOnDestroy() {\n    super.ngOnDestroy();\n    this._inputChanges.complete();\n  }\n}\n\n@Directive({\n  selector: 'mat-action-row',\n  host: {\n    class: 'mat-action-row'\n  }\n})\nexport class MatExpansionPanelActionRow {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor} from '@angular/cdk/a11y';\nimport {ENTER, SPACE} from '@angular/cdk/keycodes';\nimport {filter} from 'rxjs/operators/filter';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  Directive,\n  ElementRef,\n  Host,\n  Input,\n  OnDestroy,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {merge} from 'rxjs/observable/merge';\nimport {Subscription} from 'rxjs/Subscription';\nimport {MatExpansionPanel} from './expansion-panel';\nimport {matExpansionAnimations} from './expansion-animations';\n\n\n/**\n * <mat-expansion-panel-header>\n *\n * This component corresponds to the header element of an <mat-expansion-panel>.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-expansion-panel-header',\n  styleUrls: ['./expansion-panel-header.css'],\n  templateUrl: './expansion-panel-header.html',\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  animations: [\n    matExpansionAnimations.indicatorRotate,\n    matExpansionAnimations.expansionHeaderHeight\n  ],\n  host: {\n    'class': 'mat-expansion-panel-header',\n    'role': 'button',\n    '[attr.tabindex]': 'panel.disabled ? -1 : 0',\n    '[attr.aria-controls]': '_getPanelId()',\n    '[attr.aria-expanded]': '_isExpanded()',\n    '[attr.aria-disabled]': 'panel.disabled',\n    '[class.mat-expanded]': '_isExpanded()',\n    '(click)': '_toggle()',\n    '(keyup)': '_keyup($event)',\n    '[@expansionHeight]': `{\n        value: _getExpandedState(),\n        params: {\n          collapsedHeight: collapsedHeight,\n          expandedHeight: expandedHeight\n        }\n    }`,\n  },\n})\nexport class MatExpansionPanelHeader implements OnDestroy {\n  private _parentChangeSubscription = Subscription.EMPTY;\n\n  constructor(\n    @Host() public panel: MatExpansionPanel,\n    private _element: ElementRef,\n    private _focusMonitor: FocusMonitor,\n    private _changeDetectorRef: ChangeDetectorRef) {\n\n    // Since the toggle state depends on an @Input on the panel, we\n    // need to  subscribe and trigger change detection manually.\n    this._parentChangeSubscription = merge(\n      panel.opened,\n      panel.closed,\n      panel._inputChanges.pipe(filter(changes => !!(changes.hideToggle || changes.disabled)))\n    )\n    .subscribe(() => this._changeDetectorRef.markForCheck());\n\n    _focusMonitor.monitor(_element.nativeElement);\n  }\n\n  /** Height of the header while the panel is expanded. */\n  @Input() expandedHeight: string;\n\n  /** Height of the header while the panel is collapsed. */\n  @Input() collapsedHeight: string;\n\n  /** Toggles the expanded state of the panel. */\n  _toggle(): void {\n    if (!this.panel.disabled) {\n      this.panel.toggle();\n    }\n  }\n\n  /** Gets whether the panel is expanded. */\n  _isExpanded(): boolean {\n    return this.panel.expanded;\n  }\n\n  /** Gets the expanded state string of the panel. */\n  _getExpandedState(): string {\n    return this.panel._getExpandedState();\n  }\n\n  /** Gets the panel id. */\n  _getPanelId(): string {\n    return this.panel.id;\n  }\n\n  /** Gets whether the expand indicator should be shown. */\n  _showToggle(): boolean {\n    return !this.panel.hideToggle && !this.panel.disabled;\n  }\n\n  /** Handle keyup event calling to toggle() if appropriate. */\n  _keyup(event: KeyboardEvent) {\n    switch (event.keyCode) {\n      // Toggle for space and enter keys.\n      case SPACE:\n      case ENTER:\n        event.preventDefault();\n        this._toggle();\n        break;\n      default:\n        return;\n    }\n  }\n\n  ngOnDestroy() {\n    this._parentChangeSubscription.unsubscribe();\n    this._focusMonitor.stopMonitoring(this._element.nativeElement);\n  }\n}\n\n/**\n * <mat-panel-description>\n *\n * This direction is to be used inside of the MatExpansionPanelHeader component.\n */\n@Directive({\n  selector: 'mat-panel-description',\n  host : {\n    class: 'mat-expansion-panel-header-description'\n  }\n})\nexport class MatExpansionPanelDescription {}\n\n/**\n * <mat-panel-title>\n *\n * This direction is to be used inside of the MatExpansionPanelHeader component.\n */\n@Directive({\n  selector: 'mat-panel-title',\n  host : {\n    class: 'mat-expansion-panel-header-title'\n  }\n})\nexport class MatExpansionPanelTitle {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {UNIQUE_SELECTION_DISPATCHER_PROVIDER} from '@angular/cdk/collections';\nimport {CdkAccordionModule} from '@angular/cdk/accordion';\nimport {A11yModule} from '@angular/cdk/a11y';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {MatAccordion} from './accordion';\nimport {MatExpansionPanelContent} from './expansion-panel-content';\nimport {\n  MatExpansionPanel,\n  MatExpansionPanelActionRow,\n  MatExpansionPanelBase\n} from './expansion-panel';\nimport {\n  MatExpansionPanelDescription,\n  MatExpansionPanelHeader,\n  MatExpansionPanelTitle,\n} from './expansion-panel-header';\n\n\n@NgModule({\n  imports: [CommonModule, A11yModule, CdkAccordionModule, PortalModule],\n  exports: [\n    MatAccordion,\n    MatExpansionPanel,\n    MatExpansionPanelActionRow,\n    MatExpansionPanelHeader,\n    MatExpansionPanelTitle,\n    MatExpansionPanelDescription,\n    MatExpansionPanelContent,\n  ],\n  declarations: [\n    MatExpansionPanelBase,\n    MatAccordion,\n    MatExpansionPanel,\n    MatExpansionPanelActionRow,\n    MatExpansionPanelHeader,\n    MatExpansionPanelTitle,\n    MatExpansionPanelDescription,\n    MatExpansionPanelContent,\n  ],\n  providers: [UNIQUE_SELECTION_DISPATCHER_PROVIDER]\n})\nexport class MatExpansionModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ViewEncapsulation,\n  ElementRef,\n  Input,\n  ContentChildren,\n  QueryList,\n  AfterContentInit,\n  Directive,\n  ChangeDetectionStrategy,\n} from '@angular/core';\nimport {MatLine, MatLineSetter} from '@angular/material/core';\nimport {coerceToNumber} from './grid-list-measure';\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-grid-tile',\n  exportAs: 'matGridTile',\n  host: {\n    'class': 'mat-grid-tile',\n  },\n  templateUrl: 'grid-tile.html',\n  styleUrls: ['grid-list.css'],\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatGridTile {\n  _rowspan: number = 1;\n  _colspan: number = 1;\n\n  constructor(private _element: ElementRef) {}\n\n  /** Amount of rows that the grid tile takes up. */\n  @Input()\n  get rowspan(): number { return this._rowspan; }\n  set rowspan(value: number) { this._rowspan = coerceToNumber(value); }\n\n  /** Amount of columns that the grid tile takes up. */\n  @Input()\n  get colspan(): number { return this._colspan; }\n  set colspan(value: number) { this._colspan = coerceToNumber(value); }\n\n  /**\n   * Sets the style of the grid-tile element.  Needs to be set manually to avoid\n   * \"Changed after checked\" errors that would occur with HostBinding.\n   */\n  _setStyle(property: string, value: any): void {\n    this._element.nativeElement.style[property] = value;\n  }\n}\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-grid-tile-header, mat-grid-tile-footer',\n  templateUrl: 'grid-tile-text.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n})\nexport class MatGridTileText implements AfterContentInit {\n  /**\n   *  Helper that watches the number of lines in a text area and sets\n   * a class on the host element that matches the line count.\n   */\n  _lineSetter: MatLineSetter;\n  @ContentChildren(MatLine) _lines: QueryList<MatLine>;\n\n  constructor(private _element: ElementRef) {}\n\n  ngAfterContentInit() {\n    this._lineSetter = new MatLineSetter(this._lines, this._element);\n  }\n}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-grid-avatar], [matGridAvatar]',\n  host: {'class': 'mat-grid-avatar'}\n})\nexport class MatGridAvatarCssMatStyler {}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-grid-tile-header',\n  host: {'class': 'mat-grid-tile-header'}\n})\nexport class MatGridTileHeaderCssMatStyler {}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-grid-tile-footer',\n  host: {'class': 'mat-grid-tile-footer'}\n})\nexport class MatGridTileFooterCssMatStyler {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {QueryList} from '@angular/core';\nimport {MatGridTile} from './grid-tile';\n\n/**\n * Class for determining, from a list of tiles, the (row, col) position of each of those tiles\n * in the grid. This is necessary (rather than just rendering the tiles in normal document flow)\n * because the tiles can have a rowspan.\n *\n * The positioning algorithm greedily places each tile as soon as it encounters a gap in the grid\n * large enough to accommodate it so that the tiles still render in the same order in which they\n * are given.\n *\n * The basis of the algorithm is the use of an array to track the already placed tiles. Each\n * element of the array corresponds to a column, and the value indicates how many cells in that\n * column are already occupied; zero indicates an empty cell. Moving \"down\" to the next row\n * decrements each value in the tracking array (indicating that the column is one cell closer to\n * being free).\n *\n * @docs-private\n */\nexport class TileCoordinator {\n  /** Tracking array (see class description). */\n  tracker: number[];\n\n  /** Index at which the search for the next gap will start. */\n  columnIndex: number = 0;\n\n  /** The current row index. */\n  rowIndex: number = 0;\n\n  /** Gets the total number of rows occupied by tiles */\n  get rowCount(): number { return this.rowIndex + 1; }\n\n  /**\n   * Gets the total span of rows occupied by tiles.\n   * Ex: A list with 1 row that contains a tile with rowspan 2 will have a total rowspan of 2.\n   */\n  get rowspan() {\n    let lastRowMax = Math.max(...this.tracker);\n    // if any of the tiles has a rowspan that pushes it beyond the total row count,\n    // add the difference to the rowcount\n    return lastRowMax > 1 ? this.rowCount + lastRowMax - 1 : this.rowCount;\n  }\n\n  /** The computed (row, col) position of each tile (the output). */\n  positions: TilePosition[];\n\n  constructor(numColumns: number, tiles: QueryList<MatGridTile>) {\n    this.tracker = new Array(numColumns);\n    this.tracker.fill(0, 0, this.tracker.length);\n\n    this.positions = tiles.map(tile => this._trackTile(tile));\n  }\n\n  /** Calculates the row and col position of a tile. */\n  private _trackTile(tile: MatGridTile): TilePosition {\n    // Find a gap large enough for this tile.\n    let gapStartIndex = this._findMatchingGap(tile.colspan);\n\n    // Place tile in the resulting gap.\n    this._markTilePosition(gapStartIndex, tile);\n\n    // The next time we look for a gap, the search will start at columnIndex, which should be\n    // immediately after the tile that has just been placed.\n    this.columnIndex = gapStartIndex + tile.colspan;\n\n    return new TilePosition(this.rowIndex, gapStartIndex);\n  }\n\n  /** Finds the next available space large enough to fit the tile. */\n  private _findMatchingGap(tileCols: number): number {\n    if (tileCols > this.tracker.length) {\n      throw Error(`mat-grid-list: tile with colspan ${tileCols} is wider than ` +\n                      `grid with cols=\"${this.tracker.length}\".`);\n    }\n\n    // Start index is inclusive, end index is exclusive.\n    let gapStartIndex = -1;\n    let gapEndIndex = -1;\n\n    // Look for a gap large enough to fit the given tile. Empty spaces are marked with a zero.\n    do {\n      // If we've reached the end of the row, go to the next row.\n      if (this.columnIndex + tileCols > this.tracker.length) {\n        this._nextRow();\n        continue;\n      }\n\n      gapStartIndex = this.tracker.indexOf(0, this.columnIndex);\n\n      // If there are no more empty spaces in this row at all, move on to the next row.\n      if (gapStartIndex == -1) {\n        this._nextRow();\n        continue;\n      }\n\n      gapEndIndex = this._findGapEndIndex(gapStartIndex);\n\n      // If a gap large enough isn't found, we want to start looking immediately after the current\n      // gap on the next iteration.\n      this.columnIndex = gapStartIndex + 1;\n\n      // Continue iterating until we find a gap wide enough for this tile.\n    } while (gapEndIndex - gapStartIndex < tileCols);\n    return gapStartIndex;\n  }\n\n  /** Move \"down\" to the next row. */\n  private _nextRow(): void {\n    this.columnIndex = 0;\n    this.rowIndex++;\n\n    // Decrement all spaces by one to reflect moving down one row.\n    for (let i = 0; i < this.tracker.length; i++) {\n      this.tracker[i] = Math.max(0, this.tracker[i] - 1);\n    }\n  }\n\n  /**\n   * Finds the end index (exclusive) of a gap given the index from which to start looking.\n   * The gap ends when a non-zero value is found.\n   */\n  private _findGapEndIndex(gapStartIndex: number): number {\n    for (let i = gapStartIndex + 1; i < this.tracker.length; i++) {\n      if (this.tracker[i] != 0) {\n        return i;\n      }\n    }\n\n    // The gap ends with the end of the row.\n    return this.tracker.length;\n  }\n\n  /** Update the tile tracker to account for the given tile in the given space. */\n  private _markTilePosition(start: number, tile: MatGridTile): void {\n    for (let i = 0; i < tile.colspan; i++) {\n      this.tracker[start + i] = tile.rowspan;\n    }\n  }\n}\n\n/**\n * Simple data structure for tile position (row, col).\n * @docs-private\n */\nexport class TilePosition {\n  constructor(public row: number, public col: number) {}\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {MatGridList} from './grid-list';\nimport {MatGridTile} from './grid-tile';\nimport {TileCoordinator} from './tile-coordinator';\n\n/**\n * Sets the style properties for an individual tile, given the position calculated by the\n * Tile Coordinator.\n * @docs-private\n */\nexport abstract class TileStyler {\n  _gutterSize: string;\n  _rows: number = 0;\n  _rowspan: number = 0;\n  _cols: number;\n  _direction: string;\n\n  /**\n   * Adds grid-list layout info once it is available. Cannot be processed in the constructor\n   * because these properties haven't been calculated by that point.\n   *\n   * @param gutterSize Size of the grid's gutter.\n   * @param tracker Instance of the TileCoordinator.\n   * @param cols Amount of columns in the grid.\n   * @param direction Layout direction of the grid.\n   */\n  init(gutterSize: string, tracker: TileCoordinator, cols: number, direction: string): void {\n    this._gutterSize = normalizeUnits(gutterSize);\n    this._rows = tracker.rowCount;\n    this._rowspan = tracker.rowspan;\n    this._cols = cols;\n    this._direction = direction;\n  }\n\n  /**\n   * Computes the amount of space a single 1x1 tile would take up (width or height).\n   * Used as a basis for other calculations.\n   * @param sizePercent Percent of the total grid-list space that one 1x1 tile would take up.\n   * @param gutterFraction Fraction of the gutter size taken up by one 1x1 tile.\n   * @return The size of a 1x1 tile as an expression that can be evaluated via CSS calc().\n   */\n  getBaseTileSize(sizePercent: number, gutterFraction: number): string {\n    // Take the base size percent (as would be if evenly dividing the size between cells),\n    // and then subtracting the size of one gutter. However, since there are no gutters on the\n    // edges, each tile only uses a fraction (gutterShare = numGutters / numCells) of the gutter\n    // size. (Imagine having one gutter per tile, and then breaking up the extra gutter on the\n    // edge evenly among the cells).\n    return `(${sizePercent}% - (${this._gutterSize} * ${gutterFraction}))`;\n  }\n\n\n  /**\n   * Gets The horizontal or vertical position of a tile, e.g., the 'top' or 'left' property value.\n   * @param offset Number of tiles that have already been rendered in the row/column.\n   * @param baseSize Base size of a 1x1 tile (as computed in getBaseTileSize).\n   * @return Position of the tile as a CSS calc() expression.\n   */\n  getTilePosition(baseSize: string, offset: number): string {\n    // The position comes the size of a 1x1 tile plus gutter for each previous tile in the\n    // row/column (offset).\n    return offset === 0 ? '0' : calc(`(${baseSize} + ${this._gutterSize}) * ${offset}`);\n  }\n\n\n  /**\n   * Gets the actual size of a tile, e.g., width or height, taking rowspan or colspan into account.\n   * @param baseSize Base size of a 1x1 tile (as computed in getBaseTileSize).\n   * @param span The tile's rowspan or colspan.\n   * @return Size of the tile as a CSS calc() expression.\n   */\n  getTileSize(baseSize: string, span: number): string {\n    return `(${baseSize} * ${span}) + (${span - 1} * ${this._gutterSize})`;\n  }\n\n\n  /**\n   * Sets the style properties to be applied to a tile for the given row and column index.\n   * @param tile Tile to which to apply the styling.\n   * @param rowIndex Index of the tile's row.\n   * @param colIndex Index of the tile's column.\n   */\n  setStyle(tile: MatGridTile, rowIndex: number, colIndex: number): void {\n    // Percent of the available horizontal space that one column takes up.\n    let percentWidthPerTile = 100 / this._cols;\n\n    // Fraction of the vertical gutter size that each column takes up.\n    // For example, if there are 5 columns, each column uses 4/5 = 0.8 times the gutter width.\n    let gutterWidthFractionPerTile = (this._cols - 1) / this._cols;\n\n    this.setColStyles(tile, colIndex, percentWidthPerTile, gutterWidthFractionPerTile);\n    this.setRowStyles(tile, rowIndex, percentWidthPerTile, gutterWidthFractionPerTile);\n  }\n\n  /** Sets the horizontal placement of the tile in the list. */\n  setColStyles(tile: MatGridTile, colIndex: number, percentWidth: number,\n               gutterWidth: number) {\n    // Base horizontal size of a column.\n    let baseTileWidth = this.getBaseTileSize(percentWidth, gutterWidth);\n\n    // The width and horizontal position of each tile is always calculated the same way, but the\n    // height and vertical position depends on the rowMode.\n    let side = this._direction === 'ltr' ? 'left' : 'right';\n    tile._setStyle(side, this.getTilePosition(baseTileWidth, colIndex));\n    tile._setStyle('width', calc(this.getTileSize(baseTileWidth, tile.colspan)));\n  }\n\n  /**\n   * Calculates the total size taken up by gutters across one axis of a list.\n   */\n  getGutterSpan(): string {\n    return `${this._gutterSize} * (${this._rowspan} - 1)`;\n  }\n\n  /**\n   * Calculates the total size taken up by tiles across one axis of a list.\n   * @param tileHeight Height of the tile.\n   */\n  getTileSpan(tileHeight: string): string {\n    return `${this._rowspan} * ${this.getTileSize(tileHeight, 1)}`;\n  }\n\n  /**\n   * Sets the vertical placement of the tile in the list.\n   * This method will be implemented by each type of TileStyler.\n   * @docs-private\n   */\n  abstract setRowStyles(tile: MatGridTile, rowIndex: number, percentWidth: number,\n                        gutterWidth: number);\n\n  /**\n   * Calculates the computed height and returns the correct style property to set.\n   * This method can be implemented by each type of TileStyler.\n   * @docs-private\n   */\n  getComputedHeight(): [string, string] | null { return null; }\n\n  /**\n   * Called when the tile styler is swapped out with a different one. To be used for cleanup.\n   * @param list Grid list that the styler was attached to.\n   * @docs-private\n   */\n  abstract reset(list: MatGridList);\n}\n\n\n/**\n * This type of styler is instantiated when the user passes in a fixed row height.\n * Example <mat-grid-list cols=\"3\" rowHeight=\"100px\">\n * @docs-private\n */\nexport class FixedTileStyler extends TileStyler {\n\n  constructor(public fixedRowHeight: string) { super(); }\n\n  init(gutterSize: string, tracker: TileCoordinator, cols: number, direction: string) {\n    super.init(gutterSize, tracker, cols, direction);\n    this.fixedRowHeight = normalizeUnits(this.fixedRowHeight);\n  }\n\n  setRowStyles(tile: MatGridTile, rowIndex: number): void {\n    tile._setStyle('top', this.getTilePosition(this.fixedRowHeight, rowIndex));\n    tile._setStyle('height', calc(this.getTileSize(this.fixedRowHeight, tile.rowspan)));\n  }\n\n  getComputedHeight(): [string, string] {\n    return [\n      'height', calc(`${this.getTileSpan(this.fixedRowHeight)} + ${this.getGutterSpan()}`)\n    ];\n  }\n\n  reset(list: MatGridList) {\n    list._setListStyle(['height', null]);\n\n    list._tiles.forEach(tile => {\n      tile._setStyle('top', null);\n      tile._setStyle('height', null);\n    });\n  }\n}\n\n\n/**\n * This type of styler is instantiated when the user passes in a width:height ratio\n * for the row height.  Example <mat-grid-list cols=\"3\" rowHeight=\"3:1\">\n * @docs-private\n */\nexport class RatioTileStyler extends TileStyler {\n\n  /** Ratio width:height given by user to determine row height. */\n  rowHeightRatio: number;\n  baseTileHeight: string;\n\n  constructor(value: string) {\n    super();\n    this._parseRatio(value);\n  }\n\n  setRowStyles(tile: MatGridTile, rowIndex: number, percentWidth: number,\n               gutterWidth: number): void {\n    let percentHeightPerTile = percentWidth / this.rowHeightRatio;\n    this.baseTileHeight = this.getBaseTileSize(percentHeightPerTile, gutterWidth);\n\n    // Use padding-top and margin-top to maintain the given aspect ratio, as\n    // a percentage-based value for these properties is applied versus the *width* of the\n    // containing block. See http://www.w3.org/TR/CSS2/box.html#margin-properties\n    tile._setStyle('margin-top', this.getTilePosition(this.baseTileHeight, rowIndex));\n    tile._setStyle('padding-top', calc(this.getTileSize(this.baseTileHeight, tile.rowspan)));\n  }\n\n  getComputedHeight(): [string, string] {\n    return [\n      'padding-bottom', calc(`${this.getTileSpan(this.baseTileHeight)} + ${this.getGutterSpan()}`)\n    ];\n  }\n\n  reset(list: MatGridList) {\n    list._setListStyle(['padding-bottom', null]);\n\n    list._tiles.forEach(tile => {\n      tile._setStyle('margin-top', null);\n      tile._setStyle('padding-top', null);\n    });\n  }\n\n  private _parseRatio(value: string): void {\n    const ratioParts = value.split(':');\n\n    if (ratioParts.length !== 2) {\n      throw Error(`mat-grid-list: invalid ratio given for row-height: \"${value}\"`);\n    }\n\n    this.rowHeightRatio = parseFloat(ratioParts[0]) / parseFloat(ratioParts[1]);\n  }\n}\n\n/**\n * This type of styler is instantiated when the user selects a \"fit\" row height mode.\n * In other words, the row height will reflect the total height of the container divided\n * by the number of rows.  Example <mat-grid-list cols=\"3\" rowHeight=\"fit\">\n *\n * @docs-private\n */\nexport class FitTileStyler extends TileStyler {\n\n  setRowStyles(tile: MatGridTile, rowIndex: number): void {\n    // Percent of the available vertical space that one row takes up.\n    let percentHeightPerTile = 100 / this._rowspan;\n\n    // Fraction of the horizontal gutter size that each column takes up.\n    let gutterHeightPerTile = (this._rows - 1) / this._rows;\n\n    // Base vertical size of a column.\n    let baseTileHeight = this.getBaseTileSize(percentHeightPerTile, gutterHeightPerTile);\n\n    tile._setStyle('top', this.getTilePosition(baseTileHeight, rowIndex));\n    tile._setStyle('height', calc(this.getTileSize(baseTileHeight, tile.rowspan)));\n  }\n\n  reset(list: MatGridList) {\n    list._tiles.forEach(tile => {\n      tile._setStyle('top', null);\n      tile._setStyle('height', null);\n    });\n  }\n}\n\n\n/** Wraps a CSS string in a calc function */\nfunction calc(exp: string): string { return `calc(${exp})`; }\n\n\n/** Appends pixels to a CSS string if no units are given. */\nfunction normalizeUnits(value: string): string {\n  return (value.match(/px|em|rem/)) ? value : value + 'px';\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ViewEncapsulation,\n  AfterContentChecked,\n  OnInit,\n  Input,\n  ContentChildren,\n  QueryList,\n  ElementRef,\n  Optional,\n  ChangeDetectionStrategy,\n} from '@angular/core';\nimport {MatGridTile} from './grid-tile';\nimport {TileCoordinator} from './tile-coordinator';\nimport {TileStyler, FitTileStyler, RatioTileStyler, FixedTileStyler} from './tile-styler';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {\n  coerceToString,\n  coerceToNumber,\n} from './grid-list-measure';\n\n\n// TODO(kara): Conditional (responsive) column count / row size.\n// TODO(kara): Re-layout on window resize / media change (debounced).\n// TODO(kara): gridTileHeader and gridTileFooter.\n\nconst MAT_FIT_MODE = 'fit';\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-grid-list',\n  exportAs: 'matGridList',\n  templateUrl: 'grid-list.html',\n  styleUrls: ['grid-list.css'],\n  host: {\n    'class': 'mat-grid-list',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n})\nexport class MatGridList implements OnInit, AfterContentChecked {\n  /** Number of columns being rendered. */\n  private _cols: number;\n\n  /**\n   * Row height value passed in by user. This can be one of three types:\n   * - Number value (ex: \"100px\"):  sets a fixed row height to that value\n   * - Ratio value (ex: \"4:3\"): sets the row height based on width:height ratio\n   * - \"Fit\" mode (ex: \"fit\"): sets the row height to total height divided by number of rows\n   */\n  private _rowHeight: string;\n\n  /** The amount of space between tiles. This will be something like '5px' or '2em'. */\n  private _gutter: string = '1px';\n\n  /** Sets position and size styles for a tile */\n  private _tileStyler: TileStyler;\n\n  /** Query list of tiles that are being rendered. */\n  @ContentChildren(MatGridTile) _tiles: QueryList<MatGridTile>;\n\n  constructor(private _element: ElementRef, @Optional() private _dir: Directionality) {}\n\n  /** Amount of columns in the grid list. */\n  @Input()\n  get cols(): number { return this._cols; }\n  set cols(value: number) { this._cols = coerceToNumber(value); }\n\n  /** Size of the grid list's gutter in pixels. */\n  @Input()\n  get gutterSize(): string { return this._gutter; }\n  set gutterSize(value: string) { this._gutter = coerceToString(value); }\n\n  /** Set internal representation of row height from the user-provided value. */\n  @Input()\n  set rowHeight(value: string | number) {\n    const newValue = coerceToString(value);\n\n    if (newValue !== this._rowHeight) {\n      this._rowHeight = newValue;\n      this._setTileStyler(this._rowHeight);\n    }\n  }\n\n  ngOnInit() {\n    this._checkCols();\n    this._checkRowHeight();\n  }\n\n  /**\n   * The layout calculation is fairly cheap if nothing changes, so there's little cost\n   * to run it frequently.\n   */\n  ngAfterContentChecked() {\n    this._layoutTiles();\n  }\n\n  /** Throw a friendly error if cols property is missing */\n  private _checkCols() {\n    if (!this.cols) {\n      throw Error(`mat-grid-list: must pass in number of columns. ` +\n                  `Example: <mat-grid-list cols=\"3\">`);\n    }\n  }\n\n  /** Default to equal width:height if rowHeight property is missing */\n  private _checkRowHeight(): void {\n    if (!this._rowHeight) {\n      this._setTileStyler('1:1');\n    }\n  }\n\n  /** Creates correct Tile Styler subtype based on rowHeight passed in by user */\n  private _setTileStyler(rowHeight: string): void {\n    if (this._tileStyler) {\n      this._tileStyler.reset(this);\n    }\n\n    if (rowHeight === MAT_FIT_MODE) {\n      this._tileStyler = new FitTileStyler();\n    } else if (rowHeight && rowHeight.indexOf(':') > -1) {\n      this._tileStyler = new RatioTileStyler(rowHeight);\n    } else {\n      this._tileStyler = new FixedTileStyler(rowHeight);\n    }\n  }\n\n  /** Computes and applies the size and position for all children grid tiles. */\n  private _layoutTiles(): void {\n    const tracker = new TileCoordinator(this.cols, this._tiles);\n    const direction = this._dir ? this._dir.value : 'ltr';\n    this._tileStyler.init(this.gutterSize, tracker, this.cols, direction);\n\n    this._tiles.forEach((tile, index) => {\n      const pos = tracker.positions[index];\n      this._tileStyler.setStyle(tile, pos.row, pos.col);\n    });\n\n    this._setListStyle(this._tileStyler.getComputedHeight());\n  }\n\n  /** Sets style on the main grid-list element, given the style name and value. */\n  _setListStyle(style: [string, string | null] | null): void {\n    if (style) {\n      this._element.nativeElement.style[style[0]] = style[1];\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatLineModule, MatCommonModule} from '@angular/material/core';\nimport {\n  MatGridTile, MatGridTileText, MatGridTileFooterCssMatStyler,\n  MatGridTileHeaderCssMatStyler, MatGridAvatarCssMatStyler\n} from './grid-tile';\nimport {MatGridList} from './grid-list';\n\n\n@NgModule({\n  imports: [MatLineModule, MatCommonModule],\n  exports: [\n    MatGridList,\n    MatGridTile,\n    MatGridTileText,\n    MatLineModule,\n    MatCommonModule,\n    MatGridTileHeaderCssMatStyler,\n    MatGridTileFooterCssMatStyler,\n    MatGridAvatarCssMatStyler\n  ],\n  declarations: [\n    MatGridList,\n    MatGridTile,\n    MatGridTileText,\n    MatGridTileHeaderCssMatStyler,\n    MatGridTileFooterCssMatStyler,\n    MatGridAvatarCssMatStyler\n  ],\n})\nexport class MatGridListModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  Component,\n  EventEmitter,\n  Inject,\n  Input,\n  Optional,\n  Output,\n  ViewEncapsulation,\n  ChangeDetectorRef,\n} from '@angular/core';\nimport {DateAdapter, MAT_DATE_FORMATS, MatDateFormats} from '@angular/material/core';\nimport {MatCalendarCell} from './calendar-body';\nimport {createMissingDateImplError} from './datepicker-errors';\n\n\nconst DAYS_PER_WEEK = 7;\n\n\n/**\n * An internal component used to display a single month in the datepicker.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-month-view',\n  templateUrl: 'month-view.html',\n  exportAs: 'matMonthView',\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatMonthView<D> implements AfterContentInit {\n  /**\n   * The date to display in this month view (everything other than the month and year is ignored).\n   */\n  @Input()\n  get activeDate(): D { return this._activeDate; }\n  set activeDate(value: D) {\n    let oldActiveDate = this._activeDate;\n    this._activeDate =\n        this._getValidDateOrNull(this._dateAdapter.deserialize(value)) || this._dateAdapter.today();\n    if (!this._hasSameMonthAndYear(oldActiveDate, this._activeDate)) {\n      this._init();\n    }\n  }\n  private _activeDate: D;\n\n  /** The currently selected date. */\n  @Input()\n  get selected(): D | null { return this._selected; }\n  set selected(value: D | null) {\n    this._selected = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n    this._selectedDate = this._getDateInCurrentMonth(this._selected);\n  }\n  private _selected: D | null;\n\n  /** A function used to filter which dates are selectable. */\n  @Input() dateFilter: (date: D) => boolean;\n\n  /** Emits when a new date is selected. */\n  @Output() selectedChange = new EventEmitter<D | null>();\n\n  /** Emits when any date is selected. */\n  @Output() _userSelection = new EventEmitter<void>();\n\n  /** The label for this month (e.g. \"January 2017\"). */\n  _monthLabel: string;\n\n  /** Grid of calendar cells representing the dates of the month. */\n  _weeks: MatCalendarCell[][];\n\n  /** The number of blank cells in the first row before the 1st of the month. */\n  _firstWeekOffset: number;\n\n  /**\n   * The date of the month that the currently selected Date falls on.\n   * Null if the currently selected Date is in another month.\n   */\n  _selectedDate: number | null;\n\n  /** The date of the month that today falls on. Null if today is in another month. */\n  _todayDate: number | null;\n\n  /** The names of the weekdays. */\n  _weekdays: {long: string, narrow: string}[];\n\n  constructor(@Optional() public _dateAdapter: DateAdapter<D>,\n              @Optional() @Inject(MAT_DATE_FORMATS) private _dateFormats: MatDateFormats,\n              private _changeDetectorRef: ChangeDetectorRef) {\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n    if (!this._dateFormats) {\n      throw createMissingDateImplError('MAT_DATE_FORMATS');\n    }\n\n    const firstDayOfWeek = this._dateAdapter.getFirstDayOfWeek();\n    const narrowWeekdays = this._dateAdapter.getDayOfWeekNames('narrow');\n    const longWeekdays = this._dateAdapter.getDayOfWeekNames('long');\n\n    // Rotate the labels for days of the week based on the configured first day of the week.\n    let weekdays = longWeekdays.map((long, i) => {\n      return {long, narrow: narrowWeekdays[i]};\n    });\n    this._weekdays = weekdays.slice(firstDayOfWeek).concat(weekdays.slice(0, firstDayOfWeek));\n\n    this._activeDate = this._dateAdapter.today();\n  }\n\n  ngAfterContentInit(): void {\n    this._init();\n  }\n\n  /** Handles when a new date is selected. */\n  _dateSelected(date: number) {\n    if (this._selectedDate != date) {\n      const selectedYear = this._dateAdapter.getYear(this.activeDate);\n      const selectedMonth = this._dateAdapter.getMonth(this.activeDate);\n      const selectedDate = this._dateAdapter.createDate(selectedYear, selectedMonth, date);\n\n      this.selectedChange.emit(selectedDate);\n    }\n\n    this._userSelection.emit();\n  }\n\n  /** Initializes this month view. */\n  _init() {\n    this._selectedDate = this._getDateInCurrentMonth(this.selected);\n    this._todayDate = this._getDateInCurrentMonth(this._dateAdapter.today());\n    this._monthLabel =\n        this._dateAdapter.getMonthNames('short')[this._dateAdapter.getMonth(this.activeDate)]\n            .toLocaleUpperCase();\n\n    let firstOfMonth = this._dateAdapter.createDate(this._dateAdapter.getYear(this.activeDate),\n        this._dateAdapter.getMonth(this.activeDate), 1);\n    this._firstWeekOffset =\n        (DAYS_PER_WEEK + this._dateAdapter.getDayOfWeek(firstOfMonth) -\n         this._dateAdapter.getFirstDayOfWeek()) % DAYS_PER_WEEK;\n\n    this._createWeekCells();\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Creates MatCalendarCells for the dates in this month. */\n  private _createWeekCells() {\n    let daysInMonth = this._dateAdapter.getNumDaysInMonth(this.activeDate);\n    let dateNames = this._dateAdapter.getDateNames();\n    this._weeks = [[]];\n    for (let i = 0, cell = this._firstWeekOffset; i < daysInMonth; i++, cell++) {\n      if (cell == DAYS_PER_WEEK) {\n        this._weeks.push([]);\n        cell = 0;\n      }\n      let date = this._dateAdapter.createDate(\n          this._dateAdapter.getYear(this.activeDate),\n          this._dateAdapter.getMonth(this.activeDate), i + 1);\n      let enabled = !this.dateFilter ||\n          this.dateFilter(date);\n      let ariaLabel = this._dateAdapter.format(date, this._dateFormats.display.dateA11yLabel);\n      this._weeks[this._weeks.length - 1]\n          .push(new MatCalendarCell(i + 1, dateNames[i], ariaLabel, enabled));\n    }\n  }\n\n  /**\n   * Gets the date in this month that the given Date falls on.\n   * Returns null if the given Date is in another month.\n   */\n  private _getDateInCurrentMonth(date: D | null): number | null {\n    return date && this._hasSameMonthAndYear(date, this.activeDate) ?\n        this._dateAdapter.getDate(date) : null;\n  }\n\n  /** Checks whether the 2 dates are non-null and fall within the same month of the same year. */\n  private _hasSameMonthAndYear(d1: D | null, d2: D | null): boolean {\n    return !!(d1 && d2 && this._dateAdapter.getMonth(d1) == this._dateAdapter.getMonth(d2) &&\n              this._dateAdapter.getYear(d1) == this._dateAdapter.getYear(d2));\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  EventEmitter,\n  Input,\n  Optional,\n  Output,\n  ViewEncapsulation\n} from '@angular/core';\nimport {DateAdapter} from '@angular/material/core';\nimport {MatCalendarCell} from './calendar-body';\nimport {createMissingDateImplError} from './datepicker-errors';\n\n\nexport const yearsPerPage = 24;\n\nexport const yearsPerRow = 4;\n\n\n/**\n * An internal component used to display a year selector in the datepicker.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-multi-year-view',\n  templateUrl: 'multi-year-view.html',\n  exportAs: 'matMultiYearView',\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatMultiYearView<D> implements AfterContentInit {\n  /** The date to display in this multi-year view (everything other than the year is ignored). */\n  @Input()\n  get activeDate(): D { return this._activeDate; }\n  set activeDate(value: D) {\n    let oldActiveDate = this._activeDate;\n    this._activeDate =\n        this._getValidDateOrNull(this._dateAdapter.deserialize(value)) || this._dateAdapter.today();\n    if (Math.floor(this._dateAdapter.getYear(oldActiveDate) / yearsPerPage) !=\n        Math.floor(this._dateAdapter.getYear(this._activeDate) / yearsPerPage)) {\n      this._init();\n    }\n  }\n  private _activeDate: D;\n\n  /** The currently selected date. */\n  @Input()\n  get selected(): D | null { return this._selected; }\n  set selected(value: D | null) {\n    this._selected = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n    this._selectedYear = this._selected && this._dateAdapter.getYear(this._selected);\n  }\n  private _selected: D | null;\n\n  /** A function used to filter which dates are selectable. */\n  @Input() dateFilter: (date: D) => boolean;\n\n  /** Emits when a new month is selected. */\n  @Output() selectedChange = new EventEmitter<D>();\n\n  /** Grid of calendar cells representing the currently displayed years. */\n  _years: MatCalendarCell[][];\n\n  /** The year that today falls on. */\n  _todayYear: number;\n\n  /** The year of the selected date. Null if the selected date is null. */\n  _selectedYear: number | null;\n\n  constructor(@Optional() public _dateAdapter: DateAdapter<D>,\n              private _changeDetectorRef: ChangeDetectorRef) {\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n\n    this._activeDate = this._dateAdapter.today();\n  }\n\n  ngAfterContentInit() {\n    this._init();\n  }\n\n  /** Initializes this multi-year view. */\n  _init() {\n    this._todayYear = this._dateAdapter.getYear(this._dateAdapter.today());\n    let activeYear = this._dateAdapter.getYear(this._activeDate);\n    let activeOffset = activeYear % yearsPerPage;\n    this._years = [];\n    for (let i = 0, row: number[] = []; i < yearsPerPage; i++) {\n      row.push(activeYear - activeOffset + i);\n      if (row.length == yearsPerRow) {\n        this._years.push(row.map(year => this._createCellForYear(year)));\n        row = [];\n      }\n    }\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Handles when a new year is selected. */\n  _yearSelected(year: number) {\n    let month = this._dateAdapter.getMonth(this.activeDate);\n    let daysInMonth =\n        this._dateAdapter.getNumDaysInMonth(this._dateAdapter.createDate(year, month, 1));\n    this.selectedChange.emit(this._dateAdapter.createDate(year, month,\n        Math.min(this._dateAdapter.getDate(this.activeDate), daysInMonth)));\n  }\n\n  _getActiveCell(): number {\n    return this._dateAdapter.getYear(this.activeDate) % yearsPerPage;\n  }\n\n  /** Creates an MatCalendarCell for the given year. */\n  private _createCellForYear(year: number) {\n    let yearName = this._dateAdapter.getYearName(this._dateAdapter.createDate(year, 0, 1));\n    return new MatCalendarCell(year, yearName, yearName, true);\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  Component,\n  EventEmitter,\n  Inject,\n  Input,\n  Optional,\n  Output,\n  ViewEncapsulation,\n  ChangeDetectorRef,\n} from '@angular/core';\nimport {DateAdapter, MAT_DATE_FORMATS, MatDateFormats} from '@angular/material/core';\nimport {MatCalendarCell} from './calendar-body';\nimport {createMissingDateImplError} from './datepicker-errors';\n\n\n/**\n * An internal component used to display a single year in the datepicker.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-year-view',\n  templateUrl: 'year-view.html',\n  exportAs: 'matYearView',\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatYearView<D> implements AfterContentInit {\n  /** The date to display in this year view (everything other than the year is ignored). */\n  @Input()\n  get activeDate(): D { return this._activeDate; }\n  set activeDate(value: D) {\n    let oldActiveDate = this._activeDate;\n    this._activeDate =\n        this._getValidDateOrNull(this._dateAdapter.deserialize(value)) || this._dateAdapter.today();\n    if (this._dateAdapter.getYear(oldActiveDate) != this._dateAdapter.getYear(this._activeDate)) {\n      this._init();\n    }\n  }\n  private _activeDate: D;\n\n  /** The currently selected date. */\n  @Input()\n  get selected(): D | null { return this._selected; }\n  set selected(value: D | null) {\n    this._selected = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n    this._selectedMonth = this._getMonthInCurrentYear(this._selected);\n  }\n  private _selected: D | null;\n\n  /** A function used to filter which dates are selectable. */\n  @Input() dateFilter: (date: D) => boolean;\n\n  /** Emits when a new month is selected. */\n  @Output() selectedChange = new EventEmitter<D>();\n\n  /** Grid of calendar cells representing the months of the year. */\n  _months: MatCalendarCell[][];\n\n  /** The label for this year (e.g. \"2017\"). */\n  _yearLabel: string;\n\n  /** The month in this year that today falls on. Null if today is in a different year. */\n  _todayMonth: number | null;\n\n  /**\n   * The month in this year that the selected Date falls on.\n   * Null if the selected Date is in a different year.\n   */\n  _selectedMonth: number | null;\n\n  constructor(@Optional() public _dateAdapter: DateAdapter<D>,\n              @Optional() @Inject(MAT_DATE_FORMATS) private _dateFormats: MatDateFormats,\n              private _changeDetectorRef: ChangeDetectorRef) {\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n    if (!this._dateFormats) {\n      throw createMissingDateImplError('MAT_DATE_FORMATS');\n    }\n\n    this._activeDate = this._dateAdapter.today();\n  }\n\n  ngAfterContentInit() {\n    this._init();\n  }\n\n  /** Handles when a new month is selected. */\n  _monthSelected(month: number) {\n    let daysInMonth = this._dateAdapter.getNumDaysInMonth(\n        this._dateAdapter.createDate(this._dateAdapter.getYear(this.activeDate), month, 1));\n    this.selectedChange.emit(this._dateAdapter.createDate(\n        this._dateAdapter.getYear(this.activeDate), month,\n        Math.min(this._dateAdapter.getDate(this.activeDate), daysInMonth)));\n  }\n\n  /** Initializes this year view. */\n  _init() {\n    this._selectedMonth = this._getMonthInCurrentYear(this.selected);\n    this._todayMonth = this._getMonthInCurrentYear(this._dateAdapter.today());\n    this._yearLabel = this._dateAdapter.getYearName(this.activeDate);\n\n    let monthNames = this._dateAdapter.getMonthNames('short');\n    // First row of months only contains 5 elements so we can fit the year label on the same row.\n    this._months = [[0, 1, 2, 3], [4, 5, 6, 7], [8, 9, 10, 11]].map(row => row.map(\n        month => this._createCellForMonth(month, monthNames[month])));\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /**\n   * Gets the month in this year that the given Date falls on.\n   * Returns null if the given Date is in another year.\n   */\n  private _getMonthInCurrentYear(date: D | null) {\n    return date && this._dateAdapter.getYear(date) == this._dateAdapter.getYear(this.activeDate) ?\n        this._dateAdapter.getMonth(date) : null;\n  }\n\n  /** Creates an MatCalendarCell for the given month. */\n  private _createCellForMonth(month: number, monthName: string) {\n    let ariaLabel = this._dateAdapter.format(\n        this._dateAdapter.createDate(this._dateAdapter.getYear(this.activeDate), month, 1),\n        this._dateFormats.display.monthYearA11yLabel);\n    return new MatCalendarCell(\n        month, monthName.toLocaleUpperCase(), ariaLabel, this._isMonthEnabled(month));\n  }\n\n  /** Whether the given month is enabled. */\n  private _isMonthEnabled(month: number) {\n    if (!this.dateFilter) {\n      return true;\n    }\n\n    let firstOfMonth = this._dateAdapter.createDate(\n        this._dateAdapter.getYear(this.activeDate), month, 1);\n\n    // If any date in the month is enabled count the month as enabled.\n    for (let date = firstOfMonth; this._dateAdapter.getMonth(date) == month;\n         date = this._dateAdapter.addCalendarDays(date, 1)) {\n      if (this.dateFilter(date)) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  DOWN_ARROW,\n  END,\n  ENTER,\n  HOME,\n  LEFT_ARROW,\n  PAGE_DOWN,\n  PAGE_UP,\n  RIGHT_ARROW,\n  UP_ARROW,\n} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  Input,\n  NgZone,\n  OnChanges,\n  OnDestroy,\n  Optional,\n  Output,\n  SimpleChanges,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {DateAdapter, MAT_DATE_FORMATS, MatDateFormats} from '@angular/material/core';\nimport {take} from 'rxjs/operators/take';\nimport {Subscription} from 'rxjs/Subscription';\nimport {createMissingDateImplError} from './datepicker-errors';\nimport {MatDatepickerIntl} from './datepicker-intl';\nimport {MatMonthView} from './month-view';\nimport {MatMultiYearView, yearsPerPage, yearsPerRow} from './multi-year-view';\nimport {MatYearView} from './year-view';\n\n\n/**\n * A calendar that is used as part of the datepicker.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-calendar',\n  templateUrl: 'calendar.html',\n  styleUrls: ['calendar.css'],\n  host: {\n    'class': 'mat-calendar',\n  },\n  exportAs: 'matCalendar',\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatCalendar<D> implements AfterContentInit, OnDestroy, OnChanges {\n  private _intlChanges: Subscription;\n\n  /** A date representing the period (month or year) to start the calendar in. */\n  @Input()\n  get startAt(): D | null { return this._startAt; }\n  set startAt(value: D | null) {\n    this._startAt = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _startAt: D | null;\n\n  /** Whether the calendar should be started in month or year view. */\n  @Input() startView: 'month' | 'year' | 'multi-year' = 'month';\n\n  /** The currently selected date. */\n  @Input()\n  get selected(): D | null { return this._selected; }\n  set selected(value: D | null) {\n    this._selected = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _selected: D | null;\n\n  /** The minimum selectable date. */\n  @Input()\n  get minDate(): D | null { return this._minDate; }\n  set minDate(value: D | null) {\n    this._minDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _minDate: D | null;\n\n  /** The maximum selectable date. */\n  @Input()\n  get maxDate(): D | null { return this._maxDate; }\n  set maxDate(value: D | null) {\n    this._maxDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _maxDate: D | null;\n\n  /** A function used to filter which dates are selectable. */\n  @Input() dateFilter: (date: D) => boolean;\n\n  /** Emits when the currently selected date changes. */\n  @Output() selectedChange = new EventEmitter<D>();\n\n  /** Emits when any date is selected. */\n  @Output() _userSelection = new EventEmitter<void>();\n\n  /** Reference to the current month view component. */\n  @ViewChild(MatMonthView) monthView: MatMonthView<D>;\n\n  /** Reference to the current year view component. */\n  @ViewChild(MatYearView) yearView: MatYearView<D>;\n\n  /** Reference to the current multi-year view component. */\n  @ViewChild(MatMultiYearView) multiYearView: MatMultiYearView<D>;\n\n  /** Date filter for the month, year, and multi-year views. */\n  _dateFilterForViews = (date: D) => {\n    return !!date &&\n        (!this.dateFilter || this.dateFilter(date)) &&\n        (!this.minDate || this._dateAdapter.compareDate(date, this.minDate) >= 0) &&\n        (!this.maxDate || this._dateAdapter.compareDate(date, this.maxDate) <= 0);\n  }\n\n  /**\n   * The current active date. This determines which time period is shown and which date is\n   * highlighted when using keyboard navigation.\n   */\n  get _activeDate(): D { return this._clampedActiveDate; }\n  set _activeDate(value: D) {\n    this._clampedActiveDate = this._dateAdapter.clampDate(value, this.minDate, this.maxDate);\n  }\n  private _clampedActiveDate: D;\n\n  /** Whether the calendar is in month view. */\n  _currentView: 'month' | 'year' | 'multi-year';\n\n  /** The label for the current calendar view. */\n  get _periodButtonText(): string {\n    if (this._currentView == 'month') {\n      return this._dateAdapter.format(this._activeDate, this._dateFormats.display.monthYearLabel)\n          .toLocaleUpperCase();\n    }\n    if (this._currentView == 'year') {\n      return this._dateAdapter.getYearName(this._activeDate);\n    }\n    const activeYear = this._dateAdapter.getYear(this._activeDate);\n    const firstYearInView = this._dateAdapter.getYearName(\n        this._dateAdapter.createDate(activeYear - activeYear % 24, 0, 1));\n    const lastYearInView = this._dateAdapter.getYearName(\n        this._dateAdapter.createDate(activeYear + yearsPerPage - 1 - activeYear % 24, 0, 1));\n    return `${firstYearInView} \\u2013 ${lastYearInView}`;\n  }\n\n  get _periodButtonLabel(): string {\n    return this._currentView == 'month' ?\n        this._intl.switchToMultiYearViewLabel : this._intl.switchToMonthViewLabel;\n  }\n\n  /** The label for the the previous button. */\n  get _prevButtonLabel(): string {\n    return {\n      'month': this._intl.prevMonthLabel,\n      'year': this._intl.prevYearLabel,\n      'multi-year': this._intl.prevMultiYearLabel\n    }[this._currentView];\n  }\n\n  /** The label for the the next button. */\n  get _nextButtonLabel(): string {\n    return {\n      'month': this._intl.nextMonthLabel,\n      'year': this._intl.nextYearLabel,\n      'multi-year': this._intl.nextMultiYearLabel\n    }[this._currentView];\n  }\n\n  constructor(private _elementRef: ElementRef,\n              private _intl: MatDatepickerIntl,\n              private _ngZone: NgZone,\n              @Optional() private _dateAdapter: DateAdapter<D>,\n              @Optional() @Inject(MAT_DATE_FORMATS) private _dateFormats: MatDateFormats,\n              changeDetectorRef: ChangeDetectorRef) {\n\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n\n    if (!this._dateFormats) {\n      throw createMissingDateImplError('MAT_DATE_FORMATS');\n    }\n\n    this._intlChanges = _intl.changes.subscribe(() => changeDetectorRef.markForCheck());\n  }\n\n  ngAfterContentInit() {\n    this._activeDate = this.startAt || this._dateAdapter.today();\n    this._focusActiveCell();\n    this._currentView = this.startView;\n  }\n\n  ngOnDestroy() {\n    this._intlChanges.unsubscribe();\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    const change = changes.minDate || changes.maxDate || changes.dateFilter;\n\n    if (change && !change.firstChange) {\n      const view = this.monthView || this.yearView || this.multiYearView;\n\n      if (view) {\n        view._init();\n      }\n    }\n  }\n\n  /** Handles date selection in the month view. */\n  _dateSelected(date: D): void {\n    if (!this._dateAdapter.sameDate(date, this.selected)) {\n      this.selectedChange.emit(date);\n    }\n  }\n\n  _userSelected(): void {\n    this._userSelection.emit();\n  }\n\n  /** Handles month selection in the multi-year view. */\n  _goToDateInView(date: D, view: 'month' | 'year' | 'multi-year'): void {\n    this._activeDate = date;\n    this._currentView = view;\n  }\n\n  /** Handles user clicks on the period label. */\n  _currentPeriodClicked(): void {\n    this._currentView = this._currentView == 'month' ? 'multi-year' : 'month';\n  }\n\n  /** Handles user clicks on the previous button. */\n  _previousClicked(): void {\n    this._activeDate = this._currentView == 'month' ?\n        this._dateAdapter.addCalendarMonths(this._activeDate, -1) :\n        this._dateAdapter.addCalendarYears(\n            this._activeDate, this._currentView == 'year' ? -1 : -yearsPerPage);\n  }\n\n  /** Handles user clicks on the next button. */\n  _nextClicked(): void {\n    this._activeDate = this._currentView == 'month' ?\n        this._dateAdapter.addCalendarMonths(this._activeDate, 1) :\n        this._dateAdapter.addCalendarYears(\n            this._activeDate, this._currentView == 'year' ? 1 : yearsPerPage);\n  }\n\n  /** Whether the previous period button is enabled. */\n  _previousEnabled(): boolean {\n    if (!this.minDate) {\n      return true;\n    }\n    return !this.minDate || !this._isSameView(this._activeDate, this.minDate);\n  }\n\n  /** Whether the next period button is enabled. */\n  _nextEnabled(): boolean {\n    return !this.maxDate || !this._isSameView(this._activeDate, this.maxDate);\n  }\n\n  /** Handles keydown events on the calendar body. */\n  _handleCalendarBodyKeydown(event: KeyboardEvent): void {\n    // TODO(mmalerba): We currently allow keyboard navigation to disabled dates, but just prevent\n    // disabled ones from being selected. This may not be ideal, we should look into whether\n    // navigation should skip over disabled dates, and if so, how to implement that efficiently.\n    if (this._currentView == 'month') {\n      this._handleCalendarBodyKeydownInMonthView(event);\n    } else if (this._currentView == 'year') {\n      this._handleCalendarBodyKeydownInYearView(event);\n    } else {\n      this._handleCalendarBodyKeydownInMultiYearView(event);\n    }\n  }\n\n  /** Focuses the active cell after the microtask queue is empty. */\n  _focusActiveCell() {\n    this._ngZone.runOutsideAngular(() => {\n      this._ngZone.onStable.asObservable().pipe(take(1)).subscribe(() => {\n        this._elementRef.nativeElement.querySelector('.mat-calendar-body-active').focus();\n      });\n    });\n  }\n\n  /** Whether the two dates represent the same view in the current view mode (month or year). */\n  private _isSameView(date1: D, date2: D): boolean {\n    if (this._currentView == 'month') {\n      return this._dateAdapter.getYear(date1) == this._dateAdapter.getYear(date2) &&\n          this._dateAdapter.getMonth(date1) == this._dateAdapter.getMonth(date2);\n    }\n    if (this._currentView == 'year') {\n      return this._dateAdapter.getYear(date1) == this._dateAdapter.getYear(date2);\n    }\n    // Otherwise we are in 'multi-year' view.\n    return Math.floor(this._dateAdapter.getYear(date1) / yearsPerPage) ==\n        Math.floor(this._dateAdapter.getYear(date2) / yearsPerPage);\n  }\n\n  /** Handles keydown events on the calendar body when calendar is in month view. */\n  private _handleCalendarBodyKeydownInMonthView(event: KeyboardEvent): void {\n    switch (event.keyCode) {\n      case LEFT_ARROW:\n        this._activeDate = this._dateAdapter.addCalendarDays(this._activeDate, -1);\n        break;\n      case RIGHT_ARROW:\n        this._activeDate = this._dateAdapter.addCalendarDays(this._activeDate, 1);\n        break;\n      case UP_ARROW:\n        this._activeDate = this._dateAdapter.addCalendarDays(this._activeDate, -7);\n        break;\n      case DOWN_ARROW:\n        this._activeDate = this._dateAdapter.addCalendarDays(this._activeDate, 7);\n        break;\n      case HOME:\n        this._activeDate = this._dateAdapter.addCalendarDays(this._activeDate,\n            1 - this._dateAdapter.getDate(this._activeDate));\n        break;\n      case END:\n        this._activeDate = this._dateAdapter.addCalendarDays(this._activeDate,\n            (this._dateAdapter.getNumDaysInMonth(this._activeDate) -\n             this._dateAdapter.getDate(this._activeDate)));\n        break;\n      case PAGE_UP:\n        this._activeDate = event.altKey ?\n            this._dateAdapter.addCalendarYears(this._activeDate, -1) :\n            this._dateAdapter.addCalendarMonths(this._activeDate, -1);\n        break;\n      case PAGE_DOWN:\n        this._activeDate = event.altKey ?\n            this._dateAdapter.addCalendarYears(this._activeDate, 1) :\n            this._dateAdapter.addCalendarMonths(this._activeDate, 1);\n        break;\n      case ENTER:\n        if (this._dateFilterForViews(this._activeDate)) {\n          this._dateSelected(this._activeDate);\n          this._userSelected();\n          // Prevent unexpected default actions such as form submission.\n          event.preventDefault();\n        }\n        return;\n      default:\n        // Don't prevent default or focus active cell on keys that we don't explicitly handle.\n        return;\n    }\n\n    this._focusActiveCell();\n    // Prevent unexpected default actions such as form submission.\n    event.preventDefault();\n  }\n\n  /** Handles keydown events on the calendar body when calendar is in year view. */\n  private _handleCalendarBodyKeydownInYearView(event: KeyboardEvent): void {\n    switch (event.keyCode) {\n      case LEFT_ARROW:\n        this._activeDate = this._dateAdapter.addCalendarMonths(this._activeDate, -1);\n        break;\n      case RIGHT_ARROW:\n        this._activeDate = this._dateAdapter.addCalendarMonths(this._activeDate, 1);\n        break;\n      case UP_ARROW:\n        this._activeDate = this._dateAdapter.addCalendarMonths(this._activeDate, -4);\n        break;\n      case DOWN_ARROW:\n        this._activeDate = this._dateAdapter.addCalendarMonths(this._activeDate, 4);\n        break;\n      case HOME:\n        this._activeDate = this._dateAdapter.addCalendarMonths(this._activeDate,\n            -this._dateAdapter.getMonth(this._activeDate));\n        break;\n      case END:\n        this._activeDate = this._dateAdapter.addCalendarMonths(this._activeDate,\n            11 - this._dateAdapter.getMonth(this._activeDate));\n        break;\n      case PAGE_UP:\n        this._activeDate =\n            this._dateAdapter.addCalendarYears(this._activeDate, event.altKey ? -10 : -1);\n        break;\n      case PAGE_DOWN:\n        this._activeDate =\n            this._dateAdapter.addCalendarYears(this._activeDate, event.altKey ? 10 : 1);\n        break;\n      case ENTER:\n        this._goToDateInView(this._activeDate, 'month');\n        break;\n      default:\n        // Don't prevent default or focus active cell on keys that we don't explicitly handle.\n        return;\n    }\n\n    this._focusActiveCell();\n    // Prevent unexpected default actions such as form submission.\n    event.preventDefault();\n  }\n\n  /** Handles keydown events on the calendar body when calendar is in multi-year view. */\n  private _handleCalendarBodyKeydownInMultiYearView(event: KeyboardEvent): void {\n    switch (event.keyCode) {\n      case LEFT_ARROW:\n        this._activeDate = this._dateAdapter.addCalendarYears(this._activeDate, -1);\n        break;\n      case RIGHT_ARROW:\n        this._activeDate = this._dateAdapter.addCalendarYears(this._activeDate, 1);\n        break;\n      case UP_ARROW:\n        this._activeDate = this._dateAdapter.addCalendarYears(this._activeDate, -yearsPerRow);\n        break;\n      case DOWN_ARROW:\n        this._activeDate = this._dateAdapter.addCalendarYears(this._activeDate, yearsPerRow);\n        break;\n      case HOME:\n        this._activeDate = this._dateAdapter.addCalendarYears(this._activeDate,\n            -this._dateAdapter.getYear(this._activeDate) % yearsPerPage);\n        break;\n      case END:\n        this._activeDate = this._dateAdapter.addCalendarYears(this._activeDate,\n            yearsPerPage - this._dateAdapter.getYear(this._activeDate) % yearsPerPage - 1);\n        break;\n      case PAGE_UP:\n        this._activeDate =\n            this._dateAdapter.addCalendarYears(\n                this._activeDate, event.altKey ? -yearsPerPage * 10 : -yearsPerPage);\n        break;\n      case PAGE_DOWN:\n        this._activeDate =\n            this._dateAdapter.addCalendarYears(\n                this._activeDate, event.altKey ? yearsPerPage * 10 : yearsPerPage);\n        break;\n      case ENTER:\n        this._goToDateInView(this._activeDate, 'year');\n        break;\n      default:\n        // Don't prevent default or focus active cell on keys that we don't explicitly handle.\n        return;\n    }\n\n    this._focusActiveCell();\n    // Prevent unexpected default actions such as form submission.\n    event.preventDefault();\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {ESCAPE} from '@angular/cdk/keycodes';\nimport {\n  Overlay,\n  OverlayConfig,\n  OverlayRef,\n  PositionStrategy,\n  RepositionScrollStrategy,\n  ScrollStrategy,\n} from '@angular/cdk/overlay';\nimport {ComponentPortal} from '@angular/cdk/portal';\nimport {take} from 'rxjs/operators/take';\nimport {filter} from 'rxjs/operators/filter';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  Component,\n  ComponentRef,\n  EventEmitter,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  Output,\n  ViewChild,\n  ViewContainerRef,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {DateAdapter} from '@angular/material/core';\nimport {MatDialog, MatDialogRef} from '@angular/material/dialog';\nimport {DOCUMENT} from '@angular/common';\nimport {Subject} from 'rxjs/Subject';\nimport {Subscription} from 'rxjs/Subscription';\nimport {merge} from 'rxjs/observable/merge';\nimport {MatCalendar} from './calendar';\nimport {createMissingDateImplError} from './datepicker-errors';\nimport {MatDatepickerInput} from './datepicker-input';\n\n\n/** Used to generate a unique ID for each datepicker instance. */\nlet datepickerUid = 0;\n\n/** Injection token that determines the scroll handling while the calendar is open. */\nexport const MAT_DATEPICKER_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mat-datepicker-scroll-strategy');\n\n/** @docs-private */\nexport function MAT_DATEPICKER_SCROLL_STRATEGY_PROVIDER_FACTORY(overlay: Overlay):\n    () => RepositionScrollStrategy {\n  return () => overlay.scrollStrategies.reposition();\n}\n\n/** @docs-private */\nexport const MAT_DATEPICKER_SCROLL_STRATEGY_PROVIDER = {\n  provide: MAT_DATEPICKER_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_DATEPICKER_SCROLL_STRATEGY_PROVIDER_FACTORY,\n};\n\n\n/**\n * Component used as the content for the datepicker dialog and popup. We use this instead of using\n * MatCalendar directly as the content so we can control the initial focus. This also gives us a\n * place to put additional features of the popup that are not part of the calendar itself in the\n * future. (e.g. confirmation buttons).\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-datepicker-content',\n  templateUrl: 'datepicker-content.html',\n  styleUrls: ['datepicker-content.css'],\n  host: {\n    'class': 'mat-datepicker-content',\n    '[class.mat-datepicker-content-touch]': 'datepicker.touchUi',\n  },\n  exportAs: 'matDatepickerContent',\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatDatepickerContent<D> implements AfterContentInit {\n  datepicker: MatDatepicker<D>;\n\n  @ViewChild(MatCalendar) _calendar: MatCalendar<D>;\n\n  ngAfterContentInit() {\n    this._calendar._focusActiveCell();\n  }\n}\n\n\n// TODO(mmalerba): We use a component instead of a directive here so the user can use implicit\n// template reference variables (e.g. #d vs #d=\"matDatepicker\"). We can change this to a directive\n// if angular adds support for `exportAs: '$implicit'` on directives.\n/** Component responsible for managing the datepicker popup/dialog. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-datepicker',\n  template: '',\n  exportAs: 'matDatepicker',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n})\nexport class MatDatepicker<D> implements OnDestroy {\n  /** The date to open the calendar to initially. */\n  @Input()\n  get startAt(): D | null {\n    // If an explicit startAt is set we start there, otherwise we start at whatever the currently\n    // selected value is.\n    return this._startAt || (this._datepickerInput ? this._datepickerInput.value : null);\n  }\n  set startAt(date: D | null) {\n    this._startAt = this._getValidDateOrNull(this._dateAdapter.deserialize(date));\n  }\n  private _startAt: D | null;\n\n  /** The view that the calendar should start in. */\n  @Input() startView: 'month' | 'year' = 'month';\n\n  /**\n   * Whether the calendar UI is in touch mode. In touch mode the calendar opens in a dialog rather\n   * than a popup and elements have more padding to allow for bigger touch targets.\n   */\n  @Input()\n  get touchUi(): boolean { return this._touchUi; }\n  set touchUi(value: boolean) {\n    this._touchUi = coerceBooleanProperty(value);\n  }\n  private _touchUi = false;\n\n  /** Whether the datepicker pop-up should be disabled. */\n  @Input()\n  get disabled(): boolean {\n    return this._disabled === undefined && this._datepickerInput ?\n        this._datepickerInput.disabled : !!this._disabled;\n  }\n  set disabled(value: boolean) {\n    const newValue = coerceBooleanProperty(value);\n\n    if (newValue !== this._disabled) {\n      this._disabled = newValue;\n      this._disabledChange.next(newValue);\n    }\n  }\n  private _disabled: boolean;\n\n  /**\n   * Emits new selected date when selected date changes.\n   * @deprecated Switch to the `dateChange` and `dateInput` binding on the input element.\n   */\n  @Output() selectedChanged: EventEmitter<D> = new EventEmitter<D>();\n\n  /** Classes to be passed to the date picker panel. Supports the same syntax as `ngClass`. */\n  @Input() panelClass: string | string[];\n\n  /** Emits when the datepicker has been opened. */\n  @Output('opened') openedStream: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Emits when the datepicker has been closed. */\n  @Output('closed') closedStream: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Whether the calendar is open. */\n  @Input()\n  get opened(): boolean { return this._opened; }\n  set opened(shouldOpen: boolean) { shouldOpen ? this.open() : this.close(); }\n  private _opened = false;\n\n  /** The id for the datepicker calendar. */\n  id: string = `mat-datepicker-${datepickerUid++}`;\n\n  /** The currently selected date. */\n  get _selected(): D | null { return this._validSelected; }\n  set _selected(value: D | null) { this._validSelected = value; }\n  private _validSelected: D | null = null;\n\n  /** The minimum selectable date. */\n  get _minDate(): D | null {\n    return this._datepickerInput && this._datepickerInput.min;\n  }\n\n  /** The maximum selectable date. */\n  get _maxDate(): D | null {\n    return this._datepickerInput && this._datepickerInput.max;\n  }\n\n  get _dateFilter(): (date: D | null) => boolean {\n    return this._datepickerInput && this._datepickerInput._dateFilter;\n  }\n\n  /** A reference to the overlay when the calendar is opened as a popup. */\n  private _popupRef: OverlayRef;\n\n  /** A reference to the dialog when the calendar is opened as a dialog. */\n  private _dialogRef: MatDialogRef<any> | null;\n\n  /** A portal containing the calendar for this datepicker. */\n  private _calendarPortal: ComponentPortal<MatDatepickerContent<D>>;\n\n  /** The element that was focused before the datepicker was opened. */\n  private _focusedElementBeforeOpen: HTMLElement | null = null;\n\n  private _inputSubscription = Subscription.EMPTY;\n\n  /** The input element this datepicker is associated with. */\n  _datepickerInput: MatDatepickerInput<D>;\n\n  /** Emits when the datepicker is disabled. */\n  _disabledChange = new Subject<boolean>();\n\n  constructor(private _dialog: MatDialog,\n              private _overlay: Overlay,\n              private _ngZone: NgZone,\n              private _viewContainerRef: ViewContainerRef,\n              @Inject(MAT_DATEPICKER_SCROLL_STRATEGY) private _scrollStrategy,\n              @Optional() private _dateAdapter: DateAdapter<D>,\n              @Optional() private _dir: Directionality,\n              @Optional() @Inject(DOCUMENT) private _document: any) {\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n  }\n\n  ngOnDestroy() {\n    this.close();\n    this._inputSubscription.unsubscribe();\n    this._disabledChange.complete();\n\n    if (this._popupRef) {\n      this._popupRef.dispose();\n    }\n  }\n\n  /** Selects the given date */\n  _select(date: D): void {\n    let oldValue = this._selected;\n    this._selected = date;\n    if (!this._dateAdapter.sameDate(oldValue, this._selected)) {\n      this.selectedChanged.emit(date);\n    }\n  }\n\n  /**\n   * Register an input with this datepicker.\n   * @param input The datepicker input to register with this datepicker.\n   */\n  _registerInput(input: MatDatepickerInput<D>): void {\n    if (this._datepickerInput) {\n      throw Error('A MatDatepicker can only be associated with a single input.');\n    }\n    this._datepickerInput = input;\n    this._inputSubscription =\n        this._datepickerInput._valueChange.subscribe((value: D | null) => this._selected = value);\n  }\n\n  /** Open the calendar. */\n  open(): void {\n    if (this._opened || this.disabled) {\n      return;\n    }\n    if (!this._datepickerInput) {\n      throw Error('Attempted to open an MatDatepicker with no associated input.');\n    }\n    if (this._document) {\n      this._focusedElementBeforeOpen = this._document.activeElement;\n    }\n\n    this.touchUi ? this._openAsDialog() : this._openAsPopup();\n    this._opened = true;\n    this.openedStream.emit();\n  }\n\n  /** Close the calendar. */\n  close(): void {\n    if (!this._opened) {\n      return;\n    }\n    if (this._popupRef && this._popupRef.hasAttached()) {\n      this._popupRef.detach();\n    }\n    if (this._dialogRef) {\n      this._dialogRef.close();\n      this._dialogRef = null;\n    }\n    if (this._calendarPortal && this._calendarPortal.isAttached) {\n      this._calendarPortal.detach();\n    }\n\n    const completeClose = () => {\n      // The `_opened` could've been reset already if\n      // we got two events in quick succession.\n      if (this._opened) {\n        this._opened = false;\n        this.closedStream.emit();\n        this._focusedElementBeforeOpen = null;\n      }\n    };\n\n    if (this._focusedElementBeforeOpen &&\n      typeof this._focusedElementBeforeOpen.focus === 'function') {\n      // Because IE moves focus asynchronously, we can't count on it being restored before we've\n      // marked the datepicker as closed. If the event fires out of sequence and the element that\n      // we're refocusing opens the datepicker on focus, the user could be stuck with not being\n      // able to close the calendar at all. We work around it by making the logic, that marks\n      // the datepicker as closed, async as well.\n      this._focusedElementBeforeOpen.focus();\n      setTimeout(completeClose);\n    } else {\n      completeClose();\n    }\n  }\n\n  /** Open the calendar as a dialog. */\n  private _openAsDialog(): void {\n    this._dialogRef = this._dialog.open(MatDatepickerContent, {\n      direction: this._dir ? this._dir.value : 'ltr',\n      viewContainerRef: this._viewContainerRef,\n      panelClass: 'mat-datepicker-dialog',\n    });\n    this._dialogRef.afterClosed().subscribe(() => this.close());\n    this._dialogRef.componentInstance.datepicker = this;\n  }\n\n  /** Open the calendar as a popup. */\n  private _openAsPopup(): void {\n    if (!this._calendarPortal) {\n      this._calendarPortal = new ComponentPortal(MatDatepickerContent, this._viewContainerRef);\n    }\n\n    if (!this._popupRef) {\n      this._createPopup();\n    }\n\n    if (!this._popupRef.hasAttached()) {\n      let componentRef: ComponentRef<MatDatepickerContent<D>> =\n          this._popupRef.attach(this._calendarPortal);\n      componentRef.instance.datepicker = this;\n\n      // Update the position once the calendar has rendered.\n      this._ngZone.onStable.asObservable().pipe(take(1)).subscribe(() => {\n        this._popupRef.updatePosition();\n      });\n    }\n  }\n\n  /** Create the popup. */\n  private _createPopup(): void {\n    const overlayConfig = new OverlayConfig({\n      positionStrategy: this._createPopupPositionStrategy(),\n      hasBackdrop: true,\n      backdropClass: 'mat-overlay-transparent-backdrop',\n      direction: this._dir ? this._dir.value : 'ltr',\n      scrollStrategy: this._scrollStrategy(),\n      panelClass: 'mat-datepicker-popup',\n    });\n\n    this._popupRef = this._overlay.create(overlayConfig);\n\n    merge(\n      this._popupRef.backdropClick(),\n      this._popupRef.detachments(),\n      this._popupRef.keydownEvents().pipe(filter(event => event.keyCode === ESCAPE))\n    ).subscribe(() => this.close());\n  }\n\n  /** Create the popup PositionStrategy. */\n  private _createPopupPositionStrategy(): PositionStrategy {\n    const fallbackOffset = this._datepickerInput._getPopupFallbackOffset();\n\n    return this._overlay.position()\n      .connectedTo(this._datepickerInput.getPopupConnectionElementRef(),\n        {originX: 'start', originY: 'bottom'},\n        {overlayX: 'start', overlayY: 'top'}\n      )\n      .withFallbackPosition(\n        {originX: 'start', originY: 'top'},\n        {overlayX: 'start', overlayY: 'bottom'},\n        undefined,\n        fallbackOffset\n      )\n      .withFallbackPosition(\n        {originX: 'end', originY: 'bottom'},\n        {overlayX: 'end', overlayY: 'top'}\n      )\n      .withFallbackPosition(\n        {originX: 'end', originY: 'top'},\n        {overlayX: 'end', overlayY: 'bottom'},\n        undefined,\n        fallbackOffset\n      );\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ComponentRef,\n  ElementRef,\n  EmbeddedViewRef,\n  EventEmitter,\n  Inject,\n  Optional,\n  ChangeDetectorRef,\n  ViewChild,\n  ViewEncapsulation,\n  ChangeDetectionStrategy,\n} from '@angular/core';\nimport {DOCUMENT} from '@angular/common';\nimport {AnimationEvent} from '@angular/animations';\nimport {matDialogAnimations} from './dialog-animations';\nimport {\n  BasePortalOutlet,\n  ComponentPortal,\n  CdkPortalOutlet,\n  TemplatePortal\n} from '@angular/cdk/portal';\nimport {FocusTrap, FocusTrapFactory} from '@angular/cdk/a11y';\nimport {MatDialogConfig} from './dialog-config';\n\n\n/**\n * Throws an exception for the case when a ComponentPortal is\n * attached to a DomPortalOutlet without an origin.\n * @docs-private\n */\nexport function throwMatDialogContentAlreadyAttachedError() {\n  throw Error('Attempting to attach dialog content after content is already attached');\n}\n\n/**\n * Internal component that wraps user-provided dialog content.\n * Animation is based on https://material.io/guidelines/motion/choreography.html.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-dialog-container',\n  templateUrl: 'dialog-container.html',\n  styleUrls: ['dialog.css'],\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  // Using OnPush for dialogs caused some G3 sync issues. Disabled until we can track them down.\n  // tslint:disable-next-line:validate-decorators\n  changeDetection: ChangeDetectionStrategy.Default,\n  animations: [matDialogAnimations.slideDialog],\n  host: {\n    'class': 'mat-dialog-container',\n    'tabindex': '-1',\n    '[attr.role]': '_config?.role',\n    '[attr.aria-labelledby]': '_config?.ariaLabel ? null : _ariaLabelledBy',\n    '[attr.aria-label]': '_config?.ariaLabel',\n    '[attr.aria-describedby]': '_config?.ariaDescribedBy || null',\n    '[@slideDialog]': '_state',\n    '(@slideDialog.start)': '_onAnimationStart($event)',\n    '(@slideDialog.done)': '_onAnimationDone($event)',\n  },\n})\nexport class MatDialogContainer extends BasePortalOutlet {\n  /** The portal outlet inside of this container into which the dialog content will be loaded. */\n  @ViewChild(CdkPortalOutlet) _portalOutlet: CdkPortalOutlet;\n\n  /** The class that traps and manages focus within the dialog. */\n  private _focusTrap: FocusTrap;\n\n  /** Element that was focused before the dialog was opened. Save this to restore upon close. */\n  private _elementFocusedBeforeDialogWasOpened: HTMLElement | null = null;\n\n  /** The dialog configuration. */\n  _config: MatDialogConfig;\n\n  /** State of the dialog animation. */\n  _state: 'void' | 'enter' | 'exit' = 'enter';\n\n  /** Emits when an animation state changes. */\n  _animationStateChanged = new EventEmitter<AnimationEvent>();\n\n  /** ID of the element that should be considered as the dialog's label. */\n  _ariaLabelledBy: string | null = null;\n\n  constructor(\n    private _elementRef: ElementRef,\n    private _focusTrapFactory: FocusTrapFactory,\n    private _changeDetectorRef: ChangeDetectorRef,\n    @Optional() @Inject(DOCUMENT) private _document: any) {\n\n    super();\n  }\n\n  /**\n   * Attach a ComponentPortal as content to this dialog container.\n   * @param portal Portal to be attached as the dialog content.\n   */\n  attachComponentPortal<T>(portal: ComponentPortal<T>): ComponentRef<T> {\n    if (this._portalOutlet.hasAttached()) {\n      throwMatDialogContentAlreadyAttachedError();\n    }\n\n    this._savePreviouslyFocusedElement();\n    return this._portalOutlet.attachComponentPortal(portal);\n  }\n\n  /**\n   * Attach a TemplatePortal as content to this dialog container.\n   * @param portal Portal to be attached as the dialog content.\n   */\n  attachTemplatePortal<C>(portal: TemplatePortal<C>): EmbeddedViewRef<C> {\n    if (this._portalOutlet.hasAttached()) {\n      throwMatDialogContentAlreadyAttachedError();\n    }\n\n    this._savePreviouslyFocusedElement();\n    return this._portalOutlet.attachTemplatePortal(portal);\n  }\n\n  /** Moves the focus inside the focus trap. */\n  private _trapFocus() {\n    if (!this._focusTrap) {\n      this._focusTrap = this._focusTrapFactory.create(this._elementRef.nativeElement);\n    }\n\n    // If were to attempt to focus immediately, then the content of the dialog would not yet be\n    // ready in instances where change detection has to run first. To deal with this, we simply\n    // wait for the microtask queue to be empty.\n    if (this._config.autoFocus) {\n      this._focusTrap.focusInitialElementWhenReady();\n    }\n  }\n\n  /** Restores focus to the element that was focused before the dialog opened. */\n  private _restoreFocus() {\n    const toFocus = this._elementFocusedBeforeDialogWasOpened;\n\n    // We need the extra check, because IE can set the `activeElement` to null in some cases.\n    if (toFocus && typeof toFocus.focus === 'function') {\n      toFocus.focus();\n    }\n\n    if (this._focusTrap) {\n      this._focusTrap.destroy();\n    }\n  }\n\n  /** Saves a reference to the element that was focused before the dialog was opened. */\n  private _savePreviouslyFocusedElement() {\n    if (this._document) {\n      this._elementFocusedBeforeDialogWasOpened = this._document.activeElement as HTMLElement;\n\n      // Move focus onto the dialog immediately in order to prevent the user from accidentally\n      // opening multiple dialogs at the same time. Needs to be async, because the element\n      // may not be focusable immediately.\n      Promise.resolve().then(() => this._elementRef.nativeElement.focus());\n    }\n  }\n\n  /** Callback, invoked whenever an animation on the host completes. */\n  _onAnimationDone(event: AnimationEvent) {\n    if (event.toState === 'enter') {\n      this._trapFocus();\n    } else if (event.toState === 'exit') {\n      this._restoreFocus();\n    }\n\n    this._animationStateChanged.emit(event);\n  }\n\n  /** Callback, invoked when an animation on the host starts. */\n  _onAnimationStart(event: AnimationEvent) {\n    this._animationStateChanged.emit(event);\n  }\n\n  /** Starts the dialog exit animation. */\n  _startExitAnimation(): void {\n    this._state = 'exit';\n\n    // Mark the container for check so it can react if the\n    // view container is using OnPush change detection.\n    this._changeDetectorRef.markForCheck();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {OverlayRef, GlobalPositionStrategy} from '@angular/cdk/overlay';\nimport {ESCAPE} from '@angular/cdk/keycodes';\nimport {Location} from '@angular/common';\nimport {filter} from 'rxjs/operators/filter';\nimport {take} from 'rxjs/operators/take';\nimport {DialogPosition} from './dialog-config';\nimport {Observable} from 'rxjs/Observable';\nimport {Subject} from 'rxjs/Subject';\nimport {Subscription, ISubscription} from 'rxjs/Subscription';\nimport {MatDialogContainer} from './dialog-container';\n\n\n// TODO(jelbourn): resizing\n\n// Counter for unique dialog ids.\nlet uniqueId = 0;\n\n/**\n * Reference to a dialog opened via the MatDialog service.\n */\nexport class MatDialogRef<T, R = any> {\n  /** The instance of component opened into the dialog. */\n  componentInstance: T;\n\n  /** Whether the user is allowed to close the dialog. */\n  disableClose: boolean | undefined = this._containerInstance._config.disableClose;\n\n  /** Subject for notifying the user that the dialog has finished opening. */\n  private _afterOpen = new Subject<void>();\n\n  /** Subject for notifying the user that the dialog has finished closing. */\n  private _afterClosed = new Subject<R | undefined>();\n\n  /** Subject for notifying the user that the dialog has started closing. */\n  private _beforeClose = new Subject<R | undefined>();\n\n  /** Result to be passed to afterClosed. */\n  private _result: R | undefined;\n\n  /** Subscription to changes in the user's location. */\n  private _locationChanges: ISubscription = Subscription.EMPTY;\n\n  constructor(\n    private _overlayRef: OverlayRef,\n    private _containerInstance: MatDialogContainer,\n    location?: Location,\n    readonly id: string = `mat-dialog-${uniqueId++}`) {\n\n    // Emit when opening animation completes\n    _containerInstance._animationStateChanged.pipe(\n      filter(event => event.phaseName === 'done' && event.toState === 'enter'),\n      take(1)\n    )\n    .subscribe(() => {\n      this._afterOpen.next();\n      this._afterOpen.complete();\n    });\n\n    // Dispose overlay when closing animation is complete\n    _containerInstance._animationStateChanged.pipe(\n      filter(event => event.phaseName === 'done' && event.toState === 'exit'),\n      take(1)\n    )\n    .subscribe(() => {\n      this._overlayRef.dispose();\n      this._locationChanges.unsubscribe();\n      this._afterClosed.next(this._result);\n      this._afterClosed.complete();\n      this.componentInstance = null!;\n    });\n\n    _overlayRef.keydownEvents()\n      .pipe(filter(event => event.keyCode === ESCAPE && !this.disableClose))\n      .subscribe(() => this.close());\n\n    if (location) {\n      // Close the dialog when the user goes forwards/backwards in history or when the location\n      // hash changes. Note that this usually doesn't include clicking on links (unless the user\n      // is using the `HashLocationStrategy`).\n      this._locationChanges = location.subscribe(() => {\n        if (this._containerInstance._config.closeOnNavigation) {\n          this.close();\n        }\n      });\n    }\n  }\n\n  /**\n   * Close the dialog.\n   * @param dialogResult Optional result to return to the dialog opener.\n   */\n  close(dialogResult?: R): void {\n    this._result = dialogResult;\n\n    // Transition the backdrop in parallel to the dialog.\n    this._containerInstance._animationStateChanged.pipe(\n      filter(event => event.phaseName === 'start'),\n      take(1)\n    )\n    .subscribe(() => {\n      this._beforeClose.next(dialogResult);\n      this._beforeClose.complete();\n      this._overlayRef.detachBackdrop();\n    });\n\n    this._containerInstance._startExitAnimation();\n  }\n\n  /**\n   * Gets an observable that is notified when the dialog is finished opening.\n   */\n  afterOpen(): Observable<void> {\n    return this._afterOpen.asObservable();\n  }\n\n  /**\n   * Gets an observable that is notified when the dialog is finished closing.\n   */\n  afterClosed(): Observable<R | undefined> {\n    return this._afterClosed.asObservable();\n  }\n\n  /**\n   * Gets an observable that is notified when the dialog has started closing.\n   */\n  beforeClose(): Observable<R | undefined> {\n    return this._beforeClose.asObservable();\n  }\n\n  /**\n   * Gets an observable that emits when the overlay's backdrop has been clicked.\n   */\n  backdropClick(): Observable<void> {\n    return this._overlayRef.backdropClick();\n  }\n\n  /**\n   * Gets an observable that emits when keydown events are targeted on the overlay.\n   */\n  keydownEvents(): Observable<KeyboardEvent> {\n    return this._overlayRef.keydownEvents();\n  }\n\n  /**\n   * Updates the dialog's position.\n   * @param position New dialog position.\n   */\n  updatePosition(position?: DialogPosition): this {\n    let strategy = this._getPositionStrategy();\n\n    if (position && (position.left || position.right)) {\n      position.left ? strategy.left(position.left) : strategy.right(position.right);\n    } else {\n      strategy.centerHorizontally();\n    }\n\n    if (position && (position.top || position.bottom)) {\n      position.top ? strategy.top(position.top) : strategy.bottom(position.bottom);\n    } else {\n      strategy.centerVertically();\n    }\n\n    this._overlayRef.updatePosition();\n\n    return this;\n  }\n\n  /**\n   * Updates the dialog's width and height.\n   * @param width New width of the dialog.\n   * @param height New height of the dialog.\n   */\n  updateSize(width: string = 'auto', height: string = 'auto'): this {\n    this._getPositionStrategy().width(width).height(height);\n    this._overlayRef.updatePosition();\n    return this;\n  }\n\n  /** Fetches the position strategy object from the overlay ref. */\n  private _getPositionStrategy(): GlobalPositionStrategy {\n    return this._overlayRef.getConfig().positionStrategy as GlobalPositionStrategy;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directionality} from '@angular/cdk/bidi';\nimport {\n  Overlay,\n  OverlayConfig,\n  OverlayRef,\n  ScrollStrategy,\n  OverlayContainer,\n} from '@angular/cdk/overlay';\nimport {ComponentPortal, ComponentType, PortalInjector, TemplatePortal} from '@angular/cdk/portal';\nimport {Location} from '@angular/common';\nimport {\n  ComponentRef,\n  Inject,\n  Injectable,\n  InjectionToken,\n  Injector,\n  Optional,\n  SkipSelf,\n  TemplateRef,\n} from '@angular/core';\nimport {Observable} from 'rxjs/Observable';\nimport {defer} from 'rxjs/observable/defer';\nimport {of as observableOf} from 'rxjs/observable/of';\nimport {startWith} from 'rxjs/operators/startWith';\nimport {Subject} from 'rxjs/Subject';\nimport {MatDialogConfig} from './dialog-config';\nimport {MatDialogContainer} from './dialog-container';\nimport {MatDialogRef} from './dialog-ref';\n\n/** Injection token that can be used to access the data that was passed in to a dialog. */\nexport const MAT_DIALOG_DATA = new InjectionToken<any>('MatDialogData');\n\n/** Injection token that can be used to specify default dialog options. */\nexport const MAT_DIALOG_DEFAULT_OPTIONS =\n    new InjectionToken<MatDialogConfig>('mat-dialog-default-options');\n\n/** Injection token that determines the scroll handling while the dialog is open. */\nexport const MAT_DIALOG_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mat-dialog-scroll-strategy');\n\n/** @docs-private */\nexport function MAT_DIALOG_SCROLL_STRATEGY_PROVIDER_FACTORY(overlay: Overlay):\n    () => ScrollStrategy {\n  return () => overlay.scrollStrategies.block();\n}\n\n/** @docs-private */\nexport const MAT_DIALOG_SCROLL_STRATEGY_PROVIDER = {\n  provide: MAT_DIALOG_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_DIALOG_SCROLL_STRATEGY_PROVIDER_FACTORY,\n};\n\n\n/**\n * Service to open Material Design modal dialogs.\n */\n@Injectable()\nexport class MatDialog {\n  private _openDialogsAtThisLevel: MatDialogRef<any>[] = [];\n  private _afterAllClosedAtThisLevel = new Subject<void>();\n  private _afterOpenAtThisLevel = new Subject<MatDialogRef<any>>();\n  private _ariaHiddenElements = new Map<Element, string|null>();\n\n  /** Keeps track of the currently-open dialogs. */\n  get openDialogs(): MatDialogRef<any>[] {\n    return this._parentDialog ? this._parentDialog.openDialogs : this._openDialogsAtThisLevel;\n  }\n\n  /** Stream that emits when a dialog has been opened. */\n  get afterOpen(): Subject<MatDialogRef<any>> {\n    return this._parentDialog ? this._parentDialog.afterOpen : this._afterOpenAtThisLevel;\n  }\n\n  get _afterAllClosed() {\n    const parent = this._parentDialog;\n    return parent ? parent._afterAllClosed : this._afterAllClosedAtThisLevel;\n  }\n\n  /**\n   * Stream that emits when all open dialog have finished closing.\n   * Will emit on subscribe if there are no open dialogs to begin with.\n   */\n  afterAllClosed: Observable<void> = defer<void>(() => this.openDialogs.length ?\n      this._afterAllClosed :\n      this._afterAllClosed.pipe(startWith(undefined)));\n\n  constructor(\n      private _overlay: Overlay,\n      private _injector: Injector,\n      @Optional() private _location: Location,\n      @Optional() @Inject(MAT_DIALOG_DEFAULT_OPTIONS) private _defaultOptions,\n      @Inject(MAT_DIALOG_SCROLL_STRATEGY) private _scrollStrategy,\n      @Optional() @SkipSelf() private _parentDialog: MatDialog,\n      private _overlayContainer: OverlayContainer) {}\n\n  /**\n   * Opens a modal dialog containing the given component.\n   * @param componentOrTemplateRef Type of the component to load into the dialog,\n   *     or a TemplateRef to instantiate as the dialog content.\n   * @param config Extra configuration options.\n   * @returns Reference to the newly-opened dialog.\n   */\n  open<T, D = any>(componentOrTemplateRef: ComponentType<T> | TemplateRef<T>,\n          config?: MatDialogConfig<D>): MatDialogRef<T> {\n\n    config = _applyConfigDefaults(config, this._defaultOptions || new MatDialogConfig());\n\n    if (config.id && this.getDialogById(config.id)) {\n      throw Error(`Dialog with id \"${config.id}\" exists already. The dialog id must be unique.`);\n    }\n\n    const overlayRef = this._createOverlay(config);\n    const dialogContainer = this._attachDialogContainer(overlayRef, config);\n    const dialogRef =\n        this._attachDialogContent<T>(componentOrTemplateRef, dialogContainer, overlayRef, config);\n\n    // If this is the first dialog that we're opening, hide all the non-overlay content.\n    if (!this.openDialogs.length) {\n      this._hideNonDialogContentFromAssistiveTechnology();\n    }\n\n    this.openDialogs.push(dialogRef);\n    dialogRef.afterClosed().subscribe(() => this._removeOpenDialog(dialogRef));\n    this.afterOpen.next(dialogRef);\n\n    return dialogRef;\n  }\n\n  /**\n   * Closes all of the currently-open dialogs.\n   */\n  closeAll(): void {\n    let i = this.openDialogs.length;\n\n    while (i--) {\n      // The `_openDialogs` property isn't updated after close until the rxjs subscription\n      // runs on the next microtask, in addition to modifying the array as we're going\n      // through it. We loop through all of them and call close without assuming that\n      // they'll be removed from the list instantaneously.\n      this.openDialogs[i].close();\n    }\n  }\n\n  /**\n   * Finds an open dialog by its id.\n   * @param id ID to use when looking up the dialog.\n   */\n  getDialogById(id: string): MatDialogRef<any> | undefined {\n    return this.openDialogs.find(dialog => dialog.id === id);\n  }\n\n  /**\n   * Creates the overlay into which the dialog will be loaded.\n   * @param config The dialog configuration.\n   * @returns A promise resolving to the OverlayRef for the created overlay.\n   */\n  private _createOverlay(config: MatDialogConfig): OverlayRef {\n    const overlayConfig = this._getOverlayConfig(config);\n    return this._overlay.create(overlayConfig);\n  }\n\n  /**\n   * Creates an overlay config from a dialog config.\n   * @param dialogConfig The dialog configuration.\n   * @returns The overlay configuration.\n   */\n  private _getOverlayConfig(dialogConfig: MatDialogConfig): OverlayConfig {\n    const state = new OverlayConfig({\n      positionStrategy: this._overlay.position().global(),\n      scrollStrategy: dialogConfig.scrollStrategy || this._scrollStrategy(),\n      panelClass: dialogConfig.panelClass,\n      hasBackdrop: dialogConfig.hasBackdrop,\n      direction: dialogConfig.direction,\n      minWidth: dialogConfig.minWidth,\n      minHeight: dialogConfig.minHeight,\n      maxWidth: dialogConfig.maxWidth,\n      maxHeight: dialogConfig.maxHeight\n    });\n\n    if (dialogConfig.backdropClass) {\n      state.backdropClass = dialogConfig.backdropClass;\n    }\n\n    return state;\n  }\n\n  /**\n   * Attaches an MatDialogContainer to a dialog's already-created overlay.\n   * @param overlay Reference to the dialog's underlying overlay.\n   * @param config The dialog configuration.\n   * @returns A promise resolving to a ComponentRef for the attached container.\n   */\n  private _attachDialogContainer(overlay: OverlayRef, config: MatDialogConfig): MatDialogContainer {\n    let containerPortal = new ComponentPortal(MatDialogContainer, config.viewContainerRef);\n    let containerRef: ComponentRef<MatDialogContainer> = overlay.attach(containerPortal);\n    containerRef.instance._config = config;\n\n    return containerRef.instance;\n  }\n\n  /**\n   * Attaches the user-provided component to the already-created MatDialogContainer.\n   * @param componentOrTemplateRef The type of component being loaded into the dialog,\n   *     or a TemplateRef to instantiate as the content.\n   * @param dialogContainer Reference to the wrapping MatDialogContainer.\n   * @param overlayRef Reference to the overlay in which the dialog resides.\n   * @param config The dialog configuration.\n   * @returns A promise resolving to the MatDialogRef that should be returned to the user.\n   */\n  private _attachDialogContent<T>(\n      componentOrTemplateRef: ComponentType<T> | TemplateRef<T>,\n      dialogContainer: MatDialogContainer,\n      overlayRef: OverlayRef,\n      config: MatDialogConfig): MatDialogRef<T> {\n\n    // Create a reference to the dialog we're creating in order to give the user a handle\n    // to modify and close it.\n    const dialogRef = new MatDialogRef<T>(overlayRef, dialogContainer, this._location, config.id);\n\n    // When the dialog backdrop is clicked, we want to close it.\n    if (config.hasBackdrop) {\n      overlayRef.backdropClick().subscribe(() => {\n        if (!dialogRef.disableClose) {\n          dialogRef.close();\n        }\n      });\n    }\n\n    if (componentOrTemplateRef instanceof TemplateRef) {\n      dialogContainer.attachTemplatePortal(\n        new TemplatePortal<T>(componentOrTemplateRef, null!,\n          <any>{ $implicit: config.data, dialogRef }));\n    } else {\n      const injector = this._createInjector<T>(config, dialogRef, dialogContainer);\n      const contentRef = dialogContainer.attachComponentPortal<T>(\n          new ComponentPortal(componentOrTemplateRef, undefined, injector));\n      dialogRef.componentInstance = contentRef.instance;\n    }\n\n    dialogRef\n      .updateSize(config.width, config.height)\n      .updatePosition(config.position);\n\n    return dialogRef;\n  }\n\n  /**\n   * Creates a custom injector to be used inside the dialog. This allows a component loaded inside\n   * of a dialog to close itself and, optionally, to return a value.\n   * @param config Config object that is used to construct the dialog.\n   * @param dialogRef Reference to the dialog.\n   * @param container Dialog container element that wraps all of the contents.\n   * @returns The custom injector that can be used inside the dialog.\n   */\n  private _createInjector<T>(\n      config: MatDialogConfig,\n      dialogRef: MatDialogRef<T>,\n      dialogContainer: MatDialogContainer): PortalInjector {\n\n    const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n    const injectionTokens = new WeakMap();\n\n    injectionTokens.set(MatDialogRef, dialogRef);\n    // The MatDialogContainer is injected in the portal as the MatDialogContainer and the dialog's\n    // content are created out of the same ViewContainerRef and as such, are siblings for injector\n    // purposes.  To allow the hierarchy that is expected, the MatDialogContainer is explicitly\n    // added to the injection tokens.\n    injectionTokens.set(MatDialogContainer, dialogContainer);\n    injectionTokens.set(MAT_DIALOG_DATA, config.data);\n    injectionTokens.set(Directionality, {\n      value: config.direction,\n      change: observableOf()\n    });\n\n    return new PortalInjector(userInjector || this._injector, injectionTokens);\n  }\n\n  /**\n   * Removes a dialog from the array of open dialogs.\n   * @param dialogRef Dialog to be removed.\n   */\n  private _removeOpenDialog(dialogRef: MatDialogRef<any>) {\n    const index = this.openDialogs.indexOf(dialogRef);\n\n    if (index > -1) {\n      this.openDialogs.splice(index, 1);\n\n      // If all the dialogs were closed, remove/restore the `aria-hidden`\n      // to a the siblings and emit to the `afterAllClosed` stream.\n      if (!this.openDialogs.length) {\n        this._ariaHiddenElements.forEach((previousValue, element) => {\n          if (previousValue) {\n            element.setAttribute('aria-hidden', previousValue);\n          } else {\n            element.removeAttribute('aria-hidden');\n          }\n        });\n\n        this._ariaHiddenElements.clear();\n        this._afterAllClosed.next();\n      }\n    }\n  }\n\n  /**\n   * Hides all of the content that isn't an overlay from assistive technology.\n   */\n  private _hideNonDialogContentFromAssistiveTechnology() {\n    const overlayContainer = this._overlayContainer.getContainerElement();\n\n    // Ensure that the overlay container is attached to the DOM.\n    if (overlayContainer.parentElement) {\n      const siblings = overlayContainer.parentElement.children;\n\n      for (let i = siblings.length - 1; i > -1; i--) {\n        let sibling = siblings[i];\n\n        if (sibling !== overlayContainer &&\n          sibling.nodeName !== 'SCRIPT' &&\n          sibling.nodeName !== 'STYLE' &&\n          !sibling.hasAttribute('aria-live')) {\n\n          this._ariaHiddenElements.set(sibling, sibling.getAttribute('aria-hidden'));\n          sibling.setAttribute('aria-hidden', 'true');\n        }\n      }\n    }\n\n  }\n\n}\n\n/**\n * Applies default options to the dialog config.\n * @param config Config to be modified.\n * @param defaultOptions Default options provided.\n * @returns The new configuration object.\n */\nfunction _applyConfigDefaults(\n    config?: MatDialogConfig, defaultOptions?: MatDialogConfig): MatDialogConfig {\n  return {...defaultOptions, ...config};\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, Input, OnChanges, OnInit, Optional, SimpleChanges} from '@angular/core';\nimport {MatDialogRef} from './dialog-ref';\nimport {MatDialogContainer} from './dialog-container';\n\n/** Counter used to generate unique IDs for dialog elements. */\nlet dialogElementUid = 0;\n\n/**\n * Button that will close the current dialog.\n */\n@Directive({\n  selector: `button[mat-dialog-close], button[matDialogClose]`,\n  exportAs: 'matDialogClose',\n  host: {\n    '(click)': 'dialogRef.close(dialogResult)',\n    '[attr.aria-label]': 'ariaLabel',\n    'type': 'button', // Prevents accidental form submits.\n  }\n})\nexport class MatDialogClose implements OnChanges {\n  /** Screenreader label for the button. */\n  @Input('aria-label') ariaLabel: string = 'Close dialog';\n\n  /** Dialog close input. */\n  @Input('mat-dialog-close') dialogResult: any;\n\n  @Input('matDialogClose') _matDialogClose: any;\n\n  constructor(public dialogRef: MatDialogRef<any>) { }\n\n  ngOnChanges(changes: SimpleChanges) {\n    const proxiedChange = changes._matDialogClose || changes._matDialogCloseResult;\n\n    if (proxiedChange) {\n      this.dialogResult = proxiedChange.currentValue;\n    }\n  }\n}\n\n/**\n * Title of a dialog element. Stays fixed to the top of the dialog when scrolling.\n */\n@Directive({\n  selector: '[mat-dialog-title], [matDialogTitle]',\n  exportAs: 'matDialogTitle',\n  host: {\n    'class': 'mat-dialog-title',\n    '[id]': 'id',\n  },\n})\nexport class MatDialogTitle implements OnInit {\n  @Input() id = `mat-dialog-title-${dialogElementUid++}`;\n\n  constructor(@Optional() private _container: MatDialogContainer) { }\n\n  ngOnInit() {\n    if (this._container && !this._container._ariaLabelledBy) {\n      Promise.resolve().then(() => this._container._ariaLabelledBy = this.id);\n    }\n  }\n}\n\n\n/**\n * Scrollable content container of a dialog.\n */\n@Directive({\n  selector: `[mat-dialog-content], mat-dialog-content, [matDialogContent]`,\n  host: {'class': 'mat-dialog-content'}\n})\nexport class MatDialogContent { }\n\n\n/**\n * Container for the bottom action buttons in a dialog.\n * Stays fixed to the bottom when scrolling.\n */\n@Directive({\n  selector: `[mat-dialog-actions], mat-dialog-actions, [matDialogActions]`,\n  host: {'class': 'mat-dialog-actions'}\n})\nexport class MatDialogActions { }\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {A11yModule} from '@angular/cdk/a11y';\nimport {MatCommonModule} from '@angular/material/core';\nimport {\n  MatDialog,\n  MAT_DIALOG_SCROLL_STRATEGY_PROVIDER\n} from './dialog';\nimport {MatDialogContainer} from './dialog-container';\nimport {\n  MatDialogClose,\n  MatDialogContent,\n  MatDialogTitle,\n  MatDialogActions\n} from './dialog-content-directives';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    OverlayModule,\n    PortalModule,\n    A11yModule,\n    MatCommonModule,\n  ],\n  exports: [\n    MatDialogContainer,\n    MatDialogClose,\n    MatDialogTitle,\n    MatDialogContent,\n    MatDialogActions,\n    MatCommonModule,\n  ],\n  declarations: [\n    MatDialogContainer,\n    MatDialogClose,\n    MatDialogTitle,\n    MatDialogActions,\n    MatDialogContent,\n  ],\n  providers: [\n    MatDialog,\n    MAT_DIALOG_SCROLL_STRATEGY_PROVIDER,\n  ],\n  entryComponents: [MatDialogContainer],\n})\nexport class MatDialogModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {catchError} from 'rxjs/operators/catchError';\nimport {tap} from 'rxjs/operators/tap';\nimport {finalize} from 'rxjs/operators/finalize';\nimport {map} from 'rxjs/operators/map';\nimport {share} from 'rxjs/operators/share';\nimport {\n  Injectable,\n  Inject,\n  InjectionToken,\n  Optional,\n  SecurityContext,\n  SkipSelf,\n} from '@angular/core';\nimport {HttpClient} from '@angular/common/http';\nimport {DomSanitizer, SafeResourceUrl} from '@angular/platform-browser';\nimport {Observable} from 'rxjs/Observable';\nimport {forkJoin} from 'rxjs/observable/forkJoin';\nimport {of as observableOf} from 'rxjs/observable/of';\nimport {_throw as observableThrow} from 'rxjs/observable/throw';\nimport {DOCUMENT} from '@angular/common';\n\n\n/**\n * Returns an exception to be thrown in the case when attempting to\n * load an icon with a name that cannot be found.\n * @docs-private\n */\nexport function getMatIconNameNotFoundError(iconName: string): Error {\n  return Error(`Unable to find icon with the name \"${iconName}\"`);\n}\n\n\n/**\n * Returns an exception to be thrown when the consumer attempts to use\n * `<mat-icon>` without including @angular/http.\n * @docs-private\n */\nexport function getMatIconNoHttpProviderError(): Error {\n  return Error('Could not find HttpClient provider for use with Angular Material icons. ' +\n               'Please include the HttpClientModule from @angular/common/http in your ' +\n               'app imports.');\n}\n\n\n/**\n * Returns an exception to be thrown when a URL couldn't be sanitized.\n * @param url URL that was attempted to be sanitized.\n * @docs-private\n */\nexport function getMatIconFailedToSanitizeError(url: SafeResourceUrl): Error {\n  return Error(`The URL provided to MatIconRegistry was not trusted as a resource URL ` +\n               `via Angular's DomSanitizer. Attempted URL was \"${url}\".`);\n}\n\n/**\n * Configuration for an icon, including the URL and possibly the cached SVG element.\n * @docs-private\n */\nclass SvgIconConfig {\n  svgElement: SVGElement | null = null;\n  constructor(public url: SafeResourceUrl) { }\n}\n\n/**\n * Service to register and display icons used by the <mat-icon> component.\n * - Registers icon URLs by namespace and name.\n * - Registers icon set URLs by namespace.\n * - Registers aliases for CSS classes, for use with icon fonts.\n * - Loads icons from URLs and extracts individual icons from icon sets.\n */\n@Injectable()\nexport class MatIconRegistry {\n  private _document: Document;\n\n  /**\n   * URLs and cached SVG elements for individual icons. Keys are of the format \"[namespace]:[icon]\".\n   */\n  private _svgIconConfigs = new Map<string, SvgIconConfig>();\n\n  /**\n   * SvgIconConfig objects and cached SVG elements for icon sets, keyed by namespace.\n   * Multiple icon sets can be registered under the same namespace.\n   */\n  private _iconSetConfigs = new Map<string, SvgIconConfig[]>();\n\n  /** Cache for icons loaded by direct URLs. */\n  private _cachedIconsByUrl = new Map<string, SVGElement>();\n\n  /** In-progress icon fetches. Used to coalesce multiple requests to the same URL. */\n  private _inProgressUrlFetches = new Map<string, Observable<string>>();\n\n  /** Map from font identifiers to their CSS class names. Used for icon fonts. */\n  private _fontCssClassesByAlias = new Map<string, string>();\n\n  /**\n   * The CSS class to apply when an <mat-icon> component has no icon name, url, or font specified.\n   * The default 'material-icons' value assumes that the material icon font has been loaded as\n   * described at http://google.github.io/material-design-icons/#icon-font-for-the-web\n   */\n  private _defaultFontSetClass = 'material-icons';\n\n  constructor(\n    @Optional() private _httpClient: HttpClient,\n    private _sanitizer: DomSanitizer,\n    @Optional() @Inject(DOCUMENT) document?: any) {\n      // TODO(crisbeto): make _document required next major release.\n      this._document = document;\n    }\n\n  /**\n   * Registers an icon by URL in the default namespace.\n   * @param iconName Name under which the icon should be registered.\n   * @param url\n   */\n  addSvgIcon(iconName: string, url: SafeResourceUrl): this {\n    return this.addSvgIconInNamespace('', iconName, url);\n  }\n\n  /**\n   * Registers an icon by URL in the specified namespace.\n   * @param namespace Namespace in which the icon should be registered.\n   * @param iconName Name under which the icon should be registered.\n   * @param url\n   */\n  addSvgIconInNamespace(namespace: string, iconName: string, url: SafeResourceUrl): this {\n    const key = iconKey(namespace, iconName);\n    this._svgIconConfigs.set(key, new SvgIconConfig(url));\n    return this;\n  }\n\n  /**\n   * Registers an icon set by URL in the default namespace.\n   * @param url\n   */\n  addSvgIconSet(url: SafeResourceUrl): this {\n    return this.addSvgIconSetInNamespace('', url);\n  }\n\n  /**\n   * Registers an icon set by URL in the specified namespace.\n   * @param namespace Namespace in which to register the icon set.\n   * @param url\n   */\n  addSvgIconSetInNamespace(namespace: string, url: SafeResourceUrl): this {\n    const config = new SvgIconConfig(url);\n    const configNamespace = this._iconSetConfigs.get(namespace);\n\n    if (configNamespace) {\n      configNamespace.push(config);\n    } else {\n      this._iconSetConfigs.set(namespace, [config]);\n    }\n    return this;\n  }\n\n  /**\n   * Defines an alias for a CSS class name to be used for icon fonts. Creating an matIcon\n   * component with the alias as the fontSet input will cause the class name to be applied\n   * to the <mat-icon> element.\n   *\n   * @param alias Alias for the font.\n   * @param className Class name override to be used instead of the alias.\n   */\n  registerFontClassAlias(alias: string, className: string = alias): this {\n    this._fontCssClassesByAlias.set(alias, className);\n    return this;\n  }\n\n  /**\n   * Returns the CSS class name associated with the alias by a previous call to\n   * registerFontClassAlias. If no CSS class has been associated, returns the alias unmodified.\n   */\n  classNameForFontAlias(alias: string): string {\n    return this._fontCssClassesByAlias.get(alias) || alias;\n  }\n\n  /**\n   * Sets the CSS class name to be used for icon fonts when an <mat-icon> component does not\n   * have a fontSet input value, and is not loading an icon by name or URL.\n   *\n   * @param className\n   */\n  setDefaultFontSetClass(className: string): this {\n    this._defaultFontSetClass = className;\n    return this;\n  }\n\n  /**\n   * Returns the CSS class name to be used for icon fonts when an <mat-icon> component does not\n   * have a fontSet input value, and is not loading an icon by name or URL.\n   */\n  getDefaultFontSetClass(): string {\n    return this._defaultFontSetClass;\n  }\n\n  /**\n   * Returns an Observable that produces the icon (as an `<svg>` DOM element) from the given URL.\n   * The response from the URL may be cached so this will not always cause an HTTP request, but\n   * the produced element will always be a new copy of the originally fetched icon. (That is,\n   * it will not contain any modifications made to elements previously returned).\n   *\n   * @param safeUrl URL from which to fetch the SVG icon.\n   */\n  getSvgIconFromUrl(safeUrl: SafeResourceUrl): Observable<SVGElement> {\n    let url = this._sanitizer.sanitize(SecurityContext.RESOURCE_URL, safeUrl);\n\n    if (!url) {\n      throw getMatIconFailedToSanitizeError(safeUrl);\n    }\n\n    let cachedIcon = this._cachedIconsByUrl.get(url);\n\n    if (cachedIcon) {\n      return observableOf(cloneSvg(cachedIcon));\n    }\n\n    return this._loadSvgIconFromConfig(new SvgIconConfig(safeUrl)).pipe(\n      tap(svg => this._cachedIconsByUrl.set(url!, svg)),\n      map(svg => cloneSvg(svg))\n    );\n  }\n\n  /**\n   * Returns an Observable that produces the icon (as an `<svg>` DOM element) with the given name\n   * and namespace. The icon must have been previously registered with addIcon or addIconSet;\n   * if not, the Observable will throw an error.\n   *\n   * @param name Name of the icon to be retrieved.\n   * @param namespace Namespace in which to look for the icon.\n   */\n  getNamedSvgIcon(name: string, namespace: string = ''): Observable<SVGElement> {\n    // Return (copy of) cached icon if possible.\n    const key = iconKey(namespace, name);\n    const config = this._svgIconConfigs.get(key);\n\n    if (config) {\n      return this._getSvgFromConfig(config);\n    }\n\n    // See if we have any icon sets registered for the namespace.\n    const iconSetConfigs = this._iconSetConfigs.get(namespace);\n\n    if (iconSetConfigs) {\n      return this._getSvgFromIconSetConfigs(name, iconSetConfigs);\n    }\n\n    return observableThrow(getMatIconNameNotFoundError(key));\n  }\n\n  /**\n   * Returns the cached icon for a SvgIconConfig if available, or fetches it from its URL if not.\n   */\n  private _getSvgFromConfig(config: SvgIconConfig): Observable<SVGElement> {\n    if (config.svgElement) {\n      // We already have the SVG element for this icon, return a copy.\n      return observableOf(cloneSvg(config.svgElement));\n    } else {\n      // Fetch the icon from the config's URL, cache it, and return a copy.\n      return this._loadSvgIconFromConfig(config).pipe(\n        tap(svg => config.svgElement = svg),\n        map(svg => cloneSvg(svg))\n      );\n    }\n  }\n\n  /**\n   * Attempts to find an icon with the specified name in any of the SVG icon sets.\n   * First searches the available cached icons for a nested element with a matching name, and\n   * if found copies the element to a new <svg> element. If not found, fetches all icon sets\n   * that have not been cached, and searches again after all fetches are completed.\n   * The returned Observable produces the SVG element if possible, and throws\n   * an error if no icon with the specified name can be found.\n   */\n  private _getSvgFromIconSetConfigs(name: string, iconSetConfigs: SvgIconConfig[]):\n      Observable<SVGElement> {\n    // For all the icon set SVG elements we've fetched, see if any contain an icon with the\n    // requested name.\n    const namedIcon = this._extractIconWithNameFromAnySet(name, iconSetConfigs);\n\n    if (namedIcon) {\n      // We could cache namedIcon in _svgIconConfigs, but since we have to make a copy every\n      // time anyway, there's probably not much advantage compared to just always extracting\n      // it from the icon set.\n      return observableOf(namedIcon);\n    }\n\n    // Not found in any cached icon sets. If there are icon sets with URLs that we haven't\n    // fetched, fetch them now and look for iconName in the results.\n    const iconSetFetchRequests: Observable<SVGElement | null>[] = iconSetConfigs\n      .filter(iconSetConfig => !iconSetConfig.svgElement)\n      .map(iconSetConfig => {\n        return this._loadSvgIconSetFromConfig(iconSetConfig).pipe(\n          catchError((err: any): Observable<SVGElement | null> => {\n            let url = this._sanitizer.sanitize(SecurityContext.RESOURCE_URL, iconSetConfig.url);\n\n            // Swallow errors fetching individual URLs so the combined Observable won't\n            // necessarily fail.\n            console.log(`Loading icon set URL: ${url} failed: ${err}`);\n            return observableOf(null);\n          }),\n          tap(svg => {\n            // Cache the SVG element.\n            if (svg) {\n              iconSetConfig.svgElement = svg;\n            }\n          })\n        );\n      });\n\n    // Fetch all the icon set URLs. When the requests complete, every IconSet should have a\n    // cached SVG element (unless the request failed), and we can check again for the icon.\n    return forkJoin(iconSetFetchRequests).pipe(map(() => {\n      const foundIcon = this._extractIconWithNameFromAnySet(name, iconSetConfigs);\n\n      if (!foundIcon) {\n        throw getMatIconNameNotFoundError(name);\n      }\n\n      return foundIcon;\n    }));\n  }\n\n  /**\n   * Searches the cached SVG elements for the given icon sets for a nested icon element whose \"id\"\n   * tag matches the specified name. If found, copies the nested element to a new SVG element and\n   * returns it. Returns null if no matching element is found.\n   */\n  private _extractIconWithNameFromAnySet(iconName: string, iconSetConfigs: SvgIconConfig[]):\n      SVGElement | null {\n    // Iterate backwards, so icon sets added later have precedence.\n    for (let i = iconSetConfigs.length - 1; i >= 0; i--) {\n      const config = iconSetConfigs[i];\n      if (config.svgElement) {\n        const foundIcon = this._extractSvgIconFromSet(config.svgElement, iconName);\n        if (foundIcon) {\n          return foundIcon;\n        }\n      }\n    }\n    return null;\n  }\n\n  /**\n   * Loads the content of the icon URL specified in the SvgIconConfig and creates an SVG element\n   * from it.\n   */\n  private _loadSvgIconFromConfig(config: SvgIconConfig): Observable<SVGElement> {\n    return this._fetchUrl(config.url)\n        .pipe(map(svgText => this._createSvgElementForSingleIcon(svgText)));\n  }\n\n  /**\n   * Loads the content of the icon set URL specified in the SvgIconConfig and creates an SVG element\n   * from it.\n   */\n  private _loadSvgIconSetFromConfig(config: SvgIconConfig): Observable<SVGElement> {\n    // TODO: Document that icons should only be loaded from trusted sources.\n    return this._fetchUrl(config.url).pipe(map(svgText => this._svgElementFromString(svgText)));\n  }\n\n  /**\n   * Creates a DOM element from the given SVG string, and adds default attributes.\n   */\n  private _createSvgElementForSingleIcon(responseText: string): SVGElement {\n    const svg = this._svgElementFromString(responseText);\n    this._setSvgAttributes(svg);\n    return svg;\n  }\n\n  /**\n   * Searches the cached element of the given SvgIconConfig for a nested icon element whose \"id\"\n   * tag matches the specified name. If found, copies the nested element to a new SVG element and\n   * returns it. Returns null if no matching element is found.\n   */\n  private _extractSvgIconFromSet(iconSet: SVGElement, iconName: string): SVGElement | null {\n    const iconSource = iconSet.querySelector('#' + iconName);\n\n    if (!iconSource) {\n      return null;\n    }\n\n    // Clone the element and remove the ID to prevent multiple elements from being added\n    // to the page with the same ID.\n    const iconElement = iconSource.cloneNode(true) as Element;\n    iconElement.id = '';\n\n    // If the icon node is itself an <svg> node, clone and return it directly. If not, set it as\n    // the content of a new <svg> node.\n    if (iconElement.nodeName.toLowerCase() === 'svg') {\n      return this._setSvgAttributes(iconElement as SVGElement);\n    }\n\n    // If the node is a <symbol>, it won't be rendered so we have to convert it into <svg>. Note\n    // that the same could be achieved by referring to it via <use href=\"#id\">, however the <use>\n    // tag is problematic on Firefox, because it needs to include the current page path.\n    if (iconElement.nodeName.toLowerCase() === 'symbol') {\n      return this._setSvgAttributes(this._toSvgElement(iconElement));\n    }\n\n    // createElement('SVG') doesn't work as expected; the DOM ends up with\n    // the correct nodes, but the SVG content doesn't render. Instead we\n    // have to create an empty SVG node using innerHTML and append its content.\n    // Elements created using DOMParser.parseFromString have the same problem.\n    // http://stackoverflow.com/questions/23003278/svg-innerhtml-in-firefox-can-not-display\n    const svg = this._svgElementFromString('<svg></svg>');\n    // Clone the node so we don't remove it from the parent icon set element.\n    svg.appendChild(iconElement);\n\n    return this._setSvgAttributes(svg);\n  }\n\n  /**\n   * Creates a DOM element from the given SVG string.\n   */\n  private _svgElementFromString(str: string): SVGElement {\n    if (this._document || typeof document !== 'undefined') {\n      const div = (this._document || document).createElement('DIV');\n      div.innerHTML = str;\n      const svg = div.querySelector('svg') as SVGElement;\n      if (!svg) {\n        throw Error('<svg> tag not found');\n      }\n      return svg;\n    }\n\n    throw new Error('MatIconRegistry could not resolve document.');\n  }\n\n  /**\n   * Converts an element into an SVG node by cloning all of its children.\n   */\n  private _toSvgElement(element: Element): SVGElement {\n    let svg = this._svgElementFromString('<svg></svg>');\n\n    for (let i = 0; i < element.childNodes.length; i++) {\n      if (element.childNodes[i].nodeType === this._document.ELEMENT_NODE) {\n        svg.appendChild(element.childNodes[i].cloneNode(true));\n      }\n    }\n\n    return svg;\n  }\n\n  /**\n   * Sets the default attributes for an SVG element to be used as an icon.\n   */\n  private _setSvgAttributes(svg: SVGElement): SVGElement {\n    if (!svg.getAttribute('xmlns')) {\n      svg.setAttribute('xmlns', 'http://www.w3.org/2000/svg');\n    }\n    svg.setAttribute('fit', '');\n    svg.setAttribute('height', '100%');\n    svg.setAttribute('width', '100%');\n    svg.setAttribute('preserveAspectRatio', 'xMidYMid meet');\n    svg.setAttribute('focusable', 'false'); // Disable IE11 default behavior to make SVGs focusable.\n    return svg;\n  }\n\n  /**\n   * Returns an Observable which produces the string contents of the given URL. Results may be\n   * cached, so future calls with the same URL may not cause another HTTP request.\n   */\n  private _fetchUrl(safeUrl: SafeResourceUrl): Observable<string> {\n    if (!this._httpClient) {\n      throw getMatIconNoHttpProviderError();\n    }\n\n    const url = this._sanitizer.sanitize(SecurityContext.RESOURCE_URL, safeUrl);\n\n    if (!url) {\n      throw getMatIconFailedToSanitizeError(safeUrl);\n    }\n\n    // Store in-progress fetches to avoid sending a duplicate request for a URL when there is\n    // already a request in progress for that URL. It's necessary to call share() on the\n    // Observable returned by http.get() so that multiple subscribers don't cause multiple XHRs.\n    const inProgressFetch = this._inProgressUrlFetches.get(url);\n\n    if (inProgressFetch) {\n      return inProgressFetch;\n    }\n\n    // TODO(jelbourn): for some reason, the `finally` operator \"loses\" the generic type on the\n    // Observable. Figure out why and fix it.\n    const req = this._httpClient.get(url, {responseType: 'text'}).pipe(\n      finalize(() => this._inProgressUrlFetches.delete(url)),\n      share()\n    );\n\n    this._inProgressUrlFetches.set(url, req);\n    return req;\n  }\n}\n\n/** @docs-private */\nexport function ICON_REGISTRY_PROVIDER_FACTORY(\n  parentRegistry: MatIconRegistry,\n  httpClient: HttpClient,\n  sanitizer: DomSanitizer,\n  document?: any) {\n  return parentRegistry || new MatIconRegistry(httpClient, sanitizer, document);\n}\n\n/** @docs-private */\nexport const ICON_REGISTRY_PROVIDER = {\n  // If there is already an MatIconRegistry available, use that. Otherwise, provide a new one.\n  provide: MatIconRegistry,\n  deps: [\n    [new Optional(), new SkipSelf(), MatIconRegistry],\n    [new Optional(), HttpClient],\n    DomSanitizer,\n    [new Optional(), DOCUMENT as InjectionToken<any>]\n  ],\n  useFactory: ICON_REGISTRY_PROVIDER_FACTORY\n};\n\n/** Clones an SVGElement while preserving type information. */\nfunction cloneSvg(svg: SVGElement): SVGElement {\n  return svg.cloneNode(true) as SVGElement;\n}\n\n/** Returns the cache key to use for an icon namespace and name. */\nfunction iconKey(namespace: string, name: string) {\n  return namespace + ':' + name;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {take} from 'rxjs/operators/take';\nimport {\n  Attribute,\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  Input,\n  OnChanges,\n  OnInit,\n  SimpleChanges,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {CanColor, mixinColor} from '@angular/material/core';\nimport {MatIconRegistry} from './icon-registry';\n\n\n// Boilerplate for applying mixins to MatIcon.\n/** @docs-private */\nexport class MatIconBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatIconMixinBase = mixinColor(MatIconBase);\n\n\n/**\n * Component to display an icon. It can be used in the following ways:\n *\n * - Specify the svgIcon input to load an SVG icon from a URL previously registered with the\n *   addSvgIcon, addSvgIconInNamespace, addSvgIconSet, or addSvgIconSetInNamespace methods of\n *   MatIconRegistry. If the svgIcon value contains a colon it is assumed to be in the format\n *   \"[namespace]:[name]\", if not the value will be the name of an icon in the default namespace.\n *   Examples:\n *     <mat-icon svgIcon=\"left-arrow\"></mat-icon>\n *     <mat-icon svgIcon=\"animals:cat\"></mat-icon>\n *\n * - Use a font ligature as an icon by putting the ligature text in the content of the <mat-icon>\n *   component. By default the Material icons font is used as described at\n *   http://google.github.io/material-design-icons/#icon-font-for-the-web. You can specify an\n *   alternate font by setting the fontSet input to either the CSS class to apply to use the\n *   desired font, or to an alias previously registered with MatIconRegistry.registerFontClassAlias.\n *   Examples:\n *     <mat-icon>home</mat-icon>\n *     <mat-icon fontSet=\"myfont\">sun</mat-icon>\n *\n * - Specify a font glyph to be included via CSS rules by setting the fontSet input to specify the\n *   font, and the fontIcon input to specify the icon. Typically the fontIcon will specify a\n *   CSS class which causes the glyph to be displayed via a :before selector, as in\n *   https://fortawesome.github.io/Font-Awesome/examples/\n *   Example:\n *     <mat-icon fontSet=\"fa\" fontIcon=\"alarm\"></mat-icon>\n */\n@Component({\n  moduleId: module.id,\n  template: '<ng-content></ng-content>',\n  selector: 'mat-icon',\n  exportAs: 'matIcon',\n  styleUrls: ['icon.css'],\n  inputs: ['color'],\n  host: {\n    'role': 'img',\n    'class': 'mat-icon',\n  },\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatIcon extends _MatIconMixinBase implements OnChanges, OnInit, CanColor {\n\n  /** Name of the icon in the SVG icon set. */\n  @Input() svgIcon: string;\n\n  /** Font set that the icon is a part of. */\n  @Input()\n  get fontSet(): string { return this._fontSet; }\n  set fontSet(value: string) {\n    this._fontSet = this._cleanupFontValue(value);\n  }\n  private _fontSet: string;\n\n  /** Name of an icon within a font set. */\n  @Input()\n  get fontIcon(): string { return this._fontIcon; }\n  set fontIcon(value: string) {\n    this._fontIcon = this._cleanupFontValue(value);\n  }\n  private _fontIcon: string;\n\n  private _previousFontSetClass: string;\n  private _previousFontIconClass: string;\n\n  constructor(\n      elementRef: ElementRef,\n      private _iconRegistry: MatIconRegistry,\n      @Attribute('aria-hidden') ariaHidden: string) {\n    super(elementRef);\n\n    // If the user has not explicitly set aria-hidden, mark the icon as hidden, as this is\n    // the right thing to do for the majority of icon use-cases.\n    if (!ariaHidden) {\n      elementRef.nativeElement.setAttribute('aria-hidden', 'true');\n    }\n  }\n\n  /**\n   * Splits an svgIcon binding value into its icon set and icon name components.\n   * Returns a 2-element array of [(icon set), (icon name)].\n   * The separator for the two fields is ':'. If there is no separator, an empty\n   * string is returned for the icon set and the entire value is returned for\n   * the icon name. If the argument is falsy, returns an array of two empty strings.\n   * Throws an error if the name contains two or more ':' separators.\n   * Examples:\n   *   'social:cake' -> ['social', 'cake']\n   *   'penguin' -> ['', 'penguin']\n   *   null -> ['', '']\n   *   'a:b:c' -> (throws Error)\n   */\n  private _splitIconName(iconName: string): [string, string] {\n    if (!iconName) {\n      return ['', ''];\n    }\n    const parts = iconName.split(':');\n    switch (parts.length) {\n      case 1: return ['', parts[0]]; // Use default namespace.\n      case 2: return <[string, string]>parts;\n      default: throw Error(`Invalid icon name: \"${iconName}\"`);\n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    // Only update the inline SVG icon if the inputs changed, to avoid unnecessary DOM operations.\n    if (changes.svgIcon) {\n      if (this.svgIcon) {\n        const [namespace, iconName] = this._splitIconName(this.svgIcon);\n\n        this._iconRegistry.getNamedSvgIcon(iconName, namespace).pipe(take(1)).subscribe(\n          svg => this._setSvgElement(svg),\n          (err: Error) => console.log(`Error retrieving icon: ${err.message}`)\n        );\n      } else {\n        this._clearSvgElement();\n      }\n    }\n\n    if (this._usingFontIcon()) {\n      this._updateFontIconClasses();\n    }\n  }\n\n  ngOnInit() {\n    // Update font classes because ngOnChanges won't be called if none of the inputs are present,\n    // e.g. <mat-icon>arrow</mat-icon> In this case we need to add a CSS class for the default font.\n    if (this._usingFontIcon()) {\n      this._updateFontIconClasses();\n    }\n  }\n\n  private _usingFontIcon(): boolean {\n    return !this.svgIcon;\n  }\n\n  private _setSvgElement(svg: SVGElement) {\n    this._clearSvgElement();\n    this._elementRef.nativeElement.appendChild(svg);\n  }\n\n  private _clearSvgElement() {\n    const layoutElement: HTMLElement = this._elementRef.nativeElement;\n    const childCount = layoutElement.childNodes.length;\n\n    // Remove existing child nodes and add the new SVG element. Note that we can't\n    // use innerHTML, because IE will throw if the element has a data binding.\n    for (let i = 0; i < childCount; i++) {\n      layoutElement.removeChild(layoutElement.childNodes[i]);\n    }\n  }\n\n  private _updateFontIconClasses() {\n    if (!this._usingFontIcon()) {\n      return;\n    }\n\n    const elem: HTMLElement = this._elementRef.nativeElement;\n    const fontSetClass = this.fontSet ?\n        this._iconRegistry.classNameForFontAlias(this.fontSet) :\n        this._iconRegistry.getDefaultFontSetClass();\n\n    if (fontSetClass != this._previousFontSetClass) {\n      if (this._previousFontSetClass) {\n        elem.classList.remove(this._previousFontSetClass);\n      }\n      if (fontSetClass) {\n        elem.classList.add(fontSetClass);\n      }\n      this._previousFontSetClass = fontSetClass;\n    }\n\n    if (this.fontIcon != this._previousFontIconClass) {\n      if (this._previousFontIconClass) {\n        elem.classList.remove(this._previousFontIconClass);\n      }\n      if (this.fontIcon) {\n        elem.classList.add(this.fontIcon);\n      }\n      this._previousFontIconClass = this.fontIcon;\n    }\n  }\n\n  /**\n   * Cleans up a value to be used as a fontIcon or fontSet.\n   * Since the value ends up being assigned as a CSS class, we\n   * have to trim the value and omit space-separated values.\n   */\n  private _cleanupFontValue(value: string) {\n    return typeof value === 'string' ? value.trim().split(' ')[0] : value;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatIcon} from './icon';\nimport {ICON_REGISTRY_PROVIDER} from './icon-registry';\n\n\n@NgModule({\n  imports: [MatCommonModule],\n  exports: [MatIcon, MatCommonModule],\n  declarations: [MatIcon],\n  providers: [ICON_REGISTRY_PROVIDER],\n})\nexport class MatIconModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Directive,\n  ElementRef,\n  Input,\n  AfterViewInit,\n  DoCheck,\n  OnDestroy,\n  NgZone,\n} from '@angular/core';\nimport {Platform} from '@angular/cdk/platform';\nimport {fromEvent} from 'rxjs/observable/fromEvent';\nimport {auditTime} from 'rxjs/operators/auditTime';\nimport {takeUntil} from 'rxjs/operators/takeUntil';\nimport {Subject} from 'rxjs/Subject';\n\n\n/**\n * Directive to automatically resize a textarea to fit its content.\n */\n@Directive({\n  selector: `textarea[mat-autosize], textarea[matTextareaAutosize]`,\n  exportAs: 'matTextareaAutosize',\n  host: {\n    'class': 'mat-autosize',\n    // Textarea elements that have the directive applied should have a single row by default.\n    // Browsers normally show two rows by default and therefore this limits the minRows binding.\n    'rows': '1',\n  },\n})\nexport class MatTextareaAutosize implements AfterViewInit, DoCheck, OnDestroy {\n  /** Keep track of the previous textarea value to avoid resizing when the value hasn't changed. */\n  private _previousValue: string;\n  private _destroyed = new Subject<void>();\n\n  private _minRows: number;\n  private _maxRows: number;\n\n  /** Minimum amount of rows in the textarea. */\n  @Input('matAutosizeMinRows')\n  set minRows(value: number) {\n    this._minRows = value;\n    this._setMinHeight();\n  }\n  get minRows(): number { return this._minRows; }\n\n  /** Maximum amount of rows in the textarea. */\n  @Input('matAutosizeMaxRows')\n  get maxRows(): number { return this._maxRows; }\n  set maxRows(value: number) {\n    this._maxRows = value;\n    this._setMaxHeight();\n  }\n\n  /** Cached height of a textarea with a single row. */\n  private _cachedLineHeight: number;\n\n  constructor(\n    private _elementRef: ElementRef,\n    private _platform: Platform,\n    private _ngZone?: NgZone) {}\n\n  // TODO(crisbeto): make the `_ngZone` a required param in the next major version.\n\n  /** Sets the minimum height of the textarea as determined by minRows. */\n  _setMinHeight(): void {\n    const minHeight = this.minRows && this._cachedLineHeight ?\n        `${this.minRows * this._cachedLineHeight}px` : null;\n\n    if (minHeight)  {\n      this._setTextareaStyle('minHeight', minHeight);\n    }\n  }\n\n  /** Sets the maximum height of the textarea as determined by maxRows. */\n  _setMaxHeight(): void {\n    const maxHeight = this.maxRows && this._cachedLineHeight ?\n        `${this.maxRows * this._cachedLineHeight}px` : null;\n\n    if (maxHeight) {\n      this._setTextareaStyle('maxHeight', maxHeight);\n    }\n  }\n\n  ngAfterViewInit() {\n    if (this._platform.isBrowser) {\n      this.resizeToFitContent();\n\n      if (this._ngZone) {\n        this._ngZone.runOutsideAngular(() => {\n          fromEvent(window, 'resize')\n            .pipe(auditTime(16), takeUntil(this._destroyed))\n            .subscribe(() => this.resizeToFitContent(true));\n        });\n      }\n    }\n  }\n\n  ngOnDestroy() {\n    this._destroyed.next();\n    this._destroyed.complete();\n  }\n\n  /** Sets a style property on the textarea element. */\n  private _setTextareaStyle(property: string, value: string): void {\n    const textarea = this._elementRef.nativeElement as HTMLTextAreaElement;\n    textarea.style[property] = value;\n  }\n\n  /**\n   * Cache the height of a single-row textarea if it has not already been cached.\n   *\n   * We need to know how large a single \"row\" of a textarea is in order to apply minRows and\n   * maxRows. For the initial version, we will assume that the height of a single line in the\n   * textarea does not ever change.\n   */\n  private _cacheTextareaLineHeight(): void {\n    if (this._cachedLineHeight) {\n      return;\n    }\n\n    let textarea = this._elementRef.nativeElement as HTMLTextAreaElement;\n\n    // Use a clone element because we have to override some styles.\n    let textareaClone = textarea.cloneNode(false) as HTMLTextAreaElement;\n    textareaClone.rows = 1;\n\n    // Use `position: absolute` so that this doesn't cause a browser layout and use\n    // `visibility: hidden` so that nothing is rendered. Clear any other styles that\n    // would affect the height.\n    textareaClone.style.position = 'absolute';\n    textareaClone.style.visibility = 'hidden';\n    textareaClone.style.border = 'none';\n    textareaClone.style.padding = '0';\n    textareaClone.style.height = '';\n    textareaClone.style.minHeight = '';\n    textareaClone.style.maxHeight = '';\n\n    // In Firefox it happens that textarea elements are always bigger than the specified amount\n    // of rows. This is because Firefox tries to add extra space for the horizontal scrollbar.\n    // As a workaround that removes the extra space for the scrollbar, we can just set overflow\n    // to hidden. This ensures that there is no invalid calculation of the line height.\n    // See Firefox bug report: https://bugzilla.mozilla.org/show_bug.cgi?id=33654\n    textareaClone.style.overflow = 'hidden';\n\n    textarea.parentNode!.appendChild(textareaClone);\n    this._cachedLineHeight = textareaClone.clientHeight;\n    textarea.parentNode!.removeChild(textareaClone);\n\n    // Min and max heights have to be re-calculated if the cached line height changes\n    this._setMinHeight();\n    this._setMaxHeight();\n  }\n\n  ngDoCheck() {\n    if (this._platform.isBrowser) {\n      this.resizeToFitContent();\n    }\n  }\n\n  /**\n   * Resize the textarea to fit its content.\n   * @param force Whether to force a height recalculation. By default the height will be\n   *    recalculated only if the value changed since the last call.\n   */\n  resizeToFitContent(force: boolean = false) {\n    this._cacheTextareaLineHeight();\n\n    // If we haven't determined the line-height yet, we know we're still hidden and there's no point\n    // in checking the height of the textarea.\n    if (!this._cachedLineHeight) {\n      return;\n    }\n\n    const textarea = this._elementRef.nativeElement as HTMLTextAreaElement;\n    const value = textarea.value;\n\n    // Only resize of the value changed since these calculations can be expensive.\n    if (value === this._previousValue && !force) {\n      return;\n    }\n\n    const placeholderText = textarea.placeholder;\n\n    // Reset the textarea height to auto in order to shrink back to its default size.\n    // Also temporarily force overflow:hidden, so scroll bars do not interfere with calculations.\n    // Long placeholders that are wider than the textarea width may lead to a bigger scrollHeight\n    // value. To ensure that the scrollHeight is not bigger than the content, the placeholders\n    // need to be removed temporarily.\n    textarea.style.height = 'auto';\n    textarea.style.overflow = 'hidden';\n    textarea.placeholder = '';\n\n    // Use the scrollHeight to know how large the textarea *would* be if fit its entire value.\n    textarea.style.height = `${textarea.scrollHeight}px`;\n    textarea.style.overflow = '';\n    textarea.placeholder = placeholderText;\n\n    this._previousValue = value;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {InjectionToken} from '@angular/core';\n\n\n/**\n * This token is used to inject the object whose value should be set into `MatInput`. If none is\n * provided, the native `HTMLInputElement` is used. Directives like `MatDatepickerInput` can provide\n * themselves for this token, in order to make `MatInput` delegate the getting and setting of the\n * value to them.\n */\nexport const MAT_INPUT_VALUE_ACCESSOR =\n    new InjectionToken<{value: any}>('MAT_INPUT_VALUE_ACCESSOR');\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {getSupportedInputTypes, Platform} from '@angular/cdk/platform';\nimport {\n  Directive,\n  DoCheck,\n  ElementRef,\n  Inject,\n  Input,\n  OnChanges,\n  OnDestroy,\n  Optional,\n  Self,\n} from '@angular/core';\nimport {FormGroupDirective, NgControl, NgForm} from '@angular/forms';\nimport {ErrorStateMatcher, mixinErrorState, CanUpdateErrorState} from '@angular/material/core';\nimport {MatFormFieldControl} from '@angular/material/form-field';\nimport {Subject} from 'rxjs/Subject';\nimport {getMatInputUnsupportedTypeError} from './input-errors';\nimport {MAT_INPUT_VALUE_ACCESSOR} from './input-value-accessor';\n\n\n// Invalid input type. Using one of these will throw an MatInputUnsupportedTypeError.\nconst MAT_INPUT_INVALID_TYPES = [\n  'button',\n  'checkbox',\n  'file',\n  'hidden',\n  'image',\n  'radio',\n  'range',\n  'reset',\n  'submit'\n];\n\nlet nextUniqueId = 0;\n\n// Boilerplate for applying mixins to MatInput.\n/** @docs-private */\nexport class MatInputBase {\n  constructor(public _defaultErrorStateMatcher: ErrorStateMatcher,\n              public _parentForm: NgForm,\n              public _parentFormGroup: FormGroupDirective,\n              public ngControl: NgControl) {}\n}\nexport const _MatInputMixinBase = mixinErrorState(MatInputBase);\n\n/** Directive that allows a native input to work inside a `MatFormField`. */\n@Directive({\n  selector: `input[matInput], textarea[matInput]`,\n  exportAs: 'matInput',\n  host: {\n    'class': 'mat-input-element mat-form-field-autofill-control',\n    '[class.mat-input-server]': '_isServer',\n    // Native input properties that are overwritten by Angular inputs need to be synced with\n    // the native input element. Otherwise property bindings for those don't work.\n    '[attr.id]': 'id',\n    '[placeholder]': 'placeholder',\n    '[disabled]': 'disabled',\n    '[required]': 'required',\n    '[readonly]': 'readonly',\n    '[attr.aria-describedby]': '_ariaDescribedby || null',\n    '[attr.aria-invalid]': 'errorState',\n    '[attr.aria-required]': 'required.toString()',\n    '(blur)': '_focusChanged(false)',\n    '(focus)': '_focusChanged(true)',\n    '(input)': '_onInput()',\n  },\n  providers: [{provide: MatFormFieldControl, useExisting: MatInput}],\n})\nexport class MatInput extends _MatInputMixinBase implements MatFormFieldControl<any>, OnChanges,\n    OnDestroy, DoCheck, CanUpdateErrorState {\n  /** Variables used as cache for getters and setters. */\n  protected _type = 'text';\n  protected _disabled = false;\n  protected _required = false;\n  protected _id: string;\n  protected _uid = `mat-input-${nextUniqueId++}`;\n  protected _previousNativeValue: any;\n  private _readonly = false;\n  private _inputValueAccessor: {value: any};\n\n  /** Whether the input is focused. */\n  focused = false;\n\n  /** The aria-describedby attribute on the input for improved a11y. */\n  _ariaDescribedby: string;\n\n  /** Whether the component is being rendered on the server. */\n  _isServer = false;\n\n  /**\n   * Stream that emits whenever the state of the input changes such that the wrapping `MatFormField`\n   * needs to run change detection.\n   */\n  stateChanges = new Subject<void>();\n\n  /** A name for this control that can be used by `mat-form-field`. */\n  controlType = 'mat-input';\n\n  /** Whether the element is disabled. */\n  @Input()\n  get disabled(): boolean {\n    if (this.ngControl && this.ngControl.disabled !== null) {\n      return this.ngControl.disabled;\n    }\n    return this._disabled;\n  }\n  set disabled(value: boolean) {\n    this._disabled = coerceBooleanProperty(value);\n\n    // Browsers may not fire the blur event if the input is disabled too quickly.\n    // Reset from here to ensure that the element doesn't become stuck.\n    if (this.focused) {\n      this.focused = false;\n      this.stateChanges.next();\n    }\n  }\n\n  /** Unique id of the element. */\n  @Input()\n  get id(): string { return this._id; }\n  set id(value: string) { this._id = value || this._uid; }\n\n  /** Placeholder attribute of the element. */\n  @Input() placeholder: string = '';\n\n  /** Whether the element is required. */\n  @Input()\n  get required(): boolean { return this._required; }\n  set required(value: boolean) { this._required = coerceBooleanProperty(value); }\n\n  /** Input type of the element. */\n  @Input()\n  get type(): string { return this._type; }\n  set type(value: string) {\n    this._type = value || 'text';\n    this._validateType();\n\n    // When using Angular inputs, developers are no longer able to set the properties on the native\n    // input element. To ensure that bindings for `type` work, we need to sync the setter\n    // with the native property. Textarea elements don't support the type property or attribute.\n    if (!this._isTextarea() && getSupportedInputTypes().has(this._type)) {\n      this._elementRef.nativeElement.type = this._type;\n    }\n  }\n\n  /** An object used to control when error messages are shown. */\n  @Input() errorStateMatcher: ErrorStateMatcher;\n\n  /** The input element's value. */\n  @Input()\n  get value(): string { return this._inputValueAccessor.value; }\n  set value(value: string) {\n    if (value !== this.value) {\n      this._inputValueAccessor.value = value;\n      this.stateChanges.next();\n    }\n  }\n\n  /** Whether the element is readonly. */\n  @Input()\n  get readonly(): boolean { return this._readonly; }\n  set readonly(value: boolean) { this._readonly = coerceBooleanProperty(value); }\n\n  protected _neverEmptyInputTypes = [\n    'date',\n    'datetime',\n    'datetime-local',\n    'month',\n    'time',\n    'week'\n  ].filter(t => getSupportedInputTypes().has(t));\n\n  constructor(protected _elementRef: ElementRef,\n              protected _platform: Platform,\n              @Optional() @Self() public ngControl: NgControl,\n              @Optional() _parentForm: NgForm,\n              @Optional() _parentFormGroup: FormGroupDirective,\n              _defaultErrorStateMatcher: ErrorStateMatcher,\n              @Optional() @Self() @Inject(MAT_INPUT_VALUE_ACCESSOR) inputValueAccessor: any) {\n    super(_defaultErrorStateMatcher, _parentForm, _parentFormGroup, ngControl);\n    // If no input value accessor was explicitly specified, use the element as the input value\n    // accessor.\n    this._inputValueAccessor = inputValueAccessor || this._elementRef.nativeElement;\n\n    this._previousNativeValue = this.value;\n\n    // Force setter to be called in case id was not specified.\n    this.id = this.id;\n\n    // On some versions of iOS the caret gets stuck in the wrong place when holding down the delete\n    // key. In order to get around this we need to \"jiggle\" the caret loose. Since this bug only\n    // exists on iOS, we only bother to install the listener on iOS.\n    if (_platform.IOS) {\n      _elementRef.nativeElement.addEventListener('keyup', (event: Event) => {\n        let el = event.target as HTMLInputElement;\n        if (!el.value && !el.selectionStart && !el.selectionEnd) {\n          // Note: Just setting `0, 0` doesn't fix the issue. Setting `1, 1` fixes it for the first\n          // time that you type text and then hold delete. Toggling to `1, 1` and then back to\n          // `0, 0` seems to completely fix it.\n          el.setSelectionRange(1, 1);\n          el.setSelectionRange(0, 0);\n        }\n      });\n    }\n\n    this._isServer = !this._platform.isBrowser;\n  }\n\n  ngOnChanges() {\n    this.stateChanges.next();\n  }\n\n  ngOnDestroy() {\n    this.stateChanges.complete();\n  }\n\n  ngDoCheck() {\n    if (this.ngControl) {\n      // We need to re-evaluate this on every change detection cycle, because there are some\n      // error triggers that we can't subscribe to (e.g. parent form submissions). This means\n      // that whatever logic is in here has to be super lean or we risk destroying the performance.\n      this.updateErrorState();\n    } else {\n      // When the input isn't used together with `@angular/forms`, we need to check manually for\n      // changes to the native `value` property in order to update the floating label.\n      this._dirtyCheckNativeValue();\n    }\n  }\n\n  focus() { this._elementRef.nativeElement.focus(); }\n\n  /** Callback for the cases where the focused state of the input changes. */\n  _focusChanged(isFocused: boolean) {\n    if (isFocused !== this.focused && !this.readonly) {\n      this.focused = isFocused;\n      this.stateChanges.next();\n    }\n  }\n\n  _onInput() {\n    // This is a noop function and is used to let Angular know whenever the value changes.\n    // Angular will run a new change detection each time the `input` event has been dispatched.\n    // It's necessary that Angular recognizes the value change, because when floatingLabel\n    // is set to false and Angular forms aren't used, the placeholder won't recognize the\n    // value changes and will not disappear.\n    // Listening to the input event wouldn't be necessary when the input is using the\n    // FormsModule or ReactiveFormsModule, because Angular forms also listens to input events.\n  }\n\n  /** Does some manual dirty checking on the native input `value` property. */\n  protected _dirtyCheckNativeValue() {\n    const newValue = this.value;\n\n    if (this._previousNativeValue !== newValue) {\n      this._previousNativeValue = newValue;\n      this.stateChanges.next();\n    }\n  }\n\n  /** Make sure the input is a supported type. */\n  protected _validateType() {\n    if (MAT_INPUT_INVALID_TYPES.indexOf(this._type) > -1) {\n      throw getMatInputUnsupportedTypeError(this._type);\n    }\n  }\n\n  /** Checks whether the input type is one of the types that are never empty. */\n  protected _isNeverEmpty() {\n    return this._neverEmptyInputTypes.indexOf(this._type) > -1;\n  }\n\n  /** Checks whether the input is invalid based on the native validation. */\n  protected _isBadInput() {\n    // The `validity` property won't be present on platform-server.\n    let validity = (this._elementRef.nativeElement as HTMLInputElement).validity;\n    return validity && validity.badInput;\n  }\n\n  /** Determines if the component host is a textarea. If not recognizable it returns false. */\n  protected _isTextarea() {\n    let nativeElement = this._elementRef.nativeElement;\n\n    // In Universal, we don't have access to `nodeName`, but the same can be achieved with `name`.\n    // Note that this shouldn't be necessary once Angular switches to an API that resembles the\n    // DOM closer.\n    let nodeName = this._platform.isBrowser ? nativeElement.nodeName : nativeElement.name;\n    return nodeName ? nodeName.toLowerCase() === 'textarea' : false;\n  }\n\n  // Implemented as part of MatFormFieldControl.\n  get empty(): boolean {\n    return !this._isNeverEmpty() && !this._elementRef.nativeElement.value && !this._isBadInput();\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  get shouldLabelFloat(): boolean { return this.focused || !this.empty; }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  setDescribedByIds(ids: string[]) { this._ariaDescribedby = ids.join(' '); }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  onContainerClick() { this.focus(); }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {PlatformModule} from '@angular/cdk/platform';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatFormFieldModule} from '@angular/material/form-field';\nimport {MatTextareaAutosize} from './autosize';\nimport {MatInput} from './input';\nimport {ErrorStateMatcher} from '@angular/material/core';\n\n\n@NgModule({\n  declarations: [\n    MatInput,\n    MatTextareaAutosize,\n  ],\n  imports: [\n    CommonModule,\n    MatFormFieldModule,\n    PlatformModule,\n  ],\n  exports: [\n    // We re-export the `MatFormFieldModule` since `MatInput` will almost always\n    // be used together with `MatFormField`.\n    MatFormFieldModule,\n    MatInput,\n    MatTextareaAutosize,\n  ],\n  providers: [ErrorStateMatcher],\n})\nexport class MatInputModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable} from '@angular/core';\nimport {Subject} from 'rxjs/Subject';\n\n\n/** Datepicker data that requires internationalization. */\n@Injectable()\nexport class MatDatepickerIntl {\n  /**\n   * Stream that emits whenever the labels here are changed. Use this to notify\n   * components if the labels have changed after initialization.\n   */\n  changes: Subject<void> = new Subject<void>();\n\n  /** A label for the calendar popup (used by screen readers). */\n  calendarLabel = 'Calendar';\n\n  /** A label for the button used to open the calendar popup (used by screen readers). */\n  openCalendarLabel = 'Open calendar';\n\n  /** A label for the previous month button (used by screen readers). */\n  prevMonthLabel = 'Previous month';\n\n  /** A label for the next month button (used by screen readers). */\n  nextMonthLabel = 'Next month';\n\n  /** A label for the previous year button (used by screen readers). */\n  prevYearLabel = 'Previous year';\n\n  /** A label for the next year button (used by screen readers). */\n  nextYearLabel = 'Next year';\n\n  /** A label for the previous multi-year button (used by screen readers). */\n  prevMultiYearLabel = 'Previous 20 years';\n\n  /** A label for the next multi-year button (used by screen readers). */\n  nextMultiYearLabel = 'Next 20 years';\n\n  /** A label for the 'switch to month view' button (used by screen readers). */\n  switchToMonthViewLabel = 'Choose date';\n\n  /** A label for the 'switch to year view' button (used by screen readers). */\n  switchToMultiYearViewLabel = 'Choose month and year';\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  EventEmitter,\n  Input,\n  Output,\n  ViewEncapsulation\n} from '@angular/core';\n\n\n/**\n * An internal class that represents the data corresponding to a single calendar cell.\n * @docs-private\n */\nexport class MatCalendarCell {\n  constructor(public value: number,\n              public displayValue: string,\n              public ariaLabel: string,\n              public enabled: boolean) {}\n}\n\n\n/**\n * An internal component used to display calendar data in a table.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: '[mat-calendar-body]',\n  templateUrl: 'calendar-body.html',\n  styleUrls: ['calendar-body.css'],\n  host: {\n    'class': 'mat-calendar-body',\n    'role': 'grid',\n    'attr.aria-readonly': 'true'\n  },\n  exportAs: 'matCalendarBody',\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatCalendarBody {\n  /** The label for the table. (e.g. \"Jan 2017\"). */\n  @Input() label: string;\n\n  /** The cells to display in the table. */\n  @Input() rows: MatCalendarCell[][];\n\n  /** The value in the table that corresponds to today. */\n  @Input() todayValue: number;\n\n  /** The value in the table that is currently selected. */\n  @Input() selectedValue: number;\n\n  /** The minimum number of free cells needed to fit the label in the first row. */\n  @Input() labelMinRequiredCells: number;\n\n  /** The number of columns in the table. */\n  @Input() numCols = 7;\n\n  /** Whether to allow selection of disabled cells. */\n  @Input() allowDisabledSelection = false;\n\n  /** The cell number of the active cell in the table. */\n  @Input() activeCell = 0;\n\n  /**\n   * The aspect ratio (width / height) to use for the cells in the table. This aspect ratio will be\n   * maintained even as the table resizes.\n   */\n  @Input() cellAspectRatio = 1;\n\n  /** Emits when a new value is selected. */\n  @Output() selectedValueChange = new EventEmitter<number>();\n\n  _cellClicked(cell: MatCalendarCell): void {\n    if (!this.allowDisabledSelection && !cell.enabled) {\n      return;\n    }\n    this.selectedValueChange.emit(cell.value);\n  }\n\n  /** The number of blank cells to put at the beginning for the first row. */\n  get _firstRowOffset(): number {\n    return this.rows && this.rows.length && this.rows[0].length ?\n        this.numCols - this.rows[0].length : 0;\n  }\n\n  _isActiveCell(rowIndex: number, colIndex: number): boolean {\n    let cellNumber = rowIndex * this.numCols + colIndex;\n\n    // Account for the fact that the first row may not have as many cells.\n    if (rowIndex) {\n      cellNumber -= this._firstRowOffset;\n    }\n\n    return cellNumber == this.activeCell;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor, FocusOrigin} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  AfterViewInit,\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  OnDestroy,\n  Optional,\n  Output,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {\n  CanColor,\n  CanDisable,\n  CanDisableRipple,\n  HasTabIndex,\n  MatRipple,\n  mixinColor,\n  mixinDisabled,\n  mixinDisableRipple,\n  mixinTabIndex,\n  RippleConfig,\n  RippleRef,\n} from '@angular/material/core';\nimport {MAT_CHECKBOX_CLICK_ACTION, MatCheckboxClickAction} from './checkbox-config';\n\n\n// Increasing integer for generating unique ids for checkbox components.\nlet nextUniqueId = 0;\n\n/**\n * Provider Expression that allows mat-checkbox to register as a ControlValueAccessor.\n * This allows it to support [(ngModel)].\n * @docs-private\n */\nexport const MAT_CHECKBOX_CONTROL_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatCheckbox),\n  multi: true\n};\n\n/**\n * Represents the different states that require custom transitions between them.\n * @docs-private\n */\nexport enum TransitionCheckState {\n  /** The initial state of the component before any user interaction. */\n  Init,\n  /** The state representing the component when it's becoming checked. */\n  Checked,\n  /** The state representing the component when it's becoming unchecked. */\n  Unchecked,\n  /** The state representing the component when it's becoming indeterminate. */\n  Indeterminate\n}\n\n/** Change event object emitted by MatCheckbox. */\nexport class MatCheckboxChange {\n  /** The source MatCheckbox of the event. */\n  source: MatCheckbox;\n  /** The new `checked` value of the checkbox. */\n  checked: boolean;\n}\n\n// Boilerplate for applying mixins to MatCheckbox.\n/** @docs-private */\nexport class MatCheckboxBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatCheckboxMixinBase =\n  mixinTabIndex(mixinColor(mixinDisableRipple(mixinDisabled(MatCheckboxBase)), 'accent'));\n\n\n/**\n * A material design checkbox component. Supports all of the functionality of an HTML5 checkbox,\n * and exposes a similar API. A MatCheckbox can be either checked, unchecked, indeterminate, or\n * disabled. Note that all additional accessibility attributes are taken care of by the component,\n * so there is no need to provide them yourself. However, if you want to omit a label and still\n * have the checkbox be accessible, you may supply an [aria-label] input.\n * See: https://www.google.com/design/spec/components/selection-controls.html\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-checkbox',\n  templateUrl: 'checkbox.html',\n  styleUrls: ['checkbox.css'],\n  exportAs: 'matCheckbox',\n  host: {\n    'class': 'mat-checkbox',\n    '[id]': 'id',\n    '[class.mat-checkbox-indeterminate]': 'indeterminate',\n    '[class.mat-checkbox-checked]': 'checked',\n    '[class.mat-checkbox-disabled]': 'disabled',\n    '[class.mat-checkbox-label-before]': 'labelPosition == \"before\"',\n  },\n  providers: [MAT_CHECKBOX_CONTROL_VALUE_ACCESSOR],\n  inputs: ['disabled', 'disableRipple', 'color', 'tabIndex'],\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class MatCheckbox extends _MatCheckboxMixinBase implements ControlValueAccessor,\n    AfterViewInit, OnDestroy, CanColor, CanDisable, HasTabIndex, CanDisableRipple {\n\n  /**\n   * Attached to the aria-label attribute of the host element. In most cases, arial-labelledby will\n   * take precedence so this may be omitted.\n   */\n  @Input('aria-label') ariaLabel: string = '';\n\n  /**\n   * Users can specify the `aria-labelledby` attribute which will be forwarded to the input element\n   */\n  @Input('aria-labelledby') ariaLabelledby: string | null = null;\n\n  private _uniqueId: string = `mat-checkbox-${++nextUniqueId}`;\n\n  /** A unique id for the checkbox input. If none is supplied, it will be auto-generated. */\n  @Input() id: string = this._uniqueId;\n\n  /** Returns the unique id for the visual hidden input. */\n  get inputId(): string { return `${this.id || this._uniqueId}-input`; }\n\n  private _required: boolean;\n\n  /** Whether the checkbox is required. */\n  @Input()\n  get required(): boolean { return this._required; }\n  set required(value) { this._required = coerceBooleanProperty(value); }\n\n  /**\n   * Whether or not the checkbox should appear before or after the label.\n   * @deprecated\n   */\n  @Input()\n  get align(): 'start' | 'end' {\n    // align refers to the checkbox relative to the label, while labelPosition refers to the\n    // label relative to the checkbox. As such, they are inverted.\n    return this.labelPosition == 'after' ? 'start' : 'end';\n  }\n  set align(v) {\n    this.labelPosition = (v == 'start') ? 'after' : 'before';\n  }\n\n  /** Whether the label should appear after or before the checkbox. Defaults to 'after' */\n  @Input() labelPosition: 'before' | 'after' = 'after';\n\n  /** Name value will be applied to the input element if present */\n  @Input() name: string | null = null;\n\n  /** Event emitted when the checkbox's `checked` value changes. */\n  @Output() change: EventEmitter<MatCheckboxChange> = new EventEmitter<MatCheckboxChange>();\n\n  /** Event emitted when the checkbox's `indeterminate` value changes. */\n  @Output() indeterminateChange: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n  /** The value attribute of the native input element */\n  @Input() value: string;\n\n  /** The native `<input type=\"checkbox\"> element */\n  @ViewChild('input') _inputElement: ElementRef;\n\n  /** Called when the checkbox is blurred. Needed to properly implement ControlValueAccessor. */\n  @ViewChild(MatRipple) _ripple: MatRipple;\n\n  /** Ripple configuration for the mouse ripples and focus indicators. */\n  _rippleConfig: RippleConfig = {centered: true, radius: 25, speedFactor: 1.5};\n\n  /**\n   * Called when the checkbox is blurred. Needed to properly implement ControlValueAccessor.\n   * @docs-private\n   */\n  onTouched: () => any = () => {};\n\n  private _currentAnimationClass: string = '';\n\n  private _currentCheckState: TransitionCheckState = TransitionCheckState.Init;\n\n  private _checked: boolean = false;\n\n  private _indeterminate: boolean = false;\n\n  private _controlValueAccessorChangeFn: (value: any) => void = () => {};\n\n  /** Reference to the focused state ripple. */\n  private _focusRipple: RippleRef | null;\n\n  constructor(elementRef: ElementRef,\n              private _changeDetectorRef: ChangeDetectorRef,\n              private _focusMonitor: FocusMonitor,\n              @Attribute('tabindex') tabIndex: string,\n              @Optional() @Inject(MAT_CHECKBOX_CLICK_ACTION)\n                  private _clickAction: MatCheckboxClickAction) {\n    super(elementRef);\n\n    this.tabIndex = parseInt(tabIndex) || 0;\n  }\n\n  ngAfterViewInit() {\n    this._focusMonitor\n      .monitor(this._inputElement.nativeElement)\n      .subscribe(focusOrigin => this._onInputFocusChange(focusOrigin));\n  }\n\n  ngOnDestroy() {\n    this._focusMonitor.stopMonitoring(this._inputElement.nativeElement);\n  }\n\n  /**\n   * Whether the checkbox is checked.\n   */\n  @Input()\n  get checked() { return this._checked; }\n  set checked(checked: boolean) {\n    if (checked != this.checked) {\n      this._checked = checked;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  /**\n   * Whether the checkbox is indeterminate. This is also known as \"mixed\" mode and can be used to\n   * represent a checkbox with three states, e.g. a checkbox that represents a nested list of\n   * checkable items. Note that whenever checkbox is manually clicked, indeterminate is immediately\n   * set to false.\n   */\n  @Input()\n  get indeterminate() { return this._indeterminate; }\n  set indeterminate(indeterminate: boolean) {\n    let changed =  indeterminate != this._indeterminate;\n    this._indeterminate = indeterminate;\n\n    if (changed) {\n      if (this._indeterminate) {\n        this._transitionCheckState(TransitionCheckState.Indeterminate);\n      } else {\n        this._transitionCheckState(\n          this.checked ? TransitionCheckState.Checked : TransitionCheckState.Unchecked);\n      }\n      this.indeterminateChange.emit(this._indeterminate);\n    }\n  }\n\n  _isRippleDisabled() {\n    return this.disableRipple || this.disabled;\n  }\n\n  /** Method being called whenever the label text changes. */\n  _onLabelTextChange() {\n    // This method is getting called whenever the label of the checkbox changes.\n    // Since the checkbox uses the OnPush strategy we need to notify it about the change\n    // that has been recognized by the cdkObserveContent directive.\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /**\n   * Sets the model value. Implemented as part of ControlValueAccessor.\n   * @param value Value to be set to the model.\n   */\n  writeValue(value: any) {\n    this.checked = !!value;\n  }\n\n  /**\n   * Registers a callback to be triggered when the value has changed.\n   * Implemented as part of ControlValueAccessor.\n   * @param fn Function to be called on change.\n   */\n  registerOnChange(fn: (value: any) => void) {\n    this._controlValueAccessorChangeFn = fn;\n  }\n\n  /**\n   * Registers a callback to be triggered when the control has been touched.\n   * Implemented as part of ControlValueAccessor.\n   * @param fn Callback to be triggered when the checkbox is touched.\n   */\n  registerOnTouched(fn: any) {\n    this.onTouched = fn;\n  }\n\n  /**\n   * Sets the checkbox's disabled state. Implemented as a part of ControlValueAccessor.\n   * @param isDisabled Whether the checkbox should be disabled.\n   */\n  setDisabledState(isDisabled: boolean) {\n    this.disabled = isDisabled;\n    this._changeDetectorRef.markForCheck();\n  }\n\n  _getAriaChecked(): 'true' | 'false' | 'mixed' {\n    return this.checked ? 'true' : (this.indeterminate ? 'mixed' : 'false');\n  }\n\n  private _transitionCheckState(newState: TransitionCheckState) {\n    let oldState = this._currentCheckState;\n    let element: HTMLElement = this._elementRef.nativeElement;\n\n    if (oldState === newState) {\n      return;\n    }\n    if (this._currentAnimationClass.length > 0) {\n      element.classList.remove(this._currentAnimationClass);\n    }\n\n    this._currentAnimationClass = this._getAnimationClassForCheckStateTransition(\n        oldState, newState);\n    this._currentCheckState = newState;\n\n    if (this._currentAnimationClass.length > 0) {\n      element.classList.add(this._currentAnimationClass);\n    }\n  }\n\n  private _emitChangeEvent() {\n    let event = new MatCheckboxChange();\n    event.source = this;\n    event.checked = this.checked;\n\n    this._controlValueAccessorChangeFn(this.checked);\n    this.change.emit(event);\n  }\n\n  /** Function is called whenever the focus changes for the input element. */\n  private _onInputFocusChange(focusOrigin: FocusOrigin) {\n    if (!this._focusRipple && focusOrigin === 'keyboard') {\n      this._focusRipple = this._ripple.launch(0, 0, {persistent: true, ...this._rippleConfig});\n    } else if (!focusOrigin) {\n      this._removeFocusRipple();\n      this.onTouched();\n    }\n  }\n\n  /** Toggles the `checked` state of the checkbox. */\n  toggle(): void {\n    this.checked = !this.checked;\n  }\n\n  /**\n   * Event handler for checkbox input element.\n   * Toggles checked state if element is not disabled.\n   * Do not toggle on (change) event since IE doesn't fire change event when\n   *   indeterminate checkbox is clicked.\n   * @param event\n   */\n  _onInputClick(event: Event) {\n    // We have to stop propagation for click events on the visual hidden input element.\n    // By default, when a user clicks on a label element, a generated click event will be\n    // dispatched on the associated input element. Since we are using a label element as our\n    // root container, the click event on the `checkbox` will be executed twice.\n    // The real click event will bubble up, and the generated click event also tries to bubble up.\n    // This will lead to multiple click events.\n    // Preventing bubbling for the second event will solve that issue.\n    event.stopPropagation();\n\n    // If resetIndeterminate is false, and the current state is indeterminate, do nothing on click\n    if (!this.disabled && this._clickAction !== 'noop') {\n      // When user manually click on the checkbox, `indeterminate` is set to false.\n      if (this.indeterminate && this._clickAction !== 'check') {\n\n        Promise.resolve().then(() => {\n          this._indeterminate = false;\n          this.indeterminateChange.emit(this._indeterminate);\n        });\n      }\n\n      this.toggle();\n      this._transitionCheckState(\n          this._checked ? TransitionCheckState.Checked : TransitionCheckState.Unchecked);\n\n      // Emit our custom change event if the native input emitted one.\n      // It is important to only emit it, if the native input triggered one, because\n      // we don't want to trigger a change event, when the `checked` variable changes for example.\n      this._emitChangeEvent();\n    } else if (!this.disabled && this._clickAction === 'noop') {\n      // Reset native input when clicked with noop. The native checkbox becomes checked after\n      // click, reset it to be align with `checked` value of `mat-checkbox`.\n      this._inputElement.nativeElement.checked = this.checked;\n      this._inputElement.nativeElement.indeterminate = this.indeterminate;\n    }\n  }\n\n  /** Focuses the checkbox. */\n  focus(): void {\n    this._focusMonitor.focusVia(this._inputElement.nativeElement, 'keyboard');\n  }\n\n  _onInteractionEvent(event: Event) {\n    // We always have to stop propagation on the change event.\n    // Otherwise the change event, from the input element, will bubble up and\n    // emit its event object to the `change` output.\n    event.stopPropagation();\n  }\n\n  private _getAnimationClassForCheckStateTransition(\n      oldState: TransitionCheckState, newState: TransitionCheckState): string {\n    let animSuffix: string = '';\n\n    switch (oldState) {\n      case TransitionCheckState.Init:\n        // Handle edge case where user interacts with checkbox that does not have [(ngModel)] or\n        // [checked] bound to it.\n        if (newState === TransitionCheckState.Checked) {\n          animSuffix = 'unchecked-checked';\n        } else if (newState == TransitionCheckState.Indeterminate) {\n          animSuffix = 'unchecked-indeterminate';\n        } else {\n          return '';\n        }\n        break;\n      case TransitionCheckState.Unchecked:\n        animSuffix = newState === TransitionCheckState.Checked ?\n            'unchecked-checked' : 'unchecked-indeterminate';\n        break;\n      case TransitionCheckState.Checked:\n        animSuffix = newState === TransitionCheckState.Unchecked ?\n            'checked-unchecked' : 'checked-indeterminate';\n        break;\n      case TransitionCheckState.Indeterminate:\n        animSuffix = newState === TransitionCheckState.Checked ?\n            'indeterminate-checked' : 'indeterminate-unchecked';\n        break;\n    }\n\n    return `mat-checkbox-anim-${animSuffix}`;\n  }\n\n  /** Fades out the focus state ripple. */\n  private _removeFocusRipple(): void {\n    if (this._focusRipple) {\n      this._focusRipple.fadeOut();\n      this._focusRipple = null;\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Directive,\n  forwardRef,\n  Provider,\n} from '@angular/core';\nimport {\n  CheckboxRequiredValidator,\n  NG_VALIDATORS,\n} from '@angular/forms';\n\nexport const MAT_CHECKBOX_REQUIRED_VALIDATOR: Provider = {\n  provide: NG_VALIDATORS,\n  useExisting: forwardRef(() => MatCheckboxRequiredValidator),\n  multi: true\n};\n\n/**\n * Validator for Material checkbox's required attribute in template-driven checkbox.\n * Current CheckboxRequiredValidator only work with `input type=checkbox` and does not\n * work with `mat-checkbox`.\n */\n@Directive({\n  selector: `mat-checkbox[required][formControlName],\n             mat-checkbox[required][formControl], mat-checkbox[required][ngModel]`,\n  providers: [MAT_CHECKBOX_REQUIRED_VALIDATOR],\n  host: {'[attr.required]': 'required ? \"\" : null'}\n})\nexport class MatCheckboxRequiredValidator extends CheckboxRequiredValidator {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {ObserversModule} from '@angular/cdk/observers';\nimport {MatRippleModule, MatCommonModule} from '@angular/material/core';\nimport {MatCheckbox} from './checkbox';\nimport {MatCheckboxRequiredValidator} from './checkbox-required-validator';\nimport {A11yModule} from '@angular/cdk/a11y';\n\n@NgModule({\n  imports: [CommonModule, MatRippleModule, MatCommonModule, ObserversModule, A11yModule],\n  exports: [MatCheckbox, MatCheckboxRequiredValidator, MatCommonModule],\n  declarations: [MatCheckbox, MatCheckboxRequiredValidator],\n})\nexport class MatCheckboxModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusableOption} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {BACKSPACE, DELETE, SPACE} from '@angular/cdk/keycodes';\nimport {\n  Directive,\n  ElementRef,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  Output,\n} from '@angular/core';\nimport {CanColor, CanDisable, mixinColor, mixinDisabled} from '@angular/material/core';\nimport {Subject} from 'rxjs/Subject';\n\n\n/** Represents an event fired on an individual `mat-chip`. */\nexport interface MatChipEvent {\n  /** The chip the event was fired on. */\n  chip: MatChip;\n}\n\n/** Event object emitted by MatChip when selected or deselected. */\nexport class MatChipSelectionChange {\n  constructor(\n    /** Reference to the chip that emitted the event. */\n    public source: MatChip,\n    /** Whether the chip that emitted the event is selected. */\n    public selected: boolean,\n    /** Whether the selection change was a result of a user interaction. */\n    public isUserInput = false) { }\n}\n\n\n// Boilerplate for applying mixins to MatChip.\n/** @docs-private */\nexport class MatChipBase {\n  constructor(public _elementRef: ElementRef) {}\n}\n\nexport const _MatChipMixinBase = mixinColor(mixinDisabled(MatChipBase), 'primary');\n\n\n/**\n * Dummy directive to add CSS class to basic chips.\n * @docs-private\n */\n@Directive({\n  selector: `mat-basic-chip, [mat-basic-chip]`,\n  host: {'class': 'mat-basic-chip'},\n})\nexport class MatBasicChip {\n}\n\n/**\n * Material design styled Chip component. Used inside the MatChipList component.\n */\n@Directive({\n  selector: `mat-basic-chip, [mat-basic-chip], mat-chip, [mat-chip]`,\n  inputs: ['color', 'disabled'],\n  exportAs: 'matChip',\n  host: {\n    'class': 'mat-chip',\n    '[attr.tabindex]': 'disabled ? null : -1',\n    'role': 'option',\n    '[class.mat-chip-selected]': 'selected',\n    '[attr.disabled]': 'disabled || null',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.aria-selected]': 'ariaSelected',\n    '(click)': '_handleClick($event)',\n    '(keydown)': '_handleKeydown($event)',\n    '(focus)': '_hasFocus = true',\n    '(blur)': '_blur()',\n  },\n\n})\nexport class MatChip extends _MatChipMixinBase implements FocusableOption, OnDestroy, CanColor,\n    CanDisable {\n\n  protected _value: any;\n\n  protected _selected: boolean = false;\n\n  protected _selectable: boolean = true;\n\n  protected _removable: boolean = true;\n\n  /** Whether the chip has focus. */\n  _hasFocus: boolean = false;\n\n  /** Whether the chip is selected. */\n  @Input()\n  get selected(): boolean { return this._selected; }\n  set selected(value: boolean) {\n    this._selected = coerceBooleanProperty(value);\n    this.selectionChange.emit({\n      source: this,\n      isUserInput: false,\n      selected: value\n    });\n  }\n  /** The value of the chip. Defaults to the content inside <mat-chip> tags. */\n  @Input()\n  get value(): any {\n    return this._value != undefined\n      ? this._value\n      : this._elementRef.nativeElement.textContent;\n  }\n  set value(newValue: any) {\n    this._value = newValue;\n  }\n\n  /**\n   * Whether or not the chips are selectable. When a chip is not selectable,\n   * changes to it's selected state are always ignored.\n   */\n  @Input()\n  get selectable(): boolean { return this._selectable; }\n  set selectable(value: boolean) {\n    this._selectable = coerceBooleanProperty(value);\n  }\n\n  /**\n   * Determines whether or not the chip displays the remove styling and emits (remove) events.\n   */\n  @Input()\n  get removable(): boolean { return this._removable; }\n  set removable(value: boolean) {\n    this._removable = coerceBooleanProperty(value);\n  }\n\n  /** Emits when the chip is focused. */\n  _onFocus = new Subject<MatChipEvent>();\n\n  /** Emits when the chip is blured. */\n  _onBlur = new Subject<MatChipEvent>();\n\n  /** Emitted when the chip is selected or deselected. */\n  @Output() selectionChange: EventEmitter<MatChipSelectionChange>\n      = new EventEmitter<MatChipSelectionChange>();\n\n  /** Emitted when the chip is destroyed. */\n  @Output() destroyed = new EventEmitter<MatChipEvent>();\n\n  /**\n   * Emitted when the chip is destroyed.\n   * @deprecated Use 'destroyed' instead.\n   */\n  @Output() destroy: EventEmitter<MatChipEvent> = this.destroyed;\n\n  /** Emitted when a chip is to be removed. */\n  @Output() removed: EventEmitter<MatChipEvent> = new EventEmitter<MatChipEvent>();\n\n  /**\n   * Emitted when a chip is to be removed.\n   * @deprecated Use `removed` instead.\n   */\n  @Output('remove') onRemove: EventEmitter<MatChipEvent> = this.removed;\n\n  get ariaSelected(): string | null {\n    return this.selectable ? this.selected.toString() : null;\n  }\n\n  constructor(public _elementRef: ElementRef) {\n    super(_elementRef);\n  }\n\n  ngOnDestroy(): void {\n    this.destroyed.emit({chip: this});\n  }\n\n  /** Selects the chip. */\n  select(): void {\n    this._selected = true;\n    this.selectionChange.emit({\n      source: this,\n      isUserInput: false,\n      selected: true\n    });\n  }\n\n  /** Deselects the chip. */\n  deselect(): void {\n    this._selected = false;\n    this.selectionChange.emit({\n      source: this,\n      isUserInput: false,\n      selected: false\n    });\n  }\n\n  /** Select this chip and emit selected event */\n  selectViaInteraction(): void {\n    this._selected = true;\n    // Emit select event when selected changes.\n    this.selectionChange.emit({\n      source: this,\n      isUserInput: true,\n      selected: true\n    });\n  }\n\n  /** Toggles the current selected state of this chip. */\n  toggleSelected(isUserInput: boolean = false): boolean {\n    this._selected = !this.selected;\n\n    this.selectionChange.emit({\n      source: this,\n      isUserInput,\n      selected: this._selected\n    });\n\n    return this.selected;\n  }\n\n  /** Allows for programmatic focusing of the chip. */\n  focus(): void {\n    this._elementRef.nativeElement.focus();\n    this._onFocus.next({chip: this});\n  }\n\n  /**\n   * Allows for programmatic removal of the chip. Called by the MatChipList when the DELETE or\n   * BACKSPACE keys are pressed.\n   *\n   * Informs any listeners of the removal request. Does not remove the chip from the DOM.\n   */\n  remove(): void {\n    if (this.removable) {\n      this.removed.emit({chip: this});\n    }\n  }\n\n  /** Ensures events fire properly upon click. */\n  _handleClick(event: Event) {\n    // Check disabled\n    if (this.disabled) {\n      return;\n    }\n\n    event.preventDefault();\n    event.stopPropagation();\n\n    this.focus();\n  }\n\n  /** Handle custom key presses. */\n  _handleKeydown(event: KeyboardEvent): void {\n    if (this.disabled) {\n      return;\n    }\n\n    switch (event.keyCode) {\n      case DELETE:\n      case BACKSPACE:\n        // If we are removable, remove the focused chip\n        this.remove();\n        // Always prevent so page navigation does not occur\n        event.preventDefault();\n        break;\n      case SPACE:\n        // If we are selectable, toggle the focused chip\n        if (this.selectable) {\n          this.toggleSelected(true);\n        }\n\n        // Always prevent space from scrolling the page since the list has focus\n        event.preventDefault();\n        break;\n    }\n  }\n\n  _blur(): void {\n    this._hasFocus = false;\n    this._onBlur.next({chip: this});\n  }\n}\n\n\n/**\n * Applies proper (click) support and adds styling for use with the Material Design \"cancel\" icon\n * available at https://material.io/icons/#ic_cancel.\n *\n * Example:\n *\n *     <mat-chip>\n *       <mat-icon matChipRemove>cancel</mat-icon>\n *     </mat-chip>\n *\n * You *may* use a custom icon, but you may need to override the `mat-chip-remove` positioning\n * styles to properly center the icon within the chip.\n */\n@Directive({\n  selector: '[matChipRemove]',\n  host: {\n    'class': 'mat-chip-remove',\n    '(click)': '_handleClick()',\n  }\n})\nexport class MatChipRemove {\n  constructor(protected _parentChip: MatChip) {\n  }\n\n  /** Calls the parent chip's public `remove()` method if applicable. */\n  _handleClick(): void {\n    if (this._parentChip.removable) {\n      this._parentChip.remove();\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusKeyManager} from '@angular/cdk/a11y';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {SelectionModel} from '@angular/cdk/collections';\nimport {BACKSPACE, LEFT_ARROW, RIGHT_ARROW} from '@angular/cdk/keycodes';\nimport {startWith} from 'rxjs/operators/startWith';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  DoCheck,\n  ElementRef,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Output,\n  QueryList,\n  Self,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {\n  ControlValueAccessor,\n  FormGroupDirective,\n  NgControl,\n  NgForm\n} from '@angular/forms';\nimport {ErrorStateMatcher, mixinErrorState, CanUpdateErrorState} from '@angular/material/core';\nimport {MatFormFieldControl} from '@angular/material/form-field';\nimport {Observable} from 'rxjs/Observable';\nimport {merge} from 'rxjs/observable/merge';\nimport {Subscription} from 'rxjs/Subscription';\nimport {MatChip, MatChipEvent, MatChipSelectionChange} from './chip';\nimport {MatChipInput} from './chip-input';\n\n// Boilerplate for applying mixins to MatChipList.\n/** @docs-private */\nexport class MatChipListBase {\n  constructor(public _defaultErrorStateMatcher: ErrorStateMatcher,\n              public _parentForm: NgForm,\n              public _parentFormGroup: FormGroupDirective,\n              public ngControl: NgControl) {}\n}\nexport const _MatChipListMixinBase = mixinErrorState(MatChipListBase);\n\n\n// Increasing integer for generating unique ids for chip-list components.\nlet nextUniqueId = 0;\n\n/** Change event object that is emitted when the chip list value has changed. */\nexport class MatChipListChange {\n  constructor(\n    /** Chip list that emitted the event. */\n    public source: MatChipList,\n    /** Value of the chip list when the event was emitted. */\n    public value: any) { }\n}\n\n\n/**\n * A material design chips component (named ChipList for it's similarity to the List component).\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-chip-list',\n  template: `<div class=\"mat-chip-list-wrapper\"><ng-content></ng-content></div>`,\n  exportAs: 'matChipList',\n  host: {\n    '[attr.tabindex]': '_tabIndex',\n    '[attr.aria-describedby]': '_ariaDescribedby || null',\n    '[attr.aria-required]': 'required.toString()',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.aria-invalid]': 'errorState',\n    '[attr.aria-multiselectable]': 'multiple',\n    '[attr.role]': 'role',\n    '[class.mat-chip-list-disabled]': 'disabled',\n    '[class.mat-chip-list-invalid]': 'errorState',\n    '[class.mat-chip-list-required]': 'required',\n    '[attr.aria-orientation]': 'ariaOrientation',\n    'class': 'mat-chip-list',\n    '(focus)': 'focus()',\n    '(blur)': '_blur()',\n    '(keydown)': '_keydown($event)'\n  },\n  providers: [{provide: MatFormFieldControl, useExisting: MatChipList}],\n  styleUrls: ['chips.css'],\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class MatChipList extends _MatChipListMixinBase implements MatFormFieldControl<any>,\n    ControlValueAccessor, AfterContentInit, DoCheck, OnInit, OnDestroy, CanUpdateErrorState {\n  readonly controlType = 'mat-chip-list';\n\n  /** When a chip is destroyed, we track the index so we can focus the appropriate next chip. */\n  protected _lastDestroyedIndex: number|null = null;\n\n  /** Track which chips we're listening to for focus/destruction. */\n  protected _chipSet: WeakMap<MatChip, boolean> = new WeakMap();\n\n  /** Subscription to tabbing out from the chip list. */\n  private _tabOutSubscription = Subscription.EMPTY;\n\n  /** Subscription to changes in the chip list. */\n  private _changeSubscription: Subscription;\n\n  /** Subscription to focus changes in the chips. */\n  private _chipFocusSubscription: Subscription|null;\n\n  /** Subscription to blur changes in the chips. */\n  private _chipBlurSubscription: Subscription|null;\n\n  /** Subscription to selection changes in chips. */\n  private _chipSelectionSubscription: Subscription|null;\n\n  /** Subscription to remove changes in chips. */\n  private _chipRemoveSubscription: Subscription|null;\n\n  /** Whether or not the chip is selectable. */\n  protected _selectable: boolean = true;\n\n  /** Whether the component is in multiple selection mode. */\n  private _multiple: boolean = false;\n\n  /** The chip input to add more chips */\n  protected _chipInput: MatChipInput;\n\n  /** Id of the chip list */\n  protected _id: string;\n\n  /** Uid of the chip list */\n  protected _uid: string = `mat-chip-list-${nextUniqueId++}`;\n\n  /** Whether this is required */\n  protected _required: boolean = false;\n\n  /** Whether this is disabled */\n  protected _disabled: boolean = false;\n\n  protected _value: any;\n\n  /** Placeholder for the chip list. Alternatively, placeholder can be set on MatChipInput */\n  protected _placeholder: string;\n\n  /** The aria-describedby attribute on the chip list for improved a11y. */\n  _ariaDescribedby: string;\n\n  /** Tab index for the chip list. */\n  _tabIndex = 0;\n\n  /**\n   * User defined tab index.\n   * When it is not null, use user defined tab index. Otherwise use _tabIndex\n   */\n  _userTabIndex: number | null = null;\n\n  /** The FocusKeyManager which handles focus. */\n  _keyManager: FocusKeyManager<MatChip>;\n\n  /** Function when touched */\n  _onTouched = () => {};\n\n  /** Function when changed */\n  _onChange: (value: any) => void = () => {};\n\n  _selectionModel: SelectionModel<MatChip>;\n\n  /** Comparison function to specify which option is displayed. Defaults to object equality. */\n  private _compareWith = (o1: any, o2: any) => o1 === o2;\n\n  /** The array of selected chips inside chip list. */\n  get selected(): MatChip[] | MatChip {\n    return this.multiple ? this._selectionModel.selected : this._selectionModel.selected[0];\n  }\n\n  get role(): string|null {\n    return this.empty ? null : 'listbox';\n  }\n\n  /** An object used to control when error messages are shown. */\n  @Input() errorStateMatcher: ErrorStateMatcher;\n\n  /** Whether the user should be allowed to select multiple chips. */\n  @Input()\n  get multiple(): boolean { return this._multiple; }\n  set multiple(value: boolean) {\n    this._multiple = coerceBooleanProperty(value);\n  }\n\n  /**\n   * A function to compare the option values with the selected values. The first argument\n   * is a value from an option. The second is a value from the selection. A boolean\n   * should be returned.\n   */\n  @Input()\n  get compareWith() { return this._compareWith; }\n  set compareWith(fn: (o1: any, o2: any) => boolean) {\n    this._compareWith = fn;\n    if (this._selectionModel) {\n      // A different comparator means the selection could change.\n      this._initializeSelection();\n    }\n  }\n\n  /** Required for FormFieldControl */\n  @Input()\n  get value() { return this._value; }\n  set value(newValue: any) {\n    this.writeValue(newValue);\n    this._value = newValue;\n  }\n\n  /** Required for FormFieldControl. The ID of the chip list */\n  @Input()\n  get id(): string { return this._id || this._uid; }\n  set id(value: string) {\n    this._id = value;\n    this.stateChanges.next();\n  }\n\n  /** Required for FormFieldControl. Whether the chip list is required. */\n  @Input()\n  get required(): boolean { return this._required; }\n  set required(value: boolean) {\n    this._required = coerceBooleanProperty(value);\n    this.stateChanges.next();\n  }\n\n  /** For FormFieldControl. Use chip input's placholder if there's a chip input */\n  @Input()\n  get placeholder(): string {\n    return this._chipInput ? this._chipInput.placeholder : this._placeholder;\n  }\n  set placeholder(value: string) {\n    this._placeholder = value;\n    this.stateChanges.next();\n  }\n\n  /** Whether any chips or the matChipInput inside of this chip-list has focus. */\n  get focused(): boolean {\n    return this.chips.some(chip => chip._hasFocus) ||\n      (this._chipInput && this._chipInput.focused);\n  }\n\n  /** Whether this chip-list contains no chips and no matChipInput. */\n  get empty(): boolean {\n    return (!this._chipInput || this._chipInput.empty) && this.chips.length === 0;\n  }\n\n  /** @docs-private */\n  get shouldLabelFloat(): boolean { return !this.empty || this.focused; }\n\n  /** Whether this chip-list is disabled. */\n  @Input()\n  get disabled() { return this.ngControl ? this.ngControl.disabled : this._disabled; }\n  set disabled(value: any) { this._disabled = coerceBooleanProperty(value); }\n\n\n  /** Orientation of the chip list. */\n  @Input('aria-orientation') ariaOrientation: 'horizontal' | 'vertical' = 'horizontal';\n\n  /**\n   * Whether or not this chip is selectable. When a chip is not selectable,\n   * its selected state is always ignored.\n   */\n  @Input()\n  get selectable(): boolean { return this._selectable; }\n  set selectable(value: boolean) { this._selectable = coerceBooleanProperty(value); }\n\n  @Input()\n  set tabIndex(value: number) {\n    this._userTabIndex = value;\n    this._tabIndex = value;\n  }\n\n  /** Combined stream of all of the child chips' selection change events. */\n  get chipSelectionChanges(): Observable<MatChipSelectionChange> {\n    return merge(...this.chips.map(chip => chip.selectionChange));\n  }\n\n  /** Combined stream of all of the child chips' focus change events. */\n  get chipFocusChanges(): Observable<MatChipEvent> {\n    return merge(...this.chips.map(chip => chip._onFocus));\n  }\n\n  /** Combined stream of all of the child chips' blur change events. */\n  get chipBlurChanges(): Observable<MatChipEvent> {\n    return merge(...this.chips.map(chip => chip._onBlur));\n  }\n\n  /** Combined stream of all of the child chips' remove change events. */\n  get chipRemoveChanges(): Observable<MatChipEvent> {\n    return merge(...this.chips.map(chip => chip.destroy));\n  }\n\n  /** Event emitted when the selected chip list value has been changed by the user. */\n  @Output() change: EventEmitter<MatChipListChange> = new EventEmitter<MatChipListChange>();\n\n  /**\n   * Event that emits whenever the raw value of the chip-list changes. This is here primarily\n   * to facilitate the two-way binding for the `value` input.\n   * @docs-private\n   */\n  @Output() valueChange: EventEmitter<any> = new EventEmitter<any>();\n\n  /** The chip components contained within this chip list. */\n  @ContentChildren(MatChip) chips: QueryList<MatChip>;\n\n  constructor(protected _elementRef: ElementRef,\n              private _changeDetectorRef: ChangeDetectorRef,\n              @Optional() private _dir: Directionality,\n              @Optional() _parentForm: NgForm,\n              @Optional() _parentFormGroup: FormGroupDirective,\n              _defaultErrorStateMatcher: ErrorStateMatcher,\n              @Optional() @Self() public ngControl: NgControl) {\n    super(_defaultErrorStateMatcher, _parentForm, _parentFormGroup, ngControl);\n    if (this.ngControl) {\n      this.ngControl.valueAccessor = this;\n    }\n  }\n\n  ngAfterContentInit(): void {\n\n    this._keyManager = new FocusKeyManager<MatChip>(this.chips).withWrap();\n\n    // Prevents the chip list from capturing focus and redirecting\n    // it back to the first chip when the user tabs out.\n    this._tabOutSubscription = this._keyManager.tabOut.subscribe(() => {\n      this._tabIndex = -1;\n      setTimeout(() => this._tabIndex = this._userTabIndex || 0);\n    });\n\n    // When the list changes, re-subscribe\n    this._changeSubscription = this.chips.changes.pipe(startWith(null)).subscribe(() => {\n      this._resetChips();\n\n      // Reset chips selected/deselected status\n      this._initializeSelection();\n\n      // Check to see if we need to update our tab index\n      this._updateTabIndex();\n\n      // Check to see if we have a destroyed chip and need to refocus\n      this._updateFocusForDestroyedChips();\n    });\n  }\n\n  ngOnInit() {\n    this._selectionModel = new SelectionModel<MatChip>(this.multiple, undefined, false);\n    this.stateChanges.next();\n  }\n\n  ngDoCheck() {\n    if (this.ngControl) {\n      // We need to re-evaluate this on every change detection cycle, because there are some\n      // error triggers that we can't subscribe to (e.g. parent form submissions). This means\n      // that whatever logic is in here has to be super lean or we risk destroying the performance.\n      this.updateErrorState();\n    }\n  }\n\n  ngOnDestroy(): void {\n    this._tabOutSubscription.unsubscribe();\n\n    if (this._changeSubscription) {\n      this._changeSubscription.unsubscribe();\n    }\n    this._dropSubscriptions();\n    this.stateChanges.complete();\n  }\n\n\n  /** Associates an HTML input element with this chip list. */\n  registerInput(inputElement: MatChipInput) {\n    this._chipInput = inputElement;\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  setDescribedByIds(ids: string[]) { this._ariaDescribedby = ids.join(' '); }\n\n  // Implemented as part of ControlValueAccessor\n  writeValue(value: any): void {\n    if (this.chips) {\n      this._setSelectionByValue(value, false);\n    }\n  }\n\n  // Implemented as part of ControlValueAccessor\n  registerOnChange(fn: (value: any) => void): void {\n    this._onChange = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor\n  registerOnTouched(fn: () => void): void {\n    this._onTouched = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor\n  setDisabledState(disabled: boolean): void {\n    this.disabled = disabled;\n    this._elementRef.nativeElement.disabled = disabled;\n    this.stateChanges.next();\n  }\n\n  /** @docs-private */\n  onContainerClick() {\n    this.focus();\n  }\n\n  /**\n   * Focuses the the first non-disabled chip in this chip list, or the associated input when there\n   * are no eligible chips.\n   */\n  focus(): void {\n    // TODO: ARIA says this should focus the first `selected` chip if any are selected.\n    // Focus on first element if there's no chipInput inside chip-list\n    if (this._chipInput && this._chipInput.focused) {\n      // do nothing\n    } else if (this.chips.length > 0) {\n      this._keyManager.setFirstItemActive();\n      this.stateChanges.next();\n    } else {\n      this._focusInput();\n      this.stateChanges.next();\n    }\n  }\n\n  /** Attempt to focus an input if we have one. */\n  _focusInput() {\n    if (this._chipInput) {\n      this._chipInput.focus();\n    }\n  }\n\n  /**\n   * Pass events to the keyboard manager. Available here for tests.\n   */\n  _keydown(event: KeyboardEvent) {\n    let code = event.keyCode;\n    let target = event.target as HTMLElement;\n    let isInputEmpty = this._isInputEmpty(target);\n    let isRtl = this._dir && this._dir.value == 'rtl';\n\n    let isPrevKey = (code === (isRtl ? RIGHT_ARROW : LEFT_ARROW));\n    let isNextKey = (code === (isRtl ? LEFT_ARROW : RIGHT_ARROW));\n    let isBackKey = code === BACKSPACE;\n    // If they are on an empty input and hit backspace, focus the last chip\n    if (isInputEmpty && isBackKey) {\n      this._keyManager.setLastItemActive();\n      event.preventDefault();\n      return;\n    }\n\n    // If they are on a chip, check for space/left/right, otherwise pass to our key manager (like\n    // up/down keys)\n    if (target && target.classList.contains('mat-chip')) {\n      if (isPrevKey) {\n        this._keyManager.setPreviousItemActive();\n        event.preventDefault();\n      } else if (isNextKey) {\n        this._keyManager.setNextItemActive();\n        event.preventDefault();\n      } else {\n        this._keyManager.onKeydown(event);\n      }\n    }\n    this.stateChanges.next();\n  }\n\n\n  /**\n   * Check the tab index as you should not be allowed to focus an empty list.\n   */\n  protected _updateTabIndex(): void {\n    // If we have 0 chips, we should not allow keyboard focus\n    this._tabIndex = this._userTabIndex || (this.chips.length === 0 ? -1 : 0);\n  }\n\n  /**\n   * Update key manager's active item when chip is deleted.\n   * If the deleted chip is the last chip in chip list, focus the new last chip.\n   * Otherwise focus the next chip in the list.\n   * Save `_lastDestroyedIndex` so we can set the correct focus.\n   */\n  protected _updateKeyManager(chip: MatChip) {\n    let chipIndex: number = this.chips.toArray().indexOf(chip);\n    if (this._isValidIndex(chipIndex)) {\n      if (chip._hasFocus) {\n        // Check whether the chip is not the last item\n        if (chipIndex < this.chips.length - 1) {\n          this._keyManager.setActiveItem(chipIndex);\n        } else if (chipIndex - 1 >= 0) {\n          this._keyManager.setActiveItem(chipIndex - 1);\n        }\n      }\n      if (this._keyManager.activeItemIndex === chipIndex) {\n        this._lastDestroyedIndex = chipIndex;\n      }\n    }\n  }\n\n  /**\n   * Checks to see if a focus chip was recently destroyed so that we can refocus the next closest\n   * one.\n   */\n  protected _updateFocusForDestroyedChips() {\n    let chipsArray = this.chips;\n\n    if (this._lastDestroyedIndex != null && chipsArray.length > 0) {\n      // Check whether the destroyed chip was the last item\n      const newFocusIndex = Math.min(this._lastDestroyedIndex, chipsArray.length - 1);\n      this._keyManager.setActiveItem(newFocusIndex);\n      let focusChip = this._keyManager.activeItem;\n      // Focus the chip\n      if (focusChip) {\n        focusChip.focus();\n      }\n    }\n\n    // Reset our destroyed index\n    this._lastDestroyedIndex = null;\n  }\n\n  /**\n   * Utility to ensure all indexes are valid.\n   *\n   * @param index The index to be checked.\n   * @returns True if the index is valid for our list of chips.\n   */\n  private _isValidIndex(index: number): boolean {\n    return index >= 0 && index < this.chips.length;\n  }\n\n  private _isInputEmpty(element: HTMLElement): boolean {\n    if (element && element.nodeName.toLowerCase() === 'input') {\n      let input = element as HTMLInputElement;\n      return !input.value;\n    }\n\n    return false;\n  }\n\n  _setSelectionByValue(value: any, isUserInput: boolean = true) {\n    this._clearSelection();\n    this.chips.forEach(chip => chip.deselect());\n\n    if (Array.isArray(value)) {\n      value.forEach(currentValue => this._selectValue(currentValue, isUserInput));\n      this._sortValues();\n    } else {\n      const correspondingChip = this._selectValue(value, isUserInput);\n\n      // Shift focus to the active item. Note that we shouldn't do this in multiple\n      // mode, because we don't know what chip the user interacted with last.\n      if (correspondingChip) {\n        const correspondingChipIndex = this.chips.toArray().indexOf(correspondingChip);\n\n        if (isUserInput) {\n          this._keyManager.setActiveItem(correspondingChipIndex);\n        } else {\n          this._keyManager.updateActiveItemIndex(correspondingChipIndex);\n        }\n\n      }\n    }\n  }\n\n  /**\n   * Finds and selects the chip based on its value.\n   * @returns Chip that has the corresponding value.\n   */\n  private _selectValue(value: any, isUserInput: boolean = true): MatChip | undefined {\n\n    const correspondingChip = this.chips.find(chip => {\n      return chip.value != null && this._compareWith(chip.value,  value);\n    });\n\n    if (correspondingChip) {\n      isUserInput ? correspondingChip.selectViaInteraction() : correspondingChip.select();\n      this._selectionModel.select(correspondingChip);\n    }\n\n    return correspondingChip;\n  }\n\n  private _initializeSelection(): void {\n    // Defer setting the value in order to avoid the \"Expression\n    // has changed after it was checked\" errors from Angular.\n    Promise.resolve().then(() => {\n      if (this.ngControl || this._value) {\n        this._setSelectionByValue(this.ngControl ? this.ngControl.value : this._value, false);\n        this.stateChanges.next();\n      }\n    });\n  }\n\n  /**\n   * Deselects every chip in the list.\n   * @param skip Chip that should not be deselected.\n   */\n  private _clearSelection(skip?: MatChip): void {\n    this._selectionModel.clear();\n    this.chips.forEach(chip => {\n      if (chip !== skip) {\n        chip.deselect();\n      }\n    });\n    this.stateChanges.next();\n  }\n\n  /**\n   * Sorts the model values, ensuring that they keep the same\n   * order that they have in the panel.\n   */\n  private _sortValues(): void {\n    if (this._multiple) {\n      this._selectionModel.clear();\n\n      this.chips.forEach(chip => {\n        if (chip.selected) {\n          this._selectionModel.select(chip);\n        }\n      });\n      this.stateChanges.next();\n    }\n  }\n\n  /** Emits change event to set the model value. */\n  private _propagateChanges(fallbackValue?: any): void {\n    let valueToEmit: any = null;\n\n    if (Array.isArray(this.selected)) {\n      valueToEmit = this.selected.map(chip => chip.value);\n    } else {\n      valueToEmit = this.selected ? this.selected.value : fallbackValue;\n    }\n    this._value = valueToEmit;\n    this.change.emit(new MatChipListChange(this, valueToEmit));\n    this.valueChange.emit(valueToEmit);\n    this._onChange(valueToEmit);\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** When blurred, mark the field as touched when focus moved outside the chip list. */\n  _blur() {\n    if (!this.disabled) {\n      if (this._chipInput) {\n        // If there's a chip input, we should check whether the focus moved to chip input.\n        // If the focus is not moved to chip input, mark the field as touched. If the focus moved\n        // to chip input, do nothing.\n        // Timeout is needed to wait for the focus() event trigger on chip input.\n        setTimeout(() => {\n          if (!this.focused) {\n            this._markAsTouched();\n          }\n        });\n      } else {\n        // If there's no chip input, then mark the field as touched.\n        this._markAsTouched();\n      }\n    }\n  }\n\n  /** Mark the field as touched */\n  _markAsTouched() {\n    this._onTouched();\n    this._changeDetectorRef.markForCheck();\n    this.stateChanges.next();\n  }\n\n  private _resetChips() {\n    this._dropSubscriptions();\n    this._listenToChipsFocus();\n    this._listenToChipsSelection();\n    this._listenToChipsRemoved();\n  }\n\n\n  private _dropSubscriptions() {\n    if (this._chipFocusSubscription) {\n      this._chipFocusSubscription.unsubscribe();\n      this._chipFocusSubscription = null;\n    }\n\n    if (this._chipBlurSubscription) {\n      this._chipBlurSubscription.unsubscribe();\n      this._chipBlurSubscription = null;\n    }\n\n    if (this._chipSelectionSubscription) {\n      this._chipSelectionSubscription.unsubscribe();\n      this._chipSelectionSubscription = null;\n    }\n  }\n\n  /** Listens to user-generated selection events on each chip. */\n  private _listenToChipsSelection(): void {\n    this._chipSelectionSubscription = this.chipSelectionChanges.subscribe(event => {\n      event.source.selected\n        ? this._selectionModel.select(event.source)\n        : this._selectionModel.deselect(event.source);\n\n      // For single selection chip list, make sure the deselected value is unselected.\n      if (!this.multiple) {\n        this.chips.forEach(chip => {\n          if (!this._selectionModel.isSelected(chip) && chip.selected) {\n            chip.deselect();\n          }\n        });\n      }\n\n      if (event.isUserInput) {\n        this._propagateChanges();\n      }\n    });\n  }\n\n  /** Listens to user-generated selection events on each chip. */\n  private _listenToChipsFocus(): void {\n    this._chipFocusSubscription = this.chipFocusChanges.subscribe(event => {\n      let chipIndex: number = this.chips.toArray().indexOf(event.chip);\n\n      if (this._isValidIndex(chipIndex)) {\n        this._keyManager.updateActiveItemIndex(chipIndex);\n      }\n      this.stateChanges.next();\n    });\n\n    this._chipBlurSubscription = this.chipBlurChanges.subscribe(_ => {\n      this._blur();\n      this.stateChanges.next();\n    });\n  }\n\n  private _listenToChipsRemoved(): void {\n    this._chipRemoveSubscription = this.chipRemoveChanges.subscribe((event) => {\n      this._updateKeyManager(event.chip);\n    });\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {ENTER} from '@angular/cdk/keycodes';\nimport {Directive, ElementRef, EventEmitter, Input, Output} from '@angular/core';\nimport {MatChipList} from './chip-list';\n\n\n/** Represents an input event on a `matChipInput`. */\nexport interface MatChipInputEvent {\n  /** The native `<input>` element that the event is being fired for. */\n  input: HTMLInputElement;\n\n  /** The value of the input. */\n  value: string;\n}\n\n/**\n * Directive that adds chip-specific behaviors to an input element inside <mat-form-field>.\n * May be placed inside or outside of an <mat-chip-list>.\n */\n@Directive({\n  selector: 'input[matChipInputFor]',\n  exportAs: 'matChipInput, matChipInputFor',\n  host: {\n    'class': 'mat-chip-input mat-input-element',\n    '(keydown)': '_keydown($event)',\n    '(blur)': '_blur()',\n    '(focus)': '_focus()',\n    '(input)': '_onInput()',\n  }\n})\nexport class MatChipInput {\n  focused: boolean = false;\n  _chipList: MatChipList;\n\n  /** Register input for chip list */\n  @Input('matChipInputFor')\n  set chipList(value: MatChipList) {\n    if (value) {\n      this._chipList = value;\n      this._chipList.registerInput(this);\n    }\n  }\n\n  /**\n   * Whether or not the chipEnd event will be emitted when the input is blurred.\n   */\n  @Input('matChipInputAddOnBlur')\n  get addOnBlur(): boolean { return this._addOnBlur; }\n  set addOnBlur(value: boolean) { this._addOnBlur = coerceBooleanProperty(value); }\n  _addOnBlur: boolean = false;\n\n  /**\n   * The list of key codes that will trigger a chipEnd event.\n   *\n   * Defaults to `[ENTER]`.\n   */\n  // TODO(tinayuangao): Support Set here\n  @Input('matChipInputSeparatorKeyCodes') separatorKeyCodes: number[] = [ENTER];\n\n  /** Emitted when a chip is to be added. */\n  @Output('matChipInputTokenEnd')\n  chipEnd: EventEmitter<MatChipInputEvent> = new EventEmitter<MatChipInputEvent>();\n\n  /** The input's placeholder text. */\n  @Input() placeholder: string = '';\n\n  /** Whether the input is empty. */\n  get empty(): boolean {\n    let value: string | null = this._inputElement.value;\n    return (value == null || value === '');\n  }\n\n  /** The native input element to which this directive is attached. */\n  protected _inputElement: HTMLInputElement;\n\n  constructor(protected _elementRef: ElementRef) {\n    this._inputElement = this._elementRef.nativeElement as HTMLInputElement;\n  }\n\n  /** Utility method to make host definition/tests more clear. */\n  _keydown(event?: KeyboardEvent) {\n    this._emitChipEnd(event);\n  }\n\n  /** Checks to see if the blur should emit the (chipEnd) event. */\n  _blur() {\n    if (this.addOnBlur) {\n      this._emitChipEnd();\n    }\n    this.focused = false;\n    // Blur the chip list if it is not focused\n    if (!this._chipList.focused) {\n      this._chipList._blur();\n    }\n    this._chipList.stateChanges.next();\n  }\n\n  _focus() {\n    this.focused = true;\n    this._chipList.stateChanges.next();\n  }\n\n  /** Checks to see if the (chipEnd) event needs to be emitted. */\n  _emitChipEnd(event?: KeyboardEvent) {\n    if (!this._inputElement.value && !!event) {\n      this._chipList._keydown(event);\n    }\n    if (!event || this.separatorKeyCodes.indexOf(event.keyCode) > -1) {\n      this.chipEnd.emit({ input: this._inputElement, value: this._inputElement.value });\n\n      if (event) {\n        event.preventDefault();\n      }\n    }\n  }\n\n  _onInput() {\n    // Let chip list know whenever the value changes.\n    this._chipList.stateChanges.next();\n  }\n\n  focus(): void { this._inputElement.focus(); }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {ErrorStateMatcher} from '@angular/material/core';\nimport {MatChipList} from './chip-list';\nimport {MatBasicChip, MatChip, MatChipRemove} from './chip';\nimport {MatChipInput} from './chip-input';\n\n\n@NgModule({\n  imports: [],\n  exports: [MatChipList, MatChip, MatChipInput, MatChipRemove, MatChipRemove, MatBasicChip],\n  declarations: [MatChipList, MatChip, MatChipInput, MatChipRemove,  MatChipRemove, MatBasicChip],\n  providers: [ErrorStateMatcher]\n})\nexport class MatChipsModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ViewContainerRef} from '@angular/core';\nimport {Direction} from '@angular/cdk/bidi';\nimport {ScrollStrategy} from '@angular/cdk/overlay';\n\n/** Valid ARIA roles for a dialog element. */\nexport type DialogRole = 'dialog' | 'alertdialog';\n\n/** Possible overrides for a dialog's position. */\nexport interface DialogPosition {\n  /** Override for the dialog's top position. */\n  top?: string;\n\n  /** Override for the dialog's bottom position. */\n  bottom?: string;\n\n  /** Override for the dialog's left position. */\n  left?: string;\n\n  /** Override for the dialog's right position. */\n  right?: string;\n}\n\n/**\n * Configuration for opening a modal dialog with the MatDialog service.\n */\nexport class MatDialogConfig<D = any> {\n\n  /**\n   * Where the attached component should live in Angular's *logical* component tree.\n   * This affects what is available for injection and the change detection order for the\n   * component instantiated inside of the dialog. This does not affect where the dialog\n   * content will be rendered.\n   */\n  viewContainerRef?: ViewContainerRef;\n\n  /** ID for the dialog. If omitted, a unique one will be generated. */\n  id?: string;\n\n  /** The ARIA role of the dialog element. */\n  role?: DialogRole = 'dialog';\n\n  /** Custom class for the overlay pane. */\n  panelClass?: string | string[] = '';\n\n  /** Whether the dialog has a backdrop. */\n  hasBackdrop?: boolean = true;\n\n  /** Custom class for the backdrop, */\n  backdropClass?: string = '';\n\n  /** Whether the user can use escape or clicking outside to close a modal. */\n  disableClose?: boolean = false;\n\n  /** Width of the dialog. */\n  width?: string = '';\n\n  /** Height of the dialog. */\n  height?: string = '';\n\n  /** Min-width of the dialog. If a number is provided, pixel units are assumed. */\n  minWidth?: number | string;\n\n  /** Min-height of the dialog. If a number is provided, pixel units are assumed. */\n  minHeight?: number | string;\n\n  /** Max-width of the dialog. If a number is provided, pixel units are assumed. Defaults to 80vw */\n  maxWidth?: number | string = '80vw';\n\n  /** Max-height of the dialog. If a number is provided, pixel units are assumed. */\n  maxHeight?: number | string;\n\n  /** Position overrides. */\n  position?: DialogPosition;\n\n  /** Data being injected into the child component. */\n  data?: D | null = null;\n\n  /** Layout direction for the dialog's content. */\n  direction?: Direction = 'ltr';\n\n  /** ID of the element that describes the dialog. */\n  ariaDescribedBy?: string | null = null;\n\n  /** Aria label to assign to the dialog element */\n  ariaLabel?: string | null = null;\n\n  /** Whether the dialog should focus the first focusable element on open. */\n  autoFocus?: boolean = true;\n\n  /** Scroll strategy to be used for the dialog. */\n  scrollStrategy?: ScrollStrategy;\n\n  /** Whether the dialog should close when the user goes backwards/forwards in history. */\n  closeOnNavigation?: boolean = true;\n\n  // TODO(jelbourn): add configuration for lifecycle hooks, ARIA labelling.\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/** Animations used by MatDialog. */\nexport const matDialogAnimations: {\n  readonly slideDialog: AnimationTriggerMetadata;\n} = {\n  /** Animation that slides the dialog in and out of view and fades the opacity. */\n  slideDialog: trigger('slideDialog', [\n    // Note: The `enter` animation doesn't transition to something like `translate3d(0, 0, 0)\n    // scale(1)`, because for some reason specifying the transform explicitly, causes IE both\n    // to blur the dialog content and decimate the animation performance. Leaving it as `none`\n    // solves both issues.\n    state('enter', style({ transform: 'none', opacity: 1 })),\n    state('void', style({ transform: 'translate3d(0, 25%, 0) scale(0.9)', opacity: 0 })),\n    state('exit', style({ transform: 'translate3d(0, 25%, 0)', opacity: 0 })),\n    transition('* => *', animate('400ms cubic-bezier(0.25, 0.8, 0.25, 1)')),\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor} from '@angular/cdk/a11y';\nimport {Platform} from '@angular/cdk/platform';\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  Directive,\n  ElementRef,\n  OnDestroy,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {\n  CanColor,\n  CanDisable,\n  CanDisableRipple,\n  mixinColor,\n  mixinDisabled,\n  mixinDisableRipple\n} from '@angular/material/core';\n\n\n// TODO(kara): Convert attribute selectors to classes when attr maps become available\n\n/** Default color palette for round buttons (mat-fab and mat-mini-fab) */\nconst DEFAULT_ROUND_BUTTON_COLOR = 'accent';\n\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: 'button[mat-button], a[mat-button]',\n  host: {'class': 'mat-button'}\n})\nexport class MatButtonCssMatStyler {}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: 'button[mat-raised-button], a[mat-raised-button]',\n  host: {'class': 'mat-raised-button'}\n})\nexport class MatRaisedButtonCssMatStyler {}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: 'button[mat-icon-button], a[mat-icon-button]',\n  host: {'class': 'mat-icon-button'}\n})\nexport class MatIconButtonCssMatStyler {}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: 'button[mat-fab], a[mat-fab]',\n  host: {'class': 'mat-fab'}\n})\nexport class MatFab {}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: 'button[mat-mini-fab], a[mat-mini-fab]',\n  host: {'class': 'mat-mini-fab'}\n})\nexport class MatMiniFab {}\n\n\n// Boilerplate for applying mixins to MatButton.\n/** @docs-private */\nexport class MatButtonBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatButtonMixinBase = mixinColor(mixinDisabled(mixinDisableRipple(MatButtonBase)));\n\n\n/**\n * Material design button.\n */\n@Component({\n  moduleId: module.id,\n  selector: `button[mat-button], button[mat-raised-button], button[mat-icon-button],\n             button[mat-fab], button[mat-mini-fab]`,\n  exportAs: 'matButton',\n  host: {\n    '[disabled]': 'disabled || null',\n  },\n  templateUrl: 'button.html',\n  styleUrls: ['button.css'],\n  inputs: ['disabled', 'disableRipple', 'color'],\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatButton extends _MatButtonMixinBase\n    implements OnDestroy, CanDisable, CanColor, CanDisableRipple {\n\n  /** Whether the button is round. */\n  _isRoundButton: boolean = this._hasHostAttributes('mat-fab', 'mat-mini-fab');\n\n  /** Whether the button is icon button. */\n  _isIconButton: boolean = this._hasHostAttributes('mat-icon-button');\n\n  constructor(elementRef: ElementRef,\n              private _platform: Platform,\n              private _focusMonitor: FocusMonitor) {\n    super(elementRef);\n\n    this._focusMonitor.monitor(this._elementRef.nativeElement, true);\n\n    if (this._isRoundButton) {\n      this.color = DEFAULT_ROUND_BUTTON_COLOR;\n    }\n  }\n\n  ngOnDestroy() {\n    this._focusMonitor.stopMonitoring(this._elementRef.nativeElement);\n  }\n\n  /** Focuses the button. */\n  focus(): void {\n    this._getHostElement().focus();\n  }\n\n  _getHostElement() {\n    return this._elementRef.nativeElement;\n  }\n\n  _isRippleDisabled() {\n    return this.disableRipple || this.disabled;\n  }\n\n  /** Gets whether the button has one of the given attributes. */\n  _hasHostAttributes(...attributes: string[]) {\n    // If not on the browser, say that there are none of the attributes present.\n    // Since these only affect how the ripple displays (and ripples only happen on the client),\n    // detecting these attributes isn't necessary when not on the browser.\n    if (!this._platform.isBrowser) {\n      return false;\n    }\n\n    return attributes.some(attribute => this._getHostElement().hasAttribute(attribute));\n  }\n}\n\n/**\n * Raised Material design button.\n */\n@Component({\n  moduleId: module.id,\n  selector: `a[mat-button], a[mat-raised-button], a[mat-icon-button], a[mat-fab], a[mat-mini-fab]`,\n  exportAs: 'matButton, matAnchor',\n  host: {\n    '[attr.tabindex]': 'disabled ? -1 : 0',\n    '[attr.disabled]': 'disabled || null',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '(click)': '_haltDisabledEvents($event)',\n  },\n  inputs: ['disabled', 'disableRipple', 'color'],\n  templateUrl: 'button.html',\n  styleUrls: ['button.css'],\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatAnchor extends MatButton {\n  constructor(\n      platform: Platform,\n      focusMonitor: FocusMonitor,\n      elementRef: ElementRef) {\n    super(elementRef, platform, focusMonitor);\n  }\n\n  _haltDisabledEvents(event: Event) {\n    // A disabled button shouldn't apply any actions\n    if (this.disabled) {\n      event.preventDefault();\n      event.stopImmediatePropagation();\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {A11yModule} from '@angular/cdk/a11y';\nimport {\n  MatAnchor,\n  MatButton,\n  MatMiniFab,\n  MatButtonCssMatStyler,\n  MatFab,\n  MatIconButtonCssMatStyler,\n  MatRaisedButtonCssMatStyler\n} from './button';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatRippleModule,\n    MatCommonModule,\n    A11yModule,\n  ],\n  exports: [\n    MatButton,\n    MatAnchor,\n    MatMiniFab,\n    MatFab,\n    MatCommonModule,\n    MatButtonCssMatStyler,\n    MatRaisedButtonCssMatStyler,\n    MatIconButtonCssMatStyler,\n  ],\n  declarations: [\n    MatButton,\n    MatAnchor,\n    MatMiniFab,\n    MatFab,\n    MatButtonCssMatStyler,\n    MatRaisedButtonCssMatStyler,\n    MatIconButtonCssMatStyler,\n  ],\n})\nexport class MatButtonModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {UniqueSelectionDispatcher} from '@angular/cdk/collections';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Input,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Output,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {CanDisable, mixinDisabled} from '@angular/material/core';\n\n/** Acceptable types for a button toggle. */\nexport type ToggleType = 'checkbox' | 'radio';\n\n// Boilerplate for applying mixins to MatButtonToggleGroup and MatButtonToggleGroupMultiple\n/** @docs-private */\nexport class MatButtonToggleGroupBase {}\nexport const _MatButtonToggleGroupMixinBase = mixinDisabled(MatButtonToggleGroupBase);\n\n/**\n * Provider Expression that allows mat-button-toggle-group to register as a ControlValueAccessor.\n * This allows it to support [(ngModel)].\n * @docs-private\n */\nexport const MAT_BUTTON_TOGGLE_GROUP_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatButtonToggleGroup),\n  multi: true\n};\n\nlet _uniqueIdCounter = 0;\n\n/** Change event object emitted by MatButtonToggle. */\nexport class MatButtonToggleChange {\n  /** The MatButtonToggle that emits the event. */\n  source: MatButtonToggle | null;\n  /** The value assigned to the MatButtonToggle. */\n  value: any;\n}\n\n/** Exclusive selection button toggle group that behaves like a radio-button group. */\n@Directive({\n  selector: 'mat-button-toggle-group:not([multiple])',\n  providers: [MAT_BUTTON_TOGGLE_GROUP_VALUE_ACCESSOR],\n  inputs: ['disabled'],\n  host: {\n    'role': 'radiogroup',\n    'class': 'mat-button-toggle-group',\n    '[class.mat-button-toggle-vertical]': 'vertical'\n  },\n  exportAs: 'matButtonToggleGroup',\n})\nexport class MatButtonToggleGroup extends _MatButtonToggleGroupMixinBase\n    implements ControlValueAccessor, CanDisable {\n\n  /** The value for the button toggle group. Should match currently selected button toggle. */\n  private _value: any = null;\n\n  /** The HTML name attribute applied to toggles in this group. */\n  private _name: string = `mat-button-toggle-group-${_uniqueIdCounter++}`;\n\n  /** Whether the button toggle group should be vertical. */\n  private _vertical: boolean = false;\n\n  /** The currently selected button toggle, should match the value. */\n  private _selected: MatButtonToggle | null = null;\n\n  /**\n   * The method to be called in order to update ngModel.\n   * Now `ngModel` binding is not supported in multiple selection mode.\n   */\n  _controlValueAccessorChangeFn: (value: any) => void = () => {};\n\n  /** onTouch function registered via registerOnTouch (ControlValueAccessor). */\n  _onTouched: () => any = () => {};\n\n  /** Child button toggle buttons. */\n  @ContentChildren(forwardRef(() => MatButtonToggle)) _buttonToggles: QueryList<MatButtonToggle>;\n\n  /** `name` attribute for the underlying `input` element. */\n  @Input()\n  get name(): string { return this._name; }\n  set name(value: string) {\n    this._name = value;\n    this._updateButtonToggleNames();\n  }\n\n  /** Whether the toggle group is vertical. */\n  @Input()\n  get vertical(): boolean { return this._vertical; }\n  set vertical(value: boolean) { this._vertical = coerceBooleanProperty(value); }\n\n  /** Value of the toggle group. */\n  @Input()\n  get value(): any { return this._value; }\n  set value(newValue: any) {\n    if (this._value != newValue) {\n      this._value = newValue;\n      this.valueChange.emit(newValue);\n      this._updateSelectedButtonToggleFromValue();\n    }\n  }\n\n  /**\n   * Event that emits whenever the value of the group changes.\n   * Used to facilitate two-way data binding.\n   * @docs-private\n   */\n  @Output() valueChange = new EventEmitter<any>();\n\n  /** Whether the toggle group is selected. */\n  @Input()\n  get selected(): MatButtonToggle | null { return this._selected; }\n  set selected(selected: MatButtonToggle | null) {\n    this._selected = selected;\n    this.value = selected ? selected.value : null;\n\n    if (selected && !selected.checked) {\n      selected.checked = true;\n    }\n  }\n\n  /** Event emitted when the group's value changes. */\n  @Output() change: EventEmitter<MatButtonToggleChange> = new EventEmitter<MatButtonToggleChange>();\n\n  constructor(private _changeDetector: ChangeDetectorRef) {\n    super();\n  }\n\n  private _updateButtonToggleNames(): void {\n    if (this._buttonToggles) {\n      this._buttonToggles.forEach((toggle) => {\n        toggle.name = this._name;\n      });\n    }\n  }\n\n  // TODO: Refactor into shared code with radio.\n  private _updateSelectedButtonToggleFromValue(): void {\n    let isAlreadySelected = this._selected != null && this._selected.value == this._value;\n\n    if (this._buttonToggles != null && !isAlreadySelected) {\n      let matchingButtonToggle = this._buttonToggles.filter(\n          buttonToggle => buttonToggle.value == this._value)[0];\n\n      if (matchingButtonToggle) {\n        this.selected = matchingButtonToggle;\n      } else if (this.value == null) {\n        this.selected = null;\n        this._buttonToggles.forEach(buttonToggle => {\n          buttonToggle.checked = false;\n        });\n      }\n    }\n  }\n\n  /** Dispatch change event with current selection and group value. */\n  _emitChangeEvent(): void {\n    let event = new MatButtonToggleChange();\n    event.source = this._selected;\n    event.value = this._value;\n    this._controlValueAccessorChangeFn(event.value);\n    this.change.emit(event);\n  }\n\n  /**\n   * Sets the model value. Implemented as part of ControlValueAccessor.\n   * @param value Value to be set to the model.\n   */\n  writeValue(value: any) {\n    this.value = value;\n    this._changeDetector.markForCheck();\n  }\n\n  /**\n   * Registers a callback that will be triggered when the value has changed.\n   * Implemented as part of ControlValueAccessor.\n   * @param fn On change callback function.\n   */\n  registerOnChange(fn: (value: any) => void) {\n    this._controlValueAccessorChangeFn = fn;\n  }\n\n  /**\n   * Registers a callback that will be triggered when the control has been touched.\n   * Implemented as part of ControlValueAccessor.\n   * @param fn On touch callback function.\n   */\n  registerOnTouched(fn: any) {\n    this._onTouched = fn;\n  }\n\n  /**\n   * Toggles the disabled state of the component. Implemented as part of ControlValueAccessor.\n   * @param isDisabled Whether the component should be disabled.\n   */\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n    this._markButtonTogglesForCheck();\n  }\n\n  private _markButtonTogglesForCheck() {\n    if (this._buttonToggles) {\n      this._buttonToggles.forEach((toggle) => toggle._markForCheck());\n    }\n  }\n}\n\n/** Multiple selection button-toggle group. `ngModel` is not supported in this mode. */\n@Directive({\n  selector: 'mat-button-toggle-group[multiple]',\n  exportAs: 'matButtonToggleGroup',\n  inputs: ['disabled'],\n  host: {\n    'class': 'mat-button-toggle-group',\n    '[class.mat-button-toggle-vertical]': 'vertical',\n    'role': 'group'\n  }\n})\nexport class MatButtonToggleGroupMultiple extends _MatButtonToggleGroupMixinBase\n    implements CanDisable {\n\n  /** Whether the button toggle group should be vertical. */\n  private _vertical: boolean = false;\n\n  /** Whether the toggle group is vertical. */\n  @Input()\n  get vertical(): boolean { return this._vertical; }\n  set vertical(value) {\n    this._vertical = coerceBooleanProperty(value);\n  }\n}\n\n/** Single button inside of a toggle group. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-button-toggle',\n  templateUrl: 'button-toggle.html',\n  styleUrls: ['button-toggle.css'],\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  exportAs: 'matButtonToggle',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {\n    '[class.mat-button-toggle-standalone]': '!buttonToggleGroup && !buttonToggleGroupMultiple',\n    '[class.mat-button-toggle-checked]': 'checked',\n    '[class.mat-button-toggle-disabled]': 'disabled',\n    'class': 'mat-button-toggle',\n    '[attr.id]': 'id',\n  }\n})\nexport class MatButtonToggle implements OnInit, OnDestroy {\n  /**\n   * Attached to the aria-label attribute of the host element. In most cases, arial-labelledby will\n   * take precedence so this may be omitted.\n   */\n  @Input('aria-label') ariaLabel: string = '';\n\n  /**\n   * Users can specify the `aria-labelledby` attribute which will be forwarded to the input element\n   */\n  @Input('aria-labelledby') ariaLabelledby: string | null = null;\n\n  /** Whether or not this button toggle is checked. */\n  private _checked: boolean = false;\n\n  /** Type of the button toggle. Either 'radio' or 'checkbox'. */\n  _type: ToggleType;\n\n  /** Whether or not this button toggle is disabled. */\n  private _disabled: boolean = false;\n\n  /** Value assigned to this button toggle. */\n  private _value: any = null;\n\n  /** Whether or not the button toggle is a single selection. */\n  private _isSingleSelector: boolean = false;\n\n  /** Unregister function for _buttonToggleDispatcher */\n  private _removeUniqueSelectionListener: () => void = () => {};\n\n  @ViewChild('input') _inputElement: ElementRef;\n\n  /** The parent button toggle group (exclusive selection). Optional. */\n  buttonToggleGroup: MatButtonToggleGroup;\n\n  /** The parent button toggle group (multiple selection). Optional. */\n  buttonToggleGroupMultiple: MatButtonToggleGroupMultiple;\n\n  /** Unique ID for the underlying `input` element. */\n  get inputId(): string { return `${this.id}-input`; }\n\n  /** The unique ID for this button toggle. */\n  @Input() id: string;\n\n  /** HTML's 'name' attribute used to group radios for unique selection. */\n  @Input() name: string;\n\n  /** Whether the button is checked. */\n  @Input()\n  get checked(): boolean { return this._checked; }\n  set checked(newCheckedState: boolean) {\n    if (this._isSingleSelector && newCheckedState) {\n      // Notify all button toggles with the same name (in the same group) to un-check.\n      this._buttonToggleDispatcher.notify(this.id, this.name);\n      this._changeDetectorRef.markForCheck();\n    }\n\n    this._checked = newCheckedState;\n\n    if (newCheckedState && this._isSingleSelector && this.buttonToggleGroup.value != this.value) {\n      this.buttonToggleGroup.selected = this;\n    }\n  }\n\n  /** MatButtonToggleGroup reads this to assign its own value. */\n  @Input()\n  get value(): any { return this._value; }\n  set value(value: any) {\n    if (this._value != value) {\n      if (this.buttonToggleGroup != null && this.checked) {\n        this.buttonToggleGroup.value = value;\n      }\n      this._value = value;\n    }\n  }\n\n  /** Whether the button is disabled. */\n  @Input()\n  get disabled(): boolean {\n    return this._disabled || (this.buttonToggleGroup != null && this.buttonToggleGroup.disabled) ||\n        (this.buttonToggleGroupMultiple != null && this.buttonToggleGroupMultiple.disabled);\n  }\n  set disabled(value: boolean) {\n    this._disabled = coerceBooleanProperty(value);\n  }\n\n  /** Event emitted when the group value changes. */\n  @Output() change: EventEmitter<MatButtonToggleChange> = new EventEmitter<MatButtonToggleChange>();\n\n  constructor(@Optional() toggleGroup: MatButtonToggleGroup,\n              @Optional() toggleGroupMultiple: MatButtonToggleGroupMultiple,\n              private _changeDetectorRef: ChangeDetectorRef,\n              private _buttonToggleDispatcher: UniqueSelectionDispatcher,\n              private _elementRef: ElementRef,\n              private _focusMonitor: FocusMonitor) {\n\n    this.buttonToggleGroup = toggleGroup;\n    this.buttonToggleGroupMultiple = toggleGroupMultiple;\n\n    if (this.buttonToggleGroup) {\n      this._removeUniqueSelectionListener =\n        _buttonToggleDispatcher.listen((id: string, name: string) => {\n          if (id != this.id && name == this.name) {\n            this.checked = false;\n            this._changeDetectorRef.markForCheck();\n          }\n        });\n\n      this._type = 'radio';\n      this.name = this.buttonToggleGroup.name;\n      this._isSingleSelector = true;\n    } else {\n      // Even if there is no group at all, treat the button toggle as a checkbox so it can be\n      // toggled on or off.\n      this._type = 'checkbox';\n      this._isSingleSelector = false;\n    }\n  }\n\n  ngOnInit() {\n    if (this.id == null) {\n      this.id = `mat-button-toggle-${_uniqueIdCounter++}`;\n    }\n\n    if (this.buttonToggleGroup && this._value == this.buttonToggleGroup.value) {\n      this._checked = true;\n    }\n    this._focusMonitor.monitor(this._elementRef.nativeElement, true);\n  }\n\n  /** Focuses the button. */\n  focus() {\n    this._inputElement.nativeElement.focus();\n  }\n\n  /** Toggle the state of the current button toggle. */\n  private _toggle(): void {\n    this.checked = !this.checked;\n  }\n\n  /** Checks the button toggle due to an interaction with the underlying native input. */\n  _onInputChange(event: Event) {\n    event.stopPropagation();\n\n    if (this._isSingleSelector) {\n      // Propagate the change one-way via the group, which will in turn mark this\n      // button toggle as checked.\n      let groupValueChanged = this.buttonToggleGroup.selected != this;\n      this.checked = true;\n      this.buttonToggleGroup.selected = this;\n      this.buttonToggleGroup._onTouched();\n      if (groupValueChanged) {\n        this.buttonToggleGroup._emitChangeEvent();\n      }\n    } else {\n      this._toggle();\n    }\n\n    // Emit a change event when the native input does.\n    this._emitChangeEvent();\n  }\n\n  _onInputClick(event: Event) {\n    // We have to stop propagation for click events on the visual hidden input element.\n    // By default, when a user clicks on a label element, a generated click event will be\n    // dispatched on the associated input element. Since we are using a label element as our\n    // root container, the click event on the `slide-toggle` will be executed twice.\n    // The real click event will bubble up, and the generated click event also tries to bubble up.\n    // This will lead to multiple click events.\n    // Preventing bubbling for the second event will solve that issue.\n    event.stopPropagation();\n  }\n\n  /** Dispatch change event with current value. */\n  private _emitChangeEvent(): void {\n    let event = new MatButtonToggleChange();\n    event.source = this;\n    event.value = this._value;\n    this.change.emit(event);\n  }\n\n  // Unregister buttonToggleDispatcherListener on destroy\n  ngOnDestroy(): void {\n    this._removeUniqueSelectionListener();\n  }\n\n  /**\n   * Marks the button toggle as needing checking for change detection.\n   * This method is exposed because the parent button toggle group will directly\n   * update bound properties of the radio button.\n   */\n  _markForCheck() {\n    // When group value changes, the button will not be notified. Use `markForCheck` to explicit\n    // update button toggle's status\n    this._changeDetectorRef.markForCheck();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatButtonToggleGroup, MatButtonToggleGroupMultiple, MatButtonToggle} from './button-toggle';\nimport {MatCommonModule} from '@angular/material/core';\nimport {UNIQUE_SELECTION_DISPATCHER_PROVIDER} from '@angular/cdk/collections';\nimport {A11yModule} from '@angular/cdk/a11y';\n\n\n@NgModule({\n  imports: [MatCommonModule, A11yModule],\n  exports: [\n    MatButtonToggleGroup,\n    MatButtonToggleGroupMultiple,\n    MatButtonToggle,\n    MatCommonModule,\n  ],\n  declarations: [MatButtonToggleGroup, MatButtonToggleGroupMultiple, MatButtonToggle],\n  providers: [UNIQUE_SELECTION_DISPATCHER_PROVIDER]\n})\nexport class MatButtonToggleModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ViewEncapsulation,\n  ChangeDetectionStrategy,\n  Directive,\n  Input,\n} from '@angular/core';\n\n\n/**\n * Content of a card, needed as it's used as a selector in the API.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-card-content',\n  host: {'class': 'mat-card-content'}\n})\nexport class MatCardContent {}\n\n/**\n * Title of a card, needed as it's used as a selector in the API.\n * @docs-private\n */\n@Directive({\n  selector: `mat-card-title, [mat-card-title], [matCardTitle]`,\n  host: {\n    'class': 'mat-card-title'\n  }\n})\nexport class MatCardTitle {}\n\n/**\n * Sub-title of a card, needed as it's used as a selector in the API.\n * @docs-private\n */\n@Directive({\n  selector: `mat-card-subtitle, [mat-card-subtitle], [matCardSubtitle]`,\n  host: {\n    'class': 'mat-card-subtitle'\n  }\n})\nexport class MatCardSubtitle {}\n\n/**\n * Action section of a card, needed as it's used as a selector in the API.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-card-actions',\n  exportAs: 'matCardActions',\n  host: {\n    'class': 'mat-card-actions',\n    '[class.mat-card-actions-align-end]': 'align === \"end\"',\n  }\n})\nexport class MatCardActions {\n  /** Position of the actions inside the card. */\n  @Input() align: 'start' | 'end' = 'start';\n}\n\n/**\n * Footer of a card, needed as it's used as a selector in the API.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-card-footer',\n  host: {'class': 'mat-card-footer'}\n})\nexport class MatCardFooter {}\n\n/**\n * Image used in a card, needed to add the mat- CSS styling.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-card-image], [matCardImage]',\n  host: {'class': 'mat-card-image'}\n})\nexport class MatCardImage {}\n\n/**\n * Image used in a card, needed to add the mat- CSS styling.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-card-sm-image], [matCardImageSmall]',\n  host: {'class': 'mat-card-sm-image'}\n})\nexport class MatCardSmImage {}\n\n/**\n * Image used in a card, needed to add the mat- CSS styling.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-card-md-image], [matCardImageMedium]',\n  host: {'class': 'mat-card-md-image'}\n})\nexport class MatCardMdImage {}\n\n/**\n * Image used in a card, needed to add the mat- CSS styling.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-card-lg-image], [matCardImageLarge]',\n  host: {'class': 'mat-card-lg-image'}\n})\nexport class MatCardLgImage {}\n\n/**\n * Large image used in a card, needed to add the mat- CSS styling.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-card-xl-image], [matCardImageXLarge]',\n  host: {'class': 'mat-card-xl-image'}\n})\nexport class MatCardXlImage {}\n\n/**\n * Avatar image used in a card, needed to add the mat- CSS styling.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-card-avatar], [matCardAvatar]',\n  host: {'class': 'mat-card-avatar'}\n})\nexport class MatCardAvatar {}\n\n\n/**\n * A basic content container component that adds the styles of a Material design card.\n *\n * While this component can be used alone, it also provides a number\n * of preset styles for common card sections, including:\n * - mat-card-title\n * - mat-card-subtitle\n * - mat-card-content\n * - mat-card-actions\n * - mat-card-footer\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-card',\n  exportAs: 'matCard',\n  templateUrl: 'card.html',\n  styleUrls: ['card.css'],\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {'class': 'mat-card'}\n})\nexport class MatCard {}\n\n\n/**\n * Component intended to be used within the `<mat-card>` component. It adds styles for a\n * preset header section (i.e. a title, subtitle, and avatar layout).\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-card-header',\n  templateUrl: 'card-header.html',\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {'class': 'mat-card-header'}\n})\nexport class MatCardHeader {}\n\n\n/**\n * Component intended to be used within the <mat-card> component. It adds styles for a preset\n * layout that groups an image with a title section.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-card-title-group',\n  templateUrl: 'card-title-group.html',\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {'class': 'mat-card-title-group'}\n})\nexport class MatCardTitleGroup {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {\n  MatCard,\n  MatCardHeader,\n  MatCardTitleGroup,\n  MatCardContent,\n  MatCardTitle,\n  MatCardSubtitle,\n  MatCardActions,\n  MatCardFooter,\n  MatCardSmImage,\n  MatCardMdImage,\n  MatCardLgImage,\n  MatCardImage,\n  MatCardXlImage,\n  MatCardAvatar,\n} from './card';\n\n\n@NgModule({\n  imports: [MatCommonModule],\n  exports: [\n    MatCard,\n    MatCardHeader,\n    MatCardTitleGroup,\n    MatCardContent,\n    MatCardTitle,\n    MatCardSubtitle,\n    MatCardActions,\n    MatCardFooter,\n    MatCardSmImage,\n    MatCardMdImage,\n    MatCardLgImage,\n    MatCardImage,\n    MatCardXlImage,\n    MatCardAvatar,\n    MatCommonModule,\n  ],\n  declarations: [\n    MatCard, MatCardHeader, MatCardTitleGroup, MatCardContent, MatCardTitle, MatCardSubtitle,\n    MatCardActions, MatCardFooter, MatCardSmImage, MatCardMdImage, MatCardLgImage, MatCardImage,\n    MatCardXlImage, MatCardAvatar,\n  ],\n})\nexport class MatCardModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {InjectionToken} from '@angular/core';\n\n\n/**\n * Checkbox click action when user click on input element.\n * noop: Do not toggle checked or indeterminate.\n * check: Only toggle checked status, ignore indeterminate.\n * check-indeterminate: Toggle checked status, set indeterminate to false. Default behavior.\n * undefined: Same as `check-indeterminate`.\n */\nexport type MatCheckboxClickAction = 'noop' | 'check' | 'check-indeterminate' | undefined;\n\n/**\n * Injection token that can be used to specify the checkbox click behavior.\n */\nexport const MAT_CHECKBOX_CLICK_ACTION =\n    new InjectionToken<MatCheckboxClickAction>('mat-checkbox-click-action');\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {ENTER, SPACE} from '@angular/cdk/keycodes';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  EventEmitter,\n  Input,\n  Optional,\n  Output,\n  QueryList,\n  ViewEncapsulation,\n  InjectionToken,\n  Inject,\n} from '@angular/core';\nimport {MatOptgroup} from './optgroup';\n\n/**\n * Option IDs need to be unique across components, so this counter exists outside of\n * the component definition.\n */\nlet _uniqueIdCounter = 0;\n\n/** Event object emitted by MatOption when selected or deselected. */\nexport class MatOptionSelectionChange {\n  constructor(\n    /** Reference to the option that emitted the event. */\n    public source: MatOption,\n    /** Whether the change in the option's value was a result of a user action. */\n    public isUserInput = false) { }\n}\n\n/**\n * Describes a parent component that manages a list of options.\n * Contains properties that the options can inherit.\n * @docs-private\n */\nexport interface MatOptionParentComponent {\n  disableRipple?: boolean;\n  multiple?: boolean;\n}\n\n/**\n * Injection token used to provide the parent component to options.\n */\nexport const MAT_OPTION_PARENT_COMPONENT =\n    new InjectionToken<MatOptionParentComponent>('MAT_OPTION_PARENT_COMPONENT');\n\n/**\n * Single option inside of a `<mat-select>` element.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-option',\n  exportAs: 'matOption',\n  host: {\n    'role': 'option',\n    '[attr.tabindex]': '_getTabIndex()',\n    '[class.mat-selected]': 'selected',\n    '[class.mat-option-multiple]': 'multiple',\n    '[class.mat-active]': 'active',\n    '[id]': 'id',\n    '[attr.aria-selected]': 'selected.toString()',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[class.mat-option-disabled]': 'disabled',\n    '(click)': '_selectViaInteraction()',\n    '(keydown)': '_handleKeydown($event)',\n    'class': 'mat-option',\n  },\n  templateUrl: 'option.html',\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatOption {\n  private _selected = false;\n  private _active = false;\n  private _disabled = false;\n  private _id = `mat-option-${_uniqueIdCounter++}`;\n\n  /** Whether the wrapping component is in multiple selection mode. */\n  get multiple() { return this._parent && this._parent.multiple; }\n\n  /** The unique ID of the option. */\n  get id(): string { return this._id; }\n\n  /** Whether or not the option is currently selected. */\n  get selected(): boolean { return this._selected; }\n\n  /** The form value of the option. */\n  @Input() value: any;\n\n  /** Whether the option is disabled. */\n  @Input()\n  get disabled() { return (this.group && this.group.disabled) || this._disabled; }\n  set disabled(value: any) { this._disabled = coerceBooleanProperty(value); }\n\n  /** Whether ripples for the option are disabled. */\n  get disableRipple() { return this._parent && this._parent.disableRipple; }\n\n  /** Event emitted when the option is selected or deselected. */\n  @Output() onSelectionChange = new EventEmitter<MatOptionSelectionChange>();\n\n  constructor(\n    private _element: ElementRef,\n    private _changeDetectorRef: ChangeDetectorRef,\n    @Optional() @Inject(MAT_OPTION_PARENT_COMPONENT) private _parent: MatOptionParentComponent,\n    @Optional() readonly group: MatOptgroup) {}\n\n  /**\n   * Whether or not the option is currently active and ready to be selected.\n   * An active option displays styles as if it is focused, but the\n   * focus is actually retained somewhere else. This comes in handy\n   * for components like autocomplete where focus must remain on the input.\n   */\n  get active(): boolean {\n    return this._active;\n  }\n\n  /**\n   * The displayed value of the option. It is necessary to show the selected option in the\n   * select's trigger.\n   */\n  get viewValue(): string {\n    // TODO(kara): Add input property alternative for node envs.\n    return (this._getHostElement().textContent || '').trim();\n  }\n\n  /** Selects the option. */\n  select(): void {\n    this._selected = true;\n    this._changeDetectorRef.markForCheck();\n    this._emitSelectionChangeEvent();\n  }\n\n  /** Deselects the option. */\n  deselect(): void {\n    this._selected = false;\n    this._changeDetectorRef.markForCheck();\n    this._emitSelectionChangeEvent();\n  }\n\n  /** Sets focus onto this option. */\n  focus(): void {\n    const element = this._getHostElement();\n\n    if (typeof element.focus === 'function') {\n      element.focus();\n    }\n  }\n\n  /**\n   * This method sets display styles on the option to make it appear\n   * active. This is used by the ActiveDescendantKeyManager so key\n   * events will display the proper options as active on arrow key events.\n   */\n  setActiveStyles(): void {\n    if (!this._active) {\n      this._active = true;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  /**\n   * This method removes display styles on the option that made it appear\n   * active. This is used by the ActiveDescendantKeyManager so key\n   * events will display the proper options as active on arrow key events.\n   */\n  setInactiveStyles(): void {\n    if (this._active) {\n      this._active = false;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  /** Gets the label to be used when determining whether the option should be focused. */\n  getLabel(): string {\n    return this.viewValue;\n  }\n\n  /** Ensures the option is selected when activated from the keyboard. */\n  _handleKeydown(event: KeyboardEvent): void {\n    if (event.keyCode === ENTER || event.keyCode === SPACE) {\n      this._selectViaInteraction();\n\n      // Prevent the page from scrolling down and form submits.\n      event.preventDefault();\n    }\n  }\n\n  /**\n   * Selects the option while indicating the selection came from the user. Used to\n   * determine if the select's view -> model callback should be invoked.\n   */\n  _selectViaInteraction(): void {\n    if (!this.disabled) {\n      this._selected = this.multiple ? !this._selected : true;\n      this._changeDetectorRef.markForCheck();\n      this._emitSelectionChangeEvent(true);\n    }\n  }\n\n  /** Returns the correct tabindex for the option depending on disabled state. */\n  _getTabIndex(): string {\n    return this.disabled ? '-1' : '0';\n  }\n\n  /** Gets the host DOM element. */\n  _getHostElement(): HTMLElement {\n    return this._element.nativeElement;\n  }\n\n  /** Emits the selection change event. */\n  private _emitSelectionChangeEvent(isUserInput = false): void {\n    this.onSelectionChange.emit(new MatOptionSelectionChange(this, isUserInput));\n  }\n\n  /**\n   * Counts the amount of option group labels that precede the specified option.\n   * @param optionIndex Index of the option at which to start counting.\n   * @param options Flat list of all of the options.\n   * @param optionGroups Flat list of all of the option groups.\n   */\n  static countGroupLabelsBeforeOption(optionIndex: number, options: QueryList<MatOption>,\n    optionGroups: QueryList<MatOptgroup>): number {\n\n    if (optionGroups.length) {\n      let optionsArray = options.toArray();\n      let groups = optionGroups.toArray();\n      let groupCounter = 0;\n\n      for (let i = 0; i < optionIndex + 1; i++) {\n        if (optionsArray[i].group && optionsArray[i].group === groups[groupCounter]) {\n          groupCounter++;\n        }\n      }\n\n      return groupCounter;\n    }\n\n    return 0;\n  }\n\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {MatRippleModule} from '../ripple/index';\nimport {MatPseudoCheckboxModule} from '../selection/index';\nimport {MatOption} from './option';\nimport {MatOptgroup} from './optgroup';\n\n\n@NgModule({\n  imports: [MatRippleModule, CommonModule, MatPseudoCheckboxModule],\n  exports: [MatOption, MatOptgroup],\n  declarations: [MatOption, MatOptgroup]\n})\nexport class MatOptionModule {}\n\n\nexport * from './option';\nexport * from './optgroup';\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {InjectionToken} from '@angular/core';\n\n/** InjectionToken that can be used to specify the global label options. */\nexport const MAT_LABEL_GLOBAL_OPTIONS =\n  new InjectionToken<LabelOptions>('mat-label-global-options');\n\n/** Type for the available floatLabel values. */\nexport type FloatLabelType = 'always' | 'never' | 'auto';\n\n/** Configurable options for floating labels. */\nexport interface LabelOptions {\n  /**\n   * Whether the label should float `always`, `never`, or `auto` (only when necessary).\n   * Default behavior is assumed to be `auto`.\n   */\n  float?: FloatLabelType;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, Input} from '@angular/core';\n\n\nlet nextUniqueId = 0;\n\n\n/** Single error message to be shown underneath the form field. */\n@Directive({\n  selector: 'mat-error',\n  host: {\n    'class': 'mat-error',\n    'role': 'alert',\n    '[attr.id]': 'id',\n  }\n})\nexport class MatError {\n  @Input() id: string = `mat-error-${nextUniqueId++}`;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Observable} from 'rxjs/Observable';\nimport {NgControl} from '@angular/forms';\n\n\n/** An interface which allows a control to work inside of a `MatFormField`. */\nexport abstract class MatFormFieldControl<T> {\n  /** The value of the control. */\n  value: T | null;\n\n  /**\n   * Stream that emits whenever the state of the control changes such that the parent `MatFormField`\n   * needs to run change detection.\n   */\n  readonly stateChanges: Observable<void>;\n\n  /** The element ID for this control. */\n  readonly id: string;\n\n  /** The placeholder for this control. */\n  readonly placeholder: string;\n\n  /** Gets the NgControl for this control. */\n  readonly ngControl: NgControl | null;\n\n  /** Whether the control is focused. */\n  readonly focused: boolean;\n\n  /** Whether the control is empty. */\n  readonly empty: boolean;\n\n  /** Whether the `MatFormField` label should try to float. */\n  readonly shouldLabelFloat?: boolean;\n\n  /**\n   * Whether the `MatFormField` placeholder should try to float.\n   * @deprecated Use `shouldLabelFloat` instead.\n   */\n  readonly shouldPlaceholderFloat?: boolean;\n\n  /** Whether the control is required. */\n  readonly required: boolean;\n\n  /** Whether the control is disabled. */\n  readonly disabled: boolean;\n\n  /** Whether the control is in an error state. */\n  readonly errorState: boolean;\n\n  /**\n   * An optional name for the control type that can be used to distinguish `mat-form-field` elements\n   * based on their control type. The form field will add a class,\n   * `mat-form-field-type-{{controlType}}` to its root element.\n   */\n  readonly controlType?: string;\n\n  /** Sets the list of element IDs that currently describe this control. */\n  abstract setDescribedByIds(ids: string[]): void;\n\n  /** Handles a click on the control's container. */\n  abstract onContainerClick(event: MouseEvent): void;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, Input} from '@angular/core';\n\n\nlet nextUniqueId = 0;\n\n\n/** Hint text to be shown underneath the form field control. */\n@Directive({\n  selector: 'mat-hint',\n  host: {\n    'class': 'mat-hint',\n    '[class.mat-right]': 'align == \"end\"',\n    '[attr.id]': 'id',\n    // Remove align attribute to prevent it from interfering with layout.\n    '[attr.align]': 'null',\n  }\n})\nexport class MatHint {\n  /** Whether to align the hint label at the start or end of the line. */\n  @Input() align: 'start' | 'end' = 'start';\n\n  /** Unique ID for the hint. Used for the aria-describedby on the form field control. */\n  @Input() id: string = `mat-hint-${nextUniqueId++}`;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive} from '@angular/core';\n\n\n/** The placeholder text for an `MatFormField`. */\n@Directive({\n  selector: 'mat-placeholder'\n})\nexport class MatPlaceholder {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive} from '@angular/core';\n\n\n/** The floating label for a `mat-form-field`. */\n@Directive({\n  selector: 'mat-label'\n})\nexport class MatLabel {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive} from '@angular/core';\n\n\n/** Prefix to be placed the the front of the form field. */\n@Directive({\n  selector: '[matPrefix]',\n})\nexport class MatPrefix {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive} from '@angular/core';\n\n\n/** Suffix to be placed at the end of the form field. */\n@Directive({\n  selector: '[matSuffix]',\n})\nexport class MatSuffix {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/** Animations used by the MatFormField. */\nexport const matFormFieldAnimations: {\n  readonly transitionMessages: AnimationTriggerMetadata\n} = {\n  /** Animation that transitions the form field's error and hint messages. */\n  transitionMessages: trigger('transitionMessages', [\n    // TODO(mmalerba): Use angular animations for label animation as well.\n    state('enter', style({ opacity: 1, transform: 'translateY(0%)' })),\n    transition('void => enter', [\n      style({ opacity: 0, transform: 'translateY(-100%)' }),\n      animate('300ms cubic-bezier(0.55, 0, 0.55, 0.2)'),\n    ]),\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {take} from 'rxjs/operators/take';\nimport {startWith} from 'rxjs/operators/startWith';\nimport {\n  AfterContentChecked,\n  AfterContentInit,\n  AfterViewInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  ContentChildren,\n  ElementRef,\n  Inject,\n  Input,\n  Optional,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {FloatLabelType, MAT_LABEL_GLOBAL_OPTIONS, LabelOptions} from '@angular/material/core';\nimport {fromEvent} from 'rxjs/observable/fromEvent';\nimport {MatError} from './error';\nimport {MatFormFieldControl} from './form-field-control';\nimport {\n  getMatFormFieldDuplicatedHintError,\n  getMatFormFieldMissingControlError,\n  getMatFormFieldPlaceholderConflictError,\n} from './form-field-errors';\nimport {MatHint} from './hint';\nimport {MatPlaceholder} from './placeholder';\nimport {MatLabel} from './label';\nimport {MatPrefix} from './prefix';\nimport {MatSuffix} from './suffix';\nimport {matFormFieldAnimations} from './form-field-animations';\n\n\nlet nextUniqueId = 0;\n\n\n/** Container for form controls that applies Material Design styling and behavior. */\n@Component({\n  moduleId: module.id,\n  // TODO(mmalerba): the input-container selectors and classes are deprecated and will be removed.\n  selector: 'mat-input-container, mat-form-field',\n  exportAs: 'matFormField',\n  templateUrl: 'form-field.html',\n  // MatInput is a directive and can't have styles, so we need to include its styles here.\n  // The MatInput styles are fairly minimal so it shouldn't be a big deal for people who\n  // aren't using MatInput.\n  styleUrls: ['form-field.css', '../input/input.css'],\n  animations: [matFormFieldAnimations.transitionMessages],\n  host: {\n    'class': 'mat-input-container mat-form-field',\n    '[class.mat-input-invalid]': '_control.errorState',\n    '[class.mat-form-field-invalid]': '_control.errorState',\n    '[class.mat-form-field-can-float]': '_canLabelFloat',\n    '[class.mat-form-field-should-float]': '_shouldLabelFloat()',\n    '[class.mat-form-field-hide-placeholder]': '_hideControlPlaceholder()',\n    '[class.mat-form-field-disabled]': '_control.disabled',\n    '[class.mat-focused]': '_control.focused',\n    '[class.mat-primary]': 'color == \"primary\"',\n    '[class.mat-accent]': 'color == \"accent\"',\n    '[class.mat-warn]': 'color == \"warn\"',\n    '[class.ng-untouched]': '_shouldForward(\"untouched\")',\n    '[class.ng-touched]': '_shouldForward(\"touched\")',\n    '[class.ng-pristine]': '_shouldForward(\"pristine\")',\n    '[class.ng-dirty]': '_shouldForward(\"dirty\")',\n    '[class.ng-valid]': '_shouldForward(\"valid\")',\n    '[class.ng-invalid]': '_shouldForward(\"invalid\")',\n    '[class.ng-pending]': '_shouldForward(\"pending\")',\n  },\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\n\nexport class MatFormField implements AfterViewInit, AfterContentInit, AfterContentChecked {\n  private _labelOptions: LabelOptions;\n\n  /** Color of the form field underline, based on the theme. */\n  @Input() color: 'primary' | 'accent' | 'warn' = 'primary';\n\n  /** @deprecated Use `color` instead. */\n  @Input()\n  get dividerColor(): 'primary' | 'accent' | 'warn' { return this.color; }\n  set dividerColor(value) { this.color = value; }\n\n  /** Whether the required marker should be hidden. */\n  @Input()\n  get hideRequiredMarker(): boolean { return this._hideRequiredMarker; }\n  set hideRequiredMarker(value: boolean) {\n    this._hideRequiredMarker = coerceBooleanProperty(value);\n  }\n  private _hideRequiredMarker: boolean;\n\n  /** Override for the logic that disables the label animation in certain cases. */\n  private _showAlwaysAnimate = false;\n\n  /** Whether the floating label should always float or not. */\n  get _shouldAlwaysFloat() {\n    return this._floatLabel === 'always' && !this._showAlwaysAnimate;\n  }\n\n  /** Whether the label can float or not. */\n  get _canLabelFloat() { return this._floatLabel !== 'never'; }\n\n  /** State of the mat-hint and mat-error animations. */\n  _subscriptAnimationState: string = '';\n\n  /** Text for the form field hint. */\n  @Input()\n  get hintLabel(): string { return this._hintLabel; }\n  set hintLabel(value: string) {\n    this._hintLabel = value;\n    this._processHints();\n  }\n  private _hintLabel = '';\n\n  // Unique id for the hint label.\n  _hintLabelId: string = `mat-hint-${nextUniqueId++}`;\n\n  /**\n   * Whether the placeholder should always float, never float or float as the user types.\n   * @deprecated Use floatLabel instead.\n   */\n  @Input()\n  get floatPlaceholder(): FloatLabelType { return this._floatLabel; }\n  set floatPlaceholder(value: FloatLabelType) { this.floatLabel = value; }\n\n  /** Whether the label should always float, never float or float as the user types. */\n  @Input()\n  get floatLabel(): FloatLabelType { return this._floatLabel; }\n  set floatLabel(value: FloatLabelType) {\n    if (value !== this._floatLabel) {\n      this._floatLabel = value || this._labelOptions.float || 'auto';\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n  private _floatLabel: FloatLabelType;\n\n  /** Reference to the form field's underline element. */\n  @ViewChild('underline') underlineRef: ElementRef;\n  @ViewChild('connectionContainer') _connectionContainerRef: ElementRef;\n  @ViewChild('inputContainer') _inputContainerRef: ElementRef;\n  @ViewChild('label') private _label: ElementRef;\n  @ContentChild(MatFormFieldControl) _control: MatFormFieldControl<any>;\n  @ContentChild(MatPlaceholder) _placeholderChild: MatPlaceholder;\n  @ContentChild(MatLabel) _labelChild: MatLabel;\n  @ContentChildren(MatError) _errorChildren: QueryList<MatError>;\n  @ContentChildren(MatHint) _hintChildren: QueryList<MatHint>;\n  @ContentChildren(MatPrefix) _prefixChildren: QueryList<MatPrefix>;\n  @ContentChildren(MatSuffix) _suffixChildren: QueryList<MatSuffix>;\n\n  constructor(\n      public _elementRef: ElementRef,\n      private _changeDetectorRef: ChangeDetectorRef,\n      @Optional() @Inject(MAT_LABEL_GLOBAL_OPTIONS) labelOptions: LabelOptions) {\n    this._labelOptions = labelOptions ? labelOptions : {};\n    this.floatLabel = this._labelOptions.float || 'auto';\n  }\n\n  ngAfterContentInit() {\n    this._validateControlChild();\n    if (this._control.controlType) {\n      this._elementRef.nativeElement.classList\n          .add(`mat-form-field-type-${this._control.controlType}`);\n    }\n\n    // Subscribe to changes in the child control state in order to update the form field UI.\n    this._control.stateChanges.pipe(startWith(null!)).subscribe(() => {\n      this._validatePlaceholders();\n      this._syncDescribedByIds();\n      this._changeDetectorRef.markForCheck();\n    });\n\n    let ngControl = this._control.ngControl;\n    if (ngControl && ngControl.valueChanges) {\n      ngControl.valueChanges.subscribe(() => {\n        this._changeDetectorRef.markForCheck();\n      });\n    }\n\n    // Re-validate when the number of hints changes.\n    this._hintChildren.changes.pipe(startWith(null)).subscribe(() => {\n      this._processHints();\n      this._changeDetectorRef.markForCheck();\n    });\n\n    // Update the aria-described by when the number of errors changes.\n    this._errorChildren.changes.pipe(startWith(null)).subscribe(() => {\n      this._syncDescribedByIds();\n      this._changeDetectorRef.markForCheck();\n    });\n  }\n\n  ngAfterContentChecked() {\n    this._validateControlChild();\n  }\n\n  ngAfterViewInit() {\n    // Avoid animations on load.\n    this._subscriptAnimationState = 'enter';\n    this._changeDetectorRef.detectChanges();\n  }\n\n  /** Determines whether a class from the NgControl should be forwarded to the host element. */\n  _shouldForward(prop: string): boolean {\n    let ngControl = this._control ? this._control.ngControl : null;\n    return ngControl && (ngControl as any)[prop];\n  }\n\n  _hasPlaceholder() {\n    return !!(this._control.placeholder || this._placeholderChild);\n  }\n\n  _hasLabel() {\n    return !!this._labelChild;\n  }\n\n  _shouldLabelFloat() {\n    return this._canLabelFloat && (this._control.shouldLabelFloat ||\n        this._control.shouldPlaceholderFloat || this._shouldAlwaysFloat);\n  }\n\n  _hideControlPlaceholder() {\n    return !this._hasLabel() || !this._shouldLabelFloat();\n  }\n\n  _hasFloatingLabel() {\n    return this._hasLabel() || this._hasPlaceholder();\n  }\n\n  /** Determines whether to display hints or errors. */\n  _getDisplayedMessages(): 'error' | 'hint' {\n    return (this._errorChildren && this._errorChildren.length > 0 &&\n        this._control.errorState) ? 'error' : 'hint';\n  }\n\n  /** Animates the placeholder up and locks it in position. */\n  _animateAndLockLabel(): void {\n    if (this._hasFloatingLabel() && this._canLabelFloat) {\n      this._showAlwaysAnimate = true;\n      this._floatLabel = 'always';\n\n      fromEvent(this._label.nativeElement, 'transitionend').pipe(take(1)).subscribe(() => {\n        this._showAlwaysAnimate = false;\n      });\n\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  /**\n   * Ensure that there is only one placeholder (either `placeholder` attribute on the child control\n   * or child element with the `mat-placeholder` directive).\n   */\n  private _validatePlaceholders() {\n    if (this._control.placeholder && this._placeholderChild) {\n      throw getMatFormFieldPlaceholderConflictError();\n    }\n  }\n\n  /** Does any extra processing that is required when handling the hints. */\n  private _processHints() {\n    this._validateHints();\n    this._syncDescribedByIds();\n  }\n\n  /**\n   * Ensure that there is a maximum of one of each `<mat-hint>` alignment specified, with the\n   * attribute being considered as `align=\"start\"`.\n   */\n  private _validateHints() {\n    if (this._hintChildren) {\n      let startHint: MatHint;\n      let endHint: MatHint;\n      this._hintChildren.forEach((hint: MatHint) => {\n        if (hint.align == 'start') {\n          if (startHint || this.hintLabel) {\n            throw getMatFormFieldDuplicatedHintError('start');\n          }\n          startHint = hint;\n        } else if (hint.align == 'end') {\n          if (endHint) {\n            throw getMatFormFieldDuplicatedHintError('end');\n          }\n          endHint = hint;\n        }\n      });\n    }\n  }\n\n  /**\n   * Sets the list of element IDs that describe the child control. This allows the control to update\n   * its `aria-describedby` attribute accordingly.\n   */\n  private _syncDescribedByIds() {\n    if (this._control) {\n      let ids: string[] = [];\n\n      if (this._getDisplayedMessages() === 'hint') {\n        let startHint = this._hintChildren ?\n            this._hintChildren.find(hint => hint.align === 'start') : null;\n        let endHint = this._hintChildren ?\n            this._hintChildren.find(hint => hint.align === 'end') : null;\n\n        if (startHint) {\n          ids.push(startHint.id);\n        } else if (this._hintLabel) {\n          ids.push(this._hintLabelId);\n        }\n\n        if (endHint) {\n          ids.push(endHint.id);\n        }\n      } else if (this._errorChildren) {\n        ids = this._errorChildren.map(error => error.id);\n      }\n\n      this._control.setDescribedByIds(ids);\n    }\n  }\n\n  /** Throws an error if the form field's control is missing. */\n  protected _validateControlChild() {\n    if (!this._control) {\n      throw getMatFormFieldMissingControlError();\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {PlatformModule} from '@angular/cdk/platform';\nimport {MatError} from './error';\nimport {MatFormField} from './form-field';\nimport {MatHint} from './hint';\nimport {MatPlaceholder} from './placeholder';\nimport {MatPrefix} from './prefix';\nimport {MatSuffix} from './suffix';\nimport {MatLabel} from './label';\n\n\n@NgModule({\n  declarations: [\n    MatError,\n    MatHint,\n    MatFormField,\n    MatPlaceholder,\n    MatPrefix,\n    MatSuffix,\n    MatLabel,\n  ],\n  imports: [\n    CommonModule,\n    PlatformModule,\n  ],\n  exports: [\n    MatError,\n    MatHint,\n    MatFormField,\n    MatPlaceholder,\n    MatPrefix,\n    MatSuffix,\n    MatLabel,\n  ],\n})\nexport class MatFormFieldModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  AfterContentInit,\n  Component,\n  ContentChildren,\n  ElementRef,\n  Input,\n  QueryList,\n  TemplateRef,\n  ViewChild,\n  ViewEncapsulation,\n  ChangeDetectorRef,\n  ChangeDetectionStrategy,\n  EventEmitter,\n  Output,\n} from '@angular/core';\nimport {\n  MatOption,\n  MatOptgroup,\n  MAT_OPTION_PARENT_COMPONENT,\n  mixinDisableRipple,\n  CanDisableRipple,\n} from '@angular/material/core';\nimport {ActiveDescendantKeyManager} from '@angular/cdk/a11y';\n\n\n/**\n * Autocomplete IDs need to be unique across components, so this counter exists outside of\n * the component definition.\n */\nlet _uniqueAutocompleteIdCounter = 0;\n\n/** Event object that is emitted when an autocomplete option is selected */\nexport class MatAutocompleteSelectedEvent {\n  constructor(\n    /** Reference to the autocomplete panel that emitted the event. */\n    public source: MatAutocomplete,\n    /** Option that was selected. */\n    public option: MatOption) { }\n}\n\n// Boilerplate for applying mixins to MatAutocomplete.\n/** @docs-private */\nexport class MatAutocompleteBase {}\nexport const _MatAutocompleteMixinBase = mixinDisableRipple(MatAutocompleteBase);\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-autocomplete',\n  templateUrl: 'autocomplete.html',\n  styleUrls: ['autocomplete.css'],\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  exportAs: 'matAutocomplete',\n  inputs: ['disableRipple'],\n  host: {\n    'class': 'mat-autocomplete'\n  },\n  providers: [\n    {provide: MAT_OPTION_PARENT_COMPONENT, useExisting: MatAutocomplete}\n  ]\n})\nexport class MatAutocomplete extends _MatAutocompleteMixinBase implements AfterContentInit,\n  CanDisableRipple {\n\n  /** Manages active item in option list based on key events. */\n  _keyManager: ActiveDescendantKeyManager<MatOption>;\n\n  /** Whether the autocomplete panel should be visible, depending on option length. */\n  showPanel = false;\n\n  /** Whether the autocomplete panel is open. */\n  get isOpen(): boolean {\n    return this._isOpen && this.showPanel;\n  }\n  _isOpen: boolean = false;\n\n  /** @docs-private */\n  @ViewChild(TemplateRef) template: TemplateRef<any>;\n\n  /** Element for the panel containing the autocomplete options. */\n  @ViewChild('panel') panel: ElementRef;\n\n  /** @docs-private */\n  @ContentChildren(MatOption, { descendants: true }) options: QueryList<MatOption>;\n\n  /** @docs-private */\n  @ContentChildren(MatOptgroup) optionGroups: QueryList<MatOptgroup>;\n\n  /** Function that maps an option's control value to its display value in the trigger. */\n  @Input() displayWith: ((value: any) => string) | null = null;\n\n  /** Event that is emitted whenever an option from the list is selected. */\n  @Output() optionSelected: EventEmitter<MatAutocompleteSelectedEvent> =\n      new EventEmitter<MatAutocompleteSelectedEvent>();\n\n  /**\n   * Takes classes set on the host mat-autocomplete element and applies them to the panel\n   * inside the overlay container to allow for easy styling.\n   */\n  @Input('class')\n  set classList(classList: string) {\n    if (classList && classList.length) {\n      classList.split(' ').forEach(className => this._classList[className.trim()] = true);\n      this._elementRef.nativeElement.className = '';\n    }\n  }\n  _classList: {[key: string]: boolean} = {};\n\n  /** Unique ID to be used by autocomplete trigger's \"aria-owns\" property. */\n  id: string = `mat-autocomplete-${_uniqueAutocompleteIdCounter++}`;\n\n  constructor(private _changeDetectorRef: ChangeDetectorRef, private _elementRef: ElementRef) {\n    super();\n  }\n\n  ngAfterContentInit() {\n    this._keyManager = new ActiveDescendantKeyManager<MatOption>(this.options).withWrap();\n    // Set the initial visibiity state.\n    this._setVisibility();\n  }\n\n  /**\n   * Sets the panel scrollTop. This allows us to manually scroll to display options\n   * above or below the fold, as they are not actually being focused when active.\n   */\n  _setScrollTop(scrollTop: number): void {\n    if (this.panel) {\n      this.panel.nativeElement.scrollTop = scrollTop;\n    }\n  }\n\n  /** Returns the panel's scrollTop. */\n  _getScrollTop(): number {\n    return this.panel ? this.panel.nativeElement.scrollTop : 0;\n  }\n\n  /** Panel should hide itself when the option list is empty. */\n  _setVisibility() {\n    this.showPanel = !!this.options.length;\n    this._classList['mat-autocomplete-visible'] = this.showPanel;\n    this._classList['mat-autocomplete-hidden'] = !this.showPanel;\n    this._changeDetectorRef.markForCheck();\n}\n\n  /** Emits the `select` event. */\n  _emitSelectEvent(option: MatOption): void {\n    const event = new MatAutocompleteSelectedEvent(this, option);\n    this.optionSelected.emit(event);\n  }\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {MatOptionModule, MatCommonModule} from '@angular/material/core';\nimport {MatAutocomplete} from './autocomplete';\nimport {\n  MatAutocompleteTrigger,\n  MAT_AUTOCOMPLETE_SCROLL_STRATEGY_PROVIDER,\n} from './autocomplete-trigger';\n\n@NgModule({\n  imports: [MatOptionModule, OverlayModule, MatCommonModule, CommonModule],\n  exports: [MatAutocomplete, MatOptionModule, MatAutocompleteTrigger, MatCommonModule],\n  declarations: [MatAutocomplete, MatAutocompleteTrigger],\n  providers: [MAT_AUTOCOMPLETE_SCROLL_STRATEGY_PROVIDER],\n})\nexport class MatAutocompleteModule {}\n","/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = Object.setPrototypeOf ||\r\n    ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n    function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = Object.assign || function __assign(t) {\r\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n        s = arguments[i];\r\n        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n    }\r\n    return t;\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)\r\n            t[p[i]] = s[p[i]];\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = y[op[0] & 2 ? \"return\" : op[0] ? \"throw\" : \"next\"]) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [0, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r);  }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { if (o[n]) i[n] = function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; }; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator];\r\n    return m ? m.call(o) : typeof __values === \"function\" ? __values(o) : o[Symbol.iterator]();\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {Constructor} from './constructor';\n\n/** @docs-private */\nexport interface CanDisable {\n  /** Whether the component is disabled. */\n  disabled: boolean;\n}\n\n/** Mixin to augment a directive with a `disabled` property. */\nexport function mixinDisabled<T extends Constructor<{}>>(base: T): Constructor<CanDisable> & T {\n  return class extends base {\n    private _disabled: boolean = false;\n\n    get disabled() { return this._disabled; }\n    set disabled(value: any) { this._disabled = coerceBooleanProperty(value); }\n\n    constructor(...args: any[]) { super(...args); }\n  };\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Constructor} from './constructor';\nimport {ElementRef} from '@angular/core';\n\n/** @docs-private */\nexport interface CanColor {\n  /** Theme color palette for the component. */\n  color: ThemePalette;\n}\n\n/** @docs-private */\nexport interface HasElementRef {\n  _elementRef: ElementRef;\n}\n\n/** Possible color palette values. */\nexport type ThemePalette = 'primary' | 'accent' | 'warn' | undefined;\n\n/** Mixin to augment a directive with a `color` property. */\nexport function mixinColor<T extends Constructor<HasElementRef>>(base: T,\n    defaultColor?: ThemePalette): Constructor<CanColor> & T {\n  return class extends base {\n    private _color: ThemePalette;\n\n    get color(): ThemePalette { return this._color; }\n    set color(value: ThemePalette) {\n      const colorPalette = value || defaultColor;\n\n      if (colorPalette !== this._color) {\n        if (this._color) {\n          this._elementRef.nativeElement.classList.remove(`mat-${this._color}`);\n        }\n        if (colorPalette) {\n          this._elementRef.nativeElement.classList.add(`mat-${colorPalette}`);\n        }\n\n        this._color = colorPalette;\n      }\n    }\n\n    constructor(...args: any[]) {\n      super(...args);\n\n      // Set the default color that can be specified from the mixin.\n      this.color = defaultColor;\n    }\n  };\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {Constructor} from './constructor';\n\n/** @docs-private */\nexport interface CanDisableRipple {\n  /** Whether ripples are disabled. */\n  disableRipple: boolean;\n}\n\n/** Mixin to augment a directive with a `disableRipple` property. */\nexport function mixinDisableRipple<T extends Constructor<{}>>(base: T)\n    : Constructor<CanDisableRipple> & T {\n  return class extends base {\n    private _disableRipple: boolean = false;\n\n    /** Whether the ripple effect is disabled or not. */\n    get disableRipple() { return this._disableRipple; }\n    set disableRipple(value: any) { this._disableRipple = coerceBooleanProperty(value); }\n\n    constructor(...args: any[]) { super(...args); }\n  };\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Constructor} from './constructor';\nimport {CanDisable} from './disabled';\n\n/** @docs-private */\nexport interface HasTabIndex {\n  /** Tabindex of the component. */\n  tabIndex: number;\n}\n\n/** Mixin to augment a directive with a `tabIndex` property. */\nexport function mixinTabIndex<T extends Constructor<CanDisable>>(base: T, defaultTabIndex = 0)\n    : Constructor<HasTabIndex> & T {\n  return class extends base {\n    private _tabIndex: number = defaultTabIndex;\n\n    get tabIndex(): number { return this.disabled ? -1 : this._tabIndex; }\n    set tabIndex(value: number) {\n      // If the specified tabIndex value is null or undefined, fall back to the default value.\n      this._tabIndex = value != null ? value : defaultTabIndex;\n    }\n\n    constructor(...args: any[]) {\n      super(...args);\n    }\n  };\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Constructor} from './constructor';\nimport {ErrorStateMatcher} from '../error/error-options';\nimport {FormControl, FormGroupDirective, NgControl, NgForm} from '@angular/forms';\nimport {Subject} from 'rxjs/Subject';\n\n/** @docs-private */\nexport interface CanUpdateErrorState {\n  updateErrorState();\n  stateChanges: Subject<void>;\n  errorState: boolean;\n  errorStateMatcher: ErrorStateMatcher;\n}\n\n/** @docs-private */\nexport interface HasErrorState {\n  _parentFormGroup: FormGroupDirective;\n  _parentForm: NgForm;\n  _defaultErrorStateMatcher: ErrorStateMatcher;\n  ngControl: NgControl;\n}\n\n/**\n * Mixin to augment a directive with updateErrorState method.\n * For component with `errorState` and need to update `errorState`.\n */\nexport function mixinErrorState<T extends Constructor<HasErrorState>>(base: T)\n: Constructor<CanUpdateErrorState> & T {\n  return class extends base {\n    /** Whether the component is in an error state. */\n    errorState: boolean = false;\n\n    /**\n     * Stream that emits whenever the state of the input changes such that the wrapping\n     * `MatFormField needs to run change detection.\n     */\n    stateChanges = new Subject<void>();\n\n    errorStateMatcher: ErrorStateMatcher;\n\n    updateErrorState() {\n      const oldState = this.errorState;\n      const parent = this._parentFormGroup || this._parentForm;\n      const matcher = this.errorStateMatcher || this._defaultErrorStateMatcher;\n      const control = this.ngControl ? this.ngControl.control as FormControl : null;\n      const newState = matcher.isErrorState(control, parent);\n\n      if (newState !== oldState) {\n        this.errorState = newState;\n        this.stateChanges.next();\n      }\n    }\n\n    constructor(...args: any[]) {\n      super(...args);\n    }\n  };\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Inject, Injectable, Optional} from '@angular/core';\nimport {DateAdapter, MAT_DATE_LOCALE} from './date-adapter';\n\n// TODO(mmalerba): Remove when we no longer support safari 9.\n/** Whether the browser supports the Intl API. */\nconst SUPPORTS_INTL_API = typeof Intl != 'undefined';\n\n\n/** The default month names to use if Intl API is not available. */\nconst DEFAULT_MONTH_NAMES = {\n  'long': [\n    'January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September',\n    'October', 'November', 'December'\n  ],\n  'short': ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'],\n  'narrow': ['J', 'F', 'M', 'A', 'M', 'J', 'J', 'A', 'S', 'O', 'N', 'D']\n};\n\n\n/** The default date names to use if Intl API is not available. */\nconst DEFAULT_DATE_NAMES = range(31, i => String(i + 1));\n\n\n/** The default day of the week names to use if Intl API is not available. */\nconst DEFAULT_DAY_OF_WEEK_NAMES = {\n  'long': ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'],\n  'short': ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'],\n  'narrow': ['S', 'M', 'T', 'W', 'T', 'F', 'S']\n};\n\n\n/**\n * Matches strings that have the form of a valid RFC 3339 string\n * (https://tools.ietf.org/html/rfc3339). Note that the string may not actually be a valid date\n * because the regex will match strings an with out of bounds month, date, etc.\n */\nconst ISO_8601_REGEX =\n    /^\\d{4}-\\d{2}-\\d{2}(?:T\\d{2}:\\d{2}:\\d{2}(?:\\.\\d+)?(?:Z|(?:(?:\\+|-)\\d{2}:\\d{2}))?)?$/;\n\n\n/** Creates an array and fills it with values. */\nfunction range<T>(length: number, valueFunction: (index: number) => T): T[] {\n  const valuesArray = Array(length);\n  for (let i = 0; i < length; i++) {\n    valuesArray[i] = valueFunction(i);\n  }\n  return valuesArray;\n}\n\n/** Adapts the native JS Date for use with cdk-based components that work with dates. */\n@Injectable()\nexport class NativeDateAdapter extends DateAdapter<Date> {\n  /**\n   * Whether to use `timeZone: 'utc'` with `Intl.DateTimeFormat` when formatting dates.\n   * Without this `Intl.DateTimeFormat` sometimes chooses the wrong timeZone, which can throw off\n   * the result. (e.g. in the en-US locale `new Date(1800, 7, 14).toLocaleDateString()`\n   * will produce `'8/13/1800'`.\n   */\n  useUtcForDisplay: boolean;\n\n  constructor(@Optional() @Inject(MAT_DATE_LOCALE) matDateLocale: string) {\n    super();\n    super.setLocale(matDateLocale);\n\n    // IE does its own time zone correction, so we disable this on IE.\n    // TODO(mmalerba): replace with !platform.TRIDENT, logic currently duplicated to avoid breaking\n    // change from injecting the Platform.\n    this.useUtcForDisplay = !(typeof document === 'object' && !!document &&\n        /(msie|trident)/i.test(navigator.userAgent));\n  }\n\n  getYear(date: Date): number {\n    return date.getFullYear();\n  }\n\n  getMonth(date: Date): number {\n    return date.getMonth();\n  }\n\n  getDate(date: Date): number {\n    return date.getDate();\n  }\n\n  getDayOfWeek(date: Date): number {\n    return date.getDay();\n  }\n\n  getMonthNames(style: 'long' | 'short' | 'narrow'): string[] {\n    if (SUPPORTS_INTL_API) {\n      let dtf = new Intl.DateTimeFormat(this.locale, {month: style});\n      return range(12, i => this._stripDirectionalityCharacters(dtf.format(new Date(2017, i, 1))));\n    }\n    return DEFAULT_MONTH_NAMES[style];\n  }\n\n  getDateNames(): string[] {\n    if (SUPPORTS_INTL_API) {\n      let dtf = new Intl.DateTimeFormat(this.locale, {day: 'numeric'});\n      return range(31, i => this._stripDirectionalityCharacters(\n          dtf.format(new Date(2017, 0, i + 1))));\n    }\n    return DEFAULT_DATE_NAMES;\n  }\n\n  getDayOfWeekNames(style: 'long' | 'short' | 'narrow'): string[] {\n    if (SUPPORTS_INTL_API) {\n      let dtf = new Intl.DateTimeFormat(this.locale, {weekday: style});\n      return range(7, i => this._stripDirectionalityCharacters(\n          dtf.format(new Date(2017, 0, i + 1))));\n    }\n    return DEFAULT_DAY_OF_WEEK_NAMES[style];\n  }\n\n  getYearName(date: Date): string {\n    if (SUPPORTS_INTL_API) {\n      let dtf = new Intl.DateTimeFormat(this.locale, {year: 'numeric'});\n      return this._stripDirectionalityCharacters(dtf.format(date));\n    }\n    return String(this.getYear(date));\n  }\n\n  getFirstDayOfWeek(): number {\n    // We can't tell using native JS Date what the first day of the week is, we default to Sunday.\n    return 0;\n  }\n\n  getNumDaysInMonth(date: Date): number {\n    return this.getDate(this._createDateWithOverflow(\n        this.getYear(date), this.getMonth(date) + 1, 0));\n  }\n\n  clone(date: Date): Date {\n    return this.createDate(this.getYear(date), this.getMonth(date), this.getDate(date));\n  }\n\n  createDate(year: number, month: number, date: number): Date {\n    // Check for invalid month and date (except upper bound on date which we have to check after\n    // creating the Date).\n    if (month < 0 || month > 11) {\n      throw Error(`Invalid month index \"${month}\". Month index has to be between 0 and 11.`);\n    }\n\n    if (date < 1) {\n      throw Error(`Invalid date \"${date}\". Date has to be greater than 0.`);\n    }\n\n    let result = this._createDateWithOverflow(year, month, date);\n\n    // Check that the date wasn't above the upper bound for the month, causing the month to overflow\n    if (result.getMonth() != month) {\n      throw Error(`Invalid date \"${date}\" for month with index \"${month}\".`);\n    }\n\n    return result;\n  }\n\n  today(): Date {\n    return new Date();\n  }\n\n  parse(value: any): Date | null {\n    // We have no way using the native JS Date to set the parse format or locale, so we ignore these\n    // parameters.\n    if (typeof value == 'number') {\n      return new Date(value);\n    }\n    return value ? new Date(Date.parse(value)) : null;\n  }\n\n  format(date: Date, displayFormat: Object): string {\n    if (!this.isValid(date)) {\n      throw Error('NativeDateAdapter: Cannot format invalid date.');\n    }\n    if (SUPPORTS_INTL_API) {\n      if (this.useUtcForDisplay) {\n        date = new Date(Date.UTC(\n            date.getFullYear(), date.getMonth(), date.getDate(), date.getHours(),\n            date.getMinutes(), date.getSeconds(), date.getMilliseconds()));\n        displayFormat = {...displayFormat, timeZone: 'utc'};\n      }\n      let dtf = new Intl.DateTimeFormat(this.locale, displayFormat);\n      return this._stripDirectionalityCharacters(dtf.format(date));\n    }\n    return this._stripDirectionalityCharacters(date.toDateString());\n  }\n\n  addCalendarYears(date: Date, years: number): Date {\n    return this.addCalendarMonths(date, years * 12);\n  }\n\n  addCalendarMonths(date: Date, months: number): Date {\n    let newDate = this._createDateWithOverflow(\n        this.getYear(date), this.getMonth(date) + months, this.getDate(date));\n\n    // It's possible to wind up in the wrong month if the original month has more days than the new\n    // month. In this case we want to go to the last day of the desired month.\n    // Note: the additional + 12 % 12 ensures we end up with a positive number, since JS % doesn't\n    // guarantee this.\n    if (this.getMonth(newDate) != ((this.getMonth(date) + months) % 12 + 12) % 12) {\n      newDate = this._createDateWithOverflow(this.getYear(newDate), this.getMonth(newDate), 0);\n    }\n\n    return newDate;\n  }\n\n  addCalendarDays(date: Date, days: number): Date {\n    return this._createDateWithOverflow(\n        this.getYear(date), this.getMonth(date), this.getDate(date) + days);\n  }\n\n  toIso8601(date: Date): string {\n    return [\n      date.getUTCFullYear(),\n      this._2digit(date.getUTCMonth() + 1),\n      this._2digit(date.getUTCDate())\n    ].join('-');\n  }\n\n  /**\n   * Returns the given value if given a valid Date or null. Deserializes valid ISO 8601 strings\n   * (https://www.ietf.org/rfc/rfc3339.txt) into valid Dates and empty string into null. Returns an\n   * invalid date for all other values.\n   */\n  deserialize(value: any): Date | null {\n    if (typeof value === 'string') {\n      if (!value) {\n        return null;\n      }\n      // The `Date` constructor accepts formats other than ISO 8601, so we need to make sure the\n      // string is the right format first.\n      if (ISO_8601_REGEX.test(value)) {\n        let date = new Date(value);\n        if (this.isValid(date)) {\n          return date;\n        }\n      }\n    }\n    return super.deserialize(value);\n  }\n\n  isDateInstance(obj: any) {\n    return obj instanceof Date;\n  }\n\n  isValid(date: Date) {\n    return !isNaN(date.getTime());\n  }\n\n  invalid(): Date {\n    return new Date(NaN);\n  }\n\n  /** Creates a date but allows the month and date to overflow. */\n  private _createDateWithOverflow(year: number, month: number, date: number) {\n    let result = new Date(year, month, date);\n\n    // We need to correct for the fact that JS native Date treats years in range [0, 99] as\n    // abbreviations for 19xx.\n    if (year >= 0 && year < 100) {\n      result.setFullYear(this.getYear(result) - 1900);\n    }\n    return result;\n  }\n\n  /**\n   * Pads a number to make it two digits.\n   * @param n The number to pad.\n   * @returns The padded number.\n   */\n  private _2digit(n: number) {\n    return ('00' + n).slice(-2);\n  }\n\n  /**\n   * Strip out unicode LTR and RTL characters. Edge and IE insert these into formatted dates while\n   * other browsers do not. We remove them to make output consistent and because they interfere with\n   * date parsing.\n   * @param str The string to strip direction characters from.\n   * @returns The stripped string.\n   */\n  private _stripDirectionalityCharacters(str: string) {\n    return str.replace(/[\\u200e\\u200f]/g, '');\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Applies a CSS transform to an element, including browser-prefixed properties.\n * @param element\n * @param transformValue\n */\nexport function applyCssTransform(element: HTMLElement, transformValue: string) {\n  // It's important to trim the result, because the browser will ignore the set operation\n  // if the string contains only whitespace.\n  let value = transformValue.trim();\n\n  element.style.transform = value;\n  element.style.webkitTransform = value;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** @docs-private */\nexport function getMatFormFieldPlaceholderConflictError(): Error {\n  return Error('Placeholder attribute and child element were both specified.');\n}\n\n/** @docs-private */\nexport function getMatFormFieldDuplicatedHintError(align: string): Error {\n  return Error(`A hint was already declared for 'align=\"${align}\"'.`);\n}\n\n/** @docs-private */\nexport function getMatFormFieldMissingControlError(): Error {\n  return Error('mat-form-field must contain a MatFormFieldControl.');\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** @docs-private */\nexport function getMatInputUnsupportedTypeError(type: string): Error {\n  return Error(`Input type \"${type}\" isn't supported by matInput.`);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** @docs-private */\nexport function createMissingDateImplError(provider: string) {\n  return Error(\n      `MatDatepicker: No provider found for ${provider}. You must import one of the following ` +\n      `modules at your application root: MatNativeDateModule, MatMomentDateModule, or provide a ` +\n      `custom implementation.`);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Converts values into strings. Falsy values become empty strings.\n * @docs-private\n */\nexport function coerceToString(value: string | number): string {\n  return `${value || ''}`;\n}\n\n/**\n * Converts a value that might be a string into a number.\n * @docs-private\n */\nexport function coerceToNumber(value: string | number): number {\n  return typeof value === 'string' ? parseInt(value, 10) : value;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Throws an exception for the case when menu trigger doesn't have a valid mat-menu instance\n * @docs-private\n */\nexport function throwMatMenuMissingError() {\n  throw Error(`mat-menu-trigger: must pass in an mat-menu instance.\n\n    Example:\n      <mat-menu #menu=\"matMenu\"></mat-menu>\n      <button [matMenuTriggerFor]=\"menu\"></button>`);\n}\n\n/**\n * Throws an exception for the case when menu's x-position value isn't valid.\n * In other words, it doesn't match 'before' or 'after'.\n * @docs-private\n */\nexport function throwMatMenuInvalidPositionX() {\n  throw Error(`x-position value must be either 'before' or after'.\n      Example: <mat-menu x-position=\"before\" #menu=\"matMenu\"></mat-menu>`);\n}\n\n/**\n * Throws an exception for the case when menu's y-position value isn't valid.\n * In other words, it doesn't match 'above' or 'below'.\n * @docs-private\n */\nexport function throwMatMenuInvalidPositionY() {\n  throw Error(`y-position value must be either 'above' or below'.\n      Example: <mat-menu y-position=\"above\" #menu=\"matMenu\"></mat-menu>`);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Returns an exception to be thrown when attempting to change a select's `multiple` option\n * after initialization.\n * @docs-private\n */\nexport function getMatSelectDynamicMultipleError(): Error {\n  return Error('Cannot change `multiple` mode of select after initialization.');\n}\n\n/**\n * Returns an exception to be thrown when attempting to assign a non-array value to a select\n * in `multiple` mode. Note that `undefined` and `null` are still valid values to allow for\n * resetting the value.\n * @docs-private\n */\nexport function getMatSelectNonArrayValueError(): Error {\n  return Error('Value must be an array in multiple-selection mode.');\n}\n\n/**\n * Returns an exception to be thrown when assigning a non-function value to the comparator\n * used to determine if a value corresponds to an option. Note that whether the function\n * actually takes two values and returns a boolean is not checked.\n */\nexport function getMatSelectNonFunctionValueError(): Error {\n  return Error('`compareWith` must be a function.');\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** @docs-private */\nexport function getSortDuplicateSortableIdError(id: string): Error {\n  return Error(`Cannot have two MatSortables with the same id (${id}).`);\n}\n\n/** @docs-private */\nexport function getSortHeaderNotContainedWithinSortError(): Error {\n  return Error(`MatSortHeader must be placed within a parent element with the MatSort directive.`);\n}\n\n/** @docs-private */\nexport function getSortHeaderMissingIdError(): Error {\n  return Error(`MatSortHeader must be provided with a unique id.`);\n}\n\n/** @docs-private */\nexport function getSortInvalidDirectionError(direction: string): Error {\n  return Error(`${direction} is not a valid sort direction ('asc' or 'desc').`);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** @docs-private */\nexport class AnimationCurves {\n  static STANDARD_CURVE = 'cubic-bezier(0.4,0.0,0.2,1)';\n  static DECELERATION_CURVE = 'cubic-bezier(0.0,0.0,0.2,1)';\n  static ACCELERATION_CURVE = 'cubic-bezier(0.4,0.0,1,1)';\n  static SHARP_CURVE = 'cubic-bezier(0.4,0.0,0.6,1)';\n}\n\n\n/** @docs-private */\nexport class AnimationDurations {\n  static COMPLEX = '375ms';\n  static ENTERING = '225ms';\n  static EXITING = '195ms';\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule, InjectionToken, Optional, Inject, isDevMode} from '@angular/core';\nimport {BidiModule} from '@angular/cdk/bidi';\n\n\n/** Injection token that configures whether the Material sanity checks are enabled. */\nexport const MATERIAL_SANITY_CHECKS = new InjectionToken<boolean>('mat-sanity-checks');\n\n\n/**\n * Module that captures anything that should be loaded and/or run for *all* Angular Material\n * components. This includes Bidi, etc.\n *\n * This module should be imported to each top-level component module (e.g., MatTabsModule).\n */\n@NgModule({\n  imports: [BidiModule],\n  exports: [BidiModule],\n  providers: [{\n    provide: MATERIAL_SANITY_CHECKS, useValue: true,\n  }],\n})\nexport class MatCommonModule {\n  /** Whether we've done the global sanity checks (e.g. a theme is loaded, there is a doctype). */\n  private _hasDoneGlobalChecks = false;\n\n  /** Whether we've already checked for HammerJs availability. */\n  private _hasCheckedHammer = false;\n\n  /** Reference to the global `document` object. */\n  private _document = typeof document === 'object' && document ? document : null;\n\n  /** Reference to the global 'window' object. */\n  private _window = typeof window === 'object' && window ? window : null;\n\n  constructor(@Optional() @Inject(MATERIAL_SANITY_CHECKS) private _sanityChecksEnabled: boolean) {\n    if (this._areChecksEnabled() && !this._hasDoneGlobalChecks) {\n      this._checkDoctypeIsDefined();\n      this._checkThemeIsPresent();\n      this._hasDoneGlobalChecks = true;\n    }\n  }\n\n  /** Whether any sanity checks are enabled */\n  private _areChecksEnabled(): boolean {\n    return this._sanityChecksEnabled && isDevMode() && !this._isTestEnv();\n  }\n\n  /** Whether the code is running in tests. */\n  private _isTestEnv() {\n    return this._window && (this._window['__karma__'] || this._window['jasmine']);\n  }\n\n  private _checkDoctypeIsDefined(): void {\n    if (this._document && !this._document.doctype) {\n      console.warn(\n        'Current document does not have a doctype. This may cause ' +\n        'some Angular Material components not to behave as expected.'\n      );\n    }\n  }\n\n  private _checkThemeIsPresent(): void {\n    if (this._document && typeof getComputedStyle === 'function') {\n      const testElement = this._document.createElement('div');\n\n      testElement.classList.add('mat-theme-loaded-marker');\n      this._document.body.appendChild(testElement);\n\n      const computedStyle = getComputedStyle(testElement);\n\n      // In some situations, the computed style of the test element can be null. For example in\n      // Firefox, the computed style is null if an application is running inside of a hidden iframe.\n      // See: https://bugzilla.mozilla.org/show_bug.cgi?id=548397\n      if (computedStyle && computedStyle.display !== 'none') {\n        console.warn(\n          'Could not find Angular Material core theme. Most Material ' +\n          'components may not work as expected. For more info refer ' +\n          'to the theming guide: https://material.angular.io/guide/theming'\n        );\n      }\n\n      this._document.body.removeChild(testElement);\n    }\n  }\n\n  /** Checks whether HammerJS is available. */\n  _checkHammerIsAvailable(): void {\n    if (this._hasCheckedHammer || !this._window) {\n      return;\n    }\n\n    if (this._areChecksEnabled() && !this._window['Hammer']) {\n      console.warn(\n        'Could not find HammerJS. Certain Angular Material components may not work correctly.');\n    }\n    this._hasCheckedHammer = true;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {InjectionToken, LOCALE_ID} from '@angular/core';\nimport {Observable} from 'rxjs/Observable';\nimport {Subject} from 'rxjs/Subject';\n\n\n/** InjectionToken for datepicker that can be used to override default locale code. */\nexport const MAT_DATE_LOCALE = new InjectionToken<string>('MAT_DATE_LOCALE');\n\n/** Provider for MAT_DATE_LOCALE injection token. */\nexport const MAT_DATE_LOCALE_PROVIDER = {provide: MAT_DATE_LOCALE, useExisting: LOCALE_ID};\n\n/** Adapts type `D` to be usable as a date by cdk-based components that work with dates. */\nexport abstract class DateAdapter<D> {\n  /** The locale to use for all dates. */\n  protected locale: any;\n\n  /** A stream that emits when the locale changes. */\n  get localeChanges(): Observable<void> { return this._localeChanges; }\n  protected _localeChanges= new Subject<void>();\n\n  /**\n   * Gets the year component of the given date.\n   * @param date The date to extract the year from.\n   * @returns The year component.\n   */\n  abstract getYear(date: D): number;\n\n  /**\n   * Gets the month component of the given date.\n   * @param date The date to extract the month from.\n   * @returns The month component (0-indexed, 0 = January).\n   */\n  abstract getMonth(date: D): number;\n\n  /**\n   * Gets the date of the month component of the given date.\n   * @param date The date to extract the date of the month from.\n   * @returns The month component (1-indexed, 1 = first of month).\n   */\n  abstract getDate(date: D): number;\n\n  /**\n   * Gets the day of the week component of the given date.\n   * @param date The date to extract the day of the week from.\n   * @returns The month component (0-indexed, 0 = Sunday).\n   */\n  abstract getDayOfWeek(date: D): number;\n\n  /**\n   * Gets a list of names for the months.\n   * @param style The naming style (e.g. long = 'January', short = 'Jan', narrow = 'J').\n   * @returns An ordered list of all month names, starting with January.\n   */\n  abstract getMonthNames(style: 'long' | 'short' | 'narrow'): string[];\n\n  /**\n   * Gets a list of names for the dates of the month.\n   * @returns An ordered list of all date of the month names, starting with '1'.\n   */\n  abstract getDateNames(): string[];\n\n  /**\n   * Gets a list of names for the days of the week.\n   * @param style The naming style (e.g. long = 'Sunday', short = 'Sun', narrow = 'S').\n   * @returns An ordered list of all weekday names, starting with Sunday.\n   */\n  abstract getDayOfWeekNames(style: 'long' | 'short' | 'narrow'): string[];\n\n  /**\n   * Gets the name for the year of the given date.\n   * @param date The date to get the year name for.\n   * @returns The name of the given year (e.g. '2017').\n   */\n  abstract getYearName(date: D): string;\n\n  /**\n   * Gets the first day of the week.\n   * @returns The first day of the week (0-indexed, 0 = Sunday).\n   */\n  abstract getFirstDayOfWeek(): number;\n\n  /**\n   * Gets the number of days in the month of the given date.\n   * @param date The date whose month should be checked.\n   * @returns The number of days in the month of the given date.\n   */\n  abstract getNumDaysInMonth(date: D): number;\n\n  /**\n   * Clones the given date.\n   * @param date The date to clone\n   * @returns A new date equal to the given date.\n   */\n  abstract clone(date: D): D;\n\n  /**\n   * Creates a date with the given year, month, and date. Does not allow over/under-flow of the\n   * month and date.\n   * @param year The full year of the date. (e.g. 89 means the year 89, not the year 1989).\n   * @param month The month of the date (0-indexed, 0 = January). Must be an integer 0 - 11.\n   * @param date The date of month of the date. Must be an integer 1 - length of the given month.\n   * @returns The new date, or null if invalid.\n   */\n  abstract createDate(year: number, month: number, date: number): D;\n\n  /**\n   * Gets today's date.\n   * @returns Today's date.\n   */\n  abstract today(): D;\n\n  /**\n   * Parses a date from a user-provided value.\n   * @param value The value to parse.\n   * @param parseFormat The expected format of the value being parsed\n   *     (type is implementation-dependent).\n   * @returns The parsed date.\n   */\n  abstract parse(value: any, parseFormat: any): D | null;\n\n  /**\n   * Formats a date as a string according to the given format.\n   * @param date The value to format.\n   * @param displayFormat The format to use to display the date as a string.\n   * @returns The formatted date string.\n   */\n  abstract format(date: D, displayFormat: any): string;\n\n  /**\n   * Adds the given number of years to the date. Years are counted as if flipping 12 pages on the\n   * calendar for each year and then finding the closest date in the new month. For example when\n   * adding 1 year to Feb 29, 2016, the resulting date will be Feb 28, 2017.\n   * @param date The date to add years to.\n   * @param years The number of years to add (may be negative).\n   * @returns A new date equal to the given one with the specified number of years added.\n   */\n  abstract addCalendarYears(date: D, years: number): D;\n\n  /**\n   * Adds the given number of months to the date. Months are counted as if flipping a page on the\n   * calendar for each month and then finding the closest date in the new month. For example when\n   * adding 1 month to Jan 31, 2017, the resulting date will be Feb 28, 2017.\n   * @param date The date to add months to.\n   * @param months The number of months to add (may be negative).\n   * @returns A new date equal to the given one with the specified number of months added.\n   */\n  abstract addCalendarMonths(date: D, months: number): D;\n\n  /**\n   * Adds the given number of days to the date. Days are counted as if moving one cell on the\n   * calendar for each day.\n   * @param date The date to add days to.\n   * @param days The number of days to add (may be negative).\n   * @returns A new date equal to the given one with the specified number of days added.\n   */\n  abstract addCalendarDays(date: D, days: number): D;\n\n  /**\n   * Gets the RFC 3339 compatible string (https://tools.ietf.org/html/rfc3339) for the given date.\n   * This method is used to generate date strings that are compatible with native HTML attributes\n   * such as the `min` or `max` attribute of an `<input>`.\n   * @param date The date to get the ISO date string for.\n   * @returns The ISO date string date string.\n   */\n  abstract toIso8601(date: D): string;\n\n  /**\n   * Checks whether the given object is considered a date instance by this DateAdapter.\n   * @param obj The object to check\n   * @returns Whether the object is a date instance.\n   */\n  abstract isDateInstance(obj: any): boolean;\n\n  /**\n   * Checks whether the given date is valid.\n   * @param date The date to check.\n   * @returns Whether the date is valid.\n   */\n  abstract isValid(date: D): boolean;\n\n  /**\n   * Gets date instance that is not valid.\n   * @returns An invalid date.\n   */\n  abstract invalid(): D;\n\n  /**\n   * Attempts to deserialize a value to a valid date object. This is different from parsing in that\n   * deserialize should only accept non-ambiguous, locale-independent formats (e.g. a ISO 8601\n   * string). The default implementation does not allow any deserialization, it simply checks that\n   * the given value is already a valid date object or null. The `<mat-datepicker>` will call this\n   * method on all of it's `@Input()` properties that accept dates. It is therefore possible to\n   * support passing values from your backend directly to these properties by overriding this method\n   * to also deserialize the format used by your backend.\n   * @param value The value to be deserialized into a date object.\n   * @returns The deserialized date object, either a valid date, null if the value can be\n   *     deserialized into a null date (e.g. the empty string), or an invalid date.\n   */\n  deserialize(value: any): D | null {\n    if (value == null || this.isDateInstance(value) && this.isValid(value)) {\n      return value;\n    }\n    return this.invalid();\n  }\n\n  /**\n   * Sets the locale used for all dates.\n   * @param locale The new locale.\n   */\n  setLocale(locale: any) {\n    this.locale = locale;\n    this._localeChanges.next();\n  }\n\n  /**\n   * Compares two dates.\n   * @param first The first date to compare.\n   * @param second The second date to compare.\n   * @returns 0 if the dates are equal, a number less than 0 if the first date is earlier,\n   *     a number greater than 0 if the first date is later.\n   */\n  compareDate(first: D, second: D): number {\n    return this.getYear(first) - this.getYear(second) ||\n        this.getMonth(first) - this.getMonth(second) ||\n        this.getDate(first) - this.getDate(second);\n  }\n\n  /**\n   * Checks if two dates are equal.\n   * @param first The first date to check.\n   * @param second The second date to check.\n   * @returns Whether the two dates are equal.\n   *     Null dates are considered equal to other null dates.\n   */\n  sameDate(first: D | null, second: D | null): boolean {\n    if (first && second) {\n      let firstValid = this.isValid(first);\n      let secondValid = this.isValid(second);\n      if (firstValid && secondValid) {\n        return !this.compareDate(first, second);\n      }\n      return firstValid == secondValid;\n    }\n    return first == second;\n  }\n\n  /**\n   * Clamp the given date between min and max dates.\n   * @param date The date to clamp.\n   * @param min The minimum value to allow. If null or omitted no min is enforced.\n   * @param max The maximum value to allow. If null or omitted no max is enforced.\n   * @returns `min` if `date` is less than `min`, `max` if date is greater than `max`,\n   *     otherwise `date`.\n   */\n  clampDate(date: D, min?: D | null, max?: D | null): D {\n    if (min && this.compareDate(date, min) < 0) {\n      return min;\n    }\n    if (max && this.compareDate(date, max) > 0) {\n      return max;\n    }\n    return date;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {InjectionToken} from '@angular/core';\n\n\nexport type MatDateFormats = {\n  parse: {\n    dateInput: any\n  },\n  display: {\n    dateInput: any,\n    monthYearLabel: any,\n    dateA11yLabel: any,\n    monthYearA11yLabel: any,\n  }\n};\n\n\nexport const MAT_DATE_FORMATS = new InjectionToken<MatDateFormats>('mat-date-formats');\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {MatDateFormats} from './date-formats';\n\n\nexport const MAT_NATIVE_DATE_FORMATS: MatDateFormats = {\n  parse: {\n    dateInput: null,\n  },\n  display: {\n    dateInput: {year: 'numeric', month: 'numeric', day: 'numeric'},\n    monthYearLabel: {year: 'numeric', month: 'short'},\n    dateA11yLabel: {year: 'numeric', month: 'long', day: 'numeric'},\n    monthYearA11yLabel: {year: 'numeric', month: 'long'},\n  }\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {DateAdapter, MAT_DATE_LOCALE_PROVIDER} from './date-adapter';\nimport {MAT_DATE_FORMATS} from './date-formats';\nimport {NativeDateAdapter} from './native-date-adapter';\nimport {MAT_NATIVE_DATE_FORMATS} from './native-date-formats';\n\nexport * from './date-adapter';\nexport * from './date-formats';\nexport * from './native-date-adapter';\nexport * from './native-date-formats';\n\n\n@NgModule({\n  providers: [\n    {provide: DateAdapter, useClass: NativeDateAdapter},\n    MAT_DATE_LOCALE_PROVIDER\n  ],\n})\nexport class NativeDateModule {}\n\n\n@NgModule({\n  imports: [NativeDateModule],\n  providers: [{provide: MAT_DATE_FORMATS, useValue: MAT_NATIVE_DATE_FORMATS}],\n})\nexport class MatNativeDateModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable} from '@angular/core';\nimport {FormGroupDirective, NgForm, FormControl} from '@angular/forms';\n\n/** Error state matcher that matches when a control is invalid and dirty. */\n@Injectable()\nexport class ShowOnDirtyErrorStateMatcher implements ErrorStateMatcher {\n  isErrorState(control: FormControl | null, form: FormGroupDirective | NgForm | null): boolean {\n    return !!(control && control.invalid && (control.dirty || (form && form.submitted)));\n  }\n}\n\n/** Provider that defines how form controls behave with regards to displaying error messages. */\n@Injectable()\nexport class ErrorStateMatcher {\n  isErrorState(control: FormControl | null, form: FormGroupDirective | NgForm | null): boolean {\n    return !!(control && control.invalid && (control.touched || (form && form.submitted)));\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable, InjectionToken, Inject, Optional} from '@angular/core';\nimport {HammerGestureConfig} from '@angular/platform-browser';\nimport {MatCommonModule} from '../common-behaviors/common-module';\nimport {\n  HammerStatic,\n  HammerInstance,\n  Recognizer,\n  RecognizerStatic,\n  HammerOptions,\n} from './gesture-annotations';\n\n/**\n * Injection token that can be used to provide options to the Hammerjs instance.\n * More info at http://hammerjs.github.io/api/.\n */\nexport const MAT_HAMMER_OPTIONS = new InjectionToken<HammerOptions>('MAT_HAMMER_OPTIONS');\n\n/** Adjusts configuration of our gesture library, Hammer. */\n@Injectable()\nexport class GestureConfig extends HammerGestureConfig {\n  private _hammer: HammerStatic = typeof window !== 'undefined' ? (window as any).Hammer : null;\n\n  /** List of new event names to add to the gesture support list */\n  events: string[] = this._hammer ? [\n    'longpress',\n    'slide',\n    'slidestart',\n    'slideend',\n    'slideright',\n    'slideleft'\n  ] : [];\n\n  constructor(\n    @Optional() @Inject(MAT_HAMMER_OPTIONS) private _hammerOptions?: HammerOptions,\n    @Optional() commonModule?: MatCommonModule) {\n    super();\n    if (commonModule) {\n      commonModule._checkHammerIsAvailable();\n    }\n  }\n\n  /**\n   * Builds Hammer instance manually to add custom recognizers that match the Material Design spec.\n   *\n   * Our gesture names come from the Material Design gestures spec:\n   * https://www.google.com/design/spec/patterns/gestures.html#gestures-touch-mechanics\n   *\n   * More information on default recognizers can be found in Hammer docs:\n   * http://hammerjs.github.io/recognizer-pan/\n   * http://hammerjs.github.io/recognizer-press/\n   *\n   * @param element Element to which to assign the new HammerJS gestures.\n   * @returns Newly-created HammerJS instance.\n   */\n  buildHammer(element: HTMLElement): HammerInstance {\n    const mc = new this._hammer(element, this._hammerOptions || undefined);\n\n    // Default Hammer Recognizers.\n    const pan = new this._hammer.Pan();\n    const swipe = new this._hammer.Swipe();\n    const press = new this._hammer.Press();\n\n    // Notice that a HammerJS recognizer can only depend on one other recognizer once.\n    // Otherwise the previous `recognizeWith` will be dropped.\n    // TODO: Confirm threshold numbers with Material Design UX Team\n    const slide = this._createRecognizer(pan, {event: 'slide', threshold: 0}, swipe);\n    const longpress = this._createRecognizer(press, {event: 'longpress', time: 500});\n\n    // Overwrite the default `pan` event to use the swipe event.\n    pan.recognizeWith(swipe);\n\n    // Add customized gestures to Hammer manager\n    mc.add([swipe, press, pan, slide, longpress]);\n\n    return mc as HammerInstance;\n  }\n\n  /** Creates a new recognizer, without affecting the default recognizers of HammerJS */\n  private _createRecognizer(base: Recognizer, options: any, ...inheritances: Recognizer[]) {\n    let recognizer = new (base.constructor as RecognizerStatic)(options);\n\n    inheritances.push(base);\n    inheritances.forEach(item => recognizer.recognizeWith(item));\n\n    return recognizer;\n  }\n\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  NgModule,\n  Directive,\n  ElementRef,\n  QueryList,\n} from '@angular/core';\nimport {MatCommonModule} from '../common-behaviors/common-module';\n\n\n/**\n * Shared directive to count lines inside a text area, such as a list item.\n * Line elements can be extracted with a @ContentChildren(MatLine) query, then\n * counted by checking the query list's length.\n */\n@Directive({\n  selector: '[mat-line], [matLine]',\n  host: {'class': 'mat-line'}\n})\nexport class MatLine {}\n\n/**\n * Helper that takes a query list of lines and sets the correct class on the host.\n * @docs-private\n */\nexport class MatLineSetter {\n  constructor(private _lines: QueryList<MatLine>, private _element: ElementRef) {\n    this._setLineClass(this._lines.length);\n\n    this._lines.changes.subscribe(() => {\n      this._setLineClass(this._lines.length);\n    });\n  }\n\n  private _setLineClass(count: number): void {\n    this._resetClasses();\n    if (count === 2 || count === 3) {\n      this._setClass(`mat-${count}-line`, true);\n    } else if (count > 3) {\n      this._setClass(`mat-multi-line`, true);\n    }\n  }\n\n  private _resetClasses(): void {\n    this._setClass('mat-2-line', false);\n    this._setClass('mat-3-line', false);\n    this._setClass('mat-multi-line', false);\n  }\n\n  private _setClass(className: string, isAdd: boolean): void {\n    if (isAdd) {\n      this._element.nativeElement.classList.add(className);\n    } else {\n      this._element.nativeElement.classList.remove(className);\n    }\n  }\n\n}\n\n@NgModule({\n  imports: [MatCommonModule],\n  exports: [MatLine, MatCommonModule],\n  declarations: [MatLine],\n})\nexport class MatLineModule { }\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {RippleConfig, RippleRenderer} from './ripple-renderer';\n\n/** Possible states for a ripple element. */\nexport enum RippleState {\n  FADING_IN, VISIBLE, FADING_OUT, HIDDEN\n}\n\n/**\n * Reference to a previously launched ripple element.\n */\nexport class RippleRef {\n\n  /** Current state of the ripple reference. */\n  state: RippleState = RippleState.HIDDEN;\n\n  constructor(\n    private _renderer: RippleRenderer,\n    public element: HTMLElement,\n    public config: RippleConfig) {\n  }\n\n  /** Fades out the ripple element. */\n  fadeOut() {\n    this._renderer.fadeOutRipple(this);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Platform} from '@angular/cdk/platform';\nimport {\n  Directive,\n  ElementRef,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  OnDestroy,\n  OnInit,\n  Optional,\n} from '@angular/core';\nimport {RippleRef} from './ripple-ref';\nimport {RippleConfig, RippleRenderer, RippleTarget} from './ripple-renderer';\n\n/** Configurable options for `matRipple`. */\nexport interface RippleGlobalOptions {\n  /**\n   * Whether ripples should be disabled. Ripples can be still launched manually by using\n   * the `launch()` method. Therefore focus indicators will still show up.\n   */\n  disabled?: boolean;\n\n  /**\n   * If set, the default duration of the fade-in animation is divided by this value. For example,\n   * setting it to 0.5 will cause the ripple fade-in animation to take twice as long.\n   * A changed speedFactor will not affect the fade-out duration of the ripples.\n   */\n  baseSpeedFactor?: number;\n}\n\n/** Injection token that can be used to specify the global ripple options. */\nexport const MAT_RIPPLE_GLOBAL_OPTIONS =\n    new InjectionToken<RippleGlobalOptions>('mat-ripple-global-options');\n\n@Directive({\n  selector: '[mat-ripple], [matRipple]',\n  exportAs: 'matRipple',\n  host: {\n    'class': 'mat-ripple',\n    '[class.mat-ripple-unbounded]': 'unbounded'\n  }\n})\nexport class MatRipple implements OnInit, OnDestroy, RippleTarget {\n\n  /** Custom color for all ripples. */\n  @Input('matRippleColor') color: string;\n\n  /** Whether the ripples should be visible outside the component's bounds. */\n  @Input('matRippleUnbounded') unbounded: boolean;\n\n  /**\n   * Whether the ripple always originates from the center of the host element's bounds, rather\n   * than originating from the location of the click event.\n   */\n  @Input('matRippleCentered') centered: boolean;\n\n  /**\n   * If set, the radius in pixels of foreground ripples when fully expanded. If unset, the radius\n   * will be the distance from the center of the ripple to the furthest corner of the host element's\n   * bounding rectangle.\n   */\n  @Input('matRippleRadius') radius: number = 0;\n\n  /**\n   * If set, the normal duration of ripple animations is divided by this value. For example,\n   * setting it to 0.5 will cause the animations to take twice as long.\n   * A changed speedFactor will not modify the fade-out duration of the ripples.\n   */\n  @Input('matRippleSpeedFactor') speedFactor: number = 1;\n\n  /**\n   * Whether click events will not trigger the ripple. Ripples can be still launched manually\n   * by using the `launch()` method.\n   */\n  @Input('matRippleDisabled')\n  get disabled() { return this._disabled; }\n  set disabled(value: boolean) {\n    this._disabled = value;\n    this._setupTriggerEventsIfEnabled();\n  }\n  private _disabled: boolean = false;\n\n  /**\n   * The element that triggers the ripple when click events are received.\n   * Defaults to the directive's host element.\n   */\n  @Input('matRippleTrigger')\n  get trigger() { return this._trigger || this._elementRef.nativeElement; }\n  set trigger(trigger: HTMLElement) {\n    this._trigger = trigger;\n    this._setupTriggerEventsIfEnabled();\n  }\n  private _trigger: HTMLElement;\n\n  /** Renderer for the ripple DOM manipulations. */\n  private _rippleRenderer: RippleRenderer;\n\n  /** Options that are set globally for all ripples. */\n  private _globalOptions: RippleGlobalOptions;\n\n  /** Whether ripple directive is initialized and the input bindings are set. */\n  private _isInitialized: boolean = false;\n\n  constructor(private _elementRef: ElementRef,\n              ngZone: NgZone,\n              platform: Platform,\n              @Optional() @Inject(MAT_RIPPLE_GLOBAL_OPTIONS) globalOptions: RippleGlobalOptions) {\n\n    this._globalOptions = globalOptions || {};\n    this._rippleRenderer = new RippleRenderer(this, ngZone, _elementRef, platform);\n  }\n\n  ngOnInit() {\n    this._isInitialized = true;\n    this._setupTriggerEventsIfEnabled();\n  }\n\n  ngOnDestroy() {\n    this._rippleRenderer._removeTriggerEvents();\n  }\n\n  /** Launches a manual ripple at the specified position. */\n  launch(x: number, y: number, config: RippleConfig = this): RippleRef {\n    return this._rippleRenderer.fadeInRipple(x, y, config);\n  }\n\n  /** Fades out all currently showing ripple elements. */\n  fadeOutAll() {\n    this._rippleRenderer.fadeOutAll();\n  }\n\n  /** Ripple configuration from the directive's input values. */\n  get rippleConfig(): RippleConfig {\n    return {\n      centered: this.centered,\n      speedFactor: this.speedFactor * (this._globalOptions.baseSpeedFactor || 1),\n      radius: this.radius,\n      color: this.color\n    };\n  }\n\n  /** Whether ripples on pointer-down are  disabled or not. */\n  get rippleDisabled(): boolean {\n    return this.disabled || !!this._globalOptions.disabled;\n  }\n\n  /** Sets up the the trigger event listeners if ripples are enabled. */\n  private _setupTriggerEventsIfEnabled() {\n    if (!this.disabled && this._isInitialized) {\n      this._rippleRenderer.setupTriggerEvents(this.trigger);\n    }\n  }\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {PlatformModule} from '@angular/cdk/platform';\nimport {MatCommonModule} from '../common-behaviors/common-module';\nimport {MatRipple} from './ripple';\n\nexport * from './ripple';\nexport * from './ripple-ref';\nexport * from './ripple-renderer';\n\n@NgModule({\n  imports: [MatCommonModule, PlatformModule],\n  exports: [MatRipple, MatCommonModule],\n  declarations: [MatRipple],\n})\nexport class MatRippleModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Component, ViewEncapsulation, Input, ChangeDetectionStrategy} from '@angular/core';\n\nexport type MatPseudoCheckboxState = 'unchecked' | 'checked' | 'indeterminate';\n\n/**\n * Component that shows a simplified checkbox without including any kind of \"real\" checkbox.\n * Meant to be used when the checkbox is purely decorative and a large number of them will be\n * included, such as for the options in a multi-select. Uses no SVGs or complex animations.\n * Note that theming is meant to be handled by the parent element, e.g.\n * `mat-primary .mat-pseudo-checkbox`.\n *\n * Note that this component will be completely invisible to screen-reader users. This is *not*\n * interchangeable with <mat-checkbox> and should *not* be used if the user would directly interact\n * with the checkbox. The pseudo-checkbox should only be used as an implementation detail of\n * more complex components that appropriately handle selected / checked state.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  selector: 'mat-pseudo-checkbox',\n  styleUrls: ['pseudo-checkbox.css'],\n  template: '',\n  host: {\n    'class': 'mat-pseudo-checkbox',\n    '[class.mat-pseudo-checkbox-indeterminate]': 'state === \"indeterminate\"',\n    '[class.mat-pseudo-checkbox-checked]': 'state === \"checked\"',\n    '[class.mat-pseudo-checkbox-disabled]': 'disabled',\n  },\n})\nexport class MatPseudoCheckbox {\n  /** Display state of the checkbox. */\n  @Input() state: MatPseudoCheckboxState = 'unchecked';\n\n  /** Whether the checkbox is disabled. */\n  @Input() disabled: boolean = false;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatPseudoCheckbox} from './pseudo-checkbox/pseudo-checkbox';\n\n\n@NgModule({\n  exports: [MatPseudoCheckbox],\n  declarations: [MatPseudoCheckbox]\n})\nexport class MatPseudoCheckboxModule { }\n\n\nexport * from './pseudo-checkbox/pseudo-checkbox';\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Component, ViewEncapsulation, Input, ChangeDetectionStrategy} from '@angular/core';\nimport {mixinDisabled, CanDisable} from '../common-behaviors/disabled';\n\n// Boilerplate for applying mixins to MatOptgroup.\n/** @docs-private */\nexport class MatOptgroupBase { }\nexport const _MatOptgroupMixinBase = mixinDisabled(MatOptgroupBase);\n\n// Counter for unique group ids.\nlet _uniqueOptgroupIdCounter = 0;\n\n/**\n * Component that is used to group instances of `mat-option`.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-optgroup',\n  exportAs: 'matOptgroup',\n  templateUrl: 'optgroup.html',\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  inputs: ['disabled'],\n  host: {\n    'class': 'mat-optgroup',\n    'role': 'group',\n    '[class.mat-optgroup-disabled]': 'disabled',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.aria-labelledby]': '_labelId',\n  }\n})\nexport class MatOptgroup extends _MatOptgroupMixinBase implements CanDisable {\n  /** Label for the option group. */\n  @Input() label: string;\n\n  /** Unique id for the underlying label. */\n  _labelId: string = `mat-optgroup-label-${_uniqueOptgroupIdCounter++}`;\n}\n"],"names":["this","_toolbarRows","changes","subscribe","_this","_checkToolbarMixedModes","MatToolbar","prototype","length","slice","call","_elementRef","nativeElement","childNodes","filter","node","classList","contains","nodeType","Node","COMMENT_NODE","some","textContent","trim","throwToolbarMixedModesError","type","Component","args","selector","exportAs","template","styles","inputs","host","class","[class.mat-toolbar-multiple-rows]","[class.mat-toolbar-single-row]","changeDetection","ChangeDetectionStrategy","OnPush","encapsulation","ViewEncapsulation","None","preserveWhitespaces","propDecorators","MatToolbarModule","NgModule","imports","MatCommonModule","PlatformModule","exports","MatToolbarRow","declarations","VERSION","Version","SELECT_PANEL_PADDING_X","role","_super","apply","arguments","MatRow","ctorParameters","MatTableModule","CdkTableModule","CommonModule","MatTable","MatCellDef","MatHeaderCellDef","MatColumnDef","MatHeaderCell","MatCell","MatHeaderRow","MatHeaderRowDef","MatRowDef","MatTableDataSource","initialData","_renderData","BehaviorSubject","_filter","sortingDataAccessor","data","sortHeaderId","value","isNaN","filterPredicate","accumulator","currentTerm","key","dataStr","Object","keys","reduce","toLowerCase","transformedFilter","indexOf","_data","_updateChangeSubscription","defineProperty","next","_sort","sort","_paginator","paginator","sortChange","empty","pageChange","page","_renderChangesSubscription","unsubscribe","pipe","combineLatest","map","_a","_filterData","startWith","_orderData","_pageData","filteredData","obj","_updatePaginator","active","direction","a","b","startIndex","pageIndex","pageSize","splice","filteredDataLength","Promise","resolve","then","lastPageIndex","Math","ceil","min","connect","disconnect","MatInkBar","_ngZone","alignToElement","element","show","requestAnimationFrame","runOutsideAngular","_setStyles","style","visibility","hide","inkBar","left","offsetLeft","width","offsetWidth","Directive","ElementRef","NgZone","MatTabLabel","templateRef","viewContainerRef","tslib_1.__extends","TemplateRef","ViewContainerRef","CdkPortal","MatTabBase","_MatTabMixinBase","mixinDisabled","MatTab","_viewContainerRef","textLabel","_contentPortal","_labelChange","Subject","_disableChange","position","origin","isActive","ngOnChanges","hasOwnProperty","ngOnDestroy","complete","ngOnInit","TemplatePortal","_content","Input","matTabsAnimations","translateTab","trigger","state","transform","transition","animate","MatTabBodyPortal","_componentFactoryResolver","_host","_isCenterPosition","_position","attach","_centeringSub","_beforeCentering","isCentering","hasAttached","_leavingSub","_afterLeavingCenter","detach","closed","ComponentFactoryResolver","MatTabBody","decorators","Inject","forwardRef","CdkPortalOutlet","_dir","_onCentering","EventEmitter","_onCentered","_getLayoutDirection","dir","_origin","_onTranslateTabStarted","e","toState","emit","clientHeight","_onTranslateTabComplete","fromState","animations","Output","nextId","MatTabChangeEvent","MatTabGroupBase","_MatTabGroupMixinBase","mixinColor","mixinDisableRipple","MatTabGroup","elementRef","_changeDetectorRef","_indexToSelect","_tabBodyWrapperHeight","_tabsSubscription","Subscription","EMPTY","_tabLabelSubscription","_dynamicHeight","_selectedIndex","headerPosition","selectedIndexChange","focusChange","animationDone","selectedTabChange","selectChange","_groupId","coerceBooleanProperty","coerceNumberProperty","_backgroundColor","remove","backgroundColor","add","ngAfterContentChecked","indexToSelect","_tabs","max","tabChangeEvent","_createChangeEvent","forEach","tab","index","markForCheck","ngAfterContentInit","_subscribeToTabLabels","_focusChanged","event","toArray","merge","concat","_getTabLabelId","i","_getTabContentId","_setTabBodyWrapperHeight","tabHeight","wrapper","_tabBodyWrapper","height","offsetHeight","_removeTabBodyWrapperHeight","_handleClick","tabHeader","idx","disabled","selectedIndex","focusIndex","_getTabIndex","[class.mat-tab-group-dynamic-height]","[class.mat-tab-group-inverted-header]","dynamicHeight","_dynamicHeightDeprecated","MatTabLabelWrapperBase","_MatTabLabelWrapperMixinBase","MatTabLabelWrapper","focus","getOffsetLeft","getOffsetWidth","[class.mat-tab-disabled]","MatTabHeaderBase","_MatTabHeaderMixinBase","MatTabHeader","_viewportRuler","_focusIndex","_scrollDistance","_selectedIndexChanged","_realignInkBar","_showPaginationControls","_disableScrollAfter","_disableScrollBefore","selectFocusedIndex","indexFocused","_tabLabelCount","_labelWrappers","_updatePagination","_scrollToLabel","_checkScrollingControls","_alignInkBarToSelectedTab","_scrollDistanceChanged","_updateTabScrollPosition","_handleKeydown","keyCode","RIGHT_ARROW","_focusNextTab","LEFT_ARROW","_focusPreviousTab","ENTER","SPACE","preventDefault","dirChange","change","observableOf","resize","realign","_onContentChanges","_checkPaginationEnabled","_isValidIndex","_setTabFocus","tabIndex","containerEl","_tabListContainer","scrollLeft","scrollWidth","_moveFocus","offset","tabs","scrollDistance","translateX","_tabList","v","_getMaxScrollDistance","_scrollHeader","scrollDir","viewLength","labelIndex","selectedLabel","labelBeforePos","labelAfterPos","beforeVisiblePos","afterVisiblePos","isEnabled","selectedLabelWrapper","_inkBar","[class.mat-tab-header-pagination-controls-enabled]","[class.mat-tab-header-rtl]","ViewportRuler","Directionality","Optional","ViewChild","MatTabNavBase","_MatTabNavMixinBase","MatTabNav","_onDestroy","_disableRipple","_setLinkDisableRipple","updateActiveLink","_activeLinkChanged","_activeLinkElement","takeUntil","_alignInkBar","_tabLinks","link","disableRipple","ChangeDetectorRef","MatTabLinkBase","_MatTabLinkMixinBase","mixinTabIndex","_tabNavBar","_tabLinkRipple","setupTriggerEvents","parseInt","globalOptions","rippleConfig","speedFactor","baseSpeedFactor","get","enumerable","configurable","MatTabLink","[attr.aria-disabled]","[attr.tabIndex]","[class.mat-tab-label-active]","Platform","undefined","MAT_RIPPLE_GLOBAL_OPTIONS","Attribute","MatTabsModule","PortalModule","MatRippleModule","ObserversModule","ScrollDispatchModule","providers","VIEWPORT_RULER_PROVIDER","MatToolbarBase","_MatToolbarMixinBase","_platform","ngAfterViewInit","isDevMode","isBrowser","announcementMessage","duration","horizontalPosition","verticalPosition","MatSnackBarConfig","SHOW_ANIMATION","AnimationDurations","ENTERING","AnimationCurves","DECELERATION_CURVE","HIDE_ANIMATION","EXITING","ACCELERATION_CURVE","matSnackBarAnimations","contentFade","opacity","COMPLEX","STANDARD_CURVE","snackBarState","SimpleSnackBar","snackBarRef","action","closeWithAction","[@contentFade]","MatSnackBarContainer","_destroyed","_onExit","_onEnter","_animationState","attachComponentPortal","portal","_portalOutlet","Error","snackBarConfig","panelClass","extraClasses","_setCssClasses","attachTemplatePortal","onAnimationEnd","startsWith","_completeExit","onEnter_1","run","enter","detectChanges","exit","onMicrotaskEmpty","asObservable","take","Array","isArray","cssClass","[@state]","(@state.done)","BasePortalOutlet","MatSnackBar","_overlay","_live","_injector","_breakpointObserver","_parentSnackBar","_snackBarRefAtThisLevel","parent","_openedSnackBarRef","openFromComponent","component","config","_config","_applyConfigDefaults","_attach","afterDismissed","containerInstance","dismiss","afterOpened","_dismissAfter","announce","politeness","open","message","_attachSnackBarContainer","overlayRef","containerPortal","ComponentPortal","containerRef","instance","_createOverlay","container","MatSnackBarRef","injector","_createInjector","contentRef","observe","Breakpoints","Handset","detachments","matches","overlayElement","overlayConfig","OverlayConfig","positionStrategy","global","isRtl","isLeft","isRight","right","centerHorizontally","top","bottom","create","userInjector","injectionTokens","WeakMap","set","MAT_SNACK_BAR_DATA","PortalInjector","Injectable","Overlay","LiveAnnouncer","Injector","BreakpointObserver","SkipSelf","MatSnackBarModule","OverlayModule","LayoutModule","entryComponents","LIVE_ANNOUNCER_PROVIDER","MatSortBase","_MatSortMixinBase","sortables","Map","_stateChanges","start","_direction","MatSort","getSortInvalidDirectionError","_disableClear","register","sortable","id","getSortHeaderMissingIdError","has","getSortDuplicateSortableIdError","deregister","delete","getNextSortDirection","disableClear","sortDirectionCycle","getSortDirectionCycle","nextDirectionIndex","sortButtonLabel","sortDescriptionLabel","MatSortHeaderIntl","MAT_SORT_HEADER_INTL_PROVIDER","provide","deps","useFactory","MAT_SORT_HEADER_INTL_PROVIDER_FACTORY","SORT_ANIMATION_TRANSITION","matSortAnimations","indicator","leftPointer","rightPointer","indicatorToggle","keyframes","MatSortHeaderBase","_MatSortHeaderMixinBase","MatSortHeader","_intl","changeDetectorRef","_cdkColumnDef","arrowPosition","getSortHeaderNotContainedWithinSortError","_rerenderSubscription","name","_isDisabled","_isSorted","(click)","[class.mat-sort-header-sorted]","[class.mat-sort-header-disabled]","CdkColumnDef","MatSortModule","MatStepLabel","CdkStepLabel","optionalLabel","MatStepperIntl","MatStepHeader","_focusMonitor","_element","monitor","_intlSubscription","_index","_selected","_active","_optional","stopMonitoring","_stringLabel","label","_templateLabel","_getHostElement","selected","optional","matStepperAnimations","horizontalStepTransition","verticalStepTransition","MatStep","stepper","_errorStateMatcher","isErrorState","control","form","originalErrorState","customErrorState","invalid","interacted","ErrorStateMatcher","useExisting","MatStepper","_steps","_stateChanged","MatHorizontalStepper","aria-orientation","MatVerticalStepper","MatStepperNext","[type]","CdkStepper","CdkStepperNext","MatStepperPrevious","CdkStepperPrevious","MatStepperModule","MatButtonModule","CdkStepperModule","MatIconModule","A11yModule","CDK_TABLE_TEMPLATE","CdkTable","CdkCellDef","CdkHeaderCellDef","columnDef","cssClassFriendlyName","CdkHeaderCell","CdkCell","CdkHeaderRowDef","CdkRowDef","CDK_ROW_TEMPLATE","MatSidenavContainer","_drawers","ContentChildren","MatSidenav","ContentChild","MatSidenavContent","MatDrawerContainer","MatSidenavModule","MatDrawer","MatDrawerContent","MAT_DRAWER_DEFAULT_AUTOSIZE","useValue","nextUniqueId","MAT_SLIDE_TOGGLE_VALUE_ACCESSOR","NG_VALUE_ACCESSOR","MatSlideToggle","multi","MatSlideToggleChange","source","checked","MatSlideToggleBase","_MatSlideToggleMixinBase","onChange","_","onTouched","_uniqueId","_required","_checked","labelPosition","ariaLabel","ariaLabelledby","_rippleConfig","centered","radius","_slideRenderer","SlideToggleRenderer","_inputElement","focusOrigin","_onInputFocusChange","_onChangeEvent","stopPropagation","dragging","_emitChangeEvent","_onInputClick","writeValue","registerOnChange","fn","registerOnTouched","setDisabledState","isDisabled","focusVia","toggle","_focusRipple","fadeOut","_ripple","launch","tslib_1.__assign","persistent","_onDragStart","startThumbDrag","_onDrag","updateThumbPosition","deltaX","_onDragEnd","newCheckedValue","dragPercentage","setTimeout","stopThumbDrag","_onLabelTextChange","[id]","[class.mat-checked]","[class.mat-disabled]","[class.mat-slide-toggle-label-before]","FocusMonitor","required","MatRipple","_thumbBarEl","querySelector","_thumbBarWidth","clientWidth","_thumbEl","_previousChecked","applyCssTransform","dragX","percentage","MatSlideToggleModule","HAMMER_GESTURE_CONFIG","useClass","GestureConfig","MAT_SLIDER_VALUE_ACCESSOR","MatSlider","MatSliderChange","MatSliderBase","_MatSliderMixinBase","_invert","_max","_min","_step","_thumbLabel","_tickInterval","_value","_vertical","input","_percent","_isSliding","_isActive","_tickIntervalPercent","_sliderDimensions","_controlValueAccessorChangeFn","_dirChangeSubscription","_calculatePercentage","_roundLabelTo","toString","split","pop","tickInterval","toFixed","_focusHostElement","blur","_blurHostElement","_clamp","vertical","invert","percent","_isMinValue","thumbLabel","axis","_invertMouseCoords","_thumbGap","tickSize","backgroundSize","sign","rotate","_invertAxis","_onMouseenter","_getSliderDimensions","_updateTickIntervalPercent","_onClick","oldValue","_updateValueFromPosition","x","clientX","y","clientY","_emitInputEvent","_onSlide","_onSlideStart","center","_valueOnSlideStart","_onSlideEnd","_onFocus","_onBlur","_onKeydown","PAGE_UP","_increment","PAGE_DOWN","END","HOME","UP_ARROW","DOWN_ARROW","_onKeyup","numSteps","step","pos","size","posComponent","exactValue","_calculateValue","closestValue","round","trackSize","pixelsPerStep","stepsPerTick","pixelsPerTick","_sliderWrapper","getBoundingClientRect","(focus)","(blur)","(keydown)","(keyup)","(mouseenter)","(slide)","(slideend)","(slidestart)","[tabIndex]","[attr.aria-valuemax]","[attr.aria-valuemin]","[attr.aria-valuenow]","[attr.aria-orientation]","[class.mat-slider-disabled]","[class.mat-slider-has-ticks]","[class.mat-slider-horizontal]","[class.mat-slider-axis-inverted]","[class.mat-slider-sliding]","[class.mat-slider-thumb-label-showing]","[class.mat-slider-vertical]","[class.mat-slider-min-value]","[class.mat-slider-hide-last-tick]","_thumbLabelDeprecated","_tickIntervalDeprecated","MatSliderModule","BidiModule","_overlayRef","_afterClosed","_afterOpened","_onAction","onAction","_finishDismiss","clearTimeout","_durationTimeoutId","_open","dispose","InjectionToken","MatSpinner","MatProgressSpinner","MatProgressSpinnerModule","MAT_RADIO_GROUP_CONTROL_VALUE_ACCESSOR","MatRadioGroup","MatRadioChange","MatRadioGroupBase","_MatRadioGroupMixinBase","_changeDetector","_name","_isInitialized","_labelPosition","_disabled","_updateRadioButtonNames","_markRadiosForCheck","newValue","_updateSelectedRadioFromValue","_checkSelectedRadioButton","_touch","_radios","radio","isAlreadySelected","event_1","_markForCheck","MatRadioButton","descendants","align","MatRadioButtonBase","_MatRadioButtonMixinBase","radioGroup","_radioDispatcher","_removeUniqueSelectionListener","listen","newCheckedState","notify","_isRippleDisabled","_onInputChange","groupValueChanged","[class.mat-radio-checked]","[class.mat-radio-disabled]","[attr.id]","UniqueSelectionDispatcher","MatRadioModule","UNIQUE_SELECTION_DISPATCHER_PROVIDER","matDrawerAnimations","transformDrawer","MatDrawerToggleResult","animationFinished","_container","_margins","_contentMargins","margins","[style.margin-left.px]","[style.margin-right.px]","_focusTrapFactory","_doc","_elementFocusedBeforeDrawerWasOpened","_mode","_disableClose","opened","_isFocusTrapEnabled","_focusTrap","_trapFocus","_restoreFocus","onAlignChanged","onPositionChanged","_modeChanged","mode","HTMLElement","_openedVia","enabled","destroy","isOpen","openedVia","_opened","_enableAnimations","close","openedChange","[@transform]","(@transform.start)","(@transform.done)","[attr.align]","[class.mat-drawer-end]","[class.mat-drawer-over]","[class.mat-drawer-side]","DOCUMENT","_openedStream","openedStart","_closedStream","closedStart","onOpen","onClose","backdropClick","_doCheckSubject","_autosize","defaultAutosize","drawer","_watchDrawerToggle","_watchDrawerPosition","_watchDrawerMode","_isDrawerOpen","_start","_end","_updateContentMargins","debounceTime","ngDoCheck","_setContainerClass","throwMatDuplicatedDrawerError","_right","_left","_closeModalDrawer","_isShowingBackdrop","_width","autosize","_fixedBottomGap","[class.mat-sidenav-fixed]","[style.top.px]","[style.bottom.px]","addEventListener","listener","MatTooltip","_tooltipInstance","_disposeTooltip","_message","_ariaDescriber","removeDescription","_isTooltipVisible","_updateTooltipMessage","describe","_tooltipClass","_setTooltipClass","IOS","_manualListeners","removeEventListener","clear","delay","showDelay","_createTooltip","hideDelay","isVisible","ESCAPE","_handleTouchend","_defaultOptions","touchendHideDelay","TooltipComponent","afterHidden","_getOrigin","overlay","_getOverlayPosition","strategy","connectedTo","main","withFallbackPosition","fallback","scrollableAncestors","_scrollDispatcher","getAncestorScrollContainers","withScrollableContainers","onPositionChange","scrollableViewProperties","isOverlayClipped","_setTransformOrigin","connectionPair","scrollStrategy","_scrollStrategy","isDirectionLtr","originX","originY","getMatTooltipInvalidPositionError","_invertPosition","isLtr","overlayX","overlayY","updatePosition","tooltipClass","(longpress)","(touchend)","ScrollDispatcher","AriaDescriber","MAT_TOOLTIP_SCROLL_STRATEGY","MAT_TOOLTIP_DEFAULT_OPTIONS","_positionDeprecated","_visibility","_closeOnInteraction","_transformOrigin","_onHide","_hideTimeoutId","_showTimeoutId","overlayPosition","_animationStart","_animationDone","_handleBodyInteraction","matTooltipAnimations","tooltipState","aria-hidden","ɵ0","MAT_TOOLTIP_SCROLL_STRATEGY_PROVIDER","ARIA_DESCRIBER_PROVIDER","MatTooltipModule","itemsPerPageLabel","nextPageLabel","previousPageLabel","getRangeLabel","MatPaginatorIntl","MAT_PAGINATOR_INTL_PROVIDER","MAT_PAGINATOR_INTL_PROVIDER_FACTORY","PageEvent","MatPaginator","_pageIndex","_length","_pageSizeOptions","hidePageSize","_intlChanges","_pageSize","_updateDisplayedPageSizeOptions","pageSizeOptions","p","_initialized","nextPage","hasNextPage","_emitPageEvent","previousPage","hasPreviousPage","numberOfPages","_changePageSize","floor","_displayedPageSizeOptions","push","MatPaginatorModule","MatSelectModule","color","_bufferValue","MatProgressBar","clamp","_primaryTransform","_bufferTransform","bufferValue","aria-valuemin","aria-valuemax","[attr.mode]","[class.mat-primary]","[class.mat-accent]","[class.mat-warn]","MatProgressBarModule","BASE_SIZE","MatProgressSpinnerBase","_MatProgressSpinnerMixinBase","INDETERMINATE_ANIMATION_TEMPLATE","platform","_document","_fallbackAnimation","_elementSize","_diameter","EDGE","TRIDENT","animationClass","diameters","_attachStyleNode","_strokeWidth","diameter","strokeWidth","viewBox","_circleRadius","PI","_strokeCircumference","styleTag","createElement","head","appendChild","sheet","insertRule","_getAnimationText","replace","Set","[style.width.px]","[style.height.px]","document","matMenuAnimations","transformMenu","fadeInItems","MAT_MENU_DEFAULT_OPTIONS","MatMenu","items","MatMenuItem","overlapTrigger","MAT_MENU_SCROLL_STRATEGY","MAT_MENU_SCROLL_STRATEGY_PROVIDER","MAT_MENU_SCROLL_STRATEGY_PROVIDER_FACTORY","MatMenuTrigger","_parentMenu","_menuItemInstance","_menuOpen","_closeSubscription","_positionSubscription","_hoverSubscription","_openedByMouse","menuOpened","onMenuOpen","menuClosed","onMenuClose","_triggersSubmenu","triggersSubmenu","menu","_checkMenu","reason","_destroyMenu","_hovered","openMenu","_cleanUpSubscriptions","toggleMenu","closeMenu","_portal","_menuClosingActions","_initMenu","_startAnimation","menuOpen","_resetMenu","_resetAnimation","parentMenu","_setMenuElevation","_setIsMenuOpen","focusFirstItem","setElevation","depth","_highlighted","throwMatMenuMissingError","_getOverlayConfig","_subscribeToPositions","_getPosition","hasBackdrop","backdropClass","posX","posY","setPositionClasses","xPosition","originFallbackX","_b","yPosition","overlayFallbackY","_c","originFallbackY","_d","overlayFallbackX","offsetY","withDirection","withOffsetY","backdrop","parentClose","hover","_handleMousedown","isFakeMousedownFromScreenReader","aria-haspopup","(mousedown)","Self","_deprecatedMatMenuTriggerFor","MatMenuModule","matSelectAnimations","transformPanel","minWidth","fadeInContent","MAT_SELECT_SCROLL_STRATEGY","MAT_SELECT_SCROLL_STRATEGY_PROVIDER","MAT_SELECT_SCROLL_STRATEGY_PROVIDER_FACTORY","MatSelectChange","MatSelectBase","_defaultErrorStateMatcher","_parentForm","_parentFormGroup","ngControl","_MatSelectMixinBase","mixinErrorState","MatSelectTrigger","MatSelect","_parentFormField","_scrollStrategyFactory","_panelOpen","_scrollTop","_multiple","_compareWith","o1","o2","_uid","_destroy","_triggerFontSize","_onChange","_onTouched","_optionIds","_panelDoneAnimating","_offsetY","_positions","focused","controlType","optionSelectionChanges","defer","options","option","onSelectionChange","onStable","switchMap","selectionChange","valueChange","valueAccessor","_placeholder","stateChanges","_selectionModel","getMatSelectDynamicMultipleError","getMatSelectNonFunctionValueError","_initializeSelection","_id","o","SelectionModel","multiple","_initKeyManager","_resetOptions","updateErrorState","panelOpen","_triggerRect","getComputedStyle","_calculateOverlayPosition","_highlightCorrectOption","overlayDir","fontSize","_setSelectionByValue","selectedOptions","viewValue","_isRtl","reverse","join","_handleOpenKeydown","_handleClosedKeydown","isArrowKey","altKey","_keyManager","onKeydown","setFirstItemActive","setLastItemActive","activeItem","previouslyFocusedIndex","activeItemIndex","shiftKey","_selectViaInteraction","_onPanelDone","offsetX","_onFadeInDone","_onAttached","positionChange","_calculateOverlayOffsetX","panel","scrollTop","_getPanelTheme","isEmpty","isUserInput","getMatSelectNonArrayValueError","_clearSelection","currentValue","_selectValue","_sortValues","correspondingOption","setActiveItem","find","error","console","warn","select","skip","deselect","ActiveDescendantKeyManager","withTypeAhead","tabOut","_scrollActiveOptionIntoView","_onSelect","_setOptionIds","wasSelected","isSelected","_getOptionIndex","_propagateChanges","fallbackValue","valueToEmit","itemHeight","_getItemHeight","activeOptionIndex","labelCount","MatOption","countGroupLabelsBeforeOption","optionGroups","scrollOffset","panelTop","result","current","_getItemCount","panelHeight","scrollContainerHeight","maxScroll","selectedOptionOffset","scrollBuffer","_calculateOverlayScroll","_calculateOverlayOffsetY","_checkOverlayWithinViewport","optionOffsetFromScrollTop","halfOptionHeight","optimalScrollPosition","placeholder","_getAriaActiveDescendant","overlayRect","viewportSize","getViewportSize","paddingWidth","SELECT_MULTIPLE_PANEL_PADDING_X","first","group","leftOverflow","rightOverflow","optionOffsetFromPanelTop","optionHeightAdjustment","maxOptionsDisplayed","firstDisplayedIndex","selectedDisplayIndex","partialItemHeight","topSpaceAvailable","bottomSpaceAvailable","panelHeightTop","abs","totalPanelHeight","panelHeightBottom","_adjustPanelUp","_adjustPanelDown","_getOriginBasedOnOption","distanceBelowViewport","distanceAboveViewport","setDescribedByIds","ids","_ariaDescribedby","onContainerClick","[attr.tabindex]","[attr.aria-label]","[attr.aria-labelledby]","[attr.aria-required]","[attr.aria-invalid]","[attr.aria-owns]","[attr.aria-multiselectable]","[attr.aria-describedby]","[attr.aria-activedescendant]","[class.mat-select-disabled]","[class.mat-select-invalid]","[class.mat-select-required]","MatFormFieldControl","MAT_OPTION_PARENT_COMPONENT","NgForm","FormGroupDirective","MatFormField","NgControl","CdkConnectedOverlay","MatOptgroup","customTrigger","compareWith","errorStateMatcher","MatOptionModule","MatFormFieldModule","SCROLL_THROTTLE_MS","MAT_TOOLTIP_SCROLL_STRATEGY_PROVIDER_FACTORY","nodeName","webkitUserSelect","userSelect","MatListSubheaderCssMatStyler","_navList","_isNavList","MatListItem","_lineSetter","MatLineSetter","_lines","_handleFocus","_handleBlur","MatNavList","_MatListItemMixinBase","MatSelectionListBase","_MatSelectionListMixinBase","MatListOptionBase","_MatListOptionMixinBase","MAT_SELECTION_LIST_VALUE_ACCESSOR","MatSelectionList","MatListOptionChange","MatSelectionListChange","MatListOption","selectionList","_hasFocus","checkboxPosition","_setSelected","_reportValueChange","_removeOptionFromList","getLabel","_text","_emitDeprecatedChangeEvent","_setFocusedOption","tabindex","[class.mat-list-item-disabled]","[class.mat-list-item-focus]","[attr.aria-selected]","_tempValues","_setOptionsFromValues","optionIndex","setNextItemActive","_toggleSelectOnFocusedOption","_getSelectedOptionValues","values","_getOptionByValue","Boolean","focusedOption","focusedIndex","MatListModule","MatLineModule","MatPseudoCheckboxModule","MatList","MatListAvatarCssMatStyler","MatListIconCssMatStyler","MatDividerModule","MatMenuItemBase","_MatMenuItemMixinBase","_checkDisabled","_emitHoverEvent","output","length_1","TEXT_NODE","[class.mat-menu-item-highlighted]","[class.mat-menu-item-submenu-trigger]","[attr.disabled]","_xPosition","_yPosition","_tabSubscription","_classList","_panelAnimationState","_overlapTrigger","throwMatMenuInvalidPositionX","throwMatMenuInvalidPositionY","classes","className","FocusKeyManager","withWrap","item","setFocusOrigin","resetActiveItem","newElevation","customElevation","c","_previousElevation","_onAnimationDone","MatDatepickerInput","_dateAdapter","deserialize","_lastValueValid","isValid","_getValidDateOrNull","oldDate","format","_dateFormats","display","dateInput","sameDate","_valueChange","_validatorOnChange","_disabledChange","_datepicker","_datepickerSubscription","selectedChanged","_cvaOnChange","MatDatepickerInputEvent","dateChange","_localeSubscription","registerOnValidatorChange","validate","_validator","getPopupConnectionElementRef","_formField","underlineRef","_getPopupFallbackOffset","_inputContainerRef","_onInput","date","parse","isDateInstance","MAT_DATEPICKER_VALUE_ACCESSOR","MAT_DATEPICKER_VALIDATORS","MAT_INPUT_VALUE_ACCESSOR","[attr.aria-haspopup]","[attr.min]","[attr.max]","[disabled]","(input)","(change)","DateAdapter","MAT_DATE_FORMATS","matDatepicker","matDatepickerFilter","MatDatepickerToggle","datepicker","_watchStateChanges","datepickerDisabled","inputDisabled","_datepickerInput","MatDatepickerModule","MatDialogModule","MatCalendar","MatCalendarBody","MatDatepicker","MatDatepickerContent","MatMonthView","MatYearView","MatMultiYearView","MatDatepickerIntl","MAT_DATEPICKER_SCROLL_STRATEGY_PROVIDER","MatDivider","_inset","[class.mat-divider-vertical]","[class.mat-divider-inset]","_hideToggle","displayMode","MatAccordion","hideToggle","CdkAccordion","MatExpansionPanelContent","_template","matExpansionAnimations","indicatorRotate","expansionHeaderHeight","params","collapsedHeight","expandedHeight","bodyExpansion","MatExpansionPanelBase","accordion","_uniqueSelectionDispatcher","_MatExpansionPanelMixinBase","expanded","_getExpandedState","_lazyContent","_inputChanges","MatExpansionPanel","outputs","[class.mat-expanded]","[class.mat-expansion-panel-spacing]","Host","MatExpansionPanelActionRow","MatExpansionPanelHeader","_parentChangeSubscription","_toggle","_isExpanded","_getPanelId","_showToggle","_keyup","[attr.aria-controls]","[attr.aria-expanded]","[@expansionHeight]","MatExpansionModule","CdkAccordionModule","MatExpansionPanelTitle","MatExpansionPanelDescription","MatGridTile","_rowspan","_colspan","coerceToNumber","_setStyle","property","MatGridTileText","MatGridAvatarCssMatStyler","MatGridTileHeaderCssMatStyler","MatGridTileFooterCssMatStyler","TileCoordinator","numColumns","tiles","columnIndex","rowIndex","tracker","fill","positions","tile","_trackTile","lastRowMax","rowCount","gapStartIndex","_findMatchingGap","colspan","_markTilePosition","TilePosition","tileCols","gapEndIndex","_nextRow","_findGapEndIndex","rowspan","row","col","TileStyler","_rows","init","gutterSize","cols","_gutterSize","normalizeUnits","_cols","getBaseTileSize","sizePercent","gutterFraction","getTilePosition","baseSize","calc","getTileSize","span","setStyle","colIndex","percentWidthPerTile","gutterWidthFractionPerTile","setColStyles","setRowStyles","percentWidth","gutterWidth","baseTileWidth","side","getGutterSpan","getTileSpan","tileHeight","getComputedHeight","FixedTileStyler","fixedRowHeight","reset","list","_setListStyle","_tiles","RatioTileStyler","_parseRatio","percentHeightPerTile","rowHeightRatio","baseTileHeight","ratioParts","parseFloat","FitTileStyler","gutterHeightPerTile","MatGridList","_gutter","coerceToString","_rowHeight","_setTileStyler","_checkCols","_checkRowHeight","_layoutTiles","rowHeight","_tileStyler","MatGridListModule","MatListBase","_MatListMixinBase","MatListItemBase","selectedChange","selectedDate","_userSelection","_init","_selectedDate","_getDateInCurrentMonth","_todayDate","today","_monthLabel","getMonthNames","getMonth","activeDate","toLocaleUpperCase","firstOfMonth","createDate","getYear","_firstWeekOffset","getDayOfWeek","getFirstDayOfWeek","_createWeekCells","daysInMonth","getNumDaysInMonth","dateNames","getDateNames","_weeks","cell","dateFilter","dateA11yLabel","MatCalendarCell","_hasSameMonthAndYear","getDate","d1","d2","createMissingDateImplError","_activeDate","oldActiveDate","_selectedYear","_todayYear","activeYear","activeOffset","_years","year","_createCellForYear","_yearSelected","month","_getActiveCell","yearName","getYearName","_selectedMonth","_getMonthInCurrentYear","_monthSelected","_todayMonth","_yearLabel","monthNames","_months","_createCellForMonth","monthName","monthYearA11yLabel","_isMonthEnabled","addCalendarDays","startView","_dateFilterForViews","minDate","compareDate","maxDate","_startAt","_minDate","_maxDate","_clampedActiveDate","clampDate","_currentView","monthYearLabel","switchToMultiYearViewLabel","switchToMonthViewLabel","prevMonthLabel","prevYearLabel","multi-year","prevMultiYearLabel","nextMonthLabel","nextYearLabel","nextMultiYearLabel","startAt","_focusActiveCell","firstChange","view","monthView","yearView","multiYearView","_dateSelected","_userSelected","_goToDateInView","_currentPeriodClicked","_previousClicked","addCalendarMonths","addCalendarYears","_nextClicked","_previousEnabled","_isSameView","_nextEnabled","_handleCalendarBodyKeydown","_handleCalendarBodyKeydownInMonthView","_handleCalendarBodyKeydownInYearView","_handleCalendarBodyKeydownInMultiYearView","date1","date2","yearsPerPage","datepickerUid","MAT_DATEPICKER_SCROLL_STRATEGY","MAT_DATEPICKER_SCROLL_STRATEGY_PROVIDER_FACTORY","_calendar","[class.mat-datepicker-content-touch]","_inputSubscription","_popupRef","_focusedElementBeforeOpen","activeElement","touchUi","_openAsDialog","_openAsPopup","openedStream","_dialogRef","_calendarPortal","isAttached","completeClose","closedStream","afterClosed","componentInstance","_createPopup","keydownEvents","fallbackOffset","MatDialog","NG_VALIDATORS","target","targetElement","_parseValidator","matDatepickerParse","text","_minValidator","controlValue","matDatepickerMin","actual","_maxValidator","matDatepickerMax","_filterValidator","_dateFilter","Validators","compose","localeChanges","registerDatepicker","_registerInput","[attr.role]","[@slideDialog]","(@slideDialog.start)","(@slideDialog.done)","MatDialogContainer","uniqueId","MatDialogRef","_containerInstance","location","disableClose","_afterOpen","_beforeClose","_locationChanges","_animationStateChanged","phaseName","_result","closeOnNavigation","dialogResult","detachBackdrop","_startExitAnimation","afterOpen","beforeClose","_getPositionStrategy","centerVertically","updateSize","getConfig","MAT_DIALOG_DATA","MAT_DIALOG_DEFAULT_OPTIONS","MAT_DIALOG_SCROLL_STRATEGY","MAT_DIALOG_SCROLL_STRATEGY_PROVIDER","MAT_DIALOG_SCROLL_STRATEGY_PROVIDER_FACTORY","_location","_parentDialog","_overlayContainer","_openDialogsAtThisLevel","_afterAllClosedAtThisLevel","_afterOpenAtThisLevel","_ariaHiddenElements","afterAllClosed","openDialogs","_afterAllClosed","componentOrTemplateRef","MatDialogConfig","getDialogById","dialogContainer","_attachDialogContainer","dialogRef","_attachDialogContent","_hideNonDialogContentFromAssistiveTechnology","_removeOpenDialog","closeAll","dialog","dialogConfig","minHeight","maxWidth","maxHeight","$implicit","previousValue","setAttribute","removeAttribute","overlayContainer","getContainerElement","parentElement","siblings","children","sibling","hasAttribute","getAttribute","Location","OverlayContainer","dialogElementUid","MatDialogClose","proxiedChange","_matDialogClose","MatDialogTitle","_ariaLabelledBy","MatDialogContent","MatDialogActions","SvgIconConfig","url","svgElement","MatIconRegistry","_httpClient","_sanitizer","_svgIconConfigs","_iconSetConfigs","_cachedIconsByUrl","_inProgressUrlFetches","_fontCssClassesByAlias","_defaultFontSetClass","addSvgIcon","iconName","addSvgIconInNamespace","namespace","iconKey","addSvgIconSet","addSvgIconSetInNamespace","configNamespace","registerFontClassAlias","alias","classNameForFontAlias","setDefaultFontSetClass","getDefaultFontSetClass","getSvgIconFromUrl","safeUrl","sanitize","SecurityContext","RESOURCE_URL","getMatIconFailedToSanitizeError","cachedIcon","cloneSvg","_loadSvgIconFromConfig","tap","svg","getNamedSvgIcon","_getSvgFromConfig","iconSetConfigs","_getSvgFromIconSetConfigs","observableThrow","getMatIconNameNotFoundError","namedIcon","_extractIconWithNameFromAnySet","iconSetFetchRequests","iconSetConfig","_loadSvgIconSetFromConfig","catchError","err","log","forkJoin","foundIcon","_extractSvgIconFromSet","_fetchUrl","svgText","_createSvgElementForSingleIcon","_svgElementFromString","responseText","_setSvgAttributes","iconSet","iconSource","iconElement","cloneNode","_toSvgElement","str","div","innerHTML","ELEMENT_NODE","getMatIconNoHttpProviderError","inProgressFetch","req","responseType","finalize","share","HttpClient","DomSanitizer","ICON_REGISTRY_PROVIDER","ICON_REGISTRY_PROVIDER_FACTORY","MatIconBase","_MatIconMixinBase","MatIcon","_iconRegistry","ariaHidden","_fontSet","_cleanupFontValue","_fontIcon","_splitIconName","parts","svgIcon","_setSvgElement","_clearSvgElement","_usingFontIcon","_updateFontIconClasses","layoutElement","childCount","removeChild","elem","fontSetClass","fontSet","_previousFontSetClass","fontIcon","_previousFontIconClass","MatTextareaAutosize","_minRows","_setMinHeight","_maxRows","_setMaxHeight","minRows","_cachedLineHeight","_setTextareaStyle","maxRows","resizeToFitContent","fromEvent","window","auditTime","_cacheTextareaLineHeight","textarea","textareaClone","rows","border","padding","overflow","force","_previousValue","placeholderText","scrollHeight","MAT_INPUT_INVALID_TYPES","MatInputBase","_MatInputMixinBase","MatInput","inputValueAccessor","_type","_readonly","_isServer","_neverEmptyInputTypes","t","getSupportedInputTypes","_inputValueAccessor","_previousNativeValue","el","selectionStart","selectionEnd","setSelectionRange","_validateType","_isTextarea","_dirtyCheckNativeValue","isFocused","readonly","getMatInputUnsupportedTypeError","_isNeverEmpty","_isBadInput","validity","badInput","[class.mat-input-server]","[placeholder]","[required]","[readonly]","MatInputModule","calendarLabel","openCalendarLabel","displayValue","numCols","allowDisabledSelection","activeCell","cellAspectRatio","selectedValueChange","_cellClicked","_isActiveCell","cellNumber","_firstRowOffset","attr.aria-readonly","todayValue","selectedValue","labelMinRequiredCells","firstDayOfWeek","narrowWeekdays","getDayOfWeekNames","longWeekdays","weekdays","long","narrow","_weekdays","selectedYear","selectedMonth","[class.mat-checkbox-indeterminate]","[class.mat-checkbox-checked]","[class.mat-checkbox-disabled]","[class.mat-checkbox-label-before]","MAT_CHECKBOX_CONTROL_VALUE_ACCESSOR","MAT_CHECKBOX_CLICK_ACTION","MatCheckbox","indeterminateChange","indeterminate","_MatCheckboxMixinBase","MAT_CHECKBOX_REQUIRED_VALIDATOR","MatCheckboxRequiredValidator","[attr.required]","CheckboxRequiredValidator","MatCheckboxModule","MatChipSelectionChange","MatChipBase","_MatChipMixinBase","MatBasicChip","MatChip","_selectable","_removable","destroyed","removed","onRemove","selectable","chip","selectViaInteraction","toggleSelected","removable","DELETE","BACKSPACE","_blur","[class.mat-chip-selected]","MatChipRemove","_parentChip","MatChipListBase","_MatChipListMixinBase","MatChipListChange","MatChipList","_lastDestroyedIndex","_chipSet","_tabOutSubscription","_tabIndex","_userTabIndex","ariaOrientation","_chipInput","chips","_changeSubscription","_resetChips","_updateTabIndex","_updateFocusForDestroyedChips","_dropSubscriptions","registerInput","inputElement","_focusInput","_keydown","code","isInputEmpty","_isInputEmpty","isPrevKey","isNextKey","isBackKey","setPreviousItemActive","_updateKeyManager","chipIndex","chipsArray","newFocusIndex","focusChip","correspondingChip","correspondingChipIndex","updateActiveItemIndex","_markAsTouched","_listenToChipsFocus","_listenToChipsSelection","_listenToChipsRemoved","_chipFocusSubscription","_chipBlurSubscription","_chipSelectionSubscription","chipSelectionChanges","chipFocusChanges","chipBlurChanges","_chipRemoveSubscription","chipRemoveChanges","[class.mat-chip-list-disabled]","[class.mat-chip-list-invalid]","[class.mat-chip-list-required]","MatChipInput","_addOnBlur","separatorKeyCodes","chipEnd","_chipList","_emitChipEnd","addOnBlur","_focus","chipList","MatChipsModule","ariaDescribedBy","autoFocus","matDialogAnimations","slideDialog","_elementFocusedBeforeDialogWasOpened","_state","throwMatDialogContentAlreadyAttachedError","_savePreviouslyFocusedElement","focusInitialElementWhenReady","toFocus","_onAnimationStart","MatButton","focusMonitor","stopImmediatePropagation","MatAnchor","MatMiniFab","MatFab","MatButtonCssMatStyler","MatRaisedButtonCssMatStyler","MatIconButtonCssMatStyler","MatButtonToggleGroupBase","_MatButtonToggleGroupMixinBase","MAT_BUTTON_TOGGLE_GROUP_VALUE_ACCESSOR","MatButtonToggleGroup","_uniqueIdCounter","MatButtonToggleChange","_updateButtonToggleNames","_updateSelectedButtonToggleFromValue","_buttonToggles","matchingButtonToggle","buttonToggle","_markButtonTogglesForCheck","[class.mat-button-toggle-vertical]","MatButtonToggle","MatButtonToggleGroupMultiple","toggleGroup","toggleGroupMultiple","_buttonToggleDispatcher","_isSingleSelector","buttonToggleGroup","buttonToggleGroupMultiple","[class.mat-button-toggle-standalone]","[class.mat-button-toggle-checked]","[class.mat-button-toggle-disabled]","MatButtonToggleModule","MatCardContent","MatCardTitle","MatCardSubtitle","[class.mat-card-actions-align-end]","MatCardActions","MatCardFooter","MatCardImage","MatCardSmImage","MatCardMdImage","MatCardLgImage","MatCardXlImage","MatCardAvatar","MatCardHeader","MatCardTitleGroup","MatCardModule","MatCard","MatCheckboxChange","MatCheckboxBase","_clickAction","_currentAnimationClass","_currentCheckState","TransitionCheckState","Init","_indeterminate","changed","_transitionCheckState","Indeterminate","Checked","Unchecked","_getAriaChecked","newState","oldState","_getAnimationClassForCheckStateTransition","_removeFocusRipple","_onInteractionEvent","animSuffix","MAT_LABEL_GLOBAL_OPTIONS","MatError","[class.mat-right]","MatHint","MatPlaceholder","MatLabel","MatPrefix","MatSuffix","matFormFieldAnimations","transitionMessages","labelOptions","_showAlwaysAnimate","_subscriptAnimationState","_hintLabel","_hintLabelId","_labelOptions","floatLabel","float","_hideRequiredMarker","_floatLabel","_processHints","_validateControlChild","_control","_validatePlaceholders","_syncDescribedByIds","valueChanges","_hintChildren","_errorChildren","_shouldForward","prop","_hasPlaceholder","_placeholderChild","_hasLabel","_labelChild","_shouldLabelFloat","_canLabelFloat","shouldLabelFloat","shouldPlaceholderFloat","_shouldAlwaysFloat","_hideControlPlaceholder","_hasFloatingLabel","_getDisplayedMessages","errorState","_animateAndLockLabel","_label","getMatFormFieldPlaceholderConflictError","_validateHints","startHint_1","endHint_1","hint","hintLabel","getMatFormFieldDuplicatedHintError","startHint","endHint","getMatFormFieldMissingControlError","[class.mat-input-invalid]","[class.mat-form-field-invalid]","[class.mat-form-field-can-float]","[class.mat-form-field-should-float]","[class.mat-form-field-hide-placeholder]","[class.mat-form-field-disabled]","[class.mat-focused]","[class.ng-untouched]","[class.ng-touched]","[class.ng-pristine]","[class.ng-dirty]","[class.ng-valid]","[class.ng-invalid]","[class.ng-pending]","hideRequiredMarker","floatPlaceholder","_connectionContainerRef","_prefixChildren","_suffixChildren","_uniqueAutocompleteIdCounter","MatAutocompleteSelectedEvent","MatAutocompleteBase","_MatAutocompleteMixinBase","MatAutocomplete","showPanel","_isOpen","displayWith","optionSelected","_setVisibility","_setScrollTop","_getScrollTop","_emitSelectEvent","MAT_AUTOCOMPLETE_SCROLL_STRATEGY","MAT_AUTOCOMPLETE_SCROLL_STRATEGY_PROVIDER","MAT_AUTOCOMPLETE_SCROLL_STRATEGY_PROVIDER_FACTORY","MAT_AUTOCOMPLETE_VALUE_ACCESSOR","MatAutocompleteTrigger","_zone","_manuallyFloatingLabel","_escapeEventStream","optionSelections","autocomplete","_destroyPanel","openPanel","_attachOverlay","closePanel","_resetLabel","_closingActionsSubscription","_outsideClickStream","clickTarget","formField","_setTriggerValue","_resetActiveItem","activeOption","prevActiveItem","TAB","_scrollToOption","_handleInput","readOnly","shouldAnimate","optionOffset","newScrollTop","_subscribeToClosingActions","firstStable","optionChanges","_positionStrategy","recalculateLastPosition","panelClosingActions","_setValueAndClose","toDisplay","inputValue","_clearPreviousSelectedOption","getMatAutocompleteMissingPanelError","_getHostWidth","_getConnectedElement","aria-autocomplete","(focusin)","MatAutocompleteModule","DEFAULT_ROUND_BUTTON_COLOR","MatButtonBase","_MatButtonMixinBase","_isRoundButton","_hasHostAttributes","_isIconButton","attributes","_i","attribute","__extends","d","__","constructor","extendStatics","base","class_1","defaultColor","_color","colorPalette","defaultTabIndex","matcher","range","valueFunction","valuesArray","enforceStyleRecalculation","getPropertyValue","distanceToFurthestCorner","rect","distX","distY","sqrt","transformValue","webkitTransform","scrollStrategies","reposition","block","defaultOptions","parentRegistry","httpClient","sanitizer","provider","exp","match","scrollThrottle","parentIntl","sortOrder","setPrototypeOf","__proto__","__assign","assign","s","n","SHARP_CURVE","MATERIAL_SANITY_CHECKS","_sanityChecksEnabled","_hasDoneGlobalChecks","_hasCheckedHammer","_window","_areChecksEnabled","_checkDoctypeIsDefined","_checkThemeIsPresent","_isTestEnv","doctype","testElement","body","computedStyle","_checkHammerIsAvailable","MAT_DATE_LOCALE","MAT_DATE_LOCALE_PROVIDER","LOCALE_ID","_localeChanges","setLocale","locale","second","firstValid","secondValid","SUPPORTS_INTL_API","Intl","DEFAULT_MONTH_NAMES","short","String","DEFAULT_DATE_NAMES","DEFAULT_DAY_OF_WEEK_NAMES","ISO_8601_REGEX","NativeDateAdapter","matDateLocale","useUtcForDisplay","test","navigator","userAgent","getFullYear","getDay","dtf_1","DateTimeFormat","_stripDirectionalityCharacters","Date","dtf_2","day","dtf_3","weekday","dtf","_createDateWithOverflow","clone","displayFormat","UTC","getHours","getMinutes","getSeconds","getMilliseconds","timeZone","toDateString","years","months","newDate","days","toIso8601","getUTCFullYear","_2digit","getUTCMonth","getUTCDate","getTime","NaN","setFullYear","MAT_NATIVE_DATE_FORMATS","NativeDateModule","MatNativeDateModule","ShowOnDirtyErrorStateMatcher","dirty","submitted","touched","MAT_HAMMER_OPTIONS","_hammerOptions","commonModule","_hammer","Hammer","events","buildHammer","mc","pan","Pan","swipe","Swipe","press","Press","slide","_createRecognizer","threshold","longpress","time","recognizeWith","inheritances","recognizer","HammerGestureConfig","MatLine","_setLineClass","count","_resetClasses","_setClass","isAdd","RippleRef","_renderer","RippleState","HIDDEN","fadeOutRipple","IGNORE_MOUSE_EVENTS_TIMEOUT","RippleRenderer","_target","_isPointerDown","_triggerEvents","_activeRipples","_eventOptions","supportsPassiveEventListeners","passive","onMousedown","isSyntheticEvent","_lastTouchStartEvent","now","rippleDisabled","fadeInRipple","onTouchStart","touches","onPointerUp","ripple","VISIBLE","_containerElement","containerRect","transitionDuration","rippleRef","FADING_IN","runTimeoutOutsideZone","rippleEl","RIPPLE_FADE_OUT_DURATION","FADING_OUT","fadeOutAll","_triggerElement","_removeTriggerEvents","ngZone","_globalOptions","_rippleRenderer","_setupTriggerEventsIfEnabled","_trigger","[class.mat-ripple-unbounded]","unbounded","[class.mat-pseudo-checkbox-indeterminate]","[class.mat-pseudo-checkbox-checked]","[class.mat-pseudo-checkbox-disabled]","MatPseudoCheckbox","MatOptgroupBase","_MatOptgroupMixinBase","_uniqueOptgroupIdCounter","_labelId","[class.mat-optgroup-disabled]","MatOptionSelectionChange","_parent","_emitSelectionChangeEvent","setActiveStyles","setInactiveStyles","optionsArray","groups","groupCounter","[class.mat-selected]","[class.mat-option-multiple]","[class.mat-active]","[class.mat-option-disabled]"],"mappings":"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"}