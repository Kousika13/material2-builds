{"version":3,"file":"material.umd.min.js","sources":["../../src/lib/toolbar/toolbar.ts","../../src/lib/toolbar/toolbar-module.ts","../../src/lib/tree/outlet.ts","../../src/lib/tree/node.ts","../../src/lib/tree/padding.ts","../../src/lib/tree/tree.ts","../../src/lib/tree/toggle.ts","../../src/lib/tree/tree-module.ts","../../src/lib/tree/data-source/flat-data-source.ts","../../src/lib/tree/data-source/nested-data-source.ts","../../src/lib/version.ts","../../src/lib/autocomplete/autocomplete-trigger.ts","../../src/lib/core/testing/month-constants.ts","../../src/lib/expansion/expansion-animations.ts","../../src/lib/select/select.ts","../../src/lib/tooltip/tooltip.ts","../../src/lib/tabs/ink-bar.ts","../../src/lib/tabs/tab-label.ts","../../src/lib/tabs/tab-content.ts","../../src/lib/tabs/tab.ts","../../src/lib/tabs/tabs-animations.ts","../../src/lib/tabs/tab-body.ts","../../src/lib/tabs/tab-label-wrapper.ts","../../src/lib/tabs/tab-header.ts","../../src/lib/tabs/tab-group.ts","../../src/lib/tabs/tab-nav-bar/tab-nav-bar.ts","../../src/lib/tabs/tabs-module.ts","../../src/lib/sort/sort-animations.ts","../../src/lib/sort/sort-header-intl.ts","../../src/lib/sort/sort-header.ts","../../src/lib/sort/sort-module.ts","../../src/lib/stepper/step-label.ts","../../src/lib/stepper/stepper-intl.ts","../../src/lib/stepper/step-header.ts","../../src/lib/stepper/stepper-animations.ts","../../src/lib/stepper/stepper-icon.ts","../../src/lib/stepper/stepper.ts","../../src/lib/stepper/stepper-button.ts","../../src/lib/stepper/stepper-module.ts","../../src/lib/table/table.ts","../../src/lib/table/cell.ts","../../src/lib/table/row.ts","../../src/lib/table/table-module.ts","../../src/lib/table/table-data-source.ts","../../src/lib/slider/slider.ts","../../src/lib/slider/slider-module.ts","../../src/lib/snack-bar/snack-bar-ref.ts","../../src/lib/snack-bar/snack-bar-config.ts","../../src/lib/snack-bar/simple-snack-bar.ts","../../src/lib/snack-bar/snack-bar-animations.ts","../../src/lib/snack-bar/snack-bar-container.ts","../../src/lib/snack-bar/snack-bar-module.ts","../../src/lib/snack-bar/snack-bar.ts","../../src/lib/sort/sort.ts","../../src/lib/sidenav/drawer.ts","../../src/lib/sidenav/sidenav.ts","../../src/lib/sidenav/sidenav-module.ts","../../src/lib/slide-toggle/slide-toggle-config.ts","../../src/lib/slide-toggle/slide-toggle.ts","../../src/lib/slide-toggle/slide-toggle-module.ts","../../src/lib/progress-bar/progress-bar.ts","../../src/lib/progress-bar/progress-bar-module.ts","../../src/lib/progress-spinner/progress-spinner.ts","../../src/lib/progress-spinner/progress-spinner-module.ts","../../src/lib/radio/radio.ts","../../src/lib/radio/radio-module.ts","../../src/lib/sidenav/drawer-animations.ts","../../src/lib/select/select-module.ts","../../src/lib/tooltip/tooltip-animations.ts","../../src/lib/tooltip/tooltip-module.ts","../../src/lib/paginator/paginator-intl.ts","../../src/lib/paginator/paginator.ts","../../src/lib/paginator/paginator-module.ts","../../src/lib/menu/menu-content.ts","../../src/lib/menu/menu-animations.ts","../../src/lib/menu/menu-panel.ts","../../src/lib/menu/menu-item.ts","../../src/lib/menu/menu-directive.ts","../../src/lib/menu/menu-trigger.ts","../../src/lib/menu/menu-module.ts","../../src/lib/select/select-animations.ts","../../src/lib/list/selection-list.ts","../../src/lib/list/list-module.ts","../../src/lib/list/list.ts","../../src/lib/expansion/accordion.ts","../../src/lib/expansion/expansion-module.ts","../../src/lib/grid-list/grid-tile.ts","../../src/lib/grid-list/tile-coordinator.ts","../../src/lib/grid-list/tile-styler.ts","../../src/lib/grid-list/grid-list.ts","../../src/lib/grid-list/grid-list-module.ts","../../src/lib/icon/icon-registry.ts","../../src/lib/icon/icon.ts","../../src/lib/icon/icon-module.ts","../../src/lib/datepicker/calendar.ts","../../src/lib/datepicker/datepicker-animations.ts","../../src/lib/datepicker/datepicker.ts","../../src/lib/datepicker/datepicker-input.ts","../../src/lib/datepicker/datepicker-toggle.ts","../../src/lib/datepicker/datepicker-module.ts","../../src/lib/divider/divider.ts","../../src/lib/divider/divider-module.ts","../../src/lib/expansion/accordion-base.ts","../../src/lib/expansion/expansion-panel-content.ts","../../src/lib/expansion/expansion-panel.ts","../../src/lib/expansion/expansion-panel-header.ts","../../src/lib/datepicker/calendar-body.ts","../../src/lib/datepicker/month-view.ts","../../src/lib/datepicker/multi-year-view.ts","../../src/lib/datepicker/year-view.ts","../../src/lib/chips/chip-list.ts","../../src/lib/chips/chip-input.ts","../../src/lib/chips/chips-module.ts","../../src/lib/dialog/dialog-config.ts","../../src/lib/dialog/dialog-animations.ts","../../src/lib/dialog/dialog-container.ts","../../src/lib/dialog/dialog-ref.ts","../../src/lib/dialog/dialog.ts","../../src/lib/dialog/dialog-content-directives.ts","../../src/lib/dialog/dialog-module.ts","../../src/lib/input/autosize.ts","../../src/lib/input/input-value-accessor.ts","../../src/lib/input/input.ts","../../src/lib/input/input-module.ts","../../src/lib/datepicker/datepicker-intl.ts","../../src/lib/card/card.ts","../../src/lib/card/card-module.ts","../../src/lib/checkbox/checkbox-config.ts","../../src/lib/checkbox/checkbox.ts","../../src/lib/checkbox/checkbox-required-validator.ts","../../src/lib/checkbox/checkbox-module.ts","../../src/lib/chips/chip.ts","../../src/lib/chips/chip-default-options.ts","../../src/lib/button/button.ts","../../src/lib/button/button-module.ts","../../src/lib/button-toggle/button-toggle.ts","../../src/lib/button-toggle/button-toggle-module.ts","../../src/lib/autocomplete/autocomplete.ts","../../src/lib/autocomplete/autocomplete-origin.ts","../../src/lib/autocomplete/autocomplete-module.ts","../../src/lib/badge/badge.ts","../../src/lib/badge/badge-module.ts","../../src/lib/bottom-sheet/bottom-sheet-config.ts","../../src/lib/bottom-sheet/bottom-sheet-animations.ts","../../src/lib/bottom-sheet/bottom-sheet-container.ts","../../src/lib/bottom-sheet/bottom-sheet-module.ts","../../src/lib/bottom-sheet/bottom-sheet-ref.ts","../../src/lib/bottom-sheet/bottom-sheet.ts","../../src/lib/core/option/option.ts","../../src/lib/core/option/index.ts","../../src/lib/core/label/label-options.ts","../../src/lib/form-field/error.ts","../../src/lib/form-field/form-field-animations.ts","../../src/lib/form-field/form-field-control.ts","../../src/lib/form-field/hint.ts","../../src/lib/form-field/label.ts","../../src/lib/form-field/placeholder.ts","../../src/lib/form-field/prefix.ts","../../src/lib/form-field/suffix.ts","../../src/lib/form-field/form-field.ts","../../src/lib/form-field/form-field-module.ts","../../node_modules/tslib/tslib.es6.js","../../src/lib/core/common-behaviors/common-module.ts","../../src/lib/core/common-behaviors/disabled.ts","../../src/lib/core/common-behaviors/color.ts","../../src/lib/core/common-behaviors/disable-ripple.ts","../../src/lib/core/common-behaviors/tabindex.ts","../../src/lib/core/common-behaviors/error-state.ts","../../src/lib/core/common-behaviors/initialized.ts","../../src/lib/core/datetime/date-adapter.ts","../../src/lib/core/datetime/native-date-adapter.ts","../../src/lib/core/ripple/ripple-renderer.ts","../../src/lib/form-field/form-field-errors.ts","../../src/lib/input/input-errors.ts","../../src/lib/datepicker/datepicker-errors.ts","../../src/lib/menu/menu-errors.ts","../../src/lib/select/select-errors.ts","../../src/lib/sort/sort-errors.ts","../../src/lib/core/animation/animation.ts","../../src/lib/core/datetime/date-formats.ts","../../src/lib/core/datetime/native-date-formats.ts","../../src/lib/core/datetime/index.ts","../../src/lib/core/error/error-options.ts","../../src/lib/core/gestures/gesture-config.ts","../../src/lib/core/line/line.ts","../../src/lib/core/ripple/ripple-ref.ts","../../src/lib/core/ripple/ripple.ts","../../src/lib/core/ripple/index.ts","../../src/lib/core/selection/pseudo-checkbox/pseudo-checkbox.ts","../../src/lib/core/selection/index.ts","../../src/lib/core/option/optgroup.ts"],"sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  AfterViewInit,\n  ChangeDetectionStrategy,\n  Component,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  isDevMode,\n  QueryList,\n  ViewEncapsulation,\n  Inject,\n} from '@angular/core';\nimport {CanColor, mixinColor} from '@angular/material/core';\nimport {Platform} from '@angular/cdk/platform';\nimport {DOCUMENT} from '@angular/common';\n\n// Boilerplate for applying mixins to MatToolbar.\n/** @docs-private */\nexport class MatToolbarBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatToolbarMixinBase = mixinColor(MatToolbarBase);\n\n@Directive({\n  selector: 'mat-toolbar-row',\n  exportAs: 'matToolbarRow',\n  host: {'class': 'mat-toolbar-row'},\n})\nexport class MatToolbarRow {}\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-toolbar',\n  exportAs: 'matToolbar',\n  templateUrl: 'toolbar.html',\n  styleUrls: ['toolbar.css'],\n  inputs: ['color'],\n  host: {\n    'class': 'mat-toolbar',\n    '[class.mat-toolbar-multiple-rows]': '_toolbarRows.length > 0',\n    '[class.mat-toolbar-single-row]': '_toolbarRows.length === 0',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatToolbar extends _MatToolbarMixinBase implements CanColor, AfterViewInit {\n  private _document: Document;\n\n  /** Reference to all toolbar row elements that have been projected. */\n  @ContentChildren(MatToolbarRow) _toolbarRows: QueryList<MatToolbarRow>;\n\n  constructor(\n    elementRef: ElementRef,\n    private _platform: Platform,\n    @Inject(DOCUMENT) document?: any) {\n    super(elementRef);\n\n    // TODO: make the document a required param when doing breaking changes.\n    this._document = document;\n  }\n\n  ngAfterViewInit() {\n    if (!isDevMode() || !this._platform.isBrowser) {\n      return;\n    }\n\n    this._checkToolbarMixedModes();\n    this._toolbarRows.changes.subscribe(() => this._checkToolbarMixedModes());\n  }\n\n  /**\n   * Throws an exception when developers are attempting to combine the different toolbar row modes.\n   */\n  private _checkToolbarMixedModes() {\n    if (!this._toolbarRows.length) {\n      return;\n    }\n\n    // Check if there are any other DOM nodes that can display content but aren't inside of\n    // a <mat-toolbar-row> element.\n    const isCombinedUsage = [].slice.call(this._elementRef.nativeElement.childNodes)\n      .filter(node => !(node.classList && node.classList.contains('mat-toolbar-row')))\n      .filter(node => node.nodeType !== (this._document ? this._document.COMMENT_NODE : 8))\n      .some(node => node.textContent.trim());\n\n    if (isCombinedUsage) {\n      throwToolbarMixedModesError();\n    }\n  }\n}\n\n/**\n * Throws an exception when attempting to combine the different toolbar row modes.\n * @docs-private\n */\nexport function throwToolbarMixedModesError() {\n  throw Error('MatToolbar: Attempting to combine different toolbar modes. ' +\n    'Either specify multiple `<mat-toolbar-row>` elements explicitly or just place content ' +\n    'inside of a `<mat-toolbar>` for a single row.');\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatToolbar, MatToolbarRow} from './toolbar';\n\n\n@NgModule({\n  imports: [MatCommonModule],\n  exports: [MatToolbar, MatToolbarRow, MatCommonModule],\n  declarations: [MatToolbar, MatToolbarRow],\n})\nexport class MatToolbarModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {CdkTreeNodeOutlet} from '@angular/cdk/tree';\nimport {\n  Directive,\n  ViewContainerRef,\n} from '@angular/core';\n\n/**\n * Outlet for nested CdkNode. Put `[matTreeNodeOutlet]` on a tag to place children dataNodes\n * inside the outlet.\n */\n@Directive({\n  selector: '[matTreeNodeOutlet]'\n})\nexport class MatTreeNodeOutlet implements CdkTreeNodeOutlet {\n  constructor(public viewContainer: ViewContainerRef) {}\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CdkNestedTreeNode, CdkTree, CdkTreeNode, CdkTreeNodeDef} from '@angular/cdk/tree';\nimport {\n  AfterContentInit,\n  Attribute,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  Input,\n  IterableDiffers,\n  OnDestroy,\n  QueryList,\n} from '@angular/core';\nimport {CanDisable, HasTabIndex, mixinDisabled, mixinTabIndex} from '@angular/material/core';\nimport {MatTreeNodeOutlet} from './outlet';\n\n// TODO(devversion): workaround for https://github.com/angular/material2/issues/12760\nexport const _CdkTreeNodeDef = CdkTreeNodeDef;\n\nexport const _MatTreeNodeMixinBase = mixinTabIndex(mixinDisabled(CdkTreeNode));\nexport const _MatNestedTreeNodeMixinBase = mixinTabIndex(mixinDisabled(CdkNestedTreeNode));\n\n/**\n * Wrapper for the CdkTree node with Material design styles.\n */\n@Directive({\n  selector: 'mat-tree-node',\n  exportAs: 'matTreeNode',\n  inputs: ['disabled', 'tabIndex'],\n  host: {\n    '[attr.aria-expanded]': 'isExpanded',\n    '[attr.aria-level]': 'role === \"treeitem\" ? level : null',\n    '[attr.role]': 'role',\n    'class': 'mat-tree-node'\n  },\n  providers: [{provide: CdkTreeNode, useExisting: MatTreeNode}]\n})\nexport class MatTreeNode<T> extends _MatTreeNodeMixinBase<T>\n    implements CanDisable, HasTabIndex {\n  @Input() role: 'treeitem' | 'group' = 'treeitem';\n\n  constructor(protected _elementRef: ElementRef,\n              protected _tree: CdkTree<T>,\n              @Attribute('tabindex') tabIndex: string) {\n    super(_elementRef, _tree);\n\n    this.tabIndex = Number(tabIndex) || 0;\n  }\n}\n\n/**\n * Wrapper for the CdkTree node definition with Material design styles.\n */\n@Directive({\n  selector: '[matTreeNodeDef]',\n  inputs: [\n    'when: matTreeNodeDefWhen'\n  ],\n  providers: [{provide: CdkTreeNodeDef, useExisting: MatTreeNodeDef}]\n})\nexport class MatTreeNodeDef<T> extends _CdkTreeNodeDef<T> {\n  @Input('matTreeNode') data: T;\n}\n\n/**\n * Wrapper for the CdkTree nested node with Material design styles.\n */\n@Directive({\n  selector: 'mat-nested-tree-node',\n  exportAs: 'matNestedTreeNode',\n  host: {\n    '[attr.aria-expanded]': 'isExpanded',\n    '[attr.role]': 'role',\n    'class': 'mat-nested-tree-node',\n  },\n  inputs: ['disabled', 'tabIndex'],\n  providers: [\n    {provide: CdkNestedTreeNode, useExisting: MatNestedTreeNode},\n    {provide: CdkTreeNode, useExisting: MatNestedTreeNode}\n  ]\n})\nexport class MatNestedTreeNode<T> extends _MatNestedTreeNodeMixinBase<T>\n    implements AfterContentInit, CanDisable, HasTabIndex, OnDestroy {\n\n  @Input('matNestedTreeNode') node: T;\n\n  @ContentChildren(MatTreeNodeOutlet) nodeOutlet: QueryList<MatTreeNodeOutlet>;\n\n  constructor(protected _elementRef: ElementRef,\n              protected _tree: CdkTree<T>,\n              protected _differs: IterableDiffers,\n              @Attribute('tabindex') tabIndex: string) {\n    super(_elementRef, _tree, _differs);\n\n    this.tabIndex = Number(tabIndex) || 0;\n  }\n\n  // This is a workaround for https://github.com/angular/angular/issues/23091\n  // In aot mode, the lifecycle hooks from parent class are not called.\n  // TODO(tinayuangao): Remove when the angular issue #23091 is fixed\n  ngAfterContentInit() {\n    super.ngAfterContentInit();\n  }\n\n  ngOnDestroy() {\n    super.ngOnDestroy();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {CdkTreeNodePadding} from '@angular/cdk/tree';\nimport {Directive, Input} from '@angular/core';\n\n// TODO(devversion): workaround for https://github.com/angular/material2/issues/12760\nexport const _CdkTreeNodePadding = CdkTreeNodePadding;\n\n/**\n * Wrapper for the CdkTree padding with Material design styles.\n */\n@Directive({\n  selector: '[matTreeNodePadding]',\n  providers: [{provide: CdkTreeNodePadding, useExisting: MatTreeNodePadding}]\n})\nexport class MatTreeNodePadding<T> extends _CdkTreeNodePadding<T> {\n\n  /** The level of depth of the tree node. The padding will be `level * indent` pixels. */\n  @Input('matTreeNodePadding') level: number;\n\n  /** The indent for each level. Default number 40px from material design menu sub-menu spec. */\n  @Input('matTreeNodePaddingIndent') indent: number;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CdkTree} from '@angular/cdk/tree';\nimport {ChangeDetectionStrategy, Component, ViewChild, ViewEncapsulation} from '@angular/core';\nimport {MatTreeNodeOutlet} from './outlet';\n\n// TODO(devversion): workaround for https://github.com/angular/material2/issues/12760\nexport const _CdkTree = CdkTree;\n\n/**\n * Wrapper for the CdkTable with Material design styles.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-tree',\n  exportAs: 'matTree',\n  template: `<ng-container matTreeNodeOutlet></ng-container>`,\n  host: {\n    'class': 'mat-tree',\n    'role': 'tree',\n  },\n  styleUrls: ['tree.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  providers: [{provide: CdkTree, useExisting: MatTree}]\n})\nexport class MatTree<T> extends _CdkTree<T> {\n  // Outlets within the tree's template where the dataNodes will be inserted.\n  @ViewChild(MatTreeNodeOutlet) _nodeOutlet: MatTreeNodeOutlet;\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CdkTreeNodeToggle} from '@angular/cdk/tree';\nimport {Directive, Input} from '@angular/core';\n\n// TODO(devversion): workaround for https://github.com/angular/material2/issues/12760\nexport const _CdkTreeNodeToggle = CdkTreeNodeToggle;\n\n/**\n * Wrapper for the CdkTree's toggle with Material design styles.\n */\n@Directive({\n  selector: '[matTreeNodeToggle]',\n  host: {\n    '(click)': '_toggle($event)',\n  },\n  providers: [{provide: CdkTreeNodeToggle, useExisting: MatTreeNodeToggle}]\n})\nexport class MatTreeNodeToggle<T> extends _CdkTreeNodeToggle<T> {\n  @Input('matTreeNodeToggleRecursive') recursive: boolean = false;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\n\nimport {CdkTreeModule} from '@angular/cdk/tree';\nimport {CommonModule} from '@angular/common';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatNestedTreeNode, MatTreeNodeDef, MatTreeNode} from './node';\nimport {MatTree} from './tree';\nimport {MatTreeNodeToggle} from './toggle';\nimport {MatTreeNodeOutlet} from './outlet';\nimport {MatTreeNodePadding} from './padding';\n\nconst MAT_TREE_DIRECTIVES = [\n  MatNestedTreeNode,\n  MatTreeNodeDef,\n  MatTreeNodePadding,\n  MatTreeNodeToggle,\n  MatTree,\n  MatTreeNode,\n  MatTreeNodeOutlet\n];\n\n@NgModule({\n  imports: [CdkTreeModule, CommonModule, MatCommonModule],\n  exports: MAT_TREE_DIRECTIVES,\n  declarations: MAT_TREE_DIRECTIVES,\n})\nexport class MatTreeModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CollectionViewer, DataSource} from '@angular/cdk/collections';\nimport {FlatTreeControl, TreeControl} from '@angular/cdk/tree';\nimport {BehaviorSubject, merge, Observable} from 'rxjs';\nimport {map, take} from 'rxjs/operators';\n\n/**\n * Tree flattener to convert a normal type of node to node with children & level information.\n * Transform nested nodes of type `T` to flattened nodes of type `F`.\n *\n * For example, the input data of type `T` is nested, and contains its children data:\n *   SomeNode: {\n *     key: 'Fruits',\n *     children: [\n *       NodeOne: {\n *         key: 'Apple',\n *       },\n *       NodeTwo: {\n *        key: 'Pear',\n *      }\n *    ]\n *  }\n *  After flattener flatten the tree, the structure will become\n *  SomeNode: {\n *    key: 'Fruits',\n *    expandable: true,\n *    level: 1\n *  },\n *  NodeOne: {\n *    key: 'Apple',\n *    expandable: false,\n *    level: 2\n *  },\n *  NodeTwo: {\n *   key: 'Pear',\n *   expandable: false,\n *   level: 2\n * }\n * and the output flattened type is `F` with additional information.\n */\nexport class MatTreeFlattener<T, F> {\n\n  constructor(public transformFunction: (node: T, level: number) => F,\n              public getLevel: (node: F) => number,\n              public isExpandable: (node: F) => boolean,\n              public getChildren: (node: T) => Observable<T[]> | T[]) {}\n\n  _flattenNode(node: T, level: number,\n               resultNodes: F[], parentMap: boolean[]): F[] {\n    const flatNode = this.transformFunction(node, level);\n    resultNodes.push(flatNode);\n\n    if (this.isExpandable(flatNode)) {\n      const childrenNodes = this.getChildren(node);\n      if (Array.isArray(childrenNodes)) {\n        this._flattenChildren(childrenNodes, level, resultNodes, parentMap);\n      } else {\n        childrenNodes.pipe(take(1)).subscribe(children => {\n          this._flattenChildren(children, level, resultNodes, parentMap);\n        });\n      }\n    }\n    return resultNodes;\n  }\n\n  _flattenChildren(children: T[], level: number,\n                   resultNodes: F[], parentMap: boolean[]): void {\n    children.forEach((child, index) => {\n      let childParentMap: boolean[] = parentMap.slice();\n      childParentMap.push(index != children.length - 1);\n      this._flattenNode(child, level + 1, resultNodes, childParentMap);\n    });\n  }\n\n  /**\n   * Flatten a list of node type T to flattened version of node F.\n   * Please note that type T may be nested, and the length of `structuredData` may be different\n   * from that of returned list `F[]`.\n   */\n  flattenNodes(structuredData: T[]): F[] {\n    let resultNodes: F[] = [];\n    structuredData.forEach(node => this._flattenNode(node, 0, resultNodes, []));\n    return resultNodes;\n  }\n\n  /**\n   * Expand flattened node with current expansion status.\n   * The returned list may have different length.\n   */\n  expandFlattenedNodes(nodes: F[], treeControl: TreeControl<F>): F[] {\n    let results: F[] = [];\n    let currentExpand: boolean[] = [];\n    currentExpand[0] = true;\n\n    nodes.forEach(node => {\n      let expand = true;\n      for (let i = 0; i <= this.getLevel(node); i++) {\n        expand = expand && currentExpand[i];\n      }\n      if (expand) {\n        results.push(node);\n      }\n      if (this.isExpandable(node)) {\n        currentExpand[this.getLevel(node) + 1] = treeControl.isExpanded(node);\n      }\n    });\n    return results;\n  }\n}\n\n\n/**\n * Data source for flat tree.\n * The data source need to handle expansion/collapsion of the tree node and change the data feed\n * to `MatTree`.\n * The nested tree nodes of type `T` are flattened through `MatTreeFlattener`, and converted\n * to type `F` for `MatTree` to consume.\n */\nexport class MatTreeFlatDataSource<T, F> extends DataSource<F> {\n  _flattenedData = new BehaviorSubject<F[]>([]);\n\n  _expandedData = new BehaviorSubject<F[]>([]);\n\n  _data: BehaviorSubject<T[]>;\n  get data() { return this._data.value; }\n  set data(value: T[]) {\n    this._data.next(value);\n    this._flattenedData.next(this.treeFlattener.flattenNodes(this.data));\n    this.treeControl.dataNodes = this._flattenedData.value;\n  }\n\n  constructor(private treeControl: FlatTreeControl<F>,\n              private treeFlattener: MatTreeFlattener<T, F>,\n              initialData: T[] = []) {\n    super();\n    this._data = new BehaviorSubject<T[]>(initialData);\n  }\n\n  connect(collectionViewer: CollectionViewer): Observable<F[]> {\n    const changes = [\n      collectionViewer.viewChange,\n      this.treeControl.expansionModel.onChange!,\n      this._flattenedData\n    ];\n    return merge(...changes).pipe(map(() => {\n      this._expandedData.next(\n        this.treeFlattener.expandFlattenedNodes(this._flattenedData.value, this.treeControl));\n      return this._expandedData.value;\n    }));\n  }\n\n  disconnect() {\n    // no op\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CollectionViewer, DataSource} from '@angular/cdk/collections';\nimport {BehaviorSubject, merge, Observable} from 'rxjs';\nimport {map} from 'rxjs/operators';\n\n\n/**\n * Data source for nested tree.\n *\n * The data source for nested tree doesn't have to consider node flattener, or the way to expand\n * or collapse. The expansion/collapsion will be handled by TreeControl and each non-leaf node.\n */\nexport class MatTreeNestedDataSource<T> extends DataSource<T> {\n  _data = new BehaviorSubject<T[]>([]);\n\n  /**\n   * Data for the nested tree\n   */\n  get data() { return this._data.value; }\n  set data(value: T[]) { this._data.next(value); }\n\n  connect(collectionViewer: CollectionViewer): Observable<T[]> {\n    return merge(...[collectionViewer.viewChange, this._data])\n      .pipe(map(() => {\n        return this.data;\n      }));\n  }\n\n  disconnect() {\n    // no op\n  }\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Version} from '@angular/core';\n\n/** Current version of Angular Material. */\nexport const VERSION = new Version('6.4.6-d424c70');\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {Directionality} from '@angular/cdk/bidi';\nimport {DOWN_ARROW, ENTER, ESCAPE, TAB, UP_ARROW} from '@angular/cdk/keycodes';\nimport {\n  FlexibleConnectedPositionStrategy,\n  Overlay,\n  OverlayConfig,\n  OverlayRef,\n  PositionStrategy,\n  ScrollStrategy,\n  ViewportRuler,\n} from '@angular/cdk/overlay';\nimport {TemplatePortal} from '@angular/cdk/portal';\nimport {DOCUMENT} from '@angular/common';\nimport {filter, take, switchMap, delay, tap, map} from 'rxjs/operators';\nimport {\n  ChangeDetectorRef,\n  Directive,\n  ElementRef,\n  forwardRef,\n  Host,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  ViewContainerRef,\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {\n  _countGroupLabelsBeforeOption,\n  _getOptionScrollPosition,\n  MatOption,\n  MatOptionSelectionChange,\n} from '@angular/material/core';\nimport {MatFormField} from '@angular/material/form-field';\nimport {Subscription, defer, fromEvent, merge, of as observableOf, Subject, Observable} from 'rxjs';\nimport {MatAutocomplete} from './autocomplete';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {MatAutocompleteOrigin} from './autocomplete-origin';\n\n\n/**\n * The following style constants are necessary to save here in order\n * to properly calculate the scrollTop of the panel. Because we are not\n * actually focusing the active item, scroll must be handled manually.\n */\n\n/** The height of each autocomplete option. */\nexport const AUTOCOMPLETE_OPTION_HEIGHT = 48;\n\n/** The total height of the autocomplete panel. */\nexport const AUTOCOMPLETE_PANEL_HEIGHT = 256;\n\n/** Injection token that determines the scroll handling while the autocomplete panel is open. */\nexport const MAT_AUTOCOMPLETE_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mat-autocomplete-scroll-strategy');\n\n/** @docs-private */\nexport function MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY(overlay: Overlay): () => ScrollStrategy {\n  return () => overlay.scrollStrategies.reposition();\n}\n\n/** @docs-private */\nexport const MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY_PROVIDER = {\n  provide: MAT_AUTOCOMPLETE_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY,\n};\n\n/**\n * Provider that allows the autocomplete to register as a ControlValueAccessor.\n * @docs-private\n */\nexport const MAT_AUTOCOMPLETE_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatAutocompleteTrigger),\n  multi: true\n};\n\n/**\n * Creates an error to be thrown when attempting to use an autocomplete trigger without a panel.\n * @docs-private\n */\nexport function getMatAutocompleteMissingPanelError(): Error {\n  return Error('Attempting to open an undefined instance of `mat-autocomplete`. ' +\n               'Make sure that the id passed to the `matAutocomplete` is correct and that ' +\n               'you\\'re attempting to open it after the ngAfterContentInit hook.');\n}\n\n\n@Directive({\n  selector: `input[matAutocomplete], textarea[matAutocomplete]`,\n  host: {\n    '[attr.autocomplete]': 'autocompleteAttribute',\n    '[attr.role]': 'autocompleteDisabled ? null : \"combobox\"',\n    '[attr.aria-autocomplete]': 'autocompleteDisabled ? null : \"list\"',\n    '[attr.aria-activedescendant]': 'activeOption?.id',\n    '[attr.aria-expanded]': 'autocompleteDisabled ? null : panelOpen.toString()',\n    '[attr.aria-owns]': '(autocompleteDisabled || !panelOpen) ? null : autocomplete?.id',\n    // Note: we use `focusin`, as opposed to `focus`, in order to open the panel\n    // a little earlier. This avoids issues where IE delays the focusing of the input.\n    '(focusin)': '_handleFocus()',\n    '(blur)': '_onTouched()',\n    '(input)': '_handleInput($event)',\n    '(keydown)': '_handleKeydown($event)',\n  },\n  exportAs: 'matAutocompleteTrigger',\n  providers: [MAT_AUTOCOMPLETE_VALUE_ACCESSOR]\n})\nexport class MatAutocompleteTrigger implements ControlValueAccessor, OnDestroy {\n  private _overlayRef: OverlayRef | null;\n  private _portal: TemplatePortal;\n  private _componentDestroyed = false;\n  private _autocompleteDisabled = false;\n\n  /** Old value of the native input. Used to work around issues with the `input` event on IE. */\n  private _previousValue: string | number | null;\n\n  /** Strategy that is used to position the panel. */\n  private _positionStrategy: FlexibleConnectedPositionStrategy;\n\n  /** Whether or not the label state is being overridden. */\n  private _manuallyFloatingLabel = false;\n\n  /** The subscription for closing actions (some are bound to document). */\n  private _closingActionsSubscription: Subscription;\n\n  /** Subscription to viewport size changes. */\n  private _viewportSubscription = Subscription.EMPTY;\n\n  /**\n   * Whether the autocomplete can open the next time it is focused. Used to prevent a focused,\n   * closed autocomplete from being reopened if the user switches to another browser tab and then\n   * comes back.\n   */\n  private _canOpenOnNextFocus = true;\n\n  /** Stream of keyboard events that can close the panel. */\n  private readonly _closeKeyEventStream = new Subject<void>();\n\n  /**\n   * Event handler for when the window is blurred. Needs to be an\n   * arrow function in order to preserve the context.\n   */\n  private _windowBlurHandler = () => {\n    // If the user blurred the window while the autocomplete is focused, it means that it'll be\n    // refocused when they come back. In this case we want to skip the first focus event, if the\n    // pane was closed, in order to avoid reopening it unintentionally.\n    this._canOpenOnNextFocus =\n        document.activeElement !== this._element.nativeElement || this.panelOpen;\n  }\n\n  /** `View -> model callback called when value changes` */\n  _onChange: (value: any) => void = () => {};\n\n  /** `View -> model callback called when autocomplete has been touched` */\n  _onTouched = () => {};\n\n  /** The autocomplete panel to be attached to this trigger. */\n  @Input('matAutocomplete') autocomplete: MatAutocomplete;\n\n  /**\n   * Reference relative to which to position the autocomplete panel.\n   * Defaults to the autocomplete trigger element.\n   */\n  @Input('matAutocompleteConnectedTo') connectedTo: MatAutocompleteOrigin;\n\n  /**\n   * `autocomplete` attribute to be set on the input element.\n   * @docs-private\n   */\n  @Input('autocomplete') autocompleteAttribute: string = 'off';\n\n  /**\n   * Whether the autocomplete is disabled. When disabled, the element will\n   * act as a regular input and the user won't be able to open the panel.\n   */\n  @Input('matAutocompleteDisabled')\n  get autocompleteDisabled(): boolean { return this._autocompleteDisabled; }\n  set autocompleteDisabled(value: boolean) {\n    this._autocompleteDisabled = coerceBooleanProperty(value);\n  }\n\n  constructor(private _element: ElementRef, private _overlay: Overlay,\n              private _viewContainerRef: ViewContainerRef,\n              private _zone: NgZone,\n              private _changeDetectorRef: ChangeDetectorRef,\n              @Inject(MAT_AUTOCOMPLETE_SCROLL_STRATEGY) private _scrollStrategy,\n              @Optional() private _dir: Directionality,\n              @Optional() @Host() private _formField: MatFormField,\n              @Optional() @Inject(DOCUMENT) private _document: any,\n              // @breaking-change 7.0.0 Make `_viewportRuler` required.\n              private _viewportRuler?: ViewportRuler) {\n\n    if (typeof window !== 'undefined') {\n      _zone.runOutsideAngular(() => {\n        window.addEventListener('blur', this._windowBlurHandler);\n      });\n    }\n  }\n\n  ngOnDestroy() {\n    if (typeof window !== 'undefined') {\n      window.removeEventListener('blur', this._windowBlurHandler);\n    }\n\n    this._viewportSubscription.unsubscribe();\n    this._componentDestroyed = true;\n    this._destroyPanel();\n    this._closeKeyEventStream.complete();\n  }\n\n  /** Whether or not the autocomplete panel is open. */\n  get panelOpen(): boolean {\n    return this._overlayAttached && this.autocomplete.showPanel;\n  }\n  private _overlayAttached: boolean = false;\n\n  /** Opens the autocomplete suggestion panel. */\n  openPanel(): void {\n    this._attachOverlay();\n    this._floatLabel();\n  }\n\n  /** Closes the autocomplete suggestion panel. */\n  closePanel(): void {\n    this._resetLabel();\n\n    if (!this._overlayAttached) {\n      return;\n    }\n\n    if (this.panelOpen) {\n      // Only emit if the panel was visible.\n      this.autocomplete.closed.emit();\n    }\n\n    this.autocomplete._isOpen = this._overlayAttached = false;\n\n    if (this._overlayRef && this._overlayRef.hasAttached()) {\n      this._overlayRef.detach();\n      this._closingActionsSubscription.unsubscribe();\n    }\n\n    // Note that in some cases this can end up being called after the component is destroyed.\n    // Add a check to ensure that we don't try to run change detection on a destroyed view.\n    if (!this._componentDestroyed) {\n      // We need to trigger change detection manually, because\n      // `fromEvent` doesn't seem to do it at the proper time.\n      // This ensures that the label is reset when the\n      // user clicks outside.\n      this._changeDetectorRef.detectChanges();\n    }\n  }\n\n  /**\n   * Updates the position of the autocomplete suggestion panel to ensure that it fits all options\n   * within the viewport.\n   */\n  updatePosition(): void {\n    if (this._overlayAttached) {\n      this._overlayRef!.updatePosition();\n    }\n  }\n\n  /**\n   * A stream of actions that should close the autocomplete panel, including\n   * when an option is selected, on blur, and when TAB is pressed.\n   */\n  get panelClosingActions(): Observable<MatOptionSelectionChange|null> {\n    return merge(\n      this.optionSelections,\n      this.autocomplete._keyManager.tabOut.pipe(filter(() => this._overlayAttached)),\n      this._closeKeyEventStream,\n      this._getOutsideClickStream(),\n      this._overlayRef ?\n          this._overlayRef.detachments().pipe(filter(() => this._overlayAttached)) :\n          observableOf()\n    ).pipe(\n      // Normalize the output so we return a consistent type.\n      map(event => event instanceof MatOptionSelectionChange ? event : null)\n    );\n  }\n\n  /** Stream of autocomplete option selections. */\n  readonly optionSelections: Observable<MatOptionSelectionChange> = defer(() => {\n    if (this.autocomplete && this.autocomplete.options) {\n     return merge(...this.autocomplete.options.map(option => option.onSelectionChange));\n    }\n\n    // If there are any subscribers before `ngAfterViewInit`, the `autocomplete` will be undefined.\n    // Return a stream that we'll replace with the real one once everything is in place.\n    return this._zone.onStable\n        .asObservable()\n        .pipe(take(1), switchMap(() => this.optionSelections));\n  });\n\n  /** The currently active option, coerced to MatOption type. */\n  get activeOption(): MatOption | null {\n    if (this.autocomplete && this.autocomplete._keyManager) {\n      return this.autocomplete._keyManager.activeItem;\n    }\n\n    return null;\n  }\n\n  /** Stream of clicks outside of the autocomplete panel. */\n  private _getOutsideClickStream(): Observable<any> {\n    if (!this._document) {\n      return observableOf(null);\n    }\n\n    return merge(\n      fromEvent<MouseEvent>(this._document, 'click'),\n      fromEvent<TouchEvent>(this._document, 'touchend')\n    )\n    .pipe(filter(event => {\n      const clickTarget = event.target as HTMLElement;\n      const formField = this._formField ?\n          this._formField._elementRef.nativeElement : null;\n\n      return this._overlayAttached &&\n              clickTarget !== this._element.nativeElement &&\n              (!formField || !formField.contains(clickTarget)) &&\n              (!!this._overlayRef && !this._overlayRef.overlayElement.contains(clickTarget));\n    }));\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  writeValue(value: any): void {\n    Promise.resolve(null).then(() => this._setTriggerValue(value));\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnChange(fn: (value: any) => {}): void {\n    this._onChange = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnTouched(fn: () => {}) {\n    this._onTouched = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  setDisabledState(isDisabled: boolean) {\n    this._element.nativeElement.disabled = isDisabled;\n  }\n\n  _handleKeydown(event: KeyboardEvent): void {\n    const keyCode = event.keyCode;\n\n    // Prevent the default action on all escape key presses. This is here primarily to bring IE\n    // in line with other browsers. By default, pressing escape on IE will cause it to revert\n    // the input value to the one that it had on focus, however it won't dispatch any events\n    // which means that the model value will be out of sync with the view.\n    if (keyCode === ESCAPE) {\n      event.preventDefault();\n    }\n\n    // Close when pressing ESCAPE or ALT + UP_ARROW, based on the a11y guidelines.\n    // See: https://www.w3.org/TR/wai-aria-practices-1.1/#textbox-keyboard-interaction\n    if (this.panelOpen && (keyCode === ESCAPE || (keyCode === UP_ARROW && event.altKey))) {\n      this._resetActiveItem();\n      this._closeKeyEventStream.next();\n      event.stopPropagation();\n    } else if (this.activeOption && keyCode === ENTER && this.panelOpen) {\n      this.activeOption._selectViaInteraction();\n      this._resetActiveItem();\n      event.preventDefault();\n    } else if (this.autocomplete) {\n      const prevActiveItem = this.autocomplete._keyManager.activeItem;\n      const isArrowKey = keyCode === UP_ARROW || keyCode === DOWN_ARROW;\n\n      if (this.panelOpen || keyCode === TAB) {\n        this.autocomplete._keyManager.onKeydown(event);\n      } else if (isArrowKey && this._canOpen()) {\n        this.openPanel();\n      }\n\n      if (isArrowKey || this.autocomplete._keyManager.activeItem !== prevActiveItem) {\n        this._scrollToOption();\n      }\n    }\n  }\n\n  _handleInput(event: KeyboardEvent): void {\n    let target = event.target as HTMLInputElement;\n    let value: number | string | null = target.value;\n\n    // Based on `NumberValueAccessor` from forms.\n    if (target.type === 'number') {\n      value = value == '' ? null : parseFloat(value);\n    }\n\n    // If the input has a placeholder, IE will fire the `input` event on page load,\n    // focus and blur, in addition to when the user actually changed the value. To\n    // filter out all of the extra events, we save the value on focus and between\n    // `input` events, and we check whether it changed.\n    // See: https://connect.microsoft.com/IE/feedback/details/885747/\n    if (this._previousValue !== value && document.activeElement === event.target) {\n      this._previousValue = value;\n      this._onChange(value);\n\n      if (this._canOpen()) {\n        this.openPanel();\n      }\n    }\n  }\n\n  _handleFocus(): void {\n    if (!this._canOpenOnNextFocus) {\n      this._canOpenOnNextFocus = true;\n    } else if (this._canOpen()) {\n      this._previousValue = this._element.nativeElement.value;\n      this._attachOverlay();\n      this._floatLabel(true);\n    }\n  }\n\n  /**\n   * In \"auto\" mode, the label will animate down as soon as focus is lost.\n   * This causes the value to jump when selecting an option with the mouse.\n   * This method manually floats the label until the panel can be closed.\n   * @param shouldAnimate Whether the label should be animated when it is floated.\n   */\n  private _floatLabel(shouldAnimate = false): void {\n    if (this._formField && this._formField.floatLabel === 'auto') {\n      if (shouldAnimate) {\n        this._formField._animateAndLockLabel();\n      } else {\n        this._formField.floatLabel = 'always';\n      }\n\n      this._manuallyFloatingLabel = true;\n    }\n  }\n\n  /** If the label has been manually elevated, return it to its normal state. */\n  private _resetLabel(): void  {\n    if (this._manuallyFloatingLabel) {\n      this._formField.floatLabel = 'auto';\n      this._manuallyFloatingLabel = false;\n    }\n  }\n\n  /**\n   * Given that we are not actually focusing active options, we must manually adjust scroll\n   * to reveal options below the fold. First, we find the offset of the option from the top\n   * of the panel. If that offset is below the fold, the new scrollTop will be the offset -\n   * the panel height + the option height, so the active option will be just visible at the\n   * bottom of the panel. If that offset is above the top of the visible panel, the new scrollTop\n   * will become the offset. If that offset is visible within the panel already, the scrollTop is\n   * not adjusted.\n   */\n  private _scrollToOption(): void {\n    const index = this.autocomplete._keyManager.activeItemIndex || 0;\n    const labelCount = _countGroupLabelsBeforeOption(index,\n        this.autocomplete.options, this.autocomplete.optionGroups);\n\n    const newScrollPosition = _getOptionScrollPosition(\n      index + labelCount,\n      AUTOCOMPLETE_OPTION_HEIGHT,\n      this.autocomplete._getScrollTop(),\n      AUTOCOMPLETE_PANEL_HEIGHT\n    );\n\n    this.autocomplete._setScrollTop(newScrollPosition);\n  }\n\n  /**\n   * This method listens to a stream of panel closing actions and resets the\n   * stream every time the option list changes.\n   */\n  private _subscribeToClosingActions(): Subscription {\n    const firstStable = this._zone.onStable.asObservable().pipe(take(1));\n    const optionChanges = this.autocomplete.options.changes.pipe(\n      tap(() => this._positionStrategy.reapplyLastPosition()),\n      // Defer emitting to the stream until the next tick, because changing\n      // bindings in here will cause \"changed after checked\" errors.\n      delay(0)\n    );\n\n    // When the zone is stable initially, and when the option list changes...\n    return merge(firstStable, optionChanges)\n      .pipe(\n        // create a new stream of panelClosingActions, replacing any previous streams\n        // that were created, and flatten it so our stream only emits closing events...\n        switchMap(() => {\n          this._resetActiveItem();\n          this.autocomplete._setVisibility();\n\n          if (this.panelOpen) {\n            this._overlayRef!.updatePosition();\n          }\n\n          return this.panelClosingActions;\n        }),\n        // when the first closing event occurs...\n        take(1)\n      )\n      // set the value, close the panel, and complete.\n      .subscribe(event => this._setValueAndClose(event));\n  }\n\n  /** Destroys the autocomplete suggestion panel. */\n  private _destroyPanel(): void {\n    if (this._overlayRef) {\n      this.closePanel();\n      this._overlayRef.dispose();\n      this._overlayRef = null;\n    }\n  }\n\n  private _setTriggerValue(value: any): void {\n    const toDisplay = this.autocomplete && this.autocomplete.displayWith ?\n      this.autocomplete.displayWith(value) :\n      value;\n\n    // Simply falling back to an empty string if the display value is falsy does not work properly.\n    // The display value can also be the number zero and shouldn't fall back to an empty string.\n    const inputValue = toDisplay != null ? toDisplay : '';\n\n    // If it's used within a `MatFormField`, we should set it through the property so it can go\n    // through change detection.\n    if (this._formField) {\n      this._formField._control.value = inputValue;\n    } else {\n      this._element.nativeElement.value = inputValue;\n    }\n  }\n\n  /**\n   * This method closes the panel, and if a value is specified, also sets the associated\n   * control to that value. It will also mark the control as dirty if this interaction\n   * stemmed from the user.\n   */\n  private _setValueAndClose(event: MatOptionSelectionChange | null): void {\n    if (event && event.source) {\n      this._clearPreviousSelectedOption(event.source);\n      this._setTriggerValue(event.source.value);\n      this._onChange(event.source.value);\n      this._element.nativeElement.focus();\n      this.autocomplete._emitSelectEvent(event.source);\n    }\n\n    this.closePanel();\n  }\n\n  /**\n   * Clear any previous selected option and emit a selection change event for this option\n   */\n  private _clearPreviousSelectedOption(skip: MatOption) {\n    this.autocomplete.options.forEach(option => {\n      if (option != skip && option.selected) {\n        option.deselect();\n      }\n    });\n  }\n\n  private _attachOverlay(): void {\n    if (!this.autocomplete) {\n      throw getMatAutocompleteMissingPanelError();\n    }\n\n    if (!this._overlayRef) {\n      this._portal = new TemplatePortal(this.autocomplete.template, this._viewContainerRef);\n      this._overlayRef = this._overlay.create(this._getOverlayConfig());\n\n      if (this._viewportRuler) {\n        this._viewportSubscription = this._viewportRuler.change().subscribe(() => {\n          if (this.panelOpen && this._overlayRef) {\n            this._overlayRef.updateSize({width: this._getPanelWidth()});\n          }\n        });\n      }\n    } else {\n      // Update the panel width and direction, in case anything has changed.\n      this._overlayRef.updateSize({width: this._getPanelWidth()});\n    }\n\n    if (this._overlayRef && !this._overlayRef.hasAttached()) {\n      this._overlayRef.attach(this._portal);\n      this._closingActionsSubscription = this._subscribeToClosingActions();\n    }\n\n    const wasOpen = this.panelOpen;\n\n    this.autocomplete._setVisibility();\n    this.autocomplete._isOpen = this._overlayAttached = true;\n\n    // We need to do an extra `panelOpen` check in here, because the\n    // autocomplete won't be shown if there are no options.\n    if (this.panelOpen && wasOpen !== this.panelOpen) {\n      this.autocomplete.opened.emit();\n    }\n  }\n\n  private _getOverlayConfig(): OverlayConfig {\n    return new OverlayConfig({\n      positionStrategy: this._getOverlayPosition(),\n      scrollStrategy: this._scrollStrategy(),\n      width: this._getPanelWidth(),\n      direction: this._dir\n    });\n  }\n\n  private _getOverlayPosition(): PositionStrategy {\n    this._positionStrategy = this._overlay.position()\n      .flexibleConnectedTo(this._getConnectedElement())\n      .withFlexibleDimensions(false)\n      .withPush(false)\n      .withPositions([\n        {\n          originX: 'start',\n          originY: 'bottom',\n          overlayX: 'start',\n          overlayY: 'top'\n        },\n        {\n          originX: 'start',\n          originY: 'top',\n          overlayX: 'start',\n          overlayY: 'bottom',\n\n          // The overlay edge connected to the trigger should have squared corners, while\n          // the opposite end has rounded corners. We apply a CSS class to swap the\n          // border-radius based on the overlay position.\n          panelClass: 'mat-autocomplete-panel-above'\n        }\n      ]);\n\n    return this._positionStrategy;\n  }\n\n  private _getConnectedElement(): ElementRef {\n    if (this.connectedTo) {\n      return this.connectedTo.elementRef;\n    }\n\n    return this._formField ? this._formField.getConnectedOverlayOrigin() : this._element;\n  }\n\n  private _getPanelWidth(): number | string {\n    return this.autocomplete.panelWidth || this._getHostWidth();\n  }\n\n  /** Returns the width of the input element, so the panel width can match it. */\n  private _getHostWidth(): number {\n    return this._getConnectedElement().nativeElement.getBoundingClientRect().width;\n  }\n\n  /**\n   * Resets the active item to -1 so arrow events will activate the\n   * correct options, or to 0 if the consumer opted into it.\n   */\n  private _resetActiveItem(): void {\n    this.autocomplete._keyManager.setActiveItem(this.autocomplete.autoActiveFirstOption ? 0 : -1);\n  }\n\n  /** Determines whether the panel can be opened. */\n  private _canOpen(): boolean {\n    const element: HTMLInputElement = this._element.nativeElement;\n    return !element.readOnly && !element.disabled && !this._autocompleteDisabled;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * When constructing a Date, the month is zero-based. This can be confusing, since people are\n * used to seeing them one-based. So we create these aliases to make writing the tests easier.\n */\nexport const JAN = 0, FEB = 1, MAR = 2, APR = 3, MAY = 4, JUN = 5, JUL = 6, AUG = 7, SEP = 8,\n    OCT = 9, NOV = 10, DEC = 11;\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  animateChild,\n  group,\n  state,\n  style,\n  transition,\n  trigger,\n  query,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/** Time and timing curve for expansion panel animations. */\nexport const EXPANSION_PANEL_ANIMATION_TIMING = '225ms cubic-bezier(0.4,0.0,0.2,1)';\n\n/** Animations used by the Material expansion panel. */\nexport const matExpansionAnimations: {\n  readonly indicatorRotate: AnimationTriggerMetadata;\n  readonly expansionHeaderHeight: AnimationTriggerMetadata;\n  readonly bodyExpansion: AnimationTriggerMetadata;\n} = {\n  /** Animation that rotates the indicator arrow. */\n  indicatorRotate: trigger('indicatorRotate', [\n    state('collapsed', style({transform: 'rotate(0deg)'})),\n    state('expanded', style({transform: 'rotate(180deg)'})),\n    transition('expanded <=> collapsed', animate(EXPANSION_PANEL_ANIMATION_TIMING)),\n  ]),\n\n  /** Animation that expands and collapses the panel header height. */\n  expansionHeaderHeight: trigger('expansionHeight', [\n    state('collapsed', style({\n      height: '{{collapsedHeight}}',\n    }), {\n      params: {collapsedHeight: '48px'},\n    }),\n    state('expanded', style({\n      height: '{{expandedHeight}}'\n    }), {\n      params: {expandedHeight: '64px'}\n    }),\n    transition('expanded <=> collapsed', group([\n      query('@indicatorRotate', animateChild(), {optional: true}),\n      animate(EXPANSION_PANEL_ANIMATION_TIMING),\n    ])),\n  ]),\n\n  /** Animation that expands and collapses the panel content. */\n  bodyExpansion: trigger('bodyExpansion', [\n    state('collapsed', style({height: '0px', visibility: 'hidden'})),\n    state('expanded', style({height: '*', visibility: 'visible'})),\n    transition('expanded <=> collapsed', animate(EXPANSION_PANEL_ANIMATION_TIMING)),\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ActiveDescendantKeyManager} from '@angular/cdk/a11y';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {SelectionModel} from '@angular/cdk/collections';\nimport {\n  DOWN_ARROW,\n  END,\n  ENTER,\n  HOME,\n  LEFT_ARROW,\n  RIGHT_ARROW,\n  SPACE,\n  UP_ARROW,\n  A,\n} from '@angular/cdk/keycodes';\nimport {\n  CdkConnectedOverlay,\n  Overlay,\n  RepositionScrollStrategy,\n  ScrollStrategy,\n  ViewportRuler,\n} from '@angular/cdk/overlay';\nimport {\n  AfterContentInit,\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  ContentChildren,\n  Directive,\n  DoCheck,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  InjectionToken,\n  Input,\n  isDevMode,\n  NgZone,\n  OnChanges,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Output,\n  QueryList,\n  Self,\n  SimpleChanges,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {ControlValueAccessor, FormGroupDirective, NgControl, NgForm} from '@angular/forms';\nimport {\n  _countGroupLabelsBeforeOption,\n  _getOptionScrollPosition,\n  CanDisable,\n  CanDisableRipple,\n  CanUpdateErrorState,\n  ErrorStateMatcher,\n  HasTabIndex,\n  MAT_OPTION_PARENT_COMPONENT,\n  MatOptgroup,\n  MatOption,\n  MatOptionSelectionChange,\n  mixinDisabled,\n  mixinDisableRipple,\n  mixinErrorState,\n  mixinTabIndex,\n} from '@angular/material/core';\nimport {MatFormField, MatFormFieldControl} from '@angular/material/form-field';\nimport {defer, merge, Observable, Subject} from 'rxjs';\nimport {\n  filter,\n  map,\n  startWith,\n  switchMap,\n  take,\n  takeUntil,\n  distinctUntilChanged,\n} from 'rxjs/operators';\nimport {matSelectAnimations} from './select-animations';\nimport {\n  getMatSelectDynamicMultipleError,\n  getMatSelectNonArrayValueError,\n  getMatSelectNonFunctionValueError,\n} from './select-errors';\n\n\nlet nextUniqueId = 0;\n\n/**\n * The following style constants are necessary to save here in order\n * to properly calculate the alignment of the selected option over\n * the trigger element.\n */\n\n/** The max height of the select's overlay panel */\nexport const SELECT_PANEL_MAX_HEIGHT = 256;\n\n/** The panel's padding on the x-axis */\nexport const SELECT_PANEL_PADDING_X = 16;\n\n/** The panel's x axis padding if it is indented (e.g. there is an option group). */\nexport const SELECT_PANEL_INDENT_PADDING_X = SELECT_PANEL_PADDING_X * 2;\n\n/** The height of the select items in `em` units. */\nexport const SELECT_ITEM_HEIGHT_EM = 3;\n\n/**\n * Distance between the panel edge and the option text in\n * multi-selection mode.\n *\n * (SELECT_PANEL_PADDING_X * 1.5) + 20 = 44\n * The padding is multiplied by 1.5 because the checkbox's margin is half the padding.\n * The checkbox width is 20px.\n */\nexport const SELECT_MULTIPLE_PANEL_PADDING_X = SELECT_PANEL_PADDING_X * 1.5 + 20;\n\n/**\n * The select panel will only \"fit\" inside the viewport if it is positioned at\n * this value or more away from the viewport boundary.\n */\nexport const SELECT_PANEL_VIEWPORT_PADDING = 8;\n\n/** Injection token that determines the scroll handling while a select is open. */\nexport const MAT_SELECT_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mat-select-scroll-strategy');\n\n/** @docs-private */\nexport function MAT_SELECT_SCROLL_STRATEGY_PROVIDER_FACTORY(overlay: Overlay):\n    () => RepositionScrollStrategy {\n  return () => overlay.scrollStrategies.reposition();\n}\n\n/** @docs-private */\nexport const MAT_SELECT_SCROLL_STRATEGY_PROVIDER = {\n  provide: MAT_SELECT_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_SELECT_SCROLL_STRATEGY_PROVIDER_FACTORY,\n};\n\n/** Change event object that is emitted when the select value has changed. */\nexport class MatSelectChange {\n  constructor(\n    /** Reference to the select that emitted the change event. */\n    public source: MatSelect,\n    /** Current value of the select that emitted the event. */\n    public value: any) { }\n}\n\n// Boilerplate for applying mixins to MatSelect.\n/** @docs-private */\nexport class MatSelectBase {\n  constructor(public _elementRef: ElementRef,\n              public _defaultErrorStateMatcher: ErrorStateMatcher,\n              public _parentForm: NgForm,\n              public _parentFormGroup: FormGroupDirective,\n              public ngControl: NgControl) {}\n}\nexport const _MatSelectMixinBase = mixinDisableRipple(\n    mixinTabIndex(mixinDisabled(mixinErrorState(MatSelectBase))));\n\n\n/**\n * Allows the user to customize the trigger that is displayed when the select has a value.\n */\n@Directive({\n  selector: 'mat-select-trigger'\n})\nexport class MatSelectTrigger {}\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-select',\n  exportAs: 'matSelect',\n  templateUrl: 'select.html',\n  styleUrls: ['select.css'],\n  inputs: ['disabled', 'disableRipple', 'tabIndex'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {\n    'role': 'listbox',\n    '[attr.id]': 'id',\n    '[attr.tabindex]': 'tabIndex',\n    '[attr.aria-label]': '_getAriaLabel()',\n    '[attr.aria-labelledby]': '_getAriaLabelledby()',\n    '[attr.aria-required]': 'required.toString()',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.aria-invalid]': 'errorState',\n    '[attr.aria-owns]': 'panelOpen ? _optionIds : null',\n    '[attr.aria-multiselectable]': 'multiple',\n    '[attr.aria-describedby]': '_ariaDescribedby || null',\n    '[attr.aria-activedescendant]': '_getAriaActiveDescendant()',\n    '[class.mat-select-disabled]': 'disabled',\n    '[class.mat-select-invalid]': 'errorState',\n    '[class.mat-select-required]': 'required',\n    '[class.mat-select-empty]': 'empty',\n    'class': 'mat-select',\n    '(keydown)': '_handleKeydown($event)',\n    '(focus)': '_onFocus()',\n    '(blur)': '_onBlur()',\n  },\n  animations: [\n    matSelectAnimations.transformPanel,\n    matSelectAnimations.fadeInContent\n  ],\n  providers: [\n    {provide: MatFormFieldControl, useExisting: MatSelect},\n    {provide: MAT_OPTION_PARENT_COMPONENT, useExisting: MatSelect}\n  ],\n})\nexport class MatSelect extends _MatSelectMixinBase implements AfterContentInit, OnChanges,\n    OnDestroy, OnInit, DoCheck, ControlValueAccessor, CanDisable, HasTabIndex,\n    MatFormFieldControl<any>, CanUpdateErrorState, CanDisableRipple {\n  /** Whether or not the overlay panel is open. */\n  private _panelOpen = false;\n\n  /** Whether filling out the select is required in the form. */\n  private _required: boolean = false;\n\n  /** The scroll position of the overlay panel, calculated to center the selected option. */\n  private _scrollTop = 0;\n\n  /** The placeholder displayed in the trigger of the select. */\n  private _placeholder: string;\n\n  /** Whether the component is in multiple selection mode. */\n  private _multiple: boolean = false;\n\n  /** Comparison function to specify which option is displayed. Defaults to object equality. */\n  private _compareWith = (o1: any, o2: any) => o1 === o2;\n\n  /** Unique id for this input. */\n  private _uid = `mat-select-${nextUniqueId++}`;\n\n  /** Emits whenever the component is destroyed. */\n  private readonly _destroy = new Subject<void>();\n\n  /** The last measured value for the trigger's client bounding rect. */\n  _triggerRect: ClientRect;\n\n  /** The aria-describedby attribute on the select for improved a11y. */\n  _ariaDescribedby: string;\n\n  /** The cached font-size of the trigger element. */\n  _triggerFontSize = 0;\n\n  /** Deals with the selection logic. */\n  _selectionModel: SelectionModel<MatOption>;\n\n  /** Manages keyboard events for options in the panel. */\n  _keyManager: ActiveDescendantKeyManager<MatOption>;\n\n  /** `View -> model callback called when value changes` */\n  _onChange: (value: any) => void = () => {};\n\n  /** `View -> model callback called when select has been touched` */\n  _onTouched = () => {};\n\n  /** The IDs of child options to be passed to the aria-owns attribute. */\n  _optionIds: string = '';\n\n  /** The value of the select panel's transform-origin property. */\n  _transformOrigin: string = 'top';\n\n  /** Whether the panel's animation is done. */\n  _panelDoneAnimating: boolean = false;\n\n  /** Emits when the panel element is finished transforming in. */\n  _panelDoneAnimatingStream = new Subject<string>();\n\n  /** Strategy that will be used to handle scrolling while the select panel is open. */\n  _scrollStrategy = this._scrollStrategyFactory();\n\n  /**\n   * The y-offset of the overlay panel in relation to the trigger's top start corner.\n   * This must be adjusted to align the selected option text over the trigger text.\n   * when the panel opens. Will change based on the y-position of the selected option.\n   */\n  _offsetY = 0;\n\n  /**\n   * This position config ensures that the top \"start\" corner of the overlay\n   * is aligned with with the top \"start\" of the origin by default (overlapping\n   * the trigger completely). If the panel cannot fit below the trigger, it\n   * will fall back to a position above the trigger.\n   */\n  _positions = [\n    {\n      originX: 'start',\n      originY: 'top',\n      overlayX: 'start',\n      overlayY: 'top',\n    },\n    {\n      originX: 'start',\n      originY: 'bottom',\n      overlayX: 'start',\n      overlayY: 'bottom',\n    },\n  ];\n\n  /** Whether the component is disabling centering of the active option over the trigger. */\n  private _disableOptionCentering: boolean = false;\n\n  /** Whether the select is focused. */\n  get focused(): boolean {\n    return this._focused || this._panelOpen;\n  }\n  /**\n   * @deprecated Setter to be removed as this property is intended to be readonly.\n   * @breaking-change 8.0.0\n   */\n  set focused(value: boolean) {\n    this._focused = value;\n  }\n  private _focused = false;\n\n  /** A name for this control that can be used by `mat-form-field`. */\n  controlType = 'mat-select';\n\n  /** Trigger that opens the select. */\n  @ViewChild('trigger') trigger: ElementRef;\n\n  /** Panel containing the select options. */\n  @ViewChild('panel') panel: ElementRef;\n\n  /** Overlay pane containing the options. */\n  @ViewChild(CdkConnectedOverlay) overlayDir: CdkConnectedOverlay;\n\n  /** All of the defined select options. */\n  @ContentChildren(MatOption, { descendants: true }) options: QueryList<MatOption>;\n\n  /** All of the defined groups of options. */\n  @ContentChildren(MatOptgroup) optionGroups: QueryList<MatOptgroup>;\n\n  /** Classes to be passed to the select panel. Supports the same syntax as `ngClass`. */\n  @Input() panelClass: string|string[]|Set<string>|{[key: string]: any};\n\n  /** User-supplied override of the trigger element. */\n  @ContentChild(MatSelectTrigger) customTrigger: MatSelectTrigger;\n\n  /** Placeholder to be shown if no value has been selected. */\n  @Input()\n  get placeholder(): string { return this._placeholder; }\n  set placeholder(value: string) {\n    this._placeholder = value;\n    this.stateChanges.next();\n  }\n\n  /** Whether the component is required. */\n  @Input()\n  get required(): boolean { return this._required; }\n  set required(value: boolean) {\n    this._required = coerceBooleanProperty(value);\n    this.stateChanges.next();\n  }\n\n  /** Whether the user should be allowed to select multiple options. */\n  @Input()\n  get multiple(): boolean { return this._multiple; }\n  set multiple(value: boolean) {\n    if (this._selectionModel) {\n      throw getMatSelectDynamicMultipleError();\n    }\n\n    this._multiple = coerceBooleanProperty(value);\n  }\n\n  /** Whether to center the active option over the trigger. */\n  @Input()\n  get disableOptionCentering(): boolean { return this._disableOptionCentering; }\n  set disableOptionCentering(value: boolean) {\n    this._disableOptionCentering = coerceBooleanProperty(value);\n  }\n\n  /**\n   * Function to compare the option values with the selected values. The first argument\n   * is a value from an option. The second is a value from the selection. A boolean\n   * should be returned.\n   */\n  @Input()\n  get compareWith() { return this._compareWith; }\n  set compareWith(fn: (o1: any, o2: any) => boolean) {\n    if (typeof fn !== 'function') {\n      throw getMatSelectNonFunctionValueError();\n    }\n    this._compareWith = fn;\n    if (this._selectionModel) {\n      // A different comparator means the selection could change.\n      this._initializeSelection();\n    }\n  }\n\n  /** Value of the select control. */\n  @Input()\n  get value(): any { return this._value; }\n  set value(newValue: any) {\n    if (newValue !== this._value) {\n      this.writeValue(newValue);\n      this._value = newValue;\n    }\n  }\n  private _value: any;\n\n  /** Aria label of the select. If not specified, the placeholder will be used as label. */\n  @Input('aria-label') ariaLabel: string = '';\n\n  /** Input that can be used to specify the `aria-labelledby` attribute. */\n  @Input('aria-labelledby') ariaLabelledby: string;\n\n  /** Object used to control when error messages are shown. */\n  @Input() errorStateMatcher: ErrorStateMatcher;\n\n  /**\n   * Function used to sort the values in a select in multiple mode.\n   * Follows the same logic as `Array.prototype.sort`.\n   */\n  @Input() sortComparator: (a: MatOption, b: MatOption, options: MatOption[]) => number;\n\n  /** Unique id of the element. */\n  @Input()\n  get id(): string { return this._id; }\n  set id(value: string) {\n    this._id = value || this._uid;\n    this.stateChanges.next();\n  }\n  private _id: string;\n\n  /** Combined stream of all of the child options' change events. */\n  readonly optionSelectionChanges: Observable<MatOptionSelectionChange> = defer(() => {\n    if (this.options) {\n      return merge(...this.options.map(option => option.onSelectionChange));\n    }\n\n    return this._ngZone.onStable\n      .asObservable()\n      .pipe(take(1), switchMap(() => this.optionSelectionChanges));\n  });\n\n  /** Event emitted when the select panel has been toggled. */\n  @Output() readonly openedChange: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n  /** Event emitted when the select has been opened. */\n  @Output('opened') readonly _openedStream: Observable<void> =\n      this.openedChange.pipe(filter(o => o), map(() => {}));\n\n  /** Event emitted when the select has been closed. */\n  @Output('closed') readonly _closedStream: Observable<void> =\n      this.openedChange.pipe(filter(o => !o), map(() => {}));\n\n   /** Event emitted when the selected value has been changed by the user. */\n  @Output() readonly selectionChange: EventEmitter<MatSelectChange> =\n      new EventEmitter<MatSelectChange>();\n\n  /**\n   * Event that emits whenever the raw value of the select changes. This is here primarily\n   * to facilitate the two-way binding for the `value` input.\n   * @docs-private\n   */\n  @Output() readonly valueChange: EventEmitter<any> = new EventEmitter<any>();\n\n  constructor(\n    private _viewportRuler: ViewportRuler,\n    private _changeDetectorRef: ChangeDetectorRef,\n    private _ngZone: NgZone,\n    _defaultErrorStateMatcher: ErrorStateMatcher,\n    elementRef: ElementRef,\n    @Optional() private _dir: Directionality,\n    @Optional() _parentForm: NgForm,\n    @Optional() _parentFormGroup: FormGroupDirective,\n    @Optional() private _parentFormField: MatFormField,\n    @Self() @Optional() public ngControl: NgControl,\n    @Attribute('tabindex') tabIndex: string,\n    @Inject(MAT_SELECT_SCROLL_STRATEGY) private _scrollStrategyFactory) {\n    super(elementRef, _defaultErrorStateMatcher, _parentForm,\n          _parentFormGroup, ngControl);\n\n    if (this.ngControl) {\n      // Note: we provide the value accessor through here, instead of\n      // the `providers` to avoid running into a circular import.\n      this.ngControl.valueAccessor = this;\n    }\n\n    this.tabIndex = parseInt(tabIndex) || 0;\n\n    // Force setter to be called in case id was not specified.\n    this.id = this.id;\n  }\n\n  ngOnInit() {\n    this._selectionModel = new SelectionModel<MatOption>(this.multiple);\n    this.stateChanges.next();\n\n    // We need `distinctUntilChanged` here, because some browsers will\n    // fire the animation end event twice for the same animation. See:\n    // https://github.com/angular/angular/issues/24084\n    this._panelDoneAnimatingStream\n      .pipe(distinctUntilChanged(), takeUntil(this._destroy))\n      .subscribe(() => {\n        if (this.panelOpen) {\n          this._scrollTop = 0;\n          this.openedChange.emit(true);\n        } else {\n          this.openedChange.emit(false);\n          this._panelDoneAnimating = false;\n          this.overlayDir.offsetX = 0;\n          this._changeDetectorRef.markForCheck();\n        }\n      });\n  }\n\n  ngAfterContentInit() {\n    this._initKeyManager();\n\n    this._selectionModel.onChange!.pipe(takeUntil(this._destroy)).subscribe(event => {\n      event.added.forEach(option => option.select());\n      event.removed.forEach(option => option.deselect());\n    });\n\n    this.options.changes.pipe(startWith(null), takeUntil(this._destroy)).subscribe(() => {\n      this._resetOptions();\n      this._initializeSelection();\n    });\n  }\n\n  ngDoCheck() {\n    if (this.ngControl) {\n      this.updateErrorState();\n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    // Updating the disabled state is handled by `mixinDisabled`, but we need to additionally let\n    // the parent form field know to run change detection when the disabled state changes.\n    if (changes.disabled) {\n      this.stateChanges.next();\n    }\n  }\n\n  ngOnDestroy() {\n    this._destroy.next();\n    this._destroy.complete();\n    this.stateChanges.complete();\n  }\n\n  /** Toggles the overlay panel open or closed. */\n  toggle(): void {\n    this.panelOpen ? this.close() : this.open();\n  }\n\n  /** Opens the overlay panel. */\n  open(): void {\n    if (this.disabled || !this.options || !this.options.length || this._panelOpen) {\n      return;\n    }\n\n    this._triggerRect = this.trigger.nativeElement.getBoundingClientRect();\n    // Note: The computed font-size will be a string pixel value (e.g. \"16px\").\n    // `parseInt` ignores the trailing 'px' and converts this to a number.\n    this._triggerFontSize = parseInt(getComputedStyle(this.trigger.nativeElement)['font-size']);\n\n    this._panelOpen = true;\n    this._keyManager.withHorizontalOrientation(null);\n    this._calculateOverlayPosition();\n    this._highlightCorrectOption();\n    this._changeDetectorRef.markForCheck();\n\n    // Set the font size on the panel element once it exists.\n    this._ngZone.onStable.asObservable().pipe(take(1)).subscribe(() => {\n      if (this._triggerFontSize && this.overlayDir.overlayRef &&\n          this.overlayDir.overlayRef.overlayElement) {\n        this.overlayDir.overlayRef.overlayElement.style.fontSize = `${this._triggerFontSize}px`;\n      }\n    });\n  }\n\n  /** Closes the overlay panel and focuses the host element. */\n  close(): void {\n    if (this._panelOpen) {\n      this._panelOpen = false;\n      this._keyManager.withHorizontalOrientation(this._isRtl() ? 'rtl' : 'ltr');\n      this._changeDetectorRef.markForCheck();\n      this._onTouched();\n    }\n  }\n\n  /**\n   * Sets the select's value. Part of the ControlValueAccessor interface\n   * required to integrate with Angular's core forms API.\n   *\n   * @param value New value to be written to the model.\n   */\n  writeValue(value: any): void {\n    if (this.options) {\n      this._setSelectionByValue(value);\n    }\n  }\n\n  /**\n   * Saves a callback function to be invoked when the select's value\n   * changes from user input. Part of the ControlValueAccessor interface\n   * required to integrate with Angular's core forms API.\n   *\n   * @param fn Callback to be triggered when the value changes.\n   */\n  registerOnChange(fn: (value: any) => void): void {\n    this._onChange = fn;\n  }\n\n  /**\n   * Saves a callback function to be invoked when the select is blurred\n   * by the user. Part of the ControlValueAccessor interface required\n   * to integrate with Angular's core forms API.\n   *\n   * @param fn Callback to be triggered when the component has been touched.\n   */\n  registerOnTouched(fn: () => {}): void {\n    this._onTouched = fn;\n  }\n\n  /**\n   * Disables the select. Part of the ControlValueAccessor interface required\n   * to integrate with Angular's core forms API.\n   *\n   * @param isDisabled Sets whether the component is disabled.\n   */\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n    this._changeDetectorRef.markForCheck();\n    this.stateChanges.next();\n  }\n\n  /** Whether or not the overlay panel is open. */\n  get panelOpen(): boolean {\n    return this._panelOpen;\n  }\n\n  /** The currently selected option. */\n  get selected(): MatOption | MatOption[] {\n    return this.multiple ? this._selectionModel.selected : this._selectionModel.selected[0];\n  }\n\n  /** The value displayed in the trigger. */\n  get triggerValue(): string {\n    if (this.empty) {\n      return '';\n    }\n\n    if (this._multiple) {\n      const selectedOptions = this._selectionModel.selected.map(option => option.viewValue);\n\n      if (this._isRtl()) {\n        selectedOptions.reverse();\n      }\n\n      // TODO(crisbeto): delimiter should be configurable for proper localization.\n      return selectedOptions.join(', ');\n    }\n\n    return this._selectionModel.selected[0].viewValue;\n  }\n\n  /** Whether the element is in RTL mode. */\n  _isRtl(): boolean {\n    return this._dir ? this._dir.value === 'rtl' : false;\n  }\n\n  /** Handles all keydown events on the select. */\n  _handleKeydown(event: KeyboardEvent): void {\n    if (!this.disabled) {\n      this.panelOpen ? this._handleOpenKeydown(event) : this._handleClosedKeydown(event);\n    }\n  }\n\n  /** Handles keyboard events while the select is closed. */\n  private _handleClosedKeydown(event: KeyboardEvent): void {\n    const keyCode = event.keyCode;\n    const isArrowKey = keyCode === DOWN_ARROW || keyCode === UP_ARROW ||\n        keyCode === LEFT_ARROW || keyCode === RIGHT_ARROW;\n    const isOpenKey = keyCode === ENTER || keyCode === SPACE;\n\n    // Open the select on ALT + arrow key to match the native <select>\n    if (isOpenKey || ((this.multiple || event.altKey) && isArrowKey)) {\n      event.preventDefault(); // prevents the page from scrolling down when pressing space\n      this.open();\n    } else if (!this.multiple) {\n      this._keyManager.onKeydown(event);\n    }\n  }\n\n  /** Handles keyboard events when the selected is open. */\n  private _handleOpenKeydown(event: KeyboardEvent): void {\n    const keyCode = event.keyCode;\n    const isArrowKey = keyCode === DOWN_ARROW || keyCode === UP_ARROW;\n    const manager = this._keyManager;\n\n    if (keyCode === HOME || keyCode === END) {\n      event.preventDefault();\n      keyCode === HOME ? manager.setFirstItemActive() : manager.setLastItemActive();\n    } else if (isArrowKey && event.altKey) {\n      // Close the select on ALT + arrow key to match the native <select>\n      event.preventDefault();\n      this.close();\n    } else if ((keyCode === ENTER || keyCode === SPACE) && manager.activeItem) {\n      event.preventDefault();\n      manager.activeItem._selectViaInteraction();\n    } else if (this._multiple && keyCode === A && event.ctrlKey) {\n      event.preventDefault();\n      const hasDeselectedOptions = this.options.some(opt => !opt.disabled && !opt.selected);\n\n      this.options.forEach(option => {\n        if (!option.disabled) {\n          hasDeselectedOptions ? option.select() : option.deselect();\n        }\n      });\n    } else {\n      const previouslyFocusedIndex = manager.activeItemIndex;\n\n      manager.onKeydown(event);\n\n      if (this._multiple && isArrowKey && event.shiftKey && manager.activeItem &&\n          manager.activeItemIndex !== previouslyFocusedIndex) {\n        manager.activeItem._selectViaInteraction();\n      }\n    }\n  }\n\n  /**\n   * When the panel content is done fading in, the _panelDoneAnimating property is\n   * set so the proper class can be added to the panel.\n   */\n  _onFadeInDone(): void {\n    this._panelDoneAnimating = this.panelOpen;\n    this._changeDetectorRef.markForCheck();\n  }\n\n  _onFocus() {\n    if (!this.disabled) {\n      this._focused = true;\n      this.stateChanges.next();\n    }\n  }\n\n  /**\n   * Calls the touched callback only if the panel is closed. Otherwise, the trigger will\n   * \"blur\" to the panel when it opens, causing a false positive.\n   */\n  _onBlur() {\n    this._focused = false;\n\n    if (!this.disabled && !this.panelOpen) {\n      this._onTouched();\n      this._changeDetectorRef.markForCheck();\n      this.stateChanges.next();\n    }\n  }\n\n  /**\n   * Callback that is invoked when the overlay panel has been attached.\n   */\n  _onAttached(): void {\n    this.overlayDir.positionChange.pipe(take(1)).subscribe(() => {\n      this._changeDetectorRef.detectChanges();\n      this._calculateOverlayOffsetX();\n      this.panel.nativeElement.scrollTop = this._scrollTop;\n    });\n  }\n\n  /** Returns the theme to be used on the panel. */\n  _getPanelTheme(): string {\n    return this._parentFormField ? `mat-${this._parentFormField.color}` : '';\n  }\n\n  /** Whether the select has a value. */\n  get empty(): boolean {\n    return !this._selectionModel || this._selectionModel.isEmpty();\n  }\n\n  private _initializeSelection(): void {\n    // Defer setting the value in order to avoid the \"Expression\n    // has changed after it was checked\" errors from Angular.\n    Promise.resolve().then(() => {\n      this._setSelectionByValue(this.ngControl ? this.ngControl.value : this._value);\n    });\n  }\n\n  /**\n   * Sets the selected option based on a value. If no option can be\n   * found with the designated value, the select trigger is cleared.\n   */\n  private _setSelectionByValue(value: any | any[]): void {\n    if (this.multiple && value) {\n      if (!Array.isArray(value)) {\n        throw getMatSelectNonArrayValueError();\n      }\n\n      this._selectionModel.clear();\n      value.forEach((currentValue: any) => this._selectValue(currentValue));\n      this._sortValues();\n    } else {\n      this._selectionModel.clear();\n      const correspondingOption = this._selectValue(value);\n\n      // Shift focus to the active item. Note that we shouldn't do this in multiple\n      // mode, because we don't know what option the user interacted with last.\n      if (correspondingOption) {\n        this._keyManager.setActiveItem(correspondingOption);\n      }\n    }\n\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /**\n   * Finds and selects and option based on its value.\n   * @returns Option that has the corresponding value.\n   */\n  private _selectValue(value: any): MatOption | undefined {\n    const correspondingOption = this.options.find((option: MatOption) => {\n      try {\n        // Treat null as a special reset value.\n        return option.value != null && this._compareWith(option.value,  value);\n      } catch (error) {\n        if (isDevMode()) {\n          // Notify developers of errors in their comparator.\n          console.warn(error);\n        }\n        return false;\n      }\n    });\n\n    if (correspondingOption) {\n      this._selectionModel.select(correspondingOption);\n    }\n\n    return correspondingOption;\n  }\n\n  /** Sets up a key manager to listen to keyboard events on the overlay panel. */\n  private _initKeyManager() {\n    this._keyManager = new ActiveDescendantKeyManager<MatOption>(this.options)\n      .withTypeAhead()\n      .withVerticalOrientation()\n      .withHorizontalOrientation(this._isRtl() ? 'rtl' : 'ltr');\n\n    this._keyManager.tabOut.pipe(takeUntil(this._destroy)).subscribe(() => {\n      // Restore focus to the trigger before closing. Ensures that the focus\n      // position won't be lost if the user got focus into the overlay.\n      this.focus();\n      this.close();\n    });\n\n    this._keyManager.change.pipe(takeUntil(this._destroy)).subscribe(() => {\n      if (this._panelOpen && this.panel) {\n        this._scrollActiveOptionIntoView();\n      } else if (!this._panelOpen && !this.multiple && this._keyManager.activeItem) {\n        this._keyManager.activeItem._selectViaInteraction();\n      }\n    });\n  }\n\n  /** Drops current option subscriptions and IDs and resets from scratch. */\n  private _resetOptions(): void {\n    const changedOrDestroyed = merge(this.options.changes, this._destroy);\n\n    this.optionSelectionChanges.pipe(takeUntil(changedOrDestroyed)).subscribe(event => {\n      this._onSelect(event.source, event.isUserInput);\n\n      if (event.isUserInput && !this.multiple && this._panelOpen) {\n        this.close();\n        this.focus();\n      }\n    });\n\n    // Listen to changes in the internal state of the options and react accordingly.\n    // Handles cases like the labels of the selected options changing.\n    merge(...this.options.map(option => option._stateChanges))\n      .pipe(takeUntil(changedOrDestroyed))\n      .subscribe(() => {\n        this._changeDetectorRef.markForCheck();\n        this.stateChanges.next();\n      });\n\n    this._setOptionIds();\n  }\n\n  /** Invoked when an option is clicked. */\n  private _onSelect(option: MatOption, isUserInput: boolean): void {\n    const wasSelected = this._selectionModel.isSelected(option);\n\n    if (option.value == null && !this._multiple) {\n      option.deselect();\n      this._selectionModel.clear();\n      this._propagateChanges(option.value);\n    } else {\n      option.selected ? this._selectionModel.select(option) : this._selectionModel.deselect(option);\n\n      if (isUserInput) {\n        this._keyManager.setActiveItem(option);\n      }\n\n      if (this.multiple) {\n        this._sortValues();\n\n        if (isUserInput) {\n          // In case the user selected the option with their mouse, we\n          // want to restore focus back to the trigger, in order to\n          // prevent the select keyboard controls from clashing with\n          // the ones from `mat-option`.\n          this.focus();\n        }\n      }\n    }\n\n    if (wasSelected !== this._selectionModel.isSelected(option)) {\n      this._propagateChanges();\n    }\n\n    this.stateChanges.next();\n  }\n\n  /** Sorts the selected values in the selected based on their order in the panel. */\n  private _sortValues() {\n    if (this.multiple) {\n      const options = this.options.toArray();\n\n      this._selectionModel.sort((a, b) => {\n        return this.sortComparator ? this.sortComparator(a, b, options) :\n                                     options.indexOf(a) - options.indexOf(b);\n      });\n      this.stateChanges.next();\n    }\n  }\n\n  /** Emits change event to set the model value. */\n  private _propagateChanges(fallbackValue?: any): void {\n    let valueToEmit: any = null;\n\n    if (this.multiple) {\n      valueToEmit = (this.selected as MatOption[]).map(option => option.value);\n    } else {\n      valueToEmit = this.selected ? (this.selected as MatOption).value : fallbackValue;\n    }\n\n    this._value = valueToEmit;\n    this.valueChange.emit(valueToEmit);\n    this._onChange(valueToEmit);\n    this.selectionChange.emit(new MatSelectChange(this, valueToEmit));\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Records option IDs to pass to the aria-owns property. */\n  private _setOptionIds() {\n    this._optionIds = this.options.map(option => option.id).join(' ');\n  }\n\n  /**\n   * Highlights the selected item. If no option is selected, it will highlight\n   * the first item instead.\n   */\n  private _highlightCorrectOption(): void {\n    if (this._keyManager) {\n      if (this.empty) {\n        this._keyManager.setFirstItemActive();\n      } else {\n        this._keyManager.setActiveItem(this._selectionModel.selected[0]);\n      }\n    }\n  }\n\n  /** Scrolls the active option into view. */\n  private _scrollActiveOptionIntoView(): void {\n    const activeOptionIndex = this._keyManager.activeItemIndex || 0;\n    const labelCount = _countGroupLabelsBeforeOption(activeOptionIndex, this.options,\n        this.optionGroups);\n\n    this.panel.nativeElement.scrollTop = _getOptionScrollPosition(\n      activeOptionIndex + labelCount,\n      this._getItemHeight(),\n      this.panel.nativeElement.scrollTop,\n      SELECT_PANEL_MAX_HEIGHT\n    );\n  }\n\n  /** Focuses the select element. */\n  focus(): void {\n    this._elementRef.nativeElement.focus();\n  }\n\n  /** Gets the index of the provided option in the option list. */\n  private _getOptionIndex(option: MatOption): number | undefined {\n    return this.options.reduce((result: number | undefined, current: MatOption, index: number) => {\n      return result === undefined ? (option === current ? index : undefined) : result;\n    }, undefined);\n  }\n\n  /** Calculates the scroll position and x- and y-offsets of the overlay panel. */\n  private _calculateOverlayPosition(): void {\n    const itemHeight = this._getItemHeight();\n    const items = this._getItemCount();\n    const panelHeight = Math.min(items * itemHeight, SELECT_PANEL_MAX_HEIGHT);\n    const scrollContainerHeight = items * itemHeight;\n\n    // The farthest the panel can be scrolled before it hits the bottom\n    const maxScroll = scrollContainerHeight - panelHeight;\n\n    // If no value is selected we open the popup to the first item.\n    let selectedOptionOffset =\n        this.empty ? 0 : this._getOptionIndex(this._selectionModel.selected[0])!;\n\n    selectedOptionOffset += _countGroupLabelsBeforeOption(selectedOptionOffset, this.options,\n        this.optionGroups);\n\n    // We must maintain a scroll buffer so the selected option will be scrolled to the\n    // center of the overlay panel rather than the top.\n    const scrollBuffer = panelHeight / 2;\n    this._scrollTop = this._calculateOverlayScroll(selectedOptionOffset, scrollBuffer, maxScroll);\n    this._offsetY = this._calculateOverlayOffsetY(selectedOptionOffset, scrollBuffer, maxScroll);\n\n    this._checkOverlayWithinViewport(maxScroll);\n  }\n\n  /**\n   * Calculates the scroll position of the select's overlay panel.\n   *\n   * Attempts to center the selected option in the panel. If the option is\n   * too high or too low in the panel to be scrolled to the center, it clamps the\n   * scroll position to the min or max scroll positions respectively.\n   */\n  _calculateOverlayScroll(selectedIndex: number, scrollBuffer: number,\n                          maxScroll: number): number {\n    const itemHeight = this._getItemHeight();\n    const optionOffsetFromScrollTop = itemHeight * selectedIndex;\n    const halfOptionHeight = itemHeight / 2;\n\n    // Starts at the optionOffsetFromScrollTop, which scrolls the option to the top of the\n    // scroll container, then subtracts the scroll buffer to scroll the option down to\n    // the center of the overlay panel. Half the option height must be re-added to the\n    // scrollTop so the option is centered based on its middle, not its top edge.\n    const optimalScrollPosition = optionOffsetFromScrollTop - scrollBuffer + halfOptionHeight;\n    return Math.min(Math.max(0, optimalScrollPosition), maxScroll);\n  }\n\n  /** Returns the aria-label of the select component. */\n  _getAriaLabel(): string | null {\n    // If an ariaLabelledby value has been set by the consumer, the select should not overwrite the\n    // `aria-labelledby` value by setting the ariaLabel to the placeholder.\n    return this.ariaLabelledby ? null : this.ariaLabel || this.placeholder;\n  }\n\n  /** Returns the aria-labelledby of the select component. */\n  _getAriaLabelledby(): string | null {\n    if (this.ariaLabelledby) {\n      return this.ariaLabelledby;\n    }\n\n    // Note: we use `_getAriaLabel` here, because we want to check whether there's a\n    // computed label. `this.ariaLabel` is only the user-specified label.\n    if (!this._parentFormField || !this._parentFormField._hasFloatingLabel() ||\n      this._getAriaLabel()) {\n      return null;\n    }\n\n    return this._parentFormField._labelId || null;\n  }\n\n  /** Determines the `aria-activedescendant` to be set on the host. */\n  _getAriaActiveDescendant(): string | null {\n    if (this.panelOpen && this._keyManager && this._keyManager.activeItem) {\n      return this._keyManager.activeItem.id;\n    }\n\n    return null;\n  }\n\n  /**\n   * Sets the x-offset of the overlay panel in relation to the trigger's top start corner.\n   * This must be adjusted to align the selected option text over the trigger text when\n   * the panel opens. Will change based on LTR or RTL text direction. Note that the offset\n   * can't be calculated until the panel has been attached, because we need to know the\n   * content width in order to constrain the panel within the viewport.\n   */\n  private _calculateOverlayOffsetX(): void {\n    const overlayRect = this.overlayDir.overlayRef.overlayElement.getBoundingClientRect();\n    const viewportSize = this._viewportRuler.getViewportSize();\n    const isRtl = this._isRtl();\n    const paddingWidth = this.multiple ? SELECT_MULTIPLE_PANEL_PADDING_X + SELECT_PANEL_PADDING_X :\n                                         SELECT_PANEL_PADDING_X * 2;\n    let offsetX: number;\n\n    // Adjust the offset, depending on the option padding.\n    if (this.multiple) {\n      offsetX = SELECT_MULTIPLE_PANEL_PADDING_X;\n    } else {\n      let selected = this._selectionModel.selected[0] || this.options.first;\n      offsetX = selected && selected.group ? SELECT_PANEL_INDENT_PADDING_X : SELECT_PANEL_PADDING_X;\n    }\n\n    // Invert the offset in LTR.\n    if (!isRtl) {\n      offsetX *= -1;\n    }\n\n    // Determine how much the select overflows on each side.\n    const leftOverflow = 0 - (overlayRect.left + offsetX - (isRtl ? paddingWidth : 0));\n    const rightOverflow = overlayRect.right + offsetX - viewportSize.width\n                          + (isRtl ? 0 : paddingWidth);\n\n    // If the element overflows on either side, reduce the offset to allow it to fit.\n    if (leftOverflow > 0) {\n      offsetX += leftOverflow + SELECT_PANEL_VIEWPORT_PADDING;\n    } else if (rightOverflow > 0) {\n      offsetX -= rightOverflow + SELECT_PANEL_VIEWPORT_PADDING;\n    }\n\n    // Set the offset directly in order to avoid having to go through change detection and\n    // potentially triggering \"changed after it was checked\" errors. Round the value to avoid\n    // blurry content in some browsers.\n    this.overlayDir.offsetX = Math.round(offsetX);\n    this.overlayDir.overlayRef.updatePosition();\n  }\n\n  /**\n   * Calculates the y-offset of the select's overlay panel in relation to the\n   * top start corner of the trigger. It has to be adjusted in order for the\n   * selected option to be aligned over the trigger when the panel opens.\n   */\n  private _calculateOverlayOffsetY(selectedIndex: number, scrollBuffer: number,\n                                  maxScroll: number): number {\n    const itemHeight = this._getItemHeight();\n    const optionHeightAdjustment = (itemHeight - this._triggerRect.height) / 2;\n    const maxOptionsDisplayed = Math.floor(SELECT_PANEL_MAX_HEIGHT / itemHeight);\n    let optionOffsetFromPanelTop: number;\n\n    // Disable offset if requested by user by returning 0 as value to offset\n    if (this._disableOptionCentering) {\n      return 0;\n    }\n\n    if (this._scrollTop === 0) {\n      optionOffsetFromPanelTop = selectedIndex * itemHeight;\n    } else if (this._scrollTop === maxScroll) {\n      const firstDisplayedIndex = this._getItemCount() - maxOptionsDisplayed;\n      const selectedDisplayIndex = selectedIndex - firstDisplayedIndex;\n\n      // The first item is partially out of the viewport. Therefore we need to calculate what\n      // portion of it is shown in the viewport and account for it in our offset.\n      let partialItemHeight =\n          itemHeight - (this._getItemCount() * itemHeight - SELECT_PANEL_MAX_HEIGHT) % itemHeight;\n\n      // Because the panel height is longer than the height of the options alone,\n      // there is always extra padding at the top or bottom of the panel. When\n      // scrolled to the very bottom, this padding is at the top of the panel and\n      // must be added to the offset.\n      optionOffsetFromPanelTop = selectedDisplayIndex * itemHeight + partialItemHeight;\n    } else {\n      // If the option was scrolled to the middle of the panel using a scroll buffer,\n      // its offset will be the scroll buffer minus the half height that was added to\n      // center it.\n      optionOffsetFromPanelTop = scrollBuffer - itemHeight / 2;\n    }\n\n    // The final offset is the option's offset from the top, adjusted for the height difference,\n    // multiplied by -1 to ensure that the overlay moves in the correct direction up the page.\n    // The value is rounded to prevent some browsers from blurring the content.\n    return Math.round(optionOffsetFromPanelTop * -1 - optionHeightAdjustment);\n  }\n\n  /**\n   * Checks that the attempted overlay position will fit within the viewport.\n   * If it will not fit, tries to adjust the scroll position and the associated\n   * y-offset so the panel can open fully on-screen. If it still won't fit,\n   * sets the offset back to 0 to allow the fallback position to take over.\n   */\n  private _checkOverlayWithinViewport(maxScroll: number): void {\n    const itemHeight = this._getItemHeight();\n    const viewportSize = this._viewportRuler.getViewportSize();\n\n    const topSpaceAvailable = this._triggerRect.top - SELECT_PANEL_VIEWPORT_PADDING;\n    const bottomSpaceAvailable =\n        viewportSize.height - this._triggerRect.bottom - SELECT_PANEL_VIEWPORT_PADDING;\n\n    const panelHeightTop = Math.abs(this._offsetY);\n    const totalPanelHeight =\n        Math.min(this._getItemCount() * itemHeight, SELECT_PANEL_MAX_HEIGHT);\n    const panelHeightBottom = totalPanelHeight - panelHeightTop - this._triggerRect.height;\n\n    if (panelHeightBottom > bottomSpaceAvailable) {\n      this._adjustPanelUp(panelHeightBottom, bottomSpaceAvailable);\n    } else if (panelHeightTop > topSpaceAvailable) {\n     this._adjustPanelDown(panelHeightTop, topSpaceAvailable, maxScroll);\n    } else {\n      this._transformOrigin = this._getOriginBasedOnOption();\n    }\n  }\n\n  /** Adjusts the overlay panel up to fit in the viewport. */\n  private _adjustPanelUp(panelHeightBottom: number, bottomSpaceAvailable: number) {\n    // Browsers ignore fractional scroll offsets, so we need to round.\n    const distanceBelowViewport = Math.round(panelHeightBottom - bottomSpaceAvailable);\n\n    // Scrolls the panel up by the distance it was extending past the boundary, then\n    // adjusts the offset by that amount to move the panel up into the viewport.\n    this._scrollTop -= distanceBelowViewport;\n    this._offsetY -= distanceBelowViewport;\n    this._transformOrigin = this._getOriginBasedOnOption();\n\n    // If the panel is scrolled to the very top, it won't be able to fit the panel\n    // by scrolling, so set the offset to 0 to allow the fallback position to take\n    // effect.\n    if (this._scrollTop <= 0) {\n      this._scrollTop = 0;\n      this._offsetY = 0;\n      this._transformOrigin = `50% bottom 0px`;\n    }\n  }\n\n  /** Adjusts the overlay panel down to fit in the viewport. */\n  private _adjustPanelDown(panelHeightTop: number, topSpaceAvailable: number,\n                           maxScroll: number) {\n    // Browsers ignore fractional scroll offsets, so we need to round.\n    const distanceAboveViewport = Math.round(panelHeightTop - topSpaceAvailable);\n\n    // Scrolls the panel down by the distance it was extending past the boundary, then\n    // adjusts the offset by that amount to move the panel down into the viewport.\n    this._scrollTop += distanceAboveViewport;\n    this._offsetY += distanceAboveViewport;\n    this._transformOrigin = this._getOriginBasedOnOption();\n\n    // If the panel is scrolled to the very bottom, it won't be able to fit the\n    // panel by scrolling, so set the offset to 0 to allow the fallback position\n    // to take effect.\n    if (this._scrollTop >= maxScroll) {\n      this._scrollTop = maxScroll;\n      this._offsetY = 0;\n      this._transformOrigin = `50% top 0px`;\n      return;\n    }\n  }\n\n  /** Sets the transform origin point based on the selected option. */\n  private _getOriginBasedOnOption(): string {\n    const itemHeight = this._getItemHeight();\n    const optionHeightAdjustment = (itemHeight - this._triggerRect.height) / 2;\n    const originY = Math.abs(this._offsetY) - optionHeightAdjustment + itemHeight / 2;\n    return `50% ${originY}px 0px`;\n  }\n\n  /** Calculates the amount of items in the select. This includes options and group labels. */\n  private _getItemCount(): number {\n    return this.options.length + this.optionGroups.length;\n  }\n\n  /** Calculates the height of the select's options. */\n  private _getItemHeight(): number {\n    return this._triggerFontSize * SELECT_ITEM_HEIGHT_EM;\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  setDescribedByIds(ids: string[]) {\n    this._ariaDescribedby = ids.join(' ');\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  onContainerClick() {\n    this.focus();\n    this.open();\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  get shouldLabelFloat(): boolean {\n    return this._panelOpen || !this.empty;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {AnimationEvent} from '@angular/animations';\nimport {AriaDescriber, FocusMonitor} from '@angular/cdk/a11y';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {ESCAPE} from '@angular/cdk/keycodes';\nimport {BreakpointObserver, Breakpoints, BreakpointState} from '@angular/cdk/layout';\nimport {\n  FlexibleConnectedPositionStrategy,\n  HorizontalConnectionPos,\n  OriginConnectionPosition,\n  Overlay,\n  OverlayConnectionPosition,\n  OverlayRef,\n  ScrollDispatcher,\n  ScrollStrategy,\n  VerticalConnectionPos,\n} from '@angular/cdk/overlay';\nimport {Platform} from '@angular/cdk/platform';\nimport {ComponentPortal} from '@angular/cdk/portal';\nimport {take, takeUntil} from 'rxjs/operators';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  Directive,\n  ElementRef,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  ViewContainerRef,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {Subject, Observable} from 'rxjs';\nimport {matTooltipAnimations} from './tooltip-animations';\n\n\nexport type TooltipPosition = 'left' | 'right' | 'above' | 'below' | 'before' | 'after';\n\n/** Time in ms to throttle repositioning after scroll events. */\nexport const SCROLL_THROTTLE_MS = 20;\n\n/** CSS class that will be attached to the overlay panel. */\nexport const TOOLTIP_PANEL_CLASS = 'mat-tooltip-panel';\n\n/**\n * Creates an error to be thrown if the user supplied an invalid tooltip position.\n * @docs-private\n */\nexport function getMatTooltipInvalidPositionError(position: string) {\n  return Error(`Tooltip position \"${position}\" is invalid.`);\n}\n\n/** Injection token that determines the scroll handling while a tooltip is visible. */\nexport const MAT_TOOLTIP_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mat-tooltip-scroll-strategy');\n\n/** @docs-private */\nexport function MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY(overlay: Overlay): () => ScrollStrategy {\n  return () => overlay.scrollStrategies.reposition({scrollThrottle: SCROLL_THROTTLE_MS});\n}\n\n/** @docs-private */\nexport const MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY_PROVIDER = {\n  provide: MAT_TOOLTIP_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY,\n};\n\n/** Default `matTooltip` options that can be overridden. */\nexport interface MatTooltipDefaultOptions {\n  showDelay: number;\n  hideDelay: number;\n  touchendHideDelay: number;\n}\n\n/** Injection token to be used to override the default options for `matTooltip`. */\nexport const MAT_TOOLTIP_DEFAULT_OPTIONS =\n    new InjectionToken<MatTooltipDefaultOptions>('mat-tooltip-default-options', {\n      providedIn: 'root',\n      factory: MAT_TOOLTIP_DEFAULT_OPTIONS_FACTORY\n    });\n\n/** @docs-private */\nexport function MAT_TOOLTIP_DEFAULT_OPTIONS_FACTORY(): MatTooltipDefaultOptions {\n  return {\n    showDelay: 0,\n    hideDelay: 0,\n    touchendHideDelay: 1500,\n  };\n}\n\n/**\n * Directive that attaches a material design tooltip to the host element. Animates the showing and\n * hiding of a tooltip provided position (defaults to below the element).\n *\n * https://material.io/design/components/tooltips.html\n */\n@Directive({\n  selector: '[matTooltip]',\n  exportAs: 'matTooltip',\n  host: {\n    '(longpress)': 'show()',\n    '(keydown)': '_handleKeydown($event)',\n    '(touchend)': '_handleTouchend()',\n  },\n})\nexport class MatTooltip implements OnDestroy {\n  _overlayRef: OverlayRef | null;\n  _tooltipInstance: TooltipComponent | null;\n\n  private _portal: ComponentPortal<TooltipComponent>;\n  private _position: TooltipPosition = 'below';\n  private _disabled: boolean = false;\n  private _tooltipClass: string|string[]|Set<string>|{[key: string]: any};\n\n  /** Allows the user to define the position of the tooltip relative to the parent element */\n  @Input('matTooltipPosition')\n  get position(): TooltipPosition { return this._position; }\n  set position(value: TooltipPosition) {\n    if (value !== this._position) {\n      this._position = value;\n\n      if (this._overlayRef) {\n        this._updatePosition();\n\n        if (this._tooltipInstance) {\n          this._tooltipInstance!.show(0);\n        }\n\n        this._overlayRef.updatePosition();\n      }\n    }\n  }\n\n  /** Disables the display of the tooltip. */\n  @Input('matTooltipDisabled')\n  get disabled(): boolean { return this._disabled; }\n  set disabled(value) {\n    this._disabled = coerceBooleanProperty(value);\n\n    // If tooltip is disabled, hide immediately.\n    if (this._disabled) {\n      this.hide(0);\n    }\n  }\n\n  /** The default delay in ms before showing the tooltip after show is called */\n  @Input('matTooltipShowDelay') showDelay = this._defaultOptions.showDelay;\n\n  /** The default delay in ms before hiding the tooltip after hide is called */\n  @Input('matTooltipHideDelay') hideDelay = this._defaultOptions.hideDelay;\n\n  private _message = '';\n\n  /** The message to be displayed in the tooltip */\n  @Input('matTooltip')\n  get message() { return this._message; }\n  set message(value: string) {\n    this._ariaDescriber.removeDescription(this._elementRef.nativeElement, this._message);\n\n    // If the message is not a string (e.g. number), convert it to a string and trim it.\n    this._message = value != null ? `${value}`.trim() : '';\n\n    if (!this._message && this._isTooltipVisible()) {\n      this.hide(0);\n    } else {\n      this._updateTooltipMessage();\n      this._ariaDescriber.describe(this._elementRef.nativeElement, this.message);\n    }\n  }\n\n  /** Classes to be passed to the tooltip. Supports the same syntax as `ngClass`. */\n  @Input('matTooltipClass')\n  get tooltipClass() { return this._tooltipClass; }\n  set tooltipClass(value: string|string[]|Set<string>|{[key: string]: any}) {\n    this._tooltipClass = value;\n    if (this._tooltipInstance) {\n      this._setTooltipClass(this._tooltipClass);\n    }\n  }\n\n  private _manualListeners = new Map<string, EventListenerOrEventListenerObject>();\n\n  /** Emits when the component is destroyed. */\n  private readonly _destroyed = new Subject<void>();\n\n  constructor(\n    private _overlay: Overlay,\n    private _elementRef: ElementRef,\n    private _scrollDispatcher: ScrollDispatcher,\n    private _viewContainerRef: ViewContainerRef,\n    private _ngZone: NgZone,\n    private _platform: Platform,\n    private _ariaDescriber: AriaDescriber,\n    private _focusMonitor: FocusMonitor,\n    @Inject(MAT_TOOLTIP_SCROLL_STRATEGY) private _scrollStrategy,\n    @Optional() private _dir: Directionality,\n    @Optional() @Inject(MAT_TOOLTIP_DEFAULT_OPTIONS)\n      private _defaultOptions: MatTooltipDefaultOptions) {\n\n    const element: HTMLElement = _elementRef.nativeElement;\n\n    // The mouse events shouldn't be bound on mobile devices, because they can prevent the\n    // first tap from firing its click event or can cause the tooltip to open for clicks.\n    if (!_platform.IOS && !_platform.ANDROID) {\n      this._manualListeners\n        .set('mouseenter', () => this.show())\n        .set('mouseleave', () => this.hide())\n        .forEach((listener, event) => element.addEventListener(event, listener));\n    } else if (_platform.IOS && (element.nodeName === 'INPUT' || element.nodeName === 'TEXTAREA')) {\n      // When we bind a gesture event on an element (in this case `longpress`), HammerJS\n      // will add some inline styles by default, including `user-select: none`. This is\n      // problematic on iOS, because it will prevent users from typing in inputs. If\n      // we're on iOS and the tooltip is attached on an input or textarea, we clear\n      // the `user-select` to avoid these issues.\n      element.style.webkitUserSelect = element.style.userSelect = '';\n    }\n\n    // Hammer applies `-webkit-user-drag: none` on all elements by default,\n    // which breaks the native drag&drop. If the consumer explicitly made\n    // the element draggable, clear the `-webkit-user-drag`.\n    if (element.draggable && element.style['webkitUserDrag'] === 'none') {\n      element.style['webkitUserDrag'] = '';\n    }\n\n    _focusMonitor.monitor(_elementRef).pipe(takeUntil(this._destroyed)).subscribe(origin => {\n      // Note that the focus monitor runs outside the Angular zone.\n      if (!origin) {\n        _ngZone.run(() => this.hide(0));\n      } else if (origin === 'keyboard') {\n        _ngZone.run(() => this.show());\n      }\n    });\n  }\n\n  /**\n   * Dispose the tooltip when destroyed.\n   */\n  ngOnDestroy() {\n    if (this._overlayRef) {\n      this._overlayRef.dispose();\n      this._tooltipInstance = null;\n    }\n\n    // Clean up the event listeners set in the constructor\n    if (!this._platform.IOS) {\n      this._manualListeners.forEach((listener, event) =>\n        this._elementRef.nativeElement.removeEventListener(event, listener));\n\n      this._manualListeners.clear();\n    }\n\n    this._destroyed.next();\n    this._destroyed.complete();\n\n    this._ariaDescriber.removeDescription(this._elementRef.nativeElement, this.message);\n    this._focusMonitor.stopMonitoring(this._elementRef);\n  }\n\n  /** Shows the tooltip after the delay in ms, defaults to tooltip-delay-show or 0ms if no input */\n  show(delay: number = this.showDelay): void {\n    if (this.disabled || !this.message) { return; }\n\n    const overlayRef = this._createOverlay();\n\n    this._detach();\n    this._portal = this._portal || new ComponentPortal(TooltipComponent, this._viewContainerRef);\n    this._tooltipInstance = overlayRef.attach(this._portal).instance;\n    this._tooltipInstance.afterHidden()\n      .pipe(takeUntil(this._destroyed))\n      .subscribe(() => this._detach());\n    this._setTooltipClass(this._tooltipClass);\n    this._updateTooltipMessage();\n    this._tooltipInstance!.show(delay);\n  }\n\n  /** Hides the tooltip after the delay in ms, defaults to tooltip-delay-hide or 0ms if no input */\n  hide(delay: number = this.hideDelay): void {\n    if (this._tooltipInstance) {\n      this._tooltipInstance.hide(delay);\n    }\n  }\n\n  /** Shows/hides the tooltip */\n  toggle(): void {\n    this._isTooltipVisible() ? this.hide() : this.show();\n  }\n\n  /** Returns true if the tooltip is currently visible to the user */\n  _isTooltipVisible(): boolean {\n    return !!this._tooltipInstance && this._tooltipInstance.isVisible();\n  }\n\n  /** Handles the keydown events on the host element. */\n  _handleKeydown(e: KeyboardEvent) {\n    if (this._isTooltipVisible() && e.keyCode === ESCAPE) {\n      e.stopPropagation();\n      this.hide(0);\n    }\n  }\n\n  /** Handles the touchend events on the host element. */\n  _handleTouchend() {\n    this.hide(this._defaultOptions.touchendHideDelay);\n  }\n\n  /** Create the overlay config and position strategy */\n  private _createOverlay(): OverlayRef {\n    if (this._overlayRef) {\n      return this._overlayRef;\n    }\n\n    // Create connected position strategy that listens for scroll events to reposition.\n    const strategy = this._overlay.position()\n      .flexibleConnectedTo(this._elementRef)\n      .withTransformOriginOn('.mat-tooltip')\n      .withFlexibleDimensions(false)\n      .withViewportMargin(8);\n\n    const scrollableAncestors = this._scrollDispatcher\n      .getAncestorScrollContainers(this._elementRef);\n\n    strategy.withScrollableContainers(scrollableAncestors);\n\n    strategy.positionChanges.pipe(takeUntil(this._destroyed)).subscribe(change => {\n      if (this._tooltipInstance) {\n        if (change.scrollableViewProperties.isOverlayClipped && this._tooltipInstance.isVisible()) {\n          // After position changes occur and the overlay is clipped by\n          // a parent scrollable then close the tooltip.\n          this._ngZone.run(() => this.hide(0));\n        }\n      }\n    });\n\n    this._overlayRef = this._overlay.create({\n      direction: this._dir,\n      positionStrategy: strategy,\n      panelClass: TOOLTIP_PANEL_CLASS,\n      scrollStrategy: this._scrollStrategy()\n    });\n\n    this._updatePosition();\n\n    this._overlayRef.detachments()\n      .pipe(takeUntil(this._destroyed))\n      .subscribe(() => this._detach());\n\n    return this._overlayRef;\n  }\n\n  /** Detaches the currently-attached tooltip. */\n  private _detach() {\n    if (this._overlayRef && this._overlayRef.hasAttached()) {\n      this._overlayRef.detach();\n    }\n\n    this._tooltipInstance = null;\n  }\n\n  /** Updates the position of the current tooltip. */\n  private _updatePosition() {\n    const position =\n        this._overlayRef!.getConfig().positionStrategy as FlexibleConnectedPositionStrategy;\n    const origin = this._getOrigin();\n    const overlay = this._getOverlayPosition();\n\n    position.withPositions([\n      {...origin.main, ...overlay.main},\n      {...origin.fallback, ...overlay.fallback}\n    ]);\n  }\n\n  /**\n   * Returns the origin position and a fallback position based on the user's position preference.\n   * The fallback position is the inverse of the origin (e.g. `'below' -> 'above'`).\n   */\n  _getOrigin(): {main: OriginConnectionPosition, fallback: OriginConnectionPosition} {\n    const isLtr = !this._dir || this._dir.value == 'ltr';\n    const position = this.position;\n    let originPosition: OriginConnectionPosition;\n\n    if (position == 'above' || position == 'below') {\n      originPosition = {originX: 'center', originY: position == 'above' ? 'top' : 'bottom'};\n    } else if (\n      position == 'before' ||\n      (position == 'left' && isLtr) ||\n      (position == 'right' && !isLtr)) {\n      originPosition = {originX: 'start', originY: 'center'};\n    } else if (\n      position == 'after' ||\n      (position == 'right' && isLtr) ||\n      (position == 'left' && !isLtr)) {\n      originPosition = {originX: 'end', originY: 'center'};\n    } else {\n      throw getMatTooltipInvalidPositionError(position);\n    }\n\n    const {x, y} = this._invertPosition(originPosition.originX, originPosition.originY);\n\n    return {\n      main: originPosition,\n      fallback: {originX: x, originY: y}\n    };\n  }\n\n  /** Returns the overlay position and a fallback position based on the user's preference */\n  _getOverlayPosition(): {main: OverlayConnectionPosition, fallback: OverlayConnectionPosition} {\n    const isLtr = !this._dir || this._dir.value == 'ltr';\n    const position = this.position;\n    let overlayPosition: OverlayConnectionPosition;\n\n    if (position == 'above') {\n      overlayPosition = {overlayX: 'center', overlayY: 'bottom'};\n    } else if (position == 'below') {\n      overlayPosition = {overlayX: 'center', overlayY: 'top'};\n    } else if (\n      position == 'before' ||\n      (position == 'left' && isLtr) ||\n      (position == 'right' && !isLtr)) {\n      overlayPosition = {overlayX: 'end', overlayY: 'center'};\n    } else if (\n      position == 'after' ||\n      (position == 'right' && isLtr) ||\n      (position == 'left' && !isLtr)) {\n      overlayPosition = {overlayX: 'start', overlayY: 'center'};\n    } else {\n      throw getMatTooltipInvalidPositionError(position);\n    }\n\n    const {x, y} = this._invertPosition(overlayPosition.overlayX, overlayPosition.overlayY);\n\n    return {\n      main: overlayPosition,\n      fallback: {overlayX: x, overlayY: y}\n    };\n  }\n\n  /** Updates the tooltip message and repositions the overlay according to the new message length */\n  private _updateTooltipMessage() {\n    // Must wait for the message to be painted to the tooltip so that the overlay can properly\n    // calculate the correct positioning based on the size of the text.\n    if (this._tooltipInstance) {\n      this._tooltipInstance.message = this.message;\n      this._tooltipInstance._markForCheck();\n\n      this._ngZone.onMicrotaskEmpty.asObservable().pipe(\n        take(1),\n        takeUntil(this._destroyed)\n      ).subscribe(() => {\n        if (this._tooltipInstance) {\n          this._overlayRef!.updatePosition();\n        }\n      });\n    }\n  }\n\n  /** Updates the tooltip class */\n  private _setTooltipClass(tooltipClass: string|string[]|Set<string>|{[key: string]: any}) {\n    if (this._tooltipInstance) {\n      this._tooltipInstance.tooltipClass = tooltipClass;\n      this._tooltipInstance._markForCheck();\n    }\n  }\n\n  /** Inverts an overlay position. */\n  private _invertPosition(x: HorizontalConnectionPos, y: VerticalConnectionPos) {\n    if (this.position === 'above' || this.position === 'below') {\n      if (y === 'top') {\n        y = 'bottom';\n      } else if (y === 'bottom') {\n        y = 'top';\n      }\n    } else {\n      if (x === 'end') {\n        x = 'start';\n      } else if (x === 'start') {\n        x = 'end';\n      }\n    }\n\n    return {x, y};\n  }\n}\n\nexport type TooltipVisibility = 'initial' | 'visible' | 'hidden';\n\n/**\n * Internal component that wraps the tooltip's content.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-tooltip-component',\n  templateUrl: 'tooltip.html',\n  styleUrls: ['tooltip.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  animations: [matTooltipAnimations.tooltipState],\n  host: {\n    // Forces the element to have a layout in IE and Edge. This fixes issues where the element\n    // won't be rendered if the animations are disabled or there is no web animations polyfill.\n    '[style.zoom]': '_visibility === \"visible\" ? 1 : null',\n    '(body:click)': 'this._handleBodyInteraction()',\n    'aria-hidden': 'true',\n  }\n})\nexport class TooltipComponent {\n  /** Message to display in the tooltip */\n  message: string;\n\n  /** Classes to be added to the tooltip. Supports the same syntax as `ngClass`. */\n  tooltipClass: string|string[]|Set<string>|{[key: string]: any};\n\n  /** The timeout ID of any current timer set to show the tooltip */\n  _showTimeoutId: number;\n\n  /** The timeout ID of any current timer set to hide the tooltip */\n  _hideTimeoutId: number;\n\n  /** Property watched by the animation framework to show or hide the tooltip */\n  _visibility: TooltipVisibility = 'initial';\n\n  /** Whether interactions on the page should close the tooltip */\n  private _closeOnInteraction: boolean = false;\n\n  /** Subject for notifying that the tooltip has been hidden from the view */\n  private readonly _onHide: Subject<any> = new Subject();\n\n  /** Stream that emits whether the user has a handset-sized display.  */\n  _isHandset: Observable<BreakpointState> = this._breakpointObserver.observe(Breakpoints.Handset);\n\n  constructor(\n    private _changeDetectorRef: ChangeDetectorRef,\n    private _breakpointObserver: BreakpointObserver) {}\n\n  /**\n   * Shows the tooltip with an animation originating from the provided origin\n   * @param delay Amount of milliseconds to the delay showing the tooltip.\n   */\n  show(delay: number): void {\n    // Cancel the delayed hide if it is scheduled\n    if (this._hideTimeoutId) {\n      clearTimeout(this._hideTimeoutId);\n    }\n\n    // Body interactions should cancel the tooltip if there is a delay in showing.\n    this._closeOnInteraction = true;\n    this._showTimeoutId = setTimeout(() => {\n      this._visibility = 'visible';\n\n      // Mark for check so if any parent component has set the\n      // ChangeDetectionStrategy to OnPush it will be checked anyways\n      this._markForCheck();\n    }, delay);\n  }\n\n  /**\n   * Begins the animation to hide the tooltip after the provided delay in ms.\n   * @param delay Amount of milliseconds to delay showing the tooltip.\n   */\n  hide(delay: number): void {\n    // Cancel the delayed show if it is scheduled\n    if (this._showTimeoutId) {\n      clearTimeout(this._showTimeoutId);\n    }\n\n    this._hideTimeoutId = setTimeout(() => {\n      this._visibility = 'hidden';\n\n      // Mark for check so if any parent component has set the\n      // ChangeDetectionStrategy to OnPush it will be checked anyways\n      this._markForCheck();\n    }, delay);\n  }\n\n  /** Returns an observable that notifies when the tooltip has been hidden from view. */\n  afterHidden(): Observable<void> {\n    return this._onHide.asObservable();\n  }\n\n  /** Whether the tooltip is being displayed. */\n  isVisible(): boolean {\n    return this._visibility === 'visible';\n  }\n\n  _animationStart() {\n    this._closeOnInteraction = false;\n  }\n\n  _animationDone(event: AnimationEvent): void {\n    const toState = event.toState as TooltipVisibility;\n\n    if (toState === 'hidden' && !this.isVisible()) {\n      this._onHide.next();\n    }\n\n    if (toState === 'visible' || toState === 'hidden') {\n      this._closeOnInteraction = true;\n    }\n  }\n\n  /**\n   * Interactions on the HTML body should close the tooltip immediately as defined in the\n   * material design spec.\n   * https://material.io/design/components/tooltips.html#behavior\n   */\n  _handleBodyInteraction(): void {\n    if (this._closeOnInteraction) {\n      this.hide(0);\n    }\n  }\n\n  /**\n   * Marks that the tooltip needs to be checked in the next change detection run.\n   * Mainly used for rendering the initial text before positioning a tooltip, which\n   * can be problematic in components with OnPush change detection.\n   */\n  _markForCheck(): void {\n    this._changeDetectorRef.markForCheck();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, ElementRef, Inject, InjectionToken, NgZone} from '@angular/core';\n\n\n/**\n * Interface for a a MatInkBar positioner method, defining the positioning and width of the ink\n * bar in a set of tabs.\n */\n// tslint:disable-next-line class-name Using leading underscore to denote internal interface.\nexport interface _MatInkBarPositioner {\n  (element: HTMLElement): { left: string, width: string };\n}\n\n/** Injection token for the MatInkBar's Positioner. */\nexport const _MAT_INK_BAR_POSITIONER =\n  new InjectionToken<_MatInkBarPositioner>('MatInkBarPositioner', {\n    providedIn: 'root',\n    factory: _MAT_INK_BAR_POSITIONER_FACTORY\n  });\n\n/**\n * The default positioner function for the MatInkBar.\n * @docs-private\n */\nexport function _MAT_INK_BAR_POSITIONER_FACTORY(): _MatInkBarPositioner {\n  const method = (element: HTMLElement) => ({\n    left: element ? (element.offsetLeft || 0) + 'px' : '0',\n    width: element ? (element.offsetWidth || 0) + 'px' : '0',\n  });\n\n  return method;\n}\n\n/**\n * The ink-bar is used to display and animate the line underneath the current active tab label.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-ink-bar',\n  host: {\n    'class': 'mat-ink-bar',\n  },\n})\nexport class MatInkBar {\n  constructor(\n    private _elementRef: ElementRef,\n    private _ngZone: NgZone,\n    @Inject(_MAT_INK_BAR_POSITIONER) private _inkBarPositioner: _MatInkBarPositioner) { }\n\n  /**\n   * Calculates the styles from the provided element in order to align the ink-bar to that element.\n   * Shows the ink bar if previously set as hidden.\n   * @param element\n   */\n  alignToElement(element: HTMLElement) {\n    this.show();\n\n    if (typeof requestAnimationFrame !== 'undefined') {\n      this._ngZone.runOutsideAngular(() => {\n        requestAnimationFrame(() => this._setStyles(element));\n      });\n    } else {\n      this._setStyles(element);\n    }\n  }\n\n  /** Shows the ink bar. */\n  show(): void {\n    this._elementRef.nativeElement.style.visibility = 'visible';\n  }\n\n  /** Hides the ink bar. */\n  hide(): void {\n    this._elementRef.nativeElement.style.visibility = 'hidden';\n  }\n\n  /**\n   * Sets the proper styles to the ink bar element.\n   * @param element\n   */\n  private _setStyles(element: HTMLElement) {\n    const positions = this._inkBarPositioner(element);\n    const inkBar: HTMLElement = this._elementRef.nativeElement;\n\n    inkBar.style.left = positions.left;\n    inkBar.style.width = positions.width;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive} from '@angular/core';\nimport {CdkPortal} from '@angular/cdk/portal';\n\n// TODO(devversion): Workaround for https://github.com/angular/material2/issues/12760\nexport const _CdkPortal = CdkPortal;\n\n/** Used to flag tab labels for use with the portal directive */\n@Directive({\n  selector: '[mat-tab-label], [matTabLabel]',\n})\nexport class MatTabLabel extends _CdkPortal {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, TemplateRef} from '@angular/core';\n\n/** Decorates the `ng-template` tags and reads out the template from it. */\n@Directive({selector: '[matTabContent]'})\nexport class MatTabContent {\n  constructor(public template: TemplateRef<any>) { }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {TemplatePortal} from '@angular/cdk/portal';\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  ContentChild,\n  Input,\n  OnChanges,\n  OnDestroy,\n  OnInit,\n  SimpleChanges,\n  TemplateRef,\n  ViewChild,\n  ViewContainerRef,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {CanDisable, mixinDisabled} from '@angular/material/core';\nimport {Subject} from 'rxjs';\nimport {MatTabLabel} from './tab-label';\nimport {MatTabContent} from './tab-content';\n\n\n// Boilerplate for applying mixins to MatTab.\n/** @docs-private */\nexport class MatTabBase {}\nexport const _MatTabMixinBase = mixinDisabled(MatTabBase);\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-tab',\n  templateUrl: 'tab.html',\n  inputs: ['disabled'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matTab',\n})\nexport class MatTab extends _MatTabMixinBase implements OnInit, CanDisable, OnChanges, OnDestroy {\n  /** Content for the tab label given by `<ng-template mat-tab-label>`. */\n  @ContentChild(MatTabLabel) templateLabel: MatTabLabel;\n\n  /**\n   * Template provided in the tab content that will be used if present, used to enable lazy-loading\n   */\n  @ContentChild(MatTabContent, {read: TemplateRef}) _explicitContent: TemplateRef<any>;\n\n  /** Template inside the MatTab view that contains an `<ng-content>`. */\n  @ViewChild(TemplateRef) _implicitContent: TemplateRef<any>;\n\n  /** Plain text label for the tab, used when there is no template label. */\n  @Input('label') textLabel: string = '';\n\n  /** Aria label for the tab. */\n  @Input('aria-label') ariaLabel: string;\n\n  /**\n   * Reference to the element that the tab is labelled by.\n   * Will be cleared if `aria-label` is set at the same time.\n   */\n  @Input('aria-labelledby') ariaLabelledby: string;\n\n  /** Portal that will be the hosted content of the tab */\n  private _contentPortal: TemplatePortal | null = null;\n\n  /** @docs-private */\n  get content(): TemplatePortal | null {\n    return this._contentPortal;\n  }\n\n  /** Emits whenever the internal state of the tab changes. */\n  readonly _stateChanges = new Subject<void>();\n\n  /**\n   * The relatively indexed position where 0 represents the center, negative is left, and positive\n   * represents the right.\n   */\n  position: number | null = null;\n\n  /**\n   * The initial relatively index origin of the tab if it was created and selected after there\n   * was already a selected tab. Provides context of what position the tab should originate from.\n   */\n  origin: number | null = null;\n\n  /**\n   * Whether the tab is currently active.\n   */\n  isActive = false;\n\n  constructor(private _viewContainerRef: ViewContainerRef) {\n    super();\n  }\n\n  ngOnChanges(changes: SimpleChanges): void {\n    if (changes.hasOwnProperty('textLabel') || changes.hasOwnProperty('disabled')) {\n      this._stateChanges.next();\n    }\n  }\n\n  ngOnDestroy(): void {\n    this._stateChanges.complete();\n  }\n\n  ngOnInit(): void {\n    this._contentPortal = new TemplatePortal(\n        this._explicitContent || this._implicitContent, this._viewContainerRef);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/** Animations used by the Material tabs. */\nexport const matTabsAnimations: {\n  readonly translateTab: AnimationTriggerMetadata;\n} = {\n  /** Animation translates a tab along the X axis. */\n  translateTab: trigger('translateTab', [\n    // Note: transitions to `none` instead of 0, because some browsers might blur the content.\n    state('center, void, left-origin-center, right-origin-center', style({transform: 'none'})),\n\n    // If the tab is either on the left or right, we additionally add a `min-height` of 1px\n    // in order to ensure that the element has a height before its state changes. This is\n    // necessary because Chrome does seem to skip the transition in RTL mode if the element does\n    // not have a static height and is not rendered. See related issue: #9465\n    state('left', style({transform: 'translate3d(-100%, 0, 0)', minHeight: '1px'})),\n    state('right', style({transform: 'translate3d(100%, 0, 0)', minHeight: '1px'})),\n\n    transition('* => left, * => right, left => center, right => center',\n        animate('500ms cubic-bezier(0.35, 0, 0.25, 1)')),\n    transition('void => left-origin-center', [\n      style({transform: 'translate3d(-100%, 0, 0)'}),\n      animate('500ms cubic-bezier(0.35, 0, 0.25, 1)')\n    ]),\n    transition('void => right-origin-center', [\n      style({transform: 'translate3d(100%, 0, 0)'}),\n      animate('500ms cubic-bezier(0.35, 0, 0.25, 1)')\n    ])\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ChangeDetectorRef,\n  Input,\n  Inject,\n  Output,\n  EventEmitter,\n  OnDestroy,\n  OnInit,\n  ElementRef,\n  Directive,\n  Optional,\n  ViewEncapsulation,\n  ChangeDetectionStrategy,\n  ComponentFactoryResolver,\n  ViewContainerRef,\n  forwardRef,\n  ViewChild,\n} from '@angular/core';\nimport {AnimationEvent} from '@angular/animations';\nimport {TemplatePortal, CdkPortalOutlet, PortalHostDirective} from '@angular/cdk/portal';\nimport {Directionality, Direction} from '@angular/cdk/bidi';\nimport {Subscription} from 'rxjs';\nimport {matTabsAnimations} from './tabs-animations';\nimport {startWith} from 'rxjs/operators';\n\n/**\n * These position states are used internally as animation states for the tab body. Setting the\n * position state to left, right, or center will transition the tab body from its current\n * position to its respective state. If there is not current position (void, in the case of a new\n * tab body), then there will be no transition animation to its state.\n *\n * In the case of a new tab body that should immediately be centered with an animating transition,\n * then left-origin-center or right-origin-center can be used, which will use left or right as its\n * psuedo-prior state.\n */\nexport type MatTabBodyPositionState =\n    'left' | 'center' | 'right' | 'left-origin-center' | 'right-origin-center';\n\n/**\n * The origin state is an internally used state that is set on a new tab body indicating if it\n * began to the left or right of the prior selected index. For example, if the selected index was\n * set to 1, and a new tab is created and selected at index 2, then the tab body would have an\n * origin of right because its index was greater than the prior selected index.\n */\nexport type MatTabBodyOriginState = 'left' | 'right';\n\n/**\n * The portal host directive for the contents of the tab.\n * @docs-private\n */\n@Directive({\n  selector: '[matTabBodyHost]'\n})\nexport class MatTabBodyPortal extends CdkPortalOutlet implements OnInit, OnDestroy {\n  /** Subscription to events for when the tab body begins centering. */\n  private _centeringSub = Subscription.EMPTY;\n  /** Subscription to events for when the tab body finishes leaving from center position. */\n  private _leavingSub = Subscription.EMPTY;\n\n  constructor(\n    componentFactoryResolver: ComponentFactoryResolver,\n    viewContainerRef: ViewContainerRef,\n    @Inject(forwardRef(() => MatTabBody)) private _host: MatTabBody) {\n      super(componentFactoryResolver, viewContainerRef);\n  }\n\n  /** Set initial visibility or set up subscription for changing visibility. */\n  ngOnInit(): void {\n    super.ngOnInit();\n\n    this._centeringSub = this._host._beforeCentering\n      .pipe(startWith(this._host._isCenterPosition(this._host._position)))\n      .subscribe((isCentering: boolean) => {\n        if (isCentering && !this.hasAttached()) {\n          this.attach(this._host._content);\n        }\n      });\n\n    this._leavingSub = this._host._afterLeavingCenter.subscribe(() => {\n      this.detach();\n    });\n  }\n\n  /** Clean up centering subscription. */\n  ngOnDestroy(): void {\n    super.ngOnDestroy();\n    this._centeringSub.unsubscribe();\n    this._leavingSub.unsubscribe();\n  }\n}\n\n/**\n * Wrapper for the contents of a tab.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-tab-body',\n  templateUrl: 'tab-body.html',\n  styleUrls: ['tab-body.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  animations: [matTabsAnimations.translateTab],\n  host: {\n    'class': 'mat-tab-body',\n  },\n})\nexport class MatTabBody implements OnInit, OnDestroy {\n\n  /** Current position of the tab-body in the tab-group. Zero means that the tab is visible. */\n  private _positionIndex: number;\n\n  /** Subscription to the directionality change observable. */\n  private _dirChangeSubscription = Subscription.EMPTY;\n\n  /** Tab body position state. Used by the animation trigger for the current state. */\n  _position: MatTabBodyPositionState;\n\n  /** Event emitted when the tab begins to animate towards the center as the active tab. */\n  @Output() readonly _onCentering: EventEmitter<number> = new EventEmitter<number>();\n\n  /** Event emitted before the centering of the tab begins. */\n  @Output() readonly _beforeCentering: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n  /** Event emitted before the centering of the tab begins. */\n  @Output() readonly _afterLeavingCenter: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n  /** Event emitted when the tab completes its animation towards the center. */\n  @Output() readonly _onCentered: EventEmitter<void> = new EventEmitter<void>(true);\n\n   /** The portal host inside of this container into which the tab body content will be loaded. */\n  @ViewChild(PortalHostDirective) _portalHost: PortalHostDirective;\n\n  /** The tab body content to display. */\n  @Input('content') _content: TemplatePortal;\n\n  /** Position that will be used when the tab is immediately becoming visible after creation. */\n  @Input() origin: number;\n\n  /** The shifted index position of the tab body, where zero represents the active center tab. */\n  @Input()\n  set position(position: number) {\n    this._positionIndex = position;\n    this._computePositionAnimationState();\n  }\n\n  constructor(private _elementRef: ElementRef,\n              @Optional() private _dir: Directionality,\n              /**\n               * @breaking-change 7.0.0 changeDetectorRef to be made required.\n               */\n              changeDetectorRef?: ChangeDetectorRef) {\n\n    if (this._dir && changeDetectorRef) {\n      this._dirChangeSubscription = this._dir.change.subscribe(dir => {\n        this._computePositionAnimationState(dir);\n        changeDetectorRef.markForCheck();\n      });\n    }\n  }\n\n  /**\n   * After initialized, check if the content is centered and has an origin. If so, set the\n   * special position states that transition the tab from the left or right before centering.\n   */\n  ngOnInit() {\n    if (this._position == 'center' && this.origin != null) {\n      this._position = this._computePositionFromOrigin();\n    }\n  }\n\n  ngOnDestroy() {\n    this._dirChangeSubscription.unsubscribe();\n  }\n\n  _onTranslateTabStarted(e: AnimationEvent): void {\n    const isCentering = this._isCenterPosition(e.toState);\n    this._beforeCentering.emit(isCentering);\n    if (isCentering) {\n      this._onCentering.emit(this._elementRef.nativeElement.clientHeight);\n    }\n  }\n\n  _onTranslateTabComplete(e: AnimationEvent): void {\n    // If the transition to the center is complete, emit an event.\n    if (this._isCenterPosition(e.toState) && this._isCenterPosition(this._position)) {\n      this._onCentered.emit();\n    }\n\n    if (this._isCenterPosition(e.fromState) && !this._isCenterPosition(this._position)) {\n      this._afterLeavingCenter.emit();\n    }\n  }\n\n  /** The text direction of the containing app. */\n  _getLayoutDirection(): Direction {\n    return this._dir && this._dir.value === 'rtl' ? 'rtl' : 'ltr';\n  }\n\n  /** Whether the provided position state is considered center, regardless of origin. */\n  _isCenterPosition(position: MatTabBodyPositionState|string): boolean {\n    return position == 'center' ||\n        position == 'left-origin-center' ||\n        position == 'right-origin-center';\n  }\n\n  /** Computes the position state that will be used for the tab-body animation trigger. */\n  private _computePositionAnimationState(dir: Direction = this._getLayoutDirection()) {\n    if (this._positionIndex < 0) {\n      this._position = dir == 'ltr' ? 'left' : 'right';\n    } else if (this._positionIndex > 0) {\n      this._position = dir == 'ltr' ? 'right' : 'left';\n    } else {\n      this._position = 'center';\n    }\n  }\n\n  /**\n   * Computes the position state based on the specified origin position. This is used if the\n   * tab is becoming visible immediately after creation.\n   */\n  private _computePositionFromOrigin(): MatTabBodyPositionState {\n    const dir = this._getLayoutDirection();\n\n    if ((dir == 'ltr' && this.origin <= 0) || (dir == 'rtl' && this.origin > 0)) {\n      return 'left-origin-center';\n    }\n\n    return 'right-origin-center';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, ElementRef} from '@angular/core';\nimport {CanDisable, mixinDisabled} from '@angular/material/core';\n\n// Boilerplate for applying mixins to MatTabLabelWrapper.\n/** @docs-private */\nexport class MatTabLabelWrapperBase {}\nexport const _MatTabLabelWrapperMixinBase = mixinDisabled(MatTabLabelWrapperBase);\n\n/**\n * Used in the `mat-tab-group` view to display tab labels.\n * @docs-private\n */\n@Directive({\n  selector: '[matTabLabelWrapper]',\n  inputs: ['disabled'],\n  host: {\n    '[class.mat-tab-disabled]': 'disabled',\n    '[attr.aria-disabled]': '!!disabled',\n  }\n})\nexport class MatTabLabelWrapper extends _MatTabLabelWrapperMixinBase implements CanDisable {\n  constructor(public elementRef: ElementRef) {\n    super();\n  }\n\n  /** Sets focus on the wrapper element */\n  focus(): void {\n    this.elementRef.nativeElement.focus();\n  }\n\n  getOffsetLeft(): number {\n    return this.elementRef.nativeElement.offsetLeft;\n  }\n\n  getOffsetWidth(): number {\n    return this.elementRef.nativeElement.offsetWidth;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Direction, Directionality} from '@angular/cdk/bidi';\nimport {coerceNumberProperty} from '@angular/cdk/coercion';\nimport {END, ENTER, HOME, SPACE} from '@angular/cdk/keycodes';\nimport {ViewportRuler} from '@angular/cdk/scrolling';\nimport {\n  AfterContentChecked,\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  ElementRef,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  Optional,\n  Output,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {CanDisableRipple, mixinDisableRipple} from '@angular/material/core';\nimport {merge, of as observableOf, Subject} from 'rxjs';\nimport {takeUntil} from 'rxjs/operators';\nimport {MatInkBar} from './ink-bar';\nimport {MatTabLabelWrapper} from './tab-label-wrapper';\nimport {FocusKeyManager} from '@angular/cdk/a11y';\n\n\n/**\n * The directions that scrolling can go in when the header's tabs exceed the header width. 'After'\n * will scroll the header towards the end of the tabs list and 'before' will scroll towards the\n * beginning of the list.\n */\nexport type ScrollDirection = 'after' | 'before';\n\n/**\n * The distance in pixels that will be overshot when scrolling a tab label into view. This helps\n * provide a small affordance to the label next to it.\n */\nconst EXAGGERATED_OVERSCROLL = 60;\n\n// Boilerplate for applying mixins to MatTabHeader.\n/** @docs-private */\nexport class MatTabHeaderBase {}\nexport const _MatTabHeaderMixinBase = mixinDisableRipple(MatTabHeaderBase);\n\n/**\n * The header of the tab group which displays a list of all the tabs in the tab group. Includes\n * an ink bar that follows the currently selected tab. When the tabs list's width exceeds the\n * width of the header container, then arrows will be displayed to allow the user to scroll\n * left and right across the header.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-tab-header',\n  templateUrl: 'tab-header.html',\n  styleUrls: ['tab-header.css'],\n  inputs: ['disableRipple'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {\n    'class': 'mat-tab-header',\n    '[class.mat-tab-header-pagination-controls-enabled]': '_showPaginationControls',\n    '[class.mat-tab-header-rtl]': \"_getLayoutDirection() == 'rtl'\",\n  },\n})\nexport class MatTabHeader extends _MatTabHeaderMixinBase\n    implements AfterContentChecked, AfterContentInit, OnDestroy, CanDisableRipple {\n\n  @ContentChildren(MatTabLabelWrapper) _labelWrappers: QueryList<MatTabLabelWrapper>;\n  @ViewChild(MatInkBar) _inkBar: MatInkBar;\n  @ViewChild('tabListContainer') _tabListContainer: ElementRef;\n  @ViewChild('tabList') _tabList: ElementRef;\n\n  /** The distance in pixels that the tab labels should be translated to the left. */\n  private _scrollDistance = 0;\n\n  /** Whether the header should scroll to the selected index after the view has been checked. */\n  private _selectedIndexChanged = false;\n\n  /** Emits when the component is destroyed. */\n  private readonly _destroyed = new Subject<void>();\n\n  /** Whether the controls for pagination should be displayed */\n  _showPaginationControls = false;\n\n  /** Whether the tab list can be scrolled more towards the end of the tab label list. */\n  _disableScrollAfter = true;\n\n  /** Whether the tab list can be scrolled more towards the beginning of the tab label list. */\n  _disableScrollBefore = true;\n\n  /**\n   * The number of tab labels that are displayed on the header. When this changes, the header\n   * should re-evaluate the scroll position.\n   */\n  private _tabLabelCount: number;\n\n  /** Whether the scroll distance has changed and should be applied after the view is checked. */\n  private _scrollDistanceChanged: boolean;\n\n  /** Used to manage focus between the tabs. */\n  private _keyManager: FocusKeyManager<MatTabLabelWrapper>;\n\n  private _selectedIndex: number = 0;\n\n  /** The index of the active tab. */\n  @Input()\n  get selectedIndex(): number { return this._selectedIndex; }\n  set selectedIndex(value: number) {\n    value = coerceNumberProperty(value);\n    this._selectedIndexChanged = this._selectedIndex != value;\n    this._selectedIndex = value;\n\n    if (this._keyManager) {\n      this._keyManager.updateActiveItemIndex(value);\n    }\n  }\n\n  /** Event emitted when the option is selected. */\n  @Output() readonly selectFocusedIndex = new EventEmitter();\n\n  /** Event emitted when a label is focused. */\n  @Output() readonly indexFocused = new EventEmitter();\n\n  constructor(private _elementRef: ElementRef,\n              private _changeDetectorRef: ChangeDetectorRef,\n              private _viewportRuler: ViewportRuler,\n              @Optional() private _dir: Directionality) {\n    super();\n  }\n\n  ngAfterContentChecked(): void {\n    // If the number of tab labels have changed, check if scrolling should be enabled\n    if (this._tabLabelCount != this._labelWrappers.length) {\n      this._updatePagination();\n      this._tabLabelCount = this._labelWrappers.length;\n      this._changeDetectorRef.markForCheck();\n    }\n\n    // If the selected index has changed, scroll to the label and check if the scrolling controls\n    // should be disabled.\n    if (this._selectedIndexChanged) {\n      this._scrollToLabel(this._selectedIndex);\n      this._checkScrollingControls();\n      this._alignInkBarToSelectedTab();\n      this._selectedIndexChanged = false;\n      this._changeDetectorRef.markForCheck();\n    }\n\n    // If the scroll distance has been changed (tab selected, focused, scroll controls activated),\n    // then translate the header to reflect this.\n    if (this._scrollDistanceChanged) {\n      this._updateTabScrollPosition();\n      this._scrollDistanceChanged = false;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  _handleKeydown(event: KeyboardEvent) {\n    switch (event.keyCode) {\n      case HOME:\n        this._keyManager.setFirstItemActive();\n        event.preventDefault();\n        break;\n      case END:\n        this._keyManager.setLastItemActive();\n        event.preventDefault();\n        break;\n      case ENTER:\n      case SPACE:\n        this.selectFocusedIndex.emit(this.focusIndex);\n        event.preventDefault();\n        break;\n      default:\n        this._keyManager.onKeydown(event);\n    }\n  }\n\n  /**\n   * Aligns the ink bar to the selected tab on load.\n   */\n  ngAfterContentInit() {\n    const dirChange = this._dir ? this._dir.change : observableOf(null);\n    const resize = this._viewportRuler.change(150);\n    const realign = () => {\n      this._updatePagination();\n      this._alignInkBarToSelectedTab();\n    };\n\n    this._keyManager = new FocusKeyManager(this._labelWrappers)\n      .withHorizontalOrientation(this._getLayoutDirection())\n      .withWrap();\n\n    this._keyManager.updateActiveItem(0);\n\n    // Defer the first call in order to allow for slower browsers to lay out the elements.\n    // This helps in cases where the user lands directly on a page with paginated tabs.\n    typeof requestAnimationFrame !== 'undefined' ? requestAnimationFrame(realign) : realign();\n\n    // On dir change or window resize, realign the ink bar and update the orientation of\n    // the key manager if the direction has changed.\n    merge(dirChange, resize).pipe(takeUntil(this._destroyed)).subscribe(() => {\n      realign();\n      this._keyManager.withHorizontalOrientation(this._getLayoutDirection());\n    });\n\n    // If there is a change in the focus key manager we need to emit the `indexFocused`\n    // event in order to provide a public event that notifies about focus changes. Also we realign\n    // the tabs container by scrolling the new focused tab into the visible section.\n    this._keyManager.change.pipe(takeUntil(this._destroyed)).subscribe(newFocusIndex => {\n      this.indexFocused.emit(newFocusIndex);\n      this._setTabFocus(newFocusIndex);\n    });\n  }\n\n  ngOnDestroy() {\n    this._destroyed.next();\n    this._destroyed.complete();\n  }\n\n  /**\n   * Callback for when the MutationObserver detects that the content has changed.\n   */\n  _onContentChanges() {\n    this._updatePagination();\n    this._alignInkBarToSelectedTab();\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /**\n   * Updating the view whether pagination should be enabled or not\n   */\n  _updatePagination() {\n    this._checkPaginationEnabled();\n    this._checkScrollingControls();\n    this._updateTabScrollPosition();\n  }\n\n  /** Tracks which element has focus; used for keyboard navigation */\n  get focusIndex(): number {\n    return this._keyManager ? this._keyManager.activeItemIndex! : 0;\n  }\n\n  /** When the focus index is set, we must manually send focus to the correct label */\n  set focusIndex(value: number) {\n    if (!this._isValidIndex(value) || this.focusIndex === value || !this._keyManager) {\n      return;\n    }\n\n    this._keyManager.setActiveItem(value);\n  }\n\n  /**\n   * Determines if an index is valid.  If the tabs are not ready yet, we assume that the user is\n   * providing a valid index and return true.\n   */\n  _isValidIndex(index: number): boolean {\n    if (!this._labelWrappers) { return true; }\n\n    const tab = this._labelWrappers ? this._labelWrappers.toArray()[index] : null;\n    return !!tab && !tab.disabled;\n  }\n\n  /**\n   * Sets focus on the HTML element for the label wrapper and scrolls it into the view if\n   * scrolling is enabled.\n   */\n  _setTabFocus(tabIndex: number) {\n    if (this._showPaginationControls) {\n      this._scrollToLabel(tabIndex);\n    }\n\n    if (this._labelWrappers && this._labelWrappers.length) {\n      this._labelWrappers.toArray()[tabIndex].focus();\n\n      // Do not let the browser manage scrolling to focus the element, this will be handled\n      // by using translation. In LTR, the scroll left should be 0. In RTL, the scroll width\n      // should be the full width minus the offset width.\n      const containerEl = this._tabListContainer.nativeElement;\n      const dir = this._getLayoutDirection();\n\n      if (dir == 'ltr') {\n        containerEl.scrollLeft = 0;\n      } else {\n        containerEl.scrollLeft = containerEl.scrollWidth - containerEl.offsetWidth;\n      }\n    }\n  }\n\n  /** The layout direction of the containing app. */\n  _getLayoutDirection(): Direction {\n    return this._dir && this._dir.value === 'rtl' ? 'rtl' : 'ltr';\n  }\n\n  /** Performs the CSS transformation on the tab list that will cause the list to scroll. */\n  _updateTabScrollPosition() {\n    const scrollDistance = this.scrollDistance;\n    const translateX = this._getLayoutDirection() === 'ltr' ? -scrollDistance : scrollDistance;\n\n    // Don't use `translate3d` here because we don't want to create a new layer. A new layer\n    // seems to cause flickering and overflow in Internet Explorer. For example, the ink bar\n    // and ripples will exceed the boundaries of the visible tab bar.\n    // See: https://github.com/angular/material2/issues/10276\n    this._tabList.nativeElement.style.transform = `translateX(${translateX}px)`;\n  }\n\n  /** Sets the distance in pixels that the tab header should be transformed in the X-axis. */\n  get scrollDistance(): number { return this._scrollDistance; }\n  set scrollDistance(v: number) {\n    this._scrollDistance = Math.max(0, Math.min(this._getMaxScrollDistance(), v));\n\n    // Mark that the scroll distance has changed so that after the view is checked, the CSS\n    // transformation can move the header.\n    this._scrollDistanceChanged = true;\n    this._checkScrollingControls();\n  }\n\n  /**\n   * Moves the tab list in the 'before' or 'after' direction (towards the beginning of the list or\n   * the end of the list, respectively). The distance to scroll is computed to be a third of the\n   * length of the tab list view window.\n   *\n   * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n   * should be called sparingly.\n   */\n  _scrollHeader(scrollDir: ScrollDirection) {\n    const viewLength = this._tabListContainer.nativeElement.offsetWidth;\n\n    // Move the scroll distance one-third the length of the tab list's viewport.\n    this.scrollDistance += (scrollDir == 'before' ? -1 : 1) * viewLength / 3;\n  }\n\n  /**\n   * Moves the tab list such that the desired tab label (marked by index) is moved into view.\n   *\n   * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n   * should be called sparingly.\n   */\n  _scrollToLabel(labelIndex: number) {\n    const selectedLabel = this._labelWrappers ? this._labelWrappers.toArray()[labelIndex] : null;\n\n    if (!selectedLabel) { return; }\n\n    // The view length is the visible width of the tab labels.\n    const viewLength = this._tabListContainer.nativeElement.offsetWidth;\n\n    let labelBeforePos: number, labelAfterPos: number;\n    if (this._getLayoutDirection() == 'ltr') {\n      labelBeforePos = selectedLabel.getOffsetLeft();\n      labelAfterPos = labelBeforePos + selectedLabel.getOffsetWidth();\n    } else {\n      labelAfterPos = this._tabList.nativeElement.offsetWidth - selectedLabel.getOffsetLeft();\n      labelBeforePos = labelAfterPos - selectedLabel.getOffsetWidth();\n    }\n\n    const beforeVisiblePos = this.scrollDistance;\n    const afterVisiblePos = this.scrollDistance + viewLength;\n\n    if (labelBeforePos < beforeVisiblePos) {\n      // Scroll header to move label to the before direction\n      this.scrollDistance -= beforeVisiblePos - labelBeforePos + EXAGGERATED_OVERSCROLL;\n    } else if (labelAfterPos > afterVisiblePos) {\n      // Scroll header to move label to the after direction\n      this.scrollDistance += labelAfterPos - afterVisiblePos + EXAGGERATED_OVERSCROLL;\n    }\n  }\n\n  /**\n   * Evaluate whether the pagination controls should be displayed. If the scroll width of the\n   * tab list is wider than the size of the header container, then the pagination controls should\n   * be shown.\n   *\n   * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n   * should be called sparingly.\n   */\n  _checkPaginationEnabled() {\n    const isEnabled =\n        this._tabList.nativeElement.scrollWidth > this._elementRef.nativeElement.offsetWidth;\n\n    if (!isEnabled) {\n      this.scrollDistance = 0;\n    }\n\n    if (isEnabled !== this._showPaginationControls) {\n      this._changeDetectorRef.markForCheck();\n    }\n\n    this._showPaginationControls = isEnabled;\n  }\n\n  /**\n   * Evaluate whether the before and after controls should be enabled or disabled.\n   * If the header is at the beginning of the list (scroll distance is equal to 0) then disable the\n   * before button. If the header is at the end of the list (scroll distance is equal to the\n   * maximum distance we can scroll), then disable the after button.\n   *\n   * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n   * should be called sparingly.\n   */\n  _checkScrollingControls() {\n    // Check if the pagination arrows should be activated.\n    this._disableScrollBefore = this.scrollDistance == 0;\n    this._disableScrollAfter = this.scrollDistance == this._getMaxScrollDistance();\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /**\n   * Determines what is the maximum length in pixels that can be set for the scroll distance. This\n   * is equal to the difference in width between the tab list container and tab header container.\n   *\n   * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n   * should be called sparingly.\n   */\n  _getMaxScrollDistance(): number {\n    const lengthOfTabList = this._tabList.nativeElement.scrollWidth;\n    const viewLength = this._tabListContainer.nativeElement.offsetWidth;\n    return (lengthOfTabList - viewLength) || 0;\n  }\n\n  /** Tells the ink-bar to align itself to the current label wrapper */\n  _alignInkBarToSelectedTab(): void {\n    const selectedLabelWrapper = this._labelWrappers && this._labelWrappers.length ?\n        this._labelWrappers.toArray()[this.selectedIndex].elementRef.nativeElement :\n        null;\n\n    this._inkBar.alignToElement(selectedLabelWrapper);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty, coerceNumberProperty} from '@angular/cdk/coercion';\nimport {\n  AfterContentChecked,\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  ElementRef,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  Output,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {\n  CanColor,\n  CanDisableRipple,\n  mixinColor,\n  mixinDisableRipple,\n  ThemePalette\n} from '@angular/material/core';\nimport {merge, Subscription} from 'rxjs';\nimport {MatTab} from './tab';\nimport {MatTabHeader} from './tab-header';\n\n\n/** Used to generate unique ID's for each tab component */\nlet nextId = 0;\n\n/** A simple change event emitted on focus or selection changes. */\nexport class MatTabChangeEvent {\n  /** Index of the currently-selected tab. */\n  index: number;\n  /** Reference to the currently-selected tab. */\n  tab: MatTab;\n}\n\n/** Possible positions for the tab header. */\nexport type MatTabHeaderPosition = 'above' | 'below';\n\n// Boilerplate for applying mixins to MatTabGroup.\n/** @docs-private */\nexport class MatTabGroupBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatTabGroupMixinBase = mixinColor(mixinDisableRipple(MatTabGroupBase), 'primary');\n\n/**\n * Material design tab-group component.  Supports basic tab pairs (label + content) and includes\n * animated ink-bar, keyboard navigation, and screen reader.\n * See: https://material.io/design/components/tabs.html\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-tab-group',\n  exportAs: 'matTabGroup',\n  templateUrl: 'tab-group.html',\n  styleUrls: ['tab-group.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  inputs: ['color', 'disableRipple'],\n  host: {\n    'class': 'mat-tab-group',\n    '[class.mat-tab-group-dynamic-height]': 'dynamicHeight',\n    '[class.mat-tab-group-inverted-header]': 'headerPosition === \"below\"',\n  },\n})\nexport class MatTabGroup extends _MatTabGroupMixinBase implements AfterContentInit,\n    AfterContentChecked, OnDestroy, CanColor, CanDisableRipple {\n\n  @ContentChildren(MatTab) _tabs: QueryList<MatTab>;\n\n  @ViewChild('tabBodyWrapper') _tabBodyWrapper: ElementRef;\n\n  @ViewChild('tabHeader') _tabHeader: MatTabHeader;\n\n  /** The tab index that should be selected after the content has been checked. */\n  private _indexToSelect: number | null = 0;\n\n  /** Snapshot of the height of the tab body wrapper before another tab is activated. */\n  private _tabBodyWrapperHeight: number = 0;\n\n  /** Subscription to tabs being added/removed. */\n  private _tabsSubscription = Subscription.EMPTY;\n\n  /** Subscription to changes in the tab labels. */\n  private _tabLabelSubscription = Subscription.EMPTY;\n\n  /** Whether the tab group should grow to the size of the active tab. */\n  @Input()\n  get dynamicHeight(): boolean { return this._dynamicHeight; }\n  set dynamicHeight(value: boolean) { this._dynamicHeight = coerceBooleanProperty(value); }\n  private _dynamicHeight: boolean = false;\n\n  /** The index of the active tab. */\n  @Input()\n  get selectedIndex(): number | null { return this._selectedIndex; }\n  set selectedIndex(value: number | null) {\n    this._indexToSelect = coerceNumberProperty(value, null);\n  }\n  private _selectedIndex: number | null = null;\n\n  /** Position of the tab header. */\n  @Input() headerPosition: MatTabHeaderPosition = 'above';\n\n  /** Background color of the tab group. */\n  @Input()\n  get backgroundColor(): ThemePalette { return this._backgroundColor; }\n  set backgroundColor(value: ThemePalette) {\n    const nativeElement: HTMLElement = this._elementRef.nativeElement;\n\n    nativeElement.classList.remove(`mat-background-${this.backgroundColor}`);\n\n    if (value) {\n      nativeElement.classList.add(`mat-background-${value}`);\n    }\n\n    this._backgroundColor = value;\n  }\n  private _backgroundColor: ThemePalette;\n\n  /** Output to enable support for two-way binding on `[(selectedIndex)]` */\n  @Output() readonly selectedIndexChange: EventEmitter<number> = new EventEmitter<number>();\n\n  /** Event emitted when focus has changed within a tab group. */\n  @Output() readonly focusChange: EventEmitter<MatTabChangeEvent> =\n      new EventEmitter<MatTabChangeEvent>();\n\n  /** Event emitted when the body animation has completed */\n  @Output() readonly animationDone: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Event emitted when the tab selection has changed. */\n  @Output() readonly selectedTabChange: EventEmitter<MatTabChangeEvent> =\n      new EventEmitter<MatTabChangeEvent>(true);\n\n  private _groupId: number;\n\n  constructor(elementRef: ElementRef,\n              private _changeDetectorRef: ChangeDetectorRef) {\n    super(elementRef);\n    this._groupId = nextId++;\n  }\n\n  /**\n   * After the content is checked, this component knows what tabs have been defined\n   * and what the selected index should be. This is where we can know exactly what position\n   * each tab should be in according to the new selected index, and additionally we know how\n   * a new selected tab should transition in (from the left or right).\n   */\n  ngAfterContentChecked() {\n    // Don't clamp the `indexToSelect` immediately in the setter because it can happen that\n    // the amount of tabs changes before the actual change detection runs.\n    const indexToSelect = this._indexToSelect = this._clampTabIndex(this._indexToSelect);\n\n    // If there is a change in selected index, emit a change event. Should not trigger if\n    // the selected index has not yet been initialized.\n    if (this._selectedIndex != indexToSelect) {\n      const isFirstRun = this._selectedIndex == null;\n\n      if (!isFirstRun) {\n        this.selectedTabChange.emit(this._createChangeEvent(indexToSelect));\n      }\n\n      // Changing these values after change detection has run\n      // since the checked content may contain references to them.\n      Promise.resolve().then(() => {\n        this._tabs.forEach((tab, index) => tab.isActive = index === indexToSelect);\n\n        if (!isFirstRun) {\n          this.selectedIndexChange.emit(indexToSelect);\n        }\n      });\n    }\n\n    // Setup the position for each tab and optionally setup an origin on the next selected tab.\n    this._tabs.forEach((tab: MatTab, index: number) => {\n      tab.position = index - indexToSelect;\n\n      // If there is already a selected tab, then set up an origin for the next selected tab\n      // if it doesn't have one already.\n      if (this._selectedIndex != null && tab.position == 0 && !tab.origin) {\n        tab.origin = indexToSelect - this._selectedIndex;\n      }\n    });\n\n    if (this._selectedIndex !== indexToSelect) {\n      this._selectedIndex = indexToSelect;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  ngAfterContentInit() {\n    this._subscribeToTabLabels();\n\n    // Subscribe to changes in the amount of tabs, in order to be\n    // able to re-render the content as new tabs are added or removed.\n    this._tabsSubscription = this._tabs.changes.subscribe(() => {\n      const indexToSelect = this._clampTabIndex(this._indexToSelect);\n\n      // Maintain the previously-selected tab if a new tab is added or removed and there is no\n      // explicit change that selects a different tab.\n      if (indexToSelect === this._selectedIndex) {\n        const tabs = this._tabs.toArray();\n\n        for (let i = 0; i < tabs.length; i++) {\n          if (tabs[i].isActive) {\n            // Assign both to the `_indexToSelect` and `_selectedIndex` so we don't fire a changed\n            // event, otherwise the consumer may end up in an infinite loop in some edge cases like\n            // adding a tab within the `selectedIndexChange` event.\n            this._indexToSelect = this._selectedIndex = i;\n            break;\n          }\n        }\n      }\n\n      this._subscribeToTabLabels();\n      this._changeDetectorRef.markForCheck();\n    });\n  }\n\n  ngOnDestroy() {\n    this._tabsSubscription.unsubscribe();\n    this._tabLabelSubscription.unsubscribe();\n  }\n\n  /** Re-aligns the ink bar to the selected tab element. */\n  realignInkBar() {\n    if (this._tabHeader) {\n      this._tabHeader._alignInkBarToSelectedTab();\n    }\n  }\n\n  _focusChanged(index: number) {\n    this.focusChange.emit(this._createChangeEvent(index));\n  }\n\n  private _createChangeEvent(index: number): MatTabChangeEvent {\n    const event = new MatTabChangeEvent;\n    event.index = index;\n    if (this._tabs && this._tabs.length) {\n      event.tab = this._tabs.toArray()[index];\n    }\n    return event;\n  }\n\n  /**\n   * Subscribes to changes in the tab labels. This is needed, because the @Input for the label is\n   * on the MatTab component, whereas the data binding is inside the MatTabGroup. In order for the\n   * binding to be updated, we need to subscribe to changes in it and trigger change detection\n   * manually.\n   */\n  private _subscribeToTabLabels() {\n    if (this._tabLabelSubscription) {\n      this._tabLabelSubscription.unsubscribe();\n    }\n\n    this._tabLabelSubscription = merge(...this._tabs.map(tab => tab._stateChanges))\n      .subscribe(() => this._changeDetectorRef.markForCheck());\n  }\n\n  /** Clamps the given index to the bounds of 0 and the tabs length. */\n  private _clampTabIndex(index: number | null): number {\n    // Note the `|| 0`, which ensures that values like NaN can't get through\n    // and which would otherwise throw the component into an infinite loop\n    // (since Math.max(NaN, 0) === NaN).\n    return Math.min(this._tabs.length - 1, Math.max(index || 0, 0));\n  }\n\n  /** Returns a unique id for each tab label element */\n  _getTabLabelId(i: number): string {\n    return `mat-tab-label-${this._groupId}-${i}`;\n  }\n\n  /** Returns a unique id for each tab content element */\n  _getTabContentId(i: number): string {\n    return `mat-tab-content-${this._groupId}-${i}`;\n  }\n\n  /**\n   * Sets the height of the body wrapper to the height of the activating tab if dynamic\n   * height property is true.\n   */\n  _setTabBodyWrapperHeight(tabHeight: number): void {\n    if (!this._dynamicHeight || !this._tabBodyWrapperHeight) { return; }\n\n    const wrapper: HTMLElement = this._tabBodyWrapper.nativeElement;\n\n    wrapper.style.height = this._tabBodyWrapperHeight + 'px';\n\n    // This conditional forces the browser to paint the height so that\n    // the animation to the new height can have an origin.\n    if (this._tabBodyWrapper.nativeElement.offsetHeight) {\n      wrapper.style.height = tabHeight + 'px';\n    }\n  }\n\n  /** Removes the height of the tab body wrapper. */\n  _removeTabBodyWrapperHeight(): void {\n    this._tabBodyWrapperHeight = this._tabBodyWrapper.nativeElement.clientHeight;\n    this._tabBodyWrapper.nativeElement.style.height = '';\n    this.animationDone.emit();\n  }\n\n  /** Handle click events, setting new selected index if appropriate. */\n  _handleClick(tab: MatTab, tabHeader: MatTabHeader, idx: number) {\n    if (!tab.disabled) {\n      this.selectedIndex = tabHeader.focusIndex = idx;\n    }\n  }\n\n  /** Retrieves the tabindex for the tab. */\n  _getTabIndex(tab: MatTab, idx: number): number | null {\n    if (tab.disabled) {\n      return null;\n    }\n    return this.selectedIndex === idx ? 0 : -1;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {Directionality} from '@angular/cdk/bidi';\nimport {Platform} from '@angular/cdk/platform';\nimport {ViewportRuler} from '@angular/cdk/scrolling';\nimport {\n  AfterContentChecked,\n  AfterContentInit,\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  forwardRef,\n  Inject,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {\n  CanColor,\n  CanDisable,\n  CanDisableRipple,\n  HasTabIndex,\n  MAT_RIPPLE_GLOBAL_OPTIONS,\n  mixinColor,\n  mixinDisabled,\n  mixinDisableRipple,\n  mixinTabIndex, RippleConfig,\n  RippleGlobalOptions,\n  RippleRenderer,\n  RippleTarget,\n  ThemePalette,\n} from '@angular/material/core';\nimport {merge, of as observableOf, Subject} from 'rxjs';\nimport {takeUntil} from 'rxjs/operators';\nimport {MatInkBar} from '../ink-bar';\nimport {FocusMonitor} from '@angular/cdk/a11y';\n\n\n// Boilerplate for applying mixins to MatTabNav.\n/** @docs-private */\nexport class MatTabNavBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatTabNavMixinBase = mixinDisableRipple(mixinColor(MatTabNavBase, 'primary'));\n\n/**\n * Navigation component matching the styles of the tab group header.\n * Provides anchored navigation with animated ink bar.\n */\n@Component({\n  moduleId: module.id,\n  selector: '[mat-tab-nav-bar]',\n  exportAs: 'matTabNavBar, matTabNav',\n  inputs: ['color', 'disableRipple'],\n  templateUrl: 'tab-nav-bar.html',\n  styleUrls: ['tab-nav-bar.css'],\n  host: {'class': 'mat-tab-nav-bar'},\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatTabNav extends _MatTabNavMixinBase\n    implements AfterContentChecked, AfterContentInit, CanColor, CanDisableRipple, OnDestroy {\n\n  /** Subject that emits when the component has been destroyed. */\n  private readonly _onDestroy = new Subject<void>();\n\n  private _activeLinkChanged: boolean;\n  private _activeLinkElement: ElementRef | null;\n\n  @ViewChild(MatInkBar) _inkBar: MatInkBar;\n\n  /** Query list of all tab links of the tab navigation. */\n  @ContentChildren(forwardRef(() => MatTabLink), {descendants: true})\n  _tabLinks: QueryList<MatTabLink>;\n\n  /** Background color of the tab nav. */\n  @Input()\n  get backgroundColor(): ThemePalette { return this._backgroundColor; }\n  set backgroundColor(value: ThemePalette) {\n    const nativeElement: HTMLElement = this._elementRef.nativeElement;\n\n    nativeElement.classList.remove(`mat-background-${this.backgroundColor}`);\n\n    if (value) {\n      nativeElement.classList.add(`mat-background-${value}`);\n    }\n\n    this._backgroundColor = value;\n  }\n  private _backgroundColor: ThemePalette;\n\n  constructor(elementRef: ElementRef,\n              @Optional() private _dir: Directionality,\n              private _ngZone: NgZone,\n              private _changeDetectorRef: ChangeDetectorRef,\n              private _viewportRuler: ViewportRuler) {\n    super(elementRef);\n  }\n\n  /**\n   * Notifies the component that the active link has been changed.\n   * @breaking-change 7.0.0 `element` parameter to be removed.\n   */\n  updateActiveLink(element: ElementRef) {\n    // Note: keeping the `element` for backwards-compat, but isn't being used for anything.\n    // @breaking-change 7.0.0\n    this._activeLinkChanged = !!element;\n    this._changeDetectorRef.markForCheck();\n  }\n\n  ngAfterContentInit(): void {\n    this._ngZone.runOutsideAngular(() => {\n      const dirChange = this._dir ? this._dir.change : observableOf(null);\n\n      return merge(dirChange, this._viewportRuler.change(10))\n          .pipe(takeUntil(this._onDestroy))\n          .subscribe(() => this._alignInkBar());\n    });\n  }\n\n  /** Checks if the active link has been changed and, if so, will update the ink bar. */\n  ngAfterContentChecked(): void {\n    if (this._activeLinkChanged) {\n      const activeTab = this._tabLinks.find(tab => tab.active);\n\n      this._activeLinkElement = activeTab ? activeTab._elementRef : null;\n      this._alignInkBar();\n      this._activeLinkChanged = false;\n    }\n  }\n\n  ngOnDestroy() {\n    this._onDestroy.next();\n    this._onDestroy.complete();\n  }\n\n  /** Aligns the ink bar to the active link. */\n  _alignInkBar(): void {\n    if (this._activeLinkElement) {\n      this._inkBar.show();\n      this._inkBar.alignToElement(this._activeLinkElement.nativeElement);\n    } else {\n      this._inkBar.hide();\n    }\n  }\n}\n\n\n// Boilerplate for applying mixins to MatTabLink.\nexport class MatTabLinkBase {}\nexport const _MatTabLinkMixinBase =\n  mixinTabIndex(mixinDisableRipple(mixinDisabled(MatTabLinkBase)));\n\n/**\n * Link inside of a `mat-tab-nav-bar`.\n */\n@Directive({\n  selector: '[mat-tab-link], [matTabLink]',\n  exportAs: 'matTabLink',\n  inputs: ['disabled', 'disableRipple', 'tabIndex'],\n  host: {\n    'class': 'mat-tab-link',\n    '[attr.aria-current]': 'active',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.tabIndex]': 'tabIndex',\n    '[class.mat-tab-disabled]': 'disabled',\n    '[class.mat-tab-label-active]': 'active',\n    '(click)': '_handleClick($event)'\n  }\n})\nexport class MatTabLink extends _MatTabLinkMixinBase\n    implements OnDestroy, CanDisable, CanDisableRipple, HasTabIndex, RippleTarget {\n\n  /** Whether the tab link is active or not. */\n  protected _isActive: boolean = false;\n\n  /** Reference to the RippleRenderer for the tab-link. */\n  protected _tabLinkRipple: RippleRenderer;\n\n  /** Whether the ripples are globally disabled through the RippleGlobalOptions */\n  private _ripplesGloballyDisabled = false;\n\n  /** Whether the link is active. */\n  @Input()\n  get active(): boolean { return this._isActive; }\n  set active(value: boolean) {\n    if (value !== this._isActive) {\n      this._isActive = value;\n      this._tabNavBar.updateActiveLink(this._elementRef);\n    }\n  }\n\n  /**\n   * Ripple configuration for ripples that are launched on pointer down.\n   * @docs-private\n   */\n  rippleConfig: RippleConfig = {};\n\n  /**\n   * Whether ripples are disabled on interaction\n   * @docs-private\n   */\n  get rippleDisabled(): boolean {\n    return this.disabled || this.disableRipple || this._tabNavBar.disableRipple ||\n      this._ripplesGloballyDisabled;\n  }\n\n  constructor(private _tabNavBar: MatTabNav,\n              public _elementRef: ElementRef,\n              ngZone: NgZone,\n              platform: Platform,\n              @Optional() @Inject(MAT_RIPPLE_GLOBAL_OPTIONS) globalOptions: RippleGlobalOptions,\n              @Attribute('tabindex') tabIndex: string,\n              /**\n               * @deprecated\n               * @breaking-change 7.0.0 `_focusMonitor` parameter to be made required.\n               */\n              private _focusMonitor?: FocusMonitor) {\n    super();\n\n    this._tabLinkRipple = new RippleRenderer(this, ngZone, _elementRef, platform);\n    this._tabLinkRipple.setupTriggerEvents(_elementRef.nativeElement);\n\n    this.tabIndex = parseInt(tabIndex) || 0;\n\n    if (globalOptions) {\n      this._ripplesGloballyDisabled = !!globalOptions.disabled;\n      // TODO(paul): Once the speedFactor is removed, we no longer need to copy each single option.\n      this.rippleConfig = {\n        terminateOnPointerUp: globalOptions.terminateOnPointerUp,\n        speedFactor: globalOptions.baseSpeedFactor,\n        animation: globalOptions.animation,\n      };\n    }\n\n    if (_focusMonitor) {\n      _focusMonitor.monitor(_elementRef);\n    }\n  }\n\n  ngOnDestroy() {\n    this._tabLinkRipple._removeTriggerEvents();\n\n    if (this._focusMonitor) {\n      this._focusMonitor.stopMonitoring(this._elementRef);\n    }\n  }\n\n  /**\n   * Handles the click event, preventing default navigation if the tab link is disabled.\n   */\n  _handleClick(event: MouseEvent) {\n    if (this.disabled) {\n      event.preventDefault();\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ObserversModule} from '@angular/cdk/observers';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {MatInkBar} from './ink-bar';\nimport {MatTab} from './tab';\nimport {MatTabBody, MatTabBodyPortal} from './tab-body';\nimport {MatTabContent} from './tab-content';\nimport {MatTabGroup} from './tab-group';\nimport {MatTabHeader} from './tab-header';\nimport {MatTabLabel} from './tab-label';\nimport {MatTabLabelWrapper} from './tab-label-wrapper';\nimport {MatTabLink, MatTabNav} from './tab-nav-bar/tab-nav-bar';\nimport {A11yModule} from '@angular/cdk/a11y';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatCommonModule,\n    PortalModule,\n    MatRippleModule,\n    ObserversModule,\n    A11yModule,\n  ],\n  // Don't export all components because some are only to be used internally.\n  exports: [\n    MatCommonModule,\n    MatTabGroup,\n    MatTabLabel,\n    MatTab,\n    MatTabNav,\n    MatTabLink,\n    MatTabContent,\n  ],\n  declarations: [\n    MatTabGroup,\n    MatTabLabel,\n    MatTab,\n    MatInkBar,\n    MatTabLabelWrapper,\n    MatTabNav,\n    MatTabLink,\n    MatTabBody,\n    MatTabBodyPortal,\n    MatTabHeader,\n    MatTabContent,\n  ],\n})\nexport class MatTabsModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  keyframes,\n  AnimationTriggerMetadata, query, animateChild,\n} from '@angular/animations';\nimport {AnimationCurves, AnimationDurations} from '@angular/material/core';\n\nconst SORT_ANIMATION_TRANSITION = AnimationDurations.ENTERING + ' ' +\n                                  AnimationCurves.STANDARD_CURVE;\n\n/** Animations used by MatSort. */\nexport const matSortAnimations: {\n  readonly indicator: AnimationTriggerMetadata;\n  readonly leftPointer: AnimationTriggerMetadata;\n  readonly rightPointer: AnimationTriggerMetadata;\n  readonly arrowOpacity: AnimationTriggerMetadata;\n  readonly arrowPosition: AnimationTriggerMetadata;\n  readonly allowChildren: AnimationTriggerMetadata;\n} = {\n  /** Animation that moves the sort indicator. */\n  indicator: trigger('indicator', [\n    state('active-asc, asc', style({transform: 'translateY(0px)'})),\n    // 10px is the height of the sort indicator, minus the width of the pointers\n    state('active-desc, desc', style({transform: 'translateY(10px)'})),\n    transition('active-asc <=> active-desc', animate(SORT_ANIMATION_TRANSITION))\n  ]),\n\n  /** Animation that rotates the left pointer of the indicator based on the sorting direction. */\n  leftPointer: trigger('leftPointer', [\n    state('active-asc, asc', style({transform: 'rotate(-45deg)'})),\n    state('active-desc, desc', style({transform: 'rotate(45deg)'})),\n    transition('active-asc <=> active-desc', animate(SORT_ANIMATION_TRANSITION))\n  ]),\n\n  /** Animation that rotates the right pointer of the indicator based on the sorting direction. */\n  rightPointer: trigger('rightPointer', [\n    state('active-asc, asc', style({transform: 'rotate(45deg)'})),\n    state('active-desc, desc', style({transform: 'rotate(-45deg)'})),\n    transition('active-asc <=> active-desc', animate(SORT_ANIMATION_TRANSITION))\n  ]),\n\n  /** Animation that controls the arrow opacity. */\n  arrowOpacity: trigger('arrowOpacity', [\n    state('desc-to-active, asc-to-active, active', style({opacity: 1})),\n    state('desc-to-hint, asc-to-hint, hint', style({opacity: .54})),\n    state('hint-to-desc, active-to-desc, desc, hint-to-asc, active-to-asc, asc, void',\n        style({opacity: 0})),\n    // Transition between all states except for immediate transitions\n    transition('* => asc, * => desc, * => active, * => hint, * => void', animate('0ms')),\n    transition('* <=> *', animate(SORT_ANIMATION_TRANSITION)),\n  ]),\n\n  /**\n   * Animation for the translation of the arrow as a whole. States are separated into two\n   * groups: ones with animations and others that are immediate. Immediate states are asc, desc,\n   * peek, and active. The other states define a specific animation (source-to-destination)\n   * and are determined as a function of their prev user-perceived state and what the next state\n   * should be.\n   */\n  arrowPosition: trigger('arrowPosition', [\n    // Hidden Above => Hint Center\n    transition('* => desc-to-hint, * => desc-to-active',\n        animate(SORT_ANIMATION_TRANSITION, keyframes([\n          style({transform: 'translateY(-25%)'}),\n          style({transform: 'translateY(0)'})\n        ]))),\n    // Hint Center => Hidden Below\n    transition('* => hint-to-desc, * => active-to-desc',\n        animate(SORT_ANIMATION_TRANSITION, keyframes([\n          style({transform: 'translateY(0)'}),\n          style({transform: 'translateY(25%)'})\n        ]))),\n    // Hidden Below => Hint Center\n    transition('* => asc-to-hint, * => asc-to-active',\n        animate(SORT_ANIMATION_TRANSITION, keyframes([\n          style({transform: 'translateY(25%)'}),\n          style({transform: 'translateY(0)'})\n        ]))),\n    // Hint Center => Hidden Above\n    transition('* => hint-to-asc, * => active-to-asc',\n        animate(SORT_ANIMATION_TRANSITION, keyframes([\n          style({transform: 'translateY(0)'}),\n          style({transform: 'translateY(-25%)'})\n        ]))),\n    state('desc-to-hint, asc-to-hint, hint, desc-to-active, asc-to-active, active',\n        style({transform: 'translateY(0)'})),\n    state('hint-to-desc, active-to-desc, desc',\n        style({transform: 'translateY(-25%)'})),\n    state('hint-to-asc, active-to-asc, asc',\n        style({transform: 'translateY(25%)'})),\n  ]),\n\n  /** Necessary trigger that calls animate on children animations. */\n  allowChildren: trigger('allowChildren', [\n    transition('* <=> *', [\n      query('@*', animateChild(), {optional: true})\n    ])\n  ]),\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable, SkipSelf, Optional} from '@angular/core';\nimport {Subject} from 'rxjs';\n\n/**\n * To modify the labels and text displayed, create a new instance of MatSortHeaderIntl and\n * include it in a custom provider.\n */\n@Injectable({providedIn: 'root'})\nexport class MatSortHeaderIntl {\n  /**\n   * Stream that emits whenever the labels here are changed. Use this to notify\n   * components if the labels have changed after initialization.\n   */\n  readonly changes: Subject<void> = new Subject<void>();\n\n  /** ARIA label for the sorting button. */\n  sortButtonLabel = (id: string) => {\n    return `Change sorting for ${id}`;\n  }\n}\n/** @docs-private */\nexport function MAT_SORT_HEADER_INTL_PROVIDER_FACTORY(parentIntl: MatSortHeaderIntl) {\n  return parentIntl || new MatSortHeaderIntl();\n}\n\n/** @docs-private */\nexport const MAT_SORT_HEADER_INTL_PROVIDER = {\n  // If there is already an MatSortHeaderIntl available, use that. Otherwise, provide a new one.\n  provide: MatSortHeaderIntl,\n  deps: [[new Optional(), new SkipSelf(), MatSortHeaderIntl]],\n  useFactory: MAT_SORT_HEADER_INTL_PROVIDER_FACTORY\n};\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {CdkColumnDef} from '@angular/cdk/table';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  Input,\n  OnDestroy,\n  OnInit,\n  Optional,\n  ViewEncapsulation\n} from '@angular/core';\nimport {CanDisable, mixinDisabled} from '@angular/material/core';\nimport {merge, Subscription} from 'rxjs';\nimport {MatSort, MatSortable} from './sort';\nimport {matSortAnimations} from './sort-animations';\nimport {SortDirection} from './sort-direction';\nimport {getSortHeaderNotContainedWithinSortError} from './sort-errors';\nimport {MatSortHeaderIntl} from './sort-header-intl';\n\n\n// Boilerplate for applying mixins to the sort header.\n/** @docs-private */\nexport class MatSortHeaderBase {}\nexport const _MatSortHeaderMixinBase = mixinDisabled(MatSortHeaderBase);\n\n/**\n * Valid positions for the arrow to be in for its opacity and translation. If the state is a\n * sort direction, the position of the arrow will be above/below and opacity 0. If the state is\n * hint, the arrow will be in the center with a slight opacity. Active state means the arrow will\n * be fully opaque in the center.\n *\n * @docs-private\n */\nexport type ArrowViewState = SortDirection | 'hint' | 'active';\n\n/**\n * States describing the arrow's animated position (animating fromState to toState).\n * If the fromState is not defined, there will be no animated transition to the toState.\n * @docs-private\n */\nexport interface ArrowViewStateTransition {\n  fromState?: ArrowViewState;\n  toState: ArrowViewState;\n}\n\n/**\n * Applies sorting behavior (click to change sort) and styles to an element, including an\n * arrow to display the current sort direction.\n *\n * Must be provided with an id and contained within a parent MatSort directive.\n *\n * If used on header cells in a CdkTable, it will automatically default its id from its containing\n * column definition.\n */\n@Component({\n  moduleId: module.id,\n  selector: '[mat-sort-header]',\n  exportAs: 'matSortHeader',\n  templateUrl: 'sort-header.html',\n  styleUrls: ['sort-header.css'],\n  host: {\n    '(click)': '_handleClick()',\n    '(mouseenter)': '_setIndicatorHintVisible(true)',\n    '(longpress)': '_setIndicatorHintVisible(true)',\n    '(mouseleave)': '_setIndicatorHintVisible(false)',\n    '[attr.aria-sort]': '_getAriaSortAttribute()',\n    '[class.mat-sort-header-disabled]': '_isDisabled()',\n  },\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  inputs: ['disabled'],\n  animations: [\n    matSortAnimations.indicator,\n    matSortAnimations.leftPointer,\n    matSortAnimations.rightPointer,\n    matSortAnimations.arrowOpacity,\n    matSortAnimations.arrowPosition,\n    matSortAnimations.allowChildren,\n  ]\n})\nexport class MatSortHeader extends _MatSortHeaderMixinBase\n    implements CanDisable, MatSortable, OnDestroy, OnInit {\n  private _rerenderSubscription: Subscription;\n\n  /**\n   * Flag set to true when the indicator should be displayed while the sort is not active. Used to\n   * provide an affordance that the header is sortable by showing on focus and hover.\n   */\n  _showIndicatorHint: boolean = false;\n\n  /**\n   * The view transition state of the arrow (translation/ opacity) - indicates its `from` and `to`\n   * position through the animation. If animations are currently disabled, the fromState is removed\n   * so that there is no animation displayed.\n   */\n  _viewState: ArrowViewStateTransition;\n\n  /** The direction the arrow should be facing according to the current state. */\n  _arrowDirection: SortDirection = '';\n\n  /**\n   * Whether the view state animation should show the transition between the `from` and `to` states.\n   */\n  _disableViewStateAnimation = false;\n\n  /**\n   * ID of this sort header. If used within the context of a CdkColumnDef, this will default to\n   * the column's name.\n   */\n  @Input('mat-sort-header') id: string;\n\n  /** Sets the position of the arrow that displays when sorted. */\n  @Input() arrowPosition: 'before' | 'after' = 'after';\n\n  /** Overrides the sort start value of the containing MatSort for this MatSortable. */\n  @Input() start: 'asc' | 'desc';\n\n  /** Overrides the disable clear value of the containing MatSort for this MatSortable. */\n  @Input()\n  get disableClear(): boolean { return this._disableClear; }\n  set disableClear(v) { this._disableClear = coerceBooleanProperty(v); }\n  private _disableClear: boolean;\n\n  constructor(public _intl: MatSortHeaderIntl,\n              changeDetectorRef: ChangeDetectorRef,\n              @Optional() public _sort: MatSort,\n              @Optional() public _cdkColumnDef: CdkColumnDef) {\n\n    super();\n\n    if (!_sort) {\n      throw getSortHeaderNotContainedWithinSortError();\n    }\n\n    this._rerenderSubscription = merge(_sort.sortChange, _sort._stateChanges, _intl.changes)\n        .subscribe(() => {\n          if (this._isSorted()) {\n            this._updateArrowDirection();\n          }\n\n          // If this header was recently active and now no longer sorted, animate away the arrow.\n          if (!this._isSorted() && this._viewState && this._viewState.toState === 'active') {\n            this._disableViewStateAnimation = false;\n            this._setAnimationTransitionState({fromState: 'active', toState: this._arrowDirection});\n          }\n\n          changeDetectorRef.markForCheck();\n        });\n  }\n\n  ngOnInit() {\n    if (!this.id && this._cdkColumnDef) {\n      this.id = this._cdkColumnDef.name;\n    }\n\n    // Initialize the direction of the arrow and set the view state to be immediately that state.\n    this._updateArrowDirection();\n    this._setAnimationTransitionState(\n        {toState: this._isSorted() ? 'active' : this._arrowDirection});\n\n    this._sort.register(this);\n  }\n\n  ngOnDestroy() {\n    this._sort.deregister(this);\n    this._rerenderSubscription.unsubscribe();\n  }\n\n  /**\n   * Sets the \"hint\" state such that the arrow will be semi-transparently displayed as a hint to the\n   * user showing what the active sort will become. If set to false, the arrow will fade away.\n   */\n  _setIndicatorHintVisible(visible: boolean) {\n    // No-op if the sort header is disabled - should not make the hint visible.\n    if (this._isDisabled() && visible) { return; }\n\n    this._showIndicatorHint = visible;\n\n    if (!this._isSorted()) {\n      this._updateArrowDirection();\n      if (this._showIndicatorHint) {\n        this._setAnimationTransitionState({fromState: this._arrowDirection, toState: 'hint'});\n      } else {\n        this._setAnimationTransitionState({fromState: 'hint', toState: this._arrowDirection});\n      }\n    }\n  }\n\n  /**\n   * Sets the animation transition view state for the arrow's position and opacity. If the\n   * `disableViewStateAnimation` flag is set to true, the `fromState` will be ignored so that\n   * no animation appears.\n   */\n  _setAnimationTransitionState(viewState: ArrowViewStateTransition) {\n    this._viewState = viewState;\n\n    // If the animation for arrow position state (opacity/translation) should be disabled,\n    // remove the fromState so that it jumps right to the toState.\n    if (this._disableViewStateAnimation) {\n      this._viewState = {toState: viewState.toState};\n    }\n  }\n\n  /** Triggers the sort on this sort header and removes the indicator hint. */\n  _handleClick() {\n    if (this._isDisabled()) { return; }\n\n    this._sort.sort(this);\n\n    // Do not show the animation if the header was already shown in the right position.\n    if (this._viewState.toState === 'hint' || this._viewState.toState === 'active') {\n      this._disableViewStateAnimation = true;\n    }\n\n    // If the arrow is now sorted, animate the arrow into place. Otherwise, animate it away into\n    // the direction it is facing.\n    const viewState: ArrowViewStateTransition = this._isSorted() ?\n        {fromState: this._arrowDirection, toState: 'active'} :\n        {fromState: 'active', toState: this._arrowDirection};\n    this._setAnimationTransitionState(viewState);\n\n    this._showIndicatorHint = false;\n  }\n\n  /** Whether this MatSortHeader is currently sorted in either ascending or descending order. */\n  _isSorted() {\n    return this._sort.active == this.id &&\n        (this._sort.direction === 'asc' || this._sort.direction === 'desc');\n  }\n\n  /** Returns the animation state for the arrow direction (indicator and pointers). */\n  _getArrowDirectionState() {\n    return `${this._isSorted() ? 'active-' : ''}${this._arrowDirection}`;\n  }\n\n  /** Returns the arrow position state (opacity, translation). */\n  _getArrowViewState() {\n    const fromState = this._viewState.fromState;\n    return (fromState ? `${fromState}-to-` : '') + this._viewState.toState;\n  }\n\n  /**\n   * Updates the direction the arrow should be pointing. If it is not sorted, the arrow should be\n   * facing the start direction. Otherwise if it is sorted, the arrow should point in the currently\n   * active sorted direction. The reason this is updated through a function is because the direction\n   * should only be changed at specific times - when deactivated but the hint is displayed and when\n   * the sort is active and the direction changes. Otherwise the arrow's direction should linger\n   * in cases such as the sort becoming deactivated but we want to animate the arrow away while\n   * preserving its direction, even though the next sort direction is actually different and should\n   * only be changed once the arrow displays again (hint or activation).\n   */\n  _updateArrowDirection() {\n    this._arrowDirection = this._isSorted() ?\n        this._sort.direction :\n        (this.start || this._sort.start);\n  }\n\n  _isDisabled() {\n    return this._sort.disabled || this.disabled;\n  }\n\n  /**\n   * Gets the aria-sort attribute that should be applied to this sort header. If this header\n   * is not sorted, returns null so that the attribute is removed from the host element. Aria spec\n   * says that the aria-sort property should only be present on one header at a time, so removing\n   * ensures this is true.\n   */\n  _getAriaSortAttribute() {\n    if (!this._isSorted()) { return null; }\n\n    return this._sort.direction == 'asc' ? 'ascending' : 'descending';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatSortHeader} from './sort-header';\nimport {MatSort} from './sort';\nimport {MAT_SORT_HEADER_INTL_PROVIDER} from './sort-header-intl';\nimport {CommonModule} from '@angular/common';\n\n\n@NgModule({\n  imports: [CommonModule],\n  exports: [MatSort, MatSortHeader],\n  declarations: [MatSort, MatSortHeader],\n  providers: [MAT_SORT_HEADER_INTL_PROVIDER]\n})\nexport class MatSortModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive} from '@angular/core';\nimport {CdkStepLabel} from '@angular/cdk/stepper';\n\n// TODO(devversion): workaround for https://github.com/angular/material2/issues/12760\nexport const _CdkStepLabel = CdkStepLabel;\n\n@Directive({\n  selector: '[matStepLabel]',\n})\nexport class MatStepLabel extends _CdkStepLabel {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable} from '@angular/core';\nimport {Subject} from 'rxjs';\n\n\n/** Stepper data that is required for internationalization. */\n@Injectable({providedIn: 'root'})\nexport class MatStepperIntl {\n  /**\n   * Stream that emits whenever the labels here are changed. Use this to notify\n   * components if the labels have changed after initialization.\n   */\n  readonly changes: Subject<void> = new Subject<void>();\n\n  /** Label that is rendered below optional steps. */\n  optionalLabel: string = 'Optional';\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor} from '@angular/cdk/a11y';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  Input,\n  OnDestroy,\n  ViewEncapsulation,\n  TemplateRef,\n} from '@angular/core';\nimport {Subscription} from 'rxjs';\nimport {MatStepLabel} from './step-label';\nimport {MatStepperIntl} from './stepper-intl';\nimport {MatStepperIconContext} from './stepper-icon';\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-step-header',\n  templateUrl: 'step-header.html',\n  styleUrls: ['step-header.css'],\n  host: {\n    'class': 'mat-step-header',\n    'role': 'tab',\n  },\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatStepHeader implements OnDestroy {\n  private _intlSubscription: Subscription;\n\n  /** State of the given step. */\n  @Input() state: string;\n\n  /** Label of the given step. */\n  @Input() label: MatStepLabel | string;\n\n  /** Overrides for the header icons, passed in via the stepper. */\n  @Input() iconOverrides: {[key: string]: TemplateRef<MatStepperIconContext>};\n\n  /** Index of the given step. */\n  @Input() index: number;\n\n  /** Whether the given step is selected. */\n  @Input() selected: boolean;\n\n  /** Whether the given step label is active. */\n  @Input() active: boolean;\n\n  /** Whether the given step is optional. */\n  @Input() optional: boolean;\n\n  constructor(\n    public _intl: MatStepperIntl,\n    private _focusMonitor: FocusMonitor,\n    private _element: ElementRef,\n    changeDetectorRef: ChangeDetectorRef) {\n    _focusMonitor.monitor(_element, true);\n    this._intlSubscription = _intl.changes.subscribe(() => changeDetectorRef.markForCheck());\n  }\n\n  ngOnDestroy() {\n    this._intlSubscription.unsubscribe();\n    this._focusMonitor.stopMonitoring(this._element);\n  }\n\n  /** Returns string label of given step if it is a text label. */\n  _stringLabel(): string | null {\n    return this.label instanceof MatStepLabel ? null : this.label;\n  }\n\n  /** Returns MatStepLabel if the label of given step is a template label. */\n  _templateLabel(): MatStepLabel | null {\n    return this.label instanceof MatStepLabel ? this.label : null;\n  }\n\n  /** Returns the host HTML element. */\n  _getHostElement() {\n    return this._element.nativeElement;\n  }\n\n  /** Template context variables that are exposed to the `matStepperIcon` instances. */\n  _getIconContext(): MatStepperIconContext {\n    return {\n      index: this.index,\n      active: this.active,\n      optional: this.optional\n    };\n  }\n\n  focus() {\n    this._getHostElement().focus();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/** Animations used by the Material steppers. */\nexport const matStepperAnimations: {\n  readonly horizontalStepTransition: AnimationTriggerMetadata;\n  readonly verticalStepTransition: AnimationTriggerMetadata;\n} = {\n  /** Animation that transitions the step along the X axis in a horizontal stepper. */\n  horizontalStepTransition: trigger('stepTransition', [\n    state('previous', style({transform: 'translate3d(-100%, 0, 0)', visibility: 'hidden'})),\n    state('current', style({transform: 'none', visibility: 'visible'})),\n    state('next', style({transform: 'translate3d(100%, 0, 0)', visibility: 'hidden'})),\n    transition('* => *', animate('500ms cubic-bezier(0.35, 0, 0.25, 1)'))\n  ]),\n\n  /** Animation that transitions the step along the Y axis in a vertical stepper. */\n  verticalStepTransition: trigger('stepTransition', [\n    state('previous', style({height: '0px', visibility: 'hidden'})),\n    state('next', style({height: '0px', visibility: 'hidden'})),\n    state('current', style({height: '*', visibility: 'visible'})),\n    transition('* <=> current', animate('225ms cubic-bezier(0.4, 0.0, 0.2, 1)'))\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, Input, TemplateRef} from '@angular/core';\n\n/** Template context available to an attached `matStepperIcon`. */\nexport interface MatStepperIconContext {\n  /** Index of the step. */\n  index: number;\n  /** Whether the step is currently active. */\n  active: boolean;\n  /** Whether the step is optional. */\n  optional: boolean;\n}\n\n/**\n * Template to be used to override the icons inside the step header.\n */\n@Directive({\n  selector: 'ng-template[matStepperIcon]',\n})\nexport class MatStepperIcon {\n  /** Name of the icon to be overridden. */\n  @Input('matStepperIcon') name: 'edit' | 'done' | 'number';\n\n  constructor(public templateRef: TemplateRef<MatStepperIconContext>) {}\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directionality} from '@angular/cdk/bidi';\nimport {CdkStep, CdkStepper, StepContentPositionState} from '@angular/cdk/stepper';\nimport {AnimationEvent} from '@angular/animations';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Optional,\n  Output,\n  QueryList,\n  SkipSelf,\n  TemplateRef,\n  ViewChildren,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {FormControl, FormGroupDirective, NgForm} from '@angular/forms';\nimport {DOCUMENT} from '@angular/common';\nimport {ErrorStateMatcher} from '@angular/material/core';\nimport {MatStepHeader} from './step-header';\nimport {MatStepLabel} from './step-label';\nimport {takeUntil} from 'rxjs/operators';\nimport {matStepperAnimations} from './stepper-animations';\nimport {MatStepperIcon, MatStepperIconContext} from './stepper-icon';\n\n// TODO(devversion): workaround for https://github.com/angular/material2/issues/12760\nexport const _CdkStepper = CdkStepper;\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-step',\n  templateUrl: 'step.html',\n  providers: [{provide: ErrorStateMatcher, useExisting: MatStep}],\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matStep',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatStep extends CdkStep implements ErrorStateMatcher {\n  /** Content for step label given by `<ng-template matStepLabel>`. */\n  @ContentChild(MatStepLabel) stepLabel: MatStepLabel;\n\n  constructor(@Inject(forwardRef(() => MatStepper)) stepper: MatStepper,\n              @SkipSelf() private _errorStateMatcher: ErrorStateMatcher) {\n    super(stepper);\n  }\n\n  /** Custom error state matcher that additionally checks for validity of interacted form. */\n  isErrorState(control: FormControl | null, form: FormGroupDirective | NgForm | null): boolean {\n    const originalErrorState = this._errorStateMatcher.isErrorState(control, form);\n\n    // Custom error state checks for the validity of form that is not submitted or touched\n    // since user can trigger a form change by calling for another step without directly\n    // interacting with the current form.\n    const customErrorState = !!(control && control.invalid && this.interacted);\n\n    return originalErrorState || customErrorState;\n  }\n}\n\n\n@Directive({\n  selector: '[matStepper]'\n})\nexport class MatStepper extends _CdkStepper implements AfterContentInit {\n  /** The list of step headers of the steps in the stepper. */\n  @ViewChildren(MatStepHeader) _stepHeader: QueryList<MatStepHeader>;\n\n  /** Steps that the stepper holds. */\n  @ContentChildren(MatStep) _steps: QueryList<MatStep>;\n\n  /** Custom icon overrides passed in by the consumer. */\n  @ContentChildren(MatStepperIcon) _icons: QueryList<MatStepperIcon>;\n\n  /** Event emitted when the current step is done transitioning in. */\n  @Output() readonly animationDone: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Consumer-specified template-refs to be used to override the header icons. */\n  _iconOverrides: {[key: string]: TemplateRef<MatStepperIconContext>} = {};\n\n  ngAfterContentInit() {\n    const icons = this._icons.toArray();\n\n    ['edit', 'done', 'number'].forEach(name => {\n      const override = icons.find(icon => icon.name === name);\n\n      if (override) {\n        this._iconOverrides[name] = override.templateRef;\n      }\n    });\n\n    // Mark the component for change detection whenever the content children query changes\n    this._steps.changes.pipe(takeUntil(this._destroyed)).subscribe(() => this._stateChanged());\n  }\n\n  _animationDone(event: AnimationEvent) {\n    if ((event.toState as StepContentPositionState) === 'current') {\n      this.animationDone.emit();\n    }\n  }\n}\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-horizontal-stepper',\n  exportAs: 'matHorizontalStepper',\n  templateUrl: 'stepper-horizontal.html',\n  styleUrls: ['stepper.css'],\n  inputs: ['selectedIndex'],\n  host: {\n    'class': 'mat-stepper-horizontal',\n    'aria-orientation': 'horizontal',\n    'role': 'tablist',\n  },\n  animations: [matStepperAnimations.horizontalStepTransition],\n  providers: [{provide: MatStepper, useExisting: MatHorizontalStepper}],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatHorizontalStepper extends MatStepper { }\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-vertical-stepper',\n  exportAs: 'matVerticalStepper',\n  templateUrl: 'stepper-vertical.html',\n  styleUrls: ['stepper.css'],\n  inputs: ['selectedIndex'],\n  host: {\n    'class': 'mat-stepper-vertical',\n    'aria-orientation': 'vertical',\n    'role': 'tablist',\n  },\n  animations: [matStepperAnimations.verticalStepTransition],\n  providers: [{provide: MatStepper, useExisting: MatVerticalStepper}],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatVerticalStepper extends MatStepper {\n  constructor(\n    @Optional() dir: Directionality,\n    changeDetectorRef: ChangeDetectorRef,\n    // @breaking-change 8.0.0 `elementRef` and `_document` parameters to become required.\n    elementRef?: ElementRef<HTMLElement>,\n    @Inject(DOCUMENT) _document?: any) {\n    super(dir, changeDetectorRef, elementRef, _document);\n    this._orientation = 'vertical';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive} from '@angular/core';\nimport {CdkStepper, CdkStepperNext, CdkStepperPrevious} from '@angular/cdk/stepper';\nimport {MatStepper} from './stepper';\n\n// TODO(devversion): workaround for https://github.com/angular/material2/issues/12760\nexport const _CdkStepperNext = CdkStepperNext;\nexport const _CdkStepperPrevious = CdkStepperPrevious;\n\n/** Button that moves to the next step in a stepper workflow. */\n@Directive({\n  selector: 'button[matStepperNext]',\n  host: {\n    '(click)': '_stepper.next()',\n    '[type]': 'type',\n  },\n  inputs: ['type'],\n  providers: [{provide: CdkStepper, useExisting: MatStepper}]\n})\nexport class MatStepperNext extends _CdkStepperNext {}\n\n/** Button that moves to the previous step in a stepper workflow. */\n@Directive({\n  selector: 'button[matStepperPrevious]',\n  host: {\n    '(click)': '_stepper.previous()',\n    '[type]': 'type',\n  },\n  inputs: ['type'],\n  providers: [{provide: CdkStepper, useExisting: MatStepper}]\n})\nexport class MatStepperPrevious extends _CdkStepperPrevious {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {PortalModule} from '@angular/cdk/portal';\nimport {CdkStepperModule} from '@angular/cdk/stepper';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatButtonModule} from '@angular/material/button';\nimport {ErrorStateMatcher, MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {MatIconModule} from '@angular/material/icon';\nimport {MatStepHeader} from './step-header';\nimport {MatStepLabel} from './step-label';\nimport {MatHorizontalStepper, MatStep, MatStepper, MatVerticalStepper} from './stepper';\nimport {MatStepperNext, MatStepperPrevious} from './stepper-button';\nimport {MatStepperIcon} from './stepper-icon';\nimport {MatStepperIntl} from './stepper-intl';\n\n\n@NgModule({\n  imports: [\n    MatCommonModule,\n    CommonModule,\n    PortalModule,\n    MatButtonModule,\n    CdkStepperModule,\n    MatIconModule,\n    MatRippleModule,\n  ],\n  exports: [\n    MatCommonModule,\n    MatHorizontalStepper,\n    MatVerticalStepper,\n    MatStep,\n    MatStepLabel,\n    MatStepper,\n    MatStepperNext,\n    MatStepperPrevious,\n    MatStepHeader,\n    MatStepperIcon,\n  ],\n  declarations: [\n    MatHorizontalStepper,\n    MatVerticalStepper,\n    MatStep,\n    MatStepLabel,\n    MatStepper,\n    MatStepperNext,\n    MatStepperPrevious,\n    MatStepHeader,\n    MatStepperIcon,\n  ],\n  providers: [MatStepperIntl, ErrorStateMatcher],\n})\nexport class MatStepperModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CDK_TABLE_TEMPLATE, CdkTable} from '@angular/cdk/table';\nimport {ChangeDetectionStrategy, Component, ViewEncapsulation} from '@angular/core';\n\n// TODO(devversion): workaround for https://github.com/angular/material2/issues/12760\nexport const _CdkTable = CdkTable;\n\n/**\n * Wrapper for the CdkTable with Material design styles.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-table, table[mat-table]',\n  exportAs: 'matTable',\n  template: CDK_TABLE_TEMPLATE,\n  styleUrls: ['table.css'],\n  host: {\n    'class': 'mat-table',\n  },\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatTable<T> extends _CdkTable<T> {\n  /** Overrides the sticky CSS class set by the `CdkTable`. */\n  protected stickyCssClass = 'mat-table-sticky';\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, ElementRef, Input} from '@angular/core';\nimport {\n  CdkCell,\n  CdkCellDef,\n  CdkColumnDef, CdkFooterCell, CdkFooterCellDef,\n  CdkHeaderCell,\n  CdkHeaderCellDef,\n} from '@angular/cdk/table';\n\n// TODO(devversion): workaround for https://github.com/angular/material2/issues/12760\nexport const _CdkCellDef = CdkCellDef;\nexport const _CdkHeaderCellDef = CdkHeaderCellDef;\nexport const _CdkFooterCellDef = CdkFooterCellDef;\n\n/**\n * Cell definition for the mat-table.\n * Captures the template of a column's data row cell as well as cell-specific properties.\n */\n@Directive({\n  selector: '[matCellDef]',\n  providers: [{provide: CdkCellDef, useExisting: MatCellDef}]\n})\nexport class MatCellDef extends _CdkCellDef {}\n\n/**\n * Header cell definition for the mat-table.\n * Captures the template of a column's header cell and as well as cell-specific properties.\n */\n@Directive({\n  selector: '[matHeaderCellDef]',\n  providers: [{provide: CdkHeaderCellDef, useExisting: MatHeaderCellDef}]\n})\nexport class MatHeaderCellDef extends _CdkHeaderCellDef {}\n\n/**\n * Footer cell definition for the mat-table.\n * Captures the template of a column's footer cell and as well as cell-specific properties.\n */\n@Directive({\n  selector: '[matFooterCellDef]',\n  providers: [{provide: CdkFooterCellDef, useExisting: MatFooterCellDef}]\n})\nexport class MatFooterCellDef extends _CdkFooterCellDef {}\n\n/**\n * Column definition for the mat-table.\n * Defines a set of cells available for a table column.\n */\n@Directive({\n  selector: '[matColumnDef]',\n  providers: [{provide: CdkColumnDef, useExisting: MatColumnDef}],\n})\nexport class MatColumnDef extends CdkColumnDef {\n  /** Unique name for this column. */\n  @Input('matColumnDef') name: string;\n\n  /** Whether this column should be sticky positioned at the start of the row */\n  @Input() sticky: boolean;\n\n  /** Whether this column should be sticky positioned on the end of the row */\n  @Input() stickyEnd: boolean;\n}\n\n/** Header cell template container that adds the right classes and role. */\n@Directive({\n  selector: 'mat-header-cell, th[mat-header-cell]',\n  host: {\n    'class': 'mat-header-cell',\n    'role': 'columnheader',\n  },\n})\nexport class MatHeaderCell extends CdkHeaderCell {\n  constructor(columnDef: CdkColumnDef,\n              elementRef: ElementRef) {\n    super(columnDef, elementRef);\n    elementRef.nativeElement.classList.add(`mat-column-${columnDef.cssClassFriendlyName}`);\n  }\n}\n\n/** Footer cell template container that adds the right classes and role. */\n@Directive({\n  selector: 'mat-footer-cell, td[mat-footer-cell]',\n  host: {\n    'class': 'mat-footer-cell',\n    'role': 'gridcell',\n  },\n})\nexport class MatFooterCell extends CdkFooterCell {\n  constructor(columnDef: CdkColumnDef,\n              elementRef: ElementRef) {\n    super(columnDef, elementRef);\n    elementRef.nativeElement.classList.add(`mat-column-${columnDef.cssClassFriendlyName}`);\n  }\n}\n\n/** Cell template container that adds the right classes and role. */\n@Directive({\n  selector: 'mat-cell, td[mat-cell]',\n  host: {\n    'class': 'mat-cell',\n    'role': 'gridcell',\n  },\n})\nexport class MatCell extends CdkCell {\n  constructor(columnDef: CdkColumnDef,\n              elementRef: ElementRef) {\n    super(columnDef, elementRef);\n    elementRef.nativeElement.classList.add(`mat-column-${columnDef.cssClassFriendlyName}`);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  Directive,\n  ViewEncapsulation\n} from '@angular/core';\nimport {\n  CDK_ROW_TEMPLATE, CdkFooterRow, CdkFooterRowDef,\n  CdkHeaderRow,\n  CdkHeaderRowDef,\n  CdkRow,\n  CdkRowDef,\n} from '@angular/cdk/table';\n\n// TODO(devversion): workaround for https://github.com/angular/material2/issues/12760\nexport const _CdkHeaderRowDef = CdkHeaderRowDef;\nexport const _CdkFooterRowDef = CdkFooterRowDef;\nexport const _CdkRowDef = CdkRowDef;\n\n/**\n * Header row definition for the mat-table.\n * Captures the header row's template and other header properties such as the columns to display.\n */\n@Directive({\n  selector: '[matHeaderRowDef]',\n  providers: [{provide: CdkHeaderRowDef, useExisting: MatHeaderRowDef}],\n  inputs: ['columns: matHeaderRowDef', 'sticky: matHeaderRowDefSticky'],\n})\nexport class MatHeaderRowDef extends _CdkHeaderRowDef {}\n\n/**\n * Footer row definition for the mat-table.\n * Captures the footer row's template and other footer properties such as the columns to display.\n */\n@Directive({\n  selector: '[matFooterRowDef]',\n  providers: [{provide: CdkFooterRowDef, useExisting: MatFooterRowDef}],\n  inputs: ['columns: matFooterRowDef', 'sticky: matFooterRowDefSticky'],\n})\nexport class MatFooterRowDef extends _CdkFooterRowDef {}\n\n/**\n * Data row definition for the mat-table.\n * Captures the footer row's template and other footer properties such as the columns to display and\n * a when predicate that describes when this row should be used.\n */\n@Directive({\n  selector: '[matRowDef]',\n  providers: [{provide: CdkRowDef, useExisting: MatRowDef}],\n  inputs: ['columns: matRowDefColumns', 'when: matRowDefWhen'],\n})\nexport class MatRowDef<T> extends _CdkRowDef<T> {}\n\n/** Footer template container that contains the cell outlet. Adds the right class and role. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-header-row, tr[mat-header-row]',\n  template: CDK_ROW_TEMPLATE,\n  host: {\n    'class': 'mat-header-row',\n    'role': 'row',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matHeaderRow',\n  providers: [{provide: CdkHeaderRow, useExisting: MatHeaderRow}],\n})\nexport class MatHeaderRow extends CdkHeaderRow { }\n\n/** Footer template container that contains the cell outlet. Adds the right class and role. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-footer-row, tr[mat-footer-row]',\n  template: CDK_ROW_TEMPLATE,\n  host: {\n    'class': 'mat-footer-row',\n    'role': 'row',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matFooterRow',\n  providers: [{provide: CdkFooterRow, useExisting: MatFooterRow}],\n})\nexport class MatFooterRow extends CdkFooterRow { }\n\n/** Data row template container that contains the cell outlet. Adds the right class and role. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-row, tr[mat-row]',\n  template: CDK_ROW_TEMPLATE,\n  host: {\n    'class': 'mat-row',\n    'role': 'row',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matRow',\n  providers: [{provide: CdkRow, useExisting: MatRow}],\n})\nexport class MatRow extends CdkRow { }\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatTable} from './table';\nimport {CdkTableModule} from '@angular/cdk/table';\nimport {\n  MatCell,\n  MatCellDef,\n  MatColumnDef,\n  MatFooterCell,\n  MatFooterCellDef,\n  MatHeaderCell,\n  MatHeaderCellDef\n} from './cell';\nimport {\n  MatFooterRow,\n  MatFooterRowDef,\n  MatHeaderRow,\n  MatHeaderRowDef,\n  MatRow,\n  MatRowDef\n} from './row';\nimport {CommonModule} from '@angular/common';\nimport {MatCommonModule} from '@angular/material/core';\n\nconst EXPORTED_DECLARATIONS = [\n  // Table\n  MatTable,\n\n  // Template defs\n  MatHeaderCellDef,\n  MatHeaderRowDef,\n  MatColumnDef,\n  MatCellDef,\n  MatRowDef,\n  MatFooterCellDef,\n  MatFooterRowDef,\n\n  // Cell directives\n  MatHeaderCell,\n  MatCell,\n  MatFooterCell,\n\n  // Row directions\n  MatHeaderRow,\n  MatRow,\n  MatFooterRow,\n];\n\n@NgModule({\n  imports: [CdkTableModule, CommonModule, MatCommonModule],\n  exports: EXPORTED_DECLARATIONS,\n  declarations: EXPORTED_DECLARATIONS,\n})\nexport class MatTableModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {_isNumberValue} from '@angular/cdk/coercion';\nimport {DataSource} from '@angular/cdk/table';\nimport {\n  BehaviorSubject,\n  combineLatest,\n  merge,\n  Observable,\n  of as observableOf,\n  Subscription\n} from 'rxjs';\nimport {MatPaginator, PageEvent} from '@angular/material/paginator';\nimport {MatSort, Sort} from '@angular/material/sort';\nimport {map} from 'rxjs/operators';\n\n/**\n * Corresponds to `Number.MAX_SAFE_INTEGER`. Moved out into a variable here due to\n * flaky browser support and the value not being defined in Closure's typings.\n */\nconst MAX_SAFE_INTEGER = 9007199254740991;\n\n/**\n * Data source that accepts a client-side data array and includes native support of filtering,\n * sorting (using MatSort), and pagination (using MatPaginator).\n *\n * Allows for sort customization by overriding sortingDataAccessor, which defines how data\n * properties are accessed. Also allows for filter customization by overriding filterTermAccessor,\n * which defines how row data is converted to a string for filter matching.\n */\nexport class MatTableDataSource<T> extends DataSource<T> {\n  /** Stream that emits when a new data array is set on the data source. */\n  private readonly _data: BehaviorSubject<T[]>;\n\n  /** Stream emitting render data to the table (depends on ordered data changes). */\n  private readonly _renderData = new BehaviorSubject<T[]>([]);\n\n  /** Stream that emits when a new filter string is set on the data source. */\n  private readonly _filter = new BehaviorSubject<string>('');\n\n  /**\n   * Subscription to the changes that should trigger an update to the table's rendered rows, such\n   * as filtering, sorting, pagination, or base data changes.\n   */\n  _renderChangesSubscription = Subscription.EMPTY;\n\n  /**\n   * The filtered set of data that has been matched by the filter string, or all the data if there\n   * is no filter. Useful for knowing the set of data the table represents.\n   * For example, a 'selectAll()' function would likely want to select the set of filtered data\n   * shown to the user rather than all the data.\n   */\n  filteredData: T[];\n\n  /** Array of data that should be rendered by the table, where each object represents one row. */\n  get data() { return this._data.value; }\n  set data(data: T[]) { this._data.next(data); }\n\n  /**\n   * Filter term that should be used to filter out objects from the data array. To override how\n   * data objects match to this filter string, provide a custom function for filterPredicate.\n   */\n  get filter(): string { return this._filter.value; }\n  set filter(filter: string) { this._filter.next(filter); }\n\n  /**\n   * Instance of the MatSort directive used by the table to control its sorting. Sort changes\n   * emitted by the MatSort will trigger an update to the table's rendered data.\n   */\n  get sort(): MatSort | null { return this._sort; }\n  set sort(sort: MatSort|null) {\n    this._sort = sort;\n    this._updateChangeSubscription();\n  }\n  private _sort: MatSort|null;\n\n  /**\n   * Instance of the MatPaginator component used by the table to control what page of the data is\n   * displayed. Page changes emitted by the MatPaginator will trigger an update to the\n   * table's rendered data.\n   *\n   * Note that the data source uses the paginator's properties to calculate which page of data\n   * should be displayed. If the paginator receives its properties as template inputs,\n   * e.g. `[pageLength]=100` or `[pageIndex]=1`, then be sure that the paginator's view has been\n   * initialized before assigning it to this data source.\n   */\n  get paginator(): MatPaginator | null { return this._paginator; }\n  set paginator(paginator: MatPaginator|null) {\n    this._paginator = paginator;\n    this._updateChangeSubscription();\n  }\n  private _paginator: MatPaginator|null;\n\n  /**\n   * Data accessor function that is used for accessing data properties for sorting through\n   * the default sortData function.\n   * This default function assumes that the sort header IDs (which defaults to the column name)\n   * matches the data's properties (e.g. column Xyz represents data['Xyz']).\n   * May be set to a custom function for different behavior.\n   * @param data Data object that is being accessed.\n   * @param sortHeaderId The name of the column that represents the data.\n   */\n  sortingDataAccessor: ((data: T, sortHeaderId: string) => string|number) =\n      (data: T, sortHeaderId: string): string|number => {\n    const value: any = data[sortHeaderId];\n\n    if (_isNumberValue(value)) {\n      const numberValue = Number(value);\n\n      // Numbers beyond `MAX_SAFE_INTEGER` can't be compared reliably so we\n      // leave them as strings. For more info: https://goo.gl/y5vbSg\n      return numberValue < MAX_SAFE_INTEGER ? numberValue : value;\n    }\n\n    return value;\n  }\n\n  /**\n   * Gets a sorted copy of the data array based on the state of the MatSort. Called\n   * after changes are made to the filtered data or when sort changes are emitted from MatSort.\n   * By default, the function retrieves the active sort and its direction and compares data\n   * by retrieving data using the sortingDataAccessor. May be overridden for a custom implementation\n   * of data ordering.\n   * @param data The array of data that should be sorted.\n   * @param sort The connected MatSort that holds the current sort state.\n   */\n  sortData: ((data: T[], sort: MatSort) => T[]) = (data: T[], sort: MatSort): T[] => {\n    const active = sort.active;\n    const direction = sort.direction;\n    if (!active || direction == '') { return data; }\n\n    return data.sort((a, b) => {\n      let valueA = this.sortingDataAccessor(a, active);\n      let valueB = this.sortingDataAccessor(b, active);\n\n      // If both valueA and valueB exist (truthy), then compare the two. Otherwise, check if\n      // one value exists while the other doesn't. In this case, existing value should come first.\n      // This avoids inconsistent results when comparing values to undefined/null.\n      // If neither value exists, return 0 (equal).\n      let comparatorResult = 0;\n      if (valueA != null && valueB != null) {\n        // Check if one value is greater than the other; if equal, comparatorResult should remain 0.\n        if (valueA > valueB) {\n          comparatorResult = 1;\n        } else if (valueA < valueB) {\n          comparatorResult = -1;\n        }\n      } else if (valueA != null) {\n        comparatorResult = 1;\n      } else if (valueB != null) {\n        comparatorResult = -1;\n      }\n\n      return comparatorResult * (direction == 'asc' ? 1 : -1);\n    });\n  }\n\n  /**\n   * Checks if a data object matches the data source's filter string. By default, each data object\n   * is converted to a string of its properties and returns true if the filter has\n   * at least one occurrence in that string. By default, the filter string has its whitespace\n   * trimmed and the match is case-insensitive. May be overridden for a custom implementation of\n   * filter matching.\n   * @param data Data object used to check against the filter.\n   * @param filter Filter string that has been set on the data source.\n   * @returns Whether the filter matches against the data\n   */\n  filterPredicate: ((data: T, filter: string) => boolean) = (data: T, filter: string): boolean => {\n    // Transform the data into a lowercase string of all property values.\n    const accumulator = (currentTerm, key) => currentTerm + data[key];\n    const dataStr = Object.keys(data).reduce(accumulator, '').toLowerCase();\n\n    // Transform the filter by converting it to lowercase and removing whitespace.\n    const transformedFilter = filter.trim().toLowerCase();\n\n    return dataStr.indexOf(transformedFilter) != -1;\n  }\n\n  constructor(initialData: T[] = []) {\n    super();\n    this._data = new BehaviorSubject<T[]>(initialData);\n    this._updateChangeSubscription();\n  }\n\n  /**\n   * Subscribe to changes that should trigger an update to the table's rendered rows. When the\n   * changes occur, process the current state of the filter, sort, and pagination along with\n   * the provided base data and send it to the table for rendering.\n   */\n  _updateChangeSubscription() {\n    // Sorting and/or pagination should be watched if MatSort and/or MatPaginator are provided.\n    // The events should emit whenever the component emits a change or initializes, or if no\n    // component is provided, a stream with just a null event should be provided.\n    // The `sortChange` and `pageChange` acts as a signal to the combineLatests below so that the\n    // pipeline can progress to the next step. Note that the value from these streams are not used,\n    // they purely act as a signal to progress in the pipeline.\n    const sortChange: Observable<Sort|null> = this._sort ?\n        merge<Sort>(this._sort.sortChange, this._sort.initialized) :\n        observableOf(null);\n    const pageChange: Observable<PageEvent|null> = this._paginator ?\n        merge<PageEvent>(this._paginator.page, this._paginator.initialized) :\n        observableOf(null);\n\n    const dataStream = this._data;\n    // Watch for base data or filter changes to provide a filtered set of data.\n    const filteredData = combineLatest(dataStream, this._filter)\n      .pipe(map(([data]) => this._filterData(data)));\n    // Watch for filtered data or sort changes to provide an ordered set of data.\n    const orderedData = combineLatest(filteredData, sortChange)\n      .pipe(map(([data]) => this._orderData(data)));\n    // Watch for ordered data or page changes to provide a paged set of data.\n    const paginatedData = combineLatest(orderedData, pageChange)\n      .pipe(map(([data]) => this._pageData(data)));\n    // Watched for paged data changes and send the result to the table to render.\n    this._renderChangesSubscription.unsubscribe();\n    this._renderChangesSubscription = paginatedData.subscribe(data => this._renderData.next(data));\n  }\n\n  /**\n   * Returns a filtered data array where each filter object contains the filter string within\n   * the result of the filterTermAccessor function. If no filter is set, returns the data array\n   * as provided.\n   */\n  _filterData(data: T[]) {\n    // If there is a filter string, filter out data that does not contain it.\n    // Each data object is converted to a string using the function defined by filterTermAccessor.\n    // May be overridden for customization.\n    this.filteredData =\n        !this.filter ? data : data.filter(obj => this.filterPredicate(obj, this.filter));\n\n    if (this.paginator) { this._updatePaginator(this.filteredData.length); }\n\n    return this.filteredData;\n  }\n\n  /**\n   * Returns a sorted copy of the data if MatSort has a sort applied, otherwise just returns the\n   * data array as provided. Uses the default data accessor for data lookup, unless a\n   * sortDataAccessor function is defined.\n   */\n  _orderData(data: T[]): T[] {\n    // If there is no active sort or direction, return the data without trying to sort.\n    if (!this.sort) { return data; }\n\n    return this.sortData(data.slice(), this.sort);\n  }\n\n  /**\n   * Returns a paged splice of the provided data array according to the provided MatPaginator's page\n   * index and length. If there is no paginator provided, returns the data array as provided.\n   */\n  _pageData(data: T[]): T[] {\n    if (!this.paginator) { return data; }\n\n    const startIndex = this.paginator.pageIndex * this.paginator.pageSize;\n    return data.slice().splice(startIndex, this.paginator.pageSize);\n  }\n\n  /**\n   * Updates the paginator to reflect the length of the filtered data, and makes sure that the page\n   * index does not exceed the paginator's last page. Values are changed in a resolved promise to\n   * guard against making property changes within a round of change detection.\n   */\n  _updatePaginator(filteredDataLength: number) {\n    Promise.resolve().then(() => {\n      if (!this.paginator) { return; }\n\n      this.paginator.length = filteredDataLength;\n\n      // If the page index is set beyond the page, reduce it to the last page.\n      if (this.paginator.pageIndex > 0) {\n        const lastPageIndex = Math.ceil(this.paginator.length / this.paginator.pageSize) - 1 || 0;\n        this.paginator.pageIndex = Math.min(this.paginator.pageIndex, lastPageIndex);\n      }\n    });\n  }\n\n  /**\n   * Used by the MatTable. Called when it connects to the data source.\n   * @docs-private\n   */\n  connect() { return this._renderData; }\n\n  /**\n   * Used by the MatTable. Called when it is destroyed. No-op.\n   * @docs-private\n   */\n  disconnect() { }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor, FocusOrigin} from '@angular/cdk/a11y';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty, coerceNumberProperty} from '@angular/cdk/coercion';\nimport {\n  DOWN_ARROW,\n  END,\n  HOME,\n  LEFT_ARROW,\n  PAGE_DOWN,\n  PAGE_UP,\n  RIGHT_ARROW,\n  UP_ARROW,\n} from '@angular/cdk/keycodes';\nimport {\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Input,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Output,\n  ViewChild,\n  ViewEncapsulation,\n  Inject,\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {\n  CanColor,\n  CanDisable,\n  HammerInput,\n  HasTabIndex,\n  mixinColor,\n  mixinDisabled,\n  mixinTabIndex,\n} from '@angular/material/core';\nimport {Subscription} from 'rxjs';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\n\n/**\n * Visually, a 30px separation between tick marks looks best. This is very subjective but it is\n * the default separation we chose.\n */\nconst MIN_AUTO_TICK_SEPARATION = 30;\n\n/** The thumb gap size for a disabled slider. */\nconst DISABLED_THUMB_GAP = 7;\n\n/** The thumb gap size for a non-active slider at its minimum value. */\nconst MIN_VALUE_NONACTIVE_THUMB_GAP = 7;\n\n/** The thumb gap size for an active slider at its minimum value. */\nconst MIN_VALUE_ACTIVE_THUMB_GAP = 10;\n\n/**\n * Provider Expression that allows mat-slider to register as a ControlValueAccessor.\n * This allows it to support [(ngModel)] and [formControl].\n */\nexport const MAT_SLIDER_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatSlider),\n  multi: true\n};\n\n/** A simple change event emitted by the MatSlider component. */\nexport class MatSliderChange {\n  /** The MatSlider that changed. */\n  source: MatSlider;\n\n  /** The new value of the source slider. */\n  value: number | null;\n}\n\n\n// Boilerplate for applying mixins to MatSlider.\n/** @docs-private */\nexport class MatSliderBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatSliderMixinBase =\n  mixinTabIndex(mixinColor(mixinDisabled(MatSliderBase), 'accent'));\n\n/**\n * Allows users to select from a range of values by moving the slider thumb. It is similar in\n * behavior to the native `<input type=\"range\">` element.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-slider',\n  exportAs: 'matSlider',\n  providers: [MAT_SLIDER_VALUE_ACCESSOR],\n  host: {\n    '(focus)': '_onFocus()',\n    '(blur)': '_onBlur()',\n    '(click)': '_onClick($event)',\n    '(keydown)': '_onKeydown($event)',\n    '(keyup)': '_onKeyup()',\n    '(mouseenter)': '_onMouseenter()',\n    '(slide)': '_onSlide($event)',\n    '(slideend)': '_onSlideEnd()',\n    '(slidestart)': '_onSlideStart($event)',\n    'class': 'mat-slider',\n    'role': 'slider',\n    '[tabIndex]': 'tabIndex',\n    '[attr.aria-disabled]': 'disabled',\n    '[attr.aria-valuemax]': 'max',\n    '[attr.aria-valuemin]': 'min',\n    '[attr.aria-valuenow]': 'value',\n    '[attr.aria-orientation]': 'vertical ? \"vertical\" : \"horizontal\"',\n    '[class.mat-slider-disabled]': 'disabled',\n    '[class.mat-slider-has-ticks]': 'tickInterval',\n    '[class.mat-slider-horizontal]': '!vertical',\n    '[class.mat-slider-axis-inverted]': '_invertAxis',\n    '[class.mat-slider-sliding]': '_isSliding',\n    '[class.mat-slider-thumb-label-showing]': 'thumbLabel',\n    '[class.mat-slider-vertical]': 'vertical',\n    '[class.mat-slider-min-value]': '_isMinValue',\n    '[class.mat-slider-hide-last-tick]': 'disabled || _isMinValue && _thumbGap && _invertAxis',\n    '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"',\n  },\n  templateUrl: 'slider.html',\n  styleUrls: ['slider.css'],\n  inputs: ['disabled', 'color', 'tabIndex'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatSlider extends _MatSliderMixinBase\n    implements ControlValueAccessor, OnDestroy, CanDisable, CanColor, OnInit, HasTabIndex {\n  /** Whether the slider is inverted. */\n  @Input()\n  get invert(): boolean { return this._invert; }\n  set invert(value: boolean) {\n    this._invert = coerceBooleanProperty(value);\n  }\n  private _invert = false;\n\n  /** The maximum value that the slider can have. */\n  @Input()\n  get max(): number { return this._max; }\n  set max(v: number) {\n    this._max = coerceNumberProperty(v, this._max);\n    this._percent = this._calculatePercentage(this._value);\n\n    // Since this also modifies the percentage, we need to let the change detection know.\n    this._changeDetectorRef.markForCheck();\n  }\n  private _max: number = 100;\n\n  /** The minimum value that the slider can have. */\n  @Input()\n  get min(): number { return this._min; }\n  set min(v: number) {\n    this._min = coerceNumberProperty(v, this._min);\n\n    // If the value wasn't explicitly set by the user, set it to the min.\n    if (this._value === null) {\n      this.value = this._min;\n    }\n    this._percent = this._calculatePercentage(this._value);\n\n    // Since this also modifies the percentage, we need to let the change detection know.\n    this._changeDetectorRef.markForCheck();\n  }\n  private _min: number = 0;\n\n  /** The values at which the thumb will snap. */\n  @Input()\n  get step(): number { return this._step; }\n  set step(v: number) {\n    this._step = coerceNumberProperty(v, this._step);\n\n    if (this._step % 1 !== 0) {\n      this._roundToDecimal = this._step.toString().split('.').pop()!.length;\n    }\n\n    // Since this could modify the label, we need to notify the change detection.\n    this._changeDetectorRef.markForCheck();\n  }\n  private _step: number = 1;\n\n  /** Whether or not to show the thumb label. */\n  @Input()\n  get thumbLabel(): boolean { return this._thumbLabel; }\n  set thumbLabel(value: boolean) { this._thumbLabel = coerceBooleanProperty(value); }\n  private _thumbLabel: boolean = false;\n\n  /**\n   * How often to show ticks. Relative to the step so that a tick always appears on a step.\n   * Ex: Tick interval of 4 with a step of 3 will draw a tick every 4 steps (every 12 values).\n   */\n  @Input()\n  get tickInterval() { return this._tickInterval; }\n  set tickInterval(value: 'auto' | number) {\n    if (value === 'auto') {\n      this._tickInterval = 'auto';\n    } else if (typeof value === 'number' || typeof value === 'string') {\n      this._tickInterval = coerceNumberProperty(value, this._tickInterval as number);\n    } else {\n      this._tickInterval = 0;\n    }\n  }\n  private _tickInterval: 'auto' | number = 0;\n\n  /** Value of the slider. */\n  @Input()\n  get value(): number | null {\n    // If the value needs to be read and it is still uninitialized, initialize it to the min.\n    if (this._value === null) {\n      this.value = this._min;\n    }\n    return this._value;\n  }\n  set value(v: number | null) {\n    if (v !== this._value) {\n      let value = coerceNumberProperty(v);\n\n      // While incrementing by a decimal we can end up with values like 33.300000000000004.\n      // Truncate it to ensure that it matches the label and to make it easier to work with.\n      if (this._roundToDecimal) {\n        value = parseFloat(value.toFixed(this._roundToDecimal));\n      }\n\n      this._value = value;\n      this._percent = this._calculatePercentage(this._value);\n\n      // Since this also modifies the percentage, we need to let the change detection know.\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n  private _value: number | null = null;\n\n  /**\n   * Function that will be used to format the value before it is displayed\n   * in the thumb label. Can be used to format very large number in order\n   * for them to fit into the slider thumb.\n   */\n  @Input() displayWith: (value: number | null) => string | number;\n\n  /** Whether the slider is vertical. */\n  @Input()\n  get vertical(): boolean { return this._vertical; }\n  set vertical(value: boolean) {\n    this._vertical = coerceBooleanProperty(value);\n  }\n  private _vertical = false;\n\n  /** Event emitted when the slider value has changed. */\n  @Output() readonly change: EventEmitter<MatSliderChange> = new EventEmitter<MatSliderChange>();\n\n  /** Event emitted when the slider thumb moves. */\n  @Output() readonly input: EventEmitter<MatSliderChange> = new EventEmitter<MatSliderChange>();\n\n  /**\n   * Emits when the raw value of the slider changes. This is here primarily\n   * to facilitate the two-way binding for the `value` input.\n   * @docs-private\n   */\n  @Output() readonly valueChange: EventEmitter<number | null> = new EventEmitter<number | null>();\n\n  /** The value to be used for display purposes. */\n  get displayValue(): string | number {\n    if (this.displayWith) {\n      return this.displayWith(this.value);\n    }\n\n    // Note that this could be improved further by rounding something like 0.999 to 1 or\n    // 0.899 to 0.9, however it is very performance sensitive, because it gets called on\n    // every change detection cycle.\n    if (this._roundToDecimal && this.value && this.value % 1 !== 0) {\n      return this.value.toFixed(this._roundToDecimal);\n    }\n\n    return this.value || 0;\n  }\n\n  /** set focus to the host element */\n  focus() {\n    this._focusHostElement();\n  }\n\n  /** blur the host element */\n  blur() {\n    this._blurHostElement();\n  }\n\n  /** onTouch function registered via registerOnTouch (ControlValueAccessor). */\n  onTouched: () => any = () => {};\n\n  /** The percentage of the slider that coincides with the value. */\n  get percent(): number { return this._clamp(this._percent); }\n  private _percent: number = 0;\n\n  /**\n   * Whether or not the thumb is sliding.\n   * Used to determine if there should be a transition for the thumb and fill track.\n   */\n  _isSliding: boolean = false;\n\n  /**\n   * Whether or not the slider is active (clicked or sliding).\n   * Used to shrink and grow the thumb as according to the Material Design spec.\n   */\n  _isActive: boolean = false;\n\n  /**\n   * Whether the axis of the slider is inverted.\n   * (i.e. whether moving the thumb in the positive x or y direction decreases the slider's value).\n   */\n  get _invertAxis() {\n    // Standard non-inverted mode for a vertical slider should be dragging the thumb from bottom to\n    // top. However from a y-axis standpoint this is inverted.\n    return this.vertical ? !this.invert : this.invert;\n  }\n\n\n  /** Whether the slider is at its minimum value. */\n  get _isMinValue() {\n    return this.percent === 0;\n  }\n\n  /**\n   * The amount of space to leave between the slider thumb and the track fill & track background\n   * elements.\n   */\n  get _thumbGap() {\n    if (this.disabled) {\n      return DISABLED_THUMB_GAP;\n    }\n    if (this._isMinValue && !this.thumbLabel) {\n      return this._isActive ? MIN_VALUE_ACTIVE_THUMB_GAP : MIN_VALUE_NONACTIVE_THUMB_GAP;\n    }\n    return 0;\n  }\n\n  /** CSS styles for the track background element. */\n  get _trackBackgroundStyles(): { [key: string]: string } {\n    const axis = this.vertical ? 'Y' : 'X';\n    const scale = this.vertical ? `1, ${1 - this.percent}, 1` : `${1 - this.percent}, 1, 1`;\n    const sign = this._shouldInvertMouseCoords() ? '-' : '';\n\n    return {\n      // scale3d avoids some rendering issues in Chrome. See #12071.\n      transform: `translate${axis}(${sign}${this._thumbGap}px) scale3d(${scale})`\n    };\n  }\n\n  /** CSS styles for the track fill element. */\n  get _trackFillStyles(): { [key: string]: string } {\n    const axis = this.vertical ? 'Y' : 'X';\n    const scale = this.vertical ? `1, ${this.percent}, 1` : `${this.percent}, 1, 1`;\n    const sign = this._shouldInvertMouseCoords() ? '' : '-';\n\n    return {\n      // scale3d avoids some rendering issues in Chrome. See #12071.\n      transform: `translate${axis}(${sign}${this._thumbGap}px) scale3d(${scale})`\n    };\n  }\n\n  /** CSS styles for the ticks container element. */\n  get _ticksContainerStyles(): { [key: string]: string } {\n    let axis = this.vertical ? 'Y' : 'X';\n    // For a horizontal slider in RTL languages we push the ticks container off the left edge\n    // instead of the right edge to avoid causing a horizontal scrollbar to appear.\n    let sign = !this.vertical && this._getDirection() == 'rtl' ? '' : '-';\n    let offset = this._tickIntervalPercent / 2 * 100;\n    return {\n      'transform': `translate${axis}(${sign}${offset}%)`\n    };\n  }\n\n  /** CSS styles for the ticks element. */\n  get _ticksStyles(): { [key: string]: string } {\n    let tickSize = this._tickIntervalPercent * 100;\n    let backgroundSize = this.vertical ? `2px ${tickSize}%` : `${tickSize}% 2px`;\n    let axis = this.vertical ? 'Y' : 'X';\n    // Depending on the direction we pushed the ticks container, push the ticks the opposite\n    // direction to re-center them but clip off the end edge. In RTL languages we need to flip the\n    // ticks 180 degrees so we're really cutting off the end edge abd not the start.\n    let sign = !this.vertical && this._getDirection() == 'rtl' ? '-' : '';\n    let rotate = !this.vertical && this._getDirection() == 'rtl' ? ' rotate(180deg)' : '';\n    let styles: { [key: string]: string } = {\n      'backgroundSize': backgroundSize,\n      // Without translateZ ticks sometimes jitter as the slider moves on Chrome & Firefox.\n      'transform': `translateZ(0) translate${axis}(${sign}${tickSize / 2}%)${rotate}`\n    };\n\n    if (this._isMinValue && this._thumbGap) {\n      let side = this.vertical ?\n          (this._invertAxis ? 'Bottom' : 'Top') :\n          (this._invertAxis ? 'Right' : 'Left');\n      styles[`padding${side}`] = `${this._thumbGap}px`;\n    }\n\n    return styles;\n  }\n\n  get _thumbContainerStyles(): { [key: string]: string } {\n    let axis = this.vertical ? 'Y' : 'X';\n    // For a horizontal slider in RTL languages we push the thumb container off the left edge\n    // instead of the right edge to avoid causing a horizontal scrollbar to appear.\n    let invertOffset =\n        (this._getDirection() == 'rtl' && !this.vertical) ? !this._invertAxis : this._invertAxis;\n    let offset = (invertOffset ? this.percent : 1 - this.percent) * 100;\n    return {\n      'transform': `translate${axis}(-${offset}%)`\n    };\n  }\n\n  /** The size of a tick interval as a percentage of the size of the track. */\n  private _tickIntervalPercent: number = 0;\n\n  /** The dimensions of the slider. */\n  private _sliderDimensions: ClientRect | null = null;\n\n  private _controlValueAccessorChangeFn: (value: any) => void = () => {};\n\n  /** Decimal places to round to, based on the step amount. */\n  private _roundToDecimal: number;\n\n  /** Subscription to the Directionality change EventEmitter. */\n  private _dirChangeSubscription = Subscription.EMPTY;\n\n  /** The value of the slider when the slide start event fires. */\n  private _valueOnSlideStart: number | null;\n\n  /** Reference to the inner slider wrapper element. */\n  @ViewChild('sliderWrapper') private _sliderWrapper: ElementRef;\n\n  /**\n   * Whether mouse events should be converted to a slider position by calculating their distance\n   * from the right or bottom edge of the slider as opposed to the top or left.\n   */\n  private _shouldInvertMouseCoords() {\n    return (this._getDirection() == 'rtl' && !this.vertical) ? !this._invertAxis : this._invertAxis;\n  }\n\n  /** The language direction for this slider element. */\n  private _getDirection() {\n    return (this._dir && this._dir.value == 'rtl') ? 'rtl' : 'ltr';\n  }\n\n  constructor(elementRef: ElementRef,\n              private _focusMonitor: FocusMonitor,\n              private _changeDetectorRef: ChangeDetectorRef,\n              @Optional() private _dir: Directionality,\n              @Attribute('tabindex') tabIndex: string,\n              // @breaking-change 7.0.0 `_animationMode` parameter to be made required.\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode?: string) {\n    super(elementRef);\n\n    this.tabIndex = parseInt(tabIndex) || 0;\n  }\n\n  ngOnInit() {\n    this._focusMonitor\n        .monitor(this._elementRef, true)\n        .subscribe((origin: FocusOrigin) => {\n          this._isActive = !!origin && origin !== 'keyboard';\n          this._changeDetectorRef.detectChanges();\n        });\n    if (this._dir) {\n      this._dirChangeSubscription = this._dir.change.subscribe(() => {\n        this._changeDetectorRef.markForCheck();\n      });\n    }\n  }\n\n  ngOnDestroy() {\n    this._focusMonitor.stopMonitoring(this._elementRef);\n    this._dirChangeSubscription.unsubscribe();\n  }\n\n  _onMouseenter() {\n    if (this.disabled) {\n      return;\n    }\n\n    // We save the dimensions of the slider here so we can use them to update the spacing of the\n    // ticks and determine where on the slider click and slide events happen.\n    this._sliderDimensions = this._getSliderDimensions();\n    this._updateTickIntervalPercent();\n  }\n\n  _onClick(event: MouseEvent) {\n    if (this.disabled) {\n      return;\n    }\n\n    let oldValue = this.value;\n    this._isSliding = false;\n    this._focusHostElement();\n    this._updateValueFromPosition({x: event.clientX, y: event.clientY});\n\n    // Emit a change and input event if the value changed.\n    if (oldValue != this.value) {\n      this._emitInputEvent();\n      this._emitChangeEvent();\n    }\n  }\n\n  _onSlide(event: HammerInput) {\n    if (this.disabled) {\n      return;\n    }\n\n    // The slide start event sometimes fails to fire on iOS, so if we're not already in the sliding\n    // state, call the slide start handler manually.\n    if (!this._isSliding) {\n      this._onSlideStart(null);\n    }\n\n    // Prevent the slide from selecting anything else.\n    event.preventDefault();\n\n    let oldValue = this.value;\n    this._updateValueFromPosition({x: event.center.x, y: event.center.y});\n\n    // Native range elements always emit `input` events when the value changed while sliding.\n    if (oldValue != this.value) {\n      this._emitInputEvent();\n    }\n  }\n\n  _onSlideStart(event: HammerInput | null) {\n    if (this.disabled || this._isSliding) {\n      return;\n    }\n\n    // Simulate mouseenter in case this is a mobile device.\n    this._onMouseenter();\n\n    this._isSliding = true;\n    this._focusHostElement();\n    this._valueOnSlideStart = this.value;\n\n    if (event) {\n      this._updateValueFromPosition({x: event.center.x, y: event.center.y});\n      event.preventDefault();\n    }\n  }\n\n  _onSlideEnd() {\n    this._isSliding = false;\n\n    if (this._valueOnSlideStart != this.value && !this.disabled) {\n      this._emitChangeEvent();\n    }\n    this._valueOnSlideStart = null;\n  }\n\n  _onFocus() {\n    // We save the dimensions of the slider here so we can use them to update the spacing of the\n    // ticks and determine where on the slider click and slide events happen.\n    this._sliderDimensions = this._getSliderDimensions();\n    this._updateTickIntervalPercent();\n  }\n\n  _onBlur() {\n    this.onTouched();\n  }\n\n  _onKeydown(event: KeyboardEvent) {\n    if (this.disabled) { return; }\n\n    let oldValue = this.value;\n\n    switch (event.keyCode) {\n      case PAGE_UP:\n        this._increment(10);\n        break;\n      case PAGE_DOWN:\n        this._increment(-10);\n        break;\n      case END:\n        this.value = this.max;\n        break;\n      case HOME:\n        this.value = this.min;\n        break;\n      case LEFT_ARROW:\n        // NOTE: For a sighted user it would make more sense that when they press an arrow key on an\n        // inverted slider the thumb moves in that direction. However for a blind user, nothing\n        // about the slider indicates that it is inverted. They will expect left to be decrement,\n        // regardless of how it appears on the screen. For speakers ofRTL languages, they probably\n        // expect left to mean increment. Therefore we flip the meaning of the side arrow keys for\n        // RTL. For inverted sliders we prefer a good a11y experience to having it \"look right\" for\n        // sighted users, therefore we do not swap the meaning.\n        this._increment(this._getDirection() == 'rtl' ? 1 : -1);\n        break;\n      case UP_ARROW:\n        this._increment(1);\n        break;\n      case RIGHT_ARROW:\n        // See comment on LEFT_ARROW about the conditions under which we flip the meaning.\n        this._increment(this._getDirection() == 'rtl' ? -1 : 1);\n        break;\n      case DOWN_ARROW:\n        this._increment(-1);\n        break;\n      default:\n        // Return if the key is not one that we explicitly handle to avoid calling preventDefault on\n        // it.\n        return;\n    }\n\n    if (oldValue != this.value) {\n      this._emitInputEvent();\n      this._emitChangeEvent();\n    }\n\n    this._isSliding = true;\n    event.preventDefault();\n  }\n\n  _onKeyup() {\n    this._isSliding = false;\n  }\n\n  /** Increments the slider by the given number of steps (negative number decrements). */\n  private _increment(numSteps: number) {\n    this.value = this._clamp((this.value || 0) + this.step * numSteps, this.min, this.max);\n  }\n\n  /** Calculate the new value from the new physical location. The value will always be snapped. */\n  private _updateValueFromPosition(pos: {x: number, y: number}) {\n    if (!this._sliderDimensions) {\n      return;\n    }\n\n    let offset = this.vertical ? this._sliderDimensions.top : this._sliderDimensions.left;\n    let size = this.vertical ? this._sliderDimensions.height : this._sliderDimensions.width;\n    let posComponent = this.vertical ? pos.y : pos.x;\n\n    // The exact value is calculated from the event and used to find the closest snap value.\n    let percent = this._clamp((posComponent - offset) / size);\n\n    if (this._shouldInvertMouseCoords()) {\n      percent = 1 - percent;\n    }\n\n    // Since the steps may not divide cleanly into the max value, if the user\n    // slid to 0 or 100 percent, we jump to the min/max value. This approach\n    // is slightly more intuitive than using `Math.ceil` below, because it\n    // follows the user's pointer closer.\n    if (percent === 0) {\n      this.value = this.min;\n    } else if (percent === 1) {\n      this.value = this.max;\n    } else {\n      const exactValue = this._calculateValue(percent);\n\n      // This calculation finds the closest step by finding the closest\n      // whole number divisible by the step relative to the min.\n      const closestValue = Math.round((exactValue - this.min) / this.step) * this.step + this.min;\n\n      // The value needs to snap to the min and max.\n      this.value = this._clamp(closestValue, this.min, this.max);\n    }\n  }\n\n  /** Emits a change event if the current value is different from the last emitted value. */\n  private _emitChangeEvent() {\n    this._controlValueAccessorChangeFn(this.value);\n    this.valueChange.emit(this.value);\n    this.change.emit(this._createChangeEvent());\n  }\n\n  /** Emits an input event when the current value is different from the last emitted value. */\n  private _emitInputEvent() {\n    this.input.emit(this._createChangeEvent());\n  }\n\n  /** Updates the amount of space between ticks as a percentage of the width of the slider. */\n  private _updateTickIntervalPercent() {\n    if (!this.tickInterval || !this._sliderDimensions) {\n      return;\n    }\n\n    if (this.tickInterval == 'auto') {\n      let trackSize = this.vertical ? this._sliderDimensions.height : this._sliderDimensions.width;\n      let pixelsPerStep = trackSize * this.step / (this.max - this.min);\n      let stepsPerTick = Math.ceil(MIN_AUTO_TICK_SEPARATION / pixelsPerStep);\n      let pixelsPerTick = stepsPerTick * this.step;\n      this._tickIntervalPercent = pixelsPerTick / trackSize;\n    } else {\n      this._tickIntervalPercent = this.tickInterval * this.step / (this.max - this.min);\n    }\n  }\n\n  /** Creates a slider change object from the specified value. */\n  private _createChangeEvent(value = this.value): MatSliderChange {\n    let event = new MatSliderChange();\n\n    event.source = this;\n    event.value = value;\n\n    return event;\n  }\n\n  /** Calculates the percentage of the slider that a value is. */\n  private _calculatePercentage(value: number | null) {\n    return ((value || 0) - this.min) / (this.max - this.min);\n  }\n\n  /** Calculates the value a percentage of the slider corresponds to. */\n  private _calculateValue(percentage: number) {\n    return this.min + percentage * (this.max - this.min);\n  }\n\n  /** Return a number between two numbers. */\n  private _clamp(value: number, min = 0, max = 1) {\n    return Math.max(min, Math.min(value, max));\n  }\n\n  /**\n   * Get the bounding client rect of the slider track element.\n   * The track is used rather than the native element to ignore the extra space that the thumb can\n   * take up.\n   */\n  private _getSliderDimensions() {\n    return this._sliderWrapper ? this._sliderWrapper.nativeElement.getBoundingClientRect() : null;\n  }\n\n  /**\n   * Focuses the native element.\n   * Currently only used to allow a blur event to fire but will be used with keyboard input later.\n   */\n  private _focusHostElement() {\n    this._elementRef.nativeElement.focus();\n  }\n\n  /** Blurs the native element. */\n  private _blurHostElement() {\n    this._elementRef.nativeElement.blur();\n  }\n\n  /**\n   * Sets the model value. Implemented as part of ControlValueAccessor.\n   * @param value\n   */\n  writeValue(value: any) {\n    this.value = value;\n  }\n\n  /**\n   * Registers a callback to be triggered when the value has changed.\n   * Implemented as part of ControlValueAccessor.\n   * @param fn Callback to be registered.\n   */\n  registerOnChange(fn: (value: any) => void) {\n    this._controlValueAccessorChangeFn = fn;\n  }\n\n  /**\n   * Registers a callback to be triggered when the component is touched.\n   * Implemented as part of ControlValueAccessor.\n   * @param fn Callback to be registered.\n   */\n  registerOnTouched(fn: any) {\n    this.onTouched = fn;\n  }\n\n  /**\n   * Sets whether the component should be disabled.\n   * Implemented as part of ControlValueAccessor.\n   * @param isDisabled\n   */\n  setDisabledState(isDisabled: boolean) {\n    this.disabled = isDisabled;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {GestureConfig, MatCommonModule} from '@angular/material/core';\nimport {HAMMER_GESTURE_CONFIG} from '@angular/platform-browser';\nimport {MatSlider} from './slider';\n\n\n@NgModule({\n  imports: [CommonModule, MatCommonModule],\n  exports: [MatSlider, MatCommonModule],\n  declarations: [MatSlider],\n  providers: [{provide: HAMMER_GESTURE_CONFIG, useClass: GestureConfig}]\n})\nexport class MatSliderModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {OverlayRef} from '@angular/cdk/overlay';\nimport {Observable, Subject} from 'rxjs';\nimport {MatSnackBarContainer} from './snack-bar-container';\n\n\n/** Event that is emitted when a snack bar is dismissed. */\nexport interface MatSnackBarDismiss {\n  /** Whether the snack bar was dismissed using the action button. */\n  dismissedByAction: boolean;\n}\n\n/**\n * Reference to a snack bar dispatched from the snack bar service.\n */\nexport class MatSnackBarRef<T> {\n  /** The instance of the component making up the content of the snack bar. */\n  instance: T;\n\n  /**\n   * The instance of the component making up the content of the snack bar.\n   * @docs-private\n   */\n  containerInstance: MatSnackBarContainer;\n\n  /** Subject for notifying the user that the snack bar has been dismissed. */\n  private readonly _afterDismissed = new Subject<MatSnackBarDismiss>();\n\n  /** Subject for notifying the user that the snack bar has opened and appeared. */\n  private readonly _afterOpened = new Subject<void>();\n\n  /** Subject for notifying the user that the snack bar action was called. */\n  private readonly _onAction = new Subject<void>();\n\n  /**\n   * Timeout ID for the duration setTimeout call. Used to clear the timeout if the snackbar is\n   * dismissed before the duration passes.\n   */\n  private _durationTimeoutId: number;\n\n  /** Whether the snack bar was dismissed using the action button. */\n  private _dismissedByAction = false;\n\n  constructor(containerInstance: MatSnackBarContainer,\n              private _overlayRef: OverlayRef) {\n    this.containerInstance = containerInstance;\n    // Dismiss snackbar on action.\n    this.onAction().subscribe(() => this.dismiss());\n    containerInstance._onExit.subscribe(() => this._finishDismiss());\n  }\n\n  /** Dismisses the snack bar. */\n  dismiss(): void {\n    if (!this._afterDismissed.closed) {\n      this.containerInstance.exit();\n    }\n    clearTimeout(this._durationTimeoutId);\n  }\n\n  /** Marks the snackbar action clicked. */\n  dismissWithAction(): void {\n    if (!this._onAction.closed) {\n      this._dismissedByAction = true;\n      this._onAction.next();\n      this._onAction.complete();\n    }\n  }\n\n\n  /**\n   * Marks the snackbar action clicked.\n   * @deprecated Use `dismissWithAction` instead.\n   * @breaking-change 7.0.0\n   */\n  closeWithAction(): void {\n    this.dismissWithAction();\n  }\n\n  /** Dismisses the snack bar after some duration */\n  _dismissAfter(duration: number): void {\n    this._durationTimeoutId = setTimeout(() => this.dismiss(), duration);\n  }\n\n  /** Marks the snackbar as opened */\n  _open(): void {\n    if (!this._afterOpened.closed) {\n      this._afterOpened.next();\n      this._afterOpened.complete();\n    }\n  }\n\n  /** Cleans up the DOM after closing. */\n  private _finishDismiss(): void {\n    this._overlayRef.dispose();\n\n    if (!this._onAction.closed) {\n      this._onAction.complete();\n    }\n\n    this._afterDismissed.next({dismissedByAction: this._dismissedByAction});\n    this._afterDismissed.complete();\n    this._dismissedByAction = false;\n  }\n\n  /** Gets an observable that is notified when the snack bar is finished closing. */\n  afterDismissed(): Observable<MatSnackBarDismiss> {\n    return this._afterDismissed.asObservable();\n  }\n\n  /** Gets an observable that is notified when the snack bar has opened and appeared. */\n  afterOpened(): Observable<void> {\n    return this.containerInstance._onEnter;\n  }\n\n  /** Gets an observable that is notified when the snack bar action is called. */\n  onAction(): Observable<void> {\n    return this._onAction.asObservable();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ViewContainerRef, InjectionToken} from '@angular/core';\nimport {AriaLivePoliteness} from '@angular/cdk/a11y';\nimport {Direction} from '@angular/cdk/bidi';\n\n/** Injection token that can be used to access the data that was passed in to a snack bar. */\nexport const MAT_SNACK_BAR_DATA = new InjectionToken<any>('MatSnackBarData');\n\n/** Possible values for horizontalPosition on MatSnackBarConfig. */\nexport type MatSnackBarHorizontalPosition = 'start' | 'center' | 'end' | 'left' | 'right';\n\n/** Possible values for verticalPosition on MatSnackBarConfig. */\nexport type MatSnackBarVerticalPosition = 'top' | 'bottom';\n\n/**\n * Configuration used when opening a snack-bar.\n */\nexport class MatSnackBarConfig<D = any> {\n  /** The politeness level for the MatAriaLiveAnnouncer announcement. */\n  politeness?: AriaLivePoliteness = 'assertive';\n\n  /**\n   * Message to be announced by the LiveAnnouncer. When opening a snackbar without a custom\n   * component or template, the announcement message will default to the specified message.\n   */\n  announcementMessage?: string = '';\n\n  /** The view container to place the overlay for the snack bar into. */\n  viewContainerRef?: ViewContainerRef;\n\n  /** The length of time in milliseconds to wait before automatically dismissing the snack bar. */\n  duration?: number = 0;\n\n  /** Extra CSS classes to be added to the snack bar container. */\n  panelClass?: string | string[];\n\n  /** Text layout direction for the snack bar. */\n  direction?: Direction;\n\n  /** Data being injected into the child component. */\n  data?: D | null = null;\n\n  /** The horizontal position to place the snack bar. */\n  horizontalPosition?: MatSnackBarHorizontalPosition = 'center';\n\n  /** The vertical position to place the snack bar. */\n  verticalPosition?: MatSnackBarVerticalPosition = 'bottom';\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Component, ViewEncapsulation, Inject, ChangeDetectionStrategy} from '@angular/core';\nimport {MatSnackBarRef} from './snack-bar-ref';\nimport {MAT_SNACK_BAR_DATA} from './snack-bar-config';\n\n\n/**\n * A component used to open as the default snack bar, matching material spec.\n * This should only be used internally by the snack bar service.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'simple-snack-bar',\n  templateUrl: 'simple-snack-bar.html',\n  styleUrls: ['simple-snack-bar.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {\n    'class': 'mat-simple-snackbar',\n  }\n})\nexport class SimpleSnackBar {\n  /** Data that was injected into the snack bar. */\n  data: {message: string, action: string};\n\n  constructor(\n    public snackBarRef: MatSnackBarRef<SimpleSnackBar>,\n    @Inject(MAT_SNACK_BAR_DATA) data: any) {\n    this.data = data;\n  }\n\n  /** Performs the action on the snack bar. */\n  action(): void {\n    this.snackBarRef.dismissWithAction();\n  }\n\n  /** If the action button should be shown. */\n  get hasAction(): boolean {\n    return !!this.data.action;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/** Animations used by the Material snack bar. */\nexport const matSnackBarAnimations: {\n  readonly snackBarState: AnimationTriggerMetadata;\n} = {\n  /** Animation that shows and hides a snack bar. */\n  snackBarState: trigger('state', [\n    state('void, hidden', style({\n      transform: 'scale(0.8)',\n      opacity: 0,\n    })),\n    state('visible', style({\n      transform: 'scale(1)',\n      opacity: 1,\n    })),\n    transition('* => visible', animate('150ms cubic-bezier(0, 0, 0.2, 1)')),\n    transition('* => void, * => hidden', animate('75ms cubic-bezier(0.4, 0.0, 1, 1)', style({\n      opacity: 0\n    }))),\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {AnimationEvent} from '@angular/animations';\nimport {\n  BasePortalOutlet,\n  CdkPortalOutlet,\n  ComponentPortal,\n  TemplatePortal,\n} from '@angular/cdk/portal';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ComponentRef,\n  ElementRef,\n  EmbeddedViewRef,\n  NgZone,\n  OnDestroy,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {Observable, Subject} from 'rxjs';\nimport {take} from 'rxjs/operators';\nimport {matSnackBarAnimations} from './snack-bar-animations';\nimport {MatSnackBarConfig} from './snack-bar-config';\n\n\n/**\n * Internal component that wraps user-provided snack bar content.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'snack-bar-container',\n  templateUrl: 'snack-bar-container.html',\n  styleUrls: ['snack-bar-container.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  animations: [matSnackBarAnimations.snackBarState],\n  host: {\n    'role': 'alert',\n    'class': 'mat-snack-bar-container',\n    '[@state]': '_animationState',\n    '(@state.done)': 'onAnimationEnd($event)'\n  },\n})\nexport class MatSnackBarContainer extends BasePortalOutlet implements OnDestroy {\n  /** Whether the component has been destroyed. */\n  private _destroyed = false;\n\n  /** The portal outlet inside of this container into which the snack bar content will be loaded. */\n  @ViewChild(CdkPortalOutlet) _portalOutlet: CdkPortalOutlet;\n\n  /** Subject for notifying that the snack bar has exited from view. */\n  readonly _onExit: Subject<any> = new Subject();\n\n  /** Subject for notifying that the snack bar has finished entering the view. */\n  readonly _onEnter: Subject<any> = new Subject();\n\n  /** The state of the snack bar animations. */\n  _animationState = 'void';\n\n  constructor(\n    private _ngZone: NgZone,\n    private _elementRef: ElementRef,\n    private _changeDetectorRef: ChangeDetectorRef,\n    /** The snack bar configuration. */\n    public snackBarConfig: MatSnackBarConfig) {\n\n    super();\n  }\n\n  /** Attach a component portal as content to this snack bar container. */\n  attachComponentPortal<T>(portal: ComponentPortal<T>): ComponentRef<T> {\n    this._assertNotAttached();\n    this._applySnackBarClasses();\n    return this._portalOutlet.attachComponentPortal(portal);\n  }\n\n  /** Attach a template portal as content to this snack bar container. */\n  attachTemplatePortal<C>(portal: TemplatePortal<C>): EmbeddedViewRef<C> {\n    this._assertNotAttached();\n    this._applySnackBarClasses();\n    return this._portalOutlet.attachTemplatePortal(portal);\n  }\n\n  /** Handle end of animations, updating the state of the snackbar. */\n  onAnimationEnd(event: AnimationEvent) {\n    const {fromState, toState} = event;\n\n    if ((toState === 'void' && fromState !== 'void') || toState === 'hidden') {\n      this._completeExit();\n    }\n\n    if (toState === 'visible') {\n      // Note: we shouldn't use `this` inside the zone callback,\n      // because it can cause a memory leak.\n      const onEnter = this._onEnter;\n\n      this._ngZone.run(() => {\n        onEnter.next();\n        onEnter.complete();\n      });\n    }\n  }\n\n  /** Begin animation of snack bar entrance into view. */\n  enter(): void {\n    if (!this._destroyed) {\n      this._animationState = 'visible';\n      this._changeDetectorRef.detectChanges();\n    }\n  }\n\n  /** Begin animation of the snack bar exiting from view. */\n  exit(): Observable<void> {\n    // Note: this one transitions to `hidden`, rather than `void`, in order to handle the case\n    // where multiple snack bars are opened in quick succession (e.g. two consecutive calls to\n    // `MatSnackBar.open`).\n    this._animationState = 'hidden';\n    return this._onExit;\n  }\n\n  /** Makes sure the exit callbacks have been invoked when the element is destroyed. */\n  ngOnDestroy() {\n    this._destroyed = true;\n    this._completeExit();\n  }\n\n  /**\n   * Waits for the zone to settle before removing the element. Helps prevent\n   * errors where we end up removing an element which is in the middle of an animation.\n   */\n  private _completeExit() {\n    this._ngZone.onMicrotaskEmpty.asObservable().pipe(take(1)).subscribe(() => {\n      this._onExit.next();\n      this._onExit.complete();\n    });\n  }\n\n  /** Applies the various positioning and user-configured CSS classes to the snack bar. */\n  private _applySnackBarClasses() {\n    const element: HTMLElement = this._elementRef.nativeElement;\n    const panelClasses = this.snackBarConfig.panelClass;\n\n    if (panelClasses) {\n      if (Array.isArray(panelClasses)) {\n        // Note that we can't use a spread here, because IE doesn't support multiple arguments.\n        panelClasses.forEach(cssClass => element.classList.add(cssClass));\n      } else {\n        element.classList.add(panelClasses);\n      }\n    }\n\n    if (this.snackBarConfig.horizontalPosition === 'center') {\n      element.classList.add('mat-snack-bar-center');\n    }\n\n    if (this.snackBarConfig.verticalPosition === 'top') {\n      element.classList.add('mat-snack-bar-top');\n    }\n  }\n\n  /** Asserts that no content is already attached to the container. */\n  private _assertNotAttached() {\n    if (this._portalOutlet.hasAttached()) {\n      throw Error('Attempting to attach snack bar content after content is already attached');\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatButtonModule} from '@angular/material/button';\nimport {SimpleSnackBar} from './simple-snack-bar';\nimport {MatSnackBarContainer} from './snack-bar-container';\n\n\n@NgModule({\n  imports: [\n    OverlayModule,\n    PortalModule,\n    CommonModule,\n    MatButtonModule,\n    MatCommonModule,\n  ],\n  exports: [MatSnackBarContainer, MatCommonModule],\n  declarations: [MatSnackBarContainer, SimpleSnackBar],\n  entryComponents: [MatSnackBarContainer, SimpleSnackBar],\n})\nexport class MatSnackBarModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {LiveAnnouncer} from '@angular/cdk/a11y';\nimport {BreakpointObserver, Breakpoints} from '@angular/cdk/layout';\nimport {Overlay, OverlayConfig, OverlayRef} from '@angular/cdk/overlay';\nimport {ComponentPortal, ComponentType, PortalInjector, TemplatePortal} from '@angular/cdk/portal';\nimport {\n  ComponentRef,\n  EmbeddedViewRef,\n  Inject,\n  Injectable,\n  InjectionToken,\n  Injector,\n  Optional,\n  SkipSelf,\n  TemplateRef,\n} from '@angular/core';\nimport {take, takeUntil} from 'rxjs/operators';\nimport {SimpleSnackBar} from './simple-snack-bar';\nimport {MAT_SNACK_BAR_DATA, MatSnackBarConfig} from './snack-bar-config';\nimport {MatSnackBarContainer} from './snack-bar-container';\nimport {MatSnackBarModule} from './snack-bar-module';\nimport {MatSnackBarRef} from './snack-bar-ref';\n\n\n/** Injection token that can be used to specify default snack bar. */\nexport const MAT_SNACK_BAR_DEFAULT_OPTIONS =\n    new InjectionToken<MatSnackBarConfig>('mat-snack-bar-default-options', {\n      providedIn: 'root',\n      factory: MAT_SNACK_BAR_DEFAULT_OPTIONS_FACTORY,\n    });\n\n/** @docs-private */\nexport function MAT_SNACK_BAR_DEFAULT_OPTIONS_FACTORY(): MatSnackBarConfig {\n  return new MatSnackBarConfig();\n}\n\n/**\n * Service to dispatch Material Design snack bar messages.\n */\n@Injectable({providedIn: MatSnackBarModule})\nexport class MatSnackBar {\n  /**\n   * Reference to the current snack bar in the view *at this level* (in the Angular injector tree).\n   * If there is a parent snack-bar service, all operations should delegate to that parent\n   * via `_openedSnackBarRef`.\n   */\n  private _snackBarRefAtThisLevel: MatSnackBarRef<any> | null = null;\n\n  /** Reference to the currently opened snackbar at *any* level. */\n  get _openedSnackBarRef(): MatSnackBarRef<any> | null {\n    const parent = this._parentSnackBar;\n    return parent ? parent._openedSnackBarRef : this._snackBarRefAtThisLevel;\n  }\n\n  set _openedSnackBarRef(value: MatSnackBarRef<any> | null) {\n    if (this._parentSnackBar) {\n      this._parentSnackBar._openedSnackBarRef = value;\n    } else {\n      this._snackBarRefAtThisLevel = value;\n    }\n  }\n\n  constructor(\n      private _overlay: Overlay,\n      private _live: LiveAnnouncer,\n      private _injector: Injector,\n      private _breakpointObserver: BreakpointObserver,\n      @Optional() @SkipSelf() private _parentSnackBar: MatSnackBar,\n      @Inject(MAT_SNACK_BAR_DEFAULT_OPTIONS) private _defaultConfig: MatSnackBarConfig) {}\n\n  /**\n   * Creates and dispatches a snack bar with a custom component for the content, removing any\n   * currently opened snack bars.\n   *\n   * @param component Component to be instantiated.\n   * @param config Extra configuration for the snack bar.\n   */\n  openFromComponent<T>(component: ComponentType<T>, config?: MatSnackBarConfig):\n    MatSnackBarRef<T> {\n    return this._attach(component, config) as MatSnackBarRef<T>;\n  }\n\n  /**\n   * Creates and dispatches a snack bar with a custom template for the content, removing any\n   * currently opened snack bars.\n   *\n   * @param template Template to be instantiated.\n   * @param config Extra configuration for the snack bar.\n   */\n  openFromTemplate(template: TemplateRef<any>, config?: MatSnackBarConfig):\n    MatSnackBarRef<EmbeddedViewRef<any>> {\n    return this._attach(template, config);\n  }\n\n  /**\n   * Opens a snackbar with a message and an optional action.\n   * @param message The message to show in the snackbar.\n   * @param action The label for the snackbar action.\n   * @param config Additional configuration options for the snackbar.\n   */\n  open(message: string, action: string = '', config?: MatSnackBarConfig):\n      MatSnackBarRef<SimpleSnackBar> {\n    const _config = {...this._defaultConfig, ...config};\n\n    // Since the user doesn't have access to the component, we can\n    // override the data to pass in our own message and action.\n    _config.data = {message, action};\n\n    if (!_config.announcementMessage) {\n      _config.announcementMessage = message;\n    }\n\n    return this.openFromComponent(SimpleSnackBar, _config);\n  }\n\n  /**\n   * Dismisses the currently-visible snack bar.\n   */\n  dismiss(): void {\n    if (this._openedSnackBarRef) {\n      this._openedSnackBarRef.dismiss();\n    }\n  }\n\n  /**\n   * Attaches the snack bar container component to the overlay.\n   */\n  private _attachSnackBarContainer(overlayRef: OverlayRef,\n                                   config: MatSnackBarConfig): MatSnackBarContainer {\n\n    const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n    const injector = new PortalInjector(userInjector || this._injector, new WeakMap([\n      [MatSnackBarConfig, config]\n    ]));\n\n    const containerPortal =\n        new ComponentPortal(MatSnackBarContainer, config.viewContainerRef, injector);\n    const containerRef: ComponentRef<MatSnackBarContainer> = overlayRef.attach(containerPortal);\n    containerRef.instance.snackBarConfig = config;\n    return containerRef.instance;\n  }\n\n  /**\n   * Places a new component or a template as the content of the snack bar container.\n   */\n  private _attach<T>(content: ComponentType<T> | TemplateRef<T>, userConfig?: MatSnackBarConfig):\n    MatSnackBarRef<T | EmbeddedViewRef<any>> {\n\n    const config = {...new MatSnackBarConfig(), ...this._defaultConfig, ...userConfig};\n    const overlayRef = this._createOverlay(config);\n    const container = this._attachSnackBarContainer(overlayRef, config);\n    const snackBarRef = new MatSnackBarRef<T | EmbeddedViewRef<any>>(container, overlayRef);\n\n    if (content instanceof TemplateRef) {\n      const portal = new TemplatePortal(content, null!, {\n        $implicit: config.data,\n        snackBarRef\n      } as any);\n\n      snackBarRef.instance = container.attachTemplatePortal(portal);\n    } else {\n      const injector = this._createInjector(config, snackBarRef);\n      const portal = new ComponentPortal(content, undefined, injector);\n      const contentRef = container.attachComponentPortal<T>(portal);\n\n      // We can't pass this via the injector, because the injector is created earlier.\n      snackBarRef.instance = contentRef.instance;\n    }\n\n    // Subscribe to the breakpoint observer and attach the mat-snack-bar-handset class as\n    // appropriate. This class is applied to the overlay element because the overlay must expand to\n    // fill the width of the screen for full width snackbars.\n    this._breakpointObserver.observe(Breakpoints.Handset).pipe(\n      takeUntil(overlayRef.detachments().pipe(take(1)))\n    ).subscribe(state => {\n      if (state.matches) {\n        overlayRef.overlayElement.classList.add('mat-snack-bar-handset');\n      } else {\n        overlayRef.overlayElement.classList.remove('mat-snack-bar-handset');\n      }\n    });\n\n    this._animateSnackBar(snackBarRef, config);\n    this._openedSnackBarRef = snackBarRef;\n    return this._openedSnackBarRef;\n  }\n\n  /** Animates the old snack bar out and the new one in. */\n  private _animateSnackBar(snackBarRef: MatSnackBarRef<any>, config: MatSnackBarConfig) {\n    // When the snackbar is dismissed, clear the reference to it.\n    snackBarRef.afterDismissed().subscribe(() => {\n      // Clear the snackbar ref if it hasn't already been replaced by a newer snackbar.\n      if (this._openedSnackBarRef == snackBarRef) {\n        this._openedSnackBarRef = null;\n      }\n    });\n\n    if (this._openedSnackBarRef) {\n      // If a snack bar is already in view, dismiss it and enter the\n      // new snack bar after exit animation is complete.\n      this._openedSnackBarRef.afterDismissed().subscribe(() => {\n        snackBarRef.containerInstance.enter();\n      });\n      this._openedSnackBarRef.dismiss();\n    } else {\n      // If no snack bar is in view, enter the new snack bar.\n      snackBarRef.containerInstance.enter();\n    }\n\n    // If a dismiss timeout is provided, set up dismiss based on after the snackbar is opened.\n    if (config.duration && config.duration > 0) {\n      snackBarRef.afterOpened().subscribe(() => snackBarRef._dismissAfter(config.duration!));\n    }\n\n    if (config.announcementMessage) {\n      this._live.announce(config.announcementMessage, config.politeness);\n    }\n  }\n\n  /**\n   * Creates a new overlay and places it in the correct location.\n   * @param config The user-specified snack bar config.\n   */\n  private _createOverlay(config: MatSnackBarConfig): OverlayRef {\n    const overlayConfig = new OverlayConfig();\n    overlayConfig.direction = config.direction;\n\n    let positionStrategy = this._overlay.position().global();\n    // Set horizontal position.\n    const isRtl = config.direction === 'rtl';\n    const isLeft = (\n      config.horizontalPosition === 'left' ||\n      (config.horizontalPosition === 'start' && !isRtl) ||\n      (config.horizontalPosition === 'end' && isRtl));\n    const isRight = !isLeft && config.horizontalPosition !== 'center';\n    if (isLeft) {\n      positionStrategy.left('0');\n    } else if (isRight) {\n      positionStrategy.right('0');\n    } else {\n      positionStrategy.centerHorizontally();\n    }\n    // Set horizontal position.\n    if (config.verticalPosition === 'top') {\n      positionStrategy.top('0');\n    } else {\n      positionStrategy.bottom('0');\n    }\n\n    overlayConfig.positionStrategy = positionStrategy;\n    return this._overlay.create(overlayConfig);\n  }\n\n  /**\n   * Creates an injector to be used inside of a snack bar component.\n   * @param config Config that was used to create the snack bar.\n   * @param snackBarRef Reference to the snack bar.\n   */\n  private _createInjector<T>(\n      config: MatSnackBarConfig,\n      snackBarRef: MatSnackBarRef<T>): PortalInjector {\n\n    const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n\n    return new PortalInjector(userInjector || this._injector, new WeakMap<any, any>([\n      [MatSnackBarRef, snackBarRef],\n      [MAT_SNACK_BAR_DATA, config.data]\n    ]));\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Directive,\n  EventEmitter,\n  Input,\n  isDevMode,\n  OnChanges,\n  OnDestroy,\n  OnInit,\n  Output,\n} from '@angular/core';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {CanDisable, HasInitialized, mixinDisabled, mixinInitialized} from '@angular/material/core';\nimport {SortDirection} from './sort-direction';\nimport {\n  getSortDuplicateSortableIdError,\n  getSortHeaderMissingIdError,\n  getSortInvalidDirectionError\n} from './sort-errors';\nimport {Subject} from 'rxjs';\n\n/** Interface for a directive that holds sorting state consumed by `MatSortHeader`. */\nexport interface MatSortable {\n  /** The id of the column being sorted. */\n  id: string;\n\n  /** Starting sort direction. */\n  start: 'asc' | 'desc';\n\n  /** Whether to disable clearing the sorting state. */\n  disableClear: boolean;\n}\n\n/** The current sort state. */\nexport interface Sort {\n  /** The id of the column being sorted. */\n  active: string;\n\n  /** The sort direction. */\n  direction: SortDirection;\n}\n\n// Boilerplate for applying mixins to MatSort.\n/** @docs-private */\nexport class MatSortBase {}\nexport const _MatSortMixinBase = mixinInitialized(mixinDisabled(MatSortBase));\n\n/** Container for MatSortables to manage the sort state and provide default sort parameters. */\n@Directive({\n  selector: '[matSort]',\n  exportAs: 'matSort',\n  inputs: ['disabled: matSortDisabled']\n})\nexport class MatSort extends _MatSortMixinBase\n    implements CanDisable, HasInitialized, OnChanges, OnDestroy, OnInit {\n  /** Collection of all registered sortables that this directive manages. */\n  sortables = new Map<string, MatSortable>();\n\n  /** Used to notify any child components listening to state changes. */\n  readonly _stateChanges = new Subject<void>();\n\n  /** The id of the most recently sorted MatSortable. */\n  @Input('matSortActive') active: string;\n\n  /**\n   * The direction to set when an MatSortable is initially sorted.\n   * May be overriden by the MatSortable's sort start.\n   */\n  @Input('matSortStart') start: 'asc' | 'desc' = 'asc';\n\n  /** The sort direction of the currently active MatSortable. */\n  @Input('matSortDirection')\n  get direction(): SortDirection { return this._direction; }\n  set direction(direction: SortDirection) {\n    if (isDevMode() && direction && direction !== 'asc' && direction !== 'desc') {\n      throw getSortInvalidDirectionError(direction);\n    }\n    this._direction = direction;\n  }\n  private _direction: SortDirection = '';\n\n  /**\n   * Whether to disable the user from clearing the sort by finishing the sort direction cycle.\n   * May be overriden by the MatSortable's disable clear input.\n   */\n  @Input('matSortDisableClear')\n  get disableClear(): boolean { return this._disableClear; }\n  set disableClear(v: boolean) { this._disableClear = coerceBooleanProperty(v); }\n  private _disableClear: boolean;\n\n  /** Event emitted when the user changes either the active sort or sort direction. */\n  @Output('matSortChange') readonly sortChange: EventEmitter<Sort> = new EventEmitter<Sort>();\n\n  /**\n   * Register function to be used by the contained MatSortables. Adds the MatSortable to the\n   * collection of MatSortables.\n   */\n  register(sortable: MatSortable): void {\n    if (!sortable.id) {\n      throw getSortHeaderMissingIdError();\n    }\n\n    if (this.sortables.has(sortable.id)) {\n      throw getSortDuplicateSortableIdError(sortable.id);\n    }\n    this.sortables.set(sortable.id, sortable);\n  }\n\n  /**\n   * Unregister function to be used by the contained MatSortables. Removes the MatSortable from the\n   * collection of contained MatSortables.\n   */\n  deregister(sortable: MatSortable): void {\n    this.sortables.delete(sortable.id);\n  }\n\n  /** Sets the active sort id and determines the new sort direction. */\n  sort(sortable: MatSortable): void {\n    if (this.active != sortable.id) {\n      this.active = sortable.id;\n      this.direction = sortable.start ? sortable.start : this.start;\n    } else {\n      this.direction = this.getNextSortDirection(sortable);\n    }\n\n    this.sortChange.emit({active: this.active, direction: this.direction});\n  }\n\n  /** Returns the next sort direction of the active sortable, checking for potential overrides. */\n  getNextSortDirection(sortable: MatSortable): SortDirection {\n    if (!sortable) { return ''; }\n\n    // Get the sort direction cycle with the potential sortable overrides.\n    const disableClear = sortable.disableClear != null ? sortable.disableClear : this.disableClear;\n    let sortDirectionCycle = getSortDirectionCycle(sortable.start || this.start, disableClear);\n\n    // Get and return the next direction in the cycle\n    let nextDirectionIndex = sortDirectionCycle.indexOf(this.direction) + 1;\n    if (nextDirectionIndex >= sortDirectionCycle.length) { nextDirectionIndex = 0; }\n    return sortDirectionCycle[nextDirectionIndex];\n  }\n\n  ngOnInit() {\n    this._markInitialized();\n  }\n\n  ngOnChanges() {\n    this._stateChanges.next();\n  }\n\n  ngOnDestroy() {\n    this._stateChanges.complete();\n  }\n}\n\n/** Returns the sort direction cycle to use given the provided parameters of order and clear. */\nfunction getSortDirectionCycle(start: 'asc' | 'desc',\n                               disableClear: boolean): SortDirection[] {\n  let sortOrder: SortDirection[] = ['asc', 'desc'];\n  if (start == 'desc') { sortOrder.reverse(); }\n  if (!disableClear) { sortOrder.push(''); }\n\n  return sortOrder;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {AnimationEvent} from '@angular/animations';\nimport {FocusMonitor, FocusOrigin, FocusTrap, FocusTrapFactory} from '@angular/cdk/a11y';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {ESCAPE} from '@angular/cdk/keycodes';\nimport {Platform} from '@angular/cdk/platform';\nimport {CdkScrollable, ScrollDispatcher} from '@angular/cdk/scrolling';\nimport {DOCUMENT} from '@angular/common';\nimport {\n  AfterContentChecked,\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  ContentChildren,\n  DoCheck,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  Output,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {fromEvent, merge, Observable, Subject} from 'rxjs';\nimport {debounceTime, filter, map, startWith, take, takeUntil} from 'rxjs/operators';\nimport {matDrawerAnimations} from './drawer-animations';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\n\n\n/**\n * Throws an exception when two MatDrawer are matching the same position.\n * @docs-private\n */\nexport function throwMatDuplicatedDrawerError(position: string) {\n  throw Error(`A drawer was already declared for 'position=\"${position}\"'`);\n}\n\n\n/** Result of the toggle promise that indicates the state of the drawer. */\nexport type MatDrawerToggleResult = 'open' | 'close';\n\n/** Configures whether drawers should use auto sizing by default. */\nexport const MAT_DRAWER_DEFAULT_AUTOSIZE =\n    new InjectionToken<boolean>('MAT_DRAWER_DEFAULT_AUTOSIZE', {\n      providedIn: 'root',\n      factory: MAT_DRAWER_DEFAULT_AUTOSIZE_FACTORY,\n    });\n\n/** @docs-private */\nexport function MAT_DRAWER_DEFAULT_AUTOSIZE_FACTORY(): boolean {\n  return false;\n}\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-drawer-content',\n  template: '<ng-content></ng-content>',\n  host: {\n    'class': 'mat-drawer-content',\n    '[style.margin-left.px]': '_container._contentMargins.left',\n    '[style.margin-right.px]': '_container._contentMargins.right',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatDrawerContent extends CdkScrollable implements AfterContentInit {\n  constructor(\n      private _changeDetectorRef: ChangeDetectorRef,\n      @Inject(forwardRef(() => MatDrawerContainer)) public _container: MatDrawerContainer,\n      elementRef: ElementRef<HTMLElement>,\n      scrollDispatcher: ScrollDispatcher,\n      ngZone: NgZone) {\n    super(elementRef, scrollDispatcher, ngZone);\n  }\n\n  ngAfterContentInit() {\n    this._container._contentMarginChanges.subscribe(() => {\n      this._changeDetectorRef.markForCheck();\n    });\n  }\n}\n\n\n/**\n * This component corresponds to a drawer that can be opened on the drawer container.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-drawer',\n  exportAs: 'matDrawer',\n  template: '<ng-content></ng-content>',\n  animations: [matDrawerAnimations.transformDrawer],\n  host: {\n    'class': 'mat-drawer',\n    '[@transform]': '_animationState',\n    '(@transform.start)': '_onAnimationStart($event)',\n    '(@transform.done)': '_onAnimationEnd($event)',\n    // must prevent the browser from aligning text based on value\n    '[attr.align]': 'null',\n    '[class.mat-drawer-end]': 'position === \"end\"',\n    '[class.mat-drawer-over]': 'mode === \"over\"',\n    '[class.mat-drawer-push]': 'mode === \"push\"',\n    '[class.mat-drawer-side]': 'mode === \"side\"',\n    'tabIndex': '-1',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatDrawer implements AfterContentInit, AfterContentChecked, OnDestroy {\n  private _focusTrap: FocusTrap;\n  private _elementFocusedBeforeDrawerWasOpened: HTMLElement | null = null;\n\n  /** Whether the drawer is initialized. Used for disabling the initial animation. */\n  private _enableAnimations = false;\n\n  /** The side that the drawer is attached to. */\n  @Input()\n  get position(): 'start' | 'end' { return this._position; }\n  set position(value: 'start' | 'end') {\n    // Make sure we have a valid value.\n    value = value === 'end' ? 'end' : 'start';\n    if (value != this._position) {\n      this._position = value;\n      this.onPositionChanged.emit();\n    }\n  }\n  private _position: 'start' | 'end' = 'start';\n\n  /** Mode of the drawer; one of 'over', 'push' or 'side'. */\n  @Input()\n  get mode(): 'over' | 'push' | 'side' { return this._mode; }\n  set mode(value: 'over' | 'push' | 'side') {\n    this._mode = value;\n    this._modeChanged.next();\n  }\n  private _mode: 'over' | 'push' | 'side' = 'over';\n\n  /** Whether the drawer can be closed with the escape key or by clicking on the backdrop. */\n  @Input()\n  get disableClose(): boolean { return this._disableClose; }\n  set disableClose(value: boolean) { this._disableClose = coerceBooleanProperty(value); }\n  private _disableClose: boolean = false;\n\n  /** Whether the drawer should focus the first focusable element automatically when opened. */\n  @Input()\n  get autoFocus(): boolean { return this._autoFocus; }\n  set autoFocus(value: boolean) { this._autoFocus = coerceBooleanProperty(value); }\n  private _autoFocus: boolean = true;\n\n  /** How the sidenav was opened (keypress, mouse click etc.) */\n  private _openedVia: FocusOrigin | null;\n\n  /** Emits whenever the drawer has started animating. */\n  _animationStarted = new EventEmitter<AnimationEvent>();\n\n  /** Current state of the sidenav animation. */\n  _animationState: 'open-instant' | 'open' | 'void' = 'void';\n\n  /** Event emitted when the drawer open state is changed. */\n  @Output() readonly openedChange: EventEmitter<boolean> =\n      // Note this has to be async in order to avoid some issues with two-bindings (see #8872).\n      new EventEmitter<boolean>(/* isAsync */true);\n\n  /** Event emitted when the drawer has been opened. */\n  @Output('opened')\n  get _openedStream(): Observable<void> {\n    return this.openedChange.pipe(filter(o => o), map(() => {}));\n  }\n\n  /** Event emitted when the drawer has started opening. */\n  @Output()\n  get openedStart(): Observable<void> {\n    return this._animationStarted.pipe(\n      filter(e => e.fromState !== e.toState && e.toState.indexOf('open') === 0),\n      map(() => {})\n    );\n  }\n\n  /** Event emitted when the drawer has been closed. */\n  @Output('closed')\n  get _closedStream(): Observable<void> {\n    return this.openedChange.pipe(filter(o => !o), map(() => {}));\n  }\n\n  /** Event emitted when the drawer has started closing. */\n  @Output()\n  get closedStart(): Observable<void> {\n    return this._animationStarted.pipe(\n      filter(e => e.fromState !== e.toState && e.toState === 'void'),\n      map(() => {})\n    );\n  }\n\n  /** Event emitted when the drawer's position changes. */\n  // tslint:disable-next-line:no-output-on-prefix\n  @Output('positionChanged') onPositionChanged: EventEmitter<void> = new EventEmitter<void>();\n\n  /**\n   * An observable that emits when the drawer mode changes. This is used by the drawer container to\n   * to know when to when the mode changes so it can adapt the margins on the content.\n   */\n  readonly _modeChanged = new Subject();\n\n  get _isFocusTrapEnabled(): boolean {\n    // The focus trap is only enabled when the drawer is open in any mode other than side.\n    return this.opened && this.mode !== 'side';\n  }\n\n  constructor(private _elementRef: ElementRef,\n              private _focusTrapFactory: FocusTrapFactory,\n              private _focusMonitor: FocusMonitor,\n              private _platform: Platform,\n              private _ngZone: NgZone,\n              @Optional() @Inject(DOCUMENT) private _doc: any) {\n\n    this.openedChange.subscribe((opened: boolean) => {\n      if (opened) {\n        if (this._doc) {\n          this._elementFocusedBeforeDrawerWasOpened = this._doc.activeElement as HTMLElement;\n        }\n\n        if (this._isFocusTrapEnabled && this._focusTrap) {\n          this._trapFocus();\n        }\n      } else {\n        this._restoreFocus();\n      }\n    });\n\n    /**\n     * Listen to `keydown` events outside the zone so that change detection is not run every\n     * time a key is pressed. Instead we re-enter the zone only if the `ESC` key is pressed\n     * and we don't have close disabled.\n     */\n    this._ngZone.runOutsideAngular(() => {\n        fromEvent<KeyboardEvent>(this._elementRef.nativeElement, 'keydown').pipe(\n            filter(event => event.keyCode === ESCAPE && !this.disableClose)\n        ).subscribe(event => this._ngZone.run(() => {\n            this.close();\n            event.stopPropagation();\n        }));\n    });\n  }\n\n  /** Traps focus inside the drawer. */\n  private _trapFocus() {\n    if (!this.autoFocus) {\n      return;\n    }\n\n    this._focusTrap.focusInitialElementWhenReady().then(hasMovedFocus => {\n      // If there were no focusable elements, focus the sidenav itself so the keyboard navigation\n      // still works. We need to check that `focus` is a function due to Universal.\n      if (!hasMovedFocus && typeof this._elementRef.nativeElement.focus === 'function') {\n        this._elementRef.nativeElement.focus();\n      }\n    });\n  }\n\n  /**\n   * If focus is currently inside the drawer, restores it to where it was before the drawer\n   * opened.\n   */\n  private _restoreFocus() {\n    if (!this.autoFocus) {\n      return;\n    }\n\n    const activeEl = this._doc && this._doc.activeElement;\n\n    if (activeEl && this._elementRef.nativeElement.contains(activeEl)) {\n      if (this._elementFocusedBeforeDrawerWasOpened instanceof HTMLElement) {\n        this._focusMonitor.focusVia(this._elementFocusedBeforeDrawerWasOpened, this._openedVia);\n      } else {\n        this._elementRef.nativeElement.blur();\n      }\n    }\n\n    this._elementFocusedBeforeDrawerWasOpened = null;\n    this._openedVia = null;\n  }\n\n  ngAfterContentInit() {\n    this._focusTrap = this._focusTrapFactory.create(this._elementRef.nativeElement);\n    this._focusTrap.enabled = this._isFocusTrapEnabled;\n  }\n\n  ngAfterContentChecked() {\n    // Enable the animations after the lifecycle hooks have run, in order to avoid animating\n    // drawers that are open by default. When we're on the server, we shouldn't enable the\n    // animations, because we don't want the drawer to animate the first time the user sees\n    // the page.\n    if (this._platform.isBrowser) {\n      this._enableAnimations = true;\n    }\n  }\n\n  ngOnDestroy() {\n    if (this._focusTrap) {\n      this._focusTrap.destroy();\n    }\n  }\n\n  /**\n   * Whether the drawer is opened. We overload this because we trigger an event when it\n   * starts or end.\n   */\n  @Input()\n  get opened(): boolean { return this._opened; }\n  set opened(value: boolean) { this.toggle(coerceBooleanProperty(value)); }\n  private _opened: boolean = false;\n\n  /**\n   * Open the drawer.\n   * @param openedVia Whether the drawer was opened by a key press, mouse click or programmatically.\n   * Used for focus management after the sidenav is closed.\n   */\n  open(openedVia?: FocusOrigin): Promise<MatDrawerToggleResult> {\n    return this.toggle(true, openedVia);\n  }\n\n  /** Close the drawer. */\n  close(): Promise<MatDrawerToggleResult> {\n    return this.toggle(false);\n  }\n\n  /**\n   * Toggle this drawer.\n   * @param isOpen Whether the drawer should be open.\n   * @param openedVia Whether the drawer was opened by a key press, mouse click or programmatically.\n   * Used for focus management after the sidenav is closed.\n   */\n  toggle(isOpen: boolean = !this.opened, openedVia: FocusOrigin = 'program'):\n    Promise<MatDrawerToggleResult> {\n\n    this._opened = isOpen;\n\n    if (isOpen) {\n      this._animationState = this._enableAnimations ? 'open' : 'open-instant';\n      this._openedVia = openedVia;\n    } else {\n      this._animationState = 'void';\n      this._restoreFocus();\n    }\n\n    if (this._focusTrap) {\n      this._focusTrap.enabled = this._isFocusTrapEnabled;\n    }\n\n    return new Promise<MatDrawerToggleResult>(resolve => {\n      this.openedChange.pipe(take(1)).subscribe(open => resolve(open ? 'open' : 'close'));\n    });\n  }\n\n  _onAnimationStart(event: AnimationEvent) {\n    this._animationStarted.emit(event);\n  }\n\n  _onAnimationEnd(event: AnimationEvent) {\n    const {fromState, toState} = event;\n\n    if ((toState.indexOf('open') === 0 && fromState === 'void') ||\n        (toState === 'void' && fromState.indexOf('open') === 0)) {\n      this.openedChange.emit(this._opened);\n    }\n  }\n\n  get _width(): number {\n    return this._elementRef.nativeElement ? (this._elementRef.nativeElement.offsetWidth || 0) : 0;\n  }\n}\n\n\n/**\n * `<mat-drawer-container>` component.\n *\n * This is the parent component to one or two `<mat-drawer>`s that validates the state internally\n * and coordinates the backdrop and content styling.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-drawer-container',\n  exportAs: 'matDrawerContainer',\n  templateUrl: 'drawer-container.html',\n  styleUrls: ['drawer.css'],\n  host: {\n    'class': 'mat-drawer-container',\n    '[class.mat-drawer-container-explicit-backdrop]': '_backdropOverride',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatDrawerContainer implements AfterContentInit, DoCheck, OnDestroy {\n  @ContentChildren(MatDrawer) _drawers: QueryList<MatDrawer>;\n  @ContentChild(MatDrawerContent) _content: MatDrawerContent;\n  @ViewChild(MatDrawerContent) _userContent: MatDrawerContent;\n\n  /** The drawer child with the `start` position. */\n  get start(): MatDrawer | null { return this._start; }\n\n  /** The drawer child with the `end` position. */\n  get end(): MatDrawer | null { return this._end; }\n\n  /**\n   * Whether to automatically resize the container whenever\n   * the size of any of its drawers changes.\n   *\n   * **Use at your own risk!** Enabling this option can cause layout thrashing by measuring\n   * the drawers on every change detection cycle. Can be configured globally via the\n   * `MAT_DRAWER_DEFAULT_AUTOSIZE` token.\n   */\n  @Input()\n  get autosize(): boolean { return this._autosize; }\n  set autosize(value: boolean) { this._autosize = coerceBooleanProperty(value); }\n  private _autosize: boolean;\n\n  /**\n   * Whether the drawer container should have a backdrop while one of the sidenavs is open.\n   * If explicitly set to `true`, the backdrop will be enabled for drawers in the `side`\n   * mode as well.\n   */\n  @Input()\n  get hasBackdrop() {\n    if (this._backdropOverride == null) {\n      return !this._start || this._start.mode !== 'side' || !this._end || this._end.mode !== 'side';\n    }\n\n    return this._backdropOverride;\n  }\n  set hasBackdrop(value: any) {\n    this._backdropOverride = value == null ? null : coerceBooleanProperty(value);\n  }\n  _backdropOverride: boolean | null;\n\n  /** Event emitted when the drawer backdrop is clicked. */\n  @Output() readonly backdropClick: EventEmitter<void> = new EventEmitter<void>();\n\n  /** The drawer at the start/end position, independent of direction. */\n  private _start: MatDrawer | null;\n  private _end: MatDrawer | null;\n\n  /**\n   * The drawer at the left/right. When direction changes, these will change as well.\n   * They're used as aliases for the above to set the left/right style properly.\n   * In LTR, _left == _start and _right == _end.\n   * In RTL, _left == _end and _right == _start.\n   */\n  private _left: MatDrawer | null;\n  private _right: MatDrawer | null;\n\n  /** Emits when the component is destroyed. */\n  private readonly _destroyed = new Subject<void>();\n\n  /** Emits on every ngDoCheck. Used for debouncing reflows. */\n  private readonly _doCheckSubject = new Subject<void>();\n\n  /**\n   * Margins to be applied to the content. These are used to push / shrink the drawer content when a\n   * drawer is open. We use margin rather than transform even for push mode because transform breaks\n   * fixed position elements inside of the transformed element.\n   */\n  _contentMargins: {left: number|null, right: number|null} = {left: null, right: null};\n\n  readonly _contentMarginChanges = new Subject<{left: number|null, right: number|null}>();\n\n  /** Reference to the CdkScrollable instance that wraps the scrollable content. */\n  get scrollable(): CdkScrollable {\n    return this._userContent || this._content;\n  }\n\n  constructor(@Optional() private _dir: Directionality,\n              private _element: ElementRef,\n              private _ngZone: NgZone,\n              private _changeDetectorRef: ChangeDetectorRef,\n              @Inject(MAT_DRAWER_DEFAULT_AUTOSIZE) defaultAutosize = false,\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) private _animationMode?: string) {\n\n    // If a `Dir` directive exists up the tree, listen direction changes\n    // and update the left/right properties to point to the proper start/end.\n    if (_dir) {\n      _dir.change.pipe(takeUntil(this._destroyed)).subscribe(() => {\n        this._validateDrawers();\n        this._updateContentMargins();\n      });\n    }\n\n    this._autosize = defaultAutosize;\n  }\n\n  ngAfterContentInit() {\n    this._drawers.changes.pipe(startWith(null)).subscribe(() => {\n      this._validateDrawers();\n\n      this._drawers.forEach((drawer: MatDrawer) => {\n        this._watchDrawerToggle(drawer);\n        this._watchDrawerPosition(drawer);\n        this._watchDrawerMode(drawer);\n      });\n\n      if (!this._drawers.length ||\n          this._isDrawerOpen(this._start) ||\n          this._isDrawerOpen(this._end)) {\n        this._updateContentMargins();\n      }\n\n      this._changeDetectorRef.markForCheck();\n    });\n\n    this._doCheckSubject.pipe(\n      debounceTime(10), // Arbitrary debounce time, less than a frame at 60fps\n      takeUntil(this._destroyed)\n    ).subscribe(() => this._updateContentMargins());\n  }\n\n  ngOnDestroy() {\n    this._doCheckSubject.complete();\n    this._destroyed.next();\n    this._destroyed.complete();\n  }\n\n  /** Calls `open` of both start and end drawers */\n  open(): void {\n    this._drawers.forEach(drawer => drawer.open());\n  }\n\n  /** Calls `close` of both start and end drawers */\n  close(): void {\n    this._drawers.forEach(drawer => drawer.close());\n  }\n\n  ngDoCheck() {\n    // If users opted into autosizing, do a check every change detection cycle.\n    if (this._autosize && this._isPushed()) {\n      // Run outside the NgZone, otherwise the debouncer will throw us into an infinite loop.\n      this._ngZone.runOutsideAngular(() => this._doCheckSubject.next());\n    }\n  }\n\n  /**\n   * Subscribes to drawer events in order to set a class on the main container element when the\n   * drawer is open and the backdrop is visible. This ensures any overflow on the container element\n   * is properly hidden.\n   */\n  private _watchDrawerToggle(drawer: MatDrawer): void {\n    drawer._animationStarted.pipe(\n      takeUntil(this._drawers.changes),\n      filter((event: AnimationEvent) => event.fromState !== event.toState)\n    )\n    .subscribe((event: AnimationEvent) => {\n      // Set the transition class on the container so that the animations occur. This should not\n      // be set initially because animations should only be triggered via a change in state.\n      if (event.toState !== 'open-instant' && this._animationMode !== 'NoopAnimations') {\n        this._element.nativeElement.classList.add('mat-drawer-transition');\n      }\n\n      this._updateContentMargins();\n      this._changeDetectorRef.markForCheck();\n    });\n\n    if (drawer.mode !== 'side') {\n      drawer.openedChange.pipe(takeUntil(this._drawers.changes)).subscribe(() =>\n          this._setContainerClass(drawer.opened));\n    }\n  }\n\n  /**\n   * Subscribes to drawer onPositionChanged event in order to\n   * re-validate drawers when the position changes.\n   */\n  private _watchDrawerPosition(drawer: MatDrawer): void {\n    if (!drawer) {\n      return;\n    }\n    // NOTE: We need to wait for the microtask queue to be empty before validating,\n    // since both drawers may be swapping positions at the same time.\n    drawer.onPositionChanged.pipe(takeUntil(this._drawers.changes)).subscribe(() => {\n      this._ngZone.onMicrotaskEmpty.asObservable().pipe(take(1)).subscribe(() => {\n        this._validateDrawers();\n      });\n    });\n  }\n\n  /** Subscribes to changes in drawer mode so we can run change detection. */\n  private _watchDrawerMode(drawer: MatDrawer): void {\n    if (drawer) {\n      drawer._modeChanged.pipe(takeUntil(merge(this._drawers.changes, this._destroyed)))\n        .subscribe(() => {\n          this._updateContentMargins();\n          this._changeDetectorRef.markForCheck();\n        });\n    }\n  }\n\n  /** Toggles the 'mat-drawer-opened' class on the main 'mat-drawer-container' element. */\n  private _setContainerClass(isAdd: boolean): void {\n    if (isAdd) {\n      this._element.nativeElement.classList.add('mat-drawer-opened');\n    } else {\n      this._element.nativeElement.classList.remove('mat-drawer-opened');\n    }\n  }\n\n  /** Validate the state of the drawer children components. */\n  private _validateDrawers() {\n    this._start = this._end = null;\n\n    // Ensure that we have at most one start and one end drawer.\n    this._drawers.forEach(drawer => {\n      if (drawer.position == 'end') {\n        if (this._end != null) {\n          throwMatDuplicatedDrawerError('end');\n        }\n        this._end = drawer;\n      } else {\n        if (this._start != null) {\n          throwMatDuplicatedDrawerError('start');\n        }\n        this._start = drawer;\n      }\n    });\n\n    this._right = this._left = null;\n\n    // Detect if we're LTR or RTL.\n    if (this._dir && this._dir.value === 'rtl') {\n      this._left = this._end;\n      this._right = this._start;\n    } else {\n      this._left = this._start;\n      this._right = this._end;\n    }\n  }\n\n  /** Whether the container is being pushed to the side by one of the drawers. */\n  private _isPushed() {\n    return (this._isDrawerOpen(this._start) && this._start.mode != 'over') ||\n           (this._isDrawerOpen(this._end) && this._end.mode != 'over');\n  }\n\n  _onBackdropClicked() {\n    this.backdropClick.emit();\n    this._closeModalDrawer();\n  }\n\n  _closeModalDrawer() {\n    // Close all open drawers where closing is not disabled and the mode is not `side`.\n    [this._start, this._end]\n      .filter(drawer => drawer && !drawer.disableClose && this._canHaveBackdrop(drawer))\n      .forEach(drawer => drawer!.close());\n  }\n\n  _isShowingBackdrop(): boolean {\n    return (this._isDrawerOpen(this._start) && this._canHaveBackdrop(this._start)) ||\n           (this._isDrawerOpen(this._end) && this._canHaveBackdrop(this._end));\n  }\n\n  private _canHaveBackdrop(drawer: MatDrawer): boolean {\n    return drawer.mode !== 'side' || !!this._backdropOverride;\n  }\n\n  private _isDrawerOpen(drawer: MatDrawer | null): drawer is MatDrawer {\n    return drawer != null && drawer.opened;\n  }\n\n  /**\n   * Recalculates and updates the inline styles for the content. Note that this should be used\n   * sparingly, because it causes a reflow.\n   */\n  private _updateContentMargins() {\n    // 1. For drawers in `over` mode, they don't affect the content.\n    // 2. For drawers in `side` mode they should shrink the content. We do this by adding to the\n    //    left margin (for left drawer) or right margin (for right the drawer).\n    // 3. For drawers in `push` mode the should shift the content without resizing it. We do this by\n    //    adding to the left or right margin and simultaneously subtracting the same amount of\n    //    margin from the other side.\n\n    let left = 0;\n    let right = 0;\n\n    if (this._left && this._left.opened) {\n      if (this._left.mode == 'side') {\n        left += this._left._width;\n      } else if (this._left.mode == 'push') {\n        let width = this._left._width;\n        left += width;\n        right -= width;\n      }\n    }\n\n    if (this._right && this._right.opened) {\n      if (this._right.mode == 'side') {\n        right += this._right._width;\n      } else if (this._right.mode == 'push') {\n        let width = this._right._width;\n        right += width;\n        left -= width;\n      }\n    }\n\n    // If either `right` or `left` is zero, don't set a style to the element. This\n    // allows users to specify a custom size via CSS class in SSR scenarios where the\n    // measured widths will always be zero. Note that we reset to `null` here, rather\n    // than below, in order to ensure that the types in the `if` below are consistent.\n    left = left || null!;\n    right = right || null!;\n\n    if (left !== this._contentMargins.left || right !== this._contentMargins.right) {\n      this._contentMargins = {left, right};\n\n      // Pull back into the NgZone since in some cases we could be outside. We need to be careful\n      // to do it only when something changed, otherwise we can end up hitting the zone too often.\n      this._ngZone.run(() => this._contentMarginChanges.next(this._contentMargins));\n    }\n\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  ContentChildren,\n  forwardRef,\n  Inject,\n  Input,\n  ViewEncapsulation,\n  QueryList,\n  ElementRef,\n  NgZone,\n} from '@angular/core';\nimport {MatDrawer, MatDrawerContainer, MatDrawerContent} from './drawer';\nimport {matDrawerAnimations} from './drawer-animations';\nimport {coerceBooleanProperty, coerceNumberProperty} from '@angular/cdk/coercion';\nimport {ScrollDispatcher} from '@angular/cdk/scrolling';\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-sidenav-content',\n  template: '<ng-content></ng-content>',\n  host: {\n    'class': 'mat-drawer-content mat-sidenav-content',\n    '[style.margin-left.px]': '_container._contentMargins.left',\n    '[style.margin-right.px]': '_container._contentMargins.right',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatSidenavContent extends MatDrawerContent {\n  constructor(\n      changeDetectorRef: ChangeDetectorRef,\n      @Inject(forwardRef(() => MatSidenavContainer)) container: MatSidenavContainer,\n      elementRef: ElementRef<HTMLElement>,\n      scrollDispatcher: ScrollDispatcher,\n      ngZone: NgZone) {\n    super(changeDetectorRef, container, elementRef, scrollDispatcher, ngZone);\n  }\n}\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-sidenav',\n  exportAs: 'matSidenav',\n  template: '<ng-content></ng-content>',\n  animations: [matDrawerAnimations.transformDrawer],\n  host: {\n    'class': 'mat-drawer mat-sidenav',\n    'tabIndex': '-1',\n    '[@transform]': '_animationState',\n    '(@transform.start)': '_onAnimationStart($event)',\n    '(@transform.done)': '_onAnimationEnd($event)',\n    // must prevent the browser from aligning text based on value\n    '[attr.align]': 'null',\n    '[class.mat-drawer-end]': 'position === \"end\"',\n    '[class.mat-drawer-over]': 'mode === \"over\"',\n    '[class.mat-drawer-push]': 'mode === \"push\"',\n    '[class.mat-drawer-side]': 'mode === \"side\"',\n    '[class.mat-sidenav-fixed]': 'fixedInViewport',\n    '[style.top.px]': 'fixedInViewport ? fixedTopGap : null',\n    '[style.bottom.px]': 'fixedInViewport ? fixedBottomGap : null',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatSidenav extends MatDrawer {\n  /** Whether the sidenav is fixed in the viewport. */\n  @Input()\n  get fixedInViewport(): boolean { return this._fixedInViewport; }\n  set fixedInViewport(value) { this._fixedInViewport = coerceBooleanProperty(value); }\n  private _fixedInViewport = false;\n\n  /**\n   * The gap between the top of the sidenav and the top of the viewport when the sidenav is in fixed\n   * mode.\n   */\n  @Input()\n  get fixedTopGap(): number { return this._fixedTopGap; }\n  set fixedTopGap(value) { this._fixedTopGap = coerceNumberProperty(value); }\n  private _fixedTopGap = 0;\n\n  /**\n   * The gap between the bottom of the sidenav and the bottom of the viewport when the sidenav is in\n   * fixed mode.\n   */\n  @Input()\n  get fixedBottomGap(): number { return this._fixedBottomGap; }\n  set fixedBottomGap(value) { this._fixedBottomGap = coerceNumberProperty(value); }\n  private _fixedBottomGap = 0;\n}\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-sidenav-container',\n  exportAs: 'matSidenavContainer',\n  templateUrl: 'sidenav-container.html',\n  styleUrls: ['drawer.css'],\n  host: {\n    'class': 'mat-drawer-container mat-sidenav-container',\n    '[class.mat-drawer-container-explicit-backdrop]': '_backdropOverride',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatSidenavContainer extends MatDrawerContainer {\n  @ContentChildren(MatSidenav) _drawers: QueryList<MatSidenav>;\n  @ContentChild(MatSidenavContent) _content: MatSidenavContent;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {PlatformModule} from '@angular/cdk/platform';\nimport {ScrollingModule} from '@angular/cdk/scrolling';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatDrawer, MatDrawerContainer, MatDrawerContent} from './drawer';\nimport {MatSidenav, MatSidenavContainer, MatSidenavContent} from './sidenav';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatCommonModule,\n    ScrollingModule,\n    PlatformModule,\n  ],\n  exports: [\n    MatCommonModule,\n    MatDrawer,\n    MatDrawerContainer,\n    MatDrawerContent,\n    MatSidenav,\n    MatSidenavContainer,\n    MatSidenavContent,\n  ],\n  declarations: [\n    MatDrawer,\n    MatDrawerContainer,\n    MatDrawerContent,\n    MatSidenav,\n    MatSidenavContainer,\n    MatSidenavContent,\n  ],\n})\nexport class MatSidenavModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {InjectionToken} from '@angular/core';\n\n\n/** Default `mat-slide-toggle` options that can be overridden. */\nexport interface MatSlideToggleDefaultOptions {\n  /** Whether toggle action triggers value changes in slide toggle. */\n  disableToggleValue?: boolean;\n  /** Whether drag action triggers value changes in slide toggle. */\n  disableDragValue?: boolean;\n}\n\n/** Injection token to be used to override the default options for `mat-slide-toggle`. */\nexport const MAT_SLIDE_TOGGLE_DEFAULT_OPTIONS =\n  new InjectionToken<MatSlideToggleDefaultOptions>('mat-slide-toggle-default-options', {\n    providedIn: 'root',\n    factory: () => ({disableToggleValue: false, disableDragValue: false})\n  });\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor} from '@angular/cdk/a11y';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {Platform} from '@angular/cdk/platform';\nimport {\n  AfterContentInit,\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Input,\n  OnDestroy,\n  Output,\n  ViewChild,\n  ViewEncapsulation,\n  NgZone,\n  Optional,\n  Inject,\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {\n  CanColor,\n  CanDisable,\n  CanDisableRipple,\n  HammerInput,\n  HasTabIndex,\n  mixinColor,\n  mixinDisabled,\n  mixinDisableRipple,\n  mixinTabIndex,\n} from '@angular/material/core';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\nimport {\n  MAT_SLIDE_TOGGLE_DEFAULT_OPTIONS,\n  MatSlideToggleDefaultOptions\n} from './slide-toggle-config';\n\n// Increasing integer for generating unique ids for slide-toggle components.\nlet nextUniqueId = 0;\n\nexport const MAT_SLIDE_TOGGLE_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatSlideToggle),\n  multi: true\n};\n\n/** Change event object emitted by a MatSlideToggle. */\nexport class MatSlideToggleChange {\n  constructor(\n    /** The source MatSlideToggle of the event. */\n    public source: MatSlideToggle,\n    /** The new `checked` value of the MatSlideToggle. */\n    public checked: boolean) { }\n}\n\n// Boilerplate for applying mixins to MatSlideToggle.\n/** @docs-private */\nexport class MatSlideToggleBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatSlideToggleMixinBase =\n  mixinTabIndex(mixinColor(mixinDisableRipple(mixinDisabled(MatSlideToggleBase)), 'accent'));\n\n/** Represents a slidable \"switch\" toggle that can be moved between on and off. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-slide-toggle',\n  exportAs: 'matSlideToggle',\n  host: {\n    'class': 'mat-slide-toggle',\n    '[id]': 'id',\n    '[class.mat-checked]': 'checked',\n    '[class.mat-disabled]': 'disabled',\n    '[class.mat-slide-toggle-label-before]': 'labelPosition == \"before\"',\n    '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"',\n  },\n  templateUrl: 'slide-toggle.html',\n  styleUrls: ['slide-toggle.css'],\n  providers: [MAT_SLIDE_TOGGLE_VALUE_ACCESSOR],\n  inputs: ['disabled', 'disableRipple', 'color', 'tabIndex'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatSlideToggle extends _MatSlideToggleMixinBase implements OnDestroy, AfterContentInit,\n    ControlValueAccessor, CanDisable, CanColor, HasTabIndex, CanDisableRipple {\n\n  private onChange = (_: any) => {};\n  private onTouched = () => {};\n\n  private _uniqueId: string = `mat-slide-toggle-${++nextUniqueId}`;\n  private _required: boolean = false;\n  private _checked: boolean = false;\n\n  /** Whether the thumb is currently being dragged. */\n  private _dragging = false;\n\n  /** Previous checked state before drag started. */\n  private _previousChecked: boolean;\n\n  /** Width of the thumb bar of the slide-toggle. */\n  private _thumbBarWidth: number;\n\n  /** Percentage of the thumb while dragging. Percentage as fraction of 100. */\n  private _dragPercentage: number;\n\n  /** Reference to the thumb HTMLElement. */\n  @ViewChild('thumbContainer') _thumbEl: ElementRef<HTMLElement>;\n\n  /** Reference to the thumb bar HTMLElement. */\n  @ViewChild('toggleBar') _thumbBarEl: ElementRef<HTMLElement>;\n\n  /** Name value will be applied to the input element if present */\n  @Input() name: string | null = null;\n\n  /** A unique id for the slide-toggle input. If none is supplied, it will be auto-generated. */\n  @Input() id: string = this._uniqueId;\n\n  /** Whether the label should appear after or before the slide-toggle. Defaults to 'after' */\n  @Input() labelPosition: 'before' | 'after' = 'after';\n\n  /** Whether the slide-toggle element is checked or not */\n\n  /** Used to set the aria-label attribute on the underlying input element. */\n  @Input('aria-label') ariaLabel: string | null = null;\n\n  /** Used to set the aria-labelledby attribute on the underlying input element. */\n  @Input('aria-labelledby') ariaLabelledby: string | null = null;\n\n  /** Whether the slide-toggle is required. */\n  @Input()\n  get required(): boolean { return this._required; }\n  set required(value) { this._required = coerceBooleanProperty(value); }\n\n  /** Whether the slide-toggle element is checked or not */\n  @Input()\n  get checked(): boolean { return this._checked; }\n  set checked(value) {\n    this._checked = coerceBooleanProperty(value);\n    this._changeDetectorRef.markForCheck();\n  }\n  /** An event will be dispatched each time the slide-toggle changes its value. */\n  @Output() readonly change: EventEmitter<MatSlideToggleChange> =\n      new EventEmitter<MatSlideToggleChange>();\n\n  /**\n   * An event will be dispatched each time the slide-toggle input is toggled.\n   * This event always fire when user toggle the slide toggle, but does not mean the slide toggle's\n   * value is changed. The event does not fire when user drag to change the slide toggle value.\n   */\n  @Output() readonly toggleChange: EventEmitter<void> = new EventEmitter<void>();\n\n  /**\n   * An event will be dispatched each time the slide-toggle is dragged.\n   * This event always fire when user drag the slide toggle to make a change that greater than 50%.\n   * It does not mean the slide toggle's value is changed. The event does not fire when user toggle\n   * the slide toggle to change the slide toggle's value.\n   */\n  @Output() readonly dragChange: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Returns the unique id for the visual hidden input. */\n  get inputId(): string { return `${this.id || this._uniqueId}-input`; }\n\n  /** Reference to the underlying input element. */\n  @ViewChild('input') _inputElement: ElementRef;\n\n  constructor(elementRef: ElementRef,\n              /**\n               * @deprecated The `_platform` parameter to be removed.\n               * @breaking-change 7.0.0\n               */\n              _platform: Platform,\n              private _focusMonitor: FocusMonitor,\n              private _changeDetectorRef: ChangeDetectorRef,\n              @Attribute('tabindex') tabIndex: string,\n              private _ngZone: NgZone,\n              @Inject(MAT_SLIDE_TOGGLE_DEFAULT_OPTIONS)\n                  public defaults: MatSlideToggleDefaultOptions,\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode?: string,\n              @Optional() private _dir?: Directionality) {\n    super(elementRef);\n    this.tabIndex = parseInt(tabIndex) || 0;\n  }\n\n  ngAfterContentInit() {\n    this._focusMonitor\n      .monitor(this._elementRef, true)\n      .subscribe(focusOrigin => {\n        if (!focusOrigin) {\n          // When a focused element becomes disabled, the browser *immediately* fires a blur event.\n          // Angular does not expect events to be raised during change detection, so any state\n          // change (such as a form control's 'ng-touched') will cause a changed-after-checked\n          // error. See https://github.com/angular/angular/issues/17793. To work around this,\n          // we defer telling the form control it has been touched until the next tick.\n          Promise.resolve().then(() => this.onTouched());\n        }\n      });\n  }\n\n  ngOnDestroy() {\n    this._focusMonitor.stopMonitoring(this._elementRef);\n  }\n\n  /** Method being called whenever the underlying input emits a change event. */\n  _onChangeEvent(event: Event) {\n    // We always have to stop propagation on the change event.\n    // Otherwise the change event, from the input element, will bubble up and\n    // emit its event object to the component's `change` output.\n    event.stopPropagation();\n\n    if (!this._dragging) {\n      this.toggleChange.emit();\n    }\n    // Releasing the pointer over the `<label>` element while dragging triggers another\n    // click event on the `<label>` element. This means that the checked state of the underlying\n    // input changed unintentionally and needs to be changed back. Or when the slide toggle's config\n    // disabled toggle change event by setting `disableToggleValue: true`, the slide toggle's value\n    // does not change, and the checked state of the underlying input needs to be changed back.\n    if (this._dragging || this.defaults.disableToggleValue) {\n      this._inputElement.nativeElement.checked = this.checked;\n      return;\n    }\n\n    // Sync the value from the underlying input element with the component instance.\n    this.checked = this._inputElement.nativeElement.checked;\n\n    // Emit our custom change event only if the underlying input emitted one. This ensures that\n    // there is no change event, when the checked state changes programmatically.\n    this._emitChangeEvent();\n  }\n\n  /** Method being called whenever the slide-toggle has been clicked. */\n  _onInputClick(event: Event) {\n    // We have to stop propagation for click events on the visual hidden input element.\n    // By default, when a user clicks on a label element, a generated click event will be\n    // dispatched on the associated input element. Since we are using a label element as our\n    // root container, the click event on the `slide-toggle` will be executed twice.\n    // The real click event will bubble up, and the generated click event also tries to bubble up.\n    // This will lead to multiple click events.\n    // Preventing bubbling for the second event will solve that issue.\n    event.stopPropagation();\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  writeValue(value: any): void {\n    this.checked = !!value;\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  registerOnChange(fn: any): void {\n    this.onChange = fn;\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  registerOnTouched(fn: any): void {\n    this.onTouched = fn;\n  }\n\n  /** Implemented as a part of ControlValueAccessor. */\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Focuses the slide-toggle. */\n  focus(): void {\n    this._focusMonitor.focusVia(this._inputElement.nativeElement, 'keyboard');\n  }\n\n  /** Toggles the checked state of the slide-toggle. */\n  toggle(): void {\n    this.checked = !this.checked;\n    this.onChange(this.checked);\n  }\n\n  /**\n   * Emits a change event on the `change` output. Also notifies the FormControl about the change.\n   */\n  private _emitChangeEvent() {\n    this.onChange(this.checked);\n    this.change.emit(new MatSlideToggleChange(this, this.checked));\n  }\n\n  /** Retrieves the percentage of thumb from the moved distance. Percentage as fraction of 100. */\n  private _getDragPercentage(distance: number) {\n    let percentage = (distance / this._thumbBarWidth) * 100;\n\n    // When the toggle was initially checked, then we have to start the drag at the end.\n    if (this._previousChecked) {\n      percentage += 100;\n    }\n\n    return Math.max(0, Math.min(percentage, 100));\n  }\n\n  _onDragStart() {\n    if (!this.disabled && !this._dragging) {\n      const thumbEl = this._thumbEl.nativeElement;\n      this._thumbBarWidth = this._thumbBarEl.nativeElement.clientWidth - thumbEl.clientWidth;\n      thumbEl.classList.add('mat-dragging');\n\n      this._previousChecked = this.checked;\n      this._dragging = true;\n    }\n  }\n\n  _onDrag(event: HammerInput) {\n    if (this._dragging) {\n      const direction = this._dir && this._dir.value === 'rtl' ? -1 : 1;\n      this._dragPercentage = this._getDragPercentage(event.deltaX * direction);\n      // Calculate the moved distance based on the thumb bar width.\n      const dragX = (this._dragPercentage / 100) * this._thumbBarWidth * direction;\n      this._thumbEl.nativeElement.style.transform = `translate3d(${dragX}px, 0, 0)`;\n    }\n  }\n\n  _onDragEnd() {\n    if (this._dragging) {\n      const newCheckedValue = this._dragPercentage > 50;\n\n      if (newCheckedValue !== this.checked) {\n        this.dragChange.emit();\n        if (!this.defaults.disableDragValue) {\n          this.checked = newCheckedValue;\n          this._emitChangeEvent();\n        }\n      }\n\n      // The drag should be stopped outside of the current event handler, otherwise the\n      // click event will be fired before it and will revert the drag change.\n      this._ngZone.runOutsideAngular(() => setTimeout(() => {\n        if (this._dragging) {\n          this._dragging = false;\n          this._thumbEl.nativeElement.classList.remove('mat-dragging');\n\n          // Reset the transform because the component will take care\n          // of the thumb position after drag.\n          this._thumbEl.nativeElement.style.transform = '';\n        }\n      }));\n    }\n  }\n\n  /** Method being called whenever the label text changes. */\n  _onLabelTextChange() {\n    // This method is getting called whenever the label of the slide-toggle changes.\n    // Since the slide-toggle uses the OnPush strategy we need to notify it about the change\n    // that has been recognized by the cdkObserveContent directive.\n    this._changeDetectorRef.markForCheck();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ObserversModule} from '@angular/cdk/observers';\nimport {NgModule} from '@angular/core';\nimport {GestureConfig, MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {HAMMER_GESTURE_CONFIG} from '@angular/platform-browser';\nimport {MatSlideToggle} from './slide-toggle';\n\n\n@NgModule({\n  imports: [MatRippleModule, MatCommonModule, ObserversModule],\n  exports: [MatSlideToggle, MatCommonModule],\n  declarations: [MatSlideToggle],\n  providers: [\n    {provide: HAMMER_GESTURE_CONFIG, useClass: GestureConfig}\n  ],\n})\nexport class MatSlideToggleModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  Component,\n  ChangeDetectionStrategy,\n  ElementRef,\n  Inject,\n  Input,\n  Optional,\n  ViewEncapsulation,\n  InjectionToken,\n  inject,\n} from '@angular/core';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\nimport {CanColor, mixinColor} from '@angular/material/core';\nimport {DOCUMENT} from '@angular/common';\n\n// TODO(josephperrott): Benchpress tests.\n// TODO(josephperrott): Add ARIA attributes for progress bar \"for\".\n\n// Boilerplate for applying mixins to MatProgressBar.\n/** @docs-private */\nexport class MatProgressBarBase {\n  constructor(public _elementRef: ElementRef) { }\n}\n\nexport const _MatProgressBarMixinBase = mixinColor(MatProgressBarBase, 'primary');\n\n/**\n * Injection token used to provide the current location to `MatProgressBar`.\n * Used to handle server-side rendering and to stub out during unit tests.\n * @docs-private\n */\nexport const MAT_PROGRESS_BAR_LOCATION = new InjectionToken<MatProgressBarLocation>(\n  'mat-progress-bar-location',\n  {providedIn: 'root', factory: MAT_PROGRESS_BAR_LOCATION_FACTORY}\n);\n\n/**\n * Stubbed out location for `MatProgressBar`.\n * @docs-private\n */\nexport interface MatProgressBarLocation {\n  pathname: string;\n}\n\n/** @docs-private */\nexport function MAT_PROGRESS_BAR_LOCATION_FACTORY(): MatProgressBarLocation {\n  const _document = inject(DOCUMENT);\n  const pathname = (_document && _document.location && _document.location.pathname) || '';\n  return {pathname};\n}\n\n\n/** Counter used to generate unique IDs for progress bars. */\nlet progressbarId = 0;\n\n/**\n * `<mat-progress-bar>` component.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-progress-bar',\n  exportAs: 'matProgressBar',\n  host: {\n    'role': 'progressbar',\n    'aria-valuemin': '0',\n    'aria-valuemax': '100',\n    '[attr.aria-valuenow]': 'value',\n    '[attr.mode]': 'mode',\n    'class': 'mat-progress-bar',\n    '[class._mat-animation-noopable]': `_animationMode === 'NoopAnimations'`,\n  },\n  inputs: ['color'],\n  templateUrl: 'progress-bar.html',\n  styleUrls: ['progress-bar.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatProgressBar extends _MatProgressBarMixinBase implements CanColor {\n  constructor(public _elementRef: ElementRef,\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode?: string,\n              /**\n               * @deprecated `location` parameter to be made required.\n               * @breaking-change 8.0.0\n               */\n              @Optional() @Inject(MAT_PROGRESS_BAR_LOCATION) location?: MatProgressBarLocation) {\n    super(_elementRef);\n\n    // We need to prefix the SVG reference with the current path, otherwise they won't work\n    // in Safari if the page has a `<base>` tag. Note that we need quotes inside the `url()`,\n    // because named route URLs can contain parentheses (see #12338). Also we don't use\n    // `Location` from `@angular/common` since we can't tell the difference between whether\n    // the consumer is using the hash location strategy or not, because `Location` normalizes\n    // both `/#/foo/bar` and `/foo/bar` to the same thing.\n    const path = location && location.pathname ? location.pathname.split('#')[0] : '';\n    this._rectangleFillValue = `url('${path}#${this.progressbarId}')`;\n  }\n\n  /** Value of the progress bar. Defaults to zero. Mirrored to aria-valuenow. */\n  @Input()\n  get value(): number { return this._value; }\n  set value(v: number) { this._value = clamp(v || 0); }\n  private _value: number = 0;\n\n  /** Buffer value of the progress bar. Defaults to zero. */\n  @Input()\n  get bufferValue(): number { return this._bufferValue; }\n  set bufferValue(v: number) { this._bufferValue = clamp(v || 0); }\n  private _bufferValue: number = 0;\n\n  /**\n   * Mode of the progress bar.\n   *\n   * Input must be one of these values: determinate, indeterminate, buffer, query, defaults to\n   * 'determinate'.\n   * Mirrored to mode attribute.\n   */\n  @Input() mode: 'determinate' | 'indeterminate' | 'buffer' | 'query' = 'determinate';\n\n  /** ID of the progress bar. */\n  progressbarId = `mat-progress-bar-${progressbarId++}`;\n\n  /** Attribute to be used for the `fill` attribute on the internal `rect` element. */\n  _rectangleFillValue: string;\n\n  /** Gets the current transform value for the progress bar's primary indicator. */\n  _primaryTransform() {\n    const scale = this.value / 100;\n    return {transform: `scaleX(${scale})`};\n  }\n\n  /**\n   * Gets the current transform value for the progress bar's buffer indicator. Only used if the\n   * progress mode is set to buffer, otherwise returns an undefined, causing no transformation.\n   */\n  _bufferTransform() {\n    if (this.mode === 'buffer') {\n      const scale = this.bufferValue / 100;\n      return {transform: `scaleX(${scale})`};\n    }\n  }\n}\n\n/** Clamps a value to be between two numbers, by default 0 and 100. */\nfunction clamp(v: number, min = 0, max = 100) {\n  return Math.max(min, Math.min(max, v));\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatProgressBar} from './progress-bar';\n\n\n@NgModule({\n  imports: [CommonModule, MatCommonModule],\n  exports: [MatProgressBar, MatCommonModule],\n  declarations: [MatProgressBar],\n})\nexport class MatProgressBarModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ChangeDetectionStrategy,\n  Inject,\n  Input,\n  ElementRef,\n  ViewEncapsulation,\n  Optional,\n  InjectionToken,\n} from '@angular/core';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\nimport {CanColor, mixinColor} from '@angular/material/core';\nimport {Platform} from '@angular/cdk/platform';\nimport {DOCUMENT} from '@angular/common';\nimport {coerceNumberProperty} from '@angular/cdk/coercion';\n\n/** Possible mode for a progress spinner. */\nexport type ProgressSpinnerMode = 'determinate' | 'indeterminate';\n\n/**\n * Base reference size of the spinner.\n * @docs-private\n */\nconst BASE_SIZE = 100;\n\n/**\n * Base reference stroke width of the spinner.\n * @docs-private\n */\nconst BASE_STROKE_WIDTH = 10;\n\n// Boilerplate for applying mixins to MatProgressSpinner.\n/** @docs-private */\nexport class MatProgressSpinnerBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatProgressSpinnerMixinBase = mixinColor(MatProgressSpinnerBase, 'primary');\n\n/** Default `mat-progress-spinner` options that can be overridden. */\nexport interface MatProgressSpinnerDefaultOptions {\n  /** Diameter of the spinner. */\n  diameter?: number;\n  /** Width of the spinner's stroke. */\n  strokeWidth?: number;\n  /**\n   * Whether the animations should be force to be enabled, ignoring if the current environment is\n   * using NoopAnimationsModule.\n   */\n  _forceAnimations?: boolean;\n}\n\n/** Injection token to be used to override the default options for `mat-progress-spinner`. */\nexport const MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS =\n    new InjectionToken<MatProgressSpinnerDefaultOptions>('mat-progress-spinner-default-options', {\n      providedIn: 'root',\n      factory: MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS_FACTORY,\n    });\n\n/** @docs-private */\nexport function MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS_FACTORY(): MatProgressSpinnerDefaultOptions {\n  return {diameter: BASE_SIZE};\n}\n\n// .0001 percentage difference is necessary in order to avoid unwanted animation frames\n// for example because the animation duration is 4 seconds, .1% accounts to 4ms\n// which are enough to see the flicker described in\n// https://github.com/angular/material2/issues/8984\nconst INDETERMINATE_ANIMATION_TEMPLATE = `\n @keyframes mat-progress-spinner-stroke-rotate-DIAMETER {\n    0%      { stroke-dashoffset: START_VALUE;  transform: rotate(0); }\n    12.5%   { stroke-dashoffset: END_VALUE;    transform: rotate(0); }\n    12.5001%  { stroke-dashoffset: END_VALUE;    transform: rotateX(180deg) rotate(72.5deg); }\n    25%     { stroke-dashoffset: START_VALUE;  transform: rotateX(180deg) rotate(72.5deg); }\n\n    25.0001%   { stroke-dashoffset: START_VALUE;  transform: rotate(270deg); }\n    37.5%   { stroke-dashoffset: END_VALUE;    transform: rotate(270deg); }\n    37.5001%  { stroke-dashoffset: END_VALUE;    transform: rotateX(180deg) rotate(161.5deg); }\n    50%     { stroke-dashoffset: START_VALUE;  transform: rotateX(180deg) rotate(161.5deg); }\n\n    50.0001%  { stroke-dashoffset: START_VALUE;  transform: rotate(180deg); }\n    62.5%   { stroke-dashoffset: END_VALUE;    transform: rotate(180deg); }\n    62.5001%  { stroke-dashoffset: END_VALUE;    transform: rotateX(180deg) rotate(251.5deg); }\n    75%     { stroke-dashoffset: START_VALUE;  transform: rotateX(180deg) rotate(251.5deg); }\n\n    75.0001%  { stroke-dashoffset: START_VALUE;  transform: rotate(90deg); }\n    87.5%   { stroke-dashoffset: END_VALUE;    transform: rotate(90deg); }\n    87.5001%  { stroke-dashoffset: END_VALUE;    transform: rotateX(180deg) rotate(341.5deg); }\n    100%    { stroke-dashoffset: START_VALUE;  transform: rotateX(180deg) rotate(341.5deg); }\n  }\n`;\n\n/**\n * `<mat-progress-spinner>` component.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-progress-spinner',\n  exportAs: 'matProgressSpinner',\n  host: {\n    'role': 'progressbar',\n    'class': 'mat-progress-spinner',\n    '[class._mat-animation-noopable]': `_noopAnimations`,\n    '[style.width.px]': 'diameter',\n    '[style.height.px]': 'diameter',\n    '[attr.aria-valuemin]': 'mode === \"determinate\" ? 0 : null',\n    '[attr.aria-valuemax]': 'mode === \"determinate\" ? 100 : null',\n    '[attr.aria-valuenow]': 'value',\n    '[attr.mode]': 'mode',\n  },\n  inputs: ['color'],\n  templateUrl: 'progress-spinner.html',\n  styleUrls: ['progress-spinner.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatProgressSpinner extends _MatProgressSpinnerMixinBase implements CanColor {\n\n  private _value = 0;\n  private _strokeWidth: number;\n  private _fallbackAnimation = false;\n\n  /** Tracks diameters of existing instances to de-dupe generated styles (default d = 100) */\n  private static diameters = new Set<number>([BASE_SIZE]);\n\n  /**\n   * Used for storing all of the generated keyframe animations.\n   * @dynamic\n   */\n  private static styleTag: HTMLStyleElement|null = null;\n\n  /** Whether the _mat-animation-noopable class should be applied, disabling animations.  */\n  _noopAnimations: boolean = this.animationMode === 'NoopAnimations' && (\n      !!this.defaults && !this.defaults._forceAnimations);\n\n  /** The diameter of the progress spinner (will set width and height of svg). */\n  @Input()\n  get diameter(): number { return this._diameter; }\n  set diameter(size: number) {\n    this._diameter = coerceNumberProperty(size);\n\n    if (!this._fallbackAnimation && !MatProgressSpinner.diameters.has(this._diameter)) {\n      this._attachStyleNode();\n    }\n  }\n  private _diameter = BASE_SIZE;\n\n  /** Stroke width of the progress spinner. */\n  @Input()\n  get strokeWidth(): number {\n    return this._strokeWidth || this.diameter / 10;\n  }\n  set strokeWidth(value: number) {\n    this._strokeWidth = coerceNumberProperty(value);\n  }\n\n  /** Mode of the progress circle */\n  @Input() mode: ProgressSpinnerMode = 'determinate';\n\n  /** Value of the progress circle. */\n  @Input()\n  get value(): number {\n    return this.mode === 'determinate' ? this._value : 0;\n  }\n  set value(newValue: number) {\n    this._value = Math.max(0, Math.min(100, coerceNumberProperty(newValue)));\n  }\n\n  constructor(public _elementRef: ElementRef,\n              platform: Platform,\n              @Optional() @Inject(DOCUMENT) private _document: any,\n              // @breaking-change 7.0.0 animationMode and defaults parameters to be made required.\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) private animationMode?: string,\n              @Inject(MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS)\n                  private defaults?: MatProgressSpinnerDefaultOptions) {\n\n    super(_elementRef);\n    this._fallbackAnimation = platform.EDGE || platform.TRIDENT;\n\n    if (defaults) {\n      if (defaults.diameter) {\n        this.diameter = defaults.diameter;\n      }\n\n      if (defaults.strokeWidth) {\n        this.strokeWidth = defaults.strokeWidth;\n      }\n    }\n\n    // On IE and Edge, we can't animate the `stroke-dashoffset`\n    // reliably so we fall back to a non-spec animation.\n    const animationClass =\n      `mat-progress-spinner-indeterminate${this._fallbackAnimation ? '-fallback' : ''}-animation`;\n\n    _elementRef.nativeElement.classList.add(animationClass);\n  }\n\n  /** The radius of the spinner, adjusted for stroke width. */\n  get _circleRadius() {\n    return (this.diameter - BASE_STROKE_WIDTH) / 2;\n  }\n\n  /** The view box of the spinner's svg element. */\n  get _viewBox() {\n    const viewBox = this._circleRadius * 2 + this.strokeWidth;\n    return `0 0 ${viewBox} ${viewBox}`;\n  }\n\n  /** The stroke circumference of the svg circle. */\n  get _strokeCircumference(): number {\n    return 2 * Math.PI * this._circleRadius;\n  }\n\n  /** The dash offset of the svg circle. */\n  get _strokeDashOffset() {\n    if (this.mode === 'determinate') {\n      return this._strokeCircumference * (100 - this._value) / 100;\n    }\n\n    // In fallback mode set the circle to 80% and rotate it with CSS.\n    if (this._fallbackAnimation && this.mode === 'indeterminate') {\n      return this._strokeCircumference * 0.2;\n    }\n\n    return null;\n  }\n\n  /** Stroke width of the circle in percent. */\n  get _circleStrokeWidth() {\n    return this.strokeWidth / this.diameter * 100;\n  }\n\n  /** Dynamically generates a style tag containing the correct animation for this diameter. */\n  private _attachStyleNode(): void {\n    let styleTag = MatProgressSpinner.styleTag;\n\n    if (!styleTag) {\n      styleTag = this._document.createElement('style');\n      this._document.head.appendChild(styleTag);\n      MatProgressSpinner.styleTag = styleTag;\n    }\n\n    if (styleTag && styleTag.sheet) {\n      (styleTag.sheet as CSSStyleSheet).insertRule(this._getAnimationText(), 0);\n    }\n\n    MatProgressSpinner.diameters.add(this.diameter);\n  }\n\n  /** Generates animation styles adjusted for the spinner's diameter. */\n  private _getAnimationText(): string {\n    return INDETERMINATE_ANIMATION_TEMPLATE\n        // Animation should begin at 5% and end at 80%\n        .replace(/START_VALUE/g, `${0.95 * this._strokeCircumference}`)\n        .replace(/END_VALUE/g, `${0.2 * this._strokeCircumference}`)\n        .replace(/DIAMETER/g, `${this.diameter}`);\n  }\n}\n\n\n/**\n * `<mat-spinner>` component.\n *\n * This is a component definition to be used as a convenience reference to create an\n * indeterminate `<mat-progress-spinner>` instance.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-spinner',\n  host: {\n    'role': 'progressbar',\n    'mode': 'indeterminate',\n    'class': 'mat-spinner mat-progress-spinner',\n    '[class._mat-animation-noopable]': `_noopAnimations`,\n    '[style.width.px]': 'diameter',\n    '[style.height.px]': 'diameter',\n  },\n  inputs: ['color'],\n  templateUrl: 'progress-spinner.html',\n  styleUrls: ['progress-spinner.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatSpinner extends MatProgressSpinner {\n  constructor(elementRef: ElementRef, platform: Platform,\n              @Optional() @Inject(DOCUMENT) document: any,\n              // @breaking-changes 7.0.0 animationMode and defaults parameters to be made required.\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) animationMode?: string,\n              @Inject(MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS)\n                  defaults?: MatProgressSpinnerDefaultOptions) {\n    super(elementRef, platform, document, animationMode, defaults);\n    this.mode = 'indeterminate';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatProgressSpinner, MatSpinner} from './progress-spinner';\n\n\n@NgModule({\n  imports: [MatCommonModule, CommonModule],\n  exports: [\n    MatProgressSpinner,\n    MatSpinner,\n    MatCommonModule\n  ],\n  declarations: [\n    MatProgressSpinner,\n    MatSpinner\n  ],\n})\nclass MatProgressSpinnerModule {}\n\nexport {MatProgressSpinnerModule};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {UniqueSelectionDispatcher} from '@angular/cdk/collections';\nimport {\n  AfterContentInit,\n  AfterViewInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Input,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Output,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n  Inject,\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {\n  CanColor,\n  CanDisable,\n  CanDisableRipple,\n  HasTabIndex,\n  mixinColor,\n  mixinDisabled,\n  mixinDisableRipple,\n  mixinTabIndex,\n} from '@angular/material/core';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\n\n\n// Increasing integer for generating unique ids for radio components.\nlet nextUniqueId = 0;\n\n/**\n * Provider Expression that allows mat-radio-group to register as a ControlValueAccessor. This\n * allows it to support [(ngModel)] and ngControl.\n * @docs-private\n */\nexport const MAT_RADIO_GROUP_CONTROL_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatRadioGroup),\n  multi: true\n};\n\n/** Change event object emitted by MatRadio and MatRadioGroup. */\nexport class MatRadioChange {\n  constructor(\n    /** The MatRadioButton that emits the change event. */\n    public source: MatRadioButton,\n    /** The value of the MatRadioButton. */\n    public value: any) {}\n}\n\n\n// Boilerplate for applying mixins to MatRadioGroup.\n/** @docs-private */\nexport class MatRadioGroupBase { }\nexport const _MatRadioGroupMixinBase = mixinDisabled(MatRadioGroupBase);\n\n/**\n * A group of radio buttons. May contain one or more `<mat-radio-button>` elements.\n */\n@Directive({\n  selector: 'mat-radio-group',\n  exportAs: 'matRadioGroup',\n  providers: [MAT_RADIO_GROUP_CONTROL_VALUE_ACCESSOR],\n  host: {\n    'role': 'radiogroup',\n    'class': 'mat-radio-group',\n  },\n  inputs: ['disabled'],\n})\nexport class MatRadioGroup extends _MatRadioGroupMixinBase\n    implements AfterContentInit, ControlValueAccessor, CanDisable {\n\n  /** Selected value for the radio group. */\n  private _value: any = null;\n\n  /** The HTML name attribute applied to radio buttons in this group. */\n  private _name: string = `mat-radio-group-${nextUniqueId++}`;\n\n  /** The currently selected radio button. Should match value. */\n  private _selected: MatRadioButton | null = null;\n\n  /** Whether the `value` has been set to its initial value. */\n  private _isInitialized: boolean = false;\n\n  /** Whether the labels should appear after or before the radio-buttons. Defaults to 'after' */\n  private _labelPosition: 'before' | 'after' = 'after';\n\n  /** Whether the radio group is disabled. */\n  private _disabled: boolean = false;\n\n  /** Whether the radio group is required. */\n  private _required: boolean = false;\n\n  /** The method to be called in order to update ngModel */\n  _controlValueAccessorChangeFn: (value: any) => void = () => {};\n\n  /**\n   * onTouch function registered via registerOnTouch (ControlValueAccessor).\n   * @docs-private\n   */\n  onTouched: () => any = () => {};\n\n  /**\n   * Event emitted when the group value changes.\n   * Change events are only emitted when the value changes due to user interaction with\n   * a radio button (the same behavior as `<input type-\"radio\">`).\n   */\n  @Output() readonly change: EventEmitter<MatRadioChange> = new EventEmitter<MatRadioChange>();\n\n  /** Child radio buttons. */\n  @ContentChildren(forwardRef(() => MatRadioButton), { descendants: true })\n  _radios: QueryList<MatRadioButton>;\n\n  /** Name of the radio button group. All radio buttons inside this group will use this name. */\n  @Input()\n  get name(): string { return this._name; }\n  set name(value: string) {\n    this._name = value;\n    this._updateRadioButtonNames();\n  }\n\n  /** Whether the labels should appear after or before the radio-buttons. Defaults to 'after' */\n  @Input()\n  get labelPosition(): 'before' | 'after' {\n    return this._labelPosition;\n  }\n  set labelPosition(v) {\n    this._labelPosition = v === 'before' ? 'before' : 'after';\n    this._markRadiosForCheck();\n  }\n\n  /**\n   * Value for the radio-group. Should equal the value of the selected radio button if there is\n   * a corresponding radio button with a matching value. If there is not such a corresponding\n   * radio button, this value persists to be applied in case a new radio button is added with a\n   * matching value.\n   */\n  @Input()\n  get value(): any { return this._value; }\n  set value(newValue: any) {\n    if (this._value !== newValue) {\n      // Set this before proceeding to ensure no circular loop occurs with selection.\n      this._value = newValue;\n\n      this._updateSelectedRadioFromValue();\n      this._checkSelectedRadioButton();\n    }\n  }\n\n  _checkSelectedRadioButton() {\n    if (this._selected && !this._selected.checked) {\n      this._selected.checked = true;\n    }\n  }\n\n  /**\n   * The currently selected radio button. If set to a new radio button, the radio group value\n   * will be updated to match the new selected button.\n   */\n  @Input()\n  get selected() { return this._selected; }\n  set selected(selected: MatRadioButton | null) {\n    this._selected = selected;\n    this.value = selected ? selected.value : null;\n    this._checkSelectedRadioButton();\n  }\n\n  /** Whether the radio group is disabled */\n  @Input()\n  get disabled(): boolean { return this._disabled; }\n  set disabled(value) {\n    this._disabled = coerceBooleanProperty(value);\n    this._markRadiosForCheck();\n  }\n\n  /** Whether the radio group is required */\n  @Input()\n  get required(): boolean { return this._required; }\n  set required(value: boolean) {\n    this._required = coerceBooleanProperty(value);\n    this._markRadiosForCheck();\n  }\n\n  constructor(private _changeDetector: ChangeDetectorRef) {\n    super();\n  }\n\n  /**\n   * Initialize properties once content children are available.\n   * This allows us to propagate relevant attributes to associated buttons.\n   */\n  ngAfterContentInit() {\n    // Mark this component as initialized in AfterContentInit because the initial value can\n    // possibly be set by NgModel on MatRadioGroup, and it is possible that the OnInit of the\n    // NgModel occurs *after* the OnInit of the MatRadioGroup.\n    this._isInitialized = true;\n  }\n\n  /**\n   * Mark this group as being \"touched\" (for ngModel). Meant to be called by the contained\n   * radio buttons upon their blur.\n   */\n  _touch() {\n    if (this.onTouched) {\n      this.onTouched();\n    }\n  }\n\n  private _updateRadioButtonNames(): void {\n    if (this._radios) {\n      this._radios.forEach(radio => {\n        radio.name = this.name;\n      });\n    }\n  }\n\n  /** Updates the `selected` radio button from the internal _value state. */\n  private _updateSelectedRadioFromValue(): void {\n    // If the value already matches the selected radio, do nothing.\n    const isAlreadySelected = this._selected !== null && this._selected.value === this._value;\n\n    if (this._radios && !isAlreadySelected) {\n      this._selected = null;\n      this._radios.forEach(radio => {\n        radio.checked = this.value === radio.value;\n        if (radio.checked) {\n          this._selected = radio;\n        }\n      });\n    }\n  }\n\n  /** Dispatch change event with current selection and group value. */\n  _emitChangeEvent(): void {\n    if (this._isInitialized) {\n      this.change.emit(new MatRadioChange(this._selected!, this._value));\n    }\n  }\n\n  _markRadiosForCheck() {\n    if (this._radios) {\n      this._radios.forEach(radio => radio._markForCheck());\n    }\n  }\n\n  /**\n   * Sets the model value. Implemented as part of ControlValueAccessor.\n   * @param value\n   */\n  writeValue(value: any) {\n    this.value = value;\n    this._changeDetector.markForCheck();\n  }\n\n  /**\n   * Registers a callback to be triggered when the model value changes.\n   * Implemented as part of ControlValueAccessor.\n   * @param fn Callback to be registered.\n   */\n  registerOnChange(fn: (value: any) => void) {\n    this._controlValueAccessorChangeFn = fn;\n  }\n\n  /**\n   * Registers a callback to be triggered when the control is touched.\n   * Implemented as part of ControlValueAccessor.\n   * @param fn Callback to be registered.\n   */\n  registerOnTouched(fn: any) {\n    this.onTouched = fn;\n  }\n\n  /**\n   * Sets the disabled state of the control. Implemented as a part of ControlValueAccessor.\n   * @param isDisabled Whether the control should be disabled.\n   */\n  setDisabledState(isDisabled: boolean) {\n    this.disabled = isDisabled;\n    this._changeDetector.markForCheck();\n  }\n}\n\n// Boilerplate for applying mixins to MatRadioButton.\n/** @docs-private */\nexport class MatRadioButtonBase {\n  // Since the disabled property is manually defined for the MatRadioButton and isn't set up in\n  // the mixin base class. To be able to use the tabindex mixin, a disabled property must be\n  // defined to properly work.\n  disabled: boolean;\n\n  constructor(public _elementRef: ElementRef) {}\n}\n// As per Material design specifications the selection control radio should use the accent color\n// palette by default. https://material.io/guidelines/components/selection-controls.html\nexport const _MatRadioButtonMixinBase =\n    mixinColor(mixinDisableRipple(mixinTabIndex(MatRadioButtonBase)), 'accent');\n\n/**\n * A Material design radio-button. Typically placed inside of `<mat-radio-group>` elements.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-radio-button',\n  templateUrl: 'radio.html',\n  styleUrls: ['radio.css'],\n  inputs: ['color', 'disableRipple', 'tabIndex'],\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matRadioButton',\n  host: {\n    'class': 'mat-radio-button',\n    '[class.mat-radio-checked]': 'checked',\n    '[class.mat-radio-disabled]': 'disabled',\n    '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"',\n    '[attr.id]': 'id',\n    // Note: under normal conditions focus shouldn't land on this element, however it may be\n    // programmatically set, for example inside of a focus trap, in this case we want to forward\n    // the focus to the native element.\n    '(focus)': '_inputElement.nativeElement.focus()',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatRadioButton extends _MatRadioButtonMixinBase\n    implements OnInit, AfterViewInit, OnDestroy, CanColor, CanDisableRipple, HasTabIndex {\n\n  private _uniqueId: string = `mat-radio-${++nextUniqueId}`;\n\n  /** The unique ID for the radio button. */\n  @Input() id: string = this._uniqueId;\n\n  /** Analog to HTML 'name' attribute used to group radios for unique selection. */\n  @Input() name: string;\n\n  /** Used to set the 'aria-label' attribute on the underlying input element. */\n  @Input('aria-label') ariaLabel: string;\n\n  /** The 'aria-labelledby' attribute takes precedence as the element's text alternative. */\n  @Input('aria-labelledby') ariaLabelledby: string;\n\n  /** The 'aria-describedby' attribute is read after the element's label and field type. */\n  @Input('aria-describedby') ariaDescribedby: string;\n\n  /** Whether this radio button is checked. */\n  @Input()\n  get checked(): boolean { return this._checked; }\n  set checked(value: boolean) {\n    const newCheckedState = coerceBooleanProperty(value);\n    if (this._checked !== newCheckedState) {\n      this._checked = newCheckedState;\n      if (newCheckedState && this.radioGroup && this.radioGroup.value !== this.value) {\n        this.radioGroup.selected = this;\n      } else if (!newCheckedState && this.radioGroup && this.radioGroup.value === this.value) {\n\n        // When unchecking the selected radio button, update the selected radio\n        // property on the group.\n        this.radioGroup.selected = null;\n      }\n\n      if (newCheckedState) {\n        // Notify all radio buttons with the same name to un-check.\n        this._radioDispatcher.notify(this.id, this.name);\n      }\n      this._changeDetector.markForCheck();\n    }\n  }\n\n  /** The value of this radio button. */\n  @Input()\n  get value(): any { return this._value; }\n  set value(value: any) {\n    if (this._value !== value) {\n      this._value = value;\n      if (this.radioGroup !== null) {\n        if (!this.checked) {\n          // Update checked when the value changed to match the radio group's value\n          this.checked = this.radioGroup.value === value;\n        }\n        if (this.checked) {\n          this.radioGroup.selected = this;\n        }\n      }\n    }\n  }\n\n  /** Whether the label should appear after or before the radio button. Defaults to 'after' */\n  @Input()\n  get labelPosition(): 'before' | 'after' {\n    return this._labelPosition || (this.radioGroup && this.radioGroup.labelPosition) || 'after';\n  }\n  set labelPosition(value) {\n    this._labelPosition = value;\n  }\n  private _labelPosition: 'before' | 'after';\n\n  /** Whether the radio button is disabled. */\n  @Input()\n  get disabled(): boolean {\n    return this._disabled || (this.radioGroup !== null && this.radioGroup.disabled);\n  }\n  set disabled(value: boolean) {\n    const newDisabledState = coerceBooleanProperty(value);\n    if (this._disabled !== newDisabledState) {\n      this._disabled = newDisabledState;\n      this._changeDetector.markForCheck();\n    }\n  }\n\n  /** Whether the radio button is required. */\n  @Input()\n  get required(): boolean {\n    return this._required || (this.radioGroup && this.radioGroup.required);\n  }\n  set required(value: boolean) {\n    this._required = coerceBooleanProperty(value);\n  }\n\n  /**\n   * Event emitted when the checked state of this radio button changes.\n   * Change events are only emitted when the value changes due to user interaction with\n   * the radio button (the same behavior as `<input type-\"radio\">`).\n   */\n  @Output() readonly change: EventEmitter<MatRadioChange> = new EventEmitter<MatRadioChange>();\n\n  /** The parent radio group. May or may not be present. */\n  radioGroup: MatRadioGroup;\n\n  /** ID of the native input element inside `<mat-radio-button>` */\n  get inputId(): string { return `${this.id || this._uniqueId}-input`; }\n\n  /** Whether this radio is checked. */\n  private _checked: boolean = false;\n\n  /** Whether this radio is disabled. */\n  private _disabled: boolean;\n\n  /** Whether this radio is required. */\n  private _required: boolean;\n\n  /** Value assigned to this radio. */\n  private _value: any = null;\n\n  /** Unregister function for _radioDispatcher */\n  private _removeUniqueSelectionListener: () => void = () => {};\n\n  /** The native `<input type=radio>` element */\n  @ViewChild('input') _inputElement: ElementRef;\n\n  constructor(@Optional() radioGroup: MatRadioGroup,\n              elementRef: ElementRef,\n              private _changeDetector: ChangeDetectorRef,\n              private _focusMonitor: FocusMonitor,\n              private _radioDispatcher: UniqueSelectionDispatcher,\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode?: string) {\n    super(elementRef);\n\n    // Assertions. Ideally these should be stripped out by the compiler.\n    // TODO(jelbourn): Assert that there's no name binding AND a parent radio group.\n    this.radioGroup = radioGroup;\n\n    this._removeUniqueSelectionListener =\n      _radioDispatcher.listen((id: string, name: string) => {\n        if (id !== this.id && name === this.name) {\n          this.checked = false;\n        }\n      });\n  }\n\n  /** Focuses the radio button. */\n  focus(): void {\n    this._focusMonitor.focusVia(this._inputElement.nativeElement, 'keyboard');\n  }\n\n  /**\n   * Marks the radio button as needing checking for change detection.\n   * This method is exposed because the parent radio group will directly\n   * update bound properties of the radio button.\n   */\n  _markForCheck() {\n    // When group value changes, the button will not be notified. Use `markForCheck` to explicit\n    // update radio button's status\n    this._changeDetector.markForCheck();\n  }\n\n  ngOnInit() {\n    if (this.radioGroup) {\n      // If the radio is inside a radio group, determine if it should be checked\n      this.checked = this.radioGroup.value === this._value;\n      // Copy name from parent radio group\n      this.name = this.radioGroup.name;\n    }\n  }\n\n  ngAfterViewInit() {\n    this._focusMonitor\n      .monitor(this._elementRef, true)\n      .subscribe(focusOrigin => {\n        if (!focusOrigin && this.radioGroup) {\n          this.radioGroup._touch();\n        }\n      });\n  }\n\n  ngOnDestroy() {\n    this._focusMonitor.stopMonitoring(this._elementRef);\n    this._removeUniqueSelectionListener();\n  }\n\n  /** Dispatch change event with current value. */\n  private _emitChangeEvent(): void {\n    this.change.emit(new MatRadioChange(this, this._value));\n  }\n\n  _isRippleDisabled() {\n    return this.disableRipple || this.disabled;\n  }\n\n  _onInputClick(event: Event) {\n    // We have to stop propagation for click events on the visual hidden input element.\n    // By default, when a user clicks on a label element, a generated click event will be\n    // dispatched on the associated input element. Since we are using a label element as our\n    // root container, the click event on the `radio-button` will be executed twice.\n    // The real click event will bubble up, and the generated click event also tries to bubble up.\n    // This will lead to multiple click events.\n    // Preventing bubbling for the second event will solve that issue.\n    event.stopPropagation();\n  }\n\n  /**\n   * Triggered when the radio button received a click or the input recognized any change.\n   * Clicking on a label element, will trigger a change event on the associated input.\n   */\n  _onInputChange(event: Event) {\n    // We always have to stop propagation on the change event.\n    // Otherwise the change event, from the input element, will bubble up and\n    // emit its event object to the `change` output.\n    event.stopPropagation();\n\n    const groupValueChanged = this.radioGroup && this.value !== this.radioGroup.value;\n    this.checked = true;\n    this._emitChangeEvent();\n\n    if (this.radioGroup) {\n      this.radioGroup._controlValueAccessorChangeFn(this.value);\n      this.radioGroup._touch();\n      if (groupValueChanged) {\n        this.radioGroup._emitChangeEvent();\n      }\n    }\n  }\n\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {MatRadioButton, MatRadioGroup} from './radio';\n\n\n@NgModule({\n  imports: [CommonModule, MatRippleModule, MatCommonModule],\n  exports: [MatRadioGroup, MatRadioButton, MatCommonModule],\n  declarations: [MatRadioGroup, MatRadioButton],\n})\nexport class MatRadioModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/** Animations used by the Material drawers. */\nexport const matDrawerAnimations: {\n  readonly transformDrawer: AnimationTriggerMetadata;\n} = {\n  /** Animation that slides a drawer in and out. */\n  transformDrawer: trigger('transform', [\n    // We remove the `transform` here completely, rather than setting it to zero, because:\n    // 1. Having a transform can cause elements with ripples or an animated\n    //    transform to shift around in Chrome with an RTL layout (see #10023).\n    // 2. 3d transforms causes text to appear blurry on IE and Edge.\n    state('open, open-instant', style({\n      'transform': 'none',\n      'visibility': 'visible',\n    })),\n    state('void', style({\n      // Avoids the shadow showing up when closed in SSR.\n      'box-shadow': 'none',\n      'visibility': 'hidden',\n    })),\n    transition('void => open-instant', animate('0ms')),\n    transition('void <=> open, open-instant => void',\n        animate('400ms cubic-bezier(0.25, 0.8, 0.25, 1)'))\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatOptionModule} from '@angular/material/core';\nimport {MatFormFieldModule} from '@angular/material/form-field';\nimport {MAT_SELECT_SCROLL_STRATEGY_PROVIDER, MatSelect, MatSelectTrigger} from './select';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    OverlayModule,\n    MatOptionModule,\n    MatCommonModule,\n  ],\n  exports: [MatFormFieldModule, MatSelect, MatSelectTrigger, MatOptionModule, MatCommonModule],\n  declarations: [MatSelect, MatSelectTrigger],\n  providers: [MAT_SELECT_SCROLL_STRATEGY_PROVIDER]\n})\nexport class MatSelectModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  AnimationTriggerMetadata,\n  keyframes,\n  state,\n  style,\n  transition,\n  trigger,\n} from '@angular/animations';\n\n/** Animations used by MatTooltip. */\nexport const matTooltipAnimations: {\n  readonly tooltipState: AnimationTriggerMetadata;\n} = {\n  /** Animation that transitions a tooltip in and out. */\n  tooltipState: trigger('state', [\n    state('initial, void, hidden', style({opacity: 0, transform: 'scale(0)'})),\n    state('visible', style({transform: 'scale(1)'})),\n    transition('* => visible', animate('200ms cubic-bezier(0, 0, 0.2, 1)', keyframes([\n      style({opacity: 0, transform: 'scale(0)', offset: 0}),\n      style({opacity: 0.5, transform: 'scale(0.99)', offset: 0.5}),\n      style({opacity: 1, transform: 'scale(1)', offset: 1})\n    ]))),\n    transition('* => hidden', animate('100ms cubic-bezier(0, 0, 0.2, 1)', style({opacity: 0}))),\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {A11yModule} from '@angular/cdk/a11y';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {\n  MatTooltip,\n  TooltipComponent,\n  MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY_PROVIDER,\n} from './tooltip';\n\n@NgModule({\n  imports: [\n    A11yModule,\n    CommonModule,\n    OverlayModule,\n    MatCommonModule,\n  ],\n  exports: [MatTooltip, TooltipComponent, MatCommonModule],\n  declarations: [MatTooltip, TooltipComponent],\n  entryComponents: [TooltipComponent],\n  providers: [MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY_PROVIDER]\n})\nexport class MatTooltipModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable, Optional, SkipSelf} from '@angular/core';\nimport {Subject} from 'rxjs';\n\n\n/**\n * To modify the labels and text displayed, create a new instance of MatPaginatorIntl and\n * include it in a custom provider\n */\n@Injectable({providedIn: 'root'})\nexport class MatPaginatorIntl {\n  /**\n   * Stream that emits whenever the labels here are changed. Use this to notify\n   * components if the labels have changed after initialization.\n   */\n  readonly changes: Subject<void> = new Subject<void>();\n\n  /** A label for the page size selector. */\n  itemsPerPageLabel: string = 'Items per page:';\n\n  /** A label for the button that increments the current page. */\n  nextPageLabel: string = 'Next page';\n\n  /** A label for the button that decrements the current page. */\n  previousPageLabel: string = 'Previous page';\n\n  /** A label for the button that moves to the first page. */\n  firstPageLabel: string = 'First page';\n\n  /** A label for the button that moves to the last page. */\n  lastPageLabel: string = 'Last page';\n\n  /** A label for the range of items within the current page and the length of the whole list. */\n  getRangeLabel = (page: number, pageSize: number, length: number) => {\n    if (length == 0 || pageSize == 0) { return `0 of ${length}`; }\n\n    length = Math.max(length, 0);\n\n    const startIndex = page * pageSize;\n\n    // If the start index exceeds the list length, do not try and fix the end index to the end.\n    const endIndex = startIndex < length ?\n        Math.min(startIndex + pageSize, length) :\n        startIndex + pageSize;\n\n    return `${startIndex + 1} - ${endIndex} of ${length}`;\n  }\n}\n\n/** @docs-private */\nexport function MAT_PAGINATOR_INTL_PROVIDER_FACTORY(parentIntl: MatPaginatorIntl) {\n  return parentIntl || new MatPaginatorIntl();\n}\n\n/** @docs-private */\nexport const MAT_PAGINATOR_INTL_PROVIDER = {\n  // If there is already an MatPaginatorIntl available, use that. Otherwise, provide a new one.\n  provide: MatPaginatorIntl,\n  deps: [[new Optional(), new SkipSelf(), MatPaginatorIntl]],\n  useFactory: MAT_PAGINATOR_INTL_PROVIDER_FACTORY\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceNumberProperty, coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  OnInit,\n  Output,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {Subscription} from 'rxjs';\nimport {MatPaginatorIntl} from './paginator-intl';\nimport {HasInitialized, mixinInitialized, ThemePalette} from '@angular/material/core';\n\n/** The default page size if there is no page size and there are no provided page size options. */\nconst DEFAULT_PAGE_SIZE = 50;\n\n/**\n * Change event object that is emitted when the user selects a\n * different page size or navigates to another page.\n */\nexport class PageEvent {\n  /** The current page index. */\n  pageIndex: number;\n\n  /**\n   * Index of the page that was selected previously.\n   * @breaking-change 7.0.0 To be made into a required property.\n   */\n  previousPageIndex?: number;\n\n  /** The current page size */\n  pageSize: number;\n\n  /** The current total number of items being paged */\n  length: number;\n}\n\n// Boilerplate for applying mixins to MatPaginator.\n/** @docs-private */\nexport class MatPaginatorBase {}\nexport const _MatPaginatorBase = mixinInitialized(MatPaginatorBase);\n\n/**\n * Component to provide navigation between paged information. Displays the size of the current\n * page, user-selectable options to change that size, what items are being shown, and\n * navigational button to go to the previous or next page.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-paginator',\n  exportAs: 'matPaginator',\n  templateUrl: 'paginator.html',\n  styleUrls: ['paginator.css'],\n  host: {\n    'class': 'mat-paginator',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatPaginator extends _MatPaginatorBase implements OnInit, OnDestroy, HasInitialized {\n  private _initialized: boolean;\n  private _intlChanges: Subscription;\n\n  /** Theme color to be used for the underlying form controls. */\n  @Input() color: ThemePalette;\n\n  /** The zero-based page index of the displayed list of items. Defaulted to 0. */\n  @Input()\n  get pageIndex(): number { return this._pageIndex; }\n  set pageIndex(value: number) {\n    this._pageIndex = Math.max(coerceNumberProperty(value), 0);\n    this._changeDetectorRef.markForCheck();\n  }\n  _pageIndex: number = 0;\n\n  /** The length of the total number of items that are being paginated. Defaulted to 0. */\n  @Input()\n  get length(): number { return this._length; }\n  set length(value: number) {\n    this._length = coerceNumberProperty(value);\n    this._changeDetectorRef.markForCheck();\n  }\n  _length: number = 0;\n\n  /** Number of items to display on a page. By default set to 50. */\n  @Input()\n  get pageSize(): number { return this._pageSize; }\n  set pageSize(value: number) {\n    this._pageSize = Math.max(coerceNumberProperty(value), 0);\n    this._updateDisplayedPageSizeOptions();\n  }\n  private _pageSize: number;\n\n  /** The set of provided page size options to display to the user. */\n  @Input()\n  get pageSizeOptions(): number[] { return this._pageSizeOptions; }\n  set pageSizeOptions(value: number[]) {\n    this._pageSizeOptions = (value || []).map(p => coerceNumberProperty(p));\n    this._updateDisplayedPageSizeOptions();\n  }\n  private _pageSizeOptions: number[] = [];\n\n  /** Whether to hide the page size selection UI from the user. */\n  @Input()\n  get hidePageSize(): boolean { return this._hidePageSize; }\n  set hidePageSize(value: boolean) {\n    this._hidePageSize = coerceBooleanProperty(value);\n  }\n  private _hidePageSize = false;\n\n\n  /** Whether to show the first/last buttons UI to the user. */\n  @Input()\n  get showFirstLastButtons(): boolean { return this._showFirstLastButtons; }\n  set showFirstLastButtons(value: boolean) {\n    this._showFirstLastButtons = coerceBooleanProperty(value);\n  }\n  private _showFirstLastButtons = false;\n\n  /** Event emitted when the paginator changes the page size or page index. */\n  @Output() readonly page: EventEmitter<PageEvent> = new EventEmitter<PageEvent>();\n\n  /** Displayed set of page size options. Will be sorted and include current page size. */\n  _displayedPageSizeOptions: number[];\n\n  constructor(public _intl: MatPaginatorIntl,\n              private _changeDetectorRef: ChangeDetectorRef) {\n    super();\n    this._intlChanges = _intl.changes.subscribe(() => this._changeDetectorRef.markForCheck());\n  }\n\n  ngOnInit() {\n    this._initialized = true;\n    this._updateDisplayedPageSizeOptions();\n    this._markInitialized();\n  }\n\n  ngOnDestroy() {\n    this._intlChanges.unsubscribe();\n  }\n\n  /** Advances to the next page if it exists. */\n  nextPage(): void {\n    if (!this.hasNextPage()) { return; }\n\n    const previousPageIndex = this.pageIndex;\n    this.pageIndex++;\n    this._emitPageEvent(previousPageIndex);\n  }\n\n  /** Move back to the previous page if it exists. */\n  previousPage(): void {\n    if (!this.hasPreviousPage()) { return; }\n\n    const previousPageIndex = this.pageIndex;\n    this.pageIndex--;\n    this._emitPageEvent(previousPageIndex);\n  }\n\n  /** Move to the first page if not already there. */\n  firstPage(): void {\n    // hasPreviousPage being false implies at the start\n    if (!this.hasPreviousPage()) { return; }\n\n    const previousPageIndex = this.pageIndex;\n    this.pageIndex = 0;\n    this._emitPageEvent(previousPageIndex);\n  }\n\n  /** Move to the last page if not already there. */\n  lastPage(): void {\n    // hasNextPage being false implies at the end\n    if (!this.hasNextPage()) { return; }\n\n    const previousPageIndex = this.pageIndex;\n    this.pageIndex = this.getNumberOfPages();\n    this._emitPageEvent(previousPageIndex);\n  }\n\n  /** Whether there is a previous page. */\n  hasPreviousPage(): boolean {\n    return this.pageIndex >= 1 && this.pageSize != 0;\n  }\n\n  /** Whether there is a next page. */\n  hasNextPage(): boolean {\n    const numberOfPages = this.getNumberOfPages();\n    return this.pageIndex < numberOfPages && this.pageSize != 0;\n  }\n\n  /** Calculate the number of pages */\n  getNumberOfPages(): number {\n    return Math.ceil(this.length / this.pageSize) - 1;\n  }\n\n\n  /**\n   * Changes the page size so that the first item displayed on the page will still be\n   * displayed using the new page size.\n   *\n   * For example, if the page size is 10 and on the second page (items indexed 10-19) then\n   * switching so that the page size is 5 will set the third page as the current page so\n   * that the 10th item will still be displayed.\n   */\n  _changePageSize(pageSize: number) {\n    // Current page needs to be updated to reflect the new page size. Navigate to the page\n    // containing the previous page's first item.\n    const startIndex = this.pageIndex * this.pageSize;\n    const previousPageIndex = this.pageIndex;\n\n    this.pageIndex = Math.floor(startIndex / pageSize) || 0;\n    this.pageSize = pageSize;\n    this._emitPageEvent(previousPageIndex);\n  }\n\n  /**\n   * Updates the list of page size options to display to the user. Includes making sure that\n   * the page size is an option and that the list is sorted.\n   */\n  private _updateDisplayedPageSizeOptions() {\n    if (!this._initialized) { return; }\n\n    // If no page size is provided, use the first page size option or the default page size.\n    if (!this.pageSize) {\n      this._pageSize = this.pageSizeOptions.length != 0 ?\n          this.pageSizeOptions[0] :\n          DEFAULT_PAGE_SIZE;\n    }\n\n    this._displayedPageSizeOptions = this.pageSizeOptions.slice();\n\n    if (this._displayedPageSizeOptions.indexOf(this.pageSize) === -1) {\n      this._displayedPageSizeOptions.push(this.pageSize);\n    }\n\n    // Sort the numbers using a number-specific sort function.\n    this._displayedPageSizeOptions.sort((a, b) => a - b);\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Emits an event notifying that a change of the paginator's properties has been triggered. */\n  private _emitPageEvent(previousPageIndex: number) {\n    this.page.emit({\n      previousPageIndex,\n      pageIndex: this.pageIndex,\n      pageSize: this.pageSize,\n      length: this.length\n    });\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatButtonModule} from '@angular/material/button';\nimport {MatSelectModule} from '@angular/material/select';\nimport {MatTooltipModule} from '@angular/material/tooltip';\nimport {MatPaginator} from './paginator';\nimport {MAT_PAGINATOR_INTL_PROVIDER} from './paginator-intl';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatButtonModule,\n    MatSelectModule,\n    MatTooltipModule,\n  ],\n  exports: [MatPaginator],\n  declarations: [MatPaginator],\n  providers: [MAT_PAGINATOR_INTL_PROVIDER],\n})\nexport class MatPaginatorModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Directive,\n  TemplateRef,\n  ComponentFactoryResolver,\n  ApplicationRef,\n  Injector,\n  ViewContainerRef,\n  Inject,\n  OnDestroy,\n} from '@angular/core';\nimport {TemplatePortal, DomPortalOutlet} from '@angular/cdk/portal';\nimport {DOCUMENT} from '@angular/common';\nimport {Subject} from 'rxjs';\n\n/**\n * Menu content that will be rendered lazily once the menu is opened.\n */\n@Directive({\n  selector: 'ng-template[matMenuContent]'\n})\nexport class MatMenuContent implements OnDestroy {\n  private _portal: TemplatePortal<any>;\n  private _outlet: DomPortalOutlet;\n\n  /** Emits when the menu content has been attached. */\n  _attached = new Subject<void>();\n\n  constructor(\n    private _template: TemplateRef<any>,\n    private _componentFactoryResolver: ComponentFactoryResolver,\n    private _appRef: ApplicationRef,\n    private _injector: Injector,\n    private _viewContainerRef: ViewContainerRef,\n    @Inject(DOCUMENT) private _document: any) {}\n\n  /**\n   * Attaches the content with a particular context.\n   * @docs-private\n   */\n  attach(context: any = {}) {\n    if (!this._portal) {\n      this._portal = new TemplatePortal(this._template, this._viewContainerRef);\n    }\n\n    this.detach();\n\n    if (!this._outlet) {\n      this._outlet = new DomPortalOutlet(this._document.createElement('div'),\n          this._componentFactoryResolver, this._appRef, this._injector);\n    }\n\n    const element: HTMLElement = this._template.elementRef.nativeElement;\n\n    // Because we support opening the same menu from different triggers (which in turn have their\n    // own `OverlayRef` panel), we have to re-insert the host element every time, otherwise we\n    // risk it staying attached to a pane that's no longer in the DOM.\n    element.parentNode!.insertBefore(this._outlet.outletElement, element);\n    this._portal.attach(this._outlet, context);\n    this._attached.next();\n  }\n\n  /**\n   * Detaches the content.\n   * @docs-private\n   */\n  detach() {\n    if (this._portal.isAttached) {\n      this._portal.detach();\n    }\n  }\n\n  ngOnDestroy() {\n    if (this._outlet) {\n      this._outlet.dispose();\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport{\n  trigger,\n  state,\n  style,\n  animate,\n  transition,\n  query,\n  group,\n  sequence,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/**\n * Animations used by the mat-menu component.\n * Animation duration and timing values are based on:\n * https://material.io/guidelines/components/menus.html#menus-usage\n */\nexport const matMenuAnimations: {\n  readonly transformMenu: AnimationTriggerMetadata;\n  readonly fadeInItems: AnimationTriggerMetadata;\n} = {\n  /**\n   * This animation controls the menu panel's entry and exit from the page.\n   *\n   * When the menu panel is added to the DOM, it scales in and fades in its border.\n   *\n   * When the menu panel is removed from the DOM, it simply fades out after a brief\n   * delay to display the ripple.\n   */\n  transformMenu: trigger('transformMenu', [\n    state('void', style({\n      opacity: 0,\n      // This starts off from 0.01, instead of 0, because there's an issue in the Angular animations\n      // as of 4.2, which causes the animation to be skipped if it starts from 0.\n      transform: 'scale(0.01, 0.01)'\n    })),\n    transition('void => enter', sequence([\n      query('.mat-menu-content', style({opacity: 0})),\n      animate('100ms linear', style({opacity: 1, transform: 'scale(1, 0.5)'})),\n      group([\n        query('.mat-menu-content', animate('400ms cubic-bezier(0.55, 0, 0.55, 0.2)',\n          style({opacity: 1})\n        )),\n        animate('300ms cubic-bezier(0.25, 0.8, 0.25, 1)', style({transform: 'scale(1, 1)'})),\n      ])\n    ])),\n    transition('* => void', animate('150ms 50ms linear', style({opacity: 0})))\n  ]),\n\n\n  /**\n   * This animation fades in the background color and content of the menu panel\n   * after its containing element is scaled in.\n   */\n  fadeInItems: trigger('fadeInItems', [\n    // TODO(crisbeto): this is inside the `transformMenu`\n    // now. Remove next time we do breaking changes.\n    state('showing', style({opacity: 1})),\n    transition('void => *', [\n      style({opacity: 0}),\n      animate('400ms 100ms cubic-bezier(0.55, 0, 0.55, 0.2)')\n    ])\n  ])\n};\n\n/**\n * @deprecated\n * @breaking-change 7.0.0\n */\nexport const fadeInItems = matMenuAnimations.fadeInItems;\n\n/**\n * @deprecated\n * @breaking-change 7.0.0\n */\nexport const transformMenu = matMenuAnimations.transformMenu;\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {EventEmitter, TemplateRef, InjectionToken} from '@angular/core';\nimport {MenuPositionX, MenuPositionY} from './menu-positions';\nimport {Direction} from '@angular/cdk/bidi';\nimport {FocusOrigin} from '@angular/cdk/a11y';\nimport {MatMenuContent} from './menu-content';\n\n/**\n * Injection token used to provide the parent menu to menu-specific components.\n * @docs-private\n */\nexport const MAT_MENU_PANEL = new InjectionToken<MatMenuPanel>('MAT_MENU_PANEL');\n\n/**\n * Interface for a custom menu panel that can be used with `matMenuTriggerFor`.\n * @docs-private\n */\nexport interface MatMenuPanel<T = any> {\n  xPosition: MenuPositionX;\n  yPosition: MenuPositionY;\n  overlapTrigger: boolean;\n  templateRef: TemplateRef<any>;\n  close: EventEmitter<void | 'click' | 'keydown' | 'tab'>;\n  parentMenu?: MatMenuPanel | undefined;\n  direction?: Direction;\n  focusFirstItem: (origin?: FocusOrigin) => void;\n  resetActiveItem: () => void;\n  setPositionClasses?: (x: MenuPositionX, y: MenuPositionY) => void;\n  setElevation?(depth: number): void;\n  lazyContent?: MatMenuContent;\n  backdropClass?: string;\n  hasBackdrop?: boolean;\n  addItem?: (item: T) => void;\n  removeItem?: (item: T) => void;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusableOption, FocusMonitor, FocusOrigin} from '@angular/cdk/a11y';\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  OnDestroy,\n  ViewEncapsulation,\n  Inject,\n  Optional,\n} from '@angular/core';\nimport {\n  CanDisable,\n  CanDisableRipple,\n  mixinDisabled,\n  mixinDisableRipple\n} from '@angular/material/core';\nimport {Subject} from 'rxjs';\nimport {DOCUMENT} from '@angular/common';\nimport {MAT_MENU_PANEL, MatMenuPanel} from './menu-panel';\n\n// Boilerplate for applying mixins to MatMenuItem.\n/** @docs-private */\nexport class MatMenuItemBase {}\nexport const _MatMenuItemMixinBase = mixinDisableRipple(mixinDisabled(MatMenuItemBase));\n\n/**\n * This directive is intended to be used inside an mat-menu tag.\n * It exists mostly to set the role attribute.\n */\n@Component({\n  moduleId: module.id,\n  selector: '[mat-menu-item]',\n  exportAs: 'matMenuItem',\n  inputs: ['disabled', 'disableRipple'],\n  host: {\n    'role': 'menuitem',\n    'class': 'mat-menu-item',\n    '[class.mat-menu-item-highlighted]': '_highlighted',\n    '[class.mat-menu-item-submenu-trigger]': '_triggersSubmenu',\n    '[attr.tabindex]': '_getTabIndex()',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.disabled]': 'disabled || null',\n    '(click)': '_checkDisabled($event)',\n    '(mouseenter)': '_handleMouseEnter()',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  templateUrl: 'menu-item.html',\n})\nexport class MatMenuItem extends _MatMenuItemMixinBase\n    implements FocusableOption, CanDisable, CanDisableRipple, OnDestroy {\n\n  private _document: Document;\n\n  /** Stream that emits when the menu item is hovered. */\n  readonly _hovered: Subject<MatMenuItem> = new Subject<MatMenuItem>();\n\n  /** Whether the menu item is highlighted. */\n  _highlighted: boolean = false;\n\n  /** Whether the menu item acts as a trigger for a sub-menu. */\n  _triggersSubmenu: boolean = false;\n\n  constructor(\n    private _elementRef: ElementRef,\n    @Inject(DOCUMENT) document?: any,\n    private _focusMonitor?: FocusMonitor,\n    @Inject(MAT_MENU_PANEL) @Optional() private _parentMenu?: MatMenuPanel<MatMenuItem>) {\n\n    // @breaking-change 7.0.0 make `_focusMonitor` and `document` required params.\n    super();\n\n    if (_focusMonitor) {\n      // Start monitoring the element so it gets the appropriate focused classes. We want\n      // to show the focus style for menu items only when the focus was not caused by a\n      // mouse or touch interaction.\n      _focusMonitor.monitor(this._elementRef, false);\n    }\n\n    if (_parentMenu && _parentMenu.addItem) {\n      _parentMenu.addItem(this);\n    }\n\n    this._document = document;\n  }\n\n  /** Focuses the menu item. */\n  focus(origin: FocusOrigin = 'program'): void {\n    if (this._focusMonitor) {\n      this._focusMonitor.focusVia(this._getHostElement(), origin);\n    } else {\n      this._getHostElement().focus();\n    }\n  }\n\n  ngOnDestroy() {\n    if (this._focusMonitor) {\n      this._focusMonitor.stopMonitoring(this._elementRef);\n    }\n\n    if (this._parentMenu && this._parentMenu.removeItem) {\n      this._parentMenu.removeItem(this);\n    }\n\n    this._hovered.complete();\n  }\n\n  /** Used to set the `tabindex`. */\n  _getTabIndex(): string {\n    return this.disabled ? '-1' : '0';\n  }\n\n  /** Returns the host DOM element. */\n  _getHostElement(): HTMLElement {\n    return this._elementRef.nativeElement;\n  }\n\n  /** Prevents the default element actions if it is disabled. */\n  _checkDisabled(event: Event): void {\n    if (this.disabled) {\n      event.preventDefault();\n      event.stopPropagation();\n    }\n  }\n\n  /** Emits to the hover stream. */\n  _handleMouseEnter() {\n    this._hovered.next(this);\n  }\n\n  /** Gets the label to be used when determining whether the option should be focused. */\n  getLabel(): string {\n    const element: HTMLElement = this._elementRef.nativeElement;\n    const textNodeType = this._document ? this._document.TEXT_NODE : 3;\n    let output = '';\n\n    if (element.childNodes) {\n      const length = element.childNodes.length;\n\n      // Go through all the top-level text nodes and extract their text.\n      // We skip anything that's not a text node to prevent the text from\n      // being thrown off by something like an icon.\n      for (let i = 0; i < length; i++) {\n        if (element.childNodes[i].nodeType === textNodeType) {\n          output += element.childNodes[i].textContent;\n        }\n      }\n    }\n\n    return output.trim();\n  }\n\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusKeyManager, FocusOrigin} from '@angular/cdk/a11y';\nimport {Direction} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {ESCAPE, LEFT_ARROW, RIGHT_ARROW, DOWN_ARROW, UP_ARROW} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  Component,\n  ContentChild,\n  ContentChildren,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  OnDestroy,\n  Output,\n  TemplateRef,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n  OnInit,\n} from '@angular/core';\nimport {merge, Observable, Subject, Subscription} from 'rxjs';\nimport {startWith, switchMap, take} from 'rxjs/operators';\nimport {matMenuAnimations} from './menu-animations';\nimport {MatMenuContent} from './menu-content';\nimport {throwMatMenuInvalidPositionX, throwMatMenuInvalidPositionY} from './menu-errors';\nimport {MatMenuItem} from './menu-item';\nimport {MAT_MENU_PANEL, MatMenuPanel} from './menu-panel';\nimport {MenuPositionX, MenuPositionY} from './menu-positions';\nimport {AnimationEvent} from '@angular/animations';\n\n\n/** Default `mat-menu` options that can be overridden. */\nexport interface MatMenuDefaultOptions {\n  /** The x-axis position of the menu. */\n  xPosition: MenuPositionX;\n\n  /** The y-axis position of the menu. */\n  yPosition: MenuPositionY;\n\n  /** Whether the menu should overlap the menu trigger. */\n  overlapTrigger: boolean;\n\n  /** Class to be applied to the menu's backdrop. */\n  backdropClass: string;\n\n  /** Whether the menu has a backdrop. */\n  hasBackdrop?: boolean;\n}\n\n/** Injection token to be used to override the default options for `mat-menu`. */\nexport const MAT_MENU_DEFAULT_OPTIONS =\n    new InjectionToken<MatMenuDefaultOptions>('mat-menu-default-options', {\n      providedIn: 'root',\n      factory: MAT_MENU_DEFAULT_OPTIONS_FACTORY\n    });\n\n/** @docs-private */\nexport function MAT_MENU_DEFAULT_OPTIONS_FACTORY(): MatMenuDefaultOptions {\n  return {\n    overlapTrigger: true,\n    xPosition: 'after',\n    yPosition: 'below',\n    backdropClass: 'cdk-overlay-transparent-backdrop',\n  };\n}\n/**\n * Start elevation for the menu panel.\n * @docs-private\n */\nconst MAT_MENU_BASE_ELEVATION = 2;\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-menu',\n  templateUrl: 'menu.html',\n  styleUrls: ['menu.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matMenu',\n  animations: [\n    matMenuAnimations.transformMenu,\n    matMenuAnimations.fadeInItems\n  ],\n  providers: [\n    {provide: MAT_MENU_PANEL, useExisting: MatMenu}\n  ]\n})\nexport class MatMenu implements AfterContentInit, MatMenuPanel<MatMenuItem>, OnInit, OnDestroy {\n  private _keyManager: FocusKeyManager<MatMenuItem>;\n  private _xPosition: MenuPositionX = this._defaultOptions.xPosition;\n  private _yPosition: MenuPositionY = this._defaultOptions.yPosition;\n  private _previousElevation: string;\n\n  /** Menu items inside the current menu. */\n  private _items: MatMenuItem[] = [];\n\n  /** Emits whenever the amount of menu items changes. */\n  private _itemChanges = new Subject<MatMenuItem[]>();\n\n  /** Subscription to tab events on the menu panel */\n  private _tabSubscription = Subscription.EMPTY;\n\n  /** Config object to be passed into the menu's ngClass */\n  _classList: {[key: string]: boolean} = {};\n\n  /** Current state of the panel animation. */\n  _panelAnimationState: 'void' | 'enter' = 'void';\n\n  /** Emits whenever an animation on the menu completes. */\n  _animationDone = new Subject<AnimationEvent>();\n\n  /** Whether the menu is animating. */\n  _isAnimating: boolean;\n\n  /** Parent menu of the current menu panel. */\n  parentMenu: MatMenuPanel | undefined;\n\n  /** Layout direction of the menu. */\n  direction: Direction;\n\n  /** Class to be added to the backdrop element. */\n  @Input() backdropClass: string = this._defaultOptions.backdropClass;\n\n  /** Position of the menu in the X axis. */\n  @Input()\n  get xPosition(): MenuPositionX { return this._xPosition; }\n  set xPosition(value: MenuPositionX) {\n    if (value !== 'before' && value !== 'after') {\n      throwMatMenuInvalidPositionX();\n    }\n    this._xPosition = value;\n    this.setPositionClasses();\n  }\n\n  /** Position of the menu in the Y axis. */\n  @Input()\n  get yPosition(): MenuPositionY { return this._yPosition; }\n  set yPosition(value: MenuPositionY) {\n    if (value !== 'above' && value !== 'below') {\n      throwMatMenuInvalidPositionY();\n    }\n    this._yPosition = value;\n    this.setPositionClasses();\n  }\n\n  /** @docs-private */\n  @ViewChild(TemplateRef) templateRef: TemplateRef<any>;\n\n  /**\n   * List of the items inside of a menu.\n   * @deprecated\n   * @breaking-change 7.0.0\n   */\n  @ContentChildren(MatMenuItem) items: QueryList<MatMenuItem>;\n\n  /**\n   * Menu content that will be rendered lazily.\n   * @docs-private\n   */\n  @ContentChild(MatMenuContent) lazyContent: MatMenuContent;\n\n  /** Whether the menu should overlap its trigger. */\n  @Input()\n  get overlapTrigger(): boolean { return this._overlapTrigger; }\n  set overlapTrigger(value: boolean) {\n    this._overlapTrigger = coerceBooleanProperty(value);\n  }\n  private _overlapTrigger: boolean = this._defaultOptions.overlapTrigger;\n\n  /** Whether the menu has a backdrop. */\n  @Input()\n  get hasBackdrop(): boolean | undefined { return this._hasBackdrop; }\n  set hasBackdrop(value: boolean | undefined) {\n    this._hasBackdrop = coerceBooleanProperty(value);\n  }\n  private _hasBackdrop: boolean | undefined = this._defaultOptions.hasBackdrop;\n\n  /**\n   * This method takes classes set on the host mat-menu element and applies them on the\n   * menu template that displays in the overlay container.  Otherwise, it's difficult\n   * to style the containing menu from outside the component.\n   * @param classes list of class names\n   */\n  @Input('class')\n  set panelClass(classes: string) {\n    if (classes && classes.length) {\n      this._classList = classes.split(' ').reduce((obj: any, className: string) => {\n        obj[className] = true;\n        return obj;\n      }, {});\n\n      this._elementRef.nativeElement.className = '';\n    }\n  }\n\n  /**\n   * This method takes classes set on the host mat-menu element and applies them on the\n   * menu template that displays in the overlay container.  Otherwise, it's difficult\n   * to style the containing menu from outside the component.\n   * @deprecated Use `panelClass` instead.\n   * @breaking-change 7.0.0\n   */\n  @Input()\n  get classList(): string { return this.panelClass; }\n  set classList(classes: string) { this.panelClass = classes; }\n\n  /** Event emitted when the menu is closed. */\n  @Output() readonly closed: EventEmitter<void | 'click' | 'keydown' | 'tab'> =\n      new EventEmitter<void | 'click' | 'keydown' | 'tab'>();\n\n  /**\n   * Event emitted when the menu is closed.\n   * @deprecated Switch to `closed` instead\n   * @breaking-change 7.0.0\n   */\n  @Output() close = this.closed;\n\n  constructor(\n    private _elementRef: ElementRef,\n    private _ngZone: NgZone,\n    @Inject(MAT_MENU_DEFAULT_OPTIONS) private _defaultOptions: MatMenuDefaultOptions) { }\n\n  ngOnInit() {\n    this.setPositionClasses();\n  }\n\n  ngAfterContentInit() {\n    this._keyManager = new FocusKeyManager<MatMenuItem>(this._items).withWrap().withTypeAhead();\n    this._tabSubscription = this._keyManager.tabOut.subscribe(() => this.closed.emit('tab'));\n  }\n\n  ngOnDestroy() {\n    this._tabSubscription.unsubscribe();\n    this.closed.complete();\n  }\n\n  /** Stream that emits whenever the hovered menu item changes. */\n  _hovered(): Observable<MatMenuItem> {\n    return this._itemChanges.pipe(\n      startWith(this._items),\n      switchMap(items => merge(...items.map(item => item._hovered)))\n    );\n  }\n\n  /** Handle a keyboard event from the menu, delegating to the appropriate action. */\n  _handleKeydown(event: KeyboardEvent) {\n    const keyCode = event.keyCode;\n\n    switch (keyCode) {\n      case ESCAPE:\n        this.closed.emit('keydown');\n        event.stopPropagation();\n      break;\n      case LEFT_ARROW:\n        if (this.parentMenu && this.direction === 'ltr') {\n          this.closed.emit('keydown');\n        }\n      break;\n      case RIGHT_ARROW:\n        if (this.parentMenu && this.direction === 'rtl') {\n          this.closed.emit('keydown');\n        }\n      break;\n      default:\n        if (keyCode === UP_ARROW || keyCode === DOWN_ARROW) {\n          this._keyManager.setFocusOrigin('keyboard');\n        }\n\n        this._keyManager.onKeydown(event);\n    }\n  }\n\n  /**\n   * Focus the first item in the menu.\n   * @param origin Action from which the focus originated. Used to set the correct styling.\n   */\n  focusFirstItem(origin: FocusOrigin = 'program'): void {\n    // When the content is rendered lazily, it takes a bit before the items are inside the DOM.\n    if (this.lazyContent) {\n      this._ngZone.onStable.asObservable()\n        .pipe(take(1))\n        .subscribe(() => this._keyManager.setFocusOrigin(origin).setFirstItemActive());\n    } else {\n      this._keyManager.setFocusOrigin(origin).setFirstItemActive();\n    }\n  }\n\n  /**\n   * Resets the active item in the menu. This is used when the menu is opened, allowing\n   * the user to start from the first option when pressing the down arrow.\n   */\n  resetActiveItem() {\n    this._keyManager.setActiveItem(-1);\n  }\n\n  /**\n   * Sets the menu panel elevation.\n   * @param depth Number of parent menus that come before the menu.\n   */\n  setElevation(depth: number): void {\n    // The elevation starts at the base and increases by one for each level.\n    const newElevation = `mat-elevation-z${MAT_MENU_BASE_ELEVATION + depth}`;\n    const customElevation = Object.keys(this._classList).find(c => c.startsWith('mat-elevation-z'));\n\n    if (!customElevation || customElevation === this._previousElevation) {\n      if (this._previousElevation) {\n        this._classList[this._previousElevation] = false;\n      }\n\n      this._classList[newElevation] = true;\n      this._previousElevation = newElevation;\n    }\n  }\n\n  /**\n   * Registers a menu item with the menu.\n   * @docs-private\n   */\n  addItem(item: MatMenuItem) {\n    // We register the items through this method, rather than picking them up through\n    // `ContentChildren`, because we need the items to be picked up by their closest\n    // `mat-menu` ancestor. If we used `@ContentChildren(MatMenuItem, {descendants: true})`,\n    // all descendant items will bleed into the top-level menu in the case where the consumer\n    // has `mat-menu` instances nested inside each other.\n    if (this._items.indexOf(item) === -1) {\n      this._items.push(item);\n      this._itemChanges.next(this._items);\n    }\n  }\n\n  /**\n   * Removes an item from the menu.\n   * @docs-private\n   */\n  removeItem(item: MatMenuItem) {\n    const index = this._items.indexOf(item);\n\n    if (this._items.indexOf(item) > -1) {\n      this._items.splice(index, 1);\n      this._itemChanges.next(this._items);\n    }\n  }\n\n  /**\n   * Adds classes to the menu panel based on its position. Can be used by\n   * consumers to add specific styling based on the position.\n   * @param posX Position of the menu along the x axis.\n   * @param posY Position of the menu along the y axis.\n   * @docs-private\n   */\n  setPositionClasses(posX: MenuPositionX = this.xPosition, posY: MenuPositionY = this.yPosition) {\n    const classes = this._classList;\n    classes['mat-menu-before'] = posX === 'before';\n    classes['mat-menu-after'] = posX === 'after';\n    classes['mat-menu-above'] = posY === 'above';\n    classes['mat-menu-below'] = posY === 'below';\n  }\n\n  /** Starts the enter animation. */\n  _startAnimation() {\n    // @breaking-change 7.0.0 Combine with _resetAnimation.\n    this._panelAnimationState = 'enter';\n  }\n\n  /** Resets the panel animation to its initial state. */\n  _resetAnimation() {\n    // @breaking-change 7.0.0 Combine with _startAnimation.\n    this._panelAnimationState = 'void';\n  }\n\n  /** Callback that is invoked when the panel animation completes. */\n  _onAnimationDone(event: AnimationEvent) {\n    this._animationDone.next(event);\n    this._isAnimating = false;\n\n    // Scroll the content element to the top once the animation is done. This is necessary, because\n    // we move focus to the first item while it's still being animated, which can throw the browser\n    // off when it determines the scroll position. Alternatively we can move focus when the\n    // animation is done, however moving focus asynchronously will interrupt screen readers\n    // which are in the process of reading out the menu already. We take the `element` from\n    // the `event` since we can't use a `ViewChild` to access the pane.\n    if (event.toState === 'enter' && this._keyManager.activeItemIndex === 0) {\n      event.element.scrollTop = 0;\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor, FocusOrigin, isFakeMousedownFromScreenReader} from '@angular/cdk/a11y';\nimport {Direction, Directionality} from '@angular/cdk/bidi';\nimport {LEFT_ARROW, RIGHT_ARROW} from '@angular/cdk/keycodes';\nimport {\n  FlexibleConnectedPositionStrategy,\n  HorizontalConnectionPos,\n  Overlay,\n  OverlayConfig,\n  OverlayRef,\n  ScrollStrategy,\n  VerticalConnectionPos,\n} from '@angular/cdk/overlay';\nimport {TemplatePortal} from '@angular/cdk/portal';\nimport {\n  AfterContentInit,\n  Directive,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  InjectionToken,\n  Input,\n  OnDestroy,\n  Optional,\n  Output,\n  Self,\n  ViewContainerRef,\n} from '@angular/core';\nimport {asapScheduler, merge, of as observableOf, Subscription} from 'rxjs';\nimport {delay, filter, take, takeUntil} from 'rxjs/operators';\nimport {MatMenu} from './menu-directive';\nimport {throwMatMenuMissingError} from './menu-errors';\nimport {MatMenuItem} from './menu-item';\nimport {MatMenuPanel} from './menu-panel';\nimport {MenuPositionX, MenuPositionY} from './menu-positions';\n\n/** Injection token that determines the scroll handling while the menu is open. */\nexport const MAT_MENU_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mat-menu-scroll-strategy');\n\n/** @docs-private */\nexport function MAT_MENU_SCROLL_STRATEGY_FACTORY(overlay: Overlay): () => ScrollStrategy {\n  return () => overlay.scrollStrategies.reposition();\n}\n\n/** @docs-private */\nexport const MAT_MENU_SCROLL_STRATEGY_FACTORY_PROVIDER = {\n  provide: MAT_MENU_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_MENU_SCROLL_STRATEGY_FACTORY,\n};\n\n/** Default top padding of the menu panel. */\nexport const MENU_PANEL_TOP_PADDING = 8;\n\n// TODO(andrewseguin): Remove the kebab versions in favor of camelCased attribute selectors\n\n/**\n * This directive is intended to be used in conjunction with an mat-menu tag.  It is\n * responsible for toggling the display of the provided menu instance.\n */\n@Directive({\n  selector: `[mat-menu-trigger-for], [matMenuTriggerFor]`,\n  host: {\n    'aria-haspopup': 'true',\n    '[attr.aria-expanded]': 'menuOpen || null',\n    '(mousedown)': '_handleMousedown($event)',\n    '(keydown)': '_handleKeydown($event)',\n    '(click)': '_handleClick($event)',\n  },\n  exportAs: 'matMenuTrigger'\n})\nexport class MatMenuTrigger implements AfterContentInit, OnDestroy {\n  private _portal: TemplatePortal;\n  private _overlayRef: OverlayRef | null = null;\n  private _menuOpen: boolean = false;\n  private _closeSubscription = Subscription.EMPTY;\n  private _hoverSubscription = Subscription.EMPTY;\n\n  // Tracking input type is necessary so it's possible to only auto-focus\n  // the first item of the list when the menu is opened via the keyboard\n  private _openedByMouse: boolean = false;\n\n  /**\n   * @deprecated\n   * @breaking-change 7.0.0\n   */\n  @Input('mat-menu-trigger-for')\n  get _deprecatedMatMenuTriggerFor(): MatMenuPanel {\n    return this.menu;\n  }\n\n  set _deprecatedMatMenuTriggerFor(v: MatMenuPanel) {\n    this.menu = v;\n  }\n\n  /** References the menu instance that the trigger is associated with. */\n  @Input('matMenuTriggerFor') menu: MatMenuPanel;\n\n  /** Data to be passed along to any lazily-rendered content. */\n  @Input('matMenuTriggerData') menuData: any;\n\n  /** Event emitted when the associated menu is opened. */\n  @Output() readonly menuOpened: EventEmitter<void> = new EventEmitter<void>();\n\n  /**\n   * Event emitted when the associated menu is opened.\n   * @deprecated Switch to `menuOpened` instead\n   * @breaking-change 7.0.0\n   */\n  // tslint:disable-next-line:no-output-on-prefix\n  @Output() readonly onMenuOpen: EventEmitter<void> = this.menuOpened;\n\n  /** Event emitted when the associated menu is closed. */\n  @Output() readonly menuClosed: EventEmitter<void> = new EventEmitter<void>();\n\n  /**\n   * Event emitted when the associated menu is closed.\n   * @deprecated Switch to `menuClosed` instead\n   * @breaking-change 7.0.0\n   */\n  // tslint:disable-next-line:no-output-on-prefix\n  @Output() readonly onMenuClose: EventEmitter<void> = this.menuClosed;\n\n  constructor(private _overlay: Overlay,\n              private _element: ElementRef,\n              private _viewContainerRef: ViewContainerRef,\n              @Inject(MAT_MENU_SCROLL_STRATEGY) private _scrollStrategy,\n              @Optional() private _parentMenu: MatMenu,\n              @Optional() @Self() private _menuItemInstance: MatMenuItem,\n              @Optional() private _dir: Directionality,\n              // TODO(crisbeto): make the _focusMonitor required when doing breaking changes.\n              // @breaking-change 7.0.0\n              private _focusMonitor?: FocusMonitor) {\n\n    if (_menuItemInstance) {\n      _menuItemInstance._triggersSubmenu = this.triggersSubmenu();\n    }\n  }\n\n  ngAfterContentInit() {\n    this._checkMenu();\n\n    this.menu.close.subscribe(reason => {\n      this._destroyMenu();\n\n      // If a click closed the menu, we should close the entire chain of nested menus.\n      if ((reason === 'click' || reason === 'tab') && this._parentMenu) {\n        this._parentMenu.closed.emit(reason);\n      }\n    });\n\n    this._handleHover();\n  }\n\n  ngOnDestroy() {\n    if (this._overlayRef) {\n      this._overlayRef.dispose();\n      this._overlayRef = null;\n    }\n\n    this._cleanUpSubscriptions();\n  }\n\n  /** Whether the menu is open. */\n  get menuOpen(): boolean {\n    return this._menuOpen;\n  }\n\n  /** The text direction of the containing app. */\n  get dir(): Direction {\n    return this._dir && this._dir.value === 'rtl' ? 'rtl' : 'ltr';\n  }\n\n  /** Whether the menu triggers a sub-menu or a top-level one. */\n  triggersSubmenu(): boolean {\n    return !!(this._menuItemInstance && this._parentMenu);\n  }\n\n  /** Toggles the menu between the open and closed states. */\n  toggleMenu(): void {\n    return this._menuOpen ? this.closeMenu() : this.openMenu();\n  }\n\n  /** Opens the menu. */\n  openMenu(): void {\n    if (this._menuOpen) {\n      return;\n    }\n\n    this._checkMenu();\n\n    const overlayRef = this._createOverlay();\n    this._setPosition(overlayRef.getConfig().positionStrategy as FlexibleConnectedPositionStrategy);\n    overlayRef.attach(this._portal);\n\n    if (this.menu.lazyContent) {\n      this.menu.lazyContent.attach(this.menuData);\n    }\n\n    this._closeSubscription = this._menuClosingActions().subscribe(() => this.closeMenu());\n    this._initMenu();\n\n    if (this.menu instanceof MatMenu) {\n      this.menu._startAnimation();\n    }\n  }\n\n  /** Closes the menu. */\n  closeMenu(): void {\n    this.menu.close.emit();\n  }\n\n  /**\n   * Focuses the menu trigger.\n   * @param origin Source of the menu trigger's focus.\n   */\n  focus(origin: FocusOrigin = 'program') {\n    if (this._focusMonitor) {\n      this._focusMonitor.focusVia(this._element.nativeElement, origin);\n    } else {\n      this._element.nativeElement.focus();\n    }\n  }\n\n  /** Closes the menu and does the necessary cleanup. */\n  private _destroyMenu() {\n    if (!this._overlayRef || !this.menuOpen) {\n      return;\n    }\n\n    const menu = this.menu;\n\n    this._closeSubscription.unsubscribe();\n    this._overlayRef.detach();\n\n    if (menu instanceof MatMenu) {\n      menu._resetAnimation();\n\n      if (menu.lazyContent) {\n        // Wait for the exit animation to finish before detaching the content.\n        menu._animationDone\n          .pipe(\n            filter(event => event.toState === 'void'),\n            take(1),\n            // Interrupt if the content got re-attached.\n            takeUntil(menu.lazyContent._attached)\n          )\n          .subscribe(() => menu.lazyContent!.detach(), undefined, () => {\n            // No matter whether the content got re-attached, reset the menu.\n            this._resetMenu();\n          });\n      } else {\n        this._resetMenu();\n      }\n    } else {\n      this._resetMenu();\n\n      if (menu.lazyContent) {\n        menu.lazyContent.detach();\n      }\n    }\n  }\n\n  /**\n   * This method sets the menu state to open and focuses the first item if\n   * the menu was opened via the keyboard.\n   */\n  private _initMenu(): void {\n    this.menu.parentMenu = this.triggersSubmenu() ? this._parentMenu : undefined;\n    this.menu.direction = this.dir;\n    this._setMenuElevation();\n    this._setIsMenuOpen(true);\n    this.menu.focusFirstItem(this._openedByMouse ? 'mouse' : 'program');\n  }\n\n  /** Updates the menu elevation based on the amount of parent menus that it has. */\n  private _setMenuElevation(): void {\n    if (this.menu.setElevation) {\n      let depth = 0;\n      let parentMenu = this.menu.parentMenu;\n\n      while (parentMenu) {\n        depth++;\n        parentMenu = parentMenu.parentMenu;\n      }\n\n      this.menu.setElevation(depth);\n    }\n  }\n\n  /**\n   * This method resets the menu when it's closed, most importantly restoring\n   * focus to the menu trigger if the menu was opened via the keyboard.\n   */\n  private _resetMenu(): void {\n    this._setIsMenuOpen(false);\n\n    // We should reset focus if the user is navigating using a keyboard or\n    // if we have a top-level trigger which might cause focus to be lost\n    // when clicking on the backdrop.\n    if (!this._openedByMouse) {\n      // Note that the focus style will show up both for `program` and\n      // `keyboard` so we don't have to specify which one it is.\n      this.focus();\n    } else if (!this.triggersSubmenu()) {\n      this.focus('mouse');\n    }\n\n    this._openedByMouse = false;\n  }\n\n  // set state rather than toggle to support triggers sharing a menu\n  private _setIsMenuOpen(isOpen: boolean): void {\n    this._menuOpen = isOpen;\n    this._menuOpen ? this.menuOpened.emit() : this.menuClosed.emit();\n\n    if (this.triggersSubmenu()) {\n      this._menuItemInstance._highlighted = isOpen;\n    }\n  }\n\n  /**\n   * This method checks that a valid instance of MatMenu has been passed into\n   * matMenuTriggerFor. If not, an exception is thrown.\n   */\n  private _checkMenu() {\n    if (!this.menu) {\n      throwMatMenuMissingError();\n    }\n  }\n\n  /**\n   * This method creates the overlay from the provided menu's template and saves its\n   * OverlayRef so that it can be attached to the DOM when openMenu is called.\n   */\n  private _createOverlay(): OverlayRef {\n    if (!this._overlayRef) {\n      this._portal = new TemplatePortal(this.menu.templateRef, this._viewContainerRef);\n      const config = this._getOverlayConfig();\n      this._subscribeToPositions(config.positionStrategy as FlexibleConnectedPositionStrategy);\n      this._overlayRef = this._overlay.create(config);\n    }\n\n    return this._overlayRef;\n  }\n\n  /**\n   * This method builds the configuration object needed to create the overlay, the OverlayState.\n   * @returns OverlayConfig\n   */\n  private _getOverlayConfig(): OverlayConfig {\n    return new OverlayConfig({\n      positionStrategy: this._overlay.position()\n          .flexibleConnectedTo(this._element)\n          .withTransformOriginOn('.mat-menu-panel'),\n      hasBackdrop: this.menu.hasBackdrop == null ? !this.triggersSubmenu() : this.menu.hasBackdrop,\n      backdropClass: this.menu.backdropClass || 'cdk-overlay-transparent-backdrop',\n      scrollStrategy: this._scrollStrategy(),\n      direction: this._dir\n    });\n  }\n\n  /**\n   * Listens to changes in the position of the overlay and sets the correct classes\n   * on the menu based on the new position. This ensures the animation origin is always\n   * correct, even if a fallback position is used for the overlay.\n   */\n  private _subscribeToPositions(position: FlexibleConnectedPositionStrategy): void {\n    if (this.menu.setPositionClasses) {\n      position.positionChanges.subscribe(change => {\n        const posX: MenuPositionX = change.connectionPair.overlayX === 'start' ? 'after' : 'before';\n        const posY: MenuPositionY = change.connectionPair.overlayY === 'top' ? 'below' : 'above';\n\n        this.menu.setPositionClasses!(posX, posY);\n      });\n    }\n  }\n\n  /**\n   * Sets the appropriate positions on a position strategy\n   * so the overlay connects with the trigger correctly.\n   * @param positionStrategy Strategy whose position to update.\n   */\n  private _setPosition(positionStrategy: FlexibleConnectedPositionStrategy) {\n    let [originX, originFallbackX]: HorizontalConnectionPos[] =\n        this.menu.xPosition === 'before' ? ['end', 'start'] : ['start', 'end'];\n\n    let [overlayY, overlayFallbackY]: VerticalConnectionPos[] =\n        this.menu.yPosition === 'above' ? ['bottom', 'top'] : ['top', 'bottom'];\n\n    let [originY, originFallbackY] = [overlayY, overlayFallbackY];\n    let [overlayX, overlayFallbackX] = [originX, originFallbackX];\n    let offsetY = 0;\n\n    if (this.triggersSubmenu()) {\n      // When the menu is a sub-menu, it should always align itself\n      // to the edges of the trigger, instead of overlapping it.\n      overlayFallbackX = originX = this.menu.xPosition === 'before' ? 'start' : 'end';\n      originFallbackX = overlayX = originX === 'end' ? 'start' : 'end';\n      offsetY = overlayY === 'bottom' ? MENU_PANEL_TOP_PADDING : -MENU_PANEL_TOP_PADDING;\n    } else if (!this.menu.overlapTrigger) {\n      originY = overlayY === 'top' ? 'bottom' : 'top';\n      originFallbackY = overlayFallbackY === 'top' ? 'bottom' : 'top';\n    }\n\n    positionStrategy.withPositions([\n      {originX, originY, overlayX, overlayY, offsetY},\n      {originX: originFallbackX, originY, overlayX: overlayFallbackX, overlayY, offsetY},\n      {\n        originX,\n        originY: originFallbackY,\n        overlayX,\n        overlayY: overlayFallbackY,\n        offsetY: -offsetY\n      },\n      {\n        originX: originFallbackX,\n        originY: originFallbackY,\n        overlayX: overlayFallbackX,\n        overlayY: overlayFallbackY,\n        offsetY: -offsetY\n      }\n    ]);\n  }\n\n  /** Cleans up the active subscriptions. */\n  private _cleanUpSubscriptions(): void {\n    this._closeSubscription.unsubscribe();\n    this._hoverSubscription.unsubscribe();\n  }\n\n  /** Returns a stream that emits whenever an action that should close the menu occurs. */\n  private _menuClosingActions() {\n    const backdrop = this._overlayRef!.backdropClick();\n    const detachments = this._overlayRef!.detachments();\n    const parentClose = this._parentMenu ? this._parentMenu.closed : observableOf();\n    const hover = this._parentMenu ? this._parentMenu._hovered().pipe(\n      filter(active => active !== this._menuItemInstance),\n      filter(() => this._menuOpen)\n    ) : observableOf();\n\n    return merge(backdrop, parentClose, hover, detachments);\n  }\n\n  /** Handles mouse presses on the trigger. */\n  _handleMousedown(event: MouseEvent): void {\n    if (!isFakeMousedownFromScreenReader(event)) {\n      this._openedByMouse = true;\n\n      // Since clicking on the trigger won't close the menu if it opens a sub-menu,\n      // we should prevent focus from moving onto it via click to avoid the\n      // highlight from lingering on the menu item.\n      if (this.triggersSubmenu()) {\n        event.preventDefault();\n      }\n    }\n  }\n\n  /** Handles key presses on the trigger. */\n  _handleKeydown(event: KeyboardEvent): void {\n    const keyCode = event.keyCode;\n\n    if (this.triggersSubmenu() && (\n            (keyCode === RIGHT_ARROW && this.dir === 'ltr') ||\n            (keyCode === LEFT_ARROW && this.dir === 'rtl'))) {\n      this.openMenu();\n    }\n  }\n\n  /** Handles click events on the trigger. */\n  _handleClick(event: MouseEvent): void {\n    if (this.triggersSubmenu()) {\n      // Stop event propagation to avoid closing the parent menu.\n      event.stopPropagation();\n      this.openMenu();\n    } else {\n      this.toggleMenu();\n    }\n  }\n\n  /** Handles the cases where the user hovers over the trigger. */\n  private _handleHover() {\n    // Subscribe to changes in the hovered item in order to toggle the panel.\n    if (!this.triggersSubmenu()) {\n      return;\n    }\n\n    this._hoverSubscription = this._parentMenu._hovered()\n      // Since we might have multiple competing triggers for the same menu (e.g. a sub-menu\n      // with different data and triggers), we have to delay it by a tick to ensure that\n      // it won't be closed immediately after it is opened.\n      .pipe(\n        filter(active => active === this._menuItemInstance && !active.disabled),\n        delay(0, asapScheduler)\n      )\n      .subscribe(() => {\n        this._openedByMouse = true;\n\n        // If the same menu is used between multiple triggers, it might still be animating\n        // while the new trigger tries to re-open it. Wait for the animation to finish\n        // before doing so. Also interrupt if the user moves to another item.\n        if (this.menu instanceof MatMenu && this.menu._isAnimating) {\n          // We need the `delay(0)` here in order to avoid\n          // 'changed after checked' errors in some cases. See #12194.\n          this.menu._animationDone\n            .pipe(take(1), delay(0, asapScheduler), takeUntil(this._parentMenu._hovered()))\n            .subscribe(() => this.openMenu());\n        } else {\n          this.openMenu();\n        }\n      });\n  }\n\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {MatMenuContent} from './menu-content';\nimport {MatMenu} from './menu-directive';\nimport {MatMenuItem} from './menu-item';\nimport {\n  MatMenuTrigger,\n  MAT_MENU_SCROLL_STRATEGY_FACTORY_PROVIDER,\n} from './menu-trigger';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatCommonModule,\n    MatRippleModule,\n    OverlayModule,\n  ],\n  exports: [MatMenu, MatMenuItem, MatMenuTrigger, MatMenuContent, MatCommonModule],\n  declarations: [MatMenu, MatMenuItem, MatMenuTrigger, MatMenuContent],\n  providers: [MAT_MENU_SCROLL_STRATEGY_FACTORY_PROVIDER]\n})\nexport class MatMenuModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  animate,\n  AnimationTriggerMetadata,\n  state,\n  style,\n  transition,\n  trigger,\n  query,\n  animateChild,\n  group,\n} from '@angular/animations';\n\n/**\n * The following are all the animations for the mat-select component, with each\n * const containing the metadata for one animation.\n *\n * The values below match the implementation of the AngularJS Material mat-select animation.\n */\nexport const matSelectAnimations: {\n  readonly transformPanel: AnimationTriggerMetadata;\n  readonly fadeInContent: AnimationTriggerMetadata;\n} = {\n  /**\n   * This animation transforms the select's overlay panel on and off the page.\n   *\n   * When the panel is attached to the DOM, it expands its width by the amount of padding, scales it\n   * up to 100% on the Y axis, fades in its border, and translates slightly up and to the\n   * side to ensure the option text correctly overlaps the trigger text.\n   *\n   * When the panel is removed from the DOM, it simply fades out linearly.\n   */\n  transformPanel: trigger('transformPanel', [\n    state('void', style({\n      transform: 'scaleY(0)',\n      minWidth: '100%',\n      opacity: 0\n    })),\n    state('showing', style({\n      opacity: 1,\n      minWidth: 'calc(100% + 32px)', // 32px = 2 * 16px padding\n      transform: 'scaleY(1)'\n    })),\n    state('showing-multiple', style({\n      opacity: 1,\n      minWidth: 'calc(100% + 64px)', // 64px = 48px padding on the left + 16px padding on the right\n      transform: 'scaleY(1)'\n    })),\n    transition('void => *', group([\n      query('@fadeInContent', animateChild()),\n      animate('150ms cubic-bezier(0.25, 0.8, 0.25, 1)')\n    ])),\n    transition('* => void', [\n      animate('250ms 100ms linear', style({opacity: 0}))\n    ])\n  ]),\n\n  /**\n   * This animation fades in the background color and text content of the\n   * select's options. It is time delayed to occur 100ms after the overlay\n   * panel has transformed in.\n   */\n  fadeInContent: trigger('fadeInContent', [\n    state('showing', style({opacity: 1})),\n    transition('void => showing', [\n      style({opacity: 0}),\n      animate('150ms 100ms cubic-bezier(0.55, 0, 0.55, 0.2)')\n    ])\n  ])\n};\n\n\n/**\n * @deprecated\n * @breaking-change 7.0.0\n */\nexport const transformPanel = matSelectAnimations.transformPanel;\n\n/**\n * @deprecated\n * @breaking-change 7.0.0\n */\nexport const fadeInContent = matSelectAnimations.fadeInContent;\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusableOption, FocusKeyManager} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {SelectionModel} from '@angular/cdk/collections';\nimport {SPACE, ENTER, HOME, END, UP_ARROW, DOWN_ARROW, A} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  ContentChildren,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  OnDestroy,\n  OnInit,\n  Output,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {\n  CanDisableRipple,\n  MatLine,\n  MatLineSetter,\n  mixinDisableRipple,\n} from '@angular/material/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {Subscription} from 'rxjs';\nimport {MatListAvatarCssMatStyler} from './list';\n\n\n/** @docs-private */\nexport class MatSelectionListBase {}\nexport const _MatSelectionListMixinBase = mixinDisableRipple(MatSelectionListBase);\n\n/** @docs-private */\nexport class MatListOptionBase {}\nexport const _MatListOptionMixinBase = mixinDisableRipple(MatListOptionBase);\n\n/** @docs-private */\nexport const MAT_SELECTION_LIST_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatSelectionList),\n  multi: true\n};\n\n/** Change event that is being fired whenever the selected state of an option changes. */\nexport class MatSelectionListChange {\n  constructor(\n    /** Reference to the selection list that emitted the event. */\n    public source: MatSelectionList,\n    /** Reference to the option that has been changed. */\n    public option: MatListOption) {}\n}\n\n/**\n * Component for list-options of selection-list. Each list-option can automatically\n * generate a checkbox and can put current item into the selectionModel of selection-list\n * if the current item is selected.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-list-option',\n  exportAs: 'matListOption',\n  inputs: ['disableRipple'],\n  host: {\n    'role': 'option',\n    'class': 'mat-list-item mat-list-option',\n    '(focus)': '_handleFocus()',\n    '(blur)': '_handleBlur()',\n    '(click)': '_handleClick()',\n    'tabindex': '-1',\n    '[class.mat-list-item-disabled]': 'disabled',\n    '[class.mat-list-item-focus]': '_hasFocus',\n    '[class.mat-list-item-with-avatar]': '_avatar',\n    '[attr.aria-selected]': 'selected.toString()',\n    '[attr.aria-disabled]': 'disabled.toString()',\n  },\n  templateUrl: 'list-option.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatListOption extends _MatListOptionMixinBase\n    implements AfterContentInit, OnDestroy, OnInit, FocusableOption, CanDisableRipple {\n\n  private _selected = false;\n  private _disabled = false;\n\n  /** Whether the option has focus. */\n  _hasFocus: boolean = false;\n\n  @ContentChild(MatListAvatarCssMatStyler) _avatar: MatListAvatarCssMatStyler;\n  @ContentChildren(MatLine) _lines: QueryList<MatLine>;\n\n  /** DOM element containing the item's text. */\n  @ViewChild('text') _text: ElementRef;\n\n  /** Whether the label should appear before or after the checkbox. Defaults to 'after' */\n  @Input() checkboxPosition: 'before' | 'after' = 'after';\n\n  /** Value of the option */\n  @Input() value: any;\n\n  /** Whether the option is disabled. */\n  @Input()\n  get disabled() { return this._disabled || (this.selectionList && this.selectionList.disabled); }\n  set disabled(value: any) {\n    const newValue = coerceBooleanProperty(value);\n\n    if (newValue !== this._disabled) {\n      this._disabled = newValue;\n      this._changeDetector.markForCheck();\n    }\n  }\n\n  /** Whether the option is selected. */\n  @Input()\n  get selected(): boolean { return this.selectionList.selectedOptions.isSelected(this); }\n  set selected(value: boolean) {\n    const isSelected = coerceBooleanProperty(value);\n\n    if (isSelected !== this._selected) {\n      this._setSelected(isSelected);\n      this.selectionList._reportValueChange();\n    }\n  }\n\n  constructor(private _element: ElementRef,\n              private _changeDetector: ChangeDetectorRef,\n              /** @docs-private */\n              @Inject(forwardRef(() => MatSelectionList)) public selectionList: MatSelectionList) {\n    super();\n  }\n\n  ngOnInit() {\n    // List options that are selected at initialization can't be reported properly to the form\n    // control. This is because it takes some time until the selection-list knows about all\n    // available options. Also it can happen that the ControlValueAccessor has an initial value\n    // that should be used instead. Deferring the value change report to the next tick ensures\n    // that the form control value is not being overwritten.\n    const wasSelected = this._selected;\n\n    Promise.resolve().then(() => {\n      if (this._selected || wasSelected) {\n        this.selected = true;\n        this._changeDetector.markForCheck();\n      }\n    });\n  }\n\n  ngAfterContentInit() {\n    // TODO: consider turning the setter into a function, it doesn't do anything as a class.\n    // tslint:disable-next-line:no-unused-expression\n    new MatLineSetter(this._lines, this._element);\n  }\n\n  ngOnDestroy(): void {\n    if (this.selected) {\n      // We have to delay this until the next tick in order\n      // to avoid changed after checked errors.\n      Promise.resolve().then(() => this.selected = false);\n    }\n\n    this.selectionList._removeOptionFromList(this);\n  }\n\n  /** Toggles the selection state of the option. */\n  toggle(): void {\n    this.selected = !this.selected;\n  }\n\n  /** Allows for programmatic focusing of the option. */\n  focus(): void {\n    this._element.nativeElement.focus();\n  }\n\n  /**\n   * Returns the list item's text label. Implemented as a part of the FocusKeyManager.\n   * @docs-private\n   */\n  getLabel() {\n    return this._text ? this._text.nativeElement.textContent : '';\n  }\n\n  /** Whether this list item should show a ripple effect when clicked. */\n  _isRippleDisabled() {\n    return this.disabled || this.disableRipple || this.selectionList.disableRipple;\n  }\n\n  _handleClick() {\n    if (!this.disabled) {\n      this.toggle();\n\n      // Emit a change event if the selected state of the option changed through user interaction.\n      this.selectionList._emitChangeEvent(this);\n    }\n  }\n\n  _handleFocus() {\n    this._hasFocus = true;\n    this.selectionList._setFocusedOption(this);\n  }\n\n  _handleBlur() {\n    this._hasFocus = false;\n    this.selectionList._onTouched();\n  }\n\n  /** Retrieves the DOM element of the component host. */\n  _getHostElement(): HTMLElement {\n    return this._element.nativeElement;\n  }\n\n  /** Sets the selected state of the option. Returns whether the value has changed. */\n  _setSelected(selected: boolean): boolean {\n    if (selected === this._selected) {\n      return false;\n    }\n\n    this._selected = selected;\n\n    if (selected) {\n      this.selectionList.selectedOptions.select(this);\n    } else {\n      this.selectionList.selectedOptions.deselect(this);\n    }\n\n    this._changeDetector.markForCheck();\n    return true;\n  }\n\n  /**\n   * Notifies Angular that the option needs to be checked in the next change detection run. Mainly\n   * used to trigger an update of the list option if the disabled state of the selection list\n   * changed.\n   */\n  _markForCheck() {\n    this._changeDetector.markForCheck();\n  }\n}\n\n\n/**\n * Material Design list component where each item is a selectable option. Behaves as a listbox.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-selection-list',\n  exportAs: 'matSelectionList',\n  inputs: ['disabled', 'disableRipple', 'tabIndex'],\n  host: {\n    'role': 'listbox',\n    '[tabIndex]': 'tabIndex',\n    'class': 'mat-selection-list',\n    '(focus)': 'focus()',\n    '(blur)': '_onTouched()',\n    '(keydown)': '_keydown($event)',\n    '[attr.aria-disabled]': 'disabled.toString()',\n  },\n  template: '<ng-content></ng-content>',\n  styleUrls: ['list.css'],\n  encapsulation: ViewEncapsulation.None,\n  providers: [MAT_SELECTION_LIST_VALUE_ACCESSOR],\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class MatSelectionList extends _MatSelectionListMixinBase implements FocusableOption,\n    CanDisableRipple, AfterContentInit, ControlValueAccessor, OnDestroy {\n\n  /** The FocusKeyManager which handles focus. */\n  _keyManager: FocusKeyManager<MatListOption>;\n\n  /** The option components contained within this selection-list. */\n  @ContentChildren(MatListOption) options: QueryList<MatListOption>;\n\n  /** Emits a change event whenever the selected state of an option changes. */\n  @Output() readonly selectionChange: EventEmitter<MatSelectionListChange> =\n      new EventEmitter<MatSelectionListChange>();\n\n  /** Tabindex of the selection list. */\n  @Input() tabIndex: number = 0;\n\n  /**\n   * Function used for comparing an option against the selected value when determining which\n   * options should appear as selected. The first argument is the value of an options. The second\n   * one is a value from the selected value. A boolean must be returned.\n   */\n  @Input() compareWith: (o1: any, o2: any) => boolean;\n\n  /** Whether the selection list is disabled. */\n  @Input()\n  get disabled(): boolean { return this._disabled; }\n  set disabled(value: boolean) {\n    this._disabled = coerceBooleanProperty(value);\n\n    // The `MatSelectionList` and `MatListOption` are using the `OnPush` change detection\n    // strategy. Therefore the options will not check for any changes if the `MatSelectionList`\n    // changed its state. Since we know that a change to `disabled` property of the list affects\n    // the state of the options, we manually mark each option for check.\n    if (this.options) {\n      this.options.forEach(option => option._markForCheck());\n    }\n  }\n  private _disabled: boolean = false;\n\n  /** The currently selected options. */\n  selectedOptions: SelectionModel<MatListOption> = new SelectionModel<MatListOption>(true);\n\n  /** View to model callback that should be called whenever the selected options change. */\n  private _onChange: (value: any) => void = (_: any) => {};\n\n  /** Used for storing the values that were assigned before the options were initialized. */\n  private _tempValues: string[]|null;\n\n  /** Subscription to sync value changes in the SelectionModel back to the SelectionList. */\n  private _modelChanges = Subscription.EMPTY;\n\n  /** View to model callback that should be called if the list or its options lost focus. */\n  _onTouched: () => void = () => {};\n\n  constructor(private _element: ElementRef, @Attribute('tabindex') tabIndex: string) {\n    super();\n    this.tabIndex = parseInt(tabIndex) || 0;\n  }\n\n  ngAfterContentInit(): void {\n    this._keyManager = new FocusKeyManager<MatListOption>(this.options)\n      .withWrap()\n      .withTypeAhead()\n      // Allow disabled items to be focusable. For accessibility reasons, there must be a way for\n      // screenreader users, that allows reading the different options of the list.\n      .skipPredicate(() => false);\n\n    if (this._tempValues) {\n      this._setOptionsFromValues(this._tempValues);\n      this._tempValues = null;\n    }\n\n    // Sync external changes to the model back to the options.\n    this._modelChanges = this.selectedOptions.onChange!.subscribe(event => {\n      if (event.added) {\n        for (let item of event.added) {\n          item.selected = true;\n        }\n      }\n\n      if (event.removed) {\n        for (let item of event.removed) {\n          item.selected = false;\n        }\n      }\n    });\n  }\n\n  ngOnDestroy() {\n    this._modelChanges.unsubscribe();\n  }\n\n  /** Focuses the last active list option. */\n  focus() {\n    this._element.nativeElement.focus();\n  }\n\n  /** Selects all of the options. */\n  selectAll() {\n    this._setAllOptionsSelected(true);\n  }\n\n  /** Deselects all of the options. */\n  deselectAll() {\n    this._setAllOptionsSelected(false);\n  }\n\n  /** Sets the focused option of the selection-list. */\n  _setFocusedOption(option: MatListOption) {\n    this._keyManager.updateActiveItemIndex(this._getOptionIndex(option));\n  }\n\n  /** Removes an option from the selection list and updates the active item. */\n  _removeOptionFromList(option: MatListOption) {\n    if (option._hasFocus) {\n      const optionIndex = this._getOptionIndex(option);\n\n      // Check whether the option is the last item\n      if (optionIndex > 0) {\n        this._keyManager.setPreviousItemActive();\n      } else if (optionIndex === 0 && this.options.length > 1) {\n        this._keyManager.setNextItemActive();\n      }\n    }\n  }\n\n  /** Passes relevant key presses to our key manager. */\n  _keydown(event: KeyboardEvent) {\n    const keyCode = event.keyCode;\n    const manager = this._keyManager;\n    const previousFocusIndex = manager.activeItemIndex;\n\n    switch (keyCode) {\n      case SPACE:\n      case ENTER:\n        this._toggleFocusedOption();\n        // Always prevent space from scrolling the page since the list has focus\n        event.preventDefault();\n        break;\n      case HOME:\n      case END:\n        keyCode === HOME ? manager.setFirstItemActive() : manager.setLastItemActive();\n        event.preventDefault();\n        break;\n      case A:\n        if (event.ctrlKey) {\n          this.options.find(option => !option.selected) ? this.selectAll() : this.deselectAll();\n          event.preventDefault();\n        }\n        break;\n      default:\n        manager.onKeydown(event);\n    }\n\n    if ((keyCode === UP_ARROW || keyCode === DOWN_ARROW) && event.shiftKey &&\n        manager.activeItemIndex !== previousFocusIndex) {\n      this._toggleFocusedOption();\n    }\n  }\n\n  /** Reports a value change to the ControlValueAccessor */\n  _reportValueChange() {\n    if (this.options) {\n      this._onChange(this._getSelectedOptionValues());\n    }\n  }\n\n  /** Emits a change event if the selected state of an option changed. */\n  _emitChangeEvent(option: MatListOption) {\n    this.selectionChange.emit(new MatSelectionListChange(this, option));\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  writeValue(values: string[]): void {\n    if (this.options) {\n      this._setOptionsFromValues(values || []);\n    } else {\n      this._tempValues = values;\n    }\n  }\n\n  /** Implemented as a part of ControlValueAccessor. */\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  registerOnChange(fn: (value: any) => void): void {\n    this._onChange = fn;\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  registerOnTouched(fn: () => void): void {\n    this._onTouched = fn;\n  }\n\n  /** Sets the selected options based on the specified values. */\n  private _setOptionsFromValues(values: string[]) {\n    this.options.forEach(option => option._setSelected(false));\n\n    values\n      .map(value => {\n        return this.options.find(option =>\n            this.compareWith ? this.compareWith(option.value, value) : option.value === value);\n      })\n      .filter(Boolean)\n      .forEach(option => option!._setSelected(true));\n  }\n\n  /** Returns the values of the selected options. */\n  private _getSelectedOptionValues(): string[] {\n    return this.options.filter(option => option.selected).map(option => option.value);\n  }\n\n  /** Toggles the state of the currently focused option if enabled. */\n  private _toggleFocusedOption(): void {\n    let focusedIndex = this._keyManager.activeItemIndex;\n\n    if (focusedIndex != null && this._isValidIndex(focusedIndex)) {\n      let focusedOption: MatListOption = this.options.toArray()[focusedIndex];\n\n      if (focusedOption && !focusedOption.disabled) {\n        focusedOption.toggle();\n\n        // Emit a change event because the focused option changed its state through user\n        // interaction.\n        this._emitChangeEvent(focusedOption);\n      }\n    }\n  }\n\n  /**\n   * Sets the selected state on all of the options\n   * and emits an event if anything changed.\n   */\n  private _setAllOptionsSelected(isSelected: boolean) {\n    // Keep track of whether anything changed, because we only want to\n    // emit the changed event when something actually changed.\n    let hasChanged = false;\n\n    this.options.forEach(option => {\n      if (option._setSelected(isSelected)) {\n        hasChanged = true;\n      }\n    });\n\n    if (hasChanged) {\n      this._reportValueChange();\n    }\n  }\n\n  /**\n   * Utility to ensure all indexes are valid.\n   * @param index The index to be checked.\n   * @returns True if the index is valid for our list of options.\n   */\n  private _isValidIndex(index: number): boolean {\n    return index >= 0 && index < this.options.length;\n  }\n\n  /** Returns the index of the specified list option. */\n  private _getOptionIndex(option: MatListOption): number {\n    return this.options.toArray().indexOf(option);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {\n  MatCommonModule,\n  MatLineModule,\n  MatPseudoCheckboxModule,\n  MatRippleModule,\n} from '@angular/material/core';\nimport {\n  MatList,\n  MatNavList,\n  MatListAvatarCssMatStyler,\n  MatListIconCssMatStyler,\n  MatListItem,\n  MatListSubheaderCssMatStyler,\n} from './list';\nimport {MatListOption, MatSelectionList} from './selection-list';\nimport {MatDividerModule} from '@angular/material/divider';\n\n\n@NgModule({\n  imports: [MatLineModule, MatRippleModule, MatCommonModule, MatPseudoCheckboxModule, CommonModule],\n  exports: [\n    MatList,\n    MatNavList,\n    MatListItem,\n    MatListAvatarCssMatStyler,\n    MatLineModule,\n    MatCommonModule,\n    MatListIconCssMatStyler,\n    MatListSubheaderCssMatStyler,\n    MatPseudoCheckboxModule,\n    MatSelectionList,\n    MatListOption,\n    MatDividerModule\n  ],\n  declarations: [\n    MatList,\n    MatNavList,\n    MatListItem,\n    MatListAvatarCssMatStyler,\n    MatListIconCssMatStyler,\n    MatListSubheaderCssMatStyler,\n    MatSelectionList,\n    MatListOption\n  ],\n})\nexport class MatListModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  Component,\n  ContentChild,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  Optional,\n  QueryList,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {CanDisableRipple, MatLine, MatLineSetter, mixinDisableRipple} from '@angular/material/core';\n\n// Boilerplate for applying mixins to MatList.\n/** @docs-private */\nexport class MatListBase {}\nexport const _MatListMixinBase = mixinDisableRipple(MatListBase);\n\n// Boilerplate for applying mixins to MatListItem.\n/** @docs-private */\nexport class MatListItemBase {}\nexport const _MatListItemMixinBase = mixinDisableRipple(MatListItemBase);\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-nav-list',\n  exportAs: 'matNavList',\n  host: {\n    'role': 'navigation',\n    'class': 'mat-nav-list'\n  },\n  templateUrl: 'list.html',\n  styleUrls: ['list.css'],\n  inputs: ['disableRipple'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatNavList extends _MatListMixinBase implements CanDisableRipple {}\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-list',\n  exportAs: 'matList',\n  templateUrl: 'list.html',\n  host: {'class': 'mat-list'},\n  styleUrls: ['list.css'],\n  inputs: ['disableRipple'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatList extends _MatListMixinBase implements CanDisableRipple {}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-list-avatar], [matListAvatar]',\n  host: {'class': 'mat-list-avatar'}\n})\nexport class MatListAvatarCssMatStyler {}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-list-icon], [matListIcon]',\n  host: {'class': 'mat-list-icon'}\n})\nexport class MatListIconCssMatStyler {}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-subheader], [matSubheader]',\n  host: {'class': 'mat-subheader'}\n})\nexport class MatListSubheaderCssMatStyler {}\n\n/** An item within a Material Design list. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-list-item, a[mat-list-item]',\n  exportAs: 'matListItem',\n  host: {\n    'class': 'mat-list-item',\n    // @breaking-change 7.0.0 Remove `mat-list-item-avatar` in favor of `mat-list-item-with-avatar`.\n    '[class.mat-list-item-avatar]': '_avatar || _icon',\n    '[class.mat-list-item-with-avatar]': '_avatar || _icon',\n    '(focus)': '_handleFocus()',\n    '(blur)': '_handleBlur()',\n  },\n  inputs: ['disableRipple'],\n  templateUrl: 'list-item.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatListItem extends _MatListItemMixinBase implements AfterContentInit,\n    CanDisableRipple {\n  private _isNavList: boolean = false;\n\n  @ContentChildren(MatLine) _lines: QueryList<MatLine>;\n  @ContentChild(MatListAvatarCssMatStyler) _avatar: MatListAvatarCssMatStyler;\n  @ContentChild(MatListIconCssMatStyler) _icon: MatListIconCssMatStyler;\n\n  constructor(private _element: ElementRef,\n              @Optional() private _navList: MatNavList) {\n    super();\n    this._isNavList = !!_navList;\n  }\n\n  ngAfterContentInit() {\n    // TODO: consider turning the setter into a function, it doesn't do anything as a class.\n    // tslint:disable-next-line:no-unused-expression\n    new MatLineSetter(this._lines, this._element);\n  }\n\n  /** Whether this list item should show a ripple effect when clicked. */\n  _isRippleDisabled() {\n    return !this._isNavList || this.disableRipple || this._navList.disableRipple;\n  }\n\n  _handleFocus() {\n    this._element.nativeElement.classList.add('mat-list-item-focus');\n  }\n\n  _handleBlur() {\n    this._element.nativeElement.classList.remove('mat-list-item-focus');\n  }\n\n  /** Retrieves the DOM element of the component host. */\n  _getHostElement(): HTMLElement {\n    return this._element.nativeElement;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, Input, ContentChildren, QueryList, AfterContentInit} from '@angular/core';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {CdkAccordion} from '@angular/cdk/accordion';\nimport {FocusKeyManager} from '@angular/cdk/a11y';\nimport {HOME, END} from '@angular/cdk/keycodes';\nimport {MAT_ACCORDION, MatAccordionBase, MatAccordionDisplayMode} from './accordion-base';\nimport {MatExpansionPanelHeader} from './expansion-panel-header';\n\n/**\n * Directive for a Material Design Accordion.\n */\n@Directive({\n  selector: 'mat-accordion',\n  exportAs: 'matAccordion',\n  inputs: ['multi'],\n  providers: [{\n    provide: MAT_ACCORDION,\n    useExisting: MatAccordion\n  }],\n  host: {\n    class: 'mat-accordion'\n  }\n})\nexport class MatAccordion extends CdkAccordion implements MatAccordionBase, AfterContentInit {\n  private _keyManager: FocusKeyManager<MatExpansionPanelHeader>;\n\n  @ContentChildren(MatExpansionPanelHeader, {descendants: true})\n  _headers: QueryList<MatExpansionPanelHeader>;\n\n  /** Whether the expansion indicator should be hidden. */\n  @Input()\n  get hideToggle(): boolean { return this._hideToggle; }\n  set hideToggle(show: boolean) { this._hideToggle = coerceBooleanProperty(show); }\n  private _hideToggle: boolean = false;\n\n  /**\n   * Display mode used for all expansion panels in the accordion. Currently two display\n   * modes exist:\n   *  default - a gutter-like spacing is placed around any expanded panel, placing the expanded\n   *     panel at a different elevation from the rest of the accordion.\n   *  flat - no spacing is placed around expanded panels, showing all panels at the same\n   *     elevation.\n   */\n  @Input() displayMode: MatAccordionDisplayMode = 'default';\n\n  ngAfterContentInit() {\n    this._keyManager = new FocusKeyManager(this._headers).withWrap();\n  }\n\n  /** Handles keyboard events coming in from the panel headers. */\n  _handleHeaderKeydown(event: KeyboardEvent) {\n    const {keyCode} = event;\n    const manager = this._keyManager;\n\n    if (keyCode === HOME) {\n      manager.setFirstItemActive();\n      event.preventDefault();\n    } else if (keyCode === END) {\n      manager.setLastItemActive();\n      event.preventDefault();\n    } else {\n      this._keyManager.onKeydown(event);\n    }\n  }\n\n  _handleHeaderFocus(header: MatExpansionPanelHeader) {\n    this._keyManager.updateActiveItem(header);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CdkAccordionModule} from '@angular/cdk/accordion';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatAccordion} from './accordion';\nimport {MatExpansionPanel, MatExpansionPanelActionRow} from './expansion-panel';\nimport {MatExpansionPanelContent} from './expansion-panel-content';\nimport {\n  MatExpansionPanelDescription,\n  MatExpansionPanelHeader,\n  MatExpansionPanelTitle,\n} from './expansion-panel-header';\n\n\n@NgModule({\n  imports: [CommonModule, CdkAccordionModule, PortalModule],\n  exports: [\n    MatAccordion,\n    MatExpansionPanel,\n    MatExpansionPanelActionRow,\n    MatExpansionPanelHeader,\n    MatExpansionPanelTitle,\n    MatExpansionPanelDescription,\n    MatExpansionPanelContent,\n  ],\n  declarations: [\n    MatAccordion,\n    MatExpansionPanel,\n    MatExpansionPanelActionRow,\n    MatExpansionPanelHeader,\n    MatExpansionPanelTitle,\n    MatExpansionPanelDescription,\n    MatExpansionPanelContent,\n  ],\n})\nexport class MatExpansionModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ViewEncapsulation,\n  ElementRef,\n  Input,\n  ContentChildren,\n  QueryList,\n  AfterContentInit,\n  Directive,\n  ChangeDetectionStrategy,\n} from '@angular/core';\nimport {MatLine, MatLineSetter} from '@angular/material/core';\nimport {coerceNumberProperty} from '@angular/cdk/coercion';\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-grid-tile',\n  exportAs: 'matGridTile',\n  host: {\n    'class': 'mat-grid-tile',\n  },\n  templateUrl: 'grid-tile.html',\n  styleUrls: ['grid-list.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatGridTile {\n  _rowspan: number = 1;\n  _colspan: number = 1;\n\n  constructor(private _element: ElementRef) {}\n\n  /** Amount of rows that the grid tile takes up. */\n  @Input()\n  get rowspan(): number { return this._rowspan; }\n  set rowspan(value: number) { this._rowspan = Math.round(coerceNumberProperty(value)); }\n\n  /** Amount of columns that the grid tile takes up. */\n  @Input()\n  get colspan(): number { return this._colspan; }\n  set colspan(value: number) { this._colspan = Math.round(coerceNumberProperty(value)); }\n\n  /**\n   * Sets the style of the grid-tile element.  Needs to be set manually to avoid\n   * \"Changed after checked\" errors that would occur with HostBinding.\n   */\n  _setStyle(property: string, value: any): void {\n    this._element.nativeElement.style[property] = value;\n  }\n}\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-grid-tile-header, mat-grid-tile-footer',\n  templateUrl: 'grid-tile-text.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatGridTileText implements AfterContentInit {\n  /**\n   *  Helper that watches the number of lines in a text area and sets\n   * a class on the host element that matches the line count.\n   */\n  _lineSetter: MatLineSetter;\n  @ContentChildren(MatLine) _lines: QueryList<MatLine>;\n\n  constructor(private _element: ElementRef) {}\n\n  ngAfterContentInit() {\n    this._lineSetter = new MatLineSetter(this._lines, this._element);\n  }\n}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-grid-avatar], [matGridAvatar]',\n  host: {'class': 'mat-grid-avatar'}\n})\nexport class MatGridAvatarCssMatStyler {}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-grid-tile-header',\n  host: {'class': 'mat-grid-tile-header'}\n})\nexport class MatGridTileHeaderCssMatStyler {}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-grid-tile-footer',\n  host: {'class': 'mat-grid-tile-footer'}\n})\nexport class MatGridTileFooterCssMatStyler {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {QueryList} from '@angular/core';\nimport {MatGridTile} from './grid-tile';\n\n/**\n * Class for determining, from a list of tiles, the (row, col) position of each of those tiles\n * in the grid. This is necessary (rather than just rendering the tiles in normal document flow)\n * because the tiles can have a rowspan.\n *\n * The positioning algorithm greedily places each tile as soon as it encounters a gap in the grid\n * large enough to accommodate it so that the tiles still render in the same order in which they\n * are given.\n *\n * The basis of the algorithm is the use of an array to track the already placed tiles. Each\n * element of the array corresponds to a column, and the value indicates how many cells in that\n * column are already occupied; zero indicates an empty cell. Moving \"down\" to the next row\n * decrements each value in the tracking array (indicating that the column is one cell closer to\n * being free).\n *\n * @docs-private\n */\nexport class TileCoordinator {\n  /** Tracking array (see class description). */\n  tracker: number[];\n\n  /** Index at which the search for the next gap will start. */\n  columnIndex: number = 0;\n\n  /** The current row index. */\n  rowIndex: number = 0;\n\n  /** Gets the total number of rows occupied by tiles */\n  get rowCount(): number { return this.rowIndex + 1; }\n\n  /**\n   * Gets the total span of rows occupied by tiles.\n   * Ex: A list with 1 row that contains a tile with rowspan 2 will have a total rowspan of 2.\n   */\n  get rowspan() {\n    let lastRowMax = Math.max(...this.tracker);\n    // if any of the tiles has a rowspan that pushes it beyond the total row count,\n    // add the difference to the rowcount\n    return lastRowMax > 1 ? this.rowCount + lastRowMax - 1 : this.rowCount;\n  }\n\n  /** The computed (row, col) position of each tile (the output). */\n  positions: TilePosition[];\n\n  constructor(numColumns: number, tiles: QueryList<MatGridTile>) {\n    this.tracker = new Array(numColumns);\n    this.tracker.fill(0, 0, this.tracker.length);\n\n    this.positions = tiles.map(tile => this._trackTile(tile));\n  }\n\n  /** Calculates the row and col position of a tile. */\n  private _trackTile(tile: MatGridTile): TilePosition {\n    // Find a gap large enough for this tile.\n    let gapStartIndex = this._findMatchingGap(tile.colspan);\n\n    // Place tile in the resulting gap.\n    this._markTilePosition(gapStartIndex, tile);\n\n    // The next time we look for a gap, the search will start at columnIndex, which should be\n    // immediately after the tile that has just been placed.\n    this.columnIndex = gapStartIndex + tile.colspan;\n\n    return new TilePosition(this.rowIndex, gapStartIndex);\n  }\n\n  /** Finds the next available space large enough to fit the tile. */\n  private _findMatchingGap(tileCols: number): number {\n    if (tileCols > this.tracker.length) {\n      throw Error(`mat-grid-list: tile with colspan ${tileCols} is wider than ` +\n                      `grid with cols=\"${this.tracker.length}\".`);\n    }\n\n    // Start index is inclusive, end index is exclusive.\n    let gapStartIndex = -1;\n    let gapEndIndex = -1;\n\n    // Look for a gap large enough to fit the given tile. Empty spaces are marked with a zero.\n    do {\n      // If we've reached the end of the row, go to the next row.\n      if (this.columnIndex + tileCols > this.tracker.length) {\n        this._nextRow();\n        continue;\n      }\n\n      gapStartIndex = this.tracker.indexOf(0, this.columnIndex);\n\n      // If there are no more empty spaces in this row at all, move on to the next row.\n      if (gapStartIndex == -1) {\n        this._nextRow();\n        continue;\n      }\n\n      gapEndIndex = this._findGapEndIndex(gapStartIndex);\n\n      // If a gap large enough isn't found, we want to start looking immediately after the current\n      // gap on the next iteration.\n      this.columnIndex = gapStartIndex + 1;\n\n      // Continue iterating until we find a gap wide enough for this tile.\n    } while (gapEndIndex - gapStartIndex < tileCols);\n\n    // If we still didn't manage to find a gap, ensure that the index is\n    // at least zero so the tile doesn't get pulled out of the grid.\n    return Math.max(gapStartIndex, 0);\n  }\n\n  /** Move \"down\" to the next row. */\n  private _nextRow(): void {\n    this.columnIndex = 0;\n    this.rowIndex++;\n\n    // Decrement all spaces by one to reflect moving down one row.\n    for (let i = 0; i < this.tracker.length; i++) {\n      this.tracker[i] = Math.max(0, this.tracker[i] - 1);\n    }\n  }\n\n  /**\n   * Finds the end index (exclusive) of a gap given the index from which to start looking.\n   * The gap ends when a non-zero value is found.\n   */\n  private _findGapEndIndex(gapStartIndex: number): number {\n    for (let i = gapStartIndex + 1; i < this.tracker.length; i++) {\n      if (this.tracker[i] != 0) {\n        return i;\n      }\n    }\n\n    // The gap ends with the end of the row.\n    return this.tracker.length;\n  }\n\n  /** Update the tile tracker to account for the given tile in the given space. */\n  private _markTilePosition(start: number, tile: MatGridTile): void {\n    for (let i = 0; i < tile.colspan; i++) {\n      this.tracker[start + i] = tile.rowspan;\n    }\n  }\n}\n\n/**\n * Simple data structure for tile position (row, col).\n * @docs-private\n */\nexport class TilePosition {\n  constructor(public row: number, public col: number) {}\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {MatGridList} from './grid-list';\nimport {MatGridTile} from './grid-tile';\nimport {TileCoordinator} from './tile-coordinator';\n\n/**\n * Sets the style properties for an individual tile, given the position calculated by the\n * Tile Coordinator.\n * @docs-private\n */\nexport abstract class TileStyler {\n  _gutterSize: string;\n  _rows: number = 0;\n  _rowspan: number = 0;\n  _cols: number;\n  _direction: string;\n\n  /**\n   * Adds grid-list layout info once it is available. Cannot be processed in the constructor\n   * because these properties haven't been calculated by that point.\n   *\n   * @param gutterSize Size of the grid's gutter.\n   * @param tracker Instance of the TileCoordinator.\n   * @param cols Amount of columns in the grid.\n   * @param direction Layout direction of the grid.\n   */\n  init(gutterSize: string, tracker: TileCoordinator, cols: number, direction: string): void {\n    this._gutterSize = normalizeUnits(gutterSize);\n    this._rows = tracker.rowCount;\n    this._rowspan = tracker.rowspan;\n    this._cols = cols;\n    this._direction = direction;\n  }\n\n  /**\n   * Computes the amount of space a single 1x1 tile would take up (width or height).\n   * Used as a basis for other calculations.\n   * @param sizePercent Percent of the total grid-list space that one 1x1 tile would take up.\n   * @param gutterFraction Fraction of the gutter size taken up by one 1x1 tile.\n   * @return The size of a 1x1 tile as an expression that can be evaluated via CSS calc().\n   */\n  getBaseTileSize(sizePercent: number, gutterFraction: number): string {\n    // Take the base size percent (as would be if evenly dividing the size between cells),\n    // and then subtracting the size of one gutter. However, since there are no gutters on the\n    // edges, each tile only uses a fraction (gutterShare = numGutters / numCells) of the gutter\n    // size. (Imagine having one gutter per tile, and then breaking up the extra gutter on the\n    // edge evenly among the cells).\n    return `(${sizePercent}% - (${this._gutterSize} * ${gutterFraction}))`;\n  }\n\n\n  /**\n   * Gets The horizontal or vertical position of a tile, e.g., the 'top' or 'left' property value.\n   * @param offset Number of tiles that have already been rendered in the row/column.\n   * @param baseSize Base size of a 1x1 tile (as computed in getBaseTileSize).\n   * @return Position of the tile as a CSS calc() expression.\n   */\n  getTilePosition(baseSize: string, offset: number): string {\n    // The position comes the size of a 1x1 tile plus gutter for each previous tile in the\n    // row/column (offset).\n    return offset === 0 ? '0' : calc(`(${baseSize} + ${this._gutterSize}) * ${offset}`);\n  }\n\n\n  /**\n   * Gets the actual size of a tile, e.g., width or height, taking rowspan or colspan into account.\n   * @param baseSize Base size of a 1x1 tile (as computed in getBaseTileSize).\n   * @param span The tile's rowspan or colspan.\n   * @return Size of the tile as a CSS calc() expression.\n   */\n  getTileSize(baseSize: string, span: number): string {\n    return `(${baseSize} * ${span}) + (${span - 1} * ${this._gutterSize})`;\n  }\n\n\n  /**\n   * Sets the style properties to be applied to a tile for the given row and column index.\n   * @param tile Tile to which to apply the styling.\n   * @param rowIndex Index of the tile's row.\n   * @param colIndex Index of the tile's column.\n   */\n  setStyle(tile: MatGridTile, rowIndex: number, colIndex: number): void {\n    // Percent of the available horizontal space that one column takes up.\n    let percentWidthPerTile = 100 / this._cols;\n\n    // Fraction of the vertical gutter size that each column takes up.\n    // For example, if there are 5 columns, each column uses 4/5 = 0.8 times the gutter width.\n    let gutterWidthFractionPerTile = (this._cols - 1) / this._cols;\n\n    this.setColStyles(tile, colIndex, percentWidthPerTile, gutterWidthFractionPerTile);\n    this.setRowStyles(tile, rowIndex, percentWidthPerTile, gutterWidthFractionPerTile);\n  }\n\n  /** Sets the horizontal placement of the tile in the list. */\n  setColStyles(tile: MatGridTile, colIndex: number, percentWidth: number,\n               gutterWidth: number) {\n    // Base horizontal size of a column.\n    let baseTileWidth = this.getBaseTileSize(percentWidth, gutterWidth);\n\n    // The width and horizontal position of each tile is always calculated the same way, but the\n    // height and vertical position depends on the rowMode.\n    let side = this._direction === 'rtl' ? 'right' : 'left';\n    tile._setStyle(side, this.getTilePosition(baseTileWidth, colIndex));\n    tile._setStyle('width', calc(this.getTileSize(baseTileWidth, tile.colspan)));\n  }\n\n  /**\n   * Calculates the total size taken up by gutters across one axis of a list.\n   */\n  getGutterSpan(): string {\n    return `${this._gutterSize} * (${this._rowspan} - 1)`;\n  }\n\n  /**\n   * Calculates the total size taken up by tiles across one axis of a list.\n   * @param tileHeight Height of the tile.\n   */\n  getTileSpan(tileHeight: string): string {\n    return `${this._rowspan} * ${this.getTileSize(tileHeight, 1)}`;\n  }\n\n  /**\n   * Sets the vertical placement of the tile in the list.\n   * This method will be implemented by each type of TileStyler.\n   * @docs-private\n   */\n  abstract setRowStyles(tile: MatGridTile, rowIndex: number, percentWidth: number,\n                        gutterWidth: number);\n\n  /**\n   * Calculates the computed height and returns the correct style property to set.\n   * This method can be implemented by each type of TileStyler.\n   * @docs-private\n   */\n  getComputedHeight(): [string, string] | null { return null; }\n\n  /**\n   * Called when the tile styler is swapped out with a different one. To be used for cleanup.\n   * @param list Grid list that the styler was attached to.\n   * @docs-private\n   */\n  abstract reset(list: MatGridList);\n}\n\n\n/**\n * This type of styler is instantiated when the user passes in a fixed row height.\n * Example `<mat-grid-list cols=\"3\" rowHeight=\"100px\">`\n * @docs-private\n */\nexport class FixedTileStyler extends TileStyler {\n\n  constructor(public fixedRowHeight: string) { super(); }\n\n  init(gutterSize: string, tracker: TileCoordinator, cols: number, direction: string) {\n    super.init(gutterSize, tracker, cols, direction);\n    this.fixedRowHeight = normalizeUnits(this.fixedRowHeight);\n  }\n\n  setRowStyles(tile: MatGridTile, rowIndex: number): void {\n    tile._setStyle('top', this.getTilePosition(this.fixedRowHeight, rowIndex));\n    tile._setStyle('height', calc(this.getTileSize(this.fixedRowHeight, tile.rowspan)));\n  }\n\n  getComputedHeight(): [string, string] {\n    return [\n      'height', calc(`${this.getTileSpan(this.fixedRowHeight)} + ${this.getGutterSpan()}`)\n    ];\n  }\n\n  reset(list: MatGridList) {\n    list._setListStyle(['height', null]);\n\n    list._tiles.forEach(tile => {\n      tile._setStyle('top', null);\n      tile._setStyle('height', null);\n    });\n  }\n}\n\n\n/**\n * This type of styler is instantiated when the user passes in a width:height ratio\n * for the row height.  Example `<mat-grid-list cols=\"3\" rowHeight=\"3:1\">`\n * @docs-private\n */\nexport class RatioTileStyler extends TileStyler {\n\n  /** Ratio width:height given by user to determine row height. */\n  rowHeightRatio: number;\n  baseTileHeight: string;\n\n  constructor(value: string) {\n    super();\n    this._parseRatio(value);\n  }\n\n  setRowStyles(tile: MatGridTile, rowIndex: number, percentWidth: number,\n               gutterWidth: number): void {\n    let percentHeightPerTile = percentWidth / this.rowHeightRatio;\n    this.baseTileHeight = this.getBaseTileSize(percentHeightPerTile, gutterWidth);\n\n    // Use padding-top and margin-top to maintain the given aspect ratio, as\n    // a percentage-based value for these properties is applied versus the *width* of the\n    // containing block. See http://www.w3.org/TR/CSS2/box.html#margin-properties\n    tile._setStyle('marginTop', this.getTilePosition(this.baseTileHeight, rowIndex));\n    tile._setStyle('paddingTop', calc(this.getTileSize(this.baseTileHeight, tile.rowspan)));\n  }\n\n  getComputedHeight(): [string, string] {\n    return [\n      'paddingBottom', calc(`${this.getTileSpan(this.baseTileHeight)} + ${this.getGutterSpan()}`)\n    ];\n  }\n\n  reset(list: MatGridList) {\n    list._setListStyle(['paddingBottom', null]);\n\n    list._tiles.forEach(tile => {\n      tile._setStyle('marginTop', null);\n      tile._setStyle('paddingTop', null);\n    });\n  }\n\n  private _parseRatio(value: string): void {\n    const ratioParts = value.split(':');\n\n    if (ratioParts.length !== 2) {\n      throw Error(`mat-grid-list: invalid ratio given for row-height: \"${value}\"`);\n    }\n\n    this.rowHeightRatio = parseFloat(ratioParts[0]) / parseFloat(ratioParts[1]);\n  }\n}\n\n/**\n * This type of styler is instantiated when the user selects a \"fit\" row height mode.\n * In other words, the row height will reflect the total height of the container divided\n * by the number of rows.  Example `<mat-grid-list cols=\"3\" rowHeight=\"fit\">`\n *\n * @docs-private\n */\nexport class FitTileStyler extends TileStyler {\n\n  setRowStyles(tile: MatGridTile, rowIndex: number): void {\n    // Percent of the available vertical space that one row takes up.\n    let percentHeightPerTile = 100 / this._rowspan;\n\n    // Fraction of the horizontal gutter size that each column takes up.\n    let gutterHeightPerTile = (this._rows - 1) / this._rows;\n\n    // Base vertical size of a column.\n    let baseTileHeight = this.getBaseTileSize(percentHeightPerTile, gutterHeightPerTile);\n\n    tile._setStyle('top', this.getTilePosition(baseTileHeight, rowIndex));\n    tile._setStyle('height', calc(this.getTileSize(baseTileHeight, tile.rowspan)));\n  }\n\n  reset(list: MatGridList) {\n    list._tiles.forEach(tile => {\n      tile._setStyle('top', null);\n      tile._setStyle('height', null);\n    });\n  }\n}\n\n\n/** Wraps a CSS string in a calc function */\nfunction calc(exp: string): string { return `calc(${exp})`; }\n\n\n/** Appends pixels to a CSS string if no units are given. */\nfunction normalizeUnits(value: string): string {\n  return (value.match(/px|em|rem/)) ? value : value + 'px';\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ViewEncapsulation,\n  AfterContentChecked,\n  OnInit,\n  Input,\n  ContentChildren,\n  QueryList,\n  ElementRef,\n  Optional,\n  ChangeDetectionStrategy,\n} from '@angular/core';\nimport {MatGridTile} from './grid-tile';\nimport {TileCoordinator} from './tile-coordinator';\nimport {TileStyler, FitTileStyler, RatioTileStyler, FixedTileStyler} from './tile-styler';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceNumberProperty} from '@angular/cdk/coercion';\n\n\n// TODO(kara): Conditional (responsive) column count / row size.\n// TODO(kara): Re-layout on window resize / media change (debounced).\n// TODO(kara): gridTileHeader and gridTileFooter.\n\nconst MAT_FIT_MODE = 'fit';\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-grid-list',\n  exportAs: 'matGridList',\n  templateUrl: 'grid-list.html',\n  styleUrls: ['grid-list.css'],\n  host: {\n    'class': 'mat-grid-list',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatGridList implements OnInit, AfterContentChecked {\n  /** Number of columns being rendered. */\n  private _cols: number;\n\n  /**\n   * Row height value passed in by user. This can be one of three types:\n   * - Number value (ex: \"100px\"):  sets a fixed row height to that value\n   * - Ratio value (ex: \"4:3\"): sets the row height based on width:height ratio\n   * - \"Fit\" mode (ex: \"fit\"): sets the row height to total height divided by number of rows\n   */\n  private _rowHeight: string;\n\n  /** The amount of space between tiles. This will be something like '5px' or '2em'. */\n  private _gutter: string = '1px';\n\n  /** Sets position and size styles for a tile */\n  private _tileStyler: TileStyler;\n\n  /** Query list of tiles that are being rendered. */\n  @ContentChildren(MatGridTile, {descendants: true}) _tiles: QueryList<MatGridTile>;\n\n  constructor(private _element: ElementRef, @Optional() private _dir: Directionality) {}\n\n  /** Amount of columns in the grid list. */\n  @Input()\n  get cols(): number { return this._cols; }\n  set cols(value: number) { this._cols = Math.round(coerceNumberProperty(value)); }\n\n  /** Size of the grid list's gutter in pixels. */\n  @Input()\n  get gutterSize(): string { return this._gutter; }\n  set gutterSize(value: string) { this._gutter = `${value || ''}`; }\n\n  /** Set internal representation of row height from the user-provided value. */\n  @Input()\n  set rowHeight(value: string | number) {\n    const newValue = `${value || ''}`;\n\n    if (newValue !== this._rowHeight) {\n      this._rowHeight = newValue;\n      this._setTileStyler(this._rowHeight);\n    }\n  }\n\n  ngOnInit() {\n    this._checkCols();\n    this._checkRowHeight();\n  }\n\n  /**\n   * The layout calculation is fairly cheap if nothing changes, so there's little cost\n   * to run it frequently.\n   */\n  ngAfterContentChecked() {\n    this._layoutTiles();\n  }\n\n  /** Throw a friendly error if cols property is missing */\n  private _checkCols() {\n    if (!this.cols) {\n      throw Error(`mat-grid-list: must pass in number of columns. ` +\n                  `Example: <mat-grid-list cols=\"3\">`);\n    }\n  }\n\n  /** Default to equal width:height if rowHeight property is missing */\n  private _checkRowHeight(): void {\n    if (!this._rowHeight) {\n      this._setTileStyler('1:1');\n    }\n  }\n\n  /** Creates correct Tile Styler subtype based on rowHeight passed in by user */\n  private _setTileStyler(rowHeight: string): void {\n    if (this._tileStyler) {\n      this._tileStyler.reset(this);\n    }\n\n    if (rowHeight === MAT_FIT_MODE) {\n      this._tileStyler = new FitTileStyler();\n    } else if (rowHeight && rowHeight.indexOf(':') > -1) {\n      this._tileStyler = new RatioTileStyler(rowHeight);\n    } else {\n      this._tileStyler = new FixedTileStyler(rowHeight);\n    }\n  }\n\n  /** Computes and applies the size and position for all children grid tiles. */\n  private _layoutTiles(): void {\n    const tracker = new TileCoordinator(this.cols, this._tiles);\n    const direction = this._dir ? this._dir.value : 'ltr';\n    this._tileStyler.init(this.gutterSize, tracker, this.cols, direction);\n\n    this._tiles.forEach((tile, index) => {\n      const pos = tracker.positions[index];\n      this._tileStyler.setStyle(tile, pos.row, pos.col);\n    });\n\n    this._setListStyle(this._tileStyler.getComputedHeight());\n  }\n\n  /** Sets style on the main grid-list element, given the style name and value. */\n  _setListStyle(style: [string, string | null] | null): void {\n    if (style) {\n      this._element.nativeElement.style[style[0]] = style[1];\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatLineModule, MatCommonModule} from '@angular/material/core';\nimport {\n  MatGridTile, MatGridTileText, MatGridTileFooterCssMatStyler,\n  MatGridTileHeaderCssMatStyler, MatGridAvatarCssMatStyler\n} from './grid-tile';\nimport {MatGridList} from './grid-list';\n\n\n@NgModule({\n  imports: [MatLineModule, MatCommonModule],\n  exports: [\n    MatGridList,\n    MatGridTile,\n    MatGridTileText,\n    MatLineModule,\n    MatCommonModule,\n    MatGridTileHeaderCssMatStyler,\n    MatGridTileFooterCssMatStyler,\n    MatGridAvatarCssMatStyler\n  ],\n  declarations: [\n    MatGridList,\n    MatGridTile,\n    MatGridTileText,\n    MatGridTileHeaderCssMatStyler,\n    MatGridTileFooterCssMatStyler,\n    MatGridAvatarCssMatStyler\n  ],\n})\nexport class MatGridListModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {DOCUMENT} from '@angular/common';\nimport {HttpClient, HttpErrorResponse} from '@angular/common/http';\nimport {\n  Inject,\n  Injectable,\n  InjectionToken,\n  Optional,\n  SecurityContext,\n  SkipSelf,\n} from '@angular/core';\nimport {DomSanitizer, SafeResourceUrl, SafeHtml} from '@angular/platform-browser';\nimport {forkJoin, Observable, of as observableOf, throwError as observableThrow} from 'rxjs';\nimport {catchError, finalize, map, share, tap} from 'rxjs/operators';\n\n\n/**\n * Returns an exception to be thrown in the case when attempting to\n * load an icon with a name that cannot be found.\n * @docs-private\n */\nexport function getMatIconNameNotFoundError(iconName: string): Error {\n  return Error(`Unable to find icon with the name \"${iconName}\"`);\n}\n\n\n/**\n * Returns an exception to be thrown when the consumer attempts to use\n * `<mat-icon>` without including @angular/http.\n * @docs-private\n */\nexport function getMatIconNoHttpProviderError(): Error {\n  return Error('Could not find HttpClient provider for use with Angular Material icons. ' +\n               'Please include the HttpClientModule from @angular/common/http in your ' +\n               'app imports.');\n}\n\n\n/**\n * Returns an exception to be thrown when a URL couldn't be sanitized.\n * @param url URL that was attempted to be sanitized.\n * @docs-private\n */\nexport function getMatIconFailedToSanitizeUrlError(url: SafeResourceUrl): Error {\n  return Error(`The URL provided to MatIconRegistry was not trusted as a resource URL ` +\n               `via Angular's DomSanitizer. Attempted URL was \"${url}\".`);\n}\n\n/**\n * Returns an exception to be thrown when a HTML string couldn't be sanitized.\n * @param literal HTML that was attempted to be sanitized.\n * @docs-private\n */\nexport function getMatIconFailedToSanitizeLiteralError(literal: SafeHtml): Error {\n  return Error(`The literal provided to MatIconRegistry was not trusted as safe HTML by ` +\n               `Angular's DomSanitizer. Attempted literal was \"${literal}\".`);\n}\n\n\n/**\n * Configuration for an icon, including the URL and possibly the cached SVG element.\n * @docs-private\n */\nclass SvgIconConfig {\n  url: SafeResourceUrl | null;\n  svgElement: SVGElement | null;\n\n  constructor(url: SafeResourceUrl);\n  constructor(svgElement: SVGElement);\n  constructor(data: SafeResourceUrl | SVGElement) {\n    // Note that we can't use `instanceof SVGElement` here,\n    // because it'll break during server-side rendering.\n    if (!!(data as any).nodeName) {\n      this.svgElement = data as SVGElement;\n    } else {\n      this.url = data as SafeResourceUrl;\n    }\n  }\n}\n\n/**\n * Service to register and display icons used by the `<mat-icon>` component.\n * - Registers icon URLs by namespace and name.\n * - Registers icon set URLs by namespace.\n * - Registers aliases for CSS classes, for use with icon fonts.\n * - Loads icons from URLs and extracts individual icons from icon sets.\n */\n@Injectable({providedIn: 'root'})\nexport class MatIconRegistry {\n  private _document: Document;\n\n  /**\n   * URLs and cached SVG elements for individual icons. Keys are of the format \"[namespace]:[icon]\".\n   */\n  private _svgIconConfigs = new Map<string, SvgIconConfig>();\n\n  /**\n   * SvgIconConfig objects and cached SVG elements for icon sets, keyed by namespace.\n   * Multiple icon sets can be registered under the same namespace.\n   */\n  private _iconSetConfigs = new Map<string, SvgIconConfig[]>();\n\n  /** Cache for icons loaded by direct URLs. */\n  private _cachedIconsByUrl = new Map<string, SVGElement>();\n\n  /** In-progress icon fetches. Used to coalesce multiple requests to the same URL. */\n  private _inProgressUrlFetches = new Map<string, Observable<string>>();\n\n  /** Map from font identifiers to their CSS class names. Used for icon fonts. */\n  private _fontCssClassesByAlias = new Map<string, string>();\n\n  /**\n   * The CSS class to apply when an `<mat-icon>` component has no icon name, url, or font specified.\n   * The default 'material-icons' value assumes that the material icon font has been loaded as\n   * described at http://google.github.io/material-design-icons/#icon-font-for-the-web\n   */\n  private _defaultFontSetClass = 'material-icons';\n\n  constructor(\n    @Optional() private _httpClient: HttpClient,\n    private _sanitizer: DomSanitizer,\n    @Optional() @Inject(DOCUMENT) document: any) {\n      this._document = document;\n    }\n\n  /**\n   * Registers an icon by URL in the default namespace.\n   * @param iconName Name under which the icon should be registered.\n   * @param url\n   */\n  addSvgIcon(iconName: string, url: SafeResourceUrl): this {\n    return this.addSvgIconInNamespace('', iconName, url);\n  }\n\n  /**\n   * Registers an icon using an HTML string in the default namespace.\n   * @param iconName Name under which the icon should be registered.\n   * @param literal SVG source of the icon.\n   */\n  addSvgIconLiteral(iconName: string, literal: SafeHtml): this {\n    return this.addSvgIconLiteralInNamespace('', iconName, literal);\n  }\n\n  /**\n   * Registers an icon by URL in the specified namespace.\n   * @param namespace Namespace in which the icon should be registered.\n   * @param iconName Name under which the icon should be registered.\n   * @param url\n   */\n  addSvgIconInNamespace(namespace: string, iconName: string, url: SafeResourceUrl): this {\n    return this._addSvgIconConfig(namespace, iconName, new SvgIconConfig(url));\n  }\n\n  /**\n   * Registers an icon using an HTML string in the specified namespace.\n   * @param namespace Namespace in which the icon should be registered.\n   * @param iconName Name under which the icon should be registered.\n   * @param literal SVG source of the icon.\n   */\n  addSvgIconLiteralInNamespace(namespace: string, iconName: string, literal: SafeHtml): this {\n    const sanitizedLiteral = this._sanitizer.sanitize(SecurityContext.HTML, literal);\n\n    if (!sanitizedLiteral) {\n      throw getMatIconFailedToSanitizeLiteralError(literal);\n    }\n\n    const svgElement = this._createSvgElementForSingleIcon(sanitizedLiteral);\n    return this._addSvgIconConfig(namespace, iconName, new SvgIconConfig(svgElement));\n  }\n\n  /**\n   * Registers an icon set by URL in the default namespace.\n   * @param url\n   */\n  addSvgIconSet(url: SafeResourceUrl): this {\n    return this.addSvgIconSetInNamespace('', url);\n  }\n\n  /**\n   * Registers an icon set using an HTML string in the default namespace.\n   * @param literal SVG source of the icon set.\n   */\n  addSvgIconSetLiteral(literal: SafeHtml): this {\n    return this.addSvgIconSetLiteralInNamespace('', literal);\n  }\n\n  /**\n   * Registers an icon set by URL in the specified namespace.\n   * @param namespace Namespace in which to register the icon set.\n   * @param url\n   */\n  addSvgIconSetInNamespace(namespace: string, url: SafeResourceUrl): this {\n    return this._addSvgIconSetConfig(namespace, new SvgIconConfig(url));\n  }\n\n  /**\n   * Registers an icon set using an HTML string in the specified namespace.\n   * @param namespace Namespace in which to register the icon set.\n   * @param literal SVG source of the icon set.\n   */\n  addSvgIconSetLiteralInNamespace(namespace: string, literal: SafeHtml): this {\n    const sanitizedLiteral = this._sanitizer.sanitize(SecurityContext.HTML, literal);\n\n    if (!sanitizedLiteral) {\n      throw getMatIconFailedToSanitizeLiteralError(literal);\n    }\n\n    const svgElement = this._svgElementFromString(sanitizedLiteral);\n    return this._addSvgIconSetConfig(namespace, new SvgIconConfig(svgElement));\n  }\n\n  /**\n   * Defines an alias for a CSS class name to be used for icon fonts. Creating an matIcon\n   * component with the alias as the fontSet input will cause the class name to be applied\n   * to the `<mat-icon>` element.\n   *\n   * @param alias Alias for the font.\n   * @param className Class name override to be used instead of the alias.\n   */\n  registerFontClassAlias(alias: string, className: string = alias): this {\n    this._fontCssClassesByAlias.set(alias, className);\n    return this;\n  }\n\n  /**\n   * Returns the CSS class name associated with the alias by a previous call to\n   * registerFontClassAlias. If no CSS class has been associated, returns the alias unmodified.\n   */\n  classNameForFontAlias(alias: string): string {\n    return this._fontCssClassesByAlias.get(alias) || alias;\n  }\n\n  /**\n   * Sets the CSS class name to be used for icon fonts when an `<mat-icon>` component does not\n   * have a fontSet input value, and is not loading an icon by name or URL.\n   *\n   * @param className\n   */\n  setDefaultFontSetClass(className: string): this {\n    this._defaultFontSetClass = className;\n    return this;\n  }\n\n  /**\n   * Returns the CSS class name to be used for icon fonts when an `<mat-icon>` component does not\n   * have a fontSet input value, and is not loading an icon by name or URL.\n   */\n  getDefaultFontSetClass(): string {\n    return this._defaultFontSetClass;\n  }\n\n  /**\n   * Returns an Observable that produces the icon (as an `<svg>` DOM element) from the given URL.\n   * The response from the URL may be cached so this will not always cause an HTTP request, but\n   * the produced element will always be a new copy of the originally fetched icon. (That is,\n   * it will not contain any modifications made to elements previously returned).\n   *\n   * @param safeUrl URL from which to fetch the SVG icon.\n   */\n  getSvgIconFromUrl(safeUrl: SafeResourceUrl): Observable<SVGElement> {\n    const url = this._sanitizer.sanitize(SecurityContext.RESOURCE_URL, safeUrl);\n\n    if (!url) {\n      throw getMatIconFailedToSanitizeUrlError(safeUrl);\n    }\n\n    const cachedIcon = this._cachedIconsByUrl.get(url);\n\n    if (cachedIcon) {\n      return observableOf(cloneSvg(cachedIcon));\n    }\n\n    return this._loadSvgIconFromConfig(new SvgIconConfig(safeUrl)).pipe(\n      tap(svg => this._cachedIconsByUrl.set(url!, svg)),\n      map(svg => cloneSvg(svg)),\n    );\n  }\n\n  /**\n   * Returns an Observable that produces the icon (as an `<svg>` DOM element) with the given name\n   * and namespace. The icon must have been previously registered with addIcon or addIconSet;\n   * if not, the Observable will throw an error.\n   *\n   * @param name Name of the icon to be retrieved.\n   * @param namespace Namespace in which to look for the icon.\n   */\n  getNamedSvgIcon(name: string, namespace: string = ''): Observable<SVGElement> {\n    // Return (copy of) cached icon if possible.\n    const key = iconKey(namespace, name);\n    const config = this._svgIconConfigs.get(key);\n\n    if (config) {\n      return this._getSvgFromConfig(config);\n    }\n\n    // See if we have any icon sets registered for the namespace.\n    const iconSetConfigs = this._iconSetConfigs.get(namespace);\n\n    if (iconSetConfigs) {\n      return this._getSvgFromIconSetConfigs(name, iconSetConfigs);\n    }\n\n    return observableThrow(getMatIconNameNotFoundError(key));\n  }\n\n  /**\n   * Returns the cached icon for a SvgIconConfig if available, or fetches it from its URL if not.\n   */\n  private _getSvgFromConfig(config: SvgIconConfig): Observable<SVGElement> {\n    if (config.svgElement) {\n      // We already have the SVG element for this icon, return a copy.\n      return observableOf(cloneSvg(config.svgElement));\n    } else {\n      // Fetch the icon from the config's URL, cache it, and return a copy.\n      return this._loadSvgIconFromConfig(config).pipe(\n        tap(svg => config.svgElement = svg),\n        map(svg => cloneSvg(svg)),\n      );\n    }\n  }\n\n  /**\n   * Attempts to find an icon with the specified name in any of the SVG icon sets.\n   * First searches the available cached icons for a nested element with a matching name, and\n   * if found copies the element to a new `<svg>` element. If not found, fetches all icon sets\n   * that have not been cached, and searches again after all fetches are completed.\n   * The returned Observable produces the SVG element if possible, and throws\n   * an error if no icon with the specified name can be found.\n   */\n  private _getSvgFromIconSetConfigs(name: string, iconSetConfigs: SvgIconConfig[]):\n      Observable<SVGElement> {\n    // For all the icon set SVG elements we've fetched, see if any contain an icon with the\n    // requested name.\n    const namedIcon = this._extractIconWithNameFromAnySet(name, iconSetConfigs);\n\n    if (namedIcon) {\n      // We could cache namedIcon in _svgIconConfigs, but since we have to make a copy every\n      // time anyway, there's probably not much advantage compared to just always extracting\n      // it from the icon set.\n      return observableOf(namedIcon);\n    }\n\n    // Not found in any cached icon sets. If there are icon sets with URLs that we haven't\n    // fetched, fetch them now and look for iconName in the results.\n    const iconSetFetchRequests: Observable<SVGElement | null>[] = iconSetConfigs\n      .filter(iconSetConfig => !iconSetConfig.svgElement)\n      .map(iconSetConfig => {\n        return this._loadSvgIconSetFromConfig(iconSetConfig).pipe(\n          catchError((err: HttpErrorResponse): Observable<SVGElement | null> => {\n            const url = this._sanitizer.sanitize(SecurityContext.RESOURCE_URL, iconSetConfig.url);\n\n            // Swallow errors fetching individual URLs so the\n            // combined Observable won't necessarily fail.\n            console.error(`Loading icon set URL: ${url} failed: ${err.message}`);\n            return observableOf(null);\n          })\n        );\n      });\n\n    // Fetch all the icon set URLs. When the requests complete, every IconSet should have a\n    // cached SVG element (unless the request failed), and we can check again for the icon.\n    return forkJoin(iconSetFetchRequests).pipe(map(() => {\n      const foundIcon = this._extractIconWithNameFromAnySet(name, iconSetConfigs);\n\n      if (!foundIcon) {\n        throw getMatIconNameNotFoundError(name);\n      }\n\n      return foundIcon;\n    }));\n  }\n\n  /**\n   * Searches the cached SVG elements for the given icon sets for a nested icon element whose \"id\"\n   * tag matches the specified name. If found, copies the nested element to a new SVG element and\n   * returns it. Returns null if no matching element is found.\n   */\n  private _extractIconWithNameFromAnySet(iconName: string, iconSetConfigs: SvgIconConfig[]):\n      SVGElement | null {\n    // Iterate backwards, so icon sets added later have precedence.\n    for (let i = iconSetConfigs.length - 1; i >= 0; i--) {\n      const config = iconSetConfigs[i];\n      if (config.svgElement) {\n        const foundIcon = this._extractSvgIconFromSet(config.svgElement, iconName);\n        if (foundIcon) {\n          return foundIcon;\n        }\n      }\n    }\n    return null;\n  }\n\n  /**\n   * Loads the content of the icon URL specified in the SvgIconConfig and creates an SVG element\n   * from it.\n   */\n  private _loadSvgIconFromConfig(config: SvgIconConfig): Observable<SVGElement> {\n    return this._fetchUrl(config.url)\n        .pipe(map(svgText => this._createSvgElementForSingleIcon(svgText)));\n  }\n\n  /**\n   * Loads the content of the icon set URL specified in the SvgIconConfig and creates an SVG element\n   * from it.\n   */\n  private _loadSvgIconSetFromConfig(config: SvgIconConfig): Observable<SVGElement> {\n    // If the SVG for this icon set has already been parsed, do nothing.\n    if (config.svgElement) {\n      return observableOf(config.svgElement);\n    }\n\n    return this._fetchUrl(config.url).pipe(map(svgText => {\n      // It is possible that the icon set was parsed and cached by an earlier request, so parsing\n      // only needs to occur if the cache is yet unset.\n      if (!config.svgElement) {\n        config.svgElement = this._svgElementFromString(svgText);\n      }\n\n      return config.svgElement;\n    }));\n  }\n\n  /**\n   * Creates a DOM element from the given SVG string, and adds default attributes.\n   */\n  private _createSvgElementForSingleIcon(responseText: string): SVGElement {\n    const svg = this._svgElementFromString(responseText);\n    this._setSvgAttributes(svg);\n    return svg;\n  }\n\n  /**\n   * Searches the cached element of the given SvgIconConfig for a nested icon element whose \"id\"\n   * tag matches the specified name. If found, copies the nested element to a new SVG element and\n   * returns it. Returns null if no matching element is found.\n   */\n  private _extractSvgIconFromSet(iconSet: SVGElement, iconName: string): SVGElement | null {\n    const iconSource = iconSet.querySelector('#' + iconName);\n\n    if (!iconSource) {\n      return null;\n    }\n\n    // Clone the element and remove the ID to prevent multiple elements from being added\n    // to the page with the same ID.\n    const iconElement = iconSource.cloneNode(true) as Element;\n    iconElement.removeAttribute('id');\n\n    // If the icon node is itself an <svg> node, clone and return it directly. If not, set it as\n    // the content of a new <svg> node.\n    if (iconElement.nodeName.toLowerCase() === 'svg') {\n      return this._setSvgAttributes(iconElement as SVGElement);\n    }\n\n    // If the node is a <symbol>, it won't be rendered so we have to convert it into <svg>. Note\n    // that the same could be achieved by referring to it via <use href=\"#id\">, however the <use>\n    // tag is problematic on Firefox, because it needs to include the current page path.\n    if (iconElement.nodeName.toLowerCase() === 'symbol') {\n      return this._setSvgAttributes(this._toSvgElement(iconElement));\n    }\n\n    // createElement('SVG') doesn't work as expected; the DOM ends up with\n    // the correct nodes, but the SVG content doesn't render. Instead we\n    // have to create an empty SVG node using innerHTML and append its content.\n    // Elements created using DOMParser.parseFromString have the same problem.\n    // http://stackoverflow.com/questions/23003278/svg-innerhtml-in-firefox-can-not-display\n    const svg = this._svgElementFromString('<svg></svg>');\n    // Clone the node so we don't remove it from the parent icon set element.\n    svg.appendChild(iconElement);\n\n    return this._setSvgAttributes(svg);\n  }\n\n  /**\n   * Creates a DOM element from the given SVG string.\n   */\n  private _svgElementFromString(str: string): SVGElement {\n    const div = this._document.createElement('DIV');\n    div.innerHTML = str;\n    const svg = div.querySelector('svg') as SVGElement;\n\n    if (!svg) {\n      throw Error('<svg> tag not found');\n    }\n\n    return svg;\n  }\n\n  /**\n   * Converts an element into an SVG node by cloning all of its children.\n   */\n  private _toSvgElement(element: Element): SVGElement {\n    let svg = this._svgElementFromString('<svg></svg>');\n\n    for (let i = 0; i < element.childNodes.length; i++) {\n      if (element.childNodes[i].nodeType === this._document.ELEMENT_NODE) {\n        svg.appendChild(element.childNodes[i].cloneNode(true));\n      }\n    }\n\n    return svg;\n  }\n\n  /**\n   * Sets the default attributes for an SVG element to be used as an icon.\n   */\n  private _setSvgAttributes(svg: SVGElement): SVGElement {\n    svg.setAttribute('fit', '');\n    svg.setAttribute('height', '100%');\n    svg.setAttribute('width', '100%');\n    svg.setAttribute('preserveAspectRatio', 'xMidYMid meet');\n    svg.setAttribute('focusable', 'false'); // Disable IE11 default behavior to make SVGs focusable.\n    return svg;\n  }\n\n  /**\n   * Returns an Observable which produces the string contents of the given URL. Results may be\n   * cached, so future calls with the same URL may not cause another HTTP request.\n   */\n  private _fetchUrl(safeUrl: SafeResourceUrl | null): Observable<string> {\n    if (!this._httpClient) {\n      throw getMatIconNoHttpProviderError();\n    }\n\n    if (safeUrl == null) {\n      throw Error(`Cannot fetch icon from URL \"${safeUrl}\".`);\n    }\n\n    const url = this._sanitizer.sanitize(SecurityContext.RESOURCE_URL, safeUrl);\n\n    if (!url) {\n      throw getMatIconFailedToSanitizeUrlError(safeUrl);\n    }\n\n    // Store in-progress fetches to avoid sending a duplicate request for a URL when there is\n    // already a request in progress for that URL. It's necessary to call share() on the\n    // Observable returned by http.get() so that multiple subscribers don't cause multiple XHRs.\n    const inProgressFetch = this._inProgressUrlFetches.get(url);\n\n    if (inProgressFetch) {\n      return inProgressFetch;\n    }\n\n    // TODO(jelbourn): for some reason, the `finalize` operator \"loses\" the generic type on the\n    // Observable. Figure out why and fix it.\n    const req = this._httpClient.get(url, {responseType: 'text'}).pipe(\n      finalize(() => this._inProgressUrlFetches.delete(url)),\n      share(),\n    );\n\n    this._inProgressUrlFetches.set(url, req);\n    return req;\n  }\n\n  /**\n   * Registers an icon config by name in the specified namespace.\n   * @param namespace Namespace in which to register the icon config.\n   * @param iconName Name under which to register the config.\n   * @param config Config to be registered.\n   */\n  private _addSvgIconConfig(namespace: string, iconName: string, config: SvgIconConfig): this {\n    this._svgIconConfigs.set(iconKey(namespace, iconName), config);\n    return this;\n  }\n\n  /**\n   * Registers an icon set config in the specified namespace.\n   * @param namespace Namespace in which to register the icon config.\n   * @param config Config to be registered.\n   */\n  private _addSvgIconSetConfig(namespace: string, config: SvgIconConfig): this {\n    const configNamespace = this._iconSetConfigs.get(namespace);\n\n    if (configNamespace) {\n      configNamespace.push(config);\n    } else {\n      this._iconSetConfigs.set(namespace, [config]);\n    }\n\n    return this;\n  }\n}\n\n/** @docs-private */\nexport function ICON_REGISTRY_PROVIDER_FACTORY(\n  parentRegistry: MatIconRegistry,\n  httpClient: HttpClient,\n  sanitizer: DomSanitizer,\n  document?: any) {\n  return parentRegistry || new MatIconRegistry(httpClient, sanitizer, document);\n}\n\n/** @docs-private */\nexport const ICON_REGISTRY_PROVIDER = {\n  // If there is already an MatIconRegistry available, use that. Otherwise, provide a new one.\n  provide: MatIconRegistry,\n  deps: [\n    [new Optional(), new SkipSelf(), MatIconRegistry],\n    [new Optional(), HttpClient],\n    DomSanitizer,\n    [new Optional(), DOCUMENT as InjectionToken<any>],\n  ],\n  useFactory: ICON_REGISTRY_PROVIDER_FACTORY,\n};\n\n/** Clones an SVGElement while preserving type information. */\nfunction cloneSvg(svg: SVGElement): SVGElement {\n  return svg.cloneNode(true) as SVGElement;\n}\n\n/** Returns the cache key to use for an icon namespace and name. */\nfunction iconKey(namespace: string, name: string) {\n  return namespace + ':' + name;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {take} from 'rxjs/operators';\nimport {\n  Attribute,\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  Input,\n  OnChanges,\n  OnInit,\n  SimpleChanges,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {CanColor, mixinColor} from '@angular/material/core';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {MatIconRegistry} from './icon-registry';\n\n\n// Boilerplate for applying mixins to MatIcon.\n/** @docs-private */\nexport class MatIconBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatIconMixinBase = mixinColor(MatIconBase);\n\n\n/**\n * Component to display an icon. It can be used in the following ways:\n *\n * - Specify the svgIcon input to load an SVG icon from a URL previously registered with the\n *   addSvgIcon, addSvgIconInNamespace, addSvgIconSet, or addSvgIconSetInNamespace methods of\n *   MatIconRegistry. If the svgIcon value contains a colon it is assumed to be in the format\n *   \"[namespace]:[name]\", if not the value will be the name of an icon in the default namespace.\n *   Examples:\n *     `<mat-icon svgIcon=\"left-arrow\"></mat-icon>\n *     <mat-icon svgIcon=\"animals:cat\"></mat-icon>`\n *\n * - Use a font ligature as an icon by putting the ligature text in the content of the `<mat-icon>`\n *   component. By default the Material icons font is used as described at\n *   http://google.github.io/material-design-icons/#icon-font-for-the-web. You can specify an\n *   alternate font by setting the fontSet input to either the CSS class to apply to use the\n *   desired font, or to an alias previously registered with MatIconRegistry.registerFontClassAlias.\n *   Examples:\n *     `<mat-icon>home</mat-icon>\n *     <mat-icon fontSet=\"myfont\">sun</mat-icon>`\n *\n * - Specify a font glyph to be included via CSS rules by setting the fontSet input to specify the\n *   font, and the fontIcon input to specify the icon. Typically the fontIcon will specify a\n *   CSS class which causes the glyph to be displayed via a :before selector, as in\n *   https://fortawesome.github.io/Font-Awesome/examples/\n *   Example:\n *     `<mat-icon fontSet=\"fa\" fontIcon=\"alarm\"></mat-icon>`\n */\n@Component({\n  moduleId: module.id,\n  template: '<ng-content></ng-content>',\n  selector: 'mat-icon',\n  exportAs: 'matIcon',\n  styleUrls: ['icon.css'],\n  inputs: ['color'],\n  host: {\n    'role': 'img',\n    'class': 'mat-icon',\n    '[class.mat-icon-inline]': 'inline',\n  },\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatIcon extends _MatIconMixinBase implements OnChanges, OnInit, CanColor {\n  /**\n   * Whether the icon should be inlined, automatically sizing the icon to match the font size of\n   * the element the icon is contained in.\n   */\n  @Input()\n  get inline(): boolean {\n    return this._inline;\n  }\n  set inline(inline: boolean) {\n    this._inline = coerceBooleanProperty(inline);\n  }\n  private _inline: boolean = false;\n\n  /** Name of the icon in the SVG icon set. */\n  @Input() svgIcon: string;\n\n  /** Font set that the icon is a part of. */\n  @Input()\n  get fontSet(): string { return this._fontSet; }\n  set fontSet(value: string) {\n    this._fontSet = this._cleanupFontValue(value);\n  }\n  private _fontSet: string;\n\n  /** Name of an icon within a font set. */\n  @Input()\n  get fontIcon(): string { return this._fontIcon; }\n  set fontIcon(value: string) {\n    this._fontIcon = this._cleanupFontValue(value);\n  }\n  private _fontIcon: string;\n\n  private _previousFontSetClass: string;\n  private _previousFontIconClass: string;\n\n  constructor(\n      elementRef: ElementRef,\n      private _iconRegistry: MatIconRegistry,\n      @Attribute('aria-hidden') ariaHidden: string) {\n    super(elementRef);\n\n    // If the user has not explicitly set aria-hidden, mark the icon as hidden, as this is\n    // the right thing to do for the majority of icon use-cases.\n    if (!ariaHidden) {\n      elementRef.nativeElement.setAttribute('aria-hidden', 'true');\n    }\n  }\n\n  /**\n   * Splits an svgIcon binding value into its icon set and icon name components.\n   * Returns a 2-element array of [(icon set), (icon name)].\n   * The separator for the two fields is ':'. If there is no separator, an empty\n   * string is returned for the icon set and the entire value is returned for\n   * the icon name. If the argument is falsy, returns an array of two empty strings.\n   * Throws an error if the name contains two or more ':' separators.\n   * Examples:\n   *   `'social:cake' -> ['social', 'cake']\n   *   'penguin' -> ['', 'penguin']\n   *   null -> ['', '']\n   *   'a:b:c' -> (throws Error)`\n   */\n  private _splitIconName(iconName: string): [string, string] {\n    if (!iconName) {\n      return ['', ''];\n    }\n    const parts = iconName.split(':');\n    switch (parts.length) {\n      case 1: return ['', parts[0]]; // Use default namespace.\n      case 2: return <[string, string]>parts;\n      default: throw Error(`Invalid icon name: \"${iconName}\"`);\n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    // Only update the inline SVG icon if the inputs changed, to avoid unnecessary DOM operations.\n    if (changes.svgIcon) {\n      if (this.svgIcon) {\n        const [namespace, iconName] = this._splitIconName(this.svgIcon);\n\n        this._iconRegistry.getNamedSvgIcon(iconName, namespace).pipe(take(1)).subscribe(\n          svg => this._setSvgElement(svg),\n          (err: Error) => console.log(`Error retrieving icon: ${err.message}`)\n        );\n      } else {\n        this._clearSvgElement();\n      }\n    }\n\n    if (this._usingFontIcon()) {\n      this._updateFontIconClasses();\n    }\n  }\n\n  ngOnInit() {\n    // Update font classes because ngOnChanges won't be called if none of the inputs are present,\n    // e.g. <mat-icon>arrow</mat-icon> In this case we need to add a CSS class for the default font.\n    if (this._usingFontIcon()) {\n      this._updateFontIconClasses();\n    }\n  }\n\n  private _usingFontIcon(): boolean {\n    return !this.svgIcon;\n  }\n\n  private _setSvgElement(svg: SVGElement) {\n    this._clearSvgElement();\n\n    // Workaround for IE11 and Edge ignoring `style` tags inside dynamically-created SVGs.\n    // See: https://developer.microsoft.com/en-us/microsoft-edge/platform/issues/10898469/\n    // Do this before inserting the element into the DOM, in order to avoid a style recalculation.\n    const styleTags = svg.querySelectorAll('style') as NodeListOf<HTMLStyleElement>;\n\n    for (let i = 0; i < styleTags.length; i++) {\n      styleTags[i].textContent += ' ';\n    }\n\n    this._elementRef.nativeElement.appendChild(svg);\n  }\n\n  private _clearSvgElement() {\n    const layoutElement: HTMLElement = this._elementRef.nativeElement;\n    let childCount = layoutElement.childNodes.length;\n\n    // Remove existing non-element child nodes and SVGs, and add the new SVG element. Note that\n    // we can't use innerHTML, because IE will throw if the element has a data binding.\n    while (childCount--) {\n      const child = layoutElement.childNodes[childCount];\n\n      // 1 corresponds to Node.ELEMENT_NODE. We remove all non-element nodes in order to get rid\n      // of any loose text nodes, as well as any SVG elements in order to remove any old icons.\n      if (child.nodeType !== 1 || child.nodeName.toLowerCase() === 'svg') {\n        layoutElement.removeChild(child);\n      }\n    }\n  }\n\n  private _updateFontIconClasses() {\n    if (!this._usingFontIcon()) {\n      return;\n    }\n\n    const elem: HTMLElement = this._elementRef.nativeElement;\n    const fontSetClass = this.fontSet ?\n        this._iconRegistry.classNameForFontAlias(this.fontSet) :\n        this._iconRegistry.getDefaultFontSetClass();\n\n    if (fontSetClass != this._previousFontSetClass) {\n      if (this._previousFontSetClass) {\n        elem.classList.remove(this._previousFontSetClass);\n      }\n      if (fontSetClass) {\n        elem.classList.add(fontSetClass);\n      }\n      this._previousFontSetClass = fontSetClass;\n    }\n\n    if (this.fontIcon != this._previousFontIconClass) {\n      if (this._previousFontIconClass) {\n        elem.classList.remove(this._previousFontIconClass);\n      }\n      if (this.fontIcon) {\n        elem.classList.add(this.fontIcon);\n      }\n      this._previousFontIconClass = this.fontIcon;\n    }\n  }\n\n  /**\n   * Cleans up a value to be used as a fontIcon or fontSet.\n   * Since the value ends up being assigned as a CSS class, we\n   * have to trim the value and omit space-separated values.\n   */\n  private _cleanupFontValue(value: string) {\n    return typeof value === 'string' ? value.trim().split(' ')[0] : value;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatIcon} from './icon';\n\n\n@NgModule({\n  imports: [MatCommonModule],\n  exports: [MatIcon, MatCommonModule],\n  declarations: [MatIcon],\n})\nexport class MatIconModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ComponentPortal, ComponentType, Portal} from '@angular/cdk/portal';\nimport {\n  AfterContentInit,\n  AfterViewChecked,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  OnChanges,\n  OnDestroy,\n  Optional,\n  Output,\n  SimpleChanges,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {DateAdapter, MAT_DATE_FORMATS, MatDateFormats} from '@angular/material/core';\nimport {Subject, Subscription} from 'rxjs';\nimport {createMissingDateImplError} from './datepicker-errors';\nimport {MatDatepickerIntl} from './datepicker-intl';\nimport {MatMonthView} from './month-view';\nimport {MatMultiYearView, yearsPerPage} from './multi-year-view';\nimport {MatYearView} from './year-view';\n\n/**\n * Possible views for the calendar.\n * @docs-private\n */\nexport type MatCalendarView = 'month' | 'year' | 'multi-year';\n\n/** Default header for MatCalendar */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-calendar-header',\n  templateUrl: 'calendar-header.html',\n  exportAs: 'matCalendarHeader',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatCalendarHeader<D> {\n  constructor(private _intl: MatDatepickerIntl,\n              @Inject(forwardRef(() => MatCalendar)) public calendar: MatCalendar<D>,\n              @Optional() private _dateAdapter: DateAdapter<D>,\n              @Optional() @Inject(MAT_DATE_FORMATS) private _dateFormats: MatDateFormats,\n              changeDetectorRef: ChangeDetectorRef) {\n\n    this.calendar.stateChanges.subscribe(() => changeDetectorRef.markForCheck());\n  }\n\n  /** The label for the current calendar view. */\n  get periodButtonText(): string {\n    if (this.calendar.currentView == 'month') {\n      return this._dateAdapter\n          .format(this.calendar.activeDate, this._dateFormats.display.monthYearLabel)\n              .toLocaleUpperCase();\n    }\n    if (this.calendar.currentView == 'year') {\n      return this._dateAdapter.getYearName(this.calendar.activeDate);\n    }\n    const activeYear = this._dateAdapter.getYear(this.calendar.activeDate);\n    const firstYearInView = this._dateAdapter.getYearName(\n        this._dateAdapter.createDate(activeYear - activeYear % 24, 0, 1));\n    const lastYearInView = this._dateAdapter.getYearName(\n        this._dateAdapter.createDate(activeYear + yearsPerPage - 1 - activeYear % 24, 0, 1));\n    return `${firstYearInView} \\u2013 ${lastYearInView}`;\n  }\n\n  get periodButtonLabel(): string {\n    return this.calendar.currentView == 'month' ?\n        this._intl.switchToMultiYearViewLabel : this._intl.switchToMonthViewLabel;\n  }\n\n  /** The label for the the previous button. */\n  get prevButtonLabel(): string {\n    return {\n      'month': this._intl.prevMonthLabel,\n      'year': this._intl.prevYearLabel,\n      'multi-year': this._intl.prevMultiYearLabel\n    }[this.calendar.currentView];\n  }\n\n  /** The label for the the next button. */\n  get nextButtonLabel(): string {\n    return {\n      'month': this._intl.nextMonthLabel,\n      'year': this._intl.nextYearLabel,\n      'multi-year': this._intl.nextMultiYearLabel\n    }[this.calendar.currentView];\n  }\n\n  /** Handles user clicks on the period label. */\n  currentPeriodClicked(): void {\n    this.calendar.currentView = this.calendar.currentView == 'month' ? 'multi-year' : 'month';\n  }\n\n  /** Handles user clicks on the previous button. */\n  previousClicked(): void {\n    this.calendar.activeDate = this.calendar.currentView == 'month' ?\n        this._dateAdapter.addCalendarMonths(this.calendar.activeDate, -1) :\n            this._dateAdapter.addCalendarYears(\n                this.calendar.activeDate, this.calendar.currentView == 'year' ? -1 : -yearsPerPage\n            );\n  }\n\n  /** Handles user clicks on the next button. */\n  nextClicked(): void {\n    this.calendar.activeDate = this.calendar.currentView == 'month' ?\n        this._dateAdapter.addCalendarMonths(this.calendar.activeDate, 1) :\n            this._dateAdapter.addCalendarYears(\n                this.calendar.activeDate,\n                    this.calendar.currentView == 'year' ? 1 : yearsPerPage\n            );\n  }\n\n  /** Whether the previous period button is enabled. */\n  previousEnabled(): boolean {\n    if (!this.calendar.minDate) {\n      return true;\n    }\n    return !this.calendar.minDate ||\n        !this._isSameView(this.calendar.activeDate, this.calendar.minDate);\n  }\n\n  /** Whether the next period button is enabled. */\n  nextEnabled(): boolean {\n    return !this.calendar.maxDate ||\n        !this._isSameView(this.calendar.activeDate, this.calendar.maxDate);\n  }\n\n  /** Whether the two dates represent the same view in the current view mode (month or year). */\n  private _isSameView(date1: D, date2: D): boolean {\n    if (this.calendar.currentView == 'month') {\n      return this._dateAdapter.getYear(date1) == this._dateAdapter.getYear(date2) &&\n          this._dateAdapter.getMonth(date1) == this._dateAdapter.getMonth(date2);\n    }\n    if (this.calendar.currentView == 'year') {\n      return this._dateAdapter.getYear(date1) == this._dateAdapter.getYear(date2);\n    }\n    // Otherwise we are in 'multi-year' view.\n    return Math.floor(this._dateAdapter.getYear(date1) / yearsPerPage) ==\n        Math.floor(this._dateAdapter.getYear(date2) / yearsPerPage);\n  }\n}\n\n/**\n * A calendar that is used as part of the datepicker.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-calendar',\n  templateUrl: 'calendar.html',\n  styleUrls: ['calendar.css'],\n  host: {\n    'class': 'mat-calendar',\n  },\n  exportAs: 'matCalendar',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatCalendar<D> implements AfterContentInit, AfterViewChecked, OnDestroy, OnChanges {\n  /** An input indicating the type of the header component, if set. */\n  @Input() headerComponent: ComponentType<any>;\n\n  /** A portal containing the header component type for this calendar. */\n  _calendarHeaderPortal: Portal<any>;\n\n  private _intlChanges: Subscription;\n\n  /**\n   * Used for scheduling that focus should be moved to the active cell on the next tick.\n   * We need to schedule it, rather than do it immediately, because we have to wait\n   * for Angular to re-evaluate the view children.\n   */\n  private _moveFocusOnNextTick = false;\n\n  /** A date representing the period (month or year) to start the calendar in. */\n  @Input()\n  get startAt(): D | null { return this._startAt; }\n  set startAt(value: D | null) {\n    this._startAt = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _startAt: D | null;\n\n  /** Whether the calendar should be started in month or year view. */\n  @Input() startView: MatCalendarView = 'month';\n\n  /** The currently selected date. */\n  @Input()\n  get selected(): D | null { return this._selected; }\n  set selected(value: D | null) {\n    this._selected = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _selected: D | null;\n\n  /** The minimum selectable date. */\n  @Input()\n  get minDate(): D | null { return this._minDate; }\n  set minDate(value: D | null) {\n    this._minDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _minDate: D | null;\n\n  /** The maximum selectable date. */\n  @Input()\n  get maxDate(): D | null { return this._maxDate; }\n  set maxDate(value: D | null) {\n    this._maxDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _maxDate: D | null;\n\n  /** A function used to filter which dates are selectable. */\n  @Input() dateFilter: (date: D) => boolean;\n\n  /** Emits when the currently selected date changes. */\n  @Output() readonly selectedChange: EventEmitter<D> = new EventEmitter<D>();\n\n  /**\n   * Emits the year chosen in multiyear view.\n   * This doesn't imply a change on the selected date.\n   */\n  @Output() readonly yearSelected: EventEmitter<D> = new EventEmitter<D>();\n\n  /**\n   * Emits the month chosen in year view.\n   * This doesn't imply a change on the selected date.\n   */\n  @Output() readonly monthSelected: EventEmitter<D> = new EventEmitter<D>();\n\n  /** Emits when any date is selected. */\n  @Output() readonly _userSelection: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Reference to the current month view component. */\n  @ViewChild(MatMonthView) monthView: MatMonthView<D>;\n\n  /** Reference to the current year view component. */\n  @ViewChild(MatYearView) yearView: MatYearView<D>;\n\n  /** Reference to the current multi-year view component. */\n  @ViewChild(MatMultiYearView) multiYearView: MatMultiYearView<D>;\n\n  /**\n   * The current active date. This determines which time period is shown and which date is\n   * highlighted when using keyboard navigation.\n   */\n  get activeDate(): D { return this._clampedActiveDate; }\n  set activeDate(value: D) {\n    this._clampedActiveDate = this._dateAdapter.clampDate(value, this.minDate, this.maxDate);\n    this.stateChanges.next();\n  }\n  private _clampedActiveDate: D;\n\n  /** Whether the calendar is in month view. */\n  get currentView(): MatCalendarView { return this._currentView; }\n  set currentView(value: MatCalendarView) {\n    this._currentView = value;\n    this._moveFocusOnNextTick = true;\n  }\n  private _currentView: MatCalendarView;\n\n  /**\n   * Emits whenever there is a state change that the header may need to respond to.\n   */\n  stateChanges = new Subject<void>();\n\n  constructor(_intl: MatDatepickerIntl,\n              @Optional() private _dateAdapter: DateAdapter<D>,\n              @Optional() @Inject(MAT_DATE_FORMATS) private _dateFormats: MatDateFormats,\n              private _changeDetectorRef: ChangeDetectorRef) {\n\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n\n    if (!this._dateFormats) {\n      throw createMissingDateImplError('MAT_DATE_FORMATS');\n    }\n\n    this._intlChanges = _intl.changes.subscribe(() => {\n      _changeDetectorRef.markForCheck();\n      this.stateChanges.next();\n    });\n  }\n\n  ngAfterContentInit() {\n    this._calendarHeaderPortal = new ComponentPortal(this.headerComponent || MatCalendarHeader);\n    this.activeDate = this.startAt || this._dateAdapter.today();\n\n    // Assign to the private property since we don't want to move focus on init.\n    this._currentView = this.startView;\n  }\n\n  ngAfterViewChecked() {\n    if (this._moveFocusOnNextTick) {\n      this._moveFocusOnNextTick = false;\n      this.focusActiveCell();\n    }\n  }\n\n  ngOnDestroy() {\n    this._intlChanges.unsubscribe();\n    this.stateChanges.complete();\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    const change = changes.minDate || changes.maxDate || changes.dateFilter;\n\n    if (change && !change.firstChange) {\n      const view = this._getCurrentViewComponent();\n\n      if (view) {\n        // We need to `detectChanges` manually here, because the `minDate`, `maxDate` etc. are\n        // passed down to the view via data bindings which won't be up-to-date when we call `_init`.\n        this._changeDetectorRef.detectChanges();\n        view._init();\n      }\n    }\n\n    this.stateChanges.next();\n  }\n\n  focusActiveCell() {\n    this._getCurrentViewComponent()._focusActiveCell();\n  }\n\n  /** Updates today's date after an update of the active date */\n  updateTodaysDate() {\n    let view = this.currentView == 'month' ? this.monthView :\n            (this.currentView == 'year' ? this.yearView : this.multiYearView);\n\n    view.ngAfterContentInit();\n  }\n\n  /** Handles date selection in the month view. */\n  _dateSelected(date: D): void {\n    if (!this._dateAdapter.sameDate(date, this.selected)) {\n      this.selectedChange.emit(date);\n    }\n  }\n\n  /** Handles year selection in the multiyear view. */\n  _yearSelectedInMultiYearView(normalizedYear: D) {\n    this.yearSelected.emit(normalizedYear);\n  }\n\n  /** Handles month selection in the year view. */\n  _monthSelectedInYearView(normalizedMonth: D) {\n    this.monthSelected.emit(normalizedMonth);\n  }\n\n  _userSelected(): void {\n    this._userSelection.emit();\n  }\n\n  /** Handles year/month selection in the multi-year/year views. */\n  _goToDateInView(date: D, view: 'month' | 'year' | 'multi-year'): void {\n    this.activeDate = date;\n    this.currentView = view;\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n\n  /** Returns the component instance that corresponds to the current calendar view. */\n  private _getCurrentViewComponent() {\n    return this.monthView || this.yearView || this.multiYearView;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/** Animations used by the Material datepicker. */\nexport const matDatepickerAnimations: {\n  readonly transformPanel: AnimationTriggerMetadata;\n  readonly fadeInCalendar: AnimationTriggerMetadata;\n} = {\n  /** Transforms the height of the datepicker's calendar. */\n  transformPanel: trigger('transformPanel', [\n    state('void', style({\n      opacity: 0,\n      transform: 'scale(1, 0.8)'\n    })),\n    transition('void => enter',  animate('120ms cubic-bezier(0, 0, 0.2, 1)', style({\n      opacity: 1,\n      transform: 'scale(1, 1)'\n    }))),\n    transition('* => void', animate('100ms linear', style({opacity: 0})))\n  ]),\n\n  /** Fades in the content of the calendar. */\n  fadeInCalendar: trigger('fadeInCalendar', [\n    state('void', style({opacity: 0})),\n    state('enter', style({opacity: 1})),\n\n    // TODO(crisbeto): this animation should be removed since it isn't quite on spec, but we\n    // need to keep it until #12440 gets in, otherwise the exit animation will look glitchy.\n    transition('void => *', animate('120ms 100ms cubic-bezier(0.55, 0, 0.55, 0.2)'))\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {ESCAPE, UP_ARROW} from '@angular/cdk/keycodes';\nimport {\n  Overlay,\n  OverlayConfig,\n  OverlayRef,\n  PositionStrategy,\n  ScrollStrategy,\n} from '@angular/cdk/overlay';\nimport {ComponentPortal, ComponentType} from '@angular/cdk/portal';\nimport {DOCUMENT} from '@angular/common';\nimport {take, filter} from 'rxjs/operators';\nimport {\n  AfterViewInit,\n  ChangeDetectionStrategy,\n  Component,\n  ComponentRef,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  Optional,\n  Output,\n  ViewChild,\n  ViewContainerRef,\n  ViewEncapsulation,\n  OnDestroy,\n} from '@angular/core';\nimport {CanColor, DateAdapter, mixinColor, ThemePalette} from '@angular/material/core';\nimport {MatDialog, MatDialogRef} from '@angular/material/dialog';\nimport {merge, Subject, Subscription} from 'rxjs';\nimport {createMissingDateImplError} from './datepicker-errors';\nimport {MatDatepickerInput} from './datepicker-input';\nimport {MatCalendar} from './calendar';\nimport {matDatepickerAnimations} from './datepicker-animations';\n\n/** Used to generate a unique ID for each datepicker instance. */\nlet datepickerUid = 0;\n\n/** Injection token that determines the scroll handling while the calendar is open. */\nexport const MAT_DATEPICKER_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mat-datepicker-scroll-strategy');\n\n/** @docs-private */\nexport function MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY(overlay: Overlay): () => ScrollStrategy {\n  return () => overlay.scrollStrategies.reposition();\n}\n\n/** @docs-private */\nexport const MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY_PROVIDER = {\n  provide: MAT_DATEPICKER_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY,\n};\n\n// Boilerplate for applying mixins to MatDatepickerContent.\n/** @docs-private */\nexport class MatDatepickerContentBase {\n  constructor(public _elementRef: ElementRef) { }\n}\nexport const _MatDatepickerContentMixinBase = mixinColor(MatDatepickerContentBase);\n\n/**\n * Component used as the content for the datepicker dialog and popup. We use this instead of using\n * MatCalendar directly as the content so we can control the initial focus. This also gives us a\n * place to put additional features of the popup that are not part of the calendar itself in the\n * future. (e.g. confirmation buttons).\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-datepicker-content',\n  templateUrl: 'datepicker-content.html',\n  styleUrls: ['datepicker-content.css'],\n  host: {\n    'class': 'mat-datepicker-content',\n    '[@transformPanel]': '\"enter\"',\n    '[class.mat-datepicker-content-touch]': 'datepicker.touchUi',\n  },\n  animations: [\n    matDatepickerAnimations.transformPanel,\n    matDatepickerAnimations.fadeInCalendar,\n  ],\n  exportAs: 'matDatepickerContent',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  inputs: ['color'],\n})\nexport class MatDatepickerContent<D> extends _MatDatepickerContentMixinBase\n  implements AfterViewInit, CanColor {\n\n  /** Reference to the internal calendar component. */\n  @ViewChild(MatCalendar) _calendar: MatCalendar<D>;\n\n  /** Reference to the datepicker that created the overlay. */\n  datepicker: MatDatepicker<D>;\n\n  /** Whether the datepicker is above or below the input. */\n  _isAbove: boolean;\n\n  constructor(elementRef: ElementRef) {\n    super(elementRef);\n  }\n\n  ngAfterViewInit() {\n    this._calendar.focusActiveCell();\n  }\n}\n\n\n// TODO(mmalerba): We use a component instead of a directive here so the user can use implicit\n// template reference variables (e.g. #d vs #d=\"matDatepicker\"). We can change this to a directive\n// if angular adds support for `exportAs: '$implicit'` on directives.\n/** Component responsible for managing the datepicker popup/dialog. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-datepicker',\n  template: '',\n  exportAs: 'matDatepicker',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatDatepicker<D> implements OnDestroy, CanColor {\n  /** An input indicating the type of the custom header component for the calendar, if set. */\n  @Input() calendarHeaderComponent: ComponentType<any>;\n\n  /** The date to open the calendar to initially. */\n  @Input()\n  get startAt(): D | null {\n    // If an explicit startAt is set we start there, otherwise we start at whatever the currently\n    // selected value is.\n    return this._startAt || (this._datepickerInput ? this._datepickerInput.value : null);\n  }\n  set startAt(value: D | null) {\n    this._startAt = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _startAt: D | null;\n\n  /** The view that the calendar should start in. */\n  @Input() startView: 'month' | 'year' | 'multi-year' = 'month';\n\n  /** Color palette to use on the datepicker's calendar. */\n  @Input()\n  get color(): ThemePalette {\n    return this._color ||\n        (this._datepickerInput ? this._datepickerInput._getThemePalette() : undefined);\n  }\n  set color(value: ThemePalette) {\n    this._color = value;\n  }\n  _color: ThemePalette;\n\n  /**\n   * Whether the calendar UI is in touch mode. In touch mode the calendar opens in a dialog rather\n   * than a popup and elements have more padding to allow for bigger touch targets.\n   */\n  @Input()\n  get touchUi(): boolean { return this._touchUi; }\n  set touchUi(value: boolean) {\n    this._touchUi = coerceBooleanProperty(value);\n  }\n  private _touchUi = false;\n\n  /** Whether the datepicker pop-up should be disabled. */\n  @Input()\n  get disabled(): boolean {\n    return this._disabled === undefined && this._datepickerInput ?\n        this._datepickerInput.disabled : !!this._disabled;\n  }\n  set disabled(value: boolean) {\n    const newValue = coerceBooleanProperty(value);\n\n    if (newValue !== this._disabled) {\n      this._disabled = newValue;\n      this._disabledChange.next(newValue);\n    }\n  }\n  private _disabled: boolean;\n\n  /**\n   * Emits selected year in multiyear view.\n   * This doesn't imply a change on the selected date.\n   */\n  @Output() readonly yearSelected: EventEmitter<D> = new EventEmitter<D>();\n\n  /**\n   * Emits selected month in year view.\n   * This doesn't imply a change on the selected date.\n   */\n  @Output() readonly monthSelected: EventEmitter<D> = new EventEmitter<D>();\n\n  /** Classes to be passed to the date picker panel. Supports the same syntax as `ngClass`. */\n  @Input() panelClass: string | string[];\n\n  /** Emits when the datepicker has been opened. */\n  @Output('opened') openedStream: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Emits when the datepicker has been closed. */\n  @Output('closed') closedStream: EventEmitter<void> = new EventEmitter<void>();\n\n\n  /** Whether the calendar is open. */\n  @Input()\n  get opened(): boolean { return this._opened; }\n  set opened(value: boolean) { value ? this.open() : this.close(); }\n  private _opened = false;\n\n  /** The id for the datepicker calendar. */\n  id: string = `mat-datepicker-${datepickerUid++}`;\n\n  /** The currently selected date. */\n  get _selected(): D | null { return this._validSelected; }\n  set _selected(value: D | null) { this._validSelected = value; }\n  private _validSelected: D | null = null;\n\n  /** The minimum selectable date. */\n  get _minDate(): D | null {\n    return this._datepickerInput && this._datepickerInput.min;\n  }\n\n  /** The maximum selectable date. */\n  get _maxDate(): D | null {\n    return this._datepickerInput && this._datepickerInput.max;\n  }\n\n  get _dateFilter(): (date: D | null) => boolean {\n    return this._datepickerInput && this._datepickerInput._dateFilter;\n  }\n\n  /** A reference to the overlay when the calendar is opened as a popup. */\n  _popupRef: OverlayRef;\n\n  /** A reference to the dialog when the calendar is opened as a dialog. */\n  private _dialogRef: MatDialogRef<MatDatepickerContent<D>> | null;\n\n  /** A portal containing the calendar for this datepicker. */\n  private _calendarPortal: ComponentPortal<MatDatepickerContent<D>>;\n\n  /** Reference to the component instantiated in popup mode. */\n  private _popupComponentRef: ComponentRef<MatDatepickerContent<D>> | null;\n\n  /** The element that was focused before the datepicker was opened. */\n  private _focusedElementBeforeOpen: HTMLElement | null = null;\n\n  /** Subscription to value changes in the associated input element. */\n  private _inputSubscription = Subscription.EMPTY;\n\n  /** The input element this datepicker is associated with. */\n  _datepickerInput: MatDatepickerInput<D>;\n\n  /** Emits when the datepicker is disabled. */\n  readonly _disabledChange = new Subject<boolean>();\n\n  /** Emits new selected date when selected date changes. */\n  readonly _selectedChanged = new Subject<D>();\n\n  constructor(private _dialog: MatDialog,\n              private _overlay: Overlay,\n              private _ngZone: NgZone,\n              private _viewContainerRef: ViewContainerRef,\n              @Inject(MAT_DATEPICKER_SCROLL_STRATEGY) private _scrollStrategy,\n              @Optional() private _dateAdapter: DateAdapter<D>,\n              @Optional() private _dir: Directionality,\n              @Optional() @Inject(DOCUMENT) private _document: any) {\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n  }\n\n  ngOnDestroy() {\n    this.close();\n    this._inputSubscription.unsubscribe();\n    this._disabledChange.complete();\n\n    if (this._popupRef) {\n      this._popupRef.dispose();\n      this._popupComponentRef = null;\n    }\n  }\n\n  /** Selects the given date */\n  select(date: D): void {\n    let oldValue = this._selected;\n    this._selected = date;\n    if (!this._dateAdapter.sameDate(oldValue, this._selected)) {\n      this._selectedChanged.next(date);\n    }\n  }\n\n  /** Emits the selected year in multiyear view */\n  _selectYear(normalizedYear: D): void {\n    this.yearSelected.emit(normalizedYear);\n  }\n\n  /** Emits selected month in year view */\n  _selectMonth(normalizedMonth: D): void {\n    this.monthSelected.emit(normalizedMonth);\n  }\n\n  /**\n   * Register an input with this datepicker.\n   * @param input The datepicker input to register with this datepicker.\n   */\n  _registerInput(input: MatDatepickerInput<D>): void {\n    if (this._datepickerInput) {\n      throw Error('A MatDatepicker can only be associated with a single input.');\n    }\n    this._datepickerInput = input;\n    this._inputSubscription =\n        this._datepickerInput._valueChange.subscribe((value: D | null) => this._selected = value);\n  }\n\n  /** Open the calendar. */\n  open(): void {\n    if (this._opened || this.disabled) {\n      return;\n    }\n    if (!this._datepickerInput) {\n      throw Error('Attempted to open an MatDatepicker with no associated input.');\n    }\n    if (this._document) {\n      this._focusedElementBeforeOpen = this._document.activeElement;\n    }\n\n    this.touchUi ? this._openAsDialog() : this._openAsPopup();\n    this._opened = true;\n    this.openedStream.emit();\n  }\n\n  /** Close the calendar. */\n  close(): void {\n    if (!this._opened) {\n      return;\n    }\n    if (this._popupRef && this._popupRef.hasAttached()) {\n      this._popupRef.detach();\n    }\n    if (this._dialogRef) {\n      this._dialogRef.close();\n      this._dialogRef = null;\n    }\n    if (this._calendarPortal && this._calendarPortal.isAttached) {\n      this._calendarPortal.detach();\n    }\n\n    const completeClose = () => {\n      // The `_opened` could've been reset already if\n      // we got two events in quick succession.\n      if (this._opened) {\n        this._opened = false;\n        this.closedStream.emit();\n        this._focusedElementBeforeOpen = null;\n      }\n    };\n\n    if (this._focusedElementBeforeOpen &&\n      typeof this._focusedElementBeforeOpen.focus === 'function') {\n      // Because IE moves focus asynchronously, we can't count on it being restored before we've\n      // marked the datepicker as closed. If the event fires out of sequence and the element that\n      // we're refocusing opens the datepicker on focus, the user could be stuck with not being\n      // able to close the calendar at all. We work around it by making the logic, that marks\n      // the datepicker as closed, async as well.\n      this._focusedElementBeforeOpen.focus();\n      setTimeout(completeClose);\n    } else {\n      completeClose();\n    }\n  }\n\n  /** Open the calendar as a dialog. */\n  private _openAsDialog(): void {\n    // Usually this would be handled by `open` which ensures that we can only have one overlay\n    // open at a time, however since we reset the variables in async handlers some overlays\n    // may slip through if the user opens and closes multiple times in quick succession (e.g.\n    // by holding down the enter key).\n    if (this._dialogRef) {\n      this._dialogRef.close();\n    }\n\n    this._dialogRef = this._dialog.open<MatDatepickerContent<D>>(MatDatepickerContent, {\n      direction: this._dir ? this._dir.value : 'ltr',\n      viewContainerRef: this._viewContainerRef,\n      panelClass: 'mat-datepicker-dialog',\n    });\n\n    this._dialogRef.afterClosed().subscribe(() => this.close());\n    this._dialogRef.componentInstance.datepicker = this;\n    this._setColor();\n  }\n\n  /** Open the calendar as a popup. */\n  private _openAsPopup(): void {\n    if (!this._calendarPortal) {\n      this._calendarPortal = new ComponentPortal<MatDatepickerContent<D>>(MatDatepickerContent,\n                                                                          this._viewContainerRef);\n    }\n\n    if (!this._popupRef) {\n      this._createPopup();\n    }\n\n    if (!this._popupRef.hasAttached()) {\n      this._popupComponentRef = this._popupRef.attach(this._calendarPortal);\n      this._popupComponentRef.instance.datepicker = this;\n      this._setColor();\n\n      // Update the position once the calendar has rendered.\n      this._ngZone.onStable.asObservable().pipe(take(1)).subscribe(() => {\n        this._popupRef.updatePosition();\n      });\n    }\n  }\n\n  /** Create the popup. */\n  private _createPopup(): void {\n    const overlayConfig = new OverlayConfig({\n      positionStrategy: this._createPopupPositionStrategy(),\n      hasBackdrop: true,\n      backdropClass: 'mat-overlay-transparent-backdrop',\n      direction: this._dir,\n      scrollStrategy: this._scrollStrategy(),\n      panelClass: 'mat-datepicker-popup',\n    });\n\n    this._popupRef = this._overlay.create(overlayConfig);\n    this._popupRef.overlayElement.setAttribute('role', 'dialog');\n\n    merge(\n      this._popupRef.backdropClick(),\n      this._popupRef.detachments(),\n      this._popupRef.keydownEvents().pipe(filter(event => {\n        // Closing on alt + up is only valid when there's an input associated with the datepicker.\n        return event.keyCode === ESCAPE ||\n               (this._datepickerInput && event.altKey && event.keyCode === UP_ARROW);\n      }))\n    ).subscribe(() => this.close());\n  }\n\n  /** Create the popup PositionStrategy. */\n  private _createPopupPositionStrategy(): PositionStrategy {\n    return this._overlay.position()\n      .flexibleConnectedTo(this._datepickerInput.getConnectedOverlayOrigin())\n      .withTransformOriginOn('.mat-datepicker-content')\n      .withFlexibleDimensions(false)\n      .withViewportMargin(8)\n      .withPush(false)\n      .withPositions([\n        {\n          originX: 'start',\n          originY: 'bottom',\n          overlayX: 'start',\n          overlayY: 'top'\n        },\n        {\n          originX: 'start',\n          originY: 'top',\n          overlayX: 'start',\n          overlayY: 'bottom'\n        },\n        {\n          originX: 'end',\n          originY: 'bottom',\n          overlayX: 'end',\n          overlayY: 'top'\n        },\n        {\n          originX: 'end',\n          originY: 'top',\n          overlayX: 'end',\n          overlayY: 'bottom'\n        }\n      ]);\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n\n  /** Passes the current theme color along to the calendar overlay. */\n  private _setColor(): void {\n    const color = this.color;\n    if (this._popupComponentRef) {\n      this._popupComponentRef.instance.color = color;\n    }\n    if (this._dialogRef) {\n      this._dialogRef.componentInstance.color = color;\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {DOWN_ARROW} from '@angular/cdk/keycodes';\nimport {\n  Directive,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  OnDestroy,\n  Optional,\n  Output,\n} from '@angular/core';\nimport {\n  AbstractControl,\n  ControlValueAccessor,\n  NG_VALIDATORS,\n  NG_VALUE_ACCESSOR,\n  ValidationErrors,\n  Validator,\n  ValidatorFn,\n  Validators\n} from '@angular/forms';\nimport {DateAdapter, MAT_DATE_FORMATS, MatDateFormats} from '@angular/material/core';\nimport {MatFormField} from '@angular/material/form-field';\nimport {MAT_INPUT_VALUE_ACCESSOR} from '@angular/material/input';\nimport {Subscription} from 'rxjs';\nimport {MatDatepicker} from './datepicker';\nimport {createMissingDateImplError} from './datepicker-errors';\n\n\nexport const MAT_DATEPICKER_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatDatepickerInput),\n  multi: true\n};\n\n\nexport const MAT_DATEPICKER_VALIDATORS: any = {\n  provide: NG_VALIDATORS,\n  useExisting: forwardRef(() => MatDatepickerInput),\n  multi: true\n};\n\n\n/**\n * An event used for datepicker input and change events. We don't always have access to a native\n * input or change event because the event may have been triggered by the user clicking on the\n * calendar popup. For consistency, we always use MatDatepickerInputEvent instead.\n */\nexport class MatDatepickerInputEvent<D> {\n  /** The new value for the target datepicker input. */\n  value: D | null;\n\n  constructor(\n    /** Reference to the datepicker input component that emitted the event. */\n    public target: MatDatepickerInput<D>,\n    /** Reference to the native input element associated with the datepicker input. */\n    public targetElement: HTMLElement) {\n    this.value = this.target.value;\n  }\n}\n\n\n/** Directive used to connect an input to a MatDatepicker. */\n@Directive({\n  selector: 'input[matDatepicker]',\n  providers: [\n    MAT_DATEPICKER_VALUE_ACCESSOR,\n    MAT_DATEPICKER_VALIDATORS,\n    {provide: MAT_INPUT_VALUE_ACCESSOR, useExisting: MatDatepickerInput},\n  ],\n  host: {\n    '[attr.aria-haspopup]': 'true',\n    '[attr.aria-owns]': '(_datepicker?.opened && _datepicker.id) || null',\n    '[attr.min]': 'min ? _dateAdapter.toIso8601(min) : null',\n    '[attr.max]': 'max ? _dateAdapter.toIso8601(max) : null',\n    '[disabled]': 'disabled',\n    '(input)': '_onInput($event.target.value)',\n    '(change)': '_onChange()',\n    '(blur)': '_onBlur()',\n    '(keydown)': '_onKeydown($event)',\n  },\n  exportAs: 'matDatepickerInput',\n})\nexport class MatDatepickerInput<D> implements ControlValueAccessor, OnDestroy, Validator {\n  /** The datepicker that this input is associated with. */\n  @Input()\n  set matDatepicker(value: MatDatepicker<D>) {\n    if (!value) {\n      return;\n    }\n\n    this._datepicker = value;\n    this._datepicker._registerInput(this);\n    this._datepickerSubscription.unsubscribe();\n\n    this._datepickerSubscription = this._datepicker._selectedChanged.subscribe((selected: D) => {\n      this.value = selected;\n      this._cvaOnChange(selected);\n      this._onTouched();\n      this.dateInput.emit(new MatDatepickerInputEvent(this, this._elementRef.nativeElement));\n      this.dateChange.emit(new MatDatepickerInputEvent(this, this._elementRef.nativeElement));\n    });\n  }\n  _datepicker: MatDatepicker<D>;\n\n  /** Function that can be used to filter out dates within the datepicker. */\n  @Input()\n  set matDatepickerFilter(value: (date: D | null) => boolean) {\n    this._dateFilter = value;\n    this._validatorOnChange();\n  }\n  _dateFilter: (date: D | null) => boolean;\n\n  /** The value of the input. */\n  @Input()\n  get value(): D | null { return this._value; }\n  set value(value: D | null) {\n    value = this._dateAdapter.deserialize(value);\n    this._lastValueValid = !value || this._dateAdapter.isValid(value);\n    value = this._getValidDateOrNull(value);\n    const oldDate = this.value;\n    this._value = value;\n    this._formatValue(value);\n\n    if (!this._dateAdapter.sameDate(oldDate, value)) {\n      this._valueChange.emit(value);\n    }\n  }\n  private _value: D | null;\n\n  /** The minimum valid date. */\n  @Input()\n  get min(): D | null { return this._min; }\n  set min(value: D | null) {\n    this._min = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n    this._validatorOnChange();\n  }\n  private _min: D | null;\n\n  /** The maximum valid date. */\n  @Input()\n  get max(): D | null { return this._max; }\n  set max(value: D | null) {\n    this._max = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n    this._validatorOnChange();\n  }\n  private _max: D | null;\n\n  /** Whether the datepicker-input is disabled. */\n  @Input()\n  get disabled(): boolean { return !!this._disabled; }\n  set disabled(value: boolean) {\n    const newValue = coerceBooleanProperty(value);\n    const element = this._elementRef.nativeElement;\n\n    if (this._disabled !== newValue) {\n      this._disabled = newValue;\n      this._disabledChange.emit(newValue);\n    }\n\n    // We need to null check the `blur` method, because it's undefined during SSR.\n    if (newValue && element.blur) {\n      // Normally, native input elements automatically blur if they turn disabled. This behavior\n      // is problematic, because it would mean that it triggers another change detection cycle,\n      // which then causes a changed after checked error if the input element was focused before.\n      element.blur();\n    }\n  }\n  private _disabled: boolean;\n\n  /** Emits when a `change` event is fired on this `<input>`. */\n  @Output() readonly dateChange: EventEmitter<MatDatepickerInputEvent<D>> =\n      new EventEmitter<MatDatepickerInputEvent<D>>();\n\n  /** Emits when an `input` event is fired on this `<input>`. */\n  @Output() readonly dateInput: EventEmitter<MatDatepickerInputEvent<D>> =\n      new EventEmitter<MatDatepickerInputEvent<D>>();\n\n  /** Emits when the value changes (either due to user input or programmatic change). */\n  _valueChange = new EventEmitter<D | null>();\n\n  /** Emits when the disabled state has changed */\n  _disabledChange = new EventEmitter<boolean>();\n\n  _onTouched = () => {};\n\n  private _cvaOnChange: (value: any) => void = () => {};\n\n  private _validatorOnChange = () => {};\n\n  private _datepickerSubscription = Subscription.EMPTY;\n\n  private _localeSubscription = Subscription.EMPTY;\n\n  /** The form control validator for whether the input parses. */\n  private _parseValidator: ValidatorFn = (): ValidationErrors | null => {\n    return this._lastValueValid ?\n        null : {'matDatepickerParse': {'text': this._elementRef.nativeElement.value}};\n  }\n\n  /** The form control validator for the min date. */\n  private _minValidator: ValidatorFn = (control: AbstractControl): ValidationErrors | null => {\n    const controlValue = this._getValidDateOrNull(this._dateAdapter.deserialize(control.value));\n    return (!this.min || !controlValue ||\n        this._dateAdapter.compareDate(this.min, controlValue) <= 0) ?\n        null : {'matDatepickerMin': {'min': this.min, 'actual': controlValue}};\n  }\n\n  /** The form control validator for the max date. */\n  private _maxValidator: ValidatorFn = (control: AbstractControl): ValidationErrors | null => {\n    const controlValue = this._getValidDateOrNull(this._dateAdapter.deserialize(control.value));\n    return (!this.max || !controlValue ||\n        this._dateAdapter.compareDate(this.max, controlValue) >= 0) ?\n        null : {'matDatepickerMax': {'max': this.max, 'actual': controlValue}};\n  }\n\n  /** The form control validator for the date filter. */\n  private _filterValidator: ValidatorFn = (control: AbstractControl): ValidationErrors | null => {\n    const controlValue = this._getValidDateOrNull(this._dateAdapter.deserialize(control.value));\n    return !this._dateFilter || !controlValue || this._dateFilter(controlValue) ?\n        null : {'matDatepickerFilter': true};\n  }\n\n  /** The combined form control validator for this input. */\n  private _validator: ValidatorFn | null =\n      Validators.compose(\n          [this._parseValidator, this._minValidator, this._maxValidator, this._filterValidator]);\n\n  /** Whether the last value set on the input was valid. */\n  private _lastValueValid = false;\n\n  constructor(\n      private _elementRef: ElementRef,\n      @Optional() public _dateAdapter: DateAdapter<D>,\n      @Optional() @Inject(MAT_DATE_FORMATS) private _dateFormats: MatDateFormats,\n      @Optional() private _formField: MatFormField) {\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n    if (!this._dateFormats) {\n      throw createMissingDateImplError('MAT_DATE_FORMATS');\n    }\n\n    // Update the displayed date when the locale changes.\n    this._localeSubscription = _dateAdapter.localeChanges.subscribe(() => {\n      this.value = this.value;\n    });\n  }\n\n  ngOnDestroy() {\n    this._datepickerSubscription.unsubscribe();\n    this._localeSubscription.unsubscribe();\n    this._valueChange.complete();\n    this._disabledChange.complete();\n  }\n\n  /** @docs-private */\n  registerOnValidatorChange(fn: () => void): void {\n    this._validatorOnChange = fn;\n  }\n\n  /** @docs-private */\n  validate(c: AbstractControl): ValidationErrors | null {\n    return this._validator ? this._validator(c) : null;\n  }\n\n  /**\n   * @deprecated\n   * @breaking-change 7.0.0 Use `getConnectedOverlayOrigin` instead\n   */\n  getPopupConnectionElementRef(): ElementRef {\n    return this.getConnectedOverlayOrigin();\n  }\n\n  /**\n   * Gets the element that the datepicker popup should be connected to.\n   * @return The element to connect the popup to.\n   */\n  getConnectedOverlayOrigin(): ElementRef {\n    return this._formField ? this._formField.getConnectedOverlayOrigin() : this._elementRef;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  writeValue(value: D): void {\n    this.value = value;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnChange(fn: (value: any) => void): void {\n    this._cvaOnChange = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnTouched(fn: () => void): void {\n    this._onTouched = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n  }\n\n  _onKeydown(event: KeyboardEvent) {\n    if (this._datepicker && event.altKey && event.keyCode === DOWN_ARROW) {\n      this._datepicker.open();\n      event.preventDefault();\n    }\n  }\n\n  _onInput(value: string) {\n    let date = this._dateAdapter.parse(value, this._dateFormats.parse.dateInput);\n    this._lastValueValid = !date || this._dateAdapter.isValid(date);\n    date = this._getValidDateOrNull(date);\n\n    if (!this._dateAdapter.sameDate(date, this._value)) {\n      this._value = date;\n      this._cvaOnChange(date);\n      this._valueChange.emit(date);\n      this.dateInput.emit(new MatDatepickerInputEvent(this, this._elementRef.nativeElement));\n    }\n  }\n\n  _onChange() {\n    this.dateChange.emit(new MatDatepickerInputEvent(this, this._elementRef.nativeElement));\n  }\n\n  /** Returns the palette used by the input's form field, if any. */\n  _getThemePalette() {\n    return this._formField ? this._formField.color : undefined;\n  }\n\n  /** Handles blur events on the input. */\n  _onBlur() {\n    // Reformat the input only if we have a valid value.\n    if (this.value) {\n      this._formatValue(this.value);\n    }\n\n    this._onTouched();\n  }\n\n  /** Formats a value and sets it on the input element. */\n  private _formatValue(value: D | null) {\n    this._elementRef.nativeElement.value =\n        value ? this._dateAdapter.format(value, this._dateFormats.display.dateInput) : '';\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  AfterContentInit,\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  Directive,\n  Input,\n  OnChanges,\n  OnDestroy,\n  SimpleChanges,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {merge, of as observableOf, Subscription} from 'rxjs';\nimport {MatDatepicker} from './datepicker';\nimport {MatDatepickerIntl} from './datepicker-intl';\n\n\n/** Can be used to override the icon of a `matDatepickerToggle`. */\n@Directive({\n  selector: '[matDatepickerToggleIcon]'\n})\nexport class MatDatepickerToggleIcon {}\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-datepicker-toggle',\n  templateUrl: 'datepicker-toggle.html',\n  styleUrls: ['datepicker-toggle.css'],\n  host: {\n    'class': 'mat-datepicker-toggle',\n    // Clear out the native tabindex here since we forward it to the underlying button\n    '[attr.tabindex]': 'null',\n    '[class.mat-datepicker-toggle-active]': 'datepicker && datepicker.opened',\n    '[class.mat-accent]': 'datepicker && datepicker.color === \"accent\"',\n    '[class.mat-warn]': 'datepicker && datepicker.color === \"warn\"',\n  },\n  exportAs: 'matDatepickerToggle',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatDatepickerToggle<D> implements AfterContentInit, OnChanges, OnDestroy {\n  private _stateChanges = Subscription.EMPTY;\n\n  /** Datepicker instance that the button will toggle. */\n  @Input('for') datepicker: MatDatepicker<D>;\n\n  /** Tabindex for the toggle. */\n  @Input() tabIndex: number | null;\n\n  /** Whether the toggle button is disabled. */\n  @Input()\n  get disabled(): boolean {\n    return this._disabled === undefined ? this.datepicker.disabled : !!this._disabled;\n  }\n  set disabled(value: boolean) {\n    this._disabled = coerceBooleanProperty(value);\n  }\n  private _disabled: boolean;\n\n  /** Custom icon set by the consumer. */\n  @ContentChild(MatDatepickerToggleIcon) _customIcon: MatDatepickerToggleIcon;\n\n  constructor(\n    public _intl: MatDatepickerIntl,\n    private _changeDetectorRef: ChangeDetectorRef,\n    @Attribute('tabindex') defaultTabIndex: string) {\n\n    const parsedTabIndex = Number(defaultTabIndex);\n    this.tabIndex = (parsedTabIndex || parsedTabIndex === 0) ? parsedTabIndex : null;\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    if (changes.datepicker) {\n      this._watchStateChanges();\n    }\n  }\n\n  ngOnDestroy() {\n    this._stateChanges.unsubscribe();\n  }\n\n  ngAfterContentInit() {\n    this._watchStateChanges();\n  }\n\n  _open(event: Event): void {\n    if (this.datepicker && !this.disabled) {\n      this.datepicker.open();\n      event.stopPropagation();\n    }\n  }\n\n  private _watchStateChanges() {\n    const datepickerDisabled = this.datepicker ? this.datepicker._disabledChange : observableOf();\n    const inputDisabled = this.datepicker && this.datepicker._datepickerInput ?\n        this.datepicker._datepickerInput._disabledChange : observableOf();\n    const datepickerToggled = this.datepicker ?\n        merge(this.datepicker.openedStream, this.datepicker.closedStream) :\n        observableOf();\n\n    this._stateChanges.unsubscribe();\n    this._stateChanges = merge(\n      this._intl.changes,\n      datepickerDisabled,\n      inputDisabled,\n      datepickerToggled\n    ).subscribe(() => this._changeDetectorRef.markForCheck());\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {A11yModule} from '@angular/cdk/a11y';\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatButtonModule} from '@angular/material/button';\nimport {MatDialogModule} from '@angular/material/dialog';\nimport {MatCalendar, MatCalendarHeader} from './calendar';\nimport {MatCalendarBody} from './calendar-body';\nimport {\n  MatDatepicker,\n  MatDatepickerContent,\n  MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY_PROVIDER,\n} from './datepicker';\nimport {MatDatepickerInput} from './datepicker-input';\nimport {MatDatepickerIntl} from './datepicker-intl';\nimport {MatDatepickerToggle, MatDatepickerToggleIcon} from './datepicker-toggle';\nimport {MatMonthView} from './month-view';\nimport {MatMultiYearView} from './multi-year-view';\nimport {MatYearView} from './year-view';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatButtonModule,\n    MatDialogModule,\n    OverlayModule,\n    A11yModule,\n    PortalModule,\n  ],\n  exports: [\n    MatCalendar,\n    MatCalendarBody,\n    MatDatepicker,\n    MatDatepickerContent,\n    MatDatepickerInput,\n    MatDatepickerToggle,\n    MatDatepickerToggleIcon,\n    MatMonthView,\n    MatYearView,\n    MatMultiYearView,\n    MatCalendarHeader,\n  ],\n  declarations: [\n    MatCalendar,\n    MatCalendarBody,\n    MatDatepicker,\n    MatDatepickerContent,\n    MatDatepickerInput,\n    MatDatepickerToggle,\n    MatDatepickerToggleIcon,\n    MatMonthView,\n    MatYearView,\n    MatMultiYearView,\n    MatCalendarHeader,\n  ],\n  providers: [\n    MatDatepickerIntl,\n    MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY_PROVIDER,\n  ],\n  entryComponents: [\n    MatDatepickerContent,\n    MatCalendarHeader,\n  ]\n})\nexport class MatDatepickerModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ChangeDetectionStrategy, Component, Input, ViewEncapsulation} from '@angular/core';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-divider',\n  host: {\n    'role': 'separator',\n    '[attr.aria-orientation]': 'vertical ? \"vertical\" : \"horizontal\"',\n    '[class.mat-divider-vertical]': 'vertical',\n    '[class.mat-divider-horizontal]': '!vertical',\n    '[class.mat-divider-inset]': 'inset',\n    'class': 'mat-divider'\n  },\n  template: '',\n  styleUrls: ['divider.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatDivider {\n  /** Whether the divider is vertically aligned. */\n  @Input()\n  get vertical(): boolean { return this._vertical; }\n  set vertical(value: boolean) { this._vertical = coerceBooleanProperty(value); }\n  private _vertical: boolean = false;\n\n  /** Whether the divider is an inset divider. */\n  @Input()\n  get inset(): boolean { return this._inset; }\n  set inset(value: boolean) { this._inset = coerceBooleanProperty(value); }\n  private _inset: boolean = false;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatDivider} from './divider';\n\n\n@NgModule({\n  imports: [MatCommonModule, CommonModule],\n  exports: [MatDivider, MatCommonModule],\n  declarations: [MatDivider],\n})\nexport class MatDividerModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {InjectionToken} from '@angular/core';\nimport {CdkAccordion} from '@angular/cdk/accordion';\n\n/** MatAccordion's display modes. */\nexport type MatAccordionDisplayMode = 'default' | 'flat';\n\n/**\n * Base interface for a `MatAccordion`.\n * @docs-private\n */\nexport interface MatAccordionBase extends CdkAccordion {\n  /** Whether the expansion indicator should be hidden. */\n  hideToggle: boolean;\n\n  /** Display mode used for all expansion panels in the accordion. */\n  displayMode: MatAccordionDisplayMode;\n\n  /** Handles keyboard events coming in from the panel headers. */\n  _handleHeaderKeydown: (event: KeyboardEvent) => void;\n\n  /** Handles focus events on the panel headers. */\n  _handleHeaderFocus: (header: any) => void;\n}\n\n\n/**\n * Token used to provide a `MatAccordion` to `MatExpansionPanel`.\n * Used primarily to avoid circular imports between `MatAccordion` and `MatExpansionPanel`.\n */\nexport const MAT_ACCORDION = new InjectionToken<MatAccordionBase>('MAT_ACCORDION');\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, TemplateRef} from '@angular/core';\n\n/**\n * Expansion panel content that will be rendered lazily\n * after the panel is opened for the first time.\n */\n@Directive({\n  selector: 'ng-template[matExpansionPanelContent]'\n})\nexport class MatExpansionPanelContent {\n  constructor(public _template: TemplateRef<any>) {}\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {AnimationEvent} from '@angular/animations';\nimport {CdkAccordionItem} from '@angular/cdk/accordion';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {UniqueSelectionDispatcher} from '@angular/cdk/collections';\nimport {TemplatePortal} from '@angular/cdk/portal';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  Directive,\n  EventEmitter,\n  ElementRef,\n  Input,\n  Inject,\n  OnChanges,\n  OnDestroy,\n  Optional,\n  Output,\n  SimpleChanges,\n  SkipSelf,\n  ViewContainerRef,\n  ViewEncapsulation,\n  ViewChild,\n} from '@angular/core';\nimport {DOCUMENT} from '@angular/common';\nimport {Subject} from 'rxjs';\nimport {filter, startWith, take} from 'rxjs/operators';\nimport {matExpansionAnimations} from './expansion-animations';\nimport {MatExpansionPanelContent} from './expansion-panel-content';\nimport {MAT_ACCORDION, MatAccordionBase} from './accordion-base';\n\n// TODO(devversion): workaround for https://github.com/angular/material2/issues/12760\nexport const _CdkAccordionItem = CdkAccordionItem;\n\n/** MatExpansionPanel's states. */\nexport type MatExpansionPanelState = 'expanded' | 'collapsed';\n\n/** Counter for generating unique element ids. */\nlet uniqueId = 0;\n\n/**\n * `<mat-expansion-panel>`\n *\n * This component can be used as a single element to show expandable content, or as one of\n * multiple children of an element with the MatAccordion directive attached.\n */\n@Component({\n  moduleId: module.id,\n  styleUrls: ['./expansion-panel.css'],\n  selector: 'mat-expansion-panel',\n  exportAs: 'matExpansionPanel',\n  templateUrl: './expansion-panel.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  inputs: ['disabled', 'expanded'],\n  outputs: ['opened', 'closed', 'expandedChange'],\n  animations: [matExpansionAnimations.bodyExpansion],\n  providers: [\n    // Provide MatAccordion as undefined to prevent nested expansion panels from registering\n    // to the same accordion.\n    {provide: MAT_ACCORDION, useValue: undefined},\n  ],\n  host: {\n    'class': 'mat-expansion-panel',\n    '[class.mat-expanded]': 'expanded',\n    '[class.mat-expansion-panel-spacing]': '_hasSpacing()',\n  }\n})\nexport class MatExpansionPanel extends CdkAccordionItem implements AfterContentInit, OnChanges,\n  OnDestroy {\n\n  // @breaking-change 8.0.0 Remove `| undefined` from here\n  // when the `_document` constructor param is required.\n  private _document: Document | undefined;\n\n  /** Whether the toggle indicator should be hidden. */\n  @Input()\n  get hideToggle(): boolean {\n    return this._hideToggle || (this.accordion && this.accordion.hideToggle);\n  }\n  set hideToggle(value: boolean) {\n    this._hideToggle = coerceBooleanProperty(value);\n  }\n  private _hideToggle = false;\n\n  /** An event emitted after the body's expansion animation happens. */\n  @Output() afterExpand = new EventEmitter<void>();\n\n  /** An event emitted after the body's collapse animation happens. */\n  @Output() afterCollapse = new EventEmitter<void>();\n\n  /** Stream that emits for changes in `@Input` properties. */\n  readonly _inputChanges = new Subject<SimpleChanges>();\n\n  /** Optionally defined accordion the expansion panel belongs to. */\n  accordion: MatAccordionBase;\n\n  /** Content that will be rendered lazily. */\n  @ContentChild(MatExpansionPanelContent) _lazyContent: MatExpansionPanelContent;\n\n  /** Element containing the panel's user-provided content. */\n  @ViewChild('body') _body: ElementRef<HTMLElement>;\n\n  /** Portal holding the user's content. */\n  _portal: TemplatePortal;\n\n  /** ID for the associated header element. Used for a11y labelling. */\n  _headerId = `mat-expansion-panel-header-${uniqueId++}`;\n\n  constructor(@Optional() @SkipSelf() @Inject(MAT_ACCORDION) accordion: MatAccordionBase,\n              _changeDetectorRef: ChangeDetectorRef,\n              _uniqueSelectionDispatcher: UniqueSelectionDispatcher,\n              private _viewContainerRef: ViewContainerRef,\n              @Inject(DOCUMENT) _document?: any) {\n    super(accordion, _changeDetectorRef, _uniqueSelectionDispatcher);\n    this.accordion = accordion;\n    this._document = _document;\n  }\n\n  /** Determines whether the expansion panel should have spacing between it and its siblings. */\n  _hasSpacing(): boolean {\n    if (this.accordion) {\n      // We don't need to subscribe to the `stateChanges` of the parent accordion because each time\n      // the [displayMode] input changes, the change detection will also cover the host bindings\n      // of this expansion panel.\n      return (this.expanded ? this.accordion.displayMode : this._getExpandedState()) === 'default';\n    }\n    return false;\n  }\n\n  /** Gets the expanded state string. */\n  _getExpandedState(): MatExpansionPanelState {\n    return this.expanded ? 'expanded' : 'collapsed';\n  }\n\n  ngAfterContentInit() {\n    if (this._lazyContent) {\n      // Render the content as soon as the panel becomes open.\n      this.opened.pipe(\n        startWith<void>(null!),\n        filter(() => this.expanded && !this._portal),\n        take(1)\n      ).subscribe(() => {\n        this._portal = new TemplatePortal(this._lazyContent._template, this._viewContainerRef);\n      });\n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    this._inputChanges.next(changes);\n  }\n\n  ngOnDestroy() {\n    super.ngOnDestroy();\n    this._inputChanges.complete();\n  }\n\n  _bodyAnimation(event: AnimationEvent) {\n    const classList = event.element.classList;\n    const cssClass = 'mat-expanded';\n    const {phaseName, toState, fromState} = event;\n\n    // Toggle the body's `overflow: hidden` class when closing starts or when expansion ends in\n    // order to prevent the cases where switching too early would cause the animation to jump.\n    // Note that we do it directly on the DOM element to avoid the slight delay that comes\n    // with doing it via change detection.\n    if (phaseName === 'done' && toState === 'expanded') {\n      classList.add(cssClass);\n    }\n    if (phaseName === 'start' && toState === 'collapsed') {\n      classList.remove(cssClass);\n    }\n\n    if (phaseName === 'done' && toState === 'expanded' && fromState !== 'void') {\n      this.afterExpand.emit();\n    }\n    if (phaseName === 'done' && toState === 'collapsed' && fromState !== 'void') {\n      this.afterCollapse.emit();\n    }\n  }\n\n  /** Checks whether the expansion panel's content contains the currently-focused element. */\n  _containsFocus(): boolean {\n    if (this._body && this._document) {\n      const focusedElement = this._document.activeElement;\n      const bodyElement = this._body.nativeElement;\n      return focusedElement === bodyElement || bodyElement.contains(focusedElement);\n    }\n\n    return false;\n  }\n}\n\n@Directive({\n  selector: 'mat-action-row',\n  host: {\n    class: 'mat-action-row'\n  }\n})\nexport class MatExpansionPanelActionRow {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor, FocusableOption, FocusOrigin} from '@angular/cdk/a11y';\nimport {ENTER, SPACE} from '@angular/cdk/keycodes';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  Directive,\n  ElementRef,\n  Host,\n  Input,\n  OnDestroy,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {merge, Subscription, EMPTY} from 'rxjs';\nimport {filter} from 'rxjs/operators';\nimport {matExpansionAnimations} from './expansion-animations';\nimport {MatExpansionPanel} from './expansion-panel';\n\n\n/**\n * `<mat-expansion-panel-header>`\n *\n * This component corresponds to the header element of an `<mat-expansion-panel>`.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-expansion-panel-header',\n  styleUrls: ['./expansion-panel-header.css'],\n  templateUrl: './expansion-panel-header.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  animations: [\n    matExpansionAnimations.indicatorRotate,\n    matExpansionAnimations.expansionHeaderHeight\n  ],\n  host: {\n    'class': 'mat-expansion-panel-header',\n    'role': 'button',\n    '[attr.id]': 'panel._headerId',\n    '[attr.tabindex]': 'disabled ? -1 : 0',\n    '[attr.aria-controls]': '_getPanelId()',\n    '[attr.aria-expanded]': '_isExpanded()',\n    '[attr.aria-disabled]': 'panel.disabled',\n    '[class.mat-expanded]': '_isExpanded()',\n    '(click)': '_toggle()',\n    '(keydown)': '_keydown($event)',\n    '[@expansionHeight]': `{\n        value: _getExpandedState(),\n        params: {\n          collapsedHeight: collapsedHeight,\n          expandedHeight: expandedHeight\n        }\n    }`,\n  },\n})\nexport class MatExpansionPanelHeader implements OnDestroy, FocusableOption {\n  private _parentChangeSubscription = Subscription.EMPTY;\n\n  constructor(\n      @Host() public panel: MatExpansionPanel,\n      private _element: ElementRef,\n      private _focusMonitor: FocusMonitor,\n      private _changeDetectorRef: ChangeDetectorRef) {\n\n    const accordionHideToggleChange = panel.accordion ?\n      panel.accordion._stateChanges.pipe(filter(changes => !!changes.hideToggle)) : EMPTY;\n\n    // Since the toggle state depends on an @Input on the panel, we\n    // need to subscribe and trigger change detection manually.\n    this._parentChangeSubscription = merge(\n      panel.opened,\n      panel.closed,\n      accordionHideToggleChange,\n      panel._inputChanges.pipe(filter(changes => !!(changes.hideToggle || changes.disabled)))\n    )\n    .subscribe(() => this._changeDetectorRef.markForCheck());\n\n    // Avoids focus being lost if the panel contained the focused element and was closed.\n    panel.closed\n      .pipe(filter(() => panel._containsFocus()))\n      .subscribe(() => _focusMonitor.focusVia(_element.nativeElement, 'program'));\n\n    _focusMonitor.monitor(_element).subscribe(origin => {\n      if (origin && panel.accordion) {\n        panel.accordion._handleHeaderFocus(this);\n      }\n    });\n  }\n\n  /** Height of the header while the panel is expanded. */\n  @Input() expandedHeight: string;\n\n  /** Height of the header while the panel is collapsed. */\n  @Input() collapsedHeight: string;\n\n  /**\n   * Whether the associated panel is disabled. Implemented as a part of `FocusableOption`.\n   * @docs-private\n   */\n  get disabled() {\n    return this.panel.disabled;\n  }\n\n  /** Toggles the expanded state of the panel. */\n  _toggle(): void {\n    this.panel.toggle();\n  }\n\n  /** Gets whether the panel is expanded. */\n  _isExpanded(): boolean {\n    return this.panel.expanded;\n  }\n\n  /** Gets the expanded state string of the panel. */\n  _getExpandedState(): string {\n    return this.panel._getExpandedState();\n  }\n\n  /** Gets the panel id. */\n  _getPanelId(): string {\n    return this.panel.id;\n  }\n\n  /** Gets whether the expand indicator should be shown. */\n  _showToggle(): boolean {\n    return !this.panel.hideToggle && !this.panel.disabled;\n  }\n\n  /** Handle keydown event calling to toggle() if appropriate. */\n  _keydown(event: KeyboardEvent) {\n    switch (event.keyCode) {\n      // Toggle for space and enter keys.\n      case SPACE:\n      case ENTER:\n        event.preventDefault();\n        this._toggle();\n        break;\n      default:\n        if (this.panel.accordion) {\n          this.panel.accordion._handleHeaderKeydown(event);\n        }\n\n        return;\n    }\n  }\n\n  /**\n   * Focuses the panel header. Implemented as a part of `FocusableOption`.\n   * @param origin Origin of the action that triggered the focus.\n   * @docs-private\n   */\n  focus(origin: FocusOrigin = 'program') {\n    this._focusMonitor.focusVia(this._element.nativeElement, origin);\n  }\n\n  ngOnDestroy() {\n    this._parentChangeSubscription.unsubscribe();\n    this._focusMonitor.stopMonitoring(this._element);\n  }\n}\n\n/**\n * `<mat-panel-description>`\n *\n * This directive is to be used inside of the MatExpansionPanelHeader component.\n */\n@Directive({\n  selector: 'mat-panel-description',\n  host: {\n    class: 'mat-expansion-panel-header-description'\n  }\n})\nexport class MatExpansionPanelDescription {}\n\n/**\n * `<mat-panel-title>`\n *\n * This directive is to be used inside of the MatExpansionPanelHeader component.\n */\n@Directive({\n  selector: 'mat-panel-title',\n  host: {\n    class: 'mat-expansion-panel-header-title'\n  }\n})\nexport class MatExpansionPanelTitle {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  EventEmitter,\n  Input,\n  Output,\n  ViewEncapsulation,\n  NgZone,\n} from '@angular/core';\nimport {take} from 'rxjs/operators';\n\n/**\n * An internal class that represents the data corresponding to a single calendar cell.\n * @docs-private\n */\nexport class MatCalendarCell {\n  constructor(public value: number,\n              public displayValue: string,\n              public ariaLabel: string,\n              public enabled: boolean) {}\n}\n\n\n/**\n * An internal component used to display calendar data in a table.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: '[mat-calendar-body]',\n  templateUrl: 'calendar-body.html',\n  styleUrls: ['calendar-body.css'],\n  host: {\n    'class': 'mat-calendar-body',\n    'role': 'grid',\n    'aria-readonly': 'true'\n  },\n  exportAs: 'matCalendarBody',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatCalendarBody {\n  /** The label for the table. (e.g. \"Jan 2017\"). */\n  @Input() label: string;\n\n  /** The cells to display in the table. */\n  @Input() rows: MatCalendarCell[][];\n\n  /** The value in the table that corresponds to today. */\n  @Input() todayValue: number;\n\n  /** The value in the table that is currently selected. */\n  @Input() selectedValue: number;\n\n  /** The minimum number of free cells needed to fit the label in the first row. */\n  @Input() labelMinRequiredCells: number;\n\n  /** The number of columns in the table. */\n  @Input() numCols = 7;\n\n  /** Whether to allow selection of disabled cells. */\n  @Input() allowDisabledSelection = false;\n\n  /** The cell number of the active cell in the table. */\n  @Input() activeCell = 0;\n\n  /**\n   * The aspect ratio (width / height) to use for the cells in the table. This aspect ratio will be\n   * maintained even as the table resizes.\n   */\n  @Input() cellAspectRatio = 1;\n\n  /** Emits when a new value is selected. */\n  @Output() readonly selectedValueChange: EventEmitter<number> = new EventEmitter<number>();\n\n  constructor(private _elementRef: ElementRef, private _ngZone: NgZone) { }\n\n  _cellClicked(cell: MatCalendarCell): void {\n    if (!this.allowDisabledSelection && !cell.enabled) {\n      return;\n    }\n    this.selectedValueChange.emit(cell.value);\n  }\n\n  /** The number of blank cells to put at the beginning for the first row. */\n  get _firstRowOffset(): number {\n    return this.rows && this.rows.length && this.rows[0].length ?\n        this.numCols - this.rows[0].length : 0;\n  }\n\n  _isActiveCell(rowIndex: number, colIndex: number): boolean {\n    let cellNumber = rowIndex * this.numCols + colIndex;\n\n    // Account for the fact that the first row may not have as many cells.\n    if (rowIndex) {\n      cellNumber -= this._firstRowOffset;\n    }\n\n    return cellNumber == this.activeCell;\n  }\n\n  /** Focuses the active cell after the microtask queue is empty. */\n  _focusActiveCell() {\n    this._ngZone.runOutsideAngular(() => {\n      this._ngZone.onStable.asObservable().pipe(take(1)).subscribe(() => {\n        this._elementRef.nativeElement.querySelector('.mat-calendar-body-active').focus();\n      });\n    });\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  DOWN_ARROW,\n  END,\n  ENTER,\n  HOME,\n  LEFT_ARROW,\n  PAGE_DOWN,\n  PAGE_UP,\n  RIGHT_ARROW,\n  UP_ARROW,\n} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  EventEmitter,\n  Inject,\n  Input,\n  Optional,\n  Output,\n  ViewEncapsulation,\n  ViewChild,\n} from '@angular/core';\nimport {DateAdapter, MAT_DATE_FORMATS, MatDateFormats} from '@angular/material/core';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {MatCalendarBody, MatCalendarCell} from './calendar-body';\nimport {createMissingDateImplError} from './datepicker-errors';\n\n\nconst DAYS_PER_WEEK = 7;\n\n\n/**\n * An internal component used to display a single month in the datepicker.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-month-view',\n  templateUrl: 'month-view.html',\n  exportAs: 'matMonthView',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class MatMonthView<D> implements AfterContentInit {\n  /**\n   * The date to display in this month view (everything other than the month and year is ignored).\n   */\n  @Input()\n  get activeDate(): D { return this._activeDate; }\n  set activeDate(value: D) {\n    const oldActiveDate = this._activeDate;\n    const validDate =\n        this._getValidDateOrNull(this._dateAdapter.deserialize(value)) || this._dateAdapter.today();\n    this._activeDate = this._dateAdapter.clampDate(validDate, this.minDate, this.maxDate);\n    if (!this._hasSameMonthAndYear(oldActiveDate, this._activeDate)) {\n      this._init();\n    }\n  }\n  private _activeDate: D;\n\n  /** The currently selected date. */\n  @Input()\n  get selected(): D | null { return this._selected; }\n  set selected(value: D | null) {\n    this._selected = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n    this._selectedDate = this._getDateInCurrentMonth(this._selected);\n  }\n  private _selected: D | null;\n\n  /** The minimum selectable date. */\n  @Input()\n  get minDate(): D | null { return this._minDate; }\n  set minDate(value: D | null) {\n    this._minDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _minDate: D | null;\n\n  /** The maximum selectable date. */\n  @Input()\n  get maxDate(): D | null { return this._maxDate; }\n  set maxDate(value: D | null) {\n    this._maxDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _maxDate: D | null;\n\n  /** A function used to filter which dates are selectable. */\n  @Input() dateFilter: (date: D) => boolean;\n\n  /** Emits when a new date is selected. */\n  @Output() readonly selectedChange: EventEmitter<D | null> = new EventEmitter<D | null>();\n\n  /** Emits when any date is selected. */\n  @Output() readonly _userSelection: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Emits when any date is activated. */\n  @Output() readonly activeDateChange: EventEmitter<D> = new EventEmitter<D>();\n\n  /** The body of calendar table */\n  @ViewChild(MatCalendarBody) _matCalendarBody: MatCalendarBody;\n\n  /** The label for this month (e.g. \"January 2017\"). */\n  _monthLabel: string;\n\n  /** Grid of calendar cells representing the dates of the month. */\n  _weeks: MatCalendarCell[][];\n\n  /** The number of blank cells in the first row before the 1st of the month. */\n  _firstWeekOffset: number;\n\n  /**\n   * The date of the month that the currently selected Date falls on.\n   * Null if the currently selected Date is in another month.\n   */\n  _selectedDate: number | null;\n\n  /** The date of the month that today falls on. Null if today is in another month. */\n  _todayDate: number | null;\n\n  /** The names of the weekdays. */\n  _weekdays: {long: string, narrow: string}[];\n\n  constructor(private _changeDetectorRef: ChangeDetectorRef,\n              @Optional() @Inject(MAT_DATE_FORMATS) private _dateFormats: MatDateFormats,\n              @Optional() public _dateAdapter: DateAdapter<D>,\n              @Optional() private _dir?: Directionality) {\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n    if (!this._dateFormats) {\n      throw createMissingDateImplError('MAT_DATE_FORMATS');\n    }\n\n    const firstDayOfWeek = this._dateAdapter.getFirstDayOfWeek();\n    const narrowWeekdays = this._dateAdapter.getDayOfWeekNames('narrow');\n    const longWeekdays = this._dateAdapter.getDayOfWeekNames('long');\n\n    // Rotate the labels for days of the week based on the configured first day of the week.\n    let weekdays = longWeekdays.map((long, i) => {\n      return {long, narrow: narrowWeekdays[i]};\n    });\n    this._weekdays = weekdays.slice(firstDayOfWeek).concat(weekdays.slice(0, firstDayOfWeek));\n\n    this._activeDate = this._dateAdapter.today();\n  }\n\n  ngAfterContentInit() {\n    this._init();\n  }\n\n  /** Handles when a new date is selected. */\n  _dateSelected(date: number) {\n    if (this._selectedDate != date) {\n      const selectedYear = this._dateAdapter.getYear(this.activeDate);\n      const selectedMonth = this._dateAdapter.getMonth(this.activeDate);\n      const selectedDate = this._dateAdapter.createDate(selectedYear, selectedMonth, date);\n\n      this.selectedChange.emit(selectedDate);\n    }\n\n    this._userSelection.emit();\n  }\n\n  /** Handles keydown events on the calendar body when calendar is in month view. */\n  _handleCalendarBodyKeydown(event: KeyboardEvent): void {\n    // TODO(mmalerba): We currently allow keyboard navigation to disabled dates, but just prevent\n    // disabled ones from being selected. This may not be ideal, we should look into whether\n    // navigation should skip over disabled dates, and if so, how to implement that efficiently.\n\n    const oldActiveDate = this._activeDate;\n    const isRtl = this._isRtl();\n\n    switch (event.keyCode) {\n      case LEFT_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate, isRtl ? 1 : -1);\n        break;\n      case RIGHT_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate, isRtl ? -1 : 1);\n        break;\n      case UP_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate, -7);\n        break;\n      case DOWN_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate, 7);\n        break;\n      case HOME:\n        this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate,\n            1 - this._dateAdapter.getDate(this._activeDate));\n        break;\n      case END:\n        this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate,\n            (this._dateAdapter.getNumDaysInMonth(this._activeDate) -\n              this._dateAdapter.getDate(this._activeDate)));\n        break;\n      case PAGE_UP:\n        this.activeDate = event.altKey ?\n            this._dateAdapter.addCalendarYears(this._activeDate, -1) :\n            this._dateAdapter.addCalendarMonths(this._activeDate, -1);\n        break;\n      case PAGE_DOWN:\n        this.activeDate = event.altKey ?\n            this._dateAdapter.addCalendarYears(this._activeDate, 1) :\n            this._dateAdapter.addCalendarMonths(this._activeDate, 1);\n        break;\n      case ENTER:\n        if (!this.dateFilter || this.dateFilter(this._activeDate)) {\n          this._dateSelected(this._dateAdapter.getDate(this._activeDate));\n          this._userSelection.emit();\n          // Prevent unexpected default actions such as form submission.\n          event.preventDefault();\n        }\n        return;\n      default:\n        // Don't prevent default or focus active cell on keys that we don't explicitly handle.\n        return;\n    }\n\n    if (this._dateAdapter.compareDate(oldActiveDate, this.activeDate)) {\n      this.activeDateChange.emit(this.activeDate);\n    }\n\n    this._focusActiveCell();\n    // Prevent unexpected default actions such as form submission.\n    event.preventDefault();\n  }\n\n  /** Initializes this month view. */\n  _init() {\n    this._selectedDate = this._getDateInCurrentMonth(this.selected);\n    this._todayDate = this._getDateInCurrentMonth(this._dateAdapter.today());\n    this._monthLabel =\n        this._dateAdapter.getMonthNames('short')[this._dateAdapter.getMonth(this.activeDate)]\n            .toLocaleUpperCase();\n\n    let firstOfMonth = this._dateAdapter.createDate(this._dateAdapter.getYear(this.activeDate),\n        this._dateAdapter.getMonth(this.activeDate), 1);\n    this._firstWeekOffset =\n        (DAYS_PER_WEEK + this._dateAdapter.getDayOfWeek(firstOfMonth) -\n         this._dateAdapter.getFirstDayOfWeek()) % DAYS_PER_WEEK;\n\n    this._createWeekCells();\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Focuses the active cell after the microtask queue is empty. */\n  _focusActiveCell() {\n    this._matCalendarBody._focusActiveCell();\n  }\n\n  /** Creates MatCalendarCells for the dates in this month. */\n  private _createWeekCells() {\n    const daysInMonth = this._dateAdapter.getNumDaysInMonth(this.activeDate);\n    const dateNames = this._dateAdapter.getDateNames();\n    this._weeks = [[]];\n    for (let i = 0, cell = this._firstWeekOffset; i < daysInMonth; i++, cell++) {\n      if (cell == DAYS_PER_WEEK) {\n        this._weeks.push([]);\n        cell = 0;\n      }\n      const date = this._dateAdapter.createDate(\n            this._dateAdapter.getYear(this.activeDate),\n            this._dateAdapter.getMonth(this.activeDate), i + 1);\n      const enabled = this._shouldEnableDate(date);\n      const ariaLabel = this._dateAdapter.format(date, this._dateFormats.display.dateA11yLabel);\n      this._weeks[this._weeks.length - 1]\n          .push(new MatCalendarCell(i + 1, dateNames[i], ariaLabel, enabled));\n    }\n  }\n\n  /** Date filter for the month */\n  private _shouldEnableDate(date: D): boolean {\n    return !!date &&\n        (!this.dateFilter || this.dateFilter(date)) &&\n        (!this.minDate || this._dateAdapter.compareDate(date, this.minDate) >= 0) &&\n        (!this.maxDate || this._dateAdapter.compareDate(date, this.maxDate) <= 0);\n  }\n\n  /**\n   * Gets the date in this month that the given Date falls on.\n   * Returns null if the given Date is in another month.\n   */\n  private _getDateInCurrentMonth(date: D | null): number | null {\n    return date && this._hasSameMonthAndYear(date, this.activeDate) ?\n        this._dateAdapter.getDate(date) : null;\n  }\n\n  /** Checks whether the 2 dates are non-null and fall within the same month of the same year. */\n  private _hasSameMonthAndYear(d1: D | null, d2: D | null): boolean {\n    return !!(d1 && d2 && this._dateAdapter.getMonth(d1) == this._dateAdapter.getMonth(d2) &&\n              this._dateAdapter.getYear(d1) == this._dateAdapter.getYear(d2));\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n\n  /** Determines whether the user has the RTL layout direction. */\n  private _isRtl() {\n    return this._dir && this._dir.value === 'rtl';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  DOWN_ARROW,\n  END,\n  ENTER,\n  HOME,\n  LEFT_ARROW,\n  PAGE_DOWN,\n  PAGE_UP,\n  RIGHT_ARROW,\n  UP_ARROW,\n} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  EventEmitter,\n  Input,\n  Optional,\n  Output,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {DateAdapter} from '@angular/material/core';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {MatCalendarBody, MatCalendarCell} from './calendar-body';\nimport {createMissingDateImplError} from './datepicker-errors';\n\nexport const yearsPerPage = 24;\n\nexport const yearsPerRow = 4;\n\n\n/**\n * An internal component used to display a year selector in the datepicker.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-multi-year-view',\n  templateUrl: 'multi-year-view.html',\n  exportAs: 'matMultiYearView',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class MatMultiYearView<D> implements AfterContentInit {\n  /** The date to display in this multi-year view (everything other than the year is ignored). */\n  @Input()\n  get activeDate(): D { return this._activeDate; }\n  set activeDate(value: D) {\n    let oldActiveDate = this._activeDate;\n    const validDate =\n        this._getValidDateOrNull(this._dateAdapter.deserialize(value)) || this._dateAdapter.today();\n    this._activeDate = this._dateAdapter.clampDate(validDate, this.minDate, this.maxDate);\n    if (Math.floor(this._dateAdapter.getYear(oldActiveDate) / yearsPerPage) !=\n        Math.floor(this._dateAdapter.getYear(this._activeDate) / yearsPerPage)) {\n      this._init();\n    }\n  }\n  private _activeDate: D;\n\n  /** The currently selected date. */\n  @Input()\n  get selected(): D | null { return this._selected; }\n  set selected(value: D | null) {\n    this._selected = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n    this._selectedYear = this._selected && this._dateAdapter.getYear(this._selected);\n  }\n  private _selected: D | null;\n\n  /** The minimum selectable date. */\n  @Input()\n  get minDate(): D | null { return this._minDate; }\n  set minDate(value: D | null) {\n    this._minDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _minDate: D | null;\n\n  /** The maximum selectable date. */\n  @Input()\n  get maxDate(): D | null { return this._maxDate; }\n  set maxDate(value: D | null) {\n    this._maxDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _maxDate: D | null;\n\n  /** A function used to filter which dates are selectable. */\n  @Input() dateFilter: (date: D) => boolean;\n\n  /** Emits when a new year is selected. */\n  @Output() readonly selectedChange: EventEmitter<D> = new EventEmitter<D>();\n\n  /** Emits the selected year. This doesn't imply a change on the selected date */\n  @Output() readonly yearSelected: EventEmitter<D> = new EventEmitter<D>();\n\n  /** Emits when any date is activated. */\n  @Output() readonly activeDateChange: EventEmitter<D> = new EventEmitter<D>();\n\n  /** The body of calendar table */\n  @ViewChild(MatCalendarBody) _matCalendarBody: MatCalendarBody;\n\n  /** Grid of calendar cells representing the currently displayed years. */\n  _years: MatCalendarCell[][];\n\n  /** The year that today falls on. */\n  _todayYear: number;\n\n  /** The year of the selected date. Null if the selected date is null. */\n  _selectedYear: number | null;\n\n  constructor(private _changeDetectorRef: ChangeDetectorRef,\n              @Optional() public _dateAdapter: DateAdapter<D>,\n              @Optional() private _dir?: Directionality) {\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n\n    this._activeDate = this._dateAdapter.today();\n  }\n\n  ngAfterContentInit() {\n    this._init();\n  }\n\n  /** Initializes this multi-year view. */\n  _init() {\n    this._todayYear = this._dateAdapter.getYear(this._dateAdapter.today());\n    let activeYear = this._dateAdapter.getYear(this._activeDate);\n    let activeOffset = activeYear % yearsPerPage;\n    this._years = [];\n    for (let i = 0, row: number[] = []; i < yearsPerPage; i++) {\n      row.push(activeYear - activeOffset + i);\n      if (row.length == yearsPerRow) {\n        this._years.push(row.map(year => this._createCellForYear(year)));\n        row = [];\n      }\n    }\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Handles when a new year is selected. */\n  _yearSelected(year: number) {\n    this.yearSelected.emit(this._dateAdapter.createDate(year, 0, 1));\n    let month = this._dateAdapter.getMonth(this.activeDate);\n    let daysInMonth =\n        this._dateAdapter.getNumDaysInMonth(this._dateAdapter.createDate(year, month, 1));\n    this.selectedChange.emit(this._dateAdapter.createDate(year, month,\n        Math.min(this._dateAdapter.getDate(this.activeDate), daysInMonth)));\n  }\n\n  /** Handles keydown events on the calendar body when calendar is in multi-year view. */\n  _handleCalendarBodyKeydown(event: KeyboardEvent): void {\n    // TODO(mmalerba): We currently allow keyboard navigation to disabled dates, but just prevent\n    // disabled ones from being selected. This may not be ideal, we should look into whether\n    // navigation should skip over disabled dates, and if so, how to implement that efficiently.\n\n    const oldActiveDate = this._activeDate;\n    const isRtl = this._isRtl();\n\n    switch (event.keyCode) {\n      case LEFT_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate, isRtl ? 1 : -1);\n        break;\n      case RIGHT_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate, isRtl ? -1 : 1);\n        break;\n      case UP_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate, -yearsPerRow);\n        break;\n      case DOWN_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate, yearsPerRow);\n        break;\n      case HOME:\n        this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate,\n            -this._dateAdapter.getYear(this._activeDate) % yearsPerPage);\n        break;\n      case END:\n        this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate,\n            yearsPerPage - this._dateAdapter.getYear(this._activeDate) % yearsPerPage - 1);\n        break;\n      case PAGE_UP:\n        this.activeDate =\n            this._dateAdapter.addCalendarYears(\n                this._activeDate, event.altKey ? -yearsPerPage * 10 : -yearsPerPage);\n        break;\n      case PAGE_DOWN:\n        this.activeDate =\n            this._dateAdapter.addCalendarYears(\n                this._activeDate, event.altKey ? yearsPerPage * 10 : yearsPerPage);\n        break;\n      case ENTER:\n        this._yearSelected(this._dateAdapter.getYear(this._activeDate));\n        break;\n      default:\n        // Don't prevent default or focus active cell on keys that we don't explicitly handle.\n        return;\n    }\n\n    if (this._dateAdapter.compareDate(oldActiveDate, this.activeDate)) {\n      this.activeDateChange.emit(this.activeDate);\n    }\n\n    this._focusActiveCell();\n    // Prevent unexpected default actions such as form submission.\n    event.preventDefault();\n  }\n\n  _getActiveCell(): number {\n    return this._dateAdapter.getYear(this.activeDate) % yearsPerPage;\n  }\n\n  /** Focuses the active cell after the microtask queue is empty. */\n  _focusActiveCell() {\n    this._matCalendarBody._focusActiveCell();\n  }\n\n  /** Creates an MatCalendarCell for the given year. */\n  private _createCellForYear(year: number) {\n    let yearName = this._dateAdapter.getYearName(this._dateAdapter.createDate(year, 0, 1));\n    return new MatCalendarCell(year, yearName, yearName, this._shouldEnableYear(year));\n  }\n\n  /** Whether the given year is enabled. */\n  private _shouldEnableYear(year: number) {\n    // disable if the year is greater than maxDate lower than minDate\n    if (year === undefined || year === null ||\n        (this.maxDate && year > this._dateAdapter.getYear(this.maxDate)) ||\n        (this.minDate && year < this._dateAdapter.getYear(this.minDate))) {\n      return false;\n    }\n\n    // enable if it reaches here and there's no filter defined\n    if (!this.dateFilter) {\n      return true;\n    }\n\n    const firstOfYear = this._dateAdapter.createDate(year, 0, 1);\n\n    // If any date in the year is enabled count the year as enabled.\n    for (let date = firstOfYear; this._dateAdapter.getYear(date) == year;\n      date = this._dateAdapter.addCalendarDays(date, 1)) {\n      if (this.dateFilter(date)) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n\n  /** Determines whether the user has the RTL layout direction. */\n  private _isRtl() {\n    return this._dir && this._dir.value === 'rtl';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  DOWN_ARROW,\n  END,\n  ENTER,\n  HOME,\n  LEFT_ARROW,\n  PAGE_DOWN,\n  PAGE_UP,\n  RIGHT_ARROW,\n  UP_ARROW,\n} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  EventEmitter,\n  Inject,\n  Input,\n  Optional,\n  Output,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {DateAdapter, MAT_DATE_FORMATS, MatDateFormats} from '@angular/material/core';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {MatCalendarBody, MatCalendarCell} from './calendar-body';\nimport {createMissingDateImplError} from './datepicker-errors';\n\n/**\n * An internal component used to display a single year in the datepicker.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-year-view',\n  templateUrl: 'year-view.html',\n  exportAs: 'matYearView',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class MatYearView<D> implements AfterContentInit {\n  /** The date to display in this year view (everything other than the year is ignored). */\n  @Input()\n  get activeDate(): D { return this._activeDate; }\n  set activeDate(value: D) {\n    let oldActiveDate = this._activeDate;\n    const validDate =\n        this._getValidDateOrNull(this._dateAdapter.deserialize(value)) || this._dateAdapter.today();\n    this._activeDate = this._dateAdapter.clampDate(validDate, this.minDate, this.maxDate);\n    if (this._dateAdapter.getYear(oldActiveDate) !== this._dateAdapter.getYear(this._activeDate)) {\n      this._init();\n    }\n  }\n  private _activeDate: D;\n\n  /** The currently selected date. */\n  @Input()\n  get selected(): D | null { return this._selected; }\n  set selected(value: D | null) {\n    this._selected = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n    this._selectedMonth = this._getMonthInCurrentYear(this._selected);\n  }\n  private _selected: D | null;\n\n  /** The minimum selectable date. */\n  @Input()\n  get minDate(): D | null { return this._minDate; }\n  set minDate(value: D | null) {\n    this._minDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _minDate: D | null;\n\n  /** The maximum selectable date. */\n  @Input()\n  get maxDate(): D | null { return this._maxDate; }\n  set maxDate(value: D | null) {\n    this._maxDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _maxDate: D | null;\n\n  /** A function used to filter which dates are selectable. */\n  @Input() dateFilter: (date: D) => boolean;\n\n  /** Emits when a new month is selected. */\n  @Output() readonly selectedChange: EventEmitter<D> = new EventEmitter<D>();\n\n  /** Emits the selected month. This doesn't imply a change on the selected date */\n  @Output() readonly monthSelected: EventEmitter<D> = new EventEmitter<D>();\n\n  /** Emits when any date is activated. */\n  @Output() readonly activeDateChange: EventEmitter<D> = new EventEmitter<D>();\n\n  /** The body of calendar table */\n  @ViewChild(MatCalendarBody) _matCalendarBody: MatCalendarBody;\n\n  /** Grid of calendar cells representing the months of the year. */\n  _months: MatCalendarCell[][];\n\n  /** The label for this year (e.g. \"2017\"). */\n  _yearLabel: string;\n\n  /** The month in this year that today falls on. Null if today is in a different year. */\n  _todayMonth: number | null;\n\n  /**\n   * The month in this year that the selected Date falls on.\n   * Null if the selected Date is in a different year.\n   */\n  _selectedMonth: number | null;\n\n  constructor(private _changeDetectorRef: ChangeDetectorRef,\n              @Optional() @Inject(MAT_DATE_FORMATS) private _dateFormats: MatDateFormats,\n              @Optional() public _dateAdapter: DateAdapter<D>,\n              @Optional() private _dir?: Directionality) {\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n    if (!this._dateFormats) {\n      throw createMissingDateImplError('MAT_DATE_FORMATS');\n    }\n\n    this._activeDate = this._dateAdapter.today();\n  }\n\n  ngAfterContentInit() {\n    this._init();\n  }\n\n  /** Handles when a new month is selected. */\n  _monthSelected(month: number) {\n    const normalizedDate =\n          this._dateAdapter.createDate(this._dateAdapter.getYear(this.activeDate), month, 1);\n\n    this.monthSelected.emit(normalizedDate);\n\n    const daysInMonth = this._dateAdapter.getNumDaysInMonth(normalizedDate);\n\n    this.selectedChange.emit(this._dateAdapter.createDate(\n        this._dateAdapter.getYear(this.activeDate), month,\n        Math.min(this._dateAdapter.getDate(this.activeDate), daysInMonth)));\n  }\n\n  /** Handles keydown events on the calendar body when calendar is in year view. */\n  _handleCalendarBodyKeydown(event: KeyboardEvent): void {\n    // TODO(mmalerba): We currently allow keyboard navigation to disabled dates, but just prevent\n    // disabled ones from being selected. This may not be ideal, we should look into whether\n    // navigation should skip over disabled dates, and if so, how to implement that efficiently.\n\n    const oldActiveDate = this._activeDate;\n    const isRtl = this._isRtl();\n\n    switch (event.keyCode) {\n      case LEFT_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate, isRtl ? 1 : -1);\n        break;\n      case RIGHT_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate, isRtl ? -1 : 1);\n        break;\n      case UP_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate, -4);\n        break;\n      case DOWN_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate, 4);\n        break;\n      case HOME:\n        this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate,\n            -this._dateAdapter.getMonth(this._activeDate));\n        break;\n      case END:\n        this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate,\n            11 - this._dateAdapter.getMonth(this._activeDate));\n        break;\n      case PAGE_UP:\n        this.activeDate =\n            this._dateAdapter.addCalendarYears(this._activeDate, event.altKey ? -10 : -1);\n        break;\n      case PAGE_DOWN:\n        this.activeDate =\n            this._dateAdapter.addCalendarYears(this._activeDate, event.altKey ? 10 : 1);\n        break;\n      case ENTER:\n        this._monthSelected(this._dateAdapter.getMonth(this._activeDate));\n        break;\n      default:\n        // Don't prevent default or focus active cell on keys that we don't explicitly handle.\n        return;\n    }\n\n    if (this._dateAdapter.compareDate(oldActiveDate, this.activeDate)) {\n      this.activeDateChange.emit(this.activeDate);\n    }\n\n    this._focusActiveCell();\n    // Prevent unexpected default actions such as form submission.\n    event.preventDefault();\n  }\n\n  /** Initializes this year view. */\n  _init() {\n    this._selectedMonth = this._getMonthInCurrentYear(this.selected);\n    this._todayMonth = this._getMonthInCurrentYear(this._dateAdapter.today());\n    this._yearLabel = this._dateAdapter.getYearName(this.activeDate);\n\n    let monthNames = this._dateAdapter.getMonthNames('short');\n    // First row of months only contains 5 elements so we can fit the year label on the same row.\n    this._months = [[0, 1, 2, 3], [4, 5, 6, 7], [8, 9, 10, 11]].map(row => row.map(\n        month => this._createCellForMonth(month, monthNames[month])));\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Focuses the active cell after the microtask queue is empty. */\n  _focusActiveCell() {\n    this._matCalendarBody._focusActiveCell();\n  }\n\n  /**\n   * Gets the month in this year that the given Date falls on.\n   * Returns null if the given Date is in another year.\n   */\n  private _getMonthInCurrentYear(date: D | null) {\n    return date && this._dateAdapter.getYear(date) == this._dateAdapter.getYear(this.activeDate) ?\n        this._dateAdapter.getMonth(date) : null;\n  }\n\n  /** Creates an MatCalendarCell for the given month. */\n  private _createCellForMonth(month: number, monthName: string) {\n    let ariaLabel = this._dateAdapter.format(\n        this._dateAdapter.createDate(this._dateAdapter.getYear(this.activeDate), month, 1),\n        this._dateFormats.display.monthYearA11yLabel);\n    return new MatCalendarCell(\n        month, monthName.toLocaleUpperCase(), ariaLabel, this._shouldEnableMonth(month));\n  }\n\n  /** Whether the given month is enabled. */\n  private _shouldEnableMonth(month: number) {\n\n    const activeYear = this._dateAdapter.getYear(this.activeDate);\n\n    if (month === undefined || month === null ||\n        this._isYearAndMonthAfterMaxDate(activeYear, month) ||\n        this._isYearAndMonthBeforeMinDate(activeYear, month)) {\n      return false;\n    }\n\n    if (!this.dateFilter) {\n      return true;\n    }\n\n    const firstOfMonth = this._dateAdapter.createDate(activeYear, month, 1);\n\n    // If any date in the month is enabled count the month as enabled.\n    for (let date = firstOfMonth; this._dateAdapter.getMonth(date) == month;\n         date = this._dateAdapter.addCalendarDays(date, 1)) {\n      if (this.dateFilter(date)) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  /**\n   * Tests whether the combination month/year is after this.maxDate, considering\n   * just the month and year of this.maxDate\n   */\n  private _isYearAndMonthAfterMaxDate(year: number, month: number) {\n    if (this.maxDate) {\n      const maxYear = this._dateAdapter.getYear(this.maxDate);\n      const maxMonth = this._dateAdapter.getMonth(this.maxDate);\n\n      return year > maxYear || (year === maxYear && month > maxMonth);\n    }\n\n    return false;\n  }\n\n  /**\n   * Tests whether the combination month/year is before this.minDate, considering\n   * just the month and year of this.minDate\n   */\n  private _isYearAndMonthBeforeMinDate(year: number, month: number) {\n    if (this.minDate) {\n      const minYear = this._dateAdapter.getYear(this.minDate);\n      const minMonth = this._dateAdapter.getMonth(this.minDate);\n\n      return year < minYear || (year === minYear && month < minMonth);\n    }\n\n    return false;\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n\n  /** Determines whether the user has the RTL layout direction. */\n  private _isRtl() {\n    return this._dir && this._dir.value === 'rtl';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusKeyManager} from '@angular/cdk/a11y';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {SelectionModel} from '@angular/cdk/collections';\nimport {BACKSPACE, HOME, END} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  DoCheck,\n  ElementRef,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Output,\n  QueryList,\n  Self,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {ControlValueAccessor, FormGroupDirective, NgControl, NgForm} from '@angular/forms';\nimport {CanUpdateErrorState, ErrorStateMatcher, mixinErrorState} from '@angular/material/core';\nimport {MatFormFieldControl} from '@angular/material/form-field';\nimport {merge, Observable, Subject, Subscription} from 'rxjs';\nimport {startWith, takeUntil} from 'rxjs/operators';\nimport {MatChip, MatChipEvent, MatChipSelectionChange} from './chip';\nimport {MatChipInput} from './chip-input';\n\n\n// Boilerplate for applying mixins to MatChipList.\n/** @docs-private */\nexport class MatChipListBase {\n  constructor(public _defaultErrorStateMatcher: ErrorStateMatcher,\n              public _parentForm: NgForm,\n              public _parentFormGroup: FormGroupDirective,\n              /** @docs-private */\n              public ngControl: NgControl) {}\n}\nexport const _MatChipListMixinBase = mixinErrorState(MatChipListBase);\n\n\n// Increasing integer for generating unique ids for chip-list components.\nlet nextUniqueId = 0;\n\n/** Change event object that is emitted when the chip list value has changed. */\nexport class MatChipListChange {\n  constructor(\n    /** Chip list that emitted the event. */\n    public source: MatChipList,\n    /** Value of the chip list when the event was emitted. */\n    public value: any) { }\n}\n\n\n/**\n * A material design chips component (named ChipList for it's similarity to the List component).\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-chip-list',\n  template: `<div class=\"mat-chip-list-wrapper\"><ng-content></ng-content></div>`,\n  exportAs: 'matChipList',\n  host: {\n    '[attr.tabindex]': 'disabled ? null : _tabIndex',\n    '[attr.aria-describedby]': '_ariaDescribedby || null',\n    '[attr.aria-required]': 'required.toString()',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.aria-invalid]': 'errorState',\n    '[attr.aria-multiselectable]': 'multiple',\n    '[attr.role]': 'role',\n    '[class.mat-chip-list-disabled]': 'disabled',\n    '[class.mat-chip-list-invalid]': 'errorState',\n    '[class.mat-chip-list-required]': 'required',\n    '[attr.aria-orientation]': 'ariaOrientation',\n    'class': 'mat-chip-list',\n    '(focus)': 'focus()',\n    '(blur)': '_blur()',\n    '(keydown)': '_keydown($event)',\n    '[id]': '_uid',\n  },\n  providers: [{provide: MatFormFieldControl, useExisting: MatChipList}],\n  styleUrls: ['chips.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class MatChipList extends _MatChipListMixinBase implements MatFormFieldControl<any>,\n  ControlValueAccessor, AfterContentInit, DoCheck, OnInit, OnDestroy, CanUpdateErrorState {\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  readonly controlType: string = 'mat-chip-list';\n\n  /**\n   * When a chip is destroyed, we store the index of the destroyed chip until the chips\n   * query list notifies about the update. This is necessary because we cannot determine an\n   * appropriate chip that should receive focus until the array of chips updated completely.\n   */\n  private _lastDestroyedChipIndex: number | null = null;\n\n  /** Subject that emits when the component has been destroyed. */\n  private _destroyed = new Subject<void>();\n\n  /** Subscription to focus changes in the chips. */\n  private _chipFocusSubscription: Subscription | null;\n\n  /** Subscription to blur changes in the chips. */\n  private _chipBlurSubscription: Subscription | null;\n\n  /** Subscription to selection changes in chips. */\n  private _chipSelectionSubscription: Subscription | null;\n\n  /** Subscription to remove changes in chips. */\n  private _chipRemoveSubscription: Subscription | null;\n\n  /** The chip input to add more chips */\n  protected _chipInput: MatChipInput;\n\n  /** Uid of the chip list */\n  _uid: string = `mat-chip-list-${nextUniqueId++}`;\n\n  /** The aria-describedby attribute on the chip list for improved a11y. */\n  _ariaDescribedby: string;\n\n  /** Tab index for the chip list. */\n  _tabIndex = 0;\n\n  /**\n   * User defined tab index.\n   * When it is not null, use user defined tab index. Otherwise use _tabIndex\n   */\n  _userTabIndex: number | null = null;\n\n  /** The FocusKeyManager which handles focus. */\n  _keyManager: FocusKeyManager<MatChip>;\n\n  /** Function when touched */\n  _onTouched = () => {};\n\n  /** Function when changed */\n  _onChange: (value: any) => void = () => {};\n\n  _selectionModel: SelectionModel<MatChip>;\n\n  /** The array of selected chips inside chip list. */\n  get selected(): MatChip[] | MatChip {\n    return this.multiple ? this._selectionModel.selected : this._selectionModel.selected[0];\n  }\n\n  /** The ARIA role applied to the chip list. */\n  get role(): string | null { return this.empty ? null : 'listbox'; }\n\n  /** An object used to control when error messages are shown. */\n  @Input() errorStateMatcher: ErrorStateMatcher;\n\n  /** Whether the user should be allowed to select multiple chips. */\n  @Input()\n  get multiple(): boolean { return this._multiple; }\n  set multiple(value: boolean) {\n    this._multiple = coerceBooleanProperty(value);\n  }\n  private _multiple: boolean = false;\n\n  /**\n   * A function to compare the option values with the selected values. The first argument\n   * is a value from an option. The second is a value from the selection. A boolean\n   * should be returned.\n   */\n  @Input()\n  get compareWith(): (o1: any, o2: any) => boolean { return this._compareWith; }\n  set compareWith(fn: (o1: any, o2: any) => boolean) {\n    this._compareWith = fn;\n    if (this._selectionModel) {\n      // A different comparator means the selection could change.\n      this._initializeSelection();\n    }\n  }\n  private _compareWith = (o1: any, o2: any) => o1 === o2;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get value(): any { return this._value; }\n  set value(value: any) {\n    this.writeValue(value);\n    this._value = value;\n  }\n  protected _value: any;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  get id(): string {\n    return this._chipInput ? this._chipInput.id : this._uid;\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get required(): boolean { return this._required; }\n  set required(value: boolean) {\n    this._required = coerceBooleanProperty(value);\n    this.stateChanges.next();\n  }\n  protected _required: boolean = false;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get placeholder(): string {\n    return this._chipInput ? this._chipInput.placeholder : this._placeholder;\n  }\n  set placeholder(value: string) {\n    this._placeholder = value;\n    this.stateChanges.next();\n  }\n  protected _placeholder: string;\n\n  /** Whether any chips or the matChipInput inside of this chip-list has focus. */\n  get focused(): boolean {\n    return (this._chipInput && this._chipInput.focused) || this.chips.some(chip => chip._hasFocus);\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  get empty(): boolean {\n    return (!this._chipInput || this._chipInput.empty) && this.chips.length === 0;\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  get shouldLabelFloat(): boolean { return !this.empty || this.focused; }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get disabled(): boolean { return this.ngControl ? !!this.ngControl.disabled : this._disabled; }\n  set disabled(value: boolean) {\n    this._disabled = coerceBooleanProperty(value);\n\n    if (this.chips) {\n      this.chips.forEach(chip => chip.disabled = this._disabled);\n    }\n  }\n  protected _disabled: boolean = false;\n\n  /** Orientation of the chip list. */\n  @Input('aria-orientation') ariaOrientation: 'horizontal' | 'vertical' = 'horizontal';\n\n  /**\n   * Whether or not this chip list is selectable. When a chip list is not selectable,\n   * the selected states for all the chips inside the chip list are always ignored.\n   */\n  @Input()\n  get selectable(): boolean { return this._selectable; }\n  set selectable(value: boolean) {\n    this._selectable = coerceBooleanProperty(value);\n\n    if (this.chips) {\n      this.chips.forEach(chip => chip.chipListSelectable = this._selectable);\n    }\n  }\n  protected _selectable: boolean = true;\n\n  @Input()\n  set tabIndex(value: number) {\n    this._userTabIndex = value;\n    this._tabIndex = value;\n  }\n\n  /** Combined stream of all of the child chips' selection change events. */\n  get chipSelectionChanges(): Observable<MatChipSelectionChange> {\n    return merge(...this.chips.map(chip => chip.selectionChange));\n  }\n\n  /** Combined stream of all of the child chips' focus change events. */\n  get chipFocusChanges(): Observable<MatChipEvent> {\n    return merge(...this.chips.map(chip => chip._onFocus));\n  }\n\n  /** Combined stream of all of the child chips' blur change events. */\n  get chipBlurChanges(): Observable<MatChipEvent> {\n    return merge(...this.chips.map(chip => chip._onBlur));\n  }\n\n  /** Combined stream of all of the child chips' remove change events. */\n  get chipRemoveChanges(): Observable<MatChipEvent> {\n    return merge(...this.chips.map(chip => chip.destroyed));\n  }\n\n  /** Event emitted when the selected chip list value has been changed by the user. */\n  @Output() readonly change: EventEmitter<MatChipListChange> =\n      new EventEmitter<MatChipListChange>();\n\n  /**\n   * Event that emits whenever the raw value of the chip-list changes. This is here primarily\n   * to facilitate the two-way binding for the `value` input.\n   * @docs-private\n   */\n  @Output() readonly valueChange: EventEmitter<any> = new EventEmitter<any>();\n\n  /** The chip components contained within this chip list. */\n  @ContentChildren(MatChip) chips: QueryList<MatChip>;\n\n  constructor(protected _elementRef: ElementRef,\n              private _changeDetectorRef: ChangeDetectorRef,\n              @Optional() private _dir: Directionality,\n              @Optional() _parentForm: NgForm,\n              @Optional() _parentFormGroup: FormGroupDirective,\n              _defaultErrorStateMatcher: ErrorStateMatcher,\n              /** @docs-private */\n              @Optional() @Self() public ngControl: NgControl) {\n    super(_defaultErrorStateMatcher, _parentForm, _parentFormGroup, ngControl);\n    if (this.ngControl) {\n      this.ngControl.valueAccessor = this;\n    }\n  }\n\n  ngAfterContentInit() {\n    this._keyManager = new FocusKeyManager<MatChip>(this.chips)\n      .withWrap()\n      .withVerticalOrientation()\n      .withHorizontalOrientation(this._dir ? this._dir.value : 'ltr');\n\n    // Prevents the chip list from capturing focus and redirecting\n    // it back to the first chip when the user tabs out.\n    this._keyManager.tabOut.pipe(takeUntil(this._destroyed)).subscribe(() => {\n      this._tabIndex = -1;\n      setTimeout(() => this._tabIndex = this._userTabIndex || 0);\n    });\n\n    // When the list changes, re-subscribe\n    this.chips.changes.pipe(startWith(null), takeUntil(this._destroyed)).subscribe(() => {\n      this._resetChips();\n\n      // Reset chips selected/deselected status\n      this._initializeSelection();\n\n      // Check to see if we need to update our tab index\n      this._updateTabIndex();\n\n      // Check to see if we have a destroyed chip and need to refocus\n      this._updateFocusForDestroyedChips();\n\n      this.stateChanges.next();\n    });\n  }\n\n  ngOnInit() {\n    this._selectionModel = new SelectionModel<MatChip>(this.multiple, undefined, false);\n    this.stateChanges.next();\n  }\n\n  ngDoCheck() {\n    if (this.ngControl) {\n      // We need to re-evaluate this on every change detection cycle, because there are some\n      // error triggers that we can't subscribe to (e.g. parent form submissions). This means\n      // that whatever logic is in here has to be super lean or we risk destroying the performance.\n      this.updateErrorState();\n    }\n  }\n\n  ngOnDestroy() {\n    this._destroyed.next();\n    this._destroyed.complete();\n    this.stateChanges.complete();\n\n    this._dropSubscriptions();\n  }\n\n\n  /** Associates an HTML input element with this chip list. */\n  registerInput(inputElement: MatChipInput): void {\n    this._chipInput = inputElement;\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  setDescribedByIds(ids: string[]) { this._ariaDescribedby = ids.join(' '); }\n\n  // Implemented as part of ControlValueAccessor.\n  writeValue(value: any): void {\n    if (this.chips) {\n      this._setSelectionByValue(value, false);\n    }\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnChange(fn: (value: any) => void): void {\n    this._onChange = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnTouched(fn: () => void): void {\n    this._onTouched = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n    this._elementRef.nativeElement.disabled = isDisabled;\n    this.stateChanges.next();\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  onContainerClick() { this.focus(); }\n\n  /**\n   * Focuses the the first non-disabled chip in this chip list, or the associated input when there\n   * are no eligible chips.\n   */\n  focus(): void {\n    if (this.disabled) {\n      return;\n    }\n\n    // TODO: ARIA says this should focus the first `selected` chip if any are selected.\n    // Focus on first element if there's no chipInput inside chip-list\n    if (this._chipInput && this._chipInput.focused) {\n      // do nothing\n    } else if (this.chips.length > 0) {\n      this._keyManager.setFirstItemActive();\n      this.stateChanges.next();\n    } else {\n      this._focusInput();\n      this.stateChanges.next();\n    }\n  }\n\n  /** Attempt to focus an input if we have one. */\n  _focusInput() {\n    if (this._chipInput) {\n      this._chipInput.focus();\n    }\n  }\n\n  /**\n   * Pass events to the keyboard manager. Available here for tests.\n   */\n  _keydown(event: KeyboardEvent) {\n    const target = event.target as HTMLElement;\n\n    // If they are on an empty input and hit backspace, focus the last chip\n    if (event.keyCode === BACKSPACE && this._isInputEmpty(target)) {\n      this._keyManager.setLastItemActive();\n      event.preventDefault();\n    } else if (target && target.classList.contains('mat-chip')) {\n      if (event.keyCode === HOME) {\n        this._keyManager.setFirstItemActive();\n        event.preventDefault();\n      } else if (event.keyCode === END) {\n        this._keyManager.setLastItemActive();\n        event.preventDefault();\n      } else {\n        this._keyManager.onKeydown(event);\n      }\n\n      this.stateChanges.next();\n    }\n  }\n\n\n  /**\n   * Check the tab index as you should not be allowed to focus an empty list.\n   */\n  protected _updateTabIndex(): void {\n    // If we have 0 chips, we should not allow keyboard focus\n    this._tabIndex = this._userTabIndex || (this.chips.length === 0 ? -1 : 0);\n  }\n\n  /**\n   * If the amount of chips changed, we need to update the\n   * key manager state and focus the next closest chip.\n   */\n  protected _updateFocusForDestroyedChips() {\n    if (this._lastDestroyedChipIndex != null && this.chips.length) {\n      const newChipIndex = Math.min(this._lastDestroyedChipIndex, this.chips.length - 1);\n      this._keyManager.setActiveItem(newChipIndex);\n    }\n\n    this._lastDestroyedChipIndex = null;\n  }\n\n  /**\n   * Utility to ensure all indexes are valid.\n   *\n   * @param index The index to be checked.\n   * @returns True if the index is valid for our list of chips.\n   */\n  private _isValidIndex(index: number): boolean {\n    return index >= 0 && index < this.chips.length;\n  }\n\n  private _isInputEmpty(element: HTMLElement): boolean {\n    if (element && element.nodeName.toLowerCase() === 'input') {\n      let input = element as HTMLInputElement;\n      return !input.value;\n    }\n\n    return false;\n  }\n\n  _setSelectionByValue(value: any, isUserInput: boolean = true) {\n    this._clearSelection();\n    this.chips.forEach(chip => chip.deselect());\n\n    if (Array.isArray(value)) {\n      value.forEach(currentValue => this._selectValue(currentValue, isUserInput));\n      this._sortValues();\n    } else {\n      const correspondingChip = this._selectValue(value, isUserInput);\n\n      // Shift focus to the active item. Note that we shouldn't do this in multiple\n      // mode, because we don't know what chip the user interacted with last.\n      if (correspondingChip) {\n        if (isUserInput) {\n          this._keyManager.setActiveItem(correspondingChip);\n        }\n      }\n    }\n  }\n\n  /**\n   * Finds and selects the chip based on its value.\n   * @returns Chip that has the corresponding value.\n   */\n  private _selectValue(value: any, isUserInput: boolean = true): MatChip | undefined {\n\n    const correspondingChip = this.chips.find(chip => {\n      return chip.value != null && this._compareWith(chip.value,  value);\n    });\n\n    if (correspondingChip) {\n      isUserInput ? correspondingChip.selectViaInteraction() : correspondingChip.select();\n      this._selectionModel.select(correspondingChip);\n    }\n\n    return correspondingChip;\n  }\n\n  private _initializeSelection(): void {\n    // Defer setting the value in order to avoid the \"Expression\n    // has changed after it was checked\" errors from Angular.\n    Promise.resolve().then(() => {\n      if (this.ngControl || this._value) {\n        this._setSelectionByValue(this.ngControl ? this.ngControl.value : this._value, false);\n        this.stateChanges.next();\n      }\n    });\n  }\n\n  /**\n   * Deselects every chip in the list.\n   * @param skip Chip that should not be deselected.\n   */\n  private _clearSelection(skip?: MatChip): void {\n    this._selectionModel.clear();\n    this.chips.forEach(chip => {\n      if (chip !== skip) {\n        chip.deselect();\n      }\n    });\n    this.stateChanges.next();\n  }\n\n  /**\n   * Sorts the model values, ensuring that they keep the same\n   * order that they have in the panel.\n   */\n  private _sortValues(): void {\n    if (this._multiple) {\n      this._selectionModel.clear();\n\n      this.chips.forEach(chip => {\n        if (chip.selected) {\n          this._selectionModel.select(chip);\n        }\n      });\n      this.stateChanges.next();\n    }\n  }\n\n  /** Emits change event to set the model value. */\n  private _propagateChanges(fallbackValue?: any): void {\n    let valueToEmit: any = null;\n\n    if (Array.isArray(this.selected)) {\n      valueToEmit = this.selected.map(chip => chip.value);\n    } else {\n      valueToEmit = this.selected ? this.selected.value : fallbackValue;\n    }\n    this._value = valueToEmit;\n    this.change.emit(new MatChipListChange(this, valueToEmit));\n    this.valueChange.emit(valueToEmit);\n    this._onChange(valueToEmit);\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** When blurred, mark the field as touched when focus moved outside the chip list. */\n  _blur() {\n    this._keyManager.setActiveItem(-1);\n    if (!this.disabled) {\n      if (this._chipInput) {\n        // If there's a chip input, we should check whether the focus moved to chip input.\n        // If the focus is not moved to chip input, mark the field as touched. If the focus moved\n        // to chip input, do nothing.\n        // Timeout is needed to wait for the focus() event trigger on chip input.\n        setTimeout(() => {\n          if (!this.focused) {\n            this._markAsTouched();\n          }\n        });\n      } else {\n        // If there's no chip input, then mark the field as touched.\n        this._markAsTouched();\n      }\n    }\n  }\n\n  /** Mark the field as touched */\n  _markAsTouched() {\n    this._onTouched();\n    this._changeDetectorRef.markForCheck();\n    this.stateChanges.next();\n  }\n\n  private _resetChips() {\n    this._dropSubscriptions();\n    this._listenToChipsFocus();\n    this._listenToChipsSelection();\n    this._listenToChipsRemoved();\n  }\n\n  private _dropSubscriptions() {\n    if (this._chipFocusSubscription) {\n      this._chipFocusSubscription.unsubscribe();\n      this._chipFocusSubscription = null;\n    }\n\n    if (this._chipBlurSubscription) {\n      this._chipBlurSubscription.unsubscribe();\n      this._chipBlurSubscription = null;\n    }\n\n    if (this._chipSelectionSubscription) {\n      this._chipSelectionSubscription.unsubscribe();\n      this._chipSelectionSubscription = null;\n    }\n\n    if (this._chipRemoveSubscription) {\n      this._chipRemoveSubscription.unsubscribe();\n      this._chipRemoveSubscription = null;\n    }\n  }\n\n  /** Listens to user-generated selection events on each chip. */\n  private _listenToChipsSelection(): void {\n    this._chipSelectionSubscription = this.chipSelectionChanges.subscribe(event => {\n      event.source.selected\n        ? this._selectionModel.select(event.source)\n        : this._selectionModel.deselect(event.source);\n\n      // For single selection chip list, make sure the deselected value is unselected.\n      if (!this.multiple) {\n        this.chips.forEach(chip => {\n          if (!this._selectionModel.isSelected(chip) && chip.selected) {\n            chip.deselect();\n          }\n        });\n      }\n\n      if (event.isUserInput) {\n        this._propagateChanges();\n      }\n    });\n  }\n\n  /** Listens to user-generated selection events on each chip. */\n  private _listenToChipsFocus(): void {\n    this._chipFocusSubscription = this.chipFocusChanges.subscribe(event => {\n      let chipIndex: number = this.chips.toArray().indexOf(event.chip);\n\n      if (this._isValidIndex(chipIndex)) {\n        this._keyManager.updateActiveItemIndex(chipIndex);\n      }\n      this.stateChanges.next();\n    });\n\n    this._chipBlurSubscription = this.chipBlurChanges.subscribe(() => {\n      this._blur();\n      this.stateChanges.next();\n    });\n  }\n\n  private _listenToChipsRemoved(): void {\n    this._chipRemoveSubscription = this.chipRemoveChanges.subscribe(event => {\n      const chip = event.chip;\n      const chipIndex = this.chips.toArray().indexOf(event.chip);\n\n      // In case the chip that will be removed is currently focused, we temporarily store\n      // the index in order to be able to determine an appropriate sibling chip that will\n      // receive focus.\n      if (this._isValidIndex(chipIndex) && chip._hasFocus) {\n        this._lastDestroyedChipIndex = chipIndex;\n      }\n    });\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {Directive, ElementRef, EventEmitter, Input, Output, Inject, OnChanges} from '@angular/core';\nimport {MatChipList} from './chip-list';\nimport {MAT_CHIPS_DEFAULT_OPTIONS, MatChipsDefaultOptions} from './chip-default-options';\n\n\n/** Represents an input event on a `matChipInput`. */\nexport interface MatChipInputEvent {\n  /** The native `<input>` element that the event is being fired for. */\n  input: HTMLInputElement;\n\n  /** The value of the input. */\n  value: string;\n}\n\n// Increasing integer for generating unique ids.\nlet nextUniqueId = 0;\n\n/**\n * Directive that adds chip-specific behaviors to an input element inside `<mat-form-field>`.\n * May be placed inside or outside of an `<mat-chip-list>`.\n */\n@Directive({\n  selector: 'input[matChipInputFor]',\n  exportAs: 'matChipInput, matChipInputFor',\n  host: {\n    'class': 'mat-chip-input mat-input-element',\n    '(keydown)': '_keydown($event)',\n    '(blur)': '_blur()',\n    '(focus)': '_focus()',\n    '(input)': '_onInput()',\n    '[id]': 'id',\n    '[attr.disabled]': 'disabled || null',\n    '[attr.placeholder]': 'placeholder || null',\n  }\n})\nexport class MatChipInput implements OnChanges {\n  /** Whether the control is focused. */\n  focused: boolean = false;\n  _chipList: MatChipList;\n\n  /** Register input for chip list */\n  @Input('matChipInputFor')\n  set chipList(value: MatChipList) {\n    if (value) {\n      this._chipList = value;\n      this._chipList.registerInput(this);\n    }\n  }\n\n  /**\n   * Whether or not the chipEnd event will be emitted when the input is blurred.\n   */\n  @Input('matChipInputAddOnBlur')\n  get addOnBlur(): boolean { return this._addOnBlur; }\n  set addOnBlur(value: boolean) { this._addOnBlur = coerceBooleanProperty(value); }\n  _addOnBlur: boolean = false;\n\n  /**\n   * The list of key codes that will trigger a chipEnd event.\n   *\n   * Defaults to `[ENTER]`.\n   */\n  @Input('matChipInputSeparatorKeyCodes')\n  separatorKeyCodes: number[] | Set<number> = this._defaultOptions.separatorKeyCodes;\n\n  /** Emitted when a chip is to be added. */\n  @Output('matChipInputTokenEnd')\n  chipEnd: EventEmitter<MatChipInputEvent> = new EventEmitter<MatChipInputEvent>();\n\n  /** The input's placeholder text. */\n  @Input() placeholder: string = '';\n\n  /** Unique id for the input. */\n  @Input() id: string = `mat-chip-list-input-${nextUniqueId++}`;\n\n  /** Whether the input is disabled. */\n  @Input()\n  get disabled(): boolean { return this._disabled || (this._chipList && this._chipList.disabled); }\n  set disabled(value: boolean) { this._disabled = coerceBooleanProperty(value); }\n  private _disabled: boolean = false;\n\n  /** Whether the input is empty. */\n  get empty(): boolean { return !this._inputElement.value; }\n\n  /** The native input element to which this directive is attached. */\n  protected _inputElement: HTMLInputElement;\n\n  constructor(\n    protected _elementRef: ElementRef,\n    @Inject(MAT_CHIPS_DEFAULT_OPTIONS) private _defaultOptions: MatChipsDefaultOptions) {\n    this._inputElement = this._elementRef.nativeElement as HTMLInputElement;\n  }\n\n  ngOnChanges() {\n    this._chipList.stateChanges.next();\n  }\n\n  /** Utility method to make host definition/tests more clear. */\n  _keydown(event?: KeyboardEvent) {\n    this._emitChipEnd(event);\n  }\n\n  /** Checks to see if the blur should emit the (chipEnd) event. */\n  _blur() {\n    if (this.addOnBlur) {\n      this._emitChipEnd();\n    }\n    this.focused = false;\n    // Blur the chip list if it is not focused\n    if (!this._chipList.focused) {\n      this._chipList._blur();\n    }\n    this._chipList.stateChanges.next();\n  }\n\n  _focus() {\n    this.focused = true;\n    this._chipList.stateChanges.next();\n  }\n\n  /** Checks to see if the (chipEnd) event needs to be emitted. */\n  _emitChipEnd(event?: KeyboardEvent) {\n    if (!this._inputElement.value && !!event) {\n      this._chipList._keydown(event);\n    }\n    if (!event || this._isSeparatorKey(event.keyCode)) {\n      this.chipEnd.emit({ input: this._inputElement, value: this._inputElement.value });\n\n      if (event) {\n        event.preventDefault();\n      }\n    }\n  }\n\n  _onInput() {\n    // Let chip list know whenever the value changes.\n    this._chipList.stateChanges.next();\n  }\n\n  /** Focuses the input. */\n  focus(): void {\n    this._inputElement.focus();\n  }\n\n  /** Checks whether a keycode is one of the configured separators. */\n  private _isSeparatorKey(keyCode: number) {\n    const separators = this.separatorKeyCodes;\n    return Array.isArray(separators) ? separators.indexOf(keyCode) > -1 : separators.has(keyCode);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ENTER} from '@angular/cdk/keycodes';\nimport {NgModule} from '@angular/core';\nimport {ErrorStateMatcher} from '@angular/material/core';\nimport {MatChip, MatChipAvatar, MatChipRemove, MatChipTrailingIcon} from './chip';\nimport {MAT_CHIPS_DEFAULT_OPTIONS, MatChipsDefaultOptions} from './chip-default-options';\nimport {MatChipInput} from './chip-input';\nimport {MatChipList} from './chip-list';\n\nconst CHIP_DECLARATIONS = [\n  MatChipList,\n  MatChip,\n  MatChipInput,\n  MatChipRemove,\n  MatChipAvatar,\n  MatChipTrailingIcon,\n];\n\n@NgModule({\n  exports: CHIP_DECLARATIONS,\n  declarations: CHIP_DECLARATIONS,\n  providers: [\n    ErrorStateMatcher,\n    {\n      provide: MAT_CHIPS_DEFAULT_OPTIONS,\n      useValue: {\n        separatorKeyCodes: [ENTER]\n      } as MatChipsDefaultOptions\n    }\n  ]\n})\nexport class MatChipsModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ViewContainerRef} from '@angular/core';\nimport {Direction} from '@angular/cdk/bidi';\nimport {ScrollStrategy} from '@angular/cdk/overlay';\n\n/** Valid ARIA roles for a dialog element. */\nexport type DialogRole = 'dialog' | 'alertdialog';\n\n/** Possible overrides for a dialog's position. */\nexport interface DialogPosition {\n  /** Override for the dialog's top position. */\n  top?: string;\n\n  /** Override for the dialog's bottom position. */\n  bottom?: string;\n\n  /** Override for the dialog's left position. */\n  left?: string;\n\n  /** Override for the dialog's right position. */\n  right?: string;\n}\n\n/**\n * Configuration for opening a modal dialog with the MatDialog service.\n */\nexport class MatDialogConfig<D = any> {\n\n  /**\n   * Where the attached component should live in Angular's *logical* component tree.\n   * This affects what is available for injection and the change detection order for the\n   * component instantiated inside of the dialog. This does not affect where the dialog\n   * content will be rendered.\n   */\n  viewContainerRef?: ViewContainerRef;\n\n  /** ID for the dialog. If omitted, a unique one will be generated. */\n  id?: string;\n\n  /** The ARIA role of the dialog element. */\n  role?: DialogRole = 'dialog';\n\n  /** Custom class for the overlay pane. */\n  panelClass?: string | string[] = '';\n\n  /** Whether the dialog has a backdrop. */\n  hasBackdrop?: boolean = true;\n\n  /** Custom class for the backdrop, */\n  backdropClass?: string = '';\n\n  /** Whether the user can use escape or clicking on the backdrop to close the modal. */\n  disableClose?: boolean = false;\n\n  /** Width of the dialog. */\n  width?: string = '';\n\n  /** Height of the dialog. */\n  height?: string = '';\n\n  /** Min-width of the dialog. If a number is provided, pixel units are assumed. */\n  minWidth?: number | string;\n\n  /** Min-height of the dialog. If a number is provided, pixel units are assumed. */\n  minHeight?: number | string;\n\n  /** Max-width of the dialog. If a number is provided, pixel units are assumed. Defaults to 80vw */\n  maxWidth?: number | string = '80vw';\n\n  /** Max-height of the dialog. If a number is provided, pixel units are assumed. */\n  maxHeight?: number | string;\n\n  /** Position overrides. */\n  position?: DialogPosition;\n\n  /** Data being injected into the child component. */\n  data?: D | null = null;\n\n  /** Layout direction for the dialog's content. */\n  direction?: Direction;\n\n  /** ID of the element that describes the dialog. */\n  ariaDescribedBy?: string | null = null;\n\n  /** Aria label to assign to the dialog element */\n  ariaLabel?: string | null = null;\n\n  /** Whether the dialog should focus the first focusable element on open. */\n  autoFocus?: boolean = true;\n\n  /**\n   * Whether the dialog should restore focus to the\n   * previously-focused element, after it's closed.\n   */\n  restoreFocus?: boolean = true;\n\n  /** Scroll strategy to be used for the dialog. */\n  scrollStrategy?: ScrollStrategy;\n\n  /** Whether the dialog should close when the user goes backwards/forwards in history. */\n  closeOnNavigation?: boolean = true;\n\n  // TODO(jelbourn): add configuration for lifecycle hooks, ARIA labelling.\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/** Animations used by MatDialog. */\nexport const matDialogAnimations: {\n  readonly slideDialog: AnimationTriggerMetadata;\n} = {\n  /** Animation that slides the dialog in and out of view and fades the opacity. */\n  slideDialog: trigger('slideDialog', [\n    // Note: The `enter` animation doesn't transition to something like `translate3d(0, 0, 0)\n    // scale(1)`, because for some reason specifying the transform explicitly, causes IE both\n    // to blur the dialog content and decimate the animation performance. Leaving it as `none`\n    // solves both issues.\n    state('enter', style({ transform: 'none', opacity: 1 })),\n    state('void', style({ transform: 'translate3d(0, 25%, 0) scale(0.9)', opacity: 0 })),\n    state('exit', style({ transform: 'translate3d(0, 25%, 0)', opacity: 0 })),\n    transition('* => *', animate('400ms cubic-bezier(0.25, 0.8, 0.25, 1)')),\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ComponentRef,\n  ElementRef,\n  EmbeddedViewRef,\n  EventEmitter,\n  Inject,\n  Optional,\n  ChangeDetectorRef,\n  ViewChild,\n  ViewEncapsulation,\n  ChangeDetectionStrategy,\n} from '@angular/core';\nimport {DOCUMENT} from '@angular/common';\nimport {AnimationEvent} from '@angular/animations';\nimport {matDialogAnimations} from './dialog-animations';\nimport {\n  BasePortalOutlet,\n  ComponentPortal,\n  CdkPortalOutlet,\n  TemplatePortal\n} from '@angular/cdk/portal';\nimport {FocusTrap, FocusTrapFactory} from '@angular/cdk/a11y';\nimport {MatDialogConfig} from './dialog-config';\n\n\n/**\n * Throws an exception for the case when a ComponentPortal is\n * attached to a DomPortalOutlet without an origin.\n * @docs-private\n */\nexport function throwMatDialogContentAlreadyAttachedError() {\n  throw Error('Attempting to attach dialog content after content is already attached');\n}\n\n/**\n * Internal component that wraps user-provided dialog content.\n * Animation is based on https://material.io/guidelines/motion/choreography.html.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-dialog-container',\n  templateUrl: 'dialog-container.html',\n  styleUrls: ['dialog.css'],\n  encapsulation: ViewEncapsulation.None,\n  // Using OnPush for dialogs caused some G3 sync issues. Disabled until we can track them down.\n  // tslint:disable-next-line:validate-decorators\n  changeDetection: ChangeDetectionStrategy.Default,\n  animations: [matDialogAnimations.slideDialog],\n  host: {\n    'class': 'mat-dialog-container',\n    'tabindex': '-1',\n    'aria-modal': 'true',\n    '[attr.id]': '_id',\n    '[attr.role]': '_config.role',\n    '[attr.aria-labelledby]': '_config.ariaLabel ? null : _ariaLabelledBy',\n    '[attr.aria-label]': '_config.ariaLabel',\n    '[attr.aria-describedby]': '_config.ariaDescribedBy || null',\n    '[@slideDialog]': '_state',\n    '(@slideDialog.start)': '_onAnimationStart($event)',\n    '(@slideDialog.done)': '_onAnimationDone($event)',\n  },\n})\nexport class MatDialogContainer extends BasePortalOutlet {\n  /** The portal outlet inside of this container into which the dialog content will be loaded. */\n  @ViewChild(CdkPortalOutlet) _portalOutlet: CdkPortalOutlet;\n\n  /** The class that traps and manages focus within the dialog. */\n  private _focusTrap: FocusTrap;\n\n  /** Element that was focused before the dialog was opened. Save this to restore upon close. */\n  private _elementFocusedBeforeDialogWasOpened: HTMLElement | null = null;\n\n  /** State of the dialog animation. */\n  _state: 'void' | 'enter' | 'exit' = 'enter';\n\n  /** Emits when an animation state changes. */\n  _animationStateChanged = new EventEmitter<AnimationEvent>();\n\n  /** ID of the element that should be considered as the dialog's label. */\n  _ariaLabelledBy: string | null = null;\n\n  /** ID for the container DOM element. */\n  _id: string;\n\n  constructor(\n    private _elementRef: ElementRef,\n    private _focusTrapFactory: FocusTrapFactory,\n    private _changeDetectorRef: ChangeDetectorRef,\n    @Optional() @Inject(DOCUMENT) private _document: any,\n    /** The dialog configuration. */\n    public _config: MatDialogConfig) {\n\n    super();\n  }\n\n  /**\n   * Attach a ComponentPortal as content to this dialog container.\n   * @param portal Portal to be attached as the dialog content.\n   */\n  attachComponentPortal<T>(portal: ComponentPortal<T>): ComponentRef<T> {\n    if (this._portalOutlet.hasAttached()) {\n      throwMatDialogContentAlreadyAttachedError();\n    }\n\n    this._savePreviouslyFocusedElement();\n    return this._portalOutlet.attachComponentPortal(portal);\n  }\n\n  /**\n   * Attach a TemplatePortal as content to this dialog container.\n   * @param portal Portal to be attached as the dialog content.\n   */\n  attachTemplatePortal<C>(portal: TemplatePortal<C>): EmbeddedViewRef<C> {\n    if (this._portalOutlet.hasAttached()) {\n      throwMatDialogContentAlreadyAttachedError();\n    }\n\n    this._savePreviouslyFocusedElement();\n    return this._portalOutlet.attachTemplatePortal(portal);\n  }\n\n  /** Moves the focus inside the focus trap. */\n  private _trapFocus() {\n    if (!this._focusTrap) {\n      this._focusTrap = this._focusTrapFactory.create(this._elementRef.nativeElement);\n    }\n\n    // If were to attempt to focus immediately, then the content of the dialog would not yet be\n    // ready in instances where change detection has to run first. To deal with this, we simply\n    // wait for the microtask queue to be empty.\n    if (this._config.autoFocus) {\n      this._focusTrap.focusInitialElementWhenReady();\n    }\n  }\n\n  /** Restores focus to the element that was focused before the dialog opened. */\n  private _restoreFocus() {\n    const toFocus = this._elementFocusedBeforeDialogWasOpened;\n\n    // We need the extra check, because IE can set the `activeElement` to null in some cases.\n    if (this._config.restoreFocus && toFocus && typeof toFocus.focus === 'function') {\n      toFocus.focus();\n    }\n\n    if (this._focusTrap) {\n      this._focusTrap.destroy();\n    }\n  }\n\n  /** Saves a reference to the element that was focused before the dialog was opened. */\n  private _savePreviouslyFocusedElement() {\n    if (this._document) {\n      this._elementFocusedBeforeDialogWasOpened = this._document.activeElement as HTMLElement;\n\n      // Note that there is no focus method when rendering on the server.\n      if (this._elementRef.nativeElement.focus) {\n        // Move focus onto the dialog immediately in order to prevent the user from accidentally\n        // opening multiple dialogs at the same time. Needs to be async, because the element\n        // may not be focusable immediately.\n        Promise.resolve().then(() => this._elementRef.nativeElement.focus());\n      }\n    }\n  }\n\n  /** Callback, invoked whenever an animation on the host completes. */\n  _onAnimationDone(event: AnimationEvent) {\n    if (event.toState === 'enter') {\n      this._trapFocus();\n    } else if (event.toState === 'exit') {\n      this._restoreFocus();\n    }\n\n    this._animationStateChanged.emit(event);\n  }\n\n  /** Callback, invoked when an animation on the host starts. */\n  _onAnimationStart(event: AnimationEvent) {\n    this._animationStateChanged.emit(event);\n  }\n\n  /** Starts the dialog exit animation. */\n  _startExitAnimation(): void {\n    this._state = 'exit';\n\n    // Mark the container for check so it can react if the\n    // view container is using OnPush change detection.\n    this._changeDetectorRef.markForCheck();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ESCAPE} from '@angular/cdk/keycodes';\nimport {GlobalPositionStrategy, OverlayRef} from '@angular/cdk/overlay';\nimport {Location} from '@angular/common';\nimport {Observable, Subject, Subscription, SubscriptionLike} from 'rxjs';\nimport {filter, take} from 'rxjs/operators';\nimport {DialogPosition} from './dialog-config';\nimport {MatDialogContainer} from './dialog-container';\n\n\n// TODO(jelbourn): resizing\n\n// Counter for unique dialog ids.\nlet uniqueId = 0;\n\n/**\n * Reference to a dialog opened via the MatDialog service.\n */\nexport class MatDialogRef<T, R = any> {\n  /** The instance of component opened into the dialog. */\n  componentInstance: T;\n\n  /** Whether the user is allowed to close the dialog. */\n  disableClose: boolean | undefined = this._containerInstance._config.disableClose;\n\n  /** Subject for notifying the user that the dialog has finished opening. */\n  private readonly _afterOpened = new Subject<void>();\n\n  /** Subject for notifying the user that the dialog has finished closing. */\n  private readonly _afterClosed = new Subject<R | undefined>();\n\n  /** Subject for notifying the user that the dialog has started closing. */\n  private readonly _beforeClosed = new Subject<R | undefined>();\n\n  /** Result to be passed to afterClosed. */\n  private _result: R | undefined;\n\n  /** Subscription to changes in the user's location. */\n  private _locationChanges: SubscriptionLike = Subscription.EMPTY;\n\n  constructor(\n    private _overlayRef: OverlayRef,\n    public _containerInstance: MatDialogContainer,\n    location?: Location,\n    readonly id: string = `mat-dialog-${uniqueId++}`) {\n\n    // Pass the id along to the container.\n    _containerInstance._id = id;\n\n    // Emit when opening animation completes\n    _containerInstance._animationStateChanged.pipe(\n      filter(event => event.phaseName === 'done' && event.toState === 'enter'),\n      take(1)\n    )\n    .subscribe(() => {\n      this._afterOpened.next();\n      this._afterOpened.complete();\n    });\n\n    // Dispose overlay when closing animation is complete\n    _containerInstance._animationStateChanged.pipe(\n      filter(event => event.phaseName === 'done' && event.toState === 'exit'),\n      take(1)\n    ).subscribe(() => this._overlayRef.dispose());\n\n    _overlayRef.detachments().subscribe(() => {\n      this._beforeClosed.next(this._result);\n      this._beforeClosed.complete();\n      this._locationChanges.unsubscribe();\n      this._afterClosed.next(this._result);\n      this._afterClosed.complete();\n      this.componentInstance = null!;\n      this._overlayRef.dispose();\n    });\n\n    _overlayRef.keydownEvents()\n      .pipe(filter(event => event.keyCode === ESCAPE && !this.disableClose))\n      .subscribe(() => this.close());\n\n    if (location) {\n      // Close the dialog when the user goes forwards/backwards in history or when the location\n      // hash changes. Note that this usually doesn't include clicking on links (unless the user\n      // is using the `HashLocationStrategy`).\n      this._locationChanges = location.subscribe(() => {\n        if (this._containerInstance._config.closeOnNavigation) {\n          this.close();\n        }\n      });\n    }\n  }\n\n  /**\n   * Close the dialog.\n   * @param dialogResult Optional result to return to the dialog opener.\n   */\n  close(dialogResult?: R): void {\n    this._result = dialogResult;\n\n    // Transition the backdrop in parallel to the dialog.\n    this._containerInstance._animationStateChanged.pipe(\n      filter(event => event.phaseName === 'start'),\n      take(1)\n    )\n    .subscribe(() => {\n      this._beforeClosed.next(dialogResult);\n      this._beforeClosed.complete();\n      this._overlayRef.detachBackdrop();\n    });\n\n    this._containerInstance._startExitAnimation();\n  }\n\n  /**\n   * Gets an observable that is notified when the dialog is finished opening.\n   */\n  afterOpened(): Observable<void> {\n    return this._afterOpened.asObservable();\n  }\n\n  /**\n   * Gets an observable that is notified when the dialog is finished closing.\n   */\n  afterClosed(): Observable<R | undefined> {\n    return this._afterClosed.asObservable();\n  }\n\n  /**\n   * Gets an observable that is notified when the dialog has started closing.\n   */\n  beforeClosed(): Observable<R | undefined> {\n    return this._beforeClosed.asObservable();\n  }\n\n  /**\n   * Gets an observable that emits when the overlay's backdrop has been clicked.\n   */\n  backdropClick(): Observable<MouseEvent> {\n    return this._overlayRef.backdropClick();\n  }\n\n  /**\n   * Gets an observable that emits when keydown events are targeted on the overlay.\n   */\n  keydownEvents(): Observable<KeyboardEvent> {\n    return this._overlayRef.keydownEvents();\n  }\n\n  /**\n   * Updates the dialog's position.\n   * @param position New dialog position.\n   */\n  updatePosition(position?: DialogPosition): this {\n    let strategy = this._getPositionStrategy();\n\n    if (position && (position.left || position.right)) {\n      position.left ? strategy.left(position.left) : strategy.right(position.right);\n    } else {\n      strategy.centerHorizontally();\n    }\n\n    if (position && (position.top || position.bottom)) {\n      position.top ? strategy.top(position.top) : strategy.bottom(position.bottom);\n    } else {\n      strategy.centerVertically();\n    }\n\n    this._overlayRef.updatePosition();\n\n    return this;\n  }\n\n  /**\n   * Updates the dialog's width and height.\n   * @param width New width of the dialog.\n   * @param height New height of the dialog.\n   */\n  updateSize(width: string = '', height: string = ''): this {\n    this._getPositionStrategy().width(width).height(height);\n    this._overlayRef.updatePosition();\n    return this;\n  }\n\n  /**\n   * Gets an observable that is notified when the dialog is finished opening.\n   * @deprecated Use `afterOpened` instead.\n   * @breaking-change 8.0.0\n   */\n  afterOpen(): Observable<void> {\n    return this.afterOpened();\n  }\n\n  /**\n   * Gets an observable that is notified when the dialog has started closing.\n   * @deprecated Use `beforeClosed` instead.\n   * @breaking-change 8.0.0\n   */\n  beforeClose(): Observable<R | undefined> {\n    return this.beforeClosed();\n  }\n\n  /** Fetches the position strategy object from the overlay ref. */\n  private _getPositionStrategy(): GlobalPositionStrategy {\n    return this._overlayRef.getConfig().positionStrategy as GlobalPositionStrategy;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directionality} from '@angular/cdk/bidi';\nimport {\n  Overlay,\n  OverlayConfig,\n  OverlayContainer,\n  OverlayRef,\n  ScrollStrategy,\n} from '@angular/cdk/overlay';\nimport {ComponentPortal, ComponentType, PortalInjector, TemplatePortal} from '@angular/cdk/portal';\nimport {Location} from '@angular/common';\nimport {\n  Inject,\n  Injectable,\n  InjectionToken,\n  Injector,\n  Optional,\n  SkipSelf,\n  TemplateRef,\n} from '@angular/core';\nimport {defer, Observable, of as observableOf, Subject} from 'rxjs';\nimport {startWith} from 'rxjs/operators';\nimport {MatDialogConfig} from './dialog-config';\nimport {MatDialogContainer} from './dialog-container';\nimport {MatDialogRef} from './dialog-ref';\n\n\n/** Injection token that can be used to access the data that was passed in to a dialog. */\nexport const MAT_DIALOG_DATA = new InjectionToken<any>('MatDialogData');\n\n/** Injection token that can be used to specify default dialog options. */\nexport const MAT_DIALOG_DEFAULT_OPTIONS =\n    new InjectionToken<MatDialogConfig>('mat-dialog-default-options');\n\n/** Injection token that determines the scroll handling while the dialog is open. */\nexport const MAT_DIALOG_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mat-dialog-scroll-strategy');\n\n/** @docs-private */\nexport function MAT_DIALOG_SCROLL_STRATEGY_FACTORY(overlay: Overlay): ()  => ScrollStrategy {\n  return () => overlay.scrollStrategies.block();\n}\n\n/** @docs-private */\nexport function MAT_DIALOG_SCROLL_STRATEGY_PROVIDER_FACTORY(overlay: Overlay):\n    () => ScrollStrategy {\n  return () => overlay.scrollStrategies.block();\n}\n\n/** @docs-private */\nexport const MAT_DIALOG_SCROLL_STRATEGY_PROVIDER = {\n  provide: MAT_DIALOG_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_DIALOG_SCROLL_STRATEGY_PROVIDER_FACTORY,\n};\n\n\n/**\n * Service to open Material Design modal dialogs.\n */\n@Injectable()\nexport class MatDialog {\n  private _openDialogsAtThisLevel: MatDialogRef<any>[] = [];\n  private readonly _afterAllClosedAtThisLevel = new Subject<void>();\n  private readonly _afterOpenedAtThisLevel = new Subject<MatDialogRef<any>>();\n  private _ariaHiddenElements = new Map<Element, string|null>();\n\n  /** Keeps track of the currently-open dialogs. */\n  get openDialogs(): MatDialogRef<any>[] {\n    return this._parentDialog ? this._parentDialog.openDialogs : this._openDialogsAtThisLevel;\n  }\n\n  /** Stream that emits when a dialog has been opened. */\n  get afterOpened(): Subject<MatDialogRef<any>> {\n    return this._parentDialog ? this._parentDialog.afterOpened : this._afterOpenedAtThisLevel;\n  }\n\n  /**\n   * Stream that emits when a dialog has been opened.\n   * @deprecated Use `afterOpened` instead.\n   * @breaking-change 8.0.0\n   */\n  get afterOpen(): Subject<MatDialogRef<any>> {\n    return this.afterOpened;\n  }\n\n  get _afterAllClosed() {\n    const parent = this._parentDialog;\n    return parent ? parent._afterAllClosed : this._afterAllClosedAtThisLevel;\n  }\n\n  /**\n   * Stream that emits when all open dialog have finished closing.\n   * Will emit on subscribe if there are no open dialogs to begin with.\n   */\n  readonly afterAllClosed: Observable<void> = defer<void>(() => this.openDialogs.length ?\n      this._afterAllClosed :\n      this._afterAllClosed.pipe(startWith(undefined)));\n\n  constructor(\n      private _overlay: Overlay,\n      private _injector: Injector,\n      @Optional() private _location: Location,\n      @Optional() @Inject(MAT_DIALOG_DEFAULT_OPTIONS) private _defaultOptions,\n      @Inject(MAT_DIALOG_SCROLL_STRATEGY) private _scrollStrategy,\n      @Optional() @SkipSelf() private _parentDialog: MatDialog,\n      private _overlayContainer: OverlayContainer) {}\n\n  /**\n   * Opens a modal dialog containing the given component.\n   * @param componentOrTemplateRef Type of the component to load into the dialog,\n   *     or a TemplateRef to instantiate as the dialog content.\n   * @param config Extra configuration options.\n   * @returns Reference to the newly-opened dialog.\n   */\n  open<T, D = any, R = any>(componentOrTemplateRef: ComponentType<T> | TemplateRef<T>,\n          config?: MatDialogConfig<D>): MatDialogRef<T, R> {\n\n    config = _applyConfigDefaults(config, this._defaultOptions || new MatDialogConfig());\n\n    if (config.id && this.getDialogById(config.id)) {\n      throw Error(`Dialog with id \"${config.id}\" exists already. The dialog id must be unique.`);\n    }\n\n    const overlayRef = this._createOverlay(config);\n    const dialogContainer = this._attachDialogContainer(overlayRef, config);\n    const dialogRef = this._attachDialogContent<T, R>(componentOrTemplateRef,\n                                                      dialogContainer,\n                                                      overlayRef,\n                                                      config);\n\n    // If this is the first dialog that we're opening, hide all the non-overlay content.\n    if (!this.openDialogs.length) {\n      this._hideNonDialogContentFromAssistiveTechnology();\n    }\n\n    this.openDialogs.push(dialogRef);\n    dialogRef.afterClosed().subscribe(() => this._removeOpenDialog(dialogRef));\n    this.afterOpened.next(dialogRef);\n\n    return dialogRef;\n  }\n\n  /**\n   * Closes all of the currently-open dialogs.\n   */\n  closeAll(): void {\n    let i = this.openDialogs.length;\n\n    while (i--) {\n      // The `_openDialogs` property isn't updated after close until the rxjs subscription\n      // runs on the next microtask, in addition to modifying the array as we're going\n      // through it. We loop through all of them and call close without assuming that\n      // they'll be removed from the list instantaneously.\n      this.openDialogs[i].close();\n    }\n  }\n\n  /**\n   * Finds an open dialog by its id.\n   * @param id ID to use when looking up the dialog.\n   */\n  getDialogById(id: string): MatDialogRef<any> | undefined {\n    return this.openDialogs.find(dialog => dialog.id === id);\n  }\n\n  /**\n   * Creates the overlay into which the dialog will be loaded.\n   * @param config The dialog configuration.\n   * @returns A promise resolving to the OverlayRef for the created overlay.\n   */\n  private _createOverlay(config: MatDialogConfig): OverlayRef {\n    const overlayConfig = this._getOverlayConfig(config);\n    return this._overlay.create(overlayConfig);\n  }\n\n  /**\n   * Creates an overlay config from a dialog config.\n   * @param dialogConfig The dialog configuration.\n   * @returns The overlay configuration.\n   */\n  private _getOverlayConfig(dialogConfig: MatDialogConfig): OverlayConfig {\n    const state = new OverlayConfig({\n      positionStrategy: this._overlay.position().global(),\n      scrollStrategy: dialogConfig.scrollStrategy || this._scrollStrategy(),\n      panelClass: dialogConfig.panelClass,\n      hasBackdrop: dialogConfig.hasBackdrop,\n      direction: dialogConfig.direction,\n      minWidth: dialogConfig.minWidth,\n      minHeight: dialogConfig.minHeight,\n      maxWidth: dialogConfig.maxWidth,\n      maxHeight: dialogConfig.maxHeight\n    });\n\n    if (dialogConfig.backdropClass) {\n      state.backdropClass = dialogConfig.backdropClass;\n    }\n\n    return state;\n  }\n\n  /**\n   * Attaches an MatDialogContainer to a dialog's already-created overlay.\n   * @param overlay Reference to the dialog's underlying overlay.\n   * @param config The dialog configuration.\n   * @returns A promise resolving to a ComponentRef for the attached container.\n   */\n  private _attachDialogContainer(overlay: OverlayRef, config: MatDialogConfig): MatDialogContainer {\n    const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n    const injector = new PortalInjector(userInjector || this._injector, new WeakMap([\n      [MatDialogConfig, config]\n    ]));\n    const containerPortal =\n        new ComponentPortal(MatDialogContainer, config.viewContainerRef, injector);\n    const containerRef = overlay.attach<MatDialogContainer>(containerPortal);\n\n    return containerRef.instance;\n  }\n\n  /**\n   * Attaches the user-provided component to the already-created MatDialogContainer.\n   * @param componentOrTemplateRef The type of component being loaded into the dialog,\n   *     or a TemplateRef to instantiate as the content.\n   * @param dialogContainer Reference to the wrapping MatDialogContainer.\n   * @param overlayRef Reference to the overlay in which the dialog resides.\n   * @param config The dialog configuration.\n   * @returns A promise resolving to the MatDialogRef that should be returned to the user.\n   */\n  private _attachDialogContent<T, R>(\n      componentOrTemplateRef: ComponentType<T> | TemplateRef<T>,\n      dialogContainer: MatDialogContainer,\n      overlayRef: OverlayRef,\n      config: MatDialogConfig): MatDialogRef<T, R> {\n\n    // Create a reference to the dialog we're creating in order to give the user a handle\n    // to modify and close it.\n    const dialogRef =\n        new MatDialogRef<T, R>(overlayRef, dialogContainer, this._location, config.id);\n\n    // When the dialog backdrop is clicked, we want to close it.\n    if (config.hasBackdrop) {\n      overlayRef.backdropClick().subscribe(() => {\n        if (!dialogRef.disableClose) {\n          dialogRef.close();\n        }\n      });\n    }\n\n    if (componentOrTemplateRef instanceof TemplateRef) {\n      dialogContainer.attachTemplatePortal(\n        new TemplatePortal<T>(componentOrTemplateRef, null!,\n          <any>{ $implicit: config.data, dialogRef }));\n    } else {\n      const injector = this._createInjector<T>(config, dialogRef, dialogContainer);\n      const contentRef = dialogContainer.attachComponentPortal<T>(\n          new ComponentPortal(componentOrTemplateRef, undefined, injector));\n      dialogRef.componentInstance = contentRef.instance;\n    }\n\n    dialogRef\n      .updateSize(config.width, config.height)\n      .updatePosition(config.position);\n\n    return dialogRef;\n  }\n\n  /**\n   * Creates a custom injector to be used inside the dialog. This allows a component loaded inside\n   * of a dialog to close itself and, optionally, to return a value.\n   * @param config Config object that is used to construct the dialog.\n   * @param dialogRef Reference to the dialog.\n   * @param container Dialog container element that wraps all of the contents.\n   * @returns The custom injector that can be used inside the dialog.\n   */\n  private _createInjector<T>(\n      config: MatDialogConfig,\n      dialogRef: MatDialogRef<T>,\n      dialogContainer: MatDialogContainer): PortalInjector {\n\n    const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n\n    // The MatDialogContainer is injected in the portal as the MatDialogContainer and the dialog's\n    // content are created out of the same ViewContainerRef and as such, are siblings for injector\n    // purposes. To allow the hierarchy that is expected, the MatDialogContainer is explicitly\n    // added to the injection tokens.\n    const injectionTokens = new WeakMap<any, any>([\n      [MatDialogContainer, dialogContainer],\n      [MAT_DIALOG_DATA, config.data],\n      [MatDialogRef, dialogRef]\n    ]);\n\n    if (config.direction &&\n        (!userInjector || !userInjector.get<Directionality | null>(Directionality, null))) {\n      injectionTokens.set(Directionality, {\n        value: config.direction,\n        change: observableOf()\n      });\n    }\n\n    return new PortalInjector(userInjector || this._injector, injectionTokens);\n  }\n\n  /**\n   * Removes a dialog from the array of open dialogs.\n   * @param dialogRef Dialog to be removed.\n   */\n  private _removeOpenDialog(dialogRef: MatDialogRef<any>) {\n    const index = this.openDialogs.indexOf(dialogRef);\n\n    if (index > -1) {\n      this.openDialogs.splice(index, 1);\n\n      // If all the dialogs were closed, remove/restore the `aria-hidden`\n      // to a the siblings and emit to the `afterAllClosed` stream.\n      if (!this.openDialogs.length) {\n        this._ariaHiddenElements.forEach((previousValue, element) => {\n          if (previousValue) {\n            element.setAttribute('aria-hidden', previousValue);\n          } else {\n            element.removeAttribute('aria-hidden');\n          }\n        });\n\n        this._ariaHiddenElements.clear();\n        this._afterAllClosed.next();\n      }\n    }\n  }\n\n  /**\n   * Hides all of the content that isn't an overlay from assistive technology.\n   */\n  private _hideNonDialogContentFromAssistiveTechnology() {\n    const overlayContainer = this._overlayContainer.getContainerElement();\n\n    // Ensure that the overlay container is attached to the DOM.\n    if (overlayContainer.parentElement) {\n      const siblings = overlayContainer.parentElement.children;\n\n      for (let i = siblings.length - 1; i > -1; i--) {\n        let sibling = siblings[i];\n\n        if (sibling !== overlayContainer &&\n          sibling.nodeName !== 'SCRIPT' &&\n          sibling.nodeName !== 'STYLE' &&\n          !sibling.hasAttribute('aria-live')) {\n\n          this._ariaHiddenElements.set(sibling, sibling.getAttribute('aria-hidden'));\n          sibling.setAttribute('aria-hidden', 'true');\n        }\n      }\n    }\n\n  }\n\n}\n\n/**\n * Applies default options to the dialog config.\n * @param config Config to be modified.\n * @param defaultOptions Default options provided.\n * @returns The new configuration object.\n */\nfunction _applyConfigDefaults(\n    config?: MatDialogConfig, defaultOptions?: MatDialogConfig): MatDialogConfig {\n  return {...defaultOptions, ...config};\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Directive,\n  Input,\n  OnChanges,\n  OnInit,\n  Optional,\n  SimpleChanges,\n  ElementRef,\n} from '@angular/core';\nimport {MatDialog} from './dialog';\nimport {MatDialogRef} from './dialog-ref';\n\n/** Counter used to generate unique IDs for dialog elements. */\nlet dialogElementUid = 0;\n\n/**\n * Button that will close the current dialog.\n */\n@Directive({\n  selector: `button[mat-dialog-close], button[matDialogClose]`,\n  exportAs: 'matDialogClose',\n  host: {\n    '(click)': 'dialogRef.close(dialogResult)',\n    '[attr.aria-label]': 'ariaLabel',\n    'type': 'button', // Prevents accidental form submits.\n  }\n})\nexport class MatDialogClose implements OnInit, OnChanges {\n  /** Screenreader label for the button. */\n  @Input('aria-label') ariaLabel: string = 'Close dialog';\n\n  /** Dialog close input. */\n  @Input('mat-dialog-close') dialogResult: any;\n\n  @Input('matDialogClose') _matDialogClose: any;\n\n  constructor(\n    @Optional() public dialogRef: MatDialogRef<any>,\n    private _elementRef: ElementRef,\n    private _dialog: MatDialog) {}\n\n  ngOnInit() {\n    if (!this.dialogRef) {\n      // When this directive is included in a dialog via TemplateRef (rather than being\n      // in a Component), the DialogRef isn't available via injection because embedded\n      // views cannot be given a custom injector. Instead, we look up the DialogRef by\n      // ID. This must occur in `onInit`, as the ID binding for the dialog container won't\n      // be resolved at constructor time.\n      this.dialogRef = getClosestDialog(this._elementRef, this._dialog.openDialogs)!;\n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    const proxiedChange = changes._matDialogClose || changes._matDialogCloseResult;\n\n    if (proxiedChange) {\n      this.dialogResult = proxiedChange.currentValue;\n    }\n  }\n}\n\n/**\n * Title of a dialog element. Stays fixed to the top of the dialog when scrolling.\n */\n@Directive({\n  selector: '[mat-dialog-title], [matDialogTitle]',\n  exportAs: 'matDialogTitle',\n  host: {\n    'class': 'mat-dialog-title',\n    '[id]': 'id',\n  },\n})\nexport class MatDialogTitle implements OnInit {\n  @Input() id = `mat-dialog-title-${dialogElementUid++}`;\n\n  constructor(\n    @Optional() private _dialogRef: MatDialogRef<any>,\n    private _elementRef: ElementRef,\n    private _dialog: MatDialog) {}\n\n  ngOnInit() {\n    if (!this._dialogRef) {\n      this._dialogRef = getClosestDialog(this._elementRef, this._dialog.openDialogs)!;\n    }\n\n    if (this._dialogRef) {\n      Promise.resolve().then(() => {\n        const container = this._dialogRef._containerInstance;\n\n        if (container && !container._ariaLabelledBy) {\n          container._ariaLabelledBy = this.id;\n        }\n      });\n    }\n  }\n}\n\n\n/**\n * Scrollable content container of a dialog.\n */\n@Directive({\n  selector: `[mat-dialog-content], mat-dialog-content, [matDialogContent]`,\n  host: {'class': 'mat-dialog-content'}\n})\nexport class MatDialogContent {}\n\n\n/**\n * Container for the bottom action buttons in a dialog.\n * Stays fixed to the bottom when scrolling.\n */\n@Directive({\n  selector: `[mat-dialog-actions], mat-dialog-actions, [matDialogActions]`,\n  host: {'class': 'mat-dialog-actions'}\n})\nexport class MatDialogActions {}\n\n\n/**\n * Finds the closest MatDialogRef to an element by looking at the DOM.\n * @param element Element relative to which to look for a dialog.\n * @param openDialogs References to the currently-open dialogs.\n */\nfunction getClosestDialog(element: ElementRef, openDialogs: MatDialogRef<any>[]) {\n  let parent: HTMLElement | null = element.nativeElement.parentElement;\n\n  while (parent && !parent.classList.contains('mat-dialog-container')) {\n    parent = parent.parentElement;\n  }\n\n  return parent ? openDialogs.find(dialog => dialog.id === parent!.id) : null;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MAT_DIALOG_SCROLL_STRATEGY_PROVIDER, MatDialog} from './dialog';\nimport {MatDialogContainer} from './dialog-container';\nimport {\n  MatDialogActions,\n  MatDialogClose,\n  MatDialogContent,\n  MatDialogTitle,\n} from './dialog-content-directives';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    OverlayModule,\n    PortalModule,\n    MatCommonModule,\n  ],\n  exports: [\n    MatDialogContainer,\n    MatDialogClose,\n    MatDialogTitle,\n    MatDialogContent,\n    MatDialogActions,\n    MatCommonModule,\n  ],\n  declarations: [\n    MatDialogContainer,\n    MatDialogClose,\n    MatDialogTitle,\n    MatDialogActions,\n    MatDialogContent,\n  ],\n  providers: [\n    MatDialog,\n    MAT_DIALOG_SCROLL_STRATEGY_PROVIDER,\n  ],\n  entryComponents: [MatDialogContainer],\n})\nexport class MatDialogModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CdkTextareaAutosize} from '@angular/cdk/text-field';\nimport {Directive, Input} from '@angular/core';\n\n// TODO(devversion): Workaround for https://github.com/angular/material2/issues/12760\nexport const _CdkTextareaAutosize = CdkTextareaAutosize;\n\n/**\n * Directive to automatically resize a textarea to fit its content.\n * @deprecated Use `cdkTextareaAutosize` from `@angular/cdk/text-field` instead.\n * @breaking-change 7.0.0\n */\n@Directive({\n  selector: 'textarea[mat-autosize], textarea[matTextareaAutosize]',\n  exportAs: 'matTextareaAutosize',\n  inputs: ['cdkAutosizeMinRows', 'cdkAutosizeMaxRows'],\n  host: {\n    'class': 'cdk-textarea-autosize mat-autosize',\n    // Textarea elements that have the directive applied should have a single row by default.\n    // Browsers normally show two rows by default and therefore this limits the minRows binding.\n    'rows': '1',\n    '(input)': '_noopInputHandler()',\n  },\n})\nexport class MatTextareaAutosize extends _CdkTextareaAutosize {\n  @Input()\n  get matAutosizeMinRows(): number { return this.minRows; }\n  set matAutosizeMinRows(value: number) { this.minRows = value; }\n\n  @Input()\n  get matAutosizeMaxRows(): number { return this.maxRows; }\n  set matAutosizeMaxRows(value: number) { this.maxRows = value; }\n\n  @Input('mat-autosize')\n  get matAutosize(): boolean { return this.enabled; }\n  set matAutosize(value: boolean) { this.enabled = value; }\n\n  @Input()\n  get matTextareaAutosize(): boolean { return this.enabled; }\n  set matTextareaAutosize(value: boolean) { this.enabled = value; }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {InjectionToken} from '@angular/core';\n\n\n/**\n * This token is used to inject the object whose value should be set into `MatInput`. If none is\n * provided, the native `HTMLInputElement` is used. Directives like `MatDatepickerInput` can provide\n * themselves for this token, in order to make `MatInput` delegate the getting and setting of the\n * value to them.\n */\nexport const MAT_INPUT_VALUE_ACCESSOR =\n    new InjectionToken<{value: any}>('MAT_INPUT_VALUE_ACCESSOR');\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {getSupportedInputTypes, Platform} from '@angular/cdk/platform';\nimport {\n  Directive,\n  DoCheck,\n  ElementRef,\n  Inject,\n  Input,\n  OnChanges,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Self,\n  NgZone,\n} from '@angular/core';\nimport {FormGroupDirective, NgControl, NgForm} from '@angular/forms';\nimport {CanUpdateErrorState, ErrorStateMatcher, mixinErrorState} from '@angular/material/core';\nimport {MatFormFieldControl} from '@angular/material/form-field';\nimport {Subject} from 'rxjs';\nimport {AutofillMonitor} from '@angular/cdk/text-field';\nimport {getMatInputUnsupportedTypeError} from './input-errors';\nimport {MAT_INPUT_VALUE_ACCESSOR} from './input-value-accessor';\n\n\n// Invalid input type. Using one of these will throw an MatInputUnsupportedTypeError.\nconst MAT_INPUT_INVALID_TYPES = [\n  'button',\n  'checkbox',\n  'file',\n  'hidden',\n  'image',\n  'radio',\n  'range',\n  'reset',\n  'submit'\n];\n\nlet nextUniqueId = 0;\n\n// Boilerplate for applying mixins to MatInput.\n/** @docs-private */\nexport class MatInputBase {\n  constructor(public _defaultErrorStateMatcher: ErrorStateMatcher,\n              public _parentForm: NgForm,\n              public _parentFormGroup: FormGroupDirective,\n              /** @docs-private */\n              public ngControl: NgControl) {}\n}\nexport const _MatInputMixinBase = mixinErrorState(MatInputBase);\n\n/** Directive that allows a native input to work inside a `MatFormField`. */\n@Directive({\n  selector: `input[matInput], textarea[matInput]`,\n  exportAs: 'matInput',\n  host: {\n    /**\n     * @breaking-change 7.0.0 remove .mat-form-field-autofill-control in favor of AutofillMonitor.\n     */\n    'class': 'mat-input-element mat-form-field-autofill-control',\n    '[class.mat-input-server]': '_isServer',\n    // Native input properties that are overwritten by Angular inputs need to be synced with\n    // the native input element. Otherwise property bindings for those don't work.\n    '[attr.id]': 'id',\n    '[attr.placeholder]': 'placeholder',\n    '[disabled]': 'disabled',\n    '[required]': 'required',\n    '[readonly]': 'readonly',\n    '[attr.aria-describedby]': '_ariaDescribedby || null',\n    '[attr.aria-invalid]': 'errorState',\n    '[attr.aria-required]': 'required.toString()',\n    '(blur)': '_focusChanged(false)',\n    '(focus)': '_focusChanged(true)',\n    '(input)': '_onInput()',\n  },\n  providers: [{provide: MatFormFieldControl, useExisting: MatInput}],\n})\nexport class MatInput extends _MatInputMixinBase implements MatFormFieldControl<any>, OnChanges,\n    OnDestroy, OnInit, DoCheck, CanUpdateErrorState {\n  protected _uid = `mat-input-${nextUniqueId++}`;\n  protected _previousNativeValue: any;\n  private _inputValueAccessor: {value: any};\n  /** The aria-describedby attribute on the input for improved a11y. */\n  _ariaDescribedby: string;\n\n  /** Whether the component is being rendered on the server. */\n  _isServer = false;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  focused: boolean = false;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  readonly stateChanges: Subject<void> = new Subject<void>();\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  controlType: string = 'mat-input';\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  autofilled = false;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get disabled(): boolean {\n    if (this.ngControl && this.ngControl.disabled !== null) {\n      return this.ngControl.disabled;\n    }\n    return this._disabled;\n  }\n  set disabled(value: boolean) {\n    this._disabled = coerceBooleanProperty(value);\n\n    // Browsers may not fire the blur event if the input is disabled too quickly.\n    // Reset from here to ensure that the element doesn't become stuck.\n    if (this.focused) {\n      this.focused = false;\n      this.stateChanges.next();\n    }\n  }\n  protected _disabled = false;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get id(): string { return this._id; }\n  set id(value: string) { this._id = value || this._uid; }\n  protected _id: string;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input() placeholder: string;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get required(): boolean { return this._required; }\n  set required(value: boolean) { this._required = coerceBooleanProperty(value); }\n  protected _required = false;\n\n  /** Input type of the element. */\n  @Input()\n  get type(): string { return this._type; }\n  set type(value: string) {\n    this._type = value || 'text';\n    this._validateType();\n\n    // When using Angular inputs, developers are no longer able to set the properties on the native\n    // input element. To ensure that bindings for `type` work, we need to sync the setter\n    // with the native property. Textarea elements don't support the type property or attribute.\n    if (!this._isTextarea() && getSupportedInputTypes().has(this._type)) {\n      this._elementRef.nativeElement.type = this._type;\n    }\n  }\n  protected _type = 'text';\n\n  /** An object used to control when error messages are shown. */\n  @Input() errorStateMatcher: ErrorStateMatcher;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get value(): string { return this._inputValueAccessor.value; }\n  set value(value: string) {\n    if (value !== this.value) {\n      this._inputValueAccessor.value = value;\n      this.stateChanges.next();\n    }\n  }\n\n  /** Whether the element is readonly. */\n  @Input()\n  get readonly(): boolean { return this._readonly; }\n  set readonly(value: boolean) { this._readonly = coerceBooleanProperty(value); }\n  private _readonly = false;\n\n  protected _neverEmptyInputTypes = [\n    'date',\n    'datetime',\n    'datetime-local',\n    'month',\n    'time',\n    'week'\n  ].filter(t => getSupportedInputTypes().has(t));\n\n  constructor(protected _elementRef: ElementRef,\n              protected _platform: Platform,\n              /** @docs-private */\n              @Optional() @Self() public ngControl: NgControl,\n              @Optional() _parentForm: NgForm,\n              @Optional() _parentFormGroup: FormGroupDirective,\n              _defaultErrorStateMatcher: ErrorStateMatcher,\n              @Optional() @Self() @Inject(MAT_INPUT_VALUE_ACCESSOR) inputValueAccessor: any,\n              private _autofillMonitor: AutofillMonitor,\n              ngZone: NgZone) {\n    super(_defaultErrorStateMatcher, _parentForm, _parentFormGroup, ngControl);\n    // If no input value accessor was explicitly specified, use the element as the input value\n    // accessor.\n    this._inputValueAccessor = inputValueAccessor || this._elementRef.nativeElement;\n\n    this._previousNativeValue = this.value;\n\n    // Force setter to be called in case id was not specified.\n    this.id = this.id;\n\n    // On some versions of iOS the caret gets stuck in the wrong place when holding down the delete\n    // key. In order to get around this we need to \"jiggle\" the caret loose. Since this bug only\n    // exists on iOS, we only bother to install the listener on iOS.\n    if (_platform.IOS) {\n      ngZone.runOutsideAngular(() => {\n        _elementRef.nativeElement.addEventListener('keyup', (event: Event) => {\n          let el = event.target as HTMLInputElement;\n          if (!el.value && !el.selectionStart && !el.selectionEnd) {\n            // Note: Just setting `0, 0` doesn't fix the issue. Setting\n            // `1, 1` fixes it for the first time that you type text and\n            // then hold delete. Toggling to `1, 1` and then back to\n            // `0, 0` seems to completely fix it.\n            el.setSelectionRange(1, 1);\n            el.setSelectionRange(0, 0);\n          }\n        });\n      });\n    }\n\n    this._isServer = !this._platform.isBrowser;\n  }\n\n  ngOnInit() {\n    if (this._platform.isBrowser) {\n      this._autofillMonitor.monitor(this._elementRef.nativeElement).subscribe(event => {\n        this.autofilled = event.isAutofilled;\n        this.stateChanges.next();\n      });\n    }\n  }\n\n  ngOnChanges() {\n    this.stateChanges.next();\n  }\n\n  ngOnDestroy() {\n    this.stateChanges.complete();\n\n    if (this._platform.isBrowser) {\n      this._autofillMonitor.stopMonitoring(this._elementRef.nativeElement);\n    }\n  }\n\n  ngDoCheck() {\n    if (this.ngControl) {\n      // We need to re-evaluate this on every change detection cycle, because there are some\n      // error triggers that we can't subscribe to (e.g. parent form submissions). This means\n      // that whatever logic is in here has to be super lean or we risk destroying the performance.\n      this.updateErrorState();\n    }\n\n    // We need to dirty-check the native element's value, because there are some cases where\n    // we won't be notified when it changes (e.g. the consumer isn't using forms or they're\n    // updating the value using `emitEvent: false`).\n    this._dirtyCheckNativeValue();\n  }\n\n  /** Focuses the input. */\n  focus(): void { this._elementRef.nativeElement.focus(); }\n\n  /** Callback for the cases where the focused state of the input changes. */\n  _focusChanged(isFocused: boolean) {\n    if (isFocused !== this.focused && !this.readonly) {\n      this.focused = isFocused;\n      this.stateChanges.next();\n    }\n  }\n\n  _onInput() {\n    // This is a noop function and is used to let Angular know whenever the value changes.\n    // Angular will run a new change detection each time the `input` event has been dispatched.\n    // It's necessary that Angular recognizes the value change, because when floatingLabel\n    // is set to false and Angular forms aren't used, the placeholder won't recognize the\n    // value changes and will not disappear.\n    // Listening to the input event wouldn't be necessary when the input is using the\n    // FormsModule or ReactiveFormsModule, because Angular forms also listens to input events.\n  }\n\n  /** Does some manual dirty checking on the native input `value` property. */\n  protected _dirtyCheckNativeValue() {\n    const newValue = this.value;\n\n    if (this._previousNativeValue !== newValue) {\n      this._previousNativeValue = newValue;\n      this.stateChanges.next();\n    }\n  }\n\n  /** Make sure the input is a supported type. */\n  protected _validateType() {\n    if (MAT_INPUT_INVALID_TYPES.indexOf(this._type) > -1) {\n      throw getMatInputUnsupportedTypeError(this._type);\n    }\n  }\n\n  /** Checks whether the input type is one of the types that are never empty. */\n  protected _isNeverEmpty() {\n    return this._neverEmptyInputTypes.indexOf(this._type) > -1;\n  }\n\n  /** Checks whether the input is invalid based on the native validation. */\n  protected _isBadInput() {\n    // The `validity` property won't be present on platform-server.\n    let validity = (this._elementRef.nativeElement as HTMLInputElement).validity;\n    return validity && validity.badInput;\n  }\n\n  /** Determines if the component host is a textarea. */\n  protected _isTextarea() {\n    return this._elementRef.nativeElement.nodeName.toLowerCase() === 'textarea';\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  get empty(): boolean {\n    return !this._isNeverEmpty() && !this._elementRef.nativeElement.value && !this._isBadInput() &&\n        !this.autofilled;\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  get shouldLabelFloat(): boolean { return this.focused || !this.empty; }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  setDescribedByIds(ids: string[]) { this._ariaDescribedby = ids.join(' '); }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  onContainerClick() { this.focus(); }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {TextFieldModule} from '@angular/cdk/text-field';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {ErrorStateMatcher} from '@angular/material/core';\nimport {MatFormFieldModule} from '@angular/material/form-field';\nimport {MatTextareaAutosize} from './autosize';\nimport {MatInput} from './input';\n\n\n@NgModule({\n  declarations: [MatInput, MatTextareaAutosize],\n  imports: [\n    CommonModule,\n    TextFieldModule,\n    MatFormFieldModule,\n  ],\n  exports: [\n    TextFieldModule,\n    // We re-export the `MatFormFieldModule` since `MatInput` will almost always\n    // be used together with `MatFormField`.\n    MatFormFieldModule,\n    MatInput,\n    MatTextareaAutosize,\n  ],\n  providers: [ErrorStateMatcher],\n})\nexport class MatInputModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable} from '@angular/core';\nimport {Subject} from 'rxjs';\n\n\n/** Datepicker data that requires internationalization. */\n@Injectable({providedIn: 'root'})\nexport class MatDatepickerIntl {\n  /**\n   * Stream that emits whenever the labels here are changed. Use this to notify\n   * components if the labels have changed after initialization.\n   */\n  readonly changes: Subject<void> = new Subject<void>();\n\n  /** A label for the calendar popup (used by screen readers). */\n  calendarLabel: string = 'Calendar';\n\n  /** A label for the button used to open the calendar popup (used by screen readers). */\n  openCalendarLabel: string = 'Open calendar';\n\n  /** A label for the previous month button (used by screen readers). */\n  prevMonthLabel: string = 'Previous month';\n\n  /** A label for the next month button (used by screen readers). */\n  nextMonthLabel: string = 'Next month';\n\n  /** A label for the previous year button (used by screen readers). */\n  prevYearLabel: string = 'Previous year';\n\n  /** A label for the next year button (used by screen readers). */\n  nextYearLabel: string = 'Next year';\n\n  /** A label for the previous multi-year button (used by screen readers). */\n  prevMultiYearLabel: string = 'Previous 20 years';\n\n  /** A label for the next multi-year button (used by screen readers). */\n  nextMultiYearLabel: string = 'Next 20 years';\n\n  /** A label for the 'switch to month view' button (used by screen readers). */\n  switchToMonthViewLabel: string = 'Choose date';\n\n  /** A label for the 'switch to year view' button (used by screen readers). */\n  switchToMultiYearViewLabel: string = 'Choose month and year';\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ViewEncapsulation,\n  ChangeDetectionStrategy,\n  Directive,\n  Input,\n} from '@angular/core';\n\n\n/**\n * Content of a card, needed as it's used as a selector in the API.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-card-content',\n  host: {'class': 'mat-card-content'}\n})\nexport class MatCardContent {}\n\n/**\n * Title of a card, needed as it's used as a selector in the API.\n * @docs-private\n */\n@Directive({\n  selector: `mat-card-title, [mat-card-title], [matCardTitle]`,\n  host: {\n    'class': 'mat-card-title'\n  }\n})\nexport class MatCardTitle {}\n\n/**\n * Sub-title of a card, needed as it's used as a selector in the API.\n * @docs-private\n */\n@Directive({\n  selector: `mat-card-subtitle, [mat-card-subtitle], [matCardSubtitle]`,\n  host: {\n    'class': 'mat-card-subtitle'\n  }\n})\nexport class MatCardSubtitle {}\n\n/**\n * Action section of a card, needed as it's used as a selector in the API.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-card-actions',\n  exportAs: 'matCardActions',\n  host: {\n    'class': 'mat-card-actions',\n    '[class.mat-card-actions-align-end]': 'align === \"end\"',\n  }\n})\nexport class MatCardActions {\n  /** Position of the actions inside the card. */\n  @Input() align: 'start' | 'end' = 'start';\n}\n\n/**\n * Footer of a card, needed as it's used as a selector in the API.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-card-footer',\n  host: {'class': 'mat-card-footer'}\n})\nexport class MatCardFooter {}\n\n/**\n * Image used in a card, needed to add the mat- CSS styling.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-card-image], [matCardImage]',\n  host: {'class': 'mat-card-image'}\n})\nexport class MatCardImage {}\n\n/**\n * Image used in a card, needed to add the mat- CSS styling.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-card-sm-image], [matCardImageSmall]',\n  host: {'class': 'mat-card-sm-image'}\n})\nexport class MatCardSmImage {}\n\n/**\n * Image used in a card, needed to add the mat- CSS styling.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-card-md-image], [matCardImageMedium]',\n  host: {'class': 'mat-card-md-image'}\n})\nexport class MatCardMdImage {}\n\n/**\n * Image used in a card, needed to add the mat- CSS styling.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-card-lg-image], [matCardImageLarge]',\n  host: {'class': 'mat-card-lg-image'}\n})\nexport class MatCardLgImage {}\n\n/**\n * Large image used in a card, needed to add the mat- CSS styling.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-card-xl-image], [matCardImageXLarge]',\n  host: {'class': 'mat-card-xl-image'}\n})\nexport class MatCardXlImage {}\n\n/**\n * Avatar image used in a card, needed to add the mat- CSS styling.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-card-avatar], [matCardAvatar]',\n  host: {'class': 'mat-card-avatar'}\n})\nexport class MatCardAvatar {}\n\n\n/**\n * A basic content container component that adds the styles of a Material design card.\n *\n * While this component can be used alone, it also provides a number\n * of preset styles for common card sections, including:\n * - mat-card-title\n * - mat-card-subtitle\n * - mat-card-content\n * - mat-card-actions\n * - mat-card-footer\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-card',\n  exportAs: 'matCard',\n  templateUrl: 'card.html',\n  styleUrls: ['card.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {'class': 'mat-card'}\n})\nexport class MatCard {}\n\n\n/**\n * Component intended to be used within the `<mat-card>` component. It adds styles for a\n * preset header section (i.e. a title, subtitle, and avatar layout).\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-card-header',\n  templateUrl: 'card-header.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {'class': 'mat-card-header'}\n})\nexport class MatCardHeader {}\n\n\n/**\n * Component intended to be used within the `<mat-card>` component. It adds styles for a preset\n * layout that groups an image with a title section.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-card-title-group',\n  templateUrl: 'card-title-group.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {'class': 'mat-card-title-group'}\n})\nexport class MatCardTitleGroup {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {\n  MatCard,\n  MatCardActions,\n  MatCardAvatar,\n  MatCardContent,\n  MatCardFooter,\n  MatCardHeader,\n  MatCardImage,\n  MatCardLgImage,\n  MatCardMdImage,\n  MatCardSmImage,\n  MatCardSubtitle,\n  MatCardTitle,\n  MatCardTitleGroup,\n  MatCardXlImage,\n} from './card';\n\n\n@NgModule({\n  imports: [MatCommonModule],\n  exports: [\n    MatCard,\n    MatCardHeader,\n    MatCardTitleGroup,\n    MatCardContent,\n    MatCardTitle,\n    MatCardSubtitle,\n    MatCardActions,\n    MatCardFooter,\n    MatCardSmImage,\n    MatCardMdImage,\n    MatCardLgImage,\n    MatCardImage,\n    MatCardXlImage,\n    MatCardAvatar,\n    MatCommonModule,\n  ],\n  declarations: [\n    MatCard, MatCardHeader, MatCardTitleGroup, MatCardContent, MatCardTitle, MatCardSubtitle,\n    MatCardActions, MatCardFooter, MatCardSmImage, MatCardMdImage, MatCardLgImage, MatCardImage,\n    MatCardXlImage, MatCardAvatar,\n  ],\n})\nexport class MatCardModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {InjectionToken} from '@angular/core';\n\n\n/**\n * Checkbox click action when user click on input element.\n * noop: Do not toggle checked or indeterminate.\n * check: Only toggle checked status, ignore indeterminate.\n * check-indeterminate: Toggle checked status, set indeterminate to false. Default behavior.\n * undefined: Same as `check-indeterminate`.\n */\nexport type MatCheckboxClickAction = 'noop' | 'check' | 'check-indeterminate' | undefined;\n\n/**\n * Injection token that can be used to specify the checkbox click behavior.\n */\nexport const MAT_CHECKBOX_CLICK_ACTION =\n    new InjectionToken<MatCheckboxClickAction>('mat-checkbox-click-action');\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor, FocusOrigin} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  AfterViewInit,\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  Output,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {\n  CanColor,\n  CanDisable,\n  CanDisableRipple,\n  HasTabIndex,\n  MatRipple,\n  mixinColor,\n  mixinDisabled,\n  mixinDisableRipple,\n  mixinTabIndex,\n  RippleRef,\n} from '@angular/material/core';\nimport {MAT_CHECKBOX_CLICK_ACTION, MatCheckboxClickAction} from './checkbox-config';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\n\n\n// Increasing integer for generating unique ids for checkbox components.\nlet nextUniqueId = 0;\n\n/**\n * Provider Expression that allows mat-checkbox to register as a ControlValueAccessor.\n * This allows it to support [(ngModel)].\n * @docs-private\n */\nexport const MAT_CHECKBOX_CONTROL_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatCheckbox),\n  multi: true\n};\n\n/**\n * Represents the different states that require custom transitions between them.\n * @docs-private\n */\nexport enum TransitionCheckState {\n  /** The initial state of the component before any user interaction. */\n  Init,\n  /** The state representing the component when it's becoming checked. */\n  Checked,\n  /** The state representing the component when it's becoming unchecked. */\n  Unchecked,\n  /** The state representing the component when it's becoming indeterminate. */\n  Indeterminate\n}\n\n/** Change event object emitted by MatCheckbox. */\nexport class MatCheckboxChange {\n  /** The source MatCheckbox of the event. */\n  source: MatCheckbox;\n  /** The new `checked` value of the checkbox. */\n  checked: boolean;\n}\n\n// Boilerplate for applying mixins to MatCheckbox.\n/** @docs-private */\nexport class MatCheckboxBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatCheckboxMixinBase =\n  mixinTabIndex(mixinColor(mixinDisableRipple(mixinDisabled(MatCheckboxBase)), 'accent'));\n\n\n/**\n * A material design checkbox component. Supports all of the functionality of an HTML5 checkbox,\n * and exposes a similar API. A MatCheckbox can be either checked, unchecked, indeterminate, or\n * disabled. Note that all additional accessibility attributes are taken care of by the component,\n * so there is no need to provide them yourself. However, if you want to omit a label and still\n * have the checkbox be accessible, you may supply an [aria-label] input.\n * See: https://material.io/design/components/selection-controls.html\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-checkbox',\n  templateUrl: 'checkbox.html',\n  styleUrls: ['checkbox.css'],\n  exportAs: 'matCheckbox',\n  host: {\n    'class': 'mat-checkbox',\n    '[id]': 'id',\n    '[class.mat-checkbox-indeterminate]': 'indeterminate',\n    '[class.mat-checkbox-checked]': 'checked',\n    '[class.mat-checkbox-disabled]': 'disabled',\n    '[class.mat-checkbox-label-before]': 'labelPosition == \"before\"',\n    '[class._mat-animation-noopable]': `_animationMode === 'NoopAnimations'`,\n  },\n  providers: [MAT_CHECKBOX_CONTROL_VALUE_ACCESSOR],\n  inputs: ['disableRipple', 'color', 'tabIndex'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class MatCheckbox extends _MatCheckboxMixinBase implements ControlValueAccessor,\n    AfterViewInit, OnDestroy, CanColor, CanDisable, HasTabIndex, CanDisableRipple {\n\n  /**\n   * Attached to the aria-label attribute of the host element. In most cases, arial-labelledby will\n   * take precedence so this may be omitted.\n   */\n  @Input('aria-label') ariaLabel: string = '';\n\n  /**\n   * Users can specify the `aria-labelledby` attribute which will be forwarded to the input element\n   */\n  @Input('aria-labelledby') ariaLabelledby: string | null = null;\n\n  private _uniqueId: string = `mat-checkbox-${++nextUniqueId}`;\n\n  /** A unique id for the checkbox input. If none is supplied, it will be auto-generated. */\n  @Input() id: string = this._uniqueId;\n\n  /** Returns the unique id for the visual hidden input. */\n  get inputId(): string { return `${this.id || this._uniqueId}-input`; }\n\n  /** Whether the checkbox is required. */\n  @Input()\n  get required(): boolean { return this._required; }\n  set required(value: boolean) { this._required = coerceBooleanProperty(value); }\n  private _required: boolean;\n\n  /** Whether the label should appear after or before the checkbox. Defaults to 'after' */\n  @Input() labelPosition: 'before' | 'after' = 'after';\n\n  /** Name value will be applied to the input element if present */\n  @Input() name: string | null = null;\n\n  /** Event emitted when the checkbox's `checked` value changes. */\n  @Output() readonly change: EventEmitter<MatCheckboxChange> =\n      new EventEmitter<MatCheckboxChange>();\n\n  /** Event emitted when the checkbox's `indeterminate` value changes. */\n  @Output() readonly indeterminateChange: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n  /** The value attribute of the native input element */\n  @Input() value: string;\n\n  /** The native `<input type=\"checkbox\">` element */\n  @ViewChild('input') _inputElement: ElementRef;\n\n  /** Reference to the ripple instance of the checkbox. */\n  @ViewChild(MatRipple) ripple: MatRipple;\n\n  /**\n   * Called when the checkbox is blurred. Needed to properly implement ControlValueAccessor.\n   * @docs-private\n   */\n  _onTouched: () => any = () => {};\n\n  private _currentAnimationClass: string = '';\n\n  private _currentCheckState: TransitionCheckState = TransitionCheckState.Init;\n\n  private _controlValueAccessorChangeFn: (value: any) => void = () => {};\n\n  /** Reference to the focused state ripple. */\n  private _focusRipple: RippleRef | null;\n\n  constructor(elementRef: ElementRef,\n              private _changeDetectorRef: ChangeDetectorRef,\n              private _focusMonitor: FocusMonitor,\n              private _ngZone: NgZone,\n              @Attribute('tabindex') tabIndex: string,\n              @Optional() @Inject(MAT_CHECKBOX_CLICK_ACTION)\n                  private _clickAction: MatCheckboxClickAction,\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode?: string) {\n    super(elementRef);\n\n    this.tabIndex = parseInt(tabIndex) || 0;\n  }\n\n  ngAfterViewInit() {\n    this._focusMonitor\n      .monitor(this._inputElement)\n      .subscribe(focusOrigin => this._onInputFocusChange(focusOrigin));\n  }\n\n  ngOnDestroy() {\n    this._focusMonitor.stopMonitoring(this._inputElement);\n  }\n\n  /**\n   * Whether the checkbox is checked.\n   */\n  @Input()\n  get checked(): boolean { return this._checked; }\n  set checked(value: boolean) {\n    if (value != this.checked) {\n      this._checked = value;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n  private _checked: boolean = false;\n\n  /**\n   * Whether the checkbox is disabled. This fully overrides the implementation provided by\n   * mixinDisabled, but the mixin is still required because mixinTabIndex requires it.\n   */\n  @Input()\n  get disabled() { return this._disabled; }\n  set disabled(value: any) {\n    if (value != this.disabled) {\n      this._disabled = value;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n  private _disabled: boolean = false;\n\n  /**\n   * Whether the checkbox is indeterminate. This is also known as \"mixed\" mode and can be used to\n   * represent a checkbox with three states, e.g. a checkbox that represents a nested list of\n   * checkable items. Note that whenever checkbox is manually clicked, indeterminate is immediately\n   * set to false.\n   */\n  @Input()\n  get indeterminate(): boolean { return this._indeterminate; }\n  set indeterminate(value: boolean) {\n    const changed = value != this._indeterminate;\n    this._indeterminate = value;\n\n    if (changed) {\n      if (this._indeterminate) {\n        this._transitionCheckState(TransitionCheckState.Indeterminate);\n      } else {\n        this._transitionCheckState(\n          this.checked ? TransitionCheckState.Checked : TransitionCheckState.Unchecked);\n      }\n      this.indeterminateChange.emit(this._indeterminate);\n    }\n  }\n  private _indeterminate: boolean = false;\n\n  _isRippleDisabled() {\n    return this.disableRipple || this.disabled;\n  }\n\n  /** Method being called whenever the label text changes. */\n  _onLabelTextChange() {\n    // This method is getting called whenever the label of the checkbox changes.\n    // Since the checkbox uses the OnPush strategy we need to notify it about the change\n    // that has been recognized by the cdkObserveContent directive.\n    this._changeDetectorRef.markForCheck();\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  writeValue(value: any) {\n    this.checked = !!value;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnChange(fn: (value: any) => void) {\n    this._controlValueAccessorChangeFn = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnTouched(fn: any) {\n    this._onTouched = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  setDisabledState(isDisabled: boolean) {\n    this.disabled = isDisabled;\n  }\n\n  _getAriaChecked(): 'true' | 'false' | 'mixed' {\n    return this.checked ? 'true' : (this.indeterminate ? 'mixed' : 'false');\n  }\n\n  private _transitionCheckState(newState: TransitionCheckState) {\n    let oldState = this._currentCheckState;\n    let element: HTMLElement = this._elementRef.nativeElement;\n\n    if (oldState === newState) {\n      return;\n    }\n    if (this._currentAnimationClass.length > 0) {\n      element.classList.remove(this._currentAnimationClass);\n    }\n\n    this._currentAnimationClass = this._getAnimationClassForCheckStateTransition(\n        oldState, newState);\n    this._currentCheckState = newState;\n\n    if (this._currentAnimationClass.length > 0) {\n      element.classList.add(this._currentAnimationClass);\n\n      // Remove the animation class to avoid animation when the checkbox is moved between containers\n      const animationClass = this._currentAnimationClass;\n\n      this._ngZone.runOutsideAngular(() => {\n        setTimeout(() => {\n          element.classList.remove(animationClass);\n        }, 1000);\n      });\n    }\n  }\n\n  private _emitChangeEvent() {\n    let event = new MatCheckboxChange();\n    event.source = this;\n    event.checked = this.checked;\n\n    this._controlValueAccessorChangeFn(this.checked);\n    this.change.emit(event);\n  }\n\n  /** Function is called whenever the focus changes for the input element. */\n  private _onInputFocusChange(focusOrigin: FocusOrigin) {\n    // TODO(paul): support `program`. See https://github.com/angular/material2/issues/9889\n    if (!this._focusRipple && focusOrigin === 'keyboard') {\n      this._focusRipple = this.ripple.launch(0, 0, {persistent: true});\n    } else if (!focusOrigin) {\n      if (this._focusRipple) {\n        this._focusRipple.fadeOut();\n        this._focusRipple = null;\n      }\n\n      // When a focused element becomes disabled, the browser *immediately* fires a blur event.\n      // Angular does not expect events to be raised during change detection, so any state change\n      // (such as a form control's 'ng-touched') will cause a changed-after-checked error.\n      // See https://github.com/angular/angular/issues/17793. To work around this, we defer telling\n      // the form control it has been touched until the next tick.\n      Promise.resolve().then(() => this._onTouched());\n    }\n  }\n\n  /** Toggles the `checked` state of the checkbox. */\n  toggle(): void {\n    this.checked = !this.checked;\n  }\n\n  /**\n   * Event handler for checkbox input element.\n   * Toggles checked state if element is not disabled.\n   * Do not toggle on (change) event since IE doesn't fire change event when\n   *   indeterminate checkbox is clicked.\n   * @param event\n   */\n  _onInputClick(event: Event) {\n    // We have to stop propagation for click events on the visual hidden input element.\n    // By default, when a user clicks on a label element, a generated click event will be\n    // dispatched on the associated input element. Since we are using a label element as our\n    // root container, the click event on the `checkbox` will be executed twice.\n    // The real click event will bubble up, and the generated click event also tries to bubble up.\n    // This will lead to multiple click events.\n    // Preventing bubbling for the second event will solve that issue.\n    event.stopPropagation();\n\n    // If resetIndeterminate is false, and the current state is indeterminate, do nothing on click\n    if (!this.disabled && this._clickAction !== 'noop') {\n      // When user manually click on the checkbox, `indeterminate` is set to false.\n      if (this.indeterminate && this._clickAction !== 'check') {\n\n        Promise.resolve().then(() => {\n          this._indeterminate = false;\n          this.indeterminateChange.emit(this._indeterminate);\n        });\n      }\n\n      this.toggle();\n      this._transitionCheckState(\n          this._checked ? TransitionCheckState.Checked : TransitionCheckState.Unchecked);\n\n      // Emit our custom change event if the native input emitted one.\n      // It is important to only emit it, if the native input triggered one, because\n      // we don't want to trigger a change event, when the `checked` variable changes for example.\n      this._emitChangeEvent();\n    } else if (!this.disabled && this._clickAction === 'noop') {\n      // Reset native input when clicked with noop. The native checkbox becomes checked after\n      // click, reset it to be align with `checked` value of `mat-checkbox`.\n      this._inputElement.nativeElement.checked = this.checked;\n      this._inputElement.nativeElement.indeterminate = this.indeterminate;\n    }\n  }\n\n  /** Focuses the checkbox. */\n  focus(): void {\n    this._focusMonitor.focusVia(this._inputElement.nativeElement, 'keyboard');\n  }\n\n  _onInteractionEvent(event: Event) {\n    // We always have to stop propagation on the change event.\n    // Otherwise the change event, from the input element, will bubble up and\n    // emit its event object to the `change` output.\n    event.stopPropagation();\n  }\n\n  private _getAnimationClassForCheckStateTransition(\n      oldState: TransitionCheckState, newState: TransitionCheckState): string {\n    // Don't transition if animations are disabled.\n    if (this._animationMode === 'NoopAnimations') {\n      return '';\n    }\n\n    let animSuffix: string = '';\n\n    switch (oldState) {\n      case TransitionCheckState.Init:\n        // Handle edge case where user interacts with checkbox that does not have [(ngModel)] or\n        // [checked] bound to it.\n        if (newState === TransitionCheckState.Checked) {\n          animSuffix = 'unchecked-checked';\n        } else if (newState == TransitionCheckState.Indeterminate) {\n          animSuffix = 'unchecked-indeterminate';\n        } else {\n          return '';\n        }\n        break;\n      case TransitionCheckState.Unchecked:\n        animSuffix = newState === TransitionCheckState.Checked ?\n            'unchecked-checked' : 'unchecked-indeterminate';\n        break;\n      case TransitionCheckState.Checked:\n        animSuffix = newState === TransitionCheckState.Unchecked ?\n            'checked-unchecked' : 'checked-indeterminate';\n        break;\n      case TransitionCheckState.Indeterminate:\n        animSuffix = newState === TransitionCheckState.Checked ?\n            'indeterminate-checked' : 'indeterminate-unchecked';\n        break;\n    }\n\n    return `mat-checkbox-anim-${animSuffix}`;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Directive,\n  forwardRef,\n  Provider,\n} from '@angular/core';\nimport {\n  CheckboxRequiredValidator,\n  NG_VALIDATORS,\n} from '@angular/forms';\n\nexport const MAT_CHECKBOX_REQUIRED_VALIDATOR: Provider = {\n  provide: NG_VALIDATORS,\n  useExisting: forwardRef(() => MatCheckboxRequiredValidator),\n  multi: true\n};\n\n/**\n * Validator for Material checkbox's required attribute in template-driven checkbox.\n * Current CheckboxRequiredValidator only work with `input type=checkbox` and does not\n * work with `mat-checkbox`.\n */\n@Directive({\n  selector: `mat-checkbox[required][formControlName],\n             mat-checkbox[required][formControl], mat-checkbox[required][ngModel]`,\n  providers: [MAT_CHECKBOX_REQUIRED_VALIDATOR],\n  host: {'[attr.required]': 'required ? \"\" : null'}\n})\nexport class MatCheckboxRequiredValidator extends CheckboxRequiredValidator {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ObserversModule} from '@angular/cdk/observers';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {MatCheckbox} from './checkbox';\nimport {MatCheckboxRequiredValidator} from './checkbox-required-validator';\n\n\n@NgModule({\n  imports: [CommonModule, MatRippleModule, MatCommonModule, ObserversModule],\n  exports: [MatCheckbox, MatCheckboxRequiredValidator, MatCommonModule],\n  declarations: [MatCheckbox, MatCheckboxRequiredValidator],\n})\nexport class MatCheckboxModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusableOption} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {BACKSPACE, DELETE, SPACE} from '@angular/cdk/keycodes';\nimport {Platform} from '@angular/cdk/platform';\nimport {\n  ContentChild,\n  Directive,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  Output,\n} from '@angular/core';\nimport {\n  CanColor,\n  CanDisable,\n  CanDisableRipple,\n  MAT_RIPPLE_GLOBAL_OPTIONS,\n  mixinColor,\n  mixinDisabled,\n  mixinDisableRipple,\n  RippleConfig,\n  RippleGlobalOptions,\n  RippleRenderer,\n  RippleTarget\n} from '@angular/material/core';\nimport {Subject} from 'rxjs';\nimport {take} from 'rxjs/operators';\n\n\n/** Represents an event fired on an individual `mat-chip`. */\nexport interface MatChipEvent {\n  /** The chip the event was fired on. */\n  chip: MatChip;\n}\n\n/** Event object emitted by MatChip when selected or deselected. */\nexport class MatChipSelectionChange {\n  constructor(\n    /** Reference to the chip that emitted the event. */\n    public source: MatChip,\n    /** Whether the chip that emitted the event is selected. */\n    public selected: boolean,\n    /** Whether the selection change was a result of a user interaction. */\n    public isUserInput = false) { }\n}\n\n\n// Boilerplate for applying mixins to MatChip.\n/** @docs-private */\nexport class MatChipBase {\n  constructor(public _elementRef: ElementRef) {}\n}\n\nexport const _MatChipMixinBase =\n    mixinColor(mixinDisableRipple(mixinDisabled(MatChipBase)), 'primary');\n\nconst CHIP_ATTRIBUTE_NAMES = ['mat-basic-chip'];\n\n/**\n * Dummy directive to add CSS class to chip avatar.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-chip-avatar, [matChipAvatar]',\n  host: {'class': 'mat-chip-avatar'}\n})\nexport class MatChipAvatar {}\n\n/**\n * Dummy directive to add CSS class to chip trailing icon.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-chip-trailing-icon, [matChipTrailingIcon]',\n  host: {'class': 'mat-chip-trailing-icon'}\n})\nexport class MatChipTrailingIcon {}\n\n/**\n * Material design styled Chip component. Used inside the MatChipList component.\n */\n@Directive({\n  selector: `mat-basic-chip, [mat-basic-chip], mat-chip, [mat-chip]`,\n  inputs: ['color', 'disabled', 'disableRipple'],\n  exportAs: 'matChip',\n  host: {\n    'class': 'mat-chip',\n    '[attr.tabindex]': 'disabled ? null : -1',\n    'role': 'option',\n    '[class.mat-chip-selected]': 'selected',\n    '[class.mat-chip-with-avatar]': 'avatar',\n    '[class.mat-chip-with-trailing-icon]': 'trailingIcon || removeIcon',\n    '[class.mat-chip-disabled]': 'disabled',\n    '[attr.disabled]': 'disabled || null',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.aria-selected]': 'ariaSelected',\n    '(click)': '_handleClick($event)',\n    '(keydown)': '_handleKeydown($event)',\n    '(focus)': 'focus()',\n    '(blur)': '_blur()',\n  },\n})\nexport class MatChip extends _MatChipMixinBase implements FocusableOption, OnDestroy, CanColor,\n    CanDisable, CanDisableRipple, RippleTarget {\n\n  /** Reference to the RippleRenderer for the chip. */\n  private _chipRipple: RippleRenderer;\n\n  /** Whether the ripples are globally disabled through the RippleGlobalOptions */\n  private _ripplesGloballyDisabled = false;\n\n  /**\n   * Ripple configuration for ripples that are launched on pointer down.\n   * @docs-private\n   */\n  rippleConfig: RippleConfig = {};\n\n  /**\n   * Whether ripples are disabled on interaction\n   * @docs-private\n   */\n  get rippleDisabled(): boolean {\n    return this.disabled || this.disableRipple || this._ripplesGloballyDisabled;\n  }\n\n  /** Whether the chip has focus. */\n  _hasFocus: boolean = false;\n\n  /** Whether the chip list is selectable */\n  chipListSelectable: boolean = true;\n\n  /** The chip avatar */\n  @ContentChild(MatChipAvatar) avatar: MatChipAvatar;\n\n  /** The chip's trailing icon. */\n  @ContentChild(MatChipTrailingIcon) trailingIcon: MatChipTrailingIcon;\n\n  /** The chip's remove toggler. */\n  @ContentChild(forwardRef(() => MatChipRemove)) removeIcon: MatChipRemove;\n\n  /** Whether the chip is selected. */\n  @Input()\n  get selected(): boolean { return this._selected; }\n  set selected(value: boolean) {\n    this._selected = coerceBooleanProperty(value);\n    this.selectionChange.emit({\n      source: this,\n      isUserInput: false,\n      selected: value\n    });\n  }\n  protected _selected: boolean = false;\n\n  /** The value of the chip. Defaults to the content inside `<mat-chip>` tags. */\n  @Input()\n  get value(): any {\n    return this._value != undefined\n      ? this._value\n      : this._elementRef.nativeElement.textContent;\n  }\n  set value(value: any) { this._value = value; }\n  protected _value: any;\n\n  /**\n   * Whether or not the chip is selectable. When a chip is not selectable,\n   * changes to it's selected state are always ignored. By default a chip is\n   * selectable, and it becomes non-selectable if it's parent chip list is\n   * not selectable.\n   */\n  @Input()\n  get selectable(): boolean { return this._selectable && this.chipListSelectable; }\n  set selectable(value: boolean) {\n    this._selectable = coerceBooleanProperty(value);\n  }\n  protected _selectable: boolean = true;\n\n  /**\n   * Determines whether or not the chip displays the remove styling and emits (removed) events.\n   */\n  @Input()\n  get removable(): boolean { return this._removable; }\n  set removable(value: boolean) {\n    this._removable = coerceBooleanProperty(value);\n  }\n  protected _removable: boolean = true;\n\n  /** Emits when the chip is focused. */\n  readonly _onFocus = new Subject<MatChipEvent>();\n\n  /** Emits when the chip is blured. */\n  readonly _onBlur = new Subject<MatChipEvent>();\n\n  /** Emitted when the chip is selected or deselected. */\n  @Output() readonly selectionChange: EventEmitter<MatChipSelectionChange> =\n      new EventEmitter<MatChipSelectionChange>();\n\n  /** Emitted when the chip is destroyed. */\n  @Output() readonly destroyed: EventEmitter<MatChipEvent> = new EventEmitter<MatChipEvent>();\n\n  /** Emitted when a chip is to be removed. */\n  @Output() readonly removed: EventEmitter<MatChipEvent> = new EventEmitter<MatChipEvent>();\n\n  /** The ARIA selected applied to the chip. */\n  get ariaSelected(): string | null {\n    return this.selectable ? this.selected.toString() : null;\n  }\n\n  constructor(public _elementRef: ElementRef,\n              private _ngZone: NgZone,\n              platform: Platform,\n              @Optional() @Inject(MAT_RIPPLE_GLOBAL_OPTIONS) globalOptions: RippleGlobalOptions) {\n    super(_elementRef);\n\n    this._addHostClassName();\n\n    this._chipRipple = new RippleRenderer(this, _ngZone, _elementRef, platform);\n    this._chipRipple.setupTriggerEvents(_elementRef.nativeElement);\n\n    if (globalOptions) {\n      this._ripplesGloballyDisabled = !!globalOptions.disabled;\n      // TODO(paul): Once the speedFactor is removed, we no longer need to copy each single option.\n      this.rippleConfig = {\n        speedFactor: globalOptions.baseSpeedFactor,\n        animation: globalOptions.animation,\n        terminateOnPointerUp: globalOptions.terminateOnPointerUp,\n      };\n    }\n  }\n\n  _addHostClassName() {\n    // Add class for the different chips\n    for (const attr of CHIP_ATTRIBUTE_NAMES) {\n      if (this._elementRef.nativeElement.hasAttribute(attr) ||\n        this._elementRef.nativeElement.tagName.toLowerCase() === attr) {\n        (this._elementRef.nativeElement as HTMLElement).classList.add(attr);\n        return;\n      }\n    }\n    (this._elementRef.nativeElement as HTMLElement).classList.add('mat-standard-chip');\n  }\n\n  ngOnDestroy() {\n    this.destroyed.emit({chip: this});\n    this._chipRipple._removeTriggerEvents();\n  }\n\n  /** Selects the chip. */\n  select(): void {\n    this._selected = true;\n    this.selectionChange.emit({\n      source: this,\n      isUserInput: false,\n      selected: true\n    });\n  }\n\n  /** Deselects the chip. */\n  deselect(): void {\n    this._selected = false;\n    this.selectionChange.emit({\n      source: this,\n      isUserInput: false,\n      selected: false\n    });\n  }\n\n  /** Select this chip and emit selected event */\n  selectViaInteraction(): void {\n    this._selected = true;\n    // Emit select event when selected changes.\n    this.selectionChange.emit({\n      source: this,\n      isUserInput: true,\n      selected: true\n    });\n  }\n\n  /** Toggles the current selected state of this chip. */\n  toggleSelected(isUserInput: boolean = false): boolean {\n    this._selected = !this.selected;\n\n    this.selectionChange.emit({\n      source: this,\n      isUserInput,\n      selected: this._selected\n    });\n\n    return this.selected;\n  }\n\n  /** Allows for programmatic focusing of the chip. */\n  focus(): void {\n    if (!this._hasFocus) {\n      this._elementRef.nativeElement.focus();\n      this._onFocus.next({chip: this});\n    }\n    this._hasFocus = true;\n  }\n\n  /**\n   * Allows for programmatic removal of the chip. Called by the MatChipList when the DELETE or\n   * BACKSPACE keys are pressed.\n   *\n   * Informs any listeners of the removal request. Does not remove the chip from the DOM.\n   */\n  remove(): void {\n    if (this.removable) {\n      this.removed.emit({chip: this});\n    }\n  }\n\n  /** Ensures events fire properly upon click. */\n  _handleClick(event: Event) {\n    // Check disabled\n    if (this.disabled) {\n      return;\n    }\n\n    event.preventDefault();\n    event.stopPropagation();\n  }\n\n  /** Handle custom key presses. */\n  _handleKeydown(event: KeyboardEvent): void {\n    if (this.disabled) {\n      return;\n    }\n\n    switch (event.keyCode) {\n      case DELETE:\n      case BACKSPACE:\n        // If we are removable, remove the focused chip\n        this.remove();\n        // Always prevent so page navigation does not occur\n        event.preventDefault();\n        break;\n      case SPACE:\n        // If we are selectable, toggle the focused chip\n        if (this.selectable) {\n          this.toggleSelected(true);\n        }\n\n        // Always prevent space from scrolling the page since the list has focus\n        event.preventDefault();\n        break;\n    }\n  }\n\n  _blur(): void {\n    // When animations are enabled, Angular may end up removing the chip from the DOM a little\n    // earlier than usual, causing it to be blurred and throwing off the logic in the chip list\n    // that moves focus not the next item. To work around the issue, we defer marking the chip\n    // as not focused until the next time the zone stabilizes.\n    this._ngZone.onStable\n      .asObservable()\n      .pipe(take(1))\n      .subscribe(() => this._hasFocus = false);\n\n    this._onBlur.next({chip: this});\n  }\n}\n\n\n/**\n * Applies proper (click) support and adds styling for use with the Material Design \"cancel\" icon\n * available at https://material.io/icons/#ic_cancel.\n *\n * Example:\n *\n *     `<mat-chip>\n *       <mat-icon matChipRemove>cancel</mat-icon>\n *     </mat-chip>`\n *\n * You *may* use a custom icon, but you may need to override the `mat-chip-remove` positioning\n * styles to properly center the icon within the chip.\n */\n@Directive({\n  selector: '[matChipRemove]',\n  host: {\n    'class': 'mat-chip-remove mat-chip-trailing-icon',\n    '(click)': '_handleClick($event)',\n  }\n})\nexport class MatChipRemove {\n  constructor(protected _parentChip: MatChip) {}\n\n  /** Calls the parent chip's public `remove()` method if applicable. */\n  _handleClick(event: Event): void {\n    if (this._parentChip.removable) {\n      this._parentChip.remove();\n    }\n\n    // We need to stop event propagation because otherwise the event will bubble up to the\n    // form field and cause the `onContainerClick` method to be invoked. This method would then\n    // reset the focused chip that has been focused after chip removal. Usually the parent\n    // the parent click listener of the `MatChip` would prevent propagation, but it can happen\n    // that the chip is being removed before the event bubbles up.\n    event.stopPropagation();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {InjectionToken} from '@angular/core';\n\n/** Default options, for the chips module, that can be overridden. */\nexport interface MatChipsDefaultOptions {\n  /** The list of key codes that will trigger a chipEnd event. */\n  separatorKeyCodes: number[] | Set<number>;\n}\n\n/** Injection token to be used to override the default options for the chips module. */\nexport const MAT_CHIPS_DEFAULT_OPTIONS =\n    new InjectionToken<MatChipsDefaultOptions>('mat-chips-default-options');\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor} from '@angular/cdk/a11y';\nimport {Platform} from '@angular/cdk/platform';\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  OnDestroy,\n  ViewChild,\n  ViewEncapsulation,\n  Optional,\n  Inject,\n  Input,\n} from '@angular/core';\nimport {\n  CanColor,\n  CanDisable,\n  CanDisableRipple,\n  MatRipple,\n  mixinColor,\n  mixinDisabled,\n  mixinDisableRipple\n} from '@angular/material/core';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\n\n/** Default color palette for round buttons (mat-fab and mat-mini-fab) */\nconst DEFAULT_ROUND_BUTTON_COLOR = 'accent';\n\n/**\n * List of classes to add to MatButton instances based on host attributes to\n * style as different variants.\n */\nconst BUTTON_HOST_ATTRIBUTES = [\n  'mat-button',\n  'mat-flat-button',\n  'mat-icon-button',\n  'mat-raised-button',\n  'mat-stroked-button',\n  'mat-mini-fab',\n  'mat-fab',\n];\n\n// Boilerplate for applying mixins to MatButton.\n/** @docs-private */\nexport class MatButtonBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatButtonMixinBase = mixinColor(mixinDisabled(mixinDisableRipple(MatButtonBase)));\n\n\n/**\n * Material design button.\n */\n@Component({\n  moduleId: module.id,\n  selector: `button[mat-button], button[mat-raised-button], button[mat-icon-button],\n             button[mat-fab], button[mat-mini-fab], button[mat-stroked-button],\n             button[mat-flat-button]`,\n  exportAs: 'matButton',\n  host: {\n    '[disabled]': 'disabled || null',\n    '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"',\n  },\n  templateUrl: 'button.html',\n  styleUrls: ['button.css'],\n  inputs: ['disabled', 'disableRipple', 'color'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatButton extends _MatButtonMixinBase\n    implements OnDestroy, CanDisable, CanColor, CanDisableRipple {\n\n  /** Whether the button is round. */\n  readonly isRoundButton: boolean = this._hasHostAttributes('mat-fab', 'mat-mini-fab');\n\n  /** Whether the button is icon button. */\n  readonly isIconButton: boolean = this._hasHostAttributes('mat-icon-button');\n\n  /** Reference to the MatRipple instance of the button. */\n  @ViewChild(MatRipple) ripple: MatRipple;\n\n  constructor(elementRef: ElementRef,\n              /**\n               * @deprecated Platform checks for SSR are no longer needed\n               * @breaking-change 7.0.0\n               */\n              // tslint:disable-next-line:no-unused-variable\n              private _platform: Platform,\n              private _focusMonitor: FocusMonitor,\n              // @breaking-change 7.0.0 `_animationMode` parameter to be made required.\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode?: string) {\n    super(elementRef);\n\n    // For each of the variant selectors that is prevent in the button's host\n    // attributes, add the correct corresponding class.\n    for (const attr of BUTTON_HOST_ATTRIBUTES) {\n      if (this._hasHostAttributes(attr)) {\n        (elementRef.nativeElement as HTMLElement).classList.add(attr);\n      }\n    }\n\n    this._focusMonitor.monitor(this._elementRef, true);\n\n    if (this.isRoundButton) {\n      this.color = DEFAULT_ROUND_BUTTON_COLOR;\n    }\n  }\n\n  ngOnDestroy() {\n    this._focusMonitor.stopMonitoring(this._elementRef);\n  }\n\n  /** Focuses the button. */\n  focus(): void {\n    this._getHostElement().focus();\n  }\n\n  _getHostElement() {\n    return this._elementRef.nativeElement;\n  }\n\n  _isRippleDisabled() {\n    return this.disableRipple || this.disabled;\n  }\n\n  /** Gets whether the button has one of the given attributes. */\n  _hasHostAttributes(...attributes: string[]) {\n    return attributes.some(attribute => this._getHostElement().hasAttribute(attribute));\n  }\n}\n\n/**\n * Raised Material design button.\n */\n@Component({\n  moduleId: module.id,\n  selector: `a[mat-button], a[mat-raised-button], a[mat-icon-button], a[mat-fab],\n             a[mat-mini-fab], a[mat-stroked-button], a[mat-flat-button]`,\n  exportAs: 'matButton, matAnchor',\n  host: {\n    // Note that we ignore the user-specified tabindex when it's disabled for\n    // consistency with the `mat-button` applied on native buttons where even\n    // though they have an index, they're not tabbable.\n    '[attr.tabindex]': 'disabled ? -1 : (tabIndex || 0)',\n    '[attr.disabled]': 'disabled || null',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '(click)': '_haltDisabledEvents($event)',\n    '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"',\n  },\n  inputs: ['disabled', 'disableRipple', 'color'],\n  templateUrl: 'button.html',\n  styleUrls: ['button.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatAnchor extends MatButton {\n  /** Tabindex of the button. */\n  @Input() tabIndex: number;\n\n  constructor(\n    platform: Platform,\n    focusMonitor: FocusMonitor,\n    elementRef: ElementRef,\n    // @breaking-change 7.0.0 `animationMode` parameter to be made required.\n    @Optional() @Inject(ANIMATION_MODULE_TYPE) animationMode?: string) {\n    super(elementRef, platform, focusMonitor, animationMode);\n  }\n\n  _haltDisabledEvents(event: Event) {\n    // A disabled button shouldn't apply any actions\n    if (this.disabled) {\n      event.preventDefault();\n      event.stopImmediatePropagation();\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {MatAnchor, MatButton} from './button';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatRippleModule,\n    MatCommonModule,\n  ],\n  exports: [\n    MatButton,\n    MatAnchor,\n    MatCommonModule,\n  ],\n  declarations: [\n    MatButton,\n    MatAnchor,\n  ],\n})\nexport class MatButtonModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Input,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Output,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n  Attribute,\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {\n  CanDisable,\n  CanDisableRipple,\n  mixinDisabled,\n  mixinDisableRipple\n} from '@angular/material/core';\nimport {SelectionModel} from '@angular/cdk/collections';\n\n/** Acceptable types for a button toggle. */\nexport type ToggleType = 'checkbox' | 'radio';\n\n// Boilerplate for applying mixins to MatButtonToggleGroup and MatButtonToggleGroupMultiple\n/** @docs-private */\nexport class MatButtonToggleGroupBase {}\nexport const _MatButtonToggleGroupMixinBase = mixinDisabled(MatButtonToggleGroupBase);\n\n/**\n * Provider Expression that allows mat-button-toggle-group to register as a ControlValueAccessor.\n * This allows it to support [(ngModel)].\n * @docs-private\n */\nexport const MAT_BUTTON_TOGGLE_GROUP_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatButtonToggleGroup),\n  multi: true\n};\n\n/**\n * @deprecated Use `MatButtonToggleGroup` instead.\n * @breaking-change 7.0.0\n */\nexport class MatButtonToggleGroupMultiple {}\n\nlet _uniqueIdCounter = 0;\n\n/** Change event object emitted by MatButtonToggle. */\nexport class MatButtonToggleChange {\n  constructor(\n    /** The MatButtonToggle that emits the event. */\n    public source: MatButtonToggle,\n\n    /** The value assigned to the MatButtonToggle. */\n    public value: any) {}\n}\n\n/** Exclusive selection button toggle group that behaves like a radio-button group. */\n@Directive({\n  selector: 'mat-button-toggle-group',\n  providers: [\n    MAT_BUTTON_TOGGLE_GROUP_VALUE_ACCESSOR,\n    {provide: MatButtonToggleGroupMultiple, useExisting: MatButtonToggleGroup},\n  ],\n  inputs: ['disabled'],\n  host: {\n    'role': 'group',\n    'class': 'mat-button-toggle-group',\n    '[attr.aria-disabled]': 'disabled',\n    '[class.mat-button-toggle-vertical]': 'vertical'\n  },\n  exportAs: 'matButtonToggleGroup',\n})\nexport class MatButtonToggleGroup extends _MatButtonToggleGroupMixinBase implements\n  ControlValueAccessor, CanDisable, OnInit, AfterContentInit {\n\n  private _vertical = false;\n  private _multiple = false;\n  private _selectionModel: SelectionModel<MatButtonToggle>;\n\n  /**\n   * Reference to the raw value that the consumer tried to assign. The real\n   * value will exclude any values from this one that don't correspond to a\n   * toggle. Useful for the cases where the value is assigned before the toggles\n   * have been initialized or at the same that they're being swapped out.\n   */\n  private _rawValue: any;\n\n  /**\n   * The method to be called in order to update ngModel.\n   * Now `ngModel` binding is not supported in multiple selection mode.\n   */\n  _controlValueAccessorChangeFn: (value: any) => void = () => {};\n\n  /** onTouch function registered via registerOnTouch (ControlValueAccessor). */\n  _onTouched: () => any = () => {};\n\n  /** Child button toggle buttons. */\n  @ContentChildren(forwardRef(() => MatButtonToggle)) _buttonToggles: QueryList<MatButtonToggle>;\n\n  /** `name` attribute for the underlying `input` element. */\n  @Input()\n  get name(): string { return this._name; }\n  set name(value: string) {\n    this._name = value;\n\n    if (this._buttonToggles) {\n      this._buttonToggles.forEach(toggle => toggle.name = this._name);\n    }\n  }\n  private _name = `mat-button-toggle-group-${_uniqueIdCounter++}`;\n\n  /** Whether the toggle group is vertical. */\n  @Input()\n  get vertical(): boolean { return this._vertical; }\n  set vertical(value: boolean) {\n    this._vertical = coerceBooleanProperty(value);\n  }\n\n  /** Value of the toggle group. */\n  @Input()\n  get value(): any {\n    const selected = this._selectionModel ? this._selectionModel.selected : [];\n\n    if (this.multiple) {\n      return selected.map(toggle => toggle.value);\n    }\n\n    return selected[0] ? selected[0].value : undefined;\n  }\n  set value(newValue: any) {\n    this._setSelectionByValue(newValue);\n    this.valueChange.emit(this.value);\n  }\n\n  /**\n   * Event that emits whenever the value of the group changes.\n   * Used to facilitate two-way data binding.\n   * @docs-private\n   */\n  @Output() readonly valueChange = new EventEmitter<any>();\n\n  /** Selected button toggles in the group. */\n  get selected() {\n    const selected = this._selectionModel.selected;\n    return this.multiple ? selected : (selected[0] || null);\n  }\n\n  /** Whether multiple button toggles can be selected. */\n  @Input()\n  get multiple(): boolean { return this._multiple; }\n  set multiple(value: boolean) {\n    this._multiple = coerceBooleanProperty(value);\n  }\n\n  /** Event emitted when the group's value changes. */\n  @Output() readonly change: EventEmitter<MatButtonToggleChange> =\n      new EventEmitter<MatButtonToggleChange>();\n\n  constructor(private _changeDetector: ChangeDetectorRef) {\n    super();\n  }\n\n  ngOnInit() {\n    this._selectionModel = new SelectionModel<MatButtonToggle>(this.multiple, undefined, false);\n  }\n\n  ngAfterContentInit() {\n    this._selectionModel.select(...this._buttonToggles.filter(toggle => toggle.checked));\n  }\n\n  /**\n   * Sets the model value. Implemented as part of ControlValueAccessor.\n   * @param value Value to be set to the model.\n   */\n  writeValue(value: any) {\n    this.value = value;\n    this._changeDetector.markForCheck();\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnChange(fn: (value: any) => void) {\n    this._controlValueAccessorChangeFn = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnTouched(fn: any) {\n    this._onTouched = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n\n    if (this._buttonToggles) {\n      this._buttonToggles.forEach(toggle => toggle._markForCheck());\n    }\n  }\n\n  /** Dispatch change event with current selection and group value. */\n  _emitChangeEvent(): void {\n    const selected = this.selected;\n    const source = Array.isArray(selected) ? selected[selected.length - 1] : selected;\n    const event = new MatButtonToggleChange(source!, this.value);\n    this._controlValueAccessorChangeFn(event.value);\n    this.change.emit(event);\n  }\n\n  /**\n   * Syncs a button toggle's selected state with the model value.\n   * @param toggle Toggle to be synced.\n   * @param select Whether the toggle should be selected.\n   * @param isUserInput Whether the change was a result of a user interaction.\n   */\n  _syncButtonToggle(toggle: MatButtonToggle, select: boolean, isUserInput = false) {\n    // Deselect the currently-selected toggle, if we're in single-selection\n    // mode and the button being toggled isn't selected at the moment.\n    if (!this.multiple && this.selected && !toggle.checked) {\n      (this.selected as MatButtonToggle).checked = false;\n    }\n\n    if (select) {\n      this._selectionModel.select(toggle);\n    } else {\n      this._selectionModel.deselect(toggle);\n    }\n\n    // Only emit the change event for user input.\n    if (isUserInput) {\n      this._emitChangeEvent();\n    }\n\n    // Note: we emit this one no matter whether it was a user interaction, because\n    // it is used by Angular to sync up the two-way data binding.\n    this.valueChange.emit(this.value);\n  }\n\n  /** Checks whether a button toggle is selected. */\n  _isSelected(toggle: MatButtonToggle) {\n    return this._selectionModel.isSelected(toggle);\n  }\n\n  /** Determines whether a button toggle should be checked on init. */\n  _isPrechecked(toggle: MatButtonToggle) {\n    if (typeof this._rawValue === 'undefined') {\n      return false;\n    }\n\n    if (this.multiple && Array.isArray(this._rawValue)) {\n      return this._rawValue.some(value => toggle.value != null && value === toggle.value);\n    }\n\n    return toggle.value === this._rawValue;\n  }\n\n  /** Updates the selection state of the toggles in the group based on a value. */\n  private _setSelectionByValue(value: any|any[]) {\n    this._rawValue = value;\n\n    if (!this._buttonToggles) {\n      return;\n    }\n\n    if (this.multiple && value) {\n      if (!Array.isArray(value)) {\n        throw Error('Value must be an array in multiple-selection mode.');\n      }\n\n      this._clearSelection();\n      value.forEach((currentValue: any) => this._selectValue(currentValue));\n    } else {\n      this._clearSelection();\n      this._selectValue(value);\n    }\n  }\n\n  /** Clears the selected toggles. */\n  private _clearSelection() {\n    this._selectionModel.clear();\n    this._buttonToggles.forEach(toggle => toggle.checked = false);\n  }\n\n  /** Selects a value if there's a toggle that corresponds to it. */\n  private _selectValue(value: any) {\n    const correspondingOption = this._buttonToggles.find(toggle => {\n      return toggle.value != null && toggle.value === value;\n    });\n\n    if (correspondingOption) {\n      correspondingOption.checked = true;\n      this._selectionModel.select(correspondingOption);\n    }\n  }\n}\n\n// Boilerplate for applying mixins to the MatButtonToggle class.\n/** @docs-private */\nexport class MatButtonToggleBase {}\nexport const _MatButtonToggleMixinBase = mixinDisableRipple(MatButtonToggleBase);\n\n/** Single button inside of a toggle group. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-button-toggle',\n  templateUrl: 'button-toggle.html',\n  styleUrls: ['button-toggle.css'],\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matButtonToggle',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  inputs: ['disableRipple'],\n  host: {\n    '[class.mat-button-toggle-standalone]': '!buttonToggleGroup',\n    '[class.mat-button-toggle-checked]': 'checked',\n    '[class.mat-button-toggle-disabled]': 'disabled',\n    'class': 'mat-button-toggle',\n    // Clear out the native tabindex here since we forward it to the underlying button\n    '[attr.tabindex]': 'null',\n    '[attr.id]': 'id',\n  }\n})\nexport class MatButtonToggle extends _MatButtonToggleMixinBase implements OnInit,\n  CanDisableRipple, OnDestroy {\n\n  private _isSingleSelector = false;\n  private _checked = false;\n\n  /**\n   * Attached to the aria-label attribute of the host element. In most cases, arial-labelledby will\n   * take precedence so this may be omitted.\n   */\n  @Input('aria-label') ariaLabel: string;\n\n  /**\n   * Users can specify the `aria-labelledby` attribute which will be forwarded to the input element\n   */\n  @Input('aria-labelledby') ariaLabelledby: string | null = null;\n\n  /** Type of the button toggle. Either 'radio' or 'checkbox'. */\n  _type: ToggleType;\n\n  @ViewChild('button') _buttonElement: ElementRef<HTMLButtonElement>;\n\n  /** The parent button toggle group (exclusive selection). Optional. */\n  buttonToggleGroup: MatButtonToggleGroup;\n\n  /** Unique ID for the underlying `button` element. */\n  get buttonId(): string { return `${this.id}-button`; }\n\n  /** The unique ID for this button toggle. */\n  @Input() id: string;\n\n  /** HTML's 'name' attribute used to group radios for unique selection. */\n  @Input() name: string;\n\n  /** MatButtonToggleGroup reads this to assign its own value. */\n  @Input() value: any;\n\n  /** Tabindex for the toggle. */\n  @Input() tabIndex: number | null;\n\n  /** Whether the button is checked. */\n  @Input()\n  get checked(): boolean {\n    return this.buttonToggleGroup ? this.buttonToggleGroup._isSelected(this) : this._checked;\n  }\n  set checked(value: boolean) {\n    const newValue = coerceBooleanProperty(value);\n\n    if (newValue !== this._checked) {\n      this._checked = newValue;\n\n      if (this.buttonToggleGroup) {\n        this.buttonToggleGroup._syncButtonToggle(this, this._checked);\n      }\n\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  /** Whether the button is disabled. */\n  @Input()\n  get disabled(): boolean {\n    return this._disabled || (this.buttonToggleGroup && this.buttonToggleGroup.disabled);\n  }\n  set disabled(value: boolean) { this._disabled = coerceBooleanProperty(value); }\n  private _disabled: boolean = false;\n\n  /** Event emitted when the group value changes. */\n  @Output() readonly change: EventEmitter<MatButtonToggleChange> =\n      new EventEmitter<MatButtonToggleChange>();\n\n  constructor(@Optional() toggleGroup: MatButtonToggleGroup,\n              private _changeDetectorRef: ChangeDetectorRef,\n              private _elementRef: ElementRef<HTMLElement>,\n              private _focusMonitor: FocusMonitor,\n              // @breaking-change 8.0.0 `defaultTabIndex` to be made a required parameter.\n              @Attribute('tabindex') defaultTabIndex: string) {\n    super();\n\n    const parsedTabIndex = Number(defaultTabIndex);\n    this.tabIndex = (parsedTabIndex || parsedTabIndex === 0) ? parsedTabIndex : null;\n    this.buttonToggleGroup = toggleGroup;\n  }\n\n  ngOnInit() {\n    this._isSingleSelector = this.buttonToggleGroup && !this.buttonToggleGroup.multiple;\n    this._type = this._isSingleSelector ? 'radio' : 'checkbox';\n    this.id = this.id || `mat-button-toggle-${_uniqueIdCounter++}`;\n\n    if (this._isSingleSelector) {\n      this.name = this.buttonToggleGroup.name;\n    }\n\n    if (this.buttonToggleGroup && this.buttonToggleGroup._isPrechecked(this)) {\n      this.checked = true;\n    }\n\n    this._focusMonitor.monitor(this._elementRef, true);\n  }\n\n  ngOnDestroy() {\n    this._focusMonitor.stopMonitoring(this._elementRef);\n  }\n\n  /** Focuses the button. */\n  focus(): void {\n    this._buttonElement.nativeElement.focus();\n  }\n\n  /** Checks the button toggle due to an interaction with the underlying native button. */\n  _onButtonClick() {\n    const newChecked = this._isSingleSelector ? true : !this._checked;\n\n    if (newChecked !== this._checked) {\n      this._checked = newChecked;\n      if (this.buttonToggleGroup) {\n        this.buttonToggleGroup._syncButtonToggle(this, this._checked, true);\n        this.buttonToggleGroup._onTouched();\n      }\n    }\n    // Emit a change event when it's the single selector\n    this.change.emit(new MatButtonToggleChange(this, this.value));\n  }\n\n  /**\n   * Marks the button toggle as needing checking for change detection.\n   * This method is exposed because the parent button toggle group will directly\n   * update bound properties of the radio button.\n   */\n  _markForCheck() {\n    // When the group value changes, the button will not be notified.\n    // Use `markForCheck` to explicit update button toggle's status.\n    this._changeDetectorRef.markForCheck();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {MatButtonToggle, MatButtonToggleGroup} from './button-toggle';\n\n\n@NgModule({\n  imports: [MatCommonModule, MatRippleModule],\n  exports: [MatCommonModule, MatButtonToggleGroup, MatButtonToggle],\n  declarations: [MatButtonToggleGroup, MatButtonToggle],\n})\nexport class MatButtonToggleModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  AfterContentInit,\n  Component,\n  ContentChildren,\n  ElementRef,\n  Input,\n  QueryList,\n  TemplateRef,\n  ViewChild,\n  ViewEncapsulation,\n  ChangeDetectorRef,\n  ChangeDetectionStrategy,\n  EventEmitter,\n  Output,\n  InjectionToken,\n  Inject,\n} from '@angular/core';\nimport {\n  MatOption,\n  MatOptgroup,\n  MAT_OPTION_PARENT_COMPONENT,\n  mixinDisableRipple,\n  CanDisableRipple,\n} from '@angular/material/core';\nimport {ActiveDescendantKeyManager} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\n\n\n/**\n * Autocomplete IDs need to be unique across components, so this counter exists outside of\n * the component definition.\n */\nlet _uniqueAutocompleteIdCounter = 0;\n\n/** Event object that is emitted when an autocomplete option is selected. */\nexport class MatAutocompleteSelectedEvent {\n  constructor(\n    /** Reference to the autocomplete panel that emitted the event. */\n    public source: MatAutocomplete,\n    /** Option that was selected. */\n    public option: MatOption) { }\n}\n\n// Boilerplate for applying mixins to MatAutocomplete.\n/** @docs-private */\nexport class MatAutocompleteBase {}\nexport const _MatAutocompleteMixinBase = mixinDisableRipple(MatAutocompleteBase);\n\n/** Default `mat-autocomplete` options that can be overridden. */\nexport interface MatAutocompleteDefaultOptions {\n  /** Whether the first option should be highlighted when an autocomplete panel is opened. */\n  autoActiveFirstOption?: boolean;\n}\n\n/** Injection token to be used to override the default options for `mat-autocomplete`. */\nexport const MAT_AUTOCOMPLETE_DEFAULT_OPTIONS =\n    new InjectionToken<MatAutocompleteDefaultOptions>('mat-autocomplete-default-options', {\n      providedIn: 'root',\n      factory: MAT_AUTOCOMPLETE_DEFAULT_OPTIONS_FACTORY,\n    });\n\n/** @docs-private */\nexport function MAT_AUTOCOMPLETE_DEFAULT_OPTIONS_FACTORY(): MatAutocompleteDefaultOptions {\n  return {autoActiveFirstOption: false};\n}\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-autocomplete',\n  templateUrl: 'autocomplete.html',\n  styleUrls: ['autocomplete.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  exportAs: 'matAutocomplete',\n  inputs: ['disableRipple'],\n  host: {\n    'class': 'mat-autocomplete'\n  },\n  providers: [\n    {provide: MAT_OPTION_PARENT_COMPONENT, useExisting: MatAutocomplete}\n  ]\n})\nexport class MatAutocomplete extends _MatAutocompleteMixinBase implements AfterContentInit,\n  CanDisableRipple {\n\n  /** Manages active item in option list based on key events. */\n  _keyManager: ActiveDescendantKeyManager<MatOption>;\n\n  /** Whether the autocomplete panel should be visible, depending on option length. */\n  showPanel: boolean = false;\n\n  /** Whether the autocomplete panel is open. */\n  get isOpen(): boolean { return this._isOpen && this.showPanel; }\n  _isOpen: boolean = false;\n\n  /** @docs-private */\n  @ViewChild(TemplateRef) template: TemplateRef<any>;\n\n  /** Element for the panel containing the autocomplete options. */\n  @ViewChild('panel') panel: ElementRef;\n\n  /** @docs-private */\n  @ContentChildren(MatOption, { descendants: true }) options: QueryList<MatOption>;\n\n  /** @docs-private */\n  @ContentChildren(MatOptgroup) optionGroups: QueryList<MatOptgroup>;\n\n  /** Function that maps an option's control value to its display value in the trigger. */\n  @Input() displayWith: ((value: any) => string) | null = null;\n\n  /**\n   * Whether the first option should be highlighted when the autocomplete panel is opened.\n   * Can be configured globally through the `MAT_AUTOCOMPLETE_DEFAULT_OPTIONS` token.\n   */\n  @Input()\n  get autoActiveFirstOption(): boolean { return this._autoActiveFirstOption; }\n  set autoActiveFirstOption(value: boolean) {\n    this._autoActiveFirstOption = coerceBooleanProperty(value);\n  }\n  private _autoActiveFirstOption: boolean;\n\n  /**\n   * Specify the width of the autocomplete panel.  Can be any CSS sizing value, otherwise it will\n   * match the width of its host.\n   */\n  @Input() panelWidth: string | number;\n\n  /** Event that is emitted whenever an option from the list is selected. */\n  @Output() readonly optionSelected: EventEmitter<MatAutocompleteSelectedEvent> =\n      new EventEmitter<MatAutocompleteSelectedEvent>();\n\n  /** Event that is emitted when the autocomplete panel is opened. */\n  @Output() readonly opened: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Event that is emitted when the autocomplete panel is closed. */\n  @Output() readonly closed: EventEmitter<void> = new EventEmitter<void>();\n\n  /**\n   * Takes classes set on the host mat-autocomplete element and applies them to the panel\n   * inside the overlay container to allow for easy styling.\n   */\n  @Input('class')\n  set classList(value: string) {\n    if (value && value.length) {\n      value.split(' ').forEach(className => this._classList[className.trim()] = true);\n      this._elementRef.nativeElement.className = '';\n    }\n  }\n  _classList: {[key: string]: boolean} = {};\n\n  /** Unique ID to be used by autocomplete trigger's \"aria-owns\" property. */\n  id: string = `mat-autocomplete-${_uniqueAutocompleteIdCounter++}`;\n\n  constructor(\n    private _changeDetectorRef: ChangeDetectorRef,\n    private _elementRef: ElementRef,\n    @Inject(MAT_AUTOCOMPLETE_DEFAULT_OPTIONS) defaults: MatAutocompleteDefaultOptions) {\n    super();\n\n    this._autoActiveFirstOption = !!defaults.autoActiveFirstOption;\n  }\n\n  ngAfterContentInit() {\n    this._keyManager = new ActiveDescendantKeyManager<MatOption>(this.options).withWrap();\n    // Set the initial visibility state.\n    this._setVisibility();\n  }\n\n  /**\n   * Sets the panel scrollTop. This allows us to manually scroll to display options\n   * above or below the fold, as they are not actually being focused when active.\n   */\n  _setScrollTop(scrollTop: number): void {\n    if (this.panel) {\n      this.panel.nativeElement.scrollTop = scrollTop;\n    }\n  }\n\n  /** Returns the panel's scrollTop. */\n  _getScrollTop(): number {\n    return this.panel ? this.panel.nativeElement.scrollTop : 0;\n  }\n\n  /** Panel should hide itself when the option list is empty. */\n  _setVisibility() {\n    this.showPanel = !!this.options.length;\n    this._classList['mat-autocomplete-visible'] = this.showPanel;\n    this._classList['mat-autocomplete-hidden'] = !this.showPanel;\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Emits the `select` event. */\n  _emitSelectEvent(option: MatOption): void {\n    const event = new MatAutocompleteSelectedEvent(this, option);\n    this.optionSelected.emit(event);\n  }\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, ElementRef} from '@angular/core';\n\n/**\n * Directive applied to an element to make it usable\n * as a connection point for an autocomplete panel.\n */\n@Directive({\n  selector: '[matAutocompleteOrigin]',\n  exportAs: 'matAutocompleteOrigin',\n})\nexport class MatAutocompleteOrigin {\n  constructor(\n      /** Reference to the element on which the directive is applied. */\n      public elementRef: ElementRef<HTMLElement>) { }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {MatOptionModule, MatCommonModule} from '@angular/material/core';\nimport {MatAutocomplete} from './autocomplete';\nimport {\n  MatAutocompleteTrigger,\n  MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY_PROVIDER,\n} from './autocomplete-trigger';\nimport {MatAutocompleteOrigin} from './autocomplete-origin';\n\n@NgModule({\n  imports: [MatOptionModule, OverlayModule, MatCommonModule, CommonModule],\n  exports: [\n    MatAutocomplete,\n    MatOptionModule,\n    MatAutocompleteTrigger,\n    MatAutocompleteOrigin,\n    MatCommonModule\n  ],\n  declarations: [MatAutocomplete, MatAutocompleteTrigger, MatAutocompleteOrigin],\n  providers: [MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY_PROVIDER],\n})\nexport class MatAutocompleteModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {AriaDescriber} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {DOCUMENT} from '@angular/common';\nimport {Directive, ElementRef, Inject, Input, NgZone, OnDestroy, Optional} from '@angular/core';\nimport {ThemePalette} from '@angular/material/core';\n\n\nlet nextId = 0;\n\nexport type MatBadgePosition = 'above after' | 'above before' | 'below before' | 'below after';\nexport type MatBadgeSize = 'small' | 'medium' | 'large';\n\n/** Directive to display a text badge. */\n@Directive({\n  selector: '[matBadge]',\n  host: {\n    'class': 'mat-badge',\n    '[class.mat-badge-overlap]': 'overlap',\n    '[class.mat-badge-above]': 'isAbove()',\n    '[class.mat-badge-below]': '!isAbove()',\n    '[class.mat-badge-before]': '!isAfter()',\n    '[class.mat-badge-after]': 'isAfter()',\n    '[class.mat-badge-small]': 'size === \"small\"',\n    '[class.mat-badge-medium]': 'size === \"medium\"',\n    '[class.mat-badge-large]': 'size === \"large\"',\n    '[class.mat-badge-hidden]': 'hidden || !_hasContent',\n  },\n})\nexport class MatBadge implements OnDestroy {\n  /** Whether the badge has any content. */\n  _hasContent = false;\n\n  /** The color of the badge. Can be `primary`, `accent`, or `warn`. */\n  @Input('matBadgeColor')\n  get color(): ThemePalette { return this._color; }\n  set color(value: ThemePalette) {\n    this._setColor(value);\n    this._color = value;\n  }\n  private _color: ThemePalette = 'primary';\n\n  /** Whether the badge should overlap its contents or not */\n  @Input('matBadgeOverlap')\n  get overlap(): boolean { return this._overlap; }\n  set overlap(val: boolean) {\n    this._overlap = coerceBooleanProperty(val);\n  }\n  private _overlap: boolean = true;\n\n  /**\n   * Position the badge should reside.\n   * Accepts any combination of 'above'|'below' and 'before'|'after'\n   */\n  @Input('matBadgePosition') position: MatBadgePosition = 'above after';\n\n  /** The content for the badge */\n  @Input('matBadge')\n  get content(): string { return this._content; }\n  set content(value: string) {\n    this._content = value;\n    this._hasContent = value != null && `${value}`.trim().length > 0;\n    this._updateTextContent();\n  }\n  private _content: string;\n\n  /** Message used to describe the decorated element via aria-describedby */\n  @Input('matBadgeDescription')\n  get description(): string { return this._description; }\n  set description(newDescription: string) {\n    if (newDescription !== this._description) {\n      this._updateHostAriaDescription(newDescription, this._description);\n      this._description = newDescription;\n    }\n  }\n  private _description: string;\n\n  /** Size of the badge. Can be 'small', 'medium', or 'large'. */\n  @Input('matBadgeSize') size: MatBadgeSize = 'medium';\n\n  /** Whether the badge is hidden. */\n  @Input('matBadgeHidden')\n  get hidden(): boolean { return this._hidden; }\n  set hidden(val: boolean) {\n    this._hidden = coerceBooleanProperty(val);\n  }\n  private _hidden: boolean;\n\n  /** Unique id for the badge */\n  _id: number = nextId++;\n\n  private _badgeElement: HTMLElement;\n\n  constructor(\n      @Optional() @Inject(DOCUMENT) private _document: any,\n      private _ngZone: NgZone,\n      private _elementRef: ElementRef,\n      private _ariaDescriber: AriaDescriber) {}\n\n  /** Whether the badge is above the host or not */\n  isAbove(): boolean {\n    return this.position.indexOf('below') === -1;\n  }\n\n  /** Whether the badge is after the host or not */\n  isAfter(): boolean {\n    return this.position.indexOf('before') === -1;\n  }\n\n  ngOnDestroy() {\n    if (this.description && this._badgeElement) {\n      this._ariaDescriber.removeDescription(this._badgeElement, this.description);\n    }\n  }\n\n  /** Injects a span element into the DOM with the content. */\n  private _updateTextContent(): HTMLSpanElement {\n    if (!this._badgeElement) {\n      this._badgeElement = this._createBadgeElement();\n    } else {\n      this._badgeElement.textContent = this.content;\n    }\n    return this._badgeElement;\n  }\n\n  /** Creates the badge element */\n  private _createBadgeElement(): HTMLElement {\n    const badgeElement = this._document.createElement('span');\n    const activeClass = 'mat-badge-active';\n\n    badgeElement.setAttribute('id', `mat-badge-content-${this._id}`);\n    badgeElement.classList.add('mat-badge-content');\n    badgeElement.textContent = this.content;\n\n    if (this.description) {\n      badgeElement.setAttribute('aria-label', this.description);\n    }\n\n    this._elementRef.nativeElement.appendChild(badgeElement);\n\n    // animate in after insertion\n    if (typeof requestAnimationFrame === 'function') {\n      this._ngZone.runOutsideAngular(() => {\n        requestAnimationFrame(() => {\n          badgeElement.classList.add(activeClass);\n        });\n      });\n    } else {\n      badgeElement.classList.add(activeClass);\n    }\n\n    return badgeElement;\n  }\n\n  /** Sets the aria-label property on the element */\n  private _updateHostAriaDescription(newDescription: string, oldDescription: string): void {\n    // ensure content available before setting label\n    const content = this._updateTextContent();\n\n    if (oldDescription) {\n      this._ariaDescriber.removeDescription(content, oldDescription);\n    }\n\n    if (newDescription) {\n      this._ariaDescriber.describe(content, newDescription);\n    }\n  }\n\n  /** Adds css theme class given the color to the component host */\n  private _setColor(colorPalette: ThemePalette) {\n    if (colorPalette !== this._color) {\n      if (this._color) {\n        this._elementRef.nativeElement.classList.remove(`mat-badge-${this._color}`);\n      }\n      if (colorPalette) {\n        this._elementRef.nativeElement.classList.add(`mat-badge-${colorPalette}`);\n      }\n    }\n  }\n\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {A11yModule} from '@angular/cdk/a11y';\nimport {MatBadge} from './badge';\n\n\n@NgModule({\n  imports: [\n    A11yModule,\n    MatCommonModule\n  ],\n  exports: [MatBadge],\n  declarations: [MatBadge],\n})\nexport class MatBadgeModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ViewContainerRef, InjectionToken} from '@angular/core';\nimport {Direction} from '@angular/cdk/bidi';\n\n/** Injection token that can be used to access the data that was passed in to a bottom sheet. */\nexport const MAT_BOTTOM_SHEET_DATA = new InjectionToken<any>('MatBottomSheetData');\n\n/**\n * Configuration used when opening a bottom sheet.\n */\nexport class MatBottomSheetConfig<D = any> {\n  /** The view container to place the overlay for the bottom sheet into. */\n  viewContainerRef?: ViewContainerRef;\n\n  /** Extra CSS classes to be added to the bottom sheet container. */\n  panelClass?: string | string[];\n\n  /** Text layout direction for the bottom sheet. */\n  direction?: Direction;\n\n  /** Data being injected into the child component. */\n  data?: D | null = null;\n\n  /** Whether the bottom sheet has a backdrop. */\n  hasBackdrop?: boolean = true;\n\n  /** Custom class for the backdrop. */\n  backdropClass?: string;\n\n  /** Whether the user can use escape or clicking outside to close the bottom sheet. */\n  disableClose?: boolean = false;\n\n  /** Aria label to assign to the bottom sheet element. */\n  ariaLabel?: string | null = null;\n\n  /** Whether the bottom sheet should close when the user goes backwards/forwards in history. */\n  closeOnNavigation?: boolean = true;\n\n  /** Whether the bottom sheet should focus the first focusable element on open. */\n  autoFocus?: boolean = true;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\nimport {AnimationCurves, AnimationDurations} from '@angular/material/core';\n\n/** Animations used by the Material bottom sheet. */\nexport const matBottomSheetAnimations: {\n  readonly bottomSheetState: AnimationTriggerMetadata;\n} = {\n  /** Animation that shows and hides a bottom sheet. */\n  bottomSheetState: trigger('state', [\n    state('void, hidden', style({transform: 'translateY(100%)'})),\n    state('visible', style({transform: 'translateY(0%)'})),\n    transition('visible => void, visible => hidden',\n        animate(`${AnimationDurations.COMPLEX} ${AnimationCurves.ACCELERATION_CURVE}`)),\n    transition('void => visible',\n        animate(`${AnimationDurations.EXITING} ${AnimationCurves.DECELERATION_CURVE}`)),\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ComponentRef,\n  EmbeddedViewRef,\n  ViewChild,\n  OnDestroy,\n  ElementRef,\n  ChangeDetectionStrategy,\n  ViewEncapsulation,\n  ChangeDetectorRef,\n  EventEmitter,\n  Inject,\n  Optional,\n} from '@angular/core';\nimport {AnimationEvent} from '@angular/animations';\nimport {\n  BasePortalOutlet,\n  ComponentPortal,\n  TemplatePortal,\n  CdkPortalOutlet,\n} from '@angular/cdk/portal';\nimport {BreakpointObserver, Breakpoints} from '@angular/cdk/layout';\nimport {MatBottomSheetConfig} from './bottom-sheet-config';\nimport {matBottomSheetAnimations} from './bottom-sheet-animations';\nimport {Subscription} from 'rxjs';\nimport {DOCUMENT} from '@angular/common';\nimport {FocusTrap, FocusTrapFactory} from '@angular/cdk/a11y';\n\n// TODO(crisbeto): consolidate some logic between this, MatDialog and MatSnackBar\n\n/**\n * Internal component that wraps user-provided bottom sheet content.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-bottom-sheet-container',\n  templateUrl: 'bottom-sheet-container.html',\n  styleUrls: ['bottom-sheet-container.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  animations: [matBottomSheetAnimations.bottomSheetState],\n  host: {\n    'class': 'mat-bottom-sheet-container',\n    'tabindex': '-1',\n    'role': 'dialog',\n    'aria-modal': 'true',\n    '[attr.aria-label]': 'bottomSheetConfig?.ariaLabel',\n    '[@state]': '_animationState',\n    '(@state.start)': '_onAnimationStart($event)',\n    '(@state.done)': '_onAnimationDone($event)'\n  },\n})\nexport class MatBottomSheetContainer extends BasePortalOutlet implements OnDestroy {\n  private _breakpointSubscription: Subscription;\n\n  /** The portal outlet inside of this container into which the content will be loaded. */\n  @ViewChild(CdkPortalOutlet) _portalOutlet: CdkPortalOutlet;\n\n  /** The state of the bottom sheet animations. */\n  _animationState: 'void' | 'visible' | 'hidden' = 'void';\n\n  /** Emits whenever the state of the animation changes. */\n  _animationStateChanged = new EventEmitter<AnimationEvent>();\n\n  /** The class that traps and manages focus within the bottom sheet. */\n  private _focusTrap: FocusTrap;\n\n  /** Element that was focused before the bottom sheet was opened. */\n  private _elementFocusedBeforeOpened: HTMLElement | null = null;\n\n  /** Server-side rendering-compatible reference to the global document object. */\n  private _document: Document;\n\n  /** Whether the component has been destroyed. */\n  private _destroyed: boolean;\n\n  constructor(\n    private _elementRef: ElementRef,\n    private _changeDetectorRef: ChangeDetectorRef,\n    private _focusTrapFactory: FocusTrapFactory,\n    breakpointObserver: BreakpointObserver,\n    @Optional() @Inject(DOCUMENT) document: any,\n    /** The bottom sheet configuration. */\n    public bottomSheetConfig: MatBottomSheetConfig) {\n    super();\n\n    this._document = document;\n    this._breakpointSubscription = breakpointObserver\n      .observe([Breakpoints.Medium, Breakpoints.Large, Breakpoints.XLarge])\n      .subscribe(() => {\n        this._toggleClass('mat-bottom-sheet-container-medium',\n            breakpointObserver.isMatched(Breakpoints.Medium));\n        this._toggleClass('mat-bottom-sheet-container-large',\n            breakpointObserver.isMatched(Breakpoints.Large));\n        this._toggleClass('mat-bottom-sheet-container-xlarge',\n            breakpointObserver.isMatched(Breakpoints.XLarge));\n      });\n  }\n\n  /** Attach a component portal as content to this bottom sheet container. */\n  attachComponentPortal<T>(portal: ComponentPortal<T>): ComponentRef<T> {\n    this._validatePortalAttached();\n    this._setPanelClass();\n    this._savePreviouslyFocusedElement();\n    return this._portalOutlet.attachComponentPortal(portal);\n  }\n\n  /** Attach a template portal as content to this bottom sheet container. */\n  attachTemplatePortal<C>(portal: TemplatePortal<C>): EmbeddedViewRef<C> {\n    this._validatePortalAttached();\n    this._setPanelClass();\n    this._savePreviouslyFocusedElement();\n    return this._portalOutlet.attachTemplatePortal(portal);\n  }\n\n  /** Begin animation of bottom sheet entrance into view. */\n  enter(): void {\n    if (!this._destroyed) {\n      this._animationState = 'visible';\n      this._changeDetectorRef.detectChanges();\n    }\n  }\n\n  /** Begin animation of the bottom sheet exiting from view. */\n  exit(): void {\n    if (!this._destroyed) {\n      this._animationState = 'hidden';\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  ngOnDestroy() {\n    this._breakpointSubscription.unsubscribe();\n    this._destroyed = true;\n  }\n\n  _onAnimationDone(event: AnimationEvent) {\n    if (event.toState === 'hidden') {\n      this._restoreFocus();\n    } else if (event.toState === 'visible' && this.bottomSheetConfig.autoFocus) {\n      this._trapFocus();\n    }\n\n    this._animationStateChanged.emit(event);\n  }\n\n  _onAnimationStart(event: AnimationEvent) {\n    this._animationStateChanged.emit(event);\n  }\n\n  private _toggleClass(cssClass: string, add: boolean) {\n    const classList = this._elementRef.nativeElement.classList;\n    add ? classList.add(cssClass) : classList.remove(cssClass);\n  }\n\n  private _validatePortalAttached() {\n    if (this._portalOutlet.hasAttached()) {\n      throw Error('Attempting to attach bottom sheet content after content is already attached');\n    }\n  }\n\n  private _setPanelClass() {\n    const element: HTMLElement = this._elementRef.nativeElement;\n    const panelClass = this.bottomSheetConfig.panelClass;\n\n    if (Array.isArray(panelClass)) {\n      // Note that we can't use a spread here, because IE doesn't support multiple arguments.\n      panelClass.forEach(cssClass => element.classList.add(cssClass));\n    } else if (panelClass) {\n      element.classList.add(panelClass);\n    }\n  }\n\n\n  /** Moves the focus inside the focus trap. */\n  private _trapFocus() {\n    if (!this._focusTrap) {\n      this._focusTrap = this._focusTrapFactory.create(this._elementRef.nativeElement);\n    }\n\n    this._focusTrap.focusInitialElementWhenReady();\n  }\n\n  /** Restores focus to the element that was focused before the bottom sheet opened. */\n  private _restoreFocus() {\n    const toFocus = this._elementFocusedBeforeOpened;\n\n    // We need the extra check, because IE can set the `activeElement` to null in some cases.\n    if (toFocus && typeof toFocus.focus === 'function') {\n      toFocus.focus();\n    }\n\n    if (this._focusTrap) {\n      this._focusTrap.destroy();\n    }\n  }\n\n  /** Saves a reference to the element that was focused before the bottom sheet was opened. */\n  private _savePreviouslyFocusedElement() {\n    this._elementFocusedBeforeOpened = this._document.activeElement as HTMLElement;\n\n    // The `focus` method isn't available during server-side rendering.\n    if (this._elementRef.nativeElement.focus) {\n      Promise.resolve().then(() => this._elementRef.nativeElement.focus());\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatBottomSheetContainer} from './bottom-sheet-container';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    OverlayModule,\n    MatCommonModule,\n    PortalModule,\n  ],\n  exports: [MatBottomSheetContainer, MatCommonModule],\n  declarations: [MatBottomSheetContainer],\n  entryComponents: [MatBottomSheetContainer],\n})\nexport class MatBottomSheetModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Location} from '@angular/common';\nimport {ESCAPE} from '@angular/cdk/keycodes';\nimport {OverlayRef} from '@angular/cdk/overlay';\nimport {merge, Observable, Subject, SubscriptionLike, Subscription} from 'rxjs';\nimport {filter, take} from 'rxjs/operators';\nimport {MatBottomSheetContainer} from './bottom-sheet-container';\n\n\n/**\n * Reference to a bottom sheet dispatched from the bottom sheet service.\n */\nexport class MatBottomSheetRef<T = any, R = any> {\n  /** Instance of the component making up the content of the bottom sheet. */\n  instance: T;\n\n  /**\n   * Instance of the component into which the bottom sheet content is projected.\n   * @docs-private\n   */\n  containerInstance: MatBottomSheetContainer;\n\n  /** Subject for notifying the user that the bottom sheet has been dismissed. */\n  private readonly _afterDismissed = new Subject<R | undefined>();\n\n  /** Subject for notifying the user that the bottom sheet has opened and appeared. */\n  private readonly _afterOpened = new Subject<void>();\n\n  /** Result to be passed down to the `afterDismissed` stream. */\n  private _result: R | undefined;\n\n  /** Subscription to changes in the user's location. */\n  private _locationChanges: SubscriptionLike = Subscription.EMPTY;\n\n  constructor(\n    containerInstance: MatBottomSheetContainer,\n    private _overlayRef: OverlayRef,\n    location?: Location) {\n    this.containerInstance = containerInstance;\n\n    // Emit when opening animation completes\n    containerInstance._animationStateChanged.pipe(\n      filter(event => event.phaseName === 'done' && event.toState === 'visible'),\n      take(1)\n    )\n    .subscribe(() => {\n      this._afterOpened.next();\n      this._afterOpened.complete();\n    });\n\n    // Dispose overlay when closing animation is complete\n    containerInstance._animationStateChanged.pipe(\n      filter(event => event.phaseName === 'done' && event.toState === 'hidden'),\n      take(1)\n    )\n    .subscribe(() => {\n      this._locationChanges.unsubscribe();\n      this._overlayRef.dispose();\n      this._afterDismissed.next(this._result);\n      this._afterDismissed.complete();\n    });\n\n    if (!containerInstance.bottomSheetConfig.disableClose) {\n      merge(\n        _overlayRef.backdropClick(),\n        _overlayRef.keydownEvents().pipe(filter(event => event.keyCode === ESCAPE))\n      ).subscribe(() => this.dismiss());\n    }\n\n    if (location) {\n      this._locationChanges = location.subscribe(() => {\n        if (containerInstance.bottomSheetConfig.closeOnNavigation) {\n          this.dismiss();\n        }\n      });\n    }\n  }\n\n  /**\n   * Dismisses the bottom sheet.\n   * @param result Data to be passed back to the bottom sheet opener.\n   */\n  dismiss(result?: R): void {\n    if (!this._afterDismissed.closed) {\n      // Transition the backdrop in parallel to the bottom sheet.\n      this.containerInstance._animationStateChanged.pipe(\n        filter(event => event.phaseName === 'start'),\n        take(1)\n      ).subscribe(() => this._overlayRef.detachBackdrop());\n\n      this._result = result;\n      this.containerInstance.exit();\n    }\n  }\n\n  /** Gets an observable that is notified when the bottom sheet is finished closing. */\n  afterDismissed(): Observable<R | undefined> {\n    return this._afterDismissed.asObservable();\n  }\n\n  /** Gets an observable that is notified when the bottom sheet has opened and appeared. */\n  afterOpened(): Observable<void> {\n    return this._afterOpened.asObservable();\n  }\n\n  /**\n   * Gets an observable that emits when the overlay's backdrop has been clicked.\n   */\n  backdropClick(): Observable<MouseEvent> {\n    return this._overlayRef.backdropClick();\n  }\n\n  /**\n   * Gets an observable that emits when keydown events are targeted on the overlay.\n   */\n  keydownEvents(): Observable<KeyboardEvent> {\n    return this._overlayRef.keydownEvents();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directionality} from '@angular/cdk/bidi';\nimport {Overlay, OverlayConfig, OverlayRef} from '@angular/cdk/overlay';\nimport {ComponentPortal, ComponentType, PortalInjector, TemplatePortal} from '@angular/cdk/portal';\nimport {ComponentRef, Injectable, Injector, Optional, SkipSelf, TemplateRef} from '@angular/core';\nimport {Location} from '@angular/common';\nimport {of as observableOf} from 'rxjs';\nimport {MAT_BOTTOM_SHEET_DATA, MatBottomSheetConfig} from './bottom-sheet-config';\nimport {MatBottomSheetContainer} from './bottom-sheet-container';\nimport {MatBottomSheetModule} from './bottom-sheet-module';\nimport {MatBottomSheetRef} from './bottom-sheet-ref';\n\n\n/**\n * Service to trigger Material Design bottom sheets.\n */\n@Injectable({providedIn: MatBottomSheetModule})\nexport class MatBottomSheet {\n  private _bottomSheetRefAtThisLevel: MatBottomSheetRef<any> | null = null;\n\n  /** Reference to the currently opened bottom sheet. */\n  get _openedBottomSheetRef(): MatBottomSheetRef<any> | null {\n    const parent = this._parentBottomSheet;\n    return parent ? parent._openedBottomSheetRef : this._bottomSheetRefAtThisLevel;\n  }\n\n  set _openedBottomSheetRef(value: MatBottomSheetRef<any> | null) {\n    if (this._parentBottomSheet) {\n      this._parentBottomSheet._openedBottomSheetRef = value;\n    } else {\n      this._bottomSheetRefAtThisLevel = value;\n    }\n  }\n\n  constructor(\n      private _overlay: Overlay,\n      private _injector: Injector,\n      @Optional() @SkipSelf() private _parentBottomSheet: MatBottomSheet,\n      @Optional() private _location?: Location) {}\n\n  open<T, D = any, R = any>(component: ComponentType<T>,\n                   config?: MatBottomSheetConfig<D>): MatBottomSheetRef<T, R>;\n  open<T, D = any, R = any>(template: TemplateRef<T>,\n                   config?: MatBottomSheetConfig<D>): MatBottomSheetRef<T, R>;\n\n  open<T, D = any, R = any>(componentOrTemplateRef: ComponentType<T> | TemplateRef<T>,\n                   config?: MatBottomSheetConfig<D>): MatBottomSheetRef<T, R> {\n\n    const _config = _applyConfigDefaults(config);\n    const overlayRef = this._createOverlay(_config);\n    const container = this._attachContainer(overlayRef, _config);\n    const ref = new MatBottomSheetRef<T, R>(container, overlayRef, this._location);\n\n    if (componentOrTemplateRef instanceof TemplateRef) {\n      container.attachTemplatePortal(new TemplatePortal<T>(componentOrTemplateRef, null!, {\n        $implicit: _config.data,\n        bottomSheetRef: ref\n      } as any));\n    } else {\n      const portal = new ComponentPortal(componentOrTemplateRef, undefined,\n            this._createInjector(_config, ref));\n      const contentRef = container.attachComponentPortal(portal);\n      ref.instance = contentRef.instance;\n    }\n\n    // When the bottom sheet is dismissed, clear the reference to it.\n    ref.afterDismissed().subscribe(() => {\n      // Clear the bottom sheet ref if it hasn't already been replaced by a newer one.\n      if (this._openedBottomSheetRef == ref) {\n        this._openedBottomSheetRef = null;\n      }\n    });\n\n    if (this._openedBottomSheetRef) {\n      // If a bottom sheet is already in view, dismiss it and enter the\n      // new bottom sheet after exit animation is complete.\n      this._openedBottomSheetRef.afterDismissed().subscribe(() => ref.containerInstance.enter());\n      this._openedBottomSheetRef.dismiss();\n    } else {\n      // If no bottom sheet is in view, enter the new bottom sheet.\n      ref.containerInstance.enter();\n    }\n\n    this._openedBottomSheetRef = ref;\n\n    return ref;\n  }\n\n  /**\n   * Dismisses the currently-visible bottom sheet.\n   */\n  dismiss(): void {\n    if (this._openedBottomSheetRef) {\n      this._openedBottomSheetRef.dismiss();\n    }\n  }\n\n  /**\n   * Attaches the bottom sheet container component to the overlay.\n   */\n  private _attachContainer(overlayRef: OverlayRef,\n                           config: MatBottomSheetConfig): MatBottomSheetContainer {\n\n    const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n    const injector = new PortalInjector(userInjector || this._injector, new WeakMap([\n      [MatBottomSheetConfig, config]\n    ]));\n\n    const containerPortal =\n        new ComponentPortal(MatBottomSheetContainer, config.viewContainerRef, injector);\n    const containerRef: ComponentRef<MatBottomSheetContainer> = overlayRef.attach(containerPortal);\n    return containerRef.instance;\n  }\n\n  /**\n   * Creates a new overlay and places it in the correct location.\n   * @param config The user-specified bottom sheet config.\n   */\n  private _createOverlay(config: MatBottomSheetConfig): OverlayRef {\n    const overlayConfig = new OverlayConfig({\n      direction: config.direction,\n      hasBackdrop: config.hasBackdrop,\n      maxWidth: '100%',\n      scrollStrategy: this._overlay.scrollStrategies.block(),\n      positionStrategy: this._overlay.position()\n        .global()\n        .centerHorizontally()\n        .bottom('0')\n    });\n\n    if (config.backdropClass) {\n      overlayConfig.backdropClass = config.backdropClass;\n    }\n\n    return this._overlay.create(overlayConfig);\n  }\n\n  /**\n   * Creates an injector to be used inside of a bottom sheet component.\n   * @param config Config that was used to create the bottom sheet.\n   * @param bottomSheetRef Reference to the bottom sheet.\n   */\n  private _createInjector<T>(config: MatBottomSheetConfig,\n                             bottomSheetRef: MatBottomSheetRef<T>): PortalInjector {\n\n    const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n    const injectionTokens = new WeakMap<any, any>([\n      [MatBottomSheetRef, bottomSheetRef],\n      [MAT_BOTTOM_SHEET_DATA, config.data]\n    ]);\n\n    if (config.direction &&\n        (!userInjector || !userInjector.get<Directionality | null>(Directionality, null))) {\n      injectionTokens.set(Directionality, {\n        value: config.direction,\n        change: observableOf()\n      });\n    }\n\n    return new PortalInjector(userInjector || this._injector, injectionTokens);\n  }\n}\n\n/**\n * Applies default options to the bottom sheet config.\n * @param config The configuration to which the defaults will be applied.\n * @returns The new configuration object with defaults applied.\n */\nfunction _applyConfigDefaults(config?: MatBottomSheetConfig): MatBottomSheetConfig {\n  return {...new MatBottomSheetConfig(), ...config};\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {ENTER, SPACE} from '@angular/cdk/keycodes';\nimport {\n  AfterViewChecked,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  InjectionToken,\n  Input,\n  OnDestroy,\n  Optional,\n  Output,\n  QueryList,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {Subject} from 'rxjs';\nimport {MatOptgroup} from './optgroup';\n\n/**\n * Option IDs need to be unique across components, so this counter exists outside of\n * the component definition.\n */\nlet _uniqueIdCounter = 0;\n\n/** Event object emitted by MatOption when selected or deselected. */\nexport class MatOptionSelectionChange {\n  constructor(\n    /** Reference to the option that emitted the event. */\n    public source: MatOption,\n    /** Whether the change in the option's value was a result of a user action. */\n    public isUserInput = false) { }\n}\n\n/**\n * Describes a parent component that manages a list of options.\n * Contains properties that the options can inherit.\n * @docs-private\n */\nexport interface MatOptionParentComponent {\n  disableRipple?: boolean;\n  multiple?: boolean;\n}\n\n/**\n * Injection token used to provide the parent component to options.\n */\nexport const MAT_OPTION_PARENT_COMPONENT =\n    new InjectionToken<MatOptionParentComponent>('MAT_OPTION_PARENT_COMPONENT');\n\n/**\n * Single option inside of a `<mat-select>` element.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-option',\n  exportAs: 'matOption',\n  host: {\n    'role': 'option',\n    '[attr.tabindex]': '_getTabIndex()',\n    '[class.mat-selected]': 'selected',\n    '[class.mat-option-multiple]': 'multiple',\n    '[class.mat-active]': 'active',\n    '[id]': 'id',\n    '[attr.aria-selected]': 'selected.toString()',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[class.mat-option-disabled]': 'disabled',\n    '(click)': '_selectViaInteraction()',\n    '(keydown)': '_handleKeydown($event)',\n    'class': 'mat-option',\n  },\n  styleUrls: ['option.css'],\n  templateUrl: 'option.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatOption implements AfterViewChecked, OnDestroy {\n  private _selected = false;\n  private _active = false;\n  private _disabled = false;\n  private _mostRecentViewValue = '';\n\n  /** Whether the wrapping component is in multiple selection mode. */\n  get multiple() { return this._parent && this._parent.multiple; }\n\n  /** Whether or not the option is currently selected. */\n  get selected(): boolean { return this._selected; }\n\n  /** The form value of the option. */\n  @Input() value: any;\n\n  /** The unique ID of the option. */\n  @Input() id: string = `mat-option-${_uniqueIdCounter++}`;\n\n  /** Whether the option is disabled. */\n  @Input()\n  get disabled() { return (this.group && this.group.disabled) || this._disabled; }\n  set disabled(value: any) { this._disabled = coerceBooleanProperty(value); }\n\n  /** Whether ripples for the option are disabled. */\n  get disableRipple() { return this._parent && this._parent.disableRipple; }\n\n  /** Event emitted when the option is selected or deselected. */\n  // tslint:disable-next-line:no-output-on-prefix\n  @Output() readonly onSelectionChange = new EventEmitter<MatOptionSelectionChange>();\n\n  /** Emits when the state of the option changes and any parents have to be notified. */\n  readonly _stateChanges = new Subject<void>();\n\n  constructor(\n    private _element: ElementRef,\n    private _changeDetectorRef: ChangeDetectorRef,\n    @Optional() @Inject(MAT_OPTION_PARENT_COMPONENT) private _parent: MatOptionParentComponent,\n    @Optional() readonly group: MatOptgroup) {}\n\n  /**\n   * Whether or not the option is currently active and ready to be selected.\n   * An active option displays styles as if it is focused, but the\n   * focus is actually retained somewhere else. This comes in handy\n   * for components like autocomplete where focus must remain on the input.\n   */\n  get active(): boolean {\n    return this._active;\n  }\n\n  /**\n   * The displayed value of the option. It is necessary to show the selected option in the\n   * select's trigger.\n   */\n  get viewValue(): string {\n    // TODO(kara): Add input property alternative for node envs.\n    return (this._getHostElement().textContent || '').trim();\n  }\n\n  /** Selects the option. */\n  select(): void {\n    if (!this._selected) {\n      this._selected = true;\n      this._changeDetectorRef.markForCheck();\n      this._emitSelectionChangeEvent();\n    }\n  }\n\n  /** Deselects the option. */\n  deselect(): void {\n    if (this._selected) {\n      this._selected = false;\n      this._changeDetectorRef.markForCheck();\n      this._emitSelectionChangeEvent();\n    }\n  }\n\n  /** Sets focus onto this option. */\n  focus(): void {\n    const element = this._getHostElement();\n\n    if (typeof element.focus === 'function') {\n      element.focus();\n    }\n  }\n\n  /**\n   * This method sets display styles on the option to make it appear\n   * active. This is used by the ActiveDescendantKeyManager so key\n   * events will display the proper options as active on arrow key events.\n   */\n  setActiveStyles(): void {\n    if (!this._active) {\n      this._active = true;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  /**\n   * This method removes display styles on the option that made it appear\n   * active. This is used by the ActiveDescendantKeyManager so key\n   * events will display the proper options as active on arrow key events.\n   */\n  setInactiveStyles(): void {\n    if (this._active) {\n      this._active = false;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  /** Gets the label to be used when determining whether the option should be focused. */\n  getLabel(): string {\n    return this.viewValue;\n  }\n\n  /** Ensures the option is selected when activated from the keyboard. */\n  _handleKeydown(event: KeyboardEvent): void {\n    if (event.keyCode === ENTER || event.keyCode === SPACE) {\n      this._selectViaInteraction();\n\n      // Prevent the page from scrolling down and form submits.\n      event.preventDefault();\n    }\n  }\n\n  /**\n   * `Selects the option while indicating the selection came from the user. Used to\n   * determine if the select's view -> model callback should be invoked.`\n   */\n  _selectViaInteraction(): void {\n    if (!this.disabled) {\n      this._selected = this.multiple ? !this._selected : true;\n      this._changeDetectorRef.markForCheck();\n      this._emitSelectionChangeEvent(true);\n    }\n  }\n\n  /** Returns the correct tabindex for the option depending on disabled state. */\n  _getTabIndex(): string {\n    return this.disabled ? '-1' : '0';\n  }\n\n  /** Gets the host DOM element. */\n  _getHostElement(): HTMLElement {\n    return this._element.nativeElement;\n  }\n\n  ngAfterViewChecked() {\n    // Since parent components could be using the option's label to display the selected values\n    // (e.g. `mat-select`) and they don't have a way of knowing if the option's label has changed\n    // we have to check for changes in the DOM ourselves and dispatch an event. These checks are\n    // relatively cheap, however we still limit them only to selected options in order to avoid\n    // hitting the DOM too often.\n    if (this._selected) {\n      const viewValue = this.viewValue;\n\n      if (viewValue !== this._mostRecentViewValue) {\n        this._mostRecentViewValue = viewValue;\n        this._stateChanges.next();\n      }\n    }\n  }\n\n  ngOnDestroy() {\n    this._stateChanges.complete();\n  }\n\n  /** Emits the selection change event. */\n  private _emitSelectionChangeEvent(isUserInput = false): void {\n    this.onSelectionChange.emit(new MatOptionSelectionChange(this, isUserInput));\n  }\n}\n\n/**\n * Counts the amount of option group labels that precede the specified option.\n * @param optionIndex Index of the option at which to start counting.\n * @param options Flat list of all of the options.\n * @param optionGroups Flat list of all of the option groups.\n * @docs-private\n */\nexport function _countGroupLabelsBeforeOption(optionIndex: number, options: QueryList<MatOption>,\n  optionGroups: QueryList<MatOptgroup>): number {\n\n  if (optionGroups.length) {\n    let optionsArray = options.toArray();\n    let groups = optionGroups.toArray();\n    let groupCounter = 0;\n\n    for (let i = 0; i < optionIndex + 1; i++) {\n      if (optionsArray[i].group && optionsArray[i].group === groups[groupCounter]) {\n        groupCounter++;\n      }\n    }\n\n    return groupCounter;\n  }\n\n  return 0;\n}\n\n/**\n * Determines the position to which to scroll a panel in order for an option to be into view.\n * @param optionIndex Index of the option to be scrolled into the view.\n * @param optionHeight Height of the options.\n * @param currentScrollPosition Current scroll position of the panel.\n * @param panelHeight Height of the panel.\n * @docs-private\n */\nexport function _getOptionScrollPosition(optionIndex: number, optionHeight: number,\n    currentScrollPosition: number, panelHeight: number): number {\n  const optionOffset = optionIndex * optionHeight;\n\n  if (optionOffset < currentScrollPosition) {\n    return optionOffset;\n  }\n\n  if (optionOffset + optionHeight > currentScrollPosition + panelHeight) {\n    return Math.max(0, optionOffset - panelHeight + optionHeight);\n  }\n\n  return currentScrollPosition;\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {MatRippleModule} from '../ripple/index';\nimport {MatPseudoCheckboxModule} from '../selection/index';\nimport {MatOption} from './option';\nimport {MatOptgroup} from './optgroup';\n\n\n@NgModule({\n  imports: [MatRippleModule, CommonModule, MatPseudoCheckboxModule],\n  exports: [MatOption, MatOptgroup],\n  declarations: [MatOption, MatOptgroup]\n})\nexport class MatOptionModule {}\n\n\nexport * from './option';\nexport * from './optgroup';\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {InjectionToken} from '@angular/core';\n\n/** InjectionToken that can be used to specify the global label options. */\nexport const MAT_LABEL_GLOBAL_OPTIONS =\n  new InjectionToken<LabelOptions>('mat-label-global-options');\n\n/** Type for the available floatLabel values. */\nexport type FloatLabelType = 'always' | 'never' | 'auto';\n\n/** Configurable options for floating labels. */\nexport interface LabelOptions {\n  /**\n   * Whether the label should float `always`, `never`, or `auto` (only when necessary).\n   * Default behavior is assumed to be `auto`.\n   */\n  float?: FloatLabelType;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, Input} from '@angular/core';\n\n\nlet nextUniqueId = 0;\n\n\n/** Single error message to be shown underneath the form field. */\n@Directive({\n  selector: 'mat-error',\n  host: {\n    'class': 'mat-error',\n    'role': 'alert',\n    '[attr.id]': 'id',\n  }\n})\nexport class MatError {\n  @Input() id: string = `mat-error-${nextUniqueId++}`;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/** Animations used by the MatFormField. */\nexport const matFormFieldAnimations: {\n  readonly transitionMessages: AnimationTriggerMetadata\n} = {\n  /** Animation that transitions the form field's error and hint messages. */\n  transitionMessages: trigger('transitionMessages', [\n    // TODO(mmalerba): Use angular animations for label animation as well.\n    state('enter', style({ opacity: 1, transform: 'translateY(0%)' })),\n    transition('void => enter', [\n      style({ opacity: 0, transform: 'translateY(-100%)' }),\n      animate('300ms cubic-bezier(0.55, 0, 0.55, 0.2)'),\n    ]),\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Observable} from 'rxjs';\nimport {NgControl} from '@angular/forms';\n\n\n/** An interface which allows a control to work inside of a `MatFormField`. */\nexport abstract class MatFormFieldControl<T> {\n  /** The value of the control. */\n  value: T | null;\n\n  /**\n   * Stream that emits whenever the state of the control changes such that the parent `MatFormField`\n   * needs to run change detection.\n   */\n  readonly stateChanges: Observable<void>;\n\n  /** The element ID for this control. */\n  readonly id: string;\n\n  /** The placeholder for this control. */\n  readonly placeholder: string;\n\n  /** Gets the NgControl for this control. */\n  readonly ngControl: NgControl | null;\n\n  /** Whether the control is focused. */\n  readonly focused: boolean;\n\n  /** Whether the control is empty. */\n  readonly empty: boolean;\n\n  /** Whether the `MatFormField` label should try to float. */\n  readonly shouldLabelFloat: boolean;\n\n  /** Whether the control is required. */\n  readonly required: boolean;\n\n  /** Whether the control is disabled. */\n  readonly disabled: boolean;\n\n  /** Whether the control is in an error state. */\n  readonly errorState: boolean;\n\n  /**\n   * An optional name for the control type that can be used to distinguish `mat-form-field` elements\n   * based on their control type. The form field will add a class,\n   * `mat-form-field-type-{{controlType}}` to its root element.\n   */\n  readonly controlType?: string;\n\n  /**\n   * Whether the input is currently in an autofilled state. If property is not present on the\n   * control it is assumed to be false.\n   */\n  readonly autofilled?: boolean;\n\n  /** Sets the list of element IDs that currently describe this control. */\n  abstract setDescribedByIds(ids: string[]): void;\n\n  /** Handles a click on the control's container. */\n  abstract onContainerClick(event: MouseEvent): void;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, Input} from '@angular/core';\n\n\nlet nextUniqueId = 0;\n\n\n/** Hint text to be shown underneath the form field control. */\n@Directive({\n  selector: 'mat-hint',\n  host: {\n    'class': 'mat-hint',\n    '[class.mat-right]': 'align == \"end\"',\n    '[attr.id]': 'id',\n    // Remove align attribute to prevent it from interfering with layout.\n    '[attr.align]': 'null',\n  }\n})\nexport class MatHint {\n  /** Whether to align the hint label at the start or end of the line. */\n  @Input() align: 'start' | 'end' = 'start';\n\n  /** Unique ID for the hint. Used for the aria-describedby on the form field control. */\n  @Input() id: string = `mat-hint-${nextUniqueId++}`;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive} from '@angular/core';\n\n\n/** The floating label for a `mat-form-field`. */\n@Directive({\n  selector: 'mat-label'\n})\nexport class MatLabel {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive} from '@angular/core';\n\n\n/**\n * The placeholder text for an `MatFormField`.\n * @deprecated Use `<mat-label>` to specify the label and the `placeholder` attribute to specify the\n *     placeholder.\n * @breaking-change 8.0.0\n */\n@Directive({\n  selector: 'mat-placeholder'\n})\nexport class MatPlaceholder {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive} from '@angular/core';\n\n\n/** Prefix to be placed the the front of the form field. */\n@Directive({\n  selector: '[matPrefix]',\n})\nexport class MatPrefix {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive} from '@angular/core';\n\n\n/** Suffix to be placed at the end of the form field. */\n@Directive({\n  selector: '[matSuffix]',\n})\nexport class MatSuffix {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  AfterContentChecked,\n  AfterContentInit,\n  AfterViewInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  ContentChildren,\n  ElementRef,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  Optional,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {\n  CanColor,\n  FloatLabelType,\n  LabelOptions,\n  MAT_LABEL_GLOBAL_OPTIONS,\n  mixinColor,\n} from '@angular/material/core';\nimport {EMPTY, fromEvent, merge} from 'rxjs';\nimport {startWith, take} from 'rxjs/operators';\nimport {MatError} from './error';\nimport {matFormFieldAnimations} from './form-field-animations';\nimport {MatFormFieldControl} from './form-field-control';\nimport {\n  getMatFormFieldDuplicatedHintError,\n  getMatFormFieldMissingControlError,\n  getMatFormFieldPlaceholderConflictError,\n} from './form-field-errors';\nimport {MatHint} from './hint';\nimport {MatLabel} from './label';\nimport {MatPlaceholder} from './placeholder';\nimport {MatPrefix} from './prefix';\nimport {MatSuffix} from './suffix';\nimport {Platform} from '@angular/cdk/platform';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\n\n\nlet nextUniqueId = 0;\nconst floatingLabelScale = 0.75;\nconst outlineGapPadding = 5;\n\n\n/**\n * Boilerplate for applying mixins to MatFormField.\n * @docs-private\n */\nexport class MatFormFieldBase {\n  constructor(public _elementRef: ElementRef) { }\n}\n\n/**\n * Base class to which we're applying the form field mixins.\n * @docs-private\n */\nexport const _MatFormFieldMixinBase = mixinColor(MatFormFieldBase, 'primary');\n\n/** Possible appearance styles for the form field. */\nexport type MatFormFieldAppearance = 'legacy' | 'standard' | 'fill' | 'outline';\n\n/**\n * Represents the default options form the form field that can be configured\n * using the `MAT_FORM_FIELD_DEFAULT_OPTIONS` injection token.\n */\nexport interface MatFormFieldDefaultOptions {\n  appearance?: MatFormFieldAppearance;\n}\n\n/**\n * Injection token that can be used to configure the\n * default options for all form field within an app.\n */\nexport const MAT_FORM_FIELD_DEFAULT_OPTIONS =\n    new InjectionToken<MatFormFieldDefaultOptions>('MAT_FORM_FIELD_DEFAULT_OPTIONS');\n\n\n/** Container for form controls that applies Material Design styling and behavior. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-form-field',\n  exportAs: 'matFormField',\n  templateUrl: 'form-field.html',\n  // MatInput is a directive and can't have styles, so we need to include its styles here.\n  // The MatInput styles are fairly minimal so it shouldn't be a big deal for people who\n  // aren't using MatInput.\n  styleUrls: [\n    'form-field.css',\n    'form-field-fill.css',\n    'form-field-legacy.css',\n    'form-field-outline.css',\n    'form-field-standard.css',\n    '../input/input.css',\n  ],\n  animations: [matFormFieldAnimations.transitionMessages],\n  host: {\n    'class': 'mat-form-field',\n    '[class.mat-form-field-appearance-standard]': 'appearance == \"standard\"',\n    '[class.mat-form-field-appearance-fill]': 'appearance == \"fill\"',\n    '[class.mat-form-field-appearance-outline]': 'appearance == \"outline\"',\n    '[class.mat-form-field-appearance-legacy]': 'appearance == \"legacy\"',\n    '[class.mat-form-field-invalid]': '_control.errorState',\n    '[class.mat-form-field-can-float]': '_canLabelFloat',\n    '[class.mat-form-field-should-float]': '_shouldLabelFloat()',\n    '[class.mat-form-field-hide-placeholder]': '_hideControlPlaceholder()',\n    '[class.mat-form-field-disabled]': '_control.disabled',\n    '[class.mat-form-field-autofilled]': '_control.autofilled',\n    '[class.mat-focused]': '_control.focused',\n    '[class.mat-accent]': 'color == \"accent\"',\n    '[class.mat-warn]': 'color == \"warn\"',\n    '[class.ng-untouched]': '_shouldForward(\"untouched\")',\n    '[class.ng-touched]': '_shouldForward(\"touched\")',\n    '[class.ng-pristine]': '_shouldForward(\"pristine\")',\n    '[class.ng-dirty]': '_shouldForward(\"dirty\")',\n    '[class.ng-valid]': '_shouldForward(\"valid\")',\n    '[class.ng-invalid]': '_shouldForward(\"invalid\")',\n    '[class.ng-pending]': '_shouldForward(\"pending\")',\n    '[class._mat-animation-noopable]': '!_animationsEnabled',\n  },\n  inputs: ['color'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\n\nexport class MatFormField extends _MatFormFieldMixinBase\n    implements AfterContentInit, AfterContentChecked, AfterViewInit, CanColor {\n  private _labelOptions: LabelOptions;\n  private _outlineGapCalculationNeeded = false;\n\n  /** The form-field appearance style. */\n  @Input()\n  get appearance(): MatFormFieldAppearance { return this._appearance; }\n  set appearance(value: MatFormFieldAppearance) {\n    const oldValue = this._appearance;\n\n    this._appearance = value || (this._defaults && this._defaults.appearance) || 'legacy';\n\n    if (this._appearance === 'outline' && oldValue !== value) {\n      // @breaking-change 7.0.0 Remove this check and else block once _ngZone is required.\n      if (this._ngZone) {\n        this._ngZone!.onStable.pipe(take(1)).subscribe(() => {\n          this._ngZone!.runOutsideAngular(() => this.updateOutlineGap());\n        });\n      } else {\n        Promise.resolve().then(() => this.updateOutlineGap());\n      }\n    }\n  }\n  _appearance: MatFormFieldAppearance;\n\n  /** Whether the required marker should be hidden. */\n  @Input()\n  get hideRequiredMarker(): boolean { return this._hideRequiredMarker; }\n  set hideRequiredMarker(value: boolean) {\n    this._hideRequiredMarker = coerceBooleanProperty(value);\n  }\n  private _hideRequiredMarker: boolean;\n\n  /** Override for the logic that disables the label animation in certain cases. */\n  private _showAlwaysAnimate = false;\n\n  /** Whether the floating label should always float or not. */\n  get _shouldAlwaysFloat(): boolean {\n    return this.floatLabel === 'always' && !this._showAlwaysAnimate;\n  }\n\n  /** Whether the label can float or not. */\n  get _canLabelFloat(): boolean { return this.floatLabel !== 'never'; }\n\n  /** State of the mat-hint and mat-error animations. */\n  _subscriptAnimationState: string = '';\n\n  /** Text for the form field hint. */\n  @Input()\n  get hintLabel(): string { return this._hintLabel; }\n  set hintLabel(value: string) {\n    this._hintLabel = value;\n    this._processHints();\n  }\n  private _hintLabel = '';\n\n  // Unique id for the hint label.\n  _hintLabelId: string = `mat-hint-${nextUniqueId++}`;\n\n  // Unique id for the internal form field label.\n  _labelId = `mat-form-field-label-${nextUniqueId++}`;\n\n  /**\n   * Whether the label should always float, never float or float as the user types.\n   *\n   * Note: only the legacy appearance supports the `never` option. `never` was originally added as a\n   * way to make the floating label emulate the behavior of a standard input placeholder. However\n   * the form field now supports both floating labels and placeholders. Therefore in the non-legacy\n   * appearances the `never` option has been disabled in favor of just using the placeholder.\n   */\n  @Input()\n  get floatLabel(): FloatLabelType {\n    return this.appearance !== 'legacy' && this._floatLabel === 'never' ? 'auto' : this._floatLabel;\n  }\n  set floatLabel(value: FloatLabelType) {\n    if (value !== this._floatLabel) {\n      this._floatLabel = value || this._labelOptions.float || 'auto';\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n  private _floatLabel: FloatLabelType;\n\n  /** Whether the Angular animations are enabled. */\n  _animationsEnabled: boolean;\n\n  /**\n   * @deprecated\n   * @breaking-change 7.0.0\n   */\n  @ViewChild('underline') underlineRef: ElementRef;\n\n  @ViewChild('connectionContainer') _connectionContainerRef: ElementRef<HTMLElement>;\n  @ViewChild('inputContainer') _inputContainerRef: ElementRef;\n  @ViewChild('label') private _label: ElementRef;\n  @ContentChild(MatFormFieldControl) _control: MatFormFieldControl<any>;\n  @ContentChild(MatPlaceholder) _placeholderChild: MatPlaceholder;\n  @ContentChild(MatLabel) _labelChild: MatLabel;\n  @ContentChildren(MatError) _errorChildren: QueryList<MatError>;\n  @ContentChildren(MatHint) _hintChildren: QueryList<MatHint>;\n  @ContentChildren(MatPrefix) _prefixChildren: QueryList<MatPrefix>;\n  @ContentChildren(MatSuffix) _suffixChildren: QueryList<MatSuffix>;\n\n  constructor(\n      public _elementRef: ElementRef,\n      private _changeDetectorRef: ChangeDetectorRef,\n      @Optional() @Inject(MAT_LABEL_GLOBAL_OPTIONS) labelOptions: LabelOptions,\n      @Optional() private _dir: Directionality,\n      @Optional() @Inject(MAT_FORM_FIELD_DEFAULT_OPTIONS)\n          private _defaults: MatFormFieldDefaultOptions,\n      // @breaking-change 7.0.0 _platform, _ngZone and _animationMode to be made required.\n      private _platform?: Platform,\n      private _ngZone?: NgZone,\n      @Optional() @Inject(ANIMATION_MODULE_TYPE) _animationMode?: string) {\n    super(_elementRef);\n\n    this._labelOptions = labelOptions ? labelOptions : {};\n    this.floatLabel = this._labelOptions.float || 'auto';\n    this._animationsEnabled = _animationMode !== 'NoopAnimations';\n\n    // Set the default through here so we invoke the setter on the first run.\n    this.appearance = (_defaults && _defaults.appearance) ? _defaults.appearance : 'legacy';\n  }\n\n  /**\n   * Gets an ElementRef for the element that a overlay attached to the form-field should be\n   * positioned relative to.\n   */\n  getConnectedOverlayOrigin(): ElementRef {\n    return this._connectionContainerRef || this._elementRef;\n  }\n\n  ngAfterContentInit() {\n    this._validateControlChild();\n    if (this._control.controlType) {\n      this._elementRef.nativeElement.classList\n          .add(`mat-form-field-type-${this._control.controlType}`);\n    }\n\n    // Subscribe to changes in the child control state in order to update the form field UI.\n    this._control.stateChanges.pipe(startWith<void>(null!)).subscribe(() => {\n      this._validatePlaceholders();\n      this._syncDescribedByIds();\n      this._changeDetectorRef.markForCheck();\n    });\n\n    // Run change detection if the value, prefix, or suffix changes.\n    const valueChanges = this._control.ngControl && this._control.ngControl.valueChanges || EMPTY;\n    merge(valueChanges, this._prefixChildren.changes, this._suffixChildren.changes)\n        .subscribe(() => this._changeDetectorRef.markForCheck());\n\n    // Re-validate when the number of hints changes.\n    this._hintChildren.changes.pipe(startWith(null)).subscribe(() => {\n      this._processHints();\n      this._changeDetectorRef.markForCheck();\n    });\n\n    // Update the aria-described by when the number of errors changes.\n    this._errorChildren.changes.pipe(startWith(null)).subscribe(() => {\n      this._syncDescribedByIds();\n      this._changeDetectorRef.markForCheck();\n    });\n  }\n\n  ngAfterContentChecked() {\n    this._validateControlChild();\n    if (this._outlineGapCalculationNeeded) {\n      this.updateOutlineGap();\n    }\n  }\n\n  ngAfterViewInit() {\n    // Avoid animations on load.\n    this._subscriptAnimationState = 'enter';\n    this._changeDetectorRef.detectChanges();\n  }\n\n  /** Determines whether a class from the NgControl should be forwarded to the host element. */\n  _shouldForward(prop: string): boolean {\n    const ngControl = this._control ? this._control.ngControl : null;\n    return ngControl && ngControl[prop];\n  }\n\n  _hasPlaceholder() {\n    return !!(this._control && this._control.placeholder || this._placeholderChild);\n  }\n\n  _hasLabel() {\n    return !!this._labelChild;\n  }\n\n  _shouldLabelFloat() {\n    return this._canLabelFloat && (this._control.shouldLabelFloat || this._shouldAlwaysFloat);\n  }\n\n  _hideControlPlaceholder() {\n    // In the legacy appearance the placeholder is promoted to a label if no label is given.\n    return this.appearance === 'legacy' && !this._hasLabel() ||\n        this._hasLabel() && !this._shouldLabelFloat();\n  }\n\n  _hasFloatingLabel() {\n    // In the legacy appearance the placeholder is promoted to a label if no label is given.\n    return this._hasLabel() || this.appearance === 'legacy' && this._hasPlaceholder();\n  }\n\n  /** Determines whether to display hints or errors. */\n  _getDisplayedMessages(): 'error' | 'hint' {\n    return (this._errorChildren && this._errorChildren.length > 0 &&\n        this._control.errorState) ? 'error' : 'hint';\n  }\n\n  /** Animates the placeholder up and locks it in position. */\n  _animateAndLockLabel(): void {\n    if (this._hasFloatingLabel() && this._canLabelFloat) {\n      // If animations are disabled, we shouldn't go in here,\n      // because the `transitionend` will never fire.\n      if (this._animationsEnabled) {\n        this._showAlwaysAnimate = true;\n\n        fromEvent(this._label.nativeElement, 'transitionend').pipe(take(1)).subscribe(() => {\n          this._showAlwaysAnimate = false;\n        });\n      }\n\n      this.floatLabel = 'always';\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  /**\n   * Ensure that there is only one placeholder (either `placeholder` attribute on the child control\n   * or child element with the `mat-placeholder` directive).\n   */\n  private _validatePlaceholders() {\n    if (this._control.placeholder && this._placeholderChild) {\n      throw getMatFormFieldPlaceholderConflictError();\n    }\n  }\n\n  /** Does any extra processing that is required when handling the hints. */\n  private _processHints() {\n    this._validateHints();\n    this._syncDescribedByIds();\n  }\n\n  /**\n   * Ensure that there is a maximum of one of each `<mat-hint>` alignment specified, with the\n   * attribute being considered as `align=\"start\"`.\n   */\n  private _validateHints() {\n    if (this._hintChildren) {\n      let startHint: MatHint;\n      let endHint: MatHint;\n      this._hintChildren.forEach((hint: MatHint) => {\n        if (hint.align === 'start') {\n          if (startHint || this.hintLabel) {\n            throw getMatFormFieldDuplicatedHintError('start');\n          }\n          startHint = hint;\n        } else if (hint.align === 'end') {\n          if (endHint) {\n            throw getMatFormFieldDuplicatedHintError('end');\n          }\n          endHint = hint;\n        }\n      });\n    }\n  }\n\n  /**\n   * Sets the list of element IDs that describe the child control. This allows the control to update\n   * its `aria-describedby` attribute accordingly.\n   */\n  private _syncDescribedByIds() {\n    if (this._control) {\n      let ids: string[] = [];\n\n      if (this._getDisplayedMessages() === 'hint') {\n        const startHint = this._hintChildren ?\n            this._hintChildren.find(hint => hint.align === 'start') : null;\n        const endHint = this._hintChildren ?\n            this._hintChildren.find(hint => hint.align === 'end') : null;\n\n        if (startHint) {\n          ids.push(startHint.id);\n        } else if (this._hintLabel) {\n          ids.push(this._hintLabelId);\n        }\n\n        if (endHint) {\n          ids.push(endHint.id);\n        }\n      } else if (this._errorChildren) {\n        ids = this._errorChildren.map(error => error.id);\n      }\n\n      this._control.setDescribedByIds(ids);\n    }\n  }\n\n  /** Throws an error if the form field's control is missing. */\n  protected _validateControlChild() {\n    if (!this._control) {\n      throw getMatFormFieldMissingControlError();\n    }\n  }\n\n  /**\n   * Updates the width and position of the gap in the outline. Only relevant for the outline\n   * appearance.\n   */\n  updateOutlineGap() {\n    const labelEl = this._label ? this._label.nativeElement : null;\n\n    if (this.appearance !== 'outline' || !labelEl || !labelEl.children.length ||\n        !labelEl.textContent.trim()) {\n      return;\n    }\n\n    if (this._platform && !this._platform.isBrowser) {\n      // getBoundingClientRect isn't available on the server.\n      return;\n    }\n    // If the element is not present in the DOM, the outline gap will need to be calculated\n    // the next time it is checked and in the DOM.\n    if (!document.documentElement.contains(this._elementRef.nativeElement)) {\n      this._outlineGapCalculationNeeded = true;\n      return;\n    }\n\n    let startWidth = 0;\n    let gapWidth = 0;\n    const startEls = this._connectionContainerRef.nativeElement.querySelectorAll<HTMLElement>(\n      '.mat-form-field-outline-start');\n    const gapEls = this._connectionContainerRef.nativeElement.querySelectorAll<HTMLElement>(\n        '.mat-form-field-outline-gap');\n    if (this._label && this._label.nativeElement.children.length) {\n      const containerStart = this._getStartEnd(\n          this._connectionContainerRef.nativeElement.getBoundingClientRect());\n      const labelStart = this._getStartEnd(labelEl.children[0].getBoundingClientRect());\n      let labelWidth = 0;\n\n      for (const child of labelEl.children) {\n        labelWidth += child.offsetWidth;\n      }\n      startWidth = labelStart - containerStart - outlineGapPadding;\n      gapWidth = labelWidth > 0 ? labelWidth * floatingLabelScale + outlineGapPadding * 2 : 0;\n    }\n\n    for (let i = 0; i < startEls.length; i++) {\n      startEls.item(i).style.width = `${startWidth}px`;\n    }\n    for (let i = 0; i < gapEls.length; i++) {\n      gapEls.item(i).style.width = `${gapWidth}px`;\n    }\n\n    this._outlineGapCalculationNeeded = false;\n  }\n\n  /** Gets the start end of the rect considering the current directionality. */\n  private _getStartEnd(rect: ClientRect): number {\n    return this._dir && this._dir.value === 'rtl' ? rect.right : rect.left;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {ObserversModule} from '@angular/cdk/observers';\nimport {MatError} from './error';\nimport {MatFormField} from './form-field';\nimport {MatHint} from './hint';\nimport {MatLabel} from './label';\nimport {MatPlaceholder} from './placeholder';\nimport {MatPrefix} from './prefix';\nimport {MatSuffix} from './suffix';\n\n\n@NgModule({\n  declarations: [\n    MatError,\n    MatFormField,\n    MatHint,\n    MatLabel,\n    MatPlaceholder,\n    MatPrefix,\n    MatSuffix,\n  ],\n  imports: [\n    CommonModule,\n    ObserversModule,\n  ],\n  exports: [\n    MatError,\n    MatFormField,\n    MatHint,\n    MatLabel,\n    MatPlaceholder,\n    MatPrefix,\n    MatSuffix,\n  ],\n})\nexport class MatFormFieldModule {}\n","/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)\r\n            t[p[i]] = s[p[i]];\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule, InjectionToken, Optional, Inject, isDevMode} from '@angular/core';\nimport {BidiModule} from '@angular/cdk/bidi';\n\n\n/** Injection token that configures whether the Material sanity checks are enabled. */\nexport const MATERIAL_SANITY_CHECKS = new InjectionToken<boolean>('mat-sanity-checks', {\n  providedIn: 'root',\n  factory: MATERIAL_SANITY_CHECKS_FACTORY,\n});\n\n/** @docs-private */\nexport function MATERIAL_SANITY_CHECKS_FACTORY(): boolean {\n  return true;\n}\n\n/**\n * Module that captures anything that should be loaded and/or run for *all* Angular Material\n * components. This includes Bidi, etc.\n *\n * This module should be imported to each top-level component module (e.g., MatTabsModule).\n */\n@NgModule({\n  imports: [BidiModule],\n  exports: [BidiModule],\n})\nexport class MatCommonModule {\n  /** Whether we've done the global sanity checks (e.g. a theme is loaded, there is a doctype). */\n  private _hasDoneGlobalChecks = false;\n\n  /** Whether we've already checked for HammerJs availability. */\n  private _hasCheckedHammer = false;\n\n  /** Reference to the global `document` object. */\n  private _document = typeof document === 'object' && document ? document : null;\n\n  /** Reference to the global 'window' object. */\n  private _window = typeof window === 'object' && window ? window : null;\n\n  constructor(@Optional() @Inject(MATERIAL_SANITY_CHECKS) private _sanityChecksEnabled: boolean) {\n    if (this._areChecksEnabled() && !this._hasDoneGlobalChecks) {\n      this._checkDoctypeIsDefined();\n      this._checkThemeIsPresent();\n      this._hasDoneGlobalChecks = true;\n    }\n  }\n\n  /** Whether any sanity checks are enabled */\n  private _areChecksEnabled(): boolean {\n    return this._sanityChecksEnabled && isDevMode() && !this._isTestEnv();\n  }\n\n  /** Whether the code is running in tests. */\n  private _isTestEnv() {\n    return this._window && (this._window['__karma__'] || this._window['jasmine']);\n  }\n\n  private _checkDoctypeIsDefined(): void {\n    if (this._document && !this._document.doctype) {\n      console.warn(\n        'Current document does not have a doctype. This may cause ' +\n        'some Angular Material components not to behave as expected.'\n      );\n    }\n  }\n\n  private _checkThemeIsPresent(): void {\n    // We need to assert that the `body` is defined, because these checks run very early\n    // and the `body` won't be defined if the consumer put their scripts in the `head`.\n    if (this._document && this._document.body && typeof getComputedStyle === 'function') {\n      const testElement = this._document.createElement('div');\n\n      testElement.classList.add('mat-theme-loaded-marker');\n      this._document.body.appendChild(testElement);\n\n      const computedStyle = getComputedStyle(testElement);\n\n      // In some situations the computed style of the test element can be null. For example in\n      // Firefox, the computed style is null if an application is running inside of a hidden iframe.\n      // See: https://bugzilla.mozilla.org/show_bug.cgi?id=548397\n      if (computedStyle && computedStyle.display !== 'none') {\n        console.warn(\n          'Could not find Angular Material core theme. Most Material ' +\n          'components may not work as expected. For more info refer ' +\n          'to the theming guide: https://material.angular.io/guide/theming'\n        );\n      }\n\n      this._document.body.removeChild(testElement);\n    }\n  }\n\n  /** Checks whether HammerJS is available. */\n  _checkHammerIsAvailable(): void {\n    if (this._hasCheckedHammer || !this._window) {\n      return;\n    }\n\n    if (this._areChecksEnabled() && !this._window['Hammer']) {\n      console.warn(\n        'Could not find HammerJS. Certain Angular Material components may not work correctly.');\n    }\n    this._hasCheckedHammer = true;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {Constructor} from './constructor';\n\n/** @docs-private */\nexport interface CanDisable {\n  /** Whether the component is disabled. */\n  disabled: boolean;\n}\n\n/** Mixin to augment a directive with a `disabled` property. */\nexport function mixinDisabled<T extends Constructor<{}>>(base: T): Constructor<CanDisable> & T {\n  return class extends base {\n    private _disabled: boolean = false;\n\n    get disabled() { return this._disabled; }\n    set disabled(value: any) { this._disabled = coerceBooleanProperty(value); }\n\n    constructor(...args: any[]) { super(...args); }\n  };\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Constructor} from './constructor';\nimport {ElementRef} from '@angular/core';\n\n/** @docs-private */\nexport interface CanColor {\n  /** Theme color palette for the component. */\n  color: ThemePalette;\n}\n\n/** @docs-private */\nexport interface HasElementRef {\n  _elementRef: ElementRef;\n}\n\n/** Possible color palette values. */\nexport type ThemePalette = 'primary' | 'accent' | 'warn' | undefined;\n\n/** Mixin to augment a directive with a `color` property. */\nexport function mixinColor<T extends Constructor<HasElementRef>>(base: T,\n    defaultColor?: ThemePalette): Constructor<CanColor> & T {\n  return class extends base {\n    private _color: ThemePalette;\n\n    get color(): ThemePalette { return this._color; }\n    set color(value: ThemePalette) {\n      const colorPalette = value || defaultColor;\n\n      if (colorPalette !== this._color) {\n        if (this._color) {\n          this._elementRef.nativeElement.classList.remove(`mat-${this._color}`);\n        }\n        if (colorPalette) {\n          this._elementRef.nativeElement.classList.add(`mat-${colorPalette}`);\n        }\n\n        this._color = colorPalette;\n      }\n    }\n\n    constructor(...args: any[]) {\n      super(...args);\n\n      // Set the default color that can be specified from the mixin.\n      this.color = defaultColor;\n    }\n  };\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {Constructor} from './constructor';\n\n/** @docs-private */\nexport interface CanDisableRipple {\n  /** Whether ripples are disabled. */\n  disableRipple: boolean;\n}\n\n/** Mixin to augment a directive with a `disableRipple` property. */\nexport function mixinDisableRipple<T extends Constructor<{}>>(base: T)\n    : Constructor<CanDisableRipple> & T {\n  return class extends base {\n    private _disableRipple: boolean = false;\n\n    /** Whether the ripple effect is disabled or not. */\n    get disableRipple() { return this._disableRipple; }\n    set disableRipple(value: any) { this._disableRipple = coerceBooleanProperty(value); }\n\n    constructor(...args: any[]) { super(...args); }\n  };\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Constructor} from './constructor';\nimport {CanDisable} from './disabled';\n\n/** @docs-private */\nexport interface HasTabIndex {\n  /** Tabindex of the component. */\n  tabIndex: number;\n}\n\n/** Mixin to augment a directive with a `tabIndex` property. */\nexport function mixinTabIndex<T extends Constructor<CanDisable>>(base: T, defaultTabIndex = 0)\n    : Constructor<HasTabIndex> & T {\n  return class extends base {\n    private _tabIndex: number = defaultTabIndex;\n\n    get tabIndex(): number { return this.disabled ? -1 : this._tabIndex; }\n    set tabIndex(value: number) {\n      // If the specified tabIndex value is null or undefined, fall back to the default value.\n      this._tabIndex = value != null ? value : defaultTabIndex;\n    }\n\n    constructor(...args: any[]) {\n      super(...args);\n    }\n  };\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Constructor} from './constructor';\nimport {ErrorStateMatcher} from '../error/error-options';\nimport {FormControl, FormGroupDirective, NgControl, NgForm} from '@angular/forms';\nimport {Subject} from 'rxjs';\n\n/** @docs-private */\nexport interface CanUpdateErrorState {\n  updateErrorState();\n  readonly stateChanges: Subject<void>;\n  errorState: boolean;\n  errorStateMatcher: ErrorStateMatcher;\n}\n\n/** @docs-private */\nexport interface HasErrorState {\n  _parentFormGroup: FormGroupDirective;\n  _parentForm: NgForm;\n  _defaultErrorStateMatcher: ErrorStateMatcher;\n  ngControl: NgControl;\n}\n\n/**\n * Mixin to augment a directive with updateErrorState method.\n * For component with `errorState` and need to update `errorState`.\n */\nexport function mixinErrorState<T extends Constructor<HasErrorState>>(base: T)\n: Constructor<CanUpdateErrorState> & T {\n  return class extends base {\n    /** Whether the component is in an error state. */\n    errorState: boolean = false;\n\n    /**\n     * Stream that emits whenever the state of the input changes such that the wrapping\n     * `MatFormField` needs to run change detection.\n     */\n    readonly stateChanges = new Subject<void>();\n\n    errorStateMatcher: ErrorStateMatcher;\n\n    updateErrorState() {\n      const oldState = this.errorState;\n      const parent = this._parentFormGroup || this._parentForm;\n      const matcher = this.errorStateMatcher || this._defaultErrorStateMatcher;\n      const control = this.ngControl ? this.ngControl.control as FormControl : null;\n      const newState = matcher.isErrorState(control, parent);\n\n      if (newState !== oldState) {\n        this.errorState = newState;\n        this.stateChanges.next();\n      }\n    }\n\n    constructor(...args: any[]) {\n      super(...args);\n    }\n  };\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Observable, Subscriber} from 'rxjs';\nimport {Constructor} from './constructor';\n\n\n/**\n * Mixin that adds an initialized property to a directive which, when subscribed to, will emit a\n * value once markInitialized has been called, which should be done during the ngOnInit function.\n * If the subscription is made after it has already been marked as initialized, then it will trigger\n * an emit immediately.\n * @docs-private\n */\nexport interface HasInitialized {\n  /** Stream that emits once during the directive/component's ngOnInit. */\n  initialized: Observable<void>;\n\n  /**\n   * Sets the state as initialized and must be called during ngOnInit to notify subscribers that\n   * the directive has been initialized.\n   * @docs-private\n   */\n  _markInitialized: () => void;\n}\n\n/** Mixin to augment a directive with an initialized property that will emits when ngOnInit ends. */\nexport function mixinInitialized<T extends Constructor<{}>>(base: T):\n    Constructor<HasInitialized> & T {\n  return class extends base {\n    /** Whether this directive has been marked as initialized. */\n    _isInitialized = false;\n\n    /**\n     * List of subscribers that subscribed before the directive was initialized. Should be notified\n     * during _markInitialized. Set to null after pending subscribers are notified, and should\n     * not expect to be populated after.\n     */\n    _pendingSubscribers: Subscriber<void>[] | null = [];\n\n    /**\n     * Observable stream that emits when the directive initializes. If already initialized, the\n     * subscriber is stored to be notified once _markInitialized is called.\n     */\n    initialized = new Observable<void>(subscriber => {\n      // If initialized, immediately notify the subscriber. Otherwise store the subscriber to notify\n      // when _markInitialized is called.\n      if (this._isInitialized) {\n        this._notifySubscriber(subscriber);\n      } else {\n        this._pendingSubscribers!.push(subscriber);\n      }\n    });\n\n    constructor(...args: any[]) { super(...args); }\n\n    /**\n     * Marks the state as initialized and notifies pending subscribers. Should be called at the end\n     * of ngOnInit.\n     * @docs-private\n     */\n    _markInitialized(): void {\n      if (this._isInitialized) {\n        throw Error('This directive has already been marked as initialized and ' +\n            'should not be called twice.');\n      }\n\n      this._isInitialized = true;\n\n      this._pendingSubscribers!.forEach(this._notifySubscriber);\n      this._pendingSubscribers = null;\n    }\n\n    /** Emits and completes the subscriber stream (should only emit once). */\n    _notifySubscriber(subscriber: Subscriber<void>): void {\n      subscriber.next();\n      subscriber.complete();\n    }\n  };\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {inject, InjectionToken, LOCALE_ID} from '@angular/core';\nimport {Observable, Subject} from 'rxjs';\n\n/** InjectionToken for datepicker that can be used to override default locale code. */\nexport const MAT_DATE_LOCALE = new InjectionToken<string>('MAT_DATE_LOCALE', {\n  providedIn: 'root',\n  factory: MAT_DATE_LOCALE_FACTORY,\n});\n\n/** @docs-private */\nexport function MAT_DATE_LOCALE_FACTORY(): string {\n  return inject(LOCALE_ID);\n}\n\n/**\n * No longer needed since MAT_DATE_LOCALE has been changed to a scoped injectable.\n * If you are importing and providing this in your code you can simply remove it.\n * @deprecated\n * @breaking-change 7.0.0\n */\nexport const MAT_DATE_LOCALE_PROVIDER = {provide: MAT_DATE_LOCALE, useExisting: LOCALE_ID};\n\n/** Adapts type `D` to be usable as a date by cdk-based components that work with dates. */\nexport abstract class DateAdapter<D> {\n  /** The locale to use for all dates. */\n  protected locale: any;\n\n  /** A stream that emits when the locale changes. */\n  get localeChanges(): Observable<void> { return this._localeChanges; }\n  protected _localeChanges = new Subject<void>();\n\n  /**\n   * Gets the year component of the given date.\n   * @param date The date to extract the year from.\n   * @returns The year component.\n   */\n  abstract getYear(date: D): number;\n\n  /**\n   * Gets the month component of the given date.\n   * @param date The date to extract the month from.\n   * @returns The month component (0-indexed, 0 = January).\n   */\n  abstract getMonth(date: D): number;\n\n  /**\n   * Gets the date of the month component of the given date.\n   * @param date The date to extract the date of the month from.\n   * @returns The month component (1-indexed, 1 = first of month).\n   */\n  abstract getDate(date: D): number;\n\n  /**\n   * Gets the day of the week component of the given date.\n   * @param date The date to extract the day of the week from.\n   * @returns The month component (0-indexed, 0 = Sunday).\n   */\n  abstract getDayOfWeek(date: D): number;\n\n  /**\n   * Gets a list of names for the months.\n   * @param style The naming style (e.g. long = 'January', short = 'Jan', narrow = 'J').\n   * @returns An ordered list of all month names, starting with January.\n   */\n  abstract getMonthNames(style: 'long' | 'short' | 'narrow'): string[];\n\n  /**\n   * Gets a list of names for the dates of the month.\n   * @returns An ordered list of all date of the month names, starting with '1'.\n   */\n  abstract getDateNames(): string[];\n\n  /**\n   * Gets a list of names for the days of the week.\n   * @param style The naming style (e.g. long = 'Sunday', short = 'Sun', narrow = 'S').\n   * @returns An ordered list of all weekday names, starting with Sunday.\n   */\n  abstract getDayOfWeekNames(style: 'long' | 'short' | 'narrow'): string[];\n\n  /**\n   * Gets the name for the year of the given date.\n   * @param date The date to get the year name for.\n   * @returns The name of the given year (e.g. '2017').\n   */\n  abstract getYearName(date: D): string;\n\n  /**\n   * Gets the first day of the week.\n   * @returns The first day of the week (0-indexed, 0 = Sunday).\n   */\n  abstract getFirstDayOfWeek(): number;\n\n  /**\n   * Gets the number of days in the month of the given date.\n   * @param date The date whose month should be checked.\n   * @returns The number of days in the month of the given date.\n   */\n  abstract getNumDaysInMonth(date: D): number;\n\n  /**\n   * Clones the given date.\n   * @param date The date to clone\n   * @returns A new date equal to the given date.\n   */\n  abstract clone(date: D): D;\n\n  /**\n   * Creates a date with the given year, month, and date. Does not allow over/under-flow of the\n   * month and date.\n   * @param year The full year of the date. (e.g. 89 means the year 89, not the year 1989).\n   * @param month The month of the date (0-indexed, 0 = January). Must be an integer 0 - 11.\n   * @param date The date of month of the date. Must be an integer 1 - length of the given month.\n   * @returns The new date, or null if invalid.\n   */\n  abstract createDate(year: number, month: number, date: number): D;\n\n  /**\n   * Gets today's date.\n   * @returns Today's date.\n   */\n  abstract today(): D;\n\n  /**\n   * Parses a date from a user-provided value.\n   * @param value The value to parse.\n   * @param parseFormat The expected format of the value being parsed\n   *     (type is implementation-dependent).\n   * @returns The parsed date.\n   */\n  abstract parse(value: any, parseFormat: any): D | null;\n\n  /**\n   * Formats a date as a string according to the given format.\n   * @param date The value to format.\n   * @param displayFormat The format to use to display the date as a string.\n   * @returns The formatted date string.\n   */\n  abstract format(date: D, displayFormat: any): string;\n\n  /**\n   * Adds the given number of years to the date. Years are counted as if flipping 12 pages on the\n   * calendar for each year and then finding the closest date in the new month. For example when\n   * adding 1 year to Feb 29, 2016, the resulting date will be Feb 28, 2017.\n   * @param date The date to add years to.\n   * @param years The number of years to add (may be negative).\n   * @returns A new date equal to the given one with the specified number of years added.\n   */\n  abstract addCalendarYears(date: D, years: number): D;\n\n  /**\n   * Adds the given number of months to the date. Months are counted as if flipping a page on the\n   * calendar for each month and then finding the closest date in the new month. For example when\n   * adding 1 month to Jan 31, 2017, the resulting date will be Feb 28, 2017.\n   * @param date The date to add months to.\n   * @param months The number of months to add (may be negative).\n   * @returns A new date equal to the given one with the specified number of months added.\n   */\n  abstract addCalendarMonths(date: D, months: number): D;\n\n  /**\n   * Adds the given number of days to the date. Days are counted as if moving one cell on the\n   * calendar for each day.\n   * @param date The date to add days to.\n   * @param days The number of days to add (may be negative).\n   * @returns A new date equal to the given one with the specified number of days added.\n   */\n  abstract addCalendarDays(date: D, days: number): D;\n\n  /**\n   * Gets the RFC 3339 compatible string (https://tools.ietf.org/html/rfc3339) for the given date.\n   * This method is used to generate date strings that are compatible with native HTML attributes\n   * such as the `min` or `max` attribute of an `<input>`.\n   * @param date The date to get the ISO date string for.\n   * @returns The ISO date string date string.\n   */\n  abstract toIso8601(date: D): string;\n\n  /**\n   * Checks whether the given object is considered a date instance by this DateAdapter.\n   * @param obj The object to check\n   * @returns Whether the object is a date instance.\n   */\n  abstract isDateInstance(obj: any): boolean;\n\n  /**\n   * Checks whether the given date is valid.\n   * @param date The date to check.\n   * @returns Whether the date is valid.\n   */\n  abstract isValid(date: D): boolean;\n\n  /**\n   * Gets date instance that is not valid.\n   * @returns An invalid date.\n   */\n  abstract invalid(): D;\n\n  /**\n   * Attempts to deserialize a value to a valid date object. This is different from parsing in that\n   * deserialize should only accept non-ambiguous, locale-independent formats (e.g. a ISO 8601\n   * string). The default implementation does not allow any deserialization, it simply checks that\n   * the given value is already a valid date object or null. The `<mat-datepicker>` will call this\n   * method on all of it's `@Input()` properties that accept dates. It is therefore possible to\n   * support passing values from your backend directly to these properties by overriding this method\n   * to also deserialize the format used by your backend.\n   * @param value The value to be deserialized into a date object.\n   * @returns The deserialized date object, either a valid date, null if the value can be\n   *     deserialized into a null date (e.g. the empty string), or an invalid date.\n   */\n  deserialize(value: any): D | null {\n    if (value == null || this.isDateInstance(value) && this.isValid(value)) {\n      return value;\n    }\n    return this.invalid();\n  }\n\n  /**\n   * Sets the locale used for all dates.\n   * @param locale The new locale.\n   */\n  setLocale(locale: any) {\n    this.locale = locale;\n    this._localeChanges.next();\n  }\n\n  /**\n   * Compares two dates.\n   * @param first The first date to compare.\n   * @param second The second date to compare.\n   * @returns 0 if the dates are equal, a number less than 0 if the first date is earlier,\n   *     a number greater than 0 if the first date is later.\n   */\n  compareDate(first: D, second: D): number {\n    return this.getYear(first) - this.getYear(second) ||\n        this.getMonth(first) - this.getMonth(second) ||\n        this.getDate(first) - this.getDate(second);\n  }\n\n  /**\n   * Checks if two dates are equal.\n   * @param first The first date to check.\n   * @param second The second date to check.\n   * @returns Whether the two dates are equal.\n   *     Null dates are considered equal to other null dates.\n   */\n  sameDate(first: D | null, second: D | null): boolean {\n    if (first && second) {\n      let firstValid = this.isValid(first);\n      let secondValid = this.isValid(second);\n      if (firstValid && secondValid) {\n        return !this.compareDate(first, second);\n      }\n      return firstValid == secondValid;\n    }\n    return first == second;\n  }\n\n  /**\n   * Clamp the given date between min and max dates.\n   * @param date The date to clamp.\n   * @param min The minimum value to allow. If null or omitted no min is enforced.\n   * @param max The maximum value to allow. If null or omitted no max is enforced.\n   * @returns `min` if `date` is less than `min`, `max` if date is greater than `max`,\n   *     otherwise `date`.\n   */\n  clampDate(date: D, min?: D | null, max?: D | null): D {\n    if (min && this.compareDate(date, min) < 0) {\n      return min;\n    }\n    if (max && this.compareDate(date, max) > 0) {\n      return max;\n    }\n    return date;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Platform} from '@angular/cdk/platform';\nimport {Inject, Injectable, Optional} from '@angular/core';\nimport {DateAdapter, MAT_DATE_LOCALE} from './date-adapter';\n\n// TODO(mmalerba): Remove when we no longer support safari 9.\n/** Whether the browser supports the Intl API. */\nconst SUPPORTS_INTL_API = typeof Intl != 'undefined';\n\n\n/** The default month names to use if Intl API is not available. */\nconst DEFAULT_MONTH_NAMES = {\n  'long': [\n    'January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September',\n    'October', 'November', 'December'\n  ],\n  'short': ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'],\n  'narrow': ['J', 'F', 'M', 'A', 'M', 'J', 'J', 'A', 'S', 'O', 'N', 'D']\n};\n\n\n/** The default date names to use if Intl API is not available. */\nconst DEFAULT_DATE_NAMES = range(31, i => String(i + 1));\n\n\n/** The default day of the week names to use if Intl API is not available. */\nconst DEFAULT_DAY_OF_WEEK_NAMES = {\n  'long': ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'],\n  'short': ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'],\n  'narrow': ['S', 'M', 'T', 'W', 'T', 'F', 'S']\n};\n\n\n/**\n * Matches strings that have the form of a valid RFC 3339 string\n * (https://tools.ietf.org/html/rfc3339). Note that the string may not actually be a valid date\n * because the regex will match strings an with out of bounds month, date, etc.\n */\nconst ISO_8601_REGEX =\n    /^\\d{4}-\\d{2}-\\d{2}(?:T\\d{2}:\\d{2}:\\d{2}(?:\\.\\d+)?(?:Z|(?:(?:\\+|-)\\d{2}:\\d{2}))?)?$/;\n\n\n/** Creates an array and fills it with values. */\nfunction range<T>(length: number, valueFunction: (index: number) => T): T[] {\n  const valuesArray = Array(length);\n  for (let i = 0; i < length; i++) {\n    valuesArray[i] = valueFunction(i);\n  }\n  return valuesArray;\n}\n\n/** Adapts the native JS Date for use with cdk-based components that work with dates. */\n@Injectable()\nexport class NativeDateAdapter extends DateAdapter<Date> {\n  /** Whether to clamp the date between 1 and 9999 to avoid IE and Edge errors. */\n  private readonly _clampDate: boolean;\n\n  /**\n   * Whether to use `timeZone: 'utc'` with `Intl.DateTimeFormat` when formatting dates.\n   * Without this `Intl.DateTimeFormat` sometimes chooses the wrong timeZone, which can throw off\n   * the result. (e.g. in the en-US locale `new Date(1800, 7, 14).toLocaleDateString()`\n   * will produce `'8/13/1800'`.\n   *\n   * TODO(mmalerba): drop this variable. It's not being used in the code right now. We're now\n   * getting the string representation of a Date object from it's utc representation. We're keeping\n   * it here for sometime, just for precaution, in case we decide to revert some of these changes\n   * though.\n   */\n  useUtcForDisplay: boolean = true;\n\n  constructor(@Optional() @Inject(MAT_DATE_LOCALE) matDateLocale: string, platform: Platform) {\n    super();\n    super.setLocale(matDateLocale);\n\n    // IE does its own time zone correction, so we disable this on IE.\n    this.useUtcForDisplay = !platform.TRIDENT;\n    this._clampDate = platform.TRIDENT || platform.EDGE;\n  }\n\n  getYear(date: Date): number {\n    return date.getFullYear();\n  }\n\n  getMonth(date: Date): number {\n    return date.getMonth();\n  }\n\n  getDate(date: Date): number {\n    return date.getDate();\n  }\n\n  getDayOfWeek(date: Date): number {\n    return date.getDay();\n  }\n\n  getMonthNames(style: 'long' | 'short' | 'narrow'): string[] {\n    if (SUPPORTS_INTL_API) {\n      const dtf = new Intl.DateTimeFormat(this.locale, {month: style, timeZone: 'utc'});\n      return range(12, i =>\n          this._stripDirectionalityCharacters(this._format(dtf, new Date(2017, i, 1))));\n    }\n    return DEFAULT_MONTH_NAMES[style];\n  }\n\n  getDateNames(): string[] {\n    if (SUPPORTS_INTL_API) {\n      const dtf = new Intl.DateTimeFormat(this.locale, {day: 'numeric', timeZone: 'utc'});\n      return range(31, i => this._stripDirectionalityCharacters(\n          this._format(dtf, new Date(2017, 0, i + 1))));\n    }\n    return DEFAULT_DATE_NAMES;\n  }\n\n  getDayOfWeekNames(style: 'long' | 'short' | 'narrow'): string[] {\n    if (SUPPORTS_INTL_API) {\n      const dtf = new Intl.DateTimeFormat(this.locale, {weekday: style, timeZone: 'utc'});\n      return range(7, i => this._stripDirectionalityCharacters(\n          this._format(dtf, new Date(2017, 0, i + 1))));\n    }\n    return DEFAULT_DAY_OF_WEEK_NAMES[style];\n  }\n\n  getYearName(date: Date): string {\n    if (SUPPORTS_INTL_API) {\n      const dtf = new Intl.DateTimeFormat(this.locale, {year: 'numeric', timeZone: 'utc'});\n      return this._stripDirectionalityCharacters(this._format(dtf, date));\n    }\n    return String(this.getYear(date));\n  }\n\n  getFirstDayOfWeek(): number {\n    // We can't tell using native JS Date what the first day of the week is, we default to Sunday.\n    return 0;\n  }\n\n  getNumDaysInMonth(date: Date): number {\n    return this.getDate(this._createDateWithOverflow(\n        this.getYear(date), this.getMonth(date) + 1, 0));\n  }\n\n  clone(date: Date): Date {\n    return this.createDate(this.getYear(date), this.getMonth(date), this.getDate(date));\n  }\n\n  createDate(year: number, month: number, date: number): Date {\n    // Check for invalid month and date (except upper bound on date which we have to check after\n    // creating the Date).\n    if (month < 0 || month > 11) {\n      throw Error(`Invalid month index \"${month}\". Month index has to be between 0 and 11.`);\n    }\n\n    if (date < 1) {\n      throw Error(`Invalid date \"${date}\". Date has to be greater than 0.`);\n    }\n\n    let result = this._createDateWithOverflow(year, month, date);\n    // Check that the date wasn't above the upper bound for the month, causing the month to overflow\n    if (result.getMonth() != month) {\n      throw Error(`Invalid date \"${date}\" for month with index \"${month}\".`);\n    }\n\n    return result;\n  }\n\n  today(): Date {\n    return new Date();\n  }\n\n  parse(value: any): Date | null {\n    // We have no way using the native JS Date to set the parse format or locale, so we ignore these\n    // parameters.\n    if (typeof value == 'number') {\n      return new Date(value);\n    }\n    return value ? new Date(Date.parse(value)) : null;\n  }\n\n  format(date: Date, displayFormat: Object): string {\n    if (!this.isValid(date)) {\n      throw Error('NativeDateAdapter: Cannot format invalid date.');\n    }\n\n    if (SUPPORTS_INTL_API) {\n      // On IE and Edge the i18n API will throw a hard error that can crash the entire app\n      // if we attempt to format a date whose year is less than 1 or greater than 9999.\n      if (this._clampDate && (date.getFullYear() < 1 || date.getFullYear() > 9999)) {\n        date = this.clone(date);\n        date.setFullYear(Math.max(1, Math.min(9999, date.getFullYear())));\n      }\n\n      displayFormat = {...displayFormat, timeZone: 'utc'};\n\n      const dtf = new Intl.DateTimeFormat(this.locale, displayFormat);\n      return this._stripDirectionalityCharacters(this._format(dtf, date));\n    }\n    return this._stripDirectionalityCharacters(date.toDateString());\n  }\n\n  addCalendarYears(date: Date, years: number): Date {\n    return this.addCalendarMonths(date, years * 12);\n  }\n\n  addCalendarMonths(date: Date, months: number): Date {\n    let newDate = this._createDateWithOverflow(\n        this.getYear(date), this.getMonth(date) + months, this.getDate(date));\n\n    // It's possible to wind up in the wrong month if the original month has more days than the new\n    // month. In this case we want to go to the last day of the desired month.\n    // Note: the additional + 12 % 12 ensures we end up with a positive number, since JS % doesn't\n    // guarantee this.\n    if (this.getMonth(newDate) != ((this.getMonth(date) + months) % 12 + 12) % 12) {\n      newDate = this._createDateWithOverflow(this.getYear(newDate), this.getMonth(newDate), 0);\n    }\n\n    return newDate;\n  }\n\n  addCalendarDays(date: Date, days: number): Date {\n    return this._createDateWithOverflow(\n        this.getYear(date), this.getMonth(date), this.getDate(date) + days);\n  }\n\n  toIso8601(date: Date): string {\n    return [\n      date.getUTCFullYear(),\n      this._2digit(date.getUTCMonth() + 1),\n      this._2digit(date.getUTCDate())\n    ].join('-');\n  }\n\n  /**\n   * Returns the given value if given a valid Date or null. Deserializes valid ISO 8601 strings\n   * (https://www.ietf.org/rfc/rfc3339.txt) into valid Dates and empty string into null. Returns an\n   * invalid date for all other values.\n   */\n  deserialize(value: any): Date | null {\n    if (typeof value === 'string') {\n      if (!value) {\n        return null;\n      }\n      // The `Date` constructor accepts formats other than ISO 8601, so we need to make sure the\n      // string is the right format first.\n      if (ISO_8601_REGEX.test(value)) {\n        let date = new Date(value);\n        if (this.isValid(date)) {\n          return date;\n        }\n      }\n    }\n    return super.deserialize(value);\n  }\n\n  isDateInstance(obj: any) {\n    return obj instanceof Date;\n  }\n\n  isValid(date: Date) {\n    return !isNaN(date.getTime());\n  }\n\n  invalid(): Date {\n    return new Date(NaN);\n  }\n\n  /** Creates a date but allows the month and date to overflow. */\n  private _createDateWithOverflow(year: number, month: number, date: number) {\n    const result = new Date(year, month, date);\n\n    // We need to correct for the fact that JS native Date treats years in range [0, 99] as\n    // abbreviations for 19xx.\n    if (year >= 0 && year < 100) {\n      result.setFullYear(this.getYear(result) - 1900);\n    }\n    return result;\n  }\n\n  /**\n   * Pads a number to make it two digits.\n   * @param n The number to pad.\n   * @returns The padded number.\n   */\n  private _2digit(n: number) {\n    return ('00' + n).slice(-2);\n  }\n\n  /**\n   * Strip out unicode LTR and RTL characters. Edge and IE insert these into formatted dates while\n   * other browsers do not. We remove them to make output consistent and because they interfere with\n   * date parsing.\n   * @param str The string to strip direction characters from.\n   * @returns The stripped string.\n   */\n  private _stripDirectionalityCharacters(str: string) {\n    return str.replace(/[\\u200e\\u200f]/g, '');\n  }\n\n  /**\n   * When converting Date object to string, javascript built-in functions may return wrong\n   * results because it applies its internal DST rules. The DST rules around the world change\n   * very frequently, and the current valid rule is not always valid in previous years though.\n   * We work around this problem building a new Date object which has its internal UTC\n   * representation with the local date and time.\n   * @param dtf Intl.DateTimeFormat object, containg the desired string format. It must have\n   *    timeZone set to 'utc' to work fine.\n   * @param date Date from which we want to get the string representation according to dtf\n   * @returns A Date object with its UTC representation based on the passed in date info\n   */\n  private _format(dtf: Intl.DateTimeFormat, date: Date) {\n    const d = new Date(Date.UTC(\n        date.getFullYear(), date.getMonth(), date.getDate(), date.getHours(),\n        date.getMinutes(), date.getSeconds(), date.getMilliseconds()));\n    return dtf.format(d);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {ElementRef, NgZone} from '@angular/core';\nimport {Platform, supportsPassiveEventListeners} from '@angular/cdk/platform';\nimport {isFakeMousedownFromScreenReader} from '@angular/cdk/a11y';\nimport {RippleRef, RippleState} from './ripple-ref';\n\nexport type RippleConfig = {\n  color?: string;\n  centered?: boolean;\n  radius?: number;\n  persistent?: boolean;\n  animation?: RippleAnimationConfig;\n  terminateOnPointerUp?: boolean;\n  /**\n   * @deprecated Use the `animation` property instead.\n   * @breaking-change 7.0.0\n   */\n  speedFactor?: number;\n};\n\n/**\n * Interface that describes the configuration for the animation of a ripple.\n * There are two animation phases with different durations for the ripples.\n */\nexport interface RippleAnimationConfig {\n  /** Duration in milliseconds for the enter animation (expansion from point of contact). */\n  enterDuration?: number;\n  /** Duration in milliseconds for the exit animation (fade-out). */\n  exitDuration?: number;\n}\n\n/**\n * Interface that describes the target for launching ripples.\n * It defines the ripple configuration and disabled state for interaction ripples.\n * @docs-private\n */\nexport interface RippleTarget {\n  /** Configuration for ripples that are launched on pointer down. */\n  rippleConfig: RippleConfig;\n  /** Whether ripples on pointer down should be disabled. */\n  rippleDisabled: boolean;\n}\n\n/**\n * Default ripple animation configuration for ripples without an explicit\n * animation config specified.\n */\nexport const defaultRippleAnimationConfig = {\n  enterDuration: 450,\n  exitDuration: 400\n};\n\n/**\n * Timeout for ignoring mouse events. Mouse events will be temporary ignored after touch\n * events to avoid synthetic mouse events.\n */\nconst ignoreMouseEventsTimeout = 800;\n\n/**\n * Helper service that performs DOM manipulations. Not intended to be used outside this module.\n * The constructor takes a reference to the ripple directive's host element and a map of DOM\n * event handlers to be installed on the element that triggers ripple animations.\n * This will eventually become a custom renderer once Angular support exists.\n * @docs-private\n */\nexport class RippleRenderer {\n  /** Element where the ripples are being added to. */\n  private _containerElement: HTMLElement;\n\n  /** Element which triggers the ripple elements on mouse events. */\n  private _triggerElement: HTMLElement | null;\n\n  /** Whether the pointer is currently down or not. */\n  private _isPointerDown = false;\n\n  /** Events to be registered on the trigger element. */\n  private _triggerEvents = new Map<string, any>();\n\n  /** Set of currently active ripple references. */\n  private _activeRipples = new Set<RippleRef>();\n\n  /** Latest non-persistent ripple that was triggered. */\n  private _mostRecentTransientRipple: RippleRef | null;\n\n  /** Time in milliseconds when the last touchstart event happened. */\n  private _lastTouchStartEvent: number;\n\n  /** Options that apply to all the event listeners that are bound by the renderer. */\n  private _eventOptions = supportsPassiveEventListeners() ? ({passive: true} as any) : false;\n\n  /**\n   * Cached dimensions of the ripple container. Set when the first\n   * ripple is shown and cleared once no more ripples are visible.\n   */\n  private _containerRect: ClientRect | null;\n\n  constructor(private _target: RippleTarget,\n              private _ngZone: NgZone,\n              elementRef: ElementRef,\n              platform: Platform) {\n\n    // Only do anything if we're on the browser.\n    if (platform.isBrowser) {\n      this._containerElement = elementRef.nativeElement;\n\n      // Specify events which need to be registered on the trigger.\n      this._triggerEvents.set('mousedown', this.onMousedown);\n      this._triggerEvents.set('mouseup', this.onPointerUp);\n      this._triggerEvents.set('mouseleave', this.onPointerUp);\n\n      this._triggerEvents.set('touchstart', this.onTouchStart);\n      this._triggerEvents.set('touchend', this.onPointerUp);\n    }\n  }\n\n  /**\n   * Fades in a ripple at the given coordinates.\n   * @param x Coordinate within the element, along the X axis at which to start the ripple.\n   * @param y Coordinate within the element, along the Y axis at which to start the ripple.\n   * @param config Extra ripple options.\n   */\n  fadeInRipple(x: number, y: number, config: RippleConfig = {}): RippleRef {\n    const containerRect = this._containerRect =\n                          this._containerRect || this._containerElement.getBoundingClientRect();\n    const animationConfig = {...defaultRippleAnimationConfig, ...config.animation};\n\n    if (config.centered) {\n      x = containerRect.left + containerRect.width / 2;\n      y = containerRect.top + containerRect.height / 2;\n    }\n\n    const radius = config.radius || distanceToFurthestCorner(x, y, containerRect);\n    const offsetX = x - containerRect.left;\n    const offsetY = y - containerRect.top;\n    const duration = animationConfig.enterDuration / (config.speedFactor || 1);\n\n    const ripple = document.createElement('div');\n    ripple.classList.add('mat-ripple-element');\n\n    ripple.style.left = `${offsetX - radius}px`;\n    ripple.style.top = `${offsetY - radius}px`;\n    ripple.style.height = `${radius * 2}px`;\n    ripple.style.width = `${radius * 2}px`;\n\n    // If the color is not set, the default CSS color will be used.\n    ripple.style.backgroundColor = config.color || null;\n    ripple.style.transitionDuration = `${duration}ms`;\n\n    this._containerElement.appendChild(ripple);\n\n    // By default the browser does not recalculate the styles of dynamically created\n    // ripple elements. This is critical because then the `scale` would not animate properly.\n    enforceStyleRecalculation(ripple);\n\n    ripple.style.transform = 'scale(1)';\n\n    // Exposed reference to the ripple that will be returned.\n    const rippleRef = new RippleRef(this, ripple, config);\n\n    rippleRef.state = RippleState.FADING_IN;\n\n    // Add the ripple reference to the list of all active ripples.\n    this._activeRipples.add(rippleRef);\n\n    if (!config.persistent) {\n      this._mostRecentTransientRipple = rippleRef;\n    }\n\n    // Wait for the ripple element to be completely faded in.\n    // Once it's faded in, the ripple can be hidden immediately if the mouse is released.\n    this.runTimeoutOutsideZone(() => {\n      const isMostRecentTransientRipple = rippleRef === this._mostRecentTransientRipple;\n\n      rippleRef.state = RippleState.VISIBLE;\n\n      // When the timer runs out while the user has kept their pointer down, we want to\n      // keep only the persistent ripples and the latest transient ripple. We do this,\n      // because we don't want stacked transient ripples to appear after their enter\n      // animation has finished.\n      if (!config.persistent && (!isMostRecentTransientRipple || !this._isPointerDown)) {\n        rippleRef.fadeOut();\n      }\n    }, duration);\n\n    return rippleRef;\n  }\n\n  /** Fades out a ripple reference. */\n  fadeOutRipple(rippleRef: RippleRef) {\n    const wasActive = this._activeRipples.delete(rippleRef);\n\n    if (rippleRef === this._mostRecentTransientRipple) {\n      this._mostRecentTransientRipple = null;\n    }\n\n    // Clear out the cached bounding rect if we have no more ripples.\n    if (!this._activeRipples.size) {\n      this._containerRect = null;\n    }\n\n    // For ripples that are not active anymore, don't re-un the fade-out animation.\n    if (!wasActive) {\n      return;\n    }\n\n    const rippleEl = rippleRef.element;\n    const animationConfig = {...defaultRippleAnimationConfig, ...rippleRef.config.animation};\n\n    rippleEl.style.transitionDuration = `${animationConfig.exitDuration}ms`;\n    rippleEl.style.opacity = '0';\n    rippleRef.state = RippleState.FADING_OUT;\n\n    // Once the ripple faded out, the ripple can be safely removed from the DOM.\n    this.runTimeoutOutsideZone(() => {\n      rippleRef.state = RippleState.HIDDEN;\n      rippleEl.parentNode!.removeChild(rippleEl);\n    }, animationConfig.exitDuration);\n  }\n\n  /** Fades out all currently active ripples. */\n  fadeOutAll() {\n    this._activeRipples.forEach(ripple => ripple.fadeOut());\n  }\n\n  /** Sets up the trigger event listeners */\n  setupTriggerEvents(element: HTMLElement) {\n    if (!element || element === this._triggerElement) {\n      return;\n    }\n\n    // Remove all previously registered event listeners from the trigger element.\n    this._removeTriggerEvents();\n\n    this._ngZone.runOutsideAngular(() => {\n      this._triggerEvents.forEach((fn, type) =>\n          element.addEventListener(type, fn, this._eventOptions));\n    });\n\n    this._triggerElement = element;\n  }\n\n  /** Function being called whenever the trigger is being pressed using mouse. */\n  private onMousedown = (event: MouseEvent) => {\n    // Screen readers will fire fake mouse events for space/enter. Skip launching a\n    // ripple in this case for consistency with the non-screen-reader experience.\n    const isFakeMousedown = isFakeMousedownFromScreenReader(event);\n    const isSyntheticEvent = this._lastTouchStartEvent &&\n        Date.now() < this._lastTouchStartEvent + ignoreMouseEventsTimeout;\n\n    if (!this._target.rippleDisabled && !isFakeMousedown && !isSyntheticEvent) {\n      this._isPointerDown = true;\n      this.fadeInRipple(event.clientX, event.clientY, this._target.rippleConfig);\n    }\n  }\n\n  /** Function being called whenever the trigger is being pressed using touch. */\n  private onTouchStart = (event: TouchEvent) => {\n    if (!this._target.rippleDisabled) {\n      // Some browsers fire mouse events after a `touchstart` event. Those synthetic mouse\n      // events will launch a second ripple if we don't ignore mouse events for a specific\n      // time after a touchstart event.\n      this._lastTouchStartEvent = Date.now();\n      this._isPointerDown = true;\n\n      // Use `changedTouches` so we skip any touches where the user put\n      // their finger down, but used another finger to tap the element again.\n      const touches = event.changedTouches;\n\n      for (let i = 0; i < touches.length; i++) {\n        this.fadeInRipple(touches[i].clientX, touches[i].clientY, this._target.rippleConfig);\n      }\n    }\n  }\n\n  /** Function being called whenever the trigger is being released. */\n  private onPointerUp = () => {\n    if (!this._isPointerDown) {\n      return;\n    }\n\n    this._isPointerDown = false;\n\n    // Fade-out all ripples that are visible and not persistent.\n    this._activeRipples.forEach(ripple => {\n      // By default, only ripples that are completely visible will fade out on pointer release.\n      // If the `terminateOnPointerUp` option is set, ripples that still fade in will also fade out.\n      const isVisible = ripple.state === RippleState.VISIBLE ||\n        ripple.config.terminateOnPointerUp && ripple.state === RippleState.FADING_IN;\n\n      if (!ripple.config.persistent && isVisible) {\n        ripple.fadeOut();\n      }\n    });\n  }\n\n  /** Runs a timeout outside of the Angular zone to avoid triggering the change detection. */\n  private runTimeoutOutsideZone(fn: Function, delay = 0) {\n    this._ngZone.runOutsideAngular(() => setTimeout(fn, delay));\n  }\n\n  /** Removes previously registered event listeners from the trigger element. */\n  _removeTriggerEvents() {\n    if (this._triggerElement) {\n      this._triggerEvents.forEach((fn, type) => {\n        this._triggerElement!.removeEventListener(type, fn, this._eventOptions);\n      });\n    }\n  }\n}\n\n/** Enforces a style recalculation of a DOM element by computing its styles. */\nfunction enforceStyleRecalculation(element: HTMLElement) {\n  // Enforce a style recalculation by calling `getComputedStyle` and accessing any property.\n  // Calling `getPropertyValue` is important to let optimizers know that this is not a noop.\n  // See: https://gist.github.com/paulirish/5d52fb081b3570c81e3a\n  window.getComputedStyle(element).getPropertyValue('opacity');\n}\n\n/**\n * Returns the distance from the point (x, y) to the furthest corner of a rectangle.\n */\nfunction distanceToFurthestCorner(x: number, y: number, rect: ClientRect) {\n  const distX = Math.max(Math.abs(x - rect.left), Math.abs(x - rect.right));\n  const distY = Math.max(Math.abs(y - rect.top), Math.abs(y - rect.bottom));\n  return Math.sqrt(distX * distX + distY * distY);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** @docs-private */\nexport function getMatFormFieldPlaceholderConflictError(): Error {\n  return Error('Placeholder attribute and child element were both specified.');\n}\n\n/** @docs-private */\nexport function getMatFormFieldDuplicatedHintError(align: string): Error {\n  return Error(`A hint was already declared for 'align=\"${align}\"'.`);\n}\n\n/** @docs-private */\nexport function getMatFormFieldMissingControlError(): Error {\n  return Error('mat-form-field must contain a MatFormFieldControl.');\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** @docs-private */\nexport function getMatInputUnsupportedTypeError(type: string): Error {\n  return Error(`Input type \"${type}\" isn't supported by matInput.`);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** @docs-private */\nexport function createMissingDateImplError(provider: string) {\n  return Error(\n      `MatDatepicker: No provider found for ${provider}. You must import one of the following ` +\n      `modules at your application root: MatNativeDateModule, MatMomentDateModule, or provide a ` +\n      `custom implementation.`);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Throws an exception for the case when menu trigger doesn't have a valid mat-menu instance\n * @docs-private\n */\nexport function throwMatMenuMissingError() {\n  throw Error(`matMenuTriggerFor: must pass in an mat-menu instance.\n\n    Example:\n      <mat-menu #menu=\"matMenu\"></mat-menu>\n      <button [matMenuTriggerFor]=\"menu\"></button>`);\n}\n\n/**\n * Throws an exception for the case when menu's x-position value isn't valid.\n * In other words, it doesn't match 'before' or 'after'.\n * @docs-private\n */\nexport function throwMatMenuInvalidPositionX() {\n  throw Error(`xPosition value must be either 'before' or after'.\n      Example: <mat-menu xPosition=\"before\" #menu=\"matMenu\"></mat-menu>`);\n}\n\n/**\n * Throws an exception for the case when menu's y-position value isn't valid.\n * In other words, it doesn't match 'above' or 'below'.\n * @docs-private\n */\nexport function throwMatMenuInvalidPositionY() {\n  throw Error(`yPosition value must be either 'above' or below'.\n      Example: <mat-menu yPosition=\"above\" #menu=\"matMenu\"></mat-menu>`);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Returns an exception to be thrown when attempting to change a select's `multiple` option\n * after initialization.\n * @docs-private\n */\nexport function getMatSelectDynamicMultipleError(): Error {\n  return Error('Cannot change `multiple` mode of select after initialization.');\n}\n\n/**\n * Returns an exception to be thrown when attempting to assign a non-array value to a select\n * in `multiple` mode. Note that `undefined` and `null` are still valid values to allow for\n * resetting the value.\n * @docs-private\n */\nexport function getMatSelectNonArrayValueError(): Error {\n  return Error('Value must be an array in multiple-selection mode.');\n}\n\n/**\n * Returns an exception to be thrown when assigning a non-function value to the comparator\n * used to determine if a value corresponds to an option. Note that whether the function\n * actually takes two values and returns a boolean is not checked.\n */\nexport function getMatSelectNonFunctionValueError(): Error {\n  return Error('`compareWith` must be a function.');\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** @docs-private */\nexport function getSortDuplicateSortableIdError(id: string): Error {\n  return Error(`Cannot have two MatSortables with the same id (${id}).`);\n}\n\n/** @docs-private */\nexport function getSortHeaderNotContainedWithinSortError(): Error {\n  return Error(`MatSortHeader must be placed within a parent element with the MatSort directive.`);\n}\n\n/** @docs-private */\nexport function getSortHeaderMissingIdError(): Error {\n  return Error(`MatSortHeader must be provided with a unique id.`);\n}\n\n/** @docs-private */\nexport function getSortInvalidDirectionError(direction: string): Error {\n  return Error(`${direction} is not a valid sort direction ('asc' or 'desc').`);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** @docs-private */\nexport class AnimationCurves {\n  static STANDARD_CURVE = 'cubic-bezier(0.4,0.0,0.2,1)';\n  static DECELERATION_CURVE = 'cubic-bezier(0.0,0.0,0.2,1)';\n  static ACCELERATION_CURVE = 'cubic-bezier(0.4,0.0,1,1)';\n  static SHARP_CURVE = 'cubic-bezier(0.4,0.0,0.6,1)';\n}\n\n\n/** @docs-private */\nexport class AnimationDurations {\n  static COMPLEX = '375ms';\n  static ENTERING = '225ms';\n  static EXITING = '195ms';\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {InjectionToken} from '@angular/core';\n\n\nexport type MatDateFormats = {\n  parse: {\n    dateInput: any\n  },\n  display: {\n    dateInput: any,\n    monthYearLabel: any,\n    dateA11yLabel: any,\n    monthYearA11yLabel: any,\n  }\n};\n\n\nexport const MAT_DATE_FORMATS = new InjectionToken<MatDateFormats>('mat-date-formats');\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {MatDateFormats} from './date-formats';\n\n\nexport const MAT_NATIVE_DATE_FORMATS: MatDateFormats = {\n  parse: {\n    dateInput: null,\n  },\n  display: {\n    dateInput: {year: 'numeric', month: 'numeric', day: 'numeric'},\n    monthYearLabel: {year: 'numeric', month: 'short'},\n    dateA11yLabel: {year: 'numeric', month: 'long', day: 'numeric'},\n    monthYearA11yLabel: {year: 'numeric', month: 'long'},\n  }\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {PlatformModule} from '@angular/cdk/platform';\nimport {NgModule} from '@angular/core';\nimport {DateAdapter} from './date-adapter';\nimport {MAT_DATE_FORMATS} from './date-formats';\nimport {NativeDateAdapter} from './native-date-adapter';\nimport {MAT_NATIVE_DATE_FORMATS} from './native-date-formats';\n\nexport * from './date-adapter';\nexport * from './date-formats';\nexport * from './native-date-adapter';\nexport * from './native-date-formats';\n\n\n@NgModule({\n  imports: [PlatformModule],\n  providers: [\n    {provide: DateAdapter, useClass: NativeDateAdapter},\n  ],\n})\nexport class NativeDateModule {}\n\n\n@NgModule({\n  imports: [NativeDateModule],\n  providers: [{provide: MAT_DATE_FORMATS, useValue: MAT_NATIVE_DATE_FORMATS}],\n})\nexport class MatNativeDateModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable} from '@angular/core';\nimport {FormGroupDirective, NgForm, FormControl} from '@angular/forms';\n\n/** Error state matcher that matches when a control is invalid and dirty. */\n@Injectable()\nexport class ShowOnDirtyErrorStateMatcher implements ErrorStateMatcher {\n  isErrorState(control: FormControl | null, form: FormGroupDirective | NgForm | null): boolean {\n    return !!(control && control.invalid && (control.dirty || (form && form.submitted)));\n  }\n}\n\n/** Provider that defines how form controls behave with regards to displaying error messages. */\n@Injectable({providedIn: 'root'})\nexport class ErrorStateMatcher {\n  isErrorState(control: FormControl | null, form: FormGroupDirective | NgForm | null): boolean {\n    return !!(control && control.invalid && (control.touched || (form && form.submitted)));\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable, InjectionToken, Inject, Optional} from '@angular/core';\nimport {HammerGestureConfig} from '@angular/platform-browser';\nimport {MatCommonModule} from '../common-behaviors/common-module';\nimport {\n  HammerStatic,\n  HammerInstance,\n  Recognizer,\n  RecognizerStatic,\n  HammerOptions,\n} from './gesture-annotations';\n\n/**\n * Injection token that can be used to provide options to the Hammerjs instance.\n * More info at http://hammerjs.github.io/api/.\n */\nexport const MAT_HAMMER_OPTIONS = new InjectionToken<HammerOptions>('MAT_HAMMER_OPTIONS');\n\nconst ANGULAR_MATERIAL_SUPPORTED_HAMMER_GESTURES = [\n  'longpress',\n  'slide',\n  'slidestart',\n  'slideend',\n  'slideright',\n  'slideleft'\n];\n\n/**\n * Fake HammerInstance that is used when a Hammer instance is requested when HammerJS has not\n * been loaded on the page.\n */\nconst noopHammerInstance: HammerInstance = {\n  on: () => {},\n  off: () => {},\n};\n\n/** Adjusts configuration of our gesture library, Hammer. */\n@Injectable()\nexport class GestureConfig extends HammerGestureConfig {\n  /** List of new event names to add to the gesture support list */\n  events = ANGULAR_MATERIAL_SUPPORTED_HAMMER_GESTURES;\n\n  constructor(\n    @Optional() @Inject(MAT_HAMMER_OPTIONS) private _hammerOptions?: HammerOptions,\n    @Optional() commonModule?: MatCommonModule) {\n    super();\n    if (commonModule) {\n      commonModule._checkHammerIsAvailable();\n    }\n  }\n\n  /**\n   * Builds Hammer instance manually to add custom recognizers that match the Material Design spec.\n   *\n   * Our gesture names come from the Material Design gestures spec:\n   * https://material.io/design/#gestures-touch-mechanics\n   *\n   * More information on default recognizers can be found in Hammer docs:\n   * http://hammerjs.github.io/recognizer-pan/\n   * http://hammerjs.github.io/recognizer-press/\n   *\n   * @param element Element to which to assign the new HammerJS gestures.\n   * @returns Newly-created HammerJS instance.\n   */\n  buildHammer(element: HTMLElement): HammerInstance {\n    const hammer: HammerStatic = typeof window !== 'undefined' ? (window as any).Hammer : null;\n\n    if (!hammer) {\n      // If HammerJS is not loaded here, return the noop HammerInstance. This is necessary to\n      // ensure that omitting HammerJS completely will not cause any errors while *also* supporting\n      // the lazy-loading of HammerJS via the HAMMER_LOADER token introduced in Angular 6.1.\n      // Because we can't depend on HAMMER_LOADER's existance until 7.0, we have to always set\n      // `this.events` to the set we support, instead of conditionally setting it to `[]` if\n      // `HAMMER_LOADER` is present (and then throwing an Error here if `window.Hammer` is\n      // undefined).\n      // @breaking-change 7.0.0\n      return noopHammerInstance;\n    }\n\n    const mc = new hammer(element, this._hammerOptions || undefined);\n\n    // Default Hammer Recognizers.\n    const pan = new hammer.Pan();\n    const swipe = new hammer.Swipe();\n    const press = new hammer.Press();\n\n    // Notice that a HammerJS recognizer can only depend on one other recognizer once.\n    // Otherwise the previous `recognizeWith` will be dropped.\n    // TODO: Confirm threshold numbers with Material Design UX Team\n    const slide = this._createRecognizer(pan, {event: 'slide', threshold: 0}, swipe);\n    const longpress = this._createRecognizer(press, {event: 'longpress', time: 500});\n\n    // Overwrite the default `pan` event to use the swipe event.\n    pan.recognizeWith(swipe);\n\n    // Add customized gestures to Hammer manager\n    mc.add([swipe, press, pan, slide, longpress]);\n\n    return mc as HammerInstance;\n  }\n\n  /** Creates a new recognizer, without affecting the default recognizers of HammerJS */\n  private _createRecognizer(base: Recognizer, options: any, ...inheritances: Recognizer[]) {\n    let recognizer = new (base.constructor as RecognizerStatic)(options);\n\n    inheritances.push(base);\n    inheritances.forEach(item => recognizer.recognizeWith(item));\n\n    return recognizer;\n  }\n\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  NgModule,\n  Directive,\n  ElementRef,\n  QueryList,\n} from '@angular/core';\nimport {MatCommonModule} from '../common-behaviors/common-module';\n\n\n/**\n * Shared directive to count lines inside a text area, such as a list item.\n * Line elements can be extracted with a @ContentChildren(MatLine) query, then\n * counted by checking the query list's length.\n */\n@Directive({\n  selector: '[mat-line], [matLine]',\n  host: {'class': 'mat-line'}\n})\nexport class MatLine {}\n\n/**\n * Helper that takes a query list of lines and sets the correct class on the host.\n * @docs-private\n */\nexport class MatLineSetter {\n  constructor(private _lines: QueryList<MatLine>, private _element: ElementRef) {\n    this._setLineClass(this._lines.length);\n\n    this._lines.changes.subscribe(() => {\n      this._setLineClass(this._lines.length);\n    });\n  }\n\n  private _setLineClass(count: number): void {\n    this._resetClasses();\n    if (count === 2 || count === 3) {\n      this._setClass(`mat-${count}-line`, true);\n    } else if (count > 3) {\n      this._setClass(`mat-multi-line`, true);\n    }\n  }\n\n  private _resetClasses(): void {\n    this._setClass('mat-2-line', false);\n    this._setClass('mat-3-line', false);\n    this._setClass('mat-multi-line', false);\n  }\n\n  private _setClass(className: string, isAdd: boolean): void {\n    if (isAdd) {\n      this._element.nativeElement.classList.add(className);\n    } else {\n      this._element.nativeElement.classList.remove(className);\n    }\n  }\n\n}\n\n@NgModule({\n  imports: [MatCommonModule],\n  exports: [MatLine, MatCommonModule],\n  declarations: [MatLine],\n})\nexport class MatLineModule { }\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {RippleConfig, RippleRenderer} from './ripple-renderer';\n\n/** Possible states for a ripple element. */\nexport enum RippleState {\n  FADING_IN, VISIBLE, FADING_OUT, HIDDEN\n}\n\n/**\n * Reference to a previously launched ripple element.\n */\nexport class RippleRef {\n\n  /** Current state of the ripple. */\n  state: RippleState = RippleState.HIDDEN;\n\n  constructor(\n    private _renderer: RippleRenderer,\n    /** Reference to the ripple HTML element. */\n    public element: HTMLElement,\n    /** Ripple configuration used for the ripple. */\n    public config: RippleConfig) {\n  }\n\n  /** Fades out the ripple element. */\n  fadeOut() {\n    this._renderer.fadeOutRipple(this);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Platform} from '@angular/cdk/platform';\nimport {\n  Directive,\n  ElementRef,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  OnDestroy,\n  OnInit,\n  Optional,\n} from '@angular/core';\nimport {RippleRef} from './ripple-ref';\nimport {RippleAnimationConfig, RippleConfig, RippleRenderer, RippleTarget} from './ripple-renderer';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\n\n/** Configurable options for `matRipple`. */\nexport interface RippleGlobalOptions {\n  /**\n   * Whether ripples should be disabled. Ripples can be still launched manually by using\n   * the `launch()` method. Therefore focus indicators will still show up.\n   */\n  disabled?: boolean;\n\n  /**\n   * Configuration for the animation duration of the ripples. There are two phases with different\n   * durations for the ripples. The animation durations will be overwritten if the\n   * `NoopAnimationsModule` is being used.\n   */\n  animation?: RippleAnimationConfig;\n\n  /**\n   * If set, the default duration of the fade-in animation is divided by this value. For example,\n   * setting it to 0.5 will cause the ripple fade-in animation to take twice as long.\n   * A changed speedFactor will not affect the fade-out duration of the ripples.\n   * @deprecated Use the `animation` global option instead.\n   * @breaking-change 7.0.0\n   */\n  baseSpeedFactor?: number;\n\n  /**\n   * Whether ripples should start fading out immediately after the mouse our touch is released. By\n   * default, ripples will wait for the enter animation to complete and for mouse or touch release.\n   */\n  terminateOnPointerUp?: boolean;\n}\n\n/** Injection token that can be used to specify the global ripple options. */\nexport const MAT_RIPPLE_GLOBAL_OPTIONS =\n    new InjectionToken<RippleGlobalOptions>('mat-ripple-global-options');\n\n@Directive({\n  selector: '[mat-ripple], [matRipple]',\n  exportAs: 'matRipple',\n  host: {\n    'class': 'mat-ripple',\n    '[class.mat-ripple-unbounded]': 'unbounded'\n  }\n})\nexport class MatRipple implements OnInit, OnDestroy, RippleTarget {\n\n  /** Custom color for all ripples. */\n  @Input('matRippleColor') color: string;\n\n  /** Whether the ripples should be visible outside the component's bounds. */\n  @Input('matRippleUnbounded') unbounded: boolean;\n\n  /**\n   * Whether the ripple always originates from the center of the host element's bounds, rather\n   * than originating from the location of the click event.\n   */\n  @Input('matRippleCentered') centered: boolean;\n\n  /**\n   * If set, the radius in pixels of foreground ripples when fully expanded. If unset, the radius\n   * will be the distance from the center of the ripple to the furthest corner of the host element's\n   * bounding rectangle.\n   */\n  @Input('matRippleRadius') radius: number = 0;\n\n  /**\n   * If set, the normal duration of ripple animations is divided by this value. For example,\n   * setting it to 0.5 will cause the animations to take twice as long.\n   * A changed speedFactor will not modify the fade-out duration of the ripples.\n   * @deprecated Use the [matRippleAnimation] binding instead.\n   * @breaking-change 7.0.0\n   */\n  @Input('matRippleSpeedFactor') speedFactor: number = 1;\n\n  /**\n   * Configuration for the ripple animation. Allows modifying the enter and exit animation\n   * duration of the ripples. The animation durations will be overwritten if the\n   * `NoopAnimationsModule` is being used.\n   */\n  @Input('matRippleAnimation') animation: RippleAnimationConfig;\n\n  /**\n   * Whether click events will not trigger the ripple. Ripples can be still launched manually\n   * by using the `launch()` method.\n   */\n  @Input('matRippleDisabled')\n  get disabled() { return this._disabled; }\n  set disabled(value: boolean) {\n    this._disabled = value;\n    this._setupTriggerEventsIfEnabled();\n  }\n  private _disabled: boolean = false;\n\n  /**\n   * The element that triggers the ripple when click events are received.\n   * Defaults to the directive's host element.\n   */\n  @Input('matRippleTrigger')\n  get trigger() { return this._trigger || this._elementRef.nativeElement; }\n  set trigger(trigger: HTMLElement) {\n    this._trigger = trigger;\n    this._setupTriggerEventsIfEnabled();\n  }\n  private _trigger: HTMLElement;\n\n  /** Renderer for the ripple DOM manipulations. */\n  private _rippleRenderer: RippleRenderer;\n\n  /** Options that are set globally for all ripples. */\n  private _globalOptions: RippleGlobalOptions;\n\n  /** Whether ripple directive is initialized and the input bindings are set. */\n  private _isInitialized: boolean = false;\n\n  constructor(private _elementRef: ElementRef,\n              ngZone: NgZone,\n              platform: Platform,\n              @Optional() @Inject(MAT_RIPPLE_GLOBAL_OPTIONS) globalOptions: RippleGlobalOptions,\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) animationMode?: string) {\n\n    this._globalOptions = globalOptions || {};\n    this._rippleRenderer = new RippleRenderer(this, ngZone, _elementRef, platform);\n\n    if (animationMode === 'NoopAnimations') {\n      this._globalOptions.animation = {enterDuration: 0, exitDuration: 0};\n    }\n  }\n\n  ngOnInit() {\n    this._isInitialized = true;\n    this._setupTriggerEventsIfEnabled();\n  }\n\n  ngOnDestroy() {\n    this._rippleRenderer._removeTriggerEvents();\n  }\n\n  /** Fades out all currently showing ripple elements. */\n  fadeOutAll() {\n    this._rippleRenderer.fadeOutAll();\n  }\n\n  /**\n   * Ripple configuration from the directive's input values.\n   * @docs-private Implemented as part of RippleTarget\n   */\n  get rippleConfig(): RippleConfig {\n    return {\n      centered: this.centered,\n      radius: this.radius,\n      color: this.color,\n      animation: {...this._globalOptions.animation, ...this.animation},\n      terminateOnPointerUp: this._globalOptions.terminateOnPointerUp,\n      speedFactor: this.speedFactor * (this._globalOptions.baseSpeedFactor || 1),\n    };\n  }\n\n  /**\n   * Whether ripples on pointer-down are disabled or not.\n   * @docs-private Implemented as part of RippleTarget\n   */\n  get rippleDisabled(): boolean {\n    return this.disabled || !!this._globalOptions.disabled;\n  }\n\n  /** Sets up the the trigger event listeners if ripples are enabled. */\n  private _setupTriggerEventsIfEnabled() {\n    if (!this.disabled && this._isInitialized) {\n      this._rippleRenderer.setupTriggerEvents(this.trigger);\n    }\n  }\n\n  /**\n   * Launches a manual ripple using the specified ripple configuration.\n   * @param config Configuration for the manual ripple.\n   */\n  launch(config: RippleConfig): RippleRef;\n\n  /**\n   * Launches a manual ripple at the specified coordinates within the element.\n   * @param x Coordinate within the element, along the X axis at which to fade-in the ripple.\n   * @param y Coordinate within the element, along the Y axis at which to fade-in the ripple.\n   * @param config Optional ripple configuration for the manual ripple.\n   */\n  launch(x: number, y: number, config?: RippleConfig): RippleRef;\n\n  /** Launches a manual ripple at the specified coordinated or just by the ripple config. */\n  launch(configOrX: number | RippleConfig, y: number = 0, config?: RippleConfig): RippleRef {\n    if (typeof configOrX === 'number') {\n      return this._rippleRenderer.fadeInRipple(configOrX, y, {...this.rippleConfig, ...config});\n    } else {\n      return this._rippleRenderer.fadeInRipple(0, 0, {...this.rippleConfig, ...configOrX});\n    }\n  }\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {PlatformModule} from '@angular/cdk/platform';\nimport {MatCommonModule} from '../common-behaviors/common-module';\nimport {MatRipple} from './ripple';\n\nexport * from './ripple';\nexport * from './ripple-ref';\nexport * from './ripple-renderer';\n\n@NgModule({\n  imports: [MatCommonModule, PlatformModule],\n  exports: [MatRipple, MatCommonModule],\n  declarations: [MatRipple],\n})\nexport class MatRippleModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ViewEncapsulation,\n  Input,\n  ChangeDetectionStrategy,\n  Inject,\n  Optional,\n} from '@angular/core';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\n\n/**\n * Possible states for a pseudo checkbox.\n * @docs-private\n */\nexport type MatPseudoCheckboxState = 'unchecked' | 'checked' | 'indeterminate';\n\n/**\n * Component that shows a simplified checkbox without including any kind of \"real\" checkbox.\n * Meant to be used when the checkbox is purely decorative and a large number of them will be\n * included, such as for the options in a multi-select. Uses no SVGs or complex animations.\n * Note that theming is meant to be handled by the parent element, e.g.\n * `mat-primary .mat-pseudo-checkbox`.\n *\n * Note that this component will be completely invisible to screen-reader users. This is *not*\n * interchangeable with `<mat-checkbox>` and should *not* be used if the user would directly\n * interact with the checkbox. The pseudo-checkbox should only be used as an implementation detail\n * of more complex components that appropriately handle selected / checked state.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  selector: 'mat-pseudo-checkbox',\n  styleUrls: ['pseudo-checkbox.css'],\n  template: '',\n  host: {\n    'class': 'mat-pseudo-checkbox',\n    '[class.mat-pseudo-checkbox-indeterminate]': 'state === \"indeterminate\"',\n    '[class.mat-pseudo-checkbox-checked]': 'state === \"checked\"',\n    '[class.mat-pseudo-checkbox-disabled]': 'disabled',\n    '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"',\n  },\n})\nexport class MatPseudoCheckbox {\n  /** Display state of the checkbox. */\n  @Input() state: MatPseudoCheckboxState = 'unchecked';\n\n  /** Whether the checkbox is disabled. */\n  @Input() disabled: boolean = false;\n\n  constructor(@Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode?: string) { }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatPseudoCheckbox} from './pseudo-checkbox/pseudo-checkbox';\n\n\n@NgModule({\n  exports: [MatPseudoCheckbox],\n  declarations: [MatPseudoCheckbox]\n})\nexport class MatPseudoCheckboxModule { }\n\n\nexport * from './pseudo-checkbox/pseudo-checkbox';\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Component, ViewEncapsulation, Input, ChangeDetectionStrategy} from '@angular/core';\nimport {mixinDisabled, CanDisable} from '../common-behaviors/disabled';\n\n// Boilerplate for applying mixins to MatOptgroup.\n/** @docs-private */\nexport class MatOptgroupBase { }\nexport const _MatOptgroupMixinBase = mixinDisabled(MatOptgroupBase);\n\n// Counter for unique group ids.\nlet _uniqueOptgroupIdCounter = 0;\n\n/**\n * Component that is used to group instances of `mat-option`.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-optgroup',\n  exportAs: 'matOptgroup',\n  templateUrl: 'optgroup.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  inputs: ['disabled'],\n  styleUrls: ['optgroup.css'],\n  host: {\n    'class': 'mat-optgroup',\n    'role': 'group',\n    '[class.mat-optgroup-disabled]': 'disabled',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.aria-labelledby]': '_labelId',\n  }\n})\nexport class MatOptgroup extends _MatOptgroupMixinBase implements CanDisable {\n  /** Label for the option group. */\n  @Input() label: string;\n\n  /** Unique id for the underlying label. */\n  _labelId: string = `mat-optgroup-label-${_uniqueOptgroupIdCounter++}`;\n}\n"],"names":["type","undefined","decorators","Inject","args","DOCUMENT","MatToolbar","propDecorators","NgModule","imports","MatCommonModule","exports","MatToolbarRow","declarations","MatToolbarModule","MatTreeNodeOutlet","viewContainer","this","Directive","selector","ViewContainerRef","_CdkTreeNodeDef","CdkTreeNodeDef","_MatTreeNodeMixinBase","mixinTabIndex","mixinDisabled","CdkTreeNode","_MatNestedTreeNodeMixinBase","CdkNestedTreeNode","MatTreeNode","_elementRef","_tree","tabIndex","_this","_super","call","role","Number","tslib_1.__extends","exportAs","inputs","host","[attr.aria-expanded]","[attr.aria-level]","[attr.role]","class","providers","provide","useExisting","ElementRef","CdkTree","String","Attribute","Input","MatTreeNodeDef","data","MatNestedTreeNode","_differs","prototype","ngAfterContentInit","ngOnDestroy","IterableDiffers","node","nodeOutlet","ContentChildren","_CdkTreeNodePadding","CdkTreeNodePadding","MatTreeNodePadding","level","indent","_CdkTree","MatTree","Component","template","styles","encapsulation","ViewEncapsulation","None","changeDetection","ChangeDetectionStrategy","OnPush","_CdkTreeNodeToggle","CdkTreeNodeToggle","recursive","MatTreeNodeToggle","(click)","MAT_TREE_DIRECTIVES","CdkTreeModule","CommonModule","MatTreeModule","MatTreeFlattener","transformFunction","getLevel","isExpandable","getChildren","_flattenNode","resultNodes","parentMap","flatNode","push","childrenNodes","Array","isArray","_flattenChildren","pipe","take","subscribe","children","forEach","child","index","childParentMap","slice","length","flattenNodes","structuredData","expandFlattenedNodes","nodes","treeControl","results","currentExpand","expand","i","isExpanded","MatTreeFlatDataSource","treeFlattener","initialData","_flattenedData","BehaviorSubject","_expandedData","_data","Object","defineProperty","value","next","dataNodes","connect","collectionViewer","changes","viewChange","expansionModel","merge","apply","map","disconnect","DataSource","MatTreeNestedDataSource","VERSION","Version","SELECT_PANEL_PADDING_X","NgZone","_MAT_INK_BAR_POSITIONER","MatInkBar","_CdkPortal","CdkPortal","MatTabLabel","MatTabContent","TemplateRef","MatTabBase","_MatTabMixinBase","MatTab","_viewContainerRef","textLabel","_contentPortal","_stateChanges","Subject","position","origin","isActive","ngOnChanges","hasOwnProperty","complete","ngOnInit","TemplatePortal","_explicitContent","_implicitContent","ViewChild","ariaLabel","ariaLabelledby","matTabsAnimations","translateTab","trigger","state","style","transform","minHeight","transition","animate","MatTabBodyPortal","componentFactoryResolver","viewContainerRef","_host","_centeringSub","Subscription","EMPTY","_leavingSub","_beforeCentering","startWith","_isCenterPosition","_position","isCentering","hasAttached","attach","_content","_afterLeavingCenter","detach","unsubscribe","ComponentFactoryResolver","MatTabBody","forwardRef","CdkPortalOutlet","_dir","changeDetectorRef","_dirChangeSubscription","_onCentering","EventEmitter","_onCentered","change","dir","_computePositionAnimationState","markForCheck","_positionIndex","_computePositionFromOrigin","_onTranslateTabStarted","e","toState","emit","nativeElement","clientHeight","_onTranslateTabComplete","fromState","_getLayoutDirection","animations","ChangeDetectorRef","Output","_portalHost","PortalHostDirective","MatTabLabelWrapperBase","_MatTabLabelWrapperMixinBase","MatTabLabelWrapper","elementRef","focus","getOffsetLeft","offsetLeft","getOffsetWidth","offsetWidth","[class.mat-tab-disabled]","[attr.aria-disabled]","MatTabHeaderBase","_MatTabHeaderMixinBase","mixinDisableRipple","MatTabHeader","_changeDetectorRef","_viewportRuler","_scrollDistance","_selectedIndexChanged","_destroyed","_showPaginationControls","_disableScrollAfter","_disableScrollBefore","_selectedIndex","selectFocusedIndex","indexFocused","coerceNumberProperty","_keyManager","updateActiveItemIndex","ngAfterContentChecked","_tabLabelCount","_labelWrappers","_updatePagination","_scrollToLabel","_checkScrollingControls","_alignInkBarToSelectedTab","_scrollDistanceChanged","_updateTabScrollPosition","_handleKeydown","event","keyCode","HOME","setFirstItemActive","preventDefault","END","setLastItemActive","ENTER","SPACE","focusIndex","onKeydown","dirChange","observableOf","resize","realign","FocusKeyManager","withHorizontalOrientation","withWrap","updateActiveItem","requestAnimationFrame","takeUntil","newFocusIndex","_setTabFocus","_onContentChanges","_checkPaginationEnabled","_isValidIndex","setActiveItem","tab","toArray","disabled","containerEl","_tabListContainer","scrollLeft","scrollWidth","scrollDistance","translateX","_tabList","v","Math","max","min","_getMaxScrollDistance","_scrollHeader","scrollDir","viewLength","labelIndex","selectedLabel","labelBeforePos","labelAfterPos","beforeVisiblePos","afterVisiblePos","isEnabled","selectedLabelWrapper","selectedIndex","_inkBar","alignToElement","[class.mat-tab-header-pagination-controls-enabled]","[class.mat-tab-header-rtl]","ViewportRuler","Directionality","Optional","nextId","MatTabChangeEvent","MatTabGroupBase","_MatTabGroupMixinBase","mixinColor","MatTabGroup","_indexToSelect","_tabBodyWrapperHeight","_tabsSubscription","_tabLabelSubscription","_dynamicHeight","headerPosition","selectedIndexChange","focusChange","animationDone","selectedTabChange","_groupId","coerceBooleanProperty","_backgroundColor","classList","remove","backgroundColor","add","indexToSelect","_clampTabIndex","isFirstRun_1","_createChangeEvent","Promise","resolve","then","_tabs","_subscribeToTabLabels","tabs","realignInkBar","_tabHeader","_focusChanged","_getTabLabelId","_getTabContentId","_setTabBodyWrapperHeight","tabHeight","wrapper","_tabBodyWrapper","height","offsetHeight","_removeTabBodyWrapperHeight","_handleClick","tabHeader","idx","_getTabIndex","[class.mat-tab-group-dynamic-height]","[class.mat-tab-group-inverted-header]","dynamicHeight","MatTabNavBase","_MatTabNavMixinBase","MatTabNav","_ngZone","_onDestroy","updateActiveLink","element","_activeLinkChanged","runOutsideAngular","_alignInkBar","activeTab","_tabLinks","find","active","_activeLinkElement","show","hide","MatTabLinkBase","_MatTabLinkMixinBase","_tabNavBar","_focusMonitor","_tabLinkRipple","setupTriggerEvents","parseInt","globalOptions","_ripplesGloballyDisabled","terminateOnPointerUp","speedFactor","baseSpeedFactor","animation","monitor","get","_isActive","enumerable","configurable","stopMonitoring","MatTabLink","[attr.aria-current]","[attr.tabIndex]","[class.mat-tab-label-active]","Platform","MAT_RIPPLE_GLOBAL_OPTIONS","FocusMonitor","PortalModule","MatRippleModule","ObserversModule","A11yModule","MatTabsModule","MatToolbarBase","_MatToolbarMixinBase","_platform","document","_document","ngAfterViewInit","isDevMode","isBrowser","_checkToolbarMixedModes","_toolbarRows","childNodes","filter","contains","nodeType","COMMENT_NODE","some","textContent","trim","throwToolbarMixedModesError","[class.mat-toolbar-multiple-rows]","[class.mat-toolbar-single-row]","allowChildren","query","animateChild","optional","sortButtonLabel","id","Injectable","providedIn","MatSortHeaderIntl","MAT_SORT_HEADER_INTL_PROVIDER","deps","SkipSelf","useFactory","MAT_SORT_HEADER_INTL_PROVIDER_FACTORY","MatSortHeaderBase","_MatSortHeaderMixinBase","MatSortHeader","_intl","_sort","_cdkColumnDef","_showIndicatorHint","_arrowDirection","_disableViewStateAnimation","arrowPosition","getSortHeaderNotContainedWithinSortError","_rerenderSubscription","sortChange","_isSorted","_updateArrowDirection","_viewState","_setAnimationTransitionState","_disableClear","name","register","deregister","_setIndicatorHintVisible","visible","_isDisabled","viewState","sort","direction","_getArrowDirectionState","_getArrowViewState","start","_getAriaSortAttribute","(mouseenter)","(longpress)","(mouseleave)","[attr.aria-sort]","[class.mat-sort-header-disabled]","matSortAnimations","indicator","leftPointer","rightPointer","arrowOpacity","MatSort","CdkColumnDef","disableClear","MatSortModule","_CdkStepLabel","CdkStepLabel","MatStepLabel","optionalLabel","MatStepperIntl","MatStepHeader","_element","_intlSubscription","_stringLabel","label","_templateLabel","_getHostElement","_getIconContext","iconOverrides","selected","matStepperAnimations","horizontalStepTransition","visibility","verticalStepTransition","MatStepperIcon","templateRef","_CdkStepper","CdkStepper","MatStep","stepper","_errorStateMatcher","isErrorState","control","form","originalErrorState","customErrorState","invalid","interacted","ErrorStateMatcher","MatStepper","arguments","icons","_icons","override","icon","_iconOverrides","_steps","_stateChanged","MatHorizontalStepper","aria-orientation","MatVerticalStepper","ctorParameters","_CdkStepperNext","CdkStepperNext","_CdkStepperPrevious","CdkStepperPrevious","MatStepperNext","[type]","MatStepperPrevious","MatButtonModule","CdkStepperModule","MatIconModule","MatStepperModule","_CdkTable","CdkTable","stickyCssClass","MatTable","CDK_TABLE_TEMPLATE","_CdkCellDef","CdkCellDef","_CdkHeaderCellDef","CdkHeaderCellDef","_CdkFooterCellDef","CdkFooterCellDef","MatCellDef","MatHeaderCellDef","MatFooterCellDef","MatColumnDef","sticky","stickyEnd","MatHeaderCell","columnDef","cssClassFriendlyName","CdkHeaderCell","MatFooterCell","CdkFooterCell","MatCell","CdkCell","_CdkHeaderRowDef","CdkHeaderRowDef","_CdkFooterRowDef","CdkFooterRowDef","_CdkRowDef","CdkRowDef","MatHeaderRowDef","MatFooterRowDef","MatRowDef","MatHeaderRow","CDK_ROW_TEMPLATE","CdkHeaderRow","CdkFooterRow","MatFooterRow","MatRow","CdkRow","EXPORTED_DECLARATIONS","CdkTableModule","MatTableModule","MAX_SAFE_INTEGER","MatTableDataSource","_renderData","_filter","_renderChangesSubscription","sortingDataAccessor","sortHeaderId","_isNumberValue","numberValue","sortData","a","b","valueA","valueB","comparatorResult","filterPredicate","accumulator","currentTerm","key","dataStr","keys","reduce","toLowerCase","transformedFilter","indexOf","_updateChangeSubscription","_paginator","paginator","initialized","pageChange","page","dataStream","filteredData","combineLatest","_a","_filterData","orderedData","_orderData","paginatedData","_pageData","obj","_updatePaginator","startIndex","pageIndex","pageSize","splice","filteredDataLength","lastPageIndex","ceil","InjectionToken","factory","_MAT_INK_BAR_POSITIONER_FACTORY","_inkBarPositioner","_setStyles","positions","inkBar","left","width","MatSlider","_vertical","displayWith","_roundToDecimal","toFixed","_focusHostElement","blur","_blurHostElement","_clamp","_percent","vertical","invert","percent","_isMinValue","thumbLabel","axis","scale","_shouldInvertMouseCoords","_thumbGap","_getDirection","_tickIntervalPercent","tickSize","backgroundSize","sign","rotate","_invertAxis","detectChanges","_onMouseenter","_sliderDimensions","_getSliderDimensions","_updateTickIntervalPercent","_onClick","oldValue","_isSliding","_updateValueFromPosition","x","clientX","y","clientY","_emitInputEvent","_emitChangeEvent","_onSlide","_onSlideStart","center","_valueOnSlideStart","_onSlideEnd","_onFocus","_onBlur","onTouched","_onKeydown","PAGE_UP","_increment","PAGE_DOWN","LEFT_ARROW","UP_ARROW","RIGHT_ARROW","DOWN_ARROW","_onKeyup","numSteps","step","pos","offset","top","size","posComponent","exactValue","_calculateValue","closestValue","round","_controlValueAccessorChangeFn","valueChange","input","tickInterval","trackSize","pixelsPerStep","stepsPerTick","pixelsPerTick","MatSliderChange","source","_calculatePercentage","percentage","_sliderWrapper","getBoundingClientRect","writeValue","registerOnChange","fn","registerOnTouched","setDisabledState","isDisabled","MAT_SLIDER_VALUE_ACCESSOR","(focus)","(blur)","(keydown)","(keyup)","(slide)","(slideend)","(slidestart)","[tabIndex]","[attr.aria-valuemax]","[attr.aria-valuemin]","[attr.aria-valuenow]","[attr.aria-orientation]","[class.mat-slider-disabled]","[class.mat-slider-has-ticks]","[class.mat-slider-horizontal]","[class.mat-slider-axis-inverted]","[class.mat-slider-sliding]","[class.mat-slider-thumb-label-showing]","[class.mat-slider-vertical]","[class.mat-slider-min-value]","[class.mat-slider-hide-last-tick]","[class._mat-animation-noopable]","ANIMATION_MODULE_TYPE","HAMMER_GESTURE_CONFIG","useClass","GestureConfig","MatSliderModule","MatSnackBarRef","containerInstance","_overlayRef","_afterDismissed","_afterOpened","_onAction","_dismissedByAction","onAction","dismiss","_onExit","_finishDismiss","closed","exit","clearTimeout","_durationTimeoutId","dismissWithAction","closeWithAction","_dismissAfter","duration","setTimeout","_open","dispose","dismissedByAction","afterDismissed","asObservable","afterOpened","_onEnter","MAT_SNACK_BAR_DATA","MatSnackBarConfig","politeness","announcementMessage","horizontalPosition","verticalPosition","SimpleSnackBar","snackBarRef","action","matSnackBarAnimations","snackBarState","opacity","MatSnackBarContainer","snackBarConfig","_animationState","attachComponentPortal","portal","_assertNotAttached","_applySnackBarClasses","_portalOutlet","attachTemplatePortal","onAnimationEnd","_completeExit","onEnter_1","run","enter","onMicrotaskEmpty","panelClasses","panelClass","cssClass","Error","[@state]","(@state.done)","OverlayModule","entryComponents","MatSnackBarModule","MAT_SNACK_BAR_DEFAULT_OPTIONS","MAT_SNACK_BAR_DEFAULT_OPTIONS_FACTORY","MatSnackBar","_overlay","_live","_injector","_breakpointObserver","_parentSnackBar","_defaultConfig","_snackBarRefAtThisLevel","parent","_openedSnackBarRef","openFromComponent","component","config","_attach","openFromTemplate","open","message","_config","tslib_1.__assign","_attachSnackBarContainer","overlayRef","userInjector","injector","PortalInjector","WeakMap","containerPortal","ComponentPortal","containerRef","instance","content","userConfig","_createOverlay","container","$implicit","_createInjector","contentRef","observe","Breakpoints","Handset","detachments","matches","overlayElement","_animateSnackBar","announce","overlayConfig","OverlayConfig","positionStrategy","global","isRtl","isLeft","isRight","right","centerHorizontally","bottom","create","Overlay","LiveAnnouncer","Injector","BreakpointObserver","MatSortBase","_MatSortMixinBase","mixinInitialized","sortables","Map","_direction","getSortInvalidDirectionError","sortable","getSortHeaderMissingIdError","has","getSortDuplicateSortableIdError","set","delete","getNextSortDirection","sortDirectionCycle","getSortDirectionCycle","nextDirectionIndex","_markInitialized","SORT_ANIMATION_TRANSITION","AnimationDurations","ENTERING","AnimationCurves","STANDARD_CURVE","keyframes","_mode","_disableClose","_autoFocus","openedChange","opened","_doc","_elementFocusedBeforeDrawerWasOpened","_isFocusTrapEnabled","_focusTrap","_trapFocus","_restoreFocus","close","stopPropagation","MatDrawer","onPositionChanged","_modeChanged","mode","focusInitialElementWhenReady","hasMovedFocus","activeEl","activeElement","HTMLElement","focusVia","_openedVia","enabled","destroy","isOpen","openedVia","_opened","_enableAnimations","matDrawerAnimations","transformDrawer","[@transform]","(@transform.start)","(@transform.done)","[attr.align]","[class.mat-drawer-end]","[class.mat-drawer-over]","[class.mat-drawer-side]","_openedStream","openedStart","_closedStream","closedStart","_animationMode","backdropClick","_doCheckSubject","_autosize","defaultAutosize","MatDrawerContainer","_backdropOverride","_drawers","drawer","_watchDrawerToggle","_watchDrawerPosition","_watchDrawerMode","_isDrawerOpen","_start","_end","_updateContentMargins","debounceTime","ngDoCheck","_setContainerClass","throwMatDuplicatedDrawerError","_right","_left","_closeModalDrawer","disableClose","_canHaveBackdrop","_isShowingBackdrop","_width","_contentMarginChanges","_contentMargins","[class.mat-drawer-container-explicit-backdrop]","ContentChild","MatDrawerContent","_userContent","autosize","MatSidenavContent","scrollDispatcher","ngZone","[style.margin-left.px]","[style.margin-right.px]","ScrollDispatcher","MatSidenav","_fixedBottomGap","[class.mat-sidenav-fixed]","[style.top.px]","[style.bottom.px]","fixedInViewport","fixedTopGap","MatSidenavContainer","MatSidenavModule","ScrollingModule","PlatformModule","MAT_SLIDE_TOGGLE_DEFAULT_OPTIONS","disableToggleValue","disableDragValue","nextUniqueId","MAT_SLIDE_TOGGLE_VALUE_ACCESSOR","NG_VALUE_ACCESSOR","MatSlideToggle","multi","MatSlideToggleChange","checked","MatSlideToggleBase","_MatSlideToggleMixinBase","defaults","onChange","_","_uniqueId","_required","_checked","_dragging","labelPosition","toggleChange","dragChange","focusOrigin","_onChangeEvent","_inputElement","_onInputClick","toggle","_getDragPercentage","distance","_thumbBarWidth","_previousChecked","_onDragStart","thumbEl","_thumbEl","_thumbBarEl","clientWidth","_onDrag","_dragPercentage","deltaX","dragX","_onDragEnd","newCheckedValue","_onLabelTextChange","[id]","[class.mat-checked]","[class.mat-disabled]","[class.mat-slide-toggle-label-before]","required","MatSlideToggleModule","MatSliderBase","_MatSliderMixinBase","_invert","_max","_min","_step","_thumbLabel","_tickInterval","_value","toString","split","pop","parseFloat","MAT_PROGRESS_BAR_LOCATION","MatProgressBar","MatProgressBarModule","BASE_SIZE","MatProgressSpinnerBase","_MatProgressSpinnerMixinBase","MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS","MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS_FACTORY","INDETERMINATE_ANIMATION_TEMPLATE","MatProgressSpinner","platform","animationMode","_fallbackAnimation","_noopAnimations","_forceAnimations","_diameter","EDGE","TRIDENT","diameter","strokeWidth","animationClass","diameters","_attachStyleNode","_strokeWidth","newValue","viewBox","_circleRadius","PI","_strokeCircumference","styleTag","createElement","head","appendChild","sheet","insertRule","_getAnimationText","replace","Set","[style.width.px]","[style.height.px]","[attr.mode]","MatSpinner","MatProgressSpinnerModule","MAT_RADIO_GROUP_CONTROL_VALUE_ACCESSOR","MatRadioGroup","MatRadioChange","MatRadioGroupBase","_MatRadioGroupMixinBase","_changeDetector","_name","_selected","_isInitialized","_labelPosition","_disabled","_updateRadioButtonNames","_markRadiosForCheck","_updateSelectedRadioFromValue","_checkSelectedRadioButton","_touch","_radios","radio","isAlreadySelected","_markForCheck","MatRadioButton","descendants","MatRadioButtonBase","_MatRadioButtonMixinBase","radioGroup","_radioDispatcher","_removeUniqueSelectionListener","listen","newCheckedState","notify","newDisabledState","_isRippleDisabled","disableRipple","_onInputChange","groupValueChanged","[class.mat-radio-checked]","[class.mat-radio-disabled]","[attr.id]","UniqueSelectionDispatcher","ariaDescribedby","MatRadioModule","box-shadow","MAT_DRAWER_DEFAULT_AUTOSIZE","MAT_DRAWER_DEFAULT_AUTOSIZE_FACTORY","_container","_focusTrapFactory","selectedOptionOffset","_countGroupLabelsBeforeOption","options","optionGroups","scrollBuffer","panelHeight","_scrollTop","_calculateOverlayScroll","maxScroll","_offsetY","_calculateOverlayOffsetY","_checkOverlayWithinViewport","MatSelect","itemHeight","_getItemHeight","optionOffsetFromScrollTop","halfOptionHeight","optimalScrollPosition","_getAriaLabel","placeholder","_getAriaLabelledby","_parentFormField","_hasFloatingLabel","_labelId","_getAriaActiveDescendant","panelOpen","activeItem","_calculateOverlayOffsetX","offsetX","overlayRect","overlayDir","viewportSize","getViewportSize","_isRtl","paddingWidth","multiple","SELECT_MULTIPLE_PANEL_PADDING_X","_selectionModel","first","group","leftOverflow","rightOverflow","updatePosition","optionOffsetFromPanelTop","optionHeightAdjustment","_triggerRect","maxOptionsDisplayed","floor","_disableOptionCentering","firstDisplayedIndex","_getItemCount","selectedDisplayIndex","partialItemHeight","topSpaceAvailable","bottomSpaceAvailable","panelHeightTop","abs","totalPanelHeight","panelHeightBottom","_adjustPanelUp","_adjustPanelDown","_transformOrigin","_getOriginBasedOnOption","distanceBelowViewport","distanceAboveViewport","_triggerFontSize","setDescribedByIds","ids","_ariaDescribedby","join","onContainerClick","_panelOpen","empty","[attr.tabindex]","[attr.aria-label]","[attr.aria-labelledby]","[attr.aria-required]","[attr.aria-invalid]","[attr.aria-owns]","[attr.aria-multiselectable]","[attr.aria-describedby]","[attr.aria-activedescendant]","[class.mat-select-disabled]","[class.mat-select-invalid]","[class.mat-select-required]","[class.mat-select-empty]","matSelectAnimations","transformPanel","fadeInContent","MatFormFieldControl","MAT_OPTION_PARENT_COMPONENT","NgForm","FormGroupDirective","MatFormField","NgControl","Self","MAT_SELECT_SCROLL_STRATEGY","CdkConnectedOverlay","MatOption","MatOptgroup","customTrigger","MatSelectTrigger","disableOptionCentering","compareWith","errorStateMatcher","sortComparator","selectionChange","MatOptionModule","MatFormFieldModule","MAT_SELECT_SCROLL_STRATEGY_PROVIDER","MatSelectModule","matTooltipAnimations","tooltipState","SCROLL_THROTTLE_MS","MAT_TOOLTIP_SCROLL_STRATEGY","MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY_PROVIDER","MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY","MAT_TOOLTIP_DEFAULT_OPTIONS","MAT_TOOLTIP_DEFAULT_OPTIONS_FACTORY","MatTooltip","_scrollDispatcher","_ariaDescriber","_scrollStrategy","_defaultOptions","showDelay","hideDelay","_message","_manualListeners","IOS","ANDROID","nodeName","webkitUserSelect","userSelect","listener","addEventListener","draggable","_updatePosition","_tooltipInstance","removeDescription","_isTooltipVisible","_updateTooltipMessage","describe","_tooltipClass","_setTooltipClass","removeEventListener","clear","delay","_detach","_portal","TooltipComponent","afterHidden","isVisible","ESCAPE","_handleTouchend","touchendHideDelay","strategy","flexibleConnectedTo","withTransformOriginOn","withFlexibleDimensions","withViewportMargin","scrollableAncestors","getAncestorScrollContainers","withScrollableContainers","positionChanges","scrollableViewProperties","isOverlayClipped","scrollStrategy","getConfig","_getOrigin","overlay","_getOverlayPosition","withPositions","main","fallback","originPosition","isLtr","originX","originY","getMatTooltipInvalidPositionError","_invertPosition","overlayPosition","overlayX","overlayY","tooltipClass","(touchend)","AriaDescriber","_visibility","_closeOnInteraction","_onHide","_isHandset","_hideTimeoutId","_showTimeoutId","_animationStart","_animationDone","_handleBodyInteraction","aria-hidden","MatTooltipModule","itemsPerPageLabel","nextPageLabel","previousPageLabel","firstPageLabel","lastPageLabel","getRangeLabel","MatPaginatorIntl","MAT_PAGINATOR_INTL_PROVIDER","MAT_PAGINATOR_INTL_PROVIDER_FACTORY","PageEvent","MatPaginatorBase","_MatPaginatorBase","MatPaginator","_pageIndex","_length","_pageSizeOptions","_hidePageSize","_showFirstLastButtons","_intlChanges","_pageSize","_updateDisplayedPageSizeOptions","p","_initialized","nextPage","hasNextPage","previousPageIndex","_emitPageEvent","previousPage","hasPreviousPage","firstPage","lastPage","getNumberOfPages","numberOfPages","_changePageSize","pageSizeOptions","_displayedPageSizeOptions","hidePageSize","showFirstLastButtons","MatPaginatorModule","MatProgressBarBase","_MatProgressBarMixinBase","MAT_PROGRESS_BAR_LOCATION_FACTORY","progressbarId","location","_bufferValue","path","pathname","_rectangleFillValue","clamp","_primaryTransform","_bufferTransform","bufferValue","aria-valuemin","aria-valuemax","_outlet","DomPortalOutlet","_componentFactoryResolver","_appRef","_template","insertBefore","outletElement","context","_attached","MatMenuContent","isAttached","ApplicationRef","matMenuAnimations","transformMenu","sequence","fadeInItems","MAT_MENU_PANEL","MatMenuItemBase","_MatMenuItemMixinBase","MatMenuItem","_parentMenu","_hovered","_highlighted","_triggersSubmenu","addItem","removeItem","_checkDisabled","_handleMouseEnter","getLabel","textNodeType","TEXT_NODE","output","length_1","[class.mat-menu-item-highlighted]","[class.mat-menu-item-submenu-trigger]","[attr.disabled]","MAT_MENU_DEFAULT_OPTIONS","MAT_MENU_DEFAULT_OPTIONS_FACTORY","MatMenu","_xPosition","xPosition","_yPosition","yPosition","_items","_itemChanges","_tabSubscription","_classList","_panelAnimationState","backdropClass","_overlapTrigger","overlapTrigger","_hasBackdrop","hasBackdrop","throwMatMenuInvalidPositionX","setPositionClasses","throwMatMenuInvalidPositionY","classes","className","withTypeAhead","tabOut","switchMap","items","item","parentMenu","setFocusOrigin","focusFirstItem","lazyContent","onStable","resetActiveItem","setElevation","depth","newElevation","customElevation","c","startsWith","_previousElevation","posX","posY","_startAnimation","_resetAnimation","_onAnimationDone","_isAnimating","activeItemIndex","scrollTop","MAT_MENU_SCROLL_STRATEGY","MAT_MENU_SCROLL_STRATEGY_FACTORY_PROVIDER","MAT_MENU_SCROLL_STRATEGY_FACTORY","MatMenuTrigger","_menuItemInstance","_menuOpen","_closeSubscription","_hoverSubscription","_openedByMouse","menuOpened","onMenuOpen","menuClosed","onMenuClose","triggersSubmenu","menu","_checkMenu","reason","_destroyMenu","_handleHover","_cleanUpSubscriptions","toggleMenu","closeMenu","openMenu","_setPosition","menuData","_menuClosingActions","_initMenu","menuOpen","_resetMenu","_setMenuElevation","_setIsMenuOpen","throwMatMenuMissingError","_getOverlayConfig","_subscribeToPositions","connectionPair","originFallbackX","_b","overlayFallbackY","_c","originFallbackY","_d","overlayFallbackX","offsetY","backdrop","parentClose","hover","_handleMousedown","isFakeMousedownFromScreenReader","asapScheduler","aria-haspopup","(mousedown)","_deprecatedMatMenuTriggerFor","MatMenuModule","minWidth","MAT_SELECT_SCROLL_STRATEGY_PROVIDER_FACTORY","MatSelectChange","MatSelectBase","_defaultErrorStateMatcher","_parentForm","_parentFormGroup","ngControl","_MatSelectMixinBase","mixinErrorState","_scrollStrategyFactory","_multiple","_compareWith","o1","o2","_uid","_destroy","_onChange","_onTouched","_optionIds","_panelDoneAnimating","_panelDoneAnimatingStream","_positions","_focused","controlType","optionSelectionChanges","defer","option","onSelectionChange","o","valueAccessor","_placeholder","stateChanges","getMatSelectDynamicMultipleError","getMatSelectNonFunctionValueError","_initializeSelection","_id","SelectionModel","distinctUntilChanged","_initKeyManager","added","select","removed","deselect","_resetOptions","updateErrorState","getComputedStyle","_calculateOverlayPosition","_highlightCorrectOption","fontSize","_setSelectionByValue","selectedOptions","viewValue","reverse","_handleOpenKeydown","_handleClosedKeydown","isArrowKey","altKey","manager","A","ctrlKey","hasDeselectedOptions_1","opt","previouslyFocusedIndex","shiftKey","_selectViaInteraction","_onFadeInDone","_onAttached","positionChange","panel","_getPanelTheme","color","isEmpty","getMatSelectNonArrayValueError","currentValue","_selectValue","_sortValues","correspondingOption","error","console","warn","ActiveDescendantKeyManager","withVerticalOrientation","_scrollActiveOptionIntoView","changedOrDestroyed","_onSelect","isUserInput","_setOptionIds","wasSelected","isSelected","_propagateChanges","options_1","fallbackValue","valueToEmit","activeOptionIndex","labelCount","_getOptionScrollPosition","_getOptionIndex","result","current","scrollContainerHeight","MAT_SELECTION_LIST_VALUE_ACCESSOR","MatSelectionList","MatListOption","_MatSelectionListMixinBase","MatLineModule","MatPseudoCheckboxModule","MatList","MatNavList","MatListItem","MatListAvatarCssMatStyler","MatListIconCssMatStyler","MatListSubheaderCssMatStyler","MatDividerModule","MatListModule","_handleBlur","[class.mat-list-item-avatar]","[class.mat-list-item-with-avatar]","_icon","MatSelectionListBase","MatListOptionBase","_MatListOptionMixinBase","MatSelectionListChange","selectionList","_hasFocus","checkboxPosition","_setSelected","_reportValueChange","MatLineSetter","_lines","_removeOptionFromList","_text","_handleFocus","_setFocusedOption","tabindex","[class.mat-list-item-disabled]","[class.mat-list-item-focus]","[attr.aria-selected]","skipPredicate","_tempValues","_setOptionsFromValues","_modelChanges","_i","optionIndex","setNextItemActive","previousFocusIndex","_toggleFocusedOption","selectAll","deselectAll","_getSelectedOptionValues","values","Boolean","focusedOption","focusedIndex","hasChanged","_MatListMixinBase","_navList","_isNavList","MatAccordion","_handleHeaderFocus","header","MAT_ACCORDION","_headers","MatExpansionPanelHeader","hideToggle","displayMode","CdkAccordion","CdkAccordionModule","MatExpansionPanel","MatExpansionPanelActionRow","MatExpansionPanelTitle","MatExpansionPanelDescription","MatExpansionPanelContent","MatExpansionModule","MatGridTile","_rowspan","_colspan","_setStyle","property","MatGridTileText","MatGridAvatarCssMatStyler","MatGridTileHeaderCssMatStyler","MatGridTileFooterCssMatStyler","TileCoordinator","numColumns","tiles","columnIndex","rowIndex","tracker","fill","tile","_trackTile","lastRowMax","rowCount","gapStartIndex","_findMatchingGap","colspan","_markTilePosition","TilePosition","tileCols","gapEndIndex","_nextRow","_findGapEndIndex","rowspan","row","col","TileStyler","_rows","init","gutterSize","cols","_gutterSize","normalizeUnits","_cols","getBaseTileSize","sizePercent","gutterFraction","getTilePosition","baseSize","calc","getTileSize","span","setStyle","colIndex","percentWidthPerTile","gutterWidthFractionPerTile","setColStyles","setRowStyles","percentWidth","gutterWidth","baseTileWidth","side","getGutterSpan","getTileSpan","tileHeight","getComputedHeight","FixedTileStyler","fixedRowHeight","reset","list","_setListStyle","_tiles","RatioTileStyler","_parseRatio","percentHeightPerTile","rowHeightRatio","baseTileHeight","ratioParts","FitTileStyler","gutterHeightPerTile","MatGridList","_gutter","_rowHeight","_setTileStyler","_checkCols","_checkRowHeight","_layoutTiles","rowHeight","_tileStyler","MatGridListModule","SvgIconConfig","svgElement","url","MatIconRegistry","_httpClient","_sanitizer","_svgIconConfigs","_iconSetConfigs","_cachedIconsByUrl","_inProgressUrlFetches","_fontCssClassesByAlias","_defaultFontSetClass","addSvgIcon","iconName","addSvgIconInNamespace","addSvgIconLiteral","literal","addSvgIconLiteralInNamespace","namespace","_addSvgIconConfig","sanitizedLiteral","sanitize","SecurityContext","HTML","getMatIconFailedToSanitizeLiteralError","_createSvgElementForSingleIcon","addSvgIconSet","addSvgIconSetInNamespace","addSvgIconSetLiteral","addSvgIconSetLiteralInNamespace","_addSvgIconSetConfig","_svgElementFromString","registerFontClassAlias","alias","classNameForFontAlias","setDefaultFontSetClass","getDefaultFontSetClass","getSvgIconFromUrl","safeUrl","RESOURCE_URL","getMatIconFailedToSanitizeUrlError","cachedIcon","cloneSvg","_loadSvgIconFromConfig","tap","svg","getNamedSvgIcon","iconKey","_getSvgFromConfig","iconSetConfigs","_getSvgFromIconSetConfigs","observableThrow","getMatIconNameNotFoundError","namedIcon","_extractIconWithNameFromAnySet","iconSetFetchRequests","iconSetConfig","_loadSvgIconSetFromConfig","catchError","err","forkJoin","foundIcon","_extractSvgIconFromSet","_fetchUrl","svgText","responseText","_setSvgAttributes","iconSet","iconSource","querySelector","iconElement","cloneNode","removeAttribute","_toSvgElement","str","div","innerHTML","ELEMENT_NODE","setAttribute","getMatIconNoHttpProviderError","inProgressFetch","req","responseType","finalize","share","configNamespace","HttpClient","DomSanitizer","ICON_REGISTRY_PROVIDER","ICON_REGISTRY_PROVIDER_FACTORY","MatIconBase","_MatIconMixinBase","MatIcon","_iconRegistry","ariaHidden","_inline","inline","_fontSet","_cleanupFontValue","_fontIcon","_splitIconName","parts","svgIcon","_setSvgElement","log","_clearSvgElement","_usingFontIcon","_updateFontIconClasses","styleTags","querySelectorAll","layoutElement","childCount","removeChild","elem","fontSetClass","fontSet","_previousFontSetClass","fontIcon","_previousFontIconClass","[class.mat-icon-inline]","MatListBase","MatListItemBase","_MatListItemMixinBase","MatMultiYearView","MatCalendar","matDatepickerAnimations","fadeInCalendar","datepickerUid","MAT_DATEPICKER_SCROLL_STRATEGY","MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY_PROVIDER","MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY","MatDatepickerContentBase","_MatDatepickerContentMixinBase","MatDatepickerContent","_calendar","focusActiveCell","[@transformPanel]","[class.mat-datepicker-content-touch]","_dateAdapter","createMissingDateImplError","MatDatepicker","_datepickerInput","_getThemePalette","_disabledChange","_inputSubscription","_popupRef","_popupComponentRef","sameDate","_selectedChanged","date","_valueChange","_focusedElementBeforeOpen","touchUi","_openAsDialog","_openAsPopup","openedStream","_dialogRef","_calendarPortal","completeClose","closedStream","_dialog","afterClosed","componentInstance","datepicker","_setColor","_createPopup","keydownEvents","withPush","MatDialog","DateAdapter","calendarHeaderComponent","startAt","yearSelected","monthSelected","MAT_DATEPICKER_VALUE_ACCESSOR","MatDatepickerInput","MAT_DATEPICKER_VALIDATORS","NG_VALIDATORS","MatDatepickerInputEvent","target","targetElement","_dateFormats","_formField","dateChange","dateInput","_cvaOnChange","_validatorOnChange","_datepickerSubscription","_localeSubscription","_parseValidator","_lastValueValid","matDatepickerParse","text","_minValidator","controlValue","_getValidDateOrNull","deserialize","compareDate","matDatepickerMin","actual","_maxValidator","matDatepickerMax","_filterValidator","_dateFilter","matDatepickerFilter","_validator","Validators","compose","localeChanges","_datepicker","_registerInput","isValid","oldDate","_formatValue","registerOnValidatorChange","validate","getPopupConnectionElementRef","getConnectedOverlayOrigin","_onInput","parse","format","display","isDateInstance","MAT_INPUT_VALUE_ACCESSOR","[attr.aria-haspopup]","[attr.min]","[attr.max]","[disabled]","(input)","(change)","MAT_DATE_FORMATS","matDatepicker","MatDatepickerToggleIcon","MatDatepickerToggle","defaultTabIndex","parsedTabIndex","_watchStateChanges","datepickerDisabled","inputDisabled","datepickerToggled","[class.mat-accent]","[class.mat-warn]","_customIcon","MatDialogModule","MatCalendarBody","MatMonthView","MatYearView","MatCalendarHeader","MatDatepickerIntl","MatDatepickerModule","_inset","MatDivider","[class.mat-divider-vertical]","[class.mat-divider-horizontal]","[class.mat-divider-inset]","matExpansionAnimations","indicatorRotate","expansionHeaderHeight","params","collapsedHeight","expandedHeight","bodyExpansion","_CdkAccordionItem","CdkAccordionItem","uniqueId","accordion","_uniqueSelectionDispatcher","_hideToggle","afterExpand","afterCollapse","_inputChanges","_headerId","_hasSpacing","expanded","_getExpandedState","_lazyContent","_bodyAnimation","phaseName","_containsFocus","_body","focusedElement","bodyElement","outputs","[class.mat-expanded]","[class.mat-expansion-panel-spacing]","_parentChangeSubscription","accordionHideToggleChange","_toggle","_isExpanded","_getPanelId","_showToggle","_keydown","_handleHeaderKeydown","[attr.aria-controls]","[@expansionHeight]","aria-readonly","todayValue","selectedValue","labelMinRequiredCells","numCols","allowDisabledSelection","activeCell","cellAspectRatio","selectedValueChange","selectedChange","_userSelection","activeDateChange","firstDayOfWeek","getFirstDayOfWeek","narrowWeekdays","getDayOfWeekNames","longWeekdays","weekdays","long","narrow","_weekdays","concat","_activeDate","today","oldActiveDate","validDate","clampDate","minDate","maxDate","_hasSameMonthAndYear","_init","_selectedDate","_getDateInCurrentMonth","_minDate","_maxDate","_dateSelected","selectedYear","getYear","activeDate","selectedMonth","getMonth","selectedDate","createDate","_handleCalendarBodyKeydown","addCalendarDays","getDate","getNumDaysInMonth","addCalendarYears","addCalendarMonths","dateFilter","_focusActiveCell","_todayDate","_monthLabel","getMonthNames","toLocaleUpperCase","firstOfMonth","_firstWeekOffset","getDayOfWeek","_createWeekCells","_matCalendarBody","daysInMonth","dateNames","getDateNames","_weeks","cell","_shouldEnableDate","dateA11yLabel","MatCalendarCell","d1","d2","_selectedYear","_todayYear","activeYear","activeOffset","_years","year","_createCellForYear","_yearSelected","month","yearsPerPage","_getActiveCell","yearName","getYearName","_shouldEnableYear","firstOfYear","_selectedMonth","_getMonthInCurrentYear","_monthSelected","normalizedDate","_todayMonth","_yearLabel","monthNames","_months","_createCellForMonth","monthName","monthYearA11yLabel","_shouldEnableMonth","_isYearAndMonthAfterMaxDate","_isYearAndMonthBeforeMinDate","maxYear","maxMonth","minYear","minMonth","calendar","currentView","monthYearLabel","switchToMultiYearViewLabel","switchToMonthViewLabel","prevMonthLabel","prevYearLabel","multi-year","prevMultiYearLabel","nextMonthLabel","nextYearLabel","nextMultiYearLabel","currentPeriodClicked","previousClicked","nextClicked","previousEnabled","_isSameView","nextEnabled","date1","date2","_moveFocusOnNextTick","_currentView","startView","view","_getCurrentViewComponent","monthView","headerComponent","yearView","multiYearView","chip","MatChipListChange","MatChipList","_blur","_chipInput","focused","_markAsTouched","_resetChips","_dropSubscriptions","_listenToChipsFocus","_listenToChipsSelection","_listenToChipsRemoved","_chipFocusSubscription","_chipBlurSubscription","_chipSelectionSubscription","_chipRemoveSubscription","chipSelectionChanges","chips","chipFocusChanges","chipIndex","chipBlurChanges","chipRemoveChanges","_lastDestroyedChipIndex","[class.mat-chip-list-disabled]","[class.mat-chip-list-invalid]","[class.mat-chip-list-required]","ariaOrientation","selectable","MatChip","MatChipInput","_addOnBlur","separatorKeyCodes","chipEnd","_chipList","registerInput","_emitChipEnd","addOnBlur","_focus","_isSeparatorKey","separators","[attr.placeholder]","MAT_CHIPS_DEFAULT_OPTIONS","chipList","CHIP_DECLARATIONS","MatChipRemove","MatChipAvatar","MatChipTrailingIcon","ɵ0","useValue","MatChipsModule","MatDialogConfig","maxWidth","ariaDescribedBy","autoFocus","restoreFocus","closeOnNavigation","matDialogAnimations","slideDialog","MatDialogContainer","_elementFocusedBeforeDialogWasOpened","_state","_animationStateChanged","_ariaLabelledBy","throwMatDialogContentAlreadyAttachedError","_savePreviouslyFocusedElement","toFocus","_onAnimationStart","_startExitAnimation","aria-modal","[@slideDialog]","(@slideDialog.start)","(@slideDialog.done)","MatDialogRef","_containerInstance","_afterClosed","_beforeClosed","_locationChanges","_result","dialogResult","detachBackdrop","beforeClosed","_getPositionStrategy","centerVertically","updateSize","afterOpen","beforeClose","MAT_DIALOG_DATA","MAT_DIALOG_DEFAULT_OPTIONS","MAT_DIALOG_SCROLL_STRATEGY","MAT_DIALOG_SCROLL_STRATEGY_PROVIDER","MAT_DIALOG_SCROLL_STRATEGY_PROVIDER_FACTORY","_location","_parentDialog","_overlayContainer","_openDialogsAtThisLevel","_afterAllClosedAtThisLevel","_afterOpenedAtThisLevel","_ariaHiddenElements","afterAllClosed","openDialogs","_afterAllClosed","componentOrTemplateRef","_applyConfigDefaults","getDialogById","dialogContainer","_attachDialogContainer","dialogRef","_attachDialogContent","_hideNonDialogContentFromAssistiveTechnology","_removeOpenDialog","closeAll","dialog","dialogConfig","maxHeight","injectionTokens","previousValue","overlayContainer","getContainerElement","parentElement","siblings","sibling","hasAttribute","getAttribute","Location","OverlayContainer","dialogElementUid","MatDialogClose","getClosestDialog","proxiedChange","_matDialogClose","MatDialogTitle","MatDialogContent","MatDialogActions","_CdkTextareaAutosize","CdkTextareaAutosize","MatTextareaAutosize","minRows","maxRows","rows","matAutosizeMinRows","matAutosizeMaxRows","matAutosize","matTextareaAutosize","MAT_INPUT_INVALID_TYPES","MatInputBase","_MatInputMixinBase","MatInput","inputValueAccessor","_autofillMonitor","_isServer","autofilled","_type","_readonly","_neverEmptyInputTypes","t","getSupportedInputTypes","_inputValueAccessor","_previousNativeValue","el","selectionStart","selectionEnd","setSelectionRange","_validateType","_isTextarea","isAutofilled","_dirtyCheckNativeValue","isFocused","readonly","getMatInputUnsupportedTypeError","_isNeverEmpty","_isBadInput","validity","badInput","[class.mat-input-server]","[required]","[readonly]","AutofillMonitor","TextFieldModule","MatInputModule","calendarLabel","openCalendarLabel","displayValue","_cellClicked","_isActiveCell","cellNumber","_firstRowOffset","MatCard","MatCardHeader","MatCardTitleGroup","MatCardContent","MatCardTitle","MatCardSubtitle","MatCardActions","MatCardFooter","MatCardSmImage","MatCardMdImage","MatCardLgImage","MatCardImage","MatCardXlImage","MatCardAvatar","MatCardModule","MAT_CHECKBOX_CLICK_ACTION","MAT_CHECKBOX_CONTROL_VALUE_ACCESSOR","MatCheckbox","Init","Checked","Unchecked","Indeterminate","TransitionCheckState","MatCheckboxChange","MatCheckboxBase","_MatCheckboxMixinBase","_clickAction","indeterminateChange","_currentAnimationClass","_currentCheckState","_indeterminate","_onInputFocusChange","changed","_transitionCheckState","_getAriaChecked","indeterminate","newState","oldState","_getAnimationClassForCheckStateTransition","animationClass_1","_focusRipple","fadeOut","ripple","launch","persistent","_onInteractionEvent","animSuffix","[class.mat-checkbox-indeterminate]","[class.mat-checkbox-checked]","[class.mat-checkbox-disabled]","[class.mat-checkbox-label-before]","MatRipple","MAT_CHECKBOX_REQUIRED_VALIDATOR","MatCheckboxRequiredValidator","[attr.required]","CheckboxRequiredValidator","MatCheckboxModule","MatChipSelectionChange","MatChipBase","_MatChipMixinBase","CHIP_ATTRIBUTE_NAMES","rippleConfig","chipListSelectable","_selectable","_removable","destroyed","_addHostClassName","_chipRipple","RippleRenderer","CHIP_ATTRIBUTE_NAMES_1","attr","tagName","_removeTriggerEvents","selectViaInteraction","toggleSelected","removable","DELETE","BACKSPACE","[class.mat-chip-selected]","[class.mat-chip-with-avatar]","[class.mat-chip-with-trailing-icon]","[class.mat-chip-disabled]","avatar","trailingIcon","removeIcon","_parentChip","MatChipListBase","_MatChipListMixinBase","_tabIndex","_userTabIndex","_updateTabIndex","_updateFocusForDestroyedChips","inputElement","_focusInput","_isInputEmpty","newChipIndex","_clearSelection","correspondingChip","skip","MatButton","stopImmediatePropagation","MatAnchor","MatButtonToggleGroupBase","_MatButtonToggleGroupMixinBase","MAT_BUTTON_TOGGLE_GROUP_VALUE_ACCESSOR","MatButtonToggleGroup","MatButtonToggleGroupMultiple","_uniqueIdCounter","MatButtonToggleChange","_buttonToggles","_syncButtonToggle","_isSelected","_isPrechecked","_rawValue","[class.mat-button-toggle-vertical]","MatButtonToggle","MatButtonToggleBase","_MatButtonToggleMixinBase","toggleGroup","_isSingleSelector","buttonToggleGroup","_buttonElement","_onButtonClick","newChecked","[class.mat-button-toggle-standalone]","[class.mat-button-toggle-checked]","[class.mat-button-toggle-disabled]","MatButtonToggleModule","align","[class.mat-card-actions-align-end]","MatAutocomplete","MAT_AUTOCOMPLETE_DEFAULT_OPTIONS","autoActiveFirstOption","panelWidth","optionSelected","MatAutocompleteOrigin","MAT_AUTOCOMPLETE_SCROLL_STRATEGY","MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY_PROVIDER","MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY","MAT_AUTOCOMPLETE_VALUE_ACCESSOR","MatAutocompleteTrigger","_zone","_componentDestroyed","_autocompleteDisabled","_manuallyFloatingLabel","_viewportSubscription","_canOpenOnNextFocus","_closeKeyEventStream","_windowBlurHandler","autocompleteAttribute","_overlayAttached","optionSelections","autocomplete","window","_destroyPanel","showPanel","openPanel","_attachOverlay","_floatLabel","closePanel","_resetLabel","_isOpen","_closingActionsSubscription","_getOutsideClickStream","MatOptionSelectionChange","fromEvent","clickTarget","formField","_setTriggerValue","_resetActiveItem","activeOption","prevActiveItem","TAB","_canOpen","_scrollToOption","_handleInput","_previousValue","shouldAnimate","floatLabel","_animateAndLockLabel","newScrollPosition","_getScrollTop","_setScrollTop","_subscribeToClosingActions","firstStable","optionChanges","_positionStrategy","reapplyLastPosition","_setVisibility","panelClosingActions","_setValueAndClose","toDisplay","inputValue","_control","_clearPreviousSelectedOption","_emitSelectEvent","getMatAutocompleteMissingPanelError","_getPanelWidth","wasOpen","_getConnectedElement","connectedTo","_getHostWidth","readOnly","[attr.autocomplete]","[attr.aria-autocomplete]","(focusin)","Host","autocompleteDisabled","MatAutocompleteModule","MatBadge","_hasContent","_color","_overlap","val","_updateTextContent","_description","newDescription","_updateHostAriaDescription","_hidden","isAbove","isAfter","description","_badgeElement","_createBadgeElement","badgeElement","oldDescription","colorPalette","[class.mat-badge-overlap]","[class.mat-badge-above]","[class.mat-badge-below]","[class.mat-badge-before]","[class.mat-badge-after]","[class.mat-badge-small]","[class.mat-badge-medium]","[class.mat-badge-large]","[class.mat-badge-hidden]","overlap","hidden","MatBadgeModule","MAT_BOTTOM_SHEET_DATA","MatBottomSheetConfig","matBottomSheetAnimations","bottomSheetState","COMPLEX","ACCELERATION_CURVE","EXITING","DECELERATION_CURVE","MatBottomSheetContainer","breakpointObserver","bottomSheetConfig","_elementFocusedBeforeOpened","_breakpointSubscription","Medium","Large","XLarge","_toggleClass","isMatched","_validatePortalAttached","_setPanelClass","(@state.start)","FocusTrapFactory","MatBottomSheetModule","MatBottomSheetRef","MatBottomSheet","_parentBottomSheet","_bottomSheetRefAtThisLevel","_openedBottomSheetRef","_attachContainer","ref","bottomSheetRef","scrollStrategies","block","DEFAULT_ROUND_BUTTON_COLOR","BUTTON_HOST_ATTRIBUTES","MatButtonBase","_MatButtonMixinBase","isRoundButton","_hasHostAttributes","isIconButton","BUTTON_HOST_ATTRIBUTES_1","attributes","attribute","_parent","_active","_emitSelectionChangeEvent","setActiveStyles","setInactiveStyles","ngAfterViewChecked","_mostRecentViewValue","[class.mat-selected]","[class.mat-option-multiple]","[class.mat-active]","[class.mat-option-disabled]","MAT_LABEL_GLOBAL_OPTIONS","MatError","matFormFieldAnimations","transitionMessages","[class.mat-right]","MatHint","MatLabel","MatPlaceholder","MatPrefix","MatSuffix","MatFormFieldBase","_MatFormFieldMixinBase","MAT_FORM_FIELD_DEFAULT_OPTIONS","labelOptions","_defaults","_outlineGapCalculationNeeded","_showAlwaysAnimate","_subscriptAnimationState","_hintLabel","_hintLabelId","_labelOptions","float","_animationsEnabled","appearance","_appearance","updateOutlineGap","_hideRequiredMarker","_processHints","_connectionContainerRef","_validateControlChild","_validatePlaceholders","_syncDescribedByIds","valueChanges","_prefixChildren","_suffixChildren","_hintChildren","_errorChildren","_shouldForward","prop","_hasPlaceholder","_placeholderChild","_hasLabel","_labelChild","_shouldLabelFloat","_canLabelFloat","shouldLabelFloat","_shouldAlwaysFloat","_hideControlPlaceholder","_getDisplayedMessages","errorState","_label","getMatFormFieldPlaceholderConflictError","_validateHints","startHint_1","endHint_1","hint","hintLabel","getMatFormFieldDuplicatedHintError","startHint","endHint","getMatFormFieldMissingControlError","labelEl","documentElement","startWidth","gapWidth","startEls","gapEls","containerStart","_getStartEnd","labelStart","labelWidth","outlineGapPadding","rect","[class.mat-form-field-appearance-standard]","[class.mat-form-field-appearance-fill]","[class.mat-form-field-appearance-outline]","[class.mat-form-field-appearance-legacy]","[class.mat-form-field-invalid]","[class.mat-form-field-can-float]","[class.mat-form-field-should-float]","[class.mat-form-field-hide-placeholder]","[class.mat-form-field-disabled]","[class.mat-form-field-autofilled]","[class.mat-focused]","[class.ng-untouched]","[class.ng-touched]","[class.ng-pristine]","[class.ng-dirty]","[class.ng-valid]","[class.ng-invalid]","[class.ng-pending]","hideRequiredMarker","underlineRef","_inputContainerRef","_uniqueAutocompleteIdCounter","MatAutocompleteSelectedEvent","MatAutocompleteBase","_MatAutocompleteMixinBase","MAT_AUTOCOMPLETE_DEFAULT_OPTIONS_FACTORY","_autoActiveFirstOption","__extends","d","__","constructor","extendStatics","MATERIAL_SANITY_CHECKS_FACTORY","base","class_1","defaultColor","_disableRipple","matcher","_pendingSubscribers","Observable","subscriber","_notifySubscriber","MAT_DATE_LOCALE_FACTORY","inject","LOCALE_ID","range","valueFunction","valuesArray","enforceStyleRecalculation","getPropertyValue","distanceToFurthestCorner","distX","distY","sqrt","optionsArray","groups","groupCounter","optionOffset","optionHeight","currentScrollPosition","reposition","MAT_DIALOG_SCROLL_STRATEGY_FACTORY","defaultOptions","provider","exp","match","parentRegistry","httpClient","sanitizer","scrollThrottle","parentIntl","sortOrder","setPrototypeOf","__proto__","__assign","assign","s","n","SHARP_CURVE","MATERIAL_SANITY_CHECKS","_sanityChecksEnabled","_hasDoneGlobalChecks","_hasCheckedHammer","_window","_areChecksEnabled","_checkDoctypeIsDefined","_checkThemeIsPresent","_isTestEnv","doctype","body","testElement","computedStyle","_checkHammerIsAvailable","BidiModule","MAT_DATE_LOCALE","MAT_DATE_LOCALE_PROVIDER","_localeChanges","setLocale","locale","second","firstValid","secondValid","SUPPORTS_INTL_API","Intl","DEFAULT_MONTH_NAMES","short","DEFAULT_DATE_NAMES","DEFAULT_DAY_OF_WEEK_NAMES","ISO_8601_REGEX","NativeDateAdapter","matDateLocale","useUtcForDisplay","_clampDate","getFullYear","getDay","dtf_1","DateTimeFormat","timeZone","_stripDirectionalityCharacters","_format","Date","dtf_2","day","dtf_3","weekday","dtf","_createDateWithOverflow","clone","displayFormat","setFullYear","toDateString","years","months","newDate","days","toIso8601","getUTCFullYear","_2digit","getUTCMonth","getUTCDate","test","isNaN","getTime","NaN","UTC","getHours","getMinutes","getSeconds","getMilliseconds","MAT_NATIVE_DATE_FORMATS","NativeDateModule","MatNativeDateModule","ShowOnDirtyErrorStateMatcher","dirty","submitted","touched","MAT_HAMMER_OPTIONS","ANGULAR_MATERIAL_SUPPORTED_HAMMER_GESTURES","ɵ1","noopHammerInstance","on","off","_hammerOptions","commonModule","events","buildHammer","hammer","Hammer","mc","pan","Pan","swipe","Swipe","press","Press","slide","_createRecognizer","threshold","longpress","time","recognizeWith","inheritances","recognizer","HammerGestureConfig","MatLine","_setLineClass","count","_resetClasses","_setClass","isAdd","FADING_IN","VISIBLE","FADING_OUT","HIDDEN","RippleState","RippleRef","_renderer","fadeOutRipple","defaultRippleAnimationConfig","enterDuration","exitDuration","ignoreMouseEventsTimeout","_target","_isPointerDown","_triggerEvents","_activeRipples","_eventOptions","supportsPassiveEventListeners","passive","onMousedown","isFakeMousedown","isSyntheticEvent","_lastTouchStartEvent","now","rippleDisabled","fadeInRipple","onTouchStart","touches","changedTouches","onPointerUp","_containerElement","containerRect","_containerRect","animationConfig","centered","radius","transitionDuration","rippleRef","_mostRecentTransientRipple","runTimeoutOutsideZone","isMostRecentTransientRipple","wasActive","rippleEl","fadeOutAll","_triggerElement","_globalOptions","_rippleRenderer","_setupTriggerEventsIfEnabled","_trigger","configOrX","[class.mat-ripple-unbounded]","unbounded","MatPseudoCheckbox","[class.mat-pseudo-checkbox-indeterminate]","[class.mat-pseudo-checkbox-checked]","[class.mat-pseudo-checkbox-disabled]","MatOptgroupBase","_MatOptgroupMixinBase","_uniqueOptgroupIdCounter","[class.mat-optgroup-disabled]"],"mappings":"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"}