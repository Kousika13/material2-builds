{"version":3,"file":"material.umd.min.js","sources":["../../src/lib/toolbar/toolbar.ts","../../src/lib/toolbar/toolbar-module.ts","../../src/lib/tree/outlet.ts","../../src/lib/tree/node.ts","../../src/lib/tree/padding.ts","../../src/lib/tree/tree.ts","../../src/lib/tree/toggle.ts","../../src/lib/tree/tree-module.ts","../../src/lib/tree/data-source/flat-data-source.ts","../../src/lib/tree/data-source/nested-data-source.ts","../../src/lib/version.ts","../../src/lib/autocomplete/autocomplete-trigger.ts","../../src/lib/core/testing/month-constants.ts","../../src/lib/expansion/expansion-animations.ts","../../src/lib/select/select.ts","../../src/lib/tooltip/tooltip.ts","../../src/lib/table/table-data-source.ts","../../src/lib/tabs/ink-bar.ts","../../src/lib/tabs/tab-content.ts","../../src/lib/tabs/tab-label.ts","../../src/lib/tabs/tab.ts","../../src/lib/tabs/tabs-animations.ts","../../src/lib/tabs/tab-body.ts","../../src/lib/tabs/tab-label-wrapper.ts","../../src/lib/tabs/tab-header.ts","../../src/lib/tabs/tab-group.ts","../../src/lib/tabs/tab-nav-bar/tab-nav-bar.ts","../../src/lib/tabs/tabs-module.ts","../../src/lib/sort/sort-animations.ts","../../src/lib/sort/sort-header-intl.ts","../../src/lib/sort/sort-header.ts","../../src/lib/sort/sort-module.ts","../../src/lib/stepper/step-label.ts","../../src/lib/stepper/stepper-intl.ts","../../src/lib/stepper/step-header.ts","../../src/lib/stepper/stepper-animations.ts","../../src/lib/stepper/stepper-icon.ts","../../src/lib/stepper/stepper.ts","../../src/lib/stepper/stepper-button.ts","../../src/lib/stepper/stepper-module.ts","../../src/lib/table/table.ts","../../src/lib/table/cell.ts","../../src/lib/table/row.ts","../../src/lib/table/table-module.ts","../../src/lib/slider/slider.ts","../../src/lib/slider/slider-module.ts","../../src/lib/snack-bar/snack-bar-ref.ts","../../src/lib/snack-bar/snack-bar-config.ts","../../src/lib/snack-bar/simple-snack-bar.ts","../../src/lib/snack-bar/snack-bar-animations.ts","../../src/lib/snack-bar/snack-bar-container.ts","../../src/lib/snack-bar/snack-bar-module.ts","../../src/lib/snack-bar/snack-bar.ts","../../src/lib/sort/sort.ts","../../src/lib/sidenav/drawer.ts","../../src/lib/sidenav/sidenav.ts","../../src/lib/sidenav/sidenav-module.ts","../../src/lib/slide-toggle/slide-toggle-config.ts","../../src/lib/slide-toggle/slide-toggle.ts","../../src/lib/slide-toggle/slide-toggle-module.ts","../../src/lib/progress-bar/progress-bar.ts","../../src/lib/progress-bar/progress-bar-module.ts","../../src/lib/progress-spinner/progress-spinner.ts","../../src/lib/progress-spinner/progress-spinner-module.ts","../../src/lib/radio/radio.ts","../../src/lib/radio/radio-module.ts","../../src/lib/sidenav/drawer-animations.ts","../../src/lib/select/select-module.ts","../../src/lib/tooltip/tooltip-animations.ts","../../src/lib/tooltip/tooltip-module.ts","../../src/lib/paginator/paginator-intl.ts","../../src/lib/paginator/paginator.ts","../../src/lib/paginator/paginator-module.ts","../../src/lib/menu/menu-content.ts","../../src/lib/menu/menu-animations.ts","../../src/lib/menu/menu-panel.ts","../../src/lib/menu/menu-item.ts","../../src/lib/menu/menu-directive.ts","../../src/lib/menu/menu-trigger.ts","../../src/lib/menu/menu-module.ts","../../src/lib/select/select-animations.ts","../../src/lib/list/selection-list.ts","../../src/lib/list/list-module.ts","../../src/lib/list/list.ts","../../src/lib/expansion/expansion-panel-header.ts","../../src/lib/expansion/accordion.ts","../../src/lib/expansion/expansion-module.ts","../../src/lib/grid-list/grid-tile.ts","../../src/lib/grid-list/tile-coordinator.ts","../../src/lib/grid-list/tile-styler.ts","../../src/lib/grid-list/grid-list.ts","../../src/lib/grid-list/grid-list-module.ts","../../src/lib/icon/icon-registry.ts","../../src/lib/icon/icon.ts","../../src/lib/icon/icon-module.ts","../../src/lib/datepicker/calendar.ts","../../src/lib/datepicker/datepicker-animations.ts","../../src/lib/datepicker/datepicker.ts","../../src/lib/datepicker/datepicker-input.ts","../../src/lib/datepicker/datepicker-toggle.ts","../../src/lib/datepicker/datepicker-module.ts","../../src/lib/divider/divider.ts","../../src/lib/divider/divider-module.ts","../../src/lib/expansion/accordion-base.ts","../../src/lib/expansion/expansion-panel-content.ts","../../src/lib/expansion/expansion-panel.ts","../../src/lib/datepicker/calendar-body.ts","../../src/lib/datepicker/month-view.ts","../../src/lib/datepicker/multi-year-view.ts","../../src/lib/datepicker/year-view.ts","../../src/lib/chips/chip-list.ts","../../src/lib/chips/chip-input.ts","../../src/lib/chips/chips-module.ts","../../src/lib/dialog/dialog-config.ts","../../src/lib/dialog/dialog-animations.ts","../../src/lib/dialog/dialog-container.ts","../../src/lib/dialog/dialog-ref.ts","../../src/lib/dialog/dialog.ts","../../src/lib/dialog/dialog-content-directives.ts","../../src/lib/dialog/dialog-module.ts","../../src/lib/input/autosize.ts","../../src/lib/input/input-value-accessor.ts","../../src/lib/input/input.ts","../../src/lib/input/input-module.ts","../../src/lib/datepicker/datepicker-intl.ts","../../src/lib/card/card.ts","../../src/lib/card/card-module.ts","../../src/lib/checkbox/checkbox-config.ts","../../src/lib/checkbox/checkbox.ts","../../src/lib/checkbox/checkbox-required-validator.ts","../../src/lib/checkbox/checkbox-module.ts","../../src/lib/chips/chip.ts","../../src/lib/chips/chip-default-options.ts","../../src/lib/button/button.ts","../../src/lib/button/button-module.ts","../../src/lib/button-toggle/button-toggle.ts","../../src/lib/button-toggle/button-toggle-module.ts","../../src/lib/autocomplete/autocomplete.ts","../../src/lib/autocomplete/autocomplete-origin.ts","../../src/lib/autocomplete/autocomplete-module.ts","../../src/lib/badge/badge.ts","../../src/lib/badge/badge-module.ts","../../src/lib/bottom-sheet/bottom-sheet-config.ts","../../src/lib/bottom-sheet/bottom-sheet-animations.ts","../../src/lib/bottom-sheet/bottom-sheet-container.ts","../../src/lib/bottom-sheet/bottom-sheet-module.ts","../../src/lib/bottom-sheet/bottom-sheet-ref.ts","../../src/lib/bottom-sheet/bottom-sheet.ts","../../src/lib/core/option/option.ts","../../src/lib/core/option/index.ts","../../src/lib/core/label/label-options.ts","../../src/lib/form-field/error.ts","../../src/lib/form-field/form-field-animations.ts","../../src/lib/form-field/form-field-control.ts","../../src/lib/form-field/hint.ts","../../src/lib/form-field/label.ts","../../src/lib/form-field/placeholder.ts","../../src/lib/form-field/prefix.ts","../../src/lib/form-field/suffix.ts","../../src/lib/form-field/form-field.ts","../../src/lib/form-field/form-field-module.ts","../../node_modules/tslib/tslib.es6.js","../../src/lib/core/common-behaviors/common-module.ts","../../src/lib/core/common-behaviors/disabled.ts","../../src/lib/core/common-behaviors/color.ts","../../src/lib/core/common-behaviors/disable-ripple.ts","../../src/lib/core/common-behaviors/tabindex.ts","../../src/lib/core/common-behaviors/error-state.ts","../../src/lib/core/common-behaviors/initialized.ts","../../src/lib/core/datetime/date-adapter.ts","../../src/lib/core/datetime/native-date-adapter.ts","../../src/lib/core/ripple/ripple-renderer.ts","../../src/lib/form-field/form-field-errors.ts","../../src/lib/input/input-errors.ts","../../src/lib/datepicker/datepicker-errors.ts","../../src/lib/menu/menu-errors.ts","../../src/lib/select/select-errors.ts","../../src/lib/sort/sort-errors.ts","../../src/lib/core/animation/animation.ts","../../src/lib/core/datetime/date-formats.ts","../../src/lib/core/datetime/native-date-formats.ts","../../src/lib/core/datetime/index.ts","../../src/lib/core/error/error-options.ts","../../src/lib/core/gestures/gesture-config.ts","../../src/lib/core/line/line.ts","../../src/lib/core/ripple/ripple-ref.ts","../../src/lib/core/ripple/ripple.ts","../../src/lib/core/ripple/index.ts","../../src/lib/core/selection/pseudo-checkbox/pseudo-checkbox.ts","../../src/lib/core/selection/index.ts","../../src/lib/core/option/optgroup.ts"],"sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Platform} from '@angular/cdk/platform';\nimport {DOCUMENT} from '@angular/common';\nimport {\n  AfterViewInit,\n  ChangeDetectionStrategy,\n  Component,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  Inject,\n  isDevMode,\n  QueryList,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {CanColor, CanColorCtor, mixinColor} from '@angular/material/core';\n\n\n// Boilerplate for applying mixins to MatToolbar.\n/** @docs-private */\nexport class MatToolbarBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatToolbarMixinBase: CanColorCtor & typeof MatToolbarBase =\n    mixinColor(MatToolbarBase);\n\n@Directive({\n  selector: 'mat-toolbar-row',\n  exportAs: 'matToolbarRow',\n  host: {'class': 'mat-toolbar-row'},\n})\nexport class MatToolbarRow {}\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-toolbar',\n  exportAs: 'matToolbar',\n  templateUrl: 'toolbar.html',\n  styleUrls: ['toolbar.css'],\n  inputs: ['color'],\n  host: {\n    'class': 'mat-toolbar',\n    '[class.mat-toolbar-multiple-rows]': '_toolbarRows.length > 0',\n    '[class.mat-toolbar-single-row]': '_toolbarRows.length === 0',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatToolbar extends _MatToolbarMixinBase implements CanColor, AfterViewInit {\n  private _document: Document;\n\n  /** Reference to all toolbar row elements that have been projected. */\n  @ContentChildren(MatToolbarRow) _toolbarRows: QueryList<MatToolbarRow>;\n\n  constructor(\n    elementRef: ElementRef,\n    private _platform: Platform,\n    @Inject(DOCUMENT) document?: any) {\n    super(elementRef);\n\n    // TODO: make the document a required param when doing breaking changes.\n    this._document = document;\n  }\n\n  ngAfterViewInit() {\n    if (!isDevMode() || !this._platform.isBrowser) {\n      return;\n    }\n\n    this._checkToolbarMixedModes();\n    this._toolbarRows.changes.subscribe(() => this._checkToolbarMixedModes());\n  }\n\n  /**\n   * Throws an exception when developers are attempting to combine the different toolbar row modes.\n   */\n  private _checkToolbarMixedModes() {\n    if (!this._toolbarRows.length) {\n      return;\n    }\n\n    // Check if there are any other DOM nodes that can display content but aren't inside of\n    // a <mat-toolbar-row> element.\n    const isCombinedUsage = [].slice.call(this._elementRef.nativeElement.childNodes)\n      .filter(node => !(node.classList && node.classList.contains('mat-toolbar-row')))\n      .filter(node => node.nodeType !== (this._document ? this._document.COMMENT_NODE : 8))\n      .some(node => node.textContent.trim());\n\n    if (isCombinedUsage) {\n      throwToolbarMixedModesError();\n    }\n  }\n}\n\n/**\n * Throws an exception when attempting to combine the different toolbar row modes.\n * @docs-private\n */\nexport function throwToolbarMixedModesError() {\n  throw Error('MatToolbar: Attempting to combine different toolbar modes. ' +\n    'Either specify multiple `<mat-toolbar-row>` elements explicitly or just place content ' +\n    'inside of a `<mat-toolbar>` for a single row.');\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatToolbar, MatToolbarRow} from './toolbar';\n\n\n@NgModule({\n  imports: [MatCommonModule],\n  exports: [MatToolbar, MatToolbarRow, MatCommonModule],\n  declarations: [MatToolbar, MatToolbarRow],\n})\nexport class MatToolbarModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {CdkTreeNodeOutlet} from '@angular/cdk/tree';\nimport {\n  Directive,\n  ViewContainerRef,\n} from '@angular/core';\n\n/**\n * Outlet for nested CdkNode. Put `[matTreeNodeOutlet]` on a tag to place children dataNodes\n * inside the outlet.\n */\n@Directive({\n  selector: '[matTreeNodeOutlet]'\n})\nexport class MatTreeNodeOutlet implements CdkTreeNodeOutlet {\n  constructor(public viewContainer: ViewContainerRef) {}\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CdkNestedTreeNode, CdkTree, CdkTreeNode, CdkTreeNodeDef} from '@angular/cdk/tree';\nimport {\n  AfterContentInit,\n  Attribute,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  Input,\n  IterableDiffers,\n  OnDestroy,\n  QueryList,\n} from '@angular/core';\nimport {\n  CanDisable, CanDisableCtor,\n  HasTabIndex,\n  HasTabIndexCtor,\n  mixinDisabled,\n  mixinTabIndex,\n} from '@angular/material/core';\nimport {MatTreeNodeOutlet} from './outlet';\n\n// TODO(devversion): workaround for https://github.com/angular/material2/issues/12760\nexport const _CdkTreeNodeDef = CdkTreeNodeDef;\n\nexport const _MatTreeNodeMixinBase: HasTabIndexCtor & CanDisableCtor & typeof CdkTreeNode =\n    mixinTabIndex(mixinDisabled(CdkTreeNode));\n\nexport const _MatNestedTreeNodeMixinBase:\n    HasTabIndexCtor & CanDisableCtor & typeof CdkNestedTreeNode =\n        mixinTabIndex(mixinDisabled(CdkNestedTreeNode));\n\n/**\n * Wrapper for the CdkTree node with Material design styles.\n */\n@Directive({\n  selector: 'mat-tree-node',\n  exportAs: 'matTreeNode',\n  inputs: ['disabled', 'tabIndex'],\n  host: {\n    '[attr.aria-expanded]': 'isExpanded',\n    '[attr.aria-level]': 'role === \"treeitem\" ? level : null',\n    '[attr.role]': 'role',\n    'class': 'mat-tree-node'\n  },\n  providers: [{provide: CdkTreeNode, useExisting: MatTreeNode}]\n})\nexport class MatTreeNode<T> extends _MatTreeNodeMixinBase<T>\n    implements CanDisable, HasTabIndex {\n  @Input() role: 'treeitem' | 'group' = 'treeitem';\n\n  constructor(protected _elementRef: ElementRef<HTMLElement>,\n              protected _tree: CdkTree<T>,\n              @Attribute('tabindex') tabIndex: string) {\n    super(_elementRef, _tree);\n\n    this.tabIndex = Number(tabIndex) || 0;\n  }\n}\n\n/**\n * Wrapper for the CdkTree node definition with Material design styles.\n */\n@Directive({\n  selector: '[matTreeNodeDef]',\n  inputs: [\n    'when: matTreeNodeDefWhen'\n  ],\n  providers: [{provide: CdkTreeNodeDef, useExisting: MatTreeNodeDef}]\n})\nexport class MatTreeNodeDef<T> extends _CdkTreeNodeDef<T> {\n  @Input('matTreeNode') data: T;\n}\n\n/**\n * Wrapper for the CdkTree nested node with Material design styles.\n */\n@Directive({\n  selector: 'mat-nested-tree-node',\n  exportAs: 'matNestedTreeNode',\n  host: {\n    '[attr.aria-expanded]': 'isExpanded',\n    '[attr.role]': 'role',\n    'class': 'mat-nested-tree-node',\n  },\n  inputs: ['disabled', 'tabIndex'],\n  providers: [\n    {provide: CdkNestedTreeNode, useExisting: MatNestedTreeNode},\n    {provide: CdkTreeNode, useExisting: MatNestedTreeNode}\n  ]\n})\nexport class MatNestedTreeNode<T> extends _MatNestedTreeNodeMixinBase<T>\n    implements AfterContentInit, CanDisable, HasTabIndex, OnDestroy {\n\n  @Input('matNestedTreeNode') node: T;\n\n  @ContentChildren(MatTreeNodeOutlet) nodeOutlet: QueryList<MatTreeNodeOutlet>;\n\n  constructor(protected _elementRef: ElementRef<HTMLElement>,\n              protected _tree: CdkTree<T>,\n              protected _differs: IterableDiffers,\n              @Attribute('tabindex') tabIndex: string) {\n    super(_elementRef, _tree, _differs);\n\n    this.tabIndex = Number(tabIndex) || 0;\n  }\n\n  // This is a workaround for https://github.com/angular/angular/issues/23091\n  // In aot mode, the lifecycle hooks from parent class are not called.\n  // TODO(tinayuangao): Remove when the angular issue #23091 is fixed\n  ngAfterContentInit() {\n    super.ngAfterContentInit();\n  }\n\n  ngOnDestroy() {\n    super.ngOnDestroy();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {CdkTreeNodePadding} from '@angular/cdk/tree';\nimport {Directive, Input} from '@angular/core';\n\n// TODO(devversion): workaround for https://github.com/angular/material2/issues/12760\nexport const _CdkTreeNodePadding = CdkTreeNodePadding;\n\n/**\n * Wrapper for the CdkTree padding with Material design styles.\n */\n@Directive({\n  selector: '[matTreeNodePadding]',\n  providers: [{provide: CdkTreeNodePadding, useExisting: MatTreeNodePadding}]\n})\nexport class MatTreeNodePadding<T> extends _CdkTreeNodePadding<T> {\n\n  /** The level of depth of the tree node. The padding will be `level * indent` pixels. */\n  @Input('matTreeNodePadding') level: number;\n\n  /** The indent for each level. Default number 40px from material design menu sub-menu spec. */\n  @Input('matTreeNodePaddingIndent') indent: number;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CdkTree} from '@angular/cdk/tree';\nimport {ChangeDetectionStrategy, Component, ViewChild, ViewEncapsulation} from '@angular/core';\nimport {MatTreeNodeOutlet} from './outlet';\n\n// TODO(devversion): workaround for https://github.com/angular/material2/issues/12760\nexport const _CdkTree = CdkTree;\n\n/**\n * Wrapper for the CdkTable with Material design styles.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-tree',\n  exportAs: 'matTree',\n  template: `<ng-container matTreeNodeOutlet></ng-container>`,\n  host: {\n    'class': 'mat-tree',\n    'role': 'tree',\n  },\n  styleUrls: ['tree.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  providers: [{provide: CdkTree, useExisting: MatTree}]\n})\nexport class MatTree<T> extends _CdkTree<T> {\n  // Outlets within the tree's template where the dataNodes will be inserted.\n  @ViewChild(MatTreeNodeOutlet) _nodeOutlet: MatTreeNodeOutlet;\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CdkTreeNodeToggle} from '@angular/cdk/tree';\nimport {Directive, Input} from '@angular/core';\n\n// TODO(devversion): workaround for https://github.com/angular/material2/issues/12760\nexport const _CdkTreeNodeToggle = CdkTreeNodeToggle;\n\n/**\n * Wrapper for the CdkTree's toggle with Material design styles.\n */\n@Directive({\n  selector: '[matTreeNodeToggle]',\n  host: {\n    '(click)': '_toggle($event)',\n  },\n  providers: [{provide: CdkTreeNodeToggle, useExisting: MatTreeNodeToggle}]\n})\nexport class MatTreeNodeToggle<T> extends _CdkTreeNodeToggle<T> {\n  @Input('matTreeNodeToggleRecursive') recursive: boolean = false;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\n\nimport {CdkTreeModule} from '@angular/cdk/tree';\nimport {CommonModule} from '@angular/common';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatNestedTreeNode, MatTreeNodeDef, MatTreeNode} from './node';\nimport {MatTree} from './tree';\nimport {MatTreeNodeToggle} from './toggle';\nimport {MatTreeNodeOutlet} from './outlet';\nimport {MatTreeNodePadding} from './padding';\n\nconst MAT_TREE_DIRECTIVES = [\n  MatNestedTreeNode,\n  MatTreeNodeDef,\n  MatTreeNodePadding,\n  MatTreeNodeToggle,\n  MatTree,\n  MatTreeNode,\n  MatTreeNodeOutlet\n];\n\n@NgModule({\n  imports: [CdkTreeModule, CommonModule, MatCommonModule],\n  exports: MAT_TREE_DIRECTIVES,\n  declarations: MAT_TREE_DIRECTIVES,\n})\nexport class MatTreeModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CollectionViewer, DataSource} from '@angular/cdk/collections';\nimport {FlatTreeControl, TreeControl} from '@angular/cdk/tree';\nimport {BehaviorSubject, merge, Observable} from 'rxjs';\nimport {map, take} from 'rxjs/operators';\n\n/**\n * Tree flattener to convert a normal type of node to node with children & level information.\n * Transform nested nodes of type `T` to flattened nodes of type `F`.\n *\n * For example, the input data of type `T` is nested, and contains its children data:\n *   SomeNode: {\n *     key: 'Fruits',\n *     children: [\n *       NodeOne: {\n *         key: 'Apple',\n *       },\n *       NodeTwo: {\n *        key: 'Pear',\n *      }\n *    ]\n *  }\n *  After flattener flatten the tree, the structure will become\n *  SomeNode: {\n *    key: 'Fruits',\n *    expandable: true,\n *    level: 1\n *  },\n *  NodeOne: {\n *    key: 'Apple',\n *    expandable: false,\n *    level: 2\n *  },\n *  NodeTwo: {\n *   key: 'Pear',\n *   expandable: false,\n *   level: 2\n * }\n * and the output flattened type is `F` with additional information.\n */\nexport class MatTreeFlattener<T, F> {\n\n  constructor(public transformFunction: (node: T, level: number) => F,\n              public getLevel: (node: F) => number,\n              public isExpandable: (node: F) => boolean,\n              public getChildren: (node: T) => Observable<T[]> | T[]) {}\n\n  _flattenNode(node: T, level: number,\n               resultNodes: F[], parentMap: boolean[]): F[] {\n    const flatNode = this.transformFunction(node, level);\n    resultNodes.push(flatNode);\n\n    if (this.isExpandable(flatNode)) {\n      const childrenNodes = this.getChildren(node);\n      if (Array.isArray(childrenNodes)) {\n        this._flattenChildren(childrenNodes, level, resultNodes, parentMap);\n      } else {\n        childrenNodes.pipe(take(1)).subscribe(children => {\n          this._flattenChildren(children, level, resultNodes, parentMap);\n        });\n      }\n    }\n    return resultNodes;\n  }\n\n  _flattenChildren(children: T[], level: number,\n                   resultNodes: F[], parentMap: boolean[]): void {\n    children.forEach((child, index) => {\n      let childParentMap: boolean[] = parentMap.slice();\n      childParentMap.push(index != children.length - 1);\n      this._flattenNode(child, level + 1, resultNodes, childParentMap);\n    });\n  }\n\n  /**\n   * Flatten a list of node type T to flattened version of node F.\n   * Please note that type T may be nested, and the length of `structuredData` may be different\n   * from that of returned list `F[]`.\n   */\n  flattenNodes(structuredData: T[]): F[] {\n    let resultNodes: F[] = [];\n    structuredData.forEach(node => this._flattenNode(node, 0, resultNodes, []));\n    return resultNodes;\n  }\n\n  /**\n   * Expand flattened node with current expansion status.\n   * The returned list may have different length.\n   */\n  expandFlattenedNodes(nodes: F[], treeControl: TreeControl<F>): F[] {\n    let results: F[] = [];\n    let currentExpand: boolean[] = [];\n    currentExpand[0] = true;\n\n    nodes.forEach(node => {\n      let expand = true;\n      for (let i = 0; i <= this.getLevel(node); i++) {\n        expand = expand && currentExpand[i];\n      }\n      if (expand) {\n        results.push(node);\n      }\n      if (this.isExpandable(node)) {\n        currentExpand[this.getLevel(node) + 1] = treeControl.isExpanded(node);\n      }\n    });\n    return results;\n  }\n}\n\n\n/**\n * Data source for flat tree.\n * The data source need to handle expansion/collapsion of the tree node and change the data feed\n * to `MatTree`.\n * The nested tree nodes of type `T` are flattened through `MatTreeFlattener`, and converted\n * to type `F` for `MatTree` to consume.\n */\nexport class MatTreeFlatDataSource<T, F> extends DataSource<F> {\n  _flattenedData = new BehaviorSubject<F[]>([]);\n\n  _expandedData = new BehaviorSubject<F[]>([]);\n\n  _data: BehaviorSubject<T[]>;\n  get data() { return this._data.value; }\n  set data(value: T[]) {\n    this._data.next(value);\n    this._flattenedData.next(this.treeFlattener.flattenNodes(this.data));\n    this.treeControl.dataNodes = this._flattenedData.value;\n  }\n\n  constructor(private treeControl: FlatTreeControl<F>,\n              private treeFlattener: MatTreeFlattener<T, F>,\n              initialData: T[] = []) {\n    super();\n    this._data = new BehaviorSubject<T[]>(initialData);\n  }\n\n  connect(collectionViewer: CollectionViewer): Observable<F[]> {\n    const changes = [\n      collectionViewer.viewChange,\n      this.treeControl.expansionModel.onChange!,\n      this._flattenedData\n    ];\n    return merge(...changes).pipe(map(() => {\n      this._expandedData.next(\n        this.treeFlattener.expandFlattenedNodes(this._flattenedData.value, this.treeControl));\n      return this._expandedData.value;\n    }));\n  }\n\n  disconnect() {\n    // no op\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CollectionViewer, DataSource} from '@angular/cdk/collections';\nimport {BehaviorSubject, merge, Observable} from 'rxjs';\nimport {map} from 'rxjs/operators';\n\n\n/**\n * Data source for nested tree.\n *\n * The data source for nested tree doesn't have to consider node flattener, or the way to expand\n * or collapse. The expansion/collapsion will be handled by TreeControl and each non-leaf node.\n */\nexport class MatTreeNestedDataSource<T> extends DataSource<T> {\n  _data = new BehaviorSubject<T[]>([]);\n\n  /**\n   * Data for the nested tree\n   */\n  get data() { return this._data.value; }\n  set data(value: T[]) { this._data.next(value); }\n\n  connect(collectionViewer: CollectionViewer): Observable<T[]> {\n    return merge(...[collectionViewer.viewChange, this._data])\n      .pipe(map(() => {\n        return this.data;\n      }));\n  }\n\n  disconnect() {\n    // no op\n  }\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Version} from '@angular/core';\n\n/** Current version of Angular Material. */\nexport const VERSION = new Version('7.0.0-beta.0-0988db9');\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {Directionality} from '@angular/cdk/bidi';\nimport {DOWN_ARROW, ENTER, ESCAPE, TAB, UP_ARROW} from '@angular/cdk/keycodes';\nimport {\n  FlexibleConnectedPositionStrategy,\n  Overlay,\n  OverlayConfig,\n  OverlayRef,\n  PositionStrategy,\n  ScrollStrategy,\n} from '@angular/cdk/overlay';\nimport {TemplatePortal} from '@angular/cdk/portal';\nimport {DOCUMENT} from '@angular/common';\nimport {filter, take, switchMap, delay, tap, map} from 'rxjs/operators';\nimport {\n  ChangeDetectorRef,\n  Directive,\n  ElementRef,\n  forwardRef,\n  Host,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  ViewContainerRef,\n} from '@angular/core';\nimport {ViewportRuler} from '@angular/cdk/scrolling';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {\n  _countGroupLabelsBeforeOption,\n  _getOptionScrollPosition,\n  MatOption,\n  MatOptionSelectionChange,\n} from '@angular/material/core';\nimport {MatFormField} from '@angular/material/form-field';\nimport {Subscription, defer, fromEvent, merge, of as observableOf, Subject, Observable} from 'rxjs';\nimport {MatAutocomplete} from './autocomplete';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {MatAutocompleteOrigin} from './autocomplete-origin';\n\n\n/**\n * The following style constants are necessary to save here in order\n * to properly calculate the scrollTop of the panel. Because we are not\n * actually focusing the active item, scroll must be handled manually.\n */\n\n/** The height of each autocomplete option. */\nexport const AUTOCOMPLETE_OPTION_HEIGHT = 48;\n\n/** The total height of the autocomplete panel. */\nexport const AUTOCOMPLETE_PANEL_HEIGHT = 256;\n\n/** Injection token that determines the scroll handling while the autocomplete panel is open. */\nexport const MAT_AUTOCOMPLETE_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mat-autocomplete-scroll-strategy');\n\n/** @docs-private */\nexport function MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY(overlay: Overlay): () => ScrollStrategy {\n  return () => overlay.scrollStrategies.reposition();\n}\n\n/** @docs-private */\nexport const MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY_PROVIDER = {\n  provide: MAT_AUTOCOMPLETE_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY,\n};\n\n/**\n * Provider that allows the autocomplete to register as a ControlValueAccessor.\n * @docs-private\n */\nexport const MAT_AUTOCOMPLETE_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatAutocompleteTrigger),\n  multi: true\n};\n\n/**\n * Creates an error to be thrown when attempting to use an autocomplete trigger without a panel.\n * @docs-private\n */\nexport function getMatAutocompleteMissingPanelError(): Error {\n  return Error('Attempting to open an undefined instance of `mat-autocomplete`. ' +\n               'Make sure that the id passed to the `matAutocomplete` is correct and that ' +\n               'you\\'re attempting to open it after the ngAfterContentInit hook.');\n}\n\n\n@Directive({\n  selector: `input[matAutocomplete], textarea[matAutocomplete]`,\n  host: {\n    '[attr.autocomplete]': 'autocompleteAttribute',\n    '[attr.role]': 'autocompleteDisabled ? null : \"combobox\"',\n    '[attr.aria-autocomplete]': 'autocompleteDisabled ? null : \"list\"',\n    '[attr.aria-activedescendant]': 'activeOption?.id',\n    '[attr.aria-expanded]': 'autocompleteDisabled ? null : panelOpen.toString()',\n    '[attr.aria-owns]': '(autocompleteDisabled || !panelOpen) ? null : autocomplete?.id',\n    // Note: we use `focusin`, as opposed to `focus`, in order to open the panel\n    // a little earlier. This avoids issues where IE delays the focusing of the input.\n    '(focusin)': '_handleFocus()',\n    '(blur)': '_onTouched()',\n    '(input)': '_handleInput($event)',\n    '(keydown)': '_handleKeydown($event)',\n  },\n  exportAs: 'matAutocompleteTrigger',\n  providers: [MAT_AUTOCOMPLETE_VALUE_ACCESSOR]\n})\nexport class MatAutocompleteTrigger implements ControlValueAccessor, OnDestroy {\n  private _overlayRef: OverlayRef | null;\n  private _portal: TemplatePortal;\n  private _componentDestroyed = false;\n  private _autocompleteDisabled = false;\n\n  /** Old value of the native input. Used to work around issues with the `input` event on IE. */\n  private _previousValue: string | number | null;\n\n  /** Strategy that is used to position the panel. */\n  private _positionStrategy: FlexibleConnectedPositionStrategy;\n\n  /** Whether or not the label state is being overridden. */\n  private _manuallyFloatingLabel = false;\n\n  /** The subscription for closing actions (some are bound to document). */\n  private _closingActionsSubscription: Subscription;\n\n  /** Subscription to viewport size changes. */\n  private _viewportSubscription = Subscription.EMPTY;\n\n  /**\n   * Whether the autocomplete can open the next time it is focused. Used to prevent a focused,\n   * closed autocomplete from being reopened if the user switches to another browser tab and then\n   * comes back.\n   */\n  private _canOpenOnNextFocus = true;\n\n  /** Stream of keyboard events that can close the panel. */\n  private readonly _closeKeyEventStream = new Subject<void>();\n\n  /**\n   * Event handler for when the window is blurred. Needs to be an\n   * arrow function in order to preserve the context.\n   */\n  private _windowBlurHandler = () => {\n    // If the user blurred the window while the autocomplete is focused, it means that it'll be\n    // refocused when they come back. In this case we want to skip the first focus event, if the\n    // pane was closed, in order to avoid reopening it unintentionally.\n    this._canOpenOnNextFocus =\n        document.activeElement !== this._element.nativeElement || this.panelOpen;\n  }\n\n  /** `View -> model callback called when value changes` */\n  _onChange: (value: any) => void = () => {};\n\n  /** `View -> model callback called when autocomplete has been touched` */\n  _onTouched = () => {};\n\n  /** The autocomplete panel to be attached to this trigger. */\n  @Input('matAutocomplete') autocomplete: MatAutocomplete;\n\n  /**\n   * Reference relative to which to position the autocomplete panel.\n   * Defaults to the autocomplete trigger element.\n   */\n  @Input('matAutocompleteConnectedTo') connectedTo: MatAutocompleteOrigin;\n\n  /**\n   * `autocomplete` attribute to be set on the input element.\n   * @docs-private\n   */\n  @Input('autocomplete') autocompleteAttribute: string = 'off';\n\n  /**\n   * Whether the autocomplete is disabled. When disabled, the element will\n   * act as a regular input and the user won't be able to open the panel.\n   */\n  @Input('matAutocompleteDisabled')\n  get autocompleteDisabled(): boolean { return this._autocompleteDisabled; }\n  set autocompleteDisabled(value: boolean) {\n    this._autocompleteDisabled = coerceBooleanProperty(value);\n  }\n\n  constructor(private _element: ElementRef<HTMLInputElement>, private _overlay: Overlay,\n              private _viewContainerRef: ViewContainerRef,\n              private _zone: NgZone,\n              private _changeDetectorRef: ChangeDetectorRef,\n              @Inject(MAT_AUTOCOMPLETE_SCROLL_STRATEGY) private _scrollStrategy,\n              @Optional() private _dir: Directionality,\n              @Optional() @Host() private _formField: MatFormField,\n              @Optional() @Inject(DOCUMENT) private _document: any,\n              // @breaking-change 7.0.0 Make `_viewportRuler` required.\n              private _viewportRuler?: ViewportRuler) {\n\n    if (typeof window !== 'undefined') {\n      _zone.runOutsideAngular(() => {\n        window.addEventListener('blur', this._windowBlurHandler);\n      });\n    }\n  }\n\n  ngOnDestroy() {\n    if (typeof window !== 'undefined') {\n      window.removeEventListener('blur', this._windowBlurHandler);\n    }\n\n    this._viewportSubscription.unsubscribe();\n    this._componentDestroyed = true;\n    this._destroyPanel();\n    this._closeKeyEventStream.complete();\n  }\n\n  /** Whether or not the autocomplete panel is open. */\n  get panelOpen(): boolean {\n    return this._overlayAttached && this.autocomplete.showPanel;\n  }\n  private _overlayAttached: boolean = false;\n\n  /** Opens the autocomplete suggestion panel. */\n  openPanel(): void {\n    this._attachOverlay();\n    this._floatLabel();\n  }\n\n  /** Closes the autocomplete suggestion panel. */\n  closePanel(): void {\n    this._resetLabel();\n\n    if (!this._overlayAttached) {\n      return;\n    }\n\n    if (this.panelOpen) {\n      // Only emit if the panel was visible.\n      this.autocomplete.closed.emit();\n    }\n\n    this.autocomplete._isOpen = this._overlayAttached = false;\n\n    if (this._overlayRef && this._overlayRef.hasAttached()) {\n      this._overlayRef.detach();\n      this._closingActionsSubscription.unsubscribe();\n    }\n\n    // Note that in some cases this can end up being called after the component is destroyed.\n    // Add a check to ensure that we don't try to run change detection on a destroyed view.\n    if (!this._componentDestroyed) {\n      // We need to trigger change detection manually, because\n      // `fromEvent` doesn't seem to do it at the proper time.\n      // This ensures that the label is reset when the\n      // user clicks outside.\n      this._changeDetectorRef.detectChanges();\n    }\n  }\n\n  /**\n   * Updates the position of the autocomplete suggestion panel to ensure that it fits all options\n   * within the viewport.\n   */\n  updatePosition(): void {\n    if (this._overlayAttached) {\n      this._overlayRef!.updatePosition();\n    }\n  }\n\n  /**\n   * A stream of actions that should close the autocomplete panel, including\n   * when an option is selected, on blur, and when TAB is pressed.\n   */\n  get panelClosingActions(): Observable<MatOptionSelectionChange|null> {\n    return merge(\n      this.optionSelections,\n      this.autocomplete._keyManager.tabOut.pipe(filter(() => this._overlayAttached)),\n      this._closeKeyEventStream,\n      this._getOutsideClickStream(),\n      this._overlayRef ?\n          this._overlayRef.detachments().pipe(filter(() => this._overlayAttached)) :\n          observableOf()\n    ).pipe(\n      // Normalize the output so we return a consistent type.\n      map(event => event instanceof MatOptionSelectionChange ? event : null)\n    );\n  }\n\n  /** Stream of autocomplete option selections. */\n  readonly optionSelections: Observable<MatOptionSelectionChange> = defer(() => {\n    if (this.autocomplete && this.autocomplete.options) {\n     return merge(...this.autocomplete.options.map(option => option.onSelectionChange));\n    }\n\n    // If there are any subscribers before `ngAfterViewInit`, the `autocomplete` will be undefined.\n    // Return a stream that we'll replace with the real one once everything is in place.\n    return this._zone.onStable\n        .asObservable()\n        .pipe(take(1), switchMap(() => this.optionSelections));\n  });\n\n  /** The currently active option, coerced to MatOption type. */\n  get activeOption(): MatOption | null {\n    if (this.autocomplete && this.autocomplete._keyManager) {\n      return this.autocomplete._keyManager.activeItem;\n    }\n\n    return null;\n  }\n\n  /** Stream of clicks outside of the autocomplete panel. */\n  private _getOutsideClickStream(): Observable<any> {\n    if (!this._document) {\n      return observableOf(null);\n    }\n\n    return merge(\n      fromEvent<MouseEvent>(this._document, 'click'),\n      fromEvent<TouchEvent>(this._document, 'touchend')\n    )\n    .pipe(filter(event => {\n      const clickTarget = event.target as HTMLElement;\n      const formField = this._formField ?\n          this._formField._elementRef.nativeElement : null;\n\n      return this._overlayAttached &&\n              clickTarget !== this._element.nativeElement &&\n              (!formField || !formField.contains(clickTarget)) &&\n              (!!this._overlayRef && !this._overlayRef.overlayElement.contains(clickTarget));\n    }));\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  writeValue(value: any): void {\n    Promise.resolve(null).then(() => this._setTriggerValue(value));\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnChange(fn: (value: any) => {}): void {\n    this._onChange = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnTouched(fn: () => {}) {\n    this._onTouched = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  setDisabledState(isDisabled: boolean) {\n    this._element.nativeElement.disabled = isDisabled;\n  }\n\n  _handleKeydown(event: KeyboardEvent): void {\n    const keyCode = event.keyCode;\n\n    // Prevent the default action on all escape key presses. This is here primarily to bring IE\n    // in line with other browsers. By default, pressing escape on IE will cause it to revert\n    // the input value to the one that it had on focus, however it won't dispatch any events\n    // which means that the model value will be out of sync with the view.\n    if (keyCode === ESCAPE) {\n      event.preventDefault();\n    }\n\n    // Close when pressing ESCAPE or ALT + UP_ARROW, based on the a11y guidelines.\n    // See: https://www.w3.org/TR/wai-aria-practices-1.1/#textbox-keyboard-interaction\n    if (this.panelOpen && (keyCode === ESCAPE || (keyCode === UP_ARROW && event.altKey))) {\n      this._resetActiveItem();\n      this._closeKeyEventStream.next();\n      event.stopPropagation();\n    } else if (this.activeOption && keyCode === ENTER && this.panelOpen) {\n      this.activeOption._selectViaInteraction();\n      this._resetActiveItem();\n      event.preventDefault();\n    } else if (this.autocomplete) {\n      const prevActiveItem = this.autocomplete._keyManager.activeItem;\n      const isArrowKey = keyCode === UP_ARROW || keyCode === DOWN_ARROW;\n\n      if (this.panelOpen || keyCode === TAB) {\n        this.autocomplete._keyManager.onKeydown(event);\n      } else if (isArrowKey && this._canOpen()) {\n        this.openPanel();\n      }\n\n      if (isArrowKey || this.autocomplete._keyManager.activeItem !== prevActiveItem) {\n        this._scrollToOption();\n      }\n    }\n  }\n\n  _handleInput(event: KeyboardEvent): void {\n    let target = event.target as HTMLInputElement;\n    let value: number | string | null = target.value;\n\n    // Based on `NumberValueAccessor` from forms.\n    if (target.type === 'number') {\n      value = value == '' ? null : parseFloat(value);\n    }\n\n    // If the input has a placeholder, IE will fire the `input` event on page load,\n    // focus and blur, in addition to when the user actually changed the value. To\n    // filter out all of the extra events, we save the value on focus and between\n    // `input` events, and we check whether it changed.\n    // See: https://connect.microsoft.com/IE/feedback/details/885747/\n    if (this._previousValue !== value && document.activeElement === event.target) {\n      this._previousValue = value;\n      this._onChange(value);\n\n      if (this._canOpen()) {\n        this.openPanel();\n      }\n    }\n  }\n\n  _handleFocus(): void {\n    if (!this._canOpenOnNextFocus) {\n      this._canOpenOnNextFocus = true;\n    } else if (this._canOpen()) {\n      this._previousValue = this._element.nativeElement.value;\n      this._attachOverlay();\n      this._floatLabel(true);\n    }\n  }\n\n  /**\n   * In \"auto\" mode, the label will animate down as soon as focus is lost.\n   * This causes the value to jump when selecting an option with the mouse.\n   * This method manually floats the label until the panel can be closed.\n   * @param shouldAnimate Whether the label should be animated when it is floated.\n   */\n  private _floatLabel(shouldAnimate = false): void {\n    if (this._formField && this._formField.floatLabel === 'auto') {\n      if (shouldAnimate) {\n        this._formField._animateAndLockLabel();\n      } else {\n        this._formField.floatLabel = 'always';\n      }\n\n      this._manuallyFloatingLabel = true;\n    }\n  }\n\n  /** If the label has been manually elevated, return it to its normal state. */\n  private _resetLabel(): void  {\n    if (this._manuallyFloatingLabel) {\n      this._formField.floatLabel = 'auto';\n      this._manuallyFloatingLabel = false;\n    }\n  }\n\n  /**\n   * Given that we are not actually focusing active options, we must manually adjust scroll\n   * to reveal options below the fold. First, we find the offset of the option from the top\n   * of the panel. If that offset is below the fold, the new scrollTop will be the offset -\n   * the panel height + the option height, so the active option will be just visible at the\n   * bottom of the panel. If that offset is above the top of the visible panel, the new scrollTop\n   * will become the offset. If that offset is visible within the panel already, the scrollTop is\n   * not adjusted.\n   */\n  private _scrollToOption(): void {\n    const index = this.autocomplete._keyManager.activeItemIndex || 0;\n    const labelCount = _countGroupLabelsBeforeOption(index,\n        this.autocomplete.options, this.autocomplete.optionGroups);\n\n    const newScrollPosition = _getOptionScrollPosition(\n      index + labelCount,\n      AUTOCOMPLETE_OPTION_HEIGHT,\n      this.autocomplete._getScrollTop(),\n      AUTOCOMPLETE_PANEL_HEIGHT\n    );\n\n    this.autocomplete._setScrollTop(newScrollPosition);\n  }\n\n  /**\n   * This method listens to a stream of panel closing actions and resets the\n   * stream every time the option list changes.\n   */\n  private _subscribeToClosingActions(): Subscription {\n    const firstStable = this._zone.onStable.asObservable().pipe(take(1));\n    const optionChanges = this.autocomplete.options.changes.pipe(\n      tap(() => this._positionStrategy.reapplyLastPosition()),\n      // Defer emitting to the stream until the next tick, because changing\n      // bindings in here will cause \"changed after checked\" errors.\n      delay(0)\n    );\n\n    // When the zone is stable initially, and when the option list changes...\n    return merge(firstStable, optionChanges)\n      .pipe(\n        // create a new stream of panelClosingActions, replacing any previous streams\n        // that were created, and flatten it so our stream only emits closing events...\n        switchMap(() => {\n          this._resetActiveItem();\n          this.autocomplete._setVisibility();\n\n          if (this.panelOpen) {\n            this._overlayRef!.updatePosition();\n          }\n\n          return this.panelClosingActions;\n        }),\n        // when the first closing event occurs...\n        take(1)\n      )\n      // set the value, close the panel, and complete.\n      .subscribe(event => this._setValueAndClose(event));\n  }\n\n  /** Destroys the autocomplete suggestion panel. */\n  private _destroyPanel(): void {\n    if (this._overlayRef) {\n      this.closePanel();\n      this._overlayRef.dispose();\n      this._overlayRef = null;\n    }\n  }\n\n  private _setTriggerValue(value: any): void {\n    const toDisplay = this.autocomplete && this.autocomplete.displayWith ?\n      this.autocomplete.displayWith(value) :\n      value;\n\n    // Simply falling back to an empty string if the display value is falsy does not work properly.\n    // The display value can also be the number zero and shouldn't fall back to an empty string.\n    const inputValue = toDisplay != null ? toDisplay : '';\n\n    // If it's used within a `MatFormField`, we should set it through the property so it can go\n    // through change detection.\n    if (this._formField) {\n      this._formField._control.value = inputValue;\n    } else {\n      this._element.nativeElement.value = inputValue;\n    }\n  }\n\n  /**\n   * This method closes the panel, and if a value is specified, also sets the associated\n   * control to that value. It will also mark the control as dirty if this interaction\n   * stemmed from the user.\n   */\n  private _setValueAndClose(event: MatOptionSelectionChange | null): void {\n    if (event && event.source) {\n      this._clearPreviousSelectedOption(event.source);\n      this._setTriggerValue(event.source.value);\n      this._onChange(event.source.value);\n      this._element.nativeElement.focus();\n      this.autocomplete._emitSelectEvent(event.source);\n    }\n\n    this.closePanel();\n  }\n\n  /**\n   * Clear any previous selected option and emit a selection change event for this option\n   */\n  private _clearPreviousSelectedOption(skip: MatOption) {\n    this.autocomplete.options.forEach(option => {\n      if (option != skip && option.selected) {\n        option.deselect();\n      }\n    });\n  }\n\n  private _attachOverlay(): void {\n    if (!this.autocomplete) {\n      throw getMatAutocompleteMissingPanelError();\n    }\n\n    if (!this._overlayRef) {\n      this._portal = new TemplatePortal(this.autocomplete.template, this._viewContainerRef);\n      this._overlayRef = this._overlay.create(this._getOverlayConfig());\n\n      if (this._viewportRuler) {\n        this._viewportSubscription = this._viewportRuler.change().subscribe(() => {\n          if (this.panelOpen && this._overlayRef) {\n            this._overlayRef.updateSize({width: this._getPanelWidth()});\n          }\n        });\n      }\n    } else {\n      // Update the panel width and direction, in case anything has changed.\n      this._overlayRef.updateSize({width: this._getPanelWidth()});\n    }\n\n    if (this._overlayRef && !this._overlayRef.hasAttached()) {\n      this._overlayRef.attach(this._portal);\n      this._closingActionsSubscription = this._subscribeToClosingActions();\n    }\n\n    const wasOpen = this.panelOpen;\n\n    this.autocomplete._setVisibility();\n    this.autocomplete._isOpen = this._overlayAttached = true;\n\n    // We need to do an extra `panelOpen` check in here, because the\n    // autocomplete won't be shown if there are no options.\n    if (this.panelOpen && wasOpen !== this.panelOpen) {\n      this.autocomplete.opened.emit();\n    }\n  }\n\n  private _getOverlayConfig(): OverlayConfig {\n    return new OverlayConfig({\n      positionStrategy: this._getOverlayPosition(),\n      scrollStrategy: this._scrollStrategy(),\n      width: this._getPanelWidth(),\n      direction: this._dir\n    });\n  }\n\n  private _getOverlayPosition(): PositionStrategy {\n    this._positionStrategy = this._overlay.position()\n      .flexibleConnectedTo(this._getConnectedElement())\n      .withFlexibleDimensions(false)\n      .withPush(false)\n      .withPositions([\n        {\n          originX: 'start',\n          originY: 'bottom',\n          overlayX: 'start',\n          overlayY: 'top'\n        },\n        {\n          originX: 'start',\n          originY: 'top',\n          overlayX: 'start',\n          overlayY: 'bottom',\n\n          // The overlay edge connected to the trigger should have squared corners, while\n          // the opposite end has rounded corners. We apply a CSS class to swap the\n          // border-radius based on the overlay position.\n          panelClass: 'mat-autocomplete-panel-above'\n        }\n      ]);\n\n    return this._positionStrategy;\n  }\n\n  private _getConnectedElement(): ElementRef {\n    if (this.connectedTo) {\n      return this.connectedTo.elementRef;\n    }\n\n    return this._formField ? this._formField.getConnectedOverlayOrigin() : this._element;\n  }\n\n  private _getPanelWidth(): number | string {\n    return this.autocomplete.panelWidth || this._getHostWidth();\n  }\n\n  /** Returns the width of the input element, so the panel width can match it. */\n  private _getHostWidth(): number {\n    return this._getConnectedElement().nativeElement.getBoundingClientRect().width;\n  }\n\n  /**\n   * Resets the active item to -1 so arrow events will activate the\n   * correct options, or to 0 if the consumer opted into it.\n   */\n  private _resetActiveItem(): void {\n    this.autocomplete._keyManager.setActiveItem(this.autocomplete.autoActiveFirstOption ? 0 : -1);\n  }\n\n  /** Determines whether the panel can be opened. */\n  private _canOpen(): boolean {\n    const element = this._element.nativeElement;\n    return !element.readOnly && !element.disabled && !this._autocompleteDisabled;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * When constructing a Date, the month is zero-based. This can be confusing, since people are\n * used to seeing them one-based. So we create these aliases to make writing the tests easier.\n */\nexport const JAN = 0, FEB = 1, MAR = 2, APR = 3, MAY = 4, JUN = 5, JUL = 6, AUG = 7, SEP = 8,\n    OCT = 9, NOV = 10, DEC = 11;\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  animateChild,\n  group,\n  state,\n  style,\n  transition,\n  trigger,\n  query,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/** Time and timing curve for expansion panel animations. */\nexport const EXPANSION_PANEL_ANIMATION_TIMING = '225ms cubic-bezier(0.4,0.0,0.2,1)';\n\n/** Animations used by the Material expansion panel. */\nexport const matExpansionAnimations: {\n  readonly indicatorRotate: AnimationTriggerMetadata;\n  readonly expansionHeaderHeight: AnimationTriggerMetadata;\n  readonly bodyExpansion: AnimationTriggerMetadata;\n} = {\n  /** Animation that rotates the indicator arrow. */\n  indicatorRotate: trigger('indicatorRotate', [\n    state('collapsed', style({transform: 'rotate(0deg)'})),\n    state('expanded', style({transform: 'rotate(180deg)'})),\n    transition('expanded <=> collapsed', animate(EXPANSION_PANEL_ANIMATION_TIMING)),\n  ]),\n\n  /** Animation that expands and collapses the panel header height. */\n  expansionHeaderHeight: trigger('expansionHeight', [\n    state('collapsed', style({\n      height: '{{collapsedHeight}}',\n    }), {\n      params: {collapsedHeight: '48px'},\n    }),\n    state('expanded', style({\n      height: '{{expandedHeight}}'\n    }), {\n      params: {expandedHeight: '64px'}\n    }),\n    transition('expanded <=> collapsed', group([\n      query('@indicatorRotate', animateChild(), {optional: true}),\n      animate(EXPANSION_PANEL_ANIMATION_TIMING),\n    ])),\n  ]),\n\n  /** Animation that expands and collapses the panel content. */\n  bodyExpansion: trigger('bodyExpansion', [\n    state('collapsed', style({height: '0px', visibility: 'hidden'})),\n    state('expanded', style({height: '*', visibility: 'visible'})),\n    transition('expanded <=> collapsed', animate(EXPANSION_PANEL_ANIMATION_TIMING)),\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ActiveDescendantKeyManager} from '@angular/cdk/a11y';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {SelectionModel} from '@angular/cdk/collections';\nimport {\n  A,\n  DOWN_ARROW,\n  END,\n  ENTER,\n  HOME,\n  LEFT_ARROW,\n  RIGHT_ARROW,\n  SPACE,\n  UP_ARROW,\n} from '@angular/cdk/keycodes';\nimport {\n  CdkConnectedOverlay,\n  Overlay,\n  RepositionScrollStrategy,\n  ScrollStrategy,\n} from '@angular/cdk/overlay';\nimport {ViewportRuler} from '@angular/cdk/scrolling';\nimport {\n  AfterContentInit,\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  ContentChildren,\n  Directive,\n  DoCheck,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  InjectionToken,\n  Input,\n  isDevMode,\n  NgZone,\n  OnChanges,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Output,\n  QueryList,\n  Self,\n  SimpleChanges,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {ControlValueAccessor, FormGroupDirective, NgControl, NgForm} from '@angular/forms';\nimport {\n  _countGroupLabelsBeforeOption,\n  _getOptionScrollPosition,\n  CanDisable,\n  CanDisableCtor,\n  CanDisableRipple,\n  CanDisableRippleCtor,\n  CanUpdateErrorState,\n  CanUpdateErrorStateCtor,\n  ErrorStateMatcher,\n  HasTabIndex,\n  HasTabIndexCtor,\n  MAT_OPTION_PARENT_COMPONENT,\n  MatOptgroup,\n  MatOption,\n  MatOptionSelectionChange,\n  mixinDisabled,\n  mixinDisableRipple,\n  mixinErrorState,\n  mixinTabIndex,\n} from '@angular/material/core';\nimport {MatFormField, MatFormFieldControl} from '@angular/material/form-field';\nimport {defer, merge, Observable, Subject} from 'rxjs';\nimport {\n  distinctUntilChanged,\n  filter,\n  map,\n  startWith,\n  switchMap,\n  take,\n  takeUntil,\n} from 'rxjs/operators';\nimport {matSelectAnimations} from './select-animations';\nimport {\n  getMatSelectDynamicMultipleError,\n  getMatSelectNonArrayValueError,\n  getMatSelectNonFunctionValueError,\n} from './select-errors';\n\n\nlet nextUniqueId = 0;\n\n/**\n * The following style constants are necessary to save here in order\n * to properly calculate the alignment of the selected option over\n * the trigger element.\n */\n\n/** The max height of the select's overlay panel */\nexport const SELECT_PANEL_MAX_HEIGHT = 256;\n\n/** The panel's padding on the x-axis */\nexport const SELECT_PANEL_PADDING_X = 16;\n\n/** The panel's x axis padding if it is indented (e.g. there is an option group). */\nexport const SELECT_PANEL_INDENT_PADDING_X = SELECT_PANEL_PADDING_X * 2;\n\n/** The height of the select items in `em` units. */\nexport const SELECT_ITEM_HEIGHT_EM = 3;\n\n// TODO(josephperrott): Revert to a constant after 2018 spec updates are fully merged.\n/**\n * Distance between the panel edge and the option text in\n * multi-selection mode.\n *\n * Calculated as:\n * (SELECT_PANEL_PADDING_X * 1.5) + 20 = 44\n * The padding is multiplied by 1.5 because the checkbox's margin is half the padding.\n * The checkbox width is 20px.\n */\nexport let SELECT_MULTIPLE_PANEL_PADDING_X = 0;\n\n/**\n * The select panel will only \"fit\" inside the viewport if it is positioned at\n * this value or more away from the viewport boundary.\n */\nexport const SELECT_PANEL_VIEWPORT_PADDING = 8;\n\n/** Injection token that determines the scroll handling while a select is open. */\nexport const MAT_SELECT_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mat-select-scroll-strategy');\n\n/** @docs-private */\nexport function MAT_SELECT_SCROLL_STRATEGY_PROVIDER_FACTORY(overlay: Overlay):\n    () => RepositionScrollStrategy {\n  return () => overlay.scrollStrategies.reposition();\n}\n\n/** @docs-private */\nexport const MAT_SELECT_SCROLL_STRATEGY_PROVIDER = {\n  provide: MAT_SELECT_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_SELECT_SCROLL_STRATEGY_PROVIDER_FACTORY,\n};\n\n/** Change event object that is emitted when the select value has changed. */\nexport class MatSelectChange {\n  constructor(\n    /** Reference to the select that emitted the change event. */\n    public source: MatSelect,\n    /** Current value of the select that emitted the event. */\n    public value: any) { }\n}\n\n// Boilerplate for applying mixins to MatSelect.\n/** @docs-private */\nexport class MatSelectBase {\n  constructor(public _elementRef: ElementRef,\n              public _defaultErrorStateMatcher: ErrorStateMatcher,\n              public _parentForm: NgForm,\n              public _parentFormGroup: FormGroupDirective,\n              public ngControl: NgControl) {}\n}\nexport const _MatSelectMixinBase:\n    CanDisableCtor &\n    HasTabIndexCtor &\n    CanDisableRippleCtor &\n    CanUpdateErrorStateCtor &\n    typeof MatSelectBase =\n        mixinDisableRipple(mixinTabIndex(mixinDisabled(mixinErrorState(MatSelectBase))));\n\n\n/**\n * Allows the user to customize the trigger that is displayed when the select has a value.\n */\n@Directive({\n  selector: 'mat-select-trigger'\n})\nexport class MatSelectTrigger {}\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-select',\n  exportAs: 'matSelect',\n  templateUrl: 'select.html',\n  styleUrls: ['select.css'],\n  inputs: ['disabled', 'disableRipple', 'tabIndex'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {\n    'role': 'listbox',\n    '[attr.id]': 'id',\n    '[attr.tabindex]': 'tabIndex',\n    '[attr.aria-label]': '_getAriaLabel()',\n    '[attr.aria-labelledby]': '_getAriaLabelledby()',\n    '[attr.aria-required]': 'required.toString()',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.aria-invalid]': 'errorState',\n    '[attr.aria-owns]': 'panelOpen ? _optionIds : null',\n    '[attr.aria-multiselectable]': 'multiple',\n    '[attr.aria-describedby]': '_ariaDescribedby || null',\n    '[attr.aria-activedescendant]': '_getAriaActiveDescendant()',\n    '[class.mat-select-disabled]': 'disabled',\n    '[class.mat-select-invalid]': 'errorState',\n    '[class.mat-select-required]': 'required',\n    '[class.mat-select-empty]': 'empty',\n    'class': 'mat-select',\n    '(keydown)': '_handleKeydown($event)',\n    '(focus)': '_onFocus()',\n    '(blur)': '_onBlur()',\n  },\n  animations: [\n    matSelectAnimations.transformPanel\n  ],\n  providers: [\n    {provide: MatFormFieldControl, useExisting: MatSelect},\n    {provide: MAT_OPTION_PARENT_COMPONENT, useExisting: MatSelect}\n  ],\n})\nexport class MatSelect extends _MatSelectMixinBase implements AfterContentInit, OnChanges,\n    OnDestroy, OnInit, DoCheck, ControlValueAccessor, CanDisable, HasTabIndex,\n    MatFormFieldControl<any>, CanUpdateErrorState, CanDisableRipple {\n  /** Whether or not the overlay panel is open. */\n  private _panelOpen = false;\n\n  /** Whether filling out the select is required in the form. */\n  private _required: boolean = false;\n\n  /** The scroll position of the overlay panel, calculated to center the selected option. */\n  private _scrollTop = 0;\n\n  /** The placeholder displayed in the trigger of the select. */\n  private _placeholder: string;\n\n  /** Whether the component is in multiple selection mode. */\n  private _multiple: boolean = false;\n\n  /** Comparison function to specify which option is displayed. Defaults to object equality. */\n  private _compareWith = (o1: any, o2: any) => o1 === o2;\n\n  /** Unique id for this input. */\n  private _uid = `mat-select-${nextUniqueId++}`;\n\n  /** Emits whenever the component is destroyed. */\n  private readonly _destroy = new Subject<void>();\n\n  /** The last measured value for the trigger's client bounding rect. */\n  _triggerRect: ClientRect;\n\n  /** The aria-describedby attribute on the select for improved a11y. */\n  _ariaDescribedby: string;\n\n  /** The cached font-size of the trigger element. */\n  _triggerFontSize = 0;\n\n  /** Deals with the selection logic. */\n  _selectionModel: SelectionModel<MatOption>;\n\n  /** Manages keyboard events for options in the panel. */\n  _keyManager: ActiveDescendantKeyManager<MatOption>;\n\n  /** `View -> model callback called when value changes` */\n  _onChange: (value: any) => void = () => {};\n\n  /** `View -> model callback called when select has been touched` */\n  _onTouched = () => {};\n\n  /** The IDs of child options to be passed to the aria-owns attribute. */\n  _optionIds: string = '';\n\n  /** The value of the select panel's transform-origin property. */\n  _transformOrigin: string = 'top';\n\n  /** Emits when the panel element is finished transforming in. */\n  _panelDoneAnimatingStream = new Subject<string>();\n\n  /** Strategy that will be used to handle scrolling while the select panel is open. */\n  _scrollStrategy = this._scrollStrategyFactory();\n\n  /**\n   * The y-offset of the overlay panel in relation to the trigger's top start corner.\n   * This must be adjusted to align the selected option text over the trigger text.\n   * when the panel opens. Will change based on the y-position of the selected option.\n   */\n  _offsetY = 0;\n\n  /**\n   * This position config ensures that the top \"start\" corner of the overlay\n   * is aligned with with the top \"start\" of the origin by default (overlapping\n   * the trigger completely). If the panel cannot fit below the trigger, it\n   * will fall back to a position above the trigger.\n   */\n  _positions = [\n    {\n      originX: 'start',\n      originY: 'top',\n      overlayX: 'start',\n      overlayY: 'top',\n    },\n    {\n      originX: 'start',\n      originY: 'bottom',\n      overlayX: 'start',\n      overlayY: 'bottom',\n    },\n  ];\n\n  /** Whether the component is disabling centering of the active option over the trigger. */\n  private _disableOptionCentering: boolean = false;\n\n  /** Whether the select is focused. */\n  get focused(): boolean {\n    return this._focused || this._panelOpen;\n  }\n  /**\n   * @deprecated Setter to be removed as this property is intended to be readonly.\n   * @breaking-change 8.0.0\n   */\n  set focused(value: boolean) {\n    this._focused = value;\n  }\n  private _focused = false;\n\n  /** A name for this control that can be used by `mat-form-field`. */\n  controlType = 'mat-select';\n\n  /** Trigger that opens the select. */\n  @ViewChild('trigger') trigger: ElementRef;\n\n  /** Panel containing the select options. */\n  @ViewChild('panel') panel: ElementRef;\n\n  /** Overlay pane containing the options. */\n  @ViewChild(CdkConnectedOverlay) overlayDir: CdkConnectedOverlay;\n\n  /** All of the defined select options. */\n  @ContentChildren(MatOption, { descendants: true }) options: QueryList<MatOption>;\n\n  /** All of the defined groups of options. */\n  @ContentChildren(MatOptgroup) optionGroups: QueryList<MatOptgroup>;\n\n  /** Classes to be passed to the select panel. Supports the same syntax as `ngClass`. */\n  @Input() panelClass: string|string[]|Set<string>|{[key: string]: any};\n\n  /** User-supplied override of the trigger element. */\n  @ContentChild(MatSelectTrigger) customTrigger: MatSelectTrigger;\n\n  /** Placeholder to be shown if no value has been selected. */\n  @Input()\n  get placeholder(): string { return this._placeholder; }\n  set placeholder(value: string) {\n    this._placeholder = value;\n    this.stateChanges.next();\n  }\n\n  /** Whether the component is required. */\n  @Input()\n  get required(): boolean { return this._required; }\n  set required(value: boolean) {\n    this._required = coerceBooleanProperty(value);\n    this.stateChanges.next();\n  }\n\n  /** Whether the user should be allowed to select multiple options. */\n  @Input()\n  get multiple(): boolean { return this._multiple; }\n  set multiple(value: boolean) {\n    if (this._selectionModel) {\n      throw getMatSelectDynamicMultipleError();\n    }\n\n    this._multiple = coerceBooleanProperty(value);\n  }\n\n  /** Whether to center the active option over the trigger. */\n  @Input()\n  get disableOptionCentering(): boolean { return this._disableOptionCentering; }\n  set disableOptionCentering(value: boolean) {\n    this._disableOptionCentering = coerceBooleanProperty(value);\n  }\n\n  /**\n   * Function to compare the option values with the selected values. The first argument\n   * is a value from an option. The second is a value from the selection. A boolean\n   * should be returned.\n   */\n  @Input()\n  get compareWith() { return this._compareWith; }\n  set compareWith(fn: (o1: any, o2: any) => boolean) {\n    if (typeof fn !== 'function') {\n      throw getMatSelectNonFunctionValueError();\n    }\n    this._compareWith = fn;\n    if (this._selectionModel) {\n      // A different comparator means the selection could change.\n      this._initializeSelection();\n    }\n  }\n\n  /** Value of the select control. */\n  @Input()\n  get value(): any { return this._value; }\n  set value(newValue: any) {\n    if (newValue !== this._value) {\n      this.writeValue(newValue);\n      this._value = newValue;\n    }\n  }\n  private _value: any;\n\n  /** Aria label of the select. If not specified, the placeholder will be used as label. */\n  @Input('aria-label') ariaLabel: string = '';\n\n  /** Input that can be used to specify the `aria-labelledby` attribute. */\n  @Input('aria-labelledby') ariaLabelledby: string;\n\n  /** Object used to control when error messages are shown. */\n  @Input() errorStateMatcher: ErrorStateMatcher;\n\n  /**\n   * Function used to sort the values in a select in multiple mode.\n   * Follows the same logic as `Array.prototype.sort`.\n   */\n  @Input() sortComparator: (a: MatOption, b: MatOption, options: MatOption[]) => number;\n\n  /** Unique id of the element. */\n  @Input()\n  get id(): string { return this._id; }\n  set id(value: string) {\n    this._id = value || this._uid;\n    this.stateChanges.next();\n  }\n  private _id: string;\n\n  /** Combined stream of all of the child options' change events. */\n  readonly optionSelectionChanges: Observable<MatOptionSelectionChange> = defer(() => {\n    if (this.options) {\n      return merge(...this.options.map(option => option.onSelectionChange));\n    }\n\n    return this._ngZone.onStable\n      .asObservable()\n      .pipe(take(1), switchMap(() => this.optionSelectionChanges));\n  });\n\n  /** Event emitted when the select panel has been toggled. */\n  @Output() readonly openedChange: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n  /** Event emitted when the select has been opened. */\n  @Output('opened') readonly _openedStream: Observable<void> =\n      this.openedChange.pipe(filter(o => o), map(() => {}));\n\n  /** Event emitted when the select has been closed. */\n  @Output('closed') readonly _closedStream: Observable<void> =\n      this.openedChange.pipe(filter(o => !o), map(() => {}));\n\n   /** Event emitted when the selected value has been changed by the user. */\n  @Output() readonly selectionChange: EventEmitter<MatSelectChange> =\n      new EventEmitter<MatSelectChange>();\n\n  /**\n   * Event that emits whenever the raw value of the select changes. This is here primarily\n   * to facilitate the two-way binding for the `value` input.\n   * @docs-private\n   */\n  @Output() readonly valueChange: EventEmitter<any> = new EventEmitter<any>();\n\n  constructor(\n    private _viewportRuler: ViewportRuler,\n    private _changeDetectorRef: ChangeDetectorRef,\n    private _ngZone: NgZone,\n    _defaultErrorStateMatcher: ErrorStateMatcher,\n    elementRef: ElementRef,\n    @Optional() private _dir: Directionality,\n    @Optional() _parentForm: NgForm,\n    @Optional() _parentFormGroup: FormGroupDirective,\n    @Optional() private _parentFormField: MatFormField,\n    @Self() @Optional() public ngControl: NgControl,\n    @Attribute('tabindex') tabIndex: string,\n    @Inject(MAT_SELECT_SCROLL_STRATEGY) private _scrollStrategyFactory) {\n    super(elementRef, _defaultErrorStateMatcher, _parentForm,\n          _parentFormGroup, ngControl);\n\n    if (this.ngControl) {\n      // Note: we provide the value accessor through here, instead of\n      // the `providers` to avoid running into a circular import.\n      this.ngControl.valueAccessor = this;\n    }\n\n    this.tabIndex = parseInt(tabIndex) || 0;\n\n    // Force setter to be called in case id was not specified.\n    this.id = this.id;\n  }\n\n  ngOnInit() {\n    this._selectionModel = new SelectionModel<MatOption>(this.multiple);\n    this.stateChanges.next();\n\n    // We need `distinctUntilChanged` here, because some browsers will\n    // fire the animation end event twice for the same animation. See:\n    // https://github.com/angular/angular/issues/24084\n    this._panelDoneAnimatingStream\n      .pipe(distinctUntilChanged(), takeUntil(this._destroy))\n      .subscribe(() => {\n        if (this.panelOpen) {\n          this._scrollTop = 0;\n          this.openedChange.emit(true);\n        } else {\n          this.openedChange.emit(false);\n          this.overlayDir.offsetX = 0;\n          this._changeDetectorRef.markForCheck();\n        }\n      });\n  }\n\n  ngAfterContentInit() {\n    this._initKeyManager();\n\n    this._selectionModel.onChange!.pipe(takeUntil(this._destroy)).subscribe(event => {\n      event.added.forEach(option => option.select());\n      event.removed.forEach(option => option.deselect());\n    });\n\n    this.options.changes.pipe(startWith(null), takeUntil(this._destroy)).subscribe(() => {\n      this._resetOptions();\n      this._initializeSelection();\n    });\n  }\n\n  ngDoCheck() {\n    if (this.ngControl) {\n      this.updateErrorState();\n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    // Updating the disabled state is handled by `mixinDisabled`, but we need to additionally let\n    // the parent form field know to run change detection when the disabled state changes.\n    if (changes.disabled) {\n      this.stateChanges.next();\n    }\n  }\n\n  ngOnDestroy() {\n    this._destroy.next();\n    this._destroy.complete();\n    this.stateChanges.complete();\n  }\n\n  /** Toggles the overlay panel open or closed. */\n  toggle(): void {\n    this.panelOpen ? this.close() : this.open();\n  }\n\n  /** Opens the overlay panel. */\n  open(): void {\n    if (this.disabled || !this.options || !this.options.length || this._panelOpen) {\n      return;\n    }\n\n    this._triggerRect = this.trigger.nativeElement.getBoundingClientRect();\n    // Note: The computed font-size will be a string pixel value (e.g. \"16px\").\n    // `parseInt` ignores the trailing 'px' and converts this to a number.\n    this._triggerFontSize = parseInt(getComputedStyle(this.trigger.nativeElement)['font-size']);\n\n    this._panelOpen = true;\n    this._keyManager.withHorizontalOrientation(null);\n    this._calculateOverlayPosition();\n    this._highlightCorrectOption();\n    this._changeDetectorRef.markForCheck();\n\n    // Set the font size on the panel element once it exists.\n    this._ngZone.onStable.asObservable().pipe(take(1)).subscribe(() => {\n      if (this._triggerFontSize && this.overlayDir.overlayRef &&\n          this.overlayDir.overlayRef.overlayElement) {\n        this.overlayDir.overlayRef.overlayElement.style.fontSize = `${this._triggerFontSize}px`;\n      }\n    });\n  }\n\n  /** Closes the overlay panel and focuses the host element. */\n  close(): void {\n    if (this._panelOpen) {\n      this._panelOpen = false;\n      this._keyManager.withHorizontalOrientation(this._isRtl() ? 'rtl' : 'ltr');\n      this._changeDetectorRef.markForCheck();\n      this._onTouched();\n    }\n  }\n\n  /**\n   * Sets the select's value. Part of the ControlValueAccessor interface\n   * required to integrate with Angular's core forms API.\n   *\n   * @param value New value to be written to the model.\n   */\n  writeValue(value: any): void {\n    if (this.options) {\n      this._setSelectionByValue(value);\n    }\n  }\n\n  /**\n   * Saves a callback function to be invoked when the select's value\n   * changes from user input. Part of the ControlValueAccessor interface\n   * required to integrate with Angular's core forms API.\n   *\n   * @param fn Callback to be triggered when the value changes.\n   */\n  registerOnChange(fn: (value: any) => void): void {\n    this._onChange = fn;\n  }\n\n  /**\n   * Saves a callback function to be invoked when the select is blurred\n   * by the user. Part of the ControlValueAccessor interface required\n   * to integrate with Angular's core forms API.\n   *\n   * @param fn Callback to be triggered when the component has been touched.\n   */\n  registerOnTouched(fn: () => {}): void {\n    this._onTouched = fn;\n  }\n\n  /**\n   * Disables the select. Part of the ControlValueAccessor interface required\n   * to integrate with Angular's core forms API.\n   *\n   * @param isDisabled Sets whether the component is disabled.\n   */\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n    this._changeDetectorRef.markForCheck();\n    this.stateChanges.next();\n  }\n\n  /** Whether or not the overlay panel is open. */\n  get panelOpen(): boolean {\n    return this._panelOpen;\n  }\n\n  /** The currently selected option. */\n  get selected(): MatOption | MatOption[] {\n    return this.multiple ? this._selectionModel.selected : this._selectionModel.selected[0];\n  }\n\n  /** The value displayed in the trigger. */\n  get triggerValue(): string {\n    if (this.empty) {\n      return '';\n    }\n\n    if (this._multiple) {\n      const selectedOptions = this._selectionModel.selected.map(option => option.viewValue);\n\n      if (this._isRtl()) {\n        selectedOptions.reverse();\n      }\n\n      // TODO(crisbeto): delimiter should be configurable for proper localization.\n      return selectedOptions.join(', ');\n    }\n\n    return this._selectionModel.selected[0].viewValue;\n  }\n\n  /** Whether the element is in RTL mode. */\n  _isRtl(): boolean {\n    return this._dir ? this._dir.value === 'rtl' : false;\n  }\n\n  /** Handles all keydown events on the select. */\n  _handleKeydown(event: KeyboardEvent): void {\n    if (!this.disabled) {\n      this.panelOpen ? this._handleOpenKeydown(event) : this._handleClosedKeydown(event);\n    }\n  }\n\n  /** Handles keyboard events while the select is closed. */\n  private _handleClosedKeydown(event: KeyboardEvent): void {\n    const keyCode = event.keyCode;\n    const isArrowKey = keyCode === DOWN_ARROW || keyCode === UP_ARROW ||\n        keyCode === LEFT_ARROW || keyCode === RIGHT_ARROW;\n    const isOpenKey = keyCode === ENTER || keyCode === SPACE;\n\n    // Open the select on ALT + arrow key to match the native <select>\n    if (isOpenKey || ((this.multiple || event.altKey) && isArrowKey)) {\n      event.preventDefault(); // prevents the page from scrolling down when pressing space\n      this.open();\n    } else if (!this.multiple) {\n      this._keyManager.onKeydown(event);\n    }\n  }\n\n  /** Handles keyboard events when the selected is open. */\n  private _handleOpenKeydown(event: KeyboardEvent): void {\n    const keyCode = event.keyCode;\n    const isArrowKey = keyCode === DOWN_ARROW || keyCode === UP_ARROW;\n    const manager = this._keyManager;\n\n    if (keyCode === HOME || keyCode === END) {\n      event.preventDefault();\n      keyCode === HOME ? manager.setFirstItemActive() : manager.setLastItemActive();\n    } else if (isArrowKey && event.altKey) {\n      // Close the select on ALT + arrow key to match the native <select>\n      event.preventDefault();\n      this.close();\n    } else if ((keyCode === ENTER || keyCode === SPACE) && manager.activeItem) {\n      event.preventDefault();\n      manager.activeItem._selectViaInteraction();\n    } else if (this._multiple && keyCode === A && event.ctrlKey) {\n      event.preventDefault();\n      const hasDeselectedOptions = this.options.some(opt => !opt.disabled && !opt.selected);\n\n      this.options.forEach(option => {\n        if (!option.disabled) {\n          hasDeselectedOptions ? option.select() : option.deselect();\n        }\n      });\n    } else {\n      const previouslyFocusedIndex = manager.activeItemIndex;\n\n      manager.onKeydown(event);\n\n      if (this._multiple && isArrowKey && event.shiftKey && manager.activeItem &&\n          manager.activeItemIndex !== previouslyFocusedIndex) {\n        manager.activeItem._selectViaInteraction();\n      }\n    }\n  }\n\n  _onFocus() {\n    if (!this.disabled) {\n      this._focused = true;\n      this.stateChanges.next();\n    }\n  }\n\n  /**\n   * Calls the touched callback only if the panel is closed. Otherwise, the trigger will\n   * \"blur\" to the panel when it opens, causing a false positive.\n   */\n  _onBlur() {\n    this._focused = false;\n\n    if (!this.disabled && !this.panelOpen) {\n      this._onTouched();\n      this._changeDetectorRef.markForCheck();\n      this.stateChanges.next();\n    }\n  }\n\n  /**\n   * Callback that is invoked when the overlay panel has been attached.\n   */\n  _onAttached(): void {\n    this.overlayDir.positionChange.pipe(take(1)).subscribe(() => {\n      this._setPseudoCheckboxPaddingSize();\n      this._changeDetectorRef.detectChanges();\n      this._calculateOverlayOffsetX();\n      this.panel.nativeElement.scrollTop = this._scrollTop;\n    });\n  }\n\n  /** Returns the theme to be used on the panel. */\n  _getPanelTheme(): string {\n    return this._parentFormField ? `mat-${this._parentFormField.color}` : '';\n  }\n\n  // TODO(josephperrott): Remove after 2018 spec updates are fully merged.\n  /** Sets the pseudo checkbox padding size based on the width of the pseudo checkbox. */\n  private _setPseudoCheckboxPaddingSize() {\n    if (!SELECT_MULTIPLE_PANEL_PADDING_X && this.multiple) {\n      const pseudoCheckbox = this.panel.nativeElement.querySelector('.mat-pseudo-checkbox');\n      if (pseudoCheckbox) {\n        SELECT_MULTIPLE_PANEL_PADDING_X = SELECT_PANEL_PADDING_X * 1.5 + pseudoCheckbox.offsetWidth;\n      }\n    }\n  }\n\n  /** Whether the select has a value. */\n  get empty(): boolean {\n    return !this._selectionModel || this._selectionModel.isEmpty();\n  }\n\n  private _initializeSelection(): void {\n    // Defer setting the value in order to avoid the \"Expression\n    // has changed after it was checked\" errors from Angular.\n    Promise.resolve().then(() => {\n      this._setSelectionByValue(this.ngControl ? this.ngControl.value : this._value);\n    });\n  }\n\n  /**\n   * Sets the selected option based on a value. If no option can be\n   * found with the designated value, the select trigger is cleared.\n   */\n  private _setSelectionByValue(value: any | any[]): void {\n    if (this.multiple && value) {\n      if (!Array.isArray(value)) {\n        throw getMatSelectNonArrayValueError();\n      }\n\n      this._selectionModel.clear();\n      value.forEach((currentValue: any) => this._selectValue(currentValue));\n      this._sortValues();\n    } else {\n      this._selectionModel.clear();\n      const correspondingOption = this._selectValue(value);\n\n      // Shift focus to the active item. Note that we shouldn't do this in multiple\n      // mode, because we don't know what option the user interacted with last.\n      if (correspondingOption) {\n        this._keyManager.setActiveItem(correspondingOption);\n      }\n    }\n\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /**\n   * Finds and selects and option based on its value.\n   * @returns Option that has the corresponding value.\n   */\n  private _selectValue(value: any): MatOption | undefined {\n    const correspondingOption = this.options.find((option: MatOption) => {\n      try {\n        // Treat null as a special reset value.\n        return option.value != null && this._compareWith(option.value,  value);\n      } catch (error) {\n        if (isDevMode()) {\n          // Notify developers of errors in their comparator.\n          console.warn(error);\n        }\n        return false;\n      }\n    });\n\n    if (correspondingOption) {\n      this._selectionModel.select(correspondingOption);\n    }\n\n    return correspondingOption;\n  }\n\n  /** Sets up a key manager to listen to keyboard events on the overlay panel. */\n  private _initKeyManager() {\n    this._keyManager = new ActiveDescendantKeyManager<MatOption>(this.options)\n      .withTypeAhead()\n      .withVerticalOrientation()\n      .withHorizontalOrientation(this._isRtl() ? 'rtl' : 'ltr');\n\n    this._keyManager.tabOut.pipe(takeUntil(this._destroy)).subscribe(() => {\n      // Restore focus to the trigger before closing. Ensures that the focus\n      // position won't be lost if the user got focus into the overlay.\n      this.focus();\n      this.close();\n    });\n\n    this._keyManager.change.pipe(takeUntil(this._destroy)).subscribe(() => {\n      if (this._panelOpen && this.panel) {\n        this._scrollActiveOptionIntoView();\n      } else if (!this._panelOpen && !this.multiple && this._keyManager.activeItem) {\n        this._keyManager.activeItem._selectViaInteraction();\n      }\n    });\n  }\n\n  /** Drops current option subscriptions and IDs and resets from scratch. */\n  private _resetOptions(): void {\n    const changedOrDestroyed = merge(this.options.changes, this._destroy);\n\n    this.optionSelectionChanges.pipe(takeUntil(changedOrDestroyed)).subscribe(event => {\n      this._onSelect(event.source, event.isUserInput);\n\n      if (event.isUserInput && !this.multiple && this._panelOpen) {\n        this.close();\n        this.focus();\n      }\n    });\n\n    // Listen to changes in the internal state of the options and react accordingly.\n    // Handles cases like the labels of the selected options changing.\n    merge(...this.options.map(option => option._stateChanges))\n      .pipe(takeUntil(changedOrDestroyed))\n      .subscribe(() => {\n        this._changeDetectorRef.markForCheck();\n        this.stateChanges.next();\n      });\n\n    this._setOptionIds();\n  }\n\n  /** Invoked when an option is clicked. */\n  private _onSelect(option: MatOption, isUserInput: boolean): void {\n    const wasSelected = this._selectionModel.isSelected(option);\n\n    if (option.value == null && !this._multiple) {\n      option.deselect();\n      this._selectionModel.clear();\n      this._propagateChanges(option.value);\n    } else {\n      option.selected ? this._selectionModel.select(option) : this._selectionModel.deselect(option);\n\n      if (isUserInput) {\n        this._keyManager.setActiveItem(option);\n      }\n\n      if (this.multiple) {\n        this._sortValues();\n\n        if (isUserInput) {\n          // In case the user selected the option with their mouse, we\n          // want to restore focus back to the trigger, in order to\n          // prevent the select keyboard controls from clashing with\n          // the ones from `mat-option`.\n          this.focus();\n        }\n      }\n    }\n\n    if (wasSelected !== this._selectionModel.isSelected(option)) {\n      this._propagateChanges();\n    }\n\n    this.stateChanges.next();\n  }\n\n  /** Sorts the selected values in the selected based on their order in the panel. */\n  private _sortValues() {\n    if (this.multiple) {\n      const options = this.options.toArray();\n\n      this._selectionModel.sort((a, b) => {\n        return this.sortComparator ? this.sortComparator(a, b, options) :\n                                     options.indexOf(a) - options.indexOf(b);\n      });\n      this.stateChanges.next();\n    }\n  }\n\n  /** Emits change event to set the model value. */\n  private _propagateChanges(fallbackValue?: any): void {\n    let valueToEmit: any = null;\n\n    if (this.multiple) {\n      valueToEmit = (this.selected as MatOption[]).map(option => option.value);\n    } else {\n      valueToEmit = this.selected ? (this.selected as MatOption).value : fallbackValue;\n    }\n\n    this._value = valueToEmit;\n    this.valueChange.emit(valueToEmit);\n    this._onChange(valueToEmit);\n    this.selectionChange.emit(new MatSelectChange(this, valueToEmit));\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Records option IDs to pass to the aria-owns property. */\n  private _setOptionIds() {\n    this._optionIds = this.options.map(option => option.id).join(' ');\n  }\n\n  /**\n   * Highlights the selected item. If no option is selected, it will highlight\n   * the first item instead.\n   */\n  private _highlightCorrectOption(): void {\n    if (this._keyManager) {\n      if (this.empty) {\n        this._keyManager.setFirstItemActive();\n      } else {\n        this._keyManager.setActiveItem(this._selectionModel.selected[0]);\n      }\n    }\n  }\n\n  /** Scrolls the active option into view. */\n  private _scrollActiveOptionIntoView(): void {\n    const activeOptionIndex = this._keyManager.activeItemIndex || 0;\n    const labelCount = _countGroupLabelsBeforeOption(activeOptionIndex, this.options,\n        this.optionGroups);\n\n    this.panel.nativeElement.scrollTop = _getOptionScrollPosition(\n      activeOptionIndex + labelCount,\n      this._getItemHeight(),\n      this.panel.nativeElement.scrollTop,\n      SELECT_PANEL_MAX_HEIGHT\n    );\n  }\n\n  /** Focuses the select element. */\n  focus(): void {\n    this._elementRef.nativeElement.focus();\n  }\n\n  /** Gets the index of the provided option in the option list. */\n  private _getOptionIndex(option: MatOption): number | undefined {\n    return this.options.reduce((result: number | undefined, current: MatOption, index: number) => {\n      return result === undefined ? (option === current ? index : undefined) : result;\n    }, undefined);\n  }\n\n  /** Calculates the scroll position and x- and y-offsets of the overlay panel. */\n  private _calculateOverlayPosition(): void {\n    const itemHeight = this._getItemHeight();\n    const items = this._getItemCount();\n    const panelHeight = Math.min(items * itemHeight, SELECT_PANEL_MAX_HEIGHT);\n    const scrollContainerHeight = items * itemHeight;\n\n    // The farthest the panel can be scrolled before it hits the bottom\n    const maxScroll = scrollContainerHeight - panelHeight;\n\n    // If no value is selected we open the popup to the first item.\n    let selectedOptionOffset =\n        this.empty ? 0 : this._getOptionIndex(this._selectionModel.selected[0])!;\n\n    selectedOptionOffset += _countGroupLabelsBeforeOption(selectedOptionOffset, this.options,\n        this.optionGroups);\n\n    // We must maintain a scroll buffer so the selected option will be scrolled to the\n    // center of the overlay panel rather than the top.\n    const scrollBuffer = panelHeight / 2;\n    this._scrollTop = this._calculateOverlayScroll(selectedOptionOffset, scrollBuffer, maxScroll);\n    this._offsetY = this._calculateOverlayOffsetY(selectedOptionOffset, scrollBuffer, maxScroll);\n\n    this._checkOverlayWithinViewport(maxScroll);\n  }\n\n  /**\n   * Calculates the scroll position of the select's overlay panel.\n   *\n   * Attempts to center the selected option in the panel. If the option is\n   * too high or too low in the panel to be scrolled to the center, it clamps the\n   * scroll position to the min or max scroll positions respectively.\n   */\n  _calculateOverlayScroll(selectedIndex: number, scrollBuffer: number,\n                          maxScroll: number): number {\n    const itemHeight = this._getItemHeight();\n    const optionOffsetFromScrollTop = itemHeight * selectedIndex;\n    const halfOptionHeight = itemHeight / 2;\n\n    // Starts at the optionOffsetFromScrollTop, which scrolls the option to the top of the\n    // scroll container, then subtracts the scroll buffer to scroll the option down to\n    // the center of the overlay panel. Half the option height must be re-added to the\n    // scrollTop so the option is centered based on its middle, not its top edge.\n    const optimalScrollPosition = optionOffsetFromScrollTop - scrollBuffer + halfOptionHeight;\n    return Math.min(Math.max(0, optimalScrollPosition), maxScroll);\n  }\n\n  /** Returns the aria-label of the select component. */\n  _getAriaLabel(): string | null {\n    // If an ariaLabelledby value has been set by the consumer, the select should not overwrite the\n    // `aria-labelledby` value by setting the ariaLabel to the placeholder.\n    return this.ariaLabelledby ? null : this.ariaLabel || this.placeholder;\n  }\n\n  /** Returns the aria-labelledby of the select component. */\n  _getAriaLabelledby(): string | null {\n    if (this.ariaLabelledby) {\n      return this.ariaLabelledby;\n    }\n\n    // Note: we use `_getAriaLabel` here, because we want to check whether there's a\n    // computed label. `this.ariaLabel` is only the user-specified label.\n    if (!this._parentFormField || !this._parentFormField._hasFloatingLabel() ||\n      this._getAriaLabel()) {\n      return null;\n    }\n\n    return this._parentFormField._labelId || null;\n  }\n\n  /** Determines the `aria-activedescendant` to be set on the host. */\n  _getAriaActiveDescendant(): string | null {\n    if (this.panelOpen && this._keyManager && this._keyManager.activeItem) {\n      return this._keyManager.activeItem.id;\n    }\n\n    return null;\n  }\n\n  /**\n   * Sets the x-offset of the overlay panel in relation to the trigger's top start corner.\n   * This must be adjusted to align the selected option text over the trigger text when\n   * the panel opens. Will change based on LTR or RTL text direction. Note that the offset\n   * can't be calculated until the panel has been attached, because we need to know the\n   * content width in order to constrain the panel within the viewport.\n   */\n  private _calculateOverlayOffsetX(): void {\n    const overlayRect = this.overlayDir.overlayRef.overlayElement.getBoundingClientRect();\n    const viewportSize = this._viewportRuler.getViewportSize();\n    const isRtl = this._isRtl();\n    const paddingWidth = this.multiple ? SELECT_MULTIPLE_PANEL_PADDING_X + SELECT_PANEL_PADDING_X :\n                                         SELECT_PANEL_PADDING_X * 2;\n    let offsetX: number;\n\n    // Adjust the offset, depending on the option padding.\n    if (this.multiple) {\n      offsetX = SELECT_MULTIPLE_PANEL_PADDING_X;\n    } else {\n      let selected = this._selectionModel.selected[0] || this.options.first;\n      offsetX = selected && selected.group ? SELECT_PANEL_INDENT_PADDING_X : SELECT_PANEL_PADDING_X;\n    }\n\n    // Invert the offset in LTR.\n    if (!isRtl) {\n      offsetX *= -1;\n    }\n\n    // Determine how much the select overflows on each side.\n    const leftOverflow = 0 - (overlayRect.left + offsetX - (isRtl ? paddingWidth : 0));\n    const rightOverflow = overlayRect.right + offsetX - viewportSize.width\n                          + (isRtl ? 0 : paddingWidth);\n\n    // If the element overflows on either side, reduce the offset to allow it to fit.\n    if (leftOverflow > 0) {\n      offsetX += leftOverflow + SELECT_PANEL_VIEWPORT_PADDING;\n    } else if (rightOverflow > 0) {\n      offsetX -= rightOverflow + SELECT_PANEL_VIEWPORT_PADDING;\n    }\n\n    // Set the offset directly in order to avoid having to go through change detection and\n    // potentially triggering \"changed after it was checked\" errors. Round the value to avoid\n    // blurry content in some browsers.\n    this.overlayDir.offsetX = Math.round(offsetX);\n    this.overlayDir.overlayRef.updatePosition();\n  }\n\n  /**\n   * Calculates the y-offset of the select's overlay panel in relation to the\n   * top start corner of the trigger. It has to be adjusted in order for the\n   * selected option to be aligned over the trigger when the panel opens.\n   */\n  private _calculateOverlayOffsetY(selectedIndex: number, scrollBuffer: number,\n                                  maxScroll: number): number {\n    const itemHeight = this._getItemHeight();\n    const optionHeightAdjustment = (itemHeight - this._triggerRect.height) / 2;\n    const maxOptionsDisplayed = Math.floor(SELECT_PANEL_MAX_HEIGHT / itemHeight);\n    let optionOffsetFromPanelTop: number;\n\n    // Disable offset if requested by user by returning 0 as value to offset\n    if (this._disableOptionCentering) {\n      return 0;\n    }\n\n    if (this._scrollTop === 0) {\n      optionOffsetFromPanelTop = selectedIndex * itemHeight;\n    } else if (this._scrollTop === maxScroll) {\n      const firstDisplayedIndex = this._getItemCount() - maxOptionsDisplayed;\n      const selectedDisplayIndex = selectedIndex - firstDisplayedIndex;\n\n      // The first item is partially out of the viewport. Therefore we need to calculate what\n      // portion of it is shown in the viewport and account for it in our offset.\n      let partialItemHeight =\n          itemHeight - (this._getItemCount() * itemHeight - SELECT_PANEL_MAX_HEIGHT) % itemHeight;\n\n      // Because the panel height is longer than the height of the options alone,\n      // there is always extra padding at the top or bottom of the panel. When\n      // scrolled to the very bottom, this padding is at the top of the panel and\n      // must be added to the offset.\n      optionOffsetFromPanelTop = selectedDisplayIndex * itemHeight + partialItemHeight;\n    } else {\n      // If the option was scrolled to the middle of the panel using a scroll buffer,\n      // its offset will be the scroll buffer minus the half height that was added to\n      // center it.\n      optionOffsetFromPanelTop = scrollBuffer - itemHeight / 2;\n    }\n\n    // The final offset is the option's offset from the top, adjusted for the height difference,\n    // multiplied by -1 to ensure that the overlay moves in the correct direction up the page.\n    // The value is rounded to prevent some browsers from blurring the content.\n    return Math.round(optionOffsetFromPanelTop * -1 - optionHeightAdjustment);\n  }\n\n  /**\n   * Checks that the attempted overlay position will fit within the viewport.\n   * If it will not fit, tries to adjust the scroll position and the associated\n   * y-offset so the panel can open fully on-screen. If it still won't fit,\n   * sets the offset back to 0 to allow the fallback position to take over.\n   */\n  private _checkOverlayWithinViewport(maxScroll: number): void {\n    const itemHeight = this._getItemHeight();\n    const viewportSize = this._viewportRuler.getViewportSize();\n\n    const topSpaceAvailable = this._triggerRect.top - SELECT_PANEL_VIEWPORT_PADDING;\n    const bottomSpaceAvailable =\n        viewportSize.height - this._triggerRect.bottom - SELECT_PANEL_VIEWPORT_PADDING;\n\n    const panelHeightTop = Math.abs(this._offsetY);\n    const totalPanelHeight =\n        Math.min(this._getItemCount() * itemHeight, SELECT_PANEL_MAX_HEIGHT);\n    const panelHeightBottom = totalPanelHeight - panelHeightTop - this._triggerRect.height;\n\n    if (panelHeightBottom > bottomSpaceAvailable) {\n      this._adjustPanelUp(panelHeightBottom, bottomSpaceAvailable);\n    } else if (panelHeightTop > topSpaceAvailable) {\n     this._adjustPanelDown(panelHeightTop, topSpaceAvailable, maxScroll);\n    } else {\n      this._transformOrigin = this._getOriginBasedOnOption();\n    }\n  }\n\n  /** Adjusts the overlay panel up to fit in the viewport. */\n  private _adjustPanelUp(panelHeightBottom: number, bottomSpaceAvailable: number) {\n    // Browsers ignore fractional scroll offsets, so we need to round.\n    const distanceBelowViewport = Math.round(panelHeightBottom - bottomSpaceAvailable);\n\n    // Scrolls the panel up by the distance it was extending past the boundary, then\n    // adjusts the offset by that amount to move the panel up into the viewport.\n    this._scrollTop -= distanceBelowViewport;\n    this._offsetY -= distanceBelowViewport;\n    this._transformOrigin = this._getOriginBasedOnOption();\n\n    // If the panel is scrolled to the very top, it won't be able to fit the panel\n    // by scrolling, so set the offset to 0 to allow the fallback position to take\n    // effect.\n    if (this._scrollTop <= 0) {\n      this._scrollTop = 0;\n      this._offsetY = 0;\n      this._transformOrigin = `50% bottom 0px`;\n    }\n  }\n\n  /** Adjusts the overlay panel down to fit in the viewport. */\n  private _adjustPanelDown(panelHeightTop: number, topSpaceAvailable: number,\n                           maxScroll: number) {\n    // Browsers ignore fractional scroll offsets, so we need to round.\n    const distanceAboveViewport = Math.round(panelHeightTop - topSpaceAvailable);\n\n    // Scrolls the panel down by the distance it was extending past the boundary, then\n    // adjusts the offset by that amount to move the panel down into the viewport.\n    this._scrollTop += distanceAboveViewport;\n    this._offsetY += distanceAboveViewport;\n    this._transformOrigin = this._getOriginBasedOnOption();\n\n    // If the panel is scrolled to the very bottom, it won't be able to fit the\n    // panel by scrolling, so set the offset to 0 to allow the fallback position\n    // to take effect.\n    if (this._scrollTop >= maxScroll) {\n      this._scrollTop = maxScroll;\n      this._offsetY = 0;\n      this._transformOrigin = `50% top 0px`;\n      return;\n    }\n  }\n\n  /** Sets the transform origin point based on the selected option. */\n  private _getOriginBasedOnOption(): string {\n    const itemHeight = this._getItemHeight();\n    const optionHeightAdjustment = (itemHeight - this._triggerRect.height) / 2;\n    const originY = Math.abs(this._offsetY) - optionHeightAdjustment + itemHeight / 2;\n    return `50% ${originY}px 0px`;\n  }\n\n  /** Calculates the amount of items in the select. This includes options and group labels. */\n  private _getItemCount(): number {\n    return this.options.length + this.optionGroups.length;\n  }\n\n  /** Calculates the height of the select's options. */\n  private _getItemHeight(): number {\n    return this._triggerFontSize * SELECT_ITEM_HEIGHT_EM;\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  setDescribedByIds(ids: string[]) {\n    this._ariaDescribedby = ids.join(' ');\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  onContainerClick() {\n    this.focus();\n    this.open();\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  get shouldLabelFloat(): boolean {\n    return this._panelOpen || !this.empty;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {AnimationEvent} from '@angular/animations';\nimport {AriaDescriber, FocusMonitor} from '@angular/cdk/a11y';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {ESCAPE} from '@angular/cdk/keycodes';\nimport {BreakpointObserver, Breakpoints, BreakpointState} from '@angular/cdk/layout';\nimport {\n  FlexibleConnectedPositionStrategy,\n  HorizontalConnectionPos,\n  OriginConnectionPosition,\n  Overlay,\n  OverlayConnectionPosition,\n  OverlayRef,\n  ScrollStrategy,\n  VerticalConnectionPos,\n} from '@angular/cdk/overlay';\nimport {ScrollDispatcher} from '@angular/cdk/scrolling';\nimport {Platform} from '@angular/cdk/platform';\nimport {ComponentPortal} from '@angular/cdk/portal';\nimport {take, takeUntil} from 'rxjs/operators';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  Directive,\n  ElementRef,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  ViewContainerRef,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {Subject, Observable} from 'rxjs';\nimport {matTooltipAnimations} from './tooltip-animations';\n\n\nexport type TooltipPosition = 'left' | 'right' | 'above' | 'below' | 'before' | 'after';\n\n/** Time in ms to throttle repositioning after scroll events. */\nexport const SCROLL_THROTTLE_MS = 20;\n\n/** CSS class that will be attached to the overlay panel. */\nexport const TOOLTIP_PANEL_CLASS = 'mat-tooltip-panel';\n\n/**\n * Creates an error to be thrown if the user supplied an invalid tooltip position.\n * @docs-private\n */\nexport function getMatTooltipInvalidPositionError(position: string) {\n  return Error(`Tooltip position \"${position}\" is invalid.`);\n}\n\n/** Injection token that determines the scroll handling while a tooltip is visible. */\nexport const MAT_TOOLTIP_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mat-tooltip-scroll-strategy');\n\n/** @docs-private */\nexport function MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY(overlay: Overlay): () => ScrollStrategy {\n  return () => overlay.scrollStrategies.reposition({scrollThrottle: SCROLL_THROTTLE_MS});\n}\n\n/** @docs-private */\nexport const MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY_PROVIDER = {\n  provide: MAT_TOOLTIP_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY,\n};\n\n/** Default `matTooltip` options that can be overridden. */\nexport interface MatTooltipDefaultOptions {\n  showDelay: number;\n  hideDelay: number;\n  touchendHideDelay: number;\n}\n\n/** Injection token to be used to override the default options for `matTooltip`. */\nexport const MAT_TOOLTIP_DEFAULT_OPTIONS =\n    new InjectionToken<MatTooltipDefaultOptions>('mat-tooltip-default-options', {\n      providedIn: 'root',\n      factory: MAT_TOOLTIP_DEFAULT_OPTIONS_FACTORY\n    });\n\n/** @docs-private */\nexport function MAT_TOOLTIP_DEFAULT_OPTIONS_FACTORY(): MatTooltipDefaultOptions {\n  return {\n    showDelay: 0,\n    hideDelay: 0,\n    touchendHideDelay: 1500,\n  };\n}\n\n/**\n * Directive that attaches a material design tooltip to the host element. Animates the showing and\n * hiding of a tooltip provided position (defaults to below the element).\n *\n * https://material.io/design/components/tooltips.html\n */\n@Directive({\n  selector: '[matTooltip]',\n  exportAs: 'matTooltip',\n  host: {\n    '(longpress)': 'show()',\n    '(keydown)': '_handleKeydown($event)',\n    '(touchend)': '_handleTouchend()',\n  },\n})\nexport class MatTooltip implements OnDestroy {\n  _overlayRef: OverlayRef | null;\n  _tooltipInstance: TooltipComponent | null;\n\n  private _portal: ComponentPortal<TooltipComponent>;\n  private _position: TooltipPosition = 'below';\n  private _disabled: boolean = false;\n  private _tooltipClass: string|string[]|Set<string>|{[key: string]: any};\n\n  /** Allows the user to define the position of the tooltip relative to the parent element */\n  @Input('matTooltipPosition')\n  get position(): TooltipPosition { return this._position; }\n  set position(value: TooltipPosition) {\n    if (value !== this._position) {\n      this._position = value;\n\n      if (this._overlayRef) {\n        this._updatePosition();\n\n        if (this._tooltipInstance) {\n          this._tooltipInstance!.show(0);\n        }\n\n        this._overlayRef.updatePosition();\n      }\n    }\n  }\n\n  /** Disables the display of the tooltip. */\n  @Input('matTooltipDisabled')\n  get disabled(): boolean { return this._disabled; }\n  set disabled(value) {\n    this._disabled = coerceBooleanProperty(value);\n\n    // If tooltip is disabled, hide immediately.\n    if (this._disabled) {\n      this.hide(0);\n    }\n  }\n\n  /** The default delay in ms before showing the tooltip after show is called */\n  @Input('matTooltipShowDelay') showDelay = this._defaultOptions.showDelay;\n\n  /** The default delay in ms before hiding the tooltip after hide is called */\n  @Input('matTooltipHideDelay') hideDelay = this._defaultOptions.hideDelay;\n\n  private _message = '';\n\n  /** The message to be displayed in the tooltip */\n  @Input('matTooltip')\n  get message() { return this._message; }\n  set message(value: string) {\n    this._ariaDescriber.removeDescription(this._elementRef.nativeElement, this._message);\n\n    // If the message is not a string (e.g. number), convert it to a string and trim it.\n    this._message = value != null ? `${value}`.trim() : '';\n\n    if (!this._message && this._isTooltipVisible()) {\n      this.hide(0);\n    } else {\n      this._updateTooltipMessage();\n      this._ariaDescriber.describe(this._elementRef.nativeElement, this.message);\n    }\n  }\n\n  /** Classes to be passed to the tooltip. Supports the same syntax as `ngClass`. */\n  @Input('matTooltipClass')\n  get tooltipClass() { return this._tooltipClass; }\n  set tooltipClass(value: string|string[]|Set<string>|{[key: string]: any}) {\n    this._tooltipClass = value;\n    if (this._tooltipInstance) {\n      this._setTooltipClass(this._tooltipClass);\n    }\n  }\n\n  private _manualListeners = new Map<string, EventListenerOrEventListenerObject>();\n\n  /** Emits when the component is destroyed. */\n  private readonly _destroyed = new Subject<void>();\n\n  constructor(\n    private _overlay: Overlay,\n    private _elementRef: ElementRef<HTMLElement>,\n    private _scrollDispatcher: ScrollDispatcher,\n    private _viewContainerRef: ViewContainerRef,\n    private _ngZone: NgZone,\n    private _platform: Platform,\n    private _ariaDescriber: AriaDescriber,\n    private _focusMonitor: FocusMonitor,\n    @Inject(MAT_TOOLTIP_SCROLL_STRATEGY) private _scrollStrategy,\n    @Optional() private _dir: Directionality,\n    @Optional() @Inject(MAT_TOOLTIP_DEFAULT_OPTIONS)\n      private _defaultOptions: MatTooltipDefaultOptions) {\n\n    const element: HTMLElement = _elementRef.nativeElement;\n\n    // The mouse events shouldn't be bound on mobile devices, because they can prevent the\n    // first tap from firing its click event or can cause the tooltip to open for clicks.\n    if (!_platform.IOS && !_platform.ANDROID) {\n      this._manualListeners\n        .set('mouseenter', () => this.show())\n        .set('mouseleave', () => this.hide())\n        .forEach((listener, event) => element.addEventListener(event, listener));\n    }\n\n    if (element.nodeName === 'INPUT' || element.nodeName === 'TEXTAREA') {\n      // When we bind a gesture event on an element (in this case `longpress`), HammerJS\n      // will add some inline styles by default, including `user-select: none`. This is\n      // problematic on iOS and in Safari, because it will prevent users from typing in inputs.\n      // Since `user-select: none` is not needed for the `longpress` event and can cause unexpected\n      // behavior for text fields, we always clear the `user-select` to avoid such issues.\n      element.style.webkitUserSelect = element.style.userSelect = element.style.msUserSelect = '';\n    }\n\n    // Hammer applies `-webkit-user-drag: none` on all elements by default,\n    // which breaks the native drag&drop. If the consumer explicitly made\n    // the element draggable, clear the `-webkit-user-drag`.\n    if (element.draggable && element.style['webkitUserDrag'] === 'none') {\n      element.style['webkitUserDrag'] = '';\n    }\n\n    _focusMonitor.monitor(_elementRef).pipe(takeUntil(this._destroyed)).subscribe(origin => {\n      // Note that the focus monitor runs outside the Angular zone.\n      if (!origin) {\n        _ngZone.run(() => this.hide(0));\n      } else if (origin === 'keyboard') {\n        _ngZone.run(() => this.show());\n      }\n    });\n  }\n\n  /**\n   * Dispose the tooltip when destroyed.\n   */\n  ngOnDestroy() {\n    if (this._overlayRef) {\n      this._overlayRef.dispose();\n      this._tooltipInstance = null;\n    }\n\n    // Clean up the event listeners set in the constructor\n    if (!this._platform.IOS) {\n      this._manualListeners.forEach((listener, event) =>\n        this._elementRef.nativeElement.removeEventListener(event, listener));\n\n      this._manualListeners.clear();\n    }\n\n    this._destroyed.next();\n    this._destroyed.complete();\n\n    this._ariaDescriber.removeDescription(this._elementRef.nativeElement, this.message);\n    this._focusMonitor.stopMonitoring(this._elementRef);\n  }\n\n  /** Shows the tooltip after the delay in ms, defaults to tooltip-delay-show or 0ms if no input */\n  show(delay: number = this.showDelay): void {\n    if (this.disabled || !this.message) { return; }\n\n    const overlayRef = this._createOverlay();\n\n    this._detach();\n    this._portal = this._portal || new ComponentPortal(TooltipComponent, this._viewContainerRef);\n    this._tooltipInstance = overlayRef.attach(this._portal).instance;\n    this._tooltipInstance.afterHidden()\n      .pipe(takeUntil(this._destroyed))\n      .subscribe(() => this._detach());\n    this._setTooltipClass(this._tooltipClass);\n    this._updateTooltipMessage();\n    this._tooltipInstance!.show(delay);\n  }\n\n  /** Hides the tooltip after the delay in ms, defaults to tooltip-delay-hide or 0ms if no input */\n  hide(delay: number = this.hideDelay): void {\n    if (this._tooltipInstance) {\n      this._tooltipInstance.hide(delay);\n    }\n  }\n\n  /** Shows/hides the tooltip */\n  toggle(): void {\n    this._isTooltipVisible() ? this.hide() : this.show();\n  }\n\n  /** Returns true if the tooltip is currently visible to the user */\n  _isTooltipVisible(): boolean {\n    return !!this._tooltipInstance && this._tooltipInstance.isVisible();\n  }\n\n  /** Handles the keydown events on the host element. */\n  _handleKeydown(e: KeyboardEvent) {\n    if (this._isTooltipVisible() && e.keyCode === ESCAPE) {\n      e.stopPropagation();\n      this.hide(0);\n    }\n  }\n\n  /** Handles the touchend events on the host element. */\n  _handleTouchend() {\n    this.hide(this._defaultOptions.touchendHideDelay);\n  }\n\n  /** Create the overlay config and position strategy */\n  private _createOverlay(): OverlayRef {\n    if (this._overlayRef) {\n      return this._overlayRef;\n    }\n\n    // Create connected position strategy that listens for scroll events to reposition.\n    const strategy = this._overlay.position()\n      .flexibleConnectedTo(this._elementRef)\n      .withTransformOriginOn('.mat-tooltip')\n      .withFlexibleDimensions(false)\n      .withViewportMargin(8);\n\n    const scrollableAncestors = this._scrollDispatcher\n      .getAncestorScrollContainers(this._elementRef);\n\n    strategy.withScrollableContainers(scrollableAncestors);\n\n    strategy.positionChanges.pipe(takeUntil(this._destroyed)).subscribe(change => {\n      if (this._tooltipInstance) {\n        if (change.scrollableViewProperties.isOverlayClipped && this._tooltipInstance.isVisible()) {\n          // After position changes occur and the overlay is clipped by\n          // a parent scrollable then close the tooltip.\n          this._ngZone.run(() => this.hide(0));\n        }\n      }\n    });\n\n    this._overlayRef = this._overlay.create({\n      direction: this._dir,\n      positionStrategy: strategy,\n      panelClass: TOOLTIP_PANEL_CLASS,\n      scrollStrategy: this._scrollStrategy()\n    });\n\n    this._updatePosition();\n\n    this._overlayRef.detachments()\n      .pipe(takeUntil(this._destroyed))\n      .subscribe(() => this._detach());\n\n    return this._overlayRef;\n  }\n\n  /** Detaches the currently-attached tooltip. */\n  private _detach() {\n    if (this._overlayRef && this._overlayRef.hasAttached()) {\n      this._overlayRef.detach();\n    }\n\n    this._tooltipInstance = null;\n  }\n\n  /** Updates the position of the current tooltip. */\n  private _updatePosition() {\n    const position =\n        this._overlayRef!.getConfig().positionStrategy as FlexibleConnectedPositionStrategy;\n    const origin = this._getOrigin();\n    const overlay = this._getOverlayPosition();\n\n    position.withPositions([\n      {...origin.main, ...overlay.main},\n      {...origin.fallback, ...overlay.fallback}\n    ]);\n  }\n\n  /**\n   * Returns the origin position and a fallback position based on the user's position preference.\n   * The fallback position is the inverse of the origin (e.g. `'below' -> 'above'`).\n   */\n  _getOrigin(): {main: OriginConnectionPosition, fallback: OriginConnectionPosition} {\n    const isLtr = !this._dir || this._dir.value == 'ltr';\n    const position = this.position;\n    let originPosition: OriginConnectionPosition;\n\n    if (position == 'above' || position == 'below') {\n      originPosition = {originX: 'center', originY: position == 'above' ? 'top' : 'bottom'};\n    } else if (\n      position == 'before' ||\n      (position == 'left' && isLtr) ||\n      (position == 'right' && !isLtr)) {\n      originPosition = {originX: 'start', originY: 'center'};\n    } else if (\n      position == 'after' ||\n      (position == 'right' && isLtr) ||\n      (position == 'left' && !isLtr)) {\n      originPosition = {originX: 'end', originY: 'center'};\n    } else {\n      throw getMatTooltipInvalidPositionError(position);\n    }\n\n    const {x, y} = this._invertPosition(originPosition.originX, originPosition.originY);\n\n    return {\n      main: originPosition,\n      fallback: {originX: x, originY: y}\n    };\n  }\n\n  /** Returns the overlay position and a fallback position based on the user's preference */\n  _getOverlayPosition(): {main: OverlayConnectionPosition, fallback: OverlayConnectionPosition} {\n    const isLtr = !this._dir || this._dir.value == 'ltr';\n    const position = this.position;\n    let overlayPosition: OverlayConnectionPosition;\n\n    if (position == 'above') {\n      overlayPosition = {overlayX: 'center', overlayY: 'bottom'};\n    } else if (position == 'below') {\n      overlayPosition = {overlayX: 'center', overlayY: 'top'};\n    } else if (\n      position == 'before' ||\n      (position == 'left' && isLtr) ||\n      (position == 'right' && !isLtr)) {\n      overlayPosition = {overlayX: 'end', overlayY: 'center'};\n    } else if (\n      position == 'after' ||\n      (position == 'right' && isLtr) ||\n      (position == 'left' && !isLtr)) {\n      overlayPosition = {overlayX: 'start', overlayY: 'center'};\n    } else {\n      throw getMatTooltipInvalidPositionError(position);\n    }\n\n    const {x, y} = this._invertPosition(overlayPosition.overlayX, overlayPosition.overlayY);\n\n    return {\n      main: overlayPosition,\n      fallback: {overlayX: x, overlayY: y}\n    };\n  }\n\n  /** Updates the tooltip message and repositions the overlay according to the new message length */\n  private _updateTooltipMessage() {\n    // Must wait for the message to be painted to the tooltip so that the overlay can properly\n    // calculate the correct positioning based on the size of the text.\n    if (this._tooltipInstance) {\n      this._tooltipInstance.message = this.message;\n      this._tooltipInstance._markForCheck();\n\n      this._ngZone.onMicrotaskEmpty.asObservable().pipe(\n        take(1),\n        takeUntil(this._destroyed)\n      ).subscribe(() => {\n        if (this._tooltipInstance) {\n          this._overlayRef!.updatePosition();\n        }\n      });\n    }\n  }\n\n  /** Updates the tooltip class */\n  private _setTooltipClass(tooltipClass: string|string[]|Set<string>|{[key: string]: any}) {\n    if (this._tooltipInstance) {\n      this._tooltipInstance.tooltipClass = tooltipClass;\n      this._tooltipInstance._markForCheck();\n    }\n  }\n\n  /** Inverts an overlay position. */\n  private _invertPosition(x: HorizontalConnectionPos, y: VerticalConnectionPos) {\n    if (this.position === 'above' || this.position === 'below') {\n      if (y === 'top') {\n        y = 'bottom';\n      } else if (y === 'bottom') {\n        y = 'top';\n      }\n    } else {\n      if (x === 'end') {\n        x = 'start';\n      } else if (x === 'start') {\n        x = 'end';\n      }\n    }\n\n    return {x, y};\n  }\n}\n\nexport type TooltipVisibility = 'initial' | 'visible' | 'hidden';\n\n/**\n * Internal component that wraps the tooltip's content.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-tooltip-component',\n  templateUrl: 'tooltip.html',\n  styleUrls: ['tooltip.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  animations: [matTooltipAnimations.tooltipState],\n  host: {\n    // Forces the element to have a layout in IE and Edge. This fixes issues where the element\n    // won't be rendered if the animations are disabled or there is no web animations polyfill.\n    '[style.zoom]': '_visibility === \"visible\" ? 1 : null',\n    '(body:click)': 'this._handleBodyInteraction()',\n    'aria-hidden': 'true',\n  }\n})\nexport class TooltipComponent {\n  /** Message to display in the tooltip */\n  message: string;\n\n  /** Classes to be added to the tooltip. Supports the same syntax as `ngClass`. */\n  tooltipClass: string|string[]|Set<string>|{[key: string]: any};\n\n  /** The timeout ID of any current timer set to show the tooltip */\n  _showTimeoutId: number;\n\n  /** The timeout ID of any current timer set to hide the tooltip */\n  _hideTimeoutId: number;\n\n  /** Property watched by the animation framework to show or hide the tooltip */\n  _visibility: TooltipVisibility = 'initial';\n\n  /** Whether interactions on the page should close the tooltip */\n  private _closeOnInteraction: boolean = false;\n\n  /** Subject for notifying that the tooltip has been hidden from the view */\n  private readonly _onHide: Subject<any> = new Subject();\n\n  /** Stream that emits whether the user has a handset-sized display.  */\n  _isHandset: Observable<BreakpointState> = this._breakpointObserver.observe(Breakpoints.Handset);\n\n  constructor(\n    private _changeDetectorRef: ChangeDetectorRef,\n    private _breakpointObserver: BreakpointObserver) {}\n\n  /**\n   * Shows the tooltip with an animation originating from the provided origin\n   * @param delay Amount of milliseconds to the delay showing the tooltip.\n   */\n  show(delay: number): void {\n    // Cancel the delayed hide if it is scheduled\n    if (this._hideTimeoutId) {\n      clearTimeout(this._hideTimeoutId);\n    }\n\n    // Body interactions should cancel the tooltip if there is a delay in showing.\n    this._closeOnInteraction = true;\n    this._showTimeoutId = setTimeout(() => {\n      this._visibility = 'visible';\n\n      // Mark for check so if any parent component has set the\n      // ChangeDetectionStrategy to OnPush it will be checked anyways\n      this._markForCheck();\n    }, delay);\n  }\n\n  /**\n   * Begins the animation to hide the tooltip after the provided delay in ms.\n   * @param delay Amount of milliseconds to delay showing the tooltip.\n   */\n  hide(delay: number): void {\n    // Cancel the delayed show if it is scheduled\n    if (this._showTimeoutId) {\n      clearTimeout(this._showTimeoutId);\n    }\n\n    this._hideTimeoutId = setTimeout(() => {\n      this._visibility = 'hidden';\n\n      // Mark for check so if any parent component has set the\n      // ChangeDetectionStrategy to OnPush it will be checked anyways\n      this._markForCheck();\n    }, delay);\n  }\n\n  /** Returns an observable that notifies when the tooltip has been hidden from view. */\n  afterHidden(): Observable<void> {\n    return this._onHide.asObservable();\n  }\n\n  /** Whether the tooltip is being displayed. */\n  isVisible(): boolean {\n    return this._visibility === 'visible';\n  }\n\n  _animationStart() {\n    this._closeOnInteraction = false;\n  }\n\n  _animationDone(event: AnimationEvent): void {\n    const toState = event.toState as TooltipVisibility;\n\n    if (toState === 'hidden' && !this.isVisible()) {\n      this._onHide.next();\n    }\n\n    if (toState === 'visible' || toState === 'hidden') {\n      this._closeOnInteraction = true;\n    }\n  }\n\n  /**\n   * Interactions on the HTML body should close the tooltip immediately as defined in the\n   * material design spec.\n   * https://material.io/design/components/tooltips.html#behavior\n   */\n  _handleBodyInteraction(): void {\n    if (this._closeOnInteraction) {\n      this.hide(0);\n    }\n  }\n\n  /**\n   * Marks that the tooltip needs to be checked in the next change detection run.\n   * Mainly used for rendering the initial text before positioning a tooltip, which\n   * can be problematic in components with OnPush change detection.\n   */\n  _markForCheck(): void {\n    this._changeDetectorRef.markForCheck();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {_isNumberValue} from '@angular/cdk/coercion';\nimport {DataSource} from '@angular/cdk/table';\nimport {\n  BehaviorSubject,\n  combineLatest,\n  merge,\n  Observable,\n  of as observableOf,\n  Subscription\n} from 'rxjs';\nimport {MatPaginator, PageEvent} from '@angular/material/paginator';\nimport {MatSort, Sort} from '@angular/material/sort';\nimport {map} from 'rxjs/operators';\n\n/**\n * Corresponds to `Number.MAX_SAFE_INTEGER`. Moved out into a variable here due to\n * flaky browser support and the value not being defined in Closure's typings.\n */\nconst MAX_SAFE_INTEGER = 9007199254740991;\n\n/**\n * Data source that accepts a client-side data array and includes native support of filtering,\n * sorting (using MatSort), and pagination (using MatPaginator).\n *\n * Allows for sort customization by overriding sortingDataAccessor, which defines how data\n * properties are accessed. Also allows for filter customization by overriding filterTermAccessor,\n * which defines how row data is converted to a string for filter matching.\n */\nexport class MatTableDataSource<T> extends DataSource<T> {\n  /** Stream that emits when a new data array is set on the data source. */\n  private readonly _data: BehaviorSubject<T[]>;\n\n  /** Stream emitting render data to the table (depends on ordered data changes). */\n  private readonly _renderData = new BehaviorSubject<T[]>([]);\n\n  /** Stream that emits when a new filter string is set on the data source. */\n  private readonly _filter = new BehaviorSubject<string>('');\n\n  /**\n   * Subscription to the changes that should trigger an update to the table's rendered rows, such\n   * as filtering, sorting, pagination, or base data changes.\n   */\n  _renderChangesSubscription = Subscription.EMPTY;\n\n  /**\n   * The filtered set of data that has been matched by the filter string, or all the data if there\n   * is no filter. Useful for knowing the set of data the table represents.\n   * For example, a 'selectAll()' function would likely want to select the set of filtered data\n   * shown to the user rather than all the data.\n   */\n  filteredData: T[];\n\n  /** Array of data that should be rendered by the table, where each object represents one row. */\n  get data() { return this._data.value; }\n  set data(data: T[]) { this._data.next(data); }\n\n  /**\n   * Filter term that should be used to filter out objects from the data array. To override how\n   * data objects match to this filter string, provide a custom function for filterPredicate.\n   */\n  get filter(): string { return this._filter.value; }\n  set filter(filter: string) { this._filter.next(filter); }\n\n  /**\n   * Instance of the MatSort directive used by the table to control its sorting. Sort changes\n   * emitted by the MatSort will trigger an update to the table's rendered data.\n   */\n  get sort(): MatSort | null { return this._sort; }\n  set sort(sort: MatSort|null) {\n    this._sort = sort;\n    this._updateChangeSubscription();\n  }\n  private _sort: MatSort|null;\n\n  /**\n   * Instance of the MatPaginator component used by the table to control what page of the data is\n   * displayed. Page changes emitted by the MatPaginator will trigger an update to the\n   * table's rendered data.\n   *\n   * Note that the data source uses the paginator's properties to calculate which page of data\n   * should be displayed. If the paginator receives its properties as template inputs,\n   * e.g. `[pageLength]=100` or `[pageIndex]=1`, then be sure that the paginator's view has been\n   * initialized before assigning it to this data source.\n   */\n  get paginator(): MatPaginator | null { return this._paginator; }\n  set paginator(paginator: MatPaginator|null) {\n    this._paginator = paginator;\n    this._updateChangeSubscription();\n  }\n  private _paginator: MatPaginator|null;\n\n  /**\n   * Data accessor function that is used for accessing data properties for sorting through\n   * the default sortData function.\n   * This default function assumes that the sort header IDs (which defaults to the column name)\n   * matches the data's properties (e.g. column Xyz represents data['Xyz']).\n   * May be set to a custom function for different behavior.\n   * @param data Data object that is being accessed.\n   * @param sortHeaderId The name of the column that represents the data.\n   */\n  sortingDataAccessor: ((data: T, sortHeaderId: string) => string|number) =\n      (data: T, sortHeaderId: string): string|number => {\n    const value: any = data[sortHeaderId];\n\n    if (_isNumberValue(value)) {\n      const numberValue = Number(value);\n\n      // Numbers beyond `MAX_SAFE_INTEGER` can't be compared reliably so we\n      // leave them as strings. For more info: https://goo.gl/y5vbSg\n      return numberValue < MAX_SAFE_INTEGER ? numberValue : value;\n    }\n\n    return value;\n  }\n\n  /**\n   * Gets a sorted copy of the data array based on the state of the MatSort. Called\n   * after changes are made to the filtered data or when sort changes are emitted from MatSort.\n   * By default, the function retrieves the active sort and its direction and compares data\n   * by retrieving data using the sortingDataAccessor. May be overridden for a custom implementation\n   * of data ordering.\n   * @param data The array of data that should be sorted.\n   * @param sort The connected MatSort that holds the current sort state.\n   */\n  sortData: ((data: T[], sort: MatSort) => T[]) = (data: T[], sort: MatSort): T[] => {\n    const active = sort.active;\n    const direction = sort.direction;\n    if (!active || direction == '') { return data; }\n\n    return data.sort((a, b) => {\n      let valueA = this.sortingDataAccessor(a, active);\n      let valueB = this.sortingDataAccessor(b, active);\n\n      // If both valueA and valueB exist (truthy), then compare the two. Otherwise, check if\n      // one value exists while the other doesn't. In this case, existing value should come first.\n      // This avoids inconsistent results when comparing values to undefined/null.\n      // If neither value exists, return 0 (equal).\n      let comparatorResult = 0;\n      if (valueA != null && valueB != null) {\n        // Check if one value is greater than the other; if equal, comparatorResult should remain 0.\n        if (valueA > valueB) {\n          comparatorResult = 1;\n        } else if (valueA < valueB) {\n          comparatorResult = -1;\n        }\n      } else if (valueA != null) {\n        comparatorResult = 1;\n      } else if (valueB != null) {\n        comparatorResult = -1;\n      }\n\n      return comparatorResult * (direction == 'asc' ? 1 : -1);\n    });\n  }\n\n  /**\n   * Checks if a data object matches the data source's filter string. By default, each data object\n   * is converted to a string of its properties and returns true if the filter has\n   * at least one occurrence in that string. By default, the filter string has its whitespace\n   * trimmed and the match is case-insensitive. May be overridden for a custom implementation of\n   * filter matching.\n   * @param data Data object used to check against the filter.\n   * @param filter Filter string that has been set on the data source.\n   * @returns Whether the filter matches against the data\n   */\n  filterPredicate: ((data: T, filter: string) => boolean) = (data: T, filter: string): boolean => {\n    // Transform the data into a lowercase string of all property values.\n    const accumulator = (currentTerm, key) => currentTerm + data[key];\n    const dataStr = Object.keys(data).reduce(accumulator, '').toLowerCase();\n\n    // Transform the filter by converting it to lowercase and removing whitespace.\n    const transformedFilter = filter.trim().toLowerCase();\n\n    return dataStr.indexOf(transformedFilter) != -1;\n  }\n\n  constructor(initialData: T[] = []) {\n    super();\n    this._data = new BehaviorSubject<T[]>(initialData);\n    this._updateChangeSubscription();\n  }\n\n  /**\n   * Subscribe to changes that should trigger an update to the table's rendered rows. When the\n   * changes occur, process the current state of the filter, sort, and pagination along with\n   * the provided base data and send it to the table for rendering.\n   */\n  _updateChangeSubscription() {\n    // Sorting and/or pagination should be watched if MatSort and/or MatPaginator are provided.\n    // The events should emit whenever the component emits a change or initializes, or if no\n    // component is provided, a stream with just a null event should be provided.\n    // The `sortChange` and `pageChange` acts as a signal to the combineLatests below so that the\n    // pipeline can progress to the next step. Note that the value from these streams are not used,\n    // they purely act as a signal to progress in the pipeline.\n    const sortChange: Observable<Sort|null|void> = this._sort ?\n        merge<Sort|void>(this._sort.sortChange, this._sort.initialized) :\n        observableOf(null);\n    const pageChange: Observable<PageEvent|null|void> = this._paginator ?\n        merge<PageEvent|void>(this._paginator.page, this._paginator.initialized) :\n        observableOf(null);\n\n    const dataStream = this._data;\n    // Watch for base data or filter changes to provide a filtered set of data.\n    const filteredData = combineLatest(dataStream, this._filter)\n      .pipe(map(([data]) => this._filterData(data)));\n    // Watch for filtered data or sort changes to provide an ordered set of data.\n    const orderedData = combineLatest(filteredData, sortChange)\n      .pipe(map(([data]) => this._orderData(data)));\n    // Watch for ordered data or page changes to provide a paged set of data.\n    const paginatedData = combineLatest(orderedData, pageChange)\n      .pipe(map(([data]) => this._pageData(data)));\n    // Watched for paged data changes and send the result to the table to render.\n    this._renderChangesSubscription.unsubscribe();\n    this._renderChangesSubscription = paginatedData.subscribe(data => this._renderData.next(data));\n  }\n\n  /**\n   * Returns a filtered data array where each filter object contains the filter string within\n   * the result of the filterTermAccessor function. If no filter is set, returns the data array\n   * as provided.\n   */\n  _filterData(data: T[]) {\n    // If there is a filter string, filter out data that does not contain it.\n    // Each data object is converted to a string using the function defined by filterTermAccessor.\n    // May be overridden for customization.\n    this.filteredData =\n        !this.filter ? data : data.filter(obj => this.filterPredicate(obj, this.filter));\n\n    if (this.paginator) { this._updatePaginator(this.filteredData.length); }\n\n    return this.filteredData;\n  }\n\n  /**\n   * Returns a sorted copy of the data if MatSort has a sort applied, otherwise just returns the\n   * data array as provided. Uses the default data accessor for data lookup, unless a\n   * sortDataAccessor function is defined.\n   */\n  _orderData(data: T[]): T[] {\n    // If there is no active sort or direction, return the data without trying to sort.\n    if (!this.sort) { return data; }\n\n    return this.sortData(data.slice(), this.sort);\n  }\n\n  /**\n   * Returns a paged splice of the provided data array according to the provided MatPaginator's page\n   * index and length. If there is no paginator provided, returns the data array as provided.\n   */\n  _pageData(data: T[]): T[] {\n    if (!this.paginator) { return data; }\n\n    const startIndex = this.paginator.pageIndex * this.paginator.pageSize;\n    return data.slice().splice(startIndex, this.paginator.pageSize);\n  }\n\n  /**\n   * Updates the paginator to reflect the length of the filtered data, and makes sure that the page\n   * index does not exceed the paginator's last page. Values are changed in a resolved promise to\n   * guard against making property changes within a round of change detection.\n   */\n  _updatePaginator(filteredDataLength: number) {\n    Promise.resolve().then(() => {\n      if (!this.paginator) { return; }\n\n      this.paginator.length = filteredDataLength;\n\n      // If the page index is set beyond the page, reduce it to the last page.\n      if (this.paginator.pageIndex > 0) {\n        const lastPageIndex = Math.ceil(this.paginator.length / this.paginator.pageSize) - 1 || 0;\n        this.paginator.pageIndex = Math.min(this.paginator.pageIndex, lastPageIndex);\n      }\n    });\n  }\n\n  /**\n   * Used by the MatTable. Called when it connects to the data source.\n   * @docs-private\n   */\n  connect() { return this._renderData; }\n\n  /**\n   * Used by the MatTable. Called when it is destroyed. No-op.\n   * @docs-private\n   */\n  disconnect() { }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, ElementRef, Inject, InjectionToken, NgZone} from '@angular/core';\n\n\n/**\n * Interface for a a MatInkBar positioner method, defining the positioning and width of the ink\n * bar in a set of tabs.\n */\n// tslint:disable-next-line class-name Using leading underscore to denote internal interface.\nexport interface _MatInkBarPositioner {\n  (element: HTMLElement): { left: string, width: string };\n}\n\n/** Injection token for the MatInkBar's Positioner. */\nexport const _MAT_INK_BAR_POSITIONER =\n  new InjectionToken<_MatInkBarPositioner>('MatInkBarPositioner', {\n    providedIn: 'root',\n    factory: _MAT_INK_BAR_POSITIONER_FACTORY\n  });\n\n/**\n * The default positioner function for the MatInkBar.\n * @docs-private\n */\nexport function _MAT_INK_BAR_POSITIONER_FACTORY(): _MatInkBarPositioner {\n  const method = (element: HTMLElement) => ({\n    left: element ? (element.offsetLeft || 0) + 'px' : '0',\n    width: element ? (element.offsetWidth || 0) + 'px' : '0',\n  });\n\n  return method;\n}\n\n/**\n * The ink-bar is used to display and animate the line underneath the current active tab label.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-ink-bar',\n  host: {\n    'class': 'mat-ink-bar',\n  },\n})\nexport class MatInkBar {\n  constructor(\n    private _elementRef: ElementRef<HTMLElement>,\n    private _ngZone: NgZone,\n    @Inject(_MAT_INK_BAR_POSITIONER) private _inkBarPositioner: _MatInkBarPositioner) { }\n\n  /**\n   * Calculates the styles from the provided element in order to align the ink-bar to that element.\n   * Shows the ink bar if previously set as hidden.\n   * @param element\n   */\n  alignToElement(element: HTMLElement) {\n    this.show();\n\n    if (typeof requestAnimationFrame !== 'undefined') {\n      this._ngZone.runOutsideAngular(() => {\n        requestAnimationFrame(() => this._setStyles(element));\n      });\n    } else {\n      this._setStyles(element);\n    }\n  }\n\n  /** Shows the ink bar. */\n  show(): void {\n    this._elementRef.nativeElement.style.visibility = 'visible';\n  }\n\n  /** Hides the ink bar. */\n  hide(): void {\n    this._elementRef.nativeElement.style.visibility = 'hidden';\n  }\n\n  /**\n   * Sets the proper styles to the ink bar element.\n   * @param element\n   */\n  private _setStyles(element: HTMLElement) {\n    const positions = this._inkBarPositioner(element);\n    const inkBar: HTMLElement = this._elementRef.nativeElement;\n\n    inkBar.style.left = positions.left;\n    inkBar.style.width = positions.width;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, TemplateRef} from '@angular/core';\n\n/** Decorates the `ng-template` tags and reads out the template from it. */\n@Directive({selector: '[matTabContent]'})\nexport class MatTabContent {\n  constructor(public template: TemplateRef<any>) { }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive} from '@angular/core';\nimport {CdkPortal} from '@angular/cdk/portal';\n\n// TODO(devversion): Workaround for https://github.com/angular/material2/issues/12760\nexport const _CdkPortal = CdkPortal;\n\n/** Used to flag tab labels for use with the portal directive */\n@Directive({\n  selector: '[mat-tab-label], [matTabLabel]',\n})\nexport class MatTabLabel extends _CdkPortal {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {TemplatePortal} from '@angular/cdk/portal';\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  ContentChild,\n  Input,\n  OnChanges,\n  OnDestroy,\n  OnInit,\n  SimpleChanges,\n  TemplateRef,\n  ViewChild,\n  ViewContainerRef,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {CanDisable, CanDisableCtor, mixinDisabled} from '@angular/material/core';\nimport {Subject} from 'rxjs';\nimport {MatTabContent} from './tab-content';\nimport {MatTabLabel} from './tab-label';\n\n\n// Boilerplate for applying mixins to MatTab.\n/** @docs-private */\nexport class MatTabBase {}\nexport const _MatTabMixinBase: CanDisableCtor & typeof MatTabBase =\n    mixinDisabled(MatTabBase);\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-tab',\n  templateUrl: 'tab.html',\n  inputs: ['disabled'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matTab',\n})\nexport class MatTab extends _MatTabMixinBase implements OnInit, CanDisable, OnChanges, OnDestroy {\n  /** Content for the tab label given by `<ng-template mat-tab-label>`. */\n  @ContentChild(MatTabLabel) templateLabel: MatTabLabel;\n\n  /**\n   * Template provided in the tab content that will be used if present, used to enable lazy-loading\n   */\n  @ContentChild(MatTabContent, {read: TemplateRef}) _explicitContent: TemplateRef<any>;\n\n  /** Template inside the MatTab view that contains an `<ng-content>`. */\n  @ViewChild(TemplateRef) _implicitContent: TemplateRef<any>;\n\n  /** Plain text label for the tab, used when there is no template label. */\n  @Input('label') textLabel: string = '';\n\n  /** Aria label for the tab. */\n  @Input('aria-label') ariaLabel: string;\n\n  /**\n   * Reference to the element that the tab is labelled by.\n   * Will be cleared if `aria-label` is set at the same time.\n   */\n  @Input('aria-labelledby') ariaLabelledby: string;\n\n  /** Portal that will be the hosted content of the tab */\n  private _contentPortal: TemplatePortal | null = null;\n\n  /** @docs-private */\n  get content(): TemplatePortal | null {\n    return this._contentPortal;\n  }\n\n  /** Emits whenever the internal state of the tab changes. */\n  readonly _stateChanges = new Subject<void>();\n\n  /**\n   * The relatively indexed position where 0 represents the center, negative is left, and positive\n   * represents the right.\n   */\n  position: number | null = null;\n\n  /**\n   * The initial relatively index origin of the tab if it was created and selected after there\n   * was already a selected tab. Provides context of what position the tab should originate from.\n   */\n  origin: number | null = null;\n\n  /**\n   * Whether the tab is currently active.\n   */\n  isActive = false;\n\n  constructor(private _viewContainerRef: ViewContainerRef) {\n    super();\n  }\n\n  ngOnChanges(changes: SimpleChanges): void {\n    if (changes.hasOwnProperty('textLabel') || changes.hasOwnProperty('disabled')) {\n      this._stateChanges.next();\n    }\n  }\n\n  ngOnDestroy(): void {\n    this._stateChanges.complete();\n  }\n\n  ngOnInit(): void {\n    this._contentPortal = new TemplatePortal(\n        this._explicitContent || this._implicitContent, this._viewContainerRef);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/** Animations used by the Material tabs. */\nexport const matTabsAnimations: {\n  readonly translateTab: AnimationTriggerMetadata;\n} = {\n  /** Animation translates a tab along the X axis. */\n  translateTab: trigger('translateTab', [\n    // Note: transitions to `none` instead of 0, because some browsers might blur the content.\n    state('center, void, left-origin-center, right-origin-center', style({transform: 'none'})),\n\n    // If the tab is either on the left or right, we additionally add a `min-height` of 1px\n    // in order to ensure that the element has a height before its state changes. This is\n    // necessary because Chrome does seem to skip the transition in RTL mode if the element does\n    // not have a static height and is not rendered. See related issue: #9465\n    state('left', style({transform: 'translate3d(-100%, 0, 0)', minHeight: '1px'})),\n    state('right', style({transform: 'translate3d(100%, 0, 0)', minHeight: '1px'})),\n\n    transition('* => left, * => right, left => center, right => center',\n        animate('500ms cubic-bezier(0.35, 0, 0.25, 1)')),\n    transition('void => left-origin-center', [\n      style({transform: 'translate3d(-100%, 0, 0)'}),\n      animate('500ms cubic-bezier(0.35, 0, 0.25, 1)')\n    ]),\n    transition('void => right-origin-center', [\n      style({transform: 'translate3d(100%, 0, 0)'}),\n      animate('500ms cubic-bezier(0.35, 0, 0.25, 1)')\n    ])\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ChangeDetectorRef,\n  Input,\n  Inject,\n  Output,\n  EventEmitter,\n  OnDestroy,\n  OnInit,\n  ElementRef,\n  Directive,\n  Optional,\n  ViewEncapsulation,\n  ChangeDetectionStrategy,\n  ComponentFactoryResolver,\n  ViewContainerRef,\n  forwardRef,\n  ViewChild,\n} from '@angular/core';\nimport {AnimationEvent} from '@angular/animations';\nimport {TemplatePortal, CdkPortalOutlet, PortalHostDirective} from '@angular/cdk/portal';\nimport {Directionality, Direction} from '@angular/cdk/bidi';\nimport {Subscription} from 'rxjs';\nimport {matTabsAnimations} from './tabs-animations';\nimport {startWith} from 'rxjs/operators';\n\n/**\n * These position states are used internally as animation states for the tab body. Setting the\n * position state to left, right, or center will transition the tab body from its current\n * position to its respective state. If there is not current position (void, in the case of a new\n * tab body), then there will be no transition animation to its state.\n *\n * In the case of a new tab body that should immediately be centered with an animating transition,\n * then left-origin-center or right-origin-center can be used, which will use left or right as its\n * psuedo-prior state.\n */\nexport type MatTabBodyPositionState =\n    'left' | 'center' | 'right' | 'left-origin-center' | 'right-origin-center';\n\n/**\n * The origin state is an internally used state that is set on a new tab body indicating if it\n * began to the left or right of the prior selected index. For example, if the selected index was\n * set to 1, and a new tab is created and selected at index 2, then the tab body would have an\n * origin of right because its index was greater than the prior selected index.\n */\nexport type MatTabBodyOriginState = 'left' | 'right';\n\n/**\n * The portal host directive for the contents of the tab.\n * @docs-private\n */\n@Directive({\n  selector: '[matTabBodyHost]'\n})\nexport class MatTabBodyPortal extends CdkPortalOutlet implements OnInit, OnDestroy {\n  /** Subscription to events for when the tab body begins centering. */\n  private _centeringSub = Subscription.EMPTY;\n  /** Subscription to events for when the tab body finishes leaving from center position. */\n  private _leavingSub = Subscription.EMPTY;\n\n  constructor(\n    componentFactoryResolver: ComponentFactoryResolver,\n    viewContainerRef: ViewContainerRef,\n    @Inject(forwardRef(() => MatTabBody)) private _host: MatTabBody) {\n      super(componentFactoryResolver, viewContainerRef);\n  }\n\n  /** Set initial visibility or set up subscription for changing visibility. */\n  ngOnInit(): void {\n    super.ngOnInit();\n\n    this._centeringSub = this._host._beforeCentering\n      .pipe(startWith(this._host._isCenterPosition(this._host._position)))\n      .subscribe((isCentering: boolean) => {\n        if (isCentering && !this.hasAttached()) {\n          this.attach(this._host._content);\n        }\n      });\n\n    this._leavingSub = this._host._afterLeavingCenter.subscribe(() => {\n      this.detach();\n    });\n  }\n\n  /** Clean up centering subscription. */\n  ngOnDestroy(): void {\n    super.ngOnDestroy();\n    this._centeringSub.unsubscribe();\n    this._leavingSub.unsubscribe();\n  }\n}\n\n/**\n * Wrapper for the contents of a tab.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-tab-body',\n  templateUrl: 'tab-body.html',\n  styleUrls: ['tab-body.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  animations: [matTabsAnimations.translateTab],\n  host: {\n    'class': 'mat-tab-body',\n  },\n})\nexport class MatTabBody implements OnInit, OnDestroy {\n\n  /** Current position of the tab-body in the tab-group. Zero means that the tab is visible. */\n  private _positionIndex: number;\n\n  /** Subscription to the directionality change observable. */\n  private _dirChangeSubscription = Subscription.EMPTY;\n\n  /** Tab body position state. Used by the animation trigger for the current state. */\n  _position: MatTabBodyPositionState;\n\n  /** Event emitted when the tab begins to animate towards the center as the active tab. */\n  @Output() readonly _onCentering: EventEmitter<number> = new EventEmitter<number>();\n\n  /** Event emitted before the centering of the tab begins. */\n  @Output() readonly _beforeCentering: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n  /** Event emitted before the centering of the tab begins. */\n  @Output() readonly _afterLeavingCenter: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n  /** Event emitted when the tab completes its animation towards the center. */\n  @Output() readonly _onCentered: EventEmitter<void> = new EventEmitter<void>(true);\n\n   /** The portal host inside of this container into which the tab body content will be loaded. */\n  @ViewChild(PortalHostDirective) _portalHost: PortalHostDirective;\n\n  /** The tab body content to display. */\n  @Input('content') _content: TemplatePortal;\n\n  /** Position that will be used when the tab is immediately becoming visible after creation. */\n  @Input() origin: number;\n\n  /** The shifted index position of the tab body, where zero represents the active center tab. */\n  @Input()\n  set position(position: number) {\n    this._positionIndex = position;\n    this._computePositionAnimationState();\n  }\n\n  constructor(private _elementRef: ElementRef<HTMLElement>,\n              @Optional() private _dir: Directionality,\n              /**\n               * @breaking-change 7.0.0 changeDetectorRef to be made required.\n               */\n              changeDetectorRef?: ChangeDetectorRef) {\n\n    if (this._dir && changeDetectorRef) {\n      this._dirChangeSubscription = this._dir.change.subscribe(dir => {\n        this._computePositionAnimationState(dir);\n        changeDetectorRef.markForCheck();\n      });\n    }\n  }\n\n  /**\n   * After initialized, check if the content is centered and has an origin. If so, set the\n   * special position states that transition the tab from the left or right before centering.\n   */\n  ngOnInit() {\n    if (this._position == 'center' && this.origin != null) {\n      this._position = this._computePositionFromOrigin();\n    }\n  }\n\n  ngOnDestroy() {\n    this._dirChangeSubscription.unsubscribe();\n  }\n\n  _onTranslateTabStarted(e: AnimationEvent): void {\n    const isCentering = this._isCenterPosition(e.toState);\n    this._beforeCentering.emit(isCentering);\n    if (isCentering) {\n      this._onCentering.emit(this._elementRef.nativeElement.clientHeight);\n    }\n  }\n\n  _onTranslateTabComplete(e: AnimationEvent): void {\n    // If the transition to the center is complete, emit an event.\n    if (this._isCenterPosition(e.toState) && this._isCenterPosition(this._position)) {\n      this._onCentered.emit();\n    }\n\n    if (this._isCenterPosition(e.fromState) && !this._isCenterPosition(this._position)) {\n      this._afterLeavingCenter.emit();\n    }\n  }\n\n  /** The text direction of the containing app. */\n  _getLayoutDirection(): Direction {\n    return this._dir && this._dir.value === 'rtl' ? 'rtl' : 'ltr';\n  }\n\n  /** Whether the provided position state is considered center, regardless of origin. */\n  _isCenterPosition(position: MatTabBodyPositionState|string): boolean {\n    return position == 'center' ||\n        position == 'left-origin-center' ||\n        position == 'right-origin-center';\n  }\n\n  /** Computes the position state that will be used for the tab-body animation trigger. */\n  private _computePositionAnimationState(dir: Direction = this._getLayoutDirection()) {\n    if (this._positionIndex < 0) {\n      this._position = dir == 'ltr' ? 'left' : 'right';\n    } else if (this._positionIndex > 0) {\n      this._position = dir == 'ltr' ? 'right' : 'left';\n    } else {\n      this._position = 'center';\n    }\n  }\n\n  /**\n   * Computes the position state based on the specified origin position. This is used if the\n   * tab is becoming visible immediately after creation.\n   */\n  private _computePositionFromOrigin(): MatTabBodyPositionState {\n    const dir = this._getLayoutDirection();\n\n    if ((dir == 'ltr' && this.origin <= 0) || (dir == 'rtl' && this.origin > 0)) {\n      return 'left-origin-center';\n    }\n\n    return 'right-origin-center';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, ElementRef} from '@angular/core';\nimport {CanDisable, CanDisableCtor, mixinDisabled} from '@angular/material/core';\n\n\n// Boilerplate for applying mixins to MatTabLabelWrapper.\n/** @docs-private */\nexport class MatTabLabelWrapperBase {}\nexport const _MatTabLabelWrapperMixinBase: CanDisableCtor & typeof MatTabLabelWrapperBase =\n    mixinDisabled(MatTabLabelWrapperBase);\n\n/**\n * Used in the `mat-tab-group` view to display tab labels.\n * @docs-private\n */\n@Directive({\n  selector: '[matTabLabelWrapper]',\n  inputs: ['disabled'],\n  host: {\n    '[class.mat-tab-disabled]': 'disabled',\n    '[attr.aria-disabled]': '!!disabled',\n  }\n})\nexport class MatTabLabelWrapper extends _MatTabLabelWrapperMixinBase implements CanDisable {\n  constructor(public elementRef: ElementRef) {\n    super();\n  }\n\n  /** Sets focus on the wrapper element */\n  focus(): void {\n    this.elementRef.nativeElement.focus();\n  }\n\n  getOffsetLeft(): number {\n    return this.elementRef.nativeElement.offsetLeft;\n  }\n\n  getOffsetWidth(): number {\n    return this.elementRef.nativeElement.offsetWidth;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Direction, Directionality} from '@angular/cdk/bidi';\nimport {coerceNumberProperty} from '@angular/cdk/coercion';\nimport {END, ENTER, HOME, SPACE} from '@angular/cdk/keycodes';\nimport {ViewportRuler} from '@angular/cdk/scrolling';\nimport {\n  AfterContentChecked,\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  ElementRef,\n  EventEmitter,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  Output,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {CanDisableRipple, CanDisableRippleCtor, mixinDisableRipple} from '@angular/material/core';\nimport {merge, of as observableOf, Subject} from 'rxjs';\nimport {takeUntil} from 'rxjs/operators';\nimport {MatInkBar} from './ink-bar';\nimport {MatTabLabelWrapper} from './tab-label-wrapper';\nimport {FocusKeyManager} from '@angular/cdk/a11y';\n\n\n/**\n * The directions that scrolling can go in when the header's tabs exceed the header width. 'After'\n * will scroll the header towards the end of the tabs list and 'before' will scroll towards the\n * beginning of the list.\n */\nexport type ScrollDirection = 'after' | 'before';\n\n/**\n * The distance in pixels that will be overshot when scrolling a tab label into view. This helps\n * provide a small affordance to the label next to it.\n */\nconst EXAGGERATED_OVERSCROLL = 60;\n\n// Boilerplate for applying mixins to MatTabHeader.\n/** @docs-private */\nexport class MatTabHeaderBase {}\nexport const _MatTabHeaderMixinBase: CanDisableRippleCtor & typeof MatTabHeaderBase =\n    mixinDisableRipple(MatTabHeaderBase);\n\n/**\n * The header of the tab group which displays a list of all the tabs in the tab group. Includes\n * an ink bar that follows the currently selected tab. When the tabs list's width exceeds the\n * width of the header container, then arrows will be displayed to allow the user to scroll\n * left and right across the header.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-tab-header',\n  templateUrl: 'tab-header.html',\n  styleUrls: ['tab-header.css'],\n  inputs: ['disableRipple'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {\n    'class': 'mat-tab-header',\n    '[class.mat-tab-header-pagination-controls-enabled]': '_showPaginationControls',\n    '[class.mat-tab-header-rtl]': \"_getLayoutDirection() == 'rtl'\",\n  },\n})\nexport class MatTabHeader extends _MatTabHeaderMixinBase\n    implements AfterContentChecked, AfterContentInit, OnDestroy, CanDisableRipple {\n\n  @ContentChildren(MatTabLabelWrapper) _labelWrappers: QueryList<MatTabLabelWrapper>;\n  @ViewChild(MatInkBar) _inkBar: MatInkBar;\n  @ViewChild('tabListContainer') _tabListContainer: ElementRef;\n  @ViewChild('tabList') _tabList: ElementRef;\n\n  /** The distance in pixels that the tab labels should be translated to the left. */\n  private _scrollDistance = 0;\n\n  /** Whether the header should scroll to the selected index after the view has been checked. */\n  private _selectedIndexChanged = false;\n\n  /** Emits when the component is destroyed. */\n  private readonly _destroyed = new Subject<void>();\n\n  /** Whether the controls for pagination should be displayed */\n  _showPaginationControls = false;\n\n  /** Whether the tab list can be scrolled more towards the end of the tab label list. */\n  _disableScrollAfter = true;\n\n  /** Whether the tab list can be scrolled more towards the beginning of the tab label list. */\n  _disableScrollBefore = true;\n\n  /**\n   * The number of tab labels that are displayed on the header. When this changes, the header\n   * should re-evaluate the scroll position.\n   */\n  private _tabLabelCount: number;\n\n  /** Whether the scroll distance has changed and should be applied after the view is checked. */\n  private _scrollDistanceChanged: boolean;\n\n  /** Used to manage focus between the tabs. */\n  private _keyManager: FocusKeyManager<MatTabLabelWrapper>;\n\n  private _selectedIndex: number = 0;\n\n  /** The index of the active tab. */\n  @Input()\n  get selectedIndex(): number { return this._selectedIndex; }\n  set selectedIndex(value: number) {\n    value = coerceNumberProperty(value);\n    this._selectedIndexChanged = this._selectedIndex != value;\n    this._selectedIndex = value;\n\n    if (this._keyManager) {\n      this._keyManager.updateActiveItemIndex(value);\n    }\n  }\n\n  /** Event emitted when the option is selected. */\n  @Output() readonly selectFocusedIndex = new EventEmitter();\n\n  /** Event emitted when a label is focused. */\n  @Output() readonly indexFocused = new EventEmitter();\n\n  constructor(private _elementRef: ElementRef,\n              private _changeDetectorRef: ChangeDetectorRef,\n              private _viewportRuler: ViewportRuler,\n              @Optional() private _dir: Directionality,\n              // @breaking-change 8.0.0 `_ngZone` parameter to be made required.\n              private _ngZone?: NgZone) {\n    super();\n  }\n\n  ngAfterContentChecked(): void {\n    // If the number of tab labels have changed, check if scrolling should be enabled\n    if (this._tabLabelCount != this._labelWrappers.length) {\n      this._updatePagination();\n      this._tabLabelCount = this._labelWrappers.length;\n      this._changeDetectorRef.markForCheck();\n    }\n\n    // If the selected index has changed, scroll to the label and check if the scrolling controls\n    // should be disabled.\n    if (this._selectedIndexChanged) {\n      this._scrollToLabel(this._selectedIndex);\n      this._checkScrollingControls();\n      this._alignInkBarToSelectedTab();\n      this._selectedIndexChanged = false;\n      this._changeDetectorRef.markForCheck();\n    }\n\n    // If the scroll distance has been changed (tab selected, focused, scroll controls activated),\n    // then translate the header to reflect this.\n    if (this._scrollDistanceChanged) {\n      this._updateTabScrollPosition();\n      this._scrollDistanceChanged = false;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  _handleKeydown(event: KeyboardEvent) {\n    switch (event.keyCode) {\n      case HOME:\n        this._keyManager.setFirstItemActive();\n        event.preventDefault();\n        break;\n      case END:\n        this._keyManager.setLastItemActive();\n        event.preventDefault();\n        break;\n      case ENTER:\n      case SPACE:\n        this.selectFocusedIndex.emit(this.focusIndex);\n        event.preventDefault();\n        break;\n      default:\n        this._keyManager.onKeydown(event);\n    }\n  }\n\n  /**\n   * Aligns the ink bar to the selected tab on load.\n   */\n  ngAfterContentInit() {\n    const dirChange = this._dir ? this._dir.change : observableOf(null);\n    const resize = this._viewportRuler.change(150);\n    const realign = () => {\n      this._updatePagination();\n      this._alignInkBarToSelectedTab();\n    };\n\n    this._keyManager = new FocusKeyManager(this._labelWrappers)\n      .withHorizontalOrientation(this._getLayoutDirection())\n      .withWrap();\n\n    this._keyManager.updateActiveItem(0);\n\n    // Defer the first call in order to allow for slower browsers to lay out the elements.\n    // This helps in cases where the user lands directly on a page with paginated tabs.\n    typeof requestAnimationFrame !== 'undefined' ? requestAnimationFrame(realign) : realign();\n\n    // On dir change or window resize, realign the ink bar and update the orientation of\n    // the key manager if the direction has changed.\n    merge(dirChange, resize).pipe(takeUntil(this._destroyed)).subscribe(() => {\n      realign();\n      this._keyManager.withHorizontalOrientation(this._getLayoutDirection());\n    });\n\n    // If there is a change in the focus key manager we need to emit the `indexFocused`\n    // event in order to provide a public event that notifies about focus changes. Also we realign\n    // the tabs container by scrolling the new focused tab into the visible section.\n    this._keyManager.change.pipe(takeUntil(this._destroyed)).subscribe(newFocusIndex => {\n      this.indexFocused.emit(newFocusIndex);\n      this._setTabFocus(newFocusIndex);\n    });\n  }\n\n  ngOnDestroy() {\n    this._destroyed.next();\n    this._destroyed.complete();\n  }\n\n  /**\n   * Callback for when the MutationObserver detects that the content has changed.\n   */\n  _onContentChanges() {\n    const zoneCallback = () => {\n      this._updatePagination();\n      this._alignInkBarToSelectedTab();\n      this._changeDetectorRef.markForCheck();\n    };\n\n    // The content observer runs outside the `NgZone` by default, which\n    // means that we need to bring the callback back in ourselves.\n    // @breaking-change 8.0.0 Remove null check for `_ngZone` once it's a required parameter.\n    this._ngZone ? this._ngZone.run(zoneCallback) : zoneCallback();\n  }\n\n  /**\n   * Updating the view whether pagination should be enabled or not\n   */\n  _updatePagination() {\n    this._checkPaginationEnabled();\n    this._checkScrollingControls();\n    this._updateTabScrollPosition();\n  }\n\n  /** Tracks which element has focus; used for keyboard navigation */\n  get focusIndex(): number {\n    return this._keyManager ? this._keyManager.activeItemIndex! : 0;\n  }\n\n  /** When the focus index is set, we must manually send focus to the correct label */\n  set focusIndex(value: number) {\n    if (!this._isValidIndex(value) || this.focusIndex === value || !this._keyManager) {\n      return;\n    }\n\n    this._keyManager.setActiveItem(value);\n  }\n\n  /**\n   * Determines if an index is valid.  If the tabs are not ready yet, we assume that the user is\n   * providing a valid index and return true.\n   */\n  _isValidIndex(index: number): boolean {\n    if (!this._labelWrappers) { return true; }\n\n    const tab = this._labelWrappers ? this._labelWrappers.toArray()[index] : null;\n    return !!tab && !tab.disabled;\n  }\n\n  /**\n   * Sets focus on the HTML element for the label wrapper and scrolls it into the view if\n   * scrolling is enabled.\n   */\n  _setTabFocus(tabIndex: number) {\n    if (this._showPaginationControls) {\n      this._scrollToLabel(tabIndex);\n    }\n\n    if (this._labelWrappers && this._labelWrappers.length) {\n      this._labelWrappers.toArray()[tabIndex].focus();\n\n      // Do not let the browser manage scrolling to focus the element, this will be handled\n      // by using translation. In LTR, the scroll left should be 0. In RTL, the scroll width\n      // should be the full width minus the offset width.\n      const containerEl = this._tabListContainer.nativeElement;\n      const dir = this._getLayoutDirection();\n\n      if (dir == 'ltr') {\n        containerEl.scrollLeft = 0;\n      } else {\n        containerEl.scrollLeft = containerEl.scrollWidth - containerEl.offsetWidth;\n      }\n    }\n  }\n\n  /** The layout direction of the containing app. */\n  _getLayoutDirection(): Direction {\n    return this._dir && this._dir.value === 'rtl' ? 'rtl' : 'ltr';\n  }\n\n  /** Performs the CSS transformation on the tab list that will cause the list to scroll. */\n  _updateTabScrollPosition() {\n    const scrollDistance = this.scrollDistance;\n    const translateX = this._getLayoutDirection() === 'ltr' ? -scrollDistance : scrollDistance;\n\n    // Don't use `translate3d` here because we don't want to create a new layer. A new layer\n    // seems to cause flickering and overflow in Internet Explorer. For example, the ink bar\n    // and ripples will exceed the boundaries of the visible tab bar.\n    // See: https://github.com/angular/material2/issues/10276\n    this._tabList.nativeElement.style.transform = `translateX(${translateX}px)`;\n  }\n\n  /** Sets the distance in pixels that the tab header should be transformed in the X-axis. */\n  get scrollDistance(): number { return this._scrollDistance; }\n  set scrollDistance(v: number) {\n    this._scrollDistance = Math.max(0, Math.min(this._getMaxScrollDistance(), v));\n\n    // Mark that the scroll distance has changed so that after the view is checked, the CSS\n    // transformation can move the header.\n    this._scrollDistanceChanged = true;\n    this._checkScrollingControls();\n  }\n\n  /**\n   * Moves the tab list in the 'before' or 'after' direction (towards the beginning of the list or\n   * the end of the list, respectively). The distance to scroll is computed to be a third of the\n   * length of the tab list view window.\n   *\n   * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n   * should be called sparingly.\n   */\n  _scrollHeader(scrollDir: ScrollDirection) {\n    const viewLength = this._tabListContainer.nativeElement.offsetWidth;\n\n    // Move the scroll distance one-third the length of the tab list's viewport.\n    this.scrollDistance += (scrollDir == 'before' ? -1 : 1) * viewLength / 3;\n  }\n\n  /**\n   * Moves the tab list such that the desired tab label (marked by index) is moved into view.\n   *\n   * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n   * should be called sparingly.\n   */\n  _scrollToLabel(labelIndex: number) {\n    const selectedLabel = this._labelWrappers ? this._labelWrappers.toArray()[labelIndex] : null;\n\n    if (!selectedLabel) { return; }\n\n    // The view length is the visible width of the tab labels.\n    const viewLength = this._tabListContainer.nativeElement.offsetWidth;\n\n    let labelBeforePos: number, labelAfterPos: number;\n    if (this._getLayoutDirection() == 'ltr') {\n      labelBeforePos = selectedLabel.getOffsetLeft();\n      labelAfterPos = labelBeforePos + selectedLabel.getOffsetWidth();\n    } else {\n      labelAfterPos = this._tabList.nativeElement.offsetWidth - selectedLabel.getOffsetLeft();\n      labelBeforePos = labelAfterPos - selectedLabel.getOffsetWidth();\n    }\n\n    const beforeVisiblePos = this.scrollDistance;\n    const afterVisiblePos = this.scrollDistance + viewLength;\n\n    if (labelBeforePos < beforeVisiblePos) {\n      // Scroll header to move label to the before direction\n      this.scrollDistance -= beforeVisiblePos - labelBeforePos + EXAGGERATED_OVERSCROLL;\n    } else if (labelAfterPos > afterVisiblePos) {\n      // Scroll header to move label to the after direction\n      this.scrollDistance += labelAfterPos - afterVisiblePos + EXAGGERATED_OVERSCROLL;\n    }\n  }\n\n  /**\n   * Evaluate whether the pagination controls should be displayed. If the scroll width of the\n   * tab list is wider than the size of the header container, then the pagination controls should\n   * be shown.\n   *\n   * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n   * should be called sparingly.\n   */\n  _checkPaginationEnabled() {\n    const isEnabled =\n        this._tabList.nativeElement.scrollWidth > this._elementRef.nativeElement.offsetWidth;\n\n    if (!isEnabled) {\n      this.scrollDistance = 0;\n    }\n\n    if (isEnabled !== this._showPaginationControls) {\n      this._changeDetectorRef.markForCheck();\n    }\n\n    this._showPaginationControls = isEnabled;\n  }\n\n  /**\n   * Evaluate whether the before and after controls should be enabled or disabled.\n   * If the header is at the beginning of the list (scroll distance is equal to 0) then disable the\n   * before button. If the header is at the end of the list (scroll distance is equal to the\n   * maximum distance we can scroll), then disable the after button.\n   *\n   * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n   * should be called sparingly.\n   */\n  _checkScrollingControls() {\n    // Check if the pagination arrows should be activated.\n    this._disableScrollBefore = this.scrollDistance == 0;\n    this._disableScrollAfter = this.scrollDistance == this._getMaxScrollDistance();\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /**\n   * Determines what is the maximum length in pixels that can be set for the scroll distance. This\n   * is equal to the difference in width between the tab list container and tab header container.\n   *\n   * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n   * should be called sparingly.\n   */\n  _getMaxScrollDistance(): number {\n    const lengthOfTabList = this._tabList.nativeElement.scrollWidth;\n    const viewLength = this._tabListContainer.nativeElement.offsetWidth;\n    return (lengthOfTabList - viewLength) || 0;\n  }\n\n  /** Tells the ink-bar to align itself to the current label wrapper */\n  _alignInkBarToSelectedTab(): void {\n    const selectedLabelWrapper = this._labelWrappers && this._labelWrappers.length ?\n        this._labelWrappers.toArray()[this.selectedIndex].elementRef.nativeElement :\n        null;\n\n    this._inkBar.alignToElement(selectedLabelWrapper!);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty, coerceNumberProperty} from '@angular/cdk/coercion';\nimport {\n  AfterContentChecked,\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  ElementRef,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  Output,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {\n  CanColor,\n  CanColorCtor,\n  CanDisableRipple,\n  CanDisableRippleCtor,\n  mixinColor,\n  mixinDisableRipple,\n  ThemePalette,\n} from '@angular/material/core';\nimport {merge, Subscription} from 'rxjs';\nimport {MatTab} from './tab';\nimport {MatTabHeader} from './tab-header';\n\n\n/** Used to generate unique ID's for each tab component */\nlet nextId = 0;\n\n/** A simple change event emitted on focus or selection changes. */\nexport class MatTabChangeEvent {\n  /** Index of the currently-selected tab. */\n  index: number;\n  /** Reference to the currently-selected tab. */\n  tab: MatTab;\n}\n\n/** Possible positions for the tab header. */\nexport type MatTabHeaderPosition = 'above' | 'below';\n\n// Boilerplate for applying mixins to MatTabGroup.\n/** @docs-private */\nexport class MatTabGroupBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatTabGroupMixinBase: CanColorCtor & CanDisableRippleCtor & typeof MatTabGroupBase =\n    mixinColor(mixinDisableRipple(MatTabGroupBase), 'primary');\n\n/**\n * Material design tab-group component.  Supports basic tab pairs (label + content) and includes\n * animated ink-bar, keyboard navigation, and screen reader.\n * See: https://material.io/design/components/tabs.html\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-tab-group',\n  exportAs: 'matTabGroup',\n  templateUrl: 'tab-group.html',\n  styleUrls: ['tab-group.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  inputs: ['color', 'disableRipple'],\n  host: {\n    'class': 'mat-tab-group',\n    '[class.mat-tab-group-dynamic-height]': 'dynamicHeight',\n    '[class.mat-tab-group-inverted-header]': 'headerPosition === \"below\"',\n  },\n})\nexport class MatTabGroup extends _MatTabGroupMixinBase implements AfterContentInit,\n    AfterContentChecked, OnDestroy, CanColor, CanDisableRipple {\n\n  @ContentChildren(MatTab) _tabs: QueryList<MatTab>;\n\n  @ViewChild('tabBodyWrapper') _tabBodyWrapper: ElementRef;\n\n  @ViewChild('tabHeader') _tabHeader: MatTabHeader;\n\n  /** The tab index that should be selected after the content has been checked. */\n  private _indexToSelect: number | null = 0;\n\n  /** Snapshot of the height of the tab body wrapper before another tab is activated. */\n  private _tabBodyWrapperHeight: number = 0;\n\n  /** Subscription to tabs being added/removed. */\n  private _tabsSubscription = Subscription.EMPTY;\n\n  /** Subscription to changes in the tab labels. */\n  private _tabLabelSubscription = Subscription.EMPTY;\n\n  /** Whether the tab group should grow to the size of the active tab. */\n  @Input()\n  get dynamicHeight(): boolean { return this._dynamicHeight; }\n  set dynamicHeight(value: boolean) { this._dynamicHeight = coerceBooleanProperty(value); }\n  private _dynamicHeight: boolean = false;\n\n  /** The index of the active tab. */\n  @Input()\n  get selectedIndex(): number | null { return this._selectedIndex; }\n  set selectedIndex(value: number | null) {\n    this._indexToSelect = coerceNumberProperty(value, null);\n  }\n  private _selectedIndex: number | null = null;\n\n  /** Position of the tab header. */\n  @Input() headerPosition: MatTabHeaderPosition = 'above';\n\n  /** Background color of the tab group. */\n  @Input()\n  get backgroundColor(): ThemePalette { return this._backgroundColor; }\n  set backgroundColor(value: ThemePalette) {\n    const nativeElement: HTMLElement = this._elementRef.nativeElement;\n\n    nativeElement.classList.remove(`mat-background-${this.backgroundColor}`);\n\n    if (value) {\n      nativeElement.classList.add(`mat-background-${value}`);\n    }\n\n    this._backgroundColor = value;\n  }\n  private _backgroundColor: ThemePalette;\n\n  /** Output to enable support for two-way binding on `[(selectedIndex)]` */\n  @Output() readonly selectedIndexChange: EventEmitter<number> = new EventEmitter<number>();\n\n  /** Event emitted when focus has changed within a tab group. */\n  @Output() readonly focusChange: EventEmitter<MatTabChangeEvent> =\n      new EventEmitter<MatTabChangeEvent>();\n\n  /** Event emitted when the body animation has completed */\n  @Output() readonly animationDone: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Event emitted when the tab selection has changed. */\n  @Output() readonly selectedTabChange: EventEmitter<MatTabChangeEvent> =\n      new EventEmitter<MatTabChangeEvent>(true);\n\n  private _groupId: number;\n\n  constructor(elementRef: ElementRef,\n              private _changeDetectorRef: ChangeDetectorRef) {\n    super(elementRef);\n    this._groupId = nextId++;\n  }\n\n  /**\n   * After the content is checked, this component knows what tabs have been defined\n   * and what the selected index should be. This is where we can know exactly what position\n   * each tab should be in according to the new selected index, and additionally we know how\n   * a new selected tab should transition in (from the left or right).\n   */\n  ngAfterContentChecked() {\n    // Don't clamp the `indexToSelect` immediately in the setter because it can happen that\n    // the amount of tabs changes before the actual change detection runs.\n    const indexToSelect = this._indexToSelect = this._clampTabIndex(this._indexToSelect);\n\n    // If there is a change in selected index, emit a change event. Should not trigger if\n    // the selected index has not yet been initialized.\n    if (this._selectedIndex != indexToSelect) {\n      const isFirstRun = this._selectedIndex == null;\n\n      if (!isFirstRun) {\n        this.selectedTabChange.emit(this._createChangeEvent(indexToSelect));\n      }\n\n      // Changing these values after change detection has run\n      // since the checked content may contain references to them.\n      Promise.resolve().then(() => {\n        this._tabs.forEach((tab, index) => tab.isActive = index === indexToSelect);\n\n        if (!isFirstRun) {\n          this.selectedIndexChange.emit(indexToSelect);\n        }\n      });\n    }\n\n    // Setup the position for each tab and optionally setup an origin on the next selected tab.\n    this._tabs.forEach((tab: MatTab, index: number) => {\n      tab.position = index - indexToSelect;\n\n      // If there is already a selected tab, then set up an origin for the next selected tab\n      // if it doesn't have one already.\n      if (this._selectedIndex != null && tab.position == 0 && !tab.origin) {\n        tab.origin = indexToSelect - this._selectedIndex;\n      }\n    });\n\n    if (this._selectedIndex !== indexToSelect) {\n      this._selectedIndex = indexToSelect;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  ngAfterContentInit() {\n    this._subscribeToTabLabels();\n\n    // Subscribe to changes in the amount of tabs, in order to be\n    // able to re-render the content as new tabs are added or removed.\n    this._tabsSubscription = this._tabs.changes.subscribe(() => {\n      const indexToSelect = this._clampTabIndex(this._indexToSelect);\n\n      // Maintain the previously-selected tab if a new tab is added or removed and there is no\n      // explicit change that selects a different tab.\n      if (indexToSelect === this._selectedIndex) {\n        const tabs = this._tabs.toArray();\n\n        for (let i = 0; i < tabs.length; i++) {\n          if (tabs[i].isActive) {\n            // Assign both to the `_indexToSelect` and `_selectedIndex` so we don't fire a changed\n            // event, otherwise the consumer may end up in an infinite loop in some edge cases like\n            // adding a tab within the `selectedIndexChange` event.\n            this._indexToSelect = this._selectedIndex = i;\n            break;\n          }\n        }\n      }\n\n      this._subscribeToTabLabels();\n      this._changeDetectorRef.markForCheck();\n    });\n  }\n\n  ngOnDestroy() {\n    this._tabsSubscription.unsubscribe();\n    this._tabLabelSubscription.unsubscribe();\n  }\n\n  /** Re-aligns the ink bar to the selected tab element. */\n  realignInkBar() {\n    if (this._tabHeader) {\n      this._tabHeader._alignInkBarToSelectedTab();\n    }\n  }\n\n  _focusChanged(index: number) {\n    this.focusChange.emit(this._createChangeEvent(index));\n  }\n\n  private _createChangeEvent(index: number): MatTabChangeEvent {\n    const event = new MatTabChangeEvent;\n    event.index = index;\n    if (this._tabs && this._tabs.length) {\n      event.tab = this._tabs.toArray()[index];\n    }\n    return event;\n  }\n\n  /**\n   * Subscribes to changes in the tab labels. This is needed, because the @Input for the label is\n   * on the MatTab component, whereas the data binding is inside the MatTabGroup. In order for the\n   * binding to be updated, we need to subscribe to changes in it and trigger change detection\n   * manually.\n   */\n  private _subscribeToTabLabels() {\n    if (this._tabLabelSubscription) {\n      this._tabLabelSubscription.unsubscribe();\n    }\n\n    this._tabLabelSubscription = merge(...this._tabs.map(tab => tab._stateChanges))\n      .subscribe(() => this._changeDetectorRef.markForCheck());\n  }\n\n  /** Clamps the given index to the bounds of 0 and the tabs length. */\n  private _clampTabIndex(index: number | null): number {\n    // Note the `|| 0`, which ensures that values like NaN can't get through\n    // and which would otherwise throw the component into an infinite loop\n    // (since Math.max(NaN, 0) === NaN).\n    return Math.min(this._tabs.length - 1, Math.max(index || 0, 0));\n  }\n\n  /** Returns a unique id for each tab label element */\n  _getTabLabelId(i: number): string {\n    return `mat-tab-label-${this._groupId}-${i}`;\n  }\n\n  /** Returns a unique id for each tab content element */\n  _getTabContentId(i: number): string {\n    return `mat-tab-content-${this._groupId}-${i}`;\n  }\n\n  /**\n   * Sets the height of the body wrapper to the height of the activating tab if dynamic\n   * height property is true.\n   */\n  _setTabBodyWrapperHeight(tabHeight: number): void {\n    if (!this._dynamicHeight || !this._tabBodyWrapperHeight) { return; }\n\n    const wrapper: HTMLElement = this._tabBodyWrapper.nativeElement;\n\n    wrapper.style.height = this._tabBodyWrapperHeight + 'px';\n\n    // This conditional forces the browser to paint the height so that\n    // the animation to the new height can have an origin.\n    if (this._tabBodyWrapper.nativeElement.offsetHeight) {\n      wrapper.style.height = tabHeight + 'px';\n    }\n  }\n\n  /** Removes the height of the tab body wrapper. */\n  _removeTabBodyWrapperHeight(): void {\n    this._tabBodyWrapperHeight = this._tabBodyWrapper.nativeElement.clientHeight;\n    this._tabBodyWrapper.nativeElement.style.height = '';\n    this.animationDone.emit();\n  }\n\n  /** Handle click events, setting new selected index if appropriate. */\n  _handleClick(tab: MatTab, tabHeader: MatTabHeader, idx: number) {\n    if (!tab.disabled) {\n      this.selectedIndex = tabHeader.focusIndex = idx;\n    }\n  }\n\n  /** Retrieves the tabindex for the tab. */\n  _getTabIndex(tab: MatTab, idx: number): number | null {\n    if (tab.disabled) {\n      return null;\n    }\n    return this.selectedIndex === idx ? 0 : -1;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {Directionality} from '@angular/cdk/bidi';\nimport {Platform} from '@angular/cdk/platform';\nimport {ViewportRuler} from '@angular/cdk/scrolling';\nimport {\n  AfterContentChecked,\n  AfterContentInit,\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  forwardRef,\n  Inject,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {\n  CanColor, CanColorCtor,\n  CanDisable, CanDisableCtor,\n  CanDisableRipple, CanDisableRippleCtor,\n  HasTabIndex, HasTabIndexCtor,\n  MAT_RIPPLE_GLOBAL_OPTIONS,\n  mixinColor,\n  mixinDisabled,\n  mixinDisableRipple,\n  mixinTabIndex, RippleConfig,\n  RippleGlobalOptions,\n  RippleRenderer,\n  RippleTarget,\n  ThemePalette,\n} from '@angular/material/core';\nimport {merge, of as observableOf, Subject} from 'rxjs';\nimport {takeUntil} from 'rxjs/operators';\nimport {MatInkBar} from '../ink-bar';\nimport {FocusMonitor} from '@angular/cdk/a11y';\n\n\n// Boilerplate for applying mixins to MatTabNav.\n/** @docs-private */\nexport class MatTabNavBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatTabNavMixinBase: CanDisableRippleCtor & CanColorCtor & typeof MatTabNavBase =\n    mixinDisableRipple(mixinColor(MatTabNavBase, 'primary'));\n\n/**\n * Navigation component matching the styles of the tab group header.\n * Provides anchored navigation with animated ink bar.\n */\n@Component({\n  moduleId: module.id,\n  selector: '[mat-tab-nav-bar]',\n  exportAs: 'matTabNavBar, matTabNav',\n  inputs: ['color', 'disableRipple'],\n  templateUrl: 'tab-nav-bar.html',\n  styleUrls: ['tab-nav-bar.css'],\n  host: {'class': 'mat-tab-nav-bar'},\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatTabNav extends _MatTabNavMixinBase\n    implements AfterContentChecked, AfterContentInit, CanColor, CanDisableRipple, OnDestroy {\n\n  /** Subject that emits when the component has been destroyed. */\n  private readonly _onDestroy = new Subject<void>();\n\n  private _activeLinkChanged: boolean;\n  private _activeLinkElement: ElementRef<HTMLElement> | null;\n\n  @ViewChild(MatInkBar) _inkBar: MatInkBar;\n\n  /** Query list of all tab links of the tab navigation. */\n  @ContentChildren(forwardRef(() => MatTabLink), {descendants: true})\n  _tabLinks: QueryList<MatTabLink>;\n\n  /** Background color of the tab nav. */\n  @Input()\n  get backgroundColor(): ThemePalette { return this._backgroundColor; }\n  set backgroundColor(value: ThemePalette) {\n    const nativeElement: HTMLElement = this._elementRef.nativeElement;\n\n    nativeElement.classList.remove(`mat-background-${this.backgroundColor}`);\n\n    if (value) {\n      nativeElement.classList.add(`mat-background-${value}`);\n    }\n\n    this._backgroundColor = value;\n  }\n  private _backgroundColor: ThemePalette;\n\n  constructor(elementRef: ElementRef,\n              @Optional() private _dir: Directionality,\n              private _ngZone: NgZone,\n              private _changeDetectorRef: ChangeDetectorRef,\n              private _viewportRuler: ViewportRuler) {\n    super(elementRef);\n  }\n\n  /**\n   * Notifies the component that the active link has been changed.\n   * @breaking-change 7.0.0 `element` parameter to be removed.\n   */\n  updateActiveLink(element: ElementRef) {\n    // Note: keeping the `element` for backwards-compat, but isn't being used for anything.\n    // @breaking-change 7.0.0\n    this._activeLinkChanged = !!element;\n    this._changeDetectorRef.markForCheck();\n  }\n\n  ngAfterContentInit(): void {\n    this._ngZone.runOutsideAngular(() => {\n      const dirChange = this._dir ? this._dir.change : observableOf(null);\n\n      return merge(dirChange, this._viewportRuler.change(10))\n          .pipe(takeUntil(this._onDestroy))\n          .subscribe(() => this._alignInkBar());\n    });\n  }\n\n  /** Checks if the active link has been changed and, if so, will update the ink bar. */\n  ngAfterContentChecked(): void {\n    if (this._activeLinkChanged) {\n      const activeTab = this._tabLinks.find(tab => tab.active);\n\n      this._activeLinkElement = activeTab ? activeTab._elementRef : null;\n      this._alignInkBar();\n      this._activeLinkChanged = false;\n    }\n  }\n\n  ngOnDestroy() {\n    this._onDestroy.next();\n    this._onDestroy.complete();\n  }\n\n  /** Aligns the ink bar to the active link. */\n  _alignInkBar(): void {\n    if (this._activeLinkElement) {\n      this._inkBar.show();\n      this._inkBar.alignToElement(this._activeLinkElement.nativeElement);\n    } else {\n      this._inkBar.hide();\n    }\n  }\n}\n\n\n// Boilerplate for applying mixins to MatTabLink.\nexport class MatTabLinkBase {}\nexport const _MatTabLinkMixinBase:\n    HasTabIndexCtor & CanDisableRippleCtor & CanDisableCtor & typeof MatTabLinkBase =\n        mixinTabIndex(mixinDisableRipple(mixinDisabled(MatTabLinkBase)));\n\n/**\n * Link inside of a `mat-tab-nav-bar`.\n */\n@Directive({\n  selector: '[mat-tab-link], [matTabLink]',\n  exportAs: 'matTabLink',\n  inputs: ['disabled', 'disableRipple', 'tabIndex'],\n  host: {\n    'class': 'mat-tab-link',\n    '[attr.aria-current]': 'active',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.tabIndex]': 'tabIndex',\n    '[class.mat-tab-disabled]': 'disabled',\n    '[class.mat-tab-label-active]': 'active',\n    '(click)': '_handleClick($event)'\n  }\n})\nexport class MatTabLink extends _MatTabLinkMixinBase\n    implements OnDestroy, CanDisable, CanDisableRipple, HasTabIndex, RippleTarget {\n\n  /** Whether the tab link is active or not. */\n  protected _isActive: boolean = false;\n\n  /** Reference to the RippleRenderer for the tab-link. */\n  protected _tabLinkRipple: RippleRenderer;\n\n  /** Whether the ripples are globally disabled through the RippleGlobalOptions */\n  private _ripplesGloballyDisabled = false;\n\n  /** Whether the link is active. */\n  @Input()\n  get active(): boolean { return this._isActive; }\n  set active(value: boolean) {\n    if (value !== this._isActive) {\n      this._isActive = value;\n      this._tabNavBar.updateActiveLink(this._elementRef);\n    }\n  }\n\n  /**\n   * Ripple configuration for ripples that are launched on pointer down.\n   * @docs-private\n   */\n  rippleConfig: RippleConfig = {};\n\n  /**\n   * Whether ripples are disabled on interaction\n   * @docs-private\n   */\n  get rippleDisabled(): boolean {\n    return this.disabled || this.disableRipple || this._tabNavBar.disableRipple ||\n      this._ripplesGloballyDisabled;\n  }\n\n  constructor(private _tabNavBar: MatTabNav,\n              public _elementRef: ElementRef,\n              ngZone: NgZone,\n              platform: Platform,\n              @Optional() @Inject(MAT_RIPPLE_GLOBAL_OPTIONS) globalOptions: RippleGlobalOptions,\n              @Attribute('tabindex') tabIndex: string,\n              /**\n               * @deprecated\n               * @breaking-change 7.0.0 `_focusMonitor` parameter to be made required.\n               */\n              private _focusMonitor?: FocusMonitor) {\n    super();\n\n    this._tabLinkRipple = new RippleRenderer(this, ngZone, _elementRef, platform);\n    this._tabLinkRipple.setupTriggerEvents(_elementRef.nativeElement);\n\n    this.tabIndex = parseInt(tabIndex) || 0;\n\n    if (globalOptions) {\n      this._ripplesGloballyDisabled = !!globalOptions.disabled;\n      // TODO(paul): Once the speedFactor is removed, we no longer need to copy each single option.\n      this.rippleConfig = {\n        terminateOnPointerUp: globalOptions.terminateOnPointerUp,\n        speedFactor: globalOptions.baseSpeedFactor,\n        animation: globalOptions.animation,\n      };\n    }\n\n    if (_focusMonitor) {\n      _focusMonitor.monitor(_elementRef);\n    }\n  }\n\n  ngOnDestroy() {\n    this._tabLinkRipple._removeTriggerEvents();\n\n    if (this._focusMonitor) {\n      this._focusMonitor.stopMonitoring(this._elementRef);\n    }\n  }\n\n  /**\n   * Handles the click event, preventing default navigation if the tab link is disabled.\n   */\n  _handleClick(event: MouseEvent) {\n    if (this.disabled) {\n      event.preventDefault();\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ObserversModule} from '@angular/cdk/observers';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {MatInkBar} from './ink-bar';\nimport {MatTab} from './tab';\nimport {MatTabBody, MatTabBodyPortal} from './tab-body';\nimport {MatTabContent} from './tab-content';\nimport {MatTabGroup} from './tab-group';\nimport {MatTabHeader} from './tab-header';\nimport {MatTabLabel} from './tab-label';\nimport {MatTabLabelWrapper} from './tab-label-wrapper';\nimport {MatTabLink, MatTabNav} from './tab-nav-bar/tab-nav-bar';\nimport {A11yModule} from '@angular/cdk/a11y';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatCommonModule,\n    PortalModule,\n    MatRippleModule,\n    ObserversModule,\n    A11yModule,\n  ],\n  // Don't export all components because some are only to be used internally.\n  exports: [\n    MatCommonModule,\n    MatTabGroup,\n    MatTabLabel,\n    MatTab,\n    MatTabNav,\n    MatTabLink,\n    MatTabContent,\n  ],\n  declarations: [\n    MatTabGroup,\n    MatTabLabel,\n    MatTab,\n    MatInkBar,\n    MatTabLabelWrapper,\n    MatTabNav,\n    MatTabLink,\n    MatTabBody,\n    MatTabBodyPortal,\n    MatTabHeader,\n    MatTabContent,\n  ],\n})\nexport class MatTabsModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  keyframes,\n  AnimationTriggerMetadata, query, animateChild,\n} from '@angular/animations';\nimport {AnimationCurves, AnimationDurations} from '@angular/material/core';\n\nconst SORT_ANIMATION_TRANSITION = AnimationDurations.ENTERING + ' ' +\n                                  AnimationCurves.STANDARD_CURVE;\n\n/** Animations used by MatSort. */\nexport const matSortAnimations: {\n  readonly indicator: AnimationTriggerMetadata;\n  readonly leftPointer: AnimationTriggerMetadata;\n  readonly rightPointer: AnimationTriggerMetadata;\n  readonly arrowOpacity: AnimationTriggerMetadata;\n  readonly arrowPosition: AnimationTriggerMetadata;\n  readonly allowChildren: AnimationTriggerMetadata;\n} = {\n  /** Animation that moves the sort indicator. */\n  indicator: trigger('indicator', [\n    state('active-asc, asc', style({transform: 'translateY(0px)'})),\n    // 10px is the height of the sort indicator, minus the width of the pointers\n    state('active-desc, desc', style({transform: 'translateY(10px)'})),\n    transition('active-asc <=> active-desc', animate(SORT_ANIMATION_TRANSITION))\n  ]),\n\n  /** Animation that rotates the left pointer of the indicator based on the sorting direction. */\n  leftPointer: trigger('leftPointer', [\n    state('active-asc, asc', style({transform: 'rotate(-45deg)'})),\n    state('active-desc, desc', style({transform: 'rotate(45deg)'})),\n    transition('active-asc <=> active-desc', animate(SORT_ANIMATION_TRANSITION))\n  ]),\n\n  /** Animation that rotates the right pointer of the indicator based on the sorting direction. */\n  rightPointer: trigger('rightPointer', [\n    state('active-asc, asc', style({transform: 'rotate(45deg)'})),\n    state('active-desc, desc', style({transform: 'rotate(-45deg)'})),\n    transition('active-asc <=> active-desc', animate(SORT_ANIMATION_TRANSITION))\n  ]),\n\n  /** Animation that controls the arrow opacity. */\n  arrowOpacity: trigger('arrowOpacity', [\n    state('desc-to-active, asc-to-active, active', style({opacity: 1})),\n    state('desc-to-hint, asc-to-hint, hint', style({opacity: .54})),\n    state('hint-to-desc, active-to-desc, desc, hint-to-asc, active-to-asc, asc, void',\n        style({opacity: 0})),\n    // Transition between all states except for immediate transitions\n    transition('* => asc, * => desc, * => active, * => hint, * => void', animate('0ms')),\n    transition('* <=> *', animate(SORT_ANIMATION_TRANSITION)),\n  ]),\n\n  /**\n   * Animation for the translation of the arrow as a whole. States are separated into two\n   * groups: ones with animations and others that are immediate. Immediate states are asc, desc,\n   * peek, and active. The other states define a specific animation (source-to-destination)\n   * and are determined as a function of their prev user-perceived state and what the next state\n   * should be.\n   */\n  arrowPosition: trigger('arrowPosition', [\n    // Hidden Above => Hint Center\n    transition('* => desc-to-hint, * => desc-to-active',\n        animate(SORT_ANIMATION_TRANSITION, keyframes([\n          style({transform: 'translateY(-25%)'}),\n          style({transform: 'translateY(0)'})\n        ]))),\n    // Hint Center => Hidden Below\n    transition('* => hint-to-desc, * => active-to-desc',\n        animate(SORT_ANIMATION_TRANSITION, keyframes([\n          style({transform: 'translateY(0)'}),\n          style({transform: 'translateY(25%)'})\n        ]))),\n    // Hidden Below => Hint Center\n    transition('* => asc-to-hint, * => asc-to-active',\n        animate(SORT_ANIMATION_TRANSITION, keyframes([\n          style({transform: 'translateY(25%)'}),\n          style({transform: 'translateY(0)'})\n        ]))),\n    // Hint Center => Hidden Above\n    transition('* => hint-to-asc, * => active-to-asc',\n        animate(SORT_ANIMATION_TRANSITION, keyframes([\n          style({transform: 'translateY(0)'}),\n          style({transform: 'translateY(-25%)'})\n        ]))),\n    state('desc-to-hint, asc-to-hint, hint, desc-to-active, asc-to-active, active',\n        style({transform: 'translateY(0)'})),\n    state('hint-to-desc, active-to-desc, desc',\n        style({transform: 'translateY(-25%)'})),\n    state('hint-to-asc, active-to-asc, asc',\n        style({transform: 'translateY(25%)'})),\n  ]),\n\n  /** Necessary trigger that calls animate on children animations. */\n  allowChildren: trigger('allowChildren', [\n    transition('* <=> *', [\n      query('@*', animateChild(), {optional: true})\n    ])\n  ]),\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable, SkipSelf, Optional} from '@angular/core';\nimport {Subject} from 'rxjs';\n\n/**\n * To modify the labels and text displayed, create a new instance of MatSortHeaderIntl and\n * include it in a custom provider.\n */\n@Injectable({providedIn: 'root'})\nexport class MatSortHeaderIntl {\n  /**\n   * Stream that emits whenever the labels here are changed. Use this to notify\n   * components if the labels have changed after initialization.\n   */\n  readonly changes: Subject<void> = new Subject<void>();\n\n  /** ARIA label for the sorting button. */\n  sortButtonLabel = (id: string) => {\n    return `Change sorting for ${id}`;\n  }\n}\n/** @docs-private */\nexport function MAT_SORT_HEADER_INTL_PROVIDER_FACTORY(parentIntl: MatSortHeaderIntl) {\n  return parentIntl || new MatSortHeaderIntl();\n}\n\n/** @docs-private */\nexport const MAT_SORT_HEADER_INTL_PROVIDER = {\n  // If there is already an MatSortHeaderIntl available, use that. Otherwise, provide a new one.\n  provide: MatSortHeaderIntl,\n  deps: [[new Optional(), new SkipSelf(), MatSortHeaderIntl]],\n  useFactory: MAT_SORT_HEADER_INTL_PROVIDER_FACTORY\n};\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {CdkColumnDef} from '@angular/cdk/table';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  Input,\n  OnDestroy,\n  OnInit,\n  Optional,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {CanDisable, CanDisableCtor, mixinDisabled} from '@angular/material/core';\nimport {merge, Subscription} from 'rxjs';\nimport {MatSort, MatSortable} from './sort';\nimport {matSortAnimations} from './sort-animations';\nimport {SortDirection} from './sort-direction';\nimport {getSortHeaderNotContainedWithinSortError} from './sort-errors';\nimport {MatSortHeaderIntl} from './sort-header-intl';\n\n\n// Boilerplate for applying mixins to the sort header.\n/** @docs-private */\nexport class MatSortHeaderBase {}\nexport const _MatSortHeaderMixinBase: CanDisableCtor & typeof MatSortHeaderBase =\n    mixinDisabled(MatSortHeaderBase);\n\n/**\n * Valid positions for the arrow to be in for its opacity and translation. If the state is a\n * sort direction, the position of the arrow will be above/below and opacity 0. If the state is\n * hint, the arrow will be in the center with a slight opacity. Active state means the arrow will\n * be fully opaque in the center.\n *\n * @docs-private\n */\nexport type ArrowViewState = SortDirection | 'hint' | 'active';\n\n/**\n * States describing the arrow's animated position (animating fromState to toState).\n * If the fromState is not defined, there will be no animated transition to the toState.\n * @docs-private\n */\nexport interface ArrowViewStateTransition {\n  fromState?: ArrowViewState;\n  toState: ArrowViewState;\n}\n\n/**\n * Applies sorting behavior (click to change sort) and styles to an element, including an\n * arrow to display the current sort direction.\n *\n * Must be provided with an id and contained within a parent MatSort directive.\n *\n * If used on header cells in a CdkTable, it will automatically default its id from its containing\n * column definition.\n */\n@Component({\n  moduleId: module.id,\n  selector: '[mat-sort-header]',\n  exportAs: 'matSortHeader',\n  templateUrl: 'sort-header.html',\n  styleUrls: ['sort-header.css'],\n  host: {\n    '(click)': '_handleClick()',\n    '(mouseenter)': '_setIndicatorHintVisible(true)',\n    '(longpress)': '_setIndicatorHintVisible(true)',\n    '(mouseleave)': '_setIndicatorHintVisible(false)',\n    '[attr.aria-sort]': '_getAriaSortAttribute()',\n    '[class.mat-sort-header-disabled]': '_isDisabled()',\n  },\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  inputs: ['disabled'],\n  animations: [\n    matSortAnimations.indicator,\n    matSortAnimations.leftPointer,\n    matSortAnimations.rightPointer,\n    matSortAnimations.arrowOpacity,\n    matSortAnimations.arrowPosition,\n    matSortAnimations.allowChildren,\n  ]\n})\nexport class MatSortHeader extends _MatSortHeaderMixinBase\n    implements CanDisable, MatSortable, OnDestroy, OnInit {\n  private _rerenderSubscription: Subscription;\n\n  /**\n   * Flag set to true when the indicator should be displayed while the sort is not active. Used to\n   * provide an affordance that the header is sortable by showing on focus and hover.\n   */\n  _showIndicatorHint: boolean = false;\n\n  /**\n   * The view transition state of the arrow (translation/ opacity) - indicates its `from` and `to`\n   * position through the animation. If animations are currently disabled, the fromState is removed\n   * so that there is no animation displayed.\n   */\n  _viewState: ArrowViewStateTransition;\n\n  /** The direction the arrow should be facing according to the current state. */\n  _arrowDirection: SortDirection = '';\n\n  /**\n   * Whether the view state animation should show the transition between the `from` and `to` states.\n   */\n  _disableViewStateAnimation = false;\n\n  /**\n   * ID of this sort header. If used within the context of a CdkColumnDef, this will default to\n   * the column's name.\n   */\n  @Input('mat-sort-header') id: string;\n\n  /** Sets the position of the arrow that displays when sorted. */\n  @Input() arrowPosition: 'before' | 'after' = 'after';\n\n  /** Overrides the sort start value of the containing MatSort for this MatSortable. */\n  @Input() start: 'asc' | 'desc';\n\n  /** Overrides the disable clear value of the containing MatSort for this MatSortable. */\n  @Input()\n  get disableClear(): boolean { return this._disableClear; }\n  set disableClear(v) { this._disableClear = coerceBooleanProperty(v); }\n  private _disableClear: boolean;\n\n  constructor(public _intl: MatSortHeaderIntl,\n              changeDetectorRef: ChangeDetectorRef,\n              @Optional() public _sort: MatSort,\n              @Optional() public _cdkColumnDef: CdkColumnDef) {\n\n    super();\n\n    if (!_sort) {\n      throw getSortHeaderNotContainedWithinSortError();\n    }\n\n    this._rerenderSubscription = merge(_sort.sortChange, _sort._stateChanges, _intl.changes)\n        .subscribe(() => {\n          if (this._isSorted()) {\n            this._updateArrowDirection();\n          }\n\n          // If this header was recently active and now no longer sorted, animate away the arrow.\n          if (!this._isSorted() && this._viewState && this._viewState.toState === 'active') {\n            this._disableViewStateAnimation = false;\n            this._setAnimationTransitionState({fromState: 'active', toState: this._arrowDirection});\n          }\n\n          changeDetectorRef.markForCheck();\n        });\n  }\n\n  ngOnInit() {\n    if (!this.id && this._cdkColumnDef) {\n      this.id = this._cdkColumnDef.name;\n    }\n\n    // Initialize the direction of the arrow and set the view state to be immediately that state.\n    this._updateArrowDirection();\n    this._setAnimationTransitionState(\n        {toState: this._isSorted() ? 'active' : this._arrowDirection});\n\n    this._sort.register(this);\n  }\n\n  ngOnDestroy() {\n    this._sort.deregister(this);\n    this._rerenderSubscription.unsubscribe();\n  }\n\n  /**\n   * Sets the \"hint\" state such that the arrow will be semi-transparently displayed as a hint to the\n   * user showing what the active sort will become. If set to false, the arrow will fade away.\n   */\n  _setIndicatorHintVisible(visible: boolean) {\n    // No-op if the sort header is disabled - should not make the hint visible.\n    if (this._isDisabled() && visible) { return; }\n\n    this._showIndicatorHint = visible;\n\n    if (!this._isSorted()) {\n      this._updateArrowDirection();\n      if (this._showIndicatorHint) {\n        this._setAnimationTransitionState({fromState: this._arrowDirection, toState: 'hint'});\n      } else {\n        this._setAnimationTransitionState({fromState: 'hint', toState: this._arrowDirection});\n      }\n    }\n  }\n\n  /**\n   * Sets the animation transition view state for the arrow's position and opacity. If the\n   * `disableViewStateAnimation` flag is set to true, the `fromState` will be ignored so that\n   * no animation appears.\n   */\n  _setAnimationTransitionState(viewState: ArrowViewStateTransition) {\n    this._viewState = viewState;\n\n    // If the animation for arrow position state (opacity/translation) should be disabled,\n    // remove the fromState so that it jumps right to the toState.\n    if (this._disableViewStateAnimation) {\n      this._viewState = {toState: viewState.toState};\n    }\n  }\n\n  /** Triggers the sort on this sort header and removes the indicator hint. */\n  _handleClick() {\n    if (this._isDisabled()) { return; }\n\n    this._sort.sort(this);\n\n    // Do not show the animation if the header was already shown in the right position.\n    if (this._viewState.toState === 'hint' || this._viewState.toState === 'active') {\n      this._disableViewStateAnimation = true;\n    }\n\n    // If the arrow is now sorted, animate the arrow into place. Otherwise, animate it away into\n    // the direction it is facing.\n    const viewState: ArrowViewStateTransition = this._isSorted() ?\n        {fromState: this._arrowDirection, toState: 'active'} :\n        {fromState: 'active', toState: this._arrowDirection};\n    this._setAnimationTransitionState(viewState);\n\n    this._showIndicatorHint = false;\n  }\n\n  /** Whether this MatSortHeader is currently sorted in either ascending or descending order. */\n  _isSorted() {\n    return this._sort.active == this.id &&\n        (this._sort.direction === 'asc' || this._sort.direction === 'desc');\n  }\n\n  /** Returns the animation state for the arrow direction (indicator and pointers). */\n  _getArrowDirectionState() {\n    return `${this._isSorted() ? 'active-' : ''}${this._arrowDirection}`;\n  }\n\n  /** Returns the arrow position state (opacity, translation). */\n  _getArrowViewState() {\n    const fromState = this._viewState.fromState;\n    return (fromState ? `${fromState}-to-` : '') + this._viewState.toState;\n  }\n\n  /**\n   * Updates the direction the arrow should be pointing. If it is not sorted, the arrow should be\n   * facing the start direction. Otherwise if it is sorted, the arrow should point in the currently\n   * active sorted direction. The reason this is updated through a function is because the direction\n   * should only be changed at specific times - when deactivated but the hint is displayed and when\n   * the sort is active and the direction changes. Otherwise the arrow's direction should linger\n   * in cases such as the sort becoming deactivated but we want to animate the arrow away while\n   * preserving its direction, even though the next sort direction is actually different and should\n   * only be changed once the arrow displays again (hint or activation).\n   */\n  _updateArrowDirection() {\n    this._arrowDirection = this._isSorted() ?\n        this._sort.direction :\n        (this.start || this._sort.start);\n  }\n\n  _isDisabled() {\n    return this._sort.disabled || this.disabled;\n  }\n\n  /**\n   * Gets the aria-sort attribute that should be applied to this sort header. If this header\n   * is not sorted, returns null so that the attribute is removed from the host element. Aria spec\n   * says that the aria-sort property should only be present on one header at a time, so removing\n   * ensures this is true.\n   */\n  _getAriaSortAttribute() {\n    if (!this._isSorted()) { return null; }\n\n    return this._sort.direction == 'asc' ? 'ascending' : 'descending';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatSortHeader} from './sort-header';\nimport {MatSort} from './sort';\nimport {MAT_SORT_HEADER_INTL_PROVIDER} from './sort-header-intl';\nimport {CommonModule} from '@angular/common';\n\n\n@NgModule({\n  imports: [CommonModule],\n  exports: [MatSort, MatSortHeader],\n  declarations: [MatSort, MatSortHeader],\n  providers: [MAT_SORT_HEADER_INTL_PROVIDER]\n})\nexport class MatSortModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive} from '@angular/core';\nimport {CdkStepLabel} from '@angular/cdk/stepper';\n\n// TODO(devversion): workaround for https://github.com/angular/material2/issues/12760\nexport const _CdkStepLabel = CdkStepLabel;\n\n@Directive({\n  selector: '[matStepLabel]',\n})\nexport class MatStepLabel extends _CdkStepLabel {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable} from '@angular/core';\nimport {Subject} from 'rxjs';\n\n\n/** Stepper data that is required for internationalization. */\n@Injectable({providedIn: 'root'})\nexport class MatStepperIntl {\n  /**\n   * Stream that emits whenever the labels here are changed. Use this to notify\n   * components if the labels have changed after initialization.\n   */\n  readonly changes: Subject<void> = new Subject<void>();\n\n  /** Label that is rendered below optional steps. */\n  optionalLabel: string = 'Optional';\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor} from '@angular/cdk/a11y';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  Input,\n  OnDestroy,\n  ViewEncapsulation,\n  TemplateRef,\n} from '@angular/core';\nimport {Subscription} from 'rxjs';\nimport {MatStepLabel} from './step-label';\nimport {MatStepperIntl} from './stepper-intl';\nimport {MatStepperIconContext} from './stepper-icon';\nimport {StepState} from '@angular/cdk/stepper';\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-step-header',\n  templateUrl: 'step-header.html',\n  styleUrls: ['step-header.css'],\n  host: {\n    'class': 'mat-step-header',\n    'role': 'tab',\n  },\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatStepHeader implements OnDestroy {\n  private _intlSubscription: Subscription;\n\n  /** State of the given step. */\n  @Input() state: StepState;\n\n  /** Label of the given step. */\n  @Input() label: MatStepLabel | string;\n\n  /** Error message to display when there's an error. */\n  @Input() errorMessage: string;\n\n  /** Overrides for the header icons, passed in via the stepper. */\n  @Input() iconOverrides: {[key: string]: TemplateRef<MatStepperIconContext>};\n\n  /** Index of the given step. */\n  @Input() index: number;\n\n  /** Whether the given step is selected. */\n  @Input() selected: boolean;\n\n  /** Whether the given step label is active. */\n  @Input() active: boolean;\n\n  /** Whether the given step is optional. */\n  @Input() optional: boolean;\n\n  constructor(\n    public _intl: MatStepperIntl,\n    private _focusMonitor: FocusMonitor,\n    private _element: ElementRef<HTMLElement>,\n    changeDetectorRef: ChangeDetectorRef) {\n    _focusMonitor.monitor(_element, true);\n    this._intlSubscription = _intl.changes.subscribe(() => changeDetectorRef.markForCheck());\n  }\n\n  ngOnDestroy() {\n    this._intlSubscription.unsubscribe();\n    this._focusMonitor.stopMonitoring(this._element);\n  }\n\n  /** Returns string label of given step if it is a text label. */\n  _stringLabel(): string | null {\n    return this.label instanceof MatStepLabel ? null : this.label;\n  }\n\n  /** Returns MatStepLabel if the label of given step is a template label. */\n  _templateLabel(): MatStepLabel | null {\n    return this.label instanceof MatStepLabel ? this.label : null;\n  }\n\n  /** Returns the host HTML element. */\n  _getHostElement() {\n    return this._element.nativeElement;\n  }\n\n  /** Template context variables that are exposed to the `matStepperIcon` instances. */\n  _getIconContext(): MatStepperIconContext {\n    return {\n      index: this.index,\n      active: this.active,\n      optional: this.optional\n    };\n  }\n\n  focus() {\n    this._getHostElement().focus();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/** Animations used by the Material steppers. */\nexport const matStepperAnimations: {\n  readonly horizontalStepTransition: AnimationTriggerMetadata;\n  readonly verticalStepTransition: AnimationTriggerMetadata;\n} = {\n  /** Animation that transitions the step along the X axis in a horizontal stepper. */\n  horizontalStepTransition: trigger('stepTransition', [\n    state('previous', style({transform: 'translate3d(-100%, 0, 0)', visibility: 'hidden'})),\n    state('current', style({transform: 'none', visibility: 'visible'})),\n    state('next', style({transform: 'translate3d(100%, 0, 0)', visibility: 'hidden'})),\n    transition('* => *', animate('500ms cubic-bezier(0.35, 0, 0.25, 1)'))\n  ]),\n\n  /** Animation that transitions the step along the Y axis in a vertical stepper. */\n  verticalStepTransition: trigger('stepTransition', [\n    state('previous', style({height: '0px', visibility: 'hidden'})),\n    state('next', style({height: '0px', visibility: 'hidden'})),\n    state('current', style({height: '*', visibility: 'visible'})),\n    transition('* <=> current', animate('225ms cubic-bezier(0.4, 0.0, 0.2, 1)'))\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, Input, TemplateRef} from '@angular/core';\nimport {StepState} from '@angular/cdk/stepper';\n\n/** Template context available to an attached `matStepperIcon`. */\nexport interface MatStepperIconContext {\n  /** Index of the step. */\n  index: number;\n  /** Whether the step is currently active. */\n  active: boolean;\n  /** Whether the step is optional. */\n  optional: boolean;\n}\n\n/**\n * Template to be used to override the icons inside the step header.\n */\n@Directive({\n  selector: 'ng-template[matStepperIcon]',\n})\nexport class MatStepperIcon {\n  /** Name of the icon to be overridden. */\n  @Input('matStepperIcon') name: StepState;\n\n  constructor(public templateRef: TemplateRef<MatStepperIconContext>) {}\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directionality} from '@angular/cdk/bidi';\nimport {\n  CdkStep,\n  CdkStepper,\n  StepContentPositionState,\n  MAT_STEPPER_GLOBAL_OPTIONS,\n  StepperOptions\n} from '@angular/cdk/stepper';\nimport {AnimationEvent} from '@angular/animations';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Optional,\n  Output,\n  QueryList,\n  SkipSelf,\n  TemplateRef,\n  ViewChildren,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {FormControl, FormGroupDirective, NgForm} from '@angular/forms';\nimport {DOCUMENT} from '@angular/common';\nimport {ErrorStateMatcher} from '@angular/material/core';\nimport {MatStepHeader} from './step-header';\nimport {MatStepLabel} from './step-label';\nimport {takeUntil} from 'rxjs/operators';\nimport {matStepperAnimations} from './stepper-animations';\nimport {MatStepperIcon, MatStepperIconContext} from './stepper-icon';\n\n// TODO(devversion): workaround for https://github.com/angular/material2/issues/12760\nexport const _CdkStepper = CdkStepper;\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-step',\n  templateUrl: 'step.html',\n  providers: [{provide: ErrorStateMatcher, useExisting: MatStep}],\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matStep',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatStep extends CdkStep implements ErrorStateMatcher {\n  /** Content for step label given by `<ng-template matStepLabel>`. */\n  @ContentChild(MatStepLabel) stepLabel: MatStepLabel;\n\n  /** @breaking-change 8.0.0 remove the `?` after `stepperOptions` */\n  constructor(@Inject(forwardRef(() => MatStepper)) stepper: MatStepper,\n              @SkipSelf() private _errorStateMatcher: ErrorStateMatcher,\n              @Optional() @Inject(MAT_STEPPER_GLOBAL_OPTIONS) stepperOptions?: StepperOptions) {\n    super(stepper, stepperOptions);\n  }\n\n  /** Custom error state matcher that additionally checks for validity of interacted form. */\n  isErrorState(control: FormControl | null, form: FormGroupDirective | NgForm | null): boolean {\n    const originalErrorState = this._errorStateMatcher.isErrorState(control, form);\n\n    // Custom error state checks for the validity of form that is not submitted or touched\n    // since user can trigger a form change by calling for another step without directly\n    // interacting with the current form.\n    const customErrorState = !!(control && control.invalid && this.interacted);\n\n    return originalErrorState || customErrorState;\n  }\n}\n\n\n@Directive({\n  selector: '[matStepper]'\n})\nexport class MatStepper extends _CdkStepper implements AfterContentInit {\n  /** The list of step headers of the steps in the stepper. */\n  @ViewChildren(MatStepHeader) _stepHeader: QueryList<MatStepHeader>;\n\n  /** Steps that the stepper holds. */\n  @ContentChildren(MatStep) _steps: QueryList<MatStep>;\n\n  /** Custom icon overrides passed in by the consumer. */\n  @ContentChildren(MatStepperIcon) _icons: QueryList<MatStepperIcon>;\n\n  /** Event emitted when the current step is done transitioning in. */\n  @Output() readonly animationDone: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Consumer-specified template-refs to be used to override the header icons. */\n  _iconOverrides: {[key: string]: TemplateRef<MatStepperIconContext>} = {};\n\n  ngAfterContentInit() {\n    const icons = this._icons.toArray();\n    icons.forEach(({name, templateRef}) => this._iconOverrides[name] = templateRef);\n\n    // Mark the component for change detection whenever the content children query changes\n    this._steps.changes.pipe(takeUntil(this._destroyed)).subscribe(() => this._stateChanged());\n  }\n\n  _animationDone(event: AnimationEvent) {\n    if ((event.toState as StepContentPositionState) === 'current') {\n      this.animationDone.emit();\n    }\n  }\n}\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-horizontal-stepper',\n  exportAs: 'matHorizontalStepper',\n  templateUrl: 'stepper-horizontal.html',\n  styleUrls: ['stepper.css'],\n  inputs: ['selectedIndex'],\n  host: {\n    'class': 'mat-stepper-horizontal',\n    'aria-orientation': 'horizontal',\n    'role': 'tablist',\n  },\n  animations: [matStepperAnimations.horizontalStepTransition],\n  providers: [{provide: MatStepper, useExisting: MatHorizontalStepper}],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatHorizontalStepper extends MatStepper { }\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-vertical-stepper',\n  exportAs: 'matVerticalStepper',\n  templateUrl: 'stepper-vertical.html',\n  styleUrls: ['stepper.css'],\n  inputs: ['selectedIndex'],\n  host: {\n    'class': 'mat-stepper-vertical',\n    'aria-orientation': 'vertical',\n    'role': 'tablist',\n  },\n  animations: [matStepperAnimations.verticalStepTransition],\n  providers: [{provide: MatStepper, useExisting: MatVerticalStepper}],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatVerticalStepper extends MatStepper {\n  constructor(\n    @Optional() dir: Directionality,\n    changeDetectorRef: ChangeDetectorRef,\n    // @breaking-change 8.0.0 `elementRef` and `_document` parameters to become required.\n    elementRef?: ElementRef<HTMLElement>,\n    @Inject(DOCUMENT) _document?: any) {\n    super(dir, changeDetectorRef, elementRef, _document);\n    this._orientation = 'vertical';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive} from '@angular/core';\nimport {CdkStepper, CdkStepperNext, CdkStepperPrevious} from '@angular/cdk/stepper';\nimport {MatStepper} from './stepper';\n\n// TODO(devversion): workaround for https://github.com/angular/material2/issues/12760\nexport const _CdkStepperNext = CdkStepperNext;\nexport const _CdkStepperPrevious = CdkStepperPrevious;\n\n/** Button that moves to the next step in a stepper workflow. */\n@Directive({\n  selector: 'button[matStepperNext]',\n  host: {\n    '(click)': '_stepper.next()',\n    '[type]': 'type',\n  },\n  inputs: ['type'],\n  providers: [{provide: CdkStepper, useExisting: MatStepper}]\n})\nexport class MatStepperNext extends _CdkStepperNext {}\n\n/** Button that moves to the previous step in a stepper workflow. */\n@Directive({\n  selector: 'button[matStepperPrevious]',\n  host: {\n    '(click)': '_stepper.previous()',\n    '[type]': 'type',\n  },\n  inputs: ['type'],\n  providers: [{provide: CdkStepper, useExisting: MatStepper}]\n})\nexport class MatStepperPrevious extends _CdkStepperPrevious {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {PortalModule} from '@angular/cdk/portal';\nimport {CdkStepperModule} from '@angular/cdk/stepper';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatButtonModule} from '@angular/material/button';\nimport {ErrorStateMatcher, MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {MatIconModule} from '@angular/material/icon';\nimport {MatStepHeader} from './step-header';\nimport {MatStepLabel} from './step-label';\nimport {MatHorizontalStepper, MatStep, MatStepper, MatVerticalStepper} from './stepper';\nimport {MatStepperNext, MatStepperPrevious} from './stepper-button';\nimport {MatStepperIcon} from './stepper-icon';\nimport {MatStepperIntl} from './stepper-intl';\n\n\n@NgModule({\n  imports: [\n    MatCommonModule,\n    CommonModule,\n    PortalModule,\n    MatButtonModule,\n    CdkStepperModule,\n    MatIconModule,\n    MatRippleModule,\n  ],\n  exports: [\n    MatCommonModule,\n    MatHorizontalStepper,\n    MatVerticalStepper,\n    MatStep,\n    MatStepLabel,\n    MatStepper,\n    MatStepperNext,\n    MatStepperPrevious,\n    MatStepHeader,\n    MatStepperIcon,\n  ],\n  declarations: [\n    MatHorizontalStepper,\n    MatVerticalStepper,\n    MatStep,\n    MatStepLabel,\n    MatStepper,\n    MatStepperNext,\n    MatStepperPrevious,\n    MatStepHeader,\n    MatStepperIcon,\n  ],\n  providers: [MatStepperIntl, ErrorStateMatcher],\n})\nexport class MatStepperModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CDK_TABLE_TEMPLATE, CdkTable} from '@angular/cdk/table';\nimport {ChangeDetectionStrategy, Component, ViewEncapsulation} from '@angular/core';\n\n// TODO(devversion): workaround for https://github.com/angular/material2/issues/12760\nexport const _CdkTable = CdkTable;\n\n/**\n * Wrapper for the CdkTable with Material design styles.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-table, table[mat-table]',\n  exportAs: 'matTable',\n  template: CDK_TABLE_TEMPLATE,\n  styleUrls: ['table.css'],\n  host: {\n    'class': 'mat-table',\n  },\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatTable<T> extends _CdkTable<T> {\n  /** Overrides the sticky CSS class set by the `CdkTable`. */\n  protected stickyCssClass = 'mat-table-sticky';\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, ElementRef, Input} from '@angular/core';\nimport {\n  CdkCell,\n  CdkCellDef,\n  CdkColumnDef, CdkFooterCell, CdkFooterCellDef,\n  CdkHeaderCell,\n  CdkHeaderCellDef,\n} from '@angular/cdk/table';\n\n// TODO(devversion): workaround for https://github.com/angular/material2/issues/12760\nexport const _CdkCellDef = CdkCellDef;\nexport const _CdkHeaderCellDef = CdkHeaderCellDef;\nexport const _CdkFooterCellDef = CdkFooterCellDef;\n\n/**\n * Cell definition for the mat-table.\n * Captures the template of a column's data row cell as well as cell-specific properties.\n */\n@Directive({\n  selector: '[matCellDef]',\n  providers: [{provide: CdkCellDef, useExisting: MatCellDef}]\n})\nexport class MatCellDef extends _CdkCellDef {}\n\n/**\n * Header cell definition for the mat-table.\n * Captures the template of a column's header cell and as well as cell-specific properties.\n */\n@Directive({\n  selector: '[matHeaderCellDef]',\n  providers: [{provide: CdkHeaderCellDef, useExisting: MatHeaderCellDef}]\n})\nexport class MatHeaderCellDef extends _CdkHeaderCellDef {}\n\n/**\n * Footer cell definition for the mat-table.\n * Captures the template of a column's footer cell and as well as cell-specific properties.\n */\n@Directive({\n  selector: '[matFooterCellDef]',\n  providers: [{provide: CdkFooterCellDef, useExisting: MatFooterCellDef}]\n})\nexport class MatFooterCellDef extends _CdkFooterCellDef {}\n\n/**\n * Column definition for the mat-table.\n * Defines a set of cells available for a table column.\n */\n@Directive({\n  selector: '[matColumnDef]',\n  providers: [{provide: CdkColumnDef, useExisting: MatColumnDef}],\n})\nexport class MatColumnDef extends CdkColumnDef {\n  /** Unique name for this column. */\n  @Input('matColumnDef') name: string;\n\n  /** Whether this column should be sticky positioned at the start of the row */\n  @Input() sticky: boolean;\n\n  /** Whether this column should be sticky positioned on the end of the row */\n  @Input() stickyEnd: boolean;\n}\n\n/** Header cell template container that adds the right classes and role. */\n@Directive({\n  selector: 'mat-header-cell, th[mat-header-cell]',\n  host: {\n    'class': 'mat-header-cell',\n    'role': 'columnheader',\n  },\n})\nexport class MatHeaderCell extends CdkHeaderCell {\n  constructor(columnDef: CdkColumnDef,\n              elementRef: ElementRef<HTMLElement>) {\n    super(columnDef, elementRef);\n    elementRef.nativeElement.classList.add(`mat-column-${columnDef.cssClassFriendlyName}`);\n  }\n}\n\n/** Footer cell template container that adds the right classes and role. */\n@Directive({\n  selector: 'mat-footer-cell, td[mat-footer-cell]',\n  host: {\n    'class': 'mat-footer-cell',\n    'role': 'gridcell',\n  },\n})\nexport class MatFooterCell extends CdkFooterCell {\n  constructor(columnDef: CdkColumnDef,\n              elementRef: ElementRef) {\n    super(columnDef, elementRef);\n    elementRef.nativeElement.classList.add(`mat-column-${columnDef.cssClassFriendlyName}`);\n  }\n}\n\n/** Cell template container that adds the right classes and role. */\n@Directive({\n  selector: 'mat-cell, td[mat-cell]',\n  host: {\n    'class': 'mat-cell',\n    'role': 'gridcell',\n  },\n})\nexport class MatCell extends CdkCell {\n  constructor(columnDef: CdkColumnDef,\n              elementRef: ElementRef<HTMLElement>) {\n    super(columnDef, elementRef);\n    elementRef.nativeElement.classList.add(`mat-column-${columnDef.cssClassFriendlyName}`);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  Directive,\n  ViewEncapsulation\n} from '@angular/core';\nimport {\n  CDK_ROW_TEMPLATE, CdkFooterRow, CdkFooterRowDef,\n  CdkHeaderRow,\n  CdkHeaderRowDef,\n  CdkRow,\n  CdkRowDef,\n} from '@angular/cdk/table';\n\n// TODO(devversion): workaround for https://github.com/angular/material2/issues/12760\nexport const _CdkHeaderRowDef = CdkHeaderRowDef;\nexport const _CdkFooterRowDef = CdkFooterRowDef;\nexport const _CdkRowDef = CdkRowDef;\n\n/**\n * Header row definition for the mat-table.\n * Captures the header row's template and other header properties such as the columns to display.\n */\n@Directive({\n  selector: '[matHeaderRowDef]',\n  providers: [{provide: CdkHeaderRowDef, useExisting: MatHeaderRowDef}],\n  inputs: ['columns: matHeaderRowDef', 'sticky: matHeaderRowDefSticky'],\n})\nexport class MatHeaderRowDef extends _CdkHeaderRowDef {}\n\n/**\n * Footer row definition for the mat-table.\n * Captures the footer row's template and other footer properties such as the columns to display.\n */\n@Directive({\n  selector: '[matFooterRowDef]',\n  providers: [{provide: CdkFooterRowDef, useExisting: MatFooterRowDef}],\n  inputs: ['columns: matFooterRowDef', 'sticky: matFooterRowDefSticky'],\n})\nexport class MatFooterRowDef extends _CdkFooterRowDef {}\n\n/**\n * Data row definition for the mat-table.\n * Captures the footer row's template and other footer properties such as the columns to display and\n * a when predicate that describes when this row should be used.\n */\n@Directive({\n  selector: '[matRowDef]',\n  providers: [{provide: CdkRowDef, useExisting: MatRowDef}],\n  inputs: ['columns: matRowDefColumns', 'when: matRowDefWhen'],\n})\nexport class MatRowDef<T> extends _CdkRowDef<T> {}\n\n/** Footer template container that contains the cell outlet. Adds the right class and role. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-header-row, tr[mat-header-row]',\n  template: CDK_ROW_TEMPLATE,\n  host: {\n    'class': 'mat-header-row',\n    'role': 'row',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matHeaderRow',\n  providers: [{provide: CdkHeaderRow, useExisting: MatHeaderRow}],\n})\nexport class MatHeaderRow extends CdkHeaderRow { }\n\n/** Footer template container that contains the cell outlet. Adds the right class and role. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-footer-row, tr[mat-footer-row]',\n  template: CDK_ROW_TEMPLATE,\n  host: {\n    'class': 'mat-footer-row',\n    'role': 'row',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matFooterRow',\n  providers: [{provide: CdkFooterRow, useExisting: MatFooterRow}],\n})\nexport class MatFooterRow extends CdkFooterRow { }\n\n/** Data row template container that contains the cell outlet. Adds the right class and role. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-row, tr[mat-row]',\n  template: CDK_ROW_TEMPLATE,\n  host: {\n    'class': 'mat-row',\n    'role': 'row',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matRow',\n  providers: [{provide: CdkRow, useExisting: MatRow}],\n})\nexport class MatRow extends CdkRow { }\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatTable} from './table';\nimport {CdkTableModule} from '@angular/cdk/table';\nimport {\n  MatCell,\n  MatCellDef,\n  MatColumnDef,\n  MatFooterCell,\n  MatFooterCellDef,\n  MatHeaderCell,\n  MatHeaderCellDef\n} from './cell';\nimport {\n  MatFooterRow,\n  MatFooterRowDef,\n  MatHeaderRow,\n  MatHeaderRowDef,\n  MatRow,\n  MatRowDef\n} from './row';\nimport {CommonModule} from '@angular/common';\nimport {MatCommonModule} from '@angular/material/core';\n\nconst EXPORTED_DECLARATIONS = [\n  // Table\n  MatTable,\n\n  // Template defs\n  MatHeaderCellDef,\n  MatHeaderRowDef,\n  MatColumnDef,\n  MatCellDef,\n  MatRowDef,\n  MatFooterCellDef,\n  MatFooterRowDef,\n\n  // Cell directives\n  MatHeaderCell,\n  MatCell,\n  MatFooterCell,\n\n  // Row directions\n  MatHeaderRow,\n  MatRow,\n  MatFooterRow,\n];\n\n@NgModule({\n  imports: [CdkTableModule, CommonModule, MatCommonModule],\n  exports: EXPORTED_DECLARATIONS,\n  declarations: EXPORTED_DECLARATIONS,\n})\nexport class MatTableModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor, FocusOrigin} from '@angular/cdk/a11y';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty, coerceNumberProperty} from '@angular/cdk/coercion';\nimport {\n  DOWN_ARROW,\n  END,\n  HOME,\n  LEFT_ARROW,\n  PAGE_DOWN,\n  PAGE_UP,\n  RIGHT_ARROW,\n  UP_ARROW,\n} from '@angular/cdk/keycodes';\nimport {\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Output,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {\n  CanColor,\n  CanColorCtor,\n  CanDisable,\n  CanDisableCtor,\n  HammerInput,\n  HasTabIndex,\n  HasTabIndexCtor,\n  mixinColor,\n  mixinDisabled,\n  mixinTabIndex,\n} from '@angular/material/core';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\nimport {Subscription} from 'rxjs';\n\n/**\n * Visually, a 30px separation between tick marks looks best. This is very subjective but it is\n * the default separation we chose.\n */\nconst MIN_AUTO_TICK_SEPARATION = 30;\n\n/** The thumb gap size for a disabled slider. */\nconst DISABLED_THUMB_GAP = 7;\n\n/** The thumb gap size for a non-active slider at its minimum value. */\nconst MIN_VALUE_NONACTIVE_THUMB_GAP = 7;\n\n/** The thumb gap size for an active slider at its minimum value. */\nconst MIN_VALUE_ACTIVE_THUMB_GAP = 10;\n\n/**\n * Provider Expression that allows mat-slider to register as a ControlValueAccessor.\n * This allows it to support [(ngModel)] and [formControl].\n */\nexport const MAT_SLIDER_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatSlider),\n  multi: true\n};\n\n/** A simple change event emitted by the MatSlider component. */\nexport class MatSliderChange {\n  /** The MatSlider that changed. */\n  source: MatSlider;\n\n  /** The new value of the source slider. */\n  value: number | null;\n}\n\n\n// Boilerplate for applying mixins to MatSlider.\n/** @docs-private */\nexport class MatSliderBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatSliderMixinBase:\n    HasTabIndexCtor &\n    CanColorCtor &\n    CanDisableCtor &\n    typeof MatSliderBase =\n        mixinTabIndex(mixinColor(mixinDisabled(MatSliderBase), 'accent'));\n\n/**\n * Allows users to select from a range of values by moving the slider thumb. It is similar in\n * behavior to the native `<input type=\"range\">` element.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-slider',\n  exportAs: 'matSlider',\n  providers: [MAT_SLIDER_VALUE_ACCESSOR],\n  host: {\n    '(focus)': '_onFocus()',\n    '(blur)': '_onBlur()',\n    '(click)': '_onClick($event)',\n    '(keydown)': '_onKeydown($event)',\n    '(keyup)': '_onKeyup()',\n    '(mouseenter)': '_onMouseenter()',\n    '(slide)': '_onSlide($event)',\n    '(slideend)': '_onSlideEnd()',\n    '(slidestart)': '_onSlideStart($event)',\n    'class': 'mat-slider',\n    'role': 'slider',\n    '[tabIndex]': 'tabIndex',\n    '[attr.aria-disabled]': 'disabled',\n    '[attr.aria-valuemax]': 'max',\n    '[attr.aria-valuemin]': 'min',\n    '[attr.aria-valuenow]': 'value',\n    '[attr.aria-orientation]': 'vertical ? \"vertical\" : \"horizontal\"',\n    '[class.mat-slider-disabled]': 'disabled',\n    '[class.mat-slider-has-ticks]': 'tickInterval',\n    '[class.mat-slider-horizontal]': '!vertical',\n    '[class.mat-slider-axis-inverted]': '_invertAxis',\n    '[class.mat-slider-sliding]': '_isSliding',\n    '[class.mat-slider-thumb-label-showing]': 'thumbLabel',\n    '[class.mat-slider-vertical]': 'vertical',\n    '[class.mat-slider-min-value]': '_isMinValue',\n    '[class.mat-slider-hide-last-tick]': 'disabled || _isMinValue && _thumbGap && _invertAxis',\n    '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"',\n  },\n  templateUrl: 'slider.html',\n  styleUrls: ['slider.css'],\n  inputs: ['disabled', 'color', 'tabIndex'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatSlider extends _MatSliderMixinBase\n    implements ControlValueAccessor, OnDestroy, CanDisable, CanColor, OnInit, HasTabIndex {\n  /** Whether the slider is inverted. */\n  @Input()\n  get invert(): boolean { return this._invert; }\n  set invert(value: boolean) {\n    this._invert = coerceBooleanProperty(value);\n  }\n  private _invert = false;\n\n  /** The maximum value that the slider can have. */\n  @Input()\n  get max(): number { return this._max; }\n  set max(v: number) {\n    this._max = coerceNumberProperty(v, this._max);\n    this._percent = this._calculatePercentage(this._value);\n\n    // Since this also modifies the percentage, we need to let the change detection know.\n    this._changeDetectorRef.markForCheck();\n  }\n  private _max: number = 100;\n\n  /** The minimum value that the slider can have. */\n  @Input()\n  get min(): number { return this._min; }\n  set min(v: number) {\n    this._min = coerceNumberProperty(v, this._min);\n\n    // If the value wasn't explicitly set by the user, set it to the min.\n    if (this._value === null) {\n      this.value = this._min;\n    }\n    this._percent = this._calculatePercentage(this._value);\n\n    // Since this also modifies the percentage, we need to let the change detection know.\n    this._changeDetectorRef.markForCheck();\n  }\n  private _min: number = 0;\n\n  /** The values at which the thumb will snap. */\n  @Input()\n  get step(): number { return this._step; }\n  set step(v: number) {\n    this._step = coerceNumberProperty(v, this._step);\n\n    if (this._step % 1 !== 0) {\n      this._roundToDecimal = this._step.toString().split('.').pop()!.length;\n    }\n\n    // Since this could modify the label, we need to notify the change detection.\n    this._changeDetectorRef.markForCheck();\n  }\n  private _step: number = 1;\n\n  /** Whether or not to show the thumb label. */\n  @Input()\n  get thumbLabel(): boolean { return this._thumbLabel; }\n  set thumbLabel(value: boolean) { this._thumbLabel = coerceBooleanProperty(value); }\n  private _thumbLabel: boolean = false;\n\n  /**\n   * How often to show ticks. Relative to the step so that a tick always appears on a step.\n   * Ex: Tick interval of 4 with a step of 3 will draw a tick every 4 steps (every 12 values).\n   */\n  @Input()\n  get tickInterval() { return this._tickInterval; }\n  set tickInterval(value: 'auto' | number) {\n    if (value === 'auto') {\n      this._tickInterval = 'auto';\n    } else if (typeof value === 'number' || typeof value === 'string') {\n      this._tickInterval = coerceNumberProperty(value, this._tickInterval as number);\n    } else {\n      this._tickInterval = 0;\n    }\n  }\n  private _tickInterval: 'auto' | number = 0;\n\n  /** Value of the slider. */\n  @Input()\n  get value(): number | null {\n    // If the value needs to be read and it is still uninitialized, initialize it to the min.\n    if (this._value === null) {\n      this.value = this._min;\n    }\n    return this._value;\n  }\n  set value(v: number | null) {\n    if (v !== this._value) {\n      let value = coerceNumberProperty(v);\n\n      // While incrementing by a decimal we can end up with values like 33.300000000000004.\n      // Truncate it to ensure that it matches the label and to make it easier to work with.\n      if (this._roundToDecimal) {\n        value = parseFloat(value.toFixed(this._roundToDecimal));\n      }\n\n      this._value = value;\n      this._percent = this._calculatePercentage(this._value);\n\n      // Since this also modifies the percentage, we need to let the change detection know.\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n  private _value: number | null = null;\n\n  /**\n   * Function that will be used to format the value before it is displayed\n   * in the thumb label. Can be used to format very large number in order\n   * for them to fit into the slider thumb.\n   */\n  @Input() displayWith: (value: number | null) => string | number;\n\n  /** Whether the slider is vertical. */\n  @Input()\n  get vertical(): boolean { return this._vertical; }\n  set vertical(value: boolean) {\n    this._vertical = coerceBooleanProperty(value);\n  }\n  private _vertical = false;\n\n  /** Event emitted when the slider value has changed. */\n  @Output() readonly change: EventEmitter<MatSliderChange> = new EventEmitter<MatSliderChange>();\n\n  /** Event emitted when the slider thumb moves. */\n  @Output() readonly input: EventEmitter<MatSliderChange> = new EventEmitter<MatSliderChange>();\n\n  /**\n   * Emits when the raw value of the slider changes. This is here primarily\n   * to facilitate the two-way binding for the `value` input.\n   * @docs-private\n   */\n  @Output() readonly valueChange: EventEmitter<number | null> = new EventEmitter<number | null>();\n\n  /** The value to be used for display purposes. */\n  get displayValue(): string | number {\n    if (this.displayWith) {\n      return this.displayWith(this.value);\n    }\n\n    // Note that this could be improved further by rounding something like 0.999 to 1 or\n    // 0.899 to 0.9, however it is very performance sensitive, because it gets called on\n    // every change detection cycle.\n    if (this._roundToDecimal && this.value && this.value % 1 !== 0) {\n      return this.value.toFixed(this._roundToDecimal);\n    }\n\n    return this.value || 0;\n  }\n\n  /** set focus to the host element */\n  focus() {\n    this._focusHostElement();\n  }\n\n  /** blur the host element */\n  blur() {\n    this._blurHostElement();\n  }\n\n  /** onTouch function registered via registerOnTouch (ControlValueAccessor). */\n  onTouched: () => any = () => {};\n\n  /** The percentage of the slider that coincides with the value. */\n  get percent(): number { return this._clamp(this._percent); }\n  private _percent: number = 0;\n\n  /**\n   * Whether or not the thumb is sliding.\n   * Used to determine if there should be a transition for the thumb and fill track.\n   */\n  _isSliding: boolean = false;\n\n  /**\n   * Whether or not the slider is active (clicked or sliding).\n   * Used to shrink and grow the thumb as according to the Material Design spec.\n   */\n  _isActive: boolean = false;\n\n  /**\n   * Whether the axis of the slider is inverted.\n   * (i.e. whether moving the thumb in the positive x or y direction decreases the slider's value).\n   */\n  get _invertAxis() {\n    // Standard non-inverted mode for a vertical slider should be dragging the thumb from bottom to\n    // top. However from a y-axis standpoint this is inverted.\n    return this.vertical ? !this.invert : this.invert;\n  }\n\n\n  /** Whether the slider is at its minimum value. */\n  get _isMinValue() {\n    return this.percent === 0;\n  }\n\n  /**\n   * The amount of space to leave between the slider thumb and the track fill & track background\n   * elements.\n   */\n  get _thumbGap() {\n    if (this.disabled) {\n      return DISABLED_THUMB_GAP;\n    }\n    if (this._isMinValue && !this.thumbLabel) {\n      return this._isActive ? MIN_VALUE_ACTIVE_THUMB_GAP : MIN_VALUE_NONACTIVE_THUMB_GAP;\n    }\n    return 0;\n  }\n\n  /** CSS styles for the track background element. */\n  get _trackBackgroundStyles(): { [key: string]: string } {\n    const axis = this.vertical ? 'Y' : 'X';\n    const scale = this.vertical ? `1, ${1 - this.percent}, 1` : `${1 - this.percent}, 1, 1`;\n    const sign = this._shouldInvertMouseCoords() ? '-' : '';\n\n    return {\n      // scale3d avoids some rendering issues in Chrome. See #12071.\n      transform: `translate${axis}(${sign}${this._thumbGap}px) scale3d(${scale})`\n    };\n  }\n\n  /** CSS styles for the track fill element. */\n  get _trackFillStyles(): { [key: string]: string } {\n    const axis = this.vertical ? 'Y' : 'X';\n    const scale = this.vertical ? `1, ${this.percent}, 1` : `${this.percent}, 1, 1`;\n    const sign = this._shouldInvertMouseCoords() ? '' : '-';\n\n    return {\n      // scale3d avoids some rendering issues in Chrome. See #12071.\n      transform: `translate${axis}(${sign}${this._thumbGap}px) scale3d(${scale})`\n    };\n  }\n\n  /** CSS styles for the ticks container element. */\n  get _ticksContainerStyles(): { [key: string]: string } {\n    let axis = this.vertical ? 'Y' : 'X';\n    // For a horizontal slider in RTL languages we push the ticks container off the left edge\n    // instead of the right edge to avoid causing a horizontal scrollbar to appear.\n    let sign = !this.vertical && this._getDirection() == 'rtl' ? '' : '-';\n    let offset = this._tickIntervalPercent / 2 * 100;\n    return {\n      'transform': `translate${axis}(${sign}${offset}%)`\n    };\n  }\n\n  /** CSS styles for the ticks element. */\n  get _ticksStyles(): { [key: string]: string } {\n    let tickSize = this._tickIntervalPercent * 100;\n    let backgroundSize = this.vertical ? `2px ${tickSize}%` : `${tickSize}% 2px`;\n    let axis = this.vertical ? 'Y' : 'X';\n    // Depending on the direction we pushed the ticks container, push the ticks the opposite\n    // direction to re-center them but clip off the end edge. In RTL languages we need to flip the\n    // ticks 180 degrees so we're really cutting off the end edge abd not the start.\n    let sign = !this.vertical && this._getDirection() == 'rtl' ? '-' : '';\n    let rotate = !this.vertical && this._getDirection() == 'rtl' ? ' rotate(180deg)' : '';\n    let styles: { [key: string]: string } = {\n      'backgroundSize': backgroundSize,\n      // Without translateZ ticks sometimes jitter as the slider moves on Chrome & Firefox.\n      'transform': `translateZ(0) translate${axis}(${sign}${tickSize / 2}%)${rotate}`\n    };\n\n    if (this._isMinValue && this._thumbGap) {\n      let side = this.vertical ?\n          (this._invertAxis ? 'Bottom' : 'Top') :\n          (this._invertAxis ? 'Right' : 'Left');\n      styles[`padding${side}`] = `${this._thumbGap}px`;\n    }\n\n    return styles;\n  }\n\n  get _thumbContainerStyles(): { [key: string]: string } {\n    let axis = this.vertical ? 'Y' : 'X';\n    // For a horizontal slider in RTL languages we push the thumb container off the left edge\n    // instead of the right edge to avoid causing a horizontal scrollbar to appear.\n    let invertOffset =\n        (this._getDirection() == 'rtl' && !this.vertical) ? !this._invertAxis : this._invertAxis;\n    let offset = (invertOffset ? this.percent : 1 - this.percent) * 100;\n    return {\n      'transform': `translate${axis}(-${offset}%)`\n    };\n  }\n\n  /** The size of a tick interval as a percentage of the size of the track. */\n  private _tickIntervalPercent: number = 0;\n\n  /** The dimensions of the slider. */\n  private _sliderDimensions: ClientRect | null = null;\n\n  private _controlValueAccessorChangeFn: (value: any) => void = () => {};\n\n  /** Decimal places to round to, based on the step amount. */\n  private _roundToDecimal: number;\n\n  /** Subscription to the Directionality change EventEmitter. */\n  private _dirChangeSubscription = Subscription.EMPTY;\n\n  /** The value of the slider when the slide start event fires. */\n  private _valueOnSlideStart: number | null;\n\n  /** Reference to the inner slider wrapper element. */\n  @ViewChild('sliderWrapper') private _sliderWrapper: ElementRef;\n\n  /**\n   * Whether mouse events should be converted to a slider position by calculating their distance\n   * from the right or bottom edge of the slider as opposed to the top or left.\n   */\n  private _shouldInvertMouseCoords() {\n    return (this._getDirection() == 'rtl' && !this.vertical) ? !this._invertAxis : this._invertAxis;\n  }\n\n  /** The language direction for this slider element. */\n  private _getDirection() {\n    return (this._dir && this._dir.value == 'rtl') ? 'rtl' : 'ltr';\n  }\n\n  constructor(elementRef: ElementRef,\n              private _focusMonitor: FocusMonitor,\n              private _changeDetectorRef: ChangeDetectorRef,\n              @Optional() private _dir: Directionality,\n              @Attribute('tabindex') tabIndex: string,\n              // @breaking-change 7.0.0 `_animationMode` parameter to be made required.\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode?: string) {\n    super(elementRef);\n\n    this.tabIndex = parseInt(tabIndex) || 0;\n  }\n\n  ngOnInit() {\n    this._focusMonitor\n        .monitor(this._elementRef, true)\n        .subscribe((origin: FocusOrigin) => {\n          this._isActive = !!origin && origin !== 'keyboard';\n          this._changeDetectorRef.detectChanges();\n        });\n    if (this._dir) {\n      this._dirChangeSubscription = this._dir.change.subscribe(() => {\n        this._changeDetectorRef.markForCheck();\n      });\n    }\n  }\n\n  ngOnDestroy() {\n    this._focusMonitor.stopMonitoring(this._elementRef);\n    this._dirChangeSubscription.unsubscribe();\n  }\n\n  _onMouseenter() {\n    if (this.disabled) {\n      return;\n    }\n\n    // We save the dimensions of the slider here so we can use them to update the spacing of the\n    // ticks and determine where on the slider click and slide events happen.\n    this._sliderDimensions = this._getSliderDimensions();\n    this._updateTickIntervalPercent();\n  }\n\n  _onClick(event: MouseEvent) {\n    if (this.disabled) {\n      return;\n    }\n\n    let oldValue = this.value;\n    this._isSliding = false;\n    this._focusHostElement();\n    this._updateValueFromPosition({x: event.clientX, y: event.clientY});\n\n    // Emit a change and input event if the value changed.\n    if (oldValue != this.value) {\n      this._emitInputEvent();\n      this._emitChangeEvent();\n    }\n  }\n\n  _onSlide(event: HammerInput) {\n    if (this.disabled) {\n      return;\n    }\n\n    // The slide start event sometimes fails to fire on iOS, so if we're not already in the sliding\n    // state, call the slide start handler manually.\n    if (!this._isSliding) {\n      this._onSlideStart(null);\n    }\n\n    // Prevent the slide from selecting anything else.\n    event.preventDefault();\n\n    let oldValue = this.value;\n    this._updateValueFromPosition({x: event.center.x, y: event.center.y});\n\n    // Native range elements always emit `input` events when the value changed while sliding.\n    if (oldValue != this.value) {\n      this._emitInputEvent();\n    }\n  }\n\n  _onSlideStart(event: HammerInput | null) {\n    if (this.disabled || this._isSliding) {\n      return;\n    }\n\n    // Simulate mouseenter in case this is a mobile device.\n    this._onMouseenter();\n\n    this._isSliding = true;\n    this._focusHostElement();\n    this._valueOnSlideStart = this.value;\n\n    if (event) {\n      this._updateValueFromPosition({x: event.center.x, y: event.center.y});\n      event.preventDefault();\n    }\n  }\n\n  _onSlideEnd() {\n    this._isSliding = false;\n\n    if (this._valueOnSlideStart != this.value && !this.disabled) {\n      this._emitChangeEvent();\n    }\n    this._valueOnSlideStart = null;\n  }\n\n  _onFocus() {\n    // We save the dimensions of the slider here so we can use them to update the spacing of the\n    // ticks and determine where on the slider click and slide events happen.\n    this._sliderDimensions = this._getSliderDimensions();\n    this._updateTickIntervalPercent();\n  }\n\n  _onBlur() {\n    this.onTouched();\n  }\n\n  _onKeydown(event: KeyboardEvent) {\n    if (this.disabled) { return; }\n\n    let oldValue = this.value;\n\n    switch (event.keyCode) {\n      case PAGE_UP:\n        this._increment(10);\n        break;\n      case PAGE_DOWN:\n        this._increment(-10);\n        break;\n      case END:\n        this.value = this.max;\n        break;\n      case HOME:\n        this.value = this.min;\n        break;\n      case LEFT_ARROW:\n        // NOTE: For a sighted user it would make more sense that when they press an arrow key on an\n        // inverted slider the thumb moves in that direction. However for a blind user, nothing\n        // about the slider indicates that it is inverted. They will expect left to be decrement,\n        // regardless of how it appears on the screen. For speakers ofRTL languages, they probably\n        // expect left to mean increment. Therefore we flip the meaning of the side arrow keys for\n        // RTL. For inverted sliders we prefer a good a11y experience to having it \"look right\" for\n        // sighted users, therefore we do not swap the meaning.\n        this._increment(this._getDirection() == 'rtl' ? 1 : -1);\n        break;\n      case UP_ARROW:\n        this._increment(1);\n        break;\n      case RIGHT_ARROW:\n        // See comment on LEFT_ARROW about the conditions under which we flip the meaning.\n        this._increment(this._getDirection() == 'rtl' ? -1 : 1);\n        break;\n      case DOWN_ARROW:\n        this._increment(-1);\n        break;\n      default:\n        // Return if the key is not one that we explicitly handle to avoid calling preventDefault on\n        // it.\n        return;\n    }\n\n    if (oldValue != this.value) {\n      this._emitInputEvent();\n      this._emitChangeEvent();\n    }\n\n    this._isSliding = true;\n    event.preventDefault();\n  }\n\n  _onKeyup() {\n    this._isSliding = false;\n  }\n\n  /** Increments the slider by the given number of steps (negative number decrements). */\n  private _increment(numSteps: number) {\n    this.value = this._clamp((this.value || 0) + this.step * numSteps, this.min, this.max);\n  }\n\n  /** Calculate the new value from the new physical location. The value will always be snapped. */\n  private _updateValueFromPosition(pos: {x: number, y: number}) {\n    if (!this._sliderDimensions) {\n      return;\n    }\n\n    let offset = this.vertical ? this._sliderDimensions.top : this._sliderDimensions.left;\n    let size = this.vertical ? this._sliderDimensions.height : this._sliderDimensions.width;\n    let posComponent = this.vertical ? pos.y : pos.x;\n\n    // The exact value is calculated from the event and used to find the closest snap value.\n    let percent = this._clamp((posComponent - offset) / size);\n\n    if (this._shouldInvertMouseCoords()) {\n      percent = 1 - percent;\n    }\n\n    // Since the steps may not divide cleanly into the max value, if the user\n    // slid to 0 or 100 percent, we jump to the min/max value. This approach\n    // is slightly more intuitive than using `Math.ceil` below, because it\n    // follows the user's pointer closer.\n    if (percent === 0) {\n      this.value = this.min;\n    } else if (percent === 1) {\n      this.value = this.max;\n    } else {\n      const exactValue = this._calculateValue(percent);\n\n      // This calculation finds the closest step by finding the closest\n      // whole number divisible by the step relative to the min.\n      const closestValue = Math.round((exactValue - this.min) / this.step) * this.step + this.min;\n\n      // The value needs to snap to the min and max.\n      this.value = this._clamp(closestValue, this.min, this.max);\n    }\n  }\n\n  /** Emits a change event if the current value is different from the last emitted value. */\n  private _emitChangeEvent() {\n    this._controlValueAccessorChangeFn(this.value);\n    this.valueChange.emit(this.value);\n    this.change.emit(this._createChangeEvent());\n  }\n\n  /** Emits an input event when the current value is different from the last emitted value. */\n  private _emitInputEvent() {\n    this.input.emit(this._createChangeEvent());\n  }\n\n  /** Updates the amount of space between ticks as a percentage of the width of the slider. */\n  private _updateTickIntervalPercent() {\n    if (!this.tickInterval || !this._sliderDimensions) {\n      return;\n    }\n\n    if (this.tickInterval == 'auto') {\n      let trackSize = this.vertical ? this._sliderDimensions.height : this._sliderDimensions.width;\n      let pixelsPerStep = trackSize * this.step / (this.max - this.min);\n      let stepsPerTick = Math.ceil(MIN_AUTO_TICK_SEPARATION / pixelsPerStep);\n      let pixelsPerTick = stepsPerTick * this.step;\n      this._tickIntervalPercent = pixelsPerTick / trackSize;\n    } else {\n      this._tickIntervalPercent = this.tickInterval * this.step / (this.max - this.min);\n    }\n  }\n\n  /** Creates a slider change object from the specified value. */\n  private _createChangeEvent(value = this.value): MatSliderChange {\n    let event = new MatSliderChange();\n\n    event.source = this;\n    event.value = value;\n\n    return event;\n  }\n\n  /** Calculates the percentage of the slider that a value is. */\n  private _calculatePercentage(value: number | null) {\n    return ((value || 0) - this.min) / (this.max - this.min);\n  }\n\n  /** Calculates the value a percentage of the slider corresponds to. */\n  private _calculateValue(percentage: number) {\n    return this.min + percentage * (this.max - this.min);\n  }\n\n  /** Return a number between two numbers. */\n  private _clamp(value: number, min = 0, max = 1) {\n    return Math.max(min, Math.min(value, max));\n  }\n\n  /**\n   * Get the bounding client rect of the slider track element.\n   * The track is used rather than the native element to ignore the extra space that the thumb can\n   * take up.\n   */\n  private _getSliderDimensions() {\n    return this._sliderWrapper ? this._sliderWrapper.nativeElement.getBoundingClientRect() : null;\n  }\n\n  /**\n   * Focuses the native element.\n   * Currently only used to allow a blur event to fire but will be used with keyboard input later.\n   */\n  private _focusHostElement() {\n    this._elementRef.nativeElement.focus();\n  }\n\n  /** Blurs the native element. */\n  private _blurHostElement() {\n    this._elementRef.nativeElement.blur();\n  }\n\n  /**\n   * Sets the model value. Implemented as part of ControlValueAccessor.\n   * @param value\n   */\n  writeValue(value: any) {\n    this.value = value;\n  }\n\n  /**\n   * Registers a callback to be triggered when the value has changed.\n   * Implemented as part of ControlValueAccessor.\n   * @param fn Callback to be registered.\n   */\n  registerOnChange(fn: (value: any) => void) {\n    this._controlValueAccessorChangeFn = fn;\n  }\n\n  /**\n   * Registers a callback to be triggered when the component is touched.\n   * Implemented as part of ControlValueAccessor.\n   * @param fn Callback to be registered.\n   */\n  registerOnTouched(fn: any) {\n    this.onTouched = fn;\n  }\n\n  /**\n   * Sets whether the component should be disabled.\n   * Implemented as part of ControlValueAccessor.\n   * @param isDisabled\n   */\n  setDisabledState(isDisabled: boolean) {\n    this.disabled = isDisabled;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {GestureConfig, MatCommonModule} from '@angular/material/core';\nimport {HAMMER_GESTURE_CONFIG} from '@angular/platform-browser';\nimport {MatSlider} from './slider';\n\n\n@NgModule({\n  imports: [CommonModule, MatCommonModule],\n  exports: [MatSlider, MatCommonModule],\n  declarations: [MatSlider],\n  providers: [{provide: HAMMER_GESTURE_CONFIG, useClass: GestureConfig}]\n})\nexport class MatSliderModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {OverlayRef} from '@angular/cdk/overlay';\nimport {Observable, Subject} from 'rxjs';\nimport {MatSnackBarContainer} from './snack-bar-container';\n\n\n/** Event that is emitted when a snack bar is dismissed. */\nexport interface MatSnackBarDismiss {\n  /** Whether the snack bar was dismissed using the action button. */\n  dismissedByAction: boolean;\n}\n\n/**\n * Reference to a snack bar dispatched from the snack bar service.\n */\nexport class MatSnackBarRef<T> {\n  /** The instance of the component making up the content of the snack bar. */\n  instance: T;\n\n  /**\n   * The instance of the component making up the content of the snack bar.\n   * @docs-private\n   */\n  containerInstance: MatSnackBarContainer;\n\n  /** Subject for notifying the user that the snack bar has been dismissed. */\n  private readonly _afterDismissed = new Subject<MatSnackBarDismiss>();\n\n  /** Subject for notifying the user that the snack bar has opened and appeared. */\n  private readonly _afterOpened = new Subject<void>();\n\n  /** Subject for notifying the user that the snack bar action was called. */\n  private readonly _onAction = new Subject<void>();\n\n  /**\n   * Timeout ID for the duration setTimeout call. Used to clear the timeout if the snackbar is\n   * dismissed before the duration passes.\n   */\n  private _durationTimeoutId: number;\n\n  /** Whether the snack bar was dismissed using the action button. */\n  private _dismissedByAction = false;\n\n  constructor(containerInstance: MatSnackBarContainer,\n              private _overlayRef: OverlayRef) {\n    this.containerInstance = containerInstance;\n    // Dismiss snackbar on action.\n    this.onAction().subscribe(() => this.dismiss());\n    containerInstance._onExit.subscribe(() => this._finishDismiss());\n  }\n\n  /** Dismisses the snack bar. */\n  dismiss(): void {\n    if (!this._afterDismissed.closed) {\n      this.containerInstance.exit();\n    }\n    clearTimeout(this._durationTimeoutId);\n  }\n\n  /** Marks the snackbar action clicked. */\n  dismissWithAction(): void {\n    if (!this._onAction.closed) {\n      this._dismissedByAction = true;\n      this._onAction.next();\n      this._onAction.complete();\n    }\n  }\n\n\n  /**\n   * Marks the snackbar action clicked.\n   * @deprecated Use `dismissWithAction` instead.\n   * @breaking-change 7.0.0\n   */\n  closeWithAction(): void {\n    this.dismissWithAction();\n  }\n\n  /** Dismisses the snack bar after some duration */\n  _dismissAfter(duration: number): void {\n    this._durationTimeoutId = setTimeout(() => this.dismiss(), duration);\n  }\n\n  /** Marks the snackbar as opened */\n  _open(): void {\n    if (!this._afterOpened.closed) {\n      this._afterOpened.next();\n      this._afterOpened.complete();\n    }\n  }\n\n  /** Cleans up the DOM after closing. */\n  private _finishDismiss(): void {\n    this._overlayRef.dispose();\n\n    if (!this._onAction.closed) {\n      this._onAction.complete();\n    }\n\n    this._afterDismissed.next({dismissedByAction: this._dismissedByAction});\n    this._afterDismissed.complete();\n    this._dismissedByAction = false;\n  }\n\n  /** Gets an observable that is notified when the snack bar is finished closing. */\n  afterDismissed(): Observable<MatSnackBarDismiss> {\n    return this._afterDismissed.asObservable();\n  }\n\n  /** Gets an observable that is notified when the snack bar has opened and appeared. */\n  afterOpened(): Observable<void> {\n    return this.containerInstance._onEnter;\n  }\n\n  /** Gets an observable that is notified when the snack bar action is called. */\n  onAction(): Observable<void> {\n    return this._onAction.asObservable();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ViewContainerRef, InjectionToken} from '@angular/core';\nimport {AriaLivePoliteness} from '@angular/cdk/a11y';\nimport {Direction} from '@angular/cdk/bidi';\n\n/** Injection token that can be used to access the data that was passed in to a snack bar. */\nexport const MAT_SNACK_BAR_DATA = new InjectionToken<any>('MatSnackBarData');\n\n/** Possible values for horizontalPosition on MatSnackBarConfig. */\nexport type MatSnackBarHorizontalPosition = 'start' | 'center' | 'end' | 'left' | 'right';\n\n/** Possible values for verticalPosition on MatSnackBarConfig. */\nexport type MatSnackBarVerticalPosition = 'top' | 'bottom';\n\n/**\n * Configuration used when opening a snack-bar.\n */\nexport class MatSnackBarConfig<D = any> {\n  /** The politeness level for the MatAriaLiveAnnouncer announcement. */\n  politeness?: AriaLivePoliteness = 'assertive';\n\n  /**\n   * Message to be announced by the LiveAnnouncer. When opening a snackbar without a custom\n   * component or template, the announcement message will default to the specified message.\n   */\n  announcementMessage?: string = '';\n\n  /** The view container to place the overlay for the snack bar into. */\n  viewContainerRef?: ViewContainerRef;\n\n  /** The length of time in milliseconds to wait before automatically dismissing the snack bar. */\n  duration?: number = 0;\n\n  /** Extra CSS classes to be added to the snack bar container. */\n  panelClass?: string | string[];\n\n  /** Text layout direction for the snack bar. */\n  direction?: Direction;\n\n  /** Data being injected into the child component. */\n  data?: D | null = null;\n\n  /** The horizontal position to place the snack bar. */\n  horizontalPosition?: MatSnackBarHorizontalPosition = 'center';\n\n  /** The vertical position to place the snack bar. */\n  verticalPosition?: MatSnackBarVerticalPosition = 'bottom';\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Component, ViewEncapsulation, Inject, ChangeDetectionStrategy} from '@angular/core';\nimport {MatSnackBarRef} from './snack-bar-ref';\nimport {MAT_SNACK_BAR_DATA} from './snack-bar-config';\n\n\n/**\n * A component used to open as the default snack bar, matching material spec.\n * This should only be used internally by the snack bar service.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'simple-snack-bar',\n  templateUrl: 'simple-snack-bar.html',\n  styleUrls: ['simple-snack-bar.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {\n    'class': 'mat-simple-snackbar',\n  }\n})\nexport class SimpleSnackBar {\n  /** Data that was injected into the snack bar. */\n  data: {message: string, action: string};\n\n  constructor(\n    public snackBarRef: MatSnackBarRef<SimpleSnackBar>,\n    @Inject(MAT_SNACK_BAR_DATA) data: any) {\n    this.data = data;\n  }\n\n  /** Performs the action on the snack bar. */\n  action(): void {\n    this.snackBarRef.dismissWithAction();\n  }\n\n  /** If the action button should be shown. */\n  get hasAction(): boolean {\n    return !!this.data.action;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/** Animations used by the Material snack bar. */\nexport const matSnackBarAnimations: {\n  readonly snackBarState: AnimationTriggerMetadata;\n} = {\n  /** Animation that shows and hides a snack bar. */\n  snackBarState: trigger('state', [\n    state('void, hidden', style({\n      transform: 'scale(0.8)',\n      opacity: 0,\n    })),\n    state('visible', style({\n      transform: 'scale(1)',\n      opacity: 1,\n    })),\n    transition('* => visible', animate('150ms cubic-bezier(0, 0, 0.2, 1)')),\n    transition('* => void, * => hidden', animate('75ms cubic-bezier(0.4, 0.0, 1, 1)', style({\n      opacity: 0\n    }))),\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {AnimationEvent} from '@angular/animations';\nimport {\n  BasePortalOutlet,\n  CdkPortalOutlet,\n  ComponentPortal,\n  TemplatePortal,\n} from '@angular/cdk/portal';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ComponentRef,\n  ElementRef,\n  EmbeddedViewRef,\n  NgZone,\n  OnDestroy,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {Observable, Subject} from 'rxjs';\nimport {take} from 'rxjs/operators';\nimport {matSnackBarAnimations} from './snack-bar-animations';\nimport {MatSnackBarConfig} from './snack-bar-config';\n\n\n/**\n * Internal component that wraps user-provided snack bar content.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'snack-bar-container',\n  templateUrl: 'snack-bar-container.html',\n  styleUrls: ['snack-bar-container.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  animations: [matSnackBarAnimations.snackBarState],\n  host: {\n    'role': 'alert',\n    'class': 'mat-snack-bar-container',\n    '[@state]': '_animationState',\n    '(@state.done)': 'onAnimationEnd($event)'\n  },\n})\nexport class MatSnackBarContainer extends BasePortalOutlet implements OnDestroy {\n  /** Whether the component has been destroyed. */\n  private _destroyed = false;\n\n  /** The portal outlet inside of this container into which the snack bar content will be loaded. */\n  @ViewChild(CdkPortalOutlet) _portalOutlet: CdkPortalOutlet;\n\n  /** Subject for notifying that the snack bar has exited from view. */\n  readonly _onExit: Subject<any> = new Subject();\n\n  /** Subject for notifying that the snack bar has finished entering the view. */\n  readonly _onEnter: Subject<any> = new Subject();\n\n  /** The state of the snack bar animations. */\n  _animationState = 'void';\n\n  constructor(\n    private _ngZone: NgZone,\n    private _elementRef: ElementRef<HTMLElement>,\n    private _changeDetectorRef: ChangeDetectorRef,\n    /** The snack bar configuration. */\n    public snackBarConfig: MatSnackBarConfig) {\n\n    super();\n  }\n\n  /** Attach a component portal as content to this snack bar container. */\n  attachComponentPortal<T>(portal: ComponentPortal<T>): ComponentRef<T> {\n    this._assertNotAttached();\n    this._applySnackBarClasses();\n    return this._portalOutlet.attachComponentPortal(portal);\n  }\n\n  /** Attach a template portal as content to this snack bar container. */\n  attachTemplatePortal<C>(portal: TemplatePortal<C>): EmbeddedViewRef<C> {\n    this._assertNotAttached();\n    this._applySnackBarClasses();\n    return this._portalOutlet.attachTemplatePortal(portal);\n  }\n\n  /** Handle end of animations, updating the state of the snackbar. */\n  onAnimationEnd(event: AnimationEvent) {\n    const {fromState, toState} = event;\n\n    if ((toState === 'void' && fromState !== 'void') || toState === 'hidden') {\n      this._completeExit();\n    }\n\n    if (toState === 'visible') {\n      // Note: we shouldn't use `this` inside the zone callback,\n      // because it can cause a memory leak.\n      const onEnter = this._onEnter;\n\n      this._ngZone.run(() => {\n        onEnter.next();\n        onEnter.complete();\n      });\n    }\n  }\n\n  /** Begin animation of snack bar entrance into view. */\n  enter(): void {\n    if (!this._destroyed) {\n      this._animationState = 'visible';\n      this._changeDetectorRef.detectChanges();\n    }\n  }\n\n  /** Begin animation of the snack bar exiting from view. */\n  exit(): Observable<void> {\n    // Note: this one transitions to `hidden`, rather than `void`, in order to handle the case\n    // where multiple snack bars are opened in quick succession (e.g. two consecutive calls to\n    // `MatSnackBar.open`).\n    this._animationState = 'hidden';\n    return this._onExit;\n  }\n\n  /** Makes sure the exit callbacks have been invoked when the element is destroyed. */\n  ngOnDestroy() {\n    this._destroyed = true;\n    this._completeExit();\n  }\n\n  /**\n   * Waits for the zone to settle before removing the element. Helps prevent\n   * errors where we end up removing an element which is in the middle of an animation.\n   */\n  private _completeExit() {\n    this._ngZone.onMicrotaskEmpty.asObservable().pipe(take(1)).subscribe(() => {\n      this._onExit.next();\n      this._onExit.complete();\n    });\n  }\n\n  /** Applies the various positioning and user-configured CSS classes to the snack bar. */\n  private _applySnackBarClasses() {\n    const element: HTMLElement = this._elementRef.nativeElement;\n    const panelClasses = this.snackBarConfig.panelClass;\n\n    if (panelClasses) {\n      if (Array.isArray(panelClasses)) {\n        // Note that we can't use a spread here, because IE doesn't support multiple arguments.\n        panelClasses.forEach(cssClass => element.classList.add(cssClass));\n      } else {\n        element.classList.add(panelClasses);\n      }\n    }\n\n    if (this.snackBarConfig.horizontalPosition === 'center') {\n      element.classList.add('mat-snack-bar-center');\n    }\n\n    if (this.snackBarConfig.verticalPosition === 'top') {\n      element.classList.add('mat-snack-bar-top');\n    }\n  }\n\n  /** Asserts that no content is already attached to the container. */\n  private _assertNotAttached() {\n    if (this._portalOutlet.hasAttached()) {\n      throw Error('Attempting to attach snack bar content after content is already attached');\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatButtonModule} from '@angular/material/button';\nimport {SimpleSnackBar} from './simple-snack-bar';\nimport {MatSnackBarContainer} from './snack-bar-container';\n\n\n@NgModule({\n  imports: [\n    OverlayModule,\n    PortalModule,\n    CommonModule,\n    MatButtonModule,\n    MatCommonModule,\n  ],\n  exports: [MatSnackBarContainer, MatCommonModule],\n  declarations: [MatSnackBarContainer, SimpleSnackBar],\n  entryComponents: [MatSnackBarContainer, SimpleSnackBar],\n})\nexport class MatSnackBarModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {LiveAnnouncer} from '@angular/cdk/a11y';\nimport {BreakpointObserver, Breakpoints} from '@angular/cdk/layout';\nimport {Overlay, OverlayConfig, OverlayRef} from '@angular/cdk/overlay';\nimport {ComponentPortal, ComponentType, PortalInjector, TemplatePortal} from '@angular/cdk/portal';\nimport {\n  ComponentRef,\n  EmbeddedViewRef,\n  Inject,\n  Injectable,\n  InjectionToken,\n  Injector,\n  Optional,\n  SkipSelf,\n  TemplateRef,\n  OnDestroy,\n} from '@angular/core';\nimport {take, takeUntil} from 'rxjs/operators';\nimport {SimpleSnackBar} from './simple-snack-bar';\nimport {MAT_SNACK_BAR_DATA, MatSnackBarConfig} from './snack-bar-config';\nimport {MatSnackBarContainer} from './snack-bar-container';\nimport {MatSnackBarModule} from './snack-bar-module';\nimport {MatSnackBarRef} from './snack-bar-ref';\n\n\n/** Injection token that can be used to specify default snack bar. */\nexport const MAT_SNACK_BAR_DEFAULT_OPTIONS =\n    new InjectionToken<MatSnackBarConfig>('mat-snack-bar-default-options', {\n      providedIn: 'root',\n      factory: MAT_SNACK_BAR_DEFAULT_OPTIONS_FACTORY,\n    });\n\n/** @docs-private */\nexport function MAT_SNACK_BAR_DEFAULT_OPTIONS_FACTORY(): MatSnackBarConfig {\n  return new MatSnackBarConfig();\n}\n\n/**\n * Service to dispatch Material Design snack bar messages.\n */\n@Injectable({providedIn: MatSnackBarModule})\nexport class MatSnackBar implements OnDestroy {\n  /**\n   * Reference to the current snack bar in the view *at this level* (in the Angular injector tree).\n   * If there is a parent snack-bar service, all operations should delegate to that parent\n   * via `_openedSnackBarRef`.\n   */\n  private _snackBarRefAtThisLevel: MatSnackBarRef<any> | null = null;\n\n  /** Reference to the currently opened snackbar at *any* level. */\n  get _openedSnackBarRef(): MatSnackBarRef<any> | null {\n    const parent = this._parentSnackBar;\n    return parent ? parent._openedSnackBarRef : this._snackBarRefAtThisLevel;\n  }\n\n  set _openedSnackBarRef(value: MatSnackBarRef<any> | null) {\n    if (this._parentSnackBar) {\n      this._parentSnackBar._openedSnackBarRef = value;\n    } else {\n      this._snackBarRefAtThisLevel = value;\n    }\n  }\n\n  constructor(\n      private _overlay: Overlay,\n      private _live: LiveAnnouncer,\n      private _injector: Injector,\n      private _breakpointObserver: BreakpointObserver,\n      @Optional() @SkipSelf() private _parentSnackBar: MatSnackBar,\n      @Inject(MAT_SNACK_BAR_DEFAULT_OPTIONS) private _defaultConfig: MatSnackBarConfig) {}\n\n  /**\n   * Creates and dispatches a snack bar with a custom component for the content, removing any\n   * currently opened snack bars.\n   *\n   * @param component Component to be instantiated.\n   * @param config Extra configuration for the snack bar.\n   */\n  openFromComponent<T>(component: ComponentType<T>, config?: MatSnackBarConfig):\n    MatSnackBarRef<T> {\n    return this._attach(component, config) as MatSnackBarRef<T>;\n  }\n\n  /**\n   * Creates and dispatches a snack bar with a custom template for the content, removing any\n   * currently opened snack bars.\n   *\n   * @param template Template to be instantiated.\n   * @param config Extra configuration for the snack bar.\n   */\n  openFromTemplate(template: TemplateRef<any>, config?: MatSnackBarConfig):\n    MatSnackBarRef<EmbeddedViewRef<any>> {\n    return this._attach(template, config);\n  }\n\n  /**\n   * Opens a snackbar with a message and an optional action.\n   * @param message The message to show in the snackbar.\n   * @param action The label for the snackbar action.\n   * @param config Additional configuration options for the snackbar.\n   */\n  open(message: string, action: string = '', config?: MatSnackBarConfig):\n      MatSnackBarRef<SimpleSnackBar> {\n    const _config = {...this._defaultConfig, ...config};\n\n    // Since the user doesn't have access to the component, we can\n    // override the data to pass in our own message and action.\n    _config.data = {message, action};\n\n    if (!_config.announcementMessage) {\n      _config.announcementMessage = message;\n    }\n\n    return this.openFromComponent(SimpleSnackBar, _config);\n  }\n\n  /**\n   * Dismisses the currently-visible snack bar.\n   */\n  dismiss(): void {\n    if (this._openedSnackBarRef) {\n      this._openedSnackBarRef.dismiss();\n    }\n  }\n\n  ngOnDestroy() {\n    // Only dismiss the snack bar at the current level on destroy.\n    if (this._snackBarRefAtThisLevel) {\n      this._snackBarRefAtThisLevel.dismiss();\n    }\n  }\n\n  /**\n   * Attaches the snack bar container component to the overlay.\n   */\n  private _attachSnackBarContainer(overlayRef: OverlayRef,\n                                   config: MatSnackBarConfig): MatSnackBarContainer {\n\n    const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n    const injector = new PortalInjector(userInjector || this._injector, new WeakMap([\n      [MatSnackBarConfig, config]\n    ]));\n\n    const containerPortal =\n        new ComponentPortal(MatSnackBarContainer, config.viewContainerRef, injector);\n    const containerRef: ComponentRef<MatSnackBarContainer> = overlayRef.attach(containerPortal);\n    containerRef.instance.snackBarConfig = config;\n    return containerRef.instance;\n  }\n\n  /**\n   * Places a new component or a template as the content of the snack bar container.\n   */\n  private _attach<T>(content: ComponentType<T> | TemplateRef<T>, userConfig?: MatSnackBarConfig):\n    MatSnackBarRef<T | EmbeddedViewRef<any>> {\n\n    const config = {...new MatSnackBarConfig(), ...this._defaultConfig, ...userConfig};\n    const overlayRef = this._createOverlay(config);\n    const container = this._attachSnackBarContainer(overlayRef, config);\n    const snackBarRef = new MatSnackBarRef<T | EmbeddedViewRef<any>>(container, overlayRef);\n\n    if (content instanceof TemplateRef) {\n      const portal = new TemplatePortal(content, null!, {\n        $implicit: config.data,\n        snackBarRef\n      } as any);\n\n      snackBarRef.instance = container.attachTemplatePortal(portal);\n    } else {\n      const injector = this._createInjector(config, snackBarRef);\n      const portal = new ComponentPortal(content, undefined, injector);\n      const contentRef = container.attachComponentPortal<T>(portal);\n\n      // We can't pass this via the injector, because the injector is created earlier.\n      snackBarRef.instance = contentRef.instance;\n    }\n\n    // Subscribe to the breakpoint observer and attach the mat-snack-bar-handset class as\n    // appropriate. This class is applied to the overlay element because the overlay must expand to\n    // fill the width of the screen for full width snackbars.\n    this._breakpointObserver.observe(Breakpoints.Handset).pipe(\n      takeUntil(overlayRef.detachments().pipe(take(1)))\n    ).subscribe(state => {\n      if (state.matches) {\n        overlayRef.overlayElement.classList.add('mat-snack-bar-handset');\n      } else {\n        overlayRef.overlayElement.classList.remove('mat-snack-bar-handset');\n      }\n    });\n\n    this._animateSnackBar(snackBarRef, config);\n    this._openedSnackBarRef = snackBarRef;\n    return this._openedSnackBarRef;\n  }\n\n  /** Animates the old snack bar out and the new one in. */\n  private _animateSnackBar(snackBarRef: MatSnackBarRef<any>, config: MatSnackBarConfig) {\n    // When the snackbar is dismissed, clear the reference to it.\n    snackBarRef.afterDismissed().subscribe(() => {\n      // Clear the snackbar ref if it hasn't already been replaced by a newer snackbar.\n      if (this._openedSnackBarRef == snackBarRef) {\n        this._openedSnackBarRef = null;\n      }\n    });\n\n    if (this._openedSnackBarRef) {\n      // If a snack bar is already in view, dismiss it and enter the\n      // new snack bar after exit animation is complete.\n      this._openedSnackBarRef.afterDismissed().subscribe(() => {\n        snackBarRef.containerInstance.enter();\n      });\n      this._openedSnackBarRef.dismiss();\n    } else {\n      // If no snack bar is in view, enter the new snack bar.\n      snackBarRef.containerInstance.enter();\n    }\n\n    // If a dismiss timeout is provided, set up dismiss based on after the snackbar is opened.\n    if (config.duration && config.duration > 0) {\n      snackBarRef.afterOpened().subscribe(() => snackBarRef._dismissAfter(config.duration!));\n    }\n\n    if (config.announcementMessage) {\n      this._live.announce(config.announcementMessage, config.politeness);\n    }\n  }\n\n  /**\n   * Creates a new overlay and places it in the correct location.\n   * @param config The user-specified snack bar config.\n   */\n  private _createOverlay(config: MatSnackBarConfig): OverlayRef {\n    const overlayConfig = new OverlayConfig();\n    overlayConfig.direction = config.direction;\n\n    let positionStrategy = this._overlay.position().global();\n    // Set horizontal position.\n    const isRtl = config.direction === 'rtl';\n    const isLeft = (\n      config.horizontalPosition === 'left' ||\n      (config.horizontalPosition === 'start' && !isRtl) ||\n      (config.horizontalPosition === 'end' && isRtl));\n    const isRight = !isLeft && config.horizontalPosition !== 'center';\n    if (isLeft) {\n      positionStrategy.left('0');\n    } else if (isRight) {\n      positionStrategy.right('0');\n    } else {\n      positionStrategy.centerHorizontally();\n    }\n    // Set horizontal position.\n    if (config.verticalPosition === 'top') {\n      positionStrategy.top('0');\n    } else {\n      positionStrategy.bottom('0');\n    }\n\n    overlayConfig.positionStrategy = positionStrategy;\n    return this._overlay.create(overlayConfig);\n  }\n\n  /**\n   * Creates an injector to be used inside of a snack bar component.\n   * @param config Config that was used to create the snack bar.\n   * @param snackBarRef Reference to the snack bar.\n   */\n  private _createInjector<T>(\n      config: MatSnackBarConfig,\n      snackBarRef: MatSnackBarRef<T>): PortalInjector {\n\n    const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n\n    return new PortalInjector(userInjector || this._injector, new WeakMap<any, any>([\n      [MatSnackBarRef, snackBarRef],\n      [MAT_SNACK_BAR_DATA, config.data]\n    ]));\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  Directive,\n  EventEmitter,\n  Input,\n  isDevMode,\n  OnChanges,\n  OnDestroy,\n  OnInit,\n  Output,\n} from '@angular/core';\nimport {\n  CanDisable,\n  CanDisableCtor,\n  HasInitialized,\n  HasInitializedCtor,\n  mixinDisabled,\n  mixinInitialized,\n} from '@angular/material/core';\nimport {Subject} from 'rxjs';\nimport {SortDirection} from './sort-direction';\nimport {\n  getSortDuplicateSortableIdError,\n  getSortHeaderMissingIdError,\n  getSortInvalidDirectionError,\n} from './sort-errors';\n\n/** Interface for a directive that holds sorting state consumed by `MatSortHeader`. */\nexport interface MatSortable {\n  /** The id of the column being sorted. */\n  id: string;\n\n  /** Starting sort direction. */\n  start: 'asc' | 'desc';\n\n  /** Whether to disable clearing the sorting state. */\n  disableClear: boolean;\n}\n\n/** The current sort state. */\nexport interface Sort {\n  /** The id of the column being sorted. */\n  active: string;\n\n  /** The sort direction. */\n  direction: SortDirection;\n}\n\n// Boilerplate for applying mixins to MatSort.\n/** @docs-private */\nexport class MatSortBase {}\nexport const _MatSortMixinBase: HasInitializedCtor & CanDisableCtor & typeof MatSortBase =\n    mixinInitialized(mixinDisabled(MatSortBase));\n\n/** Container for MatSortables to manage the sort state and provide default sort parameters. */\n@Directive({\n  selector: '[matSort]',\n  exportAs: 'matSort',\n  inputs: ['disabled: matSortDisabled']\n})\nexport class MatSort extends _MatSortMixinBase\n    implements CanDisable, HasInitialized, OnChanges, OnDestroy, OnInit {\n  /** Collection of all registered sortables that this directive manages. */\n  sortables = new Map<string, MatSortable>();\n\n  /** Used to notify any child components listening to state changes. */\n  readonly _stateChanges = new Subject<void>();\n\n  /** The id of the most recently sorted MatSortable. */\n  @Input('matSortActive') active: string;\n\n  /**\n   * The direction to set when an MatSortable is initially sorted.\n   * May be overriden by the MatSortable's sort start.\n   */\n  @Input('matSortStart') start: 'asc' | 'desc' = 'asc';\n\n  /** The sort direction of the currently active MatSortable. */\n  @Input('matSortDirection')\n  get direction(): SortDirection { return this._direction; }\n  set direction(direction: SortDirection) {\n    if (isDevMode() && direction && direction !== 'asc' && direction !== 'desc') {\n      throw getSortInvalidDirectionError(direction);\n    }\n    this._direction = direction;\n  }\n  private _direction: SortDirection = '';\n\n  /**\n   * Whether to disable the user from clearing the sort by finishing the sort direction cycle.\n   * May be overriden by the MatSortable's disable clear input.\n   */\n  @Input('matSortDisableClear')\n  get disableClear(): boolean { return this._disableClear; }\n  set disableClear(v: boolean) { this._disableClear = coerceBooleanProperty(v); }\n  private _disableClear: boolean;\n\n  /** Event emitted when the user changes either the active sort or sort direction. */\n  @Output('matSortChange') readonly sortChange: EventEmitter<Sort> = new EventEmitter<Sort>();\n\n  /**\n   * Register function to be used by the contained MatSortables. Adds the MatSortable to the\n   * collection of MatSortables.\n   */\n  register(sortable: MatSortable): void {\n    if (!sortable.id) {\n      throw getSortHeaderMissingIdError();\n    }\n\n    if (this.sortables.has(sortable.id)) {\n      throw getSortDuplicateSortableIdError(sortable.id);\n    }\n    this.sortables.set(sortable.id, sortable);\n  }\n\n  /**\n   * Unregister function to be used by the contained MatSortables. Removes the MatSortable from the\n   * collection of contained MatSortables.\n   */\n  deregister(sortable: MatSortable): void {\n    this.sortables.delete(sortable.id);\n  }\n\n  /** Sets the active sort id and determines the new sort direction. */\n  sort(sortable: MatSortable): void {\n    if (this.active != sortable.id) {\n      this.active = sortable.id;\n      this.direction = sortable.start ? sortable.start : this.start;\n    } else {\n      this.direction = this.getNextSortDirection(sortable);\n    }\n\n    this.sortChange.emit({active: this.active, direction: this.direction});\n  }\n\n  /** Returns the next sort direction of the active sortable, checking for potential overrides. */\n  getNextSortDirection(sortable: MatSortable): SortDirection {\n    if (!sortable) { return ''; }\n\n    // Get the sort direction cycle with the potential sortable overrides.\n    const disableClear = sortable.disableClear != null ? sortable.disableClear : this.disableClear;\n    let sortDirectionCycle = getSortDirectionCycle(sortable.start || this.start, disableClear);\n\n    // Get and return the next direction in the cycle\n    let nextDirectionIndex = sortDirectionCycle.indexOf(this.direction) + 1;\n    if (nextDirectionIndex >= sortDirectionCycle.length) { nextDirectionIndex = 0; }\n    return sortDirectionCycle[nextDirectionIndex];\n  }\n\n  ngOnInit() {\n    this._markInitialized();\n  }\n\n  ngOnChanges() {\n    this._stateChanges.next();\n  }\n\n  ngOnDestroy() {\n    this._stateChanges.complete();\n  }\n}\n\n/** Returns the sort direction cycle to use given the provided parameters of order and clear. */\nfunction getSortDirectionCycle(start: 'asc' | 'desc',\n                               disableClear: boolean): SortDirection[] {\n  let sortOrder: SortDirection[] = ['asc', 'desc'];\n  if (start == 'desc') { sortOrder.reverse(); }\n  if (!disableClear) { sortOrder.push(''); }\n\n  return sortOrder;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {AnimationEvent} from '@angular/animations';\nimport {FocusMonitor, FocusOrigin, FocusTrap, FocusTrapFactory} from '@angular/cdk/a11y';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {ESCAPE} from '@angular/cdk/keycodes';\nimport {Platform} from '@angular/cdk/platform';\nimport {CdkScrollable, ScrollDispatcher} from '@angular/cdk/scrolling';\nimport {DOCUMENT} from '@angular/common';\nimport {\n  AfterContentChecked,\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  ContentChildren,\n  DoCheck,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  Output,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {fromEvent, merge, Observable, Subject} from 'rxjs';\nimport {debounceTime, filter, map, startWith, take, takeUntil} from 'rxjs/operators';\nimport {matDrawerAnimations} from './drawer-animations';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\n\n\n/**\n * Throws an exception when two MatDrawer are matching the same position.\n * @docs-private\n */\nexport function throwMatDuplicatedDrawerError(position: string) {\n  throw Error(`A drawer was already declared for 'position=\"${position}\"'`);\n}\n\n\n/** Result of the toggle promise that indicates the state of the drawer. */\nexport type MatDrawerToggleResult = 'open' | 'close';\n\n/** Configures whether drawers should use auto sizing by default. */\nexport const MAT_DRAWER_DEFAULT_AUTOSIZE =\n    new InjectionToken<boolean>('MAT_DRAWER_DEFAULT_AUTOSIZE', {\n      providedIn: 'root',\n      factory: MAT_DRAWER_DEFAULT_AUTOSIZE_FACTORY,\n    });\n\n/** @docs-private */\nexport function MAT_DRAWER_DEFAULT_AUTOSIZE_FACTORY(): boolean {\n  return false;\n}\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-drawer-content',\n  template: '<ng-content></ng-content>',\n  host: {\n    'class': 'mat-drawer-content',\n    '[style.margin-left.px]': '_container._contentMargins.left',\n    '[style.margin-right.px]': '_container._contentMargins.right',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatDrawerContent extends CdkScrollable implements AfterContentInit {\n  constructor(\n      private _changeDetectorRef: ChangeDetectorRef,\n      @Inject(forwardRef(() => MatDrawerContainer)) public _container: MatDrawerContainer,\n      elementRef: ElementRef<HTMLElement>,\n      scrollDispatcher: ScrollDispatcher,\n      ngZone: NgZone) {\n    super(elementRef, scrollDispatcher, ngZone);\n  }\n\n  ngAfterContentInit() {\n    this._container._contentMarginChanges.subscribe(() => {\n      this._changeDetectorRef.markForCheck();\n    });\n  }\n}\n\n\n/**\n * This component corresponds to a drawer that can be opened on the drawer container.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-drawer',\n  exportAs: 'matDrawer',\n  templateUrl: 'drawer.html',\n  animations: [matDrawerAnimations.transformDrawer],\n  host: {\n    'class': 'mat-drawer',\n    '[@transform]': '_animationState',\n    '(@transform.start)': '_onAnimationStart($event)',\n    '(@transform.done)': '_onAnimationEnd($event)',\n    // must prevent the browser from aligning text based on value\n    '[attr.align]': 'null',\n    '[class.mat-drawer-end]': 'position === \"end\"',\n    '[class.mat-drawer-over]': 'mode === \"over\"',\n    '[class.mat-drawer-push]': 'mode === \"push\"',\n    '[class.mat-drawer-side]': 'mode === \"side\"',\n    'tabIndex': '-1',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatDrawer implements AfterContentInit, AfterContentChecked, OnDestroy {\n  private _focusTrap: FocusTrap;\n  private _elementFocusedBeforeDrawerWasOpened: HTMLElement | null = null;\n\n  /** Whether the drawer is initialized. Used for disabling the initial animation. */\n  private _enableAnimations = false;\n\n  /** The side that the drawer is attached to. */\n  @Input()\n  get position(): 'start' | 'end' { return this._position; }\n  set position(value: 'start' | 'end') {\n    // Make sure we have a valid value.\n    value = value === 'end' ? 'end' : 'start';\n    if (value != this._position) {\n      this._position = value;\n      this.onPositionChanged.emit();\n    }\n  }\n  private _position: 'start' | 'end' = 'start';\n\n  /** Mode of the drawer; one of 'over', 'push' or 'side'. */\n  @Input()\n  get mode(): 'over' | 'push' | 'side' { return this._mode; }\n  set mode(value: 'over' | 'push' | 'side') {\n    this._mode = value;\n    this._modeChanged.next();\n  }\n  private _mode: 'over' | 'push' | 'side' = 'over';\n\n  /** Whether the drawer can be closed with the escape key or by clicking on the backdrop. */\n  @Input()\n  get disableClose(): boolean { return this._disableClose; }\n  set disableClose(value: boolean) { this._disableClose = coerceBooleanProperty(value); }\n  private _disableClose: boolean = false;\n\n  /** Whether the drawer should focus the first focusable element automatically when opened. */\n  @Input()\n  get autoFocus(): boolean { return this._autoFocus; }\n  set autoFocus(value: boolean) { this._autoFocus = coerceBooleanProperty(value); }\n  private _autoFocus: boolean = true;\n\n  /** How the sidenav was opened (keypress, mouse click etc.) */\n  private _openedVia: FocusOrigin | null;\n\n  /** Emits whenever the drawer has started animating. */\n  _animationStarted = new EventEmitter<AnimationEvent>();\n\n  /** Current state of the sidenav animation. */\n  _animationState: 'open-instant' | 'open' | 'void' = 'void';\n\n  /** Event emitted when the drawer open state is changed. */\n  @Output() readonly openedChange: EventEmitter<boolean> =\n      // Note this has to be async in order to avoid some issues with two-bindings (see #8872).\n      new EventEmitter<boolean>(/* isAsync */true);\n\n  /** Event emitted when the drawer has been opened. */\n  @Output('opened')\n  get _openedStream(): Observable<void> {\n    return this.openedChange.pipe(filter(o => o), map(() => {}));\n  }\n\n  /** Event emitted when the drawer has started opening. */\n  @Output()\n  get openedStart(): Observable<void> {\n    return this._animationStarted.pipe(\n      filter(e => e.fromState !== e.toState && e.toState.indexOf('open') === 0),\n      map(() => {})\n    );\n  }\n\n  /** Event emitted when the drawer has been closed. */\n  @Output('closed')\n  get _closedStream(): Observable<void> {\n    return this.openedChange.pipe(filter(o => !o), map(() => {}));\n  }\n\n  /** Event emitted when the drawer has started closing. */\n  @Output()\n  get closedStart(): Observable<void> {\n    return this._animationStarted.pipe(\n      filter(e => e.fromState !== e.toState && e.toState === 'void'),\n      map(() => {})\n    );\n  }\n\n  /** Event emitted when the drawer's position changes. */\n  // tslint:disable-next-line:no-output-on-prefix\n  @Output('positionChanged') onPositionChanged: EventEmitter<void> = new EventEmitter<void>();\n\n  /**\n   * An observable that emits when the drawer mode changes. This is used by the drawer container to\n   * to know when to when the mode changes so it can adapt the margins on the content.\n   */\n  readonly _modeChanged = new Subject();\n\n  get _isFocusTrapEnabled(): boolean {\n    // The focus trap is only enabled when the drawer is open in any mode other than side.\n    return this.opened && this.mode !== 'side';\n  }\n\n  constructor(private _elementRef: ElementRef<HTMLElement>,\n              private _focusTrapFactory: FocusTrapFactory,\n              private _focusMonitor: FocusMonitor,\n              private _platform: Platform,\n              private _ngZone: NgZone,\n              @Optional() @Inject(DOCUMENT) private _doc: any) {\n\n    this.openedChange.subscribe((opened: boolean) => {\n      if (opened) {\n        if (this._doc) {\n          this._elementFocusedBeforeDrawerWasOpened = this._doc.activeElement as HTMLElement;\n        }\n\n        if (this._isFocusTrapEnabled && this._focusTrap) {\n          this._trapFocus();\n        }\n      } else {\n        this._restoreFocus();\n      }\n    });\n\n    /**\n     * Listen to `keydown` events outside the zone so that change detection is not run every\n     * time a key is pressed. Instead we re-enter the zone only if the `ESC` key is pressed\n     * and we don't have close disabled.\n     */\n    this._ngZone.runOutsideAngular(() => {\n        fromEvent<KeyboardEvent>(this._elementRef.nativeElement, 'keydown').pipe(\n            filter(event => event.keyCode === ESCAPE && !this.disableClose)\n        ).subscribe(event => this._ngZone.run(() => {\n            this.close();\n            event.stopPropagation();\n        }));\n    });\n  }\n\n  /** Traps focus inside the drawer. */\n  private _trapFocus() {\n    if (!this.autoFocus) {\n      return;\n    }\n\n    this._focusTrap.focusInitialElementWhenReady().then(hasMovedFocus => {\n      // If there were no focusable elements, focus the sidenav itself so the keyboard navigation\n      // still works. We need to check that `focus` is a function due to Universal.\n      if (!hasMovedFocus && typeof this._elementRef.nativeElement.focus === 'function') {\n        this._elementRef.nativeElement.focus();\n      }\n    });\n  }\n\n  /**\n   * If focus is currently inside the drawer, restores it to where it was before the drawer\n   * opened.\n   */\n  private _restoreFocus() {\n    if (!this.autoFocus) {\n      return;\n    }\n\n    const activeEl = this._doc && this._doc.activeElement;\n\n    if (activeEl && this._elementRef.nativeElement.contains(activeEl)) {\n      if (this._elementFocusedBeforeDrawerWasOpened instanceof HTMLElement) {\n        this._focusMonitor.focusVia(this._elementFocusedBeforeDrawerWasOpened, this._openedVia);\n      } else {\n        this._elementRef.nativeElement.blur();\n      }\n    }\n\n    this._elementFocusedBeforeDrawerWasOpened = null;\n    this._openedVia = null;\n  }\n\n  ngAfterContentInit() {\n    this._focusTrap = this._focusTrapFactory.create(this._elementRef.nativeElement);\n    this._focusTrap.enabled = this._isFocusTrapEnabled;\n  }\n\n  ngAfterContentChecked() {\n    // Enable the animations after the lifecycle hooks have run, in order to avoid animating\n    // drawers that are open by default. When we're on the server, we shouldn't enable the\n    // animations, because we don't want the drawer to animate the first time the user sees\n    // the page.\n    if (this._platform.isBrowser) {\n      this._enableAnimations = true;\n    }\n  }\n\n  ngOnDestroy() {\n    if (this._focusTrap) {\n      this._focusTrap.destroy();\n    }\n  }\n\n  /**\n   * Whether the drawer is opened. We overload this because we trigger an event when it\n   * starts or end.\n   */\n  @Input()\n  get opened(): boolean { return this._opened; }\n  set opened(value: boolean) { this.toggle(coerceBooleanProperty(value)); }\n  private _opened: boolean = false;\n\n  /**\n   * Open the drawer.\n   * @param openedVia Whether the drawer was opened by a key press, mouse click or programmatically.\n   * Used for focus management after the sidenav is closed.\n   */\n  open(openedVia?: FocusOrigin): Promise<MatDrawerToggleResult> {\n    return this.toggle(true, openedVia);\n  }\n\n  /** Close the drawer. */\n  close(): Promise<MatDrawerToggleResult> {\n    return this.toggle(false);\n  }\n\n  /**\n   * Toggle this drawer.\n   * @param isOpen Whether the drawer should be open.\n   * @param openedVia Whether the drawer was opened by a key press, mouse click or programmatically.\n   * Used for focus management after the sidenav is closed.\n   */\n  toggle(isOpen: boolean = !this.opened, openedVia: FocusOrigin = 'program'):\n    Promise<MatDrawerToggleResult> {\n\n    this._opened = isOpen;\n\n    if (isOpen) {\n      this._animationState = this._enableAnimations ? 'open' : 'open-instant';\n      this._openedVia = openedVia;\n    } else {\n      this._animationState = 'void';\n      this._restoreFocus();\n    }\n\n    if (this._focusTrap) {\n      this._focusTrap.enabled = this._isFocusTrapEnabled;\n    }\n\n    return new Promise<MatDrawerToggleResult>(resolve => {\n      this.openedChange.pipe(take(1)).subscribe(open => resolve(open ? 'open' : 'close'));\n    });\n  }\n\n  _onAnimationStart(event: AnimationEvent) {\n    this._animationStarted.emit(event);\n  }\n\n  _onAnimationEnd(event: AnimationEvent) {\n    const {fromState, toState} = event;\n\n    if ((toState.indexOf('open') === 0 && fromState === 'void') ||\n        (toState === 'void' && fromState.indexOf('open') === 0)) {\n      this.openedChange.emit(this._opened);\n    }\n  }\n\n  get _width(): number {\n    return this._elementRef.nativeElement ? (this._elementRef.nativeElement.offsetWidth || 0) : 0;\n  }\n}\n\n\n/**\n * `<mat-drawer-container>` component.\n *\n * This is the parent component to one or two `<mat-drawer>`s that validates the state internally\n * and coordinates the backdrop and content styling.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-drawer-container',\n  exportAs: 'matDrawerContainer',\n  templateUrl: 'drawer-container.html',\n  styleUrls: ['drawer.css'],\n  host: {\n    'class': 'mat-drawer-container',\n    '[class.mat-drawer-container-explicit-backdrop]': '_backdropOverride',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatDrawerContainer implements AfterContentInit, DoCheck, OnDestroy {\n  @ContentChildren(MatDrawer) _drawers: QueryList<MatDrawer>;\n  @ContentChild(MatDrawerContent) _content: MatDrawerContent;\n  @ViewChild(MatDrawerContent) _userContent: MatDrawerContent;\n\n  /** The drawer child with the `start` position. */\n  get start(): MatDrawer | null { return this._start; }\n\n  /** The drawer child with the `end` position. */\n  get end(): MatDrawer | null { return this._end; }\n\n  /**\n   * Whether to automatically resize the container whenever\n   * the size of any of its drawers changes.\n   *\n   * **Use at your own risk!** Enabling this option can cause layout thrashing by measuring\n   * the drawers on every change detection cycle. Can be configured globally via the\n   * `MAT_DRAWER_DEFAULT_AUTOSIZE` token.\n   */\n  @Input()\n  get autosize(): boolean { return this._autosize; }\n  set autosize(value: boolean) { this._autosize = coerceBooleanProperty(value); }\n  private _autosize: boolean;\n\n  /**\n   * Whether the drawer container should have a backdrop while one of the sidenavs is open.\n   * If explicitly set to `true`, the backdrop will be enabled for drawers in the `side`\n   * mode as well.\n   */\n  @Input()\n  get hasBackdrop() {\n    if (this._backdropOverride == null) {\n      return !this._start || this._start.mode !== 'side' || !this._end || this._end.mode !== 'side';\n    }\n\n    return this._backdropOverride;\n  }\n  set hasBackdrop(value: any) {\n    this._backdropOverride = value == null ? null : coerceBooleanProperty(value);\n  }\n  _backdropOverride: boolean | null;\n\n  /** Event emitted when the drawer backdrop is clicked. */\n  @Output() readonly backdropClick: EventEmitter<void> = new EventEmitter<void>();\n\n  /** The drawer at the start/end position, independent of direction. */\n  private _start: MatDrawer | null;\n  private _end: MatDrawer | null;\n\n  /**\n   * The drawer at the left/right. When direction changes, these will change as well.\n   * They're used as aliases for the above to set the left/right style properly.\n   * In LTR, _left == _start and _right == _end.\n   * In RTL, _left == _end and _right == _start.\n   */\n  private _left: MatDrawer | null;\n  private _right: MatDrawer | null;\n\n  /** Emits when the component is destroyed. */\n  private readonly _destroyed = new Subject<void>();\n\n  /** Emits on every ngDoCheck. Used for debouncing reflows. */\n  private readonly _doCheckSubject = new Subject<void>();\n\n  /**\n   * Margins to be applied to the content. These are used to push / shrink the drawer content when a\n   * drawer is open. We use margin rather than transform even for push mode because transform breaks\n   * fixed position elements inside of the transformed element.\n   */\n  _contentMargins: {left: number|null, right: number|null} = {left: null, right: null};\n\n  readonly _contentMarginChanges = new Subject<{left: number|null, right: number|null}>();\n\n  /** Reference to the CdkScrollable instance that wraps the scrollable content. */\n  get scrollable(): CdkScrollable {\n    return this._userContent || this._content;\n  }\n\n  constructor(@Optional() private _dir: Directionality,\n              private _element: ElementRef<HTMLElement>,\n              private _ngZone: NgZone,\n              private _changeDetectorRef: ChangeDetectorRef,\n              @Inject(MAT_DRAWER_DEFAULT_AUTOSIZE) defaultAutosize = false,\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) private _animationMode?: string) {\n\n    // If a `Dir` directive exists up the tree, listen direction changes\n    // and update the left/right properties to point to the proper start/end.\n    if (_dir) {\n      _dir.change.pipe(takeUntil(this._destroyed)).subscribe(() => {\n        this._validateDrawers();\n        this._updateContentMargins();\n      });\n    }\n\n    this._autosize = defaultAutosize;\n  }\n\n  ngAfterContentInit() {\n    this._drawers.changes.pipe(startWith(null)).subscribe(() => {\n      this._validateDrawers();\n\n      this._drawers.forEach((drawer: MatDrawer) => {\n        this._watchDrawerToggle(drawer);\n        this._watchDrawerPosition(drawer);\n        this._watchDrawerMode(drawer);\n      });\n\n      if (!this._drawers.length ||\n          this._isDrawerOpen(this._start) ||\n          this._isDrawerOpen(this._end)) {\n        this._updateContentMargins();\n      }\n\n      this._changeDetectorRef.markForCheck();\n    });\n\n    this._doCheckSubject.pipe(\n      debounceTime(10), // Arbitrary debounce time, less than a frame at 60fps\n      takeUntil(this._destroyed)\n    ).subscribe(() => this._updateContentMargins());\n  }\n\n  ngOnDestroy() {\n    this._doCheckSubject.complete();\n    this._destroyed.next();\n    this._destroyed.complete();\n  }\n\n  /** Calls `open` of both start and end drawers */\n  open(): void {\n    this._drawers.forEach(drawer => drawer.open());\n  }\n\n  /** Calls `close` of both start and end drawers */\n  close(): void {\n    this._drawers.forEach(drawer => drawer.close());\n  }\n\n  ngDoCheck() {\n    // If users opted into autosizing, do a check every change detection cycle.\n    if (this._autosize && this._isPushed()) {\n      // Run outside the NgZone, otherwise the debouncer will throw us into an infinite loop.\n      this._ngZone.runOutsideAngular(() => this._doCheckSubject.next());\n    }\n  }\n\n  /**\n   * Subscribes to drawer events in order to set a class on the main container element when the\n   * drawer is open and the backdrop is visible. This ensures any overflow on the container element\n   * is properly hidden.\n   */\n  private _watchDrawerToggle(drawer: MatDrawer): void {\n    drawer._animationStarted.pipe(\n      takeUntil(this._drawers.changes),\n      filter((event: AnimationEvent) => event.fromState !== event.toState)\n    )\n    .subscribe((event: AnimationEvent) => {\n      // Set the transition class on the container so that the animations occur. This should not\n      // be set initially because animations should only be triggered via a change in state.\n      if (event.toState !== 'open-instant' && this._animationMode !== 'NoopAnimations') {\n        this._element.nativeElement.classList.add('mat-drawer-transition');\n      }\n\n      this._updateContentMargins();\n      this._changeDetectorRef.markForCheck();\n    });\n\n    if (drawer.mode !== 'side') {\n      drawer.openedChange.pipe(takeUntil(this._drawers.changes)).subscribe(() =>\n          this._setContainerClass(drawer.opened));\n    }\n  }\n\n  /**\n   * Subscribes to drawer onPositionChanged event in order to\n   * re-validate drawers when the position changes.\n   */\n  private _watchDrawerPosition(drawer: MatDrawer): void {\n    if (!drawer) {\n      return;\n    }\n    // NOTE: We need to wait for the microtask queue to be empty before validating,\n    // since both drawers may be swapping positions at the same time.\n    drawer.onPositionChanged.pipe(takeUntil(this._drawers.changes)).subscribe(() => {\n      this._ngZone.onMicrotaskEmpty.asObservable().pipe(take(1)).subscribe(() => {\n        this._validateDrawers();\n      });\n    });\n  }\n\n  /** Subscribes to changes in drawer mode so we can run change detection. */\n  private _watchDrawerMode(drawer: MatDrawer): void {\n    if (drawer) {\n      drawer._modeChanged.pipe(takeUntil(merge(this._drawers.changes, this._destroyed)))\n        .subscribe(() => {\n          this._updateContentMargins();\n          this._changeDetectorRef.markForCheck();\n        });\n    }\n  }\n\n  /** Toggles the 'mat-drawer-opened' class on the main 'mat-drawer-container' element. */\n  private _setContainerClass(isAdd: boolean): void {\n    if (isAdd) {\n      this._element.nativeElement.classList.add('mat-drawer-opened');\n    } else {\n      this._element.nativeElement.classList.remove('mat-drawer-opened');\n    }\n  }\n\n  /** Validate the state of the drawer children components. */\n  private _validateDrawers() {\n    this._start = this._end = null;\n\n    // Ensure that we have at most one start and one end drawer.\n    this._drawers.forEach(drawer => {\n      if (drawer.position == 'end') {\n        if (this._end != null) {\n          throwMatDuplicatedDrawerError('end');\n        }\n        this._end = drawer;\n      } else {\n        if (this._start != null) {\n          throwMatDuplicatedDrawerError('start');\n        }\n        this._start = drawer;\n      }\n    });\n\n    this._right = this._left = null;\n\n    // Detect if we're LTR or RTL.\n    if (this._dir && this._dir.value === 'rtl') {\n      this._left = this._end;\n      this._right = this._start;\n    } else {\n      this._left = this._start;\n      this._right = this._end;\n    }\n  }\n\n  /** Whether the container is being pushed to the side by one of the drawers. */\n  private _isPushed() {\n    return (this._isDrawerOpen(this._start) && this._start.mode != 'over') ||\n           (this._isDrawerOpen(this._end) && this._end.mode != 'over');\n  }\n\n  _onBackdropClicked() {\n    this.backdropClick.emit();\n    this._closeModalDrawer();\n  }\n\n  _closeModalDrawer() {\n    // Close all open drawers where closing is not disabled and the mode is not `side`.\n    [this._start, this._end]\n      .filter(drawer => drawer && !drawer.disableClose && this._canHaveBackdrop(drawer))\n      .forEach(drawer => drawer!.close());\n  }\n\n  _isShowingBackdrop(): boolean {\n    return (this._isDrawerOpen(this._start) && this._canHaveBackdrop(this._start)) ||\n           (this._isDrawerOpen(this._end) && this._canHaveBackdrop(this._end));\n  }\n\n  private _canHaveBackdrop(drawer: MatDrawer): boolean {\n    return drawer.mode !== 'side' || !!this._backdropOverride;\n  }\n\n  private _isDrawerOpen(drawer: MatDrawer | null): drawer is MatDrawer {\n    return drawer != null && drawer.opened;\n  }\n\n  /**\n   * Recalculates and updates the inline styles for the content. Note that this should be used\n   * sparingly, because it causes a reflow.\n   */\n  private _updateContentMargins() {\n    // 1. For drawers in `over` mode, they don't affect the content.\n    // 2. For drawers in `side` mode they should shrink the content. We do this by adding to the\n    //    left margin (for left drawer) or right margin (for right the drawer).\n    // 3. For drawers in `push` mode the should shift the content without resizing it. We do this by\n    //    adding to the left or right margin and simultaneously subtracting the same amount of\n    //    margin from the other side.\n\n    let left = 0;\n    let right = 0;\n\n    if (this._left && this._left.opened) {\n      if (this._left.mode == 'side') {\n        left += this._left._width;\n      } else if (this._left.mode == 'push') {\n        let width = this._left._width;\n        left += width;\n        right -= width;\n      }\n    }\n\n    if (this._right && this._right.opened) {\n      if (this._right.mode == 'side') {\n        right += this._right._width;\n      } else if (this._right.mode == 'push') {\n        let width = this._right._width;\n        right += width;\n        left -= width;\n      }\n    }\n\n    // If either `right` or `left` is zero, don't set a style to the element. This\n    // allows users to specify a custom size via CSS class in SSR scenarios where the\n    // measured widths will always be zero. Note that we reset to `null` here, rather\n    // than below, in order to ensure that the types in the `if` below are consistent.\n    left = left || null!;\n    right = right || null!;\n\n    if (left !== this._contentMargins.left || right !== this._contentMargins.right) {\n      this._contentMargins = {left, right};\n\n      // Pull back into the NgZone since in some cases we could be outside. We need to be careful\n      // to do it only when something changed, otherwise we can end up hitting the zone too often.\n      this._ngZone.run(() => this._contentMarginChanges.next(this._contentMargins));\n    }\n\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  ContentChildren,\n  forwardRef,\n  Inject,\n  Input,\n  ViewEncapsulation,\n  QueryList,\n  ElementRef,\n  NgZone,\n} from '@angular/core';\nimport {MatDrawer, MatDrawerContainer, MatDrawerContent} from './drawer';\nimport {matDrawerAnimations} from './drawer-animations';\nimport {coerceBooleanProperty, coerceNumberProperty} from '@angular/cdk/coercion';\nimport {ScrollDispatcher} from '@angular/cdk/scrolling';\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-sidenav-content',\n  template: '<ng-content></ng-content>',\n  host: {\n    'class': 'mat-drawer-content mat-sidenav-content',\n    '[style.margin-left.px]': '_container._contentMargins.left',\n    '[style.margin-right.px]': '_container._contentMargins.right',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatSidenavContent extends MatDrawerContent {\n  constructor(\n      changeDetectorRef: ChangeDetectorRef,\n      @Inject(forwardRef(() => MatSidenavContainer)) container: MatSidenavContainer,\n      elementRef: ElementRef<HTMLElement>,\n      scrollDispatcher: ScrollDispatcher,\n      ngZone: NgZone) {\n    super(changeDetectorRef, container, elementRef, scrollDispatcher, ngZone);\n  }\n}\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-sidenav',\n  exportAs: 'matSidenav',\n  templateUrl: 'drawer.html',\n  animations: [matDrawerAnimations.transformDrawer],\n  host: {\n    'class': 'mat-drawer mat-sidenav',\n    'tabIndex': '-1',\n    '[@transform]': '_animationState',\n    '(@transform.start)': '_onAnimationStart($event)',\n    '(@transform.done)': '_onAnimationEnd($event)',\n    // must prevent the browser from aligning text based on value\n    '[attr.align]': 'null',\n    '[class.mat-drawer-end]': 'position === \"end\"',\n    '[class.mat-drawer-over]': 'mode === \"over\"',\n    '[class.mat-drawer-push]': 'mode === \"push\"',\n    '[class.mat-drawer-side]': 'mode === \"side\"',\n    '[class.mat-sidenav-fixed]': 'fixedInViewport',\n    '[style.top.px]': 'fixedInViewport ? fixedTopGap : null',\n    '[style.bottom.px]': 'fixedInViewport ? fixedBottomGap : null',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatSidenav extends MatDrawer {\n  /** Whether the sidenav is fixed in the viewport. */\n  @Input()\n  get fixedInViewport(): boolean { return this._fixedInViewport; }\n  set fixedInViewport(value) { this._fixedInViewport = coerceBooleanProperty(value); }\n  private _fixedInViewport = false;\n\n  /**\n   * The gap between the top of the sidenav and the top of the viewport when the sidenav is in fixed\n   * mode.\n   */\n  @Input()\n  get fixedTopGap(): number { return this._fixedTopGap; }\n  set fixedTopGap(value) { this._fixedTopGap = coerceNumberProperty(value); }\n  private _fixedTopGap = 0;\n\n  /**\n   * The gap between the bottom of the sidenav and the bottom of the viewport when the sidenav is in\n   * fixed mode.\n   */\n  @Input()\n  get fixedBottomGap(): number { return this._fixedBottomGap; }\n  set fixedBottomGap(value) { this._fixedBottomGap = coerceNumberProperty(value); }\n  private _fixedBottomGap = 0;\n}\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-sidenav-container',\n  exportAs: 'matSidenavContainer',\n  templateUrl: 'sidenav-container.html',\n  styleUrls: ['drawer.css'],\n  host: {\n    'class': 'mat-drawer-container mat-sidenav-container',\n    '[class.mat-drawer-container-explicit-backdrop]': '_backdropOverride',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatSidenavContainer extends MatDrawerContainer {\n  @ContentChildren(MatSidenav) _drawers: QueryList<MatSidenav>;\n  @ContentChild(MatSidenavContent) _content: MatSidenavContent;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {PlatformModule} from '@angular/cdk/platform';\nimport {ScrollingModule} from '@angular/cdk/scrolling';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatDrawer, MatDrawerContainer, MatDrawerContent} from './drawer';\nimport {MatSidenav, MatSidenavContainer, MatSidenavContent} from './sidenav';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatCommonModule,\n    ScrollingModule,\n    PlatformModule,\n  ],\n  exports: [\n    MatCommonModule,\n    MatDrawer,\n    MatDrawerContainer,\n    MatDrawerContent,\n    MatSidenav,\n    MatSidenavContainer,\n    MatSidenavContent,\n  ],\n  declarations: [\n    MatDrawer,\n    MatDrawerContainer,\n    MatDrawerContent,\n    MatSidenav,\n    MatSidenavContainer,\n    MatSidenavContent,\n  ],\n})\nexport class MatSidenavModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {InjectionToken} from '@angular/core';\n\n\n/** Default `mat-slide-toggle` options that can be overridden. */\nexport interface MatSlideToggleDefaultOptions {\n  /** Whether toggle action triggers value changes in slide toggle. */\n  disableToggleValue?: boolean;\n  /** Whether drag action triggers value changes in slide toggle. */\n  disableDragValue?: boolean;\n}\n\n/** Injection token to be used to override the default options for `mat-slide-toggle`. */\nexport const MAT_SLIDE_TOGGLE_DEFAULT_OPTIONS =\n  new InjectionToken<MatSlideToggleDefaultOptions>('mat-slide-toggle-default-options', {\n    providedIn: 'root',\n    factory: () => ({disableToggleValue: false, disableDragValue: false})\n  });\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor} from '@angular/cdk/a11y';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {Platform} from '@angular/cdk/platform';\nimport {\n  AfterContentInit,\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Input,\n  OnDestroy,\n  Output,\n  ViewChild,\n  ViewEncapsulation,\n  NgZone,\n  Optional,\n  Inject,\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {\n  CanColor, CanColorCtor,\n  CanDisable, CanDisableCtor,\n  CanDisableRipple, CanDisableRippleCtor,\n  HammerInput,\n  HasTabIndex, HasTabIndexCtor,\n  mixinColor,\n  mixinDisabled,\n  mixinDisableRipple,\n  mixinTabIndex,\n} from '@angular/material/core';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\nimport {\n  MAT_SLIDE_TOGGLE_DEFAULT_OPTIONS,\n  MatSlideToggleDefaultOptions\n} from './slide-toggle-config';\n\n// Increasing integer for generating unique ids for slide-toggle components.\nlet nextUniqueId = 0;\n\nexport const MAT_SLIDE_TOGGLE_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatSlideToggle),\n  multi: true\n};\n\n/** Change event object emitted by a MatSlideToggle. */\nexport class MatSlideToggleChange {\n  constructor(\n    /** The source MatSlideToggle of the event. */\n    public source: MatSlideToggle,\n    /** The new `checked` value of the MatSlideToggle. */\n    public checked: boolean) { }\n}\n\n// Boilerplate for applying mixins to MatSlideToggle.\n/** @docs-private */\nexport class MatSlideToggleBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatSlideToggleMixinBase:\n    HasTabIndexCtor &\n    CanColorCtor &\n    CanDisableRippleCtor &\n    CanDisableCtor &\n    typeof MatSlideToggleBase =\n        mixinTabIndex(mixinColor(mixinDisableRipple(mixinDisabled(MatSlideToggleBase)), 'accent'));\n\n/** Represents a slidable \"switch\" toggle that can be moved between on and off. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-slide-toggle',\n  exportAs: 'matSlideToggle',\n  host: {\n    'class': 'mat-slide-toggle',\n    '[id]': 'id',\n    '[class.mat-checked]': 'checked',\n    '[class.mat-disabled]': 'disabled',\n    '[class.mat-slide-toggle-label-before]': 'labelPosition == \"before\"',\n    '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"',\n  },\n  templateUrl: 'slide-toggle.html',\n  styleUrls: ['slide-toggle.css'],\n  providers: [MAT_SLIDE_TOGGLE_VALUE_ACCESSOR],\n  inputs: ['disabled', 'disableRipple', 'color', 'tabIndex'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatSlideToggle extends _MatSlideToggleMixinBase implements OnDestroy, AfterContentInit,\n    ControlValueAccessor, CanDisable, CanColor, HasTabIndex, CanDisableRipple {\n\n  private onChange = (_: any) => {};\n  private onTouched = () => {};\n\n  private _uniqueId: string = `mat-slide-toggle-${++nextUniqueId}`;\n  private _required: boolean = false;\n  private _checked: boolean = false;\n\n  /** Whether the thumb is currently being dragged. */\n  private _dragging = false;\n\n  /** Previous checked state before drag started. */\n  private _previousChecked: boolean;\n\n  /** Width of the thumb bar of the slide-toggle. */\n  private _thumbBarWidth: number;\n\n  /** Percentage of the thumb while dragging. Percentage as fraction of 100. */\n  private _dragPercentage: number;\n\n  /** Reference to the thumb HTMLElement. */\n  @ViewChild('thumbContainer') _thumbEl: ElementRef;\n\n  /** Reference to the thumb bar HTMLElement. */\n  @ViewChild('toggleBar') _thumbBarEl: ElementRef;\n\n  /** Name value will be applied to the input element if present */\n  @Input() name: string | null = null;\n\n  /** A unique id for the slide-toggle input. If none is supplied, it will be auto-generated. */\n  @Input() id: string = this._uniqueId;\n\n  /** Whether the label should appear after or before the slide-toggle. Defaults to 'after' */\n  @Input() labelPosition: 'before' | 'after' = 'after';\n\n  /** Whether the slide-toggle element is checked or not */\n\n  /** Used to set the aria-label attribute on the underlying input element. */\n  @Input('aria-label') ariaLabel: string | null = null;\n\n  /** Used to set the aria-labelledby attribute on the underlying input element. */\n  @Input('aria-labelledby') ariaLabelledby: string | null = null;\n\n  /** Whether the slide-toggle is required. */\n  @Input()\n  get required(): boolean { return this._required; }\n  set required(value) { this._required = coerceBooleanProperty(value); }\n\n  /** Whether the slide-toggle element is checked or not */\n  @Input()\n  get checked(): boolean { return this._checked; }\n  set checked(value) {\n    this._checked = coerceBooleanProperty(value);\n    this._changeDetectorRef.markForCheck();\n  }\n  /** An event will be dispatched each time the slide-toggle changes its value. */\n  @Output() readonly change: EventEmitter<MatSlideToggleChange> =\n      new EventEmitter<MatSlideToggleChange>();\n\n  /**\n   * An event will be dispatched each time the slide-toggle input is toggled.\n   * This event always fire when user toggle the slide toggle, but does not mean the slide toggle's\n   * value is changed. The event does not fire when user drag to change the slide toggle value.\n   */\n  @Output() readonly toggleChange: EventEmitter<void> = new EventEmitter<void>();\n\n  /**\n   * An event will be dispatched each time the slide-toggle is dragged.\n   * This event always fire when user drag the slide toggle to make a change that greater than 50%.\n   * It does not mean the slide toggle's value is changed. The event does not fire when user toggle\n   * the slide toggle to change the slide toggle's value.\n   */\n  @Output() readonly dragChange: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Returns the unique id for the visual hidden input. */\n  get inputId(): string { return `${this.id || this._uniqueId}-input`; }\n\n  /** Reference to the underlying input element. */\n  @ViewChild('input') _inputElement: ElementRef<HTMLInputElement>;\n\n  constructor(elementRef: ElementRef,\n              /**\n               * @deprecated The `_platform` parameter to be removed.\n               * @breaking-change 7.0.0\n               */\n              _platform: Platform,\n              private _focusMonitor: FocusMonitor,\n              private _changeDetectorRef: ChangeDetectorRef,\n              @Attribute('tabindex') tabIndex: string,\n              private _ngZone: NgZone,\n              @Inject(MAT_SLIDE_TOGGLE_DEFAULT_OPTIONS)\n                  public defaults: MatSlideToggleDefaultOptions,\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode?: string,\n              @Optional() private _dir?: Directionality) {\n    super(elementRef);\n    this.tabIndex = parseInt(tabIndex) || 0;\n  }\n\n  ngAfterContentInit() {\n    this._focusMonitor\n      .monitor(this._elementRef, true)\n      .subscribe(focusOrigin => {\n        if (!focusOrigin) {\n          // When a focused element becomes disabled, the browser *immediately* fires a blur event.\n          // Angular does not expect events to be raised during change detection, so any state\n          // change (such as a form control's 'ng-touched') will cause a changed-after-checked\n          // error. See https://github.com/angular/angular/issues/17793. To work around this,\n          // we defer telling the form control it has been touched until the next tick.\n          Promise.resolve().then(() => this.onTouched());\n        }\n      });\n  }\n\n  ngOnDestroy() {\n    this._focusMonitor.stopMonitoring(this._elementRef);\n  }\n\n  /** Method being called whenever the underlying input emits a change event. */\n  _onChangeEvent(event: Event) {\n    // We always have to stop propagation on the change event.\n    // Otherwise the change event, from the input element, will bubble up and\n    // emit its event object to the component's `change` output.\n    event.stopPropagation();\n\n    if (!this._dragging) {\n      this.toggleChange.emit();\n    }\n    // Releasing the pointer over the `<label>` element while dragging triggers another\n    // click event on the `<label>` element. This means that the checked state of the underlying\n    // input changed unintentionally and needs to be changed back. Or when the slide toggle's config\n    // disabled toggle change event by setting `disableToggleValue: true`, the slide toggle's value\n    // does not change, and the checked state of the underlying input needs to be changed back.\n    if (this._dragging || this.defaults.disableToggleValue) {\n      this._inputElement.nativeElement.checked = this.checked;\n      return;\n    }\n\n    // Sync the value from the underlying input element with the component instance.\n    this.checked = this._inputElement.nativeElement.checked;\n\n    // Emit our custom change event only if the underlying input emitted one. This ensures that\n    // there is no change event, when the checked state changes programmatically.\n    this._emitChangeEvent();\n  }\n\n  /** Method being called whenever the slide-toggle has been clicked. */\n  _onInputClick(event: Event) {\n    // We have to stop propagation for click events on the visual hidden input element.\n    // By default, when a user clicks on a label element, a generated click event will be\n    // dispatched on the associated input element. Since we are using a label element as our\n    // root container, the click event on the `slide-toggle` will be executed twice.\n    // The real click event will bubble up, and the generated click event also tries to bubble up.\n    // This will lead to multiple click events.\n    // Preventing bubbling for the second event will solve that issue.\n    event.stopPropagation();\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  writeValue(value: any): void {\n    this.checked = !!value;\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  registerOnChange(fn: any): void {\n    this.onChange = fn;\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  registerOnTouched(fn: any): void {\n    this.onTouched = fn;\n  }\n\n  /** Implemented as a part of ControlValueAccessor. */\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Focuses the slide-toggle. */\n  focus(): void {\n    this._focusMonitor.focusVia(this._inputElement, 'keyboard');\n  }\n\n  /** Toggles the checked state of the slide-toggle. */\n  toggle(): void {\n    this.checked = !this.checked;\n    this.onChange(this.checked);\n  }\n\n  /**\n   * Emits a change event on the `change` output. Also notifies the FormControl about the change.\n   */\n  private _emitChangeEvent() {\n    this.onChange(this.checked);\n    this.change.emit(new MatSlideToggleChange(this, this.checked));\n  }\n\n  /** Retrieves the percentage of thumb from the moved distance. Percentage as fraction of 100. */\n  private _getDragPercentage(distance: number) {\n    let percentage = (distance / this._thumbBarWidth) * 100;\n\n    // When the toggle was initially checked, then we have to start the drag at the end.\n    if (this._previousChecked) {\n      percentage += 100;\n    }\n\n    return Math.max(0, Math.min(percentage, 100));\n  }\n\n  _onDragStart() {\n    if (!this.disabled && !this._dragging) {\n      const thumbEl = this._thumbEl.nativeElement;\n      this._thumbBarWidth = this._thumbBarEl.nativeElement.clientWidth - thumbEl.clientWidth;\n      thumbEl.classList.add('mat-dragging');\n\n      this._previousChecked = this.checked;\n      this._dragging = true;\n    }\n  }\n\n  _onDrag(event: HammerInput) {\n    if (this._dragging) {\n      const direction = this._dir && this._dir.value === 'rtl' ? -1 : 1;\n      this._dragPercentage = this._getDragPercentage(event.deltaX * direction);\n      // Calculate the moved distance based on the thumb bar width.\n      const dragX = (this._dragPercentage / 100) * this._thumbBarWidth * direction;\n      this._thumbEl.nativeElement.style.transform = `translate3d(${dragX}px, 0, 0)`;\n    }\n  }\n\n  _onDragEnd() {\n    if (this._dragging) {\n      const newCheckedValue = this._dragPercentage > 50;\n\n      if (newCheckedValue !== this.checked) {\n        this.dragChange.emit();\n        if (!this.defaults.disableDragValue) {\n          this.checked = newCheckedValue;\n          this._emitChangeEvent();\n        }\n      }\n\n      // The drag should be stopped outside of the current event handler, otherwise the\n      // click event will be fired before it and will revert the drag change.\n      this._ngZone.runOutsideAngular(() => setTimeout(() => {\n        if (this._dragging) {\n          this._dragging = false;\n          this._thumbEl.nativeElement.classList.remove('mat-dragging');\n\n          // Reset the transform because the component will take care\n          // of the thumb position after drag.\n          this._thumbEl.nativeElement.style.transform = '';\n        }\n      }));\n    }\n  }\n\n  /** Method being called whenever the label text changes. */\n  _onLabelTextChange() {\n    // This method is getting called whenever the label of the slide-toggle changes.\n    // Since the slide-toggle uses the OnPush strategy we need to notify it about the change\n    // that has been recognized by the cdkObserveContent directive.\n    this._changeDetectorRef.markForCheck();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ObserversModule} from '@angular/cdk/observers';\nimport {NgModule} from '@angular/core';\nimport {GestureConfig, MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {HAMMER_GESTURE_CONFIG} from '@angular/platform-browser';\nimport {MatSlideToggle} from './slide-toggle';\n\n\n@NgModule({\n  imports: [MatRippleModule, MatCommonModule, ObserversModule],\n  exports: [MatSlideToggle, MatCommonModule],\n  declarations: [MatSlideToggle],\n  providers: [\n    {provide: HAMMER_GESTURE_CONFIG, useClass: GestureConfig}\n  ],\n})\nexport class MatSlideToggleModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  Component,\n  ChangeDetectionStrategy,\n  ElementRef,\n  Inject,\n  Input,\n  Output,\n  EventEmitter,\n  Optional,\n  NgZone,\n  ViewEncapsulation,\n  AfterViewInit,\n  ViewChild,\n  OnDestroy,\n  InjectionToken,\n  inject,\n} from '@angular/core';\nimport {fromEvent, Subscription} from 'rxjs';\nimport {filter} from 'rxjs/operators';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\nimport {CanColor, CanColorCtor, mixinColor} from '@angular/material/core';\nimport {DOCUMENT} from '@angular/common';\n\n// TODO(josephperrott): Benchpress tests.\n// TODO(josephperrott): Add ARIA attributes for progress bar \"for\".\n\n// Boilerplate for applying mixins to MatProgressBar.\n/** @docs-private */\nexport class MatProgressBarBase {\n  constructor(public _elementRef: ElementRef) { }\n}\n\n/** Last animation end data. */\nexport interface ProgressAnimationEnd {\n  value: number;\n}\n\nexport const _MatProgressBarMixinBase: CanColorCtor & typeof MatProgressBarBase =\n    mixinColor(MatProgressBarBase, 'primary');\n\n/**\n * Injection token used to provide the current location to `MatProgressBar`.\n * Used to handle server-side rendering and to stub out during unit tests.\n * @docs-private\n */\nexport const MAT_PROGRESS_BAR_LOCATION = new InjectionToken<MatProgressBarLocation>(\n  'mat-progress-bar-location',\n  {providedIn: 'root', factory: MAT_PROGRESS_BAR_LOCATION_FACTORY}\n);\n\n/**\n * Stubbed out location for `MatProgressBar`.\n * @docs-private\n */\nexport interface MatProgressBarLocation {\n  pathname: string;\n}\n\n/** @docs-private */\nexport function MAT_PROGRESS_BAR_LOCATION_FACTORY(): MatProgressBarLocation {\n  const _document = inject(DOCUMENT);\n  const pathname = (_document && _document.location && _document.location.pathname) || '';\n  return {pathname};\n}\n\n\n/** Counter used to generate unique IDs for progress bars. */\nlet progressbarId = 0;\n\n/**\n * `<mat-progress-bar>` component.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-progress-bar',\n  exportAs: 'matProgressBar',\n  host: {\n    'role': 'progressbar',\n    'aria-valuemin': '0',\n    'aria-valuemax': '100',\n    '[attr.aria-valuenow]': 'value',\n    '[attr.mode]': 'mode',\n    'class': 'mat-progress-bar',\n    '[class._mat-animation-noopable]': `_isNoopAnimation`,\n  },\n  inputs: ['color'],\n  templateUrl: 'progress-bar.html',\n  styleUrls: ['progress-bar.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatProgressBar extends _MatProgressBarMixinBase implements CanColor,\n                                                      AfterViewInit, OnDestroy {\n  constructor(public _elementRef: ElementRef, private _ngZone: NgZone,\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode?: string,\n              /**\n               * @deprecated `location` parameter to be made required.\n               * @breaking-change 8.0.0\n               */\n              @Optional() @Inject(MAT_PROGRESS_BAR_LOCATION) location?: MatProgressBarLocation) {\n    super(_elementRef);\n\n    // We need to prefix the SVG reference with the current path, otherwise they won't work\n    // in Safari if the page has a `<base>` tag. Note that we need quotes inside the `url()`,\n\n    // because named route URLs can contain parentheses (see #12338). Also we don't use since\n    // we can't tell the difference between whether\n    // the consumer is using the hash location strategy or not, because `Location` normalizes\n    // both `/#/foo/bar` and `/foo/bar` to the same thing.\n    const path = location && location.pathname ? location.pathname.split('#')[0] : '';\n    this._rectangleFillValue = `url('${path}#${this.progressbarId}')`;\n    this._isNoopAnimation = _animationMode === 'NoopAnimations';\n  }\n\n  /** Flag that indicates whether NoopAnimations mode is set to true. */\n  _isNoopAnimation = false;\n\n  /** Value of the progress bar. Defaults to zero. Mirrored to aria-valuenow. */\n  @Input()\n  get value(): number { return this._value; }\n  set value(v: number) {\n    this._value = clamp(v || 0);\n\n    // When noop animation is set to true, trigger animationEnd directly.\n    if (this._isNoopAnimation) {\n      this.emitAnimationEnd();\n    }\n  }\n  private _value: number = 0;\n\n  /** Buffer value of the progress bar. Defaults to zero. */\n  @Input()\n  get bufferValue(): number { return this._bufferValue; }\n  set bufferValue(v: number) { this._bufferValue = clamp(v || 0); }\n  private _bufferValue: number = 0;\n\n  @ViewChild('primaryValueBar') _primaryValueBar: ElementRef;\n\n  /**\n   * Event emitted when animation of the primary progress bar completes. This event will not\n   * be emitted when animations are disabled, nor will it be emitted for modes with continuous\n   * animations (indeterminate and query).\n   */\n  @Output() animationEnd = new EventEmitter<ProgressAnimationEnd>();\n\n  /** Reference to animation end subscription to be unsubscribed on destroy. */\n  private _animationEndSubscription: Subscription = Subscription.EMPTY;\n\n  /**\n   * Mode of the progress bar.\n   *\n   * Input must be one of these values: determinate, indeterminate, buffer, query, defaults to\n   * 'determinate'.\n   * Mirrored to mode attribute.\n   */\n  @Input() mode: 'determinate' | 'indeterminate' | 'buffer' | 'query' = 'determinate';\n\n  /** ID of the progress bar. */\n  progressbarId = `mat-progress-bar-${progressbarId++}`;\n\n  /** Attribute to be used for the `fill` attribute on the internal `rect` element. */\n  _rectangleFillValue: string;\n\n  /** Gets the current transform value for the progress bar's primary indicator. */\n  _primaryTransform() {\n    const scale = this.value / 100;\n    return {transform: `scaleX(${scale})`};\n  }\n\n  /**\n   * Gets the current transform value for the progress bar's buffer indicator. Only used if the\n   * progress mode is set to buffer, otherwise returns an undefined, causing no transformation.\n   */\n  _bufferTransform() {\n    if (this.mode === 'buffer') {\n      const scale = this.bufferValue / 100;\n      return {transform: `scaleX(${scale})`};\n    }\n  }\n\n  ngAfterViewInit() {\n    if (!this._isNoopAnimation) {\n      // Run outside angular so change detection didn't get triggered on every transition end\n      // instead only on the animation that we care about (primary value bar's transitionend)\n      this._ngZone.runOutsideAngular((() => {\n        this._animationEndSubscription =\n            fromEvent<TransitionEvent>(this._primaryValueBar.nativeElement, 'transitionend')\n            .pipe(filter(((e: TransitionEvent) =>\n              e.target === this._primaryValueBar.nativeElement)))\n            .subscribe(_ => this._ngZone.run(() => this.emitAnimationEnd()));\n      }));\n    }\n  }\n\n  ngOnDestroy() {\n    this._animationEndSubscription.unsubscribe();\n  }\n\n  /** Emit an animationEnd event if in determinate or buffer mode. */\n  private emitAnimationEnd(): void {\n    if (this.mode === 'determinate' || this.mode === 'buffer') {\n      this.animationEnd.next({value: this.value});\n    }\n  }\n}\n\n/** Clamps a value to be between two numbers, by default 0 and 100. */\nfunction clamp(v: number, min = 0, max = 100) {\n  return Math.max(min, Math.min(max, v));\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatProgressBar} from './progress-bar';\n\n\n@NgModule({\n  imports: [CommonModule, MatCommonModule],\n  exports: [MatProgressBar, MatCommonModule],\n  declarations: [MatProgressBar],\n})\nexport class MatProgressBarModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceNumberProperty} from '@angular/cdk/coercion';\nimport {Platform} from '@angular/cdk/platform';\nimport {DOCUMENT} from '@angular/common';\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  Inject,\n  InjectionToken,\n  Input,\n  Optional,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {CanColor, CanColorCtor, mixinColor} from '@angular/material/core';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\n\n\n/** Possible mode for a progress spinner. */\nexport type ProgressSpinnerMode = 'determinate' | 'indeterminate';\n\n/**\n * Base reference size of the spinner.\n * @docs-private\n */\nconst BASE_SIZE = 100;\n\n/**\n * Base reference stroke width of the spinner.\n * @docs-private\n */\nconst BASE_STROKE_WIDTH = 10;\n\n// Boilerplate for applying mixins to MatProgressSpinner.\n/** @docs-private */\nexport class MatProgressSpinnerBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatProgressSpinnerMixinBase: CanColorCtor & typeof MatProgressSpinnerBase =\n    mixinColor(MatProgressSpinnerBase, 'primary');\n\n/** Default `mat-progress-spinner` options that can be overridden. */\nexport interface MatProgressSpinnerDefaultOptions {\n  /** Diameter of the spinner. */\n  diameter?: number;\n  /** Width of the spinner's stroke. */\n  strokeWidth?: number;\n  /**\n   * Whether the animations should be force to be enabled, ignoring if the current environment is\n   * using NoopAnimationsModule.\n   */\n  _forceAnimations?: boolean;\n}\n\n/** Injection token to be used to override the default options for `mat-progress-spinner`. */\nexport const MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS =\n    new InjectionToken<MatProgressSpinnerDefaultOptions>('mat-progress-spinner-default-options', {\n      providedIn: 'root',\n      factory: MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS_FACTORY,\n    });\n\n/** @docs-private */\nexport function MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS_FACTORY(): MatProgressSpinnerDefaultOptions {\n  return {diameter: BASE_SIZE};\n}\n\n// .0001 percentage difference is necessary in order to avoid unwanted animation frames\n// for example because the animation duration is 4 seconds, .1% accounts to 4ms\n// which are enough to see the flicker described in\n// https://github.com/angular/material2/issues/8984\nconst INDETERMINATE_ANIMATION_TEMPLATE = `\n @keyframes mat-progress-spinner-stroke-rotate-DIAMETER {\n    0%      { stroke-dashoffset: START_VALUE;  transform: rotate(0); }\n    12.5%   { stroke-dashoffset: END_VALUE;    transform: rotate(0); }\n    12.5001%  { stroke-dashoffset: END_VALUE;    transform: rotateX(180deg) rotate(72.5deg); }\n    25%     { stroke-dashoffset: START_VALUE;  transform: rotateX(180deg) rotate(72.5deg); }\n\n    25.0001%   { stroke-dashoffset: START_VALUE;  transform: rotate(270deg); }\n    37.5%   { stroke-dashoffset: END_VALUE;    transform: rotate(270deg); }\n    37.5001%  { stroke-dashoffset: END_VALUE;    transform: rotateX(180deg) rotate(161.5deg); }\n    50%     { stroke-dashoffset: START_VALUE;  transform: rotateX(180deg) rotate(161.5deg); }\n\n    50.0001%  { stroke-dashoffset: START_VALUE;  transform: rotate(180deg); }\n    62.5%   { stroke-dashoffset: END_VALUE;    transform: rotate(180deg); }\n    62.5001%  { stroke-dashoffset: END_VALUE;    transform: rotateX(180deg) rotate(251.5deg); }\n    75%     { stroke-dashoffset: START_VALUE;  transform: rotateX(180deg) rotate(251.5deg); }\n\n    75.0001%  { stroke-dashoffset: START_VALUE;  transform: rotate(90deg); }\n    87.5%   { stroke-dashoffset: END_VALUE;    transform: rotate(90deg); }\n    87.5001%  { stroke-dashoffset: END_VALUE;    transform: rotateX(180deg) rotate(341.5deg); }\n    100%    { stroke-dashoffset: START_VALUE;  transform: rotateX(180deg) rotate(341.5deg); }\n  }\n`;\n\n/**\n * `<mat-progress-spinner>` component.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-progress-spinner',\n  exportAs: 'matProgressSpinner',\n  host: {\n    'role': 'progressbar',\n    'class': 'mat-progress-spinner',\n    '[class._mat-animation-noopable]': `_noopAnimations`,\n    '[style.width.px]': 'diameter',\n    '[style.height.px]': 'diameter',\n    '[attr.aria-valuemin]': 'mode === \"determinate\" ? 0 : null',\n    '[attr.aria-valuemax]': 'mode === \"determinate\" ? 100 : null',\n    '[attr.aria-valuenow]': 'value',\n    '[attr.mode]': 'mode',\n  },\n  inputs: ['color'],\n  templateUrl: 'progress-spinner.html',\n  styleUrls: ['progress-spinner.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatProgressSpinner extends _MatProgressSpinnerMixinBase implements CanColor {\n\n  private _value = 0;\n  private _strokeWidth: number;\n  private _fallbackAnimation = false;\n\n  /** Tracks diameters of existing instances to de-dupe generated styles (default d = 100) */\n  private static diameters = new Set<number>([BASE_SIZE]);\n\n  /**\n   * Used for storing all of the generated keyframe animations.\n   * @dynamic\n   */\n  private static styleTag: HTMLStyleElement|null = null;\n\n  /** Whether the _mat-animation-noopable class should be applied, disabling animations.  */\n  _noopAnimations: boolean = this.animationMode === 'NoopAnimations' && (\n      !!this.defaults && !this.defaults._forceAnimations);\n\n  /** The diameter of the progress spinner (will set width and height of svg). */\n  @Input()\n  get diameter(): number { return this._diameter; }\n  set diameter(size: number) {\n    this._diameter = coerceNumberProperty(size);\n\n    if (!this._fallbackAnimation && !MatProgressSpinner.diameters.has(this._diameter)) {\n      this._attachStyleNode();\n    }\n  }\n  private _diameter = BASE_SIZE;\n\n  /** Stroke width of the progress spinner. */\n  @Input()\n  get strokeWidth(): number {\n    return this._strokeWidth || this.diameter / 10;\n  }\n  set strokeWidth(value: number) {\n    this._strokeWidth = coerceNumberProperty(value);\n  }\n\n  /** Mode of the progress circle */\n  @Input() mode: ProgressSpinnerMode = 'determinate';\n\n  /** Value of the progress circle. */\n  @Input()\n  get value(): number {\n    return this.mode === 'determinate' ? this._value : 0;\n  }\n  set value(newValue: number) {\n    this._value = Math.max(0, Math.min(100, coerceNumberProperty(newValue)));\n  }\n\n  constructor(public _elementRef: ElementRef,\n              platform: Platform,\n              @Optional() @Inject(DOCUMENT) private _document: any,\n              // @breaking-change 7.0.0 animationMode and defaults parameters to be made required.\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) private animationMode?: string,\n              @Inject(MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS)\n                  private defaults?: MatProgressSpinnerDefaultOptions) {\n\n    super(_elementRef);\n    this._fallbackAnimation = platform.EDGE || platform.TRIDENT;\n\n    if (defaults) {\n      if (defaults.diameter) {\n        this.diameter = defaults.diameter;\n      }\n\n      if (defaults.strokeWidth) {\n        this.strokeWidth = defaults.strokeWidth;\n      }\n    }\n\n    // On IE and Edge, we can't animate the `stroke-dashoffset`\n    // reliably so we fall back to a non-spec animation.\n    const animationClass =\n      `mat-progress-spinner-indeterminate${this._fallbackAnimation ? '-fallback' : ''}-animation`;\n\n    _elementRef.nativeElement.classList.add(animationClass);\n  }\n\n  /** The radius of the spinner, adjusted for stroke width. */\n  get _circleRadius() {\n    return (this.diameter - BASE_STROKE_WIDTH) / 2;\n  }\n\n  /** The view box of the spinner's svg element. */\n  get _viewBox() {\n    const viewBox = this._circleRadius * 2 + this.strokeWidth;\n    return `0 0 ${viewBox} ${viewBox}`;\n  }\n\n  /** The stroke circumference of the svg circle. */\n  get _strokeCircumference(): number {\n    return 2 * Math.PI * this._circleRadius;\n  }\n\n  /** The dash offset of the svg circle. */\n  get _strokeDashOffset() {\n    if (this.mode === 'determinate') {\n      return this._strokeCircumference * (100 - this._value) / 100;\n    }\n\n    // In fallback mode set the circle to 80% and rotate it with CSS.\n    if (this._fallbackAnimation && this.mode === 'indeterminate') {\n      return this._strokeCircumference * 0.2;\n    }\n\n    return null;\n  }\n\n  /** Stroke width of the circle in percent. */\n  get _circleStrokeWidth() {\n    return this.strokeWidth / this.diameter * 100;\n  }\n\n  /** Dynamically generates a style tag containing the correct animation for this diameter. */\n  private _attachStyleNode(): void {\n    let styleTag = MatProgressSpinner.styleTag;\n\n    if (!styleTag) {\n      styleTag = this._document.createElement('style');\n      this._document.head.appendChild(styleTag);\n      MatProgressSpinner.styleTag = styleTag;\n    }\n\n    if (styleTag && styleTag.sheet) {\n      (styleTag.sheet as CSSStyleSheet).insertRule(this._getAnimationText(), 0);\n    }\n\n    MatProgressSpinner.diameters.add(this.diameter);\n  }\n\n  /** Generates animation styles adjusted for the spinner's diameter. */\n  private _getAnimationText(): string {\n    return INDETERMINATE_ANIMATION_TEMPLATE\n        // Animation should begin at 5% and end at 80%\n        .replace(/START_VALUE/g, `${0.95 * this._strokeCircumference}`)\n        .replace(/END_VALUE/g, `${0.2 * this._strokeCircumference}`)\n        .replace(/DIAMETER/g, `${this.diameter}`);\n  }\n}\n\n\n/**\n * `<mat-spinner>` component.\n *\n * This is a component definition to be used as a convenience reference to create an\n * indeterminate `<mat-progress-spinner>` instance.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-spinner',\n  host: {\n    'role': 'progressbar',\n    'mode': 'indeterminate',\n    'class': 'mat-spinner mat-progress-spinner',\n    '[class._mat-animation-noopable]': `_noopAnimations`,\n    '[style.width.px]': 'diameter',\n    '[style.height.px]': 'diameter',\n  },\n  inputs: ['color'],\n  templateUrl: 'progress-spinner.html',\n  styleUrls: ['progress-spinner.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatSpinner extends MatProgressSpinner {\n  constructor(elementRef: ElementRef, platform: Platform,\n              @Optional() @Inject(DOCUMENT) document: any,\n              // @breaking-changes 7.0.0 animationMode and defaults parameters to be made required.\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) animationMode?: string,\n              @Inject(MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS)\n                  defaults?: MatProgressSpinnerDefaultOptions) {\n    super(elementRef, platform, document, animationMode, defaults);\n    this.mode = 'indeterminate';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatProgressSpinner, MatSpinner} from './progress-spinner';\n\n\n@NgModule({\n  imports: [MatCommonModule, CommonModule],\n  exports: [\n    MatProgressSpinner,\n    MatSpinner,\n    MatCommonModule\n  ],\n  declarations: [\n    MatProgressSpinner,\n    MatSpinner\n  ],\n})\nclass MatProgressSpinnerModule {}\n\nexport {MatProgressSpinnerModule};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {UniqueSelectionDispatcher} from '@angular/cdk/collections';\nimport {\n  AfterContentInit,\n  AfterViewInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Output,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {\n  CanColor,\n  CanColorCtor,\n  CanDisable,\n  CanDisableCtor,\n  CanDisableRipple,\n  CanDisableRippleCtor,\n  HasTabIndex,\n  HasTabIndexCtor,\n  mixinColor,\n  mixinDisabled,\n  mixinDisableRipple,\n  mixinTabIndex,\n} from '@angular/material/core';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\n\n\n// Increasing integer for generating unique ids for radio components.\nlet nextUniqueId = 0;\n\n/**\n * Provider Expression that allows mat-radio-group to register as a ControlValueAccessor. This\n * allows it to support [(ngModel)] and ngControl.\n * @docs-private\n */\nexport const MAT_RADIO_GROUP_CONTROL_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatRadioGroup),\n  multi: true\n};\n\n/** Change event object emitted by MatRadio and MatRadioGroup. */\nexport class MatRadioChange {\n  constructor(\n    /** The MatRadioButton that emits the change event. */\n    public source: MatRadioButton,\n    /** The value of the MatRadioButton. */\n    public value: any) {}\n}\n\n\n// Boilerplate for applying mixins to MatRadioGroup.\n/** @docs-private */\nexport class MatRadioGroupBase { }\nexport const _MatRadioGroupMixinBase: CanDisableCtor & typeof MatRadioGroupBase =\n    mixinDisabled(MatRadioGroupBase);\n\n/**\n * A group of radio buttons. May contain one or more `<mat-radio-button>` elements.\n */\n@Directive({\n  selector: 'mat-radio-group',\n  exportAs: 'matRadioGroup',\n  providers: [MAT_RADIO_GROUP_CONTROL_VALUE_ACCESSOR],\n  host: {\n    'role': 'radiogroup',\n    'class': 'mat-radio-group',\n  },\n  inputs: ['disabled'],\n})\nexport class MatRadioGroup extends _MatRadioGroupMixinBase\n    implements AfterContentInit, ControlValueAccessor, CanDisable {\n\n  /** Selected value for the radio group. */\n  private _value: any = null;\n\n  /** The HTML name attribute applied to radio buttons in this group. */\n  private _name: string = `mat-radio-group-${nextUniqueId++}`;\n\n  /** The currently selected radio button. Should match value. */\n  private _selected: MatRadioButton | null = null;\n\n  /** Whether the `value` has been set to its initial value. */\n  private _isInitialized: boolean = false;\n\n  /** Whether the labels should appear after or before the radio-buttons. Defaults to 'after' */\n  private _labelPosition: 'before' | 'after' = 'after';\n\n  /** Whether the radio group is disabled. */\n  private _disabled: boolean = false;\n\n  /** Whether the radio group is required. */\n  private _required: boolean = false;\n\n  /** The method to be called in order to update ngModel */\n  _controlValueAccessorChangeFn: (value: any) => void = () => {};\n\n  /**\n   * onTouch function registered via registerOnTouch (ControlValueAccessor).\n   * @docs-private\n   */\n  onTouched: () => any = () => {};\n\n  /**\n   * Event emitted when the group value changes.\n   * Change events are only emitted when the value changes due to user interaction with\n   * a radio button (the same behavior as `<input type-\"radio\">`).\n   */\n  @Output() readonly change: EventEmitter<MatRadioChange> = new EventEmitter<MatRadioChange>();\n\n  /** Child radio buttons. */\n  @ContentChildren(forwardRef(() => MatRadioButton), { descendants: true })\n  _radios: QueryList<MatRadioButton>;\n\n  /** Name of the radio button group. All radio buttons inside this group will use this name. */\n  @Input()\n  get name(): string { return this._name; }\n  set name(value: string) {\n    this._name = value;\n    this._updateRadioButtonNames();\n  }\n\n  /** Whether the labels should appear after or before the radio-buttons. Defaults to 'after' */\n  @Input()\n  get labelPosition(): 'before' | 'after' {\n    return this._labelPosition;\n  }\n  set labelPosition(v) {\n    this._labelPosition = v === 'before' ? 'before' : 'after';\n    this._markRadiosForCheck();\n  }\n\n  /**\n   * Value for the radio-group. Should equal the value of the selected radio button if there is\n   * a corresponding radio button with a matching value. If there is not such a corresponding\n   * radio button, this value persists to be applied in case a new radio button is added with a\n   * matching value.\n   */\n  @Input()\n  get value(): any { return this._value; }\n  set value(newValue: any) {\n    if (this._value !== newValue) {\n      // Set this before proceeding to ensure no circular loop occurs with selection.\n      this._value = newValue;\n\n      this._updateSelectedRadioFromValue();\n      this._checkSelectedRadioButton();\n    }\n  }\n\n  _checkSelectedRadioButton() {\n    if (this._selected && !this._selected.checked) {\n      this._selected.checked = true;\n    }\n  }\n\n  /**\n   * The currently selected radio button. If set to a new radio button, the radio group value\n   * will be updated to match the new selected button.\n   */\n  @Input()\n  get selected() { return this._selected; }\n  set selected(selected: MatRadioButton | null) {\n    this._selected = selected;\n    this.value = selected ? selected.value : null;\n    this._checkSelectedRadioButton();\n  }\n\n  /** Whether the radio group is disabled */\n  @Input()\n  get disabled(): boolean { return this._disabled; }\n  set disabled(value) {\n    this._disabled = coerceBooleanProperty(value);\n    this._markRadiosForCheck();\n  }\n\n  /** Whether the radio group is required */\n  @Input()\n  get required(): boolean { return this._required; }\n  set required(value: boolean) {\n    this._required = coerceBooleanProperty(value);\n    this._markRadiosForCheck();\n  }\n\n  constructor(private _changeDetector: ChangeDetectorRef) {\n    super();\n  }\n\n  /**\n   * Initialize properties once content children are available.\n   * This allows us to propagate relevant attributes to associated buttons.\n   */\n  ngAfterContentInit() {\n    // Mark this component as initialized in AfterContentInit because the initial value can\n    // possibly be set by NgModel on MatRadioGroup, and it is possible that the OnInit of the\n    // NgModel occurs *after* the OnInit of the MatRadioGroup.\n    this._isInitialized = true;\n  }\n\n  /**\n   * Mark this group as being \"touched\" (for ngModel). Meant to be called by the contained\n   * radio buttons upon their blur.\n   */\n  _touch() {\n    if (this.onTouched) {\n      this.onTouched();\n    }\n  }\n\n  private _updateRadioButtonNames(): void {\n    if (this._radios) {\n      this._radios.forEach(radio => {\n        radio.name = this.name;\n      });\n    }\n  }\n\n  /** Updates the `selected` radio button from the internal _value state. */\n  private _updateSelectedRadioFromValue(): void {\n    // If the value already matches the selected radio, do nothing.\n    const isAlreadySelected = this._selected !== null && this._selected.value === this._value;\n\n    if (this._radios && !isAlreadySelected) {\n      this._selected = null;\n      this._radios.forEach(radio => {\n        radio.checked = this.value === radio.value;\n        if (radio.checked) {\n          this._selected = radio;\n        }\n      });\n    }\n  }\n\n  /** Dispatch change event with current selection and group value. */\n  _emitChangeEvent(): void {\n    if (this._isInitialized) {\n      this.change.emit(new MatRadioChange(this._selected!, this._value));\n    }\n  }\n\n  _markRadiosForCheck() {\n    if (this._radios) {\n      this._radios.forEach(radio => radio._markForCheck());\n    }\n  }\n\n  /**\n   * Sets the model value. Implemented as part of ControlValueAccessor.\n   * @param value\n   */\n  writeValue(value: any) {\n    this.value = value;\n    this._changeDetector.markForCheck();\n  }\n\n  /**\n   * Registers a callback to be triggered when the model value changes.\n   * Implemented as part of ControlValueAccessor.\n   * @param fn Callback to be registered.\n   */\n  registerOnChange(fn: (value: any) => void) {\n    this._controlValueAccessorChangeFn = fn;\n  }\n\n  /**\n   * Registers a callback to be triggered when the control is touched.\n   * Implemented as part of ControlValueAccessor.\n   * @param fn Callback to be registered.\n   */\n  registerOnTouched(fn: any) {\n    this.onTouched = fn;\n  }\n\n  /**\n   * Sets the disabled state of the control. Implemented as a part of ControlValueAccessor.\n   * @param isDisabled Whether the control should be disabled.\n   */\n  setDisabledState(isDisabled: boolean) {\n    this.disabled = isDisabled;\n    this._changeDetector.markForCheck();\n  }\n}\n\n// Boilerplate for applying mixins to MatRadioButton.\n/** @docs-private */\nexport class MatRadioButtonBase {\n  // Since the disabled property is manually defined for the MatRadioButton and isn't set up in\n  // the mixin base class. To be able to use the tabindex mixin, a disabled property must be\n  // defined to properly work.\n  disabled: boolean;\n\n  constructor(public _elementRef: ElementRef) {}\n}\n// As per Material design specifications the selection control radio should use the accent color\n// palette by default. https://material.io/guidelines/components/selection-controls.html\nexport const _MatRadioButtonMixinBase:\n    CanColorCtor & CanDisableRippleCtor & HasTabIndexCtor & typeof MatRadioButtonBase =\n        mixinColor(mixinDisableRipple(mixinTabIndex(MatRadioButtonBase)), 'accent');\n\n/**\n * A Material design radio-button. Typically placed inside of `<mat-radio-group>` elements.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-radio-button',\n  templateUrl: 'radio.html',\n  styleUrls: ['radio.css'],\n  inputs: ['color', 'disableRipple', 'tabIndex'],\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matRadioButton',\n  host: {\n    'class': 'mat-radio-button',\n    '[class.mat-radio-checked]': 'checked',\n    '[class.mat-radio-disabled]': 'disabled',\n    '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"',\n    '[attr.id]': 'id',\n    // Note: under normal conditions focus shouldn't land on this element, however it may be\n    // programmatically set, for example inside of a focus trap, in this case we want to forward\n    // the focus to the native element.\n    '(focus)': '_inputElement.nativeElement.focus()',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatRadioButton extends _MatRadioButtonMixinBase\n    implements OnInit, AfterViewInit, OnDestroy, CanColor, CanDisableRipple, HasTabIndex {\n\n  private _uniqueId: string = `mat-radio-${++nextUniqueId}`;\n\n  /** The unique ID for the radio button. */\n  @Input() id: string = this._uniqueId;\n\n  /** Analog to HTML 'name' attribute used to group radios for unique selection. */\n  @Input() name: string;\n\n  /** Used to set the 'aria-label' attribute on the underlying input element. */\n  @Input('aria-label') ariaLabel: string;\n\n  /** The 'aria-labelledby' attribute takes precedence as the element's text alternative. */\n  @Input('aria-labelledby') ariaLabelledby: string;\n\n  /** The 'aria-describedby' attribute is read after the element's label and field type. */\n  @Input('aria-describedby') ariaDescribedby: string;\n\n  /** Whether this radio button is checked. */\n  @Input()\n  get checked(): boolean { return this._checked; }\n  set checked(value: boolean) {\n    const newCheckedState = coerceBooleanProperty(value);\n    if (this._checked !== newCheckedState) {\n      this._checked = newCheckedState;\n      if (newCheckedState && this.radioGroup && this.radioGroup.value !== this.value) {\n        this.radioGroup.selected = this;\n      } else if (!newCheckedState && this.radioGroup && this.radioGroup.value === this.value) {\n\n        // When unchecking the selected radio button, update the selected radio\n        // property on the group.\n        this.radioGroup.selected = null;\n      }\n\n      if (newCheckedState) {\n        // Notify all radio buttons with the same name to un-check.\n        this._radioDispatcher.notify(this.id, this.name);\n      }\n      this._changeDetector.markForCheck();\n    }\n  }\n\n  /** The value of this radio button. */\n  @Input()\n  get value(): any { return this._value; }\n  set value(value: any) {\n    if (this._value !== value) {\n      this._value = value;\n      if (this.radioGroup !== null) {\n        if (!this.checked) {\n          // Update checked when the value changed to match the radio group's value\n          this.checked = this.radioGroup.value === value;\n        }\n        if (this.checked) {\n          this.radioGroup.selected = this;\n        }\n      }\n    }\n  }\n\n  /** Whether the label should appear after or before the radio button. Defaults to 'after' */\n  @Input()\n  get labelPosition(): 'before' | 'after' {\n    return this._labelPosition || (this.radioGroup && this.radioGroup.labelPosition) || 'after';\n  }\n  set labelPosition(value) {\n    this._labelPosition = value;\n  }\n  private _labelPosition: 'before' | 'after';\n\n  /** Whether the radio button is disabled. */\n  @Input()\n  get disabled(): boolean {\n    return this._disabled || (this.radioGroup !== null && this.radioGroup.disabled);\n  }\n  set disabled(value: boolean) {\n    const newDisabledState = coerceBooleanProperty(value);\n    if (this._disabled !== newDisabledState) {\n      this._disabled = newDisabledState;\n      this._changeDetector.markForCheck();\n    }\n  }\n\n  /** Whether the radio button is required. */\n  @Input()\n  get required(): boolean {\n    return this._required || (this.radioGroup && this.radioGroup.required);\n  }\n  set required(value: boolean) {\n    this._required = coerceBooleanProperty(value);\n  }\n\n  /**\n   * Event emitted when the checked state of this radio button changes.\n   * Change events are only emitted when the value changes due to user interaction with\n   * the radio button (the same behavior as `<input type-\"radio\">`).\n   */\n  @Output() readonly change: EventEmitter<MatRadioChange> = new EventEmitter<MatRadioChange>();\n\n  /** The parent radio group. May or may not be present. */\n  radioGroup: MatRadioGroup;\n\n  /** ID of the native input element inside `<mat-radio-button>` */\n  get inputId(): string { return `${this.id || this._uniqueId}-input`; }\n\n  /** Whether this radio is checked. */\n  private _checked: boolean = false;\n\n  /** Whether this radio is disabled. */\n  private _disabled: boolean;\n\n  /** Whether this radio is required. */\n  private _required: boolean;\n\n  /** Value assigned to this radio. */\n  private _value: any = null;\n\n  /** Unregister function for _radioDispatcher */\n  private _removeUniqueSelectionListener: () => void = () => {};\n\n  /** The native `<input type=radio>` element */\n  @ViewChild('input') _inputElement: ElementRef<HTMLInputElement>;\n\n  constructor(@Optional() radioGroup: MatRadioGroup,\n              elementRef: ElementRef,\n              private _changeDetector: ChangeDetectorRef,\n              private _focusMonitor: FocusMonitor,\n              private _radioDispatcher: UniqueSelectionDispatcher,\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode?: string) {\n    super(elementRef);\n\n    // Assertions. Ideally these should be stripped out by the compiler.\n    // TODO(jelbourn): Assert that there's no name binding AND a parent radio group.\n    this.radioGroup = radioGroup;\n\n    this._removeUniqueSelectionListener =\n      _radioDispatcher.listen((id: string, name: string) => {\n        if (id !== this.id && name === this.name) {\n          this.checked = false;\n        }\n      });\n  }\n\n  /** Focuses the radio button. */\n  focus(): void {\n    this._focusMonitor.focusVia(this._inputElement, 'keyboard');\n  }\n\n  /**\n   * Marks the radio button as needing checking for change detection.\n   * This method is exposed because the parent radio group will directly\n   * update bound properties of the radio button.\n   */\n  _markForCheck() {\n    // When group value changes, the button will not be notified. Use `markForCheck` to explicit\n    // update radio button's status\n    this._changeDetector.markForCheck();\n  }\n\n  ngOnInit() {\n    if (this.radioGroup) {\n      // If the radio is inside a radio group, determine if it should be checked\n      this.checked = this.radioGroup.value === this._value;\n      // Copy name from parent radio group\n      this.name = this.radioGroup.name;\n    }\n  }\n\n  ngAfterViewInit() {\n    this._focusMonitor\n      .monitor(this._elementRef, true)\n      .subscribe(focusOrigin => {\n        if (!focusOrigin && this.radioGroup) {\n          this.radioGroup._touch();\n        }\n      });\n  }\n\n  ngOnDestroy() {\n    this._focusMonitor.stopMonitoring(this._elementRef);\n    this._removeUniqueSelectionListener();\n  }\n\n  /** Dispatch change event with current value. */\n  private _emitChangeEvent(): void {\n    this.change.emit(new MatRadioChange(this, this._value));\n  }\n\n  _isRippleDisabled() {\n    return this.disableRipple || this.disabled;\n  }\n\n  _onInputClick(event: Event) {\n    // We have to stop propagation for click events on the visual hidden input element.\n    // By default, when a user clicks on a label element, a generated click event will be\n    // dispatched on the associated input element. Since we are using a label element as our\n    // root container, the click event on the `radio-button` will be executed twice.\n    // The real click event will bubble up, and the generated click event also tries to bubble up.\n    // This will lead to multiple click events.\n    // Preventing bubbling for the second event will solve that issue.\n    event.stopPropagation();\n  }\n\n  /**\n   * Triggered when the radio button received a click or the input recognized any change.\n   * Clicking on a label element, will trigger a change event on the associated input.\n   */\n  _onInputChange(event: Event) {\n    // We always have to stop propagation on the change event.\n    // Otherwise the change event, from the input element, will bubble up and\n    // emit its event object to the `change` output.\n    event.stopPropagation();\n\n    const groupValueChanged = this.radioGroup && this.value !== this.radioGroup.value;\n    this.checked = true;\n    this._emitChangeEvent();\n\n    if (this.radioGroup) {\n      this.radioGroup._controlValueAccessorChangeFn(this.value);\n      this.radioGroup._touch();\n      if (groupValueChanged) {\n        this.radioGroup._emitChangeEvent();\n      }\n    }\n  }\n\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {MatRadioButton, MatRadioGroup} from './radio';\n\n\n@NgModule({\n  imports: [CommonModule, MatRippleModule, MatCommonModule],\n  exports: [MatRadioGroup, MatRadioButton, MatCommonModule],\n  declarations: [MatRadioGroup, MatRadioButton],\n})\nexport class MatRadioModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/** Animations used by the Material drawers. */\nexport const matDrawerAnimations: {\n  readonly transformDrawer: AnimationTriggerMetadata;\n} = {\n  /** Animation that slides a drawer in and out. */\n  transformDrawer: trigger('transform', [\n    // We remove the `transform` here completely, rather than setting it to zero, because:\n    // 1. Having a transform can cause elements with ripples or an animated\n    //    transform to shift around in Chrome with an RTL layout (see #10023).\n    // 2. 3d transforms causes text to appear blurry on IE and Edge.\n    state('open, open-instant', style({\n      'transform': 'none',\n      'visibility': 'visible',\n    })),\n    state('void', style({\n      // Avoids the shadow showing up when closed in SSR.\n      'box-shadow': 'none',\n      'visibility': 'hidden',\n    })),\n    transition('void => open-instant', animate('0ms')),\n    transition('void <=> open, open-instant => void',\n        animate('400ms cubic-bezier(0.25, 0.8, 0.25, 1)'))\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatOptionModule} from '@angular/material/core';\nimport {MatFormFieldModule} from '@angular/material/form-field';\nimport {MAT_SELECT_SCROLL_STRATEGY_PROVIDER, MatSelect, MatSelectTrigger} from './select';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    OverlayModule,\n    MatOptionModule,\n    MatCommonModule,\n  ],\n  exports: [MatFormFieldModule, MatSelect, MatSelectTrigger, MatOptionModule, MatCommonModule],\n  declarations: [MatSelect, MatSelectTrigger],\n  providers: [MAT_SELECT_SCROLL_STRATEGY_PROVIDER]\n})\nexport class MatSelectModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  AnimationTriggerMetadata,\n  keyframes,\n  state,\n  style,\n  transition,\n  trigger,\n} from '@angular/animations';\n\n/** Animations used by MatTooltip. */\nexport const matTooltipAnimations: {\n  readonly tooltipState: AnimationTriggerMetadata;\n} = {\n  /** Animation that transitions a tooltip in and out. */\n  tooltipState: trigger('state', [\n    state('initial, void, hidden', style({opacity: 0, transform: 'scale(0)'})),\n    state('visible', style({transform: 'scale(1)'})),\n    transition('* => visible', animate('200ms cubic-bezier(0, 0, 0.2, 1)', keyframes([\n      style({opacity: 0, transform: 'scale(0)', offset: 0}),\n      style({opacity: 0.5, transform: 'scale(0.99)', offset: 0.5}),\n      style({opacity: 1, transform: 'scale(1)', offset: 1})\n    ]))),\n    transition('* => hidden', animate('100ms cubic-bezier(0, 0, 0.2, 1)', style({opacity: 0}))),\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {A11yModule} from '@angular/cdk/a11y';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {\n  MatTooltip,\n  TooltipComponent,\n  MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY_PROVIDER,\n} from './tooltip';\n\n@NgModule({\n  imports: [\n    A11yModule,\n    CommonModule,\n    OverlayModule,\n    MatCommonModule,\n  ],\n  exports: [MatTooltip, TooltipComponent, MatCommonModule],\n  declarations: [MatTooltip, TooltipComponent],\n  entryComponents: [TooltipComponent],\n  providers: [MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY_PROVIDER]\n})\nexport class MatTooltipModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable, Optional, SkipSelf} from '@angular/core';\nimport {Subject} from 'rxjs';\n\n\n/**\n * To modify the labels and text displayed, create a new instance of MatPaginatorIntl and\n * include it in a custom provider\n */\n@Injectable({providedIn: 'root'})\nexport class MatPaginatorIntl {\n  /**\n   * Stream to emit from when labels are changed. Use this to notify components when the labels have\n   * changed after initialization.\n   */\n  readonly changes: Subject<void> = new Subject<void>();\n\n  /** A label for the page size selector. */\n  itemsPerPageLabel: string = 'Items per page:';\n\n  /** A label for the button that increments the current page. */\n  nextPageLabel: string = 'Next page';\n\n  /** A label for the button that decrements the current page. */\n  previousPageLabel: string = 'Previous page';\n\n  /** A label for the button that moves to the first page. */\n  firstPageLabel: string = 'First page';\n\n  /** A label for the button that moves to the last page. */\n  lastPageLabel: string = 'Last page';\n\n  /** A label for the range of items within the current page and the length of the whole list. */\n  getRangeLabel = (page: number, pageSize: number, length: number) => {\n    if (length == 0 || pageSize == 0) { return `0 of ${length}`; }\n\n    length = Math.max(length, 0);\n\n    const startIndex = page * pageSize;\n\n    // If the start index exceeds the list length, do not try and fix the end index to the end.\n    const endIndex = startIndex < length ?\n        Math.min(startIndex + pageSize, length) :\n        startIndex + pageSize;\n\n    return `${startIndex + 1} - ${endIndex} of ${length}`;\n  }\n}\n\n/** @docs-private */\nexport function MAT_PAGINATOR_INTL_PROVIDER_FACTORY(parentIntl: MatPaginatorIntl) {\n  return parentIntl || new MatPaginatorIntl();\n}\n\n/** @docs-private */\nexport const MAT_PAGINATOR_INTL_PROVIDER = {\n  // If there is already an MatPaginatorIntl available, use that. Otherwise, provide a new one.\n  provide: MatPaginatorIntl,\n  deps: [[new Optional(), new SkipSelf(), MatPaginatorIntl]],\n  useFactory: MAT_PAGINATOR_INTL_PROVIDER_FACTORY\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceNumberProperty, coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  OnInit,\n  Output,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {Subscription} from 'rxjs';\nimport {MatPaginatorIntl} from './paginator-intl';\nimport {\n  HasInitialized,\n  HasInitializedCtor,\n  mixinInitialized,\n  ThemePalette,\n} from '@angular/material/core';\n\n/** The default page size if there is no page size and there are no provided page size options. */\nconst DEFAULT_PAGE_SIZE = 50;\n\n/**\n * Change event object that is emitted when the user selects a\n * different page size or navigates to another page.\n */\nexport class PageEvent {\n  /** The current page index. */\n  pageIndex: number;\n\n  /**\n   * Index of the page that was selected previously.\n   * @breaking-change 7.0.0 To be made into a required property.\n   */\n  previousPageIndex?: number;\n\n  /** The current page size */\n  pageSize: number;\n\n  /** The current total number of items being paged */\n  length: number;\n}\n\n// Boilerplate for applying mixins to MatPaginator.\n/** @docs-private */\nexport class MatPaginatorBase {}\nexport const _MatPaginatorBase: HasInitializedCtor & typeof MatPaginatorBase =\n    mixinInitialized(MatPaginatorBase);\n\n/**\n * Component to provide navigation between paged information. Displays the size of the current\n * page, user-selectable options to change that size, what items are being shown, and\n * navigational button to go to the previous or next page.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-paginator',\n  exportAs: 'matPaginator',\n  templateUrl: 'paginator.html',\n  styleUrls: ['paginator.css'],\n  host: {\n    'class': 'mat-paginator',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatPaginator extends _MatPaginatorBase implements OnInit, OnDestroy, HasInitialized {\n  private _initialized: boolean;\n  private _intlChanges: Subscription;\n\n  /** Theme color to be used for the underlying form controls. */\n  @Input() color: ThemePalette;\n\n  /** The zero-based page index of the displayed list of items. Defaulted to 0. */\n  @Input()\n  get pageIndex(): number { return this._pageIndex; }\n  set pageIndex(value: number) {\n    this._pageIndex = Math.max(coerceNumberProperty(value), 0);\n    this._changeDetectorRef.markForCheck();\n  }\n  _pageIndex: number = 0;\n\n  /** The length of the total number of items that are being paginated. Defaulted to 0. */\n  @Input()\n  get length(): number { return this._length; }\n  set length(value: number) {\n    this._length = coerceNumberProperty(value);\n    this._changeDetectorRef.markForCheck();\n  }\n  _length: number = 0;\n\n  /** Number of items to display on a page. By default set to 50. */\n  @Input()\n  get pageSize(): number { return this._pageSize; }\n  set pageSize(value: number) {\n    this._pageSize = Math.max(coerceNumberProperty(value), 0);\n    this._updateDisplayedPageSizeOptions();\n  }\n  private _pageSize: number;\n\n  /** The set of provided page size options to display to the user. */\n  @Input()\n  get pageSizeOptions(): number[] { return this._pageSizeOptions; }\n  set pageSizeOptions(value: number[]) {\n    this._pageSizeOptions = (value || []).map(p => coerceNumberProperty(p));\n    this._updateDisplayedPageSizeOptions();\n  }\n  private _pageSizeOptions: number[] = [];\n\n  /** Whether to hide the page size selection UI from the user. */\n  @Input()\n  get hidePageSize(): boolean { return this._hidePageSize; }\n  set hidePageSize(value: boolean) {\n    this._hidePageSize = coerceBooleanProperty(value);\n  }\n  private _hidePageSize = false;\n\n\n  /** Whether to show the first/last buttons UI to the user. */\n  @Input()\n  get showFirstLastButtons(): boolean { return this._showFirstLastButtons; }\n  set showFirstLastButtons(value: boolean) {\n    this._showFirstLastButtons = coerceBooleanProperty(value);\n  }\n  private _showFirstLastButtons = false;\n\n  /** Event emitted when the paginator changes the page size or page index. */\n  @Output() readonly page: EventEmitter<PageEvent> = new EventEmitter<PageEvent>();\n\n  /** Displayed set of page size options. Will be sorted and include current page size. */\n  _displayedPageSizeOptions: number[];\n\n  constructor(public _intl: MatPaginatorIntl,\n              private _changeDetectorRef: ChangeDetectorRef) {\n    super();\n    this._intlChanges = _intl.changes.subscribe(() => this._changeDetectorRef.markForCheck());\n  }\n\n  ngOnInit() {\n    this._initialized = true;\n    this._updateDisplayedPageSizeOptions();\n    this._markInitialized();\n  }\n\n  ngOnDestroy() {\n    this._intlChanges.unsubscribe();\n  }\n\n  /** Advances to the next page if it exists. */\n  nextPage(): void {\n    if (!this.hasNextPage()) { return; }\n\n    const previousPageIndex = this.pageIndex;\n    this.pageIndex++;\n    this._emitPageEvent(previousPageIndex);\n  }\n\n  /** Move back to the previous page if it exists. */\n  previousPage(): void {\n    if (!this.hasPreviousPage()) { return; }\n\n    const previousPageIndex = this.pageIndex;\n    this.pageIndex--;\n    this._emitPageEvent(previousPageIndex);\n  }\n\n  /** Move to the first page if not already there. */\n  firstPage(): void {\n    // hasPreviousPage being false implies at the start\n    if (!this.hasPreviousPage()) { return; }\n\n    const previousPageIndex = this.pageIndex;\n    this.pageIndex = 0;\n    this._emitPageEvent(previousPageIndex);\n  }\n\n  /** Move to the last page if not already there. */\n  lastPage(): void {\n    // hasNextPage being false implies at the end\n    if (!this.hasNextPage()) { return; }\n\n    const previousPageIndex = this.pageIndex;\n    this.pageIndex = this.getNumberOfPages();\n    this._emitPageEvent(previousPageIndex);\n  }\n\n  /** Whether there is a previous page. */\n  hasPreviousPage(): boolean {\n    return this.pageIndex >= 1 && this.pageSize != 0;\n  }\n\n  /** Whether there is a next page. */\n  hasNextPage(): boolean {\n    const numberOfPages = this.getNumberOfPages();\n    return this.pageIndex < numberOfPages && this.pageSize != 0;\n  }\n\n  /** Calculate the number of pages */\n  getNumberOfPages(): number {\n    return Math.ceil(this.length / this.pageSize) - 1;\n  }\n\n\n  /**\n   * Changes the page size so that the first item displayed on the page will still be\n   * displayed using the new page size.\n   *\n   * For example, if the page size is 10 and on the second page (items indexed 10-19) then\n   * switching so that the page size is 5 will set the third page as the current page so\n   * that the 10th item will still be displayed.\n   */\n  _changePageSize(pageSize: number) {\n    // Current page needs to be updated to reflect the new page size. Navigate to the page\n    // containing the previous page's first item.\n    const startIndex = this.pageIndex * this.pageSize;\n    const previousPageIndex = this.pageIndex;\n\n    this.pageIndex = Math.floor(startIndex / pageSize) || 0;\n    this.pageSize = pageSize;\n    this._emitPageEvent(previousPageIndex);\n  }\n\n  /**\n   * Updates the list of page size options to display to the user. Includes making sure that\n   * the page size is an option and that the list is sorted.\n   */\n  private _updateDisplayedPageSizeOptions() {\n    if (!this._initialized) { return; }\n\n    // If no page size is provided, use the first page size option or the default page size.\n    if (!this.pageSize) {\n      this._pageSize = this.pageSizeOptions.length != 0 ?\n          this.pageSizeOptions[0] :\n          DEFAULT_PAGE_SIZE;\n    }\n\n    this._displayedPageSizeOptions = this.pageSizeOptions.slice();\n\n    if (this._displayedPageSizeOptions.indexOf(this.pageSize) === -1) {\n      this._displayedPageSizeOptions.push(this.pageSize);\n    }\n\n    // Sort the numbers using a number-specific sort function.\n    this._displayedPageSizeOptions.sort((a, b) => a - b);\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Emits an event notifying that a change of the paginator's properties has been triggered. */\n  private _emitPageEvent(previousPageIndex: number) {\n    this.page.emit({\n      previousPageIndex,\n      pageIndex: this.pageIndex,\n      pageSize: this.pageSize,\n      length: this.length\n    });\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatButtonModule} from '@angular/material/button';\nimport {MatSelectModule} from '@angular/material/select';\nimport {MatTooltipModule} from '@angular/material/tooltip';\nimport {MatPaginator} from './paginator';\nimport {MAT_PAGINATOR_INTL_PROVIDER} from './paginator-intl';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatButtonModule,\n    MatSelectModule,\n    MatTooltipModule,\n  ],\n  exports: [MatPaginator],\n  declarations: [MatPaginator],\n  providers: [MAT_PAGINATOR_INTL_PROVIDER],\n})\nexport class MatPaginatorModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Directive,\n  TemplateRef,\n  ComponentFactoryResolver,\n  ApplicationRef,\n  Injector,\n  ViewContainerRef,\n  Inject,\n  OnDestroy,\n} from '@angular/core';\nimport {TemplatePortal, DomPortalOutlet} from '@angular/cdk/portal';\nimport {DOCUMENT} from '@angular/common';\nimport {Subject} from 'rxjs';\n\n/**\n * Menu content that will be rendered lazily once the menu is opened.\n */\n@Directive({\n  selector: 'ng-template[matMenuContent]'\n})\nexport class MatMenuContent implements OnDestroy {\n  private _portal: TemplatePortal<any>;\n  private _outlet: DomPortalOutlet;\n\n  /** Emits when the menu content has been attached. */\n  _attached = new Subject<void>();\n\n  constructor(\n    private _template: TemplateRef<any>,\n    private _componentFactoryResolver: ComponentFactoryResolver,\n    private _appRef: ApplicationRef,\n    private _injector: Injector,\n    private _viewContainerRef: ViewContainerRef,\n    @Inject(DOCUMENT) private _document: any) {}\n\n  /**\n   * Attaches the content with a particular context.\n   * @docs-private\n   */\n  attach(context: any = {}) {\n    if (!this._portal) {\n      this._portal = new TemplatePortal(this._template, this._viewContainerRef);\n    }\n\n    this.detach();\n\n    if (!this._outlet) {\n      this._outlet = new DomPortalOutlet(this._document.createElement('div'),\n          this._componentFactoryResolver, this._appRef, this._injector);\n    }\n\n    const element: HTMLElement = this._template.elementRef.nativeElement;\n\n    // Because we support opening the same menu from different triggers (which in turn have their\n    // own `OverlayRef` panel), we have to re-insert the host element every time, otherwise we\n    // risk it staying attached to a pane that's no longer in the DOM.\n    element.parentNode!.insertBefore(this._outlet.outletElement, element);\n    this._portal.attach(this._outlet, context);\n    this._attached.next();\n  }\n\n  /**\n   * Detaches the content.\n   * @docs-private\n   */\n  detach() {\n    if (this._portal.isAttached) {\n      this._portal.detach();\n    }\n  }\n\n  ngOnDestroy() {\n    if (this._outlet) {\n      this._outlet.dispose();\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport{\n  trigger,\n  state,\n  style,\n  animate,\n  transition,\n  query,\n  group,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/**\n * Animations used by the mat-menu component.\n * Animation duration and timing values are based on:\n * https://material.io/guidelines/components/menus.html#menus-usage\n */\nexport const matMenuAnimations: {\n  readonly transformMenu: AnimationTriggerMetadata;\n  readonly fadeInItems: AnimationTriggerMetadata;\n} = {\n  /**\n   * This animation controls the menu panel's entry and exit from the page.\n   *\n   * When the menu panel is added to the DOM, it scales in and fades in its border.\n   *\n   * When the menu panel is removed from the DOM, it simply fades out after a brief\n   * delay to display the ripple.\n   */\n  transformMenu: trigger('transformMenu', [\n    state('void', style({\n      opacity: 0,\n      transform: 'scale(0.8)'\n    })),\n    transition('void => enter', group([\n      query('.mat-menu-content', animate('100ms linear', style({opacity: 1}))),\n      animate('120ms cubic-bezier(0, 0, 0.2, 1)', style({transform: 'scale(1)'})),\n    ])),\n    transition('* => void', animate('100ms 25ms linear', style({opacity: 0})))\n  ]),\n\n\n  /**\n   * This animation fades in the background color and content of the menu panel\n   * after its containing element is scaled in.\n   */\n  fadeInItems: trigger('fadeInItems', [\n    // TODO(crisbeto): this is inside the `transformMenu`\n    // now. Remove next time we do breaking changes.\n    state('showing', style({opacity: 1})),\n    transition('void => *', [\n      style({opacity: 0}),\n      animate('400ms 100ms cubic-bezier(0.55, 0, 0.55, 0.2)')\n    ])\n  ])\n};\n\n/**\n * @deprecated\n * @breaking-change 7.0.0\n */\nexport const fadeInItems = matMenuAnimations.fadeInItems;\n\n/**\n * @deprecated\n * @breaking-change 7.0.0\n */\nexport const transformMenu = matMenuAnimations.transformMenu;\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {EventEmitter, TemplateRef, InjectionToken} from '@angular/core';\nimport {MenuPositionX, MenuPositionY} from './menu-positions';\nimport {Direction} from '@angular/cdk/bidi';\nimport {FocusOrigin} from '@angular/cdk/a11y';\nimport {MatMenuContent} from './menu-content';\n\n/**\n * Injection token used to provide the parent menu to menu-specific components.\n * @docs-private\n */\nexport const MAT_MENU_PANEL = new InjectionToken<MatMenuPanel>('MAT_MENU_PANEL');\n\n/**\n * Interface for a custom menu panel that can be used with `matMenuTriggerFor`.\n * @docs-private\n */\nexport interface MatMenuPanel<T = any> {\n  xPosition: MenuPositionX;\n  yPosition: MenuPositionY;\n  overlapTrigger: boolean;\n  templateRef: TemplateRef<any>;\n  close: EventEmitter<void | 'click' | 'keydown' | 'tab'>;\n  parentMenu?: MatMenuPanel | undefined;\n  direction?: Direction;\n  focusFirstItem: (origin?: FocusOrigin) => void;\n  resetActiveItem: () => void;\n  setPositionClasses?: (x: MenuPositionX, y: MenuPositionY) => void;\n  setElevation?(depth: number): void;\n  lazyContent?: MatMenuContent;\n  backdropClass?: string;\n  hasBackdrop?: boolean;\n  addItem?: (item: T) => void;\n  removeItem?: (item: T) => void;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusableOption, FocusMonitor, FocusOrigin} from '@angular/cdk/a11y';\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  OnDestroy,\n  ViewEncapsulation,\n  Inject,\n  Optional,\n} from '@angular/core';\nimport {\n  CanDisable, CanDisableCtor,\n  CanDisableRipple, CanDisableRippleCtor,\n  mixinDisabled,\n  mixinDisableRipple,\n} from '@angular/material/core';\nimport {Subject} from 'rxjs';\nimport {DOCUMENT} from '@angular/common';\nimport {MAT_MENU_PANEL, MatMenuPanel} from './menu-panel';\n\n// Boilerplate for applying mixins to MatMenuItem.\n/** @docs-private */\nexport class MatMenuItemBase {}\nexport const _MatMenuItemMixinBase: CanDisableRippleCtor & CanDisableCtor & typeof MatMenuItemBase =\n    mixinDisableRipple(mixinDisabled(MatMenuItemBase));\n\n/**\n * This directive is intended to be used inside an mat-menu tag.\n * It exists mostly to set the role attribute.\n */\n@Component({\n  moduleId: module.id,\n  selector: '[mat-menu-item]',\n  exportAs: 'matMenuItem',\n  inputs: ['disabled', 'disableRipple'],\n  host: {\n    'role': 'menuitem',\n    'class': 'mat-menu-item',\n    '[class.mat-menu-item-highlighted]': '_highlighted',\n    '[class.mat-menu-item-submenu-trigger]': '_triggersSubmenu',\n    '[attr.tabindex]': '_getTabIndex()',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.disabled]': 'disabled || null',\n    '(click)': '_checkDisabled($event)',\n    '(mouseenter)': '_handleMouseEnter()',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  templateUrl: 'menu-item.html',\n})\nexport class MatMenuItem extends _MatMenuItemMixinBase\n    implements FocusableOption, CanDisable, CanDisableRipple, OnDestroy {\n\n  private _document: Document;\n\n  /** Stream that emits when the menu item is hovered. */\n  readonly _hovered: Subject<MatMenuItem> = new Subject<MatMenuItem>();\n\n  /** Whether the menu item is highlighted. */\n  _highlighted: boolean = false;\n\n  /** Whether the menu item acts as a trigger for a sub-menu. */\n  _triggersSubmenu: boolean = false;\n\n  constructor(\n    private _elementRef: ElementRef<HTMLElement>,\n    @Inject(DOCUMENT) document?: any,\n    private _focusMonitor?: FocusMonitor,\n    @Inject(MAT_MENU_PANEL) @Optional() private _parentMenu?: MatMenuPanel<MatMenuItem>) {\n\n    // @breaking-change 7.0.0 make `_focusMonitor` and `document` required params.\n    super();\n\n    if (_focusMonitor) {\n      // Start monitoring the element so it gets the appropriate focused classes. We want\n      // to show the focus style for menu items only when the focus was not caused by a\n      // mouse or touch interaction.\n      _focusMonitor.monitor(this._elementRef, false);\n    }\n\n    if (_parentMenu && _parentMenu.addItem) {\n      _parentMenu.addItem(this);\n    }\n\n    this._document = document;\n  }\n\n  /** Focuses the menu item. */\n  focus(origin: FocusOrigin = 'program'): void {\n    if (this._focusMonitor) {\n      this._focusMonitor.focusVia(this._getHostElement(), origin);\n    } else {\n      this._getHostElement().focus();\n    }\n  }\n\n  ngOnDestroy() {\n    if (this._focusMonitor) {\n      this._focusMonitor.stopMonitoring(this._elementRef);\n    }\n\n    if (this._parentMenu && this._parentMenu.removeItem) {\n      this._parentMenu.removeItem(this);\n    }\n\n    this._hovered.complete();\n  }\n\n  /** Used to set the `tabindex`. */\n  _getTabIndex(): string {\n    return this.disabled ? '-1' : '0';\n  }\n\n  /** Returns the host DOM element. */\n  _getHostElement(): HTMLElement {\n    return this._elementRef.nativeElement;\n  }\n\n  /** Prevents the default element actions if it is disabled. */\n  _checkDisabled(event: Event): void {\n    if (this.disabled) {\n      event.preventDefault();\n      event.stopPropagation();\n    }\n  }\n\n  /** Emits to the hover stream. */\n  _handleMouseEnter() {\n    this._hovered.next(this);\n  }\n\n  /** Gets the label to be used when determining whether the option should be focused. */\n  getLabel(): string {\n    const element: HTMLElement = this._elementRef.nativeElement;\n    const textNodeType = this._document ? this._document.TEXT_NODE : 3;\n    let output = '';\n\n    if (element.childNodes) {\n      const length = element.childNodes.length;\n\n      // Go through all the top-level text nodes and extract their text.\n      // We skip anything that's not a text node to prevent the text from\n      // being thrown off by something like an icon.\n      for (let i = 0; i < length; i++) {\n        if (element.childNodes[i].nodeType === textNodeType) {\n          output += element.childNodes[i].textContent;\n        }\n      }\n    }\n\n    return output.trim();\n  }\n\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusKeyManager, FocusOrigin} from '@angular/cdk/a11y';\nimport {Direction} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {ESCAPE, LEFT_ARROW, RIGHT_ARROW, DOWN_ARROW, UP_ARROW} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  Component,\n  ContentChild,\n  ContentChildren,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  OnDestroy,\n  Output,\n  TemplateRef,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n  OnInit,\n} from '@angular/core';\nimport {merge, Observable, Subject, Subscription} from 'rxjs';\nimport {startWith, switchMap, take} from 'rxjs/operators';\nimport {matMenuAnimations} from './menu-animations';\nimport {MatMenuContent} from './menu-content';\nimport {throwMatMenuInvalidPositionX, throwMatMenuInvalidPositionY} from './menu-errors';\nimport {MatMenuItem} from './menu-item';\nimport {MAT_MENU_PANEL, MatMenuPanel} from './menu-panel';\nimport {MenuPositionX, MenuPositionY} from './menu-positions';\nimport {AnimationEvent} from '@angular/animations';\n\n\n/** Default `mat-menu` options that can be overridden. */\nexport interface MatMenuDefaultOptions {\n  /** The x-axis position of the menu. */\n  xPosition: MenuPositionX;\n\n  /** The y-axis position of the menu. */\n  yPosition: MenuPositionY;\n\n  /** Whether the menu should overlap the menu trigger. */\n  overlapTrigger: boolean;\n\n  /** Class to be applied to the menu's backdrop. */\n  backdropClass: string;\n\n  /** Whether the menu has a backdrop. */\n  hasBackdrop?: boolean;\n}\n\n/** Injection token to be used to override the default options for `mat-menu`. */\nexport const MAT_MENU_DEFAULT_OPTIONS =\n    new InjectionToken<MatMenuDefaultOptions>('mat-menu-default-options', {\n      providedIn: 'root',\n      factory: MAT_MENU_DEFAULT_OPTIONS_FACTORY\n    });\n\n/** @docs-private */\nexport function MAT_MENU_DEFAULT_OPTIONS_FACTORY(): MatMenuDefaultOptions {\n  return {\n    overlapTrigger: false,\n    xPosition: 'after',\n    yPosition: 'below',\n    backdropClass: 'cdk-overlay-transparent-backdrop',\n  };\n}\n/**\n * Start elevation for the menu panel.\n * @docs-private\n */\nconst MAT_MENU_BASE_ELEVATION = 4;\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-menu',\n  templateUrl: 'menu.html',\n  styleUrls: ['menu.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matMenu',\n  animations: [\n    matMenuAnimations.transformMenu,\n    matMenuAnimations.fadeInItems\n  ],\n  providers: [\n    {provide: MAT_MENU_PANEL, useExisting: MatMenu}\n  ]\n})\nexport class MatMenu implements AfterContentInit, MatMenuPanel<MatMenuItem>, OnInit, OnDestroy {\n  private _keyManager: FocusKeyManager<MatMenuItem>;\n  private _xPosition: MenuPositionX = this._defaultOptions.xPosition;\n  private _yPosition: MenuPositionY = this._defaultOptions.yPosition;\n  private _previousElevation: string;\n\n  /** Menu items inside the current menu. */\n  private _items: MatMenuItem[] = [];\n\n  /** Emits whenever the amount of menu items changes. */\n  private _itemChanges = new Subject<MatMenuItem[]>();\n\n  /** Subscription to tab events on the menu panel */\n  private _tabSubscription = Subscription.EMPTY;\n\n  /** Config object to be passed into the menu's ngClass */\n  _classList: {[key: string]: boolean} = {};\n\n  /** Current state of the panel animation. */\n  _panelAnimationState: 'void' | 'enter' = 'void';\n\n  /** Emits whenever an animation on the menu completes. */\n  _animationDone = new Subject<AnimationEvent>();\n\n  /** Whether the menu is animating. */\n  _isAnimating: boolean;\n\n  /** Parent menu of the current menu panel. */\n  parentMenu: MatMenuPanel | undefined;\n\n  /** Layout direction of the menu. */\n  direction: Direction;\n\n  /** Class to be added to the backdrop element. */\n  @Input() backdropClass: string = this._defaultOptions.backdropClass;\n\n  /** Position of the menu in the X axis. */\n  @Input()\n  get xPosition(): MenuPositionX { return this._xPosition; }\n  set xPosition(value: MenuPositionX) {\n    if (value !== 'before' && value !== 'after') {\n      throwMatMenuInvalidPositionX();\n    }\n    this._xPosition = value;\n    this.setPositionClasses();\n  }\n\n  /** Position of the menu in the Y axis. */\n  @Input()\n  get yPosition(): MenuPositionY { return this._yPosition; }\n  set yPosition(value: MenuPositionY) {\n    if (value !== 'above' && value !== 'below') {\n      throwMatMenuInvalidPositionY();\n    }\n    this._yPosition = value;\n    this.setPositionClasses();\n  }\n\n  /** @docs-private */\n  @ViewChild(TemplateRef) templateRef: TemplateRef<any>;\n\n  /**\n   * List of the items inside of a menu.\n   * @deprecated\n   * @breaking-change 7.0.0\n   */\n  @ContentChildren(MatMenuItem) items: QueryList<MatMenuItem>;\n\n  /**\n   * Menu content that will be rendered lazily.\n   * @docs-private\n   */\n  @ContentChild(MatMenuContent) lazyContent: MatMenuContent;\n\n  /** Whether the menu should overlap its trigger. */\n  @Input()\n  get overlapTrigger(): boolean { return this._overlapTrigger; }\n  set overlapTrigger(value: boolean) {\n    this._overlapTrigger = coerceBooleanProperty(value);\n  }\n  private _overlapTrigger: boolean = this._defaultOptions.overlapTrigger;\n\n  /** Whether the menu has a backdrop. */\n  @Input()\n  get hasBackdrop(): boolean | undefined { return this._hasBackdrop; }\n  set hasBackdrop(value: boolean | undefined) {\n    this._hasBackdrop = coerceBooleanProperty(value);\n  }\n  private _hasBackdrop: boolean | undefined = this._defaultOptions.hasBackdrop;\n\n  /**\n   * This method takes classes set on the host mat-menu element and applies them on the\n   * menu template that displays in the overlay container.  Otherwise, it's difficult\n   * to style the containing menu from outside the component.\n   * @param classes list of class names\n   */\n  @Input('class')\n  set panelClass(classes: string) {\n    if (classes && classes.length) {\n      this._classList = classes.split(' ').reduce((obj: any, className: string) => {\n        obj[className] = true;\n        return obj;\n      }, {});\n\n      this._elementRef.nativeElement.className = '';\n    }\n  }\n\n  /**\n   * This method takes classes set on the host mat-menu element and applies them on the\n   * menu template that displays in the overlay container.  Otherwise, it's difficult\n   * to style the containing menu from outside the component.\n   * @deprecated Use `panelClass` instead.\n   * @breaking-change 7.0.0\n   */\n  @Input()\n  get classList(): string { return this.panelClass; }\n  set classList(classes: string) { this.panelClass = classes; }\n\n  /** Event emitted when the menu is closed. */\n  @Output() readonly closed: EventEmitter<void | 'click' | 'keydown' | 'tab'> =\n      new EventEmitter<void | 'click' | 'keydown' | 'tab'>();\n\n  /**\n   * Event emitted when the menu is closed.\n   * @deprecated Switch to `closed` instead\n   * @breaking-change 7.0.0\n   */\n  @Output() close = this.closed;\n\n  constructor(\n    private _elementRef: ElementRef<HTMLElement>,\n    private _ngZone: NgZone,\n    @Inject(MAT_MENU_DEFAULT_OPTIONS) private _defaultOptions: MatMenuDefaultOptions) { }\n\n  ngOnInit() {\n    this.setPositionClasses();\n  }\n\n  ngAfterContentInit() {\n    this._keyManager = new FocusKeyManager<MatMenuItem>(this._items).withWrap().withTypeAhead();\n    this._tabSubscription = this._keyManager.tabOut.subscribe(() => this.closed.emit('tab'));\n  }\n\n  ngOnDestroy() {\n    this._tabSubscription.unsubscribe();\n    this.closed.complete();\n  }\n\n  /** Stream that emits whenever the hovered menu item changes. */\n  _hovered(): Observable<MatMenuItem> {\n    return this._itemChanges.pipe(\n      startWith(this._items),\n      switchMap(items => merge(...items.map(item => item._hovered)))\n    );\n  }\n\n  /** Handle a keyboard event from the menu, delegating to the appropriate action. */\n  _handleKeydown(event: KeyboardEvent) {\n    const keyCode = event.keyCode;\n\n    switch (keyCode) {\n      case ESCAPE:\n        this.closed.emit('keydown');\n        event.stopPropagation();\n      break;\n      case LEFT_ARROW:\n        if (this.parentMenu && this.direction === 'ltr') {\n          this.closed.emit('keydown');\n        }\n      break;\n      case RIGHT_ARROW:\n        if (this.parentMenu && this.direction === 'rtl') {\n          this.closed.emit('keydown');\n        }\n      break;\n      default:\n        if (keyCode === UP_ARROW || keyCode === DOWN_ARROW) {\n          this._keyManager.setFocusOrigin('keyboard');\n        }\n\n        this._keyManager.onKeydown(event);\n    }\n  }\n\n  /**\n   * Focus the first item in the menu.\n   * @param origin Action from which the focus originated. Used to set the correct styling.\n   */\n  focusFirstItem(origin: FocusOrigin = 'program'): void {\n    // When the content is rendered lazily, it takes a bit before the items are inside the DOM.\n    if (this.lazyContent) {\n      this._ngZone.onStable.asObservable()\n        .pipe(take(1))\n        .subscribe(() => this._keyManager.setFocusOrigin(origin).setFirstItemActive());\n    } else {\n      this._keyManager.setFocusOrigin(origin).setFirstItemActive();\n    }\n  }\n\n  /**\n   * Resets the active item in the menu. This is used when the menu is opened, allowing\n   * the user to start from the first option when pressing the down arrow.\n   */\n  resetActiveItem() {\n    this._keyManager.setActiveItem(-1);\n  }\n\n  /**\n   * Sets the menu panel elevation.\n   * @param depth Number of parent menus that come before the menu.\n   */\n  setElevation(depth: number): void {\n    // The elevation starts at the base and increases by one for each level.\n    const newElevation = `mat-elevation-z${MAT_MENU_BASE_ELEVATION + depth}`;\n    const customElevation = Object.keys(this._classList).find(c => c.startsWith('mat-elevation-z'));\n\n    if (!customElevation || customElevation === this._previousElevation) {\n      if (this._previousElevation) {\n        this._classList[this._previousElevation] = false;\n      }\n\n      this._classList[newElevation] = true;\n      this._previousElevation = newElevation;\n    }\n  }\n\n  /**\n   * Registers a menu item with the menu.\n   * @docs-private\n   */\n  addItem(item: MatMenuItem) {\n    // We register the items through this method, rather than picking them up through\n    // `ContentChildren`, because we need the items to be picked up by their closest\n    // `mat-menu` ancestor. If we used `@ContentChildren(MatMenuItem, {descendants: true})`,\n    // all descendant items will bleed into the top-level menu in the case where the consumer\n    // has `mat-menu` instances nested inside each other.\n    if (this._items.indexOf(item) === -1) {\n      this._items.push(item);\n      this._itemChanges.next(this._items);\n    }\n  }\n\n  /**\n   * Removes an item from the menu.\n   * @docs-private\n   */\n  removeItem(item: MatMenuItem) {\n    const index = this._items.indexOf(item);\n\n    if (this._items.indexOf(item) > -1) {\n      this._items.splice(index, 1);\n      this._itemChanges.next(this._items);\n    }\n  }\n\n  /**\n   * Adds classes to the menu panel based on its position. Can be used by\n   * consumers to add specific styling based on the position.\n   * @param posX Position of the menu along the x axis.\n   * @param posY Position of the menu along the y axis.\n   * @docs-private\n   */\n  setPositionClasses(posX: MenuPositionX = this.xPosition, posY: MenuPositionY = this.yPosition) {\n    const classes = this._classList;\n    classes['mat-menu-before'] = posX === 'before';\n    classes['mat-menu-after'] = posX === 'after';\n    classes['mat-menu-above'] = posY === 'above';\n    classes['mat-menu-below'] = posY === 'below';\n  }\n\n  /** Starts the enter animation. */\n  _startAnimation() {\n    // @breaking-change 7.0.0 Combine with _resetAnimation.\n    this._panelAnimationState = 'enter';\n  }\n\n  /** Resets the panel animation to its initial state. */\n  _resetAnimation() {\n    // @breaking-change 7.0.0 Combine with _startAnimation.\n    this._panelAnimationState = 'void';\n  }\n\n  /** Callback that is invoked when the panel animation completes. */\n  _onAnimationDone(event: AnimationEvent) {\n    this._animationDone.next(event);\n    this._isAnimating = false;\n\n    // Scroll the content element to the top once the animation is done. This is necessary, because\n    // we move focus to the first item while it's still being animated, which can throw the browser\n    // off when it determines the scroll position. Alternatively we can move focus when the\n    // animation is done, however moving focus asynchronously will interrupt screen readers\n    // which are in the process of reading out the menu already. We take the `element` from\n    // the `event` since we can't use a `ViewChild` to access the pane.\n    if (event.toState === 'enter' && this._keyManager.activeItemIndex === 0) {\n      event.element.scrollTop = 0;\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor, FocusOrigin, isFakeMousedownFromScreenReader} from '@angular/cdk/a11y';\nimport {Direction, Directionality} from '@angular/cdk/bidi';\nimport {LEFT_ARROW, RIGHT_ARROW} from '@angular/cdk/keycodes';\nimport {\n  FlexibleConnectedPositionStrategy,\n  HorizontalConnectionPos,\n  Overlay,\n  OverlayConfig,\n  OverlayRef,\n  ScrollStrategy,\n  VerticalConnectionPos,\n} from '@angular/cdk/overlay';\nimport {TemplatePortal} from '@angular/cdk/portal';\nimport {\n  AfterContentInit,\n  Directive,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  InjectionToken,\n  Input,\n  OnDestroy,\n  Optional,\n  Output,\n  Self,\n  ViewContainerRef,\n} from '@angular/core';\nimport {asapScheduler, merge, of as observableOf, Subscription} from 'rxjs';\nimport {delay, filter, take, takeUntil} from 'rxjs/operators';\nimport {MatMenu} from './menu-directive';\nimport {throwMatMenuMissingError} from './menu-errors';\nimport {MatMenuItem} from './menu-item';\nimport {MatMenuPanel} from './menu-panel';\nimport {MenuPositionX, MenuPositionY} from './menu-positions';\n\n/** Injection token that determines the scroll handling while the menu is open. */\nexport const MAT_MENU_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mat-menu-scroll-strategy');\n\n/** @docs-private */\nexport function MAT_MENU_SCROLL_STRATEGY_FACTORY(overlay: Overlay): () => ScrollStrategy {\n  return () => overlay.scrollStrategies.reposition();\n}\n\n/** @docs-private */\nexport const MAT_MENU_SCROLL_STRATEGY_FACTORY_PROVIDER = {\n  provide: MAT_MENU_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_MENU_SCROLL_STRATEGY_FACTORY,\n};\n\n/** Default top padding of the menu panel. */\nexport const MENU_PANEL_TOP_PADDING = 8;\n\n// TODO(andrewseguin): Remove the kebab versions in favor of camelCased attribute selectors\n\n/**\n * This directive is intended to be used in conjunction with an mat-menu tag.  It is\n * responsible for toggling the display of the provided menu instance.\n */\n@Directive({\n  selector: `[mat-menu-trigger-for], [matMenuTriggerFor]`,\n  host: {\n    'aria-haspopup': 'true',\n    '[attr.aria-expanded]': 'menuOpen || null',\n    '(mousedown)': '_handleMousedown($event)',\n    '(keydown)': '_handleKeydown($event)',\n    '(click)': '_handleClick($event)',\n  },\n  exportAs: 'matMenuTrigger'\n})\nexport class MatMenuTrigger implements AfterContentInit, OnDestroy {\n  private _portal: TemplatePortal;\n  private _overlayRef: OverlayRef | null = null;\n  private _menuOpen: boolean = false;\n  private _closeSubscription = Subscription.EMPTY;\n  private _hoverSubscription = Subscription.EMPTY;\n\n  // Tracking input type is necessary so it's possible to only auto-focus\n  // the first item of the list when the menu is opened via the keyboard\n  private _openedByMouse: boolean = false;\n\n  /**\n   * @deprecated\n   * @breaking-change 7.0.0\n   */\n  @Input('mat-menu-trigger-for')\n  get _deprecatedMatMenuTriggerFor(): MatMenuPanel {\n    return this.menu;\n  }\n\n  set _deprecatedMatMenuTriggerFor(v: MatMenuPanel) {\n    this.menu = v;\n  }\n\n  /** References the menu instance that the trigger is associated with. */\n  @Input('matMenuTriggerFor') menu: MatMenuPanel;\n\n  /** Data to be passed along to any lazily-rendered content. */\n  @Input('matMenuTriggerData') menuData: any;\n\n  /** Event emitted when the associated menu is opened. */\n  @Output() readonly menuOpened: EventEmitter<void> = new EventEmitter<void>();\n\n  /**\n   * Event emitted when the associated menu is opened.\n   * @deprecated Switch to `menuOpened` instead\n   * @breaking-change 7.0.0\n   */\n  // tslint:disable-next-line:no-output-on-prefix\n  @Output() readonly onMenuOpen: EventEmitter<void> = this.menuOpened;\n\n  /** Event emitted when the associated menu is closed. */\n  @Output() readonly menuClosed: EventEmitter<void> = new EventEmitter<void>();\n\n  /**\n   * Event emitted when the associated menu is closed.\n   * @deprecated Switch to `menuClosed` instead\n   * @breaking-change 7.0.0\n   */\n  // tslint:disable-next-line:no-output-on-prefix\n  @Output() readonly onMenuClose: EventEmitter<void> = this.menuClosed;\n\n  constructor(private _overlay: Overlay,\n              private _element: ElementRef<HTMLElement>,\n              private _viewContainerRef: ViewContainerRef,\n              @Inject(MAT_MENU_SCROLL_STRATEGY) private _scrollStrategy,\n              @Optional() private _parentMenu: MatMenu,\n              @Optional() @Self() private _menuItemInstance: MatMenuItem,\n              @Optional() private _dir: Directionality,\n              // TODO(crisbeto): make the _focusMonitor required when doing breaking changes.\n              // @breaking-change 7.0.0\n              private _focusMonitor?: FocusMonitor) {\n\n    if (_menuItemInstance) {\n      _menuItemInstance._triggersSubmenu = this.triggersSubmenu();\n    }\n  }\n\n  ngAfterContentInit() {\n    this._checkMenu();\n\n    this.menu.close.subscribe(reason => {\n      this._destroyMenu();\n\n      // If a click closed the menu, we should close the entire chain of nested menus.\n      if ((reason === 'click' || reason === 'tab') && this._parentMenu) {\n        this._parentMenu.closed.emit(reason);\n      }\n    });\n\n    this._handleHover();\n  }\n\n  ngOnDestroy() {\n    if (this._overlayRef) {\n      this._overlayRef.dispose();\n      this._overlayRef = null;\n    }\n\n    this._cleanUpSubscriptions();\n  }\n\n  /** Whether the menu is open. */\n  get menuOpen(): boolean {\n    return this._menuOpen;\n  }\n\n  /** The text direction of the containing app. */\n  get dir(): Direction {\n    return this._dir && this._dir.value === 'rtl' ? 'rtl' : 'ltr';\n  }\n\n  /** Whether the menu triggers a sub-menu or a top-level one. */\n  triggersSubmenu(): boolean {\n    return !!(this._menuItemInstance && this._parentMenu);\n  }\n\n  /** Toggles the menu between the open and closed states. */\n  toggleMenu(): void {\n    return this._menuOpen ? this.closeMenu() : this.openMenu();\n  }\n\n  /** Opens the menu. */\n  openMenu(): void {\n    if (this._menuOpen) {\n      return;\n    }\n\n    this._checkMenu();\n\n    const overlayRef = this._createOverlay();\n    this._setPosition(overlayRef.getConfig().positionStrategy as FlexibleConnectedPositionStrategy);\n    overlayRef.attach(this._portal);\n\n    if (this.menu.lazyContent) {\n      this.menu.lazyContent.attach(this.menuData);\n    }\n\n    this._closeSubscription = this._menuClosingActions().subscribe(() => this.closeMenu());\n    this._initMenu();\n\n    if (this.menu instanceof MatMenu) {\n      this.menu._startAnimation();\n    }\n  }\n\n  /** Closes the menu. */\n  closeMenu(): void {\n    this.menu.close.emit();\n  }\n\n  /**\n   * Focuses the menu trigger.\n   * @param origin Source of the menu trigger's focus.\n   */\n  focus(origin: FocusOrigin = 'program') {\n    if (this._focusMonitor) {\n      this._focusMonitor.focusVia(this._element, origin);\n    } else {\n      this._element.nativeElement.focus();\n    }\n  }\n\n  /** Closes the menu and does the necessary cleanup. */\n  private _destroyMenu() {\n    if (!this._overlayRef || !this.menuOpen) {\n      return;\n    }\n\n    const menu = this.menu;\n\n    this._closeSubscription.unsubscribe();\n    this._overlayRef.detach();\n\n    if (menu instanceof MatMenu) {\n      menu._resetAnimation();\n\n      if (menu.lazyContent) {\n        // Wait for the exit animation to finish before detaching the content.\n        menu._animationDone\n          .pipe(\n            filter(event => event.toState === 'void'),\n            take(1),\n            // Interrupt if the content got re-attached.\n            takeUntil(menu.lazyContent._attached)\n          )\n          .subscribe(() => menu.lazyContent!.detach(), undefined, () => {\n            // No matter whether the content got re-attached, reset the menu.\n            this._resetMenu();\n          });\n      } else {\n        this._resetMenu();\n      }\n    } else {\n      this._resetMenu();\n\n      if (menu.lazyContent) {\n        menu.lazyContent.detach();\n      }\n    }\n  }\n\n  /**\n   * This method sets the menu state to open and focuses the first item if\n   * the menu was opened via the keyboard.\n   */\n  private _initMenu(): void {\n    this.menu.parentMenu = this.triggersSubmenu() ? this._parentMenu : undefined;\n    this.menu.direction = this.dir;\n    this._setMenuElevation();\n    this._setIsMenuOpen(true);\n    this.menu.focusFirstItem(this._openedByMouse ? 'mouse' : 'program');\n  }\n\n  /** Updates the menu elevation based on the amount of parent menus that it has. */\n  private _setMenuElevation(): void {\n    if (this.menu.setElevation) {\n      let depth = 0;\n      let parentMenu = this.menu.parentMenu;\n\n      while (parentMenu) {\n        depth++;\n        parentMenu = parentMenu.parentMenu;\n      }\n\n      this.menu.setElevation(depth);\n    }\n  }\n\n  /**\n   * This method resets the menu when it's closed, most importantly restoring\n   * focus to the menu trigger if the menu was opened via the keyboard.\n   */\n  private _resetMenu(): void {\n    this._setIsMenuOpen(false);\n\n    // We should reset focus if the user is navigating using a keyboard or\n    // if we have a top-level trigger which might cause focus to be lost\n    // when clicking on the backdrop.\n    if (!this._openedByMouse) {\n      // Note that the focus style will show up both for `program` and\n      // `keyboard` so we don't have to specify which one it is.\n      this.focus();\n    } else if (!this.triggersSubmenu()) {\n      this.focus('mouse');\n    }\n\n    this._openedByMouse = false;\n  }\n\n  // set state rather than toggle to support triggers sharing a menu\n  private _setIsMenuOpen(isOpen: boolean): void {\n    this._menuOpen = isOpen;\n    this._menuOpen ? this.menuOpened.emit() : this.menuClosed.emit();\n\n    if (this.triggersSubmenu()) {\n      this._menuItemInstance._highlighted = isOpen;\n    }\n  }\n\n  /**\n   * This method checks that a valid instance of MatMenu has been passed into\n   * matMenuTriggerFor. If not, an exception is thrown.\n   */\n  private _checkMenu() {\n    if (!this.menu) {\n      throwMatMenuMissingError();\n    }\n  }\n\n  /**\n   * This method creates the overlay from the provided menu's template and saves its\n   * OverlayRef so that it can be attached to the DOM when openMenu is called.\n   */\n  private _createOverlay(): OverlayRef {\n    if (!this._overlayRef) {\n      this._portal = new TemplatePortal(this.menu.templateRef, this._viewContainerRef);\n      const config = this._getOverlayConfig();\n      this._subscribeToPositions(config.positionStrategy as FlexibleConnectedPositionStrategy);\n      this._overlayRef = this._overlay.create(config);\n    }\n\n    return this._overlayRef;\n  }\n\n  /**\n   * This method builds the configuration object needed to create the overlay, the OverlayState.\n   * @returns OverlayConfig\n   */\n  private _getOverlayConfig(): OverlayConfig {\n    return new OverlayConfig({\n      positionStrategy: this._overlay.position()\n          .flexibleConnectedTo(this._element)\n          .withLockedPosition()\n          .withTransformOriginOn('.mat-menu-panel'),\n      hasBackdrop: this.menu.hasBackdrop == null ? !this.triggersSubmenu() : this.menu.hasBackdrop,\n      backdropClass: this.menu.backdropClass || 'cdk-overlay-transparent-backdrop',\n      scrollStrategy: this._scrollStrategy(),\n      direction: this._dir\n    });\n  }\n\n  /**\n   * Listens to changes in the position of the overlay and sets the correct classes\n   * on the menu based on the new position. This ensures the animation origin is always\n   * correct, even if a fallback position is used for the overlay.\n   */\n  private _subscribeToPositions(position: FlexibleConnectedPositionStrategy): void {\n    if (this.menu.setPositionClasses) {\n      position.positionChanges.subscribe(change => {\n        const posX: MenuPositionX = change.connectionPair.overlayX === 'start' ? 'after' : 'before';\n        const posY: MenuPositionY = change.connectionPair.overlayY === 'top' ? 'below' : 'above';\n\n        this.menu.setPositionClasses!(posX, posY);\n      });\n    }\n  }\n\n  /**\n   * Sets the appropriate positions on a position strategy\n   * so the overlay connects with the trigger correctly.\n   * @param positionStrategy Strategy whose position to update.\n   */\n  private _setPosition(positionStrategy: FlexibleConnectedPositionStrategy) {\n    let [originX, originFallbackX]: HorizontalConnectionPos[] =\n        this.menu.xPosition === 'before' ? ['end', 'start'] : ['start', 'end'];\n\n    let [overlayY, overlayFallbackY]: VerticalConnectionPos[] =\n        this.menu.yPosition === 'above' ? ['bottom', 'top'] : ['top', 'bottom'];\n\n    let [originY, originFallbackY] = [overlayY, overlayFallbackY];\n    let [overlayX, overlayFallbackX] = [originX, originFallbackX];\n    let offsetY = 0;\n\n    if (this.triggersSubmenu()) {\n      // When the menu is a sub-menu, it should always align itself\n      // to the edges of the trigger, instead of overlapping it.\n      overlayFallbackX = originX = this.menu.xPosition === 'before' ? 'start' : 'end';\n      originFallbackX = overlayX = originX === 'end' ? 'start' : 'end';\n      offsetY = overlayY === 'bottom' ? MENU_PANEL_TOP_PADDING : -MENU_PANEL_TOP_PADDING;\n    } else if (!this.menu.overlapTrigger) {\n      originY = overlayY === 'top' ? 'bottom' : 'top';\n      originFallbackY = overlayFallbackY === 'top' ? 'bottom' : 'top';\n    }\n\n    positionStrategy.withPositions([\n      {originX, originY, overlayX, overlayY, offsetY},\n      {originX: originFallbackX, originY, overlayX: overlayFallbackX, overlayY, offsetY},\n      {\n        originX,\n        originY: originFallbackY,\n        overlayX,\n        overlayY: overlayFallbackY,\n        offsetY: -offsetY\n      },\n      {\n        originX: originFallbackX,\n        originY: originFallbackY,\n        overlayX: overlayFallbackX,\n        overlayY: overlayFallbackY,\n        offsetY: -offsetY\n      }\n    ]);\n  }\n\n  /** Cleans up the active subscriptions. */\n  private _cleanUpSubscriptions(): void {\n    this._closeSubscription.unsubscribe();\n    this._hoverSubscription.unsubscribe();\n  }\n\n  /** Returns a stream that emits whenever an action that should close the menu occurs. */\n  private _menuClosingActions() {\n    const backdrop = this._overlayRef!.backdropClick();\n    const detachments = this._overlayRef!.detachments();\n    const parentClose = this._parentMenu ? this._parentMenu.closed : observableOf();\n    const hover = this._parentMenu ? this._parentMenu._hovered().pipe(\n      filter(active => active !== this._menuItemInstance),\n      filter(() => this._menuOpen)\n    ) : observableOf();\n\n    return merge(backdrop, parentClose, hover, detachments);\n  }\n\n  /** Handles mouse presses on the trigger. */\n  _handleMousedown(event: MouseEvent): void {\n    if (!isFakeMousedownFromScreenReader(event)) {\n      this._openedByMouse = true;\n\n      // Since clicking on the trigger won't close the menu if it opens a sub-menu,\n      // we should prevent focus from moving onto it via click to avoid the\n      // highlight from lingering on the menu item.\n      if (this.triggersSubmenu()) {\n        event.preventDefault();\n      }\n    }\n  }\n\n  /** Handles key presses on the trigger. */\n  _handleKeydown(event: KeyboardEvent): void {\n    const keyCode = event.keyCode;\n\n    if (this.triggersSubmenu() && (\n            (keyCode === RIGHT_ARROW && this.dir === 'ltr') ||\n            (keyCode === LEFT_ARROW && this.dir === 'rtl'))) {\n      this.openMenu();\n    }\n  }\n\n  /** Handles click events on the trigger. */\n  _handleClick(event: MouseEvent): void {\n    if (this.triggersSubmenu()) {\n      // Stop event propagation to avoid closing the parent menu.\n      event.stopPropagation();\n      this.openMenu();\n    } else {\n      this.toggleMenu();\n    }\n  }\n\n  /** Handles the cases where the user hovers over the trigger. */\n  private _handleHover() {\n    // Subscribe to changes in the hovered item in order to toggle the panel.\n    if (!this.triggersSubmenu()) {\n      return;\n    }\n\n    this._hoverSubscription = this._parentMenu._hovered()\n      // Since we might have multiple competing triggers for the same menu (e.g. a sub-menu\n      // with different data and triggers), we have to delay it by a tick to ensure that\n      // it won't be closed immediately after it is opened.\n      .pipe(\n        filter(active => active === this._menuItemInstance && !active.disabled),\n        delay(0, asapScheduler)\n      )\n      .subscribe(() => {\n        this._openedByMouse = true;\n\n        // If the same menu is used between multiple triggers, it might still be animating\n        // while the new trigger tries to re-open it. Wait for the animation to finish\n        // before doing so. Also interrupt if the user moves to another item.\n        if (this.menu instanceof MatMenu && this.menu._isAnimating) {\n          // We need the `delay(0)` here in order to avoid\n          // 'changed after checked' errors in some cases. See #12194.\n          this.menu._animationDone\n            .pipe(take(1), delay(0, asapScheduler), takeUntil(this._parentMenu._hovered()))\n            .subscribe(() => this.openMenu());\n        } else {\n          this.openMenu();\n        }\n      });\n  }\n\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {MatMenuContent} from './menu-content';\nimport {MatMenu} from './menu-directive';\nimport {MatMenuItem} from './menu-item';\nimport {\n  MatMenuTrigger,\n  MAT_MENU_SCROLL_STRATEGY_FACTORY_PROVIDER,\n} from './menu-trigger';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatCommonModule,\n    MatRippleModule,\n    OverlayModule,\n  ],\n  exports: [MatMenu, MatMenuItem, MatMenuTrigger, MatMenuContent, MatCommonModule],\n  declarations: [MatMenu, MatMenuItem, MatMenuTrigger, MatMenuContent],\n  providers: [MAT_MENU_SCROLL_STRATEGY_FACTORY_PROVIDER]\n})\nexport class MatMenuModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  animate,\n  AnimationTriggerMetadata,\n  state,\n  style,\n  transition,\n  trigger,\n} from '@angular/animations';\n\n/**\n * The following are all the animations for the mat-select component, with each\n * const containing the metadata for one animation.\n *\n * The values below match the implementation of the AngularJS Material mat-select animation.\n */\nexport const matSelectAnimations: {\n  readonly transformPanel: AnimationTriggerMetadata;\n  readonly fadeInContent: AnimationTriggerMetadata;\n} = {\n  /**\n   * This animation transforms the select's overlay panel on and off the page.\n   *\n   * When the panel is attached to the DOM, it expands its width by the amount of padding, scales it\n   * up to 100% on the Y axis, fades in its border, and translates slightly up and to the\n   * side to ensure the option text correctly overlaps the trigger text.\n   *\n   * When the panel is removed from the DOM, it simply fades out linearly.\n   */\n  transformPanel: trigger('transformPanel', [\n    state('void', style({\n      transform: 'scaleY(0.8)',\n      minWidth: '100%',\n      opacity: 0\n    })),\n    state('showing', style({\n      opacity: 1,\n      minWidth: 'calc(100% + 32px)', // 32px = 2 * 16px padding\n      transform: 'scaleY(1)'\n    })),\n    state('showing-multiple', style({\n      opacity: 1,\n      minWidth: 'calc(100% + 64px)', // 64px = 48px padding on the left + 16px padding on the right\n      transform: 'scaleY(1)'\n    })),\n    transition('void => *', animate('120ms cubic-bezier(0, 0, 0.2, 1)')),\n    transition('* => void', animate('100ms 25ms linear', style({opacity: 0})))\n  ]),\n\n  /**\n   * This animation fades in the background color and text content of the\n   * select's options. It is time delayed to occur 100ms after the overlay\n   * panel has transformed in.\n   * @deprecated Not used anymore. To be removed.\n   * @breaking-change 8.0.0\n   */\n  fadeInContent: trigger('fadeInContent', [\n    state('showing', style({opacity: 1})),\n    transition('void => showing', [\n      style({opacity: 0}),\n      animate('150ms 100ms cubic-bezier(0.55, 0, 0.55, 0.2)')\n    ])\n  ])\n};\n\n\n/**\n * @deprecated\n * @breaking-change 7.0.0\n */\nexport const transformPanel = matSelectAnimations.transformPanel;\n\n/**\n * @deprecated\n * @breaking-change 7.0.0\n */\nexport const fadeInContent = matSelectAnimations.fadeInContent;\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusableOption, FocusKeyManager} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {SelectionModel} from '@angular/cdk/collections';\nimport {SPACE, ENTER, HOME, END, UP_ARROW, DOWN_ARROW, A} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  ContentChildren,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  OnDestroy,\n  OnInit,\n  Output,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {\n  CanDisableRipple, CanDisableRippleCtor,\n  MatLine,\n  MatLineSetter,\n  mixinDisableRipple,\n} from '@angular/material/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {Subscription} from 'rxjs';\nimport {MatListAvatarCssMatStyler, MatListIconCssMatStyler} from './list';\n\n\n/** @docs-private */\nexport class MatSelectionListBase {}\nexport const _MatSelectionListMixinBase: CanDisableRippleCtor & typeof MatSelectionListBase =\n    mixinDisableRipple(MatSelectionListBase);\n\n/** @docs-private */\nexport class MatListOptionBase {}\nexport const _MatListOptionMixinBase: CanDisableRippleCtor & typeof MatListOptionBase =\n    mixinDisableRipple(MatListOptionBase);\n\n/** @docs-private */\nexport const MAT_SELECTION_LIST_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatSelectionList),\n  multi: true\n};\n\n/** Change event that is being fired whenever the selected state of an option changes. */\nexport class MatSelectionListChange {\n  constructor(\n    /** Reference to the selection list that emitted the event. */\n    public source: MatSelectionList,\n    /** Reference to the option that has been changed. */\n    public option: MatListOption) {}\n}\n\n/**\n * Component for list-options of selection-list. Each list-option can automatically\n * generate a checkbox and can put current item into the selectionModel of selection-list\n * if the current item is selected.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-list-option',\n  exportAs: 'matListOption',\n  inputs: ['disableRipple'],\n  host: {\n    'role': 'option',\n    'class': 'mat-list-item mat-list-option',\n    '(focus)': '_handleFocus()',\n    '(blur)': '_handleBlur()',\n    '(click)': '_handleClick()',\n    'tabindex': '-1',\n    '[class.mat-list-item-disabled]': 'disabled',\n    '[class.mat-list-item-with-avatar]': '_avatar || _icon',\n    '[attr.aria-selected]': 'selected.toString()',\n    '[attr.aria-disabled]': 'disabled.toString()',\n  },\n  templateUrl: 'list-option.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatListOption extends _MatListOptionMixinBase\n    implements AfterContentInit, OnDestroy, OnInit, FocusableOption, CanDisableRipple {\n\n  private _selected = false;\n  private _disabled = false;\n\n  @ContentChild(MatListAvatarCssMatStyler) _avatar: MatListAvatarCssMatStyler;\n  @ContentChild(MatListIconCssMatStyler) _icon: MatListIconCssMatStyler;\n  @ContentChildren(MatLine) _lines: QueryList<MatLine>;\n\n  /** DOM element containing the item's text. */\n  @ViewChild('text') _text: ElementRef;\n\n  /** Whether the label should appear before or after the checkbox. Defaults to 'after' */\n  @Input() checkboxPosition: 'before' | 'after' = 'after';\n\n  /** Value of the option */\n  @Input() value: any;\n\n  /** Whether the option is disabled. */\n  @Input()\n  get disabled() { return this._disabled || (this.selectionList && this.selectionList.disabled); }\n  set disabled(value: any) {\n    const newValue = coerceBooleanProperty(value);\n\n    if (newValue !== this._disabled) {\n      this._disabled = newValue;\n      this._changeDetector.markForCheck();\n    }\n  }\n\n  /** Whether the option is selected. */\n  @Input()\n  get selected(): boolean { return this.selectionList.selectedOptions.isSelected(this); }\n  set selected(value: boolean) {\n    const isSelected = coerceBooleanProperty(value);\n\n    if (isSelected !== this._selected) {\n      this._setSelected(isSelected);\n      this.selectionList._reportValueChange();\n    }\n  }\n\n  constructor(private _element: ElementRef<HTMLElement>,\n              private _changeDetector: ChangeDetectorRef,\n              /** @docs-private */\n              @Inject(forwardRef(() => MatSelectionList)) public selectionList: MatSelectionList) {\n    super();\n  }\n\n  ngOnInit() {\n    // List options that are selected at initialization can't be reported properly to the form\n    // control. This is because it takes some time until the selection-list knows about all\n    // available options. Also it can happen that the ControlValueAccessor has an initial value\n    // that should be used instead. Deferring the value change report to the next tick ensures\n    // that the form control value is not being overwritten.\n    const wasSelected = this._selected;\n\n    Promise.resolve().then(() => {\n      if (this._selected || wasSelected) {\n        this.selected = true;\n        this._changeDetector.markForCheck();\n      }\n    });\n  }\n\n  ngAfterContentInit() {\n    // TODO: consider turning the setter into a function, it doesn't do anything as a class.\n    // tslint:disable-next-line:no-unused-expression\n    new MatLineSetter(this._lines, this._element);\n  }\n\n  ngOnDestroy(): void {\n    if (this.selected) {\n      // We have to delay this until the next tick in order\n      // to avoid changed after checked errors.\n      Promise.resolve().then(() => this.selected = false);\n    }\n\n    this.selectionList._removeOptionFromList(this);\n  }\n\n  /** Toggles the selection state of the option. */\n  toggle(): void {\n    this.selected = !this.selected;\n  }\n\n  /** Allows for programmatic focusing of the option. */\n  focus(): void {\n    this._element.nativeElement.focus();\n  }\n\n  /**\n   * Returns the list item's text label. Implemented as a part of the FocusKeyManager.\n   * @docs-private\n   */\n  getLabel() {\n    return this._text ? (this._text.nativeElement.textContent || '') : '';\n  }\n\n  /** Whether this list item should show a ripple effect when clicked. */\n  _isRippleDisabled() {\n    return this.disabled || this.disableRipple || this.selectionList.disableRipple;\n  }\n\n  _handleClick() {\n    if (!this.disabled) {\n      this.toggle();\n\n      // Emit a change event if the selected state of the option changed through user interaction.\n      this.selectionList._emitChangeEvent(this);\n    }\n  }\n\n  _handleFocus() {\n    this.selectionList._setFocusedOption(this);\n  }\n\n  _handleBlur() {\n    this.selectionList._onTouched();\n  }\n\n  /** Retrieves the DOM element of the component host. */\n  _getHostElement(): HTMLElement {\n    return this._element.nativeElement;\n  }\n\n  /** Sets the selected state of the option. Returns whether the value has changed. */\n  _setSelected(selected: boolean): boolean {\n    if (selected === this._selected) {\n      return false;\n    }\n\n    this._selected = selected;\n\n    if (selected) {\n      this.selectionList.selectedOptions.select(this);\n    } else {\n      this.selectionList.selectedOptions.deselect(this);\n    }\n\n    this._changeDetector.markForCheck();\n    return true;\n  }\n\n  /**\n   * Notifies Angular that the option needs to be checked in the next change detection run. Mainly\n   * used to trigger an update of the list option if the disabled state of the selection list\n   * changed.\n   */\n  _markForCheck() {\n    this._changeDetector.markForCheck();\n  }\n}\n\n\n/**\n * Material Design list component where each item is a selectable option. Behaves as a listbox.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-selection-list',\n  exportAs: 'matSelectionList',\n  inputs: ['disabled', 'disableRipple', 'tabIndex'],\n  host: {\n    'role': 'listbox',\n    '[tabIndex]': 'tabIndex',\n    'class': 'mat-selection-list',\n    '(focus)': 'focus()',\n    '(blur)': '_onTouched()',\n    '(keydown)': '_keydown($event)',\n    '[attr.aria-disabled]': 'disabled.toString()',\n  },\n  template: '<ng-content></ng-content>',\n  styleUrls: ['list.css'],\n  encapsulation: ViewEncapsulation.None,\n  providers: [MAT_SELECTION_LIST_VALUE_ACCESSOR],\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class MatSelectionList extends _MatSelectionListMixinBase implements FocusableOption,\n    CanDisableRipple, AfterContentInit, ControlValueAccessor, OnDestroy {\n\n  /** The FocusKeyManager which handles focus. */\n  _keyManager: FocusKeyManager<MatListOption>;\n\n  /** The option components contained within this selection-list. */\n  @ContentChildren(MatListOption) options: QueryList<MatListOption>;\n\n  /** Emits a change event whenever the selected state of an option changes. */\n  @Output() readonly selectionChange: EventEmitter<MatSelectionListChange> =\n      new EventEmitter<MatSelectionListChange>();\n\n  /** Tabindex of the selection list. */\n  @Input() tabIndex: number = 0;\n\n  /**\n   * Function used for comparing an option against the selected value when determining which\n   * options should appear as selected. The first argument is the value of an options. The second\n   * one is a value from the selected value. A boolean must be returned.\n   */\n  @Input() compareWith: (o1: any, o2: any) => boolean;\n\n  /** Whether the selection list is disabled. */\n  @Input()\n  get disabled(): boolean { return this._disabled; }\n  set disabled(value: boolean) {\n    this._disabled = coerceBooleanProperty(value);\n\n    // The `MatSelectionList` and `MatListOption` are using the `OnPush` change detection\n    // strategy. Therefore the options will not check for any changes if the `MatSelectionList`\n    // changed its state. Since we know that a change to `disabled` property of the list affects\n    // the state of the options, we manually mark each option for check.\n    if (this.options) {\n      this.options.forEach(option => option._markForCheck());\n    }\n  }\n  private _disabled: boolean = false;\n\n  /** The currently selected options. */\n  selectedOptions: SelectionModel<MatListOption> = new SelectionModel<MatListOption>(true);\n\n  /** View to model callback that should be called whenever the selected options change. */\n  private _onChange: (value: any) => void = (_: any) => {};\n\n  /** Used for storing the values that were assigned before the options were initialized. */\n  private _tempValues: string[]|null;\n\n  /** Subscription to sync value changes in the SelectionModel back to the SelectionList. */\n  private _modelChanges = Subscription.EMPTY;\n\n  /** View to model callback that should be called if the list or its options lost focus. */\n  _onTouched: () => void = () => {};\n\n  constructor(private _element: ElementRef<HTMLElement>, @Attribute('tabindex') tabIndex: string) {\n    super();\n    this.tabIndex = parseInt(tabIndex) || 0;\n  }\n\n  ngAfterContentInit(): void {\n    this._keyManager = new FocusKeyManager<MatListOption>(this.options)\n      .withWrap()\n      .withTypeAhead()\n      // Allow disabled items to be focusable. For accessibility reasons, there must be a way for\n      // screenreader users, that allows reading the different options of the list.\n      .skipPredicate(() => false);\n\n    if (this._tempValues) {\n      this._setOptionsFromValues(this._tempValues);\n      this._tempValues = null;\n    }\n\n    // Sync external changes to the model back to the options.\n    this._modelChanges = this.selectedOptions.onChange!.subscribe(event => {\n      if (event.added) {\n        for (let item of event.added) {\n          item.selected = true;\n        }\n      }\n\n      if (event.removed) {\n        for (let item of event.removed) {\n          item.selected = false;\n        }\n      }\n    });\n  }\n\n  ngOnDestroy() {\n    this._modelChanges.unsubscribe();\n  }\n\n  /** Focuses the last active list option. */\n  focus() {\n    this._element.nativeElement.focus();\n  }\n\n  /** Selects all of the options. */\n  selectAll() {\n    this._setAllOptionsSelected(true);\n  }\n\n  /** Deselects all of the options. */\n  deselectAll() {\n    this._setAllOptionsSelected(false);\n  }\n\n  /** Sets the focused option of the selection-list. */\n  _setFocusedOption(option: MatListOption) {\n    this._keyManager.updateActiveItemIndex(this._getOptionIndex(option));\n  }\n\n  /** Removes an option from the selection list and updates the active item. */\n  _removeOptionFromList(option: MatListOption) {\n    const optionIndex = this._getOptionIndex(option);\n\n    if (optionIndex > -1 && this._keyManager.activeItemIndex === optionIndex) {\n      // Check whether the option is the last item\n      if (optionIndex > 0) {\n        this._keyManager.setPreviousItemActive();\n      } else if (optionIndex === 0 && this.options.length > 1) {\n        this._keyManager.setNextItemActive();\n      }\n    }\n  }\n\n  /** Passes relevant key presses to our key manager. */\n  _keydown(event: KeyboardEvent) {\n    const keyCode = event.keyCode;\n    const manager = this._keyManager;\n    const previousFocusIndex = manager.activeItemIndex;\n\n    switch (keyCode) {\n      case SPACE:\n      case ENTER:\n        this._toggleFocusedOption();\n        // Always prevent space from scrolling the page since the list has focus\n        event.preventDefault();\n        break;\n      case HOME:\n      case END:\n        keyCode === HOME ? manager.setFirstItemActive() : manager.setLastItemActive();\n        event.preventDefault();\n        break;\n      case A:\n        if (event.ctrlKey) {\n          this.options.find(option => !option.selected) ? this.selectAll() : this.deselectAll();\n          event.preventDefault();\n        }\n        break;\n      default:\n        manager.onKeydown(event);\n    }\n\n    if ((keyCode === UP_ARROW || keyCode === DOWN_ARROW) && event.shiftKey &&\n        manager.activeItemIndex !== previousFocusIndex) {\n      this._toggleFocusedOption();\n    }\n  }\n\n  /** Reports a value change to the ControlValueAccessor */\n  _reportValueChange() {\n    if (this.options) {\n      this._onChange(this._getSelectedOptionValues());\n    }\n  }\n\n  /** Emits a change event if the selected state of an option changed. */\n  _emitChangeEvent(option: MatListOption) {\n    this.selectionChange.emit(new MatSelectionListChange(this, option));\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  writeValue(values: string[]): void {\n    if (this.options) {\n      this._setOptionsFromValues(values || []);\n    } else {\n      this._tempValues = values;\n    }\n  }\n\n  /** Implemented as a part of ControlValueAccessor. */\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  registerOnChange(fn: (value: any) => void): void {\n    this._onChange = fn;\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  registerOnTouched(fn: () => void): void {\n    this._onTouched = fn;\n  }\n\n  /** Sets the selected options based on the specified values. */\n  private _setOptionsFromValues(values: string[]) {\n    this.options.forEach(option => option._setSelected(false));\n\n    values\n      .map(value => {\n        return this.options.find(option =>\n            this.compareWith ? this.compareWith(option.value, value) : option.value === value);\n      })\n      .filter(Boolean)\n      .forEach(option => option!._setSelected(true));\n  }\n\n  /** Returns the values of the selected options. */\n  private _getSelectedOptionValues(): string[] {\n    return this.options.filter(option => option.selected).map(option => option.value);\n  }\n\n  /** Toggles the state of the currently focused option if enabled. */\n  private _toggleFocusedOption(): void {\n    let focusedIndex = this._keyManager.activeItemIndex;\n\n    if (focusedIndex != null && this._isValidIndex(focusedIndex)) {\n      let focusedOption: MatListOption = this.options.toArray()[focusedIndex];\n\n      if (focusedOption && !focusedOption.disabled) {\n        focusedOption.toggle();\n\n        // Emit a change event because the focused option changed its state through user\n        // interaction.\n        this._emitChangeEvent(focusedOption);\n      }\n    }\n  }\n\n  /**\n   * Sets the selected state on all of the options\n   * and emits an event if anything changed.\n   */\n  private _setAllOptionsSelected(isSelected: boolean) {\n    // Keep track of whether anything changed, because we only want to\n    // emit the changed event when something actually changed.\n    let hasChanged = false;\n\n    this.options.forEach(option => {\n      if (option._setSelected(isSelected)) {\n        hasChanged = true;\n      }\n    });\n\n    if (hasChanged) {\n      this._reportValueChange();\n    }\n  }\n\n  /**\n   * Utility to ensure all indexes are valid.\n   * @param index The index to be checked.\n   * @returns True if the index is valid for our list of options.\n   */\n  private _isValidIndex(index: number): boolean {\n    return index >= 0 && index < this.options.length;\n  }\n\n  /** Returns the index of the specified list option. */\n  private _getOptionIndex(option: MatListOption): number {\n    return this.options.toArray().indexOf(option);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {\n  MatCommonModule,\n  MatLineModule,\n  MatPseudoCheckboxModule,\n  MatRippleModule,\n} from '@angular/material/core';\nimport {\n  MatList,\n  MatNavList,\n  MatListAvatarCssMatStyler,\n  MatListIconCssMatStyler,\n  MatListItem,\n  MatListSubheaderCssMatStyler,\n} from './list';\nimport {MatListOption, MatSelectionList} from './selection-list';\nimport {MatDividerModule} from '@angular/material/divider';\n\n\n@NgModule({\n  imports: [MatLineModule, MatRippleModule, MatCommonModule, MatPseudoCheckboxModule, CommonModule],\n  exports: [\n    MatList,\n    MatNavList,\n    MatListItem,\n    MatListAvatarCssMatStyler,\n    MatLineModule,\n    MatCommonModule,\n    MatListIconCssMatStyler,\n    MatListSubheaderCssMatStyler,\n    MatPseudoCheckboxModule,\n    MatSelectionList,\n    MatListOption,\n    MatDividerModule\n  ],\n  declarations: [\n    MatList,\n    MatNavList,\n    MatListItem,\n    MatListAvatarCssMatStyler,\n    MatListIconCssMatStyler,\n    MatListSubheaderCssMatStyler,\n    MatSelectionList,\n    MatListOption\n  ],\n})\nexport class MatListModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  Component,\n  ContentChild,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  Optional,\n  QueryList,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {\n  CanDisableRipple,\n  CanDisableRippleCtor,\n  MatLine,\n  MatLineSetter,\n  mixinDisableRipple,\n} from '@angular/material/core';\n\n// Boilerplate for applying mixins to MatList.\n/** @docs-private */\nexport class MatListBase {}\nexport const _MatListMixinBase: CanDisableRippleCtor & typeof MatListBase =\n    mixinDisableRipple(MatListBase);\n\n// Boilerplate for applying mixins to MatListItem.\n/** @docs-private */\nexport class MatListItemBase {}\nexport const _MatListItemMixinBase: CanDisableRippleCtor & typeof MatListItemBase =\n    mixinDisableRipple(MatListItemBase);\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-nav-list',\n  exportAs: 'matNavList',\n  host: {\n    'role': 'navigation',\n    'class': 'mat-nav-list'\n  },\n  templateUrl: 'list.html',\n  styleUrls: ['list.css'],\n  inputs: ['disableRipple'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatNavList extends _MatListMixinBase implements CanDisableRipple {}\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-list, mat-action-list',\n  exportAs: 'matList',\n  templateUrl: 'list.html',\n  host: {'class': 'mat-list'},\n  styleUrls: ['list.css'],\n  inputs: ['disableRipple'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatList extends _MatListMixinBase implements CanDisableRipple {}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-list-avatar], [matListAvatar]',\n  host: {'class': 'mat-list-avatar'}\n})\nexport class MatListAvatarCssMatStyler {}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-list-icon], [matListIcon]',\n  host: {'class': 'mat-list-icon'}\n})\nexport class MatListIconCssMatStyler {}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-subheader], [matSubheader]',\n  host: {'class': 'mat-subheader'}\n})\nexport class MatListSubheaderCssMatStyler {}\n\n/** An item within a Material Design list. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-list-item, a[mat-list-item], button[mat-list-item]',\n  exportAs: 'matListItem',\n  host: {\n    'class': 'mat-list-item',\n    // @breaking-change 7.0.0 Remove `mat-list-item-avatar` in favor of `mat-list-item-with-avatar`.\n    '[class.mat-list-item-avatar]': '_avatar || _icon',\n    '[class.mat-list-item-with-avatar]': '_avatar || _icon',\n  },\n  inputs: ['disableRipple'],\n  templateUrl: 'list-item.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatListItem extends _MatListItemMixinBase implements AfterContentInit,\n    CanDisableRipple {\n  private _isNavList: boolean = false;\n\n  @ContentChildren(MatLine) _lines: QueryList<MatLine>;\n  @ContentChild(MatListAvatarCssMatStyler) _avatar: MatListAvatarCssMatStyler;\n  @ContentChild(MatListIconCssMatStyler) _icon: MatListIconCssMatStyler;\n\n  constructor(private _element: ElementRef<HTMLElement>,\n              @Optional() private _navList: MatNavList) {\n    super();\n    this._isNavList = !!_navList;\n\n    // If no type attributed is specified for <button>, set it to \"button\".\n    // If a type attribute is already specified, do nothing.\n    const element = this._getHostElement();\n    if (element.nodeName && element.nodeName.toLowerCase() === 'button'\n        && !element.hasAttribute('type')) {\n      element.setAttribute('type', 'button');\n    }\n  }\n\n  ngAfterContentInit() {\n    // TODO: consider turning the setter into a function, it doesn't do anything as a class.\n    // tslint:disable-next-line:no-unused-expression\n    new MatLineSetter(this._lines, this._element);\n  }\n\n  /** Whether this list item should show a ripple effect when clicked. */\n  _isRippleDisabled() {\n    return !this._isNavList || this.disableRipple || this._navList.disableRipple;\n  }\n\n  /** Retrieves the DOM element of the component host. */\n  _getHostElement(): HTMLElement {\n    return this._element.nativeElement;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor, FocusableOption, FocusOrigin} from '@angular/cdk/a11y';\nimport {ENTER, SPACE} from '@angular/cdk/keycodes';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  Directive,\n  ElementRef,\n  Host,\n  Input,\n  OnDestroy,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {merge, Subscription, EMPTY} from 'rxjs';\nimport {filter} from 'rxjs/operators';\nimport {matExpansionAnimations} from './expansion-animations';\nimport {MatExpansionPanel} from './expansion-panel';\n\n\n/**\n * `<mat-expansion-panel-header>`\n *\n * This component corresponds to the header element of an `<mat-expansion-panel>`.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-expansion-panel-header',\n  styleUrls: ['./expansion-panel-header.css'],\n  templateUrl: './expansion-panel-header.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  animations: [\n    matExpansionAnimations.indicatorRotate,\n    matExpansionAnimations.expansionHeaderHeight\n  ],\n  host: {\n    'class': 'mat-expansion-panel-header',\n    'role': 'button',\n    '[attr.id]': 'panel._headerId',\n    '[attr.tabindex]': 'disabled ? -1 : 0',\n    '[attr.aria-controls]': '_getPanelId()',\n    '[attr.aria-expanded]': '_isExpanded()',\n    '[attr.aria-disabled]': 'panel.disabled',\n    '[class.mat-expanded]': '_isExpanded()',\n    '(click)': '_toggle()',\n    '(keydown)': '_keydown($event)',\n    '[@expansionHeight]': `{\n        value: _getExpandedState(),\n        params: {\n          collapsedHeight: collapsedHeight,\n          expandedHeight: expandedHeight\n        }\n    }`,\n  },\n})\nexport class MatExpansionPanelHeader implements OnDestroy, FocusableOption {\n  private _parentChangeSubscription = Subscription.EMPTY;\n\n  constructor(\n      @Host() public panel: MatExpansionPanel,\n      private _element: ElementRef,\n      private _focusMonitor: FocusMonitor,\n      private _changeDetectorRef: ChangeDetectorRef) {\n\n    const accordionHideToggleChange = panel.accordion ?\n      panel.accordion._stateChanges.pipe(filter(changes => !!changes.hideToggle)) : EMPTY;\n\n    // Since the toggle state depends on an @Input on the panel, we\n    // need to subscribe and trigger change detection manually.\n    this._parentChangeSubscription = merge(\n      panel.opened,\n      panel.closed,\n      accordionHideToggleChange,\n      panel._inputChanges.pipe(filter(changes => !!(changes.hideToggle || changes.disabled)))\n    )\n    .subscribe(() => this._changeDetectorRef.markForCheck());\n\n    // Avoids focus being lost if the panel contained the focused element and was closed.\n    panel.closed\n      .pipe(filter(() => panel._containsFocus()))\n      .subscribe(() => _focusMonitor.focusVia(_element, 'program'));\n\n    _focusMonitor.monitor(_element).subscribe(origin => {\n      if (origin && panel.accordion) {\n        panel.accordion._handleHeaderFocus(this);\n      }\n    });\n  }\n\n  /** Height of the header while the panel is expanded. */\n  @Input() expandedHeight: string;\n\n  /** Height of the header while the panel is collapsed. */\n  @Input() collapsedHeight: string;\n\n  /**\n   * Whether the associated panel is disabled. Implemented as a part of `FocusableOption`.\n   * @docs-private\n   */\n  get disabled() {\n    return this.panel.disabled;\n  }\n\n  /** Toggles the expanded state of the panel. */\n  _toggle(): void {\n    this.panel.toggle();\n  }\n\n  /** Gets whether the panel is expanded. */\n  _isExpanded(): boolean {\n    return this.panel.expanded;\n  }\n\n  /** Gets the expanded state string of the panel. */\n  _getExpandedState(): string {\n    return this.panel._getExpandedState();\n  }\n\n  /** Gets the panel id. */\n  _getPanelId(): string {\n    return this.panel.id;\n  }\n\n  /** Gets whether the expand indicator should be shown. */\n  _showToggle(): boolean {\n    return !this.panel.hideToggle && !this.panel.disabled;\n  }\n\n  /** Handle keydown event calling to toggle() if appropriate. */\n  _keydown(event: KeyboardEvent) {\n    switch (event.keyCode) {\n      // Toggle for space and enter keys.\n      case SPACE:\n      case ENTER:\n        event.preventDefault();\n        this._toggle();\n        break;\n      default:\n        if (this.panel.accordion) {\n          this.panel.accordion._handleHeaderKeydown(event);\n        }\n\n        return;\n    }\n  }\n\n  /**\n   * Focuses the panel header. Implemented as a part of `FocusableOption`.\n   * @param origin Origin of the action that triggered the focus.\n   * @docs-private\n   */\n  focus(origin: FocusOrigin = 'program') {\n    this._focusMonitor.focusVia(this._element, origin);\n  }\n\n  ngOnDestroy() {\n    this._parentChangeSubscription.unsubscribe();\n    this._focusMonitor.stopMonitoring(this._element);\n  }\n}\n\n/**\n * `<mat-panel-description>`\n *\n * This directive is to be used inside of the MatExpansionPanelHeader component.\n */\n@Directive({\n  selector: 'mat-panel-description',\n  host: {\n    class: 'mat-expansion-panel-header-description'\n  }\n})\nexport class MatExpansionPanelDescription {}\n\n/**\n * `<mat-panel-title>`\n *\n * This directive is to be used inside of the MatExpansionPanelHeader component.\n */\n@Directive({\n  selector: 'mat-panel-title',\n  host: {\n    class: 'mat-expansion-panel-header-title'\n  }\n})\nexport class MatExpansionPanelTitle {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, Input, ContentChildren, QueryList, AfterContentInit} from '@angular/core';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {CdkAccordion} from '@angular/cdk/accordion';\nimport {FocusKeyManager} from '@angular/cdk/a11y';\nimport {HOME, END} from '@angular/cdk/keycodes';\nimport {MAT_ACCORDION, MatAccordionBase, MatAccordionDisplayMode} from './accordion-base';\nimport {MatExpansionPanelHeader} from './expansion-panel-header';\n\n/**\n * Directive for a Material Design Accordion.\n */\n@Directive({\n  selector: 'mat-accordion',\n  exportAs: 'matAccordion',\n  inputs: ['multi'],\n  providers: [{\n    provide: MAT_ACCORDION,\n    useExisting: MatAccordion\n  }],\n  host: {\n    class: 'mat-accordion'\n  }\n})\nexport class MatAccordion extends CdkAccordion implements MatAccordionBase, AfterContentInit {\n  private _keyManager: FocusKeyManager<MatExpansionPanelHeader>;\n\n  @ContentChildren(MatExpansionPanelHeader, {descendants: true})\n  _headers: QueryList<MatExpansionPanelHeader>;\n\n  /** Whether the expansion indicator should be hidden. */\n  @Input()\n  get hideToggle(): boolean { return this._hideToggle; }\n  set hideToggle(show: boolean) { this._hideToggle = coerceBooleanProperty(show); }\n  private _hideToggle: boolean = false;\n\n  /**\n   * Display mode used for all expansion panels in the accordion. Currently two display\n   * modes exist:\n   *  default - a gutter-like spacing is placed around any expanded panel, placing the expanded\n   *     panel at a different elevation from the rest of the accordion.\n   *  flat - no spacing is placed around expanded panels, showing all panels at the same\n   *     elevation.\n   */\n  @Input() displayMode: MatAccordionDisplayMode = 'default';\n\n  ngAfterContentInit() {\n    this._keyManager = new FocusKeyManager(this._headers).withWrap();\n  }\n\n  /** Handles keyboard events coming in from the panel headers. */\n  _handleHeaderKeydown(event: KeyboardEvent) {\n    const {keyCode} = event;\n    const manager = this._keyManager;\n\n    if (keyCode === HOME) {\n      manager.setFirstItemActive();\n      event.preventDefault();\n    } else if (keyCode === END) {\n      manager.setLastItemActive();\n      event.preventDefault();\n    } else {\n      this._keyManager.onKeydown(event);\n    }\n  }\n\n  _handleHeaderFocus(header: MatExpansionPanelHeader) {\n    this._keyManager.updateActiveItem(header);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CdkAccordionModule} from '@angular/cdk/accordion';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatAccordion} from './accordion';\nimport {MatExpansionPanel, MatExpansionPanelActionRow} from './expansion-panel';\nimport {MatExpansionPanelContent} from './expansion-panel-content';\nimport {\n  MatExpansionPanelDescription,\n  MatExpansionPanelHeader,\n  MatExpansionPanelTitle,\n} from './expansion-panel-header';\n\n\n@NgModule({\n  imports: [CommonModule, CdkAccordionModule, PortalModule],\n  exports: [\n    MatAccordion,\n    MatExpansionPanel,\n    MatExpansionPanelActionRow,\n    MatExpansionPanelHeader,\n    MatExpansionPanelTitle,\n    MatExpansionPanelDescription,\n    MatExpansionPanelContent,\n  ],\n  declarations: [\n    MatAccordion,\n    MatExpansionPanel,\n    MatExpansionPanelActionRow,\n    MatExpansionPanelHeader,\n    MatExpansionPanelTitle,\n    MatExpansionPanelDescription,\n    MatExpansionPanelContent,\n  ],\n})\nexport class MatExpansionModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ViewEncapsulation,\n  ElementRef,\n  Input,\n  ContentChildren,\n  QueryList,\n  AfterContentInit,\n  Directive,\n  ChangeDetectionStrategy,\n} from '@angular/core';\nimport {MatLine, MatLineSetter} from '@angular/material/core';\nimport {coerceNumberProperty} from '@angular/cdk/coercion';\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-grid-tile',\n  exportAs: 'matGridTile',\n  host: {\n    'class': 'mat-grid-tile',\n  },\n  templateUrl: 'grid-tile.html',\n  styleUrls: ['grid-list.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatGridTile {\n  _rowspan: number = 1;\n  _colspan: number = 1;\n\n  constructor(private _element: ElementRef<HTMLElement>) {}\n\n  /** Amount of rows that the grid tile takes up. */\n  @Input()\n  get rowspan(): number { return this._rowspan; }\n  set rowspan(value: number) { this._rowspan = Math.round(coerceNumberProperty(value)); }\n\n  /** Amount of columns that the grid tile takes up. */\n  @Input()\n  get colspan(): number { return this._colspan; }\n  set colspan(value: number) { this._colspan = Math.round(coerceNumberProperty(value)); }\n\n  /**\n   * Sets the style of the grid-tile element.  Needs to be set manually to avoid\n   * \"Changed after checked\" errors that would occur with HostBinding.\n   */\n  _setStyle(property: string, value: any): void {\n    this._element.nativeElement.style[property] = value;\n  }\n}\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-grid-tile-header, mat-grid-tile-footer',\n  templateUrl: 'grid-tile-text.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatGridTileText implements AfterContentInit {\n  /**\n   *  Helper that watches the number of lines in a text area and sets\n   * a class on the host element that matches the line count.\n   */\n  _lineSetter: MatLineSetter;\n  @ContentChildren(MatLine) _lines: QueryList<MatLine>;\n\n  constructor(private _element: ElementRef<HTMLElement>) {}\n\n  ngAfterContentInit() {\n    this._lineSetter = new MatLineSetter(this._lines, this._element);\n  }\n}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-grid-avatar], [matGridAvatar]',\n  host: {'class': 'mat-grid-avatar'}\n})\nexport class MatGridAvatarCssMatStyler {}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-grid-tile-header',\n  host: {'class': 'mat-grid-tile-header'}\n})\nexport class MatGridTileHeaderCssMatStyler {}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-grid-tile-footer',\n  host: {'class': 'mat-grid-tile-footer'}\n})\nexport class MatGridTileFooterCssMatStyler {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {QueryList} from '@angular/core';\nimport {MatGridTile} from './grid-tile';\n\n/**\n * Class for determining, from a list of tiles, the (row, col) position of each of those tiles\n * in the grid. This is necessary (rather than just rendering the tiles in normal document flow)\n * because the tiles can have a rowspan.\n *\n * The positioning algorithm greedily places each tile as soon as it encounters a gap in the grid\n * large enough to accommodate it so that the tiles still render in the same order in which they\n * are given.\n *\n * The basis of the algorithm is the use of an array to track the already placed tiles. Each\n * element of the array corresponds to a column, and the value indicates how many cells in that\n * column are already occupied; zero indicates an empty cell. Moving \"down\" to the next row\n * decrements each value in the tracking array (indicating that the column is one cell closer to\n * being free).\n *\n * @docs-private\n */\nexport class TileCoordinator {\n  /** Tracking array (see class description). */\n  tracker: number[];\n\n  /** Index at which the search for the next gap will start. */\n  columnIndex: number = 0;\n\n  /** The current row index. */\n  rowIndex: number = 0;\n\n  /** Gets the total number of rows occupied by tiles */\n  get rowCount(): number { return this.rowIndex + 1; }\n\n  /**\n   * Gets the total span of rows occupied by tiles.\n   * Ex: A list with 1 row that contains a tile with rowspan 2 will have a total rowspan of 2.\n   */\n  get rowspan() {\n    let lastRowMax = Math.max(...this.tracker);\n    // if any of the tiles has a rowspan that pushes it beyond the total row count,\n    // add the difference to the rowcount\n    return lastRowMax > 1 ? this.rowCount + lastRowMax - 1 : this.rowCount;\n  }\n\n  /** The computed (row, col) position of each tile (the output). */\n  positions: TilePosition[];\n\n  constructor(numColumns: number, tiles: QueryList<MatGridTile>) {\n    this.tracker = new Array(numColumns);\n    this.tracker.fill(0, 0, this.tracker.length);\n\n    this.positions = tiles.map(tile => this._trackTile(tile));\n  }\n\n  /** Calculates the row and col position of a tile. */\n  private _trackTile(tile: MatGridTile): TilePosition {\n    // Find a gap large enough for this tile.\n    let gapStartIndex = this._findMatchingGap(tile.colspan);\n\n    // Place tile in the resulting gap.\n    this._markTilePosition(gapStartIndex, tile);\n\n    // The next time we look for a gap, the search will start at columnIndex, which should be\n    // immediately after the tile that has just been placed.\n    this.columnIndex = gapStartIndex + tile.colspan;\n\n    return new TilePosition(this.rowIndex, gapStartIndex);\n  }\n\n  /** Finds the next available space large enough to fit the tile. */\n  private _findMatchingGap(tileCols: number): number {\n    if (tileCols > this.tracker.length) {\n      throw Error(`mat-grid-list: tile with colspan ${tileCols} is wider than ` +\n                      `grid with cols=\"${this.tracker.length}\".`);\n    }\n\n    // Start index is inclusive, end index is exclusive.\n    let gapStartIndex = -1;\n    let gapEndIndex = -1;\n\n    // Look for a gap large enough to fit the given tile. Empty spaces are marked with a zero.\n    do {\n      // If we've reached the end of the row, go to the next row.\n      if (this.columnIndex + tileCols > this.tracker.length) {\n        this._nextRow();\n        continue;\n      }\n\n      gapStartIndex = this.tracker.indexOf(0, this.columnIndex);\n\n      // If there are no more empty spaces in this row at all, move on to the next row.\n      if (gapStartIndex == -1) {\n        this._nextRow();\n        continue;\n      }\n\n      gapEndIndex = this._findGapEndIndex(gapStartIndex);\n\n      // If a gap large enough isn't found, we want to start looking immediately after the current\n      // gap on the next iteration.\n      this.columnIndex = gapStartIndex + 1;\n\n      // Continue iterating until we find a gap wide enough for this tile.\n    } while (gapEndIndex - gapStartIndex < tileCols);\n\n    // If we still didn't manage to find a gap, ensure that the index is\n    // at least zero so the tile doesn't get pulled out of the grid.\n    return Math.max(gapStartIndex, 0);\n  }\n\n  /** Move \"down\" to the next row. */\n  private _nextRow(): void {\n    this.columnIndex = 0;\n    this.rowIndex++;\n\n    // Decrement all spaces by one to reflect moving down one row.\n    for (let i = 0; i < this.tracker.length; i++) {\n      this.tracker[i] = Math.max(0, this.tracker[i] - 1);\n    }\n  }\n\n  /**\n   * Finds the end index (exclusive) of a gap given the index from which to start looking.\n   * The gap ends when a non-zero value is found.\n   */\n  private _findGapEndIndex(gapStartIndex: number): number {\n    for (let i = gapStartIndex + 1; i < this.tracker.length; i++) {\n      if (this.tracker[i] != 0) {\n        return i;\n      }\n    }\n\n    // The gap ends with the end of the row.\n    return this.tracker.length;\n  }\n\n  /** Update the tile tracker to account for the given tile in the given space. */\n  private _markTilePosition(start: number, tile: MatGridTile): void {\n    for (let i = 0; i < tile.colspan; i++) {\n      this.tracker[start + i] = tile.rowspan;\n    }\n  }\n}\n\n/**\n * Simple data structure for tile position (row, col).\n * @docs-private\n */\nexport class TilePosition {\n  constructor(public row: number, public col: number) {}\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {MatGridList} from './grid-list';\nimport {MatGridTile} from './grid-tile';\nimport {TileCoordinator} from './tile-coordinator';\n\n/**\n * Sets the style properties for an individual tile, given the position calculated by the\n * Tile Coordinator.\n * @docs-private\n */\nexport abstract class TileStyler {\n  _gutterSize: string;\n  _rows: number = 0;\n  _rowspan: number = 0;\n  _cols: number;\n  _direction: string;\n\n  /**\n   * Adds grid-list layout info once it is available. Cannot be processed in the constructor\n   * because these properties haven't been calculated by that point.\n   *\n   * @param gutterSize Size of the grid's gutter.\n   * @param tracker Instance of the TileCoordinator.\n   * @param cols Amount of columns in the grid.\n   * @param direction Layout direction of the grid.\n   */\n  init(gutterSize: string, tracker: TileCoordinator, cols: number, direction: string): void {\n    this._gutterSize = normalizeUnits(gutterSize);\n    this._rows = tracker.rowCount;\n    this._rowspan = tracker.rowspan;\n    this._cols = cols;\n    this._direction = direction;\n  }\n\n  /**\n   * Computes the amount of space a single 1x1 tile would take up (width or height).\n   * Used as a basis for other calculations.\n   * @param sizePercent Percent of the total grid-list space that one 1x1 tile would take up.\n   * @param gutterFraction Fraction of the gutter size taken up by one 1x1 tile.\n   * @return The size of a 1x1 tile as an expression that can be evaluated via CSS calc().\n   */\n  getBaseTileSize(sizePercent: number, gutterFraction: number): string {\n    // Take the base size percent (as would be if evenly dividing the size between cells),\n    // and then subtracting the size of one gutter. However, since there are no gutters on the\n    // edges, each tile only uses a fraction (gutterShare = numGutters / numCells) of the gutter\n    // size. (Imagine having one gutter per tile, and then breaking up the extra gutter on the\n    // edge evenly among the cells).\n    return `(${sizePercent}% - (${this._gutterSize} * ${gutterFraction}))`;\n  }\n\n\n  /**\n   * Gets The horizontal or vertical position of a tile, e.g., the 'top' or 'left' property value.\n   * @param offset Number of tiles that have already been rendered in the row/column.\n   * @param baseSize Base size of a 1x1 tile (as computed in getBaseTileSize).\n   * @return Position of the tile as a CSS calc() expression.\n   */\n  getTilePosition(baseSize: string, offset: number): string {\n    // The position comes the size of a 1x1 tile plus gutter for each previous tile in the\n    // row/column (offset).\n    return offset === 0 ? '0' : calc(`(${baseSize} + ${this._gutterSize}) * ${offset}`);\n  }\n\n\n  /**\n   * Gets the actual size of a tile, e.g., width or height, taking rowspan or colspan into account.\n   * @param baseSize Base size of a 1x1 tile (as computed in getBaseTileSize).\n   * @param span The tile's rowspan or colspan.\n   * @return Size of the tile as a CSS calc() expression.\n   */\n  getTileSize(baseSize: string, span: number): string {\n    return `(${baseSize} * ${span}) + (${span - 1} * ${this._gutterSize})`;\n  }\n\n\n  /**\n   * Sets the style properties to be applied to a tile for the given row and column index.\n   * @param tile Tile to which to apply the styling.\n   * @param rowIndex Index of the tile's row.\n   * @param colIndex Index of the tile's column.\n   */\n  setStyle(tile: MatGridTile, rowIndex: number, colIndex: number): void {\n    // Percent of the available horizontal space that one column takes up.\n    let percentWidthPerTile = 100 / this._cols;\n\n    // Fraction of the vertical gutter size that each column takes up.\n    // For example, if there are 5 columns, each column uses 4/5 = 0.8 times the gutter width.\n    let gutterWidthFractionPerTile = (this._cols - 1) / this._cols;\n\n    this.setColStyles(tile, colIndex, percentWidthPerTile, gutterWidthFractionPerTile);\n    this.setRowStyles(tile, rowIndex, percentWidthPerTile, gutterWidthFractionPerTile);\n  }\n\n  /** Sets the horizontal placement of the tile in the list. */\n  setColStyles(tile: MatGridTile, colIndex: number, percentWidth: number,\n               gutterWidth: number) {\n    // Base horizontal size of a column.\n    let baseTileWidth = this.getBaseTileSize(percentWidth, gutterWidth);\n\n    // The width and horizontal position of each tile is always calculated the same way, but the\n    // height and vertical position depends on the rowMode.\n    let side = this._direction === 'rtl' ? 'right' : 'left';\n    tile._setStyle(side, this.getTilePosition(baseTileWidth, colIndex));\n    tile._setStyle('width', calc(this.getTileSize(baseTileWidth, tile.colspan)));\n  }\n\n  /**\n   * Calculates the total size taken up by gutters across one axis of a list.\n   */\n  getGutterSpan(): string {\n    return `${this._gutterSize} * (${this._rowspan} - 1)`;\n  }\n\n  /**\n   * Calculates the total size taken up by tiles across one axis of a list.\n   * @param tileHeight Height of the tile.\n   */\n  getTileSpan(tileHeight: string): string {\n    return `${this._rowspan} * ${this.getTileSize(tileHeight, 1)}`;\n  }\n\n  /**\n   * Sets the vertical placement of the tile in the list.\n   * This method will be implemented by each type of TileStyler.\n   * @docs-private\n   */\n  abstract setRowStyles(tile: MatGridTile, rowIndex: number, percentWidth: number,\n                        gutterWidth: number);\n\n  /**\n   * Calculates the computed height and returns the correct style property to set.\n   * This method can be implemented by each type of TileStyler.\n   * @docs-private\n   */\n  getComputedHeight(): [string, string] | null { return null; }\n\n  /**\n   * Called when the tile styler is swapped out with a different one. To be used for cleanup.\n   * @param list Grid list that the styler was attached to.\n   * @docs-private\n   */\n  abstract reset(list: MatGridList);\n}\n\n\n/**\n * This type of styler is instantiated when the user passes in a fixed row height.\n * Example `<mat-grid-list cols=\"3\" rowHeight=\"100px\">`\n * @docs-private\n */\nexport class FixedTileStyler extends TileStyler {\n\n  constructor(public fixedRowHeight: string) { super(); }\n\n  init(gutterSize: string, tracker: TileCoordinator, cols: number, direction: string) {\n    super.init(gutterSize, tracker, cols, direction);\n    this.fixedRowHeight = normalizeUnits(this.fixedRowHeight);\n  }\n\n  setRowStyles(tile: MatGridTile, rowIndex: number): void {\n    tile._setStyle('top', this.getTilePosition(this.fixedRowHeight, rowIndex));\n    tile._setStyle('height', calc(this.getTileSize(this.fixedRowHeight, tile.rowspan)));\n  }\n\n  getComputedHeight(): [string, string] {\n    return [\n      'height', calc(`${this.getTileSpan(this.fixedRowHeight)} + ${this.getGutterSpan()}`)\n    ];\n  }\n\n  reset(list: MatGridList) {\n    list._setListStyle(['height', null]);\n\n    list._tiles.forEach(tile => {\n      tile._setStyle('top', null);\n      tile._setStyle('height', null);\n    });\n  }\n}\n\n\n/**\n * This type of styler is instantiated when the user passes in a width:height ratio\n * for the row height.  Example `<mat-grid-list cols=\"3\" rowHeight=\"3:1\">`\n * @docs-private\n */\nexport class RatioTileStyler extends TileStyler {\n\n  /** Ratio width:height given by user to determine row height. */\n  rowHeightRatio: number;\n  baseTileHeight: string;\n\n  constructor(value: string) {\n    super();\n    this._parseRatio(value);\n  }\n\n  setRowStyles(tile: MatGridTile, rowIndex: number, percentWidth: number,\n               gutterWidth: number): void {\n    let percentHeightPerTile = percentWidth / this.rowHeightRatio;\n    this.baseTileHeight = this.getBaseTileSize(percentHeightPerTile, gutterWidth);\n\n    // Use padding-top and margin-top to maintain the given aspect ratio, as\n    // a percentage-based value for these properties is applied versus the *width* of the\n    // containing block. See http://www.w3.org/TR/CSS2/box.html#margin-properties\n    tile._setStyle('marginTop', this.getTilePosition(this.baseTileHeight, rowIndex));\n    tile._setStyle('paddingTop', calc(this.getTileSize(this.baseTileHeight, tile.rowspan)));\n  }\n\n  getComputedHeight(): [string, string] {\n    return [\n      'paddingBottom', calc(`${this.getTileSpan(this.baseTileHeight)} + ${this.getGutterSpan()}`)\n    ];\n  }\n\n  reset(list: MatGridList) {\n    list._setListStyle(['paddingBottom', null]);\n\n    list._tiles.forEach(tile => {\n      tile._setStyle('marginTop', null);\n      tile._setStyle('paddingTop', null);\n    });\n  }\n\n  private _parseRatio(value: string): void {\n    const ratioParts = value.split(':');\n\n    if (ratioParts.length !== 2) {\n      throw Error(`mat-grid-list: invalid ratio given for row-height: \"${value}\"`);\n    }\n\n    this.rowHeightRatio = parseFloat(ratioParts[0]) / parseFloat(ratioParts[1]);\n  }\n}\n\n/**\n * This type of styler is instantiated when the user selects a \"fit\" row height mode.\n * In other words, the row height will reflect the total height of the container divided\n * by the number of rows.  Example `<mat-grid-list cols=\"3\" rowHeight=\"fit\">`\n *\n * @docs-private\n */\nexport class FitTileStyler extends TileStyler {\n\n  setRowStyles(tile: MatGridTile, rowIndex: number): void {\n    // Percent of the available vertical space that one row takes up.\n    let percentHeightPerTile = 100 / this._rowspan;\n\n    // Fraction of the horizontal gutter size that each column takes up.\n    let gutterHeightPerTile = (this._rows - 1) / this._rows;\n\n    // Base vertical size of a column.\n    let baseTileHeight = this.getBaseTileSize(percentHeightPerTile, gutterHeightPerTile);\n\n    tile._setStyle('top', this.getTilePosition(baseTileHeight, rowIndex));\n    tile._setStyle('height', calc(this.getTileSize(baseTileHeight, tile.rowspan)));\n  }\n\n  reset(list: MatGridList) {\n    list._tiles.forEach(tile => {\n      tile._setStyle('top', null);\n      tile._setStyle('height', null);\n    });\n  }\n}\n\n\n/** Wraps a CSS string in a calc function */\nfunction calc(exp: string): string { return `calc(${exp})`; }\n\n\n/** Appends pixels to a CSS string if no units are given. */\nfunction normalizeUnits(value: string): string {\n  return (value.match(/px|em|rem/)) ? value : value + 'px';\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ViewEncapsulation,\n  AfterContentChecked,\n  OnInit,\n  Input,\n  ContentChildren,\n  QueryList,\n  ElementRef,\n  Optional,\n  ChangeDetectionStrategy,\n} from '@angular/core';\nimport {MatGridTile} from './grid-tile';\nimport {TileCoordinator} from './tile-coordinator';\nimport {TileStyler, FitTileStyler, RatioTileStyler, FixedTileStyler} from './tile-styler';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceNumberProperty} from '@angular/cdk/coercion';\n\n\n// TODO(kara): Conditional (responsive) column count / row size.\n// TODO(kara): Re-layout on window resize / media change (debounced).\n// TODO(kara): gridTileHeader and gridTileFooter.\n\nconst MAT_FIT_MODE = 'fit';\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-grid-list',\n  exportAs: 'matGridList',\n  templateUrl: 'grid-list.html',\n  styleUrls: ['grid-list.css'],\n  host: {\n    'class': 'mat-grid-list',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatGridList implements OnInit, AfterContentChecked {\n  /** Number of columns being rendered. */\n  private _cols: number;\n\n  /**\n   * Row height value passed in by user. This can be one of three types:\n   * - Number value (ex: \"100px\"):  sets a fixed row height to that value\n   * - Ratio value (ex: \"4:3\"): sets the row height based on width:height ratio\n   * - \"Fit\" mode (ex: \"fit\"): sets the row height to total height divided by number of rows\n   */\n  private _rowHeight: string;\n\n  /** The amount of space between tiles. This will be something like '5px' or '2em'. */\n  private _gutter: string = '1px';\n\n  /** Sets position and size styles for a tile */\n  private _tileStyler: TileStyler;\n\n  /** Query list of tiles that are being rendered. */\n  @ContentChildren(MatGridTile, {descendants: true}) _tiles: QueryList<MatGridTile>;\n\n  constructor(private _element: ElementRef<HTMLElement>,\n              @Optional() private _dir: Directionality) {}\n\n  /** Amount of columns in the grid list. */\n  @Input()\n  get cols(): number { return this._cols; }\n  set cols(value: number) {\n    this._cols = Math.max(1, Math.round(coerceNumberProperty(value)));\n  }\n\n  /** Size of the grid list's gutter in pixels. */\n  @Input()\n  get gutterSize(): string { return this._gutter; }\n  set gutterSize(value: string) { this._gutter = `${value || ''}`; }\n\n  /** Set internal representation of row height from the user-provided value. */\n  @Input()\n  set rowHeight(value: string | number) {\n    const newValue = `${value || ''}`;\n\n    if (newValue !== this._rowHeight) {\n      this._rowHeight = newValue;\n      this._setTileStyler(this._rowHeight);\n    }\n  }\n\n  ngOnInit() {\n    this._checkCols();\n    this._checkRowHeight();\n  }\n\n  /**\n   * The layout calculation is fairly cheap if nothing changes, so there's little cost\n   * to run it frequently.\n   */\n  ngAfterContentChecked() {\n    this._layoutTiles();\n  }\n\n  /** Throw a friendly error if cols property is missing */\n  private _checkCols() {\n    if (!this.cols) {\n      throw Error(`mat-grid-list: must pass in number of columns. ` +\n                  `Example: <mat-grid-list cols=\"3\">`);\n    }\n  }\n\n  /** Default to equal width:height if rowHeight property is missing */\n  private _checkRowHeight(): void {\n    if (!this._rowHeight) {\n      this._setTileStyler('1:1');\n    }\n  }\n\n  /** Creates correct Tile Styler subtype based on rowHeight passed in by user */\n  private _setTileStyler(rowHeight: string): void {\n    if (this._tileStyler) {\n      this._tileStyler.reset(this);\n    }\n\n    if (rowHeight === MAT_FIT_MODE) {\n      this._tileStyler = new FitTileStyler();\n    } else if (rowHeight && rowHeight.indexOf(':') > -1) {\n      this._tileStyler = new RatioTileStyler(rowHeight);\n    } else {\n      this._tileStyler = new FixedTileStyler(rowHeight);\n    }\n  }\n\n  /** Computes and applies the size and position for all children grid tiles. */\n  private _layoutTiles(): void {\n    const tracker = new TileCoordinator(this.cols, this._tiles);\n    const direction = this._dir ? this._dir.value : 'ltr';\n    this._tileStyler.init(this.gutterSize, tracker, this.cols, direction);\n\n    this._tiles.forEach((tile, index) => {\n      const pos = tracker.positions[index];\n      this._tileStyler.setStyle(tile, pos.row, pos.col);\n    });\n\n    this._setListStyle(this._tileStyler.getComputedHeight());\n  }\n\n  /** Sets style on the main grid-list element, given the style name and value. */\n  _setListStyle(style: [string, string | null] | null): void {\n    if (style) {\n      this._element.nativeElement.style[style[0]] = style[1];\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatLineModule, MatCommonModule} from '@angular/material/core';\nimport {\n  MatGridTile, MatGridTileText, MatGridTileFooterCssMatStyler,\n  MatGridTileHeaderCssMatStyler, MatGridAvatarCssMatStyler\n} from './grid-tile';\nimport {MatGridList} from './grid-list';\n\n\n@NgModule({\n  imports: [MatLineModule, MatCommonModule],\n  exports: [\n    MatGridList,\n    MatGridTile,\n    MatGridTileText,\n    MatLineModule,\n    MatCommonModule,\n    MatGridTileHeaderCssMatStyler,\n    MatGridTileFooterCssMatStyler,\n    MatGridAvatarCssMatStyler\n  ],\n  declarations: [\n    MatGridList,\n    MatGridTile,\n    MatGridTileText,\n    MatGridTileHeaderCssMatStyler,\n    MatGridTileFooterCssMatStyler,\n    MatGridAvatarCssMatStyler\n  ],\n})\nexport class MatGridListModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {DOCUMENT} from '@angular/common';\nimport {HttpClient, HttpErrorResponse} from '@angular/common/http';\nimport {\n  Inject,\n  Injectable,\n  InjectionToken,\n  Optional,\n  SecurityContext,\n  SkipSelf,\n} from '@angular/core';\nimport {DomSanitizer, SafeResourceUrl, SafeHtml} from '@angular/platform-browser';\nimport {forkJoin, Observable, of as observableOf, throwError as observableThrow} from 'rxjs';\nimport {catchError, finalize, map, share, tap} from 'rxjs/operators';\n\n\n/**\n * Returns an exception to be thrown in the case when attempting to\n * load an icon with a name that cannot be found.\n * @docs-private\n */\nexport function getMatIconNameNotFoundError(iconName: string): Error {\n  return Error(`Unable to find icon with the name \"${iconName}\"`);\n}\n\n\n/**\n * Returns an exception to be thrown when the consumer attempts to use\n * `<mat-icon>` without including @angular/http.\n * @docs-private\n */\nexport function getMatIconNoHttpProviderError(): Error {\n  return Error('Could not find HttpClient provider for use with Angular Material icons. ' +\n               'Please include the HttpClientModule from @angular/common/http in your ' +\n               'app imports.');\n}\n\n\n/**\n * Returns an exception to be thrown when a URL couldn't be sanitized.\n * @param url URL that was attempted to be sanitized.\n * @docs-private\n */\nexport function getMatIconFailedToSanitizeUrlError(url: SafeResourceUrl): Error {\n  return Error(`The URL provided to MatIconRegistry was not trusted as a resource URL ` +\n               `via Angular's DomSanitizer. Attempted URL was \"${url}\".`);\n}\n\n/**\n * Returns an exception to be thrown when a HTML string couldn't be sanitized.\n * @param literal HTML that was attempted to be sanitized.\n * @docs-private\n */\nexport function getMatIconFailedToSanitizeLiteralError(literal: SafeHtml): Error {\n  return Error(`The literal provided to MatIconRegistry was not trusted as safe HTML by ` +\n               `Angular's DomSanitizer. Attempted literal was \"${literal}\".`);\n}\n\n\n/**\n * Configuration for an icon, including the URL and possibly the cached SVG element.\n * @docs-private\n */\nclass SvgIconConfig {\n  url: SafeResourceUrl | null;\n  svgElement: SVGElement | null;\n\n  constructor(url: SafeResourceUrl);\n  constructor(svgElement: SVGElement);\n  constructor(data: SafeResourceUrl | SVGElement) {\n    // Note that we can't use `instanceof SVGElement` here,\n    // because it'll break during server-side rendering.\n    if (!!(data as any).nodeName) {\n      this.svgElement = data as SVGElement;\n    } else {\n      this.url = data as SafeResourceUrl;\n    }\n  }\n}\n\n/**\n * Service to register and display icons used by the `<mat-icon>` component.\n * - Registers icon URLs by namespace and name.\n * - Registers icon set URLs by namespace.\n * - Registers aliases for CSS classes, for use with icon fonts.\n * - Loads icons from URLs and extracts individual icons from icon sets.\n */\n@Injectable({providedIn: 'root'})\nexport class MatIconRegistry {\n  private _document: Document;\n\n  /**\n   * URLs and cached SVG elements for individual icons. Keys are of the format \"[namespace]:[icon]\".\n   */\n  private _svgIconConfigs = new Map<string, SvgIconConfig>();\n\n  /**\n   * SvgIconConfig objects and cached SVG elements for icon sets, keyed by namespace.\n   * Multiple icon sets can be registered under the same namespace.\n   */\n  private _iconSetConfigs = new Map<string, SvgIconConfig[]>();\n\n  /** Cache for icons loaded by direct URLs. */\n  private _cachedIconsByUrl = new Map<string, SVGElement>();\n\n  /** In-progress icon fetches. Used to coalesce multiple requests to the same URL. */\n  private _inProgressUrlFetches = new Map<string, Observable<string>>();\n\n  /** Map from font identifiers to their CSS class names. Used for icon fonts. */\n  private _fontCssClassesByAlias = new Map<string, string>();\n\n  /**\n   * The CSS class to apply when an `<mat-icon>` component has no icon name, url, or font specified.\n   * The default 'material-icons' value assumes that the material icon font has been loaded as\n   * described at http://google.github.io/material-design-icons/#icon-font-for-the-web\n   */\n  private _defaultFontSetClass = 'material-icons';\n\n  constructor(\n    @Optional() private _httpClient: HttpClient,\n    private _sanitizer: DomSanitizer,\n    @Optional() @Inject(DOCUMENT) document: any) {\n      this._document = document;\n    }\n\n  /**\n   * Registers an icon by URL in the default namespace.\n   * @param iconName Name under which the icon should be registered.\n   * @param url\n   */\n  addSvgIcon(iconName: string, url: SafeResourceUrl): this {\n    return this.addSvgIconInNamespace('', iconName, url);\n  }\n\n  /**\n   * Registers an icon using an HTML string in the default namespace.\n   * @param iconName Name under which the icon should be registered.\n   * @param literal SVG source of the icon.\n   */\n  addSvgIconLiteral(iconName: string, literal: SafeHtml): this {\n    return this.addSvgIconLiteralInNamespace('', iconName, literal);\n  }\n\n  /**\n   * Registers an icon by URL in the specified namespace.\n   * @param namespace Namespace in which the icon should be registered.\n   * @param iconName Name under which the icon should be registered.\n   * @param url\n   */\n  addSvgIconInNamespace(namespace: string, iconName: string, url: SafeResourceUrl): this {\n    return this._addSvgIconConfig(namespace, iconName, new SvgIconConfig(url));\n  }\n\n  /**\n   * Registers an icon using an HTML string in the specified namespace.\n   * @param namespace Namespace in which the icon should be registered.\n   * @param iconName Name under which the icon should be registered.\n   * @param literal SVG source of the icon.\n   */\n  addSvgIconLiteralInNamespace(namespace: string, iconName: string, literal: SafeHtml): this {\n    const sanitizedLiteral = this._sanitizer.sanitize(SecurityContext.HTML, literal);\n\n    if (!sanitizedLiteral) {\n      throw getMatIconFailedToSanitizeLiteralError(literal);\n    }\n\n    const svgElement = this._createSvgElementForSingleIcon(sanitizedLiteral);\n    return this._addSvgIconConfig(namespace, iconName, new SvgIconConfig(svgElement));\n  }\n\n  /**\n   * Registers an icon set by URL in the default namespace.\n   * @param url\n   */\n  addSvgIconSet(url: SafeResourceUrl): this {\n    return this.addSvgIconSetInNamespace('', url);\n  }\n\n  /**\n   * Registers an icon set using an HTML string in the default namespace.\n   * @param literal SVG source of the icon set.\n   */\n  addSvgIconSetLiteral(literal: SafeHtml): this {\n    return this.addSvgIconSetLiteralInNamespace('', literal);\n  }\n\n  /**\n   * Registers an icon set by URL in the specified namespace.\n   * @param namespace Namespace in which to register the icon set.\n   * @param url\n   */\n  addSvgIconSetInNamespace(namespace: string, url: SafeResourceUrl): this {\n    return this._addSvgIconSetConfig(namespace, new SvgIconConfig(url));\n  }\n\n  /**\n   * Registers an icon set using an HTML string in the specified namespace.\n   * @param namespace Namespace in which to register the icon set.\n   * @param literal SVG source of the icon set.\n   */\n  addSvgIconSetLiteralInNamespace(namespace: string, literal: SafeHtml): this {\n    const sanitizedLiteral = this._sanitizer.sanitize(SecurityContext.HTML, literal);\n\n    if (!sanitizedLiteral) {\n      throw getMatIconFailedToSanitizeLiteralError(literal);\n    }\n\n    const svgElement = this._svgElementFromString(sanitizedLiteral);\n    return this._addSvgIconSetConfig(namespace, new SvgIconConfig(svgElement));\n  }\n\n  /**\n   * Defines an alias for a CSS class name to be used for icon fonts. Creating an matIcon\n   * component with the alias as the fontSet input will cause the class name to be applied\n   * to the `<mat-icon>` element.\n   *\n   * @param alias Alias for the font.\n   * @param className Class name override to be used instead of the alias.\n   */\n  registerFontClassAlias(alias: string, className: string = alias): this {\n    this._fontCssClassesByAlias.set(alias, className);\n    return this;\n  }\n\n  /**\n   * Returns the CSS class name associated with the alias by a previous call to\n   * registerFontClassAlias. If no CSS class has been associated, returns the alias unmodified.\n   */\n  classNameForFontAlias(alias: string): string {\n    return this._fontCssClassesByAlias.get(alias) || alias;\n  }\n\n  /**\n   * Sets the CSS class name to be used for icon fonts when an `<mat-icon>` component does not\n   * have a fontSet input value, and is not loading an icon by name or URL.\n   *\n   * @param className\n   */\n  setDefaultFontSetClass(className: string): this {\n    this._defaultFontSetClass = className;\n    return this;\n  }\n\n  /**\n   * Returns the CSS class name to be used for icon fonts when an `<mat-icon>` component does not\n   * have a fontSet input value, and is not loading an icon by name or URL.\n   */\n  getDefaultFontSetClass(): string {\n    return this._defaultFontSetClass;\n  }\n\n  /**\n   * Returns an Observable that produces the icon (as an `<svg>` DOM element) from the given URL.\n   * The response from the URL may be cached so this will not always cause an HTTP request, but\n   * the produced element will always be a new copy of the originally fetched icon. (That is,\n   * it will not contain any modifications made to elements previously returned).\n   *\n   * @param safeUrl URL from which to fetch the SVG icon.\n   */\n  getSvgIconFromUrl(safeUrl: SafeResourceUrl): Observable<SVGElement> {\n    const url = this._sanitizer.sanitize(SecurityContext.RESOURCE_URL, safeUrl);\n\n    if (!url) {\n      throw getMatIconFailedToSanitizeUrlError(safeUrl);\n    }\n\n    const cachedIcon = this._cachedIconsByUrl.get(url);\n\n    if (cachedIcon) {\n      return observableOf(cloneSvg(cachedIcon));\n    }\n\n    return this._loadSvgIconFromConfig(new SvgIconConfig(safeUrl)).pipe(\n      tap(svg => this._cachedIconsByUrl.set(url!, svg)),\n      map(svg => cloneSvg(svg)),\n    );\n  }\n\n  /**\n   * Returns an Observable that produces the icon (as an `<svg>` DOM element) with the given name\n   * and namespace. The icon must have been previously registered with addIcon or addIconSet;\n   * if not, the Observable will throw an error.\n   *\n   * @param name Name of the icon to be retrieved.\n   * @param namespace Namespace in which to look for the icon.\n   */\n  getNamedSvgIcon(name: string, namespace: string = ''): Observable<SVGElement> {\n    // Return (copy of) cached icon if possible.\n    const key = iconKey(namespace, name);\n    const config = this._svgIconConfigs.get(key);\n\n    if (config) {\n      return this._getSvgFromConfig(config);\n    }\n\n    // See if we have any icon sets registered for the namespace.\n    const iconSetConfigs = this._iconSetConfigs.get(namespace);\n\n    if (iconSetConfigs) {\n      return this._getSvgFromIconSetConfigs(name, iconSetConfigs);\n    }\n\n    return observableThrow(getMatIconNameNotFoundError(key));\n  }\n\n  /**\n   * Returns the cached icon for a SvgIconConfig if available, or fetches it from its URL if not.\n   */\n  private _getSvgFromConfig(config: SvgIconConfig): Observable<SVGElement> {\n    if (config.svgElement) {\n      // We already have the SVG element for this icon, return a copy.\n      return observableOf(cloneSvg(config.svgElement));\n    } else {\n      // Fetch the icon from the config's URL, cache it, and return a copy.\n      return this._loadSvgIconFromConfig(config).pipe(\n        tap(svg => config.svgElement = svg),\n        map(svg => cloneSvg(svg)),\n      );\n    }\n  }\n\n  /**\n   * Attempts to find an icon with the specified name in any of the SVG icon sets.\n   * First searches the available cached icons for a nested element with a matching name, and\n   * if found copies the element to a new `<svg>` element. If not found, fetches all icon sets\n   * that have not been cached, and searches again after all fetches are completed.\n   * The returned Observable produces the SVG element if possible, and throws\n   * an error if no icon with the specified name can be found.\n   */\n  private _getSvgFromIconSetConfigs(name: string, iconSetConfigs: SvgIconConfig[]):\n      Observable<SVGElement> {\n    // For all the icon set SVG elements we've fetched, see if any contain an icon with the\n    // requested name.\n    const namedIcon = this._extractIconWithNameFromAnySet(name, iconSetConfigs);\n\n    if (namedIcon) {\n      // We could cache namedIcon in _svgIconConfigs, but since we have to make a copy every\n      // time anyway, there's probably not much advantage compared to just always extracting\n      // it from the icon set.\n      return observableOf(namedIcon);\n    }\n\n    // Not found in any cached icon sets. If there are icon sets with URLs that we haven't\n    // fetched, fetch them now and look for iconName in the results.\n    const iconSetFetchRequests: Observable<SVGElement | null>[] = iconSetConfigs\n      .filter(iconSetConfig => !iconSetConfig.svgElement)\n      .map(iconSetConfig => {\n        return this._loadSvgIconSetFromConfig(iconSetConfig).pipe(\n          catchError((err: HttpErrorResponse): Observable<SVGElement | null> => {\n            const url = this._sanitizer.sanitize(SecurityContext.RESOURCE_URL, iconSetConfig.url);\n\n            // Swallow errors fetching individual URLs so the\n            // combined Observable won't necessarily fail.\n            console.error(`Loading icon set URL: ${url} failed: ${err.message}`);\n            return observableOf(null);\n          })\n        );\n      });\n\n    // Fetch all the icon set URLs. When the requests complete, every IconSet should have a\n    // cached SVG element (unless the request failed), and we can check again for the icon.\n    return forkJoin(iconSetFetchRequests).pipe(map(() => {\n      const foundIcon = this._extractIconWithNameFromAnySet(name, iconSetConfigs);\n\n      if (!foundIcon) {\n        throw getMatIconNameNotFoundError(name);\n      }\n\n      return foundIcon;\n    }));\n  }\n\n  /**\n   * Searches the cached SVG elements for the given icon sets for a nested icon element whose \"id\"\n   * tag matches the specified name. If found, copies the nested element to a new SVG element and\n   * returns it. Returns null if no matching element is found.\n   */\n  private _extractIconWithNameFromAnySet(iconName: string, iconSetConfigs: SvgIconConfig[]):\n      SVGElement | null {\n    // Iterate backwards, so icon sets added later have precedence.\n    for (let i = iconSetConfigs.length - 1; i >= 0; i--) {\n      const config = iconSetConfigs[i];\n      if (config.svgElement) {\n        const foundIcon = this._extractSvgIconFromSet(config.svgElement, iconName);\n        if (foundIcon) {\n          return foundIcon;\n        }\n      }\n    }\n    return null;\n  }\n\n  /**\n   * Loads the content of the icon URL specified in the SvgIconConfig and creates an SVG element\n   * from it.\n   */\n  private _loadSvgIconFromConfig(config: SvgIconConfig): Observable<SVGElement> {\n    return this._fetchUrl(config.url)\n        .pipe(map(svgText => this._createSvgElementForSingleIcon(svgText)));\n  }\n\n  /**\n   * Loads the content of the icon set URL specified in the SvgIconConfig and creates an SVG element\n   * from it.\n   */\n  private _loadSvgIconSetFromConfig(config: SvgIconConfig): Observable<SVGElement> {\n    // If the SVG for this icon set has already been parsed, do nothing.\n    if (config.svgElement) {\n      return observableOf(config.svgElement);\n    }\n\n    return this._fetchUrl(config.url).pipe(map(svgText => {\n      // It is possible that the icon set was parsed and cached by an earlier request, so parsing\n      // only needs to occur if the cache is yet unset.\n      if (!config.svgElement) {\n        config.svgElement = this._svgElementFromString(svgText);\n      }\n\n      return config.svgElement;\n    }));\n  }\n\n  /**\n   * Creates a DOM element from the given SVG string, and adds default attributes.\n   */\n  private _createSvgElementForSingleIcon(responseText: string): SVGElement {\n    const svg = this._svgElementFromString(responseText);\n    this._setSvgAttributes(svg);\n    return svg;\n  }\n\n  /**\n   * Searches the cached element of the given SvgIconConfig for a nested icon element whose \"id\"\n   * tag matches the specified name. If found, copies the nested element to a new SVG element and\n   * returns it. Returns null if no matching element is found.\n   */\n  private _extractSvgIconFromSet(iconSet: SVGElement, iconName: string): SVGElement | null {\n    const iconSource = iconSet.querySelector('#' + iconName);\n\n    if (!iconSource) {\n      return null;\n    }\n\n    // Clone the element and remove the ID to prevent multiple elements from being added\n    // to the page with the same ID.\n    const iconElement = iconSource.cloneNode(true) as Element;\n    iconElement.removeAttribute('id');\n\n    // If the icon node is itself an <svg> node, clone and return it directly. If not, set it as\n    // the content of a new <svg> node.\n    if (iconElement.nodeName.toLowerCase() === 'svg') {\n      return this._setSvgAttributes(iconElement as SVGElement);\n    }\n\n    // If the node is a <symbol>, it won't be rendered so we have to convert it into <svg>. Note\n    // that the same could be achieved by referring to it via <use href=\"#id\">, however the <use>\n    // tag is problematic on Firefox, because it needs to include the current page path.\n    if (iconElement.nodeName.toLowerCase() === 'symbol') {\n      return this._setSvgAttributes(this._toSvgElement(iconElement));\n    }\n\n    // createElement('SVG') doesn't work as expected; the DOM ends up with\n    // the correct nodes, but the SVG content doesn't render. Instead we\n    // have to create an empty SVG node using innerHTML and append its content.\n    // Elements created using DOMParser.parseFromString have the same problem.\n    // http://stackoverflow.com/questions/23003278/svg-innerhtml-in-firefox-can-not-display\n    const svg = this._svgElementFromString('<svg></svg>');\n    // Clone the node so we don't remove it from the parent icon set element.\n    svg.appendChild(iconElement);\n\n    return this._setSvgAttributes(svg);\n  }\n\n  /**\n   * Creates a DOM element from the given SVG string.\n   */\n  private _svgElementFromString(str: string): SVGElement {\n    const div = this._document.createElement('DIV');\n    div.innerHTML = str;\n    const svg = div.querySelector('svg') as SVGElement;\n\n    if (!svg) {\n      throw Error('<svg> tag not found');\n    }\n\n    return svg;\n  }\n\n  /**\n   * Converts an element into an SVG node by cloning all of its children.\n   */\n  private _toSvgElement(element: Element): SVGElement {\n    let svg = this._svgElementFromString('<svg></svg>');\n\n    for (let i = 0; i < element.childNodes.length; i++) {\n      if (element.childNodes[i].nodeType === this._document.ELEMENT_NODE) {\n        svg.appendChild(element.childNodes[i].cloneNode(true));\n      }\n    }\n\n    return svg;\n  }\n\n  /**\n   * Sets the default attributes for an SVG element to be used as an icon.\n   */\n  private _setSvgAttributes(svg: SVGElement): SVGElement {\n    svg.setAttribute('fit', '');\n    svg.setAttribute('height', '100%');\n    svg.setAttribute('width', '100%');\n    svg.setAttribute('preserveAspectRatio', 'xMidYMid meet');\n    svg.setAttribute('focusable', 'false'); // Disable IE11 default behavior to make SVGs focusable.\n    return svg;\n  }\n\n  /**\n   * Returns an Observable which produces the string contents of the given URL. Results may be\n   * cached, so future calls with the same URL may not cause another HTTP request.\n   */\n  private _fetchUrl(safeUrl: SafeResourceUrl | null): Observable<string> {\n    if (!this._httpClient) {\n      throw getMatIconNoHttpProviderError();\n    }\n\n    if (safeUrl == null) {\n      throw Error(`Cannot fetch icon from URL \"${safeUrl}\".`);\n    }\n\n    const url = this._sanitizer.sanitize(SecurityContext.RESOURCE_URL, safeUrl);\n\n    if (!url) {\n      throw getMatIconFailedToSanitizeUrlError(safeUrl);\n    }\n\n    // Store in-progress fetches to avoid sending a duplicate request for a URL when there is\n    // already a request in progress for that URL. It's necessary to call share() on the\n    // Observable returned by http.get() so that multiple subscribers don't cause multiple XHRs.\n    const inProgressFetch = this._inProgressUrlFetches.get(url);\n\n    if (inProgressFetch) {\n      return inProgressFetch;\n    }\n\n    // TODO(jelbourn): for some reason, the `finalize` operator \"loses\" the generic type on the\n    // Observable. Figure out why and fix it.\n    const req = this._httpClient.get(url, {responseType: 'text'}).pipe(\n      finalize(() => this._inProgressUrlFetches.delete(url)),\n      share(),\n    );\n\n    this._inProgressUrlFetches.set(url, req);\n    return req;\n  }\n\n  /**\n   * Registers an icon config by name in the specified namespace.\n   * @param namespace Namespace in which to register the icon config.\n   * @param iconName Name under which to register the config.\n   * @param config Config to be registered.\n   */\n  private _addSvgIconConfig(namespace: string, iconName: string, config: SvgIconConfig): this {\n    this._svgIconConfigs.set(iconKey(namespace, iconName), config);\n    return this;\n  }\n\n  /**\n   * Registers an icon set config in the specified namespace.\n   * @param namespace Namespace in which to register the icon config.\n   * @param config Config to be registered.\n   */\n  private _addSvgIconSetConfig(namespace: string, config: SvgIconConfig): this {\n    const configNamespace = this._iconSetConfigs.get(namespace);\n\n    if (configNamespace) {\n      configNamespace.push(config);\n    } else {\n      this._iconSetConfigs.set(namespace, [config]);\n    }\n\n    return this;\n  }\n}\n\n/** @docs-private */\nexport function ICON_REGISTRY_PROVIDER_FACTORY(\n  parentRegistry: MatIconRegistry,\n  httpClient: HttpClient,\n  sanitizer: DomSanitizer,\n  document?: any) {\n  return parentRegistry || new MatIconRegistry(httpClient, sanitizer, document);\n}\n\n/** @docs-private */\nexport const ICON_REGISTRY_PROVIDER = {\n  // If there is already an MatIconRegistry available, use that. Otherwise, provide a new one.\n  provide: MatIconRegistry,\n  deps: [\n    [new Optional(), new SkipSelf(), MatIconRegistry],\n    [new Optional(), HttpClient],\n    DomSanitizer,\n    [new Optional(), DOCUMENT as InjectionToken<any>],\n  ],\n  useFactory: ICON_REGISTRY_PROVIDER_FACTORY,\n};\n\n/** Clones an SVGElement while preserving type information. */\nfunction cloneSvg(svg: SVGElement): SVGElement {\n  return svg.cloneNode(true) as SVGElement;\n}\n\n/** Returns the cache key to use for an icon namespace and name. */\nfunction iconKey(namespace: string, name: string) {\n  return namespace + ':' + name;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {take} from 'rxjs/operators';\nimport {\n  Attribute,\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  Input,\n  OnChanges,\n  OnInit,\n  SimpleChanges,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {CanColor, CanColorCtor, mixinColor} from '@angular/material/core';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {MatIconRegistry} from './icon-registry';\n\n\n// Boilerplate for applying mixins to MatIcon.\n/** @docs-private */\nexport class MatIconBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatIconMixinBase: CanColorCtor & typeof MatIconBase =\n    mixinColor(MatIconBase);\n\n\n/**\n * Component to display an icon. It can be used in the following ways:\n *\n * - Specify the svgIcon input to load an SVG icon from a URL previously registered with the\n *   addSvgIcon, addSvgIconInNamespace, addSvgIconSet, or addSvgIconSetInNamespace methods of\n *   MatIconRegistry. If the svgIcon value contains a colon it is assumed to be in the format\n *   \"[namespace]:[name]\", if not the value will be the name of an icon in the default namespace.\n *   Examples:\n *     `<mat-icon svgIcon=\"left-arrow\"></mat-icon>\n *     <mat-icon svgIcon=\"animals:cat\"></mat-icon>`\n *\n * - Use a font ligature as an icon by putting the ligature text in the content of the `<mat-icon>`\n *   component. By default the Material icons font is used as described at\n *   http://google.github.io/material-design-icons/#icon-font-for-the-web. You can specify an\n *   alternate font by setting the fontSet input to either the CSS class to apply to use the\n *   desired font, or to an alias previously registered with MatIconRegistry.registerFontClassAlias.\n *   Examples:\n *     `<mat-icon>home</mat-icon>\n *     <mat-icon fontSet=\"myfont\">sun</mat-icon>`\n *\n * - Specify a font glyph to be included via CSS rules by setting the fontSet input to specify the\n *   font, and the fontIcon input to specify the icon. Typically the fontIcon will specify a\n *   CSS class which causes the glyph to be displayed via a :before selector, as in\n *   https://fortawesome.github.io/Font-Awesome/examples/\n *   Example:\n *     `<mat-icon fontSet=\"fa\" fontIcon=\"alarm\"></mat-icon>`\n */\n@Component({\n  moduleId: module.id,\n  template: '<ng-content></ng-content>',\n  selector: 'mat-icon',\n  exportAs: 'matIcon',\n  styleUrls: ['icon.css'],\n  inputs: ['color'],\n  host: {\n    'role': 'img',\n    'class': 'mat-icon',\n    '[class.mat-icon-inline]': 'inline',\n  },\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatIcon extends _MatIconMixinBase implements OnChanges, OnInit, CanColor {\n  /**\n   * Whether the icon should be inlined, automatically sizing the icon to match the font size of\n   * the element the icon is contained in.\n   */\n  @Input()\n  get inline(): boolean {\n    return this._inline;\n  }\n  set inline(inline: boolean) {\n    this._inline = coerceBooleanProperty(inline);\n  }\n  private _inline: boolean = false;\n\n  /** Name of the icon in the SVG icon set. */\n  @Input() svgIcon: string;\n\n  /** Font set that the icon is a part of. */\n  @Input()\n  get fontSet(): string { return this._fontSet; }\n  set fontSet(value: string) {\n    this._fontSet = this._cleanupFontValue(value);\n  }\n  private _fontSet: string;\n\n  /** Name of an icon within a font set. */\n  @Input()\n  get fontIcon(): string { return this._fontIcon; }\n  set fontIcon(value: string) {\n    this._fontIcon = this._cleanupFontValue(value);\n  }\n  private _fontIcon: string;\n\n  private _previousFontSetClass: string;\n  private _previousFontIconClass: string;\n\n  constructor(\n      elementRef: ElementRef<HTMLElement>,\n      private _iconRegistry: MatIconRegistry,\n      @Attribute('aria-hidden') ariaHidden: string) {\n    super(elementRef);\n\n    // If the user has not explicitly set aria-hidden, mark the icon as hidden, as this is\n    // the right thing to do for the majority of icon use-cases.\n    if (!ariaHidden) {\n      elementRef.nativeElement.setAttribute('aria-hidden', 'true');\n    }\n  }\n\n  /**\n   * Splits an svgIcon binding value into its icon set and icon name components.\n   * Returns a 2-element array of [(icon set), (icon name)].\n   * The separator for the two fields is ':'. If there is no separator, an empty\n   * string is returned for the icon set and the entire value is returned for\n   * the icon name. If the argument is falsy, returns an array of two empty strings.\n   * Throws an error if the name contains two or more ':' separators.\n   * Examples:\n   *   `'social:cake' -> ['social', 'cake']\n   *   'penguin' -> ['', 'penguin']\n   *   null -> ['', '']\n   *   'a:b:c' -> (throws Error)`\n   */\n  private _splitIconName(iconName: string): [string, string] {\n    if (!iconName) {\n      return ['', ''];\n    }\n    const parts = iconName.split(':');\n    switch (parts.length) {\n      case 1: return ['', parts[0]]; // Use default namespace.\n      case 2: return <[string, string]>parts;\n      default: throw Error(`Invalid icon name: \"${iconName}\"`);\n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    // Only update the inline SVG icon if the inputs changed, to avoid unnecessary DOM operations.\n    if (changes.svgIcon) {\n      if (this.svgIcon) {\n        const [namespace, iconName] = this._splitIconName(this.svgIcon);\n\n        this._iconRegistry.getNamedSvgIcon(iconName, namespace).pipe(take(1)).subscribe(\n          svg => this._setSvgElement(svg),\n          (err: Error) => console.log(`Error retrieving icon: ${err.message}`)\n        );\n      } else {\n        this._clearSvgElement();\n      }\n    }\n\n    if (this._usingFontIcon()) {\n      this._updateFontIconClasses();\n    }\n  }\n\n  ngOnInit() {\n    // Update font classes because ngOnChanges won't be called if none of the inputs are present,\n    // e.g. <mat-icon>arrow</mat-icon> In this case we need to add a CSS class for the default font.\n    if (this._usingFontIcon()) {\n      this._updateFontIconClasses();\n    }\n  }\n\n  private _usingFontIcon(): boolean {\n    return !this.svgIcon;\n  }\n\n  private _setSvgElement(svg: SVGElement) {\n    this._clearSvgElement();\n\n    // Workaround for IE11 and Edge ignoring `style` tags inside dynamically-created SVGs.\n    // See: https://developer.microsoft.com/en-us/microsoft-edge/platform/issues/10898469/\n    // Do this before inserting the element into the DOM, in order to avoid a style recalculation.\n    const styleTags = svg.querySelectorAll('style') as NodeListOf<HTMLStyleElement>;\n\n    for (let i = 0; i < styleTags.length; i++) {\n      styleTags[i].textContent += ' ';\n    }\n\n    this._elementRef.nativeElement.appendChild(svg);\n  }\n\n  private _clearSvgElement() {\n    const layoutElement: HTMLElement = this._elementRef.nativeElement;\n    let childCount = layoutElement.childNodes.length;\n\n    // Remove existing non-element child nodes and SVGs, and add the new SVG element. Note that\n    // we can't use innerHTML, because IE will throw if the element has a data binding.\n    while (childCount--) {\n      const child = layoutElement.childNodes[childCount];\n\n      // 1 corresponds to Node.ELEMENT_NODE. We remove all non-element nodes in order to get rid\n      // of any loose text nodes, as well as any SVG elements in order to remove any old icons.\n      if (child.nodeType !== 1 || child.nodeName.toLowerCase() === 'svg') {\n        layoutElement.removeChild(child);\n      }\n    }\n  }\n\n  private _updateFontIconClasses() {\n    if (!this._usingFontIcon()) {\n      return;\n    }\n\n    const elem: HTMLElement = this._elementRef.nativeElement;\n    const fontSetClass = this.fontSet ?\n        this._iconRegistry.classNameForFontAlias(this.fontSet) :\n        this._iconRegistry.getDefaultFontSetClass();\n\n    if (fontSetClass != this._previousFontSetClass) {\n      if (this._previousFontSetClass) {\n        elem.classList.remove(this._previousFontSetClass);\n      }\n      if (fontSetClass) {\n        elem.classList.add(fontSetClass);\n      }\n      this._previousFontSetClass = fontSetClass;\n    }\n\n    if (this.fontIcon != this._previousFontIconClass) {\n      if (this._previousFontIconClass) {\n        elem.classList.remove(this._previousFontIconClass);\n      }\n      if (this.fontIcon) {\n        elem.classList.add(this.fontIcon);\n      }\n      this._previousFontIconClass = this.fontIcon;\n    }\n  }\n\n  /**\n   * Cleans up a value to be used as a fontIcon or fontSet.\n   * Since the value ends up being assigned as a CSS class, we\n   * have to trim the value and omit space-separated values.\n   */\n  private _cleanupFontValue(value: string) {\n    return typeof value === 'string' ? value.trim().split(' ')[0] : value;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatIcon} from './icon';\n\n\n@NgModule({\n  imports: [MatCommonModule],\n  exports: [MatIcon, MatCommonModule],\n  declarations: [MatIcon],\n})\nexport class MatIconModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ComponentPortal, ComponentType, Portal} from '@angular/cdk/portal';\nimport {\n  AfterContentInit,\n  AfterViewChecked,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  OnChanges,\n  OnDestroy,\n  Optional,\n  Output,\n  SimpleChanges,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {DateAdapter, MAT_DATE_FORMATS, MatDateFormats} from '@angular/material/core';\nimport {Subject, Subscription} from 'rxjs';\nimport {createMissingDateImplError} from './datepicker-errors';\nimport {MatDatepickerIntl} from './datepicker-intl';\nimport {MatMonthView} from './month-view';\nimport {MatMultiYearView, yearsPerPage} from './multi-year-view';\nimport {MatYearView} from './year-view';\n\n/**\n * Possible views for the calendar.\n * @docs-private\n */\nexport type MatCalendarView = 'month' | 'year' | 'multi-year';\n\n/** Default header for MatCalendar */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-calendar-header',\n  templateUrl: 'calendar-header.html',\n  exportAs: 'matCalendarHeader',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatCalendarHeader<D> {\n  constructor(private _intl: MatDatepickerIntl,\n              @Inject(forwardRef(() => MatCalendar)) public calendar: MatCalendar<D>,\n              @Optional() private _dateAdapter: DateAdapter<D>,\n              @Optional() @Inject(MAT_DATE_FORMATS) private _dateFormats: MatDateFormats,\n              changeDetectorRef: ChangeDetectorRef) {\n\n    this.calendar.stateChanges.subscribe(() => changeDetectorRef.markForCheck());\n  }\n\n  /** The label for the current calendar view. */\n  get periodButtonText(): string {\n    if (this.calendar.currentView == 'month') {\n      return this._dateAdapter\n          .format(this.calendar.activeDate, this._dateFormats.display.monthYearLabel)\n              .toLocaleUpperCase();\n    }\n    if (this.calendar.currentView == 'year') {\n      return this._dateAdapter.getYearName(this.calendar.activeDate);\n    }\n    const activeYear = this._dateAdapter.getYear(this.calendar.activeDate);\n    const firstYearInView = this._dateAdapter.getYearName(\n        this._dateAdapter.createDate(activeYear - activeYear % 24, 0, 1));\n    const lastYearInView = this._dateAdapter.getYearName(\n        this._dateAdapter.createDate(activeYear + yearsPerPage - 1 - activeYear % 24, 0, 1));\n    return `${firstYearInView} \\u2013 ${lastYearInView}`;\n  }\n\n  get periodButtonLabel(): string {\n    return this.calendar.currentView == 'month' ?\n        this._intl.switchToMultiYearViewLabel : this._intl.switchToMonthViewLabel;\n  }\n\n  /** The label for the the previous button. */\n  get prevButtonLabel(): string {\n    return {\n      'month': this._intl.prevMonthLabel,\n      'year': this._intl.prevYearLabel,\n      'multi-year': this._intl.prevMultiYearLabel\n    }[this.calendar.currentView];\n  }\n\n  /** The label for the the next button. */\n  get nextButtonLabel(): string {\n    return {\n      'month': this._intl.nextMonthLabel,\n      'year': this._intl.nextYearLabel,\n      'multi-year': this._intl.nextMultiYearLabel\n    }[this.calendar.currentView];\n  }\n\n  /** Handles user clicks on the period label. */\n  currentPeriodClicked(): void {\n    this.calendar.currentView = this.calendar.currentView == 'month' ? 'multi-year' : 'month';\n  }\n\n  /** Handles user clicks on the previous button. */\n  previousClicked(): void {\n    this.calendar.activeDate = this.calendar.currentView == 'month' ?\n        this._dateAdapter.addCalendarMonths(this.calendar.activeDate, -1) :\n            this._dateAdapter.addCalendarYears(\n                this.calendar.activeDate, this.calendar.currentView == 'year' ? -1 : -yearsPerPage\n            );\n  }\n\n  /** Handles user clicks on the next button. */\n  nextClicked(): void {\n    this.calendar.activeDate = this.calendar.currentView == 'month' ?\n        this._dateAdapter.addCalendarMonths(this.calendar.activeDate, 1) :\n            this._dateAdapter.addCalendarYears(\n                this.calendar.activeDate,\n                    this.calendar.currentView == 'year' ? 1 : yearsPerPage\n            );\n  }\n\n  /** Whether the previous period button is enabled. */\n  previousEnabled(): boolean {\n    if (!this.calendar.minDate) {\n      return true;\n    }\n    return !this.calendar.minDate ||\n        !this._isSameView(this.calendar.activeDate, this.calendar.minDate);\n  }\n\n  /** Whether the next period button is enabled. */\n  nextEnabled(): boolean {\n    return !this.calendar.maxDate ||\n        !this._isSameView(this.calendar.activeDate, this.calendar.maxDate);\n  }\n\n  /** Whether the two dates represent the same view in the current view mode (month or year). */\n  private _isSameView(date1: D, date2: D): boolean {\n    if (this.calendar.currentView == 'month') {\n      return this._dateAdapter.getYear(date1) == this._dateAdapter.getYear(date2) &&\n          this._dateAdapter.getMonth(date1) == this._dateAdapter.getMonth(date2);\n    }\n    if (this.calendar.currentView == 'year') {\n      return this._dateAdapter.getYear(date1) == this._dateAdapter.getYear(date2);\n    }\n    // Otherwise we are in 'multi-year' view.\n    return Math.floor(this._dateAdapter.getYear(date1) / yearsPerPage) ==\n        Math.floor(this._dateAdapter.getYear(date2) / yearsPerPage);\n  }\n}\n\n/**\n * A calendar that is used as part of the datepicker.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-calendar',\n  templateUrl: 'calendar.html',\n  styleUrls: ['calendar.css'],\n  host: {\n    'class': 'mat-calendar',\n  },\n  exportAs: 'matCalendar',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatCalendar<D> implements AfterContentInit, AfterViewChecked, OnDestroy, OnChanges {\n  /** An input indicating the type of the header component, if set. */\n  @Input() headerComponent: ComponentType<any>;\n\n  /** A portal containing the header component type for this calendar. */\n  _calendarHeaderPortal: Portal<any>;\n\n  private _intlChanges: Subscription;\n\n  /**\n   * Used for scheduling that focus should be moved to the active cell on the next tick.\n   * We need to schedule it, rather than do it immediately, because we have to wait\n   * for Angular to re-evaluate the view children.\n   */\n  private _moveFocusOnNextTick = false;\n\n  /** A date representing the period (month or year) to start the calendar in. */\n  @Input()\n  get startAt(): D | null { return this._startAt; }\n  set startAt(value: D | null) {\n    this._startAt = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _startAt: D | null;\n\n  /** Whether the calendar should be started in month or year view. */\n  @Input() startView: MatCalendarView = 'month';\n\n  /** The currently selected date. */\n  @Input()\n  get selected(): D | null { return this._selected; }\n  set selected(value: D | null) {\n    this._selected = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _selected: D | null;\n\n  /** The minimum selectable date. */\n  @Input()\n  get minDate(): D | null { return this._minDate; }\n  set minDate(value: D | null) {\n    this._minDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _minDate: D | null;\n\n  /** The maximum selectable date. */\n  @Input()\n  get maxDate(): D | null { return this._maxDate; }\n  set maxDate(value: D | null) {\n    this._maxDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _maxDate: D | null;\n\n  /** A function used to filter which dates are selectable. */\n  @Input() dateFilter: (date: D) => boolean;\n\n  /** Emits when the currently selected date changes. */\n  @Output() readonly selectedChange: EventEmitter<D> = new EventEmitter<D>();\n\n  /**\n   * Emits the year chosen in multiyear view.\n   * This doesn't imply a change on the selected date.\n   */\n  @Output() readonly yearSelected: EventEmitter<D> = new EventEmitter<D>();\n\n  /**\n   * Emits the month chosen in year view.\n   * This doesn't imply a change on the selected date.\n   */\n  @Output() readonly monthSelected: EventEmitter<D> = new EventEmitter<D>();\n\n  /** Emits when any date is selected. */\n  @Output() readonly _userSelection: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Reference to the current month view component. */\n  @ViewChild(MatMonthView) monthView: MatMonthView<D>;\n\n  /** Reference to the current year view component. */\n  @ViewChild(MatYearView) yearView: MatYearView<D>;\n\n  /** Reference to the current multi-year view component. */\n  @ViewChild(MatMultiYearView) multiYearView: MatMultiYearView<D>;\n\n  /**\n   * The current active date. This determines which time period is shown and which date is\n   * highlighted when using keyboard navigation.\n   */\n  get activeDate(): D { return this._clampedActiveDate; }\n  set activeDate(value: D) {\n    this._clampedActiveDate = this._dateAdapter.clampDate(value, this.minDate, this.maxDate);\n    this.stateChanges.next();\n  }\n  private _clampedActiveDate: D;\n\n  /** Whether the calendar is in month view. */\n  get currentView(): MatCalendarView { return this._currentView; }\n  set currentView(value: MatCalendarView) {\n    this._currentView = value;\n    this._moveFocusOnNextTick = true;\n  }\n  private _currentView: MatCalendarView;\n\n  /**\n   * Emits whenever there is a state change that the header may need to respond to.\n   */\n  stateChanges = new Subject<void>();\n\n  constructor(_intl: MatDatepickerIntl,\n              @Optional() private _dateAdapter: DateAdapter<D>,\n              @Optional() @Inject(MAT_DATE_FORMATS) private _dateFormats: MatDateFormats,\n              private _changeDetectorRef: ChangeDetectorRef) {\n\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n\n    if (!this._dateFormats) {\n      throw createMissingDateImplError('MAT_DATE_FORMATS');\n    }\n\n    this._intlChanges = _intl.changes.subscribe(() => {\n      _changeDetectorRef.markForCheck();\n      this.stateChanges.next();\n    });\n  }\n\n  ngAfterContentInit() {\n    this._calendarHeaderPortal = new ComponentPortal(this.headerComponent || MatCalendarHeader);\n    this.activeDate = this.startAt || this._dateAdapter.today();\n\n    // Assign to the private property since we don't want to move focus on init.\n    this._currentView = this.startView;\n  }\n\n  ngAfterViewChecked() {\n    if (this._moveFocusOnNextTick) {\n      this._moveFocusOnNextTick = false;\n      this.focusActiveCell();\n    }\n  }\n\n  ngOnDestroy() {\n    this._intlChanges.unsubscribe();\n    this.stateChanges.complete();\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    const change = changes.minDate || changes.maxDate || changes.dateFilter;\n\n    if (change && !change.firstChange) {\n      const view = this._getCurrentViewComponent();\n\n      if (view) {\n        // We need to `detectChanges` manually here, because the `minDate`, `maxDate` etc. are\n        // passed down to the view via data bindings which won't be up-to-date when we call `_init`.\n        this._changeDetectorRef.detectChanges();\n        view._init();\n      }\n    }\n\n    this.stateChanges.next();\n  }\n\n  focusActiveCell() {\n    this._getCurrentViewComponent()._focusActiveCell();\n  }\n\n  /** Updates today's date after an update of the active date */\n  updateTodaysDate() {\n    let view = this.currentView == 'month' ? this.monthView :\n            (this.currentView == 'year' ? this.yearView : this.multiYearView);\n\n    view.ngAfterContentInit();\n  }\n\n  /** Handles date selection in the month view. */\n  _dateSelected(date: D): void {\n    if (!this._dateAdapter.sameDate(date, this.selected)) {\n      this.selectedChange.emit(date);\n    }\n  }\n\n  /** Handles year selection in the multiyear view. */\n  _yearSelectedInMultiYearView(normalizedYear: D) {\n    this.yearSelected.emit(normalizedYear);\n  }\n\n  /** Handles month selection in the year view. */\n  _monthSelectedInYearView(normalizedMonth: D) {\n    this.monthSelected.emit(normalizedMonth);\n  }\n\n  _userSelected(): void {\n    this._userSelection.emit();\n  }\n\n  /** Handles year/month selection in the multi-year/year views. */\n  _goToDateInView(date: D, view: 'month' | 'year' | 'multi-year'): void {\n    this.activeDate = date;\n    this.currentView = view;\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n\n  /** Returns the component instance that corresponds to the current calendar view. */\n  private _getCurrentViewComponent() {\n    return this.monthView || this.yearView || this.multiYearView;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/** Animations used by the Material datepicker. */\nexport const matDatepickerAnimations: {\n  readonly transformPanel: AnimationTriggerMetadata;\n  readonly fadeInCalendar: AnimationTriggerMetadata;\n} = {\n  /** Transforms the height of the datepicker's calendar. */\n  transformPanel: trigger('transformPanel', [\n    state('void', style({\n      opacity: 0,\n      transform: 'scale(1, 0.8)'\n    })),\n    transition('void => enter',  animate('120ms cubic-bezier(0, 0, 0.2, 1)', style({\n      opacity: 1,\n      transform: 'scale(1, 1)'\n    }))),\n    transition('* => void', animate('100ms linear', style({opacity: 0})))\n  ]),\n\n  /** Fades in the content of the calendar. */\n  fadeInCalendar: trigger('fadeInCalendar', [\n    state('void', style({opacity: 0})),\n    state('enter', style({opacity: 1})),\n\n    // TODO(crisbeto): this animation should be removed since it isn't quite on spec, but we\n    // need to keep it until #12440 gets in, otherwise the exit animation will look glitchy.\n    transition('void => *', animate('120ms 100ms cubic-bezier(0.55, 0, 0.55, 0.2)'))\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {ESCAPE, UP_ARROW} from '@angular/cdk/keycodes';\nimport {\n  Overlay,\n  OverlayConfig,\n  OverlayRef,\n  PositionStrategy,\n  ScrollStrategy,\n} from '@angular/cdk/overlay';\nimport {ComponentPortal, ComponentType} from '@angular/cdk/portal';\nimport {DOCUMENT} from '@angular/common';\nimport {\n  AfterViewInit,\n  ChangeDetectionStrategy,\n  Component,\n  ComponentRef,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  Output,\n  ViewChild,\n  ViewContainerRef,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {\n  CanColor,\n  CanColorCtor,\n  DateAdapter,\n  mixinColor,\n  ThemePalette,\n} from '@angular/material/core';\nimport {MatDialog, MatDialogRef} from '@angular/material/dialog';\nimport {merge, Subject, Subscription} from 'rxjs';\nimport {filter, take} from 'rxjs/operators';\nimport {MatCalendar} from './calendar';\nimport {matDatepickerAnimations} from './datepicker-animations';\nimport {createMissingDateImplError} from './datepicker-errors';\nimport {MatDatepickerInput} from './datepicker-input';\n\n/** Used to generate a unique ID for each datepicker instance. */\nlet datepickerUid = 0;\n\n/** Injection token that determines the scroll handling while the calendar is open. */\nexport const MAT_DATEPICKER_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mat-datepicker-scroll-strategy');\n\n/** @docs-private */\nexport function MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY(overlay: Overlay): () => ScrollStrategy {\n  return () => overlay.scrollStrategies.reposition();\n}\n\n/** @docs-private */\nexport const MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY_PROVIDER = {\n  provide: MAT_DATEPICKER_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY,\n};\n\n// Boilerplate for applying mixins to MatDatepickerContent.\n/** @docs-private */\nexport class MatDatepickerContentBase {\n  constructor(public _elementRef: ElementRef) { }\n}\nexport const _MatDatepickerContentMixinBase: CanColorCtor & typeof MatDatepickerContentBase =\n    mixinColor(MatDatepickerContentBase);\n\n/**\n * Component used as the content for the datepicker dialog and popup. We use this instead of using\n * MatCalendar directly as the content so we can control the initial focus. This also gives us a\n * place to put additional features of the popup that are not part of the calendar itself in the\n * future. (e.g. confirmation buttons).\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-datepicker-content',\n  templateUrl: 'datepicker-content.html',\n  styleUrls: ['datepicker-content.css'],\n  host: {\n    'class': 'mat-datepicker-content',\n    '[@transformPanel]': '\"enter\"',\n    '[class.mat-datepicker-content-touch]': 'datepicker.touchUi',\n  },\n  animations: [\n    matDatepickerAnimations.transformPanel,\n    matDatepickerAnimations.fadeInCalendar,\n  ],\n  exportAs: 'matDatepickerContent',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  inputs: ['color'],\n})\nexport class MatDatepickerContent<D> extends _MatDatepickerContentMixinBase\n  implements AfterViewInit, CanColor {\n\n  /** Reference to the internal calendar component. */\n  @ViewChild(MatCalendar) _calendar: MatCalendar<D>;\n\n  /** Reference to the datepicker that created the overlay. */\n  datepicker: MatDatepicker<D>;\n\n  /** Whether the datepicker is above or below the input. */\n  _isAbove: boolean;\n\n  constructor(elementRef: ElementRef) {\n    super(elementRef);\n  }\n\n  ngAfterViewInit() {\n    this._calendar.focusActiveCell();\n  }\n}\n\n\n// TODO(mmalerba): We use a component instead of a directive here so the user can use implicit\n// template reference variables (e.g. #d vs #d=\"matDatepicker\"). We can change this to a directive\n// if angular adds support for `exportAs: '$implicit'` on directives.\n/** Component responsible for managing the datepicker popup/dialog. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-datepicker',\n  template: '',\n  exportAs: 'matDatepicker',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatDatepicker<D> implements OnDestroy, CanColor {\n  /** An input indicating the type of the custom header component for the calendar, if set. */\n  @Input() calendarHeaderComponent: ComponentType<any>;\n\n  /** The date to open the calendar to initially. */\n  @Input()\n  get startAt(): D | null {\n    // If an explicit startAt is set we start there, otherwise we start at whatever the currently\n    // selected value is.\n    return this._startAt || (this._datepickerInput ? this._datepickerInput.value : null);\n  }\n  set startAt(value: D | null) {\n    this._startAt = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _startAt: D | null;\n\n  /** The view that the calendar should start in. */\n  @Input() startView: 'month' | 'year' | 'multi-year' = 'month';\n\n  /** Color palette to use on the datepicker's calendar. */\n  @Input()\n  get color(): ThemePalette {\n    return this._color ||\n        (this._datepickerInput ? this._datepickerInput._getThemePalette() : undefined);\n  }\n  set color(value: ThemePalette) {\n    this._color = value;\n  }\n  _color: ThemePalette;\n\n  /**\n   * Whether the calendar UI is in touch mode. In touch mode the calendar opens in a dialog rather\n   * than a popup and elements have more padding to allow for bigger touch targets.\n   */\n  @Input()\n  get touchUi(): boolean { return this._touchUi; }\n  set touchUi(value: boolean) {\n    this._touchUi = coerceBooleanProperty(value);\n  }\n  private _touchUi = false;\n\n  /** Whether the datepicker pop-up should be disabled. */\n  @Input()\n  get disabled(): boolean {\n    return this._disabled === undefined && this._datepickerInput ?\n        this._datepickerInput.disabled : !!this._disabled;\n  }\n  set disabled(value: boolean) {\n    const newValue = coerceBooleanProperty(value);\n\n    if (newValue !== this._disabled) {\n      this._disabled = newValue;\n      this._disabledChange.next(newValue);\n    }\n  }\n  private _disabled: boolean;\n\n  /**\n   * Emits selected year in multiyear view.\n   * This doesn't imply a change on the selected date.\n   */\n  @Output() readonly yearSelected: EventEmitter<D> = new EventEmitter<D>();\n\n  /**\n   * Emits selected month in year view.\n   * This doesn't imply a change on the selected date.\n   */\n  @Output() readonly monthSelected: EventEmitter<D> = new EventEmitter<D>();\n\n  /** Classes to be passed to the date picker panel. Supports the same syntax as `ngClass`. */\n  @Input() panelClass: string | string[];\n\n  /** Emits when the datepicker has been opened. */\n  @Output('opened') openedStream: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Emits when the datepicker has been closed. */\n  @Output('closed') closedStream: EventEmitter<void> = new EventEmitter<void>();\n\n\n  /** Whether the calendar is open. */\n  @Input()\n  get opened(): boolean { return this._opened; }\n  set opened(value: boolean) { value ? this.open() : this.close(); }\n  private _opened = false;\n\n  /** The id for the datepicker calendar. */\n  id: string = `mat-datepicker-${datepickerUid++}`;\n\n  /** The currently selected date. */\n  get _selected(): D | null { return this._validSelected; }\n  set _selected(value: D | null) { this._validSelected = value; }\n  private _validSelected: D | null = null;\n\n  /** The minimum selectable date. */\n  get _minDate(): D | null {\n    return this._datepickerInput && this._datepickerInput.min;\n  }\n\n  /** The maximum selectable date. */\n  get _maxDate(): D | null {\n    return this._datepickerInput && this._datepickerInput.max;\n  }\n\n  get _dateFilter(): (date: D | null) => boolean {\n    return this._datepickerInput && this._datepickerInput._dateFilter;\n  }\n\n  /** A reference to the overlay when the calendar is opened as a popup. */\n  _popupRef: OverlayRef;\n\n  /** A reference to the dialog when the calendar is opened as a dialog. */\n  private _dialogRef: MatDialogRef<MatDatepickerContent<D>> | null;\n\n  /** A portal containing the calendar for this datepicker. */\n  private _calendarPortal: ComponentPortal<MatDatepickerContent<D>>;\n\n  /** Reference to the component instantiated in popup mode. */\n  private _popupComponentRef: ComponentRef<MatDatepickerContent<D>> | null;\n\n  /** The element that was focused before the datepicker was opened. */\n  private _focusedElementBeforeOpen: HTMLElement | null = null;\n\n  /** Subscription to value changes in the associated input element. */\n  private _inputSubscription = Subscription.EMPTY;\n\n  /** The input element this datepicker is associated with. */\n  _datepickerInput: MatDatepickerInput<D>;\n\n  /** Emits when the datepicker is disabled. */\n  readonly _disabledChange = new Subject<boolean>();\n\n  /** Emits new selected date when selected date changes. */\n  readonly _selectedChanged = new Subject<D>();\n\n  constructor(private _dialog: MatDialog,\n              private _overlay: Overlay,\n              private _ngZone: NgZone,\n              private _viewContainerRef: ViewContainerRef,\n              @Inject(MAT_DATEPICKER_SCROLL_STRATEGY) private _scrollStrategy,\n              @Optional() private _dateAdapter: DateAdapter<D>,\n              @Optional() private _dir: Directionality,\n              @Optional() @Inject(DOCUMENT) private _document: any) {\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n  }\n\n  ngOnDestroy() {\n    this.close();\n    this._inputSubscription.unsubscribe();\n    this._disabledChange.complete();\n\n    if (this._popupRef) {\n      this._popupRef.dispose();\n      this._popupComponentRef = null;\n    }\n  }\n\n  /** Selects the given date */\n  select(date: D): void {\n    let oldValue = this._selected;\n    this._selected = date;\n    if (!this._dateAdapter.sameDate(oldValue, this._selected)) {\n      this._selectedChanged.next(date);\n    }\n  }\n\n  /** Emits the selected year in multiyear view */\n  _selectYear(normalizedYear: D): void {\n    this.yearSelected.emit(normalizedYear);\n  }\n\n  /** Emits selected month in year view */\n  _selectMonth(normalizedMonth: D): void {\n    this.monthSelected.emit(normalizedMonth);\n  }\n\n  /**\n   * Register an input with this datepicker.\n   * @param input The datepicker input to register with this datepicker.\n   */\n  _registerInput(input: MatDatepickerInput<D>): void {\n    if (this._datepickerInput) {\n      throw Error('A MatDatepicker can only be associated with a single input.');\n    }\n    this._datepickerInput = input;\n    this._inputSubscription =\n        this._datepickerInput._valueChange.subscribe((value: D | null) => this._selected = value);\n  }\n\n  /** Open the calendar. */\n  open(): void {\n    if (this._opened || this.disabled) {\n      return;\n    }\n    if (!this._datepickerInput) {\n      throw Error('Attempted to open an MatDatepicker with no associated input.');\n    }\n    if (this._document) {\n      this._focusedElementBeforeOpen = this._document.activeElement;\n    }\n\n    this.touchUi ? this._openAsDialog() : this._openAsPopup();\n    this._opened = true;\n    this.openedStream.emit();\n  }\n\n  /** Close the calendar. */\n  close(): void {\n    if (!this._opened) {\n      return;\n    }\n    if (this._popupRef && this._popupRef.hasAttached()) {\n      this._popupRef.detach();\n    }\n    if (this._dialogRef) {\n      this._dialogRef.close();\n      this._dialogRef = null;\n    }\n    if (this._calendarPortal && this._calendarPortal.isAttached) {\n      this._calendarPortal.detach();\n    }\n\n    const completeClose = () => {\n      // The `_opened` could've been reset already if\n      // we got two events in quick succession.\n      if (this._opened) {\n        this._opened = false;\n        this.closedStream.emit();\n        this._focusedElementBeforeOpen = null;\n      }\n    };\n\n    if (this._focusedElementBeforeOpen &&\n      typeof this._focusedElementBeforeOpen.focus === 'function') {\n      // Because IE moves focus asynchronously, we can't count on it being restored before we've\n      // marked the datepicker as closed. If the event fires out of sequence and the element that\n      // we're refocusing opens the datepicker on focus, the user could be stuck with not being\n      // able to close the calendar at all. We work around it by making the logic, that marks\n      // the datepicker as closed, async as well.\n      this._focusedElementBeforeOpen.focus();\n      setTimeout(completeClose);\n    } else {\n      completeClose();\n    }\n  }\n\n  /** Open the calendar as a dialog. */\n  private _openAsDialog(): void {\n    // Usually this would be handled by `open` which ensures that we can only have one overlay\n    // open at a time, however since we reset the variables in async handlers some overlays\n    // may slip through if the user opens and closes multiple times in quick succession (e.g.\n    // by holding down the enter key).\n    if (this._dialogRef) {\n      this._dialogRef.close();\n    }\n\n    this._dialogRef = this._dialog.open<MatDatepickerContent<D>>(MatDatepickerContent, {\n      direction: this._dir ? this._dir.value : 'ltr',\n      viewContainerRef: this._viewContainerRef,\n      panelClass: 'mat-datepicker-dialog',\n    });\n\n    this._dialogRef.afterClosed().subscribe(() => this.close());\n    this._dialogRef.componentInstance.datepicker = this;\n    this._setColor();\n  }\n\n  /** Open the calendar as a popup. */\n  private _openAsPopup(): void {\n    if (!this._calendarPortal) {\n      this._calendarPortal = new ComponentPortal<MatDatepickerContent<D>>(MatDatepickerContent,\n                                                                          this._viewContainerRef);\n    }\n\n    if (!this._popupRef) {\n      this._createPopup();\n    }\n\n    if (!this._popupRef.hasAttached()) {\n      this._popupComponentRef = this._popupRef.attach(this._calendarPortal);\n      this._popupComponentRef.instance.datepicker = this;\n      this._setColor();\n\n      // Update the position once the calendar has rendered.\n      this._ngZone.onStable.asObservable().pipe(take(1)).subscribe(() => {\n        this._popupRef.updatePosition();\n      });\n    }\n  }\n\n  /** Create the popup. */\n  private _createPopup(): void {\n    const overlayConfig = new OverlayConfig({\n      positionStrategy: this._createPopupPositionStrategy(),\n      hasBackdrop: true,\n      backdropClass: 'mat-overlay-transparent-backdrop',\n      direction: this._dir,\n      scrollStrategy: this._scrollStrategy(),\n      panelClass: 'mat-datepicker-popup',\n    });\n\n    this._popupRef = this._overlay.create(overlayConfig);\n    this._popupRef.overlayElement.setAttribute('role', 'dialog');\n\n    merge(\n      this._popupRef.backdropClick(),\n      this._popupRef.detachments(),\n      this._popupRef.keydownEvents().pipe(filter(event => {\n        // Closing on alt + up is only valid when there's an input associated with the datepicker.\n        return event.keyCode === ESCAPE ||\n               (this._datepickerInput && event.altKey && event.keyCode === UP_ARROW);\n      }))\n    ).subscribe(() => this.close());\n  }\n\n  /** Create the popup PositionStrategy. */\n  private _createPopupPositionStrategy(): PositionStrategy {\n    return this._overlay.position()\n      .flexibleConnectedTo(this._datepickerInput.getConnectedOverlayOrigin())\n      .withTransformOriginOn('.mat-datepicker-content')\n      .withFlexibleDimensions(false)\n      .withViewportMargin(8)\n      .withPush(false)\n      .withPositions([\n        {\n          originX: 'start',\n          originY: 'bottom',\n          overlayX: 'start',\n          overlayY: 'top'\n        },\n        {\n          originX: 'start',\n          originY: 'top',\n          overlayX: 'start',\n          overlayY: 'bottom'\n        },\n        {\n          originX: 'end',\n          originY: 'bottom',\n          overlayX: 'end',\n          overlayY: 'top'\n        },\n        {\n          originX: 'end',\n          originY: 'top',\n          overlayX: 'end',\n          overlayY: 'bottom'\n        }\n      ]);\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n\n  /** Passes the current theme color along to the calendar overlay. */\n  private _setColor(): void {\n    const color = this.color;\n    if (this._popupComponentRef) {\n      this._popupComponentRef.instance.color = color;\n    }\n    if (this._dialogRef) {\n      this._dialogRef.componentInstance.color = color;\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {DOWN_ARROW} from '@angular/cdk/keycodes';\nimport {\n  Directive,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  OnDestroy,\n  Optional,\n  Output,\n} from '@angular/core';\nimport {\n  AbstractControl,\n  ControlValueAccessor,\n  NG_VALIDATORS,\n  NG_VALUE_ACCESSOR,\n  ValidationErrors,\n  Validator,\n  ValidatorFn,\n  Validators,\n} from '@angular/forms';\nimport {DateAdapter, MAT_DATE_FORMATS, MatDateFormats, ThemePalette} from '@angular/material/core';\nimport {MatFormField} from '@angular/material/form-field';\nimport {MAT_INPUT_VALUE_ACCESSOR} from '@angular/material/input';\nimport {Subscription} from 'rxjs';\nimport {MatDatepicker} from './datepicker';\nimport {createMissingDateImplError} from './datepicker-errors';\n\n\nexport const MAT_DATEPICKER_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatDatepickerInput),\n  multi: true\n};\n\n\nexport const MAT_DATEPICKER_VALIDATORS: any = {\n  provide: NG_VALIDATORS,\n  useExisting: forwardRef(() => MatDatepickerInput),\n  multi: true\n};\n\n\n/**\n * An event used for datepicker input and change events. We don't always have access to a native\n * input or change event because the event may have been triggered by the user clicking on the\n * calendar popup. For consistency, we always use MatDatepickerInputEvent instead.\n */\nexport class MatDatepickerInputEvent<D> {\n  /** The new value for the target datepicker input. */\n  value: D | null;\n\n  constructor(\n    /** Reference to the datepicker input component that emitted the event. */\n    public target: MatDatepickerInput<D>,\n    /** Reference to the native input element associated with the datepicker input. */\n    public targetElement: HTMLElement) {\n    this.value = this.target.value;\n  }\n}\n\n\n/** Directive used to connect an input to a MatDatepicker. */\n@Directive({\n  selector: 'input[matDatepicker]',\n  providers: [\n    MAT_DATEPICKER_VALUE_ACCESSOR,\n    MAT_DATEPICKER_VALIDATORS,\n    {provide: MAT_INPUT_VALUE_ACCESSOR, useExisting: MatDatepickerInput},\n  ],\n  host: {\n    '[attr.aria-haspopup]': 'true',\n    '[attr.aria-owns]': '(_datepicker?.opened && _datepicker.id) || null',\n    '[attr.min]': 'min ? _dateAdapter.toIso8601(min) : null',\n    '[attr.max]': 'max ? _dateAdapter.toIso8601(max) : null',\n    '[disabled]': 'disabled',\n    '(input)': '_onInput($event.target.value)',\n    '(change)': '_onChange()',\n    '(blur)': '_onBlur()',\n    '(keydown)': '_onKeydown($event)',\n  },\n  exportAs: 'matDatepickerInput',\n})\nexport class MatDatepickerInput<D> implements ControlValueAccessor, OnDestroy, Validator {\n  /** The datepicker that this input is associated with. */\n  @Input()\n  set matDatepicker(value: MatDatepicker<D>) {\n    if (!value) {\n      return;\n    }\n\n    this._datepicker = value;\n    this._datepicker._registerInput(this);\n    this._datepickerSubscription.unsubscribe();\n\n    this._datepickerSubscription = this._datepicker._selectedChanged.subscribe((selected: D) => {\n      this.value = selected;\n      this._cvaOnChange(selected);\n      this._onTouched();\n      this.dateInput.emit(new MatDatepickerInputEvent(this, this._elementRef.nativeElement));\n      this.dateChange.emit(new MatDatepickerInputEvent(this, this._elementRef.nativeElement));\n    });\n  }\n  _datepicker: MatDatepicker<D>;\n\n  /** Function that can be used to filter out dates within the datepicker. */\n  @Input()\n  set matDatepickerFilter(value: (date: D | null) => boolean) {\n    this._dateFilter = value;\n    this._validatorOnChange();\n  }\n  _dateFilter: (date: D | null) => boolean;\n\n  /** The value of the input. */\n  @Input()\n  get value(): D | null { return this._value; }\n  set value(value: D | null) {\n    value = this._dateAdapter.deserialize(value);\n    this._lastValueValid = !value || this._dateAdapter.isValid(value);\n    value = this._getValidDateOrNull(value);\n    const oldDate = this.value;\n    this._value = value;\n    this._formatValue(value);\n\n    if (!this._dateAdapter.sameDate(oldDate, value)) {\n      this._valueChange.emit(value);\n    }\n  }\n  private _value: D | null;\n\n  /** The minimum valid date. */\n  @Input()\n  get min(): D | null { return this._min; }\n  set min(value: D | null) {\n    this._min = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n    this._validatorOnChange();\n  }\n  private _min: D | null;\n\n  /** The maximum valid date. */\n  @Input()\n  get max(): D | null { return this._max; }\n  set max(value: D | null) {\n    this._max = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n    this._validatorOnChange();\n  }\n  private _max: D | null;\n\n  /** Whether the datepicker-input is disabled. */\n  @Input()\n  get disabled(): boolean { return !!this._disabled; }\n  set disabled(value: boolean) {\n    const newValue = coerceBooleanProperty(value);\n    const element = this._elementRef.nativeElement;\n\n    if (this._disabled !== newValue) {\n      this._disabled = newValue;\n      this._disabledChange.emit(newValue);\n    }\n\n    // We need to null check the `blur` method, because it's undefined during SSR.\n    if (newValue && element.blur) {\n      // Normally, native input elements automatically blur if they turn disabled. This behavior\n      // is problematic, because it would mean that it triggers another change detection cycle,\n      // which then causes a changed after checked error if the input element was focused before.\n      element.blur();\n    }\n  }\n  private _disabled: boolean;\n\n  /** Emits when a `change` event is fired on this `<input>`. */\n  @Output() readonly dateChange: EventEmitter<MatDatepickerInputEvent<D>> =\n      new EventEmitter<MatDatepickerInputEvent<D>>();\n\n  /** Emits when an `input` event is fired on this `<input>`. */\n  @Output() readonly dateInput: EventEmitter<MatDatepickerInputEvent<D>> =\n      new EventEmitter<MatDatepickerInputEvent<D>>();\n\n  /** Emits when the value changes (either due to user input or programmatic change). */\n  _valueChange = new EventEmitter<D | null>();\n\n  /** Emits when the disabled state has changed */\n  _disabledChange = new EventEmitter<boolean>();\n\n  _onTouched = () => {};\n\n  private _cvaOnChange: (value: any) => void = () => {};\n\n  private _validatorOnChange = () => {};\n\n  private _datepickerSubscription = Subscription.EMPTY;\n\n  private _localeSubscription = Subscription.EMPTY;\n\n  /** The form control validator for whether the input parses. */\n  private _parseValidator: ValidatorFn = (): ValidationErrors | null => {\n    return this._lastValueValid ?\n        null : {'matDatepickerParse': {'text': this._elementRef.nativeElement.value}};\n  }\n\n  /** The form control validator for the min date. */\n  private _minValidator: ValidatorFn = (control: AbstractControl): ValidationErrors | null => {\n    const controlValue = this._getValidDateOrNull(this._dateAdapter.deserialize(control.value));\n    return (!this.min || !controlValue ||\n        this._dateAdapter.compareDate(this.min, controlValue) <= 0) ?\n        null : {'matDatepickerMin': {'min': this.min, 'actual': controlValue}};\n  }\n\n  /** The form control validator for the max date. */\n  private _maxValidator: ValidatorFn = (control: AbstractControl): ValidationErrors | null => {\n    const controlValue = this._getValidDateOrNull(this._dateAdapter.deserialize(control.value));\n    return (!this.max || !controlValue ||\n        this._dateAdapter.compareDate(this.max, controlValue) >= 0) ?\n        null : {'matDatepickerMax': {'max': this.max, 'actual': controlValue}};\n  }\n\n  /** The form control validator for the date filter. */\n  private _filterValidator: ValidatorFn = (control: AbstractControl): ValidationErrors | null => {\n    const controlValue = this._getValidDateOrNull(this._dateAdapter.deserialize(control.value));\n    return !this._dateFilter || !controlValue || this._dateFilter(controlValue) ?\n        null : {'matDatepickerFilter': true};\n  }\n\n  /** The combined form control validator for this input. */\n  private _validator: ValidatorFn | null =\n      Validators.compose(\n          [this._parseValidator, this._minValidator, this._maxValidator, this._filterValidator]);\n\n  /** Whether the last value set on the input was valid. */\n  private _lastValueValid = false;\n\n  constructor(\n      private _elementRef: ElementRef<HTMLInputElement>,\n      @Optional() public _dateAdapter: DateAdapter<D>,\n      @Optional() @Inject(MAT_DATE_FORMATS) private _dateFormats: MatDateFormats,\n      @Optional() private _formField: MatFormField) {\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n    if (!this._dateFormats) {\n      throw createMissingDateImplError('MAT_DATE_FORMATS');\n    }\n\n    // Update the displayed date when the locale changes.\n    this._localeSubscription = _dateAdapter.localeChanges.subscribe(() => {\n      this.value = this.value;\n    });\n  }\n\n  ngOnDestroy() {\n    this._datepickerSubscription.unsubscribe();\n    this._localeSubscription.unsubscribe();\n    this._valueChange.complete();\n    this._disabledChange.complete();\n  }\n\n  /** @docs-private */\n  registerOnValidatorChange(fn: () => void): void {\n    this._validatorOnChange = fn;\n  }\n\n  /** @docs-private */\n  validate(c: AbstractControl): ValidationErrors | null {\n    return this._validator ? this._validator(c) : null;\n  }\n\n  /**\n   * @deprecated\n   * @breaking-change 7.0.0 Use `getConnectedOverlayOrigin` instead\n   */\n  getPopupConnectionElementRef(): ElementRef {\n    return this.getConnectedOverlayOrigin();\n  }\n\n  /**\n   * Gets the element that the datepicker popup should be connected to.\n   * @return The element to connect the popup to.\n   */\n  getConnectedOverlayOrigin(): ElementRef {\n    return this._formField ? this._formField.getConnectedOverlayOrigin() : this._elementRef;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  writeValue(value: D): void {\n    this.value = value;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnChange(fn: (value: any) => void): void {\n    this._cvaOnChange = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnTouched(fn: () => void): void {\n    this._onTouched = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n  }\n\n  _onKeydown(event: KeyboardEvent) {\n    const isAltDownArrow = event.altKey && event.keyCode === DOWN_ARROW;\n\n    if (this._datepicker && isAltDownArrow && !this._elementRef.nativeElement.readOnly) {\n      this._datepicker.open();\n      event.preventDefault();\n    }\n  }\n\n  _onInput(value: string) {\n    let date = this._dateAdapter.parse(value, this._dateFormats.parse.dateInput);\n    this._lastValueValid = !date || this._dateAdapter.isValid(date);\n    date = this._getValidDateOrNull(date);\n\n    if (!this._dateAdapter.sameDate(date, this._value)) {\n      this._value = date;\n      this._cvaOnChange(date);\n      this._valueChange.emit(date);\n      this.dateInput.emit(new MatDatepickerInputEvent(this, this._elementRef.nativeElement));\n    }\n  }\n\n  _onChange() {\n    this.dateChange.emit(new MatDatepickerInputEvent(this, this._elementRef.nativeElement));\n  }\n\n  /** Returns the palette used by the input's form field, if any. */\n  _getThemePalette(): ThemePalette {\n    return this._formField ? this._formField.color : undefined;\n  }\n\n  /** Handles blur events on the input. */\n  _onBlur() {\n    // Reformat the input only if we have a valid value.\n    if (this.value) {\n      this._formatValue(this.value);\n    }\n\n    this._onTouched();\n  }\n\n  /** Formats a value and sets it on the input element. */\n  private _formatValue(value: D | null) {\n    this._elementRef.nativeElement.value =\n        value ? this._dateAdapter.format(value, this._dateFormats.display.dateInput) : '';\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  AfterContentInit,\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  Directive,\n  Input,\n  OnChanges,\n  OnDestroy,\n  SimpleChanges,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {merge, of as observableOf, Subscription} from 'rxjs';\nimport {MatDatepicker} from './datepicker';\nimport {MatDatepickerIntl} from './datepicker-intl';\n\n\n/** Can be used to override the icon of a `matDatepickerToggle`. */\n@Directive({\n  selector: '[matDatepickerToggleIcon]'\n})\nexport class MatDatepickerToggleIcon {}\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-datepicker-toggle',\n  templateUrl: 'datepicker-toggle.html',\n  styleUrls: ['datepicker-toggle.css'],\n  host: {\n    'class': 'mat-datepicker-toggle',\n    // Clear out the native tabindex here since we forward it to the underlying button\n    '[attr.tabindex]': 'null',\n    '[class.mat-datepicker-toggle-active]': 'datepicker && datepicker.opened',\n    '[class.mat-accent]': 'datepicker && datepicker.color === \"accent\"',\n    '[class.mat-warn]': 'datepicker && datepicker.color === \"warn\"',\n  },\n  exportAs: 'matDatepickerToggle',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatDatepickerToggle<D> implements AfterContentInit, OnChanges, OnDestroy {\n  private _stateChanges = Subscription.EMPTY;\n\n  /** Datepicker instance that the button will toggle. */\n  @Input('for') datepicker: MatDatepicker<D>;\n\n  /** Tabindex for the toggle. */\n  @Input() tabIndex: number | null;\n\n  /** Whether the toggle button is disabled. */\n  @Input()\n  get disabled(): boolean {\n    return this._disabled === undefined ? this.datepicker.disabled : !!this._disabled;\n  }\n  set disabled(value: boolean) {\n    this._disabled = coerceBooleanProperty(value);\n  }\n  private _disabled: boolean;\n\n  /** Custom icon set by the consumer. */\n  @ContentChild(MatDatepickerToggleIcon) _customIcon: MatDatepickerToggleIcon;\n\n  constructor(\n    public _intl: MatDatepickerIntl,\n    private _changeDetectorRef: ChangeDetectorRef,\n    @Attribute('tabindex') defaultTabIndex: string) {\n\n    const parsedTabIndex = Number(defaultTabIndex);\n    this.tabIndex = (parsedTabIndex || parsedTabIndex === 0) ? parsedTabIndex : null;\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    if (changes.datepicker) {\n      this._watchStateChanges();\n    }\n  }\n\n  ngOnDestroy() {\n    this._stateChanges.unsubscribe();\n  }\n\n  ngAfterContentInit() {\n    this._watchStateChanges();\n  }\n\n  _open(event: Event): void {\n    if (this.datepicker && !this.disabled) {\n      this.datepicker.open();\n      event.stopPropagation();\n    }\n  }\n\n  private _watchStateChanges() {\n    const datepickerDisabled = this.datepicker ? this.datepicker._disabledChange : observableOf();\n    const inputDisabled = this.datepicker && this.datepicker._datepickerInput ?\n        this.datepicker._datepickerInput._disabledChange : observableOf();\n    const datepickerToggled = this.datepicker ?\n        merge(this.datepicker.openedStream, this.datepicker.closedStream) :\n        observableOf();\n\n    this._stateChanges.unsubscribe();\n    this._stateChanges = merge(\n      this._intl.changes,\n      datepickerDisabled,\n      inputDisabled,\n      datepickerToggled\n    ).subscribe(() => this._changeDetectorRef.markForCheck());\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {A11yModule} from '@angular/cdk/a11y';\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatButtonModule} from '@angular/material/button';\nimport {MatDialogModule} from '@angular/material/dialog';\nimport {MatCalendar, MatCalendarHeader} from './calendar';\nimport {MatCalendarBody} from './calendar-body';\nimport {\n  MatDatepicker,\n  MatDatepickerContent,\n  MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY_PROVIDER,\n} from './datepicker';\nimport {MatDatepickerInput} from './datepicker-input';\nimport {MatDatepickerIntl} from './datepicker-intl';\nimport {MatDatepickerToggle, MatDatepickerToggleIcon} from './datepicker-toggle';\nimport {MatMonthView} from './month-view';\nimport {MatMultiYearView} from './multi-year-view';\nimport {MatYearView} from './year-view';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatButtonModule,\n    MatDialogModule,\n    OverlayModule,\n    A11yModule,\n    PortalModule,\n  ],\n  exports: [\n    MatCalendar,\n    MatCalendarBody,\n    MatDatepicker,\n    MatDatepickerContent,\n    MatDatepickerInput,\n    MatDatepickerToggle,\n    MatDatepickerToggleIcon,\n    MatMonthView,\n    MatYearView,\n    MatMultiYearView,\n    MatCalendarHeader,\n  ],\n  declarations: [\n    MatCalendar,\n    MatCalendarBody,\n    MatDatepicker,\n    MatDatepickerContent,\n    MatDatepickerInput,\n    MatDatepickerToggle,\n    MatDatepickerToggleIcon,\n    MatMonthView,\n    MatYearView,\n    MatMultiYearView,\n    MatCalendarHeader,\n  ],\n  providers: [\n    MatDatepickerIntl,\n    MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY_PROVIDER,\n  ],\n  entryComponents: [\n    MatDatepickerContent,\n    MatCalendarHeader,\n  ]\n})\nexport class MatDatepickerModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ChangeDetectionStrategy, Component, Input, ViewEncapsulation} from '@angular/core';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-divider',\n  host: {\n    'role': 'separator',\n    '[attr.aria-orientation]': 'vertical ? \"vertical\" : \"horizontal\"',\n    '[class.mat-divider-vertical]': 'vertical',\n    '[class.mat-divider-horizontal]': '!vertical',\n    '[class.mat-divider-inset]': 'inset',\n    'class': 'mat-divider'\n  },\n  template: '',\n  styleUrls: ['divider.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatDivider {\n  /** Whether the divider is vertically aligned. */\n  @Input()\n  get vertical(): boolean { return this._vertical; }\n  set vertical(value: boolean) { this._vertical = coerceBooleanProperty(value); }\n  private _vertical: boolean = false;\n\n  /** Whether the divider is an inset divider. */\n  @Input()\n  get inset(): boolean { return this._inset; }\n  set inset(value: boolean) { this._inset = coerceBooleanProperty(value); }\n  private _inset: boolean = false;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatDivider} from './divider';\n\n\n@NgModule({\n  imports: [MatCommonModule, CommonModule],\n  exports: [MatDivider, MatCommonModule],\n  declarations: [MatDivider],\n})\nexport class MatDividerModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {InjectionToken} from '@angular/core';\nimport {CdkAccordion} from '@angular/cdk/accordion';\n\n/** MatAccordion's display modes. */\nexport type MatAccordionDisplayMode = 'default' | 'flat';\n\n/**\n * Base interface for a `MatAccordion`.\n * @docs-private\n */\nexport interface MatAccordionBase extends CdkAccordion {\n  /** Whether the expansion indicator should be hidden. */\n  hideToggle: boolean;\n\n  /** Display mode used for all expansion panels in the accordion. */\n  displayMode: MatAccordionDisplayMode;\n\n  /** Handles keyboard events coming in from the panel headers. */\n  _handleHeaderKeydown: (event: KeyboardEvent) => void;\n\n  /** Handles focus events on the panel headers. */\n  _handleHeaderFocus: (header: any) => void;\n}\n\n\n/**\n * Token used to provide a `MatAccordion` to `MatExpansionPanel`.\n * Used primarily to avoid circular imports between `MatAccordion` and `MatExpansionPanel`.\n */\nexport const MAT_ACCORDION = new InjectionToken<MatAccordionBase>('MAT_ACCORDION');\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, TemplateRef} from '@angular/core';\n\n/**\n * Expansion panel content that will be rendered lazily\n * after the panel is opened for the first time.\n */\n@Directive({\n  selector: 'ng-template[matExpansionPanelContent]'\n})\nexport class MatExpansionPanelContent {\n  constructor(public _template: TemplateRef<any>) {}\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {AnimationEvent} from '@angular/animations';\nimport {CdkAccordionItem} from '@angular/cdk/accordion';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {UniqueSelectionDispatcher} from '@angular/cdk/collections';\nimport {TemplatePortal} from '@angular/cdk/portal';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  Directive,\n  EventEmitter,\n  ElementRef,\n  Input,\n  Inject,\n  OnChanges,\n  OnDestroy,\n  Optional,\n  Output,\n  SimpleChanges,\n  SkipSelf,\n  ViewContainerRef,\n  ViewEncapsulation,\n  ViewChild,\n} from '@angular/core';\nimport {DOCUMENT} from '@angular/common';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\nimport {Subject} from 'rxjs';\nimport {filter, startWith, take} from 'rxjs/operators';\nimport {matExpansionAnimations} from './expansion-animations';\nimport {MatExpansionPanelContent} from './expansion-panel-content';\nimport {MAT_ACCORDION, MatAccordionBase} from './accordion-base';\n\n// TODO(devversion): workaround for https://github.com/angular/material2/issues/12760\nexport const _CdkAccordionItem = CdkAccordionItem;\n\n/** MatExpansionPanel's states. */\nexport type MatExpansionPanelState = 'expanded' | 'collapsed';\n\n/** Counter for generating unique element ids. */\nlet uniqueId = 0;\n\n/**\n * `<mat-expansion-panel>`\n *\n * This component can be used as a single element to show expandable content, or as one of\n * multiple children of an element with the MatAccordion directive attached.\n */\n@Component({\n  moduleId: module.id,\n  styleUrls: ['./expansion-panel.css'],\n  selector: 'mat-expansion-panel',\n  exportAs: 'matExpansionPanel',\n  templateUrl: './expansion-panel.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  inputs: ['disabled', 'expanded'],\n  outputs: ['opened', 'closed', 'expandedChange'],\n  animations: [matExpansionAnimations.bodyExpansion],\n  providers: [\n    // Provide MatAccordion as undefined to prevent nested expansion panels from registering\n    // to the same accordion.\n    {provide: MAT_ACCORDION, useValue: undefined},\n  ],\n  host: {\n    'class': 'mat-expansion-panel',\n    '[class.mat-expanded]': 'expanded',\n    '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"',\n    '[class.mat-expansion-panel-spacing]': '_hasSpacing()',\n  }\n})\nexport class MatExpansionPanel extends CdkAccordionItem implements AfterContentInit, OnChanges,\n  OnDestroy {\n\n  // @breaking-change 8.0.0 Remove `| undefined` from here\n  // when the `_document` constructor param is required.\n  private _document: Document | undefined;\n\n  /** Whether the toggle indicator should be hidden. */\n  @Input()\n  get hideToggle(): boolean {\n    return this._hideToggle || (this.accordion && this.accordion.hideToggle);\n  }\n  set hideToggle(value: boolean) {\n    this._hideToggle = coerceBooleanProperty(value);\n  }\n  private _hideToggle = false;\n\n  /** An event emitted after the body's expansion animation happens. */\n  @Output() afterExpand = new EventEmitter<void>();\n\n  /** An event emitted after the body's collapse animation happens. */\n  @Output() afterCollapse = new EventEmitter<void>();\n\n  /** Stream that emits for changes in `@Input` properties. */\n  readonly _inputChanges = new Subject<SimpleChanges>();\n\n  /** Optionally defined accordion the expansion panel belongs to. */\n  accordion: MatAccordionBase;\n\n  /** Content that will be rendered lazily. */\n  @ContentChild(MatExpansionPanelContent) _lazyContent: MatExpansionPanelContent;\n\n  /** Element containing the panel's user-provided content. */\n  @ViewChild('body') _body: ElementRef<HTMLElement>;\n\n  /** Portal holding the user's content. */\n  _portal: TemplatePortal;\n\n  /** ID for the associated header element. Used for a11y labelling. */\n  _headerId = `mat-expansion-panel-header-${uniqueId++}`;\n\n  constructor(@Optional() @SkipSelf() @Inject(MAT_ACCORDION) accordion: MatAccordionBase,\n              _changeDetectorRef: ChangeDetectorRef,\n              _uniqueSelectionDispatcher: UniqueSelectionDispatcher,\n              private _viewContainerRef: ViewContainerRef,\n              // @breaking-change 8.0.0 _document and _animationMode to be made required\n              @Inject(DOCUMENT) _document?: any,\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode?: string) {\n    super(accordion, _changeDetectorRef, _uniqueSelectionDispatcher);\n    this.accordion = accordion;\n    this._document = _document;\n  }\n\n  /** Determines whether the expansion panel should have spacing between it and its siblings. */\n  _hasSpacing(): boolean {\n    if (this.accordion) {\n      // We don't need to subscribe to the `stateChanges` of the parent accordion because each time\n      // the [displayMode] input changes, the change detection will also cover the host bindings\n      // of this expansion panel.\n      return (this.expanded ? this.accordion.displayMode : this._getExpandedState()) === 'default';\n    }\n    return false;\n  }\n\n  /** Gets the expanded state string. */\n  _getExpandedState(): MatExpansionPanelState {\n    return this.expanded ? 'expanded' : 'collapsed';\n  }\n\n  ngAfterContentInit() {\n    if (this._lazyContent) {\n      // Render the content as soon as the panel becomes open.\n      this.opened.pipe(\n        startWith<void>(null!),\n        filter(() => this.expanded && !this._portal),\n        take(1)\n      ).subscribe(() => {\n        this._portal = new TemplatePortal(this._lazyContent._template, this._viewContainerRef);\n      });\n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    this._inputChanges.next(changes);\n  }\n\n  ngOnDestroy() {\n    super.ngOnDestroy();\n    this._inputChanges.complete();\n  }\n\n  _bodyAnimation(event: AnimationEvent) {\n    const classList = event.element.classList;\n    const cssClass = 'mat-expanded';\n    const {phaseName, toState, fromState} = event;\n\n    // Toggle the body's `overflow: hidden` class when closing starts or when expansion ends in\n    // order to prevent the cases where switching too early would cause the animation to jump.\n    // Note that we do it directly on the DOM element to avoid the slight delay that comes\n    // with doing it via change detection.\n    if (phaseName === 'done' && toState === 'expanded') {\n      classList.add(cssClass);\n    }\n    if (phaseName === 'start' && toState === 'collapsed') {\n      classList.remove(cssClass);\n    }\n\n    if (phaseName === 'done' && toState === 'expanded' && fromState !== 'void') {\n      this.afterExpand.emit();\n    }\n    if (phaseName === 'done' && toState === 'collapsed' && fromState !== 'void') {\n      this.afterCollapse.emit();\n    }\n  }\n\n  /** Checks whether the expansion panel's content contains the currently-focused element. */\n  _containsFocus(): boolean {\n    if (this._body && this._document) {\n      const focusedElement = this._document.activeElement;\n      const bodyElement = this._body.nativeElement;\n      return focusedElement === bodyElement || bodyElement.contains(focusedElement);\n    }\n\n    return false;\n  }\n}\n\n@Directive({\n  selector: 'mat-action-row',\n  host: {\n    class: 'mat-action-row'\n  }\n})\nexport class MatExpansionPanelActionRow {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  EventEmitter,\n  Input,\n  Output,\n  ViewEncapsulation,\n  NgZone,\n} from '@angular/core';\nimport {take} from 'rxjs/operators';\n\n/**\n * An internal class that represents the data corresponding to a single calendar cell.\n * @docs-private\n */\nexport class MatCalendarCell {\n  constructor(public value: number,\n              public displayValue: string,\n              public ariaLabel: string,\n              public enabled: boolean) {}\n}\n\n\n/**\n * An internal component used to display calendar data in a table.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: '[mat-calendar-body]',\n  templateUrl: 'calendar-body.html',\n  styleUrls: ['calendar-body.css'],\n  host: {\n    'class': 'mat-calendar-body',\n    'role': 'grid',\n    'aria-readonly': 'true'\n  },\n  exportAs: 'matCalendarBody',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatCalendarBody {\n  /** The label for the table. (e.g. \"Jan 2017\"). */\n  @Input() label: string;\n\n  /** The cells to display in the table. */\n  @Input() rows: MatCalendarCell[][];\n\n  /** The value in the table that corresponds to today. */\n  @Input() todayValue: number;\n\n  /** The value in the table that is currently selected. */\n  @Input() selectedValue: number;\n\n  /** The minimum number of free cells needed to fit the label in the first row. */\n  @Input() labelMinRequiredCells: number;\n\n  /** The number of columns in the table. */\n  @Input() numCols = 7;\n\n  /** Whether to allow selection of disabled cells. */\n  @Input() allowDisabledSelection = false;\n\n  /** The cell number of the active cell in the table. */\n  @Input() activeCell = 0;\n\n  /**\n   * The aspect ratio (width / height) to use for the cells in the table. This aspect ratio will be\n   * maintained even as the table resizes.\n   */\n  @Input() cellAspectRatio = 1;\n\n  /** Emits when a new value is selected. */\n  @Output() readonly selectedValueChange: EventEmitter<number> = new EventEmitter<number>();\n\n  constructor(private _elementRef: ElementRef<HTMLElement>, private _ngZone: NgZone) { }\n\n  _cellClicked(cell: MatCalendarCell): void {\n    if (!this.allowDisabledSelection && !cell.enabled) {\n      return;\n    }\n    this.selectedValueChange.emit(cell.value);\n  }\n\n  /** The number of blank cells to put at the beginning for the first row. */\n  get _firstRowOffset(): number {\n    return this.rows && this.rows.length && this.rows[0].length ?\n        this.numCols - this.rows[0].length : 0;\n  }\n\n  _isActiveCell(rowIndex: number, colIndex: number): boolean {\n    let cellNumber = rowIndex * this.numCols + colIndex;\n\n    // Account for the fact that the first row may not have as many cells.\n    if (rowIndex) {\n      cellNumber -= this._firstRowOffset;\n    }\n\n    return cellNumber == this.activeCell;\n  }\n\n  /** Focuses the active cell after the microtask queue is empty. */\n  _focusActiveCell() {\n    this._ngZone.runOutsideAngular(() => {\n      this._ngZone.onStable.asObservable().pipe(take(1)).subscribe(() => {\n        const activeCell: HTMLElement | null =\n            this._elementRef.nativeElement.querySelector('.mat-calendar-body-active');\n\n        if (activeCell) {\n          activeCell.focus();\n        }\n      });\n    });\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  DOWN_ARROW,\n  END,\n  ENTER,\n  HOME,\n  LEFT_ARROW,\n  PAGE_DOWN,\n  PAGE_UP,\n  RIGHT_ARROW,\n  UP_ARROW,\n  SPACE,\n} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  EventEmitter,\n  Inject,\n  Input,\n  Optional,\n  Output,\n  ViewEncapsulation,\n  ViewChild,\n} from '@angular/core';\nimport {DateAdapter, MAT_DATE_FORMATS, MatDateFormats} from '@angular/material/core';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {MatCalendarBody, MatCalendarCell} from './calendar-body';\nimport {createMissingDateImplError} from './datepicker-errors';\n\n\nconst DAYS_PER_WEEK = 7;\n\n\n/**\n * An internal component used to display a single month in the datepicker.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-month-view',\n  templateUrl: 'month-view.html',\n  exportAs: 'matMonthView',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class MatMonthView<D> implements AfterContentInit {\n  /**\n   * The date to display in this month view (everything other than the month and year is ignored).\n   */\n  @Input()\n  get activeDate(): D { return this._activeDate; }\n  set activeDate(value: D) {\n    const oldActiveDate = this._activeDate;\n    const validDate =\n        this._getValidDateOrNull(this._dateAdapter.deserialize(value)) || this._dateAdapter.today();\n    this._activeDate = this._dateAdapter.clampDate(validDate, this.minDate, this.maxDate);\n    if (!this._hasSameMonthAndYear(oldActiveDate, this._activeDate)) {\n      this._init();\n    }\n  }\n  private _activeDate: D;\n\n  /** The currently selected date. */\n  @Input()\n  get selected(): D | null { return this._selected; }\n  set selected(value: D | null) {\n    this._selected = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n    this._selectedDate = this._getDateInCurrentMonth(this._selected);\n  }\n  private _selected: D | null;\n\n  /** The minimum selectable date. */\n  @Input()\n  get minDate(): D | null { return this._minDate; }\n  set minDate(value: D | null) {\n    this._minDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _minDate: D | null;\n\n  /** The maximum selectable date. */\n  @Input()\n  get maxDate(): D | null { return this._maxDate; }\n  set maxDate(value: D | null) {\n    this._maxDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _maxDate: D | null;\n\n  /** A function used to filter which dates are selectable. */\n  @Input() dateFilter: (date: D) => boolean;\n\n  /** Emits when a new date is selected. */\n  @Output() readonly selectedChange: EventEmitter<D | null> = new EventEmitter<D | null>();\n\n  /** Emits when any date is selected. */\n  @Output() readonly _userSelection: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Emits when any date is activated. */\n  @Output() readonly activeDateChange: EventEmitter<D> = new EventEmitter<D>();\n\n  /** The body of calendar table */\n  @ViewChild(MatCalendarBody) _matCalendarBody: MatCalendarBody;\n\n  /** The label for this month (e.g. \"January 2017\"). */\n  _monthLabel: string;\n\n  /** Grid of calendar cells representing the dates of the month. */\n  _weeks: MatCalendarCell[][];\n\n  /** The number of blank cells in the first row before the 1st of the month. */\n  _firstWeekOffset: number;\n\n  /**\n   * The date of the month that the currently selected Date falls on.\n   * Null if the currently selected Date is in another month.\n   */\n  _selectedDate: number | null;\n\n  /** The date of the month that today falls on. Null if today is in another month. */\n  _todayDate: number | null;\n\n  /** The names of the weekdays. */\n  _weekdays: {long: string, narrow: string}[];\n\n  constructor(private _changeDetectorRef: ChangeDetectorRef,\n              @Optional() @Inject(MAT_DATE_FORMATS) private _dateFormats: MatDateFormats,\n              @Optional() public _dateAdapter: DateAdapter<D>,\n              @Optional() private _dir?: Directionality) {\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n    if (!this._dateFormats) {\n      throw createMissingDateImplError('MAT_DATE_FORMATS');\n    }\n\n    const firstDayOfWeek = this._dateAdapter.getFirstDayOfWeek();\n    const narrowWeekdays = this._dateAdapter.getDayOfWeekNames('narrow');\n    const longWeekdays = this._dateAdapter.getDayOfWeekNames('long');\n\n    // Rotate the labels for days of the week based on the configured first day of the week.\n    let weekdays = longWeekdays.map((long, i) => {\n      return {long, narrow: narrowWeekdays[i]};\n    });\n    this._weekdays = weekdays.slice(firstDayOfWeek).concat(weekdays.slice(0, firstDayOfWeek));\n\n    this._activeDate = this._dateAdapter.today();\n  }\n\n  ngAfterContentInit() {\n    this._init();\n  }\n\n  /** Handles when a new date is selected. */\n  _dateSelected(date: number) {\n    if (this._selectedDate != date) {\n      const selectedYear = this._dateAdapter.getYear(this.activeDate);\n      const selectedMonth = this._dateAdapter.getMonth(this.activeDate);\n      const selectedDate = this._dateAdapter.createDate(selectedYear, selectedMonth, date);\n\n      this.selectedChange.emit(selectedDate);\n    }\n\n    this._userSelection.emit();\n  }\n\n  /** Handles keydown events on the calendar body when calendar is in month view. */\n  _handleCalendarBodyKeydown(event: KeyboardEvent): void {\n    // TODO(mmalerba): We currently allow keyboard navigation to disabled dates, but just prevent\n    // disabled ones from being selected. This may not be ideal, we should look into whether\n    // navigation should skip over disabled dates, and if so, how to implement that efficiently.\n\n    const oldActiveDate = this._activeDate;\n    const isRtl = this._isRtl();\n\n    switch (event.keyCode) {\n      case LEFT_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate, isRtl ? 1 : -1);\n        break;\n      case RIGHT_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate, isRtl ? -1 : 1);\n        break;\n      case UP_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate, -7);\n        break;\n      case DOWN_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate, 7);\n        break;\n      case HOME:\n        this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate,\n            1 - this._dateAdapter.getDate(this._activeDate));\n        break;\n      case END:\n        this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate,\n            (this._dateAdapter.getNumDaysInMonth(this._activeDate) -\n              this._dateAdapter.getDate(this._activeDate)));\n        break;\n      case PAGE_UP:\n        this.activeDate = event.altKey ?\n            this._dateAdapter.addCalendarYears(this._activeDate, -1) :\n            this._dateAdapter.addCalendarMonths(this._activeDate, -1);\n        break;\n      case PAGE_DOWN:\n        this.activeDate = event.altKey ?\n            this._dateAdapter.addCalendarYears(this._activeDate, 1) :\n            this._dateAdapter.addCalendarMonths(this._activeDate, 1);\n        break;\n      case ENTER:\n      case SPACE:\n        if (!this.dateFilter || this.dateFilter(this._activeDate)) {\n          this._dateSelected(this._dateAdapter.getDate(this._activeDate));\n          this._userSelection.emit();\n          // Prevent unexpected default actions such as form submission.\n          event.preventDefault();\n        }\n        return;\n      default:\n        // Don't prevent default or focus active cell on keys that we don't explicitly handle.\n        return;\n    }\n\n    if (this._dateAdapter.compareDate(oldActiveDate, this.activeDate)) {\n      this.activeDateChange.emit(this.activeDate);\n    }\n\n    this._focusActiveCell();\n    // Prevent unexpected default actions such as form submission.\n    event.preventDefault();\n  }\n\n  /** Initializes this month view. */\n  _init() {\n    this._selectedDate = this._getDateInCurrentMonth(this.selected);\n    this._todayDate = this._getDateInCurrentMonth(this._dateAdapter.today());\n    this._monthLabel =\n        this._dateAdapter.getMonthNames('short')[this._dateAdapter.getMonth(this.activeDate)]\n            .toLocaleUpperCase();\n\n    let firstOfMonth = this._dateAdapter.createDate(this._dateAdapter.getYear(this.activeDate),\n        this._dateAdapter.getMonth(this.activeDate), 1);\n    this._firstWeekOffset =\n        (DAYS_PER_WEEK + this._dateAdapter.getDayOfWeek(firstOfMonth) -\n         this._dateAdapter.getFirstDayOfWeek()) % DAYS_PER_WEEK;\n\n    this._createWeekCells();\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Focuses the active cell after the microtask queue is empty. */\n  _focusActiveCell() {\n    this._matCalendarBody._focusActiveCell();\n  }\n\n  /** Creates MatCalendarCells for the dates in this month. */\n  private _createWeekCells() {\n    const daysInMonth = this._dateAdapter.getNumDaysInMonth(this.activeDate);\n    const dateNames = this._dateAdapter.getDateNames();\n    this._weeks = [[]];\n    for (let i = 0, cell = this._firstWeekOffset; i < daysInMonth; i++, cell++) {\n      if (cell == DAYS_PER_WEEK) {\n        this._weeks.push([]);\n        cell = 0;\n      }\n      const date = this._dateAdapter.createDate(\n            this._dateAdapter.getYear(this.activeDate),\n            this._dateAdapter.getMonth(this.activeDate), i + 1);\n      const enabled = this._shouldEnableDate(date);\n      const ariaLabel = this._dateAdapter.format(date, this._dateFormats.display.dateA11yLabel);\n      this._weeks[this._weeks.length - 1]\n          .push(new MatCalendarCell(i + 1, dateNames[i], ariaLabel, enabled));\n    }\n  }\n\n  /** Date filter for the month */\n  private _shouldEnableDate(date: D): boolean {\n    return !!date &&\n        (!this.dateFilter || this.dateFilter(date)) &&\n        (!this.minDate || this._dateAdapter.compareDate(date, this.minDate) >= 0) &&\n        (!this.maxDate || this._dateAdapter.compareDate(date, this.maxDate) <= 0);\n  }\n\n  /**\n   * Gets the date in this month that the given Date falls on.\n   * Returns null if the given Date is in another month.\n   */\n  private _getDateInCurrentMonth(date: D | null): number | null {\n    return date && this._hasSameMonthAndYear(date, this.activeDate) ?\n        this._dateAdapter.getDate(date) : null;\n  }\n\n  /** Checks whether the 2 dates are non-null and fall within the same month of the same year. */\n  private _hasSameMonthAndYear(d1: D | null, d2: D | null): boolean {\n    return !!(d1 && d2 && this._dateAdapter.getMonth(d1) == this._dateAdapter.getMonth(d2) &&\n              this._dateAdapter.getYear(d1) == this._dateAdapter.getYear(d2));\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n\n  /** Determines whether the user has the RTL layout direction. */\n  private _isRtl() {\n    return this._dir && this._dir.value === 'rtl';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  DOWN_ARROW,\n  END,\n  ENTER,\n  HOME,\n  LEFT_ARROW,\n  PAGE_DOWN,\n  PAGE_UP,\n  RIGHT_ARROW,\n  UP_ARROW,\n  SPACE,\n} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  EventEmitter,\n  Input,\n  Optional,\n  Output,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {DateAdapter} from '@angular/material/core';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {MatCalendarBody, MatCalendarCell} from './calendar-body';\nimport {createMissingDateImplError} from './datepicker-errors';\n\nexport const yearsPerPage = 24;\n\nexport const yearsPerRow = 4;\n\n\n/**\n * An internal component used to display a year selector in the datepicker.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-multi-year-view',\n  templateUrl: 'multi-year-view.html',\n  exportAs: 'matMultiYearView',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class MatMultiYearView<D> implements AfterContentInit {\n  /** The date to display in this multi-year view (everything other than the year is ignored). */\n  @Input()\n  get activeDate(): D { return this._activeDate; }\n  set activeDate(value: D) {\n    let oldActiveDate = this._activeDate;\n    const validDate =\n        this._getValidDateOrNull(this._dateAdapter.deserialize(value)) || this._dateAdapter.today();\n    this._activeDate = this._dateAdapter.clampDate(validDate, this.minDate, this.maxDate);\n    if (Math.floor(this._dateAdapter.getYear(oldActiveDate) / yearsPerPage) !=\n        Math.floor(this._dateAdapter.getYear(this._activeDate) / yearsPerPage)) {\n      this._init();\n    }\n  }\n  private _activeDate: D;\n\n  /** The currently selected date. */\n  @Input()\n  get selected(): D | null { return this._selected; }\n  set selected(value: D | null) {\n    this._selected = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n    this._selectedYear = this._selected && this._dateAdapter.getYear(this._selected);\n  }\n  private _selected: D | null;\n\n  /** The minimum selectable date. */\n  @Input()\n  get minDate(): D | null { return this._minDate; }\n  set minDate(value: D | null) {\n    this._minDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _minDate: D | null;\n\n  /** The maximum selectable date. */\n  @Input()\n  get maxDate(): D | null { return this._maxDate; }\n  set maxDate(value: D | null) {\n    this._maxDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _maxDate: D | null;\n\n  /** A function used to filter which dates are selectable. */\n  @Input() dateFilter: (date: D) => boolean;\n\n  /** Emits when a new year is selected. */\n  @Output() readonly selectedChange: EventEmitter<D> = new EventEmitter<D>();\n\n  /** Emits the selected year. This doesn't imply a change on the selected date */\n  @Output() readonly yearSelected: EventEmitter<D> = new EventEmitter<D>();\n\n  /** Emits when any date is activated. */\n  @Output() readonly activeDateChange: EventEmitter<D> = new EventEmitter<D>();\n\n  /** The body of calendar table */\n  @ViewChild(MatCalendarBody) _matCalendarBody: MatCalendarBody;\n\n  /** Grid of calendar cells representing the currently displayed years. */\n  _years: MatCalendarCell[][];\n\n  /** The year that today falls on. */\n  _todayYear: number;\n\n  /** The year of the selected date. Null if the selected date is null. */\n  _selectedYear: number | null;\n\n  constructor(private _changeDetectorRef: ChangeDetectorRef,\n              @Optional() public _dateAdapter: DateAdapter<D>,\n              @Optional() private _dir?: Directionality) {\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n\n    this._activeDate = this._dateAdapter.today();\n  }\n\n  ngAfterContentInit() {\n    this._init();\n  }\n\n  /** Initializes this multi-year view. */\n  _init() {\n    this._todayYear = this._dateAdapter.getYear(this._dateAdapter.today());\n    let activeYear = this._dateAdapter.getYear(this._activeDate);\n    let activeOffset = activeYear % yearsPerPage;\n    this._years = [];\n    for (let i = 0, row: number[] = []; i < yearsPerPage; i++) {\n      row.push(activeYear - activeOffset + i);\n      if (row.length == yearsPerRow) {\n        this._years.push(row.map(year => this._createCellForYear(year)));\n        row = [];\n      }\n    }\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Handles when a new year is selected. */\n  _yearSelected(year: number) {\n    this.yearSelected.emit(this._dateAdapter.createDate(year, 0, 1));\n    let month = this._dateAdapter.getMonth(this.activeDate);\n    let daysInMonth =\n        this._dateAdapter.getNumDaysInMonth(this._dateAdapter.createDate(year, month, 1));\n    this.selectedChange.emit(this._dateAdapter.createDate(year, month,\n        Math.min(this._dateAdapter.getDate(this.activeDate), daysInMonth)));\n  }\n\n  /** Handles keydown events on the calendar body when calendar is in multi-year view. */\n  _handleCalendarBodyKeydown(event: KeyboardEvent): void {\n    // TODO(mmalerba): We currently allow keyboard navigation to disabled dates, but just prevent\n    // disabled ones from being selected. This may not be ideal, we should look into whether\n    // navigation should skip over disabled dates, and if so, how to implement that efficiently.\n\n    const oldActiveDate = this._activeDate;\n    const isRtl = this._isRtl();\n\n    switch (event.keyCode) {\n      case LEFT_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate, isRtl ? 1 : -1);\n        break;\n      case RIGHT_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate, isRtl ? -1 : 1);\n        break;\n      case UP_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate, -yearsPerRow);\n        break;\n      case DOWN_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate, yearsPerRow);\n        break;\n      case HOME:\n        this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate,\n            -this._dateAdapter.getYear(this._activeDate) % yearsPerPage);\n        break;\n      case END:\n        this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate,\n            yearsPerPage - this._dateAdapter.getYear(this._activeDate) % yearsPerPage - 1);\n        break;\n      case PAGE_UP:\n        this.activeDate =\n            this._dateAdapter.addCalendarYears(\n                this._activeDate, event.altKey ? -yearsPerPage * 10 : -yearsPerPage);\n        break;\n      case PAGE_DOWN:\n        this.activeDate =\n            this._dateAdapter.addCalendarYears(\n                this._activeDate, event.altKey ? yearsPerPage * 10 : yearsPerPage);\n        break;\n      case ENTER:\n      case SPACE:\n        this._yearSelected(this._dateAdapter.getYear(this._activeDate));\n        break;\n      default:\n        // Don't prevent default or focus active cell on keys that we don't explicitly handle.\n        return;\n    }\n\n    if (this._dateAdapter.compareDate(oldActiveDate, this.activeDate)) {\n      this.activeDateChange.emit(this.activeDate);\n    }\n\n    this._focusActiveCell();\n    // Prevent unexpected default actions such as form submission.\n    event.preventDefault();\n  }\n\n  _getActiveCell(): number {\n    return this._dateAdapter.getYear(this.activeDate) % yearsPerPage;\n  }\n\n  /** Focuses the active cell after the microtask queue is empty. */\n  _focusActiveCell() {\n    this._matCalendarBody._focusActiveCell();\n  }\n\n  /** Creates an MatCalendarCell for the given year. */\n  private _createCellForYear(year: number) {\n    let yearName = this._dateAdapter.getYearName(this._dateAdapter.createDate(year, 0, 1));\n    return new MatCalendarCell(year, yearName, yearName, this._shouldEnableYear(year));\n  }\n\n  /** Whether the given year is enabled. */\n  private _shouldEnableYear(year: number) {\n    // disable if the year is greater than maxDate lower than minDate\n    if (year === undefined || year === null ||\n        (this.maxDate && year > this._dateAdapter.getYear(this.maxDate)) ||\n        (this.minDate && year < this._dateAdapter.getYear(this.minDate))) {\n      return false;\n    }\n\n    // enable if it reaches here and there's no filter defined\n    if (!this.dateFilter) {\n      return true;\n    }\n\n    const firstOfYear = this._dateAdapter.createDate(year, 0, 1);\n\n    // If any date in the year is enabled count the year as enabled.\n    for (let date = firstOfYear; this._dateAdapter.getYear(date) == year;\n      date = this._dateAdapter.addCalendarDays(date, 1)) {\n      if (this.dateFilter(date)) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n\n  /** Determines whether the user has the RTL layout direction. */\n  private _isRtl() {\n    return this._dir && this._dir.value === 'rtl';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  DOWN_ARROW,\n  END,\n  ENTER,\n  HOME,\n  LEFT_ARROW,\n  PAGE_DOWN,\n  PAGE_UP,\n  RIGHT_ARROW,\n  UP_ARROW,\n  SPACE,\n} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  EventEmitter,\n  Inject,\n  Input,\n  Optional,\n  Output,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {DateAdapter, MAT_DATE_FORMATS, MatDateFormats} from '@angular/material/core';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {MatCalendarBody, MatCalendarCell} from './calendar-body';\nimport {createMissingDateImplError} from './datepicker-errors';\n\n/**\n * An internal component used to display a single year in the datepicker.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-year-view',\n  templateUrl: 'year-view.html',\n  exportAs: 'matYearView',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class MatYearView<D> implements AfterContentInit {\n  /** The date to display in this year view (everything other than the year is ignored). */\n  @Input()\n  get activeDate(): D { return this._activeDate; }\n  set activeDate(value: D) {\n    let oldActiveDate = this._activeDate;\n    const validDate =\n        this._getValidDateOrNull(this._dateAdapter.deserialize(value)) || this._dateAdapter.today();\n    this._activeDate = this._dateAdapter.clampDate(validDate, this.minDate, this.maxDate);\n    if (this._dateAdapter.getYear(oldActiveDate) !== this._dateAdapter.getYear(this._activeDate)) {\n      this._init();\n    }\n  }\n  private _activeDate: D;\n\n  /** The currently selected date. */\n  @Input()\n  get selected(): D | null { return this._selected; }\n  set selected(value: D | null) {\n    this._selected = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n    this._selectedMonth = this._getMonthInCurrentYear(this._selected);\n  }\n  private _selected: D | null;\n\n  /** The minimum selectable date. */\n  @Input()\n  get minDate(): D | null { return this._minDate; }\n  set minDate(value: D | null) {\n    this._minDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _minDate: D | null;\n\n  /** The maximum selectable date. */\n  @Input()\n  get maxDate(): D | null { return this._maxDate; }\n  set maxDate(value: D | null) {\n    this._maxDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _maxDate: D | null;\n\n  /** A function used to filter which dates are selectable. */\n  @Input() dateFilter: (date: D) => boolean;\n\n  /** Emits when a new month is selected. */\n  @Output() readonly selectedChange: EventEmitter<D> = new EventEmitter<D>();\n\n  /** Emits the selected month. This doesn't imply a change on the selected date */\n  @Output() readonly monthSelected: EventEmitter<D> = new EventEmitter<D>();\n\n  /** Emits when any date is activated. */\n  @Output() readonly activeDateChange: EventEmitter<D> = new EventEmitter<D>();\n\n  /** The body of calendar table */\n  @ViewChild(MatCalendarBody) _matCalendarBody: MatCalendarBody;\n\n  /** Grid of calendar cells representing the months of the year. */\n  _months: MatCalendarCell[][];\n\n  /** The label for this year (e.g. \"2017\"). */\n  _yearLabel: string;\n\n  /** The month in this year that today falls on. Null if today is in a different year. */\n  _todayMonth: number | null;\n\n  /**\n   * The month in this year that the selected Date falls on.\n   * Null if the selected Date is in a different year.\n   */\n  _selectedMonth: number | null;\n\n  constructor(private _changeDetectorRef: ChangeDetectorRef,\n              @Optional() @Inject(MAT_DATE_FORMATS) private _dateFormats: MatDateFormats,\n              @Optional() public _dateAdapter: DateAdapter<D>,\n              @Optional() private _dir?: Directionality) {\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n    if (!this._dateFormats) {\n      throw createMissingDateImplError('MAT_DATE_FORMATS');\n    }\n\n    this._activeDate = this._dateAdapter.today();\n  }\n\n  ngAfterContentInit() {\n    this._init();\n  }\n\n  /** Handles when a new month is selected. */\n  _monthSelected(month: number) {\n    const normalizedDate =\n          this._dateAdapter.createDate(this._dateAdapter.getYear(this.activeDate), month, 1);\n\n    this.monthSelected.emit(normalizedDate);\n\n    const daysInMonth = this._dateAdapter.getNumDaysInMonth(normalizedDate);\n\n    this.selectedChange.emit(this._dateAdapter.createDate(\n        this._dateAdapter.getYear(this.activeDate), month,\n        Math.min(this._dateAdapter.getDate(this.activeDate), daysInMonth)));\n  }\n\n  /** Handles keydown events on the calendar body when calendar is in year view. */\n  _handleCalendarBodyKeydown(event: KeyboardEvent): void {\n    // TODO(mmalerba): We currently allow keyboard navigation to disabled dates, but just prevent\n    // disabled ones from being selected. This may not be ideal, we should look into whether\n    // navigation should skip over disabled dates, and if so, how to implement that efficiently.\n\n    const oldActiveDate = this._activeDate;\n    const isRtl = this._isRtl();\n\n    switch (event.keyCode) {\n      case LEFT_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate, isRtl ? 1 : -1);\n        break;\n      case RIGHT_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate, isRtl ? -1 : 1);\n        break;\n      case UP_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate, -4);\n        break;\n      case DOWN_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate, 4);\n        break;\n      case HOME:\n        this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate,\n            -this._dateAdapter.getMonth(this._activeDate));\n        break;\n      case END:\n        this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate,\n            11 - this._dateAdapter.getMonth(this._activeDate));\n        break;\n      case PAGE_UP:\n        this.activeDate =\n            this._dateAdapter.addCalendarYears(this._activeDate, event.altKey ? -10 : -1);\n        break;\n      case PAGE_DOWN:\n        this.activeDate =\n            this._dateAdapter.addCalendarYears(this._activeDate, event.altKey ? 10 : 1);\n        break;\n      case ENTER:\n      case SPACE:\n        this._monthSelected(this._dateAdapter.getMonth(this._activeDate));\n        break;\n      default:\n        // Don't prevent default or focus active cell on keys that we don't explicitly handle.\n        return;\n    }\n\n    if (this._dateAdapter.compareDate(oldActiveDate, this.activeDate)) {\n      this.activeDateChange.emit(this.activeDate);\n    }\n\n    this._focusActiveCell();\n    // Prevent unexpected default actions such as form submission.\n    event.preventDefault();\n  }\n\n  /** Initializes this year view. */\n  _init() {\n    this._selectedMonth = this._getMonthInCurrentYear(this.selected);\n    this._todayMonth = this._getMonthInCurrentYear(this._dateAdapter.today());\n    this._yearLabel = this._dateAdapter.getYearName(this.activeDate);\n\n    let monthNames = this._dateAdapter.getMonthNames('short');\n    // First row of months only contains 5 elements so we can fit the year label on the same row.\n    this._months = [[0, 1, 2, 3], [4, 5, 6, 7], [8, 9, 10, 11]].map(row => row.map(\n        month => this._createCellForMonth(month, monthNames[month])));\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Focuses the active cell after the microtask queue is empty. */\n  _focusActiveCell() {\n    this._matCalendarBody._focusActiveCell();\n  }\n\n  /**\n   * Gets the month in this year that the given Date falls on.\n   * Returns null if the given Date is in another year.\n   */\n  private _getMonthInCurrentYear(date: D | null) {\n    return date && this._dateAdapter.getYear(date) == this._dateAdapter.getYear(this.activeDate) ?\n        this._dateAdapter.getMonth(date) : null;\n  }\n\n  /** Creates an MatCalendarCell for the given month. */\n  private _createCellForMonth(month: number, monthName: string) {\n    let ariaLabel = this._dateAdapter.format(\n        this._dateAdapter.createDate(this._dateAdapter.getYear(this.activeDate), month, 1),\n        this._dateFormats.display.monthYearA11yLabel);\n    return new MatCalendarCell(\n        month, monthName.toLocaleUpperCase(), ariaLabel, this._shouldEnableMonth(month));\n  }\n\n  /** Whether the given month is enabled. */\n  private _shouldEnableMonth(month: number) {\n\n    const activeYear = this._dateAdapter.getYear(this.activeDate);\n\n    if (month === undefined || month === null ||\n        this._isYearAndMonthAfterMaxDate(activeYear, month) ||\n        this._isYearAndMonthBeforeMinDate(activeYear, month)) {\n      return false;\n    }\n\n    if (!this.dateFilter) {\n      return true;\n    }\n\n    const firstOfMonth = this._dateAdapter.createDate(activeYear, month, 1);\n\n    // If any date in the month is enabled count the month as enabled.\n    for (let date = firstOfMonth; this._dateAdapter.getMonth(date) == month;\n         date = this._dateAdapter.addCalendarDays(date, 1)) {\n      if (this.dateFilter(date)) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  /**\n   * Tests whether the combination month/year is after this.maxDate, considering\n   * just the month and year of this.maxDate\n   */\n  private _isYearAndMonthAfterMaxDate(year: number, month: number) {\n    if (this.maxDate) {\n      const maxYear = this._dateAdapter.getYear(this.maxDate);\n      const maxMonth = this._dateAdapter.getMonth(this.maxDate);\n\n      return year > maxYear || (year === maxYear && month > maxMonth);\n    }\n\n    return false;\n  }\n\n  /**\n   * Tests whether the combination month/year is before this.minDate, considering\n   * just the month and year of this.minDate\n   */\n  private _isYearAndMonthBeforeMinDate(year: number, month: number) {\n    if (this.minDate) {\n      const minYear = this._dateAdapter.getYear(this.minDate);\n      const minMonth = this._dateAdapter.getMonth(this.minDate);\n\n      return year < minYear || (year === minYear && month < minMonth);\n    }\n\n    return false;\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n\n  /** Determines whether the user has the RTL layout direction. */\n  private _isRtl() {\n    return this._dir && this._dir.value === 'rtl';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusKeyManager} from '@angular/cdk/a11y';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {SelectionModel} from '@angular/cdk/collections';\nimport {BACKSPACE, END, HOME} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  DoCheck,\n  ElementRef,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Output,\n  QueryList,\n  Self,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {ControlValueAccessor, FormGroupDirective, NgControl, NgForm} from '@angular/forms';\nimport {\n  CanUpdateErrorState,\n  CanUpdateErrorStateCtor,\n  ErrorStateMatcher,\n  mixinErrorState,\n} from '@angular/material/core';\nimport {MatFormFieldControl} from '@angular/material/form-field';\nimport {merge, Observable, Subject, Subscription} from 'rxjs';\nimport {startWith, takeUntil} from 'rxjs/operators';\nimport {MatChip, MatChipEvent, MatChipSelectionChange} from './chip';\nimport {MatChipInput} from './chip-input';\n\n\n// Boilerplate for applying mixins to MatChipList.\n/** @docs-private */\nexport class MatChipListBase {\n  constructor(public _defaultErrorStateMatcher: ErrorStateMatcher,\n              public _parentForm: NgForm,\n              public _parentFormGroup: FormGroupDirective,\n              /** @docs-private */\n              public ngControl: NgControl) {}\n}\nexport const _MatChipListMixinBase: CanUpdateErrorStateCtor & typeof MatChipListBase =\n    mixinErrorState(MatChipListBase);\n\n\n// Increasing integer for generating unique ids for chip-list components.\nlet nextUniqueId = 0;\n\n/** Change event object that is emitted when the chip list value has changed. */\nexport class MatChipListChange {\n  constructor(\n    /** Chip list that emitted the event. */\n    public source: MatChipList,\n    /** Value of the chip list when the event was emitted. */\n    public value: any) { }\n}\n\n\n/**\n * A material design chips component (named ChipList for it's similarity to the List component).\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-chip-list',\n  template: `<div class=\"mat-chip-list-wrapper\"><ng-content></ng-content></div>`,\n  exportAs: 'matChipList',\n  host: {\n    '[attr.tabindex]': 'disabled ? null : _tabIndex',\n    '[attr.aria-describedby]': '_ariaDescribedby || null',\n    '[attr.aria-required]': 'required.toString()',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.aria-invalid]': 'errorState',\n    '[attr.aria-multiselectable]': 'multiple',\n    '[attr.role]': 'role',\n    '[class.mat-chip-list-disabled]': 'disabled',\n    '[class.mat-chip-list-invalid]': 'errorState',\n    '[class.mat-chip-list-required]': 'required',\n    '[attr.aria-orientation]': 'ariaOrientation',\n    'class': 'mat-chip-list',\n    '(focus)': 'focus()',\n    '(blur)': '_blur()',\n    '(keydown)': '_keydown($event)',\n    '[id]': '_uid',\n  },\n  providers: [{provide: MatFormFieldControl, useExisting: MatChipList}],\n  styleUrls: ['chips.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class MatChipList extends _MatChipListMixinBase implements MatFormFieldControl<any>,\n  ControlValueAccessor, AfterContentInit, DoCheck, OnInit, OnDestroy, CanUpdateErrorState {\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  readonly controlType: string = 'mat-chip-list';\n\n  /**\n   * When a chip is destroyed, we store the index of the destroyed chip until the chips\n   * query list notifies about the update. This is necessary because we cannot determine an\n   * appropriate chip that should receive focus until the array of chips updated completely.\n   */\n  private _lastDestroyedChipIndex: number | null = null;\n\n  /** Subject that emits when the component has been destroyed. */\n  private _destroyed = new Subject<void>();\n\n  /** Subscription to focus changes in the chips. */\n  private _chipFocusSubscription: Subscription | null;\n\n  /** Subscription to blur changes in the chips. */\n  private _chipBlurSubscription: Subscription | null;\n\n  /** Subscription to selection changes in chips. */\n  private _chipSelectionSubscription: Subscription | null;\n\n  /** Subscription to remove changes in chips. */\n  private _chipRemoveSubscription: Subscription | null;\n\n  /** The chip input to add more chips */\n  protected _chipInput: MatChipInput;\n\n  /** Uid of the chip list */\n  _uid: string = `mat-chip-list-${nextUniqueId++}`;\n\n  /** The aria-describedby attribute on the chip list for improved a11y. */\n  _ariaDescribedby: string;\n\n  /** Tab index for the chip list. */\n  _tabIndex = 0;\n\n  /**\n   * User defined tab index.\n   * When it is not null, use user defined tab index. Otherwise use _tabIndex\n   */\n  _userTabIndex: number | null = null;\n\n  /** The FocusKeyManager which handles focus. */\n  _keyManager: FocusKeyManager<MatChip>;\n\n  /** Function when touched */\n  _onTouched = () => {};\n\n  /** Function when changed */\n  _onChange: (value: any) => void = () => {};\n\n  _selectionModel: SelectionModel<MatChip>;\n\n  /** The array of selected chips inside chip list. */\n  get selected(): MatChip[] | MatChip {\n    return this.multiple ? this._selectionModel.selected : this._selectionModel.selected[0];\n  }\n\n  /** The ARIA role applied to the chip list. */\n  get role(): string | null { return this.empty ? null : 'listbox'; }\n\n  /** An object used to control when error messages are shown. */\n  @Input() errorStateMatcher: ErrorStateMatcher;\n\n  /** Whether the user should be allowed to select multiple chips. */\n  @Input()\n  get multiple(): boolean { return this._multiple; }\n  set multiple(value: boolean) {\n    this._multiple = coerceBooleanProperty(value);\n  }\n  private _multiple: boolean = false;\n\n  /**\n   * A function to compare the option values with the selected values. The first argument\n   * is a value from an option. The second is a value from the selection. A boolean\n   * should be returned.\n   */\n  @Input()\n  get compareWith(): (o1: any, o2: any) => boolean { return this._compareWith; }\n  set compareWith(fn: (o1: any, o2: any) => boolean) {\n    this._compareWith = fn;\n    if (this._selectionModel) {\n      // A different comparator means the selection could change.\n      this._initializeSelection();\n    }\n  }\n  private _compareWith = (o1: any, o2: any) => o1 === o2;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get value(): any { return this._value; }\n  set value(value: any) {\n    this.writeValue(value);\n    this._value = value;\n  }\n  protected _value: any;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  get id(): string {\n    return this._chipInput ? this._chipInput.id : this._uid;\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get required(): boolean { return this._required; }\n  set required(value: boolean) {\n    this._required = coerceBooleanProperty(value);\n    this.stateChanges.next();\n  }\n  protected _required: boolean = false;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get placeholder(): string {\n    return this._chipInput ? this._chipInput.placeholder : this._placeholder;\n  }\n  set placeholder(value: string) {\n    this._placeholder = value;\n    this.stateChanges.next();\n  }\n  protected _placeholder: string;\n\n  /** Whether any chips or the matChipInput inside of this chip-list has focus. */\n  get focused(): boolean {\n    return (this._chipInput && this._chipInput.focused) || this.chips.some(chip => chip._hasFocus);\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  get empty(): boolean {\n    return (!this._chipInput || this._chipInput.empty) && this.chips.length === 0;\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  get shouldLabelFloat(): boolean { return !this.empty || this.focused; }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get disabled(): boolean { return this.ngControl ? !!this.ngControl.disabled : this._disabled; }\n  set disabled(value: boolean) {\n    this._disabled = coerceBooleanProperty(value);\n\n    if (this.chips) {\n      this.chips.forEach(chip => chip.disabled = this._disabled);\n    }\n  }\n  protected _disabled: boolean = false;\n\n  /** Orientation of the chip list. */\n  @Input('aria-orientation') ariaOrientation: 'horizontal' | 'vertical' = 'horizontal';\n\n  /**\n   * Whether or not this chip list is selectable. When a chip list is not selectable,\n   * the selected states for all the chips inside the chip list are always ignored.\n   */\n  @Input()\n  get selectable(): boolean { return this._selectable; }\n  set selectable(value: boolean) {\n    this._selectable = coerceBooleanProperty(value);\n\n    if (this.chips) {\n      this.chips.forEach(chip => chip.chipListSelectable = this._selectable);\n    }\n  }\n  protected _selectable: boolean = true;\n\n  @Input()\n  set tabIndex(value: number) {\n    this._userTabIndex = value;\n    this._tabIndex = value;\n  }\n\n  /** Combined stream of all of the child chips' selection change events. */\n  get chipSelectionChanges(): Observable<MatChipSelectionChange> {\n    return merge(...this.chips.map(chip => chip.selectionChange));\n  }\n\n  /** Combined stream of all of the child chips' focus change events. */\n  get chipFocusChanges(): Observable<MatChipEvent> {\n    return merge(...this.chips.map(chip => chip._onFocus));\n  }\n\n  /** Combined stream of all of the child chips' blur change events. */\n  get chipBlurChanges(): Observable<MatChipEvent> {\n    return merge(...this.chips.map(chip => chip._onBlur));\n  }\n\n  /** Combined stream of all of the child chips' remove change events. */\n  get chipRemoveChanges(): Observable<MatChipEvent> {\n    return merge(...this.chips.map(chip => chip.destroyed));\n  }\n\n  /** Event emitted when the selected chip list value has been changed by the user. */\n  @Output() readonly change: EventEmitter<MatChipListChange> =\n      new EventEmitter<MatChipListChange>();\n\n  /**\n   * Event that emits whenever the raw value of the chip-list changes. This is here primarily\n   * to facilitate the two-way binding for the `value` input.\n   * @docs-private\n   */\n  @Output() readonly valueChange: EventEmitter<any> = new EventEmitter<any>();\n\n  /** The chip components contained within this chip list. */\n  @ContentChildren(MatChip) chips: QueryList<MatChip>;\n\n  constructor(protected _elementRef: ElementRef<HTMLElement>,\n              private _changeDetectorRef: ChangeDetectorRef,\n              @Optional() private _dir: Directionality,\n              @Optional() _parentForm: NgForm,\n              @Optional() _parentFormGroup: FormGroupDirective,\n              _defaultErrorStateMatcher: ErrorStateMatcher,\n              /** @docs-private */\n              @Optional() @Self() public ngControl: NgControl) {\n    super(_defaultErrorStateMatcher, _parentForm, _parentFormGroup, ngControl);\n    if (this.ngControl) {\n      this.ngControl.valueAccessor = this;\n    }\n  }\n\n  ngAfterContentInit() {\n    this._keyManager = new FocusKeyManager<MatChip>(this.chips)\n      .withWrap()\n      .withVerticalOrientation()\n      .withHorizontalOrientation(this._dir ? this._dir.value : 'ltr');\n\n    // Prevents the chip list from capturing focus and redirecting\n    // it back to the first chip when the user tabs out.\n    this._keyManager.tabOut.pipe(takeUntil(this._destroyed)).subscribe(() => {\n      this._tabIndex = -1;\n      setTimeout(() => this._tabIndex = this._userTabIndex || 0);\n    });\n\n    // When the list changes, re-subscribe\n    this.chips.changes.pipe(startWith(null), takeUntil(this._destroyed)).subscribe(() => {\n      this._resetChips();\n\n      // Reset chips selected/deselected status\n      this._initializeSelection();\n\n      // Check to see if we need to update our tab index\n      this._updateTabIndex();\n\n      // Check to see if we have a destroyed chip and need to refocus\n      this._updateFocusForDestroyedChips();\n\n      this.stateChanges.next();\n    });\n  }\n\n  ngOnInit() {\n    this._selectionModel = new SelectionModel<MatChip>(this.multiple, undefined, false);\n    this.stateChanges.next();\n  }\n\n  ngDoCheck() {\n    if (this.ngControl) {\n      // We need to re-evaluate this on every change detection cycle, because there are some\n      // error triggers that we can't subscribe to (e.g. parent form submissions). This means\n      // that whatever logic is in here has to be super lean or we risk destroying the performance.\n      this.updateErrorState();\n    }\n  }\n\n  ngOnDestroy() {\n    this._destroyed.next();\n    this._destroyed.complete();\n    this.stateChanges.complete();\n\n    this._dropSubscriptions();\n  }\n\n\n  /** Associates an HTML input element with this chip list. */\n  registerInput(inputElement: MatChipInput): void {\n    this._chipInput = inputElement;\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  setDescribedByIds(ids: string[]) { this._ariaDescribedby = ids.join(' '); }\n\n  // Implemented as part of ControlValueAccessor.\n  writeValue(value: any): void {\n    if (this.chips) {\n      this._setSelectionByValue(value, false);\n    }\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnChange(fn: (value: any) => void): void {\n    this._onChange = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnTouched(fn: () => void): void {\n    this._onTouched = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n    this.stateChanges.next();\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  onContainerClick(event: MouseEvent) {\n    if (!this._originatesFromChip(event)) {\n      this.focus();\n    }\n  }\n\n  /**\n   * Focuses the the first non-disabled chip in this chip list, or the associated input when there\n   * are no eligible chips.\n   */\n  focus(): void {\n    if (this.disabled) {\n      return;\n    }\n\n    // TODO: ARIA says this should focus the first `selected` chip if any are selected.\n    // Focus on first element if there's no chipInput inside chip-list\n    if (this._chipInput && this._chipInput.focused) {\n      // do nothing\n    } else if (this.chips.length > 0) {\n      this._keyManager.setFirstItemActive();\n      this.stateChanges.next();\n    } else {\n      this._focusInput();\n      this.stateChanges.next();\n    }\n  }\n\n  /** Attempt to focus an input if we have one. */\n  _focusInput() {\n    if (this._chipInput) {\n      this._chipInput.focus();\n    }\n  }\n\n  /**\n   * Pass events to the keyboard manager. Available here for tests.\n   */\n  _keydown(event: KeyboardEvent) {\n    const target = event.target as HTMLElement;\n\n    // If they are on an empty input and hit backspace, focus the last chip\n    if (event.keyCode === BACKSPACE && this._isInputEmpty(target)) {\n      this._keyManager.setLastItemActive();\n      event.preventDefault();\n    } else if (target && target.classList.contains('mat-chip')) {\n      if (event.keyCode === HOME) {\n        this._keyManager.setFirstItemActive();\n        event.preventDefault();\n      } else if (event.keyCode === END) {\n        this._keyManager.setLastItemActive();\n        event.preventDefault();\n      } else {\n        this._keyManager.onKeydown(event);\n      }\n\n      this.stateChanges.next();\n    }\n  }\n\n\n  /**\n   * Check the tab index as you should not be allowed to focus an empty list.\n   */\n  protected _updateTabIndex(): void {\n    // If we have 0 chips, we should not allow keyboard focus\n    this._tabIndex = this._userTabIndex || (this.chips.length === 0 ? -1 : 0);\n  }\n\n  /**\n   * If the amount of chips changed, we need to update the\n   * key manager state and focus the next closest chip.\n   */\n  protected _updateFocusForDestroyedChips() {\n    if (this._lastDestroyedChipIndex != null && this.chips.length) {\n      const newChipIndex = Math.min(this._lastDestroyedChipIndex, this.chips.length - 1);\n      this._keyManager.setActiveItem(newChipIndex);\n    }\n\n    this._lastDestroyedChipIndex = null;\n  }\n\n  /**\n   * Utility to ensure all indexes are valid.\n   *\n   * @param index The index to be checked.\n   * @returns True if the index is valid for our list of chips.\n   */\n  private _isValidIndex(index: number): boolean {\n    return index >= 0 && index < this.chips.length;\n  }\n\n  private _isInputEmpty(element: HTMLElement): boolean {\n    if (element && element.nodeName.toLowerCase() === 'input') {\n      let input = element as HTMLInputElement;\n      return !input.value;\n    }\n\n    return false;\n  }\n\n  _setSelectionByValue(value: any, isUserInput: boolean = true) {\n    this._clearSelection();\n    this.chips.forEach(chip => chip.deselect());\n\n    if (Array.isArray(value)) {\n      value.forEach(currentValue => this._selectValue(currentValue, isUserInput));\n      this._sortValues();\n    } else {\n      const correspondingChip = this._selectValue(value, isUserInput);\n\n      // Shift focus to the active item. Note that we shouldn't do this in multiple\n      // mode, because we don't know what chip the user interacted with last.\n      if (correspondingChip) {\n        if (isUserInput) {\n          this._keyManager.setActiveItem(correspondingChip);\n        }\n      }\n    }\n  }\n\n  /**\n   * Finds and selects the chip based on its value.\n   * @returns Chip that has the corresponding value.\n   */\n  private _selectValue(value: any, isUserInput: boolean = true): MatChip | undefined {\n\n    const correspondingChip = this.chips.find(chip => {\n      return chip.value != null && this._compareWith(chip.value,  value);\n    });\n\n    if (correspondingChip) {\n      isUserInput ? correspondingChip.selectViaInteraction() : correspondingChip.select();\n      this._selectionModel.select(correspondingChip);\n    }\n\n    return correspondingChip;\n  }\n\n  private _initializeSelection(): void {\n    // Defer setting the value in order to avoid the \"Expression\n    // has changed after it was checked\" errors from Angular.\n    Promise.resolve().then(() => {\n      if (this.ngControl || this._value) {\n        this._setSelectionByValue(this.ngControl ? this.ngControl.value : this._value, false);\n        this.stateChanges.next();\n      }\n    });\n  }\n\n  /**\n   * Deselects every chip in the list.\n   * @param skip Chip that should not be deselected.\n   */\n  private _clearSelection(skip?: MatChip): void {\n    this._selectionModel.clear();\n    this.chips.forEach(chip => {\n      if (chip !== skip) {\n        chip.deselect();\n      }\n    });\n    this.stateChanges.next();\n  }\n\n  /**\n   * Sorts the model values, ensuring that they keep the same\n   * order that they have in the panel.\n   */\n  private _sortValues(): void {\n    if (this._multiple) {\n      this._selectionModel.clear();\n\n      this.chips.forEach(chip => {\n        if (chip.selected) {\n          this._selectionModel.select(chip);\n        }\n      });\n      this.stateChanges.next();\n    }\n  }\n\n  /** Emits change event to set the model value. */\n  private _propagateChanges(fallbackValue?: any): void {\n    let valueToEmit: any = null;\n\n    if (Array.isArray(this.selected)) {\n      valueToEmit = this.selected.map(chip => chip.value);\n    } else {\n      valueToEmit = this.selected ? this.selected.value : fallbackValue;\n    }\n    this._value = valueToEmit;\n    this.change.emit(new MatChipListChange(this, valueToEmit));\n    this.valueChange.emit(valueToEmit);\n    this._onChange(valueToEmit);\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** When blurred, mark the field as touched when focus moved outside the chip list. */\n  _blur() {\n    this._keyManager.setActiveItem(-1);\n    if (!this.disabled) {\n      if (this._chipInput) {\n        // If there's a chip input, we should check whether the focus moved to chip input.\n        // If the focus is not moved to chip input, mark the field as touched. If the focus moved\n        // to chip input, do nothing.\n        // Timeout is needed to wait for the focus() event trigger on chip input.\n        setTimeout(() => {\n          if (!this.focused) {\n            this._markAsTouched();\n          }\n        });\n      } else {\n        // If there's no chip input, then mark the field as touched.\n        this._markAsTouched();\n      }\n    }\n  }\n\n  /** Mark the field as touched */\n  _markAsTouched() {\n    this._onTouched();\n    this._changeDetectorRef.markForCheck();\n    this.stateChanges.next();\n  }\n\n  private _resetChips() {\n    this._dropSubscriptions();\n    this._listenToChipsFocus();\n    this._listenToChipsSelection();\n    this._listenToChipsRemoved();\n  }\n\n  private _dropSubscriptions() {\n    if (this._chipFocusSubscription) {\n      this._chipFocusSubscription.unsubscribe();\n      this._chipFocusSubscription = null;\n    }\n\n    if (this._chipBlurSubscription) {\n      this._chipBlurSubscription.unsubscribe();\n      this._chipBlurSubscription = null;\n    }\n\n    if (this._chipSelectionSubscription) {\n      this._chipSelectionSubscription.unsubscribe();\n      this._chipSelectionSubscription = null;\n    }\n\n    if (this._chipRemoveSubscription) {\n      this._chipRemoveSubscription.unsubscribe();\n      this._chipRemoveSubscription = null;\n    }\n  }\n\n  /** Listens to user-generated selection events on each chip. */\n  private _listenToChipsSelection(): void {\n    this._chipSelectionSubscription = this.chipSelectionChanges.subscribe(event => {\n      event.source.selected\n        ? this._selectionModel.select(event.source)\n        : this._selectionModel.deselect(event.source);\n\n      // For single selection chip list, make sure the deselected value is unselected.\n      if (!this.multiple) {\n        this.chips.forEach(chip => {\n          if (!this._selectionModel.isSelected(chip) && chip.selected) {\n            chip.deselect();\n          }\n        });\n      }\n\n      if (event.isUserInput) {\n        this._propagateChanges();\n      }\n    });\n  }\n\n  /** Listens to user-generated selection events on each chip. */\n  private _listenToChipsFocus(): void {\n    this._chipFocusSubscription = this.chipFocusChanges.subscribe(event => {\n      let chipIndex: number = this.chips.toArray().indexOf(event.chip);\n\n      if (this._isValidIndex(chipIndex)) {\n        this._keyManager.updateActiveItemIndex(chipIndex);\n      }\n      this.stateChanges.next();\n    });\n\n    this._chipBlurSubscription = this.chipBlurChanges.subscribe(() => {\n      this._blur();\n      this.stateChanges.next();\n    });\n  }\n\n  private _listenToChipsRemoved(): void {\n    this._chipRemoveSubscription = this.chipRemoveChanges.subscribe(event => {\n      const chip = event.chip;\n      const chipIndex = this.chips.toArray().indexOf(event.chip);\n\n      // In case the chip that will be removed is currently focused, we temporarily store\n      // the index in order to be able to determine an appropriate sibling chip that will\n      // receive focus.\n      if (this._isValidIndex(chipIndex) && chip._hasFocus) {\n        this._lastDestroyedChipIndex = chipIndex;\n      }\n    });\n  }\n\n  /** Checks whether an event comes from inside a chip element. */\n  private _originatesFromChip(event: Event): boolean {\n    let currentElement = event.target as HTMLElement | null;\n\n    while (currentElement && currentElement !== this._elementRef.nativeElement) {\n      if (currentElement.classList.contains('mat-chip')) {\n        return true;\n      }\n\n      currentElement = currentElement.parentElement;\n    }\n\n    return false;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {Directive, ElementRef, EventEmitter, Input, Output, Inject, OnChanges} from '@angular/core';\nimport {MatChipList} from './chip-list';\nimport {MAT_CHIPS_DEFAULT_OPTIONS, MatChipsDefaultOptions} from './chip-default-options';\n\n\n/** Represents an input event on a `matChipInput`. */\nexport interface MatChipInputEvent {\n  /** The native `<input>` element that the event is being fired for. */\n  input: HTMLInputElement;\n\n  /** The value of the input. */\n  value: string;\n}\n\n// Increasing integer for generating unique ids.\nlet nextUniqueId = 0;\n\n/**\n * Directive that adds chip-specific behaviors to an input element inside `<mat-form-field>`.\n * May be placed inside or outside of an `<mat-chip-list>`.\n */\n@Directive({\n  selector: 'input[matChipInputFor]',\n  exportAs: 'matChipInput, matChipInputFor',\n  host: {\n    'class': 'mat-chip-input mat-input-element',\n    '(keydown)': '_keydown($event)',\n    '(blur)': '_blur()',\n    '(focus)': '_focus()',\n    '(input)': '_onInput()',\n    '[id]': 'id',\n    '[attr.disabled]': 'disabled || null',\n    '[attr.placeholder]': 'placeholder || null',\n  }\n})\nexport class MatChipInput implements OnChanges {\n  /** Whether the control is focused. */\n  focused: boolean = false;\n  _chipList: MatChipList;\n\n  /** Register input for chip list */\n  @Input('matChipInputFor')\n  set chipList(value: MatChipList) {\n    if (value) {\n      this._chipList = value;\n      this._chipList.registerInput(this);\n    }\n  }\n\n  /**\n   * Whether or not the chipEnd event will be emitted when the input is blurred.\n   */\n  @Input('matChipInputAddOnBlur')\n  get addOnBlur(): boolean { return this._addOnBlur; }\n  set addOnBlur(value: boolean) { this._addOnBlur = coerceBooleanProperty(value); }\n  _addOnBlur: boolean = false;\n\n  /**\n   * The list of key codes that will trigger a chipEnd event.\n   *\n   * Defaults to `[ENTER]`.\n   */\n  @Input('matChipInputSeparatorKeyCodes')\n  separatorKeyCodes: number[] | Set<number> = this._defaultOptions.separatorKeyCodes;\n\n  /** Emitted when a chip is to be added. */\n  @Output('matChipInputTokenEnd')\n  chipEnd: EventEmitter<MatChipInputEvent> = new EventEmitter<MatChipInputEvent>();\n\n  /** The input's placeholder text. */\n  @Input() placeholder: string = '';\n\n  /** Unique id for the input. */\n  @Input() id: string = `mat-chip-list-input-${nextUniqueId++}`;\n\n  /** Whether the input is disabled. */\n  @Input()\n  get disabled(): boolean { return this._disabled || (this._chipList && this._chipList.disabled); }\n  set disabled(value: boolean) { this._disabled = coerceBooleanProperty(value); }\n  private _disabled: boolean = false;\n\n  /** Whether the input is empty. */\n  get empty(): boolean { return !this._inputElement.value; }\n\n  /** The native input element to which this directive is attached. */\n  protected _inputElement: HTMLInputElement;\n\n  constructor(\n    protected _elementRef: ElementRef<HTMLInputElement>,\n    @Inject(MAT_CHIPS_DEFAULT_OPTIONS) private _defaultOptions: MatChipsDefaultOptions) {\n    this._inputElement = this._elementRef.nativeElement as HTMLInputElement;\n  }\n\n  ngOnChanges() {\n    this._chipList.stateChanges.next();\n  }\n\n  /** Utility method to make host definition/tests more clear. */\n  _keydown(event?: KeyboardEvent) {\n    this._emitChipEnd(event);\n  }\n\n  /** Checks to see if the blur should emit the (chipEnd) event. */\n  _blur() {\n    if (this.addOnBlur) {\n      this._emitChipEnd();\n    }\n    this.focused = false;\n    // Blur the chip list if it is not focused\n    if (!this._chipList.focused) {\n      this._chipList._blur();\n    }\n    this._chipList.stateChanges.next();\n  }\n\n  _focus() {\n    this.focused = true;\n    this._chipList.stateChanges.next();\n  }\n\n  /** Checks to see if the (chipEnd) event needs to be emitted. */\n  _emitChipEnd(event?: KeyboardEvent) {\n    if (!this._inputElement.value && !!event) {\n      this._chipList._keydown(event);\n    }\n    if (!event || this._isSeparatorKey(event.keyCode)) {\n      this.chipEnd.emit({ input: this._inputElement, value: this._inputElement.value });\n\n      if (event) {\n        event.preventDefault();\n      }\n    }\n  }\n\n  _onInput() {\n    // Let chip list know whenever the value changes.\n    this._chipList.stateChanges.next();\n  }\n\n  /** Focuses the input. */\n  focus(): void {\n    this._inputElement.focus();\n  }\n\n  /** Checks whether a keycode is one of the configured separators. */\n  private _isSeparatorKey(keyCode: number) {\n    const separators = this.separatorKeyCodes;\n    return Array.isArray(separators) ? separators.indexOf(keyCode) > -1 : separators.has(keyCode);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ENTER} from '@angular/cdk/keycodes';\nimport {NgModule} from '@angular/core';\nimport {ErrorStateMatcher} from '@angular/material/core';\nimport {MatChip, MatChipAvatar, MatChipRemove, MatChipTrailingIcon} from './chip';\nimport {MAT_CHIPS_DEFAULT_OPTIONS, MatChipsDefaultOptions} from './chip-default-options';\nimport {MatChipInput} from './chip-input';\nimport {MatChipList} from './chip-list';\n\nconst CHIP_DECLARATIONS = [\n  MatChipList,\n  MatChip,\n  MatChipInput,\n  MatChipRemove,\n  MatChipAvatar,\n  MatChipTrailingIcon,\n];\n\n@NgModule({\n  exports: CHIP_DECLARATIONS,\n  declarations: CHIP_DECLARATIONS,\n  providers: [\n    ErrorStateMatcher,\n    {\n      provide: MAT_CHIPS_DEFAULT_OPTIONS,\n      useValue: {\n        separatorKeyCodes: [ENTER]\n      } as MatChipsDefaultOptions\n    }\n  ]\n})\nexport class MatChipsModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ViewContainerRef} from '@angular/core';\nimport {Direction} from '@angular/cdk/bidi';\nimport {ScrollStrategy} from '@angular/cdk/overlay';\n\n/** Valid ARIA roles for a dialog element. */\nexport type DialogRole = 'dialog' | 'alertdialog';\n\n/** Possible overrides for a dialog's position. */\nexport interface DialogPosition {\n  /** Override for the dialog's top position. */\n  top?: string;\n\n  /** Override for the dialog's bottom position. */\n  bottom?: string;\n\n  /** Override for the dialog's left position. */\n  left?: string;\n\n  /** Override for the dialog's right position. */\n  right?: string;\n}\n\n/**\n * Configuration for opening a modal dialog with the MatDialog service.\n */\nexport class MatDialogConfig<D = any> {\n\n  /**\n   * Where the attached component should live in Angular's *logical* component tree.\n   * This affects what is available for injection and the change detection order for the\n   * component instantiated inside of the dialog. This does not affect where the dialog\n   * content will be rendered.\n   */\n  viewContainerRef?: ViewContainerRef;\n\n  /** ID for the dialog. If omitted, a unique one will be generated. */\n  id?: string;\n\n  /** The ARIA role of the dialog element. */\n  role?: DialogRole = 'dialog';\n\n  /** Custom class for the overlay pane. */\n  panelClass?: string | string[] = '';\n\n  /** Whether the dialog has a backdrop. */\n  hasBackdrop?: boolean = true;\n\n  /** Custom class for the backdrop, */\n  backdropClass?: string = '';\n\n  /** Whether the user can use escape or clicking on the backdrop to close the modal. */\n  disableClose?: boolean = false;\n\n  /** Width of the dialog. */\n  width?: string = '';\n\n  /** Height of the dialog. */\n  height?: string = '';\n\n  /** Min-width of the dialog. If a number is provided, pixel units are assumed. */\n  minWidth?: number | string;\n\n  /** Min-height of the dialog. If a number is provided, pixel units are assumed. */\n  minHeight?: number | string;\n\n  /** Max-width of the dialog. If a number is provided, pixel units are assumed. Defaults to 80vw */\n  maxWidth?: number | string = '80vw';\n\n  /** Max-height of the dialog. If a number is provided, pixel units are assumed. */\n  maxHeight?: number | string;\n\n  /** Position overrides. */\n  position?: DialogPosition;\n\n  /** Data being injected into the child component. */\n  data?: D | null = null;\n\n  /** Layout direction for the dialog's content. */\n  direction?: Direction;\n\n  /** ID of the element that describes the dialog. */\n  ariaDescribedBy?: string | null = null;\n\n  /** Aria label to assign to the dialog element */\n  ariaLabel?: string | null = null;\n\n  /** Whether the dialog should focus the first focusable element on open. */\n  autoFocus?: boolean = true;\n\n  /**\n   * Whether the dialog should restore focus to the\n   * previously-focused element, after it's closed.\n   */\n  restoreFocus?: boolean = true;\n\n  /** Scroll strategy to be used for the dialog. */\n  scrollStrategy?: ScrollStrategy;\n\n  /** Whether the dialog should close when the user goes backwards/forwards in history. */\n  closeOnNavigation?: boolean = true;\n\n  // TODO(jelbourn): add configuration for lifecycle hooks, ARIA labelling.\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\nconst animationBody = [\n  // Note: The `enter` animation transitions to `transform: none`, because for some reason\n  // specifying the transform explicitly, causes IE both to blur the dialog content and\n  // decimate the animation performance. Leaving it as `none` solves both issues.\n  state('void, exit', style({opacity: 0, transform: 'scale(0.7)'})),\n  state('enter', style({transform: 'none'})),\n  transition('* => enter', animate('150ms cubic-bezier(0, 0, 0.2, 1)',\n      style({transform: 'none', opacity: 1}))),\n  transition('* => void, * => exit',\n      animate('75ms cubic-bezier(0.4, 0.0, 0.2, 1)', style({opacity: 0}))),\n];\n\n/** Animations used by MatDialog. */\nexport const matDialogAnimations: {\n  readonly dialogContainer: AnimationTriggerMetadata;\n  readonly slideDialog: AnimationTriggerMetadata;\n} = {\n  /** Animation that is applied on the dialog container by defalt. */\n  dialogContainer: trigger('dialogContainer', animationBody),\n\n  /** @deprecated @breaking-change 8.0.0 Use `matDialogAnimations.dialogContainer` instead. */\n  slideDialog: trigger('slideDialog', animationBody)\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ComponentRef,\n  ElementRef,\n  EmbeddedViewRef,\n  EventEmitter,\n  Inject,\n  Optional,\n  ChangeDetectorRef,\n  ViewChild,\n  ViewEncapsulation,\n  ChangeDetectionStrategy,\n} from '@angular/core';\nimport {DOCUMENT} from '@angular/common';\nimport {AnimationEvent} from '@angular/animations';\nimport {matDialogAnimations} from './dialog-animations';\nimport {\n  BasePortalOutlet,\n  ComponentPortal,\n  CdkPortalOutlet,\n  TemplatePortal\n} from '@angular/cdk/portal';\nimport {FocusTrap, FocusTrapFactory} from '@angular/cdk/a11y';\nimport {MatDialogConfig} from './dialog-config';\n\n\n/**\n * Throws an exception for the case when a ComponentPortal is\n * attached to a DomPortalOutlet without an origin.\n * @docs-private\n */\nexport function throwMatDialogContentAlreadyAttachedError() {\n  throw Error('Attempting to attach dialog content after content is already attached');\n}\n\n/**\n * Internal component that wraps user-provided dialog content.\n * Animation is based on https://material.io/guidelines/motion/choreography.html.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-dialog-container',\n  templateUrl: 'dialog-container.html',\n  styleUrls: ['dialog.css'],\n  encapsulation: ViewEncapsulation.None,\n  // Using OnPush for dialogs caused some G3 sync issues. Disabled until we can track them down.\n  // tslint:disable-next-line:validate-decorators\n  changeDetection: ChangeDetectionStrategy.Default,\n  animations: [matDialogAnimations.dialogContainer],\n  host: {\n    'class': 'mat-dialog-container',\n    'tabindex': '-1',\n    'aria-modal': 'true',\n    '[attr.id]': '_id',\n    '[attr.role]': '_config.role',\n    '[attr.aria-labelledby]': '_config.ariaLabel ? null : _ariaLabelledBy',\n    '[attr.aria-label]': '_config.ariaLabel',\n    '[attr.aria-describedby]': '_config.ariaDescribedBy || null',\n    '[@dialogContainer]': '_state',\n    '(@dialogContainer.start)': '_onAnimationStart($event)',\n    '(@dialogContainer.done)': '_onAnimationDone($event)',\n  },\n})\nexport class MatDialogContainer extends BasePortalOutlet {\n  /** The portal outlet inside of this container into which the dialog content will be loaded. */\n  @ViewChild(CdkPortalOutlet) _portalOutlet: CdkPortalOutlet;\n\n  /** The class that traps and manages focus within the dialog. */\n  private _focusTrap: FocusTrap;\n\n  /** Element that was focused before the dialog was opened. Save this to restore upon close. */\n  private _elementFocusedBeforeDialogWasOpened: HTMLElement | null = null;\n\n  /** State of the dialog animation. */\n  _state: 'void' | 'enter' | 'exit' = 'enter';\n\n  /** Emits when an animation state changes. */\n  _animationStateChanged = new EventEmitter<AnimationEvent>();\n\n  /** ID of the element that should be considered as the dialog's label. */\n  _ariaLabelledBy: string | null = null;\n\n  /** ID for the container DOM element. */\n  _id: string;\n\n  constructor(\n    private _elementRef: ElementRef,\n    private _focusTrapFactory: FocusTrapFactory,\n    private _changeDetectorRef: ChangeDetectorRef,\n    @Optional() @Inject(DOCUMENT) private _document: any,\n    /** The dialog configuration. */\n    public _config: MatDialogConfig) {\n\n    super();\n  }\n\n  /**\n   * Attach a ComponentPortal as content to this dialog container.\n   * @param portal Portal to be attached as the dialog content.\n   */\n  attachComponentPortal<T>(portal: ComponentPortal<T>): ComponentRef<T> {\n    if (this._portalOutlet.hasAttached()) {\n      throwMatDialogContentAlreadyAttachedError();\n    }\n\n    this._savePreviouslyFocusedElement();\n    return this._portalOutlet.attachComponentPortal(portal);\n  }\n\n  /**\n   * Attach a TemplatePortal as content to this dialog container.\n   * @param portal Portal to be attached as the dialog content.\n   */\n  attachTemplatePortal<C>(portal: TemplatePortal<C>): EmbeddedViewRef<C> {\n    if (this._portalOutlet.hasAttached()) {\n      throwMatDialogContentAlreadyAttachedError();\n    }\n\n    this._savePreviouslyFocusedElement();\n    return this._portalOutlet.attachTemplatePortal(portal);\n  }\n\n  /** Moves the focus inside the focus trap. */\n  private _trapFocus() {\n    if (!this._focusTrap) {\n      this._focusTrap = this._focusTrapFactory.create(this._elementRef.nativeElement);\n    }\n\n    // If were to attempt to focus immediately, then the content of the dialog would not yet be\n    // ready in instances where change detection has to run first. To deal with this, we simply\n    // wait for the microtask queue to be empty.\n    if (this._config.autoFocus) {\n      this._focusTrap.focusInitialElementWhenReady();\n    }\n  }\n\n  /** Restores focus to the element that was focused before the dialog opened. */\n  private _restoreFocus() {\n    const toFocus = this._elementFocusedBeforeDialogWasOpened;\n\n    // We need the extra check, because IE can set the `activeElement` to null in some cases.\n    if (this._config.restoreFocus && toFocus && typeof toFocus.focus === 'function') {\n      toFocus.focus();\n    }\n\n    if (this._focusTrap) {\n      this._focusTrap.destroy();\n    }\n  }\n\n  /** Saves a reference to the element that was focused before the dialog was opened. */\n  private _savePreviouslyFocusedElement() {\n    if (this._document) {\n      this._elementFocusedBeforeDialogWasOpened = this._document.activeElement as HTMLElement;\n\n      // Note that there is no focus method when rendering on the server.\n      if (this._elementRef.nativeElement.focus) {\n        // Move focus onto the dialog immediately in order to prevent the user from accidentally\n        // opening multiple dialogs at the same time. Needs to be async, because the element\n        // may not be focusable immediately.\n        Promise.resolve().then(() => this._elementRef.nativeElement.focus());\n      }\n    }\n  }\n\n  /** Callback, invoked whenever an animation on the host completes. */\n  _onAnimationDone(event: AnimationEvent) {\n    if (event.toState === 'enter') {\n      this._trapFocus();\n    } else if (event.toState === 'exit') {\n      this._restoreFocus();\n    }\n\n    this._animationStateChanged.emit(event);\n  }\n\n  /** Callback, invoked when an animation on the host starts. */\n  _onAnimationStart(event: AnimationEvent) {\n    this._animationStateChanged.emit(event);\n  }\n\n  /** Starts the dialog exit animation. */\n  _startExitAnimation(): void {\n    this._state = 'exit';\n\n    // Mark the container for check so it can react if the\n    // view container is using OnPush change detection.\n    this._changeDetectorRef.markForCheck();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ESCAPE} from '@angular/cdk/keycodes';\nimport {GlobalPositionStrategy, OverlayRef} from '@angular/cdk/overlay';\nimport {Location} from '@angular/common';\nimport {Observable, Subject, Subscription, SubscriptionLike} from 'rxjs';\nimport {filter, take} from 'rxjs/operators';\nimport {DialogPosition} from './dialog-config';\nimport {MatDialogContainer} from './dialog-container';\n\n\n// TODO(jelbourn): resizing\n\n// Counter for unique dialog ids.\nlet uniqueId = 0;\n\n/**\n * Reference to a dialog opened via the MatDialog service.\n */\nexport class MatDialogRef<T, R = any> {\n  /** The instance of component opened into the dialog. */\n  componentInstance: T;\n\n  /** Whether the user is allowed to close the dialog. */\n  disableClose: boolean | undefined = this._containerInstance._config.disableClose;\n\n  /** Subject for notifying the user that the dialog has finished opening. */\n  private readonly _afterOpened = new Subject<void>();\n\n  /** Subject for notifying the user that the dialog has finished closing. */\n  private readonly _afterClosed = new Subject<R | undefined>();\n\n  /** Subject for notifying the user that the dialog has started closing. */\n  private readonly _beforeClosed = new Subject<R | undefined>();\n\n  /** Result to be passed to afterClosed. */\n  private _result: R | undefined;\n\n  /** Subscription to changes in the user's location. */\n  private _locationChanges: SubscriptionLike = Subscription.EMPTY;\n\n  constructor(\n    private _overlayRef: OverlayRef,\n    public _containerInstance: MatDialogContainer,\n    location?: Location,\n    readonly id: string = `mat-dialog-${uniqueId++}`) {\n\n    // Pass the id along to the container.\n    _containerInstance._id = id;\n\n    // Emit when opening animation completes\n    _containerInstance._animationStateChanged.pipe(\n      filter(event => event.phaseName === 'done' && event.toState === 'enter'),\n      take(1)\n    )\n    .subscribe(() => {\n      this._afterOpened.next();\n      this._afterOpened.complete();\n    });\n\n    // Dispose overlay when closing animation is complete\n    _containerInstance._animationStateChanged.pipe(\n      filter(event => event.phaseName === 'done' && event.toState === 'exit'),\n      take(1)\n    ).subscribe(() => this._overlayRef.dispose());\n\n    _overlayRef.detachments().subscribe(() => {\n      this._beforeClosed.next(this._result);\n      this._beforeClosed.complete();\n      this._locationChanges.unsubscribe();\n      this._afterClosed.next(this._result);\n      this._afterClosed.complete();\n      this.componentInstance = null!;\n      this._overlayRef.dispose();\n    });\n\n    _overlayRef.keydownEvents()\n      .pipe(filter(event => event.keyCode === ESCAPE && !this.disableClose))\n      .subscribe(() => this.close());\n\n    if (location) {\n      // Close the dialog when the user goes forwards/backwards in history or when the location\n      // hash changes. Note that this usually doesn't include clicking on links (unless the user\n      // is using the `HashLocationStrategy`).\n      this._locationChanges = location.subscribe(() => {\n        if (this._containerInstance._config.closeOnNavigation) {\n          this.close();\n        }\n      });\n    }\n  }\n\n  /**\n   * Close the dialog.\n   * @param dialogResult Optional result to return to the dialog opener.\n   */\n  close(dialogResult?: R): void {\n    this._result = dialogResult;\n\n    // Transition the backdrop in parallel to the dialog.\n    this._containerInstance._animationStateChanged.pipe(\n      filter(event => event.phaseName === 'start'),\n      take(1)\n    )\n    .subscribe(() => {\n      this._beforeClosed.next(dialogResult);\n      this._beforeClosed.complete();\n      this._overlayRef.detachBackdrop();\n    });\n\n    this._containerInstance._startExitAnimation();\n  }\n\n  /**\n   * Gets an observable that is notified when the dialog is finished opening.\n   */\n  afterOpened(): Observable<void> {\n    return this._afterOpened.asObservable();\n  }\n\n  /**\n   * Gets an observable that is notified when the dialog is finished closing.\n   */\n  afterClosed(): Observable<R | undefined> {\n    return this._afterClosed.asObservable();\n  }\n\n  /**\n   * Gets an observable that is notified when the dialog has started closing.\n   */\n  beforeClosed(): Observable<R | undefined> {\n    return this._beforeClosed.asObservable();\n  }\n\n  /**\n   * Gets an observable that emits when the overlay's backdrop has been clicked.\n   */\n  backdropClick(): Observable<MouseEvent> {\n    return this._overlayRef.backdropClick();\n  }\n\n  /**\n   * Gets an observable that emits when keydown events are targeted on the overlay.\n   */\n  keydownEvents(): Observable<KeyboardEvent> {\n    return this._overlayRef.keydownEvents();\n  }\n\n  /**\n   * Updates the dialog's position.\n   * @param position New dialog position.\n   */\n  updatePosition(position?: DialogPosition): this {\n    let strategy = this._getPositionStrategy();\n\n    if (position && (position.left || position.right)) {\n      position.left ? strategy.left(position.left) : strategy.right(position.right);\n    } else {\n      strategy.centerHorizontally();\n    }\n\n    if (position && (position.top || position.bottom)) {\n      position.top ? strategy.top(position.top) : strategy.bottom(position.bottom);\n    } else {\n      strategy.centerVertically();\n    }\n\n    this._overlayRef.updatePosition();\n\n    return this;\n  }\n\n  /**\n   * Updates the dialog's width and height.\n   * @param width New width of the dialog.\n   * @param height New height of the dialog.\n   */\n  updateSize(width: string = '', height: string = ''): this {\n    this._getPositionStrategy().width(width).height(height);\n    this._overlayRef.updatePosition();\n    return this;\n  }\n\n  /**\n   * Gets an observable that is notified when the dialog is finished opening.\n   * @deprecated Use `afterOpened` instead.\n   * @breaking-change 8.0.0\n   */\n  afterOpen(): Observable<void> {\n    return this.afterOpened();\n  }\n\n  /**\n   * Gets an observable that is notified when the dialog has started closing.\n   * @deprecated Use `beforeClosed` instead.\n   * @breaking-change 8.0.0\n   */\n  beforeClose(): Observable<R | undefined> {\n    return this.beforeClosed();\n  }\n\n  /** Fetches the position strategy object from the overlay ref. */\n  private _getPositionStrategy(): GlobalPositionStrategy {\n    return this._overlayRef.getConfig().positionStrategy as GlobalPositionStrategy;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directionality} from '@angular/cdk/bidi';\nimport {\n  Overlay,\n  OverlayConfig,\n  OverlayContainer,\n  OverlayRef,\n  ScrollStrategy,\n} from '@angular/cdk/overlay';\nimport {ComponentPortal, ComponentType, PortalInjector, TemplatePortal} from '@angular/cdk/portal';\nimport {Location} from '@angular/common';\nimport {\n  Inject,\n  Injectable,\n  InjectionToken,\n  Injector,\n  Optional,\n  SkipSelf,\n  TemplateRef,\n} from '@angular/core';\nimport {defer, Observable, of as observableOf, Subject} from 'rxjs';\nimport {startWith} from 'rxjs/operators';\nimport {MatDialogConfig} from './dialog-config';\nimport {MatDialogContainer} from './dialog-container';\nimport {MatDialogRef} from './dialog-ref';\n\n\n/** Injection token that can be used to access the data that was passed in to a dialog. */\nexport const MAT_DIALOG_DATA = new InjectionToken<any>('MatDialogData');\n\n/** Injection token that can be used to specify default dialog options. */\nexport const MAT_DIALOG_DEFAULT_OPTIONS =\n    new InjectionToken<MatDialogConfig>('mat-dialog-default-options');\n\n/** Injection token that determines the scroll handling while the dialog is open. */\nexport const MAT_DIALOG_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mat-dialog-scroll-strategy');\n\n/** @docs-private */\nexport function MAT_DIALOG_SCROLL_STRATEGY_FACTORY(overlay: Overlay): ()  => ScrollStrategy {\n  return () => overlay.scrollStrategies.block();\n}\n\n/** @docs-private */\nexport function MAT_DIALOG_SCROLL_STRATEGY_PROVIDER_FACTORY(overlay: Overlay):\n    () => ScrollStrategy {\n  return () => overlay.scrollStrategies.block();\n}\n\n/** @docs-private */\nexport const MAT_DIALOG_SCROLL_STRATEGY_PROVIDER = {\n  provide: MAT_DIALOG_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_DIALOG_SCROLL_STRATEGY_PROVIDER_FACTORY,\n};\n\n\n/**\n * Service to open Material Design modal dialogs.\n */\n@Injectable()\nexport class MatDialog {\n  private _openDialogsAtThisLevel: MatDialogRef<any>[] = [];\n  private readonly _afterAllClosedAtThisLevel = new Subject<void>();\n  private readonly _afterOpenedAtThisLevel = new Subject<MatDialogRef<any>>();\n  private _ariaHiddenElements = new Map<Element, string|null>();\n\n  /** Keeps track of the currently-open dialogs. */\n  get openDialogs(): MatDialogRef<any>[] {\n    return this._parentDialog ? this._parentDialog.openDialogs : this._openDialogsAtThisLevel;\n  }\n\n  /** Stream that emits when a dialog has been opened. */\n  get afterOpened(): Subject<MatDialogRef<any>> {\n    return this._parentDialog ? this._parentDialog.afterOpened : this._afterOpenedAtThisLevel;\n  }\n\n  /**\n   * Stream that emits when a dialog has been opened.\n   * @deprecated Use `afterOpened` instead.\n   * @breaking-change 8.0.0\n   */\n  get afterOpen(): Subject<MatDialogRef<any>> {\n    return this.afterOpened;\n  }\n\n  get _afterAllClosed() {\n    const parent = this._parentDialog;\n    return parent ? parent._afterAllClosed : this._afterAllClosedAtThisLevel;\n  }\n\n  /**\n   * Stream that emits when all open dialog have finished closing.\n   * Will emit on subscribe if there are no open dialogs to begin with.\n   */\n  readonly afterAllClosed: Observable<void> = defer<void>(() => this.openDialogs.length ?\n      this._afterAllClosed :\n      this._afterAllClosed.pipe(startWith(undefined)));\n\n  constructor(\n      private _overlay: Overlay,\n      private _injector: Injector,\n      @Optional() private _location: Location,\n      @Optional() @Inject(MAT_DIALOG_DEFAULT_OPTIONS) private _defaultOptions,\n      @Inject(MAT_DIALOG_SCROLL_STRATEGY) private _scrollStrategy,\n      @Optional() @SkipSelf() private _parentDialog: MatDialog,\n      private _overlayContainer: OverlayContainer) {}\n\n  /**\n   * Opens a modal dialog containing the given component.\n   * @param componentOrTemplateRef Type of the component to load into the dialog,\n   *     or a TemplateRef to instantiate as the dialog content.\n   * @param config Extra configuration options.\n   * @returns Reference to the newly-opened dialog.\n   */\n  open<T, D = any, R = any>(componentOrTemplateRef: ComponentType<T> | TemplateRef<T>,\n          config?: MatDialogConfig<D>): MatDialogRef<T, R> {\n\n    config = _applyConfigDefaults(config, this._defaultOptions || new MatDialogConfig());\n\n    if (config.id && this.getDialogById(config.id)) {\n      throw Error(`Dialog with id \"${config.id}\" exists already. The dialog id must be unique.`);\n    }\n\n    const overlayRef = this._createOverlay(config);\n    const dialogContainer = this._attachDialogContainer(overlayRef, config);\n    const dialogRef = this._attachDialogContent<T, R>(componentOrTemplateRef,\n                                                      dialogContainer,\n                                                      overlayRef,\n                                                      config);\n\n    // If this is the first dialog that we're opening, hide all the non-overlay content.\n    if (!this.openDialogs.length) {\n      this._hideNonDialogContentFromAssistiveTechnology();\n    }\n\n    this.openDialogs.push(dialogRef);\n    dialogRef.afterClosed().subscribe(() => this._removeOpenDialog(dialogRef));\n    this.afterOpened.next(dialogRef);\n\n    return dialogRef;\n  }\n\n  /**\n   * Closes all of the currently-open dialogs.\n   */\n  closeAll(): void {\n    let i = this.openDialogs.length;\n\n    while (i--) {\n      // The `_openDialogs` property isn't updated after close until the rxjs subscription\n      // runs on the next microtask, in addition to modifying the array as we're going\n      // through it. We loop through all of them and call close without assuming that\n      // they'll be removed from the list instantaneously.\n      this.openDialogs[i].close();\n    }\n  }\n\n  /**\n   * Finds an open dialog by its id.\n   * @param id ID to use when looking up the dialog.\n   */\n  getDialogById(id: string): MatDialogRef<any> | undefined {\n    return this.openDialogs.find(dialog => dialog.id === id);\n  }\n\n  /**\n   * Creates the overlay into which the dialog will be loaded.\n   * @param config The dialog configuration.\n   * @returns A promise resolving to the OverlayRef for the created overlay.\n   */\n  private _createOverlay(config: MatDialogConfig): OverlayRef {\n    const overlayConfig = this._getOverlayConfig(config);\n    return this._overlay.create(overlayConfig);\n  }\n\n  /**\n   * Creates an overlay config from a dialog config.\n   * @param dialogConfig The dialog configuration.\n   * @returns The overlay configuration.\n   */\n  private _getOverlayConfig(dialogConfig: MatDialogConfig): OverlayConfig {\n    const state = new OverlayConfig({\n      positionStrategy: this._overlay.position().global(),\n      scrollStrategy: dialogConfig.scrollStrategy || this._scrollStrategy(),\n      panelClass: dialogConfig.panelClass,\n      hasBackdrop: dialogConfig.hasBackdrop,\n      direction: dialogConfig.direction,\n      minWidth: dialogConfig.minWidth,\n      minHeight: dialogConfig.minHeight,\n      maxWidth: dialogConfig.maxWidth,\n      maxHeight: dialogConfig.maxHeight\n    });\n\n    if (dialogConfig.backdropClass) {\n      state.backdropClass = dialogConfig.backdropClass;\n    }\n\n    return state;\n  }\n\n  /**\n   * Attaches an MatDialogContainer to a dialog's already-created overlay.\n   * @param overlay Reference to the dialog's underlying overlay.\n   * @param config The dialog configuration.\n   * @returns A promise resolving to a ComponentRef for the attached container.\n   */\n  private _attachDialogContainer(overlay: OverlayRef, config: MatDialogConfig): MatDialogContainer {\n    const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n    const injector = new PortalInjector(userInjector || this._injector, new WeakMap([\n      [MatDialogConfig, config]\n    ]));\n    const containerPortal =\n        new ComponentPortal(MatDialogContainer, config.viewContainerRef, injector);\n    const containerRef = overlay.attach<MatDialogContainer>(containerPortal);\n\n    return containerRef.instance;\n  }\n\n  /**\n   * Attaches the user-provided component to the already-created MatDialogContainer.\n   * @param componentOrTemplateRef The type of component being loaded into the dialog,\n   *     or a TemplateRef to instantiate as the content.\n   * @param dialogContainer Reference to the wrapping MatDialogContainer.\n   * @param overlayRef Reference to the overlay in which the dialog resides.\n   * @param config The dialog configuration.\n   * @returns A promise resolving to the MatDialogRef that should be returned to the user.\n   */\n  private _attachDialogContent<T, R>(\n      componentOrTemplateRef: ComponentType<T> | TemplateRef<T>,\n      dialogContainer: MatDialogContainer,\n      overlayRef: OverlayRef,\n      config: MatDialogConfig): MatDialogRef<T, R> {\n\n    // Create a reference to the dialog we're creating in order to give the user a handle\n    // to modify and close it.\n    const dialogRef =\n        new MatDialogRef<T, R>(overlayRef, dialogContainer, this._location, config.id);\n\n    // When the dialog backdrop is clicked, we want to close it.\n    if (config.hasBackdrop) {\n      overlayRef.backdropClick().subscribe(() => {\n        if (!dialogRef.disableClose) {\n          dialogRef.close();\n        }\n      });\n    }\n\n    if (componentOrTemplateRef instanceof TemplateRef) {\n      dialogContainer.attachTemplatePortal(\n        new TemplatePortal<T>(componentOrTemplateRef, null!,\n          <any>{ $implicit: config.data, dialogRef }));\n    } else {\n      const injector = this._createInjector<T>(config, dialogRef, dialogContainer);\n      const contentRef = dialogContainer.attachComponentPortal<T>(\n          new ComponentPortal(componentOrTemplateRef, undefined, injector));\n      dialogRef.componentInstance = contentRef.instance;\n    }\n\n    dialogRef\n      .updateSize(config.width, config.height)\n      .updatePosition(config.position);\n\n    return dialogRef;\n  }\n\n  /**\n   * Creates a custom injector to be used inside the dialog. This allows a component loaded inside\n   * of a dialog to close itself and, optionally, to return a value.\n   * @param config Config object that is used to construct the dialog.\n   * @param dialogRef Reference to the dialog.\n   * @param container Dialog container element that wraps all of the contents.\n   * @returns The custom injector that can be used inside the dialog.\n   */\n  private _createInjector<T>(\n      config: MatDialogConfig,\n      dialogRef: MatDialogRef<T>,\n      dialogContainer: MatDialogContainer): PortalInjector {\n\n    const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n\n    // The MatDialogContainer is injected in the portal as the MatDialogContainer and the dialog's\n    // content are created out of the same ViewContainerRef and as such, are siblings for injector\n    // purposes. To allow the hierarchy that is expected, the MatDialogContainer is explicitly\n    // added to the injection tokens.\n    const injectionTokens = new WeakMap<any, any>([\n      [MatDialogContainer, dialogContainer],\n      [MAT_DIALOG_DATA, config.data],\n      [MatDialogRef, dialogRef]\n    ]);\n\n    if (config.direction &&\n        (!userInjector || !userInjector.get<Directionality | null>(Directionality, null))) {\n      injectionTokens.set(Directionality, {\n        value: config.direction,\n        change: observableOf()\n      });\n    }\n\n    return new PortalInjector(userInjector || this._injector, injectionTokens);\n  }\n\n  /**\n   * Removes a dialog from the array of open dialogs.\n   * @param dialogRef Dialog to be removed.\n   */\n  private _removeOpenDialog(dialogRef: MatDialogRef<any>) {\n    const index = this.openDialogs.indexOf(dialogRef);\n\n    if (index > -1) {\n      this.openDialogs.splice(index, 1);\n\n      // If all the dialogs were closed, remove/restore the `aria-hidden`\n      // to a the siblings and emit to the `afterAllClosed` stream.\n      if (!this.openDialogs.length) {\n        this._ariaHiddenElements.forEach((previousValue, element) => {\n          if (previousValue) {\n            element.setAttribute('aria-hidden', previousValue);\n          } else {\n            element.removeAttribute('aria-hidden');\n          }\n        });\n\n        this._ariaHiddenElements.clear();\n        this._afterAllClosed.next();\n      }\n    }\n  }\n\n  /**\n   * Hides all of the content that isn't an overlay from assistive technology.\n   */\n  private _hideNonDialogContentFromAssistiveTechnology() {\n    const overlayContainer = this._overlayContainer.getContainerElement();\n\n    // Ensure that the overlay container is attached to the DOM.\n    if (overlayContainer.parentElement) {\n      const siblings = overlayContainer.parentElement.children;\n\n      for (let i = siblings.length - 1; i > -1; i--) {\n        let sibling = siblings[i];\n\n        if (sibling !== overlayContainer &&\n          sibling.nodeName !== 'SCRIPT' &&\n          sibling.nodeName !== 'STYLE' &&\n          !sibling.hasAttribute('aria-live')) {\n\n          this._ariaHiddenElements.set(sibling, sibling.getAttribute('aria-hidden'));\n          sibling.setAttribute('aria-hidden', 'true');\n        }\n      }\n    }\n\n  }\n\n}\n\n/**\n * Applies default options to the dialog config.\n * @param config Config to be modified.\n * @param defaultOptions Default options provided.\n * @returns The new configuration object.\n */\nfunction _applyConfigDefaults(\n    config?: MatDialogConfig, defaultOptions?: MatDialogConfig): MatDialogConfig {\n  return {...defaultOptions, ...config};\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Directive,\n  Input,\n  OnChanges,\n  OnInit,\n  Optional,\n  SimpleChanges,\n  ElementRef,\n} from '@angular/core';\nimport {MatDialog} from './dialog';\nimport {MatDialogRef} from './dialog-ref';\n\n/** Counter used to generate unique IDs for dialog elements. */\nlet dialogElementUid = 0;\n\n/**\n * Button that will close the current dialog.\n */\n@Directive({\n  selector: `button[mat-dialog-close], button[matDialogClose]`,\n  exportAs: 'matDialogClose',\n  host: {\n    '(click)': 'dialogRef.close(dialogResult)',\n    '[attr.aria-label]': 'ariaLabel',\n    'type': 'button', // Prevents accidental form submits.\n  }\n})\nexport class MatDialogClose implements OnInit, OnChanges {\n  /** Screenreader label for the button. */\n  @Input('aria-label') ariaLabel: string = 'Close dialog';\n\n  /** Dialog close input. */\n  @Input('mat-dialog-close') dialogResult: any;\n\n  @Input('matDialogClose') _matDialogClose: any;\n\n  constructor(\n    @Optional() public dialogRef: MatDialogRef<any>,\n    private _elementRef: ElementRef<HTMLElement>,\n    private _dialog: MatDialog) {}\n\n  ngOnInit() {\n    if (!this.dialogRef) {\n      // When this directive is included in a dialog via TemplateRef (rather than being\n      // in a Component), the DialogRef isn't available via injection because embedded\n      // views cannot be given a custom injector. Instead, we look up the DialogRef by\n      // ID. This must occur in `onInit`, as the ID binding for the dialog container won't\n      // be resolved at constructor time.\n      this.dialogRef = getClosestDialog(this._elementRef, this._dialog.openDialogs)!;\n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    const proxiedChange = changes._matDialogClose || changes._matDialogCloseResult;\n\n    if (proxiedChange) {\n      this.dialogResult = proxiedChange.currentValue;\n    }\n  }\n}\n\n/**\n * Title of a dialog element. Stays fixed to the top of the dialog when scrolling.\n */\n@Directive({\n  selector: '[mat-dialog-title], [matDialogTitle]',\n  exportAs: 'matDialogTitle',\n  host: {\n    'class': 'mat-dialog-title',\n    '[id]': 'id',\n  },\n})\nexport class MatDialogTitle implements OnInit {\n  @Input() id = `mat-dialog-title-${dialogElementUid++}`;\n\n  constructor(\n    @Optional() private _dialogRef: MatDialogRef<any>,\n    private _elementRef: ElementRef<HTMLElement>,\n    private _dialog: MatDialog) {}\n\n  ngOnInit() {\n    if (!this._dialogRef) {\n      this._dialogRef = getClosestDialog(this._elementRef, this._dialog.openDialogs)!;\n    }\n\n    if (this._dialogRef) {\n      Promise.resolve().then(() => {\n        const container = this._dialogRef._containerInstance;\n\n        if (container && !container._ariaLabelledBy) {\n          container._ariaLabelledBy = this.id;\n        }\n      });\n    }\n  }\n}\n\n\n/**\n * Scrollable content container of a dialog.\n */\n@Directive({\n  selector: `[mat-dialog-content], mat-dialog-content, [matDialogContent]`,\n  host: {'class': 'mat-dialog-content'}\n})\nexport class MatDialogContent {}\n\n\n/**\n * Container for the bottom action buttons in a dialog.\n * Stays fixed to the bottom when scrolling.\n */\n@Directive({\n  selector: `[mat-dialog-actions], mat-dialog-actions, [matDialogActions]`,\n  host: {'class': 'mat-dialog-actions'}\n})\nexport class MatDialogActions {}\n\n\n/**\n * Finds the closest MatDialogRef to an element by looking at the DOM.\n * @param element Element relative to which to look for a dialog.\n * @param openDialogs References to the currently-open dialogs.\n */\nfunction getClosestDialog(element: ElementRef<HTMLElement>, openDialogs: MatDialogRef<any>[]) {\n  let parent: HTMLElement | null = element.nativeElement.parentElement;\n\n  while (parent && !parent.classList.contains('mat-dialog-container')) {\n    parent = parent.parentElement;\n  }\n\n  return parent ? openDialogs.find(dialog => dialog.id === parent!.id) : null;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MAT_DIALOG_SCROLL_STRATEGY_PROVIDER, MatDialog} from './dialog';\nimport {MatDialogContainer} from './dialog-container';\nimport {\n  MatDialogActions,\n  MatDialogClose,\n  MatDialogContent,\n  MatDialogTitle,\n} from './dialog-content-directives';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    OverlayModule,\n    PortalModule,\n    MatCommonModule,\n  ],\n  exports: [\n    MatDialogContainer,\n    MatDialogClose,\n    MatDialogTitle,\n    MatDialogContent,\n    MatDialogActions,\n    MatCommonModule,\n  ],\n  declarations: [\n    MatDialogContainer,\n    MatDialogClose,\n    MatDialogTitle,\n    MatDialogActions,\n    MatDialogContent,\n  ],\n  providers: [\n    MatDialog,\n    MAT_DIALOG_SCROLL_STRATEGY_PROVIDER,\n  ],\n  entryComponents: [MatDialogContainer],\n})\nexport class MatDialogModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CdkTextareaAutosize} from '@angular/cdk/text-field';\nimport {Directive, Input} from '@angular/core';\n\n// TODO(devversion): Workaround for https://github.com/angular/material2/issues/12760\nexport const _CdkTextareaAutosize = CdkTextareaAutosize;\n\n/**\n * Directive to automatically resize a textarea to fit its content.\n * @deprecated Use `cdkTextareaAutosize` from `@angular/cdk/text-field` instead.\n * @breaking-change 7.0.0\n */\n@Directive({\n  selector: 'textarea[mat-autosize], textarea[matTextareaAutosize]',\n  exportAs: 'matTextareaAutosize',\n  inputs: ['cdkAutosizeMinRows', 'cdkAutosizeMaxRows'],\n  host: {\n    'class': 'cdk-textarea-autosize mat-autosize',\n    // Textarea elements that have the directive applied should have a single row by default.\n    // Browsers normally show two rows by default and therefore this limits the minRows binding.\n    'rows': '1',\n    '(input)': '_noopInputHandler()',\n  },\n})\nexport class MatTextareaAutosize extends _CdkTextareaAutosize {\n  @Input()\n  get matAutosizeMinRows(): number { return this.minRows; }\n  set matAutosizeMinRows(value: number) { this.minRows = value; }\n\n  @Input()\n  get matAutosizeMaxRows(): number { return this.maxRows; }\n  set matAutosizeMaxRows(value: number) { this.maxRows = value; }\n\n  @Input('mat-autosize')\n  get matAutosize(): boolean { return this.enabled; }\n  set matAutosize(value: boolean) { this.enabled = value; }\n\n  @Input()\n  get matTextareaAutosize(): boolean { return this.enabled; }\n  set matTextareaAutosize(value: boolean) { this.enabled = value; }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {InjectionToken} from '@angular/core';\n\n\n/**\n * This token is used to inject the object whose value should be set into `MatInput`. If none is\n * provided, the native `HTMLInputElement` is used. Directives like `MatDatepickerInput` can provide\n * themselves for this token, in order to make `MatInput` delegate the getting and setting of the\n * value to them.\n */\nexport const MAT_INPUT_VALUE_ACCESSOR =\n    new InjectionToken<{value: any}>('MAT_INPUT_VALUE_ACCESSOR');\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {getSupportedInputTypes, Platform} from '@angular/cdk/platform';\nimport {AutofillMonitor} from '@angular/cdk/text-field';\nimport {\n  Directive,\n  DoCheck,\n  ElementRef,\n  Inject,\n  Input,\n  NgZone,\n  OnChanges,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Self,\n} from '@angular/core';\nimport {FormGroupDirective, NgControl, NgForm} from '@angular/forms';\nimport {\n  CanUpdateErrorState,\n  CanUpdateErrorStateCtor,\n  ErrorStateMatcher,\n  mixinErrorState,\n} from '@angular/material/core';\nimport {MatFormFieldControl} from '@angular/material/form-field';\nimport {Subject} from 'rxjs';\nimport {getMatInputUnsupportedTypeError} from './input-errors';\nimport {MAT_INPUT_VALUE_ACCESSOR} from './input-value-accessor';\n\n\n// Invalid input type. Using one of these will throw an MatInputUnsupportedTypeError.\nconst MAT_INPUT_INVALID_TYPES = [\n  'button',\n  'checkbox',\n  'file',\n  'hidden',\n  'image',\n  'radio',\n  'range',\n  'reset',\n  'submit'\n];\n\nlet nextUniqueId = 0;\n\n// Boilerplate for applying mixins to MatInput.\n/** @docs-private */\nexport class MatInputBase {\n  constructor(public _defaultErrorStateMatcher: ErrorStateMatcher,\n              public _parentForm: NgForm,\n              public _parentFormGroup: FormGroupDirective,\n              /** @docs-private */\n              public ngControl: NgControl) {}\n}\nexport const _MatInputMixinBase: CanUpdateErrorStateCtor & typeof MatInputBase =\n    mixinErrorState(MatInputBase);\n\n/** Directive that allows a native input to work inside a `MatFormField`. */\n@Directive({\n  selector: `input[matInput], textarea[matInput], select[matNativeControl],\n      input[matNativeControl], textarea[matNativeControl]`,\n  exportAs: 'matInput',\n  host: {\n    /**\n     * @breaking-change 7.0.0 remove .mat-form-field-autofill-control in favor of AutofillMonitor.\n     */\n    'class': 'mat-input-element mat-form-field-autofill-control',\n    '[class.mat-input-server]': '_isServer',\n    // Native input properties that are overwritten by Angular inputs need to be synced with\n    // the native input element. Otherwise property bindings for those don't work.\n    '[attr.id]': 'id',\n    '[attr.placeholder]': 'placeholder',\n    '[disabled]': 'disabled',\n    '[required]': 'required',\n    '[attr.readonly]': 'readonly && !_isNativeSelect || null',\n    '[attr.aria-describedby]': '_ariaDescribedby || null',\n    '[attr.aria-invalid]': 'errorState',\n    '[attr.aria-required]': 'required.toString()',\n    '(blur)': '_focusChanged(false)',\n    '(focus)': '_focusChanged(true)',\n    '(input)': '_onInput()',\n  },\n  providers: [{provide: MatFormFieldControl, useExisting: MatInput}],\n})\nexport class MatInput extends _MatInputMixinBase implements MatFormFieldControl<any>, OnChanges,\n    OnDestroy, OnInit, DoCheck, CanUpdateErrorState {\n  protected _uid = `mat-input-${nextUniqueId++}`;\n  protected _previousNativeValue: any;\n  private _inputValueAccessor: {value: any};\n  /** The aria-describedby attribute on the input for improved a11y. */\n  _ariaDescribedby: string;\n\n  /** Whether the component is being rendered on the server. */\n  _isServer = false;\n\n  /** Whether the component is a native html select. */\n  _isNativeSelect = false;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  focused: boolean = false;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  readonly stateChanges: Subject<void> = new Subject<void>();\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  controlType: string = 'mat-input';\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  autofilled = false;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get disabled(): boolean {\n    if (this.ngControl && this.ngControl.disabled !== null) {\n      return this.ngControl.disabled;\n    }\n    return this._disabled;\n  }\n  set disabled(value: boolean) {\n    this._disabled = coerceBooleanProperty(value);\n\n    // Browsers may not fire the blur event if the input is disabled too quickly.\n    // Reset from here to ensure that the element doesn't become stuck.\n    if (this.focused) {\n      this.focused = false;\n      this.stateChanges.next();\n    }\n  }\n  protected _disabled = false;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get id(): string { return this._id; }\n  set id(value: string) { this._id = value || this._uid; }\n  protected _id: string;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input() placeholder: string;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get required(): boolean { return this._required; }\n  set required(value: boolean) { this._required = coerceBooleanProperty(value); }\n  protected _required = false;\n\n  /** Input type of the element. */\n  @Input()\n  get type(): string { return this._type; }\n  set type(value: string) {\n    this._type = value || 'text';\n    this._validateType();\n\n    // When using Angular inputs, developers are no longer able to set the properties on the native\n    // input element. To ensure that bindings for `type` work, we need to sync the setter\n    // with the native property. Textarea elements don't support the type property or attribute.\n    if (!this._isTextarea() && getSupportedInputTypes().has(this._type)) {\n      (this._elementRef.nativeElement as HTMLInputElement).type = this._type;\n    }\n  }\n  protected _type = 'text';\n\n  /** An object used to control when error messages are shown. */\n  @Input() errorStateMatcher: ErrorStateMatcher;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get value(): string { return this._inputValueAccessor.value; }\n  set value(value: string) {\n    if (value !== this.value) {\n      this._inputValueAccessor.value = value;\n      this.stateChanges.next();\n    }\n  }\n\n  /** Whether the element is readonly. */\n  @Input()\n  get readonly(): boolean { return this._readonly; }\n  set readonly(value: boolean) { this._readonly = coerceBooleanProperty(value); }\n  private _readonly = false;\n\n  protected _neverEmptyInputTypes = [\n    'date',\n    'datetime',\n    'datetime-local',\n    'month',\n    'time',\n    'week'\n  ].filter(t => getSupportedInputTypes().has(t));\n\n  constructor(\n    protected _elementRef: ElementRef<HTMLInputElement | HTMLSelectElement | HTMLTextAreaElement>,\n    protected _platform: Platform,\n    /** @docs-private */\n    @Optional() @Self() public ngControl: NgControl,\n    @Optional() _parentForm: NgForm,\n    @Optional() _parentFormGroup: FormGroupDirective,\n    _defaultErrorStateMatcher: ErrorStateMatcher,\n    @Optional() @Self() @Inject(MAT_INPUT_VALUE_ACCESSOR) inputValueAccessor: any,\n    private _autofillMonitor: AutofillMonitor,\n    ngZone: NgZone) {\n    super(_defaultErrorStateMatcher, _parentForm, _parentFormGroup, ngControl);\n    // If no input value accessor was explicitly specified, use the element as the input value\n    // accessor.\n    this._inputValueAccessor = inputValueAccessor || this._elementRef.nativeElement;\n\n    this._previousNativeValue = this.value;\n\n    // Force setter to be called in case id was not specified.\n    this.id = this.id;\n\n    // On some versions of iOS the caret gets stuck in the wrong place when holding down the delete\n    // key. In order to get around this we need to \"jiggle\" the caret loose. Since this bug only\n    // exists on iOS, we only bother to install the listener on iOS.\n    if (_platform.IOS) {\n      ngZone.runOutsideAngular(() => {\n        _elementRef.nativeElement.addEventListener('keyup', (event: Event) => {\n          let el = event.target as HTMLInputElement;\n          if (!el.value && !el.selectionStart && !el.selectionEnd) {\n            // Note: Just setting `0, 0` doesn't fix the issue. Setting\n            // `1, 1` fixes it for the first time that you type text and\n            // then hold delete. Toggling to `1, 1` and then back to\n            // `0, 0` seems to completely fix it.\n            el.setSelectionRange(1, 1);\n            el.setSelectionRange(0, 0);\n          }\n        });\n      });\n    }\n\n    this._isServer = !this._platform.isBrowser;\n    this._isNativeSelect = this._elementRef.nativeElement.nodeName.toLowerCase() === 'select';\n  }\n\n  ngOnInit() {\n    if (this._platform.isBrowser) {\n      this._autofillMonitor.monitor(this._elementRef.nativeElement).subscribe(event => {\n        this.autofilled = event.isAutofilled;\n        this.stateChanges.next();\n      });\n    }\n  }\n\n  ngOnChanges() {\n    this.stateChanges.next();\n  }\n\n  ngOnDestroy() {\n    this.stateChanges.complete();\n\n    if (this._platform.isBrowser) {\n      this._autofillMonitor.stopMonitoring(this._elementRef.nativeElement);\n    }\n  }\n\n  ngDoCheck() {\n    if (this.ngControl) {\n      // We need to re-evaluate this on every change detection cycle, because there are some\n      // error triggers that we can't subscribe to (e.g. parent form submissions). This means\n      // that whatever logic is in here has to be super lean or we risk destroying the performance.\n      this.updateErrorState();\n    }\n\n    // We need to dirty-check the native element's value, because there are some cases where\n    // we won't be notified when it changes (e.g. the consumer isn't using forms or they're\n    // updating the value using `emitEvent: false`).\n    this._dirtyCheckNativeValue();\n  }\n\n  /** Focuses the input. */\n  focus(): void { this._elementRef.nativeElement.focus(); }\n\n  /** Callback for the cases where the focused state of the input changes. */\n  _focusChanged(isFocused: boolean) {\n    if (isFocused !== this.focused && !this.readonly) {\n      this.focused = isFocused;\n      this.stateChanges.next();\n    }\n  }\n\n  _onInput() {\n    // This is a noop function and is used to let Angular know whenever the value changes.\n    // Angular will run a new change detection each time the `input` event has been dispatched.\n    // It's necessary that Angular recognizes the value change, because when floatingLabel\n    // is set to false and Angular forms aren't used, the placeholder won't recognize the\n    // value changes and will not disappear.\n    // Listening to the input event wouldn't be necessary when the input is using the\n    // FormsModule or ReactiveFormsModule, because Angular forms also listens to input events.\n  }\n\n  /** Does some manual dirty checking on the native input `value` property. */\n  protected _dirtyCheckNativeValue() {\n    const newValue = this.value;\n\n    if (this._previousNativeValue !== newValue) {\n      this._previousNativeValue = newValue;\n      this.stateChanges.next();\n    }\n  }\n\n  /** Make sure the input is a supported type. */\n  protected _validateType() {\n    if (MAT_INPUT_INVALID_TYPES.indexOf(this._type) > -1) {\n      throw getMatInputUnsupportedTypeError(this._type);\n    }\n  }\n\n  /** Checks whether the input type is one of the types that are never empty. */\n  protected _isNeverEmpty() {\n    return this._neverEmptyInputTypes.indexOf(this._type) > -1;\n  }\n\n  /** Checks whether the input is invalid based on the native validation. */\n  protected _isBadInput() {\n    // The `validity` property won't be present on platform-server.\n    let validity = (this._elementRef.nativeElement as HTMLInputElement).validity;\n    return validity && validity.badInput;\n  }\n\n  /** Determines if the component host is a textarea. */\n  protected _isTextarea() {\n    return this._elementRef.nativeElement.nodeName.toLowerCase() === 'textarea';\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  get empty(): boolean {\n    return !this._isNeverEmpty() && !this._elementRef.nativeElement.value && !this._isBadInput() &&\n        !this.autofilled;\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  get shouldLabelFloat(): boolean {\n    if (this._isNativeSelect) {\n      // For a single-selection `<select>`, the label should float when the selected option has\n      // a non-empty display value. For a `<select multiple>`, the label *always* floats to avoid\n      // overlapping the label with the options.\n      const selectElement = this._elementRef.nativeElement as HTMLSelectElement;\n\n      return selectElement.multiple || !this.empty || !!selectElement.options[0].label ||\n          this.focused;\n    } else {\n      return this.focused || !this.empty;\n    }\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  setDescribedByIds(ids: string[]) { this._ariaDescribedby = ids.join(' '); }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  onContainerClick() {\n    // Do not re-focus the input element if the element is already focused. Otherwise it can happen\n    // that someone clicks on a time input and the cursor resets to the \"hours\" field while the\n    // \"minutes\" field was actually clicked. See: https://github.com/angular/material2/issues/12849\n    if (!this.focused) {\n      this.focus();\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {TextFieldModule} from '@angular/cdk/text-field';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {ErrorStateMatcher} from '@angular/material/core';\nimport {MatFormFieldModule} from '@angular/material/form-field';\nimport {MatTextareaAutosize} from './autosize';\nimport {MatInput} from './input';\n\n\n@NgModule({\n  declarations: [MatInput, MatTextareaAutosize],\n  imports: [\n    CommonModule,\n    TextFieldModule,\n    MatFormFieldModule,\n  ],\n  exports: [\n    TextFieldModule,\n    // We re-export the `MatFormFieldModule` since `MatInput` will almost always\n    // be used together with `MatFormField`.\n    MatFormFieldModule,\n    MatInput,\n    MatTextareaAutosize,\n  ],\n  providers: [ErrorStateMatcher],\n})\nexport class MatInputModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable} from '@angular/core';\nimport {Subject} from 'rxjs';\n\n\n/** Datepicker data that requires internationalization. */\n@Injectable({providedIn: 'root'})\nexport class MatDatepickerIntl {\n  /**\n   * Stream that emits whenever the labels here are changed. Use this to notify\n   * components if the labels have changed after initialization.\n   */\n  readonly changes: Subject<void> = new Subject<void>();\n\n  /** A label for the calendar popup (used by screen readers). */\n  calendarLabel: string = 'Calendar';\n\n  /** A label for the button used to open the calendar popup (used by screen readers). */\n  openCalendarLabel: string = 'Open calendar';\n\n  /** A label for the previous month button (used by screen readers). */\n  prevMonthLabel: string = 'Previous month';\n\n  /** A label for the next month button (used by screen readers). */\n  nextMonthLabel: string = 'Next month';\n\n  /** A label for the previous year button (used by screen readers). */\n  prevYearLabel: string = 'Previous year';\n\n  /** A label for the next year button (used by screen readers). */\n  nextYearLabel: string = 'Next year';\n\n  /** A label for the previous multi-year button (used by screen readers). */\n  prevMultiYearLabel: string = 'Previous 20 years';\n\n  /** A label for the next multi-year button (used by screen readers). */\n  nextMultiYearLabel: string = 'Next 20 years';\n\n  /** A label for the 'switch to month view' button (used by screen readers). */\n  switchToMonthViewLabel: string = 'Choose date';\n\n  /** A label for the 'switch to year view' button (used by screen readers). */\n  switchToMultiYearViewLabel: string = 'Choose month and year';\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ViewEncapsulation,\n  ChangeDetectionStrategy,\n  Directive,\n  Input,\n} from '@angular/core';\n\n\n/**\n * Content of a card, needed as it's used as a selector in the API.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-card-content',\n  host: {'class': 'mat-card-content'}\n})\nexport class MatCardContent {}\n\n/**\n * Title of a card, needed as it's used as a selector in the API.\n * @docs-private\n */\n@Directive({\n  selector: `mat-card-title, [mat-card-title], [matCardTitle]`,\n  host: {\n    'class': 'mat-card-title'\n  }\n})\nexport class MatCardTitle {}\n\n/**\n * Sub-title of a card, needed as it's used as a selector in the API.\n * @docs-private\n */\n@Directive({\n  selector: `mat-card-subtitle, [mat-card-subtitle], [matCardSubtitle]`,\n  host: {\n    'class': 'mat-card-subtitle'\n  }\n})\nexport class MatCardSubtitle {}\n\n/**\n * Action section of a card, needed as it's used as a selector in the API.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-card-actions',\n  exportAs: 'matCardActions',\n  host: {\n    'class': 'mat-card-actions',\n    '[class.mat-card-actions-align-end]': 'align === \"end\"',\n  }\n})\nexport class MatCardActions {\n  /** Position of the actions inside the card. */\n  @Input() align: 'start' | 'end' = 'start';\n}\n\n/**\n * Footer of a card, needed as it's used as a selector in the API.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-card-footer',\n  host: {'class': 'mat-card-footer'}\n})\nexport class MatCardFooter {}\n\n/**\n * Image used in a card, needed to add the mat- CSS styling.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-card-image], [matCardImage]',\n  host: {'class': 'mat-card-image'}\n})\nexport class MatCardImage {}\n\n/**\n * Image used in a card, needed to add the mat- CSS styling.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-card-sm-image], [matCardImageSmall]',\n  host: {'class': 'mat-card-sm-image'}\n})\nexport class MatCardSmImage {}\n\n/**\n * Image used in a card, needed to add the mat- CSS styling.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-card-md-image], [matCardImageMedium]',\n  host: {'class': 'mat-card-md-image'}\n})\nexport class MatCardMdImage {}\n\n/**\n * Image used in a card, needed to add the mat- CSS styling.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-card-lg-image], [matCardImageLarge]',\n  host: {'class': 'mat-card-lg-image'}\n})\nexport class MatCardLgImage {}\n\n/**\n * Large image used in a card, needed to add the mat- CSS styling.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-card-xl-image], [matCardImageXLarge]',\n  host: {'class': 'mat-card-xl-image'}\n})\nexport class MatCardXlImage {}\n\n/**\n * Avatar image used in a card, needed to add the mat- CSS styling.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-card-avatar], [matCardAvatar]',\n  host: {'class': 'mat-card-avatar'}\n})\nexport class MatCardAvatar {}\n\n\n/**\n * A basic content container component that adds the styles of a Material design card.\n *\n * While this component can be used alone, it also provides a number\n * of preset styles for common card sections, including:\n * - mat-card-title\n * - mat-card-subtitle\n * - mat-card-content\n * - mat-card-actions\n * - mat-card-footer\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-card',\n  exportAs: 'matCard',\n  templateUrl: 'card.html',\n  styleUrls: ['card.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {'class': 'mat-card'}\n})\nexport class MatCard {}\n\n\n/**\n * Component intended to be used within the `<mat-card>` component. It adds styles for a\n * preset header section (i.e. a title, subtitle, and avatar layout).\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-card-header',\n  templateUrl: 'card-header.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {'class': 'mat-card-header'}\n})\nexport class MatCardHeader {}\n\n\n/**\n * Component intended to be used within the `<mat-card>` component. It adds styles for a preset\n * layout that groups an image with a title section.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-card-title-group',\n  templateUrl: 'card-title-group.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {'class': 'mat-card-title-group'}\n})\nexport class MatCardTitleGroup {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {\n  MatCard,\n  MatCardActions,\n  MatCardAvatar,\n  MatCardContent,\n  MatCardFooter,\n  MatCardHeader,\n  MatCardImage,\n  MatCardLgImage,\n  MatCardMdImage,\n  MatCardSmImage,\n  MatCardSubtitle,\n  MatCardTitle,\n  MatCardTitleGroup,\n  MatCardXlImage,\n} from './card';\n\n\n@NgModule({\n  imports: [MatCommonModule],\n  exports: [\n    MatCard,\n    MatCardHeader,\n    MatCardTitleGroup,\n    MatCardContent,\n    MatCardTitle,\n    MatCardSubtitle,\n    MatCardActions,\n    MatCardFooter,\n    MatCardSmImage,\n    MatCardMdImage,\n    MatCardLgImage,\n    MatCardImage,\n    MatCardXlImage,\n    MatCardAvatar,\n    MatCommonModule,\n  ],\n  declarations: [\n    MatCard, MatCardHeader, MatCardTitleGroup, MatCardContent, MatCardTitle, MatCardSubtitle,\n    MatCardActions, MatCardFooter, MatCardSmImage, MatCardMdImage, MatCardLgImage, MatCardImage,\n    MatCardXlImage, MatCardAvatar,\n  ],\n})\nexport class MatCardModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {InjectionToken} from '@angular/core';\n\n\n/**\n * Checkbox click action when user click on input element.\n * noop: Do not toggle checked or indeterminate.\n * check: Only toggle checked status, ignore indeterminate.\n * check-indeterminate: Toggle checked status, set indeterminate to false. Default behavior.\n * undefined: Same as `check-indeterminate`.\n */\nexport type MatCheckboxClickAction = 'noop' | 'check' | 'check-indeterminate' | undefined;\n\n/**\n * Injection token that can be used to specify the checkbox click behavior.\n */\nexport const MAT_CHECKBOX_CLICK_ACTION =\n    new InjectionToken<MatCheckboxClickAction>('mat-checkbox-click-action');\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor, FocusOrigin} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  AfterViewChecked,\n  AfterViewInit,\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  Output,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {\n  CanColor,\n  CanColorCtor,\n  CanDisable,\n  CanDisableCtor,\n  CanDisableRipple,\n  CanDisableRippleCtor,\n  HasTabIndex,\n  HasTabIndexCtor,\n  MatRipple,\n  mixinColor,\n  mixinDisabled,\n  mixinDisableRipple,\n  mixinTabIndex,\n  RippleRef,\n} from '@angular/material/core';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\nimport {MAT_CHECKBOX_CLICK_ACTION, MatCheckboxClickAction} from './checkbox-config';\n\n\n// Increasing integer for generating unique ids for checkbox components.\nlet nextUniqueId = 0;\n\n// TODO(josephperrott): Revert to constants for ripple radius once 2018 Checkbox updates have\n// landed.\n// The radius for the checkbox's ripple, in pixels.\nlet calculatedRippleRadius = 0;\n\n/**\n * Provider Expression that allows mat-checkbox to register as a ControlValueAccessor.\n * This allows it to support [(ngModel)].\n * @docs-private\n */\nexport const MAT_CHECKBOX_CONTROL_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatCheckbox),\n  multi: true\n};\n\n/**\n * Represents the different states that require custom transitions between them.\n * @docs-private\n */\nexport enum TransitionCheckState {\n  /** The initial state of the component before any user interaction. */\n  Init,\n  /** The state representing the component when it's becoming checked. */\n  Checked,\n  /** The state representing the component when it's becoming unchecked. */\n  Unchecked,\n  /** The state representing the component when it's becoming indeterminate. */\n  Indeterminate\n}\n\n/** Change event object emitted by MatCheckbox. */\nexport class MatCheckboxChange {\n  /** The source MatCheckbox of the event. */\n  source: MatCheckbox;\n  /** The new `checked` value of the checkbox. */\n  checked: boolean;\n}\n\n// Boilerplate for applying mixins to MatCheckbox.\n/** @docs-private */\nexport class MatCheckboxBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatCheckboxMixinBase:\n    HasTabIndexCtor &\n    CanColorCtor &\n    CanDisableRippleCtor &\n    CanDisableCtor &\n    typeof MatCheckboxBase =\n        mixinTabIndex(mixinColor(mixinDisableRipple(mixinDisabled(MatCheckboxBase)), 'accent'));\n\n\n/**\n * A material design checkbox component. Supports all of the functionality of an HTML5 checkbox,\n * and exposes a similar API. A MatCheckbox can be either checked, unchecked, indeterminate, or\n * disabled. Note that all additional accessibility attributes are taken care of by the component,\n * so there is no need to provide them yourself. However, if you want to omit a label and still\n * have the checkbox be accessible, you may supply an [aria-label] input.\n * See: https://material.io/design/components/selection-controls.html\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-checkbox',\n  templateUrl: 'checkbox.html',\n  styleUrls: ['checkbox.css'],\n  exportAs: 'matCheckbox',\n  host: {\n    'class': 'mat-checkbox',\n    '[id]': 'id',\n    '[class.mat-checkbox-indeterminate]': 'indeterminate',\n    '[class.mat-checkbox-checked]': 'checked',\n    '[class.mat-checkbox-disabled]': 'disabled',\n    '[class.mat-checkbox-label-before]': 'labelPosition == \"before\"',\n    '[class._mat-animation-noopable]': `_animationMode === 'NoopAnimations'`,\n  },\n  providers: [MAT_CHECKBOX_CONTROL_VALUE_ACCESSOR],\n  inputs: ['disableRipple', 'color', 'tabIndex'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class MatCheckbox extends _MatCheckboxMixinBase implements ControlValueAccessor,\n    AfterViewChecked, AfterViewInit, OnDestroy, CanColor, CanDisable, HasTabIndex,\n    CanDisableRipple {\n\n  /**\n   * Attached to the aria-label attribute of the host element. In most cases, arial-labelledby will\n   * take precedence so this may be omitted.\n   */\n  @Input('aria-label') ariaLabel: string = '';\n\n  /**\n   * Users can specify the `aria-labelledby` attribute which will be forwarded to the input element\n   */\n  @Input('aria-labelledby') ariaLabelledby: string | null = null;\n\n  private _uniqueId: string = `mat-checkbox-${++nextUniqueId}`;\n\n  /** A unique id for the checkbox input. If none is supplied, it will be auto-generated. */\n  @Input() id: string = this._uniqueId;\n\n  /** Returns the unique id for the visual hidden input. */\n  get inputId(): string { return `${this.id || this._uniqueId}-input`; }\n\n  /** Whether the checkbox is required. */\n  @Input()\n  get required(): boolean { return this._required; }\n  set required(value: boolean) { this._required = coerceBooleanProperty(value); }\n  private _required: boolean;\n\n  /** Whether the label should appear after or before the checkbox. Defaults to 'after' */\n  @Input() labelPosition: 'before' | 'after' = 'after';\n\n  /** Name value will be applied to the input element if present */\n  @Input() name: string | null = null;\n\n  /** Event emitted when the checkbox's `checked` value changes. */\n  @Output() readonly change: EventEmitter<MatCheckboxChange> =\n      new EventEmitter<MatCheckboxChange>();\n\n  /** Event emitted when the checkbox's `indeterminate` value changes. */\n  @Output() readonly indeterminateChange: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n  /** The value attribute of the native input element */\n  @Input() value: string;\n\n  /** The native `<input type=\"checkbox\">` element */\n  @ViewChild('input') _inputElement: ElementRef<HTMLInputElement>;\n\n  /** Reference to the ripple instance of the checkbox. */\n  @ViewChild(MatRipple) ripple: MatRipple;\n\n  /**\n   * Called when the checkbox is blurred. Needed to properly implement ControlValueAccessor.\n   * @docs-private\n   */\n  _onTouched: () => any = () => {};\n\n  private _currentAnimationClass: string = '';\n\n  private _currentCheckState: TransitionCheckState = TransitionCheckState.Init;\n\n  private _controlValueAccessorChangeFn: (value: any) => void = () => {};\n\n  /** Reference to the focused state ripple. */\n  private _focusRipple: RippleRef | null;\n\n  constructor(elementRef: ElementRef<HTMLElement>,\n              private _changeDetectorRef: ChangeDetectorRef,\n              private _focusMonitor: FocusMonitor,\n              private _ngZone: NgZone,\n              @Attribute('tabindex') tabIndex: string,\n              @Optional() @Inject(MAT_CHECKBOX_CLICK_ACTION)\n                  private _clickAction: MatCheckboxClickAction,\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode?: string) {\n    super(elementRef);\n\n    this.tabIndex = parseInt(tabIndex) || 0;\n  }\n\n  ngAfterViewInit() {\n    this._focusMonitor\n      .monitor(this._inputElement)\n      .subscribe(focusOrigin => this._onInputFocusChange(focusOrigin));\n  }\n\n  ngAfterViewChecked() {\n    this._calculateRippleRadius();\n  }\n\n  ngOnDestroy() {\n    this._focusMonitor.stopMonitoring(this._inputElement);\n  }\n\n  /**\n   * Whether the checkbox is checked.\n   */\n  @Input()\n  get checked(): boolean { return this._checked; }\n  set checked(value: boolean) {\n    if (value != this.checked) {\n      this._checked = value;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n  private _checked: boolean = false;\n\n  /**\n   * Whether the checkbox is disabled. This fully overrides the implementation provided by\n   * mixinDisabled, but the mixin is still required because mixinTabIndex requires it.\n   */\n  @Input()\n  get disabled() { return this._disabled; }\n  set disabled(value: any) {\n    if (value != this.disabled) {\n      this._disabled = value;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n  private _disabled: boolean = false;\n\n  /**\n   * Whether the checkbox is indeterminate. This is also known as \"mixed\" mode and can be used to\n   * represent a checkbox with three states, e.g. a checkbox that represents a nested list of\n   * checkable items. Note that whenever checkbox is manually clicked, indeterminate is immediately\n   * set to false.\n   */\n  @Input()\n  get indeterminate(): boolean { return this._indeterminate; }\n  set indeterminate(value: boolean) {\n    const changed = value != this._indeterminate;\n    this._indeterminate = value;\n\n    if (changed) {\n      if (this._indeterminate) {\n        this._transitionCheckState(TransitionCheckState.Indeterminate);\n      } else {\n        this._transitionCheckState(\n          this.checked ? TransitionCheckState.Checked : TransitionCheckState.Unchecked);\n      }\n      this.indeterminateChange.emit(this._indeterminate);\n    }\n  }\n  private _indeterminate: boolean = false;\n\n  _isRippleDisabled() {\n    return this.disableRipple || this.disabled;\n  }\n\n  /** Method being called whenever the label text changes. */\n  _onLabelTextChange() {\n    // This method is getting called whenever the label of the checkbox changes.\n    // Since the checkbox uses the OnPush strategy we need to notify it about the change\n    // that has been recognized by the cdkObserveContent directive.\n    this._changeDetectorRef.markForCheck();\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  writeValue(value: any) {\n    this.checked = !!value;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnChange(fn: (value: any) => void) {\n    this._controlValueAccessorChangeFn = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnTouched(fn: any) {\n    this._onTouched = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  setDisabledState(isDisabled: boolean) {\n    this.disabled = isDisabled;\n  }\n\n  _getAriaChecked(): 'true' | 'false' | 'mixed' {\n    return this.checked ? 'true' : (this.indeterminate ? 'mixed' : 'false');\n  }\n\n  private _transitionCheckState(newState: TransitionCheckState) {\n    let oldState = this._currentCheckState;\n    let element: HTMLElement = this._elementRef.nativeElement;\n\n    if (oldState === newState) {\n      return;\n    }\n    if (this._currentAnimationClass.length > 0) {\n      element.classList.remove(this._currentAnimationClass);\n    }\n\n    this._currentAnimationClass = this._getAnimationClassForCheckStateTransition(\n        oldState, newState);\n    this._currentCheckState = newState;\n\n    if (this._currentAnimationClass.length > 0) {\n      element.classList.add(this._currentAnimationClass);\n\n      // Remove the animation class to avoid animation when the checkbox is moved between containers\n      const animationClass = this._currentAnimationClass;\n\n      this._ngZone.runOutsideAngular(() => {\n        setTimeout(() => {\n          element.classList.remove(animationClass);\n        }, 1000);\n      });\n    }\n  }\n\n  private _emitChangeEvent() {\n    let event = new MatCheckboxChange();\n    event.source = this;\n    event.checked = this.checked;\n\n    this._controlValueAccessorChangeFn(this.checked);\n    this.change.emit(event);\n  }\n\n  /** Function is called whenever the focus changes for the input element. */\n  private _onInputFocusChange(focusOrigin: FocusOrigin) {\n    // TODO(paul): support `program`. See https://github.com/angular/material2/issues/9889\n    if (!this._focusRipple && focusOrigin === 'keyboard') {\n      this._focusRipple = this.ripple.launch(0, 0, {persistent: true});\n    } else if (!focusOrigin) {\n      if (this._focusRipple) {\n        this._focusRipple.fadeOut();\n        this._focusRipple = null;\n      }\n\n      // When a focused element becomes disabled, the browser *immediately* fires a blur event.\n      // Angular does not expect events to be raised during change detection, so any state change\n      // (such as a form control's 'ng-touched') will cause a changed-after-checked error.\n      // See https://github.com/angular/angular/issues/17793. To work around this, we defer telling\n      // the form control it has been touched until the next tick.\n      Promise.resolve().then(() => this._onTouched());\n    }\n  }\n\n  /** Toggles the `checked` state of the checkbox. */\n  toggle(): void {\n    this.checked = !this.checked;\n  }\n\n  /**\n   * Event handler for checkbox input element.\n   * Toggles checked state if element is not disabled.\n   * Do not toggle on (change) event since IE doesn't fire change event when\n   *   indeterminate checkbox is clicked.\n   * @param event\n   */\n  _onInputClick(event: Event) {\n    // We have to stop propagation for click events on the visual hidden input element.\n    // By default, when a user clicks on a label element, a generated click event will be\n    // dispatched on the associated input element. Since we are using a label element as our\n    // root container, the click event on the `checkbox` will be executed twice.\n    // The real click event will bubble up, and the generated click event also tries to bubble up.\n    // This will lead to multiple click events.\n    // Preventing bubbling for the second event will solve that issue.\n    event.stopPropagation();\n\n    // If resetIndeterminate is false, and the current state is indeterminate, do nothing on click\n    if (!this.disabled && this._clickAction !== 'noop') {\n      // When user manually click on the checkbox, `indeterminate` is set to false.\n      if (this.indeterminate && this._clickAction !== 'check') {\n\n        Promise.resolve().then(() => {\n          this._indeterminate = false;\n          this.indeterminateChange.emit(this._indeterminate);\n        });\n      }\n\n      this.toggle();\n      this._transitionCheckState(\n          this._checked ? TransitionCheckState.Checked : TransitionCheckState.Unchecked);\n\n      // Emit our custom change event if the native input emitted one.\n      // It is important to only emit it, if the native input triggered one, because\n      // we don't want to trigger a change event, when the `checked` variable changes for example.\n      this._emitChangeEvent();\n    } else if (!this.disabled && this._clickAction === 'noop') {\n      // Reset native input when clicked with noop. The native checkbox becomes checked after\n      // click, reset it to be align with `checked` value of `mat-checkbox`.\n      this._inputElement.nativeElement.checked = this.checked;\n      this._inputElement.nativeElement.indeterminate = this.indeterminate;\n    }\n  }\n\n  /** Focuses the checkbox. */\n  focus(): void {\n    this._focusMonitor.focusVia(this._inputElement, 'keyboard');\n  }\n\n  _onInteractionEvent(event: Event) {\n    // We always have to stop propagation on the change event.\n    // Otherwise the change event, from the input element, will bubble up and\n    // emit its event object to the `change` output.\n    event.stopPropagation();\n  }\n\n  private _getAnimationClassForCheckStateTransition(\n      oldState: TransitionCheckState, newState: TransitionCheckState): string {\n    // Don't transition if animations are disabled.\n    if (this._animationMode === 'NoopAnimations') {\n      return '';\n    }\n\n    let animSuffix: string = '';\n\n    switch (oldState) {\n      case TransitionCheckState.Init:\n        // Handle edge case where user interacts with checkbox that does not have [(ngModel)] or\n        // [checked] bound to it.\n        if (newState === TransitionCheckState.Checked) {\n          animSuffix = 'unchecked-checked';\n        } else if (newState == TransitionCheckState.Indeterminate) {\n          animSuffix = 'unchecked-indeterminate';\n        } else {\n          return '';\n        }\n        break;\n      case TransitionCheckState.Unchecked:\n        animSuffix = newState === TransitionCheckState.Checked ?\n            'unchecked-checked' : 'unchecked-indeterminate';\n        break;\n      case TransitionCheckState.Checked:\n        animSuffix = newState === TransitionCheckState.Unchecked ?\n            'checked-unchecked' : 'checked-indeterminate';\n        break;\n      case TransitionCheckState.Indeterminate:\n        animSuffix = newState === TransitionCheckState.Checked ?\n            'indeterminate-checked' : 'indeterminate-unchecked';\n        break;\n    }\n\n    return `mat-checkbox-anim-${animSuffix}`;\n  }\n\n  // TODO(josephperrott): Revert to constants for ripple radius once 2018 Checkbox updates have\n  // landed.\n  /**\n   * Calculate the radius for the ripple based on the ripple elements width.  Only calculated once\n   * for the application.\n   */\n  private _calculateRippleRadius() {\n    if (!calculatedRippleRadius) {\n      const rippleWidth =\n          this._elementRef.nativeElement.querySelector('.mat-checkbox-ripple').clientWidth || 0;\n      calculatedRippleRadius = rippleWidth / 2;\n    }\n    this.ripple.radius = calculatedRippleRadius;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Directive,\n  forwardRef,\n  Provider,\n} from '@angular/core';\nimport {\n  CheckboxRequiredValidator,\n  NG_VALIDATORS,\n} from '@angular/forms';\n\nexport const MAT_CHECKBOX_REQUIRED_VALIDATOR: Provider = {\n  provide: NG_VALIDATORS,\n  useExisting: forwardRef(() => MatCheckboxRequiredValidator),\n  multi: true\n};\n\n/**\n * Validator for Material checkbox's required attribute in template-driven checkbox.\n * Current CheckboxRequiredValidator only work with `input type=checkbox` and does not\n * work with `mat-checkbox`.\n */\n@Directive({\n  selector: `mat-checkbox[required][formControlName],\n             mat-checkbox[required][formControl], mat-checkbox[required][ngModel]`,\n  providers: [MAT_CHECKBOX_REQUIRED_VALIDATOR],\n  host: {'[attr.required]': 'required ? \"\" : null'}\n})\nexport class MatCheckboxRequiredValidator extends CheckboxRequiredValidator {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ObserversModule} from '@angular/cdk/observers';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {MatCheckbox} from './checkbox';\nimport {MatCheckboxRequiredValidator} from './checkbox-required-validator';\n\n\n@NgModule({\n  imports: [CommonModule, MatRippleModule, MatCommonModule, ObserversModule],\n  exports: [MatCheckbox, MatCheckboxRequiredValidator, MatCommonModule],\n  declarations: [MatCheckbox, MatCheckboxRequiredValidator],\n})\nexport class MatCheckboxModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusableOption} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {BACKSPACE, DELETE, SPACE} from '@angular/cdk/keycodes';\nimport {Platform} from '@angular/cdk/platform';\nimport {\n  ContentChild,\n  Directive,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  Output,\n} from '@angular/core';\nimport {\n  CanColor,\n  CanColorCtor,\n  CanDisable,\n  CanDisableCtor,\n  CanDisableRipple,\n  CanDisableRippleCtor,\n  MAT_RIPPLE_GLOBAL_OPTIONS,\n  mixinColor,\n  mixinDisabled,\n  mixinDisableRipple,\n  RippleConfig,\n  RippleGlobalOptions,\n  RippleRenderer,\n  RippleTarget,\n} from '@angular/material/core';\nimport {Subject} from 'rxjs';\nimport {take} from 'rxjs/operators';\n\n\n/** Represents an event fired on an individual `mat-chip`. */\nexport interface MatChipEvent {\n  /** The chip the event was fired on. */\n  chip: MatChip;\n}\n\n/** Event object emitted by MatChip when selected or deselected. */\nexport class MatChipSelectionChange {\n  constructor(\n    /** Reference to the chip that emitted the event. */\n    public source: MatChip,\n    /** Whether the chip that emitted the event is selected. */\n    public selected: boolean,\n    /** Whether the selection change was a result of a user interaction. */\n    public isUserInput = false) { }\n}\n\n\n// Boilerplate for applying mixins to MatChip.\n/** @docs-private */\nexport class MatChipBase {\n  constructor(public _elementRef: ElementRef) {}\n}\n\nexport const _MatChipMixinBase:\n    CanColorCtor & CanDisableRippleCtor & CanDisableCtor & typeof MatChipBase =\n        mixinColor(mixinDisableRipple(mixinDisabled(MatChipBase)), 'primary');\n\nconst CHIP_ATTRIBUTE_NAMES = ['mat-basic-chip'];\n\n/**\n * Dummy directive to add CSS class to chip avatar.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-chip-avatar, [matChipAvatar]',\n  host: {'class': 'mat-chip-avatar'}\n})\nexport class MatChipAvatar {}\n\n/**\n * Dummy directive to add CSS class to chip trailing icon.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-chip-trailing-icon, [matChipTrailingIcon]',\n  host: {'class': 'mat-chip-trailing-icon'}\n})\nexport class MatChipTrailingIcon {}\n\n/**\n * Material design styled Chip component. Used inside the MatChipList component.\n */\n@Directive({\n  selector: `mat-basic-chip, [mat-basic-chip], mat-chip, [mat-chip]`,\n  inputs: ['color', 'disabled', 'disableRipple'],\n  exportAs: 'matChip',\n  host: {\n    'class': 'mat-chip',\n    '[attr.tabindex]': 'disabled ? null : -1',\n    'role': 'option',\n    '[class.mat-chip-selected]': 'selected',\n    '[class.mat-chip-with-avatar]': 'avatar',\n    '[class.mat-chip-with-trailing-icon]': 'trailingIcon || removeIcon',\n    '[class.mat-chip-disabled]': 'disabled',\n    '[attr.disabled]': 'disabled || null',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.aria-selected]': 'ariaSelected',\n    '(click)': '_handleClick($event)',\n    '(keydown)': '_handleKeydown($event)',\n    '(focus)': 'focus()',\n    '(blur)': '_blur()',\n  },\n})\nexport class MatChip extends _MatChipMixinBase implements FocusableOption, OnDestroy, CanColor,\n    CanDisable, CanDisableRipple, RippleTarget {\n\n  /** Reference to the RippleRenderer for the chip. */\n  private _chipRipple: RippleRenderer;\n\n  /** Whether the ripples are globally disabled through the RippleGlobalOptions */\n  private _ripplesGloballyDisabled = false;\n\n  /**\n   * Ripple configuration for ripples that are launched on pointer down.\n   * @docs-private\n   */\n  rippleConfig: RippleConfig = {};\n\n  /**\n   * Whether ripples are disabled on interaction\n   * @docs-private\n   */\n  get rippleDisabled(): boolean {\n    return this.disabled || this.disableRipple || this._ripplesGloballyDisabled;\n  }\n\n  /** Whether the chip has focus. */\n  _hasFocus: boolean = false;\n\n  /** Whether the chip list is selectable */\n  chipListSelectable: boolean = true;\n\n  /** The chip avatar */\n  @ContentChild(MatChipAvatar) avatar: MatChipAvatar;\n\n  /** The chip's trailing icon. */\n  @ContentChild(MatChipTrailingIcon) trailingIcon: MatChipTrailingIcon;\n\n  /** The chip's remove toggler. */\n  @ContentChild(forwardRef(() => MatChipRemove)) removeIcon: MatChipRemove;\n\n  /** Whether the chip is selected. */\n  @Input()\n  get selected(): boolean { return this._selected; }\n  set selected(value: boolean) {\n    this._selected = coerceBooleanProperty(value);\n    this.selectionChange.emit({\n      source: this,\n      isUserInput: false,\n      selected: value\n    });\n  }\n  protected _selected: boolean = false;\n\n  /** The value of the chip. Defaults to the content inside `<mat-chip>` tags. */\n  @Input()\n  get value(): any {\n    return this._value != undefined\n      ? this._value\n      : this._elementRef.nativeElement.textContent;\n  }\n  set value(value: any) { this._value = value; }\n  protected _value: any;\n\n  /**\n   * Whether or not the chip is selectable. When a chip is not selectable,\n   * changes to it's selected state are always ignored. By default a chip is\n   * selectable, and it becomes non-selectable if it's parent chip list is\n   * not selectable.\n   */\n  @Input()\n  get selectable(): boolean { return this._selectable && this.chipListSelectable; }\n  set selectable(value: boolean) {\n    this._selectable = coerceBooleanProperty(value);\n  }\n  protected _selectable: boolean = true;\n\n  /**\n   * Determines whether or not the chip displays the remove styling and emits (removed) events.\n   */\n  @Input()\n  get removable(): boolean { return this._removable; }\n  set removable(value: boolean) {\n    this._removable = coerceBooleanProperty(value);\n  }\n  protected _removable: boolean = true;\n\n  /** Emits when the chip is focused. */\n  readonly _onFocus = new Subject<MatChipEvent>();\n\n  /** Emits when the chip is blured. */\n  readonly _onBlur = new Subject<MatChipEvent>();\n\n  /** Emitted when the chip is selected or deselected. */\n  @Output() readonly selectionChange: EventEmitter<MatChipSelectionChange> =\n      new EventEmitter<MatChipSelectionChange>();\n\n  /** Emitted when the chip is destroyed. */\n  @Output() readonly destroyed: EventEmitter<MatChipEvent> = new EventEmitter<MatChipEvent>();\n\n  /** Emitted when a chip is to be removed. */\n  @Output() readonly removed: EventEmitter<MatChipEvent> = new EventEmitter<MatChipEvent>();\n\n  /** The ARIA selected applied to the chip. */\n  get ariaSelected(): string | null {\n    return this.selectable ? this.selected.toString() : null;\n  }\n\n  constructor(public _elementRef: ElementRef,\n              private _ngZone: NgZone,\n              platform: Platform,\n              @Optional() @Inject(MAT_RIPPLE_GLOBAL_OPTIONS) globalOptions: RippleGlobalOptions) {\n    super(_elementRef);\n\n    this._addHostClassName();\n\n    this._chipRipple = new RippleRenderer(this, _ngZone, _elementRef, platform);\n    this._chipRipple.setupTriggerEvents(_elementRef.nativeElement);\n\n    if (globalOptions) {\n      this._ripplesGloballyDisabled = !!globalOptions.disabled;\n      // TODO(paul): Once the speedFactor is removed, we no longer need to copy each single option.\n      this.rippleConfig = {\n        speedFactor: globalOptions.baseSpeedFactor,\n        animation: globalOptions.animation,\n        terminateOnPointerUp: globalOptions.terminateOnPointerUp,\n      };\n    }\n  }\n\n  _addHostClassName() {\n    // Add class for the different chips\n    for (const attr of CHIP_ATTRIBUTE_NAMES) {\n      if (this._elementRef.nativeElement.hasAttribute(attr) ||\n        this._elementRef.nativeElement.tagName.toLowerCase() === attr) {\n        (this._elementRef.nativeElement as HTMLElement).classList.add(attr);\n        return;\n      }\n    }\n    (this._elementRef.nativeElement as HTMLElement).classList.add('mat-standard-chip');\n  }\n\n  ngOnDestroy() {\n    this.destroyed.emit({chip: this});\n    this._chipRipple._removeTriggerEvents();\n  }\n\n  /** Selects the chip. */\n  select(): void {\n    this._selected = true;\n    this.selectionChange.emit({\n      source: this,\n      isUserInput: false,\n      selected: true\n    });\n  }\n\n  /** Deselects the chip. */\n  deselect(): void {\n    this._selected = false;\n    this.selectionChange.emit({\n      source: this,\n      isUserInput: false,\n      selected: false\n    });\n  }\n\n  /** Select this chip and emit selected event */\n  selectViaInteraction(): void {\n    this._selected = true;\n    // Emit select event when selected changes.\n    this.selectionChange.emit({\n      source: this,\n      isUserInput: true,\n      selected: true\n    });\n  }\n\n  /** Toggles the current selected state of this chip. */\n  toggleSelected(isUserInput: boolean = false): boolean {\n    this._selected = !this.selected;\n\n    this.selectionChange.emit({\n      source: this,\n      isUserInput,\n      selected: this._selected\n    });\n\n    return this.selected;\n  }\n\n  /** Allows for programmatic focusing of the chip. */\n  focus(): void {\n    if (!this._hasFocus) {\n      this._elementRef.nativeElement.focus();\n      this._onFocus.next({chip: this});\n    }\n    this._hasFocus = true;\n  }\n\n  /**\n   * Allows for programmatic removal of the chip. Called by the MatChipList when the DELETE or\n   * BACKSPACE keys are pressed.\n   *\n   * Informs any listeners of the removal request. Does not remove the chip from the DOM.\n   */\n  remove(): void {\n    if (this.removable) {\n      this.removed.emit({chip: this});\n    }\n  }\n\n  /** Handles click events on the chip. */\n  _handleClick(event: Event) {\n    if (this.disabled) {\n      event.preventDefault();\n    } else {\n      event.stopPropagation();\n    }\n  }\n\n  /** Handle custom key presses. */\n  _handleKeydown(event: KeyboardEvent): void {\n    if (this.disabled) {\n      return;\n    }\n\n    switch (event.keyCode) {\n      case DELETE:\n      case BACKSPACE:\n        // If we are removable, remove the focused chip\n        this.remove();\n        // Always prevent so page navigation does not occur\n        event.preventDefault();\n        break;\n      case SPACE:\n        // If we are selectable, toggle the focused chip\n        if (this.selectable) {\n          this.toggleSelected(true);\n        }\n\n        // Always prevent space from scrolling the page since the list has focus\n        event.preventDefault();\n        break;\n    }\n  }\n\n  _blur(): void {\n    // When animations are enabled, Angular may end up removing the chip from the DOM a little\n    // earlier than usual, causing it to be blurred and throwing off the logic in the chip list\n    // that moves focus not the next item. To work around the issue, we defer marking the chip\n    // as not focused until the next time the zone stabilizes.\n    this._ngZone.onStable\n      .asObservable()\n      .pipe(take(1))\n      .subscribe(() => {\n        this._ngZone.run(() => {\n          this._hasFocus = false;\n          this._onBlur.next({chip: this});\n        });\n      });\n  }\n}\n\n\n/**\n * Applies proper (click) support and adds styling for use with the Material Design \"cancel\" icon\n * available at https://material.io/icons/#ic_cancel.\n *\n * Example:\n *\n *     `<mat-chip>\n *       <mat-icon matChipRemove>cancel</mat-icon>\n *     </mat-chip>`\n *\n * You *may* use a custom icon, but you may need to override the `mat-chip-remove` positioning\n * styles to properly center the icon within the chip.\n */\n@Directive({\n  selector: '[matChipRemove]',\n  host: {\n    'class': 'mat-chip-remove mat-chip-trailing-icon',\n    '(click)': '_handleClick($event)',\n  }\n})\nexport class MatChipRemove {\n  constructor(protected _parentChip: MatChip) {}\n\n  /** Calls the parent chip's public `remove()` method if applicable. */\n  _handleClick(event: Event): void {\n    if (this._parentChip.removable) {\n      this._parentChip.remove();\n    }\n\n    // We need to stop event propagation because otherwise the event will bubble up to the\n    // form field and cause the `onContainerClick` method to be invoked. This method would then\n    // reset the focused chip that has been focused after chip removal. Usually the parent\n    // the parent click listener of the `MatChip` would prevent propagation, but it can happen\n    // that the chip is being removed before the event bubbles up.\n    event.stopPropagation();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {InjectionToken} from '@angular/core';\n\n/** Default options, for the chips module, that can be overridden. */\nexport interface MatChipsDefaultOptions {\n  /** The list of key codes that will trigger a chipEnd event. */\n  separatorKeyCodes: number[] | Set<number>;\n}\n\n/** Injection token to be used to override the default options for the chips module. */\nexport const MAT_CHIPS_DEFAULT_OPTIONS =\n    new InjectionToken<MatChipsDefaultOptions>('mat-chips-default-options');\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor} from '@angular/cdk/a11y';\nimport {Platform} from '@angular/cdk/platform';\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  OnDestroy,\n  ViewChild,\n  ViewEncapsulation,\n  Optional,\n  Inject,\n  Input,\n} from '@angular/core';\nimport {\n  CanColor,\n  CanDisable,\n  CanDisableRipple,\n  CanColorCtor,\n  CanDisableCtor,\n  CanDisableRippleCtor,\n  MatRipple,\n  mixinColor,\n  mixinDisabled,\n  mixinDisableRipple,\n} from '@angular/material/core';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\n\n/** Default color palette for round buttons (mat-fab and mat-mini-fab) */\nconst DEFAULT_ROUND_BUTTON_COLOR = 'accent';\n\n/**\n * List of classes to add to MatButton instances based on host attributes to\n * style as different variants.\n */\nconst BUTTON_HOST_ATTRIBUTES = [\n  'mat-button',\n  'mat-flat-button',\n  'mat-icon-button',\n  'mat-raised-button',\n  'mat-stroked-button',\n  'mat-mini-fab',\n  'mat-fab',\n];\n\n// Boilerplate for applying mixins to MatButton.\n/** @docs-private */\nexport class MatButtonBase {\n  constructor(public _elementRef: ElementRef) {}\n}\n\nexport const _MatButtonMixinBase:\n    CanDisableRippleCtor & CanDisableCtor & CanColorCtor & typeof MatButtonBase =\n        mixinColor(mixinDisabled(mixinDisableRipple(MatButtonBase)));\n\n/**\n * Material design button.\n */\n@Component({\n  moduleId: module.id,\n  selector: `button[mat-button], button[mat-raised-button], button[mat-icon-button],\n             button[mat-fab], button[mat-mini-fab], button[mat-stroked-button],\n             button[mat-flat-button]`,\n  exportAs: 'matButton',\n  host: {\n    '[disabled]': 'disabled || null',\n    '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"',\n  },\n  templateUrl: 'button.html',\n  styleUrls: ['button.css'],\n  inputs: ['disabled', 'disableRipple', 'color'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatButton extends _MatButtonMixinBase\n    implements OnDestroy, CanDisable, CanColor, CanDisableRipple {\n\n  /** Whether the button is round. */\n  readonly isRoundButton: boolean = this._hasHostAttributes('mat-fab', 'mat-mini-fab');\n\n  /** Whether the button is icon button. */\n  readonly isIconButton: boolean = this._hasHostAttributes('mat-icon-button');\n\n  /** Reference to the MatRipple instance of the button. */\n  @ViewChild(MatRipple) ripple: MatRipple;\n\n  constructor(elementRef: ElementRef,\n              /**\n               * @deprecated Platform checks for SSR are no longer needed\n               * @breaking-change 7.0.0\n               */\n              // tslint:disable-next-line:no-unused-variable\n              private _platform: Platform,\n              private _focusMonitor: FocusMonitor,\n              // @breaking-change 7.0.0 `_animationMode` parameter to be made required.\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode?: string) {\n    super(elementRef);\n\n    // For each of the variant selectors that is prevent in the button's host\n    // attributes, add the correct corresponding class.\n    for (const attr of BUTTON_HOST_ATTRIBUTES) {\n      if (this._hasHostAttributes(attr)) {\n        (elementRef.nativeElement as HTMLElement).classList.add(attr);\n      }\n    }\n\n    this._focusMonitor.monitor(this._elementRef, true);\n\n    if (this.isRoundButton) {\n      this.color = DEFAULT_ROUND_BUTTON_COLOR;\n    }\n  }\n\n  ngOnDestroy() {\n    this._focusMonitor.stopMonitoring(this._elementRef);\n  }\n\n  /** Focuses the button. */\n  focus(): void {\n    this._getHostElement().focus();\n  }\n\n  _getHostElement() {\n    return this._elementRef.nativeElement;\n  }\n\n  _isRippleDisabled() {\n    return this.disableRipple || this.disabled;\n  }\n\n  /** Gets whether the button has one of the given attributes. */\n  _hasHostAttributes(...attributes: string[]) {\n    return attributes.some(attribute => this._getHostElement().hasAttribute(attribute));\n  }\n}\n\n/**\n * Raised Material design button.\n */\n@Component({\n  moduleId: module.id,\n  selector: `a[mat-button], a[mat-raised-button], a[mat-icon-button], a[mat-fab],\n             a[mat-mini-fab], a[mat-stroked-button], a[mat-flat-button]`,\n  exportAs: 'matButton, matAnchor',\n  host: {\n    // Note that we ignore the user-specified tabindex when it's disabled for\n    // consistency with the `mat-button` applied on native buttons where even\n    // though they have an index, they're not tabbable.\n    '[attr.tabindex]': 'disabled ? -1 : (tabIndex || 0)',\n    '[attr.disabled]': 'disabled || null',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '(click)': '_haltDisabledEvents($event)',\n    '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"',\n  },\n  inputs: ['disabled', 'disableRipple', 'color'],\n  templateUrl: 'button.html',\n  styleUrls: ['button.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatAnchor extends MatButton {\n  /** Tabindex of the button. */\n  @Input() tabIndex: number;\n\n  constructor(\n    platform: Platform,\n    focusMonitor: FocusMonitor,\n    elementRef: ElementRef,\n    // @breaking-change 7.0.0 `animationMode` parameter to be made required.\n    @Optional() @Inject(ANIMATION_MODULE_TYPE) animationMode?: string) {\n    super(elementRef, platform, focusMonitor, animationMode);\n  }\n\n  _haltDisabledEvents(event: Event) {\n    // A disabled button shouldn't apply any actions\n    if (this.disabled) {\n      event.preventDefault();\n      event.stopImmediatePropagation();\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {MatAnchor, MatButton} from './button';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatRippleModule,\n    MatCommonModule,\n  ],\n  exports: [\n    MatButton,\n    MatAnchor,\n    MatCommonModule,\n  ],\n  declarations: [\n    MatButton,\n    MatAnchor,\n  ],\n})\nexport class MatButtonModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {SelectionModel} from '@angular/cdk/collections';\nimport {\n  AfterContentInit,\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Input,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Output,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {\n  CanDisableRipple,\n  mixinDisableRipple,\n  CanDisableRippleCtor,\n} from '@angular/material/core';\n\n\n/** Acceptable types for a button toggle. */\nexport type ToggleType = 'checkbox' | 'radio';\n\n/**\n * Provider Expression that allows mat-button-toggle-group to register as a ControlValueAccessor.\n * This allows it to support [(ngModel)].\n * @docs-private\n */\nexport const MAT_BUTTON_TOGGLE_GROUP_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatButtonToggleGroup),\n  multi: true\n};\n\n/**\n * @deprecated Use `MatButtonToggleGroup` instead.\n * @breaking-change 7.0.0\n */\nexport class MatButtonToggleGroupMultiple {}\n\nlet _uniqueIdCounter = 0;\n\n/** Change event object emitted by MatButtonToggle. */\nexport class MatButtonToggleChange {\n  constructor(\n    /** The MatButtonToggle that emits the event. */\n    public source: MatButtonToggle,\n\n    /** The value assigned to the MatButtonToggle. */\n    public value: any) {}\n}\n\n/** Exclusive selection button toggle group that behaves like a radio-button group. */\n@Directive({\n  selector: 'mat-button-toggle-group',\n  providers: [\n    MAT_BUTTON_TOGGLE_GROUP_VALUE_ACCESSOR,\n    {provide: MatButtonToggleGroupMultiple, useExisting: MatButtonToggleGroup},\n  ],\n  host: {\n    'role': 'group',\n    'class': 'mat-button-toggle-group',\n    '[attr.aria-disabled]': 'disabled',\n    '[class.mat-button-toggle-vertical]': 'vertical'\n  },\n  exportAs: 'matButtonToggleGroup',\n})\nexport class MatButtonToggleGroup implements ControlValueAccessor, OnInit, AfterContentInit {\n\n  private _vertical = false;\n  private _multiple = false;\n  private _disabled = false;\n  private _selectionModel: SelectionModel<MatButtonToggle>;\n\n  /**\n   * Reference to the raw value that the consumer tried to assign. The real\n   * value will exclude any values from this one that don't correspond to a\n   * toggle. Useful for the cases where the value is assigned before the toggles\n   * have been initialized or at the same that they're being swapped out.\n   */\n  private _rawValue: any;\n\n  /**\n   * The method to be called in order to update ngModel.\n   * Now `ngModel` binding is not supported in multiple selection mode.\n   */\n  _controlValueAccessorChangeFn: (value: any) => void = () => {};\n\n  /** onTouch function registered via registerOnTouch (ControlValueAccessor). */\n  _onTouched: () => any = () => {};\n\n  /** Child button toggle buttons. */\n  @ContentChildren(forwardRef(() => MatButtonToggle)) _buttonToggles: QueryList<MatButtonToggle>;\n\n  /** `name` attribute for the underlying `input` element. */\n  @Input()\n  get name(): string { return this._name; }\n  set name(value: string) {\n    this._name = value;\n\n    if (this._buttonToggles) {\n      this._buttonToggles.forEach(toggle => toggle.name = this._name);\n    }\n  }\n  private _name = `mat-button-toggle-group-${_uniqueIdCounter++}`;\n\n  /** Whether the toggle group is vertical. */\n  @Input()\n  get vertical(): boolean { return this._vertical; }\n  set vertical(value: boolean) {\n    this._vertical = coerceBooleanProperty(value);\n  }\n\n  /** Value of the toggle group. */\n  @Input()\n  get value(): any {\n    const selected = this._selectionModel ? this._selectionModel.selected : [];\n\n    if (this.multiple) {\n      return selected.map(toggle => toggle.value);\n    }\n\n    return selected[0] ? selected[0].value : undefined;\n  }\n  set value(newValue: any) {\n    this._setSelectionByValue(newValue);\n    this.valueChange.emit(this.value);\n  }\n\n  /**\n   * Event that emits whenever the value of the group changes.\n   * Used to facilitate two-way data binding.\n   * @docs-private\n   */\n  @Output() readonly valueChange = new EventEmitter<any>();\n\n  /** Selected button toggles in the group. */\n  get selected() {\n    const selected = this._selectionModel.selected;\n    return this.multiple ? selected : (selected[0] || null);\n  }\n\n  /** Whether multiple button toggles can be selected. */\n  @Input()\n  get multiple(): boolean { return this._multiple; }\n  set multiple(value: boolean) {\n    this._multiple = coerceBooleanProperty(value);\n  }\n\n  /** Whether multiple button toggle group is disabled. */\n  @Input()\n  get disabled(): boolean { return this._disabled; }\n  set disabled(value: boolean) {\n    this._disabled = coerceBooleanProperty(value);\n\n    if (this._buttonToggles) {\n      this._buttonToggles.forEach(toggle => toggle._markForCheck());\n    }\n  }\n\n  /** Event emitted when the group's value changes. */\n  @Output() readonly change: EventEmitter<MatButtonToggleChange> =\n      new EventEmitter<MatButtonToggleChange>();\n\n  constructor(private _changeDetector: ChangeDetectorRef) {}\n\n  ngOnInit() {\n    this._selectionModel = new SelectionModel<MatButtonToggle>(this.multiple, undefined, false);\n  }\n\n  ngAfterContentInit() {\n    this._selectionModel.select(...this._buttonToggles.filter(toggle => toggle.checked));\n  }\n\n  /**\n   * Sets the model value. Implemented as part of ControlValueAccessor.\n   * @param value Value to be set to the model.\n   */\n  writeValue(value: any) {\n    this.value = value;\n    this._changeDetector.markForCheck();\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnChange(fn: (value: any) => void) {\n    this._controlValueAccessorChangeFn = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnTouched(fn: any) {\n    this._onTouched = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n  }\n\n  /** Dispatch change event with current selection and group value. */\n  _emitChangeEvent(): void {\n    const selected = this.selected;\n    const source = Array.isArray(selected) ? selected[selected.length - 1] : selected;\n    const event = new MatButtonToggleChange(source!, this.value);\n    this._controlValueAccessorChangeFn(event.value);\n    this.change.emit(event);\n  }\n\n  /**\n   * Syncs a button toggle's selected state with the model value.\n   * @param toggle Toggle to be synced.\n   * @param select Whether the toggle should be selected.\n   * @param isUserInput Whether the change was a result of a user interaction.\n   */\n  _syncButtonToggle(toggle: MatButtonToggle, select: boolean, isUserInput = false) {\n    // Deselect the currently-selected toggle, if we're in single-selection\n    // mode and the button being toggled isn't selected at the moment.\n    if (!this.multiple && this.selected && !toggle.checked) {\n      (this.selected as MatButtonToggle).checked = false;\n    }\n\n    if (select) {\n      this._selectionModel.select(toggle);\n    } else {\n      this._selectionModel.deselect(toggle);\n    }\n\n    // Only emit the change event for user input.\n    if (isUserInput) {\n      this._emitChangeEvent();\n    }\n\n    // Note: we emit this one no matter whether it was a user interaction, because\n    // it is used by Angular to sync up the two-way data binding.\n    this.valueChange.emit(this.value);\n  }\n\n  /** Checks whether a button toggle is selected. */\n  _isSelected(toggle: MatButtonToggle) {\n    return this._selectionModel.isSelected(toggle);\n  }\n\n  /** Determines whether a button toggle should be checked on init. */\n  _isPrechecked(toggle: MatButtonToggle) {\n    if (typeof this._rawValue === 'undefined') {\n      return false;\n    }\n\n    if (this.multiple && Array.isArray(this._rawValue)) {\n      return this._rawValue.some(value => toggle.value != null && value === toggle.value);\n    }\n\n    return toggle.value === this._rawValue;\n  }\n\n  /** Updates the selection state of the toggles in the group based on a value. */\n  private _setSelectionByValue(value: any|any[]) {\n    this._rawValue = value;\n\n    if (!this._buttonToggles) {\n      return;\n    }\n\n    if (this.multiple && value) {\n      if (!Array.isArray(value)) {\n        throw Error('Value must be an array in multiple-selection mode.');\n      }\n\n      this._clearSelection();\n      value.forEach((currentValue: any) => this._selectValue(currentValue));\n    } else {\n      this._clearSelection();\n      this._selectValue(value);\n    }\n  }\n\n  /** Clears the selected toggles. */\n  private _clearSelection() {\n    this._selectionModel.clear();\n    this._buttonToggles.forEach(toggle => toggle.checked = false);\n  }\n\n  /** Selects a value if there's a toggle that corresponds to it. */\n  private _selectValue(value: any) {\n    const correspondingOption = this._buttonToggles.find(toggle => {\n      return toggle.value != null && toggle.value === value;\n    });\n\n    if (correspondingOption) {\n      correspondingOption.checked = true;\n      this._selectionModel.select(correspondingOption);\n    }\n  }\n}\n\n// Boilerplate for applying mixins to the MatButtonToggle class.\n/** @docs-private */\nexport class MatButtonToggleBase {}\nexport const _MatButtonToggleMixinBase: CanDisableRippleCtor & typeof MatButtonToggleBase =\n    mixinDisableRipple(MatButtonToggleBase);\n\n/** Single button inside of a toggle group. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-button-toggle',\n  templateUrl: 'button-toggle.html',\n  styleUrls: ['button-toggle.css'],\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matButtonToggle',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  inputs: ['disableRipple'],\n  host: {\n    '[class.mat-button-toggle-standalone]': '!buttonToggleGroup',\n    '[class.mat-button-toggle-checked]': 'checked',\n    '[class.mat-button-toggle-disabled]': 'disabled',\n    'class': 'mat-button-toggle',\n    // Clear out the native tabindex here since we forward it to the underlying button\n    '[attr.tabindex]': 'null',\n    '[attr.id]': 'id',\n  }\n})\nexport class MatButtonToggle extends _MatButtonToggleMixinBase implements OnInit,\n  CanDisableRipple, OnDestroy {\n\n  private _isSingleSelector = false;\n  private _checked = false;\n\n  /**\n   * Attached to the aria-label attribute of the host element. In most cases, arial-labelledby will\n   * take precedence so this may be omitted.\n   */\n  @Input('aria-label') ariaLabel: string;\n\n  /**\n   * Users can specify the `aria-labelledby` attribute which will be forwarded to the input element\n   */\n  @Input('aria-labelledby') ariaLabelledby: string | null = null;\n\n  /** Type of the button toggle. Either 'radio' or 'checkbox'. */\n  _type: ToggleType;\n\n  @ViewChild('button') _buttonElement: ElementRef<HTMLButtonElement>;\n\n  /** The parent button toggle group (exclusive selection). Optional. */\n  buttonToggleGroup: MatButtonToggleGroup;\n\n  /** Unique ID for the underlying `button` element. */\n  get buttonId(): string { return `${this.id}-button`; }\n\n  /** The unique ID for this button toggle. */\n  @Input() id: string;\n\n  /** HTML's 'name' attribute used to group radios for unique selection. */\n  @Input() name: string;\n\n  /** MatButtonToggleGroup reads this to assign its own value. */\n  @Input() value: any;\n\n  /** Tabindex for the toggle. */\n  @Input() tabIndex: number | null;\n\n  /** Whether the button is checked. */\n  @Input()\n  get checked(): boolean {\n    return this.buttonToggleGroup ? this.buttonToggleGroup._isSelected(this) : this._checked;\n  }\n  set checked(value: boolean) {\n    const newValue = coerceBooleanProperty(value);\n\n    if (newValue !== this._checked) {\n      this._checked = newValue;\n\n      if (this.buttonToggleGroup) {\n        this.buttonToggleGroup._syncButtonToggle(this, this._checked);\n      }\n\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  /** Whether the button is disabled. */\n  @Input()\n  get disabled(): boolean {\n    return this._disabled || (this.buttonToggleGroup && this.buttonToggleGroup.disabled);\n  }\n  set disabled(value: boolean) { this._disabled = coerceBooleanProperty(value); }\n  private _disabled: boolean = false;\n\n  /** Event emitted when the group value changes. */\n  @Output() readonly change: EventEmitter<MatButtonToggleChange> =\n      new EventEmitter<MatButtonToggleChange>();\n\n  constructor(@Optional() toggleGroup: MatButtonToggleGroup,\n              private _changeDetectorRef: ChangeDetectorRef,\n              private _elementRef: ElementRef<HTMLElement>,\n              private _focusMonitor: FocusMonitor,\n              // @breaking-change 8.0.0 `defaultTabIndex` to be made a required parameter.\n              @Attribute('tabindex') defaultTabIndex: string) {\n    super();\n\n    const parsedTabIndex = Number(defaultTabIndex);\n    this.tabIndex = (parsedTabIndex || parsedTabIndex === 0) ? parsedTabIndex : null;\n    this.buttonToggleGroup = toggleGroup;\n  }\n\n  ngOnInit() {\n    this._isSingleSelector = this.buttonToggleGroup && !this.buttonToggleGroup.multiple;\n    this._type = this._isSingleSelector ? 'radio' : 'checkbox';\n    this.id = this.id || `mat-button-toggle-${_uniqueIdCounter++}`;\n\n    if (this._isSingleSelector) {\n      this.name = this.buttonToggleGroup.name;\n    }\n\n    if (this.buttonToggleGroup && this.buttonToggleGroup._isPrechecked(this)) {\n      this.checked = true;\n    }\n\n    this._focusMonitor.monitor(this._elementRef, true);\n  }\n\n  ngOnDestroy() {\n    this._focusMonitor.stopMonitoring(this._elementRef);\n  }\n\n  /** Focuses the button. */\n  focus(): void {\n    this._buttonElement.nativeElement.focus();\n  }\n\n  /** Checks the button toggle due to an interaction with the underlying native button. */\n  _onButtonClick() {\n    const newChecked = this._isSingleSelector ? true : !this._checked;\n\n    if (newChecked !== this._checked) {\n      this._checked = newChecked;\n      if (this.buttonToggleGroup) {\n        this.buttonToggleGroup._syncButtonToggle(this, this._checked, true);\n        this.buttonToggleGroup._onTouched();\n      }\n    }\n    // Emit a change event when it's the single selector\n    this.change.emit(new MatButtonToggleChange(this, this.value));\n  }\n\n  /**\n   * Marks the button toggle as needing checking for change detection.\n   * This method is exposed because the parent button toggle group will directly\n   * update bound properties of the radio button.\n   */\n  _markForCheck() {\n    // When the group value changes, the button will not be notified.\n    // Use `markForCheck` to explicit update button toggle's status.\n    this._changeDetectorRef.markForCheck();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {MatButtonToggle, MatButtonToggleGroup} from './button-toggle';\n\n\n@NgModule({\n  imports: [MatCommonModule, MatRippleModule],\n  exports: [MatCommonModule, MatButtonToggleGroup, MatButtonToggle],\n  declarations: [MatButtonToggleGroup, MatButtonToggle],\n})\nexport class MatButtonToggleModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ActiveDescendantKeyManager} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  InjectionToken,\n  Input,\n  Output,\n  QueryList,\n  TemplateRef,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {\n  CanDisableRipple,\n  CanDisableRippleCtor,\n  MAT_OPTION_PARENT_COMPONENT,\n  MatOptgroup,\n  MatOption,\n  mixinDisableRipple,\n} from '@angular/material/core';\n\n\n/**\n * Autocomplete IDs need to be unique across components, so this counter exists outside of\n * the component definition.\n */\nlet _uniqueAutocompleteIdCounter = 0;\n\n/** Event object that is emitted when an autocomplete option is selected. */\nexport class MatAutocompleteSelectedEvent {\n  constructor(\n    /** Reference to the autocomplete panel that emitted the event. */\n    public source: MatAutocomplete,\n    /** Option that was selected. */\n    public option: MatOption) { }\n}\n\n\n// Boilerplate for applying mixins to MatAutocomplete.\n/** @docs-private */\nexport class MatAutocompleteBase {}\nexport const _MatAutocompleteMixinBase: CanDisableRippleCtor & typeof MatAutocompleteBase =\n    mixinDisableRipple(MatAutocompleteBase);\n\n/** Default `mat-autocomplete` options that can be overridden. */\nexport interface MatAutocompleteDefaultOptions {\n  /** Whether the first option should be highlighted when an autocomplete panel is opened. */\n  autoActiveFirstOption?: boolean;\n}\n\n/** Injection token to be used to override the default options for `mat-autocomplete`. */\nexport const MAT_AUTOCOMPLETE_DEFAULT_OPTIONS =\n    new InjectionToken<MatAutocompleteDefaultOptions>('mat-autocomplete-default-options', {\n      providedIn: 'root',\n      factory: MAT_AUTOCOMPLETE_DEFAULT_OPTIONS_FACTORY,\n    });\n\n/** @docs-private */\nexport function MAT_AUTOCOMPLETE_DEFAULT_OPTIONS_FACTORY(): MatAutocompleteDefaultOptions {\n  return {autoActiveFirstOption: false};\n}\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-autocomplete',\n  templateUrl: 'autocomplete.html',\n  styleUrls: ['autocomplete.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  exportAs: 'matAutocomplete',\n  inputs: ['disableRipple'],\n  host: {\n    'class': 'mat-autocomplete'\n  },\n  providers: [\n    {provide: MAT_OPTION_PARENT_COMPONENT, useExisting: MatAutocomplete}\n  ]\n})\nexport class MatAutocomplete extends _MatAutocompleteMixinBase implements AfterContentInit,\n  CanDisableRipple {\n\n  /** Manages active item in option list based on key events. */\n  _keyManager: ActiveDescendantKeyManager<MatOption>;\n\n  /** Whether the autocomplete panel should be visible, depending on option length. */\n  showPanel: boolean = false;\n\n  /** Whether the autocomplete panel is open. */\n  get isOpen(): boolean { return this._isOpen && this.showPanel; }\n  _isOpen: boolean = false;\n\n  /** @docs-private */\n  @ViewChild(TemplateRef) template: TemplateRef<any>;\n\n  /** Element for the panel containing the autocomplete options. */\n  @ViewChild('panel') panel: ElementRef;\n\n  /** @docs-private */\n  @ContentChildren(MatOption, { descendants: true }) options: QueryList<MatOption>;\n\n  /** @docs-private */\n  @ContentChildren(MatOptgroup) optionGroups: QueryList<MatOptgroup>;\n\n  /** Function that maps an option's control value to its display value in the trigger. */\n  @Input() displayWith: ((value: any) => string) | null = null;\n\n  /**\n   * Whether the first option should be highlighted when the autocomplete panel is opened.\n   * Can be configured globally through the `MAT_AUTOCOMPLETE_DEFAULT_OPTIONS` token.\n   */\n  @Input()\n  get autoActiveFirstOption(): boolean { return this._autoActiveFirstOption; }\n  set autoActiveFirstOption(value: boolean) {\n    this._autoActiveFirstOption = coerceBooleanProperty(value);\n  }\n  private _autoActiveFirstOption: boolean;\n\n  /**\n   * Specify the width of the autocomplete panel.  Can be any CSS sizing value, otherwise it will\n   * match the width of its host.\n   */\n  @Input() panelWidth: string | number;\n\n  /** Event that is emitted whenever an option from the list is selected. */\n  @Output() readonly optionSelected: EventEmitter<MatAutocompleteSelectedEvent> =\n      new EventEmitter<MatAutocompleteSelectedEvent>();\n\n  /** Event that is emitted when the autocomplete panel is opened. */\n  @Output() readonly opened: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Event that is emitted when the autocomplete panel is closed. */\n  @Output() readonly closed: EventEmitter<void> = new EventEmitter<void>();\n\n  /**\n   * Takes classes set on the host mat-autocomplete element and applies them to the panel\n   * inside the overlay container to allow for easy styling.\n   */\n  @Input('class')\n  set classList(value: string) {\n    if (value && value.length) {\n      value.split(' ').forEach(className => this._classList[className.trim()] = true);\n      this._elementRef.nativeElement.className = '';\n    }\n  }\n  _classList: {[key: string]: boolean} = {};\n\n  /** Unique ID to be used by autocomplete trigger's \"aria-owns\" property. */\n  id: string = `mat-autocomplete-${_uniqueAutocompleteIdCounter++}`;\n\n  constructor(\n    private _changeDetectorRef: ChangeDetectorRef,\n    private _elementRef: ElementRef<HTMLElement>,\n    @Inject(MAT_AUTOCOMPLETE_DEFAULT_OPTIONS) defaults: MatAutocompleteDefaultOptions) {\n    super();\n\n    this._autoActiveFirstOption = !!defaults.autoActiveFirstOption;\n  }\n\n  ngAfterContentInit() {\n    this._keyManager = new ActiveDescendantKeyManager<MatOption>(this.options).withWrap();\n    // Set the initial visibility state.\n    this._setVisibility();\n  }\n\n  /**\n   * Sets the panel scrollTop. This allows us to manually scroll to display options\n   * above or below the fold, as they are not actually being focused when active.\n   */\n  _setScrollTop(scrollTop: number): void {\n    if (this.panel) {\n      this.panel.nativeElement.scrollTop = scrollTop;\n    }\n  }\n\n  /** Returns the panel's scrollTop. */\n  _getScrollTop(): number {\n    return this.panel ? this.panel.nativeElement.scrollTop : 0;\n  }\n\n  /** Panel should hide itself when the option list is empty. */\n  _setVisibility() {\n    this.showPanel = !!this.options.length;\n    this._classList['mat-autocomplete-visible'] = this.showPanel;\n    this._classList['mat-autocomplete-hidden'] = !this.showPanel;\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Emits the `select` event. */\n  _emitSelectEvent(option: MatOption): void {\n    const event = new MatAutocompleteSelectedEvent(this, option);\n    this.optionSelected.emit(event);\n  }\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, ElementRef} from '@angular/core';\n\n/**\n * Directive applied to an element to make it usable\n * as a connection point for an autocomplete panel.\n */\n@Directive({\n  selector: '[matAutocompleteOrigin]',\n  exportAs: 'matAutocompleteOrigin',\n})\nexport class MatAutocompleteOrigin {\n  constructor(\n      /** Reference to the element on which the directive is applied. */\n      public elementRef: ElementRef<HTMLElement>) { }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {MatOptionModule, MatCommonModule} from '@angular/material/core';\nimport {MatAutocomplete} from './autocomplete';\nimport {\n  MatAutocompleteTrigger,\n  MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY_PROVIDER,\n} from './autocomplete-trigger';\nimport {MatAutocompleteOrigin} from './autocomplete-origin';\n\n@NgModule({\n  imports: [MatOptionModule, OverlayModule, MatCommonModule, CommonModule],\n  exports: [\n    MatAutocomplete,\n    MatOptionModule,\n    MatAutocompleteTrigger,\n    MatAutocompleteOrigin,\n    MatCommonModule\n  ],\n  declarations: [MatAutocomplete, MatAutocompleteTrigger, MatAutocompleteOrigin],\n  providers: [MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY_PROVIDER],\n})\nexport class MatAutocompleteModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {AriaDescriber} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {DOCUMENT} from '@angular/common';\nimport {\n  Directive,\n  ElementRef,\n  Inject,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  Renderer2,\n} from '@angular/core';\nimport {ThemePalette} from '@angular/material/core';\n\n\nlet nextId = 0;\n\nexport type MatBadgePosition = 'above after' | 'above before' | 'below before' | 'below after';\nexport type MatBadgeSize = 'small' | 'medium' | 'large';\n\n/** Directive to display a text badge. */\n@Directive({\n  selector: '[matBadge]',\n  host: {\n    'class': 'mat-badge',\n    '[class.mat-badge-overlap]': 'overlap',\n    '[class.mat-badge-above]': 'isAbove()',\n    '[class.mat-badge-below]': '!isAbove()',\n    '[class.mat-badge-before]': '!isAfter()',\n    '[class.mat-badge-after]': 'isAfter()',\n    '[class.mat-badge-small]': 'size === \"small\"',\n    '[class.mat-badge-medium]': 'size === \"medium\"',\n    '[class.mat-badge-large]': 'size === \"large\"',\n    '[class.mat-badge-hidden]': 'hidden || !_hasContent',\n  },\n})\nexport class MatBadge implements OnDestroy {\n  /** Whether the badge has any content. */\n  _hasContent = false;\n\n  /** The color of the badge. Can be `primary`, `accent`, or `warn`. */\n  @Input('matBadgeColor')\n  get color(): ThemePalette { return this._color; }\n  set color(value: ThemePalette) {\n    this._setColor(value);\n    this._color = value;\n  }\n  private _color: ThemePalette = 'primary';\n\n  /** Whether the badge should overlap its contents or not */\n  @Input('matBadgeOverlap')\n  get overlap(): boolean { return this._overlap; }\n  set overlap(val: boolean) {\n    this._overlap = coerceBooleanProperty(val);\n  }\n  private _overlap: boolean = true;\n\n  /**\n   * Position the badge should reside.\n   * Accepts any combination of 'above'|'below' and 'before'|'after'\n   */\n  @Input('matBadgePosition') position: MatBadgePosition = 'above after';\n\n  /** The content for the badge */\n  @Input('matBadge')\n  get content(): string { return this._content; }\n  set content(value: string) {\n    this._content = value;\n    this._hasContent = value != null && `${value}`.trim().length > 0;\n    this._updateTextContent();\n  }\n  private _content: string;\n\n  /** Message used to describe the decorated element via aria-describedby */\n  @Input('matBadgeDescription')\n  get description(): string { return this._description; }\n  set description(newDescription: string) {\n    if (newDescription !== this._description) {\n      this._updateHostAriaDescription(newDescription, this._description);\n      this._description = newDescription;\n    }\n  }\n  private _description: string;\n\n  /** Size of the badge. Can be 'small', 'medium', or 'large'. */\n  @Input('matBadgeSize') size: MatBadgeSize = 'medium';\n\n  /** Whether the badge is hidden. */\n  @Input('matBadgeHidden')\n  get hidden(): boolean { return this._hidden; }\n  set hidden(val: boolean) {\n    this._hidden = coerceBooleanProperty(val);\n  }\n  private _hidden: boolean;\n\n  /** Unique id for the badge */\n  _id: number = nextId++;\n\n  private _badgeElement: HTMLElement;\n\n  constructor(\n      @Optional() @Inject(DOCUMENT) private _document: any,\n      private _ngZone: NgZone,\n      private _elementRef: ElementRef<HTMLElement>,\n      private _ariaDescriber: AriaDescriber,\n      /** @breaking-change 8.0.0 Make _renderer a required param and remove _document. */\n      private _renderer?: Renderer2) {}\n\n  /** Whether the badge is above the host or not */\n  isAbove(): boolean {\n    return this.position.indexOf('below') === -1;\n  }\n\n  /** Whether the badge is after the host or not */\n  isAfter(): boolean {\n    return this.position.indexOf('before') === -1;\n  }\n\n  ngOnDestroy() {\n    if (this.description && this._badgeElement) {\n      this._ariaDescriber.removeDescription(this._badgeElement, this.description);\n    }\n  }\n\n  /** Injects a span element into the DOM with the content. */\n  private _updateTextContent(): HTMLSpanElement {\n    if (!this._badgeElement) {\n      this._badgeElement = this._createBadgeElement();\n    } else {\n      this._badgeElement.textContent = this.content;\n    }\n    return this._badgeElement;\n  }\n\n  /** Creates the badge element */\n  private _createBadgeElement(): HTMLElement {\n    // @breaking-change 8.0.0 Remove null check for _renderer\n    const rootNode = this._renderer || this._document;\n    const badgeElement = rootNode.createElement('span');\n    const activeClass = 'mat-badge-active';\n\n    badgeElement.setAttribute('id', `mat-badge-content-${this._id}`);\n    badgeElement.classList.add('mat-badge-content');\n    badgeElement.textContent = this.content;\n\n    if (this.description) {\n      badgeElement.setAttribute('aria-label', this.description);\n    }\n\n    this._elementRef.nativeElement.appendChild(badgeElement);\n\n    // animate in after insertion\n    if (typeof requestAnimationFrame === 'function') {\n      this._ngZone.runOutsideAngular(() => {\n        requestAnimationFrame(() => {\n          badgeElement.classList.add(activeClass);\n        });\n      });\n    } else {\n      badgeElement.classList.add(activeClass);\n    }\n\n    return badgeElement;\n  }\n\n  /** Sets the aria-label property on the element */\n  private _updateHostAriaDescription(newDescription: string, oldDescription: string): void {\n    // ensure content available before setting label\n    const content = this._updateTextContent();\n\n    if (oldDescription) {\n      this._ariaDescriber.removeDescription(content, oldDescription);\n    }\n\n    if (newDescription) {\n      this._ariaDescriber.describe(content, newDescription);\n    }\n  }\n\n  /** Adds css theme class given the color to the component host */\n  private _setColor(colorPalette: ThemePalette) {\n    if (colorPalette !== this._color) {\n      if (this._color) {\n        this._elementRef.nativeElement.classList.remove(`mat-badge-${this._color}`);\n      }\n      if (colorPalette) {\n        this._elementRef.nativeElement.classList.add(`mat-badge-${colorPalette}`);\n      }\n    }\n  }\n\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {A11yModule} from '@angular/cdk/a11y';\nimport {MatBadge} from './badge';\n\n\n@NgModule({\n  imports: [\n    A11yModule,\n    MatCommonModule\n  ],\n  exports: [MatBadge],\n  declarations: [MatBadge],\n})\nexport class MatBadgeModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ViewContainerRef, InjectionToken} from '@angular/core';\nimport {Direction} from '@angular/cdk/bidi';\n\n/** Injection token that can be used to access the data that was passed in to a bottom sheet. */\nexport const MAT_BOTTOM_SHEET_DATA = new InjectionToken<any>('MatBottomSheetData');\n\n/**\n * Configuration used when opening a bottom sheet.\n */\nexport class MatBottomSheetConfig<D = any> {\n  /** The view container to place the overlay for the bottom sheet into. */\n  viewContainerRef?: ViewContainerRef;\n\n  /** Extra CSS classes to be added to the bottom sheet container. */\n  panelClass?: string | string[];\n\n  /** Text layout direction for the bottom sheet. */\n  direction?: Direction;\n\n  /** Data being injected into the child component. */\n  data?: D | null = null;\n\n  /** Whether the bottom sheet has a backdrop. */\n  hasBackdrop?: boolean = true;\n\n  /** Custom class for the backdrop. */\n  backdropClass?: string;\n\n  /** Whether the user can use escape or clicking outside to close the bottom sheet. */\n  disableClose?: boolean = false;\n\n  /** Aria label to assign to the bottom sheet element. */\n  ariaLabel?: string | null = null;\n\n  /** Whether the bottom sheet should close when the user goes backwards/forwards in history. */\n  closeOnNavigation?: boolean = true;\n\n  /** Whether the bottom sheet should focus the first focusable element on open. */\n  autoFocus?: boolean = true;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\nimport {AnimationCurves, AnimationDurations} from '@angular/material/core';\n\n/** Animations used by the Material bottom sheet. */\nexport const matBottomSheetAnimations: {\n  readonly bottomSheetState: AnimationTriggerMetadata;\n} = {\n  /** Animation that shows and hides a bottom sheet. */\n  bottomSheetState: trigger('state', [\n    state('void, hidden', style({transform: 'translateY(100%)'})),\n    state('visible', style({transform: 'translateY(0%)'})),\n    transition('visible => void, visible => hidden',\n        animate(`${AnimationDurations.COMPLEX} ${AnimationCurves.ACCELERATION_CURVE}`)),\n    transition('void => visible',\n        animate(`${AnimationDurations.EXITING} ${AnimationCurves.DECELERATION_CURVE}`)),\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ComponentRef,\n  EmbeddedViewRef,\n  ViewChild,\n  OnDestroy,\n  ElementRef,\n  ChangeDetectionStrategy,\n  ViewEncapsulation,\n  ChangeDetectorRef,\n  EventEmitter,\n  Inject,\n  Optional,\n} from '@angular/core';\nimport {AnimationEvent} from '@angular/animations';\nimport {\n  BasePortalOutlet,\n  ComponentPortal,\n  TemplatePortal,\n  CdkPortalOutlet,\n} from '@angular/cdk/portal';\nimport {BreakpointObserver, Breakpoints} from '@angular/cdk/layout';\nimport {MatBottomSheetConfig} from './bottom-sheet-config';\nimport {matBottomSheetAnimations} from './bottom-sheet-animations';\nimport {Subscription} from 'rxjs';\nimport {DOCUMENT} from '@angular/common';\nimport {FocusTrap, FocusTrapFactory} from '@angular/cdk/a11y';\n\n// TODO(crisbeto): consolidate some logic between this, MatDialog and MatSnackBar\n\n/**\n * Internal component that wraps user-provided bottom sheet content.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-bottom-sheet-container',\n  templateUrl: 'bottom-sheet-container.html',\n  styleUrls: ['bottom-sheet-container.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  animations: [matBottomSheetAnimations.bottomSheetState],\n  host: {\n    'class': 'mat-bottom-sheet-container',\n    'tabindex': '-1',\n    'role': 'dialog',\n    'aria-modal': 'true',\n    '[attr.aria-label]': 'bottomSheetConfig?.ariaLabel',\n    '[@state]': '_animationState',\n    '(@state.start)': '_onAnimationStart($event)',\n    '(@state.done)': '_onAnimationDone($event)'\n  },\n})\nexport class MatBottomSheetContainer extends BasePortalOutlet implements OnDestroy {\n  private _breakpointSubscription: Subscription;\n\n  /** The portal outlet inside of this container into which the content will be loaded. */\n  @ViewChild(CdkPortalOutlet) _portalOutlet: CdkPortalOutlet;\n\n  /** The state of the bottom sheet animations. */\n  _animationState: 'void' | 'visible' | 'hidden' = 'void';\n\n  /** Emits whenever the state of the animation changes. */\n  _animationStateChanged = new EventEmitter<AnimationEvent>();\n\n  /** The class that traps and manages focus within the bottom sheet. */\n  private _focusTrap: FocusTrap;\n\n  /** Element that was focused before the bottom sheet was opened. */\n  private _elementFocusedBeforeOpened: HTMLElement | null = null;\n\n  /** Server-side rendering-compatible reference to the global document object. */\n  private _document: Document;\n\n  /** Whether the component has been destroyed. */\n  private _destroyed: boolean;\n\n  constructor(\n    private _elementRef: ElementRef<HTMLElement>,\n    private _changeDetectorRef: ChangeDetectorRef,\n    private _focusTrapFactory: FocusTrapFactory,\n    breakpointObserver: BreakpointObserver,\n    @Optional() @Inject(DOCUMENT) document: any,\n    /** The bottom sheet configuration. */\n    public bottomSheetConfig: MatBottomSheetConfig) {\n    super();\n\n    this._document = document;\n    this._breakpointSubscription = breakpointObserver\n      .observe([Breakpoints.Medium, Breakpoints.Large, Breakpoints.XLarge])\n      .subscribe(() => {\n        this._toggleClass('mat-bottom-sheet-container-medium',\n            breakpointObserver.isMatched(Breakpoints.Medium));\n        this._toggleClass('mat-bottom-sheet-container-large',\n            breakpointObserver.isMatched(Breakpoints.Large));\n        this._toggleClass('mat-bottom-sheet-container-xlarge',\n            breakpointObserver.isMatched(Breakpoints.XLarge));\n      });\n  }\n\n  /** Attach a component portal as content to this bottom sheet container. */\n  attachComponentPortal<T>(portal: ComponentPortal<T>): ComponentRef<T> {\n    this._validatePortalAttached();\n    this._setPanelClass();\n    this._savePreviouslyFocusedElement();\n    return this._portalOutlet.attachComponentPortal(portal);\n  }\n\n  /** Attach a template portal as content to this bottom sheet container. */\n  attachTemplatePortal<C>(portal: TemplatePortal<C>): EmbeddedViewRef<C> {\n    this._validatePortalAttached();\n    this._setPanelClass();\n    this._savePreviouslyFocusedElement();\n    return this._portalOutlet.attachTemplatePortal(portal);\n  }\n\n  /** Begin animation of bottom sheet entrance into view. */\n  enter(): void {\n    if (!this._destroyed) {\n      this._animationState = 'visible';\n      this._changeDetectorRef.detectChanges();\n    }\n  }\n\n  /** Begin animation of the bottom sheet exiting from view. */\n  exit(): void {\n    if (!this._destroyed) {\n      this._animationState = 'hidden';\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  ngOnDestroy() {\n    this._breakpointSubscription.unsubscribe();\n    this._destroyed = true;\n  }\n\n  _onAnimationDone(event: AnimationEvent) {\n    if (event.toState === 'hidden') {\n      this._restoreFocus();\n    } else if (event.toState === 'visible' && this.bottomSheetConfig.autoFocus) {\n      this._trapFocus();\n    }\n\n    this._animationStateChanged.emit(event);\n  }\n\n  _onAnimationStart(event: AnimationEvent) {\n    this._animationStateChanged.emit(event);\n  }\n\n  private _toggleClass(cssClass: string, add: boolean) {\n    const classList = this._elementRef.nativeElement.classList;\n    add ? classList.add(cssClass) : classList.remove(cssClass);\n  }\n\n  private _validatePortalAttached() {\n    if (this._portalOutlet.hasAttached()) {\n      throw Error('Attempting to attach bottom sheet content after content is already attached');\n    }\n  }\n\n  private _setPanelClass() {\n    const element: HTMLElement = this._elementRef.nativeElement;\n    const panelClass = this.bottomSheetConfig.panelClass;\n\n    if (Array.isArray(panelClass)) {\n      // Note that we can't use a spread here, because IE doesn't support multiple arguments.\n      panelClass.forEach(cssClass => element.classList.add(cssClass));\n    } else if (panelClass) {\n      element.classList.add(panelClass);\n    }\n  }\n\n\n  /** Moves the focus inside the focus trap. */\n  private _trapFocus() {\n    if (!this._focusTrap) {\n      this._focusTrap = this._focusTrapFactory.create(this._elementRef.nativeElement);\n    }\n\n    this._focusTrap.focusInitialElementWhenReady();\n  }\n\n  /** Restores focus to the element that was focused before the bottom sheet opened. */\n  private _restoreFocus() {\n    const toFocus = this._elementFocusedBeforeOpened;\n\n    // We need the extra check, because IE can set the `activeElement` to null in some cases.\n    if (toFocus && typeof toFocus.focus === 'function') {\n      toFocus.focus();\n    }\n\n    if (this._focusTrap) {\n      this._focusTrap.destroy();\n    }\n  }\n\n  /** Saves a reference to the element that was focused before the bottom sheet was opened. */\n  private _savePreviouslyFocusedElement() {\n    this._elementFocusedBeforeOpened = this._document.activeElement as HTMLElement;\n\n    // The `focus` method isn't available during server-side rendering.\n    if (this._elementRef.nativeElement.focus) {\n      Promise.resolve().then(() => this._elementRef.nativeElement.focus());\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatBottomSheetContainer} from './bottom-sheet-container';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    OverlayModule,\n    MatCommonModule,\n    PortalModule,\n  ],\n  exports: [MatBottomSheetContainer, MatCommonModule],\n  declarations: [MatBottomSheetContainer],\n  entryComponents: [MatBottomSheetContainer],\n})\nexport class MatBottomSheetModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Location} from '@angular/common';\nimport {ESCAPE} from '@angular/cdk/keycodes';\nimport {OverlayRef} from '@angular/cdk/overlay';\nimport {merge, Observable, Subject, SubscriptionLike, Subscription} from 'rxjs';\nimport {filter, take} from 'rxjs/operators';\nimport {MatBottomSheetContainer} from './bottom-sheet-container';\n\n\n/**\n * Reference to a bottom sheet dispatched from the bottom sheet service.\n */\nexport class MatBottomSheetRef<T = any, R = any> {\n  /** Instance of the component making up the content of the bottom sheet. */\n  instance: T;\n\n  /**\n   * Instance of the component into which the bottom sheet content is projected.\n   * @docs-private\n   */\n  containerInstance: MatBottomSheetContainer;\n\n  /** Subject for notifying the user that the bottom sheet has been dismissed. */\n  private readonly _afterDismissed = new Subject<R | undefined>();\n\n  /** Subject for notifying the user that the bottom sheet has opened and appeared. */\n  private readonly _afterOpened = new Subject<void>();\n\n  /** Result to be passed down to the `afterDismissed` stream. */\n  private _result: R | undefined;\n\n  /** Subscription to changes in the user's location. */\n  private _locationChanges: SubscriptionLike = Subscription.EMPTY;\n\n  constructor(\n    containerInstance: MatBottomSheetContainer,\n    private _overlayRef: OverlayRef,\n    location?: Location) {\n    this.containerInstance = containerInstance;\n\n    // Emit when opening animation completes\n    containerInstance._animationStateChanged.pipe(\n      filter(event => event.phaseName === 'done' && event.toState === 'visible'),\n      take(1)\n    )\n    .subscribe(() => {\n      this._afterOpened.next();\n      this._afterOpened.complete();\n    });\n\n    // Dispose overlay when closing animation is complete\n    containerInstance._animationStateChanged.pipe(\n      filter(event => event.phaseName === 'done' && event.toState === 'hidden'),\n      take(1)\n    )\n    .subscribe(() => {\n      this._locationChanges.unsubscribe();\n      this._overlayRef.dispose();\n      this._afterDismissed.next(this._result);\n      this._afterDismissed.complete();\n    });\n\n    if (!containerInstance.bottomSheetConfig.disableClose) {\n      merge(\n        _overlayRef.backdropClick(),\n        _overlayRef.keydownEvents().pipe(filter(event => event.keyCode === ESCAPE))\n      ).subscribe(() => this.dismiss());\n    }\n\n    if (location) {\n      this._locationChanges = location.subscribe(() => {\n        if (containerInstance.bottomSheetConfig.closeOnNavigation) {\n          this.dismiss();\n        }\n      });\n    }\n  }\n\n  /**\n   * Dismisses the bottom sheet.\n   * @param result Data to be passed back to the bottom sheet opener.\n   */\n  dismiss(result?: R): void {\n    if (!this._afterDismissed.closed) {\n      // Transition the backdrop in parallel to the bottom sheet.\n      this.containerInstance._animationStateChanged.pipe(\n        filter(event => event.phaseName === 'start'),\n        take(1)\n      ).subscribe(() => this._overlayRef.detachBackdrop());\n\n      this._result = result;\n      this.containerInstance.exit();\n    }\n  }\n\n  /** Gets an observable that is notified when the bottom sheet is finished closing. */\n  afterDismissed(): Observable<R | undefined> {\n    return this._afterDismissed.asObservable();\n  }\n\n  /** Gets an observable that is notified when the bottom sheet has opened and appeared. */\n  afterOpened(): Observable<void> {\n    return this._afterOpened.asObservable();\n  }\n\n  /**\n   * Gets an observable that emits when the overlay's backdrop has been clicked.\n   */\n  backdropClick(): Observable<MouseEvent> {\n    return this._overlayRef.backdropClick();\n  }\n\n  /**\n   * Gets an observable that emits when keydown events are targeted on the overlay.\n   */\n  keydownEvents(): Observable<KeyboardEvent> {\n    return this._overlayRef.keydownEvents();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directionality} from '@angular/cdk/bidi';\nimport {Overlay, OverlayConfig, OverlayRef} from '@angular/cdk/overlay';\nimport {ComponentPortal, ComponentType, PortalInjector, TemplatePortal} from '@angular/cdk/portal';\nimport {ComponentRef, Injectable, Injector, Optional, SkipSelf, TemplateRef} from '@angular/core';\nimport {Location} from '@angular/common';\nimport {of as observableOf} from 'rxjs';\nimport {MAT_BOTTOM_SHEET_DATA, MatBottomSheetConfig} from './bottom-sheet-config';\nimport {MatBottomSheetContainer} from './bottom-sheet-container';\nimport {MatBottomSheetModule} from './bottom-sheet-module';\nimport {MatBottomSheetRef} from './bottom-sheet-ref';\n\n\n/**\n * Service to trigger Material Design bottom sheets.\n */\n@Injectable({providedIn: MatBottomSheetModule})\nexport class MatBottomSheet {\n  private _bottomSheetRefAtThisLevel: MatBottomSheetRef<any> | null = null;\n\n  /** Reference to the currently opened bottom sheet. */\n  get _openedBottomSheetRef(): MatBottomSheetRef<any> | null {\n    const parent = this._parentBottomSheet;\n    return parent ? parent._openedBottomSheetRef : this._bottomSheetRefAtThisLevel;\n  }\n\n  set _openedBottomSheetRef(value: MatBottomSheetRef<any> | null) {\n    if (this._parentBottomSheet) {\n      this._parentBottomSheet._openedBottomSheetRef = value;\n    } else {\n      this._bottomSheetRefAtThisLevel = value;\n    }\n  }\n\n  constructor(\n      private _overlay: Overlay,\n      private _injector: Injector,\n      @Optional() @SkipSelf() private _parentBottomSheet: MatBottomSheet,\n      @Optional() private _location?: Location) {}\n\n  open<T, D = any, R = any>(component: ComponentType<T>,\n                   config?: MatBottomSheetConfig<D>): MatBottomSheetRef<T, R>;\n  open<T, D = any, R = any>(template: TemplateRef<T>,\n                   config?: MatBottomSheetConfig<D>): MatBottomSheetRef<T, R>;\n\n  open<T, D = any, R = any>(componentOrTemplateRef: ComponentType<T> | TemplateRef<T>,\n                   config?: MatBottomSheetConfig<D>): MatBottomSheetRef<T, R> {\n\n    const _config = _applyConfigDefaults(config);\n    const overlayRef = this._createOverlay(_config);\n    const container = this._attachContainer(overlayRef, _config);\n    const ref = new MatBottomSheetRef<T, R>(container, overlayRef, this._location);\n\n    if (componentOrTemplateRef instanceof TemplateRef) {\n      container.attachTemplatePortal(new TemplatePortal<T>(componentOrTemplateRef, null!, {\n        $implicit: _config.data,\n        bottomSheetRef: ref\n      } as any));\n    } else {\n      const portal = new ComponentPortal(componentOrTemplateRef, undefined,\n            this._createInjector(_config, ref));\n      const contentRef = container.attachComponentPortal(portal);\n      ref.instance = contentRef.instance;\n    }\n\n    // When the bottom sheet is dismissed, clear the reference to it.\n    ref.afterDismissed().subscribe(() => {\n      // Clear the bottom sheet ref if it hasn't already been replaced by a newer one.\n      if (this._openedBottomSheetRef == ref) {\n        this._openedBottomSheetRef = null;\n      }\n    });\n\n    if (this._openedBottomSheetRef) {\n      // If a bottom sheet is already in view, dismiss it and enter the\n      // new bottom sheet after exit animation is complete.\n      this._openedBottomSheetRef.afterDismissed().subscribe(() => ref.containerInstance.enter());\n      this._openedBottomSheetRef.dismiss();\n    } else {\n      // If no bottom sheet is in view, enter the new bottom sheet.\n      ref.containerInstance.enter();\n    }\n\n    this._openedBottomSheetRef = ref;\n\n    return ref;\n  }\n\n  /**\n   * Dismisses the currently-visible bottom sheet.\n   */\n  dismiss(): void {\n    if (this._openedBottomSheetRef) {\n      this._openedBottomSheetRef.dismiss();\n    }\n  }\n\n  /**\n   * Attaches the bottom sheet container component to the overlay.\n   */\n  private _attachContainer(overlayRef: OverlayRef,\n                           config: MatBottomSheetConfig): MatBottomSheetContainer {\n\n    const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n    const injector = new PortalInjector(userInjector || this._injector, new WeakMap([\n      [MatBottomSheetConfig, config]\n    ]));\n\n    const containerPortal =\n        new ComponentPortal(MatBottomSheetContainer, config.viewContainerRef, injector);\n    const containerRef: ComponentRef<MatBottomSheetContainer> = overlayRef.attach(containerPortal);\n    return containerRef.instance;\n  }\n\n  /**\n   * Creates a new overlay and places it in the correct location.\n   * @param config The user-specified bottom sheet config.\n   */\n  private _createOverlay(config: MatBottomSheetConfig): OverlayRef {\n    const overlayConfig = new OverlayConfig({\n      direction: config.direction,\n      hasBackdrop: config.hasBackdrop,\n      maxWidth: '100%',\n      scrollStrategy: this._overlay.scrollStrategies.block(),\n      positionStrategy: this._overlay.position()\n        .global()\n        .centerHorizontally()\n        .bottom('0')\n    });\n\n    if (config.backdropClass) {\n      overlayConfig.backdropClass = config.backdropClass;\n    }\n\n    return this._overlay.create(overlayConfig);\n  }\n\n  /**\n   * Creates an injector to be used inside of a bottom sheet component.\n   * @param config Config that was used to create the bottom sheet.\n   * @param bottomSheetRef Reference to the bottom sheet.\n   */\n  private _createInjector<T>(config: MatBottomSheetConfig,\n                             bottomSheetRef: MatBottomSheetRef<T>): PortalInjector {\n\n    const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n    const injectionTokens = new WeakMap<any, any>([\n      [MatBottomSheetRef, bottomSheetRef],\n      [MAT_BOTTOM_SHEET_DATA, config.data]\n    ]);\n\n    if (config.direction &&\n        (!userInjector || !userInjector.get<Directionality | null>(Directionality, null))) {\n      injectionTokens.set(Directionality, {\n        value: config.direction,\n        change: observableOf()\n      });\n    }\n\n    return new PortalInjector(userInjector || this._injector, injectionTokens);\n  }\n}\n\n/**\n * Applies default options to the bottom sheet config.\n * @param config The configuration to which the defaults will be applied.\n * @returns The new configuration object with defaults applied.\n */\nfunction _applyConfigDefaults(config?: MatBottomSheetConfig): MatBottomSheetConfig {\n  return {...new MatBottomSheetConfig(), ...config};\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {ENTER, SPACE} from '@angular/cdk/keycodes';\nimport {\n  AfterViewChecked,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  InjectionToken,\n  Input,\n  OnDestroy,\n  Optional,\n  Output,\n  QueryList,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {Subject} from 'rxjs';\nimport {MatOptgroup} from './optgroup';\n\n/**\n * Option IDs need to be unique across components, so this counter exists outside of\n * the component definition.\n */\nlet _uniqueIdCounter = 0;\n\n/** Event object emitted by MatOption when selected or deselected. */\nexport class MatOptionSelectionChange {\n  constructor(\n    /** Reference to the option that emitted the event. */\n    public source: MatOption,\n    /** Whether the change in the option's value was a result of a user action. */\n    public isUserInput = false) { }\n}\n\n/**\n * Describes a parent component that manages a list of options.\n * Contains properties that the options can inherit.\n * @docs-private\n */\nexport interface MatOptionParentComponent {\n  disableRipple?: boolean;\n  multiple?: boolean;\n}\n\n/**\n * Injection token used to provide the parent component to options.\n */\nexport const MAT_OPTION_PARENT_COMPONENT =\n    new InjectionToken<MatOptionParentComponent>('MAT_OPTION_PARENT_COMPONENT');\n\n/**\n * Single option inside of a `<mat-select>` element.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-option',\n  exportAs: 'matOption',\n  host: {\n    'role': 'option',\n    '[attr.tabindex]': '_getTabIndex()',\n    '[class.mat-selected]': 'selected',\n    '[class.mat-option-multiple]': 'multiple',\n    '[class.mat-active]': 'active',\n    '[id]': 'id',\n    '[attr.aria-selected]': 'selected.toString()',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[class.mat-option-disabled]': 'disabled',\n    '(click)': '_selectViaInteraction()',\n    '(keydown)': '_handleKeydown($event)',\n    'class': 'mat-option',\n  },\n  styleUrls: ['option.css'],\n  templateUrl: 'option.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatOption implements AfterViewChecked, OnDestroy {\n  private _selected = false;\n  private _active = false;\n  private _disabled = false;\n  private _mostRecentViewValue = '';\n\n  /** Whether the wrapping component is in multiple selection mode. */\n  get multiple() { return this._parent && this._parent.multiple; }\n\n  /** Whether or not the option is currently selected. */\n  get selected(): boolean { return this._selected; }\n\n  /** The form value of the option. */\n  @Input() value: any;\n\n  /** The unique ID of the option. */\n  @Input() id: string = `mat-option-${_uniqueIdCounter++}`;\n\n  /** Whether the option is disabled. */\n  @Input()\n  get disabled() { return (this.group && this.group.disabled) || this._disabled; }\n  set disabled(value: any) { this._disabled = coerceBooleanProperty(value); }\n\n  /** Whether ripples for the option are disabled. */\n  get disableRipple() { return this._parent && this._parent.disableRipple; }\n\n  /** Event emitted when the option is selected or deselected. */\n  // tslint:disable-next-line:no-output-on-prefix\n  @Output() readonly onSelectionChange = new EventEmitter<MatOptionSelectionChange>();\n\n  /** Emits when the state of the option changes and any parents have to be notified. */\n  readonly _stateChanges = new Subject<void>();\n\n  constructor(\n    private _element: ElementRef<HTMLElement>,\n    private _changeDetectorRef: ChangeDetectorRef,\n    @Optional() @Inject(MAT_OPTION_PARENT_COMPONENT) private _parent: MatOptionParentComponent,\n    @Optional() readonly group: MatOptgroup) {}\n\n  /**\n   * Whether or not the option is currently active and ready to be selected.\n   * An active option displays styles as if it is focused, but the\n   * focus is actually retained somewhere else. This comes in handy\n   * for components like autocomplete where focus must remain on the input.\n   */\n  get active(): boolean {\n    return this._active;\n  }\n\n  /**\n   * The displayed value of the option. It is necessary to show the selected option in the\n   * select's trigger.\n   */\n  get viewValue(): string {\n    // TODO(kara): Add input property alternative for node envs.\n    return (this._getHostElement().textContent || '').trim();\n  }\n\n  /** Selects the option. */\n  select(): void {\n    if (!this._selected) {\n      this._selected = true;\n      this._changeDetectorRef.markForCheck();\n      this._emitSelectionChangeEvent();\n    }\n  }\n\n  /** Deselects the option. */\n  deselect(): void {\n    if (this._selected) {\n      this._selected = false;\n      this._changeDetectorRef.markForCheck();\n      this._emitSelectionChangeEvent();\n    }\n  }\n\n  /** Sets focus onto this option. */\n  focus(): void {\n    const element = this._getHostElement();\n\n    if (typeof element.focus === 'function') {\n      element.focus();\n    }\n  }\n\n  /**\n   * This method sets display styles on the option to make it appear\n   * active. This is used by the ActiveDescendantKeyManager so key\n   * events will display the proper options as active on arrow key events.\n   */\n  setActiveStyles(): void {\n    if (!this._active) {\n      this._active = true;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  /**\n   * This method removes display styles on the option that made it appear\n   * active. This is used by the ActiveDescendantKeyManager so key\n   * events will display the proper options as active on arrow key events.\n   */\n  setInactiveStyles(): void {\n    if (this._active) {\n      this._active = false;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  /** Gets the label to be used when determining whether the option should be focused. */\n  getLabel(): string {\n    return this.viewValue;\n  }\n\n  /** Ensures the option is selected when activated from the keyboard. */\n  _handleKeydown(event: KeyboardEvent): void {\n    if (event.keyCode === ENTER || event.keyCode === SPACE) {\n      this._selectViaInteraction();\n\n      // Prevent the page from scrolling down and form submits.\n      event.preventDefault();\n    }\n  }\n\n  /**\n   * `Selects the option while indicating the selection came from the user. Used to\n   * determine if the select's view -> model callback should be invoked.`\n   */\n  _selectViaInteraction(): void {\n    if (!this.disabled) {\n      this._selected = this.multiple ? !this._selected : true;\n      this._changeDetectorRef.markForCheck();\n      this._emitSelectionChangeEvent(true);\n    }\n  }\n\n  /** Returns the correct tabindex for the option depending on disabled state. */\n  _getTabIndex(): string {\n    return this.disabled ? '-1' : '0';\n  }\n\n  /** Gets the host DOM element. */\n  _getHostElement(): HTMLElement {\n    return this._element.nativeElement;\n  }\n\n  ngAfterViewChecked() {\n    // Since parent components could be using the option's label to display the selected values\n    // (e.g. `mat-select`) and they don't have a way of knowing if the option's label has changed\n    // we have to check for changes in the DOM ourselves and dispatch an event. These checks are\n    // relatively cheap, however we still limit them only to selected options in order to avoid\n    // hitting the DOM too often.\n    if (this._selected) {\n      const viewValue = this.viewValue;\n\n      if (viewValue !== this._mostRecentViewValue) {\n        this._mostRecentViewValue = viewValue;\n        this._stateChanges.next();\n      }\n    }\n  }\n\n  ngOnDestroy() {\n    this._stateChanges.complete();\n  }\n\n  /** Emits the selection change event. */\n  private _emitSelectionChangeEvent(isUserInput = false): void {\n    this.onSelectionChange.emit(new MatOptionSelectionChange(this, isUserInput));\n  }\n}\n\n/**\n * Counts the amount of option group labels that precede the specified option.\n * @param optionIndex Index of the option at which to start counting.\n * @param options Flat list of all of the options.\n * @param optionGroups Flat list of all of the option groups.\n * @docs-private\n */\nexport function _countGroupLabelsBeforeOption(optionIndex: number, options: QueryList<MatOption>,\n  optionGroups: QueryList<MatOptgroup>): number {\n\n  if (optionGroups.length) {\n    let optionsArray = options.toArray();\n    let groups = optionGroups.toArray();\n    let groupCounter = 0;\n\n    for (let i = 0; i < optionIndex + 1; i++) {\n      if (optionsArray[i].group && optionsArray[i].group === groups[groupCounter]) {\n        groupCounter++;\n      }\n    }\n\n    return groupCounter;\n  }\n\n  return 0;\n}\n\n/**\n * Determines the position to which to scroll a panel in order for an option to be into view.\n * @param optionIndex Index of the option to be scrolled into the view.\n * @param optionHeight Height of the options.\n * @param currentScrollPosition Current scroll position of the panel.\n * @param panelHeight Height of the panel.\n * @docs-private\n */\nexport function _getOptionScrollPosition(optionIndex: number, optionHeight: number,\n    currentScrollPosition: number, panelHeight: number): number {\n  const optionOffset = optionIndex * optionHeight;\n\n  if (optionOffset < currentScrollPosition) {\n    return optionOffset;\n  }\n\n  if (optionOffset + optionHeight > currentScrollPosition + panelHeight) {\n    return Math.max(0, optionOffset - panelHeight + optionHeight);\n  }\n\n  return currentScrollPosition;\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {MatRippleModule} from '../ripple/index';\nimport {MatPseudoCheckboxModule} from '../selection/index';\nimport {MatOption} from './option';\nimport {MatOptgroup} from './optgroup';\n\n\n@NgModule({\n  imports: [MatRippleModule, CommonModule, MatPseudoCheckboxModule],\n  exports: [MatOption, MatOptgroup],\n  declarations: [MatOption, MatOptgroup]\n})\nexport class MatOptionModule {}\n\n\nexport * from './option';\nexport * from './optgroup';\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {InjectionToken} from '@angular/core';\n\n/** InjectionToken that can be used to specify the global label options. */\nexport const MAT_LABEL_GLOBAL_OPTIONS =\n  new InjectionToken<LabelOptions>('mat-label-global-options');\n\n/** Type for the available floatLabel values. */\nexport type FloatLabelType = 'always' | 'never' | 'auto';\n\n/** Configurable options for floating labels. */\nexport interface LabelOptions {\n  /**\n   * Whether the label should float `always`, `never`, or `auto` (only when necessary).\n   * Default behavior is assumed to be `auto`.\n   */\n  float?: FloatLabelType;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, Input} from '@angular/core';\n\n\nlet nextUniqueId = 0;\n\n\n/** Single error message to be shown underneath the form field. */\n@Directive({\n  selector: 'mat-error',\n  host: {\n    'class': 'mat-error',\n    'role': 'alert',\n    '[attr.id]': 'id',\n  }\n})\nexport class MatError {\n  @Input() id: string = `mat-error-${nextUniqueId++}`;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/** Animations used by the MatFormField. */\nexport const matFormFieldAnimations: {\n  readonly transitionMessages: AnimationTriggerMetadata\n} = {\n  /** Animation that transitions the form field's error and hint messages. */\n  transitionMessages: trigger('transitionMessages', [\n    // TODO(mmalerba): Use angular animations for label animation as well.\n    state('enter', style({ opacity: 1, transform: 'translateY(0%)' })),\n    transition('void => enter', [\n      style({ opacity: 0, transform: 'translateY(-100%)' }),\n      animate('300ms cubic-bezier(0.55, 0, 0.55, 0.2)'),\n    ]),\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Observable} from 'rxjs';\nimport {NgControl} from '@angular/forms';\n\n\n/** An interface which allows a control to work inside of a `MatFormField`. */\nexport abstract class MatFormFieldControl<T> {\n  /** The value of the control. */\n  value: T | null;\n\n  /**\n   * Stream that emits whenever the state of the control changes such that the parent `MatFormField`\n   * needs to run change detection.\n   */\n  readonly stateChanges: Observable<void>;\n\n  /** The element ID for this control. */\n  readonly id: string;\n\n  /** The placeholder for this control. */\n  readonly placeholder: string;\n\n  /** Gets the NgControl for this control. */\n  readonly ngControl: NgControl | null;\n\n  /** Whether the control is focused. */\n  readonly focused: boolean;\n\n  /** Whether the control is empty. */\n  readonly empty: boolean;\n\n  /** Whether the `MatFormField` label should try to float. */\n  readonly shouldLabelFloat: boolean;\n\n  /** Whether the control is required. */\n  readonly required: boolean;\n\n  /** Whether the control is disabled. */\n  readonly disabled: boolean;\n\n  /** Whether the control is in an error state. */\n  readonly errorState: boolean;\n\n  /**\n   * An optional name for the control type that can be used to distinguish `mat-form-field` elements\n   * based on their control type. The form field will add a class,\n   * `mat-form-field-type-{{controlType}}` to its root element.\n   */\n  readonly controlType?: string;\n\n  /**\n   * Whether the input is currently in an autofilled state. If property is not present on the\n   * control it is assumed to be false.\n   */\n  readonly autofilled?: boolean;\n\n  /** Sets the list of element IDs that currently describe this control. */\n  abstract setDescribedByIds(ids: string[]): void;\n\n  /** Handles a click on the control's container. */\n  abstract onContainerClick(event: MouseEvent): void;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, Input} from '@angular/core';\n\n\nlet nextUniqueId = 0;\n\n\n/** Hint text to be shown underneath the form field control. */\n@Directive({\n  selector: 'mat-hint',\n  host: {\n    'class': 'mat-hint',\n    '[class.mat-right]': 'align == \"end\"',\n    '[attr.id]': 'id',\n    // Remove align attribute to prevent it from interfering with layout.\n    '[attr.align]': 'null',\n  }\n})\nexport class MatHint {\n  /** Whether to align the hint label at the start or end of the line. */\n  @Input() align: 'start' | 'end' = 'start';\n\n  /** Unique ID for the hint. Used for the aria-describedby on the form field control. */\n  @Input() id: string = `mat-hint-${nextUniqueId++}`;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive} from '@angular/core';\n\n\n/** The floating label for a `mat-form-field`. */\n@Directive({\n  selector: 'mat-label'\n})\nexport class MatLabel {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive} from '@angular/core';\n\n\n/**\n * The placeholder text for an `MatFormField`.\n * @deprecated Use `<mat-label>` to specify the label and the `placeholder` attribute to specify the\n *     placeholder.\n * @breaking-change 8.0.0\n */\n@Directive({\n  selector: 'mat-placeholder'\n})\nexport class MatPlaceholder {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive} from '@angular/core';\n\n\n/** Prefix to be placed the the front of the form field. */\n@Directive({\n  selector: '[matPrefix]',\n})\nexport class MatPrefix {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive} from '@angular/core';\n\n\n/** Suffix to be placed at the end of the form field. */\n@Directive({\n  selector: '[matSuffix]',\n})\nexport class MatSuffix {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  AfterContentChecked,\n  AfterContentInit,\n  AfterViewInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  ContentChildren,\n  ElementRef,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  Optional,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {\n  CanColor, CanColorCtor,\n  FloatLabelType,\n  LabelOptions,\n  MAT_LABEL_GLOBAL_OPTIONS,\n  mixinColor,\n} from '@angular/material/core';\nimport {EMPTY, fromEvent, merge} from 'rxjs';\nimport {startWith, take} from 'rxjs/operators';\nimport {MatError} from './error';\nimport {matFormFieldAnimations} from './form-field-animations';\nimport {MatFormFieldControl} from './form-field-control';\nimport {\n  getMatFormFieldDuplicatedHintError,\n  getMatFormFieldMissingControlError,\n  getMatFormFieldPlaceholderConflictError,\n} from './form-field-errors';\nimport {MatHint} from './hint';\nimport {MatLabel} from './label';\nimport {MatPlaceholder} from './placeholder';\nimport {MatPrefix} from './prefix';\nimport {MatSuffix} from './suffix';\nimport {Platform} from '@angular/cdk/platform';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\n\n\nlet nextUniqueId = 0;\nconst floatingLabelScale = 0.75;\nconst outlineGapPadding = 5;\n\n\n/**\n * Boilerplate for applying mixins to MatFormField.\n * @docs-private\n */\nexport class MatFormFieldBase {\n  constructor(public _elementRef: ElementRef) { }\n}\n\n/**\n * Base class to which we're applying the form field mixins.\n * @docs-private\n */\nexport const _MatFormFieldMixinBase: CanColorCtor & typeof MatFormFieldBase =\n    mixinColor(MatFormFieldBase, 'primary');\n\n/** Possible appearance styles for the form field. */\nexport type MatFormFieldAppearance = 'legacy' | 'standard' | 'fill' | 'outline';\n\n/**\n * Represents the default options form the form field that can be configured\n * using the `MAT_FORM_FIELD_DEFAULT_OPTIONS` injection token.\n */\nexport interface MatFormFieldDefaultOptions {\n  appearance?: MatFormFieldAppearance;\n}\n\n/**\n * Injection token that can be used to configure the\n * default options for all form field within an app.\n */\nexport const MAT_FORM_FIELD_DEFAULT_OPTIONS =\n    new InjectionToken<MatFormFieldDefaultOptions>('MAT_FORM_FIELD_DEFAULT_OPTIONS');\n\n\n/** Container for form controls that applies Material Design styling and behavior. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-form-field',\n  exportAs: 'matFormField',\n  templateUrl: 'form-field.html',\n  // MatInput is a directive and can't have styles, so we need to include its styles here.\n  // The MatInput styles are fairly minimal so it shouldn't be a big deal for people who\n  // aren't using MatInput.\n  styleUrls: [\n    'form-field.css',\n    'form-field-fill.css',\n    'form-field-legacy.css',\n    'form-field-outline.css',\n    'form-field-standard.css',\n    '../input/input.css',\n  ],\n  animations: [matFormFieldAnimations.transitionMessages],\n  host: {\n    'class': 'mat-form-field',\n    '[class.mat-form-field-appearance-standard]': 'appearance == \"standard\"',\n    '[class.mat-form-field-appearance-fill]': 'appearance == \"fill\"',\n    '[class.mat-form-field-appearance-outline]': 'appearance == \"outline\"',\n    '[class.mat-form-field-appearance-legacy]': 'appearance == \"legacy\"',\n    '[class.mat-form-field-invalid]': '_control.errorState',\n    '[class.mat-form-field-can-float]': '_canLabelFloat',\n    '[class.mat-form-field-should-float]': '_shouldLabelFloat()',\n    '[class.mat-form-field-hide-placeholder]': '_hideControlPlaceholder()',\n    '[class.mat-form-field-disabled]': '_control.disabled',\n    '[class.mat-form-field-autofilled]': '_control.autofilled',\n    '[class.mat-focused]': '_control.focused',\n    '[class.mat-accent]': 'color == \"accent\"',\n    '[class.mat-warn]': 'color == \"warn\"',\n    '[class.ng-untouched]': '_shouldForward(\"untouched\")',\n    '[class.ng-touched]': '_shouldForward(\"touched\")',\n    '[class.ng-pristine]': '_shouldForward(\"pristine\")',\n    '[class.ng-dirty]': '_shouldForward(\"dirty\")',\n    '[class.ng-valid]': '_shouldForward(\"valid\")',\n    '[class.ng-invalid]': '_shouldForward(\"invalid\")',\n    '[class.ng-pending]': '_shouldForward(\"pending\")',\n    '[class._mat-animation-noopable]': '!_animationsEnabled',\n  },\n  inputs: ['color'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\n\nexport class MatFormField extends _MatFormFieldMixinBase\n    implements AfterContentInit, AfterContentChecked, AfterViewInit, CanColor {\n  private _labelOptions: LabelOptions;\n  private _outlineGapCalculationNeeded = false;\n\n  /** The form-field appearance style. */\n  @Input()\n  get appearance(): MatFormFieldAppearance { return this._appearance; }\n  set appearance(value: MatFormFieldAppearance) {\n    const oldValue = this._appearance;\n\n    this._appearance = value || (this._defaults && this._defaults.appearance) || 'legacy';\n\n    if (this._appearance === 'outline' && oldValue !== value) {\n      // @breaking-change 7.0.0 Remove this check and else block once _ngZone is required.\n      if (this._ngZone) {\n        this._ngZone!.onStable.pipe(take(1)).subscribe(() => {\n          this._ngZone!.runOutsideAngular(() => this.updateOutlineGap());\n        });\n      } else {\n        Promise.resolve().then(() => this.updateOutlineGap());\n      }\n    }\n  }\n  _appearance: MatFormFieldAppearance;\n\n  /** Whether the required marker should be hidden. */\n  @Input()\n  get hideRequiredMarker(): boolean { return this._hideRequiredMarker; }\n  set hideRequiredMarker(value: boolean) {\n    this._hideRequiredMarker = coerceBooleanProperty(value);\n  }\n  private _hideRequiredMarker: boolean;\n\n  /** Override for the logic that disables the label animation in certain cases. */\n  private _showAlwaysAnimate = false;\n\n  /** Whether the floating label should always float or not. */\n  get _shouldAlwaysFloat(): boolean {\n    return this.floatLabel === 'always' && !this._showAlwaysAnimate;\n  }\n\n  /** Whether the label can float or not. */\n  get _canLabelFloat(): boolean { return this.floatLabel !== 'never'; }\n\n  /** State of the mat-hint and mat-error animations. */\n  _subscriptAnimationState: string = '';\n\n  /** Text for the form field hint. */\n  @Input()\n  get hintLabel(): string { return this._hintLabel; }\n  set hintLabel(value: string) {\n    this._hintLabel = value;\n    this._processHints();\n  }\n  private _hintLabel = '';\n\n  // Unique id for the hint label.\n  _hintLabelId: string = `mat-hint-${nextUniqueId++}`;\n\n  // Unique id for the internal form field label.\n  _labelId = `mat-form-field-label-${nextUniqueId++}`;\n\n  /**\n   * Whether the label should always float, never float or float as the user types.\n   *\n   * Note: only the legacy appearance supports the `never` option. `never` was originally added as a\n   * way to make the floating label emulate the behavior of a standard input placeholder. However\n   * the form field now supports both floating labels and placeholders. Therefore in the non-legacy\n   * appearances the `never` option has been disabled in favor of just using the placeholder.\n   */\n  @Input()\n  get floatLabel(): FloatLabelType {\n    return this.appearance !== 'legacy' && this._floatLabel === 'never' ? 'auto' : this._floatLabel;\n  }\n  set floatLabel(value: FloatLabelType) {\n    if (value !== this._floatLabel) {\n      this._floatLabel = value || this._labelOptions.float || 'auto';\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n  private _floatLabel: FloatLabelType;\n\n  /** Whether the Angular animations are enabled. */\n  _animationsEnabled: boolean;\n\n  /**\n   * @deprecated\n   * @breaking-change 7.0.0\n   */\n  @ViewChild('underline') underlineRef: ElementRef;\n\n  @ViewChild('connectionContainer') _connectionContainerRef: ElementRef;\n  @ViewChild('inputContainer') _inputContainerRef: ElementRef;\n  @ViewChild('label') private _label: ElementRef;\n  @ContentChild(MatFormFieldControl) _control: MatFormFieldControl<any>;\n  @ContentChild(MatPlaceholder) _placeholderChild: MatPlaceholder;\n  @ContentChild(MatLabel) _labelChild: MatLabel;\n  @ContentChildren(MatError) _errorChildren: QueryList<MatError>;\n  @ContentChildren(MatHint) _hintChildren: QueryList<MatHint>;\n  @ContentChildren(MatPrefix) _prefixChildren: QueryList<MatPrefix>;\n  @ContentChildren(MatSuffix) _suffixChildren: QueryList<MatSuffix>;\n\n  constructor(\n      public _elementRef: ElementRef,\n      private _changeDetectorRef: ChangeDetectorRef,\n      @Optional() @Inject(MAT_LABEL_GLOBAL_OPTIONS) labelOptions: LabelOptions,\n      @Optional() private _dir: Directionality,\n      @Optional() @Inject(MAT_FORM_FIELD_DEFAULT_OPTIONS)\n          private _defaults: MatFormFieldDefaultOptions,\n      // @breaking-change 7.0.0 _platform, _ngZone and _animationMode to be made required.\n      private _platform?: Platform,\n      private _ngZone?: NgZone,\n      @Optional() @Inject(ANIMATION_MODULE_TYPE) _animationMode?: string) {\n    super(_elementRef);\n\n    this._labelOptions = labelOptions ? labelOptions : {};\n    this.floatLabel = this._labelOptions.float || 'auto';\n    this._animationsEnabled = _animationMode !== 'NoopAnimations';\n\n    // Set the default through here so we invoke the setter on the first run.\n    this.appearance = (_defaults && _defaults.appearance) ? _defaults.appearance : 'legacy';\n  }\n\n  /**\n   * Gets an ElementRef for the element that a overlay attached to the form-field should be\n   * positioned relative to.\n   */\n  getConnectedOverlayOrigin(): ElementRef {\n    return this._connectionContainerRef || this._elementRef;\n  }\n\n  ngAfterContentInit() {\n    this._validateControlChild();\n    if (this._control.controlType) {\n      this._elementRef.nativeElement.classList\n          .add(`mat-form-field-type-${this._control.controlType}`);\n    }\n\n    // Subscribe to changes in the child control state in order to update the form field UI.\n    this._control.stateChanges.pipe(startWith<void>(null!)).subscribe(() => {\n      this._validatePlaceholders();\n      this._syncDescribedByIds();\n      this._changeDetectorRef.markForCheck();\n    });\n\n    // Run change detection if the value, prefix, or suffix changes.\n    const valueChanges = this._control.ngControl && this._control.ngControl.valueChanges || EMPTY;\n    merge(valueChanges, this._prefixChildren.changes, this._suffixChildren.changes)\n        .subscribe(() => this._changeDetectorRef.markForCheck());\n\n    // Re-validate when the number of hints changes.\n    this._hintChildren.changes.pipe(startWith(null)).subscribe(() => {\n      this._processHints();\n      this._changeDetectorRef.markForCheck();\n    });\n\n    // Update the aria-described by when the number of errors changes.\n    this._errorChildren.changes.pipe(startWith(null)).subscribe(() => {\n      this._syncDescribedByIds();\n      this._changeDetectorRef.markForCheck();\n    });\n  }\n\n  ngAfterContentChecked() {\n    this._validateControlChild();\n    if (this._outlineGapCalculationNeeded) {\n      this.updateOutlineGap();\n    }\n  }\n\n  ngAfterViewInit() {\n    // Avoid animations on load.\n    this._subscriptAnimationState = 'enter';\n    this._changeDetectorRef.detectChanges();\n  }\n\n  /** Determines whether a class from the NgControl should be forwarded to the host element. */\n  _shouldForward(prop: string): boolean {\n    const ngControl = this._control ? this._control.ngControl : null;\n    return ngControl && ngControl[prop];\n  }\n\n  _hasPlaceholder() {\n    return !!(this._control && this._control.placeholder || this._placeholderChild);\n  }\n\n  _hasLabel() {\n    return !!this._labelChild;\n  }\n\n  _shouldLabelFloat() {\n    return this._canLabelFloat && (this._control.shouldLabelFloat || this._shouldAlwaysFloat);\n  }\n\n  _hideControlPlaceholder() {\n    // In the legacy appearance the placeholder is promoted to a label if no label is given.\n    return this.appearance === 'legacy' && !this._hasLabel() ||\n        this._hasLabel() && !this._shouldLabelFloat();\n  }\n\n  _hasFloatingLabel() {\n    // In the legacy appearance the placeholder is promoted to a label if no label is given.\n    return this._hasLabel() || this.appearance === 'legacy' && this._hasPlaceholder();\n  }\n\n  /** Determines whether to display hints or errors. */\n  _getDisplayedMessages(): 'error' | 'hint' {\n    return (this._errorChildren && this._errorChildren.length > 0 &&\n        this._control.errorState) ? 'error' : 'hint';\n  }\n\n  /** Animates the placeholder up and locks it in position. */\n  _animateAndLockLabel(): void {\n    if (this._hasFloatingLabel() && this._canLabelFloat) {\n      // If animations are disabled, we shouldn't go in here,\n      // because the `transitionend` will never fire.\n      if (this._animationsEnabled) {\n        this._showAlwaysAnimate = true;\n\n        fromEvent(this._label.nativeElement, 'transitionend').pipe(take(1)).subscribe(() => {\n          this._showAlwaysAnimate = false;\n        });\n      }\n\n      this.floatLabel = 'always';\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  /**\n   * Ensure that there is only one placeholder (either `placeholder` attribute on the child control\n   * or child element with the `mat-placeholder` directive).\n   */\n  private _validatePlaceholders() {\n    if (this._control.placeholder && this._placeholderChild) {\n      throw getMatFormFieldPlaceholderConflictError();\n    }\n  }\n\n  /** Does any extra processing that is required when handling the hints. */\n  private _processHints() {\n    this._validateHints();\n    this._syncDescribedByIds();\n  }\n\n  /**\n   * Ensure that there is a maximum of one of each `<mat-hint>` alignment specified, with the\n   * attribute being considered as `align=\"start\"`.\n   */\n  private _validateHints() {\n    if (this._hintChildren) {\n      let startHint: MatHint;\n      let endHint: MatHint;\n      this._hintChildren.forEach((hint: MatHint) => {\n        if (hint.align === 'start') {\n          if (startHint || this.hintLabel) {\n            throw getMatFormFieldDuplicatedHintError('start');\n          }\n          startHint = hint;\n        } else if (hint.align === 'end') {\n          if (endHint) {\n            throw getMatFormFieldDuplicatedHintError('end');\n          }\n          endHint = hint;\n        }\n      });\n    }\n  }\n\n  /**\n   * Sets the list of element IDs that describe the child control. This allows the control to update\n   * its `aria-describedby` attribute accordingly.\n   */\n  private _syncDescribedByIds() {\n    if (this._control) {\n      let ids: string[] = [];\n\n      if (this._getDisplayedMessages() === 'hint') {\n        const startHint = this._hintChildren ?\n            this._hintChildren.find(hint => hint.align === 'start') : null;\n        const endHint = this._hintChildren ?\n            this._hintChildren.find(hint => hint.align === 'end') : null;\n\n        if (startHint) {\n          ids.push(startHint.id);\n        } else if (this._hintLabel) {\n          ids.push(this._hintLabelId);\n        }\n\n        if (endHint) {\n          ids.push(endHint.id);\n        }\n      } else if (this._errorChildren) {\n        ids = this._errorChildren.map(error => error.id);\n      }\n\n      this._control.setDescribedByIds(ids);\n    }\n  }\n\n  /** Throws an error if the form field's control is missing. */\n  protected _validateControlChild() {\n    if (!this._control) {\n      throw getMatFormFieldMissingControlError();\n    }\n  }\n\n  /**\n   * Updates the width and position of the gap in the outline. Only relevant for the outline\n   * appearance.\n   */\n  updateOutlineGap() {\n    const labelEl = this._label ? this._label.nativeElement : null;\n\n    if (this.appearance !== 'outline' || !labelEl || !labelEl.children.length ||\n        !labelEl.textContent.trim()) {\n      return;\n    }\n\n    if (this._platform && !this._platform.isBrowser) {\n      // getBoundingClientRect isn't available on the server.\n      return;\n    }\n    // If the element is not present in the DOM, the outline gap will need to be calculated\n    // the next time it is checked and in the DOM.\n    if (!document.documentElement.contains(this._elementRef.nativeElement)) {\n      this._outlineGapCalculationNeeded = true;\n      return;\n    }\n\n    let startWidth = 0;\n    let gapWidth = 0;\n    const startEls = this._connectionContainerRef.nativeElement.querySelectorAll(\n      '.mat-form-field-outline-start');\n    const gapEls = this._connectionContainerRef.nativeElement.querySelectorAll(\n        '.mat-form-field-outline-gap');\n    if (this._label && this._label.nativeElement.children.length) {\n      const containerStart = this._getStartEnd(\n          this._connectionContainerRef.nativeElement.getBoundingClientRect());\n      const labelStart = this._getStartEnd(labelEl.children[0].getBoundingClientRect());\n      let labelWidth = 0;\n\n      for (const child of labelEl.children) {\n        labelWidth += child.offsetWidth;\n      }\n      startWidth = labelStart - containerStart - outlineGapPadding;\n      gapWidth = labelWidth > 0 ? labelWidth * floatingLabelScale + outlineGapPadding * 2 : 0;\n    }\n\n    for (let i = 0; i < startEls.length; i++) {\n      startEls.item(i).style.width = `${startWidth}px`;\n    }\n    for (let i = 0; i < gapEls.length; i++) {\n      gapEls.item(i).style.width = `${gapWidth}px`;\n    }\n\n    this._outlineGapCalculationNeeded = false;\n  }\n\n  /** Gets the start end of the rect considering the current directionality. */\n  private _getStartEnd(rect: ClientRect): number {\n    return this._dir && this._dir.value === 'rtl' ? rect.right : rect.left;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {ObserversModule} from '@angular/cdk/observers';\nimport {MatError} from './error';\nimport {MatFormField} from './form-field';\nimport {MatHint} from './hint';\nimport {MatLabel} from './label';\nimport {MatPlaceholder} from './placeholder';\nimport {MatPrefix} from './prefix';\nimport {MatSuffix} from './suffix';\n\n\n@NgModule({\n  declarations: [\n    MatError,\n    MatFormField,\n    MatHint,\n    MatLabel,\n    MatPlaceholder,\n    MatPrefix,\n    MatSuffix,\n  ],\n  imports: [\n    CommonModule,\n    ObserversModule,\n  ],\n  exports: [\n    MatError,\n    MatFormField,\n    MatHint,\n    MatLabel,\n    MatPlaceholder,\n    MatPrefix,\n    MatSuffix,\n  ],\n})\nexport class MatFormFieldModule {}\n","/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)\r\n            t[p[i]] = s[p[i]];\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule, InjectionToken, Optional, Inject, isDevMode} from '@angular/core';\nimport {BidiModule} from '@angular/cdk/bidi';\n\n\n/** Injection token that configures whether the Material sanity checks are enabled. */\nexport const MATERIAL_SANITY_CHECKS = new InjectionToken<boolean>('mat-sanity-checks', {\n  providedIn: 'root',\n  factory: MATERIAL_SANITY_CHECKS_FACTORY,\n});\n\n/** @docs-private */\nexport function MATERIAL_SANITY_CHECKS_FACTORY(): boolean {\n  return true;\n}\n\n/**\n * Module that captures anything that should be loaded and/or run for *all* Angular Material\n * components. This includes Bidi, etc.\n *\n * This module should be imported to each top-level component module (e.g., MatTabsModule).\n */\n@NgModule({\n  imports: [BidiModule],\n  exports: [BidiModule],\n})\nexport class MatCommonModule {\n  /** Whether we've done the global sanity checks (e.g. a theme is loaded, there is a doctype). */\n  private _hasDoneGlobalChecks = false;\n\n  /** Whether we've already checked for HammerJs availability. */\n  private _hasCheckedHammer = false;\n\n  /** Reference to the global `document` object. */\n  private _document = typeof document === 'object' && document ? document : null;\n\n  /** Reference to the global 'window' object. */\n  private _window = typeof window === 'object' && window ? window : null;\n\n  constructor(@Optional() @Inject(MATERIAL_SANITY_CHECKS) private _sanityChecksEnabled: boolean) {\n    if (this._areChecksEnabled() && !this._hasDoneGlobalChecks) {\n      this._checkDoctypeIsDefined();\n      this._checkThemeIsPresent();\n      this._hasDoneGlobalChecks = true;\n    }\n  }\n\n  /** Whether any sanity checks are enabled */\n  private _areChecksEnabled(): boolean {\n    return this._sanityChecksEnabled && isDevMode() && !this._isTestEnv();\n  }\n\n  /** Whether the code is running in tests. */\n  private _isTestEnv() {\n    return this._window && (this._window['__karma__'] || this._window['jasmine']);\n  }\n\n  private _checkDoctypeIsDefined(): void {\n    if (this._document && !this._document.doctype) {\n      console.warn(\n        'Current document does not have a doctype. This may cause ' +\n        'some Angular Material components not to behave as expected.'\n      );\n    }\n  }\n\n  private _checkThemeIsPresent(): void {\n    // We need to assert that the `body` is defined, because these checks run very early\n    // and the `body` won't be defined if the consumer put their scripts in the `head`.\n    if (this._document && this._document.body && typeof getComputedStyle === 'function') {\n      const testElement = this._document.createElement('div');\n\n      testElement.classList.add('mat-theme-loaded-marker');\n      this._document.body.appendChild(testElement);\n\n      const computedStyle = getComputedStyle(testElement);\n\n      // In some situations the computed style of the test element can be null. For example in\n      // Firefox, the computed style is null if an application is running inside of a hidden iframe.\n      // See: https://bugzilla.mozilla.org/show_bug.cgi?id=548397\n      if (computedStyle && computedStyle.display !== 'none') {\n        console.warn(\n          'Could not find Angular Material core theme. Most Material ' +\n          'components may not work as expected. For more info refer ' +\n          'to the theming guide: https://material.angular.io/guide/theming'\n        );\n      }\n\n      this._document.body.removeChild(testElement);\n    }\n  }\n\n  /** Checks whether HammerJS is available. */\n  _checkHammerIsAvailable(): void {\n    if (this._hasCheckedHammer || !this._window) {\n      return;\n    }\n\n    if (this._areChecksEnabled() && !this._window['Hammer']) {\n      console.warn(\n        'Could not find HammerJS. Certain Angular Material components may not work correctly.');\n    }\n    this._hasCheckedHammer = true;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {Constructor} from './constructor';\n\n/** @docs-private */\nexport interface CanDisable {\n  /** Whether the component is disabled. */\n  disabled: boolean;\n}\n\n/** @docs-private */\nexport type CanDisableCtor = Constructor<CanDisable>;\n\n/** Mixin to augment a directive with a `disabled` property. */\nexport function mixinDisabled<T extends Constructor<{}>>(base: T): CanDisableCtor & T {\n  return class extends base {\n    private _disabled: boolean = false;\n\n    get disabled() { return this._disabled; }\n    set disabled(value: any) { this._disabled = coerceBooleanProperty(value); }\n\n    constructor(...args: any[]) { super(...args); }\n  };\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Constructor} from './constructor';\nimport {ElementRef} from '@angular/core';\n\n/** @docs-private */\nexport interface CanColor {\n  /** Theme color palette for the component. */\n  color: ThemePalette;\n}\n\n/** @docs-private */\nexport type CanColorCtor = Constructor<CanColor>;\n\n/** @docs-private */\nexport interface HasElementRef {\n  _elementRef: ElementRef;\n}\n\n/** Possible color palette values. */\nexport type ThemePalette = 'primary' | 'accent' | 'warn' | undefined;\n\n/** Mixin to augment a directive with a `color` property. */\nexport function mixinColor<T extends Constructor<HasElementRef>>(\n    base: T, defaultColor?: ThemePalette): CanColorCtor & T {\n  return class extends base {\n    private _color: ThemePalette;\n\n    get color(): ThemePalette { return this._color; }\n    set color(value: ThemePalette) {\n      const colorPalette = value || defaultColor;\n\n      if (colorPalette !== this._color) {\n        if (this._color) {\n          this._elementRef.nativeElement.classList.remove(`mat-${this._color}`);\n        }\n        if (colorPalette) {\n          this._elementRef.nativeElement.classList.add(`mat-${colorPalette}`);\n        }\n\n        this._color = colorPalette;\n      }\n    }\n\n    constructor(...args: any[]) {\n      super(...args);\n\n      // Set the default color that can be specified from the mixin.\n      this.color = defaultColor;\n    }\n  };\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {Constructor} from './constructor';\n\n/** @docs-private */\nexport interface CanDisableRipple {\n  /** Whether ripples are disabled. */\n  disableRipple: boolean;\n}\n\n/** @docs-private */\nexport type CanDisableRippleCtor = Constructor<CanDisableRipple>;\n\n/** Mixin to augment a directive with a `disableRipple` property. */\nexport function mixinDisableRipple<T extends Constructor<{}>>(base: T): CanDisableRippleCtor & T {\n  return class extends base {\n    private _disableRipple: boolean = false;\n\n    /** Whether the ripple effect is disabled or not. */\n    get disableRipple() { return this._disableRipple; }\n    set disableRipple(value: any) { this._disableRipple = coerceBooleanProperty(value); }\n\n    constructor(...args: any[]) { super(...args); }\n  };\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Constructor} from './constructor';\nimport {CanDisable} from './disabled';\n\n\n/** @docs-private */\nexport interface HasTabIndex {\n  /** Tabindex of the component. */\n  tabIndex: number;\n}\n\n/** @docs-private */\nexport type HasTabIndexCtor = Constructor<HasTabIndex>;\n\n/** Mixin to augment a directive with a `tabIndex` property. */\nexport function mixinTabIndex<T extends Constructor<CanDisable>>(base: T, defaultTabIndex = 0)\n    : HasTabIndexCtor & T {\n  return class extends base {\n    private _tabIndex: number = defaultTabIndex;\n\n    get tabIndex(): number { return this.disabled ? -1 : this._tabIndex; }\n    set tabIndex(value: number) {\n      // If the specified tabIndex value is null or undefined, fall back to the default value.\n      this._tabIndex = value != null ? value : defaultTabIndex;\n    }\n\n    constructor(...args: any[]) {\n      super(...args);\n    }\n  };\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FormControl, FormGroupDirective, NgControl, NgForm} from '@angular/forms';\nimport {Subject} from 'rxjs';\nimport {ErrorStateMatcher} from '../error/error-options';\nimport {Constructor} from './constructor';\n\n\n/** @docs-private */\nexport interface CanUpdateErrorState {\n  updateErrorState();\n  readonly stateChanges: Subject<void>;\n  errorState: boolean;\n  errorStateMatcher: ErrorStateMatcher;\n}\n\n/** @docs-private */\nexport type CanUpdateErrorStateCtor = Constructor<CanUpdateErrorState>;\n\n/** @docs-private */\nexport interface HasErrorState {\n  _parentFormGroup: FormGroupDirective;\n  _parentForm: NgForm;\n  _defaultErrorStateMatcher: ErrorStateMatcher;\n  ngControl: NgControl;\n}\n\n/**\n * Mixin to augment a directive with updateErrorState method.\n * For component with `errorState` and need to update `errorState`.\n */\nexport function mixinErrorState<T extends Constructor<HasErrorState>>(base: T)\n: CanUpdateErrorStateCtor & T {\n  return class extends base {\n    /** Whether the component is in an error state. */\n    errorState: boolean = false;\n\n    /**\n     * Stream that emits whenever the state of the input changes such that the wrapping\n     * `MatFormField` needs to run change detection.\n     */\n    readonly stateChanges = new Subject<void>();\n\n    errorStateMatcher: ErrorStateMatcher;\n\n    updateErrorState() {\n      const oldState = this.errorState;\n      const parent = this._parentFormGroup || this._parentForm;\n      const matcher = this.errorStateMatcher || this._defaultErrorStateMatcher;\n      const control = this.ngControl ? this.ngControl.control as FormControl : null;\n      const newState = matcher.isErrorState(control, parent);\n\n      if (newState !== oldState) {\n        this.errorState = newState;\n        this.stateChanges.next();\n      }\n    }\n\n    constructor(...args: any[]) {\n      super(...args);\n    }\n  };\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Observable, Subscriber} from 'rxjs';\nimport {Constructor} from './constructor';\n\n\n/**\n * Mixin that adds an initialized property to a directive which, when subscribed to, will emit a\n * value once markInitialized has been called, which should be done during the ngOnInit function.\n * If the subscription is made after it has already been marked as initialized, then it will trigger\n * an emit immediately.\n * @docs-private\n */\nexport interface HasInitialized {\n  /** Stream that emits once during the directive/component's ngOnInit. */\n  initialized: Observable<void>;\n\n  /**\n   * Sets the state as initialized and must be called during ngOnInit to notify subscribers that\n   * the directive has been initialized.\n   * @docs-private\n   */\n  _markInitialized: () => void;\n}\n\n/** @docs-private */\nexport type HasInitializedCtor = Constructor<HasInitialized>;\n\n/** Mixin to augment a directive with an initialized property that will emits when ngOnInit ends. */\nexport function mixinInitialized<T extends Constructor<{}>>(base: T):\n    HasInitializedCtor & T {\n  return class extends base {\n    /** Whether this directive has been marked as initialized. */\n    _isInitialized = false;\n\n    /**\n     * List of subscribers that subscribed before the directive was initialized. Should be notified\n     * during _markInitialized. Set to null after pending subscribers are notified, and should\n     * not expect to be populated after.\n     */\n    _pendingSubscribers: Subscriber<void>[] | null = [];\n\n    /**\n     * Observable stream that emits when the directive initializes. If already initialized, the\n     * subscriber is stored to be notified once _markInitialized is called.\n     */\n    initialized = new Observable<void>(subscriber => {\n      // If initialized, immediately notify the subscriber. Otherwise store the subscriber to notify\n      // when _markInitialized is called.\n      if (this._isInitialized) {\n        this._notifySubscriber(subscriber);\n      } else {\n        this._pendingSubscribers!.push(subscriber);\n      }\n    });\n\n    constructor(...args: any[]) { super(...args); }\n\n    /**\n     * Marks the state as initialized and notifies pending subscribers. Should be called at the end\n     * of ngOnInit.\n     * @docs-private\n     */\n    _markInitialized(): void {\n      if (this._isInitialized) {\n        throw Error('This directive has already been marked as initialized and ' +\n            'should not be called twice.');\n      }\n\n      this._isInitialized = true;\n\n      this._pendingSubscribers!.forEach(this._notifySubscriber);\n      this._pendingSubscribers = null;\n    }\n\n    /** Emits and completes the subscriber stream (should only emit once). */\n    _notifySubscriber(subscriber: Subscriber<void>): void {\n      subscriber.next();\n      subscriber.complete();\n    }\n  };\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {inject, InjectionToken, LOCALE_ID} from '@angular/core';\nimport {Observable, Subject} from 'rxjs';\n\n/** InjectionToken for datepicker that can be used to override default locale code. */\nexport const MAT_DATE_LOCALE = new InjectionToken<string>('MAT_DATE_LOCALE', {\n  providedIn: 'root',\n  factory: MAT_DATE_LOCALE_FACTORY,\n});\n\n/** @docs-private */\nexport function MAT_DATE_LOCALE_FACTORY(): string {\n  return inject(LOCALE_ID);\n}\n\n/**\n * No longer needed since MAT_DATE_LOCALE has been changed to a scoped injectable.\n * If you are importing and providing this in your code you can simply remove it.\n * @deprecated\n * @breaking-change 7.0.0\n */\nexport const MAT_DATE_LOCALE_PROVIDER = {provide: MAT_DATE_LOCALE, useExisting: LOCALE_ID};\n\n/** Adapts type `D` to be usable as a date by cdk-based components that work with dates. */\nexport abstract class DateAdapter<D> {\n  /** The locale to use for all dates. */\n  protected locale: any;\n\n  /** A stream that emits when the locale changes. */\n  get localeChanges(): Observable<void> { return this._localeChanges; }\n  protected _localeChanges = new Subject<void>();\n\n  /**\n   * Gets the year component of the given date.\n   * @param date The date to extract the year from.\n   * @returns The year component.\n   */\n  abstract getYear(date: D): number;\n\n  /**\n   * Gets the month component of the given date.\n   * @param date The date to extract the month from.\n   * @returns The month component (0-indexed, 0 = January).\n   */\n  abstract getMonth(date: D): number;\n\n  /**\n   * Gets the date of the month component of the given date.\n   * @param date The date to extract the date of the month from.\n   * @returns The month component (1-indexed, 1 = first of month).\n   */\n  abstract getDate(date: D): number;\n\n  /**\n   * Gets the day of the week component of the given date.\n   * @param date The date to extract the day of the week from.\n   * @returns The month component (0-indexed, 0 = Sunday).\n   */\n  abstract getDayOfWeek(date: D): number;\n\n  /**\n   * Gets a list of names for the months.\n   * @param style The naming style (e.g. long = 'January', short = 'Jan', narrow = 'J').\n   * @returns An ordered list of all month names, starting with January.\n   */\n  abstract getMonthNames(style: 'long' | 'short' | 'narrow'): string[];\n\n  /**\n   * Gets a list of names for the dates of the month.\n   * @returns An ordered list of all date of the month names, starting with '1'.\n   */\n  abstract getDateNames(): string[];\n\n  /**\n   * Gets a list of names for the days of the week.\n   * @param style The naming style (e.g. long = 'Sunday', short = 'Sun', narrow = 'S').\n   * @returns An ordered list of all weekday names, starting with Sunday.\n   */\n  abstract getDayOfWeekNames(style: 'long' | 'short' | 'narrow'): string[];\n\n  /**\n   * Gets the name for the year of the given date.\n   * @param date The date to get the year name for.\n   * @returns The name of the given year (e.g. '2017').\n   */\n  abstract getYearName(date: D): string;\n\n  /**\n   * Gets the first day of the week.\n   * @returns The first day of the week (0-indexed, 0 = Sunday).\n   */\n  abstract getFirstDayOfWeek(): number;\n\n  /**\n   * Gets the number of days in the month of the given date.\n   * @param date The date whose month should be checked.\n   * @returns The number of days in the month of the given date.\n   */\n  abstract getNumDaysInMonth(date: D): number;\n\n  /**\n   * Clones the given date.\n   * @param date The date to clone\n   * @returns A new date equal to the given date.\n   */\n  abstract clone(date: D): D;\n\n  /**\n   * Creates a date with the given year, month, and date. Does not allow over/under-flow of the\n   * month and date.\n   * @param year The full year of the date. (e.g. 89 means the year 89, not the year 1989).\n   * @param month The month of the date (0-indexed, 0 = January). Must be an integer 0 - 11.\n   * @param date The date of month of the date. Must be an integer 1 - length of the given month.\n   * @returns The new date, or null if invalid.\n   */\n  abstract createDate(year: number, month: number, date: number): D;\n\n  /**\n   * Gets today's date.\n   * @returns Today's date.\n   */\n  abstract today(): D;\n\n  /**\n   * Parses a date from a user-provided value.\n   * @param value The value to parse.\n   * @param parseFormat The expected format of the value being parsed\n   *     (type is implementation-dependent).\n   * @returns The parsed date.\n   */\n  abstract parse(value: any, parseFormat: any): D | null;\n\n  /**\n   * Formats a date as a string according to the given format.\n   * @param date The value to format.\n   * @param displayFormat The format to use to display the date as a string.\n   * @returns The formatted date string.\n   */\n  abstract format(date: D, displayFormat: any): string;\n\n  /**\n   * Adds the given number of years to the date. Years are counted as if flipping 12 pages on the\n   * calendar for each year and then finding the closest date in the new month. For example when\n   * adding 1 year to Feb 29, 2016, the resulting date will be Feb 28, 2017.\n   * @param date The date to add years to.\n   * @param years The number of years to add (may be negative).\n   * @returns A new date equal to the given one with the specified number of years added.\n   */\n  abstract addCalendarYears(date: D, years: number): D;\n\n  /**\n   * Adds the given number of months to the date. Months are counted as if flipping a page on the\n   * calendar for each month and then finding the closest date in the new month. For example when\n   * adding 1 month to Jan 31, 2017, the resulting date will be Feb 28, 2017.\n   * @param date The date to add months to.\n   * @param months The number of months to add (may be negative).\n   * @returns A new date equal to the given one with the specified number of months added.\n   */\n  abstract addCalendarMonths(date: D, months: number): D;\n\n  /**\n   * Adds the given number of days to the date. Days are counted as if moving one cell on the\n   * calendar for each day.\n   * @param date The date to add days to.\n   * @param days The number of days to add (may be negative).\n   * @returns A new date equal to the given one with the specified number of days added.\n   */\n  abstract addCalendarDays(date: D, days: number): D;\n\n  /**\n   * Gets the RFC 3339 compatible string (https://tools.ietf.org/html/rfc3339) for the given date.\n   * This method is used to generate date strings that are compatible with native HTML attributes\n   * such as the `min` or `max` attribute of an `<input>`.\n   * @param date The date to get the ISO date string for.\n   * @returns The ISO date string date string.\n   */\n  abstract toIso8601(date: D): string;\n\n  /**\n   * Checks whether the given object is considered a date instance by this DateAdapter.\n   * @param obj The object to check\n   * @returns Whether the object is a date instance.\n   */\n  abstract isDateInstance(obj: any): boolean;\n\n  /**\n   * Checks whether the given date is valid.\n   * @param date The date to check.\n   * @returns Whether the date is valid.\n   */\n  abstract isValid(date: D): boolean;\n\n  /**\n   * Gets date instance that is not valid.\n   * @returns An invalid date.\n   */\n  abstract invalid(): D;\n\n  /**\n   * Attempts to deserialize a value to a valid date object. This is different from parsing in that\n   * deserialize should only accept non-ambiguous, locale-independent formats (e.g. a ISO 8601\n   * string). The default implementation does not allow any deserialization, it simply checks that\n   * the given value is already a valid date object or null. The `<mat-datepicker>` will call this\n   * method on all of it's `@Input()` properties that accept dates. It is therefore possible to\n   * support passing values from your backend directly to these properties by overriding this method\n   * to also deserialize the format used by your backend.\n   * @param value The value to be deserialized into a date object.\n   * @returns The deserialized date object, either a valid date, null if the value can be\n   *     deserialized into a null date (e.g. the empty string), or an invalid date.\n   */\n  deserialize(value: any): D | null {\n    if (value == null || this.isDateInstance(value) && this.isValid(value)) {\n      return value;\n    }\n    return this.invalid();\n  }\n\n  /**\n   * Sets the locale used for all dates.\n   * @param locale The new locale.\n   */\n  setLocale(locale: any) {\n    this.locale = locale;\n    this._localeChanges.next();\n  }\n\n  /**\n   * Compares two dates.\n   * @param first The first date to compare.\n   * @param second The second date to compare.\n   * @returns 0 if the dates are equal, a number less than 0 if the first date is earlier,\n   *     a number greater than 0 if the first date is later.\n   */\n  compareDate(first: D, second: D): number {\n    return this.getYear(first) - this.getYear(second) ||\n        this.getMonth(first) - this.getMonth(second) ||\n        this.getDate(first) - this.getDate(second);\n  }\n\n  /**\n   * Checks if two dates are equal.\n   * @param first The first date to check.\n   * @param second The second date to check.\n   * @returns Whether the two dates are equal.\n   *     Null dates are considered equal to other null dates.\n   */\n  sameDate(first: D | null, second: D | null): boolean {\n    if (first && second) {\n      let firstValid = this.isValid(first);\n      let secondValid = this.isValid(second);\n      if (firstValid && secondValid) {\n        return !this.compareDate(first, second);\n      }\n      return firstValid == secondValid;\n    }\n    return first == second;\n  }\n\n  /**\n   * Clamp the given date between min and max dates.\n   * @param date The date to clamp.\n   * @param min The minimum value to allow. If null or omitted no min is enforced.\n   * @param max The maximum value to allow. If null or omitted no max is enforced.\n   * @returns `min` if `date` is less than `min`, `max` if date is greater than `max`,\n   *     otherwise `date`.\n   */\n  clampDate(date: D, min?: D | null, max?: D | null): D {\n    if (min && this.compareDate(date, min) < 0) {\n      return min;\n    }\n    if (max && this.compareDate(date, max) > 0) {\n      return max;\n    }\n    return date;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Platform} from '@angular/cdk/platform';\nimport {Inject, Injectable, Optional} from '@angular/core';\nimport {DateAdapter, MAT_DATE_LOCALE} from './date-adapter';\n\n// TODO(mmalerba): Remove when we no longer support safari 9.\n/** Whether the browser supports the Intl API. */\nconst SUPPORTS_INTL_API = typeof Intl != 'undefined';\n\n\n/** The default month names to use if Intl API is not available. */\nconst DEFAULT_MONTH_NAMES = {\n  'long': [\n    'January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September',\n    'October', 'November', 'December'\n  ],\n  'short': ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'],\n  'narrow': ['J', 'F', 'M', 'A', 'M', 'J', 'J', 'A', 'S', 'O', 'N', 'D']\n};\n\n\n/** The default date names to use if Intl API is not available. */\nconst DEFAULT_DATE_NAMES = range(31, i => String(i + 1));\n\n\n/** The default day of the week names to use if Intl API is not available. */\nconst DEFAULT_DAY_OF_WEEK_NAMES = {\n  'long': ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'],\n  'short': ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'],\n  'narrow': ['S', 'M', 'T', 'W', 'T', 'F', 'S']\n};\n\n\n/**\n * Matches strings that have the form of a valid RFC 3339 string\n * (https://tools.ietf.org/html/rfc3339). Note that the string may not actually be a valid date\n * because the regex will match strings an with out of bounds month, date, etc.\n */\nconst ISO_8601_REGEX =\n    /^\\d{4}-\\d{2}-\\d{2}(?:T\\d{2}:\\d{2}:\\d{2}(?:\\.\\d+)?(?:Z|(?:(?:\\+|-)\\d{2}:\\d{2}))?)?$/;\n\n\n/** Creates an array and fills it with values. */\nfunction range<T>(length: number, valueFunction: (index: number) => T): T[] {\n  const valuesArray = Array(length);\n  for (let i = 0; i < length; i++) {\n    valuesArray[i] = valueFunction(i);\n  }\n  return valuesArray;\n}\n\n/** Adapts the native JS Date for use with cdk-based components that work with dates. */\n@Injectable()\nexport class NativeDateAdapter extends DateAdapter<Date> {\n  /** Whether to clamp the date between 1 and 9999 to avoid IE and Edge errors. */\n  private readonly _clampDate: boolean;\n\n  /**\n   * Whether to use `timeZone: 'utc'` with `Intl.DateTimeFormat` when formatting dates.\n   * Without this `Intl.DateTimeFormat` sometimes chooses the wrong timeZone, which can throw off\n   * the result. (e.g. in the en-US locale `new Date(1800, 7, 14).toLocaleDateString()`\n   * will produce `'8/13/1800'`.\n   *\n   * TODO(mmalerba): drop this variable. It's not being used in the code right now. We're now\n   * getting the string representation of a Date object from it's utc representation. We're keeping\n   * it here for sometime, just for precaution, in case we decide to revert some of these changes\n   * though.\n   */\n  useUtcForDisplay: boolean = true;\n\n  constructor(@Optional() @Inject(MAT_DATE_LOCALE) matDateLocale: string, platform: Platform) {\n    super();\n    super.setLocale(matDateLocale);\n\n    // IE does its own time zone correction, so we disable this on IE.\n    this.useUtcForDisplay = !platform.TRIDENT;\n    this._clampDate = platform.TRIDENT || platform.EDGE;\n  }\n\n  getYear(date: Date): number {\n    return date.getFullYear();\n  }\n\n  getMonth(date: Date): number {\n    return date.getMonth();\n  }\n\n  getDate(date: Date): number {\n    return date.getDate();\n  }\n\n  getDayOfWeek(date: Date): number {\n    return date.getDay();\n  }\n\n  getMonthNames(style: 'long' | 'short' | 'narrow'): string[] {\n    if (SUPPORTS_INTL_API) {\n      const dtf = new Intl.DateTimeFormat(this.locale, {month: style, timeZone: 'utc'});\n      return range(12, i =>\n          this._stripDirectionalityCharacters(this._format(dtf, new Date(2017, i, 1))));\n    }\n    return DEFAULT_MONTH_NAMES[style];\n  }\n\n  getDateNames(): string[] {\n    if (SUPPORTS_INTL_API) {\n      const dtf = new Intl.DateTimeFormat(this.locale, {day: 'numeric', timeZone: 'utc'});\n      return range(31, i => this._stripDirectionalityCharacters(\n          this._format(dtf, new Date(2017, 0, i + 1))));\n    }\n    return DEFAULT_DATE_NAMES;\n  }\n\n  getDayOfWeekNames(style: 'long' | 'short' | 'narrow'): string[] {\n    if (SUPPORTS_INTL_API) {\n      const dtf = new Intl.DateTimeFormat(this.locale, {weekday: style, timeZone: 'utc'});\n      return range(7, i => this._stripDirectionalityCharacters(\n          this._format(dtf, new Date(2017, 0, i + 1))));\n    }\n    return DEFAULT_DAY_OF_WEEK_NAMES[style];\n  }\n\n  getYearName(date: Date): string {\n    if (SUPPORTS_INTL_API) {\n      const dtf = new Intl.DateTimeFormat(this.locale, {year: 'numeric', timeZone: 'utc'});\n      return this._stripDirectionalityCharacters(this._format(dtf, date));\n    }\n    return String(this.getYear(date));\n  }\n\n  getFirstDayOfWeek(): number {\n    // We can't tell using native JS Date what the first day of the week is, we default to Sunday.\n    return 0;\n  }\n\n  getNumDaysInMonth(date: Date): number {\n    return this.getDate(this._createDateWithOverflow(\n        this.getYear(date), this.getMonth(date) + 1, 0));\n  }\n\n  clone(date: Date): Date {\n    return this.createDate(this.getYear(date), this.getMonth(date), this.getDate(date));\n  }\n\n  createDate(year: number, month: number, date: number): Date {\n    // Check for invalid month and date (except upper bound on date which we have to check after\n    // creating the Date).\n    if (month < 0 || month > 11) {\n      throw Error(`Invalid month index \"${month}\". Month index has to be between 0 and 11.`);\n    }\n\n    if (date < 1) {\n      throw Error(`Invalid date \"${date}\". Date has to be greater than 0.`);\n    }\n\n    let result = this._createDateWithOverflow(year, month, date);\n    // Check that the date wasn't above the upper bound for the month, causing the month to overflow\n    if (result.getMonth() != month) {\n      throw Error(`Invalid date \"${date}\" for month with index \"${month}\".`);\n    }\n\n    return result;\n  }\n\n  today(): Date {\n    return new Date();\n  }\n\n  parse(value: any): Date | null {\n    // We have no way using the native JS Date to set the parse format or locale, so we ignore these\n    // parameters.\n    if (typeof value == 'number') {\n      return new Date(value);\n    }\n    return value ? new Date(Date.parse(value)) : null;\n  }\n\n  format(date: Date, displayFormat: Object): string {\n    if (!this.isValid(date)) {\n      throw Error('NativeDateAdapter: Cannot format invalid date.');\n    }\n\n    if (SUPPORTS_INTL_API) {\n      // On IE and Edge the i18n API will throw a hard error that can crash the entire app\n      // if we attempt to format a date whose year is less than 1 or greater than 9999.\n      if (this._clampDate && (date.getFullYear() < 1 || date.getFullYear() > 9999)) {\n        date = this.clone(date);\n        date.setFullYear(Math.max(1, Math.min(9999, date.getFullYear())));\n      }\n\n      displayFormat = {...displayFormat, timeZone: 'utc'};\n\n      const dtf = new Intl.DateTimeFormat(this.locale, displayFormat);\n      return this._stripDirectionalityCharacters(this._format(dtf, date));\n    }\n    return this._stripDirectionalityCharacters(date.toDateString());\n  }\n\n  addCalendarYears(date: Date, years: number): Date {\n    return this.addCalendarMonths(date, years * 12);\n  }\n\n  addCalendarMonths(date: Date, months: number): Date {\n    let newDate = this._createDateWithOverflow(\n        this.getYear(date), this.getMonth(date) + months, this.getDate(date));\n\n    // It's possible to wind up in the wrong month if the original month has more days than the new\n    // month. In this case we want to go to the last day of the desired month.\n    // Note: the additional + 12 % 12 ensures we end up with a positive number, since JS % doesn't\n    // guarantee this.\n    if (this.getMonth(newDate) != ((this.getMonth(date) + months) % 12 + 12) % 12) {\n      newDate = this._createDateWithOverflow(this.getYear(newDate), this.getMonth(newDate), 0);\n    }\n\n    return newDate;\n  }\n\n  addCalendarDays(date: Date, days: number): Date {\n    return this._createDateWithOverflow(\n        this.getYear(date), this.getMonth(date), this.getDate(date) + days);\n  }\n\n  toIso8601(date: Date): string {\n    return [\n      date.getUTCFullYear(),\n      this._2digit(date.getUTCMonth() + 1),\n      this._2digit(date.getUTCDate())\n    ].join('-');\n  }\n\n  /**\n   * Returns the given value if given a valid Date or null. Deserializes valid ISO 8601 strings\n   * (https://www.ietf.org/rfc/rfc3339.txt) into valid Dates and empty string into null. Returns an\n   * invalid date for all other values.\n   */\n  deserialize(value: any): Date | null {\n    if (typeof value === 'string') {\n      if (!value) {\n        return null;\n      }\n      // The `Date` constructor accepts formats other than ISO 8601, so we need to make sure the\n      // string is the right format first.\n      if (ISO_8601_REGEX.test(value)) {\n        let date = new Date(value);\n        if (this.isValid(date)) {\n          return date;\n        }\n      }\n    }\n    return super.deserialize(value);\n  }\n\n  isDateInstance(obj: any) {\n    return obj instanceof Date;\n  }\n\n  isValid(date: Date) {\n    return !isNaN(date.getTime());\n  }\n\n  invalid(): Date {\n    return new Date(NaN);\n  }\n\n  /** Creates a date but allows the month and date to overflow. */\n  private _createDateWithOverflow(year: number, month: number, date: number) {\n    const result = new Date(year, month, date);\n\n    // We need to correct for the fact that JS native Date treats years in range [0, 99] as\n    // abbreviations for 19xx.\n    if (year >= 0 && year < 100) {\n      result.setFullYear(this.getYear(result) - 1900);\n    }\n    return result;\n  }\n\n  /**\n   * Pads a number to make it two digits.\n   * @param n The number to pad.\n   * @returns The padded number.\n   */\n  private _2digit(n: number) {\n    return ('00' + n).slice(-2);\n  }\n\n  /**\n   * Strip out unicode LTR and RTL characters. Edge and IE insert these into formatted dates while\n   * other browsers do not. We remove them to make output consistent and because they interfere with\n   * date parsing.\n   * @param str The string to strip direction characters from.\n   * @returns The stripped string.\n   */\n  private _stripDirectionalityCharacters(str: string) {\n    return str.replace(/[\\u200e\\u200f]/g, '');\n  }\n\n  /**\n   * When converting Date object to string, javascript built-in functions may return wrong\n   * results because it applies its internal DST rules. The DST rules around the world change\n   * very frequently, and the current valid rule is not always valid in previous years though.\n   * We work around this problem building a new Date object which has its internal UTC\n   * representation with the local date and time.\n   * @param dtf Intl.DateTimeFormat object, containg the desired string format. It must have\n   *    timeZone set to 'utc' to work fine.\n   * @param date Date from which we want to get the string representation according to dtf\n   * @returns A Date object with its UTC representation based on the passed in date info\n   */\n  private _format(dtf: Intl.DateTimeFormat, date: Date) {\n    const d = new Date(Date.UTC(\n        date.getFullYear(), date.getMonth(), date.getDate(), date.getHours(),\n        date.getMinutes(), date.getSeconds(), date.getMilliseconds()));\n    return dtf.format(d);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {ElementRef, NgZone} from '@angular/core';\nimport {Platform, supportsPassiveEventListeners} from '@angular/cdk/platform';\nimport {isFakeMousedownFromScreenReader} from '@angular/cdk/a11y';\nimport {RippleRef, RippleState} from './ripple-ref';\n\nexport type RippleConfig = {\n  color?: string;\n  centered?: boolean;\n  radius?: number;\n  persistent?: boolean;\n  animation?: RippleAnimationConfig;\n  terminateOnPointerUp?: boolean;\n  /**\n   * @deprecated Use the `animation` property instead.\n   * @breaking-change 7.0.0\n   */\n  speedFactor?: number;\n};\n\n/**\n * Interface that describes the configuration for the animation of a ripple.\n * There are two animation phases with different durations for the ripples.\n */\nexport interface RippleAnimationConfig {\n  /** Duration in milliseconds for the enter animation (expansion from point of contact). */\n  enterDuration?: number;\n  /** Duration in milliseconds for the exit animation (fade-out). */\n  exitDuration?: number;\n}\n\n/**\n * Interface that describes the target for launching ripples.\n * It defines the ripple configuration and disabled state for interaction ripples.\n * @docs-private\n */\nexport interface RippleTarget {\n  /** Configuration for ripples that are launched on pointer down. */\n  rippleConfig: RippleConfig;\n  /** Whether ripples on pointer down should be disabled. */\n  rippleDisabled: boolean;\n}\n\n/**\n * Default ripple animation configuration for ripples without an explicit\n * animation config specified.\n */\nexport const defaultRippleAnimationConfig = {\n  enterDuration: 450,\n  exitDuration: 400\n};\n\n/**\n * Timeout for ignoring mouse events. Mouse events will be temporary ignored after touch\n * events to avoid synthetic mouse events.\n */\nconst ignoreMouseEventsTimeout = 800;\n\n/**\n * Helper service that performs DOM manipulations. Not intended to be used outside this module.\n * The constructor takes a reference to the ripple directive's host element and a map of DOM\n * event handlers to be installed on the element that triggers ripple animations.\n * This will eventually become a custom renderer once Angular support exists.\n * @docs-private\n */\nexport class RippleRenderer {\n  /** Element where the ripples are being added to. */\n  private _containerElement: HTMLElement;\n\n  /** Element which triggers the ripple elements on mouse events. */\n  private _triggerElement: HTMLElement | null;\n\n  /** Whether the pointer is currently down or not. */\n  private _isPointerDown = false;\n\n  /** Events to be registered on the trigger element. */\n  private _triggerEvents = new Map<string, any>();\n\n  /** Set of currently active ripple references. */\n  private _activeRipples = new Set<RippleRef>();\n\n  /** Latest non-persistent ripple that was triggered. */\n  private _mostRecentTransientRipple: RippleRef | null;\n\n  /** Time in milliseconds when the last touchstart event happened. */\n  private _lastTouchStartEvent: number;\n\n  /** Options that apply to all the event listeners that are bound by the renderer. */\n  private _eventOptions = supportsPassiveEventListeners() ? ({passive: true} as any) : false;\n\n  /**\n   * Cached dimensions of the ripple container. Set when the first\n   * ripple is shown and cleared once no more ripples are visible.\n   */\n  private _containerRect: ClientRect | null;\n\n  constructor(private _target: RippleTarget,\n              private _ngZone: NgZone,\n              elementRef: ElementRef<HTMLElement>,\n              platform: Platform) {\n\n    // Only do anything if we're on the browser.\n    if (platform.isBrowser) {\n      this._containerElement = elementRef.nativeElement;\n\n      // Specify events which need to be registered on the trigger.\n      this._triggerEvents\n        .set('mousedown', this.onMousedown)\n        .set('mouseup', this.onPointerUp)\n        .set('mouseleave', this.onPointerUp)\n\n        .set('touchstart', this.onTouchStart)\n        .set('touchend', this.onPointerUp)\n        .set('touchcancel', this.onPointerUp);\n    }\n  }\n\n  /**\n   * Fades in a ripple at the given coordinates.\n   * @param x Coordinate within the element, along the X axis at which to start the ripple.\n   * @param y Coordinate within the element, along the Y axis at which to start the ripple.\n   * @param config Extra ripple options.\n   */\n  fadeInRipple(x: number, y: number, config: RippleConfig = {}): RippleRef {\n    const containerRect = this._containerRect =\n                          this._containerRect || this._containerElement.getBoundingClientRect();\n    const animationConfig = {...defaultRippleAnimationConfig, ...config.animation};\n\n    if (config.centered) {\n      x = containerRect.left + containerRect.width / 2;\n      y = containerRect.top + containerRect.height / 2;\n    }\n\n    const radius = config.radius || distanceToFurthestCorner(x, y, containerRect);\n    const offsetX = x - containerRect.left;\n    const offsetY = y - containerRect.top;\n    const duration = animationConfig.enterDuration / (config.speedFactor || 1);\n\n    const ripple = document.createElement('div');\n    ripple.classList.add('mat-ripple-element');\n\n    ripple.style.left = `${offsetX - radius}px`;\n    ripple.style.top = `${offsetY - radius}px`;\n    ripple.style.height = `${radius * 2}px`;\n    ripple.style.width = `${radius * 2}px`;\n\n    // If the color is not set, the default CSS color will be used.\n    ripple.style.backgroundColor = config.color || null;\n    ripple.style.transitionDuration = `${duration}ms`;\n\n    this._containerElement.appendChild(ripple);\n\n    // By default the browser does not recalculate the styles of dynamically created\n    // ripple elements. This is critical because then the `scale` would not animate properly.\n    enforceStyleRecalculation(ripple);\n\n    ripple.style.transform = 'scale(1)';\n\n    // Exposed reference to the ripple that will be returned.\n    const rippleRef = new RippleRef(this, ripple, config);\n\n    rippleRef.state = RippleState.FADING_IN;\n\n    // Add the ripple reference to the list of all active ripples.\n    this._activeRipples.add(rippleRef);\n\n    if (!config.persistent) {\n      this._mostRecentTransientRipple = rippleRef;\n    }\n\n    // Wait for the ripple element to be completely faded in.\n    // Once it's faded in, the ripple can be hidden immediately if the mouse is released.\n    this.runTimeoutOutsideZone(() => {\n      const isMostRecentTransientRipple = rippleRef === this._mostRecentTransientRipple;\n\n      rippleRef.state = RippleState.VISIBLE;\n\n      // When the timer runs out while the user has kept their pointer down, we want to\n      // keep only the persistent ripples and the latest transient ripple. We do this,\n      // because we don't want stacked transient ripples to appear after their enter\n      // animation has finished.\n      if (!config.persistent && (!isMostRecentTransientRipple || !this._isPointerDown)) {\n        rippleRef.fadeOut();\n      }\n    }, duration);\n\n    return rippleRef;\n  }\n\n  /** Fades out a ripple reference. */\n  fadeOutRipple(rippleRef: RippleRef) {\n    const wasActive = this._activeRipples.delete(rippleRef);\n\n    if (rippleRef === this._mostRecentTransientRipple) {\n      this._mostRecentTransientRipple = null;\n    }\n\n    // Clear out the cached bounding rect if we have no more ripples.\n    if (!this._activeRipples.size) {\n      this._containerRect = null;\n    }\n\n    // For ripples that are not active anymore, don't re-un the fade-out animation.\n    if (!wasActive) {\n      return;\n    }\n\n    const rippleEl = rippleRef.element;\n    const animationConfig = {...defaultRippleAnimationConfig, ...rippleRef.config.animation};\n\n    rippleEl.style.transitionDuration = `${animationConfig.exitDuration}ms`;\n    rippleEl.style.opacity = '0';\n    rippleRef.state = RippleState.FADING_OUT;\n\n    // Once the ripple faded out, the ripple can be safely removed from the DOM.\n    this.runTimeoutOutsideZone(() => {\n      rippleRef.state = RippleState.HIDDEN;\n      rippleEl.parentNode!.removeChild(rippleEl);\n    }, animationConfig.exitDuration);\n  }\n\n  /** Fades out all currently active ripples. */\n  fadeOutAll() {\n    this._activeRipples.forEach(ripple => ripple.fadeOut());\n  }\n\n  /** Sets up the trigger event listeners */\n  setupTriggerEvents(element: HTMLElement) {\n    if (!element || element === this._triggerElement) {\n      return;\n    }\n\n    // Remove all previously registered event listeners from the trigger element.\n    this._removeTriggerEvents();\n\n    this._ngZone.runOutsideAngular(() => {\n      this._triggerEvents.forEach((fn, type) =>\n          element.addEventListener(type, fn, this._eventOptions));\n    });\n\n    this._triggerElement = element;\n  }\n\n  /** Function being called whenever the trigger is being pressed using mouse. */\n  private onMousedown = (event: MouseEvent) => {\n    // Screen readers will fire fake mouse events for space/enter. Skip launching a\n    // ripple in this case for consistency with the non-screen-reader experience.\n    const isFakeMousedown = isFakeMousedownFromScreenReader(event);\n    const isSyntheticEvent = this._lastTouchStartEvent &&\n        Date.now() < this._lastTouchStartEvent + ignoreMouseEventsTimeout;\n\n    if (!this._target.rippleDisabled && !isFakeMousedown && !isSyntheticEvent) {\n      this._isPointerDown = true;\n      this.fadeInRipple(event.clientX, event.clientY, this._target.rippleConfig);\n    }\n  }\n\n  /** Function being called whenever the trigger is being pressed using touch. */\n  private onTouchStart = (event: TouchEvent) => {\n    if (!this._target.rippleDisabled) {\n      // Some browsers fire mouse events after a `touchstart` event. Those synthetic mouse\n      // events will launch a second ripple if we don't ignore mouse events for a specific\n      // time after a touchstart event.\n      this._lastTouchStartEvent = Date.now();\n      this._isPointerDown = true;\n\n      // Use `changedTouches` so we skip any touches where the user put\n      // their finger down, but used another finger to tap the element again.\n      const touches = event.changedTouches;\n\n      for (let i = 0; i < touches.length; i++) {\n        this.fadeInRipple(touches[i].clientX, touches[i].clientY, this._target.rippleConfig);\n      }\n    }\n  }\n\n  /** Function being called whenever the trigger is being released. */\n  private onPointerUp = () => {\n    if (!this._isPointerDown) {\n      return;\n    }\n\n    this._isPointerDown = false;\n\n    // Fade-out all ripples that are visible and not persistent.\n    this._activeRipples.forEach(ripple => {\n      // By default, only ripples that are completely visible will fade out on pointer release.\n      // If the `terminateOnPointerUp` option is set, ripples that still fade in will also fade out.\n      const isVisible = ripple.state === RippleState.VISIBLE ||\n        ripple.config.terminateOnPointerUp && ripple.state === RippleState.FADING_IN;\n\n      if (!ripple.config.persistent && isVisible) {\n        ripple.fadeOut();\n      }\n    });\n  }\n\n  /** Runs a timeout outside of the Angular zone to avoid triggering the change detection. */\n  private runTimeoutOutsideZone(fn: Function, delay = 0) {\n    this._ngZone.runOutsideAngular(() => setTimeout(fn, delay));\n  }\n\n  /** Removes previously registered event listeners from the trigger element. */\n  _removeTriggerEvents() {\n    if (this._triggerElement) {\n      this._triggerEvents.forEach((fn, type) => {\n        this._triggerElement!.removeEventListener(type, fn, this._eventOptions);\n      });\n    }\n  }\n}\n\n/** Enforces a style recalculation of a DOM element by computing its styles. */\nfunction enforceStyleRecalculation(element: HTMLElement) {\n  // Enforce a style recalculation by calling `getComputedStyle` and accessing any property.\n  // Calling `getPropertyValue` is important to let optimizers know that this is not a noop.\n  // See: https://gist.github.com/paulirish/5d52fb081b3570c81e3a\n  window.getComputedStyle(element).getPropertyValue('opacity');\n}\n\n/**\n * Returns the distance from the point (x, y) to the furthest corner of a rectangle.\n */\nfunction distanceToFurthestCorner(x: number, y: number, rect: ClientRect) {\n  const distX = Math.max(Math.abs(x - rect.left), Math.abs(x - rect.right));\n  const distY = Math.max(Math.abs(y - rect.top), Math.abs(y - rect.bottom));\n  return Math.sqrt(distX * distX + distY * distY);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** @docs-private */\nexport function getMatFormFieldPlaceholderConflictError(): Error {\n  return Error('Placeholder attribute and child element were both specified.');\n}\n\n/** @docs-private */\nexport function getMatFormFieldDuplicatedHintError(align: string): Error {\n  return Error(`A hint was already declared for 'align=\"${align}\"'.`);\n}\n\n/** @docs-private */\nexport function getMatFormFieldMissingControlError(): Error {\n  return Error('mat-form-field must contain a MatFormFieldControl.');\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** @docs-private */\nexport function getMatInputUnsupportedTypeError(type: string): Error {\n  return Error(`Input type \"${type}\" isn't supported by matInput.`);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** @docs-private */\nexport function createMissingDateImplError(provider: string) {\n  return Error(\n      `MatDatepicker: No provider found for ${provider}. You must import one of the following ` +\n      `modules at your application root: MatNativeDateModule, MatMomentDateModule, or provide a ` +\n      `custom implementation.`);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Throws an exception for the case when menu trigger doesn't have a valid mat-menu instance\n * @docs-private\n */\nexport function throwMatMenuMissingError() {\n  throw Error(`matMenuTriggerFor: must pass in an mat-menu instance.\n\n    Example:\n      <mat-menu #menu=\"matMenu\"></mat-menu>\n      <button [matMenuTriggerFor]=\"menu\"></button>`);\n}\n\n/**\n * Throws an exception for the case when menu's x-position value isn't valid.\n * In other words, it doesn't match 'before' or 'after'.\n * @docs-private\n */\nexport function throwMatMenuInvalidPositionX() {\n  throw Error(`xPosition value must be either 'before' or after'.\n      Example: <mat-menu xPosition=\"before\" #menu=\"matMenu\"></mat-menu>`);\n}\n\n/**\n * Throws an exception for the case when menu's y-position value isn't valid.\n * In other words, it doesn't match 'above' or 'below'.\n * @docs-private\n */\nexport function throwMatMenuInvalidPositionY() {\n  throw Error(`yPosition value must be either 'above' or below'.\n      Example: <mat-menu yPosition=\"above\" #menu=\"matMenu\"></mat-menu>`);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Returns an exception to be thrown when attempting to change a select's `multiple` option\n * after initialization.\n * @docs-private\n */\nexport function getMatSelectDynamicMultipleError(): Error {\n  return Error('Cannot change `multiple` mode of select after initialization.');\n}\n\n/**\n * Returns an exception to be thrown when attempting to assign a non-array value to a select\n * in `multiple` mode. Note that `undefined` and `null` are still valid values to allow for\n * resetting the value.\n * @docs-private\n */\nexport function getMatSelectNonArrayValueError(): Error {\n  return Error('Value must be an array in multiple-selection mode.');\n}\n\n/**\n * Returns an exception to be thrown when assigning a non-function value to the comparator\n * used to determine if a value corresponds to an option. Note that whether the function\n * actually takes two values and returns a boolean is not checked.\n */\nexport function getMatSelectNonFunctionValueError(): Error {\n  return Error('`compareWith` must be a function.');\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** @docs-private */\nexport function getSortDuplicateSortableIdError(id: string): Error {\n  return Error(`Cannot have two MatSortables with the same id (${id}).`);\n}\n\n/** @docs-private */\nexport function getSortHeaderNotContainedWithinSortError(): Error {\n  return Error(`MatSortHeader must be placed within a parent element with the MatSort directive.`);\n}\n\n/** @docs-private */\nexport function getSortHeaderMissingIdError(): Error {\n  return Error(`MatSortHeader must be provided with a unique id.`);\n}\n\n/** @docs-private */\nexport function getSortInvalidDirectionError(direction: string): Error {\n  return Error(`${direction} is not a valid sort direction ('asc' or 'desc').`);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** @docs-private */\nexport class AnimationCurves {\n  static STANDARD_CURVE = 'cubic-bezier(0.4,0.0,0.2,1)';\n  static DECELERATION_CURVE = 'cubic-bezier(0.0,0.0,0.2,1)';\n  static ACCELERATION_CURVE = 'cubic-bezier(0.4,0.0,1,1)';\n  static SHARP_CURVE = 'cubic-bezier(0.4,0.0,0.6,1)';\n}\n\n\n/** @docs-private */\nexport class AnimationDurations {\n  static COMPLEX = '375ms';\n  static ENTERING = '225ms';\n  static EXITING = '195ms';\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {InjectionToken} from '@angular/core';\n\n\nexport type MatDateFormats = {\n  parse: {\n    dateInput: any\n  },\n  display: {\n    dateInput: any,\n    monthYearLabel: any,\n    dateA11yLabel: any,\n    monthYearA11yLabel: any,\n  }\n};\n\n\nexport const MAT_DATE_FORMATS = new InjectionToken<MatDateFormats>('mat-date-formats');\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {MatDateFormats} from './date-formats';\n\n\nexport const MAT_NATIVE_DATE_FORMATS: MatDateFormats = {\n  parse: {\n    dateInput: null,\n  },\n  display: {\n    dateInput: {year: 'numeric', month: 'numeric', day: 'numeric'},\n    monthYearLabel: {year: 'numeric', month: 'short'},\n    dateA11yLabel: {year: 'numeric', month: 'long', day: 'numeric'},\n    monthYearA11yLabel: {year: 'numeric', month: 'long'},\n  }\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {PlatformModule} from '@angular/cdk/platform';\nimport {NgModule} from '@angular/core';\nimport {DateAdapter} from './date-adapter';\nimport {MAT_DATE_FORMATS} from './date-formats';\nimport {NativeDateAdapter} from './native-date-adapter';\nimport {MAT_NATIVE_DATE_FORMATS} from './native-date-formats';\n\nexport * from './date-adapter';\nexport * from './date-formats';\nexport * from './native-date-adapter';\nexport * from './native-date-formats';\n\n\n@NgModule({\n  imports: [PlatformModule],\n  providers: [\n    {provide: DateAdapter, useClass: NativeDateAdapter},\n  ],\n})\nexport class NativeDateModule {}\n\n\n@NgModule({\n  imports: [NativeDateModule],\n  providers: [{provide: MAT_DATE_FORMATS, useValue: MAT_NATIVE_DATE_FORMATS}],\n})\nexport class MatNativeDateModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable} from '@angular/core';\nimport {FormGroupDirective, NgForm, FormControl} from '@angular/forms';\n\n/** Error state matcher that matches when a control is invalid and dirty. */\n@Injectable()\nexport class ShowOnDirtyErrorStateMatcher implements ErrorStateMatcher {\n  isErrorState(control: FormControl | null, form: FormGroupDirective | NgForm | null): boolean {\n    return !!(control && control.invalid && (control.dirty || (form && form.submitted)));\n  }\n}\n\n/** Provider that defines how form controls behave with regards to displaying error messages. */\n@Injectable({providedIn: 'root'})\nexport class ErrorStateMatcher {\n  isErrorState(control: FormControl | null, form: FormGroupDirective | NgForm | null): boolean {\n    return !!(control && control.invalid && (control.touched || (form && form.submitted)));\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable, InjectionToken, Inject, Optional} from '@angular/core';\nimport {HammerGestureConfig} from '@angular/platform-browser';\nimport {MatCommonModule} from '../common-behaviors/common-module';\nimport {\n  HammerStatic,\n  HammerInstance,\n  Recognizer,\n  RecognizerStatic,\n  HammerOptions,\n} from './gesture-annotations';\n\n/**\n * Injection token that can be used to provide options to the Hammerjs instance.\n * More info at http://hammerjs.github.io/api/.\n */\nexport const MAT_HAMMER_OPTIONS = new InjectionToken<HammerOptions>('MAT_HAMMER_OPTIONS');\n\nconst ANGULAR_MATERIAL_SUPPORTED_HAMMER_GESTURES = [\n  'longpress',\n  'slide',\n  'slidestart',\n  'slideend',\n  'slideright',\n  'slideleft'\n];\n\n/**\n * Fake HammerInstance that is used when a Hammer instance is requested when HammerJS has not\n * been loaded on the page.\n */\nconst noopHammerInstance: HammerInstance = {\n  on: () => {},\n  off: () => {},\n};\n\n/** Adjusts configuration of our gesture library, Hammer. */\n@Injectable()\nexport class GestureConfig extends HammerGestureConfig {\n  /** List of new event names to add to the gesture support list */\n  events = ANGULAR_MATERIAL_SUPPORTED_HAMMER_GESTURES;\n\n  constructor(\n    @Optional() @Inject(MAT_HAMMER_OPTIONS) private _hammerOptions?: HammerOptions,\n    @Optional() commonModule?: MatCommonModule) {\n    super();\n    if (commonModule) {\n      commonModule._checkHammerIsAvailable();\n    }\n  }\n\n  /**\n   * Builds Hammer instance manually to add custom recognizers that match the Material Design spec.\n   *\n   * Our gesture names come from the Material Design gestures spec:\n   * https://material.io/design/#gestures-touch-mechanics\n   *\n   * More information on default recognizers can be found in Hammer docs:\n   * http://hammerjs.github.io/recognizer-pan/\n   * http://hammerjs.github.io/recognizer-press/\n   *\n   * @param element Element to which to assign the new HammerJS gestures.\n   * @returns Newly-created HammerJS instance.\n   */\n  buildHammer(element: HTMLElement): HammerInstance {\n    const hammer: HammerStatic = typeof window !== 'undefined' ? (window as any).Hammer : null;\n\n    if (!hammer) {\n      // If HammerJS is not loaded here, return the noop HammerInstance. This is necessary to\n      // ensure that omitting HammerJS completely will not cause any errors while *also* supporting\n      // the lazy-loading of HammerJS via the HAMMER_LOADER token introduced in Angular 6.1.\n      // Because we can't depend on HAMMER_LOADER's existance until 7.0, we have to always set\n      // `this.events` to the set we support, instead of conditionally setting it to `[]` if\n      // `HAMMER_LOADER` is present (and then throwing an Error here if `window.Hammer` is\n      // undefined).\n      // @breaking-change 7.0.0\n      return noopHammerInstance;\n    }\n\n    const mc = new hammer(element, this._hammerOptions || undefined);\n\n    // Default Hammer Recognizers.\n    const pan = new hammer.Pan();\n    const swipe = new hammer.Swipe();\n    const press = new hammer.Press();\n\n    // Notice that a HammerJS recognizer can only depend on one other recognizer once.\n    // Otherwise the previous `recognizeWith` will be dropped.\n    // TODO: Confirm threshold numbers with Material Design UX Team\n    const slide = this._createRecognizer(pan, {event: 'slide', threshold: 0}, swipe);\n    const longpress = this._createRecognizer(press, {event: 'longpress', time: 500});\n\n    // Overwrite the default `pan` event to use the swipe event.\n    pan.recognizeWith(swipe);\n\n    // Since the slide event threshold is set to zero, the slide recognizer can fire and\n    // accidentally reset the longpress recognizer. In order to make sure that the two\n    // recognizers can run simultaneously but don't affect each other, we allow the slide\n    // recognizer to recognize while a longpress is being processed.\n    // See: https://github.com/hammerjs/hammer.js/blob/master/src/manager.js#L123-L124\n    longpress.recognizeWith(slide);\n\n    // Add customized gestures to Hammer manager\n    mc.add([swipe, press, pan, slide, longpress]);\n\n    return mc as HammerInstance;\n  }\n\n  /** Creates a new recognizer, without affecting the default recognizers of HammerJS */\n  private _createRecognizer(base: Recognizer, options: any, ...inheritances: Recognizer[]) {\n    let recognizer = new (base.constructor as RecognizerStatic)(options);\n\n    inheritances.push(base);\n    inheritances.forEach(item => recognizer.recognizeWith(item));\n\n    return recognizer;\n  }\n\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  NgModule,\n  Directive,\n  ElementRef,\n  QueryList,\n} from '@angular/core';\nimport {MatCommonModule} from '../common-behaviors/common-module';\n\n\n/**\n * Shared directive to count lines inside a text area, such as a list item.\n * Line elements can be extracted with a @ContentChildren(MatLine) query, then\n * counted by checking the query list's length.\n */\n@Directive({\n  selector: '[mat-line], [matLine]',\n  host: {'class': 'mat-line'}\n})\nexport class MatLine {}\n\n/**\n * Helper that takes a query list of lines and sets the correct class on the host.\n * @docs-private\n */\nexport class MatLineSetter {\n  constructor(private _lines: QueryList<MatLine>, private _element: ElementRef<HTMLElement>) {\n    this._setLineClass(this._lines.length);\n\n    this._lines.changes.subscribe(() => {\n      this._setLineClass(this._lines.length);\n    });\n  }\n\n  private _setLineClass(count: number): void {\n    this._resetClasses();\n    if (count === 2 || count === 3) {\n      this._setClass(`mat-${count}-line`, true);\n    } else if (count > 3) {\n      this._setClass(`mat-multi-line`, true);\n    }\n  }\n\n  private _resetClasses(): void {\n    this._setClass('mat-2-line', false);\n    this._setClass('mat-3-line', false);\n    this._setClass('mat-multi-line', false);\n  }\n\n  private _setClass(className: string, isAdd: boolean): void {\n    if (isAdd) {\n      this._element.nativeElement.classList.add(className);\n    } else {\n      this._element.nativeElement.classList.remove(className);\n    }\n  }\n\n}\n\n@NgModule({\n  imports: [MatCommonModule],\n  exports: [MatLine, MatCommonModule],\n  declarations: [MatLine],\n})\nexport class MatLineModule { }\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {RippleConfig, RippleRenderer} from './ripple-renderer';\n\n/** Possible states for a ripple element. */\nexport enum RippleState {\n  FADING_IN, VISIBLE, FADING_OUT, HIDDEN\n}\n\n/**\n * Reference to a previously launched ripple element.\n */\nexport class RippleRef {\n\n  /** Current state of the ripple. */\n  state: RippleState = RippleState.HIDDEN;\n\n  constructor(\n    private _renderer: RippleRenderer,\n    /** Reference to the ripple HTML element. */\n    public element: HTMLElement,\n    /** Ripple configuration used for the ripple. */\n    public config: RippleConfig) {\n  }\n\n  /** Fades out the ripple element. */\n  fadeOut() {\n    this._renderer.fadeOutRipple(this);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Platform} from '@angular/cdk/platform';\nimport {\n  Directive,\n  ElementRef,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  OnDestroy,\n  OnInit,\n  Optional,\n} from '@angular/core';\nimport {RippleRef} from './ripple-ref';\nimport {RippleAnimationConfig, RippleConfig, RippleRenderer, RippleTarget} from './ripple-renderer';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\n\n/** Configurable options for `matRipple`. */\nexport interface RippleGlobalOptions {\n  /**\n   * Whether ripples should be disabled. Ripples can be still launched manually by using\n   * the `launch()` method. Therefore focus indicators will still show up.\n   */\n  disabled?: boolean;\n\n  /**\n   * Configuration for the animation duration of the ripples. There are two phases with different\n   * durations for the ripples. The animation durations will be overwritten if the\n   * `NoopAnimationsModule` is being used.\n   */\n  animation?: RippleAnimationConfig;\n\n  /**\n   * If set, the default duration of the fade-in animation is divided by this value. For example,\n   * setting it to 0.5 will cause the ripple fade-in animation to take twice as long.\n   * A changed speedFactor will not affect the fade-out duration of the ripples.\n   * @deprecated Use the `animation` global option instead.\n   * @breaking-change 7.0.0\n   */\n  baseSpeedFactor?: number;\n\n  /**\n   * Whether ripples should start fading out immediately after the mouse our touch is released. By\n   * default, ripples will wait for the enter animation to complete and for mouse or touch release.\n   */\n  terminateOnPointerUp?: boolean;\n}\n\n/** Injection token that can be used to specify the global ripple options. */\nexport const MAT_RIPPLE_GLOBAL_OPTIONS =\n    new InjectionToken<RippleGlobalOptions>('mat-ripple-global-options');\n\n@Directive({\n  selector: '[mat-ripple], [matRipple]',\n  exportAs: 'matRipple',\n  host: {\n    'class': 'mat-ripple',\n    '[class.mat-ripple-unbounded]': 'unbounded'\n  }\n})\nexport class MatRipple implements OnInit, OnDestroy, RippleTarget {\n\n  /** Custom color for all ripples. */\n  @Input('matRippleColor') color: string;\n\n  /** Whether the ripples should be visible outside the component's bounds. */\n  @Input('matRippleUnbounded') unbounded: boolean;\n\n  /**\n   * Whether the ripple always originates from the center of the host element's bounds, rather\n   * than originating from the location of the click event.\n   */\n  @Input('matRippleCentered') centered: boolean;\n\n  /**\n   * If set, the radius in pixels of foreground ripples when fully expanded. If unset, the radius\n   * will be the distance from the center of the ripple to the furthest corner of the host element's\n   * bounding rectangle.\n   */\n  @Input('matRippleRadius') radius: number = 0;\n\n  /**\n   * If set, the normal duration of ripple animations is divided by this value. For example,\n   * setting it to 0.5 will cause the animations to take twice as long.\n   * A changed speedFactor will not modify the fade-out duration of the ripples.\n   * @deprecated Use the [matRippleAnimation] binding instead.\n   * @breaking-change 7.0.0\n   */\n  @Input('matRippleSpeedFactor') speedFactor: number = 1;\n\n  /**\n   * Configuration for the ripple animation. Allows modifying the enter and exit animation\n   * duration of the ripples. The animation durations will be overwritten if the\n   * `NoopAnimationsModule` is being used.\n   */\n  @Input('matRippleAnimation') animation: RippleAnimationConfig;\n\n  /**\n   * Whether click events will not trigger the ripple. Ripples can be still launched manually\n   * by using the `launch()` method.\n   */\n  @Input('matRippleDisabled')\n  get disabled() { return this._disabled; }\n  set disabled(value: boolean) {\n    this._disabled = value;\n    this._setupTriggerEventsIfEnabled();\n  }\n  private _disabled: boolean = false;\n\n  /**\n   * The element that triggers the ripple when click events are received.\n   * Defaults to the directive's host element.\n   */\n  @Input('matRippleTrigger')\n  get trigger() { return this._trigger || this._elementRef.nativeElement; }\n  set trigger(trigger: HTMLElement) {\n    this._trigger = trigger;\n    this._setupTriggerEventsIfEnabled();\n  }\n  private _trigger: HTMLElement;\n\n  /** Renderer for the ripple DOM manipulations. */\n  private _rippleRenderer: RippleRenderer;\n\n  /** Options that are set globally for all ripples. */\n  private _globalOptions: RippleGlobalOptions;\n\n  /** Whether ripple directive is initialized and the input bindings are set. */\n  private _isInitialized: boolean = false;\n\n  constructor(private _elementRef: ElementRef<HTMLElement>,\n              ngZone: NgZone,\n              platform: Platform,\n              @Optional() @Inject(MAT_RIPPLE_GLOBAL_OPTIONS) globalOptions: RippleGlobalOptions,\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) animationMode?: string) {\n\n    this._globalOptions = globalOptions || {};\n    this._rippleRenderer = new RippleRenderer(this, ngZone, _elementRef, platform);\n\n    if (animationMode === 'NoopAnimations') {\n      this._globalOptions.animation = {enterDuration: 0, exitDuration: 0};\n    }\n  }\n\n  ngOnInit() {\n    this._isInitialized = true;\n    this._setupTriggerEventsIfEnabled();\n  }\n\n  ngOnDestroy() {\n    this._rippleRenderer._removeTriggerEvents();\n  }\n\n  /** Fades out all currently showing ripple elements. */\n  fadeOutAll() {\n    this._rippleRenderer.fadeOutAll();\n  }\n\n  /**\n   * Ripple configuration from the directive's input values.\n   * @docs-private Implemented as part of RippleTarget\n   */\n  get rippleConfig(): RippleConfig {\n    return {\n      centered: this.centered,\n      radius: this.radius,\n      color: this.color,\n      animation: {...this._globalOptions.animation, ...this.animation},\n      terminateOnPointerUp: this._globalOptions.terminateOnPointerUp,\n      speedFactor: this.speedFactor * (this._globalOptions.baseSpeedFactor || 1),\n    };\n  }\n\n  /**\n   * Whether ripples on pointer-down are disabled or not.\n   * @docs-private Implemented as part of RippleTarget\n   */\n  get rippleDisabled(): boolean {\n    return this.disabled || !!this._globalOptions.disabled;\n  }\n\n  /** Sets up the the trigger event listeners if ripples are enabled. */\n  private _setupTriggerEventsIfEnabled() {\n    if (!this.disabled && this._isInitialized) {\n      this._rippleRenderer.setupTriggerEvents(this.trigger);\n    }\n  }\n\n  /**\n   * Launches a manual ripple using the specified ripple configuration.\n   * @param config Configuration for the manual ripple.\n   */\n  launch(config: RippleConfig): RippleRef;\n\n  /**\n   * Launches a manual ripple at the specified coordinates within the element.\n   * @param x Coordinate within the element, along the X axis at which to fade-in the ripple.\n   * @param y Coordinate within the element, along the Y axis at which to fade-in the ripple.\n   * @param config Optional ripple configuration for the manual ripple.\n   */\n  launch(x: number, y: number, config?: RippleConfig): RippleRef;\n\n  /** Launches a manual ripple at the specified coordinated or just by the ripple config. */\n  launch(configOrX: number | RippleConfig, y: number = 0, config?: RippleConfig): RippleRef {\n    if (typeof configOrX === 'number') {\n      return this._rippleRenderer.fadeInRipple(configOrX, y, {...this.rippleConfig, ...config});\n    } else {\n      return this._rippleRenderer.fadeInRipple(0, 0, {...this.rippleConfig, ...configOrX});\n    }\n  }\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {PlatformModule} from '@angular/cdk/platform';\nimport {MatCommonModule} from '../common-behaviors/common-module';\nimport {MatRipple} from './ripple';\n\nexport * from './ripple';\nexport * from './ripple-ref';\nexport * from './ripple-renderer';\n\n@NgModule({\n  imports: [MatCommonModule, PlatformModule],\n  exports: [MatRipple, MatCommonModule],\n  declarations: [MatRipple],\n})\nexport class MatRippleModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ViewEncapsulation,\n  Input,\n  ChangeDetectionStrategy,\n  Inject,\n  Optional,\n} from '@angular/core';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\n\n/**\n * Possible states for a pseudo checkbox.\n * @docs-private\n */\nexport type MatPseudoCheckboxState = 'unchecked' | 'checked' | 'indeterminate';\n\n/**\n * Component that shows a simplified checkbox without including any kind of \"real\" checkbox.\n * Meant to be used when the checkbox is purely decorative and a large number of them will be\n * included, such as for the options in a multi-select. Uses no SVGs or complex animations.\n * Note that theming is meant to be handled by the parent element, e.g.\n * `mat-primary .mat-pseudo-checkbox`.\n *\n * Note that this component will be completely invisible to screen-reader users. This is *not*\n * interchangeable with `<mat-checkbox>` and should *not* be used if the user would directly\n * interact with the checkbox. The pseudo-checkbox should only be used as an implementation detail\n * of more complex components that appropriately handle selected / checked state.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  selector: 'mat-pseudo-checkbox',\n  styleUrls: ['pseudo-checkbox.css'],\n  template: '',\n  host: {\n    'class': 'mat-pseudo-checkbox',\n    '[class.mat-pseudo-checkbox-indeterminate]': 'state === \"indeterminate\"',\n    '[class.mat-pseudo-checkbox-checked]': 'state === \"checked\"',\n    '[class.mat-pseudo-checkbox-disabled]': 'disabled',\n    '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"',\n  },\n})\nexport class MatPseudoCheckbox {\n  /** Display state of the checkbox. */\n  @Input() state: MatPseudoCheckboxState = 'unchecked';\n\n  /** Whether the checkbox is disabled. */\n  @Input() disabled: boolean = false;\n\n  constructor(@Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode?: string) { }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatPseudoCheckbox} from './pseudo-checkbox/pseudo-checkbox';\n\n\n@NgModule({\n  exports: [MatPseudoCheckbox],\n  declarations: [MatPseudoCheckbox]\n})\nexport class MatPseudoCheckboxModule { }\n\n\nexport * from './pseudo-checkbox/pseudo-checkbox';\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ChangeDetectionStrategy, Component, Input, ViewEncapsulation} from '@angular/core';\nimport {CanDisable, CanDisableCtor, mixinDisabled} from '../common-behaviors/disabled';\n\n\n// Boilerplate for applying mixins to MatOptgroup.\n/** @docs-private */\nexport class MatOptgroupBase { }\nexport const _MatOptgroupMixinBase: CanDisableCtor & typeof MatOptgroupBase =\n    mixinDisabled(MatOptgroupBase);\n\n// Counter for unique group ids.\nlet _uniqueOptgroupIdCounter = 0;\n\n/**\n * Component that is used to group instances of `mat-option`.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-optgroup',\n  exportAs: 'matOptgroup',\n  templateUrl: 'optgroup.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  inputs: ['disabled'],\n  styleUrls: ['optgroup.css'],\n  host: {\n    'class': 'mat-optgroup',\n    'role': 'group',\n    '[class.mat-optgroup-disabled]': 'disabled',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.aria-labelledby]': '_labelId',\n  }\n})\nexport class MatOptgroup extends _MatOptgroupMixinBase implements CanDisable {\n  /** Label for the option group. */\n  @Input() label: string;\n\n  /** Unique id for the underlying label. */\n  _labelId: string = `mat-optgroup-label-${_uniqueOptgroupIdCounter++}`;\n}\n"],"names":["MatToolbar","prototype","ngAfterViewInit","_this","this","isDevMode","_platform","isBrowser","_checkToolbarMixedModes","_toolbarRows","changes","subscribe","length","slice","call","_elementRef","nativeElement","childNodes","filter","node","classList","contains","nodeType","_document","COMMENT_NODE","some","textContent","trim","throwToolbarMixedModesError","type","Component","args","selector","exportAs","template","styles","inputs","host","class","[class.mat-toolbar-multiple-rows]","[class.mat-toolbar-single-row]","changeDetection","ChangeDetectionStrategy","OnPush","encapsulation","ViewEncapsulation","None","undefined","decorators","Inject","DOCUMENT","propDecorators","NgModule","imports","MatCommonModule","exports","MatToolbarRow","declarations","MatToolbarModule","MatTreeNodeOutlet","viewContainer","Directive","ViewContainerRef","_CdkTreeNodeDef","CdkTreeNodeDef","_MatTreeNodeMixinBase","mixinTabIndex","mixinDisabled","CdkTreeNode","_MatNestedTreeNodeMixinBase","CdkNestedTreeNode","MatTreeNode","_tree","tabIndex","_super","role","Number","tslib_1.__extends","[attr.aria-expanded]","[attr.aria-level]","[attr.role]","providers","provide","useExisting","ElementRef","CdkTree","String","Attribute","Input","MatTreeNodeDef","data","MatNestedTreeNode","_differs","ngAfterContentInit","ngOnDestroy","IterableDiffers","nodeOutlet","ContentChildren","_CdkTreeNodePadding","CdkTreeNodePadding","MatTreeNodePadding","level","indent","_CdkTree","MatTree","_CdkTreeNodeToggle","CdkTreeNodeToggle","recursive","MatTreeNodeToggle","(click)","MAT_TREE_DIRECTIVES","CdkTreeModule","CommonModule","MatTreeModule","MatTreeFlattener","transformFunction","getLevel","isExpandable","getChildren","_flattenNode","resultNodes","parentMap","flatNode","push","childrenNodes","Array","isArray","_flattenChildren","pipe","take","children","forEach","child","index","childParentMap","flattenNodes","structuredData","expandFlattenedNodes","nodes","treeControl","results","currentExpand","expand","i","isExpanded","MatTreeFlatDataSource","treeFlattener","initialData","_flattenedData","BehaviorSubject","_expandedData","_data","Object","defineProperty","value","next","dataNodes","connect","collectionViewer","viewChange","expansionModel","merge","apply","map","disconnect","DataSource","MatTreeNestedDataSource","VERSION","Version","SELECT_PANEL_PADDING_X","filterPredicate","obj","paginator","_updatePaginator","filteredData","MatTableDataSource","_orderData","sort","sortData","_pageData","startIndex","pageIndex","pageSize","splice","filteredDataLength","Promise","resolve","then","lastPageIndex","Math","ceil","min","_renderData","_MAT_INK_BAR_POSITIONER","InjectionToken","providedIn","factory","_MAT_INK_BAR_POSITIONER_FACTORY","MatInkBar","_ngZone","_inkBarPositioner","alignToElement","element","show","requestAnimationFrame","runOutsideAngular","_setStyles","style","visibility","hide","positions","inkBar","left","width","NgZone","MatTabContent","TemplateRef","_CdkPortal","CdkPortal","MatTabLabel","MatTabBase","_MatTabMixinBase","MatTab","_viewContainerRef","textLabel","_contentPortal","_stateChanges","Subject","position","origin","isActive","ngOnChanges","hasOwnProperty","complete","ngOnInit","TemplatePortal","_explicitContent","_implicitContent","ViewChild","ariaLabel","ariaLabelledby","matTabsAnimations","translateTab","trigger","state","transform","minHeight","transition","animate","MatTabBodyPortal","componentFactoryResolver","viewContainerRef","_host","_centeringSub","Subscription","EMPTY","_leavingSub","_beforeCentering","startWith","_isCenterPosition","_position","isCentering","hasAttached","attach","_content","_afterLeavingCenter","detach","unsubscribe","ComponentFactoryResolver","MatTabBody","forwardRef","CdkPortalOutlet","_dir","changeDetectorRef","_dirChangeSubscription","_onCentering","EventEmitter","_onCentered","change","dir","_computePositionAnimationState","markForCheck","_positionIndex","_computePositionFromOrigin","_onTranslateTabStarted","e","toState","emit","clientHeight","_onTranslateTabComplete","fromState","_getLayoutDirection","animations","ChangeDetectorRef","Output","_portalHost","PortalHostDirective","MatTabLabelWrapperBase","_MatTabLabelWrapperMixinBase","MatTabLabelWrapper","elementRef","focus","getOffsetLeft","offsetLeft","getOffsetWidth","offsetWidth","[class.mat-tab-disabled]","[attr.aria-disabled]","MatTabHeaderBase","_MatTabHeaderMixinBase","mixinDisableRipple","MatTabHeader","_changeDetectorRef","_viewportRuler","_scrollDistance","_selectedIndexChanged","_destroyed","_showPaginationControls","_disableScrollAfter","_disableScrollBefore","_selectedIndex","selectFocusedIndex","indexFocused","coerceNumberProperty","_keyManager","updateActiveItemIndex","ngAfterContentChecked","_tabLabelCount","_labelWrappers","_updatePagination","_scrollToLabel","_checkScrollingControls","_alignInkBarToSelectedTab","_scrollDistanceChanged","_updateTabScrollPosition","_handleKeydown","event","keyCode","HOME","setFirstItemActive","preventDefault","END","setLastItemActive","ENTER","SPACE","focusIndex","onKeydown","dirChange","observableOf","resize","realign","FocusKeyManager","withHorizontalOrientation","withWrap","updateActiveItem","takeUntil","newFocusIndex","_setTabFocus","_onContentChanges","zoneCallback","run","_checkPaginationEnabled","_isValidIndex","setActiveItem","tab","toArray","disabled","containerEl","_tabListContainer","scrollLeft","scrollWidth","scrollDistance","translateX","_tabList","v","max","_getMaxScrollDistance","_scrollHeader","scrollDir","viewLength","labelIndex","selectedLabel","labelBeforePos","labelAfterPos","beforeVisiblePos","afterVisiblePos","isEnabled","selectedLabelWrapper","selectedIndex","_inkBar","[class.mat-tab-header-pagination-controls-enabled]","[class.mat-tab-header-rtl]","ViewportRuler","Directionality","Optional","nextId","MatTabChangeEvent","MatTabGroupBase","_MatTabGroupMixinBase","mixinColor","MatTabGroup","_indexToSelect","_tabBodyWrapperHeight","_tabsSubscription","_tabLabelSubscription","_dynamicHeight","headerPosition","selectedIndexChange","focusChange","animationDone","selectedTabChange","_groupId","coerceBooleanProperty","_backgroundColor","remove","backgroundColor","add","indexToSelect","_clampTabIndex","isFirstRun_1","_createChangeEvent","_tabs","_subscribeToTabLabels","tabs","realignInkBar","_tabHeader","_focusChanged","_getTabLabelId","_getTabContentId","_setTabBodyWrapperHeight","tabHeight","wrapper","_tabBodyWrapper","height","offsetHeight","_removeTabBodyWrapperHeight","_handleClick","tabHeader","idx","_getTabIndex","[class.mat-tab-group-dynamic-height]","[class.mat-tab-group-inverted-header]","dynamicHeight","MatTabNavBase","_MatTabNavMixinBase","MatTabNav","_onDestroy","updateActiveLink","_activeLinkChanged","_alignInkBar","activeTab","_tabLinks","find","active","_activeLinkElement","MatTabLinkBase","_MatTabLinkMixinBase","_tabNavBar","_focusMonitor","_tabLinkRipple","setupTriggerEvents","parseInt","globalOptions","_ripplesGloballyDisabled","terminateOnPointerUp","speedFactor","baseSpeedFactor","animation","monitor","get","_isActive","enumerable","configurable","stopMonitoring","MatTabLink","[attr.aria-current]","[attr.tabIndex]","[class.mat-tab-label-active]","Platform","MAT_RIPPLE_GLOBAL_OPTIONS","FocusMonitor","PortalModule","MatRippleModule","ObserversModule","A11yModule","MatTabsModule","MatToolbarBase","_MatToolbarMixinBase","document","opacity","SORT_ANIMATION_TRANSITION","arrowPosition","keyframes","allowChildren","query","animateChild","optional","sortButtonLabel","id","Injectable","MatSortHeaderIntl","MAT_SORT_HEADER_INTL_PROVIDER","deps","SkipSelf","useFactory","MAT_SORT_HEADER_INTL_PROVIDER_FACTORY","MatSortHeaderBase","_MatSortHeaderMixinBase","MatSortHeader","_intl","_sort","_cdkColumnDef","_showIndicatorHint","_arrowDirection","_disableViewStateAnimation","getSortHeaderNotContainedWithinSortError","_rerenderSubscription","sortChange","_isSorted","_updateArrowDirection","_viewState","_setAnimationTransitionState","_disableClear","name","register","deregister","_setIndicatorHintVisible","visible","_isDisabled","viewState","direction","_getArrowDirectionState","_getArrowViewState","start","_getAriaSortAttribute","(mouseenter)","(longpress)","(mouseleave)","[attr.aria-sort]","[class.mat-sort-header-disabled]","matSortAnimations","indicator","leftPointer","rightPointer","arrowOpacity","MatSort","CdkColumnDef","disableClear","MatSortModule","_CdkStepLabel","CdkStepLabel","MatStepLabel","optionalLabel","MatStepperIntl","MatStepHeader","_element","_intlSubscription","_stringLabel","label","_templateLabel","_getHostElement","_getIconContext","errorMessage","iconOverrides","selected","matStepperAnimations","horizontalStepTransition","verticalStepTransition","MatStepperIcon","templateRef","_CdkStepper","CdkStepper","MatStep","stepper","_errorStateMatcher","stepperOptions","isErrorState","control","form","originalErrorState","customErrorState","invalid","interacted","ErrorStateMatcher","MAT_STEPPER_GLOBAL_OPTIONS","MatStepper","arguments","_icons","_a","_iconOverrides","_steps","_stateChanged","MatHorizontalStepper","aria-orientation","MatVerticalStepper","ctorParameters","_CdkStepperNext","CdkStepperNext","_CdkStepperPrevious","CdkStepperPrevious","MatStepperNext","[type]","MatStepperPrevious","MatButtonModule","CdkStepperModule","MatIconModule","MatStepperModule","_CdkTable","CdkTable","stickyCssClass","MatTable","CDK_TABLE_TEMPLATE","_CdkCellDef","CdkCellDef","_CdkHeaderCellDef","CdkHeaderCellDef","_CdkFooterCellDef","CdkFooterCellDef","MatCellDef","MatHeaderCellDef","MatFooterCellDef","MatColumnDef","sticky","stickyEnd","MatHeaderCell","columnDef","cssClassFriendlyName","CdkHeaderCell","MatFooterCell","CdkFooterCell","MatCell","CdkCell","_CdkHeaderRowDef","CdkHeaderRowDef","_CdkFooterRowDef","CdkFooterRowDef","_CdkRowDef","CdkRowDef","MatHeaderRowDef","MatFooterRowDef","MatRowDef","MatHeaderRow","CDK_ROW_TEMPLATE","CdkHeaderRow","CdkFooterRow","MatFooterRow","MatRow","CdkRow","EXPORTED_DECLARATIONS","CdkTableModule","MatTableModule","MAX_SAFE_INTEGER","_filter","_renderChangesSubscription","sortingDataAccessor","sortHeaderId","_isNumberValue","numberValue","a","b","valueA","valueB","comparatorResult","accumulator","currentTerm","key","dataStr","keys","reduce","toLowerCase","transformedFilter","indexOf","_updateChangeSubscription","_paginator","initialized","pageChange","page","dataStream","combineLatest","_filterData","orderedData","paginatedData","_step","_roundToDecimal","toString","split","pop","MatSlider","_thumbLabel","_tickInterval","_value","_min","parseFloat","toFixed","_percent","_calculatePercentage","_vertical","displayWith","_focusHostElement","blur","_blurHostElement","_clamp","vertical","invert","percent","_isMinValue","thumbLabel","axis","scale","_shouldInvertMouseCoords","_thumbGap","_getDirection","_tickIntervalPercent","tickSize","backgroundSize","sign","rotate","_invertAxis","detectChanges","_onMouseenter","_sliderDimensions","_getSliderDimensions","_updateTickIntervalPercent","_onClick","oldValue","_isSliding","_updateValueFromPosition","x","clientX","y","clientY","_emitInputEvent","_emitChangeEvent","_onSlide","_onSlideStart","center","_valueOnSlideStart","_onSlideEnd","_onFocus","_onBlur","onTouched","_onKeydown","PAGE_UP","_increment","PAGE_DOWN","LEFT_ARROW","UP_ARROW","RIGHT_ARROW","DOWN_ARROW","_onKeyup","numSteps","step","pos","offset","top","size","posComponent","exactValue","_calculateValue","closestValue","round","_controlValueAccessorChangeFn","valueChange","input","tickInterval","trackSize","pixelsPerStep","stepsPerTick","pixelsPerTick","MatSliderChange","source","percentage","_sliderWrapper","getBoundingClientRect","writeValue","registerOnChange","fn","registerOnTouched","setDisabledState","isDisabled","MAT_SLIDER_VALUE_ACCESSOR","(focus)","(blur)","(keydown)","(keyup)","(slide)","(slideend)","(slidestart)","[tabIndex]","[attr.aria-valuemax]","[attr.aria-valuemin]","[attr.aria-valuenow]","[attr.aria-orientation]","[class.mat-slider-disabled]","[class.mat-slider-has-ticks]","[class.mat-slider-horizontal]","[class.mat-slider-axis-inverted]","[class.mat-slider-sliding]","[class.mat-slider-thumb-label-showing]","[class.mat-slider-vertical]","[class.mat-slider-min-value]","[class.mat-slider-hide-last-tick]","[class._mat-animation-noopable]","ANIMATION_MODULE_TYPE","HAMMER_GESTURE_CONFIG","useClass","GestureConfig","MatSliderModule","MatSnackBarRef","containerInstance","_overlayRef","_afterDismissed","_afterOpened","_onAction","_dismissedByAction","onAction","dismiss","_onExit","_finishDismiss","closed","exit","clearTimeout","_durationTimeoutId","dismissWithAction","closeWithAction","_dismissAfter","duration","setTimeout","_open","dispose","dismissedByAction","afterDismissed","asObservable","afterOpened","_onEnter","MAT_SNACK_BAR_DATA","MatSnackBarConfig","politeness","announcementMessage","horizontalPosition","verticalPosition","SimpleSnackBar","snackBarRef","action","matSnackBarAnimations","snackBarState","MatSnackBarContainer","snackBarConfig","_animationState","attachComponentPortal","portal","_assertNotAttached","_applySnackBarClasses","_portalOutlet","attachTemplatePortal","onAnimationEnd","_completeExit","onEnter_1","enter","onMicrotaskEmpty","panelClasses","panelClass","cssClass","Error","[@state]","(@state.done)","OverlayModule","entryComponents","MatSnackBarModule","MAT_SNACK_BAR_DEFAULT_OPTIONS","MAT_SNACK_BAR_DEFAULT_OPTIONS_FACTORY","MatSnackBar","_overlay","_live","_injector","_breakpointObserver","_parentSnackBar","_defaultConfig","_snackBarRefAtThisLevel","parent","_openedSnackBarRef","openFromComponent","component","config","_attach","openFromTemplate","open","message","_config","tslib_1.__assign","_attachSnackBarContainer","overlayRef","userInjector","injector","PortalInjector","WeakMap","containerPortal","ComponentPortal","containerRef","instance","content","userConfig","_createOverlay","container","$implicit","_createInjector","contentRef","observe","Breakpoints","Handset","detachments","matches","overlayElement","_animateSnackBar","announce","overlayConfig","OverlayConfig","positionStrategy","global","isRtl","isLeft","isRight","right","centerHorizontally","bottom","create","Overlay","LiveAnnouncer","Injector","BreakpointObserver","MatSortBase","_MatSortMixinBase","mixinInitialized","sortables","Map","_direction","getSortInvalidDirectionError","sortable","getSortHeaderMissingIdError","has","getSortDuplicateSortableIdError","set","delete","getNextSortDirection","sortDirectionCycle","getSortDirectionCycle","nextDirectionIndex","_markInitialized","AnimationDurations","ENTERING","AnimationCurves","STANDARD_CURVE","_doc","_elementFocusedBeforeDrawerWasOpened","_mode","_disableClose","_autoFocus","openedChange","opened","_isFocusTrapEnabled","_focusTrap","_trapFocus","_restoreFocus","close","stopPropagation","MatDrawer","onPositionChanged","_modeChanged","mode","focusInitialElementWhenReady","hasMovedFocus","activeEl","activeElement","HTMLElement","focusVia","_openedVia","enabled","destroy","isOpen","openedVia","_opened","_enableAnimations","matDrawerAnimations","transformDrawer","[@transform]","(@transform.start)","(@transform.done)","[attr.align]","[class.mat-drawer-end]","[class.mat-drawer-over]","[class.mat-drawer-side]","_openedStream","openedStart","_closedStream","closedStart","_animationMode","backdropClick","_doCheckSubject","_autosize","defaultAutosize","MatDrawerContainer","_backdropOverride","_drawers","drawer","_watchDrawerToggle","_watchDrawerPosition","_watchDrawerMode","_isDrawerOpen","_start","_end","_updateContentMargins","debounceTime","ngDoCheck","_setContainerClass","throwMatDuplicatedDrawerError","_right","_left","_closeModalDrawer","disableClose","_canHaveBackdrop","_isShowingBackdrop","_width","_contentMarginChanges","_contentMargins","[class.mat-drawer-container-explicit-backdrop]","ContentChild","MatDrawerContent","_userContent","autosize","MatSidenavContent","scrollDispatcher","ngZone","[style.margin-left.px]","[style.margin-right.px]","ScrollDispatcher","MatSidenav","_fixedBottomGap","[class.mat-sidenav-fixed]","[style.top.px]","[style.bottom.px]","fixedInViewport","fixedTopGap","MatSidenavContainer","MatSidenavModule","ScrollingModule","PlatformModule","MAT_SLIDE_TOGGLE_DEFAULT_OPTIONS","disableToggleValue","disableDragValue","nextUniqueId","MAT_SLIDE_TOGGLE_VALUE_ACCESSOR","NG_VALUE_ACCESSOR","MatSlideToggle","multi","MatSlideToggleChange","checked","MatSlideToggleBase","_MatSlideToggleMixinBase","defaults","onChange","_","_uniqueId","_required","_checked","_dragging","labelPosition","toggleChange","dragChange","focusOrigin","_onChangeEvent","_inputElement","_onInputClick","toggle","_getDragPercentage","distance","_thumbBarWidth","_previousChecked","_onDragStart","thumbEl","_thumbEl","_thumbBarEl","clientWidth","_onDrag","_dragPercentage","deltaX","dragX","_onDragEnd","newCheckedValue","_onLabelTextChange","[id]","[class.mat-checked]","[class.mat-disabled]","[class.mat-slide-toggle-label-before]","required","MatSlideToggleModule","MatSliderBase","_MatSliderMixinBase","_invert","_max","MAT_PROGRESS_BAR_LOCATION","MatProgressBar","_primaryValueBar","animationEnd","MatProgressBarModule","BASE_SIZE","MatProgressSpinnerBase","_MatProgressSpinnerMixinBase","MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS","MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS_FACTORY","INDETERMINATE_ANIMATION_TEMPLATE","MatProgressSpinner","platform","animationMode","_fallbackAnimation","_noopAnimations","_forceAnimations","_diameter","EDGE","TRIDENT","diameter","strokeWidth","animationClass","diameters","_attachStyleNode","_strokeWidth","newValue","viewBox","_circleRadius","PI","_strokeCircumference","styleTag","createElement","head","appendChild","sheet","insertRule","_getAnimationText","replace","Set","[style.width.px]","[style.height.px]","[attr.mode]","MatSpinner","MatProgressSpinnerModule","MAT_RADIO_GROUP_CONTROL_VALUE_ACCESSOR","MatRadioGroup","MatRadioChange","MatRadioGroupBase","_MatRadioGroupMixinBase","_changeDetector","_name","_selected","_isInitialized","_labelPosition","_disabled","_updateRadioButtonNames","_markRadiosForCheck","_updateSelectedRadioFromValue","_checkSelectedRadioButton","_touch","_radios","radio","isAlreadySelected","_markForCheck","MatRadioButton","descendants","MatRadioButtonBase","_MatRadioButtonMixinBase","radioGroup","_radioDispatcher","_removeUniqueSelectionListener","listen","newCheckedState","notify","newDisabledState","_isRippleDisabled","disableRipple","_onInputChange","groupValueChanged","[class.mat-radio-checked]","[class.mat-radio-disabled]","[attr.id]","UniqueSelectionDispatcher","ariaDescribedby","MatRadioModule","box-shadow","MAT_DRAWER_DEFAULT_AUTOSIZE","MAT_DRAWER_DEFAULT_AUTOSIZE_FACTORY","_container","_focusTrapFactory","selectedOptionOffset","_countGroupLabelsBeforeOption","options","optionGroups","scrollBuffer","panelHeight","_scrollTop","_calculateOverlayScroll","maxScroll","_offsetY","_calculateOverlayOffsetY","_checkOverlayWithinViewport","MatSelect","itemHeight","_getItemHeight","optionOffsetFromScrollTop","halfOptionHeight","optimalScrollPosition","_getAriaLabel","placeholder","_getAriaLabelledby","_parentFormField","_hasFloatingLabel","_labelId","_getAriaActiveDescendant","panelOpen","activeItem","_calculateOverlayOffsetX","offsetX","overlayRect","overlayDir","viewportSize","getViewportSize","_isRtl","paddingWidth","multiple","SELECT_MULTIPLE_PANEL_PADDING_X","_selectionModel","first","group","leftOverflow","rightOverflow","updatePosition","optionOffsetFromPanelTop","optionHeightAdjustment","_triggerRect","maxOptionsDisplayed","floor","_disableOptionCentering","firstDisplayedIndex","_getItemCount","selectedDisplayIndex","partialItemHeight","topSpaceAvailable","bottomSpaceAvailable","panelHeightTop","abs","totalPanelHeight","panelHeightBottom","_adjustPanelUp","_adjustPanelDown","_transformOrigin","_getOriginBasedOnOption","distanceBelowViewport","distanceAboveViewport","_triggerFontSize","setDescribedByIds","ids","_ariaDescribedby","join","onContainerClick","_panelOpen","empty","[attr.tabindex]","[attr.aria-label]","[attr.aria-labelledby]","[attr.aria-required]","[attr.aria-invalid]","[attr.aria-owns]","[attr.aria-multiselectable]","[attr.aria-describedby]","[attr.aria-activedescendant]","[class.mat-select-disabled]","[class.mat-select-invalid]","[class.mat-select-required]","[class.mat-select-empty]","matSelectAnimations","transformPanel","MatFormFieldControl","MAT_OPTION_PARENT_COMPONENT","NgForm","FormGroupDirective","MatFormField","NgControl","Self","MAT_SELECT_SCROLL_STRATEGY","CdkConnectedOverlay","MatOption","MatOptgroup","customTrigger","MatSelectTrigger","disableOptionCentering","compareWith","errorStateMatcher","sortComparator","selectionChange","MatOptionModule","MatFormFieldModule","MAT_SELECT_SCROLL_STRATEGY_PROVIDER","MatSelectModule","matTooltipAnimations","tooltipState","SCROLL_THROTTLE_MS","MAT_TOOLTIP_SCROLL_STRATEGY","MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY_PROVIDER","MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY","MAT_TOOLTIP_DEFAULT_OPTIONS","MAT_TOOLTIP_DEFAULT_OPTIONS_FACTORY","MatTooltip","_scrollDispatcher","_ariaDescriber","_scrollStrategy","_defaultOptions","showDelay","hideDelay","_message","_manualListeners","IOS","ANDROID","listener","addEventListener","nodeName","webkitUserSelect","userSelect","msUserSelect","draggable","_updatePosition","_tooltipInstance","removeDescription","_isTooltipVisible","_updateTooltipMessage","describe","_tooltipClass","_setTooltipClass","removeEventListener","clear","delay","_detach","_portal","TooltipComponent","afterHidden","isVisible","ESCAPE","_handleTouchend","touchendHideDelay","strategy","flexibleConnectedTo","withTransformOriginOn","withFlexibleDimensions","withViewportMargin","scrollableAncestors","getAncestorScrollContainers","withScrollableContainers","positionChanges","scrollableViewProperties","isOverlayClipped","scrollStrategy","getConfig","_getOrigin","overlay","_getOverlayPosition","withPositions","main","fallback","originPosition","isLtr","originX","originY","getMatTooltipInvalidPositionError","_invertPosition","overlayPosition","overlayX","overlayY","tooltipClass","(touchend)","AriaDescriber","_visibility","_closeOnInteraction","_onHide","_isHandset","_hideTimeoutId","_showTimeoutId","_animationStart","_animationDone","_handleBodyInteraction","aria-hidden","MatTooltipModule","itemsPerPageLabel","nextPageLabel","previousPageLabel","firstPageLabel","lastPageLabel","getRangeLabel","MatPaginatorIntl","MAT_PAGINATOR_INTL_PROVIDER","MAT_PAGINATOR_INTL_PROVIDER_FACTORY","PageEvent","MatPaginatorBase","_MatPaginatorBase","MatPaginator","_pageIndex","_length","_pageSizeOptions","_hidePageSize","_showFirstLastButtons","_intlChanges","_pageSize","_updateDisplayedPageSizeOptions","p","_initialized","nextPage","hasNextPage","previousPageIndex","_emitPageEvent","previousPage","hasPreviousPage","firstPage","lastPage","getNumberOfPages","numberOfPages","_changePageSize","pageSizeOptions","_displayedPageSizeOptions","hidePageSize","showFirstLastButtons","MatPaginatorModule","MatProgressBarBase","_MatProgressBarMixinBase","MAT_PROGRESS_BAR_LOCATION_FACTORY","progressbarId","location","_isNoopAnimation","_bufferValue","_animationEndSubscription","path","pathname","_rectangleFillValue","clamp","emitAnimationEnd","_primaryTransform","_bufferTransform","bufferValue","fromEvent","target","aria-valuemin","aria-valuemax","_attached","MatMenuContent","context","_template","_outlet","DomPortalOutlet","_componentFactoryResolver","_appRef","insertBefore","outletElement","isAttached","ApplicationRef","matMenuAnimations","transformMenu","fadeInItems","MAT_MENU_PANEL","MatMenuItemBase","_MatMenuItemMixinBase","MatMenuItem","_parentMenu","_hovered","_highlighted","_triggersSubmenu","addItem","removeItem","_checkDisabled","_handleMouseEnter","getLabel","textNodeType","TEXT_NODE","output","length_1","[class.mat-menu-item-highlighted]","[class.mat-menu-item-submenu-trigger]","[attr.disabled]","MAT_MENU_DEFAULT_OPTIONS","MAT_MENU_DEFAULT_OPTIONS_FACTORY","MatMenu","_xPosition","xPosition","_yPosition","yPosition","_items","_itemChanges","_tabSubscription","_classList","_panelAnimationState","backdropClass","_overlapTrigger","overlapTrigger","_hasBackdrop","hasBackdrop","throwMatMenuInvalidPositionX","setPositionClasses","throwMatMenuInvalidPositionY","classes","className","withTypeAhead","tabOut","switchMap","items","item","parentMenu","setFocusOrigin","focusFirstItem","lazyContent","onStable","resetActiveItem","setElevation","depth","newElevation","customElevation","c","startsWith","_previousElevation","posX","posY","_startAnimation","_resetAnimation","_onAnimationDone","_isAnimating","activeItemIndex","scrollTop","MAT_MENU_SCROLL_STRATEGY","MAT_MENU_SCROLL_STRATEGY_FACTORY_PROVIDER","MAT_MENU_SCROLL_STRATEGY_FACTORY","MatMenuTrigger","_menuItemInstance","_menuOpen","_closeSubscription","_hoverSubscription","_openedByMouse","menuOpened","onMenuOpen","menuClosed","onMenuClose","triggersSubmenu","menu","_checkMenu","reason","_destroyMenu","_handleHover","_cleanUpSubscriptions","toggleMenu","closeMenu","openMenu","_setPosition","menuData","_menuClosingActions","_initMenu","menuOpen","_resetMenu","_setMenuElevation","_setIsMenuOpen","throwMatMenuMissingError","_getOverlayConfig","_subscribeToPositions","withLockedPosition","connectionPair","originFallbackX","_b","overlayFallbackY","_c","originFallbackY","_d","overlayFallbackX","offsetY","backdrop","parentClose","hover","_handleMousedown","isFakeMousedownFromScreenReader","asapScheduler","aria-haspopup","(mousedown)","_deprecatedMatMenuTriggerFor","MatMenuModule","minWidth","fadeInContent","MAT_SELECT_SCROLL_STRATEGY_PROVIDER_FACTORY","MatSelectChange","MatSelectBase","_defaultErrorStateMatcher","_parentForm","_parentFormGroup","ngControl","_MatSelectMixinBase","mixinErrorState","_scrollStrategyFactory","_multiple","_compareWith","o1","o2","_uid","_destroy","_onChange","_onTouched","_optionIds","_panelDoneAnimatingStream","_positions","_focused","controlType","optionSelectionChanges","defer","option","onSelectionChange","o","valueAccessor","_placeholder","stateChanges","getMatSelectDynamicMultipleError","getMatSelectNonFunctionValueError","_initializeSelection","_id","SelectionModel","distinctUntilChanged","_initKeyManager","added","select","removed","deselect","_resetOptions","updateErrorState","getComputedStyle","_calculateOverlayPosition","_highlightCorrectOption","fontSize","_setSelectionByValue","selectedOptions","viewValue","reverse","_handleOpenKeydown","_handleClosedKeydown","isArrowKey","altKey","manager","A","ctrlKey","hasDeselectedOptions_1","opt","previouslyFocusedIndex","shiftKey","_selectViaInteraction","_onAttached","positionChange","_setPseudoCheckboxPaddingSize","panel","_getPanelTheme","color","pseudoCheckbox","querySelector","isEmpty","getMatSelectNonArrayValueError","currentValue","_selectValue","_sortValues","correspondingOption","error","console","warn","ActiveDescendantKeyManager","withVerticalOrientation","_scrollActiveOptionIntoView","changedOrDestroyed","_onSelect","isUserInput","_setOptionIds","wasSelected","isSelected","_propagateChanges","options_1","fallbackValue","valueToEmit","activeOptionIndex","labelCount","_getOptionScrollPosition","_getOptionIndex","result","current","scrollContainerHeight","MAT_SELECTION_LIST_VALUE_ACCESSOR","MatSelectionList","MatListOption","_MatSelectionListMixinBase","MatLineModule","MatPseudoCheckboxModule","MatList","MatNavList","MatListItem","MatListAvatarCssMatStyler","MatListIconCssMatStyler","MatListSubheaderCssMatStyler","MatDividerModule","MatListModule","[class.mat-list-item-avatar]","[class.mat-list-item-with-avatar]","_icon","MatSelectionListBase","MatListOptionBase","_MatListOptionMixinBase","MatSelectionListChange","selectionList","checkboxPosition","_setSelected","_reportValueChange","MatLineSetter","_lines","_removeOptionFromList","_text","_handleFocus","_setFocusedOption","_handleBlur","tabindex","[class.mat-list-item-disabled]","[attr.aria-selected]","MatLine","skipPredicate","_tempValues","_setOptionsFromValues","_modelChanges","_i","optionIndex","setNextItemActive","previousFocusIndex","_toggleFocusedOption","selectAll","deselectAll","_getSelectedOptionValues","values","Boolean","focusedOption","focusedIndex","hasChanged","_MatListMixinBase","_navList","_isNavList","hasAttribute","MatExpansionPanelTitle","_hideToggle","displayMode","MatAccordion","_headers","_handleHeaderKeydown","_handleHeaderFocus","header","MAT_ACCORDION","MatExpansionPanelHeader","hideToggle","CdkAccordion","CdkAccordionModule","MatExpansionPanel","MatExpansionPanelActionRow","MatExpansionPanelDescription","MatExpansionPanelContent","MatExpansionModule","MatGridTile","_rowspan","_colspan","_setStyle","property","MatGridTileText","MatGridAvatarCssMatStyler","MatGridTileHeaderCssMatStyler","MatGridTileFooterCssMatStyler","TileCoordinator","numColumns","tiles","columnIndex","rowIndex","tracker","fill","tile","_trackTile","lastRowMax","rowCount","gapStartIndex","_findMatchingGap","colspan","_markTilePosition","TilePosition","tileCols","gapEndIndex","_nextRow","_findGapEndIndex","rowspan","row","col","TileStyler","_rows","init","gutterSize","cols","_gutterSize","normalizeUnits","_cols","getBaseTileSize","sizePercent","gutterFraction","getTilePosition","baseSize","calc","getTileSize","span","setStyle","colIndex","percentWidthPerTile","gutterWidthFractionPerTile","setColStyles","setRowStyles","percentWidth","gutterWidth","baseTileWidth","side","getGutterSpan","getTileSpan","tileHeight","getComputedHeight","FixedTileStyler","fixedRowHeight","reset","list","_setListStyle","_tiles","RatioTileStyler","_parseRatio","percentHeightPerTile","rowHeightRatio","baseTileHeight","ratioParts","FitTileStyler","gutterHeightPerTile","MatGridList","_gutter","_rowHeight","_setTileStyler","_checkCols","_checkRowHeight","_layoutTiles","rowHeight","_tileStyler","MatGridListModule","SvgIconConfig","svgElement","url","MatIconRegistry","_httpClient","_sanitizer","_svgIconConfigs","_iconSetConfigs","_cachedIconsByUrl","_inProgressUrlFetches","_fontCssClassesByAlias","_defaultFontSetClass","addSvgIcon","iconName","addSvgIconInNamespace","addSvgIconLiteral","literal","addSvgIconLiteralInNamespace","namespace","_addSvgIconConfig","sanitizedLiteral","sanitize","SecurityContext","HTML","getMatIconFailedToSanitizeLiteralError","_createSvgElementForSingleIcon","addSvgIconSet","addSvgIconSetInNamespace","addSvgIconSetLiteral","addSvgIconSetLiteralInNamespace","_addSvgIconSetConfig","_svgElementFromString","registerFontClassAlias","alias","classNameForFontAlias","setDefaultFontSetClass","getDefaultFontSetClass","getSvgIconFromUrl","safeUrl","RESOURCE_URL","getMatIconFailedToSanitizeUrlError","cachedIcon","cloneSvg","_loadSvgIconFromConfig","tap","svg","getNamedSvgIcon","iconKey","_getSvgFromConfig","iconSetConfigs","_getSvgFromIconSetConfigs","observableThrow","getMatIconNameNotFoundError","namedIcon","_extractIconWithNameFromAnySet","iconSetFetchRequests","iconSetConfig","_loadSvgIconSetFromConfig","catchError","err","forkJoin","foundIcon","_extractSvgIconFromSet","_fetchUrl","svgText","responseText","_setSvgAttributes","iconSet","iconSource","iconElement","cloneNode","removeAttribute","_toSvgElement","str","div","innerHTML","ELEMENT_NODE","setAttribute","getMatIconNoHttpProviderError","inProgressFetch","req","responseType","finalize","share","configNamespace","HttpClient","DomSanitizer","ICON_REGISTRY_PROVIDER","ICON_REGISTRY_PROVIDER_FACTORY","MatIconBase","_MatIconMixinBase","MatIcon","_iconRegistry","ariaHidden","_inline","inline","_fontSet","_cleanupFontValue","_fontIcon","_splitIconName","parts","svgIcon","_setSvgElement","log","_clearSvgElement","_usingFontIcon","_updateFontIconClasses","styleTags","querySelectorAll","layoutElement","childCount","removeChild","elem","fontSetClass","fontSet","_previousFontSetClass","fontIcon","_previousFontIconClass","[class.mat-icon-inline]","MatListBase","MatListItemBase","_MatListItemMixinBase","startAt","minDate","maxDate","dateFilter","selectedChange","yearSelected","monthSelected","_userSelection","monthView","MatMonthView","yearView","MatYearView","multiYearView","MatMultiYearView","MatCalendar","matDatepickerAnimations","fadeInCalendar","datepickerUid","MAT_DATEPICKER_SCROLL_STRATEGY","MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY_PROVIDER","MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY","MatDatepickerContentBase","_MatDatepickerContentMixinBase","MatDatepickerContent","_calendar","focusActiveCell","[@transformPanel]","[class.mat-datepicker-content-touch]","_dateAdapter","createMissingDateImplError","MatDatepicker","_datepickerInput","_getThemePalette","_disabledChange","_inputSubscription","_popupRef","_popupComponentRef","sameDate","_selectedChanged","date","_valueChange","_focusedElementBeforeOpen","touchUi","_openAsDialog","_openAsPopup","openedStream","_dialogRef","_calendarPortal","completeClose","closedStream","_dialog","afterClosed","componentInstance","datepicker","_setColor","_createPopup","keydownEvents","withPush","MatDialog","DateAdapter","calendarHeaderComponent","MAT_DATEPICKER_VALUE_ACCESSOR","MatDatepickerInput","MAT_DATEPICKER_VALIDATORS","NG_VALIDATORS","MatDatepickerInputEvent","targetElement","_dateFormats","_formField","dateChange","dateInput","_cvaOnChange","_validatorOnChange","_datepickerSubscription","_localeSubscription","_parseValidator","_lastValueValid","matDatepickerParse","text","_minValidator","controlValue","_getValidDateOrNull","deserialize","compareDate","matDatepickerMin","actual","_maxValidator","matDatepickerMax","_filterValidator","_dateFilter","matDatepickerFilter","_validator","Validators","compose","localeChanges","_datepicker","_registerInput","isValid","oldDate","_formatValue","registerOnValidatorChange","validate","getPopupConnectionElementRef","getConnectedOverlayOrigin","isAltDownArrow","readOnly","_onInput","parse","format","display","isDateInstance","MAT_INPUT_VALUE_ACCESSOR","[attr.aria-haspopup]","[attr.min]","[attr.max]","[disabled]","(input)","(change)","MAT_DATE_FORMATS","matDatepicker","MatDatepickerToggleIcon","MatDatepickerToggle","defaultTabIndex","parsedTabIndex","_watchStateChanges","datepickerDisabled","inputDisabled","datepickerToggled","[class.mat-accent]","[class.mat-warn]","_customIcon","MatDialogModule","MatCalendarBody","MatCalendarHeader","MatDatepickerIntl","MatDatepickerModule","_inset","MatDivider","[class.mat-divider-vertical]","[class.mat-divider-horizontal]","[class.mat-divider-inset]","matExpansionAnimations","indicatorRotate","expansionHeaderHeight","params","collapsedHeight","expandedHeight","bodyExpansion","_CdkAccordionItem","CdkAccordionItem","uniqueId","accordion","_uniqueSelectionDispatcher","afterExpand","afterCollapse","_inputChanges","_headerId","_hasSpacing","expanded","_getExpandedState","_lazyContent","_bodyAnimation","phaseName","_containsFocus","_body","focusedElement","bodyElement","outputs","[class.mat-expanded]","[class.mat-expansion-panel-spacing]","_parentChangeSubscription","accordionHideToggleChange","_toggle","_isExpanded","_getPanelId","_showToggle","_keydown","[attr.aria-controls]","[@expansionHeight]","cellNumber","activeCell","_focusActiveCell","aria-readonly","todayValue","selectedValue","labelMinRequiredCells","numCols","allowDisabledSelection","cellAspectRatio","selectedValueChange","activeDateChange","firstDayOfWeek","getFirstDayOfWeek","narrowWeekdays","getDayOfWeekNames","longWeekdays","weekdays","long","narrow","_weekdays","concat","_activeDate","today","oldActiveDate","validDate","clampDate","_hasSameMonthAndYear","_init","_selectedDate","_getDateInCurrentMonth","_minDate","_maxDate","_dateSelected","selectedYear","getYear","activeDate","selectedMonth","getMonth","selectedDate","createDate","_handleCalendarBodyKeydown","addCalendarDays","getDate","getNumDaysInMonth","addCalendarYears","addCalendarMonths","_todayDate","_monthLabel","getMonthNames","toLocaleUpperCase","firstOfMonth","_firstWeekOffset","getDayOfWeek","_createWeekCells","_matCalendarBody","daysInMonth","dateNames","getDateNames","_weeks","cell","_shouldEnableDate","dateA11yLabel","MatCalendarCell","d1","d2","_selectedYear","_todayYear","activeYear","activeOffset","_years","year","_createCellForYear","_yearSelected","month","yearsPerPage","_getActiveCell","yearName","getYearName","_shouldEnableYear","firstOfYear","_selectedMonth","_getMonthInCurrentYear","_monthSelected","normalizedDate","_todayMonth","_yearLabel","monthNames","_months","_createCellForMonth","monthName","monthYearA11yLabel","_shouldEnableMonth","_isYearAndMonthAfterMaxDate","_isYearAndMonthBeforeMinDate","maxYear","maxMonth","minYear","minMonth","calendar","currentView","monthYearLabel","switchToMultiYearViewLabel","switchToMonthViewLabel","prevMonthLabel","prevYearLabel","multi-year","prevMultiYearLabel","nextMonthLabel","nextYearLabel","nextMultiYearLabel","currentPeriodClicked","previousClicked","nextClicked","previousEnabled","_isSameView","nextEnabled","date1","date2","_moveFocusOnNextTick","_currentView","startView","view","_getCurrentViewComponent","headerComponent","MatChipList","chips","chip","MatChipListChange","_blur","_chipInput","focused","_markAsTouched","_resetChips","_dropSubscriptions","_listenToChipsFocus","_listenToChipsSelection","_listenToChipsRemoved","_chipFocusSubscription","_chipBlurSubscription","_chipSelectionSubscription","_chipRemoveSubscription","chipSelectionChanges","chipFocusChanges","chipIndex","chipBlurChanges","chipRemoveChanges","_hasFocus","_lastDestroyedChipIndex","_originatesFromChip","currentElement","parentElement","[class.mat-chip-list-disabled]","[class.mat-chip-list-invalid]","[class.mat-chip-list-required]","ariaOrientation","selectable","MatChip","MatChipInput","_addOnBlur","separatorKeyCodes","chipEnd","_chipList","registerInput","_emitChipEnd","addOnBlur","_focus","_isSeparatorKey","separators","[attr.placeholder]","MAT_CHIPS_DEFAULT_OPTIONS","chipList","CHIP_DECLARATIONS","MatChipRemove","MatChipAvatar","MatChipTrailingIcon","ɵ0","useValue","MatChipsModule","MatDialogConfig","maxWidth","ariaDescribedBy","autoFocus","restoreFocus","closeOnNavigation","animationBody","matDialogAnimations","dialogContainer","slideDialog","MatDialogContainer","_elementFocusedBeforeDialogWasOpened","_state","_animationStateChanged","_ariaLabelledBy","throwMatDialogContentAlreadyAttachedError","_savePreviouslyFocusedElement","toFocus","_onAnimationStart","_startExitAnimation","aria-modal","[@dialogContainer]","(@dialogContainer.start)","(@dialogContainer.done)","MatDialogRef","_containerInstance","_afterClosed","_beforeClosed","_locationChanges","_result","dialogResult","detachBackdrop","beforeClosed","_getPositionStrategy","centerVertically","updateSize","afterOpen","beforeClose","MAT_DIALOG_DATA","MAT_DIALOG_DEFAULT_OPTIONS","MAT_DIALOG_SCROLL_STRATEGY","MAT_DIALOG_SCROLL_STRATEGY_PROVIDER","MAT_DIALOG_SCROLL_STRATEGY_PROVIDER_FACTORY","_location","_parentDialog","_overlayContainer","_openDialogsAtThisLevel","_afterAllClosedAtThisLevel","_afterOpenedAtThisLevel","_ariaHiddenElements","afterAllClosed","openDialogs","_afterAllClosed","componentOrTemplateRef","_applyConfigDefaults","getDialogById","_attachDialogContainer","dialogRef","_attachDialogContent","_hideNonDialogContentFromAssistiveTechnology","_removeOpenDialog","closeAll","dialog","dialogConfig","maxHeight","injectionTokens","previousValue","overlayContainer","getContainerElement","siblings","sibling","getAttribute","Location","OverlayContainer","dialogElementUid","MatDialogClose","getClosestDialog","proxiedChange","_matDialogClose","MatDialogTitle","MatDialogContent","MatDialogActions","_CdkTextareaAutosize","CdkTextareaAutosize","MatTextareaAutosize","minRows","maxRows","rows","matAutosizeMinRows","matAutosizeMaxRows","matAutosize","matTextareaAutosize","MAT_INPUT_INVALID_TYPES","MatInputBase","_MatInputMixinBase","MatInput","inputValueAccessor","_autofillMonitor","_isServer","_isNativeSelect","autofilled","_type","_readonly","_neverEmptyInputTypes","t","getSupportedInputTypes","_inputValueAccessor","_previousNativeValue","el","selectionStart","selectionEnd","setSelectionRange","_validateType","_isTextarea","isAutofilled","_dirtyCheckNativeValue","isFocused","readonly","getMatInputUnsupportedTypeError","_isNeverEmpty","_isBadInput","validity","badInput","selectElement","[class.mat-input-server]","[required]","[attr.readonly]","AutofillMonitor","TextFieldModule","MatInputModule","calendarLabel","openCalendarLabel","displayValue","_cellClicked","_isActiveCell","_firstRowOffset","MatCard","MatCardHeader","MatCardTitleGroup","MatCardContent","MatCardTitle","MatCardSubtitle","MatCardActions","MatCardFooter","MatCardSmImage","MatCardMdImage","MatCardLgImage","MatCardImage","MatCardXlImage","MatCardAvatar","MatCardModule","MAT_CHECKBOX_CLICK_ACTION","calculatedRippleRadius","MAT_CHECKBOX_CONTROL_VALUE_ACCESSOR","MatCheckbox","Init","Checked","Unchecked","Indeterminate","TransitionCheckState","MatCheckboxChange","MatCheckboxBase","_MatCheckboxMixinBase","_clickAction","indeterminateChange","_currentAnimationClass","_currentCheckState","_indeterminate","_onInputFocusChange","ngAfterViewChecked","_calculateRippleRadius","changed","_transitionCheckState","_getAriaChecked","indeterminate","newState","oldState","_getAnimationClassForCheckStateTransition","animationClass_1","_focusRipple","fadeOut","ripple","launch","persistent","_onInteractionEvent","animSuffix","rippleWidth","radius","[class.mat-checkbox-indeterminate]","[class.mat-checkbox-checked]","[class.mat-checkbox-disabled]","[class.mat-checkbox-label-before]","MatRipple","MAT_CHECKBOX_REQUIRED_VALIDATOR","MatCheckboxRequiredValidator","[attr.required]","CheckboxRequiredValidator","MatCheckboxModule","MatChipSelectionChange","MatChipBase","_MatChipMixinBase","CHIP_ATTRIBUTE_NAMES","rippleConfig","chipListSelectable","_selectable","_removable","destroyed","_addHostClassName","_chipRipple","RippleRenderer","CHIP_ATTRIBUTE_NAMES_1","attr","tagName","_removeTriggerEvents","selectViaInteraction","toggleSelected","removable","DELETE","BACKSPACE","[class.mat-chip-selected]","[class.mat-chip-with-avatar]","[class.mat-chip-with-trailing-icon]","[class.mat-chip-disabled]","avatar","trailingIcon","removeIcon","_parentChip","MatChipListBase","_MatChipListMixinBase","_tabIndex","_userTabIndex","_updateTabIndex","_updateFocusForDestroyedChips","inputElement","_focusInput","_isInputEmpty","newChipIndex","_clearSelection","correspondingChip","skip","MatButton","stopImmediatePropagation","MatAnchor","MAT_BUTTON_TOGGLE_GROUP_VALUE_ACCESSOR","MatButtonToggleGroup","MatButtonToggleGroupMultiple","_uniqueIdCounter","MatButtonToggleChange","_buttonToggles","_syncButtonToggle","_isSelected","_isPrechecked","_rawValue","[class.mat-button-toggle-vertical]","MatButtonToggle","MatButtonToggleBase","_MatButtonToggleMixinBase","toggleGroup","_isSingleSelector","buttonToggleGroup","_buttonElement","_onButtonClick","newChecked","[class.mat-button-toggle-standalone]","[class.mat-button-toggle-checked]","[class.mat-button-toggle-disabled]","MatButtonToggleModule","align","[class.mat-card-actions-align-end]","_setVisibility","MatAutocomplete","_setScrollTop","_getScrollTop","showPanel","_emitSelectEvent","MatAutocompleteSelectedEvent","optionSelected","MAT_AUTOCOMPLETE_DEFAULT_OPTIONS","autoActiveFirstOption","panelWidth","MatAutocompleteOrigin","MAT_AUTOCOMPLETE_SCROLL_STRATEGY","MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY_PROVIDER","MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY","MAT_AUTOCOMPLETE_VALUE_ACCESSOR","MatAutocompleteTrigger","_zone","_componentDestroyed","_autocompleteDisabled","_manuallyFloatingLabel","_viewportSubscription","_canOpenOnNextFocus","_closeKeyEventStream","_windowBlurHandler","autocompleteAttribute","_overlayAttached","optionSelections","autocomplete","window","_destroyPanel","openPanel","_attachOverlay","_floatLabel","closePanel","_resetLabel","_isOpen","_closingActionsSubscription","_getOutsideClickStream","MatOptionSelectionChange","clickTarget","formField","_setTriggerValue","_resetActiveItem","activeOption","prevActiveItem","TAB","_canOpen","_scrollToOption","_handleInput","_previousValue","shouldAnimate","floatLabel","_animateAndLockLabel","newScrollPosition","_subscribeToClosingActions","firstStable","optionChanges","_positionStrategy","reapplyLastPosition","panelClosingActions","_setValueAndClose","toDisplay","inputValue","_control","_clearPreviousSelectedOption","getMatAutocompleteMissingPanelError","_getPanelWidth","wasOpen","_getConnectedElement","connectedTo","_getHostWidth","[attr.autocomplete]","[attr.aria-autocomplete]","(focusin)","Host","autocompleteDisabled","MatAutocompleteModule","MatBadge","_renderer","_hasContent","_color","_overlap","val","_updateTextContent","_description","newDescription","_updateHostAriaDescription","_hidden","isAbove","isAfter","description","_badgeElement","_createBadgeElement","rootNode","badgeElement","oldDescription","colorPalette","[class.mat-badge-overlap]","[class.mat-badge-above]","[class.mat-badge-below]","[class.mat-badge-before]","[class.mat-badge-after]","[class.mat-badge-small]","[class.mat-badge-medium]","[class.mat-badge-large]","[class.mat-badge-hidden]","Renderer2","overlap","hidden","MatBadgeModule","MAT_BOTTOM_SHEET_DATA","MatBottomSheetConfig","matBottomSheetAnimations","bottomSheetState","COMPLEX","ACCELERATION_CURVE","EXITING","DECELERATION_CURVE","MatBottomSheetContainer","breakpointObserver","bottomSheetConfig","_elementFocusedBeforeOpened","_breakpointSubscription","Medium","Large","XLarge","_toggleClass","isMatched","_validatePortalAttached","_setPanelClass","(@state.start)","FocusTrapFactory","MatBottomSheetModule","MatBottomSheetRef","MatBottomSheet","_parentBottomSheet","_bottomSheetRefAtThisLevel","_openedBottomSheetRef","_attachContainer","ref","bottomSheetRef","scrollStrategies","block","DEFAULT_ROUND_BUTTON_COLOR","BUTTON_HOST_ATTRIBUTES","MatButtonBase","_MatButtonMixinBase","isRoundButton","_hasHostAttributes","isIconButton","BUTTON_HOST_ATTRIBUTES_1","attributes","attribute","_parent","_active","_emitSelectionChangeEvent","setActiveStyles","setInactiveStyles","_mostRecentViewValue","[class.mat-selected]","[class.mat-option-multiple]","[class.mat-active]","[class.mat-option-disabled]","MAT_LABEL_GLOBAL_OPTIONS","MatError","matFormFieldAnimations","transitionMessages","[class.mat-right]","MatHint","MatLabel","MatPlaceholder","MatPrefix","MatSuffix","MatFormFieldBase","_MatFormFieldMixinBase","MAT_FORM_FIELD_DEFAULT_OPTIONS","labelOptions","_defaults","_outlineGapCalculationNeeded","_showAlwaysAnimate","_subscriptAnimationState","_hintLabel","_hintLabelId","_labelOptions","float","_animationsEnabled","appearance","_appearance","updateOutlineGap","_hideRequiredMarker","_processHints","_connectionContainerRef","_validateControlChild","_validatePlaceholders","_syncDescribedByIds","valueChanges","_prefixChildren","_suffixChildren","_hintChildren","_errorChildren","_shouldForward","prop","_hasPlaceholder","_placeholderChild","_hasLabel","_labelChild","_shouldLabelFloat","_canLabelFloat","shouldLabelFloat","_shouldAlwaysFloat","_hideControlPlaceholder","_getDisplayedMessages","errorState","_label","getMatFormFieldPlaceholderConflictError","_validateHints","startHint_1","endHint_1","hint","hintLabel","getMatFormFieldDuplicatedHintError","startHint","endHint","getMatFormFieldMissingControlError","labelEl","documentElement","startWidth","gapWidth","startEls","gapEls","containerStart","_getStartEnd","labelStart","labelWidth","outlineGapPadding","rect","[class.mat-form-field-appearance-standard]","[class.mat-form-field-appearance-fill]","[class.mat-form-field-appearance-outline]","[class.mat-form-field-appearance-legacy]","[class.mat-form-field-invalid]","[class.mat-form-field-can-float]","[class.mat-form-field-should-float]","[class.mat-form-field-hide-placeholder]","[class.mat-form-field-disabled]","[class.mat-form-field-autofilled]","[class.mat-focused]","[class.ng-untouched]","[class.ng-touched]","[class.ng-pristine]","[class.ng-dirty]","[class.ng-valid]","[class.ng-invalid]","[class.ng-pending]","hideRequiredMarker","underlineRef","_inputContainerRef","_uniqueAutocompleteIdCounter","MatAutocompleteBase","_MatAutocompleteMixinBase","MAT_AUTOCOMPLETE_DEFAULT_OPTIONS_FACTORY","_autoActiveFirstOption","__extends","d","__","constructor","extendStatics","MATERIAL_SANITY_CHECKS_FACTORY","base","class_1","defaultColor","_disableRipple","matcher","_pendingSubscribers","Observable","subscriber","_notifySubscriber","MAT_DATE_LOCALE_FACTORY","inject","LOCALE_ID","range","valueFunction","valuesArray","enforceStyleRecalculation","getPropertyValue","distanceToFurthestCorner","distX","distY","sqrt","optionsArray","groups","groupCounter","optionOffset","optionHeight","currentScrollPosition","reposition","MAT_DIALOG_SCROLL_STRATEGY_FACTORY","defaultOptions","provider","exp","match","parentRegistry","httpClient","sanitizer","scrollThrottle","parentIntl","sortOrder","setPrototypeOf","__proto__","__assign","assign","s","n","SHARP_CURVE","MATERIAL_SANITY_CHECKS","_sanityChecksEnabled","_hasDoneGlobalChecks","_hasCheckedHammer","_window","_areChecksEnabled","_checkDoctypeIsDefined","_checkThemeIsPresent","_isTestEnv","doctype","body","testElement","computedStyle","_checkHammerIsAvailable","BidiModule","MAT_DATE_LOCALE","MAT_DATE_LOCALE_PROVIDER","_localeChanges","setLocale","locale","second","firstValid","secondValid","SUPPORTS_INTL_API","Intl","DEFAULT_MONTH_NAMES","short","DEFAULT_DATE_NAMES","DEFAULT_DAY_OF_WEEK_NAMES","ISO_8601_REGEX","NativeDateAdapter","matDateLocale","useUtcForDisplay","_clampDate","getFullYear","getDay","dtf_1","DateTimeFormat","timeZone","_stripDirectionalityCharacters","_format","Date","dtf_2","day","dtf_3","weekday","dtf","_createDateWithOverflow","clone","displayFormat","setFullYear","toDateString","years","months","newDate","days","toIso8601","getUTCFullYear","_2digit","getUTCMonth","getUTCDate","test","isNaN","getTime","NaN","UTC","getHours","getMinutes","getSeconds","getMilliseconds","MAT_NATIVE_DATE_FORMATS","NativeDateModule","MatNativeDateModule","ShowOnDirtyErrorStateMatcher","dirty","submitted","touched","MAT_HAMMER_OPTIONS","ANGULAR_MATERIAL_SUPPORTED_HAMMER_GESTURES","ɵ1","noopHammerInstance","on","off","_hammerOptions","commonModule","events","buildHammer","hammer","Hammer","mc","pan","Pan","swipe","Swipe","press","Press","slide","_createRecognizer","threshold","longpress","time","recognizeWith","inheritances","recognizer","HammerGestureConfig","_setLineClass","count","_resetClasses","_setClass","isAdd","FADING_IN","VISIBLE","FADING_OUT","HIDDEN","RippleState","RippleRef","fadeOutRipple","defaultRippleAnimationConfig","enterDuration","exitDuration","ignoreMouseEventsTimeout","_target","_isPointerDown","_triggerEvents","_activeRipples","_eventOptions","supportsPassiveEventListeners","passive","onMousedown","isFakeMousedown","isSyntheticEvent","_lastTouchStartEvent","now","rippleDisabled","fadeInRipple","onTouchStart","touches","changedTouches","onPointerUp","_containerElement","containerRect","_containerRect","animationConfig","centered","transitionDuration","rippleRef","_mostRecentTransientRipple","runTimeoutOutsideZone","isMostRecentTransientRipple","wasActive","rippleEl","fadeOutAll","_triggerElement","_globalOptions","_rippleRenderer","_setupTriggerEventsIfEnabled","_trigger","configOrX","[class.mat-ripple-unbounded]","unbounded","MatPseudoCheckbox","[class.mat-pseudo-checkbox-indeterminate]","[class.mat-pseudo-checkbox-checked]","[class.mat-pseudo-checkbox-disabled]","MatOptgroupBase","_MatOptgroupMixinBase","_uniqueOptgroupIdCounter","[class.mat-optgroup-disabled]"],"mappings":"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"}