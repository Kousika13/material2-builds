{"version":3,"file":"material.umd.min.js","sources":["../../src/lib/tree/tree.ts","../../src/lib/tree/toggle.ts","../../src/lib/tree/tree-module.ts","../../src/lib/tree/data-source/flat-data-source.ts","../../src/lib/tree/data-source/nested-data-source.ts","../../src/lib/version.ts","../../src/lib/autocomplete/autocomplete-trigger.ts","../../src/lib/core/testing/month-constants.ts","../../src/lib/expansion/expansion-animations.ts","../../src/lib/select/select.ts","../../src/lib/tooltip/tooltip.ts","../../src/lib/tabs/tab-body.ts","../../src/lib/tabs/tab-label-wrapper.ts","../../src/lib/tabs/tab-header.ts","../../src/lib/tabs/tab-group.ts","../../src/lib/tabs/tab-nav-bar/tab-nav-bar.ts","../../src/lib/tabs/tabs-module.ts","../../src/lib/toolbar/toolbar.ts","../../src/lib/toolbar/toolbar-module.ts","../../src/lib/tree/outlet.ts","../../src/lib/tree/node.ts","../../src/lib/tree/padding.ts","../../src/lib/stepper/step-header.ts","../../src/lib/stepper/stepper-animations.ts","../../src/lib/stepper/stepper-icon.ts","../../src/lib/stepper/stepper.ts","../../src/lib/stepper/stepper-button.ts","../../src/lib/stepper/stepper-module.ts","../../src/lib/table/table.ts","../../src/lib/table/cell.ts","../../src/lib/table/row.ts","../../src/lib/table/table-module.ts","../../src/lib/table/table-data-source.ts","../../src/lib/tabs/ink-bar.ts","../../src/lib/tabs/tab-content.ts","../../src/lib/tabs/tab-label.ts","../../src/lib/tabs/tab.ts","../../src/lib/tabs/tabs-animations.ts","../../src/lib/slider/slider.ts","../../src/lib/slider/slider-module.ts","../../src/lib/snack-bar/snack-bar-ref.ts","../../src/lib/snack-bar/snack-bar-config.ts","../../src/lib/snack-bar/simple-snack-bar.ts","../../src/lib/snack-bar/snack-bar-animations.ts","../../src/lib/snack-bar/snack-bar-container.ts","../../src/lib/snack-bar/snack-bar-module.ts","../../src/lib/snack-bar/snack-bar.ts","../../src/lib/sort/sort.ts","../../src/lib/sort/sort-animations.ts","../../src/lib/sort/sort-header-intl.ts","../../src/lib/sort/sort-header.ts","../../src/lib/sort/sort-module.ts","../../src/lib/stepper/step-label.ts","../../src/lib/stepper/stepper-intl.ts","../../src/lib/sidenav/drawer.ts","../../src/lib/sidenav/sidenav.ts","../../src/lib/sidenav/sidenav-module.ts","../../src/lib/slide-toggle/slide-toggle-config.ts","../../src/lib/slide-toggle/slide-toggle.ts","../../src/lib/slide-toggle/slide-toggle-module.ts","../../src/lib/progress-spinner/progress-spinner.ts","../../src/lib/progress-spinner/progress-spinner-module.ts","../../src/lib/radio/radio.ts","../../src/lib/radio/radio-module.ts","../../src/lib/sidenav/drawer-animations.ts","../../src/lib/tooltip/tooltip-module.ts","../../src/lib/paginator/paginator-intl.ts","../../src/lib/paginator/paginator.ts","../../src/lib/paginator/paginator-module.ts","../../src/lib/progress-bar/progress-bar.ts","../../src/lib/progress-bar/progress-bar-module.ts","../../src/lib/menu/menu-trigger.ts","../../src/lib/menu/menu-module.ts","../../src/lib/select/select-animations.ts","../../src/lib/select/select-module.ts","../../src/lib/tooltip/tooltip-animations.ts","../../src/lib/list/selection-list.ts","../../src/lib/list/list-module.ts","../../src/lib/menu/menu-content.ts","../../src/lib/menu/menu-animations.ts","../../src/lib/menu/menu-panel.ts","../../src/lib/menu/menu-item.ts","../../src/lib/menu/menu-directive.ts","../../src/lib/list/list.ts","../../src/lib/grid-list/grid-tile.ts","../../src/lib/grid-list/tile-coordinator.ts","../../src/lib/grid-list/tile-styler.ts","../../src/lib/grid-list/grid-list.ts","../../src/lib/grid-list/grid-list-module.ts","../../src/lib/icon/icon-registry.ts","../../src/lib/icon/icon.ts","../../src/lib/icon/icon-module.ts","../../src/lib/datepicker/datepicker.ts","../../src/lib/datepicker/datepicker-input.ts","../../src/lib/datepicker/datepicker-toggle.ts","../../src/lib/datepicker/datepicker-module.ts","../../src/lib/divider/divider.ts","../../src/lib/divider/divider-module.ts","../../src/lib/expansion/accordion-base.ts","../../src/lib/expansion/expansion-panel-content.ts","../../src/lib/expansion/expansion-panel.ts","../../src/lib/expansion/expansion-panel-header.ts","../../src/lib/expansion/accordion.ts","../../src/lib/expansion/expansion-module.ts","../../src/lib/grid-list/grid-list-base.ts","../../src/lib/datepicker/calendar-body.ts","../../src/lib/datepicker/month-view.ts","../../src/lib/datepicker/multi-year-view.ts","../../src/lib/datepicker/year-view.ts","../../src/lib/datepicker/calendar.ts","../../src/lib/datepicker/datepicker-animations.ts","../../src/lib/chips/chip-list.ts","../../src/lib/chips/chip-input.ts","../../src/lib/chips/chips-module.ts","../../src/lib/dialog/dialog-config.ts","../../src/lib/dialog/dialog-animations.ts","../../src/lib/dialog/dialog-container.ts","../../src/lib/dialog/dialog-ref.ts","../../src/lib/dialog/dialog.ts","../../src/lib/dialog/dialog-content-directives.ts","../../src/lib/dialog/dialog-module.ts","../../src/lib/input/autosize.ts","../../src/lib/input/input-value-accessor.ts","../../src/lib/input/input.ts","../../src/lib/input/input-module.ts","../../src/lib/datepicker/datepicker-intl.ts","../../src/lib/checkbox/checkbox.ts","../../src/lib/checkbox/checkbox-required-validator.ts","../../src/lib/checkbox/checkbox-module.ts","../../src/lib/chips/chip.ts","../../src/lib/chips/chip-default-options.ts","../../src/lib/button/button.ts","../../src/lib/button/button-module.ts","../../src/lib/button-toggle/button-toggle.ts","../../src/lib/button-toggle/button-toggle-module.ts","../../src/lib/card/card.ts","../../src/lib/card/card-module.ts","../../src/lib/checkbox/checkbox-config.ts","../../src/lib/autocomplete/autocomplete.ts","../../src/lib/autocomplete/autocomplete-origin.ts","../../src/lib/autocomplete/autocomplete-module.ts","../../src/lib/badge/badge.ts","../../src/lib/badge/badge-module.ts","../../src/lib/bottom-sheet/bottom-sheet-config.ts","../../src/lib/bottom-sheet/bottom-sheet-animations.ts","../../src/lib/bottom-sheet/bottom-sheet-container.ts","../../src/lib/bottom-sheet/bottom-sheet-module.ts","../../src/lib/bottom-sheet/bottom-sheet-ref.ts","../../src/lib/bottom-sheet/bottom-sheet.ts","../../src/lib/core/option/option.ts","../../src/lib/core/option/index.ts","../../src/lib/core/label/label-options.ts","../../src/lib/form-field/error.ts","../../src/lib/form-field/form-field-animations.ts","../../src/lib/form-field/form-field-control.ts","../../src/lib/form-field/hint.ts","../../src/lib/form-field/label.ts","../../src/lib/form-field/placeholder.ts","../../src/lib/form-field/prefix.ts","../../src/lib/form-field/suffix.ts","../../src/lib/form-field/form-field.ts","../../src/lib/form-field/form-field-module.ts","../../node_modules/tslib/tslib.es6.js","../../src/lib/core/common-behaviors/common-module.ts","../../src/lib/core/common-behaviors/disabled.ts","../../src/lib/core/common-behaviors/color.ts","../../src/lib/core/common-behaviors/disable-ripple.ts","../../src/lib/core/common-behaviors/tabindex.ts","../../src/lib/core/common-behaviors/error-state.ts","../../src/lib/core/common-behaviors/initialized.ts","../../src/lib/core/datetime/date-adapter.ts","../../src/lib/core/datetime/native-date-adapter.ts","../../src/lib/core/line/line.ts","../../src/lib/core/ripple/ripple-renderer.ts","../../src/lib/form-field/form-field-errors.ts","../../src/lib/input/input-errors.ts","../../src/lib/datepicker/datepicker-errors.ts","../../src/lib/menu/menu-errors.ts","../../src/lib/select/select-errors.ts","../../src/lib/sort/sort-errors.ts","../../src/lib/core/animation/animation.ts","../../src/lib/core/datetime/date-formats.ts","../../src/lib/core/datetime/native-date-formats.ts","../../src/lib/core/datetime/index.ts","../../src/lib/core/error/error-options.ts","../../src/lib/core/gestures/gesture-config.ts","../../src/lib/core/ripple/ripple-ref.ts","../../src/lib/core/ripple/ripple.ts","../../src/lib/core/ripple/index.ts","../../src/lib/core/selection/pseudo-checkbox/pseudo-checkbox.ts","../../src/lib/core/selection/index.ts","../../src/lib/core/option/optgroup.ts"],"sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CdkTree} from '@angular/cdk/tree';\nimport {ChangeDetectionStrategy, Component, ViewChild, ViewEncapsulation} from '@angular/core';\nimport {MatTreeNodeOutlet} from './outlet';\n\n/**\n * Wrapper for the CdkTable with Material design styles.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-tree',\n  exportAs: 'matTree',\n  template: `<ng-container matTreeNodeOutlet></ng-container>`,\n  host: {\n    'class': 'mat-tree',\n    'role': 'tree',\n  },\n  styleUrls: ['tree.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  providers: [{provide: CdkTree, useExisting: MatTree}]\n})\nexport class MatTree<T> extends CdkTree<T> {\n  // Outlets within the tree's template where the dataNodes will be inserted.\n  @ViewChild(MatTreeNodeOutlet) _nodeOutlet: MatTreeNodeOutlet;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CdkTreeNodeToggle} from '@angular/cdk/tree';\nimport {Directive, Input} from '@angular/core';\n\n/**\n * Wrapper for the CdkTree's toggle with Material design styles.\n */\n@Directive({\n  selector: '[matTreeNodeToggle]',\n  host: {\n    '(click)': '_toggle($event)',\n  },\n  providers: [{provide: CdkTreeNodeToggle, useExisting: MatTreeNodeToggle}]\n})\nexport class MatTreeNodeToggle<T> extends CdkTreeNodeToggle<T> {\n  @Input('matTreeNodeToggleRecursive') recursive: boolean = false;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\n\nimport {CdkTreeModule} from '@angular/cdk/tree';\nimport {CommonModule} from '@angular/common';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatNestedTreeNode, MatTreeNodeDef, MatTreeNode} from './node';\nimport {MatTree} from './tree';\nimport {MatTreeNodeToggle} from './toggle';\nimport {MatTreeNodeOutlet} from './outlet';\nimport {MatTreeNodePadding} from './padding';\n\nconst MAT_TREE_DIRECTIVES = [\n  MatNestedTreeNode,\n  MatTreeNodeDef,\n  MatTreeNodePadding,\n  MatTreeNodeToggle,\n  MatTree,\n  MatTreeNode,\n  MatTreeNodeOutlet\n];\n\n@NgModule({\n  imports: [CdkTreeModule, CommonModule, MatCommonModule],\n  exports: MAT_TREE_DIRECTIVES,\n  declarations: MAT_TREE_DIRECTIVES,\n})\nexport class MatTreeModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CollectionViewer, DataSource} from '@angular/cdk/collections';\nimport {FlatTreeControl, TreeControl} from '@angular/cdk/tree';\nimport {BehaviorSubject, merge, Observable} from 'rxjs';\nimport {map, take} from 'rxjs/operators';\n\n/**\n * Tree flattener to convert a normal type of node to node with children & level information.\n * Transform nested nodes of type `T` to flattened nodes of type `F`.\n *\n * For example, the input data of type `T` is nested, and contains its children data:\n *   SomeNode: {\n *     key: 'Fruits',\n *     children: [\n *       NodeOne: {\n *         key: 'Apple',\n *       },\n *       NodeTwo: {\n *        key: 'Pear',\n *      }\n *    ]\n *  }\n *  After flattener flatten the tree, the structure will become\n *  SomeNode: {\n *    key: 'Fruits',\n *    expandable: true,\n *    level: 1\n *  },\n *  NodeOne: {\n *    key: 'Apple',\n *    expandable: false,\n *    level: 2\n *  },\n *  NodeTwo: {\n *   key: 'Pear',\n *   expandable: false,\n *   level: 2\n * }\n * and the output flattened type is `F` with additional information.\n */\nexport class MatTreeFlattener<T, F> {\n\n  constructor(public transformFunction: (node: T, level: number) => F,\n              public getLevel: (node: F) => number,\n              public isExpandable: (node: F) => boolean,\n              public getChildren: (node: T) => Observable<T[]> | T[]) {}\n\n  _flattenNode(node: T, level: number,\n               resultNodes: F[], parentMap: boolean[]): F[] {\n    const flatNode = this.transformFunction(node, level);\n    resultNodes.push(flatNode);\n\n    if (this.isExpandable(flatNode)) {\n      const childrenNodes = this.getChildren(node);\n      if (Array.isArray(childrenNodes)) {\n        this._flattenChildren(childrenNodes, level, resultNodes, parentMap);\n      } else {\n        childrenNodes.pipe(take(1)).subscribe(children => {\n          this._flattenChildren(children, level, resultNodes, parentMap);\n        });\n      }\n    }\n    return resultNodes;\n  }\n\n  _flattenChildren(children: T[], level: number,\n                   resultNodes: F[], parentMap: boolean[]): void {\n    children.forEach((child, index) => {\n      let childParentMap: boolean[] = parentMap.slice();\n      childParentMap.push(index != children.length - 1);\n      this._flattenNode(child, level + 1, resultNodes, childParentMap);\n    });\n  }\n\n  /**\n   * Flatten a list of node type T to flattened version of node F.\n   * Please note that type T may be nested, and the length of `structuredData` may be different\n   * from that of returned list `F[]`.\n   */\n  flattenNodes(structuredData: T[]): F[] {\n    let resultNodes: F[] = [];\n    structuredData.forEach(node => this._flattenNode(node, 0, resultNodes, []));\n    return resultNodes;\n  }\n\n  /**\n   * Expand flattened node with current expansion status.\n   * The returned list may have different length.\n   */\n  expandFlattenedNodes(nodes: F[], treeControl: TreeControl<F>): F[] {\n    let results: F[] = [];\n    let currentExpand: boolean[] = [];\n    currentExpand[0] = true;\n\n    nodes.forEach(node => {\n      let expand = true;\n      for (let i = 0; i <= this.getLevel(node); i++) {\n        expand = expand && currentExpand[i];\n      }\n      if (expand) {\n        results.push(node);\n      }\n      if (this.isExpandable(node)) {\n        currentExpand[this.getLevel(node) + 1] = treeControl.isExpanded(node);\n      }\n    });\n    return results;\n  }\n}\n\n\n/**\n * Data source for flat tree.\n * The data source need to handle expansion/collapsion of the tree node and change the data feed\n * to `MatTree`.\n * The nested tree nodes of type `T` are flattened through `MatTreeFlattener`, and converted\n * to type `F` for `MatTree` to consume.\n */\nexport class MatTreeFlatDataSource<T, F> extends DataSource<F> {\n  _flattenedData = new BehaviorSubject<F[]>([]);\n\n  _expandedData = new BehaviorSubject<F[]>([]);\n\n  _data: BehaviorSubject<T[]>;\n  get data() { return this._data.value; }\n  set data(value: T[]) {\n    this._data.next(value);\n    this._flattenedData.next(this.treeFlattener.flattenNodes(this.data));\n    this.treeControl.dataNodes = this._flattenedData.value;\n  }\n\n  constructor(private treeControl: FlatTreeControl<F>,\n              private treeFlattener: MatTreeFlattener<T, F>,\n              initialData: T[] = []) {\n    super();\n    this._data = new BehaviorSubject<T[]>(initialData);\n  }\n\n  connect(collectionViewer: CollectionViewer): Observable<F[]> {\n    const changes = [\n      collectionViewer.viewChange,\n      this.treeControl.expansionModel.onChange,\n      this._flattenedData\n    ];\n    return merge(...changes).pipe(map(() => {\n      this._expandedData.next(\n        this.treeFlattener.expandFlattenedNodes(this._flattenedData.value, this.treeControl));\n      return this._expandedData.value;\n    }));\n  }\n\n  disconnect() {\n    // no op\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CollectionViewer, DataSource} from '@angular/cdk/collections';\nimport {BehaviorSubject, merge, Observable} from 'rxjs';\nimport {map} from 'rxjs/operators';\n\n\n/**\n * Data source for nested tree.\n *\n * The data source for nested tree doesn't have to consider node flattener, or the way to expand\n * or collapse. The expansion/collapsion will be handled by TreeControl and each non-leaf node.\n */\nexport class MatTreeNestedDataSource<T> extends DataSource<T> {\n  _data = new BehaviorSubject<T[]>([]);\n\n  /**\n   * Data for the nested tree\n   */\n  get data() { return this._data.value; }\n  set data(value: T[]) { this._data.next(value); }\n\n  connect(collectionViewer: CollectionViewer): Observable<T[]> {\n    return merge(...[collectionViewer.viewChange, this._data])\n      .pipe(map(() => {\n        return this.data;\n      }));\n  }\n\n  disconnect() {\n    // no op\n  }\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Version} from '@angular/core';\n\n/** Current version of Angular Material. */\nexport const VERSION = new Version('7.0.4-f229f9e');\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {Directionality} from '@angular/cdk/bidi';\nimport {DOWN_ARROW, ENTER, ESCAPE, TAB, UP_ARROW} from '@angular/cdk/keycodes';\nimport {\n  FlexibleConnectedPositionStrategy,\n  Overlay,\n  OverlayConfig,\n  OverlayRef,\n  PositionStrategy,\n  ScrollStrategy,\n} from '@angular/cdk/overlay';\nimport {TemplatePortal} from '@angular/cdk/portal';\nimport {DOCUMENT} from '@angular/common';\nimport {filter, take, switchMap, delay, tap, map} from 'rxjs/operators';\nimport {\n  ChangeDetectorRef,\n  Directive,\n  ElementRef,\n  forwardRef,\n  Host,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  ViewContainerRef,\n} from '@angular/core';\nimport {ViewportRuler} from '@angular/cdk/scrolling';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {\n  _countGroupLabelsBeforeOption,\n  _getOptionScrollPosition,\n  MatOption,\n  MatOptionSelectionChange,\n} from '@angular/material/core';\nimport {MatFormField} from '@angular/material/form-field';\nimport {Subscription, defer, fromEvent, merge, of as observableOf, Subject, Observable} from 'rxjs';\nimport {MatAutocomplete} from './autocomplete';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {MatAutocompleteOrigin} from './autocomplete-origin';\n\n\n/**\n * The following style constants are necessary to save here in order\n * to properly calculate the scrollTop of the panel. Because we are not\n * actually focusing the active item, scroll must be handled manually.\n */\n\n/** The height of each autocomplete option. */\nexport const AUTOCOMPLETE_OPTION_HEIGHT = 48;\n\n/** The total height of the autocomplete panel. */\nexport const AUTOCOMPLETE_PANEL_HEIGHT = 256;\n\n/** Injection token that determines the scroll handling while the autocomplete panel is open. */\nexport const MAT_AUTOCOMPLETE_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mat-autocomplete-scroll-strategy');\n\n/** @docs-private */\nexport function MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY(overlay: Overlay): () => ScrollStrategy {\n  return () => overlay.scrollStrategies.reposition();\n}\n\n/** @docs-private */\nexport const MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY_PROVIDER = {\n  provide: MAT_AUTOCOMPLETE_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY,\n};\n\n/**\n * Provider that allows the autocomplete to register as a ControlValueAccessor.\n * @docs-private\n */\nexport const MAT_AUTOCOMPLETE_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatAutocompleteTrigger),\n  multi: true\n};\n\n/**\n * Creates an error to be thrown when attempting to use an autocomplete trigger without a panel.\n * @docs-private\n */\nexport function getMatAutocompleteMissingPanelError(): Error {\n  return Error('Attempting to open an undefined instance of `mat-autocomplete`. ' +\n               'Make sure that the id passed to the `matAutocomplete` is correct and that ' +\n               'you\\'re attempting to open it after the ngAfterContentInit hook.');\n}\n\n\n@Directive({\n  selector: `input[matAutocomplete], textarea[matAutocomplete]`,\n  host: {\n    '[attr.autocomplete]': 'autocompleteAttribute',\n    '[attr.role]': 'autocompleteDisabled ? null : \"combobox\"',\n    '[attr.aria-autocomplete]': 'autocompleteDisabled ? null : \"list\"',\n    '[attr.aria-activedescendant]': 'activeOption?.id',\n    '[attr.aria-expanded]': 'autocompleteDisabled ? null : panelOpen.toString()',\n    '[attr.aria-owns]': '(autocompleteDisabled || !panelOpen) ? null : autocomplete?.id',\n    // Note: we use `focusin`, as opposed to `focus`, in order to open the panel\n    // a little earlier. This avoids issues where IE delays the focusing of the input.\n    '(focusin)': '_handleFocus()',\n    '(blur)': '_onTouched()',\n    '(input)': '_handleInput($event)',\n    '(keydown)': '_handleKeydown($event)',\n  },\n  exportAs: 'matAutocompleteTrigger',\n  providers: [MAT_AUTOCOMPLETE_VALUE_ACCESSOR]\n})\nexport class MatAutocompleteTrigger implements ControlValueAccessor, OnDestroy {\n  private _overlayRef: OverlayRef | null;\n  private _portal: TemplatePortal;\n  private _componentDestroyed = false;\n  private _autocompleteDisabled = false;\n  private _scrollStrategy: () => ScrollStrategy;\n\n  /** Old value of the native input. Used to work around issues with the `input` event on IE. */\n  private _previousValue: string | number | null;\n\n  /** Strategy that is used to position the panel. */\n  private _positionStrategy: FlexibleConnectedPositionStrategy;\n\n  /** Whether or not the label state is being overridden. */\n  private _manuallyFloatingLabel = false;\n\n  /** The subscription for closing actions (some are bound to document). */\n  private _closingActionsSubscription: Subscription;\n\n  /** Subscription to viewport size changes. */\n  private _viewportSubscription = Subscription.EMPTY;\n\n  /**\n   * Whether the autocomplete can open the next time it is focused. Used to prevent a focused,\n   * closed autocomplete from being reopened if the user switches to another browser tab and then\n   * comes back.\n   */\n  private _canOpenOnNextFocus = true;\n\n  /** Stream of keyboard events that can close the panel. */\n  private readonly _closeKeyEventStream = new Subject<void>();\n\n  /**\n   * Event handler for when the window is blurred. Needs to be an\n   * arrow function in order to preserve the context.\n   */\n  private _windowBlurHandler = () => {\n    // If the user blurred the window while the autocomplete is focused, it means that it'll be\n    // refocused when they come back. In this case we want to skip the first focus event, if the\n    // pane was closed, in order to avoid reopening it unintentionally.\n    this._canOpenOnNextFocus =\n        document.activeElement !== this._element.nativeElement || this.panelOpen;\n  }\n\n  /** `View -> model callback called when value changes` */\n  _onChange: (value: any) => void = () => {};\n\n  /** `View -> model callback called when autocomplete has been touched` */\n  _onTouched = () => {};\n\n  /** The autocomplete panel to be attached to this trigger. */\n  @Input('matAutocomplete') autocomplete: MatAutocomplete;\n\n  /**\n   * Reference relative to which to position the autocomplete panel.\n   * Defaults to the autocomplete trigger element.\n   */\n  @Input('matAutocompleteConnectedTo') connectedTo: MatAutocompleteOrigin;\n\n  /**\n   * `autocomplete` attribute to be set on the input element.\n   * @docs-private\n   */\n  @Input('autocomplete') autocompleteAttribute: string = 'off';\n\n  /**\n   * Whether the autocomplete is disabled. When disabled, the element will\n   * act as a regular input and the user won't be able to open the panel.\n   */\n  @Input('matAutocompleteDisabled')\n  get autocompleteDisabled(): boolean { return this._autocompleteDisabled; }\n  set autocompleteDisabled(value: boolean) {\n    this._autocompleteDisabled = coerceBooleanProperty(value);\n  }\n\n  constructor(private _element: ElementRef<HTMLInputElement>, private _overlay: Overlay,\n              private _viewContainerRef: ViewContainerRef,\n              private _zone: NgZone,\n              private _changeDetectorRef: ChangeDetectorRef,\n              @Inject(MAT_AUTOCOMPLETE_SCROLL_STRATEGY) scrollStrategy: any,\n              @Optional() private _dir: Directionality,\n              @Optional() @Host() private _formField: MatFormField,\n              @Optional() @Inject(DOCUMENT) private _document: any,\n              // @breaking-change 8.0.0 Make `_viewportRuler` required.\n              private _viewportRuler?: ViewportRuler) {\n\n    if (typeof window !== 'undefined') {\n      _zone.runOutsideAngular(() => {\n        window.addEventListener('blur', this._windowBlurHandler);\n      });\n    }\n\n    this._scrollStrategy = scrollStrategy;\n  }\n\n  ngOnDestroy() {\n    if (typeof window !== 'undefined') {\n      window.removeEventListener('blur', this._windowBlurHandler);\n    }\n\n    this._viewportSubscription.unsubscribe();\n    this._componentDestroyed = true;\n    this._destroyPanel();\n    this._closeKeyEventStream.complete();\n  }\n\n  /** Whether or not the autocomplete panel is open. */\n  get panelOpen(): boolean {\n    return this._overlayAttached && this.autocomplete.showPanel;\n  }\n  private _overlayAttached: boolean = false;\n\n  /** Opens the autocomplete suggestion panel. */\n  openPanel(): void {\n    this._attachOverlay();\n    this._floatLabel();\n  }\n\n  /** Closes the autocomplete suggestion panel. */\n  closePanel(): void {\n    this._resetLabel();\n\n    if (!this._overlayAttached) {\n      return;\n    }\n\n    if (this.panelOpen) {\n      // Only emit if the panel was visible.\n      this.autocomplete.closed.emit();\n    }\n\n    this.autocomplete._isOpen = this._overlayAttached = false;\n\n    if (this._overlayRef && this._overlayRef.hasAttached()) {\n      this._overlayRef.detach();\n      this._closingActionsSubscription.unsubscribe();\n    }\n\n    // Note that in some cases this can end up being called after the component is destroyed.\n    // Add a check to ensure that we don't try to run change detection on a destroyed view.\n    if (!this._componentDestroyed) {\n      // We need to trigger change detection manually, because\n      // `fromEvent` doesn't seem to do it at the proper time.\n      // This ensures that the label is reset when the\n      // user clicks outside.\n      this._changeDetectorRef.detectChanges();\n    }\n  }\n\n  /**\n   * Updates the position of the autocomplete suggestion panel to ensure that it fits all options\n   * within the viewport.\n   */\n  updatePosition(): void {\n    if (this._overlayAttached) {\n      this._overlayRef!.updatePosition();\n    }\n  }\n\n  /**\n   * A stream of actions that should close the autocomplete panel, including\n   * when an option is selected, on blur, and when TAB is pressed.\n   */\n  get panelClosingActions(): Observable<MatOptionSelectionChange|null> {\n    return merge(\n      this.optionSelections,\n      this.autocomplete._keyManager.tabOut.pipe(filter(() => this._overlayAttached)),\n      this._closeKeyEventStream,\n      this._getOutsideClickStream(),\n      this._overlayRef ?\n          this._overlayRef.detachments().pipe(filter(() => this._overlayAttached)) :\n          observableOf()\n    ).pipe(\n      // Normalize the output so we return a consistent type.\n      map(event => event instanceof MatOptionSelectionChange ? event : null)\n    );\n  }\n\n  /** Stream of autocomplete option selections. */\n  readonly optionSelections: Observable<MatOptionSelectionChange> = defer(() => {\n    if (this.autocomplete && this.autocomplete.options) {\n     return merge(...this.autocomplete.options.map(option => option.onSelectionChange));\n    }\n\n    // If there are any subscribers before `ngAfterViewInit`, the `autocomplete` will be undefined.\n    // Return a stream that we'll replace with the real one once everything is in place.\n    return this._zone.onStable\n        .asObservable()\n        .pipe(take(1), switchMap(() => this.optionSelections));\n  });\n\n  /** The currently active option, coerced to MatOption type. */\n  get activeOption(): MatOption | null {\n    if (this.autocomplete && this.autocomplete._keyManager) {\n      return this.autocomplete._keyManager.activeItem;\n    }\n\n    return null;\n  }\n\n  /** Stream of clicks outside of the autocomplete panel. */\n  private _getOutsideClickStream(): Observable<any> {\n    if (!this._document) {\n      return observableOf(null);\n    }\n\n    return merge(\n      fromEvent<MouseEvent>(this._document, 'click'),\n      fromEvent<TouchEvent>(this._document, 'touchend')\n    )\n    .pipe(filter(event => {\n      const clickTarget = event.target as HTMLElement;\n      const formField = this._formField ?\n          this._formField._elementRef.nativeElement : null;\n\n      return this._overlayAttached &&\n              clickTarget !== this._element.nativeElement &&\n              (!formField || !formField.contains(clickTarget)) &&\n              (!!this._overlayRef && !this._overlayRef.overlayElement.contains(clickTarget));\n    }));\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  writeValue(value: any): void {\n    Promise.resolve(null).then(() => this._setTriggerValue(value));\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnChange(fn: (value: any) => {}): void {\n    this._onChange = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnTouched(fn: () => {}) {\n    this._onTouched = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  setDisabledState(isDisabled: boolean) {\n    this._element.nativeElement.disabled = isDisabled;\n  }\n\n  _handleKeydown(event: KeyboardEvent): void {\n    const keyCode = event.keyCode;\n\n    // Prevent the default action on all escape key presses. This is here primarily to bring IE\n    // in line with other browsers. By default, pressing escape on IE will cause it to revert\n    // the input value to the one that it had on focus, however it won't dispatch any events\n    // which means that the model value will be out of sync with the view.\n    if (keyCode === ESCAPE) {\n      event.preventDefault();\n    }\n\n    if (this.activeOption && keyCode === ENTER && this.panelOpen) {\n      this.activeOption._selectViaInteraction();\n      this._resetActiveItem();\n      event.preventDefault();\n    } else if (this.autocomplete) {\n      const prevActiveItem = this.autocomplete._keyManager.activeItem;\n      const isArrowKey = keyCode === UP_ARROW || keyCode === DOWN_ARROW;\n\n      if (this.panelOpen || keyCode === TAB) {\n        this.autocomplete._keyManager.onKeydown(event);\n      } else if (isArrowKey && this._canOpen()) {\n        this.openPanel();\n      }\n\n      if (isArrowKey || this.autocomplete._keyManager.activeItem !== prevActiveItem) {\n        this._scrollToOption();\n      }\n    }\n  }\n\n  _handleInput(event: KeyboardEvent): void {\n    let target = event.target as HTMLInputElement;\n    let value: number | string | null = target.value;\n\n    // Based on `NumberValueAccessor` from forms.\n    if (target.type === 'number') {\n      value = value == '' ? null : parseFloat(value);\n    }\n\n    // If the input has a placeholder, IE will fire the `input` event on page load,\n    // focus and blur, in addition to when the user actually changed the value. To\n    // filter out all of the extra events, we save the value on focus and between\n    // `input` events, and we check whether it changed.\n    // See: https://connect.microsoft.com/IE/feedback/details/885747/\n    if (this._previousValue !== value) {\n      this._previousValue = value;\n      this._onChange(value);\n\n      if (this._canOpen() && document.activeElement === event.target) {\n        this.openPanel();\n      }\n    }\n  }\n\n  _handleFocus(): void {\n    if (!this._canOpenOnNextFocus) {\n      this._canOpenOnNextFocus = true;\n    } else if (this._canOpen()) {\n      this._previousValue = this._element.nativeElement.value;\n      this._attachOverlay();\n      this._floatLabel(true);\n    }\n  }\n\n  /**\n   * In \"auto\" mode, the label will animate down as soon as focus is lost.\n   * This causes the value to jump when selecting an option with the mouse.\n   * This method manually floats the label until the panel can be closed.\n   * @param shouldAnimate Whether the label should be animated when it is floated.\n   */\n  private _floatLabel(shouldAnimate = false): void {\n    if (this._formField && this._formField.floatLabel === 'auto') {\n      if (shouldAnimate) {\n        this._formField._animateAndLockLabel();\n      } else {\n        this._formField.floatLabel = 'always';\n      }\n\n      this._manuallyFloatingLabel = true;\n    }\n  }\n\n  /** If the label has been manually elevated, return it to its normal state. */\n  private _resetLabel(): void  {\n    if (this._manuallyFloatingLabel) {\n      this._formField.floatLabel = 'auto';\n      this._manuallyFloatingLabel = false;\n    }\n  }\n\n  /**\n   * Given that we are not actually focusing active options, we must manually adjust scroll\n   * to reveal options below the fold. First, we find the offset of the option from the top\n   * of the panel. If that offset is below the fold, the new scrollTop will be the offset -\n   * the panel height + the option height, so the active option will be just visible at the\n   * bottom of the panel. If that offset is above the top of the visible panel, the new scrollTop\n   * will become the offset. If that offset is visible within the panel already, the scrollTop is\n   * not adjusted.\n   */\n  private _scrollToOption(): void {\n    const index = this.autocomplete._keyManager.activeItemIndex || 0;\n    const labelCount = _countGroupLabelsBeforeOption(index,\n        this.autocomplete.options, this.autocomplete.optionGroups);\n\n    const newScrollPosition = _getOptionScrollPosition(\n      index + labelCount,\n      AUTOCOMPLETE_OPTION_HEIGHT,\n      this.autocomplete._getScrollTop(),\n      AUTOCOMPLETE_PANEL_HEIGHT\n    );\n\n    this.autocomplete._setScrollTop(newScrollPosition);\n  }\n\n  /**\n   * This method listens to a stream of panel closing actions and resets the\n   * stream every time the option list changes.\n   */\n  private _subscribeToClosingActions(): Subscription {\n    const firstStable = this._zone.onStable.asObservable().pipe(take(1));\n    const optionChanges = this.autocomplete.options.changes.pipe(\n      tap(() => this._positionStrategy.reapplyLastPosition()),\n      // Defer emitting to the stream until the next tick, because changing\n      // bindings in here will cause \"changed after checked\" errors.\n      delay(0)\n    );\n\n    // When the zone is stable initially, and when the option list changes...\n    return merge(firstStable, optionChanges)\n      .pipe(\n        // create a new stream of panelClosingActions, replacing any previous streams\n        // that were created, and flatten it so our stream only emits closing events...\n        switchMap(() => {\n          this._resetActiveItem();\n          this.autocomplete._setVisibility();\n\n          if (this.panelOpen) {\n            this._overlayRef!.updatePosition();\n          }\n\n          return this.panelClosingActions;\n        }),\n        // when the first closing event occurs...\n        take(1)\n      )\n      // set the value, close the panel, and complete.\n      .subscribe(event => this._setValueAndClose(event));\n  }\n\n  /** Destroys the autocomplete suggestion panel. */\n  private _destroyPanel(): void {\n    if (this._overlayRef) {\n      this.closePanel();\n      this._overlayRef.dispose();\n      this._overlayRef = null;\n    }\n  }\n\n  private _setTriggerValue(value: any): void {\n    const toDisplay = this.autocomplete && this.autocomplete.displayWith ?\n      this.autocomplete.displayWith(value) :\n      value;\n\n    // Simply falling back to an empty string if the display value is falsy does not work properly.\n    // The display value can also be the number zero and shouldn't fall back to an empty string.\n    const inputValue = toDisplay != null ? toDisplay : '';\n\n    // If it's used within a `MatFormField`, we should set it through the property so it can go\n    // through change detection.\n    if (this._formField) {\n      this._formField._control.value = inputValue;\n    } else {\n      this._element.nativeElement.value = inputValue;\n    }\n\n    this._previousValue = inputValue;\n  }\n\n  /**\n   * This method closes the panel, and if a value is specified, also sets the associated\n   * control to that value. It will also mark the control as dirty if this interaction\n   * stemmed from the user.\n   */\n  private _setValueAndClose(event: MatOptionSelectionChange | null): void {\n    if (event && event.source) {\n      this._clearPreviousSelectedOption(event.source);\n      this._setTriggerValue(event.source.value);\n      this._onChange(event.source.value);\n      this._element.nativeElement.focus();\n      this.autocomplete._emitSelectEvent(event.source);\n    }\n\n    this.closePanel();\n  }\n\n  /**\n   * Clear any previous selected option and emit a selection change event for this option\n   */\n  private _clearPreviousSelectedOption(skip: MatOption) {\n    this.autocomplete.options.forEach(option => {\n      if (option != skip && option.selected) {\n        option.deselect();\n      }\n    });\n  }\n\n  private _attachOverlay(): void {\n    if (!this.autocomplete) {\n      throw getMatAutocompleteMissingPanelError();\n    }\n\n    if (!this._overlayRef) {\n      this._portal = new TemplatePortal(this.autocomplete.template, this._viewContainerRef);\n      this._overlayRef = this._overlay.create(this._getOverlayConfig());\n\n      // Use the `keydownEvents` in order to take advantage of\n      // the overlay event targeting provided by the CDK overlay.\n      this._overlayRef.keydownEvents().subscribe(event => {\n        // Close when pressing ESCAPE or ALT + UP_ARROW, based on the a11y guidelines.\n        // See: https://www.w3.org/TR/wai-aria-practices-1.1/#textbox-keyboard-interaction\n        if (event.keyCode === ESCAPE || (event.keyCode === UP_ARROW && event.altKey)) {\n          this._resetActiveItem();\n          this._closeKeyEventStream.next();\n        }\n      });\n\n      if (this._viewportRuler) {\n        this._viewportSubscription = this._viewportRuler.change().subscribe(() => {\n          if (this.panelOpen && this._overlayRef) {\n            this._overlayRef.updateSize({width: this._getPanelWidth()});\n          }\n        });\n      }\n    } else {\n      // Update the panel width and direction, in case anything has changed.\n      this._overlayRef.updateSize({width: this._getPanelWidth()});\n    }\n\n    if (this._overlayRef && !this._overlayRef.hasAttached()) {\n      this._overlayRef.attach(this._portal);\n      this._closingActionsSubscription = this._subscribeToClosingActions();\n    }\n\n    const wasOpen = this.panelOpen;\n\n    this.autocomplete._setVisibility();\n    this.autocomplete._isOpen = this._overlayAttached = true;\n\n    // We need to do an extra `panelOpen` check in here, because the\n    // autocomplete won't be shown if there are no options.\n    if (this.panelOpen && wasOpen !== this.panelOpen) {\n      this.autocomplete.opened.emit();\n    }\n  }\n\n  private _getOverlayConfig(): OverlayConfig {\n    return new OverlayConfig({\n      positionStrategy: this._getOverlayPosition(),\n      scrollStrategy: this._scrollStrategy(),\n      width: this._getPanelWidth(),\n      direction: this._dir\n    });\n  }\n\n  private _getOverlayPosition(): PositionStrategy {\n    this._positionStrategy = this._overlay.position()\n      .flexibleConnectedTo(this._getConnectedElement())\n      .withFlexibleDimensions(false)\n      .withPush(false)\n      .withPositions([\n        {\n          originX: 'start',\n          originY: 'bottom',\n          overlayX: 'start',\n          overlayY: 'top'\n        },\n        {\n          originX: 'start',\n          originY: 'top',\n          overlayX: 'start',\n          overlayY: 'bottom',\n\n          // The overlay edge connected to the trigger should have squared corners, while\n          // the opposite end has rounded corners. We apply a CSS class to swap the\n          // border-radius based on the overlay position.\n          panelClass: 'mat-autocomplete-panel-above'\n        }\n      ]);\n\n    return this._positionStrategy;\n  }\n\n  private _getConnectedElement(): ElementRef {\n    if (this.connectedTo) {\n      return this.connectedTo.elementRef;\n    }\n\n    return this._formField ? this._formField.getConnectedOverlayOrigin() : this._element;\n  }\n\n  private _getPanelWidth(): number | string {\n    return this.autocomplete.panelWidth || this._getHostWidth();\n  }\n\n  /** Returns the width of the input element, so the panel width can match it. */\n  private _getHostWidth(): number {\n    return this._getConnectedElement().nativeElement.getBoundingClientRect().width;\n  }\n\n  /**\n   * Resets the active item to -1 so arrow events will activate the\n   * correct options, or to 0 if the consumer opted into it.\n   */\n  private _resetActiveItem(): void {\n    this.autocomplete._keyManager.setActiveItem(this.autocomplete.autoActiveFirstOption ? 0 : -1);\n  }\n\n  /** Determines whether the panel can be opened. */\n  private _canOpen(): boolean {\n    const element = this._element.nativeElement;\n    return !element.readOnly && !element.disabled && !this._autocompleteDisabled;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * When constructing a Date, the month is zero-based. This can be confusing, since people are\n * used to seeing them one-based. So we create these aliases to make writing the tests easier.\n */\nexport const JAN = 0, FEB = 1, MAR = 2, APR = 3, MAY = 4, JUN = 5, JUL = 6, AUG = 7, SEP = 8,\n    OCT = 9, NOV = 10, DEC = 11;\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  animateChild,\n  group,\n  state,\n  style,\n  transition,\n  trigger,\n  query,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/** Time and timing curve for expansion panel animations. */\nexport const EXPANSION_PANEL_ANIMATION_TIMING = '225ms cubic-bezier(0.4,0.0,0.2,1)';\n\n/**\n * Animations used by the Material expansion panel.\n *\n * A bug in angular animation's `state` when ViewContainers are moved using ViewContainerRef.move()\n * causes the animation state of moved components to become `void` upon exit, and not update again\n * upon reentry into the DOM.  This can lead a to situation for the expansion panel where the state\n * of the panel is `expanded` or `collapsed` but the animation state is `void`.\n *\n * To correctly handle animating to the next state, we animate between `void` and `collapsed` which\n * are defined to have the same styles. Since angular animates from the current styles to the\n * destination state's style definition, in situations where we are moving from `void`'s styles to\n * `collapsed` this acts a noop since no style values change.\n *\n * In the case where angular's animation state is out of sync with the expansion panel's state, the\n * expansion panel being `expanded` and angular animations being `void`, the animation from the\n * `expanded`'s effective styles (though in a `void` animation state) to the collapsed state will\n * occur as expected.\n *\n * Angular Bug: https://github.com/angular/angular/issues/18847\n *\n * @docs-private\n */\nexport const matExpansionAnimations: {\n  readonly indicatorRotate: AnimationTriggerMetadata;\n  readonly expansionHeaderHeight: AnimationTriggerMetadata;\n  readonly bodyExpansion: AnimationTriggerMetadata;\n} = {\n  /** Animation that rotates the indicator arrow. */\n  indicatorRotate: trigger('indicatorRotate', [\n    state('collapsed, void', style({transform: 'rotate(0deg)'})),\n    state('expanded', style({transform: 'rotate(180deg)'})),\n    transition('expanded <=> collapsed, void => collapsed',\n      animate(EXPANSION_PANEL_ANIMATION_TIMING)),\n  ]),\n\n  /** Animation that expands and collapses the panel header height. */\n  expansionHeaderHeight: trigger('expansionHeight', [\n    state('collapsed, void', style({\n      height: '{{collapsedHeight}}',\n    }), {\n      params: {collapsedHeight: '48px'},\n    }),\n    state('expanded', style({\n      height: '{{expandedHeight}}'\n    }), {\n      params: {expandedHeight: '64px'}\n    }),\n    transition('expanded <=> collapsed, void => collapsed', group([\n      query('@indicatorRotate', animateChild(), {optional: true}),\n      animate(EXPANSION_PANEL_ANIMATION_TIMING),\n    ])),\n  ]),\n\n  /** Animation that expands and collapses the panel content. */\n  bodyExpansion: trigger('bodyExpansion', [\n    state('collapsed, void', style({height: '0px', visibility: 'hidden'})),\n    state('expanded', style({height: '*', visibility: 'visible'})),\n    transition('expanded <=> collapsed, void => collapsed',\n      animate(EXPANSION_PANEL_ANIMATION_TIMING)),\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ActiveDescendantKeyManager} from '@angular/cdk/a11y';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {SelectionModel} from '@angular/cdk/collections';\nimport {\n  A,\n  DOWN_ARROW,\n  END,\n  ENTER,\n  HOME,\n  LEFT_ARROW,\n  RIGHT_ARROW,\n  SPACE,\n  UP_ARROW,\n} from '@angular/cdk/keycodes';\nimport {CdkConnectedOverlay, Overlay, ScrollStrategy} from '@angular/cdk/overlay';\nimport {ViewportRuler} from '@angular/cdk/scrolling';\nimport {\n  AfterContentInit,\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  ContentChildren,\n  Directive,\n  DoCheck,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  InjectionToken,\n  Input,\n  isDevMode,\n  NgZone,\n  OnChanges,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Output,\n  QueryList,\n  Self,\n  SimpleChanges,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {ControlValueAccessor, FormGroupDirective, NgControl, NgForm} from '@angular/forms';\nimport {\n  _countGroupLabelsBeforeOption,\n  _getOptionScrollPosition,\n  CanDisable,\n  CanDisableCtor,\n  CanDisableRipple,\n  CanDisableRippleCtor,\n  CanUpdateErrorState,\n  CanUpdateErrorStateCtor,\n  ErrorStateMatcher,\n  HasTabIndex,\n  HasTabIndexCtor,\n  MAT_OPTION_PARENT_COMPONENT,\n  MatOptgroup,\n  MatOption,\n  MatOptionSelectionChange,\n  mixinDisabled,\n  mixinDisableRipple,\n  mixinErrorState,\n  mixinTabIndex,\n} from '@angular/material/core';\nimport {MatFormField, MatFormFieldControl} from '@angular/material/form-field';\nimport {defer, merge, Observable, Subject} from 'rxjs';\nimport {\n  distinctUntilChanged,\n  filter,\n  map,\n  startWith,\n  switchMap,\n  take,\n  takeUntil,\n} from 'rxjs/operators';\nimport {matSelectAnimations} from './select-animations';\nimport {\n  getMatSelectDynamicMultipleError,\n  getMatSelectNonArrayValueError,\n  getMatSelectNonFunctionValueError,\n} from './select-errors';\n\n\nlet nextUniqueId = 0;\n\n/**\n * The following style constants are necessary to save here in order\n * to properly calculate the alignment of the selected option over\n * the trigger element.\n */\n\n/** The max height of the select's overlay panel */\nexport const SELECT_PANEL_MAX_HEIGHT = 256;\n\n/** The panel's padding on the x-axis */\nexport const SELECT_PANEL_PADDING_X = 16;\n\n/** The panel's x axis padding if it is indented (e.g. there is an option group). */\nexport const SELECT_PANEL_INDENT_PADDING_X = SELECT_PANEL_PADDING_X * 2;\n\n/** The height of the select items in `em` units. */\nexport const SELECT_ITEM_HEIGHT_EM = 3;\n\n// TODO(josephperrott): Revert to a constant after 2018 spec updates are fully merged.\n/**\n * Distance between the panel edge and the option text in\n * multi-selection mode.\n *\n * Calculated as:\n * (SELECT_PANEL_PADDING_X * 1.5) + 20 = 44\n * The padding is multiplied by 1.5 because the checkbox's margin is half the padding.\n * The checkbox width is 16px.\n */\nexport let SELECT_MULTIPLE_PANEL_PADDING_X = 0;\n\n/**\n * The select panel will only \"fit\" inside the viewport if it is positioned at\n * this value or more away from the viewport boundary.\n */\nexport const SELECT_PANEL_VIEWPORT_PADDING = 8;\n\n/** Injection token that determines the scroll handling while a select is open. */\nexport const MAT_SELECT_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mat-select-scroll-strategy');\n\n/** @docs-private */\nexport function MAT_SELECT_SCROLL_STRATEGY_PROVIDER_FACTORY(overlay: Overlay):\n    () => ScrollStrategy {\n  return () => overlay.scrollStrategies.reposition();\n}\n\n/** @docs-private */\nexport const MAT_SELECT_SCROLL_STRATEGY_PROVIDER = {\n  provide: MAT_SELECT_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_SELECT_SCROLL_STRATEGY_PROVIDER_FACTORY,\n};\n\n/** Change event object that is emitted when the select value has changed. */\nexport class MatSelectChange {\n  constructor(\n    /** Reference to the select that emitted the change event. */\n    public source: MatSelect,\n    /** Current value of the select that emitted the event. */\n    public value: any) { }\n}\n\n// Boilerplate for applying mixins to MatSelect.\n/** @docs-private */\nexport class MatSelectBase {\n  constructor(public _elementRef: ElementRef,\n              public _defaultErrorStateMatcher: ErrorStateMatcher,\n              public _parentForm: NgForm,\n              public _parentFormGroup: FormGroupDirective,\n              public ngControl: NgControl) {}\n}\nexport const _MatSelectMixinBase:\n    CanDisableCtor &\n    HasTabIndexCtor &\n    CanDisableRippleCtor &\n    CanUpdateErrorStateCtor &\n    typeof MatSelectBase =\n        mixinDisableRipple(mixinTabIndex(mixinDisabled(mixinErrorState(MatSelectBase))));\n\n\n/**\n * Allows the user to customize the trigger that is displayed when the select has a value.\n */\n@Directive({\n  selector: 'mat-select-trigger'\n})\nexport class MatSelectTrigger {}\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-select',\n  exportAs: 'matSelect',\n  templateUrl: 'select.html',\n  styleUrls: ['select.css'],\n  inputs: ['disabled', 'disableRipple', 'tabIndex'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {\n    'role': 'listbox',\n    '[attr.id]': 'id',\n    '[attr.tabindex]': 'tabIndex',\n    '[attr.aria-label]': '_getAriaLabel()',\n    '[attr.aria-labelledby]': '_getAriaLabelledby()',\n    '[attr.aria-required]': 'required.toString()',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.aria-invalid]': 'errorState',\n    '[attr.aria-owns]': 'panelOpen ? _optionIds : null',\n    '[attr.aria-multiselectable]': 'multiple',\n    '[attr.aria-describedby]': '_ariaDescribedby || null',\n    '[attr.aria-activedescendant]': '_getAriaActiveDescendant()',\n    '[class.mat-select-disabled]': 'disabled',\n    '[class.mat-select-invalid]': 'errorState',\n    '[class.mat-select-required]': 'required',\n    '[class.mat-select-empty]': 'empty',\n    'class': 'mat-select',\n    '(keydown)': '_handleKeydown($event)',\n    '(focus)': '_onFocus()',\n    '(blur)': '_onBlur()',\n  },\n  animations: [\n    matSelectAnimations.transformPanel\n  ],\n  providers: [\n    {provide: MatFormFieldControl, useExisting: MatSelect},\n    {provide: MAT_OPTION_PARENT_COMPONENT, useExisting: MatSelect}\n  ],\n})\nexport class MatSelect extends _MatSelectMixinBase implements AfterContentInit, OnChanges,\n    OnDestroy, OnInit, DoCheck, ControlValueAccessor, CanDisable, HasTabIndex,\n    MatFormFieldControl<any>, CanUpdateErrorState, CanDisableRipple {\n  private _scrollStrategyFactory: () => ScrollStrategy;\n\n  /** Whether or not the overlay panel is open. */\n  private _panelOpen = false;\n\n  /** Whether filling out the select is required in the form. */\n  private _required: boolean = false;\n\n  /** The scroll position of the overlay panel, calculated to center the selected option. */\n  private _scrollTop = 0;\n\n  /** The placeholder displayed in the trigger of the select. */\n  private _placeholder: string;\n\n  /** Whether the component is in multiple selection mode. */\n  private _multiple: boolean = false;\n\n  /** Comparison function to specify which option is displayed. Defaults to object equality. */\n  private _compareWith = (o1: any, o2: any) => o1 === o2;\n\n  /** Unique id for this input. */\n  private _uid = `mat-select-${nextUniqueId++}`;\n\n  /** Emits whenever the component is destroyed. */\n  private readonly _destroy = new Subject<void>();\n\n  /** The last measured value for the trigger's client bounding rect. */\n  _triggerRect: ClientRect;\n\n  /** The aria-describedby attribute on the select for improved a11y. */\n  _ariaDescribedby: string;\n\n  /** The cached font-size of the trigger element. */\n  _triggerFontSize = 0;\n\n  /** Deals with the selection logic. */\n  _selectionModel: SelectionModel<MatOption>;\n\n  /** Manages keyboard events for options in the panel. */\n  _keyManager: ActiveDescendantKeyManager<MatOption>;\n\n  /** `View -> model callback called when value changes` */\n  _onChange: (value: any) => void = () => {};\n\n  /** `View -> model callback called when select has been touched` */\n  _onTouched = () => {};\n\n  /** The IDs of child options to be passed to the aria-owns attribute. */\n  _optionIds: string = '';\n\n  /** The value of the select panel's transform-origin property. */\n  _transformOrigin: string = 'top';\n\n  /** Emits when the panel element is finished transforming in. */\n  _panelDoneAnimatingStream = new Subject<string>();\n\n  /** Strategy that will be used to handle scrolling while the select panel is open. */\n  _scrollStrategy: ScrollStrategy;\n\n  /**\n   * The y-offset of the overlay panel in relation to the trigger's top start corner.\n   * This must be adjusted to align the selected option text over the trigger text.\n   * when the panel opens. Will change based on the y-position of the selected option.\n   */\n  _offsetY = 0;\n\n  /**\n   * This position config ensures that the top \"start\" corner of the overlay\n   * is aligned with with the top \"start\" of the origin by default (overlapping\n   * the trigger completely). If the panel cannot fit below the trigger, it\n   * will fall back to a position above the trigger.\n   */\n  _positions = [\n    {\n      originX: 'start',\n      originY: 'top',\n      overlayX: 'start',\n      overlayY: 'top',\n    },\n    {\n      originX: 'start',\n      originY: 'bottom',\n      overlayX: 'start',\n      overlayY: 'bottom',\n    },\n  ];\n\n  /** Whether the component is disabling centering of the active option over the trigger. */\n  private _disableOptionCentering: boolean = false;\n\n  /** Whether the select is focused. */\n  get focused(): boolean {\n    return this._focused || this._panelOpen;\n  }\n  /**\n   * @deprecated Setter to be removed as this property is intended to be readonly.\n   * @breaking-change 8.0.0\n   */\n  set focused(value: boolean) {\n    this._focused = value;\n  }\n  private _focused = false;\n\n  /** A name for this control that can be used by `mat-form-field`. */\n  controlType = 'mat-select';\n\n  /** Trigger that opens the select. */\n  @ViewChild('trigger') trigger: ElementRef;\n\n  /** Panel containing the select options. */\n  @ViewChild('panel') panel: ElementRef;\n\n  /** Overlay pane containing the options. */\n  @ViewChild(CdkConnectedOverlay) overlayDir: CdkConnectedOverlay;\n\n  /** All of the defined select options. */\n  @ContentChildren(MatOption, { descendants: true }) options: QueryList<MatOption>;\n\n  /** All of the defined groups of options. */\n  @ContentChildren(MatOptgroup) optionGroups: QueryList<MatOptgroup>;\n\n  /** Classes to be passed to the select panel. Supports the same syntax as `ngClass`. */\n  @Input() panelClass: string|string[]|Set<string>|{[key: string]: any};\n\n  /** User-supplied override of the trigger element. */\n  @ContentChild(MatSelectTrigger) customTrigger: MatSelectTrigger;\n\n  /** Placeholder to be shown if no value has been selected. */\n  @Input()\n  get placeholder(): string { return this._placeholder; }\n  set placeholder(value: string) {\n    this._placeholder = value;\n    this.stateChanges.next();\n  }\n\n  /** Whether the component is required. */\n  @Input()\n  get required(): boolean { return this._required; }\n  set required(value: boolean) {\n    this._required = coerceBooleanProperty(value);\n    this.stateChanges.next();\n  }\n\n  /** Whether the user should be allowed to select multiple options. */\n  @Input()\n  get multiple(): boolean { return this._multiple; }\n  set multiple(value: boolean) {\n    if (this._selectionModel) {\n      throw getMatSelectDynamicMultipleError();\n    }\n\n    this._multiple = coerceBooleanProperty(value);\n  }\n\n  /** Whether to center the active option over the trigger. */\n  @Input()\n  get disableOptionCentering(): boolean { return this._disableOptionCentering; }\n  set disableOptionCentering(value: boolean) {\n    this._disableOptionCentering = coerceBooleanProperty(value);\n  }\n\n  /**\n   * Function to compare the option values with the selected values. The first argument\n   * is a value from an option. The second is a value from the selection. A boolean\n   * should be returned.\n   */\n  @Input()\n  get compareWith() { return this._compareWith; }\n  set compareWith(fn: (o1: any, o2: any) => boolean) {\n    if (typeof fn !== 'function') {\n      throw getMatSelectNonFunctionValueError();\n    }\n    this._compareWith = fn;\n    if (this._selectionModel) {\n      // A different comparator means the selection could change.\n      this._initializeSelection();\n    }\n  }\n\n  /** Value of the select control. */\n  @Input()\n  get value(): any { return this._value; }\n  set value(newValue: any) {\n    if (newValue !== this._value) {\n      this.writeValue(newValue);\n      this._value = newValue;\n    }\n  }\n  private _value: any;\n\n  /** Aria label of the select. If not specified, the placeholder will be used as label. */\n  @Input('aria-label') ariaLabel: string = '';\n\n  /** Input that can be used to specify the `aria-labelledby` attribute. */\n  @Input('aria-labelledby') ariaLabelledby: string;\n\n  /** Object used to control when error messages are shown. */\n  @Input() errorStateMatcher: ErrorStateMatcher;\n\n  /**\n   * Function used to sort the values in a select in multiple mode.\n   * Follows the same logic as `Array.prototype.sort`.\n   */\n  @Input() sortComparator: (a: MatOption, b: MatOption, options: MatOption[]) => number;\n\n  /** Unique id of the element. */\n  @Input()\n  get id(): string { return this._id; }\n  set id(value: string) {\n    this._id = value || this._uid;\n    this.stateChanges.next();\n  }\n  private _id: string;\n\n  /** Combined stream of all of the child options' change events. */\n  readonly optionSelectionChanges: Observable<MatOptionSelectionChange> = defer(() => {\n    if (this.options) {\n      return merge(...this.options.map(option => option.onSelectionChange));\n    }\n\n    return this._ngZone.onStable\n      .asObservable()\n      .pipe(take(1), switchMap(() => this.optionSelectionChanges));\n  });\n\n  /** Event emitted when the select panel has been toggled. */\n  @Output() readonly openedChange: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n  /** Event emitted when the select has been opened. */\n  @Output('opened') readonly _openedStream: Observable<void> =\n      this.openedChange.pipe(filter(o => o), map(() => {}));\n\n  /** Event emitted when the select has been closed. */\n  @Output('closed') readonly _closedStream: Observable<void> =\n      this.openedChange.pipe(filter(o => !o), map(() => {}));\n\n   /** Event emitted when the selected value has been changed by the user. */\n  @Output() readonly selectionChange: EventEmitter<MatSelectChange> =\n      new EventEmitter<MatSelectChange>();\n\n  /**\n   * Event that emits whenever the raw value of the select changes. This is here primarily\n   * to facilitate the two-way binding for the `value` input.\n   * @docs-private\n   */\n  @Output() readonly valueChange: EventEmitter<any> = new EventEmitter<any>();\n\n  constructor(\n    private _viewportRuler: ViewportRuler,\n    private _changeDetectorRef: ChangeDetectorRef,\n    private _ngZone: NgZone,\n    _defaultErrorStateMatcher: ErrorStateMatcher,\n    elementRef: ElementRef,\n    @Optional() private _dir: Directionality,\n    @Optional() _parentForm: NgForm,\n    @Optional() _parentFormGroup: FormGroupDirective,\n    @Optional() private _parentFormField: MatFormField,\n    @Self() @Optional() public ngControl: NgControl,\n    @Attribute('tabindex') tabIndex: string,\n    @Inject(MAT_SELECT_SCROLL_STRATEGY) scrollStrategyFactory: any) {\n    super(elementRef, _defaultErrorStateMatcher, _parentForm,\n          _parentFormGroup, ngControl);\n\n    if (this.ngControl) {\n      // Note: we provide the value accessor through here, instead of\n      // the `providers` to avoid running into a circular import.\n      this.ngControl.valueAccessor = this;\n    }\n\n    this._scrollStrategyFactory = scrollStrategyFactory;\n    this._scrollStrategy = this._scrollStrategyFactory();\n    this.tabIndex = parseInt(tabIndex) || 0;\n\n    // Force setter to be called in case id was not specified.\n    this.id = this.id;\n  }\n\n  ngOnInit() {\n    this._selectionModel = new SelectionModel<MatOption>(this.multiple);\n    this.stateChanges.next();\n\n    // We need `distinctUntilChanged` here, because some browsers will\n    // fire the animation end event twice for the same animation. See:\n    // https://github.com/angular/angular/issues/24084\n    this._panelDoneAnimatingStream\n      .pipe(distinctUntilChanged(), takeUntil(this._destroy))\n      .subscribe(() => {\n        if (this.panelOpen) {\n          this._scrollTop = 0;\n          this.openedChange.emit(true);\n        } else {\n          this.openedChange.emit(false);\n          this.overlayDir.offsetX = 0;\n          this._changeDetectorRef.markForCheck();\n        }\n      });\n  }\n\n  ngAfterContentInit() {\n    this._initKeyManager();\n\n    this._selectionModel.onChange.pipe(takeUntil(this._destroy)).subscribe(event => {\n      event.added.forEach(option => option.select());\n      event.removed.forEach(option => option.deselect());\n    });\n\n    this.options.changes.pipe(startWith(null), takeUntil(this._destroy)).subscribe(() => {\n      this._resetOptions();\n      this._initializeSelection();\n    });\n  }\n\n  ngDoCheck() {\n    if (this.ngControl) {\n      this.updateErrorState();\n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    // Updating the disabled state is handled by `mixinDisabled`, but we need to additionally let\n    // the parent form field know to run change detection when the disabled state changes.\n    if (changes.disabled) {\n      this.stateChanges.next();\n    }\n  }\n\n  ngOnDestroy() {\n    this._destroy.next();\n    this._destroy.complete();\n    this.stateChanges.complete();\n  }\n\n  /** Toggles the overlay panel open or closed. */\n  toggle(): void {\n    this.panelOpen ? this.close() : this.open();\n  }\n\n  /** Opens the overlay panel. */\n  open(): void {\n    if (this.disabled || !this.options || !this.options.length || this._panelOpen) {\n      return;\n    }\n\n    this._triggerRect = this.trigger.nativeElement.getBoundingClientRect();\n    // Note: The computed font-size will be a string pixel value (e.g. \"16px\").\n    // `parseInt` ignores the trailing 'px' and converts this to a number.\n    this._triggerFontSize = parseInt(getComputedStyle(this.trigger.nativeElement).fontSize || '0');\n\n    this._panelOpen = true;\n    this._keyManager.withHorizontalOrientation(null);\n    this._calculateOverlayPosition();\n    this._highlightCorrectOption();\n    this._changeDetectorRef.markForCheck();\n\n    // Set the font size on the panel element once it exists.\n    this._ngZone.onStable.asObservable().pipe(take(1)).subscribe(() => {\n      if (this._triggerFontSize && this.overlayDir.overlayRef &&\n          this.overlayDir.overlayRef.overlayElement) {\n        this.overlayDir.overlayRef.overlayElement.style.fontSize = `${this._triggerFontSize}px`;\n      }\n    });\n  }\n\n  /** Closes the overlay panel and focuses the host element. */\n  close(): void {\n    if (this._panelOpen) {\n      this._panelOpen = false;\n      this._keyManager.withHorizontalOrientation(this._isRtl() ? 'rtl' : 'ltr');\n      this._changeDetectorRef.markForCheck();\n      this._onTouched();\n    }\n  }\n\n  /**\n   * Sets the select's value. Part of the ControlValueAccessor interface\n   * required to integrate with Angular's core forms API.\n   *\n   * @param value New value to be written to the model.\n   */\n  writeValue(value: any): void {\n    if (this.options) {\n      this._setSelectionByValue(value);\n    }\n  }\n\n  /**\n   * Saves a callback function to be invoked when the select's value\n   * changes from user input. Part of the ControlValueAccessor interface\n   * required to integrate with Angular's core forms API.\n   *\n   * @param fn Callback to be triggered when the value changes.\n   */\n  registerOnChange(fn: (value: any) => void): void {\n    this._onChange = fn;\n  }\n\n  /**\n   * Saves a callback function to be invoked when the select is blurred\n   * by the user. Part of the ControlValueAccessor interface required\n   * to integrate with Angular's core forms API.\n   *\n   * @param fn Callback to be triggered when the component has been touched.\n   */\n  registerOnTouched(fn: () => {}): void {\n    this._onTouched = fn;\n  }\n\n  /**\n   * Disables the select. Part of the ControlValueAccessor interface required\n   * to integrate with Angular's core forms API.\n   *\n   * @param isDisabled Sets whether the component is disabled.\n   */\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n    this._changeDetectorRef.markForCheck();\n    this.stateChanges.next();\n  }\n\n  /** Whether or not the overlay panel is open. */\n  get panelOpen(): boolean {\n    return this._panelOpen;\n  }\n\n  /** The currently selected option. */\n  get selected(): MatOption | MatOption[] {\n    return this.multiple ? this._selectionModel.selected : this._selectionModel.selected[0];\n  }\n\n  /** The value displayed in the trigger. */\n  get triggerValue(): string {\n    if (this.empty) {\n      return '';\n    }\n\n    if (this._multiple) {\n      const selectedOptions = this._selectionModel.selected.map(option => option.viewValue);\n\n      if (this._isRtl()) {\n        selectedOptions.reverse();\n      }\n\n      // TODO(crisbeto): delimiter should be configurable for proper localization.\n      return selectedOptions.join(', ');\n    }\n\n    return this._selectionModel.selected[0].viewValue;\n  }\n\n  /** Whether the element is in RTL mode. */\n  _isRtl(): boolean {\n    return this._dir ? this._dir.value === 'rtl' : false;\n  }\n\n  /** Handles all keydown events on the select. */\n  _handleKeydown(event: KeyboardEvent): void {\n    if (!this.disabled) {\n      this.panelOpen ? this._handleOpenKeydown(event) : this._handleClosedKeydown(event);\n    }\n  }\n\n  /** Handles keyboard events while the select is closed. */\n  private _handleClosedKeydown(event: KeyboardEvent): void {\n    const keyCode = event.keyCode;\n    const isArrowKey = keyCode === DOWN_ARROW || keyCode === UP_ARROW ||\n                       keyCode === LEFT_ARROW || keyCode === RIGHT_ARROW;\n    const isOpenKey = keyCode === ENTER || keyCode === SPACE;\n    const manager = this._keyManager;\n\n    // Open the select on ALT + arrow key to match the native <select>\n    if (isOpenKey || ((this.multiple || event.altKey) && isArrowKey)) {\n      event.preventDefault(); // prevents the page from scrolling down when pressing space\n      this.open();\n    } else if (!this.multiple) {\n      if (keyCode === HOME || keyCode === END) {\n        keyCode === HOME ? manager.setFirstItemActive() : manager.setLastItemActive();\n        event.preventDefault();\n      } else {\n        manager.onKeydown(event);\n      }\n    }\n  }\n\n  /** Handles keyboard events when the selected is open. */\n  private _handleOpenKeydown(event: KeyboardEvent): void {\n    const keyCode = event.keyCode;\n    const isArrowKey = keyCode === DOWN_ARROW || keyCode === UP_ARROW;\n    const manager = this._keyManager;\n\n    if (keyCode === HOME || keyCode === END) {\n      event.preventDefault();\n      keyCode === HOME ? manager.setFirstItemActive() : manager.setLastItemActive();\n    } else if (isArrowKey && event.altKey) {\n      // Close the select on ALT + arrow key to match the native <select>\n      event.preventDefault();\n      this.close();\n    } else if ((keyCode === ENTER || keyCode === SPACE) && manager.activeItem) {\n      event.preventDefault();\n      manager.activeItem._selectViaInteraction();\n    } else if (this._multiple && keyCode === A && event.ctrlKey) {\n      event.preventDefault();\n      const hasDeselectedOptions = this.options.some(opt => !opt.disabled && !opt.selected);\n\n      this.options.forEach(option => {\n        if (!option.disabled) {\n          hasDeselectedOptions ? option.select() : option.deselect();\n        }\n      });\n    } else {\n      const previouslyFocusedIndex = manager.activeItemIndex;\n\n      manager.onKeydown(event);\n\n      if (this._multiple && isArrowKey && event.shiftKey && manager.activeItem &&\n          manager.activeItemIndex !== previouslyFocusedIndex) {\n        manager.activeItem._selectViaInteraction();\n      }\n    }\n  }\n\n  _onFocus() {\n    if (!this.disabled) {\n      this._focused = true;\n      this.stateChanges.next();\n    }\n  }\n\n  /**\n   * Calls the touched callback only if the panel is closed. Otherwise, the trigger will\n   * \"blur\" to the panel when it opens, causing a false positive.\n   */\n  _onBlur() {\n    this._focused = false;\n\n    if (!this.disabled && !this.panelOpen) {\n      this._onTouched();\n      this._changeDetectorRef.markForCheck();\n      this.stateChanges.next();\n    }\n  }\n\n  /**\n   * Callback that is invoked when the overlay panel has been attached.\n   */\n  _onAttached(): void {\n    this.overlayDir.positionChange.pipe(take(1)).subscribe(() => {\n      this._setPseudoCheckboxPaddingSize();\n      this._changeDetectorRef.detectChanges();\n      this._calculateOverlayOffsetX();\n      this.panel.nativeElement.scrollTop = this._scrollTop;\n    });\n  }\n\n  /** Returns the theme to be used on the panel. */\n  _getPanelTheme(): string {\n    return this._parentFormField ? `mat-${this._parentFormField.color}` : '';\n  }\n\n  // TODO(josephperrott): Remove after 2018 spec updates are fully merged.\n  /** Sets the pseudo checkbox padding size based on the width of the pseudo checkbox. */\n  private _setPseudoCheckboxPaddingSize() {\n    if (!SELECT_MULTIPLE_PANEL_PADDING_X && this.multiple) {\n      const pseudoCheckbox = this.panel.nativeElement.querySelector('.mat-pseudo-checkbox');\n      if (pseudoCheckbox) {\n        SELECT_MULTIPLE_PANEL_PADDING_X = SELECT_PANEL_PADDING_X * 1.5 + pseudoCheckbox.offsetWidth;\n      }\n    }\n  }\n\n  /** Whether the select has a value. */\n  get empty(): boolean {\n    return !this._selectionModel || this._selectionModel.isEmpty();\n  }\n\n  private _initializeSelection(): void {\n    // Defer setting the value in order to avoid the \"Expression\n    // has changed after it was checked\" errors from Angular.\n    Promise.resolve().then(() => {\n      this._setSelectionByValue(this.ngControl ? this.ngControl.value : this._value);\n    });\n  }\n\n  /**\n   * Sets the selected option based on a value. If no option can be\n   * found with the designated value, the select trigger is cleared.\n   */\n  private _setSelectionByValue(value: any | any[]): void {\n    if (this.multiple && value) {\n      if (!Array.isArray(value)) {\n        throw getMatSelectNonArrayValueError();\n      }\n\n      this._selectionModel.clear();\n      value.forEach((currentValue: any) => this._selectValue(currentValue));\n      this._sortValues();\n    } else {\n      this._selectionModel.clear();\n      const correspondingOption = this._selectValue(value);\n\n      // Shift focus to the active item. Note that we shouldn't do this in multiple\n      // mode, because we don't know what option the user interacted with last.\n      if (correspondingOption) {\n        this._keyManager.setActiveItem(correspondingOption);\n      }\n    }\n\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /**\n   * Finds and selects and option based on its value.\n   * @returns Option that has the corresponding value.\n   */\n  private _selectValue(value: any): MatOption | undefined {\n    const correspondingOption = this.options.find((option: MatOption) => {\n      try {\n        // Treat null as a special reset value.\n        return option.value != null && this._compareWith(option.value,  value);\n      } catch (error) {\n        if (isDevMode()) {\n          // Notify developers of errors in their comparator.\n          console.warn(error);\n        }\n        return false;\n      }\n    });\n\n    if (correspondingOption) {\n      this._selectionModel.select(correspondingOption);\n    }\n\n    return correspondingOption;\n  }\n\n  /** Sets up a key manager to listen to keyboard events on the overlay panel. */\n  private _initKeyManager() {\n    this._keyManager = new ActiveDescendantKeyManager<MatOption>(this.options)\n      .withTypeAhead()\n      .withVerticalOrientation()\n      .withHorizontalOrientation(this._isRtl() ? 'rtl' : 'ltr')\n      .withAllowedModifierKeys(['shiftKey']);\n\n    this._keyManager.tabOut.pipe(takeUntil(this._destroy)).subscribe(() => {\n      // Restore focus to the trigger before closing. Ensures that the focus\n      // position won't be lost if the user got focus into the overlay.\n      this.focus();\n      this.close();\n    });\n\n    this._keyManager.change.pipe(takeUntil(this._destroy)).subscribe(() => {\n      if (this._panelOpen && this.panel) {\n        this._scrollActiveOptionIntoView();\n      } else if (!this._panelOpen && !this.multiple && this._keyManager.activeItem) {\n        this._keyManager.activeItem._selectViaInteraction();\n      }\n    });\n  }\n\n  /** Drops current option subscriptions and IDs and resets from scratch. */\n  private _resetOptions(): void {\n    const changedOrDestroyed = merge(this.options.changes, this._destroy);\n\n    this.optionSelectionChanges.pipe(takeUntil(changedOrDestroyed)).subscribe(event => {\n      this._onSelect(event.source, event.isUserInput);\n\n      if (event.isUserInput && !this.multiple && this._panelOpen) {\n        this.close();\n        this.focus();\n      }\n    });\n\n    // Listen to changes in the internal state of the options and react accordingly.\n    // Handles cases like the labels of the selected options changing.\n    merge(...this.options.map(option => option._stateChanges))\n      .pipe(takeUntil(changedOrDestroyed))\n      .subscribe(() => {\n        this._changeDetectorRef.markForCheck();\n        this.stateChanges.next();\n      });\n\n    this._setOptionIds();\n  }\n\n  /** Invoked when an option is clicked. */\n  private _onSelect(option: MatOption, isUserInput: boolean): void {\n    const wasSelected = this._selectionModel.isSelected(option);\n\n    if (option.value == null && !this._multiple) {\n      option.deselect();\n      this._selectionModel.clear();\n      this._propagateChanges(option.value);\n    } else {\n      option.selected ? this._selectionModel.select(option) : this._selectionModel.deselect(option);\n\n      if (isUserInput) {\n        this._keyManager.setActiveItem(option);\n      }\n\n      if (this.multiple) {\n        this._sortValues();\n\n        if (isUserInput) {\n          // In case the user selected the option with their mouse, we\n          // want to restore focus back to the trigger, in order to\n          // prevent the select keyboard controls from clashing with\n          // the ones from `mat-option`.\n          this.focus();\n        }\n      }\n    }\n\n    if (wasSelected !== this._selectionModel.isSelected(option)) {\n      this._propagateChanges();\n    }\n\n    this.stateChanges.next();\n  }\n\n  /** Sorts the selected values in the selected based on their order in the panel. */\n  private _sortValues() {\n    if (this.multiple) {\n      const options = this.options.toArray();\n\n      this._selectionModel.sort((a, b) => {\n        return this.sortComparator ? this.sortComparator(a, b, options) :\n                                     options.indexOf(a) - options.indexOf(b);\n      });\n      this.stateChanges.next();\n    }\n  }\n\n  /** Emits change event to set the model value. */\n  private _propagateChanges(fallbackValue?: any): void {\n    let valueToEmit: any = null;\n\n    if (this.multiple) {\n      valueToEmit = (this.selected as MatOption[]).map(option => option.value);\n    } else {\n      valueToEmit = this.selected ? (this.selected as MatOption).value : fallbackValue;\n    }\n\n    this._value = valueToEmit;\n    this.valueChange.emit(valueToEmit);\n    this._onChange(valueToEmit);\n    this.selectionChange.emit(new MatSelectChange(this, valueToEmit));\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Records option IDs to pass to the aria-owns property. */\n  private _setOptionIds() {\n    this._optionIds = this.options.map(option => option.id).join(' ');\n  }\n\n  /**\n   * Highlights the selected item. If no option is selected, it will highlight\n   * the first item instead.\n   */\n  private _highlightCorrectOption(): void {\n    if (this._keyManager) {\n      if (this.empty) {\n        this._keyManager.setFirstItemActive();\n      } else {\n        this._keyManager.setActiveItem(this._selectionModel.selected[0]);\n      }\n    }\n  }\n\n  /** Scrolls the active option into view. */\n  private _scrollActiveOptionIntoView(): void {\n    const activeOptionIndex = this._keyManager.activeItemIndex || 0;\n    const labelCount = _countGroupLabelsBeforeOption(activeOptionIndex, this.options,\n        this.optionGroups);\n\n    this.panel.nativeElement.scrollTop = _getOptionScrollPosition(\n      activeOptionIndex + labelCount,\n      this._getItemHeight(),\n      this.panel.nativeElement.scrollTop,\n      SELECT_PANEL_MAX_HEIGHT\n    );\n  }\n\n  /** Focuses the select element. */\n  focus(): void {\n    this._elementRef.nativeElement.focus();\n  }\n\n  /** Gets the index of the provided option in the option list. */\n  private _getOptionIndex(option: MatOption): number | undefined {\n    return this.options.reduce((result: number | undefined, current: MatOption, index: number) => {\n      return result === undefined ? (option === current ? index : undefined) : result;\n    }, undefined);\n  }\n\n  /** Calculates the scroll position and x- and y-offsets of the overlay panel. */\n  private _calculateOverlayPosition(): void {\n    const itemHeight = this._getItemHeight();\n    const items = this._getItemCount();\n    const panelHeight = Math.min(items * itemHeight, SELECT_PANEL_MAX_HEIGHT);\n    const scrollContainerHeight = items * itemHeight;\n\n    // The farthest the panel can be scrolled before it hits the bottom\n    const maxScroll = scrollContainerHeight - panelHeight;\n\n    // If no value is selected we open the popup to the first item.\n    let selectedOptionOffset =\n        this.empty ? 0 : this._getOptionIndex(this._selectionModel.selected[0])!;\n\n    selectedOptionOffset += _countGroupLabelsBeforeOption(selectedOptionOffset, this.options,\n        this.optionGroups);\n\n    // We must maintain a scroll buffer so the selected option will be scrolled to the\n    // center of the overlay panel rather than the top.\n    const scrollBuffer = panelHeight / 2;\n    this._scrollTop = this._calculateOverlayScroll(selectedOptionOffset, scrollBuffer, maxScroll);\n    this._offsetY = this._calculateOverlayOffsetY(selectedOptionOffset, scrollBuffer, maxScroll);\n\n    this._checkOverlayWithinViewport(maxScroll);\n  }\n\n  /**\n   * Calculates the scroll position of the select's overlay panel.\n   *\n   * Attempts to center the selected option in the panel. If the option is\n   * too high or too low in the panel to be scrolled to the center, it clamps the\n   * scroll position to the min or max scroll positions respectively.\n   */\n  _calculateOverlayScroll(selectedIndex: number, scrollBuffer: number,\n                          maxScroll: number): number {\n    const itemHeight = this._getItemHeight();\n    const optionOffsetFromScrollTop = itemHeight * selectedIndex;\n    const halfOptionHeight = itemHeight / 2;\n\n    // Starts at the optionOffsetFromScrollTop, which scrolls the option to the top of the\n    // scroll container, then subtracts the scroll buffer to scroll the option down to\n    // the center of the overlay panel. Half the option height must be re-added to the\n    // scrollTop so the option is centered based on its middle, not its top edge.\n    const optimalScrollPosition = optionOffsetFromScrollTop - scrollBuffer + halfOptionHeight;\n    return Math.min(Math.max(0, optimalScrollPosition), maxScroll);\n  }\n\n  /** Returns the aria-label of the select component. */\n  _getAriaLabel(): string | null {\n    // If an ariaLabelledby value has been set by the consumer, the select should not overwrite the\n    // `aria-labelledby` value by setting the ariaLabel to the placeholder.\n    return this.ariaLabelledby ? null : this.ariaLabel || this.placeholder;\n  }\n\n  /** Returns the aria-labelledby of the select component. */\n  _getAriaLabelledby(): string | null {\n    if (this.ariaLabelledby) {\n      return this.ariaLabelledby;\n    }\n\n    // Note: we use `_getAriaLabel` here, because we want to check whether there's a\n    // computed label. `this.ariaLabel` is only the user-specified label.\n    if (!this._parentFormField || !this._parentFormField._hasFloatingLabel() ||\n      this._getAriaLabel()) {\n      return null;\n    }\n\n    return this._parentFormField._labelId || null;\n  }\n\n  /** Determines the `aria-activedescendant` to be set on the host. */\n  _getAriaActiveDescendant(): string | null {\n    if (this.panelOpen && this._keyManager && this._keyManager.activeItem) {\n      return this._keyManager.activeItem.id;\n    }\n\n    return null;\n  }\n\n  /**\n   * Sets the x-offset of the overlay panel in relation to the trigger's top start corner.\n   * This must be adjusted to align the selected option text over the trigger text when\n   * the panel opens. Will change based on LTR or RTL text direction. Note that the offset\n   * can't be calculated until the panel has been attached, because we need to know the\n   * content width in order to constrain the panel within the viewport.\n   */\n  private _calculateOverlayOffsetX(): void {\n    const overlayRect = this.overlayDir.overlayRef.overlayElement.getBoundingClientRect();\n    const viewportSize = this._viewportRuler.getViewportSize();\n    const isRtl = this._isRtl();\n    const paddingWidth = this.multiple ? SELECT_MULTIPLE_PANEL_PADDING_X + SELECT_PANEL_PADDING_X :\n                                         SELECT_PANEL_PADDING_X * 2;\n    let offsetX: number;\n\n    // Adjust the offset, depending on the option padding.\n    if (this.multiple) {\n      offsetX = SELECT_MULTIPLE_PANEL_PADDING_X;\n    } else {\n      let selected = this._selectionModel.selected[0] || this.options.first;\n      offsetX = selected && selected.group ? SELECT_PANEL_INDENT_PADDING_X : SELECT_PANEL_PADDING_X;\n    }\n\n    // Invert the offset in LTR.\n    if (!isRtl) {\n      offsetX *= -1;\n    }\n\n    // Determine how much the select overflows on each side.\n    const leftOverflow = 0 - (overlayRect.left + offsetX - (isRtl ? paddingWidth : 0));\n    const rightOverflow = overlayRect.right + offsetX - viewportSize.width\n                          + (isRtl ? 0 : paddingWidth);\n\n    // If the element overflows on either side, reduce the offset to allow it to fit.\n    if (leftOverflow > 0) {\n      offsetX += leftOverflow + SELECT_PANEL_VIEWPORT_PADDING;\n    } else if (rightOverflow > 0) {\n      offsetX -= rightOverflow + SELECT_PANEL_VIEWPORT_PADDING;\n    }\n\n    // Set the offset directly in order to avoid having to go through change detection and\n    // potentially triggering \"changed after it was checked\" errors. Round the value to avoid\n    // blurry content in some browsers.\n    this.overlayDir.offsetX = Math.round(offsetX);\n    this.overlayDir.overlayRef.updatePosition();\n  }\n\n  /**\n   * Calculates the y-offset of the select's overlay panel in relation to the\n   * top start corner of the trigger. It has to be adjusted in order for the\n   * selected option to be aligned over the trigger when the panel opens.\n   */\n  private _calculateOverlayOffsetY(selectedIndex: number, scrollBuffer: number,\n                                  maxScroll: number): number {\n    const itemHeight = this._getItemHeight();\n    const optionHeightAdjustment = (itemHeight - this._triggerRect.height) / 2;\n    const maxOptionsDisplayed = Math.floor(SELECT_PANEL_MAX_HEIGHT / itemHeight);\n    let optionOffsetFromPanelTop: number;\n\n    // Disable offset if requested by user by returning 0 as value to offset\n    if (this._disableOptionCentering) {\n      return 0;\n    }\n\n    if (this._scrollTop === 0) {\n      optionOffsetFromPanelTop = selectedIndex * itemHeight;\n    } else if (this._scrollTop === maxScroll) {\n      const firstDisplayedIndex = this._getItemCount() - maxOptionsDisplayed;\n      const selectedDisplayIndex = selectedIndex - firstDisplayedIndex;\n\n      // The first item is partially out of the viewport. Therefore we need to calculate what\n      // portion of it is shown in the viewport and account for it in our offset.\n      let partialItemHeight =\n          itemHeight - (this._getItemCount() * itemHeight - SELECT_PANEL_MAX_HEIGHT) % itemHeight;\n\n      // Because the panel height is longer than the height of the options alone,\n      // there is always extra padding at the top or bottom of the panel. When\n      // scrolled to the very bottom, this padding is at the top of the panel and\n      // must be added to the offset.\n      optionOffsetFromPanelTop = selectedDisplayIndex * itemHeight + partialItemHeight;\n    } else {\n      // If the option was scrolled to the middle of the panel using a scroll buffer,\n      // its offset will be the scroll buffer minus the half height that was added to\n      // center it.\n      optionOffsetFromPanelTop = scrollBuffer - itemHeight / 2;\n    }\n\n    // The final offset is the option's offset from the top, adjusted for the height difference,\n    // multiplied by -1 to ensure that the overlay moves in the correct direction up the page.\n    // The value is rounded to prevent some browsers from blurring the content.\n    return Math.round(optionOffsetFromPanelTop * -1 - optionHeightAdjustment);\n  }\n\n  /**\n   * Checks that the attempted overlay position will fit within the viewport.\n   * If it will not fit, tries to adjust the scroll position and the associated\n   * y-offset so the panel can open fully on-screen. If it still won't fit,\n   * sets the offset back to 0 to allow the fallback position to take over.\n   */\n  private _checkOverlayWithinViewport(maxScroll: number): void {\n    const itemHeight = this._getItemHeight();\n    const viewportSize = this._viewportRuler.getViewportSize();\n\n    const topSpaceAvailable = this._triggerRect.top - SELECT_PANEL_VIEWPORT_PADDING;\n    const bottomSpaceAvailable =\n        viewportSize.height - this._triggerRect.bottom - SELECT_PANEL_VIEWPORT_PADDING;\n\n    const panelHeightTop = Math.abs(this._offsetY);\n    const totalPanelHeight =\n        Math.min(this._getItemCount() * itemHeight, SELECT_PANEL_MAX_HEIGHT);\n    const panelHeightBottom = totalPanelHeight - panelHeightTop - this._triggerRect.height;\n\n    if (panelHeightBottom > bottomSpaceAvailable) {\n      this._adjustPanelUp(panelHeightBottom, bottomSpaceAvailable);\n    } else if (panelHeightTop > topSpaceAvailable) {\n     this._adjustPanelDown(panelHeightTop, topSpaceAvailable, maxScroll);\n    } else {\n      this._transformOrigin = this._getOriginBasedOnOption();\n    }\n  }\n\n  /** Adjusts the overlay panel up to fit in the viewport. */\n  private _adjustPanelUp(panelHeightBottom: number, bottomSpaceAvailable: number) {\n    // Browsers ignore fractional scroll offsets, so we need to round.\n    const distanceBelowViewport = Math.round(panelHeightBottom - bottomSpaceAvailable);\n\n    // Scrolls the panel up by the distance it was extending past the boundary, then\n    // adjusts the offset by that amount to move the panel up into the viewport.\n    this._scrollTop -= distanceBelowViewport;\n    this._offsetY -= distanceBelowViewport;\n    this._transformOrigin = this._getOriginBasedOnOption();\n\n    // If the panel is scrolled to the very top, it won't be able to fit the panel\n    // by scrolling, so set the offset to 0 to allow the fallback position to take\n    // effect.\n    if (this._scrollTop <= 0) {\n      this._scrollTop = 0;\n      this._offsetY = 0;\n      this._transformOrigin = `50% bottom 0px`;\n    }\n  }\n\n  /** Adjusts the overlay panel down to fit in the viewport. */\n  private _adjustPanelDown(panelHeightTop: number, topSpaceAvailable: number,\n                           maxScroll: number) {\n    // Browsers ignore fractional scroll offsets, so we need to round.\n    const distanceAboveViewport = Math.round(panelHeightTop - topSpaceAvailable);\n\n    // Scrolls the panel down by the distance it was extending past the boundary, then\n    // adjusts the offset by that amount to move the panel down into the viewport.\n    this._scrollTop += distanceAboveViewport;\n    this._offsetY += distanceAboveViewport;\n    this._transformOrigin = this._getOriginBasedOnOption();\n\n    // If the panel is scrolled to the very bottom, it won't be able to fit the\n    // panel by scrolling, so set the offset to 0 to allow the fallback position\n    // to take effect.\n    if (this._scrollTop >= maxScroll) {\n      this._scrollTop = maxScroll;\n      this._offsetY = 0;\n      this._transformOrigin = `50% top 0px`;\n      return;\n    }\n  }\n\n  /** Sets the transform origin point based on the selected option. */\n  private _getOriginBasedOnOption(): string {\n    const itemHeight = this._getItemHeight();\n    const optionHeightAdjustment = (itemHeight - this._triggerRect.height) / 2;\n    const originY = Math.abs(this._offsetY) - optionHeightAdjustment + itemHeight / 2;\n    return `50% ${originY}px 0px`;\n  }\n\n  /** Calculates the amount of items in the select. This includes options and group labels. */\n  private _getItemCount(): number {\n    return this.options.length + this.optionGroups.length;\n  }\n\n  /** Calculates the height of the select's options. */\n  private _getItemHeight(): number {\n    return this._triggerFontSize * SELECT_ITEM_HEIGHT_EM;\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  setDescribedByIds(ids: string[]) {\n    this._ariaDescribedby = ids.join(' ');\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  onContainerClick() {\n    this.focus();\n    this.open();\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  get shouldLabelFloat(): boolean {\n    return this._panelOpen || !this.empty;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {AnimationEvent} from '@angular/animations';\nimport {AriaDescriber, FocusMonitor} from '@angular/cdk/a11y';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {ESCAPE} from '@angular/cdk/keycodes';\nimport {BreakpointObserver, Breakpoints, BreakpointState} from '@angular/cdk/layout';\nimport {HammerLoader, HAMMER_LOADER} from '@angular/platform-browser';\nimport {\n  FlexibleConnectedPositionStrategy,\n  HorizontalConnectionPos,\n  OriginConnectionPosition,\n  Overlay,\n  OverlayConnectionPosition,\n  OverlayRef,\n  VerticalConnectionPos,\n  ScrollStrategy,\n} from '@angular/cdk/overlay';\nimport {ScrollDispatcher} from '@angular/cdk/scrolling';\nimport {Platform} from '@angular/cdk/platform';\nimport {ComponentPortal} from '@angular/cdk/portal';\nimport {take, takeUntil} from 'rxjs/operators';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  Directive,\n  ElementRef,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  ViewContainerRef,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {Subject, Observable} from 'rxjs';\nimport {matTooltipAnimations} from './tooltip-animations';\n\n\nexport type TooltipPosition = 'left' | 'right' | 'above' | 'below' | 'before' | 'after';\n\n/** Time in ms to throttle repositioning after scroll events. */\nexport const SCROLL_THROTTLE_MS = 20;\n\n/** CSS class that will be attached to the overlay panel. */\nexport const TOOLTIP_PANEL_CLASS = 'mat-tooltip-panel';\n\n/**\n * Creates an error to be thrown if the user supplied an invalid tooltip position.\n * @docs-private\n */\nexport function getMatTooltipInvalidPositionError(position: string) {\n  return Error(`Tooltip position \"${position}\" is invalid.`);\n}\n\n/** Injection token that determines the scroll handling while a tooltip is visible. */\nexport const MAT_TOOLTIP_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mat-tooltip-scroll-strategy');\n\n/** @docs-private */\nexport function MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY(overlay: Overlay): () => ScrollStrategy {\n  return () => overlay.scrollStrategies.reposition({scrollThrottle: SCROLL_THROTTLE_MS});\n}\n\n/** @docs-private */\nexport const MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY_PROVIDER = {\n  provide: MAT_TOOLTIP_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY,\n};\n\n/** Default `matTooltip` options that can be overridden. */\nexport interface MatTooltipDefaultOptions {\n  showDelay: number;\n  hideDelay: number;\n  touchendHideDelay: number;\n}\n\n/** Injection token to be used to override the default options for `matTooltip`. */\nexport const MAT_TOOLTIP_DEFAULT_OPTIONS =\n    new InjectionToken<MatTooltipDefaultOptions>('mat-tooltip-default-options', {\n      providedIn: 'root',\n      factory: MAT_TOOLTIP_DEFAULT_OPTIONS_FACTORY\n    });\n\n/** @docs-private */\nexport function MAT_TOOLTIP_DEFAULT_OPTIONS_FACTORY(): MatTooltipDefaultOptions {\n  return {\n    showDelay: 0,\n    hideDelay: 0,\n    touchendHideDelay: 1500,\n  };\n}\n\n/**\n * Directive that attaches a material design tooltip to the host element. Animates the showing and\n * hiding of a tooltip provided position (defaults to below the element).\n *\n * https://material.io/design/components/tooltips.html\n */\n@Directive({\n  selector: '[matTooltip]',\n  exportAs: 'matTooltip',\n  host: {\n    '(longpress)': 'show()',\n    '(keydown)': '_handleKeydown($event)',\n    '(touchend)': '_handleTouchend()',\n  },\n})\nexport class MatTooltip implements OnDestroy {\n  _overlayRef: OverlayRef | null;\n  _tooltipInstance: TooltipComponent | null;\n\n  private _portal: ComponentPortal<TooltipComponent>;\n  private _position: TooltipPosition = 'below';\n  private _disabled: boolean = false;\n  private _tooltipClass: string|string[]|Set<string>|{[key: string]: any};\n  private _scrollStrategy: () => ScrollStrategy;\n\n  /** Allows the user to define the position of the tooltip relative to the parent element */\n  @Input('matTooltipPosition')\n  get position(): TooltipPosition { return this._position; }\n  set position(value: TooltipPosition) {\n    if (value !== this._position) {\n      this._position = value;\n\n      if (this._overlayRef) {\n        this._updatePosition();\n\n        if (this._tooltipInstance) {\n          this._tooltipInstance!.show(0);\n        }\n\n        this._overlayRef.updatePosition();\n      }\n    }\n  }\n\n  /** Disables the display of the tooltip. */\n  @Input('matTooltipDisabled')\n  get disabled(): boolean { return this._disabled; }\n  set disabled(value) {\n    this._disabled = coerceBooleanProperty(value);\n\n    // If tooltip is disabled, hide immediately.\n    if (this._disabled) {\n      this.hide(0);\n    }\n  }\n\n  /** The default delay in ms before showing the tooltip after show is called */\n  @Input('matTooltipShowDelay') showDelay = this._defaultOptions.showDelay;\n\n  /** The default delay in ms before hiding the tooltip after hide is called */\n  @Input('matTooltipHideDelay') hideDelay = this._defaultOptions.hideDelay;\n\n  private _message = '';\n\n  /** The message to be displayed in the tooltip */\n  @Input('matTooltip')\n  get message() { return this._message; }\n  set message(value: string) {\n    this._ariaDescriber.removeDescription(this._elementRef.nativeElement, this._message);\n\n    // If the message is not a string (e.g. number), convert it to a string and trim it.\n    this._message = value != null ? `${value}`.trim() : '';\n\n    if (!this._message && this._isTooltipVisible()) {\n      this.hide(0);\n    } else {\n      this._updateTooltipMessage();\n      this._ariaDescriber.describe(this._elementRef.nativeElement, this.message);\n    }\n  }\n\n  /** Classes to be passed to the tooltip. Supports the same syntax as `ngClass`. */\n  @Input('matTooltipClass')\n  get tooltipClass() { return this._tooltipClass; }\n  set tooltipClass(value: string|string[]|Set<string>|{[key: string]: any}) {\n    this._tooltipClass = value;\n    if (this._tooltipInstance) {\n      this._setTooltipClass(this._tooltipClass);\n    }\n  }\n\n  private _manualListeners = new Map<string, EventListenerOrEventListenerObject>();\n\n  /** Emits when the component is destroyed. */\n  private readonly _destroyed = new Subject<void>();\n\n  constructor(\n    private _overlay: Overlay,\n    private _elementRef: ElementRef<HTMLElement>,\n    private _scrollDispatcher: ScrollDispatcher,\n    private _viewContainerRef: ViewContainerRef,\n    private _ngZone: NgZone,\n    platform: Platform,\n    private _ariaDescriber: AriaDescriber,\n    private _focusMonitor: FocusMonitor,\n    @Inject(MAT_TOOLTIP_SCROLL_STRATEGY) scrollStrategy: any,\n    @Optional() private _dir: Directionality,\n    @Optional() @Inject(MAT_TOOLTIP_DEFAULT_OPTIONS)\n      private _defaultOptions: MatTooltipDefaultOptions,\n    @Optional() @Inject(HAMMER_LOADER) hammerLoader?: HammerLoader) {\n\n    this._scrollStrategy = scrollStrategy;\n    const element: HTMLElement = _elementRef.nativeElement;\n    const elementStyle = element.style as CSSStyleDeclaration & {webkitUserDrag: string};\n    const hasGestures = typeof window === 'undefined' || (window as any).Hammer || hammerLoader;\n\n    // The mouse events shouldn't be bound on mobile devices, because they can prevent the\n    // first tap from firing its click event or can cause the tooltip to open for clicks.\n    if (!platform.IOS && !platform.ANDROID) {\n      this._manualListeners\n        .set('mouseenter', () => this.show())\n        .set('mouseleave', () => this.hide());\n    } else if (!hasGestures) {\n      // If Hammerjs isn't loaded, fall back to showing on `touchstart`, otherwise\n      // there's no way for the user to trigger the tooltip on a touch device.\n      this._manualListeners.set('touchstart', () => this.show());\n    }\n\n    this._manualListeners.forEach((listener, event) => element.addEventListener(event, listener));\n\n    if (element.nodeName === 'INPUT' || element.nodeName === 'TEXTAREA') {\n      // When we bind a gesture event on an element (in this case `longpress`), HammerJS\n      // will add some inline styles by default, including `user-select: none`. This is\n      // problematic on iOS and in Safari, because it will prevent users from typing in inputs.\n      // Since `user-select: none` is not needed for the `longpress` event and can cause unexpected\n      // behavior for text fields, we always clear the `user-select` to avoid such issues.\n      elementStyle.webkitUserSelect = elementStyle.userSelect = elementStyle.msUserSelect = '';\n    }\n\n    // Hammer applies `-webkit-user-drag: none` on all elements by default,\n    // which breaks the native drag&drop. If the consumer explicitly made\n    // the element draggable, clear the `-webkit-user-drag`.\n    if (element.draggable && elementStyle.webkitUserDrag === 'none') {\n      elementStyle.webkitUserDrag = '';\n    }\n\n    _focusMonitor.monitor(_elementRef).pipe(takeUntil(this._destroyed)).subscribe(origin => {\n      // Note that the focus monitor runs outside the Angular zone.\n      if (!origin) {\n        _ngZone.run(() => this.hide(0));\n      } else if (origin === 'keyboard') {\n        _ngZone.run(() => this.show());\n      }\n    });\n  }\n\n  /**\n   * Dispose the tooltip when destroyed.\n   */\n  ngOnDestroy() {\n    if (this._overlayRef) {\n      this._overlayRef.dispose();\n      this._tooltipInstance = null;\n    }\n\n    // Clean up the event listeners set in the constructor\n    this._manualListeners.forEach((listener, event) => {\n      this._elementRef.nativeElement.removeEventListener(event, listener);\n    });\n    this._manualListeners.clear();\n\n    this._destroyed.next();\n    this._destroyed.complete();\n\n    this._ariaDescriber.removeDescription(this._elementRef.nativeElement, this.message);\n    this._focusMonitor.stopMonitoring(this._elementRef);\n  }\n\n  /** Shows the tooltip after the delay in ms, defaults to tooltip-delay-show or 0ms if no input */\n  show(delay: number = this.showDelay): void {\n    if (this.disabled || !this.message || (this._isTooltipVisible() &&\n      !this._tooltipInstance!._showTimeoutId && !this._tooltipInstance!._hideTimeoutId)) {\n        return;\n    }\n\n    const overlayRef = this._createOverlay();\n\n    this._detach();\n    this._portal = this._portal || new ComponentPortal(TooltipComponent, this._viewContainerRef);\n    this._tooltipInstance = overlayRef.attach(this._portal).instance;\n    this._tooltipInstance.afterHidden()\n      .pipe(takeUntil(this._destroyed))\n      .subscribe(() => this._detach());\n    this._setTooltipClass(this._tooltipClass);\n    this._updateTooltipMessage();\n    this._tooltipInstance!.show(delay);\n  }\n\n  /** Hides the tooltip after the delay in ms, defaults to tooltip-delay-hide or 0ms if no input */\n  hide(delay: number = this.hideDelay): void {\n    if (this._tooltipInstance) {\n      this._tooltipInstance.hide(delay);\n    }\n  }\n\n  /** Shows/hides the tooltip */\n  toggle(): void {\n    this._isTooltipVisible() ? this.hide() : this.show();\n  }\n\n  /** Returns true if the tooltip is currently visible to the user */\n  _isTooltipVisible(): boolean {\n    return !!this._tooltipInstance && this._tooltipInstance.isVisible();\n  }\n\n  /** Handles the keydown events on the host element. */\n  _handleKeydown(e: KeyboardEvent) {\n    if (this._isTooltipVisible() && e.keyCode === ESCAPE) {\n      e.stopPropagation();\n      this.hide(0);\n    }\n  }\n\n  /** Handles the touchend events on the host element. */\n  _handleTouchend() {\n    this.hide(this._defaultOptions.touchendHideDelay);\n  }\n\n  /** Create the overlay config and position strategy */\n  private _createOverlay(): OverlayRef {\n    if (this._overlayRef) {\n      return this._overlayRef;\n    }\n\n    // Create connected position strategy that listens for scroll events to reposition.\n    const strategy = this._overlay.position()\n      .flexibleConnectedTo(this._elementRef)\n      .withTransformOriginOn('.mat-tooltip')\n      .withFlexibleDimensions(false)\n      .withViewportMargin(8);\n\n    const scrollableAncestors = this._scrollDispatcher\n      .getAncestorScrollContainers(this._elementRef);\n\n    strategy.withScrollableContainers(scrollableAncestors);\n\n    strategy.positionChanges.pipe(takeUntil(this._destroyed)).subscribe(change => {\n      if (this._tooltipInstance) {\n        if (change.scrollableViewProperties.isOverlayClipped && this._tooltipInstance.isVisible()) {\n          // After position changes occur and the overlay is clipped by\n          // a parent scrollable then close the tooltip.\n          this._ngZone.run(() => this.hide(0));\n        }\n      }\n    });\n\n    this._overlayRef = this._overlay.create({\n      direction: this._dir,\n      positionStrategy: strategy,\n      panelClass: TOOLTIP_PANEL_CLASS,\n      scrollStrategy: this._scrollStrategy()\n    });\n\n    this._updatePosition();\n\n    this._overlayRef.detachments()\n      .pipe(takeUntil(this._destroyed))\n      .subscribe(() => this._detach());\n\n    return this._overlayRef;\n  }\n\n  /** Detaches the currently-attached tooltip. */\n  private _detach() {\n    if (this._overlayRef && this._overlayRef.hasAttached()) {\n      this._overlayRef.detach();\n    }\n\n    this._tooltipInstance = null;\n  }\n\n  /** Updates the position of the current tooltip. */\n  private _updatePosition() {\n    const position =\n        this._overlayRef!.getConfig().positionStrategy as FlexibleConnectedPositionStrategy;\n    const origin = this._getOrigin();\n    const overlay = this._getOverlayPosition();\n\n    position.withPositions([\n      {...origin.main, ...overlay.main},\n      {...origin.fallback, ...overlay.fallback}\n    ]);\n  }\n\n  /**\n   * Returns the origin position and a fallback position based on the user's position preference.\n   * The fallback position is the inverse of the origin (e.g. `'below' -> 'above'`).\n   */\n  _getOrigin(): {main: OriginConnectionPosition, fallback: OriginConnectionPosition} {\n    const isLtr = !this._dir || this._dir.value == 'ltr';\n    const position = this.position;\n    let originPosition: OriginConnectionPosition;\n\n    if (position == 'above' || position == 'below') {\n      originPosition = {originX: 'center', originY: position == 'above' ? 'top' : 'bottom'};\n    } else if (\n      position == 'before' ||\n      (position == 'left' && isLtr) ||\n      (position == 'right' && !isLtr)) {\n      originPosition = {originX: 'start', originY: 'center'};\n    } else if (\n      position == 'after' ||\n      (position == 'right' && isLtr) ||\n      (position == 'left' && !isLtr)) {\n      originPosition = {originX: 'end', originY: 'center'};\n    } else {\n      throw getMatTooltipInvalidPositionError(position);\n    }\n\n    const {x, y} = this._invertPosition(originPosition.originX, originPosition.originY);\n\n    return {\n      main: originPosition,\n      fallback: {originX: x, originY: y}\n    };\n  }\n\n  /** Returns the overlay position and a fallback position based on the user's preference */\n  _getOverlayPosition(): {main: OverlayConnectionPosition, fallback: OverlayConnectionPosition} {\n    const isLtr = !this._dir || this._dir.value == 'ltr';\n    const position = this.position;\n    let overlayPosition: OverlayConnectionPosition;\n\n    if (position == 'above') {\n      overlayPosition = {overlayX: 'center', overlayY: 'bottom'};\n    } else if (position == 'below') {\n      overlayPosition = {overlayX: 'center', overlayY: 'top'};\n    } else if (\n      position == 'before' ||\n      (position == 'left' && isLtr) ||\n      (position == 'right' && !isLtr)) {\n      overlayPosition = {overlayX: 'end', overlayY: 'center'};\n    } else if (\n      position == 'after' ||\n      (position == 'right' && isLtr) ||\n      (position == 'left' && !isLtr)) {\n      overlayPosition = {overlayX: 'start', overlayY: 'center'};\n    } else {\n      throw getMatTooltipInvalidPositionError(position);\n    }\n\n    const {x, y} = this._invertPosition(overlayPosition.overlayX, overlayPosition.overlayY);\n\n    return {\n      main: overlayPosition,\n      fallback: {overlayX: x, overlayY: y}\n    };\n  }\n\n  /** Updates the tooltip message and repositions the overlay according to the new message length */\n  private _updateTooltipMessage() {\n    // Must wait for the message to be painted to the tooltip so that the overlay can properly\n    // calculate the correct positioning based on the size of the text.\n    if (this._tooltipInstance) {\n      this._tooltipInstance.message = this.message;\n      this._tooltipInstance._markForCheck();\n\n      this._ngZone.onMicrotaskEmpty.asObservable().pipe(\n        take(1),\n        takeUntil(this._destroyed)\n      ).subscribe(() => {\n        if (this._tooltipInstance) {\n          this._overlayRef!.updatePosition();\n        }\n      });\n    }\n  }\n\n  /** Updates the tooltip class */\n  private _setTooltipClass(tooltipClass: string|string[]|Set<string>|{[key: string]: any}) {\n    if (this._tooltipInstance) {\n      this._tooltipInstance.tooltipClass = tooltipClass;\n      this._tooltipInstance._markForCheck();\n    }\n  }\n\n  /** Inverts an overlay position. */\n  private _invertPosition(x: HorizontalConnectionPos, y: VerticalConnectionPos) {\n    if (this.position === 'above' || this.position === 'below') {\n      if (y === 'top') {\n        y = 'bottom';\n      } else if (y === 'bottom') {\n        y = 'top';\n      }\n    } else {\n      if (x === 'end') {\n        x = 'start';\n      } else if (x === 'start') {\n        x = 'end';\n      }\n    }\n\n    return {x, y};\n  }\n}\n\nexport type TooltipVisibility = 'initial' | 'visible' | 'hidden';\n\n/**\n * Internal component that wraps the tooltip's content.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-tooltip-component',\n  templateUrl: 'tooltip.html',\n  styleUrls: ['tooltip.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  animations: [matTooltipAnimations.tooltipState],\n  host: {\n    // Forces the element to have a layout in IE and Edge. This fixes issues where the element\n    // won't be rendered if the animations are disabled or there is no web animations polyfill.\n    '[style.zoom]': '_visibility === \"visible\" ? 1 : null',\n    '(body:click)': 'this._handleBodyInteraction()',\n    'aria-hidden': 'true',\n  }\n})\nexport class TooltipComponent {\n  /** Message to display in the tooltip */\n  message: string;\n\n  /** Classes to be added to the tooltip. Supports the same syntax as `ngClass`. */\n  tooltipClass: string|string[]|Set<string>|{[key: string]: any};\n\n  /** The timeout ID of any current timer set to show the tooltip */\n  _showTimeoutId: number | null;\n\n  /** The timeout ID of any current timer set to hide the tooltip */\n  _hideTimeoutId: number | null;\n\n  /** Property watched by the animation framework to show or hide the tooltip */\n  _visibility: TooltipVisibility = 'initial';\n\n  /** Whether interactions on the page should close the tooltip */\n  private _closeOnInteraction: boolean = false;\n\n  /** Subject for notifying that the tooltip has been hidden from the view */\n  private readonly _onHide: Subject<any> = new Subject();\n\n  /** Stream that emits whether the user has a handset-sized display.  */\n  _isHandset: Observable<BreakpointState> = this._breakpointObserver.observe(Breakpoints.Handset);\n\n  constructor(\n    private _changeDetectorRef: ChangeDetectorRef,\n    private _breakpointObserver: BreakpointObserver) {}\n\n  /**\n   * Shows the tooltip with an animation originating from the provided origin\n   * @param delay Amount of milliseconds to the delay showing the tooltip.\n   */\n  show(delay: number): void {\n    // Cancel the delayed hide if it is scheduled\n    if (this._hideTimeoutId) {\n      clearTimeout(this._hideTimeoutId);\n      this._hideTimeoutId = null;\n    }\n\n    // Body interactions should cancel the tooltip if there is a delay in showing.\n    this._closeOnInteraction = true;\n    this._showTimeoutId = setTimeout(() => {\n      this._visibility = 'visible';\n      this._showTimeoutId = null;\n\n      // Mark for check so if any parent component has set the\n      // ChangeDetectionStrategy to OnPush it will be checked anyways\n      this._markForCheck();\n    }, delay);\n  }\n\n  /**\n   * Begins the animation to hide the tooltip after the provided delay in ms.\n   * @param delay Amount of milliseconds to delay showing the tooltip.\n   */\n  hide(delay: number): void {\n    // Cancel the delayed show if it is scheduled\n    if (this._showTimeoutId) {\n      clearTimeout(this._showTimeoutId);\n      this._showTimeoutId = null;\n    }\n\n    this._hideTimeoutId = setTimeout(() => {\n      this._visibility = 'hidden';\n      this._hideTimeoutId = null;\n\n      // Mark for check so if any parent component has set the\n      // ChangeDetectionStrategy to OnPush it will be checked anyways\n      this._markForCheck();\n    }, delay);\n  }\n\n  /** Returns an observable that notifies when the tooltip has been hidden from view. */\n  afterHidden(): Observable<void> {\n    return this._onHide.asObservable();\n  }\n\n  /** Whether the tooltip is being displayed. */\n  isVisible(): boolean {\n    return this._visibility === 'visible';\n  }\n\n  _animationStart() {\n    this._closeOnInteraction = false;\n  }\n\n  _animationDone(event: AnimationEvent): void {\n    const toState = event.toState as TooltipVisibility;\n\n    if (toState === 'hidden' && !this.isVisible()) {\n      this._onHide.next();\n    }\n\n    if (toState === 'visible' || toState === 'hidden') {\n      this._closeOnInteraction = true;\n    }\n  }\n\n  /**\n   * Interactions on the HTML body should close the tooltip immediately as defined in the\n   * material design spec.\n   * https://material.io/design/components/tooltips.html#behavior\n   */\n  _handleBodyInteraction(): void {\n    if (this._closeOnInteraction) {\n      this.hide(0);\n    }\n  }\n\n  /**\n   * Marks that the tooltip needs to be checked in the next change detection run.\n   * Mainly used for rendering the initial text before positioning a tooltip, which\n   * can be problematic in components with OnPush change detection.\n   */\n  _markForCheck(): void {\n    this._changeDetectorRef.markForCheck();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ChangeDetectorRef,\n  Input,\n  Inject,\n  Output,\n  EventEmitter,\n  OnDestroy,\n  OnInit,\n  ElementRef,\n  Directive,\n  Optional,\n  ViewEncapsulation,\n  ChangeDetectionStrategy,\n  ComponentFactoryResolver,\n  ViewContainerRef,\n  forwardRef,\n  ViewChild,\n} from '@angular/core';\nimport {AnimationEvent} from '@angular/animations';\nimport {TemplatePortal, CdkPortalOutlet, PortalHostDirective} from '@angular/cdk/portal';\nimport {Directionality, Direction} from '@angular/cdk/bidi';\nimport {Subscription, Subject} from 'rxjs';\nimport {matTabsAnimations} from './tabs-animations';\nimport {startWith, distinctUntilChanged} from 'rxjs/operators';\n\n/**\n * These position states are used internally as animation states for the tab body. Setting the\n * position state to left, right, or center will transition the tab body from its current\n * position to its respective state. If there is not current position (void, in the case of a new\n * tab body), then there will be no transition animation to its state.\n *\n * In the case of a new tab body that should immediately be centered with an animating transition,\n * then left-origin-center or right-origin-center can be used, which will use left or right as its\n * psuedo-prior state.\n */\nexport type MatTabBodyPositionState =\n    'left' | 'center' | 'right' | 'left-origin-center' | 'right-origin-center';\n\n/**\n * The origin state is an internally used state that is set on a new tab body indicating if it\n * began to the left or right of the prior selected index. For example, if the selected index was\n * set to 1, and a new tab is created and selected at index 2, then the tab body would have an\n * origin of right because its index was greater than the prior selected index.\n */\nexport type MatTabBodyOriginState = 'left' | 'right';\n\n/**\n * The portal host directive for the contents of the tab.\n * @docs-private\n */\n@Directive({\n  selector: '[matTabBodyHost]'\n})\nexport class MatTabBodyPortal extends CdkPortalOutlet implements OnInit, OnDestroy {\n  /** Subscription to events for when the tab body begins centering. */\n  private _centeringSub = Subscription.EMPTY;\n  /** Subscription to events for when the tab body finishes leaving from center position. */\n  private _leavingSub = Subscription.EMPTY;\n\n  constructor(\n    componentFactoryResolver: ComponentFactoryResolver,\n    viewContainerRef: ViewContainerRef,\n    @Inject(forwardRef(() => MatTabBody)) private _host: MatTabBody) {\n      super(componentFactoryResolver, viewContainerRef);\n  }\n\n  /** Set initial visibility or set up subscription for changing visibility. */\n  ngOnInit(): void {\n    super.ngOnInit();\n\n    this._centeringSub = this._host._beforeCentering\n      .pipe(startWith(this._host._isCenterPosition(this._host._position)))\n      .subscribe((isCentering: boolean) => {\n        if (isCentering && !this.hasAttached()) {\n          this.attach(this._host._content);\n        }\n      });\n\n    this._leavingSub = this._host._afterLeavingCenter.subscribe(() => {\n      this.detach();\n    });\n  }\n\n  /** Clean up centering subscription. */\n  ngOnDestroy(): void {\n    super.ngOnDestroy();\n    this._centeringSub.unsubscribe();\n    this._leavingSub.unsubscribe();\n  }\n}\n\n/**\n * Wrapper for the contents of a tab.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-tab-body',\n  templateUrl: 'tab-body.html',\n  styleUrls: ['tab-body.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  animations: [matTabsAnimations.translateTab],\n  host: {\n    'class': 'mat-tab-body',\n  },\n})\nexport class MatTabBody implements OnInit, OnDestroy {\n\n  /** Current position of the tab-body in the tab-group. Zero means that the tab is visible. */\n  private _positionIndex: number;\n\n  /** Subscription to the directionality change observable. */\n  private _dirChangeSubscription = Subscription.EMPTY;\n\n  /** Tab body position state. Used by the animation trigger for the current state. */\n  _position: MatTabBodyPositionState;\n\n  /** Emits when an animation on the tab is complete. */\n  _translateTabComplete = new Subject<AnimationEvent>();\n\n  /** Event emitted when the tab begins to animate towards the center as the active tab. */\n  @Output() readonly _onCentering: EventEmitter<number> = new EventEmitter<number>();\n\n  /** Event emitted before the centering of the tab begins. */\n  @Output() readonly _beforeCentering: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n  /** Event emitted before the centering of the tab begins. */\n  @Output() readonly _afterLeavingCenter: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n  /** Event emitted when the tab completes its animation towards the center. */\n  @Output() readonly _onCentered: EventEmitter<void> = new EventEmitter<void>(true);\n\n   /** The portal host inside of this container into which the tab body content will be loaded. */\n  @ViewChild(PortalHostDirective) _portalHost: PortalHostDirective;\n\n  /** The tab body content to display. */\n  @Input('content') _content: TemplatePortal;\n\n  /** Position that will be used when the tab is immediately becoming visible after creation. */\n  @Input() origin: number;\n\n  /** The shifted index position of the tab body, where zero represents the active center tab. */\n  @Input()\n  set position(position: number) {\n    this._positionIndex = position;\n    this._computePositionAnimationState();\n  }\n\n  constructor(private _elementRef: ElementRef<HTMLElement>,\n              @Optional() private _dir: Directionality,\n              /**\n               * @breaking-change 8.0.0 changeDetectorRef to be made required.\n               */\n              changeDetectorRef?: ChangeDetectorRef) {\n\n    if (this._dir && changeDetectorRef) {\n      this._dirChangeSubscription = this._dir.change.subscribe((dir: Direction) => {\n        this._computePositionAnimationState(dir);\n        changeDetectorRef.markForCheck();\n      });\n    }\n\n    // Ensure that we get unique animation events, because the `.done` callback can get\n    // invoked twice in some browsers. See https://github.com/angular/angular/issues/24084.\n    this._translateTabComplete.pipe(distinctUntilChanged((x, y) => {\n      return x.fromState === y.fromState && x.toState === y.toState;\n    })).subscribe(event => {\n      // If the transition to the center is complete, emit an event.\n      if (this._isCenterPosition(event.toState) && this._isCenterPosition(this._position)) {\n        this._onCentered.emit();\n      }\n\n      if (this._isCenterPosition(event.fromState) && !this._isCenterPosition(this._position)) {\n        this._afterLeavingCenter.emit();\n      }\n    });\n  }\n\n  /**\n   * After initialized, check if the content is centered and has an origin. If so, set the\n   * special position states that transition the tab from the left or right before centering.\n   */\n  ngOnInit() {\n    if (this._position == 'center' && this.origin != null) {\n      this._position = this._computePositionFromOrigin();\n    }\n  }\n\n  ngOnDestroy() {\n    this._dirChangeSubscription.unsubscribe();\n    this._translateTabComplete.complete();\n  }\n\n  _onTranslateTabStarted(event: AnimationEvent): void {\n    const isCentering = this._isCenterPosition(event.toState);\n    this._beforeCentering.emit(isCentering);\n    if (isCentering) {\n      this._onCentering.emit(this._elementRef.nativeElement.clientHeight);\n    }\n  }\n\n  /** The text direction of the containing app. */\n  _getLayoutDirection(): Direction {\n    return this._dir && this._dir.value === 'rtl' ? 'rtl' : 'ltr';\n  }\n\n  /** Whether the provided position state is considered center, regardless of origin. */\n  _isCenterPosition(position: MatTabBodyPositionState|string): boolean {\n    return position == 'center' ||\n        position == 'left-origin-center' ||\n        position == 'right-origin-center';\n  }\n\n  /** Computes the position state that will be used for the tab-body animation trigger. */\n  private _computePositionAnimationState(dir: Direction = this._getLayoutDirection()) {\n    if (this._positionIndex < 0) {\n      this._position = dir == 'ltr' ? 'left' : 'right';\n    } else if (this._positionIndex > 0) {\n      this._position = dir == 'ltr' ? 'right' : 'left';\n    } else {\n      this._position = 'center';\n    }\n  }\n\n  /**\n   * Computes the position state based on the specified origin position. This is used if the\n   * tab is becoming visible immediately after creation.\n   */\n  private _computePositionFromOrigin(): MatTabBodyPositionState {\n    const dir = this._getLayoutDirection();\n\n    if ((dir == 'ltr' && this.origin <= 0) || (dir == 'rtl' && this.origin > 0)) {\n      return 'left-origin-center';\n    }\n\n    return 'right-origin-center';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, ElementRef} from '@angular/core';\nimport {CanDisable, CanDisableCtor, mixinDisabled} from '@angular/material/core';\n\n\n// Boilerplate for applying mixins to MatTabLabelWrapper.\n/** @docs-private */\nexport class MatTabLabelWrapperBase {}\nexport const _MatTabLabelWrapperMixinBase: CanDisableCtor & typeof MatTabLabelWrapperBase =\n    mixinDisabled(MatTabLabelWrapperBase);\n\n/**\n * Used in the `mat-tab-group` view to display tab labels.\n * @docs-private\n */\n@Directive({\n  selector: '[matTabLabelWrapper]',\n  inputs: ['disabled'],\n  host: {\n    '[class.mat-tab-disabled]': 'disabled',\n    '[attr.aria-disabled]': '!!disabled',\n  }\n})\nexport class MatTabLabelWrapper extends _MatTabLabelWrapperMixinBase implements CanDisable {\n  constructor(public elementRef: ElementRef) {\n    super();\n  }\n\n  /** Sets focus on the wrapper element */\n  focus(): void {\n    this.elementRef.nativeElement.focus();\n  }\n\n  getOffsetLeft(): number {\n    return this.elementRef.nativeElement.offsetLeft;\n  }\n\n  getOffsetWidth(): number {\n    return this.elementRef.nativeElement.offsetWidth;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Direction, Directionality} from '@angular/cdk/bidi';\nimport {coerceNumberProperty} from '@angular/cdk/coercion';\nimport {END, ENTER, HOME, SPACE} from '@angular/cdk/keycodes';\nimport {ViewportRuler} from '@angular/cdk/scrolling';\nimport {\n  AfterContentChecked,\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  ElementRef,\n  EventEmitter,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  Output,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {CanDisableRipple, CanDisableRippleCtor, mixinDisableRipple} from '@angular/material/core';\nimport {merge, of as observableOf, Subject} from 'rxjs';\nimport {takeUntil} from 'rxjs/operators';\nimport {MatInkBar} from './ink-bar';\nimport {MatTabLabelWrapper} from './tab-label-wrapper';\nimport {FocusKeyManager} from '@angular/cdk/a11y';\n\n\n/**\n * The directions that scrolling can go in when the header's tabs exceed the header width. 'After'\n * will scroll the header towards the end of the tabs list and 'before' will scroll towards the\n * beginning of the list.\n */\nexport type ScrollDirection = 'after' | 'before';\n\n/**\n * The distance in pixels that will be overshot when scrolling a tab label into view. This helps\n * provide a small affordance to the label next to it.\n */\nconst EXAGGERATED_OVERSCROLL = 60;\n\n// Boilerplate for applying mixins to MatTabHeader.\n/** @docs-private */\nexport class MatTabHeaderBase {}\nexport const _MatTabHeaderMixinBase: CanDisableRippleCtor & typeof MatTabHeaderBase =\n    mixinDisableRipple(MatTabHeaderBase);\n\n/**\n * The header of the tab group which displays a list of all the tabs in the tab group. Includes\n * an ink bar that follows the currently selected tab. When the tabs list's width exceeds the\n * width of the header container, then arrows will be displayed to allow the user to scroll\n * left and right across the header.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-tab-header',\n  templateUrl: 'tab-header.html',\n  styleUrls: ['tab-header.css'],\n  inputs: ['disableRipple'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {\n    'class': 'mat-tab-header',\n    '[class.mat-tab-header-pagination-controls-enabled]': '_showPaginationControls',\n    '[class.mat-tab-header-rtl]': \"_getLayoutDirection() == 'rtl'\",\n  },\n})\nexport class MatTabHeader extends _MatTabHeaderMixinBase\n    implements AfterContentChecked, AfterContentInit, OnDestroy, CanDisableRipple {\n\n  @ContentChildren(MatTabLabelWrapper) _labelWrappers: QueryList<MatTabLabelWrapper>;\n  @ViewChild(MatInkBar) _inkBar: MatInkBar;\n  @ViewChild('tabListContainer') _tabListContainer: ElementRef;\n  @ViewChild('tabList') _tabList: ElementRef;\n\n  /** The distance in pixels that the tab labels should be translated to the left. */\n  private _scrollDistance = 0;\n\n  /** Whether the header should scroll to the selected index after the view has been checked. */\n  private _selectedIndexChanged = false;\n\n  /** Emits when the component is destroyed. */\n  private readonly _destroyed = new Subject<void>();\n\n  /** Whether the controls for pagination should be displayed */\n  _showPaginationControls = false;\n\n  /** Whether the tab list can be scrolled more towards the end of the tab label list. */\n  _disableScrollAfter = true;\n\n  /** Whether the tab list can be scrolled more towards the beginning of the tab label list. */\n  _disableScrollBefore = true;\n\n  /**\n   * The number of tab labels that are displayed on the header. When this changes, the header\n   * should re-evaluate the scroll position.\n   */\n  private _tabLabelCount: number;\n\n  /** Whether the scroll distance has changed and should be applied after the view is checked. */\n  private _scrollDistanceChanged: boolean;\n\n  /** Used to manage focus between the tabs. */\n  private _keyManager: FocusKeyManager<MatTabLabelWrapper>;\n\n  private _selectedIndex: number = 0;\n\n  /** The index of the active tab. */\n  @Input()\n  get selectedIndex(): number { return this._selectedIndex; }\n  set selectedIndex(value: number) {\n    value = coerceNumberProperty(value);\n    this._selectedIndexChanged = this._selectedIndex != value;\n    this._selectedIndex = value;\n\n    if (this._keyManager) {\n      this._keyManager.updateActiveItemIndex(value);\n    }\n  }\n\n  /** Event emitted when the option is selected. */\n  @Output() readonly selectFocusedIndex = new EventEmitter();\n\n  /** Event emitted when a label is focused. */\n  @Output() readonly indexFocused = new EventEmitter();\n\n  constructor(private _elementRef: ElementRef,\n              private _changeDetectorRef: ChangeDetectorRef,\n              private _viewportRuler: ViewportRuler,\n              @Optional() private _dir: Directionality,\n              // @breaking-change 8.0.0 `_ngZone` parameter to be made required.\n              private _ngZone?: NgZone) {\n    super();\n  }\n\n  ngAfterContentChecked(): void {\n    // If the number of tab labels have changed, check if scrolling should be enabled\n    if (this._tabLabelCount != this._labelWrappers.length) {\n      this._updatePagination();\n      this._tabLabelCount = this._labelWrappers.length;\n      this._changeDetectorRef.markForCheck();\n    }\n\n    // If the selected index has changed, scroll to the label and check if the scrolling controls\n    // should be disabled.\n    if (this._selectedIndexChanged) {\n      this._scrollToLabel(this._selectedIndex);\n      this._checkScrollingControls();\n      this._alignInkBarToSelectedTab();\n      this._selectedIndexChanged = false;\n      this._changeDetectorRef.markForCheck();\n    }\n\n    // If the scroll distance has been changed (tab selected, focused, scroll controls activated),\n    // then translate the header to reflect this.\n    if (this._scrollDistanceChanged) {\n      this._updateTabScrollPosition();\n      this._scrollDistanceChanged = false;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  _handleKeydown(event: KeyboardEvent) {\n    switch (event.keyCode) {\n      case HOME:\n        this._keyManager.setFirstItemActive();\n        event.preventDefault();\n        break;\n      case END:\n        this._keyManager.setLastItemActive();\n        event.preventDefault();\n        break;\n      case ENTER:\n      case SPACE:\n        this.selectFocusedIndex.emit(this.focusIndex);\n        event.preventDefault();\n        break;\n      default:\n        this._keyManager.onKeydown(event);\n    }\n  }\n\n  /**\n   * Aligns the ink bar to the selected tab on load.\n   */\n  ngAfterContentInit() {\n    const dirChange = this._dir ? this._dir.change : observableOf(null);\n    const resize = this._viewportRuler.change(150);\n    const realign = () => {\n      this._updatePagination();\n      this._alignInkBarToSelectedTab();\n    };\n\n    this._keyManager = new FocusKeyManager(this._labelWrappers)\n      .withHorizontalOrientation(this._getLayoutDirection())\n      .withWrap();\n\n    this._keyManager.updateActiveItem(0);\n\n    // Defer the first call in order to allow for slower browsers to lay out the elements.\n    // This helps in cases where the user lands directly on a page with paginated tabs.\n    typeof requestAnimationFrame !== 'undefined' ? requestAnimationFrame(realign) : realign();\n\n    // On dir change or window resize, realign the ink bar and update the orientation of\n    // the key manager if the direction has changed.\n    merge(dirChange, resize).pipe(takeUntil(this._destroyed)).subscribe(() => {\n      realign();\n      this._keyManager.withHorizontalOrientation(this._getLayoutDirection());\n    });\n\n    // If there is a change in the focus key manager we need to emit the `indexFocused`\n    // event in order to provide a public event that notifies about focus changes. Also we realign\n    // the tabs container by scrolling the new focused tab into the visible section.\n    this._keyManager.change.pipe(takeUntil(this._destroyed)).subscribe(newFocusIndex => {\n      this.indexFocused.emit(newFocusIndex);\n      this._setTabFocus(newFocusIndex);\n    });\n  }\n\n  ngOnDestroy() {\n    this._destroyed.next();\n    this._destroyed.complete();\n  }\n\n  /**\n   * Callback for when the MutationObserver detects that the content has changed.\n   */\n  _onContentChanges() {\n    const zoneCallback = () => {\n      this._updatePagination();\n      this._alignInkBarToSelectedTab();\n      this._changeDetectorRef.markForCheck();\n    };\n\n    // The content observer runs outside the `NgZone` by default, which\n    // means that we need to bring the callback back in ourselves.\n    // @breaking-change 8.0.0 Remove null check for `_ngZone` once it's a required parameter.\n    this._ngZone ? this._ngZone.run(zoneCallback) : zoneCallback();\n  }\n\n  /**\n   * Updating the view whether pagination should be enabled or not\n   */\n  _updatePagination() {\n    this._checkPaginationEnabled();\n    this._checkScrollingControls();\n    this._updateTabScrollPosition();\n  }\n\n  /** Tracks which element has focus; used for keyboard navigation */\n  get focusIndex(): number {\n    return this._keyManager ? this._keyManager.activeItemIndex! : 0;\n  }\n\n  /** When the focus index is set, we must manually send focus to the correct label */\n  set focusIndex(value: number) {\n    if (!this._isValidIndex(value) || this.focusIndex === value || !this._keyManager) {\n      return;\n    }\n\n    this._keyManager.setActiveItem(value);\n  }\n\n  /**\n   * Determines if an index is valid.  If the tabs are not ready yet, we assume that the user is\n   * providing a valid index and return true.\n   */\n  _isValidIndex(index: number): boolean {\n    if (!this._labelWrappers) { return true; }\n\n    const tab = this._labelWrappers ? this._labelWrappers.toArray()[index] : null;\n    return !!tab && !tab.disabled;\n  }\n\n  /**\n   * Sets focus on the HTML element for the label wrapper and scrolls it into the view if\n   * scrolling is enabled.\n   */\n  _setTabFocus(tabIndex: number) {\n    if (this._showPaginationControls) {\n      this._scrollToLabel(tabIndex);\n    }\n\n    if (this._labelWrappers && this._labelWrappers.length) {\n      this._labelWrappers.toArray()[tabIndex].focus();\n\n      // Do not let the browser manage scrolling to focus the element, this will be handled\n      // by using translation. In LTR, the scroll left should be 0. In RTL, the scroll width\n      // should be the full width minus the offset width.\n      const containerEl = this._tabListContainer.nativeElement;\n      const dir = this._getLayoutDirection();\n\n      if (dir == 'ltr') {\n        containerEl.scrollLeft = 0;\n      } else {\n        containerEl.scrollLeft = containerEl.scrollWidth - containerEl.offsetWidth;\n      }\n    }\n  }\n\n  /** The layout direction of the containing app. */\n  _getLayoutDirection(): Direction {\n    return this._dir && this._dir.value === 'rtl' ? 'rtl' : 'ltr';\n  }\n\n  /** Performs the CSS transformation on the tab list that will cause the list to scroll. */\n  _updateTabScrollPosition() {\n    const scrollDistance = this.scrollDistance;\n    const translateX = this._getLayoutDirection() === 'ltr' ? -scrollDistance : scrollDistance;\n\n    // Don't use `translate3d` here because we don't want to create a new layer. A new layer\n    // seems to cause flickering and overflow in Internet Explorer. For example, the ink bar\n    // and ripples will exceed the boundaries of the visible tab bar.\n    // See: https://github.com/angular/material2/issues/10276\n    this._tabList.nativeElement.style.transform = `translateX(${translateX}px)`;\n\n    // Setting the `transform` on IE will change the scroll offset of the parent, causing the\n    // position to be thrown off in some cases. We have to reset it ourselves to ensure that\n    // it doesn't get thrown off.\n    this._tabListContainer.nativeElement.scrollLeft = 0;\n  }\n\n  /** Sets the distance in pixels that the tab header should be transformed in the X-axis. */\n  get scrollDistance(): number { return this._scrollDistance; }\n  set scrollDistance(v: number) {\n    this._scrollDistance = Math.max(0, Math.min(this._getMaxScrollDistance(), v));\n\n    // Mark that the scroll distance has changed so that after the view is checked, the CSS\n    // transformation can move the header.\n    this._scrollDistanceChanged = true;\n    this._checkScrollingControls();\n  }\n\n  /**\n   * Moves the tab list in the 'before' or 'after' direction (towards the beginning of the list or\n   * the end of the list, respectively). The distance to scroll is computed to be a third of the\n   * length of the tab list view window.\n   *\n   * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n   * should be called sparingly.\n   */\n  _scrollHeader(scrollDir: ScrollDirection) {\n    const viewLength = this._tabListContainer.nativeElement.offsetWidth;\n\n    // Move the scroll distance one-third the length of the tab list's viewport.\n    this.scrollDistance += (scrollDir == 'before' ? -1 : 1) * viewLength / 3;\n  }\n\n  /**\n   * Moves the tab list such that the desired tab label (marked by index) is moved into view.\n   *\n   * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n   * should be called sparingly.\n   */\n  _scrollToLabel(labelIndex: number) {\n    const selectedLabel = this._labelWrappers ? this._labelWrappers.toArray()[labelIndex] : null;\n\n    if (!selectedLabel) { return; }\n\n    // The view length is the visible width of the tab labels.\n    const viewLength = this._tabListContainer.nativeElement.offsetWidth;\n\n    let labelBeforePos: number, labelAfterPos: number;\n    if (this._getLayoutDirection() == 'ltr') {\n      labelBeforePos = selectedLabel.getOffsetLeft();\n      labelAfterPos = labelBeforePos + selectedLabel.getOffsetWidth();\n    } else {\n      labelAfterPos = this._tabList.nativeElement.offsetWidth - selectedLabel.getOffsetLeft();\n      labelBeforePos = labelAfterPos - selectedLabel.getOffsetWidth();\n    }\n\n    const beforeVisiblePos = this.scrollDistance;\n    const afterVisiblePos = this.scrollDistance + viewLength;\n\n    if (labelBeforePos < beforeVisiblePos) {\n      // Scroll header to move label to the before direction\n      this.scrollDistance -= beforeVisiblePos - labelBeforePos + EXAGGERATED_OVERSCROLL;\n    } else if (labelAfterPos > afterVisiblePos) {\n      // Scroll header to move label to the after direction\n      this.scrollDistance += labelAfterPos - afterVisiblePos + EXAGGERATED_OVERSCROLL;\n    }\n  }\n\n  /**\n   * Evaluate whether the pagination controls should be displayed. If the scroll width of the\n   * tab list is wider than the size of the header container, then the pagination controls should\n   * be shown.\n   *\n   * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n   * should be called sparingly.\n   */\n  _checkPaginationEnabled() {\n    const isEnabled =\n        this._tabList.nativeElement.scrollWidth > this._elementRef.nativeElement.offsetWidth;\n\n    if (!isEnabled) {\n      this.scrollDistance = 0;\n    }\n\n    if (isEnabled !== this._showPaginationControls) {\n      this._changeDetectorRef.markForCheck();\n    }\n\n    this._showPaginationControls = isEnabled;\n  }\n\n  /**\n   * Evaluate whether the before and after controls should be enabled or disabled.\n   * If the header is at the beginning of the list (scroll distance is equal to 0) then disable the\n   * before button. If the header is at the end of the list (scroll distance is equal to the\n   * maximum distance we can scroll), then disable the after button.\n   *\n   * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n   * should be called sparingly.\n   */\n  _checkScrollingControls() {\n    // Check if the pagination arrows should be activated.\n    this._disableScrollBefore = this.scrollDistance == 0;\n    this._disableScrollAfter = this.scrollDistance == this._getMaxScrollDistance();\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /**\n   * Determines what is the maximum length in pixels that can be set for the scroll distance. This\n   * is equal to the difference in width between the tab list container and tab header container.\n   *\n   * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n   * should be called sparingly.\n   */\n  _getMaxScrollDistance(): number {\n    const lengthOfTabList = this._tabList.nativeElement.scrollWidth;\n    const viewLength = this._tabListContainer.nativeElement.offsetWidth;\n    return (lengthOfTabList - viewLength) || 0;\n  }\n\n  /** Tells the ink-bar to align itself to the current label wrapper */\n  _alignInkBarToSelectedTab(): void {\n    const selectedLabelWrapper = this._labelWrappers && this._labelWrappers.length ?\n        this._labelWrappers.toArray()[this.selectedIndex].elementRef.nativeElement :\n        null;\n\n    this._inkBar.alignToElement(selectedLabelWrapper!);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty, coerceNumberProperty} from '@angular/cdk/coercion';\nimport {\n  AfterContentChecked,\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  ElementRef,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  Output,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {\n  CanColor,\n  CanColorCtor,\n  CanDisableRipple,\n  CanDisableRippleCtor,\n  mixinColor,\n  mixinDisableRipple,\n  ThemePalette,\n} from '@angular/material/core';\nimport {merge, Subscription} from 'rxjs';\nimport {MatTab} from './tab';\nimport {MatTabHeader} from './tab-header';\n\n\n/** Used to generate unique ID's for each tab component */\nlet nextId = 0;\n\n/** A simple change event emitted on focus or selection changes. */\nexport class MatTabChangeEvent {\n  /** Index of the currently-selected tab. */\n  index: number;\n  /** Reference to the currently-selected tab. */\n  tab: MatTab;\n}\n\n/** Possible positions for the tab header. */\nexport type MatTabHeaderPosition = 'above' | 'below';\n\n// Boilerplate for applying mixins to MatTabGroup.\n/** @docs-private */\nexport class MatTabGroupBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatTabGroupMixinBase: CanColorCtor & CanDisableRippleCtor & typeof MatTabGroupBase =\n    mixinColor(mixinDisableRipple(MatTabGroupBase), 'primary');\n\n/**\n * Material design tab-group component.  Supports basic tab pairs (label + content) and includes\n * animated ink-bar, keyboard navigation, and screen reader.\n * See: https://material.io/design/components/tabs.html\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-tab-group',\n  exportAs: 'matTabGroup',\n  templateUrl: 'tab-group.html',\n  styleUrls: ['tab-group.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  inputs: ['color', 'disableRipple'],\n  host: {\n    'class': 'mat-tab-group',\n    '[class.mat-tab-group-dynamic-height]': 'dynamicHeight',\n    '[class.mat-tab-group-inverted-header]': 'headerPosition === \"below\"',\n  },\n})\nexport class MatTabGroup extends _MatTabGroupMixinBase implements AfterContentInit,\n    AfterContentChecked, OnDestroy, CanColor, CanDisableRipple {\n\n  @ContentChildren(MatTab) _tabs: QueryList<MatTab>;\n\n  @ViewChild('tabBodyWrapper') _tabBodyWrapper: ElementRef;\n\n  @ViewChild('tabHeader') _tabHeader: MatTabHeader;\n\n  /** The tab index that should be selected after the content has been checked. */\n  private _indexToSelect: number | null = 0;\n\n  /** Snapshot of the height of the tab body wrapper before another tab is activated. */\n  private _tabBodyWrapperHeight: number = 0;\n\n  /** Subscription to tabs being added/removed. */\n  private _tabsSubscription = Subscription.EMPTY;\n\n  /** Subscription to changes in the tab labels. */\n  private _tabLabelSubscription = Subscription.EMPTY;\n\n  /** Whether the tab group should grow to the size of the active tab. */\n  @Input()\n  get dynamicHeight(): boolean { return this._dynamicHeight; }\n  set dynamicHeight(value: boolean) { this._dynamicHeight = coerceBooleanProperty(value); }\n  private _dynamicHeight: boolean = false;\n\n  /** The index of the active tab. */\n  @Input()\n  get selectedIndex(): number | null { return this._selectedIndex; }\n  set selectedIndex(value: number | null) {\n    this._indexToSelect = coerceNumberProperty(value, null);\n  }\n  private _selectedIndex: number | null = null;\n\n  /** Position of the tab header. */\n  @Input() headerPosition: MatTabHeaderPosition = 'above';\n\n  /** Background color of the tab group. */\n  @Input()\n  get backgroundColor(): ThemePalette { return this._backgroundColor; }\n  set backgroundColor(value: ThemePalette) {\n    const nativeElement: HTMLElement = this._elementRef.nativeElement;\n\n    nativeElement.classList.remove(`mat-background-${this.backgroundColor}`);\n\n    if (value) {\n      nativeElement.classList.add(`mat-background-${value}`);\n    }\n\n    this._backgroundColor = value;\n  }\n  private _backgroundColor: ThemePalette;\n\n  /** Output to enable support for two-way binding on `[(selectedIndex)]` */\n  @Output() readonly selectedIndexChange: EventEmitter<number> = new EventEmitter<number>();\n\n  /** Event emitted when focus has changed within a tab group. */\n  @Output() readonly focusChange: EventEmitter<MatTabChangeEvent> =\n      new EventEmitter<MatTabChangeEvent>();\n\n  /** Event emitted when the body animation has completed */\n  @Output() readonly animationDone: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Event emitted when the tab selection has changed. */\n  @Output() readonly selectedTabChange: EventEmitter<MatTabChangeEvent> =\n      new EventEmitter<MatTabChangeEvent>(true);\n\n  private _groupId: number;\n\n  constructor(elementRef: ElementRef,\n              private _changeDetectorRef: ChangeDetectorRef) {\n    super(elementRef);\n    this._groupId = nextId++;\n  }\n\n  /**\n   * After the content is checked, this component knows what tabs have been defined\n   * and what the selected index should be. This is where we can know exactly what position\n   * each tab should be in according to the new selected index, and additionally we know how\n   * a new selected tab should transition in (from the left or right).\n   */\n  ngAfterContentChecked() {\n    // Don't clamp the `indexToSelect` immediately in the setter because it can happen that\n    // the amount of tabs changes before the actual change detection runs.\n    const indexToSelect = this._indexToSelect = this._clampTabIndex(this._indexToSelect);\n\n    // If there is a change in selected index, emit a change event. Should not trigger if\n    // the selected index has not yet been initialized.\n    if (this._selectedIndex != indexToSelect) {\n      const isFirstRun = this._selectedIndex == null;\n\n      if (!isFirstRun) {\n        this.selectedTabChange.emit(this._createChangeEvent(indexToSelect));\n      }\n\n      // Changing these values after change detection has run\n      // since the checked content may contain references to them.\n      Promise.resolve().then(() => {\n        this._tabs.forEach((tab, index) => tab.isActive = index === indexToSelect);\n\n        if (!isFirstRun) {\n          this.selectedIndexChange.emit(indexToSelect);\n        }\n      });\n    }\n\n    // Setup the position for each tab and optionally setup an origin on the next selected tab.\n    this._tabs.forEach((tab: MatTab, index: number) => {\n      tab.position = index - indexToSelect;\n\n      // If there is already a selected tab, then set up an origin for the next selected tab\n      // if it doesn't have one already.\n      if (this._selectedIndex != null && tab.position == 0 && !tab.origin) {\n        tab.origin = indexToSelect - this._selectedIndex;\n      }\n    });\n\n    if (this._selectedIndex !== indexToSelect) {\n      this._selectedIndex = indexToSelect;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  ngAfterContentInit() {\n    this._subscribeToTabLabels();\n\n    // Subscribe to changes in the amount of tabs, in order to be\n    // able to re-render the content as new tabs are added or removed.\n    this._tabsSubscription = this._tabs.changes.subscribe(() => {\n      const indexToSelect = this._clampTabIndex(this._indexToSelect);\n\n      // Maintain the previously-selected tab if a new tab is added or removed and there is no\n      // explicit change that selects a different tab.\n      if (indexToSelect === this._selectedIndex) {\n        const tabs = this._tabs.toArray();\n\n        for (let i = 0; i < tabs.length; i++) {\n          if (tabs[i].isActive) {\n            // Assign both to the `_indexToSelect` and `_selectedIndex` so we don't fire a changed\n            // event, otherwise the consumer may end up in an infinite loop in some edge cases like\n            // adding a tab within the `selectedIndexChange` event.\n            this._indexToSelect = this._selectedIndex = i;\n            break;\n          }\n        }\n      }\n\n      this._subscribeToTabLabels();\n      this._changeDetectorRef.markForCheck();\n    });\n  }\n\n  ngOnDestroy() {\n    this._tabsSubscription.unsubscribe();\n    this._tabLabelSubscription.unsubscribe();\n  }\n\n  /** Re-aligns the ink bar to the selected tab element. */\n  realignInkBar() {\n    if (this._tabHeader) {\n      this._tabHeader._alignInkBarToSelectedTab();\n    }\n  }\n\n  _focusChanged(index: number) {\n    this.focusChange.emit(this._createChangeEvent(index));\n  }\n\n  private _createChangeEvent(index: number): MatTabChangeEvent {\n    const event = new MatTabChangeEvent;\n    event.index = index;\n    if (this._tabs && this._tabs.length) {\n      event.tab = this._tabs.toArray()[index];\n    }\n    return event;\n  }\n\n  /**\n   * Subscribes to changes in the tab labels. This is needed, because the @Input for the label is\n   * on the MatTab component, whereas the data binding is inside the MatTabGroup. In order for the\n   * binding to be updated, we need to subscribe to changes in it and trigger change detection\n   * manually.\n   */\n  private _subscribeToTabLabels() {\n    if (this._tabLabelSubscription) {\n      this._tabLabelSubscription.unsubscribe();\n    }\n\n    this._tabLabelSubscription = merge(...this._tabs.map(tab => tab._stateChanges))\n      .subscribe(() => this._changeDetectorRef.markForCheck());\n  }\n\n  /** Clamps the given index to the bounds of 0 and the tabs length. */\n  private _clampTabIndex(index: number | null): number {\n    // Note the `|| 0`, which ensures that values like NaN can't get through\n    // and which would otherwise throw the component into an infinite loop\n    // (since Math.max(NaN, 0) === NaN).\n    return Math.min(this._tabs.length - 1, Math.max(index || 0, 0));\n  }\n\n  /** Returns a unique id for each tab label element */\n  _getTabLabelId(i: number): string {\n    return `mat-tab-label-${this._groupId}-${i}`;\n  }\n\n  /** Returns a unique id for each tab content element */\n  _getTabContentId(i: number): string {\n    return `mat-tab-content-${this._groupId}-${i}`;\n  }\n\n  /**\n   * Sets the height of the body wrapper to the height of the activating tab if dynamic\n   * height property is true.\n   */\n  _setTabBodyWrapperHeight(tabHeight: number): void {\n    if (!this._dynamicHeight || !this._tabBodyWrapperHeight) { return; }\n\n    const wrapper: HTMLElement = this._tabBodyWrapper.nativeElement;\n\n    wrapper.style.height = this._tabBodyWrapperHeight + 'px';\n\n    // This conditional forces the browser to paint the height so that\n    // the animation to the new height can have an origin.\n    if (this._tabBodyWrapper.nativeElement.offsetHeight) {\n      wrapper.style.height = tabHeight + 'px';\n    }\n  }\n\n  /** Removes the height of the tab body wrapper. */\n  _removeTabBodyWrapperHeight(): void {\n    const wrapper = this._tabBodyWrapper.nativeElement;\n    this._tabBodyWrapperHeight = wrapper.clientHeight;\n    wrapper.style.height = '';\n    this.animationDone.emit();\n  }\n\n  /** Handle click events, setting new selected index if appropriate. */\n  _handleClick(tab: MatTab, tabHeader: MatTabHeader, index: number) {\n    if (!tab.disabled) {\n      this.selectedIndex = tabHeader.focusIndex = index;\n    }\n  }\n\n  /** Retrieves the tabindex for the tab. */\n  _getTabIndex(tab: MatTab, idx: number): number | null {\n    if (tab.disabled) {\n      return null;\n    }\n    return this.selectedIndex === idx ? 0 : -1;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {Directionality} from '@angular/cdk/bidi';\nimport {Platform} from '@angular/cdk/platform';\nimport {ViewportRuler} from '@angular/cdk/scrolling';\nimport {\n  AfterContentChecked,\n  AfterContentInit,\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  forwardRef,\n  Inject,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {\n  CanColor, CanColorCtor,\n  CanDisable, CanDisableCtor,\n  CanDisableRipple, CanDisableRippleCtor,\n  HasTabIndex, HasTabIndexCtor,\n  MAT_RIPPLE_GLOBAL_OPTIONS,\n  mixinColor,\n  mixinDisabled,\n  mixinDisableRipple,\n  mixinTabIndex, RippleConfig,\n  RippleGlobalOptions,\n  RippleRenderer,\n  RippleTarget,\n  ThemePalette,\n} from '@angular/material/core';\nimport {merge, of as observableOf, Subject} from 'rxjs';\nimport {takeUntil} from 'rxjs/operators';\nimport {MatInkBar} from '../ink-bar';\nimport {FocusMonitor} from '@angular/cdk/a11y';\n\n\n// Boilerplate for applying mixins to MatTabNav.\n/** @docs-private */\nexport class MatTabNavBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatTabNavMixinBase: CanDisableRippleCtor & CanColorCtor & typeof MatTabNavBase =\n    mixinDisableRipple(mixinColor(MatTabNavBase, 'primary'));\n\n/**\n * Navigation component matching the styles of the tab group header.\n * Provides anchored navigation with animated ink bar.\n */\n@Component({\n  moduleId: module.id,\n  selector: '[mat-tab-nav-bar]',\n  exportAs: 'matTabNavBar, matTabNav',\n  inputs: ['color', 'disableRipple'],\n  templateUrl: 'tab-nav-bar.html',\n  styleUrls: ['tab-nav-bar.css'],\n  host: {'class': 'mat-tab-nav-bar'},\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatTabNav extends _MatTabNavMixinBase\n    implements AfterContentChecked, AfterContentInit, CanColor, CanDisableRipple, OnDestroy {\n\n  /** Subject that emits when the component has been destroyed. */\n  private readonly _onDestroy = new Subject<void>();\n\n  private _activeLinkChanged: boolean;\n  private _activeLinkElement: ElementRef<HTMLElement> | null;\n\n  @ViewChild(MatInkBar) _inkBar: MatInkBar;\n\n  /** Query list of all tab links of the tab navigation. */\n  @ContentChildren(forwardRef(() => MatTabLink), {descendants: true})\n  _tabLinks: QueryList<MatTabLink>;\n\n  /** Background color of the tab nav. */\n  @Input()\n  get backgroundColor(): ThemePalette { return this._backgroundColor; }\n  set backgroundColor(value: ThemePalette) {\n    const nativeElement: HTMLElement = this._elementRef.nativeElement;\n\n    nativeElement.classList.remove(`mat-background-${this.backgroundColor}`);\n\n    if (value) {\n      nativeElement.classList.add(`mat-background-${value}`);\n    }\n\n    this._backgroundColor = value;\n  }\n  private _backgroundColor: ThemePalette;\n\n  constructor(elementRef: ElementRef,\n              @Optional() private _dir: Directionality,\n              private _ngZone: NgZone,\n              private _changeDetectorRef: ChangeDetectorRef,\n              private _viewportRuler: ViewportRuler) {\n    super(elementRef);\n  }\n\n  /**\n   * Notifies the component that the active link has been changed.\n   * @breaking-change 8.0.0 `element` parameter to be removed.\n   */\n  updateActiveLink(element: ElementRef) {\n    // Note: keeping the `element` for backwards-compat, but isn't being used for anything.\n    // @breaking-change 8.0.0\n    this._activeLinkChanged = !!element;\n    this._changeDetectorRef.markForCheck();\n  }\n\n  ngAfterContentInit(): void {\n    this._ngZone.runOutsideAngular(() => {\n      const dirChange = this._dir ? this._dir.change : observableOf(null);\n\n      return merge(dirChange, this._viewportRuler.change(10))\n          .pipe(takeUntil(this._onDestroy))\n          .subscribe(() => this._alignInkBar());\n    });\n  }\n\n  /** Checks if the active link has been changed and, if so, will update the ink bar. */\n  ngAfterContentChecked(): void {\n    if (this._activeLinkChanged) {\n      const activeTab = this._tabLinks.find(tab => tab.active);\n\n      this._activeLinkElement = activeTab ? activeTab._elementRef : null;\n      this._alignInkBar();\n      this._activeLinkChanged = false;\n    }\n  }\n\n  ngOnDestroy() {\n    this._onDestroy.next();\n    this._onDestroy.complete();\n  }\n\n  /** Aligns the ink bar to the active link. */\n  _alignInkBar(): void {\n    if (this._activeLinkElement) {\n      this._inkBar.show();\n      this._inkBar.alignToElement(this._activeLinkElement.nativeElement);\n    } else {\n      this._inkBar.hide();\n    }\n  }\n}\n\n\n// Boilerplate for applying mixins to MatTabLink.\nexport class MatTabLinkBase {}\nexport const _MatTabLinkMixinBase:\n    HasTabIndexCtor & CanDisableRippleCtor & CanDisableCtor & typeof MatTabLinkBase =\n        mixinTabIndex(mixinDisableRipple(mixinDisabled(MatTabLinkBase)));\n\n/**\n * Link inside of a `mat-tab-nav-bar`.\n */\n@Directive({\n  selector: '[mat-tab-link], [matTabLink]',\n  exportAs: 'matTabLink',\n  inputs: ['disabled', 'disableRipple', 'tabIndex'],\n  host: {\n    'class': 'mat-tab-link',\n    '[attr.aria-current]': 'active',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.tabIndex]': 'tabIndex',\n    '[class.mat-tab-disabled]': 'disabled',\n    '[class.mat-tab-label-active]': 'active',\n  }\n})\nexport class MatTabLink extends _MatTabLinkMixinBase\n    implements OnDestroy, CanDisable, CanDisableRipple, HasTabIndex, RippleTarget {\n\n  /** Whether the tab link is active or not. */\n  protected _isActive: boolean = false;\n\n  /** Reference to the RippleRenderer for the tab-link. */\n  protected _tabLinkRipple: RippleRenderer;\n\n  /** Whether the ripples are globally disabled through the RippleGlobalOptions */\n  private _ripplesGloballyDisabled = false;\n\n  /** Whether the link is active. */\n  @Input()\n  get active(): boolean { return this._isActive; }\n  set active(value: boolean) {\n    if (value !== this._isActive) {\n      this._isActive = value;\n      this._tabNavBar.updateActiveLink(this._elementRef);\n    }\n  }\n\n  /**\n   * Ripple configuration for ripples that are launched on pointer down.\n   * @docs-private\n   */\n  rippleConfig: RippleConfig = {};\n\n  /**\n   * Whether ripples are disabled on interaction\n   * @docs-private\n   */\n  get rippleDisabled(): boolean {\n    return this.disabled || this.disableRipple || this._tabNavBar.disableRipple ||\n      this._ripplesGloballyDisabled;\n  }\n\n  constructor(private _tabNavBar: MatTabNav,\n              public _elementRef: ElementRef,\n              ngZone: NgZone,\n              platform: Platform,\n              @Optional() @Inject(MAT_RIPPLE_GLOBAL_OPTIONS) globalOptions: RippleGlobalOptions,\n              @Attribute('tabindex') tabIndex: string,\n              /**\n               * @deprecated\n               * @breaking-change 8.0.0 `_focusMonitor` parameter to be made required.\n               */\n              private _focusMonitor?: FocusMonitor) {\n    super();\n\n    this._tabLinkRipple = new RippleRenderer(this, ngZone, _elementRef, platform);\n    this._tabLinkRipple.setupTriggerEvents(_elementRef.nativeElement);\n\n    this.tabIndex = parseInt(tabIndex) || 0;\n\n    if (globalOptions) {\n      // TODO(paul): Do not copy each option manually. Allow dynamic global option changes: #9729\n      this._ripplesGloballyDisabled = !!globalOptions.disabled;\n      this.rippleConfig = {\n        terminateOnPointerUp: globalOptions.terminateOnPointerUp,\n        animation: globalOptions.animation,\n      };\n    }\n\n    if (_focusMonitor) {\n      _focusMonitor.monitor(_elementRef);\n    }\n  }\n\n  ngOnDestroy() {\n    this._tabLinkRipple._removeTriggerEvents();\n\n    if (this._focusMonitor) {\n      this._focusMonitor.stopMonitoring(this._elementRef);\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ObserversModule} from '@angular/cdk/observers';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {MatInkBar} from './ink-bar';\nimport {MatTab} from './tab';\nimport {MatTabBody, MatTabBodyPortal} from './tab-body';\nimport {MatTabContent} from './tab-content';\nimport {MatTabGroup} from './tab-group';\nimport {MatTabHeader} from './tab-header';\nimport {MatTabLabel} from './tab-label';\nimport {MatTabLabelWrapper} from './tab-label-wrapper';\nimport {MatTabLink, MatTabNav} from './tab-nav-bar/tab-nav-bar';\nimport {A11yModule} from '@angular/cdk/a11y';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatCommonModule,\n    PortalModule,\n    MatRippleModule,\n    ObserversModule,\n    A11yModule,\n  ],\n  // Don't export all components because some are only to be used internally.\n  exports: [\n    MatCommonModule,\n    MatTabGroup,\n    MatTabLabel,\n    MatTab,\n    MatTabNav,\n    MatTabLink,\n    MatTabContent,\n  ],\n  declarations: [\n    MatTabGroup,\n    MatTabLabel,\n    MatTab,\n    MatInkBar,\n    MatTabLabelWrapper,\n    MatTabNav,\n    MatTabLink,\n    MatTabBody,\n    MatTabBodyPortal,\n    MatTabHeader,\n    MatTabContent,\n  ],\n})\nexport class MatTabsModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Platform} from '@angular/cdk/platform';\nimport {DOCUMENT} from '@angular/common';\nimport {\n  AfterViewInit,\n  ChangeDetectionStrategy,\n  Component,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  Inject,\n  isDevMode,\n  QueryList,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {CanColor, CanColorCtor, mixinColor} from '@angular/material/core';\n\n\n// Boilerplate for applying mixins to MatToolbar.\n/** @docs-private */\nexport class MatToolbarBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatToolbarMixinBase: CanColorCtor & typeof MatToolbarBase =\n    mixinColor(MatToolbarBase);\n\n@Directive({\n  selector: 'mat-toolbar-row',\n  exportAs: 'matToolbarRow',\n  host: {'class': 'mat-toolbar-row'},\n})\nexport class MatToolbarRow {}\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-toolbar',\n  exportAs: 'matToolbar',\n  templateUrl: 'toolbar.html',\n  styleUrls: ['toolbar.css'],\n  inputs: ['color'],\n  host: {\n    'class': 'mat-toolbar',\n    '[class.mat-toolbar-multiple-rows]': '_toolbarRows.length > 0',\n    '[class.mat-toolbar-single-row]': '_toolbarRows.length === 0',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatToolbar extends _MatToolbarMixinBase implements CanColor, AfterViewInit {\n  private _document: Document;\n\n  /** Reference to all toolbar row elements that have been projected. */\n  @ContentChildren(MatToolbarRow) _toolbarRows: QueryList<MatToolbarRow>;\n\n  constructor(\n    elementRef: ElementRef,\n    private _platform: Platform,\n    @Inject(DOCUMENT) document?: any) {\n    super(elementRef);\n\n    // TODO: make the document a required param when doing breaking changes.\n    this._document = document;\n  }\n\n  ngAfterViewInit() {\n    if (!isDevMode() || !this._platform.isBrowser) {\n      return;\n    }\n\n    this._checkToolbarMixedModes();\n    this._toolbarRows.changes.subscribe(() => this._checkToolbarMixedModes());\n  }\n\n  /**\n   * Throws an exception when developers are attempting to combine the different toolbar row modes.\n   */\n  private _checkToolbarMixedModes() {\n    if (!this._toolbarRows.length) {\n      return;\n    }\n\n    // Check if there are any other DOM nodes that can display content but aren't inside of\n    // a <mat-toolbar-row> element.\n    const isCombinedUsage = Array.from<HTMLElement>(this._elementRef.nativeElement.childNodes)\n      .filter(node => !(node.classList && node.classList.contains('mat-toolbar-row')))\n      .filter(node => node.nodeType !== (this._document ? this._document.COMMENT_NODE : 8))\n      .some(node => !!(node.textContent && node.textContent.trim()));\n\n    if (isCombinedUsage) {\n      throwToolbarMixedModesError();\n    }\n  }\n}\n\n/**\n * Throws an exception when attempting to combine the different toolbar row modes.\n * @docs-private\n */\nexport function throwToolbarMixedModesError() {\n  throw Error('MatToolbar: Attempting to combine different toolbar modes. ' +\n    'Either specify multiple `<mat-toolbar-row>` elements explicitly or just place content ' +\n    'inside of a `<mat-toolbar>` for a single row.');\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatToolbar, MatToolbarRow} from './toolbar';\n\n\n@NgModule({\n  imports: [MatCommonModule],\n  exports: [MatToolbar, MatToolbarRow, MatCommonModule],\n  declarations: [MatToolbar, MatToolbarRow],\n})\nexport class MatToolbarModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {CdkTreeNodeOutlet} from '@angular/cdk/tree';\nimport {\n  Directive,\n  ViewContainerRef,\n} from '@angular/core';\n\n/**\n * Outlet for nested CdkNode. Put `[matTreeNodeOutlet]` on a tag to place children dataNodes\n * inside the outlet.\n */\n@Directive({\n  selector: '[matTreeNodeOutlet]'\n})\nexport class MatTreeNodeOutlet implements CdkTreeNodeOutlet {\n  constructor(public viewContainer: ViewContainerRef) {}\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CdkNestedTreeNode, CdkTree, CdkTreeNode, CdkTreeNodeDef} from '@angular/cdk/tree';\nimport {\n  AfterContentInit,\n  Attribute,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  Input,\n  IterableDiffers,\n  OnDestroy,\n  QueryList,\n} from '@angular/core';\nimport {\n  CanDisable, CanDisableCtor,\n  HasTabIndex,\n  HasTabIndexCtor,\n  mixinDisabled,\n  mixinTabIndex,\n} from '@angular/material/core';\nimport {MatTreeNodeOutlet} from './outlet';\n\nexport const _MatTreeNodeMixinBase: HasTabIndexCtor & CanDisableCtor & typeof CdkTreeNode =\n    mixinTabIndex(mixinDisabled(CdkTreeNode));\n\nexport const _MatNestedTreeNodeMixinBase:\n    HasTabIndexCtor & CanDisableCtor & typeof CdkNestedTreeNode =\n        mixinTabIndex(mixinDisabled(CdkNestedTreeNode));\n\n/**\n * Wrapper for the CdkTree node with Material design styles.\n */\n@Directive({\n  selector: 'mat-tree-node',\n  exportAs: 'matTreeNode',\n  inputs: ['disabled', 'tabIndex'],\n  host: {\n    '[attr.aria-expanded]': 'isExpanded',\n    '[attr.aria-level]': 'role === \"treeitem\" ? level : null',\n    '[attr.role]': 'role',\n    'class': 'mat-tree-node'\n  },\n  providers: [{provide: CdkTreeNode, useExisting: MatTreeNode}]\n})\nexport class MatTreeNode<T> extends _MatTreeNodeMixinBase<T>\n    implements CanDisable, HasTabIndex {\n  @Input() role: 'treeitem' | 'group' = 'treeitem';\n\n  constructor(protected _elementRef: ElementRef<HTMLElement>,\n              protected _tree: CdkTree<T>,\n              @Attribute('tabindex') tabIndex: string) {\n    super(_elementRef, _tree);\n\n    this.tabIndex = Number(tabIndex) || 0;\n  }\n}\n\n/**\n * Wrapper for the CdkTree node definition with Material design styles.\n */\n@Directive({\n  selector: '[matTreeNodeDef]',\n  inputs: [\n    'when: matTreeNodeDefWhen'\n  ],\n  providers: [{provide: CdkTreeNodeDef, useExisting: MatTreeNodeDef}]\n})\nexport class MatTreeNodeDef<T> extends CdkTreeNodeDef<T> {\n  @Input('matTreeNode') data: T;\n}\n\n/**\n * Wrapper for the CdkTree nested node with Material design styles.\n */\n@Directive({\n  selector: 'mat-nested-tree-node',\n  exportAs: 'matNestedTreeNode',\n  host: {\n    '[attr.aria-expanded]': 'isExpanded',\n    '[attr.role]': 'role',\n    'class': 'mat-nested-tree-node',\n  },\n  inputs: ['disabled', 'tabIndex'],\n  providers: [\n    {provide: CdkNestedTreeNode, useExisting: MatNestedTreeNode},\n    {provide: CdkTreeNode, useExisting: MatNestedTreeNode}\n  ]\n})\nexport class MatNestedTreeNode<T> extends _MatNestedTreeNodeMixinBase<T>\n    implements AfterContentInit, CanDisable, HasTabIndex, OnDestroy {\n\n  @Input('matNestedTreeNode') node: T;\n\n  @ContentChildren(MatTreeNodeOutlet) nodeOutlet: QueryList<MatTreeNodeOutlet>;\n\n  constructor(protected _elementRef: ElementRef<HTMLElement>,\n              protected _tree: CdkTree<T>,\n              protected _differs: IterableDiffers,\n              @Attribute('tabindex') tabIndex: string) {\n    super(_elementRef, _tree, _differs);\n\n    this.tabIndex = Number(tabIndex) || 0;\n  }\n\n  // This is a workaround for https://github.com/angular/angular/issues/23091\n  // In aot mode, the lifecycle hooks from parent class are not called.\n  // TODO(tinayuangao): Remove when the angular issue #23091 is fixed\n  ngAfterContentInit() {\n    super.ngAfterContentInit();\n  }\n\n  ngOnDestroy() {\n    super.ngOnDestroy();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {CdkTreeNodePadding} from '@angular/cdk/tree';\nimport {Directive, Input} from '@angular/core';\n\n/**\n * Wrapper for the CdkTree padding with Material design styles.\n */\n@Directive({\n  selector: '[matTreeNodePadding]',\n  providers: [{provide: CdkTreeNodePadding, useExisting: MatTreeNodePadding}]\n})\nexport class MatTreeNodePadding<T> extends CdkTreeNodePadding<T> {\n\n  /** The level of depth of the tree node. The padding will be `level * indent` pixels. */\n  @Input('matTreeNodePadding') level: number;\n\n  /** The indent for each level. Default number 40px from material design menu sub-menu spec. */\n  @Input('matTreeNodePaddingIndent') indent: number;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor} from '@angular/cdk/a11y';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  Input,\n  OnDestroy,\n  ViewEncapsulation,\n  TemplateRef,\n} from '@angular/core';\nimport {Subscription} from 'rxjs';\nimport {MatStepLabel} from './step-label';\nimport {MatStepperIntl} from './stepper-intl';\nimport {MatStepperIconContext} from './stepper-icon';\nimport {StepState} from '@angular/cdk/stepper';\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-step-header',\n  templateUrl: 'step-header.html',\n  styleUrls: ['step-header.css'],\n  host: {\n    'class': 'mat-step-header',\n    'role': 'tab',\n  },\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatStepHeader implements OnDestroy {\n  private _intlSubscription: Subscription;\n\n  /** State of the given step. */\n  @Input() state: StepState;\n\n  /** Label of the given step. */\n  @Input() label: MatStepLabel | string;\n\n  /** Error message to display when there's an error. */\n  @Input() errorMessage: string;\n\n  /** Overrides for the header icons, passed in via the stepper. */\n  @Input() iconOverrides: {[key: string]: TemplateRef<MatStepperIconContext>};\n\n  /** Index of the given step. */\n  @Input() index: number;\n\n  /** Whether the given step is selected. */\n  @Input() selected: boolean;\n\n  /** Whether the given step label is active. */\n  @Input() active: boolean;\n\n  /** Whether the given step is optional. */\n  @Input() optional: boolean;\n\n  constructor(\n    public _intl: MatStepperIntl,\n    private _focusMonitor: FocusMonitor,\n    private _element: ElementRef<HTMLElement>,\n    changeDetectorRef: ChangeDetectorRef) {\n    _focusMonitor.monitor(_element, true);\n    this._intlSubscription = _intl.changes.subscribe(() => changeDetectorRef.markForCheck());\n  }\n\n  ngOnDestroy() {\n    this._intlSubscription.unsubscribe();\n    this._focusMonitor.stopMonitoring(this._element);\n  }\n\n  /** Returns string label of given step if it is a text label. */\n  _stringLabel(): string | null {\n    return this.label instanceof MatStepLabel ? null : this.label;\n  }\n\n  /** Returns MatStepLabel if the label of given step is a template label. */\n  _templateLabel(): MatStepLabel | null {\n    return this.label instanceof MatStepLabel ? this.label : null;\n  }\n\n  /** Returns the host HTML element. */\n  _getHostElement() {\n    return this._element.nativeElement;\n  }\n\n  /** Template context variables that are exposed to the `matStepperIcon` instances. */\n  _getIconContext(): MatStepperIconContext {\n    return {\n      index: this.index,\n      active: this.active,\n      optional: this.optional\n    };\n  }\n\n  focus() {\n    this._getHostElement().focus();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/**\n * Animations used by the Material steppers.\n * @docs-private\n */\nexport const matStepperAnimations: {\n  readonly horizontalStepTransition: AnimationTriggerMetadata;\n  readonly verticalStepTransition: AnimationTriggerMetadata;\n} = {\n  /** Animation that transitions the step along the X axis in a horizontal stepper. */\n  horizontalStepTransition: trigger('stepTransition', [\n    state('previous', style({transform: 'translate3d(-100%, 0, 0)', visibility: 'hidden'})),\n    state('current', style({transform: 'none', visibility: 'visible'})),\n    state('next', style({transform: 'translate3d(100%, 0, 0)', visibility: 'hidden'})),\n    transition('* => *', animate('500ms cubic-bezier(0.35, 0, 0.25, 1)'))\n  ]),\n\n  /** Animation that transitions the step along the Y axis in a vertical stepper. */\n  verticalStepTransition: trigger('stepTransition', [\n    state('previous', style({height: '0px', visibility: 'hidden'})),\n    state('next', style({height: '0px', visibility: 'hidden'})),\n    state('current', style({height: '*', visibility: 'visible'})),\n    transition('* <=> current', animate('225ms cubic-bezier(0.4, 0.0, 0.2, 1)'))\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, Input, TemplateRef} from '@angular/core';\nimport {StepState} from '@angular/cdk/stepper';\n\n/** Template context available to an attached `matStepperIcon`. */\nexport interface MatStepperIconContext {\n  /** Index of the step. */\n  index: number;\n  /** Whether the step is currently active. */\n  active: boolean;\n  /** Whether the step is optional. */\n  optional: boolean;\n}\n\n/**\n * Template to be used to override the icons inside the step header.\n */\n@Directive({\n  selector: 'ng-template[matStepperIcon]',\n})\nexport class MatStepperIcon {\n  /** Name of the icon to be overridden. */\n  @Input('matStepperIcon') name: StepState;\n\n  constructor(public templateRef: TemplateRef<MatStepperIconContext>) {}\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directionality} from '@angular/cdk/bidi';\nimport {\n  CdkStep,\n  CdkStepper,\n  StepContentPositionState,\n  MAT_STEPPER_GLOBAL_OPTIONS,\n  StepperOptions\n} from '@angular/cdk/stepper';\nimport {AnimationEvent} from '@angular/animations';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  Optional,\n  Output,\n  QueryList,\n  SkipSelf,\n  TemplateRef,\n  ViewChildren,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {FormControl, FormGroupDirective, NgForm} from '@angular/forms';\nimport {DOCUMENT} from '@angular/common';\nimport {ErrorStateMatcher} from '@angular/material/core';\nimport {Subject} from 'rxjs';\nimport {takeUntil, distinctUntilChanged} from 'rxjs/operators';\n\nimport {MatStepHeader} from './step-header';\nimport {MatStepLabel} from './step-label';\nimport {matStepperAnimations} from './stepper-animations';\nimport {MatStepperIcon, MatStepperIconContext} from './stepper-icon';\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-step',\n  templateUrl: 'step.html',\n  providers: [{provide: ErrorStateMatcher, useExisting: MatStep}],\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matStep',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatStep extends CdkStep implements ErrorStateMatcher {\n  /** Content for step label given by `<ng-template matStepLabel>`. */\n  @ContentChild(MatStepLabel) stepLabel: MatStepLabel;\n\n  /** @breaking-change 8.0.0 remove the `?` after `stepperOptions` */\n  constructor(@Inject(forwardRef(() => MatStepper)) stepper: MatStepper,\n              @SkipSelf() private _errorStateMatcher: ErrorStateMatcher,\n              @Optional() @Inject(MAT_STEPPER_GLOBAL_OPTIONS) stepperOptions?: StepperOptions) {\n    super(stepper, stepperOptions);\n  }\n\n  /** Custom error state matcher that additionally checks for validity of interacted form. */\n  isErrorState(control: FormControl | null, form: FormGroupDirective | NgForm | null): boolean {\n    const originalErrorState = this._errorStateMatcher.isErrorState(control, form);\n\n    // Custom error state checks for the validity of form that is not submitted or touched\n    // since user can trigger a form change by calling for another step without directly\n    // interacting with the current form.\n    const customErrorState = !!(control && control.invalid && this.interacted);\n\n    return originalErrorState || customErrorState;\n  }\n}\n\n\n@Directive({\n  selector: '[matStepper]'\n})\nexport class MatStepper extends CdkStepper implements AfterContentInit {\n  /** The list of step headers of the steps in the stepper. */\n  @ViewChildren(MatStepHeader) _stepHeader: QueryList<MatStepHeader>;\n\n  /** Steps that the stepper holds. */\n  @ContentChildren(MatStep) _steps: QueryList<MatStep>;\n\n  /** Custom icon overrides passed in by the consumer. */\n  @ContentChildren(MatStepperIcon) _icons: QueryList<MatStepperIcon>;\n\n  /** Event emitted when the current step is done transitioning in. */\n  @Output() readonly animationDone: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Consumer-specified template-refs to be used to override the header icons. */\n  _iconOverrides: {[key: string]: TemplateRef<MatStepperIconContext>} = {};\n\n  /** Stream of animation `done` events when the body expands/collapses. */\n  _animationDone = new Subject<AnimationEvent>();\n\n  ngAfterContentInit() {\n    this._icons.forEach(({name, templateRef}) => this._iconOverrides[name] = templateRef);\n\n    // Mark the component for change detection whenever the content children query changes\n    this._steps.changes.pipe(takeUntil(this._destroyed)).subscribe(() => this._stateChanged());\n\n    this._animationDone.pipe(\n      // This needs a `distinctUntilChanged` in order to avoid emitting the same event twice due\n      // to a bug in animations where the `.done` callback gets invoked twice on some browsers.\n      // See https://github.com/angular/angular/issues/24084\n      distinctUntilChanged((x, y) => x.fromState === y.fromState && x.toState === y.toState),\n      takeUntil(this._destroyed)\n    ).subscribe(event => {\n      if ((event.toState as StepContentPositionState) === 'current') {\n        this.animationDone.emit();\n      }\n    });\n  }\n}\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-horizontal-stepper',\n  exportAs: 'matHorizontalStepper',\n  templateUrl: 'stepper-horizontal.html',\n  styleUrls: ['stepper.css'],\n  inputs: ['selectedIndex'],\n  host: {\n    'class': 'mat-stepper-horizontal',\n    '[class.mat-stepper-label-position-end]': 'labelPosition == \"end\"',\n    '[class.mat-stepper-label-position-bottom]': 'labelPosition == \"bottom\"',\n    'aria-orientation': 'horizontal',\n    'role': 'tablist',\n  },\n  animations: [matStepperAnimations.horizontalStepTransition],\n  providers: [{provide: MatStepper, useExisting: MatHorizontalStepper}],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatHorizontalStepper extends MatStepper {\n  /** Whether the label should display in bottom or end position. */\n  @Input()\n  labelPosition: 'bottom' | 'end' = 'end';\n}\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-vertical-stepper',\n  exportAs: 'matVerticalStepper',\n  templateUrl: 'stepper-vertical.html',\n  styleUrls: ['stepper.css'],\n  inputs: ['selectedIndex'],\n  host: {\n    'class': 'mat-stepper-vertical',\n    'aria-orientation': 'vertical',\n    'role': 'tablist',\n  },\n  animations: [matStepperAnimations.verticalStepTransition],\n  providers: [{provide: MatStepper, useExisting: MatVerticalStepper}],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatVerticalStepper extends MatStepper {\n  constructor(\n    @Optional() dir: Directionality,\n    changeDetectorRef: ChangeDetectorRef,\n    // @breaking-change 8.0.0 `elementRef` and `_document` parameters to become required.\n    elementRef?: ElementRef<HTMLElement>,\n    @Inject(DOCUMENT) _document?: any) {\n    super(dir, changeDetectorRef, elementRef, _document);\n    this._orientation = 'vertical';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive} from '@angular/core';\nimport {CdkStepper, CdkStepperNext, CdkStepperPrevious} from '@angular/cdk/stepper';\nimport {MatStepper} from './stepper';\n\n/** Button that moves to the next step in a stepper workflow. */\n@Directive({\n  selector: 'button[matStepperNext]',\n  host: {\n    '(click)': '_stepper.next()',\n    '[type]': 'type',\n  },\n  inputs: ['type'],\n  providers: [{provide: CdkStepper, useExisting: MatStepper}]\n})\nexport class MatStepperNext extends CdkStepperNext {}\n\n/** Button that moves to the previous step in a stepper workflow. */\n@Directive({\n  selector: 'button[matStepperPrevious]',\n  host: {\n    '(click)': '_stepper.previous()',\n    '[type]': 'type',\n  },\n  inputs: ['type'],\n  providers: [{provide: CdkStepper, useExisting: MatStepper}]\n})\nexport class MatStepperPrevious extends CdkStepperPrevious {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {PortalModule} from '@angular/cdk/portal';\nimport {CdkStepperModule} from '@angular/cdk/stepper';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatButtonModule} from '@angular/material/button';\nimport {ErrorStateMatcher, MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {MatIconModule} from '@angular/material/icon';\nimport {MatStepHeader} from './step-header';\nimport {MatStepLabel} from './step-label';\nimport {MatHorizontalStepper, MatStep, MatStepper, MatVerticalStepper} from './stepper';\nimport {MatStepperNext, MatStepperPrevious} from './stepper-button';\nimport {MatStepperIcon} from './stepper-icon';\nimport {MAT_STEPPER_INTL_PROVIDER} from './stepper-intl';\n\n\n@NgModule({\n  imports: [\n    MatCommonModule,\n    CommonModule,\n    PortalModule,\n    MatButtonModule,\n    CdkStepperModule,\n    MatIconModule,\n    MatRippleModule,\n  ],\n  exports: [\n    MatCommonModule,\n    MatHorizontalStepper,\n    MatVerticalStepper,\n    MatStep,\n    MatStepLabel,\n    MatStepper,\n    MatStepperNext,\n    MatStepperPrevious,\n    MatStepHeader,\n    MatStepperIcon,\n  ],\n  declarations: [\n    MatHorizontalStepper,\n    MatVerticalStepper,\n    MatStep,\n    MatStepLabel,\n    MatStepper,\n    MatStepperNext,\n    MatStepperPrevious,\n    MatStepHeader,\n    MatStepperIcon,\n  ],\n  providers: [MAT_STEPPER_INTL_PROVIDER, ErrorStateMatcher],\n})\nexport class MatStepperModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CDK_TABLE_TEMPLATE, CdkTable} from '@angular/cdk/table';\nimport {ChangeDetectionStrategy, Component, ViewEncapsulation} from '@angular/core';\n\n/**\n * Wrapper for the CdkTable with Material design styles.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-table, table[mat-table]',\n  exportAs: 'matTable',\n  template: CDK_TABLE_TEMPLATE,\n  styleUrls: ['table.css'],\n  host: {\n    'class': 'mat-table',\n  },\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatTable<T> extends CdkTable<T> {\n  /** Overrides the sticky CSS class set by the `CdkTable`. */\n  protected stickyCssClass = 'mat-table-sticky';\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, ElementRef, Input} from '@angular/core';\nimport {\n  CdkCell,\n  CdkCellDef,\n  CdkColumnDef, CdkFooterCell, CdkFooterCellDef,\n  CdkHeaderCell,\n  CdkHeaderCellDef,\n} from '@angular/cdk/table';\n\n/**\n * Cell definition for the mat-table.\n * Captures the template of a column's data row cell as well as cell-specific properties.\n */\n@Directive({\n  selector: '[matCellDef]',\n  providers: [{provide: CdkCellDef, useExisting: MatCellDef}]\n})\nexport class MatCellDef extends CdkCellDef {}\n\n/**\n * Header cell definition for the mat-table.\n * Captures the template of a column's header cell and as well as cell-specific properties.\n */\n@Directive({\n  selector: '[matHeaderCellDef]',\n  providers: [{provide: CdkHeaderCellDef, useExisting: MatHeaderCellDef}]\n})\nexport class MatHeaderCellDef extends CdkHeaderCellDef {}\n\n/**\n * Footer cell definition for the mat-table.\n * Captures the template of a column's footer cell and as well as cell-specific properties.\n */\n@Directive({\n  selector: '[matFooterCellDef]',\n  providers: [{provide: CdkFooterCellDef, useExisting: MatFooterCellDef}]\n})\nexport class MatFooterCellDef extends CdkFooterCellDef {}\n\n/**\n * Column definition for the mat-table.\n * Defines a set of cells available for a table column.\n */\n@Directive({\n  selector: '[matColumnDef]',\n  providers: [\n    {provide: CdkColumnDef, useExisting: MatColumnDef},\n    {provide: 'MAT_SORT_HEADER_COLUMN_DEF', useExisting: MatColumnDef}\n  ],\n})\nexport class MatColumnDef extends CdkColumnDef {\n  /** Unique name for this column. */\n  @Input('matColumnDef') name: string;\n\n  /** Whether this column should be sticky positioned at the start of the row */\n  @Input() sticky: boolean;\n\n  /** Whether this column should be sticky positioned on the end of the row */\n  @Input() stickyEnd: boolean;\n}\n\n/** Header cell template container that adds the right classes and role. */\n@Directive({\n  selector: 'mat-header-cell, th[mat-header-cell]',\n  host: {\n    'class': 'mat-header-cell',\n    'role': 'columnheader',\n  },\n})\nexport class MatHeaderCell extends CdkHeaderCell {\n  constructor(columnDef: CdkColumnDef,\n              elementRef: ElementRef<HTMLElement>) {\n    super(columnDef, elementRef);\n    elementRef.nativeElement.classList.add(`mat-column-${columnDef.cssClassFriendlyName}`);\n  }\n}\n\n/** Footer cell template container that adds the right classes and role. */\n@Directive({\n  selector: 'mat-footer-cell, td[mat-footer-cell]',\n  host: {\n    'class': 'mat-footer-cell',\n    'role': 'gridcell',\n  },\n})\nexport class MatFooterCell extends CdkFooterCell {\n  constructor(columnDef: CdkColumnDef,\n              elementRef: ElementRef) {\n    super(columnDef, elementRef);\n    elementRef.nativeElement.classList.add(`mat-column-${columnDef.cssClassFriendlyName}`);\n  }\n}\n\n/** Cell template container that adds the right classes and role. */\n@Directive({\n  selector: 'mat-cell, td[mat-cell]',\n  host: {\n    'class': 'mat-cell',\n    'role': 'gridcell',\n  },\n})\nexport class MatCell extends CdkCell {\n  constructor(columnDef: CdkColumnDef,\n              elementRef: ElementRef<HTMLElement>) {\n    super(columnDef, elementRef);\n    elementRef.nativeElement.classList.add(`mat-column-${columnDef.cssClassFriendlyName}`);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  Directive,\n  ViewEncapsulation\n} from '@angular/core';\nimport {\n  CDK_ROW_TEMPLATE, CdkFooterRow, CdkFooterRowDef,\n  CdkHeaderRow,\n  CdkHeaderRowDef,\n  CdkRow,\n  CdkRowDef,\n} from '@angular/cdk/table';\n\n/**\n * Header row definition for the mat-table.\n * Captures the header row's template and other header properties such as the columns to display.\n */\n@Directive({\n  selector: '[matHeaderRowDef]',\n  providers: [{provide: CdkHeaderRowDef, useExisting: MatHeaderRowDef}],\n  inputs: ['columns: matHeaderRowDef', 'sticky: matHeaderRowDefSticky'],\n})\nexport class MatHeaderRowDef extends CdkHeaderRowDef {}\n\n/**\n * Footer row definition for the mat-table.\n * Captures the footer row's template and other footer properties such as the columns to display.\n */\n@Directive({\n  selector: '[matFooterRowDef]',\n  providers: [{provide: CdkFooterRowDef, useExisting: MatFooterRowDef}],\n  inputs: ['columns: matFooterRowDef', 'sticky: matFooterRowDefSticky'],\n})\nexport class MatFooterRowDef extends CdkFooterRowDef {}\n\n/**\n * Data row definition for the mat-table.\n * Captures the data row's template and other properties such as the columns to display and\n * a when predicate that describes when this row should be used.\n */\n@Directive({\n  selector: '[matRowDef]',\n  providers: [{provide: CdkRowDef, useExisting: MatRowDef}],\n  inputs: ['columns: matRowDefColumns', 'when: matRowDefWhen'],\n})\nexport class MatRowDef<T> extends CdkRowDef<T> {}\n\n/** Footer template container that contains the cell outlet. Adds the right class and role. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-header-row, tr[mat-header-row]',\n  template: CDK_ROW_TEMPLATE,\n  host: {\n    'class': 'mat-header-row',\n    'role': 'row',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matHeaderRow',\n  providers: [{provide: CdkHeaderRow, useExisting: MatHeaderRow}],\n})\nexport class MatHeaderRow extends CdkHeaderRow { }\n\n/** Footer template container that contains the cell outlet. Adds the right class and role. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-footer-row, tr[mat-footer-row]',\n  template: CDK_ROW_TEMPLATE,\n  host: {\n    'class': 'mat-footer-row',\n    'role': 'row',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matFooterRow',\n  providers: [{provide: CdkFooterRow, useExisting: MatFooterRow}],\n})\nexport class MatFooterRow extends CdkFooterRow { }\n\n/** Data row template container that contains the cell outlet. Adds the right class and role. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-row, tr[mat-row]',\n  template: CDK_ROW_TEMPLATE,\n  host: {\n    'class': 'mat-row',\n    'role': 'row',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matRow',\n  providers: [{provide: CdkRow, useExisting: MatRow}],\n})\nexport class MatRow extends CdkRow { }\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatTable} from './table';\nimport {CdkTableModule} from '@angular/cdk/table';\nimport {\n  MatCell,\n  MatCellDef,\n  MatColumnDef,\n  MatFooterCell,\n  MatFooterCellDef,\n  MatHeaderCell,\n  MatHeaderCellDef\n} from './cell';\nimport {\n  MatFooterRow,\n  MatFooterRowDef,\n  MatHeaderRow,\n  MatHeaderRowDef,\n  MatRow,\n  MatRowDef\n} from './row';\nimport {CommonModule} from '@angular/common';\nimport {MatCommonModule} from '@angular/material/core';\n\nconst EXPORTED_DECLARATIONS = [\n  // Table\n  MatTable,\n\n  // Template defs\n  MatHeaderCellDef,\n  MatHeaderRowDef,\n  MatColumnDef,\n  MatCellDef,\n  MatRowDef,\n  MatFooterCellDef,\n  MatFooterRowDef,\n\n  // Cell directives\n  MatHeaderCell,\n  MatCell,\n  MatFooterCell,\n\n  // Row directions\n  MatHeaderRow,\n  MatRow,\n  MatFooterRow,\n];\n\n@NgModule({\n  imports: [CdkTableModule, CommonModule, MatCommonModule],\n  exports: EXPORTED_DECLARATIONS,\n  declarations: EXPORTED_DECLARATIONS,\n})\nexport class MatTableModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {_isNumberValue} from '@angular/cdk/coercion';\nimport {DataSource} from '@angular/cdk/table';\nimport {\n  BehaviorSubject,\n  combineLatest,\n  merge,\n  Observable,\n  of as observableOf,\n  Subscription\n} from 'rxjs';\nimport {MatPaginator, PageEvent} from '@angular/material/paginator';\nimport {MatSort, Sort} from '@angular/material/sort';\nimport {map} from 'rxjs/operators';\n\n/**\n * Corresponds to `Number.MAX_SAFE_INTEGER`. Moved out into a variable here due to\n * flaky browser support and the value not being defined in Closure's typings.\n */\nconst MAX_SAFE_INTEGER = 9007199254740991;\n\n/**\n * Data source that accepts a client-side data array and includes native support of filtering,\n * sorting (using MatSort), and pagination (using MatPaginator).\n *\n * Allows for sort customization by overriding sortingDataAccessor, which defines how data\n * properties are accessed. Also allows for filter customization by overriding filterTermAccessor,\n * which defines how row data is converted to a string for filter matching.\n */\nexport class MatTableDataSource<T> extends DataSource<T> {\n  /** Stream that emits when a new data array is set on the data source. */\n  private readonly _data: BehaviorSubject<T[]>;\n\n  /** Stream emitting render data to the table (depends on ordered data changes). */\n  private readonly _renderData = new BehaviorSubject<T[]>([]);\n\n  /** Stream that emits when a new filter string is set on the data source. */\n  private readonly _filter = new BehaviorSubject<string>('');\n\n  /**\n   * Subscription to the changes that should trigger an update to the table's rendered rows, such\n   * as filtering, sorting, pagination, or base data changes.\n   */\n  _renderChangesSubscription = Subscription.EMPTY;\n\n  /**\n   * The filtered set of data that has been matched by the filter string, or all the data if there\n   * is no filter. Useful for knowing the set of data the table represents.\n   * For example, a 'selectAll()' function would likely want to select the set of filtered data\n   * shown to the user rather than all the data.\n   */\n  filteredData: T[];\n\n  /** Array of data that should be rendered by the table, where each object represents one row. */\n  get data() { return this._data.value; }\n  set data(data: T[]) { this._data.next(data); }\n\n  /**\n   * Filter term that should be used to filter out objects from the data array. To override how\n   * data objects match to this filter string, provide a custom function for filterPredicate.\n   */\n  get filter(): string { return this._filter.value; }\n  set filter(filter: string) { this._filter.next(filter); }\n\n  /**\n   * Instance of the MatSort directive used by the table to control its sorting. Sort changes\n   * emitted by the MatSort will trigger an update to the table's rendered data.\n   */\n  get sort(): MatSort | null { return this._sort; }\n  set sort(sort: MatSort|null) {\n    this._sort = sort;\n    this._updateChangeSubscription();\n  }\n  private _sort: MatSort|null;\n\n  /**\n   * Instance of the MatPaginator component used by the table to control what page of the data is\n   * displayed. Page changes emitted by the MatPaginator will trigger an update to the\n   * table's rendered data.\n   *\n   * Note that the data source uses the paginator's properties to calculate which page of data\n   * should be displayed. If the paginator receives its properties as template inputs,\n   * e.g. `[pageLength]=100` or `[pageIndex]=1`, then be sure that the paginator's view has been\n   * initialized before assigning it to this data source.\n   */\n  get paginator(): MatPaginator | null { return this._paginator; }\n  set paginator(paginator: MatPaginator|null) {\n    this._paginator = paginator;\n    this._updateChangeSubscription();\n  }\n  private _paginator: MatPaginator|null;\n\n  /**\n   * Data accessor function that is used for accessing data properties for sorting through\n   * the default sortData function.\n   * This default function assumes that the sort header IDs (which defaults to the column name)\n   * matches the data's properties (e.g. column Xyz represents data['Xyz']).\n   * May be set to a custom function for different behavior.\n   * @param data Data object that is being accessed.\n   * @param sortHeaderId The name of the column that represents the data.\n   */\n  sortingDataAccessor: ((data: T, sortHeaderId: string) => string|number) =\n      (data: T, sortHeaderId: string): string|number => {\n    const value = (data as {[key: string]: any})[sortHeaderId];\n\n    if (_isNumberValue(value)) {\n      const numberValue = Number(value);\n\n      // Numbers beyond `MAX_SAFE_INTEGER` can't be compared reliably so we\n      // leave them as strings. For more info: https://goo.gl/y5vbSg\n      return numberValue < MAX_SAFE_INTEGER ? numberValue : value;\n    }\n\n    return value;\n  }\n\n  /**\n   * Gets a sorted copy of the data array based on the state of the MatSort. Called\n   * after changes are made to the filtered data or when sort changes are emitted from MatSort.\n   * By default, the function retrieves the active sort and its direction and compares data\n   * by retrieving data using the sortingDataAccessor. May be overridden for a custom implementation\n   * of data ordering.\n   * @param data The array of data that should be sorted.\n   * @param sort The connected MatSort that holds the current sort state.\n   */\n  sortData: ((data: T[], sort: MatSort) => T[]) = (data: T[], sort: MatSort): T[] => {\n    const active = sort.active;\n    const direction = sort.direction;\n    if (!active || direction == '') { return data; }\n\n    return data.sort((a, b) => {\n      let valueA = this.sortingDataAccessor(a, active);\n      let valueB = this.sortingDataAccessor(b, active);\n\n      // If both valueA and valueB exist (truthy), then compare the two. Otherwise, check if\n      // one value exists while the other doesn't. In this case, existing value should come first.\n      // This avoids inconsistent results when comparing values to undefined/null.\n      // If neither value exists, return 0 (equal).\n      let comparatorResult = 0;\n      if (valueA != null && valueB != null) {\n        // Check if one value is greater than the other; if equal, comparatorResult should remain 0.\n        if (valueA > valueB) {\n          comparatorResult = 1;\n        } else if (valueA < valueB) {\n          comparatorResult = -1;\n        }\n      } else if (valueA != null) {\n        comparatorResult = 1;\n      } else if (valueB != null) {\n        comparatorResult = -1;\n      }\n\n      return comparatorResult * (direction == 'asc' ? 1 : -1);\n    });\n  }\n\n  /**\n   * Checks if a data object matches the data source's filter string. By default, each data object\n   * is converted to a string of its properties and returns true if the filter has\n   * at least one occurrence in that string. By default, the filter string has its whitespace\n   * trimmed and the match is case-insensitive. May be overridden for a custom implementation of\n   * filter matching.\n   * @param data Data object used to check against the filter.\n   * @param filter Filter string that has been set on the data source.\n   * @returns Whether the filter matches against the data\n   */\n  filterPredicate: ((data: T, filter: string) => boolean) = (data: T, filter: string): boolean => {\n    // Transform the data into a lowercase string of all property values.\n    const dataStr = Object.keys(data).reduce((currentTerm: string, key: string) => {\n      // Use an obscure Unicode character to delimit the words in the concatenated string.\n      // This avoids matches where the values of two columns combined will match the user's query\n      // (e.g. `Flute` and `Stop` will match `Test`). The character is intended to be something\n      // that has a very low chance of being typed in by somebody in a text field. This one in\n      // particular is \"White up-pointing triangle with dot\" from\n      // https://en.wikipedia.org/wiki/List_of_Unicode_characters\n      return currentTerm + (data as {[key: string]: any})[key] + '◬';\n    }, '').toLowerCase();\n\n    // Transform the filter by converting it to lowercase and removing whitespace.\n    const transformedFilter = filter.trim().toLowerCase();\n\n    return dataStr.indexOf(transformedFilter) != -1;\n  }\n\n  constructor(initialData: T[] = []) {\n    super();\n    this._data = new BehaviorSubject<T[]>(initialData);\n    this._updateChangeSubscription();\n  }\n\n  /**\n   * Subscribe to changes that should trigger an update to the table's rendered rows. When the\n   * changes occur, process the current state of the filter, sort, and pagination along with\n   * the provided base data and send it to the table for rendering.\n   */\n  _updateChangeSubscription() {\n    // Sorting and/or pagination should be watched if MatSort and/or MatPaginator are provided.\n    // The events should emit whenever the component emits a change or initializes, or if no\n    // component is provided, a stream with just a null event should be provided.\n    // The `sortChange` and `pageChange` acts as a signal to the combineLatests below so that the\n    // pipeline can progress to the next step. Note that the value from these streams are not used,\n    // they purely act as a signal to progress in the pipeline.\n    const sortChange: Observable<Sort|null|void> = this._sort ?\n        merge<Sort|void>(this._sort.sortChange, this._sort.initialized) :\n        observableOf(null);\n    const pageChange: Observable<PageEvent|null|void> = this._paginator ?\n        merge<PageEvent|void>(this._paginator.page, this._paginator.initialized) :\n        observableOf(null);\n\n    const dataStream = this._data;\n    // Watch for base data or filter changes to provide a filtered set of data.\n    const filteredData = combineLatest(dataStream, this._filter)\n      .pipe(map(([data]) => this._filterData(data)));\n    // Watch for filtered data or sort changes to provide an ordered set of data.\n    const orderedData = combineLatest(filteredData, sortChange)\n      .pipe(map(([data]) => this._orderData(data)));\n    // Watch for ordered data or page changes to provide a paged set of data.\n    const paginatedData = combineLatest(orderedData, pageChange)\n      .pipe(map(([data]) => this._pageData(data)));\n    // Watched for paged data changes and send the result to the table to render.\n    this._renderChangesSubscription.unsubscribe();\n    this._renderChangesSubscription = paginatedData.subscribe(data => this._renderData.next(data));\n  }\n\n  /**\n   * Returns a filtered data array where each filter object contains the filter string within\n   * the result of the filterTermAccessor function. If no filter is set, returns the data array\n   * as provided.\n   */\n  _filterData(data: T[]) {\n    // If there is a filter string, filter out data that does not contain it.\n    // Each data object is converted to a string using the function defined by filterTermAccessor.\n    // May be overridden for customization.\n    this.filteredData =\n        !this.filter ? data : data.filter(obj => this.filterPredicate(obj, this.filter));\n\n    if (this.paginator) { this._updatePaginator(this.filteredData.length); }\n\n    return this.filteredData;\n  }\n\n  /**\n   * Returns a sorted copy of the data if MatSort has a sort applied, otherwise just returns the\n   * data array as provided. Uses the default data accessor for data lookup, unless a\n   * sortDataAccessor function is defined.\n   */\n  _orderData(data: T[]): T[] {\n    // If there is no active sort or direction, return the data without trying to sort.\n    if (!this.sort) { return data; }\n\n    return this.sortData(data.slice(), this.sort);\n  }\n\n  /**\n   * Returns a paged splice of the provided data array according to the provided MatPaginator's page\n   * index and length. If there is no paginator provided, returns the data array as provided.\n   */\n  _pageData(data: T[]): T[] {\n    if (!this.paginator) { return data; }\n\n    const startIndex = this.paginator.pageIndex * this.paginator.pageSize;\n    return data.slice().splice(startIndex, this.paginator.pageSize);\n  }\n\n  /**\n   * Updates the paginator to reflect the length of the filtered data, and makes sure that the page\n   * index does not exceed the paginator's last page. Values are changed in a resolved promise to\n   * guard against making property changes within a round of change detection.\n   */\n  _updatePaginator(filteredDataLength: number) {\n    Promise.resolve().then(() => {\n      if (!this.paginator) { return; }\n\n      this.paginator.length = filteredDataLength;\n\n      // If the page index is set beyond the page, reduce it to the last page.\n      if (this.paginator.pageIndex > 0) {\n        const lastPageIndex = Math.ceil(this.paginator.length / this.paginator.pageSize) - 1 || 0;\n        this.paginator.pageIndex = Math.min(this.paginator.pageIndex, lastPageIndex);\n      }\n    });\n  }\n\n  /**\n   * Used by the MatTable. Called when it connects to the data source.\n   * @docs-private\n   */\n  connect() { return this._renderData; }\n\n  /**\n   * Used by the MatTable. Called when it is destroyed. No-op.\n   * @docs-private\n   */\n  disconnect() { }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, ElementRef, Inject, InjectionToken, NgZone} from '@angular/core';\n\n\n/**\n * Interface for a a MatInkBar positioner method, defining the positioning and width of the ink\n * bar in a set of tabs.\n */\n// tslint:disable-next-line class-name Using leading underscore to denote internal interface.\nexport interface _MatInkBarPositioner {\n  (element: HTMLElement): { left: string, width: string };\n}\n\n/** Injection token for the MatInkBar's Positioner. */\nexport const _MAT_INK_BAR_POSITIONER =\n  new InjectionToken<_MatInkBarPositioner>('MatInkBarPositioner', {\n    providedIn: 'root',\n    factory: _MAT_INK_BAR_POSITIONER_FACTORY\n  });\n\n/**\n * The default positioner function for the MatInkBar.\n * @docs-private\n */\nexport function _MAT_INK_BAR_POSITIONER_FACTORY(): _MatInkBarPositioner {\n  const method = (element: HTMLElement) => ({\n    left: element ? (element.offsetLeft || 0) + 'px' : '0',\n    width: element ? (element.offsetWidth || 0) + 'px' : '0',\n  });\n\n  return method;\n}\n\n/**\n * The ink-bar is used to display and animate the line underneath the current active tab label.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-ink-bar',\n  host: {\n    'class': 'mat-ink-bar',\n  },\n})\nexport class MatInkBar {\n  constructor(\n    private _elementRef: ElementRef<HTMLElement>,\n    private _ngZone: NgZone,\n    @Inject(_MAT_INK_BAR_POSITIONER) private _inkBarPositioner: _MatInkBarPositioner) { }\n\n  /**\n   * Calculates the styles from the provided element in order to align the ink-bar to that element.\n   * Shows the ink bar if previously set as hidden.\n   * @param element\n   */\n  alignToElement(element: HTMLElement) {\n    this.show();\n\n    if (typeof requestAnimationFrame !== 'undefined') {\n      this._ngZone.runOutsideAngular(() => {\n        requestAnimationFrame(() => this._setStyles(element));\n      });\n    } else {\n      this._setStyles(element);\n    }\n  }\n\n  /** Shows the ink bar. */\n  show(): void {\n    this._elementRef.nativeElement.style.visibility = 'visible';\n  }\n\n  /** Hides the ink bar. */\n  hide(): void {\n    this._elementRef.nativeElement.style.visibility = 'hidden';\n  }\n\n  /**\n   * Sets the proper styles to the ink bar element.\n   * @param element\n   */\n  private _setStyles(element: HTMLElement) {\n    const positions = this._inkBarPositioner(element);\n    const inkBar: HTMLElement = this._elementRef.nativeElement;\n\n    inkBar.style.left = positions.left;\n    inkBar.style.width = positions.width;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, TemplateRef} from '@angular/core';\n\n/** Decorates the `ng-template` tags and reads out the template from it. */\n@Directive({selector: '[matTabContent]'})\nexport class MatTabContent {\n  constructor(public template: TemplateRef<any>) { }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive} from '@angular/core';\nimport {CdkPortal} from '@angular/cdk/portal';\n\n/** Used to flag tab labels for use with the portal directive */\n@Directive({\n  selector: '[mat-tab-label], [matTabLabel]',\n})\nexport class MatTabLabel extends CdkPortal {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {TemplatePortal} from '@angular/cdk/portal';\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  ContentChild,\n  Input,\n  OnChanges,\n  OnDestroy,\n  OnInit,\n  SimpleChanges,\n  TemplateRef,\n  ViewChild,\n  ViewContainerRef,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {CanDisable, CanDisableCtor, mixinDisabled} from '@angular/material/core';\nimport {Subject} from 'rxjs';\nimport {MatTabContent} from './tab-content';\nimport {MatTabLabel} from './tab-label';\n\n\n// Boilerplate for applying mixins to MatTab.\n/** @docs-private */\nexport class MatTabBase {}\nexport const _MatTabMixinBase: CanDisableCtor & typeof MatTabBase =\n    mixinDisabled(MatTabBase);\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-tab',\n  templateUrl: 'tab.html',\n  inputs: ['disabled'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matTab',\n})\nexport class MatTab extends _MatTabMixinBase implements OnInit, CanDisable, OnChanges, OnDestroy {\n  /** Content for the tab label given by `<ng-template mat-tab-label>`. */\n  @ContentChild(MatTabLabel) templateLabel: MatTabLabel;\n\n  /**\n   * Template provided in the tab content that will be used if present, used to enable lazy-loading\n   */\n  @ContentChild(MatTabContent, {read: TemplateRef}) _explicitContent: TemplateRef<any>;\n\n  /** Template inside the MatTab view that contains an `<ng-content>`. */\n  @ViewChild(TemplateRef) _implicitContent: TemplateRef<any>;\n\n  /** Plain text label for the tab, used when there is no template label. */\n  @Input('label') textLabel: string = '';\n\n  /** Aria label for the tab. */\n  @Input('aria-label') ariaLabel: string;\n\n  /**\n   * Reference to the element that the tab is labelled by.\n   * Will be cleared if `aria-label` is set at the same time.\n   */\n  @Input('aria-labelledby') ariaLabelledby: string;\n\n  /** Portal that will be the hosted content of the tab */\n  private _contentPortal: TemplatePortal | null = null;\n\n  /** @docs-private */\n  get content(): TemplatePortal | null {\n    return this._contentPortal;\n  }\n\n  /** Emits whenever the internal state of the tab changes. */\n  readonly _stateChanges = new Subject<void>();\n\n  /**\n   * The relatively indexed position where 0 represents the center, negative is left, and positive\n   * represents the right.\n   */\n  position: number | null = null;\n\n  /**\n   * The initial relatively index origin of the tab if it was created and selected after there\n   * was already a selected tab. Provides context of what position the tab should originate from.\n   */\n  origin: number | null = null;\n\n  /**\n   * Whether the tab is currently active.\n   */\n  isActive = false;\n\n  constructor(private _viewContainerRef: ViewContainerRef) {\n    super();\n  }\n\n  ngOnChanges(changes: SimpleChanges): void {\n    if (changes.hasOwnProperty('textLabel') || changes.hasOwnProperty('disabled')) {\n      this._stateChanges.next();\n    }\n  }\n\n  ngOnDestroy(): void {\n    this._stateChanges.complete();\n  }\n\n  ngOnInit(): void {\n    this._contentPortal = new TemplatePortal(\n        this._explicitContent || this._implicitContent, this._viewContainerRef);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/**\n * Animations used by the Material tabs.\n * @docs-private\n */\nexport const matTabsAnimations: {\n  readonly translateTab: AnimationTriggerMetadata;\n} = {\n  /** Animation translates a tab along the X axis. */\n  translateTab: trigger('translateTab', [\n    // Note: transitions to `none` instead of 0, because some browsers might blur the content.\n    state('center, void, left-origin-center, right-origin-center', style({transform: 'none'})),\n\n    // If the tab is either on the left or right, we additionally add a `min-height` of 1px\n    // in order to ensure that the element has a height before its state changes. This is\n    // necessary because Chrome does seem to skip the transition in RTL mode if the element does\n    // not have a static height and is not rendered. See related issue: #9465\n    state('left', style({transform: 'translate3d(-100%, 0, 0)', minHeight: '1px'})),\n    state('right', style({transform: 'translate3d(100%, 0, 0)', minHeight: '1px'})),\n\n    transition('* => left, * => right, left => center, right => center',\n        animate('500ms cubic-bezier(0.35, 0, 0.25, 1)')),\n    transition('void => left-origin-center', [\n      style({transform: 'translate3d(-100%, 0, 0)'}),\n      animate('500ms cubic-bezier(0.35, 0, 0.25, 1)')\n    ]),\n    transition('void => right-origin-center', [\n      style({transform: 'translate3d(100%, 0, 0)'}),\n      animate('500ms cubic-bezier(0.35, 0, 0.25, 1)')\n    ])\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor, FocusOrigin} from '@angular/cdk/a11y';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty, coerceNumberProperty} from '@angular/cdk/coercion';\nimport {\n  DOWN_ARROW,\n  END,\n  HOME,\n  LEFT_ARROW,\n  PAGE_DOWN,\n  PAGE_UP,\n  RIGHT_ARROW,\n  UP_ARROW,\n} from '@angular/cdk/keycodes';\nimport {\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Output,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {\n  CanColor,\n  CanColorCtor,\n  CanDisable,\n  CanDisableCtor,\n  HammerInput,\n  HasTabIndex,\n  HasTabIndexCtor,\n  mixinColor,\n  mixinDisabled,\n  mixinTabIndex,\n} from '@angular/material/core';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\nimport {Subscription} from 'rxjs';\n\n/**\n * Visually, a 30px separation between tick marks looks best. This is very subjective but it is\n * the default separation we chose.\n */\nconst MIN_AUTO_TICK_SEPARATION = 30;\n\n/** The thumb gap size for a disabled slider. */\nconst DISABLED_THUMB_GAP = 7;\n\n/** The thumb gap size for a non-active slider at its minimum value. */\nconst MIN_VALUE_NONACTIVE_THUMB_GAP = 7;\n\n/** The thumb gap size for an active slider at its minimum value. */\nconst MIN_VALUE_ACTIVE_THUMB_GAP = 10;\n\n/**\n * Provider Expression that allows mat-slider to register as a ControlValueAccessor.\n * This allows it to support [(ngModel)] and [formControl].\n * @docs-private\n */\nexport const MAT_SLIDER_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatSlider),\n  multi: true\n};\n\n/** A simple change event emitted by the MatSlider component. */\nexport class MatSliderChange {\n  /** The MatSlider that changed. */\n  source: MatSlider;\n\n  /** The new value of the source slider. */\n  value: number | null;\n}\n\n\n// Boilerplate for applying mixins to MatSlider.\n/** @docs-private */\nexport class MatSliderBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatSliderMixinBase:\n    HasTabIndexCtor &\n    CanColorCtor &\n    CanDisableCtor &\n    typeof MatSliderBase =\n        mixinTabIndex(mixinColor(mixinDisabled(MatSliderBase), 'accent'));\n\n/**\n * Allows users to select from a range of values by moving the slider thumb. It is similar in\n * behavior to the native `<input type=\"range\">` element.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-slider',\n  exportAs: 'matSlider',\n  providers: [MAT_SLIDER_VALUE_ACCESSOR],\n  host: {\n    '(focus)': '_onFocus()',\n    '(blur)': '_onBlur()',\n    '(mousedown)': '_onMousedown($event)',\n    '(keydown)': '_onKeydown($event)',\n    '(keyup)': '_onKeyup()',\n    '(mouseenter)': '_onMouseenter()',\n    '(slide)': '_onSlide($event)',\n    '(slideend)': '_onSlideEnd()',\n    '(slidestart)': '_onSlideStart($event)',\n    'class': 'mat-slider',\n    'role': 'slider',\n    '[tabIndex]': 'tabIndex',\n    '[attr.aria-disabled]': 'disabled',\n    '[attr.aria-valuemax]': 'max',\n    '[attr.aria-valuemin]': 'min',\n    '[attr.aria-valuenow]': 'value',\n    '[attr.aria-orientation]': 'vertical ? \"vertical\" : \"horizontal\"',\n    '[class.mat-slider-disabled]': 'disabled',\n    '[class.mat-slider-has-ticks]': 'tickInterval',\n    '[class.mat-slider-horizontal]': '!vertical',\n    '[class.mat-slider-axis-inverted]': '_invertAxis',\n    '[class.mat-slider-sliding]': '_isSliding',\n    '[class.mat-slider-thumb-label-showing]': 'thumbLabel',\n    '[class.mat-slider-vertical]': 'vertical',\n    '[class.mat-slider-min-value]': '_isMinValue',\n    '[class.mat-slider-hide-last-tick]': 'disabled || _isMinValue && _thumbGap && _invertAxis',\n    '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"',\n  },\n  templateUrl: 'slider.html',\n  styleUrls: ['slider.css'],\n  inputs: ['disabled', 'color', 'tabIndex'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatSlider extends _MatSliderMixinBase\n    implements ControlValueAccessor, OnDestroy, CanDisable, CanColor, OnInit, HasTabIndex {\n  /** Whether the slider is inverted. */\n  @Input()\n  get invert(): boolean { return this._invert; }\n  set invert(value: boolean) {\n    this._invert = coerceBooleanProperty(value);\n  }\n  private _invert = false;\n\n  /** The maximum value that the slider can have. */\n  @Input()\n  get max(): number { return this._max; }\n  set max(v: number) {\n    this._max = coerceNumberProperty(v, this._max);\n    this._percent = this._calculatePercentage(this._value);\n\n    // Since this also modifies the percentage, we need to let the change detection know.\n    this._changeDetectorRef.markForCheck();\n  }\n  private _max: number = 100;\n\n  /** The minimum value that the slider can have. */\n  @Input()\n  get min(): number { return this._min; }\n  set min(v: number) {\n    this._min = coerceNumberProperty(v, this._min);\n\n    // If the value wasn't explicitly set by the user, set it to the min.\n    if (this._value === null) {\n      this.value = this._min;\n    }\n    this._percent = this._calculatePercentage(this._value);\n\n    // Since this also modifies the percentage, we need to let the change detection know.\n    this._changeDetectorRef.markForCheck();\n  }\n  private _min: number = 0;\n\n  /** The values at which the thumb will snap. */\n  @Input()\n  get step(): number { return this._step; }\n  set step(v: number) {\n    this._step = coerceNumberProperty(v, this._step);\n\n    if (this._step % 1 !== 0) {\n      this._roundToDecimal = this._step.toString().split('.').pop()!.length;\n    }\n\n    // Since this could modify the label, we need to notify the change detection.\n    this._changeDetectorRef.markForCheck();\n  }\n  private _step: number = 1;\n\n  /** Whether or not to show the thumb label. */\n  @Input()\n  get thumbLabel(): boolean { return this._thumbLabel; }\n  set thumbLabel(value: boolean) { this._thumbLabel = coerceBooleanProperty(value); }\n  private _thumbLabel: boolean = false;\n\n  /**\n   * How often to show ticks. Relative to the step so that a tick always appears on a step.\n   * Ex: Tick interval of 4 with a step of 3 will draw a tick every 4 steps (every 12 values).\n   */\n  @Input()\n  get tickInterval() { return this._tickInterval; }\n  set tickInterval(value: 'auto' | number) {\n    if (value === 'auto') {\n      this._tickInterval = 'auto';\n    } else if (typeof value === 'number' || typeof value === 'string') {\n      this._tickInterval = coerceNumberProperty(value, this._tickInterval as number);\n    } else {\n      this._tickInterval = 0;\n    }\n  }\n  private _tickInterval: 'auto' | number = 0;\n\n  /** Value of the slider. */\n  @Input()\n  get value(): number | null {\n    // If the value needs to be read and it is still uninitialized, initialize it to the min.\n    if (this._value === null) {\n      this.value = this._min;\n    }\n    return this._value;\n  }\n  set value(v: number | null) {\n    if (v !== this._value) {\n      let value = coerceNumberProperty(v);\n\n      // While incrementing by a decimal we can end up with values like 33.300000000000004.\n      // Truncate it to ensure that it matches the label and to make it easier to work with.\n      if (this._roundToDecimal) {\n        value = parseFloat(value.toFixed(this._roundToDecimal));\n      }\n\n      this._value = value;\n      this._percent = this._calculatePercentage(this._value);\n\n      // Since this also modifies the percentage, we need to let the change detection know.\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n  private _value: number | null = null;\n\n  /**\n   * Function that will be used to format the value before it is displayed\n   * in the thumb label. Can be used to format very large number in order\n   * for them to fit into the slider thumb.\n   */\n  @Input() displayWith: (value: number | null) => string | number;\n\n  /** Whether the slider is vertical. */\n  @Input()\n  get vertical(): boolean { return this._vertical; }\n  set vertical(value: boolean) {\n    this._vertical = coerceBooleanProperty(value);\n  }\n  private _vertical = false;\n\n  /** Event emitted when the slider value has changed. */\n  @Output() readonly change: EventEmitter<MatSliderChange> = new EventEmitter<MatSliderChange>();\n\n  /** Event emitted when the slider thumb moves. */\n  @Output() readonly input: EventEmitter<MatSliderChange> = new EventEmitter<MatSliderChange>();\n\n  /**\n   * Emits when the raw value of the slider changes. This is here primarily\n   * to facilitate the two-way binding for the `value` input.\n   * @docs-private\n   */\n  @Output() readonly valueChange: EventEmitter<number | null> = new EventEmitter<number | null>();\n\n  /** The value to be used for display purposes. */\n  get displayValue(): string | number {\n    if (this.displayWith) {\n      return this.displayWith(this.value);\n    }\n\n    // Note that this could be improved further by rounding something like 0.999 to 1 or\n    // 0.899 to 0.9, however it is very performance sensitive, because it gets called on\n    // every change detection cycle.\n    if (this._roundToDecimal && this.value && this.value % 1 !== 0) {\n      return this.value.toFixed(this._roundToDecimal);\n    }\n\n    return this.value || 0;\n  }\n\n  /** set focus to the host element */\n  focus() {\n    this._focusHostElement();\n  }\n\n  /** blur the host element */\n  blur() {\n    this._blurHostElement();\n  }\n\n  /** onTouch function registered via registerOnTouch (ControlValueAccessor). */\n  onTouched: () => any = () => {};\n\n  /** The percentage of the slider that coincides with the value. */\n  get percent(): number { return this._clamp(this._percent); }\n  private _percent: number = 0;\n\n  /**\n   * Whether or not the thumb is sliding.\n   * Used to determine if there should be a transition for the thumb and fill track.\n   */\n  _isSliding: boolean = false;\n\n  /**\n   * Whether or not the slider is active (clicked or sliding).\n   * Used to shrink and grow the thumb as according to the Material Design spec.\n   */\n  _isActive: boolean = false;\n\n  /**\n   * Whether the axis of the slider is inverted.\n   * (i.e. whether moving the thumb in the positive x or y direction decreases the slider's value).\n   */\n  get _invertAxis() {\n    // Standard non-inverted mode for a vertical slider should be dragging the thumb from bottom to\n    // top. However from a y-axis standpoint this is inverted.\n    return this.vertical ? !this.invert : this.invert;\n  }\n\n\n  /** Whether the slider is at its minimum value. */\n  get _isMinValue() {\n    return this.percent === 0;\n  }\n\n  /**\n   * The amount of space to leave between the slider thumb and the track fill & track background\n   * elements.\n   */\n  get _thumbGap() {\n    if (this.disabled) {\n      return DISABLED_THUMB_GAP;\n    }\n    if (this._isMinValue && !this.thumbLabel) {\n      return this._isActive ? MIN_VALUE_ACTIVE_THUMB_GAP : MIN_VALUE_NONACTIVE_THUMB_GAP;\n    }\n    return 0;\n  }\n\n  /** CSS styles for the track background element. */\n  get _trackBackgroundStyles(): { [key: string]: string } {\n    const axis = this.vertical ? 'Y' : 'X';\n    const scale = this.vertical ? `1, ${1 - this.percent}, 1` : `${1 - this.percent}, 1, 1`;\n    const sign = this._shouldInvertMouseCoords() ? '-' : '';\n\n    return {\n      // scale3d avoids some rendering issues in Chrome. See #12071.\n      transform: `translate${axis}(${sign}${this._thumbGap}px) scale3d(${scale})`\n    };\n  }\n\n  /** CSS styles for the track fill element. */\n  get _trackFillStyles(): { [key: string]: string } {\n    const axis = this.vertical ? 'Y' : 'X';\n    const scale = this.vertical ? `1, ${this.percent}, 1` : `${this.percent}, 1, 1`;\n    const sign = this._shouldInvertMouseCoords() ? '' : '-';\n\n    return {\n      // scale3d avoids some rendering issues in Chrome. See #12071.\n      transform: `translate${axis}(${sign}${this._thumbGap}px) scale3d(${scale})`\n    };\n  }\n\n  /** CSS styles for the ticks container element. */\n  get _ticksContainerStyles(): { [key: string]: string } {\n    let axis = this.vertical ? 'Y' : 'X';\n    // For a horizontal slider in RTL languages we push the ticks container off the left edge\n    // instead of the right edge to avoid causing a horizontal scrollbar to appear.\n    let sign = !this.vertical && this._getDirection() == 'rtl' ? '' : '-';\n    let offset = this._tickIntervalPercent / 2 * 100;\n    return {\n      'transform': `translate${axis}(${sign}${offset}%)`\n    };\n  }\n\n  /** CSS styles for the ticks element. */\n  get _ticksStyles(): { [key: string]: string } {\n    let tickSize = this._tickIntervalPercent * 100;\n    let backgroundSize = this.vertical ? `2px ${tickSize}%` : `${tickSize}% 2px`;\n    let axis = this.vertical ? 'Y' : 'X';\n    // Depending on the direction we pushed the ticks container, push the ticks the opposite\n    // direction to re-center them but clip off the end edge. In RTL languages we need to flip the\n    // ticks 180 degrees so we're really cutting off the end edge abd not the start.\n    let sign = !this.vertical && this._getDirection() == 'rtl' ? '-' : '';\n    let rotate = !this.vertical && this._getDirection() == 'rtl' ? ' rotate(180deg)' : '';\n    let styles: { [key: string]: string } = {\n      'backgroundSize': backgroundSize,\n      // Without translateZ ticks sometimes jitter as the slider moves on Chrome & Firefox.\n      'transform': `translateZ(0) translate${axis}(${sign}${tickSize / 2}%)${rotate}`\n    };\n\n    if (this._isMinValue && this._thumbGap) {\n      let side = this.vertical ?\n          (this._invertAxis ? 'Bottom' : 'Top') :\n          (this._invertAxis ? 'Right' : 'Left');\n      styles[`padding${side}`] = `${this._thumbGap}px`;\n    }\n\n    return styles;\n  }\n\n  get _thumbContainerStyles(): { [key: string]: string } {\n    let axis = this.vertical ? 'Y' : 'X';\n    // For a horizontal slider in RTL languages we push the thumb container off the left edge\n    // instead of the right edge to avoid causing a horizontal scrollbar to appear.\n    let invertOffset =\n        (this._getDirection() == 'rtl' && !this.vertical) ? !this._invertAxis : this._invertAxis;\n    let offset = (invertOffset ? this.percent : 1 - this.percent) * 100;\n    return {\n      'transform': `translate${axis}(-${offset}%)`\n    };\n  }\n\n  /** The size of a tick interval as a percentage of the size of the track. */\n  private _tickIntervalPercent: number = 0;\n\n  /** The dimensions of the slider. */\n  private _sliderDimensions: ClientRect | null = null;\n\n  private _controlValueAccessorChangeFn: (value: any) => void = () => {};\n\n  /** Decimal places to round to, based on the step amount. */\n  private _roundToDecimal: number;\n\n  /** Subscription to the Directionality change EventEmitter. */\n  private _dirChangeSubscription = Subscription.EMPTY;\n\n  /** The value of the slider when the slide start event fires. */\n  private _valueOnSlideStart: number | null;\n\n  /** Reference to the inner slider wrapper element. */\n  @ViewChild('sliderWrapper') private _sliderWrapper: ElementRef;\n\n  /**\n   * Whether mouse events should be converted to a slider position by calculating their distance\n   * from the right or bottom edge of the slider as opposed to the top or left.\n   */\n  private _shouldInvertMouseCoords() {\n    return (this._getDirection() == 'rtl' && !this.vertical) ? !this._invertAxis : this._invertAxis;\n  }\n\n  /** The language direction for this slider element. */\n  private _getDirection() {\n    return (this._dir && this._dir.value == 'rtl') ? 'rtl' : 'ltr';\n  }\n\n  constructor(elementRef: ElementRef,\n              private _focusMonitor: FocusMonitor,\n              private _changeDetectorRef: ChangeDetectorRef,\n              @Optional() private _dir: Directionality,\n              @Attribute('tabindex') tabIndex: string,\n              // @breaking-change 8.0.0 `_animationMode` parameter to be made required.\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode?: string) {\n    super(elementRef);\n\n    this.tabIndex = parseInt(tabIndex) || 0;\n  }\n\n  ngOnInit() {\n    this._focusMonitor\n        .monitor(this._elementRef, true)\n        .subscribe((origin: FocusOrigin) => {\n          this._isActive = !!origin && origin !== 'keyboard';\n          this._changeDetectorRef.detectChanges();\n        });\n    if (this._dir) {\n      this._dirChangeSubscription = this._dir.change.subscribe(() => {\n        this._changeDetectorRef.markForCheck();\n      });\n    }\n  }\n\n  ngOnDestroy() {\n    this._focusMonitor.stopMonitoring(this._elementRef);\n    this._dirChangeSubscription.unsubscribe();\n  }\n\n  _onMouseenter() {\n    if (this.disabled) {\n      return;\n    }\n\n    // We save the dimensions of the slider here so we can use them to update the spacing of the\n    // ticks and determine where on the slider click and slide events happen.\n    this._sliderDimensions = this._getSliderDimensions();\n    this._updateTickIntervalPercent();\n  }\n\n  _onMousedown(event: MouseEvent) {\n    // Don't do anything if the slider is disabled or the\n    // user is using anything other than the main mouse button.\n    if (this.disabled || event.button !== 0) {\n      return;\n    }\n\n    const oldValue = this.value;\n    this._isSliding = false;\n    this._focusHostElement();\n    this._updateValueFromPosition({x: event.clientX, y: event.clientY});\n\n    // Emit a change and input event if the value changed.\n    if (oldValue != this.value) {\n      this._emitInputEvent();\n      this._emitChangeEvent();\n    }\n  }\n\n  _onSlide(event: HammerInput) {\n    if (this.disabled) {\n      return;\n    }\n\n    // The slide start event sometimes fails to fire on iOS, so if we're not already in the sliding\n    // state, call the slide start handler manually.\n    if (!this._isSliding) {\n      this._onSlideStart(null);\n    }\n\n    // Prevent the slide from selecting anything else.\n    event.preventDefault();\n\n    let oldValue = this.value;\n    this._updateValueFromPosition({x: event.center.x, y: event.center.y});\n\n    // Native range elements always emit `input` events when the value changed while sliding.\n    if (oldValue != this.value) {\n      this._emitInputEvent();\n    }\n  }\n\n  _onSlideStart(event: HammerInput | null) {\n    if (this.disabled || this._isSliding) {\n      return;\n    }\n\n    // Simulate mouseenter in case this is a mobile device.\n    this._onMouseenter();\n\n    this._isSliding = true;\n    this._focusHostElement();\n    this._valueOnSlideStart = this.value;\n\n    if (event) {\n      this._updateValueFromPosition({x: event.center.x, y: event.center.y});\n      event.preventDefault();\n    }\n  }\n\n  _onSlideEnd() {\n    this._isSliding = false;\n\n    if (this._valueOnSlideStart != this.value && !this.disabled) {\n      this._emitChangeEvent();\n    }\n    this._valueOnSlideStart = null;\n  }\n\n  _onFocus() {\n    // We save the dimensions of the slider here so we can use them to update the spacing of the\n    // ticks and determine where on the slider click and slide events happen.\n    this._sliderDimensions = this._getSliderDimensions();\n    this._updateTickIntervalPercent();\n  }\n\n  _onBlur() {\n    this.onTouched();\n  }\n\n  _onKeydown(event: KeyboardEvent) {\n    if (this.disabled) { return; }\n\n    let oldValue = this.value;\n\n    switch (event.keyCode) {\n      case PAGE_UP:\n        this._increment(10);\n        break;\n      case PAGE_DOWN:\n        this._increment(-10);\n        break;\n      case END:\n        this.value = this.max;\n        break;\n      case HOME:\n        this.value = this.min;\n        break;\n      case LEFT_ARROW:\n        // NOTE: For a sighted user it would make more sense that when they press an arrow key on an\n        // inverted slider the thumb moves in that direction. However for a blind user, nothing\n        // about the slider indicates that it is inverted. They will expect left to be decrement,\n        // regardless of how it appears on the screen. For speakers ofRTL languages, they probably\n        // expect left to mean increment. Therefore we flip the meaning of the side arrow keys for\n        // RTL. For inverted sliders we prefer a good a11y experience to having it \"look right\" for\n        // sighted users, therefore we do not swap the meaning.\n        this._increment(this._getDirection() == 'rtl' ? 1 : -1);\n        break;\n      case UP_ARROW:\n        this._increment(1);\n        break;\n      case RIGHT_ARROW:\n        // See comment on LEFT_ARROW about the conditions under which we flip the meaning.\n        this._increment(this._getDirection() == 'rtl' ? -1 : 1);\n        break;\n      case DOWN_ARROW:\n        this._increment(-1);\n        break;\n      default:\n        // Return if the key is not one that we explicitly handle to avoid calling preventDefault on\n        // it.\n        return;\n    }\n\n    if (oldValue != this.value) {\n      this._emitInputEvent();\n      this._emitChangeEvent();\n    }\n\n    this._isSliding = true;\n    event.preventDefault();\n  }\n\n  _onKeyup() {\n    this._isSliding = false;\n  }\n\n  /** Increments the slider by the given number of steps (negative number decrements). */\n  private _increment(numSteps: number) {\n    this.value = this._clamp((this.value || 0) + this.step * numSteps, this.min, this.max);\n  }\n\n  /** Calculate the new value from the new physical location. The value will always be snapped. */\n  private _updateValueFromPosition(pos: {x: number, y: number}) {\n    if (!this._sliderDimensions) {\n      return;\n    }\n\n    let offset = this.vertical ? this._sliderDimensions.top : this._sliderDimensions.left;\n    let size = this.vertical ? this._sliderDimensions.height : this._sliderDimensions.width;\n    let posComponent = this.vertical ? pos.y : pos.x;\n\n    // The exact value is calculated from the event and used to find the closest snap value.\n    let percent = this._clamp((posComponent - offset) / size);\n\n    if (this._shouldInvertMouseCoords()) {\n      percent = 1 - percent;\n    }\n\n    // Since the steps may not divide cleanly into the max value, if the user\n    // slid to 0 or 100 percent, we jump to the min/max value. This approach\n    // is slightly more intuitive than using `Math.ceil` below, because it\n    // follows the user's pointer closer.\n    if (percent === 0) {\n      this.value = this.min;\n    } else if (percent === 1) {\n      this.value = this.max;\n    } else {\n      const exactValue = this._calculateValue(percent);\n\n      // This calculation finds the closest step by finding the closest\n      // whole number divisible by the step relative to the min.\n      const closestValue = Math.round((exactValue - this.min) / this.step) * this.step + this.min;\n\n      // The value needs to snap to the min and max.\n      this.value = this._clamp(closestValue, this.min, this.max);\n    }\n  }\n\n  /** Emits a change event if the current value is different from the last emitted value. */\n  private _emitChangeEvent() {\n    this._controlValueAccessorChangeFn(this.value);\n    this.valueChange.emit(this.value);\n    this.change.emit(this._createChangeEvent());\n  }\n\n  /** Emits an input event when the current value is different from the last emitted value. */\n  private _emitInputEvent() {\n    this.input.emit(this._createChangeEvent());\n  }\n\n  /** Updates the amount of space between ticks as a percentage of the width of the slider. */\n  private _updateTickIntervalPercent() {\n    if (!this.tickInterval || !this._sliderDimensions) {\n      return;\n    }\n\n    if (this.tickInterval == 'auto') {\n      let trackSize = this.vertical ? this._sliderDimensions.height : this._sliderDimensions.width;\n      let pixelsPerStep = trackSize * this.step / (this.max - this.min);\n      let stepsPerTick = Math.ceil(MIN_AUTO_TICK_SEPARATION / pixelsPerStep);\n      let pixelsPerTick = stepsPerTick * this.step;\n      this._tickIntervalPercent = pixelsPerTick / trackSize;\n    } else {\n      this._tickIntervalPercent = this.tickInterval * this.step / (this.max - this.min);\n    }\n  }\n\n  /** Creates a slider change object from the specified value. */\n  private _createChangeEvent(value = this.value): MatSliderChange {\n    let event = new MatSliderChange();\n\n    event.source = this;\n    event.value = value;\n\n    return event;\n  }\n\n  /** Calculates the percentage of the slider that a value is. */\n  private _calculatePercentage(value: number | null) {\n    return ((value || 0) - this.min) / (this.max - this.min);\n  }\n\n  /** Calculates the value a percentage of the slider corresponds to. */\n  private _calculateValue(percentage: number) {\n    return this.min + percentage * (this.max - this.min);\n  }\n\n  /** Return a number between two numbers. */\n  private _clamp(value: number, min = 0, max = 1) {\n    return Math.max(min, Math.min(value, max));\n  }\n\n  /**\n   * Get the bounding client rect of the slider track element.\n   * The track is used rather than the native element to ignore the extra space that the thumb can\n   * take up.\n   */\n  private _getSliderDimensions() {\n    return this._sliderWrapper ? this._sliderWrapper.nativeElement.getBoundingClientRect() : null;\n  }\n\n  /**\n   * Focuses the native element.\n   * Currently only used to allow a blur event to fire but will be used with keyboard input later.\n   */\n  private _focusHostElement() {\n    this._elementRef.nativeElement.focus();\n  }\n\n  /** Blurs the native element. */\n  private _blurHostElement() {\n    this._elementRef.nativeElement.blur();\n  }\n\n  /**\n   * Sets the model value. Implemented as part of ControlValueAccessor.\n   * @param value\n   */\n  writeValue(value: any) {\n    this.value = value;\n  }\n\n  /**\n   * Registers a callback to be triggered when the value has changed.\n   * Implemented as part of ControlValueAccessor.\n   * @param fn Callback to be registered.\n   */\n  registerOnChange(fn: (value: any) => void) {\n    this._controlValueAccessorChangeFn = fn;\n  }\n\n  /**\n   * Registers a callback to be triggered when the component is touched.\n   * Implemented as part of ControlValueAccessor.\n   * @param fn Callback to be registered.\n   */\n  registerOnTouched(fn: any) {\n    this.onTouched = fn;\n  }\n\n  /**\n   * Sets whether the component should be disabled.\n   * Implemented as part of ControlValueAccessor.\n   * @param isDisabled\n   */\n  setDisabledState(isDisabled: boolean) {\n    this.disabled = isDisabled;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {GestureConfig, MatCommonModule} from '@angular/material/core';\nimport {HAMMER_GESTURE_CONFIG} from '@angular/platform-browser';\nimport {MatSlider} from './slider';\n\n\n@NgModule({\n  imports: [CommonModule, MatCommonModule],\n  exports: [MatSlider, MatCommonModule],\n  declarations: [MatSlider],\n  providers: [{provide: HAMMER_GESTURE_CONFIG, useClass: GestureConfig}]\n})\nexport class MatSliderModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {OverlayRef} from '@angular/cdk/overlay';\nimport {Observable, Subject} from 'rxjs';\nimport {MatSnackBarContainer} from './snack-bar-container';\n\n\n/** Event that is emitted when a snack bar is dismissed. */\nexport interface MatSnackBarDismiss {\n  /** Whether the snack bar was dismissed using the action button. */\n  dismissedByAction: boolean;\n}\n\n/**\n * Reference to a snack bar dispatched from the snack bar service.\n */\nexport class MatSnackBarRef<T> {\n  /** The instance of the component making up the content of the snack bar. */\n  instance: T;\n\n  /**\n   * The instance of the component making up the content of the snack bar.\n   * @docs-private\n   */\n  containerInstance: MatSnackBarContainer;\n\n  /** Subject for notifying the user that the snack bar has been dismissed. */\n  private readonly _afterDismissed = new Subject<MatSnackBarDismiss>();\n\n  /** Subject for notifying the user that the snack bar has opened and appeared. */\n  private readonly _afterOpened = new Subject<void>();\n\n  /** Subject for notifying the user that the snack bar action was called. */\n  private readonly _onAction = new Subject<void>();\n\n  /**\n   * Timeout ID for the duration setTimeout call. Used to clear the timeout if the snackbar is\n   * dismissed before the duration passes.\n   */\n  private _durationTimeoutId: number;\n\n  /** Whether the snack bar was dismissed using the action button. */\n  private _dismissedByAction = false;\n\n  constructor(containerInstance: MatSnackBarContainer,\n              private _overlayRef: OverlayRef) {\n    this.containerInstance = containerInstance;\n    // Dismiss snackbar on action.\n    this.onAction().subscribe(() => this.dismiss());\n    containerInstance._onExit.subscribe(() => this._finishDismiss());\n  }\n\n  /** Dismisses the snack bar. */\n  dismiss(): void {\n    if (!this._afterDismissed.closed) {\n      this.containerInstance.exit();\n    }\n    clearTimeout(this._durationTimeoutId);\n  }\n\n  /** Marks the snackbar action clicked. */\n  dismissWithAction(): void {\n    if (!this._onAction.closed) {\n      this._dismissedByAction = true;\n      this._onAction.next();\n      this._onAction.complete();\n    }\n  }\n\n\n  /**\n   * Marks the snackbar action clicked.\n   * @deprecated Use `dismissWithAction` instead.\n   * @breaking-change 8.0.0\n   */\n  closeWithAction(): void {\n    this.dismissWithAction();\n  }\n\n  /** Dismisses the snack bar after some duration */\n  _dismissAfter(duration: number): void {\n    this._durationTimeoutId = setTimeout(() => this.dismiss(), duration);\n  }\n\n  /** Marks the snackbar as opened */\n  _open(): void {\n    if (!this._afterOpened.closed) {\n      this._afterOpened.next();\n      this._afterOpened.complete();\n    }\n  }\n\n  /** Cleans up the DOM after closing. */\n  private _finishDismiss(): void {\n    this._overlayRef.dispose();\n\n    if (!this._onAction.closed) {\n      this._onAction.complete();\n    }\n\n    this._afterDismissed.next({dismissedByAction: this._dismissedByAction});\n    this._afterDismissed.complete();\n    this._dismissedByAction = false;\n  }\n\n  /** Gets an observable that is notified when the snack bar is finished closing. */\n  afterDismissed(): Observable<MatSnackBarDismiss> {\n    return this._afterDismissed.asObservable();\n  }\n\n  /** Gets an observable that is notified when the snack bar has opened and appeared. */\n  afterOpened(): Observable<void> {\n    return this.containerInstance._onEnter;\n  }\n\n  /** Gets an observable that is notified when the snack bar action is called. */\n  onAction(): Observable<void> {\n    return this._onAction.asObservable();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ViewContainerRef, InjectionToken} from '@angular/core';\nimport {AriaLivePoliteness} from '@angular/cdk/a11y';\nimport {Direction} from '@angular/cdk/bidi';\n\n/** Injection token that can be used to access the data that was passed in to a snack bar. */\nexport const MAT_SNACK_BAR_DATA = new InjectionToken<any>('MatSnackBarData');\n\n/** Possible values for horizontalPosition on MatSnackBarConfig. */\nexport type MatSnackBarHorizontalPosition = 'start' | 'center' | 'end' | 'left' | 'right';\n\n/** Possible values for verticalPosition on MatSnackBarConfig. */\nexport type MatSnackBarVerticalPosition = 'top' | 'bottom';\n\n/**\n * Configuration used when opening a snack-bar.\n */\nexport class MatSnackBarConfig<D = any> {\n  /** The politeness level for the MatAriaLiveAnnouncer announcement. */\n  politeness?: AriaLivePoliteness = 'assertive';\n\n  /**\n   * Message to be announced by the LiveAnnouncer. When opening a snackbar without a custom\n   * component or template, the announcement message will default to the specified message.\n   */\n  announcementMessage?: string = '';\n\n  /** The view container to place the overlay for the snack bar into. */\n  viewContainerRef?: ViewContainerRef;\n\n  /** The length of time in milliseconds to wait before automatically dismissing the snack bar. */\n  duration?: number = 0;\n\n  /** Extra CSS classes to be added to the snack bar container. */\n  panelClass?: string | string[];\n\n  /** Text layout direction for the snack bar. */\n  direction?: Direction;\n\n  /** Data being injected into the child component. */\n  data?: D | null = null;\n\n  /** The horizontal position to place the snack bar. */\n  horizontalPosition?: MatSnackBarHorizontalPosition = 'center';\n\n  /** The vertical position to place the snack bar. */\n  verticalPosition?: MatSnackBarVerticalPosition = 'bottom';\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Component, ViewEncapsulation, Inject, ChangeDetectionStrategy} from '@angular/core';\nimport {MatSnackBarRef} from './snack-bar-ref';\nimport {MAT_SNACK_BAR_DATA} from './snack-bar-config';\n\n\n/**\n * A component used to open as the default snack bar, matching material spec.\n * This should only be used internally by the snack bar service.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'simple-snack-bar',\n  templateUrl: 'simple-snack-bar.html',\n  styleUrls: ['simple-snack-bar.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {\n    'class': 'mat-simple-snackbar',\n  }\n})\nexport class SimpleSnackBar {\n  /** Data that was injected into the snack bar. */\n  data: {message: string, action: string};\n\n  constructor(\n    public snackBarRef: MatSnackBarRef<SimpleSnackBar>,\n    @Inject(MAT_SNACK_BAR_DATA) data: any) {\n    this.data = data;\n  }\n\n  /** Performs the action on the snack bar. */\n  action(): void {\n    this.snackBarRef.dismissWithAction();\n  }\n\n  /** If the action button should be shown. */\n  get hasAction(): boolean {\n    return !!this.data.action;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/**\n * Animations used by the Material snack bar.\n * @docs-private\n */\nexport const matSnackBarAnimations: {\n  readonly snackBarState: AnimationTriggerMetadata;\n} = {\n  /** Animation that shows and hides a snack bar. */\n  snackBarState: trigger('state', [\n    state('void, hidden', style({\n      transform: 'scale(0.8)',\n      opacity: 0,\n    })),\n    state('visible', style({\n      transform: 'scale(1)',\n      opacity: 1,\n    })),\n    transition('* => visible', animate('150ms cubic-bezier(0, 0, 0.2, 1)')),\n    transition('* => void, * => hidden', animate('75ms cubic-bezier(0.4, 0.0, 1, 1)', style({\n      opacity: 0\n    }))),\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {AnimationEvent} from '@angular/animations';\nimport {\n  BasePortalOutlet,\n  CdkPortalOutlet,\n  ComponentPortal,\n  TemplatePortal,\n} from '@angular/cdk/portal';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ComponentRef,\n  ElementRef,\n  EmbeddedViewRef,\n  NgZone,\n  OnDestroy,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {Observable, Subject} from 'rxjs';\nimport {take} from 'rxjs/operators';\nimport {matSnackBarAnimations} from './snack-bar-animations';\nimport {MatSnackBarConfig} from './snack-bar-config';\n\n\n/**\n * Internal component that wraps user-provided snack bar content.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'snack-bar-container',\n  templateUrl: 'snack-bar-container.html',\n  styleUrls: ['snack-bar-container.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  animations: [matSnackBarAnimations.snackBarState],\n  host: {\n    '[attr.role]': '_role',\n    'class': 'mat-snack-bar-container',\n    '[@state]': '_animationState',\n    '(@state.done)': 'onAnimationEnd($event)'\n  },\n})\nexport class MatSnackBarContainer extends BasePortalOutlet implements OnDestroy {\n  /** Whether the component has been destroyed. */\n  private _destroyed = false;\n\n  /** The portal outlet inside of this container into which the snack bar content will be loaded. */\n  @ViewChild(CdkPortalOutlet) _portalOutlet: CdkPortalOutlet;\n\n  /** Subject for notifying that the snack bar has exited from view. */\n  readonly _onExit: Subject<any> = new Subject();\n\n  /** Subject for notifying that the snack bar has finished entering the view. */\n  readonly _onEnter: Subject<any> = new Subject();\n\n  /** The state of the snack bar animations. */\n  _animationState = 'void';\n\n  /** ARIA role for the snack bar container. */\n  _role: 'alert' | 'status' | null;\n\n  constructor(\n    private _ngZone: NgZone,\n    private _elementRef: ElementRef<HTMLElement>,\n    private _changeDetectorRef: ChangeDetectorRef,\n    /** The snack bar configuration. */\n    public snackBarConfig: MatSnackBarConfig) {\n\n    super();\n\n    // Based on the ARIA spec, `alert` and `status` roles have an\n    // implicit `assertive` and `polite` politeness respectively.\n    if (snackBarConfig.politeness === 'assertive' && !snackBarConfig.announcementMessage) {\n      this._role = 'alert';\n    } else if (snackBarConfig.politeness === 'off') {\n      this._role = null;\n    } else {\n      this._role = 'status';\n    }\n  }\n\n  /** Attach a component portal as content to this snack bar container. */\n  attachComponentPortal<T>(portal: ComponentPortal<T>): ComponentRef<T> {\n    this._assertNotAttached();\n    this._applySnackBarClasses();\n    return this._portalOutlet.attachComponentPortal(portal);\n  }\n\n  /** Attach a template portal as content to this snack bar container. */\n  attachTemplatePortal<C>(portal: TemplatePortal<C>): EmbeddedViewRef<C> {\n    this._assertNotAttached();\n    this._applySnackBarClasses();\n    return this._portalOutlet.attachTemplatePortal(portal);\n  }\n\n  /** Handle end of animations, updating the state of the snackbar. */\n  onAnimationEnd(event: AnimationEvent) {\n    const {fromState, toState} = event;\n\n    if ((toState === 'void' && fromState !== 'void') || toState === 'hidden') {\n      this._completeExit();\n    }\n\n    if (toState === 'visible') {\n      // Note: we shouldn't use `this` inside the zone callback,\n      // because it can cause a memory leak.\n      const onEnter = this._onEnter;\n\n      this._ngZone.run(() => {\n        onEnter.next();\n        onEnter.complete();\n      });\n    }\n  }\n\n  /** Begin animation of snack bar entrance into view. */\n  enter(): void {\n    if (!this._destroyed) {\n      this._animationState = 'visible';\n      this._changeDetectorRef.detectChanges();\n    }\n  }\n\n  /** Begin animation of the snack bar exiting from view. */\n  exit(): Observable<void> {\n    // Note: this one transitions to `hidden`, rather than `void`, in order to handle the case\n    // where multiple snack bars are opened in quick succession (e.g. two consecutive calls to\n    // `MatSnackBar.open`).\n    this._animationState = 'hidden';\n    return this._onExit;\n  }\n\n  /** Makes sure the exit callbacks have been invoked when the element is destroyed. */\n  ngOnDestroy() {\n    this._destroyed = true;\n    this._completeExit();\n  }\n\n  /**\n   * Waits for the zone to settle before removing the element. Helps prevent\n   * errors where we end up removing an element which is in the middle of an animation.\n   */\n  private _completeExit() {\n    this._ngZone.onMicrotaskEmpty.asObservable().pipe(take(1)).subscribe(() => {\n      this._onExit.next();\n      this._onExit.complete();\n    });\n  }\n\n  /** Applies the various positioning and user-configured CSS classes to the snack bar. */\n  private _applySnackBarClasses() {\n    const element: HTMLElement = this._elementRef.nativeElement;\n    const panelClasses = this.snackBarConfig.panelClass;\n\n    if (panelClasses) {\n      if (Array.isArray(panelClasses)) {\n        // Note that we can't use a spread here, because IE doesn't support multiple arguments.\n        panelClasses.forEach(cssClass => element.classList.add(cssClass));\n      } else {\n        element.classList.add(panelClasses);\n      }\n    }\n\n    if (this.snackBarConfig.horizontalPosition === 'center') {\n      element.classList.add('mat-snack-bar-center');\n    }\n\n    if (this.snackBarConfig.verticalPosition === 'top') {\n      element.classList.add('mat-snack-bar-top');\n    }\n  }\n\n  /** Asserts that no content is already attached to the container. */\n  private _assertNotAttached() {\n    if (this._portalOutlet.hasAttached()) {\n      throw Error('Attempting to attach snack bar content after content is already attached');\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatButtonModule} from '@angular/material/button';\nimport {SimpleSnackBar} from './simple-snack-bar';\nimport {MatSnackBarContainer} from './snack-bar-container';\n\n\n@NgModule({\n  imports: [\n    OverlayModule,\n    PortalModule,\n    CommonModule,\n    MatButtonModule,\n    MatCommonModule,\n  ],\n  exports: [MatSnackBarContainer, MatCommonModule],\n  declarations: [MatSnackBarContainer, SimpleSnackBar],\n  entryComponents: [MatSnackBarContainer, SimpleSnackBar],\n})\nexport class MatSnackBarModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {LiveAnnouncer} from '@angular/cdk/a11y';\nimport {BreakpointObserver, Breakpoints} from '@angular/cdk/layout';\nimport {Overlay, OverlayConfig, OverlayRef} from '@angular/cdk/overlay';\nimport {ComponentPortal, ComponentType, PortalInjector, TemplatePortal} from '@angular/cdk/portal';\nimport {\n  ComponentRef,\n  EmbeddedViewRef,\n  Inject,\n  Injectable,\n  InjectionToken,\n  Injector,\n  Optional,\n  SkipSelf,\n  TemplateRef,\n  OnDestroy,\n} from '@angular/core';\nimport {take, takeUntil} from 'rxjs/operators';\nimport {SimpleSnackBar} from './simple-snack-bar';\nimport {MAT_SNACK_BAR_DATA, MatSnackBarConfig} from './snack-bar-config';\nimport {MatSnackBarContainer} from './snack-bar-container';\nimport {MatSnackBarModule} from './snack-bar-module';\nimport {MatSnackBarRef} from './snack-bar-ref';\n\n\n/** Injection token that can be used to specify default snack bar. */\nexport const MAT_SNACK_BAR_DEFAULT_OPTIONS =\n    new InjectionToken<MatSnackBarConfig>('mat-snack-bar-default-options', {\n      providedIn: 'root',\n      factory: MAT_SNACK_BAR_DEFAULT_OPTIONS_FACTORY,\n    });\n\n/** @docs-private */\nexport function MAT_SNACK_BAR_DEFAULT_OPTIONS_FACTORY(): MatSnackBarConfig {\n  return new MatSnackBarConfig();\n}\n\n/**\n * Service to dispatch Material Design snack bar messages.\n */\n@Injectable({providedIn: MatSnackBarModule})\nexport class MatSnackBar implements OnDestroy {\n  /**\n   * Reference to the current snack bar in the view *at this level* (in the Angular injector tree).\n   * If there is a parent snack-bar service, all operations should delegate to that parent\n   * via `_openedSnackBarRef`.\n   */\n  private _snackBarRefAtThisLevel: MatSnackBarRef<any> | null = null;\n\n  /** Reference to the currently opened snackbar at *any* level. */\n  get _openedSnackBarRef(): MatSnackBarRef<any> | null {\n    const parent = this._parentSnackBar;\n    return parent ? parent._openedSnackBarRef : this._snackBarRefAtThisLevel;\n  }\n\n  set _openedSnackBarRef(value: MatSnackBarRef<any> | null) {\n    if (this._parentSnackBar) {\n      this._parentSnackBar._openedSnackBarRef = value;\n    } else {\n      this._snackBarRefAtThisLevel = value;\n    }\n  }\n\n  constructor(\n      private _overlay: Overlay,\n      private _live: LiveAnnouncer,\n      private _injector: Injector,\n      private _breakpointObserver: BreakpointObserver,\n      @Optional() @SkipSelf() private _parentSnackBar: MatSnackBar,\n      @Inject(MAT_SNACK_BAR_DEFAULT_OPTIONS) private _defaultConfig: MatSnackBarConfig) {}\n\n  /**\n   * Creates and dispatches a snack bar with a custom component for the content, removing any\n   * currently opened snack bars.\n   *\n   * @param component Component to be instantiated.\n   * @param config Extra configuration for the snack bar.\n   */\n  openFromComponent<T>(component: ComponentType<T>, config?: MatSnackBarConfig):\n    MatSnackBarRef<T> {\n    return this._attach(component, config) as MatSnackBarRef<T>;\n  }\n\n  /**\n   * Creates and dispatches a snack bar with a custom template for the content, removing any\n   * currently opened snack bars.\n   *\n   * @param template Template to be instantiated.\n   * @param config Extra configuration for the snack bar.\n   */\n  openFromTemplate(template: TemplateRef<any>, config?: MatSnackBarConfig):\n    MatSnackBarRef<EmbeddedViewRef<any>> {\n    return this._attach(template, config);\n  }\n\n  /**\n   * Opens a snackbar with a message and an optional action.\n   * @param message The message to show in the snackbar.\n   * @param action The label for the snackbar action.\n   * @param config Additional configuration options for the snackbar.\n   */\n  open(message: string, action: string = '', config?: MatSnackBarConfig):\n      MatSnackBarRef<SimpleSnackBar> {\n    const _config = {...this._defaultConfig, ...config};\n\n    // Since the user doesn't have access to the component, we can\n    // override the data to pass in our own message and action.\n    _config.data = {message, action};\n\n    if (!_config.announcementMessage) {\n      _config.announcementMessage = message;\n    }\n\n    return this.openFromComponent(SimpleSnackBar, _config);\n  }\n\n  /**\n   * Dismisses the currently-visible snack bar.\n   */\n  dismiss(): void {\n    if (this._openedSnackBarRef) {\n      this._openedSnackBarRef.dismiss();\n    }\n  }\n\n  ngOnDestroy() {\n    // Only dismiss the snack bar at the current level on destroy.\n    if (this._snackBarRefAtThisLevel) {\n      this._snackBarRefAtThisLevel.dismiss();\n    }\n  }\n\n  /**\n   * Attaches the snack bar container component to the overlay.\n   */\n  private _attachSnackBarContainer(overlayRef: OverlayRef,\n                                   config: MatSnackBarConfig): MatSnackBarContainer {\n\n    const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n    const injector = new PortalInjector(userInjector || this._injector, new WeakMap([\n      [MatSnackBarConfig, config]\n    ]));\n\n    const containerPortal =\n        new ComponentPortal(MatSnackBarContainer, config.viewContainerRef, injector);\n    const containerRef: ComponentRef<MatSnackBarContainer> = overlayRef.attach(containerPortal);\n    containerRef.instance.snackBarConfig = config;\n    return containerRef.instance;\n  }\n\n  /**\n   * Places a new component or a template as the content of the snack bar container.\n   */\n  private _attach<T>(content: ComponentType<T> | TemplateRef<T>, userConfig?: MatSnackBarConfig):\n    MatSnackBarRef<T | EmbeddedViewRef<any>> {\n\n    const config = {...new MatSnackBarConfig(), ...this._defaultConfig, ...userConfig};\n    const overlayRef = this._createOverlay(config);\n    const container = this._attachSnackBarContainer(overlayRef, config);\n    const snackBarRef = new MatSnackBarRef<T | EmbeddedViewRef<any>>(container, overlayRef);\n\n    if (content instanceof TemplateRef) {\n      const portal = new TemplatePortal(content, null!, {\n        $implicit: config.data,\n        snackBarRef\n      } as any);\n\n      snackBarRef.instance = container.attachTemplatePortal(portal);\n    } else {\n      const injector = this._createInjector(config, snackBarRef);\n      const portal = new ComponentPortal(content, undefined, injector);\n      const contentRef = container.attachComponentPortal<T>(portal);\n\n      // We can't pass this via the injector, because the injector is created earlier.\n      snackBarRef.instance = contentRef.instance;\n    }\n\n    // Subscribe to the breakpoint observer and attach the mat-snack-bar-handset class as\n    // appropriate. This class is applied to the overlay element because the overlay must expand to\n    // fill the width of the screen for full width snackbars.\n    this._breakpointObserver.observe(Breakpoints.Handset).pipe(\n      takeUntil(overlayRef.detachments().pipe(take(1)))\n    ).subscribe(state => {\n      if (state.matches) {\n        overlayRef.overlayElement.classList.add('mat-snack-bar-handset');\n      } else {\n        overlayRef.overlayElement.classList.remove('mat-snack-bar-handset');\n      }\n    });\n\n    this._animateSnackBar(snackBarRef, config);\n    this._openedSnackBarRef = snackBarRef;\n    return this._openedSnackBarRef;\n  }\n\n  /** Animates the old snack bar out and the new one in. */\n  private _animateSnackBar(snackBarRef: MatSnackBarRef<any>, config: MatSnackBarConfig) {\n    // When the snackbar is dismissed, clear the reference to it.\n    snackBarRef.afterDismissed().subscribe(() => {\n      // Clear the snackbar ref if it hasn't already been replaced by a newer snackbar.\n      if (this._openedSnackBarRef == snackBarRef) {\n        this._openedSnackBarRef = null;\n      }\n    });\n\n    if (this._openedSnackBarRef) {\n      // If a snack bar is already in view, dismiss it and enter the\n      // new snack bar after exit animation is complete.\n      this._openedSnackBarRef.afterDismissed().subscribe(() => {\n        snackBarRef.containerInstance.enter();\n      });\n      this._openedSnackBarRef.dismiss();\n    } else {\n      // If no snack bar is in view, enter the new snack bar.\n      snackBarRef.containerInstance.enter();\n    }\n\n    // If a dismiss timeout is provided, set up dismiss based on after the snackbar is opened.\n    if (config.duration && config.duration > 0) {\n      snackBarRef.afterOpened().subscribe(() => snackBarRef._dismissAfter(config.duration!));\n    }\n\n    if (config.announcementMessage) {\n      this._live.announce(config.announcementMessage, config.politeness);\n    }\n  }\n\n  /**\n   * Creates a new overlay and places it in the correct location.\n   * @param config The user-specified snack bar config.\n   */\n  private _createOverlay(config: MatSnackBarConfig): OverlayRef {\n    const overlayConfig = new OverlayConfig();\n    overlayConfig.direction = config.direction;\n\n    let positionStrategy = this._overlay.position().global();\n    // Set horizontal position.\n    const isRtl = config.direction === 'rtl';\n    const isLeft = (\n      config.horizontalPosition === 'left' ||\n      (config.horizontalPosition === 'start' && !isRtl) ||\n      (config.horizontalPosition === 'end' && isRtl));\n    const isRight = !isLeft && config.horizontalPosition !== 'center';\n    if (isLeft) {\n      positionStrategy.left('0');\n    } else if (isRight) {\n      positionStrategy.right('0');\n    } else {\n      positionStrategy.centerHorizontally();\n    }\n    // Set horizontal position.\n    if (config.verticalPosition === 'top') {\n      positionStrategy.top('0');\n    } else {\n      positionStrategy.bottom('0');\n    }\n\n    overlayConfig.positionStrategy = positionStrategy;\n    return this._overlay.create(overlayConfig);\n  }\n\n  /**\n   * Creates an injector to be used inside of a snack bar component.\n   * @param config Config that was used to create the snack bar.\n   * @param snackBarRef Reference to the snack bar.\n   */\n  private _createInjector<T>(\n      config: MatSnackBarConfig,\n      snackBarRef: MatSnackBarRef<T>): PortalInjector {\n\n    const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n\n    return new PortalInjector(userInjector || this._injector, new WeakMap<any, any>([\n      [MatSnackBarRef, snackBarRef],\n      [MAT_SNACK_BAR_DATA, config.data]\n    ]));\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  Directive,\n  EventEmitter,\n  Input,\n  isDevMode,\n  OnChanges,\n  OnDestroy,\n  OnInit,\n  Output,\n} from '@angular/core';\nimport {\n  CanDisable,\n  CanDisableCtor,\n  HasInitialized,\n  HasInitializedCtor,\n  mixinDisabled,\n  mixinInitialized,\n} from '@angular/material/core';\nimport {Subject} from 'rxjs';\nimport {SortDirection} from './sort-direction';\nimport {\n  getSortDuplicateSortableIdError,\n  getSortHeaderMissingIdError,\n  getSortInvalidDirectionError,\n} from './sort-errors';\n\n/** Interface for a directive that holds sorting state consumed by `MatSortHeader`. */\nexport interface MatSortable {\n  /** The id of the column being sorted. */\n  id: string;\n\n  /** Starting sort direction. */\n  start: 'asc' | 'desc';\n\n  /** Whether to disable clearing the sorting state. */\n  disableClear: boolean;\n}\n\n/** The current sort state. */\nexport interface Sort {\n  /** The id of the column being sorted. */\n  active: string;\n\n  /** The sort direction. */\n  direction: SortDirection;\n}\n\n// Boilerplate for applying mixins to MatSort.\n/** @docs-private */\nexport class MatSortBase {}\nexport const _MatSortMixinBase: HasInitializedCtor & CanDisableCtor & typeof MatSortBase =\n    mixinInitialized(mixinDisabled(MatSortBase));\n\n/** Container for MatSortables to manage the sort state and provide default sort parameters. */\n@Directive({\n  selector: '[matSort]',\n  exportAs: 'matSort',\n  inputs: ['disabled: matSortDisabled']\n})\nexport class MatSort extends _MatSortMixinBase\n    implements CanDisable, HasInitialized, OnChanges, OnDestroy, OnInit {\n  /** Collection of all registered sortables that this directive manages. */\n  sortables = new Map<string, MatSortable>();\n\n  /** Used to notify any child components listening to state changes. */\n  readonly _stateChanges = new Subject<void>();\n\n  /** The id of the most recently sorted MatSortable. */\n  @Input('matSortActive') active: string;\n\n  /**\n   * The direction to set when an MatSortable is initially sorted.\n   * May be overriden by the MatSortable's sort start.\n   */\n  @Input('matSortStart') start: 'asc' | 'desc' = 'asc';\n\n  /** The sort direction of the currently active MatSortable. */\n  @Input('matSortDirection')\n  get direction(): SortDirection { return this._direction; }\n  set direction(direction: SortDirection) {\n    if (isDevMode() && direction && direction !== 'asc' && direction !== 'desc') {\n      throw getSortInvalidDirectionError(direction);\n    }\n    this._direction = direction;\n  }\n  private _direction: SortDirection = '';\n\n  /**\n   * Whether to disable the user from clearing the sort by finishing the sort direction cycle.\n   * May be overriden by the MatSortable's disable clear input.\n   */\n  @Input('matSortDisableClear')\n  get disableClear(): boolean { return this._disableClear; }\n  set disableClear(v: boolean) { this._disableClear = coerceBooleanProperty(v); }\n  private _disableClear: boolean;\n\n  /** Event emitted when the user changes either the active sort or sort direction. */\n  @Output('matSortChange') readonly sortChange: EventEmitter<Sort> = new EventEmitter<Sort>();\n\n  /**\n   * Register function to be used by the contained MatSortables. Adds the MatSortable to the\n   * collection of MatSortables.\n   */\n  register(sortable: MatSortable): void {\n    if (!sortable.id) {\n      throw getSortHeaderMissingIdError();\n    }\n\n    if (this.sortables.has(sortable.id)) {\n      throw getSortDuplicateSortableIdError(sortable.id);\n    }\n    this.sortables.set(sortable.id, sortable);\n  }\n\n  /**\n   * Unregister function to be used by the contained MatSortables. Removes the MatSortable from the\n   * collection of contained MatSortables.\n   */\n  deregister(sortable: MatSortable): void {\n    this.sortables.delete(sortable.id);\n  }\n\n  /** Sets the active sort id and determines the new sort direction. */\n  sort(sortable: MatSortable): void {\n    if (this.active != sortable.id) {\n      this.active = sortable.id;\n      this.direction = sortable.start ? sortable.start : this.start;\n    } else {\n      this.direction = this.getNextSortDirection(sortable);\n    }\n\n    this.sortChange.emit({active: this.active, direction: this.direction});\n  }\n\n  /** Returns the next sort direction of the active sortable, checking for potential overrides. */\n  getNextSortDirection(sortable: MatSortable): SortDirection {\n    if (!sortable) { return ''; }\n\n    // Get the sort direction cycle with the potential sortable overrides.\n    const disableClear = sortable.disableClear != null ? sortable.disableClear : this.disableClear;\n    let sortDirectionCycle = getSortDirectionCycle(sortable.start || this.start, disableClear);\n\n    // Get and return the next direction in the cycle\n    let nextDirectionIndex = sortDirectionCycle.indexOf(this.direction) + 1;\n    if (nextDirectionIndex >= sortDirectionCycle.length) { nextDirectionIndex = 0; }\n    return sortDirectionCycle[nextDirectionIndex];\n  }\n\n  ngOnInit() {\n    this._markInitialized();\n  }\n\n  ngOnChanges() {\n    this._stateChanges.next();\n  }\n\n  ngOnDestroy() {\n    this._stateChanges.complete();\n  }\n}\n\n/** Returns the sort direction cycle to use given the provided parameters of order and clear. */\nfunction getSortDirectionCycle(start: 'asc' | 'desc',\n                               disableClear: boolean): SortDirection[] {\n  let sortOrder: SortDirection[] = ['asc', 'desc'];\n  if (start == 'desc') { sortOrder.reverse(); }\n  if (!disableClear) { sortOrder.push(''); }\n\n  return sortOrder;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  keyframes,\n  AnimationTriggerMetadata, query, animateChild,\n} from '@angular/animations';\nimport {AnimationCurves, AnimationDurations} from '@angular/material/core';\n\nconst SORT_ANIMATION_TRANSITION = AnimationDurations.ENTERING + ' ' +\n                                  AnimationCurves.STANDARD_CURVE;\n\n/**\n * Animations used by MatSort.\n * @docs-private\n */\nexport const matSortAnimations: {\n  readonly indicator: AnimationTriggerMetadata;\n  readonly leftPointer: AnimationTriggerMetadata;\n  readonly rightPointer: AnimationTriggerMetadata;\n  readonly arrowOpacity: AnimationTriggerMetadata;\n  readonly arrowPosition: AnimationTriggerMetadata;\n  readonly allowChildren: AnimationTriggerMetadata;\n} = {\n  /** Animation that moves the sort indicator. */\n  indicator: trigger('indicator', [\n    state('active-asc, asc', style({transform: 'translateY(0px)'})),\n    // 10px is the height of the sort indicator, minus the width of the pointers\n    state('active-desc, desc', style({transform: 'translateY(10px)'})),\n    transition('active-asc <=> active-desc', animate(SORT_ANIMATION_TRANSITION))\n  ]),\n\n  /** Animation that rotates the left pointer of the indicator based on the sorting direction. */\n  leftPointer: trigger('leftPointer', [\n    state('active-asc, asc', style({transform: 'rotate(-45deg)'})),\n    state('active-desc, desc', style({transform: 'rotate(45deg)'})),\n    transition('active-asc <=> active-desc', animate(SORT_ANIMATION_TRANSITION))\n  ]),\n\n  /** Animation that rotates the right pointer of the indicator based on the sorting direction. */\n  rightPointer: trigger('rightPointer', [\n    state('active-asc, asc', style({transform: 'rotate(45deg)'})),\n    state('active-desc, desc', style({transform: 'rotate(-45deg)'})),\n    transition('active-asc <=> active-desc', animate(SORT_ANIMATION_TRANSITION))\n  ]),\n\n  /** Animation that controls the arrow opacity. */\n  arrowOpacity: trigger('arrowOpacity', [\n    state('desc-to-active, asc-to-active, active', style({opacity: 1})),\n    state('desc-to-hint, asc-to-hint, hint', style({opacity: .54})),\n    state('hint-to-desc, active-to-desc, desc, hint-to-asc, active-to-asc, asc, void',\n        style({opacity: 0})),\n    // Transition between all states except for immediate transitions\n    transition('* => asc, * => desc, * => active, * => hint, * => void', animate('0ms')),\n    transition('* <=> *', animate(SORT_ANIMATION_TRANSITION)),\n  ]),\n\n  /**\n   * Animation for the translation of the arrow as a whole. States are separated into two\n   * groups: ones with animations and others that are immediate. Immediate states are asc, desc,\n   * peek, and active. The other states define a specific animation (source-to-destination)\n   * and are determined as a function of their prev user-perceived state and what the next state\n   * should be.\n   */\n  arrowPosition: trigger('arrowPosition', [\n    // Hidden Above => Hint Center\n    transition('* => desc-to-hint, * => desc-to-active',\n        animate(SORT_ANIMATION_TRANSITION, keyframes([\n          style({transform: 'translateY(-25%)'}),\n          style({transform: 'translateY(0)'})\n        ]))),\n    // Hint Center => Hidden Below\n    transition('* => hint-to-desc, * => active-to-desc',\n        animate(SORT_ANIMATION_TRANSITION, keyframes([\n          style({transform: 'translateY(0)'}),\n          style({transform: 'translateY(25%)'})\n        ]))),\n    // Hidden Below => Hint Center\n    transition('* => asc-to-hint, * => asc-to-active',\n        animate(SORT_ANIMATION_TRANSITION, keyframes([\n          style({transform: 'translateY(25%)'}),\n          style({transform: 'translateY(0)'})\n        ]))),\n    // Hint Center => Hidden Above\n    transition('* => hint-to-asc, * => active-to-asc',\n        animate(SORT_ANIMATION_TRANSITION, keyframes([\n          style({transform: 'translateY(0)'}),\n          style({transform: 'translateY(-25%)'})\n        ]))),\n    state('desc-to-hint, asc-to-hint, hint, desc-to-active, asc-to-active, active',\n        style({transform: 'translateY(0)'})),\n    state('hint-to-desc, active-to-desc, desc',\n        style({transform: 'translateY(-25%)'})),\n    state('hint-to-asc, active-to-asc, asc',\n        style({transform: 'translateY(25%)'})),\n  ]),\n\n  /** Necessary trigger that calls animate on children animations. */\n  allowChildren: trigger('allowChildren', [\n    transition('* <=> *', [\n      query('@*', animateChild(), {optional: true})\n    ])\n  ]),\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable, SkipSelf, Optional} from '@angular/core';\nimport {Subject} from 'rxjs';\n\n/**\n * To modify the labels and text displayed, create a new instance of MatSortHeaderIntl and\n * include it in a custom provider.\n */\n@Injectable({providedIn: 'root'})\nexport class MatSortHeaderIntl {\n  /**\n   * Stream that emits whenever the labels here are changed. Use this to notify\n   * components if the labels have changed after initialization.\n   */\n  readonly changes: Subject<void> = new Subject<void>();\n\n  /** ARIA label for the sorting button. */\n  sortButtonLabel = (id: string) => {\n    return `Change sorting for ${id}`;\n  }\n}\n/** @docs-private */\nexport function MAT_SORT_HEADER_INTL_PROVIDER_FACTORY(parentIntl: MatSortHeaderIntl) {\n  return parentIntl || new MatSortHeaderIntl();\n}\n\n/** @docs-private */\nexport const MAT_SORT_HEADER_INTL_PROVIDER = {\n  // If there is already an MatSortHeaderIntl available, use that. Otherwise, provide a new one.\n  provide: MatSortHeaderIntl,\n  deps: [[new Optional(), new SkipSelf(), MatSortHeaderIntl]],\n  useFactory: MAT_SORT_HEADER_INTL_PROVIDER_FACTORY\n};\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  Input,\n  OnDestroy,\n  OnInit,\n  Optional,\n  ViewEncapsulation,\n  Inject,\n} from '@angular/core';\nimport {CanDisable, CanDisableCtor, mixinDisabled} from '@angular/material/core';\nimport {merge, Subscription} from 'rxjs';\nimport {MatSort, MatSortable} from './sort';\nimport {matSortAnimations} from './sort-animations';\nimport {SortDirection} from './sort-direction';\nimport {getSortHeaderNotContainedWithinSortError} from './sort-errors';\nimport {MatSortHeaderIntl} from './sort-header-intl';\n\n\n// Boilerplate for applying mixins to the sort header.\n/** @docs-private */\nexport class MatSortHeaderBase {}\nexport const _MatSortHeaderMixinBase: CanDisableCtor & typeof MatSortHeaderBase =\n    mixinDisabled(MatSortHeaderBase);\n\n/**\n * Valid positions for the arrow to be in for its opacity and translation. If the state is a\n * sort direction, the position of the arrow will be above/below and opacity 0. If the state is\n * hint, the arrow will be in the center with a slight opacity. Active state means the arrow will\n * be fully opaque in the center.\n *\n * @docs-private\n */\nexport type ArrowViewState = SortDirection | 'hint' | 'active';\n\n/**\n * States describing the arrow's animated position (animating fromState to toState).\n * If the fromState is not defined, there will be no animated transition to the toState.\n * @docs-private\n */\nexport interface ArrowViewStateTransition {\n  fromState?: ArrowViewState;\n  toState: ArrowViewState;\n}\n\n/** Column definition associated with a `MatSortHeader`. */\ninterface MatSortHeaderColumnDef {\n  name: string;\n}\n\n/**\n * Applies sorting behavior (click to change sort) and styles to an element, including an\n * arrow to display the current sort direction.\n *\n * Must be provided with an id and contained within a parent MatSort directive.\n *\n * If used on header cells in a CdkTable, it will automatically default its id from its containing\n * column definition.\n */\n@Component({\n  moduleId: module.id,\n  selector: '[mat-sort-header]',\n  exportAs: 'matSortHeader',\n  templateUrl: 'sort-header.html',\n  styleUrls: ['sort-header.css'],\n  host: {\n    '(click)': '_handleClick()',\n    '(mouseenter)': '_setIndicatorHintVisible(true)',\n    '(longpress)': '_setIndicatorHintVisible(true)',\n    '(mouseleave)': '_setIndicatorHintVisible(false)',\n    '[attr.aria-sort]': '_getAriaSortAttribute()',\n    '[class.mat-sort-header-disabled]': '_isDisabled()',\n  },\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  inputs: ['disabled'],\n  animations: [\n    matSortAnimations.indicator,\n    matSortAnimations.leftPointer,\n    matSortAnimations.rightPointer,\n    matSortAnimations.arrowOpacity,\n    matSortAnimations.arrowPosition,\n    matSortAnimations.allowChildren,\n  ]\n})\nexport class MatSortHeader extends _MatSortHeaderMixinBase\n    implements CanDisable, MatSortable, OnDestroy, OnInit {\n  private _rerenderSubscription: Subscription;\n\n  /**\n   * Flag set to true when the indicator should be displayed while the sort is not active. Used to\n   * provide an affordance that the header is sortable by showing on focus and hover.\n   */\n  _showIndicatorHint: boolean = false;\n\n  /**\n   * The view transition state of the arrow (translation/ opacity) - indicates its `from` and `to`\n   * position through the animation. If animations are currently disabled, the fromState is removed\n   * so that there is no animation displayed.\n   */\n  _viewState: ArrowViewStateTransition;\n\n  /** The direction the arrow should be facing according to the current state. */\n  _arrowDirection: SortDirection = '';\n\n  /**\n   * Whether the view state animation should show the transition between the `from` and `to` states.\n   */\n  _disableViewStateAnimation = false;\n\n  /**\n   * ID of this sort header. If used within the context of a CdkColumnDef, this will default to\n   * the column's name.\n   */\n  @Input('mat-sort-header') id: string;\n\n  /** Sets the position of the arrow that displays when sorted. */\n  @Input() arrowPosition: 'before' | 'after' = 'after';\n\n  /** Overrides the sort start value of the containing MatSort for this MatSortable. */\n  @Input() start: 'asc' | 'desc';\n\n  /** Overrides the disable clear value of the containing MatSort for this MatSortable. */\n  @Input()\n  get disableClear(): boolean { return this._disableClear; }\n  set disableClear(v) { this._disableClear = coerceBooleanProperty(v); }\n  private _disableClear: boolean;\n\n  constructor(public _intl: MatSortHeaderIntl,\n              changeDetectorRef: ChangeDetectorRef,\n              @Optional() public _sort: MatSort,\n              @Inject('MAT_SORT_HEADER_COLUMN_DEF') @Optional()\n                  public _columnDef: MatSortHeaderColumnDef) {\n    // Note that we use a string token for the `_columnDef`, because the value is provided both by\n    // `material/table` and `cdk/table` and we can't have the CDK depending on Material,\n    // and we want to avoid having the sort header depending on the CDK table because\n    // of this single reference.\n    super();\n\n    if (!_sort) {\n      throw getSortHeaderNotContainedWithinSortError();\n    }\n\n    this._rerenderSubscription = merge(_sort.sortChange, _sort._stateChanges, _intl.changes)\n        .subscribe(() => {\n          if (this._isSorted()) {\n            this._updateArrowDirection();\n          }\n\n          // If this header was recently active and now no longer sorted, animate away the arrow.\n          if (!this._isSorted() && this._viewState && this._viewState.toState === 'active') {\n            this._disableViewStateAnimation = false;\n            this._setAnimationTransitionState({fromState: 'active', toState: this._arrowDirection});\n          }\n\n          changeDetectorRef.markForCheck();\n        });\n  }\n\n  ngOnInit() {\n    if (!this.id && this._columnDef) {\n      this.id = this._columnDef.name;\n    }\n\n    // Initialize the direction of the arrow and set the view state to be immediately that state.\n    this._updateArrowDirection();\n    this._setAnimationTransitionState(\n        {toState: this._isSorted() ? 'active' : this._arrowDirection});\n\n    this._sort.register(this);\n  }\n\n  ngOnDestroy() {\n    this._sort.deregister(this);\n    this._rerenderSubscription.unsubscribe();\n  }\n\n  /**\n   * Sets the \"hint\" state such that the arrow will be semi-transparently displayed as a hint to the\n   * user showing what the active sort will become. If set to false, the arrow will fade away.\n   */\n  _setIndicatorHintVisible(visible: boolean) {\n    // No-op if the sort header is disabled - should not make the hint visible.\n    if (this._isDisabled() && visible) { return; }\n\n    this._showIndicatorHint = visible;\n\n    if (!this._isSorted()) {\n      this._updateArrowDirection();\n      if (this._showIndicatorHint) {\n        this._setAnimationTransitionState({fromState: this._arrowDirection, toState: 'hint'});\n      } else {\n        this._setAnimationTransitionState({fromState: 'hint', toState: this._arrowDirection});\n      }\n    }\n  }\n\n  /**\n   * Sets the animation transition view state for the arrow's position and opacity. If the\n   * `disableViewStateAnimation` flag is set to true, the `fromState` will be ignored so that\n   * no animation appears.\n   */\n  _setAnimationTransitionState(viewState: ArrowViewStateTransition) {\n    this._viewState = viewState;\n\n    // If the animation for arrow position state (opacity/translation) should be disabled,\n    // remove the fromState so that it jumps right to the toState.\n    if (this._disableViewStateAnimation) {\n      this._viewState = {toState: viewState.toState};\n    }\n  }\n\n  /** Triggers the sort on this sort header and removes the indicator hint. */\n  _handleClick() {\n    if (this._isDisabled()) { return; }\n\n    this._sort.sort(this);\n\n    // Do not show the animation if the header was already shown in the right position.\n    if (this._viewState.toState === 'hint' || this._viewState.toState === 'active') {\n      this._disableViewStateAnimation = true;\n    }\n\n    // If the arrow is now sorted, animate the arrow into place. Otherwise, animate it away into\n    // the direction it is facing.\n    const viewState: ArrowViewStateTransition = this._isSorted() ?\n        {fromState: this._arrowDirection, toState: 'active'} :\n        {fromState: 'active', toState: this._arrowDirection};\n    this._setAnimationTransitionState(viewState);\n\n    this._showIndicatorHint = false;\n  }\n\n  /** Whether this MatSortHeader is currently sorted in either ascending or descending order. */\n  _isSorted() {\n    return this._sort.active == this.id &&\n        (this._sort.direction === 'asc' || this._sort.direction === 'desc');\n  }\n\n  /** Returns the animation state for the arrow direction (indicator and pointers). */\n  _getArrowDirectionState() {\n    return `${this._isSorted() ? 'active-' : ''}${this._arrowDirection}`;\n  }\n\n  /** Returns the arrow position state (opacity, translation). */\n  _getArrowViewState() {\n    const fromState = this._viewState.fromState;\n    return (fromState ? `${fromState}-to-` : '') + this._viewState.toState;\n  }\n\n  /**\n   * Updates the direction the arrow should be pointing. If it is not sorted, the arrow should be\n   * facing the start direction. Otherwise if it is sorted, the arrow should point in the currently\n   * active sorted direction. The reason this is updated through a function is because the direction\n   * should only be changed at specific times - when deactivated but the hint is displayed and when\n   * the sort is active and the direction changes. Otherwise the arrow's direction should linger\n   * in cases such as the sort becoming deactivated but we want to animate the arrow away while\n   * preserving its direction, even though the next sort direction is actually different and should\n   * only be changed once the arrow displays again (hint or activation).\n   */\n  _updateArrowDirection() {\n    this._arrowDirection = this._isSorted() ?\n        this._sort.direction :\n        (this.start || this._sort.start);\n  }\n\n  _isDisabled() {\n    return this._sort.disabled || this.disabled;\n  }\n\n  /**\n   * Gets the aria-sort attribute that should be applied to this sort header. If this header\n   * is not sorted, returns null so that the attribute is removed from the host element. Aria spec\n   * says that the aria-sort property should only be present on one header at a time, so removing\n   * ensures this is true.\n   */\n  _getAriaSortAttribute() {\n    if (!this._isSorted()) { return null; }\n\n    return this._sort.direction == 'asc' ? 'ascending' : 'descending';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatSortHeader} from './sort-header';\nimport {MatSort} from './sort';\nimport {MAT_SORT_HEADER_INTL_PROVIDER} from './sort-header-intl';\nimport {CommonModule} from '@angular/common';\n\n\n@NgModule({\n  imports: [CommonModule],\n  exports: [MatSort, MatSortHeader],\n  declarations: [MatSort, MatSortHeader],\n  providers: [MAT_SORT_HEADER_INTL_PROVIDER]\n})\nexport class MatSortModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive} from '@angular/core';\nimport {CdkStepLabel} from '@angular/cdk/stepper';\n\n@Directive({\n  selector: '[matStepLabel]',\n})\nexport class MatStepLabel extends CdkStepLabel {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable, Optional, SkipSelf} from '@angular/core';\nimport {Subject} from 'rxjs';\n\n\n/** Stepper data that is required for internationalization. */\n@Injectable({providedIn: 'root'})\nexport class MatStepperIntl {\n  /**\n   * Stream that emits whenever the labels here are changed. Use this to notify\n   * components if the labels have changed after initialization.\n   */\n  readonly changes: Subject<void> = new Subject<void>();\n\n  /** Label that is rendered below optional steps. */\n  optionalLabel: string = 'Optional';\n}\n\n\n/** @docs-private */\nexport function MAT_STEPPER_INTL_PROVIDER_FACTORY(parentIntl: MatStepperIntl) {\n  return parentIntl || new MatStepperIntl();\n}\n\n/** @docs-private */\nexport const MAT_STEPPER_INTL_PROVIDER = {\n  provide: MatStepperIntl,\n  deps: [[new Optional(), new SkipSelf(), MatStepperIntl]],\n  useFactory: MAT_STEPPER_INTL_PROVIDER_FACTORY\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {AnimationEvent} from '@angular/animations';\nimport {FocusMonitor, FocusOrigin, FocusTrap, FocusTrapFactory} from '@angular/cdk/a11y';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {ESCAPE} from '@angular/cdk/keycodes';\nimport {Platform} from '@angular/cdk/platform';\nimport {CdkScrollable, ScrollDispatcher} from '@angular/cdk/scrolling';\nimport {DOCUMENT} from '@angular/common';\nimport {\n  AfterContentChecked,\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  ContentChildren,\n  DoCheck,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  Output,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {fromEvent, merge, Observable, Subject} from 'rxjs';\nimport {\n  debounceTime,\n  filter,\n  map,\n  startWith,\n  take,\n  takeUntil,\n  distinctUntilChanged,\n} from 'rxjs/operators';\nimport {matDrawerAnimations} from './drawer-animations';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\n\n\n/**\n * Throws an exception when two MatDrawer are matching the same position.\n * @docs-private\n */\nexport function throwMatDuplicatedDrawerError(position: string) {\n  throw Error(`A drawer was already declared for 'position=\"${position}\"'`);\n}\n\n\n/** Result of the toggle promise that indicates the state of the drawer. */\nexport type MatDrawerToggleResult = 'open' | 'close';\n\n/** Configures whether drawers should use auto sizing by default. */\nexport const MAT_DRAWER_DEFAULT_AUTOSIZE =\n    new InjectionToken<boolean>('MAT_DRAWER_DEFAULT_AUTOSIZE', {\n      providedIn: 'root',\n      factory: MAT_DRAWER_DEFAULT_AUTOSIZE_FACTORY,\n    });\n\n/** @docs-private */\nexport function MAT_DRAWER_DEFAULT_AUTOSIZE_FACTORY(): boolean {\n  return false;\n}\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-drawer-content',\n  template: '<ng-content></ng-content>',\n  host: {\n    'class': 'mat-drawer-content',\n    '[style.margin-left.px]': '_container._contentMargins.left',\n    '[style.margin-right.px]': '_container._contentMargins.right',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatDrawerContent extends CdkScrollable implements AfterContentInit {\n  constructor(\n      private _changeDetectorRef: ChangeDetectorRef,\n      @Inject(forwardRef(() => MatDrawerContainer)) public _container: MatDrawerContainer,\n      elementRef: ElementRef<HTMLElement>,\n      scrollDispatcher: ScrollDispatcher,\n      ngZone: NgZone) {\n    super(elementRef, scrollDispatcher, ngZone);\n  }\n\n  ngAfterContentInit() {\n    this._container._contentMarginChanges.subscribe(() => {\n      this._changeDetectorRef.markForCheck();\n    });\n  }\n}\n\n\n/**\n * This component corresponds to a drawer that can be opened on the drawer container.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-drawer',\n  exportAs: 'matDrawer',\n  templateUrl: 'drawer.html',\n  animations: [matDrawerAnimations.transformDrawer],\n  host: {\n    'class': 'mat-drawer',\n    '[@transform]': '_animationState',\n    '(@transform.start)': '_animationStarted.next($event)',\n    '(@transform.done)': '_animationEnd.next($event)',\n    // must prevent the browser from aligning text based on value\n    '[attr.align]': 'null',\n    '[class.mat-drawer-end]': 'position === \"end\"',\n    '[class.mat-drawer-over]': 'mode === \"over\"',\n    '[class.mat-drawer-push]': 'mode === \"push\"',\n    '[class.mat-drawer-side]': 'mode === \"side\"',\n    'tabIndex': '-1',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatDrawer implements AfterContentInit, AfterContentChecked, OnDestroy {\n  private _focusTrap: FocusTrap;\n  private _elementFocusedBeforeDrawerWasOpened: HTMLElement | null = null;\n\n  /** Whether the drawer is initialized. Used for disabling the initial animation. */\n  private _enableAnimations = false;\n\n  /** The side that the drawer is attached to. */\n  @Input()\n  get position(): 'start' | 'end' { return this._position; }\n  set position(value: 'start' | 'end') {\n    // Make sure we have a valid value.\n    value = value === 'end' ? 'end' : 'start';\n    if (value != this._position) {\n      this._position = value;\n      this.onPositionChanged.emit();\n    }\n  }\n  private _position: 'start' | 'end' = 'start';\n\n  /** Mode of the drawer; one of 'over', 'push' or 'side'. */\n  @Input()\n  get mode(): 'over' | 'push' | 'side' { return this._mode; }\n  set mode(value: 'over' | 'push' | 'side') {\n    this._mode = value;\n    this._modeChanged.next();\n  }\n  private _mode: 'over' | 'push' | 'side' = 'over';\n\n  /** Whether the drawer can be closed with the escape key or by clicking on the backdrop. */\n  @Input()\n  get disableClose(): boolean { return this._disableClose; }\n  set disableClose(value: boolean) { this._disableClose = coerceBooleanProperty(value); }\n  private _disableClose: boolean = false;\n\n  /** Whether the drawer should focus the first focusable element automatically when opened. */\n  @Input()\n  get autoFocus(): boolean { return this._autoFocus; }\n  set autoFocus(value: boolean) { this._autoFocus = coerceBooleanProperty(value); }\n  private _autoFocus: boolean = true;\n\n  /** How the sidenav was opened (keypress, mouse click etc.) */\n  private _openedVia: FocusOrigin | null;\n\n  /** Emits whenever the drawer has started animating. */\n  _animationStarted = new Subject<AnimationEvent>();\n\n  /** Emits whenever the drawer is done animating. */\n  _animationEnd = new Subject<AnimationEvent>();\n\n  /** Current state of the sidenav animation. */\n  _animationState: 'open-instant' | 'open' | 'void' = 'void';\n\n  /** Event emitted when the drawer open state is changed. */\n  @Output() readonly openedChange: EventEmitter<boolean> =\n      // Note this has to be async in order to avoid some issues with two-bindings (see #8872).\n      new EventEmitter<boolean>(/* isAsync */true);\n\n  /** Event emitted when the drawer has been opened. */\n  @Output('opened')\n  get _openedStream(): Observable<void> {\n    return this.openedChange.pipe(filter(o => o), map(() => {}));\n  }\n\n  /** Event emitted when the drawer has started opening. */\n  @Output()\n  get openedStart(): Observable<void> {\n    return this._animationStarted.pipe(\n      filter(e => e.fromState !== e.toState && e.toState.indexOf('open') === 0),\n      map(() => {})\n    );\n  }\n\n  /** Event emitted when the drawer has been closed. */\n  @Output('closed')\n  get _closedStream(): Observable<void> {\n    return this.openedChange.pipe(filter(o => !o), map(() => {}));\n  }\n\n  /** Event emitted when the drawer has started closing. */\n  @Output()\n  get closedStart(): Observable<void> {\n    return this._animationStarted.pipe(\n      filter(e => e.fromState !== e.toState && e.toState === 'void'),\n      map(() => {})\n    );\n  }\n\n  /** Event emitted when the drawer's position changes. */\n  // tslint:disable-next-line:no-output-on-prefix\n  @Output('positionChanged') onPositionChanged: EventEmitter<void> = new EventEmitter<void>();\n\n  /**\n   * An observable that emits when the drawer mode changes. This is used by the drawer container to\n   * to know when to when the mode changes so it can adapt the margins on the content.\n   */\n  readonly _modeChanged = new Subject();\n\n  get _isFocusTrapEnabled(): boolean {\n    // The focus trap is only enabled when the drawer is open in any mode other than side.\n    return this.opened && this.mode !== 'side';\n  }\n\n  constructor(private _elementRef: ElementRef<HTMLElement>,\n              private _focusTrapFactory: FocusTrapFactory,\n              private _focusMonitor: FocusMonitor,\n              private _platform: Platform,\n              private _ngZone: NgZone,\n              @Optional() @Inject(DOCUMENT) private _doc: any) {\n\n    this.openedChange.subscribe((opened: boolean) => {\n      if (opened) {\n        if (this._doc) {\n          this._elementFocusedBeforeDrawerWasOpened = this._doc.activeElement as HTMLElement;\n        }\n\n        if (this._isFocusTrapEnabled && this._focusTrap) {\n          this._trapFocus();\n        }\n      } else {\n        this._restoreFocus();\n      }\n    });\n\n    /**\n     * Listen to `keydown` events outside the zone so that change detection is not run every\n     * time a key is pressed. Instead we re-enter the zone only if the `ESC` key is pressed\n     * and we don't have close disabled.\n     */\n    this._ngZone.runOutsideAngular(() => {\n        fromEvent<KeyboardEvent>(this._elementRef.nativeElement, 'keydown').pipe(\n            filter(event => event.keyCode === ESCAPE && !this.disableClose)\n        ).subscribe(event => this._ngZone.run(() => {\n            this.close();\n            event.stopPropagation();\n        }));\n    });\n\n    // We need a Subject with distinctUntilChanged, because the `done` event\n    // fires twice on some browsers. See https://github.com/angular/angular/issues/24084\n    this._animationEnd.pipe(distinctUntilChanged((x, y) => {\n      return x.fromState === y.fromState && x.toState === y.toState;\n    })).subscribe((event: AnimationEvent) => {\n      const {fromState, toState} = event;\n\n      if ((toState.indexOf('open') === 0 && fromState === 'void') ||\n          (toState === 'void' && fromState.indexOf('open') === 0)) {\n        this.openedChange.emit(this._opened);\n      }\n    });\n  }\n\n  /** Traps focus inside the drawer. */\n  private _trapFocus() {\n    if (!this.autoFocus) {\n      return;\n    }\n\n    this._focusTrap.focusInitialElementWhenReady().then(hasMovedFocus => {\n      // If there were no focusable elements, focus the sidenav itself so the keyboard navigation\n      // still works. We need to check that `focus` is a function due to Universal.\n      if (!hasMovedFocus && typeof this._elementRef.nativeElement.focus === 'function') {\n        this._elementRef.nativeElement.focus();\n      }\n    });\n  }\n\n  /**\n   * If focus is currently inside the drawer, restores it to where it was before the drawer\n   * opened.\n   */\n  private _restoreFocus() {\n    if (!this.autoFocus) {\n      return;\n    }\n\n    const activeEl = this._doc && this._doc.activeElement;\n\n    if (activeEl && this._elementRef.nativeElement.contains(activeEl)) {\n      if (this._elementFocusedBeforeDrawerWasOpened instanceof HTMLElement) {\n        this._focusMonitor.focusVia(this._elementFocusedBeforeDrawerWasOpened, this._openedVia);\n      } else {\n        this._elementRef.nativeElement.blur();\n      }\n    }\n\n    this._elementFocusedBeforeDrawerWasOpened = null;\n    this._openedVia = null;\n  }\n\n  ngAfterContentInit() {\n    this._focusTrap = this._focusTrapFactory.create(this._elementRef.nativeElement);\n    this._focusTrap.enabled = this._isFocusTrapEnabled;\n  }\n\n  ngAfterContentChecked() {\n    // Enable the animations after the lifecycle hooks have run, in order to avoid animating\n    // drawers that are open by default. When we're on the server, we shouldn't enable the\n    // animations, because we don't want the drawer to animate the first time the user sees\n    // the page.\n    if (this._platform.isBrowser) {\n      this._enableAnimations = true;\n    }\n  }\n\n  ngOnDestroy() {\n    if (this._focusTrap) {\n      this._focusTrap.destroy();\n    }\n\n    this._animationStarted.complete();\n    this._animationEnd.complete();\n  }\n\n  /**\n   * Whether the drawer is opened. We overload this because we trigger an event when it\n   * starts or end.\n   */\n  @Input()\n  get opened(): boolean { return this._opened; }\n  set opened(value: boolean) { this.toggle(coerceBooleanProperty(value)); }\n  private _opened: boolean = false;\n\n  /**\n   * Open the drawer.\n   * @param openedVia Whether the drawer was opened by a key press, mouse click or programmatically.\n   * Used for focus management after the sidenav is closed.\n   */\n  open(openedVia?: FocusOrigin): Promise<MatDrawerToggleResult> {\n    return this.toggle(true, openedVia);\n  }\n\n  /** Close the drawer. */\n  close(): Promise<MatDrawerToggleResult> {\n    return this.toggle(false);\n  }\n\n  /**\n   * Toggle this drawer.\n   * @param isOpen Whether the drawer should be open.\n   * @param openedVia Whether the drawer was opened by a key press, mouse click or programmatically.\n   * Used for focus management after the sidenav is closed.\n   */\n  toggle(isOpen: boolean = !this.opened, openedVia: FocusOrigin = 'program'):\n    Promise<MatDrawerToggleResult> {\n\n    this._opened = isOpen;\n\n    if (isOpen) {\n      this._animationState = this._enableAnimations ? 'open' : 'open-instant';\n      this._openedVia = openedVia;\n    } else {\n      this._animationState = 'void';\n      this._restoreFocus();\n    }\n\n    if (this._focusTrap) {\n      this._focusTrap.enabled = this._isFocusTrapEnabled;\n    }\n\n    return new Promise<MatDrawerToggleResult>(resolve => {\n      this.openedChange.pipe(take(1)).subscribe(open => resolve(open ? 'open' : 'close'));\n    });\n  }\n\n  get _width(): number {\n    return this._elementRef.nativeElement ? (this._elementRef.nativeElement.offsetWidth || 0) : 0;\n  }\n}\n\n\n/**\n * `<mat-drawer-container>` component.\n *\n * This is the parent component to one or two `<mat-drawer>`s that validates the state internally\n * and coordinates the backdrop and content styling.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-drawer-container',\n  exportAs: 'matDrawerContainer',\n  templateUrl: 'drawer-container.html',\n  styleUrls: ['drawer.css'],\n  host: {\n    'class': 'mat-drawer-container',\n    '[class.mat-drawer-container-explicit-backdrop]': '_backdropOverride',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatDrawerContainer implements AfterContentInit, DoCheck, OnDestroy {\n  @ContentChildren(MatDrawer) _drawers: QueryList<MatDrawer>;\n  @ContentChild(MatDrawerContent) _content: MatDrawerContent;\n  @ViewChild(MatDrawerContent) _userContent: MatDrawerContent;\n\n  /** The drawer child with the `start` position. */\n  get start(): MatDrawer | null { return this._start; }\n\n  /** The drawer child with the `end` position. */\n  get end(): MatDrawer | null { return this._end; }\n\n  /**\n   * Whether to automatically resize the container whenever\n   * the size of any of its drawers changes.\n   *\n   * **Use at your own risk!** Enabling this option can cause layout thrashing by measuring\n   * the drawers on every change detection cycle. Can be configured globally via the\n   * `MAT_DRAWER_DEFAULT_AUTOSIZE` token.\n   */\n  @Input()\n  get autosize(): boolean { return this._autosize; }\n  set autosize(value: boolean) { this._autosize = coerceBooleanProperty(value); }\n  private _autosize: boolean;\n\n  /**\n   * Whether the drawer container should have a backdrop while one of the sidenavs is open.\n   * If explicitly set to `true`, the backdrop will be enabled for drawers in the `side`\n   * mode as well.\n   */\n  @Input()\n  get hasBackdrop() {\n    if (this._backdropOverride == null) {\n      return !this._start || this._start.mode !== 'side' || !this._end || this._end.mode !== 'side';\n    }\n\n    return this._backdropOverride;\n  }\n  set hasBackdrop(value: any) {\n    this._backdropOverride = value == null ? null : coerceBooleanProperty(value);\n  }\n  _backdropOverride: boolean | null;\n\n  /** Event emitted when the drawer backdrop is clicked. */\n  @Output() readonly backdropClick: EventEmitter<void> = new EventEmitter<void>();\n\n  /** The drawer at the start/end position, independent of direction. */\n  private _start: MatDrawer | null;\n  private _end: MatDrawer | null;\n\n  /**\n   * The drawer at the left/right. When direction changes, these will change as well.\n   * They're used as aliases for the above to set the left/right style properly.\n   * In LTR, _left == _start and _right == _end.\n   * In RTL, _left == _end and _right == _start.\n   */\n  private _left: MatDrawer | null;\n  private _right: MatDrawer | null;\n\n  /** Emits when the component is destroyed. */\n  private readonly _destroyed = new Subject<void>();\n\n  /** Emits on every ngDoCheck. Used for debouncing reflows. */\n  private readonly _doCheckSubject = new Subject<void>();\n\n  /**\n   * Margins to be applied to the content. These are used to push / shrink the drawer content when a\n   * drawer is open. We use margin rather than transform even for push mode because transform breaks\n   * fixed position elements inside of the transformed element.\n   */\n  _contentMargins: {left: number|null, right: number|null} = {left: null, right: null};\n\n  readonly _contentMarginChanges = new Subject<{left: number|null, right: number|null}>();\n\n  /** Reference to the CdkScrollable instance that wraps the scrollable content. */\n  get scrollable(): CdkScrollable {\n    return this._userContent || this._content;\n  }\n\n  constructor(@Optional() private _dir: Directionality,\n              private _element: ElementRef<HTMLElement>,\n              private _ngZone: NgZone,\n              private _changeDetectorRef: ChangeDetectorRef,\n              @Inject(MAT_DRAWER_DEFAULT_AUTOSIZE) defaultAutosize = false,\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) private _animationMode?: string) {\n\n    // If a `Dir` directive exists up the tree, listen direction changes\n    // and update the left/right properties to point to the proper start/end.\n    if (_dir) {\n      _dir.change.pipe(takeUntil(this._destroyed)).subscribe(() => {\n        this._validateDrawers();\n        this._updateContentMargins();\n      });\n    }\n\n    this._autosize = defaultAutosize;\n  }\n\n  ngAfterContentInit() {\n    this._drawers.changes.pipe(startWith(null)).subscribe(() => {\n      this._validateDrawers();\n\n      this._drawers.forEach((drawer: MatDrawer) => {\n        this._watchDrawerToggle(drawer);\n        this._watchDrawerPosition(drawer);\n        this._watchDrawerMode(drawer);\n      });\n\n      if (!this._drawers.length ||\n          this._isDrawerOpen(this._start) ||\n          this._isDrawerOpen(this._end)) {\n        this._updateContentMargins();\n      }\n\n      this._changeDetectorRef.markForCheck();\n    });\n\n    this._doCheckSubject.pipe(\n      debounceTime(10), // Arbitrary debounce time, less than a frame at 60fps\n      takeUntil(this._destroyed)\n    ).subscribe(() => this._updateContentMargins());\n  }\n\n  ngOnDestroy() {\n    this._doCheckSubject.complete();\n    this._destroyed.next();\n    this._destroyed.complete();\n  }\n\n  /** Calls `open` of both start and end drawers */\n  open(): void {\n    this._drawers.forEach(drawer => drawer.open());\n  }\n\n  /** Calls `close` of both start and end drawers */\n  close(): void {\n    this._drawers.forEach(drawer => drawer.close());\n  }\n\n  ngDoCheck() {\n    // If users opted into autosizing, do a check every change detection cycle.\n    if (this._autosize && this._isPushed()) {\n      // Run outside the NgZone, otherwise the debouncer will throw us into an infinite loop.\n      this._ngZone.runOutsideAngular(() => this._doCheckSubject.next());\n    }\n  }\n\n  /**\n   * Subscribes to drawer events in order to set a class on the main container element when the\n   * drawer is open and the backdrop is visible. This ensures any overflow on the container element\n   * is properly hidden.\n   */\n  private _watchDrawerToggle(drawer: MatDrawer): void {\n    drawer._animationStarted.pipe(\n      takeUntil(this._drawers.changes),\n      filter((event: AnimationEvent) => event.fromState !== event.toState)\n    )\n    .subscribe((event: AnimationEvent) => {\n      // Set the transition class on the container so that the animations occur. This should not\n      // be set initially because animations should only be triggered via a change in state.\n      if (event.toState !== 'open-instant' && this._animationMode !== 'NoopAnimations') {\n        this._element.nativeElement.classList.add('mat-drawer-transition');\n      }\n\n      this._updateContentMargins();\n      this._changeDetectorRef.markForCheck();\n    });\n\n    if (drawer.mode !== 'side') {\n      drawer.openedChange.pipe(takeUntil(this._drawers.changes)).subscribe(() =>\n          this._setContainerClass(drawer.opened));\n    }\n  }\n\n  /**\n   * Subscribes to drawer onPositionChanged event in order to\n   * re-validate drawers when the position changes.\n   */\n  private _watchDrawerPosition(drawer: MatDrawer): void {\n    if (!drawer) {\n      return;\n    }\n    // NOTE: We need to wait for the microtask queue to be empty before validating,\n    // since both drawers may be swapping positions at the same time.\n    drawer.onPositionChanged.pipe(takeUntil(this._drawers.changes)).subscribe(() => {\n      this._ngZone.onMicrotaskEmpty.asObservable().pipe(take(1)).subscribe(() => {\n        this._validateDrawers();\n      });\n    });\n  }\n\n  /** Subscribes to changes in drawer mode so we can run change detection. */\n  private _watchDrawerMode(drawer: MatDrawer): void {\n    if (drawer) {\n      drawer._modeChanged.pipe(takeUntil(merge(this._drawers.changes, this._destroyed)))\n        .subscribe(() => {\n          this._updateContentMargins();\n          this._changeDetectorRef.markForCheck();\n        });\n    }\n  }\n\n  /** Toggles the 'mat-drawer-opened' class on the main 'mat-drawer-container' element. */\n  private _setContainerClass(isAdd: boolean): void {\n    if (isAdd) {\n      this._element.nativeElement.classList.add('mat-drawer-opened');\n    } else {\n      this._element.nativeElement.classList.remove('mat-drawer-opened');\n    }\n  }\n\n  /** Validate the state of the drawer children components. */\n  private _validateDrawers() {\n    this._start = this._end = null;\n\n    // Ensure that we have at most one start and one end drawer.\n    this._drawers.forEach(drawer => {\n      if (drawer.position == 'end') {\n        if (this._end != null) {\n          throwMatDuplicatedDrawerError('end');\n        }\n        this._end = drawer;\n      } else {\n        if (this._start != null) {\n          throwMatDuplicatedDrawerError('start');\n        }\n        this._start = drawer;\n      }\n    });\n\n    this._right = this._left = null;\n\n    // Detect if we're LTR or RTL.\n    if (this._dir && this._dir.value === 'rtl') {\n      this._left = this._end;\n      this._right = this._start;\n    } else {\n      this._left = this._start;\n      this._right = this._end;\n    }\n  }\n\n  /** Whether the container is being pushed to the side by one of the drawers. */\n  private _isPushed() {\n    return (this._isDrawerOpen(this._start) && this._start.mode != 'over') ||\n           (this._isDrawerOpen(this._end) && this._end.mode != 'over');\n  }\n\n  _onBackdropClicked() {\n    this.backdropClick.emit();\n    this._closeModalDrawer();\n  }\n\n  _closeModalDrawer() {\n    // Close all open drawers where closing is not disabled and the mode is not `side`.\n    [this._start, this._end]\n      .filter(drawer => drawer && !drawer.disableClose && this._canHaveBackdrop(drawer))\n      .forEach(drawer => drawer!.close());\n  }\n\n  _isShowingBackdrop(): boolean {\n    return (this._isDrawerOpen(this._start) && this._canHaveBackdrop(this._start)) ||\n           (this._isDrawerOpen(this._end) && this._canHaveBackdrop(this._end));\n  }\n\n  private _canHaveBackdrop(drawer: MatDrawer): boolean {\n    return drawer.mode !== 'side' || !!this._backdropOverride;\n  }\n\n  private _isDrawerOpen(drawer: MatDrawer | null): drawer is MatDrawer {\n    return drawer != null && drawer.opened;\n  }\n\n  /**\n   * Recalculates and updates the inline styles for the content. Note that this should be used\n   * sparingly, because it causes a reflow.\n   */\n  private _updateContentMargins() {\n    // 1. For drawers in `over` mode, they don't affect the content.\n    // 2. For drawers in `side` mode they should shrink the content. We do this by adding to the\n    //    left margin (for left drawer) or right margin (for right the drawer).\n    // 3. For drawers in `push` mode the should shift the content without resizing it. We do this by\n    //    adding to the left or right margin and simultaneously subtracting the same amount of\n    //    margin from the other side.\n\n    let left = 0;\n    let right = 0;\n\n    if (this._left && this._left.opened) {\n      if (this._left.mode == 'side') {\n        left += this._left._width;\n      } else if (this._left.mode == 'push') {\n        let width = this._left._width;\n        left += width;\n        right -= width;\n      }\n    }\n\n    if (this._right && this._right.opened) {\n      if (this._right.mode == 'side') {\n        right += this._right._width;\n      } else if (this._right.mode == 'push') {\n        let width = this._right._width;\n        right += width;\n        left -= width;\n      }\n    }\n\n    // If either `right` or `left` is zero, don't set a style to the element. This\n    // allows users to specify a custom size via CSS class in SSR scenarios where the\n    // measured widths will always be zero. Note that we reset to `null` here, rather\n    // than below, in order to ensure that the types in the `if` below are consistent.\n    left = left || null!;\n    right = right || null!;\n\n    if (left !== this._contentMargins.left || right !== this._contentMargins.right) {\n      this._contentMargins = {left, right};\n\n      // Pull back into the NgZone since in some cases we could be outside. We need to be careful\n      // to do it only when something changed, otherwise we can end up hitting the zone too often.\n      this._ngZone.run(() => this._contentMarginChanges.next(this._contentMargins));\n    }\n\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  ContentChildren,\n  forwardRef,\n  Inject,\n  Input,\n  ViewEncapsulation,\n  QueryList,\n  ElementRef,\n  NgZone,\n} from '@angular/core';\nimport {MatDrawer, MatDrawerContainer, MatDrawerContent} from './drawer';\nimport {matDrawerAnimations} from './drawer-animations';\nimport {coerceBooleanProperty, coerceNumberProperty} from '@angular/cdk/coercion';\nimport {ScrollDispatcher} from '@angular/cdk/scrolling';\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-sidenav-content',\n  template: '<ng-content></ng-content>',\n  host: {\n    'class': 'mat-drawer-content mat-sidenav-content',\n    '[style.margin-left.px]': '_container._contentMargins.left',\n    '[style.margin-right.px]': '_container._contentMargins.right',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatSidenavContent extends MatDrawerContent {\n  constructor(\n      changeDetectorRef: ChangeDetectorRef,\n      @Inject(forwardRef(() => MatSidenavContainer)) container: MatSidenavContainer,\n      elementRef: ElementRef<HTMLElement>,\n      scrollDispatcher: ScrollDispatcher,\n      ngZone: NgZone) {\n    super(changeDetectorRef, container, elementRef, scrollDispatcher, ngZone);\n  }\n}\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-sidenav',\n  exportAs: 'matSidenav',\n  templateUrl: 'drawer.html',\n  animations: [matDrawerAnimations.transformDrawer],\n  host: {\n    'class': 'mat-drawer mat-sidenav',\n    'tabIndex': '-1',\n    '[@transform]': '_animationState',\n    '(@transform.start)': '_animationStarted.next($event)',\n    '(@transform.done)': '_animationEnd.next($event)',\n    // must prevent the browser from aligning text based on value\n    '[attr.align]': 'null',\n    '[class.mat-drawer-end]': 'position === \"end\"',\n    '[class.mat-drawer-over]': 'mode === \"over\"',\n    '[class.mat-drawer-push]': 'mode === \"push\"',\n    '[class.mat-drawer-side]': 'mode === \"side\"',\n    '[class.mat-sidenav-fixed]': 'fixedInViewport',\n    '[style.top.px]': 'fixedInViewport ? fixedTopGap : null',\n    '[style.bottom.px]': 'fixedInViewport ? fixedBottomGap : null',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatSidenav extends MatDrawer {\n  /** Whether the sidenav is fixed in the viewport. */\n  @Input()\n  get fixedInViewport(): boolean { return this._fixedInViewport; }\n  set fixedInViewport(value) { this._fixedInViewport = coerceBooleanProperty(value); }\n  private _fixedInViewport = false;\n\n  /**\n   * The gap between the top of the sidenav and the top of the viewport when the sidenav is in fixed\n   * mode.\n   */\n  @Input()\n  get fixedTopGap(): number { return this._fixedTopGap; }\n  set fixedTopGap(value) { this._fixedTopGap = coerceNumberProperty(value); }\n  private _fixedTopGap = 0;\n\n  /**\n   * The gap between the bottom of the sidenav and the bottom of the viewport when the sidenav is in\n   * fixed mode.\n   */\n  @Input()\n  get fixedBottomGap(): number { return this._fixedBottomGap; }\n  set fixedBottomGap(value) { this._fixedBottomGap = coerceNumberProperty(value); }\n  private _fixedBottomGap = 0;\n}\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-sidenav-container',\n  exportAs: 'matSidenavContainer',\n  templateUrl: 'sidenav-container.html',\n  styleUrls: ['drawer.css'],\n  host: {\n    'class': 'mat-drawer-container mat-sidenav-container',\n    '[class.mat-drawer-container-explicit-backdrop]': '_backdropOverride',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatSidenavContainer extends MatDrawerContainer {\n  @ContentChildren(MatSidenav) _drawers: QueryList<MatSidenav>;\n  @ContentChild(MatSidenavContent) _content: MatSidenavContent;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {PlatformModule} from '@angular/cdk/platform';\nimport {ScrollingModule} from '@angular/cdk/scrolling';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatDrawer, MatDrawerContainer, MatDrawerContent} from './drawer';\nimport {MatSidenav, MatSidenavContainer, MatSidenavContent} from './sidenav';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatCommonModule,\n    ScrollingModule,\n    PlatformModule,\n  ],\n  exports: [\n    MatCommonModule,\n    MatDrawer,\n    MatDrawerContainer,\n    MatDrawerContent,\n    MatSidenav,\n    MatSidenavContainer,\n    MatSidenavContent,\n  ],\n  declarations: [\n    MatDrawer,\n    MatDrawerContainer,\n    MatDrawerContent,\n    MatSidenav,\n    MatSidenavContainer,\n    MatSidenavContent,\n  ],\n})\nexport class MatSidenavModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {InjectionToken} from '@angular/core';\n\n\n/** Default `mat-slide-toggle` options that can be overridden. */\nexport interface MatSlideToggleDefaultOptions {\n  /** Whether toggle action triggers value changes in slide toggle. */\n  disableToggleValue?: boolean;\n  /** Whether drag action triggers value changes in slide toggle. */\n  disableDragValue?: boolean;\n}\n\n/** Injection token to be used to override the default options for `mat-slide-toggle`. */\nexport const MAT_SLIDE_TOGGLE_DEFAULT_OPTIONS =\n  new InjectionToken<MatSlideToggleDefaultOptions>('mat-slide-toggle-default-options', {\n    providedIn: 'root',\n    factory: () => ({disableToggleValue: false, disableDragValue: false})\n  });\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor} from '@angular/cdk/a11y';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {Platform} from '@angular/cdk/platform';\nimport {\n  AfterContentInit,\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Input,\n  OnDestroy,\n  Output,\n  ViewChild,\n  ViewEncapsulation,\n  NgZone,\n  Optional,\n  Inject,\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {\n  CanColor, CanColorCtor,\n  CanDisable, CanDisableCtor,\n  CanDisableRipple, CanDisableRippleCtor,\n  HammerInput,\n  HasTabIndex, HasTabIndexCtor,\n  mixinColor,\n  mixinDisabled,\n  mixinDisableRipple,\n  mixinTabIndex,\n} from '@angular/material/core';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\nimport {\n  MAT_SLIDE_TOGGLE_DEFAULT_OPTIONS,\n  MatSlideToggleDefaultOptions\n} from './slide-toggle-config';\n\n// Increasing integer for generating unique ids for slide-toggle components.\nlet nextUniqueId = 0;\n\n/** @docs-private */\nexport const MAT_SLIDE_TOGGLE_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatSlideToggle),\n  multi: true\n};\n\n/** Change event object emitted by a MatSlideToggle. */\nexport class MatSlideToggleChange {\n  constructor(\n    /** The source MatSlideToggle of the event. */\n    public source: MatSlideToggle,\n    /** The new `checked` value of the MatSlideToggle. */\n    public checked: boolean) { }\n}\n\n// Boilerplate for applying mixins to MatSlideToggle.\n/** @docs-private */\nexport class MatSlideToggleBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatSlideToggleMixinBase:\n    HasTabIndexCtor &\n    CanColorCtor &\n    CanDisableRippleCtor &\n    CanDisableCtor &\n    typeof MatSlideToggleBase =\n        mixinTabIndex(mixinColor(mixinDisableRipple(mixinDisabled(MatSlideToggleBase)), 'accent'));\n\n/** Represents a slidable \"switch\" toggle that can be moved between on and off. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-slide-toggle',\n  exportAs: 'matSlideToggle',\n  host: {\n    'class': 'mat-slide-toggle',\n    '[id]': 'id',\n    '[attr.tabindex]': '-1', // Needs to be `-1` so it can still receive programmatic focus.\n    '[class.mat-checked]': 'checked',\n    '[class.mat-disabled]': 'disabled',\n    '[class.mat-slide-toggle-label-before]': 'labelPosition == \"before\"',\n    '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"',\n    '(focus)': '_inputElement.nativeElement.focus()',\n  },\n  templateUrl: 'slide-toggle.html',\n  styleUrls: ['slide-toggle.css'],\n  providers: [MAT_SLIDE_TOGGLE_VALUE_ACCESSOR],\n  inputs: ['disabled', 'disableRipple', 'color', 'tabIndex'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatSlideToggle extends _MatSlideToggleMixinBase implements OnDestroy, AfterContentInit,\n    ControlValueAccessor, CanDisable, CanColor, HasTabIndex, CanDisableRipple {\n\n  private onChange = (_: any) => {};\n  private onTouched = () => {};\n\n  private _uniqueId: string = `mat-slide-toggle-${++nextUniqueId}`;\n  private _required: boolean = false;\n  private _checked: boolean = false;\n\n  /** Whether the thumb is currently being dragged. */\n  private _dragging = false;\n\n  /** Previous checked state before drag started. */\n  private _previousChecked: boolean;\n\n  /** Width of the thumb bar of the slide-toggle. */\n  private _thumbBarWidth: number;\n\n  /** Percentage of the thumb while dragging. Percentage as fraction of 100. */\n  private _dragPercentage: number;\n\n  /** Reference to the thumb HTMLElement. */\n  @ViewChild('thumbContainer') _thumbEl: ElementRef;\n\n  /** Reference to the thumb bar HTMLElement. */\n  @ViewChild('toggleBar') _thumbBarEl: ElementRef;\n\n  /** Name value will be applied to the input element if present. */\n  @Input() name: string | null = null;\n\n  /** A unique id for the slide-toggle input. If none is supplied, it will be auto-generated. */\n  @Input() id: string = this._uniqueId;\n\n  /** Whether the label should appear after or before the slide-toggle. Defaults to 'after'. */\n  @Input() labelPosition: 'before' | 'after' = 'after';\n\n  /** Used to set the aria-label attribute on the underlying input element. */\n  @Input('aria-label') ariaLabel: string | null = null;\n\n  /** Used to set the aria-labelledby attribute on the underlying input element. */\n  @Input('aria-labelledby') ariaLabelledby: string | null = null;\n\n  /** Whether the slide-toggle is required. */\n  @Input()\n  get required(): boolean { return this._required; }\n  set required(value) { this._required = coerceBooleanProperty(value); }\n\n  /** Whether the slide-toggle element is checked or not. */\n  @Input()\n  get checked(): boolean { return this._checked; }\n  set checked(value) {\n    this._checked = coerceBooleanProperty(value);\n    this._changeDetectorRef.markForCheck();\n  }\n  /** An event will be dispatched each time the slide-toggle changes its value. */\n  @Output() readonly change: EventEmitter<MatSlideToggleChange> =\n      new EventEmitter<MatSlideToggleChange>();\n\n  /**\n   * An event will be dispatched each time the slide-toggle input is toggled.\n   * This event is always emitted when the user toggles the slide toggle, but this does not mean\n   * the slide toggle's value has changed. The event does not fire when the user drags to change\n   * the slide toggle value.\n   */\n  @Output() readonly toggleChange: EventEmitter<void> = new EventEmitter<void>();\n\n  /**\n   * An event will be dispatched each time the slide-toggle is dragged.\n   * This event is always emitted when the user drags the slide toggle to make a change greater\n   * than 50%. It does not mean the slide toggle's value is changed. The event is not emitted when\n   * the user toggles the slide toggle to change its value.\n   */\n  @Output() readonly dragChange: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Returns the unique id for the visual hidden input. */\n  get inputId(): string { return `${this.id || this._uniqueId}-input`; }\n\n  /** Reference to the underlying input element. */\n  @ViewChild('input') _inputElement: ElementRef<HTMLInputElement>;\n\n  constructor(elementRef: ElementRef,\n              /**\n               * @deprecated The `_platform` parameter to be removed.\n               * @breaking-change 8.0.0\n               */\n              _platform: Platform,\n              private _focusMonitor: FocusMonitor,\n              private _changeDetectorRef: ChangeDetectorRef,\n              @Attribute('tabindex') tabIndex: string,\n              private _ngZone: NgZone,\n              @Inject(MAT_SLIDE_TOGGLE_DEFAULT_OPTIONS)\n                  public defaults: MatSlideToggleDefaultOptions,\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode?: string,\n              @Optional() private _dir?: Directionality) {\n    super(elementRef);\n    this.tabIndex = parseInt(tabIndex) || 0;\n  }\n\n  ngAfterContentInit() {\n    this._focusMonitor\n      .monitor(this._elementRef, true)\n      .subscribe(focusOrigin => {\n        if (!focusOrigin) {\n          // When a focused element becomes disabled, the browser *immediately* fires a blur event.\n          // Angular does not expect events to be raised during change detection, so any state\n          // change (such as a form control's 'ng-touched') will cause a changed-after-checked\n          // error. See https://github.com/angular/angular/issues/17793. To work around this,\n          // we defer telling the form control it has been touched until the next tick.\n          Promise.resolve().then(() => this.onTouched());\n        }\n      });\n  }\n\n  ngOnDestroy() {\n    this._focusMonitor.stopMonitoring(this._elementRef);\n  }\n\n  /** Method being called whenever the underlying input emits a change event. */\n  _onChangeEvent(event: Event) {\n    // We always have to stop propagation on the change event.\n    // Otherwise the change event, from the input element, will bubble up and\n    // emit its event object to the component's `change` output.\n    event.stopPropagation();\n\n    if (!this._dragging) {\n      this.toggleChange.emit();\n    }\n    // Releasing the pointer over the `<label>` element while dragging triggers another\n    // click event on the `<label>` element. This means that the checked state of the underlying\n    // input changed unintentionally and needs to be changed back. Or when the slide toggle's config\n    // disabled toggle change event by setting `disableToggleValue: true`, the slide toggle's value\n    // does not change, and the checked state of the underlying input needs to be changed back.\n    if (this._dragging || this.defaults.disableToggleValue) {\n      this._inputElement.nativeElement.checked = this.checked;\n      return;\n    }\n\n    // Sync the value from the underlying input element with the component instance.\n    this.checked = this._inputElement.nativeElement.checked;\n\n    // Emit our custom change event only if the underlying input emitted one. This ensures that\n    // there is no change event, when the checked state changes programmatically.\n    this._emitChangeEvent();\n  }\n\n  /** Method being called whenever the slide-toggle has been clicked. */\n  _onInputClick(event: Event) {\n    // We have to stop propagation for click events on the visual hidden input element.\n    // By default, when a user clicks on a label element, a generated click event will be\n    // dispatched on the associated input element. Since we are using a label element as our\n    // root container, the click event on the `slide-toggle` will be executed twice.\n    // The real click event will bubble up, and the generated click event also tries to bubble up.\n    // This will lead to multiple click events.\n    // Preventing bubbling for the second event will solve that issue.\n    event.stopPropagation();\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  writeValue(value: any): void {\n    this.checked = !!value;\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  registerOnChange(fn: any): void {\n    this.onChange = fn;\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  registerOnTouched(fn: any): void {\n    this.onTouched = fn;\n  }\n\n  /** Implemented as a part of ControlValueAccessor. */\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Focuses the slide-toggle. */\n  focus(): void {\n    this._focusMonitor.focusVia(this._inputElement, 'keyboard');\n  }\n\n  /** Toggles the checked state of the slide-toggle. */\n  toggle(): void {\n    this.checked = !this.checked;\n    this.onChange(this.checked);\n  }\n\n  /**\n   * Emits a change event on the `change` output. Also notifies the FormControl about the change.\n   */\n  private _emitChangeEvent() {\n    this.onChange(this.checked);\n    this.change.emit(new MatSlideToggleChange(this, this.checked));\n  }\n\n  /** Retrieves the percentage of thumb from the moved distance. Percentage as fraction of 100. */\n  private _getDragPercentage(distance: number) {\n    let percentage = (distance / this._thumbBarWidth) * 100;\n\n    // When the toggle was initially checked, then we have to start the drag at the end.\n    if (this._previousChecked) {\n      percentage += 100;\n    }\n\n    return Math.max(0, Math.min(percentage, 100));\n  }\n\n  _onDragStart() {\n    if (!this.disabled && !this._dragging) {\n      const thumbEl = this._thumbEl.nativeElement;\n      this._thumbBarWidth = this._thumbBarEl.nativeElement.clientWidth - thumbEl.clientWidth;\n      thumbEl.classList.add('mat-dragging');\n\n      this._previousChecked = this.checked;\n      this._dragging = true;\n    }\n  }\n\n  _onDrag(event: HammerInput) {\n    if (this._dragging) {\n      const direction = this._dir && this._dir.value === 'rtl' ? -1 : 1;\n      this._dragPercentage = this._getDragPercentage(event.deltaX * direction);\n      // Calculate the moved distance based on the thumb bar width.\n      const dragX = (this._dragPercentage / 100) * this._thumbBarWidth * direction;\n      this._thumbEl.nativeElement.style.transform = `translate3d(${dragX}px, 0, 0)`;\n    }\n  }\n\n  _onDragEnd() {\n    if (this._dragging) {\n      const newCheckedValue = this._dragPercentage > 50;\n\n      if (newCheckedValue !== this.checked) {\n        this.dragChange.emit();\n        if (!this.defaults.disableDragValue) {\n          this.checked = newCheckedValue;\n          this._emitChangeEvent();\n        }\n      }\n\n      // The drag should be stopped outside of the current event handler, otherwise the\n      // click event will be fired before it and will revert the drag change.\n      this._ngZone.runOutsideAngular(() => setTimeout(() => {\n        if (this._dragging) {\n          this._dragging = false;\n          this._thumbEl.nativeElement.classList.remove('mat-dragging');\n\n          // Reset the transform because the component will take care\n          // of the thumb position after drag.\n          this._thumbEl.nativeElement.style.transform = '';\n        }\n      }));\n    }\n  }\n\n  /** Method being called whenever the label text changes. */\n  _onLabelTextChange() {\n    // Since the event of the `cdkObserveContent` directive runs outside of the zone, the\n    // slide-toggle component will be only marked for check, but no actual change detection runs\n    // automatically. Instead of going back into the zone in order to trigger a change detection\n    // which causes *all* components to be checked (if explicitly marked or not using OnPush),\n    // we only trigger an explicit change detection for the slide-toggle view and it's children.\n    this._changeDetectorRef.detectChanges();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ObserversModule} from '@angular/cdk/observers';\nimport {NgModule} from '@angular/core';\nimport {GestureConfig, MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {HAMMER_GESTURE_CONFIG} from '@angular/platform-browser';\nimport {MatSlideToggle} from './slide-toggle';\n\n\n@NgModule({\n  imports: [MatRippleModule, MatCommonModule, ObserversModule],\n  exports: [MatSlideToggle, MatCommonModule],\n  declarations: [MatSlideToggle],\n  providers: [\n    {provide: HAMMER_GESTURE_CONFIG, useClass: GestureConfig}\n  ],\n})\nexport class MatSlideToggleModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceNumberProperty} from '@angular/cdk/coercion';\nimport {Platform} from '@angular/cdk/platform';\nimport {DOCUMENT} from '@angular/common';\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  Inject,\n  InjectionToken,\n  Input,\n  Optional,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {CanColor, CanColorCtor, mixinColor} from '@angular/material/core';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\n\n\n/** Possible mode for a progress spinner. */\nexport type ProgressSpinnerMode = 'determinate' | 'indeterminate';\n\n/**\n * Base reference size of the spinner.\n * @docs-private\n */\nconst BASE_SIZE = 100;\n\n/**\n * Base reference stroke width of the spinner.\n * @docs-private\n */\nconst BASE_STROKE_WIDTH = 10;\n\n// Boilerplate for applying mixins to MatProgressSpinner.\n/** @docs-private */\nexport class MatProgressSpinnerBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatProgressSpinnerMixinBase: CanColorCtor & typeof MatProgressSpinnerBase =\n    mixinColor(MatProgressSpinnerBase, 'primary');\n\n/** Default `mat-progress-spinner` options that can be overridden. */\nexport interface MatProgressSpinnerDefaultOptions {\n  /** Diameter of the spinner. */\n  diameter?: number;\n  /** Width of the spinner's stroke. */\n  strokeWidth?: number;\n  /**\n   * Whether the animations should be force to be enabled, ignoring if the current environment is\n   * using NoopAnimationsModule.\n   */\n  _forceAnimations?: boolean;\n}\n\n/** Injection token to be used to override the default options for `mat-progress-spinner`. */\nexport const MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS =\n    new InjectionToken<MatProgressSpinnerDefaultOptions>('mat-progress-spinner-default-options', {\n      providedIn: 'root',\n      factory: MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS_FACTORY,\n    });\n\n/** @docs-private */\nexport function MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS_FACTORY(): MatProgressSpinnerDefaultOptions {\n  return {diameter: BASE_SIZE};\n}\n\n// .0001 percentage difference is necessary in order to avoid unwanted animation frames\n// for example because the animation duration is 4 seconds, .1% accounts to 4ms\n// which are enough to see the flicker described in\n// https://github.com/angular/material2/issues/8984\nconst INDETERMINATE_ANIMATION_TEMPLATE = `\n @keyframes mat-progress-spinner-stroke-rotate-DIAMETER {\n    0%      { stroke-dashoffset: START_VALUE;  transform: rotate(0); }\n    12.5%   { stroke-dashoffset: END_VALUE;    transform: rotate(0); }\n    12.5001%  { stroke-dashoffset: END_VALUE;    transform: rotateX(180deg) rotate(72.5deg); }\n    25%     { stroke-dashoffset: START_VALUE;  transform: rotateX(180deg) rotate(72.5deg); }\n\n    25.0001%   { stroke-dashoffset: START_VALUE;  transform: rotate(270deg); }\n    37.5%   { stroke-dashoffset: END_VALUE;    transform: rotate(270deg); }\n    37.5001%  { stroke-dashoffset: END_VALUE;    transform: rotateX(180deg) rotate(161.5deg); }\n    50%     { stroke-dashoffset: START_VALUE;  transform: rotateX(180deg) rotate(161.5deg); }\n\n    50.0001%  { stroke-dashoffset: START_VALUE;  transform: rotate(180deg); }\n    62.5%   { stroke-dashoffset: END_VALUE;    transform: rotate(180deg); }\n    62.5001%  { stroke-dashoffset: END_VALUE;    transform: rotateX(180deg) rotate(251.5deg); }\n    75%     { stroke-dashoffset: START_VALUE;  transform: rotateX(180deg) rotate(251.5deg); }\n\n    75.0001%  { stroke-dashoffset: START_VALUE;  transform: rotate(90deg); }\n    87.5%   { stroke-dashoffset: END_VALUE;    transform: rotate(90deg); }\n    87.5001%  { stroke-dashoffset: END_VALUE;    transform: rotateX(180deg) rotate(341.5deg); }\n    100%    { stroke-dashoffset: START_VALUE;  transform: rotateX(180deg) rotate(341.5deg); }\n  }\n`;\n\n/**\n * `<mat-progress-spinner>` component.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-progress-spinner',\n  exportAs: 'matProgressSpinner',\n  host: {\n    'role': 'progressbar',\n    'class': 'mat-progress-spinner',\n    '[class._mat-animation-noopable]': `_noopAnimations`,\n    '[style.width.px]': 'diameter',\n    '[style.height.px]': 'diameter',\n    '[attr.aria-valuemin]': 'mode === \"determinate\" ? 0 : null',\n    '[attr.aria-valuemax]': 'mode === \"determinate\" ? 100 : null',\n    '[attr.aria-valuenow]': 'value',\n    '[attr.mode]': 'mode',\n  },\n  inputs: ['color'],\n  templateUrl: 'progress-spinner.html',\n  styleUrls: ['progress-spinner.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatProgressSpinner extends _MatProgressSpinnerMixinBase implements CanColor {\n\n  private _value = 0;\n  private _strokeWidth: number;\n  private _fallbackAnimation = false;\n\n  /** Tracks diameters of existing instances to de-dupe generated styles (default d = 100) */\n  private static diameters = new Set<number>([BASE_SIZE]);\n\n  /**\n   * Used for storing all of the generated keyframe animations.\n   * @dynamic\n   */\n  private static styleTag: HTMLStyleElement|null = null;\n\n  /** Whether the _mat-animation-noopable class should be applied, disabling animations.  */\n  _noopAnimations: boolean = this.animationMode === 'NoopAnimations' && (\n      !!this.defaults && !this.defaults._forceAnimations);\n\n  /** The diameter of the progress spinner (will set width and height of svg). */\n  @Input()\n  get diameter(): number { return this._diameter; }\n  set diameter(size: number) {\n    this._diameter = coerceNumberProperty(size);\n\n    if (!this._fallbackAnimation && !MatProgressSpinner.diameters.has(this._diameter)) {\n      this._attachStyleNode();\n    }\n  }\n  private _diameter = BASE_SIZE;\n\n  /** Stroke width of the progress spinner. */\n  @Input()\n  get strokeWidth(): number {\n    return this._strokeWidth || this.diameter / 10;\n  }\n  set strokeWidth(value: number) {\n    this._strokeWidth = coerceNumberProperty(value);\n  }\n\n  /** Mode of the progress circle */\n  @Input() mode: ProgressSpinnerMode = 'determinate';\n\n  /** Value of the progress circle. */\n  @Input()\n  get value(): number {\n    return this.mode === 'determinate' ? this._value : 0;\n  }\n  set value(newValue: number) {\n    this._value = Math.max(0, Math.min(100, coerceNumberProperty(newValue)));\n  }\n\n  constructor(public _elementRef: ElementRef,\n              platform: Platform,\n              @Optional() @Inject(DOCUMENT) private _document: any,\n              // @breaking-change 8.0.0 animationMode and defaults parameters to be made required.\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) private animationMode?: string,\n              @Inject(MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS)\n                  private defaults?: MatProgressSpinnerDefaultOptions) {\n\n    super(_elementRef);\n    this._fallbackAnimation = platform.EDGE || platform.TRIDENT;\n\n    if (defaults) {\n      if (defaults.diameter) {\n        this.diameter = defaults.diameter;\n      }\n\n      if (defaults.strokeWidth) {\n        this.strokeWidth = defaults.strokeWidth;\n      }\n    }\n\n    // On IE and Edge, we can't animate the `stroke-dashoffset`\n    // reliably so we fall back to a non-spec animation.\n    const animationClass =\n      `mat-progress-spinner-indeterminate${this._fallbackAnimation ? '-fallback' : ''}-animation`;\n\n    _elementRef.nativeElement.classList.add(animationClass);\n  }\n\n  /** The radius of the spinner, adjusted for stroke width. */\n  get _circleRadius() {\n    return (this.diameter - BASE_STROKE_WIDTH) / 2;\n  }\n\n  /** The view box of the spinner's svg element. */\n  get _viewBox() {\n    const viewBox = this._circleRadius * 2 + this.strokeWidth;\n    return `0 0 ${viewBox} ${viewBox}`;\n  }\n\n  /** The stroke circumference of the svg circle. */\n  get _strokeCircumference(): number {\n    return 2 * Math.PI * this._circleRadius;\n  }\n\n  /** The dash offset of the svg circle. */\n  get _strokeDashOffset() {\n    if (this.mode === 'determinate') {\n      return this._strokeCircumference * (100 - this._value) / 100;\n    }\n\n    // In fallback mode set the circle to 80% and rotate it with CSS.\n    if (this._fallbackAnimation && this.mode === 'indeterminate') {\n      return this._strokeCircumference * 0.2;\n    }\n\n    return null;\n  }\n\n  /** Stroke width of the circle in percent. */\n  get _circleStrokeWidth() {\n    return this.strokeWidth / this.diameter * 100;\n  }\n\n  /** Dynamically generates a style tag containing the correct animation for this diameter. */\n  private _attachStyleNode(): void {\n    let styleTag = MatProgressSpinner.styleTag;\n\n    if (!styleTag) {\n      styleTag = this._document.createElement('style');\n      this._document.head.appendChild(styleTag);\n      MatProgressSpinner.styleTag = styleTag;\n    }\n\n    if (styleTag && styleTag.sheet) {\n      (styleTag.sheet as CSSStyleSheet).insertRule(this._getAnimationText(), 0);\n    }\n\n    MatProgressSpinner.diameters.add(this.diameter);\n  }\n\n  /** Generates animation styles adjusted for the spinner's diameter. */\n  private _getAnimationText(): string {\n    return INDETERMINATE_ANIMATION_TEMPLATE\n        // Animation should begin at 5% and end at 80%\n        .replace(/START_VALUE/g, `${0.95 * this._strokeCircumference}`)\n        .replace(/END_VALUE/g, `${0.2 * this._strokeCircumference}`)\n        .replace(/DIAMETER/g, `${this.diameter}`);\n  }\n}\n\n\n/**\n * `<mat-spinner>` component.\n *\n * This is a component definition to be used as a convenience reference to create an\n * indeterminate `<mat-progress-spinner>` instance.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-spinner',\n  host: {\n    'role': 'progressbar',\n    'mode': 'indeterminate',\n    'class': 'mat-spinner mat-progress-spinner',\n    '[class._mat-animation-noopable]': `_noopAnimations`,\n    '[style.width.px]': 'diameter',\n    '[style.height.px]': 'diameter',\n  },\n  inputs: ['color'],\n  templateUrl: 'progress-spinner.html',\n  styleUrls: ['progress-spinner.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatSpinner extends MatProgressSpinner {\n  constructor(elementRef: ElementRef, platform: Platform,\n              @Optional() @Inject(DOCUMENT) document: any,\n              // @breaking-change 8.0.0 animationMode and defaults parameters to be made required.\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) animationMode?: string,\n              @Inject(MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS)\n                  defaults?: MatProgressSpinnerDefaultOptions) {\n    super(elementRef, platform, document, animationMode, defaults);\n    this.mode = 'indeterminate';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatProgressSpinner, MatSpinner} from './progress-spinner';\n\n\n@NgModule({\n  imports: [MatCommonModule, CommonModule],\n  exports: [\n    MatProgressSpinner,\n    MatSpinner,\n    MatCommonModule\n  ],\n  declarations: [\n    MatProgressSpinner,\n    MatSpinner\n  ],\n})\nclass MatProgressSpinnerModule {}\n\nexport {MatProgressSpinnerModule};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {UniqueSelectionDispatcher} from '@angular/cdk/collections';\nimport {\n  AfterContentInit,\n  AfterViewInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Output,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {\n  CanColor,\n  CanColorCtor,\n  CanDisable,\n  CanDisableCtor,\n  CanDisableRipple,\n  CanDisableRippleCtor,\n  HasTabIndex,\n  HasTabIndexCtor,\n  mixinColor,\n  mixinDisabled,\n  mixinDisableRipple,\n  mixinTabIndex,\n} from '@angular/material/core';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\n\n\n// Increasing integer for generating unique ids for radio components.\nlet nextUniqueId = 0;\n\n/**\n * Provider Expression that allows mat-radio-group to register as a ControlValueAccessor. This\n * allows it to support [(ngModel)] and ngControl.\n * @docs-private\n */\nexport const MAT_RADIO_GROUP_CONTROL_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatRadioGroup),\n  multi: true\n};\n\n/** Change event object emitted by MatRadio and MatRadioGroup. */\nexport class MatRadioChange {\n  constructor(\n    /** The MatRadioButton that emits the change event. */\n    public source: MatRadioButton,\n    /** The value of the MatRadioButton. */\n    public value: any) {}\n}\n\n\n// Boilerplate for applying mixins to MatRadioGroup.\n/** @docs-private */\nexport class MatRadioGroupBase { }\nexport const _MatRadioGroupMixinBase: CanDisableCtor & typeof MatRadioGroupBase =\n    mixinDisabled(MatRadioGroupBase);\n\n/**\n * A group of radio buttons. May contain one or more `<mat-radio-button>` elements.\n */\n@Directive({\n  selector: 'mat-radio-group',\n  exportAs: 'matRadioGroup',\n  providers: [MAT_RADIO_GROUP_CONTROL_VALUE_ACCESSOR],\n  host: {\n    'role': 'radiogroup',\n    'class': 'mat-radio-group',\n  },\n  inputs: ['disabled'],\n})\nexport class MatRadioGroup extends _MatRadioGroupMixinBase\n    implements AfterContentInit, ControlValueAccessor, CanDisable {\n\n  /** Selected value for the radio group. */\n  private _value: any = null;\n\n  /** The HTML name attribute applied to radio buttons in this group. */\n  private _name: string = `mat-radio-group-${nextUniqueId++}`;\n\n  /** The currently selected radio button. Should match value. */\n  private _selected: MatRadioButton | null = null;\n\n  /** Whether the `value` has been set to its initial value. */\n  private _isInitialized: boolean = false;\n\n  /** Whether the labels should appear after or before the radio-buttons. Defaults to 'after' */\n  private _labelPosition: 'before' | 'after' = 'after';\n\n  /** Whether the radio group is disabled. */\n  private _disabled: boolean = false;\n\n  /** Whether the radio group is required. */\n  private _required: boolean = false;\n\n  /** The method to be called in order to update ngModel */\n  _controlValueAccessorChangeFn: (value: any) => void = () => {};\n\n  /**\n   * onTouch function registered via registerOnTouch (ControlValueAccessor).\n   * @docs-private\n   */\n  onTouched: () => any = () => {};\n\n  /**\n   * Event emitted when the group value changes.\n   * Change events are only emitted when the value changes due to user interaction with\n   * a radio button (the same behavior as `<input type-\"radio\">`).\n   */\n  @Output() readonly change: EventEmitter<MatRadioChange> = new EventEmitter<MatRadioChange>();\n\n  /** Child radio buttons. */\n  @ContentChildren(forwardRef(() => MatRadioButton), { descendants: true })\n  _radios: QueryList<MatRadioButton>;\n\n  /** Name of the radio button group. All radio buttons inside this group will use this name. */\n  @Input()\n  get name(): string { return this._name; }\n  set name(value: string) {\n    this._name = value;\n    this._updateRadioButtonNames();\n  }\n\n  /** Whether the labels should appear after or before the radio-buttons. Defaults to 'after' */\n  @Input()\n  get labelPosition(): 'before' | 'after' {\n    return this._labelPosition;\n  }\n  set labelPosition(v) {\n    this._labelPosition = v === 'before' ? 'before' : 'after';\n    this._markRadiosForCheck();\n  }\n\n  /**\n   * Value for the radio-group. Should equal the value of the selected radio button if there is\n   * a corresponding radio button with a matching value. If there is not such a corresponding\n   * radio button, this value persists to be applied in case a new radio button is added with a\n   * matching value.\n   */\n  @Input()\n  get value(): any { return this._value; }\n  set value(newValue: any) {\n    if (this._value !== newValue) {\n      // Set this before proceeding to ensure no circular loop occurs with selection.\n      this._value = newValue;\n\n      this._updateSelectedRadioFromValue();\n      this._checkSelectedRadioButton();\n    }\n  }\n\n  _checkSelectedRadioButton() {\n    if (this._selected && !this._selected.checked) {\n      this._selected.checked = true;\n    }\n  }\n\n  /**\n   * The currently selected radio button. If set to a new radio button, the radio group value\n   * will be updated to match the new selected button.\n   */\n  @Input()\n  get selected() { return this._selected; }\n  set selected(selected: MatRadioButton | null) {\n    this._selected = selected;\n    this.value = selected ? selected.value : null;\n    this._checkSelectedRadioButton();\n  }\n\n  /** Whether the radio group is disabled */\n  @Input()\n  get disabled(): boolean { return this._disabled; }\n  set disabled(value) {\n    this._disabled = coerceBooleanProperty(value);\n    this._markRadiosForCheck();\n  }\n\n  /** Whether the radio group is required */\n  @Input()\n  get required(): boolean { return this._required; }\n  set required(value: boolean) {\n    this._required = coerceBooleanProperty(value);\n    this._markRadiosForCheck();\n  }\n\n  constructor(private _changeDetector: ChangeDetectorRef) {\n    super();\n  }\n\n  /**\n   * Initialize properties once content children are available.\n   * This allows us to propagate relevant attributes to associated buttons.\n   */\n  ngAfterContentInit() {\n    // Mark this component as initialized in AfterContentInit because the initial value can\n    // possibly be set by NgModel on MatRadioGroup, and it is possible that the OnInit of the\n    // NgModel occurs *after* the OnInit of the MatRadioGroup.\n    this._isInitialized = true;\n  }\n\n  /**\n   * Mark this group as being \"touched\" (for ngModel). Meant to be called by the contained\n   * radio buttons upon their blur.\n   */\n  _touch() {\n    if (this.onTouched) {\n      this.onTouched();\n    }\n  }\n\n  private _updateRadioButtonNames(): void {\n    if (this._radios) {\n      this._radios.forEach(radio => {\n        radio.name = this.name;\n      });\n    }\n  }\n\n  /** Updates the `selected` radio button from the internal _value state. */\n  private _updateSelectedRadioFromValue(): void {\n    // If the value already matches the selected radio, do nothing.\n    const isAlreadySelected = this._selected !== null && this._selected.value === this._value;\n\n    if (this._radios && !isAlreadySelected) {\n      this._selected = null;\n      this._radios.forEach(radio => {\n        radio.checked = this.value === radio.value;\n        if (radio.checked) {\n          this._selected = radio;\n        }\n      });\n    }\n  }\n\n  /** Dispatch change event with current selection and group value. */\n  _emitChangeEvent(): void {\n    if (this._isInitialized) {\n      this.change.emit(new MatRadioChange(this._selected!, this._value));\n    }\n  }\n\n  _markRadiosForCheck() {\n    if (this._radios) {\n      this._radios.forEach(radio => radio._markForCheck());\n    }\n  }\n\n  /**\n   * Sets the model value. Implemented as part of ControlValueAccessor.\n   * @param value\n   */\n  writeValue(value: any) {\n    this.value = value;\n    this._changeDetector.markForCheck();\n  }\n\n  /**\n   * Registers a callback to be triggered when the model value changes.\n   * Implemented as part of ControlValueAccessor.\n   * @param fn Callback to be registered.\n   */\n  registerOnChange(fn: (value: any) => void) {\n    this._controlValueAccessorChangeFn = fn;\n  }\n\n  /**\n   * Registers a callback to be triggered when the control is touched.\n   * Implemented as part of ControlValueAccessor.\n   * @param fn Callback to be registered.\n   */\n  registerOnTouched(fn: any) {\n    this.onTouched = fn;\n  }\n\n  /**\n   * Sets the disabled state of the control. Implemented as a part of ControlValueAccessor.\n   * @param isDisabled Whether the control should be disabled.\n   */\n  setDisabledState(isDisabled: boolean) {\n    this.disabled = isDisabled;\n    this._changeDetector.markForCheck();\n  }\n}\n\n// Boilerplate for applying mixins to MatRadioButton.\n/** @docs-private */\nexport class MatRadioButtonBase {\n  // Since the disabled property is manually defined for the MatRadioButton and isn't set up in\n  // the mixin base class. To be able to use the tabindex mixin, a disabled property must be\n  // defined to properly work.\n  disabled: boolean;\n\n  constructor(public _elementRef: ElementRef) {}\n}\n// As per Material design specifications the selection control radio should use the accent color\n// palette by default. https://material.io/guidelines/components/selection-controls.html\nexport const _MatRadioButtonMixinBase:\n    CanColorCtor & CanDisableRippleCtor & HasTabIndexCtor & typeof MatRadioButtonBase =\n        mixinColor(mixinDisableRipple(mixinTabIndex(MatRadioButtonBase)), 'accent');\n\n/**\n * A Material design radio-button. Typically placed inside of `<mat-radio-group>` elements.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-radio-button',\n  templateUrl: 'radio.html',\n  styleUrls: ['radio.css'],\n  inputs: ['color', 'disableRipple', 'tabIndex'],\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matRadioButton',\n  host: {\n    'class': 'mat-radio-button',\n    '[class.mat-radio-checked]': 'checked',\n    '[class.mat-radio-disabled]': 'disabled',\n    '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"',\n    '[attr.tabindex]': 'null',\n    '[attr.id]': 'id',\n    // Note: under normal conditions focus shouldn't land on this element, however it may be\n    // programmatically set, for example inside of a focus trap, in this case we want to forward\n    // the focus to the native element.\n    '(focus)': '_inputElement.nativeElement.focus()',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatRadioButton extends _MatRadioButtonMixinBase\n    implements OnInit, AfterViewInit, OnDestroy, CanColor, CanDisableRipple, HasTabIndex {\n\n  private _uniqueId: string = `mat-radio-${++nextUniqueId}`;\n\n  /** The unique ID for the radio button. */\n  @Input() id: string = this._uniqueId;\n\n  /** Analog to HTML 'name' attribute used to group radios for unique selection. */\n  @Input() name: string;\n\n  /** Used to set the 'aria-label' attribute on the underlying input element. */\n  @Input('aria-label') ariaLabel: string;\n\n  /** The 'aria-labelledby' attribute takes precedence as the element's text alternative. */\n  @Input('aria-labelledby') ariaLabelledby: string;\n\n  /** The 'aria-describedby' attribute is read after the element's label and field type. */\n  @Input('aria-describedby') ariaDescribedby: string;\n\n  /** Whether this radio button is checked. */\n  @Input()\n  get checked(): boolean { return this._checked; }\n  set checked(value: boolean) {\n    const newCheckedState = coerceBooleanProperty(value);\n    if (this._checked !== newCheckedState) {\n      this._checked = newCheckedState;\n      if (newCheckedState && this.radioGroup && this.radioGroup.value !== this.value) {\n        this.radioGroup.selected = this;\n      } else if (!newCheckedState && this.radioGroup && this.radioGroup.value === this.value) {\n\n        // When unchecking the selected radio button, update the selected radio\n        // property on the group.\n        this.radioGroup.selected = null;\n      }\n\n      if (newCheckedState) {\n        // Notify all radio buttons with the same name to un-check.\n        this._radioDispatcher.notify(this.id, this.name);\n      }\n      this._changeDetector.markForCheck();\n    }\n  }\n\n  /** The value of this radio button. */\n  @Input()\n  get value(): any { return this._value; }\n  set value(value: any) {\n    if (this._value !== value) {\n      this._value = value;\n      if (this.radioGroup !== null) {\n        if (!this.checked) {\n          // Update checked when the value changed to match the radio group's value\n          this.checked = this.radioGroup.value === value;\n        }\n        if (this.checked) {\n          this.radioGroup.selected = this;\n        }\n      }\n    }\n  }\n\n  /** Whether the label should appear after or before the radio button. Defaults to 'after' */\n  @Input()\n  get labelPosition(): 'before' | 'after' {\n    return this._labelPosition || (this.radioGroup && this.radioGroup.labelPosition) || 'after';\n  }\n  set labelPosition(value) {\n    this._labelPosition = value;\n  }\n  private _labelPosition: 'before' | 'after';\n\n  /** Whether the radio button is disabled. */\n  @Input()\n  get disabled(): boolean {\n    return this._disabled || (this.radioGroup !== null && this.radioGroup.disabled);\n  }\n  set disabled(value: boolean) {\n    const newDisabledState = coerceBooleanProperty(value);\n    if (this._disabled !== newDisabledState) {\n      this._disabled = newDisabledState;\n      this._changeDetector.markForCheck();\n    }\n  }\n\n  /** Whether the radio button is required. */\n  @Input()\n  get required(): boolean {\n    return this._required || (this.radioGroup && this.radioGroup.required);\n  }\n  set required(value: boolean) {\n    this._required = coerceBooleanProperty(value);\n  }\n\n  /**\n   * Event emitted when the checked state of this radio button changes.\n   * Change events are only emitted when the value changes due to user interaction with\n   * the radio button (the same behavior as `<input type-\"radio\">`).\n   */\n  @Output() readonly change: EventEmitter<MatRadioChange> = new EventEmitter<MatRadioChange>();\n\n  /** The parent radio group. May or may not be present. */\n  radioGroup: MatRadioGroup;\n\n  /** ID of the native input element inside `<mat-radio-button>` */\n  get inputId(): string { return `${this.id || this._uniqueId}-input`; }\n\n  /** Whether this radio is checked. */\n  private _checked: boolean = false;\n\n  /** Whether this radio is disabled. */\n  private _disabled: boolean;\n\n  /** Whether this radio is required. */\n  private _required: boolean;\n\n  /** Value assigned to this radio. */\n  private _value: any = null;\n\n  /** Unregister function for _radioDispatcher */\n  private _removeUniqueSelectionListener: () => void = () => {};\n\n  /** The native `<input type=radio>` element */\n  @ViewChild('input') _inputElement: ElementRef<HTMLInputElement>;\n\n  constructor(@Optional() radioGroup: MatRadioGroup,\n              elementRef: ElementRef,\n              private _changeDetector: ChangeDetectorRef,\n              private _focusMonitor: FocusMonitor,\n              private _radioDispatcher: UniqueSelectionDispatcher,\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode?: string) {\n    super(elementRef);\n\n    // Assertions. Ideally these should be stripped out by the compiler.\n    // TODO(jelbourn): Assert that there's no name binding AND a parent radio group.\n    this.radioGroup = radioGroup;\n\n    this._removeUniqueSelectionListener =\n      _radioDispatcher.listen((id: string, name: string) => {\n        if (id !== this.id && name === this.name) {\n          this.checked = false;\n        }\n      });\n  }\n\n  /** Focuses the radio button. */\n  focus(): void {\n    this._focusMonitor.focusVia(this._inputElement, 'keyboard');\n  }\n\n  /**\n   * Marks the radio button as needing checking for change detection.\n   * This method is exposed because the parent radio group will directly\n   * update bound properties of the radio button.\n   */\n  _markForCheck() {\n    // When group value changes, the button will not be notified. Use `markForCheck` to explicit\n    // update radio button's status\n    this._changeDetector.markForCheck();\n  }\n\n  ngOnInit() {\n    if (this.radioGroup) {\n      // If the radio is inside a radio group, determine if it should be checked\n      this.checked = this.radioGroup.value === this._value;\n      // Copy name from parent radio group\n      this.name = this.radioGroup.name;\n    }\n  }\n\n  ngAfterViewInit() {\n    this._focusMonitor\n      .monitor(this._elementRef, true)\n      .subscribe(focusOrigin => {\n        if (!focusOrigin && this.radioGroup) {\n          this.radioGroup._touch();\n        }\n      });\n  }\n\n  ngOnDestroy() {\n    this._focusMonitor.stopMonitoring(this._elementRef);\n    this._removeUniqueSelectionListener();\n  }\n\n  /** Dispatch change event with current value. */\n  private _emitChangeEvent(): void {\n    this.change.emit(new MatRadioChange(this, this._value));\n  }\n\n  _isRippleDisabled() {\n    return this.disableRipple || this.disabled;\n  }\n\n  _onInputClick(event: Event) {\n    // We have to stop propagation for click events on the visual hidden input element.\n    // By default, when a user clicks on a label element, a generated click event will be\n    // dispatched on the associated input element. Since we are using a label element as our\n    // root container, the click event on the `radio-button` will be executed twice.\n    // The real click event will bubble up, and the generated click event also tries to bubble up.\n    // This will lead to multiple click events.\n    // Preventing bubbling for the second event will solve that issue.\n    event.stopPropagation();\n  }\n\n  /**\n   * Triggered when the radio button received a click or the input recognized any change.\n   * Clicking on a label element, will trigger a change event on the associated input.\n   */\n  _onInputChange(event: Event) {\n    // We always have to stop propagation on the change event.\n    // Otherwise the change event, from the input element, will bubble up and\n    // emit its event object to the `change` output.\n    event.stopPropagation();\n\n    const groupValueChanged = this.radioGroup && this.value !== this.radioGroup.value;\n    this.checked = true;\n    this._emitChangeEvent();\n\n    if (this.radioGroup) {\n      this.radioGroup._controlValueAccessorChangeFn(this.value);\n      this.radioGroup._touch();\n      if (groupValueChanged) {\n        this.radioGroup._emitChangeEvent();\n      }\n    }\n  }\n\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {MatRadioButton, MatRadioGroup} from './radio';\n\n\n@NgModule({\n  imports: [CommonModule, MatRippleModule, MatCommonModule],\n  exports: [MatRadioGroup, MatRadioButton, MatCommonModule],\n  declarations: [MatRadioGroup, MatRadioButton],\n})\nexport class MatRadioModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/**\n * Animations used by the Material drawers.\n * @docs-private\n */\nexport const matDrawerAnimations: {\n  readonly transformDrawer: AnimationTriggerMetadata;\n} = {\n  /** Animation that slides a drawer in and out. */\n  transformDrawer: trigger('transform', [\n    // We remove the `transform` here completely, rather than setting it to zero, because:\n    // 1. Having a transform can cause elements with ripples or an animated\n    //    transform to shift around in Chrome with an RTL layout (see #10023).\n    // 2. 3d transforms causes text to appear blurry on IE and Edge.\n    state('open, open-instant', style({\n      'transform': 'none',\n      'visibility': 'visible',\n    })),\n    state('void', style({\n      // Avoids the shadow showing up when closed in SSR.\n      'box-shadow': 'none',\n      'visibility': 'hidden',\n    })),\n    transition('void => open-instant', animate('0ms')),\n    transition('void <=> open, open-instant => void',\n        animate('400ms cubic-bezier(0.25, 0.8, 0.25, 1)'))\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {A11yModule} from '@angular/cdk/a11y';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {GestureConfig, MatCommonModule} from '@angular/material/core';\nimport {HAMMER_GESTURE_CONFIG} from '@angular/platform-browser';\nimport {\n  MatTooltip,\n  TooltipComponent,\n  MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY_PROVIDER,\n} from './tooltip';\n\n@NgModule({\n  imports: [\n    A11yModule,\n    CommonModule,\n    OverlayModule,\n    MatCommonModule,\n  ],\n  exports: [MatTooltip, TooltipComponent, MatCommonModule],\n  declarations: [MatTooltip, TooltipComponent],\n  entryComponents: [TooltipComponent],\n  providers: [\n    MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY_PROVIDER,\n    {provide: HAMMER_GESTURE_CONFIG, useClass: GestureConfig},\n  ]\n})\nexport class MatTooltipModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable, Optional, SkipSelf} from '@angular/core';\nimport {Subject} from 'rxjs';\n\n\n/**\n * To modify the labels and text displayed, create a new instance of MatPaginatorIntl and\n * include it in a custom provider\n */\n@Injectable({providedIn: 'root'})\nexport class MatPaginatorIntl {\n  /**\n   * Stream to emit from when labels are changed. Use this to notify components when the labels have\n   * changed after initialization.\n   */\n  readonly changes: Subject<void> = new Subject<void>();\n\n  /** A label for the page size selector. */\n  itemsPerPageLabel: string = 'Items per page:';\n\n  /** A label for the button that increments the current page. */\n  nextPageLabel: string = 'Next page';\n\n  /** A label for the button that decrements the current page. */\n  previousPageLabel: string = 'Previous page';\n\n  /** A label for the button that moves to the first page. */\n  firstPageLabel: string = 'First page';\n\n  /** A label for the button that moves to the last page. */\n  lastPageLabel: string = 'Last page';\n\n  /** A label for the range of items within the current page and the length of the whole list. */\n  getRangeLabel = (page: number, pageSize: number, length: number) => {\n    if (length == 0 || pageSize == 0) { return `0 of ${length}`; }\n\n    length = Math.max(length, 0);\n\n    const startIndex = page * pageSize;\n\n    // If the start index exceeds the list length, do not try and fix the end index to the end.\n    const endIndex = startIndex < length ?\n        Math.min(startIndex + pageSize, length) :\n        startIndex + pageSize;\n\n    return `${startIndex + 1} - ${endIndex} of ${length}`;\n  }\n}\n\n/** @docs-private */\nexport function MAT_PAGINATOR_INTL_PROVIDER_FACTORY(parentIntl: MatPaginatorIntl) {\n  return parentIntl || new MatPaginatorIntl();\n}\n\n/** @docs-private */\nexport const MAT_PAGINATOR_INTL_PROVIDER = {\n  // If there is already an MatPaginatorIntl available, use that. Otherwise, provide a new one.\n  provide: MatPaginatorIntl,\n  deps: [[new Optional(), new SkipSelf(), MatPaginatorIntl]],\n  useFactory: MAT_PAGINATOR_INTL_PROVIDER_FACTORY\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceNumberProperty, coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  OnInit,\n  Output,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {Subscription} from 'rxjs';\nimport {MatPaginatorIntl} from './paginator-intl';\nimport {\n  HasInitialized,\n  HasInitializedCtor,\n  mixinInitialized,\n  ThemePalette,\n} from '@angular/material/core';\n\n/** The default page size if there is no page size and there are no provided page size options. */\nconst DEFAULT_PAGE_SIZE = 50;\n\n/**\n * Change event object that is emitted when the user selects a\n * different page size or navigates to another page.\n */\nexport class PageEvent {\n  /** The current page index. */\n  pageIndex: number;\n\n  /**\n   * Index of the page that was selected previously.\n   * @breaking-change 8.0.0 To be made into a required property.\n   */\n  previousPageIndex?: number;\n\n  /** The current page size */\n  pageSize: number;\n\n  /** The current total number of items being paged */\n  length: number;\n}\n\n// Boilerplate for applying mixins to MatPaginator.\n/** @docs-private */\nexport class MatPaginatorBase {}\nexport const _MatPaginatorBase: HasInitializedCtor & typeof MatPaginatorBase =\n    mixinInitialized(MatPaginatorBase);\n\n/**\n * Component to provide navigation between paged information. Displays the size of the current\n * page, user-selectable options to change that size, what items are being shown, and\n * navigational button to go to the previous or next page.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-paginator',\n  exportAs: 'matPaginator',\n  templateUrl: 'paginator.html',\n  styleUrls: ['paginator.css'],\n  host: {\n    'class': 'mat-paginator',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatPaginator extends _MatPaginatorBase implements OnInit, OnDestroy, HasInitialized {\n  private _initialized: boolean;\n  private _intlChanges: Subscription;\n\n  /** Theme color to be used for the underlying form controls. */\n  @Input() color: ThemePalette;\n\n  /** The zero-based page index of the displayed list of items. Defaulted to 0. */\n  @Input()\n  get pageIndex(): number { return this._pageIndex; }\n  set pageIndex(value: number) {\n    this._pageIndex = Math.max(coerceNumberProperty(value), 0);\n    this._changeDetectorRef.markForCheck();\n  }\n  _pageIndex: number = 0;\n\n  /** The length of the total number of items that are being paginated. Defaulted to 0. */\n  @Input()\n  get length(): number { return this._length; }\n  set length(value: number) {\n    this._length = coerceNumberProperty(value);\n    this._changeDetectorRef.markForCheck();\n  }\n  _length: number = 0;\n\n  /** Number of items to display on a page. By default set to 50. */\n  @Input()\n  get pageSize(): number { return this._pageSize; }\n  set pageSize(value: number) {\n    this._pageSize = Math.max(coerceNumberProperty(value), 0);\n    this._updateDisplayedPageSizeOptions();\n  }\n  private _pageSize: number;\n\n  /** The set of provided page size options to display to the user. */\n  @Input()\n  get pageSizeOptions(): number[] { return this._pageSizeOptions; }\n  set pageSizeOptions(value: number[]) {\n    this._pageSizeOptions = (value || []).map(p => coerceNumberProperty(p));\n    this._updateDisplayedPageSizeOptions();\n  }\n  private _pageSizeOptions: number[] = [];\n\n  /** Whether to hide the page size selection UI from the user. */\n  @Input()\n  get hidePageSize(): boolean { return this._hidePageSize; }\n  set hidePageSize(value: boolean) {\n    this._hidePageSize = coerceBooleanProperty(value);\n  }\n  private _hidePageSize = false;\n\n\n  /** Whether to show the first/last buttons UI to the user. */\n  @Input()\n  get showFirstLastButtons(): boolean { return this._showFirstLastButtons; }\n  set showFirstLastButtons(value: boolean) {\n    this._showFirstLastButtons = coerceBooleanProperty(value);\n  }\n  private _showFirstLastButtons = false;\n\n  /** Event emitted when the paginator changes the page size or page index. */\n  @Output() readonly page: EventEmitter<PageEvent> = new EventEmitter<PageEvent>();\n\n  /** Displayed set of page size options. Will be sorted and include current page size. */\n  _displayedPageSizeOptions: number[];\n\n  constructor(public _intl: MatPaginatorIntl,\n              private _changeDetectorRef: ChangeDetectorRef) {\n    super();\n    this._intlChanges = _intl.changes.subscribe(() => this._changeDetectorRef.markForCheck());\n  }\n\n  ngOnInit() {\n    this._initialized = true;\n    this._updateDisplayedPageSizeOptions();\n    this._markInitialized();\n  }\n\n  ngOnDestroy() {\n    this._intlChanges.unsubscribe();\n  }\n\n  /** Advances to the next page if it exists. */\n  nextPage(): void {\n    if (!this.hasNextPage()) { return; }\n\n    const previousPageIndex = this.pageIndex;\n    this.pageIndex++;\n    this._emitPageEvent(previousPageIndex);\n  }\n\n  /** Move back to the previous page if it exists. */\n  previousPage(): void {\n    if (!this.hasPreviousPage()) { return; }\n\n    const previousPageIndex = this.pageIndex;\n    this.pageIndex--;\n    this._emitPageEvent(previousPageIndex);\n  }\n\n  /** Move to the first page if not already there. */\n  firstPage(): void {\n    // hasPreviousPage being false implies at the start\n    if (!this.hasPreviousPage()) { return; }\n\n    const previousPageIndex = this.pageIndex;\n    this.pageIndex = 0;\n    this._emitPageEvent(previousPageIndex);\n  }\n\n  /** Move to the last page if not already there. */\n  lastPage(): void {\n    // hasNextPage being false implies at the end\n    if (!this.hasNextPage()) { return; }\n\n    const previousPageIndex = this.pageIndex;\n    this.pageIndex = this.getNumberOfPages() - 1;\n    this._emitPageEvent(previousPageIndex);\n  }\n\n  /** Whether there is a previous page. */\n  hasPreviousPage(): boolean {\n    return this.pageIndex >= 1 && this.pageSize != 0;\n  }\n\n  /** Whether there is a next page. */\n  hasNextPage(): boolean {\n    const maxPageIndex = this.getNumberOfPages() - 1;\n    return this.pageIndex < maxPageIndex && this.pageSize != 0;\n  }\n\n  /** Calculate the number of pages */\n  getNumberOfPages(): number {\n    if (!this.pageSize) {\n      return 0;\n    }\n\n    return Math.ceil(this.length / this.pageSize);\n  }\n\n\n  /**\n   * Changes the page size so that the first item displayed on the page will still be\n   * displayed using the new page size.\n   *\n   * For example, if the page size is 10 and on the second page (items indexed 10-19) then\n   * switching so that the page size is 5 will set the third page as the current page so\n   * that the 10th item will still be displayed.\n   */\n  _changePageSize(pageSize: number) {\n    // Current page needs to be updated to reflect the new page size. Navigate to the page\n    // containing the previous page's first item.\n    const startIndex = this.pageIndex * this.pageSize;\n    const previousPageIndex = this.pageIndex;\n\n    this.pageIndex = Math.floor(startIndex / pageSize) || 0;\n    this.pageSize = pageSize;\n    this._emitPageEvent(previousPageIndex);\n  }\n\n  /**\n   * Updates the list of page size options to display to the user. Includes making sure that\n   * the page size is an option and that the list is sorted.\n   */\n  private _updateDisplayedPageSizeOptions() {\n    if (!this._initialized) { return; }\n\n    // If no page size is provided, use the first page size option or the default page size.\n    if (!this.pageSize) {\n      this._pageSize = this.pageSizeOptions.length != 0 ?\n          this.pageSizeOptions[0] :\n          DEFAULT_PAGE_SIZE;\n    }\n\n    this._displayedPageSizeOptions = this.pageSizeOptions.slice();\n\n    if (this._displayedPageSizeOptions.indexOf(this.pageSize) === -1) {\n      this._displayedPageSizeOptions.push(this.pageSize);\n    }\n\n    // Sort the numbers using a number-specific sort function.\n    this._displayedPageSizeOptions.sort((a, b) => a - b);\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Emits an event notifying that a change of the paginator's properties has been triggered. */\n  private _emitPageEvent(previousPageIndex: number) {\n    this.page.emit({\n      previousPageIndex,\n      pageIndex: this.pageIndex,\n      pageSize: this.pageSize,\n      length: this.length\n    });\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatButtonModule} from '@angular/material/button';\nimport {MatSelectModule} from '@angular/material/select';\nimport {MatTooltipModule} from '@angular/material/tooltip';\nimport {MatPaginator} from './paginator';\nimport {MAT_PAGINATOR_INTL_PROVIDER} from './paginator-intl';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatButtonModule,\n    MatSelectModule,\n    MatTooltipModule,\n  ],\n  exports: [MatPaginator],\n  declarations: [MatPaginator],\n  providers: [MAT_PAGINATOR_INTL_PROVIDER],\n})\nexport class MatPaginatorModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  Component,\n  ChangeDetectionStrategy,\n  ElementRef,\n  Inject,\n  Input,\n  Output,\n  EventEmitter,\n  Optional,\n  NgZone,\n  ViewEncapsulation,\n  AfterViewInit,\n  ViewChild,\n  OnDestroy,\n  InjectionToken,\n  inject,\n} from '@angular/core';\nimport {fromEvent, Subscription} from 'rxjs';\nimport {filter} from 'rxjs/operators';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\nimport {CanColor, CanColorCtor, mixinColor} from '@angular/material/core';\nimport {DOCUMENT} from '@angular/common';\n\n// TODO(josephperrott): Benchpress tests.\n// TODO(josephperrott): Add ARIA attributes for progress bar \"for\".\n\n// Boilerplate for applying mixins to MatProgressBar.\n/** @docs-private */\nexport class MatProgressBarBase {\n  constructor(public _elementRef: ElementRef) { }\n}\n\n/** Last animation end data. */\nexport interface ProgressAnimationEnd {\n  value: number;\n}\n\nexport const _MatProgressBarMixinBase: CanColorCtor & typeof MatProgressBarBase =\n    mixinColor(MatProgressBarBase, 'primary');\n\n/**\n * Injection token used to provide the current location to `MatProgressBar`.\n * Used to handle server-side rendering and to stub out during unit tests.\n * @docs-private\n */\nexport const MAT_PROGRESS_BAR_LOCATION = new InjectionToken<MatProgressBarLocation>(\n  'mat-progress-bar-location',\n  {providedIn: 'root', factory: MAT_PROGRESS_BAR_LOCATION_FACTORY}\n);\n\n/**\n * Stubbed out location for `MatProgressBar`.\n * @docs-private\n */\nexport interface MatProgressBarLocation {\n  getPathname: () => string;\n}\n\n/** @docs-private */\nexport function MAT_PROGRESS_BAR_LOCATION_FACTORY(): MatProgressBarLocation {\n  const _document = inject(DOCUMENT);\n  const _location = _document ? _document.location : null;\n\n  return {\n    // Note that this needs to be a function, rather than a property, because Angular\n    // will only resolve it once, but we want the current path on each call.\n    getPathname: () => _location ? (_location.pathname + _location.search) : ''\n  };\n}\n\n\n/** Counter used to generate unique IDs for progress bars. */\nlet progressbarId = 0;\n\n/**\n * `<mat-progress-bar>` component.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-progress-bar',\n  exportAs: 'matProgressBar',\n  host: {\n    'role': 'progressbar',\n    'aria-valuemin': '0',\n    'aria-valuemax': '100',\n    '[attr.aria-valuenow]': 'value',\n    '[attr.mode]': 'mode',\n    'class': 'mat-progress-bar',\n    '[class._mat-animation-noopable]': `_isNoopAnimation`,\n  },\n  inputs: ['color'],\n  templateUrl: 'progress-bar.html',\n  styleUrls: ['progress-bar.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatProgressBar extends _MatProgressBarMixinBase implements CanColor,\n                                                      AfterViewInit, OnDestroy {\n  constructor(public _elementRef: ElementRef, private _ngZone: NgZone,\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode?: string,\n              /**\n               * @deprecated `location` parameter to be made required.\n               * @breaking-change 8.0.0\n               */\n              @Optional() @Inject(MAT_PROGRESS_BAR_LOCATION) location?: MatProgressBarLocation) {\n    super(_elementRef);\n\n    // We need to prefix the SVG reference with the current path, otherwise they won't work\n    // in Safari if the page has a `<base>` tag. Note that we need quotes inside the `url()`,\n\n    // because named route URLs can contain parentheses (see #12338). Also we don't use since\n    // we can't tell the difference between whether\n    // the consumer is using the hash location strategy or not, because `Location` normalizes\n    // both `/#/foo/bar` and `/foo/bar` to the same thing.\n    const path = location ? location.getPathname().split('#')[0] : '';\n    this._rectangleFillValue = `url('${path}#${this.progressbarId}')`;\n    this._isNoopAnimation = _animationMode === 'NoopAnimations';\n  }\n\n  /** Flag that indicates whether NoopAnimations mode is set to true. */\n  _isNoopAnimation = false;\n\n  /** Value of the progress bar. Defaults to zero. Mirrored to aria-valuenow. */\n  @Input()\n  get value(): number { return this._value; }\n  set value(v: number) {\n    this._value = clamp(v || 0);\n\n    // When noop animation is set to true, trigger animationEnd directly.\n    if (this._isNoopAnimation) {\n      this.emitAnimationEnd();\n    }\n  }\n  private _value: number = 0;\n\n  /** Buffer value of the progress bar. Defaults to zero. */\n  @Input()\n  get bufferValue(): number { return this._bufferValue; }\n  set bufferValue(v: number) { this._bufferValue = clamp(v || 0); }\n  private _bufferValue: number = 0;\n\n  @ViewChild('primaryValueBar') _primaryValueBar: ElementRef;\n\n  /**\n   * Event emitted when animation of the primary progress bar completes. This event will not\n   * be emitted when animations are disabled, nor will it be emitted for modes with continuous\n   * animations (indeterminate and query).\n   */\n  @Output() animationEnd = new EventEmitter<ProgressAnimationEnd>();\n\n  /** Reference to animation end subscription to be unsubscribed on destroy. */\n  private _animationEndSubscription: Subscription = Subscription.EMPTY;\n\n  /**\n   * Mode of the progress bar.\n   *\n   * Input must be one of these values: determinate, indeterminate, buffer, query, defaults to\n   * 'determinate'.\n   * Mirrored to mode attribute.\n   */\n  @Input() mode: 'determinate' | 'indeterminate' | 'buffer' | 'query' = 'determinate';\n\n  /** ID of the progress bar. */\n  progressbarId = `mat-progress-bar-${progressbarId++}`;\n\n  /** Attribute to be used for the `fill` attribute on the internal `rect` element. */\n  _rectangleFillValue: string;\n\n  /** Gets the current transform value for the progress bar's primary indicator. */\n  _primaryTransform() {\n    const scale = this.value / 100;\n    return {transform: `scaleX(${scale})`};\n  }\n\n  /**\n   * Gets the current transform value for the progress bar's buffer indicator. Only used if the\n   * progress mode is set to buffer, otherwise returns an undefined, causing no transformation.\n   */\n  _bufferTransform() {\n    if (this.mode === 'buffer') {\n      const scale = this.bufferValue / 100;\n      return {transform: `scaleX(${scale})`};\n    }\n  }\n\n  ngAfterViewInit() {\n    if (!this._isNoopAnimation) {\n      // Run outside angular so change detection didn't get triggered on every transition end\n      // instead only on the animation that we care about (primary value bar's transitionend)\n      this._ngZone.runOutsideAngular((() => {\n        this._animationEndSubscription =\n            fromEvent<TransitionEvent>(this._primaryValueBar.nativeElement, 'transitionend')\n            .pipe(filter(((e: TransitionEvent) =>\n              e.target === this._primaryValueBar.nativeElement)))\n            .subscribe(_ => this._ngZone.run(() => this.emitAnimationEnd()));\n      }));\n    }\n  }\n\n  ngOnDestroy() {\n    this._animationEndSubscription.unsubscribe();\n  }\n\n  /** Emit an animationEnd event if in determinate or buffer mode. */\n  private emitAnimationEnd(): void {\n    if (this.mode === 'determinate' || this.mode === 'buffer') {\n      this.animationEnd.next({value: this.value});\n    }\n  }\n}\n\n/** Clamps a value to be between two numbers, by default 0 and 100. */\nfunction clamp(v: number, min = 0, max = 100) {\n  return Math.max(min, Math.min(max, v));\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatProgressBar} from './progress-bar';\n\n\n@NgModule({\n  imports: [CommonModule, MatCommonModule],\n  exports: [MatProgressBar, MatCommonModule],\n  declarations: [MatProgressBar],\n})\nexport class MatProgressBarModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor, FocusOrigin, isFakeMousedownFromScreenReader} from '@angular/cdk/a11y';\nimport {Direction, Directionality} from '@angular/cdk/bidi';\nimport {LEFT_ARROW, RIGHT_ARROW} from '@angular/cdk/keycodes';\nimport {\n  FlexibleConnectedPositionStrategy,\n  HorizontalConnectionPos,\n  Overlay,\n  OverlayConfig,\n  OverlayRef,\n  VerticalConnectionPos,\n  ScrollStrategy,\n} from '@angular/cdk/overlay';\nimport {TemplatePortal} from '@angular/cdk/portal';\nimport {\n  AfterContentInit,\n  Directive,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  InjectionToken,\n  Input,\n  OnDestroy,\n  Optional,\n  Output,\n  Self,\n  ViewContainerRef,\n} from '@angular/core';\nimport {normalizePassiveListenerOptions} from '@angular/cdk/platform';\nimport {asapScheduler, merge, of as observableOf, Subscription} from 'rxjs';\nimport {delay, filter, take, takeUntil} from 'rxjs/operators';\nimport {MatMenu} from './menu-directive';\nimport {throwMatMenuMissingError} from './menu-errors';\nimport {MatMenuItem} from './menu-item';\nimport {MatMenuPanel} from './menu-panel';\nimport {MenuPositionX, MenuPositionY} from './menu-positions';\n\n/** Injection token that determines the scroll handling while the menu is open. */\nexport const MAT_MENU_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mat-menu-scroll-strategy');\n\n/** @docs-private */\nexport function MAT_MENU_SCROLL_STRATEGY_FACTORY(overlay: Overlay): () => ScrollStrategy {\n  return () => overlay.scrollStrategies.reposition();\n}\n\n/** @docs-private */\nexport const MAT_MENU_SCROLL_STRATEGY_FACTORY_PROVIDER = {\n  provide: MAT_MENU_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_MENU_SCROLL_STRATEGY_FACTORY,\n};\n\n/** Default top padding of the menu panel. */\nexport const MENU_PANEL_TOP_PADDING = 8;\n\n/** Options for binding a passive event listener. */\nconst passiveEventListenerOptions = normalizePassiveListenerOptions({passive: true});\n\n// TODO(andrewseguin): Remove the kebab versions in favor of camelCased attribute selectors\n\n/**\n * This directive is intended to be used in conjunction with an mat-menu tag.  It is\n * responsible for toggling the display of the provided menu instance.\n */\n@Directive({\n  selector: `[mat-menu-trigger-for], [matMenuTriggerFor]`,\n  host: {\n    'aria-haspopup': 'true',\n    '[attr.aria-expanded]': 'menuOpen || null',\n    '(mousedown)': '_handleMousedown($event)',\n    '(keydown)': '_handleKeydown($event)',\n    '(click)': '_handleClick($event)',\n  },\n  exportAs: 'matMenuTrigger'\n})\nexport class MatMenuTrigger implements AfterContentInit, OnDestroy {\n  private _portal: TemplatePortal;\n  private _overlayRef: OverlayRef | null = null;\n  private _menuOpen: boolean = false;\n  private _closeSubscription = Subscription.EMPTY;\n  private _hoverSubscription = Subscription.EMPTY;\n  private _menuCloseSubscription = Subscription.EMPTY;\n  private _scrollStrategy: () => ScrollStrategy;\n\n  /**\n   * Handles touch start events on the trigger.\n   * Needs to be an arrow function so we can easily use addEventListener and removeEventListener.\n   */\n  private _handleTouchStart = () => this._openedBy = 'touch';\n\n  // Tracking input type is necessary so it's possible to only auto-focus\n  // the first item of the list when the menu is opened via the keyboard\n  _openedBy: 'mouse' | 'touch' | null = null;\n\n  /**\n   * @deprecated\n   * @breaking-change 8.0.0\n   */\n  @Input('mat-menu-trigger-for')\n  get _deprecatedMatMenuTriggerFor(): MatMenuPanel { return this.menu; }\n  set _deprecatedMatMenuTriggerFor(v: MatMenuPanel) {\n    this.menu = v;\n  }\n\n  /** References the menu instance that the trigger is associated with. */\n  @Input('matMenuTriggerFor')\n  get menu() { return this._menu; }\n  set menu(menu: MatMenuPanel) {\n    if (menu === this._menu) {\n      return;\n    }\n\n    this._menu = menu;\n    this._menuCloseSubscription.unsubscribe();\n\n    if (menu) {\n      this._menuCloseSubscription = menu.close.asObservable().subscribe(reason => {\n        this._destroyMenu();\n\n        // If a click closed the menu, we should close the entire chain of nested menus.\n        if ((reason === 'click' || reason === 'tab') && this._parentMenu) {\n          this._parentMenu.closed.emit(reason);\n        }\n      });\n    }\n  }\n  private _menu: MatMenuPanel;\n\n  /** Data to be passed along to any lazily-rendered content. */\n  @Input('matMenuTriggerData') menuData: any;\n\n  /** Event emitted when the associated menu is opened. */\n  @Output() readonly menuOpened: EventEmitter<void> = new EventEmitter<void>();\n\n  /**\n   * Event emitted when the associated menu is opened.\n   * @deprecated Switch to `menuOpened` instead\n   * @breaking-change 8.0.0\n   */\n  // tslint:disable-next-line:no-output-on-prefix\n  @Output() readonly onMenuOpen: EventEmitter<void> = this.menuOpened;\n\n  /** Event emitted when the associated menu is closed. */\n  @Output() readonly menuClosed: EventEmitter<void> = new EventEmitter<void>();\n\n  /**\n   * Event emitted when the associated menu is closed.\n   * @deprecated Switch to `menuClosed` instead\n   * @breaking-change 8.0.0\n   */\n  // tslint:disable-next-line:no-output-on-prefix\n  @Output() readonly onMenuClose: EventEmitter<void> = this.menuClosed;\n\n  constructor(private _overlay: Overlay,\n              private _element: ElementRef<HTMLElement>,\n              private _viewContainerRef: ViewContainerRef,\n              @Inject(MAT_MENU_SCROLL_STRATEGY) scrollStrategy: any,\n              @Optional() private _parentMenu: MatMenu,\n              @Optional() @Self() private _menuItemInstance: MatMenuItem,\n              @Optional() private _dir: Directionality,\n              // TODO(crisbeto): make the _focusMonitor required when doing breaking changes.\n              // @breaking-change 8.0.0\n              private _focusMonitor?: FocusMonitor) {\n\n    _element.nativeElement.addEventListener('touchstart', this._handleTouchStart,\n        passiveEventListenerOptions);\n\n    if (_menuItemInstance) {\n      _menuItemInstance._triggersSubmenu = this.triggersSubmenu();\n    }\n\n    this._scrollStrategy = scrollStrategy;\n  }\n\n  ngAfterContentInit() {\n    this._checkMenu();\n    this._handleHover();\n  }\n\n  ngOnDestroy() {\n    if (this._overlayRef) {\n      this._overlayRef.dispose();\n      this._overlayRef = null;\n    }\n\n    this._element.nativeElement.removeEventListener('touchstart', this._handleTouchStart,\n        passiveEventListenerOptions);\n\n    this._cleanUpSubscriptions();\n  }\n\n  /** Whether the menu is open. */\n  get menuOpen(): boolean {\n    return this._menuOpen;\n  }\n\n  /** The text direction of the containing app. */\n  get dir(): Direction {\n    return this._dir && this._dir.value === 'rtl' ? 'rtl' : 'ltr';\n  }\n\n  /** Whether the menu triggers a sub-menu or a top-level one. */\n  triggersSubmenu(): boolean {\n    return !!(this._menuItemInstance && this._parentMenu);\n  }\n\n  /** Toggles the menu between the open and closed states. */\n  toggleMenu(): void {\n    return this._menuOpen ? this.closeMenu() : this.openMenu();\n  }\n\n  /** Opens the menu. */\n  openMenu(): void {\n    if (this._menuOpen) {\n      return;\n    }\n\n    this._checkMenu();\n\n    const overlayRef = this._createOverlay();\n    this._setPosition(overlayRef.getConfig().positionStrategy as FlexibleConnectedPositionStrategy);\n    overlayRef.attach(this._getPortal());\n\n    if (this.menu.lazyContent) {\n      this.menu.lazyContent.attach(this.menuData);\n    }\n\n    this._closeSubscription = this._menuClosingActions().subscribe(() => this.closeMenu());\n    this._initMenu();\n\n    if (this.menu instanceof MatMenu) {\n      this.menu._startAnimation();\n    }\n  }\n\n  /** Closes the menu. */\n  closeMenu(): void {\n    this.menu.close.emit();\n  }\n\n  /**\n   * Focuses the menu trigger.\n   * @param origin Source of the menu trigger's focus.\n   */\n  focus(origin: FocusOrigin = 'program') {\n    if (this._focusMonitor) {\n      this._focusMonitor.focusVia(this._element, origin);\n    } else {\n      this._element.nativeElement.focus();\n    }\n  }\n\n  /** Closes the menu and does the necessary cleanup. */\n  private _destroyMenu() {\n    if (!this._overlayRef || !this.menuOpen) {\n      return;\n    }\n\n    const menu = this.menu;\n\n    this._closeSubscription.unsubscribe();\n    this._overlayRef.detach();\n\n    if (menu instanceof MatMenu) {\n      menu._resetAnimation();\n\n      if (menu.lazyContent) {\n        // Wait for the exit animation to finish before detaching the content.\n        menu._animationDone\n          .pipe(\n            filter(event => event.toState === 'void'),\n            take(1),\n            // Interrupt if the content got re-attached.\n            takeUntil(menu.lazyContent._attached)\n          )\n          .subscribe(() => menu.lazyContent!.detach(), undefined, () => {\n            // No matter whether the content got re-attached, reset the menu.\n            this._resetMenu();\n          });\n      } else {\n        this._resetMenu();\n      }\n    } else {\n      this._resetMenu();\n\n      if (menu.lazyContent) {\n        menu.lazyContent.detach();\n      }\n    }\n  }\n\n  /**\n   * This method sets the menu state to open and focuses the first item if\n   * the menu was opened via the keyboard.\n   */\n  private _initMenu(): void {\n    this.menu.parentMenu = this.triggersSubmenu() ? this._parentMenu : undefined;\n    this.menu.direction = this.dir;\n    this._setMenuElevation();\n    this._setIsMenuOpen(true);\n    this.menu.focusFirstItem(this._openedBy || 'program');\n  }\n\n  /** Updates the menu elevation based on the amount of parent menus that it has. */\n  private _setMenuElevation(): void {\n    if (this.menu.setElevation) {\n      let depth = 0;\n      let parentMenu = this.menu.parentMenu;\n\n      while (parentMenu) {\n        depth++;\n        parentMenu = parentMenu.parentMenu;\n      }\n\n      this.menu.setElevation(depth);\n    }\n  }\n\n  /**\n   * This method resets the menu when it's closed, most importantly restoring\n   * focus to the menu trigger if the menu was opened via the keyboard.\n   */\n  private _resetMenu(): void {\n    this._setIsMenuOpen(false);\n\n    // We should reset focus if the user is navigating using a keyboard or\n    // if we have a top-level trigger which might cause focus to be lost\n    // when clicking on the backdrop.\n    if (!this._openedBy) {\n      // Note that the focus style will show up both for `program` and\n      // `keyboard` so we don't have to specify which one it is.\n      this.focus();\n    } else if (!this.triggersSubmenu()) {\n      this.focus(this._openedBy);\n    }\n\n    this._openedBy = null;\n  }\n\n  // set state rather than toggle to support triggers sharing a menu\n  private _setIsMenuOpen(isOpen: boolean): void {\n    this._menuOpen = isOpen;\n    this._menuOpen ? this.menuOpened.emit() : this.menuClosed.emit();\n\n    if (this.triggersSubmenu()) {\n      this._menuItemInstance._highlighted = isOpen;\n    }\n  }\n\n  /**\n   * This method checks that a valid instance of MatMenu has been passed into\n   * matMenuTriggerFor. If not, an exception is thrown.\n   */\n  private _checkMenu() {\n    if (!this.menu) {\n      throwMatMenuMissingError();\n    }\n  }\n\n  /**\n   * This method creates the overlay from the provided menu's template and saves its\n   * OverlayRef so that it can be attached to the DOM when openMenu is called.\n   */\n  private _createOverlay(): OverlayRef {\n    if (!this._overlayRef) {\n      const config = this._getOverlayConfig();\n      this._subscribeToPositions(config.positionStrategy as FlexibleConnectedPositionStrategy);\n      this._overlayRef = this._overlay.create(config);\n\n      // Consume the `keydownEvents` in order to prevent them from going to another overlay.\n      // Ideally we'd also have our keyboard event logic in here, however doing so will\n      // break anybody that may have implemented the `MatMenuPanel` themselves.\n      this._overlayRef.keydownEvents().subscribe();\n    }\n\n    return this._overlayRef;\n  }\n\n  /**\n   * This method builds the configuration object needed to create the overlay, the OverlayState.\n   * @returns OverlayConfig\n   */\n  private _getOverlayConfig(): OverlayConfig {\n    return new OverlayConfig({\n      positionStrategy: this._overlay.position()\n          .flexibleConnectedTo(this._element)\n          .withLockedPosition()\n          .withTransformOriginOn('.mat-menu-panel'),\n      hasBackdrop: this.menu.hasBackdrop == null ? !this.triggersSubmenu() : this.menu.hasBackdrop,\n      backdropClass: this.menu.backdropClass || 'cdk-overlay-transparent-backdrop',\n      scrollStrategy: this._scrollStrategy(),\n      direction: this._dir\n    });\n  }\n\n  /**\n   * Listens to changes in the position of the overlay and sets the correct classes\n   * on the menu based on the new position. This ensures the animation origin is always\n   * correct, even if a fallback position is used for the overlay.\n   */\n  private _subscribeToPositions(position: FlexibleConnectedPositionStrategy): void {\n    if (this.menu.setPositionClasses) {\n      position.positionChanges.subscribe(change => {\n        const posX: MenuPositionX = change.connectionPair.overlayX === 'start' ? 'after' : 'before';\n        const posY: MenuPositionY = change.connectionPair.overlayY === 'top' ? 'below' : 'above';\n\n        this.menu.setPositionClasses!(posX, posY);\n      });\n    }\n  }\n\n  /**\n   * Sets the appropriate positions on a position strategy\n   * so the overlay connects with the trigger correctly.\n   * @param positionStrategy Strategy whose position to update.\n   */\n  private _setPosition(positionStrategy: FlexibleConnectedPositionStrategy) {\n    let [originX, originFallbackX]: HorizontalConnectionPos[] =\n        this.menu.xPosition === 'before' ? ['end', 'start'] : ['start', 'end'];\n\n    let [overlayY, overlayFallbackY]: VerticalConnectionPos[] =\n        this.menu.yPosition === 'above' ? ['bottom', 'top'] : ['top', 'bottom'];\n\n    let [originY, originFallbackY] = [overlayY, overlayFallbackY];\n    let [overlayX, overlayFallbackX] = [originX, originFallbackX];\n    let offsetY = 0;\n\n    if (this.triggersSubmenu()) {\n      // When the menu is a sub-menu, it should always align itself\n      // to the edges of the trigger, instead of overlapping it.\n      overlayFallbackX = originX = this.menu.xPosition === 'before' ? 'start' : 'end';\n      originFallbackX = overlayX = originX === 'end' ? 'start' : 'end';\n      offsetY = overlayY === 'bottom' ? MENU_PANEL_TOP_PADDING : -MENU_PANEL_TOP_PADDING;\n    } else if (!this.menu.overlapTrigger) {\n      originY = overlayY === 'top' ? 'bottom' : 'top';\n      originFallbackY = overlayFallbackY === 'top' ? 'bottom' : 'top';\n    }\n\n    positionStrategy.withPositions([\n      {originX, originY, overlayX, overlayY, offsetY},\n      {originX: originFallbackX, originY, overlayX: overlayFallbackX, overlayY, offsetY},\n      {\n        originX,\n        originY: originFallbackY,\n        overlayX,\n        overlayY: overlayFallbackY,\n        offsetY: -offsetY\n      },\n      {\n        originX: originFallbackX,\n        originY: originFallbackY,\n        overlayX: overlayFallbackX,\n        overlayY: overlayFallbackY,\n        offsetY: -offsetY\n      }\n    ]);\n  }\n\n  /** Cleans up the active subscriptions. */\n  private _cleanUpSubscriptions(): void {\n    this._closeSubscription.unsubscribe();\n    this._hoverSubscription.unsubscribe();\n  }\n\n  /** Returns a stream that emits whenever an action that should close the menu occurs. */\n  private _menuClosingActions() {\n    const backdrop = this._overlayRef!.backdropClick();\n    const detachments = this._overlayRef!.detachments();\n    const parentClose = this._parentMenu ? this._parentMenu.closed : observableOf();\n    const hover = this._parentMenu ? this._parentMenu._hovered().pipe(\n      filter(active => active !== this._menuItemInstance),\n      filter(() => this._menuOpen)\n    ) : observableOf();\n\n    return merge(backdrop, parentClose, hover, detachments);\n  }\n\n  /** Handles mouse presses on the trigger. */\n  _handleMousedown(event: MouseEvent): void {\n    if (!isFakeMousedownFromScreenReader(event)) {\n      // Since right or middle button clicks won't trigger the `click` event,\n      // we shouldn't consider the menu as opened by mouse in those cases.\n      this._openedBy = event.button === 0 ? 'mouse' : null;\n\n      // Since clicking on the trigger won't close the menu if it opens a sub-menu,\n      // we should prevent focus from moving onto it via click to avoid the\n      // highlight from lingering on the menu item.\n      if (this.triggersSubmenu()) {\n        event.preventDefault();\n      }\n    }\n  }\n\n  /** Handles key presses on the trigger. */\n  _handleKeydown(event: KeyboardEvent): void {\n    const keyCode = event.keyCode;\n\n    if (this.triggersSubmenu() && (\n            (keyCode === RIGHT_ARROW && this.dir === 'ltr') ||\n            (keyCode === LEFT_ARROW && this.dir === 'rtl'))) {\n      this.openMenu();\n    }\n  }\n\n  /** Handles click events on the trigger. */\n  _handleClick(event: MouseEvent): void {\n    if (this.triggersSubmenu()) {\n      // Stop event propagation to avoid closing the parent menu.\n      event.stopPropagation();\n      this.openMenu();\n    } else {\n      this.toggleMenu();\n    }\n  }\n\n  /** Handles the cases where the user hovers over the trigger. */\n  private _handleHover() {\n    // Subscribe to changes in the hovered item in order to toggle the panel.\n    if (!this.triggersSubmenu()) {\n      return;\n    }\n\n    this._hoverSubscription = this._parentMenu._hovered()\n      // Since we might have multiple competing triggers for the same menu (e.g. a sub-menu\n      // with different data and triggers), we have to delay it by a tick to ensure that\n      // it won't be closed immediately after it is opened.\n      .pipe(\n        filter(active => active === this._menuItemInstance && !active.disabled),\n        delay(0, asapScheduler)\n      )\n      .subscribe(() => {\n        this._openedBy = 'mouse';\n\n        // If the same menu is used between multiple triggers, it might still be animating\n        // while the new trigger tries to re-open it. Wait for the animation to finish\n        // before doing so. Also interrupt if the user moves to another item.\n        if (this.menu instanceof MatMenu && this.menu._isAnimating) {\n          // We need the `delay(0)` here in order to avoid\n          // 'changed after checked' errors in some cases. See #12194.\n          this.menu._animationDone\n            .pipe(take(1), delay(0, asapScheduler), takeUntil(this._parentMenu._hovered()))\n            .subscribe(() => this.openMenu());\n        } else {\n          this.openMenu();\n        }\n      });\n  }\n\n  /** Gets the portal that should be attached to the overlay. */\n  private _getPortal(): TemplatePortal {\n    // Note that we can avoid this check by keeping the portal on the menu panel.\n    // While it would be cleaner, we'd have to introduce another required method on\n    // `MatMenuPanel`, making it harder to consume.\n    if (!this._portal || this._portal.templateRef !== this.menu.templateRef) {\n      this._portal = new TemplatePortal(this.menu.templateRef, this._viewContainerRef);\n    }\n\n    return this._portal;\n  }\n\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {MatMenuContent} from './menu-content';\nimport {MatMenu} from './menu-directive';\nimport {MatMenuItem} from './menu-item';\nimport {\n  MatMenuTrigger,\n  MAT_MENU_SCROLL_STRATEGY_FACTORY_PROVIDER,\n} from './menu-trigger';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatCommonModule,\n    MatRippleModule,\n    OverlayModule,\n  ],\n  exports: [MatMenu, MatMenuItem, MatMenuTrigger, MatMenuContent, MatCommonModule],\n  declarations: [MatMenu, MatMenuItem, MatMenuTrigger, MatMenuContent],\n  providers: [MAT_MENU_SCROLL_STRATEGY_FACTORY_PROVIDER]\n})\nexport class MatMenuModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  animate,\n  AnimationTriggerMetadata,\n  state,\n  style,\n  transition,\n  trigger,\n} from '@angular/animations';\n\n/**\n * The following are all the animations for the mat-select component, with each\n * const containing the metadata for one animation.\n *\n * The values below match the implementation of the AngularJS Material mat-select animation.\n * @docs-private\n */\nexport const matSelectAnimations: {\n  readonly transformPanel: AnimationTriggerMetadata;\n  readonly fadeInContent: AnimationTriggerMetadata;\n} = {\n  /**\n   * This animation transforms the select's overlay panel on and off the page.\n   *\n   * When the panel is attached to the DOM, it expands its width by the amount of padding, scales it\n   * up to 100% on the Y axis, fades in its border, and translates slightly up and to the\n   * side to ensure the option text correctly overlaps the trigger text.\n   *\n   * When the panel is removed from the DOM, it simply fades out linearly.\n   */\n  transformPanel: trigger('transformPanel', [\n    state('void', style({\n      transform: 'scaleY(0.8)',\n      minWidth: '100%',\n      opacity: 0\n    })),\n    state('showing', style({\n      opacity: 1,\n      minWidth: 'calc(100% + 32px)', // 32px = 2 * 16px padding\n      transform: 'scaleY(1)'\n    })),\n    state('showing-multiple', style({\n      opacity: 1,\n      minWidth: 'calc(100% + 64px)', // 64px = 48px padding on the left + 16px padding on the right\n      transform: 'scaleY(1)'\n    })),\n    transition('void => *', animate('120ms cubic-bezier(0, 0, 0.2, 1)')),\n    transition('* => void', animate('100ms 25ms linear', style({opacity: 0})))\n  ]),\n\n  /**\n   * This animation fades in the background color and text content of the\n   * select's options. It is time delayed to occur 100ms after the overlay\n   * panel has transformed in.\n   * @deprecated Not used anymore. To be removed.\n   * @breaking-change 8.0.0\n   */\n  fadeInContent: trigger('fadeInContent', [\n    state('showing', style({opacity: 1})),\n    transition('void => showing', [\n      style({opacity: 0}),\n      animate('150ms 100ms cubic-bezier(0.55, 0, 0.55, 0.2)')\n    ])\n  ])\n};\n\n\n/**\n * @deprecated\n * @breaking-change 8.0.0\n * @docs-private\n */\nexport const transformPanel = matSelectAnimations.transformPanel;\n\n/**\n * @deprecated\n * @breaking-change 8.0.0\n * @docs-private\n */\nexport const fadeInContent = matSelectAnimations.fadeInContent;\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatOptionModule} from '@angular/material/core';\nimport {MatFormFieldModule} from '@angular/material/form-field';\nimport {MAT_SELECT_SCROLL_STRATEGY_PROVIDER, MatSelect, MatSelectTrigger} from './select';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    OverlayModule,\n    MatOptionModule,\n    MatCommonModule,\n  ],\n  exports: [MatFormFieldModule, MatSelect, MatSelectTrigger, MatOptionModule, MatCommonModule],\n  declarations: [MatSelect, MatSelectTrigger],\n  providers: [MAT_SELECT_SCROLL_STRATEGY_PROVIDER]\n})\nexport class MatSelectModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  AnimationTriggerMetadata,\n  keyframes,\n  state,\n  style,\n  transition,\n  trigger,\n} from '@angular/animations';\n\n/**\n * Animations used by MatTooltip.\n * @docs-private\n */\nexport const matTooltipAnimations: {\n  readonly tooltipState: AnimationTriggerMetadata;\n} = {\n  /** Animation that transitions a tooltip in and out. */\n  tooltipState: trigger('state', [\n    state('initial, void, hidden', style({opacity: 0, transform: 'scale(0)'})),\n    state('visible', style({transform: 'scale(1)'})),\n    transition('* => visible', animate('200ms cubic-bezier(0, 0, 0.2, 1)', keyframes([\n      style({opacity: 0, transform: 'scale(0)', offset: 0}),\n      style({opacity: 0.5, transform: 'scale(0.99)', offset: 0.5}),\n      style({opacity: 1, transform: 'scale(1)', offset: 1})\n    ]))),\n    transition('* => hidden', animate('100ms cubic-bezier(0, 0, 0.2, 1)', style({opacity: 0}))),\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusableOption, FocusKeyManager} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {SelectionModel} from '@angular/cdk/collections';\nimport {SPACE, ENTER, HOME, END, UP_ARROW, DOWN_ARROW, A} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  ContentChildren,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  OnDestroy,\n  OnInit,\n  Output,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {\n  CanDisableRipple, CanDisableRippleCtor,\n  MatLine,\n  setLines,\n  mixinDisableRipple,\n} from '@angular/material/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {Subscription} from 'rxjs';\nimport {MatListAvatarCssMatStyler, MatListIconCssMatStyler} from './list';\n\n\n/** @docs-private */\nexport class MatSelectionListBase {}\nexport const _MatSelectionListMixinBase: CanDisableRippleCtor & typeof MatSelectionListBase =\n    mixinDisableRipple(MatSelectionListBase);\n\n/** @docs-private */\nexport class MatListOptionBase {}\nexport const _MatListOptionMixinBase: CanDisableRippleCtor & typeof MatListOptionBase =\n    mixinDisableRipple(MatListOptionBase);\n\n/** @docs-private */\nexport const MAT_SELECTION_LIST_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatSelectionList),\n  multi: true\n};\n\n/** Change event that is being fired whenever the selected state of an option changes. */\nexport class MatSelectionListChange {\n  constructor(\n    /** Reference to the selection list that emitted the event. */\n    public source: MatSelectionList,\n    /** Reference to the option that has been changed. */\n    public option: MatListOption) {}\n}\n\n/**\n * Component for list-options of selection-list. Each list-option can automatically\n * generate a checkbox and can put current item into the selectionModel of selection-list\n * if the current item is selected.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-list-option',\n  exportAs: 'matListOption',\n  inputs: ['disableRipple'],\n  host: {\n    'role': 'option',\n    'class': 'mat-list-item mat-list-option',\n    '(focus)': '_handleFocus()',\n    '(blur)': '_handleBlur()',\n    '(click)': '_handleClick()',\n    'tabindex': '-1',\n    '[class.mat-list-item-disabled]': 'disabled',\n    '[class.mat-list-item-with-avatar]': '_avatar || _icon',\n    '[attr.aria-selected]': 'selected.toString()',\n    '[attr.aria-disabled]': 'disabled.toString()',\n  },\n  templateUrl: 'list-option.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatListOption extends _MatListOptionMixinBase\n    implements AfterContentInit, OnDestroy, OnInit, FocusableOption, CanDisableRipple {\n\n  private _selected = false;\n  private _disabled = false;\n  private _hasFocus = false;\n\n  @ContentChild(MatListAvatarCssMatStyler) _avatar: MatListAvatarCssMatStyler;\n  @ContentChild(MatListIconCssMatStyler) _icon: MatListIconCssMatStyler;\n  @ContentChildren(MatLine) _lines: QueryList<MatLine>;\n\n  /** DOM element containing the item's text. */\n  @ViewChild('text') _text: ElementRef;\n\n  /** Whether the label should appear before or after the checkbox. Defaults to 'after' */\n  @Input() checkboxPosition: 'before' | 'after' = 'after';\n\n  /** Value of the option */\n  @Input() value: any;\n\n  /** Whether the option is disabled. */\n  @Input()\n  get disabled() { return this._disabled || (this.selectionList && this.selectionList.disabled); }\n  set disabled(value: any) {\n    const newValue = coerceBooleanProperty(value);\n\n    if (newValue !== this._disabled) {\n      this._disabled = newValue;\n      this._changeDetector.markForCheck();\n    }\n  }\n\n  /** Whether the option is selected. */\n  @Input()\n  get selected(): boolean { return this.selectionList.selectedOptions.isSelected(this); }\n  set selected(value: boolean) {\n    const isSelected = coerceBooleanProperty(value);\n\n    if (isSelected !== this._selected) {\n      this._setSelected(isSelected);\n      this.selectionList._reportValueChange();\n    }\n  }\n\n  constructor(private _element: ElementRef<HTMLElement>,\n              private _changeDetector: ChangeDetectorRef,\n              /** @docs-private */\n              @Inject(forwardRef(() => MatSelectionList)) public selectionList: MatSelectionList) {\n    super();\n  }\n\n  ngOnInit() {\n    // List options that are selected at initialization can't be reported properly to the form\n    // control. This is because it takes some time until the selection-list knows about all\n    // available options. Also it can happen that the ControlValueAccessor has an initial value\n    // that should be used instead. Deferring the value change report to the next tick ensures\n    // that the form control value is not being overwritten.\n    const wasSelected = this._selected;\n\n    Promise.resolve().then(() => {\n      if (this._selected || wasSelected) {\n        this.selected = true;\n        this._changeDetector.markForCheck();\n      }\n    });\n  }\n\n  ngAfterContentInit() {\n    setLines(this._lines, this._element);\n  }\n\n  ngOnDestroy(): void {\n    if (this.selected) {\n      // We have to delay this until the next tick in order\n      // to avoid changed after checked errors.\n      Promise.resolve().then(() => this.selected = false);\n    }\n\n    const hadFocus = this._hasFocus;\n    const newActiveItem = this.selectionList._removeOptionFromList(this);\n\n    // Only move focus if this option was focused at the time it was destroyed.\n    if (hadFocus && newActiveItem) {\n      newActiveItem.focus();\n    }\n  }\n\n  /** Toggles the selection state of the option. */\n  toggle(): void {\n    this.selected = !this.selected;\n  }\n\n  /** Allows for programmatic focusing of the option. */\n  focus(): void {\n    this._element.nativeElement.focus();\n  }\n\n  /**\n   * Returns the list item's text label. Implemented as a part of the FocusKeyManager.\n   * @docs-private\n   */\n  getLabel() {\n    return this._text ? (this._text.nativeElement.textContent || '') : '';\n  }\n\n  /** Whether this list item should show a ripple effect when clicked. */\n  _isRippleDisabled() {\n    return this.disabled || this.disableRipple || this.selectionList.disableRipple;\n  }\n\n  _handleClick() {\n    if (!this.disabled) {\n      this.toggle();\n\n      // Emit a change event if the selected state of the option changed through user interaction.\n      this.selectionList._emitChangeEvent(this);\n    }\n  }\n\n  _handleFocus() {\n    this.selectionList._setFocusedOption(this);\n    this._hasFocus = true;\n  }\n\n  _handleBlur() {\n    this.selectionList._onTouched();\n    this._hasFocus = false;\n  }\n\n  /** Retrieves the DOM element of the component host. */\n  _getHostElement(): HTMLElement {\n    return this._element.nativeElement;\n  }\n\n  /** Sets the selected state of the option. Returns whether the value has changed. */\n  _setSelected(selected: boolean): boolean {\n    if (selected === this._selected) {\n      return false;\n    }\n\n    this._selected = selected;\n\n    if (selected) {\n      this.selectionList.selectedOptions.select(this);\n    } else {\n      this.selectionList.selectedOptions.deselect(this);\n    }\n\n    this._changeDetector.markForCheck();\n    return true;\n  }\n\n  /**\n   * Notifies Angular that the option needs to be checked in the next change detection run. Mainly\n   * used to trigger an update of the list option if the disabled state of the selection list\n   * changed.\n   */\n  _markForCheck() {\n    this._changeDetector.markForCheck();\n  }\n}\n\n\n/**\n * Material Design list component where each item is a selectable option. Behaves as a listbox.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-selection-list',\n  exportAs: 'matSelectionList',\n  inputs: ['disabled', 'disableRipple', 'tabIndex'],\n  host: {\n    'role': 'listbox',\n    '[tabIndex]': 'tabIndex',\n    'class': 'mat-selection-list mat-list-base',\n    '(focus)': 'focus()',\n    '(blur)': '_onTouched()',\n    '(keydown)': '_keydown($event)',\n    'aria-multiselectable': 'true',\n    '[attr.aria-disabled]': 'disabled.toString()',\n  },\n  template: '<ng-content></ng-content>',\n  styleUrls: ['list.css'],\n  encapsulation: ViewEncapsulation.None,\n  providers: [MAT_SELECTION_LIST_VALUE_ACCESSOR],\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class MatSelectionList extends _MatSelectionListMixinBase implements FocusableOption,\n    CanDisableRipple, AfterContentInit, ControlValueAccessor, OnDestroy {\n\n  /** The FocusKeyManager which handles focus. */\n  _keyManager: FocusKeyManager<MatListOption>;\n\n  /** The option components contained within this selection-list. */\n  @ContentChildren(MatListOption) options: QueryList<MatListOption>;\n\n  /** Emits a change event whenever the selected state of an option changes. */\n  @Output() readonly selectionChange: EventEmitter<MatSelectionListChange> =\n      new EventEmitter<MatSelectionListChange>();\n\n  /** Tabindex of the selection list. */\n  @Input() tabIndex: number = 0;\n\n  /**\n   * Function used for comparing an option against the selected value when determining which\n   * options should appear as selected. The first argument is the value of an options. The second\n   * one is a value from the selected value. A boolean must be returned.\n   */\n  @Input() compareWith: (o1: any, o2: any) => boolean;\n\n  /** Whether the selection list is disabled. */\n  @Input()\n  get disabled(): boolean { return this._disabled; }\n  set disabled(value: boolean) {\n    this._disabled = coerceBooleanProperty(value);\n\n    // The `MatSelectionList` and `MatListOption` are using the `OnPush` change detection\n    // strategy. Therefore the options will not check for any changes if the `MatSelectionList`\n    // changed its state. Since we know that a change to `disabled` property of the list affects\n    // the state of the options, we manually mark each option for check.\n    if (this.options) {\n      this.options.forEach(option => option._markForCheck());\n    }\n  }\n  private _disabled: boolean = false;\n\n  /** The currently selected options. */\n  selectedOptions: SelectionModel<MatListOption> = new SelectionModel<MatListOption>(true);\n\n  /** View to model callback that should be called whenever the selected options change. */\n  private _onChange: (value: any) => void = (_: any) => {};\n\n  /** Used for storing the values that were assigned before the options were initialized. */\n  private _tempValues: string[]|null;\n\n  /** Subscription to sync value changes in the SelectionModel back to the SelectionList. */\n  private _modelChanges = Subscription.EMPTY;\n\n  /** View to model callback that should be called if the list or its options lost focus. */\n  _onTouched: () => void = () => {};\n\n  constructor(private _element: ElementRef<HTMLElement>, @Attribute('tabindex') tabIndex: string) {\n    super();\n    this.tabIndex = parseInt(tabIndex) || 0;\n  }\n\n  ngAfterContentInit(): void {\n    this._keyManager = new FocusKeyManager<MatListOption>(this.options)\n      .withWrap()\n      .withTypeAhead()\n      // Allow disabled items to be focusable. For accessibility reasons, there must be a way for\n      // screenreader users, that allows reading the different options of the list.\n      .skipPredicate(() => false)\n      .withAllowedModifierKeys(['shiftKey']);\n\n    if (this._tempValues) {\n      this._setOptionsFromValues(this._tempValues);\n      this._tempValues = null;\n    }\n\n    // Sync external changes to the model back to the options.\n    this._modelChanges = this.selectedOptions.onChange.subscribe(event => {\n      if (event.added) {\n        for (let item of event.added) {\n          item.selected = true;\n        }\n      }\n\n      if (event.removed) {\n        for (let item of event.removed) {\n          item.selected = false;\n        }\n      }\n    });\n  }\n\n  ngOnDestroy() {\n    this._modelChanges.unsubscribe();\n  }\n\n  /** Focuses the last active list option. */\n  focus() {\n    this._element.nativeElement.focus();\n  }\n\n  /** Selects all of the options. */\n  selectAll() {\n    this._setAllOptionsSelected(true);\n  }\n\n  /** Deselects all of the options. */\n  deselectAll() {\n    this._setAllOptionsSelected(false);\n  }\n\n  /** Sets the focused option of the selection-list. */\n  _setFocusedOption(option: MatListOption) {\n    this._keyManager.updateActiveItemIndex(this._getOptionIndex(option));\n  }\n\n  /**\n   * Removes an option from the selection list and updates the active item.\n   * @returns Currently-active item.\n   */\n  _removeOptionFromList(option: MatListOption): MatListOption | null {\n    const optionIndex = this._getOptionIndex(option);\n\n    if (optionIndex > -1 && this._keyManager.activeItemIndex === optionIndex) {\n      // Check whether the option is the last item\n      if (optionIndex > 0) {\n        this._keyManager.updateActiveItemIndex(optionIndex - 1);\n      } else if (optionIndex === 0 && this.options.length > 1) {\n        this._keyManager.updateActiveItemIndex(Math.min(optionIndex + 1, this.options.length - 1));\n      }\n    }\n\n    return this._keyManager.activeItem;\n  }\n\n  /** Passes relevant key presses to our key manager. */\n  _keydown(event: KeyboardEvent) {\n    const keyCode = event.keyCode;\n    const manager = this._keyManager;\n    const previousFocusIndex = manager.activeItemIndex;\n\n    switch (keyCode) {\n      case SPACE:\n      case ENTER:\n        this._toggleFocusedOption();\n        // Always prevent space from scrolling the page since the list has focus\n        event.preventDefault();\n        break;\n      case HOME:\n      case END:\n        keyCode === HOME ? manager.setFirstItemActive() : manager.setLastItemActive();\n        event.preventDefault();\n        break;\n      case A:\n        if (event.ctrlKey) {\n          this.options.find(option => !option.selected) ? this.selectAll() : this.deselectAll();\n          event.preventDefault();\n        }\n        break;\n      default:\n        manager.onKeydown(event);\n    }\n\n    if ((keyCode === UP_ARROW || keyCode === DOWN_ARROW) && event.shiftKey &&\n        manager.activeItemIndex !== previousFocusIndex) {\n      this._toggleFocusedOption();\n    }\n  }\n\n  /** Reports a value change to the ControlValueAccessor */\n  _reportValueChange() {\n    if (this.options) {\n      this._onChange(this._getSelectedOptionValues());\n    }\n  }\n\n  /** Emits a change event if the selected state of an option changed. */\n  _emitChangeEvent(option: MatListOption) {\n    this.selectionChange.emit(new MatSelectionListChange(this, option));\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  writeValue(values: string[]): void {\n    if (this.options) {\n      this._setOptionsFromValues(values || []);\n    } else {\n      this._tempValues = values;\n    }\n  }\n\n  /** Implemented as a part of ControlValueAccessor. */\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  registerOnChange(fn: (value: any) => void): void {\n    this._onChange = fn;\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  registerOnTouched(fn: () => void): void {\n    this._onTouched = fn;\n  }\n\n  /** Sets the selected options based on the specified values. */\n  private _setOptionsFromValues(values: string[]) {\n    this.options.forEach(option => option._setSelected(false));\n\n    values.forEach(value => {\n      const correspondingOption = this.options.find(option => {\n        // Skip options that are already in the model. This allows us to handle cases\n        // where the same primitive value is selected multiple times.\n        if (option.selected) {\n          return false;\n        }\n\n        return this.compareWith ? this.compareWith(option.value, value) : option.value === value;\n      });\n\n      if (correspondingOption) {\n        correspondingOption._setSelected(true);\n      }\n    });\n  }\n\n  /** Returns the values of the selected options. */\n  private _getSelectedOptionValues(): string[] {\n    return this.options.filter(option => option.selected).map(option => option.value);\n  }\n\n  /** Toggles the state of the currently focused option if enabled. */\n  private _toggleFocusedOption(): void {\n    let focusedIndex = this._keyManager.activeItemIndex;\n\n    if (focusedIndex != null && this._isValidIndex(focusedIndex)) {\n      let focusedOption: MatListOption = this.options.toArray()[focusedIndex];\n\n      if (focusedOption && !focusedOption.disabled) {\n        focusedOption.toggle();\n\n        // Emit a change event because the focused option changed its state through user\n        // interaction.\n        this._emitChangeEvent(focusedOption);\n      }\n    }\n  }\n\n  /**\n   * Sets the selected state on all of the options\n   * and emits an event if anything changed.\n   */\n  private _setAllOptionsSelected(isSelected: boolean) {\n    // Keep track of whether anything changed, because we only want to\n    // emit the changed event when something actually changed.\n    let hasChanged = false;\n\n    this.options.forEach(option => {\n      if (option._setSelected(isSelected)) {\n        hasChanged = true;\n      }\n    });\n\n    if (hasChanged) {\n      this._reportValueChange();\n    }\n  }\n\n  /**\n   * Utility to ensure all indexes are valid.\n   * @param index The index to be checked.\n   * @returns True if the index is valid for our list of options.\n   */\n  private _isValidIndex(index: number): boolean {\n    return index >= 0 && index < this.options.length;\n  }\n\n  /** Returns the index of the specified list option. */\n  private _getOptionIndex(option: MatListOption): number {\n    return this.options.toArray().indexOf(option);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {\n  MatCommonModule,\n  MatLineModule,\n  MatPseudoCheckboxModule,\n  MatRippleModule,\n} from '@angular/material/core';\nimport {\n  MatList,\n  MatNavList,\n  MatListAvatarCssMatStyler,\n  MatListIconCssMatStyler,\n  MatListItem,\n  MatListSubheaderCssMatStyler,\n} from './list';\nimport {MatListOption, MatSelectionList} from './selection-list';\nimport {MatDividerModule} from '@angular/material/divider';\n\n\n@NgModule({\n  imports: [MatLineModule, MatRippleModule, MatCommonModule, MatPseudoCheckboxModule, CommonModule],\n  exports: [\n    MatList,\n    MatNavList,\n    MatListItem,\n    MatListAvatarCssMatStyler,\n    MatLineModule,\n    MatCommonModule,\n    MatListIconCssMatStyler,\n    MatListSubheaderCssMatStyler,\n    MatPseudoCheckboxModule,\n    MatSelectionList,\n    MatListOption,\n    MatDividerModule\n  ],\n  declarations: [\n    MatList,\n    MatNavList,\n    MatListItem,\n    MatListAvatarCssMatStyler,\n    MatListIconCssMatStyler,\n    MatListSubheaderCssMatStyler,\n    MatSelectionList,\n    MatListOption\n  ],\n})\nexport class MatListModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Directive,\n  TemplateRef,\n  ComponentFactoryResolver,\n  ApplicationRef,\n  Injector,\n  ViewContainerRef,\n  Inject,\n  OnDestroy,\n} from '@angular/core';\nimport {TemplatePortal, DomPortalOutlet} from '@angular/cdk/portal';\nimport {DOCUMENT} from '@angular/common';\nimport {Subject} from 'rxjs';\n\n/**\n * Menu content that will be rendered lazily once the menu is opened.\n */\n@Directive({\n  selector: 'ng-template[matMenuContent]'\n})\nexport class MatMenuContent implements OnDestroy {\n  private _portal: TemplatePortal<any>;\n  private _outlet: DomPortalOutlet;\n\n  /** Emits when the menu content has been attached. */\n  _attached = new Subject<void>();\n\n  constructor(\n    private _template: TemplateRef<any>,\n    private _componentFactoryResolver: ComponentFactoryResolver,\n    private _appRef: ApplicationRef,\n    private _injector: Injector,\n    private _viewContainerRef: ViewContainerRef,\n    @Inject(DOCUMENT) private _document: any) {}\n\n  /**\n   * Attaches the content with a particular context.\n   * @docs-private\n   */\n  attach(context: any = {}) {\n    if (!this._portal) {\n      this._portal = new TemplatePortal(this._template, this._viewContainerRef);\n    }\n\n    this.detach();\n\n    if (!this._outlet) {\n      this._outlet = new DomPortalOutlet(this._document.createElement('div'),\n          this._componentFactoryResolver, this._appRef, this._injector);\n    }\n\n    const element: HTMLElement = this._template.elementRef.nativeElement;\n\n    // Because we support opening the same menu from different triggers (which in turn have their\n    // own `OverlayRef` panel), we have to re-insert the host element every time, otherwise we\n    // risk it staying attached to a pane that's no longer in the DOM.\n    element.parentNode!.insertBefore(this._outlet.outletElement, element);\n    this._portal.attach(this._outlet, context);\n    this._attached.next();\n  }\n\n  /**\n   * Detaches the content.\n   * @docs-private\n   */\n  detach() {\n    if (this._portal.isAttached) {\n      this._portal.detach();\n    }\n  }\n\n  ngOnDestroy() {\n    if (this._outlet) {\n      this._outlet.dispose();\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport{\n  trigger,\n  state,\n  style,\n  animate,\n  transition,\n  query,\n  group,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/**\n * Animations used by the mat-menu component.\n * Animation duration and timing values are based on:\n * https://material.io/guidelines/components/menus.html#menus-usage\n * @docs-private\n */\nexport const matMenuAnimations: {\n  readonly transformMenu: AnimationTriggerMetadata;\n  readonly fadeInItems: AnimationTriggerMetadata;\n} = {\n  /**\n   * This animation controls the menu panel's entry and exit from the page.\n   *\n   * When the menu panel is added to the DOM, it scales in and fades in its border.\n   *\n   * When the menu panel is removed from the DOM, it simply fades out after a brief\n   * delay to display the ripple.\n   */\n  transformMenu: trigger('transformMenu', [\n    state('void', style({\n      opacity: 0,\n      transform: 'scale(0.8)'\n    })),\n    transition('void => enter', group([\n      query('.mat-menu-content', animate('100ms linear', style({opacity: 1}))),\n      animate('120ms cubic-bezier(0, 0, 0.2, 1)', style({transform: 'scale(1)'})),\n    ])),\n    transition('* => void', animate('100ms 25ms linear', style({opacity: 0})))\n  ]),\n\n\n  /**\n   * This animation fades in the background color and content of the menu panel\n   * after its containing element is scaled in.\n   */\n  fadeInItems: trigger('fadeInItems', [\n    // TODO(crisbeto): this is inside the `transformMenu`\n    // now. Remove next time we do breaking changes.\n    state('showing', style({opacity: 1})),\n    transition('void => *', [\n      style({opacity: 0}),\n      animate('400ms 100ms cubic-bezier(0.55, 0, 0.55, 0.2)')\n    ])\n  ])\n};\n\n/**\n * @deprecated\n * @breaking-change 8.0.0\n * @docs-private\n */\nexport const fadeInItems = matMenuAnimations.fadeInItems;\n\n/**\n * @deprecated\n * @breaking-change 8.0.0\n * @docs-private\n */\nexport const transformMenu = matMenuAnimations.transformMenu;\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {EventEmitter, TemplateRef, InjectionToken} from '@angular/core';\nimport {MenuPositionX, MenuPositionY} from './menu-positions';\nimport {Direction} from '@angular/cdk/bidi';\nimport {FocusOrigin} from '@angular/cdk/a11y';\nimport {MatMenuContent} from './menu-content';\n\n/**\n * Injection token used to provide the parent menu to menu-specific components.\n * @docs-private\n */\nexport const MAT_MENU_PANEL = new InjectionToken<MatMenuPanel>('MAT_MENU_PANEL');\n\n/**\n * Interface for a custom menu panel that can be used with `matMenuTriggerFor`.\n * @docs-private\n */\nexport interface MatMenuPanel<T = any> {\n  xPosition: MenuPositionX;\n  yPosition: MenuPositionY;\n  overlapTrigger: boolean;\n  templateRef: TemplateRef<any>;\n  close: EventEmitter<void | 'click' | 'keydown' | 'tab'>;\n  parentMenu?: MatMenuPanel | undefined;\n  direction?: Direction;\n  focusFirstItem: (origin?: FocusOrigin) => void;\n  resetActiveItem: () => void;\n  setPositionClasses?: (x: MenuPositionX, y: MenuPositionY) => void;\n  setElevation?(depth: number): void;\n  lazyContent?: MatMenuContent;\n  backdropClass?: string;\n  hasBackdrop?: boolean;\n  addItem?: (item: T) => void;\n  removeItem?: (item: T) => void;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusableOption, FocusMonitor, FocusOrigin} from '@angular/cdk/a11y';\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  OnDestroy,\n  ViewEncapsulation,\n  Inject,\n  Optional,\n} from '@angular/core';\nimport {\n  CanDisable, CanDisableCtor,\n  CanDisableRipple, CanDisableRippleCtor,\n  mixinDisabled,\n  mixinDisableRipple,\n} from '@angular/material/core';\nimport {Subject} from 'rxjs';\nimport {DOCUMENT} from '@angular/common';\nimport {MAT_MENU_PANEL, MatMenuPanel} from './menu-panel';\n\n// Boilerplate for applying mixins to MatMenuItem.\n/** @docs-private */\nexport class MatMenuItemBase {}\nexport const _MatMenuItemMixinBase: CanDisableRippleCtor & CanDisableCtor & typeof MatMenuItemBase =\n    mixinDisableRipple(mixinDisabled(MatMenuItemBase));\n\n/**\n * This directive is intended to be used inside an mat-menu tag.\n * It exists mostly to set the role attribute.\n */\n@Component({\n  moduleId: module.id,\n  selector: '[mat-menu-item]',\n  exportAs: 'matMenuItem',\n  inputs: ['disabled', 'disableRipple'],\n  host: {\n    'role': 'menuitem',\n    'class': 'mat-menu-item',\n    '[class.mat-menu-item-highlighted]': '_highlighted',\n    '[class.mat-menu-item-submenu-trigger]': '_triggersSubmenu',\n    '[attr.tabindex]': '_getTabIndex()',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.disabled]': 'disabled || null',\n    '(click)': '_checkDisabled($event)',\n    '(mouseenter)': '_handleMouseEnter()',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  templateUrl: 'menu-item.html',\n})\nexport class MatMenuItem extends _MatMenuItemMixinBase\n    implements FocusableOption, CanDisable, CanDisableRipple, OnDestroy {\n\n  private _document: Document;\n\n  /** Stream that emits when the menu item is hovered. */\n  readonly _hovered: Subject<MatMenuItem> = new Subject<MatMenuItem>();\n\n  /** Whether the menu item is highlighted. */\n  _highlighted: boolean = false;\n\n  /** Whether the menu item acts as a trigger for a sub-menu. */\n  _triggersSubmenu: boolean = false;\n\n  constructor(\n    private _elementRef: ElementRef<HTMLElement>,\n    @Inject(DOCUMENT) document?: any,\n    private _focusMonitor?: FocusMonitor,\n    @Inject(MAT_MENU_PANEL) @Optional() private _parentMenu?: MatMenuPanel<MatMenuItem>) {\n\n    // @breaking-change 8.0.0 make `_focusMonitor` and `document` required params.\n    super();\n\n    if (_focusMonitor) {\n      // Start monitoring the element so it gets the appropriate focused classes. We want\n      // to show the focus style for menu items only when the focus was not caused by a\n      // mouse or touch interaction.\n      _focusMonitor.monitor(this._elementRef, false);\n    }\n\n    if (_parentMenu && _parentMenu.addItem) {\n      _parentMenu.addItem(this);\n    }\n\n    this._document = document;\n  }\n\n  /** Focuses the menu item. */\n  focus(origin: FocusOrigin = 'program'): void {\n    if (this._focusMonitor) {\n      this._focusMonitor.focusVia(this._getHostElement(), origin);\n    } else {\n      this._getHostElement().focus();\n    }\n  }\n\n  ngOnDestroy() {\n    if (this._focusMonitor) {\n      this._focusMonitor.stopMonitoring(this._elementRef);\n    }\n\n    if (this._parentMenu && this._parentMenu.removeItem) {\n      this._parentMenu.removeItem(this);\n    }\n\n    this._hovered.complete();\n  }\n\n  /** Used to set the `tabindex`. */\n  _getTabIndex(): string {\n    return this.disabled ? '-1' : '0';\n  }\n\n  /** Returns the host DOM element. */\n  _getHostElement(): HTMLElement {\n    return this._elementRef.nativeElement;\n  }\n\n  /** Prevents the default element actions if it is disabled. */\n  _checkDisabled(event: Event): void {\n    if (this.disabled) {\n      event.preventDefault();\n      event.stopPropagation();\n    }\n  }\n\n  /** Emits to the hover stream. */\n  _handleMouseEnter() {\n    this._hovered.next(this);\n  }\n\n  /** Gets the label to be used when determining whether the option should be focused. */\n  getLabel(): string {\n    const element: HTMLElement = this._elementRef.nativeElement;\n    const textNodeType = this._document ? this._document.TEXT_NODE : 3;\n    let output = '';\n\n    if (element.childNodes) {\n      const length = element.childNodes.length;\n\n      // Go through all the top-level text nodes and extract their text.\n      // We skip anything that's not a text node to prevent the text from\n      // being thrown off by something like an icon.\n      for (let i = 0; i < length; i++) {\n        if (element.childNodes[i].nodeType === textNodeType) {\n          output += element.childNodes[i].textContent;\n        }\n      }\n    }\n\n    return output.trim();\n  }\n\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusKeyManager, FocusOrigin} from '@angular/cdk/a11y';\nimport {Direction} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {ESCAPE, LEFT_ARROW, RIGHT_ARROW, DOWN_ARROW, UP_ARROW} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  Component,\n  ContentChild,\n  ContentChildren,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  OnDestroy,\n  Output,\n  TemplateRef,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n  OnInit,\n} from '@angular/core';\nimport {merge, Observable, Subject, Subscription} from 'rxjs';\nimport {startWith, switchMap, take} from 'rxjs/operators';\nimport {matMenuAnimations} from './menu-animations';\nimport {MatMenuContent} from './menu-content';\nimport {throwMatMenuInvalidPositionX, throwMatMenuInvalidPositionY} from './menu-errors';\nimport {MatMenuItem} from './menu-item';\nimport {MAT_MENU_PANEL, MatMenuPanel} from './menu-panel';\nimport {MenuPositionX, MenuPositionY} from './menu-positions';\nimport {AnimationEvent} from '@angular/animations';\n\n\n/** Default `mat-menu` options that can be overridden. */\nexport interface MatMenuDefaultOptions {\n  /** The x-axis position of the menu. */\n  xPosition: MenuPositionX;\n\n  /** The y-axis position of the menu. */\n  yPosition: MenuPositionY;\n\n  /** Whether the menu should overlap the menu trigger. */\n  overlapTrigger: boolean;\n\n  /** Class to be applied to the menu's backdrop. */\n  backdropClass: string;\n\n  /** Whether the menu has a backdrop. */\n  hasBackdrop?: boolean;\n}\n\n/** Injection token to be used to override the default options for `mat-menu`. */\nexport const MAT_MENU_DEFAULT_OPTIONS =\n    new InjectionToken<MatMenuDefaultOptions>('mat-menu-default-options', {\n      providedIn: 'root',\n      factory: MAT_MENU_DEFAULT_OPTIONS_FACTORY\n    });\n\n/** @docs-private */\nexport function MAT_MENU_DEFAULT_OPTIONS_FACTORY(): MatMenuDefaultOptions {\n  return {\n    overlapTrigger: false,\n    xPosition: 'after',\n    yPosition: 'below',\n    backdropClass: 'cdk-overlay-transparent-backdrop',\n  };\n}\n/**\n * Start elevation for the menu panel.\n * @docs-private\n */\nconst MAT_MENU_BASE_ELEVATION = 4;\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-menu',\n  templateUrl: 'menu.html',\n  styleUrls: ['menu.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matMenu',\n  animations: [\n    matMenuAnimations.transformMenu,\n    matMenuAnimations.fadeInItems\n  ],\n  providers: [\n    {provide: MAT_MENU_PANEL, useExisting: MatMenu}\n  ]\n})\nexport class MatMenu implements AfterContentInit, MatMenuPanel<MatMenuItem>, OnInit, OnDestroy {\n  private _keyManager: FocusKeyManager<MatMenuItem>;\n  private _xPosition: MenuPositionX = this._defaultOptions.xPosition;\n  private _yPosition: MenuPositionY = this._defaultOptions.yPosition;\n  private _previousElevation: string;\n\n  /** Menu items inside the current menu. */\n  private _items: MatMenuItem[] = [];\n\n  /** Emits whenever the amount of menu items changes. */\n  private _itemChanges = new Subject<MatMenuItem[]>();\n\n  /** Subscription to tab events on the menu panel */\n  private _tabSubscription = Subscription.EMPTY;\n\n  /** Config object to be passed into the menu's ngClass */\n  _classList: {[key: string]: boolean} = {};\n\n  /** Current state of the panel animation. */\n  _panelAnimationState: 'void' | 'enter' = 'void';\n\n  /** Emits whenever an animation on the menu completes. */\n  _animationDone = new Subject<AnimationEvent>();\n\n  /** Whether the menu is animating. */\n  _isAnimating: boolean;\n\n  /** Parent menu of the current menu panel. */\n  parentMenu: MatMenuPanel | undefined;\n\n  /** Layout direction of the menu. */\n  direction: Direction;\n\n  /** Class to be added to the backdrop element. */\n  @Input() backdropClass: string = this._defaultOptions.backdropClass;\n\n  /** Position of the menu in the X axis. */\n  @Input()\n  get xPosition(): MenuPositionX { return this._xPosition; }\n  set xPosition(value: MenuPositionX) {\n    if (value !== 'before' && value !== 'after') {\n      throwMatMenuInvalidPositionX();\n    }\n    this._xPosition = value;\n    this.setPositionClasses();\n  }\n\n  /** Position of the menu in the Y axis. */\n  @Input()\n  get yPosition(): MenuPositionY { return this._yPosition; }\n  set yPosition(value: MenuPositionY) {\n    if (value !== 'above' && value !== 'below') {\n      throwMatMenuInvalidPositionY();\n    }\n    this._yPosition = value;\n    this.setPositionClasses();\n  }\n\n  /** @docs-private */\n  @ViewChild(TemplateRef) templateRef: TemplateRef<any>;\n\n  /**\n   * List of the items inside of a menu.\n   * @deprecated\n   * @breaking-change 8.0.0\n   */\n  @ContentChildren(MatMenuItem) items: QueryList<MatMenuItem>;\n\n  /**\n   * Menu content that will be rendered lazily.\n   * @docs-private\n   */\n  @ContentChild(MatMenuContent) lazyContent: MatMenuContent;\n\n  /** Whether the menu should overlap its trigger. */\n  @Input()\n  get overlapTrigger(): boolean { return this._overlapTrigger; }\n  set overlapTrigger(value: boolean) {\n    this._overlapTrigger = coerceBooleanProperty(value);\n  }\n  private _overlapTrigger: boolean = this._defaultOptions.overlapTrigger;\n\n  /** Whether the menu has a backdrop. */\n  @Input()\n  get hasBackdrop(): boolean | undefined { return this._hasBackdrop; }\n  set hasBackdrop(value: boolean | undefined) {\n    this._hasBackdrop = coerceBooleanProperty(value);\n  }\n  private _hasBackdrop: boolean | undefined = this._defaultOptions.hasBackdrop;\n\n  /**\n   * This method takes classes set on the host mat-menu element and applies them on the\n   * menu template that displays in the overlay container.  Otherwise, it's difficult\n   * to style the containing menu from outside the component.\n   * @param classes list of class names\n   */\n  @Input('class')\n  set panelClass(classes: string) {\n    if (classes && classes.length) {\n      this._classList = classes.split(' ').reduce((obj: any, className: string) => {\n        obj[className] = true;\n        return obj;\n      }, {});\n\n      this._elementRef.nativeElement.className = '';\n    }\n  }\n\n  /**\n   * This method takes classes set on the host mat-menu element and applies them on the\n   * menu template that displays in the overlay container.  Otherwise, it's difficult\n   * to style the containing menu from outside the component.\n   * @deprecated Use `panelClass` instead.\n   * @breaking-change 8.0.0\n   */\n  @Input()\n  get classList(): string { return this.panelClass; }\n  set classList(classes: string) { this.panelClass = classes; }\n\n  /** Event emitted when the menu is closed. */\n  @Output() readonly closed: EventEmitter<void | 'click' | 'keydown' | 'tab'> =\n      new EventEmitter<void | 'click' | 'keydown' | 'tab'>();\n\n  /**\n   * Event emitted when the menu is closed.\n   * @deprecated Switch to `closed` instead\n   * @breaking-change 8.0.0\n   */\n  @Output() close = this.closed;\n\n  constructor(\n    private _elementRef: ElementRef<HTMLElement>,\n    private _ngZone: NgZone,\n    @Inject(MAT_MENU_DEFAULT_OPTIONS) private _defaultOptions: MatMenuDefaultOptions) { }\n\n  ngOnInit() {\n    this.setPositionClasses();\n  }\n\n  ngAfterContentInit() {\n    this._keyManager = new FocusKeyManager<MatMenuItem>(this._items).withWrap().withTypeAhead();\n    this._tabSubscription = this._keyManager.tabOut.subscribe(() => this.closed.emit('tab'));\n  }\n\n  ngOnDestroy() {\n    this._tabSubscription.unsubscribe();\n    this.closed.complete();\n  }\n\n  /** Stream that emits whenever the hovered menu item changes. */\n  _hovered(): Observable<MatMenuItem> {\n    return this._itemChanges.pipe(\n      startWith(this._items),\n      switchMap(items => merge(...items.map(item => item._hovered)))\n    );\n  }\n\n  /** Handle a keyboard event from the menu, delegating to the appropriate action. */\n  _handleKeydown(event: KeyboardEvent) {\n    const keyCode = event.keyCode;\n\n    switch (keyCode) {\n      case ESCAPE:\n        this.closed.emit('keydown');\n      break;\n      case LEFT_ARROW:\n        if (this.parentMenu && this.direction === 'ltr') {\n          this.closed.emit('keydown');\n        }\n      break;\n      case RIGHT_ARROW:\n        if (this.parentMenu && this.direction === 'rtl') {\n          this.closed.emit('keydown');\n        }\n      break;\n      default:\n        if (keyCode === UP_ARROW || keyCode === DOWN_ARROW) {\n          this._keyManager.setFocusOrigin('keyboard');\n        }\n\n        this._keyManager.onKeydown(event);\n    }\n  }\n\n  /**\n   * Focus the first item in the menu.\n   * @param origin Action from which the focus originated. Used to set the correct styling.\n   */\n  focusFirstItem(origin: FocusOrigin = 'program'): void {\n    // When the content is rendered lazily, it takes a bit before the items are inside the DOM.\n    if (this.lazyContent) {\n      this._ngZone.onStable.asObservable()\n        .pipe(take(1))\n        .subscribe(() => this._keyManager.setFocusOrigin(origin).setFirstItemActive());\n    } else {\n      this._keyManager.setFocusOrigin(origin).setFirstItemActive();\n    }\n  }\n\n  /**\n   * Resets the active item in the menu. This is used when the menu is opened, allowing\n   * the user to start from the first option when pressing the down arrow.\n   */\n  resetActiveItem() {\n    this._keyManager.setActiveItem(-1);\n  }\n\n  /**\n   * Sets the menu panel elevation.\n   * @param depth Number of parent menus that come before the menu.\n   */\n  setElevation(depth: number): void {\n    // The elevation starts at the base and increases by one for each level.\n    const newElevation = `mat-elevation-z${MAT_MENU_BASE_ELEVATION + depth}`;\n    const customElevation = Object.keys(this._classList).find(c => c.startsWith('mat-elevation-z'));\n\n    if (!customElevation || customElevation === this._previousElevation) {\n      if (this._previousElevation) {\n        this._classList[this._previousElevation] = false;\n      }\n\n      this._classList[newElevation] = true;\n      this._previousElevation = newElevation;\n    }\n  }\n\n  /**\n   * Registers a menu item with the menu.\n   * @docs-private\n   */\n  addItem(item: MatMenuItem) {\n    // We register the items through this method, rather than picking them up through\n    // `ContentChildren`, because we need the items to be picked up by their closest\n    // `mat-menu` ancestor. If we used `@ContentChildren(MatMenuItem, {descendants: true})`,\n    // all descendant items will bleed into the top-level menu in the case where the consumer\n    // has `mat-menu` instances nested inside each other.\n    if (this._items.indexOf(item) === -1) {\n      this._items.push(item);\n      this._itemChanges.next(this._items);\n    }\n  }\n\n  /**\n   * Removes an item from the menu.\n   * @docs-private\n   */\n  removeItem(item: MatMenuItem) {\n    const index = this._items.indexOf(item);\n\n    if (this._items.indexOf(item) > -1) {\n      this._items.splice(index, 1);\n      this._itemChanges.next(this._items);\n    }\n  }\n\n  /**\n   * Adds classes to the menu panel based on its position. Can be used by\n   * consumers to add specific styling based on the position.\n   * @param posX Position of the menu along the x axis.\n   * @param posY Position of the menu along the y axis.\n   * @docs-private\n   */\n  setPositionClasses(posX: MenuPositionX = this.xPosition, posY: MenuPositionY = this.yPosition) {\n    const classes = this._classList;\n    classes['mat-menu-before'] = posX === 'before';\n    classes['mat-menu-after'] = posX === 'after';\n    classes['mat-menu-above'] = posY === 'above';\n    classes['mat-menu-below'] = posY === 'below';\n  }\n\n  /** Starts the enter animation. */\n  _startAnimation() {\n    // @breaking-change 8.0.0 Combine with _resetAnimation.\n    this._panelAnimationState = 'enter';\n  }\n\n  /** Resets the panel animation to its initial state. */\n  _resetAnimation() {\n    // @breaking-change 8.0.0 Combine with _startAnimation.\n    this._panelAnimationState = 'void';\n  }\n\n  /** Callback that is invoked when the panel animation completes. */\n  _onAnimationDone(event: AnimationEvent) {\n    this._animationDone.next(event);\n    this._isAnimating = false;\n\n    // Scroll the content element to the top once the animation is done. This is necessary, because\n    // we move focus to the first item while it's still being animated, which can throw the browser\n    // off when it determines the scroll position. Alternatively we can move focus when the\n    // animation is done, however moving focus asynchronously will interrupt screen readers\n    // which are in the process of reading out the menu already. We take the `element` from\n    // the `event` since we can't use a `ViewChild` to access the pane.\n    if (event.toState === 'enter' && this._keyManager.activeItemIndex === 0) {\n      event.element.scrollTop = 0;\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  Component,\n  ContentChild,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  Optional,\n  QueryList,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {\n  CanDisableRipple,\n  CanDisableRippleCtor,\n  MatLine,\n  setLines,\n  mixinDisableRipple,\n} from '@angular/material/core';\n\n// Boilerplate for applying mixins to MatList.\n/** @docs-private */\nexport class MatListBase {}\nexport const _MatListMixinBase: CanDisableRippleCtor & typeof MatListBase =\n    mixinDisableRipple(MatListBase);\n\n// Boilerplate for applying mixins to MatListItem.\n/** @docs-private */\nexport class MatListItemBase {}\nexport const _MatListItemMixinBase: CanDisableRippleCtor & typeof MatListItemBase =\n    mixinDisableRipple(MatListItemBase);\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-nav-list',\n  exportAs: 'matNavList',\n  host: {\n    'role': 'navigation',\n    'class': 'mat-nav-list mat-list-base'\n  },\n  templateUrl: 'list.html',\n  styleUrls: ['list.css'],\n  inputs: ['disableRipple'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatNavList extends _MatListMixinBase implements CanDisableRipple {}\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-list, mat-action-list',\n  exportAs: 'matList',\n  templateUrl: 'list.html',\n  host: {\n    'class': 'mat-list mat-list-base'\n  },\n  styleUrls: ['list.css'],\n  inputs: ['disableRipple'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatList extends _MatListMixinBase implements CanDisableRipple {\n  /**\n   * @deprecated _elementRef parameter to be made required.\n   * @breaking-change 8.0.0\n   */\n  constructor(private _elementRef?: ElementRef<HTMLElement>) {\n    super();\n  }\n\n  _getListType(): 'list' | 'action-list' | null {\n    const elementRef = this._elementRef;\n\n    // @breaking-change 8.0.0 Remove null check once _elementRef is a required param.\n    if (elementRef) {\n      const nodeName = elementRef.nativeElement.nodeName.toLowerCase();\n\n      if (nodeName === 'mat-list') {\n        return 'list';\n      }\n\n      if (nodeName === 'mat-action-list') {\n        return 'action-list';\n      }\n    }\n\n    return null;\n  }\n}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-list-avatar], [matListAvatar]',\n  host: {'class': 'mat-list-avatar'}\n})\nexport class MatListAvatarCssMatStyler {}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-list-icon], [matListIcon]',\n  host: {'class': 'mat-list-icon'}\n})\nexport class MatListIconCssMatStyler {}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-subheader], [matSubheader]',\n  host: {'class': 'mat-subheader'}\n})\nexport class MatListSubheaderCssMatStyler {}\n\n/** An item within a Material Design list. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-list-item, a[mat-list-item], button[mat-list-item]',\n  exportAs: 'matListItem',\n  host: {\n    'class': 'mat-list-item',\n    // @breaking-change 8.0.0 Remove `mat-list-item-avatar` in favor of `mat-list-item-with-avatar`.\n    '[class.mat-list-item-avatar]': '_avatar || _icon',\n    '[class.mat-list-item-with-avatar]': '_avatar || _icon',\n  },\n  inputs: ['disableRipple'],\n  templateUrl: 'list-item.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatListItem extends _MatListItemMixinBase implements AfterContentInit,\n    CanDisableRipple {\n  private _isInteractiveList: boolean = false;\n  private _list?: MatNavList | MatList;\n\n  @ContentChildren(MatLine) _lines: QueryList<MatLine>;\n  @ContentChild(MatListAvatarCssMatStyler) _avatar: MatListAvatarCssMatStyler;\n  @ContentChild(MatListIconCssMatStyler) _icon: MatListIconCssMatStyler;\n\n  constructor(private _element: ElementRef<HTMLElement>,\n              @Optional() navList?: MatNavList,\n              @Optional() list?: MatList) {\n    super();\n    this._isInteractiveList = !!(navList || (list && list._getListType() === 'action-list'));\n    this._list = navList || list;\n\n    // If no type attributed is specified for <button>, set it to \"button\".\n    // If a type attribute is already specified, do nothing.\n    const element = this._getHostElement();\n\n    if (element.nodeName.toLowerCase() === 'button' && !element.hasAttribute('type')) {\n      element.setAttribute('type', 'button');\n    }\n  }\n\n  ngAfterContentInit() {\n    setLines(this._lines, this._element);\n  }\n\n  /** Whether this list item should show a ripple effect when clicked. */\n  _isRippleDisabled() {\n    return !this._isInteractiveList || this.disableRipple ||\n           !!(this._list && this._list.disableRipple);\n  }\n\n  /** Retrieves the DOM element of the component host. */\n  _getHostElement(): HTMLElement {\n    return this._element.nativeElement;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ViewEncapsulation,\n  ElementRef,\n  Input,\n  Optional,\n  ContentChildren,\n  QueryList,\n  AfterContentInit,\n  Directive,\n  ChangeDetectionStrategy,\n  Inject,\n} from '@angular/core';\nimport {MatLine, setLines} from '@angular/material/core';\nimport {coerceNumberProperty} from '@angular/cdk/coercion';\nimport {MAT_GRID_LIST, MatGridListBase} from './grid-list-base';\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-grid-tile',\n  exportAs: 'matGridTile',\n  host: {\n    'class': 'mat-grid-tile',\n  },\n  templateUrl: 'grid-tile.html',\n  styleUrls: ['grid-list.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatGridTile {\n  _rowspan: number = 1;\n  _colspan: number = 1;\n\n  constructor(\n    private _element: ElementRef<HTMLElement>,\n    @Optional() @Inject(MAT_GRID_LIST) public _gridList?: MatGridListBase) {}\n\n  /** Amount of rows that the grid tile takes up. */\n  @Input()\n  get rowspan(): number { return this._rowspan; }\n  set rowspan(value: number) { this._rowspan = Math.round(coerceNumberProperty(value)); }\n\n  /** Amount of columns that the grid tile takes up. */\n  @Input()\n  get colspan(): number { return this._colspan; }\n  set colspan(value: number) { this._colspan = Math.round(coerceNumberProperty(value)); }\n\n  /**\n   * Sets the style of the grid-tile element.  Needs to be set manually to avoid\n   * \"Changed after checked\" errors that would occur with HostBinding.\n   */\n  _setStyle(property: string, value: any): void {\n    (this._element.nativeElement.style as any)[property] = value;\n  }\n}\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-grid-tile-header, mat-grid-tile-footer',\n  templateUrl: 'grid-tile-text.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatGridTileText implements AfterContentInit {\n  @ContentChildren(MatLine) _lines: QueryList<MatLine>;\n\n  constructor(private _element: ElementRef<HTMLElement>) {}\n\n  ngAfterContentInit() {\n    setLines(this._lines, this._element);\n  }\n}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-grid-avatar], [matGridAvatar]',\n  host: {'class': 'mat-grid-avatar'}\n})\nexport class MatGridAvatarCssMatStyler {}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-grid-tile-header',\n  host: {'class': 'mat-grid-tile-header'}\n})\nexport class MatGridTileHeaderCssMatStyler {}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-grid-tile-footer',\n  host: {'class': 'mat-grid-tile-footer'}\n})\nexport class MatGridTileFooterCssMatStyler {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {MatGridTile} from './grid-tile';\n\n/**\n * Class for determining, from a list of tiles, the (row, col) position of each of those tiles\n * in the grid. This is necessary (rather than just rendering the tiles in normal document flow)\n * because the tiles can have a rowspan.\n *\n * The positioning algorithm greedily places each tile as soon as it encounters a gap in the grid\n * large enough to accommodate it so that the tiles still render in the same order in which they\n * are given.\n *\n * The basis of the algorithm is the use of an array to track the already placed tiles. Each\n * element of the array corresponds to a column, and the value indicates how many cells in that\n * column are already occupied; zero indicates an empty cell. Moving \"down\" to the next row\n * decrements each value in the tracking array (indicating that the column is one cell closer to\n * being free).\n *\n * @docs-private\n */\nexport class TileCoordinator {\n  /** Tracking array (see class description). */\n  tracker: number[];\n\n  /** Index at which the search for the next gap will start. */\n  columnIndex: number = 0;\n\n  /** The current row index. */\n  rowIndex: number = 0;\n\n  /** Gets the total number of rows occupied by tiles */\n  get rowCount(): number { return this.rowIndex + 1; }\n\n  /**\n   * Gets the total span of rows occupied by tiles.\n   * Ex: A list with 1 row that contains a tile with rowspan 2 will have a total rowspan of 2.\n   */\n  get rowspan() {\n    const lastRowMax = Math.max(...this.tracker);\n    // if any of the tiles has a rowspan that pushes it beyond the total row count,\n    // add the difference to the rowcount\n    return lastRowMax > 1 ? this.rowCount + lastRowMax - 1 : this.rowCount;\n  }\n\n  /** The computed (row, col) position of each tile (the output). */\n  positions: TilePosition[];\n\n  /**\n   * Updates the tile positions.\n   * @param numColumns Amount of columns in the grid.\n   */\n  update(numColumns: number, tiles: MatGridTile[]) {\n    this.columnIndex = 0;\n    this.rowIndex = 0;\n\n    this.tracker = new Array(numColumns);\n    this.tracker.fill(0, 0, this.tracker.length);\n    this.positions = tiles.map(tile => this._trackTile(tile));\n  }\n\n  /** Calculates the row and col position of a tile. */\n  private _trackTile(tile: MatGridTile): TilePosition {\n    // Find a gap large enough for this tile.\n    const gapStartIndex = this._findMatchingGap(tile.colspan);\n\n    // Place tile in the resulting gap.\n    this._markTilePosition(gapStartIndex, tile);\n\n    // The next time we look for a gap, the search will start at columnIndex, which should be\n    // immediately after the tile that has just been placed.\n    this.columnIndex = gapStartIndex + tile.colspan;\n\n    return new TilePosition(this.rowIndex, gapStartIndex);\n  }\n\n  /** Finds the next available space large enough to fit the tile. */\n  private _findMatchingGap(tileCols: number): number {\n    if (tileCols > this.tracker.length) {\n      throw Error(`mat-grid-list: tile with colspan ${tileCols} is wider than ` +\n                      `grid with cols=\"${this.tracker.length}\".`);\n    }\n\n    // Start index is inclusive, end index is exclusive.\n    let gapStartIndex = -1;\n    let gapEndIndex = -1;\n\n    // Look for a gap large enough to fit the given tile. Empty spaces are marked with a zero.\n    do {\n      // If we've reached the end of the row, go to the next row.\n      if (this.columnIndex + tileCols > this.tracker.length) {\n        this._nextRow();\n        gapStartIndex = this.tracker.indexOf(0, this.columnIndex);\n        gapEndIndex = this._findGapEndIndex(gapStartIndex);\n        continue;\n      }\n\n      gapStartIndex = this.tracker.indexOf(0, this.columnIndex);\n\n      // If there are no more empty spaces in this row at all, move on to the next row.\n      if (gapStartIndex == -1) {\n        this._nextRow();\n        gapStartIndex = this.tracker.indexOf(0, this.columnIndex);\n        gapEndIndex = this._findGapEndIndex(gapStartIndex);\n        continue;\n      }\n\n      gapEndIndex = this._findGapEndIndex(gapStartIndex);\n\n      // If a gap large enough isn't found, we want to start looking immediately after the current\n      // gap on the next iteration.\n      this.columnIndex = gapStartIndex + 1;\n\n      // Continue iterating until we find a gap wide enough for this tile. Since gapEndIndex is\n      // exclusive, gapEndIndex is 0 means we didn't find a gap and should continue.\n    } while ((gapEndIndex - gapStartIndex < tileCols) || (gapEndIndex == 0));\n\n    // If we still didn't manage to find a gap, ensure that the index is\n    // at least zero so the tile doesn't get pulled out of the grid.\n    return Math.max(gapStartIndex, 0);\n  }\n\n  /** Move \"down\" to the next row. */\n  private _nextRow(): void {\n    this.columnIndex = 0;\n    this.rowIndex++;\n\n    // Decrement all spaces by one to reflect moving down one row.\n    for (let i = 0; i < this.tracker.length; i++) {\n      this.tracker[i] = Math.max(0, this.tracker[i] - 1);\n    }\n  }\n\n  /**\n   * Finds the end index (exclusive) of a gap given the index from which to start looking.\n   * The gap ends when a non-zero value is found.\n   */\n  private _findGapEndIndex(gapStartIndex: number): number {\n    for (let i = gapStartIndex + 1; i < this.tracker.length; i++) {\n      if (this.tracker[i] != 0) {\n        return i;\n      }\n    }\n\n    // The gap ends with the end of the row.\n    return this.tracker.length;\n  }\n\n  /** Update the tile tracker to account for the given tile in the given space. */\n  private _markTilePosition(start: number, tile: MatGridTile): void {\n    for (let i = 0; i < tile.colspan; i++) {\n      this.tracker[start + i] = tile.rowspan;\n    }\n  }\n}\n\n/**\n * Simple data structure for tile position (row, col).\n * @docs-private\n */\nexport class TilePosition {\n  constructor(public row: number, public col: number) {}\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {MatGridList} from './grid-list';\nimport {MatGridTile} from './grid-tile';\nimport {TileCoordinator} from './tile-coordinator';\n\n/**\n * RegExp that can be used to check whether a value will\n * be allowed inside a CSS `calc()` expression.\n */\nconst cssCalcAllowedValue = /^-?\\d+((\\.\\d+)?[A-Za-z%$]?)+$/;\n\n/**\n * Sets the style properties for an individual tile, given the position calculated by the\n * Tile Coordinator.\n * @docs-private\n */\nexport abstract class TileStyler {\n  _gutterSize: string;\n  _rows: number = 0;\n  _rowspan: number = 0;\n  _cols: number;\n  _direction: string;\n\n  /**\n   * Adds grid-list layout info once it is available. Cannot be processed in the constructor\n   * because these properties haven't been calculated by that point.\n   *\n   * @param gutterSize Size of the grid's gutter.\n   * @param tracker Instance of the TileCoordinator.\n   * @param cols Amount of columns in the grid.\n   * @param direction Layout direction of the grid.\n   */\n  init(gutterSize: string, tracker: TileCoordinator, cols: number, direction: string): void {\n    this._gutterSize = normalizeUnits(gutterSize);\n    this._rows = tracker.rowCount;\n    this._rowspan = tracker.rowspan;\n    this._cols = cols;\n    this._direction = direction;\n  }\n\n  /**\n   * Computes the amount of space a single 1x1 tile would take up (width or height).\n   * Used as a basis for other calculations.\n   * @param sizePercent Percent of the total grid-list space that one 1x1 tile would take up.\n   * @param gutterFraction Fraction of the gutter size taken up by one 1x1 tile.\n   * @return The size of a 1x1 tile as an expression that can be evaluated via CSS calc().\n   */\n  getBaseTileSize(sizePercent: number, gutterFraction: number): string {\n    // Take the base size percent (as would be if evenly dividing the size between cells),\n    // and then subtracting the size of one gutter. However, since there are no gutters on the\n    // edges, each tile only uses a fraction (gutterShare = numGutters / numCells) of the gutter\n    // size. (Imagine having one gutter per tile, and then breaking up the extra gutter on the\n    // edge evenly among the cells).\n    return `(${sizePercent}% - (${this._gutterSize} * ${gutterFraction}))`;\n  }\n\n\n  /**\n   * Gets The horizontal or vertical position of a tile, e.g., the 'top' or 'left' property value.\n   * @param offset Number of tiles that have already been rendered in the row/column.\n   * @param baseSize Base size of a 1x1 tile (as computed in getBaseTileSize).\n   * @return Position of the tile as a CSS calc() expression.\n   */\n  getTilePosition(baseSize: string, offset: number): string {\n    // The position comes the size of a 1x1 tile plus gutter for each previous tile in the\n    // row/column (offset).\n    return offset === 0 ? '0' : calc(`(${baseSize} + ${this._gutterSize}) * ${offset}`);\n  }\n\n\n  /**\n   * Gets the actual size of a tile, e.g., width or height, taking rowspan or colspan into account.\n   * @param baseSize Base size of a 1x1 tile (as computed in getBaseTileSize).\n   * @param span The tile's rowspan or colspan.\n   * @return Size of the tile as a CSS calc() expression.\n   */\n  getTileSize(baseSize: string, span: number): string {\n    return `(${baseSize} * ${span}) + (${span - 1} * ${this._gutterSize})`;\n  }\n\n\n  /**\n   * Sets the style properties to be applied to a tile for the given row and column index.\n   * @param tile Tile to which to apply the styling.\n   * @param rowIndex Index of the tile's row.\n   * @param colIndex Index of the tile's column.\n   */\n  setStyle(tile: MatGridTile, rowIndex: number, colIndex: number): void {\n    // Percent of the available horizontal space that one column takes up.\n    let percentWidthPerTile = 100 / this._cols;\n\n    // Fraction of the vertical gutter size that each column takes up.\n    // For example, if there are 5 columns, each column uses 4/5 = 0.8 times the gutter width.\n    let gutterWidthFractionPerTile = (this._cols - 1) / this._cols;\n\n    this.setColStyles(tile, colIndex, percentWidthPerTile, gutterWidthFractionPerTile);\n    this.setRowStyles(tile, rowIndex, percentWidthPerTile, gutterWidthFractionPerTile);\n  }\n\n  /** Sets the horizontal placement of the tile in the list. */\n  setColStyles(tile: MatGridTile, colIndex: number, percentWidth: number,\n               gutterWidth: number) {\n    // Base horizontal size of a column.\n    let baseTileWidth = this.getBaseTileSize(percentWidth, gutterWidth);\n\n    // The width and horizontal position of each tile is always calculated the same way, but the\n    // height and vertical position depends on the rowMode.\n    let side = this._direction === 'rtl' ? 'right' : 'left';\n    tile._setStyle(side, this.getTilePosition(baseTileWidth, colIndex));\n    tile._setStyle('width', calc(this.getTileSize(baseTileWidth, tile.colspan)));\n  }\n\n  /**\n   * Calculates the total size taken up by gutters across one axis of a list.\n   */\n  getGutterSpan(): string {\n    return `${this._gutterSize} * (${this._rowspan} - 1)`;\n  }\n\n  /**\n   * Calculates the total size taken up by tiles across one axis of a list.\n   * @param tileHeight Height of the tile.\n   */\n  getTileSpan(tileHeight: string): string {\n    return `${this._rowspan} * ${this.getTileSize(tileHeight, 1)}`;\n  }\n\n  /**\n   * Sets the vertical placement of the tile in the list.\n   * This method will be implemented by each type of TileStyler.\n   * @docs-private\n   */\n  abstract setRowStyles(tile: MatGridTile, rowIndex: number, percentWidth: number,\n                        gutterWidth: number): void;\n\n  /**\n   * Calculates the computed height and returns the correct style property to set.\n   * This method can be implemented by each type of TileStyler.\n   * @docs-private\n   */\n  getComputedHeight(): [string, string] | null { return null; }\n\n  /**\n   * Called when the tile styler is swapped out with a different one. To be used for cleanup.\n   * @param list Grid list that the styler was attached to.\n   * @docs-private\n   */\n  abstract reset(list: MatGridList): void;\n}\n\n\n/**\n * This type of styler is instantiated when the user passes in a fixed row height.\n * Example `<mat-grid-list cols=\"3\" rowHeight=\"100px\">`\n * @docs-private\n */\nexport class FixedTileStyler extends TileStyler {\n\n  constructor(public fixedRowHeight: string) { super(); }\n\n  init(gutterSize: string, tracker: TileCoordinator, cols: number, direction: string) {\n    super.init(gutterSize, tracker, cols, direction);\n    this.fixedRowHeight = normalizeUnits(this.fixedRowHeight);\n\n    if (!cssCalcAllowedValue.test(this.fixedRowHeight)) {\n      throw Error(`Invalid value \"${this.fixedRowHeight}\" set as rowHeight.`);\n    }\n  }\n\n  setRowStyles(tile: MatGridTile, rowIndex: number): void {\n    tile._setStyle('top', this.getTilePosition(this.fixedRowHeight, rowIndex));\n    tile._setStyle('height', calc(this.getTileSize(this.fixedRowHeight, tile.rowspan)));\n  }\n\n  getComputedHeight(): [string, string] {\n    return [\n      'height', calc(`${this.getTileSpan(this.fixedRowHeight)} + ${this.getGutterSpan()}`)\n    ];\n  }\n\n  reset(list: MatGridList) {\n    list._setListStyle(['height', null]);\n\n    if (list._tiles) {\n      list._tiles.forEach(tile => {\n        tile._setStyle('top', null);\n        tile._setStyle('height', null);\n      });\n    }\n  }\n}\n\n\n/**\n * This type of styler is instantiated when the user passes in a width:height ratio\n * for the row height.  Example `<mat-grid-list cols=\"3\" rowHeight=\"3:1\">`\n * @docs-private\n */\nexport class RatioTileStyler extends TileStyler {\n\n  /** Ratio width:height given by user to determine row height. */\n  rowHeightRatio: number;\n  baseTileHeight: string;\n\n  constructor(value: string) {\n    super();\n    this._parseRatio(value);\n  }\n\n  setRowStyles(tile: MatGridTile, rowIndex: number, percentWidth: number,\n               gutterWidth: number): void {\n    let percentHeightPerTile = percentWidth / this.rowHeightRatio;\n    this.baseTileHeight = this.getBaseTileSize(percentHeightPerTile, gutterWidth);\n\n    // Use padding-top and margin-top to maintain the given aspect ratio, as\n    // a percentage-based value for these properties is applied versus the *width* of the\n    // containing block. See http://www.w3.org/TR/CSS2/box.html#margin-properties\n    tile._setStyle('marginTop', this.getTilePosition(this.baseTileHeight, rowIndex));\n    tile._setStyle('paddingTop', calc(this.getTileSize(this.baseTileHeight, tile.rowspan)));\n  }\n\n  getComputedHeight(): [string, string] {\n    return [\n      'paddingBottom', calc(`${this.getTileSpan(this.baseTileHeight)} + ${this.getGutterSpan()}`)\n    ];\n  }\n\n  reset(list: MatGridList) {\n    list._setListStyle(['paddingBottom', null]);\n\n    list._tiles.forEach(tile => {\n      tile._setStyle('marginTop', null);\n      tile._setStyle('paddingTop', null);\n    });\n  }\n\n  private _parseRatio(value: string): void {\n    const ratioParts = value.split(':');\n\n    if (ratioParts.length !== 2) {\n      throw Error(`mat-grid-list: invalid ratio given for row-height: \"${value}\"`);\n    }\n\n    this.rowHeightRatio = parseFloat(ratioParts[0]) / parseFloat(ratioParts[1]);\n  }\n}\n\n/**\n * This type of styler is instantiated when the user selects a \"fit\" row height mode.\n * In other words, the row height will reflect the total height of the container divided\n * by the number of rows.  Example `<mat-grid-list cols=\"3\" rowHeight=\"fit\">`\n *\n * @docs-private\n */\nexport class FitTileStyler extends TileStyler {\n  setRowStyles(tile: MatGridTile, rowIndex: number): void {\n    // Percent of the available vertical space that one row takes up.\n    let percentHeightPerTile = 100 / this._rowspan;\n\n    // Fraction of the horizontal gutter size that each column takes up.\n    let gutterHeightPerTile = (this._rows - 1) / this._rows;\n\n    // Base vertical size of a column.\n    let baseTileHeight = this.getBaseTileSize(percentHeightPerTile, gutterHeightPerTile);\n\n    tile._setStyle('top', this.getTilePosition(baseTileHeight, rowIndex));\n    tile._setStyle('height', calc(this.getTileSize(baseTileHeight, tile.rowspan)));\n  }\n\n  reset(list: MatGridList) {\n    if (list._tiles) {\n      list._tiles.forEach(tile => {\n        tile._setStyle('top', null);\n        tile._setStyle('height', null);\n      });\n    }\n  }\n}\n\n\n/** Wraps a CSS string in a calc function */\nfunction calc(exp: string): string { return `calc(${exp})`; }\n\n\n/** Appends pixels to a CSS string if no units are given. */\nfunction normalizeUnits(value: string): string {\n  return (value.match(/px|em|rem/)) ? value : value + 'px';\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ViewEncapsulation,\n  AfterContentChecked,\n  OnInit,\n  Input,\n  ContentChildren,\n  QueryList,\n  ElementRef,\n  Optional,\n  ChangeDetectionStrategy,\n} from '@angular/core';\nimport {MatGridTile} from './grid-tile';\nimport {TileCoordinator} from './tile-coordinator';\nimport {TileStyler, FitTileStyler, RatioTileStyler, FixedTileStyler} from './tile-styler';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceNumberProperty} from '@angular/cdk/coercion';\nimport {MAT_GRID_LIST, MatGridListBase} from './grid-list-base';\n\n\n// TODO(kara): Conditional (responsive) column count / row size.\n// TODO(kara): Re-layout on window resize / media change (debounced).\n// TODO(kara): gridTileHeader and gridTileFooter.\n\nconst MAT_FIT_MODE = 'fit';\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-grid-list',\n  exportAs: 'matGridList',\n  templateUrl: 'grid-list.html',\n  styleUrls: ['grid-list.css'],\n  host: {\n    'class': 'mat-grid-list',\n  },\n  providers: [{\n    provide: MAT_GRID_LIST,\n    useExisting: MatGridList\n  }],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatGridList implements MatGridListBase, OnInit, AfterContentChecked {\n  /** Number of columns being rendered. */\n  private _cols: number;\n\n  /** Used for determiningthe position of each tile in the grid. */\n  private _tileCoordinator: TileCoordinator;\n\n  /**\n   * Row height value passed in by user. This can be one of three types:\n   * - Number value (ex: \"100px\"):  sets a fixed row height to that value\n   * - Ratio value (ex: \"4:3\"): sets the row height based on width:height ratio\n   * - \"Fit\" mode (ex: \"fit\"): sets the row height to total height divided by number of rows\n   */\n  private _rowHeight: string;\n\n  /** The amount of space between tiles. This will be something like '5px' or '2em'. */\n  private _gutter: string = '1px';\n\n  /** Sets position and size styles for a tile */\n  private _tileStyler: TileStyler;\n\n  /** Query list of tiles that are being rendered. */\n  @ContentChildren(MatGridTile, {descendants: true}) _tiles: QueryList<MatGridTile>;\n\n  constructor(private _element: ElementRef<HTMLElement>,\n              @Optional() private _dir: Directionality) {}\n\n  /** Amount of columns in the grid list. */\n  @Input()\n  get cols(): number { return this._cols; }\n  set cols(value: number) {\n    this._cols = Math.max(1, Math.round(coerceNumberProperty(value)));\n  }\n\n  /** Size of the grid list's gutter in pixels. */\n  @Input()\n  get gutterSize(): string { return this._gutter; }\n  set gutterSize(value: string) { this._gutter = `${value == null ? '' : value}`; }\n\n  /** Set internal representation of row height from the user-provided value. */\n  @Input()\n  get rowHeight(): string | number { return this._rowHeight; }\n  set rowHeight(value: string | number) {\n    const newValue = `${value == null ? '' : value}`;\n\n    if (newValue !== this._rowHeight) {\n      this._rowHeight = newValue;\n      this._setTileStyler(this._rowHeight);\n    }\n  }\n\n  ngOnInit() {\n    this._checkCols();\n    this._checkRowHeight();\n  }\n\n  /**\n   * The layout calculation is fairly cheap if nothing changes, so there's little cost\n   * to run it frequently.\n   */\n  ngAfterContentChecked() {\n    this._layoutTiles();\n  }\n\n  /** Throw a friendly error if cols property is missing */\n  private _checkCols() {\n    if (!this.cols) {\n      throw Error(`mat-grid-list: must pass in number of columns. ` +\n                  `Example: <mat-grid-list cols=\"3\">`);\n    }\n  }\n\n  /** Default to equal width:height if rowHeight property is missing */\n  private _checkRowHeight(): void {\n    if (!this._rowHeight) {\n      this._setTileStyler('1:1');\n    }\n  }\n\n  /** Creates correct Tile Styler subtype based on rowHeight passed in by user */\n  private _setTileStyler(rowHeight: string): void {\n    if (this._tileStyler) {\n      this._tileStyler.reset(this);\n    }\n\n    if (rowHeight === MAT_FIT_MODE) {\n      this._tileStyler = new FitTileStyler();\n    } else if (rowHeight && rowHeight.indexOf(':') > -1) {\n      this._tileStyler = new RatioTileStyler(rowHeight);\n    } else {\n      this._tileStyler = new FixedTileStyler(rowHeight);\n    }\n  }\n\n  /** Computes and applies the size and position for all children grid tiles. */\n  private _layoutTiles(): void {\n    if (!this._tileCoordinator) {\n      this._tileCoordinator = new TileCoordinator();\n    }\n\n\n    const tracker = this._tileCoordinator;\n    const tiles = this._tiles.filter(tile => !tile._gridList || tile._gridList === this);\n    const direction = this._dir ? this._dir.value : 'ltr';\n\n    this._tileCoordinator.update(this.cols, tiles);\n    this._tileStyler.init(this.gutterSize, tracker, this.cols, direction);\n\n    tiles.forEach((tile, index) => {\n      const pos = tracker.positions[index];\n      this._tileStyler.setStyle(tile, pos.row, pos.col);\n    });\n\n    this._setListStyle(this._tileStyler.getComputedHeight());\n  }\n\n  /** Sets style on the main grid-list element, given the style name and value. */\n  _setListStyle(style: [string, string | null] | null): void {\n    if (style) {\n      (this._element.nativeElement.style as any)[style[0]] = style[1];\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatLineModule, MatCommonModule} from '@angular/material/core';\nimport {\n  MatGridTile, MatGridTileText, MatGridTileFooterCssMatStyler,\n  MatGridTileHeaderCssMatStyler, MatGridAvatarCssMatStyler\n} from './grid-tile';\nimport {MatGridList} from './grid-list';\n\n\n@NgModule({\n  imports: [MatLineModule, MatCommonModule],\n  exports: [\n    MatGridList,\n    MatGridTile,\n    MatGridTileText,\n    MatLineModule,\n    MatCommonModule,\n    MatGridTileHeaderCssMatStyler,\n    MatGridTileFooterCssMatStyler,\n    MatGridAvatarCssMatStyler\n  ],\n  declarations: [\n    MatGridList,\n    MatGridTile,\n    MatGridTileText,\n    MatGridTileHeaderCssMatStyler,\n    MatGridTileFooterCssMatStyler,\n    MatGridAvatarCssMatStyler\n  ],\n})\nexport class MatGridListModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {DOCUMENT} from '@angular/common';\nimport {HttpClient, HttpErrorResponse} from '@angular/common/http';\nimport {\n  Inject,\n  Injectable,\n  InjectionToken,\n  Optional,\n  SecurityContext,\n  SkipSelf,\n} from '@angular/core';\nimport {DomSanitizer, SafeResourceUrl, SafeHtml} from '@angular/platform-browser';\nimport {forkJoin, Observable, of as observableOf, throwError as observableThrow} from 'rxjs';\nimport {catchError, finalize, map, share, tap} from 'rxjs/operators';\n\n\n/**\n * Returns an exception to be thrown in the case when attempting to\n * load an icon with a name that cannot be found.\n * @docs-private\n */\nexport function getMatIconNameNotFoundError(iconName: string): Error {\n  return Error(`Unable to find icon with the name \"${iconName}\"`);\n}\n\n\n/**\n * Returns an exception to be thrown when the consumer attempts to use\n * `<mat-icon>` without including @angular/http.\n * @docs-private\n */\nexport function getMatIconNoHttpProviderError(): Error {\n  return Error('Could not find HttpClient provider for use with Angular Material icons. ' +\n               'Please include the HttpClientModule from @angular/common/http in your ' +\n               'app imports.');\n}\n\n\n/**\n * Returns an exception to be thrown when a URL couldn't be sanitized.\n * @param url URL that was attempted to be sanitized.\n * @docs-private\n */\nexport function getMatIconFailedToSanitizeUrlError(url: SafeResourceUrl): Error {\n  return Error(`The URL provided to MatIconRegistry was not trusted as a resource URL ` +\n               `via Angular's DomSanitizer. Attempted URL was \"${url}\".`);\n}\n\n/**\n * Returns an exception to be thrown when a HTML string couldn't be sanitized.\n * @param literal HTML that was attempted to be sanitized.\n * @docs-private\n */\nexport function getMatIconFailedToSanitizeLiteralError(literal: SafeHtml): Error {\n  return Error(`The literal provided to MatIconRegistry was not trusted as safe HTML by ` +\n               `Angular's DomSanitizer. Attempted literal was \"${literal}\".`);\n}\n\n\n/**\n * Configuration for an icon, including the URL and possibly the cached SVG element.\n * @docs-private\n */\nclass SvgIconConfig {\n  url: SafeResourceUrl | null;\n  svgElement: SVGElement | null;\n\n  constructor(url: SafeResourceUrl);\n  constructor(svgElement: SVGElement);\n  constructor(data: SafeResourceUrl | SVGElement) {\n    // Note that we can't use `instanceof SVGElement` here,\n    // because it'll break during server-side rendering.\n    if (!!(data as any).nodeName) {\n      this.svgElement = data as SVGElement;\n    } else {\n      this.url = data as SafeResourceUrl;\n    }\n  }\n}\n\n/**\n * Service to register and display icons used by the `<mat-icon>` component.\n * - Registers icon URLs by namespace and name.\n * - Registers icon set URLs by namespace.\n * - Registers aliases for CSS classes, for use with icon fonts.\n * - Loads icons from URLs and extracts individual icons from icon sets.\n */\n@Injectable({providedIn: 'root'})\nexport class MatIconRegistry {\n  private _document: Document;\n\n  /**\n   * URLs and cached SVG elements for individual icons. Keys are of the format \"[namespace]:[icon]\".\n   */\n  private _svgIconConfigs = new Map<string, SvgIconConfig>();\n\n  /**\n   * SvgIconConfig objects and cached SVG elements for icon sets, keyed by namespace.\n   * Multiple icon sets can be registered under the same namespace.\n   */\n  private _iconSetConfigs = new Map<string, SvgIconConfig[]>();\n\n  /** Cache for icons loaded by direct URLs. */\n  private _cachedIconsByUrl = new Map<string, SVGElement>();\n\n  /** In-progress icon fetches. Used to coalesce multiple requests to the same URL. */\n  private _inProgressUrlFetches = new Map<string, Observable<string>>();\n\n  /** Map from font identifiers to their CSS class names. Used for icon fonts. */\n  private _fontCssClassesByAlias = new Map<string, string>();\n\n  /**\n   * The CSS class to apply when an `<mat-icon>` component has no icon name, url, or font specified.\n   * The default 'material-icons' value assumes that the material icon font has been loaded as\n   * described at http://google.github.io/material-design-icons/#icon-font-for-the-web\n   */\n  private _defaultFontSetClass = 'material-icons';\n\n  constructor(\n    @Optional() private _httpClient: HttpClient,\n    private _sanitizer: DomSanitizer,\n    @Optional() @Inject(DOCUMENT) document: any) {\n      this._document = document;\n    }\n\n  /**\n   * Registers an icon by URL in the default namespace.\n   * @param iconName Name under which the icon should be registered.\n   * @param url\n   */\n  addSvgIcon(iconName: string, url: SafeResourceUrl): this {\n    return this.addSvgIconInNamespace('', iconName, url);\n  }\n\n  /**\n   * Registers an icon using an HTML string in the default namespace.\n   * @param iconName Name under which the icon should be registered.\n   * @param literal SVG source of the icon.\n   */\n  addSvgIconLiteral(iconName: string, literal: SafeHtml): this {\n    return this.addSvgIconLiteralInNamespace('', iconName, literal);\n  }\n\n  /**\n   * Registers an icon by URL in the specified namespace.\n   * @param namespace Namespace in which the icon should be registered.\n   * @param iconName Name under which the icon should be registered.\n   * @param url\n   */\n  addSvgIconInNamespace(namespace: string, iconName: string, url: SafeResourceUrl): this {\n    return this._addSvgIconConfig(namespace, iconName, new SvgIconConfig(url));\n  }\n\n  /**\n   * Registers an icon using an HTML string in the specified namespace.\n   * @param namespace Namespace in which the icon should be registered.\n   * @param iconName Name under which the icon should be registered.\n   * @param literal SVG source of the icon.\n   */\n  addSvgIconLiteralInNamespace(namespace: string, iconName: string, literal: SafeHtml): this {\n    const sanitizedLiteral = this._sanitizer.sanitize(SecurityContext.HTML, literal);\n\n    if (!sanitizedLiteral) {\n      throw getMatIconFailedToSanitizeLiteralError(literal);\n    }\n\n    const svgElement = this._createSvgElementForSingleIcon(sanitizedLiteral);\n    return this._addSvgIconConfig(namespace, iconName, new SvgIconConfig(svgElement));\n  }\n\n  /**\n   * Registers an icon set by URL in the default namespace.\n   * @param url\n   */\n  addSvgIconSet(url: SafeResourceUrl): this {\n    return this.addSvgIconSetInNamespace('', url);\n  }\n\n  /**\n   * Registers an icon set using an HTML string in the default namespace.\n   * @param literal SVG source of the icon set.\n   */\n  addSvgIconSetLiteral(literal: SafeHtml): this {\n    return this.addSvgIconSetLiteralInNamespace('', literal);\n  }\n\n  /**\n   * Registers an icon set by URL in the specified namespace.\n   * @param namespace Namespace in which to register the icon set.\n   * @param url\n   */\n  addSvgIconSetInNamespace(namespace: string, url: SafeResourceUrl): this {\n    return this._addSvgIconSetConfig(namespace, new SvgIconConfig(url));\n  }\n\n  /**\n   * Registers an icon set using an HTML string in the specified namespace.\n   * @param namespace Namespace in which to register the icon set.\n   * @param literal SVG source of the icon set.\n   */\n  addSvgIconSetLiteralInNamespace(namespace: string, literal: SafeHtml): this {\n    const sanitizedLiteral = this._sanitizer.sanitize(SecurityContext.HTML, literal);\n\n    if (!sanitizedLiteral) {\n      throw getMatIconFailedToSanitizeLiteralError(literal);\n    }\n\n    const svgElement = this._svgElementFromString(sanitizedLiteral);\n    return this._addSvgIconSetConfig(namespace, new SvgIconConfig(svgElement));\n  }\n\n  /**\n   * Defines an alias for a CSS class name to be used for icon fonts. Creating an matIcon\n   * component with the alias as the fontSet input will cause the class name to be applied\n   * to the `<mat-icon>` element.\n   *\n   * @param alias Alias for the font.\n   * @param className Class name override to be used instead of the alias.\n   */\n  registerFontClassAlias(alias: string, className: string = alias): this {\n    this._fontCssClassesByAlias.set(alias, className);\n    return this;\n  }\n\n  /**\n   * Returns the CSS class name associated with the alias by a previous call to\n   * registerFontClassAlias. If no CSS class has been associated, returns the alias unmodified.\n   */\n  classNameForFontAlias(alias: string): string {\n    return this._fontCssClassesByAlias.get(alias) || alias;\n  }\n\n  /**\n   * Sets the CSS class name to be used for icon fonts when an `<mat-icon>` component does not\n   * have a fontSet input value, and is not loading an icon by name or URL.\n   *\n   * @param className\n   */\n  setDefaultFontSetClass(className: string): this {\n    this._defaultFontSetClass = className;\n    return this;\n  }\n\n  /**\n   * Returns the CSS class name to be used for icon fonts when an `<mat-icon>` component does not\n   * have a fontSet input value, and is not loading an icon by name or URL.\n   */\n  getDefaultFontSetClass(): string {\n    return this._defaultFontSetClass;\n  }\n\n  /**\n   * Returns an Observable that produces the icon (as an `<svg>` DOM element) from the given URL.\n   * The response from the URL may be cached so this will not always cause an HTTP request, but\n   * the produced element will always be a new copy of the originally fetched icon. (That is,\n   * it will not contain any modifications made to elements previously returned).\n   *\n   * @param safeUrl URL from which to fetch the SVG icon.\n   */\n  getSvgIconFromUrl(safeUrl: SafeResourceUrl): Observable<SVGElement> {\n    const url = this._sanitizer.sanitize(SecurityContext.RESOURCE_URL, safeUrl);\n\n    if (!url) {\n      throw getMatIconFailedToSanitizeUrlError(safeUrl);\n    }\n\n    const cachedIcon = this._cachedIconsByUrl.get(url);\n\n    if (cachedIcon) {\n      return observableOf(cloneSvg(cachedIcon));\n    }\n\n    return this._loadSvgIconFromConfig(new SvgIconConfig(safeUrl)).pipe(\n      tap(svg => this._cachedIconsByUrl.set(url!, svg)),\n      map(svg => cloneSvg(svg)),\n    );\n  }\n\n  /**\n   * Returns an Observable that produces the icon (as an `<svg>` DOM element) with the given name\n   * and namespace. The icon must have been previously registered with addIcon or addIconSet;\n   * if not, the Observable will throw an error.\n   *\n   * @param name Name of the icon to be retrieved.\n   * @param namespace Namespace in which to look for the icon.\n   */\n  getNamedSvgIcon(name: string, namespace: string = ''): Observable<SVGElement> {\n    // Return (copy of) cached icon if possible.\n    const key = iconKey(namespace, name);\n    const config = this._svgIconConfigs.get(key);\n\n    if (config) {\n      return this._getSvgFromConfig(config);\n    }\n\n    // See if we have any icon sets registered for the namespace.\n    const iconSetConfigs = this._iconSetConfigs.get(namespace);\n\n    if (iconSetConfigs) {\n      return this._getSvgFromIconSetConfigs(name, iconSetConfigs);\n    }\n\n    return observableThrow(getMatIconNameNotFoundError(key));\n  }\n\n  /**\n   * Returns the cached icon for a SvgIconConfig if available, or fetches it from its URL if not.\n   */\n  private _getSvgFromConfig(config: SvgIconConfig): Observable<SVGElement> {\n    if (config.svgElement) {\n      // We already have the SVG element for this icon, return a copy.\n      return observableOf(cloneSvg(config.svgElement));\n    } else {\n      // Fetch the icon from the config's URL, cache it, and return a copy.\n      return this._loadSvgIconFromConfig(config).pipe(\n        tap(svg => config.svgElement = svg),\n        map(svg => cloneSvg(svg)),\n      );\n    }\n  }\n\n  /**\n   * Attempts to find an icon with the specified name in any of the SVG icon sets.\n   * First searches the available cached icons for a nested element with a matching name, and\n   * if found copies the element to a new `<svg>` element. If not found, fetches all icon sets\n   * that have not been cached, and searches again after all fetches are completed.\n   * The returned Observable produces the SVG element if possible, and throws\n   * an error if no icon with the specified name can be found.\n   */\n  private _getSvgFromIconSetConfigs(name: string, iconSetConfigs: SvgIconConfig[]):\n      Observable<SVGElement> {\n    // For all the icon set SVG elements we've fetched, see if any contain an icon with the\n    // requested name.\n    const namedIcon = this._extractIconWithNameFromAnySet(name, iconSetConfigs);\n\n    if (namedIcon) {\n      // We could cache namedIcon in _svgIconConfigs, but since we have to make a copy every\n      // time anyway, there's probably not much advantage compared to just always extracting\n      // it from the icon set.\n      return observableOf(namedIcon);\n    }\n\n    // Not found in any cached icon sets. If there are icon sets with URLs that we haven't\n    // fetched, fetch them now and look for iconName in the results.\n    const iconSetFetchRequests: Observable<SVGElement | null>[] = iconSetConfigs\n      .filter(iconSetConfig => !iconSetConfig.svgElement)\n      .map(iconSetConfig => {\n        return this._loadSvgIconSetFromConfig(iconSetConfig).pipe(\n          catchError((err: HttpErrorResponse): Observable<SVGElement | null> => {\n            const url = this._sanitizer.sanitize(SecurityContext.RESOURCE_URL, iconSetConfig.url);\n\n            // Swallow errors fetching individual URLs so the\n            // combined Observable won't necessarily fail.\n            console.error(`Loading icon set URL: ${url} failed: ${err.message}`);\n            return observableOf(null);\n          })\n        );\n      });\n\n    // Fetch all the icon set URLs. When the requests complete, every IconSet should have a\n    // cached SVG element (unless the request failed), and we can check again for the icon.\n    return forkJoin(iconSetFetchRequests).pipe(map(() => {\n      const foundIcon = this._extractIconWithNameFromAnySet(name, iconSetConfigs);\n\n      if (!foundIcon) {\n        throw getMatIconNameNotFoundError(name);\n      }\n\n      return foundIcon;\n    }));\n  }\n\n  /**\n   * Searches the cached SVG elements for the given icon sets for a nested icon element whose \"id\"\n   * tag matches the specified name. If found, copies the nested element to a new SVG element and\n   * returns it. Returns null if no matching element is found.\n   */\n  private _extractIconWithNameFromAnySet(iconName: string, iconSetConfigs: SvgIconConfig[]):\n      SVGElement | null {\n    // Iterate backwards, so icon sets added later have precedence.\n    for (let i = iconSetConfigs.length - 1; i >= 0; i--) {\n      const config = iconSetConfigs[i];\n      if (config.svgElement) {\n        const foundIcon = this._extractSvgIconFromSet(config.svgElement, iconName);\n        if (foundIcon) {\n          return foundIcon;\n        }\n      }\n    }\n    return null;\n  }\n\n  /**\n   * Loads the content of the icon URL specified in the SvgIconConfig and creates an SVG element\n   * from it.\n   */\n  private _loadSvgIconFromConfig(config: SvgIconConfig): Observable<SVGElement> {\n    return this._fetchUrl(config.url)\n        .pipe(map(svgText => this._createSvgElementForSingleIcon(svgText)));\n  }\n\n  /**\n   * Loads the content of the icon set URL specified in the SvgIconConfig and creates an SVG element\n   * from it.\n   */\n  private _loadSvgIconSetFromConfig(config: SvgIconConfig): Observable<SVGElement> {\n    // If the SVG for this icon set has already been parsed, do nothing.\n    if (config.svgElement) {\n      return observableOf(config.svgElement);\n    }\n\n    return this._fetchUrl(config.url).pipe(map(svgText => {\n      // It is possible that the icon set was parsed and cached by an earlier request, so parsing\n      // only needs to occur if the cache is yet unset.\n      if (!config.svgElement) {\n        config.svgElement = this._svgElementFromString(svgText);\n      }\n\n      return config.svgElement;\n    }));\n  }\n\n  /**\n   * Creates a DOM element from the given SVG string, and adds default attributes.\n   */\n  private _createSvgElementForSingleIcon(responseText: string): SVGElement {\n    const svg = this._svgElementFromString(responseText);\n    this._setSvgAttributes(svg);\n    return svg;\n  }\n\n  /**\n   * Searches the cached element of the given SvgIconConfig for a nested icon element whose \"id\"\n   * tag matches the specified name. If found, copies the nested element to a new SVG element and\n   * returns it. Returns null if no matching element is found.\n   */\n  private _extractSvgIconFromSet(iconSet: SVGElement, iconName: string): SVGElement | null {\n    const iconSource = iconSet.querySelector('#' + iconName);\n\n    if (!iconSource) {\n      return null;\n    }\n\n    // Clone the element and remove the ID to prevent multiple elements from being added\n    // to the page with the same ID.\n    const iconElement = iconSource.cloneNode(true) as Element;\n    iconElement.removeAttribute('id');\n\n    // If the icon node is itself an <svg> node, clone and return it directly. If not, set it as\n    // the content of a new <svg> node.\n    if (iconElement.nodeName.toLowerCase() === 'svg') {\n      return this._setSvgAttributes(iconElement as SVGElement);\n    }\n\n    // If the node is a <symbol>, it won't be rendered so we have to convert it into <svg>. Note\n    // that the same could be achieved by referring to it via <use href=\"#id\">, however the <use>\n    // tag is problematic on Firefox, because it needs to include the current page path.\n    if (iconElement.nodeName.toLowerCase() === 'symbol') {\n      return this._setSvgAttributes(this._toSvgElement(iconElement));\n    }\n\n    // createElement('SVG') doesn't work as expected; the DOM ends up with\n    // the correct nodes, but the SVG content doesn't render. Instead we\n    // have to create an empty SVG node using innerHTML and append its content.\n    // Elements created using DOMParser.parseFromString have the same problem.\n    // http://stackoverflow.com/questions/23003278/svg-innerhtml-in-firefox-can-not-display\n    const svg = this._svgElementFromString('<svg></svg>');\n    // Clone the node so we don't remove it from the parent icon set element.\n    svg.appendChild(iconElement);\n\n    return this._setSvgAttributes(svg);\n  }\n\n  /**\n   * Creates a DOM element from the given SVG string.\n   */\n  private _svgElementFromString(str: string): SVGElement {\n    const div = this._document.createElement('DIV');\n    div.innerHTML = str;\n    const svg = div.querySelector('svg') as SVGElement;\n\n    if (!svg) {\n      throw Error('<svg> tag not found');\n    }\n\n    return svg;\n  }\n\n  /**\n   * Converts an element into an SVG node by cloning all of its children.\n   */\n  private _toSvgElement(element: Element): SVGElement {\n    let svg = this._svgElementFromString('<svg></svg>');\n\n    for (let i = 0; i < element.childNodes.length; i++) {\n      if (element.childNodes[i].nodeType === this._document.ELEMENT_NODE) {\n        svg.appendChild(element.childNodes[i].cloneNode(true));\n      }\n    }\n\n    return svg;\n  }\n\n  /**\n   * Sets the default attributes for an SVG element to be used as an icon.\n   */\n  private _setSvgAttributes(svg: SVGElement): SVGElement {\n    svg.setAttribute('fit', '');\n    svg.setAttribute('height', '100%');\n    svg.setAttribute('width', '100%');\n    svg.setAttribute('preserveAspectRatio', 'xMidYMid meet');\n    svg.setAttribute('focusable', 'false'); // Disable IE11 default behavior to make SVGs focusable.\n    return svg;\n  }\n\n  /**\n   * Returns an Observable which produces the string contents of the given URL. Results may be\n   * cached, so future calls with the same URL may not cause another HTTP request.\n   */\n  private _fetchUrl(safeUrl: SafeResourceUrl | null): Observable<string> {\n    if (!this._httpClient) {\n      throw getMatIconNoHttpProviderError();\n    }\n\n    if (safeUrl == null) {\n      throw Error(`Cannot fetch icon from URL \"${safeUrl}\".`);\n    }\n\n    const url = this._sanitizer.sanitize(SecurityContext.RESOURCE_URL, safeUrl);\n\n    if (!url) {\n      throw getMatIconFailedToSanitizeUrlError(safeUrl);\n    }\n\n    // Store in-progress fetches to avoid sending a duplicate request for a URL when there is\n    // already a request in progress for that URL. It's necessary to call share() on the\n    // Observable returned by http.get() so that multiple subscribers don't cause multiple XHRs.\n    const inProgressFetch = this._inProgressUrlFetches.get(url);\n\n    if (inProgressFetch) {\n      return inProgressFetch;\n    }\n\n    // TODO(jelbourn): for some reason, the `finalize` operator \"loses\" the generic type on the\n    // Observable. Figure out why and fix it.\n    const req = this._httpClient.get(url, {responseType: 'text'}).pipe(\n      finalize(() => this._inProgressUrlFetches.delete(url)),\n      share(),\n    );\n\n    this._inProgressUrlFetches.set(url, req);\n    return req;\n  }\n\n  /**\n   * Registers an icon config by name in the specified namespace.\n   * @param namespace Namespace in which to register the icon config.\n   * @param iconName Name under which to register the config.\n   * @param config Config to be registered.\n   */\n  private _addSvgIconConfig(namespace: string, iconName: string, config: SvgIconConfig): this {\n    this._svgIconConfigs.set(iconKey(namespace, iconName), config);\n    return this;\n  }\n\n  /**\n   * Registers an icon set config in the specified namespace.\n   * @param namespace Namespace in which to register the icon config.\n   * @param config Config to be registered.\n   */\n  private _addSvgIconSetConfig(namespace: string, config: SvgIconConfig): this {\n    const configNamespace = this._iconSetConfigs.get(namespace);\n\n    if (configNamespace) {\n      configNamespace.push(config);\n    } else {\n      this._iconSetConfigs.set(namespace, [config]);\n    }\n\n    return this;\n  }\n}\n\n/** @docs-private */\nexport function ICON_REGISTRY_PROVIDER_FACTORY(\n  parentRegistry: MatIconRegistry,\n  httpClient: HttpClient,\n  sanitizer: DomSanitizer,\n  document?: any) {\n  return parentRegistry || new MatIconRegistry(httpClient, sanitizer, document);\n}\n\n/** @docs-private */\nexport const ICON_REGISTRY_PROVIDER = {\n  // If there is already an MatIconRegistry available, use that. Otherwise, provide a new one.\n  provide: MatIconRegistry,\n  deps: [\n    [new Optional(), new SkipSelf(), MatIconRegistry],\n    [new Optional(), HttpClient],\n    DomSanitizer,\n    [new Optional(), DOCUMENT as InjectionToken<any>],\n  ],\n  useFactory: ICON_REGISTRY_PROVIDER_FACTORY,\n};\n\n/** Clones an SVGElement while preserving type information. */\nfunction cloneSvg(svg: SVGElement): SVGElement {\n  return svg.cloneNode(true) as SVGElement;\n}\n\n/** Returns the cache key to use for an icon namespace and name. */\nfunction iconKey(namespace: string, name: string) {\n  return namespace + ':' + name;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {take} from 'rxjs/operators';\nimport {\n  Attribute,\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  Input,\n  OnChanges,\n  OnInit,\n  SimpleChanges,\n  ViewEncapsulation,\n  Optional,\n  InjectionToken,\n  inject,\n  Inject,\n  OnDestroy,\n  AfterViewChecked,\n} from '@angular/core';\nimport {DOCUMENT} from '@angular/common';\nimport {CanColor, CanColorCtor, mixinColor} from '@angular/material/core';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {MatIconRegistry} from './icon-registry';\n\n\n// Boilerplate for applying mixins to MatIcon.\n/** @docs-private */\nexport class MatIconBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatIconMixinBase: CanColorCtor & typeof MatIconBase =\n    mixinColor(MatIconBase);\n\n/**\n * Injection token used to provide the current location to `MatIcon`.\n * Used to handle server-side rendering and to stub out during unit tests.\n * @docs-private\n */\nexport const MAT_ICON_LOCATION = new InjectionToken<MatIconLocation>('mat-icon-location', {\n  providedIn: 'root',\n  factory: MAT_ICON_LOCATION_FACTORY\n});\n\n/**\n * Stubbed out location for `MatIcon`.\n * @docs-private\n */\nexport interface MatIconLocation {\n  getPathname: () => string;\n}\n\n/** @docs-private */\nexport function MAT_ICON_LOCATION_FACTORY(): MatIconLocation {\n  const _document = inject(DOCUMENT);\n  const _location = _document ? _document.location : null;\n\n  return {\n    // Note that this needs to be a function, rather than a property, because Angular\n    // will only resolve it once, but we want the current path on each call.\n    getPathname: () => _location ? (_location.pathname + _location.search) : ''\n  };\n}\n\n\n/** SVG attributes that accept a FuncIRI (e.g. `url(<something>)`). */\nconst funcIriAttributes = [\n  'clip-path',\n  'color-profile',\n  'src',\n  'cursor',\n  'fill',\n  'filter',\n  'marker',\n  'marker-start',\n  'marker-mid',\n  'marker-end',\n  'mask',\n  'stroke'\n];\n\n/** Selector that can be used to find all elements that are using a `FuncIRI`. */\nconst funcIriAttributeSelector = funcIriAttributes.map(attr => `[${attr}]`).join(', ');\n\n/** Regex that can be used to extract the id out of a FuncIRI. */\nconst funcIriPattern = /^url\\(['\"]?#(.*?)['\"]?\\)$/;\n\n/**\n * Component to display an icon. It can be used in the following ways:\n *\n * - Specify the svgIcon input to load an SVG icon from a URL previously registered with the\n *   addSvgIcon, addSvgIconInNamespace, addSvgIconSet, or addSvgIconSetInNamespace methods of\n *   MatIconRegistry. If the svgIcon value contains a colon it is assumed to be in the format\n *   \"[namespace]:[name]\", if not the value will be the name of an icon in the default namespace.\n *   Examples:\n *     `<mat-icon svgIcon=\"left-arrow\"></mat-icon>\n *     <mat-icon svgIcon=\"animals:cat\"></mat-icon>`\n *\n * - Use a font ligature as an icon by putting the ligature text in the content of the `<mat-icon>`\n *   component. By default the Material icons font is used as described at\n *   http://google.github.io/material-design-icons/#icon-font-for-the-web. You can specify an\n *   alternate font by setting the fontSet input to either the CSS class to apply to use the\n *   desired font, or to an alias previously registered with MatIconRegistry.registerFontClassAlias.\n *   Examples:\n *     `<mat-icon>home</mat-icon>\n *     <mat-icon fontSet=\"myfont\">sun</mat-icon>`\n *\n * - Specify a font glyph to be included via CSS rules by setting the fontSet input to specify the\n *   font, and the fontIcon input to specify the icon. Typically the fontIcon will specify a\n *   CSS class which causes the glyph to be displayed via a :before selector, as in\n *   https://fortawesome.github.io/Font-Awesome/examples/\n *   Example:\n *     `<mat-icon fontSet=\"fa\" fontIcon=\"alarm\"></mat-icon>`\n */\n@Component({\n  moduleId: module.id,\n  template: '<ng-content></ng-content>',\n  selector: 'mat-icon',\n  exportAs: 'matIcon',\n  styleUrls: ['icon.css'],\n  inputs: ['color'],\n  host: {\n    'role': 'img',\n    'class': 'mat-icon',\n    '[class.mat-icon-inline]': 'inline',\n  },\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatIcon extends _MatIconMixinBase implements OnChanges, OnInit, AfterViewChecked,\n  CanColor, OnDestroy {\n\n  /**\n   * Whether the icon should be inlined, automatically sizing the icon to match the font size of\n   * the element the icon is contained in.\n   */\n  @Input()\n  get inline(): boolean {\n    return this._inline;\n  }\n  set inline(inline: boolean) {\n    this._inline = coerceBooleanProperty(inline);\n  }\n  private _inline: boolean = false;\n\n  /** Name of the icon in the SVG icon set. */\n  @Input() svgIcon: string;\n\n  /** Font set that the icon is a part of. */\n  @Input()\n  get fontSet(): string { return this._fontSet; }\n  set fontSet(value: string) {\n    this._fontSet = this._cleanupFontValue(value);\n  }\n  private _fontSet: string;\n\n  /** Name of an icon within a font set. */\n  @Input()\n  get fontIcon(): string { return this._fontIcon; }\n  set fontIcon(value: string) {\n    this._fontIcon = this._cleanupFontValue(value);\n  }\n  private _fontIcon: string;\n\n  private _previousFontSetClass: string;\n  private _previousFontIconClass: string;\n\n  /** Keeps track of the current page path. */\n  private _previousPath?: string;\n\n  /** Keeps track of the elements and attributes that we've prefixed with the current path. */\n  private _elementsWithExternalReferences?: Map<Element, {name: string, value: string}[]>;\n\n  constructor(\n      elementRef: ElementRef<HTMLElement>,\n      private _iconRegistry: MatIconRegistry,\n      @Attribute('aria-hidden') ariaHidden: string,\n      /**\n       * @deprecated `location` parameter to be made required.\n       * @breaking-change 8.0.0\n       */\n      @Optional() @Inject(MAT_ICON_LOCATION) private _location?: MatIconLocation) {\n    super(elementRef);\n\n    // If the user has not explicitly set aria-hidden, mark the icon as hidden, as this is\n    // the right thing to do for the majority of icon use-cases.\n    if (!ariaHidden) {\n      elementRef.nativeElement.setAttribute('aria-hidden', 'true');\n    }\n  }\n\n  /**\n   * Splits an svgIcon binding value into its icon set and icon name components.\n   * Returns a 2-element array of [(icon set), (icon name)].\n   * The separator for the two fields is ':'. If there is no separator, an empty\n   * string is returned for the icon set and the entire value is returned for\n   * the icon name. If the argument is falsy, returns an array of two empty strings.\n   * Throws an error if the name contains two or more ':' separators.\n   * Examples:\n   *   `'social:cake' -> ['social', 'cake']\n   *   'penguin' -> ['', 'penguin']\n   *   null -> ['', '']\n   *   'a:b:c' -> (throws Error)`\n   */\n  private _splitIconName(iconName: string): [string, string] {\n    if (!iconName) {\n      return ['', ''];\n    }\n    const parts = iconName.split(':');\n    switch (parts.length) {\n      case 1: return ['', parts[0]]; // Use default namespace.\n      case 2: return <[string, string]>parts;\n      default: throw Error(`Invalid icon name: \"${iconName}\"`);\n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    // Only update the inline SVG icon if the inputs changed, to avoid unnecessary DOM operations.\n    if (changes.svgIcon) {\n      if (this.svgIcon) {\n        const [namespace, iconName] = this._splitIconName(this.svgIcon);\n\n        this._iconRegistry.getNamedSvgIcon(iconName, namespace).pipe(take(1)).subscribe(\n          svg => this._setSvgElement(svg),\n          (err: Error) => console.log(`Error retrieving icon: ${err.message}`)\n        );\n      } else {\n        this._clearSvgElement();\n      }\n    }\n\n    if (this._usingFontIcon()) {\n      this._updateFontIconClasses();\n    }\n  }\n\n  ngOnInit() {\n    // Update font classes because ngOnChanges won't be called if none of the inputs are present,\n    // e.g. <mat-icon>arrow</mat-icon> In this case we need to add a CSS class for the default font.\n    if (this._usingFontIcon()) {\n      this._updateFontIconClasses();\n    }\n  }\n\n  ngAfterViewChecked() {\n    const cachedElements = this._elementsWithExternalReferences;\n\n    if (cachedElements && this._location && cachedElements.size) {\n      const newPath = this._location.getPathname();\n\n      // We need to check whether the URL has changed on each change detection since\n      // the browser doesn't have an API that will let us react on link clicks and\n      // we can't depend on the Angular router. The references need to be updated,\n      // because while most browsers don't care whether the URL is correct after\n      // the first render, Safari will break if the user navigates to a different\n      // page and the SVG isn't re-rendered.\n      if (newPath !== this._previousPath) {\n        this._previousPath = newPath;\n        this._prependPathToReferences(newPath);\n      }\n    }\n  }\n\n  ngOnDestroy() {\n    if (this._elementsWithExternalReferences) {\n      this._elementsWithExternalReferences.clear();\n    }\n  }\n\n  private _usingFontIcon(): boolean {\n    return !this.svgIcon;\n  }\n\n  private _setSvgElement(svg: SVGElement) {\n    this._clearSvgElement();\n\n    // Workaround for IE11 and Edge ignoring `style` tags inside dynamically-created SVGs.\n    // See: https://developer.microsoft.com/en-us/microsoft-edge/platform/issues/10898469/\n    // Do this before inserting the element into the DOM, in order to avoid a style recalculation.\n    const styleTags = svg.querySelectorAll('style') as NodeListOf<HTMLStyleElement>;\n\n    for (let i = 0; i < styleTags.length; i++) {\n      styleTags[i].textContent += ' ';\n    }\n\n    // Note: we do this fix here, rather than the icon registry, because the\n    // references have to point to the URL at the time that the icon was created.\n    if (this._location) {\n      const path = this._location.getPathname();\n      this._previousPath = path;\n      this._cacheChildrenWithExternalReferences(svg);\n      this._prependPathToReferences(path);\n    }\n\n    this._elementRef.nativeElement.appendChild(svg);\n  }\n\n  private _clearSvgElement() {\n    const layoutElement: HTMLElement = this._elementRef.nativeElement;\n    let childCount = layoutElement.childNodes.length;\n\n    if (this._elementsWithExternalReferences) {\n      this._elementsWithExternalReferences.clear();\n    }\n\n    // Remove existing non-element child nodes and SVGs, and add the new SVG element. Note that\n    // we can't use innerHTML, because IE will throw if the element has a data binding.\n    while (childCount--) {\n      const child = layoutElement.childNodes[childCount];\n\n      // 1 corresponds to Node.ELEMENT_NODE. We remove all non-element nodes in order to get rid\n      // of any loose text nodes, as well as any SVG elements in order to remove any old icons.\n      if (child.nodeType !== 1 || child.nodeName.toLowerCase() === 'svg') {\n        layoutElement.removeChild(child);\n      }\n    }\n  }\n\n  private _updateFontIconClasses() {\n    if (!this._usingFontIcon()) {\n      return;\n    }\n\n    const elem: HTMLElement = this._elementRef.nativeElement;\n    const fontSetClass = this.fontSet ?\n        this._iconRegistry.classNameForFontAlias(this.fontSet) :\n        this._iconRegistry.getDefaultFontSetClass();\n\n    if (fontSetClass != this._previousFontSetClass) {\n      if (this._previousFontSetClass) {\n        elem.classList.remove(this._previousFontSetClass);\n      }\n      if (fontSetClass) {\n        elem.classList.add(fontSetClass);\n      }\n      this._previousFontSetClass = fontSetClass;\n    }\n\n    if (this.fontIcon != this._previousFontIconClass) {\n      if (this._previousFontIconClass) {\n        elem.classList.remove(this._previousFontIconClass);\n      }\n      if (this.fontIcon) {\n        elem.classList.add(this.fontIcon);\n      }\n      this._previousFontIconClass = this.fontIcon;\n    }\n  }\n\n  /**\n   * Cleans up a value to be used as a fontIcon or fontSet.\n   * Since the value ends up being assigned as a CSS class, we\n   * have to trim the value and omit space-separated values.\n   */\n  private _cleanupFontValue(value: string) {\n    return typeof value === 'string' ? value.trim().split(' ')[0] : value;\n  }\n\n  /**\n   * Prepends the current path to all elements that have an attribute pointing to a `FuncIRI`\n   * reference. This is required because WebKit browsers require references to be prefixed with\n   * the current path, if the page has a `base` tag.\n   */\n  private _prependPathToReferences(path: string) {\n    const elements = this._elementsWithExternalReferences;\n\n    if (elements) {\n      elements.forEach((attrs, element) => {\n        attrs.forEach(attr => {\n          element.setAttribute(attr.name, `url('${path}#${attr.value}')`);\n        });\n      });\n    }\n  }\n\n  /**\n   * Caches the children of an SVG element that have `url()`\n   * references that we need to prefix with the current path.\n   */\n  private _cacheChildrenWithExternalReferences(element: SVGElement) {\n    const elementsWithFuncIri = element.querySelectorAll(funcIriAttributeSelector);\n    const elements = this._elementsWithExternalReferences =\n        this._elementsWithExternalReferences || new Map();\n\n    for (let i = 0; i < elementsWithFuncIri.length; i++) {\n      funcIriAttributes.forEach(attr => {\n        const elementWithReference = elementsWithFuncIri[i];\n        const value = elementWithReference.getAttribute(attr);\n        const match = value ? value.match(funcIriPattern) : null;\n\n        if (match) {\n          let attributes = elements.get(elementWithReference);\n\n          if (!attributes) {\n            attributes = [];\n            elements.set(elementWithReference, attributes);\n          }\n\n          attributes!.push({name: attr, value: match[1]});\n        }\n      });\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatIcon} from './icon';\n\n\n@NgModule({\n  imports: [MatCommonModule],\n  exports: [MatIcon, MatCommonModule],\n  declarations: [MatIcon],\n})\nexport class MatIconModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {ESCAPE, UP_ARROW} from '@angular/cdk/keycodes';\nimport {\n  Overlay,\n  OverlayConfig,\n  OverlayRef,\n  PositionStrategy,\n  ScrollStrategy,\n} from '@angular/cdk/overlay';\nimport {ComponentPortal, ComponentType} from '@angular/cdk/portal';\nimport {DOCUMENT} from '@angular/common';\nimport {\n  AfterViewInit,\n  ChangeDetectionStrategy,\n  Component,\n  ComponentRef,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  Output,\n  ViewChild,\n  ViewContainerRef,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {\n  CanColor,\n  CanColorCtor,\n  DateAdapter,\n  mixinColor,\n  ThemePalette,\n} from '@angular/material/core';\nimport {MatDialog, MatDialogRef} from '@angular/material/dialog';\nimport {merge, Subject, Subscription} from 'rxjs';\nimport {filter, take} from 'rxjs/operators';\nimport {MatCalendar} from './calendar';\nimport {matDatepickerAnimations} from './datepicker-animations';\nimport {createMissingDateImplError} from './datepicker-errors';\nimport {MatDatepickerInput} from './datepicker-input';\n\n/** Used to generate a unique ID for each datepicker instance. */\nlet datepickerUid = 0;\n\n/** Injection token that determines the scroll handling while the calendar is open. */\nexport const MAT_DATEPICKER_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mat-datepicker-scroll-strategy');\n\n/** @docs-private */\nexport function MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY(overlay: Overlay): () => ScrollStrategy {\n  return () => overlay.scrollStrategies.reposition();\n}\n\n/** @docs-private */\nexport const MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY_PROVIDER = {\n  provide: MAT_DATEPICKER_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY,\n};\n\n// Boilerplate for applying mixins to MatDatepickerContent.\n/** @docs-private */\nexport class MatDatepickerContentBase {\n  constructor(public _elementRef: ElementRef) { }\n}\nexport const _MatDatepickerContentMixinBase: CanColorCtor & typeof MatDatepickerContentBase =\n    mixinColor(MatDatepickerContentBase);\n\n/**\n * Component used as the content for the datepicker dialog and popup. We use this instead of using\n * MatCalendar directly as the content so we can control the initial focus. This also gives us a\n * place to put additional features of the popup that are not part of the calendar itself in the\n * future. (e.g. confirmation buttons).\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-datepicker-content',\n  templateUrl: 'datepicker-content.html',\n  styleUrls: ['datepicker-content.css'],\n  host: {\n    'class': 'mat-datepicker-content',\n    '[@transformPanel]': '\"enter\"',\n    '[class.mat-datepicker-content-touch]': 'datepicker.touchUi',\n  },\n  animations: [\n    matDatepickerAnimations.transformPanel,\n    matDatepickerAnimations.fadeInCalendar,\n  ],\n  exportAs: 'matDatepickerContent',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  inputs: ['color'],\n})\nexport class MatDatepickerContent<D> extends _MatDatepickerContentMixinBase\n  implements AfterViewInit, CanColor {\n\n  /** Reference to the internal calendar component. */\n  @ViewChild(MatCalendar) _calendar: MatCalendar<D>;\n\n  /** Reference to the datepicker that created the overlay. */\n  datepicker: MatDatepicker<D>;\n\n  /** Whether the datepicker is above or below the input. */\n  _isAbove: boolean;\n\n  constructor(elementRef: ElementRef) {\n    super(elementRef);\n  }\n\n  ngAfterViewInit() {\n    this._calendar.focusActiveCell();\n  }\n}\n\n\n// TODO(mmalerba): We use a component instead of a directive here so the user can use implicit\n// template reference variables (e.g. #d vs #d=\"matDatepicker\"). We can change this to a directive\n// if angular adds support for `exportAs: '$implicit'` on directives.\n/** Component responsible for managing the datepicker popup/dialog. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-datepicker',\n  template: '',\n  exportAs: 'matDatepicker',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatDatepicker<D> implements OnDestroy, CanColor {\n  private _scrollStrategy: () => ScrollStrategy;\n\n  /** An input indicating the type of the custom header component for the calendar, if set. */\n  @Input() calendarHeaderComponent: ComponentType<any>;\n\n  /** The date to open the calendar to initially. */\n  @Input()\n  get startAt(): D | null {\n    // If an explicit startAt is set we start there, otherwise we start at whatever the currently\n    // selected value is.\n    return this._startAt || (this._datepickerInput ? this._datepickerInput.value : null);\n  }\n  set startAt(value: D | null) {\n    this._startAt = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _startAt: D | null;\n\n  /** The view that the calendar should start in. */\n  @Input() startView: 'month' | 'year' | 'multi-year' = 'month';\n\n  /** Color palette to use on the datepicker's calendar. */\n  @Input()\n  get color(): ThemePalette {\n    return this._color ||\n        (this._datepickerInput ? this._datepickerInput._getThemePalette() : undefined);\n  }\n  set color(value: ThemePalette) {\n    this._color = value;\n  }\n  _color: ThemePalette;\n\n  /**\n   * Whether the calendar UI is in touch mode. In touch mode the calendar opens in a dialog rather\n   * than a popup and elements have more padding to allow for bigger touch targets.\n   */\n  @Input()\n  get touchUi(): boolean { return this._touchUi; }\n  set touchUi(value: boolean) {\n    this._touchUi = coerceBooleanProperty(value);\n  }\n  private _touchUi = false;\n\n  /** Whether the datepicker pop-up should be disabled. */\n  @Input()\n  get disabled(): boolean {\n    return this._disabled === undefined && this._datepickerInput ?\n        this._datepickerInput.disabled : !!this._disabled;\n  }\n  set disabled(value: boolean) {\n    const newValue = coerceBooleanProperty(value);\n\n    if (newValue !== this._disabled) {\n      this._disabled = newValue;\n      this._disabledChange.next(newValue);\n    }\n  }\n  private _disabled: boolean;\n\n  /**\n   * Emits selected year in multiyear view.\n   * This doesn't imply a change on the selected date.\n   */\n  @Output() readonly yearSelected: EventEmitter<D> = new EventEmitter<D>();\n\n  /**\n   * Emits selected month in year view.\n   * This doesn't imply a change on the selected date.\n   */\n  @Output() readonly monthSelected: EventEmitter<D> = new EventEmitter<D>();\n\n  /** Classes to be passed to the date picker panel. Supports the same syntax as `ngClass`. */\n  @Input() panelClass: string | string[];\n\n  /** Emits when the datepicker has been opened. */\n  @Output('opened') openedStream: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Emits when the datepicker has been closed. */\n  @Output('closed') closedStream: EventEmitter<void> = new EventEmitter<void>();\n\n\n  /** Whether the calendar is open. */\n  @Input()\n  get opened(): boolean { return this._opened; }\n  set opened(value: boolean) { value ? this.open() : this.close(); }\n  private _opened = false;\n\n  /** The id for the datepicker calendar. */\n  id: string = `mat-datepicker-${datepickerUid++}`;\n\n  /** The currently selected date. */\n  get _selected(): D | null { return this._validSelected; }\n  set _selected(value: D | null) { this._validSelected = value; }\n  private _validSelected: D | null = null;\n\n  /** The minimum selectable date. */\n  get _minDate(): D | null {\n    return this._datepickerInput && this._datepickerInput.min;\n  }\n\n  /** The maximum selectable date. */\n  get _maxDate(): D | null {\n    return this._datepickerInput && this._datepickerInput.max;\n  }\n\n  get _dateFilter(): (date: D | null) => boolean {\n    return this._datepickerInput && this._datepickerInput._dateFilter;\n  }\n\n  /** A reference to the overlay when the calendar is opened as a popup. */\n  _popupRef: OverlayRef;\n\n  /** A reference to the dialog when the calendar is opened as a dialog. */\n  private _dialogRef: MatDialogRef<MatDatepickerContent<D>> | null;\n\n  /** A portal containing the calendar for this datepicker. */\n  private _calendarPortal: ComponentPortal<MatDatepickerContent<D>>;\n\n  /** Reference to the component instantiated in popup mode. */\n  private _popupComponentRef: ComponentRef<MatDatepickerContent<D>> | null;\n\n  /** The element that was focused before the datepicker was opened. */\n  private _focusedElementBeforeOpen: HTMLElement | null = null;\n\n  /** Subscription to value changes in the associated input element. */\n  private _inputSubscription = Subscription.EMPTY;\n\n  /** The input element this datepicker is associated with. */\n  _datepickerInput: MatDatepickerInput<D>;\n\n  /** Emits when the datepicker is disabled. */\n  readonly _disabledChange = new Subject<boolean>();\n\n  /** Emits new selected date when selected date changes. */\n  readonly _selectedChanged = new Subject<D>();\n\n  constructor(private _dialog: MatDialog,\n              private _overlay: Overlay,\n              private _ngZone: NgZone,\n              private _viewContainerRef: ViewContainerRef,\n              @Inject(MAT_DATEPICKER_SCROLL_STRATEGY) scrollStrategy: any,\n              @Optional() private _dateAdapter: DateAdapter<D>,\n              @Optional() private _dir: Directionality,\n              @Optional() @Inject(DOCUMENT) private _document: any) {\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n\n    this._scrollStrategy = scrollStrategy;\n  }\n\n  ngOnDestroy() {\n    this.close();\n    this._inputSubscription.unsubscribe();\n    this._disabledChange.complete();\n\n    if (this._popupRef) {\n      this._popupRef.dispose();\n      this._popupComponentRef = null;\n    }\n  }\n\n  /** Selects the given date */\n  select(date: D): void {\n    let oldValue = this._selected;\n    this._selected = date;\n    if (!this._dateAdapter.sameDate(oldValue, this._selected)) {\n      this._selectedChanged.next(date);\n    }\n  }\n\n  /** Emits the selected year in multiyear view */\n  _selectYear(normalizedYear: D): void {\n    this.yearSelected.emit(normalizedYear);\n  }\n\n  /** Emits selected month in year view */\n  _selectMonth(normalizedMonth: D): void {\n    this.monthSelected.emit(normalizedMonth);\n  }\n\n  /**\n   * Register an input with this datepicker.\n   * @param input The datepicker input to register with this datepicker.\n   */\n  _registerInput(input: MatDatepickerInput<D>): void {\n    if (this._datepickerInput) {\n      throw Error('A MatDatepicker can only be associated with a single input.');\n    }\n    this._datepickerInput = input;\n    this._inputSubscription =\n        this._datepickerInput._valueChange.subscribe((value: D | null) => this._selected = value);\n  }\n\n  /** Open the calendar. */\n  open(): void {\n    if (this._opened || this.disabled) {\n      return;\n    }\n    if (!this._datepickerInput) {\n      throw Error('Attempted to open an MatDatepicker with no associated input.');\n    }\n    if (this._document) {\n      this._focusedElementBeforeOpen = this._document.activeElement;\n    }\n\n    this.touchUi ? this._openAsDialog() : this._openAsPopup();\n    this._opened = true;\n    this.openedStream.emit();\n  }\n\n  /** Close the calendar. */\n  close(): void {\n    if (!this._opened) {\n      return;\n    }\n    if (this._popupRef && this._popupRef.hasAttached()) {\n      this._popupRef.detach();\n    }\n    if (this._dialogRef) {\n      this._dialogRef.close();\n      this._dialogRef = null;\n    }\n    if (this._calendarPortal && this._calendarPortal.isAttached) {\n      this._calendarPortal.detach();\n    }\n\n    const completeClose = () => {\n      // The `_opened` could've been reset already if\n      // we got two events in quick succession.\n      if (this._opened) {\n        this._opened = false;\n        this.closedStream.emit();\n        this._focusedElementBeforeOpen = null;\n      }\n    };\n\n    if (this._focusedElementBeforeOpen &&\n      typeof this._focusedElementBeforeOpen.focus === 'function') {\n      // Because IE moves focus asynchronously, we can't count on it being restored before we've\n      // marked the datepicker as closed. If the event fires out of sequence and the element that\n      // we're refocusing opens the datepicker on focus, the user could be stuck with not being\n      // able to close the calendar at all. We work around it by making the logic, that marks\n      // the datepicker as closed, async as well.\n      this._focusedElementBeforeOpen.focus();\n      setTimeout(completeClose);\n    } else {\n      completeClose();\n    }\n  }\n\n  /** Open the calendar as a dialog. */\n  private _openAsDialog(): void {\n    // Usually this would be handled by `open` which ensures that we can only have one overlay\n    // open at a time, however since we reset the variables in async handlers some overlays\n    // may slip through if the user opens and closes multiple times in quick succession (e.g.\n    // by holding down the enter key).\n    if (this._dialogRef) {\n      this._dialogRef.close();\n    }\n\n    this._dialogRef = this._dialog.open<MatDatepickerContent<D>>(MatDatepickerContent, {\n      direction: this._dir ? this._dir.value : 'ltr',\n      viewContainerRef: this._viewContainerRef,\n      panelClass: 'mat-datepicker-dialog',\n    });\n\n    this._dialogRef.afterClosed().subscribe(() => this.close());\n    this._dialogRef.componentInstance.datepicker = this;\n    this._setColor();\n  }\n\n  /** Open the calendar as a popup. */\n  private _openAsPopup(): void {\n    if (!this._calendarPortal) {\n      this._calendarPortal = new ComponentPortal<MatDatepickerContent<D>>(MatDatepickerContent,\n                                                                          this._viewContainerRef);\n    }\n\n    if (!this._popupRef) {\n      this._createPopup();\n    }\n\n    if (!this._popupRef.hasAttached()) {\n      this._popupComponentRef = this._popupRef.attach(this._calendarPortal);\n      this._popupComponentRef.instance.datepicker = this;\n      this._setColor();\n\n      // Update the position once the calendar has rendered.\n      this._ngZone.onStable.asObservable().pipe(take(1)).subscribe(() => {\n        this._popupRef.updatePosition();\n      });\n    }\n  }\n\n  /** Create the popup. */\n  private _createPopup(): void {\n    const overlayConfig = new OverlayConfig({\n      positionStrategy: this._createPopupPositionStrategy(),\n      hasBackdrop: true,\n      backdropClass: 'mat-overlay-transparent-backdrop',\n      direction: this._dir,\n      scrollStrategy: this._scrollStrategy(),\n      panelClass: 'mat-datepicker-popup',\n    });\n\n    this._popupRef = this._overlay.create(overlayConfig);\n    this._popupRef.overlayElement.setAttribute('role', 'dialog');\n\n    merge(\n      this._popupRef.backdropClick(),\n      this._popupRef.detachments(),\n      this._popupRef.keydownEvents().pipe(filter(event => {\n        // Closing on alt + up is only valid when there's an input associated with the datepicker.\n        return event.keyCode === ESCAPE ||\n               (this._datepickerInput && event.altKey && event.keyCode === UP_ARROW);\n      }))\n    ).subscribe(() => this.close());\n  }\n\n  /** Create the popup PositionStrategy. */\n  private _createPopupPositionStrategy(): PositionStrategy {\n    return this._overlay.position()\n      .flexibleConnectedTo(this._datepickerInput.getConnectedOverlayOrigin())\n      .withTransformOriginOn('.mat-datepicker-content')\n      .withFlexibleDimensions(false)\n      .withViewportMargin(8)\n      .withLockedPosition()\n      .withPositions([\n        {\n          originX: 'start',\n          originY: 'bottom',\n          overlayX: 'start',\n          overlayY: 'top'\n        },\n        {\n          originX: 'start',\n          originY: 'top',\n          overlayX: 'start',\n          overlayY: 'bottom'\n        },\n        {\n          originX: 'end',\n          originY: 'bottom',\n          overlayX: 'end',\n          overlayY: 'top'\n        },\n        {\n          originX: 'end',\n          originY: 'top',\n          overlayX: 'end',\n          overlayY: 'bottom'\n        }\n      ]);\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n\n  /** Passes the current theme color along to the calendar overlay. */\n  private _setColor(): void {\n    const color = this.color;\n    if (this._popupComponentRef) {\n      this._popupComponentRef.instance.color = color;\n    }\n    if (this._dialogRef) {\n      this._dialogRef.componentInstance.color = color;\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {DOWN_ARROW} from '@angular/cdk/keycodes';\nimport {\n  Directive,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  OnDestroy,\n  Optional,\n  Output,\n} from '@angular/core';\nimport {\n  AbstractControl,\n  ControlValueAccessor,\n  NG_VALIDATORS,\n  NG_VALUE_ACCESSOR,\n  ValidationErrors,\n  Validator,\n  ValidatorFn,\n  Validators,\n} from '@angular/forms';\nimport {DateAdapter, MAT_DATE_FORMATS, MatDateFormats, ThemePalette} from '@angular/material/core';\nimport {MatFormField} from '@angular/material/form-field';\nimport {MAT_INPUT_VALUE_ACCESSOR} from '@angular/material/input';\nimport {Subscription} from 'rxjs';\nimport {MatDatepicker} from './datepicker';\nimport {createMissingDateImplError} from './datepicker-errors';\n\n/** @docs-private */\nexport const MAT_DATEPICKER_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatDatepickerInput),\n  multi: true\n};\n\n/** @docs-private */\nexport const MAT_DATEPICKER_VALIDATORS: any = {\n  provide: NG_VALIDATORS,\n  useExisting: forwardRef(() => MatDatepickerInput),\n  multi: true\n};\n\n\n/**\n * An event used for datepicker input and change events. We don't always have access to a native\n * input or change event because the event may have been triggered by the user clicking on the\n * calendar popup. For consistency, we always use MatDatepickerInputEvent instead.\n */\nexport class MatDatepickerInputEvent<D> {\n  /** The new value for the target datepicker input. */\n  value: D | null;\n\n  constructor(\n    /** Reference to the datepicker input component that emitted the event. */\n    public target: MatDatepickerInput<D>,\n    /** Reference to the native input element associated with the datepicker input. */\n    public targetElement: HTMLElement) {\n    this.value = this.target.value;\n  }\n}\n\n\n/** Directive used to connect an input to a MatDatepicker. */\n@Directive({\n  selector: 'input[matDatepicker]',\n  providers: [\n    MAT_DATEPICKER_VALUE_ACCESSOR,\n    MAT_DATEPICKER_VALIDATORS,\n    {provide: MAT_INPUT_VALUE_ACCESSOR, useExisting: MatDatepickerInput},\n  ],\n  host: {\n    '[attr.aria-haspopup]': 'true',\n    '[attr.aria-owns]': '(_datepicker?.opened && _datepicker.id) || null',\n    '[attr.min]': 'min ? _dateAdapter.toIso8601(min) : null',\n    '[attr.max]': 'max ? _dateAdapter.toIso8601(max) : null',\n    '[disabled]': 'disabled',\n    '(input)': '_onInput($event.target.value)',\n    '(change)': '_onChange()',\n    '(blur)': '_onBlur()',\n    '(keydown)': '_onKeydown($event)',\n  },\n  exportAs: 'matDatepickerInput',\n})\nexport class MatDatepickerInput<D> implements ControlValueAccessor, OnDestroy, Validator {\n  /** The datepicker that this input is associated with. */\n  @Input()\n  set matDatepicker(value: MatDatepicker<D>) {\n    if (!value) {\n      return;\n    }\n\n    this._datepicker = value;\n    this._datepicker._registerInput(this);\n    this._datepickerSubscription.unsubscribe();\n\n    this._datepickerSubscription = this._datepicker._selectedChanged.subscribe((selected: D) => {\n      this.value = selected;\n      this._cvaOnChange(selected);\n      this._onTouched();\n      this.dateInput.emit(new MatDatepickerInputEvent(this, this._elementRef.nativeElement));\n      this.dateChange.emit(new MatDatepickerInputEvent(this, this._elementRef.nativeElement));\n    });\n  }\n  _datepicker: MatDatepicker<D>;\n\n  /** Function that can be used to filter out dates within the datepicker. */\n  @Input()\n  set matDatepickerFilter(value: (date: D | null) => boolean) {\n    this._dateFilter = value;\n    this._validatorOnChange();\n  }\n  _dateFilter: (date: D | null) => boolean;\n\n  /** The value of the input. */\n  @Input()\n  get value(): D | null { return this._value; }\n  set value(value: D | null) {\n    value = this._dateAdapter.deserialize(value);\n    this._lastValueValid = !value || this._dateAdapter.isValid(value);\n    value = this._getValidDateOrNull(value);\n    const oldDate = this.value;\n    this._value = value;\n    this._formatValue(value);\n\n    if (!this._dateAdapter.sameDate(oldDate, value)) {\n      this._valueChange.emit(value);\n    }\n  }\n  private _value: D | null;\n\n  /** The minimum valid date. */\n  @Input()\n  get min(): D | null { return this._min; }\n  set min(value: D | null) {\n    this._min = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n    this._validatorOnChange();\n  }\n  private _min: D | null;\n\n  /** The maximum valid date. */\n  @Input()\n  get max(): D | null { return this._max; }\n  set max(value: D | null) {\n    this._max = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n    this._validatorOnChange();\n  }\n  private _max: D | null;\n\n  /** Whether the datepicker-input is disabled. */\n  @Input()\n  get disabled(): boolean { return !!this._disabled; }\n  set disabled(value: boolean) {\n    const newValue = coerceBooleanProperty(value);\n    const element = this._elementRef.nativeElement;\n\n    if (this._disabled !== newValue) {\n      this._disabled = newValue;\n      this._disabledChange.emit(newValue);\n    }\n\n    // We need to null check the `blur` method, because it's undefined during SSR.\n    if (newValue && element.blur) {\n      // Normally, native input elements automatically blur if they turn disabled. This behavior\n      // is problematic, because it would mean that it triggers another change detection cycle,\n      // which then causes a changed after checked error if the input element was focused before.\n      element.blur();\n    }\n  }\n  private _disabled: boolean;\n\n  /** Emits when a `change` event is fired on this `<input>`. */\n  @Output() readonly dateChange: EventEmitter<MatDatepickerInputEvent<D>> =\n      new EventEmitter<MatDatepickerInputEvent<D>>();\n\n  /** Emits when an `input` event is fired on this `<input>`. */\n  @Output() readonly dateInput: EventEmitter<MatDatepickerInputEvent<D>> =\n      new EventEmitter<MatDatepickerInputEvent<D>>();\n\n  /** Emits when the value changes (either due to user input or programmatic change). */\n  _valueChange = new EventEmitter<D | null>();\n\n  /** Emits when the disabled state has changed */\n  _disabledChange = new EventEmitter<boolean>();\n\n  _onTouched = () => {};\n\n  private _cvaOnChange: (value: any) => void = () => {};\n\n  private _validatorOnChange = () => {};\n\n  private _datepickerSubscription = Subscription.EMPTY;\n\n  private _localeSubscription = Subscription.EMPTY;\n\n  /** The form control validator for whether the input parses. */\n  private _parseValidator: ValidatorFn = (): ValidationErrors | null => {\n    return this._lastValueValid ?\n        null : {'matDatepickerParse': {'text': this._elementRef.nativeElement.value}};\n  }\n\n  /** The form control validator for the min date. */\n  private _minValidator: ValidatorFn = (control: AbstractControl): ValidationErrors | null => {\n    const controlValue = this._getValidDateOrNull(this._dateAdapter.deserialize(control.value));\n    return (!this.min || !controlValue ||\n        this._dateAdapter.compareDate(this.min, controlValue) <= 0) ?\n        null : {'matDatepickerMin': {'min': this.min, 'actual': controlValue}};\n  }\n\n  /** The form control validator for the max date. */\n  private _maxValidator: ValidatorFn = (control: AbstractControl): ValidationErrors | null => {\n    const controlValue = this._getValidDateOrNull(this._dateAdapter.deserialize(control.value));\n    return (!this.max || !controlValue ||\n        this._dateAdapter.compareDate(this.max, controlValue) >= 0) ?\n        null : {'matDatepickerMax': {'max': this.max, 'actual': controlValue}};\n  }\n\n  /** The form control validator for the date filter. */\n  private _filterValidator: ValidatorFn = (control: AbstractControl): ValidationErrors | null => {\n    const controlValue = this._getValidDateOrNull(this._dateAdapter.deserialize(control.value));\n    return !this._dateFilter || !controlValue || this._dateFilter(controlValue) ?\n        null : {'matDatepickerFilter': true};\n  }\n\n  /** The combined form control validator for this input. */\n  private _validator: ValidatorFn | null =\n      Validators.compose(\n          [this._parseValidator, this._minValidator, this._maxValidator, this._filterValidator]);\n\n  /** Whether the last value set on the input was valid. */\n  private _lastValueValid = false;\n\n  constructor(\n      private _elementRef: ElementRef<HTMLInputElement>,\n      @Optional() public _dateAdapter: DateAdapter<D>,\n      @Optional() @Inject(MAT_DATE_FORMATS) private _dateFormats: MatDateFormats,\n      @Optional() private _formField: MatFormField) {\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n    if (!this._dateFormats) {\n      throw createMissingDateImplError('MAT_DATE_FORMATS');\n    }\n\n    // Update the displayed date when the locale changes.\n    this._localeSubscription = _dateAdapter.localeChanges.subscribe(() => {\n      this.value = this.value;\n    });\n  }\n\n  ngOnDestroy() {\n    this._datepickerSubscription.unsubscribe();\n    this._localeSubscription.unsubscribe();\n    this._valueChange.complete();\n    this._disabledChange.complete();\n  }\n\n  /** @docs-private */\n  registerOnValidatorChange(fn: () => void): void {\n    this._validatorOnChange = fn;\n  }\n\n  /** @docs-private */\n  validate(c: AbstractControl): ValidationErrors | null {\n    return this._validator ? this._validator(c) : null;\n  }\n\n  /**\n   * @deprecated\n   * @breaking-change 8.0.0 Use `getConnectedOverlayOrigin` instead\n   */\n  getPopupConnectionElementRef(): ElementRef {\n    return this.getConnectedOverlayOrigin();\n  }\n\n  /**\n   * Gets the element that the datepicker popup should be connected to.\n   * @return The element to connect the popup to.\n   */\n  getConnectedOverlayOrigin(): ElementRef {\n    return this._formField ? this._formField.getConnectedOverlayOrigin() : this._elementRef;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  writeValue(value: D): void {\n    this.value = value;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnChange(fn: (value: any) => void): void {\n    this._cvaOnChange = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnTouched(fn: () => void): void {\n    this._onTouched = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n  }\n\n  _onKeydown(event: KeyboardEvent) {\n    const isAltDownArrow = event.altKey && event.keyCode === DOWN_ARROW;\n\n    if (this._datepicker && isAltDownArrow && !this._elementRef.nativeElement.readOnly) {\n      this._datepicker.open();\n      event.preventDefault();\n    }\n  }\n\n  _onInput(value: string) {\n    let date = this._dateAdapter.parse(value, this._dateFormats.parse.dateInput);\n    this._lastValueValid = !date || this._dateAdapter.isValid(date);\n    date = this._getValidDateOrNull(date);\n\n    if (!this._dateAdapter.sameDate(date, this._value)) {\n      this._value = date;\n      this._cvaOnChange(date);\n      this._valueChange.emit(date);\n      this.dateInput.emit(new MatDatepickerInputEvent(this, this._elementRef.nativeElement));\n    }\n  }\n\n  _onChange() {\n    this.dateChange.emit(new MatDatepickerInputEvent(this, this._elementRef.nativeElement));\n  }\n\n  /** Returns the palette used by the input's form field, if any. */\n  _getThemePalette(): ThemePalette {\n    return this._formField ? this._formField.color : undefined;\n  }\n\n  /** Handles blur events on the input. */\n  _onBlur() {\n    // Reformat the input only if we have a valid value.\n    if (this.value) {\n      this._formatValue(this.value);\n    }\n\n    this._onTouched();\n  }\n\n  /** Formats a value and sets it on the input element. */\n  private _formatValue(value: D | null) {\n    this._elementRef.nativeElement.value =\n        value ? this._dateAdapter.format(value, this._dateFormats.display.dateInput) : '';\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  AfterContentInit,\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  Directive,\n  Input,\n  OnChanges,\n  OnDestroy,\n  SimpleChanges,\n  ViewEncapsulation,\n  ViewChild,\n} from '@angular/core';\nimport {MatButton} from '@angular/material/button';\nimport {merge, of as observableOf, Subscription} from 'rxjs';\nimport {MatDatepicker} from './datepicker';\nimport {MatDatepickerIntl} from './datepicker-intl';\n\n\n/** Can be used to override the icon of a `matDatepickerToggle`. */\n@Directive({\n  selector: '[matDatepickerToggleIcon]'\n})\nexport class MatDatepickerToggleIcon {}\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-datepicker-toggle',\n  templateUrl: 'datepicker-toggle.html',\n  styleUrls: ['datepicker-toggle.css'],\n  host: {\n    'class': 'mat-datepicker-toggle',\n    // Always set the tabindex to -1 so that it doesn't overlap with any custom tabindex the\n    // consumer may have provided, while still being able to receive focus.\n    '[attr.tabindex]': '-1',\n    '[class.mat-datepicker-toggle-active]': 'datepicker && datepicker.opened',\n    '[class.mat-accent]': 'datepicker && datepicker.color === \"accent\"',\n    '[class.mat-warn]': 'datepicker && datepicker.color === \"warn\"',\n    '(focus)': '_button.focus()',\n  },\n  exportAs: 'matDatepickerToggle',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatDatepickerToggle<D> implements AfterContentInit, OnChanges, OnDestroy {\n  private _stateChanges = Subscription.EMPTY;\n\n  /** Datepicker instance that the button will toggle. */\n  @Input('for') datepicker: MatDatepicker<D>;\n\n  /** Tabindex for the toggle. */\n  @Input() tabIndex: number | null;\n\n  /** Whether the toggle button is disabled. */\n  @Input()\n  get disabled(): boolean {\n    return this._disabled === undefined ? this.datepicker.disabled : !!this._disabled;\n  }\n  set disabled(value: boolean) {\n    this._disabled = coerceBooleanProperty(value);\n  }\n  private _disabled: boolean;\n\n  /** Whether ripples on the toggle should be disabled. */\n  @Input() disableRipple: boolean;\n\n  /** Custom icon set by the consumer. */\n  @ContentChild(MatDatepickerToggleIcon) _customIcon: MatDatepickerToggleIcon;\n\n  /** Underlying button element. */\n  @ViewChild('button') _button: MatButton;\n\n  constructor(\n    public _intl: MatDatepickerIntl,\n    private _changeDetectorRef: ChangeDetectorRef,\n    @Attribute('tabindex') defaultTabIndex: string) {\n\n    const parsedTabIndex = Number(defaultTabIndex);\n    this.tabIndex = (parsedTabIndex || parsedTabIndex === 0) ? parsedTabIndex : null;\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    if (changes.datepicker) {\n      this._watchStateChanges();\n    }\n  }\n\n  ngOnDestroy() {\n    this._stateChanges.unsubscribe();\n  }\n\n  ngAfterContentInit() {\n    this._watchStateChanges();\n  }\n\n  _open(event: Event): void {\n    if (this.datepicker && !this.disabled) {\n      this.datepicker.open();\n      event.stopPropagation();\n    }\n  }\n\n  private _watchStateChanges() {\n    const datepickerDisabled = this.datepicker ? this.datepicker._disabledChange : observableOf();\n    const inputDisabled = this.datepicker && this.datepicker._datepickerInput ?\n        this.datepicker._datepickerInput._disabledChange : observableOf();\n    const datepickerToggled = this.datepicker ?\n        merge(this.datepicker.openedStream, this.datepicker.closedStream) :\n        observableOf();\n\n    this._stateChanges.unsubscribe();\n    this._stateChanges = merge(\n      this._intl.changes,\n      datepickerDisabled,\n      inputDisabled,\n      datepickerToggled\n    ).subscribe(() => this._changeDetectorRef.markForCheck());\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {A11yModule} from '@angular/cdk/a11y';\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatButtonModule} from '@angular/material/button';\nimport {MatDialogModule} from '@angular/material/dialog';\nimport {MatCalendar, MatCalendarHeader} from './calendar';\nimport {MatCalendarBody} from './calendar-body';\nimport {\n  MatDatepicker,\n  MatDatepickerContent,\n  MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY_PROVIDER,\n} from './datepicker';\nimport {MatDatepickerInput} from './datepicker-input';\nimport {MatDatepickerIntl} from './datepicker-intl';\nimport {MatDatepickerToggle, MatDatepickerToggleIcon} from './datepicker-toggle';\nimport {MatMonthView} from './month-view';\nimport {MatMultiYearView} from './multi-year-view';\nimport {MatYearView} from './year-view';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatButtonModule,\n    MatDialogModule,\n    OverlayModule,\n    A11yModule,\n    PortalModule,\n  ],\n  exports: [\n    MatCalendar,\n    MatCalendarBody,\n    MatDatepicker,\n    MatDatepickerContent,\n    MatDatepickerInput,\n    MatDatepickerToggle,\n    MatDatepickerToggleIcon,\n    MatMonthView,\n    MatYearView,\n    MatMultiYearView,\n    MatCalendarHeader,\n  ],\n  declarations: [\n    MatCalendar,\n    MatCalendarBody,\n    MatDatepicker,\n    MatDatepickerContent,\n    MatDatepickerInput,\n    MatDatepickerToggle,\n    MatDatepickerToggleIcon,\n    MatMonthView,\n    MatYearView,\n    MatMultiYearView,\n    MatCalendarHeader,\n  ],\n  providers: [\n    MatDatepickerIntl,\n    MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY_PROVIDER,\n  ],\n  entryComponents: [\n    MatDatepickerContent,\n    MatCalendarHeader,\n  ]\n})\nexport class MatDatepickerModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ChangeDetectionStrategy, Component, Input, ViewEncapsulation} from '@angular/core';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-divider',\n  host: {\n    'role': 'separator',\n    '[attr.aria-orientation]': 'vertical ? \"vertical\" : \"horizontal\"',\n    '[class.mat-divider-vertical]': 'vertical',\n    '[class.mat-divider-horizontal]': '!vertical',\n    '[class.mat-divider-inset]': 'inset',\n    'class': 'mat-divider'\n  },\n  template: '',\n  styleUrls: ['divider.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatDivider {\n  /** Whether the divider is vertically aligned. */\n  @Input()\n  get vertical(): boolean { return this._vertical; }\n  set vertical(value: boolean) { this._vertical = coerceBooleanProperty(value); }\n  private _vertical: boolean = false;\n\n  /** Whether the divider is an inset divider. */\n  @Input()\n  get inset(): boolean { return this._inset; }\n  set inset(value: boolean) { this._inset = coerceBooleanProperty(value); }\n  private _inset: boolean = false;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatDivider} from './divider';\n\n\n@NgModule({\n  imports: [MatCommonModule, CommonModule],\n  exports: [MatDivider, MatCommonModule],\n  declarations: [MatDivider],\n})\nexport class MatDividerModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {InjectionToken} from '@angular/core';\nimport {CdkAccordion} from '@angular/cdk/accordion';\n\n/** MatAccordion's display modes. */\nexport type MatAccordionDisplayMode = 'default' | 'flat';\n\n/**\n * Base interface for a `MatAccordion`.\n * @docs-private\n */\nexport interface MatAccordionBase extends CdkAccordion {\n  /** Whether the expansion indicator should be hidden. */\n  hideToggle: boolean;\n\n  /** Display mode used for all expansion panels in the accordion. */\n  displayMode: MatAccordionDisplayMode;\n\n  /** Handles keyboard events coming in from the panel headers. */\n  _handleHeaderKeydown: (event: KeyboardEvent) => void;\n\n  /** Handles focus events on the panel headers. */\n  _handleHeaderFocus: (header: any) => void;\n}\n\n\n/**\n * Token used to provide a `MatAccordion` to `MatExpansionPanel`.\n * Used primarily to avoid circular imports between `MatAccordion` and `MatExpansionPanel`.\n */\nexport const MAT_ACCORDION = new InjectionToken<MatAccordionBase>('MAT_ACCORDION');\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, TemplateRef} from '@angular/core';\n\n/**\n * Expansion panel content that will be rendered lazily\n * after the panel is opened for the first time.\n */\n@Directive({\n  selector: 'ng-template[matExpansionPanelContent]'\n})\nexport class MatExpansionPanelContent {\n  constructor(public _template: TemplateRef<any>) {}\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {AnimationEvent} from '@angular/animations';\nimport {CdkAccordionItem} from '@angular/cdk/accordion';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {UniqueSelectionDispatcher} from '@angular/cdk/collections';\nimport {TemplatePortal} from '@angular/cdk/portal';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  Directive,\n  EventEmitter,\n  ElementRef,\n  Input,\n  Inject,\n  OnChanges,\n  OnDestroy,\n  Optional,\n  Output,\n  SimpleChanges,\n  SkipSelf,\n  ViewContainerRef,\n  ViewEncapsulation,\n  ViewChild,\n} from '@angular/core';\nimport {DOCUMENT} from '@angular/common';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\nimport {Subject} from 'rxjs';\nimport {filter, startWith, take, distinctUntilChanged} from 'rxjs/operators';\nimport {matExpansionAnimations} from './expansion-animations';\nimport {MatExpansionPanelContent} from './expansion-panel-content';\nimport {MAT_ACCORDION, MatAccordionBase} from './accordion-base';\n\n/** MatExpansionPanel's states. */\nexport type MatExpansionPanelState = 'expanded' | 'collapsed';\n\n/** Counter for generating unique element ids. */\nlet uniqueId = 0;\n\n/**\n * `<mat-expansion-panel>`\n *\n * This component can be used as a single element to show expandable content, or as one of\n * multiple children of an element with the MatAccordion directive attached.\n */\n@Component({\n  moduleId: module.id,\n  styleUrls: ['./expansion-panel.css'],\n  selector: 'mat-expansion-panel',\n  exportAs: 'matExpansionPanel',\n  templateUrl: './expansion-panel.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  inputs: ['disabled', 'expanded'],\n  outputs: ['opened', 'closed', 'expandedChange'],\n  animations: [matExpansionAnimations.bodyExpansion],\n  providers: [\n    // Provide MatAccordion as undefined to prevent nested expansion panels from registering\n    // to the same accordion.\n    {provide: MAT_ACCORDION, useValue: undefined},\n  ],\n  host: {\n    'class': 'mat-expansion-panel',\n    '[class.mat-expanded]': 'expanded',\n    '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"',\n    '[class.mat-expansion-panel-spacing]': '_hasSpacing()',\n  }\n})\nexport class MatExpansionPanel extends CdkAccordionItem implements AfterContentInit, OnChanges,\n  OnDestroy {\n\n  // @breaking-change 8.0.0 Remove `| undefined` from here\n  // when the `_document` constructor param is required.\n  private _document: Document | undefined;\n\n  /** Whether the toggle indicator should be hidden. */\n  @Input()\n  get hideToggle(): boolean {\n    return this._hideToggle || (this.accordion && this.accordion.hideToggle);\n  }\n  set hideToggle(value: boolean) {\n    this._hideToggle = coerceBooleanProperty(value);\n  }\n  private _hideToggle = false;\n\n  /** An event emitted after the body's expansion animation happens. */\n  @Output() afterExpand = new EventEmitter<void>();\n\n  /** An event emitted after the body's collapse animation happens. */\n  @Output() afterCollapse = new EventEmitter<void>();\n\n  /** Stream that emits for changes in `@Input` properties. */\n  readonly _inputChanges = new Subject<SimpleChanges>();\n\n  /** Optionally defined accordion the expansion panel belongs to. */\n  accordion: MatAccordionBase;\n\n  /** Content that will be rendered lazily. */\n  @ContentChild(MatExpansionPanelContent) _lazyContent: MatExpansionPanelContent;\n\n  /** Element containing the panel's user-provided content. */\n  @ViewChild('body') _body: ElementRef<HTMLElement>;\n\n  /** Portal holding the user's content. */\n  _portal: TemplatePortal;\n\n  /** ID for the associated header element. Used for a11y labelling. */\n  _headerId = `mat-expansion-panel-header-${uniqueId++}`;\n\n  /** Stream of body animation done events. */\n  _bodyAnimationDone = new Subject<AnimationEvent>();\n\n  constructor(@Optional() @SkipSelf() @Inject(MAT_ACCORDION) accordion: MatAccordionBase,\n              _changeDetectorRef: ChangeDetectorRef,\n              _uniqueSelectionDispatcher: UniqueSelectionDispatcher,\n              private _viewContainerRef: ViewContainerRef,\n              // @breaking-change 8.0.0 _document and _animationMode to be made required\n              @Inject(DOCUMENT) _document?: any,\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode?: string) {\n    super(accordion, _changeDetectorRef, _uniqueSelectionDispatcher);\n    this.accordion = accordion;\n    this._document = _document;\n\n    // We need a Subject with distinctUntilChanged, because the `done` event\n    // fires twice on some browsers. See https://github.com/angular/angular/issues/24084\n    this._bodyAnimationDone.pipe(distinctUntilChanged((x, y) => {\n      return x.fromState === y.fromState && x.toState === y.toState;\n    })).subscribe(event => {\n      if (event.fromState !== 'void') {\n        if (event.toState === 'expanded') {\n          this.afterExpand.emit();\n        } else if (event.toState === 'collapsed') {\n          this.afterCollapse.emit();\n        }\n      }\n    });\n  }\n\n  /** Determines whether the expansion panel should have spacing between it and its siblings. */\n  _hasSpacing(): boolean {\n    if (this.accordion) {\n      // We don't need to subscribe to the `stateChanges` of the parent accordion because each time\n      // the [displayMode] input changes, the change detection will also cover the host bindings\n      // of this expansion panel.\n      return (this.expanded ? this.accordion.displayMode : this._getExpandedState()) === 'default';\n    }\n    return false;\n  }\n\n  /** Gets the expanded state string. */\n  _getExpandedState(): MatExpansionPanelState {\n    return this.expanded ? 'expanded' : 'collapsed';\n  }\n\n  ngAfterContentInit() {\n    if (this._lazyContent) {\n      // Render the content as soon as the panel becomes open.\n      this.opened.pipe(\n        startWith<void>(null!),\n        filter(() => this.expanded && !this._portal),\n        take(1)\n      ).subscribe(() => {\n        this._portal = new TemplatePortal(this._lazyContent._template, this._viewContainerRef);\n      });\n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    this._inputChanges.next(changes);\n  }\n\n  ngOnDestroy() {\n    super.ngOnDestroy();\n    this._bodyAnimationDone.complete();\n    this._inputChanges.complete();\n  }\n\n  /** Checks whether the expansion panel's content contains the currently-focused element. */\n  _containsFocus(): boolean {\n    if (this._body && this._document) {\n      const focusedElement = this._document.activeElement;\n      const bodyElement = this._body.nativeElement;\n      return focusedElement === bodyElement || bodyElement.contains(focusedElement);\n    }\n\n    return false;\n  }\n}\n\n@Directive({\n  selector: 'mat-action-row',\n  host: {\n    class: 'mat-action-row'\n  }\n})\nexport class MatExpansionPanelActionRow {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor, FocusableOption, FocusOrigin} from '@angular/cdk/a11y';\nimport {ENTER, SPACE} from '@angular/cdk/keycodes';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  Directive,\n  ElementRef,\n  Host,\n  Input,\n  OnDestroy,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {merge, Subscription, EMPTY} from 'rxjs';\nimport {filter} from 'rxjs/operators';\nimport {matExpansionAnimations} from './expansion-animations';\nimport {MatExpansionPanel} from './expansion-panel';\n\n\n/**\n * `<mat-expansion-panel-header>`\n *\n * This component corresponds to the header element of an `<mat-expansion-panel>`.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-expansion-panel-header',\n  styleUrls: ['./expansion-panel-header.css'],\n  templateUrl: './expansion-panel-header.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  animations: [\n    matExpansionAnimations.indicatorRotate,\n    matExpansionAnimations.expansionHeaderHeight\n  ],\n  host: {\n    'class': 'mat-expansion-panel-header',\n    'role': 'button',\n    '[attr.id]': 'panel._headerId',\n    '[attr.tabindex]': 'disabled ? -1 : 0',\n    '[attr.aria-controls]': '_getPanelId()',\n    '[attr.aria-expanded]': '_isExpanded()',\n    '[attr.aria-disabled]': 'panel.disabled',\n    '[class.mat-expanded]': '_isExpanded()',\n    '(click)': '_toggle()',\n    '(keydown)': '_keydown($event)',\n    '[@expansionHeight]': `{\n        value: _getExpandedState(),\n        params: {\n          collapsedHeight: collapsedHeight,\n          expandedHeight: expandedHeight\n        }\n    }`,\n  },\n})\nexport class MatExpansionPanelHeader implements OnDestroy, FocusableOption {\n  private _parentChangeSubscription = Subscription.EMPTY;\n\n  constructor(\n      @Host() public panel: MatExpansionPanel,\n      private _element: ElementRef,\n      private _focusMonitor: FocusMonitor,\n      private _changeDetectorRef: ChangeDetectorRef) {\n\n    const accordionHideToggleChange = panel.accordion ?\n      panel.accordion._stateChanges.pipe(filter(changes => !!changes.hideToggle)) : EMPTY;\n\n    // Since the toggle state depends on an @Input on the panel, we\n    // need to subscribe and trigger change detection manually.\n    this._parentChangeSubscription = merge(\n      panel.opened,\n      panel.closed,\n      accordionHideToggleChange,\n      panel._inputChanges.pipe(filter(changes => !!(changes.hideToggle || changes.disabled)))\n    )\n    .subscribe(() => this._changeDetectorRef.markForCheck());\n\n    // Avoids focus being lost if the panel contained the focused element and was closed.\n    panel.closed\n      .pipe(filter(() => panel._containsFocus()))\n      .subscribe(() => _focusMonitor.focusVia(_element, 'program'));\n\n    _focusMonitor.monitor(_element).subscribe(origin => {\n      if (origin && panel.accordion) {\n        panel.accordion._handleHeaderFocus(this);\n      }\n    });\n  }\n\n  /** Height of the header while the panel is expanded. */\n  @Input() expandedHeight: string;\n\n  /** Height of the header while the panel is collapsed. */\n  @Input() collapsedHeight: string;\n\n  /**\n   * Whether the associated panel is disabled. Implemented as a part of `FocusableOption`.\n   * @docs-private\n   */\n  get disabled() {\n    return this.panel.disabled;\n  }\n\n  /** Toggles the expanded state of the panel. */\n  _toggle(): void {\n    this.panel.toggle();\n  }\n\n  /** Gets whether the panel is expanded. */\n  _isExpanded(): boolean {\n    return this.panel.expanded;\n  }\n\n  /** Gets the expanded state string of the panel. */\n  _getExpandedState(): string {\n    return this.panel._getExpandedState();\n  }\n\n  /** Gets the panel id. */\n  _getPanelId(): string {\n    return this.panel.id;\n  }\n\n  /** Gets whether the expand indicator should be shown. */\n  _showToggle(): boolean {\n    return !this.panel.hideToggle && !this.panel.disabled;\n  }\n\n  /** Handle keydown event calling to toggle() if appropriate. */\n  _keydown(event: KeyboardEvent) {\n    switch (event.keyCode) {\n      // Toggle for space and enter keys.\n      case SPACE:\n      case ENTER:\n        if (!event.altKey && !event.metaKey && !event.shiftKey && !event.ctrlKey) {\n          event.preventDefault();\n          this._toggle();\n        }\n\n        break;\n      default:\n        if (this.panel.accordion) {\n          this.panel.accordion._handleHeaderKeydown(event);\n        }\n\n        return;\n    }\n  }\n\n  /**\n   * Focuses the panel header. Implemented as a part of `FocusableOption`.\n   * @param origin Origin of the action that triggered the focus.\n   * @docs-private\n   */\n  focus(origin: FocusOrigin = 'program') {\n    this._focusMonitor.focusVia(this._element, origin);\n  }\n\n  ngOnDestroy() {\n    this._parentChangeSubscription.unsubscribe();\n    this._focusMonitor.stopMonitoring(this._element);\n  }\n}\n\n/**\n * `<mat-panel-description>`\n *\n * This directive is to be used inside of the MatExpansionPanelHeader component.\n */\n@Directive({\n  selector: 'mat-panel-description',\n  host: {\n    class: 'mat-expansion-panel-header-description'\n  }\n})\nexport class MatExpansionPanelDescription {}\n\n/**\n * `<mat-panel-title>`\n *\n * This directive is to be used inside of the MatExpansionPanelHeader component.\n */\n@Directive({\n  selector: 'mat-panel-title',\n  host: {\n    class: 'mat-expansion-panel-header-title'\n  }\n})\nexport class MatExpansionPanelTitle {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, Input, ContentChildren, QueryList, AfterContentInit} from '@angular/core';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {CdkAccordion} from '@angular/cdk/accordion';\nimport {FocusKeyManager} from '@angular/cdk/a11y';\nimport {HOME, END} from '@angular/cdk/keycodes';\nimport {MAT_ACCORDION, MatAccordionBase, MatAccordionDisplayMode} from './accordion-base';\nimport {MatExpansionPanelHeader} from './expansion-panel-header';\n\n/**\n * Directive for a Material Design Accordion.\n */\n@Directive({\n  selector: 'mat-accordion',\n  exportAs: 'matAccordion',\n  inputs: ['multi'],\n  providers: [{\n    provide: MAT_ACCORDION,\n    useExisting: MatAccordion\n  }],\n  host: {\n    class: 'mat-accordion'\n  }\n})\nexport class MatAccordion extends CdkAccordion implements MatAccordionBase, AfterContentInit {\n  private _keyManager: FocusKeyManager<MatExpansionPanelHeader>;\n\n  @ContentChildren(MatExpansionPanelHeader, {descendants: true})\n  _headers: QueryList<MatExpansionPanelHeader>;\n\n  /** Whether the expansion indicator should be hidden. */\n  @Input()\n  get hideToggle(): boolean { return this._hideToggle; }\n  set hideToggle(show: boolean) { this._hideToggle = coerceBooleanProperty(show); }\n  private _hideToggle: boolean = false;\n\n  /**\n   * Display mode used for all expansion panels in the accordion. Currently two display\n   * modes exist:\n   *  default - a gutter-like spacing is placed around any expanded panel, placing the expanded\n   *     panel at a different elevation from the rest of the accordion.\n   *  flat - no spacing is placed around expanded panels, showing all panels at the same\n   *     elevation.\n   */\n  @Input() displayMode: MatAccordionDisplayMode = 'default';\n\n  ngAfterContentInit() {\n    this._keyManager = new FocusKeyManager(this._headers).withWrap();\n  }\n\n  /** Handles keyboard events coming in from the panel headers. */\n  _handleHeaderKeydown(event: KeyboardEvent) {\n    const {keyCode} = event;\n    const manager = this._keyManager;\n\n    if (keyCode === HOME) {\n      manager.setFirstItemActive();\n      event.preventDefault();\n    } else if (keyCode === END) {\n      manager.setLastItemActive();\n      event.preventDefault();\n    } else {\n      this._keyManager.onKeydown(event);\n    }\n  }\n\n  _handleHeaderFocus(header: MatExpansionPanelHeader) {\n    this._keyManager.updateActiveItem(header);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CdkAccordionModule} from '@angular/cdk/accordion';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatAccordion} from './accordion';\nimport {MatExpansionPanel, MatExpansionPanelActionRow} from './expansion-panel';\nimport {MatExpansionPanelContent} from './expansion-panel-content';\nimport {\n  MatExpansionPanelDescription,\n  MatExpansionPanelHeader,\n  MatExpansionPanelTitle,\n} from './expansion-panel-header';\n\n\n@NgModule({\n  imports: [CommonModule, CdkAccordionModule, PortalModule],\n  exports: [\n    MatAccordion,\n    MatExpansionPanel,\n    MatExpansionPanelActionRow,\n    MatExpansionPanelHeader,\n    MatExpansionPanelTitle,\n    MatExpansionPanelDescription,\n    MatExpansionPanelContent,\n  ],\n  declarations: [\n    MatAccordion,\n    MatExpansionPanel,\n    MatExpansionPanelActionRow,\n    MatExpansionPanelHeader,\n    MatExpansionPanelTitle,\n    MatExpansionPanelDescription,\n    MatExpansionPanelContent,\n  ],\n})\nexport class MatExpansionModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {InjectionToken} from '@angular/core';\n\n/**\n * Injection token used to provide a grid list to a tile and to avoid circular imports.\n * @docs-private\n */\nexport const MAT_GRID_LIST = new InjectionToken<MatGridListBase>('MAT_GRID_LIST');\n\n/**\n * Base interface for a `MatGridList`.\n * @docs-private\n */\nexport interface MatGridListBase {\n  cols: number;\n  gutterSize: string;\n  rowHeight: number | string;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  EventEmitter,\n  Input,\n  Output,\n  ViewEncapsulation,\n  NgZone,\n  OnChanges,\n  SimpleChanges,\n} from '@angular/core';\nimport {take} from 'rxjs/operators';\n\n/**\n * An internal class that represents the data corresponding to a single calendar cell.\n * @docs-private\n */\nexport class MatCalendarCell {\n  constructor(public value: number,\n              public displayValue: string,\n              public ariaLabel: string,\n              public enabled: boolean) {}\n}\n\n\n/**\n * An internal component used to display calendar data in a table.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: '[mat-calendar-body]',\n  templateUrl: 'calendar-body.html',\n  styleUrls: ['calendar-body.css'],\n  host: {\n    'class': 'mat-calendar-body',\n    'role': 'grid',\n    'aria-readonly': 'true'\n  },\n  exportAs: 'matCalendarBody',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatCalendarBody implements OnChanges {\n  /** The label for the table. (e.g. \"Jan 2017\"). */\n  @Input() label: string;\n\n  /** The cells to display in the table. */\n  @Input() rows: MatCalendarCell[][];\n\n  /** The value in the table that corresponds to today. */\n  @Input() todayValue: number;\n\n  /** The value in the table that is currently selected. */\n  @Input() selectedValue: number;\n\n  /** The minimum number of free cells needed to fit the label in the first row. */\n  @Input() labelMinRequiredCells: number;\n\n  /** The number of columns in the table. */\n  @Input() numCols = 7;\n\n  /** The cell number of the active cell in the table. */\n  @Input() activeCell = 0;\n\n  /**\n   * The aspect ratio (width / height) to use for the cells in the table. This aspect ratio will be\n   * maintained even as the table resizes.\n   */\n  @Input() cellAspectRatio = 1;\n\n  /** Emits when a new value is selected. */\n  @Output() readonly selectedValueChange: EventEmitter<number> = new EventEmitter<number>();\n\n  /** The number of blank cells to put at the beginning for the first row. */\n  _firstRowOffset: number;\n\n  /** Padding for the individual date cells. */\n  _cellPadding: string;\n\n  /** Width of an individual cell. */\n  _cellWidth: string;\n\n  constructor(private _elementRef: ElementRef<HTMLElement>, private _ngZone: NgZone) { }\n\n  _cellClicked(cell: MatCalendarCell): void {\n    if (cell.enabled) {\n      this.selectedValueChange.emit(cell.value);\n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    const columnChanges = changes.numCols;\n    const {rows, numCols} = this;\n\n    if (changes.rows || columnChanges) {\n      this._firstRowOffset = rows && rows.length && rows[0].length ? numCols - rows[0].length : 0;\n    }\n\n    if (changes.cellAspectRatio || columnChanges || !this._cellPadding) {\n      this._cellPadding = `${50 * this.cellAspectRatio / numCols}%`;\n    }\n\n    if (columnChanges || !this._cellWidth) {\n      this._cellWidth = `${100 / numCols}%`;\n    }\n  }\n\n  _isActiveCell(rowIndex: number, colIndex: number): boolean {\n    let cellNumber = rowIndex * this.numCols + colIndex;\n\n    // Account for the fact that the first row may not have as many cells.\n    if (rowIndex) {\n      cellNumber -= this._firstRowOffset;\n    }\n\n    return cellNumber == this.activeCell;\n  }\n\n  /** Focuses the active cell after the microtask queue is empty. */\n  _focusActiveCell() {\n    this._ngZone.runOutsideAngular(() => {\n      this._ngZone.onStable.asObservable().pipe(take(1)).subscribe(() => {\n        const activeCell: HTMLElement | null =\n            this._elementRef.nativeElement.querySelector('.mat-calendar-body-active');\n\n        if (activeCell) {\n          activeCell.focus();\n        }\n      });\n    });\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  DOWN_ARROW,\n  END,\n  ENTER,\n  HOME,\n  LEFT_ARROW,\n  PAGE_DOWN,\n  PAGE_UP,\n  RIGHT_ARROW,\n  UP_ARROW,\n  SPACE,\n} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  EventEmitter,\n  Inject,\n  Input,\n  Optional,\n  Output,\n  ViewEncapsulation,\n  ViewChild,\n} from '@angular/core';\nimport {DateAdapter, MAT_DATE_FORMATS, MatDateFormats} from '@angular/material/core';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {MatCalendarBody, MatCalendarCell} from './calendar-body';\nimport {createMissingDateImplError} from './datepicker-errors';\n\n\nconst DAYS_PER_WEEK = 7;\n\n\n/**\n * An internal component used to display a single month in the datepicker.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-month-view',\n  templateUrl: 'month-view.html',\n  exportAs: 'matMonthView',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class MatMonthView<D> implements AfterContentInit {\n  /**\n   * The date to display in this month view (everything other than the month and year is ignored).\n   */\n  @Input()\n  get activeDate(): D { return this._activeDate; }\n  set activeDate(value: D) {\n    const oldActiveDate = this._activeDate;\n    const validDate =\n        this._getValidDateOrNull(this._dateAdapter.deserialize(value)) || this._dateAdapter.today();\n    this._activeDate = this._dateAdapter.clampDate(validDate, this.minDate, this.maxDate);\n    if (!this._hasSameMonthAndYear(oldActiveDate, this._activeDate)) {\n      this._init();\n    }\n  }\n  private _activeDate: D;\n\n  /** The currently selected date. */\n  @Input()\n  get selected(): D | null { return this._selected; }\n  set selected(value: D | null) {\n    this._selected = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n    this._selectedDate = this._getDateInCurrentMonth(this._selected);\n  }\n  private _selected: D | null;\n\n  /** The minimum selectable date. */\n  @Input()\n  get minDate(): D | null { return this._minDate; }\n  set minDate(value: D | null) {\n    this._minDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _minDate: D | null;\n\n  /** The maximum selectable date. */\n  @Input()\n  get maxDate(): D | null { return this._maxDate; }\n  set maxDate(value: D | null) {\n    this._maxDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _maxDate: D | null;\n\n  /** A function used to filter which dates are selectable. */\n  @Input() dateFilter: (date: D) => boolean;\n\n  /** Emits when a new date is selected. */\n  @Output() readonly selectedChange: EventEmitter<D | null> = new EventEmitter<D | null>();\n\n  /** Emits when any date is selected. */\n  @Output() readonly _userSelection: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Emits when any date is activated. */\n  @Output() readonly activeDateChange: EventEmitter<D> = new EventEmitter<D>();\n\n  /** The body of calendar table */\n  @ViewChild(MatCalendarBody) _matCalendarBody: MatCalendarBody;\n\n  /** The label for this month (e.g. \"January 2017\"). */\n  _monthLabel: string;\n\n  /** Grid of calendar cells representing the dates of the month. */\n  _weeks: MatCalendarCell[][];\n\n  /** The number of blank cells in the first row before the 1st of the month. */\n  _firstWeekOffset: number;\n\n  /**\n   * The date of the month that the currently selected Date falls on.\n   * Null if the currently selected Date is in another month.\n   */\n  _selectedDate: number | null;\n\n  /** The date of the month that today falls on. Null if today is in another month. */\n  _todayDate: number | null;\n\n  /** The names of the weekdays. */\n  _weekdays: {long: string, narrow: string}[];\n\n  constructor(private _changeDetectorRef: ChangeDetectorRef,\n              @Optional() @Inject(MAT_DATE_FORMATS) private _dateFormats: MatDateFormats,\n              @Optional() public _dateAdapter: DateAdapter<D>,\n              @Optional() private _dir?: Directionality) {\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n    if (!this._dateFormats) {\n      throw createMissingDateImplError('MAT_DATE_FORMATS');\n    }\n\n    const firstDayOfWeek = this._dateAdapter.getFirstDayOfWeek();\n    const narrowWeekdays = this._dateAdapter.getDayOfWeekNames('narrow');\n    const longWeekdays = this._dateAdapter.getDayOfWeekNames('long');\n\n    // Rotate the labels for days of the week based on the configured first day of the week.\n    let weekdays = longWeekdays.map((long, i) => {\n      return {long, narrow: narrowWeekdays[i]};\n    });\n    this._weekdays = weekdays.slice(firstDayOfWeek).concat(weekdays.slice(0, firstDayOfWeek));\n\n    this._activeDate = this._dateAdapter.today();\n  }\n\n  ngAfterContentInit() {\n    this._init();\n  }\n\n  /** Handles when a new date is selected. */\n  _dateSelected(date: number) {\n    if (this._selectedDate != date) {\n      const selectedYear = this._dateAdapter.getYear(this.activeDate);\n      const selectedMonth = this._dateAdapter.getMonth(this.activeDate);\n      const selectedDate = this._dateAdapter.createDate(selectedYear, selectedMonth, date);\n\n      this.selectedChange.emit(selectedDate);\n    }\n\n    this._userSelection.emit();\n  }\n\n  /** Handles keydown events on the calendar body when calendar is in month view. */\n  _handleCalendarBodyKeydown(event: KeyboardEvent): void {\n    // TODO(mmalerba): We currently allow keyboard navigation to disabled dates, but just prevent\n    // disabled ones from being selected. This may not be ideal, we should look into whether\n    // navigation should skip over disabled dates, and if so, how to implement that efficiently.\n\n    const oldActiveDate = this._activeDate;\n    const isRtl = this._isRtl();\n\n    switch (event.keyCode) {\n      case LEFT_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate, isRtl ? 1 : -1);\n        break;\n      case RIGHT_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate, isRtl ? -1 : 1);\n        break;\n      case UP_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate, -7);\n        break;\n      case DOWN_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate, 7);\n        break;\n      case HOME:\n        this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate,\n            1 - this._dateAdapter.getDate(this._activeDate));\n        break;\n      case END:\n        this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate,\n            (this._dateAdapter.getNumDaysInMonth(this._activeDate) -\n              this._dateAdapter.getDate(this._activeDate)));\n        break;\n      case PAGE_UP:\n        this.activeDate = event.altKey ?\n            this._dateAdapter.addCalendarYears(this._activeDate, -1) :\n            this._dateAdapter.addCalendarMonths(this._activeDate, -1);\n        break;\n      case PAGE_DOWN:\n        this.activeDate = event.altKey ?\n            this._dateAdapter.addCalendarYears(this._activeDate, 1) :\n            this._dateAdapter.addCalendarMonths(this._activeDate, 1);\n        break;\n      case ENTER:\n      case SPACE:\n        if (!this.dateFilter || this.dateFilter(this._activeDate)) {\n          this._dateSelected(this._dateAdapter.getDate(this._activeDate));\n          this._userSelection.emit();\n          // Prevent unexpected default actions such as form submission.\n          event.preventDefault();\n        }\n        return;\n      default:\n        // Don't prevent default or focus active cell on keys that we don't explicitly handle.\n        return;\n    }\n\n    if (this._dateAdapter.compareDate(oldActiveDate, this.activeDate)) {\n      this.activeDateChange.emit(this.activeDate);\n    }\n\n    this._focusActiveCell();\n    // Prevent unexpected default actions such as form submission.\n    event.preventDefault();\n  }\n\n  /** Initializes this month view. */\n  _init() {\n    this._selectedDate = this._getDateInCurrentMonth(this.selected);\n    this._todayDate = this._getDateInCurrentMonth(this._dateAdapter.today());\n    this._monthLabel =\n        this._dateAdapter.getMonthNames('short')[this._dateAdapter.getMonth(this.activeDate)]\n            .toLocaleUpperCase();\n\n    let firstOfMonth = this._dateAdapter.createDate(this._dateAdapter.getYear(this.activeDate),\n        this._dateAdapter.getMonth(this.activeDate), 1);\n    this._firstWeekOffset =\n        (DAYS_PER_WEEK + this._dateAdapter.getDayOfWeek(firstOfMonth) -\n         this._dateAdapter.getFirstDayOfWeek()) % DAYS_PER_WEEK;\n\n    this._createWeekCells();\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Focuses the active cell after the microtask queue is empty. */\n  _focusActiveCell() {\n    this._matCalendarBody._focusActiveCell();\n  }\n\n  /** Creates MatCalendarCells for the dates in this month. */\n  private _createWeekCells() {\n    const daysInMonth = this._dateAdapter.getNumDaysInMonth(this.activeDate);\n    const dateNames = this._dateAdapter.getDateNames();\n    this._weeks = [[]];\n    for (let i = 0, cell = this._firstWeekOffset; i < daysInMonth; i++, cell++) {\n      if (cell == DAYS_PER_WEEK) {\n        this._weeks.push([]);\n        cell = 0;\n      }\n      const date = this._dateAdapter.createDate(\n            this._dateAdapter.getYear(this.activeDate),\n            this._dateAdapter.getMonth(this.activeDate), i + 1);\n      const enabled = this._shouldEnableDate(date);\n      const ariaLabel = this._dateAdapter.format(date, this._dateFormats.display.dateA11yLabel);\n      this._weeks[this._weeks.length - 1]\n          .push(new MatCalendarCell(i + 1, dateNames[i], ariaLabel, enabled));\n    }\n  }\n\n  /** Date filter for the month */\n  private _shouldEnableDate(date: D): boolean {\n    return !!date &&\n        (!this.dateFilter || this.dateFilter(date)) &&\n        (!this.minDate || this._dateAdapter.compareDate(date, this.minDate) >= 0) &&\n        (!this.maxDate || this._dateAdapter.compareDate(date, this.maxDate) <= 0);\n  }\n\n  /**\n   * Gets the date in this month that the given Date falls on.\n   * Returns null if the given Date is in another month.\n   */\n  private _getDateInCurrentMonth(date: D | null): number | null {\n    return date && this._hasSameMonthAndYear(date, this.activeDate) ?\n        this._dateAdapter.getDate(date) : null;\n  }\n\n  /** Checks whether the 2 dates are non-null and fall within the same month of the same year. */\n  private _hasSameMonthAndYear(d1: D | null, d2: D | null): boolean {\n    return !!(d1 && d2 && this._dateAdapter.getMonth(d1) == this._dateAdapter.getMonth(d2) &&\n              this._dateAdapter.getYear(d1) == this._dateAdapter.getYear(d2));\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n\n  /** Determines whether the user has the RTL layout direction. */\n  private _isRtl() {\n    return this._dir && this._dir.value === 'rtl';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  DOWN_ARROW,\n  END,\n  ENTER,\n  HOME,\n  LEFT_ARROW,\n  PAGE_DOWN,\n  PAGE_UP,\n  RIGHT_ARROW,\n  UP_ARROW,\n  SPACE,\n} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  EventEmitter,\n  Input,\n  Optional,\n  Output,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {DateAdapter} from '@angular/material/core';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {MatCalendarBody, MatCalendarCell} from './calendar-body';\nimport {createMissingDateImplError} from './datepicker-errors';\n\nexport const yearsPerPage = 24;\n\nexport const yearsPerRow = 4;\n\n\n/**\n * An internal component used to display a year selector in the datepicker.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-multi-year-view',\n  templateUrl: 'multi-year-view.html',\n  exportAs: 'matMultiYearView',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class MatMultiYearView<D> implements AfterContentInit {\n  /** The date to display in this multi-year view (everything other than the year is ignored). */\n  @Input()\n  get activeDate(): D { return this._activeDate; }\n  set activeDate(value: D) {\n    let oldActiveDate = this._activeDate;\n    const validDate =\n        this._getValidDateOrNull(this._dateAdapter.deserialize(value)) || this._dateAdapter.today();\n    this._activeDate = this._dateAdapter.clampDate(validDate, this.minDate, this.maxDate);\n    if (Math.floor(this._dateAdapter.getYear(oldActiveDate) / yearsPerPage) !=\n        Math.floor(this._dateAdapter.getYear(this._activeDate) / yearsPerPage)) {\n      this._init();\n    }\n  }\n  private _activeDate: D;\n\n  /** The currently selected date. */\n  @Input()\n  get selected(): D | null { return this._selected; }\n  set selected(value: D | null) {\n    this._selected = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n    this._selectedYear = this._selected && this._dateAdapter.getYear(this._selected);\n  }\n  private _selected: D | null;\n\n  /** The minimum selectable date. */\n  @Input()\n  get minDate(): D | null { return this._minDate; }\n  set minDate(value: D | null) {\n    this._minDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _minDate: D | null;\n\n  /** The maximum selectable date. */\n  @Input()\n  get maxDate(): D | null { return this._maxDate; }\n  set maxDate(value: D | null) {\n    this._maxDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _maxDate: D | null;\n\n  /** A function used to filter which dates are selectable. */\n  @Input() dateFilter: (date: D) => boolean;\n\n  /** Emits when a new year is selected. */\n  @Output() readonly selectedChange: EventEmitter<D> = new EventEmitter<D>();\n\n  /** Emits the selected year. This doesn't imply a change on the selected date */\n  @Output() readonly yearSelected: EventEmitter<D> = new EventEmitter<D>();\n\n  /** Emits when any date is activated. */\n  @Output() readonly activeDateChange: EventEmitter<D> = new EventEmitter<D>();\n\n  /** The body of calendar table */\n  @ViewChild(MatCalendarBody) _matCalendarBody: MatCalendarBody;\n\n  /** Grid of calendar cells representing the currently displayed years. */\n  _years: MatCalendarCell[][];\n\n  /** The year that today falls on. */\n  _todayYear: number;\n\n  /** The year of the selected date. Null if the selected date is null. */\n  _selectedYear: number | null;\n\n  constructor(private _changeDetectorRef: ChangeDetectorRef,\n              @Optional() public _dateAdapter: DateAdapter<D>,\n              @Optional() private _dir?: Directionality) {\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n\n    this._activeDate = this._dateAdapter.today();\n  }\n\n  ngAfterContentInit() {\n    this._init();\n  }\n\n  /** Initializes this multi-year view. */\n  _init() {\n    this._todayYear = this._dateAdapter.getYear(this._dateAdapter.today());\n    let activeYear = this._dateAdapter.getYear(this._activeDate);\n    let activeOffset = activeYear % yearsPerPage;\n    this._years = [];\n    for (let i = 0, row: number[] = []; i < yearsPerPage; i++) {\n      row.push(activeYear - activeOffset + i);\n      if (row.length == yearsPerRow) {\n        this._years.push(row.map(year => this._createCellForYear(year)));\n        row = [];\n      }\n    }\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Handles when a new year is selected. */\n  _yearSelected(year: number) {\n    this.yearSelected.emit(this._dateAdapter.createDate(year, 0, 1));\n    let month = this._dateAdapter.getMonth(this.activeDate);\n    let daysInMonth =\n        this._dateAdapter.getNumDaysInMonth(this._dateAdapter.createDate(year, month, 1));\n    this.selectedChange.emit(this._dateAdapter.createDate(year, month,\n        Math.min(this._dateAdapter.getDate(this.activeDate), daysInMonth)));\n  }\n\n  /** Handles keydown events on the calendar body when calendar is in multi-year view. */\n  _handleCalendarBodyKeydown(event: KeyboardEvent): void {\n    // TODO(mmalerba): We currently allow keyboard navigation to disabled dates, but just prevent\n    // disabled ones from being selected. This may not be ideal, we should look into whether\n    // navigation should skip over disabled dates, and if so, how to implement that efficiently.\n\n    const oldActiveDate = this._activeDate;\n    const isRtl = this._isRtl();\n\n    switch (event.keyCode) {\n      case LEFT_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate, isRtl ? 1 : -1);\n        break;\n      case RIGHT_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate, isRtl ? -1 : 1);\n        break;\n      case UP_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate, -yearsPerRow);\n        break;\n      case DOWN_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate, yearsPerRow);\n        break;\n      case HOME:\n        this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate,\n            -this._dateAdapter.getYear(this._activeDate) % yearsPerPage);\n        break;\n      case END:\n        this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate,\n            yearsPerPage - this._dateAdapter.getYear(this._activeDate) % yearsPerPage - 1);\n        break;\n      case PAGE_UP:\n        this.activeDate =\n            this._dateAdapter.addCalendarYears(\n                this._activeDate, event.altKey ? -yearsPerPage * 10 : -yearsPerPage);\n        break;\n      case PAGE_DOWN:\n        this.activeDate =\n            this._dateAdapter.addCalendarYears(\n                this._activeDate, event.altKey ? yearsPerPage * 10 : yearsPerPage);\n        break;\n      case ENTER:\n      case SPACE:\n        this._yearSelected(this._dateAdapter.getYear(this._activeDate));\n        break;\n      default:\n        // Don't prevent default or focus active cell on keys that we don't explicitly handle.\n        return;\n    }\n\n    if (this._dateAdapter.compareDate(oldActiveDate, this.activeDate)) {\n      this.activeDateChange.emit(this.activeDate);\n    }\n\n    this._focusActiveCell();\n    // Prevent unexpected default actions such as form submission.\n    event.preventDefault();\n  }\n\n  _getActiveCell(): number {\n    return this._dateAdapter.getYear(this.activeDate) % yearsPerPage;\n  }\n\n  /** Focuses the active cell after the microtask queue is empty. */\n  _focusActiveCell() {\n    this._matCalendarBody._focusActiveCell();\n  }\n\n  /** Creates an MatCalendarCell for the given year. */\n  private _createCellForYear(year: number) {\n    let yearName = this._dateAdapter.getYearName(this._dateAdapter.createDate(year, 0, 1));\n    return new MatCalendarCell(year, yearName, yearName, this._shouldEnableYear(year));\n  }\n\n  /** Whether the given year is enabled. */\n  private _shouldEnableYear(year: number) {\n    // disable if the year is greater than maxDate lower than minDate\n    if (year === undefined || year === null ||\n        (this.maxDate && year > this._dateAdapter.getYear(this.maxDate)) ||\n        (this.minDate && year < this._dateAdapter.getYear(this.minDate))) {\n      return false;\n    }\n\n    // enable if it reaches here and there's no filter defined\n    if (!this.dateFilter) {\n      return true;\n    }\n\n    const firstOfYear = this._dateAdapter.createDate(year, 0, 1);\n\n    // If any date in the year is enabled count the year as enabled.\n    for (let date = firstOfYear; this._dateAdapter.getYear(date) == year;\n      date = this._dateAdapter.addCalendarDays(date, 1)) {\n      if (this.dateFilter(date)) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n\n  /** Determines whether the user has the RTL layout direction. */\n  private _isRtl() {\n    return this._dir && this._dir.value === 'rtl';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  DOWN_ARROW,\n  END,\n  ENTER,\n  HOME,\n  LEFT_ARROW,\n  PAGE_DOWN,\n  PAGE_UP,\n  RIGHT_ARROW,\n  UP_ARROW,\n  SPACE,\n} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  EventEmitter,\n  Inject,\n  Input,\n  Optional,\n  Output,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {DateAdapter, MAT_DATE_FORMATS, MatDateFormats} from '@angular/material/core';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {MatCalendarBody, MatCalendarCell} from './calendar-body';\nimport {createMissingDateImplError} from './datepicker-errors';\n\n/**\n * An internal component used to display a single year in the datepicker.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-year-view',\n  templateUrl: 'year-view.html',\n  exportAs: 'matYearView',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class MatYearView<D> implements AfterContentInit {\n  /** The date to display in this year view (everything other than the year is ignored). */\n  @Input()\n  get activeDate(): D { return this._activeDate; }\n  set activeDate(value: D) {\n    let oldActiveDate = this._activeDate;\n    const validDate =\n        this._getValidDateOrNull(this._dateAdapter.deserialize(value)) || this._dateAdapter.today();\n    this._activeDate = this._dateAdapter.clampDate(validDate, this.minDate, this.maxDate);\n    if (this._dateAdapter.getYear(oldActiveDate) !== this._dateAdapter.getYear(this._activeDate)) {\n      this._init();\n    }\n  }\n  private _activeDate: D;\n\n  /** The currently selected date. */\n  @Input()\n  get selected(): D | null { return this._selected; }\n  set selected(value: D | null) {\n    this._selected = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n    this._selectedMonth = this._getMonthInCurrentYear(this._selected);\n  }\n  private _selected: D | null;\n\n  /** The minimum selectable date. */\n  @Input()\n  get minDate(): D | null { return this._minDate; }\n  set minDate(value: D | null) {\n    this._minDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _minDate: D | null;\n\n  /** The maximum selectable date. */\n  @Input()\n  get maxDate(): D | null { return this._maxDate; }\n  set maxDate(value: D | null) {\n    this._maxDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _maxDate: D | null;\n\n  /** A function used to filter which dates are selectable. */\n  @Input() dateFilter: (date: D) => boolean;\n\n  /** Emits when a new month is selected. */\n  @Output() readonly selectedChange: EventEmitter<D> = new EventEmitter<D>();\n\n  /** Emits the selected month. This doesn't imply a change on the selected date */\n  @Output() readonly monthSelected: EventEmitter<D> = new EventEmitter<D>();\n\n  /** Emits when any date is activated. */\n  @Output() readonly activeDateChange: EventEmitter<D> = new EventEmitter<D>();\n\n  /** The body of calendar table */\n  @ViewChild(MatCalendarBody) _matCalendarBody: MatCalendarBody;\n\n  /** Grid of calendar cells representing the months of the year. */\n  _months: MatCalendarCell[][];\n\n  /** The label for this year (e.g. \"2017\"). */\n  _yearLabel: string;\n\n  /** The month in this year that today falls on. Null if today is in a different year. */\n  _todayMonth: number | null;\n\n  /**\n   * The month in this year that the selected Date falls on.\n   * Null if the selected Date is in a different year.\n   */\n  _selectedMonth: number | null;\n\n  constructor(private _changeDetectorRef: ChangeDetectorRef,\n              @Optional() @Inject(MAT_DATE_FORMATS) private _dateFormats: MatDateFormats,\n              @Optional() public _dateAdapter: DateAdapter<D>,\n              @Optional() private _dir?: Directionality) {\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n    if (!this._dateFormats) {\n      throw createMissingDateImplError('MAT_DATE_FORMATS');\n    }\n\n    this._activeDate = this._dateAdapter.today();\n  }\n\n  ngAfterContentInit() {\n    this._init();\n  }\n\n  /** Handles when a new month is selected. */\n  _monthSelected(month: number) {\n    const normalizedDate =\n          this._dateAdapter.createDate(this._dateAdapter.getYear(this.activeDate), month, 1);\n\n    this.monthSelected.emit(normalizedDate);\n\n    const daysInMonth = this._dateAdapter.getNumDaysInMonth(normalizedDate);\n\n    this.selectedChange.emit(this._dateAdapter.createDate(\n        this._dateAdapter.getYear(this.activeDate), month,\n        Math.min(this._dateAdapter.getDate(this.activeDate), daysInMonth)));\n  }\n\n  /** Handles keydown events on the calendar body when calendar is in year view. */\n  _handleCalendarBodyKeydown(event: KeyboardEvent): void {\n    // TODO(mmalerba): We currently allow keyboard navigation to disabled dates, but just prevent\n    // disabled ones from being selected. This may not be ideal, we should look into whether\n    // navigation should skip over disabled dates, and if so, how to implement that efficiently.\n\n    const oldActiveDate = this._activeDate;\n    const isRtl = this._isRtl();\n\n    switch (event.keyCode) {\n      case LEFT_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate, isRtl ? 1 : -1);\n        break;\n      case RIGHT_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate, isRtl ? -1 : 1);\n        break;\n      case UP_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate, -4);\n        break;\n      case DOWN_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate, 4);\n        break;\n      case HOME:\n        this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate,\n            -this._dateAdapter.getMonth(this._activeDate));\n        break;\n      case END:\n        this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate,\n            11 - this._dateAdapter.getMonth(this._activeDate));\n        break;\n      case PAGE_UP:\n        this.activeDate =\n            this._dateAdapter.addCalendarYears(this._activeDate, event.altKey ? -10 : -1);\n        break;\n      case PAGE_DOWN:\n        this.activeDate =\n            this._dateAdapter.addCalendarYears(this._activeDate, event.altKey ? 10 : 1);\n        break;\n      case ENTER:\n      case SPACE:\n        this._monthSelected(this._dateAdapter.getMonth(this._activeDate));\n        break;\n      default:\n        // Don't prevent default or focus active cell on keys that we don't explicitly handle.\n        return;\n    }\n\n    if (this._dateAdapter.compareDate(oldActiveDate, this.activeDate)) {\n      this.activeDateChange.emit(this.activeDate);\n    }\n\n    this._focusActiveCell();\n    // Prevent unexpected default actions such as form submission.\n    event.preventDefault();\n  }\n\n  /** Initializes this year view. */\n  _init() {\n    this._selectedMonth = this._getMonthInCurrentYear(this.selected);\n    this._todayMonth = this._getMonthInCurrentYear(this._dateAdapter.today());\n    this._yearLabel = this._dateAdapter.getYearName(this.activeDate);\n\n    let monthNames = this._dateAdapter.getMonthNames('short');\n    // First row of months only contains 5 elements so we can fit the year label on the same row.\n    this._months = [[0, 1, 2, 3], [4, 5, 6, 7], [8, 9, 10, 11]].map(row => row.map(\n        month => this._createCellForMonth(month, monthNames[month])));\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Focuses the active cell after the microtask queue is empty. */\n  _focusActiveCell() {\n    this._matCalendarBody._focusActiveCell();\n  }\n\n  /**\n   * Gets the month in this year that the given Date falls on.\n   * Returns null if the given Date is in another year.\n   */\n  private _getMonthInCurrentYear(date: D | null) {\n    return date && this._dateAdapter.getYear(date) == this._dateAdapter.getYear(this.activeDate) ?\n        this._dateAdapter.getMonth(date) : null;\n  }\n\n  /** Creates an MatCalendarCell for the given month. */\n  private _createCellForMonth(month: number, monthName: string) {\n    let ariaLabel = this._dateAdapter.format(\n        this._dateAdapter.createDate(this._dateAdapter.getYear(this.activeDate), month, 1),\n        this._dateFormats.display.monthYearA11yLabel);\n    return new MatCalendarCell(\n        month, monthName.toLocaleUpperCase(), ariaLabel, this._shouldEnableMonth(month));\n  }\n\n  /** Whether the given month is enabled. */\n  private _shouldEnableMonth(month: number) {\n\n    const activeYear = this._dateAdapter.getYear(this.activeDate);\n\n    if (month === undefined || month === null ||\n        this._isYearAndMonthAfterMaxDate(activeYear, month) ||\n        this._isYearAndMonthBeforeMinDate(activeYear, month)) {\n      return false;\n    }\n\n    if (!this.dateFilter) {\n      return true;\n    }\n\n    const firstOfMonth = this._dateAdapter.createDate(activeYear, month, 1);\n\n    // If any date in the month is enabled count the month as enabled.\n    for (let date = firstOfMonth; this._dateAdapter.getMonth(date) == month;\n         date = this._dateAdapter.addCalendarDays(date, 1)) {\n      if (this.dateFilter(date)) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  /**\n   * Tests whether the combination month/year is after this.maxDate, considering\n   * just the month and year of this.maxDate\n   */\n  private _isYearAndMonthAfterMaxDate(year: number, month: number) {\n    if (this.maxDate) {\n      const maxYear = this._dateAdapter.getYear(this.maxDate);\n      const maxMonth = this._dateAdapter.getMonth(this.maxDate);\n\n      return year > maxYear || (year === maxYear && month > maxMonth);\n    }\n\n    return false;\n  }\n\n  /**\n   * Tests whether the combination month/year is before this.minDate, considering\n   * just the month and year of this.minDate\n   */\n  private _isYearAndMonthBeforeMinDate(year: number, month: number) {\n    if (this.minDate) {\n      const minYear = this._dateAdapter.getYear(this.minDate);\n      const minMonth = this._dateAdapter.getMonth(this.minDate);\n\n      return year < minYear || (year === minYear && month < minMonth);\n    }\n\n    return false;\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n\n  /** Determines whether the user has the RTL layout direction. */\n  private _isRtl() {\n    return this._dir && this._dir.value === 'rtl';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ComponentPortal, ComponentType, Portal} from '@angular/cdk/portal';\nimport {\n  AfterContentInit,\n  AfterViewChecked,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  OnChanges,\n  OnDestroy,\n  Optional,\n  Output,\n  SimpleChanges,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {DateAdapter, MAT_DATE_FORMATS, MatDateFormats} from '@angular/material/core';\nimport {Subject, Subscription} from 'rxjs';\nimport {createMissingDateImplError} from './datepicker-errors';\nimport {MatDatepickerIntl} from './datepicker-intl';\nimport {MatMonthView} from './month-view';\nimport {MatMultiYearView, yearsPerPage} from './multi-year-view';\nimport {MatYearView} from './year-view';\n\n/**\n * Possible views for the calendar.\n * @docs-private\n */\nexport type MatCalendarView = 'month' | 'year' | 'multi-year';\n\n/** Default header for MatCalendar */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-calendar-header',\n  templateUrl: 'calendar-header.html',\n  exportAs: 'matCalendarHeader',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatCalendarHeader<D> {\n  constructor(private _intl: MatDatepickerIntl,\n              @Inject(forwardRef(() => MatCalendar)) public calendar: MatCalendar<D>,\n              @Optional() private _dateAdapter: DateAdapter<D>,\n              @Optional() @Inject(MAT_DATE_FORMATS) private _dateFormats: MatDateFormats,\n              changeDetectorRef: ChangeDetectorRef) {\n\n    this.calendar.stateChanges.subscribe(() => changeDetectorRef.markForCheck());\n  }\n\n  /** The label for the current calendar view. */\n  get periodButtonText(): string {\n    if (this.calendar.currentView == 'month') {\n      return this._dateAdapter\n          .format(this.calendar.activeDate, this._dateFormats.display.monthYearLabel)\n              .toLocaleUpperCase();\n    }\n    if (this.calendar.currentView == 'year') {\n      return this._dateAdapter.getYearName(this.calendar.activeDate);\n    }\n    const activeYear = this._dateAdapter.getYear(this.calendar.activeDate);\n    const firstYearInView = this._dateAdapter.getYearName(\n        this._dateAdapter.createDate(activeYear - activeYear % 24, 0, 1));\n    const lastYearInView = this._dateAdapter.getYearName(\n        this._dateAdapter.createDate(activeYear + yearsPerPage - 1 - activeYear % 24, 0, 1));\n    return `${firstYearInView} \\u2013 ${lastYearInView}`;\n  }\n\n  get periodButtonLabel(): string {\n    return this.calendar.currentView == 'month' ?\n        this._intl.switchToMultiYearViewLabel : this._intl.switchToMonthViewLabel;\n  }\n\n  /** The label for the the previous button. */\n  get prevButtonLabel(): string {\n    return {\n      'month': this._intl.prevMonthLabel,\n      'year': this._intl.prevYearLabel,\n      'multi-year': this._intl.prevMultiYearLabel\n    }[this.calendar.currentView];\n  }\n\n  /** The label for the the next button. */\n  get nextButtonLabel(): string {\n    return {\n      'month': this._intl.nextMonthLabel,\n      'year': this._intl.nextYearLabel,\n      'multi-year': this._intl.nextMultiYearLabel\n    }[this.calendar.currentView];\n  }\n\n  /** Handles user clicks on the period label. */\n  currentPeriodClicked(): void {\n    this.calendar.currentView = this.calendar.currentView == 'month' ? 'multi-year' : 'month';\n  }\n\n  /** Handles user clicks on the previous button. */\n  previousClicked(): void {\n    this.calendar.activeDate = this.calendar.currentView == 'month' ?\n        this._dateAdapter.addCalendarMonths(this.calendar.activeDate, -1) :\n            this._dateAdapter.addCalendarYears(\n                this.calendar.activeDate, this.calendar.currentView == 'year' ? -1 : -yearsPerPage\n            );\n  }\n\n  /** Handles user clicks on the next button. */\n  nextClicked(): void {\n    this.calendar.activeDate = this.calendar.currentView == 'month' ?\n        this._dateAdapter.addCalendarMonths(this.calendar.activeDate, 1) :\n            this._dateAdapter.addCalendarYears(\n                this.calendar.activeDate,\n                    this.calendar.currentView == 'year' ? 1 : yearsPerPage\n            );\n  }\n\n  /** Whether the previous period button is enabled. */\n  previousEnabled(): boolean {\n    if (!this.calendar.minDate) {\n      return true;\n    }\n    return !this.calendar.minDate ||\n        !this._isSameView(this.calendar.activeDate, this.calendar.minDate);\n  }\n\n  /** Whether the next period button is enabled. */\n  nextEnabled(): boolean {\n    return !this.calendar.maxDate ||\n        !this._isSameView(this.calendar.activeDate, this.calendar.maxDate);\n  }\n\n  /** Whether the two dates represent the same view in the current view mode (month or year). */\n  private _isSameView(date1: D, date2: D): boolean {\n    if (this.calendar.currentView == 'month') {\n      return this._dateAdapter.getYear(date1) == this._dateAdapter.getYear(date2) &&\n          this._dateAdapter.getMonth(date1) == this._dateAdapter.getMonth(date2);\n    }\n    if (this.calendar.currentView == 'year') {\n      return this._dateAdapter.getYear(date1) == this._dateAdapter.getYear(date2);\n    }\n    // Otherwise we are in 'multi-year' view.\n    return Math.floor(this._dateAdapter.getYear(date1) / yearsPerPage) ==\n        Math.floor(this._dateAdapter.getYear(date2) / yearsPerPage);\n  }\n}\n\n/**\n * A calendar that is used as part of the datepicker.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-calendar',\n  templateUrl: 'calendar.html',\n  styleUrls: ['calendar.css'],\n  host: {\n    'class': 'mat-calendar',\n  },\n  exportAs: 'matCalendar',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatCalendar<D> implements AfterContentInit, AfterViewChecked, OnDestroy, OnChanges {\n  /** An input indicating the type of the header component, if set. */\n  @Input() headerComponent: ComponentType<any>;\n\n  /** A portal containing the header component type for this calendar. */\n  _calendarHeaderPortal: Portal<any>;\n\n  private _intlChanges: Subscription;\n\n  /**\n   * Used for scheduling that focus should be moved to the active cell on the next tick.\n   * We need to schedule it, rather than do it immediately, because we have to wait\n   * for Angular to re-evaluate the view children.\n   */\n  private _moveFocusOnNextTick = false;\n\n  /** A date representing the period (month or year) to start the calendar in. */\n  @Input()\n  get startAt(): D | null { return this._startAt; }\n  set startAt(value: D | null) {\n    this._startAt = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _startAt: D | null;\n\n  /** Whether the calendar should be started in month or year view. */\n  @Input() startView: MatCalendarView = 'month';\n\n  /** The currently selected date. */\n  @Input()\n  get selected(): D | null { return this._selected; }\n  set selected(value: D | null) {\n    this._selected = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _selected: D | null;\n\n  /** The minimum selectable date. */\n  @Input()\n  get minDate(): D | null { return this._minDate; }\n  set minDate(value: D | null) {\n    this._minDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _minDate: D | null;\n\n  /** The maximum selectable date. */\n  @Input()\n  get maxDate(): D | null { return this._maxDate; }\n  set maxDate(value: D | null) {\n    this._maxDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _maxDate: D | null;\n\n  /** A function used to filter which dates are selectable. */\n  @Input() dateFilter: (date: D) => boolean;\n\n  /** Emits when the currently selected date changes. */\n  @Output() readonly selectedChange: EventEmitter<D> = new EventEmitter<D>();\n\n  /**\n   * Emits the year chosen in multiyear view.\n   * This doesn't imply a change on the selected date.\n   */\n  @Output() readonly yearSelected: EventEmitter<D> = new EventEmitter<D>();\n\n  /**\n   * Emits the month chosen in year view.\n   * This doesn't imply a change on the selected date.\n   */\n  @Output() readonly monthSelected: EventEmitter<D> = new EventEmitter<D>();\n\n  /** Emits when any date is selected. */\n  @Output() readonly _userSelection: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Reference to the current month view component. */\n  @ViewChild(MatMonthView) monthView: MatMonthView<D>;\n\n  /** Reference to the current year view component. */\n  @ViewChild(MatYearView) yearView: MatYearView<D>;\n\n  /** Reference to the current multi-year view component. */\n  @ViewChild(MatMultiYearView) multiYearView: MatMultiYearView<D>;\n\n  /**\n   * The current active date. This determines which time period is shown and which date is\n   * highlighted when using keyboard navigation.\n   */\n  get activeDate(): D { return this._clampedActiveDate; }\n  set activeDate(value: D) {\n    this._clampedActiveDate = this._dateAdapter.clampDate(value, this.minDate, this.maxDate);\n    this.stateChanges.next();\n  }\n  private _clampedActiveDate: D;\n\n  /** Whether the calendar is in month view. */\n  get currentView(): MatCalendarView { return this._currentView; }\n  set currentView(value: MatCalendarView) {\n    this._currentView = value;\n    this._moveFocusOnNextTick = true;\n  }\n  private _currentView: MatCalendarView;\n\n  /**\n   * Emits whenever there is a state change that the header may need to respond to.\n   */\n  stateChanges = new Subject<void>();\n\n  constructor(_intl: MatDatepickerIntl,\n              @Optional() private _dateAdapter: DateAdapter<D>,\n              @Optional() @Inject(MAT_DATE_FORMATS) private _dateFormats: MatDateFormats,\n              private _changeDetectorRef: ChangeDetectorRef) {\n\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n\n    if (!this._dateFormats) {\n      throw createMissingDateImplError('MAT_DATE_FORMATS');\n    }\n\n    this._intlChanges = _intl.changes.subscribe(() => {\n      _changeDetectorRef.markForCheck();\n      this.stateChanges.next();\n    });\n  }\n\n  ngAfterContentInit() {\n    this._calendarHeaderPortal = new ComponentPortal(this.headerComponent || MatCalendarHeader);\n    this.activeDate = this.startAt || this._dateAdapter.today();\n\n    // Assign to the private property since we don't want to move focus on init.\n    this._currentView = this.startView;\n  }\n\n  ngAfterViewChecked() {\n    if (this._moveFocusOnNextTick) {\n      this._moveFocusOnNextTick = false;\n      this.focusActiveCell();\n    }\n  }\n\n  ngOnDestroy() {\n    this._intlChanges.unsubscribe();\n    this.stateChanges.complete();\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    const change = changes.minDate || changes.maxDate || changes.dateFilter;\n\n    if (change && !change.firstChange) {\n      const view = this._getCurrentViewComponent();\n\n      if (view) {\n        // We need to `detectChanges` manually here, because the `minDate`, `maxDate` etc. are\n        // passed down to the view via data bindings which won't be up-to-date when we call `_init`.\n        this._changeDetectorRef.detectChanges();\n        view._init();\n      }\n    }\n\n    this.stateChanges.next();\n  }\n\n  focusActiveCell() {\n    this._getCurrentViewComponent()._focusActiveCell();\n  }\n\n  /** Updates today's date after an update of the active date */\n  updateTodaysDate() {\n    let view = this.currentView == 'month' ? this.monthView :\n            (this.currentView == 'year' ? this.yearView : this.multiYearView);\n\n    view.ngAfterContentInit();\n  }\n\n  /** Handles date selection in the month view. */\n  _dateSelected(date: D): void {\n    if (!this._dateAdapter.sameDate(date, this.selected)) {\n      this.selectedChange.emit(date);\n    }\n  }\n\n  /** Handles year selection in the multiyear view. */\n  _yearSelectedInMultiYearView(normalizedYear: D) {\n    this.yearSelected.emit(normalizedYear);\n  }\n\n  /** Handles month selection in the year view. */\n  _monthSelectedInYearView(normalizedMonth: D) {\n    this.monthSelected.emit(normalizedMonth);\n  }\n\n  _userSelected(): void {\n    this._userSelection.emit();\n  }\n\n  /** Handles year/month selection in the multi-year/year views. */\n  _goToDateInView(date: D, view: 'month' | 'year' | 'multi-year'): void {\n    this.activeDate = date;\n    this.currentView = view;\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n\n  /** Returns the component instance that corresponds to the current calendar view. */\n  private _getCurrentViewComponent() {\n    return this.monthView || this.yearView || this.multiYearView;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/**\n * Animations used by the Material datepicker.\n * @docs-private\n */\nexport const matDatepickerAnimations: {\n  readonly transformPanel: AnimationTriggerMetadata;\n  readonly fadeInCalendar: AnimationTriggerMetadata;\n} = {\n  /** Transforms the height of the datepicker's calendar. */\n  transformPanel: trigger('transformPanel', [\n    state('void', style({\n      opacity: 0,\n      transform: 'scale(1, 0.8)'\n    })),\n    transition('void => enter',  animate('120ms cubic-bezier(0, 0, 0.2, 1)', style({\n      opacity: 1,\n      transform: 'scale(1, 1)'\n    }))),\n    transition('* => void', animate('100ms linear', style({opacity: 0})))\n  ]),\n\n  /** Fades in the content of the calendar. */\n  fadeInCalendar: trigger('fadeInCalendar', [\n    state('void', style({opacity: 0})),\n    state('enter', style({opacity: 1})),\n\n    // TODO(crisbeto): this animation should be removed since it isn't quite on spec, but we\n    // need to keep it until #12440 gets in, otherwise the exit animation will look glitchy.\n    transition('void => *', animate('120ms 100ms cubic-bezier(0.55, 0, 0.55, 0.2)'))\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusKeyManager} from '@angular/cdk/a11y';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {SelectionModel} from '@angular/cdk/collections';\nimport {BACKSPACE, END, HOME} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  DoCheck,\n  ElementRef,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Output,\n  QueryList,\n  Self,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {ControlValueAccessor, FormGroupDirective, NgControl, NgForm} from '@angular/forms';\nimport {\n  CanUpdateErrorState,\n  CanUpdateErrorStateCtor,\n  ErrorStateMatcher,\n  mixinErrorState,\n} from '@angular/material/core';\nimport {MatFormFieldControl} from '@angular/material/form-field';\nimport {merge, Observable, Subject, Subscription} from 'rxjs';\nimport {startWith, takeUntil} from 'rxjs/operators';\nimport {MatChip, MatChipEvent, MatChipSelectionChange} from './chip';\nimport {MatChipTextControl} from './chip-text-control';\n\n\n// Boilerplate for applying mixins to MatChipList.\n/** @docs-private */\nexport class MatChipListBase {\n  constructor(public _defaultErrorStateMatcher: ErrorStateMatcher,\n              public _parentForm: NgForm,\n              public _parentFormGroup: FormGroupDirective,\n              /** @docs-private */\n              public ngControl: NgControl) {}\n}\nexport const _MatChipListMixinBase: CanUpdateErrorStateCtor & typeof MatChipListBase =\n    mixinErrorState(MatChipListBase);\n\n\n// Increasing integer for generating unique ids for chip-list components.\nlet nextUniqueId = 0;\n\n/** Change event object that is emitted when the chip list value has changed. */\nexport class MatChipListChange {\n  constructor(\n    /** Chip list that emitted the event. */\n    public source: MatChipList,\n    /** Value of the chip list when the event was emitted. */\n    public value: any) { }\n}\n\n\n/**\n * A material design chips component (named ChipList for it's similarity to the List component).\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-chip-list',\n  template: `<div class=\"mat-chip-list-wrapper\"><ng-content></ng-content></div>`,\n  exportAs: 'matChipList',\n  host: {\n    '[attr.tabindex]': 'disabled ? null : _tabIndex',\n    '[attr.aria-describedby]': '_ariaDescribedby || null',\n    '[attr.aria-required]': 'required.toString()',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.aria-invalid]': 'errorState',\n    '[attr.aria-multiselectable]': 'multiple',\n    '[attr.role]': 'role',\n    '[class.mat-chip-list-disabled]': 'disabled',\n    '[class.mat-chip-list-invalid]': 'errorState',\n    '[class.mat-chip-list-required]': 'required',\n    '[attr.aria-orientation]': 'ariaOrientation',\n    'class': 'mat-chip-list',\n    '(focus)': 'focus()',\n    '(blur)': '_blur()',\n    '(keydown)': '_keydown($event)',\n    '[id]': '_uid',\n  },\n  providers: [{provide: MatFormFieldControl, useExisting: MatChipList}],\n  styleUrls: ['chips.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class MatChipList extends _MatChipListMixinBase implements MatFormFieldControl<any>,\n  ControlValueAccessor, AfterContentInit, DoCheck, OnInit, OnDestroy, CanUpdateErrorState {\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  readonly controlType: string = 'mat-chip-list';\n\n  /**\n   * When a chip is destroyed, we store the index of the destroyed chip until the chips\n   * query list notifies about the update. This is necessary because we cannot determine an\n   * appropriate chip that should receive focus until the array of chips updated completely.\n   */\n  private _lastDestroyedChipIndex: number | null = null;\n\n  /** Subject that emits when the component has been destroyed. */\n  private _destroyed = new Subject<void>();\n\n  /** Subscription to focus changes in the chips. */\n  private _chipFocusSubscription: Subscription | null;\n\n  /** Subscription to blur changes in the chips. */\n  private _chipBlurSubscription: Subscription | null;\n\n  /** Subscription to selection changes in chips. */\n  private _chipSelectionSubscription: Subscription | null;\n\n  /** Subscription to remove changes in chips. */\n  private _chipRemoveSubscription: Subscription | null;\n\n  /** The chip input to add more chips */\n  protected _chipInput: MatChipTextControl;\n\n  /** Uid of the chip list */\n  _uid: string = `mat-chip-list-${nextUniqueId++}`;\n\n  /** The aria-describedby attribute on the chip list for improved a11y. */\n  _ariaDescribedby: string;\n\n  /** Tab index for the chip list. */\n  _tabIndex = 0;\n\n  /**\n   * User defined tab index.\n   * When it is not null, use user defined tab index. Otherwise use _tabIndex\n   */\n  _userTabIndex: number | null = null;\n\n  /** The FocusKeyManager which handles focus. */\n  _keyManager: FocusKeyManager<MatChip>;\n\n  /** Function when touched */\n  _onTouched = () => {};\n\n  /** Function when changed */\n  _onChange: (value: any) => void = () => {};\n\n  _selectionModel: SelectionModel<MatChip>;\n\n  /** The array of selected chips inside chip list. */\n  get selected(): MatChip[] | MatChip {\n    return this.multiple ? this._selectionModel.selected : this._selectionModel.selected[0];\n  }\n\n  /** The ARIA role applied to the chip list. */\n  get role(): string | null { return this.empty ? null : 'listbox'; }\n\n  /** An object used to control when error messages are shown. */\n  @Input() errorStateMatcher: ErrorStateMatcher;\n\n  /** Whether the user should be allowed to select multiple chips. */\n  @Input()\n  get multiple(): boolean { return this._multiple; }\n  set multiple(value: boolean) {\n    this._multiple = coerceBooleanProperty(value);\n  }\n  private _multiple: boolean = false;\n\n  /**\n   * A function to compare the option values with the selected values. The first argument\n   * is a value from an option. The second is a value from the selection. A boolean\n   * should be returned.\n   */\n  @Input()\n  get compareWith(): (o1: any, o2: any) => boolean { return this._compareWith; }\n  set compareWith(fn: (o1: any, o2: any) => boolean) {\n    this._compareWith = fn;\n    if (this._selectionModel) {\n      // A different comparator means the selection could change.\n      this._initializeSelection();\n    }\n  }\n  private _compareWith = (o1: any, o2: any) => o1 === o2;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get value(): any { return this._value; }\n  set value(value: any) {\n    this.writeValue(value);\n    this._value = value;\n  }\n  protected _value: any;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  get id(): string {\n    return this._chipInput ? this._chipInput.id : this._uid;\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get required(): boolean { return this._required; }\n  set required(value: boolean) {\n    this._required = coerceBooleanProperty(value);\n    this.stateChanges.next();\n  }\n  protected _required: boolean = false;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get placeholder(): string {\n    return this._chipInput ? this._chipInput.placeholder : this._placeholder;\n  }\n  set placeholder(value: string) {\n    this._placeholder = value;\n    this.stateChanges.next();\n  }\n  protected _placeholder: string;\n\n  /** Whether any chips or the matChipInput inside of this chip-list has focus. */\n  get focused(): boolean {\n    return (this._chipInput && this._chipInput.focused) || this._hasFocusedChip();\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  get empty(): boolean {\n    return (!this._chipInput || this._chipInput.empty) && this.chips.length === 0;\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  get shouldLabelFloat(): boolean { return !this.empty || this.focused; }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get disabled(): boolean { return this.ngControl ? !!this.ngControl.disabled : this._disabled; }\n  set disabled(value: boolean) {\n    this._disabled = coerceBooleanProperty(value);\n\n    if (this.chips) {\n      this.chips.forEach(chip => chip.disabled = this._disabled);\n    }\n  }\n  protected _disabled: boolean = false;\n\n  /** Orientation of the chip list. */\n  @Input('aria-orientation') ariaOrientation: 'horizontal' | 'vertical' = 'horizontal';\n\n  /**\n   * Whether or not this chip list is selectable. When a chip list is not selectable,\n   * the selected states for all the chips inside the chip list are always ignored.\n   */\n  @Input()\n  get selectable(): boolean { return this._selectable; }\n  set selectable(value: boolean) {\n    this._selectable = coerceBooleanProperty(value);\n\n    if (this.chips) {\n      this.chips.forEach(chip => chip.chipListSelectable = this._selectable);\n    }\n  }\n  protected _selectable: boolean = true;\n\n  @Input()\n  set tabIndex(value: number) {\n    this._userTabIndex = value;\n    this._tabIndex = value;\n  }\n\n  /** Combined stream of all of the child chips' selection change events. */\n  get chipSelectionChanges(): Observable<MatChipSelectionChange> {\n    return merge(...this.chips.map(chip => chip.selectionChange));\n  }\n\n  /** Combined stream of all of the child chips' focus change events. */\n  get chipFocusChanges(): Observable<MatChipEvent> {\n    return merge(...this.chips.map(chip => chip._onFocus));\n  }\n\n  /** Combined stream of all of the child chips' blur change events. */\n  get chipBlurChanges(): Observable<MatChipEvent> {\n    return merge(...this.chips.map(chip => chip._onBlur));\n  }\n\n  /** Combined stream of all of the child chips' remove change events. */\n  get chipRemoveChanges(): Observable<MatChipEvent> {\n    return merge(...this.chips.map(chip => chip.destroyed));\n  }\n\n  /** Event emitted when the selected chip list value has been changed by the user. */\n  @Output() readonly change: EventEmitter<MatChipListChange> =\n      new EventEmitter<MatChipListChange>();\n\n  /**\n   * Event that emits whenever the raw value of the chip-list changes. This is here primarily\n   * to facilitate the two-way binding for the `value` input.\n   * @docs-private\n   */\n  @Output() readonly valueChange: EventEmitter<any> = new EventEmitter<any>();\n\n  /** The chip components contained within this chip list. */\n  @ContentChildren(MatChip) chips: QueryList<MatChip>;\n\n  constructor(protected _elementRef: ElementRef<HTMLElement>,\n              private _changeDetectorRef: ChangeDetectorRef,\n              @Optional() private _dir: Directionality,\n              @Optional() _parentForm: NgForm,\n              @Optional() _parentFormGroup: FormGroupDirective,\n              _defaultErrorStateMatcher: ErrorStateMatcher,\n              /** @docs-private */\n              @Optional() @Self() public ngControl: NgControl) {\n    super(_defaultErrorStateMatcher, _parentForm, _parentFormGroup, ngControl);\n    if (this.ngControl) {\n      this.ngControl.valueAccessor = this;\n    }\n  }\n\n  ngAfterContentInit() {\n    this._keyManager = new FocusKeyManager<MatChip>(this.chips)\n      .withWrap()\n      .withVerticalOrientation()\n      .withHorizontalOrientation(this._dir ? this._dir.value : 'ltr');\n\n    if (this._dir) {\n      this._dir.change\n        .pipe(takeUntil(this._destroyed))\n        .subscribe(dir => this._keyManager.withHorizontalOrientation(dir));\n    }\n\n    // Prevents the chip list from capturing focus and redirecting\n    // it back to the first chip when the user tabs out.\n    this._keyManager.tabOut.pipe(takeUntil(this._destroyed)).subscribe(() => {\n      this._tabIndex = -1;\n      setTimeout(() => this._tabIndex = this._userTabIndex || 0);\n    });\n\n    // When the list changes, re-subscribe\n    this.chips.changes.pipe(startWith(null), takeUntil(this._destroyed)).subscribe(() => {\n      this._resetChips();\n\n      // Reset chips selected/deselected status\n      this._initializeSelection();\n\n      // Check to see if we need to update our tab index\n      this._updateTabIndex();\n\n      // Check to see if we have a destroyed chip and need to refocus\n      this._updateFocusForDestroyedChips();\n\n      this.stateChanges.next();\n    });\n  }\n\n  ngOnInit() {\n    this._selectionModel = new SelectionModel<MatChip>(this.multiple, undefined, false);\n    this.stateChanges.next();\n  }\n\n  ngDoCheck() {\n    if (this.ngControl) {\n      // We need to re-evaluate this on every change detection cycle, because there are some\n      // error triggers that we can't subscribe to (e.g. parent form submissions). This means\n      // that whatever logic is in here has to be super lean or we risk destroying the performance.\n      this.updateErrorState();\n    }\n  }\n\n  ngOnDestroy() {\n    this._destroyed.next();\n    this._destroyed.complete();\n    this.stateChanges.complete();\n\n    this._dropSubscriptions();\n  }\n\n\n  /** Associates an HTML input element with this chip list. */\n  registerInput(inputElement: MatChipTextControl): void {\n    this._chipInput = inputElement;\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  setDescribedByIds(ids: string[]) { this._ariaDescribedby = ids.join(' '); }\n\n  // Implemented as part of ControlValueAccessor.\n  writeValue(value: any): void {\n    if (this.chips) {\n      this._setSelectionByValue(value, false);\n    }\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnChange(fn: (value: any) => void): void {\n    this._onChange = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnTouched(fn: () => void): void {\n    this._onTouched = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n    this.stateChanges.next();\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  onContainerClick(event: MouseEvent) {\n    if (!this._originatesFromChip(event)) {\n      this.focus();\n    }\n  }\n\n  /**\n   * Focuses the the first non-disabled chip in this chip list, or the associated input when there\n   * are no eligible chips.\n   */\n  focus(): void {\n    if (this.disabled) {\n      return;\n    }\n\n    // TODO: ARIA says this should focus the first `selected` chip if any are selected.\n    // Focus on first element if there's no chipInput inside chip-list\n    if (this._chipInput && this._chipInput.focused) {\n      // do nothing\n    } else if (this.chips.length > 0) {\n      this._keyManager.setFirstItemActive();\n      this.stateChanges.next();\n    } else {\n      this._focusInput();\n      this.stateChanges.next();\n    }\n  }\n\n  /** Attempt to focus an input if we have one. */\n  _focusInput() {\n    if (this._chipInput) {\n      this._chipInput.focus();\n    }\n  }\n\n  /**\n   * Pass events to the keyboard manager. Available here for tests.\n   */\n  _keydown(event: KeyboardEvent) {\n    const target = event.target as HTMLElement;\n\n    // If they are on an empty input and hit backspace, focus the last chip\n    if (event.keyCode === BACKSPACE && this._isInputEmpty(target)) {\n      this._keyManager.setLastItemActive();\n      event.preventDefault();\n    } else if (target && target.classList.contains('mat-chip')) {\n      if (event.keyCode === HOME) {\n        this._keyManager.setFirstItemActive();\n        event.preventDefault();\n      } else if (event.keyCode === END) {\n        this._keyManager.setLastItemActive();\n        event.preventDefault();\n      } else {\n        this._keyManager.onKeydown(event);\n      }\n\n      this.stateChanges.next();\n    }\n  }\n\n\n  /**\n   * Check the tab index as you should not be allowed to focus an empty list.\n   */\n  protected _updateTabIndex(): void {\n    // If we have 0 chips, we should not allow keyboard focus\n    this._tabIndex = this._userTabIndex || (this.chips.length === 0 ? -1 : 0);\n  }\n\n  /**\n   * If the amount of chips changed, we need to update the\n   * key manager state and focus the next closest chip.\n   */\n  protected _updateFocusForDestroyedChips() {\n    if (this._lastDestroyedChipIndex != null && this.chips.length) {\n      const newChipIndex = Math.min(this._lastDestroyedChipIndex, this.chips.length - 1);\n      this._keyManager.setActiveItem(newChipIndex);\n    }\n\n    this._lastDestroyedChipIndex = null;\n  }\n\n  /**\n   * Utility to ensure all indexes are valid.\n   *\n   * @param index The index to be checked.\n   * @returns True if the index is valid for our list of chips.\n   */\n  private _isValidIndex(index: number): boolean {\n    return index >= 0 && index < this.chips.length;\n  }\n\n  private _isInputEmpty(element: HTMLElement): boolean {\n    if (element && element.nodeName.toLowerCase() === 'input') {\n      let input = element as HTMLInputElement;\n      return !input.value;\n    }\n\n    return false;\n  }\n\n  _setSelectionByValue(value: any, isUserInput: boolean = true) {\n    this._clearSelection();\n    this.chips.forEach(chip => chip.deselect());\n\n    if (Array.isArray(value)) {\n      value.forEach(currentValue => this._selectValue(currentValue, isUserInput));\n      this._sortValues();\n    } else {\n      const correspondingChip = this._selectValue(value, isUserInput);\n\n      // Shift focus to the active item. Note that we shouldn't do this in multiple\n      // mode, because we don't know what chip the user interacted with last.\n      if (correspondingChip) {\n        if (isUserInput) {\n          this._keyManager.setActiveItem(correspondingChip);\n        }\n      }\n    }\n  }\n\n  /**\n   * Finds and selects the chip based on its value.\n   * @returns Chip that has the corresponding value.\n   */\n  private _selectValue(value: any, isUserInput: boolean = true): MatChip | undefined {\n\n    const correspondingChip = this.chips.find(chip => {\n      return chip.value != null && this._compareWith(chip.value,  value);\n    });\n\n    if (correspondingChip) {\n      isUserInput ? correspondingChip.selectViaInteraction() : correspondingChip.select();\n      this._selectionModel.select(correspondingChip);\n    }\n\n    return correspondingChip;\n  }\n\n  private _initializeSelection(): void {\n    // Defer setting the value in order to avoid the \"Expression\n    // has changed after it was checked\" errors from Angular.\n    Promise.resolve().then(() => {\n      if (this.ngControl || this._value) {\n        this._setSelectionByValue(this.ngControl ? this.ngControl.value : this._value, false);\n        this.stateChanges.next();\n      }\n    });\n  }\n\n  /**\n   * Deselects every chip in the list.\n   * @param skip Chip that should not be deselected.\n   */\n  private _clearSelection(skip?: MatChip): void {\n    this._selectionModel.clear();\n    this.chips.forEach(chip => {\n      if (chip !== skip) {\n        chip.deselect();\n      }\n    });\n    this.stateChanges.next();\n  }\n\n  /**\n   * Sorts the model values, ensuring that they keep the same\n   * order that they have in the panel.\n   */\n  private _sortValues(): void {\n    if (this._multiple) {\n      this._selectionModel.clear();\n\n      this.chips.forEach(chip => {\n        if (chip.selected) {\n          this._selectionModel.select(chip);\n        }\n      });\n      this.stateChanges.next();\n    }\n  }\n\n  /** Emits change event to set the model value. */\n  private _propagateChanges(fallbackValue?: any): void {\n    let valueToEmit: any = null;\n\n    if (Array.isArray(this.selected)) {\n      valueToEmit = this.selected.map(chip => chip.value);\n    } else {\n      valueToEmit = this.selected ? this.selected.value : fallbackValue;\n    }\n    this._value = valueToEmit;\n    this.change.emit(new MatChipListChange(this, valueToEmit));\n    this.valueChange.emit(valueToEmit);\n    this._onChange(valueToEmit);\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** When blurred, mark the field as touched when focus moved outside the chip list. */\n  _blur() {\n    if (!this._hasFocusedChip()) {\n      this._keyManager.setActiveItem(-1);\n    }\n\n    if (!this.disabled) {\n      if (this._chipInput) {\n        // If there's a chip input, we should check whether the focus moved to chip input.\n        // If the focus is not moved to chip input, mark the field as touched. If the focus moved\n        // to chip input, do nothing.\n        // Timeout is needed to wait for the focus() event trigger on chip input.\n        setTimeout(() => {\n          if (!this.focused) {\n            this._markAsTouched();\n          }\n        });\n      } else {\n        // If there's no chip input, then mark the field as touched.\n        this._markAsTouched();\n      }\n    }\n  }\n\n  /** Mark the field as touched */\n  _markAsTouched() {\n    this._onTouched();\n    this._changeDetectorRef.markForCheck();\n    this.stateChanges.next();\n  }\n\n  private _resetChips() {\n    this._dropSubscriptions();\n    this._listenToChipsFocus();\n    this._listenToChipsSelection();\n    this._listenToChipsRemoved();\n  }\n\n  private _dropSubscriptions() {\n    if (this._chipFocusSubscription) {\n      this._chipFocusSubscription.unsubscribe();\n      this._chipFocusSubscription = null;\n    }\n\n    if (this._chipBlurSubscription) {\n      this._chipBlurSubscription.unsubscribe();\n      this._chipBlurSubscription = null;\n    }\n\n    if (this._chipSelectionSubscription) {\n      this._chipSelectionSubscription.unsubscribe();\n      this._chipSelectionSubscription = null;\n    }\n\n    if (this._chipRemoveSubscription) {\n      this._chipRemoveSubscription.unsubscribe();\n      this._chipRemoveSubscription = null;\n    }\n  }\n\n  /** Listens to user-generated selection events on each chip. */\n  private _listenToChipsSelection(): void {\n    this._chipSelectionSubscription = this.chipSelectionChanges.subscribe(event => {\n      event.source.selected\n        ? this._selectionModel.select(event.source)\n        : this._selectionModel.deselect(event.source);\n\n      // For single selection chip list, make sure the deselected value is unselected.\n      if (!this.multiple) {\n        this.chips.forEach(chip => {\n          if (!this._selectionModel.isSelected(chip) && chip.selected) {\n            chip.deselect();\n          }\n        });\n      }\n\n      if (event.isUserInput) {\n        this._propagateChanges();\n      }\n    });\n  }\n\n  /** Listens to user-generated selection events on each chip. */\n  private _listenToChipsFocus(): void {\n    this._chipFocusSubscription = this.chipFocusChanges.subscribe(event => {\n      let chipIndex: number = this.chips.toArray().indexOf(event.chip);\n\n      if (this._isValidIndex(chipIndex)) {\n        this._keyManager.updateActiveItemIndex(chipIndex);\n      }\n      this.stateChanges.next();\n    });\n\n    this._chipBlurSubscription = this.chipBlurChanges.subscribe(() => {\n      this._blur();\n      this.stateChanges.next();\n    });\n  }\n\n  private _listenToChipsRemoved(): void {\n    this._chipRemoveSubscription = this.chipRemoveChanges.subscribe(event => {\n      const chip = event.chip;\n      const chipIndex = this.chips.toArray().indexOf(event.chip);\n\n      // In case the chip that will be removed is currently focused, we temporarily store\n      // the index in order to be able to determine an appropriate sibling chip that will\n      // receive focus.\n      if (this._isValidIndex(chipIndex) && chip._hasFocus) {\n        this._lastDestroyedChipIndex = chipIndex;\n      }\n    });\n  }\n\n  /** Checks whether an event comes from inside a chip element. */\n  private _originatesFromChip(event: Event): boolean {\n    let currentElement = event.target as HTMLElement | null;\n\n    while (currentElement && currentElement !== this._elementRef.nativeElement) {\n      if (currentElement.classList.contains('mat-chip')) {\n        return true;\n      }\n\n      currentElement = currentElement.parentElement;\n    }\n\n    return false;\n  }\n\n  /** Checks whether any of the chips is focused. */\n  private _hasFocusedChip() {\n    return this.chips.some(chip => chip._hasFocus);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {Directive, ElementRef, EventEmitter, Inject, Input, OnChanges, Output} from '@angular/core';\nimport {MAT_CHIPS_DEFAULT_OPTIONS, MatChipsDefaultOptions} from './chip-default-options';\nimport {MatChipList} from './chip-list';\nimport {MatChipTextControl} from './chip-text-control';\n\n\n/** Represents an input event on a `matChipInput`. */\nexport interface MatChipInputEvent {\n  /** The native `<input>` element that the event is being fired for. */\n  input: HTMLInputElement;\n\n  /** The value of the input. */\n  value: string;\n}\n\n// Increasing integer for generating unique ids.\nlet nextUniqueId = 0;\n\n/**\n * Directive that adds chip-specific behaviors to an input element inside `<mat-form-field>`.\n * May be placed inside or outside of an `<mat-chip-list>`.\n */\n@Directive({\n  selector: 'input[matChipInputFor]',\n  exportAs: 'matChipInput, matChipInputFor',\n  host: {\n    'class': 'mat-chip-input mat-input-element',\n    '(keydown)': '_keydown($event)',\n    '(blur)': '_blur()',\n    '(focus)': '_focus()',\n    '(input)': '_onInput()',\n    '[id]': 'id',\n    '[attr.disabled]': 'disabled || null',\n    '[attr.placeholder]': 'placeholder || null',\n    '[attr.aria-invalid]': '_chipList && _chipList.ngControl ? _chipList.ngControl.invalid : null',\n  }\n})\nexport class MatChipInput implements MatChipTextControl, OnChanges {\n  /** Whether the control is focused. */\n  focused: boolean = false;\n  _chipList: MatChipList;\n\n  /** Register input for chip list */\n  @Input('matChipInputFor')\n  set chipList(value: MatChipList) {\n    if (value) {\n      this._chipList = value;\n      this._chipList.registerInput(this);\n    }\n  }\n\n  /**\n   * Whether or not the chipEnd event will be emitted when the input is blurred.\n   */\n  @Input('matChipInputAddOnBlur')\n  get addOnBlur(): boolean { return this._addOnBlur; }\n  set addOnBlur(value: boolean) { this._addOnBlur = coerceBooleanProperty(value); }\n  _addOnBlur: boolean = false;\n\n  /**\n   * The list of key codes that will trigger a chipEnd event.\n   *\n   * Defaults to `[ENTER]`.\n   */\n  @Input('matChipInputSeparatorKeyCodes')\n  separatorKeyCodes: number[] | Set<number> = this._defaultOptions.separatorKeyCodes;\n\n  /** Emitted when a chip is to be added. */\n  @Output('matChipInputTokenEnd')\n  chipEnd: EventEmitter<MatChipInputEvent> = new EventEmitter<MatChipInputEvent>();\n\n  /** The input's placeholder text. */\n  @Input() placeholder: string = '';\n\n  /** Unique id for the input. */\n  @Input() id: string = `mat-chip-list-input-${nextUniqueId++}`;\n\n  /** Whether the input is disabled. */\n  @Input()\n  get disabled(): boolean { return this._disabled || (this._chipList && this._chipList.disabled); }\n  set disabled(value: boolean) { this._disabled = coerceBooleanProperty(value); }\n  private _disabled: boolean = false;\n\n  /** Whether the input is empty. */\n  get empty(): boolean { return !this._inputElement.value; }\n\n  /** The native input element to which this directive is attached. */\n  protected _inputElement: HTMLInputElement;\n\n  constructor(\n    protected _elementRef: ElementRef<HTMLInputElement>,\n    @Inject(MAT_CHIPS_DEFAULT_OPTIONS) private _defaultOptions: MatChipsDefaultOptions) {\n    this._inputElement = this._elementRef.nativeElement as HTMLInputElement;\n  }\n\n  ngOnChanges() {\n    this._chipList.stateChanges.next();\n  }\n\n  /** Utility method to make host definition/tests more clear. */\n  _keydown(event?: KeyboardEvent) {\n    this._emitChipEnd(event);\n  }\n\n  /** Checks to see if the blur should emit the (chipEnd) event. */\n  _blur() {\n    if (this.addOnBlur) {\n      this._emitChipEnd();\n    }\n    this.focused = false;\n    // Blur the chip list if it is not focused\n    if (!this._chipList.focused) {\n      this._chipList._blur();\n    }\n    this._chipList.stateChanges.next();\n  }\n\n  _focus() {\n    this.focused = true;\n    this._chipList.stateChanges.next();\n  }\n\n  /** Checks to see if the (chipEnd) event needs to be emitted. */\n  _emitChipEnd(event?: KeyboardEvent) {\n    if (!this._inputElement.value && !!event) {\n      this._chipList._keydown(event);\n    }\n    if (!event || this._isSeparatorKey(event.keyCode)) {\n      this.chipEnd.emit({ input: this._inputElement, value: this._inputElement.value });\n\n      if (event) {\n        event.preventDefault();\n      }\n    }\n  }\n\n  _onInput() {\n    // Let chip list know whenever the value changes.\n    this._chipList.stateChanges.next();\n  }\n\n  /** Focuses the input. */\n  focus(): void {\n    this._inputElement.focus();\n  }\n\n  /** Checks whether a keycode is one of the configured separators. */\n  private _isSeparatorKey(keyCode: number) {\n    const separators = this.separatorKeyCodes;\n    return Array.isArray(separators) ? separators.indexOf(keyCode) > -1 : separators.has(keyCode);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ENTER} from '@angular/cdk/keycodes';\nimport {NgModule} from '@angular/core';\nimport {ErrorStateMatcher} from '@angular/material/core';\nimport {MatChip, MatChipAvatar, MatChipRemove, MatChipTrailingIcon} from './chip';\nimport {MAT_CHIPS_DEFAULT_OPTIONS, MatChipsDefaultOptions} from './chip-default-options';\nimport {MatChipInput} from './chip-input';\nimport {MatChipList} from './chip-list';\n\nconst CHIP_DECLARATIONS = [\n  MatChipList,\n  MatChip,\n  MatChipInput,\n  MatChipRemove,\n  MatChipAvatar,\n  MatChipTrailingIcon,\n];\n\n@NgModule({\n  exports: CHIP_DECLARATIONS,\n  declarations: CHIP_DECLARATIONS,\n  providers: [\n    ErrorStateMatcher,\n    {\n      provide: MAT_CHIPS_DEFAULT_OPTIONS,\n      useValue: {\n        separatorKeyCodes: [ENTER]\n      } as MatChipsDefaultOptions\n    }\n  ]\n})\nexport class MatChipsModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ViewContainerRef} from '@angular/core';\nimport {Direction} from '@angular/cdk/bidi';\nimport {ScrollStrategy} from '@angular/cdk/overlay';\n\n/** Valid ARIA roles for a dialog element. */\nexport type DialogRole = 'dialog' | 'alertdialog';\n\n/** Possible overrides for a dialog's position. */\nexport interface DialogPosition {\n  /** Override for the dialog's top position. */\n  top?: string;\n\n  /** Override for the dialog's bottom position. */\n  bottom?: string;\n\n  /** Override for the dialog's left position. */\n  left?: string;\n\n  /** Override for the dialog's right position. */\n  right?: string;\n}\n\n/**\n * Configuration for opening a modal dialog with the MatDialog service.\n */\nexport class MatDialogConfig<D = any> {\n\n  /**\n   * Where the attached component should live in Angular's *logical* component tree.\n   * This affects what is available for injection and the change detection order for the\n   * component instantiated inside of the dialog. This does not affect where the dialog\n   * content will be rendered.\n   */\n  viewContainerRef?: ViewContainerRef;\n\n  /** ID for the dialog. If omitted, a unique one will be generated. */\n  id?: string;\n\n  /** The ARIA role of the dialog element. */\n  role?: DialogRole = 'dialog';\n\n  /** Custom class for the overlay pane. */\n  panelClass?: string | string[] = '';\n\n  /** Whether the dialog has a backdrop. */\n  hasBackdrop?: boolean = true;\n\n  /** Custom class for the backdrop, */\n  backdropClass?: string = '';\n\n  /** Whether the user can use escape or clicking on the backdrop to close the modal. */\n  disableClose?: boolean = false;\n\n  /** Width of the dialog. */\n  width?: string = '';\n\n  /** Height of the dialog. */\n  height?: string = '';\n\n  /** Min-width of the dialog. If a number is provided, pixel units are assumed. */\n  minWidth?: number | string;\n\n  /** Min-height of the dialog. If a number is provided, pixel units are assumed. */\n  minHeight?: number | string;\n\n  /** Max-width of the dialog. If a number is provided, pixel units are assumed. Defaults to 80vw */\n  maxWidth?: number | string = '80vw';\n\n  /** Max-height of the dialog. If a number is provided, pixel units are assumed. */\n  maxHeight?: number | string;\n\n  /** Position overrides. */\n  position?: DialogPosition;\n\n  /** Data being injected into the child component. */\n  data?: D | null = null;\n\n  /** Layout direction for the dialog's content. */\n  direction?: Direction;\n\n  /** ID of the element that describes the dialog. */\n  ariaDescribedBy?: string | null = null;\n\n  /** Aria label to assign to the dialog element */\n  ariaLabel?: string | null = null;\n\n  /** Whether the dialog should focus the first focusable element on open. */\n  autoFocus?: boolean = true;\n\n  /**\n   * Whether the dialog should restore focus to the\n   * previously-focused element, after it's closed.\n   */\n  restoreFocus?: boolean = true;\n\n  /** Scroll strategy to be used for the dialog. */\n  scrollStrategy?: ScrollStrategy;\n\n  /**\n   * Whether the dialog should close when the user goes backwards/forwards in history.\n   * Note that this usually doesn't include clicking on links (unless the user is using\n   * the `HashLocationStrategy`).\n   */\n  closeOnNavigation?: boolean = true;\n\n  // TODO(jelbourn): add configuration for lifecycle hooks, ARIA labelling.\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\nconst animationBody = [\n  // Note: The `enter` animation transitions to `transform: none`, because for some reason\n  // specifying the transform explicitly, causes IE both to blur the dialog content and\n  // decimate the animation performance. Leaving it as `none` solves both issues.\n  state('void, exit', style({opacity: 0, transform: 'scale(0.7)'})),\n  state('enter', style({transform: 'none'})),\n  transition('* => enter', animate('150ms cubic-bezier(0, 0, 0.2, 1)',\n      style({transform: 'none', opacity: 1}))),\n  transition('* => void, * => exit',\n      animate('75ms cubic-bezier(0.4, 0.0, 0.2, 1)', style({opacity: 0}))),\n];\n\n/**\n * Animations used by MatDialog.\n * @docs-private\n */\nexport const matDialogAnimations: {\n  readonly dialogContainer: AnimationTriggerMetadata;\n  readonly slideDialog: AnimationTriggerMetadata;\n} = {\n  /** Animation that is applied on the dialog container by defalt. */\n  dialogContainer: trigger('dialogContainer', animationBody),\n\n  /** @deprecated @breaking-change 8.0.0 Use `matDialogAnimations.dialogContainer` instead. */\n  slideDialog: trigger('slideDialog', animationBody)\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ComponentRef,\n  ElementRef,\n  EmbeddedViewRef,\n  EventEmitter,\n  Inject,\n  Optional,\n  ChangeDetectorRef,\n  ViewChild,\n  ViewEncapsulation,\n  ChangeDetectionStrategy,\n} from '@angular/core';\nimport {DOCUMENT} from '@angular/common';\nimport {AnimationEvent} from '@angular/animations';\nimport {matDialogAnimations} from './dialog-animations';\nimport {\n  BasePortalOutlet,\n  ComponentPortal,\n  CdkPortalOutlet,\n  TemplatePortal\n} from '@angular/cdk/portal';\nimport {FocusTrap, FocusTrapFactory} from '@angular/cdk/a11y';\nimport {MatDialogConfig} from './dialog-config';\n\n\n/**\n * Throws an exception for the case when a ComponentPortal is\n * attached to a DomPortalOutlet without an origin.\n * @docs-private\n */\nexport function throwMatDialogContentAlreadyAttachedError() {\n  throw Error('Attempting to attach dialog content after content is already attached');\n}\n\n/**\n * Internal component that wraps user-provided dialog content.\n * Animation is based on https://material.io/guidelines/motion/choreography.html.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-dialog-container',\n  templateUrl: 'dialog-container.html',\n  styleUrls: ['dialog.css'],\n  encapsulation: ViewEncapsulation.None,\n  // Using OnPush for dialogs caused some G3 sync issues. Disabled until we can track them down.\n  // tslint:disable-next-line:validate-decorators\n  changeDetection: ChangeDetectionStrategy.Default,\n  animations: [matDialogAnimations.dialogContainer],\n  host: {\n    'class': 'mat-dialog-container',\n    'tabindex': '-1',\n    'aria-modal': 'true',\n    '[attr.id]': '_id',\n    '[attr.role]': '_config.role',\n    '[attr.aria-labelledby]': '_config.ariaLabel ? null : _ariaLabelledBy',\n    '[attr.aria-label]': '_config.ariaLabel',\n    '[attr.aria-describedby]': '_config.ariaDescribedBy || null',\n    '[@dialogContainer]': '_state',\n    '(@dialogContainer.start)': '_onAnimationStart($event)',\n    '(@dialogContainer.done)': '_onAnimationDone($event)',\n  },\n})\nexport class MatDialogContainer extends BasePortalOutlet {\n  /** The portal outlet inside of this container into which the dialog content will be loaded. */\n  @ViewChild(CdkPortalOutlet) _portalOutlet: CdkPortalOutlet;\n\n  /** The class that traps and manages focus within the dialog. */\n  private _focusTrap: FocusTrap;\n\n  /** Element that was focused before the dialog was opened. Save this to restore upon close. */\n  private _elementFocusedBeforeDialogWasOpened: HTMLElement | null = null;\n\n  /** State of the dialog animation. */\n  _state: 'void' | 'enter' | 'exit' = 'enter';\n\n  /** Emits when an animation state changes. */\n  _animationStateChanged = new EventEmitter<AnimationEvent>();\n\n  /** ID of the element that should be considered as the dialog's label. */\n  _ariaLabelledBy: string | null = null;\n\n  /** ID for the container DOM element. */\n  _id: string;\n\n  constructor(\n    private _elementRef: ElementRef,\n    private _focusTrapFactory: FocusTrapFactory,\n    private _changeDetectorRef: ChangeDetectorRef,\n    @Optional() @Inject(DOCUMENT) private _document: any,\n    /** The dialog configuration. */\n    public _config: MatDialogConfig) {\n\n    super();\n  }\n\n  /**\n   * Attach a ComponentPortal as content to this dialog container.\n   * @param portal Portal to be attached as the dialog content.\n   */\n  attachComponentPortal<T>(portal: ComponentPortal<T>): ComponentRef<T> {\n    if (this._portalOutlet.hasAttached()) {\n      throwMatDialogContentAlreadyAttachedError();\n    }\n\n    this._savePreviouslyFocusedElement();\n    return this._portalOutlet.attachComponentPortal(portal);\n  }\n\n  /**\n   * Attach a TemplatePortal as content to this dialog container.\n   * @param portal Portal to be attached as the dialog content.\n   */\n  attachTemplatePortal<C>(portal: TemplatePortal<C>): EmbeddedViewRef<C> {\n    if (this._portalOutlet.hasAttached()) {\n      throwMatDialogContentAlreadyAttachedError();\n    }\n\n    this._savePreviouslyFocusedElement();\n    return this._portalOutlet.attachTemplatePortal(portal);\n  }\n\n  /** Moves the focus inside the focus trap. */\n  private _trapFocus() {\n    if (!this._focusTrap) {\n      this._focusTrap = this._focusTrapFactory.create(this._elementRef.nativeElement);\n    }\n\n    // If were to attempt to focus immediately, then the content of the dialog would not yet be\n    // ready in instances where change detection has to run first. To deal with this, we simply\n    // wait for the microtask queue to be empty.\n    if (this._config.autoFocus) {\n      this._focusTrap.focusInitialElementWhenReady();\n    }\n  }\n\n  /** Restores focus to the element that was focused before the dialog opened. */\n  private _restoreFocus() {\n    const toFocus = this._elementFocusedBeforeDialogWasOpened;\n\n    // We need the extra check, because IE can set the `activeElement` to null in some cases.\n    if (this._config.restoreFocus && toFocus && typeof toFocus.focus === 'function') {\n      toFocus.focus();\n    }\n\n    if (this._focusTrap) {\n      this._focusTrap.destroy();\n    }\n  }\n\n  /** Saves a reference to the element that was focused before the dialog was opened. */\n  private _savePreviouslyFocusedElement() {\n    if (this._document) {\n      this._elementFocusedBeforeDialogWasOpened = this._document.activeElement as HTMLElement;\n\n      // Note that there is no focus method when rendering on the server.\n      if (this._elementRef.nativeElement.focus) {\n        // Move focus onto the dialog immediately in order to prevent the user from accidentally\n        // opening multiple dialogs at the same time. Needs to be async, because the element\n        // may not be focusable immediately.\n        Promise.resolve().then(() => this._elementRef.nativeElement.focus());\n      }\n    }\n  }\n\n  /** Callback, invoked whenever an animation on the host completes. */\n  _onAnimationDone(event: AnimationEvent) {\n    if (event.toState === 'enter') {\n      this._trapFocus();\n    } else if (event.toState === 'exit') {\n      this._restoreFocus();\n    }\n\n    this._animationStateChanged.emit(event);\n  }\n\n  /** Callback, invoked when an animation on the host starts. */\n  _onAnimationStart(event: AnimationEvent) {\n    this._animationStateChanged.emit(event);\n  }\n\n  /** Starts the dialog exit animation. */\n  _startExitAnimation(): void {\n    this._state = 'exit';\n\n    // Mark the container for check so it can react if the\n    // view container is using OnPush change detection.\n    this._changeDetectorRef.markForCheck();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ESCAPE} from '@angular/cdk/keycodes';\nimport {GlobalPositionStrategy, OverlayRef} from '@angular/cdk/overlay';\nimport {Location} from '@angular/common';\nimport {Observable, Subject} from 'rxjs';\nimport {filter, take} from 'rxjs/operators';\nimport {DialogPosition} from './dialog-config';\nimport {MatDialogContainer} from './dialog-container';\n\n\n// TODO(jelbourn): resizing\n\n// Counter for unique dialog ids.\nlet uniqueId = 0;\n\n/**\n * Reference to a dialog opened via the MatDialog service.\n */\nexport class MatDialogRef<T, R = any> {\n  /** The instance of component opened into the dialog. */\n  componentInstance: T;\n\n  /** Whether the user is allowed to close the dialog. */\n  disableClose: boolean | undefined = this._containerInstance._config.disableClose;\n\n  /** Subject for notifying the user that the dialog has finished opening. */\n  private readonly _afterOpened = new Subject<void>();\n\n  /** Subject for notifying the user that the dialog has finished closing. */\n  private readonly _afterClosed = new Subject<R | undefined>();\n\n  /** Subject for notifying the user that the dialog has started closing. */\n  private readonly _beforeClosed = new Subject<R | undefined>();\n\n  /** Result to be passed to afterClosed. */\n  private _result: R | undefined;\n\n  constructor(\n    private _overlayRef: OverlayRef,\n    public _containerInstance: MatDialogContainer,\n    // @breaking-change 8.0.0 `_location` parameter to be removed.\n    _location?: Location,\n    readonly id: string = `mat-dialog-${uniqueId++}`) {\n\n    // Pass the id along to the container.\n    _containerInstance._id = id;\n\n    // Emit when opening animation completes\n    _containerInstance._animationStateChanged.pipe(\n      filter(event => event.phaseName === 'done' && event.toState === 'enter'),\n      take(1)\n    )\n    .subscribe(() => {\n      this._afterOpened.next();\n      this._afterOpened.complete();\n    });\n\n    // Dispose overlay when closing animation is complete\n    _containerInstance._animationStateChanged.pipe(\n      filter(event => event.phaseName === 'done' && event.toState === 'exit'),\n      take(1)\n    ).subscribe(() => this._overlayRef.dispose());\n\n    _overlayRef.detachments().subscribe(() => {\n      this._beforeClosed.next(this._result);\n      this._beforeClosed.complete();\n      this._afterClosed.next(this._result);\n      this._afterClosed.complete();\n      this.componentInstance = null!;\n      this._overlayRef.dispose();\n    });\n\n    _overlayRef.keydownEvents()\n      .pipe(filter(event => event.keyCode === ESCAPE && !this.disableClose))\n      .subscribe(() => this.close());\n  }\n\n  /**\n   * Close the dialog.\n   * @param dialogResult Optional result to return to the dialog opener.\n   */\n  close(dialogResult?: R): void {\n    this._result = dialogResult;\n\n    // Transition the backdrop in parallel to the dialog.\n    this._containerInstance._animationStateChanged.pipe(\n      filter(event => event.phaseName === 'start'),\n      take(1)\n    )\n    .subscribe(() => {\n      this._beforeClosed.next(dialogResult);\n      this._beforeClosed.complete();\n      this._overlayRef.detachBackdrop();\n    });\n\n    this._containerInstance._startExitAnimation();\n  }\n\n  /**\n   * Gets an observable that is notified when the dialog is finished opening.\n   */\n  afterOpened(): Observable<void> {\n    return this._afterOpened.asObservable();\n  }\n\n  /**\n   * Gets an observable that is notified when the dialog is finished closing.\n   */\n  afterClosed(): Observable<R | undefined> {\n    return this._afterClosed.asObservable();\n  }\n\n  /**\n   * Gets an observable that is notified when the dialog has started closing.\n   */\n  beforeClosed(): Observable<R | undefined> {\n    return this._beforeClosed.asObservable();\n  }\n\n  /**\n   * Gets an observable that emits when the overlay's backdrop has been clicked.\n   */\n  backdropClick(): Observable<MouseEvent> {\n    return this._overlayRef.backdropClick();\n  }\n\n  /**\n   * Gets an observable that emits when keydown events are targeted on the overlay.\n   */\n  keydownEvents(): Observable<KeyboardEvent> {\n    return this._overlayRef.keydownEvents();\n  }\n\n  /**\n   * Updates the dialog's position.\n   * @param position New dialog position.\n   */\n  updatePosition(position?: DialogPosition): this {\n    let strategy = this._getPositionStrategy();\n\n    if (position && (position.left || position.right)) {\n      position.left ? strategy.left(position.left) : strategy.right(position.right);\n    } else {\n      strategy.centerHorizontally();\n    }\n\n    if (position && (position.top || position.bottom)) {\n      position.top ? strategy.top(position.top) : strategy.bottom(position.bottom);\n    } else {\n      strategy.centerVertically();\n    }\n\n    this._overlayRef.updatePosition();\n\n    return this;\n  }\n\n  /**\n   * Updates the dialog's width and height.\n   * @param width New width of the dialog.\n   * @param height New height of the dialog.\n   */\n  updateSize(width: string = '', height: string = ''): this {\n    this._getPositionStrategy().width(width).height(height);\n    this._overlayRef.updatePosition();\n    return this;\n  }\n\n  /**\n   * Gets an observable that is notified when the dialog is finished opening.\n   * @deprecated Use `afterOpened` instead.\n   * @breaking-change 8.0.0\n   */\n  afterOpen(): Observable<void> {\n    return this.afterOpened();\n  }\n\n  /**\n   * Gets an observable that is notified when the dialog has started closing.\n   * @deprecated Use `beforeClosed` instead.\n   * @breaking-change 8.0.0\n   */\n  beforeClose(): Observable<R | undefined> {\n    return this.beforeClosed();\n  }\n\n  /** Fetches the position strategy object from the overlay ref. */\n  private _getPositionStrategy(): GlobalPositionStrategy {\n    return this._overlayRef.getConfig().positionStrategy as GlobalPositionStrategy;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directionality} from '@angular/cdk/bidi';\nimport {\n  Overlay,\n  OverlayConfig,\n  OverlayContainer,\n  OverlayRef,\n  ScrollStrategy,\n} from '@angular/cdk/overlay';\nimport {ComponentPortal, ComponentType, PortalInjector, TemplatePortal} from '@angular/cdk/portal';\nimport {Location} from '@angular/common';\nimport {\n  Inject,\n  Injectable,\n  InjectionToken,\n  Injector,\n  OnDestroy,\n  Optional,\n  SkipSelf,\n  TemplateRef,\n} from '@angular/core';\nimport {defer, Observable, of as observableOf, Subject} from 'rxjs';\nimport {startWith} from 'rxjs/operators';\nimport {MatDialogConfig} from './dialog-config';\nimport {MatDialogContainer} from './dialog-container';\nimport {MatDialogRef} from './dialog-ref';\n\n\n/** Injection token that can be used to access the data that was passed in to a dialog. */\nexport const MAT_DIALOG_DATA = new InjectionToken<any>('MatDialogData');\n\n/** Injection token that can be used to specify default dialog options. */\nexport const MAT_DIALOG_DEFAULT_OPTIONS =\n    new InjectionToken<MatDialogConfig>('mat-dialog-default-options');\n\n/** Injection token that determines the scroll handling while the dialog is open. */\nexport const MAT_DIALOG_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mat-dialog-scroll-strategy');\n\n/** @docs-private */\nexport function MAT_DIALOG_SCROLL_STRATEGY_FACTORY(overlay: Overlay): () => ScrollStrategy {\n  return () => overlay.scrollStrategies.block();\n}\n\n/** @docs-private */\nexport function MAT_DIALOG_SCROLL_STRATEGY_PROVIDER_FACTORY(overlay: Overlay):\n  () => ScrollStrategy {\n  return () => overlay.scrollStrategies.block();\n}\n\n/** @docs-private */\nexport const MAT_DIALOG_SCROLL_STRATEGY_PROVIDER = {\n  provide: MAT_DIALOG_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_DIALOG_SCROLL_STRATEGY_PROVIDER_FACTORY,\n};\n\n\n/**\n * Service to open Material Design modal dialogs.\n */\n@Injectable()\nexport class MatDialog implements OnDestroy {\n  private _openDialogsAtThisLevel: MatDialogRef<any>[] = [];\n  private readonly _afterAllClosedAtThisLevel = new Subject<void>();\n  private readonly _afterOpenedAtThisLevel = new Subject<MatDialogRef<any>>();\n  private _ariaHiddenElements = new Map<Element, string|null>();\n  private _scrollStrategy: () => ScrollStrategy;\n\n  /** Keeps track of the currently-open dialogs. */\n  get openDialogs(): MatDialogRef<any>[] {\n    return this._parentDialog ? this._parentDialog.openDialogs : this._openDialogsAtThisLevel;\n  }\n\n  /** Stream that emits when a dialog has been opened. */\n  get afterOpened(): Subject<MatDialogRef<any>> {\n    return this._parentDialog ? this._parentDialog.afterOpened : this._afterOpenedAtThisLevel;\n  }\n\n  /**\n   * Stream that emits when a dialog has been opened.\n   * @deprecated Use `afterOpened` instead.\n   * @breaking-change 8.0.0\n   */\n  get afterOpen(): Subject<MatDialogRef<any>> {\n    return this.afterOpened;\n  }\n\n  get _afterAllClosed(): Subject<void> {\n    const parent = this._parentDialog;\n    return parent ? parent._afterAllClosed : this._afterAllClosedAtThisLevel;\n  }\n\n  /**\n   * Stream that emits when all open dialog have finished closing.\n   * Will emit on subscribe if there are no open dialogs to begin with.\n   */\n  readonly afterAllClosed: Observable<void> = defer<void>(() => this.openDialogs.length ?\n      this._afterAllClosed :\n      this._afterAllClosed.pipe(startWith(undefined)));\n\n  constructor(\n      private _overlay: Overlay,\n      private _injector: Injector,\n      @Optional() private _location: Location,\n      @Optional() @Inject(MAT_DIALOG_DEFAULT_OPTIONS) private _defaultOptions: MatDialogConfig,\n      @Inject(MAT_DIALOG_SCROLL_STRATEGY) scrollStrategy: any,\n      @Optional() @SkipSelf() private _parentDialog: MatDialog,\n      private _overlayContainer: OverlayContainer) {\n    this._scrollStrategy = scrollStrategy;\n  }\n\n  /**\n   * Opens a modal dialog containing the given component.\n   * @param componentOrTemplateRef Type of the component to load into the dialog,\n   *     or a TemplateRef to instantiate as the dialog content.\n   * @param config Extra configuration options.\n   * @returns Reference to the newly-opened dialog.\n   */\n  open<T, D = any, R = any>(componentOrTemplateRef: ComponentType<T> | TemplateRef<T>,\n          config?: MatDialogConfig<D>): MatDialogRef<T, R> {\n\n    config = _applyConfigDefaults(config, this._defaultOptions || new MatDialogConfig());\n\n    if (config.id && this.getDialogById(config.id)) {\n      throw Error(`Dialog with id \"${config.id}\" exists already. The dialog id must be unique.`);\n    }\n\n    const overlayRef = this._createOverlay(config);\n    const dialogContainer = this._attachDialogContainer(overlayRef, config);\n    const dialogRef = this._attachDialogContent<T, R>(componentOrTemplateRef,\n                                                      dialogContainer,\n                                                      overlayRef,\n                                                      config);\n\n    // If this is the first dialog that we're opening, hide all the non-overlay content.\n    if (!this.openDialogs.length) {\n      this._hideNonDialogContentFromAssistiveTechnology();\n    }\n\n    this.openDialogs.push(dialogRef);\n    dialogRef.afterClosed().subscribe(() => this._removeOpenDialog(dialogRef));\n    this.afterOpened.next(dialogRef);\n\n    return dialogRef;\n  }\n\n  /**\n   * Closes all of the currently-open dialogs.\n   */\n  closeAll(): void {\n    this._closeDialogs(this.openDialogs);\n  }\n\n  /**\n   * Finds an open dialog by its id.\n   * @param id ID to use when looking up the dialog.\n   */\n  getDialogById(id: string): MatDialogRef<any> | undefined {\n    return this.openDialogs.find(dialog => dialog.id === id);\n  }\n\n  ngOnDestroy() {\n    // Only close the dialogs at this level on destroy\n    // since the parent service may still be active.\n    this._closeDialogs(this._openDialogsAtThisLevel);\n  }\n\n  /**\n   * Creates the overlay into which the dialog will be loaded.\n   * @param config The dialog configuration.\n   * @returns A promise resolving to the OverlayRef for the created overlay.\n   */\n  private _createOverlay(config: MatDialogConfig): OverlayRef {\n    const overlayConfig = this._getOverlayConfig(config);\n    return this._overlay.create(overlayConfig);\n  }\n\n  /**\n   * Creates an overlay config from a dialog config.\n   * @param dialogConfig The dialog configuration.\n   * @returns The overlay configuration.\n   */\n  private _getOverlayConfig(dialogConfig: MatDialogConfig): OverlayConfig {\n    const state = new OverlayConfig({\n      positionStrategy: this._overlay.position().global(),\n      scrollStrategy: dialogConfig.scrollStrategy || this._scrollStrategy(),\n      panelClass: dialogConfig.panelClass,\n      hasBackdrop: dialogConfig.hasBackdrop,\n      direction: dialogConfig.direction,\n      minWidth: dialogConfig.minWidth,\n      minHeight: dialogConfig.minHeight,\n      maxWidth: dialogConfig.maxWidth,\n      maxHeight: dialogConfig.maxHeight,\n      disposeOnNavigation: dialogConfig.closeOnNavigation\n    });\n\n    if (dialogConfig.backdropClass) {\n      state.backdropClass = dialogConfig.backdropClass;\n    }\n\n    return state;\n  }\n\n  /**\n   * Attaches an MatDialogContainer to a dialog's already-created overlay.\n   * @param overlay Reference to the dialog's underlying overlay.\n   * @param config The dialog configuration.\n   * @returns A promise resolving to a ComponentRef for the attached container.\n   */\n  private _attachDialogContainer(overlay: OverlayRef, config: MatDialogConfig): MatDialogContainer {\n    const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n    const injector = new PortalInjector(userInjector || this._injector, new WeakMap([\n      [MatDialogConfig, config]\n    ]));\n    const containerPortal =\n        new ComponentPortal(MatDialogContainer, config.viewContainerRef, injector);\n    const containerRef = overlay.attach<MatDialogContainer>(containerPortal);\n\n    return containerRef.instance;\n  }\n\n  /**\n   * Attaches the user-provided component to the already-created MatDialogContainer.\n   * @param componentOrTemplateRef The type of component being loaded into the dialog,\n   *     or a TemplateRef to instantiate as the content.\n   * @param dialogContainer Reference to the wrapping MatDialogContainer.\n   * @param overlayRef Reference to the overlay in which the dialog resides.\n   * @param config The dialog configuration.\n   * @returns A promise resolving to the MatDialogRef that should be returned to the user.\n   */\n  private _attachDialogContent<T, R>(\n      componentOrTemplateRef: ComponentType<T> | TemplateRef<T>,\n      dialogContainer: MatDialogContainer,\n      overlayRef: OverlayRef,\n      config: MatDialogConfig): MatDialogRef<T, R> {\n\n    // Create a reference to the dialog we're creating in order to give the user a handle\n    // to modify and close it.\n    const dialogRef =\n        new MatDialogRef<T, R>(overlayRef, dialogContainer, this._location, config.id);\n\n    // When the dialog backdrop is clicked, we want to close it.\n    if (config.hasBackdrop) {\n      overlayRef.backdropClick().subscribe(() => {\n        if (!dialogRef.disableClose) {\n          dialogRef.close();\n        }\n      });\n    }\n\n    if (componentOrTemplateRef instanceof TemplateRef) {\n      dialogContainer.attachTemplatePortal(\n        new TemplatePortal<T>(componentOrTemplateRef, null!,\n          <any>{ $implicit: config.data, dialogRef }));\n    } else {\n      const injector = this._createInjector<T>(config, dialogRef, dialogContainer);\n      const contentRef = dialogContainer.attachComponentPortal<T>(\n          new ComponentPortal(componentOrTemplateRef, undefined, injector));\n      dialogRef.componentInstance = contentRef.instance;\n    }\n\n    dialogRef\n      .updateSize(config.width, config.height)\n      .updatePosition(config.position);\n\n    return dialogRef;\n  }\n\n  /**\n   * Creates a custom injector to be used inside the dialog. This allows a component loaded inside\n   * of a dialog to close itself and, optionally, to return a value.\n   * @param config Config object that is used to construct the dialog.\n   * @param dialogRef Reference to the dialog.\n   * @param container Dialog container element that wraps all of the contents.\n   * @returns The custom injector that can be used inside the dialog.\n   */\n  private _createInjector<T>(\n      config: MatDialogConfig,\n      dialogRef: MatDialogRef<T>,\n      dialogContainer: MatDialogContainer): PortalInjector {\n\n    const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n\n    // The MatDialogContainer is injected in the portal as the MatDialogContainer and the dialog's\n    // content are created out of the same ViewContainerRef and as such, are siblings for injector\n    // purposes. To allow the hierarchy that is expected, the MatDialogContainer is explicitly\n    // added to the injection tokens.\n    const injectionTokens = new WeakMap<any, any>([\n      [MatDialogContainer, dialogContainer],\n      [MAT_DIALOG_DATA, config.data],\n      [MatDialogRef, dialogRef]\n    ]);\n\n    if (config.direction &&\n        (!userInjector || !userInjector.get<Directionality | null>(Directionality, null))) {\n      injectionTokens.set(Directionality, {\n        value: config.direction,\n        change: observableOf()\n      });\n    }\n\n    return new PortalInjector(userInjector || this._injector, injectionTokens);\n  }\n\n  /**\n   * Removes a dialog from the array of open dialogs.\n   * @param dialogRef Dialog to be removed.\n   */\n  private _removeOpenDialog(dialogRef: MatDialogRef<any>) {\n    const index = this.openDialogs.indexOf(dialogRef);\n\n    if (index > -1) {\n      this.openDialogs.splice(index, 1);\n\n      // If all the dialogs were closed, remove/restore the `aria-hidden`\n      // to a the siblings and emit to the `afterAllClosed` stream.\n      if (!this.openDialogs.length) {\n        this._ariaHiddenElements.forEach((previousValue, element) => {\n          if (previousValue) {\n            element.setAttribute('aria-hidden', previousValue);\n          } else {\n            element.removeAttribute('aria-hidden');\n          }\n        });\n\n        this._ariaHiddenElements.clear();\n        this._afterAllClosed.next();\n      }\n    }\n  }\n\n  /**\n   * Hides all of the content that isn't an overlay from assistive technology.\n   */\n  private _hideNonDialogContentFromAssistiveTechnology() {\n    const overlayContainer = this._overlayContainer.getContainerElement();\n\n    // Ensure that the overlay container is attached to the DOM.\n    if (overlayContainer.parentElement) {\n      const siblings = overlayContainer.parentElement.children;\n\n      for (let i = siblings.length - 1; i > -1; i--) {\n        let sibling = siblings[i];\n\n        if (sibling !== overlayContainer &&\n          sibling.nodeName !== 'SCRIPT' &&\n          sibling.nodeName !== 'STYLE' &&\n          !sibling.hasAttribute('aria-live')) {\n\n          this._ariaHiddenElements.set(sibling, sibling.getAttribute('aria-hidden'));\n          sibling.setAttribute('aria-hidden', 'true');\n        }\n      }\n    }\n  }\n\n  /** Closes all of the dialogs in an array. */\n  private _closeDialogs(dialogs: MatDialogRef<any>[]) {\n    let i = dialogs.length;\n\n    while (i--) {\n      // The `_openDialogs` property isn't updated after close until the rxjs subscription\n      // runs on the next microtask, in addition to modifying the array as we're going\n      // through it. We loop through all of them and call close without assuming that\n      // they'll be removed from the list instantaneously.\n      dialogs[i].close();\n    }\n  }\n\n}\n\n/**\n * Applies default options to the dialog config.\n * @param config Config to be modified.\n * @param defaultOptions Default options provided.\n * @returns The new configuration object.\n */\nfunction _applyConfigDefaults(\n    config?: MatDialogConfig, defaultOptions?: MatDialogConfig): MatDialogConfig {\n  return {...defaultOptions, ...config};\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Directive,\n  Input,\n  OnChanges,\n  OnInit,\n  Optional,\n  SimpleChanges,\n  ElementRef,\n} from '@angular/core';\nimport {MatDialog} from './dialog';\nimport {MatDialogRef} from './dialog-ref';\n\n/** Counter used to generate unique IDs for dialog elements. */\nlet dialogElementUid = 0;\n\n/**\n * Button that will close the current dialog.\n */\n@Directive({\n  selector: `button[mat-dialog-close], button[matDialogClose]`,\n  exportAs: 'matDialogClose',\n  host: {\n    '(click)': 'dialogRef.close(dialogResult)',\n    '[attr.aria-label]': 'ariaLabel',\n    'type': 'button', // Prevents accidental form submits.\n  }\n})\nexport class MatDialogClose implements OnInit, OnChanges {\n  /** Screenreader label for the button. */\n  @Input('aria-label') ariaLabel: string = 'Close dialog';\n\n  /** Dialog close input. */\n  @Input('mat-dialog-close') dialogResult: any;\n\n  @Input('matDialogClose') _matDialogClose: any;\n\n  constructor(\n    @Optional() public dialogRef: MatDialogRef<any>,\n    private _elementRef: ElementRef<HTMLElement>,\n    private _dialog: MatDialog) {}\n\n  ngOnInit() {\n    if (!this.dialogRef) {\n      // When this directive is included in a dialog via TemplateRef (rather than being\n      // in a Component), the DialogRef isn't available via injection because embedded\n      // views cannot be given a custom injector. Instead, we look up the DialogRef by\n      // ID. This must occur in `onInit`, as the ID binding for the dialog container won't\n      // be resolved at constructor time.\n      this.dialogRef = getClosestDialog(this._elementRef, this._dialog.openDialogs)!;\n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    const proxiedChange = changes._matDialogClose || changes._matDialogCloseResult;\n\n    if (proxiedChange) {\n      this.dialogResult = proxiedChange.currentValue;\n    }\n  }\n}\n\n/**\n * Title of a dialog element. Stays fixed to the top of the dialog when scrolling.\n */\n@Directive({\n  selector: '[mat-dialog-title], [matDialogTitle]',\n  exportAs: 'matDialogTitle',\n  host: {\n    'class': 'mat-dialog-title',\n    '[id]': 'id',\n  },\n})\nexport class MatDialogTitle implements OnInit {\n  @Input() id = `mat-dialog-title-${dialogElementUid++}`;\n\n  constructor(\n    @Optional() private _dialogRef: MatDialogRef<any>,\n    private _elementRef: ElementRef<HTMLElement>,\n    private _dialog: MatDialog) {}\n\n  ngOnInit() {\n    if (!this._dialogRef) {\n      this._dialogRef = getClosestDialog(this._elementRef, this._dialog.openDialogs)!;\n    }\n\n    if (this._dialogRef) {\n      Promise.resolve().then(() => {\n        const container = this._dialogRef._containerInstance;\n\n        if (container && !container._ariaLabelledBy) {\n          container._ariaLabelledBy = this.id;\n        }\n      });\n    }\n  }\n}\n\n\n/**\n * Scrollable content container of a dialog.\n */\n@Directive({\n  selector: `[mat-dialog-content], mat-dialog-content, [matDialogContent]`,\n  host: {'class': 'mat-dialog-content'}\n})\nexport class MatDialogContent {}\n\n\n/**\n * Container for the bottom action buttons in a dialog.\n * Stays fixed to the bottom when scrolling.\n */\n@Directive({\n  selector: `[mat-dialog-actions], mat-dialog-actions, [matDialogActions]`,\n  host: {'class': 'mat-dialog-actions'}\n})\nexport class MatDialogActions {}\n\n\n/**\n * Finds the closest MatDialogRef to an element by looking at the DOM.\n * @param element Element relative to which to look for a dialog.\n * @param openDialogs References to the currently-open dialogs.\n */\nfunction getClosestDialog(element: ElementRef<HTMLElement>, openDialogs: MatDialogRef<any>[]) {\n  let parent: HTMLElement | null = element.nativeElement.parentElement;\n\n  while (parent && !parent.classList.contains('mat-dialog-container')) {\n    parent = parent.parentElement;\n  }\n\n  return parent ? openDialogs.find(dialog => dialog.id === parent!.id) : null;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MAT_DIALOG_SCROLL_STRATEGY_PROVIDER, MatDialog} from './dialog';\nimport {MatDialogContainer} from './dialog-container';\nimport {\n  MatDialogActions,\n  MatDialogClose,\n  MatDialogContent,\n  MatDialogTitle,\n} from './dialog-content-directives';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    OverlayModule,\n    PortalModule,\n    MatCommonModule,\n  ],\n  exports: [\n    MatDialogContainer,\n    MatDialogClose,\n    MatDialogTitle,\n    MatDialogContent,\n    MatDialogActions,\n    MatCommonModule,\n  ],\n  declarations: [\n    MatDialogContainer,\n    MatDialogClose,\n    MatDialogTitle,\n    MatDialogActions,\n    MatDialogContent,\n  ],\n  providers: [\n    MatDialog,\n    MAT_DIALOG_SCROLL_STRATEGY_PROVIDER,\n  ],\n  entryComponents: [MatDialogContainer],\n})\nexport class MatDialogModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CdkTextareaAutosize} from '@angular/cdk/text-field';\nimport {Directive, Input} from '@angular/core';\n\n/**\n * Directive to automatically resize a textarea to fit its content.\n * @deprecated Use `cdkTextareaAutosize` from `@angular/cdk/text-field` instead.\n * @breaking-change 8.0.0\n */\n@Directive({\n  selector: 'textarea[mat-autosize], textarea[matTextareaAutosize]',\n  exportAs: 'matTextareaAutosize',\n  inputs: ['cdkAutosizeMinRows', 'cdkAutosizeMaxRows'],\n  host: {\n    'class': 'cdk-textarea-autosize mat-autosize',\n    // Textarea elements that have the directive applied should have a single row by default.\n    // Browsers normally show two rows by default and therefore this limits the minRows binding.\n    'rows': '1',\n    '(input)': '_noopInputHandler()',\n  },\n})\nexport class MatTextareaAutosize extends CdkTextareaAutosize {\n  @Input()\n  get matAutosizeMinRows(): number { return this.minRows; }\n  set matAutosizeMinRows(value: number) { this.minRows = value; }\n\n  @Input()\n  get matAutosizeMaxRows(): number { return this.maxRows; }\n  set matAutosizeMaxRows(value: number) { this.maxRows = value; }\n\n  @Input('mat-autosize')\n  get matAutosize(): boolean { return this.enabled; }\n  set matAutosize(value: boolean) { this.enabled = value; }\n\n  @Input()\n  get matTextareaAutosize(): boolean { return this.enabled; }\n  set matTextareaAutosize(value: boolean) { this.enabled = value; }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {InjectionToken} from '@angular/core';\n\n\n/**\n * This token is used to inject the object whose value should be set into `MatInput`. If none is\n * provided, the native `HTMLInputElement` is used. Directives like `MatDatepickerInput` can provide\n * themselves for this token, in order to make `MatInput` delegate the getting and setting of the\n * value to them.\n */\nexport const MAT_INPUT_VALUE_ACCESSOR =\n    new InjectionToken<{value: any}>('MAT_INPUT_VALUE_ACCESSOR');\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {getSupportedInputTypes, Platform} from '@angular/cdk/platform';\nimport {AutofillMonitor} from '@angular/cdk/text-field';\nimport {\n  Directive,\n  DoCheck,\n  ElementRef,\n  Inject,\n  Input,\n  NgZone,\n  OnChanges,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Self,\n} from '@angular/core';\nimport {FormGroupDirective, NgControl, NgForm} from '@angular/forms';\nimport {\n  CanUpdateErrorState,\n  CanUpdateErrorStateCtor,\n  ErrorStateMatcher,\n  mixinErrorState,\n} from '@angular/material/core';\nimport {MatFormFieldControl} from '@angular/material/form-field';\nimport {Subject} from 'rxjs';\nimport {getMatInputUnsupportedTypeError} from './input-errors';\nimport {MAT_INPUT_VALUE_ACCESSOR} from './input-value-accessor';\n\n\n// Invalid input type. Using one of these will throw an MatInputUnsupportedTypeError.\nconst MAT_INPUT_INVALID_TYPES = [\n  'button',\n  'checkbox',\n  'file',\n  'hidden',\n  'image',\n  'radio',\n  'range',\n  'reset',\n  'submit'\n];\n\nlet nextUniqueId = 0;\n\n// Boilerplate for applying mixins to MatInput.\n/** @docs-private */\nexport class MatInputBase {\n  constructor(public _defaultErrorStateMatcher: ErrorStateMatcher,\n              public _parentForm: NgForm,\n              public _parentFormGroup: FormGroupDirective,\n              /** @docs-private */\n              public ngControl: NgControl) {}\n}\nexport const _MatInputMixinBase: CanUpdateErrorStateCtor & typeof MatInputBase =\n    mixinErrorState(MatInputBase);\n\n/** Directive that allows a native input to work inside a `MatFormField`. */\n@Directive({\n  selector: `input[matInput], textarea[matInput], select[matNativeControl],\n      input[matNativeControl], textarea[matNativeControl]`,\n  exportAs: 'matInput',\n  host: {\n    /**\n     * @breaking-change 8.0.0 remove .mat-form-field-autofill-control in favor of AutofillMonitor.\n     */\n    'class': 'mat-input-element mat-form-field-autofill-control',\n    '[class.mat-input-server]': '_isServer',\n    // Native input properties that are overwritten by Angular inputs need to be synced with\n    // the native input element. Otherwise property bindings for those don't work.\n    '[attr.id]': 'id',\n    '[attr.placeholder]': 'placeholder',\n    '[disabled]': 'disabled',\n    '[required]': 'required',\n    '[attr.readonly]': 'readonly && !_isNativeSelect || null',\n    '[attr.aria-describedby]': '_ariaDescribedby || null',\n    '[attr.aria-invalid]': 'errorState',\n    '[attr.aria-required]': 'required.toString()',\n    '(blur)': '_focusChanged(false)',\n    '(focus)': '_focusChanged(true)',\n    '(input)': '_onInput()',\n  },\n  providers: [{provide: MatFormFieldControl, useExisting: MatInput}],\n})\nexport class MatInput extends _MatInputMixinBase implements MatFormFieldControl<any>, OnChanges,\n    OnDestroy, OnInit, DoCheck, CanUpdateErrorState {\n  protected _uid = `mat-input-${nextUniqueId++}`;\n  protected _previousNativeValue: any;\n  private _inputValueAccessor: {value: any};\n  /** The aria-describedby attribute on the input for improved a11y. */\n  _ariaDescribedby: string;\n\n  /** Whether the component is being rendered on the server. */\n  _isServer = false;\n\n  /** Whether the component is a native html select. */\n  _isNativeSelect = false;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  focused: boolean = false;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  readonly stateChanges: Subject<void> = new Subject<void>();\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  controlType: string = 'mat-input';\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  autofilled = false;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get disabled(): boolean {\n    if (this.ngControl && this.ngControl.disabled !== null) {\n      return this.ngControl.disabled;\n    }\n    return this._disabled;\n  }\n  set disabled(value: boolean) {\n    this._disabled = coerceBooleanProperty(value);\n\n    // Browsers may not fire the blur event if the input is disabled too quickly.\n    // Reset from here to ensure that the element doesn't become stuck.\n    if (this.focused) {\n      this.focused = false;\n      this.stateChanges.next();\n    }\n  }\n  protected _disabled = false;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get id(): string { return this._id; }\n  set id(value: string) { this._id = value || this._uid; }\n  protected _id: string;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input() placeholder: string;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get required(): boolean { return this._required; }\n  set required(value: boolean) { this._required = coerceBooleanProperty(value); }\n  protected _required = false;\n\n  /** Input type of the element. */\n  @Input()\n  get type(): string { return this._type; }\n  set type(value: string) {\n    this._type = value || 'text';\n    this._validateType();\n\n    // When using Angular inputs, developers are no longer able to set the properties on the native\n    // input element. To ensure that bindings for `type` work, we need to sync the setter\n    // with the native property. Textarea elements don't support the type property or attribute.\n    if (!this._isTextarea() && getSupportedInputTypes().has(this._type)) {\n      (this._elementRef.nativeElement as HTMLInputElement).type = this._type;\n    }\n  }\n  protected _type = 'text';\n\n  /** An object used to control when error messages are shown. */\n  @Input() errorStateMatcher: ErrorStateMatcher;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get value(): string { return this._inputValueAccessor.value; }\n  set value(value: string) {\n    if (value !== this.value) {\n      this._inputValueAccessor.value = value;\n      this.stateChanges.next();\n    }\n  }\n\n  /** Whether the element is readonly. */\n  @Input()\n  get readonly(): boolean { return this._readonly; }\n  set readonly(value: boolean) { this._readonly = coerceBooleanProperty(value); }\n  private _readonly = false;\n\n  protected _neverEmptyInputTypes = [\n    'date',\n    'datetime',\n    'datetime-local',\n    'month',\n    'time',\n    'week'\n  ].filter(t => getSupportedInputTypes().has(t));\n\n  constructor(\n    protected _elementRef: ElementRef<HTMLInputElement | HTMLSelectElement | HTMLTextAreaElement>,\n    protected _platform: Platform,\n    /** @docs-private */\n    @Optional() @Self() public ngControl: NgControl,\n    @Optional() _parentForm: NgForm,\n    @Optional() _parentFormGroup: FormGroupDirective,\n    _defaultErrorStateMatcher: ErrorStateMatcher,\n    @Optional() @Self() @Inject(MAT_INPUT_VALUE_ACCESSOR) inputValueAccessor: any,\n    private _autofillMonitor: AutofillMonitor,\n    ngZone: NgZone) {\n\n    super(_defaultErrorStateMatcher, _parentForm, _parentFormGroup, ngControl);\n\n    const element = this._elementRef.nativeElement;\n\n    // If no input value accessor was explicitly specified, use the element as the input value\n    // accessor.\n    this._inputValueAccessor = inputValueAccessor || element;\n\n    this._previousNativeValue = this.value;\n\n    // Force setter to be called in case id was not specified.\n    this.id = this.id;\n\n    // On some versions of iOS the caret gets stuck in the wrong place when holding down the delete\n    // key. In order to get around this we need to \"jiggle\" the caret loose. Since this bug only\n    // exists on iOS, we only bother to install the listener on iOS.\n    if (_platform.IOS) {\n      ngZone.runOutsideAngular(() => {\n        _elementRef.nativeElement.addEventListener('keyup', (event: Event) => {\n          let el = event.target as HTMLInputElement;\n          if (!el.value && !el.selectionStart && !el.selectionEnd) {\n            // Note: Just setting `0, 0` doesn't fix the issue. Setting\n            // `1, 1` fixes it for the first time that you type text and\n            // then hold delete. Toggling to `1, 1` and then back to\n            // `0, 0` seems to completely fix it.\n            el.setSelectionRange(1, 1);\n            el.setSelectionRange(0, 0);\n          }\n        });\n      });\n    }\n\n    this._isServer = !this._platform.isBrowser;\n    this._isNativeSelect = element.nodeName.toLowerCase() === 'select';\n\n    if (this._isNativeSelect) {\n      this.controlType = (element as HTMLSelectElement).multiple ? 'mat-native-select-multiple' :\n                                                                   'mat-native-select';\n    }\n  }\n\n  ngOnInit() {\n    if (this._platform.isBrowser) {\n      this._autofillMonitor.monitor(this._elementRef.nativeElement).subscribe(event => {\n        this.autofilled = event.isAutofilled;\n        this.stateChanges.next();\n      });\n    }\n  }\n\n  ngOnChanges() {\n    this.stateChanges.next();\n  }\n\n  ngOnDestroy() {\n    this.stateChanges.complete();\n\n    if (this._platform.isBrowser) {\n      this._autofillMonitor.stopMonitoring(this._elementRef.nativeElement);\n    }\n  }\n\n  ngDoCheck() {\n    if (this.ngControl) {\n      // We need to re-evaluate this on every change detection cycle, because there are some\n      // error triggers that we can't subscribe to (e.g. parent form submissions). This means\n      // that whatever logic is in here has to be super lean or we risk destroying the performance.\n      this.updateErrorState();\n    }\n\n    // We need to dirty-check the native element's value, because there are some cases where\n    // we won't be notified when it changes (e.g. the consumer isn't using forms or they're\n    // updating the value using `emitEvent: false`).\n    this._dirtyCheckNativeValue();\n  }\n\n  /** Focuses the input. */\n  focus(): void { this._elementRef.nativeElement.focus(); }\n\n  /** Callback for the cases where the focused state of the input changes. */\n  _focusChanged(isFocused: boolean) {\n    if (isFocused !== this.focused && !this.readonly) {\n      this.focused = isFocused;\n      this.stateChanges.next();\n    }\n  }\n\n  _onInput() {\n    // This is a noop function and is used to let Angular know whenever the value changes.\n    // Angular will run a new change detection each time the `input` event has been dispatched.\n    // It's necessary that Angular recognizes the value change, because when floatingLabel\n    // is set to false and Angular forms aren't used, the placeholder won't recognize the\n    // value changes and will not disappear.\n    // Listening to the input event wouldn't be necessary when the input is using the\n    // FormsModule or ReactiveFormsModule, because Angular forms also listens to input events.\n  }\n\n  /** Does some manual dirty checking on the native input `value` property. */\n  protected _dirtyCheckNativeValue() {\n    const newValue = this._elementRef.nativeElement.value;\n\n    if (this._previousNativeValue !== newValue) {\n      this._previousNativeValue = newValue;\n      this.stateChanges.next();\n    }\n  }\n\n  /** Make sure the input is a supported type. */\n  protected _validateType() {\n    if (MAT_INPUT_INVALID_TYPES.indexOf(this._type) > -1) {\n      throw getMatInputUnsupportedTypeError(this._type);\n    }\n  }\n\n  /** Checks whether the input type is one of the types that are never empty. */\n  protected _isNeverEmpty() {\n    return this._neverEmptyInputTypes.indexOf(this._type) > -1;\n  }\n\n  /** Checks whether the input is invalid based on the native validation. */\n  protected _isBadInput() {\n    // The `validity` property won't be present on platform-server.\n    let validity = (this._elementRef.nativeElement as HTMLInputElement).validity;\n    return validity && validity.badInput;\n  }\n\n  /** Determines if the component host is a textarea. */\n  protected _isTextarea() {\n    return this._elementRef.nativeElement.nodeName.toLowerCase() === 'textarea';\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  get empty(): boolean {\n    return !this._isNeverEmpty() && !this._elementRef.nativeElement.value && !this._isBadInput() &&\n        !this.autofilled;\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  get shouldLabelFloat(): boolean {\n    if (this._isNativeSelect) {\n      // For a single-selection `<select>`, the label should float when the selected option has\n      // a non-empty display value. For a `<select multiple>`, the label *always* floats to avoid\n      // overlapping the label with the options.\n      const selectElement = this._elementRef.nativeElement as HTMLSelectElement;\n\n      return selectElement.multiple || !this.empty || !!selectElement.options[0].label ||\n          this.focused;\n    } else {\n      return this.focused || !this.empty;\n    }\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  setDescribedByIds(ids: string[]) { this._ariaDescribedby = ids.join(' '); }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  onContainerClick() {\n    // Do not re-focus the input element if the element is already focused. Otherwise it can happen\n    // that someone clicks on a time input and the cursor resets to the \"hours\" field while the\n    // \"minutes\" field was actually clicked. See: https://github.com/angular/material2/issues/12849\n    if (!this.focused) {\n      this.focus();\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {TextFieldModule} from '@angular/cdk/text-field';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {ErrorStateMatcher} from '@angular/material/core';\nimport {MatFormFieldModule} from '@angular/material/form-field';\nimport {MatTextareaAutosize} from './autosize';\nimport {MatInput} from './input';\n\n\n@NgModule({\n  declarations: [MatInput, MatTextareaAutosize],\n  imports: [\n    CommonModule,\n    TextFieldModule,\n    MatFormFieldModule,\n  ],\n  exports: [\n    TextFieldModule,\n    // We re-export the `MatFormFieldModule` since `MatInput` will almost always\n    // be used together with `MatFormField`.\n    MatFormFieldModule,\n    MatInput,\n    MatTextareaAutosize,\n  ],\n  providers: [ErrorStateMatcher],\n})\nexport class MatInputModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable} from '@angular/core';\nimport {Subject} from 'rxjs';\n\n\n/** Datepicker data that requires internationalization. */\n@Injectable({providedIn: 'root'})\nexport class MatDatepickerIntl {\n  /**\n   * Stream that emits whenever the labels here are changed. Use this to notify\n   * components if the labels have changed after initialization.\n   */\n  readonly changes: Subject<void> = new Subject<void>();\n\n  /** A label for the calendar popup (used by screen readers). */\n  calendarLabel: string = 'Calendar';\n\n  /** A label for the button used to open the calendar popup (used by screen readers). */\n  openCalendarLabel: string = 'Open calendar';\n\n  /** A label for the previous month button (used by screen readers). */\n  prevMonthLabel: string = 'Previous month';\n\n  /** A label for the next month button (used by screen readers). */\n  nextMonthLabel: string = 'Next month';\n\n  /** A label for the previous year button (used by screen readers). */\n  prevYearLabel: string = 'Previous year';\n\n  /** A label for the next year button (used by screen readers). */\n  nextYearLabel: string = 'Next year';\n\n  /** A label for the previous multi-year button (used by screen readers). */\n  prevMultiYearLabel: string = 'Previous 20 years';\n\n  /** A label for the next multi-year button (used by screen readers). */\n  nextMultiYearLabel: string = 'Next 20 years';\n\n  /** A label for the 'switch to month view' button (used by screen readers). */\n  switchToMonthViewLabel: string = 'Choose date';\n\n  /** A label for the 'switch to year view' button (used by screen readers). */\n  switchToMultiYearViewLabel: string = 'Choose month and year';\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  Output,\n  ViewChild,\n  ViewEncapsulation,\n  AfterViewChecked,\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {\n  CanColor,\n  CanColorCtor,\n  CanDisable,\n  CanDisableCtor,\n  CanDisableRipple,\n  CanDisableRippleCtor,\n  HasTabIndex,\n  HasTabIndexCtor,\n  MatRipple,\n  mixinColor,\n  mixinDisabled,\n  mixinDisableRipple,\n  mixinTabIndex,\n} from '@angular/material/core';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\nimport {MAT_CHECKBOX_CLICK_ACTION, MatCheckboxClickAction} from './checkbox-config';\n\n\n// Increasing integer for generating unique ids for checkbox components.\nlet nextUniqueId = 0;\n\n// TODO(josephperrott): Revert to constants for ripple radius once 2018 Checkbox updates have\n// landed.\n// The radius for the checkbox's ripple, in pixels.\nlet calculatedRippleRadius = 0;\n\n/**\n * Provider Expression that allows mat-checkbox to register as a ControlValueAccessor.\n * This allows it to support [(ngModel)].\n * @docs-private\n */\nexport const MAT_CHECKBOX_CONTROL_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatCheckbox),\n  multi: true\n};\n\n/**\n * Represents the different states that require custom transitions between them.\n * @docs-private\n */\nexport enum TransitionCheckState {\n  /** The initial state of the component before any user interaction. */\n  Init,\n  /** The state representing the component when it's becoming checked. */\n  Checked,\n  /** The state representing the component when it's becoming unchecked. */\n  Unchecked,\n  /** The state representing the component when it's becoming indeterminate. */\n  Indeterminate\n}\n\n/** Change event object emitted by MatCheckbox. */\nexport class MatCheckboxChange {\n  /** The source MatCheckbox of the event. */\n  source: MatCheckbox;\n  /** The new `checked` value of the checkbox. */\n  checked: boolean;\n}\n\n// Boilerplate for applying mixins to MatCheckbox.\n/** @docs-private */\nexport class MatCheckboxBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatCheckboxMixinBase:\n    HasTabIndexCtor &\n    CanColorCtor &\n    CanDisableRippleCtor &\n    CanDisableCtor &\n    typeof MatCheckboxBase =\n        mixinTabIndex(mixinColor(mixinDisableRipple(mixinDisabled(MatCheckboxBase)), 'accent'));\n\n\n/**\n * A material design checkbox component. Supports all of the functionality of an HTML5 checkbox,\n * and exposes a similar API. A MatCheckbox can be either checked, unchecked, indeterminate, or\n * disabled. Note that all additional accessibility attributes are taken care of by the component,\n * so there is no need to provide them yourself. However, if you want to omit a label and still\n * have the checkbox be accessible, you may supply an [aria-label] input.\n * See: https://material.io/design/components/selection-controls.html\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-checkbox',\n  templateUrl: 'checkbox.html',\n  styleUrls: ['checkbox.css'],\n  exportAs: 'matCheckbox',\n  host: {\n    'class': 'mat-checkbox',\n    '[id]': 'id',\n    '[attr.tabindex]': 'null',\n    '[class.mat-checkbox-indeterminate]': 'indeterminate',\n    '[class.mat-checkbox-checked]': 'checked',\n    '[class.mat-checkbox-disabled]': 'disabled',\n    '[class.mat-checkbox-label-before]': 'labelPosition == \"before\"',\n    '[class._mat-animation-noopable]': `_animationMode === 'NoopAnimations'`,\n  },\n  providers: [MAT_CHECKBOX_CONTROL_VALUE_ACCESSOR],\n  inputs: ['disableRipple', 'color', 'tabIndex'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class MatCheckbox extends _MatCheckboxMixinBase implements ControlValueAccessor,\n    AfterViewChecked, OnDestroy, CanColor, CanDisable, HasTabIndex, CanDisableRipple {\n\n  /**\n   * Attached to the aria-label attribute of the host element. In most cases, arial-labelledby will\n   * take precedence so this may be omitted.\n   */\n  @Input('aria-label') ariaLabel: string = '';\n\n  /**\n   * Users can specify the `aria-labelledby` attribute which will be forwarded to the input element\n   */\n  @Input('aria-labelledby') ariaLabelledby: string | null = null;\n\n  private _uniqueId: string = `mat-checkbox-${++nextUniqueId}`;\n\n  /** A unique id for the checkbox input. If none is supplied, it will be auto-generated. */\n  @Input() id: string = this._uniqueId;\n\n  /** Returns the unique id for the visual hidden input. */\n  get inputId(): string { return `${this.id || this._uniqueId}-input`; }\n\n  /** Whether the checkbox is required. */\n  @Input()\n  get required(): boolean { return this._required; }\n  set required(value: boolean) { this._required = coerceBooleanProperty(value); }\n  private _required: boolean;\n\n  /** Whether the label should appear after or before the checkbox. Defaults to 'after' */\n  @Input() labelPosition: 'before' | 'after' = 'after';\n\n  /** Name value will be applied to the input element if present */\n  @Input() name: string | null = null;\n\n  /** Event emitted when the checkbox's `checked` value changes. */\n  @Output() readonly change: EventEmitter<MatCheckboxChange> =\n      new EventEmitter<MatCheckboxChange>();\n\n  /** Event emitted when the checkbox's `indeterminate` value changes. */\n  @Output() readonly indeterminateChange: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n  /** The value attribute of the native input element */\n  @Input() value: string;\n\n  /** The native `<input type=\"checkbox\">` element */\n  @ViewChild('input') _inputElement: ElementRef<HTMLInputElement>;\n\n  /** Reference to the ripple instance of the checkbox. */\n  @ViewChild(MatRipple) ripple: MatRipple;\n\n  /**\n   * Called when the checkbox is blurred. Needed to properly implement ControlValueAccessor.\n   * @docs-private\n   */\n  _onTouched: () => any = () => {};\n\n  private _currentAnimationClass: string = '';\n\n  private _currentCheckState: TransitionCheckState = TransitionCheckState.Init;\n\n  private _controlValueAccessorChangeFn: (value: any) => void = () => {};\n\n  constructor(elementRef: ElementRef<HTMLElement>,\n              private _changeDetectorRef: ChangeDetectorRef,\n              private _focusMonitor: FocusMonitor,\n              private _ngZone: NgZone,\n              @Attribute('tabindex') tabIndex: string,\n              @Optional() @Inject(MAT_CHECKBOX_CLICK_ACTION)\n                  private _clickAction: MatCheckboxClickAction,\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode?: string) {\n    super(elementRef);\n\n    this.tabIndex = parseInt(tabIndex) || 0;\n\n    this._focusMonitor.monitor(elementRef, true).subscribe(focusOrigin => {\n      if (!focusOrigin) {\n        // When a focused element becomes disabled, the browser *immediately* fires a blur event.\n        // Angular does not expect events to be raised during change detection, so any state change\n        // (such as a form control's 'ng-touched') will cause a changed-after-checked error.\n        // See https://github.com/angular/angular/issues/17793. To work around this, we defer\n        // telling the form control it has been touched until the next tick.\n        Promise.resolve().then(() => this._onTouched());\n      }\n    });\n  }\n\n  ngAfterViewChecked() {\n    this._calculateRippleRadius();\n  }\n\n  ngOnDestroy() {\n    this._focusMonitor.stopMonitoring(this._elementRef);\n  }\n\n  /**\n   * Whether the checkbox is checked.\n   */\n  @Input()\n  get checked(): boolean { return this._checked; }\n  set checked(value: boolean) {\n    if (value != this.checked) {\n      this._checked = value;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n  private _checked: boolean = false;\n\n  /**\n   * Whether the checkbox is disabled. This fully overrides the implementation provided by\n   * mixinDisabled, but the mixin is still required because mixinTabIndex requires it.\n   */\n  @Input()\n  get disabled() { return this._disabled; }\n  set disabled(value: any) {\n    const newValue = coerceBooleanProperty(value);\n\n    if (newValue !== this.disabled) {\n      this._disabled = newValue;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n  private _disabled: boolean = false;\n\n  /**\n   * Whether the checkbox is indeterminate. This is also known as \"mixed\" mode and can be used to\n   * represent a checkbox with three states, e.g. a checkbox that represents a nested list of\n   * checkable items. Note that whenever checkbox is manually clicked, indeterminate is immediately\n   * set to false.\n   */\n  @Input()\n  get indeterminate(): boolean { return this._indeterminate; }\n  set indeterminate(value: boolean) {\n    const changed = value != this._indeterminate;\n    this._indeterminate = value;\n\n    if (changed) {\n      if (this._indeterminate) {\n        this._transitionCheckState(TransitionCheckState.Indeterminate);\n      } else {\n        this._transitionCheckState(\n          this.checked ? TransitionCheckState.Checked : TransitionCheckState.Unchecked);\n      }\n      this.indeterminateChange.emit(this._indeterminate);\n    }\n  }\n  private _indeterminate: boolean = false;\n\n  _isRippleDisabled() {\n    return this.disableRipple || this.disabled;\n  }\n\n  /** Method being called whenever the label text changes. */\n  _onLabelTextChange() {\n    // Since the event of the `cdkObserveContent` directive runs outside of the zone, the checkbox\n    // component will be only marked for check, but no actual change detection runs automatically.\n    // Instead of going back into the zone in order to trigger a change detection which causes\n    // *all* components to be checked (if explicitly marked or not using OnPush), we only trigger\n    // an explicit change detection for the checkbox view and it's children.\n    this._changeDetectorRef.detectChanges();\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  writeValue(value: any) {\n    this.checked = !!value;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnChange(fn: (value: any) => void) {\n    this._controlValueAccessorChangeFn = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnTouched(fn: any) {\n    this._onTouched = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  setDisabledState(isDisabled: boolean) {\n    this.disabled = isDisabled;\n  }\n\n  _getAriaChecked(): 'true' | 'false' | 'mixed' {\n    return this.checked ? 'true' : (this.indeterminate ? 'mixed' : 'false');\n  }\n\n  private _transitionCheckState(newState: TransitionCheckState) {\n    let oldState = this._currentCheckState;\n    let element: HTMLElement = this._elementRef.nativeElement;\n\n    if (oldState === newState) {\n      return;\n    }\n    if (this._currentAnimationClass.length > 0) {\n      element.classList.remove(this._currentAnimationClass);\n    }\n\n    this._currentAnimationClass = this._getAnimationClassForCheckStateTransition(\n        oldState, newState);\n    this._currentCheckState = newState;\n\n    if (this._currentAnimationClass.length > 0) {\n      element.classList.add(this._currentAnimationClass);\n\n      // Remove the animation class to avoid animation when the checkbox is moved between containers\n      const animationClass = this._currentAnimationClass;\n\n      this._ngZone.runOutsideAngular(() => {\n        setTimeout(() => {\n          element.classList.remove(animationClass);\n        }, 1000);\n      });\n    }\n  }\n\n  private _emitChangeEvent() {\n    const event = new MatCheckboxChange();\n    event.source = this;\n    event.checked = this.checked;\n\n    this._controlValueAccessorChangeFn(this.checked);\n    this.change.emit(event);\n  }\n\n  /** Toggles the `checked` state of the checkbox. */\n  toggle(): void {\n    this.checked = !this.checked;\n  }\n\n  /**\n   * Event handler for checkbox input element.\n   * Toggles checked state if element is not disabled.\n   * Do not toggle on (change) event since IE doesn't fire change event when\n   *   indeterminate checkbox is clicked.\n   * @param event\n   */\n  _onInputClick(event: Event) {\n    // We have to stop propagation for click events on the visual hidden input element.\n    // By default, when a user clicks on a label element, a generated click event will be\n    // dispatched on the associated input element. Since we are using a label element as our\n    // root container, the click event on the `checkbox` will be executed twice.\n    // The real click event will bubble up, and the generated click event also tries to bubble up.\n    // This will lead to multiple click events.\n    // Preventing bubbling for the second event will solve that issue.\n    event.stopPropagation();\n\n    // If resetIndeterminate is false, and the current state is indeterminate, do nothing on click\n    if (!this.disabled && this._clickAction !== 'noop') {\n      // When user manually click on the checkbox, `indeterminate` is set to false.\n      if (this.indeterminate && this._clickAction !== 'check') {\n\n        Promise.resolve().then(() => {\n          this._indeterminate = false;\n          this.indeterminateChange.emit(this._indeterminate);\n        });\n      }\n\n      this.toggle();\n      this._transitionCheckState(\n          this._checked ? TransitionCheckState.Checked : TransitionCheckState.Unchecked);\n\n      // Emit our custom change event if the native input emitted one.\n      // It is important to only emit it, if the native input triggered one, because\n      // we don't want to trigger a change event, when the `checked` variable changes for example.\n      this._emitChangeEvent();\n    } else if (!this.disabled && this._clickAction === 'noop') {\n      // Reset native input when clicked with noop. The native checkbox becomes checked after\n      // click, reset it to be align with `checked` value of `mat-checkbox`.\n      this._inputElement.nativeElement.checked = this.checked;\n      this._inputElement.nativeElement.indeterminate = this.indeterminate;\n    }\n  }\n\n  /** Focuses the checkbox. */\n  focus(): void {\n    this._focusMonitor.focusVia(this._inputElement, 'keyboard');\n  }\n\n  _onInteractionEvent(event: Event) {\n    // We always have to stop propagation on the change event.\n    // Otherwise the change event, from the input element, will bubble up and\n    // emit its event object to the `change` output.\n    event.stopPropagation();\n  }\n\n  private _getAnimationClassForCheckStateTransition(\n      oldState: TransitionCheckState, newState: TransitionCheckState): string {\n    // Don't transition if animations are disabled.\n    if (this._animationMode === 'NoopAnimations') {\n      return '';\n    }\n\n    let animSuffix: string = '';\n\n    switch (oldState) {\n      case TransitionCheckState.Init:\n        // Handle edge case where user interacts with checkbox that does not have [(ngModel)] or\n        // [checked] bound to it.\n        if (newState === TransitionCheckState.Checked) {\n          animSuffix = 'unchecked-checked';\n        } else if (newState == TransitionCheckState.Indeterminate) {\n          animSuffix = 'unchecked-indeterminate';\n        } else {\n          return '';\n        }\n        break;\n      case TransitionCheckState.Unchecked:\n        animSuffix = newState === TransitionCheckState.Checked ?\n            'unchecked-checked' : 'unchecked-indeterminate';\n        break;\n      case TransitionCheckState.Checked:\n        animSuffix = newState === TransitionCheckState.Unchecked ?\n            'checked-unchecked' : 'checked-indeterminate';\n        break;\n      case TransitionCheckState.Indeterminate:\n        animSuffix = newState === TransitionCheckState.Checked ?\n            'indeterminate-checked' : 'indeterminate-unchecked';\n        break;\n    }\n\n    return `mat-checkbox-anim-${animSuffix}`;\n  }\n\n  // TODO(josephperrott): Revert to constants for ripple radius once 2018 Checkbox updates have\n  // landed.\n  /**\n   * Calculate the radius for the ripple based on the ripple elements width.  Only calculated once\n   * for the application.\n   */\n  private _calculateRippleRadius() {\n    if (!calculatedRippleRadius) {\n      const rippleWidth =\n          this._elementRef.nativeElement.querySelector('.mat-checkbox-ripple').clientWidth || 0;\n      calculatedRippleRadius = rippleWidth / 2;\n    }\n    this.ripple.radius = calculatedRippleRadius;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Directive,\n  forwardRef,\n  Provider,\n} from '@angular/core';\nimport {\n  CheckboxRequiredValidator,\n  NG_VALIDATORS,\n} from '@angular/forms';\n\nexport const MAT_CHECKBOX_REQUIRED_VALIDATOR: Provider = {\n  provide: NG_VALIDATORS,\n  useExisting: forwardRef(() => MatCheckboxRequiredValidator),\n  multi: true\n};\n\n/**\n * Validator for Material checkbox's required attribute in template-driven checkbox.\n * Current CheckboxRequiredValidator only work with `input type=checkbox` and does not\n * work with `mat-checkbox`.\n */\n@Directive({\n  selector: `mat-checkbox[required][formControlName],\n             mat-checkbox[required][formControl], mat-checkbox[required][ngModel]`,\n  providers: [MAT_CHECKBOX_REQUIRED_VALIDATOR],\n  host: {'[attr.required]': 'required ? \"\" : null'}\n})\nexport class MatCheckboxRequiredValidator extends CheckboxRequiredValidator {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ObserversModule} from '@angular/cdk/observers';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {MatCheckbox} from './checkbox';\nimport {MatCheckboxRequiredValidator} from './checkbox-required-validator';\n\n\n@NgModule({\n  imports: [CommonModule, MatRippleModule, MatCommonModule, ObserversModule],\n  exports: [MatCheckbox, MatCheckboxRequiredValidator, MatCommonModule],\n  declarations: [MatCheckbox, MatCheckboxRequiredValidator],\n})\nexport class MatCheckboxModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusableOption} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {BACKSPACE, DELETE, SPACE} from '@angular/cdk/keycodes';\nimport {Platform} from '@angular/cdk/platform';\nimport {\n  ContentChild,\n  Directive,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  Output,\n} from '@angular/core';\nimport {\n  CanColor,\n  CanColorCtor,\n  CanDisable,\n  CanDisableCtor,\n  CanDisableRipple,\n  CanDisableRippleCtor,\n  MAT_RIPPLE_GLOBAL_OPTIONS,\n  mixinColor,\n  mixinDisabled,\n  mixinDisableRipple,\n  RippleConfig,\n  RippleGlobalOptions,\n  RippleRenderer,\n  RippleTarget,\n} from '@angular/material/core';\nimport {Subject} from 'rxjs';\nimport {take} from 'rxjs/operators';\n\n\n/** Represents an event fired on an individual `mat-chip`. */\nexport interface MatChipEvent {\n  /** The chip the event was fired on. */\n  chip: MatChip;\n}\n\n/** Event object emitted by MatChip when selected or deselected. */\nexport class MatChipSelectionChange {\n  constructor(\n    /** Reference to the chip that emitted the event. */\n    public source: MatChip,\n    /** Whether the chip that emitted the event is selected. */\n    public selected: boolean,\n    /** Whether the selection change was a result of a user interaction. */\n    public isUserInput = false) { }\n}\n\n\n// Boilerplate for applying mixins to MatChip.\n/** @docs-private */\nexport class MatChipBase {\n  constructor(public _elementRef: ElementRef) {}\n}\n\nexport const _MatChipMixinBase:\n    CanColorCtor & CanDisableRippleCtor & CanDisableCtor & typeof MatChipBase =\n        mixinColor(mixinDisableRipple(mixinDisabled(MatChipBase)), 'primary');\n\nconst CHIP_ATTRIBUTE_NAMES = ['mat-basic-chip'];\n\n/**\n * Dummy directive to add CSS class to chip avatar.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-chip-avatar, [matChipAvatar]',\n  host: {'class': 'mat-chip-avatar'}\n})\nexport class MatChipAvatar {}\n\n/**\n * Dummy directive to add CSS class to chip trailing icon.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-chip-trailing-icon, [matChipTrailingIcon]',\n  host: {'class': 'mat-chip-trailing-icon'}\n})\nexport class MatChipTrailingIcon {}\n\n/**\n * Material design styled Chip component. Used inside the MatChipList component.\n */\n@Directive({\n  selector: `mat-basic-chip, [mat-basic-chip], mat-chip, [mat-chip]`,\n  inputs: ['color', 'disabled', 'disableRipple'],\n  exportAs: 'matChip',\n  host: {\n    'class': 'mat-chip',\n    '[attr.tabindex]': 'disabled ? null : -1',\n    'role': 'option',\n    '[class.mat-chip-selected]': 'selected',\n    '[class.mat-chip-with-avatar]': 'avatar',\n    '[class.mat-chip-with-trailing-icon]': 'trailingIcon || removeIcon',\n    '[class.mat-chip-disabled]': 'disabled',\n    '[attr.disabled]': 'disabled || null',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.aria-selected]': 'ariaSelected',\n    '(click)': '_handleClick($event)',\n    '(keydown)': '_handleKeydown($event)',\n    '(focus)': 'focus()',\n    '(blur)': '_blur()',\n  },\n})\nexport class MatChip extends _MatChipMixinBase implements FocusableOption, OnDestroy, CanColor,\n    CanDisable, CanDisableRipple, RippleTarget {\n\n  /** Reference to the RippleRenderer for the chip. */\n  private _chipRipple: RippleRenderer;\n\n  /** Whether the ripples are globally disabled through the RippleGlobalOptions */\n  private _ripplesGloballyDisabled = false;\n\n  /**\n   * Ripple configuration for ripples that are launched on pointer down.\n   * @docs-private\n   */\n  rippleConfig: RippleConfig = {};\n\n  /**\n   * Whether ripples are disabled on interaction\n   * @docs-private\n   */\n  get rippleDisabled(): boolean {\n    return this.disabled || this.disableRipple || this._ripplesGloballyDisabled;\n  }\n\n  /** Whether the chip has focus. */\n  _hasFocus: boolean = false;\n\n  /** Whether the chip list is selectable */\n  chipListSelectable: boolean = true;\n\n  /** The chip avatar */\n  @ContentChild(MatChipAvatar) avatar: MatChipAvatar;\n\n  /** The chip's trailing icon. */\n  @ContentChild(MatChipTrailingIcon) trailingIcon: MatChipTrailingIcon;\n\n  /** The chip's remove toggler. */\n  @ContentChild(forwardRef(() => MatChipRemove)) removeIcon: MatChipRemove;\n\n  /** Whether the chip is selected. */\n  @Input()\n  get selected(): boolean { return this._selected; }\n  set selected(value: boolean) {\n    const coercedValue = coerceBooleanProperty(value);\n\n    if (coercedValue !== this._selected) {\n      this._selected = coercedValue;\n      this._dispatchSelectionChange();\n    }\n  }\n  protected _selected: boolean = false;\n\n  /** The value of the chip. Defaults to the content inside `<mat-chip>` tags. */\n  @Input()\n  get value(): any {\n    return this._value != undefined\n      ? this._value\n      : this._elementRef.nativeElement.textContent;\n  }\n  set value(value: any) { this._value = value; }\n  protected _value: any;\n\n  /**\n   * Whether or not the chip is selectable. When a chip is not selectable,\n   * changes to it's selected state are always ignored. By default a chip is\n   * selectable, and it becomes non-selectable if it's parent chip list is\n   * not selectable.\n   */\n  @Input()\n  get selectable(): boolean { return this._selectable && this.chipListSelectable; }\n  set selectable(value: boolean) {\n    this._selectable = coerceBooleanProperty(value);\n  }\n  protected _selectable: boolean = true;\n\n  /**\n   * Determines whether or not the chip displays the remove styling and emits (removed) events.\n   */\n  @Input()\n  get removable(): boolean { return this._removable; }\n  set removable(value: boolean) {\n    this._removable = coerceBooleanProperty(value);\n  }\n  protected _removable: boolean = true;\n\n  /** Emits when the chip is focused. */\n  readonly _onFocus = new Subject<MatChipEvent>();\n\n  /** Emits when the chip is blured. */\n  readonly _onBlur = new Subject<MatChipEvent>();\n\n  /** Emitted when the chip is selected or deselected. */\n  @Output() readonly selectionChange: EventEmitter<MatChipSelectionChange> =\n      new EventEmitter<MatChipSelectionChange>();\n\n  /** Emitted when the chip is destroyed. */\n  @Output() readonly destroyed: EventEmitter<MatChipEvent> = new EventEmitter<MatChipEvent>();\n\n  /** Emitted when a chip is to be removed. */\n  @Output() readonly removed: EventEmitter<MatChipEvent> = new EventEmitter<MatChipEvent>();\n\n  /** The ARIA selected applied to the chip. */\n  get ariaSelected(): string | null {\n    return this.selectable ? this.selected.toString() : null;\n  }\n\n  constructor(public _elementRef: ElementRef,\n              private _ngZone: NgZone,\n              platform: Platform,\n              @Optional() @Inject(MAT_RIPPLE_GLOBAL_OPTIONS) globalOptions: RippleGlobalOptions) {\n    super(_elementRef);\n\n    this._addHostClassName();\n\n    this._chipRipple = new RippleRenderer(this, _ngZone, _elementRef, platform);\n    this._chipRipple.setupTriggerEvents(_elementRef.nativeElement);\n\n    if (globalOptions) {\n      // TODO(paul): Do not copy each option manually. Allow dynamic global option changes: #9729\n      this._ripplesGloballyDisabled = !!globalOptions.disabled;\n      this.rippleConfig = {\n        animation: globalOptions.animation,\n        terminateOnPointerUp: globalOptions.terminateOnPointerUp,\n      };\n    }\n  }\n\n  _addHostClassName() {\n    // Add class for the different chips\n    for (const attr of CHIP_ATTRIBUTE_NAMES) {\n      if (this._elementRef.nativeElement.hasAttribute(attr) ||\n        this._elementRef.nativeElement.tagName.toLowerCase() === attr) {\n        (this._elementRef.nativeElement as HTMLElement).classList.add(attr);\n        return;\n      }\n    }\n    (this._elementRef.nativeElement as HTMLElement).classList.add('mat-standard-chip');\n  }\n\n  ngOnDestroy() {\n    this.destroyed.emit({chip: this});\n    this._chipRipple._removeTriggerEvents();\n  }\n\n  /** Selects the chip. */\n  select(): void {\n    if (!this._selected) {\n      this._selected = true;\n      this._dispatchSelectionChange();\n    }\n  }\n\n  /** Deselects the chip. */\n  deselect(): void {\n    if (this._selected) {\n      this._selected = false;\n      this._dispatchSelectionChange();\n    }\n  }\n\n  /** Select this chip and emit selected event */\n  selectViaInteraction(): void {\n    if (!this._selected) {\n      this._selected = true;\n      this._dispatchSelectionChange(true);\n    }\n  }\n\n  /** Toggles the current selected state of this chip. */\n  toggleSelected(isUserInput: boolean = false): boolean {\n    this._selected = !this.selected;\n    this._dispatchSelectionChange(isUserInput);\n    return this.selected;\n  }\n\n  /** Allows for programmatic focusing of the chip. */\n  focus(): void {\n    if (!this._hasFocus) {\n      this._elementRef.nativeElement.focus();\n      this._onFocus.next({chip: this});\n    }\n    this._hasFocus = true;\n  }\n\n  /**\n   * Allows for programmatic removal of the chip. Called by the MatChipList when the DELETE or\n   * BACKSPACE keys are pressed.\n   *\n   * Informs any listeners of the removal request. Does not remove the chip from the DOM.\n   */\n  remove(): void {\n    if (this.removable) {\n      this.removed.emit({chip: this});\n    }\n  }\n\n  /** Handles click events on the chip. */\n  _handleClick(event: Event) {\n    if (this.disabled) {\n      event.preventDefault();\n    } else {\n      event.stopPropagation();\n    }\n  }\n\n  /** Handle custom key presses. */\n  _handleKeydown(event: KeyboardEvent): void {\n    if (this.disabled) {\n      return;\n    }\n\n    switch (event.keyCode) {\n      case DELETE:\n      case BACKSPACE:\n        // If we are removable, remove the focused chip\n        this.remove();\n        // Always prevent so page navigation does not occur\n        event.preventDefault();\n        break;\n      case SPACE:\n        // If we are selectable, toggle the focused chip\n        if (this.selectable) {\n          this.toggleSelected(true);\n        }\n\n        // Always prevent space from scrolling the page since the list has focus\n        event.preventDefault();\n        break;\n    }\n  }\n\n  _blur(): void {\n    // When animations are enabled, Angular may end up removing the chip from the DOM a little\n    // earlier than usual, causing it to be blurred and throwing off the logic in the chip list\n    // that moves focus not the next item. To work around the issue, we defer marking the chip\n    // as not focused until the next time the zone stabilizes.\n    this._ngZone.onStable\n      .asObservable()\n      .pipe(take(1))\n      .subscribe(() => {\n        this._ngZone.run(() => {\n          this._hasFocus = false;\n          this._onBlur.next({chip: this});\n        });\n      });\n  }\n\n  private _dispatchSelectionChange(isUserInput = false) {\n    this.selectionChange.emit({\n      source: this,\n      isUserInput,\n      selected: this._selected\n    });\n  }\n}\n\n\n/**\n * Applies proper (click) support and adds styling for use with the Material Design \"cancel\" icon\n * available at https://material.io/icons/#ic_cancel.\n *\n * Example:\n *\n *     `<mat-chip>\n *       <mat-icon matChipRemove>cancel</mat-icon>\n *     </mat-chip>`\n *\n * You *may* use a custom icon, but you may need to override the `mat-chip-remove` positioning\n * styles to properly center the icon within the chip.\n */\n@Directive({\n  selector: '[matChipRemove]',\n  host: {\n    'class': 'mat-chip-remove mat-chip-trailing-icon',\n    '(click)': '_handleClick($event)',\n  }\n})\nexport class MatChipRemove {\n  constructor(protected _parentChip: MatChip) {}\n\n  /** Calls the parent chip's public `remove()` method if applicable. */\n  _handleClick(event: Event): void {\n    if (this._parentChip.removable) {\n      this._parentChip.remove();\n    }\n\n    // We need to stop event propagation because otherwise the event will bubble up to the\n    // form field and cause the `onContainerClick` method to be invoked. This method would then\n    // reset the focused chip that has been focused after chip removal. Usually the parent\n    // the parent click listener of the `MatChip` would prevent propagation, but it can happen\n    // that the chip is being removed before the event bubbles up.\n    event.stopPropagation();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {InjectionToken} from '@angular/core';\n\n/** Default options, for the chips module, that can be overridden. */\nexport interface MatChipsDefaultOptions {\n  /** The list of key codes that will trigger a chipEnd event. */\n  separatorKeyCodes: number[] | Set<number>;\n}\n\n/** Injection token to be used to override the default options for the chips module. */\nexport const MAT_CHIPS_DEFAULT_OPTIONS =\n    new InjectionToken<MatChipsDefaultOptions>('mat-chips-default-options');\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor} from '@angular/cdk/a11y';\nimport {Platform} from '@angular/cdk/platform';\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  OnDestroy,\n  ViewChild,\n  ViewEncapsulation,\n  Optional,\n  Inject,\n  Input,\n} from '@angular/core';\nimport {\n  CanColor,\n  CanDisable,\n  CanDisableRipple,\n  CanColorCtor,\n  CanDisableCtor,\n  CanDisableRippleCtor,\n  MatRipple,\n  mixinColor,\n  mixinDisabled,\n  mixinDisableRipple,\n} from '@angular/material/core';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\n\n/** Default color palette for round buttons (mat-fab and mat-mini-fab) */\nconst DEFAULT_ROUND_BUTTON_COLOR = 'accent';\n\n/**\n * List of classes to add to MatButton instances based on host attributes to\n * style as different variants.\n */\nconst BUTTON_HOST_ATTRIBUTES = [\n  'mat-button',\n  'mat-flat-button',\n  'mat-icon-button',\n  'mat-raised-button',\n  'mat-stroked-button',\n  'mat-mini-fab',\n  'mat-fab',\n];\n\n// Boilerplate for applying mixins to MatButton.\n/** @docs-private */\nexport class MatButtonBase {\n  constructor(public _elementRef: ElementRef) {}\n}\n\nexport const _MatButtonMixinBase:\n    CanDisableRippleCtor & CanDisableCtor & CanColorCtor & typeof MatButtonBase =\n        mixinColor(mixinDisabled(mixinDisableRipple(MatButtonBase)));\n\n/**\n * Material design button.\n */\n@Component({\n  moduleId: module.id,\n  selector: `button[mat-button], button[mat-raised-button], button[mat-icon-button],\n             button[mat-fab], button[mat-mini-fab], button[mat-stroked-button],\n             button[mat-flat-button]`,\n  exportAs: 'matButton',\n  host: {\n    '[disabled]': 'disabled || null',\n    '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"',\n  },\n  templateUrl: 'button.html',\n  styleUrls: ['button.css'],\n  inputs: ['disabled', 'disableRipple', 'color'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatButton extends _MatButtonMixinBase\n    implements OnDestroy, CanDisable, CanColor, CanDisableRipple {\n\n  /** Whether the button is round. */\n  readonly isRoundButton: boolean = this._hasHostAttributes('mat-fab', 'mat-mini-fab');\n\n  /** Whether the button is icon button. */\n  readonly isIconButton: boolean = this._hasHostAttributes('mat-icon-button');\n\n  /** Reference to the MatRipple instance of the button. */\n  @ViewChild(MatRipple) ripple: MatRipple;\n\n  constructor(elementRef: ElementRef,\n              /**\n               * @deprecated Platform checks for SSR are no longer needed\n               * @breaking-change 8.0.0\n               */\n              // tslint:disable-next-line:no-unused-variable\n              private _platform: Platform,\n              private _focusMonitor: FocusMonitor,\n              // @breaking-change 8.0.0 `_animationMode` parameter to be made required.\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode?: string) {\n    super(elementRef);\n\n    // For each of the variant selectors that is prevent in the button's host\n    // attributes, add the correct corresponding class.\n    for (const attr of BUTTON_HOST_ATTRIBUTES) {\n      if (this._hasHostAttributes(attr)) {\n        (elementRef.nativeElement as HTMLElement).classList.add(attr);\n      }\n    }\n\n    this._focusMonitor.monitor(this._elementRef, true);\n\n    if (this.isRoundButton) {\n      this.color = DEFAULT_ROUND_BUTTON_COLOR;\n    }\n  }\n\n  ngOnDestroy() {\n    this._focusMonitor.stopMonitoring(this._elementRef);\n  }\n\n  /** Focuses the button. */\n  focus(): void {\n    this._getHostElement().focus();\n  }\n\n  _getHostElement() {\n    return this._elementRef.nativeElement;\n  }\n\n  _isRippleDisabled() {\n    return this.disableRipple || this.disabled;\n  }\n\n  /** Gets whether the button has one of the given attributes. */\n  _hasHostAttributes(...attributes: string[]) {\n    return attributes.some(attribute => this._getHostElement().hasAttribute(attribute));\n  }\n}\n\n/**\n * Raised Material design button.\n */\n@Component({\n  moduleId: module.id,\n  selector: `a[mat-button], a[mat-raised-button], a[mat-icon-button], a[mat-fab],\n             a[mat-mini-fab], a[mat-stroked-button], a[mat-flat-button]`,\n  exportAs: 'matButton, matAnchor',\n  host: {\n    // Note that we ignore the user-specified tabindex when it's disabled for\n    // consistency with the `mat-button` applied on native buttons where even\n    // though they have an index, they're not tabbable.\n    '[attr.tabindex]': 'disabled ? -1 : (tabIndex || 0)',\n    '[attr.disabled]': 'disabled || null',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '(click)': '_haltDisabledEvents($event)',\n    '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"',\n  },\n  inputs: ['disabled', 'disableRipple', 'color'],\n  templateUrl: 'button.html',\n  styleUrls: ['button.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatAnchor extends MatButton {\n  /** Tabindex of the button. */\n  @Input() tabIndex: number;\n\n  constructor(\n    platform: Platform,\n    focusMonitor: FocusMonitor,\n    elementRef: ElementRef,\n    // @breaking-change 8.0.0 `animationMode` parameter to be made required.\n    @Optional() @Inject(ANIMATION_MODULE_TYPE) animationMode?: string) {\n    super(elementRef, platform, focusMonitor, animationMode);\n  }\n\n  _haltDisabledEvents(event: Event) {\n    // A disabled button shouldn't apply any actions\n    if (this.disabled) {\n      event.preventDefault();\n      event.stopImmediatePropagation();\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {MatAnchor, MatButton} from './button';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatRippleModule,\n    MatCommonModule,\n  ],\n  exports: [\n    MatButton,\n    MatAnchor,\n    MatCommonModule,\n  ],\n  declarations: [\n    MatButton,\n    MatAnchor,\n  ],\n})\nexport class MatButtonModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {SelectionModel} from '@angular/cdk/collections';\nimport {\n  AfterContentInit,\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Input,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Output,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n  InjectionToken,\n  Inject,\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {\n  CanDisableRipple,\n  mixinDisableRipple,\n  CanDisableRippleCtor,\n} from '@angular/material/core';\n\n\n/** Acceptable types for a button toggle. */\nexport type ToggleType = 'checkbox' | 'radio';\n\n/** Possible appearance styles for the button toggle. */\nexport type MatButtonToggleAppearance = 'legacy' | 'standard';\n\n/**\n * Represents the default options for the button toggle that can be configured\n * using the `MAT_BUTTON_TOGGLE_DEFAULT_OPTIONS` injection token.\n */\nexport interface MatButtonToggleDefaultOptions {\n  appearance?: MatButtonToggleAppearance;\n}\n\n/**\n * Injection token that can be used to configure the\n * default options for all button toggles within an app.\n */\nexport const MAT_BUTTON_TOGGLE_DEFAULT_OPTIONS =\n    new InjectionToken<MatButtonToggleDefaultOptions>('MAT_BUTTON_TOGGLE_DEFAULT_OPTIONS');\n\n\n\n/**\n * Provider Expression that allows mat-button-toggle-group to register as a ControlValueAccessor.\n * This allows it to support [(ngModel)].\n * @docs-private\n */\nexport const MAT_BUTTON_TOGGLE_GROUP_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatButtonToggleGroup),\n  multi: true\n};\n\n/**\n * @deprecated Use `MatButtonToggleGroup` instead.\n * @breaking-change 8.0.0\n */\nexport class MatButtonToggleGroupMultiple {}\n\nlet _uniqueIdCounter = 0;\n\n/** Change event object emitted by MatButtonToggle. */\nexport class MatButtonToggleChange {\n  constructor(\n    /** The MatButtonToggle that emits the event. */\n    public source: MatButtonToggle,\n\n    /** The value assigned to the MatButtonToggle. */\n    public value: any) {}\n}\n\n/** Exclusive selection button toggle group that behaves like a radio-button group. */\n@Directive({\n  selector: 'mat-button-toggle-group',\n  providers: [\n    MAT_BUTTON_TOGGLE_GROUP_VALUE_ACCESSOR,\n    {provide: MatButtonToggleGroupMultiple, useExisting: MatButtonToggleGroup},\n  ],\n  host: {\n    'role': 'group',\n    'class': 'mat-button-toggle-group',\n    '[attr.aria-disabled]': 'disabled',\n    '[class.mat-button-toggle-vertical]': 'vertical',\n    '[class.mat-button-toggle-group-appearance-standard]': 'appearance === \"standard\"',\n  },\n  exportAs: 'matButtonToggleGroup',\n})\nexport class MatButtonToggleGroup implements ControlValueAccessor, OnInit, AfterContentInit {\n  private _vertical = false;\n  private _multiple = false;\n  private _disabled = false;\n  private _selectionModel: SelectionModel<MatButtonToggle>;\n\n  /**\n   * Reference to the raw value that the consumer tried to assign. The real\n   * value will exclude any values from this one that don't correspond to a\n   * toggle. Useful for the cases where the value is assigned before the toggles\n   * have been initialized or at the same that they're being swapped out.\n   */\n  private _rawValue: any;\n\n  /**\n   * The method to be called in order to update ngModel.\n   * Now `ngModel` binding is not supported in multiple selection mode.\n   */\n  _controlValueAccessorChangeFn: (value: any) => void = () => {};\n\n  /** onTouch function registered via registerOnTouch (ControlValueAccessor). */\n  _onTouched: () => any = () => {};\n\n  /** Child button toggle buttons. */\n  @ContentChildren(forwardRef(() => MatButtonToggle)) _buttonToggles: QueryList<MatButtonToggle>;\n\n  /** The appearance for all the buttons in the group. */\n  @Input() appearance: MatButtonToggleAppearance;\n\n  /** `name` attribute for the underlying `input` element. */\n  @Input()\n  get name(): string { return this._name; }\n  set name(value: string) {\n    this._name = value;\n\n    if (this._buttonToggles) {\n      this._buttonToggles.forEach(toggle => toggle.name = this._name);\n    }\n  }\n  private _name = `mat-button-toggle-group-${_uniqueIdCounter++}`;\n\n  /** Whether the toggle group is vertical. */\n  @Input()\n  get vertical(): boolean { return this._vertical; }\n  set vertical(value: boolean) {\n    this._vertical = coerceBooleanProperty(value);\n  }\n\n  /** Value of the toggle group. */\n  @Input()\n  get value(): any {\n    const selected = this._selectionModel ? this._selectionModel.selected : [];\n\n    if (this.multiple) {\n      return selected.map(toggle => toggle.value);\n    }\n\n    return selected[0] ? selected[0].value : undefined;\n  }\n  set value(newValue: any) {\n    this._setSelectionByValue(newValue);\n    this.valueChange.emit(this.value);\n  }\n\n  /**\n   * Event that emits whenever the value of the group changes.\n   * Used to facilitate two-way data binding.\n   * @docs-private\n   */\n  @Output() readonly valueChange = new EventEmitter<any>();\n\n  /** Selected button toggles in the group. */\n  get selected() {\n    const selected = this._selectionModel.selected;\n    return this.multiple ? selected : (selected[0] || null);\n  }\n\n  /** Whether multiple button toggles can be selected. */\n  @Input()\n  get multiple(): boolean { return this._multiple; }\n  set multiple(value: boolean) {\n    this._multiple = coerceBooleanProperty(value);\n  }\n\n  /** Whether multiple button toggle group is disabled. */\n  @Input()\n  get disabled(): boolean { return this._disabled; }\n  set disabled(value: boolean) {\n    this._disabled = coerceBooleanProperty(value);\n\n    if (this._buttonToggles) {\n      this._buttonToggles.forEach(toggle => toggle._markForCheck());\n    }\n  }\n\n  /** Event emitted when the group's value changes. */\n  @Output() readonly change: EventEmitter<MatButtonToggleChange> =\n      new EventEmitter<MatButtonToggleChange>();\n\n  constructor(\n    private _changeDetector: ChangeDetectorRef,\n    @Optional() @Inject(MAT_BUTTON_TOGGLE_DEFAULT_OPTIONS)\n        defaultOptions?: MatButtonToggleDefaultOptions) {\n\n      this.appearance =\n          defaultOptions && defaultOptions.appearance ? defaultOptions.appearance : 'standard';\n    }\n\n  ngOnInit() {\n    this._selectionModel = new SelectionModel<MatButtonToggle>(this.multiple, undefined, false);\n  }\n\n  ngAfterContentInit() {\n    this._selectionModel.select(...this._buttonToggles.filter(toggle => toggle.checked));\n  }\n\n  /**\n   * Sets the model value. Implemented as part of ControlValueAccessor.\n   * @param value Value to be set to the model.\n   */\n  writeValue(value: any) {\n    this.value = value;\n    this._changeDetector.markForCheck();\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnChange(fn: (value: any) => void) {\n    this._controlValueAccessorChangeFn = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnTouched(fn: any) {\n    this._onTouched = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n  }\n\n  /** Dispatch change event with current selection and group value. */\n  _emitChangeEvent(): void {\n    const selected = this.selected;\n    const source = Array.isArray(selected) ? selected[selected.length - 1] : selected;\n    const event = new MatButtonToggleChange(source!, this.value);\n    this._controlValueAccessorChangeFn(event.value);\n    this.change.emit(event);\n  }\n\n  /**\n   * Syncs a button toggle's selected state with the model value.\n   * @param toggle Toggle to be synced.\n   * @param select Whether the toggle should be selected.\n   * @param isUserInput Whether the change was a result of a user interaction.\n   */\n  _syncButtonToggle(toggle: MatButtonToggle, select: boolean, isUserInput = false) {\n    // Deselect the currently-selected toggle, if we're in single-selection\n    // mode and the button being toggled isn't selected at the moment.\n    if (!this.multiple && this.selected && !toggle.checked) {\n      (this.selected as MatButtonToggle).checked = false;\n    }\n\n    if (select) {\n      this._selectionModel.select(toggle);\n    } else {\n      this._selectionModel.deselect(toggle);\n    }\n\n    // Only emit the change event for user input.\n    if (isUserInput) {\n      this._emitChangeEvent();\n    }\n\n    // Note: we emit this one no matter whether it was a user interaction, because\n    // it is used by Angular to sync up the two-way data binding.\n    this.valueChange.emit(this.value);\n  }\n\n  /** Checks whether a button toggle is selected. */\n  _isSelected(toggle: MatButtonToggle) {\n    return this._selectionModel.isSelected(toggle);\n  }\n\n  /** Determines whether a button toggle should be checked on init. */\n  _isPrechecked(toggle: MatButtonToggle) {\n    if (typeof this._rawValue === 'undefined') {\n      return false;\n    }\n\n    if (this.multiple && Array.isArray(this._rawValue)) {\n      return this._rawValue.some(value => toggle.value != null && value === toggle.value);\n    }\n\n    return toggle.value === this._rawValue;\n  }\n\n  /** Updates the selection state of the toggles in the group based on a value. */\n  private _setSelectionByValue(value: any|any[]) {\n    this._rawValue = value;\n\n    if (!this._buttonToggles) {\n      return;\n    }\n\n    if (this.multiple && value) {\n      if (!Array.isArray(value)) {\n        throw Error('Value must be an array in multiple-selection mode.');\n      }\n\n      this._clearSelection();\n      value.forEach((currentValue: any) => this._selectValue(currentValue));\n    } else {\n      this._clearSelection();\n      this._selectValue(value);\n    }\n  }\n\n  /** Clears the selected toggles. */\n  private _clearSelection() {\n    this._selectionModel.clear();\n    this._buttonToggles.forEach(toggle => toggle.checked = false);\n  }\n\n  /** Selects a value if there's a toggle that corresponds to it. */\n  private _selectValue(value: any) {\n    const correspondingOption = this._buttonToggles.find(toggle => {\n      return toggle.value != null && toggle.value === value;\n    });\n\n    if (correspondingOption) {\n      correspondingOption.checked = true;\n      this._selectionModel.select(correspondingOption);\n    }\n  }\n}\n\n// Boilerplate for applying mixins to the MatButtonToggle class.\n/** @docs-private */\nexport class MatButtonToggleBase {}\nexport const _MatButtonToggleMixinBase: CanDisableRippleCtor & typeof MatButtonToggleBase =\n    mixinDisableRipple(MatButtonToggleBase);\n\n/** Single button inside of a toggle group. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-button-toggle',\n  templateUrl: 'button-toggle.html',\n  styleUrls: ['button-toggle.css'],\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matButtonToggle',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  inputs: ['disableRipple'],\n  host: {\n    '[class.mat-button-toggle-standalone]': '!buttonToggleGroup',\n    '[class.mat-button-toggle-checked]': 'checked',\n    '[class.mat-button-toggle-disabled]': 'disabled',\n    '[class.mat-button-toggle-appearance-standard]': 'appearance === \"standard\"',\n    'class': 'mat-button-toggle',\n    // Always reset the tabindex to -1 so it doesn't conflict with the one on the `button`,\n    // but can still receive focus from things like cdkFocusInitial.\n    '[attr.tabindex]': '-1',\n    '[attr.id]': 'id',\n    '(focus)': 'focus()',\n  }\n})\nexport class MatButtonToggle extends _MatButtonToggleMixinBase implements OnInit,\n  CanDisableRipple, OnDestroy {\n\n  private _isSingleSelector = false;\n  private _checked = false;\n\n  /**\n   * Attached to the aria-label attribute of the host element. In most cases, arial-labelledby will\n   * take precedence so this may be omitted.\n   */\n  @Input('aria-label') ariaLabel: string;\n\n  /**\n   * Users can specify the `aria-labelledby` attribute which will be forwarded to the input element\n   */\n  @Input('aria-labelledby') ariaLabelledby: string | null = null;\n\n  /** Type of the button toggle. Either 'radio' or 'checkbox'. */\n  _type: ToggleType;\n\n  @ViewChild('button') _buttonElement: ElementRef<HTMLButtonElement>;\n\n  /** The parent button toggle group (exclusive selection). Optional. */\n  buttonToggleGroup: MatButtonToggleGroup;\n\n  /** Unique ID for the underlying `button` element. */\n  get buttonId(): string { return `${this.id}-button`; }\n\n  /** The unique ID for this button toggle. */\n  @Input() id: string;\n\n  /** HTML's 'name' attribute used to group radios for unique selection. */\n  @Input() name: string;\n\n  /** MatButtonToggleGroup reads this to assign its own value. */\n  @Input() value: any;\n\n  /** Tabindex for the toggle. */\n  @Input() tabIndex: number | null;\n\n  /** The appearance style of the button. */\n  @Input()\n  get appearance(): MatButtonToggleAppearance {\n    return this.buttonToggleGroup ? this.buttonToggleGroup.appearance : this._appearance;\n  }\n  set appearance(value: MatButtonToggleAppearance) {\n    this._appearance = value;\n  }\n  private _appearance: MatButtonToggleAppearance;\n\n  /** Whether the button is checked. */\n  @Input()\n  get checked(): boolean {\n    return this.buttonToggleGroup ? this.buttonToggleGroup._isSelected(this) : this._checked;\n  }\n  set checked(value: boolean) {\n    const newValue = coerceBooleanProperty(value);\n\n    if (newValue !== this._checked) {\n      this._checked = newValue;\n\n      if (this.buttonToggleGroup) {\n        this.buttonToggleGroup._syncButtonToggle(this, this._checked);\n      }\n\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  /** Whether the button is disabled. */\n  @Input()\n  get disabled(): boolean {\n    return this._disabled || (this.buttonToggleGroup && this.buttonToggleGroup.disabled);\n  }\n  set disabled(value: boolean) { this._disabled = coerceBooleanProperty(value); }\n  private _disabled: boolean = false;\n\n  /** Event emitted when the group value changes. */\n  @Output() readonly change: EventEmitter<MatButtonToggleChange> =\n      new EventEmitter<MatButtonToggleChange>();\n\n  constructor(@Optional() toggleGroup: MatButtonToggleGroup,\n              private _changeDetectorRef: ChangeDetectorRef,\n              private _elementRef: ElementRef<HTMLElement>,\n              private _focusMonitor: FocusMonitor,\n              // @breaking-change 8.0.0 `defaultTabIndex` to be made a required parameter.\n              @Attribute('tabindex') defaultTabIndex: string,\n              @Optional() @Inject(MAT_BUTTON_TOGGLE_DEFAULT_OPTIONS)\n                  defaultOptions?: MatButtonToggleDefaultOptions) {\n    super();\n\n    const parsedTabIndex = Number(defaultTabIndex);\n    this.tabIndex = (parsedTabIndex || parsedTabIndex === 0) ? parsedTabIndex : null;\n    this.buttonToggleGroup = toggleGroup;\n    this.appearance =\n        defaultOptions && defaultOptions.appearance ? defaultOptions.appearance : 'standard';\n  }\n\n  ngOnInit() {\n    this._isSingleSelector = this.buttonToggleGroup && !this.buttonToggleGroup.multiple;\n    this._type = this._isSingleSelector ? 'radio' : 'checkbox';\n    this.id = this.id || `mat-button-toggle-${_uniqueIdCounter++}`;\n\n    if (this._isSingleSelector) {\n      this.name = this.buttonToggleGroup.name;\n    }\n\n    if (this.buttonToggleGroup && this.buttonToggleGroup._isPrechecked(this)) {\n      this.checked = true;\n    }\n\n    this._focusMonitor.monitor(this._elementRef, true);\n  }\n\n  ngOnDestroy() {\n    this._focusMonitor.stopMonitoring(this._elementRef);\n  }\n\n  /** Focuses the button. */\n  focus(): void {\n    this._buttonElement.nativeElement.focus();\n  }\n\n  /** Checks the button toggle due to an interaction with the underlying native button. */\n  _onButtonClick() {\n    const newChecked = this._isSingleSelector ? true : !this._checked;\n\n    if (newChecked !== this._checked) {\n      this._checked = newChecked;\n      if (this.buttonToggleGroup) {\n        this.buttonToggleGroup._syncButtonToggle(this, this._checked, true);\n        this.buttonToggleGroup._onTouched();\n      }\n    }\n    // Emit a change event when it's the single selector\n    this.change.emit(new MatButtonToggleChange(this, this.value));\n  }\n\n  /**\n   * Marks the button toggle as needing checking for change detection.\n   * This method is exposed because the parent button toggle group will directly\n   * update bound properties of the radio button.\n   */\n  _markForCheck() {\n    // When the group value changes, the button will not be notified.\n    // Use `markForCheck` to explicit update button toggle's status.\n    this._changeDetectorRef.markForCheck();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {MatButtonToggle, MatButtonToggleGroup} from './button-toggle';\n\n\n@NgModule({\n  imports: [MatCommonModule, MatRippleModule],\n  exports: [MatCommonModule, MatButtonToggleGroup, MatButtonToggle],\n  declarations: [MatButtonToggleGroup, MatButtonToggle],\n})\nexport class MatButtonToggleModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ViewEncapsulation,\n  ChangeDetectionStrategy,\n  Directive,\n  Input,\n} from '@angular/core';\n\n\n/**\n * Content of a card, needed as it's used as a selector in the API.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-card-content',\n  host: {'class': 'mat-card-content'}\n})\nexport class MatCardContent {}\n\n/**\n * Title of a card, needed as it's used as a selector in the API.\n * @docs-private\n */\n@Directive({\n  selector: `mat-card-title, [mat-card-title], [matCardTitle]`,\n  host: {\n    'class': 'mat-card-title'\n  }\n})\nexport class MatCardTitle {}\n\n/**\n * Sub-title of a card, needed as it's used as a selector in the API.\n * @docs-private\n */\n@Directive({\n  selector: `mat-card-subtitle, [mat-card-subtitle], [matCardSubtitle]`,\n  host: {\n    'class': 'mat-card-subtitle'\n  }\n})\nexport class MatCardSubtitle {}\n\n/**\n * Action section of a card, needed as it's used as a selector in the API.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-card-actions',\n  exportAs: 'matCardActions',\n  host: {\n    'class': 'mat-card-actions',\n    '[class.mat-card-actions-align-end]': 'align === \"end\"',\n  }\n})\nexport class MatCardActions {\n  /** Position of the actions inside the card. */\n  @Input() align: 'start' | 'end' = 'start';\n}\n\n/**\n * Footer of a card, needed as it's used as a selector in the API.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-card-footer',\n  host: {'class': 'mat-card-footer'}\n})\nexport class MatCardFooter {}\n\n/**\n * Image used in a card, needed to add the mat- CSS styling.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-card-image], [matCardImage]',\n  host: {'class': 'mat-card-image'}\n})\nexport class MatCardImage {}\n\n/**\n * Image used in a card, needed to add the mat- CSS styling.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-card-sm-image], [matCardImageSmall]',\n  host: {'class': 'mat-card-sm-image'}\n})\nexport class MatCardSmImage {}\n\n/**\n * Image used in a card, needed to add the mat- CSS styling.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-card-md-image], [matCardImageMedium]',\n  host: {'class': 'mat-card-md-image'}\n})\nexport class MatCardMdImage {}\n\n/**\n * Image used in a card, needed to add the mat- CSS styling.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-card-lg-image], [matCardImageLarge]',\n  host: {'class': 'mat-card-lg-image'}\n})\nexport class MatCardLgImage {}\n\n/**\n * Large image used in a card, needed to add the mat- CSS styling.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-card-xl-image], [matCardImageXLarge]',\n  host: {'class': 'mat-card-xl-image'}\n})\nexport class MatCardXlImage {}\n\n/**\n * Avatar image used in a card, needed to add the mat- CSS styling.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-card-avatar], [matCardAvatar]',\n  host: {'class': 'mat-card-avatar'}\n})\nexport class MatCardAvatar {}\n\n\n/**\n * A basic content container component that adds the styles of a Material design card.\n *\n * While this component can be used alone, it also provides a number\n * of preset styles for common card sections, including:\n * - mat-card-title\n * - mat-card-subtitle\n * - mat-card-content\n * - mat-card-actions\n * - mat-card-footer\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-card',\n  exportAs: 'matCard',\n  templateUrl: 'card.html',\n  styleUrls: ['card.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {'class': 'mat-card'}\n})\nexport class MatCard {}\n\n\n/**\n * Component intended to be used within the `<mat-card>` component. It adds styles for a\n * preset header section (i.e. a title, subtitle, and avatar layout).\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-card-header',\n  templateUrl: 'card-header.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {'class': 'mat-card-header'}\n})\nexport class MatCardHeader {}\n\n\n/**\n * Component intended to be used within the `<mat-card>` component. It adds styles for a preset\n * layout that groups an image with a title section.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-card-title-group',\n  templateUrl: 'card-title-group.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {'class': 'mat-card-title-group'}\n})\nexport class MatCardTitleGroup {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {\n  MatCard,\n  MatCardActions,\n  MatCardAvatar,\n  MatCardContent,\n  MatCardFooter,\n  MatCardHeader,\n  MatCardImage,\n  MatCardLgImage,\n  MatCardMdImage,\n  MatCardSmImage,\n  MatCardSubtitle,\n  MatCardTitle,\n  MatCardTitleGroup,\n  MatCardXlImage,\n} from './card';\n\n\n@NgModule({\n  imports: [MatCommonModule],\n  exports: [\n    MatCard,\n    MatCardHeader,\n    MatCardTitleGroup,\n    MatCardContent,\n    MatCardTitle,\n    MatCardSubtitle,\n    MatCardActions,\n    MatCardFooter,\n    MatCardSmImage,\n    MatCardMdImage,\n    MatCardLgImage,\n    MatCardImage,\n    MatCardXlImage,\n    MatCardAvatar,\n    MatCommonModule,\n  ],\n  declarations: [\n    MatCard, MatCardHeader, MatCardTitleGroup, MatCardContent, MatCardTitle, MatCardSubtitle,\n    MatCardActions, MatCardFooter, MatCardSmImage, MatCardMdImage, MatCardLgImage, MatCardImage,\n    MatCardXlImage, MatCardAvatar,\n  ],\n})\nexport class MatCardModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {InjectionToken} from '@angular/core';\n\n\n/**\n * Checkbox click action when user click on input element.\n * noop: Do not toggle checked or indeterminate.\n * check: Only toggle checked status, ignore indeterminate.\n * check-indeterminate: Toggle checked status, set indeterminate to false. Default behavior.\n * undefined: Same as `check-indeterminate`.\n */\nexport type MatCheckboxClickAction = 'noop' | 'check' | 'check-indeterminate' | undefined;\n\n/**\n * Injection token that can be used to specify the checkbox click behavior.\n */\nexport const MAT_CHECKBOX_CLICK_ACTION =\n    new InjectionToken<MatCheckboxClickAction>('mat-checkbox-click-action');\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ActiveDescendantKeyManager} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  InjectionToken,\n  Input,\n  Output,\n  QueryList,\n  TemplateRef,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {\n  CanDisableRipple,\n  CanDisableRippleCtor,\n  MAT_OPTION_PARENT_COMPONENT,\n  MatOptgroup,\n  MatOption,\n  mixinDisableRipple,\n} from '@angular/material/core';\n\n\n/**\n * Autocomplete IDs need to be unique across components, so this counter exists outside of\n * the component definition.\n */\nlet _uniqueAutocompleteIdCounter = 0;\n\n/** Event object that is emitted when an autocomplete option is selected. */\nexport class MatAutocompleteSelectedEvent {\n  constructor(\n    /** Reference to the autocomplete panel that emitted the event. */\n    public source: MatAutocomplete,\n    /** Option that was selected. */\n    public option: MatOption) { }\n}\n\n\n// Boilerplate for applying mixins to MatAutocomplete.\n/** @docs-private */\nexport class MatAutocompleteBase {}\nexport const _MatAutocompleteMixinBase: CanDisableRippleCtor & typeof MatAutocompleteBase =\n    mixinDisableRipple(MatAutocompleteBase);\n\n/** Default `mat-autocomplete` options that can be overridden. */\nexport interface MatAutocompleteDefaultOptions {\n  /** Whether the first option should be highlighted when an autocomplete panel is opened. */\n  autoActiveFirstOption?: boolean;\n}\n\n/** Injection token to be used to override the default options for `mat-autocomplete`. */\nexport const MAT_AUTOCOMPLETE_DEFAULT_OPTIONS =\n    new InjectionToken<MatAutocompleteDefaultOptions>('mat-autocomplete-default-options', {\n      providedIn: 'root',\n      factory: MAT_AUTOCOMPLETE_DEFAULT_OPTIONS_FACTORY,\n    });\n\n/** @docs-private */\nexport function MAT_AUTOCOMPLETE_DEFAULT_OPTIONS_FACTORY(): MatAutocompleteDefaultOptions {\n  return {autoActiveFirstOption: false};\n}\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-autocomplete',\n  templateUrl: 'autocomplete.html',\n  styleUrls: ['autocomplete.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  exportAs: 'matAutocomplete',\n  inputs: ['disableRipple'],\n  host: {\n    'class': 'mat-autocomplete'\n  },\n  providers: [\n    {provide: MAT_OPTION_PARENT_COMPONENT, useExisting: MatAutocomplete}\n  ]\n})\nexport class MatAutocomplete extends _MatAutocompleteMixinBase implements AfterContentInit,\n  CanDisableRipple {\n\n  /** Manages active item in option list based on key events. */\n  _keyManager: ActiveDescendantKeyManager<MatOption>;\n\n  /** Whether the autocomplete panel should be visible, depending on option length. */\n  showPanel: boolean = false;\n\n  /** Whether the autocomplete panel is open. */\n  get isOpen(): boolean { return this._isOpen && this.showPanel; }\n  _isOpen: boolean = false;\n\n  /** @docs-private */\n  @ViewChild(TemplateRef) template: TemplateRef<any>;\n\n  /** Element for the panel containing the autocomplete options. */\n  @ViewChild('panel') panel: ElementRef;\n\n  /** @docs-private */\n  @ContentChildren(MatOption, { descendants: true }) options: QueryList<MatOption>;\n\n  /** @docs-private */\n  @ContentChildren(MatOptgroup) optionGroups: QueryList<MatOptgroup>;\n\n  /** Function that maps an option's control value to its display value in the trigger. */\n  @Input() displayWith: ((value: any) => string) | null = null;\n\n  /**\n   * Whether the first option should be highlighted when the autocomplete panel is opened.\n   * Can be configured globally through the `MAT_AUTOCOMPLETE_DEFAULT_OPTIONS` token.\n   */\n  @Input()\n  get autoActiveFirstOption(): boolean { return this._autoActiveFirstOption; }\n  set autoActiveFirstOption(value: boolean) {\n    this._autoActiveFirstOption = coerceBooleanProperty(value);\n  }\n  private _autoActiveFirstOption: boolean;\n\n  /**\n   * Specify the width of the autocomplete panel.  Can be any CSS sizing value, otherwise it will\n   * match the width of its host.\n   */\n  @Input() panelWidth: string | number;\n\n  /** Event that is emitted whenever an option from the list is selected. */\n  @Output() readonly optionSelected: EventEmitter<MatAutocompleteSelectedEvent> =\n      new EventEmitter<MatAutocompleteSelectedEvent>();\n\n  /** Event that is emitted when the autocomplete panel is opened. */\n  @Output() readonly opened: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Event that is emitted when the autocomplete panel is closed. */\n  @Output() readonly closed: EventEmitter<void> = new EventEmitter<void>();\n\n  /**\n   * Takes classes set on the host mat-autocomplete element and applies them to the panel\n   * inside the overlay container to allow for easy styling.\n   */\n  @Input('class')\n  set classList(value: string) {\n    if (value && value.length) {\n      value.split(' ').forEach(className => this._classList[className.trim()] = true);\n      this._elementRef.nativeElement.className = '';\n    }\n  }\n  _classList: {[key: string]: boolean} = {};\n\n  /** Unique ID to be used by autocomplete trigger's \"aria-owns\" property. */\n  id: string = `mat-autocomplete-${_uniqueAutocompleteIdCounter++}`;\n\n  constructor(\n    private _changeDetectorRef: ChangeDetectorRef,\n    private _elementRef: ElementRef<HTMLElement>,\n    @Inject(MAT_AUTOCOMPLETE_DEFAULT_OPTIONS) defaults: MatAutocompleteDefaultOptions) {\n    super();\n\n    this._autoActiveFirstOption = !!defaults.autoActiveFirstOption;\n  }\n\n  ngAfterContentInit() {\n    this._keyManager = new ActiveDescendantKeyManager<MatOption>(this.options).withWrap();\n    // Set the initial visibility state.\n    this._setVisibility();\n  }\n\n  /**\n   * Sets the panel scrollTop. This allows us to manually scroll to display options\n   * above or below the fold, as they are not actually being focused when active.\n   */\n  _setScrollTop(scrollTop: number): void {\n    if (this.panel) {\n      this.panel.nativeElement.scrollTop = scrollTop;\n    }\n  }\n\n  /** Returns the panel's scrollTop. */\n  _getScrollTop(): number {\n    return this.panel ? this.panel.nativeElement.scrollTop : 0;\n  }\n\n  /** Panel should hide itself when the option list is empty. */\n  _setVisibility() {\n    this.showPanel = !!this.options.length;\n    this._classList['mat-autocomplete-visible'] = this.showPanel;\n    this._classList['mat-autocomplete-hidden'] = !this.showPanel;\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Emits the `select` event. */\n  _emitSelectEvent(option: MatOption): void {\n    const event = new MatAutocompleteSelectedEvent(this, option);\n    this.optionSelected.emit(event);\n  }\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, ElementRef} from '@angular/core';\n\n/**\n * Directive applied to an element to make it usable\n * as a connection point for an autocomplete panel.\n */\n@Directive({\n  selector: '[matAutocompleteOrigin]',\n  exportAs: 'matAutocompleteOrigin',\n})\nexport class MatAutocompleteOrigin {\n  constructor(\n      /** Reference to the element on which the directive is applied. */\n      public elementRef: ElementRef<HTMLElement>) { }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {MatOptionModule, MatCommonModule} from '@angular/material/core';\nimport {MatAutocomplete} from './autocomplete';\nimport {\n  MatAutocompleteTrigger,\n  MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY_PROVIDER,\n} from './autocomplete-trigger';\nimport {MatAutocompleteOrigin} from './autocomplete-origin';\n\n@NgModule({\n  imports: [MatOptionModule, OverlayModule, MatCommonModule, CommonModule],\n  exports: [\n    MatAutocomplete,\n    MatOptionModule,\n    MatAutocompleteTrigger,\n    MatAutocompleteOrigin,\n    MatCommonModule\n  ],\n  declarations: [MatAutocomplete, MatAutocompleteTrigger, MatAutocompleteOrigin],\n  providers: [MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY_PROVIDER],\n})\nexport class MatAutocompleteModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {AriaDescriber} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {DOCUMENT} from '@angular/common';\nimport {\n  Directive,\n  ElementRef,\n  Inject,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  Renderer2,\n} from '@angular/core';\nimport {ThemePalette, mixinDisabled, CanDisableCtor, CanDisable} from '@angular/material/core';\n\n\nlet nextId = 0;\n\n// Boilerplate for applying mixins to MatBadge.\n/** @docs-private */\nexport class MatBadgeBase {}\n\nexport const _MatBadgeMixinBase:\n    CanDisableCtor & typeof MatBadgeBase = mixinDisabled(MatBadgeBase);\n\nexport type MatBadgePosition = 'above after' | 'above before' | 'below before' | 'below after';\nexport type MatBadgeSize = 'small' | 'medium' | 'large';\n\n/** Directive to display a text badge. */\n@Directive({\n  selector: '[matBadge]',\n  inputs: ['disabled: matBadgeDisabled'],\n  host: {\n    'class': 'mat-badge',\n    '[class.mat-badge-overlap]': 'overlap',\n    '[class.mat-badge-above]': 'isAbove()',\n    '[class.mat-badge-below]': '!isAbove()',\n    '[class.mat-badge-before]': '!isAfter()',\n    '[class.mat-badge-after]': 'isAfter()',\n    '[class.mat-badge-small]': 'size === \"small\"',\n    '[class.mat-badge-medium]': 'size === \"medium\"',\n    '[class.mat-badge-large]': 'size === \"large\"',\n    '[class.mat-badge-hidden]': 'hidden || !_hasContent',\n    '[class.mat-badge-disabled]': 'disabled',\n  },\n})\nexport class MatBadge extends _MatBadgeMixinBase implements OnDestroy, CanDisable {\n  /** Whether the badge has any content. */\n  _hasContent = false;\n\n  /** The color of the badge. Can be `primary`, `accent`, or `warn`. */\n  @Input('matBadgeColor')\n  get color(): ThemePalette { return this._color; }\n  set color(value: ThemePalette) {\n    this._setColor(value);\n    this._color = value;\n  }\n  private _color: ThemePalette = 'primary';\n\n  /** Whether the badge should overlap its contents or not */\n  @Input('matBadgeOverlap')\n  get overlap(): boolean { return this._overlap; }\n  set overlap(val: boolean) {\n    this._overlap = coerceBooleanProperty(val);\n  }\n  private _overlap: boolean = true;\n\n  /**\n   * Position the badge should reside.\n   * Accepts any combination of 'above'|'below' and 'before'|'after'\n   */\n  @Input('matBadgePosition') position: MatBadgePosition = 'above after';\n\n  /** The content for the badge */\n  @Input('matBadge')\n  get content(): string { return this._content; }\n  set content(value: string) {\n    this._content = value;\n    this._hasContent = value != null && `${value}`.trim().length > 0;\n    this._updateTextContent();\n  }\n  private _content: string;\n\n  /** Message used to describe the decorated element via aria-describedby */\n  @Input('matBadgeDescription')\n  get description(): string { return this._description; }\n  set description(newDescription: string) {\n    if (newDescription !== this._description) {\n      this._updateHostAriaDescription(newDescription, this._description);\n      this._description = newDescription;\n    }\n  }\n  private _description: string;\n\n  /** Size of the badge. Can be 'small', 'medium', or 'large'. */\n  @Input('matBadgeSize') size: MatBadgeSize = 'medium';\n\n  /** Whether the badge is hidden. */\n  @Input('matBadgeHidden')\n  get hidden(): boolean { return this._hidden; }\n  set hidden(val: boolean) {\n    this._hidden = coerceBooleanProperty(val);\n  }\n  private _hidden: boolean;\n\n  /** Unique id for the badge */\n  _id: number = nextId++;\n\n  private _badgeElement: HTMLElement;\n\n  constructor(\n      @Optional() @Inject(DOCUMENT) private _document: any,\n      private _ngZone: NgZone,\n      private _elementRef: ElementRef<HTMLElement>,\n      private _ariaDescriber: AriaDescriber,\n      /** @breaking-change 8.0.0 Make _renderer a required param and remove _document. */\n      private _renderer?: Renderer2) {\n        super();\n      }\n\n  /** Whether the badge is above the host or not */\n  isAbove(): boolean {\n    return this.position.indexOf('below') === -1;\n  }\n\n  /** Whether the badge is after the host or not */\n  isAfter(): boolean {\n    return this.position.indexOf('before') === -1;\n  }\n\n  ngOnDestroy() {\n    if (this.description && this._badgeElement) {\n      this._ariaDescriber.removeDescription(this._badgeElement, this.description);\n    }\n  }\n\n  /** Injects a span element into the DOM with the content. */\n  private _updateTextContent(): HTMLSpanElement {\n    if (!this._badgeElement) {\n      this._badgeElement = this._createBadgeElement();\n    } else {\n      this._badgeElement.textContent = this.content;\n    }\n    return this._badgeElement;\n  }\n\n  /** Creates the badge element */\n  private _createBadgeElement(): HTMLElement {\n    // @breaking-change 8.0.0 Remove null check for _renderer\n    const rootNode = this._renderer || this._document;\n    const badgeElement = rootNode.createElement('span');\n    const activeClass = 'mat-badge-active';\n\n    badgeElement.setAttribute('id', `mat-badge-content-${this._id}`);\n    badgeElement.classList.add('mat-badge-content');\n    badgeElement.textContent = this.content;\n\n    if (this.description) {\n      badgeElement.setAttribute('aria-label', this.description);\n    }\n\n    this._elementRef.nativeElement.appendChild(badgeElement);\n\n    // animate in after insertion\n    if (typeof requestAnimationFrame === 'function') {\n      this._ngZone.runOutsideAngular(() => {\n        requestAnimationFrame(() => {\n          badgeElement.classList.add(activeClass);\n        });\n      });\n    } else {\n      badgeElement.classList.add(activeClass);\n    }\n\n    return badgeElement;\n  }\n\n  /** Sets the aria-label property on the element */\n  private _updateHostAriaDescription(newDescription: string, oldDescription: string): void {\n    // ensure content available before setting label\n    const content = this._updateTextContent();\n\n    if (oldDescription) {\n      this._ariaDescriber.removeDescription(content, oldDescription);\n    }\n\n    if (newDescription) {\n      this._ariaDescriber.describe(content, newDescription);\n    }\n  }\n\n  /** Adds css theme class given the color to the component host */\n  private _setColor(colorPalette: ThemePalette) {\n    if (colorPalette !== this._color) {\n      if (this._color) {\n        this._elementRef.nativeElement.classList.remove(`mat-badge-${this._color}`);\n      }\n      if (colorPalette) {\n        this._elementRef.nativeElement.classList.add(`mat-badge-${colorPalette}`);\n      }\n    }\n  }\n\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {A11yModule} from '@angular/cdk/a11y';\nimport {MatBadge} from './badge';\n\n\n@NgModule({\n  imports: [\n    A11yModule,\n    MatCommonModule\n  ],\n  exports: [MatBadge],\n  declarations: [MatBadge],\n})\nexport class MatBadgeModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ViewContainerRef, InjectionToken} from '@angular/core';\nimport {Direction} from '@angular/cdk/bidi';\n\n/** Injection token that can be used to access the data that was passed in to a bottom sheet. */\nexport const MAT_BOTTOM_SHEET_DATA = new InjectionToken<any>('MatBottomSheetData');\n\n/**\n * Configuration used when opening a bottom sheet.\n */\nexport class MatBottomSheetConfig<D = any> {\n  /** The view container to place the overlay for the bottom sheet into. */\n  viewContainerRef?: ViewContainerRef;\n\n  /** Extra CSS classes to be added to the bottom sheet container. */\n  panelClass?: string | string[];\n\n  /** Text layout direction for the bottom sheet. */\n  direction?: Direction;\n\n  /** Data being injected into the child component. */\n  data?: D | null = null;\n\n  /** Whether the bottom sheet has a backdrop. */\n  hasBackdrop?: boolean = true;\n\n  /** Custom class for the backdrop. */\n  backdropClass?: string;\n\n  /** Whether the user can use escape or clicking outside to close the bottom sheet. */\n  disableClose?: boolean = false;\n\n  /** Aria label to assign to the bottom sheet element. */\n  ariaLabel?: string | null = null;\n\n  /**\n   * Whether the bottom sheet should close when the user goes backwards/forwards in history.\n   * Note that this usually doesn't include clicking on links (unless the user is using\n   * the `HashLocationStrategy`).\n   */\n  closeOnNavigation?: boolean = true;\n\n  /** Whether the bottom sheet should focus the first focusable element on open. */\n  autoFocus?: boolean = true;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\nimport {AnimationCurves, AnimationDurations} from '@angular/material/core';\n\n/** Animations used by the Material bottom sheet. */\nexport const matBottomSheetAnimations: {\n  readonly bottomSheetState: AnimationTriggerMetadata;\n} = {\n  /** Animation that shows and hides a bottom sheet. */\n  bottomSheetState: trigger('state', [\n    state('void, hidden', style({transform: 'translateY(100%)'})),\n    state('visible', style({transform: 'translateY(0%)'})),\n    transition('visible => void, visible => hidden',\n        animate(`${AnimationDurations.COMPLEX} ${AnimationCurves.ACCELERATION_CURVE}`)),\n    transition('void => visible',\n        animate(`${AnimationDurations.EXITING} ${AnimationCurves.DECELERATION_CURVE}`)),\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ComponentRef,\n  EmbeddedViewRef,\n  ViewChild,\n  OnDestroy,\n  ElementRef,\n  ChangeDetectionStrategy,\n  ViewEncapsulation,\n  ChangeDetectorRef,\n  EventEmitter,\n  Inject,\n  Optional,\n} from '@angular/core';\nimport {AnimationEvent} from '@angular/animations';\nimport {\n  BasePortalOutlet,\n  ComponentPortal,\n  TemplatePortal,\n  CdkPortalOutlet,\n} from '@angular/cdk/portal';\nimport {BreakpointObserver, Breakpoints} from '@angular/cdk/layout';\nimport {MatBottomSheetConfig} from './bottom-sheet-config';\nimport {matBottomSheetAnimations} from './bottom-sheet-animations';\nimport {Subscription} from 'rxjs';\nimport {DOCUMENT} from '@angular/common';\nimport {FocusTrap, FocusTrapFactory} from '@angular/cdk/a11y';\n\n// TODO(crisbeto): consolidate some logic between this, MatDialog and MatSnackBar\n\n/**\n * Internal component that wraps user-provided bottom sheet content.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-bottom-sheet-container',\n  templateUrl: 'bottom-sheet-container.html',\n  styleUrls: ['bottom-sheet-container.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  animations: [matBottomSheetAnimations.bottomSheetState],\n  host: {\n    'class': 'mat-bottom-sheet-container',\n    'tabindex': '-1',\n    'role': 'dialog',\n    'aria-modal': 'true',\n    '[attr.aria-label]': 'bottomSheetConfig?.ariaLabel',\n    '[@state]': '_animationState',\n    '(@state.start)': '_onAnimationStart($event)',\n    '(@state.done)': '_onAnimationDone($event)'\n  },\n})\nexport class MatBottomSheetContainer extends BasePortalOutlet implements OnDestroy {\n  private _breakpointSubscription: Subscription;\n\n  /** The portal outlet inside of this container into which the content will be loaded. */\n  @ViewChild(CdkPortalOutlet) _portalOutlet: CdkPortalOutlet;\n\n  /** The state of the bottom sheet animations. */\n  _animationState: 'void' | 'visible' | 'hidden' = 'void';\n\n  /** Emits whenever the state of the animation changes. */\n  _animationStateChanged = new EventEmitter<AnimationEvent>();\n\n  /** The class that traps and manages focus within the bottom sheet. */\n  private _focusTrap: FocusTrap;\n\n  /** Element that was focused before the bottom sheet was opened. */\n  private _elementFocusedBeforeOpened: HTMLElement | null = null;\n\n  /** Server-side rendering-compatible reference to the global document object. */\n  private _document: Document;\n\n  /** Whether the component has been destroyed. */\n  private _destroyed: boolean;\n\n  constructor(\n    private _elementRef: ElementRef<HTMLElement>,\n    private _changeDetectorRef: ChangeDetectorRef,\n    private _focusTrapFactory: FocusTrapFactory,\n    breakpointObserver: BreakpointObserver,\n    @Optional() @Inject(DOCUMENT) document: any,\n    /** The bottom sheet configuration. */\n    public bottomSheetConfig: MatBottomSheetConfig) {\n    super();\n\n    this._document = document;\n    this._breakpointSubscription = breakpointObserver\n      .observe([Breakpoints.Medium, Breakpoints.Large, Breakpoints.XLarge])\n      .subscribe(() => {\n        this._toggleClass('mat-bottom-sheet-container-medium',\n            breakpointObserver.isMatched(Breakpoints.Medium));\n        this._toggleClass('mat-bottom-sheet-container-large',\n            breakpointObserver.isMatched(Breakpoints.Large));\n        this._toggleClass('mat-bottom-sheet-container-xlarge',\n            breakpointObserver.isMatched(Breakpoints.XLarge));\n      });\n  }\n\n  /** Attach a component portal as content to this bottom sheet container. */\n  attachComponentPortal<T>(portal: ComponentPortal<T>): ComponentRef<T> {\n    this._validatePortalAttached();\n    this._setPanelClass();\n    this._savePreviouslyFocusedElement();\n    return this._portalOutlet.attachComponentPortal(portal);\n  }\n\n  /** Attach a template portal as content to this bottom sheet container. */\n  attachTemplatePortal<C>(portal: TemplatePortal<C>): EmbeddedViewRef<C> {\n    this._validatePortalAttached();\n    this._setPanelClass();\n    this._savePreviouslyFocusedElement();\n    return this._portalOutlet.attachTemplatePortal(portal);\n  }\n\n  /** Begin animation of bottom sheet entrance into view. */\n  enter(): void {\n    if (!this._destroyed) {\n      this._animationState = 'visible';\n      this._changeDetectorRef.detectChanges();\n    }\n  }\n\n  /** Begin animation of the bottom sheet exiting from view. */\n  exit(): void {\n    if (!this._destroyed) {\n      this._animationState = 'hidden';\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  ngOnDestroy() {\n    this._breakpointSubscription.unsubscribe();\n    this._destroyed = true;\n  }\n\n  _onAnimationDone(event: AnimationEvent) {\n    if (event.toState === 'hidden') {\n      this._restoreFocus();\n    } else if (event.toState === 'visible' && this.bottomSheetConfig.autoFocus) {\n      this._trapFocus();\n    }\n\n    this._animationStateChanged.emit(event);\n  }\n\n  _onAnimationStart(event: AnimationEvent) {\n    this._animationStateChanged.emit(event);\n  }\n\n  private _toggleClass(cssClass: string, add: boolean) {\n    const classList = this._elementRef.nativeElement.classList;\n    add ? classList.add(cssClass) : classList.remove(cssClass);\n  }\n\n  private _validatePortalAttached() {\n    if (this._portalOutlet.hasAttached()) {\n      throw Error('Attempting to attach bottom sheet content after content is already attached');\n    }\n  }\n\n  private _setPanelClass() {\n    const element: HTMLElement = this._elementRef.nativeElement;\n    const panelClass = this.bottomSheetConfig.panelClass;\n\n    if (Array.isArray(panelClass)) {\n      // Note that we can't use a spread here, because IE doesn't support multiple arguments.\n      panelClass.forEach(cssClass => element.classList.add(cssClass));\n    } else if (panelClass) {\n      element.classList.add(panelClass);\n    }\n  }\n\n\n  /** Moves the focus inside the focus trap. */\n  private _trapFocus() {\n    if (!this._focusTrap) {\n      this._focusTrap = this._focusTrapFactory.create(this._elementRef.nativeElement);\n    }\n\n    this._focusTrap.focusInitialElementWhenReady();\n  }\n\n  /** Restores focus to the element that was focused before the bottom sheet opened. */\n  private _restoreFocus() {\n    const toFocus = this._elementFocusedBeforeOpened;\n\n    // We need the extra check, because IE can set the `activeElement` to null in some cases.\n    if (toFocus && typeof toFocus.focus === 'function') {\n      toFocus.focus();\n    }\n\n    if (this._focusTrap) {\n      this._focusTrap.destroy();\n    }\n  }\n\n  /** Saves a reference to the element that was focused before the bottom sheet was opened. */\n  private _savePreviouslyFocusedElement() {\n    this._elementFocusedBeforeOpened = this._document.activeElement as HTMLElement;\n\n    // The `focus` method isn't available during server-side rendering.\n    if (this._elementRef.nativeElement.focus) {\n      Promise.resolve().then(() => this._elementRef.nativeElement.focus());\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatBottomSheetContainer} from './bottom-sheet-container';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    OverlayModule,\n    MatCommonModule,\n    PortalModule,\n  ],\n  exports: [MatBottomSheetContainer, MatCommonModule],\n  declarations: [MatBottomSheetContainer],\n  entryComponents: [MatBottomSheetContainer],\n})\nexport class MatBottomSheetModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Location} from '@angular/common';\nimport {ESCAPE} from '@angular/cdk/keycodes';\nimport {OverlayRef} from '@angular/cdk/overlay';\nimport {merge, Observable, Subject} from 'rxjs';\nimport {filter, take} from 'rxjs/operators';\nimport {MatBottomSheetContainer} from './bottom-sheet-container';\n\n\n/**\n * Reference to a bottom sheet dispatched from the bottom sheet service.\n */\nexport class MatBottomSheetRef<T = any, R = any> {\n  /** Instance of the component making up the content of the bottom sheet. */\n  instance: T;\n\n  /**\n   * Instance of the component into which the bottom sheet content is projected.\n   * @docs-private\n   */\n  containerInstance: MatBottomSheetContainer;\n\n  /** Subject for notifying the user that the bottom sheet has been dismissed. */\n  private readonly _afterDismissed = new Subject<R | undefined>();\n\n  /** Subject for notifying the user that the bottom sheet has opened and appeared. */\n  private readonly _afterOpened = new Subject<void>();\n\n  /** Result to be passed down to the `afterDismissed` stream. */\n  private _result: R | undefined;\n\n  constructor(\n    containerInstance: MatBottomSheetContainer,\n    private _overlayRef: OverlayRef,\n    // @breaking-change 8.0.0 `_location` parameter to be removed.\n    _location?: Location) {\n    this.containerInstance = containerInstance;\n\n    // Emit when opening animation completes\n    containerInstance._animationStateChanged.pipe(\n      filter(event => event.phaseName === 'done' && event.toState === 'visible'),\n      take(1)\n    )\n    .subscribe(() => {\n      this._afterOpened.next();\n      this._afterOpened.complete();\n    });\n\n    // Dispose overlay when closing animation is complete\n    containerInstance._animationStateChanged.pipe(\n      filter(event => event.phaseName === 'done' && event.toState === 'hidden'),\n      take(1)\n    )\n    .subscribe(() => {\n      this._overlayRef.dispose();\n      this._afterDismissed.next(this._result);\n      this._afterDismissed.complete();\n    });\n\n    if (!containerInstance.bottomSheetConfig.disableClose) {\n      merge(\n        _overlayRef.backdropClick(),\n        _overlayRef.keydownEvents().pipe(filter(event => event.keyCode === ESCAPE))\n      ).subscribe(() => this.dismiss());\n    }\n  }\n\n  /**\n   * Dismisses the bottom sheet.\n   * @param result Data to be passed back to the bottom sheet opener.\n   */\n  dismiss(result?: R): void {\n    if (!this._afterDismissed.closed) {\n      // Transition the backdrop in parallel to the bottom sheet.\n      this.containerInstance._animationStateChanged.pipe(\n        filter(event => event.phaseName === 'start'),\n        take(1)\n      ).subscribe(() => this._overlayRef.detachBackdrop());\n\n      this._result = result;\n      this.containerInstance.exit();\n    }\n  }\n\n  /** Gets an observable that is notified when the bottom sheet is finished closing. */\n  afterDismissed(): Observable<R | undefined> {\n    return this._afterDismissed.asObservable();\n  }\n\n  /** Gets an observable that is notified when the bottom sheet has opened and appeared. */\n  afterOpened(): Observable<void> {\n    return this._afterOpened.asObservable();\n  }\n\n  /**\n   * Gets an observable that emits when the overlay's backdrop has been clicked.\n   */\n  backdropClick(): Observable<MouseEvent> {\n    return this._overlayRef.backdropClick();\n  }\n\n  /**\n   * Gets an observable that emits when keydown events are targeted on the overlay.\n   */\n  keydownEvents(): Observable<KeyboardEvent> {\n    return this._overlayRef.keydownEvents();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directionality} from '@angular/cdk/bidi';\nimport {Overlay, OverlayConfig, OverlayRef} from '@angular/cdk/overlay';\nimport {ComponentPortal, ComponentType, PortalInjector, TemplatePortal} from '@angular/cdk/portal';\nimport {\n  ComponentRef,\n  Injectable,\n  Injector,\n  Optional,\n  SkipSelf,\n  TemplateRef,\n  InjectionToken,\n  Inject,\n  OnDestroy,\n} from '@angular/core';\nimport {Location} from '@angular/common';\nimport {of as observableOf} from 'rxjs';\nimport {MAT_BOTTOM_SHEET_DATA, MatBottomSheetConfig} from './bottom-sheet-config';\nimport {MatBottomSheetContainer} from './bottom-sheet-container';\nimport {MatBottomSheetModule} from './bottom-sheet-module';\nimport {MatBottomSheetRef} from './bottom-sheet-ref';\n\n\n/** Injection token that can be used to specify default bottom sheet options. */\nexport const MAT_BOTTOM_SHEET_DEFAULT_OPTIONS =\n    new InjectionToken<MatBottomSheetConfig>('mat-bottom-sheet-default-options');\n\n/**\n * Service to trigger Material Design bottom sheets.\n */\n@Injectable({providedIn: MatBottomSheetModule})\nexport class MatBottomSheet implements OnDestroy {\n  private _bottomSheetRefAtThisLevel: MatBottomSheetRef<any> | null = null;\n\n  /** Reference to the currently opened bottom sheet. */\n  get _openedBottomSheetRef(): MatBottomSheetRef<any> | null {\n    const parent = this._parentBottomSheet;\n    return parent ? parent._openedBottomSheetRef : this._bottomSheetRefAtThisLevel;\n  }\n\n  set _openedBottomSheetRef(value: MatBottomSheetRef<any> | null) {\n    if (this._parentBottomSheet) {\n      this._parentBottomSheet._openedBottomSheetRef = value;\n    } else {\n      this._bottomSheetRefAtThisLevel = value;\n    }\n  }\n\n  constructor(\n      private _overlay: Overlay,\n      private _injector: Injector,\n      @Optional() @SkipSelf() private _parentBottomSheet: MatBottomSheet,\n      @Optional() private _location?: Location,\n      @Optional() @Inject(MAT_BOTTOM_SHEET_DEFAULT_OPTIONS)\n          private _defaultOptions?: MatBottomSheetConfig) {}\n\n  open<T, D = any, R = any>(component: ComponentType<T>,\n                   config?: MatBottomSheetConfig<D>): MatBottomSheetRef<T, R>;\n  open<T, D = any, R = any>(template: TemplateRef<T>,\n                   config?: MatBottomSheetConfig<D>): MatBottomSheetRef<T, R>;\n\n  open<T, D = any, R = any>(componentOrTemplateRef: ComponentType<T> | TemplateRef<T>,\n                   config?: MatBottomSheetConfig<D>): MatBottomSheetRef<T, R> {\n\n    const _config =\n        _applyConfigDefaults(this._defaultOptions || new MatBottomSheetConfig(), config);\n    const overlayRef = this._createOverlay(_config);\n    const container = this._attachContainer(overlayRef, _config);\n    const ref = new MatBottomSheetRef<T, R>(container, overlayRef, this._location);\n\n    if (componentOrTemplateRef instanceof TemplateRef) {\n      container.attachTemplatePortal(new TemplatePortal<T>(componentOrTemplateRef, null!, {\n        $implicit: _config.data,\n        bottomSheetRef: ref\n      } as any));\n    } else {\n      const portal = new ComponentPortal(componentOrTemplateRef, undefined,\n            this._createInjector(_config, ref));\n      const contentRef = container.attachComponentPortal(portal);\n      ref.instance = contentRef.instance;\n    }\n\n    // When the bottom sheet is dismissed, clear the reference to it.\n    ref.afterDismissed().subscribe(() => {\n      // Clear the bottom sheet ref if it hasn't already been replaced by a newer one.\n      if (this._openedBottomSheetRef == ref) {\n        this._openedBottomSheetRef = null;\n      }\n    });\n\n    if (this._openedBottomSheetRef) {\n      // If a bottom sheet is already in view, dismiss it and enter the\n      // new bottom sheet after exit animation is complete.\n      this._openedBottomSheetRef.afterDismissed().subscribe(() => ref.containerInstance.enter());\n      this._openedBottomSheetRef.dismiss();\n    } else {\n      // If no bottom sheet is in view, enter the new bottom sheet.\n      ref.containerInstance.enter();\n    }\n\n    this._openedBottomSheetRef = ref;\n\n    return ref;\n  }\n\n  /**\n   * Dismisses the currently-visible bottom sheet.\n   */\n  dismiss(): void {\n    if (this._openedBottomSheetRef) {\n      this._openedBottomSheetRef.dismiss();\n    }\n  }\n\n  ngOnDestroy() {\n    if (this._bottomSheetRefAtThisLevel) {\n      this._bottomSheetRefAtThisLevel.dismiss();\n    }\n  }\n\n  /**\n   * Attaches the bottom sheet container component to the overlay.\n   */\n  private _attachContainer(overlayRef: OverlayRef,\n                           config: MatBottomSheetConfig): MatBottomSheetContainer {\n\n    const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n    const injector = new PortalInjector(userInjector || this._injector, new WeakMap([\n      [MatBottomSheetConfig, config]\n    ]));\n\n    const containerPortal =\n        new ComponentPortal(MatBottomSheetContainer, config.viewContainerRef, injector);\n    const containerRef: ComponentRef<MatBottomSheetContainer> = overlayRef.attach(containerPortal);\n    return containerRef.instance;\n  }\n\n  /**\n   * Creates a new overlay and places it in the correct location.\n   * @param config The user-specified bottom sheet config.\n   */\n  private _createOverlay(config: MatBottomSheetConfig): OverlayRef {\n    const overlayConfig = new OverlayConfig({\n      direction: config.direction,\n      hasBackdrop: config.hasBackdrop,\n      disposeOnNavigation: config.closeOnNavigation,\n      maxWidth: '100%',\n      scrollStrategy: this._overlay.scrollStrategies.block(),\n      positionStrategy: this._overlay.position()\n        .global()\n        .centerHorizontally()\n        .bottom('0')\n    });\n\n    if (config.backdropClass) {\n      overlayConfig.backdropClass = config.backdropClass;\n    }\n\n    return this._overlay.create(overlayConfig);\n  }\n\n  /**\n   * Creates an injector to be used inside of a bottom sheet component.\n   * @param config Config that was used to create the bottom sheet.\n   * @param bottomSheetRef Reference to the bottom sheet.\n   */\n  private _createInjector<T>(config: MatBottomSheetConfig,\n                             bottomSheetRef: MatBottomSheetRef<T>): PortalInjector {\n\n    const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n    const injectionTokens = new WeakMap<any, any>([\n      [MatBottomSheetRef, bottomSheetRef],\n      [MAT_BOTTOM_SHEET_DATA, config.data]\n    ]);\n\n    if (config.direction &&\n        (!userInjector || !userInjector.get<Directionality | null>(Directionality, null))) {\n      injectionTokens.set(Directionality, {\n        value: config.direction,\n        change: observableOf()\n      });\n    }\n\n    return new PortalInjector(userInjector || this._injector, injectionTokens);\n  }\n}\n\n/**\n * Applies default options to the bottom sheet config.\n * @param defaults Object containing the default values to which to fall back.\n * @param config The configuration to which the defaults will be applied.\n * @returns The new configuration object with defaults applied.\n */\nfunction _applyConfigDefaults(defaults: MatBottomSheetConfig,\n                              config?: MatBottomSheetConfig): MatBottomSheetConfig {\n  return {...defaults, ...config};\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {ENTER, SPACE} from '@angular/cdk/keycodes';\nimport {\n  AfterViewChecked,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  InjectionToken,\n  Input,\n  OnDestroy,\n  Optional,\n  Output,\n  QueryList,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {Subject} from 'rxjs';\nimport {MatOptgroup} from './optgroup';\n\n/**\n * Option IDs need to be unique across components, so this counter exists outside of\n * the component definition.\n */\nlet _uniqueIdCounter = 0;\n\n/** Event object emitted by MatOption when selected or deselected. */\nexport class MatOptionSelectionChange {\n  constructor(\n    /** Reference to the option that emitted the event. */\n    public source: MatOption,\n    /** Whether the change in the option's value was a result of a user action. */\n    public isUserInput = false) { }\n}\n\n/**\n * Describes a parent component that manages a list of options.\n * Contains properties that the options can inherit.\n * @docs-private\n */\nexport interface MatOptionParentComponent {\n  disableRipple?: boolean;\n  multiple?: boolean;\n}\n\n/**\n * Injection token used to provide the parent component to options.\n */\nexport const MAT_OPTION_PARENT_COMPONENT =\n    new InjectionToken<MatOptionParentComponent>('MAT_OPTION_PARENT_COMPONENT');\n\n/**\n * Single option inside of a `<mat-select>` element.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-option',\n  exportAs: 'matOption',\n  host: {\n    'role': 'option',\n    '[attr.tabindex]': '_getTabIndex()',\n    '[class.mat-selected]': 'selected',\n    '[class.mat-option-multiple]': 'multiple',\n    '[class.mat-active]': 'active',\n    '[id]': 'id',\n    '[attr.aria-selected]': 'selected.toString()',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[class.mat-option-disabled]': 'disabled',\n    '(click)': '_selectViaInteraction()',\n    '(keydown)': '_handleKeydown($event)',\n    'class': 'mat-option',\n  },\n  styleUrls: ['option.css'],\n  templateUrl: 'option.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatOption implements AfterViewChecked, OnDestroy {\n  private _selected = false;\n  private _active = false;\n  private _disabled = false;\n  private _mostRecentViewValue = '';\n\n  /** Whether the wrapping component is in multiple selection mode. */\n  get multiple() { return this._parent && this._parent.multiple; }\n\n  /** Whether or not the option is currently selected. */\n  get selected(): boolean { return this._selected; }\n\n  /** The form value of the option. */\n  @Input() value: any;\n\n  /** The unique ID of the option. */\n  @Input() id: string = `mat-option-${_uniqueIdCounter++}`;\n\n  /** Whether the option is disabled. */\n  @Input()\n  get disabled() { return (this.group && this.group.disabled) || this._disabled; }\n  set disabled(value: any) { this._disabled = coerceBooleanProperty(value); }\n\n  /** Whether ripples for the option are disabled. */\n  get disableRipple() { return this._parent && this._parent.disableRipple; }\n\n  /** Event emitted when the option is selected or deselected. */\n  // tslint:disable-next-line:no-output-on-prefix\n  @Output() readonly onSelectionChange = new EventEmitter<MatOptionSelectionChange>();\n\n  /** Emits when the state of the option changes and any parents have to be notified. */\n  readonly _stateChanges = new Subject<void>();\n\n  constructor(\n    private _element: ElementRef<HTMLElement>,\n    private _changeDetectorRef: ChangeDetectorRef,\n    @Optional() @Inject(MAT_OPTION_PARENT_COMPONENT) private _parent: MatOptionParentComponent,\n    @Optional() readonly group: MatOptgroup) {}\n\n  /**\n   * Whether or not the option is currently active and ready to be selected.\n   * An active option displays styles as if it is focused, but the\n   * focus is actually retained somewhere else. This comes in handy\n   * for components like autocomplete where focus must remain on the input.\n   */\n  get active(): boolean {\n    return this._active;\n  }\n\n  /**\n   * The displayed value of the option. It is necessary to show the selected option in the\n   * select's trigger.\n   */\n  get viewValue(): string {\n    // TODO(kara): Add input property alternative for node envs.\n    return (this._getHostElement().textContent || '').trim();\n  }\n\n  /** Selects the option. */\n  select(): void {\n    if (!this._selected) {\n      this._selected = true;\n      this._changeDetectorRef.markForCheck();\n      this._emitSelectionChangeEvent();\n    }\n  }\n\n  /** Deselects the option. */\n  deselect(): void {\n    if (this._selected) {\n      this._selected = false;\n      this._changeDetectorRef.markForCheck();\n      this._emitSelectionChangeEvent();\n    }\n  }\n\n  /** Sets focus onto this option. */\n  focus(): void {\n    const element = this._getHostElement();\n\n    if (typeof element.focus === 'function') {\n      element.focus();\n    }\n  }\n\n  /**\n   * This method sets display styles on the option to make it appear\n   * active. This is used by the ActiveDescendantKeyManager so key\n   * events will display the proper options as active on arrow key events.\n   */\n  setActiveStyles(): void {\n    if (!this._active) {\n      this._active = true;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  /**\n   * This method removes display styles on the option that made it appear\n   * active. This is used by the ActiveDescendantKeyManager so key\n   * events will display the proper options as active on arrow key events.\n   */\n  setInactiveStyles(): void {\n    if (this._active) {\n      this._active = false;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  /** Gets the label to be used when determining whether the option should be focused. */\n  getLabel(): string {\n    return this.viewValue;\n  }\n\n  /** Ensures the option is selected when activated from the keyboard. */\n  _handleKeydown(event: KeyboardEvent): void {\n    if (event.keyCode === ENTER || event.keyCode === SPACE) {\n      this._selectViaInteraction();\n\n      // Prevent the page from scrolling down and form submits.\n      event.preventDefault();\n    }\n  }\n\n  /**\n   * `Selects the option while indicating the selection came from the user. Used to\n   * determine if the select's view -> model callback should be invoked.`\n   */\n  _selectViaInteraction(): void {\n    if (!this.disabled) {\n      this._selected = this.multiple ? !this._selected : true;\n      this._changeDetectorRef.markForCheck();\n      this._emitSelectionChangeEvent(true);\n    }\n  }\n\n  /** Returns the correct tabindex for the option depending on disabled state. */\n  _getTabIndex(): string {\n    return this.disabled ? '-1' : '0';\n  }\n\n  /** Gets the host DOM element. */\n  _getHostElement(): HTMLElement {\n    return this._element.nativeElement;\n  }\n\n  ngAfterViewChecked() {\n    // Since parent components could be using the option's label to display the selected values\n    // (e.g. `mat-select`) and they don't have a way of knowing if the option's label has changed\n    // we have to check for changes in the DOM ourselves and dispatch an event. These checks are\n    // relatively cheap, however we still limit them only to selected options in order to avoid\n    // hitting the DOM too often.\n    if (this._selected) {\n      const viewValue = this.viewValue;\n\n      if (viewValue !== this._mostRecentViewValue) {\n        this._mostRecentViewValue = viewValue;\n        this._stateChanges.next();\n      }\n    }\n  }\n\n  ngOnDestroy() {\n    this._stateChanges.complete();\n  }\n\n  /** Emits the selection change event. */\n  private _emitSelectionChangeEvent(isUserInput = false): void {\n    this.onSelectionChange.emit(new MatOptionSelectionChange(this, isUserInput));\n  }\n}\n\n/**\n * Counts the amount of option group labels that precede the specified option.\n * @param optionIndex Index of the option at which to start counting.\n * @param options Flat list of all of the options.\n * @param optionGroups Flat list of all of the option groups.\n * @docs-private\n */\nexport function _countGroupLabelsBeforeOption(optionIndex: number, options: QueryList<MatOption>,\n  optionGroups: QueryList<MatOptgroup>): number {\n\n  if (optionGroups.length) {\n    let optionsArray = options.toArray();\n    let groups = optionGroups.toArray();\n    let groupCounter = 0;\n\n    for (let i = 0; i < optionIndex + 1; i++) {\n      if (optionsArray[i].group && optionsArray[i].group === groups[groupCounter]) {\n        groupCounter++;\n      }\n    }\n\n    return groupCounter;\n  }\n\n  return 0;\n}\n\n/**\n * Determines the position to which to scroll a panel in order for an option to be into view.\n * @param optionIndex Index of the option to be scrolled into the view.\n * @param optionHeight Height of the options.\n * @param currentScrollPosition Current scroll position of the panel.\n * @param panelHeight Height of the panel.\n * @docs-private\n */\nexport function _getOptionScrollPosition(optionIndex: number, optionHeight: number,\n    currentScrollPosition: number, panelHeight: number): number {\n  const optionOffset = optionIndex * optionHeight;\n\n  if (optionOffset < currentScrollPosition) {\n    return optionOffset;\n  }\n\n  if (optionOffset + optionHeight > currentScrollPosition + panelHeight) {\n    return Math.max(0, optionOffset - panelHeight + optionHeight);\n  }\n\n  return currentScrollPosition;\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {MatRippleModule} from '../ripple/index';\nimport {MatPseudoCheckboxModule} from '../selection/index';\nimport {MatOption} from './option';\nimport {MatOptgroup} from './optgroup';\n\n\n@NgModule({\n  imports: [MatRippleModule, CommonModule, MatPseudoCheckboxModule],\n  exports: [MatOption, MatOptgroup],\n  declarations: [MatOption, MatOptgroup]\n})\nexport class MatOptionModule {}\n\n\nexport * from './option';\nexport * from './optgroup';\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {InjectionToken} from '@angular/core';\n\n/** InjectionToken that can be used to specify the global label options. */\nexport const MAT_LABEL_GLOBAL_OPTIONS =\n  new InjectionToken<LabelOptions>('mat-label-global-options');\n\n/** Type for the available floatLabel values. */\nexport type FloatLabelType = 'always' | 'never' | 'auto';\n\n/** Configurable options for floating labels. */\nexport interface LabelOptions {\n  /**\n   * Whether the label should float `always`, `never`, or `auto` (only when necessary).\n   * Default behavior is assumed to be `auto`.\n   */\n  float?: FloatLabelType;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, Input} from '@angular/core';\n\n\nlet nextUniqueId = 0;\n\n\n/** Single error message to be shown underneath the form field. */\n@Directive({\n  selector: 'mat-error',\n  host: {\n    'class': 'mat-error',\n    'role': 'alert',\n    '[attr.id]': 'id',\n  }\n})\nexport class MatError {\n  @Input() id: string = `mat-error-${nextUniqueId++}`;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/**\n * Animations used by the MatFormField.\n * @docs-private\n */\nexport const matFormFieldAnimations: {\n  readonly transitionMessages: AnimationTriggerMetadata\n} = {\n  /** Animation that transitions the form field's error and hint messages. */\n  transitionMessages: trigger('transitionMessages', [\n    // TODO(mmalerba): Use angular animations for label animation as well.\n    state('enter', style({ opacity: 1, transform: 'translateY(0%)' })),\n    transition('void => enter', [\n      style({ opacity: 0, transform: 'translateY(-100%)' }),\n      animate('300ms cubic-bezier(0.55, 0, 0.55, 0.2)'),\n    ]),\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Observable} from 'rxjs';\nimport {NgControl} from '@angular/forms';\n\n\n/** An interface which allows a control to work inside of a `MatFormField`. */\nexport abstract class MatFormFieldControl<T> {\n  /** The value of the control. */\n  value: T | null;\n\n  /**\n   * Stream that emits whenever the state of the control changes such that the parent `MatFormField`\n   * needs to run change detection.\n   */\n  readonly stateChanges: Observable<void>;\n\n  /** The element ID for this control. */\n  readonly id: string;\n\n  /** The placeholder for this control. */\n  readonly placeholder: string;\n\n  /** Gets the NgControl for this control. */\n  readonly ngControl: NgControl | null;\n\n  /** Whether the control is focused. */\n  readonly focused: boolean;\n\n  /** Whether the control is empty. */\n  readonly empty: boolean;\n\n  /** Whether the `MatFormField` label should try to float. */\n  readonly shouldLabelFloat: boolean;\n\n  /** Whether the control is required. */\n  readonly required: boolean;\n\n  /** Whether the control is disabled. */\n  readonly disabled: boolean;\n\n  /** Whether the control is in an error state. */\n  readonly errorState: boolean;\n\n  /**\n   * An optional name for the control type that can be used to distinguish `mat-form-field` elements\n   * based on their control type. The form field will add a class,\n   * `mat-form-field-type-{{controlType}}` to its root element.\n   */\n  readonly controlType?: string;\n\n  /**\n   * Whether the input is currently in an autofilled state. If property is not present on the\n   * control it is assumed to be false.\n   */\n  readonly autofilled?: boolean;\n\n  /** Sets the list of element IDs that currently describe this control. */\n  abstract setDescribedByIds(ids: string[]): void;\n\n  /** Handles a click on the control's container. */\n  abstract onContainerClick(event: MouseEvent): void;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, Input} from '@angular/core';\n\n\nlet nextUniqueId = 0;\n\n\n/** Hint text to be shown underneath the form field control. */\n@Directive({\n  selector: 'mat-hint',\n  host: {\n    'class': 'mat-hint',\n    '[class.mat-right]': 'align == \"end\"',\n    '[attr.id]': 'id',\n    // Remove align attribute to prevent it from interfering with layout.\n    '[attr.align]': 'null',\n  }\n})\nexport class MatHint {\n  /** Whether to align the hint label at the start or end of the line. */\n  @Input() align: 'start' | 'end' = 'start';\n\n  /** Unique ID for the hint. Used for the aria-describedby on the form field control. */\n  @Input() id: string = `mat-hint-${nextUniqueId++}`;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive} from '@angular/core';\n\n\n/** The floating label for a `mat-form-field`. */\n@Directive({\n  selector: 'mat-label'\n})\nexport class MatLabel {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive} from '@angular/core';\n\n\n/**\n * The placeholder text for an `MatFormField`.\n * @deprecated Use `<mat-label>` to specify the label and the `placeholder` attribute to specify the\n *     placeholder.\n * @breaking-change 8.0.0\n */\n@Directive({\n  selector: 'mat-placeholder'\n})\nexport class MatPlaceholder {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive} from '@angular/core';\n\n\n/** Prefix to be placed the the front of the form field. */\n@Directive({\n  selector: '[matPrefix]',\n})\nexport class MatPrefix {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive} from '@angular/core';\n\n\n/** Suffix to be placed at the end of the form field. */\n@Directive({\n  selector: '[matSuffix]',\n})\nexport class MatSuffix {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  AfterContentChecked,\n  AfterContentInit,\n  AfterViewInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  ContentChildren,\n  ElementRef,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  Optional,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {\n  CanColor, CanColorCtor,\n  FloatLabelType,\n  LabelOptions,\n  MAT_LABEL_GLOBAL_OPTIONS,\n  mixinColor,\n} from '@angular/material/core';\nimport {fromEvent, merge} from 'rxjs';\nimport {startWith, take} from 'rxjs/operators';\nimport {MatError} from './error';\nimport {matFormFieldAnimations} from './form-field-animations';\nimport {MatFormFieldControl} from './form-field-control';\nimport {\n  getMatFormFieldDuplicatedHintError,\n  getMatFormFieldMissingControlError,\n  getMatFormFieldPlaceholderConflictError,\n} from './form-field-errors';\nimport {MatHint} from './hint';\nimport {MatLabel} from './label';\nimport {MatPlaceholder} from './placeholder';\nimport {MatPrefix} from './prefix';\nimport {MatSuffix} from './suffix';\nimport {Platform} from '@angular/cdk/platform';\nimport {NgControl} from '@angular/forms';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\n\n\nlet nextUniqueId = 0;\nconst floatingLabelScale = 0.75;\nconst outlineGapPadding = 5;\n\n\n/**\n * Boilerplate for applying mixins to MatFormField.\n * @docs-private\n */\nexport class MatFormFieldBase {\n  constructor(public _elementRef: ElementRef) { }\n}\n\n/**\n * Base class to which we're applying the form field mixins.\n * @docs-private\n */\nexport const _MatFormFieldMixinBase: CanColorCtor & typeof MatFormFieldBase =\n    mixinColor(MatFormFieldBase, 'primary');\n\n/** Possible appearance styles for the form field. */\nexport type MatFormFieldAppearance = 'legacy' | 'standard' | 'fill' | 'outline';\n\n/**\n * Represents the default options form the form field that can be configured\n * using the `MAT_FORM_FIELD_DEFAULT_OPTIONS` injection token.\n */\nexport interface MatFormFieldDefaultOptions {\n  appearance?: MatFormFieldAppearance;\n}\n\n/**\n * Injection token that can be used to configure the\n * default options for all form field within an app.\n */\nexport const MAT_FORM_FIELD_DEFAULT_OPTIONS =\n    new InjectionToken<MatFormFieldDefaultOptions>('MAT_FORM_FIELD_DEFAULT_OPTIONS');\n\n\n/** Container for form controls that applies Material Design styling and behavior. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-form-field',\n  exportAs: 'matFormField',\n  templateUrl: 'form-field.html',\n  // MatInput is a directive and can't have styles, so we need to include its styles here\n  // in form-field-input.css. The MatInput styles are fairly minimal so it shouldn't be a\n  // big deal for people who aren't using MatInput.\n  styleUrls: [\n    'form-field.css',\n    'form-field-fill.css',\n    'form-field-input.css',\n    'form-field-legacy.css',\n    'form-field-outline.css',\n    'form-field-standard.css',\n  ],\n  animations: [matFormFieldAnimations.transitionMessages],\n  host: {\n    'class': 'mat-form-field',\n    '[class.mat-form-field-appearance-standard]': 'appearance == \"standard\"',\n    '[class.mat-form-field-appearance-fill]': 'appearance == \"fill\"',\n    '[class.mat-form-field-appearance-outline]': 'appearance == \"outline\"',\n    '[class.mat-form-field-appearance-legacy]': 'appearance == \"legacy\"',\n    '[class.mat-form-field-invalid]': '_control.errorState',\n    '[class.mat-form-field-can-float]': '_canLabelFloat',\n    '[class.mat-form-field-should-float]': '_shouldLabelFloat()',\n    '[class.mat-form-field-hide-placeholder]': '_hideControlPlaceholder()',\n    '[class.mat-form-field-disabled]': '_control.disabled',\n    '[class.mat-form-field-autofilled]': '_control.autofilled',\n    '[class.mat-focused]': '_control.focused',\n    '[class.mat-accent]': 'color == \"accent\"',\n    '[class.mat-warn]': 'color == \"warn\"',\n    '[class.ng-untouched]': '_shouldForward(\"untouched\")',\n    '[class.ng-touched]': '_shouldForward(\"touched\")',\n    '[class.ng-pristine]': '_shouldForward(\"pristine\")',\n    '[class.ng-dirty]': '_shouldForward(\"dirty\")',\n    '[class.ng-valid]': '_shouldForward(\"valid\")',\n    '[class.ng-invalid]': '_shouldForward(\"invalid\")',\n    '[class.ng-pending]': '_shouldForward(\"pending\")',\n    '[class._mat-animation-noopable]': '!_animationsEnabled',\n  },\n  inputs: ['color'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\n\nexport class MatFormField extends _MatFormFieldMixinBase\n    implements AfterContentInit, AfterContentChecked, AfterViewInit, CanColor {\n  private _labelOptions: LabelOptions;\n  private _outlineGapCalculationNeeded = false;\n\n  /** The form-field appearance style. */\n  @Input()\n  get appearance(): MatFormFieldAppearance { return this._appearance; }\n  set appearance(value: MatFormFieldAppearance) {\n    const oldValue = this._appearance;\n\n    this._appearance = value || (this._defaults && this._defaults.appearance) || 'legacy';\n\n    if (this._appearance === 'outline' && oldValue !== value) {\n      this._updateOutlineGapOnStable();\n    }\n  }\n  _appearance: MatFormFieldAppearance;\n\n  /** Whether the required marker should be hidden. */\n  @Input()\n  get hideRequiredMarker(): boolean { return this._hideRequiredMarker; }\n  set hideRequiredMarker(value: boolean) {\n    this._hideRequiredMarker = coerceBooleanProperty(value);\n  }\n  private _hideRequiredMarker: boolean;\n\n  /** Override for the logic that disables the label animation in certain cases. */\n  private _showAlwaysAnimate = false;\n\n  /** Whether the floating label should always float or not. */\n  get _shouldAlwaysFloat(): boolean {\n    return this.floatLabel === 'always' && !this._showAlwaysAnimate;\n  }\n\n  /** Whether the label can float or not. */\n  get _canLabelFloat(): boolean { return this.floatLabel !== 'never'; }\n\n  /** State of the mat-hint and mat-error animations. */\n  _subscriptAnimationState: string = '';\n\n  /** Text for the form field hint. */\n  @Input()\n  get hintLabel(): string { return this._hintLabel; }\n  set hintLabel(value: string) {\n    this._hintLabel = value;\n    this._processHints();\n  }\n  private _hintLabel = '';\n\n  // Unique id for the hint label.\n  _hintLabelId: string = `mat-hint-${nextUniqueId++}`;\n\n  // Unique id for the internal form field label.\n  _labelId = `mat-form-field-label-${nextUniqueId++}`;\n\n  /**\n   * Whether the label should always float, never float or float as the user types.\n   *\n   * Note: only the legacy appearance supports the `never` option. `never` was originally added as a\n   * way to make the floating label emulate the behavior of a standard input placeholder. However\n   * the form field now supports both floating labels and placeholders. Therefore in the non-legacy\n   * appearances the `never` option has been disabled in favor of just using the placeholder.\n   */\n  @Input()\n  get floatLabel(): FloatLabelType {\n    return this.appearance !== 'legacy' && this._floatLabel === 'never' ? 'auto' : this._floatLabel;\n  }\n  set floatLabel(value: FloatLabelType) {\n    if (value !== this._floatLabel) {\n      this._floatLabel = value || this._labelOptions.float || 'auto';\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n  private _floatLabel: FloatLabelType;\n\n  /** Whether the Angular animations are enabled. */\n  _animationsEnabled: boolean;\n\n  /**\n   * @deprecated\n   * @breaking-change 8.0.0\n   */\n  @ViewChild('underline') underlineRef: ElementRef;\n\n  @ViewChild('connectionContainer') _connectionContainerRef: ElementRef;\n  @ViewChild('inputContainer') _inputContainerRef: ElementRef;\n  @ViewChild('label') private _label: ElementRef;\n  @ContentChild(MatFormFieldControl) _control: MatFormFieldControl<any>;\n  @ContentChild(MatPlaceholder) _placeholderChild: MatPlaceholder;\n  @ContentChild(MatLabel) _labelChild: MatLabel;\n  @ContentChildren(MatError) _errorChildren: QueryList<MatError>;\n  @ContentChildren(MatHint) _hintChildren: QueryList<MatHint>;\n  @ContentChildren(MatPrefix) _prefixChildren: QueryList<MatPrefix>;\n  @ContentChildren(MatSuffix) _suffixChildren: QueryList<MatSuffix>;\n\n  constructor(\n      public _elementRef: ElementRef,\n      private _changeDetectorRef: ChangeDetectorRef,\n      @Optional() @Inject(MAT_LABEL_GLOBAL_OPTIONS) labelOptions: LabelOptions,\n      @Optional() private _dir: Directionality,\n      @Optional() @Inject(MAT_FORM_FIELD_DEFAULT_OPTIONS)\n          private _defaults: MatFormFieldDefaultOptions,\n      // @breaking-change 8.0.0 _platform, _ngZone and _animationMode to be made required.\n      private _platform?: Platform,\n      private _ngZone?: NgZone,\n      @Optional() @Inject(ANIMATION_MODULE_TYPE) _animationMode?: string) {\n    super(_elementRef);\n\n    this._labelOptions = labelOptions ? labelOptions : {};\n    this.floatLabel = this._labelOptions.float || 'auto';\n    this._animationsEnabled = _animationMode !== 'NoopAnimations';\n\n    // Set the default through here so we invoke the setter on the first run.\n    this.appearance = (_defaults && _defaults.appearance) ? _defaults.appearance : 'legacy';\n  }\n\n  /**\n   * Gets an ElementRef for the element that a overlay attached to the form-field should be\n   * positioned relative to.\n   */\n  getConnectedOverlayOrigin(): ElementRef {\n    return this._connectionContainerRef || this._elementRef;\n  }\n\n  ngAfterContentInit() {\n    this._validateControlChild();\n\n    const control = this._control;\n\n    if (control.controlType) {\n      this._elementRef.nativeElement.classList.add(`mat-form-field-type-${control.controlType}`);\n    }\n\n    // Subscribe to changes in the child control state in order to update the form field UI.\n    control.stateChanges.pipe(startWith<void>(null!)).subscribe(() => {\n      this._validatePlaceholders();\n      this._syncDescribedByIds();\n      this._changeDetectorRef.markForCheck();\n    });\n\n    // Run change detection if the value changes.\n    if (control.ngControl && control.ngControl.valueChanges) {\n      control.ngControl.valueChanges.subscribe(() => this._changeDetectorRef.markForCheck());\n    }\n\n    // Run change detection and update the outline if the suffix or prefix changes.\n    merge(this._prefixChildren.changes, this._suffixChildren.changes).subscribe(() => {\n      this._updateOutlineGapOnStable();\n      this._changeDetectorRef.markForCheck();\n    });\n\n    // Re-validate when the number of hints changes.\n    this._hintChildren.changes.pipe(startWith(null)).subscribe(() => {\n      this._processHints();\n      this._changeDetectorRef.markForCheck();\n    });\n\n    // Update the aria-described by when the number of errors changes.\n    this._errorChildren.changes.pipe(startWith(null)).subscribe(() => {\n      this._syncDescribedByIds();\n      this._changeDetectorRef.markForCheck();\n    });\n  }\n\n  ngAfterContentChecked() {\n    this._validateControlChild();\n    if (this._outlineGapCalculationNeeded) {\n      this.updateOutlineGap();\n    }\n  }\n\n  ngAfterViewInit() {\n    // Avoid animations on load.\n    this._subscriptAnimationState = 'enter';\n    this._changeDetectorRef.detectChanges();\n  }\n\n  /** Determines whether a class from the NgControl should be forwarded to the host element. */\n  _shouldForward(prop: keyof NgControl): boolean {\n    const ngControl = this._control ? this._control.ngControl : null;\n    return ngControl && ngControl[prop];\n  }\n\n  _hasPlaceholder() {\n    return !!(this._control && this._control.placeholder || this._placeholderChild);\n  }\n\n  _hasLabel() {\n    return !!this._labelChild;\n  }\n\n  _shouldLabelFloat() {\n    return this._canLabelFloat && (this._control.shouldLabelFloat || this._shouldAlwaysFloat);\n  }\n\n  _hideControlPlaceholder() {\n    // In the legacy appearance the placeholder is promoted to a label if no label is given.\n    return this.appearance === 'legacy' && !this._hasLabel() ||\n        this._hasLabel() && !this._shouldLabelFloat();\n  }\n\n  _hasFloatingLabel() {\n    // In the legacy appearance the placeholder is promoted to a label if no label is given.\n    return this._hasLabel() || this.appearance === 'legacy' && this._hasPlaceholder();\n  }\n\n  /** Determines whether to display hints or errors. */\n  _getDisplayedMessages(): 'error' | 'hint' {\n    return (this._errorChildren && this._errorChildren.length > 0 &&\n        this._control.errorState) ? 'error' : 'hint';\n  }\n\n  /** Animates the placeholder up and locks it in position. */\n  _animateAndLockLabel(): void {\n    if (this._hasFloatingLabel() && this._canLabelFloat) {\n      // If animations are disabled, we shouldn't go in here,\n      // because the `transitionend` will never fire.\n      if (this._animationsEnabled) {\n        this._showAlwaysAnimate = true;\n\n        fromEvent(this._label.nativeElement, 'transitionend').pipe(take(1)).subscribe(() => {\n          this._showAlwaysAnimate = false;\n        });\n      }\n\n      this.floatLabel = 'always';\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  /**\n   * Ensure that there is only one placeholder (either `placeholder` attribute on the child control\n   * or child element with the `mat-placeholder` directive).\n   */\n  private _validatePlaceholders() {\n    if (this._control.placeholder && this._placeholderChild) {\n      throw getMatFormFieldPlaceholderConflictError();\n    }\n  }\n\n  /** Does any extra processing that is required when handling the hints. */\n  private _processHints() {\n    this._validateHints();\n    this._syncDescribedByIds();\n  }\n\n  /**\n   * Ensure that there is a maximum of one of each `<mat-hint>` alignment specified, with the\n   * attribute being considered as `align=\"start\"`.\n   */\n  private _validateHints() {\n    if (this._hintChildren) {\n      let startHint: MatHint;\n      let endHint: MatHint;\n      this._hintChildren.forEach((hint: MatHint) => {\n        if (hint.align === 'start') {\n          if (startHint || this.hintLabel) {\n            throw getMatFormFieldDuplicatedHintError('start');\n          }\n          startHint = hint;\n        } else if (hint.align === 'end') {\n          if (endHint) {\n            throw getMatFormFieldDuplicatedHintError('end');\n          }\n          endHint = hint;\n        }\n      });\n    }\n  }\n\n  /**\n   * Sets the list of element IDs that describe the child control. This allows the control to update\n   * its `aria-describedby` attribute accordingly.\n   */\n  private _syncDescribedByIds() {\n    if (this._control) {\n      let ids: string[] = [];\n\n      if (this._getDisplayedMessages() === 'hint') {\n        const startHint = this._hintChildren ?\n            this._hintChildren.find(hint => hint.align === 'start') : null;\n        const endHint = this._hintChildren ?\n            this._hintChildren.find(hint => hint.align === 'end') : null;\n\n        if (startHint) {\n          ids.push(startHint.id);\n        } else if (this._hintLabel) {\n          ids.push(this._hintLabelId);\n        }\n\n        if (endHint) {\n          ids.push(endHint.id);\n        }\n      } else if (this._errorChildren) {\n        ids = this._errorChildren.map(error => error.id);\n      }\n\n      this._control.setDescribedByIds(ids);\n    }\n  }\n\n  /** Throws an error if the form field's control is missing. */\n  protected _validateControlChild() {\n    if (!this._control) {\n      throw getMatFormFieldMissingControlError();\n    }\n  }\n\n  /**\n   * Updates the width and position of the gap in the outline. Only relevant for the outline\n   * appearance.\n   */\n  updateOutlineGap() {\n    const labelEl = this._label ? this._label.nativeElement : null;\n\n    if (this.appearance !== 'outline' || !labelEl || !labelEl.children.length ||\n        !labelEl.textContent.trim()) {\n      return;\n    }\n\n    if (this._platform && !this._platform.isBrowser) {\n      // getBoundingClientRect isn't available on the server.\n      return;\n    }\n    // If the element is not present in the DOM, the outline gap will need to be calculated\n    // the next time it is checked and in the DOM.\n    if (!document.documentElement!.contains(this._elementRef.nativeElement)) {\n      this._outlineGapCalculationNeeded = true;\n      return;\n    }\n\n    let startWidth = 0;\n    let gapWidth = 0;\n    const startEls = this._connectionContainerRef.nativeElement.querySelectorAll(\n      '.mat-form-field-outline-start');\n    const gapEls = this._connectionContainerRef.nativeElement.querySelectorAll(\n        '.mat-form-field-outline-gap');\n    if (this._label && this._label.nativeElement.children.length) {\n      const containerStart = this._getStartEnd(\n          this._connectionContainerRef.nativeElement.getBoundingClientRect());\n      const labelStart = this._getStartEnd(labelEl.children[0].getBoundingClientRect());\n      let labelWidth = 0;\n\n      for (const child of labelEl.children) {\n        labelWidth += child.offsetWidth;\n      }\n      startWidth = labelStart - containerStart - outlineGapPadding;\n      gapWidth = labelWidth > 0 ? labelWidth * floatingLabelScale + outlineGapPadding * 2 : 0;\n    }\n\n    for (let i = 0; i < startEls.length; i++) {\n      startEls.item(i).style.width = `${startWidth}px`;\n    }\n    for (let i = 0; i < gapEls.length; i++) {\n      gapEls.item(i).style.width = `${gapWidth}px`;\n    }\n\n    this._outlineGapCalculationNeeded = false;\n  }\n\n  /** Gets the start end of the rect considering the current directionality. */\n  private _getStartEnd(rect: ClientRect): number {\n    return this._dir && this._dir.value === 'rtl' ? rect.right : rect.left;\n  }\n\n  /** Updates the outline gap the new time the zone stabilizes. */\n  private _updateOutlineGapOnStable() {\n    // @breaking-change 8.0.0 Remove this check and else block once _ngZone is required.\n    if (this._ngZone) {\n      this._ngZone.onStable.pipe(take(1)).subscribe(() => this.updateOutlineGap());\n    } else {\n      Promise.resolve().then(() => this.updateOutlineGap());\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {ObserversModule} from '@angular/cdk/observers';\nimport {MatError} from './error';\nimport {MatFormField} from './form-field';\nimport {MatHint} from './hint';\nimport {MatLabel} from './label';\nimport {MatPlaceholder} from './placeholder';\nimport {MatPrefix} from './prefix';\nimport {MatSuffix} from './suffix';\n\n\n@NgModule({\n  declarations: [\n    MatError,\n    MatFormField,\n    MatHint,\n    MatLabel,\n    MatPlaceholder,\n    MatPrefix,\n    MatSuffix,\n  ],\n  imports: [\n    CommonModule,\n    ObserversModule,\n  ],\n  exports: [\n    MatError,\n    MatFormField,\n    MatHint,\n    MatLabel,\n    MatPlaceholder,\n    MatPrefix,\n    MatSuffix,\n  ],\n})\nexport class MatFormFieldModule {}\n","/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)\r\n            t[p[i]] = s[p[i]];\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule, InjectionToken, Optional, Inject, isDevMode} from '@angular/core';\nimport {HammerLoader, HAMMER_LOADER} from '@angular/platform-browser';\nimport {BidiModule} from '@angular/cdk/bidi';\n\n\n/** Injection token that configures whether the Material sanity checks are enabled. */\nexport const MATERIAL_SANITY_CHECKS = new InjectionToken<boolean>('mat-sanity-checks', {\n  providedIn: 'root',\n  factory: MATERIAL_SANITY_CHECKS_FACTORY,\n});\n\n/** @docs-private */\nexport function MATERIAL_SANITY_CHECKS_FACTORY(): boolean {\n  return true;\n}\n\n/**\n * Module that captures anything that should be loaded and/or run for *all* Angular Material\n * components. This includes Bidi, etc.\n *\n * This module should be imported to each top-level component module (e.g., MatTabsModule).\n */\n@NgModule({\n  imports: [BidiModule],\n  exports: [BidiModule],\n})\nexport class MatCommonModule {\n  /** Whether we've done the global sanity checks (e.g. a theme is loaded, there is a doctype). */\n  private _hasDoneGlobalChecks = false;\n\n  /** Whether we've already checked for HammerJs availability. */\n  private _hasCheckedHammer = false;\n\n  /** Reference to the global `document` object. */\n  private _document = typeof document === 'object' && document ? document : null;\n\n  /** Reference to the global 'window' object. */\n  private _window = typeof window === 'object' && window ? window : null;\n\n  constructor(\n    @Optional() @Inject(MATERIAL_SANITY_CHECKS) private _sanityChecksEnabled: boolean,\n    @Optional() @Inject(HAMMER_LOADER) private _hammerLoader?: HammerLoader) {\n\n    if (this._areChecksEnabled() && !this._hasDoneGlobalChecks) {\n      this._checkDoctypeIsDefined();\n      this._checkThemeIsPresent();\n      this._hasDoneGlobalChecks = true;\n    }\n  }\n\n  /** Whether any sanity checks are enabled */\n  private _areChecksEnabled(): boolean {\n    return this._sanityChecksEnabled && isDevMode() && !this._isTestEnv();\n  }\n\n  /** Whether the code is running in tests. */\n  private _isTestEnv() {\n    const window = this._window as any;\n    return window && (window.__karma__ || window.jasmine);\n  }\n\n  private _checkDoctypeIsDefined(): void {\n    if (this._document && !this._document.doctype) {\n      console.warn(\n        'Current document does not have a doctype. This may cause ' +\n        'some Angular Material components not to behave as expected.'\n      );\n    }\n  }\n\n  private _checkThemeIsPresent(): void {\n    // We need to assert that the `body` is defined, because these checks run very early\n    // and the `body` won't be defined if the consumer put their scripts in the `head`.\n    if (!this._document || !this._document.body || typeof getComputedStyle !== 'function') {\n      return;\n    }\n\n    const testElement = this._document.createElement('div');\n\n    testElement.classList.add('mat-theme-loaded-marker');\n    this._document.body.appendChild(testElement);\n\n    const computedStyle = getComputedStyle(testElement);\n\n    // In some situations the computed style of the test element can be null. For example in\n    // Firefox, the computed style is null if an application is running inside of a hidden iframe.\n    // See: https://bugzilla.mozilla.org/show_bug.cgi?id=548397\n    if (computedStyle && computedStyle.display !== 'none') {\n      console.warn(\n        'Could not find Angular Material core theme. Most Material ' +\n        'components may not work as expected. For more info refer ' +\n        'to the theming guide: https://material.angular.io/guide/theming'\n      );\n    }\n\n    this._document.body.removeChild(testElement);\n  }\n\n  /** Checks whether HammerJS is available. */\n  _checkHammerIsAvailable(): void {\n    if (this._hasCheckedHammer || !this._window) {\n      return;\n    }\n\n    if (this._areChecksEnabled() && !(this._window as any)['Hammer'] && !this._hammerLoader) {\n      console.warn(\n        'Could not find HammerJS. Certain Angular Material components may not work correctly.');\n    }\n    this._hasCheckedHammer = true;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {Constructor} from './constructor';\n\n/** @docs-private */\nexport interface CanDisable {\n  /** Whether the component is disabled. */\n  disabled: boolean;\n}\n\n/** @docs-private */\nexport type CanDisableCtor = Constructor<CanDisable>;\n\n/** Mixin to augment a directive with a `disabled` property. */\nexport function mixinDisabled<T extends Constructor<{}>>(base: T): CanDisableCtor & T {\n  return class extends base {\n    private _disabled: boolean = false;\n\n    get disabled() { return this._disabled; }\n    set disabled(value: any) { this._disabled = coerceBooleanProperty(value); }\n\n    constructor(...args: any[]) { super(...args); }\n  };\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Constructor} from './constructor';\nimport {ElementRef} from '@angular/core';\n\n/** @docs-private */\nexport interface CanColor {\n  /** Theme color palette for the component. */\n  color: ThemePalette;\n}\n\n/** @docs-private */\nexport type CanColorCtor = Constructor<CanColor>;\n\n/** @docs-private */\nexport interface HasElementRef {\n  _elementRef: ElementRef;\n}\n\n/** Possible color palette values. */\nexport type ThemePalette = 'primary' | 'accent' | 'warn' | undefined;\n\n/** Mixin to augment a directive with a `color` property. */\nexport function mixinColor<T extends Constructor<HasElementRef>>(\n    base: T, defaultColor?: ThemePalette): CanColorCtor & T {\n  return class extends base {\n    private _color: ThemePalette;\n\n    get color(): ThemePalette { return this._color; }\n    set color(value: ThemePalette) {\n      const colorPalette = value || defaultColor;\n\n      if (colorPalette !== this._color) {\n        if (this._color) {\n          this._elementRef.nativeElement.classList.remove(`mat-${this._color}`);\n        }\n        if (colorPalette) {\n          this._elementRef.nativeElement.classList.add(`mat-${colorPalette}`);\n        }\n\n        this._color = colorPalette;\n      }\n    }\n\n    constructor(...args: any[]) {\n      super(...args);\n\n      // Set the default color that can be specified from the mixin.\n      this.color = defaultColor;\n    }\n  };\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {Constructor} from './constructor';\n\n/** @docs-private */\nexport interface CanDisableRipple {\n  /** Whether ripples are disabled. */\n  disableRipple: boolean;\n}\n\n/** @docs-private */\nexport type CanDisableRippleCtor = Constructor<CanDisableRipple>;\n\n/** Mixin to augment a directive with a `disableRipple` property. */\nexport function mixinDisableRipple<T extends Constructor<{}>>(base: T): CanDisableRippleCtor & T {\n  return class extends base {\n    private _disableRipple: boolean = false;\n\n    /** Whether the ripple effect is disabled or not. */\n    get disableRipple() { return this._disableRipple; }\n    set disableRipple(value: any) { this._disableRipple = coerceBooleanProperty(value); }\n\n    constructor(...args: any[]) { super(...args); }\n  };\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Constructor} from './constructor';\nimport {CanDisable} from './disabled';\n\n\n/** @docs-private */\nexport interface HasTabIndex {\n  /** Tabindex of the component. */\n  tabIndex: number;\n}\n\n/** @docs-private */\nexport type HasTabIndexCtor = Constructor<HasTabIndex>;\n\n/** Mixin to augment a directive with a `tabIndex` property. */\nexport function mixinTabIndex<T extends Constructor<CanDisable>>(base: T, defaultTabIndex = 0)\n    : HasTabIndexCtor & T {\n  return class extends base {\n    private _tabIndex: number = defaultTabIndex;\n\n    get tabIndex(): number { return this.disabled ? -1 : this._tabIndex; }\n    set tabIndex(value: number) {\n      // If the specified tabIndex value is null or undefined, fall back to the default value.\n      this._tabIndex = value != null ? value : defaultTabIndex;\n    }\n\n    constructor(...args: any[]) {\n      super(...args);\n    }\n  };\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FormControl, FormGroupDirective, NgControl, NgForm} from '@angular/forms';\nimport {Subject} from 'rxjs';\nimport {ErrorStateMatcher} from '../error/error-options';\nimport {Constructor} from './constructor';\n\n\n/** @docs-private */\nexport interface CanUpdateErrorState {\n  updateErrorState(): void;\n  readonly stateChanges: Subject<void>;\n  errorState: boolean;\n  errorStateMatcher: ErrorStateMatcher;\n}\n\n/** @docs-private */\nexport type CanUpdateErrorStateCtor = Constructor<CanUpdateErrorState>;\n\n/** @docs-private */\nexport interface HasErrorState {\n  _parentFormGroup: FormGroupDirective;\n  _parentForm: NgForm;\n  _defaultErrorStateMatcher: ErrorStateMatcher;\n  ngControl: NgControl;\n}\n\n/**\n * Mixin to augment a directive with updateErrorState method.\n * For component with `errorState` and need to update `errorState`.\n */\nexport function mixinErrorState<T extends Constructor<HasErrorState>>(base: T)\n: CanUpdateErrorStateCtor & T {\n  return class extends base {\n    /** Whether the component is in an error state. */\n    errorState: boolean = false;\n\n    /**\n     * Stream that emits whenever the state of the input changes such that the wrapping\n     * `MatFormField` needs to run change detection.\n     */\n    readonly stateChanges = new Subject<void>();\n\n    errorStateMatcher: ErrorStateMatcher;\n\n    updateErrorState() {\n      const oldState = this.errorState;\n      const parent = this._parentFormGroup || this._parentForm;\n      const matcher = this.errorStateMatcher || this._defaultErrorStateMatcher;\n      const control = this.ngControl ? this.ngControl.control as FormControl : null;\n      const newState = matcher.isErrorState(control, parent);\n\n      if (newState !== oldState) {\n        this.errorState = newState;\n        this.stateChanges.next();\n      }\n    }\n\n    constructor(...args: any[]) {\n      super(...args);\n    }\n  };\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Observable, Subscriber} from 'rxjs';\nimport {Constructor} from './constructor';\n\n\n/**\n * Mixin that adds an initialized property to a directive which, when subscribed to, will emit a\n * value once markInitialized has been called, which should be done during the ngOnInit function.\n * If the subscription is made after it has already been marked as initialized, then it will trigger\n * an emit immediately.\n * @docs-private\n */\nexport interface HasInitialized {\n  /** Stream that emits once during the directive/component's ngOnInit. */\n  initialized: Observable<void>;\n\n  /**\n   * Sets the state as initialized and must be called during ngOnInit to notify subscribers that\n   * the directive has been initialized.\n   * @docs-private\n   */\n  _markInitialized: () => void;\n}\n\n/** @docs-private */\nexport type HasInitializedCtor = Constructor<HasInitialized>;\n\n/** Mixin to augment a directive with an initialized property that will emits when ngOnInit ends. */\nexport function mixinInitialized<T extends Constructor<{}>>(base: T):\n    HasInitializedCtor & T {\n  return class extends base {\n    /** Whether this directive has been marked as initialized. */\n    _isInitialized = false;\n\n    /**\n     * List of subscribers that subscribed before the directive was initialized. Should be notified\n     * during _markInitialized. Set to null after pending subscribers are notified, and should\n     * not expect to be populated after.\n     */\n    _pendingSubscribers: Subscriber<void>[] | null = [];\n\n    /**\n     * Observable stream that emits when the directive initializes. If already initialized, the\n     * subscriber is stored to be notified once _markInitialized is called.\n     */\n    initialized = new Observable<void>(subscriber => {\n      // If initialized, immediately notify the subscriber. Otherwise store the subscriber to notify\n      // when _markInitialized is called.\n      if (this._isInitialized) {\n        this._notifySubscriber(subscriber);\n      } else {\n        this._pendingSubscribers!.push(subscriber);\n      }\n    });\n\n    constructor(...args: any[]) { super(...args); }\n\n    /**\n     * Marks the state as initialized and notifies pending subscribers. Should be called at the end\n     * of ngOnInit.\n     * @docs-private\n     */\n    _markInitialized(): void {\n      if (this._isInitialized) {\n        throw Error('This directive has already been marked as initialized and ' +\n            'should not be called twice.');\n      }\n\n      this._isInitialized = true;\n\n      this._pendingSubscribers!.forEach(this._notifySubscriber);\n      this._pendingSubscribers = null;\n    }\n\n    /** Emits and completes the subscriber stream (should only emit once). */\n    _notifySubscriber(subscriber: Subscriber<void>): void {\n      subscriber.next();\n      subscriber.complete();\n    }\n  };\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {inject, InjectionToken, LOCALE_ID} from '@angular/core';\nimport {Observable, Subject} from 'rxjs';\n\n/** InjectionToken for datepicker that can be used to override default locale code. */\nexport const MAT_DATE_LOCALE = new InjectionToken<string>('MAT_DATE_LOCALE', {\n  providedIn: 'root',\n  factory: MAT_DATE_LOCALE_FACTORY,\n});\n\n/** @docs-private */\nexport function MAT_DATE_LOCALE_FACTORY(): string {\n  return inject(LOCALE_ID);\n}\n\n/**\n * No longer needed since MAT_DATE_LOCALE has been changed to a scoped injectable.\n * If you are importing and providing this in your code you can simply remove it.\n * @deprecated\n * @breaking-change 8.0.0\n */\nexport const MAT_DATE_LOCALE_PROVIDER = {provide: MAT_DATE_LOCALE, useExisting: LOCALE_ID};\n\n/** Adapts type `D` to be usable as a date by cdk-based components that work with dates. */\nexport abstract class DateAdapter<D> {\n  /** The locale to use for all dates. */\n  protected locale: any;\n\n  /** A stream that emits when the locale changes. */\n  get localeChanges(): Observable<void> { return this._localeChanges; }\n  protected _localeChanges = new Subject<void>();\n\n  /**\n   * Gets the year component of the given date.\n   * @param date The date to extract the year from.\n   * @returns The year component.\n   */\n  abstract getYear(date: D): number;\n\n  /**\n   * Gets the month component of the given date.\n   * @param date The date to extract the month from.\n   * @returns The month component (0-indexed, 0 = January).\n   */\n  abstract getMonth(date: D): number;\n\n  /**\n   * Gets the date of the month component of the given date.\n   * @param date The date to extract the date of the month from.\n   * @returns The month component (1-indexed, 1 = first of month).\n   */\n  abstract getDate(date: D): number;\n\n  /**\n   * Gets the day of the week component of the given date.\n   * @param date The date to extract the day of the week from.\n   * @returns The month component (0-indexed, 0 = Sunday).\n   */\n  abstract getDayOfWeek(date: D): number;\n\n  /**\n   * Gets a list of names for the months.\n   * @param style The naming style (e.g. long = 'January', short = 'Jan', narrow = 'J').\n   * @returns An ordered list of all month names, starting with January.\n   */\n  abstract getMonthNames(style: 'long' | 'short' | 'narrow'): string[];\n\n  /**\n   * Gets a list of names for the dates of the month.\n   * @returns An ordered list of all date of the month names, starting with '1'.\n   */\n  abstract getDateNames(): string[];\n\n  /**\n   * Gets a list of names for the days of the week.\n   * @param style The naming style (e.g. long = 'Sunday', short = 'Sun', narrow = 'S').\n   * @returns An ordered list of all weekday names, starting with Sunday.\n   */\n  abstract getDayOfWeekNames(style: 'long' | 'short' | 'narrow'): string[];\n\n  /**\n   * Gets the name for the year of the given date.\n   * @param date The date to get the year name for.\n   * @returns The name of the given year (e.g. '2017').\n   */\n  abstract getYearName(date: D): string;\n\n  /**\n   * Gets the first day of the week.\n   * @returns The first day of the week (0-indexed, 0 = Sunday).\n   */\n  abstract getFirstDayOfWeek(): number;\n\n  /**\n   * Gets the number of days in the month of the given date.\n   * @param date The date whose month should be checked.\n   * @returns The number of days in the month of the given date.\n   */\n  abstract getNumDaysInMonth(date: D): number;\n\n  /**\n   * Clones the given date.\n   * @param date The date to clone\n   * @returns A new date equal to the given date.\n   */\n  abstract clone(date: D): D;\n\n  /**\n   * Creates a date with the given year, month, and date. Does not allow over/under-flow of the\n   * month and date.\n   * @param year The full year of the date. (e.g. 89 means the year 89, not the year 1989).\n   * @param month The month of the date (0-indexed, 0 = January). Must be an integer 0 - 11.\n   * @param date The date of month of the date. Must be an integer 1 - length of the given month.\n   * @returns The new date, or null if invalid.\n   */\n  abstract createDate(year: number, month: number, date: number): D;\n\n  /**\n   * Gets today's date.\n   * @returns Today's date.\n   */\n  abstract today(): D;\n\n  /**\n   * Parses a date from a user-provided value.\n   * @param value The value to parse.\n   * @param parseFormat The expected format of the value being parsed\n   *     (type is implementation-dependent).\n   * @returns The parsed date.\n   */\n  abstract parse(value: any, parseFormat: any): D | null;\n\n  /**\n   * Formats a date as a string according to the given format.\n   * @param date The value to format.\n   * @param displayFormat The format to use to display the date as a string.\n   * @returns The formatted date string.\n   */\n  abstract format(date: D, displayFormat: any): string;\n\n  /**\n   * Adds the given number of years to the date. Years are counted as if flipping 12 pages on the\n   * calendar for each year and then finding the closest date in the new month. For example when\n   * adding 1 year to Feb 29, 2016, the resulting date will be Feb 28, 2017.\n   * @param date The date to add years to.\n   * @param years The number of years to add (may be negative).\n   * @returns A new date equal to the given one with the specified number of years added.\n   */\n  abstract addCalendarYears(date: D, years: number): D;\n\n  /**\n   * Adds the given number of months to the date. Months are counted as if flipping a page on the\n   * calendar for each month and then finding the closest date in the new month. For example when\n   * adding 1 month to Jan 31, 2017, the resulting date will be Feb 28, 2017.\n   * @param date The date to add months to.\n   * @param months The number of months to add (may be negative).\n   * @returns A new date equal to the given one with the specified number of months added.\n   */\n  abstract addCalendarMonths(date: D, months: number): D;\n\n  /**\n   * Adds the given number of days to the date. Days are counted as if moving one cell on the\n   * calendar for each day.\n   * @param date The date to add days to.\n   * @param days The number of days to add (may be negative).\n   * @returns A new date equal to the given one with the specified number of days added.\n   */\n  abstract addCalendarDays(date: D, days: number): D;\n\n  /**\n   * Gets the RFC 3339 compatible string (https://tools.ietf.org/html/rfc3339) for the given date.\n   * This method is used to generate date strings that are compatible with native HTML attributes\n   * such as the `min` or `max` attribute of an `<input>`.\n   * @param date The date to get the ISO date string for.\n   * @returns The ISO date string date string.\n   */\n  abstract toIso8601(date: D): string;\n\n  /**\n   * Checks whether the given object is considered a date instance by this DateAdapter.\n   * @param obj The object to check\n   * @returns Whether the object is a date instance.\n   */\n  abstract isDateInstance(obj: any): boolean;\n\n  /**\n   * Checks whether the given date is valid.\n   * @param date The date to check.\n   * @returns Whether the date is valid.\n   */\n  abstract isValid(date: D): boolean;\n\n  /**\n   * Gets date instance that is not valid.\n   * @returns An invalid date.\n   */\n  abstract invalid(): D;\n\n  /**\n   * Attempts to deserialize a value to a valid date object. This is different from parsing in that\n   * deserialize should only accept non-ambiguous, locale-independent formats (e.g. a ISO 8601\n   * string). The default implementation does not allow any deserialization, it simply checks that\n   * the given value is already a valid date object or null. The `<mat-datepicker>` will call this\n   * method on all of it's `@Input()` properties that accept dates. It is therefore possible to\n   * support passing values from your backend directly to these properties by overriding this method\n   * to also deserialize the format used by your backend.\n   * @param value The value to be deserialized into a date object.\n   * @returns The deserialized date object, either a valid date, null if the value can be\n   *     deserialized into a null date (e.g. the empty string), or an invalid date.\n   */\n  deserialize(value: any): D | null {\n    if (value == null || this.isDateInstance(value) && this.isValid(value)) {\n      return value;\n    }\n    return this.invalid();\n  }\n\n  /**\n   * Sets the locale used for all dates.\n   * @param locale The new locale.\n   */\n  setLocale(locale: any) {\n    this.locale = locale;\n    this._localeChanges.next();\n  }\n\n  /**\n   * Compares two dates.\n   * @param first The first date to compare.\n   * @param second The second date to compare.\n   * @returns 0 if the dates are equal, a number less than 0 if the first date is earlier,\n   *     a number greater than 0 if the first date is later.\n   */\n  compareDate(first: D, second: D): number {\n    return this.getYear(first) - this.getYear(second) ||\n        this.getMonth(first) - this.getMonth(second) ||\n        this.getDate(first) - this.getDate(second);\n  }\n\n  /**\n   * Checks if two dates are equal.\n   * @param first The first date to check.\n   * @param second The second date to check.\n   * @returns Whether the two dates are equal.\n   *     Null dates are considered equal to other null dates.\n   */\n  sameDate(first: D | null, second: D | null): boolean {\n    if (first && second) {\n      let firstValid = this.isValid(first);\n      let secondValid = this.isValid(second);\n      if (firstValid && secondValid) {\n        return !this.compareDate(first, second);\n      }\n      return firstValid == secondValid;\n    }\n    return first == second;\n  }\n\n  /**\n   * Clamp the given date between min and max dates.\n   * @param date The date to clamp.\n   * @param min The minimum value to allow. If null or omitted no min is enforced.\n   * @param max The maximum value to allow. If null or omitted no max is enforced.\n   * @returns `min` if `date` is less than `min`, `max` if date is greater than `max`,\n   *     otherwise `date`.\n   */\n  clampDate(date: D, min?: D | null, max?: D | null): D {\n    if (min && this.compareDate(date, min) < 0) {\n      return min;\n    }\n    if (max && this.compareDate(date, max) > 0) {\n      return max;\n    }\n    return date;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Platform} from '@angular/cdk/platform';\nimport {Inject, Injectable, Optional} from '@angular/core';\nimport {DateAdapter, MAT_DATE_LOCALE} from './date-adapter';\n\n// TODO(mmalerba): Remove when we no longer support safari 9.\n/** Whether the browser supports the Intl API. */\nconst SUPPORTS_INTL_API = typeof Intl != 'undefined';\n\n\n/** The default month names to use if Intl API is not available. */\nconst DEFAULT_MONTH_NAMES = {\n  'long': [\n    'January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September',\n    'October', 'November', 'December'\n  ],\n  'short': ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'],\n  'narrow': ['J', 'F', 'M', 'A', 'M', 'J', 'J', 'A', 'S', 'O', 'N', 'D']\n};\n\n\n/** The default date names to use if Intl API is not available. */\nconst DEFAULT_DATE_NAMES = range(31, i => String(i + 1));\n\n\n/** The default day of the week names to use if Intl API is not available. */\nconst DEFAULT_DAY_OF_WEEK_NAMES = {\n  'long': ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'],\n  'short': ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'],\n  'narrow': ['S', 'M', 'T', 'W', 'T', 'F', 'S']\n};\n\n\n/**\n * Matches strings that have the form of a valid RFC 3339 string\n * (https://tools.ietf.org/html/rfc3339). Note that the string may not actually be a valid date\n * because the regex will match strings an with out of bounds month, date, etc.\n */\nconst ISO_8601_REGEX =\n    /^\\d{4}-\\d{2}-\\d{2}(?:T\\d{2}:\\d{2}:\\d{2}(?:\\.\\d+)?(?:Z|(?:(?:\\+|-)\\d{2}:\\d{2}))?)?$/;\n\n\n/** Creates an array and fills it with values. */\nfunction range<T>(length: number, valueFunction: (index: number) => T): T[] {\n  const valuesArray = Array(length);\n  for (let i = 0; i < length; i++) {\n    valuesArray[i] = valueFunction(i);\n  }\n  return valuesArray;\n}\n\n/** Adapts the native JS Date for use with cdk-based components that work with dates. */\n@Injectable()\nexport class NativeDateAdapter extends DateAdapter<Date> {\n  /** Whether to clamp the date between 1 and 9999 to avoid IE and Edge errors. */\n  private readonly _clampDate: boolean;\n\n  /**\n   * Whether to use `timeZone: 'utc'` with `Intl.DateTimeFormat` when formatting dates.\n   * Without this `Intl.DateTimeFormat` sometimes chooses the wrong timeZone, which can throw off\n   * the result. (e.g. in the en-US locale `new Date(1800, 7, 14).toLocaleDateString()`\n   * will produce `'8/13/1800'`.\n   *\n   * TODO(mmalerba): drop this variable. It's not being used in the code right now. We're now\n   * getting the string representation of a Date object from it's utc representation. We're keeping\n   * it here for sometime, just for precaution, in case we decide to revert some of these changes\n   * though.\n   */\n  useUtcForDisplay: boolean = true;\n\n  constructor(@Optional() @Inject(MAT_DATE_LOCALE) matDateLocale: string, platform: Platform) {\n    super();\n    super.setLocale(matDateLocale);\n\n    // IE does its own time zone correction, so we disable this on IE.\n    this.useUtcForDisplay = !platform.TRIDENT;\n    this._clampDate = platform.TRIDENT || platform.EDGE;\n  }\n\n  getYear(date: Date): number {\n    return date.getFullYear();\n  }\n\n  getMonth(date: Date): number {\n    return date.getMonth();\n  }\n\n  getDate(date: Date): number {\n    return date.getDate();\n  }\n\n  getDayOfWeek(date: Date): number {\n    return date.getDay();\n  }\n\n  getMonthNames(style: 'long' | 'short' | 'narrow'): string[] {\n    if (SUPPORTS_INTL_API) {\n      const dtf = new Intl.DateTimeFormat(this.locale, {month: style, timeZone: 'utc'});\n      return range(12, i =>\n          this._stripDirectionalityCharacters(this._format(dtf, new Date(2017, i, 1))));\n    }\n    return DEFAULT_MONTH_NAMES[style];\n  }\n\n  getDateNames(): string[] {\n    if (SUPPORTS_INTL_API) {\n      const dtf = new Intl.DateTimeFormat(this.locale, {day: 'numeric', timeZone: 'utc'});\n      return range(31, i => this._stripDirectionalityCharacters(\n          this._format(dtf, new Date(2017, 0, i + 1))));\n    }\n    return DEFAULT_DATE_NAMES;\n  }\n\n  getDayOfWeekNames(style: 'long' | 'short' | 'narrow'): string[] {\n    if (SUPPORTS_INTL_API) {\n      const dtf = new Intl.DateTimeFormat(this.locale, {weekday: style, timeZone: 'utc'});\n      return range(7, i => this._stripDirectionalityCharacters(\n          this._format(dtf, new Date(2017, 0, i + 1))));\n    }\n    return DEFAULT_DAY_OF_WEEK_NAMES[style];\n  }\n\n  getYearName(date: Date): string {\n    if (SUPPORTS_INTL_API) {\n      const dtf = new Intl.DateTimeFormat(this.locale, {year: 'numeric', timeZone: 'utc'});\n      return this._stripDirectionalityCharacters(this._format(dtf, date));\n    }\n    return String(this.getYear(date));\n  }\n\n  getFirstDayOfWeek(): number {\n    // We can't tell using native JS Date what the first day of the week is, we default to Sunday.\n    return 0;\n  }\n\n  getNumDaysInMonth(date: Date): number {\n    return this.getDate(this._createDateWithOverflow(\n        this.getYear(date), this.getMonth(date) + 1, 0));\n  }\n\n  clone(date: Date): Date {\n    return this.createDate(this.getYear(date), this.getMonth(date), this.getDate(date));\n  }\n\n  createDate(year: number, month: number, date: number): Date {\n    // Check for invalid month and date (except upper bound on date which we have to check after\n    // creating the Date).\n    if (month < 0 || month > 11) {\n      throw Error(`Invalid month index \"${month}\". Month index has to be between 0 and 11.`);\n    }\n\n    if (date < 1) {\n      throw Error(`Invalid date \"${date}\". Date has to be greater than 0.`);\n    }\n\n    let result = this._createDateWithOverflow(year, month, date);\n    // Check that the date wasn't above the upper bound for the month, causing the month to overflow\n    if (result.getMonth() != month) {\n      throw Error(`Invalid date \"${date}\" for month with index \"${month}\".`);\n    }\n\n    return result;\n  }\n\n  today(): Date {\n    return new Date();\n  }\n\n  parse(value: any): Date | null {\n    // We have no way using the native JS Date to set the parse format or locale, so we ignore these\n    // parameters.\n    if (typeof value == 'number') {\n      return new Date(value);\n    }\n    return value ? new Date(Date.parse(value)) : null;\n  }\n\n  format(date: Date, displayFormat: Object): string {\n    if (!this.isValid(date)) {\n      throw Error('NativeDateAdapter: Cannot format invalid date.');\n    }\n\n    if (SUPPORTS_INTL_API) {\n      // On IE and Edge the i18n API will throw a hard error that can crash the entire app\n      // if we attempt to format a date whose year is less than 1 or greater than 9999.\n      if (this._clampDate && (date.getFullYear() < 1 || date.getFullYear() > 9999)) {\n        date = this.clone(date);\n        date.setFullYear(Math.max(1, Math.min(9999, date.getFullYear())));\n      }\n\n      displayFormat = {...displayFormat, timeZone: 'utc'};\n\n      const dtf = new Intl.DateTimeFormat(this.locale, displayFormat);\n      return this._stripDirectionalityCharacters(this._format(dtf, date));\n    }\n    return this._stripDirectionalityCharacters(date.toDateString());\n  }\n\n  addCalendarYears(date: Date, years: number): Date {\n    return this.addCalendarMonths(date, years * 12);\n  }\n\n  addCalendarMonths(date: Date, months: number): Date {\n    let newDate = this._createDateWithOverflow(\n        this.getYear(date), this.getMonth(date) + months, this.getDate(date));\n\n    // It's possible to wind up in the wrong month if the original month has more days than the new\n    // month. In this case we want to go to the last day of the desired month.\n    // Note: the additional + 12 % 12 ensures we end up with a positive number, since JS % doesn't\n    // guarantee this.\n    if (this.getMonth(newDate) != ((this.getMonth(date) + months) % 12 + 12) % 12) {\n      newDate = this._createDateWithOverflow(this.getYear(newDate), this.getMonth(newDate), 0);\n    }\n\n    return newDate;\n  }\n\n  addCalendarDays(date: Date, days: number): Date {\n    return this._createDateWithOverflow(\n        this.getYear(date), this.getMonth(date), this.getDate(date) + days);\n  }\n\n  toIso8601(date: Date): string {\n    return [\n      date.getUTCFullYear(),\n      this._2digit(date.getUTCMonth() + 1),\n      this._2digit(date.getUTCDate())\n    ].join('-');\n  }\n\n  /**\n   * Returns the given value if given a valid Date or null. Deserializes valid ISO 8601 strings\n   * (https://www.ietf.org/rfc/rfc3339.txt) into valid Dates and empty string into null. Returns an\n   * invalid date for all other values.\n   */\n  deserialize(value: any): Date | null {\n    if (typeof value === 'string') {\n      if (!value) {\n        return null;\n      }\n      // The `Date` constructor accepts formats other than ISO 8601, so we need to make sure the\n      // string is the right format first.\n      if (ISO_8601_REGEX.test(value)) {\n        let date = new Date(value);\n        if (this.isValid(date)) {\n          return date;\n        }\n      }\n    }\n    return super.deserialize(value);\n  }\n\n  isDateInstance(obj: any) {\n    return obj instanceof Date;\n  }\n\n  isValid(date: Date) {\n    return !isNaN(date.getTime());\n  }\n\n  invalid(): Date {\n    return new Date(NaN);\n  }\n\n  /** Creates a date but allows the month and date to overflow. */\n  private _createDateWithOverflow(year: number, month: number, date: number) {\n    const result = new Date(year, month, date);\n\n    // We need to correct for the fact that JS native Date treats years in range [0, 99] as\n    // abbreviations for 19xx.\n    if (year >= 0 && year < 100) {\n      result.setFullYear(this.getYear(result) - 1900);\n    }\n    return result;\n  }\n\n  /**\n   * Pads a number to make it two digits.\n   * @param n The number to pad.\n   * @returns The padded number.\n   */\n  private _2digit(n: number) {\n    return ('00' + n).slice(-2);\n  }\n\n  /**\n   * Strip out unicode LTR and RTL characters. Edge and IE insert these into formatted dates while\n   * other browsers do not. We remove them to make output consistent and because they interfere with\n   * date parsing.\n   * @param str The string to strip direction characters from.\n   * @returns The stripped string.\n   */\n  private _stripDirectionalityCharacters(str: string) {\n    return str.replace(/[\\u200e\\u200f]/g, '');\n  }\n\n  /**\n   * When converting Date object to string, javascript built-in functions may return wrong\n   * results because it applies its internal DST rules. The DST rules around the world change\n   * very frequently, and the current valid rule is not always valid in previous years though.\n   * We work around this problem building a new Date object which has its internal UTC\n   * representation with the local date and time.\n   * @param dtf Intl.DateTimeFormat object, containg the desired string format. It must have\n   *    timeZone set to 'utc' to work fine.\n   * @param date Date from which we want to get the string representation according to dtf\n   * @returns A Date object with its UTC representation based on the passed in date info\n   */\n  private _format(dtf: Intl.DateTimeFormat, date: Date) {\n    const d = new Date(Date.UTC(\n        date.getFullYear(), date.getMonth(), date.getDate(), date.getHours(),\n        date.getMinutes(), date.getSeconds(), date.getMilliseconds()));\n    return dtf.format(d);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  NgModule,\n  Directive,\n  ElementRef,\n  QueryList,\n} from '@angular/core';\nimport {startWith} from 'rxjs/operators';\nimport {MatCommonModule} from '../common-behaviors/common-module';\n\n\n/**\n * Shared directive to count lines inside a text area, such as a list item.\n * Line elements can be extracted with a @ContentChildren(MatLine) query, then\n * counted by checking the query list's length.\n */\n@Directive({\n  selector: '[mat-line], [matLine]',\n  host: {'class': 'mat-line'}\n})\nexport class MatLine {}\n\n/**\n * Helper that takes a query list of lines and sets the correct class on the host.\n * @docs-private\n */\nexport function setLines(lines: QueryList<MatLine>, element: ElementRef<HTMLElement>) {\n  // Note: doesn't need to unsubscribe, because `changes`\n  // gets completed by Angular when the view is destroyed.\n  lines.changes.pipe(startWith<QueryList<MatLine>>(lines)).subscribe(({length}) => {\n    setClass(element, 'mat-2-line', false);\n    setClass(element, 'mat-3-line', false);\n    setClass(element, 'mat-multi-line', false);\n\n    if (length === 2 || length === 3) {\n      setClass(element, `mat-${length}-line`, true);\n    } else if (length > 3) {\n      setClass(element, `mat-multi-line`, true);\n    }\n  });\n}\n\n/** Adds or removes a class from an element. */\nfunction setClass(element: ElementRef<HTMLElement>, className: string, isAdd: boolean): void {\n  const classList = element.nativeElement.classList;\n  isAdd ? classList.add(className) : classList.remove(className);\n}\n\n/**\n * Helper that takes a query list of lines and sets the correct class on the host.\n * @docs-private\n * @deprecated Use `setLines` instead.\n * @breaking-change 8.0.0\n */\nexport class MatLineSetter {\n  constructor(lines: QueryList<MatLine>, element: ElementRef<HTMLElement>) {\n    setLines(lines, element);\n  }\n}\n\n@NgModule({\n  imports: [MatCommonModule],\n  exports: [MatLine, MatCommonModule],\n  declarations: [MatLine],\n})\nexport class MatLineModule { }\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {ElementRef, NgZone} from '@angular/core';\nimport {Platform, normalizePassiveListenerOptions} from '@angular/cdk/platform';\nimport {isFakeMousedownFromScreenReader} from '@angular/cdk/a11y';\nimport {RippleRef, RippleState} from './ripple-ref';\n\nexport type RippleConfig = {\n  color?: string;\n  centered?: boolean;\n  radius?: number;\n  persistent?: boolean;\n  animation?: RippleAnimationConfig;\n  terminateOnPointerUp?: boolean;\n};\n\n/**\n * Interface that describes the configuration for the animation of a ripple.\n * There are two animation phases with different durations for the ripples.\n */\nexport interface RippleAnimationConfig {\n  /** Duration in milliseconds for the enter animation (expansion from point of contact). */\n  enterDuration?: number;\n  /** Duration in milliseconds for the exit animation (fade-out). */\n  exitDuration?: number;\n}\n\n/**\n * Interface that describes the target for launching ripples.\n * It defines the ripple configuration and disabled state for interaction ripples.\n * @docs-private\n */\nexport interface RippleTarget {\n  /** Configuration for ripples that are launched on pointer down. */\n  rippleConfig: RippleConfig;\n  /** Whether ripples on pointer down should be disabled. */\n  rippleDisabled: boolean;\n}\n\n/**\n * Default ripple animation configuration for ripples without an explicit\n * animation config specified.\n */\nexport const defaultRippleAnimationConfig = {\n  enterDuration: 450,\n  exitDuration: 400\n};\n\n/**\n * Timeout for ignoring mouse events. Mouse events will be temporary ignored after touch\n * events to avoid synthetic mouse events.\n */\nconst ignoreMouseEventsTimeout = 800;\n\n/** Options that apply to all the event listeners that are bound by the ripple renderer. */\nconst passiveEventOptions = normalizePassiveListenerOptions({passive: true});\n\n/**\n * Helper service that performs DOM manipulations. Not intended to be used outside this module.\n * The constructor takes a reference to the ripple directive's host element and a map of DOM\n * event handlers to be installed on the element that triggers ripple animations.\n * This will eventually become a custom renderer once Angular support exists.\n * @docs-private\n */\nexport class RippleRenderer {\n  /** Element where the ripples are being added to. */\n  private _containerElement: HTMLElement;\n\n  /** Element which triggers the ripple elements on mouse events. */\n  private _triggerElement: HTMLElement | null;\n\n  /** Whether the pointer is currently down or not. */\n  private _isPointerDown = false;\n\n  /** Events to be registered on the trigger element. */\n  private _triggerEvents = new Map<string, any>();\n\n  /** Set of currently active ripple references. */\n  private _activeRipples = new Set<RippleRef>();\n\n  /** Latest non-persistent ripple that was triggered. */\n  private _mostRecentTransientRipple: RippleRef | null;\n\n  /** Time in milliseconds when the last touchstart event happened. */\n  private _lastTouchStartEvent: number;\n\n  /**\n   * Cached dimensions of the ripple container. Set when the first\n   * ripple is shown and cleared once no more ripples are visible.\n   */\n  private _containerRect: ClientRect | null;\n\n  constructor(private _target: RippleTarget,\n              private _ngZone: NgZone,\n              elementRef: ElementRef<HTMLElement>,\n              platform: Platform) {\n\n    // Only do anything if we're on the browser.\n    if (platform.isBrowser) {\n      this._containerElement = elementRef.nativeElement;\n\n      // Specify events which need to be registered on the trigger.\n      this._triggerEvents\n        .set('mousedown', this.onMousedown)\n        .set('mouseup', this.onPointerUp)\n        .set('mouseleave', this.onPointerUp)\n\n        .set('touchstart', this.onTouchStart)\n        .set('touchend', this.onPointerUp)\n        .set('touchcancel', this.onPointerUp);\n    }\n  }\n\n  /**\n   * Fades in a ripple at the given coordinates.\n   * @param x Coordinate within the element, along the X axis at which to start the ripple.\n   * @param y Coordinate within the element, along the Y axis at which to start the ripple.\n   * @param config Extra ripple options.\n   */\n  fadeInRipple(x: number, y: number, config: RippleConfig = {}): RippleRef {\n    const containerRect = this._containerRect =\n                          this._containerRect || this._containerElement.getBoundingClientRect();\n    const animationConfig = {...defaultRippleAnimationConfig, ...config.animation};\n\n    if (config.centered) {\n      x = containerRect.left + containerRect.width / 2;\n      y = containerRect.top + containerRect.height / 2;\n    }\n\n    const radius = config.radius || distanceToFurthestCorner(x, y, containerRect);\n    const offsetX = x - containerRect.left;\n    const offsetY = y - containerRect.top;\n    const duration = animationConfig.enterDuration;\n\n    const ripple = document.createElement('div');\n    ripple.classList.add('mat-ripple-element');\n\n    ripple.style.left = `${offsetX - radius}px`;\n    ripple.style.top = `${offsetY - radius}px`;\n    ripple.style.height = `${radius * 2}px`;\n    ripple.style.width = `${radius * 2}px`;\n\n    // If the color is not set, the default CSS color will be used.\n    ripple.style.backgroundColor = config.color || null;\n    ripple.style.transitionDuration = `${duration}ms`;\n\n    this._containerElement.appendChild(ripple);\n\n    // By default the browser does not recalculate the styles of dynamically created\n    // ripple elements. This is critical because then the `scale` would not animate properly.\n    enforceStyleRecalculation(ripple);\n\n    ripple.style.transform = 'scale(1)';\n\n    // Exposed reference to the ripple that will be returned.\n    const rippleRef = new RippleRef(this, ripple, config);\n\n    rippleRef.state = RippleState.FADING_IN;\n\n    // Add the ripple reference to the list of all active ripples.\n    this._activeRipples.add(rippleRef);\n\n    if (!config.persistent) {\n      this._mostRecentTransientRipple = rippleRef;\n    }\n\n    // Wait for the ripple element to be completely faded in.\n    // Once it's faded in, the ripple can be hidden immediately if the mouse is released.\n    this.runTimeoutOutsideZone(() => {\n      const isMostRecentTransientRipple = rippleRef === this._mostRecentTransientRipple;\n\n      rippleRef.state = RippleState.VISIBLE;\n\n      // When the timer runs out while the user has kept their pointer down, we want to\n      // keep only the persistent ripples and the latest transient ripple. We do this,\n      // because we don't want stacked transient ripples to appear after their enter\n      // animation has finished.\n      if (!config.persistent && (!isMostRecentTransientRipple || !this._isPointerDown)) {\n        rippleRef.fadeOut();\n      }\n    }, duration);\n\n    return rippleRef;\n  }\n\n  /** Fades out a ripple reference. */\n  fadeOutRipple(rippleRef: RippleRef) {\n    const wasActive = this._activeRipples.delete(rippleRef);\n\n    if (rippleRef === this._mostRecentTransientRipple) {\n      this._mostRecentTransientRipple = null;\n    }\n\n    // Clear out the cached bounding rect if we have no more ripples.\n    if (!this._activeRipples.size) {\n      this._containerRect = null;\n    }\n\n    // For ripples that are not active anymore, don't re-un the fade-out animation.\n    if (!wasActive) {\n      return;\n    }\n\n    const rippleEl = rippleRef.element;\n    const animationConfig = {...defaultRippleAnimationConfig, ...rippleRef.config.animation};\n\n    rippleEl.style.transitionDuration = `${animationConfig.exitDuration}ms`;\n    rippleEl.style.opacity = '0';\n    rippleRef.state = RippleState.FADING_OUT;\n\n    // Once the ripple faded out, the ripple can be safely removed from the DOM.\n    this.runTimeoutOutsideZone(() => {\n      rippleRef.state = RippleState.HIDDEN;\n      rippleEl.parentNode!.removeChild(rippleEl);\n    }, animationConfig.exitDuration);\n  }\n\n  /** Fades out all currently active ripples. */\n  fadeOutAll() {\n    this._activeRipples.forEach(ripple => ripple.fadeOut());\n  }\n\n  /** Sets up the trigger event listeners */\n  setupTriggerEvents(element: HTMLElement) {\n    if (!element || element === this._triggerElement) {\n      return;\n    }\n\n    // Remove all previously registered event listeners from the trigger element.\n    this._removeTriggerEvents();\n\n    this._ngZone.runOutsideAngular(() => {\n      this._triggerEvents.forEach((fn, type) => {\n        element.addEventListener(type, fn, passiveEventOptions);\n      });\n    });\n\n    this._triggerElement = element;\n  }\n\n  /** Function being called whenever the trigger is being pressed using mouse. */\n  private onMousedown = (event: MouseEvent) => {\n    // Screen readers will fire fake mouse events for space/enter. Skip launching a\n    // ripple in this case for consistency with the non-screen-reader experience.\n    const isFakeMousedown = isFakeMousedownFromScreenReader(event);\n    const isSyntheticEvent = this._lastTouchStartEvent &&\n        Date.now() < this._lastTouchStartEvent + ignoreMouseEventsTimeout;\n\n    if (!this._target.rippleDisabled && !isFakeMousedown && !isSyntheticEvent) {\n      this._isPointerDown = true;\n      this.fadeInRipple(event.clientX, event.clientY, this._target.rippleConfig);\n    }\n  }\n\n  /** Function being called whenever the trigger is being pressed using touch. */\n  private onTouchStart = (event: TouchEvent) => {\n    if (!this._target.rippleDisabled) {\n      // Some browsers fire mouse events after a `touchstart` event. Those synthetic mouse\n      // events will launch a second ripple if we don't ignore mouse events for a specific\n      // time after a touchstart event.\n      this._lastTouchStartEvent = Date.now();\n      this._isPointerDown = true;\n\n      // Use `changedTouches` so we skip any touches where the user put\n      // their finger down, but used another finger to tap the element again.\n      const touches = event.changedTouches;\n\n      for (let i = 0; i < touches.length; i++) {\n        this.fadeInRipple(touches[i].clientX, touches[i].clientY, this._target.rippleConfig);\n      }\n    }\n  }\n\n  /** Function being called whenever the trigger is being released. */\n  private onPointerUp = () => {\n    if (!this._isPointerDown) {\n      return;\n    }\n\n    this._isPointerDown = false;\n\n    // Fade-out all ripples that are visible and not persistent.\n    this._activeRipples.forEach(ripple => {\n      // By default, only ripples that are completely visible will fade out on pointer release.\n      // If the `terminateOnPointerUp` option is set, ripples that still fade in will also fade out.\n      const isVisible = ripple.state === RippleState.VISIBLE ||\n        ripple.config.terminateOnPointerUp && ripple.state === RippleState.FADING_IN;\n\n      if (!ripple.config.persistent && isVisible) {\n        ripple.fadeOut();\n      }\n    });\n  }\n\n  /** Runs a timeout outside of the Angular zone to avoid triggering the change detection. */\n  private runTimeoutOutsideZone(fn: Function, delay = 0) {\n    this._ngZone.runOutsideAngular(() => setTimeout(fn, delay));\n  }\n\n  /** Removes previously registered event listeners from the trigger element. */\n  _removeTriggerEvents() {\n    if (this._triggerElement) {\n      this._triggerEvents.forEach((fn, type) => {\n        this._triggerElement!.removeEventListener(type, fn, passiveEventOptions);\n      });\n    }\n  }\n}\n\n/** Enforces a style recalculation of a DOM element by computing its styles. */\nfunction enforceStyleRecalculation(element: HTMLElement) {\n  // Enforce a style recalculation by calling `getComputedStyle` and accessing any property.\n  // Calling `getPropertyValue` is important to let optimizers know that this is not a noop.\n  // See: https://gist.github.com/paulirish/5d52fb081b3570c81e3a\n  window.getComputedStyle(element).getPropertyValue('opacity');\n}\n\n/**\n * Returns the distance from the point (x, y) to the furthest corner of a rectangle.\n */\nfunction distanceToFurthestCorner(x: number, y: number, rect: ClientRect) {\n  const distX = Math.max(Math.abs(x - rect.left), Math.abs(x - rect.right));\n  const distY = Math.max(Math.abs(y - rect.top), Math.abs(y - rect.bottom));\n  return Math.sqrt(distX * distX + distY * distY);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** @docs-private */\nexport function getMatFormFieldPlaceholderConflictError(): Error {\n  return Error('Placeholder attribute and child element were both specified.');\n}\n\n/** @docs-private */\nexport function getMatFormFieldDuplicatedHintError(align: string): Error {\n  return Error(`A hint was already declared for 'align=\"${align}\"'.`);\n}\n\n/** @docs-private */\nexport function getMatFormFieldMissingControlError(): Error {\n  return Error('mat-form-field must contain a MatFormFieldControl.');\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** @docs-private */\nexport function getMatInputUnsupportedTypeError(type: string): Error {\n  return Error(`Input type \"${type}\" isn't supported by matInput.`);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** @docs-private */\nexport function createMissingDateImplError(provider: string) {\n  return Error(\n      `MatDatepicker: No provider found for ${provider}. You must import one of the following ` +\n      `modules at your application root: MatNativeDateModule, MatMomentDateModule, or provide a ` +\n      `custom implementation.`);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Throws an exception for the case when menu trigger doesn't have a valid mat-menu instance\n * @docs-private\n */\nexport function throwMatMenuMissingError() {\n  throw Error(`matMenuTriggerFor: must pass in an mat-menu instance.\n\n    Example:\n      <mat-menu #menu=\"matMenu\"></mat-menu>\n      <button [matMenuTriggerFor]=\"menu\"></button>`);\n}\n\n/**\n * Throws an exception for the case when menu's x-position value isn't valid.\n * In other words, it doesn't match 'before' or 'after'.\n * @docs-private\n */\nexport function throwMatMenuInvalidPositionX() {\n  throw Error(`xPosition value must be either 'before' or after'.\n      Example: <mat-menu xPosition=\"before\" #menu=\"matMenu\"></mat-menu>`);\n}\n\n/**\n * Throws an exception for the case when menu's y-position value isn't valid.\n * In other words, it doesn't match 'above' or 'below'.\n * @docs-private\n */\nexport function throwMatMenuInvalidPositionY() {\n  throw Error(`yPosition value must be either 'above' or below'.\n      Example: <mat-menu yPosition=\"above\" #menu=\"matMenu\"></mat-menu>`);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Returns an exception to be thrown when attempting to change a select's `multiple` option\n * after initialization.\n * @docs-private\n */\nexport function getMatSelectDynamicMultipleError(): Error {\n  return Error('Cannot change `multiple` mode of select after initialization.');\n}\n\n/**\n * Returns an exception to be thrown when attempting to assign a non-array value to a select\n * in `multiple` mode. Note that `undefined` and `null` are still valid values to allow for\n * resetting the value.\n * @docs-private\n */\nexport function getMatSelectNonArrayValueError(): Error {\n  return Error('Value must be an array in multiple-selection mode.');\n}\n\n/**\n * Returns an exception to be thrown when assigning a non-function value to the comparator\n * used to determine if a value corresponds to an option. Note that whether the function\n * actually takes two values and returns a boolean is not checked.\n */\nexport function getMatSelectNonFunctionValueError(): Error {\n  return Error('`compareWith` must be a function.');\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** @docs-private */\nexport function getSortDuplicateSortableIdError(id: string): Error {\n  return Error(`Cannot have two MatSortables with the same id (${id}).`);\n}\n\n/** @docs-private */\nexport function getSortHeaderNotContainedWithinSortError(): Error {\n  return Error(`MatSortHeader must be placed within a parent element with the MatSort directive.`);\n}\n\n/** @docs-private */\nexport function getSortHeaderMissingIdError(): Error {\n  return Error(`MatSortHeader must be provided with a unique id.`);\n}\n\n/** @docs-private */\nexport function getSortInvalidDirectionError(direction: string): Error {\n  return Error(`${direction} is not a valid sort direction ('asc' or 'desc').`);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** @docs-private */\nexport class AnimationCurves {\n  static STANDARD_CURVE = 'cubic-bezier(0.4,0.0,0.2,1)';\n  static DECELERATION_CURVE = 'cubic-bezier(0.0,0.0,0.2,1)';\n  static ACCELERATION_CURVE = 'cubic-bezier(0.4,0.0,1,1)';\n  static SHARP_CURVE = 'cubic-bezier(0.4,0.0,0.6,1)';\n}\n\n\n/** @docs-private */\nexport class AnimationDurations {\n  static COMPLEX = '375ms';\n  static ENTERING = '225ms';\n  static EXITING = '195ms';\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {InjectionToken} from '@angular/core';\n\n\nexport type MatDateFormats = {\n  parse: {\n    dateInput: any\n  },\n  display: {\n    dateInput: any,\n    monthYearLabel: any,\n    dateA11yLabel: any,\n    monthYearA11yLabel: any,\n  }\n};\n\n\nexport const MAT_DATE_FORMATS = new InjectionToken<MatDateFormats>('mat-date-formats');\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {MatDateFormats} from './date-formats';\n\n\nexport const MAT_NATIVE_DATE_FORMATS: MatDateFormats = {\n  parse: {\n    dateInput: null,\n  },\n  display: {\n    dateInput: {year: 'numeric', month: 'numeric', day: 'numeric'},\n    monthYearLabel: {year: 'numeric', month: 'short'},\n    dateA11yLabel: {year: 'numeric', month: 'long', day: 'numeric'},\n    monthYearA11yLabel: {year: 'numeric', month: 'long'},\n  }\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {PlatformModule} from '@angular/cdk/platform';\nimport {NgModule} from '@angular/core';\nimport {DateAdapter} from './date-adapter';\nimport {MAT_DATE_FORMATS} from './date-formats';\nimport {NativeDateAdapter} from './native-date-adapter';\nimport {MAT_NATIVE_DATE_FORMATS} from './native-date-formats';\n\nexport * from './date-adapter';\nexport * from './date-formats';\nexport * from './native-date-adapter';\nexport * from './native-date-formats';\n\n\n@NgModule({\n  imports: [PlatformModule],\n  providers: [\n    {provide: DateAdapter, useClass: NativeDateAdapter},\n  ],\n})\nexport class NativeDateModule {}\n\n\n@NgModule({\n  imports: [NativeDateModule],\n  providers: [{provide: MAT_DATE_FORMATS, useValue: MAT_NATIVE_DATE_FORMATS}],\n})\nexport class MatNativeDateModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable} from '@angular/core';\nimport {FormGroupDirective, NgForm, FormControl} from '@angular/forms';\n\n/** Error state matcher that matches when a control is invalid and dirty. */\n@Injectable()\nexport class ShowOnDirtyErrorStateMatcher implements ErrorStateMatcher {\n  isErrorState(control: FormControl | null, form: FormGroupDirective | NgForm | null): boolean {\n    return !!(control && control.invalid && (control.dirty || (form && form.submitted)));\n  }\n}\n\n/** Provider that defines how form controls behave with regards to displaying error messages. */\n@Injectable({providedIn: 'root'})\nexport class ErrorStateMatcher {\n  isErrorState(control: FormControl | null, form: FormGroupDirective | NgForm | null): boolean {\n    return !!(control && control.invalid && (control.touched || (form && form.submitted)));\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable, InjectionToken, Inject, Optional} from '@angular/core';\nimport {HammerGestureConfig} from '@angular/platform-browser';\nimport {MatCommonModule} from '../common-behaviors/common-module';\nimport {\n  HammerStatic,\n  HammerInstance,\n  Recognizer,\n  RecognizerStatic,\n  HammerOptions,\n} from './gesture-annotations';\n\n/**\n * Injection token that can be used to provide options to the Hammerjs instance.\n * More info at http://hammerjs.github.io/api/.\n */\nexport const MAT_HAMMER_OPTIONS = new InjectionToken<HammerOptions>('MAT_HAMMER_OPTIONS');\n\nconst ANGULAR_MATERIAL_SUPPORTED_HAMMER_GESTURES = [\n  'longpress',\n  'slide',\n  'slidestart',\n  'slideend',\n  'slideright',\n  'slideleft'\n];\n\n/**\n * Fake HammerInstance that is used when a Hammer instance is requested when HammerJS has not\n * been loaded on the page.\n */\nconst noopHammerInstance: HammerInstance = {\n  on: () => {},\n  off: () => {},\n};\n\n/** Adjusts configuration of our gesture library, Hammer. */\n@Injectable()\nexport class GestureConfig extends HammerGestureConfig {\n  /** List of new event names to add to the gesture support list */\n  events = ANGULAR_MATERIAL_SUPPORTED_HAMMER_GESTURES;\n\n  constructor(\n    @Optional() @Inject(MAT_HAMMER_OPTIONS) private _hammerOptions?: HammerOptions,\n    @Optional() commonModule?: MatCommonModule) {\n    super();\n    if (commonModule) {\n      commonModule._checkHammerIsAvailable();\n    }\n  }\n\n  /**\n   * Builds Hammer instance manually to add custom recognizers that match the Material Design spec.\n   *\n   * Our gesture names come from the Material Design gestures spec:\n   * https://material.io/design/#gestures-touch-mechanics\n   *\n   * More information on default recognizers can be found in Hammer docs:\n   * http://hammerjs.github.io/recognizer-pan/\n   * http://hammerjs.github.io/recognizer-press/\n   *\n   * @param element Element to which to assign the new HammerJS gestures.\n   * @returns Newly-created HammerJS instance.\n   */\n  buildHammer(element: HTMLElement): HammerInstance {\n    const hammer: HammerStatic = typeof window !== 'undefined' ? (window as any).Hammer : null;\n\n    if (!hammer) {\n      // If HammerJS is not loaded here, return the noop HammerInstance. This is necessary to\n      // ensure that omitting HammerJS completely will not cause any errors while *also* supporting\n      // the lazy-loading of HammerJS via the HAMMER_LOADER token introduced in Angular 6.1.\n      // Because we can't depend on HAMMER_LOADER's existance until 7.0, we have to always set\n      // `this.events` to the set we support, instead of conditionally setting it to `[]` if\n      // `HAMMER_LOADER` is present (and then throwing an Error here if `window.Hammer` is\n      // undefined).\n      // @breaking-change 8.0.0\n      return noopHammerInstance;\n    }\n\n    const mc = new hammer(element, this._hammerOptions || undefined);\n\n    // Default Hammer Recognizers.\n    const pan = new hammer.Pan();\n    const swipe = new hammer.Swipe();\n    const press = new hammer.Press();\n\n    // Notice that a HammerJS recognizer can only depend on one other recognizer once.\n    // Otherwise the previous `recognizeWith` will be dropped.\n    // TODO: Confirm threshold numbers with Material Design UX Team\n    const slide = this._createRecognizer(pan, {event: 'slide', threshold: 0}, swipe);\n    const longpress = this._createRecognizer(press, {event: 'longpress', time: 500});\n\n    // Overwrite the default `pan` event to use the swipe event.\n    pan.recognizeWith(swipe);\n\n    // Since the slide event threshold is set to zero, the slide recognizer can fire and\n    // accidentally reset the longpress recognizer. In order to make sure that the two\n    // recognizers can run simultaneously but don't affect each other, we allow the slide\n    // recognizer to recognize while a longpress is being processed.\n    // See: https://github.com/hammerjs/hammer.js/blob/master/src/manager.js#L123-L124\n    longpress.recognizeWith(slide);\n\n    // Add customized gestures to Hammer manager\n    mc.add([swipe, press, pan, slide, longpress]);\n\n    return mc as HammerInstance;\n  }\n\n  /** Creates a new recognizer, without affecting the default recognizers of HammerJS */\n  private _createRecognizer(base: Recognizer, options: any, ...inheritances: Recognizer[]) {\n    let recognizer = new (base.constructor as RecognizerStatic)(options);\n\n    inheritances.push(base);\n    inheritances.forEach(item => recognizer.recognizeWith(item));\n\n    return recognizer;\n  }\n\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {RippleConfig, RippleRenderer} from './ripple-renderer';\n\n/** Possible states for a ripple element. */\nexport enum RippleState {\n  FADING_IN, VISIBLE, FADING_OUT, HIDDEN\n}\n\n/**\n * Reference to a previously launched ripple element.\n */\nexport class RippleRef {\n\n  /** Current state of the ripple. */\n  state: RippleState = RippleState.HIDDEN;\n\n  constructor(\n    private _renderer: RippleRenderer,\n    /** Reference to the ripple HTML element. */\n    public element: HTMLElement,\n    /** Ripple configuration used for the ripple. */\n    public config: RippleConfig) {\n  }\n\n  /** Fades out the ripple element. */\n  fadeOut() {\n    this._renderer.fadeOutRipple(this);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Platform} from '@angular/cdk/platform';\nimport {\n  Directive,\n  ElementRef,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  OnDestroy,\n  OnInit,\n  Optional,\n} from '@angular/core';\nimport {RippleRef} from './ripple-ref';\nimport {RippleAnimationConfig, RippleConfig, RippleRenderer, RippleTarget} from './ripple-renderer';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\n\n/** Configurable options for `matRipple`. */\nexport interface RippleGlobalOptions {\n  /**\n   * Whether ripples should be disabled. Ripples can be still launched manually by using\n   * the `launch()` method. Therefore focus indicators will still show up.\n   */\n  disabled?: boolean;\n\n  /**\n   * Configuration for the animation duration of the ripples. There are two phases with different\n   * durations for the ripples. The animation durations will be overwritten if the\n   * `NoopAnimationsModule` is being used.\n   */\n  animation?: RippleAnimationConfig;\n\n  /**\n   * Whether ripples should start fading out immediately after the mouse our touch is released. By\n   * default, ripples will wait for the enter animation to complete and for mouse or touch release.\n   */\n  terminateOnPointerUp?: boolean;\n}\n\n/** Injection token that can be used to specify the global ripple options. */\nexport const MAT_RIPPLE_GLOBAL_OPTIONS =\n    new InjectionToken<RippleGlobalOptions>('mat-ripple-global-options');\n\n@Directive({\n  selector: '[mat-ripple], [matRipple]',\n  exportAs: 'matRipple',\n  host: {\n    'class': 'mat-ripple',\n    '[class.mat-ripple-unbounded]': 'unbounded'\n  }\n})\nexport class MatRipple implements OnInit, OnDestroy, RippleTarget {\n\n  /** Custom color for all ripples. */\n  @Input('matRippleColor') color: string;\n\n  /** Whether the ripples should be visible outside the component's bounds. */\n  @Input('matRippleUnbounded') unbounded: boolean;\n\n  /**\n   * Whether the ripple always originates from the center of the host element's bounds, rather\n   * than originating from the location of the click event.\n   */\n  @Input('matRippleCentered') centered: boolean;\n\n  /**\n   * If set, the radius in pixels of foreground ripples when fully expanded. If unset, the radius\n   * will be the distance from the center of the ripple to the furthest corner of the host element's\n   * bounding rectangle.\n   */\n  @Input('matRippleRadius') radius: number = 0;\n\n  /**\n   * Configuration for the ripple animation. Allows modifying the enter and exit animation\n   * duration of the ripples. The animation durations will be overwritten if the\n   * `NoopAnimationsModule` is being used.\n   */\n  @Input('matRippleAnimation') animation: RippleAnimationConfig;\n\n  /**\n   * Whether click events will not trigger the ripple. Ripples can be still launched manually\n   * by using the `launch()` method.\n   */\n  @Input('matRippleDisabled')\n  get disabled() { return this._disabled; }\n  set disabled(value: boolean) {\n    this._disabled = value;\n    this._setupTriggerEventsIfEnabled();\n  }\n  private _disabled: boolean = false;\n\n  /**\n   * The element that triggers the ripple when click events are received.\n   * Defaults to the directive's host element.\n   */\n  @Input('matRippleTrigger')\n  get trigger() { return this._trigger || this._elementRef.nativeElement; }\n  set trigger(trigger: HTMLElement) {\n    this._trigger = trigger;\n    this._setupTriggerEventsIfEnabled();\n  }\n  private _trigger: HTMLElement;\n\n  /** Renderer for the ripple DOM manipulations. */\n  private _rippleRenderer: RippleRenderer;\n\n  /** Options that are set globally for all ripples. */\n  private _globalOptions: RippleGlobalOptions;\n\n  /** Whether ripple directive is initialized and the input bindings are set. */\n  private _isInitialized: boolean = false;\n\n  constructor(private _elementRef: ElementRef<HTMLElement>,\n              ngZone: NgZone,\n              platform: Platform,\n              @Optional() @Inject(MAT_RIPPLE_GLOBAL_OPTIONS) globalOptions: RippleGlobalOptions,\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) animationMode?: string) {\n\n    this._globalOptions = globalOptions || {};\n    this._rippleRenderer = new RippleRenderer(this, ngZone, _elementRef, platform);\n\n    if (animationMode === 'NoopAnimations') {\n      this._globalOptions.animation = {enterDuration: 0, exitDuration: 0};\n    }\n  }\n\n  ngOnInit() {\n    this._isInitialized = true;\n    this._setupTriggerEventsIfEnabled();\n  }\n\n  ngOnDestroy() {\n    this._rippleRenderer._removeTriggerEvents();\n  }\n\n  /** Fades out all currently showing ripple elements. */\n  fadeOutAll() {\n    this._rippleRenderer.fadeOutAll();\n  }\n\n  /**\n   * Ripple configuration from the directive's input values.\n   * @docs-private Implemented as part of RippleTarget\n   */\n  get rippleConfig(): RippleConfig {\n    return {\n      centered: this.centered,\n      radius: this.radius,\n      color: this.color,\n      animation: {...this._globalOptions.animation, ...this.animation},\n      terminateOnPointerUp: this._globalOptions.terminateOnPointerUp,\n    };\n  }\n\n  /**\n   * Whether ripples on pointer-down are disabled or not.\n   * @docs-private Implemented as part of RippleTarget\n   */\n  get rippleDisabled(): boolean {\n    return this.disabled || !!this._globalOptions.disabled;\n  }\n\n  /** Sets up the the trigger event listeners if ripples are enabled. */\n  private _setupTriggerEventsIfEnabled() {\n    if (!this.disabled && this._isInitialized) {\n      this._rippleRenderer.setupTriggerEvents(this.trigger);\n    }\n  }\n\n  /**\n   * Launches a manual ripple using the specified ripple configuration.\n   * @param config Configuration for the manual ripple.\n   */\n  launch(config: RippleConfig): RippleRef;\n\n  /**\n   * Launches a manual ripple at the specified coordinates within the element.\n   * @param x Coordinate within the element, along the X axis at which to fade-in the ripple.\n   * @param y Coordinate within the element, along the Y axis at which to fade-in the ripple.\n   * @param config Optional ripple configuration for the manual ripple.\n   */\n  launch(x: number, y: number, config?: RippleConfig): RippleRef;\n\n  /** Launches a manual ripple at the specified coordinated or just by the ripple config. */\n  launch(configOrX: number | RippleConfig, y: number = 0, config?: RippleConfig): RippleRef {\n    if (typeof configOrX === 'number') {\n      return this._rippleRenderer.fadeInRipple(configOrX, y, {...this.rippleConfig, ...config});\n    } else {\n      return this._rippleRenderer.fadeInRipple(0, 0, {...this.rippleConfig, ...configOrX});\n    }\n  }\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {PlatformModule} from '@angular/cdk/platform';\nimport {MatCommonModule} from '../common-behaviors/common-module';\nimport {MatRipple} from './ripple';\n\nexport * from './ripple';\nexport * from './ripple-ref';\nexport * from './ripple-renderer';\n\n@NgModule({\n  imports: [MatCommonModule, PlatformModule],\n  exports: [MatRipple, MatCommonModule],\n  declarations: [MatRipple],\n})\nexport class MatRippleModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ViewEncapsulation,\n  Input,\n  ChangeDetectionStrategy,\n  Inject,\n  Optional,\n} from '@angular/core';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\n\n/**\n * Possible states for a pseudo checkbox.\n * @docs-private\n */\nexport type MatPseudoCheckboxState = 'unchecked' | 'checked' | 'indeterminate';\n\n/**\n * Component that shows a simplified checkbox without including any kind of \"real\" checkbox.\n * Meant to be used when the checkbox is purely decorative and a large number of them will be\n * included, such as for the options in a multi-select. Uses no SVGs or complex animations.\n * Note that theming is meant to be handled by the parent element, e.g.\n * `mat-primary .mat-pseudo-checkbox`.\n *\n * Note that this component will be completely invisible to screen-reader users. This is *not*\n * interchangeable with `<mat-checkbox>` and should *not* be used if the user would directly\n * interact with the checkbox. The pseudo-checkbox should only be used as an implementation detail\n * of more complex components that appropriately handle selected / checked state.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  selector: 'mat-pseudo-checkbox',\n  styleUrls: ['pseudo-checkbox.css'],\n  template: '',\n  host: {\n    'class': 'mat-pseudo-checkbox',\n    '[class.mat-pseudo-checkbox-indeterminate]': 'state === \"indeterminate\"',\n    '[class.mat-pseudo-checkbox-checked]': 'state === \"checked\"',\n    '[class.mat-pseudo-checkbox-disabled]': 'disabled',\n    '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"',\n  },\n})\nexport class MatPseudoCheckbox {\n  /** Display state of the checkbox. */\n  @Input() state: MatPseudoCheckboxState = 'unchecked';\n\n  /** Whether the checkbox is disabled. */\n  @Input() disabled: boolean = false;\n\n  constructor(@Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode?: string) { }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatPseudoCheckbox} from './pseudo-checkbox/pseudo-checkbox';\n\n\n@NgModule({\n  exports: [MatPseudoCheckbox],\n  declarations: [MatPseudoCheckbox]\n})\nexport class MatPseudoCheckboxModule { }\n\n\nexport * from './pseudo-checkbox/pseudo-checkbox';\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ChangeDetectionStrategy, Component, Input, ViewEncapsulation} from '@angular/core';\nimport {CanDisable, CanDisableCtor, mixinDisabled} from '../common-behaviors/disabled';\n\n\n// Boilerplate for applying mixins to MatOptgroup.\n/** @docs-private */\nexport class MatOptgroupBase { }\nexport const _MatOptgroupMixinBase: CanDisableCtor & typeof MatOptgroupBase =\n    mixinDisabled(MatOptgroupBase);\n\n// Counter for unique group ids.\nlet _uniqueOptgroupIdCounter = 0;\n\n/**\n * Component that is used to group instances of `mat-option`.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-optgroup',\n  exportAs: 'matOptgroup',\n  templateUrl: 'optgroup.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  inputs: ['disabled'],\n  styleUrls: ['optgroup.css'],\n  host: {\n    'class': 'mat-optgroup',\n    'role': 'group',\n    '[class.mat-optgroup-disabled]': 'disabled',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.aria-labelledby]': '_labelId',\n  }\n})\nexport class MatOptgroup extends _MatOptgroupMixinBase implements CanDisable {\n  /** Label for the option group. */\n  @Input() label: string;\n\n  /** Unique id for the underlying label. */\n  _labelId: string = `mat-optgroup-label-${_uniqueOptgroupIdCounter++}`;\n}\n"],"names":["encapsulation","ViewEncapsulation","None","changeDetection","ChangeDetectionStrategy","OnPush","providers","provide","CdkTree","useExisting","MatTree","propDecorators","_this","recursive","tslib_1.__extends","MatTreeNodeToggle","_super","type","Directive","args","selector","host","(click)","CdkTreeNodeToggle","Input","MAT_TREE_DIRECTIVES","MatNestedTreeNode","MatTreeNodeDef","MatTreeNodePadding","MatTreeNode","MatTreeNodeOutlet","NgModule","imports","CdkTreeModule","CommonModule","MatCommonModule","exports","declarations","MatTreeModule","MatTreeFlattener","transformFunction","getLevel","isExpandable","getChildren","this","prototype","_flattenNode","node","level","resultNodes","parentMap","flatNode","push","childrenNodes","Array","isArray","_flattenChildren","pipe","take","subscribe","children","forEach","child","index","childParentMap","slice","length","flattenNodes","structuredData","expandFlattenedNodes","nodes","treeControl","results","currentExpand","expand","i","isExpanded","MatTreeFlatDataSource","treeFlattener","initialData","call","_flattenedData","BehaviorSubject","_expandedData","_data","Object","defineProperty","value","next","data","dataNodes","connect","collectionViewer","changes","viewChange","expansionModel","onChange","merge","apply","map","disconnect","DataSource","MatTreeNestedDataSource","VERSION","Version","SELECT_PANEL_PADDING_X","_dir","_dirChangeSubscription","Subscription","EMPTY","_translateTabComplete","Subject","_onCentering","EventEmitter","_beforeCentering","_afterLeavingCenter","_onCentered","changeDetectorRef","change","dir","_computePositionAnimationState","markForCheck","distinctUntilChanged","x","y","fromState","toState","event","_isCenterPosition","_position","emit","MatTabBody","position","_positionIndex","ngOnInit","origin","_computePositionFromOrigin","ngOnDestroy","unsubscribe","complete","_onTranslateTabStarted","isCentering","_elementRef","nativeElement","clientHeight","_getLayoutDirection","Component","template","styles","animations","matTabsAnimations","translateTab","class","ChangeDetectorRef","Output","_portalHost","ViewChild","PortalHostDirective","_content","MatTabLabelWrapperBase","_MatTabLabelWrapperMixinBase","mixinDisabled","MatTabLabelWrapper","elementRef","focus","getOffsetLeft","offsetLeft","getOffsetWidth","offsetWidth","inputs","[class.mat-tab-disabled]","[attr.aria-disabled]","ElementRef","MatTabHeaderBase","_MatTabHeaderMixinBase","mixinDisableRipple","MatTabHeader","_changeDetectorRef","_viewportRuler","_ngZone","_scrollDistance","_selectedIndexChanged","_destroyed","_showPaginationControls","_disableScrollAfter","_disableScrollBefore","_selectedIndex","selectFocusedIndex","indexFocused","coerceNumberProperty","_keyManager","updateActiveItemIndex","ngAfterContentChecked","_tabLabelCount","_labelWrappers","_updatePagination","_scrollToLabel","_checkScrollingControls","_alignInkBarToSelectedTab","_scrollDistanceChanged","_updateTabScrollPosition","_handleKeydown","keyCode","HOME","setFirstItemActive","preventDefault","END","setLastItemActive","ENTER","SPACE","focusIndex","onKeydown","ngAfterContentInit","dirChange","observableOf","resize","realign","FocusKeyManager","withHorizontalOrientation","withWrap","updateActiveItem","requestAnimationFrame","takeUntil","newFocusIndex","_setTabFocus","_onContentChanges","zoneCallback","run","_checkPaginationEnabled","_isValidIndex","setActiveItem","tab","toArray","disabled","tabIndex","containerEl","_tabListContainer","scrollLeft","scrollWidth","scrollDistance","translateX","_tabList","style","transform","v","Math","max","min","_getMaxScrollDistance","_scrollHeader","scrollDir","viewLength","labelIndex","selectedLabel","labelBeforePos","labelAfterPos","beforeVisiblePos","afterVisiblePos","isEnabled","selectedLabelWrapper","selectedIndex","_inkBar","alignToElement","[class.mat-tab-header-pagination-controls-enabled]","[class.mat-tab-header-rtl]","ViewportRuler","Directionality","decorators","Optional","NgZone","nextId","MatTabChangeEvent","MatTabGroupBase","_MatTabGroupMixinBase","mixinColor","MatTabGroup","_indexToSelect","_tabBodyWrapperHeight","_tabsSubscription","_tabLabelSubscription","_dynamicHeight","headerPosition","selectedIndexChange","focusChange","animationDone","selectedTabChange","_groupId","coerceBooleanProperty","_backgroundColor","classList","remove","backgroundColor","add","indexToSelect","_clampTabIndex","isFirstRun_1","_createChangeEvent","Promise","resolve","then","_tabs","isActive","_subscribeToTabLabels","tabs","realignInkBar","_tabHeader","_focusChanged","_stateChanges","_getTabLabelId","_getTabContentId","_setTabBodyWrapperHeight","tabHeight","wrapper","_tabBodyWrapper","height","offsetHeight","_removeTabBodyWrapperHeight","_handleClick","tabHeader","_getTabIndex","idx","exportAs","[class.mat-tab-group-dynamic-height]","[class.mat-tab-group-inverted-header]","dynamicHeight","MatTabNavBase","_MatTabNavMixinBase","MatTabNav","_onDestroy","updateActiveLink","element","_activeLinkChanged","runOutsideAngular","_alignInkBar","activeTab","_tabLinks","find","active","_activeLinkElement","show","hide","MatTabLinkBase","_MatTabLinkMixinBase","mixinTabIndex","_tabNavBar","_focusMonitor","_tabLinkRipple","setupTriggerEvents","parseInt","globalOptions","_ripplesGloballyDisabled","terminateOnPointerUp","animation","monitor","get","_isActive","enumerable","configurable","stopMonitoring","MatTabLink","[attr.aria-current]","[attr.tabIndex]","[class.mat-tab-label-active]","Platform","undefined","Inject","MAT_RIPPLE_GLOBAL_OPTIONS","String","Attribute","FocusMonitor","PortalModule","MatRippleModule","ObserversModule","A11yModule","MatTabLabel","MatTab","MatTabContent","MatInkBar","MatTabBodyPortal","MatTabsModule","MatToolbarBase","_MatToolbarMixinBase","MatToolbarRow","MatToolbar","_platform","document","_document","ngAfterViewInit","isDevMode","isBrowser","_checkToolbarMixedModes","_toolbarRows","from","childNodes","filter","contains","nodeType","COMMENT_NODE","some","textContent","trim","throwToolbarMixedModesError","[class.mat-toolbar-multiple-rows]","[class.mat-toolbar-single-row]","DOCUMENT","MatToolbarModule","viewContainer","ViewContainerRef","_MatTreeNodeMixinBase","CdkTreeNode","_MatNestedTreeNodeMixinBase","CdkNestedTreeNode","_tree","role","Number","[attr.aria-expanded]","[attr.aria-level]","[attr.role]","CdkTreeNodeDef","_differs","IterableDiffers","nodeOutlet","ContentChildren","CdkTreeNodePadding","indent","MatStepHeader","errorMessage","iconOverrides","selected","optional","matStepperAnimations","horizontalStepTransition","trigger","state","visibility","transition","animate","verticalStepTransition","MatStepperIcon","templateRef","TemplateRef","name","MatStep","stepper","_errorStateMatcher","stepperOptions","isErrorState","control","form","originalErrorState","customErrorState","invalid","interacted","ErrorStateMatcher","MAT_STEPPER_GLOBAL_OPTIONS","MatStepper","arguments","_icons","_a","_iconOverrides","_steps","_stateChanged","MatHorizontalStepper","[class.mat-stepper-label-position-end]","[class.mat-stepper-label-position-bottom]","aria-orientation","labelPosition","MatVerticalStepper","_orientation","ctorParameters","MatStepperNext","[type]","CdkStepper","CdkStepperNext","MatStepperPrevious","CdkStepperPrevious","MatButtonModule","CdkStepperModule","MatIconModule","MatStepLabel","MAT_STEPPER_INTL_PROVIDER","MatStepperModule","stickyCssClass","MatTable","CDK_TABLE_TEMPLATE","MatCellDef","CdkCellDef","MatHeaderCellDef","CdkHeaderCellDef","MatFooterCellDef","CdkFooterCellDef","MatColumnDef","CdkColumnDef","sticky","stickyEnd","MatHeaderCell","columnDef","cssClassFriendlyName","CdkHeaderCell","MatFooterCell","CdkFooterCell","MatCell","CdkCell","MatHeaderRowDef","CdkHeaderRowDef","MatFooterRowDef","CdkFooterRowDef","MatRowDef","CdkRowDef","MatHeaderRow","CDK_ROW_TEMPLATE","CdkHeaderRow","CdkFooterRow","MatFooterRow","MatRow","CdkRow","EXPORTED_DECLARATIONS","CdkTableModule","MatTableModule","MAX_SAFE_INTEGER","MatTableDataSource","_renderData","_filter","_renderChangesSubscription","sortingDataAccessor","sortHeaderId","_isNumberValue","numberValue","sortData","sort","direction","a","b","valueA","valueB","comparatorResult","filterPredicate","dataStr","keys","reduce","currentTerm","key","toLowerCase","transformedFilter","indexOf","_updateChangeSubscription","_sort","_paginator","paginator","sortChange","initialized","pageChange","page","dataStream","filteredData","combineLatest","_filterData","orderedData","_orderData","paginatedData","_pageData","obj","_updatePaginator","startIndex","pageIndex","pageSize","splice","filteredDataLength","lastPageIndex","ceil","_MAT_INK_BAR_POSITIONER","InjectionToken","providedIn","factory","_MAT_INK_BAR_POSITIONER_FACTORY","_inkBarPositioner","_setStyles","positions","inkBar","left","width","CdkPortal","MatTabBase","_MatTabMixinBase","_viewContainerRef","textLabel","_contentPortal","ngOnChanges","hasOwnProperty","TemplatePortal","_explicitContent","_implicitContent","ariaLabel","ariaLabelledby","minHeight","componentFactoryResolver","viewContainerRef","_host","_centeringSub","_leavingSub","startWith","hasAttached","attach","detach","ComponentFactoryResolver","forwardRef","CdkPortalOutlet","ANIMATION_MODULE_TYPE","MatSlider","step","thumbLabel","tickInterval","displayWith","vertical","input","valueChange","_sliderWrapper","HAMMER_GESTURE_CONFIG","useClass","GestureConfig","MatSliderModule","MatSnackBarRef","containerInstance","_overlayRef","_afterDismissed","_afterOpened","_onAction","_dismissedByAction","onAction","dismiss","_onExit","_finishDismiss","closed","exit","clearTimeout","_durationTimeoutId","dismissWithAction","closeWithAction","_dismissAfter","duration","setTimeout","_open","dispose","dismissedByAction","afterDismissed","asObservable","afterOpened","_onEnter","MAT_SNACK_BAR_DATA","MatSnackBarConfig","politeness","announcementMessage","horizontalPosition","verticalPosition","SimpleSnackBar","snackBarRef","action","matSnackBarAnimations","snackBarState","opacity","MatSnackBarContainer","snackBarConfig","_animationState","_role","attachComponentPortal","portal","_assertNotAttached","_applySnackBarClasses","_portalOutlet","attachTemplatePortal","onAnimationEnd","_completeExit","onEnter_1","enter","detectChanges","onMicrotaskEmpty","panelClasses","panelClass","cssClass","Error","[@state]","(@state.done)","OverlayModule","entryComponents","MatSnackBarModule","MAT_SNACK_BAR_DEFAULT_OPTIONS","MAT_SNACK_BAR_DEFAULT_OPTIONS_FACTORY","MatSnackBar","_overlay","_live","_injector","_breakpointObserver","_parentSnackBar","_defaultConfig","_snackBarRefAtThisLevel","parent","_openedSnackBarRef","openFromComponent","component","config","_attach","openFromTemplate","open","message","_config","tslib_1.__assign","_attachSnackBarContainer","overlayRef","userInjector","injector","PortalInjector","WeakMap","containerPortal","ComponentPortal","containerRef","instance","content","userConfig","_createOverlay","container","$implicit","_createInjector","contentRef","observe","Breakpoints","Handset","detachments","matches","overlayElement","_animateSnackBar","announce","overlayConfig","OverlayConfig","positionStrategy","global","isRtl","isLeft","isRight","right","centerHorizontally","top","bottom","create","Injectable","Overlay","LiveAnnouncer","Injector","BreakpointObserver","SkipSelf","MatSortBase","_MatSortMixinBase","mixinInitialized","sortables","Map","start","_direction","MatSort","getSortInvalidDirectionError","_disableClear","register","sortable","id","getSortHeaderMissingIdError","has","getSortDuplicateSortableIdError","set","deregister","delete","getNextSortDirection","disableClear","sortDirectionCycle","getSortDirectionCycle","nextDirectionIndex","_markInitialized","SORT_ANIMATION_TRANSITION","AnimationDurations","ENTERING","AnimationCurves","STANDARD_CURVE","matSortAnimations","indicator","leftPointer","rightPointer","arrowOpacity","arrowPosition","keyframes","allowChildren","query","animateChild","sortButtonLabel","MatSortHeaderIntl","MAT_SORT_HEADER_INTL_PROVIDER","deps","useFactory","MAT_SORT_HEADER_INTL_PROVIDER_FACTORY","MatSortHeaderBase","_MatSortHeaderMixinBase","MatSortHeader","_intl","_columnDef","_showIndicatorHint","_arrowDirection","_disableViewStateAnimation","getSortHeaderNotContainedWithinSortError","_rerenderSubscription","_isSorted","_updateArrowDirection","_viewState","_setAnimationTransitionState","_setIndicatorHintVisible","visible","_isDisabled","viewState","_getArrowDirectionState","_getArrowViewState","_getAriaSortAttribute","(mouseenter)","(longpress)","(mouseleave)","[attr.aria-sort]","[class.mat-sort-header-disabled]","MatSortModule","CdkStepLabel","optionalLabel","MatStepperIntl","MAT_STEPPER_INTL_PROVIDER_FACTORY","_element","_intlSubscription","_stringLabel","label","_templateLabel","_getHostElement","_getIconContext","_right","opened","mode","_width","_contentMarginChanges","_contentMargins","[class.mat-drawer-container-explicit-backdrop]","MatDrawerContainer","_drawers","MatDrawer","ContentChild","MatDrawerContent","_userContent","autosize","MatSidenavContent","scrollDispatcher","ngZone","[style.margin-left.px]","[style.margin-right.px]","ScrollDispatcher","MatSidenav","_fixedBottomGap","matDrawerAnimations","transformDrawer","[@transform]","(@transform.start)","(@transform.done)","[attr.align]","[class.mat-drawer-end]","[class.mat-drawer-over]","[class.mat-drawer-side]","[class.mat-sidenav-fixed]","[style.top.px]","[style.bottom.px]","fixedInViewport","fixedTopGap","MatSidenavContainer","MatSidenavModule","ScrollingModule","PlatformModule","MAT_SLIDE_TOGGLE_DEFAULT_OPTIONS","disableToggleValue","disableDragValue","nextUniqueId","MAT_SLIDE_TOGGLE_VALUE_ACCESSOR","NG_VALUE_ACCESSOR","MatSlideToggle","multi","MatSlideToggleChange","source","checked","MatSlideToggleBase","_MatSlideToggleMixinBase","defaults","_animationMode","_","onTouched","_uniqueId","_required","_checked","_dragging","toggleChange","dragChange","focusOrigin","_onChangeEvent","stopPropagation","_inputElement","_emitChangeEvent","_onInputClick","writeValue","registerOnChange","fn","registerOnTouched","setDisabledState","isDisabled","focusVia","toggle","_getDragPercentage","distance","percentage","_thumbBarWidth","_previousChecked","_onDragStart","thumbEl","_thumbEl","_thumbBarEl","clientWidth","_onDrag","_dragPercentage","deltaX","dragX","_onDragEnd","newCheckedValue","_onLabelTextChange","[id]","[attr.tabindex]","[class.mat-checked]","[class.mat-slide-toggle-label-before]","[class._mat-animation-noopable]","(focus)","required","MatSlideToggleModule","MAT_SLIDER_VALUE_ACCESSOR","MatSliderChange","MatSliderBase","_MatSliderMixinBase","_invert","_max","_min","_step","_thumbLabel","_tickInterval","_value","_vertical","_percent","_isSliding","_tickIntervalPercent","_sliderDimensions","_controlValueAccessorChangeFn","_calculatePercentage","_roundToDecimal","toString","split","pop","parseFloat","toFixed","_focusHostElement","blur","_blurHostElement","_clamp","invert","percent","_isMinValue","axis","scale","_shouldInvertMouseCoords","_thumbGap","_getDirection","tickSize","backgroundSize","sign","rotate","_invertAxis","_onMouseenter","_getSliderDimensions","_updateTickIntervalPercent","_onMousedown","button","oldValue","_updateValueFromPosition","clientX","clientY","_emitInputEvent","_onSlide","_onSlideStart","center","_valueOnSlideStart","_onSlideEnd","_onFocus","_onBlur","_onKeydown","PAGE_UP","_increment","PAGE_DOWN","LEFT_ARROW","UP_ARROW","RIGHT_ARROW","DOWN_ARROW","_onKeyup","numSteps","pos","offset","size","posComponent","exactValue","_calculateValue","closestValue","round","trackSize","pixelsPerStep","stepsPerTick","pixelsPerTick","getBoundingClientRect","(blur)","(mousedown)","(keydown)","(keyup)","(slide)","(slideend)","(slidestart)","[tabIndex]","[attr.aria-valuemax]","[attr.aria-valuemin]","[attr.aria-valuenow]","[attr.aria-orientation]","[class.mat-slider-disabled]","[class.mat-slider-has-ticks]","[class.mat-slider-horizontal]","[class.mat-slider-axis-inverted]","[class.mat-slider-sliding]","[class.mat-slider-thumb-label-showing]","[class.mat-slider-vertical]","[class.mat-slider-min-value]","[class.mat-slider-hide-last-tick]","MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS","MatProgressSpinner","animationMode","[style.width.px]","[style.height.px]","MatSpinner","MatProgressSpinnerModule","MAT_RADIO_GROUP_CONTROL_VALUE_ACCESSOR","MatRadioGroup","MatRadioChange","MatRadioGroupBase","_MatRadioGroupMixinBase","_changeDetector","_name","_selected","_isInitialized","_labelPosition","_disabled","_updateRadioButtonNames","_markRadiosForCheck","newValue","_updateSelectedRadioFromValue","_checkSelectedRadioButton","_touch","_radios","radio","isAlreadySelected","_markForCheck","MatRadioButton","descendants","MatRadioButtonBase","_MatRadioButtonMixinBase","radioGroup","_radioDispatcher","_removeUniqueSelectionListener","listen","newCheckedState","notify","newDisabledState","_isRippleDisabled","disableRipple","_onInputChange","groupValueChanged","[class.mat-radio-checked]","[class.mat-radio-disabled]","[attr.id]","UniqueSelectionDispatcher","ariaDescribedby","MatRadioModule","box-shadow","MAT_DRAWER_DEFAULT_AUTOSIZE","MAT_DRAWER_DEFAULT_AUTOSIZE_FACTORY","_container","_focusTrapFactory","_doc","_elementFocusedBeforeDrawerWasOpened","_mode","_disableClose","_autoFocus","openedChange","_isFocusTrapEnabled","_focusTrap","_trapFocus","_restoreFocus","close","_opened","onPositionChanged","_modeChanged","focusInitialElementWhenReady","hasMovedFocus","activeEl","activeElement","HTMLElement","_openedVia","enabled","destroy","_animationStarted","_animationEnd","isOpen","openedVia","_enableAnimations","_openedStream","openedStart","_closedStream","closedStart","backdropClick","_doCheckSubject","_autosize","defaultAutosize","_backdropOverride","drawer","_watchDrawerToggle","_watchDrawerPosition","_watchDrawerMode","_isDrawerOpen","_start","_end","_updateContentMargins","debounceTime","ngDoCheck","_setContainerClass","throwMatDuplicatedDrawerError","_left","_closeModalDrawer","disableClose","_canHaveBackdrop","_isShowingBackdrop","_tooltipInstance","_setTooltipClass","_tooltipClass","MatTooltip","_manualListeners","listener","removeEventListener","clear","_ariaDescriber","removeDescription","delay","showDelay","_isTooltipVisible","_showTimeoutId","_hideTimeoutId","_detach","_portal","TooltipComponent","afterHidden","_updateTooltipMessage","hideDelay","isVisible","e","ESCAPE","_handleTouchend","_defaultOptions","touchendHideDelay","strategy","flexibleConnectedTo","withTransformOriginOn","withFlexibleDimensions","withViewportMargin","scrollableAncestors","_scrollDispatcher","getAncestorScrollContainers","withScrollableContainers","positionChanges","scrollableViewProperties","isOverlayClipped","scrollStrategy","_scrollStrategy","_updatePosition","getConfig","_getOrigin","overlay","_getOverlayPosition","withPositions","main","fallback","originPosition","isLtr","originX","originY","getMatTooltipInvalidPositionError","_invertPosition","overlayPosition","overlayX","overlayY","updatePosition","tooltipClass","(touchend)","AriaDescriber","MAT_TOOLTIP_SCROLL_STRATEGY","MAT_TOOLTIP_DEFAULT_OPTIONS","HAMMER_LOADER","_visibility","_closeOnInteraction","_onHide","_isHandset","_animationStart","_animationDone","_handleBodyInteraction","matTooltipAnimations","tooltipState","aria-hidden","MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY_PROVIDER","MatTooltipModule","itemsPerPageLabel","nextPageLabel","previousPageLabel","firstPageLabel","lastPageLabel","getRangeLabel","MatPaginatorIntl","MAT_PAGINATOR_INTL_PROVIDER","MAT_PAGINATOR_INTL_PROVIDER_FACTORY","PageEvent","MatPaginatorBase","_MatPaginatorBase","MatPaginator","_pageIndex","_length","_pageSizeOptions","_hidePageSize","_showFirstLastButtons","_intlChanges","_pageSize","_updateDisplayedPageSizeOptions","p","_initialized","nextPage","hasNextPage","previousPageIndex","_emitPageEvent","previousPage","hasPreviousPage","firstPage","lastPage","getNumberOfPages","maxPageIndex","_changePageSize","floor","pageSizeOptions","_displayedPageSizeOptions","hidePageSize","showFirstLastButtons","MatSelectModule","MatPaginatorModule","MatProgressBarBase","_MatProgressBarMixinBase","MAT_PROGRESS_BAR_LOCATION","MAT_PROGRESS_BAR_LOCATION_FACTORY","progressbarId","MatProgressBar","location","_isNoopAnimation","_bufferValue","animationEnd","_animationEndSubscription","path","getPathname","_rectangleFillValue","clamp","emitAnimationEnd","_primaryTransform","_bufferTransform","bufferValue","fromEvent","_primaryValueBar","target","aria-valuemin","aria-valuemax","[attr.mode]","MatProgressBarModule","BASE_SIZE","MatProgressSpinnerBase","_MatProgressSpinnerMixinBase","MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS_FACTORY","INDETERMINATE_ANIMATION_TEMPLATE","platform","_fallbackAnimation","_noopAnimations","_forceAnimations","_diameter","EDGE","TRIDENT","diameter","strokeWidth","animationClass","diameters","_attachStyleNode","_strokeWidth","viewBox","_circleRadius","PI","_strokeCircumference","styleTag","createElement","head","appendChild","sheet","insertRule","_getAnimationText","replace","Set","MatMenuTrigger","triggersSubmenu","_menuItemInstance","_parentMenu","toggleMenu","_menuOpen","closeMenu","openMenu","_checkMenu","_setPosition","_getPortal","menu","lazyContent","menuData","_closeSubscription","_menuClosingActions","_initMenu","MatMenu","_startAnimation","_destroyMenu","menuOpen","_resetAnimation","_attached","_resetMenu","parentMenu","_setMenuElevation","_setIsMenuOpen","focusFirstItem","_openedBy","setElevation","depth","menuOpened","menuClosed","_highlighted","throwMatMenuMissingError","_getOverlayConfig","_subscribeToPositions","keydownEvents","withLockedPosition","hasBackdrop","backdropClass","setPositionClasses","posX","connectionPair","posY","xPosition","originFallbackX","_b","yPosition","overlayFallbackY","_c","originFallbackY","_d","overlayFallbackX","offsetY","overlapTrigger","_cleanUpSubscriptions","_hoverSubscription","backdrop","parentClose","hover","_hovered","_handleMousedown","isFakeMousedownFromScreenReader","_handleHover","asapScheduler","_isAnimating","aria-haspopup","MAT_MENU_SCROLL_STRATEGY","MatMenuItem","Self","_deprecatedMatMenuTriggerFor","onMenuOpen","onMenuClose","MatMenuContent","MAT_MENU_SCROLL_STRATEGY_FACTORY_PROVIDER","MatMenuModule","matSelectAnimations","transformPanel","minWidth","fadeInContent","SELECT_MULTIPLE_PANEL_PADDING_X","MAT_SELECT_SCROLL_STRATEGY","MAT_SELECT_SCROLL_STRATEGY_PROVIDER","MAT_SELECT_SCROLL_STRATEGY_PROVIDER_FACTORY","MatSelectChange","MatSelectBase","_defaultErrorStateMatcher","_parentForm","_parentFormGroup","ngControl","_MatSelectMixinBase","mixinErrorState","MatSelectTrigger","MatSelect","_parentFormField","scrollStrategyFactory","_panelOpen","_scrollTop","_multiple","_compareWith","o1","o2","_uid","_destroy","_triggerFontSize","_onChange","_onTouched","_optionIds","_transformOrigin","_panelDoneAnimatingStream","_offsetY","_positions","_disableOptionCentering","_focused","controlType","optionSelectionChanges","defer","options","option","onSelectionChange","onStable","switchMap","o","selectionChange","valueAccessor","_scrollStrategyFactory","_placeholder","stateChanges","_selectionModel","getMatSelectDynamicMultipleError","getMatSelectNonFunctionValueError","_initializeSelection","_id","SelectionModel","multiple","panelOpen","overlayDir","offsetX","_initKeyManager","added","select","removed","deselect","_resetOptions","updateErrorState","_triggerRect","getComputedStyle","fontSize","_calculateOverlayPosition","_highlightCorrectOption","_isRtl","_setSelectionByValue","empty","selectedOptions","viewValue","reverse","join","_handleOpenKeydown","_handleClosedKeydown","isArrowKey","isOpenKey","manager","altKey","activeItem","A","ctrlKey","hasDeselectedOptions_1","opt","previouslyFocusedIndex","activeItemIndex","shiftKey","_selectViaInteraction","_onAttached","positionChange","_setPseudoCheckboxPaddingSize","_calculateOverlayOffsetX","panel","scrollTop","_getPanelTheme","color","pseudoCheckbox","querySelector","isEmpty","getMatSelectNonArrayValueError","currentValue","_selectValue","_sortValues","correspondingOption","error","console","warn","ActiveDescendantKeyManager","withTypeAhead","withVerticalOrientation","withAllowedModifierKeys","tabOut","_scrollActiveOptionIntoView","changedOrDestroyed","_onSelect","isUserInput","_setOptionIds","wasSelected","isSelected","_propagateChanges","options_1","sortComparator","fallbackValue","valueToEmit","activeOptionIndex","labelCount","_countGroupLabelsBeforeOption","optionGroups","_getOptionScrollPosition","_getItemHeight","_getOptionIndex","result","current","itemHeight","items","_getItemCount","panelHeight","scrollContainerHeight","maxScroll","selectedOptionOffset","scrollBuffer","_calculateOverlayScroll","_calculateOverlayOffsetY","_checkOverlayWithinViewport","optionOffsetFromScrollTop","halfOptionHeight","optimalScrollPosition","_getAriaLabel","placeholder","_getAriaLabelledby","_hasFloatingLabel","_labelId","_getAriaActiveDescendant","overlayRect","viewportSize","getViewportSize","paddingWidth","first","group","leftOverflow","rightOverflow","optionOffsetFromPanelTop","optionHeightAdjustment","maxOptionsDisplayed","firstDisplayedIndex","selectedDisplayIndex","partialItemHeight","topSpaceAvailable","bottomSpaceAvailable","panelHeightTop","abs","totalPanelHeight","panelHeightBottom","_adjustPanelUp","_adjustPanelDown","_getOriginBasedOnOption","distanceBelowViewport","distanceAboveViewport","setDescribedByIds","ids","_ariaDescribedby","onContainerClick","[attr.aria-label]","[attr.aria-labelledby]","[attr.aria-required]","[attr.aria-invalid]","[attr.aria-owns]","[attr.aria-multiselectable]","[attr.aria-describedby]","[attr.aria-activedescendant]","[class.mat-select-disabled]","[class.mat-select-invalid]","[class.mat-select-required]","[class.mat-select-empty]","MatFormFieldControl","MAT_OPTION_PARENT_COMPONENT","NgForm","FormGroupDirective","MatFormField","NgControl","CdkConnectedOverlay","MatOption","MatOptgroup","customTrigger","disableOptionCentering","compareWith","errorStateMatcher","MatOptionModule","MatFormFieldModule","SCROLL_THROTTLE_MS","MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY","MAT_TOOLTIP_DEFAULT_OPTIONS_FACTORY","hammerLoader","_message","elementStyle","hasGestures","window","Hammer","IOS","ANDROID","addEventListener","nodeName","webkitUserSelect","userSelect","msUserSelect","draggable","webkitUserDrag","describe","MatSelectionList","MatListOption","_lines","MatLine","_text","checkboxPosition","skipPredicate","_tempValues","_setOptionsFromValues","_modelChanges","_i","item","optionIndex","previousFocusIndex","_toggleFocusedOption","selectAll","deselectAll","_getSelectedOptionValues","values","_setSelected","focusedOption","focusedIndex","hasChanged","_reportValueChange","aria-multiselectable","MAT_SELECTION_LIST_VALUE_ACCESSOR","_MatSelectionListMixinBase","MatLineModule","MatPseudoCheckboxModule","MatList","MatNavList","MatListItem","MatListAvatarCssMatStyler","MatListIconCssMatStyler","MatListSubheaderCssMatStyler","MatDividerModule","MatListModule","_template","_componentFactoryResolver","_appRef","context","_outlet","DomPortalOutlet","insertBefore","outletElement","isAttached","ApplicationRef","matMenuAnimations","transformMenu","fadeInItems","MAT_MENU_PANEL","MatMenuItemBase","_MatMenuItemMixinBase","_triggersSubmenu","addItem","removeItem","_checkDisabled","_handleMouseEnter","getLabel","textNodeType","TEXT_NODE","output","length_1","[class.mat-menu-item-highlighted]","[class.mat-menu-item-submenu-trigger]","[attr.disabled]","MAT_MENU_DEFAULT_OPTIONS","MAT_MENU_DEFAULT_OPTIONS_FACTORY","_xPosition","_yPosition","_items","_itemChanges","_tabSubscription","_classList","_panelAnimationState","_overlapTrigger","_hasBackdrop","throwMatMenuInvalidPositionX","throwMatMenuInvalidPositionY","classes","className","setFocusOrigin","resetActiveItem","newElevation","customElevation","c","startsWith","_previousElevation","_onAnimationDone","MAT_MENU_SCROLL_STRATEGY_FACTORY","passiveEventListenerOptions","normalizePassiveListenerOptions","passive","_menuCloseSubscription","_handleTouchStart","_menu","reason","_isInteractiveList","navList","list","_getListType","_list","hasAttribute","setAttribute","setLines","[class.mat-list-item-avatar]","[class.mat-list-item-with-avatar]","_avatar","_icon","MatSelectionListBase","MatListOptionBase","_MatListOptionMixinBase","MatSelectionListChange","selectionList","_hasFocus","hadFocus","newActiveItem","_removeOptionFromList","_handleFocus","_setFocusedOption","_handleBlur","tabindex","[class.mat-list-item-disabled]","[attr.aria-selected]","MatGridTile","MatGridTileText","MatGridAvatarCssMatStyler","MatGridTileHeaderCssMatStyler","MatGridTileFooterCssMatStyler","TileCoordinator","columnIndex","rowIndex","lastRowMax","tracker","rowCount","update","numColumns","tiles","fill","tile","_trackTile","gapStartIndex","_findMatchingGap","colspan","_markTilePosition","TilePosition","tileCols","gapEndIndex","_nextRow","_findGapEndIndex","rowspan","row","col","cssCalcAllowedValue","TileStyler","_rows","_rowspan","init","gutterSize","cols","_gutterSize","normalizeUnits","_cols","getBaseTileSize","sizePercent","gutterFraction","getTilePosition","baseSize","calc","getTileSize","span","setStyle","colIndex","percentWidthPerTile","gutterWidthFractionPerTile","setColStyles","setRowStyles","percentWidth","gutterWidth","baseTileWidth","side","_setStyle","getGutterSpan","getTileSpan","tileHeight","getComputedHeight","FixedTileStyler","fixedRowHeight","test","reset","_setListStyle","_tiles","RatioTileStyler","_parseRatio","percentHeightPerTile","rowHeightRatio","baseTileHeight","ratioParts","FitTileStyler","gutterHeightPerTile","MatGridList","_gutter","_rowHeight","_setTileStyler","_checkCols","_checkRowHeight","_layoutTiles","rowHeight","_tileStyler","_tileCoordinator","_gridList","MAT_GRID_LIST","MatGridListModule","SvgIconConfig","svgElement","url","MatIconRegistry","_httpClient","_sanitizer","_svgIconConfigs","_iconSetConfigs","_cachedIconsByUrl","_inProgressUrlFetches","_fontCssClassesByAlias","_defaultFontSetClass","addSvgIcon","iconName","addSvgIconInNamespace","addSvgIconLiteral","literal","addSvgIconLiteralInNamespace","namespace","_addSvgIconConfig","sanitizedLiteral","sanitize","SecurityContext","HTML","getMatIconFailedToSanitizeLiteralError","_createSvgElementForSingleIcon","addSvgIconSet","addSvgIconSetInNamespace","addSvgIconSetLiteral","addSvgIconSetLiteralInNamespace","_addSvgIconSetConfig","_svgElementFromString","registerFontClassAlias","alias","classNameForFontAlias","setDefaultFontSetClass","getDefaultFontSetClass","getSvgIconFromUrl","safeUrl","RESOURCE_URL","getMatIconFailedToSanitizeUrlError","cachedIcon","cloneSvg","_loadSvgIconFromConfig","tap","svg","getNamedSvgIcon","iconKey","_getSvgFromConfig","iconSetConfigs","_getSvgFromIconSetConfigs","observableThrow","getMatIconNameNotFoundError","namedIcon","_extractIconWithNameFromAnySet","iconSetFetchRequests","iconSetConfig","_loadSvgIconSetFromConfig","catchError","err","forkJoin","foundIcon","_extractSvgIconFromSet","_fetchUrl","svgText","responseText","_setSvgAttributes","iconSet","iconSource","iconElement","cloneNode","removeAttribute","_toSvgElement","str","div","innerHTML","ELEMENT_NODE","getMatIconNoHttpProviderError","inProgressFetch","req","responseType","finalize","share","configNamespace","HttpClient","DomSanitizer","ICON_REGISTRY_PROVIDER","ICON_REGISTRY_PROVIDER_FACTORY","MatIconBase","_MatIconMixinBase","MAT_ICON_LOCATION","MAT_ICON_LOCATION_FACTORY","funcIriAttributes","ɵ0","attr","funcIriAttributeSelector","funcIriPattern","MatIcon","_iconRegistry","ariaHidden","_location","_inline","inline","_fontSet","_cleanupFontValue","_fontIcon","_splitIconName","parts","svgIcon","_setSvgElement","log","_clearSvgElement","_usingFontIcon","_updateFontIconClasses","ngAfterViewChecked","cachedElements","_elementsWithExternalReferences","newPath","_previousPath","_prependPathToReferences","styleTags","querySelectorAll","_cacheChildrenWithExternalReferences","layoutElement","childCount","removeChild","elem","fontSetClass","fontSet","_previousFontSetClass","fontIcon","_previousFontIconClass","elements","attrs","elementsWithFuncIri","elementWithReference","getAttribute","match","attributes","[class.mat-icon-inline]","MatListBase","_MatListMixinBase","MatListItemBase","_MatListItemMixinBase","_dateAdapter","createMissingDateImplError","MatDatepicker","_datepickerInput","_getThemePalette","_disabledChange","_inputSubscription","_popupRef","_popupComponentRef","sameDate","_selectedChanged","date","_valueChange","_focusedElementBeforeOpen","touchUi","_openAsDialog","_openAsPopup","openedStream","_dialogRef","_calendarPortal","completeClose","closedStream","_dialog","MatDatepickerContent","afterClosed","componentInstance","datepicker","_setColor","_createPopup","MatDialog","MAT_DATEPICKER_SCROLL_STRATEGY","DateAdapter","calendarHeaderComponent","startAt","yearSelected","monthSelected","MAT_DATEPICKER_VALUE_ACCESSOR","MatDatepickerInput","MAT_DATEPICKER_VALIDATORS","NG_VALIDATORS","MatDatepickerInputEvent","targetElement","_dateFormats","_formField","dateChange","dateInput","_cvaOnChange","_validatorOnChange","_datepickerSubscription","_localeSubscription","_parseValidator","_lastValueValid","matDatepickerParse","text","_minValidator","controlValue","_getValidDateOrNull","deserialize","compareDate","matDatepickerMin","actual","_maxValidator","matDatepickerMax","_filterValidator","_dateFilter","matDatepickerFilter","_validator","Validators","compose","localeChanges","_datepicker","_registerInput","isValid","oldDate","_formatValue","registerOnValidatorChange","validate","getPopupConnectionElementRef","getConnectedOverlayOrigin","isAltDownArrow","readOnly","_onInput","parse","format","display","isDateInstance","MAT_INPUT_VALUE_ACCESSOR","[attr.aria-haspopup]","[attr.min]","[attr.max]","[disabled]","(input)","(change)","MAT_DATE_FORMATS","matDatepicker","MatDatepickerToggleIcon","MatDatepickerToggle","defaultTabIndex","parsedTabIndex","_watchStateChanges","datepickerDisabled","inputDisabled","datepickerToggled","[class.mat-accent]","[class.mat-warn]","_customIcon","_button","MatDialogModule","MatCalendar","MatCalendarBody","MatMonthView","MatYearView","MatMultiYearView","MatCalendarHeader","MatDatepickerIntl","MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY_PROVIDER","MatDatepickerModule","_inset","MatDivider","[class.mat-divider-vertical]","[class.mat-divider-horizontal]","[class.mat-divider-inset]","MAT_ACCORDION","matExpansionAnimations","indicatorRotate","expansionHeaderHeight","params","collapsedHeight","expandedHeight","bodyExpansion","MatExpansionPanelContent","uniqueId","MatExpansionPanel","accordion","_uniqueSelectionDispatcher","_hideToggle","afterExpand","afterCollapse","_inputChanges","_headerId","_bodyAnimationDone","hideToggle","_hasSpacing","expanded","displayMode","_getExpandedState","_lazyContent","_containsFocus","_body","focusedElement","bodyElement","outputs","[class.mat-expanded]","[class.mat-expansion-panel-spacing]","MatExpansionPanelActionRow","MatExpansionPanelHeader","_parentChangeSubscription","accordionHideToggleChange","_handleHeaderFocus","_toggle","_isExpanded","_getPanelId","_showToggle","_keydown","metaKey","_handleHeaderKeydown","[attr.aria-controls]","[@expansionHeight]","MatExpansionPanelDescription","MatExpansionPanelTitle","MatAccordion","_headers","header","CdkAccordion","CdkAccordionModule","MatExpansionModule","_colspan","property","todayValue","selectedValue","labelMinRequiredCells","numCols","activeCell","cellAspectRatio","selectedValueChange","selectedChange","_userSelection","activeDateChange","firstDayOfWeek","getFirstDayOfWeek","narrowWeekdays","getDayOfWeekNames","longWeekdays","weekdays","long","narrow","_weekdays","concat","_activeDate","today","oldActiveDate","validDate","clampDate","minDate","maxDate","_hasSameMonthAndYear","_init","_selectedDate","_getDateInCurrentMonth","_minDate","_maxDate","_dateSelected","selectedYear","getYear","activeDate","selectedMonth","getMonth","selectedDate","createDate","_handleCalendarBodyKeydown","addCalendarDays","getDate","getNumDaysInMonth","addCalendarYears","addCalendarMonths","dateFilter","_focusActiveCell","_todayDate","_monthLabel","getMonthNames","toLocaleUpperCase","firstOfMonth","_firstWeekOffset","getDayOfWeek","_createWeekCells","_matCalendarBody","daysInMonth","dateNames","getDateNames","_weeks","cell","_shouldEnableDate","dateA11yLabel","MatCalendarCell","d1","d2","_selectedYear","_todayYear","activeYear","activeOffset","_years","year","_createCellForYear","_yearSelected","month","yearsPerPage","_getActiveCell","yearName","getYearName","_shouldEnableYear","firstOfYear","_selectedMonth","_getMonthInCurrentYear","_monthSelected","normalizedDate","_todayMonth","_yearLabel","monthNames","_months","_createCellForMonth","monthName","monthYearA11yLabel","_shouldEnableMonth","_isYearAndMonthAfterMaxDate","_isYearAndMonthBeforeMinDate","maxYear","maxMonth","minYear","minMonth","calendar","currentView","monthYearLabel","switchToMultiYearViewLabel","switchToMonthViewLabel","prevMonthLabel","prevYearLabel","multi-year","prevMultiYearLabel","nextMonthLabel","nextYearLabel","nextMultiYearLabel","currentPeriodClicked","previousClicked","nextClicked","previousEnabled","_isSameView","nextEnabled","date1","date2","_moveFocusOnNextTick","_currentView","startView","focusActiveCell","view","_getCurrentViewComponent","monthView","headerComponent","yearView","multiYearView","matDatepickerAnimations","fadeInCalendar","datepickerUid","MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY","MatDatepickerContentBase","_MatDatepickerContentMixinBase","_calendar","[@transformPanel]","[class.mat-datepicker-content-touch]","MatChipList","ariaOrientation","selectable","chips","MatChip","MatChipInput","focused","_addOnBlur","separatorKeyCodes","chipEnd","_chipList","registerInput","_emitChipEnd","_blur","addOnBlur","_focus","_isSeparatorKey","separators","[attr.placeholder]","MAT_CHIPS_DEFAULT_OPTIONS","chipList","CHIP_DECLARATIONS","MatChipRemove","MatChipAvatar","MatChipTrailingIcon","useValue","MatChipsModule","MatDialogConfig","maxWidth","ariaDescribedBy","autoFocus","restoreFocus","closeOnNavigation","animationBody","matDialogAnimations","dialogContainer","slideDialog","MatDialogContainer","_elementFocusedBeforeDialogWasOpened","_state","_animationStateChanged","_ariaLabelledBy","throwMatDialogContentAlreadyAttachedError","_savePreviouslyFocusedElement","toFocus","_onAnimationStart","_startExitAnimation","aria-modal","[@dialogContainer]","(@dialogContainer.start)","(@dialogContainer.done)","MatDialogRef","_containerInstance","_afterClosed","_beforeClosed","phaseName","_result","dialogResult","detachBackdrop","beforeClosed","_getPositionStrategy","centerVertically","updateSize","afterOpen","beforeClose","MAT_DIALOG_DATA","MAT_DIALOG_DEFAULT_OPTIONS","MAT_DIALOG_SCROLL_STRATEGY","MAT_DIALOG_SCROLL_STRATEGY_PROVIDER","MAT_DIALOG_SCROLL_STRATEGY_PROVIDER_FACTORY","_parentDialog","_overlayContainer","_openDialogsAtThisLevel","_afterAllClosedAtThisLevel","_afterOpenedAtThisLevel","_ariaHiddenElements","afterAllClosed","openDialogs","_afterAllClosed","componentOrTemplateRef","_applyConfigDefaults","getDialogById","_attachDialogContainer","dialogRef","_attachDialogContent","_hideNonDialogContentFromAssistiveTechnology","_removeOpenDialog","closeAll","_closeDialogs","dialog","dialogConfig","maxHeight","disposeOnNavigation","injectionTokens","previousValue","overlayContainer","getContainerElement","parentElement","siblings","sibling","dialogs","Location","OverlayContainer","dialogElementUid","MatDialogClose","getClosestDialog","proxiedChange","_matDialogClose","MatDialogTitle","MatDialogContent","MatDialogActions","MatTextareaAutosize","minRows","maxRows","rows","matAutosizeMinRows","matAutosizeMaxRows","matAutosize","matTextareaAutosize","CdkTextareaAutosize","MAT_INPUT_INVALID_TYPES","MatInputBase","_MatInputMixinBase","MatInput","inputValueAccessor","_autofillMonitor","_isServer","_isNativeSelect","autofilled","_type","_readonly","_neverEmptyInputTypes","t","getSupportedInputTypes","_inputValueAccessor","_previousNativeValue","el","selectionStart","selectionEnd","setSelectionRange","_validateType","_isTextarea","isAutofilled","_dirtyCheckNativeValue","isFocused","readonly","getMatInputUnsupportedTypeError","_isNeverEmpty","_isBadInput","validity","badInput","selectElement","[class.mat-input-server]","[required]","[attr.readonly]","AutofillMonitor","TextFieldModule","MatInputModule","calendarLabel","openCalendarLabel","displayValue","_cellClicked","columnChanges","_firstRowOffset","_cellPadding","_cellWidth","_isActiveCell","cellNumber","aria-readonly","MatCheckbox","Init","Checked","Unchecked","Indeterminate","TransitionCheckState","MatCheckboxChange","MatCheckboxBase","_MatCheckboxMixinBase","_clickAction","indeterminateChange","_currentAnimationClass","_currentCheckState","_indeterminate","_calculateRippleRadius","changed","_transitionCheckState","_getAriaChecked","indeterminate","newState","oldState","_getAnimationClassForCheckStateTransition","animationClass_1","_onInteractionEvent","animSuffix","calculatedRippleRadius","rippleWidth","ripple","radius","[class.mat-checkbox-indeterminate]","[class.mat-checkbox-checked]","[class.mat-checkbox-disabled]","[class.mat-checkbox-label-before]","MAT_CHECKBOX_CONTROL_VALUE_ACCESSOR","MAT_CHECKBOX_CLICK_ACTION","MatRipple","MAT_CHECKBOX_REQUIRED_VALIDATOR","MatCheckboxRequiredValidator","[attr.required]","CheckboxRequiredValidator","MatCheckboxModule","MatChipSelectionChange","MatChipBase","_MatChipMixinBase","CHIP_ATTRIBUTE_NAMES","rippleConfig","chipListSelectable","_selectable","_removable","destroyed","_addHostClassName","_chipRipple","RippleRenderer","coercedValue","_dispatchSelectionChange","CHIP_ATTRIBUTE_NAMES_1","tagName","chip","_removeTriggerEvents","selectViaInteraction","toggleSelected","removable","DELETE","BACKSPACE","[class.mat-chip-selected]","[class.mat-chip-with-avatar]","[class.mat-chip-with-trailing-icon]","[class.mat-chip-disabled]","avatar","trailingIcon","removeIcon","_parentChip","MatChipListBase","_MatChipListMixinBase","MatChipListChange","_lastDestroyedChipIndex","_tabIndex","_userTabIndex","_chipInput","_hasFocusedChip","_resetChips","_updateTabIndex","_updateFocusForDestroyedChips","_dropSubscriptions","inputElement","_originatesFromChip","_focusInput","_isInputEmpty","newChipIndex","_clearSelection","correspondingChip","skip","_markAsTouched","_listenToChipsFocus","_listenToChipsSelection","_listenToChipsRemoved","_chipFocusSubscription","_chipBlurSubscription","_chipSelectionSubscription","_chipRemoveSubscription","chipSelectionChanges","chipFocusChanges","chipIndex","chipBlurChanges","chipRemoveChanges","currentElement","[class.mat-chip-list-disabled]","[class.mat-chip-list-invalid]","[class.mat-chip-list-required]","MatButton","stopImmediatePropagation","MatAnchor","MAT_BUTTON_TOGGLE_DEFAULT_OPTIONS","MAT_BUTTON_TOGGLE_GROUP_VALUE_ACCESSOR","MatButtonToggleGroup","MatButtonToggleGroupMultiple","_uniqueIdCounter","MatButtonToggleChange","defaultOptions","appearance","_buttonToggles","_syncButtonToggle","_isSelected","_isPrechecked","_rawValue","[class.mat-button-toggle-vertical]","[class.mat-button-toggle-group-appearance-standard]","MatButtonToggle","MatButtonToggleBase","_MatButtonToggleMixinBase","toggleGroup","_isSingleSelector","buttonToggleGroup","_appearance","_buttonElement","_onButtonClick","newChecked","[class.mat-button-toggle-standalone]","[class.mat-button-toggle-checked]","[class.mat-button-toggle-disabled]","[class.mat-button-toggle-appearance-standard]","MatButtonToggleModule","MatCardContent","MatCardTitle","MatCardSubtitle","align","[class.mat-card-actions-align-end]","MatCardActions","MatCardFooter","MatCardImage","MatCardSmImage","MatCardMdImage","MatCardLgImage","MatCardXlImage","MatCardAvatar","MatCard","MatCardHeader","MatCardTitleGroup","MatCardModule","optionSelected","_uniqueAutocompleteIdCounter","_autoActiveFirstOption","autoActiveFirstOption","MatAutocomplete","_isOpen","showPanel","_setVisibility","_setScrollTop","_getScrollTop","_emitSelectEvent","MatAutocompleteSelectedEvent","MAT_AUTOCOMPLETE_DEFAULT_OPTIONS","panelWidth","MatAutocompleteOrigin","MAT_AUTOCOMPLETE_SCROLL_STRATEGY","MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY_PROVIDER","MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY","MAT_AUTOCOMPLETE_VALUE_ACCESSOR","MatAutocompleteTrigger","_zone","_componentDestroyed","_autocompleteDisabled","_manuallyFloatingLabel","_viewportSubscription","_canOpenOnNextFocus","_closeKeyEventStream","_windowBlurHandler","autocompleteAttribute","_overlayAttached","optionSelections","autocomplete","_destroyPanel","openPanel","_attachOverlay","_floatLabel","closePanel","_resetLabel","_closingActionsSubscription","_getOutsideClickStream","MatOptionSelectionChange","clickTarget","formField","_setTriggerValue","activeOption","_resetActiveItem","prevActiveItem","TAB","_canOpen","_scrollToOption","_handleInput","_previousValue","shouldAnimate","floatLabel","_animateAndLockLabel","newScrollPosition","_subscribeToClosingActions","firstStable","optionChanges","_positionStrategy","reapplyLastPosition","panelClosingActions","_setValueAndClose","toDisplay","inputValue","_control","_clearPreviousSelectedOption","getMatAutocompleteMissingPanelError","_getPanelWidth","wasOpen","_getConnectedElement","withPush","connectedTo","_getHostWidth","[attr.autocomplete]","[attr.aria-autocomplete]","(focusin)","Host","autocompleteDisabled","MatAutocompleteModule","MatBadgeBase","_MatBadgeMixinBase","MatBadge","_renderer","_hasContent","_color","_overlap","val","_updateTextContent","_description","newDescription","_updateHostAriaDescription","_hidden","isAbove","isAfter","description","_badgeElement","_createBadgeElement","rootNode","badgeElement","oldDescription","colorPalette","[class.mat-badge-overlap]","[class.mat-badge-above]","[class.mat-badge-below]","[class.mat-badge-before]","[class.mat-badge-after]","[class.mat-badge-small]","[class.mat-badge-medium]","[class.mat-badge-large]","[class.mat-badge-hidden]","[class.mat-badge-disabled]","Renderer2","overlap","hidden","MatBadgeModule","MAT_BOTTOM_SHEET_DATA","MatBottomSheetConfig","matBottomSheetAnimations","bottomSheetState","COMPLEX","ACCELERATION_CURVE","EXITING","DECELERATION_CURVE","MatBottomSheetContainer","breakpointObserver","bottomSheetConfig","_elementFocusedBeforeOpened","_breakpointSubscription","Medium","Large","XLarge","_toggleClass","isMatched","_validatePortalAttached","_setPanelClass","(@state.start)","FocusTrapFactory","MatBottomSheetModule","MatBottomSheetRef","MAT_BOTTOM_SHEET_DEFAULT_OPTIONS","MatBottomSheet","_parentBottomSheet","_bottomSheetRefAtThisLevel","_openedBottomSheetRef","_attachContainer","ref","bottomSheetRef","scrollStrategies","block","DEFAULT_ROUND_BUTTON_COLOR","BUTTON_HOST_ATTRIBUTES","MatButtonBase","_MatButtonMixinBase","isRoundButton","_hasHostAttributes","isIconButton","BUTTON_HOST_ATTRIBUTES_1","attribute","_active","_emitSelectionChangeEvent","setActiveStyles","setInactiveStyles","_mostRecentViewValue","[class.mat-selected]","[class.mat-option-multiple]","[class.mat-active]","[class.mat-option-disabled]","MAT_LABEL_GLOBAL_OPTIONS","MatError","matFormFieldAnimations","transitionMessages","[class.mat-right]","MatHint","MatLabel","MatPlaceholder","MatPrefix","MatSuffix","MatFormFieldBase","_MatFormFieldMixinBase","MAT_FORM_FIELD_DEFAULT_OPTIONS","labelOptions","_defaults","_outlineGapCalculationNeeded","_showAlwaysAnimate","_subscriptAnimationState","_hintLabel","_hintLabelId","_labelOptions","float","_animationsEnabled","_updateOutlineGapOnStable","_hideRequiredMarker","_processHints","_connectionContainerRef","_validateControlChild","_validatePlaceholders","_syncDescribedByIds","valueChanges","_prefixChildren","_suffixChildren","_hintChildren","_errorChildren","updateOutlineGap","_shouldForward","prop","_hasPlaceholder","_placeholderChild","_hasLabel","_labelChild","_shouldLabelFloat","_canLabelFloat","shouldLabelFloat","_shouldAlwaysFloat","_hideControlPlaceholder","_getDisplayedMessages","errorState","_label","getMatFormFieldPlaceholderConflictError","_validateHints","startHint_1","endHint_1","hint","hintLabel","getMatFormFieldDuplicatedHintError","startHint","endHint","getMatFormFieldMissingControlError","labelEl","startWidth","gapWidth","startEls","gapEls","containerStart","_getStartEnd","labelStart","labelWidth","outlineGapPadding","rect","[class.mat-form-field-appearance-standard]","[class.mat-form-field-appearance-fill]","[class.mat-form-field-appearance-outline]","[class.mat-form-field-appearance-legacy]","[class.mat-form-field-invalid]","[class.mat-form-field-can-float]","[class.mat-form-field-should-float]","[class.mat-form-field-hide-placeholder]","[class.mat-form-field-disabled]","[class.mat-form-field-autofilled]","[class.mat-focused]","[class.ng-untouched]","[class.ng-touched]","[class.ng-pristine]","[class.ng-dirty]","[class.ng-valid]","[class.ng-invalid]","[class.ng-pending]","hideRequiredMarker","underlineRef","_inputContainerRef","MatAutocompleteBase","_MatAutocompleteMixinBase","MAT_AUTOCOMPLETE_DEFAULT_OPTIONS_FACTORY","__extends","d","__","constructor","extendStatics","MATERIAL_SANITY_CHECKS_FACTORY","base","class_1","defaultColor","_disableRipple","matcher","_pendingSubscribers","Observable","subscriber","_notifySubscriber","MAT_DATE_LOCALE_FACTORY","inject","LOCALE_ID","range","valueFunction","valuesArray","lines","setClass","isAdd","enforceStyleRecalculation","getPropertyValue","distanceToFurthestCorner","distX","distY","sqrt","optionsArray","groups","groupCounter","optionOffset","optionHeight","currentScrollPosition","reposition","MAT_DIALOG_SCROLL_STRATEGY_FACTORY","provider","exp","parentRegistry","httpClient","sanitizer","pathname","search","scrollThrottle","parentIntl","sortOrder","setPrototypeOf","__proto__","__assign","assign","s","n","SHARP_CURVE","MATERIAL_SANITY_CHECKS","_sanityChecksEnabled","_hammerLoader","_hasDoneGlobalChecks","_hasCheckedHammer","_window","_areChecksEnabled","_checkDoctypeIsDefined","_checkThemeIsPresent","_isTestEnv","__karma__","jasmine","doctype","body","testElement","computedStyle","_checkHammerIsAvailable","BidiModule","Boolean","MAT_DATE_LOCALE","MAT_DATE_LOCALE_PROVIDER","_localeChanges","setLocale","locale","second","firstValid","secondValid","SUPPORTS_INTL_API","Intl","DEFAULT_MONTH_NAMES","short","DEFAULT_DATE_NAMES","DEFAULT_DAY_OF_WEEK_NAMES","ISO_8601_REGEX","NativeDateAdapter","matDateLocale","useUtcForDisplay","_clampDate","getFullYear","getDay","dtf_1","DateTimeFormat","timeZone","_stripDirectionalityCharacters","_format","Date","dtf_2","day","dtf_3","weekday","dtf","_createDateWithOverflow","clone","displayFormat","setFullYear","toDateString","years","months","newDate","days","toIso8601","getUTCFullYear","_2digit","getUTCMonth","getUTCDate","isNaN","getTime","NaN","UTC","getHours","getMinutes","getSeconds","getMilliseconds","MAT_NATIVE_DATE_FORMATS","NativeDateModule","MatNativeDateModule","ShowOnDirtyErrorStateMatcher","dirty","submitted","touched","MAT_HAMMER_OPTIONS","ANGULAR_MATERIAL_SUPPORTED_HAMMER_GESTURES","ɵ1","noopHammerInstance","on","off","_hammerOptions","commonModule","events","buildHammer","hammer","mc","pan","Pan","swipe","Swipe","press","Press","slide","_createRecognizer","threshold","longpress","time","recognizeWith","inheritances","recognizer","HammerGestureConfig","MatLineSetter","FADING_IN","VISIBLE","FADING_OUT","HIDDEN","RippleState","RippleRef","fadeOut","fadeOutRipple","defaultRippleAnimationConfig","enterDuration","exitDuration","ignoreMouseEventsTimeout","passiveEventOptions","_target","_isPointerDown","_triggerEvents","_activeRipples","onMousedown","isFakeMousedown","isSyntheticEvent","_lastTouchStartEvent","now","rippleDisabled","fadeInRipple","onTouchStart","touches","changedTouches","onPointerUp","persistent","_containerElement","containerRect","_containerRect","animationConfig","centered","transitionDuration","rippleRef","_mostRecentTransientRipple","runTimeoutOutsideZone","isMostRecentTransientRipple","wasActive","rippleEl","fadeOutAll","_triggerElement","_globalOptions","_rippleRenderer","_setupTriggerEventsIfEnabled","_trigger","launch","configOrX","[class.mat-ripple-unbounded]","unbounded","MatPseudoCheckbox","[class.mat-pseudo-checkbox-indeterminate]","[class.mat-pseudo-checkbox-checked]","[class.mat-pseudo-checkbox-disabled]","MatOptgroupBase","_MatOptgroupMixinBase","_uniqueOptgroupIdCounter","[class.mat-optgroup-disabled]","_parent"],"mappings":"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"}