{"version":3,"file":"material.umd.min.js","sources":["../../src/lib/expansion/expansion-animations.ts","../../src/lib/select/select.ts","../../src/lib/tooltip/tooltip.ts","../../src/lib/tabs/tab-header.ts","../../src/lib/tabs/tab-group.ts","../../src/lib/tabs/tab-nav-bar/tab-nav-bar.ts","../../src/lib/tabs/tabs-module.ts","../../src/lib/toolbar/toolbar.ts","../../src/lib/toolbar/toolbar-module.ts","../../src/lib/tree/outlet.ts","../../src/lib/tree/node.ts","../../src/lib/tree/padding.ts","../../src/lib/tree/tree.ts","../../src/lib/tree/toggle.ts","../../src/lib/tree/tree-module.ts","../../src/lib/tree/data-source/flat-data-source.ts","../../src/lib/tree/data-source/nested-data-source.ts","../../src/lib/version.ts","../../src/lib/autocomplete/autocomplete-trigger.ts","../../src/lib/core/testing/month-constants.ts","../../src/lib/stepper/step-header.ts","../../src/lib/stepper/stepper-animations.ts","../../src/lib/stepper/stepper-icon.ts","../../src/lib/stepper/stepper.ts","../../src/lib/stepper/stepper-button.ts","../../src/lib/stepper/stepper-module.ts","../../src/lib/table/table.ts","../../src/lib/table/cell.ts","../../src/lib/table/row.ts","../../src/lib/table/table-module.ts","../../src/lib/table/table-data-source.ts","../../src/lib/tabs/ink-bar.ts","../../src/lib/tabs/tab-label.ts","../../src/lib/tabs/tab-content.ts","../../src/lib/tabs/tab.ts","../../src/lib/tabs/tabs-animations.ts","../../src/lib/tabs/tab-body.ts","../../src/lib/tabs/tab-label-wrapper.ts","../../src/lib/slider/slider.ts","../../src/lib/slider/slider-module.ts","../../src/lib/snack-bar/snack-bar-ref.ts","../../src/lib/snack-bar/snack-bar-config.ts","../../src/lib/snack-bar/snack-bar-animations.ts","../../src/lib/snack-bar/simple-snack-bar.ts","../../src/lib/snack-bar/snack-bar-container.ts","../../src/lib/snack-bar/snack-bar-module.ts","../../src/lib/snack-bar/snack-bar.ts","../../src/lib/sort/sort.ts","../../src/lib/sort/sort-animations.ts","../../src/lib/sort/sort-header-intl.ts","../../src/lib/sort/sort-header.ts","../../src/lib/sort/sort-module.ts","../../src/lib/stepper/step-label.ts","../../src/lib/stepper/stepper-intl.ts","../../src/lib/sidenav/drawer.ts","../../src/lib/sidenav/sidenav.ts","../../src/lib/sidenav/sidenav-module.ts","../../src/lib/slide-toggle/slide-toggle.ts","../../src/lib/slide-toggle/slide-toggle-module.ts","../../src/lib/progress-spinner/progress-spinner.ts","../../src/lib/progress-spinner/progress-spinner-module.ts","../../src/lib/radio/radio.ts","../../src/lib/radio/radio-module.ts","../../src/lib/sidenav/drawer-animations.ts","../../src/lib/select/select-module.ts","../../src/lib/tooltip/tooltip-animations.ts","../../src/lib/tooltip/tooltip-module.ts","../../src/lib/paginator/paginator-intl.ts","../../src/lib/paginator/paginator.ts","../../src/lib/paginator/paginator-module.ts","../../src/lib/progress-bar/progress-bar.ts","../../src/lib/progress-bar/progress-bar-module.ts","../../src/lib/menu/menu-directive.ts","../../src/lib/menu/menu-trigger.ts","../../src/lib/menu/menu-module.ts","../../src/lib/select/select-animations.ts","../../src/lib/list/selection-list.ts","../../src/lib/list/list-module.ts","../../src/lib/menu/menu-content.ts","../../src/lib/menu/menu-animations.ts","../../src/lib/menu/menu-panel.ts","../../src/lib/menu/menu-item.ts","../../src/lib/list/list.ts","../../src/lib/icon/icon-registry.ts","../../src/lib/icon/icon.ts","../../src/lib/icon/icon-module.ts","../../src/lib/datepicker/datepicker-input.ts","../../src/lib/datepicker/datepicker-toggle.ts","../../src/lib/datepicker/datepicker-module.ts","../../src/lib/divider/divider.ts","../../src/lib/divider/divider-module.ts","../../src/lib/expansion/accordion.ts","../../src/lib/expansion/expansion-panel-content.ts","../../src/lib/expansion/expansion-panel.ts","../../src/lib/expansion/expansion-panel-header.ts","../../src/lib/expansion/expansion-module.ts","../../src/lib/grid-list/grid-tile.ts","../../src/lib/grid-list/tile-coordinator.ts","../../src/lib/grid-list/tile-styler.ts","../../src/lib/grid-list/grid-list.ts","../../src/lib/grid-list/grid-list-module.ts","../../src/lib/datepicker/multi-year-view.ts","../../src/lib/datepicker/year-view.ts","../../src/lib/datepicker/calendar.ts","../../src/lib/datepicker/datepicker-animations.ts","../../src/lib/datepicker/datepicker.ts","../../src/lib/dialog/dialog-container.ts","../../src/lib/dialog/dialog-ref.ts","../../src/lib/dialog/dialog.ts","../../src/lib/dialog/dialog-content-directives.ts","../../src/lib/dialog/dialog-module.ts","../../src/lib/input/autosize.ts","../../src/lib/input/input-value-accessor.ts","../../src/lib/input/input.ts","../../src/lib/input/input-module.ts","../../src/lib/datepicker/datepicker-intl.ts","../../src/lib/datepicker/calendar-body.ts","../../src/lib/datepicker/month-view.ts","../../src/lib/checkbox/checkbox.ts","../../src/lib/checkbox/checkbox-required-validator.ts","../../src/lib/checkbox/checkbox-module.ts","../../src/lib/chips/chip.ts","../../src/lib/chips/chip-default-options.ts","../../src/lib/chips/chip-list.ts","../../src/lib/chips/chip-input.ts","../../src/lib/chips/chips-module.ts","../../src/lib/dialog/dialog-config.ts","../../src/lib/dialog/dialog-animations.ts","../../src/lib/button/button.ts","../../src/lib/button/button-module.ts","../../src/lib/button-toggle/button-toggle.ts","../../src/lib/button-toggle/button-toggle-module.ts","../../src/lib/card/card.ts","../../src/lib/card/card-module.ts","../../src/lib/checkbox/checkbox-config.ts","../../src/lib/autocomplete/autocomplete-module.ts","../../src/lib/badge/badge.ts","../../src/lib/badge/badge-module.ts","../../src/lib/bottom-sheet/bottom-sheet-config.ts","../../src/lib/bottom-sheet/bottom-sheet-animations.ts","../../src/lib/bottom-sheet/bottom-sheet-container.ts","../../src/lib/bottom-sheet/bottom-sheet-module.ts","../../src/lib/bottom-sheet/bottom-sheet-ref.ts","../../src/lib/bottom-sheet/bottom-sheet.ts","../../src/lib/core/option/option.ts","../../src/lib/core/option/index.ts","../../src/lib/core/label/label-options.ts","../../src/lib/form-field/error.ts","../../src/lib/form-field/form-field-animations.ts","../../src/lib/form-field/form-field-control.ts","../../src/lib/form-field/hint.ts","../../src/lib/form-field/label.ts","../../src/lib/form-field/placeholder.ts","../../src/lib/form-field/prefix.ts","../../src/lib/form-field/suffix.ts","../../src/lib/form-field/form-field.ts","../../src/lib/form-field/form-field-module.ts","../../src/lib/autocomplete/autocomplete.ts","../../src/lib/autocomplete/autocomplete-origin.ts","../../node_modules/tslib/tslib.es6.js","../../src/lib/core/common-behaviors/common-module.ts","../../src/lib/core/common-behaviors/disabled.ts","../../src/lib/core/common-behaviors/color.ts","../../src/lib/core/common-behaviors/disable-ripple.ts","../../src/lib/core/common-behaviors/tabindex.ts","../../src/lib/core/common-behaviors/error-state.ts","../../src/lib/core/common-behaviors/initialized.ts","../../src/lib/core/datetime/date-adapter.ts","../../src/lib/core/datetime/native-date-adapter.ts","../../src/lib/core/ripple/ripple-renderer.ts","../../src/lib/form-field/form-field-errors.ts","../../src/lib/input/input-errors.ts","../../src/lib/datepicker/datepicker-errors.ts","../../src/lib/grid-list/grid-list-measure.ts","../../src/lib/menu/menu-errors.ts","../../src/lib/select/select-errors.ts","../../src/lib/sort/sort-errors.ts","../../src/lib/core/animation/animation.ts","../../src/lib/core/datetime/date-formats.ts","../../src/lib/core/datetime/native-date-formats.ts","../../src/lib/core/datetime/index.ts","../../src/lib/core/error/error-options.ts","../../src/lib/core/gestures/gesture-config.ts","../../src/lib/core/line/line.ts","../../src/lib/core/ripple/ripple-ref.ts","../../src/lib/core/ripple/ripple.ts","../../src/lib/core/ripple/index.ts","../../src/lib/core/selection/pseudo-checkbox/pseudo-checkbox.ts","../../src/lib/core/selection/index.ts","../../src/lib/core/option/optgroup.ts"],"sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  animateChild,\n  group,\n  state,\n  style,\n  transition,\n  trigger,\n  query,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/** Time and timing curve for expansion panel animations. */\nexport const EXPANSION_PANEL_ANIMATION_TIMING = '225ms cubic-bezier(0.4,0.0,0.2,1)';\n\n/** Animations used by the Material expansion panel. */\nexport const matExpansionAnimations: {\n  readonly indicatorRotate: AnimationTriggerMetadata;\n  readonly expansionHeaderHeight: AnimationTriggerMetadata;\n  readonly bodyExpansion: AnimationTriggerMetadata;\n} = {\n  /** Animation that rotates the indicator arrow. */\n  indicatorRotate: trigger('indicatorRotate', [\n    state('collapsed', style({transform: 'rotate(0deg)'})),\n    state('expanded', style({transform: 'rotate(180deg)'})),\n    transition('expanded <=> collapsed', animate(EXPANSION_PANEL_ANIMATION_TIMING)),\n  ]),\n\n  /** Animation that expands and collapses the panel header height. */\n  expansionHeaderHeight: trigger('expansionHeight', [\n    state('collapsed', style({\n      height: '{{collapsedHeight}}',\n    }), {\n      params: {collapsedHeight: '48px'},\n    }),\n    state('expanded', style({\n      height: '{{expandedHeight}}'\n    }), {\n      params: {expandedHeight: '64px'}\n    }),\n    transition('expanded <=> collapsed', group([\n      query('@indicatorRotate', animateChild(), {optional: true}),\n      animate(EXPANSION_PANEL_ANIMATION_TIMING),\n    ])),\n  ]),\n\n  /** Animation that expands and collapses the panel content. */\n  bodyExpansion: trigger('bodyExpansion', [\n    state('collapsed', style({height: '0px', visibility: 'hidden'})),\n    state('expanded', style({height: '*', visibility: 'visible'})),\n    transition('expanded <=> collapsed', animate(EXPANSION_PANEL_ANIMATION_TIMING)),\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ActiveDescendantKeyManager} from '@angular/cdk/a11y';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {SelectionModel} from '@angular/cdk/collections';\nimport {\n  DOWN_ARROW,\n  END,\n  ENTER,\n  HOME,\n  LEFT_ARROW,\n  RIGHT_ARROW,\n  SPACE,\n  UP_ARROW,\n} from '@angular/cdk/keycodes';\nimport {\n  CdkConnectedOverlay,\n  Overlay,\n  RepositionScrollStrategy,\n  ScrollStrategy,\n  ViewportRuler,\n} from '@angular/cdk/overlay';\nimport {\n  AfterContentInit,\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  ContentChildren,\n  Directive,\n  DoCheck,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  InjectionToken,\n  Input,\n  isDevMode,\n  NgZone,\n  OnChanges,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Output,\n  QueryList,\n  Self,\n  SimpleChanges,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {ControlValueAccessor, FormGroupDirective, NgControl, NgForm} from '@angular/forms';\nimport {\n  _countGroupLabelsBeforeOption,\n  _getOptionScrollPosition,\n  CanDisable,\n  CanDisableRipple,\n  CanUpdateErrorState,\n  ErrorStateMatcher,\n  HasTabIndex,\n  MAT_OPTION_PARENT_COMPONENT,\n  MatOptgroup,\n  MatOption,\n  MatOptionSelectionChange,\n  mixinDisabled,\n  mixinDisableRipple,\n  mixinErrorState,\n  mixinTabIndex,\n} from '@angular/material/core';\nimport {MatFormField, MatFormFieldControl} from '@angular/material/form-field';\nimport {defer, merge, Observable, Subject} from 'rxjs';\nimport {\n  filter,\n  map,\n  startWith,\n  switchMap,\n  take,\n  takeUntil,\n  distinctUntilChanged,\n} from 'rxjs/operators';\nimport {matSelectAnimations} from './select-animations';\nimport {\n  getMatSelectDynamicMultipleError,\n  getMatSelectNonArrayValueError,\n  getMatSelectNonFunctionValueError,\n} from './select-errors';\n\n\nlet nextUniqueId = 0;\n\n/**\n * The following style constants are necessary to save here in order\n * to properly calculate the alignment of the selected option over\n * the trigger element.\n */\n\n/** The max height of the select's overlay panel */\nexport const SELECT_PANEL_MAX_HEIGHT = 256;\n\n/** The panel's padding on the x-axis */\nexport const SELECT_PANEL_PADDING_X = 16;\n\n/** The panel's x axis padding if it is indented (e.g. there is an option group). */\nexport const SELECT_PANEL_INDENT_PADDING_X = SELECT_PANEL_PADDING_X * 2;\n\n/** The height of the select items in `em` units. */\nexport const SELECT_ITEM_HEIGHT_EM = 3;\n\n/**\n * Distance between the panel edge and the option text in\n * multi-selection mode.\n *\n * (SELECT_PANEL_PADDING_X * 1.5) + 20 = 44\n * The padding is multiplied by 1.5 because the checkbox's margin is half the padding.\n * The checkbox width is 20px.\n */\nexport const SELECT_MULTIPLE_PANEL_PADDING_X = SELECT_PANEL_PADDING_X * 1.5 + 20;\n\n/**\n * The select panel will only \"fit\" inside the viewport if it is positioned at\n * this value or more away from the viewport boundary.\n */\nexport const SELECT_PANEL_VIEWPORT_PADDING = 8;\n\n/** Injection token that determines the scroll handling while a select is open. */\nexport const MAT_SELECT_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mat-select-scroll-strategy');\n\n/** @docs-private */\nexport function MAT_SELECT_SCROLL_STRATEGY_PROVIDER_FACTORY(overlay: Overlay):\n    () => RepositionScrollStrategy {\n  return () => overlay.scrollStrategies.reposition();\n}\n\n/** @docs-private */\nexport const MAT_SELECT_SCROLL_STRATEGY_PROVIDER = {\n  provide: MAT_SELECT_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_SELECT_SCROLL_STRATEGY_PROVIDER_FACTORY,\n};\n\n/** Change event object that is emitted when the select value has changed. */\nexport class MatSelectChange {\n  constructor(\n    /** Reference to the select that emitted the change event. */\n    public source: MatSelect,\n    /** Current value of the select that emitted the event. */\n    public value: any) { }\n}\n\n// Boilerplate for applying mixins to MatSelect.\n/** @docs-private */\nexport class MatSelectBase {\n  constructor(public _elementRef: ElementRef,\n              public _defaultErrorStateMatcher: ErrorStateMatcher,\n              public _parentForm: NgForm,\n              public _parentFormGroup: FormGroupDirective,\n              public ngControl: NgControl) {}\n}\nexport const _MatSelectMixinBase = mixinDisableRipple(\n    mixinTabIndex(mixinDisabled(mixinErrorState(MatSelectBase))));\n\n\n/**\n * Allows the user to customize the trigger that is displayed when the select has a value.\n */\n@Directive({\n  selector: 'mat-select-trigger'\n})\nexport class MatSelectTrigger {}\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-select',\n  exportAs: 'matSelect',\n  templateUrl: 'select.html',\n  styleUrls: ['select.css'],\n  inputs: ['disabled', 'disableRipple', 'tabIndex'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {\n    'role': 'listbox',\n    '[attr.id]': 'id',\n    '[attr.tabindex]': 'tabIndex',\n    '[attr.aria-label]': '_ariaLabel',\n    '[attr.aria-labelledby]': 'ariaLabelledby',\n    '[attr.aria-required]': 'required.toString()',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.aria-invalid]': 'errorState',\n    '[attr.aria-owns]': 'panelOpen ? _optionIds : null',\n    '[attr.aria-multiselectable]': 'multiple',\n    '[attr.aria-describedby]': '_ariaDescribedby || null',\n    '[attr.aria-activedescendant]': '_getAriaActiveDescendant()',\n    '[class.mat-select-disabled]': 'disabled',\n    '[class.mat-select-invalid]': 'errorState',\n    '[class.mat-select-required]': 'required',\n    'class': 'mat-select',\n    '(keydown)': '_handleKeydown($event)',\n    '(focus)': '_onFocus()',\n    '(blur)': '_onBlur()',\n  },\n  animations: [\n    matSelectAnimations.transformPanel,\n    matSelectAnimations.fadeInContent\n  ],\n  providers: [\n    {provide: MatFormFieldControl, useExisting: MatSelect},\n    {provide: MAT_OPTION_PARENT_COMPONENT, useExisting: MatSelect}\n  ],\n})\nexport class MatSelect extends _MatSelectMixinBase implements AfterContentInit, OnChanges,\n    OnDestroy, OnInit, DoCheck, ControlValueAccessor, CanDisable, HasTabIndex,\n    MatFormFieldControl<any>, CanUpdateErrorState, CanDisableRipple {\n  /** Whether or not the overlay panel is open. */\n  private _panelOpen = false;\n\n  /** Whether filling out the select is required in the form. */\n  private _required: boolean = false;\n\n  /** The scroll position of the overlay panel, calculated to center the selected option. */\n  private _scrollTop = 0;\n\n  /** The placeholder displayed in the trigger of the select. */\n  private _placeholder: string;\n\n  /** Whether the component is in multiple selection mode. */\n  private _multiple: boolean = false;\n\n  /** Comparison function to specify which option is displayed. Defaults to object equality. */\n  private _compareWith = (o1: any, o2: any) => o1 === o2;\n\n  /** Unique id for this input. */\n  private _uid = `mat-select-${nextUniqueId++}`;\n\n  /** Emits whenever the component is destroyed. */\n  private readonly _destroy = new Subject<void>();\n\n  /** The last measured value for the trigger's client bounding rect. */\n  _triggerRect: ClientRect;\n\n  /** The aria-describedby attribute on the select for improved a11y. */\n  _ariaDescribedby: string;\n\n  /** The cached font-size of the trigger element. */\n  _triggerFontSize = 0;\n\n  /** Deals with the selection logic. */\n  _selectionModel: SelectionModel<MatOption>;\n\n  /** Manages keyboard events for options in the panel. */\n  _keyManager: ActiveDescendantKeyManager<MatOption>;\n\n  /** `View -> model callback called when value changes` */\n  _onChange: (value: any) => void = () => {};\n\n  /** `View -> model callback called when select has been touched` */\n  _onTouched = () => {};\n\n  /** The IDs of child options to be passed to the aria-owns attribute. */\n  _optionIds: string = '';\n\n  /** The value of the select panel's transform-origin property. */\n  _transformOrigin: string = 'top';\n\n  /** Whether the panel's animation is done. */\n  _panelDoneAnimating: boolean = false;\n\n  /** Emits when the panel element is finished transforming in. */\n  _panelDoneAnimatingStream = new Subject<string>();\n\n  /** Strategy that will be used to handle scrolling while the select panel is open. */\n  _scrollStrategy = this._scrollStrategyFactory();\n\n  /**\n   * The y-offset of the overlay panel in relation to the trigger's top start corner.\n   * This must be adjusted to align the selected option text over the trigger text.\n   * when the panel opens. Will change based on the y-position of the selected option.\n   */\n  _offsetY = 0;\n\n  /**\n   * This position config ensures that the top \"start\" corner of the overlay\n   * is aligned with with the top \"start\" of the origin by default (overlapping\n   * the trigger completely). If the panel cannot fit below the trigger, it\n   * will fall back to a position above the trigger.\n   */\n  _positions = [\n    {\n      originX: 'start',\n      originY: 'top',\n      overlayX: 'start',\n      overlayY: 'top',\n    },\n    {\n      originX: 'start',\n      originY: 'bottom',\n      overlayX: 'start',\n      overlayY: 'bottom',\n    },\n  ];\n\n  /** Whether the component is disabling centering of the active option over the trigger. */\n  private _disableOptionCentering: boolean = false;\n\n  /** Whether the select is focused. */\n  focused: boolean = false;\n\n  /** A name for this control that can be used by `mat-form-field`. */\n  controlType = 'mat-select';\n\n  /** Trigger that opens the select. */\n  @ViewChild('trigger') trigger: ElementRef;\n\n  /** Panel containing the select options. */\n  @ViewChild('panel') panel: ElementRef;\n\n  /** Overlay pane containing the options. */\n  @ViewChild(CdkConnectedOverlay) overlayDir: CdkConnectedOverlay;\n\n  /** All of the defined select options. */\n  @ContentChildren(MatOption, { descendants: true }) options: QueryList<MatOption>;\n\n  /** All of the defined groups of options. */\n  @ContentChildren(MatOptgroup) optionGroups: QueryList<MatOptgroup>;\n\n  /** Classes to be passed to the select panel. Supports the same syntax as `ngClass`. */\n  @Input() panelClass: string|string[]|Set<string>|{[key: string]: any};\n\n  /** User-supplied override of the trigger element. */\n  @ContentChild(MatSelectTrigger) customTrigger: MatSelectTrigger;\n\n  /** Placeholder to be shown if no value has been selected. */\n  @Input()\n  get placeholder(): string { return this._placeholder; }\n  set placeholder(value: string) {\n    this._placeholder = value;\n    this.stateChanges.next();\n  }\n\n  /** Whether the component is required. */\n  @Input()\n  get required(): boolean { return this._required; }\n  set required(value: boolean) {\n    this._required = coerceBooleanProperty(value);\n    this.stateChanges.next();\n  }\n\n  /** Whether the user should be allowed to select multiple options. */\n  @Input()\n  get multiple(): boolean { return this._multiple; }\n  set multiple(value: boolean) {\n    if (this._selectionModel) {\n      throw getMatSelectDynamicMultipleError();\n    }\n\n    this._multiple = coerceBooleanProperty(value);\n  }\n\n  /** Whether to center the active option over the trigger. */\n  @Input()\n  get disableOptionCentering(): boolean { return this._disableOptionCentering; }\n  set disableOptionCentering(value: boolean) {\n    this._disableOptionCentering = coerceBooleanProperty(value);\n  }\n\n  /**\n   * A function to compare the option values with the selected values. The first argument\n   * is a value from an option. The second is a value from the selection. A boolean\n   * should be returned.\n   */\n  @Input()\n  get compareWith() { return this._compareWith; }\n  set compareWith(fn: (o1: any, o2: any) => boolean) {\n    if (typeof fn !== 'function') {\n      throw getMatSelectNonFunctionValueError();\n    }\n    this._compareWith = fn;\n    if (this._selectionModel) {\n      // A different comparator means the selection could change.\n      this._initializeSelection();\n    }\n  }\n\n  /** Value of the select control. */\n  @Input()\n  get value(): any { return this._value; }\n  set value(newValue: any) {\n    if (newValue !== this._value) {\n      this.writeValue(newValue);\n      this._value = newValue;\n    }\n  }\n  private _value: any;\n\n  /** Aria label of the select. If not specified, the placeholder will be used as label. */\n  @Input('aria-label') ariaLabel: string = '';\n\n  /** Input that can be used to specify the `aria-labelledby` attribute. */\n  @Input('aria-labelledby') ariaLabelledby: string;\n\n  /** An object used to control when error messages are shown. */\n  @Input() errorStateMatcher: ErrorStateMatcher;\n\n  /** Unique id of the element. */\n  @Input()\n  get id(): string { return this._id; }\n  set id(value: string) {\n    this._id = value || this._uid;\n    this.stateChanges.next();\n  }\n  private _id: string;\n\n  /** Combined stream of all of the child options' change events. */\n  readonly optionSelectionChanges: Observable<MatOptionSelectionChange> = defer(() => {\n    if (this.options) {\n      return merge(...this.options.map(option => option.onSelectionChange));\n    }\n\n    return this._ngZone.onStable\n      .asObservable()\n      .pipe(take(1), switchMap(() => this.optionSelectionChanges));\n  });\n\n   /** Event emitted when the select panel has been toggled. */\n   @Output() readonly openedChange: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n  /** Event emitted when the select has been opened. */\n  @Output('opened') readonly _openedStream: Observable<void> =\n      this.openedChange.pipe(filter(o => o), map(() => {}));\n\n  /** Event emitted when the select has been closed. */\n  @Output('closed') readonly _closedStream: Observable<void> =\n      this.openedChange.pipe(filter(o => !o), map(() => {}));\n\n   /** Event emitted when the selected value has been changed by the user. */\n  @Output() readonly selectionChange: EventEmitter<MatSelectChange> =\n      new EventEmitter<MatSelectChange>();\n\n  /**\n   * Event that emits whenever the raw value of the select changes. This is here primarily\n   * to facilitate the two-way binding for the `value` input.\n   * @docs-private\n   */\n  @Output() readonly valueChange: EventEmitter<any> = new EventEmitter<any>();\n\n  constructor(\n    private _viewportRuler: ViewportRuler,\n    private _changeDetectorRef: ChangeDetectorRef,\n    private _ngZone: NgZone,\n    _defaultErrorStateMatcher: ErrorStateMatcher,\n    elementRef: ElementRef,\n    @Optional() private _dir: Directionality,\n    @Optional() _parentForm: NgForm,\n    @Optional() _parentFormGroup: FormGroupDirective,\n    @Optional() private _parentFormField: MatFormField,\n    @Self() @Optional() public ngControl: NgControl,\n    @Attribute('tabindex') tabIndex: string,\n    @Inject(MAT_SELECT_SCROLL_STRATEGY) private _scrollStrategyFactory) {\n    super(elementRef, _defaultErrorStateMatcher, _parentForm,\n          _parentFormGroup, ngControl);\n\n    if (this.ngControl) {\n      // Note: we provide the value accessor through here, instead of\n      // the `providers` to avoid running into a circular import.\n      this.ngControl.valueAccessor = this;\n    }\n\n    this.tabIndex = parseInt(tabIndex) || 0;\n\n    // Force setter to be called in case id was not specified.\n    this.id = this.id;\n  }\n\n  ngOnInit() {\n    this._selectionModel = new SelectionModel<MatOption>(this.multiple, undefined, false);\n    this.stateChanges.next();\n\n    // We need `distinctUntilChanged` here, because some browsers will\n    // fire the animation end event twice for the same animation. See:\n    // https://github.com/angular/angular/issues/24084\n    this._panelDoneAnimatingStream\n      .pipe(distinctUntilChanged(), takeUntil(this._destroy))\n      .subscribe(() => {\n        if (this.panelOpen) {\n          this._scrollTop = 0;\n          this.openedChange.emit(true);\n        } else {\n          this.openedChange.emit(false);\n          this._panelDoneAnimating = false;\n          this.overlayDir.offsetX = 0;\n          this._changeDetectorRef.markForCheck();\n        }\n      });\n  }\n\n  ngAfterContentInit() {\n    this._initKeyManager();\n\n    this.options.changes.pipe(startWith(null), takeUntil(this._destroy)).subscribe(() => {\n      this._resetOptions();\n      this._initializeSelection();\n    });\n  }\n\n  ngDoCheck() {\n    if (this.ngControl) {\n      this.updateErrorState();\n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    // Updating the disabled state is handled by `mixinDisabled`, but we need to additionally let\n    // the parent form field know to run change detection when the disabled state changes.\n    if (changes.disabled) {\n      this.stateChanges.next();\n    }\n  }\n\n  ngOnDestroy() {\n    this._destroy.next();\n    this._destroy.complete();\n    this.stateChanges.complete();\n  }\n\n  /** Toggles the overlay panel open or closed. */\n  toggle(): void {\n    this.panelOpen ? this.close() : this.open();\n  }\n\n  /** Opens the overlay panel. */\n  open(): void {\n    if (this.disabled || !this.options || !this.options.length || this._panelOpen) {\n      return;\n    }\n\n    this._triggerRect = this.trigger.nativeElement.getBoundingClientRect();\n    // Note: The computed font-size will be a string pixel value (e.g. \"16px\").\n    // `parseInt` ignores the trailing 'px' and converts this to a number.\n    this._triggerFontSize = parseInt(getComputedStyle(this.trigger.nativeElement)['font-size']);\n\n    this._panelOpen = true;\n    this._keyManager.withHorizontalOrientation(null);\n    this._calculateOverlayPosition();\n    this._highlightCorrectOption();\n    this._changeDetectorRef.markForCheck();\n\n    // Set the font size on the panel element once it exists.\n    this._ngZone.onStable.asObservable().pipe(take(1)).subscribe(() => {\n      if (this._triggerFontSize && this.overlayDir.overlayRef &&\n          this.overlayDir.overlayRef.overlayElement) {\n        this.overlayDir.overlayRef.overlayElement.style.fontSize = `${this._triggerFontSize}px`;\n      }\n    });\n  }\n\n  /** Closes the overlay panel and focuses the host element. */\n  close(): void {\n    if (this._panelOpen) {\n      this._panelOpen = false;\n      this._keyManager.withHorizontalOrientation(this._isRtl() ? 'rtl' : 'ltr');\n      this._changeDetectorRef.markForCheck();\n      this._onTouched();\n    }\n  }\n\n  /**\n   * Sets the select's value. Part of the ControlValueAccessor interface\n   * required to integrate with Angular's core forms API.\n   *\n   * @param value New value to be written to the model.\n   */\n  writeValue(value: any): void {\n    if (this.options) {\n      this._setSelectionByValue(value);\n    }\n  }\n\n  /**\n   * Saves a callback function to be invoked when the select's value\n   * changes from user input. Part of the ControlValueAccessor interface\n   * required to integrate with Angular's core forms API.\n   *\n   * @param fn Callback to be triggered when the value changes.\n   */\n  registerOnChange(fn: (value: any) => void): void {\n    this._onChange = fn;\n  }\n\n  /**\n   * Saves a callback function to be invoked when the select is blurred\n   * by the user. Part of the ControlValueAccessor interface required\n   * to integrate with Angular's core forms API.\n   *\n   * @param fn Callback to be triggered when the component has been touched.\n   */\n  registerOnTouched(fn: () => {}): void {\n    this._onTouched = fn;\n  }\n\n  /**\n   * Disables the select. Part of the ControlValueAccessor interface required\n   * to integrate with Angular's core forms API.\n   *\n   * @param isDisabled Sets whether the component is disabled.\n   */\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n    this._changeDetectorRef.markForCheck();\n    this.stateChanges.next();\n  }\n\n  /** Whether or not the overlay panel is open. */\n  get panelOpen(): boolean {\n    return this._panelOpen;\n  }\n\n  /** The currently selected option. */\n  get selected(): MatOption | MatOption[] {\n    return this.multiple ? this._selectionModel.selected : this._selectionModel.selected[0];\n  }\n\n  /** The value displayed in the trigger. */\n  get triggerValue(): string {\n    if (this.empty) {\n      return '';\n    }\n\n    if (this._multiple) {\n      const selectedOptions = this._selectionModel.selected.map(option => option.viewValue);\n\n      if (this._isRtl()) {\n        selectedOptions.reverse();\n      }\n\n      // TODO(crisbeto): delimiter should be configurable for proper localization.\n      return selectedOptions.join(', ');\n    }\n\n    return this._selectionModel.selected[0].viewValue;\n  }\n\n  /** Whether the element is in RTL mode. */\n  _isRtl(): boolean {\n    return this._dir ? this._dir.value === 'rtl' : false;\n  }\n\n  /** Handles all keydown events on the select. */\n  _handleKeydown(event: KeyboardEvent): void {\n    if (!this.disabled) {\n      this.panelOpen ? this._handleOpenKeydown(event) : this._handleClosedKeydown(event);\n    }\n  }\n\n  /** Handles keyboard events while the select is closed. */\n  private _handleClosedKeydown(event: KeyboardEvent): void {\n    const keyCode = event.keyCode;\n    const isArrowKey = keyCode === DOWN_ARROW || keyCode === UP_ARROW ||\n        keyCode === LEFT_ARROW || keyCode === RIGHT_ARROW;\n    const isOpenKey = keyCode === ENTER || keyCode === SPACE;\n\n    // Open the select on ALT + arrow key to match the native <select>\n    if (isOpenKey || ((this.multiple || event.altKey) && isArrowKey)) {\n      event.preventDefault(); // prevents the page from scrolling down when pressing space\n      this.open();\n    } else if (!this.multiple) {\n      this._keyManager.onKeydown(event);\n    }\n  }\n\n  /** Handles keyboard events when the selected is open. */\n  private _handleOpenKeydown(event: KeyboardEvent): void {\n    const keyCode = event.keyCode;\n    const isArrowKey = keyCode === DOWN_ARROW || keyCode === UP_ARROW;\n    const manager = this._keyManager;\n\n    if (keyCode === HOME || keyCode === END) {\n      event.preventDefault();\n      keyCode === HOME ? manager.setFirstItemActive() : manager.setLastItemActive();\n    } else if (isArrowKey && event.altKey) {\n      // Close the select on ALT + arrow key to match the native <select>\n      event.preventDefault();\n      this.close();\n    } else if ((keyCode === ENTER || keyCode === SPACE) && manager.activeItem) {\n      event.preventDefault();\n      manager.activeItem._selectViaInteraction();\n    } else {\n      const previouslyFocusedIndex = manager.activeItemIndex;\n\n      manager.onKeydown(event);\n\n      if (this._multiple && isArrowKey && event.shiftKey && manager.activeItem &&\n          manager.activeItemIndex !== previouslyFocusedIndex) {\n        manager.activeItem._selectViaInteraction();\n      }\n    }\n  }\n\n  /**\n   * When the panel content is done fading in, the _panelDoneAnimating property is\n   * set so the proper class can be added to the panel.\n   */\n  _onFadeInDone(): void {\n    this._panelDoneAnimating = this.panelOpen;\n    this._changeDetectorRef.markForCheck();\n  }\n\n  _onFocus() {\n    if (!this.disabled) {\n      this.focused = true;\n      this.stateChanges.next();\n    }\n  }\n\n  /**\n   * Calls the touched callback only if the panel is closed. Otherwise, the trigger will\n   * \"blur\" to the panel when it opens, causing a false positive.\n   */\n  _onBlur() {\n    this.focused = false;\n\n    if (!this.disabled && !this.panelOpen) {\n      this._onTouched();\n      this._changeDetectorRef.markForCheck();\n      this.stateChanges.next();\n    }\n  }\n\n  /**\n   * Callback that is invoked when the overlay panel has been attached.\n   */\n  _onAttached(): void {\n    this.overlayDir.positionChange.pipe(take(1)).subscribe(() => {\n      this._changeDetectorRef.detectChanges();\n      this._calculateOverlayOffsetX();\n      this.panel.nativeElement.scrollTop = this._scrollTop;\n    });\n  }\n\n  /** Returns the theme to be used on the panel. */\n  _getPanelTheme(): string {\n    return this._parentFormField ? `mat-${this._parentFormField.color}` : '';\n  }\n\n  /** Whether the select has a value. */\n  get empty(): boolean {\n    return !this._selectionModel || this._selectionModel.isEmpty();\n  }\n\n  private _initializeSelection(): void {\n    // Defer setting the value in order to avoid the \"Expression\n    // has changed after it was checked\" errors from Angular.\n    Promise.resolve().then(() => {\n      this._setSelectionByValue(this.ngControl ? this.ngControl.value : this._value);\n    });\n  }\n\n  /**\n   * Sets the selected option based on a value. If no option can be\n   * found with the designated value, the select trigger is cleared.\n   */\n  private _setSelectionByValue(value: any | any[], isUserInput = false): void {\n    if (this.multiple && value) {\n      if (!Array.isArray(value)) {\n        throw getMatSelectNonArrayValueError();\n      }\n\n      this._clearSelection();\n      value.forEach((currentValue: any) => this._selectValue(currentValue, isUserInput));\n      this._sortValues();\n    } else {\n      this._clearSelection();\n\n      const correspondingOption = this._selectValue(value, isUserInput);\n\n      // Shift focus to the active item. Note that we shouldn't do this in multiple\n      // mode, because we don't know what option the user interacted with last.\n      if (correspondingOption) {\n        this._keyManager.setActiveItem(correspondingOption);\n      }\n    }\n\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /**\n   * Finds and selects and option based on its value.\n   * @returns Option that has the corresponding value.\n   */\n  private _selectValue(value: any, isUserInput = false): MatOption | undefined {\n    const correspondingOption = this.options.find((option: MatOption) => {\n      try {\n        // Treat null as a special reset value.\n        return option.value != null && this._compareWith(option.value,  value);\n      } catch (error) {\n        if (isDevMode()) {\n          // Notify developers of errors in their comparator.\n          console.warn(error);\n        }\n        return false;\n      }\n    });\n\n    if (correspondingOption) {\n      isUserInput ? correspondingOption._selectViaInteraction() : correspondingOption.select();\n      this._selectionModel.select(correspondingOption);\n      this.stateChanges.next();\n    }\n\n    return correspondingOption;\n  }\n\n\n  /**\n   * Clears the select trigger and deselects every option in the list.\n   * @param skip Option that should not be deselected.\n   */\n  private _clearSelection(skip?: MatOption): void {\n    this._selectionModel.clear();\n    this.options.forEach(option => {\n      if (option !== skip) {\n        option.deselect();\n      }\n    });\n    this.stateChanges.next();\n  }\n\n  /** Sets up a key manager to listen to keyboard events on the overlay panel. */\n  private _initKeyManager() {\n    this._keyManager = new ActiveDescendantKeyManager<MatOption>(this.options)\n      .withTypeAhead()\n      .withVerticalOrientation()\n      .withHorizontalOrientation(this._isRtl() ? 'rtl' : 'ltr');\n\n    this._keyManager.tabOut.pipe(takeUntil(this._destroy)).subscribe(() => {\n      // Restore focus to the trigger before closing. Ensures that the focus\n      // position won't be lost if the user got focus into the overlay.\n      this.focus();\n      this.close();\n    });\n\n    this._keyManager.change.pipe(takeUntil(this._destroy)).subscribe(() => {\n      if (this._panelOpen && this.panel) {\n        this._scrollActiveOptionIntoView();\n      } else if (!this._panelOpen && !this.multiple && this._keyManager.activeItem) {\n        this._keyManager.activeItem._selectViaInteraction();\n      }\n    });\n  }\n\n  /** Drops current option subscriptions and IDs and resets from scratch. */\n  private _resetOptions(): void {\n    const changedOrDestroyed = merge(this.options.changes, this._destroy);\n\n    this.optionSelectionChanges\n      .pipe(takeUntil(changedOrDestroyed), filter(event => event.isUserInput))\n      .subscribe(event => {\n        this._onSelect(event.source);\n\n        if (!this.multiple && this._panelOpen) {\n          this.close();\n          this.focus();\n        }\n      });\n\n    // Listen to changes in the internal state of the options and react accordingly.\n    // Handles cases like the labels of the selected options changing.\n    merge(...this.options.map(option => option._stateChanges))\n      .pipe(takeUntil(changedOrDestroyed))\n      .subscribe(() => {\n        this._changeDetectorRef.markForCheck();\n        this.stateChanges.next();\n      });\n\n    this._setOptionIds();\n  }\n\n  /** Invoked when an option is clicked. */\n  private _onSelect(option: MatOption): void {\n    const wasSelected = this._selectionModel.isSelected(option);\n\n    // TODO(crisbeto): handle blank/null options inside multi-select.\n    if (this.multiple) {\n      this._selectionModel.toggle(option);\n      this.stateChanges.next();\n      wasSelected ? option.deselect() : option.select();\n      this._keyManager.setActiveItem(option);\n      this._sortValues();\n\n      // In case the user select the option with their mouse, we\n      // want to restore focus back to the trigger, in order to\n      // prevent the select keyboard controls from clashing with\n      // the ones from `mat-option`.\n      this.focus();\n    } else {\n      this._clearSelection(option.value == null ? undefined : option);\n\n      if (option.value == null) {\n        this._propagateChanges(option.value);\n      } else {\n        this._selectionModel.select(option);\n        this.stateChanges.next();\n      }\n    }\n\n    if (wasSelected !== this._selectionModel.isSelected(option)) {\n      this._propagateChanges();\n    }\n  }\n\n  /**\n   * Sorts the model values, ensuring that they keep the same\n   * order that they have in the panel.\n   */\n  private _sortValues(): void {\n    if (this._multiple) {\n      this._selectionModel.clear();\n\n      this.options.forEach(option => {\n        if (option.selected) {\n          this._selectionModel.select(option);\n        }\n      });\n      this.stateChanges.next();\n    }\n  }\n\n  /** Emits change event to set the model value. */\n  private _propagateChanges(fallbackValue?: any): void {\n    let valueToEmit: any = null;\n\n    if (this.multiple) {\n      valueToEmit = (this.selected as MatOption[]).map(option => option.value);\n    } else {\n      valueToEmit = this.selected ? (this.selected as MatOption).value : fallbackValue;\n    }\n\n    this._value = valueToEmit;\n    this.valueChange.emit(valueToEmit);\n    this._onChange(valueToEmit);\n    this.selectionChange.emit(new MatSelectChange(this, valueToEmit));\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Records option IDs to pass to the aria-owns property. */\n  private _setOptionIds() {\n    this._optionIds = this.options.map(option => option.id).join(' ');\n  }\n\n  /**\n   * Highlights the selected item. If no option is selected, it will highlight\n   * the first item instead.\n   */\n  private _highlightCorrectOption(): void {\n    if (this._keyManager) {\n      if (this.empty) {\n        this._keyManager.setFirstItemActive();\n      } else {\n        this._keyManager.setActiveItem(this._selectionModel.selected[0]);\n      }\n    }\n  }\n\n  /** Scrolls the active option into view. */\n  private _scrollActiveOptionIntoView(): void {\n    const activeOptionIndex = this._keyManager.activeItemIndex || 0;\n    const labelCount = _countGroupLabelsBeforeOption(activeOptionIndex, this.options,\n        this.optionGroups);\n\n    this.panel.nativeElement.scrollTop = _getOptionScrollPosition(\n      activeOptionIndex + labelCount,\n      this._getItemHeight(),\n      this.panel.nativeElement.scrollTop,\n      SELECT_PANEL_MAX_HEIGHT\n    );\n  }\n\n  /** Focuses the select element. */\n  focus(): void {\n    this._elementRef.nativeElement.focus();\n  }\n\n  /** Gets the index of the provided option in the option list. */\n  private _getOptionIndex(option: MatOption): number | undefined {\n    return this.options.reduce((result: number, current: MatOption, index: number) => {\n      return result === undefined ? (option === current ? index : undefined) : result;\n    }, undefined);\n  }\n\n  /** Calculates the scroll position and x- and y-offsets of the overlay panel. */\n  private _calculateOverlayPosition(): void {\n    const itemHeight = this._getItemHeight();\n    const items = this._getItemCount();\n    const panelHeight = Math.min(items * itemHeight, SELECT_PANEL_MAX_HEIGHT);\n    const scrollContainerHeight = items * itemHeight;\n\n    // The farthest the panel can be scrolled before it hits the bottom\n    const maxScroll = scrollContainerHeight - panelHeight;\n\n    // If no value is selected we open the popup to the first item.\n    let selectedOptionOffset =\n        this.empty ? 0 : this._getOptionIndex(this._selectionModel.selected[0])!;\n\n    selectedOptionOffset += _countGroupLabelsBeforeOption(selectedOptionOffset, this.options,\n        this.optionGroups);\n\n    // We must maintain a scroll buffer so the selected option will be scrolled to the\n    // center of the overlay panel rather than the top.\n    const scrollBuffer = panelHeight / 2;\n    this._scrollTop = this._calculateOverlayScroll(selectedOptionOffset, scrollBuffer, maxScroll);\n    this._offsetY = this._calculateOverlayOffsetY(selectedOptionOffset, scrollBuffer, maxScroll);\n\n    this._checkOverlayWithinViewport(maxScroll);\n  }\n\n  /**\n   * Calculates the scroll position of the select's overlay panel.\n   *\n   * Attempts to center the selected option in the panel. If the option is\n   * too high or too low in the panel to be scrolled to the center, it clamps the\n   * scroll position to the min or max scroll positions respectively.\n   */\n  _calculateOverlayScroll(selectedIndex: number, scrollBuffer: number,\n                          maxScroll: number): number {\n    const itemHeight = this._getItemHeight();\n    const optionOffsetFromScrollTop = itemHeight * selectedIndex;\n    const halfOptionHeight = itemHeight / 2;\n\n    // Starts at the optionOffsetFromScrollTop, which scrolls the option to the top of the\n    // scroll container, then subtracts the scroll buffer to scroll the option down to\n    // the center of the overlay panel. Half the option height must be re-added to the\n    // scrollTop so the option is centered based on its middle, not its top edge.\n    const optimalScrollPosition = optionOffsetFromScrollTop - scrollBuffer + halfOptionHeight;\n    return Math.min(Math.max(0, optimalScrollPosition), maxScroll);\n  }\n\n  /** Returns the aria-label of the select component. */\n  get _ariaLabel(): string | null {\n    // If an ariaLabelledby value has been set, the select should not overwrite the\n    // `aria-labelledby` value by setting the ariaLabel to the placeholder.\n    return this.ariaLabelledby ? null : this.ariaLabel || this.placeholder;\n  }\n\n  /** Determines the `aria-activedescendant` to be set on the host. */\n  _getAriaActiveDescendant(): string | null {\n    if (this.panelOpen && this._keyManager && this._keyManager.activeItem) {\n      return this._keyManager.activeItem.id;\n    }\n\n    return null;\n  }\n\n  /**\n   * Sets the x-offset of the overlay panel in relation to the trigger's top start corner.\n   * This must be adjusted to align the selected option text over the trigger text when\n   * the panel opens. Will change based on LTR or RTL text direction. Note that the offset\n   * can't be calculated until the panel has been attached, because we need to know the\n   * content width in order to constrain the panel within the viewport.\n   */\n  private _calculateOverlayOffsetX(): void {\n    const overlayRect = this.overlayDir.overlayRef.overlayElement.getBoundingClientRect();\n    const viewportSize = this._viewportRuler.getViewportSize();\n    const isRtl = this._isRtl();\n    const paddingWidth = this.multiple ? SELECT_MULTIPLE_PANEL_PADDING_X + SELECT_PANEL_PADDING_X :\n                                         SELECT_PANEL_PADDING_X * 2;\n    let offsetX: number;\n\n    // Adjust the offset, depending on the option padding.\n    if (this.multiple) {\n      offsetX = SELECT_MULTIPLE_PANEL_PADDING_X;\n    } else {\n      let selected = this._selectionModel.selected[0] || this.options.first;\n      offsetX = selected && selected.group ? SELECT_PANEL_INDENT_PADDING_X : SELECT_PANEL_PADDING_X;\n    }\n\n    // Invert the offset in LTR.\n    if (!isRtl) {\n      offsetX *= -1;\n    }\n\n    // Determine how much the select overflows on each side.\n    const leftOverflow = 0 - (overlayRect.left + offsetX - (isRtl ? paddingWidth : 0));\n    const rightOverflow = overlayRect.right + offsetX - viewportSize.width\n                          + (isRtl ? 0 : paddingWidth);\n\n    // If the element overflows on either side, reduce the offset to allow it to fit.\n    if (leftOverflow > 0) {\n      offsetX += leftOverflow + SELECT_PANEL_VIEWPORT_PADDING;\n    } else if (rightOverflow > 0) {\n      offsetX -= rightOverflow + SELECT_PANEL_VIEWPORT_PADDING;\n    }\n\n    // Set the offset directly in order to avoid having to go through change detection and\n    // potentially triggering \"changed after it was checked\" errors. Round the value to avoid\n    // blurry content in some browsers.\n    this.overlayDir.offsetX = Math.round(offsetX);\n    this.overlayDir.overlayRef.updatePosition();\n  }\n\n  /**\n   * Calculates the y-offset of the select's overlay panel in relation to the\n   * top start corner of the trigger. It has to be adjusted in order for the\n   * selected option to be aligned over the trigger when the panel opens.\n   */\n  private _calculateOverlayOffsetY(selectedIndex: number, scrollBuffer: number,\n                                  maxScroll: number): number {\n    const itemHeight = this._getItemHeight();\n    const optionHeightAdjustment = (itemHeight - this._triggerRect.height) / 2;\n    const maxOptionsDisplayed = Math.floor(SELECT_PANEL_MAX_HEIGHT / itemHeight);\n    let optionOffsetFromPanelTop: number;\n\n    // Disable offset if requested by user by returning 0 as value to offset\n    if (this._disableOptionCentering) {\n      return 0;\n    }\n\n    if (this._scrollTop === 0) {\n      optionOffsetFromPanelTop = selectedIndex * itemHeight;\n    } else if (this._scrollTop === maxScroll) {\n      const firstDisplayedIndex = this._getItemCount() - maxOptionsDisplayed;\n      const selectedDisplayIndex = selectedIndex - firstDisplayedIndex;\n\n      // The first item is partially out of the viewport. Therefore we need to calculate what\n      // portion of it is shown in the viewport and account for it in our offset.\n      let partialItemHeight =\n          itemHeight - (this._getItemCount() * itemHeight - SELECT_PANEL_MAX_HEIGHT) % itemHeight;\n\n      // Because the panel height is longer than the height of the options alone,\n      // there is always extra padding at the top or bottom of the panel. When\n      // scrolled to the very bottom, this padding is at the top of the panel and\n      // must be added to the offset.\n      optionOffsetFromPanelTop = selectedDisplayIndex * itemHeight + partialItemHeight;\n    } else {\n      // If the option was scrolled to the middle of the panel using a scroll buffer,\n      // its offset will be the scroll buffer minus the half height that was added to\n      // center it.\n      optionOffsetFromPanelTop = scrollBuffer - itemHeight / 2;\n    }\n\n    // The final offset is the option's offset from the top, adjusted for the height difference,\n    // multiplied by -1 to ensure that the overlay moves in the correct direction up the page.\n    // The value is rounded to prevent some browsers from blurring the content.\n    return Math.round(optionOffsetFromPanelTop * -1 - optionHeightAdjustment);\n  }\n\n  /**\n   * Checks that the attempted overlay position will fit within the viewport.\n   * If it will not fit, tries to adjust the scroll position and the associated\n   * y-offset so the panel can open fully on-screen. If it still won't fit,\n   * sets the offset back to 0 to allow the fallback position to take over.\n   */\n  private _checkOverlayWithinViewport(maxScroll: number): void {\n    const itemHeight = this._getItemHeight();\n    const viewportSize = this._viewportRuler.getViewportSize();\n\n    const topSpaceAvailable = this._triggerRect.top - SELECT_PANEL_VIEWPORT_PADDING;\n    const bottomSpaceAvailable =\n        viewportSize.height - this._triggerRect.bottom - SELECT_PANEL_VIEWPORT_PADDING;\n\n    const panelHeightTop = Math.abs(this._offsetY);\n    const totalPanelHeight =\n        Math.min(this._getItemCount() * itemHeight, SELECT_PANEL_MAX_HEIGHT);\n    const panelHeightBottom = totalPanelHeight - panelHeightTop - this._triggerRect.height;\n\n    if (panelHeightBottom > bottomSpaceAvailable) {\n      this._adjustPanelUp(panelHeightBottom, bottomSpaceAvailable);\n    } else if (panelHeightTop > topSpaceAvailable) {\n     this._adjustPanelDown(panelHeightTop, topSpaceAvailable, maxScroll);\n    } else {\n      this._transformOrigin = this._getOriginBasedOnOption();\n    }\n  }\n\n  /** Adjusts the overlay panel up to fit in the viewport. */\n  private _adjustPanelUp(panelHeightBottom: number, bottomSpaceAvailable: number) {\n    // Browsers ignore fractional scroll offsets, so we need to round.\n    const distanceBelowViewport = Math.round(panelHeightBottom - bottomSpaceAvailable);\n\n    // Scrolls the panel up by the distance it was extending past the boundary, then\n    // adjusts the offset by that amount to move the panel up into the viewport.\n    this._scrollTop -= distanceBelowViewport;\n    this._offsetY -= distanceBelowViewport;\n    this._transformOrigin = this._getOriginBasedOnOption();\n\n    // If the panel is scrolled to the very top, it won't be able to fit the panel\n    // by scrolling, so set the offset to 0 to allow the fallback position to take\n    // effect.\n    if (this._scrollTop <= 0) {\n      this._scrollTop = 0;\n      this._offsetY = 0;\n      this._transformOrigin = `50% bottom 0px`;\n    }\n  }\n\n  /** Adjusts the overlay panel down to fit in the viewport. */\n  private _adjustPanelDown(panelHeightTop: number, topSpaceAvailable: number,\n                           maxScroll: number) {\n    // Browsers ignore fractional scroll offsets, so we need to round.\n    const distanceAboveViewport = Math.round(panelHeightTop - topSpaceAvailable);\n\n    // Scrolls the panel down by the distance it was extending past the boundary, then\n    // adjusts the offset by that amount to move the panel down into the viewport.\n    this._scrollTop += distanceAboveViewport;\n    this._offsetY += distanceAboveViewport;\n    this._transformOrigin = this._getOriginBasedOnOption();\n\n    // If the panel is scrolled to the very bottom, it won't be able to fit the\n    // panel by scrolling, so set the offset to 0 to allow the fallback position\n    // to take effect.\n    if (this._scrollTop >= maxScroll) {\n      this._scrollTop = maxScroll;\n      this._offsetY = 0;\n      this._transformOrigin = `50% top 0px`;\n      return;\n    }\n  }\n\n  /** Sets the transform origin point based on the selected option. */\n  private _getOriginBasedOnOption(): string {\n    const itemHeight = this._getItemHeight();\n    const optionHeightAdjustment = (itemHeight - this._triggerRect.height) / 2;\n    const originY = Math.abs(this._offsetY) - optionHeightAdjustment + itemHeight / 2;\n    return `50% ${originY}px 0px`;\n  }\n\n  /** Calculates the amount of items in the select. This includes options and group labels. */\n  private _getItemCount(): number {\n    return this.options.length + this.optionGroups.length;\n  }\n\n  /** Calculates the height of the select's options. */\n  private _getItemHeight(): number {\n    return this._triggerFontSize * SELECT_ITEM_HEIGHT_EM;\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  setDescribedByIds(ids: string[]) {\n    this._ariaDescribedby = ids.join(' ');\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  onContainerClick() {\n    this.focus();\n    this.open();\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  get shouldLabelFloat(): boolean {\n    return this._panelOpen || !this.empty;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {AnimationEvent} from '@angular/animations';\nimport {AriaDescriber, FocusMonitor} from '@angular/cdk/a11y';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {ESCAPE} from '@angular/cdk/keycodes';\nimport {BreakpointObserver, Breakpoints, BreakpointState} from '@angular/cdk/layout';\nimport {\n  FlexibleConnectedPositionStrategy,\n  HorizontalConnectionPos,\n  OriginConnectionPosition,\n  Overlay,\n  OverlayConnectionPosition,\n  OverlayRef,\n  ScrollDispatcher,\n  ScrollStrategy,\n  VerticalConnectionPos,\n} from '@angular/cdk/overlay';\nimport {Platform} from '@angular/cdk/platform';\nimport {ComponentPortal} from '@angular/cdk/portal';\nimport {take, takeUntil} from 'rxjs/operators';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  Directive,\n  ElementRef,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  ViewContainerRef,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {Subject, Observable} from 'rxjs';\nimport {matTooltipAnimations} from './tooltip-animations';\n\n\nexport type TooltipPosition = 'left' | 'right' | 'above' | 'below' | 'before' | 'after';\n\n/** Time in ms to throttle repositioning after scroll events. */\nexport const SCROLL_THROTTLE_MS = 20;\n\n/** CSS class that will be attached to the overlay panel. */\nexport const TOOLTIP_PANEL_CLASS = 'mat-tooltip-panel';\n\n/** Creates an error to be thrown if the user supplied an invalid tooltip position. */\nexport function getMatTooltipInvalidPositionError(position: string) {\n  return Error(`Tooltip position \"${position}\" is invalid.`);\n}\n\n/** Injection token that determines the scroll handling while a tooltip is visible. */\nexport const MAT_TOOLTIP_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mat-tooltip-scroll-strategy');\n\n/** @docs-private */\nexport function MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY(overlay: Overlay): () => ScrollStrategy {\n  return () => overlay.scrollStrategies.reposition({scrollThrottle: SCROLL_THROTTLE_MS});\n}\n\n/** @docs-private */\nexport const MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY_PROVIDER = {\n  provide: MAT_TOOLTIP_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY,\n};\n\n/** Default `matTooltip` options that can be overridden. */\nexport interface MatTooltipDefaultOptions {\n  showDelay: number;\n  hideDelay: number;\n  touchendHideDelay: number;\n}\n\n/** Injection token to be used to override the default options for `matTooltip`. */\nexport const MAT_TOOLTIP_DEFAULT_OPTIONS =\n    new InjectionToken<MatTooltipDefaultOptions>('mat-tooltip-default-options', {\n      providedIn: 'root',\n      factory: MAT_TOOLTIP_DEFAULT_OPTIONS_FACTORY\n    });\n\nexport function MAT_TOOLTIP_DEFAULT_OPTIONS_FACTORY(): MatTooltipDefaultOptions {\n  return {\n    showDelay: 0,\n    hideDelay: 0,\n    touchendHideDelay: 1500,\n  };\n}\n\n/**\n * Directive that attaches a material design tooltip to the host element. Animates the showing and\n * hiding of a tooltip provided position (defaults to below the element).\n *\n * https://material.google.com/components/tooltips.html\n */\n@Directive({\n  selector: '[matTooltip]',\n  exportAs: 'matTooltip',\n  host: {\n    '(longpress)': 'show()',\n    '(keydown)': '_handleKeydown($event)',\n    '(touchend)': '_handleTouchend()',\n  },\n})\nexport class MatTooltip implements OnDestroy {\n  _overlayRef: OverlayRef | null;\n  _tooltipInstance: TooltipComponent | null;\n\n  private _portal: ComponentPortal<TooltipComponent>;\n  private _position: TooltipPosition = 'below';\n  private _disabled: boolean = false;\n  private _tooltipClass: string|string[]|Set<string>|{[key: string]: any};\n\n  /** Allows the user to define the position of the tooltip relative to the parent element */\n  @Input('matTooltipPosition')\n  get position(): TooltipPosition { return this._position; }\n  set position(value: TooltipPosition) {\n    if (value !== this._position) {\n      this._position = value;\n\n      if (this._overlayRef) {\n        this._updatePosition();\n\n        if (this._tooltipInstance) {\n          this._tooltipInstance!.show(0);\n        }\n\n        this._overlayRef.updatePosition();\n      }\n    }\n  }\n\n  /** Disables the display of the tooltip. */\n  @Input('matTooltipDisabled')\n  get disabled(): boolean { return this._disabled; }\n  set disabled(value) {\n    this._disabled = coerceBooleanProperty(value);\n\n    // If tooltip is disabled, hide immediately.\n    if (this._disabled) {\n      this.hide(0);\n    }\n  }\n\n  /** The default delay in ms before showing the tooltip after show is called */\n  @Input('matTooltipShowDelay') showDelay = this._defaultOptions.showDelay;\n\n  /** The default delay in ms before hiding the tooltip after hide is called */\n  @Input('matTooltipHideDelay') hideDelay = this._defaultOptions.hideDelay;\n\n  private _message = '';\n\n  /** The message to be displayed in the tooltip */\n  @Input('matTooltip')\n  get message() { return this._message; }\n  set message(value: string) {\n    this._ariaDescriber.removeDescription(this._elementRef.nativeElement, this._message);\n\n    // If the message is not a string (e.g. number), convert it to a string and trim it.\n    this._message = value != null ? `${value}`.trim() : '';\n\n    if (!this._message && this._isTooltipVisible()) {\n      this.hide(0);\n    } else {\n      this._updateTooltipMessage();\n      this._ariaDescriber.describe(this._elementRef.nativeElement, this.message);\n    }\n  }\n\n  /** Classes to be passed to the tooltip. Supports the same syntax as `ngClass`. */\n  @Input('matTooltipClass')\n  get tooltipClass() { return this._tooltipClass; }\n  set tooltipClass(value: string|string[]|Set<string>|{[key: string]: any}) {\n    this._tooltipClass = value;\n    if (this._tooltipInstance) {\n      this._setTooltipClass(this._tooltipClass);\n    }\n  }\n\n  private _manualListeners = new Map<string, Function>();\n\n  /** Emits when the component is destroyed. */\n  private readonly _destroyed = new Subject<void>();\n\n  constructor(\n    private _overlay: Overlay,\n    private _elementRef: ElementRef,\n    private _scrollDispatcher: ScrollDispatcher,\n    private _viewContainerRef: ViewContainerRef,\n    private _ngZone: NgZone,\n    private _platform: Platform,\n    private _ariaDescriber: AriaDescriber,\n    private _focusMonitor: FocusMonitor,\n    @Inject(MAT_TOOLTIP_SCROLL_STRATEGY) private _scrollStrategy,\n    @Optional() private _dir: Directionality,\n    @Optional() @Inject(MAT_TOOLTIP_DEFAULT_OPTIONS)\n      private _defaultOptions: MatTooltipDefaultOptions) {\n\n    const element: HTMLElement = _elementRef.nativeElement;\n\n    // The mouse events shouldn't be bound on iOS devices, because\n    // they can prevent the first tap from firing its click event.\n    if (!_platform.IOS) {\n      this._manualListeners.set('mouseenter', () => this.show());\n      this._manualListeners.set('mouseleave', () => this.hide());\n\n      this._manualListeners\n        .forEach((listener, event) => _elementRef.nativeElement.addEventListener(event, listener));\n    } else if (element.nodeName === 'INPUT' || element.nodeName === 'TEXTAREA') {\n      // When we bind a gesture event on an element (in this case `longpress`), HammerJS\n      // will add some inline styles by default, including `user-select: none`. This is\n      // problematic on iOS, because it will prevent users from typing in inputs. If\n      // we're on iOS and the tooltip is attached on an input or textarea, we clear\n      // the `user-select` to avoid these issues.\n      element.style.webkitUserSelect = element.style.userSelect = '';\n    }\n\n    _focusMonitor.monitor(element).pipe(takeUntil(this._destroyed)).subscribe(origin => {\n      // Note that the focus monitor runs outside the Angular zone.\n      if (!origin) {\n        _ngZone.run(() => this.hide(0));\n      } else if (origin === 'keyboard') {\n        _ngZone.run(() => this.show());\n      }\n    });\n  }\n\n  /**\n   * Dispose the tooltip when destroyed.\n   */\n  ngOnDestroy() {\n    if (this._overlayRef) {\n      this._overlayRef.dispose();\n      this._tooltipInstance = null;\n    }\n\n    // Clean up the event listeners set in the constructor\n    if (!this._platform.IOS) {\n      this._manualListeners.forEach((listener, event) =>\n        this._elementRef.nativeElement.removeEventListener(event, listener));\n\n      this._manualListeners.clear();\n    }\n\n    this._destroyed.next();\n    this._destroyed.complete();\n\n    this._ariaDescriber.removeDescription(this._elementRef.nativeElement, this.message);\n    this._focusMonitor.stopMonitoring(this._elementRef.nativeElement);\n  }\n\n  /** Shows the tooltip after the delay in ms, defaults to tooltip-delay-show or 0ms if no input */\n  show(delay: number = this.showDelay): void {\n    if (this.disabled || !this.message) { return; }\n\n    const overlayRef = this._createOverlay();\n\n    this._detach();\n    this._portal = this._portal || new ComponentPortal(TooltipComponent, this._viewContainerRef);\n    this._tooltipInstance = overlayRef.attach(this._portal).instance;\n    this._tooltipInstance.afterHidden()\n      .pipe(takeUntil(this._destroyed))\n      .subscribe(() => this._detach());\n    this._setTooltipClass(this._tooltipClass);\n    this._updateTooltipMessage();\n    this._tooltipInstance!.show(delay);\n  }\n\n  /** Hides the tooltip after the delay in ms, defaults to tooltip-delay-hide or 0ms if no input */\n  hide(delay: number = this.hideDelay): void {\n    if (this._tooltipInstance) {\n      this._tooltipInstance.hide(delay);\n    }\n  }\n\n  /** Shows/hides the tooltip */\n  toggle(): void {\n    this._isTooltipVisible() ? this.hide() : this.show();\n  }\n\n  /** Returns true if the tooltip is currently visible to the user */\n  _isTooltipVisible(): boolean {\n    return !!this._tooltipInstance && this._tooltipInstance.isVisible();\n  }\n\n  /** Handles the keydown events on the host element. */\n  _handleKeydown(e: KeyboardEvent) {\n    if (this._isTooltipVisible() && e.keyCode === ESCAPE) {\n      e.stopPropagation();\n      this.hide(0);\n    }\n  }\n\n  /** Handles the touchend events on the host element. */\n  _handleTouchend() {\n    this.hide(this._defaultOptions.touchendHideDelay);\n  }\n\n  /** Create the overlay config and position strategy */\n  private _createOverlay(): OverlayRef {\n    if (this._overlayRef) {\n      return this._overlayRef;\n    }\n\n    // Create connected position strategy that listens for scroll events to reposition.\n    const strategy = this._overlay.position()\n      .flexibleConnectedTo(this._elementRef)\n      .withTransformOriginOn('.mat-tooltip')\n      .withFlexibleDimensions(false)\n      .withViewportMargin(8);\n\n    const scrollableAncestors = this._scrollDispatcher\n      .getAncestorScrollContainers(this._elementRef);\n\n    strategy.withScrollableContainers(scrollableAncestors);\n\n    strategy.positionChanges.pipe(takeUntil(this._destroyed)).subscribe(change => {\n      if (this._tooltipInstance) {\n        if (change.scrollableViewProperties.isOverlayClipped && this._tooltipInstance.isVisible()) {\n          // After position changes occur and the overlay is clipped by\n          // a parent scrollable then close the tooltip.\n          this._ngZone.run(() => this.hide(0));\n        }\n      }\n    });\n\n    this._overlayRef = this._overlay.create({\n      direction: this._dir,\n      positionStrategy: strategy,\n      panelClass: TOOLTIP_PANEL_CLASS,\n      scrollStrategy: this._scrollStrategy()\n    });\n\n    this._updatePosition();\n\n    this._overlayRef.detachments()\n      .pipe(takeUntil(this._destroyed))\n      .subscribe(() => this._detach());\n\n    return this._overlayRef;\n  }\n\n  /** Detaches the currently-attached tooltip. */\n  private _detach() {\n    if (this._overlayRef && this._overlayRef.hasAttached()) {\n      this._overlayRef.detach();\n    }\n\n    this._tooltipInstance = null;\n  }\n\n  /** Updates the position of the current tooltip. */\n  private _updatePosition() {\n    const position =\n        this._overlayRef!.getConfig().positionStrategy as FlexibleConnectedPositionStrategy;\n    const origin = this._getOrigin();\n    const overlay = this._getOverlayPosition();\n\n    position.withPositions([\n      {...origin.main, ...overlay.main},\n      {...origin.fallback, ...overlay.fallback}\n    ]);\n  }\n\n  /**\n   * Returns the origin position and a fallback position based on the user's position preference.\n   * The fallback position is the inverse of the origin (e.g. `'below' -> 'above'`).\n   */\n  _getOrigin(): {main: OriginConnectionPosition, fallback: OriginConnectionPosition} {\n    const isLtr = !this._dir || this._dir.value == 'ltr';\n    const position = this.position;\n    let originPosition: OriginConnectionPosition;\n\n    if (position == 'above' || position == 'below') {\n      originPosition = {originX: 'center', originY: position == 'above' ? 'top' : 'bottom'};\n    } else if (\n      position == 'before' ||\n      (position == 'left' && isLtr) ||\n      (position == 'right' && !isLtr)) {\n      originPosition = {originX: 'start', originY: 'center'};\n    } else if (\n      position == 'after' ||\n      (position == 'right' && isLtr) ||\n      (position == 'left' && !isLtr)) {\n      originPosition = {originX: 'end', originY: 'center'};\n    } else {\n      throw getMatTooltipInvalidPositionError(position);\n    }\n\n    const {x, y} = this._invertPosition(originPosition.originX, originPosition.originY);\n\n    return {\n      main: originPosition,\n      fallback: {originX: x, originY: y}\n    };\n  }\n\n  /** Returns the overlay position and a fallback position based on the user's preference */\n  _getOverlayPosition(): {main: OverlayConnectionPosition, fallback: OverlayConnectionPosition} {\n    const isLtr = !this._dir || this._dir.value == 'ltr';\n    const position = this.position;\n    let overlayPosition: OverlayConnectionPosition;\n\n    if (position == 'above') {\n      overlayPosition = {overlayX: 'center', overlayY: 'bottom'};\n    } else if (position == 'below') {\n      overlayPosition = {overlayX: 'center', overlayY: 'top'};\n    } else if (\n      position == 'before' ||\n      (position == 'left' && isLtr) ||\n      (position == 'right' && !isLtr)) {\n      overlayPosition = {overlayX: 'end', overlayY: 'center'};\n    } else if (\n      position == 'after' ||\n      (position == 'right' && isLtr) ||\n      (position == 'left' && !isLtr)) {\n      overlayPosition = {overlayX: 'start', overlayY: 'center'};\n    } else {\n      throw getMatTooltipInvalidPositionError(position);\n    }\n\n    const {x, y} = this._invertPosition(overlayPosition.overlayX, overlayPosition.overlayY);\n\n    return {\n      main: overlayPosition,\n      fallback: {overlayX: x, overlayY: y}\n    };\n  }\n\n  /** Updates the tooltip message and repositions the overlay according to the new message length */\n  private _updateTooltipMessage() {\n    // Must wait for the message to be painted to the tooltip so that the overlay can properly\n    // calculate the correct positioning based on the size of the text.\n    if (this._tooltipInstance) {\n      this._tooltipInstance.message = this.message;\n      this._tooltipInstance._markForCheck();\n\n      this._ngZone.onMicrotaskEmpty.asObservable().pipe(\n        take(1),\n        takeUntil(this._destroyed)\n      ).subscribe(() => {\n        if (this._tooltipInstance) {\n          this._overlayRef!.updatePosition();\n        }\n      });\n    }\n  }\n\n  /** Updates the tooltip class */\n  private _setTooltipClass(tooltipClass: string|string[]|Set<string>|{[key: string]: any}) {\n    if (this._tooltipInstance) {\n      this._tooltipInstance.tooltipClass = tooltipClass;\n      this._tooltipInstance._markForCheck();\n    }\n  }\n\n  /** Inverts an overlay position. */\n  private _invertPosition(x: HorizontalConnectionPos, y: VerticalConnectionPos) {\n    if (this.position === 'above' || this.position === 'below') {\n      if (y === 'top') {\n        y = 'bottom';\n      } else if (y === 'bottom') {\n        y = 'top';\n      }\n    } else {\n      if (x === 'end') {\n        x = 'start';\n      } else if (x === 'start') {\n        x = 'end';\n      }\n    }\n\n    return {x, y};\n  }\n}\n\nexport type TooltipVisibility = 'initial' | 'visible' | 'hidden';\n\n/**\n * Internal component that wraps the tooltip's content.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-tooltip-component',\n  templateUrl: 'tooltip.html',\n  styleUrls: ['tooltip.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  animations: [matTooltipAnimations.tooltipState],\n  host: {\n    // Forces the element to have a layout in IE and Edge. This fixes issues where the element\n    // won't be rendered if the animations are disabled or there is no web animations polyfill.\n    '[style.zoom]': '_visibility === \"visible\" ? 1 : null',\n    '(body:click)': 'this._handleBodyInteraction()',\n    'aria-hidden': 'true',\n  }\n})\nexport class TooltipComponent {\n  /** Message to display in the tooltip */\n  message: string;\n\n  /** Classes to be added to the tooltip. Supports the same syntax as `ngClass`. */\n  tooltipClass: string|string[]|Set<string>|{[key: string]: any};\n\n  /** The timeout ID of any current timer set to show the tooltip */\n  _showTimeoutId: number;\n\n  /** The timeout ID of any current timer set to hide the tooltip */\n  _hideTimeoutId: number;\n\n  /** Property watched by the animation framework to show or hide the tooltip */\n  _visibility: TooltipVisibility = 'initial';\n\n  /** Whether interactions on the page should close the tooltip */\n  private _closeOnInteraction: boolean = false;\n\n  /** Subject for notifying that the tooltip has been hidden from the view */\n  private readonly _onHide: Subject<any> = new Subject();\n\n  /** Stream that emits whether the user has a handset-sized display.  */\n  _isHandset: Observable<BreakpointState> = this._breakpointObserver.observe(Breakpoints.Handset);\n\n  constructor(\n    private _changeDetectorRef: ChangeDetectorRef,\n    private _breakpointObserver: BreakpointObserver) {}\n\n  /**\n   * Shows the tooltip with an animation originating from the provided origin\n   * @param delay Amount of milliseconds to the delay showing the tooltip.\n   */\n  show(delay: number): void {\n    // Cancel the delayed hide if it is scheduled\n    if (this._hideTimeoutId) {\n      clearTimeout(this._hideTimeoutId);\n    }\n\n    // Body interactions should cancel the tooltip if there is a delay in showing.\n    this._closeOnInteraction = true;\n    this._showTimeoutId = setTimeout(() => {\n      this._visibility = 'visible';\n\n      // Mark for check so if any parent component has set the\n      // ChangeDetectionStrategy to OnPush it will be checked anyways\n      this._markForCheck();\n    }, delay);\n  }\n\n  /**\n   * Begins the animation to hide the tooltip after the provided delay in ms.\n   * @param delay Amount of milliseconds to delay showing the tooltip.\n   */\n  hide(delay: number): void {\n    // Cancel the delayed show if it is scheduled\n    if (this._showTimeoutId) {\n      clearTimeout(this._showTimeoutId);\n    }\n\n    this._hideTimeoutId = setTimeout(() => {\n      this._visibility = 'hidden';\n\n      // Mark for check so if any parent component has set the\n      // ChangeDetectionStrategy to OnPush it will be checked anyways\n      this._markForCheck();\n    }, delay);\n  }\n\n  /** Returns an observable that notifies when the tooltip has been hidden from view. */\n  afterHidden(): Observable<void> {\n    return this._onHide.asObservable();\n  }\n\n  /** Whether the tooltip is being displayed. */\n  isVisible(): boolean {\n    return this._visibility === 'visible';\n  }\n\n  _animationStart() {\n    this._closeOnInteraction = false;\n  }\n\n  _animationDone(event: AnimationEvent): void {\n    const toState = event.toState as TooltipVisibility;\n\n    if (toState === 'hidden' && !this.isVisible()) {\n      this._onHide.next();\n    }\n\n    if (toState === 'visible' || toState === 'hidden') {\n      this._closeOnInteraction = true;\n    }\n  }\n\n  /**\n   * Interactions on the HTML body should close the tooltip immediately as defined in the\n   * material design spec.\n   * https://material.google.com/components/tooltips.html#tooltips-interaction\n   */\n  _handleBodyInteraction(): void {\n    if (this._closeOnInteraction) {\n      this.hide(0);\n    }\n  }\n\n  /**\n   * Marks that the tooltip needs to be checked in the next change detection run.\n   * Mainly used for rendering the initial text before positioning a tooltip, which\n   * can be problematic in components with OnPush change detection.\n   */\n  _markForCheck(): void {\n    this._changeDetectorRef.markForCheck();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Direction, Directionality} from '@angular/cdk/bidi';\nimport {coerceNumberProperty} from '@angular/cdk/coercion';\nimport {END, ENTER, HOME, LEFT_ARROW, RIGHT_ARROW, SPACE} from '@angular/cdk/keycodes';\nimport {ViewportRuler} from '@angular/cdk/scrolling';\nimport {\n  AfterContentChecked,\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  ElementRef,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  Optional,\n  Output,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {CanDisableRipple, mixinDisableRipple} from '@angular/material/core';\nimport {merge, of as observableOf, Subscription} from 'rxjs';\nimport {MatInkBar} from './ink-bar';\nimport {MatTabLabelWrapper} from './tab-label-wrapper';\n\n\n/**\n * The directions that scrolling can go in when the header's tabs exceed the header width. 'After'\n * will scroll the header towards the end of the tabs list and 'before' will scroll towards the\n * beginning of the list.\n */\nexport type ScrollDirection = 'after' | 'before';\n\n/**\n * The distance in pixels that will be overshot when scrolling a tab label into view. This helps\n * provide a small affordance to the label next to it.\n */\nconst EXAGGERATED_OVERSCROLL = 60;\n\n// Boilerplate for applying mixins to MatTabHeader.\n/** @docs-private */\nexport class MatTabHeaderBase {}\nexport const _MatTabHeaderMixinBase = mixinDisableRipple(MatTabHeaderBase);\n\n/**\n * The header of the tab group which displays a list of all the tabs in the tab group. Includes\n * an ink bar that follows the currently selected tab. When the tabs list's width exceeds the\n * width of the header container, then arrows will be displayed to allow the user to scroll\n * left and right across the header.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-tab-header',\n  templateUrl: 'tab-header.html',\n  styleUrls: ['tab-header.css'],\n  inputs: ['disableRipple'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {\n    'class': 'mat-tab-header',\n    '[class.mat-tab-header-pagination-controls-enabled]': '_showPaginationControls',\n    '[class.mat-tab-header-rtl]': \"_getLayoutDirection() == 'rtl'\",\n  },\n})\nexport class MatTabHeader extends _MatTabHeaderMixinBase\n    implements AfterContentChecked, AfterContentInit, OnDestroy, CanDisableRipple {\n\n  @ContentChildren(MatTabLabelWrapper) _labelWrappers: QueryList<MatTabLabelWrapper>;\n  @ViewChild(MatInkBar) _inkBar: MatInkBar;\n  @ViewChild('tabListContainer') _tabListContainer: ElementRef;\n  @ViewChild('tabList') _tabList: ElementRef;\n\n  /** The tab index that is focused. */\n  private _focusIndex: number = 0;\n\n  /** The distance in pixels that the tab labels should be translated to the left. */\n  private _scrollDistance = 0;\n\n  /** Whether the header should scroll to the selected index after the view has been checked. */\n  private _selectedIndexChanged = false;\n\n  /** Combines listeners that will re-align the ink bar whenever they're invoked. */\n  private _realignInkBar = Subscription.EMPTY;\n\n  /** Whether the controls for pagination should be displayed */\n  _showPaginationControls = false;\n\n  /** Whether the tab list can be scrolled more towards the end of the tab label list. */\n  _disableScrollAfter = true;\n\n  /** Whether the tab list can be scrolled more towards the beginning of the tab label list. */\n  _disableScrollBefore = true;\n\n  /**\n   * The number of tab labels that are displayed on the header. When this changes, the header\n   * should re-evaluate the scroll position.\n   */\n  private _tabLabelCount: number;\n\n  /** Whether the scroll distance has changed and should be applied after the view is checked. */\n  private _scrollDistanceChanged: boolean;\n\n  private _selectedIndex: number = 0;\n\n  /** The index of the active tab. */\n  @Input()\n  get selectedIndex(): number { return this._selectedIndex; }\n  set selectedIndex(value: number) {\n    value = coerceNumberProperty(value);\n    this._selectedIndexChanged = this._selectedIndex != value;\n    this._selectedIndex = value;\n    this._focusIndex = value;\n  }\n\n  /** Event emitted when the option is selected. */\n  @Output() readonly selectFocusedIndex = new EventEmitter();\n\n  /** Event emitted when a label is focused. */\n  @Output() readonly indexFocused = new EventEmitter();\n\n  constructor(private _elementRef: ElementRef,\n              private _changeDetectorRef: ChangeDetectorRef,\n              private _viewportRuler: ViewportRuler,\n              @Optional() private _dir: Directionality) {\n    super();\n  }\n\n  ngAfterContentChecked(): void {\n    // If the number of tab labels have changed, check if scrolling should be enabled\n    if (this._tabLabelCount != this._labelWrappers.length) {\n      this._updatePagination();\n      this._tabLabelCount = this._labelWrappers.length;\n      this._changeDetectorRef.markForCheck();\n    }\n\n    // If the selected index has changed, scroll to the label and check if the scrolling controls\n    // should be disabled.\n    if (this._selectedIndexChanged) {\n      this._scrollToLabel(this._selectedIndex);\n      this._checkScrollingControls();\n      this._alignInkBarToSelectedTab();\n      this._selectedIndexChanged = false;\n      this._changeDetectorRef.markForCheck();\n    }\n\n    // If the scroll distance has been changed (tab selected, focused, scroll controls activated),\n    // then translate the header to reflect this.\n    if (this._scrollDistanceChanged) {\n      this._updateTabScrollPosition();\n      this._scrollDistanceChanged = false;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  _handleKeydown(event: KeyboardEvent) {\n    switch (event.keyCode) {\n      case RIGHT_ARROW:\n        this._focusNextTab();\n        break;\n      case LEFT_ARROW:\n        this._focusPreviousTab();\n        break;\n      case HOME:\n        this._focusFirstTab();\n        event.preventDefault();\n        break;\n      case END:\n        this._focusLastTab();\n        event.preventDefault();\n        break;\n      case ENTER:\n      case SPACE:\n        this.selectFocusedIndex.emit(this.focusIndex);\n        event.preventDefault();\n        break;\n    }\n  }\n\n  /**\n   * Aligns the ink bar to the selected tab on load.\n   */\n  ngAfterContentInit() {\n    const dirChange = this._dir ? this._dir.change : observableOf(null);\n    const resize = this._viewportRuler.change(150);\n    const realign = () => {\n      this._updatePagination();\n      this._alignInkBarToSelectedTab();\n    };\n\n    // Defer the first call in order to allow for slower browsers to lay out the elements.\n    // This helps in cases where the user lands directly on a page with paginated tabs.\n    typeof requestAnimationFrame !== 'undefined' ? requestAnimationFrame(realign) : realign();\n    this._realignInkBar = merge(dirChange, resize).subscribe(realign);\n  }\n\n  ngOnDestroy() {\n    this._realignInkBar.unsubscribe();\n  }\n\n  /**\n   * Callback for when the MutationObserver detects that the content has changed.\n   */\n  _onContentChanges() {\n    this._updatePagination();\n    this._alignInkBarToSelectedTab();\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /**\n   * Updating the view whether pagination should be enabled or not\n   */\n  _updatePagination() {\n    this._checkPaginationEnabled();\n    this._checkScrollingControls();\n    this._updateTabScrollPosition();\n  }\n\n  /** Tracks which element has focus; used for keyboard navigation */\n  get focusIndex(): number {\n    return this._focusIndex;\n  }\n\n  /** When the focus index is set, we must manually send focus to the correct label */\n  set focusIndex(value: number) {\n    if (!this._isValidIndex(value) || this._focusIndex == value) { return; }\n\n    this._focusIndex = value;\n    this.indexFocused.emit(value);\n    this._setTabFocus(value);\n  }\n\n  /**\n   * Determines if an index is valid.  If the tabs are not ready yet, we assume that the user is\n   * providing a valid index and return true.\n   */\n  _isValidIndex(index: number): boolean {\n    if (!this._labelWrappers) { return true; }\n\n    const tab = this._labelWrappers ? this._labelWrappers.toArray()[index] : null;\n    return !!tab && !tab.disabled;\n  }\n\n  /**\n   * Sets focus on the HTML element for the label wrapper and scrolls it into the view if\n   * scrolling is enabled.\n   */\n  _setTabFocus(tabIndex: number) {\n    if (this._showPaginationControls) {\n      this._scrollToLabel(tabIndex);\n    }\n\n    if (this._labelWrappers && this._labelWrappers.length) {\n      this._labelWrappers.toArray()[tabIndex].focus();\n\n      // Do not let the browser manage scrolling to focus the element, this will be handled\n      // by using translation. In LTR, the scroll left should be 0. In RTL, the scroll width\n      // should be the full width minus the offset width.\n      const containerEl = this._tabListContainer.nativeElement;\n      const dir = this._getLayoutDirection();\n\n      if (dir == 'ltr') {\n        containerEl.scrollLeft = 0;\n      } else {\n        containerEl.scrollLeft = containerEl.scrollWidth - containerEl.offsetWidth;\n      }\n    }\n  }\n\n  /**\n   * Moves the focus towards the beginning or the end of the list depending on the offset provided.\n   * Valid offsets are 1 and -1.\n   */\n  _moveFocus(offset: number) {\n    if (this._labelWrappers) {\n      const tabs: MatTabLabelWrapper[] = this._labelWrappers.toArray();\n\n      for (let i = this.focusIndex + offset; i < tabs.length && i >= 0; i += offset) {\n        if (this._isValidIndex(i)) {\n          this.focusIndex = i;\n          return;\n        }\n      }\n    }\n  }\n\n  /** Increment the focus index by 1 until a valid tab is found. */\n  _focusNextTab(): void {\n    this._moveFocus(this._getLayoutDirection() == 'ltr' ? 1 : -1);\n  }\n\n  /** Decrement the focus index by 1 until a valid tab is found. */\n  _focusPreviousTab(): void {\n    this._moveFocus(this._getLayoutDirection() == 'ltr' ? -1 : 1);\n  }\n\n  /** Focuses the first tab. */\n  private _focusFirstTab(): void {\n    for (let i = 0; i < this._labelWrappers.length; i++) {\n      if (this._isValidIndex(i)) {\n        this.focusIndex = i;\n        break;\n      }\n    }\n  }\n\n  /** Focuses the last tab. */\n  private _focusLastTab(): void {\n    for (let i = this._labelWrappers.length - 1; i > -1; i--) {\n      if (this._isValidIndex(i)) {\n        this.focusIndex = i;\n        break;\n      }\n    }\n  }\n\n  /** The layout direction of the containing app. */\n  _getLayoutDirection(): Direction {\n    return this._dir && this._dir.value === 'rtl' ? 'rtl' : 'ltr';\n  }\n\n  /** Performs the CSS transformation on the tab list that will cause the list to scroll. */\n  _updateTabScrollPosition() {\n    const scrollDistance = this.scrollDistance;\n    const translateX = this._getLayoutDirection() === 'ltr' ? -scrollDistance : scrollDistance;\n\n    this._tabList.nativeElement.style.transform = `translate3d(${translateX}px, 0, 0)`;\n  }\n\n  /** Sets the distance in pixels that the tab header should be transformed in the X-axis. */\n  get scrollDistance(): number { return this._scrollDistance; }\n  set scrollDistance(v: number) {\n    this._scrollDistance = Math.max(0, Math.min(this._getMaxScrollDistance(), v));\n\n    // Mark that the scroll distance has changed so that after the view is checked, the CSS\n    // transformation can move the header.\n    this._scrollDistanceChanged = true;\n    this._checkScrollingControls();\n  }\n\n  /**\n   * Moves the tab list in the 'before' or 'after' direction (towards the beginning of the list or\n   * the end of the list, respectively). The distance to scroll is computed to be a third of the\n   * length of the tab list view window.\n   *\n   * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n   * should be called sparingly.\n   */\n  _scrollHeader(scrollDir: ScrollDirection) {\n    const viewLength = this._tabListContainer.nativeElement.offsetWidth;\n\n    // Move the scroll distance one-third the length of the tab list's viewport.\n    this.scrollDistance += (scrollDir == 'before' ? -1 : 1) * viewLength / 3;\n  }\n\n  /**\n   * Moves the tab list such that the desired tab label (marked by index) is moved into view.\n   *\n   * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n   * should be called sparingly.\n   */\n  _scrollToLabel(labelIndex: number) {\n    const selectedLabel = this._labelWrappers ? this._labelWrappers.toArray()[labelIndex] : null;\n\n    if (!selectedLabel) { return; }\n\n    // The view length is the visible width of the tab labels.\n    const viewLength = this._tabListContainer.nativeElement.offsetWidth;\n\n    let labelBeforePos: number, labelAfterPos: number;\n    if (this._getLayoutDirection() == 'ltr') {\n      labelBeforePos = selectedLabel.getOffsetLeft();\n      labelAfterPos = labelBeforePos + selectedLabel.getOffsetWidth();\n    } else {\n      labelAfterPos = this._tabList.nativeElement.offsetWidth - selectedLabel.getOffsetLeft();\n      labelBeforePos = labelAfterPos - selectedLabel.getOffsetWidth();\n    }\n\n    const beforeVisiblePos = this.scrollDistance;\n    const afterVisiblePos = this.scrollDistance + viewLength;\n\n    if (labelBeforePos < beforeVisiblePos) {\n      // Scroll header to move label to the before direction\n      this.scrollDistance -= beforeVisiblePos - labelBeforePos + EXAGGERATED_OVERSCROLL;\n    } else if (labelAfterPos > afterVisiblePos) {\n      // Scroll header to move label to the after direction\n      this.scrollDistance += labelAfterPos - afterVisiblePos + EXAGGERATED_OVERSCROLL;\n    }\n  }\n\n  /**\n   * Evaluate whether the pagination controls should be displayed. If the scroll width of the\n   * tab list is wider than the size of the header container, then the pagination controls should\n   * be shown.\n   *\n   * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n   * should be called sparingly.\n   */\n  _checkPaginationEnabled() {\n    const isEnabled =\n        this._tabList.nativeElement.scrollWidth > this._elementRef.nativeElement.offsetWidth;\n\n    if (!isEnabled) {\n      this.scrollDistance = 0;\n    }\n\n    if (isEnabled !== this._showPaginationControls) {\n      this._changeDetectorRef.markForCheck();\n    }\n\n    this._showPaginationControls = isEnabled;\n  }\n\n  /**\n   * Evaluate whether the before and after controls should be enabled or disabled.\n   * If the header is at the beginning of the list (scroll distance is equal to 0) then disable the\n   * before button. If the header is at the end of the list (scroll distance is equal to the\n   * maximum distance we can scroll), then disable the after button.\n   *\n   * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n   * should be called sparingly.\n   */\n  _checkScrollingControls() {\n    // Check if the pagination arrows should be activated.\n    this._disableScrollBefore = this.scrollDistance == 0;\n    this._disableScrollAfter = this.scrollDistance == this._getMaxScrollDistance();\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /**\n   * Determines what is the maximum length in pixels that can be set for the scroll distance. This\n   * is equal to the difference in width between the tab list container and tab header container.\n   *\n   * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n   * should be called sparingly.\n   */\n  _getMaxScrollDistance(): number {\n    const lengthOfTabList = this._tabList.nativeElement.scrollWidth;\n    const viewLength = this._tabListContainer.nativeElement.offsetWidth;\n    return (lengthOfTabList - viewLength) || 0;\n  }\n\n  /** Tells the ink-bar to align itself to the current label wrapper */\n  _alignInkBarToSelectedTab(): void {\n    const selectedLabelWrapper = this._labelWrappers && this._labelWrappers.length ?\n        this._labelWrappers.toArray()[this.selectedIndex].elementRef.nativeElement :\n        null;\n\n    this._inkBar.alignToElement(selectedLabelWrapper);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty, coerceNumberProperty} from '@angular/cdk/coercion';\nimport {\n  AfterContentChecked,\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  ElementRef,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  Output,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {\n  CanColor,\n  CanDisableRipple,\n  mixinColor,\n  mixinDisableRipple,\n  ThemePalette\n} from '@angular/material/core';\nimport {merge, Subscription} from 'rxjs';\nimport {MatTab} from './tab';\nimport {MatTabHeader} from './tab-header';\n\n\n/** Used to generate unique ID's for each tab component */\nlet nextId = 0;\n\n/** A simple change event emitted on focus or selection changes. */\nexport class MatTabChangeEvent {\n  /** Index of the currently-selected tab. */\n  index: number;\n  /** Reference to the currently-selected tab. */\n  tab: MatTab;\n}\n\n/** Possible positions for the tab header. */\nexport type MatTabHeaderPosition = 'above' | 'below';\n\n// Boilerplate for applying mixins to MatTabGroup.\n/** @docs-private */\nexport class MatTabGroupBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatTabGroupMixinBase = mixinColor(mixinDisableRipple(MatTabGroupBase), 'primary');\n\n/**\n * Material design tab-group component.  Supports basic tab pairs (label + content) and includes\n * animated ink-bar, keyboard navigation, and screen reader.\n * See: https://material.io/design/components/tabs.html\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-tab-group',\n  exportAs: 'matTabGroup',\n  templateUrl: 'tab-group.html',\n  styleUrls: ['tab-group.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  inputs: ['color', 'disableRipple'],\n  host: {\n    'class': 'mat-tab-group',\n    '[class.mat-tab-group-dynamic-height]': 'dynamicHeight',\n    '[class.mat-tab-group-inverted-header]': 'headerPosition === \"below\"',\n  },\n})\nexport class MatTabGroup extends _MatTabGroupMixinBase implements AfterContentInit,\n    AfterContentChecked, OnDestroy, CanColor, CanDisableRipple {\n\n  @ContentChildren(MatTab) _tabs: QueryList<MatTab>;\n\n  @ViewChild('tabBodyWrapper') _tabBodyWrapper: ElementRef;\n\n  @ViewChild('tabHeader') _tabHeader: MatTabHeader;\n\n  /** The tab index that should be selected after the content has been checked. */\n  private _indexToSelect: number | null = 0;\n\n  /** Snapshot of the height of the tab body wrapper before another tab is activated. */\n  private _tabBodyWrapperHeight: number = 0;\n\n  /** Subscription to tabs being added/removed. */\n  private _tabsSubscription = Subscription.EMPTY;\n\n  /** Subscription to changes in the tab labels. */\n  private _tabLabelSubscription = Subscription.EMPTY;\n\n  /** Whether the tab group should grow to the size of the active tab. */\n  @Input()\n  get dynamicHeight(): boolean { return this._dynamicHeight; }\n  set dynamicHeight(value: boolean) { this._dynamicHeight = coerceBooleanProperty(value); }\n  private _dynamicHeight: boolean = false;\n\n  /** The index of the active tab. */\n  @Input()\n  get selectedIndex(): number | null { return this._selectedIndex; }\n  set selectedIndex(value: number | null) {\n    this._indexToSelect = coerceNumberProperty(value, null);\n  }\n  private _selectedIndex: number | null = null;\n\n  /** Position of the tab header. */\n  @Input() headerPosition: MatTabHeaderPosition = 'above';\n\n  /** Background color of the tab group. */\n  @Input()\n  get backgroundColor(): ThemePalette { return this._backgroundColor; }\n  set backgroundColor(value: ThemePalette) {\n    const nativeElement: HTMLElement = this._elementRef.nativeElement;\n\n    nativeElement.classList.remove(`mat-background-${this.backgroundColor}`);\n\n    if (value) {\n      nativeElement.classList.add(`mat-background-${value}`);\n    }\n\n    this._backgroundColor = value;\n  }\n  private _backgroundColor: ThemePalette;\n\n  /** Output to enable support for two-way binding on `[(selectedIndex)]` */\n  @Output() readonly selectedIndexChange: EventEmitter<number> = new EventEmitter<number>();\n\n  /** Event emitted when focus has changed within a tab group. */\n  @Output() readonly focusChange: EventEmitter<MatTabChangeEvent> =\n      new EventEmitter<MatTabChangeEvent>();\n\n  /** Event emitted when the body animation has completed */\n  @Output() readonly animationDone: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Event emitted when the tab selection has changed. */\n  @Output() readonly selectedTabChange: EventEmitter<MatTabChangeEvent> =\n      new EventEmitter<MatTabChangeEvent>(true);\n\n  private _groupId: number;\n\n  constructor(elementRef: ElementRef,\n              private _changeDetectorRef: ChangeDetectorRef) {\n    super(elementRef);\n    this._groupId = nextId++;\n  }\n\n  /**\n   * After the content is checked, this component knows what tabs have been defined\n   * and what the selected index should be. This is where we can know exactly what position\n   * each tab should be in according to the new selected index, and additionally we know how\n   * a new selected tab should transition in (from the left or right).\n   */\n  ngAfterContentChecked() {\n    // Clamp the next selected index to the boundsof 0 and the tabs length.\n    // Note the `|| 0`, which ensures that values like NaN can't get through\n    // and which would otherwise throw the component into an infinite loop\n    // (since Math.max(NaN, 0) === NaN).\n    let indexToSelect = this._indexToSelect =\n        Math.min(this._tabs.length - 1, Math.max(this._indexToSelect || 0, 0));\n\n    // If there is a change in selected index, emit a change event. Should not trigger if\n    // the selected index has not yet been initialized.\n    if (this._selectedIndex != indexToSelect && this._selectedIndex != null) {\n      const tabChangeEvent = this._createChangeEvent(indexToSelect);\n      this.selectedTabChange.emit(tabChangeEvent);\n      // Emitting this value after change detection has run\n      // since the checked content may contain this variable'\n      Promise.resolve().then(() => this.selectedIndexChange.emit(indexToSelect));\n    }\n\n    // Setup the position for each tab and optionally setup an origin on the next selected tab.\n    this._tabs.forEach((tab: MatTab, index: number) => {\n      tab.position = index - indexToSelect;\n      tab.isActive = index === indexToSelect;\n\n      // If there is already a selected tab, then set up an origin for the next selected tab\n      // if it doesn't have one already.\n      if (this._selectedIndex != null && tab.position == 0 && !tab.origin) {\n        tab.origin = indexToSelect - this._selectedIndex;\n      }\n    });\n\n    if (this._selectedIndex !== indexToSelect) {\n      this._selectedIndex = indexToSelect;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  ngAfterContentInit() {\n    this._subscribeToTabLabels();\n\n    // Subscribe to changes in the amount of tabs, in order to be\n    // able to re-render the content as new tabs are added or removed.\n    this._tabsSubscription = this._tabs.changes.subscribe(() => {\n      this._subscribeToTabLabels();\n      this._changeDetectorRef.markForCheck();\n    });\n  }\n\n  ngOnDestroy() {\n    this._tabsSubscription.unsubscribe();\n    this._tabLabelSubscription.unsubscribe();\n  }\n\n  /** Re-aligns the ink bar to the selected tab element. */\n  realignInkBar() {\n    if (this._tabHeader) {\n      this._tabHeader._alignInkBarToSelectedTab();\n    }\n  }\n\n  _focusChanged(index: number) {\n    this.focusChange.emit(this._createChangeEvent(index));\n  }\n\n  private _createChangeEvent(index: number): MatTabChangeEvent {\n    const event = new MatTabChangeEvent;\n    event.index = index;\n    if (this._tabs && this._tabs.length) {\n      event.tab = this._tabs.toArray()[index];\n    }\n    return event;\n  }\n\n  /**\n   * Subscribes to changes in the tab labels. This is needed, because the @Input for the label is\n   * on the MatTab component, whereas the data binding is inside the MatTabGroup. In order for the\n   * binding to be updated, we need to subscribe to changes in it and trigger change detection\n   * manually.\n   */\n  private _subscribeToTabLabels() {\n    if (this._tabLabelSubscription) {\n      this._tabLabelSubscription.unsubscribe();\n    }\n\n    this._tabLabelSubscription = merge(\n        ...this._tabs.map(tab => tab._disableChange),\n        ...this._tabs.map(tab => tab._labelChange)).subscribe(() => {\n      this._changeDetectorRef.markForCheck();\n    });\n  }\n\n  /** Returns a unique id for each tab label element */\n  _getTabLabelId(i: number): string {\n    return `mat-tab-label-${this._groupId}-${i}`;\n  }\n\n  /** Returns a unique id for each tab content element */\n  _getTabContentId(i: number): string {\n    return `mat-tab-content-${this._groupId}-${i}`;\n  }\n\n  /**\n   * Sets the height of the body wrapper to the height of the activating tab if dynamic\n   * height property is true.\n   */\n  _setTabBodyWrapperHeight(tabHeight: number): void {\n    if (!this._dynamicHeight || !this._tabBodyWrapperHeight) { return; }\n\n    const wrapper: HTMLElement = this._tabBodyWrapper.nativeElement;\n\n    wrapper.style.height = this._tabBodyWrapperHeight + 'px';\n\n    // This conditional forces the browser to paint the height so that\n    // the animation to the new height can have an origin.\n    if (this._tabBodyWrapper.nativeElement.offsetHeight) {\n      wrapper.style.height = tabHeight + 'px';\n    }\n  }\n\n  /** Removes the height of the tab body wrapper. */\n  _removeTabBodyWrapperHeight(): void {\n    this._tabBodyWrapperHeight = this._tabBodyWrapper.nativeElement.clientHeight;\n    this._tabBodyWrapper.nativeElement.style.height = '';\n    this.animationDone.emit();\n  }\n\n  /** Handle click events, setting new selected index if appropriate. */\n  _handleClick(tab: MatTab, tabHeader: MatTabHeader, idx: number) {\n    if (!tab.disabled) {\n      this.selectedIndex = tabHeader.focusIndex = idx;\n    }\n  }\n\n  /** Retrieves the tabindex for the tab. */\n  _getTabIndex(tab: MatTab, idx: number): number | null {\n    if (tab.disabled) {\n      return null;\n    }\n    return this.selectedIndex === idx ? 0 : -1;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {Directionality} from '@angular/cdk/bidi';\nimport {Platform} from '@angular/cdk/platform';\nimport {ViewportRuler} from '@angular/cdk/scrolling';\nimport {\n  AfterContentChecked,\n  AfterContentInit,\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  forwardRef,\n  Inject,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {\n  CanColor,\n  CanDisable,\n  CanDisableRipple,\n  HasTabIndex,\n  MAT_RIPPLE_GLOBAL_OPTIONS,\n  mixinColor,\n  mixinDisabled,\n  mixinDisableRipple,\n  mixinTabIndex, RippleConfig,\n  RippleGlobalOptions,\n  RippleRenderer,\n  RippleTarget,\n  ThemePalette,\n} from '@angular/material/core';\nimport {merge, of as observableOf, Subject} from 'rxjs';\nimport {takeUntil} from 'rxjs/operators';\nimport {MatInkBar} from '../ink-bar';\n\n\n// Boilerplate for applying mixins to MatTabNav.\n/** @docs-private */\nexport class MatTabNavBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatTabNavMixinBase = mixinDisableRipple(mixinColor(MatTabNavBase, 'primary'));\n\n/**\n * Navigation component matching the styles of the tab group header.\n * Provides anchored navigation with animated ink bar.\n */\n@Component({\n  moduleId: module.id,\n  selector: '[mat-tab-nav-bar]',\n  exportAs: 'matTabNavBar, matTabNav',\n  inputs: ['color', 'disableRipple'],\n  templateUrl: 'tab-nav-bar.html',\n  styleUrls: ['tab-nav-bar.css'],\n  host: {'class': 'mat-tab-nav-bar'},\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatTabNav extends _MatTabNavMixinBase\n    implements AfterContentChecked, AfterContentInit, CanColor, CanDisableRipple, OnDestroy {\n\n  /** Subject that emits when the component has been destroyed. */\n  private readonly _onDestroy = new Subject<void>();\n\n  private _activeLinkChanged: boolean;\n  private _activeLinkElement: ElementRef | null;\n\n  @ViewChild(MatInkBar) _inkBar: MatInkBar;\n\n  /** Query list of all tab links of the tab navigation. */\n  @ContentChildren(forwardRef(() => MatTabLink), {descendants: true})\n  _tabLinks: QueryList<MatTabLink>;\n\n  /** Background color of the tab nav. */\n  @Input()\n  get backgroundColor(): ThemePalette { return this._backgroundColor; }\n  set backgroundColor(value: ThemePalette) {\n    const nativeElement: HTMLElement = this._elementRef.nativeElement;\n\n    nativeElement.classList.remove(`mat-background-${this.backgroundColor}`);\n\n    if (value) {\n      nativeElement.classList.add(`mat-background-${value}`);\n    }\n\n    this._backgroundColor = value;\n  }\n  private _backgroundColor: ThemePalette;\n\n  constructor(elementRef: ElementRef,\n              @Optional() private _dir: Directionality,\n              private _ngZone: NgZone,\n              private _changeDetectorRef: ChangeDetectorRef,\n              private _viewportRuler: ViewportRuler) {\n    super(elementRef);\n  }\n\n  /**\n   * Notifies the component that the active link has been changed.\n   * @deletion-target 7.0.0 `element` parameter to be removed.\n   */\n  updateActiveLink(element: ElementRef) {\n    // Note: keeping the `element` for backwards-compat, but isn't being used for anything.\n    // @deletion-target 7.0.0\n    this._activeLinkChanged = !!element;\n    this._changeDetectorRef.markForCheck();\n  }\n\n  ngAfterContentInit(): void {\n    this._ngZone.runOutsideAngular(() => {\n      const dirChange = this._dir ? this._dir.change : observableOf(null);\n\n      return merge(dirChange, this._viewportRuler.change(10))\n          .pipe(takeUntil(this._onDestroy))\n          .subscribe(() => this._alignInkBar());\n    });\n  }\n\n  /** Checks if the active link has been changed and, if so, will update the ink bar. */\n  ngAfterContentChecked(): void {\n    if (this._activeLinkChanged) {\n      const activeTab = this._tabLinks.find(tab => tab.active);\n\n      this._activeLinkElement = activeTab ? activeTab._elementRef : null;\n      this._alignInkBar();\n      this._activeLinkChanged = false;\n    }\n  }\n\n  ngOnDestroy() {\n    this._onDestroy.next();\n    this._onDestroy.complete();\n  }\n\n  /** Aligns the ink bar to the active link. */\n  _alignInkBar(): void {\n    if (this._activeLinkElement) {\n      this._inkBar.show();\n      this._inkBar.alignToElement(this._activeLinkElement.nativeElement);\n    } else {\n      this._inkBar.hide();\n    }\n  }\n}\n\n\n// Boilerplate for applying mixins to MatTabLink.\nexport class MatTabLinkBase {}\nexport const _MatTabLinkMixinBase =\n  mixinTabIndex(mixinDisableRipple(mixinDisabled(MatTabLinkBase)));\n\n/**\n * Link inside of a `mat-tab-nav-bar`.\n */\n@Directive({\n  selector: '[mat-tab-link], [matTabLink]',\n  exportAs: 'matTabLink',\n  inputs: ['disabled', 'disableRipple', 'tabIndex'],\n  host: {\n    'class': 'mat-tab-link',\n    '[attr.aria-current]': 'active',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.tabIndex]': 'tabIndex',\n    '[class.mat-tab-disabled]': 'disabled',\n    '[class.mat-tab-label-active]': 'active',\n    '(click)': '_handleClick($event)'\n  }\n})\nexport class MatTabLink extends _MatTabLinkMixinBase\n    implements OnDestroy, CanDisable, CanDisableRipple, HasTabIndex, RippleTarget {\n\n  /** Whether the tab link is active or not. */\n  protected _isActive: boolean = false;\n\n  /** Reference to the RippleRenderer for the tab-link. */\n  protected _tabLinkRipple: RippleRenderer;\n\n  /** Whether the link is active. */\n  @Input()\n  get active(): boolean { return this._isActive; }\n  set active(value: boolean) {\n    if (value !== this._isActive) {\n      this._isActive = value;\n      this._tabNavBar.updateActiveLink(this._elementRef);\n    }\n  }\n\n  /**\n   * Ripple configuration for ripples that are launched on pointer down.\n   * @docs-private\n   */\n  rippleConfig: RippleConfig = {};\n\n  /**\n   * Whether ripples are disabled on interaction\n   * @docs-private\n   */\n  get rippleDisabled(): boolean {\n    return this.disabled || this.disableRipple || this._tabNavBar.disableRipple;\n  }\n\n  constructor(private _tabNavBar: MatTabNav,\n              public _elementRef: ElementRef,\n              ngZone: NgZone,\n              platform: Platform,\n              @Optional() @Inject(MAT_RIPPLE_GLOBAL_OPTIONS) globalOptions: RippleGlobalOptions,\n              @Attribute('tabindex') tabIndex: string) {\n    super();\n\n    this._tabLinkRipple = new RippleRenderer(this, ngZone, _elementRef, platform);\n    this._tabLinkRipple.setupTriggerEvents(_elementRef.nativeElement);\n\n    this.tabIndex = parseInt(tabIndex) || 0;\n\n    if (globalOptions) {\n      this.rippleConfig = {\n        terminateOnPointerUp: globalOptions.terminateOnPointerUp,\n        speedFactor: globalOptions.baseSpeedFactor,\n        animation: globalOptions.animation,\n      };\n    }\n  }\n\n  ngOnDestroy() {\n    this._tabLinkRipple._removeTriggerEvents();\n  }\n\n  /**\n   * Handles the click event, preventing default navigation if the tab link is disabled.\n   */\n  _handleClick(event: MouseEvent) {\n    if (this.disabled) {\n      event.preventDefault();\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ObserversModule} from '@angular/cdk/observers';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {MatInkBar} from './ink-bar';\nimport {MatTab} from './tab';\nimport {MatTabBody, MatTabBodyPortal} from './tab-body';\nimport {MatTabContent} from './tab-content';\nimport {MatTabGroup} from './tab-group';\nimport {MatTabHeader} from './tab-header';\nimport {MatTabLabel} from './tab-label';\nimport {MatTabLabelWrapper} from './tab-label-wrapper';\nimport {MatTabLink, MatTabNav} from './tab-nav-bar/tab-nav-bar';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatCommonModule,\n    PortalModule,\n    MatRippleModule,\n    ObserversModule,\n  ],\n  // Don't export all components because some are only to be used internally.\n  exports: [\n    MatCommonModule,\n    MatTabGroup,\n    MatTabLabel,\n    MatTab,\n    MatTabNav,\n    MatTabLink,\n    MatTabContent,\n  ],\n  declarations: [\n    MatTabGroup,\n    MatTabLabel,\n    MatTab,\n    MatInkBar,\n    MatTabLabelWrapper,\n    MatTabNav,\n    MatTabLink,\n    MatTabBody,\n    MatTabBodyPortal,\n    MatTabHeader,\n    MatTabContent,\n  ],\n})\nexport class MatTabsModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  AfterViewInit,\n  ChangeDetectionStrategy,\n  Component,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  isDevMode,\n  QueryList,\n  ViewEncapsulation,\n  Inject,\n} from '@angular/core';\nimport {CanColor, mixinColor} from '@angular/material/core';\nimport {Platform} from '@angular/cdk/platform';\nimport {DOCUMENT} from '@angular/common';\n\n// Boilerplate for applying mixins to MatToolbar.\n/** @docs-private */\nexport class MatToolbarBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatToolbarMixinBase = mixinColor(MatToolbarBase);\n\n@Directive({\n  selector: 'mat-toolbar-row',\n  exportAs: 'matToolbarRow',\n  host: {'class': 'mat-toolbar-row'},\n})\nexport class MatToolbarRow {}\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-toolbar',\n  exportAs: 'matToolbar',\n  templateUrl: 'toolbar.html',\n  styleUrls: ['toolbar.css'],\n  inputs: ['color'],\n  host: {\n    'class': 'mat-toolbar',\n    '[class.mat-toolbar-multiple-rows]': 'this._toolbarRows.length',\n    '[class.mat-toolbar-single-row]': '!this._toolbarRows.length'\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatToolbar extends _MatToolbarMixinBase implements CanColor, AfterViewInit {\n  private _document: Document;\n\n  /** Reference to all toolbar row elements that have been projected. */\n  @ContentChildren(MatToolbarRow) _toolbarRows: QueryList<MatToolbarRow>;\n\n  constructor(\n    elementRef: ElementRef,\n    private _platform: Platform,\n    @Inject(DOCUMENT) document?: any) {\n    super(elementRef);\n\n    // TODO: make the document a required param when doing breaking changes.\n    this._document = document;\n  }\n\n  ngAfterViewInit() {\n    if (!isDevMode() || !this._platform.isBrowser) {\n      return;\n    }\n\n    this._checkToolbarMixedModes();\n    this._toolbarRows.changes.subscribe(() => this._checkToolbarMixedModes());\n  }\n\n  /**\n   * Throws an exception when developers are attempting to combine the different toolbar row modes.\n   */\n  private _checkToolbarMixedModes() {\n    if (!this._toolbarRows.length) {\n      return;\n    }\n\n    // Check if there are any other DOM nodes that can display content but aren't inside of\n    // a <mat-toolbar-row> element.\n    const isCombinedUsage = [].slice.call(this._elementRef.nativeElement.childNodes)\n      .filter(node => !(node.classList && node.classList.contains('mat-toolbar-row')))\n      .filter(node => node.nodeType !== (this._document ? this._document.COMMENT_NODE : 8))\n      .some(node => node.textContent.trim());\n\n    if (isCombinedUsage) {\n      throwToolbarMixedModesError();\n    }\n  }\n}\n\n/**\n * Throws an exception when attempting to combine the different toolbar row modes.\n * @docs-private\n */\nexport function throwToolbarMixedModesError() {\n  throw Error('MatToolbar: Attempting to combine different toolbar modes. ' +\n    'Either specify multiple `<mat-toolbar-row>` elements explicitly or just place content ' +\n    'inside of a `<mat-toolbar>` for a single row.');\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatToolbar, MatToolbarRow} from './toolbar';\n\n\n@NgModule({\n  imports: [MatCommonModule],\n  exports: [MatToolbar, MatToolbarRow, MatCommonModule],\n  declarations: [MatToolbar, MatToolbarRow],\n})\nexport class MatToolbarModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {CdkTreeNodeOutlet} from '@angular/cdk/tree';\nimport {\n  Directive,\n  ViewContainerRef,\n} from '@angular/core';\n\n/**\n * Outlet for nested CdkNode. Put `[matTreeNodeOutlet]` on a tag to place children dataNodes\n * inside the outlet.\n */\n@Directive({\n  selector: '[matTreeNodeOutlet]'\n})\nexport class MatTreeNodeOutlet implements CdkTreeNodeOutlet {\n  constructor(public viewContainer: ViewContainerRef) {}\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  CdkNestedTreeNode,\n  CdkTree,\n  CdkTreeNode,\n  CdkTreeNodeDef,\n} from '@angular/cdk/tree';\nimport {\n  AfterContentInit,\n  Attribute,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  Input,\n  IterableDiffers,\n  OnDestroy,\n  QueryList\n} from '@angular/core';\nimport {CanDisable, HasTabIndex, mixinDisabled, mixinTabIndex} from '@angular/material/core';\nimport {MatTreeNodeOutlet} from './outlet';\n\n\nexport const _MatTreeNodeMixinBase = mixinTabIndex(mixinDisabled(CdkTreeNode));\nexport const _MatNestedTreeNodeMixinBase = mixinTabIndex(mixinDisabled(CdkNestedTreeNode));\n\n/**\n * Wrapper for the CdkTree node with Material design styles.\n */\n@Directive({\n  selector: 'mat-tree-node',\n  exportAs: 'matTreeNode',\n  inputs: ['disabled', 'tabIndex'],\n  host: {\n    '[attr.aria-expanded]': 'isExpanded',\n    '[attr.aria-level]': 'role === \"treeitem\" ? level : null',\n    '[attr.role]': 'role',\n    'class': 'mat-tree-node'\n  },\n  providers: [{provide: CdkTreeNode, useExisting: MatTreeNode}]\n})\nexport class MatTreeNode<T> extends _MatTreeNodeMixinBase<T>\n    implements CanDisable, HasTabIndex {\n  @Input() role: 'treeitem' | 'group' = 'treeitem';\n\n  constructor(protected _elementRef: ElementRef,\n              protected _tree: CdkTree<T>,\n              @Attribute('tabindex') tabIndex: string) {\n    super(_elementRef, _tree);\n\n    this.tabIndex = Number(tabIndex) || 0;\n  }\n}\n\n/**\n * Wrapper for the CdkTree node definition with Material design styles.\n */\n@Directive({\n  selector: '[matTreeNodeDef]',\n  inputs: [\n    'when: matTreeNodeDefWhen'\n  ],\n  providers: [{provide: CdkTreeNodeDef, useExisting: MatTreeNodeDef}]\n})\nexport class MatTreeNodeDef<T> extends CdkTreeNodeDef<T> {\n  @Input('matTreeNode') data: T;\n}\n\n/**\n * Wrapper for the CdkTree nested node with Material design styles.\n */\n@Directive({\n  selector: 'mat-nested-tree-node',\n  exportAs: 'matNestedTreeNode',\n  host: {\n    '[attr.aria-expanded]': 'isExpanded',\n    '[attr.role]': 'role',\n    'class': 'mat-nested-tree-node',\n  },\n  inputs: ['disabled', 'tabIndex'],\n  providers: [\n    {provide: CdkNestedTreeNode, useExisting: MatNestedTreeNode},\n    {provide: CdkTreeNode, useExisting: MatNestedTreeNode}\n  ]\n})\nexport class MatNestedTreeNode<T> extends _MatNestedTreeNodeMixinBase<T>\n    implements AfterContentInit, CanDisable, HasTabIndex, OnDestroy {\n\n  @Input('matNestedTreeNode') node: T;\n\n  @ContentChildren(MatTreeNodeOutlet) nodeOutlet: QueryList<MatTreeNodeOutlet>;\n\n  constructor(protected _elementRef: ElementRef,\n              protected _tree: CdkTree<T>,\n              protected _differs: IterableDiffers,\n              @Attribute('tabindex') tabIndex: string) {\n    super(_elementRef, _tree, _differs);\n\n    this.tabIndex = Number(tabIndex) || 0;\n  }\n\n  // This is a workaround for https://github.com/angular/angular/issues/23091\n  // In aot mode, the lifecycle hooks from parent class are not called.\n  // TODO(tinayuangao): Remove when the angular issue #23091 is fixed\n  ngAfterContentInit() {\n    super.ngAfterContentInit();\n  }\n\n  ngOnDestroy() {\n    super.ngOnDestroy();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {CdkTreeNodePadding} from '@angular/cdk/tree';\nimport {Directive, Input} from '@angular/core';\n\n\n/**\n * Wrapper for the CdkTree padding with Material design styles.\n */\n@Directive({\n  selector: '[matTreeNodePadding]',\n  providers: [{provide: CdkTreeNodePadding, useExisting: MatTreeNodePadding}]\n})\nexport class MatTreeNodePadding<T> extends CdkTreeNodePadding<T> {\n\n  /** The level of depth of the tree node. The padding will be `level * indent` pixels. */\n  @Input('matTreeNodePadding') level: number;\n\n  /** The indent for each level. Default number 40px from material design menu sub-menu spec. */\n  @Input('matTreeNodePaddingIndent') indent: number;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ChangeDetectionStrategy, Component, ViewChild, ViewEncapsulation} from '@angular/core';\nimport {CdkTree} from '@angular/cdk/tree';\nimport {MatTreeNodeOutlet} from './outlet';\n\n/**\n * Wrapper for the CdkTable with Material design styles.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-tree',\n  exportAs: 'matTree',\n  template: `<ng-container matTreeNodeOutlet></ng-container>`,\n  host: {\n    'class': 'mat-tree',\n    'role': 'tree',\n  },\n  styleUrls: ['tree.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  providers: [{provide: CdkTree, useExisting: MatTree}]\n})\nexport class MatTree<T> extends CdkTree<T> {\n  // Outlets within the tree's template where the dataNodes will be inserted.\n  @ViewChild(MatTreeNodeOutlet) _nodeOutlet: MatTreeNodeOutlet;\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, Input} from '@angular/core';\nimport {CdkTreeNodeToggle} from '@angular/cdk/tree';\n\n/**\n * Wrapper for the CdkTree's toggle with Material design styles.\n */\n@Directive({\n  selector: '[matTreeNodeToggle]',\n  host: {\n    '(click)': '_toggle($event)',\n  },\n  providers: [{provide: CdkTreeNodeToggle, useExisting: MatTreeNodeToggle}]\n})\nexport class MatTreeNodeToggle<T> extends CdkTreeNodeToggle<T> {\n  @Input('matTreeNodeToggleRecursive') recursive: boolean = false;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\n\nimport {CdkTreeModule} from '@angular/cdk/tree';\nimport {CommonModule} from '@angular/common';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatNestedTreeNode, MatTreeNodeDef, MatTreeNode} from './node';\nimport {MatTree} from './tree';\nimport {MatTreeNodeToggle} from './toggle';\nimport {MatTreeNodeOutlet} from './outlet';\nimport {MatTreeNodePadding} from './padding';\n\nconst MAT_TREE_DIRECTIVES = [\n  MatNestedTreeNode,\n  MatTreeNodeDef,\n  MatTreeNodePadding,\n  MatTreeNodeToggle,\n  MatTree,\n  MatTreeNode,\n  MatTreeNodeOutlet\n];\n\n@NgModule({\n  imports: [CdkTreeModule, CommonModule, MatCommonModule],\n  exports: MAT_TREE_DIRECTIVES,\n  declarations: MAT_TREE_DIRECTIVES,\n})\nexport class MatTreeModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CollectionViewer, DataSource} from '@angular/cdk/collections';\nimport {FlatTreeControl, TreeControl} from '@angular/cdk/tree';\nimport {BehaviorSubject, merge, Observable} from 'rxjs';\nimport {map, take} from 'rxjs/operators';\n\n\n/**\n * Tree flattener to convert a normal type of node to node with children & level information.\n * Transform nested nodes of type `T` to flattened nodes of type `F`.\n *\n * For example, the input data of type `T` is nested, and contains its children data:\n *   SomeNode: {\n *     key: 'Fruits',\n *     children: [\n *       NodeOne: {\n *         key: 'Apple',\n *       },\n *       NodeTwo: {\n *        key: 'Pear',\n *      }\n *    ]\n *  }\n *  After flattener flatten the tree, the structure will become\n *  SomeNode: {\n *    key: 'Fruits',\n *    expandable: true,\n *    level: 1\n *  },\n *  NodeOne: {\n *    key: 'Apple',\n *    expandable: false,\n *    level: 2\n *  },\n *  NodeTwo: {\n *   key: 'Pear',\n *   expandable: false,\n *   level: 2\n * }\n * and the output flattened type is `F` with additional information.\n */\nexport class MatTreeFlattener<T, F> {\n\n  constructor(public transformFunction: (node: T, level: number) => F,\n              public getLevel: (node: F) => number,\n              public isExpandable: (node: F) => boolean,\n              public getChildren: (node: T) => Observable<T[]>) {}\n\n  _flattenNode(node: T, level: number,\n               resultNodes: F[], parentMap: boolean[]): F[] {\n    const flatNode = this.transformFunction(node, level);\n    resultNodes.push(flatNode);\n\n    if (this.isExpandable(flatNode)) {\n      this.getChildren(node).pipe(take(1)).subscribe(children => {\n        children.forEach((child, index) => {\n          let childParentMap: boolean[] = parentMap.slice();\n          childParentMap.push(index != children.length - 1);\n          this._flattenNode(child, level + 1, resultNodes, childParentMap);\n        });\n      });\n    }\n    return resultNodes;\n  }\n\n  /**\n   * Flatten a list of node type T to flattened version of node F.\n   * Please note that type T may be nested, and the length of `structuredData` may be different\n   * from that of returned list `F[]`.\n   */\n  flattenNodes(structuredData: T[]): F[] {\n    let resultNodes: F[] = [];\n    structuredData.forEach(node => this._flattenNode(node, 0, resultNodes, []));\n    return resultNodes;\n  }\n\n  /**\n   * Expand flattened node with current expansion status.\n   * The returned list may have different length.\n   */\n  expandFlattenedNodes(nodes: F[], treeControl: TreeControl<F>): F[] {\n    let results: F[] = [];\n    let currentExpand: boolean[] = [];\n    currentExpand[0] = true;\n\n    nodes.forEach((node) => {\n      let expand = true;\n      for (let i = 0; i <= this.getLevel(node); i++) {\n        expand = expand && currentExpand[i];\n      }\n      if (expand) {\n        results.push(node);\n      }\n      if (this.isExpandable(node)) {\n        currentExpand[this.getLevel(node) + 1] = treeControl.isExpanded(node);\n      }\n    });\n    return results;\n  }\n}\n\n\n/**\n * Data source for flat tree.\n * The data source need to handle expansion/collapsion of the tree node and change the data feed\n * to `MatTree`.\n * The nested tree nodes of type `T` are flattened through `MatTreeFlattener`, and converted\n * to type `F` for `MatTree` to consume.\n */\nexport class MatTreeFlatDataSource<T, F> extends DataSource<F> {\n  _flattenedData = new BehaviorSubject<F[]>([]);\n\n  _expandedData = new BehaviorSubject<F[]>([]);\n\n  _data: BehaviorSubject<T[]>;\n  get data() { return this._data.value; }\n  set data(value: T[]) {\n    this._data.next(value);\n    this._flattenedData.next(this.treeFlattener.flattenNodes(this.data));\n    this.treeControl.dataNodes = this._flattenedData.value;\n  }\n\n  constructor(private treeControl: FlatTreeControl<F>,\n              private treeFlattener: MatTreeFlattener<T, F>,\n              initialData: T[] = []) {\n    super();\n    this._data = new BehaviorSubject<T[]>(initialData);\n  }\n\n  connect(collectionViewer: CollectionViewer): Observable<F[]> {\n    const changes = [\n      collectionViewer.viewChange,\n      this.treeControl.expansionModel.onChange!,\n      this._flattenedData\n    ];\n    return merge(...changes).pipe(map(() => {\n      this._expandedData.next(\n        this.treeFlattener.expandFlattenedNodes(this._flattenedData.value, this.treeControl));\n      return this._expandedData.value;\n    }));\n  }\n\n  disconnect() {\n    // no op\n  }\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CollectionViewer, DataSource} from '@angular/cdk/collections';\nimport {BehaviorSubject, merge, Observable} from 'rxjs';\nimport {map} from 'rxjs/operators';\n\n\n/**\n * Data source for nested tree.\n *\n * The data source for nested tree doesn't have to consider node flattener, or the way to expand\n * or collapse. The expansion/collapsion will be handled by TreeControl and each non-leaf node.\n */\nexport class MatTreeNestedDataSource<T> extends DataSource<T> {\n  _data = new BehaviorSubject<T[]>([]);\n\n  /**\n   * Data for the nested treee\n   */\n  get data() { return this._data.value; }\n  set data(value: T[]) { this._data.next(value); }\n\n  connect(collectionViewer: CollectionViewer): Observable<T[]> {\n    return merge(...[collectionViewer.viewChange, this._data])\n      .pipe(map(() => {\n        return this.data;\n      }));\n  }\n\n  disconnect() {\n    // no op\n  }\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Version} from '@angular/core';\n\n/** Current version of Angular Material. */\nexport const VERSION = new Version('6.2.1-0be9c4e');\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {Directionality} from '@angular/cdk/bidi';\nimport {DOWN_ARROW, ENTER, ESCAPE, TAB, UP_ARROW} from '@angular/cdk/keycodes';\nimport {\n  FlexibleConnectedPositionStrategy,\n  Overlay,\n  OverlayConfig,\n  OverlayRef,\n  PositionStrategy,\n  ScrollStrategy,\n  ViewportRuler,\n} from '@angular/cdk/overlay';\nimport {TemplatePortal} from '@angular/cdk/portal';\nimport {DOCUMENT} from '@angular/common';\nimport {filter, take, switchMap, delay, tap, map} from 'rxjs/operators';\nimport {\n  ChangeDetectorRef,\n  Directive,\n  ElementRef,\n  forwardRef,\n  Host,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  ViewContainerRef,\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {\n  _countGroupLabelsBeforeOption,\n  _getOptionScrollPosition,\n  MatOption,\n  MatOptionSelectionChange,\n} from '@angular/material/core';\nimport {MatFormField} from '@angular/material/form-field';\nimport {Subscription, defer, fromEvent, merge, of as observableOf, Subject, Observable} from 'rxjs';\nimport {MatAutocomplete} from './autocomplete';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {MatAutocompleteOrigin} from './autocomplete-origin';\n\n\n/**\n * The following style constants are necessary to save here in order\n * to properly calculate the scrollTop of the panel. Because we are not\n * actually focusing the active item, scroll must be handled manually.\n */\n\n/** The height of each autocomplete option. */\nexport const AUTOCOMPLETE_OPTION_HEIGHT = 48;\n\n/** The total height of the autocomplete panel. */\nexport const AUTOCOMPLETE_PANEL_HEIGHT = 256;\n\n/** Injection token that determines the scroll handling while the autocomplete panel is open. */\nexport const MAT_AUTOCOMPLETE_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mat-autocomplete-scroll-strategy');\n\n/** @docs-private */\nexport function MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY(overlay: Overlay): () => ScrollStrategy {\n  return () => overlay.scrollStrategies.reposition();\n}\n\n/** @docs-private */\nexport const MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY_PROVIDER = {\n  provide: MAT_AUTOCOMPLETE_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY,\n};\n\n/**\n * Provider that allows the autocomplete to register as a ControlValueAccessor.\n * @docs-private\n */\nexport const MAT_AUTOCOMPLETE_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatAutocompleteTrigger),\n  multi: true\n};\n\n/**\n * Creates an error to be thrown when attempting to use an autocomplete trigger without a panel.\n */\nexport function getMatAutocompleteMissingPanelError(): Error {\n  return Error('Attempting to open an undefined instance of `mat-autocomplete`. ' +\n               'Make sure that the id passed to the `matAutocomplete` is correct and that ' +\n               'you\\'re attempting to open it after the ngAfterContentInit hook.');\n}\n\n\n@Directive({\n  selector: `input[matAutocomplete], textarea[matAutocomplete]`,\n  host: {\n    'autocomplete': 'off',\n    '[attr.role]': 'autocompleteDisabled ? null : \"combobox\"',\n    '[attr.aria-autocomplete]': 'autocompleteDisabled ? null : \"list\"',\n    '[attr.aria-activedescendant]': 'activeOption?.id',\n    '[attr.aria-expanded]': 'autocompleteDisabled ? null : panelOpen.toString()',\n    '[attr.aria-owns]': 'autocompleteDisabled ? null : autocomplete?.id',\n    // Note: we use `focusin`, as opposed to `focus`, in order to open the panel\n    // a little earlier. This avoids issues where IE delays the focusing of the input.\n    '(focusin)': '_handleFocus()',\n    '(blur)': '_onTouched()',\n    '(input)': '_handleInput($event)',\n    '(keydown)': '_handleKeydown($event)',\n  },\n  exportAs: 'matAutocompleteTrigger',\n  providers: [MAT_AUTOCOMPLETE_VALUE_ACCESSOR]\n})\nexport class MatAutocompleteTrigger implements ControlValueAccessor, OnDestroy {\n  private _overlayRef: OverlayRef | null;\n  private _portal: TemplatePortal;\n  private _componentDestroyed = false;\n  private _autocompleteDisabled = false;\n\n  /** Old value of the native input. Used to work around issues with the `input` event on IE. */\n  private _previousValue: string | number | null;\n\n  /** Strategy that is used to position the panel. */\n  private _positionStrategy: FlexibleConnectedPositionStrategy;\n\n  /** Whether or not the label state is being overridden. */\n  private _manuallyFloatingLabel = false;\n\n  /** The subscription for closing actions (some are bound to document). */\n  private _closingActionsSubscription: Subscription;\n\n  /** Subscription to viewport size changes. */\n  private _viewportSubscription = Subscription.EMPTY;\n\n  /** Stream of keyboard events that can close the panel. */\n  private readonly _closeKeyEventStream = new Subject<void>();\n\n  /** `View -> model callback called when value changes` */\n  _onChange: (value: any) => void = () => {};\n\n  /** `View -> model callback called when autocomplete has been touched` */\n  _onTouched = () => {};\n\n  /** The autocomplete panel to be attached to this trigger. */\n  @Input('matAutocomplete') autocomplete: MatAutocomplete;\n\n  /**\n   * Reference relative to which to position the autocomplete panel.\n   * Defaults to the autocomplete trigger element.\n   */\n  @Input('matAutocompleteConnectedTo') connectedTo: MatAutocompleteOrigin;\n\n  /**\n   * Whether the autocomplete is disabled. When disabled, the element will\n   * act as a regular input and the user won't be able to open the panel.\n   */\n  @Input('matAutocompleteDisabled')\n  get autocompleteDisabled(): boolean { return this._autocompleteDisabled; }\n  set autocompleteDisabled(value: boolean) {\n    this._autocompleteDisabled = coerceBooleanProperty(value);\n  }\n\n  constructor(private _element: ElementRef, private _overlay: Overlay,\n              private _viewContainerRef: ViewContainerRef,\n              private _zone: NgZone,\n              private _changeDetectorRef: ChangeDetectorRef,\n              @Inject(MAT_AUTOCOMPLETE_SCROLL_STRATEGY) private _scrollStrategy,\n              @Optional() private _dir: Directionality,\n              @Optional() @Host() private _formField: MatFormField,\n              @Optional() @Inject(DOCUMENT) private _document: any,\n              // @deletion-target 7.0.0 Make `_viewportRuler` required.\n              private _viewportRuler?: ViewportRuler) {}\n\n  ngOnDestroy() {\n    this._viewportSubscription.unsubscribe();\n    this._componentDestroyed = true;\n    this._destroyPanel();\n    this._closeKeyEventStream.complete();\n  }\n\n  /** Whether or not the autocomplete panel is open. */\n  get panelOpen(): boolean {\n    return this._overlayAttached && this.autocomplete.showPanel;\n  }\n  private _overlayAttached: boolean = false;\n\n  /** Opens the autocomplete suggestion panel. */\n  openPanel(): void {\n    this._attachOverlay();\n    this._floatLabel();\n  }\n\n  /** Closes the autocomplete suggestion panel. */\n  closePanel(): void {\n    this._resetLabel();\n\n    if (!this._overlayAttached) {\n      return;\n    }\n\n    if (this.panelOpen) {\n      // Only emit if the panel was visible.\n      this.autocomplete.closed.emit();\n    }\n\n    this.autocomplete._isOpen = this._overlayAttached = false;\n\n    if (this._overlayRef && this._overlayRef.hasAttached()) {\n      this._overlayRef.detach();\n      this._closingActionsSubscription.unsubscribe();\n    }\n\n    // Note that in some cases this can end up being called after the component is destroyed.\n    // Add a check to ensure that we don't try to run change detection on a destroyed view.\n    if (!this._componentDestroyed) {\n      // We need to trigger change detection manually, because\n      // `fromEvent` doesn't seem to do it at the proper time.\n      // This ensures that the label is reset when the\n      // user clicks outside.\n      this._changeDetectorRef.detectChanges();\n    }\n  }\n\n  /**\n   * A stream of actions that should close the autocomplete panel, including\n   * when an option is selected, on blur, and when TAB is pressed.\n   */\n  get panelClosingActions(): Observable<MatOptionSelectionChange|null> {\n    return merge(\n      this.optionSelections,\n      this.autocomplete._keyManager.tabOut.pipe(filter(() => this._overlayAttached)),\n      this._closeKeyEventStream,\n      this._outsideClickStream,\n      this._overlayRef ?\n          this._overlayRef.detachments().pipe(filter(() => this._overlayAttached)) :\n          observableOf()\n    ).pipe(\n      // Normalize the output so we return a consistent type.\n      map(event => event instanceof MatOptionSelectionChange ? event : null)\n    );\n  }\n\n  /** Stream of autocomplete option selections. */\n  readonly optionSelections: Observable<MatOptionSelectionChange> = defer(() => {\n    if (this.autocomplete && this.autocomplete.options) {\n     return merge(...this.autocomplete.options.map(option => option.onSelectionChange));\n    }\n\n    // If there are any subscribers before `ngAfterViewInit`, the `autocomplete` will be undefined.\n    // Return a stream that we'll replace with the real one once everything is in place.\n    return this._zone.onStable\n        .asObservable()\n        .pipe(take(1), switchMap(() => this.optionSelections));\n  });\n\n  /** The currently active option, coerced to MatOption type. */\n  get activeOption(): MatOption | null {\n    if (this.autocomplete && this.autocomplete._keyManager) {\n      return this.autocomplete._keyManager.activeItem;\n    }\n\n    return null;\n  }\n\n  /** Stream of clicks outside of the autocomplete panel. */\n  private get _outsideClickStream(): Observable<any> {\n    if (!this._document) {\n      return observableOf(null);\n    }\n\n    return merge(\n      fromEvent(this._document, 'click'),\n      fromEvent(this._document, 'touchend')\n    )\n    .pipe(filter((event: MouseEvent | TouchEvent) => {\n      const clickTarget = event.target as HTMLElement;\n      const formField = this._formField ?\n          this._formField._elementRef.nativeElement : null;\n\n      return this._overlayAttached &&\n              clickTarget !== this._element.nativeElement &&\n              (!formField || !formField.contains(clickTarget)) &&\n              (!!this._overlayRef && !this._overlayRef.overlayElement.contains(clickTarget));\n    }));\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  writeValue(value: any): void {\n    Promise.resolve(null).then(() => this._setTriggerValue(value));\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnChange(fn: (value: any) => {}): void {\n    this._onChange = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnTouched(fn: () => {}) {\n    this._onTouched = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  setDisabledState(isDisabled: boolean) {\n    this._element.nativeElement.disabled = isDisabled;\n  }\n\n  _handleKeydown(event: KeyboardEvent): void {\n    const keyCode = event.keyCode;\n\n    // Prevent the default action on all escape key presses. This is here primarily to bring IE\n    // in line with other browsers. By default, pressing escape on IE will cause it to revert\n    // the input value to the one that it had on focus, however it won't dispatch any events\n    // which means that the model value will be out of sync with the view.\n    if (keyCode === ESCAPE) {\n      event.preventDefault();\n    }\n\n    // Close when pressing ESCAPE or ALT + UP_ARROW, based on the a11y guidelines.\n    // See: https://www.w3.org/TR/wai-aria-practices-1.1/#textbox-keyboard-interaction\n    if (this.panelOpen && (keyCode === ESCAPE || (keyCode === UP_ARROW && event.altKey))) {\n      this._resetActiveItem();\n      this._closeKeyEventStream.next();\n      event.stopPropagation();\n    } else if (this.activeOption && keyCode === ENTER && this.panelOpen) {\n      this.activeOption._selectViaInteraction();\n      this._resetActiveItem();\n      event.preventDefault();\n    } else {\n      const prevActiveItem = this.autocomplete._keyManager.activeItem;\n      const isArrowKey = keyCode === UP_ARROW || keyCode === DOWN_ARROW;\n\n      if (this.panelOpen || keyCode === TAB) {\n        this.autocomplete._keyManager.onKeydown(event);\n      } else if (isArrowKey && this._canOpen()) {\n        this.openPanel();\n      }\n\n      if (isArrowKey || this.autocomplete._keyManager.activeItem !== prevActiveItem) {\n        this._scrollToOption();\n      }\n    }\n  }\n\n  _handleInput(event: KeyboardEvent): void {\n    let target = event.target as HTMLInputElement;\n    let value: number | string | null = target.value;\n\n    // Based on `NumberValueAccessor` from forms.\n    if (target.type === 'number') {\n      value = value == '' ? null : parseFloat(value);\n    }\n\n    // If the input has a placeholder, IE will fire the `input` event on page load,\n    // focus and blur, in addition to when the user actually changed the value. To\n    // filter out all of the extra events, we save the value on focus and between\n    // `input` events, and we check whether it changed.\n    // See: https://connect.microsoft.com/IE/feedback/details/885747/\n    if (this._canOpen() && this._previousValue !== value &&\n      document.activeElement === event.target) {\n      this._previousValue = value;\n      this._onChange(value);\n      this.openPanel();\n    }\n  }\n\n  _handleFocus(): void {\n    if (this._canOpen()) {\n      this._previousValue = this._element.nativeElement.value;\n      this._attachOverlay();\n      this._floatLabel(true);\n    }\n  }\n\n  /**\n   * In \"auto\" mode, the label will animate down as soon as focus is lost.\n   * This causes the value to jump when selecting an option with the mouse.\n   * This method manually floats the label until the panel can be closed.\n   * @param shouldAnimate Whether the label should be animated when it is floated.\n   */\n  private _floatLabel(shouldAnimate = false): void {\n    if (this._formField && this._formField.floatLabel === 'auto') {\n      if (shouldAnimate) {\n        this._formField._animateAndLockLabel();\n      } else {\n        this._formField.floatLabel = 'always';\n      }\n\n      this._manuallyFloatingLabel = true;\n    }\n  }\n\n  /** If the label has been manually elevated, return it to its normal state. */\n  private _resetLabel(): void  {\n    if (this._manuallyFloatingLabel) {\n      this._formField.floatLabel = 'auto';\n      this._manuallyFloatingLabel = false;\n    }\n  }\n\n  /**\n   * Given that we are not actually focusing active options, we must manually adjust scroll\n   * to reveal options below the fold. First, we find the offset of the option from the top\n   * of the panel. If that offset is below the fold, the new scrollTop will be the offset -\n   * the panel height + the option height, so the active option will be just visible at the\n   * bottom of the panel. If that offset is above the top of the visible panel, the new scrollTop\n   * will become the offset. If that offset is visible within the panel already, the scrollTop is\n   * not adjusted.\n   */\n  private _scrollToOption(): void {\n    const index = this.autocomplete._keyManager.activeItemIndex || 0;\n    const labelCount = _countGroupLabelsBeforeOption(index,\n        this.autocomplete.options, this.autocomplete.optionGroups);\n\n    const newScrollPosition = _getOptionScrollPosition(\n      index + labelCount,\n      AUTOCOMPLETE_OPTION_HEIGHT,\n      this.autocomplete._getScrollTop(),\n      AUTOCOMPLETE_PANEL_HEIGHT\n    );\n\n    this.autocomplete._setScrollTop(newScrollPosition);\n  }\n\n  /**\n   * This method listens to a stream of panel closing actions and resets the\n   * stream every time the option list changes.\n   */\n  private _subscribeToClosingActions(): Subscription {\n    const firstStable = this._zone.onStable.asObservable().pipe(take(1));\n    const optionChanges = this.autocomplete.options.changes.pipe(\n      tap(() => this._positionStrategy.reapplyLastPosition()),\n      // Defer emitting to the stream until the next tick, because changing\n      // bindings in here will cause \"changed after checked\" errors.\n      delay(0)\n    );\n\n    // When the zone is stable initially, and when the option list changes...\n    return merge(firstStable, optionChanges)\n      .pipe(\n        // create a new stream of panelClosingActions, replacing any previous streams\n        // that were created, and flatten it so our stream only emits closing events...\n        switchMap(() => {\n          this._resetActiveItem();\n          this.autocomplete._setVisibility();\n          return this.panelClosingActions;\n        }),\n        // when the first closing event occurs...\n        take(1)\n      )\n      // set the value, close the panel, and complete.\n      .subscribe(event => this._setValueAndClose(event));\n  }\n\n  /** Destroys the autocomplete suggestion panel. */\n  private _destroyPanel(): void {\n    if (this._overlayRef) {\n      this.closePanel();\n      this._overlayRef.dispose();\n      this._overlayRef = null;\n    }\n  }\n\n  private _setTriggerValue(value: any): void {\n    const toDisplay = this.autocomplete && this.autocomplete.displayWith ?\n      this.autocomplete.displayWith(value) :\n      value;\n\n    // Simply falling back to an empty string if the display value is falsy does not work properly.\n    // The display value can also be the number zero and shouldn't fall back to an empty string.\n    const inputValue = toDisplay != null ? toDisplay : '';\n\n    // If it's used within a `MatFormField`, we should set it through the property so it can go\n    // through change detection.\n    if (this._formField) {\n      this._formField._control.value = inputValue;\n    } else {\n      this._element.nativeElement.value = inputValue;\n    }\n  }\n\n  /**\n   * This method closes the panel, and if a value is specified, also sets the associated\n   * control to that value. It will also mark the control as dirty if this interaction\n   * stemmed from the user.\n   */\n  private _setValueAndClose(event: MatOptionSelectionChange | null): void {\n    if (event && event.source) {\n      this._clearPreviousSelectedOption(event.source);\n      this._setTriggerValue(event.source.value);\n      this._onChange(event.source.value);\n      this._element.nativeElement.focus();\n      this.autocomplete._emitSelectEvent(event.source);\n    }\n\n    this.closePanel();\n  }\n\n  /**\n   * Clear any previous selected option and emit a selection change event for this option\n   */\n  private _clearPreviousSelectedOption(skip: MatOption) {\n    this.autocomplete.options.forEach(option => {\n      if (option != skip && option.selected) {\n        option.deselect();\n      }\n    });\n  }\n\n  private _attachOverlay(): void {\n    if (!this.autocomplete) {\n      throw getMatAutocompleteMissingPanelError();\n    }\n\n    if (!this._overlayRef) {\n      this._portal = new TemplatePortal(this.autocomplete.template, this._viewContainerRef);\n      this._overlayRef = this._overlay.create(this._getOverlayConfig());\n\n      if (this._viewportRuler) {\n        this._viewportSubscription = this._viewportRuler.change().subscribe(() => {\n          if (this.panelOpen && this._overlayRef) {\n            this._overlayRef.updateSize({width: this._getHostWidth()});\n          }\n        });\n      }\n    } else {\n      // Update the panel width and direction, in case anything has changed.\n      this._overlayRef.updateSize({width: this._getHostWidth()});\n    }\n\n    if (this._overlayRef && !this._overlayRef.hasAttached()) {\n      this._overlayRef.attach(this._portal);\n      this._closingActionsSubscription = this._subscribeToClosingActions();\n    }\n\n    const wasOpen = this.panelOpen;\n\n    this.autocomplete._setVisibility();\n    this.autocomplete._isOpen = this._overlayAttached = true;\n\n    // We need to do an extra `panelOpen` check in here, because the\n    // autocomplete won't be shown if there are no options.\n    if (this.panelOpen && wasOpen !== this.panelOpen) {\n      this.autocomplete.opened.emit();\n    }\n  }\n\n  private _getOverlayConfig(): OverlayConfig {\n    return new OverlayConfig({\n      positionStrategy: this._getOverlayPosition(),\n      scrollStrategy: this._scrollStrategy(),\n      width: this._getHostWidth(),\n      direction: this._dir\n    });\n  }\n\n  private _getOverlayPosition(): PositionStrategy {\n    this._positionStrategy = this._overlay.position()\n      .flexibleConnectedTo(this._getConnectedElement())\n      .withFlexibleDimensions(false)\n      .withPush(false)\n      .withPositions([\n        {originX: 'start', originY: 'bottom', overlayX: 'start', overlayY: 'top'},\n        {originX: 'start', originY: 'top', overlayX: 'start', overlayY: 'bottom'}\n      ]);\n\n    return this._positionStrategy;\n  }\n\n  private _getConnectedElement(): ElementRef {\n    if (this.connectedTo) {\n      return this.connectedTo.elementRef;\n    }\n\n    return this._formField ? this._formField.getConnectedOverlayOrigin() : this._element;\n  }\n\n  /** Returns the width of the input element, so the panel width can match it. */\n  private _getHostWidth(): number {\n    return this._getConnectedElement().nativeElement.getBoundingClientRect().width;\n  }\n\n  /**\n   * Resets the active item to -1 so arrow events will activate the\n   * correct options, or to 0 if the consumer opted into it.\n   */\n  private _resetActiveItem(): void {\n    this.autocomplete._keyManager.setActiveItem(this.autocomplete.autoActiveFirstOption ? 0 : -1);\n  }\n\n  /** Determines whether the panel can be opened. */\n  private _canOpen(): boolean {\n    const element: HTMLInputElement = this._element.nativeElement;\n    return !element.readOnly && !element.disabled && !this._autocompleteDisabled;\n  }\n\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * When constructing a Date, the month is zero-based. This can be confusing, since people are\n * used to seeing them one-based. So we create these aliases to make writing the tests easier.\n */\nexport const JAN = 0, FEB = 1, MAR = 2, APR = 3, MAY = 4, JUN = 5, JUL = 6, AUG = 7, SEP = 8,\n    OCT = 9, NOV = 10, DEC = 11;\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor} from '@angular/cdk/a11y';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  Input,\n  OnDestroy,\n  ViewEncapsulation,\n  TemplateRef,\n} from '@angular/core';\nimport {Subscription} from 'rxjs';\nimport {MatStepLabel} from './step-label';\nimport {MatStepperIntl} from './stepper-intl';\nimport {MatStepperIconContext} from './stepper-icon';\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-step-header',\n  templateUrl: 'step-header.html',\n  styleUrls: ['step-header.css'],\n  host: {\n    'class': 'mat-step-header',\n    'role': 'tab',\n  },\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatStepHeader implements OnDestroy {\n  private _intlSubscription: Subscription;\n\n  /** State of the given step. */\n  @Input() state: string;\n\n  /** Label of the given step. */\n  @Input() label: MatStepLabel | string;\n\n  /** Overrides for the header icons, passed in via the stepper. */\n  @Input() iconOverrides: {[key: string]: TemplateRef<MatStepperIconContext>};\n\n  /** Index of the given step. */\n  @Input() index: number;\n\n  /** Whether the given step is selected. */\n  @Input() selected: boolean;\n\n  /** Whether the given step label is active. */\n  @Input() active: boolean;\n\n  /** Whether the given step is optional. */\n  @Input() optional: boolean;\n\n  constructor(\n    public _intl: MatStepperIntl,\n    private _focusMonitor: FocusMonitor,\n    private _element: ElementRef,\n    changeDetectorRef: ChangeDetectorRef) {\n    _focusMonitor.monitor(_element.nativeElement, true);\n    this._intlSubscription = _intl.changes.subscribe(() => changeDetectorRef.markForCheck());\n  }\n\n  ngOnDestroy() {\n    this._intlSubscription.unsubscribe();\n    this._focusMonitor.stopMonitoring(this._element.nativeElement);\n  }\n\n  /** Returns string label of given step if it is a text label. */\n  _stringLabel(): string | null {\n    return this.label instanceof MatStepLabel ? null : this.label;\n  }\n\n  /** Returns MatStepLabel if the label of given step is a template label. */\n  _templateLabel(): MatStepLabel | null {\n    return this.label instanceof MatStepLabel ? this.label : null;\n  }\n\n  /** Returns the host HTML element. */\n  _getHostElement() {\n    return this._element.nativeElement;\n  }\n\n  /** Template context variables that are exposed to the `matStepperIcon` instances. */\n  _getIconContext(): MatStepperIconContext {\n    return {\n      index: this.index,\n      active: this.active,\n      optional: this.optional\n    };\n  }\n\n  focus() {\n    this._getHostElement().focus();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/** Animations used by the Material steppers. */\nexport const matStepperAnimations: {\n  readonly horizontalStepTransition: AnimationTriggerMetadata;\n  readonly verticalStepTransition: AnimationTriggerMetadata;\n} = {\n  /** Animation that transitions the step along the X axis in a horizontal stepper. */\n  horizontalStepTransition: trigger('stepTransition', [\n    state('previous', style({transform: 'translate3d(-100%, 0, 0)', visibility: 'hidden'})),\n    state('current', style({transform: 'none', visibility: 'visible'})),\n    state('next', style({transform: 'translate3d(100%, 0, 0)', visibility: 'hidden'})),\n    transition('* => *', animate('500ms cubic-bezier(0.35, 0, 0.25, 1)'))\n  ]),\n\n  /** Animation that transitions the step along the Y axis in a vertical stepper. */\n  verticalStepTransition: trigger('stepTransition', [\n    state('previous', style({height: '0px', visibility: 'hidden'})),\n    state('next', style({height: '0px', visibility: 'hidden'})),\n    state('current', style({height: '*', visibility: 'visible'})),\n    transition('* <=> current', animate('225ms cubic-bezier(0.4, 0.0, 0.2, 1)'))\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, Input, TemplateRef} from '@angular/core';\n\n/** Template context available to an attached `matStepperIcon`. */\nexport interface MatStepperIconContext {\n  /** Index of the step. */\n  index: number;\n  /** Whether the step is currently active. */\n  active: boolean;\n  /** Whether the step is optional. */\n  optional: boolean;\n}\n\n/**\n * Template to be used to override the icons inside the step header.\n */\n@Directive({\n  selector: 'ng-template[matStepperIcon]',\n})\nexport class MatStepperIcon {\n  /** Name of the icon to be overridden. */\n  @Input('matStepperIcon') name: 'edit' | 'done' | 'number';\n\n  constructor(public templateRef: TemplateRef<MatStepperIconContext>) {}\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directionality} from '@angular/cdk/bidi';\nimport {CdkStep, CdkStepper, StepContentPositionState} from '@angular/cdk/stepper';\nimport {AnimationEvent} from '@angular/animations';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  ContentChildren,\n  Directive,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Optional,\n  Output,\n  QueryList,\n  SkipSelf,\n  TemplateRef,\n  ViewChildren,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {FormControl, FormGroupDirective, NgForm} from '@angular/forms';\nimport {ErrorStateMatcher} from '@angular/material/core';\nimport {MatStepHeader} from './step-header';\nimport {MatStepLabel} from './step-label';\nimport {takeUntil} from 'rxjs/operators';\nimport {matStepperAnimations} from './stepper-animations';\nimport {MatStepperIcon, MatStepperIconContext} from './stepper-icon';\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-step',\n  templateUrl: 'step.html',\n  providers: [{provide: ErrorStateMatcher, useExisting: MatStep}],\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matStep',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatStep extends CdkStep implements ErrorStateMatcher {\n  /** Content for step label given by `<ng-template matStepLabel>`. */\n  @ContentChild(MatStepLabel) stepLabel: MatStepLabel;\n\n  constructor(@Inject(forwardRef(() => MatStepper)) stepper: MatStepper,\n              @SkipSelf() private _errorStateMatcher: ErrorStateMatcher) {\n    super(stepper);\n  }\n\n  /** Custom error state matcher that additionally checks for validity of interacted form. */\n  isErrorState(control: FormControl | null, form: FormGroupDirective | NgForm | null): boolean {\n    const originalErrorState = this._errorStateMatcher.isErrorState(control, form);\n\n    // Custom error state checks for the validity of form that is not submitted or touched\n    // since user can trigger a form change by calling for another step without directly\n    // interacting with the current form.\n    const customErrorState = !!(control && control.invalid && this.interacted);\n\n    return originalErrorState || customErrorState;\n  }\n}\n\n\n@Directive({\n  selector: '[matStepper]'\n})\nexport class MatStepper extends CdkStepper implements AfterContentInit {\n  /** The list of step headers of the steps in the stepper. */\n  @ViewChildren(MatStepHeader) _stepHeader: QueryList<MatStepHeader>;\n\n  /** Steps that the stepper holds. */\n  @ContentChildren(MatStep) _steps: QueryList<MatStep>;\n\n  /** Custom icon overrides passed in by the consumer. */\n  @ContentChildren(MatStepperIcon) _icons: QueryList<MatStepperIcon>;\n\n  /** Event emitted when the current step is done transitioning in. */\n  @Output() readonly animationDone: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Consumer-specified template-refs to be used to override the header icons. */\n  _iconOverrides: {[key: string]: TemplateRef<MatStepperIconContext>} = {};\n\n  ngAfterContentInit() {\n    const icons = this._icons.toArray();\n\n    ['edit', 'done', 'number'].forEach(name => {\n      const override = icons.find(icon => icon.name === name);\n\n      if (override) {\n        this._iconOverrides[name] = override.templateRef;\n      }\n    });\n\n    // Mark the component for change detection whenever the content children query changes\n    this._steps.changes.pipe(takeUntil(this._destroyed)).subscribe(() => this._stateChanged());\n  }\n\n  _animationDone(event: AnimationEvent) {\n    if ((event.toState as StepContentPositionState) === 'current') {\n      this.animationDone.emit();\n    }\n  }\n}\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-horizontal-stepper',\n  exportAs: 'matHorizontalStepper',\n  templateUrl: 'stepper-horizontal.html',\n  styleUrls: ['stepper.css'],\n  inputs: ['selectedIndex'],\n  host: {\n    'class': 'mat-stepper-horizontal',\n    'aria-orientation': 'horizontal',\n    'role': 'tablist',\n  },\n  animations: [matStepperAnimations.horizontalStepTransition],\n  providers: [{provide: MatStepper, useExisting: MatHorizontalStepper}],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatHorizontalStepper extends MatStepper { }\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-vertical-stepper',\n  exportAs: 'matVerticalStepper',\n  templateUrl: 'stepper-vertical.html',\n  styleUrls: ['stepper.css'],\n  inputs: ['selectedIndex'],\n  host: {\n    'class': 'mat-stepper-vertical',\n    'aria-orientation': 'vertical',\n    'role': 'tablist',\n  },\n  animations: [matStepperAnimations.verticalStepTransition],\n  providers: [{provide: MatStepper, useExisting: MatVerticalStepper}],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatVerticalStepper extends MatStepper {\n  constructor(@Optional() dir: Directionality, changeDetectorRef: ChangeDetectorRef) {\n    super(dir, changeDetectorRef);\n    this._orientation = 'vertical';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive} from '@angular/core';\nimport {CdkStepper, CdkStepperNext, CdkStepperPrevious} from '@angular/cdk/stepper';\nimport {MatStepper} from './stepper';\n\n/** Button that moves to the next step in a stepper workflow. */\n@Directive({\n  selector: 'button[matStepperNext]',\n  host: {\n    '(click)': '_stepper.next()',\n    '[type]': 'type',\n  },\n  inputs: ['type'],\n  providers: [{provide: CdkStepper, useExisting: MatStepper}]\n})\nexport class MatStepperNext extends CdkStepperNext {}\n\n/** Button that moves to the previous step in a stepper workflow. */\n@Directive({\n  selector: 'button[matStepperPrevious]',\n  host: {\n    '(click)': '_stepper.previous()',\n    '[type]': 'type',\n  },\n  inputs: ['type'],\n  providers: [{provide: CdkStepper, useExisting: MatStepper}]\n})\nexport class MatStepperPrevious extends CdkStepperPrevious {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {PortalModule} from '@angular/cdk/portal';\nimport {CdkStepperModule} from '@angular/cdk/stepper';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatButtonModule} from '@angular/material/button';\nimport {ErrorStateMatcher, MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {MatIconModule} from '@angular/material/icon';\nimport {MatStepHeader} from './step-header';\nimport {MatStepLabel} from './step-label';\nimport {MatHorizontalStepper, MatStep, MatStepper, MatVerticalStepper} from './stepper';\nimport {MatStepperNext, MatStepperPrevious} from './stepper-button';\nimport {MatStepperIcon} from './stepper-icon';\nimport {MatStepperIntl} from './stepper-intl';\n\n\n@NgModule({\n  imports: [\n    MatCommonModule,\n    CommonModule,\n    PortalModule,\n    MatButtonModule,\n    CdkStepperModule,\n    MatIconModule,\n    MatRippleModule,\n  ],\n  exports: [\n    MatCommonModule,\n    MatHorizontalStepper,\n    MatVerticalStepper,\n    MatStep,\n    MatStepLabel,\n    MatStepper,\n    MatStepperNext,\n    MatStepperPrevious,\n    MatStepHeader,\n    MatStepperIcon,\n  ],\n  declarations: [\n    MatHorizontalStepper,\n    MatVerticalStepper,\n    MatStep,\n    MatStepLabel,\n    MatStepper,\n    MatStepperNext,\n    MatStepperPrevious,\n    MatStepHeader,\n    MatStepperIcon,\n  ],\n  providers: [MatStepperIntl, ErrorStateMatcher],\n})\nexport class MatStepperModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  IterableDiffers,\n  Optional,\n  ViewEncapsulation\n} from '@angular/core';\nimport {CDK_TABLE_TEMPLATE, CdkTable} from '@angular/cdk/table';\nimport {Directionality} from '@angular/cdk/bidi';\n\n/**\n * Wrapper for the CdkTable with Material design styles.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-table, table[mat-table]',\n  exportAs: 'matTable',\n  template: CDK_TABLE_TEMPLATE,\n  styleUrls: ['table.css'],\n  host: {\n    'class': 'mat-table',\n  },\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatTable<T> extends CdkTable<T> {\n  /** Overrides the sticky CSS class set by the `CdkTable`. */\n  protected stickyCssClass = 'mat-table-sticky';\n\n  // TODO(andrewseguin): Remove this explicitly set constructor when the compiler knows how to\n  // properly build the es6 version of the class. Currently sets ctorParameters to empty due to a\n  // fixed bug.\n  // https://github.com/angular/tsickle/pull/760 - tsickle PR that fixed this\n  // https://github.com/angular/angular/pull/23531 - updates compiler-cli to fixed version\n  constructor(protected _differs: IterableDiffers,\n              protected _changeDetectorRef: ChangeDetectorRef,\n              protected _elementRef: ElementRef,\n              @Attribute('role') role: string,\n              @Optional() protected readonly _dir: Directionality) {\n    super(_differs, _changeDetectorRef, _elementRef, role, _dir);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, ElementRef, Input, TemplateRef} from '@angular/core';\nimport {\n  CdkCell,\n  CdkCellDef,\n  CdkColumnDef, CdkFooterCell, CdkFooterCellDef,\n  CdkHeaderCell,\n  CdkHeaderCellDef,\n} from '@angular/cdk/table';\n\n/**\n * Cell definition for the mat-table.\n * Captures the template of a column's data row cell as well as cell-specific properties.\n */\n@Directive({\n  selector: '[matCellDef]',\n  providers: [{provide: CdkCellDef, useExisting: MatCellDef}]\n})\nexport class MatCellDef extends CdkCellDef {\n  // TODO(andrewseguin): Remove this constructor after compiler-cli is updated; see issue #9329\n  constructor(/** @docs-private */ public template: TemplateRef<any>) {\n    super(template);\n  }\n}\n\n/**\n * Header cell definition for the mat-table.\n * Captures the template of a column's header cell and as well as cell-specific properties.\n */\n@Directive({\n  selector: '[matHeaderCellDef]',\n  providers: [{provide: CdkHeaderCellDef, useExisting: MatHeaderCellDef}]\n})\nexport class MatHeaderCellDef extends CdkHeaderCellDef {\n  // TODO(andrewseguin): Remove this constructor after compiler-cli is updated; see issue #9329\n  constructor(/** @docs-private */ public template: TemplateRef<any>) {\n    super(template);\n  }\n}\n\n/**\n * Footer cell definition for the mat-table.\n * Captures the template of a column's footer cell and as well as cell-specific properties.\n */\n@Directive({\n  selector: '[matFooterCellDef]',\n  providers: [{provide: CdkFooterCellDef, useExisting: MatFooterCellDef}]\n})\nexport class MatFooterCellDef extends CdkFooterCellDef {\n  // TODO(andrewseguin): Remove this constructor after compiler-cli is updated; see issue #9329\n  constructor(/** @docs-private */ public template: TemplateRef<any>) {\n    super(template);\n  }\n}\n\n/**\n * Column definition for the mat-table.\n * Defines a set of cells available for a table column.\n */\n@Directive({\n  selector: '[matColumnDef]',\n  providers: [{provide: CdkColumnDef, useExisting: MatColumnDef}],\n})\nexport class MatColumnDef extends CdkColumnDef {\n  /** Unique name for this column. */\n  @Input('matColumnDef') name: string;\n\n  /** Whether this column should be sticky positioned at the start of the row */\n  @Input() sticky: boolean;\n\n  /** Whether this column should be sticky positioned on the end of the row */\n  @Input() stickyEnd: boolean;\n}\n\n/** Header cell template container that adds the right classes and role. */\n@Directive({\n  selector: 'mat-header-cell, th[mat-header-cell]',\n  host: {\n    'class': 'mat-header-cell',\n    'role': 'columnheader',\n  },\n})\nexport class MatHeaderCell extends CdkHeaderCell {\n  constructor(columnDef: CdkColumnDef,\n              elementRef: ElementRef) {\n    super(columnDef, elementRef);\n    elementRef.nativeElement.classList.add(`mat-column-${columnDef.cssClassFriendlyName}`);\n  }\n}\n\n/** Footer cell template container that adds the right classes and role. */\n@Directive({\n  selector: 'mat-footer-cell, td[mat-footer-cell]',\n  host: {\n    'class': 'mat-footer-cell',\n    'role': 'gridcell',\n  },\n})\nexport class MatFooterCell extends CdkFooterCell {\n  constructor(columnDef: CdkColumnDef,\n              elementRef: ElementRef) {\n    super(columnDef, elementRef);\n    elementRef.nativeElement.classList.add(`mat-column-${columnDef.cssClassFriendlyName}`);\n  }\n}\n\n/** Cell template container that adds the right classes and role. */\n@Directive({\n  selector: 'mat-cell, td[mat-cell]',\n  host: {\n    'class': 'mat-cell',\n    'role': 'gridcell',\n  },\n})\nexport class MatCell extends CdkCell {\n  constructor(columnDef: CdkColumnDef,\n              elementRef: ElementRef) {\n    super(columnDef, elementRef);\n    elementRef.nativeElement.classList.add(`mat-column-${columnDef.cssClassFriendlyName}`);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  Directive,\n  IterableDiffers, TemplateRef,\n  ViewEncapsulation\n} from '@angular/core';\nimport {\n  CDK_ROW_TEMPLATE, CdkFooterRow, CdkFooterRowDef,\n  CdkHeaderRow,\n  CdkHeaderRowDef,\n  CdkRow,\n  CdkRowDef,\n} from '@angular/cdk/table';\n\n/**\n * Header row definition for the mat-table.\n * Captures the header row's template and other header properties such as the columns to display.\n */\n@Directive({\n  selector: '[matHeaderRowDef]',\n  providers: [{provide: CdkHeaderRowDef, useExisting: MatHeaderRowDef}],\n  inputs: ['columns: matHeaderRowDef', 'sticky: matHeaderRowDefSticky'],\n})\nexport class MatHeaderRowDef extends CdkHeaderRowDef {\n  // TODO(andrewseguin): Remove this constructor after compiler-cli is updated; see issue #9329\n  constructor(template: TemplateRef<any>, _differs: IterableDiffers) {\n    super(template, _differs);\n  }\n}\n\n/**\n * Footer row definition for the mat-table.\n * Captures the footer row's template and other footer properties such as the columns to display.\n */\n@Directive({\n  selector: '[matFooterRowDef]',\n  providers: [{provide: CdkFooterRowDef, useExisting: MatFooterRowDef}],\n  inputs: ['columns: matFooterRowDef', 'sticky: matFooterRowDefSticky'],\n})\nexport class MatFooterRowDef extends CdkFooterRowDef {\n  // TODO(andrewseguin): Remove this constructor after compiler-cli is updated; see issue #9329\n  constructor(template: TemplateRef<any>, _differs: IterableDiffers) {\n    super(template, _differs);\n  }\n}\n\n/**\n * Data row definition for the mat-table.\n * Captures the footer row's template and other footer properties such as the columns to display and\n * a when predicate that describes when this row should be used.\n */\n@Directive({\n  selector: '[matRowDef]',\n  providers: [{provide: CdkRowDef, useExisting: MatRowDef}],\n  inputs: ['columns: matRowDefColumns', 'when: matRowDefWhen'],\n})\nexport class MatRowDef<T> extends CdkRowDef<T> {\n  // TODO(andrewseguin): Remove this constructor after compiler-cli is updated; see issue #9329\n  constructor(template: TemplateRef<any>, _differs: IterableDiffers) {\n    super(template, _differs);\n  }\n}\n\n/** Footer template container that contains the cell outlet. Adds the right class and role. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-header-row, tr[mat-header-row]',\n  template: CDK_ROW_TEMPLATE,\n  host: {\n    'class': 'mat-header-row',\n    'role': 'row',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matHeaderRow',\n  providers: [{provide: CdkHeaderRow, useExisting: MatHeaderRow}],\n})\nexport class MatHeaderRow extends CdkHeaderRow { }\n\n/** Footer template container that contains the cell outlet. Adds the right class and role. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-footer-row, tr[mat-footer-row]',\n  template: CDK_ROW_TEMPLATE,\n  host: {\n    'class': 'mat-footer-row',\n    'role': 'row',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matFooterRow',\n  providers: [{provide: CdkFooterRow, useExisting: MatFooterRow}],\n})\nexport class MatFooterRow extends CdkFooterRow { }\n\n/** Data row template container that contains the cell outlet. Adds the right class and role. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-row, tr[mat-row]',\n  template: CDK_ROW_TEMPLATE,\n  host: {\n    'class': 'mat-row',\n    'role': 'row',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matRow',\n  providers: [{provide: CdkRow, useExisting: MatRow}],\n})\nexport class MatRow extends CdkRow { }\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatTable} from './table';\nimport {CdkTableModule} from '@angular/cdk/table';\nimport {\n  MatCell,\n  MatCellDef,\n  MatColumnDef,\n  MatFooterCell,\n  MatFooterCellDef,\n  MatHeaderCell,\n  MatHeaderCellDef\n} from './cell';\nimport {\n  MatFooterRow,\n  MatFooterRowDef,\n  MatHeaderRow,\n  MatHeaderRowDef,\n  MatRow,\n  MatRowDef\n} from './row';\nimport {CommonModule} from '@angular/common';\nimport {MatCommonModule} from '@angular/material/core';\n\nconst EXPORTED_DECLARATIONS = [\n  // Table\n  MatTable,\n\n  // Template defs\n  MatHeaderCellDef,\n  MatHeaderRowDef,\n  MatColumnDef,\n  MatCellDef,\n  MatRowDef,\n  MatFooterCellDef,\n  MatFooterRowDef,\n\n  // Cell directives\n  MatHeaderCell,\n  MatCell,\n  MatFooterCell,\n\n  // Row directions\n  MatHeaderRow,\n  MatRow,\n  MatFooterRow,\n];\n\n@NgModule({\n  imports: [CdkTableModule, CommonModule, MatCommonModule],\n  exports: EXPORTED_DECLARATIONS,\n  declarations: EXPORTED_DECLARATIONS,\n})\nexport class MatTableModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {_isNumberValue} from '@angular/cdk/coercion';\nimport {DataSource} from '@angular/cdk/table';\nimport {\n  BehaviorSubject,\n  combineLatest,\n  merge,\n  Observable,\n  of as observableOf,\n  Subscription\n} from 'rxjs';\nimport {MatPaginator, PageEvent} from '@angular/material/paginator';\nimport {MatSort, Sort} from '@angular/material/sort';\nimport {map} from 'rxjs/operators';\n\n\n/**\n * Data source that accepts a client-side data array and includes native support of filtering,\n * sorting (using MatSort), and pagination (using MatPaginator).\n *\n * Allows for sort customization by overriding sortingDataAccessor, which defines how data\n * properties are accessed. Also allows for filter customization by overriding filterTermAccessor,\n * which defines how row data is converted to a string for filter matching.\n */\nexport class MatTableDataSource<T> extends DataSource<T> {\n  /** Stream that emits when a new data array is set on the data source. */\n  private readonly _data: BehaviorSubject<T[]>;\n\n  /** Stream emitting render data to the table (depends on ordered data changes). */\n  private readonly _renderData = new BehaviorSubject<T[]>([]);\n\n  /** Stream that emits when a new filter string is set on the data source. */\n  private readonly _filter = new BehaviorSubject<string>('');\n\n  /**\n   * Subscription to the changes that should trigger an update to the table's rendered rows, such\n   * as filtering, sorting, pagination, or base data changes.\n   */\n  _renderChangesSubscription = Subscription.EMPTY;\n\n  /**\n   * The filtered set of data that has been matched by the filter string, or all the data if there\n   * is no filter. Useful for knowing the set of data the table represents.\n   * For example, a 'selectAll()' function would likely want to select the set of filtered data\n   * shown to the user rather than all the data.\n   */\n  filteredData: T[];\n\n  /** Array of data that should be rendered by the table, where each object represents one row. */\n  get data() { return this._data.value; }\n  set data(data: T[]) { this._data.next(data); }\n\n  /**\n   * Filter term that should be used to filter out objects from the data array. To override how\n   * data objects match to this filter string, provide a custom function for filterPredicate.\n   */\n  get filter(): string { return this._filter.value; }\n  set filter(filter: string) { this._filter.next(filter); }\n\n  /**\n   * Instance of the MatSort directive used by the table to control its sorting. Sort changes\n   * emitted by the MatSort will trigger an update to the table's rendered data.\n   */\n  get sort(): MatSort | null { return this._sort; }\n  set sort(sort: MatSort|null) {\n    this._sort = sort;\n    this._updateChangeSubscription();\n  }\n  private _sort: MatSort|null;\n\n  /**\n   * Instance of the MatPaginator component used by the table to control what page of the data is\n   * displayed. Page changes emitted by the MatPaginator will trigger an update to the\n   * table's rendered data.\n   *\n   * Note that the data source uses the paginator's properties to calculate which page of data\n   * should be displayed. If the paginator receives its properties as template inputs,\n   * e.g. `[pageLength]=100` or `[pageIndex]=1`, then be sure that the paginator's view has been\n   * initialized before assigning it to this data source.\n   */\n  get paginator(): MatPaginator | null { return this._paginator; }\n  set paginator(paginator: MatPaginator|null) {\n    this._paginator = paginator;\n    this._updateChangeSubscription();\n  }\n  private _paginator: MatPaginator|null;\n\n  /**\n   * Data accessor function that is used for accessing data properties for sorting through\n   * the default sortData function.\n   * This default function assumes that the sort header IDs (which defaults to the column name)\n   * matches the data's properties (e.g. column Xyz represents data['Xyz']).\n   * May be set to a custom function for different behavior.\n   * @param data Data object that is being accessed.\n   * @param sortHeaderId The name of the column that represents the data.\n   */\n  sortingDataAccessor: ((data: T, sortHeaderId: string) => string|number) =\n      (data: T, sortHeaderId: string): string|number => {\n    const value: any = data[sortHeaderId];\n    return _isNumberValue(value) ? Number(value) : value;\n  }\n\n  /**\n   * Gets a sorted copy of the data array based on the state of the MatSort. Called\n   * after changes are made to the filtered data or when sort changes are emitted from MatSort.\n   * By default, the function retrieves the active sort and its direction and compares data\n   * by retrieving data using the sortingDataAccessor. May be overridden for a custom implementation\n   * of data ordering.\n   * @param data The array of data that should be sorted.\n   * @param sort The connected MatSort that holds the current sort state.\n   */\n  sortData: ((data: T[], sort: MatSort) => T[]) = (data: T[], sort: MatSort): T[] => {\n    const active = sort.active;\n    const direction = sort.direction;\n    if (!active || direction == '') { return data; }\n\n    return data.sort((a, b) => {\n      let valueA = this.sortingDataAccessor(a, active);\n      let valueB = this.sortingDataAccessor(b, active);\n\n      // If both valueA and valueB exist (truthy), then compare the two. Otherwise, check if\n      // one value exists while the other doesn't. In this case, existing value should come first.\n      // This avoids inconsistent results when comparing values to undefined/null.\n      // If neither value exists, return 0 (equal).\n      let comparatorResult = 0;\n      if (valueA != null && valueB != null) {\n        // Check if one value is greater than the other; if equal, comparatorResult should remain 0.\n        if (valueA > valueB) {\n          comparatorResult = 1;\n        } else if (valueA < valueB) {\n          comparatorResult = -1;\n        }\n      } else if (valueA != null) {\n        comparatorResult = 1;\n      } else if (valueB != null) {\n        comparatorResult = -1;\n      }\n\n      return comparatorResult * (direction == 'asc' ? 1 : -1);\n    });\n  }\n\n  /**\n   * Checks if a data object matches the data source's filter string. By default, each data object\n   * is converted to a string of its properties and returns true if the filter has\n   * at least one occurrence in that string. By default, the filter string has its whitespace\n   * trimmed and the match is case-insensitive. May be overridden for a custom implementation of\n   * filter matching.\n   * @param data Data object used to check against the filter.\n   * @param filter Filter string that has been set on the data source.\n   * @returns Whether the filter matches against the data\n   */\n  filterPredicate: ((data: T, filter: string) => boolean) = (data: T, filter: string): boolean => {\n    // Transform the data into a lowercase string of all property values.\n    const accumulator = (currentTerm, key) => currentTerm + data[key];\n    const dataStr = Object.keys(data).reduce(accumulator, '').toLowerCase();\n\n    // Transform the filter by converting it to lowercase and removing whitespace.\n    const transformedFilter = filter.trim().toLowerCase();\n\n    return dataStr.indexOf(transformedFilter) != -1;\n  }\n\n  constructor(initialData: T[] = []) {\n    super();\n    this._data = new BehaviorSubject<T[]>(initialData);\n    this._updateChangeSubscription();\n  }\n\n  /**\n   * Subscribe to changes that should trigger an update to the table's rendered rows. When the\n   * changes occur, process the current state of the filter, sort, and pagination along with\n   * the provided base data and send it to the table for rendering.\n   */\n  _updateChangeSubscription() {\n    // Sorting and/or pagination should be watched if MatSort and/or MatPaginator are provided.\n    // The events should emit whenever the component emits a change or initializes, or if no\n    // component is provided, a stream with just a null event should be provided.\n    // The `sortChange` and `pageChange` acts as a signal to the combineLatests below so that the\n    // pipeline can progress to the next step. Note that the value from these streams are not used,\n    // they purely act as a signal to progress in the pipeline.\n    const sortChange: Observable<Sort|null> = this._sort ?\n        merge<Sort>(this._sort.sortChange, this._sort.initialized) :\n        observableOf(null);\n    const pageChange: Observable<PageEvent|null> = this._paginator ?\n        merge<PageEvent>(this._paginator.page, this._paginator.initialized) :\n        observableOf(null);\n\n    const dataStream = this._data;\n    // Watch for base data or filter changes to provide a filtered set of data.\n    const filteredData = combineLatest(dataStream, this._filter)\n      .pipe(map(([data]) => this._filterData(data)));\n    // Watch for filtered data or sort changes to provide an ordered set of data.\n    const orderedData = combineLatest(filteredData, sortChange)\n      .pipe(map(([data]) => this._orderData(data)));\n    // Watch for ordered data or page changes to provide a paged set of data.\n    const paginatedData = combineLatest(orderedData, pageChange)\n      .pipe(map(([data]) => this._pageData(data)));\n    // Watched for paged data changes and send the result to the table to render.\n    this._renderChangesSubscription.unsubscribe();\n    this._renderChangesSubscription = paginatedData.subscribe(data => this._renderData.next(data));\n  }\n\n  /**\n   * Returns a filtered data array where each filter object contains the filter string within\n   * the result of the filterTermAccessor function. If no filter is set, returns the data array\n   * as provided.\n   */\n  _filterData(data: T[]) {\n    // If there is a filter string, filter out data that does not contain it.\n    // Each data object is converted to a string using the function defined by filterTermAccessor.\n    // May be overridden for customization.\n    this.filteredData =\n        !this.filter ? data : data.filter(obj => this.filterPredicate(obj, this.filter));\n\n    if (this.paginator) { this._updatePaginator(this.filteredData.length); }\n\n    return this.filteredData;\n  }\n\n  /**\n   * Returns a sorted copy of the data if MatSort has a sort applied, otherwise just returns the\n   * data array as provided. Uses the default data accessor for data lookup, unless a\n   * sortDataAccessor function is defined.\n   */\n  _orderData(data: T[]): T[] {\n    // If there is no active sort or direction, return the data without trying to sort.\n    if (!this.sort) { return data; }\n\n    return this.sortData(data.slice(), this.sort);\n  }\n\n  /**\n   * Returns a paged splice of the provided data array according to the provided MatPaginator's page\n   * index and length. If there is no paginator provided, returns the data array as provided.\n   */\n  _pageData(data: T[]): T[] {\n    if (!this.paginator) { return data; }\n\n    const startIndex = this.paginator.pageIndex * this.paginator.pageSize;\n    return data.slice().splice(startIndex, this.paginator.pageSize);\n  }\n\n  /**\n   * Updates the paginator to reflect the length of the filtered data, and makes sure that the page\n   * index does not exceed the paginator's last page. Values are changed in a resolved promise to\n   * guard against making property changes within a round of change detection.\n   */\n  _updatePaginator(filteredDataLength: number) {\n    Promise.resolve().then(() => {\n      if (!this.paginator) { return; }\n\n      this.paginator.length = filteredDataLength;\n\n      // If the page index is set beyond the page, reduce it to the last page.\n      if (this.paginator.pageIndex > 0) {\n        const lastPageIndex = Math.ceil(this.paginator.length / this.paginator.pageSize) - 1 || 0;\n        this.paginator.pageIndex = Math.min(this.paginator.pageIndex, lastPageIndex);\n      }\n    });\n  }\n\n  /**\n   * Used by the MatTable. Called when it connects to the data source.\n   * @docs-private\n   */\n  connect() { return this._renderData; }\n\n  /**\n   * Used by the MatTable. Called when it is destroyed. No-op.\n   * @docs-private\n   */\n  disconnect() { }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, ElementRef, Inject, InjectionToken, NgZone} from '@angular/core';\n\n\n/**\n * Interface for a a MatInkBar positioner method, defining the positioning and width of the ink\n * bar in a set of tabs.\n */\n// tslint:disable-next-line class-name Using leading underscore to denote internal interface.\nexport interface _MatInkBarPositioner {\n  (element: HTMLElement): { left: string, width: string };\n}\n\n/** Injection token for the MatInkBar's Positioner. */\nexport const _MAT_INK_BAR_POSITIONER =\n  new InjectionToken<_MatInkBarPositioner>('MatInkBarPositioner', {\n    providedIn: 'root',\n    factory: _MAT_INK_BAR_POSITIONER_FACTORY\n  });\n\n/**\n * The default positioner function for the MatInkBar.\n * @docs-private\n */\nexport function _MAT_INK_BAR_POSITIONER_FACTORY(): _MatInkBarPositioner {\n  const method = (element: HTMLElement) => ({\n    left: element ? (element.offsetLeft || 0) + 'px' : '0',\n    width: element ? (element.offsetWidth || 0) + 'px' : '0',\n  });\n\n  return method;\n}\n\n/**\n * The ink-bar is used to display and animate the line underneath the current active tab label.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-ink-bar',\n  host: {\n    'class': 'mat-ink-bar',\n  },\n})\nexport class MatInkBar {\n  constructor(\n    private _elementRef: ElementRef,\n    private _ngZone: NgZone,\n    @Inject(_MAT_INK_BAR_POSITIONER) private _inkBarPositioner: _MatInkBarPositioner) { }\n\n  /**\n   * Calculates the styles from the provided element in order to align the ink-bar to that element.\n   * Shows the ink bar if previously set as hidden.\n   * @param element\n   */\n  alignToElement(element: HTMLElement) {\n    this.show();\n\n    if (typeof requestAnimationFrame !== 'undefined') {\n      this._ngZone.runOutsideAngular(() => {\n        requestAnimationFrame(() => this._setStyles(element));\n      });\n    } else {\n      this._setStyles(element);\n    }\n  }\n\n  /** Shows the ink bar. */\n  show(): void {\n    this._elementRef.nativeElement.style.visibility = 'visible';\n  }\n\n  /** Hides the ink bar. */\n  hide(): void {\n    this._elementRef.nativeElement.style.visibility = 'hidden';\n  }\n\n  /**\n   * Sets the proper styles to the ink bar element.\n   * @param element\n   */\n  private _setStyles(element: HTMLElement) {\n    const positions = this._inkBarPositioner(element);\n    const inkBar: HTMLElement = this._elementRef.nativeElement;\n\n    inkBar.style.left = positions.left;\n    inkBar.style.width = positions.width;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, TemplateRef, ViewContainerRef} from '@angular/core';\nimport {CdkPortal} from '@angular/cdk/portal';\n\n/** Used to flag tab labels for use with the portal directive */\n@Directive({\n  selector: '[mat-tab-label], [matTabLabel]',\n})\nexport class MatTabLabel extends CdkPortal {\n  constructor(templateRef: TemplateRef<any>, viewContainerRef: ViewContainerRef) {\n    super(templateRef, viewContainerRef);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, TemplateRef} from '@angular/core';\n\n/** Decorates the `ng-template` tags and reads out the template from it. */\n@Directive({selector: '[matTabContent]'})\nexport class MatTabContent {\n  constructor(public template: TemplateRef<any>) { }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {TemplatePortal} from '@angular/cdk/portal';\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  ContentChild,\n  Input,\n  OnChanges,\n  OnDestroy,\n  OnInit,\n  SimpleChanges,\n  TemplateRef,\n  ViewChild,\n  ViewContainerRef,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {CanDisable, mixinDisabled} from '@angular/material/core';\nimport {Subject} from 'rxjs';\nimport {MatTabLabel} from './tab-label';\nimport {MatTabContent} from './tab-content';\n\n\n// Boilerplate for applying mixins to MatTab.\n/** @docs-private */\nexport class MatTabBase {}\nexport const _MatTabMixinBase = mixinDisabled(MatTabBase);\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-tab',\n  templateUrl: 'tab.html',\n  inputs: ['disabled'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matTab',\n})\nexport class MatTab extends _MatTabMixinBase implements OnInit, CanDisable, OnChanges, OnDestroy {\n  /** Content for the tab label given by `<ng-template mat-tab-label>`. */\n  @ContentChild(MatTabLabel) templateLabel: MatTabLabel;\n\n  /**\n   * Template provided in the tab content that will be used if present, used to enable lazy-loading\n   */\n  @ContentChild(MatTabContent, {read: TemplateRef}) _explicitContent: TemplateRef<any>;\n\n  /** Template inside the MatTab view that contains an `<ng-content>`. */\n  @ViewChild(TemplateRef) _implicitContent: TemplateRef<any>;\n\n  /** The plain text label for the tab, used when there is no template label. */\n  @Input('label') textLabel: string = '';\n\n  /** The portal that will be the hosted content of the tab */\n  private _contentPortal: TemplatePortal | null = null;\n\n  /** @docs-private */\n  get content(): TemplatePortal | null {\n    return this._contentPortal;\n  }\n\n  /** Emits whenever the label changes. */\n  readonly _labelChange = new Subject<void>();\n\n  /** Emits whenever the disable changes */\n  readonly _disableChange = new Subject<void>();\n\n  /**\n   * The relatively indexed position where 0 represents the center, negative is left, and positive\n   * represents the right.\n   */\n  position: number | null = null;\n\n  /**\n   * The initial relatively index origin of the tab if it was created and selected after there\n   * was already a selected tab. Provides context of what position the tab should originate from.\n   */\n  origin: number | null = null;\n\n  /**\n   * Whether the tab is currently active.\n   */\n  isActive = false;\n\n  constructor(private _viewContainerRef: ViewContainerRef) {\n    super();\n  }\n\n  ngOnChanges(changes: SimpleChanges): void {\n    if (changes.hasOwnProperty('textLabel')) {\n      this._labelChange.next();\n    }\n\n    if (changes.hasOwnProperty('disabled')) {\n      this._disableChange.next();\n    }\n  }\n\n  ngOnDestroy(): void {\n    this._disableChange.complete();\n    this._labelChange.complete();\n  }\n\n  ngOnInit(): void {\n    this._contentPortal = new TemplatePortal(\n        this._explicitContent || this._implicitContent, this._viewContainerRef);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/** Animations used by the Material tabs. */\nexport const matTabsAnimations: {\n  readonly translateTab: AnimationTriggerMetadata;\n} = {\n  /** Animation translates a tab along the X axis. */\n  translateTab: trigger('translateTab', [\n    // Note: transitions to `none` instead of 0, because some browsers might blur the content.\n    state('center, void, left-origin-center, right-origin-center', style({transform: 'none'})),\n    state('left', style({transform: 'translate3d(-100%, 0, 0)'})),\n    state('right', style({transform: 'translate3d(100%, 0, 0)'})),\n    transition('* => left, * => right, left => center, right => center',\n        animate('500ms cubic-bezier(0.35, 0, 0.25, 1)')),\n    transition('void => left-origin-center', [\n      style({transform: 'translate3d(-100%, 0, 0)'}),\n      animate('500ms cubic-bezier(0.35, 0, 0.25, 1)')\n    ]),\n    transition('void => right-origin-center', [\n      style({transform: 'translate3d(100%, 0, 0)'}),\n      animate('500ms cubic-bezier(0.35, 0, 0.25, 1)')\n    ])\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  Input,\n  Inject,\n  Output,\n  EventEmitter,\n  OnDestroy,\n  OnInit,\n  ElementRef,\n  Directive,\n  Optional,\n  ViewEncapsulation,\n  ChangeDetectionStrategy,\n  ComponentFactoryResolver,\n  ViewContainerRef,\n  forwardRef,\n  ViewChild,\n} from '@angular/core';\nimport {AnimationEvent} from '@angular/animations';\nimport {TemplatePortal, CdkPortalOutlet, PortalHostDirective} from '@angular/cdk/portal';\nimport {Directionality, Direction} from '@angular/cdk/bidi';\nimport {Subscription} from 'rxjs';\nimport {matTabsAnimations} from './tabs-animations';\nimport {startWith} from 'rxjs/operators';\n\n/**\n * These position states are used internally as animation states for the tab body. Setting the\n * position state to left, right, or center will transition the tab body from its current\n * position to its respective state. If there is not current position (void, in the case of a new\n * tab body), then there will be no transition animation to its state.\n *\n * In the case of a new tab body that should immediately be centered with an animating transition,\n * then left-origin-center or right-origin-center can be used, which will use left or right as its\n * psuedo-prior state.\n */\nexport type MatTabBodyPositionState =\n    'left' | 'center' | 'right' | 'left-origin-center' | 'right-origin-center';\n\n/**\n * The origin state is an internally used state that is set on a new tab body indicating if it\n * began to the left or right of the prior selected index. For example, if the selected index was\n * set to 1, and a new tab is created and selected at index 2, then the tab body would have an\n * origin of right because its index was greater than the prior selected index.\n */\nexport type MatTabBodyOriginState = 'left' | 'right';\n\n/**\n * The portal host directive for the contents of the tab.\n * @docs-private\n */\n@Directive({\n  selector: '[matTabBodyHost]'\n})\nexport class MatTabBodyPortal extends CdkPortalOutlet implements OnInit, OnDestroy {\n  /** Subscription to events for when the tab body begins centering. */\n  private _centeringSub = Subscription.EMPTY;\n  /** Subscription to events for when the tab body finishes leaving from center position. */\n  private _leavingSub = Subscription.EMPTY;\n\n  constructor(\n    componentFactoryResolver: ComponentFactoryResolver,\n    viewContainerRef: ViewContainerRef,\n    @Inject(forwardRef(() => MatTabBody)) private _host: MatTabBody) {\n      super(componentFactoryResolver, viewContainerRef);\n  }\n\n  /** Set initial visibility or set up subscription for changing visibility. */\n  ngOnInit(): void {\n    super.ngOnInit();\n\n    this._centeringSub = this._host._beforeCentering\n      .pipe(startWith(this._host._isCenterPosition(this._host._position)))\n      .subscribe((isCentering: boolean) => {\n        if (isCentering && !this.hasAttached()) {\n          this.attach(this._host._content);\n        }\n      });\n\n    this._leavingSub = this._host._afterLeavingCenter.subscribe(() => {\n      this.detach();\n    });\n  }\n\n  /** Clean up centering subscription. */\n  ngOnDestroy(): void {\n    super.ngOnDestroy();\n    this._centeringSub.unsubscribe();\n    this._leavingSub.unsubscribe();\n  }\n}\n\n/**\n * Wrapper for the contents of a tab.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-tab-body',\n  templateUrl: 'tab-body.html',\n  styleUrls: ['tab-body.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  animations: [matTabsAnimations.translateTab],\n  host: {\n    'class': 'mat-tab-body',\n  },\n})\nexport class MatTabBody implements OnInit {\n  /** Event emitted when the tab begins to animate towards the center as the active tab. */\n  @Output() readonly _onCentering: EventEmitter<number> = new EventEmitter<number>();\n\n  /** Event emitted before the centering of the tab begins. */\n  @Output() readonly _beforeCentering: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n  /** Event emitted before the centering of the tab begins. */\n  @Output() readonly _afterLeavingCenter: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n  /** Event emitted when the tab completes its animation towards the center. */\n  @Output() readonly _onCentered: EventEmitter<void> = new EventEmitter<void>(true);\n\n   /** The portal host inside of this container into which the tab body content will be loaded. */\n  @ViewChild(PortalHostDirective) _portalHost: PortalHostDirective;\n\n  /** The tab body content to display. */\n  @Input('content') _content: TemplatePortal;\n\n  /** The shifted index position of the tab body, where zero represents the active center tab. */\n  @Input()\n  set position(position: number) {\n    if (position < 0) {\n      this._position = this._getLayoutDirection() == 'ltr' ? 'left' : 'right';\n    } else if (position > 0) {\n      this._position = this._getLayoutDirection() == 'ltr' ? 'right' : 'left';\n    } else {\n      this._position = 'center';\n    }\n  }\n  _position: MatTabBodyPositionState;\n\n  /** The origin position from which this tab should appear when it is centered into view. */\n  @Input()\n  set origin(origin: number) {\n    if (origin == null) { return; }\n\n    const dir = this._getLayoutDirection();\n    if ((dir == 'ltr' && origin <= 0) || (dir == 'rtl' && origin > 0)) {\n      this._origin = 'left';\n    } else {\n      this._origin = 'right';\n    }\n  }\n  _origin: MatTabBodyOriginState;\n\n  constructor(private _elementRef: ElementRef,\n              @Optional() private _dir: Directionality) { }\n\n  /**\n   * After initialized, check if the content is centered and has an origin. If so, set the\n   * special position states that transition the tab from the left or right before centering.\n   */\n  ngOnInit() {\n    if (this._position == 'center' && this._origin) {\n      this._position = this._origin == 'left' ? 'left-origin-center' : 'right-origin-center';\n    }\n  }\n\n  _onTranslateTabStarted(e: AnimationEvent): void {\n    const isCentering = this._isCenterPosition(e.toState);\n    this._beforeCentering.emit(isCentering);\n    if (isCentering) {\n      this._onCentering.emit(this._elementRef.nativeElement.clientHeight);\n    }\n  }\n\n  _onTranslateTabComplete(e: AnimationEvent): void {\n    // If the transition to the center is complete, emit an event.\n    if (this._isCenterPosition(e.toState) && this._isCenterPosition(this._position)) {\n      this._onCentered.emit();\n    }\n\n    if (this._isCenterPosition(e.fromState) && !this._isCenterPosition(this._position)) {\n      this._afterLeavingCenter.emit();\n    }\n  }\n\n  /** The text direction of the containing app. */\n  _getLayoutDirection(): Direction {\n    return this._dir && this._dir.value === 'rtl' ? 'rtl' : 'ltr';\n  }\n\n  /** Whether the provided position state is considered center, regardless of origin. */\n  _isCenterPosition(position: MatTabBodyPositionState|string): boolean {\n    return position == 'center' ||\n        position == 'left-origin-center' ||\n        position == 'right-origin-center';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, ElementRef} from '@angular/core';\nimport {CanDisable, mixinDisabled} from '@angular/material/core';\n\n// Boilerplate for applying mixins to MatTabLabelWrapper.\n/** @docs-private */\nexport class MatTabLabelWrapperBase {}\nexport const _MatTabLabelWrapperMixinBase = mixinDisabled(MatTabLabelWrapperBase);\n\n/**\n * Used in the `mat-tab-group` view to display tab labels.\n * @docs-private\n */\n@Directive({\n  selector: '[matTabLabelWrapper]',\n  inputs: ['disabled'],\n  host: {\n    '[class.mat-tab-disabled]': 'disabled'\n  }\n})\nexport class MatTabLabelWrapper extends _MatTabLabelWrapperMixinBase implements CanDisable {\n  constructor(public elementRef: ElementRef) {\n    super();\n  }\n\n  /** Sets focus on the wrapper element */\n  focus(): void {\n    this.elementRef.nativeElement.focus();\n  }\n\n  getOffsetLeft(): number {\n    return this.elementRef.nativeElement.offsetLeft;\n  }\n\n  getOffsetWidth(): number {\n    return this.elementRef.nativeElement.offsetWidth;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor, FocusOrigin} from '@angular/cdk/a11y';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty, coerceNumberProperty} from '@angular/cdk/coercion';\nimport {\n  DOWN_ARROW,\n  END,\n  HOME,\n  LEFT_ARROW,\n  PAGE_DOWN,\n  PAGE_UP,\n  RIGHT_ARROW,\n  UP_ARROW,\n} from '@angular/cdk/keycodes';\nimport {\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Input,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Output,\n  ViewChild,\n  ViewEncapsulation,\n  Inject,\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {\n  CanColor,\n  CanDisable,\n  HammerInput,\n  HasTabIndex,\n  mixinColor,\n  mixinDisabled,\n  mixinTabIndex,\n} from '@angular/material/core';\nimport {Subscription} from 'rxjs';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\n\n/**\n * Visually, a 30px separation between tick marks looks best. This is very subjective but it is\n * the default separation we chose.\n */\nconst MIN_AUTO_TICK_SEPARATION = 30;\n\n/** The thumb gap size for a disabled slider. */\nconst DISABLED_THUMB_GAP = 7;\n\n/** The thumb gap size for a non-active slider at its minimum value. */\nconst MIN_VALUE_NONACTIVE_THUMB_GAP = 7;\n\n/** The thumb gap size for an active slider at its minimum value. */\nconst MIN_VALUE_ACTIVE_THUMB_GAP = 10;\n\n/**\n * Provider Expression that allows mat-slider to register as a ControlValueAccessor.\n * This allows it to support [(ngModel)] and [formControl].\n */\nexport const MAT_SLIDER_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatSlider),\n  multi: true\n};\n\n/** A simple change event emitted by the MatSlider component. */\nexport class MatSliderChange {\n  /** The MatSlider that changed. */\n  source: MatSlider;\n\n  /** The new value of the source slider. */\n  value: number | null;\n}\n\n\n// Boilerplate for applying mixins to MatSlider.\n/** @docs-private */\nexport class MatSliderBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatSliderMixinBase =\n  mixinTabIndex(mixinColor(mixinDisabled(MatSliderBase), 'accent'));\n\n/**\n * Allows users to select from a range of values by moving the slider thumb. It is similar in\n * behavior to the native `<input type=\"range\">` element.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-slider',\n  exportAs: 'matSlider',\n  providers: [MAT_SLIDER_VALUE_ACCESSOR],\n  host: {\n    '(focus)': '_onFocus()',\n    '(blur)': '_onBlur()',\n    '(click)': '_onClick($event)',\n    '(keydown)': '_onKeydown($event)',\n    '(keyup)': '_onKeyup()',\n    '(mouseenter)': '_onMouseenter()',\n    '(slide)': '_onSlide($event)',\n    '(slideend)': '_onSlideEnd()',\n    '(slidestart)': '_onSlideStart($event)',\n    'class': 'mat-slider',\n    'role': 'slider',\n    '[tabIndex]': 'tabIndex',\n    '[attr.aria-disabled]': 'disabled',\n    '[attr.aria-valuemax]': 'max',\n    '[attr.aria-valuemin]': 'min',\n    '[attr.aria-valuenow]': 'value',\n    '[attr.aria-orientation]': 'vertical ? \"vertical\" : \"horizontal\"',\n    '[class.mat-slider-disabled]': 'disabled',\n    '[class.mat-slider-has-ticks]': 'tickInterval',\n    '[class.mat-slider-horizontal]': '!vertical',\n    '[class.mat-slider-axis-inverted]': '_invertAxis',\n    '[class.mat-slider-sliding]': '_isSliding',\n    '[class.mat-slider-thumb-label-showing]': 'thumbLabel',\n    '[class.mat-slider-vertical]': 'vertical',\n    '[class.mat-slider-min-value]': '_isMinValue',\n    '[class.mat-slider-hide-last-tick]': 'disabled || _isMinValue && _thumbGap && _invertAxis',\n    '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"',\n  },\n  templateUrl: 'slider.html',\n  styleUrls: ['slider.css'],\n  inputs: ['disabled', 'color', 'tabIndex'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatSlider extends _MatSliderMixinBase\n    implements ControlValueAccessor, OnDestroy, CanDisable, CanColor, OnInit, HasTabIndex {\n  /** Whether the slider is inverted. */\n  @Input()\n  get invert(): boolean { return this._invert; }\n  set invert(value: boolean) {\n    this._invert = coerceBooleanProperty(value);\n  }\n  private _invert = false;\n\n  /** The maximum value that the slider can have. */\n  @Input()\n  get max(): number { return this._max; }\n  set max(v: number) {\n    this._max = coerceNumberProperty(v, this._max);\n    this._percent = this._calculatePercentage(this._value);\n\n    // Since this also modifies the percentage, we need to let the change detection know.\n    this._changeDetectorRef.markForCheck();\n  }\n  private _max: number = 100;\n\n  /** The minimum value that the slider can have. */\n  @Input()\n  get min(): number { return this._min; }\n  set min(v: number) {\n    this._min = coerceNumberProperty(v, this._min);\n\n    // If the value wasn't explicitly set by the user, set it to the min.\n    if (this._value === null) {\n      this.value = this._min;\n    }\n    this._percent = this._calculatePercentage(this._value);\n\n    // Since this also modifies the percentage, we need to let the change detection know.\n    this._changeDetectorRef.markForCheck();\n  }\n  private _min: number = 0;\n\n  /** The values at which the thumb will snap. */\n  @Input()\n  get step(): number { return this._step; }\n  set step(v: number) {\n    this._step = coerceNumberProperty(v, this._step);\n\n    if (this._step % 1 !== 0) {\n      this._roundToDecimal = this._step.toString().split('.').pop()!.length;\n    }\n\n    // Since this could modify the label, we need to notify the change detection.\n    this._changeDetectorRef.markForCheck();\n  }\n  private _step: number = 1;\n\n  /** Whether or not to show the thumb label. */\n  @Input()\n  get thumbLabel(): boolean { return this._thumbLabel; }\n  set thumbLabel(value: boolean) { this._thumbLabel = coerceBooleanProperty(value); }\n  private _thumbLabel: boolean = false;\n\n  /**\n   * How often to show ticks. Relative to the step so that a tick always appears on a step.\n   * Ex: Tick interval of 4 with a step of 3 will draw a tick every 4 steps (every 12 values).\n   */\n  @Input()\n  get tickInterval() { return this._tickInterval; }\n  set tickInterval(value: 'auto' | number) {\n    if (value === 'auto') {\n      this._tickInterval = 'auto';\n    } else if (typeof value === 'number' || typeof value === 'string') {\n      this._tickInterval = coerceNumberProperty(value, this._tickInterval as number);\n    } else {\n      this._tickInterval = 0;\n    }\n  }\n  private _tickInterval: 'auto' | number = 0;\n\n  /** Value of the slider. */\n  @Input()\n  get value(): number | null {\n    // If the value needs to be read and it is still uninitialized, initialize it to the min.\n    if (this._value === null) {\n      this.value = this._min;\n    }\n    return this._value;\n  }\n  set value(v: number | null) {\n    if (v !== this._value) {\n      this._value = coerceNumberProperty(v);\n      this._percent = this._calculatePercentage(this._value);\n\n      // Since this also modifies the percentage, we need to let the change detection know.\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n  private _value: number | null = null;\n\n  /**\n   * Function that will be used to format the value before it is displayed\n   * in the thumb label. Can be used to format very large number in order\n   * for them to fit into the slider thumb.\n   */\n  @Input() displayWith: (value: number | null) => string | number;\n\n  /** Whether the slider is vertical. */\n  @Input()\n  get vertical(): boolean { return this._vertical; }\n  set vertical(value: boolean) {\n    this._vertical = coerceBooleanProperty(value);\n  }\n  private _vertical = false;\n\n  /** Event emitted when the slider value has changed. */\n  @Output() readonly change: EventEmitter<MatSliderChange> = new EventEmitter<MatSliderChange>();\n\n  /** Event emitted when the slider thumb moves. */\n  @Output() readonly input: EventEmitter<MatSliderChange> = new EventEmitter<MatSliderChange>();\n\n  /** The value to be used for display purposes. */\n  get displayValue(): string | number {\n    if (this.displayWith) {\n      return this.displayWith(this.value);\n    }\n\n    // Note that this could be improved further by rounding something like 0.999 to 1 or\n    // 0.899 to 0.9, however it is very performance sensitive, because it gets called on\n    // every change detection cycle.\n    if (this._roundToDecimal && this.value && this.value % 1 !== 0) {\n      return this.value.toFixed(this._roundToDecimal);\n    }\n\n    return this.value || 0;\n  }\n\n  /** set focus to the host element */\n  focus() {\n    this._focusHostElement();\n  }\n\n  /** blur the host element */\n  blur() {\n    this._blurHostElement();\n  }\n\n  /** onTouch function registered via registerOnTouch (ControlValueAccessor). */\n  onTouched: () => any = () => {};\n\n  /** The percentage of the slider that coincides with the value. */\n  get percent(): number { return this._clamp(this._percent); }\n  private _percent: number = 0;\n\n  /**\n   * Whether or not the thumb is sliding.\n   * Used to determine if there should be a transition for the thumb and fill track.\n   */\n  _isSliding: boolean = false;\n\n  /**\n   * Whether or not the slider is active (clicked or sliding).\n   * Used to shrink and grow the thumb as according to the Material Design spec.\n   */\n  _isActive: boolean = false;\n\n  /**\n   * Whether the axis of the slider is inverted.\n   * (i.e. whether moving the thumb in the positive x or y direction decreases the slider's value).\n   */\n  get _invertAxis() {\n    // Standard non-inverted mode for a vertical slider should be dragging the thumb from bottom to\n    // top. However from a y-axis standpoint this is inverted.\n    return this.vertical ? !this.invert : this.invert;\n  }\n\n\n  /** Whether the slider is at its minimum value. */\n  get _isMinValue() {\n    return this.percent === 0;\n  }\n\n  /**\n   * The amount of space to leave between the slider thumb and the track fill & track background\n   * elements.\n   */\n  get _thumbGap() {\n    if (this.disabled) {\n      return DISABLED_THUMB_GAP;\n    }\n    if (this._isMinValue && !this.thumbLabel) {\n      return this._isActive ? MIN_VALUE_ACTIVE_THUMB_GAP : MIN_VALUE_NONACTIVE_THUMB_GAP;\n    }\n    return 0;\n  }\n\n  /** CSS styles for the track background element. */\n  get _trackBackgroundStyles(): { [key: string]: string } {\n    let axis = this.vertical ? 'Y' : 'X';\n    let sign = this._invertMouseCoords ? '-' : '';\n    return {\n      'transform': `translate${axis}(${sign}${this._thumbGap}px) scale${axis}(${1 - this.percent})`\n    };\n  }\n\n  /** CSS styles for the track fill element. */\n  get _trackFillStyles(): { [key: string]: string } {\n    let axis = this.vertical ? 'Y' : 'X';\n    let sign = this._invertMouseCoords ? '' : '-';\n    return {\n      'transform': `translate${axis}(${sign}${this._thumbGap}px) scale${axis}(${this.percent})`\n    };\n  }\n\n  /** CSS styles for the ticks container element. */\n  get _ticksContainerStyles(): { [key: string]: string } {\n    let axis = this.vertical ? 'Y' : 'X';\n    // For a horizontal slider in RTL languages we push the ticks container off the left edge\n    // instead of the right edge to avoid causing a horizontal scrollbar to appear.\n    let sign = !this.vertical && this._direction == 'rtl' ? '' : '-';\n    let offset = this._tickIntervalPercent / 2 * 100;\n    return {\n      'transform': `translate${axis}(${sign}${offset}%)`\n    };\n  }\n\n  /** CSS styles for the ticks element. */\n  get _ticksStyles(): { [key: string]: string } {\n    let tickSize = this._tickIntervalPercent * 100;\n    let backgroundSize = this.vertical ? `2px ${tickSize}%` : `${tickSize}% 2px`;\n    let axis = this.vertical ? 'Y' : 'X';\n    // Depending on the direction we pushed the ticks container, push the ticks the opposite\n    // direction to re-center them but clip off the end edge. In RTL languages we need to flip the\n    // ticks 180 degrees so we're really cutting off the end edge abd not the start.\n    let sign = !this.vertical && this._direction == 'rtl' ? '-' : '';\n    let rotate = !this.vertical && this._direction == 'rtl' ? ' rotate(180deg)' : '';\n    let styles: { [key: string]: string } = {\n      'backgroundSize': backgroundSize,\n      // Without translateZ ticks sometimes jitter as the slider moves on Chrome & Firefox.\n      'transform': `translateZ(0) translate${axis}(${sign}${tickSize / 2}%)${rotate}`\n    };\n\n    if (this._isMinValue && this._thumbGap) {\n      let side = this.vertical ?\n          (this._invertAxis ? 'Bottom' : 'Top') :\n          (this._invertAxis ? 'Right' : 'Left');\n      styles[`padding${side}`] = `${this._thumbGap}px`;\n    }\n\n    return styles;\n  }\n\n  get _thumbContainerStyles(): { [key: string]: string } {\n    let axis = this.vertical ? 'Y' : 'X';\n    // For a horizontal slider in RTL languages we push the thumb container off the left edge\n    // instead of the right edge to avoid causing a horizontal scrollbar to appear.\n    let invertOffset =\n        (this._direction == 'rtl' && !this.vertical) ? !this._invertAxis : this._invertAxis;\n    let offset = (invertOffset ? this.percent : 1 - this.percent) * 100;\n    return {\n      'transform': `translate${axis}(-${offset}%)`\n    };\n  }\n\n  /** The size of a tick interval as a percentage of the size of the track. */\n  private _tickIntervalPercent: number = 0;\n\n  /** The dimensions of the slider. */\n  private _sliderDimensions: ClientRect | null = null;\n\n  private _controlValueAccessorChangeFn: (value: any) => void = () => {};\n\n  /** Decimal places to round to, based on the step amount. */\n  private _roundToDecimal: number;\n\n  /** Subscription to the Directionality change EventEmitter. */\n  private _dirChangeSubscription = Subscription.EMPTY;\n\n  /** The value of the slider when the slide start event fires. */\n  private _valueOnSlideStart: number | null;\n\n  /** Reference to the inner slider wrapper element. */\n  @ViewChild('sliderWrapper') private _sliderWrapper: ElementRef;\n\n  /**\n   * Whether mouse events should be converted to a slider position by calculating their distance\n   * from the right or bottom edge of the slider as opposed to the top or left.\n   */\n  private get _invertMouseCoords() {\n    return (this._direction == 'rtl' && !this.vertical) ? !this._invertAxis : this._invertAxis;\n  }\n\n  /** The language direction for this slider element. */\n  private get _direction() {\n    return (this._dir && this._dir.value == 'rtl') ? 'rtl' : 'ltr';\n  }\n\n  constructor(elementRef: ElementRef,\n              private _focusMonitor: FocusMonitor,\n              private _changeDetectorRef: ChangeDetectorRef,\n              @Optional() private _dir: Directionality,\n              @Attribute('tabindex') tabIndex: string,\n              // @deletion-target 7.0.0 `_animationMode` parameter to be made required.\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode?: string) {\n    super(elementRef);\n\n    this.tabIndex = parseInt(tabIndex) || 0;\n  }\n\n  ngOnInit() {\n    this._focusMonitor\n        .monitor(this._elementRef.nativeElement, true)\n        .subscribe((origin: FocusOrigin) => {\n          this._isActive = !!origin && origin !== 'keyboard';\n          this._changeDetectorRef.detectChanges();\n        });\n    if (this._dir) {\n      this._dirChangeSubscription = this._dir.change.subscribe(() => {\n        this._changeDetectorRef.markForCheck();\n      });\n    }\n  }\n\n  ngOnDestroy() {\n    this._focusMonitor.stopMonitoring(this._elementRef.nativeElement);\n    this._dirChangeSubscription.unsubscribe();\n  }\n\n  _onMouseenter() {\n    if (this.disabled) {\n      return;\n    }\n\n    // We save the dimensions of the slider here so we can use them to update the spacing of the\n    // ticks and determine where on the slider click and slide events happen.\n    this._sliderDimensions = this._getSliderDimensions();\n    this._updateTickIntervalPercent();\n  }\n\n  _onClick(event: MouseEvent) {\n    if (this.disabled) {\n      return;\n    }\n\n    let oldValue = this.value;\n    this._isSliding = false;\n    this._focusHostElement();\n    this._updateValueFromPosition({x: event.clientX, y: event.clientY});\n\n    // Emit a change and input event if the value changed.\n    if (oldValue != this.value) {\n      this._emitInputEvent();\n      this._emitChangeEvent();\n    }\n  }\n\n  _onSlide(event: HammerInput) {\n    if (this.disabled) {\n      return;\n    }\n\n    // The slide start event sometimes fails to fire on iOS, so if we're not already in the sliding\n    // state, call the slide start handler manually.\n    if (!this._isSliding) {\n      this._onSlideStart(null);\n    }\n\n    // Prevent the slide from selecting anything else.\n    event.preventDefault();\n\n    let oldValue = this.value;\n    this._updateValueFromPosition({x: event.center.x, y: event.center.y});\n\n    // Native range elements always emit `input` events when the value changed while sliding.\n    if (oldValue != this.value) {\n      this._emitInputEvent();\n    }\n  }\n\n  _onSlideStart(event: HammerInput | null) {\n    if (this.disabled || this._isSliding) {\n      return;\n    }\n\n    // Simulate mouseenter in case this is a mobile device.\n    this._onMouseenter();\n\n    this._isSliding = true;\n    this._focusHostElement();\n    this._valueOnSlideStart = this.value;\n\n    if (event) {\n      this._updateValueFromPosition({x: event.center.x, y: event.center.y});\n      event.preventDefault();\n    }\n  }\n\n  _onSlideEnd() {\n    this._isSliding = false;\n\n    if (this._valueOnSlideStart != this.value && !this.disabled) {\n      this._emitChangeEvent();\n    }\n    this._valueOnSlideStart = null;\n  }\n\n  _onFocus() {\n    // We save the dimensions of the slider here so we can use them to update the spacing of the\n    // ticks and determine where on the slider click and slide events happen.\n    this._sliderDimensions = this._getSliderDimensions();\n    this._updateTickIntervalPercent();\n  }\n\n  _onBlur() {\n    this.onTouched();\n  }\n\n  _onKeydown(event: KeyboardEvent) {\n    if (this.disabled) { return; }\n\n    let oldValue = this.value;\n\n    switch (event.keyCode) {\n      case PAGE_UP:\n        this._increment(10);\n        break;\n      case PAGE_DOWN:\n        this._increment(-10);\n        break;\n      case END:\n        this.value = this.max;\n        break;\n      case HOME:\n        this.value = this.min;\n        break;\n      case LEFT_ARROW:\n        // NOTE: For a sighted user it would make more sense that when they press an arrow key on an\n        // inverted slider the thumb moves in that direction. However for a blind user, nothing\n        // about the slider indicates that it is inverted. They will expect left to be decrement,\n        // regardless of how it appears on the screen. For speakers ofRTL languages, they probably\n        // expect left to mean increment. Therefore we flip the meaning of the side arrow keys for\n        // RTL. For inverted sliders we prefer a good a11y experience to having it \"look right\" for\n        // sighted users, therefore we do not swap the meaning.\n        this._increment(this._direction == 'rtl' ? 1 : -1);\n        break;\n      case UP_ARROW:\n        this._increment(1);\n        break;\n      case RIGHT_ARROW:\n        // See comment on LEFT_ARROW about the conditions under which we flip the meaning.\n        this._increment(this._direction == 'rtl' ? -1 : 1);\n        break;\n      case DOWN_ARROW:\n        this._increment(-1);\n        break;\n      default:\n        // Return if the key is not one that we explicitly handle to avoid calling preventDefault on\n        // it.\n        return;\n    }\n\n    if (oldValue != this.value) {\n      this._emitInputEvent();\n      this._emitChangeEvent();\n    }\n\n    this._isSliding = true;\n    event.preventDefault();\n  }\n\n  _onKeyup() {\n    this._isSliding = false;\n  }\n\n  /** Increments the slider by the given number of steps (negative number decrements). */\n  private _increment(numSteps: number) {\n    this.value = this._clamp((this.value || 0) + this.step * numSteps, this.min, this.max);\n  }\n\n  /** Calculate the new value from the new physical location. The value will always be snapped. */\n  private _updateValueFromPosition(pos: {x: number, y: number}) {\n    if (!this._sliderDimensions) {\n      return;\n    }\n\n    let offset = this.vertical ? this._sliderDimensions.top : this._sliderDimensions.left;\n    let size = this.vertical ? this._sliderDimensions.height : this._sliderDimensions.width;\n    let posComponent = this.vertical ? pos.y : pos.x;\n\n    // The exact value is calculated from the event and used to find the closest snap value.\n    let percent = this._clamp((posComponent - offset) / size);\n\n    if (this._invertMouseCoords) {\n      percent = 1 - percent;\n    }\n\n    // Since the steps may not divide cleanly into the max value, if the user\n    // slid to 0 or 100 percent, we jump to the min/max value. This approach\n    // is slightly more intuitive than using `Math.ceil` below, because it\n    // follows the user's pointer closer.\n    if (percent === 0) {\n      this.value = this.min;\n    } else if (percent === 1) {\n      this.value = this.max;\n    } else {\n      let exactValue = this._calculateValue(percent);\n\n      // This calculation finds the closest step by finding the closest\n      // whole number divisible by the step relative to the min.\n      let closestValue = Math.round((exactValue - this.min) / this.step) * this.step + this.min;\n\n      // If we've got a step with a decimal, we may end up with something like 33.300000000000004.\n      // Truncate the value to ensure that it matches the label and to make it easier to work with.\n      if (this._roundToDecimal) {\n        closestValue = parseFloat(closestValue.toFixed(this._roundToDecimal));\n      }\n\n      // The value needs to snap to the min and max.\n      this.value = this._clamp(closestValue, this.min, this.max);\n    }\n  }\n\n  /** Emits a change event if the current value is different from the last emitted value. */\n  private _emitChangeEvent() {\n    this._controlValueAccessorChangeFn(this.value);\n    this.change.emit(this._createChangeEvent());\n  }\n\n  /** Emits an input event when the current value is different from the last emitted value. */\n  private _emitInputEvent() {\n    this.input.emit(this._createChangeEvent());\n  }\n\n  /** Updates the amount of space between ticks as a percentage of the width of the slider. */\n  private _updateTickIntervalPercent() {\n    if (!this.tickInterval || !this._sliderDimensions) {\n      return;\n    }\n\n    if (this.tickInterval == 'auto') {\n      let trackSize = this.vertical ? this._sliderDimensions.height : this._sliderDimensions.width;\n      let pixelsPerStep = trackSize * this.step / (this.max - this.min);\n      let stepsPerTick = Math.ceil(MIN_AUTO_TICK_SEPARATION / pixelsPerStep);\n      let pixelsPerTick = stepsPerTick * this.step;\n      this._tickIntervalPercent = pixelsPerTick / trackSize;\n    } else {\n      this._tickIntervalPercent = this.tickInterval * this.step / (this.max - this.min);\n    }\n  }\n\n  /** Creates a slider change object from the specified value. */\n  private _createChangeEvent(value = this.value): MatSliderChange {\n    let event = new MatSliderChange();\n\n    event.source = this;\n    event.value = value;\n\n    return event;\n  }\n\n  /** Calculates the percentage of the slider that a value is. */\n  private _calculatePercentage(value: number | null) {\n    return ((value || 0) - this.min) / (this.max - this.min);\n  }\n\n  /** Calculates the value a percentage of the slider corresponds to. */\n  private _calculateValue(percentage: number) {\n    return this.min + percentage * (this.max - this.min);\n  }\n\n  /** Return a number between two numbers. */\n  private _clamp(value: number, min = 0, max = 1) {\n    return Math.max(min, Math.min(value, max));\n  }\n\n  /**\n   * Get the bounding client rect of the slider track element.\n   * The track is used rather than the native element to ignore the extra space that the thumb can\n   * take up.\n   */\n  private _getSliderDimensions() {\n    return this._sliderWrapper ? this._sliderWrapper.nativeElement.getBoundingClientRect() : null;\n  }\n\n  /**\n   * Focuses the native element.\n   * Currently only used to allow a blur event to fire but will be used with keyboard input later.\n   */\n  private _focusHostElement() {\n    this._elementRef.nativeElement.focus();\n  }\n\n  /** Blurs the native element. */\n  private _blurHostElement() {\n    this._elementRef.nativeElement.blur();\n  }\n\n  /**\n   * Sets the model value. Implemented as part of ControlValueAccessor.\n   * @param value\n   */\n  writeValue(value: any) {\n    this.value = value;\n  }\n\n  /**\n   * Registers a callback to be triggered when the value has changed.\n   * Implemented as part of ControlValueAccessor.\n   * @param fn Callback to be registered.\n   */\n  registerOnChange(fn: (value: any) => void) {\n    this._controlValueAccessorChangeFn = fn;\n  }\n\n  /**\n   * Registers a callback to be triggered when the component is touched.\n   * Implemented as part of ControlValueAccessor.\n   * @param fn Callback to be registered.\n   */\n  registerOnTouched(fn: any) {\n    this.onTouched = fn;\n  }\n\n  /**\n   * Sets whether the component should be disabled.\n   * Implemented as part of ControlValueAccessor.\n   * @param isDisabled\n   */\n  setDisabledState(isDisabled: boolean) {\n    this.disabled = isDisabled;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {GestureConfig, MatCommonModule} from '@angular/material/core';\nimport {HAMMER_GESTURE_CONFIG} from '@angular/platform-browser';\nimport {MatSlider} from './slider';\n\n\n@NgModule({\n  imports: [CommonModule, MatCommonModule],\n  exports: [MatSlider, MatCommonModule],\n  declarations: [MatSlider],\n  providers: [{provide: HAMMER_GESTURE_CONFIG, useClass: GestureConfig}]\n})\nexport class MatSliderModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {OverlayRef} from '@angular/cdk/overlay';\nimport {Observable, Subject} from 'rxjs';\nimport {MatSnackBarContainer} from './snack-bar-container';\n\n\n/** Event that is emitted when a snack bar is dismissed. */\nexport interface MatSnackBarDismiss {\n  /** Whether the snack bar was dismissed using the action button. */\n  dismissedByAction: boolean;\n}\n\n/**\n * Reference to a snack bar dispatched from the snack bar service.\n */\nexport class MatSnackBarRef<T> {\n  /** The instance of the component making up the content of the snack bar. */\n  instance: T;\n\n  /**\n   * The instance of the component making up the content of the snack bar.\n   * @docs-private\n   */\n  containerInstance: MatSnackBarContainer;\n\n  /** Subject for notifying the user that the snack bar has been dismissed. */\n  private readonly _afterDismissed = new Subject<MatSnackBarDismiss>();\n\n  /** Subject for notifying the user that the snack bar has opened and appeared. */\n  private readonly _afterOpened = new Subject<void>();\n\n  /** Subject for notifying the user that the snack bar action was called. */\n  private readonly _onAction = new Subject<void>();\n\n  /**\n   * Timeout ID for the duration setTimeout call. Used to clear the timeout if the snackbar is\n   * dismissed before the duration passes.\n   */\n  private _durationTimeoutId: number;\n\n  /** Whether the snack bar was dismissed using the action button. */\n  private _dismissedByAction = false;\n\n  constructor(containerInstance: MatSnackBarContainer,\n              private _overlayRef: OverlayRef) {\n    this.containerInstance = containerInstance;\n    // Dismiss snackbar on action.\n    this.onAction().subscribe(() => this.dismiss());\n    containerInstance._onExit.subscribe(() => this._finishDismiss());\n  }\n\n  /** Dismisses the snack bar. */\n  dismiss(): void {\n    if (!this._afterDismissed.closed) {\n      this.containerInstance.exit();\n    }\n    clearTimeout(this._durationTimeoutId);\n  }\n\n  /** Marks the snackbar action clicked. */\n  dismissWithAction(): void {\n    if (!this._onAction.closed) {\n      this._dismissedByAction = true;\n      this._onAction.next();\n      this._onAction.complete();\n    }\n  }\n\n\n  /**\n   * Marks the snackbar action clicked.\n   * @deprecated Use `dismissWithAction` instead.\n   * @deletion-target 7.0.0\n   */\n  closeWithAction(): void {\n    this.dismissWithAction();\n  }\n\n  /** Dismisses the snack bar after some duration */\n  _dismissAfter(duration: number): void {\n    this._durationTimeoutId = setTimeout(() => this.dismiss(), duration);\n  }\n\n  /** Marks the snackbar as opened */\n  _open(): void {\n    if (!this._afterOpened.closed) {\n      this._afterOpened.next();\n      this._afterOpened.complete();\n    }\n  }\n\n  /** Cleans up the DOM after closing. */\n  private _finishDismiss(): void {\n    this._overlayRef.dispose();\n\n    if (!this._onAction.closed) {\n      this._onAction.complete();\n    }\n\n    this._afterDismissed.next({dismissedByAction: this._dismissedByAction});\n    this._afterDismissed.complete();\n    this._dismissedByAction = false;\n  }\n\n  /** Gets an observable that is notified when the snack bar is finished closing. */\n  afterDismissed(): Observable<MatSnackBarDismiss> {\n    return this._afterDismissed.asObservable();\n  }\n\n  /** Gets an observable that is notified when the snack bar has opened and appeared. */\n  afterOpened(): Observable<void> {\n    return this.containerInstance._onEnter;\n  }\n\n  /** Gets an observable that is notified when the snack bar action is called. */\n  onAction(): Observable<void> {\n    return this._onAction.asObservable();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ViewContainerRef, InjectionToken} from '@angular/core';\nimport {AriaLivePoliteness} from '@angular/cdk/a11y';\nimport {Direction} from '@angular/cdk/bidi';\n\n/** Injection token that can be used to access the data that was passed in to a snack bar. */\nexport const MAT_SNACK_BAR_DATA = new InjectionToken<any>('MatSnackBarData');\n\n/** Possible values for horizontalPosition on MatSnackBarConfig. */\nexport type MatSnackBarHorizontalPosition = 'start' | 'center' | 'end' | 'left' | 'right';\n\n/** Possible values for verticalPosition on MatSnackBarConfig. */\nexport type MatSnackBarVerticalPosition = 'top' | 'bottom';\n\n/**\n * Configuration used when opening a snack-bar.\n */\nexport class MatSnackBarConfig<D = any> {\n  /** The politeness level for the MatAriaLiveAnnouncer announcement. */\n  politeness?: AriaLivePoliteness = 'assertive';\n\n  /** Message to be announced by the MatAriaLiveAnnouncer */\n  announcementMessage?: string = '';\n\n  /** The view container to place the overlay for the snack bar into. */\n  viewContainerRef?: ViewContainerRef;\n\n  /** The length of time in milliseconds to wait before automatically dismissing the snack bar. */\n  duration?: number = 0;\n\n  /** Extra CSS classes to be added to the snack bar container. */\n  panelClass?: string | string[];\n\n  /** Text layout direction for the snack bar. */\n  direction?: Direction;\n\n  /** Data being injected into the child component. */\n  data?: D | null = null;\n\n  /** The horizontal position to place the snack bar. */\n  horizontalPosition?: MatSnackBarHorizontalPosition = 'center';\n\n  /** The vertical position to place the snack bar. */\n  verticalPosition?: MatSnackBarVerticalPosition = 'bottom';\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\nimport {AnimationCurves, AnimationDurations} from '@angular/material/core';\n\n/** Animations used by the Material snack bar. */\nexport const matSnackBarAnimations: {\n  readonly contentFade: AnimationTriggerMetadata;\n  readonly snackBarState: AnimationTriggerMetadata;\n} = {\n  /** Animation that slides the dialog in and out of view and fades the opacity. */\n  contentFade: trigger('contentFade', [\n    transition(':enter', [\n      style({opacity: '0'}),\n      animate(`${AnimationDurations.COMPLEX} ${AnimationCurves.STANDARD_CURVE}`)\n    ])\n  ]),\n\n  /** Animation that shows and hides a snack bar. */\n  snackBarState: trigger('state', [\n    state('visible-top, visible-bottom', style({transform: 'translateY(0%)'})),\n    transition('visible-top => hidden-top, visible-bottom => hidden-bottom',\n      animate(`${AnimationDurations.EXITING} ${AnimationCurves.ACCELERATION_CURVE}`)),\n    transition('void => visible-top, void => visible-bottom',\n      animate(`${AnimationDurations.ENTERING} ${AnimationCurves.DECELERATION_CURVE}`)),\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Component, ViewEncapsulation, Inject, ChangeDetectionStrategy} from '@angular/core';\nimport {MatSnackBarRef} from './snack-bar-ref';\nimport {MAT_SNACK_BAR_DATA} from './snack-bar-config';\nimport {matSnackBarAnimations} from './snack-bar-animations';\n\n\n/**\n * A component used to open as the default snack bar, matching material spec.\n * This should only be used internally by the snack bar service.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'simple-snack-bar',\n  templateUrl: 'simple-snack-bar.html',\n  styleUrls: ['simple-snack-bar.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  animations: [matSnackBarAnimations.contentFade],\n  host: {\n    '[@contentFade]': '',\n    'class': 'mat-simple-snackbar',\n  }\n})\nexport class SimpleSnackBar {\n  /** Data that was injected into the snack bar. */\n  data: { message: string, action: string };\n\n  constructor(\n    public snackBarRef: MatSnackBarRef<SimpleSnackBar>,\n    @Inject(MAT_SNACK_BAR_DATA) data: any) {\n    this.data = data;\n  }\n\n  /** Performs the action on the snack bar. */\n  action(): void {\n    this.snackBarRef.dismissWithAction();\n  }\n\n  /** If the action button should be shown. */\n  get hasAction(): boolean {\n    return !!this.data.action;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {AnimationEvent} from '@angular/animations';\nimport {\n  BasePortalOutlet,\n  CdkPortalOutlet,\n  ComponentPortal,\n  TemplatePortal,\n} from '@angular/cdk/portal';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ComponentRef,\n  ElementRef,\n  EmbeddedViewRef,\n  NgZone,\n  OnDestroy,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {Observable, Subject} from 'rxjs';\nimport {take} from 'rxjs/operators';\nimport {matSnackBarAnimations} from './snack-bar-animations';\nimport {MatSnackBarConfig} from './snack-bar-config';\n\n\n/**\n * Internal component that wraps user-provided snack bar content.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'snack-bar-container',\n  templateUrl: 'snack-bar-container.html',\n  styleUrls: ['snack-bar-container.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  animations: [matSnackBarAnimations.snackBarState],\n  host: {\n    'role': 'alert',\n    'class': 'mat-snack-bar-container',\n    '[@state]': '_animationState',\n    '(@state.done)': 'onAnimationEnd($event)'\n  },\n})\nexport class MatSnackBarContainer extends BasePortalOutlet implements OnDestroy {\n  /** Whether the component has been destroyed. */\n  private _destroyed = false;\n\n  /** The portal outlet inside of this container into which the snack bar content will be loaded. */\n  @ViewChild(CdkPortalOutlet) _portalOutlet: CdkPortalOutlet;\n\n  /** Subject for notifying that the snack bar has exited from view. */\n  readonly _onExit: Subject<any> = new Subject();\n\n  /** Subject for notifying that the snack bar has finished entering the view. */\n  readonly _onEnter: Subject<any> = new Subject();\n\n  /** The state of the snack bar animations. */\n  _animationState = 'void';\n\n  constructor(\n    private _ngZone: NgZone,\n    private _elementRef: ElementRef,\n    private _changeDetectorRef: ChangeDetectorRef,\n    /** The snack bar configuration. */\n    public snackBarConfig: MatSnackBarConfig) {\n\n    super();\n  }\n\n  /** Attach a component portal as content to this snack bar container. */\n  attachComponentPortal<T>(portal: ComponentPortal<T>): ComponentRef<T> {\n    this._assertNotAttached();\n    this._applySnackBarClasses();\n    return this._portalOutlet.attachComponentPortal(portal);\n  }\n\n  /** Attach a template portal as content to this snack bar container. */\n  attachTemplatePortal<C>(portal: TemplatePortal<C>): EmbeddedViewRef<C> {\n    this._assertNotAttached();\n    this._applySnackBarClasses();\n    return this._portalOutlet.attachTemplatePortal(portal);\n  }\n\n  /** Handle end of animations, updating the state of the snackbar. */\n  onAnimationEnd(event: AnimationEvent) {\n    const {fromState, toState} = event;\n\n    if ((toState === 'void' && fromState !== 'void') || toState.startsWith('hidden')) {\n      this._completeExit();\n    }\n\n    if (toState.startsWith('visible')) {\n      // Note: we shouldn't use `this` inside the zone callback,\n      // because it can cause a memory leak.\n      const onEnter = this._onEnter;\n\n      this._ngZone.run(() => {\n        onEnter.next();\n        onEnter.complete();\n      });\n    }\n  }\n\n  /** Begin animation of snack bar entrance into view. */\n  enter(): void {\n    if (!this._destroyed) {\n      this._animationState = `visible-${this.snackBarConfig.verticalPosition}`;\n      this._changeDetectorRef.detectChanges();\n    }\n  }\n\n  /** Begin animation of the snack bar exiting from view. */\n  exit(): Observable<void> {\n    this._animationState = `hidden-${this.snackBarConfig.verticalPosition}`;\n    return this._onExit;\n  }\n\n  /** Makes sure the exit callbacks have been invoked when the element is destroyed. */\n  ngOnDestroy() {\n    this._destroyed = true;\n    this._completeExit();\n  }\n\n  /**\n   * Waits for the zone to settle before removing the element. Helps prevent\n   * errors where we end up removing an element which is in the middle of an animation.\n   */\n  private _completeExit() {\n    this._ngZone.onMicrotaskEmpty.asObservable().pipe(take(1)).subscribe(() => {\n      this._onExit.next();\n      this._onExit.complete();\n    });\n  }\n\n  /** Applies the various positioning and user-configured CSS classes to the snack bar. */\n  private _applySnackBarClasses() {\n    const element: HTMLElement = this._elementRef.nativeElement;\n    const panelClasses = this.snackBarConfig.panelClass;\n\n    if (panelClasses) {\n      if (Array.isArray(panelClasses)) {\n        // Note that we can't use a spread here, because IE doesn't support multiple arguments.\n        panelClasses.forEach(cssClass => element.classList.add(cssClass));\n      } else {\n        element.classList.add(panelClasses);\n      }\n    }\n\n    if (this.snackBarConfig.horizontalPosition === 'center') {\n      element.classList.add('mat-snack-bar-center');\n    }\n\n    if (this.snackBarConfig.verticalPosition === 'top') {\n      element.classList.add('mat-snack-bar-top');\n    }\n  }\n\n  /** Asserts that no content is already attached to the container. */\n  private _assertNotAttached() {\n    if (this._portalOutlet.hasAttached()) {\n      throw Error('Attempting to attach snack bar content after content is already attached');\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatButtonModule} from '@angular/material/button';\nimport {SimpleSnackBar} from './simple-snack-bar';\nimport {MatSnackBarContainer} from './snack-bar-container';\n\n\n@NgModule({\n  imports: [\n    OverlayModule,\n    PortalModule,\n    CommonModule,\n    MatButtonModule,\n    MatCommonModule,\n  ],\n  exports: [MatSnackBarContainer, MatCommonModule],\n  declarations: [MatSnackBarContainer, SimpleSnackBar],\n  entryComponents: [MatSnackBarContainer, SimpleSnackBar],\n})\nexport class MatSnackBarModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {LiveAnnouncer} from '@angular/cdk/a11y';\nimport {BreakpointObserver, Breakpoints} from '@angular/cdk/layout';\nimport {Overlay, OverlayConfig, OverlayRef} from '@angular/cdk/overlay';\nimport {ComponentPortal, ComponentType, PortalInjector, TemplatePortal} from '@angular/cdk/portal';\nimport {\n  ComponentRef,\n  EmbeddedViewRef,\n  Inject,\n  Injectable,\n  InjectionToken,\n  Injector,\n  Optional,\n  SkipSelf,\n  TemplateRef,\n} from '@angular/core';\nimport {take, takeUntil} from 'rxjs/operators';\nimport {SimpleSnackBar} from './simple-snack-bar';\nimport {MAT_SNACK_BAR_DATA, MatSnackBarConfig} from './snack-bar-config';\nimport {MatSnackBarContainer} from './snack-bar-container';\nimport {MatSnackBarModule} from './snack-bar-module';\nimport {MatSnackBarRef} from './snack-bar-ref';\n\n\n/** Injection token that can be used to specify default snack bar. */\nexport const MAT_SNACK_BAR_DEFAULT_OPTIONS =\n    new InjectionToken<MatSnackBarConfig>('mat-snack-bar-default-options', {\n      providedIn: 'root',\n      factory: MAT_SNACK_BAR_DEFAULT_OPTIONS_FACTORY,\n    });\n\n/** @docs-private */\nexport function MAT_SNACK_BAR_DEFAULT_OPTIONS_FACTORY(): MatSnackBarConfig {\n  return new MatSnackBarConfig();\n}\n\n/**\n * Service to dispatch Material Design snack bar messages.\n */\n@Injectable({providedIn: MatSnackBarModule})\nexport class MatSnackBar {\n  /**\n   * Reference to the current snack bar in the view *at this level* (in the Angular injector tree).\n   * If there is a parent snack-bar service, all operations should delegate to that parent\n   * via `_openedSnackBarRef`.\n   */\n  private _snackBarRefAtThisLevel: MatSnackBarRef<any> | null = null;\n\n  /** Reference to the currently opened snackbar at *any* level. */\n  get _openedSnackBarRef(): MatSnackBarRef<any> | null {\n    const parent = this._parentSnackBar;\n    return parent ? parent._openedSnackBarRef : this._snackBarRefAtThisLevel;\n  }\n\n  set _openedSnackBarRef(value: MatSnackBarRef<any> | null) {\n    if (this._parentSnackBar) {\n      this._parentSnackBar._openedSnackBarRef = value;\n    } else {\n      this._snackBarRefAtThisLevel = value;\n    }\n  }\n\n  constructor(\n      private _overlay: Overlay,\n      private _live: LiveAnnouncer,\n      private _injector: Injector,\n      private _breakpointObserver: BreakpointObserver,\n      @Optional() @SkipSelf() private _parentSnackBar: MatSnackBar,\n      @Inject(MAT_SNACK_BAR_DEFAULT_OPTIONS) private _defaultConfig: MatSnackBarConfig) {}\n\n  /**\n   * Creates and dispatches a snack bar with a custom component for the content, removing any\n   * currently opened snack bars.\n   *\n   * @param component Component to be instantiated.\n   * @param config Extra configuration for the snack bar.\n   */\n  openFromComponent<T>(component: ComponentType<T>, config?: MatSnackBarConfig):\n    MatSnackBarRef<T> {\n    return this._attach(component, config) as MatSnackBarRef<T>;\n  }\n\n  /**\n   * Creates and dispatches a snack bar with a custom template for the content, removing any\n   * currently opened snack bars.\n   *\n   * @param template Template to be instantiated.\n   * @param config Extra configuration for the snack bar.\n   */\n  openFromTemplate(template: TemplateRef<any>, config?: MatSnackBarConfig):\n    MatSnackBarRef<EmbeddedViewRef<any>> {\n    return this._attach(template, config);\n  }\n\n  /**\n   * Opens a snackbar with a message and an optional action.\n   * @param message The message to show in the snackbar.\n   * @param action The label for the snackbar action.\n   * @param config Additional configuration options for the snackbar.\n   */\n  open(message: string, action: string = '', config?: MatSnackBarConfig):\n      MatSnackBarRef<SimpleSnackBar> {\n    const _config = {...this._defaultConfig, ...config};\n\n    // Since the user doesn't have access to the component, we can\n    // override the data to pass in our own message and action.\n    _config.data = {message, action};\n    _config.announcementMessage = message;\n\n    return this.openFromComponent(SimpleSnackBar, _config);\n  }\n\n  /**\n   * Dismisses the currently-visible snack bar.\n   */\n  dismiss(): void {\n    if (this._openedSnackBarRef) {\n      this._openedSnackBarRef.dismiss();\n    }\n  }\n\n  /**\n   * Attaches the snack bar container component to the overlay.\n   */\n  private _attachSnackBarContainer(overlayRef: OverlayRef,\n                                   config: MatSnackBarConfig): MatSnackBarContainer {\n\n    const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n    const injector = new PortalInjector(userInjector || this._injector, new WeakMap([\n      [MatSnackBarConfig, config]\n    ]));\n\n    const containerPortal =\n        new ComponentPortal(MatSnackBarContainer, config.viewContainerRef, injector);\n    const containerRef: ComponentRef<MatSnackBarContainer> = overlayRef.attach(containerPortal);\n    containerRef.instance.snackBarConfig = config;\n    return containerRef.instance;\n  }\n\n  /**\n   * Places a new component or a template as the content of the snack bar container.\n   */\n  private _attach<T>(content: ComponentType<T> | TemplateRef<T>, userConfig?: MatSnackBarConfig):\n    MatSnackBarRef<T | EmbeddedViewRef<any>> {\n\n    const config = {...new MatSnackBarConfig(), ...this._defaultConfig, ...userConfig};\n    const overlayRef = this._createOverlay(config);\n    const container = this._attachSnackBarContainer(overlayRef, config);\n    const snackBarRef = new MatSnackBarRef<T | EmbeddedViewRef<any>>(container, overlayRef);\n\n    if (content instanceof TemplateRef) {\n      const portal = new TemplatePortal(content, null!, {\n        $implicit: config.data,\n        snackBarRef\n      } as any);\n\n      snackBarRef.instance = container.attachTemplatePortal(portal);\n    } else {\n      const injector = this._createInjector(config, snackBarRef);\n      const portal = new ComponentPortal(content, undefined, injector);\n      const contentRef = container.attachComponentPortal<T>(portal);\n\n      // We can't pass this via the injector, because the injector is created earlier.\n      snackBarRef.instance = contentRef.instance;\n    }\n\n    // Subscribe to the breakpoint observer and attach the mat-snack-bar-handset class as\n    // appropriate. This class is applied to the overlay element because the overlay must expand to\n    // fill the width of the screen for full width snackbars.\n    this._breakpointObserver.observe(Breakpoints.Handset).pipe(\n      takeUntil(overlayRef.detachments().pipe(take(1)))\n    ).subscribe(state => {\n      if (state.matches) {\n        overlayRef.overlayElement.classList.add('mat-snack-bar-handset');\n      } else {\n        overlayRef.overlayElement.classList.remove('mat-snack-bar-handset');\n      }\n    });\n\n    this._animateSnackBar(snackBarRef, config);\n    this._openedSnackBarRef = snackBarRef;\n    return this._openedSnackBarRef;\n  }\n\n  /** Animates the old snack bar out and the new one in. */\n  private _animateSnackBar(snackBarRef: MatSnackBarRef<any>, config: MatSnackBarConfig) {\n    // When the snackbar is dismissed, clear the reference to it.\n    snackBarRef.afterDismissed().subscribe(() => {\n      // Clear the snackbar ref if it hasn't already been replaced by a newer snackbar.\n      if (this._openedSnackBarRef == snackBarRef) {\n        this._openedSnackBarRef = null;\n      }\n    });\n\n    if (this._openedSnackBarRef) {\n      // If a snack bar is already in view, dismiss it and enter the\n      // new snack bar after exit animation is complete.\n      this._openedSnackBarRef.afterDismissed().subscribe(() => {\n        snackBarRef.containerInstance.enter();\n      });\n      this._openedSnackBarRef.dismiss();\n    } else {\n      // If no snack bar is in view, enter the new snack bar.\n      snackBarRef.containerInstance.enter();\n    }\n\n    // If a dismiss timeout is provided, set up dismiss based on after the snackbar is opened.\n    if (config.duration && config.duration > 0) {\n      snackBarRef.afterOpened().subscribe(() => snackBarRef._dismissAfter(config.duration!));\n    }\n\n    if (config.announcementMessage) {\n      this._live.announce(config.announcementMessage, config.politeness);\n    }\n  }\n\n  /**\n   * Creates a new overlay and places it in the correct location.\n   * @param config The user-specified snack bar config.\n   */\n  private _createOverlay(config: MatSnackBarConfig): OverlayRef {\n    const overlayConfig = new OverlayConfig();\n    overlayConfig.direction = config.direction;\n\n    let positionStrategy = this._overlay.position().global();\n    // Set horizontal position.\n    const isRtl = config.direction === 'rtl';\n    const isLeft = (\n      config.horizontalPosition === 'left' ||\n      (config.horizontalPosition === 'start' && !isRtl) ||\n      (config.horizontalPosition === 'end' && isRtl));\n    const isRight = !isLeft && config.horizontalPosition !== 'center';\n    if (isLeft) {\n      positionStrategy.left('0');\n    } else if (isRight) {\n      positionStrategy.right('0');\n    } else {\n      positionStrategy.centerHorizontally();\n    }\n    // Set horizontal position.\n    if (config.verticalPosition === 'top') {\n      positionStrategy.top('0');\n    } else {\n      positionStrategy.bottom('0');\n    }\n\n    overlayConfig.positionStrategy = positionStrategy;\n    return this._overlay.create(overlayConfig);\n  }\n\n  /**\n   * Creates an injector to be used inside of a snack bar component.\n   * @param config Config that was used to create the snack bar.\n   * @param snackBarRef Reference to the snack bar.\n   */\n  private _createInjector<T>(\n      config: MatSnackBarConfig,\n      snackBarRef: MatSnackBarRef<T>): PortalInjector {\n\n    const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n\n    return new PortalInjector(userInjector || this._injector, new WeakMap<any, any>([\n      [MatSnackBarRef, snackBarRef],\n      [MAT_SNACK_BAR_DATA, config.data]\n    ]));\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Directive,\n  EventEmitter,\n  Input,\n  isDevMode,\n  OnChanges,\n  OnDestroy,\n  OnInit,\n  Output,\n} from '@angular/core';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {CanDisable, HasInitialized, mixinDisabled, mixinInitialized} from '@angular/material/core';\nimport {SortDirection} from './sort-direction';\nimport {\n  getSortDuplicateSortableIdError,\n  getSortHeaderMissingIdError,\n  getSortInvalidDirectionError\n} from './sort-errors';\nimport {Subject} from 'rxjs';\n\n/** Interface for a directive that holds sorting state consumed by `MatSortHeader`. */\nexport interface MatSortable {\n  /** The id of the column being sorted. */\n  id: string;\n\n  /** Starting sort direction. */\n  start: 'asc' | 'desc';\n\n  /** Whether to disable clearing the sorting state. */\n  disableClear: boolean;\n}\n\n/** The current sort state. */\nexport interface Sort {\n  /** The id of the column being sorted. */\n  active: string;\n\n  /** The sort direction. */\n  direction: SortDirection;\n}\n\n// Boilerplate for applying mixins to MatSort.\n/** @docs-private */\nexport class MatSortBase {}\nexport const _MatSortMixinBase = mixinInitialized(mixinDisabled(MatSortBase));\n\n/** Container for MatSortables to manage the sort state and provide default sort parameters. */\n@Directive({\n  selector: '[matSort]',\n  exportAs: 'matSort',\n  inputs: ['disabled: matSortDisabled']\n})\nexport class MatSort extends _MatSortMixinBase\n    implements CanDisable, HasInitialized, OnChanges, OnDestroy, OnInit {\n  /** Collection of all registered sortables that this directive manages. */\n  sortables = new Map<string, MatSortable>();\n\n  /** Used to notify any child components listening to state changes. */\n  readonly _stateChanges = new Subject<void>();\n\n  /** The id of the most recently sorted MatSortable. */\n  @Input('matSortActive') active: string;\n\n  /**\n   * The direction to set when an MatSortable is initially sorted.\n   * May be overriden by the MatSortable's sort start.\n   */\n  @Input('matSortStart') start: 'asc' | 'desc' = 'asc';\n\n  /** The sort direction of the currently active MatSortable. */\n  @Input('matSortDirection')\n  get direction(): SortDirection { return this._direction; }\n  set direction(direction: SortDirection) {\n    if (isDevMode() && direction && direction !== 'asc' && direction !== 'desc') {\n      throw getSortInvalidDirectionError(direction);\n    }\n    this._direction = direction;\n  }\n  private _direction: SortDirection = '';\n\n  /**\n   * Whether to disable the user from clearing the sort by finishing the sort direction cycle.\n   * May be overriden by the MatSortable's disable clear input.\n   */\n  @Input('matSortDisableClear')\n  get disableClear(): boolean { return this._disableClear; }\n  set disableClear(v: boolean) { this._disableClear = coerceBooleanProperty(v); }\n  private _disableClear: boolean;\n\n  /** Event emitted when the user changes either the active sort or sort direction. */\n  @Output('matSortChange') readonly sortChange: EventEmitter<Sort> = new EventEmitter<Sort>();\n\n  /**\n   * Register function to be used by the contained MatSortables. Adds the MatSortable to the\n   * collection of MatSortables.\n   */\n  register(sortable: MatSortable): void {\n    if (!sortable.id) {\n      throw getSortHeaderMissingIdError();\n    }\n\n    if (this.sortables.has(sortable.id)) {\n      throw getSortDuplicateSortableIdError(sortable.id);\n    }\n    this.sortables.set(sortable.id, sortable);\n  }\n\n  /**\n   * Unregister function to be used by the contained MatSortables. Removes the MatSortable from the\n   * collection of contained MatSortables.\n   */\n  deregister(sortable: MatSortable): void {\n    this.sortables.delete(sortable.id);\n  }\n\n  /** Sets the active sort id and determines the new sort direction. */\n  sort(sortable: MatSortable): void {\n    if (this.active != sortable.id) {\n      this.active = sortable.id;\n      this.direction = sortable.start ? sortable.start : this.start;\n    } else {\n      this.direction = this.getNextSortDirection(sortable);\n    }\n\n    this.sortChange.emit({active: this.active, direction: this.direction});\n  }\n\n  /** Returns the next sort direction of the active sortable, checking for potential overrides. */\n  getNextSortDirection(sortable: MatSortable): SortDirection {\n    if (!sortable) { return ''; }\n\n    // Get the sort direction cycle with the potential sortable overrides.\n    const disableClear = sortable.disableClear != null ? sortable.disableClear : this.disableClear;\n    let sortDirectionCycle = getSortDirectionCycle(sortable.start || this.start, disableClear);\n\n    // Get and return the next direction in the cycle\n    let nextDirectionIndex = sortDirectionCycle.indexOf(this.direction) + 1;\n    if (nextDirectionIndex >= sortDirectionCycle.length) { nextDirectionIndex = 0; }\n    return sortDirectionCycle[nextDirectionIndex];\n  }\n\n  ngOnInit() {\n    this._markInitialized();\n  }\n\n  ngOnChanges() {\n    this._stateChanges.next();\n  }\n\n  ngOnDestroy() {\n    this._stateChanges.complete();\n  }\n}\n\n/** Returns the sort direction cycle to use given the provided parameters of order and clear. */\nfunction getSortDirectionCycle(start: 'asc' | 'desc',\n                               disableClear: boolean): SortDirection[] {\n  let sortOrder: SortDirection[] = ['asc', 'desc'];\n  if (start == 'desc') { sortOrder.reverse(); }\n  if (!disableClear) { sortOrder.push(''); }\n\n  return sortOrder;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  keyframes,\n  AnimationTriggerMetadata, query, animateChild,\n} from '@angular/animations';\nimport {AnimationCurves, AnimationDurations} from '@angular/material/core';\n\nconst SORT_ANIMATION_TRANSITION = AnimationDurations.ENTERING + ' ' +\n                                  AnimationCurves.STANDARD_CURVE;\n\n/** Animations used by MatSort. */\nexport const matSortAnimations: {\n  readonly indicator: AnimationTriggerMetadata;\n  readonly leftPointer: AnimationTriggerMetadata;\n  readonly rightPointer: AnimationTriggerMetadata;\n  readonly arrowOpacity: AnimationTriggerMetadata;\n  readonly arrowPosition: AnimationTriggerMetadata;\n  readonly allowChildren: AnimationTriggerMetadata;\n} = {\n  /** Animation that moves the sort indicator. */\n  indicator: trigger('indicator', [\n    state('active-asc, asc', style({transform: 'translateY(0px)'})),\n    // 10px is the height of the sort indicator, minus the width of the pointers\n    state('active-desc, desc', style({transform: 'translateY(10px)'})),\n    transition('active-asc <=> active-desc', animate(SORT_ANIMATION_TRANSITION))\n  ]),\n\n  /** Animation that rotates the left pointer of the indicator based on the sorting direction. */\n  leftPointer: trigger('leftPointer', [\n    state('active-asc, asc', style({transform: 'rotate(-45deg)'})),\n    state('active-desc, desc', style({transform: 'rotate(45deg)'})),\n    transition('active-asc <=> active-desc', animate(SORT_ANIMATION_TRANSITION))\n  ]),\n\n  /** Animation that rotates the right pointer of the indicator based on the sorting direction. */\n  rightPointer: trigger('rightPointer', [\n    state('active-asc, asc', style({transform: 'rotate(45deg)'})),\n    state('active-desc, desc', style({transform: 'rotate(-45deg)'})),\n    transition('active-asc <=> active-desc', animate(SORT_ANIMATION_TRANSITION))\n  ]),\n\n  /** Animation that controls the arrow opacity. */\n  arrowOpacity: trigger('arrowOpacity', [\n    state('desc-to-active, asc-to-active, active', style({opacity: 1})),\n    state('desc-to-hint, asc-to-hint, hint', style({opacity: .54})),\n    state('hint-to-desc, active-to-desc, desc, hint-to-asc, active-to-asc, asc',\n        style({opacity: 0})),\n    // Transition between all states except for immediate transitions\n    transition('* => asc, * => desc, * => active, * => hint', animate('0ms')),\n    transition('* <=> *', animate(SORT_ANIMATION_TRANSITION))\n  ]),\n\n  /**\n   * Animation for the translation of the arrow as a whole. States are separated into two\n   * groups: ones with animations and others that are immediate. Immediate states are asc, desc,\n   * peek, and active. The other states define a specific animation (source-to-destination)\n   * and are determined as a function of their prev user-perceived state and what the next state\n   * should be.\n   */\n  arrowPosition: trigger('arrowPosition', [\n    // Hidden Above => Hint Center\n    transition('* => desc-to-hint, * => desc-to-active',\n        animate(SORT_ANIMATION_TRANSITION, keyframes([\n          style({transform: 'translateY(-25%)'}),\n          style({transform: 'translateY(0)'})\n        ]))),\n    // Hint Center => Hidden Below\n    transition('* => hint-to-desc, * => active-to-desc',\n        animate(SORT_ANIMATION_TRANSITION, keyframes([\n          style({transform: 'translateY(0)'}),\n          style({transform: 'translateY(25%)'})\n        ]))),\n    // Hidden Below => Hint Center\n    transition('* => asc-to-hint, * => asc-to-active',\n        animate(SORT_ANIMATION_TRANSITION, keyframes([\n          style({transform: 'translateY(25%)'}),\n          style({transform: 'translateY(0)'})\n        ]))),\n    // Hint Center => Hidden Above\n    transition('* => hint-to-asc, * => active-to-asc',\n        animate(SORT_ANIMATION_TRANSITION, keyframes([\n          style({transform: 'translateY(0)'}),\n          style({transform: 'translateY(-25%)'})\n        ]))),\n    state('desc-to-hint, asc-to-hint, hint, desc-to-active, asc-to-active, active',\n        style({transform: 'translateY(0)'})),\n    state('hint-to-desc, active-to-desc, desc',\n        style({transform: 'translateY(-25%)'})),\n    state('hint-to-asc, active-to-asc, asc',\n        style({transform: 'translateY(25%)'})),\n  ]),\n\n  /** Necessary trigger that calls animate on children animations. */\n  allowChildren: trigger('allowChildren', [\n    transition('* <=> *', [\n      query('@*', animateChild(), {optional: true})\n    ])\n  ]),\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable, SkipSelf, Optional} from '@angular/core';\nimport {Subject} from 'rxjs';\n\n/**\n * To modify the labels and text displayed, create a new instance of MatSortHeaderIntl and\n * include it in a custom provider.\n */\n@Injectable({providedIn: 'root'})\nexport class MatSortHeaderIntl {\n  /**\n   * Stream that emits whenever the labels here are changed. Use this to notify\n   * components if the labels have changed after initialization.\n   */\n  readonly changes: Subject<void> = new Subject<void>();\n\n  /** ARIA label for the sorting button. */\n  sortButtonLabel = (id: string) => {\n    return `Change sorting for ${id}`;\n  }\n}\n/** @docs-private */\nexport function MAT_SORT_HEADER_INTL_PROVIDER_FACTORY(parentIntl: MatSortHeaderIntl) {\n  return parentIntl || new MatSortHeaderIntl();\n}\n\n/** @docs-private */\nexport const MAT_SORT_HEADER_INTL_PROVIDER = {\n  // If there is already an MatSortHeaderIntl available, use that. Otherwise, provide a new one.\n  provide: MatSortHeaderIntl,\n  deps: [[new Optional(), new SkipSelf(), MatSortHeaderIntl]],\n  useFactory: MAT_SORT_HEADER_INTL_PROVIDER_FACTORY\n};\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {CdkColumnDef} from '@angular/cdk/table';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  Input,\n  OnDestroy,\n  OnInit,\n  Optional,\n  ViewEncapsulation\n} from '@angular/core';\nimport {CanDisable, mixinDisabled} from '@angular/material/core';\nimport {merge, Subscription} from 'rxjs';\nimport {MatSort, MatSortable} from './sort';\nimport {matSortAnimations} from './sort-animations';\nimport {SortDirection} from './sort-direction';\nimport {getSortHeaderNotContainedWithinSortError} from './sort-errors';\nimport {MatSortHeaderIntl} from './sort-header-intl';\n\n\n// Boilerplate for applying mixins to the sort header.\n/** @docs-private */\nexport class MatSortHeaderBase {}\nexport const _MatSortHeaderMixinBase = mixinDisabled(MatSortHeaderBase);\n\n/**\n * Valid positions for the arrow to be in for its opacity and translation. If the state is a\n * sort direction, the position of the arrow will be above/below and opacity 0. If the state is\n * hint, the arrow will be in the center with a slight opacity. Active state means the arrow will\n * be fully opaque in the center.\n *\n * @docs-private\n */\nexport type ArrowViewState = SortDirection | 'hint' | 'active';\n\n/**\n * States describing the arrow's animated position (animating fromState to toState).\n * If the fromState is not defined, there will be no animated transition to the toState.\n * @docs-private\n */\nexport interface ArrowViewStateTransition {\n  fromState?: ArrowViewState;\n  toState: ArrowViewState;\n}\n\n/**\n * Applies sorting behavior (click to change sort) and styles to an element, including an\n * arrow to display the current sort direction.\n *\n * Must be provided with an id and contained within a parent MatSort directive.\n *\n * If used on header cells in a CdkTable, it will automatically default its id from its containing\n * column definition.\n */\n@Component({\n  moduleId: module.id,\n  selector: '[mat-sort-header]',\n  exportAs: 'matSortHeader',\n  templateUrl: 'sort-header.html',\n  styleUrls: ['sort-header.css'],\n  host: {\n    '(click)': '_handleClick()',\n    '(mouseenter)': '_setIndicatorHintVisible(true)',\n    '(longpress)': '_setIndicatorHintVisible(true)',\n    '(mouseleave)': '_setIndicatorHintVisible(false)',\n    '[attr.aria-sort]': '_getAriaSortAttribute()',\n    '[class.mat-sort-header-disabled]': '_isDisabled()',\n  },\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  inputs: ['disabled'],\n  animations: [\n    matSortAnimations.indicator,\n    matSortAnimations.leftPointer,\n    matSortAnimations.rightPointer,\n    matSortAnimations.arrowOpacity,\n    matSortAnimations.arrowPosition,\n    matSortAnimations.allowChildren,\n  ]\n})\nexport class MatSortHeader extends _MatSortHeaderMixinBase\n    implements CanDisable, MatSortable, OnDestroy, OnInit {\n  private _rerenderSubscription: Subscription;\n\n  /**\n   * Flag set to true when the indicator should be displayed while the sort is not active. Used to\n   * provide an affordance that the header is sortable by showing on focus and hover.\n   */\n  _showIndicatorHint: boolean = false;\n\n  /**\n   * The view transition state of the arrow (translation/ opacity) - indicates its `from` and `to`\n   * position through the animation. If animations are currently disabled, the fromState is removed\n   * so that there is no animation displayed.\n   */\n  _viewState: ArrowViewStateTransition;\n\n  /** The direction the arrow should be facing according to the current state. */\n  _arrowDirection: SortDirection = '';\n\n  /**\n   * Whether the view state animation should show the transition between the `from` and `to` states.\n   */\n  _disableViewStateAnimation = false;\n\n  /**\n   * ID of this sort header. If used within the context of a CdkColumnDef, this will default to\n   * the column's name.\n   */\n  @Input('mat-sort-header') id: string;\n\n  /** Sets the position of the arrow that displays when sorted. */\n  @Input() arrowPosition: 'before' | 'after' = 'after';\n\n  /** Overrides the sort start value of the containing MatSort for this MatSortable. */\n  @Input() start: 'asc' | 'desc';\n\n  /** Overrides the disable clear value of the containing MatSort for this MatSortable. */\n  @Input()\n  get disableClear(): boolean { return this._disableClear; }\n  set disableClear(v) { this._disableClear = coerceBooleanProperty(v); }\n  private _disableClear: boolean;\n\n  constructor(public _intl: MatSortHeaderIntl,\n              changeDetectorRef: ChangeDetectorRef,\n              @Optional() public _sort: MatSort,\n              @Optional() public _cdkColumnDef: CdkColumnDef) {\n\n    super();\n\n    if (!_sort) {\n      throw getSortHeaderNotContainedWithinSortError();\n    }\n\n    this._rerenderSubscription = merge(_sort.sortChange, _sort._stateChanges, _intl.changes)\n        .subscribe(() => {\n          if (this._isSorted()) {\n            this._updateArrowDirection();\n          }\n\n          // If this header was recently active and now no longer sorted, animate away the arrow.\n          if (!this._isSorted() && this._viewState && this._viewState.toState === 'active') {\n            this._disableViewStateAnimation = false;\n            this._setAnimationTransitionState({fromState: 'active', toState: this._arrowDirection});\n          }\n\n          changeDetectorRef.markForCheck();\n        });\n  }\n\n  ngOnInit() {\n    if (!this.id && this._cdkColumnDef) {\n      this.id = this._cdkColumnDef.name;\n    }\n\n    // Initialize the direction of the arrow and set the view state to be immediately that state.\n    this._updateArrowDirection();\n    this._setAnimationTransitionState(\n        {toState: this._isSorted() ? 'active' : this._arrowDirection});\n\n    this._sort.register(this);\n  }\n\n  ngOnDestroy() {\n    this._sort.deregister(this);\n    this._rerenderSubscription.unsubscribe();\n  }\n\n  /**\n   * Sets the \"hint\" state such that the arrow will be semi-transparently displayed as a hint to the\n   * user showing what the active sort will become. If set to false, the arrow will fade away.\n   */\n  _setIndicatorHintVisible(visible: boolean) {\n    // No-op if the sort header is disabled - should not make the hint visible.\n    if (this._isDisabled() && visible) { return; }\n\n    this._showIndicatorHint = visible;\n\n    if (!this._isSorted()) {\n      this._updateArrowDirection();\n      if (this._showIndicatorHint) {\n        this._setAnimationTransitionState({fromState: this._arrowDirection, toState: 'hint'});\n      } else {\n        this._setAnimationTransitionState({fromState: 'hint', toState: this._arrowDirection});\n      }\n    }\n  }\n\n  /**\n   * Sets the animation transition view state for the arrow's position and opacity. If the\n   * `disableViewStateAnimation` flag is set to true, the `fromState` will be ignored so that\n   * no animation appears.\n   */\n  _setAnimationTransitionState(viewState: ArrowViewStateTransition) {\n    this._viewState = viewState;\n\n    // If the animation for arrow position state (opacity/translation) should be disabled,\n    // remove the fromState so that it jumps right to the toState.\n    if (this._disableViewStateAnimation) {\n      this._viewState = {toState: viewState.toState};\n    }\n  }\n\n  /** Triggers the sort on this sort header and removes the indicator hint. */\n  _handleClick() {\n    if (this._isDisabled()) { return; }\n\n    this._sort.sort(this);\n\n    // Do not show the animation if the header was already shown in the right position.\n    if (this._viewState.toState === 'hint' || this._viewState.toState === 'active') {\n      this._disableViewStateAnimation = true;\n    }\n\n    // If the arrow is now sorted, animate the arrow into place. Otherwise, animate it away into\n    // the direction it is facing.\n    const viewState: ArrowViewStateTransition = this._isSorted() ?\n        {fromState: this._arrowDirection, toState: 'active'} :\n        {fromState: 'active', toState: this._arrowDirection};\n    this._setAnimationTransitionState(viewState);\n\n    this._showIndicatorHint = false;\n  }\n\n  /** Whether this MatSortHeader is currently sorted in either ascending or descending order. */\n  _isSorted() {\n    return this._sort.active == this.id &&\n        (this._sort.direction === 'asc' || this._sort.direction === 'desc');\n  }\n\n  /** Returns the animation state for the arrow direction (indicator and pointers). */\n  _getArrowDirectionState() {\n    return `${this._isSorted() ? 'active-' : ''}${this._arrowDirection}`;\n  }\n\n  /** Returns the arrow position state (opacity, translation). */\n  _getArrowViewState() {\n    const fromState = this._viewState.fromState;\n    return (fromState ? `${fromState}-to-` : '') + this._viewState.toState;\n  }\n\n  /**\n   * Updates the direction the arrow should be pointing. If it is not sorted, the arrow should be\n   * facing the start direction. Otherwise if it is sorted, the arrow should point in the currently\n   * active sorted direction. The reason this is updated through a function is because the direction\n   * should only be changed at specific times - when deactivated but the hint is displayed and when\n   * the sort is active and the direction changes. Otherwise the arrow's direction should linger\n   * in cases such as the sort becoming deactivated but we want to animate the arrow away while\n   * preserving its direction, even though the next sort direction is actually different and should\n   * only be changed once the arrow displays again (hint or activation).\n   */\n  _updateArrowDirection() {\n    this._arrowDirection = this._isSorted() ?\n        this._sort.direction :\n        (this.start || this._sort.start);\n  }\n\n  _isDisabled() {\n    return this._sort.disabled || this.disabled;\n  }\n\n  /**\n   * Gets the aria-sort attribute that should be applied to this sort header. If this header\n   * is not sorted, returns null so that the attribute is removed from the host element. Aria spec\n   * says that the aria-sort property should only be present on one header at a time, so removing\n   * ensures this is true.\n   */\n  _getAriaSortAttribute() {\n    if (!this._isSorted()) { return null; }\n\n    return this._sort.direction == 'asc' ? 'ascending' : 'descending';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatSortHeader} from './sort-header';\nimport {MatSort} from './sort';\nimport {MAT_SORT_HEADER_INTL_PROVIDER} from './sort-header-intl';\nimport {CommonModule} from '@angular/common';\n\n\n@NgModule({\n  imports: [CommonModule],\n  exports: [MatSort, MatSortHeader],\n  declarations: [MatSort, MatSortHeader],\n  providers: [MAT_SORT_HEADER_INTL_PROVIDER]\n})\nexport class MatSortModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, TemplateRef} from '@angular/core';\nimport {CdkStepLabel} from '@angular/cdk/stepper';\n\n@Directive({\n  selector: '[matStepLabel]',\n})\nexport class MatStepLabel extends CdkStepLabel {\n  constructor(template: TemplateRef<any>) {\n    super(template);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable} from '@angular/core';\nimport {Subject} from 'rxjs';\n\n\n/** Stepper data that is required for internationalization. */\n@Injectable({providedIn: 'root'})\nexport class MatStepperIntl {\n  /**\n   * Stream that emits whenever the labels here are changed. Use this to notify\n   * components if the labels have changed after initialization.\n   */\n  readonly changes: Subject<void> = new Subject<void>();\n\n  /** Label that is rendered below optional steps. */\n  optionalLabel: string = 'Optional';\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {AnimationEvent} from '@angular/animations';\nimport {FocusMonitor, FocusOrigin, FocusTrap, FocusTrapFactory} from '@angular/cdk/a11y';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {ESCAPE} from '@angular/cdk/keycodes';\nimport {Platform} from '@angular/cdk/platform';\nimport {CdkScrollable} from '@angular/cdk/scrolling';\nimport {DOCUMENT} from '@angular/common';\nimport {\n  AfterContentChecked,\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  ContentChildren,\n  DoCheck,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  Output,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {fromEvent, merge, Observable, Subject} from 'rxjs';\nimport {debounceTime, filter, map, startWith, take, takeUntil} from 'rxjs/operators';\nimport {matDrawerAnimations} from './drawer-animations';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\n\n\n/** Throws an exception when two MatDrawer are matching the same position. */\nexport function throwMatDuplicatedDrawerError(position: string) {\n  throw Error(`A drawer was already declared for 'position=\"${position}\"'`);\n}\n\n\n/** Result of the toggle promise that indicates the state of the drawer. */\nexport type MatDrawerToggleResult = 'open' | 'close';\n\n/** Configures whether drawers should use auto sizing by default. */\nexport const MAT_DRAWER_DEFAULT_AUTOSIZE =\n    new InjectionToken<boolean>('MAT_DRAWER_DEFAULT_AUTOSIZE', {\n      providedIn: 'root',\n      factory: MAT_DRAWER_DEFAULT_AUTOSIZE_FACTORY,\n    });\n\n/** @docs-private */\nexport function MAT_DRAWER_DEFAULT_AUTOSIZE_FACTORY(): boolean {\n  return false;\n}\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-drawer-content',\n  template: '<ng-content></ng-content>',\n  host: {\n    'class': 'mat-drawer-content',\n    '[style.margin-left.px]': '_container._contentMargins.left',\n    '[style.margin-right.px]': '_container._contentMargins.right',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatDrawerContent implements AfterContentInit {\n  constructor(\n      private _changeDetectorRef: ChangeDetectorRef,\n      @Inject(forwardRef(() => MatDrawerContainer)) public _container: MatDrawerContainer) {\n  }\n\n  ngAfterContentInit() {\n    this._container._contentMarginChanges.subscribe(() => {\n      this._changeDetectorRef.markForCheck();\n    });\n  }\n}\n\n\n/**\n * This component corresponds to a drawer that can be opened on the drawer container.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-drawer',\n  exportAs: 'matDrawer',\n  template: '<ng-content></ng-content>',\n  animations: [matDrawerAnimations.transformDrawer],\n  host: {\n    'class': 'mat-drawer',\n    '[@transform]': '_animationState',\n    '(@transform.start)': '_onAnimationStart($event)',\n    '(@transform.done)': '_onAnimationEnd($event)',\n    // must prevent the browser from aligning text based on value\n    '[attr.align]': 'null',\n    '[class.mat-drawer-end]': 'position === \"end\"',\n    '[class.mat-drawer-over]': 'mode === \"over\"',\n    '[class.mat-drawer-push]': 'mode === \"push\"',\n    '[class.mat-drawer-side]': 'mode === \"side\"',\n    'tabIndex': '-1',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatDrawer implements AfterContentInit, AfterContentChecked, OnDestroy {\n  private _focusTrap: FocusTrap;\n  private _elementFocusedBeforeDrawerWasOpened: HTMLElement | null = null;\n\n  /** Whether the drawer is initialized. Used for disabling the initial animation. */\n  private _enableAnimations = false;\n\n  /** The side that the drawer is attached to. */\n  @Input()\n  get position(): 'start' | 'end' { return this._position; }\n  set position(value: 'start' | 'end') {\n    // Make sure we have a valid value.\n    value = value === 'end' ? 'end' : 'start';\n    if (value != this._position) {\n      this._position = value;\n      this.onPositionChanged.emit();\n    }\n  }\n  private _position: 'start' | 'end' = 'start';\n\n  /** Mode of the drawer; one of 'over', 'push' or 'side'. */\n  @Input()\n  get mode(): 'over' | 'push' | 'side' { return this._mode; }\n  set mode(value: 'over' | 'push' | 'side') {\n    this._mode = value;\n    this._modeChanged.next();\n  }\n  private _mode: 'over' | 'push' | 'side' = 'over';\n\n  /** Whether the drawer can be closed with the escape key or by clicking on the backdrop. */\n  @Input()\n  get disableClose(): boolean { return this._disableClose; }\n  set disableClose(value: boolean) { this._disableClose = coerceBooleanProperty(value); }\n  private _disableClose: boolean = false;\n\n  /** Whether the drawer should focus the first focusable element automatically when opened. */\n  @Input()\n  get autoFocus(): boolean { return this._autoFocus; }\n  set autoFocus(value: boolean) { this._autoFocus = coerceBooleanProperty(value); }\n  private _autoFocus: boolean = true;\n\n  /** How the sidenav was opened (keypress, mouse click etc.) */\n  private _openedVia: FocusOrigin | null;\n\n  /** Emits whenever the drawer has started animating. */\n  _animationStarted = new EventEmitter<AnimationEvent>();\n\n  /** Current state of the sidenav animation. */\n  _animationState: 'open-instant' | 'open' | 'void' = 'void';\n\n  /** Event emitted when the drawer open state is changed. */\n  @Output() readonly openedChange: EventEmitter<boolean> =\n      // Note this has to be async in order to avoid some issues with two-bindings (see #8872).\n      new EventEmitter<boolean>(/* isAsync */true);\n\n  /** Event emitted when the drawer has been opened. */\n  @Output('opened')\n  get _openedStream(): Observable<void> {\n    return this.openedChange.pipe(filter(o => o), map(() => {}));\n  }\n\n  /** Event emitted when the drawer has started opening. */\n  @Output()\n  get openedStart(): Observable<void> {\n    return this._animationStarted.pipe(\n      filter(e => e.fromState !== e.toState && e.toState.indexOf('open') === 0),\n      map(() => {})\n    );\n  }\n\n  /** Event emitted when the drawer has been closed. */\n  @Output('closed')\n  get _closedStream(): Observable<void> {\n    return this.openedChange.pipe(filter(o => !o), map(() => {}));\n  }\n\n  /** Event emitted when the drawer has started closing. */\n  @Output()\n  get closedStart(): Observable<void> {\n    return this._animationStarted.pipe(\n      filter(e => e.fromState !== e.toState && e.toState === 'void'),\n      map(() => {})\n    );\n  }\n\n  /** Event emitted when the drawer's position changes. */\n  // tslint:disable-next-line:no-output-on-prefix\n  @Output('positionChanged') onPositionChanged: EventEmitter<void> = new EventEmitter<void>();\n\n  /**\n   * An observable that emits when the drawer mode changes. This is used by the drawer container to\n   * to know when to when the mode changes so it can adapt the margins on the content.\n   */\n  readonly _modeChanged = new Subject();\n\n  get _isFocusTrapEnabled(): boolean {\n    // The focus trap is only enabled when the drawer is open in any mode other than side.\n    return this.opened && this.mode !== 'side';\n  }\n\n  constructor(private _elementRef: ElementRef,\n              private _focusTrapFactory: FocusTrapFactory,\n              private _focusMonitor: FocusMonitor,\n              private _platform: Platform,\n              private _ngZone: NgZone,\n              @Optional() @Inject(DOCUMENT) private _doc: any) {\n\n    this.openedChange.subscribe((opened: boolean) => {\n      if (opened) {\n        if (this._doc) {\n          this._elementFocusedBeforeDrawerWasOpened = this._doc.activeElement as HTMLElement;\n        }\n\n        if (this._isFocusTrapEnabled && this._focusTrap) {\n          this._trapFocus();\n        }\n      } else {\n        this._restoreFocus();\n      }\n    });\n\n    /**\n     * Listen to `keydown` events outside the zone so that change detection is not run every\n     * time a key is pressed. Instead we re-enter the zone only if the `ESC` key is pressed\n     * and we don't have close disabled.\n     */\n    this._ngZone.runOutsideAngular(() => {\n        fromEvent(this._elementRef.nativeElement, 'keydown').pipe(\n            filter((event: KeyboardEvent) => event.keyCode === ESCAPE && !this.disableClose)\n        ).subscribe((event) => this._ngZone.run(() => {\n            this.close();\n            event.stopPropagation();\n        }));\n    });\n  }\n\n  /** Traps focus inside the drawer. */\n  private _trapFocus() {\n    if (!this.autoFocus) {\n      return;\n    }\n\n    this._focusTrap.focusInitialElementWhenReady().then(hasMovedFocus => {\n      // If there were no focusable elements, focus the sidenav itself so the keyboard navigation\n      // still works. We need to check that `focus` is a function due to Universal.\n      if (!hasMovedFocus && typeof this._elementRef.nativeElement.focus === 'function') {\n        this._elementRef.nativeElement.focus();\n      }\n    });\n  }\n\n  /**\n   * If focus is currently inside the drawer, restores it to where it was before the drawer\n   * opened.\n   */\n  private _restoreFocus() {\n    if (!this.autoFocus) {\n      return;\n    }\n\n    const activeEl = this._doc && this._doc.activeElement;\n\n    if (activeEl && this._elementRef.nativeElement.contains(activeEl)) {\n      if (this._elementFocusedBeforeDrawerWasOpened instanceof HTMLElement) {\n        this._focusMonitor.focusVia(this._elementFocusedBeforeDrawerWasOpened, this._openedVia);\n      } else {\n        this._elementRef.nativeElement.blur();\n      }\n    }\n\n    this._elementFocusedBeforeDrawerWasOpened = null;\n    this._openedVia = null;\n  }\n\n  ngAfterContentInit() {\n    this._focusTrap = this._focusTrapFactory.create(this._elementRef.nativeElement);\n    this._focusTrap.enabled = this._isFocusTrapEnabled;\n  }\n\n  ngAfterContentChecked() {\n    // Enable the animations after the lifecycle hooks have run, in order to avoid animating\n    // drawers that are open by default. When we're on the server, we shouldn't enable the\n    // animations, because we don't want the drawer to animate the first time the user sees\n    // the page.\n    if (this._platform.isBrowser) {\n      this._enableAnimations = true;\n    }\n  }\n\n  ngOnDestroy() {\n    if (this._focusTrap) {\n      this._focusTrap.destroy();\n    }\n  }\n\n  /**\n   * Whether the drawer is opened. We overload this because we trigger an event when it\n   * starts or end.\n   */\n  @Input()\n  get opened(): boolean { return this._opened; }\n  set opened(value: boolean) { this.toggle(coerceBooleanProperty(value)); }\n  private _opened: boolean = false;\n\n  /**\n   * Open the drawer.\n   * @param openedVia Whether the drawer was opened by a key press, mouse click or programmatically.\n   * Used for focus management after the sidenav is closed.\n   */\n  open(openedVia?: FocusOrigin): Promise<MatDrawerToggleResult> {\n    return this.toggle(true, openedVia);\n  }\n\n  /** Close the drawer. */\n  close(): Promise<MatDrawerToggleResult> {\n    return this.toggle(false);\n  }\n\n  /**\n   * Toggle this drawer.\n   * @param isOpen Whether the drawer should be open.\n   * @param openedVia Whether the drawer was opened by a key press, mouse click or programmatically.\n   * Used for focus management after the sidenav is closed.\n   */\n  toggle(isOpen: boolean = !this.opened, openedVia: FocusOrigin = 'program'):\n    Promise<MatDrawerToggleResult> {\n\n    this._opened = isOpen;\n\n    if (isOpen) {\n      this._animationState = this._enableAnimations ? 'open' : 'open-instant';\n      this._openedVia = openedVia;\n    } else {\n      this._animationState = 'void';\n      this._restoreFocus();\n    }\n\n    if (this._focusTrap) {\n      this._focusTrap.enabled = this._isFocusTrapEnabled;\n    }\n\n    return new Promise<MatDrawerToggleResult>(resolve => {\n      this.openedChange.pipe(take(1)).subscribe(open => resolve(open ? 'open' : 'close'));\n    });\n  }\n\n  _onAnimationStart(event: AnimationEvent) {\n    this._animationStarted.emit(event);\n  }\n\n  _onAnimationEnd(event: AnimationEvent) {\n    const {fromState, toState} = event;\n\n    if ((toState.indexOf('open') === 0 && fromState === 'void') ||\n        (toState === 'void' && fromState.indexOf('open') === 0)) {\n      this.openedChange.emit(this._opened);\n    }\n  }\n\n  get _width(): number {\n    return this._elementRef.nativeElement ? (this._elementRef.nativeElement.offsetWidth || 0) : 0;\n  }\n}\n\n\n/**\n * `<mat-drawer-container>` component.\n *\n * This is the parent component to one or two `<mat-drawer>`s that validates the state internally\n * and coordinates the backdrop and content styling.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-drawer-container',\n  exportAs: 'matDrawerContainer',\n  templateUrl: 'drawer-container.html',\n  styleUrls: ['drawer.css'],\n  host: {\n    'class': 'mat-drawer-container',\n    '[class.mat-drawer-container-explicit-backdrop]': '_backdropOverride',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatDrawerContainer implements AfterContentInit, DoCheck, OnDestroy {\n  @ContentChildren(MatDrawer) _drawers: QueryList<MatDrawer>;\n  @ContentChild(MatDrawerContent) _content: MatDrawerContent;\n\n  /** The drawer child with the `start` position. */\n  get start(): MatDrawer | null { return this._start; }\n\n  /** The drawer child with the `end` position. */\n  get end(): MatDrawer | null { return this._end; }\n\n  /**\n   * Whether to automatically resize the container whenever\n   * the size of any of its drawers changes.\n   *\n   * **Use at your own risk!** Enabling this option can cause layout thrashing by measuring\n   * the drawers on every change detection cycle. Can be configured globally via the\n   * `MAT_DRAWER_DEFAULT_AUTOSIZE` token.\n   */\n  @Input()\n  get autosize(): boolean { return this._autosize; }\n  set autosize(value: boolean) { this._autosize = coerceBooleanProperty(value); }\n  private _autosize: boolean;\n\n  /**\n   * Whether the drawer container should have a backdrop while one of the sidenavs is open.\n   * If explicitly set to `true`, the backdrop will be enabled for drawers in the `side`\n   * mode as well.\n   */\n  @Input()\n  get hasBackdrop() {\n    if (this._backdropOverride == null) {\n      return !this._start || this._start.mode !== 'side' || !this._end || this._end.mode !== 'side';\n    }\n\n    return this._backdropOverride;\n  }\n  set hasBackdrop(value: any) {\n    this._backdropOverride = value == null ? null : coerceBooleanProperty(value);\n  }\n  _backdropOverride: boolean | null;\n\n  /** Event emitted when the drawer backdrop is clicked. */\n  @Output() readonly backdropClick: EventEmitter<void> = new EventEmitter<void>();\n\n  /** The drawer at the start/end position, independent of direction. */\n  private _start: MatDrawer | null;\n  private _end: MatDrawer | null;\n\n  /**\n   * The drawer at the left/right. When direction changes, these will change as well.\n   * They're used as aliases for the above to set the left/right style properly.\n   * In LTR, _left == _start and _right == _end.\n   * In RTL, _left == _end and _right == _start.\n   */\n  private _left: MatDrawer | null;\n  private _right: MatDrawer | null;\n\n  /** Emits when the component is destroyed. */\n  private readonly _destroyed = new Subject<void>();\n\n  /** Emits on every ngDoCheck. Used for debouncing reflows. */\n  private readonly _doCheckSubject = new Subject<void>();\n\n  /**\n   * Margins to be applied to the content. These are used to push / shrink the drawer content when a\n   * drawer is open. We use margin rather than transform even for push mode because transform breaks\n   * fixed position elements inside of the transformed element.\n   */\n  _contentMargins: {left: number|null, right: number|null} = {left: null, right: null};\n\n  readonly _contentMarginChanges = new Subject<{left: number|null, right: number|null}>();\n\n  /** Reference to the CdkScrollable instance that wraps the scrollable content. */\n  @ViewChild(CdkScrollable) scrollable: CdkScrollable;\n\n  constructor(@Optional() private _dir: Directionality,\n              private _element: ElementRef,\n              private _ngZone: NgZone,\n              private _changeDetectorRef: ChangeDetectorRef,\n              @Inject(MAT_DRAWER_DEFAULT_AUTOSIZE) defaultAutosize = false,\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) private _animationMode?: string) {\n\n    // If a `Dir` directive exists up the tree, listen direction changes\n    // and update the left/right properties to point to the proper start/end.\n    if (_dir) {\n      _dir.change.pipe(takeUntil(this._destroyed)).subscribe(() => {\n        this._validateDrawers();\n        this._updateContentMargins();\n      });\n    }\n\n    this._autosize = defaultAutosize;\n  }\n\n  ngAfterContentInit() {\n    this._drawers.changes.pipe(startWith(null)).subscribe(() => {\n      this._validateDrawers();\n\n      this._drawers.forEach((drawer: MatDrawer) => {\n        this._watchDrawerToggle(drawer);\n        this._watchDrawerPosition(drawer);\n        this._watchDrawerMode(drawer);\n      });\n\n      if (!this._drawers.length ||\n          this._isDrawerOpen(this._start) ||\n          this._isDrawerOpen(this._end)) {\n        this._updateContentMargins();\n      }\n\n      this._changeDetectorRef.markForCheck();\n    });\n\n    this._doCheckSubject.pipe(\n      debounceTime(10), // Arbitrary debounce time, less than a frame at 60fps\n      takeUntil(this._destroyed)\n    ).subscribe(() => this._updateContentMargins());\n  }\n\n  ngOnDestroy() {\n    this._doCheckSubject.complete();\n    this._destroyed.next();\n    this._destroyed.complete();\n  }\n\n  /** Calls `open` of both start and end drawers */\n  open(): void {\n    this._drawers.forEach(drawer => drawer.open());\n  }\n\n  /** Calls `close` of both start and end drawers */\n  close(): void {\n    this._drawers.forEach(drawer => drawer.close());\n  }\n\n  ngDoCheck() {\n    // If users opted into autosizing, do a check every change detection cycle.\n    if (this._autosize && this._isPushed()) {\n      // Run outside the NgZone, otherwise the debouncer will throw us into an infinite loop.\n      this._ngZone.runOutsideAngular(() => this._doCheckSubject.next());\n    }\n  }\n\n  /**\n   * Subscribes to drawer events in order to set a class on the main container element when the\n   * drawer is open and the backdrop is visible. This ensures any overflow on the container element\n   * is properly hidden.\n   */\n  private _watchDrawerToggle(drawer: MatDrawer): void {\n    drawer._animationStarted.pipe(\n      takeUntil(this._drawers.changes),\n      filter((event: AnimationEvent) => event.fromState !== event.toState)\n    )\n    .subscribe((event: AnimationEvent) => {\n      // Set the transition class on the container so that the animations occur. This should not\n      // be set initially because animations should only be triggered via a change in state.\n      if (event.toState !== 'open-instant' && this._animationMode !== 'NoopAnimations') {\n        this._element.nativeElement.classList.add('mat-drawer-transition');\n      }\n\n      this._updateContentMargins();\n      this._changeDetectorRef.markForCheck();\n    });\n\n    if (drawer.mode !== 'side') {\n      drawer.openedChange.pipe(takeUntil(this._drawers.changes)).subscribe(() =>\n          this._setContainerClass(drawer.opened));\n    }\n  }\n\n  /**\n   * Subscribes to drawer onPositionChanged event in order to\n   * re-validate drawers when the position changes.\n   */\n  private _watchDrawerPosition(drawer: MatDrawer): void {\n    if (!drawer) {\n      return;\n    }\n    // NOTE: We need to wait for the microtask queue to be empty before validating,\n    // since both drawers may be swapping positions at the same time.\n    drawer.onPositionChanged.pipe(takeUntil(this._drawers.changes)).subscribe(() => {\n      this._ngZone.onMicrotaskEmpty.asObservable().pipe(take(1)).subscribe(() => {\n        this._validateDrawers();\n      });\n    });\n  }\n\n  /** Subscribes to changes in drawer mode so we can run change detection. */\n  private _watchDrawerMode(drawer: MatDrawer): void {\n    if (drawer) {\n      drawer._modeChanged.pipe(takeUntil(merge(this._drawers.changes, this._destroyed)))\n        .subscribe(() => {\n          this._updateContentMargins();\n          this._changeDetectorRef.markForCheck();\n        });\n    }\n  }\n\n  /** Toggles the 'mat-drawer-opened' class on the main 'mat-drawer-container' element. */\n  private _setContainerClass(isAdd: boolean): void {\n    if (isAdd) {\n      this._element.nativeElement.classList.add('mat-drawer-opened');\n    } else {\n      this._element.nativeElement.classList.remove('mat-drawer-opened');\n    }\n  }\n\n  /** Validate the state of the drawer children components. */\n  private _validateDrawers() {\n    this._start = this._end = null;\n\n    // Ensure that we have at most one start and one end drawer.\n    this._drawers.forEach(drawer => {\n      if (drawer.position == 'end') {\n        if (this._end != null) {\n          throwMatDuplicatedDrawerError('end');\n        }\n        this._end = drawer;\n      } else {\n        if (this._start != null) {\n          throwMatDuplicatedDrawerError('start');\n        }\n        this._start = drawer;\n      }\n    });\n\n    this._right = this._left = null;\n\n    // Detect if we're LTR or RTL.\n    if (this._dir && this._dir.value === 'rtl') {\n      this._left = this._end;\n      this._right = this._start;\n    } else {\n      this._left = this._start;\n      this._right = this._end;\n    }\n  }\n\n  /** Whether the container is being pushed to the side by one of the drawers. */\n  private _isPushed() {\n    return (this._isDrawerOpen(this._start) && this._start.mode != 'over') ||\n           (this._isDrawerOpen(this._end) && this._end.mode != 'over');\n  }\n\n  _onBackdropClicked() {\n    this.backdropClick.emit();\n    this._closeModalDrawer();\n  }\n\n  _closeModalDrawer() {\n    // Close all open drawers where closing is not disabled and the mode is not `side`.\n    [this._start, this._end]\n      .filter(drawer => drawer && !drawer.disableClose && this._canHaveBackdrop(drawer))\n      .forEach(drawer => drawer!.close());\n  }\n\n  _isShowingBackdrop(): boolean {\n    return (this._isDrawerOpen(this._start) && this._canHaveBackdrop(this._start)) ||\n           (this._isDrawerOpen(this._end) && this._canHaveBackdrop(this._end));\n  }\n\n  private _canHaveBackdrop(drawer: MatDrawer): boolean {\n    return drawer.mode !== 'side' || !!this._backdropOverride;\n  }\n\n  private _isDrawerOpen(drawer: MatDrawer | null): drawer is MatDrawer {\n    return drawer != null && drawer.opened;\n  }\n\n  /**\n   * Recalculates and updates the inline styles for the content. Note that this should be used\n   * sparingly, because it causes a reflow.\n   */\n  private _updateContentMargins() {\n    // 1. For drawers in `over` mode, they don't affect the content.\n    // 2. For drawers in `side` mode they should shrink the content. We do this by adding to the\n    //    left margin (for left drawer) or right margin (for right the drawer).\n    // 3. For drawers in `push` mode the should shift the content without resizing it. We do this by\n    //    adding to the left or right margin and simultaneously subtracting the same amount of\n    //    margin from the other side.\n\n    let left = 0;\n    let right = 0;\n\n    if (this._left && this._left.opened) {\n      if (this._left.mode == 'side') {\n        left += this._left._width;\n      } else if (this._left.mode == 'push') {\n        let width = this._left._width;\n        left += width;\n        right -= width;\n      }\n    }\n\n    if (this._right && this._right.opened) {\n      if (this._right.mode == 'side') {\n        right += this._right._width;\n      } else if (this._right.mode == 'push') {\n        let width = this._right._width;\n        right += width;\n        left -= width;\n      }\n    }\n\n    if (left !== this._contentMargins.left || right !== this._contentMargins.right) {\n      this._contentMargins = {left, right};\n\n      // Pull back into the NgZone since in some cases we could be outside. We need to be careful\n      // to do it only when something changed, otherwise we can end up hitting the zone too often.\n      this._ngZone.run(() => this._contentMarginChanges.next(this._contentMargins));\n    }\n\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  ContentChildren,\n  forwardRef,\n  Inject,\n  Input,\n  ViewEncapsulation,\n  QueryList,\n} from '@angular/core';\nimport {MatDrawer, MatDrawerContainer, MatDrawerContent} from './drawer';\nimport {matDrawerAnimations} from './drawer-animations';\nimport {coerceBooleanProperty, coerceNumberProperty} from '@angular/cdk/coercion';\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-sidenav-content',\n  template: '<ng-content></ng-content>',\n  host: {\n    'class': 'mat-drawer-content mat-sidenav-content',\n    '[style.margin-left.px]': '_container._contentMargins.left',\n    '[style.margin-right.px]': '_container._contentMargins.right',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatSidenavContent extends MatDrawerContent {\n  constructor(\n      changeDetectorRef: ChangeDetectorRef,\n      @Inject(forwardRef(() => MatSidenavContainer)) container: MatSidenavContainer) {\n    super(changeDetectorRef, container);\n  }\n}\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-sidenav',\n  exportAs: 'matSidenav',\n  template: '<ng-content></ng-content>',\n  animations: [matDrawerAnimations.transformDrawer],\n  host: {\n    'class': 'mat-drawer mat-sidenav',\n    'tabIndex': '-1',\n    '[@transform]': '_animationState',\n    '(@transform.start)': '_onAnimationStart($event)',\n    '(@transform.done)': '_onAnimationEnd($event)',\n    // must prevent the browser from aligning text based on value\n    '[attr.align]': 'null',\n    '[class.mat-drawer-end]': 'position === \"end\"',\n    '[class.mat-drawer-over]': 'mode === \"over\"',\n    '[class.mat-drawer-push]': 'mode === \"push\"',\n    '[class.mat-drawer-side]': 'mode === \"side\"',\n    '[class.mat-sidenav-fixed]': 'fixedInViewport',\n    '[style.top.px]': 'fixedInViewport ? fixedTopGap : null',\n    '[style.bottom.px]': 'fixedInViewport ? fixedBottomGap : null',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatSidenav extends MatDrawer {\n  /** Whether the sidenav is fixed in the viewport. */\n  @Input()\n  get fixedInViewport(): boolean { return this._fixedInViewport; }\n  set fixedInViewport(value) { this._fixedInViewport = coerceBooleanProperty(value); }\n  private _fixedInViewport = false;\n\n  /**\n   * The gap between the top of the sidenav and the top of the viewport when the sidenav is in fixed\n   * mode.\n   */\n  @Input()\n  get fixedTopGap(): number { return this._fixedTopGap; }\n  set fixedTopGap(value) { this._fixedTopGap = coerceNumberProperty(value); }\n  private _fixedTopGap = 0;\n\n  /**\n   * The gap between the bottom of the sidenav and the bottom of the viewport when the sidenav is in\n   * fixed mode.\n   */\n  @Input()\n  get fixedBottomGap(): number { return this._fixedBottomGap; }\n  set fixedBottomGap(value) { this._fixedBottomGap = coerceNumberProperty(value); }\n  private _fixedBottomGap = 0;\n}\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-sidenav-container',\n  exportAs: 'matSidenavContainer',\n  templateUrl: 'sidenav-container.html',\n  styleUrls: ['drawer.css'],\n  host: {\n    'class': 'mat-drawer-container mat-sidenav-container',\n    '[class.mat-drawer-container-explicit-backdrop]': '_backdropOverride',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatSidenavContainer extends MatDrawerContainer {\n  @ContentChildren(MatSidenav) _drawers: QueryList<MatSidenav>;\n  @ContentChild(MatSidenavContent) _content: MatSidenavContent;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {PlatformModule} from '@angular/cdk/platform';\nimport {ScrollDispatchModule} from '@angular/cdk/scrolling';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatDrawer, MatDrawerContainer, MatDrawerContent} from './drawer';\nimport {MatSidenav, MatSidenavContainer, MatSidenavContent} from './sidenav';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatCommonModule,\n    ScrollDispatchModule,\n    PlatformModule,\n  ],\n  exports: [\n    MatCommonModule,\n    MatDrawer,\n    MatDrawerContainer,\n    MatDrawerContent,\n    MatSidenav,\n    MatSidenavContainer,\n    MatSidenavContent,\n  ],\n  declarations: [\n    MatDrawer,\n    MatDrawerContainer,\n    MatDrawerContent,\n    MatSidenav,\n    MatSidenavContainer,\n    MatSidenavContent,\n  ],\n})\nexport class MatSidenavModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor, FocusOrigin} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {Platform} from '@angular/cdk/platform';\nimport {\n  AfterContentInit,\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Input,\n  OnDestroy,\n  Output,\n  ViewChild,\n  ViewEncapsulation,\n  NgZone,\n  Optional,\n  Inject,\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {\n  CanColor,\n  CanDisable,\n  CanDisableRipple,\n  HammerInput,\n  HasTabIndex,\n  MatRipple,\n  mixinColor,\n  mixinDisabled,\n  mixinDisableRipple,\n  mixinTabIndex,\n  RippleRef,\n} from '@angular/material/core';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\n\n// Increasing integer for generating unique ids for slide-toggle components.\nlet nextUniqueId = 0;\n\nexport const MAT_SLIDE_TOGGLE_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatSlideToggle),\n  multi: true\n};\n\n/** Change event object emitted by a MatSlideToggle. */\nexport class MatSlideToggleChange {\n  constructor(\n    /** The source MatSlideToggle of the event. */\n    public source: MatSlideToggle,\n    /** The new `checked` value of the MatSlideToggle. */\n    public checked: boolean) { }\n}\n\n// Boilerplate for applying mixins to MatSlideToggle.\n/** @docs-private */\nexport class MatSlideToggleBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatSlideToggleMixinBase =\n  mixinTabIndex(mixinColor(mixinDisableRipple(mixinDisabled(MatSlideToggleBase)), 'accent'));\n\n/** Represents a slidable \"switch\" toggle that can be moved between on and off. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-slide-toggle',\n  exportAs: 'matSlideToggle',\n  host: {\n    'class': 'mat-slide-toggle',\n    '[id]': 'id',\n    '[class.mat-checked]': 'checked',\n    '[class.mat-disabled]': 'disabled',\n    '[class.mat-slide-toggle-label-before]': 'labelPosition == \"before\"',\n    '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"',\n  },\n  templateUrl: 'slide-toggle.html',\n  styleUrls: ['slide-toggle.css'],\n  providers: [MAT_SLIDE_TOGGLE_VALUE_ACCESSOR],\n  inputs: ['disabled', 'disableRipple', 'color', 'tabIndex'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatSlideToggle extends _MatSlideToggleMixinBase implements OnDestroy, AfterContentInit,\n    ControlValueAccessor, CanDisable, CanColor, HasTabIndex, CanDisableRipple {\n\n  private onChange = (_: any) => {};\n  private onTouched = () => {};\n\n  private _uniqueId: string = `mat-slide-toggle-${++nextUniqueId}`;\n  private _required: boolean = false;\n  private _checked: boolean = false;\n\n  /** Reference to the focus state ripple. */\n  private _focusRipple: RippleRef | null;\n\n  /** Whether the thumb is currently being dragged. */\n  private _dragging = false;\n\n  /** Previous checked state before drag started. */\n  private _previousChecked: boolean;\n\n  /** Width of the thumb bar of the slide-toggle. */\n  private _thumbBarWidth: number;\n\n  /** Percentage of the thumb while dragging. Percentage as fraction of 100. */\n  private _dragPercentage: number;\n\n  /** Reference to the thumb HTMLElement. */\n  @ViewChild('thumbContainer') _thumbEl: ElementRef<HTMLElement>;\n\n  /** Reference to the thumb bar HTMLElement. */\n  @ViewChild('toggleBar') _thumbBarEl: ElementRef<HTMLElement>;\n\n  /** Name value will be applied to the input element if present */\n  @Input() name: string | null = null;\n\n  /** A unique id for the slide-toggle input. If none is supplied, it will be auto-generated. */\n  @Input() id: string = this._uniqueId;\n\n  /** Whether the label should appear after or before the slide-toggle. Defaults to 'after' */\n  @Input() labelPosition: 'before' | 'after' = 'after';\n\n  /** Whether the slide-toggle element is checked or not */\n\n  /** Used to set the aria-label attribute on the underlying input element. */\n  @Input('aria-label') ariaLabel: string | null = null;\n\n  /** Used to set the aria-labelledby attribute on the underlying input element. */\n  @Input('aria-labelledby') ariaLabelledby: string | null = null;\n\n  /** Whether the slide-toggle is required. */\n  @Input()\n  get required(): boolean { return this._required; }\n  set required(value) { this._required = coerceBooleanProperty(value); }\n\n  /** Whether the slide-toggle element is checked or not */\n  @Input()\n  get checked(): boolean { return this._checked; }\n  set checked(value) {\n    this._checked = coerceBooleanProperty(value);\n    this._changeDetectorRef.markForCheck();\n  }\n  /** An event will be dispatched each time the slide-toggle changes its value. */\n  @Output() readonly change: EventEmitter<MatSlideToggleChange> =\n      new EventEmitter<MatSlideToggleChange>();\n\n  /** Returns the unique id for the visual hidden input. */\n  get inputId(): string { return `${this.id || this._uniqueId}-input`; }\n\n  /** Reference to the underlying input element. */\n  @ViewChild('input') _inputElement: ElementRef;\n\n  /** Reference to the ripple directive on the thumb container. */\n  @ViewChild(MatRipple) _ripple: MatRipple;\n\n  constructor(elementRef: ElementRef,\n              /**\n               * @deprecated The `_platform` parameter to be removed.\n               * @deletion-target 7.0.0\n               */\n              _platform: Platform,\n              private _focusMonitor: FocusMonitor,\n              private _changeDetectorRef: ChangeDetectorRef,\n              @Attribute('tabindex') tabIndex: string,\n              private _ngZone: NgZone,\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode?: string) {\n\n    super(elementRef);\n    this.tabIndex = parseInt(tabIndex) || 0;\n  }\n\n  ngAfterContentInit() {\n    this._focusMonitor\n      .monitor(this._inputElement.nativeElement)\n      .subscribe(focusOrigin => this._onInputFocusChange(focusOrigin));\n  }\n\n  ngOnDestroy() {\n    this._focusMonitor.stopMonitoring(this._inputElement.nativeElement);\n  }\n\n  /** Method being called whenever the underlying input emits a change event. */\n  _onChangeEvent(event: Event) {\n    // We always have to stop propagation on the change event.\n    // Otherwise the change event, from the input element, will bubble up and\n    // emit its event object to the component's `change` output.\n    event.stopPropagation();\n\n    // Releasing the pointer over the `<label>` element while dragging triggers another\n    // click event on the `<label>` element. This means that the checked state of the underlying\n    // input changed unintentionally and needs to be changed back.\n    if (this._dragging) {\n      this._inputElement.nativeElement.checked = this.checked;\n      return;\n    }\n\n    // Sync the value from the underlying input element with the component instance.\n    this.checked = this._inputElement.nativeElement.checked;\n\n    // Emit our custom change event only if the underlying input emitted one. This ensures that\n    // there is no change event, when the checked state changes programmatically.\n    this._emitChangeEvent();\n  }\n\n  /** Method being called whenever the slide-toggle has been clicked. */\n  _onInputClick(event: Event) {\n    // We have to stop propagation for click events on the visual hidden input element.\n    // By default, when a user clicks on a label element, a generated click event will be\n    // dispatched on the associated input element. Since we are using a label element as our\n    // root container, the click event on the `slide-toggle` will be executed twice.\n    // The real click event will bubble up, and the generated click event also tries to bubble up.\n    // This will lead to multiple click events.\n    // Preventing bubbling for the second event will solve that issue.\n    event.stopPropagation();\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  writeValue(value: any): void {\n    this.checked = !!value;\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  registerOnChange(fn: any): void {\n    this.onChange = fn;\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  registerOnTouched(fn: any): void {\n    this.onTouched = fn;\n  }\n\n  /** Implemented as a part of ControlValueAccessor. */\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Focuses the slide-toggle. */\n  focus(): void {\n    this._focusMonitor.focusVia(this._inputElement.nativeElement, 'keyboard');\n  }\n\n  /** Toggles the checked state of the slide-toggle. */\n  toggle(): void {\n    this.checked = !this.checked;\n  }\n\n  /** Function is called whenever the focus changes for the input element. */\n  private _onInputFocusChange(focusOrigin: FocusOrigin) {\n    // TODO(paul): support `program`. See https://github.com/angular/material2/issues/9889\n    if (!this._focusRipple && focusOrigin === 'keyboard') {\n      // For keyboard focus show a persistent ripple as focus indicator.\n      this._focusRipple = this._ripple.launch(0, 0, {persistent: true});\n    } else if (!focusOrigin) {\n      this.onTouched();\n\n      // Fade out and clear the focus ripple if one is currently present.\n      if (this._focusRipple) {\n        this._focusRipple.fadeOut();\n        this._focusRipple = null;\n      }\n    }\n  }\n\n  /**\n   * Emits a change event on the `change` output. Also notifies the FormControl about the change.\n   */\n  private _emitChangeEvent() {\n    this.onChange(this.checked);\n    this.change.emit(new MatSlideToggleChange(this, this.checked));\n  }\n\n  /** Retrieves the percentage of thumb from the moved distance. Percentage as fraction of 100. */\n  private _getDragPercentage(distance: number) {\n    let percentage = (distance / this._thumbBarWidth) * 100;\n\n    // When the toggle was initially checked, then we have to start the drag at the end.\n    if (this._previousChecked) {\n      percentage += 100;\n    }\n\n    return Math.max(0, Math.min(percentage, 100));\n  }\n\n  _onDragStart() {\n    if (!this.disabled && !this._dragging) {\n      const thumbEl = this._thumbEl.nativeElement;\n      this._thumbBarWidth = this._thumbBarEl.nativeElement.clientWidth - thumbEl.clientWidth;\n      thumbEl.classList.add('mat-dragging');\n\n      this._previousChecked = this.checked;\n      this._dragging = true;\n    }\n  }\n\n  _onDrag(event: HammerInput) {\n    if (this._dragging) {\n      this._dragPercentage = this._getDragPercentage(event.deltaX);\n      // Calculate the moved distance based on the thumb bar width.\n      const dragX = (this._dragPercentage / 100) * this._thumbBarWidth;\n      this._thumbEl.nativeElement.style.transform = `translate3d(${dragX}px, 0, 0)`;\n    }\n  }\n\n  _onDragEnd() {\n    if (this._dragging) {\n      const newCheckedValue = this._dragPercentage > 50;\n\n      if (newCheckedValue !== this.checked) {\n        this.checked = newCheckedValue;\n        this._emitChangeEvent();\n      }\n\n      // The drag should be stopped outside of the current event handler, otherwise the\n      // click event will be fired before it and will revert the drag change.\n      this._ngZone.runOutsideAngular(() => setTimeout(() => {\n        if (this._dragging) {\n          this._dragging = false;\n          this._thumbEl.nativeElement.classList.remove('mat-dragging');\n\n          // Reset the transform because the component will take care\n          // of the thumb position after drag.\n          this._thumbEl.nativeElement.style.transform = '';\n        }\n      }));\n    }\n  }\n\n  /** Method being called whenever the label text changes. */\n  _onLabelTextChange() {\n    // This method is getting called whenever the label of the slide-toggle changes.\n    // Since the slide-toggle uses the OnPush strategy we need to notify it about the change\n    // that has been recognized by the cdkObserveContent directive.\n    this._changeDetectorRef.markForCheck();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ObserversModule} from '@angular/cdk/observers';\nimport {NgModule} from '@angular/core';\nimport {GestureConfig, MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {HAMMER_GESTURE_CONFIG} from '@angular/platform-browser';\nimport {MatSlideToggle} from './slide-toggle';\n\n\n@NgModule({\n  imports: [MatRippleModule, MatCommonModule, ObserversModule],\n  exports: [MatSlideToggle, MatCommonModule],\n  declarations: [MatSlideToggle],\n  providers: [\n    {provide: HAMMER_GESTURE_CONFIG, useClass: GestureConfig}\n  ],\n})\nexport class MatSlideToggleModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ChangeDetectionStrategy,\n  Inject,\n  Input,\n  ElementRef,\n  ViewEncapsulation,\n  Optional,\n  InjectionToken,\n} from '@angular/core';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\nimport {CanColor, mixinColor} from '@angular/material/core';\nimport {Platform} from '@angular/cdk/platform';\nimport {DOCUMENT} from '@angular/common';\nimport {coerceNumberProperty} from '@angular/cdk/coercion';\n\n/** Possible mode for a progress spinner. */\nexport type ProgressSpinnerMode = 'determinate' | 'indeterminate';\n\n/**\n * Base reference size of the spinner.\n * @docs-private\n */\nconst BASE_SIZE = 100;\n\n/**\n * Base reference stroke width of the spinner.\n * @docs-private\n */\nconst BASE_STROKE_WIDTH = 10;\n\n// Boilerplate for applying mixins to MatProgressSpinner.\n/** @docs-private */\nexport class MatProgressSpinnerBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatProgressSpinnerMixinBase = mixinColor(MatProgressSpinnerBase, 'primary');\n\n/** Default `mat-progress-spinner` options that can be overridden. */\nexport interface MatProgressSpinnerDefaultOptions {\n  /** Diameter of the spinner. */\n  diameter?: number;\n  /** Width of the spinner's stroke. */\n  strokeWidth?: number;\n}\n\n/** Injection token to be used to override the default options for `mat-progress-spinner`. */\nexport const MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS =\n    new InjectionToken<MatProgressSpinnerDefaultOptions>('mat-progress-spinner-default-options', {\n      providedIn: 'root',\n      factory: MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS_FACTORY,\n    });\n\n/** @docs-private */\nexport function MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS_FACTORY(): MatProgressSpinnerDefaultOptions {\n  return {diameter: BASE_SIZE};\n}\n\n// .0001 percentage difference is necessary in order to avoid unwanted animation frames\n// for example because the animation duration is 4 seconds, .1% accounts to 4ms\n// which are enough to see the flicker described in\n// https://github.com/angular/material2/issues/8984\nconst INDETERMINATE_ANIMATION_TEMPLATE = `\n @keyframes mat-progress-spinner-stroke-rotate-DIAMETER {\n    0%      { stroke-dashoffset: START_VALUE;  transform: rotate(0); }\n    12.5%   { stroke-dashoffset: END_VALUE;    transform: rotate(0); }\n    12.5001%  { stroke-dashoffset: END_VALUE;    transform: rotateX(180deg) rotate(72.5deg); }\n    25%     { stroke-dashoffset: START_VALUE;  transform: rotateX(180deg) rotate(72.5deg); }\n\n    25.0001%   { stroke-dashoffset: START_VALUE;  transform: rotate(270deg); }\n    37.5%   { stroke-dashoffset: END_VALUE;    transform: rotate(270deg); }\n    37.5001%  { stroke-dashoffset: END_VALUE;    transform: rotateX(180deg) rotate(161.5deg); }\n    50%     { stroke-dashoffset: START_VALUE;  transform: rotateX(180deg) rotate(161.5deg); }\n\n    50.0001%  { stroke-dashoffset: START_VALUE;  transform: rotate(180deg); }\n    62.5%   { stroke-dashoffset: END_VALUE;    transform: rotate(180deg); }\n    62.5001%  { stroke-dashoffset: END_VALUE;    transform: rotateX(180deg) rotate(251.5deg); }\n    75%     { stroke-dashoffset: START_VALUE;  transform: rotateX(180deg) rotate(251.5deg); }\n\n    75.0001%  { stroke-dashoffset: START_VALUE;  transform: rotate(90deg); }\n    87.5%   { stroke-dashoffset: END_VALUE;    transform: rotate(90deg); }\n    87.5001%  { stroke-dashoffset: END_VALUE;    transform: rotateX(180deg) rotate(341.5deg); }\n    100%    { stroke-dashoffset: START_VALUE;  transform: rotateX(180deg) rotate(341.5deg); }\n  }\n`;\n\n/**\n * `<mat-progress-spinner>` component.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-progress-spinner',\n  exportAs: 'matProgressSpinner',\n  host: {\n    'role': 'progressbar',\n    'class': 'mat-progress-spinner',\n    '[class._mat-animation-noopable]': `_animationMode === 'NoopAnimations'`,\n    '[style.width.px]': 'diameter',\n    '[style.height.px]': 'diameter',\n    '[attr.aria-valuemin]': 'mode === \"determinate\" ? 0 : null',\n    '[attr.aria-valuemax]': 'mode === \"determinate\" ? 100 : null',\n    '[attr.aria-valuenow]': 'value',\n    '[attr.mode]': 'mode',\n  },\n  inputs: ['color'],\n  templateUrl: 'progress-spinner.html',\n  styleUrls: ['progress-spinner.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatProgressSpinner extends _MatProgressSpinnerMixinBase implements CanColor {\n\n  private _value = 0;\n  private _strokeWidth = this._defaults ? this._defaults.strokeWidth : undefined;\n  private _fallbackAnimation = false;\n\n  /** Tracks diameters of existing instances to de-dupe generated styles (default d = 100) */\n  private static diameters = new Set<number>([BASE_SIZE]);\n\n  /**\n   * Used for storing all of the generated keyframe animations.\n   * @dynamic\n   */\n  private static styleTag: HTMLStyleElement|null = null;\n\n  /** The diameter of the progress spinner (will set width and height of svg). */\n  @Input()\n  get diameter(): number { return this._diameter; }\n  set diameter(size: number) {\n    this._diameter = coerceNumberProperty(size);\n\n    if (!this._fallbackAnimation && !MatProgressSpinner.diameters.has(this._diameter)) {\n      this._attachStyleNode();\n    }\n  }\n  private _diameter = this._defaults && this._defaults.diameter ?\n      this._defaults.diameter : BASE_SIZE;\n\n  /** Stroke width of the progress spinner. */\n  @Input()\n  get strokeWidth(): number {\n    return this._strokeWidth || this.diameter / 10;\n  }\n  set strokeWidth(value: number) {\n    this._strokeWidth = coerceNumberProperty(value);\n  }\n\n  /** Mode of the progress circle */\n  @Input() mode: ProgressSpinnerMode = 'determinate';\n\n  /** Value of the progress circle. */\n  @Input()\n  get value(): number {\n    return this.mode === 'determinate' ? this._value : 0;\n  }\n  set value(newValue: number) {\n    this._value = Math.max(0, Math.min(100, coerceNumberProperty(newValue)));\n  }\n\n  constructor(public _elementRef: ElementRef,\n              platform: Platform,\n              @Optional() @Inject(DOCUMENT) private _document: any,\n              // @deletion-target 7.0.0 _animationMode and _defaults parameters to be made required.\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode?: string,\n              @Inject(MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS)\n                  private _defaults?: MatProgressSpinnerDefaultOptions) {\n\n    super(_elementRef);\n    this._fallbackAnimation = platform.EDGE || platform.TRIDENT;\n\n    // On IE and Edge, we can't animate the `stroke-dashoffset`\n    // reliably so we fall back to a non-spec animation.\n    const animationClass =\n      `mat-progress-spinner-indeterminate${this._fallbackAnimation ? '-fallback' : ''}-animation`;\n\n    _elementRef.nativeElement.classList.add(animationClass);\n  }\n\n  /** The radius of the spinner, adjusted for stroke width. */\n  get _circleRadius() {\n    return (this.diameter - BASE_STROKE_WIDTH) / 2;\n  }\n\n  /** The view box of the spinner's svg element. */\n  get _viewBox() {\n    const viewBox = this._circleRadius * 2 + this.strokeWidth;\n    return `0 0 ${viewBox} ${viewBox}`;\n  }\n\n  /** The stroke circumference of the svg circle. */\n  get _strokeCircumference(): number {\n    return 2 * Math.PI * this._circleRadius;\n  }\n\n  /** The dash offset of the svg circle. */\n  get _strokeDashOffset() {\n    if (this.mode === 'determinate') {\n      return this._strokeCircumference * (100 - this._value) / 100;\n    }\n\n    // In fallback mode set the circle to 80% and rotate it with CSS.\n    if (this._fallbackAnimation && this.mode === 'indeterminate') {\n      return this._strokeCircumference * 0.2;\n    }\n\n    return null;\n  }\n\n  /** Stroke width of the circle in percent. */\n  get _circleStrokeWidth() {\n    return this.strokeWidth / this.diameter * 100;\n  }\n\n  /** Dynamically generates a style tag containing the correct animation for this diameter. */\n  private _attachStyleNode(): void {\n    let styleTag = MatProgressSpinner.styleTag;\n\n    if (!styleTag) {\n      styleTag = this._document.createElement('style');\n      this._document.head.appendChild(styleTag);\n      MatProgressSpinner.styleTag = styleTag;\n    }\n\n    if (styleTag && styleTag.sheet) {\n      (styleTag.sheet as CSSStyleSheet).insertRule(this._getAnimationText(), 0);\n    }\n\n    MatProgressSpinner.diameters.add(this.diameter);\n  }\n\n  /** Generates animation styles adjusted for the spinner's diameter. */\n  private _getAnimationText(): string {\n    return INDETERMINATE_ANIMATION_TEMPLATE\n        // Animation should begin at 5% and end at 80%\n        .replace(/START_VALUE/g, `${0.95 * this._strokeCircumference}`)\n        .replace(/END_VALUE/g, `${0.2 * this._strokeCircumference}`)\n        .replace(/DIAMETER/g, `${this.diameter}`);\n  }\n}\n\n\n/**\n * `<mat-spinner>` component.\n *\n * This is a component definition to be used as a convenience reference to create an\n * indeterminate `<mat-progress-spinner>` instance.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-spinner',\n  host: {\n    'role': 'progressbar',\n    'mode': 'indeterminate',\n    'class': 'mat-spinner mat-progress-spinner',\n    '[class._mat-animation-noopable]': `_animationMode === 'NoopAnimations'`,\n    '[style.width.px]': 'diameter',\n    '[style.height.px]': 'diameter',\n  },\n  inputs: ['color'],\n  templateUrl: 'progress-spinner.html',\n  styleUrls: ['progress-spinner.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatSpinner extends MatProgressSpinner {\n  constructor(elementRef: ElementRef, platform: Platform,\n              @Optional() @Inject(DOCUMENT) document: any,\n              // @deletion-targets 7.0.0 animationMode and defaults parameters to be made required.\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) animationMode?: string,\n              @Inject(MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS)\n                  defaults?: MatProgressSpinnerDefaultOptions) {\n    super(elementRef, platform, document, animationMode, defaults);\n    this.mode = 'indeterminate';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatProgressSpinner, MatSpinner} from './progress-spinner';\n\n\n@NgModule({\n  imports: [MatCommonModule],\n  exports: [\n    MatProgressSpinner,\n    MatSpinner,\n    MatCommonModule\n  ],\n  declarations: [\n    MatProgressSpinner,\n    MatSpinner\n  ],\n})\nclass MatProgressSpinnerModule {}\n\nexport {MatProgressSpinnerModule};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor, FocusOrigin} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {UniqueSelectionDispatcher} from '@angular/cdk/collections';\nimport {\n  AfterContentInit,\n  AfterViewInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Input,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Output,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n  Inject,\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {\n  CanColor,\n  CanDisable,\n  CanDisableRipple,\n  HasTabIndex,\n  MatRipple,\n  mixinColor,\n  mixinDisabled,\n  mixinDisableRipple,\n  mixinTabIndex,\n  RippleRef,\n} from '@angular/material/core';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\n\n\n// Increasing integer for generating unique ids for radio components.\nlet nextUniqueId = 0;\n\n/**\n * Provider Expression that allows mat-radio-group to register as a ControlValueAccessor. This\n * allows it to support [(ngModel)] and ngControl.\n * @docs-private\n */\nexport const MAT_RADIO_GROUP_CONTROL_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatRadioGroup),\n  multi: true\n};\n\n/** Change event object emitted by MatRadio and MatRadioGroup. */\nexport class MatRadioChange {\n  constructor(\n    /** The MatRadioButton that emits the change event. */\n    public source: MatRadioButton,\n    /** The value of the MatRadioButton. */\n    public value: any) {}\n}\n\n\n// Boilerplate for applying mixins to MatRadioGroup.\n/** @docs-private */\nexport class MatRadioGroupBase { }\nexport const _MatRadioGroupMixinBase = mixinDisabled(MatRadioGroupBase);\n\n/**\n * A group of radio buttons. May contain one or more `<mat-radio-button>` elements.\n */\n@Directive({\n  selector: 'mat-radio-group',\n  exportAs: 'matRadioGroup',\n  providers: [MAT_RADIO_GROUP_CONTROL_VALUE_ACCESSOR],\n  host: {\n    'role': 'radiogroup',\n    'class': 'mat-radio-group',\n  },\n  inputs: ['disabled'],\n})\nexport class MatRadioGroup extends _MatRadioGroupMixinBase\n    implements AfterContentInit, ControlValueAccessor, CanDisable {\n  /**\n   * Selected value for group. Should equal the value of the selected radio button if there *is*\n   * a corresponding radio button with a matching value. If there is *not* such a corresponding\n   * radio button, this value persists to be applied in case a new radio button is added with a\n   * matching value.\n   */\n  private _value: any = null;\n\n  /** The HTML name attribute applied to radio buttons in this group. */\n  private _name: string = `mat-radio-group-${nextUniqueId++}`;\n\n  /** The currently selected radio button. Should match value. */\n  private _selected: MatRadioButton | null = null;\n\n  /** Whether the `value` has been set to its initial value. */\n  private _isInitialized: boolean = false;\n\n  /** Whether the labels should appear after or before the radio-buttons. Defaults to 'after' */\n  private _labelPosition: 'before' | 'after' = 'after';\n\n  /** Whether the radio group is disabled. */\n  private _disabled: boolean = false;\n\n  /** Whether the radio group is required. */\n  private _required: boolean = false;\n\n  /** The method to be called in order to update ngModel */\n  _controlValueAccessorChangeFn: (value: any) => void = () => {};\n\n  /**\n   * onTouch function registered via registerOnTouch (ControlValueAccessor).\n   * @docs-private\n   */\n  onTouched: () => any = () => {};\n\n  /**\n   * Event emitted when the group value changes.\n   * Change events are only emitted when the value changes due to user interaction with\n   * a radio button (the same behavior as `<input type-\"radio\">`).\n   */\n  @Output() readonly change: EventEmitter<MatRadioChange> = new EventEmitter<MatRadioChange>();\n\n  /** Child radio buttons. */\n  @ContentChildren(forwardRef(() => MatRadioButton), { descendants: true })\n  _radios: QueryList<MatRadioButton>;\n\n  /** Name of the radio button group. All radio buttons inside this group will use this name. */\n  @Input()\n  get name(): string { return this._name; }\n  set name(value: string) {\n    this._name = value;\n    this._updateRadioButtonNames();\n  }\n\n  /** Whether the labels should appear after or before the radio-buttons. Defaults to 'after' */\n  @Input()\n  get labelPosition(): 'before' | 'after' {\n    return this._labelPosition;\n  }\n  set labelPosition(v) {\n    this._labelPosition = v === 'before' ? 'before' : 'after';\n    this._markRadiosForCheck();\n  }\n\n  /** Value of the radio button. */\n  @Input()\n  get value(): any { return this._value; }\n  set value(newValue: any) {\n    if (this._value !== newValue) {\n      // Set this before proceeding to ensure no circular loop occurs with selection.\n      this._value = newValue;\n\n      this._updateSelectedRadioFromValue();\n      this._checkSelectedRadioButton();\n    }\n  }\n\n  _checkSelectedRadioButton() {\n    if (this._selected && !this._selected.checked) {\n      this._selected.checked = true;\n    }\n  }\n\n  /** Whether the radio button is selected. */\n  @Input()\n  get selected() { return this._selected; }\n  set selected(selected: MatRadioButton | null) {\n    this._selected = selected;\n    this.value = selected ? selected.value : null;\n    this._checkSelectedRadioButton();\n  }\n\n  /** Whether the radio group is disabled */\n  @Input()\n  get disabled(): boolean { return this._disabled; }\n  set disabled(value) {\n    this._disabled = coerceBooleanProperty(value);\n    this._markRadiosForCheck();\n  }\n\n  /** Whether the radio group is required */\n  @Input()\n  get required(): boolean { return this._required; }\n  set required(value: boolean) {\n    this._required = coerceBooleanProperty(value);\n    this._markRadiosForCheck();\n  }\n\n  constructor(private _changeDetector: ChangeDetectorRef) {\n    super();\n  }\n\n  /**\n   * Initialize properties once content children are available.\n   * This allows us to propagate relevant attributes to associated buttons.\n   */\n  ngAfterContentInit() {\n    // Mark this component as initialized in AfterContentInit because the initial value can\n    // possibly be set by NgModel on MatRadioGroup, and it is possible that the OnInit of the\n    // NgModel occurs *after* the OnInit of the MatRadioGroup.\n    this._isInitialized = true;\n  }\n\n  /**\n   * Mark this group as being \"touched\" (for ngModel). Meant to be called by the contained\n   * radio buttons upon their blur.\n   */\n  _touch() {\n    if (this.onTouched) {\n      this.onTouched();\n    }\n  }\n\n  private _updateRadioButtonNames(): void {\n    if (this._radios) {\n      this._radios.forEach(radio => {\n        radio.name = this.name;\n      });\n    }\n  }\n\n  /** Updates the `selected` radio button from the internal _value state. */\n  private _updateSelectedRadioFromValue(): void {\n    // If the value already matches the selected radio, do nothing.\n    const isAlreadySelected = this._selected !== null && this._selected.value === this._value;\n\n    if (this._radios && !isAlreadySelected) {\n      this._selected = null;\n      this._radios.forEach(radio => {\n        radio.checked = this.value === radio.value;\n        if (radio.checked) {\n          this._selected = radio;\n        }\n      });\n    }\n  }\n\n  /** Dispatch change event with current selection and group value. */\n  _emitChangeEvent(): void {\n    if (this._isInitialized) {\n      this.change.emit(new MatRadioChange(this._selected!, this._value));\n    }\n  }\n\n  _markRadiosForCheck() {\n    if (this._radios) {\n      this._radios.forEach(radio => radio._markForCheck());\n    }\n  }\n\n  /**\n   * Sets the model value. Implemented as part of ControlValueAccessor.\n   * @param value\n   */\n  writeValue(value: any) {\n    this.value = value;\n    this._changeDetector.markForCheck();\n  }\n\n  /**\n   * Registers a callback to be triggered when the model value changes.\n   * Implemented as part of ControlValueAccessor.\n   * @param fn Callback to be registered.\n   */\n  registerOnChange(fn: (value: any) => void) {\n    this._controlValueAccessorChangeFn = fn;\n  }\n\n  /**\n   * Registers a callback to be triggered when the control is touched.\n   * Implemented as part of ControlValueAccessor.\n   * @param fn Callback to be registered.\n   */\n  registerOnTouched(fn: any) {\n    this.onTouched = fn;\n  }\n\n  /**\n   * Sets the disabled state of the control. Implemented as a part of ControlValueAccessor.\n   * @param isDisabled Whether the control should be disabled.\n   */\n  setDisabledState(isDisabled: boolean) {\n    this.disabled = isDisabled;\n    this._changeDetector.markForCheck();\n  }\n}\n\n// Boilerplate for applying mixins to MatRadioButton.\n/** @docs-private */\nexport class MatRadioButtonBase {\n  // Since the disabled property is manually defined for the MatRadioButton and isn't set up in\n  // the mixin base class. To be able to use the tabindex mixin, a disabled property must be\n  // defined to properly work.\n  disabled: boolean;\n\n  constructor(public _elementRef: ElementRef) {}\n}\n// As per Material design specifications the selection control radio should use the accent color\n// palette by default. https://material.io/guidelines/components/selection-controls.html\nexport const _MatRadioButtonMixinBase =\n    mixinColor(mixinDisableRipple(mixinTabIndex(MatRadioButtonBase)), 'accent');\n\n/**\n * A Material design radio-button. Typically placed inside of `<mat-radio-group>` elements.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-radio-button',\n  templateUrl: 'radio.html',\n  styleUrls: ['radio.css'],\n  inputs: ['color', 'disableRipple', 'tabIndex'],\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matRadioButton',\n  host: {\n    'class': 'mat-radio-button',\n    '[class.mat-radio-checked]': 'checked',\n    '[class.mat-radio-disabled]': 'disabled',\n    '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"',\n    '[attr.id]': 'id',\n    // Note: under normal conditions focus shouldn't land on this element, however it may be\n    // programmatically set, for example inside of a focus trap, in this case we want to forward\n    // the focus to the native element.\n    '(focus)': '_inputElement.nativeElement.focus()',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatRadioButton extends _MatRadioButtonMixinBase\n    implements OnInit, AfterViewInit, OnDestroy, CanColor, CanDisableRipple, HasTabIndex {\n\n  private _uniqueId: string = `mat-radio-${++nextUniqueId}`;\n\n  /** The unique ID for the radio button. */\n  @Input() id: string = this._uniqueId;\n\n  /** Analog to HTML 'name' attribute used to group radios for unique selection. */\n  @Input() name: string;\n\n  /** Used to set the 'aria-label' attribute on the underlying input element. */\n  @Input('aria-label') ariaLabel: string;\n\n  /** The 'aria-labelledby' attribute takes precedence as the element's text alternative. */\n  @Input('aria-labelledby') ariaLabelledby: string;\n\n  /** The 'aria-describedby' attribute is read after the element's label and field type. */\n  @Input('aria-describedby') ariaDescribedby: string;\n\n  /** Whether this radio button is checked. */\n  @Input()\n  get checked(): boolean { return this._checked; }\n  set checked(value: boolean) {\n    const newCheckedState = coerceBooleanProperty(value);\n    if (this._checked !== newCheckedState) {\n      this._checked = newCheckedState;\n      if (newCheckedState && this.radioGroup && this.radioGroup.value !== this.value) {\n        this.radioGroup.selected = this;\n      } else if (!newCheckedState && this.radioGroup && this.radioGroup.value === this.value) {\n\n        // When unchecking the selected radio button, update the selected radio\n        // property on the group.\n        this.radioGroup.selected = null;\n      }\n\n      if (newCheckedState) {\n        // Notify all radio buttons with the same name to un-check.\n        this._radioDispatcher.notify(this.id, this.name);\n      }\n      this._changeDetector.markForCheck();\n    }\n  }\n\n  /** The value of this radio button. */\n  @Input()\n  get value(): any { return this._value; }\n  set value(value: any) {\n    if (this._value !== value) {\n      this._value = value;\n      if (this.radioGroup !== null) {\n        if (!this.checked) {\n          // Update checked when the value changed to match the radio group's value\n          this.checked = this.radioGroup.value === value;\n        }\n        if (this.checked) {\n          this.radioGroup.selected = this;\n        }\n      }\n    }\n  }\n\n  /** Whether the label should appear after or before the radio button. Defaults to 'after' */\n  @Input()\n  get labelPosition(): 'before' | 'after' {\n    return this._labelPosition || (this.radioGroup && this.radioGroup.labelPosition) || 'after';\n  }\n  set labelPosition(value) {\n    this._labelPosition = value;\n  }\n  private _labelPosition: 'before' | 'after';\n\n  /** Whether the radio button is disabled. */\n  @Input()\n  get disabled(): boolean {\n    return this._disabled || (this.radioGroup !== null && this.radioGroup.disabled);\n  }\n  set disabled(value: boolean) {\n    const newDisabledState = coerceBooleanProperty(value);\n    if (this._disabled !== newDisabledState) {\n      this._disabled = newDisabledState;\n      this._changeDetector.markForCheck();\n    }\n  }\n\n  /** Whether the radio button is required. */\n  @Input()\n  get required(): boolean {\n    return this._required || (this.radioGroup && this.radioGroup.required);\n  }\n  set required(value: boolean) {\n    this._required = coerceBooleanProperty(value);\n  }\n\n  /**\n   * Event emitted when the checked state of this radio button changes.\n   * Change events are only emitted when the value changes due to user interaction with\n   * the radio button (the same behavior as `<input type-\"radio\">`).\n   */\n  @Output() readonly change: EventEmitter<MatRadioChange> = new EventEmitter<MatRadioChange>();\n\n  /** The parent radio group. May or may not be present. */\n  radioGroup: MatRadioGroup;\n\n  /** ID of the native input element inside `<mat-radio-button>` */\n  get inputId(): string { return `${this.id || this._uniqueId}-input`; }\n\n  /** Whether this radio is checked. */\n  private _checked: boolean = false;\n\n  /** Whether this radio is disabled. */\n  private _disabled: boolean;\n\n  /** Whether this radio is required. */\n  private _required: boolean;\n\n  /** Value assigned to this radio. */\n  private _value: any = null;\n\n  /** The child ripple instance. */\n  @ViewChild(MatRipple) _ripple: MatRipple;\n\n  /** Reference to the current focus ripple. */\n  private _focusRipple: RippleRef | null;\n\n  /** Unregister function for _radioDispatcher */\n  private _removeUniqueSelectionListener: () => void = () => {};\n\n  /** The native `<input type=radio>` element */\n  @ViewChild('input') _inputElement: ElementRef;\n\n  constructor(@Optional() radioGroup: MatRadioGroup,\n              elementRef: ElementRef,\n              private _changeDetector: ChangeDetectorRef,\n              private _focusMonitor: FocusMonitor,\n              private _radioDispatcher: UniqueSelectionDispatcher,\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode?: string) {\n    super(elementRef);\n\n    // Assertions. Ideally these should be stripped out by the compiler.\n    // TODO(jelbourn): Assert that there's no name binding AND a parent radio group.\n    this.radioGroup = radioGroup;\n\n    this._removeUniqueSelectionListener =\n      _radioDispatcher.listen((id: string, name: string) => {\n        if (id !== this.id && name === this.name) {\n          this.checked = false;\n        }\n      });\n  }\n\n  /** Focuses the radio button. */\n  focus(): void {\n    this._focusMonitor.focusVia(this._inputElement.nativeElement, 'keyboard');\n  }\n\n  /**\n   * Marks the radio button as needing checking for change detection.\n   * This method is exposed because the parent radio group will directly\n   * update bound properties of the radio button.\n   */\n  _markForCheck() {\n    // When group value changes, the button will not be notified. Use `markForCheck` to explicit\n    // update radio button's status\n    this._changeDetector.markForCheck();\n  }\n\n  ngOnInit() {\n    if (this.radioGroup) {\n      // If the radio is inside a radio group, determine if it should be checked\n      this.checked = this.radioGroup.value === this._value;\n      // Copy name from parent radio group\n      this.name = this.radioGroup.name;\n    }\n  }\n\n  ngAfterViewInit() {\n    this._focusMonitor\n      .monitor(this._inputElement.nativeElement)\n      .subscribe(focusOrigin => this._onInputFocusChange(focusOrigin));\n  }\n\n  ngOnDestroy() {\n    this._focusMonitor.stopMonitoring(this._inputElement.nativeElement);\n    this._removeUniqueSelectionListener();\n  }\n\n  /** Dispatch change event with current value. */\n  private _emitChangeEvent(): void {\n    this.change.emit(new MatRadioChange(this, this._value));\n  }\n\n  _isRippleDisabled() {\n    return this.disableRipple || this.disabled;\n  }\n\n  _onInputClick(event: Event) {\n    // We have to stop propagation for click events on the visual hidden input element.\n    // By default, when a user clicks on a label element, a generated click event will be\n    // dispatched on the associated input element. Since we are using a label element as our\n    // root container, the click event on the `radio-button` will be executed twice.\n    // The real click event will bubble up, and the generated click event also tries to bubble up.\n    // This will lead to multiple click events.\n    // Preventing bubbling for the second event will solve that issue.\n    event.stopPropagation();\n  }\n\n  /**\n   * Triggered when the radio button received a click or the input recognized any change.\n   * Clicking on a label element, will trigger a change event on the associated input.\n   */\n  _onInputChange(event: Event) {\n    // We always have to stop propagation on the change event.\n    // Otherwise the change event, from the input element, will bubble up and\n    // emit its event object to the `change` output.\n    event.stopPropagation();\n\n    const groupValueChanged = this.radioGroup && this.value !== this.radioGroup.value;\n    this.checked = true;\n    this._emitChangeEvent();\n\n    if (this.radioGroup) {\n      this.radioGroup._controlValueAccessorChangeFn(this.value);\n      this.radioGroup._touch();\n      if (groupValueChanged) {\n        this.radioGroup._emitChangeEvent();\n      }\n    }\n  }\n\n  /** Function is called whenever the focus changes for the input element. */\n  private _onInputFocusChange(focusOrigin: FocusOrigin) {\n    // TODO(paul): support `program`. See https://github.com/angular/material2/issues/9889\n    if (!this._focusRipple && focusOrigin === 'keyboard') {\n      this._focusRipple = this._ripple.launch(0, 0, {persistent: true});\n    } else if (!focusOrigin) {\n      if (this.radioGroup) {\n        this.radioGroup._touch();\n      }\n\n      if (this._focusRipple) {\n        this._focusRipple.fadeOut();\n        this._focusRipple = null;\n      }\n    }\n  }\n\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {MatRadioButton, MatRadioGroup} from './radio';\n\n\n@NgModule({\n  imports: [CommonModule, MatRippleModule, MatCommonModule],\n  exports: [MatRadioGroup, MatRadioButton, MatCommonModule],\n  declarations: [MatRadioGroup, MatRadioButton],\n})\nexport class MatRadioModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/** Animations used by the Material drawers. */\nexport const matDrawerAnimations: {\n  readonly transformDrawer: AnimationTriggerMetadata;\n} = {\n  /** Animation that slides a drawer in and out. */\n  transformDrawer: trigger('transform', [\n    state('open, open-instant', style({\n      'transform': 'translate3d(0, 0, 0)',\n      'visibility': 'visible',\n    })),\n    state('void', style({\n      // Avoids the shadow showing up when closed in SSR.\n      'box-shadow': 'none',\n      'visibility': 'hidden',\n    })),\n    transition('void => open-instant', animate('0ms')),\n    transition('void <=> open, open-instant => void',\n        animate('400ms cubic-bezier(0.25, 0.8, 0.25, 1)'))\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatOptionModule} from '@angular/material/core';\nimport {MatFormFieldModule} from '@angular/material/form-field';\nimport {MAT_SELECT_SCROLL_STRATEGY_PROVIDER, MatSelect, MatSelectTrigger} from './select';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    OverlayModule,\n    MatOptionModule,\n    MatCommonModule,\n  ],\n  exports: [MatFormFieldModule, MatSelect, MatSelectTrigger, MatOptionModule, MatCommonModule],\n  declarations: [MatSelect, MatSelectTrigger],\n  providers: [MAT_SELECT_SCROLL_STRATEGY_PROVIDER]\n})\nexport class MatSelectModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/** Animations used by MatTooltip. */\nexport const matTooltipAnimations: {\n  readonly tooltipState: AnimationTriggerMetadata;\n} = {\n  /** Animation that transitions a tooltip in and out. */\n  tooltipState: trigger('state', [\n    state('initial, void, hidden', style({transform: 'scale(0)'})),\n    state('visible', style({transform: 'scale(1)'})),\n    transition('* => visible', animate('150ms cubic-bezier(0.0, 0.0, 0.2, 1)')),\n    transition('* => hidden', animate('150ms cubic-bezier(0.4, 0.0, 1, 1)')),\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {\n  MatTooltip,\n  TooltipComponent,\n  MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY_PROVIDER,\n} from './tooltip';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    OverlayModule,\n    MatCommonModule,\n  ],\n  exports: [MatTooltip, TooltipComponent, MatCommonModule],\n  declarations: [MatTooltip, TooltipComponent],\n  entryComponents: [TooltipComponent],\n  providers: [MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY_PROVIDER]\n})\nexport class MatTooltipModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable, Optional, SkipSelf} from '@angular/core';\nimport {Subject} from 'rxjs';\n\n\n/**\n * To modify the labels and text displayed, create a new instance of MatPaginatorIntl and\n * include it in a custom provider\n */\n@Injectable({providedIn: 'root'})\nexport class MatPaginatorIntl {\n  /**\n   * Stream that emits whenever the labels here are changed. Use this to notify\n   * components if the labels have changed after initialization.\n   */\n  readonly changes: Subject<void> = new Subject<void>();\n\n  /** A label for the page size selector. */\n  itemsPerPageLabel: string = 'Items per page:';\n\n  /** A label for the button that increments the current page. */\n  nextPageLabel: string = 'Next page';\n\n  /** A label for the button that decrements the current page. */\n  previousPageLabel: string = 'Previous page';\n\n  /** A label for the button that moves to the first page. */\n  firstPageLabel: string = 'First page';\n\n  /** A label for the button that moves to the last page. */\n  lastPageLabel: string = 'Last page';\n\n  /** A label for the range of items within the current page and the length of the whole list. */\n  getRangeLabel = (page: number, pageSize: number, length: number) => {\n    if (length == 0 || pageSize == 0) { return `0 of ${length}`; }\n\n    length = Math.max(length, 0);\n\n    const startIndex = page * pageSize;\n\n    // If the start index exceeds the list length, do not try and fix the end index to the end.\n    const endIndex = startIndex < length ?\n        Math.min(startIndex + pageSize, length) :\n        startIndex + pageSize;\n\n    return `${startIndex + 1} - ${endIndex} of ${length}`;\n  }\n}\n\n/** @docs-private */\nexport function MAT_PAGINATOR_INTL_PROVIDER_FACTORY(parentIntl: MatPaginatorIntl) {\n  return parentIntl || new MatPaginatorIntl();\n}\n\n/** @docs-private */\nexport const MAT_PAGINATOR_INTL_PROVIDER = {\n  // If there is already an MatPaginatorIntl available, use that. Otherwise, provide a new one.\n  provide: MatPaginatorIntl,\n  deps: [[new Optional(), new SkipSelf(), MatPaginatorIntl]],\n  useFactory: MAT_PAGINATOR_INTL_PROVIDER_FACTORY\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceNumberProperty, coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  OnInit,\n  Output,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {Subscription} from 'rxjs';\nimport {MatPaginatorIntl} from './paginator-intl';\nimport {HasInitialized, mixinInitialized} from '@angular/material/core';\n\n/** The default page size if there is no page size and there are no provided page size options. */\nconst DEFAULT_PAGE_SIZE = 50;\n\n/**\n * Change event object that is emitted when the user selects a\n * different page size or navigates to another page.\n */\nexport class PageEvent {\n  /** The current page index. */\n  pageIndex: number;\n\n  /**\n   * Index of the page that was selected previously.\n   * @deletion-target 7.0.0 To be made into a required property.\n   */\n  previousPageIndex?: number;\n\n  /** The current page size */\n  pageSize: number;\n\n  /** The current total number of items being paged */\n  length: number;\n}\n\n// Boilerplate for applying mixins to MatPaginator.\n/** @docs-private */\nexport class MatPaginatorBase {}\nexport const _MatPaginatorBase = mixinInitialized(MatPaginatorBase);\n\n/**\n * Component to provide navigation between paged information. Displays the size of the current\n * page, user-selectable options to change that size, what items are being shown, and\n * navigational button to go to the previous or next page.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-paginator',\n  exportAs: 'matPaginator',\n  templateUrl: 'paginator.html',\n  styleUrls: ['paginator.css'],\n  host: {\n    'class': 'mat-paginator',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatPaginator extends _MatPaginatorBase implements OnInit, OnDestroy, HasInitialized {\n  private _initialized: boolean;\n  private _intlChanges: Subscription;\n\n  /** The zero-based page index of the displayed list of items. Defaulted to 0. */\n  @Input()\n  get pageIndex(): number { return this._pageIndex; }\n  set pageIndex(value: number) {\n    this._pageIndex = Math.max(coerceNumberProperty(value), 0);\n    this._changeDetectorRef.markForCheck();\n  }\n  _pageIndex: number = 0;\n\n  /** The length of the total number of items that are being paginated. Defaulted to 0. */\n  @Input()\n  get length(): number { return this._length; }\n  set length(value: number) {\n    this._length = coerceNumberProperty(value);\n    this._changeDetectorRef.markForCheck();\n  }\n  _length: number = 0;\n\n  /** Number of items to display on a page. By default set to 50. */\n  @Input()\n  get pageSize(): number { return this._pageSize; }\n  set pageSize(value: number) {\n    this._pageSize = Math.max(coerceNumberProperty(value), 0);\n    this._updateDisplayedPageSizeOptions();\n  }\n  private _pageSize: number;\n\n  /** The set of provided page size options to display to the user. */\n  @Input()\n  get pageSizeOptions(): number[] { return this._pageSizeOptions; }\n  set pageSizeOptions(value: number[]) {\n    this._pageSizeOptions = (value || []).map(p => coerceNumberProperty(p));\n    this._updateDisplayedPageSizeOptions();\n  }\n  private _pageSizeOptions: number[] = [];\n\n  /** Whether to hide the page size selection UI from the user. */\n  @Input()\n  get hidePageSize(): boolean { return this._hidePageSize; }\n  set hidePageSize(value: boolean) {\n    this._hidePageSize = coerceBooleanProperty(value);\n  }\n  private _hidePageSize = false;\n\n\n  /** Whether to show the first/last buttons UI to the user. */\n  @Input()\n  get showFirstLastButtons(): boolean { return this._showFirstLastButtons; }\n  set showFirstLastButtons(value: boolean) {\n    this._showFirstLastButtons = coerceBooleanProperty(value);\n  }\n  private _showFirstLastButtons = false;\n\n  /** Event emitted when the paginator changes the page size or page index. */\n  @Output() readonly page: EventEmitter<PageEvent> = new EventEmitter<PageEvent>();\n\n  /** Displayed set of page size options. Will be sorted and include current page size. */\n  _displayedPageSizeOptions: number[];\n\n  constructor(public _intl: MatPaginatorIntl,\n              private _changeDetectorRef: ChangeDetectorRef) {\n    super();\n    this._intlChanges = _intl.changes.subscribe(() => this._changeDetectorRef.markForCheck());\n  }\n\n  ngOnInit() {\n    this._initialized = true;\n    this._updateDisplayedPageSizeOptions();\n    this._markInitialized();\n  }\n\n  ngOnDestroy() {\n    this._intlChanges.unsubscribe();\n  }\n\n  /** Advances to the next page if it exists. */\n  nextPage(): void {\n    if (!this.hasNextPage()) { return; }\n\n    const previousPageIndex = this.pageIndex;\n    this.pageIndex++;\n    this._emitPageEvent(previousPageIndex);\n  }\n\n  /** Move back to the previous page if it exists. */\n  previousPage(): void {\n    if (!this.hasPreviousPage()) { return; }\n\n    const previousPageIndex = this.pageIndex;\n    this.pageIndex--;\n    this._emitPageEvent(previousPageIndex);\n  }\n\n  /** Move to the first page if not already there. */\n  firstPage(): void {\n    // hasPreviousPage being false implies at the start\n    if (!this.hasPreviousPage()) { return; }\n\n    const previousPageIndex = this.pageIndex;\n    this.pageIndex = 0;\n    this._emitPageEvent(previousPageIndex);\n  }\n\n  /** Move to the last page if not already there. */\n  lastPage(): void {\n    // hasNextPage being false implies at the end\n    if (!this.hasNextPage()) { return; }\n\n    const previousPageIndex = this.pageIndex;\n    this.pageIndex = this.getNumberOfPages();\n    this._emitPageEvent(previousPageIndex);\n  }\n\n  /** Whether there is a previous page. */\n  hasPreviousPage(): boolean {\n    return this.pageIndex >= 1 && this.pageSize != 0;\n  }\n\n  /** Whether there is a next page. */\n  hasNextPage(): boolean {\n    const numberOfPages = this.getNumberOfPages();\n    return this.pageIndex < numberOfPages && this.pageSize != 0;\n  }\n\n  /** Calculate the number of pages */\n  getNumberOfPages(): number {\n    return Math.ceil(this.length / this.pageSize) - 1;\n  }\n\n\n  /**\n   * Changes the page size so that the first item displayed on the page will still be\n   * displayed using the new page size.\n   *\n   * For example, if the page size is 10 and on the second page (items indexed 10-19) then\n   * switching so that the page size is 5 will set the third page as the current page so\n   * that the 10th item will still be displayed.\n   */\n  _changePageSize(pageSize: number) {\n    // Current page needs to be updated to reflect the new page size. Navigate to the page\n    // containing the previous page's first item.\n    const startIndex = this.pageIndex * this.pageSize;\n    const previousPageIndex = this.pageIndex;\n\n    this.pageIndex = Math.floor(startIndex / pageSize) || 0;\n    this.pageSize = pageSize;\n    this._emitPageEvent(previousPageIndex);\n  }\n\n  /**\n   * Updates the list of page size options to display to the user. Includes making sure that\n   * the page size is an option and that the list is sorted.\n   */\n  private _updateDisplayedPageSizeOptions() {\n    if (!this._initialized) { return; }\n\n    // If no page size is provided, use the first page size option or the default page size.\n    if (!this.pageSize) {\n      this._pageSize = this.pageSizeOptions.length != 0 ?\n          this.pageSizeOptions[0] :\n          DEFAULT_PAGE_SIZE;\n    }\n\n    this._displayedPageSizeOptions = this.pageSizeOptions.slice();\n\n    if (this._displayedPageSizeOptions.indexOf(this.pageSize) === -1) {\n      this._displayedPageSizeOptions.push(this.pageSize);\n    }\n\n    // Sort the numbers using a number-specific sort function.\n    this._displayedPageSizeOptions.sort((a, b) => a - b);\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Emits an event notifying that a change of the paginator's properties has been triggered. */\n  private _emitPageEvent(previousPageIndex: number) {\n    this.page.emit({\n      previousPageIndex,\n      pageIndex: this.pageIndex,\n      pageSize: this.pageSize,\n      length: this.length\n    });\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatButtonModule} from '@angular/material/button';\nimport {MatSelectModule} from '@angular/material/select';\nimport {MatTooltipModule} from '@angular/material/tooltip';\nimport {MatPaginator} from './paginator';\nimport {MAT_PAGINATOR_INTL_PROVIDER} from './paginator-intl';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatButtonModule,\n    MatSelectModule,\n    MatTooltipModule,\n  ],\n  exports: [MatPaginator],\n  declarations: [MatPaginator],\n  providers: [MAT_PAGINATOR_INTL_PROVIDER],\n})\nexport class MatPaginatorModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  Component,\n  ChangeDetectionStrategy,\n  ElementRef,\n  Inject,\n  Input,\n  Optional,\n  ViewEncapsulation\n} from '@angular/core';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\nimport {CanColor, mixinColor} from '@angular/material/core';\n\n// TODO(josephperrott): Benchpress tests.\n// TODO(josephperrott): Add ARIA attributes for progress bar \"for\".\n\n// Boilerplate for applying mixins to MatProgressBar.\n/** @docs-private */\nexport class MatProgressBarBase {\n  constructor(public _elementRef: ElementRef) { }\n}\n\nexport const _MatProgressBarMixinBase = mixinColor(MatProgressBarBase, 'primary');\n\n/** Counter used to generate unique IDs for progress bars. */\nlet progressbarId = 0;\n\n/**\n * `<mat-progress-bar>` component.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-progress-bar',\n  exportAs: 'matProgressBar',\n  host: {\n    'role': 'progressbar',\n    'aria-valuemin': '0',\n    'aria-valuemax': '100',\n    '[attr.aria-valuenow]': 'value',\n    '[attr.mode]': 'mode',\n    'class': 'mat-progress-bar',\n    '[class._mat-animation-noopable]': `_animationMode === 'NoopAnimations'`,\n  },\n  inputs: ['color'],\n  templateUrl: 'progress-bar.html',\n  styleUrls: ['progress-bar.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatProgressBar extends _MatProgressBarMixinBase implements CanColor {\n\n\n  constructor(public _elementRef: ElementRef,\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode?: string) {\n    super(_elementRef);\n  }\n\n  /** Value of the progress bar. Defaults to zero. Mirrored to aria-valuenow. */\n  @Input()\n  get value(): number { return this._value; }\n  set value(v: number) { this._value = clamp(v || 0); }\n  private _value: number = 0;\n\n  /** Buffer value of the progress bar. Defaults to zero. */\n  @Input()\n  get bufferValue(): number { return this._bufferValue; }\n  set bufferValue(v: number) { this._bufferValue = clamp(v || 0); }\n  private _bufferValue: number = 0;\n\n  /**\n   * Mode of the progress bar.\n   *\n   * Input must be one of these values: determinate, indeterminate, buffer, query, defaults to\n   * 'determinate'.\n   * Mirrored to mode attribute.\n   */\n  @Input() mode: 'determinate' | 'indeterminate' | 'buffer' | 'query' = 'determinate';\n\n  /** The id of the progress bar. */\n  progressbarId = `mat-progress-bar-${progressbarId++}`;\n\n  /** Gets the current transform value for the progress bar's primary indicator. */\n  _primaryTransform() {\n    const scale = this.value / 100;\n    return {transform: `scaleX(${scale})`};\n  }\n\n  /**\n   * Gets the current transform value for the progress bar's buffer indicator. Only used if the\n   * progress mode is set to buffer, otherwise returns an undefined, causing no transformation.\n   */\n  _bufferTransform() {\n    if (this.mode === 'buffer') {\n      const scale = this.bufferValue / 100;\n      return {transform: `scaleX(${scale})`};\n    }\n  }\n}\n\n/** Clamps a value to be between two numbers, by default 0 and 100. */\nfunction clamp(v: number, min = 0, max = 100) {\n  return Math.max(min, Math.min(max, v));\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatProgressBar} from './progress-bar';\n\n\n@NgModule({\n  imports: [CommonModule, MatCommonModule],\n  exports: [MatProgressBar, MatCommonModule],\n  declarations: [MatProgressBar],\n})\nexport class MatProgressBarModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusKeyManager, FocusOrigin} from '@angular/cdk/a11y';\nimport {Direction} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {ESCAPE, LEFT_ARROW, RIGHT_ARROW, DOWN_ARROW, UP_ARROW} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  Component,\n  ContentChild,\n  ContentChildren,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  OnDestroy,\n  Output,\n  TemplateRef,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {merge, Observable, Subject, Subscription} from 'rxjs';\nimport {startWith, switchMap, take} from 'rxjs/operators';\nimport {matMenuAnimations} from './menu-animations';\nimport {MatMenuContent} from './menu-content';\nimport {throwMatMenuInvalidPositionX, throwMatMenuInvalidPositionY} from './menu-errors';\nimport {MatMenuItem} from './menu-item';\nimport {MAT_MENU_PANEL, MatMenuPanel} from './menu-panel';\nimport {MenuPositionX, MenuPositionY} from './menu-positions';\nimport {AnimationEvent} from '@angular/animations';\n\n\n/** Default `mat-menu` options that can be overridden. */\nexport interface MatMenuDefaultOptions {\n  /** The x-axis position of the menu. */\n  xPosition: MenuPositionX;\n\n  /** The y-axis position of the menu. */\n  yPosition: MenuPositionY;\n\n  /** Whether the menu should overlap the menu trigger. */\n  overlapTrigger: boolean;\n\n  /** Class to be applied to the menu's backdrop. */\n  backdropClass: string;\n\n  /** Whether the menu has a backdrop. */\n  hasBackdrop?: boolean;\n}\n\n/** Injection token to be used to override the default options for `mat-menu`. */\nexport const MAT_MENU_DEFAULT_OPTIONS =\n    new InjectionToken<MatMenuDefaultOptions>('mat-menu-default-options', {\n      providedIn: 'root',\n      factory: MAT_MENU_DEFAULT_OPTIONS_FACTORY\n    });\n\n/** @docs-private */\nexport function MAT_MENU_DEFAULT_OPTIONS_FACTORY(): MatMenuDefaultOptions {\n  return {\n    overlapTrigger: true,\n    xPosition: 'after',\n    yPosition: 'below',\n    backdropClass: 'cdk-overlay-transparent-backdrop',\n  };\n}\n/**\n * Start elevation for the menu panel.\n * @docs-private\n */\nconst MAT_MENU_BASE_ELEVATION = 2;\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-menu',\n  templateUrl: 'menu.html',\n  styleUrls: ['menu.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matMenu',\n  animations: [\n    matMenuAnimations.transformMenu,\n    matMenuAnimations.fadeInItems\n  ],\n  providers: [\n    {provide: MAT_MENU_PANEL, useExisting: MatMenu}\n  ]\n})\nexport class MatMenu implements AfterContentInit, MatMenuPanel<MatMenuItem>, OnDestroy {\n  private _keyManager: FocusKeyManager<MatMenuItem>;\n  private _xPosition: MenuPositionX = this._defaultOptions.xPosition;\n  private _yPosition: MenuPositionY = this._defaultOptions.yPosition;\n  private _previousElevation: string;\n\n  /** Menu items inside the current menu. */\n  private _items: MatMenuItem[] = [];\n\n  /** Emits whenever the amount of menu items changes. */\n  private _itemChanges = new Subject<MatMenuItem[]>();\n\n  /** Subscription to tab events on the menu panel */\n  private _tabSubscription = Subscription.EMPTY;\n\n  /** Config object to be passed into the menu's ngClass */\n  _classList: {[key: string]: boolean} = {};\n\n  /** Current state of the panel animation. */\n  _panelAnimationState: 'void' | 'enter' = 'void';\n\n  /** Emits whenever an animation on the menu completes. */\n  _animationDone = new Subject<AnimationEvent>();\n\n  /** Whether the menu is animating. */\n  _isAnimating: boolean;\n\n  /** Parent menu of the current menu panel. */\n  parentMenu: MatMenuPanel | undefined;\n\n  /** Layout direction of the menu. */\n  direction: Direction;\n\n  /** Class to be added to the backdrop element. */\n  @Input() backdropClass: string = this._defaultOptions.backdropClass;\n\n  /** Position of the menu in the X axis. */\n  @Input()\n  get xPosition(): MenuPositionX { return this._xPosition; }\n  set xPosition(value: MenuPositionX) {\n    if (value !== 'before' && value !== 'after') {\n      throwMatMenuInvalidPositionX();\n    }\n    this._xPosition = value;\n  }\n\n  /** Position of the menu in the Y axis. */\n  @Input()\n  get yPosition(): MenuPositionY { return this._yPosition; }\n  set yPosition(value: MenuPositionY) {\n    if (value !== 'above' && value !== 'below') {\n      throwMatMenuInvalidPositionY();\n    }\n    this._yPosition = value;\n  }\n\n  /** @docs-private */\n  @ViewChild(TemplateRef) templateRef: TemplateRef<any>;\n\n  /**\n   * List of the items inside of a menu.\n   * @deprecated\n   * @deletion-target 7.0.0\n   */\n  @ContentChildren(MatMenuItem) items: QueryList<MatMenuItem>;\n\n  /**\n   * Menu content that will be rendered lazily.\n   * @docs-private\n   */\n  @ContentChild(MatMenuContent) lazyContent: MatMenuContent;\n\n  /** Whether the menu should overlap its trigger. */\n  @Input()\n  get overlapTrigger(): boolean { return this._overlapTrigger; }\n  set overlapTrigger(value: boolean) {\n    this._overlapTrigger = coerceBooleanProperty(value);\n  }\n  private _overlapTrigger: boolean = this._defaultOptions.overlapTrigger;\n\n  /** Whether the menu has a backdrop. */\n  @Input()\n  get hasBackdrop(): boolean | undefined { return this._hasBackdrop; }\n  set hasBackdrop(value: boolean | undefined) {\n    this._hasBackdrop = coerceBooleanProperty(value);\n  }\n  private _hasBackdrop: boolean | undefined = this._defaultOptions.hasBackdrop;\n\n  /**\n   * This method takes classes set on the host mat-menu element and applies them on the\n   * menu template that displays in the overlay container.  Otherwise, it's difficult\n   * to style the containing menu from outside the component.\n   * @param classes list of class names\n   */\n  @Input('class')\n  set panelClass(classes: string) {\n    if (classes && classes.length) {\n      this._classList = classes.split(' ').reduce((obj: any, className: string) => {\n        obj[className] = true;\n        return obj;\n      }, {});\n\n      this._elementRef.nativeElement.className = '';\n    }\n  }\n\n  /**\n   * This method takes classes set on the host mat-menu element and applies them on the\n   * menu template that displays in the overlay container.  Otherwise, it's difficult\n   * to style the containing menu from outside the component.\n   * @deprecated Use `panelClass` instead.\n   * @deletion-target 7.0.0\n   */\n  @Input()\n  get classList(): string { return this.panelClass; }\n  set classList(classes: string) { this.panelClass = classes; }\n\n  /** Event emitted when the menu is closed. */\n  @Output() readonly closed: EventEmitter<void | 'click' | 'keydown' | 'tab'> =\n      new EventEmitter<void | 'click' | 'keydown' | 'tab'>();\n\n  /**\n   * Event emitted when the menu is closed.\n   * @deprecated Switch to `closed` instead\n   * @deletion-target 7.0.0\n   */\n  @Output() close = this.closed;\n\n  constructor(\n    private _elementRef: ElementRef,\n    private _ngZone: NgZone,\n    @Inject(MAT_MENU_DEFAULT_OPTIONS) private _defaultOptions: MatMenuDefaultOptions) { }\n\n  ngAfterContentInit() {\n    this._keyManager = new FocusKeyManager<MatMenuItem>(this._items).withWrap().withTypeAhead();\n    this._tabSubscription = this._keyManager.tabOut.subscribe(() => this.close.emit('tab'));\n  }\n\n  ngOnDestroy() {\n    this._tabSubscription.unsubscribe();\n    this.closed.complete();\n  }\n\n  /** Stream that emits whenever the hovered menu item changes. */\n  _hovered(): Observable<MatMenuItem> {\n    return this._itemChanges.pipe(\n      startWith(this._items),\n      switchMap(items => merge(...items.map(item => item._hovered)))\n    );\n  }\n\n  /** Handle a keyboard event from the menu, delegating to the appropriate action. */\n  _handleKeydown(event: KeyboardEvent) {\n    const keyCode = event.keyCode;\n\n    switch (keyCode) {\n      case ESCAPE:\n        this.closed.emit('keydown');\n        event.stopPropagation();\n      break;\n      case LEFT_ARROW:\n        if (this.parentMenu && this.direction === 'ltr') {\n          this.closed.emit('keydown');\n        }\n      break;\n      case RIGHT_ARROW:\n        if (this.parentMenu && this.direction === 'rtl') {\n          this.closed.emit('keydown');\n        }\n      break;\n      default:\n        if (keyCode === UP_ARROW || keyCode === DOWN_ARROW) {\n          this._keyManager.setFocusOrigin('keyboard');\n        }\n\n        this._keyManager.onKeydown(event);\n    }\n  }\n\n  /**\n   * Focus the first item in the menu.\n   * @param origin Action from which the focus originated. Used to set the correct styling.\n   */\n  focusFirstItem(origin: FocusOrigin = 'program'): void {\n    // When the content is rendered lazily, it takes a bit before the items are inside the DOM.\n    if (this.lazyContent) {\n      this._ngZone.onStable.asObservable()\n        .pipe(take(1))\n        .subscribe(() => this._keyManager.setFocusOrigin(origin).setFirstItemActive());\n    } else {\n      this._keyManager.setFocusOrigin(origin).setFirstItemActive();\n    }\n  }\n\n  /**\n   * Resets the active item in the menu. This is used when the menu is opened, allowing\n   * the user to start from the first option when pressing the down arrow.\n   */\n  resetActiveItem() {\n    this._keyManager.setActiveItem(-1);\n  }\n\n  /**\n   * Sets the menu panel elevation.\n   * @param depth Number of parent menus that come before the menu.\n   */\n  setElevation(depth: number): void {\n    // The elevation starts at the base and increases by one for each level.\n    const newElevation = `mat-elevation-z${MAT_MENU_BASE_ELEVATION + depth}`;\n    const customElevation = Object.keys(this._classList).find(c => c.startsWith('mat-elevation-z'));\n\n    if (!customElevation || customElevation === this._previousElevation) {\n      if (this._previousElevation) {\n        this._classList[this._previousElevation] = false;\n      }\n\n      this._classList[newElevation] = true;\n      this._previousElevation = newElevation;\n    }\n  }\n\n  /**\n   * Registers a menu item with the menu.\n   * @docs-private\n   */\n  addItem(item: MatMenuItem) {\n    // We register the items through this method, rather than picking them up through\n    // `ContentChildren`, because we need the items to be picked up by their closest\n    // `mat-menu` ancestor. If we used `@ContentChildren(MatMenuItem, {descendants: true})`,\n    // all descendant items will bleed into the top-level menu in the case where the consumer\n    // has `mat-menu` instances nested inside each other.\n    if (this._items.indexOf(item) === -1) {\n      this._items.push(item);\n      this._itemChanges.next(this._items);\n    }\n  }\n\n  /**\n   * Removes an item from the menu.\n   * @docs-private\n   */\n  removeItem(item: MatMenuItem) {\n    const index = this._items.indexOf(item);\n\n    if (this._items.indexOf(item) > -1) {\n      this._items.splice(index, 1);\n      this._itemChanges.next(this._items);\n    }\n  }\n\n  /** Starts the enter animation. */\n  _startAnimation() {\n    // @deletion-target 7.0.0 Combine with _resetAnimation.\n    this._panelAnimationState = 'enter';\n  }\n\n  /** Resets the panel animation to its initial state. */\n  _resetAnimation() {\n    // @deletion-target 7.0.0 Combine with _startAnimation.\n    this._panelAnimationState = 'void';\n  }\n\n  /** Callback that is invoked when the panel animation completes. */\n  _onAnimationDone(event: AnimationEvent) {\n    this._animationDone.next(event);\n    this._isAnimating = false;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor, FocusOrigin, isFakeMousedownFromScreenReader} from '@angular/cdk/a11y';\nimport {Direction, Directionality} from '@angular/cdk/bidi';\nimport {LEFT_ARROW, RIGHT_ARROW} from '@angular/cdk/keycodes';\nimport {\n  FlexibleConnectedPositionStrategy,\n  HorizontalConnectionPos,\n  Overlay,\n  OverlayConfig,\n  OverlayRef,\n  ScrollStrategy,\n  VerticalConnectionPos,\n} from '@angular/cdk/overlay';\nimport {TemplatePortal} from '@angular/cdk/portal';\nimport {\n  AfterContentInit,\n  Directive,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  InjectionToken,\n  Input,\n  OnDestroy,\n  Optional,\n  Output,\n  Self,\n  ViewContainerRef,\n} from '@angular/core';\nimport {asapScheduler, merge, of as observableOf, Subscription} from 'rxjs';\nimport {delay, filter, take, takeUntil} from 'rxjs/operators';\nimport {MatMenu} from './menu-directive';\nimport {throwMatMenuMissingError} from './menu-errors';\nimport {MatMenuItem} from './menu-item';\nimport {MatMenuPanel} from './menu-panel';\nimport {MenuPositionX, MenuPositionY} from './menu-positions';\n\n/** Injection token that determines the scroll handling while the menu is open. */\nexport const MAT_MENU_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mat-menu-scroll-strategy');\n\n/** @docs-private */\nexport function MAT_MENU_SCROLL_STRATEGY_FACTORY(overlay: Overlay): () => ScrollStrategy {\n  return () => overlay.scrollStrategies.reposition();\n}\n\n/** @docs-private */\nexport const MAT_MENU_SCROLL_STRATEGY_FACTORY_PROVIDER = {\n  provide: MAT_MENU_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_MENU_SCROLL_STRATEGY_FACTORY,\n};\n\n/** Default top padding of the menu panel. */\nexport const MENU_PANEL_TOP_PADDING = 8;\n\n// TODO(andrewseguin): Remove the kebab versions in favor of camelCased attribute selectors\n\n/**\n * This directive is intended to be used in conjunction with an mat-menu tag.  It is\n * responsible for toggling the display of the provided menu instance.\n */\n@Directive({\n  selector: `[mat-menu-trigger-for], [matMenuTriggerFor]`,\n  host: {\n    'aria-haspopup': 'true',\n    '(mousedown)': '_handleMousedown($event)',\n    '(keydown)': '_handleKeydown($event)',\n    '(click)': '_handleClick($event)',\n  },\n  exportAs: 'matMenuTrigger'\n})\nexport class MatMenuTrigger implements AfterContentInit, OnDestroy {\n  private _portal: TemplatePortal;\n  private _overlayRef: OverlayRef | null = null;\n  private _menuOpen: boolean = false;\n  private _closeSubscription = Subscription.EMPTY;\n  private _hoverSubscription = Subscription.EMPTY;\n\n  // Tracking input type is necessary so it's possible to only auto-focus\n  // the first item of the list when the menu is opened via the keyboard\n  private _openedByMouse: boolean = false;\n\n  /**\n   * @deprecated\n   * @deletion-target 7.0.0\n   */\n  @Input('mat-menu-trigger-for')\n  get _deprecatedMatMenuTriggerFor(): MatMenuPanel {\n    return this.menu;\n  }\n\n  set _deprecatedMatMenuTriggerFor(v: MatMenuPanel) {\n    this.menu = v;\n  }\n\n  /** References the menu instance that the trigger is associated with. */\n  @Input('matMenuTriggerFor') menu: MatMenuPanel;\n\n  /** Data to be passed along to any lazily-rendered content. */\n  @Input('matMenuTriggerData') menuData: any;\n\n  /** Event emitted when the associated menu is opened. */\n  @Output() readonly menuOpened: EventEmitter<void> = new EventEmitter<void>();\n\n  /**\n   * Event emitted when the associated menu is opened.\n   * @deprecated Switch to `menuOpened` instead\n   * @deletion-target 7.0.0\n   */\n  // tslint:disable-next-line:no-output-on-prefix\n  @Output() readonly onMenuOpen: EventEmitter<void> = this.menuOpened;\n\n  /** Event emitted when the associated menu is closed. */\n  @Output() readonly menuClosed: EventEmitter<void> = new EventEmitter<void>();\n\n  /**\n   * Event emitted when the associated menu is closed.\n   * @deprecated Switch to `menuClosed` instead\n   * @deletion-target 7.0.0\n   */\n  // tslint:disable-next-line:no-output-on-prefix\n  @Output() readonly onMenuClose: EventEmitter<void> = this.menuClosed;\n\n  constructor(private _overlay: Overlay,\n              private _element: ElementRef,\n              private _viewContainerRef: ViewContainerRef,\n              @Inject(MAT_MENU_SCROLL_STRATEGY) private _scrollStrategy,\n              @Optional() private _parentMenu: MatMenu,\n              @Optional() @Self() private _menuItemInstance: MatMenuItem,\n              @Optional() private _dir: Directionality,\n              // TODO(crisbeto): make the _focusMonitor required when doing breaking changes.\n              // @deletion-target 7.0.0\n              private _focusMonitor?: FocusMonitor) {\n\n    if (_menuItemInstance) {\n      _menuItemInstance._triggersSubmenu = this.triggersSubmenu();\n    }\n  }\n\n  ngAfterContentInit() {\n    this._checkMenu();\n\n    this.menu.close.subscribe(reason => {\n      this._destroyMenu();\n\n      // If a click closed the menu, we should close the entire chain of nested menus.\n      if ((reason === 'click' || reason === 'tab') && this._parentMenu) {\n        this._parentMenu.closed.emit(reason);\n      }\n    });\n\n    this._handleHover();\n  }\n\n  ngOnDestroy() {\n    if (this._overlayRef) {\n      this._overlayRef.dispose();\n      this._overlayRef = null;\n    }\n\n    this._cleanUpSubscriptions();\n  }\n\n  /** Whether the menu is open. */\n  get menuOpen(): boolean {\n    return this._menuOpen;\n  }\n\n  /** The text direction of the containing app. */\n  get dir(): Direction {\n    return this._dir && this._dir.value === 'rtl' ? 'rtl' : 'ltr';\n  }\n\n  /** Whether the menu triggers a sub-menu or a top-level one. */\n  triggersSubmenu(): boolean {\n    return !!(this._menuItemInstance && this._parentMenu);\n  }\n\n  /** Toggles the menu between the open and closed states. */\n  toggleMenu(): void {\n    return this._menuOpen ? this.closeMenu() : this.openMenu();\n  }\n\n  /** Opens the menu. */\n  openMenu(): void {\n    if (this._menuOpen) {\n      return;\n    }\n\n    const overlayRef = this._createOverlay();\n    overlayRef.attach(this._portal);\n\n    if (this.menu.lazyContent) {\n      this.menu.lazyContent.attach(this.menuData);\n    }\n\n    this._closeSubscription = this._menuClosingActions().subscribe(() => this.closeMenu());\n    this._initMenu();\n\n    if (this.menu instanceof MatMenu) {\n      this.menu._startAnimation();\n    }\n  }\n\n  /** Closes the menu. */\n  closeMenu(): void {\n    this.menu.close.emit();\n  }\n\n  /**\n   * Focuses the menu trigger.\n   * @param origin Source of the menu trigger's focus.\n   */\n  focus(origin: FocusOrigin = 'program') {\n    if (this._focusMonitor) {\n      this._focusMonitor.focusVia(this._element.nativeElement, origin);\n    } else {\n      this._element.nativeElement.focus();\n    }\n  }\n\n  /** Closes the menu and does the necessary cleanup. */\n  private _destroyMenu() {\n    if (!this._overlayRef || !this.menuOpen) {\n      return;\n    }\n\n    const menu = this.menu;\n\n    this._closeSubscription.unsubscribe();\n    this._overlayRef.detach();\n\n    if (menu instanceof MatMenu) {\n      menu._resetAnimation();\n\n      if (menu.lazyContent) {\n        // Wait for the exit animation to finish before detaching the content.\n        menu._animationDone\n          .pipe(filter(event => event.toState === 'void'), take(1))\n          .subscribe(() => {\n            menu.lazyContent!.detach();\n            this._resetMenu();\n          });\n      } else {\n        this._resetMenu();\n      }\n    } else {\n      this._resetMenu();\n\n      if (menu.lazyContent) {\n        menu.lazyContent.detach();\n      }\n    }\n  }\n\n  /**\n   * This method sets the menu state to open and focuses the first item if\n   * the menu was opened via the keyboard.\n   */\n  private _initMenu(): void {\n    this.menu.parentMenu = this.triggersSubmenu() ? this._parentMenu : undefined;\n    this.menu.direction = this.dir;\n    this._setMenuElevation();\n    this._setIsMenuOpen(true);\n    this.menu.focusFirstItem(this._openedByMouse ? 'mouse' : 'program');\n  }\n\n  /** Updates the menu elevation based on the amount of parent menus that it has. */\n  private _setMenuElevation(): void {\n    if (this.menu.setElevation) {\n      let depth = 0;\n      let parentMenu = this.menu.parentMenu;\n\n      while (parentMenu) {\n        depth++;\n        parentMenu = parentMenu.parentMenu;\n      }\n\n      this.menu.setElevation(depth);\n    }\n  }\n\n  /**\n   * This method resets the menu when it's closed, most importantly restoring\n   * focus to the menu trigger if the menu was opened via the keyboard.\n   */\n  private _resetMenu(): void {\n    this._setIsMenuOpen(false);\n\n    // We should reset focus if the user is navigating using a keyboard or\n    // if we have a top-level trigger which might cause focus to be lost\n    // when clicking on the backdrop.\n    if (!this._openedByMouse) {\n      // Note that the focus style will show up both for `program` and\n      // `keyboard` so we don't have to specify which one it is.\n      this.focus();\n    } else if (!this.triggersSubmenu()) {\n      this.focus('mouse');\n    }\n\n    this._openedByMouse = false;\n  }\n\n  // set state rather than toggle to support triggers sharing a menu\n  private _setIsMenuOpen(isOpen: boolean): void {\n    this._menuOpen = isOpen;\n    this._menuOpen ? this.menuOpened.emit() : this.menuClosed.emit();\n\n    if (this.triggersSubmenu()) {\n      this._menuItemInstance._highlighted = isOpen;\n    }\n  }\n\n  /**\n   * This method checks that a valid instance of MatMenu has been passed into\n   * matMenuTriggerFor. If not, an exception is thrown.\n   */\n  private _checkMenu() {\n    if (!this.menu) {\n      throwMatMenuMissingError();\n    }\n  }\n\n  /**\n   * This method creates the overlay from the provided menu's template and saves its\n   * OverlayRef so that it can be attached to the DOM when openMenu is called.\n   */\n  private _createOverlay(): OverlayRef {\n    if (!this._overlayRef) {\n      this._portal = new TemplatePortal(this.menu.templateRef, this._viewContainerRef);\n      const config = this._getOverlayConfig();\n      this._subscribeToPositions(config.positionStrategy as FlexibleConnectedPositionStrategy);\n      this._overlayRef = this._overlay.create(config);\n    }\n\n    return this._overlayRef;\n  }\n\n  /**\n   * This method builds the configuration object needed to create the overlay, the OverlayState.\n   * @returns OverlayConfig\n   */\n  private _getOverlayConfig(): OverlayConfig {\n    return new OverlayConfig({\n      positionStrategy: this._getPosition(),\n      hasBackdrop: this.menu.hasBackdrop == null ? !this.triggersSubmenu() : this.menu.hasBackdrop,\n      backdropClass: this.menu.backdropClass || 'cdk-overlay-transparent-backdrop',\n      scrollStrategy: this._scrollStrategy(),\n      direction: this._dir\n    });\n  }\n\n  /**\n   * Listens to changes in the position of the overlay and sets the correct classes\n   * on the menu based on the new position. This ensures the animation origin is always\n   * correct, even if a fallback position is used for the overlay.\n   */\n  private _subscribeToPositions(position: FlexibleConnectedPositionStrategy): void {\n    if (this.menu.setPositionClasses) {\n      position.positionChanges.subscribe(change => {\n        const posX: MenuPositionX = change.connectionPair.overlayX === 'start' ? 'after' : 'before';\n        const posY: MenuPositionY = change.connectionPair.overlayY === 'top' ? 'below' : 'above';\n\n        this.menu.setPositionClasses!(posX, posY);\n      });\n    }\n  }\n\n  /**\n   * This method builds the position strategy for the overlay, so the menu is properly connected\n   * to the trigger.\n   * @returns ConnectedPositionStrategy\n   */\n  private _getPosition(): FlexibleConnectedPositionStrategy {\n    let [originX, originFallbackX]: HorizontalConnectionPos[] =\n        this.menu.xPosition === 'before' ? ['end', 'start'] : ['start', 'end'];\n\n    let [overlayY, overlayFallbackY]: VerticalConnectionPos[] =\n        this.menu.yPosition === 'above' ? ['bottom', 'top'] : ['top', 'bottom'];\n\n    let [originY, originFallbackY] = [overlayY, overlayFallbackY];\n    let [overlayX, overlayFallbackX] = [originX, originFallbackX];\n    let offsetY = 0;\n\n    if (this.triggersSubmenu()) {\n      // When the menu is a sub-menu, it should always align itself\n      // to the edges of the trigger, instead of overlapping it.\n      overlayFallbackX = originX = this.menu.xPosition === 'before' ? 'start' : 'end';\n      originFallbackX = overlayX = originX === 'end' ? 'start' : 'end';\n      offsetY = overlayY === 'bottom' ? MENU_PANEL_TOP_PADDING : -MENU_PANEL_TOP_PADDING;\n    } else if (!this.menu.overlapTrigger) {\n      originY = overlayY === 'top' ? 'bottom' : 'top';\n      originFallbackY = overlayFallbackY === 'top' ? 'bottom' : 'top';\n    }\n\n    return this._overlay.position()\n        .flexibleConnectedTo(this._element)\n        .withTransformOriginOn('.mat-menu-panel')\n        .withPositions([\n          {originX, originY, overlayX, overlayY, offsetY},\n          {originX: originFallbackX, originY, overlayX: overlayFallbackX, overlayY, offsetY},\n          {\n            originX,\n            originY: originFallbackY,\n            overlayX,\n            overlayY: overlayFallbackY,\n            offsetY: -offsetY\n          },\n          {\n            originX: originFallbackX,\n            originY: originFallbackY,\n            overlayX: overlayFallbackX,\n            overlayY: overlayFallbackY,\n            offsetY: -offsetY\n          }\n        ]);\n  }\n\n  /** Cleans up the active subscriptions. */\n  private _cleanUpSubscriptions(): void {\n    this._closeSubscription.unsubscribe();\n    this._hoverSubscription.unsubscribe();\n  }\n\n  /** Returns a stream that emits whenever an action that should close the menu occurs. */\n  private _menuClosingActions() {\n    const backdrop = this._overlayRef!.backdropClick();\n    const detachments = this._overlayRef!.detachments();\n    const parentClose = this._parentMenu ? this._parentMenu.close : observableOf();\n    const hover = this._parentMenu ? this._parentMenu._hovered().pipe(\n      filter(active => active !== this._menuItemInstance),\n      filter(() => this._menuOpen)\n    ) : observableOf();\n\n    return merge(backdrop, parentClose, hover, detachments);\n  }\n\n  /** Handles mouse presses on the trigger. */\n  _handleMousedown(event: MouseEvent): void {\n    if (!isFakeMousedownFromScreenReader(event)) {\n      this._openedByMouse = true;\n\n      // Since clicking on the trigger won't close the menu if it opens a sub-menu,\n      // we should prevent focus from moving onto it via click to avoid the\n      // highlight from lingering on the menu item.\n      if (this.triggersSubmenu()) {\n        event.preventDefault();\n      }\n    }\n  }\n\n  /** Handles key presses on the trigger. */\n  _handleKeydown(event: KeyboardEvent): void {\n    const keyCode = event.keyCode;\n\n    if (this.triggersSubmenu() && (\n            (keyCode === RIGHT_ARROW && this.dir === 'ltr') ||\n            (keyCode === LEFT_ARROW && this.dir === 'rtl'))) {\n      this.openMenu();\n    }\n  }\n\n  /** Handles click events on the trigger. */\n  _handleClick(event: MouseEvent): void {\n    if (this.triggersSubmenu()) {\n      // Stop event propagation to avoid closing the parent menu.\n      event.stopPropagation();\n      this.openMenu();\n    } else {\n      this.toggleMenu();\n    }\n  }\n\n  /** Handles the cases where the user hovers over the trigger. */\n  private _handleHover() {\n    // Subscribe to changes in the hovered item in order to toggle the panel.\n    if (!this.triggersSubmenu()) {\n      return;\n    }\n\n    this._hoverSubscription = this._parentMenu._hovered()\n      // Since we might have multiple competing triggers for the same menu (e.g. a sub-menu\n      // with different data and triggers), we have to delay it by a tick to ensure that\n      // it won't be closed immediately after it is opened.\n      .pipe(\n        filter(active => active === this._menuItemInstance && !active.disabled),\n        delay(0, asapScheduler)\n      )\n      .subscribe(() => {\n        this._openedByMouse = true;\n\n        // If the same menu is used between multiple triggers, it might still be animating\n        // while the new trigger tries to re-open it. Wait for the animation to finish\n        // before doing so. Also interrupt if the user moves to another item.\n        if (this.menu instanceof MatMenu && this.menu._isAnimating) {\n          this.menu._animationDone\n            .pipe(take(1), takeUntil(this._parentMenu._hovered()))\n            .subscribe(() => this.openMenu());\n        } else {\n          this.openMenu();\n        }\n      });\n  }\n\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {MatMenuContent} from './menu-content';\nimport {MatMenu} from './menu-directive';\nimport {MatMenuItem} from './menu-item';\nimport {\n  MatMenuTrigger,\n  MAT_MENU_SCROLL_STRATEGY_FACTORY_PROVIDER,\n} from './menu-trigger';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatCommonModule,\n    MatRippleModule,\n    OverlayModule,\n  ],\n  exports: [MatMenu, MatMenuItem, MatMenuTrigger, MatMenuContent, MatCommonModule],\n  declarations: [MatMenu, MatMenuItem, MatMenuTrigger, MatMenuContent],\n  providers: [MAT_MENU_SCROLL_STRATEGY_FACTORY_PROVIDER]\n})\nexport class MatMenuModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  animate,\n  AnimationTriggerMetadata,\n  state,\n  style,\n  transition,\n  trigger,\n  query,\n  animateChild,\n  group,\n} from '@angular/animations';\n\n/**\n * The following are all the animations for the mat-select component, with each\n * const containing the metadata for one animation.\n *\n * The values below match the implementation of the AngularJS Material mat-select animation.\n */\nexport const matSelectAnimations: {\n  readonly transformPanel: AnimationTriggerMetadata;\n  readonly fadeInContent: AnimationTriggerMetadata;\n} = {\n  /**\n   * This animation transforms the select's overlay panel on and off the page.\n   *\n   * When the panel is attached to the DOM, it expands its width by the amount of padding, scales it\n   * up to 100% on the Y axis, fades in its border, and translates slightly up and to the\n   * side to ensure the option text correctly overlaps the trigger text.\n   *\n   * When the panel is removed from the DOM, it simply fades out linearly.\n   */\n  transformPanel: trigger('transformPanel', [\n    state('void', style({\n      transform: 'scaleY(0)',\n      minWidth: '100%',\n      opacity: 0\n    })),\n    state('showing', style({\n      opacity: 1,\n      minWidth: 'calc(100% + 32px)', // 32px = 2 * 16px padding\n      transform: 'scaleY(1)'\n    })),\n    state('showing-multiple', style({\n      opacity: 1,\n      minWidth: 'calc(100% + 64px)', // 64px = 48px padding on the left + 16px padding on the right\n      transform: 'scaleY(1)'\n    })),\n    transition('void => *', group([\n      query('@fadeInContent', animateChild()),\n      animate('150ms cubic-bezier(0.25, 0.8, 0.25, 1)')\n    ])),\n    transition('* => void', [\n      animate('250ms 100ms linear', style({opacity: 0}))\n    ])\n  ]),\n\n  /**\n   * This animation fades in the background color and text content of the\n   * select's options. It is time delayed to occur 100ms after the overlay\n   * panel has transformed in.\n   */\n  fadeInContent: trigger('fadeInContent', [\n    state('showing', style({opacity: 1})),\n    transition('void => showing', [\n      style({opacity: 0}),\n      animate('150ms 100ms cubic-bezier(0.55, 0, 0.55, 0.2)')\n    ])\n  ])\n};\n\n\n/**\n * @deprecated\n * @deletion-target 7.0.0\n */\nexport const transformPanel = matSelectAnimations.transformPanel;\n\n/**\n * @deprecated\n * @deletion-target 7.0.0\n */\nexport const fadeInContent = matSelectAnimations.fadeInContent;\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusableOption, FocusKeyManager} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {SelectionModel} from '@angular/cdk/collections';\nimport {SPACE, ENTER, HOME, END, UP_ARROW, DOWN_ARROW} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  OnDestroy,\n  OnInit,\n  Output,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {\n  CanDisable,\n  CanDisableRipple,\n  MatLine,\n  MatLineSetter,\n  mixinDisabled,\n  mixinDisableRipple,\n} from '@angular/material/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {Subscription} from 'rxjs';\n\n\n/** @docs-private */\nexport class MatSelectionListBase {}\nexport const _MatSelectionListMixinBase = mixinDisableRipple(mixinDisabled(MatSelectionListBase));\n\n/** @docs-private */\nexport class MatListOptionBase {}\nexport const _MatListOptionMixinBase = mixinDisableRipple(MatListOptionBase);\n\n/** @docs-private */\nexport const MAT_SELECTION_LIST_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatSelectionList),\n  multi: true\n};\n\n/** Change event that is being fired whenever the selected state of an option changes. */\nexport class MatSelectionListChange {\n  constructor(\n    /** Reference to the selection list that emitted the event. */\n    public source: MatSelectionList,\n    /** Reference to the option that has been changed. */\n    public option: MatListOption) {}\n}\n\n/**\n * Component for list-options of selection-list. Each list-option can automatically\n * generate a checkbox and can put current item into the selectionModel of selection-list\n * if the current item is selected.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-list-option',\n  exportAs: 'matListOption',\n  inputs: ['disableRipple'],\n  host: {\n    'role': 'option',\n    'class': 'mat-list-item mat-list-option',\n    '(focus)': '_handleFocus()',\n    '(blur)': '_handleBlur()',\n    '(click)': '_handleClick()',\n    'tabindex': '-1',\n    '[class.mat-list-item-disabled]': 'disabled',\n    '[class.mat-list-item-focus]': '_hasFocus',\n    '[attr.aria-selected]': 'selected.toString()',\n    '[attr.aria-disabled]': 'disabled.toString()',\n  },\n  templateUrl: 'list-option.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatListOption extends _MatListOptionMixinBase\n    implements AfterContentInit, OnDestroy, OnInit, FocusableOption, CanDisableRipple {\n\n  private _selected = false;\n  private _disabled = false;\n\n  /** Whether the option has focus. */\n  _hasFocus: boolean = false;\n\n  @ContentChildren(MatLine) _lines: QueryList<MatLine>;\n\n  /** DOM element containing the item's text. */\n  @ViewChild('text') _text: ElementRef;\n\n  /** Whether the label should appear before or after the checkbox. Defaults to 'after' */\n  @Input() checkboxPosition: 'before' | 'after' = 'after';\n\n  /** Value of the option */\n  @Input() value: any;\n\n  /** Whether the option is disabled. */\n  @Input()\n  get disabled() { return this._disabled || (this.selectionList && this.selectionList.disabled); }\n  set disabled(value: any) {\n    const newValue = coerceBooleanProperty(value);\n\n    if (newValue !== this._disabled) {\n      this._disabled = newValue;\n      this._changeDetector.markForCheck();\n    }\n  }\n\n  /** Whether the option is selected. */\n  @Input()\n  get selected(): boolean { return this.selectionList.selectedOptions.isSelected(this); }\n  set selected(value: boolean) {\n    const isSelected = coerceBooleanProperty(value);\n\n    if (isSelected !== this._selected) {\n      this._setSelected(isSelected);\n      this.selectionList._reportValueChange();\n    }\n  }\n\n  constructor(private _element: ElementRef,\n              private _changeDetector: ChangeDetectorRef,\n              /** @docs-private */\n              @Inject(forwardRef(() => MatSelectionList)) public selectionList: MatSelectionList) {\n    super();\n  }\n\n  ngOnInit() {\n    // List options that are selected at initialization can't be reported properly to the form\n    // control. This is because it takes some time until the selection-list knows about all\n    // available options. Also it can happen that the ControlValueAccessor has an initial value\n    // that should be used instead. Deferring the value change report to the next tick ensures\n    // that the form control value is not being overwritten.\n    const wasSelected = this._selected;\n\n    Promise.resolve().then(() => {\n      if (this._selected || wasSelected) {\n        this.selected = true;\n        this._changeDetector.markForCheck();\n      }\n    });\n  }\n\n  ngAfterContentInit() {\n    // TODO: consider turning the setter into a function, it doesn't do anything as a class.\n    // tslint:disable-next-line:no-unused-expression\n    new MatLineSetter(this._lines, this._element);\n  }\n\n  ngOnDestroy(): void {\n    if (this.selected) {\n      // We have to delay this until the next tick in order\n      // to avoid changed after checked errors.\n      Promise.resolve().then(() => this.selected = false);\n    }\n\n    this.selectionList._removeOptionFromList(this);\n  }\n\n  /** Toggles the selection state of the option. */\n  toggle(): void {\n    this.selected = !this.selected;\n  }\n\n  /** Allows for programmatic focusing of the option. */\n  focus(): void {\n    this._element.nativeElement.focus();\n  }\n\n  /**\n   * Returns the list item's text label. Implemented as a part of the FocusKeyManager.\n   * @docs-private\n   */\n  getLabel() {\n    return this._text ? this._text.nativeElement.textContent : '';\n  }\n\n  /** Whether this list item should show a ripple effect when clicked. */\n  _isRippleDisabled() {\n    return this.disabled || this.disableRipple || this.selectionList.disableRipple;\n  }\n\n  _handleClick() {\n    if (!this.disabled) {\n      this.toggle();\n\n      // Emit a change event if the selected state of the option changed through user interaction.\n      this.selectionList._emitChangeEvent(this);\n    }\n  }\n\n  _handleFocus() {\n    this._hasFocus = true;\n    this.selectionList._setFocusedOption(this);\n  }\n\n  _handleBlur() {\n    this._hasFocus = false;\n    this.selectionList._onTouched();\n  }\n\n  /** Retrieves the DOM element of the component host. */\n  _getHostElement(): HTMLElement {\n    return this._element.nativeElement;\n  }\n\n  /** Sets the selected state of the option. Returns whether the value has changed. */\n  _setSelected(selected: boolean): boolean {\n    if (selected === this._selected) {\n      return false;\n    }\n\n    this._selected = selected;\n\n    if (selected) {\n      this.selectionList.selectedOptions.select(this);\n    } else {\n      this.selectionList.selectedOptions.deselect(this);\n    }\n\n    this._changeDetector.markForCheck();\n    return true;\n  }\n}\n\n\n/**\n * Material Design list component where each item is a selectable option. Behaves as a listbox.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-selection-list',\n  exportAs: 'matSelectionList',\n  inputs: ['disabled', 'disableRipple', 'tabIndex'],\n  host: {\n    'role': 'listbox',\n    '[tabIndex]': 'tabIndex',\n    'class': 'mat-selection-list',\n    '(focus)': 'focus()',\n    '(blur)': '_onTouched()',\n    '(keydown)': '_keydown($event)',\n    '[attr.aria-disabled]': 'disabled.toString()',\n  },\n  template: '<ng-content></ng-content>',\n  styleUrls: ['list.css'],\n  encapsulation: ViewEncapsulation.None,\n  providers: [MAT_SELECTION_LIST_VALUE_ACCESSOR],\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class MatSelectionList extends _MatSelectionListMixinBase implements FocusableOption,\n    CanDisable, CanDisableRipple, AfterContentInit, ControlValueAccessor, OnDestroy {\n\n  /** The FocusKeyManager which handles focus. */\n  _keyManager: FocusKeyManager<MatListOption>;\n\n  /** The option components contained within this selection-list. */\n  @ContentChildren(MatListOption) options: QueryList<MatListOption>;\n\n  /** Emits a change event whenever the selected state of an option changes. */\n  @Output() readonly selectionChange: EventEmitter<MatSelectionListChange> =\n      new EventEmitter<MatSelectionListChange>();\n\n  /** Tabindex of the selection list. */\n  @Input() tabIndex: number = 0;\n\n  /**\n   * Function used for comparing an option against the selected value when determining which\n   * options should appear as selected. The first argument is the value of an options. The second\n   * one is a value from the selected value. A boolean must be returned.\n   */\n  @Input() compareWith: (o1: any, o2: any) => boolean;\n\n  /** The currently selected options. */\n  selectedOptions: SelectionModel<MatListOption> = new SelectionModel<MatListOption>(true);\n\n  /** View to model callback that should be called whenever the selected options change. */\n  private _onChange: (value: any) => void = (_: any) => {};\n\n  /** Used for storing the values that were assigned before the options were initialized. */\n  private _tempValues: string[]|null;\n\n  private _modelChanges = Subscription.EMPTY;\n\n  /** View to model callback that should be called if the list or its options lost focus. */\n  _onTouched: () => void = () => {};\n\n  constructor(private _element: ElementRef, @Attribute('tabindex') tabIndex: string) {\n    super();\n    this.tabIndex = parseInt(tabIndex) || 0;\n  }\n\n  ngAfterContentInit(): void {\n    this._keyManager = new FocusKeyManager<MatListOption>(this.options)\n      .withWrap()\n      .withTypeAhead()\n      // Allow disabled items to be focusable. For accessibility reasons, there must be a way for\n      // screenreader users, that allows reading the different options of the list.\n      .skipPredicate(() => false);\n\n    if (this._tempValues) {\n      this._setOptionsFromValues(this._tempValues);\n      this._tempValues = null;\n    }\n\n    // Sync external changes to the model back to the options.\n    this._modelChanges = this.selectedOptions.onChange!.subscribe(event => {\n      if (event.added) {\n        for (let item of event.added) {\n          item.selected = true;\n        }\n      }\n\n      if (event.removed) {\n        for (let item of event.removed) {\n          item.selected = false;\n        }\n      }\n    });\n  }\n\n  ngOnDestroy() {\n    this._modelChanges.unsubscribe();\n  }\n\n  /** Focuses the last active list option. */\n  focus() {\n    this._element.nativeElement.focus();\n  }\n\n  /** Selects all of the options. */\n  selectAll() {\n    this._setAllOptionsSelected(true);\n  }\n\n  /** Deselects all of the options. */\n  deselectAll() {\n    this._setAllOptionsSelected(false);\n  }\n\n  /** Sets the focused option of the selection-list. */\n  _setFocusedOption(option: MatListOption) {\n    this._keyManager.updateActiveItemIndex(this._getOptionIndex(option));\n  }\n\n  /** Removes an option from the selection list and updates the active item. */\n  _removeOptionFromList(option: MatListOption) {\n    if (option._hasFocus) {\n      const optionIndex = this._getOptionIndex(option);\n\n      // Check whether the option is the last item\n      if (optionIndex > 0) {\n        this._keyManager.setPreviousItemActive();\n      } else if (optionIndex === 0 && this.options.length > 1) {\n        this._keyManager.setNextItemActive();\n      }\n    }\n  }\n\n  /** Passes relevant key presses to our key manager. */\n  _keydown(event: KeyboardEvent) {\n    const keyCode = event.keyCode;\n    const manager = this._keyManager;\n    const previousFocusIndex = manager.activeItemIndex;\n\n    switch (keyCode) {\n      case SPACE:\n      case ENTER:\n        if (!this.disabled) {\n          this._toggleSelectOnFocusedOption();\n\n          // Always prevent space from scrolling the page since the list has focus\n          event.preventDefault();\n        }\n        break;\n      case HOME:\n      case END:\n        keyCode === HOME ? manager.setFirstItemActive() : manager.setLastItemActive();\n        event.preventDefault();\n        break;\n      default:\n        manager.onKeydown(event);\n    }\n\n    if ((keyCode === UP_ARROW || keyCode === DOWN_ARROW) && event.shiftKey &&\n        manager.activeItemIndex !== previousFocusIndex) {\n      this._toggleSelectOnFocusedOption();\n    }\n  }\n\n  /** Reports a value change to the ControlValueAccessor */\n  _reportValueChange() {\n    if (this.options) {\n      this._onChange(this._getSelectedOptionValues());\n    }\n  }\n\n  /** Emits a change event if the selected state of an option changed. */\n  _emitChangeEvent(option: MatListOption) {\n    this.selectionChange.emit(new MatSelectionListChange(this, option));\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  writeValue(values: string[]): void {\n    if (this.options) {\n      this._setOptionsFromValues(values || []);\n    } else {\n      this._tempValues = values;\n    }\n  }\n\n  /** Implemented as a part of ControlValueAccessor. */\n  setDisabledState(isDisabled: boolean): void {\n    if (this.options) {\n      this.options.forEach(option => option.disabled = isDisabled);\n    }\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  registerOnChange(fn: (value: any) => void): void {\n    this._onChange = fn;\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  registerOnTouched(fn: () => void): void {\n    this._onTouched = fn;\n  }\n\n  /** Sets the selected options based on the specified values. */\n  private _setOptionsFromValues(values: string[]) {\n    this.options.forEach(option => option._setSelected(false));\n\n    values\n      .map(value => {\n        return this.options.find(option =>\n            this.compareWith ? this.compareWith(option.value, value) : option.value === value);\n      })\n      .filter(Boolean)\n      .forEach(option => option!._setSelected(true));\n  }\n\n  /** Returns the values of the selected options. */\n  private _getSelectedOptionValues(): string[] {\n    return this.options.filter(option => option.selected).map(option => option.value);\n  }\n\n  /** Toggles the selected state of the currently focused option. */\n  private _toggleSelectOnFocusedOption(): void {\n    let focusedIndex = this._keyManager.activeItemIndex;\n\n    if (focusedIndex != null && this._isValidIndex(focusedIndex)) {\n      let focusedOption: MatListOption = this.options.toArray()[focusedIndex];\n\n      if (focusedOption) {\n        focusedOption.toggle();\n\n        // Emit a change event because the focused option changed its state through user\n        // interaction.\n        this._emitChangeEvent(focusedOption);\n      }\n    }\n  }\n\n  /**\n   * Sets the selected state on all of the options\n   * and emits an event if anything changed.\n   */\n  private _setAllOptionsSelected(isSelected: boolean) {\n    // Keep track of whether anything changed, because we only want to\n    // emit the changed event when something actually changed.\n    let hasChanged = false;\n\n    this.options.forEach(option => {\n      if (option._setSelected(isSelected)) {\n        hasChanged = true;\n      }\n    });\n\n    if (hasChanged) {\n      this._reportValueChange();\n    }\n  }\n\n  /**\n   * Utility to ensure all indexes are valid.\n   * @param index The index to be checked.\n   * @returns True if the index is valid for our list of options.\n   */\n  private _isValidIndex(index: number): boolean {\n    return index >= 0 && index < this.options.length;\n  }\n\n  /** Returns the index of the specified list option. */\n  private _getOptionIndex(option: MatListOption): number {\n    return this.options.toArray().indexOf(option);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {\n  MatCommonModule,\n  MatLineModule,\n  MatPseudoCheckboxModule,\n  MatRippleModule,\n} from '@angular/material/core';\nimport {\n  MatList,\n  MatNavList,\n  MatListAvatarCssMatStyler,\n  MatListIconCssMatStyler,\n  MatListItem,\n  MatListSubheaderCssMatStyler,\n} from './list';\nimport {MatListOption, MatSelectionList} from './selection-list';\nimport {MatDividerModule} from '@angular/material/divider';\n\n\n@NgModule({\n  imports: [MatLineModule, MatRippleModule, MatCommonModule, MatPseudoCheckboxModule, CommonModule],\n  exports: [\n    MatList,\n    MatNavList,\n    MatListItem,\n    MatListAvatarCssMatStyler,\n    MatLineModule,\n    MatCommonModule,\n    MatListIconCssMatStyler,\n    MatListSubheaderCssMatStyler,\n    MatPseudoCheckboxModule,\n    MatSelectionList,\n    MatListOption,\n    MatDividerModule\n  ],\n  declarations: [\n    MatList,\n    MatNavList,\n    MatListItem,\n    MatListAvatarCssMatStyler,\n    MatListIconCssMatStyler,\n    MatListSubheaderCssMatStyler,\n    MatSelectionList,\n    MatListOption\n  ],\n})\nexport class MatListModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Directive,\n  TemplateRef,\n  ComponentFactoryResolver,\n  ApplicationRef,\n  Injector,\n  ViewContainerRef,\n  Inject,\n  OnDestroy,\n} from '@angular/core';\nimport {TemplatePortal, DomPortalOutlet} from '@angular/cdk/portal';\nimport {DOCUMENT} from '@angular/common';\n\n/**\n * Menu content that will be rendered lazily once the menu is opened.\n */\n@Directive({\n  selector: 'ng-template[matMenuContent]'\n})\nexport class MatMenuContent implements OnDestroy {\n  private _portal: TemplatePortal<any>;\n  private _outlet: DomPortalOutlet;\n\n  constructor(\n    private _template: TemplateRef<any>,\n    private _componentFactoryResolver: ComponentFactoryResolver,\n    private _appRef: ApplicationRef,\n    private _injector: Injector,\n    private _viewContainerRef: ViewContainerRef,\n    @Inject(DOCUMENT) private _document: any) {}\n\n  /**\n   * Attaches the content with a particular context.\n   * @docs-private\n   */\n  attach(context: any = {}) {\n    if (!this._portal) {\n      this._portal = new TemplatePortal(this._template, this._viewContainerRef);\n    }\n\n    this.detach();\n\n    if (!this._outlet) {\n      this._outlet = new DomPortalOutlet(this._document.createElement('div'),\n          this._componentFactoryResolver, this._appRef, this._injector);\n    }\n\n    const element: HTMLElement = this._template.elementRef.nativeElement;\n\n    // Because we support opening the same menu from different triggers (which in turn have their\n    // own `OverlayRef` panel), we have to re-insert the host element every time, otherwise we\n    // risk it staying attached to a pane that's no longer in the DOM.\n    element.parentNode!.insertBefore(this._outlet.outletElement, element);\n    this._portal.attach(this._outlet, context);\n  }\n\n  /**\n   * Detaches the content.\n   * @docs-private\n   */\n  detach() {\n    if (this._portal.isAttached) {\n      this._portal.detach();\n    }\n  }\n\n  ngOnDestroy() {\n    if (this._outlet) {\n      this._outlet.dispose();\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport{\n  trigger,\n  state,\n  style,\n  animate,\n  transition,\n  query,\n  group,\n  sequence,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/**\n * Animations used by the mat-menu component.\n * Animation duration and timing values are based on:\n * https://material.io/guidelines/components/menus.html#menus-usage\n */\nexport const matMenuAnimations: {\n  readonly transformMenu: AnimationTriggerMetadata;\n  readonly fadeInItems: AnimationTriggerMetadata;\n} = {\n  /**\n   * This animation controls the menu panel's entry and exit from the page.\n   *\n   * When the menu panel is added to the DOM, it scales in and fades in its border.\n   *\n   * When the menu panel is removed from the DOM, it simply fades out after a brief\n   * delay to display the ripple.\n   */\n  transformMenu: trigger('transformMenu', [\n    state('void', style({\n      opacity: 0,\n      // This starts off from 0.01, instead of 0, because there's an issue in the Angular animations\n      // as of 4.2, which causes the animation to be skipped if it starts from 0.\n      transform: 'scale(0.01, 0.01)'\n    })),\n    transition('void => enter', sequence([\n      query('.mat-menu-content', style({opacity: 0})),\n      animate('100ms linear', style({opacity: 1, transform: 'scale(1, 0.5)'})),\n      group([\n        query('.mat-menu-content', animate('400ms cubic-bezier(0.55, 0, 0.55, 0.2)',\n          style({opacity: 1})\n        )),\n        animate('300ms cubic-bezier(0.25, 0.8, 0.25, 1)', style({transform: 'scale(1, 1)'})),\n      ])\n    ])),\n    transition('* => void', animate('150ms 50ms linear', style({opacity: 0})))\n  ]),\n\n\n  /**\n   * This animation fades in the background color and content of the menu panel\n   * after its containing element is scaled in.\n   */\n  fadeInItems: trigger('fadeInItems', [\n    // TODO(crisbeto): this is inside the `transformMenu`\n    // now. Remove next time we do breaking changes.\n    state('showing', style({opacity: 1})),\n    transition('void => *', [\n      style({opacity: 0}),\n      animate('400ms 100ms cubic-bezier(0.55, 0, 0.55, 0.2)')\n    ])\n  ])\n};\n\n/**\n * @deprecated\n * @deletion-target 7.0.0\n */\nexport const fadeInItems = matMenuAnimations.fadeInItems;\n\n/**\n * @deprecated\n * @deletion-target 7.0.0\n */\nexport const transformMenu = matMenuAnimations.transformMenu;\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {EventEmitter, TemplateRef, InjectionToken} from '@angular/core';\nimport {MenuPositionX, MenuPositionY} from './menu-positions';\nimport {Direction} from '@angular/cdk/bidi';\nimport {FocusOrigin} from '@angular/cdk/a11y';\nimport {MatMenuContent} from './menu-content';\n\n/**\n * Injection token used to provide the parent menu to menu-specific components.\n * @docs-private\n */\nexport const MAT_MENU_PANEL = new InjectionToken<MatMenuPanel>('MAT_MENU_PANEL');\n\n/**\n * Interface for a custom menu panel that can be used with `matMenuTriggerFor`.\n * @docs-private\n */\nexport interface MatMenuPanel<T = any> {\n  xPosition: MenuPositionX;\n  yPosition: MenuPositionY;\n  overlapTrigger: boolean;\n  templateRef: TemplateRef<any>;\n  close: EventEmitter<void | 'click' | 'keydown' | 'tab'>;\n  parentMenu?: MatMenuPanel | undefined;\n  direction?: Direction;\n  focusFirstItem: (origin?: FocusOrigin) => void;\n  resetActiveItem: () => void;\n  setPositionClasses?: (x: MenuPositionX, y: MenuPositionY) => void;\n  setElevation?(depth: number): void;\n  lazyContent?: MatMenuContent;\n  backdropClass?: string;\n  hasBackdrop?: boolean;\n  addItem?: (item: T) => void;\n  removeItem?: (item: T) => void;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusableOption, FocusMonitor, FocusOrigin} from '@angular/cdk/a11y';\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  OnDestroy,\n  ViewEncapsulation,\n  Inject,\n  Optional,\n} from '@angular/core';\nimport {\n  CanDisable,\n  CanDisableRipple,\n  mixinDisabled,\n  mixinDisableRipple\n} from '@angular/material/core';\nimport {Subject} from 'rxjs';\nimport {DOCUMENT} from '@angular/common';\nimport {MAT_MENU_PANEL, MatMenuPanel} from './menu-panel';\n\n// Boilerplate for applying mixins to MatMenuItem.\n/** @docs-private */\nexport class MatMenuItemBase {}\nexport const _MatMenuItemMixinBase = mixinDisableRipple(mixinDisabled(MatMenuItemBase));\n\n/**\n * This directive is intended to be used inside an mat-menu tag.\n * It exists mostly to set the role attribute.\n */\n@Component({\n  moduleId: module.id,\n  selector: '[mat-menu-item]',\n  exportAs: 'matMenuItem',\n  inputs: ['disabled', 'disableRipple'],\n  host: {\n    'role': 'menuitem',\n    'class': 'mat-menu-item',\n    '[class.mat-menu-item-highlighted]': '_highlighted',\n    '[class.mat-menu-item-submenu-trigger]': '_triggersSubmenu',\n    '[attr.tabindex]': '_getTabIndex()',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.disabled]': 'disabled || null',\n    '(click)': '_checkDisabled($event)',\n    '(mouseenter)': '_handleMouseEnter()',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  templateUrl: 'menu-item.html',\n})\nexport class MatMenuItem extends _MatMenuItemMixinBase\n    implements FocusableOption, CanDisable, CanDisableRipple, OnDestroy {\n\n  private _document: Document;\n\n  /** Stream that emits when the menu item is hovered. */\n  readonly _hovered: Subject<MatMenuItem> = new Subject<MatMenuItem>();\n\n  /** Whether the menu item is highlighted. */\n  _highlighted: boolean = false;\n\n  /** Whether the menu item acts as a trigger for a sub-menu. */\n  _triggersSubmenu: boolean = false;\n\n  constructor(\n    private _elementRef: ElementRef,\n    @Inject(DOCUMENT) document?: any,\n    private _focusMonitor?: FocusMonitor,\n    @Inject(MAT_MENU_PANEL) @Optional() private _parentMenu?: MatMenuPanel<MatMenuItem>) {\n\n    // @deletion-target 7.0.0 make `_focusMonitor` and `document` required params.\n    super();\n\n    if (_focusMonitor) {\n      // Start monitoring the element so it gets the appropriate focused classes. We want\n      // to show the focus style for menu items only when the focus was not caused by a\n      // mouse or touch interaction.\n      _focusMonitor.monitor(this._getHostElement(), false);\n    }\n\n    if (_parentMenu && _parentMenu.addItem) {\n      _parentMenu.addItem(this);\n    }\n\n    this._document = document;\n  }\n\n  /** Focuses the menu item. */\n  focus(origin: FocusOrigin = 'program'): void {\n    if (this._focusMonitor) {\n      this._focusMonitor.focusVia(this._getHostElement(), origin);\n    } else {\n      this._getHostElement().focus();\n    }\n  }\n\n  ngOnDestroy() {\n    if (this._focusMonitor) {\n      this._focusMonitor.stopMonitoring(this._getHostElement());\n    }\n\n    if (this._parentMenu && this._parentMenu.removeItem) {\n      this._parentMenu.removeItem(this);\n    }\n\n    this._hovered.complete();\n  }\n\n  /** Used to set the `tabindex`. */\n  _getTabIndex(): string {\n    return this.disabled ? '-1' : '0';\n  }\n\n  /** Returns the host DOM element. */\n  _getHostElement(): HTMLElement {\n    return this._elementRef.nativeElement;\n  }\n\n  /** Prevents the default element actions if it is disabled. */\n  _checkDisabled(event: Event): void {\n    if (this.disabled) {\n      event.preventDefault();\n      event.stopPropagation();\n    }\n  }\n\n  /** Emits to the hover stream. */\n  _handleMouseEnter() {\n    this._hovered.next(this);\n  }\n\n  /** Gets the label to be used when determining whether the option should be focused. */\n  getLabel(): string {\n    const element: HTMLElement = this._elementRef.nativeElement;\n    const textNodeType = this._document ? this._document.TEXT_NODE : 3;\n    let output = '';\n\n    if (element.childNodes) {\n      const length = element.childNodes.length;\n\n      // Go through all the top-level text nodes and extract their text.\n      // We skip anything that's not a text node to prevent the text from\n      // being thrown off by something like an icon.\n      for (let i = 0; i < length; i++) {\n        if (element.childNodes[i].nodeType === textNodeType) {\n          output += element.childNodes[i].textContent;\n        }\n      }\n    }\n\n    return output.trim();\n  }\n\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  Component,\n  ContentChild,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  Optional,\n  QueryList,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {CanDisableRipple, MatLine, MatLineSetter, mixinDisableRipple} from '@angular/material/core';\n\n// Boilerplate for applying mixins to MatList.\n/** @docs-private */\nexport class MatListBase {}\nexport const _MatListMixinBase = mixinDisableRipple(MatListBase);\n\n// Boilerplate for applying mixins to MatListItem.\n/** @docs-private */\nexport class MatListItemBase {}\nexport const _MatListItemMixinBase = mixinDisableRipple(MatListItemBase);\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-nav-list',\n  exportAs: 'matNavList',\n  host: {\n    'role': 'navigation',\n    'class': 'mat-nav-list'\n  },\n  templateUrl: 'list.html',\n  styleUrls: ['list.css'],\n  inputs: ['disableRipple'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatNavList extends _MatListMixinBase implements CanDisableRipple {}\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-list',\n  exportAs: 'matList',\n  templateUrl: 'list.html',\n  host: {'class': 'mat-list'},\n  styleUrls: ['list.css'],\n  inputs: ['disableRipple'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatList extends _MatListMixinBase implements CanDisableRipple {}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-list-avatar], [matListAvatar]',\n  host: {'class': 'mat-list-avatar'}\n})\nexport class MatListAvatarCssMatStyler {}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-list-icon], [matListIcon]',\n  host: {'class': 'mat-list-icon'}\n})\nexport class MatListIconCssMatStyler {}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-subheader], [matSubheader]',\n  host: {'class': 'mat-subheader'}\n})\nexport class MatListSubheaderCssMatStyler {}\n\n/** An item within a Material Design list. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-list-item, a[mat-list-item]',\n  exportAs: 'matListItem',\n  host: {\n    'class': 'mat-list-item',\n    // @deletion-target 7.0.0 Remove `mat-list-item-avatar` in favor of `mat-list-item-with-avatar`.\n    '[class.mat-list-item-avatar]': '_avatar',\n    '[class.mat-list-item-with-avatar]': '_avatar',\n    '(focus)': '_handleFocus()',\n    '(blur)': '_handleBlur()',\n  },\n  inputs: ['disableRipple'],\n  templateUrl: 'list-item.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatListItem extends _MatListItemMixinBase implements AfterContentInit,\n    CanDisableRipple {\n  private _isNavList: boolean = false;\n\n  @ContentChildren(MatLine) _lines: QueryList<MatLine>;\n  @ContentChild(MatListAvatarCssMatStyler) _avatar: MatListAvatarCssMatStyler;\n\n  constructor(private _element: ElementRef,\n              @Optional() private _navList: MatNavList) {\n    super();\n    this._isNavList = !!_navList;\n  }\n\n  ngAfterContentInit() {\n    // TODO: consider turning the setter into a function, it doesn't do anything as a class.\n    // tslint:disable-next-line:no-unused-expression\n    new MatLineSetter(this._lines, this._element);\n  }\n\n  /** Whether this list item should show a ripple effect when clicked. */\n  _isRippleDisabled() {\n    return !this._isNavList || this.disableRipple || this._navList.disableRipple;\n  }\n\n  _handleFocus() {\n    this._element.nativeElement.classList.add('mat-list-item-focus');\n  }\n\n  _handleBlur() {\n    this._element.nativeElement.classList.remove('mat-list-item-focus');\n  }\n\n  /** Retrieves the DOM element of the component host. */\n  _getHostElement(): HTMLElement {\n    return this._element.nativeElement;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {DOCUMENT} from '@angular/common';\nimport {HttpClient, HttpErrorResponse} from '@angular/common/http';\nimport {\n  Inject,\n  Injectable,\n  InjectionToken,\n  Optional,\n  SecurityContext,\n  SkipSelf,\n} from '@angular/core';\nimport {DomSanitizer, SafeResourceUrl, SafeHtml} from '@angular/platform-browser';\nimport {forkJoin, Observable, of as observableOf, throwError as observableThrow} from 'rxjs';\nimport {catchError, finalize, map, share, tap} from 'rxjs/operators';\n\n\n/**\n * Returns an exception to be thrown in the case when attempting to\n * load an icon with a name that cannot be found.\n * @docs-private\n */\nexport function getMatIconNameNotFoundError(iconName: string): Error {\n  return Error(`Unable to find icon with the name \"${iconName}\"`);\n}\n\n\n/**\n * Returns an exception to be thrown when the consumer attempts to use\n * `<mat-icon>` without including @angular/http.\n * @docs-private\n */\nexport function getMatIconNoHttpProviderError(): Error {\n  return Error('Could not find HttpClient provider for use with Angular Material icons. ' +\n               'Please include the HttpClientModule from @angular/common/http in your ' +\n               'app imports.');\n}\n\n\n/**\n * Returns an exception to be thrown when a URL couldn't be sanitized.\n * @param url URL that was attempted to be sanitized.\n * @docs-private\n */\nexport function getMatIconFailedToSanitizeUrlError(url: SafeResourceUrl): Error {\n  return Error(`The URL provided to MatIconRegistry was not trusted as a resource URL ` +\n               `via Angular's DomSanitizer. Attempted URL was \"${url}\".`);\n}\n\n/**\n * Returns an exception to be thrown when a HTML string couldn't be sanitized.\n * @param literal HTML that was attempted to be sanitized.\n * @docs-private\n */\nexport function getMatIconFailedToSanitizeLiteralError(literal: SafeHtml): Error {\n  return Error(`The literal provided to MatIconRegistry was not trusted as safe HTML by ` +\n               `Angular's DomSanitizer. Attempted literal was \"${literal}\".`);\n}\n\n\n/**\n * Configuration for an icon, including the URL and possibly the cached SVG element.\n * @docs-private\n */\nclass SvgIconConfig {\n  url: SafeResourceUrl | null;\n  svgElement: SVGElement | null;\n\n  constructor(url: SafeResourceUrl);\n  constructor(svgElement: SVGElement);\n  constructor(data: SafeResourceUrl | SVGElement) {\n    // Note that we can't use `instanceof SVGElement` here,\n    // because it'll break during server-side rendering.\n    if (!!(data as any).nodeName) {\n      this.svgElement = data as SVGElement;\n    } else {\n      this.url = data as SafeResourceUrl;\n    }\n  }\n}\n\n/**\n * Service to register and display icons used by the `<mat-icon>` component.\n * - Registers icon URLs by namespace and name.\n * - Registers icon set URLs by namespace.\n * - Registers aliases for CSS classes, for use with icon fonts.\n * - Loads icons from URLs and extracts individual icons from icon sets.\n */\n@Injectable({providedIn: 'root'})\nexport class MatIconRegistry {\n  private _document: Document;\n\n  /**\n   * URLs and cached SVG elements for individual icons. Keys are of the format \"[namespace]:[icon]\".\n   */\n  private _svgIconConfigs = new Map<string, SvgIconConfig>();\n\n  /**\n   * SvgIconConfig objects and cached SVG elements for icon sets, keyed by namespace.\n   * Multiple icon sets can be registered under the same namespace.\n   */\n  private _iconSetConfigs = new Map<string, SvgIconConfig[]>();\n\n  /** Cache for icons loaded by direct URLs. */\n  private _cachedIconsByUrl = new Map<string, SVGElement>();\n\n  /** In-progress icon fetches. Used to coalesce multiple requests to the same URL. */\n  private _inProgressUrlFetches = new Map<string, Observable<string>>();\n\n  /** Map from font identifiers to their CSS class names. Used for icon fonts. */\n  private _fontCssClassesByAlias = new Map<string, string>();\n\n  /**\n   * The CSS class to apply when an `<mat-icon>` component has no icon name, url, or font specified.\n   * The default 'material-icons' value assumes that the material icon font has been loaded as\n   * described at http://google.github.io/material-design-icons/#icon-font-for-the-web\n   */\n  private _defaultFontSetClass = 'material-icons';\n\n  constructor(\n    @Optional() private _httpClient: HttpClient,\n    private _sanitizer: DomSanitizer,\n    @Optional() @Inject(DOCUMENT) document: any) {\n      this._document = document;\n    }\n\n  /**\n   * Registers an icon by URL in the default namespace.\n   * @param iconName Name under which the icon should be registered.\n   * @param url\n   */\n  addSvgIcon(iconName: string, url: SafeResourceUrl): this {\n    return this.addSvgIconInNamespace('', iconName, url);\n  }\n\n  /**\n   * Registers an icon using an HTML string in the default namespace.\n   * @param iconName Name under which the icon should be registered.\n   * @param literal SVG source of the icon.\n   */\n  addSvgIconLiteral(iconName: string, literal: SafeHtml): this {\n    return this.addSvgIconLiteralInNamespace('', iconName, literal);\n  }\n\n  /**\n   * Registers an icon by URL in the specified namespace.\n   * @param namespace Namespace in which the icon should be registered.\n   * @param iconName Name under which the icon should be registered.\n   * @param url\n   */\n  addSvgIconInNamespace(namespace: string, iconName: string, url: SafeResourceUrl): this {\n    return this._addSvgIconConfig(namespace, iconName, new SvgIconConfig(url));\n  }\n\n  /**\n   * Registers an icon using an HTML string in the specified namespace.\n   * @param namespace Namespace in which the icon should be registered.\n   * @param iconName Name under which the icon should be registered.\n   * @param literal SVG source of the icon.\n   */\n  addSvgIconLiteralInNamespace(namespace: string, iconName: string, literal: SafeHtml): this {\n    const sanitizedLiteral = this._sanitizer.sanitize(SecurityContext.HTML, literal);\n\n    if (!sanitizedLiteral) {\n      throw getMatIconFailedToSanitizeLiteralError(literal);\n    }\n\n    const svgElement = this._createSvgElementForSingleIcon(sanitizedLiteral);\n    return this._addSvgIconConfig(namespace, iconName, new SvgIconConfig(svgElement));\n  }\n\n  /**\n   * Registers an icon set by URL in the default namespace.\n   * @param url\n   */\n  addSvgIconSet(url: SafeResourceUrl): this {\n    return this.addSvgIconSetInNamespace('', url);\n  }\n\n  /**\n   * Registers an icon set using an HTML string in the default namespace.\n   * @param literal SVG source of the icon set.\n   */\n  addSvgIconSetLiteral(literal: SafeHtml): this {\n    return this.addSvgIconSetLiteralInNamespace('', literal);\n  }\n\n  /**\n   * Registers an icon set by URL in the specified namespace.\n   * @param namespace Namespace in which to register the icon set.\n   * @param url\n   */\n  addSvgIconSetInNamespace(namespace: string, url: SafeResourceUrl): this {\n    return this._addSvgIconSetConfig(namespace, new SvgIconConfig(url));\n  }\n\n  /**\n   * Registers an icon set using an HTML string in the specified namespace.\n   * @param namespace Namespace in which to register the icon set.\n   * @param literal SVG source of the icon set.\n   */\n  addSvgIconSetLiteralInNamespace(namespace: string, literal: SafeHtml): this {\n    const sanitizedLiteral = this._sanitizer.sanitize(SecurityContext.HTML, literal);\n\n    if (!sanitizedLiteral) {\n      throw getMatIconFailedToSanitizeLiteralError(literal);\n    }\n\n    const svgElement = this._svgElementFromString(sanitizedLiteral);\n    return this._addSvgIconSetConfig(namespace, new SvgIconConfig(svgElement));\n  }\n\n  /**\n   * Defines an alias for a CSS class name to be used for icon fonts. Creating an matIcon\n   * component with the alias as the fontSet input will cause the class name to be applied\n   * to the `<mat-icon>` element.\n   *\n   * @param alias Alias for the font.\n   * @param className Class name override to be used instead of the alias.\n   */\n  registerFontClassAlias(alias: string, className: string = alias): this {\n    this._fontCssClassesByAlias.set(alias, className);\n    return this;\n  }\n\n  /**\n   * Returns the CSS class name associated with the alias by a previous call to\n   * registerFontClassAlias. If no CSS class has been associated, returns the alias unmodified.\n   */\n  classNameForFontAlias(alias: string): string {\n    return this._fontCssClassesByAlias.get(alias) || alias;\n  }\n\n  /**\n   * Sets the CSS class name to be used for icon fonts when an `<mat-icon>` component does not\n   * have a fontSet input value, and is not loading an icon by name or URL.\n   *\n   * @param className\n   */\n  setDefaultFontSetClass(className: string): this {\n    this._defaultFontSetClass = className;\n    return this;\n  }\n\n  /**\n   * Returns the CSS class name to be used for icon fonts when an `<mat-icon>` component does not\n   * have a fontSet input value, and is not loading an icon by name or URL.\n   */\n  getDefaultFontSetClass(): string {\n    return this._defaultFontSetClass;\n  }\n\n  /**\n   * Returns an Observable that produces the icon (as an `<svg>` DOM element) from the given URL.\n   * The response from the URL may be cached so this will not always cause an HTTP request, but\n   * the produced element will always be a new copy of the originally fetched icon. (That is,\n   * it will not contain any modifications made to elements previously returned).\n   *\n   * @param safeUrl URL from which to fetch the SVG icon.\n   */\n  getSvgIconFromUrl(safeUrl: SafeResourceUrl): Observable<SVGElement> {\n    const url = this._sanitizer.sanitize(SecurityContext.RESOURCE_URL, safeUrl);\n\n    if (!url) {\n      throw getMatIconFailedToSanitizeUrlError(safeUrl);\n    }\n\n    const cachedIcon = this._cachedIconsByUrl.get(url);\n\n    if (cachedIcon) {\n      return observableOf(cloneSvg(cachedIcon));\n    }\n\n    return this._loadSvgIconFromConfig(new SvgIconConfig(safeUrl)).pipe(\n      tap(svg => this._cachedIconsByUrl.set(url!, svg)),\n      map(svg => cloneSvg(svg)),\n    );\n  }\n\n  /**\n   * Returns an Observable that produces the icon (as an `<svg>` DOM element) with the given name\n   * and namespace. The icon must have been previously registered with addIcon or addIconSet;\n   * if not, the Observable will throw an error.\n   *\n   * @param name Name of the icon to be retrieved.\n   * @param namespace Namespace in which to look for the icon.\n   */\n  getNamedSvgIcon(name: string, namespace: string = ''): Observable<SVGElement> {\n    // Return (copy of) cached icon if possible.\n    const key = iconKey(namespace, name);\n    const config = this._svgIconConfigs.get(key);\n\n    if (config) {\n      return this._getSvgFromConfig(config);\n    }\n\n    // See if we have any icon sets registered for the namespace.\n    const iconSetConfigs = this._iconSetConfigs.get(namespace);\n\n    if (iconSetConfigs) {\n      return this._getSvgFromIconSetConfigs(name, iconSetConfigs);\n    }\n\n    return observableThrow(getMatIconNameNotFoundError(key));\n  }\n\n  /**\n   * Returns the cached icon for a SvgIconConfig if available, or fetches it from its URL if not.\n   */\n  private _getSvgFromConfig(config: SvgIconConfig): Observable<SVGElement> {\n    if (config.svgElement) {\n      // We already have the SVG element for this icon, return a copy.\n      return observableOf(cloneSvg(config.svgElement));\n    } else {\n      // Fetch the icon from the config's URL, cache it, and return a copy.\n      return this._loadSvgIconFromConfig(config).pipe(\n        tap(svg => config.svgElement = svg),\n        map(svg => cloneSvg(svg)),\n      );\n    }\n  }\n\n  /**\n   * Attempts to find an icon with the specified name in any of the SVG icon sets.\n   * First searches the available cached icons for a nested element with a matching name, and\n   * if found copies the element to a new `<svg>` element. If not found, fetches all icon sets\n   * that have not been cached, and searches again after all fetches are completed.\n   * The returned Observable produces the SVG element if possible, and throws\n   * an error if no icon with the specified name can be found.\n   */\n  private _getSvgFromIconSetConfigs(name: string, iconSetConfigs: SvgIconConfig[]):\n      Observable<SVGElement> {\n    // For all the icon set SVG elements we've fetched, see if any contain an icon with the\n    // requested name.\n    const namedIcon = this._extractIconWithNameFromAnySet(name, iconSetConfigs);\n\n    if (namedIcon) {\n      // We could cache namedIcon in _svgIconConfigs, but since we have to make a copy every\n      // time anyway, there's probably not much advantage compared to just always extracting\n      // it from the icon set.\n      return observableOf(namedIcon);\n    }\n\n    // Not found in any cached icon sets. If there are icon sets with URLs that we haven't\n    // fetched, fetch them now and look for iconName in the results.\n    const iconSetFetchRequests: Observable<SVGElement | null>[] = iconSetConfigs\n      .filter(iconSetConfig => !iconSetConfig.svgElement)\n      .map(iconSetConfig => {\n        return this._loadSvgIconSetFromConfig(iconSetConfig).pipe(\n          catchError((err: HttpErrorResponse): Observable<SVGElement | null> => {\n            const url = this._sanitizer.sanitize(SecurityContext.RESOURCE_URL, iconSetConfig.url);\n\n            // Swallow errors fetching individual URLs so the\n            // combined Observable won't necessarily fail.\n            console.error(`Loading icon set URL: ${url} failed: ${err.message}`);\n            return observableOf(null);\n          })\n        );\n      });\n\n    // Fetch all the icon set URLs. When the requests complete, every IconSet should have a\n    // cached SVG element (unless the request failed), and we can check again for the icon.\n    return forkJoin(iconSetFetchRequests).pipe(map(() => {\n      const foundIcon = this._extractIconWithNameFromAnySet(name, iconSetConfigs);\n\n      if (!foundIcon) {\n        throw getMatIconNameNotFoundError(name);\n      }\n\n      return foundIcon;\n    }));\n  }\n\n  /**\n   * Searches the cached SVG elements for the given icon sets for a nested icon element whose \"id\"\n   * tag matches the specified name. If found, copies the nested element to a new SVG element and\n   * returns it. Returns null if no matching element is found.\n   */\n  private _extractIconWithNameFromAnySet(iconName: string, iconSetConfigs: SvgIconConfig[]):\n      SVGElement | null {\n    // Iterate backwards, so icon sets added later have precedence.\n    for (let i = iconSetConfigs.length - 1; i >= 0; i--) {\n      const config = iconSetConfigs[i];\n      if (config.svgElement) {\n        const foundIcon = this._extractSvgIconFromSet(config.svgElement, iconName);\n        if (foundIcon) {\n          return foundIcon;\n        }\n      }\n    }\n    return null;\n  }\n\n  /**\n   * Loads the content of the icon URL specified in the SvgIconConfig and creates an SVG element\n   * from it.\n   */\n  private _loadSvgIconFromConfig(config: SvgIconConfig): Observable<SVGElement> {\n    return this._fetchUrl(config.url)\n        .pipe(map(svgText => this._createSvgElementForSingleIcon(svgText)));\n  }\n\n  /**\n   * Loads the content of the icon set URL specified in the SvgIconConfig and creates an SVG element\n   * from it.\n   */\n  private _loadSvgIconSetFromConfig(config: SvgIconConfig): Observable<SVGElement> {\n    // If the SVG for this icon set has already been parsed, do nothing.\n    if (config.svgElement) {\n      return observableOf(config.svgElement);\n    }\n\n    return this._fetchUrl(config.url).pipe(map(svgText => {\n      // It is possible that the icon set was parsed and cached by an earlier request, so parsing\n      // only needs to occur if the cache is yet unset.\n      if (!config.svgElement) {\n        config.svgElement = this._svgElementFromString(svgText);\n      }\n\n      return config.svgElement;\n    }));\n  }\n\n  /**\n   * Creates a DOM element from the given SVG string, and adds default attributes.\n   */\n  private _createSvgElementForSingleIcon(responseText: string): SVGElement {\n    const svg = this._svgElementFromString(responseText);\n    this._setSvgAttributes(svg);\n    return svg;\n  }\n\n  /**\n   * Searches the cached element of the given SvgIconConfig for a nested icon element whose \"id\"\n   * tag matches the specified name. If found, copies the nested element to a new SVG element and\n   * returns it. Returns null if no matching element is found.\n   */\n  private _extractSvgIconFromSet(iconSet: SVGElement, iconName: string): SVGElement | null {\n    const iconSource = iconSet.querySelector('#' + iconName);\n\n    if (!iconSource) {\n      return null;\n    }\n\n    // Clone the element and remove the ID to prevent multiple elements from being added\n    // to the page with the same ID.\n    const iconElement = iconSource.cloneNode(true) as Element;\n    iconElement.removeAttribute('id');\n\n    // If the icon node is itself an <svg> node, clone and return it directly. If not, set it as\n    // the content of a new <svg> node.\n    if (iconElement.nodeName.toLowerCase() === 'svg') {\n      return this._setSvgAttributes(iconElement as SVGElement);\n    }\n\n    // If the node is a <symbol>, it won't be rendered so we have to convert it into <svg>. Note\n    // that the same could be achieved by referring to it via <use href=\"#id\">, however the <use>\n    // tag is problematic on Firefox, because it needs to include the current page path.\n    if (iconElement.nodeName.toLowerCase() === 'symbol') {\n      return this._setSvgAttributes(this._toSvgElement(iconElement));\n    }\n\n    // createElement('SVG') doesn't work as expected; the DOM ends up with\n    // the correct nodes, but the SVG content doesn't render. Instead we\n    // have to create an empty SVG node using innerHTML and append its content.\n    // Elements created using DOMParser.parseFromString have the same problem.\n    // http://stackoverflow.com/questions/23003278/svg-innerhtml-in-firefox-can-not-display\n    const svg = this._svgElementFromString('<svg></svg>');\n    // Clone the node so we don't remove it from the parent icon set element.\n    svg.appendChild(iconElement);\n\n    return this._setSvgAttributes(svg);\n  }\n\n  /**\n   * Creates a DOM element from the given SVG string.\n   */\n  private _svgElementFromString(str: string): SVGElement {\n    const div = this._document.createElement('DIV');\n    div.innerHTML = str;\n    const svg = div.querySelector('svg') as SVGElement;\n\n    if (!svg) {\n      throw Error('<svg> tag not found');\n    }\n\n    return svg;\n  }\n\n  /**\n   * Converts an element into an SVG node by cloning all of its children.\n   */\n  private _toSvgElement(element: Element): SVGElement {\n    let svg = this._svgElementFromString('<svg></svg>');\n\n    for (let i = 0; i < element.childNodes.length; i++) {\n      if (element.childNodes[i].nodeType === this._document.ELEMENT_NODE) {\n        svg.appendChild(element.childNodes[i].cloneNode(true));\n      }\n    }\n\n    return svg;\n  }\n\n  /**\n   * Sets the default attributes for an SVG element to be used as an icon.\n   */\n  private _setSvgAttributes(svg: SVGElement): SVGElement {\n    svg.setAttribute('fit', '');\n    svg.setAttribute('height', '100%');\n    svg.setAttribute('width', '100%');\n    svg.setAttribute('preserveAspectRatio', 'xMidYMid meet');\n    svg.setAttribute('focusable', 'false'); // Disable IE11 default behavior to make SVGs focusable.\n    return svg;\n  }\n\n  /**\n   * Returns an Observable which produces the string contents of the given URL. Results may be\n   * cached, so future calls with the same URL may not cause another HTTP request.\n   */\n  private _fetchUrl(safeUrl: SafeResourceUrl | null): Observable<string> {\n    if (!this._httpClient) {\n      throw getMatIconNoHttpProviderError();\n    }\n\n    if (safeUrl == null) {\n      throw Error(`Cannot fetch icon from URL \"${safeUrl}\".`);\n    }\n\n    const url = this._sanitizer.sanitize(SecurityContext.RESOURCE_URL, safeUrl);\n\n    if (!url) {\n      throw getMatIconFailedToSanitizeUrlError(safeUrl);\n    }\n\n    // Store in-progress fetches to avoid sending a duplicate request for a URL when there is\n    // already a request in progress for that URL. It's necessary to call share() on the\n    // Observable returned by http.get() so that multiple subscribers don't cause multiple XHRs.\n    const inProgressFetch = this._inProgressUrlFetches.get(url);\n\n    if (inProgressFetch) {\n      return inProgressFetch;\n    }\n\n    // TODO(jelbourn): for some reason, the `finalize` operator \"loses\" the generic type on the\n    // Observable. Figure out why and fix it.\n    const req = this._httpClient.get(url, {responseType: 'text'}).pipe(\n      finalize(() => this._inProgressUrlFetches.delete(url)),\n      share(),\n    );\n\n    this._inProgressUrlFetches.set(url, req);\n    return req;\n  }\n\n  /**\n   * Registers an icon config by name in the specified namespace.\n   * @param namespace Namespace in which to register the icon config.\n   * @param iconName Name under which to register the config.\n   * @param config Config to be registered.\n   */\n  private _addSvgIconConfig(namespace: string, iconName: string, config: SvgIconConfig): this {\n    this._svgIconConfigs.set(iconKey(namespace, iconName), config);\n    return this;\n  }\n\n  /**\n   * Registers an icon set config in the specified namespace.\n   * @param namespace Namespace in which to register the icon config.\n   * @param config Config to be registered.\n   */\n  private _addSvgIconSetConfig(namespace: string, config: SvgIconConfig): this {\n    const configNamespace = this._iconSetConfigs.get(namespace);\n\n    if (configNamespace) {\n      configNamespace.push(config);\n    } else {\n      this._iconSetConfigs.set(namespace, [config]);\n    }\n\n    return this;\n  }\n}\n\n/** @docs-private */\nexport function ICON_REGISTRY_PROVIDER_FACTORY(\n  parentRegistry: MatIconRegistry,\n  httpClient: HttpClient,\n  sanitizer: DomSanitizer,\n  document?: any) {\n  return parentRegistry || new MatIconRegistry(httpClient, sanitizer, document);\n}\n\n/** @docs-private */\nexport const ICON_REGISTRY_PROVIDER = {\n  // If there is already an MatIconRegistry available, use that. Otherwise, provide a new one.\n  provide: MatIconRegistry,\n  deps: [\n    [new Optional(), new SkipSelf(), MatIconRegistry],\n    [new Optional(), HttpClient],\n    DomSanitizer,\n    [new Optional(), DOCUMENT as InjectionToken<any>],\n  ],\n  useFactory: ICON_REGISTRY_PROVIDER_FACTORY,\n};\n\n/** Clones an SVGElement while preserving type information. */\nfunction cloneSvg(svg: SVGElement): SVGElement {\n  return svg.cloneNode(true) as SVGElement;\n}\n\n/** Returns the cache key to use for an icon namespace and name. */\nfunction iconKey(namespace: string, name: string) {\n  return namespace + ':' + name;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {take} from 'rxjs/operators';\nimport {\n  Attribute,\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  Input,\n  OnChanges,\n  OnInit,\n  SimpleChanges,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {CanColor, mixinColor} from '@angular/material/core';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {MatIconRegistry} from './icon-registry';\n\n\n// Boilerplate for applying mixins to MatIcon.\n/** @docs-private */\nexport class MatIconBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatIconMixinBase = mixinColor(MatIconBase);\n\n\n/**\n * Component to display an icon. It can be used in the following ways:\n *\n * - Specify the svgIcon input to load an SVG icon from a URL previously registered with the\n *   addSvgIcon, addSvgIconInNamespace, addSvgIconSet, or addSvgIconSetInNamespace methods of\n *   MatIconRegistry. If the svgIcon value contains a colon it is assumed to be in the format\n *   \"[namespace]:[name]\", if not the value will be the name of an icon in the default namespace.\n *   Examples:\n *     `<mat-icon svgIcon=\"left-arrow\"></mat-icon>\n *     <mat-icon svgIcon=\"animals:cat\"></mat-icon>`\n *\n * - Use a font ligature as an icon by putting the ligature text in the content of the `<mat-icon>`\n *   component. By default the Material icons font is used as described at\n *   http://google.github.io/material-design-icons/#icon-font-for-the-web. You can specify an\n *   alternate font by setting the fontSet input to either the CSS class to apply to use the\n *   desired font, or to an alias previously registered with MatIconRegistry.registerFontClassAlias.\n *   Examples:\n *     `<mat-icon>home</mat-icon>\n *     <mat-icon fontSet=\"myfont\">sun</mat-icon>`\n *\n * - Specify a font glyph to be included via CSS rules by setting the fontSet input to specify the\n *   font, and the fontIcon input to specify the icon. Typically the fontIcon will specify a\n *   CSS class which causes the glyph to be displayed via a :before selector, as in\n *   https://fortawesome.github.io/Font-Awesome/examples/\n *   Example:\n *     `<mat-icon fontSet=\"fa\" fontIcon=\"alarm\"></mat-icon>`\n */\n@Component({\n  moduleId: module.id,\n  template: '<ng-content></ng-content>',\n  selector: 'mat-icon',\n  exportAs: 'matIcon',\n  styleUrls: ['icon.css'],\n  inputs: ['color'],\n  host: {\n    'role': 'img',\n    'class': 'mat-icon',\n    '[class.mat-icon-inline]': 'inline',\n  },\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatIcon extends _MatIconMixinBase implements OnChanges, OnInit, CanColor {\n\n  /**\n   * Whether the icon should be inlined, automatically sizing the icon to match the font size of\n   * the element the icon is contained in.\n   */\n  @Input()\n  get inline(): boolean {\n    return this._inline;\n  }\n  set inline(inline: boolean) {\n    this._inline = coerceBooleanProperty(inline);\n  }\n  private _inline: boolean = false;\n\n  /** Name of the icon in the SVG icon set. */\n  @Input() svgIcon: string;\n\n  /** Font set that the icon is a part of. */\n  @Input()\n  get fontSet(): string { return this._fontSet; }\n  set fontSet(value: string) {\n    this._fontSet = this._cleanupFontValue(value);\n  }\n  private _fontSet: string;\n\n  /** Name of an icon within a font set. */\n  @Input()\n  get fontIcon(): string { return this._fontIcon; }\n  set fontIcon(value: string) {\n    this._fontIcon = this._cleanupFontValue(value);\n  }\n  private _fontIcon: string;\n\n  private _previousFontSetClass: string;\n  private _previousFontIconClass: string;\n\n  constructor(\n      elementRef: ElementRef,\n      private _iconRegistry: MatIconRegistry,\n      @Attribute('aria-hidden') ariaHidden: string) {\n    super(elementRef);\n\n    // If the user has not explicitly set aria-hidden, mark the icon as hidden, as this is\n    // the right thing to do for the majority of icon use-cases.\n    if (!ariaHidden) {\n      elementRef.nativeElement.setAttribute('aria-hidden', 'true');\n    }\n  }\n\n  /**\n   * Splits an svgIcon binding value into its icon set and icon name components.\n   * Returns a 2-element array of [(icon set), (icon name)].\n   * The separator for the two fields is ':'. If there is no separator, an empty\n   * string is returned for the icon set and the entire value is returned for\n   * the icon name. If the argument is falsy, returns an array of two empty strings.\n   * Throws an error if the name contains two or more ':' separators.\n   * Examples:\n   *   `'social:cake' -> ['social', 'cake']\n   *   'penguin' -> ['', 'penguin']\n   *   null -> ['', '']\n   *   'a:b:c' -> (throws Error)`\n   */\n  private _splitIconName(iconName: string): [string, string] {\n    if (!iconName) {\n      return ['', ''];\n    }\n    const parts = iconName.split(':');\n    switch (parts.length) {\n      case 1: return ['', parts[0]]; // Use default namespace.\n      case 2: return <[string, string]>parts;\n      default: throw Error(`Invalid icon name: \"${iconName}\"`);\n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    // Only update the inline SVG icon if the inputs changed, to avoid unnecessary DOM operations.\n    if (changes.svgIcon) {\n      if (this.svgIcon) {\n        const [namespace, iconName] = this._splitIconName(this.svgIcon);\n\n        this._iconRegistry.getNamedSvgIcon(iconName, namespace).pipe(take(1)).subscribe(\n          svg => this._setSvgElement(svg),\n          (err: Error) => console.log(`Error retrieving icon: ${err.message}`)\n        );\n      } else {\n        this._clearSvgElement();\n      }\n    }\n\n    if (this._usingFontIcon()) {\n      this._updateFontIconClasses();\n    }\n  }\n\n  ngOnInit() {\n    // Update font classes because ngOnChanges won't be called if none of the inputs are present,\n    // e.g. <mat-icon>arrow</mat-icon> In this case we need to add a CSS class for the default font.\n    if (this._usingFontIcon()) {\n      this._updateFontIconClasses();\n    }\n  }\n\n  private _usingFontIcon(): boolean {\n    return !this.svgIcon;\n  }\n\n  private _setSvgElement(svg: SVGElement) {\n    this._clearSvgElement();\n    this._elementRef.nativeElement.appendChild(svg);\n  }\n\n  private _clearSvgElement() {\n    const layoutElement: HTMLElement = this._elementRef.nativeElement;\n    const childCount = layoutElement.childNodes.length;\n\n    // Remove existing child nodes and add the new SVG element. Note that we can't\n    // use innerHTML, because IE will throw if the element has a data binding.\n    for (let i = 0; i < childCount; i++) {\n      layoutElement.removeChild(layoutElement.childNodes[i]);\n    }\n  }\n\n  private _updateFontIconClasses() {\n    if (!this._usingFontIcon()) {\n      return;\n    }\n\n    const elem: HTMLElement = this._elementRef.nativeElement;\n    const fontSetClass = this.fontSet ?\n        this._iconRegistry.classNameForFontAlias(this.fontSet) :\n        this._iconRegistry.getDefaultFontSetClass();\n\n    if (fontSetClass != this._previousFontSetClass) {\n      if (this._previousFontSetClass) {\n        elem.classList.remove(this._previousFontSetClass);\n      }\n      if (fontSetClass) {\n        elem.classList.add(fontSetClass);\n      }\n      this._previousFontSetClass = fontSetClass;\n    }\n\n    if (this.fontIcon != this._previousFontIconClass) {\n      if (this._previousFontIconClass) {\n        elem.classList.remove(this._previousFontIconClass);\n      }\n      if (this.fontIcon) {\n        elem.classList.add(this.fontIcon);\n      }\n      this._previousFontIconClass = this.fontIcon;\n    }\n  }\n\n  /**\n   * Cleans up a value to be used as a fontIcon or fontSet.\n   * Since the value ends up being assigned as a CSS class, we\n   * have to trim the value and omit space-separated values.\n   */\n  private _cleanupFontValue(value: string) {\n    return typeof value === 'string' ? value.trim().split(' ')[0] : value;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatIcon} from './icon';\n\n\n@NgModule({\n  imports: [MatCommonModule],\n  exports: [MatIcon, MatCommonModule],\n  declarations: [MatIcon],\n})\nexport class MatIconModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {DOWN_ARROW} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  Directive,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  OnDestroy,\n  Optional,\n  Output,\n} from '@angular/core';\nimport {\n  AbstractControl,\n  ControlValueAccessor,\n  NG_VALIDATORS,\n  NG_VALUE_ACCESSOR,\n  ValidationErrors,\n  Validator,\n  ValidatorFn,\n  Validators\n} from '@angular/forms';\nimport {DateAdapter, MAT_DATE_FORMATS, MatDateFormats} from '@angular/material/core';\nimport {MatFormField} from '@angular/material/form-field';\nimport {MAT_INPUT_VALUE_ACCESSOR} from '@angular/material/input';\nimport {Subscription} from 'rxjs';\nimport {MatDatepicker} from './datepicker';\nimport {createMissingDateImplError} from './datepicker-errors';\n\n\nexport const MAT_DATEPICKER_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatDatepickerInput),\n  multi: true\n};\n\n\nexport const MAT_DATEPICKER_VALIDATORS: any = {\n  provide: NG_VALIDATORS,\n  useExisting: forwardRef(() => MatDatepickerInput),\n  multi: true\n};\n\n\n/**\n * An event used for datepicker input and change events. We don't always have access to a native\n * input or change event because the event may have been triggered by the user clicking on the\n * calendar popup. For consistency, we always use MatDatepickerInputEvent instead.\n */\nexport class MatDatepickerInputEvent<D> {\n  /** The new value for the target datepicker input. */\n  value: D | null;\n\n  constructor(\n    /** Reference to the datepicker input component that emitted the event. */\n    public target: MatDatepickerInput<D>,\n    /** Reference to the native input element associated with the datepicker input. */\n    public targetElement: HTMLElement) {\n    this.value = this.target.value;\n  }\n}\n\n\n/** Directive used to connect an input to a MatDatepicker. */\n@Directive({\n  selector: 'input[matDatepicker]',\n  providers: [\n    MAT_DATEPICKER_VALUE_ACCESSOR,\n    MAT_DATEPICKER_VALIDATORS,\n    {provide: MAT_INPUT_VALUE_ACCESSOR, useExisting: MatDatepickerInput},\n  ],\n  host: {\n    '[attr.aria-haspopup]': 'true',\n    '[attr.aria-owns]': '(_datepicker?.opened && _datepicker.id) || null',\n    '[attr.min]': 'min ? _dateAdapter.toIso8601(min) : null',\n    '[attr.max]': 'max ? _dateAdapter.toIso8601(max) : null',\n    '[disabled]': 'disabled',\n    '(input)': '_onInput($event.target.value)',\n    '(change)': '_onChange()',\n    '(blur)': '_onBlur()',\n    '(keydown)': '_onKeydown($event)',\n  },\n  exportAs: 'matDatepickerInput',\n})\nexport class MatDatepickerInput<D> implements AfterContentInit, ControlValueAccessor, OnDestroy,\n    Validator {\n  /** The datepicker that this input is associated with. */\n  @Input()\n  set matDatepicker(value: MatDatepicker<D>) {\n    this.registerDatepicker(value);\n  }\n  _datepicker: MatDatepicker<D>;\n\n  private registerDatepicker(value: MatDatepicker<D>) {\n    if (value) {\n      this._datepicker = value;\n      this._datepicker._registerInput(this);\n    }\n  }\n\n  /** Function that can be used to filter out dates within the datepicker. */\n  @Input()\n  set matDatepickerFilter(value: (date: D | null) => boolean) {\n    this._dateFilter = value;\n    this._validatorOnChange();\n  }\n  _dateFilter: (date: D | null) => boolean;\n\n  /** The value of the input. */\n  @Input()\n  get value(): D | null { return this._value; }\n  set value(value: D | null) {\n    value = this._dateAdapter.deserialize(value);\n    this._lastValueValid = !value || this._dateAdapter.isValid(value);\n    value = this._getValidDateOrNull(value);\n    const oldDate = this.value;\n    this._value = value;\n    this._formatValue(value);\n\n    if (!this._dateAdapter.sameDate(oldDate, value)) {\n      this._valueChange.emit(value);\n    }\n  }\n  private _value: D | null;\n\n  /** The minimum valid date. */\n  @Input()\n  get min(): D | null { return this._min; }\n  set min(value: D | null) {\n    this._min = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n    this._validatorOnChange();\n  }\n  private _min: D | null;\n\n  /** The maximum valid date. */\n  @Input()\n  get max(): D | null { return this._max; }\n  set max(value: D | null) {\n    this._max = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n    this._validatorOnChange();\n  }\n  private _max: D | null;\n\n  /** Whether the datepicker-input is disabled. */\n  @Input()\n  get disabled(): boolean { return !!this._disabled; }\n  set disabled(value: boolean) {\n    const newValue = coerceBooleanProperty(value);\n    const element = this._elementRef.nativeElement;\n\n    if (this._disabled !== newValue) {\n      this._disabled = newValue;\n      this._disabledChange.emit(newValue);\n    }\n\n    // We need to null check the `blur` method, because it's undefined during SSR.\n    if (newValue && element.blur) {\n      // Normally, native input elements automatically blur if they turn disabled. This behavior\n      // is problematic, because it would mean that it triggers another change detection cycle,\n      // which then causes a changed after checked error if the input element was focused before.\n      element.blur();\n    }\n  }\n  private _disabled: boolean;\n\n  /** Emits when a `change` event is fired on this `<input>`. */\n  @Output() readonly dateChange: EventEmitter<MatDatepickerInputEvent<D>> =\n      new EventEmitter<MatDatepickerInputEvent<D>>();\n\n  /** Emits when an `input` event is fired on this `<input>`. */\n  @Output() readonly dateInput: EventEmitter<MatDatepickerInputEvent<D>> =\n      new EventEmitter<MatDatepickerInputEvent<D>>();\n\n  /** Emits when the value changes (either due to user input or programmatic change). */\n  _valueChange = new EventEmitter<D | null>();\n\n  /** Emits when the disabled state has changed */\n  _disabledChange = new EventEmitter<boolean>();\n\n  _onTouched = () => {};\n\n  private _cvaOnChange: (value: any) => void = () => {};\n\n  private _validatorOnChange = () => {};\n\n  private _datepickerSubscription = Subscription.EMPTY;\n\n  private _localeSubscription = Subscription.EMPTY;\n\n  /** The form control validator for whether the input parses. */\n  private _parseValidator: ValidatorFn = (): ValidationErrors | null => {\n    return this._lastValueValid ?\n        null : {'matDatepickerParse': {'text': this._elementRef.nativeElement.value}};\n  }\n\n  /** The form control validator for the min date. */\n  private _minValidator: ValidatorFn = (control: AbstractControl): ValidationErrors | null => {\n    const controlValue = this._getValidDateOrNull(this._dateAdapter.deserialize(control.value));\n    return (!this.min || !controlValue ||\n        this._dateAdapter.compareDate(this.min, controlValue) <= 0) ?\n        null : {'matDatepickerMin': {'min': this.min, 'actual': controlValue}};\n  }\n\n  /** The form control validator for the max date. */\n  private _maxValidator: ValidatorFn = (control: AbstractControl): ValidationErrors | null => {\n    const controlValue = this._getValidDateOrNull(this._dateAdapter.deserialize(control.value));\n    return (!this.max || !controlValue ||\n        this._dateAdapter.compareDate(this.max, controlValue) >= 0) ?\n        null : {'matDatepickerMax': {'max': this.max, 'actual': controlValue}};\n  }\n\n  /** The form control validator for the date filter. */\n  private _filterValidator: ValidatorFn = (control: AbstractControl): ValidationErrors | null => {\n    const controlValue = this._getValidDateOrNull(this._dateAdapter.deserialize(control.value));\n    return !this._dateFilter || !controlValue || this._dateFilter(controlValue) ?\n        null : {'matDatepickerFilter': true};\n  }\n\n  /** The combined form control validator for this input. */\n  private _validator: ValidatorFn | null =\n      Validators.compose(\n          [this._parseValidator, this._minValidator, this._maxValidator, this._filterValidator]);\n\n  /** Whether the last value set on the input was valid. */\n  private _lastValueValid = false;\n\n  constructor(\n      private _elementRef: ElementRef,\n      @Optional() public _dateAdapter: DateAdapter<D>,\n      @Optional() @Inject(MAT_DATE_FORMATS) private _dateFormats: MatDateFormats,\n      @Optional() private _formField: MatFormField) {\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n    if (!this._dateFormats) {\n      throw createMissingDateImplError('MAT_DATE_FORMATS');\n    }\n\n    // Update the displayed date when the locale changes.\n    this._localeSubscription = _dateAdapter.localeChanges.subscribe(() => {\n      this.value = this.value;\n    });\n  }\n\n  ngAfterContentInit() {\n    if (this._datepicker) {\n      this._datepickerSubscription = this._datepicker._selectedChanged.subscribe((selected: D) => {\n        this.value = selected;\n        this._cvaOnChange(selected);\n        this._onTouched();\n        this.dateInput.emit(new MatDatepickerInputEvent(this, this._elementRef.nativeElement));\n        this.dateChange.emit(new MatDatepickerInputEvent(this, this._elementRef.nativeElement));\n      });\n    }\n  }\n\n  ngOnDestroy() {\n    this._datepickerSubscription.unsubscribe();\n    this._localeSubscription.unsubscribe();\n    this._valueChange.complete();\n    this._disabledChange.complete();\n  }\n\n  /** @docs-private */\n  registerOnValidatorChange(fn: () => void): void {\n    this._validatorOnChange = fn;\n  }\n\n  /** @docs-private */\n  validate(c: AbstractControl): ValidationErrors | null {\n    return this._validator ? this._validator(c) : null;\n  }\n\n  /**\n   * @deprecated\n   * @deletion-target 7.0.0 Use `getConnectedOverlayOrigin` instead\n   */\n  getPopupConnectionElementRef(): ElementRef {\n    return this.getConnectedOverlayOrigin();\n  }\n\n  /**\n   * Gets the element that the datepicker popup should be connected to.\n   * @return The element to connect the popup to.\n   */\n  getConnectedOverlayOrigin(): ElementRef {\n    return this._formField ? this._formField.getConnectedOverlayOrigin() : this._elementRef;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  writeValue(value: D): void {\n    this.value = value;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnChange(fn: (value: any) => void): void {\n    this._cvaOnChange = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnTouched(fn: () => void): void {\n    this._onTouched = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n  }\n\n  _onKeydown(event: KeyboardEvent) {\n    if (event.altKey && event.keyCode === DOWN_ARROW) {\n      this._datepicker.open();\n      event.preventDefault();\n    }\n  }\n\n  _onInput(value: string) {\n    let date = this._dateAdapter.parse(value, this._dateFormats.parse.dateInput);\n    this._lastValueValid = !date || this._dateAdapter.isValid(date);\n    date = this._getValidDateOrNull(date);\n\n    if (!this._dateAdapter.sameDate(date, this._value)) {\n      this._value = date;\n      this._cvaOnChange(date);\n      this._valueChange.emit(date);\n      this.dateInput.emit(new MatDatepickerInputEvent(this, this._elementRef.nativeElement));\n    }\n  }\n\n  _onChange() {\n    this.dateChange.emit(new MatDatepickerInputEvent(this, this._elementRef.nativeElement));\n  }\n\n  /** Returns the palette used by the input's form field, if any. */\n  _getThemePalette() {\n    return this._formField ? this._formField.color : undefined;\n  }\n\n  /** Handles blur events on the input. */\n  _onBlur() {\n    // Reformat the input only if we have a valid value.\n    if (this.value) {\n      this._formatValue(this.value);\n    }\n\n    this._onTouched();\n  }\n\n  /** Formats a value and sets it on the input element. */\n  private _formatValue(value: D | null) {\n    this._elementRef.nativeElement.value =\n        value ? this._dateAdapter.format(value, this._dateFormats.display.dateInput) : '';\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  Directive,\n  Input,\n  OnChanges,\n  OnDestroy,\n  SimpleChanges,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {merge, of as observableOf, Subscription} from 'rxjs';\nimport {MatDatepicker} from './datepicker';\nimport {MatDatepickerIntl} from './datepicker-intl';\n\n\n/** Can be used to override the icon of a `matDatepickerToggle`. */\n@Directive({\n  selector: '[matDatepickerToggleIcon]'\n})\nexport class MatDatepickerToggleIcon {}\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-datepicker-toggle',\n  templateUrl: 'datepicker-toggle.html',\n  styleUrls: ['datepicker-toggle.css'],\n  host: {\n    'class': 'mat-datepicker-toggle',\n    '[class.mat-datepicker-toggle-active]': 'datepicker && datepicker.opened',\n    '[class.mat-accent]': 'datepicker && datepicker.color === \"accent\"',\n    '[class.mat-warn]': 'datepicker && datepicker.color === \"warn\"',\n  },\n  exportAs: 'matDatepickerToggle',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatDatepickerToggle<D> implements AfterContentInit, OnChanges, OnDestroy {\n  private _stateChanges = Subscription.EMPTY;\n\n  /** Datepicker instance that the button will toggle. */\n  @Input('for') datepicker: MatDatepicker<D>;\n\n  /** Whether the toggle button is disabled. */\n  @Input()\n  get disabled(): boolean {\n    return this._disabled === undefined ? this.datepicker.disabled : !!this._disabled;\n  }\n  set disabled(value: boolean) {\n    this._disabled = coerceBooleanProperty(value);\n  }\n  private _disabled: boolean;\n\n  /** Custom icon set by the consumer. */\n  @ContentChild(MatDatepickerToggleIcon) _customIcon: MatDatepickerToggleIcon;\n\n  constructor(public _intl: MatDatepickerIntl, private _changeDetectorRef: ChangeDetectorRef) {}\n\n  ngOnChanges(changes: SimpleChanges) {\n    if (changes.datepicker) {\n      this._watchStateChanges();\n    }\n  }\n\n  ngOnDestroy() {\n    this._stateChanges.unsubscribe();\n  }\n\n  ngAfterContentInit() {\n    this._watchStateChanges();\n  }\n\n  _open(event: Event): void {\n    if (this.datepicker && !this.disabled) {\n      this.datepicker.open();\n      event.stopPropagation();\n    }\n  }\n\n  private _watchStateChanges() {\n    const datepickerDisabled = this.datepicker ? this.datepicker._disabledChange : observableOf();\n    const inputDisabled = this.datepicker && this.datepicker._datepickerInput ?\n        this.datepicker._datepickerInput._disabledChange : observableOf();\n    const datepickerToggled = this.datepicker ?\n        merge(this.datepicker.openedStream, this.datepicker.closedStream) :\n        observableOf();\n\n    this._stateChanges.unsubscribe();\n    this._stateChanges = merge(\n      this._intl.changes,\n      datepickerDisabled,\n      inputDisabled,\n      datepickerToggled\n    ).subscribe(() => this._changeDetectorRef.markForCheck());\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {A11yModule} from '@angular/cdk/a11y';\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatButtonModule} from '@angular/material/button';\nimport {MatDialogModule} from '@angular/material/dialog';\nimport {MatCalendar, MatCalendarHeader} from './calendar';\nimport {MatCalendarBody} from './calendar-body';\nimport {\n  MatDatepicker,\n  MatDatepickerContent,\n  MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY_PROVIDER,\n} from './datepicker';\nimport {MatDatepickerInput} from './datepicker-input';\nimport {MatDatepickerIntl} from './datepicker-intl';\nimport {MatDatepickerToggle, MatDatepickerToggleIcon} from './datepicker-toggle';\nimport {MatMonthView} from './month-view';\nimport {MatMultiYearView} from './multi-year-view';\nimport {MatYearView} from './year-view';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatButtonModule,\n    MatDialogModule,\n    OverlayModule,\n    A11yModule,\n    PortalModule,\n  ],\n  exports: [\n    MatCalendar,\n    MatCalendarBody,\n    MatDatepicker,\n    MatDatepickerContent,\n    MatDatepickerInput,\n    MatDatepickerToggle,\n    MatDatepickerToggleIcon,\n    MatMonthView,\n    MatYearView,\n    MatMultiYearView,\n    MatCalendarHeader,\n  ],\n  declarations: [\n    MatCalendar,\n    MatCalendarBody,\n    MatDatepicker,\n    MatDatepickerContent,\n    MatDatepickerInput,\n    MatDatepickerToggle,\n    MatDatepickerToggleIcon,\n    MatMonthView,\n    MatYearView,\n    MatMultiYearView,\n    MatCalendarHeader,\n  ],\n  providers: [\n    MatDatepickerIntl,\n    MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY_PROVIDER,\n  ],\n  entryComponents: [\n    MatDatepickerContent,\n    MatCalendarHeader,\n  ]\n})\nexport class MatDatepickerModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ChangeDetectionStrategy, Component, Input, ViewEncapsulation} from '@angular/core';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-divider',\n  host: {\n    'role': 'separator',\n    '[attr.aria-orientation]': 'vertical ? \"vertical\" : \"horizontal\"',\n    '[class.mat-divider-vertical]': 'vertical',\n    '[class.mat-divider-inset]': 'inset',\n    'class': 'mat-divider'\n  },\n  template: '',\n  styleUrls: ['divider.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatDivider {\n  /** Whether the divider is vertically aligned. */\n  @Input()\n  get vertical(): boolean { return this._vertical; }\n  set vertical(value: boolean) { this._vertical = coerceBooleanProperty(value); }\n  private _vertical: boolean = false;\n\n  /** Whether the divider is an inset divider. */\n  @Input()\n  get inset(): boolean { return this._inset; }\n  set inset(value: boolean) { this._inset = coerceBooleanProperty(value); }\n  private _inset: boolean = false;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatDivider} from './divider';\n\n\n@NgModule({\n  imports: [MatCommonModule, CommonModule],\n  exports: [MatDivider, MatCommonModule],\n  declarations: [MatDivider],\n})\nexport class MatDividerModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, Input} from '@angular/core';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {CdkAccordion} from '@angular/cdk/accordion';\n\n/** MatAccordion's display modes. */\nexport type MatAccordionDisplayMode = 'default' | 'flat';\n\n/**\n * Directive for a Material Design Accordion.\n */\n@Directive({\n  selector: 'mat-accordion',\n  exportAs: 'matAccordion',\n  host: {\n    class: 'mat-accordion'\n  }\n})\nexport class MatAccordion extends CdkAccordion {\n  /** Whether the expansion indicator should be hidden. */\n  @Input()\n  get hideToggle(): boolean { return this._hideToggle; }\n  set hideToggle(show: boolean) { this._hideToggle = coerceBooleanProperty(show); }\n  private _hideToggle: boolean = false;\n\n  /**\n   * The display mode used for all expansion panels in the accordion. Currently two display\n   * modes exist:\n   *  default - a gutter-like spacing is placed around any expanded panel, placing the expanded\n   *     panel at a different elevation from the reset of the accordion.\n   *  flat - no spacing is placed around expanded panels, showing all panels at the same\n   *     elevation.\n   */\n  @Input() displayMode: MatAccordionDisplayMode = 'default';\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, TemplateRef} from '@angular/core';\n\n/**\n * Expansion panel content that will be rendered lazily\n * after the panel is opened for the first time.\n */\n@Directive({\n  selector: 'ng-template[matExpansionPanelContent]'\n})\nexport class MatExpansionPanelContent {\n  constructor(public _template: TemplateRef<any>) {}\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {AnimationEvent} from '@angular/animations';\nimport {CdkAccordionItem} from '@angular/cdk/accordion';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {UniqueSelectionDispatcher} from '@angular/cdk/collections';\nimport {TemplatePortal} from '@angular/cdk/portal';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  Directive,\n  Input,\n  OnChanges,\n  OnDestroy,\n  Optional,\n  SimpleChanges,\n  SkipSelf,\n  ViewContainerRef,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {Subject} from 'rxjs';\nimport {filter, startWith, take} from 'rxjs/operators';\nimport {MatAccordion} from './accordion';\nimport {matExpansionAnimations} from './expansion-animations';\nimport {MatExpansionPanelContent} from './expansion-panel-content';\n\n\n/** MatExpansionPanel's states. */\nexport type MatExpansionPanelState = 'expanded' | 'collapsed';\n\n/** Counter for generating unique element ids. */\nlet uniqueId = 0;\n\n/**\n * `<mat-expansion-panel>`\n *\n * This component can be used as a single element to show expandable content, or as one of\n * multiple children of an element with the MatAccordion directive attached.\n */\n@Component({\n  moduleId: module.id,\n  styleUrls: ['./expansion-panel.css'],\n  selector: 'mat-expansion-panel',\n  exportAs: 'matExpansionPanel',\n  templateUrl: './expansion-panel.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  inputs: ['disabled', 'expanded'],\n  outputs: ['opened', 'closed', 'expandedChange'],\n  animations: [matExpansionAnimations.bodyExpansion],\n  providers: [\n    // Provide MatAccordion as undefined to prevent nested expansion panels from registering\n    // to the same accordion.\n    {provide: MatAccordion, useValue: undefined},\n  ],\n  host: {\n    'class': 'mat-expansion-panel',\n    '[class.mat-expanded]': 'expanded',\n    '[class.mat-expansion-panel-spacing]': '_hasSpacing()',\n  }\n})\nexport class MatExpansionPanel extends CdkAccordionItem\n    implements AfterContentInit, OnChanges, OnDestroy {\n  /** Whether the toggle indicator should be hidden. */\n  @Input()\n  get hideToggle(): boolean { return this._hideToggle; }\n  set hideToggle(value: boolean) {\n    this._hideToggle = coerceBooleanProperty(value);\n  }\n  private _hideToggle = false;\n\n  /** Stream that emits for changes in `@Input` properties. */\n  readonly _inputChanges = new Subject<SimpleChanges>();\n\n  /** Optionally defined accordion the expansion panel belongs to. */\n  accordion: MatAccordion;\n\n  /** Content that will be rendered lazily. */\n  @ContentChild(MatExpansionPanelContent) _lazyContent: MatExpansionPanelContent;\n\n  /** Portal holding the user's content. */\n  _portal: TemplatePortal;\n\n  /** ID for the associated header element. Used for a11y labelling. */\n  _headerId = `mat-expansion-panel-header-${uniqueId++}`;\n\n  constructor(@Optional() @SkipSelf() accordion: MatAccordion,\n              _changeDetectorRef: ChangeDetectorRef,\n              _uniqueSelectionDispatcher: UniqueSelectionDispatcher,\n              private _viewContainerRef: ViewContainerRef) {\n    super(accordion, _changeDetectorRef, _uniqueSelectionDispatcher);\n    this.accordion = accordion;\n  }\n\n  /** Whether the expansion indicator should be hidden. */\n  _getHideToggle(): boolean {\n    if (this.accordion) {\n      return this.accordion.hideToggle;\n    }\n    return this.hideToggle;\n  }\n\n  /** Determines whether the expansion panel should have spacing between it and its siblings. */\n  _hasSpacing(): boolean {\n    if (this.accordion) {\n      return (this.expanded ? this.accordion.displayMode : this._getExpandedState()) === 'default';\n    }\n    return false;\n  }\n\n  /** Gets the expanded state string. */\n  _getExpandedState(): MatExpansionPanelState {\n    return this.expanded ? 'expanded' : 'collapsed';\n  }\n\n  ngAfterContentInit() {\n    if (this._lazyContent) {\n      // Render the content as soon as the panel becomes open.\n      this.opened.pipe(\n        startWith(null!),\n        filter(() => this.expanded && !this._portal),\n        take(1)\n      ).subscribe(() => {\n        this._portal = new TemplatePortal(this._lazyContent._template, this._viewContainerRef);\n      });\n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    this._inputChanges.next(changes);\n  }\n\n  ngOnDestroy() {\n    super.ngOnDestroy();\n    this._inputChanges.complete();\n  }\n\n  _bodyAnimation(event: AnimationEvent) {\n    const classList = event.element.classList;\n    const cssClass = 'mat-expanded';\n    const {phaseName, toState} = event;\n\n    // Toggle the body's `overflow: hidden` class when closing starts or when expansion ends in\n    // order to prevent the cases where switching too early would cause the animation to jump.\n    // Note that we do it directly on the DOM element to avoid the slight delay that comes\n    // with doing it via change detection.\n    if (phaseName === 'done' && toState === 'expanded') {\n      classList.add(cssClass);\n    } else if (phaseName === 'start' && toState === 'collapsed') {\n      classList.remove(cssClass);\n    }\n  }\n}\n\n@Directive({\n  selector: 'mat-action-row',\n  host: {\n    class: 'mat-action-row'\n  }\n})\nexport class MatExpansionPanelActionRow {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor} from '@angular/cdk/a11y';\nimport {ENTER, SPACE} from '@angular/cdk/keycodes';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  Directive,\n  ElementRef,\n  Host,\n  Input,\n  OnDestroy,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {merge, Subscription} from 'rxjs';\nimport {filter} from 'rxjs/operators';\nimport {matExpansionAnimations} from './expansion-animations';\nimport {MatExpansionPanel} from './expansion-panel';\n\n\n/**\n * `<mat-expansion-panel-header>`\n *\n * This component corresponds to the header element of an `<mat-expansion-panel>`.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-expansion-panel-header',\n  styleUrls: ['./expansion-panel-header.css'],\n  templateUrl: './expansion-panel-header.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  animations: [\n    matExpansionAnimations.indicatorRotate,\n    matExpansionAnimations.expansionHeaderHeight\n  ],\n  host: {\n    'class': 'mat-expansion-panel-header',\n    'role': 'button',\n    '[attr.id]': 'panel._headerId',\n    '[attr.tabindex]': 'panel.disabled ? -1 : 0',\n    '[attr.aria-controls]': '_getPanelId()',\n    '[attr.aria-expanded]': '_isExpanded()',\n    '[attr.aria-disabled]': 'panel.disabled',\n    '[class.mat-expanded]': '_isExpanded()',\n    '(click)': '_toggle()',\n    '(keydown)': '_keydown($event)',\n    '[@expansionHeight]': `{\n        value: _getExpandedState(),\n        params: {\n          collapsedHeight: collapsedHeight,\n          expandedHeight: expandedHeight\n        }\n    }`,\n  },\n})\nexport class MatExpansionPanelHeader implements OnDestroy {\n  private _parentChangeSubscription = Subscription.EMPTY;\n\n  constructor(\n    @Host() public panel: MatExpansionPanel,\n    private _element: ElementRef,\n    private _focusMonitor: FocusMonitor,\n    private _changeDetectorRef: ChangeDetectorRef) {\n\n    // Since the toggle state depends on an @Input on the panel, we\n    // need to  subscribe and trigger change detection manually.\n    this._parentChangeSubscription = merge(\n      panel.opened,\n      panel.closed,\n      panel._inputChanges.pipe(filter(changes => !!(changes.hideToggle || changes.disabled)))\n    )\n    .subscribe(() => this._changeDetectorRef.markForCheck());\n\n    _focusMonitor.monitor(_element.nativeElement);\n  }\n\n  /** Height of the header while the panel is expanded. */\n  @Input() expandedHeight: string;\n\n  /** Height of the header while the panel is collapsed. */\n  @Input() collapsedHeight: string;\n\n  /** Toggles the expanded state of the panel. */\n  _toggle(): void {\n    this.panel.toggle();\n  }\n\n  /** Gets whether the panel is expanded. */\n  _isExpanded(): boolean {\n    return this.panel.expanded;\n  }\n\n  /** Gets the expanded state string of the panel. */\n  _getExpandedState(): string {\n    return this.panel._getExpandedState();\n  }\n\n  /** Gets the panel id. */\n  _getPanelId(): string {\n    return this.panel.id;\n  }\n\n  /** Gets whether the expand indicator should be shown. */\n  _showToggle(): boolean {\n    return !this.panel.hideToggle && !this.panel.disabled;\n  }\n\n  /** Handle keydown event calling to toggle() if appropriate. */\n  _keydown(event: KeyboardEvent) {\n    switch (event.keyCode) {\n      // Toggle for space and enter keys.\n      case SPACE:\n      case ENTER:\n        event.preventDefault();\n        this._toggle();\n        break;\n      default:\n        return;\n    }\n  }\n\n  ngOnDestroy() {\n    this._parentChangeSubscription.unsubscribe();\n    this._focusMonitor.stopMonitoring(this._element.nativeElement);\n  }\n}\n\n/**\n * `<mat-panel-description>`\n *\n * This directive is to be used inside of the MatExpansionPanelHeader component.\n */\n@Directive({\n  selector: 'mat-panel-description',\n  host : {\n    class: 'mat-expansion-panel-header-description'\n  }\n})\nexport class MatExpansionPanelDescription {}\n\n/**\n * `<mat-panel-title>`\n *\n * This directive is to be used inside of the MatExpansionPanelHeader component.\n */\n@Directive({\n  selector: 'mat-panel-title',\n  host : {\n    class: 'mat-expansion-panel-header-title'\n  }\n})\nexport class MatExpansionPanelTitle {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CdkAccordionModule} from '@angular/cdk/accordion';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatAccordion} from './accordion';\nimport {MatExpansionPanel, MatExpansionPanelActionRow} from './expansion-panel';\nimport {MatExpansionPanelContent} from './expansion-panel-content';\nimport {\n  MatExpansionPanelDescription,\n  MatExpansionPanelHeader,\n  MatExpansionPanelTitle,\n} from './expansion-panel-header';\n\n\n@NgModule({\n  imports: [CommonModule, CdkAccordionModule, PortalModule],\n  exports: [\n    MatAccordion,\n    MatExpansionPanel,\n    MatExpansionPanelActionRow,\n    MatExpansionPanelHeader,\n    MatExpansionPanelTitle,\n    MatExpansionPanelDescription,\n    MatExpansionPanelContent,\n  ],\n  declarations: [\n    MatAccordion,\n    MatExpansionPanel,\n    MatExpansionPanelActionRow,\n    MatExpansionPanelHeader,\n    MatExpansionPanelTitle,\n    MatExpansionPanelDescription,\n    MatExpansionPanelContent,\n  ],\n})\nexport class MatExpansionModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ViewEncapsulation,\n  ElementRef,\n  Input,\n  ContentChildren,\n  QueryList,\n  AfterContentInit,\n  Directive,\n  ChangeDetectionStrategy,\n} from '@angular/core';\nimport {MatLine, MatLineSetter} from '@angular/material/core';\nimport {coerceToNumber} from './grid-list-measure';\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-grid-tile',\n  exportAs: 'matGridTile',\n  host: {\n    'class': 'mat-grid-tile',\n  },\n  templateUrl: 'grid-tile.html',\n  styleUrls: ['grid-list.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatGridTile {\n  _rowspan: number = 1;\n  _colspan: number = 1;\n\n  constructor(private _element: ElementRef) {}\n\n  /** Amount of rows that the grid tile takes up. */\n  @Input()\n  get rowspan(): number { return this._rowspan; }\n  set rowspan(value: number) { this._rowspan = coerceToNumber(value); }\n\n  /** Amount of columns that the grid tile takes up. */\n  @Input()\n  get colspan(): number { return this._colspan; }\n  set colspan(value: number) { this._colspan = coerceToNumber(value); }\n\n  /**\n   * Sets the style of the grid-tile element.  Needs to be set manually to avoid\n   * \"Changed after checked\" errors that would occur with HostBinding.\n   */\n  _setStyle(property: string, value: any): void {\n    this._element.nativeElement.style[property] = value;\n  }\n}\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-grid-tile-header, mat-grid-tile-footer',\n  templateUrl: 'grid-tile-text.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatGridTileText implements AfterContentInit {\n  /**\n   *  Helper that watches the number of lines in a text area and sets\n   * a class on the host element that matches the line count.\n   */\n  _lineSetter: MatLineSetter;\n  @ContentChildren(MatLine) _lines: QueryList<MatLine>;\n\n  constructor(private _element: ElementRef) {}\n\n  ngAfterContentInit() {\n    this._lineSetter = new MatLineSetter(this._lines, this._element);\n  }\n}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-grid-avatar], [matGridAvatar]',\n  host: {'class': 'mat-grid-avatar'}\n})\nexport class MatGridAvatarCssMatStyler {}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-grid-tile-header',\n  host: {'class': 'mat-grid-tile-header'}\n})\nexport class MatGridTileHeaderCssMatStyler {}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-grid-tile-footer',\n  host: {'class': 'mat-grid-tile-footer'}\n})\nexport class MatGridTileFooterCssMatStyler {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {QueryList} from '@angular/core';\nimport {MatGridTile} from './grid-tile';\n\n/**\n * Class for determining, from a list of tiles, the (row, col) position of each of those tiles\n * in the grid. This is necessary (rather than just rendering the tiles in normal document flow)\n * because the tiles can have a rowspan.\n *\n * The positioning algorithm greedily places each tile as soon as it encounters a gap in the grid\n * large enough to accommodate it so that the tiles still render in the same order in which they\n * are given.\n *\n * The basis of the algorithm is the use of an array to track the already placed tiles. Each\n * element of the array corresponds to a column, and the value indicates how many cells in that\n * column are already occupied; zero indicates an empty cell. Moving \"down\" to the next row\n * decrements each value in the tracking array (indicating that the column is one cell closer to\n * being free).\n *\n * @docs-private\n */\nexport class TileCoordinator {\n  /** Tracking array (see class description). */\n  tracker: number[];\n\n  /** Index at which the search for the next gap will start. */\n  columnIndex: number = 0;\n\n  /** The current row index. */\n  rowIndex: number = 0;\n\n  /** Gets the total number of rows occupied by tiles */\n  get rowCount(): number { return this.rowIndex + 1; }\n\n  /**\n   * Gets the total span of rows occupied by tiles.\n   * Ex: A list with 1 row that contains a tile with rowspan 2 will have a total rowspan of 2.\n   */\n  get rowspan() {\n    let lastRowMax = Math.max(...this.tracker);\n    // if any of the tiles has a rowspan that pushes it beyond the total row count,\n    // add the difference to the rowcount\n    return lastRowMax > 1 ? this.rowCount + lastRowMax - 1 : this.rowCount;\n  }\n\n  /** The computed (row, col) position of each tile (the output). */\n  positions: TilePosition[];\n\n  constructor(numColumns: number, tiles: QueryList<MatGridTile>) {\n    this.tracker = new Array(numColumns);\n    this.tracker.fill(0, 0, this.tracker.length);\n\n    this.positions = tiles.map(tile => this._trackTile(tile));\n  }\n\n  /** Calculates the row and col position of a tile. */\n  private _trackTile(tile: MatGridTile): TilePosition {\n    // Find a gap large enough for this tile.\n    let gapStartIndex = this._findMatchingGap(tile.colspan);\n\n    // Place tile in the resulting gap.\n    this._markTilePosition(gapStartIndex, tile);\n\n    // The next time we look for a gap, the search will start at columnIndex, which should be\n    // immediately after the tile that has just been placed.\n    this.columnIndex = gapStartIndex + tile.colspan;\n\n    return new TilePosition(this.rowIndex, gapStartIndex);\n  }\n\n  /** Finds the next available space large enough to fit the tile. */\n  private _findMatchingGap(tileCols: number): number {\n    if (tileCols > this.tracker.length) {\n      throw Error(`mat-grid-list: tile with colspan ${tileCols} is wider than ` +\n                      `grid with cols=\"${this.tracker.length}\".`);\n    }\n\n    // Start index is inclusive, end index is exclusive.\n    let gapStartIndex = -1;\n    let gapEndIndex = -1;\n\n    // Look for a gap large enough to fit the given tile. Empty spaces are marked with a zero.\n    do {\n      // If we've reached the end of the row, go to the next row.\n      if (this.columnIndex + tileCols > this.tracker.length) {\n        this._nextRow();\n        continue;\n      }\n\n      gapStartIndex = this.tracker.indexOf(0, this.columnIndex);\n\n      // If there are no more empty spaces in this row at all, move on to the next row.\n      if (gapStartIndex == -1) {\n        this._nextRow();\n        continue;\n      }\n\n      gapEndIndex = this._findGapEndIndex(gapStartIndex);\n\n      // If a gap large enough isn't found, we want to start looking immediately after the current\n      // gap on the next iteration.\n      this.columnIndex = gapStartIndex + 1;\n\n      // Continue iterating until we find a gap wide enough for this tile.\n    } while (gapEndIndex - gapStartIndex < tileCols);\n\n    // If we still didn't manage to find a gap, ensure that the index is\n    // at least zero so the tile doesn't get pulled out of the grid.\n    return Math.max(gapStartIndex, 0);\n  }\n\n  /** Move \"down\" to the next row. */\n  private _nextRow(): void {\n    this.columnIndex = 0;\n    this.rowIndex++;\n\n    // Decrement all spaces by one to reflect moving down one row.\n    for (let i = 0; i < this.tracker.length; i++) {\n      this.tracker[i] = Math.max(0, this.tracker[i] - 1);\n    }\n  }\n\n  /**\n   * Finds the end index (exclusive) of a gap given the index from which to start looking.\n   * The gap ends when a non-zero value is found.\n   */\n  private _findGapEndIndex(gapStartIndex: number): number {\n    for (let i = gapStartIndex + 1; i < this.tracker.length; i++) {\n      if (this.tracker[i] != 0) {\n        return i;\n      }\n    }\n\n    // The gap ends with the end of the row.\n    return this.tracker.length;\n  }\n\n  /** Update the tile tracker to account for the given tile in the given space. */\n  private _markTilePosition(start: number, tile: MatGridTile): void {\n    for (let i = 0; i < tile.colspan; i++) {\n      this.tracker[start + i] = tile.rowspan;\n    }\n  }\n}\n\n/**\n * Simple data structure for tile position (row, col).\n * @docs-private\n */\nexport class TilePosition {\n  constructor(public row: number, public col: number) {}\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {MatGridList} from './grid-list';\nimport {MatGridTile} from './grid-tile';\nimport {TileCoordinator} from './tile-coordinator';\n\n/**\n * Sets the style properties for an individual tile, given the position calculated by the\n * Tile Coordinator.\n * @docs-private\n */\nexport abstract class TileStyler {\n  _gutterSize: string;\n  _rows: number = 0;\n  _rowspan: number = 0;\n  _cols: number;\n  _direction: string;\n\n  /**\n   * Adds grid-list layout info once it is available. Cannot be processed in the constructor\n   * because these properties haven't been calculated by that point.\n   *\n   * @param gutterSize Size of the grid's gutter.\n   * @param tracker Instance of the TileCoordinator.\n   * @param cols Amount of columns in the grid.\n   * @param direction Layout direction of the grid.\n   */\n  init(gutterSize: string, tracker: TileCoordinator, cols: number, direction: string): void {\n    this._gutterSize = normalizeUnits(gutterSize);\n    this._rows = tracker.rowCount;\n    this._rowspan = tracker.rowspan;\n    this._cols = cols;\n    this._direction = direction;\n  }\n\n  /**\n   * Computes the amount of space a single 1x1 tile would take up (width or height).\n   * Used as a basis for other calculations.\n   * @param sizePercent Percent of the total grid-list space that one 1x1 tile would take up.\n   * @param gutterFraction Fraction of the gutter size taken up by one 1x1 tile.\n   * @return The size of a 1x1 tile as an expression that can be evaluated via CSS calc().\n   */\n  getBaseTileSize(sizePercent: number, gutterFraction: number): string {\n    // Take the base size percent (as would be if evenly dividing the size between cells),\n    // and then subtracting the size of one gutter. However, since there are no gutters on the\n    // edges, each tile only uses a fraction (gutterShare = numGutters / numCells) of the gutter\n    // size. (Imagine having one gutter per tile, and then breaking up the extra gutter on the\n    // edge evenly among the cells).\n    return `(${sizePercent}% - (${this._gutterSize} * ${gutterFraction}))`;\n  }\n\n\n  /**\n   * Gets The horizontal or vertical position of a tile, e.g., the 'top' or 'left' property value.\n   * @param offset Number of tiles that have already been rendered in the row/column.\n   * @param baseSize Base size of a 1x1 tile (as computed in getBaseTileSize).\n   * @return Position of the tile as a CSS calc() expression.\n   */\n  getTilePosition(baseSize: string, offset: number): string {\n    // The position comes the size of a 1x1 tile plus gutter for each previous tile in the\n    // row/column (offset).\n    return offset === 0 ? '0' : calc(`(${baseSize} + ${this._gutterSize}) * ${offset}`);\n  }\n\n\n  /**\n   * Gets the actual size of a tile, e.g., width or height, taking rowspan or colspan into account.\n   * @param baseSize Base size of a 1x1 tile (as computed in getBaseTileSize).\n   * @param span The tile's rowspan or colspan.\n   * @return Size of the tile as a CSS calc() expression.\n   */\n  getTileSize(baseSize: string, span: number): string {\n    return `(${baseSize} * ${span}) + (${span - 1} * ${this._gutterSize})`;\n  }\n\n\n  /**\n   * Sets the style properties to be applied to a tile for the given row and column index.\n   * @param tile Tile to which to apply the styling.\n   * @param rowIndex Index of the tile's row.\n   * @param colIndex Index of the tile's column.\n   */\n  setStyle(tile: MatGridTile, rowIndex: number, colIndex: number): void {\n    // Percent of the available horizontal space that one column takes up.\n    let percentWidthPerTile = 100 / this._cols;\n\n    // Fraction of the vertical gutter size that each column takes up.\n    // For example, if there are 5 columns, each column uses 4/5 = 0.8 times the gutter width.\n    let gutterWidthFractionPerTile = (this._cols - 1) / this._cols;\n\n    this.setColStyles(tile, colIndex, percentWidthPerTile, gutterWidthFractionPerTile);\n    this.setRowStyles(tile, rowIndex, percentWidthPerTile, gutterWidthFractionPerTile);\n  }\n\n  /** Sets the horizontal placement of the tile in the list. */\n  setColStyles(tile: MatGridTile, colIndex: number, percentWidth: number,\n               gutterWidth: number) {\n    // Base horizontal size of a column.\n    let baseTileWidth = this.getBaseTileSize(percentWidth, gutterWidth);\n\n    // The width and horizontal position of each tile is always calculated the same way, but the\n    // height and vertical position depends on the rowMode.\n    let side = this._direction === 'rtl' ? 'right' : 'left';\n    tile._setStyle(side, this.getTilePosition(baseTileWidth, colIndex));\n    tile._setStyle('width', calc(this.getTileSize(baseTileWidth, tile.colspan)));\n  }\n\n  /**\n   * Calculates the total size taken up by gutters across one axis of a list.\n   */\n  getGutterSpan(): string {\n    return `${this._gutterSize} * (${this._rowspan} - 1)`;\n  }\n\n  /**\n   * Calculates the total size taken up by tiles across one axis of a list.\n   * @param tileHeight Height of the tile.\n   */\n  getTileSpan(tileHeight: string): string {\n    return `${this._rowspan} * ${this.getTileSize(tileHeight, 1)}`;\n  }\n\n  /**\n   * Sets the vertical placement of the tile in the list.\n   * This method will be implemented by each type of TileStyler.\n   * @docs-private\n   */\n  abstract setRowStyles(tile: MatGridTile, rowIndex: number, percentWidth: number,\n                        gutterWidth: number);\n\n  /**\n   * Calculates the computed height and returns the correct style property to set.\n   * This method can be implemented by each type of TileStyler.\n   * @docs-private\n   */\n  getComputedHeight(): [string, string] | null { return null; }\n\n  /**\n   * Called when the tile styler is swapped out with a different one. To be used for cleanup.\n   * @param list Grid list that the styler was attached to.\n   * @docs-private\n   */\n  abstract reset(list: MatGridList);\n}\n\n\n/**\n * This type of styler is instantiated when the user passes in a fixed row height.\n * Example `<mat-grid-list cols=\"3\" rowHeight=\"100px\">`\n * @docs-private\n */\nexport class FixedTileStyler extends TileStyler {\n\n  constructor(public fixedRowHeight: string) { super(); }\n\n  init(gutterSize: string, tracker: TileCoordinator, cols: number, direction: string) {\n    super.init(gutterSize, tracker, cols, direction);\n    this.fixedRowHeight = normalizeUnits(this.fixedRowHeight);\n  }\n\n  setRowStyles(tile: MatGridTile, rowIndex: number): void {\n    tile._setStyle('top', this.getTilePosition(this.fixedRowHeight, rowIndex));\n    tile._setStyle('height', calc(this.getTileSize(this.fixedRowHeight, tile.rowspan)));\n  }\n\n  getComputedHeight(): [string, string] {\n    return [\n      'height', calc(`${this.getTileSpan(this.fixedRowHeight)} + ${this.getGutterSpan()}`)\n    ];\n  }\n\n  reset(list: MatGridList) {\n    list._setListStyle(['height', null]);\n\n    list._tiles.forEach(tile => {\n      tile._setStyle('top', null);\n      tile._setStyle('height', null);\n    });\n  }\n}\n\n\n/**\n * This type of styler is instantiated when the user passes in a width:height ratio\n * for the row height.  Example `<mat-grid-list cols=\"3\" rowHeight=\"3:1\">`\n * @docs-private\n */\nexport class RatioTileStyler extends TileStyler {\n\n  /** Ratio width:height given by user to determine row height. */\n  rowHeightRatio: number;\n  baseTileHeight: string;\n\n  constructor(value: string) {\n    super();\n    this._parseRatio(value);\n  }\n\n  setRowStyles(tile: MatGridTile, rowIndex: number, percentWidth: number,\n               gutterWidth: number): void {\n    let percentHeightPerTile = percentWidth / this.rowHeightRatio;\n    this.baseTileHeight = this.getBaseTileSize(percentHeightPerTile, gutterWidth);\n\n    // Use padding-top and margin-top to maintain the given aspect ratio, as\n    // a percentage-based value for these properties is applied versus the *width* of the\n    // containing block. See http://www.w3.org/TR/CSS2/box.html#margin-properties\n    tile._setStyle('marginTop', this.getTilePosition(this.baseTileHeight, rowIndex));\n    tile._setStyle('paddingTop', calc(this.getTileSize(this.baseTileHeight, tile.rowspan)));\n  }\n\n  getComputedHeight(): [string, string] {\n    return [\n      'paddingBottom', calc(`${this.getTileSpan(this.baseTileHeight)} + ${this.getGutterSpan()}`)\n    ];\n  }\n\n  reset(list: MatGridList) {\n    list._setListStyle(['paddingBottom', null]);\n\n    list._tiles.forEach(tile => {\n      tile._setStyle('marginTop', null);\n      tile._setStyle('paddingTop', null);\n    });\n  }\n\n  private _parseRatio(value: string): void {\n    const ratioParts = value.split(':');\n\n    if (ratioParts.length !== 2) {\n      throw Error(`mat-grid-list: invalid ratio given for row-height: \"${value}\"`);\n    }\n\n    this.rowHeightRatio = parseFloat(ratioParts[0]) / parseFloat(ratioParts[1]);\n  }\n}\n\n/**\n * This type of styler is instantiated when the user selects a \"fit\" row height mode.\n * In other words, the row height will reflect the total height of the container divided\n * by the number of rows.  Example `<mat-grid-list cols=\"3\" rowHeight=\"fit\">`\n *\n * @docs-private\n */\nexport class FitTileStyler extends TileStyler {\n\n  setRowStyles(tile: MatGridTile, rowIndex: number): void {\n    // Percent of the available vertical space that one row takes up.\n    let percentHeightPerTile = 100 / this._rowspan;\n\n    // Fraction of the horizontal gutter size that each column takes up.\n    let gutterHeightPerTile = (this._rows - 1) / this._rows;\n\n    // Base vertical size of a column.\n    let baseTileHeight = this.getBaseTileSize(percentHeightPerTile, gutterHeightPerTile);\n\n    tile._setStyle('top', this.getTilePosition(baseTileHeight, rowIndex));\n    tile._setStyle('height', calc(this.getTileSize(baseTileHeight, tile.rowspan)));\n  }\n\n  reset(list: MatGridList) {\n    list._tiles.forEach(tile => {\n      tile._setStyle('top', null);\n      tile._setStyle('height', null);\n    });\n  }\n}\n\n\n/** Wraps a CSS string in a calc function */\nfunction calc(exp: string): string { return `calc(${exp})`; }\n\n\n/** Appends pixels to a CSS string if no units are given. */\nfunction normalizeUnits(value: string): string {\n  return (value.match(/px|em|rem/)) ? value : value + 'px';\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ViewEncapsulation,\n  AfterContentChecked,\n  OnInit,\n  Input,\n  ContentChildren,\n  QueryList,\n  ElementRef,\n  Optional,\n  ChangeDetectionStrategy,\n} from '@angular/core';\nimport {MatGridTile} from './grid-tile';\nimport {TileCoordinator} from './tile-coordinator';\nimport {TileStyler, FitTileStyler, RatioTileStyler, FixedTileStyler} from './tile-styler';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {\n  coerceToString,\n  coerceToNumber,\n} from './grid-list-measure';\n\n\n// TODO(kara): Conditional (responsive) column count / row size.\n// TODO(kara): Re-layout on window resize / media change (debounced).\n// TODO(kara): gridTileHeader and gridTileFooter.\n\nconst MAT_FIT_MODE = 'fit';\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-grid-list',\n  exportAs: 'matGridList',\n  templateUrl: 'grid-list.html',\n  styleUrls: ['grid-list.css'],\n  host: {\n    'class': 'mat-grid-list',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatGridList implements OnInit, AfterContentChecked {\n  /** Number of columns being rendered. */\n  private _cols: number;\n\n  /**\n   * Row height value passed in by user. This can be one of three types:\n   * - Number value (ex: \"100px\"):  sets a fixed row height to that value\n   * - Ratio value (ex: \"4:3\"): sets the row height based on width:height ratio\n   * - \"Fit\" mode (ex: \"fit\"): sets the row height to total height divided by number of rows\n   */\n  private _rowHeight: string;\n\n  /** The amount of space between tiles. This will be something like '5px' or '2em'. */\n  private _gutter: string = '1px';\n\n  /** Sets position and size styles for a tile */\n  private _tileStyler: TileStyler;\n\n  /** Query list of tiles that are being rendered. */\n  @ContentChildren(MatGridTile) _tiles: QueryList<MatGridTile>;\n\n  constructor(private _element: ElementRef, @Optional() private _dir: Directionality) {}\n\n  /** Amount of columns in the grid list. */\n  @Input()\n  get cols(): number { return this._cols; }\n  set cols(value: number) { this._cols = coerceToNumber(value); }\n\n  /** Size of the grid list's gutter in pixels. */\n  @Input()\n  get gutterSize(): string { return this._gutter; }\n  set gutterSize(value: string) { this._gutter = coerceToString(value); }\n\n  /** Set internal representation of row height from the user-provided value. */\n  @Input()\n  set rowHeight(value: string | number) {\n    const newValue = coerceToString(value);\n\n    if (newValue !== this._rowHeight) {\n      this._rowHeight = newValue;\n      this._setTileStyler(this._rowHeight);\n    }\n  }\n\n  ngOnInit() {\n    this._checkCols();\n    this._checkRowHeight();\n  }\n\n  /**\n   * The layout calculation is fairly cheap if nothing changes, so there's little cost\n   * to run it frequently.\n   */\n  ngAfterContentChecked() {\n    this._layoutTiles();\n  }\n\n  /** Throw a friendly error if cols property is missing */\n  private _checkCols() {\n    if (!this.cols) {\n      throw Error(`mat-grid-list: must pass in number of columns. ` +\n                  `Example: <mat-grid-list cols=\"3\">`);\n    }\n  }\n\n  /** Default to equal width:height if rowHeight property is missing */\n  private _checkRowHeight(): void {\n    if (!this._rowHeight) {\n      this._setTileStyler('1:1');\n    }\n  }\n\n  /** Creates correct Tile Styler subtype based on rowHeight passed in by user */\n  private _setTileStyler(rowHeight: string): void {\n    if (this._tileStyler) {\n      this._tileStyler.reset(this);\n    }\n\n    if (rowHeight === MAT_FIT_MODE) {\n      this._tileStyler = new FitTileStyler();\n    } else if (rowHeight && rowHeight.indexOf(':') > -1) {\n      this._tileStyler = new RatioTileStyler(rowHeight);\n    } else {\n      this._tileStyler = new FixedTileStyler(rowHeight);\n    }\n  }\n\n  /** Computes and applies the size and position for all children grid tiles. */\n  private _layoutTiles(): void {\n    const tracker = new TileCoordinator(this.cols, this._tiles);\n    const direction = this._dir ? this._dir.value : 'ltr';\n    this._tileStyler.init(this.gutterSize, tracker, this.cols, direction);\n\n    this._tiles.forEach((tile, index) => {\n      const pos = tracker.positions[index];\n      this._tileStyler.setStyle(tile, pos.row, pos.col);\n    });\n\n    this._setListStyle(this._tileStyler.getComputedHeight());\n  }\n\n  /** Sets style on the main grid-list element, given the style name and value. */\n  _setListStyle(style: [string, string | null] | null): void {\n    if (style) {\n      this._element.nativeElement.style[style[0]] = style[1];\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatLineModule, MatCommonModule} from '@angular/material/core';\nimport {\n  MatGridTile, MatGridTileText, MatGridTileFooterCssMatStyler,\n  MatGridTileHeaderCssMatStyler, MatGridAvatarCssMatStyler\n} from './grid-tile';\nimport {MatGridList} from './grid-list';\n\n\n@NgModule({\n  imports: [MatLineModule, MatCommonModule],\n  exports: [\n    MatGridList,\n    MatGridTile,\n    MatGridTileText,\n    MatLineModule,\n    MatCommonModule,\n    MatGridTileHeaderCssMatStyler,\n    MatGridTileFooterCssMatStyler,\n    MatGridAvatarCssMatStyler\n  ],\n  declarations: [\n    MatGridList,\n    MatGridTile,\n    MatGridTileText,\n    MatGridTileHeaderCssMatStyler,\n    MatGridTileFooterCssMatStyler,\n    MatGridAvatarCssMatStyler\n  ],\n})\nexport class MatGridListModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  DOWN_ARROW,\n  END,\n  ENTER,\n  HOME,\n  LEFT_ARROW,\n  PAGE_DOWN,\n  PAGE_UP,\n  RIGHT_ARROW,\n  UP_ARROW,\n} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  EventEmitter,\n  Input,\n  Optional,\n  Output,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {DateAdapter} from '@angular/material/core';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {MatCalendarBody, MatCalendarCell} from './calendar-body';\nimport {createMissingDateImplError} from './datepicker-errors';\n\nexport const yearsPerPage = 24;\n\nexport const yearsPerRow = 4;\n\n\n/**\n * An internal component used to display a year selector in the datepicker.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-multi-year-view',\n  templateUrl: 'multi-year-view.html',\n  exportAs: 'matMultiYearView',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class MatMultiYearView<D> implements AfterContentInit {\n  /** The date to display in this multi-year view (everything other than the year is ignored). */\n  @Input()\n  get activeDate(): D { return this._activeDate; }\n  set activeDate(value: D) {\n    let oldActiveDate = this._activeDate;\n    const validDate =\n        this._getValidDateOrNull(this._dateAdapter.deserialize(value)) || this._dateAdapter.today();\n    this._activeDate = this._dateAdapter.clampDate(validDate, this.minDate, this.maxDate);\n    if (Math.floor(this._dateAdapter.getYear(oldActiveDate) / yearsPerPage) !=\n        Math.floor(this._dateAdapter.getYear(this._activeDate) / yearsPerPage)) {\n      this._init();\n    }\n  }\n  private _activeDate: D;\n\n  /** The currently selected date. */\n  @Input()\n  get selected(): D | null { return this._selected; }\n  set selected(value: D | null) {\n    this._selected = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n    this._selectedYear = this._selected && this._dateAdapter.getYear(this._selected);\n  }\n  private _selected: D | null;\n\n  /** The minimum selectable date. */\n  @Input()\n  get minDate(): D | null { return this._minDate; }\n  set minDate(value: D | null) {\n    this._minDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _minDate: D | null;\n\n  /** The maximum selectable date. */\n  @Input()\n  get maxDate(): D | null { return this._maxDate; }\n  set maxDate(value: D | null) {\n    this._maxDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _maxDate: D | null;\n\n  /** A function used to filter which dates are selectable. */\n  @Input() dateFilter: (date: D) => boolean;\n\n  /** Emits when a new year is selected. */\n  @Output() readonly selectedChange: EventEmitter<D> = new EventEmitter<D>();\n\n  /** Emits the selected year. This doesn't imply a change on the selected date */\n  @Output() readonly yearSelected: EventEmitter<D> = new EventEmitter<D>();\n\n  /** The body of calendar table */\n  @ViewChild(MatCalendarBody) _matCalendarBody: MatCalendarBody;\n\n  /** Grid of calendar cells representing the currently displayed years. */\n  _years: MatCalendarCell[][];\n\n  /** The year that today falls on. */\n  _todayYear: number;\n\n  /** The year of the selected date. Null if the selected date is null. */\n  _selectedYear: number | null;\n\n  constructor(private _changeDetectorRef: ChangeDetectorRef,\n              @Optional() public _dateAdapter: DateAdapter<D>,\n              @Optional() private _dir?: Directionality) {\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n\n    this._activeDate = this._dateAdapter.today();\n  }\n\n  ngAfterContentInit() {\n    this._init();\n  }\n\n  /** Initializes this multi-year view. */\n  _init() {\n    this._todayYear = this._dateAdapter.getYear(this._dateAdapter.today());\n    let activeYear = this._dateAdapter.getYear(this._activeDate);\n    let activeOffset = activeYear % yearsPerPage;\n    this._years = [];\n    for (let i = 0, row: number[] = []; i < yearsPerPage; i++) {\n      row.push(activeYear - activeOffset + i);\n      if (row.length == yearsPerRow) {\n        this._years.push(row.map(year => this._createCellForYear(year)));\n        row = [];\n      }\n    }\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Handles when a new year is selected. */\n  _yearSelected(year: number) {\n    this.yearSelected.emit(this._dateAdapter.createDate(year, 0, 1));\n    let month = this._dateAdapter.getMonth(this.activeDate);\n    let daysInMonth =\n        this._dateAdapter.getNumDaysInMonth(this._dateAdapter.createDate(year, month, 1));\n    this.selectedChange.emit(this._dateAdapter.createDate(year, month,\n        Math.min(this._dateAdapter.getDate(this.activeDate), daysInMonth)));\n  }\n\n  /** Handles keydown events on the calendar body when calendar is in multi-year view. */\n  _handleCalendarBodyKeydown(event: KeyboardEvent): void {\n    // TODO(mmalerba): We currently allow keyboard navigation to disabled dates, but just prevent\n    // disabled ones from being selected. This may not be ideal, we should look into whether\n    // navigation should skip over disabled dates, and if so, how to implement that efficiently.\n\n    const isRtl = this._isRtl();\n\n    switch (event.keyCode) {\n      case LEFT_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate, isRtl ? 1 : -1);\n        break;\n      case RIGHT_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate, isRtl ? -1 : 1);\n        break;\n      case UP_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate, -yearsPerRow);\n        break;\n      case DOWN_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate, yearsPerRow);\n        break;\n      case HOME:\n        this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate,\n            -this._dateAdapter.getYear(this._activeDate) % yearsPerPage);\n        break;\n      case END:\n        this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate,\n            yearsPerPage - this._dateAdapter.getYear(this._activeDate) % yearsPerPage - 1);\n        break;\n      case PAGE_UP:\n        this.activeDate =\n            this._dateAdapter.addCalendarYears(\n                this._activeDate, event.altKey ? -yearsPerPage * 10 : -yearsPerPage);\n        break;\n      case PAGE_DOWN:\n        this.activeDate =\n            this._dateAdapter.addCalendarYears(\n                this._activeDate, event.altKey ? yearsPerPage * 10 : yearsPerPage);\n        break;\n      case ENTER:\n        this._yearSelected(this._dateAdapter.getYear(this._activeDate));\n        break;\n      default:\n        // Don't prevent default or focus active cell on keys that we don't explicitly handle.\n        return;\n    }\n\n    this._focusActiveCell();\n    // Prevent unexpected default actions such as form submission.\n    event.preventDefault();\n  }\n\n  _getActiveCell(): number {\n    return this._dateAdapter.getYear(this.activeDate) % yearsPerPage;\n  }\n\n  /** Focuses the active cell after the microtask queue is empty. */\n  _focusActiveCell() {\n    this._matCalendarBody._focusActiveCell();\n  }\n\n  /** Creates an MatCalendarCell for the given year. */\n  private _createCellForYear(year: number) {\n    let yearName = this._dateAdapter.getYearName(this._dateAdapter.createDate(year, 0, 1));\n    return new MatCalendarCell(year, yearName, yearName, this._shouldEnableYear(year));\n  }\n\n  /** Whether the given year is enabled. */\n  private _shouldEnableYear(year: number) {\n    // disable if the year is greater than maxDate lower than minDate\n    if (year === undefined || year === null ||\n        (this.maxDate && year > this._dateAdapter.getYear(this.maxDate)) ||\n        (this.minDate && year < this._dateAdapter.getYear(this.minDate))) {\n      return false;\n    }\n\n    // enable if it reaches here and there's no filter defined\n    if (!this.dateFilter) {\n      return true;\n    }\n\n    const firstOfYear = this._dateAdapter.createDate(year, 0, 1);\n\n    // If any date in the year is enabled count the year as enabled.\n    for (let date = firstOfYear; this._dateAdapter.getYear(date) == year;\n      date = this._dateAdapter.addCalendarDays(date, 1)) {\n      if (this.dateFilter(date)) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n\n  /** Determines whether the user has the RTL layout direction. */\n  private _isRtl() {\n    return this._dir && this._dir.value === 'rtl';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  DOWN_ARROW,\n  END,\n  ENTER,\n  HOME,\n  LEFT_ARROW,\n  PAGE_DOWN,\n  PAGE_UP,\n  RIGHT_ARROW,\n  UP_ARROW,\n} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  EventEmitter,\n  Inject,\n  Input,\n  Optional,\n  Output,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {DateAdapter, MAT_DATE_FORMATS, MatDateFormats} from '@angular/material/core';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {MatCalendarBody, MatCalendarCell} from './calendar-body';\nimport {createMissingDateImplError} from './datepicker-errors';\n\n/**\n * An internal component used to display a single year in the datepicker.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-year-view',\n  templateUrl: 'year-view.html',\n  exportAs: 'matYearView',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class MatYearView<D> implements AfterContentInit {\n  /** The date to display in this year view (everything other than the year is ignored). */\n  @Input()\n  get activeDate(): D { return this._activeDate; }\n  set activeDate(value: D) {\n    let oldActiveDate = this._activeDate;\n    const validDate =\n        this._getValidDateOrNull(this._dateAdapter.deserialize(value)) || this._dateAdapter.today();\n    this._activeDate = this._dateAdapter.clampDate(validDate, this.minDate, this.maxDate);\n    if (this._dateAdapter.getYear(oldActiveDate) !== this._dateAdapter.getYear(this._activeDate)) {\n      this._init();\n    }\n  }\n  private _activeDate: D;\n\n  /** The currently selected date. */\n  @Input()\n  get selected(): D | null { return this._selected; }\n  set selected(value: D | null) {\n    this._selected = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n    this._selectedMonth = this._getMonthInCurrentYear(this._selected);\n  }\n  private _selected: D | null;\n\n  /** The minimum selectable date. */\n  @Input()\n  get minDate(): D | null { return this._minDate; }\n  set minDate(value: D | null) {\n    this._minDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _minDate: D | null;\n\n  /** The maximum selectable date. */\n  @Input()\n  get maxDate(): D | null { return this._maxDate; }\n  set maxDate(value: D | null) {\n    this._maxDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _maxDate: D | null;\n\n  /** A function used to filter which dates are selectable. */\n  @Input() dateFilter: (date: D) => boolean;\n\n  /** Emits when a new month is selected. */\n  @Output() readonly selectedChange: EventEmitter<D> = new EventEmitter<D>();\n\n  /** Emits the selected month. This doesn't imply a change on the selected date */\n  @Output() readonly monthSelected: EventEmitter<D> = new EventEmitter<D>();\n\n  /** The body of calendar table */\n  @ViewChild(MatCalendarBody) _matCalendarBody: MatCalendarBody;\n\n  /** Grid of calendar cells representing the months of the year. */\n  _months: MatCalendarCell[][];\n\n  /** The label for this year (e.g. \"2017\"). */\n  _yearLabel: string;\n\n  /** The month in this year that today falls on. Null if today is in a different year. */\n  _todayMonth: number | null;\n\n  /**\n   * The month in this year that the selected Date falls on.\n   * Null if the selected Date is in a different year.\n   */\n  _selectedMonth: number | null;\n\n  constructor(private _changeDetectorRef: ChangeDetectorRef,\n              @Optional() @Inject(MAT_DATE_FORMATS) private _dateFormats: MatDateFormats,\n              @Optional() public _dateAdapter: DateAdapter<D>,\n              @Optional() private _dir?: Directionality) {\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n    if (!this._dateFormats) {\n      throw createMissingDateImplError('MAT_DATE_FORMATS');\n    }\n\n    this._activeDate = this._dateAdapter.today();\n  }\n\n  ngAfterContentInit() {\n    this._init();\n  }\n\n  /** Handles when a new month is selected. */\n  _monthSelected(month: number) {\n    const normalizedDate =\n          this._dateAdapter.createDate(this._dateAdapter.getYear(this.activeDate), month, 1);\n\n    this.monthSelected.emit(normalizedDate);\n\n    const daysInMonth = this._dateAdapter.getNumDaysInMonth(normalizedDate);\n\n    this.selectedChange.emit(this._dateAdapter.createDate(\n        this._dateAdapter.getYear(this.activeDate), month,\n        Math.min(this._dateAdapter.getDate(this.activeDate), daysInMonth)));\n  }\n\n  /** Handles keydown events on the calendar body when calendar is in year view. */\n  _handleCalendarBodyKeydown(event: KeyboardEvent): void {\n    // TODO(mmalerba): We currently allow keyboard navigation to disabled dates, but just prevent\n    // disabled ones from being selected. This may not be ideal, we should look into whether\n    // navigation should skip over disabled dates, and if so, how to implement that efficiently.\n\n    const isRtl = this._isRtl();\n\n    switch (event.keyCode) {\n      case LEFT_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate, isRtl ? 1 : -1);\n        break;\n      case RIGHT_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate, isRtl ? -1 : 1);\n        break;\n      case UP_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate, -4);\n        break;\n      case DOWN_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate, 4);\n        break;\n      case HOME:\n        this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate,\n            -this._dateAdapter.getMonth(this._activeDate));\n        break;\n      case END:\n        this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate,\n            11 - this._dateAdapter.getMonth(this._activeDate));\n        break;\n      case PAGE_UP:\n        this.activeDate =\n            this._dateAdapter.addCalendarYears(this._activeDate, event.altKey ? -10 : -1);\n        break;\n      case PAGE_DOWN:\n        this.activeDate =\n            this._dateAdapter.addCalendarYears(this._activeDate, event.altKey ? 10 : 1);\n        break;\n      case ENTER:\n        this._monthSelected(this._dateAdapter.getMonth(this._activeDate));\n        break;\n      default:\n        // Don't prevent default or focus active cell on keys that we don't explicitly handle.\n        return;\n    }\n\n    this._focusActiveCell();\n    // Prevent unexpected default actions such as form submission.\n    event.preventDefault();\n  }\n\n  /** Initializes this year view. */\n  _init() {\n    this._selectedMonth = this._getMonthInCurrentYear(this.selected);\n    this._todayMonth = this._getMonthInCurrentYear(this._dateAdapter.today());\n    this._yearLabel = this._dateAdapter.getYearName(this.activeDate);\n\n    let monthNames = this._dateAdapter.getMonthNames('short');\n    // First row of months only contains 5 elements so we can fit the year label on the same row.\n    this._months = [[0, 1, 2, 3], [4, 5, 6, 7], [8, 9, 10, 11]].map(row => row.map(\n        month => this._createCellForMonth(month, monthNames[month])));\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Focuses the active cell after the microtask queue is empty. */\n  _focusActiveCell() {\n    this._matCalendarBody._focusActiveCell();\n  }\n\n  /**\n   * Gets the month in this year that the given Date falls on.\n   * Returns null if the given Date is in another year.\n   */\n  private _getMonthInCurrentYear(date: D | null) {\n    return date && this._dateAdapter.getYear(date) == this._dateAdapter.getYear(this.activeDate) ?\n        this._dateAdapter.getMonth(date) : null;\n  }\n\n  /** Creates an MatCalendarCell for the given month. */\n  private _createCellForMonth(month: number, monthName: string) {\n    let ariaLabel = this._dateAdapter.format(\n        this._dateAdapter.createDate(this._dateAdapter.getYear(this.activeDate), month, 1),\n        this._dateFormats.display.monthYearA11yLabel);\n    return new MatCalendarCell(\n        month, monthName.toLocaleUpperCase(), ariaLabel, this._shouldEnableMonth(month));\n  }\n\n  /** Whether the given month is enabled. */\n  private _shouldEnableMonth(month: number) {\n\n    const activeYear = this._dateAdapter.getYear(this.activeDate);\n\n    if (month === undefined || month === null ||\n        this._isYearAndMonthAfterMaxDate(activeYear, month) ||\n        this._isYearAndMonthBeforeMinDate(activeYear, month)) {\n      return false;\n    }\n\n    if (!this.dateFilter) {\n      return true;\n    }\n\n    const firstOfMonth = this._dateAdapter.createDate(activeYear, month, 1);\n\n    // If any date in the month is enabled count the month as enabled.\n    for (let date = firstOfMonth; this._dateAdapter.getMonth(date) == month;\n         date = this._dateAdapter.addCalendarDays(date, 1)) {\n      if (this.dateFilter(date)) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  /**\n   * Tests whether the combination month/year is after this.maxDate, considering\n   * just the month and year of this.maxDate\n   */\n  private _isYearAndMonthAfterMaxDate(year: number, month: number) {\n    if (this.maxDate) {\n      const maxYear = this._dateAdapter.getYear(this.maxDate);\n      const maxMonth = this._dateAdapter.getMonth(this.maxDate);\n\n      return year > maxYear || (year === maxYear && month > maxMonth);\n    }\n\n    return false;\n  }\n\n  /**\n   * Tests whether the combination month/year is before this.minDate, considering\n   * just the month and year of this.minDate\n   */\n  private _isYearAndMonthBeforeMinDate(year: number, month: number) {\n    if (this.minDate) {\n      const minYear = this._dateAdapter.getYear(this.minDate);\n      const minMonth = this._dateAdapter.getMonth(this.minDate);\n\n      return year < minYear || (year === minYear && month < minMonth);\n    }\n\n    return false;\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n\n  /** Determines whether the user has the RTL layout direction. */\n  private _isRtl() {\n    return this._dir && this._dir.value === 'rtl';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ComponentPortal, ComponentType, Portal} from '@angular/cdk/portal';\nimport {\n  AfterContentInit,\n  AfterViewChecked,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  OnChanges,\n  OnDestroy,\n  Optional,\n  Output,\n  SimpleChanges,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {DateAdapter, MAT_DATE_FORMATS, MatDateFormats} from '@angular/material/core';\nimport {Subject, Subscription} from 'rxjs';\nimport {createMissingDateImplError} from './datepicker-errors';\nimport {MatDatepickerIntl} from './datepicker-intl';\nimport {MatMonthView} from './month-view';\nimport {MatMultiYearView, yearsPerPage} from './multi-year-view';\nimport {MatYearView} from './year-view';\n\n/**\n * Possible views for the calendar.\n * @docs-private\n */\nexport type MatCalendarView = 'month' | 'year' | 'multi-year';\n\n/** Default header for MatCalendar */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-calendar-header',\n  templateUrl: 'calendar-header.html',\n  exportAs: 'matCalendarHeader',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatCalendarHeader<D> {\n  constructor(private _intl: MatDatepickerIntl,\n              @Inject(forwardRef(() => MatCalendar)) public calendar: MatCalendar<D>,\n              @Optional() private _dateAdapter: DateAdapter<D>,\n              @Optional() @Inject(MAT_DATE_FORMATS) private _dateFormats: MatDateFormats,\n              changeDetectorRef: ChangeDetectorRef) {\n\n    this.calendar.stateChanges.subscribe(() => changeDetectorRef.markForCheck());\n  }\n\n  /** The label for the current calendar view. */\n  get periodButtonText(): string {\n    if (this.calendar.currentView == 'month') {\n      return this._dateAdapter\n          .format(this.calendar.activeDate, this._dateFormats.display.monthYearLabel)\n              .toLocaleUpperCase();\n    }\n    if (this.calendar.currentView == 'year') {\n      return this._dateAdapter.getYearName(this.calendar.activeDate);\n    }\n    const activeYear = this._dateAdapter.getYear(this.calendar.activeDate);\n    const firstYearInView = this._dateAdapter.getYearName(\n        this._dateAdapter.createDate(activeYear - activeYear % 24, 0, 1));\n    const lastYearInView = this._dateAdapter.getYearName(\n        this._dateAdapter.createDate(activeYear + yearsPerPage - 1 - activeYear % 24, 0, 1));\n    return `${firstYearInView} \\u2013 ${lastYearInView}`;\n  }\n\n  get periodButtonLabel(): string {\n    return this.calendar.currentView == 'month' ?\n        this._intl.switchToMultiYearViewLabel : this._intl.switchToMonthViewLabel;\n  }\n\n  /** The label for the the previous button. */\n  get prevButtonLabel(): string {\n    return {\n      'month': this._intl.prevMonthLabel,\n      'year': this._intl.prevYearLabel,\n      'multi-year': this._intl.prevMultiYearLabel\n    }[this.calendar.currentView];\n  }\n\n  /** The label for the the next button. */\n  get nextButtonLabel(): string {\n    return {\n      'month': this._intl.nextMonthLabel,\n      'year': this._intl.nextYearLabel,\n      'multi-year': this._intl.nextMultiYearLabel\n    }[this.calendar.currentView];\n  }\n\n  /** Handles user clicks on the period label. */\n  currentPeriodClicked(): void {\n    this.calendar.currentView = this.calendar.currentView == 'month' ? 'multi-year' : 'month';\n  }\n\n  /** Handles user clicks on the previous button. */\n  previousClicked(): void {\n    this.calendar.activeDate = this.calendar.currentView == 'month' ?\n        this._dateAdapter.addCalendarMonths(this.calendar.activeDate, -1) :\n            this._dateAdapter.addCalendarYears(\n                this.calendar.activeDate, this.calendar.currentView == 'year' ? -1 : -yearsPerPage\n            );\n  }\n\n  /** Handles user clicks on the next button. */\n  nextClicked(): void {\n    this.calendar.activeDate = this.calendar.currentView == 'month' ?\n        this._dateAdapter.addCalendarMonths(this.calendar.activeDate, 1) :\n            this._dateAdapter.addCalendarYears(\n                this.calendar.activeDate,\n                    this.calendar.currentView == 'year' ? 1 : yearsPerPage\n            );\n  }\n\n  /** Whether the previous period button is enabled. */\n  previousEnabled(): boolean {\n    if (!this.calendar.minDate) {\n      return true;\n    }\n    return !this.calendar.minDate ||\n        !this._isSameView(this.calendar.activeDate, this.calendar.minDate);\n  }\n\n  /** Whether the next period button is enabled. */\n  nextEnabled(): boolean {\n    return !this.calendar.maxDate ||\n        !this._isSameView(this.calendar.activeDate, this.calendar.maxDate);\n  }\n\n  /** Whether the two dates represent the same view in the current view mode (month or year). */\n  private _isSameView(date1: D, date2: D): boolean {\n    if (this.calendar.currentView == 'month') {\n      return this._dateAdapter.getYear(date1) == this._dateAdapter.getYear(date2) &&\n          this._dateAdapter.getMonth(date1) == this._dateAdapter.getMonth(date2);\n    }\n    if (this.calendar.currentView == 'year') {\n      return this._dateAdapter.getYear(date1) == this._dateAdapter.getYear(date2);\n    }\n    // Otherwise we are in 'multi-year' view.\n    return Math.floor(this._dateAdapter.getYear(date1) / yearsPerPage) ==\n        Math.floor(this._dateAdapter.getYear(date2) / yearsPerPage);\n  }\n}\n\n/**\n * A calendar that is used as part of the datepicker.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-calendar',\n  templateUrl: 'calendar.html',\n  styleUrls: ['calendar.css'],\n  host: {\n    'class': 'mat-calendar',\n  },\n  exportAs: 'matCalendar',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatCalendar<D> implements AfterContentInit, AfterViewChecked, OnDestroy, OnChanges {\n  /** An input indicating the type of the header component, if set. */\n  @Input() headerComponent: ComponentType<any>;\n\n  /** A portal containing the header component type for this calendar. */\n  _calendarHeaderPortal: Portal<any>;\n\n  private _intlChanges: Subscription;\n\n  /**\n   * Used for scheduling that focus should be moved to the active cell on the next tick.\n   * We need to schedule it, rather than do it immediately, because we have to wait\n   * for Angular to re-evaluate the view children.\n   */\n  private _moveFocusOnNextTick = false;\n\n  /** A date representing the period (month or year) to start the calendar in. */\n  @Input()\n  get startAt(): D | null { return this._startAt; }\n  set startAt(value: D | null) {\n    this._startAt = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _startAt: D | null;\n\n  /** Whether the calendar should be started in month or year view. */\n  @Input() startView: MatCalendarView = 'month';\n\n  /** The currently selected date. */\n  @Input()\n  get selected(): D | null { return this._selected; }\n  set selected(value: D | null) {\n    this._selected = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _selected: D | null;\n\n  /** The minimum selectable date. */\n  @Input()\n  get minDate(): D | null { return this._minDate; }\n  set minDate(value: D | null) {\n    this._minDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _minDate: D | null;\n\n  /** The maximum selectable date. */\n  @Input()\n  get maxDate(): D | null { return this._maxDate; }\n  set maxDate(value: D | null) {\n    this._maxDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _maxDate: D | null;\n\n  /** A function used to filter which dates are selectable. */\n  @Input() dateFilter: (date: D) => boolean;\n\n  /** Emits when the currently selected date changes. */\n  @Output() readonly selectedChange: EventEmitter<D> = new EventEmitter<D>();\n\n  /**\n   * Emits the year chosen in multiyear view.\n   * This doesn't imply a change on the selected date.\n   */\n  @Output() readonly yearSelected: EventEmitter<D> = new EventEmitter<D>();\n\n  /**\n   * Emits the month chosen in year view.\n   * This doesn't imply a change on the selected date.\n   */\n  @Output() readonly monthSelected: EventEmitter<D> = new EventEmitter<D>();\n\n  /** Emits when any date is selected. */\n  @Output() readonly _userSelection: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Reference to the current month view component. */\n  @ViewChild(MatMonthView) monthView: MatMonthView<D>;\n\n  /** Reference to the current year view component. */\n  @ViewChild(MatYearView) yearView: MatYearView<D>;\n\n  /** Reference to the current multi-year view component. */\n  @ViewChild(MatMultiYearView) multiYearView: MatMultiYearView<D>;\n\n  /**\n   * The current active date. This determines which time period is shown and which date is\n   * highlighted when using keyboard navigation.\n   */\n  get activeDate(): D { return this._clampedActiveDate; }\n  set activeDate(value: D) {\n    this._clampedActiveDate = this._dateAdapter.clampDate(value, this.minDate, this.maxDate);\n    this.stateChanges.next();\n  }\n  private _clampedActiveDate: D;\n\n  /** Whether the calendar is in month view. */\n  get currentView(): MatCalendarView { return this._currentView; }\n  set currentView(value: MatCalendarView) {\n    this._currentView = value;\n    this._moveFocusOnNextTick = true;\n  }\n  private _currentView: MatCalendarView;\n\n  /**\n   * Emits whenever there is a state change that the header may need to respond to.\n   */\n  stateChanges = new Subject<void>();\n\n  constructor(_intl: MatDatepickerIntl,\n              @Optional() private _dateAdapter: DateAdapter<D>,\n              @Optional() @Inject(MAT_DATE_FORMATS) private _dateFormats: MatDateFormats,\n              changeDetectorRef: ChangeDetectorRef) {\n\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n\n    if (!this._dateFormats) {\n      throw createMissingDateImplError('MAT_DATE_FORMATS');\n    }\n\n    this._intlChanges = _intl.changes.subscribe(() => {\n      changeDetectorRef.markForCheck();\n      this.stateChanges.next();\n    });\n  }\n\n  ngAfterContentInit() {\n    this._calendarHeaderPortal = new ComponentPortal(this.headerComponent || MatCalendarHeader);\n    this.activeDate = this.startAt || this._dateAdapter.today();\n\n    // Assign to the private property since we don't want to move focus on init.\n    this._currentView = this.startView;\n  }\n\n  ngAfterViewChecked() {\n    if (this._moveFocusOnNextTick) {\n      this._moveFocusOnNextTick = false;\n      this.focusActiveCell();\n    }\n  }\n\n  ngOnDestroy() {\n    this._intlChanges.unsubscribe();\n    this.stateChanges.complete();\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    const change = changes.minDate || changes.maxDate || changes.dateFilter;\n\n    if (change && !change.firstChange) {\n      const view = this._getCurrentViewComponent();\n\n      if (view) {\n        view._init();\n      }\n    }\n\n    this.stateChanges.next();\n  }\n\n  focusActiveCell() {\n    this._getCurrentViewComponent()._focusActiveCell();\n  }\n\n  /** Handles date selection in the month view. */\n  _dateSelected(date: D): void {\n    if (!this._dateAdapter.sameDate(date, this.selected)) {\n      this.selectedChange.emit(date);\n    }\n  }\n\n  /** Handles year selection in the multiyear view. */\n  _yearSelectedInMultiYearView(normalizedYear: D) {\n    this.yearSelected.emit(normalizedYear);\n  }\n\n  /** Handles month selection in the year view. */\n  _monthSelectedInYearView(normalizedMonth: D) {\n    this.monthSelected.emit(normalizedMonth);\n  }\n\n  _userSelected(): void {\n    this._userSelection.emit();\n  }\n\n  /** Handles year/month selection in the multi-year/year views. */\n  _goToDateInView(date: D, view: 'month' | 'year' | 'multi-year'): void {\n    this.activeDate = date;\n    this.currentView = view;\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n\n  /** Returns the component instance that corresponds to the current calendar view. */\n  private _getCurrentViewComponent() {\n    return this.monthView || this.yearView || this.multiYearView;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n  group,\n  query,\n  animateChild,\n} from '@angular/animations';\n\n/** Animations used by the Material datepicker. */\nexport const matDatepickerAnimations: {\n  readonly transformPanel: AnimationTriggerMetadata;\n  readonly fadeInCalendar: AnimationTriggerMetadata;\n} = {\n  /** Transforms the height of the datepicker's calendar. */\n  transformPanel: trigger('transformPanel', [\n    state('void', style({opacity: 0, transform: 'scale(1, 0)'})),\n    state('enter', style({opacity: 1, transform: 'scale(1, 1)'})),\n    transition('void => enter', group([\n      query('@fadeInCalendar', animateChild()),\n      animate('400ms cubic-bezier(0.25, 0.8, 0.25, 1)')\n    ])),\n    transition('* => void', animate('100ms linear', style({opacity: 0})))\n  ]),\n\n  /** Fades in the content of the calendar. */\n  fadeInCalendar: trigger('fadeInCalendar', [\n    state('void', style({opacity: 0})),\n    state('enter', style({opacity: 1})),\n    transition('void => *', animate('400ms 100ms cubic-bezier(0.55, 0, 0.55, 0.2)'))\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {ESCAPE, UP_ARROW} from '@angular/cdk/keycodes';\nimport {\n  Overlay,\n  OverlayConfig,\n  OverlayRef,\n  PositionStrategy,\n  ScrollStrategy,\n} from '@angular/cdk/overlay';\nimport {ComponentPortal, ComponentType} from '@angular/cdk/portal';\nimport {DOCUMENT} from '@angular/common';\nimport {take, filter} from 'rxjs/operators';\nimport {\n  AfterViewInit,\n  ChangeDetectionStrategy,\n  Component,\n  ComponentRef,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  Optional,\n  Output,\n  ViewChild,\n  ViewContainerRef,\n  ViewEncapsulation,\n  OnDestroy,\n} from '@angular/core';\nimport {CanColor, DateAdapter, mixinColor, ThemePalette} from '@angular/material/core';\nimport {MatDialog, MatDialogRef} from '@angular/material/dialog';\nimport {merge, Subject, Subscription} from 'rxjs';\nimport {createMissingDateImplError} from './datepicker-errors';\nimport {MatDatepickerInput} from './datepicker-input';\nimport {MatCalendar} from './calendar';\nimport {matDatepickerAnimations} from './datepicker-animations';\n\n/** Used to generate a unique ID for each datepicker instance. */\nlet datepickerUid = 0;\n\n/** Injection token that determines the scroll handling while the calendar is open. */\nexport const MAT_DATEPICKER_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mat-datepicker-scroll-strategy');\n\n/** @docs-private */\nexport function MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY(overlay: Overlay): () => ScrollStrategy {\n  return () => overlay.scrollStrategies.reposition();\n}\n\n/** @docs-private */\nexport const MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY_PROVIDER = {\n  provide: MAT_DATEPICKER_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY,\n};\n\n// Boilerplate for applying mixins to MatDatepickerContent.\n/** @docs-private */\nexport class MatDatepickerContentBase {\n  constructor(public _elementRef: ElementRef) { }\n}\nexport const _MatDatepickerContentMixinBase = mixinColor(MatDatepickerContentBase);\n\n/**\n * Component used as the content for the datepicker dialog and popup. We use this instead of using\n * MatCalendar directly as the content so we can control the initial focus. This also gives us a\n * place to put additional features of the popup that are not part of the calendar itself in the\n * future. (e.g. confirmation buttons).\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-datepicker-content',\n  templateUrl: 'datepicker-content.html',\n  styleUrls: ['datepicker-content.css'],\n  host: {\n    'class': 'mat-datepicker-content',\n    '[@transformPanel]': '\"enter\"',\n    '[class.mat-datepicker-content-touch]': 'datepicker.touchUi',\n  },\n  animations: [\n    matDatepickerAnimations.transformPanel,\n    matDatepickerAnimations.fadeInCalendar,\n  ],\n  exportAs: 'matDatepickerContent',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  inputs: ['color'],\n})\nexport class MatDatepickerContent<D> extends _MatDatepickerContentMixinBase\n  implements AfterViewInit, CanColor {\n\n  /** Reference to the internal calendar component. */\n  @ViewChild(MatCalendar) _calendar: MatCalendar<D>;\n\n  /** Reference to the datepicker that created the overlay. */\n  datepicker: MatDatepicker<D>;\n\n  /** Whether the datepicker is above or below the input. */\n  _isAbove: boolean;\n\n  constructor(elementRef: ElementRef) {\n    super(elementRef);\n  }\n\n  ngAfterViewInit() {\n    this._calendar.focusActiveCell();\n  }\n}\n\n\n// TODO(mmalerba): We use a component instead of a directive here so the user can use implicit\n// template reference variables (e.g. #d vs #d=\"matDatepicker\"). We can change this to a directive\n// if angular adds support for `exportAs: '$implicit'` on directives.\n/** Component responsible for managing the datepicker popup/dialog. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-datepicker',\n  template: '',\n  exportAs: 'matDatepicker',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatDatepicker<D> implements OnDestroy, CanColor {\n  /** An input indicating the type of the custom header component for the calendar, if set. */\n  @Input() calendarHeaderComponent: ComponentType<any>;\n\n  /** The date to open the calendar to initially. */\n  @Input()\n  get startAt(): D | null {\n    // If an explicit startAt is set we start there, otherwise we start at whatever the currently\n    // selected value is.\n    return this._startAt || (this._datepickerInput ? this._datepickerInput.value : null);\n  }\n  set startAt(value: D | null) {\n    this._startAt = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _startAt: D | null;\n\n  /** The view that the calendar should start in. */\n  @Input() startView: 'month' | 'year' = 'month';\n\n  /** Color palette to use on the datepicker's calendar. */\n  @Input()\n  get color(): ThemePalette {\n    return this._color ||\n        (this._datepickerInput ? this._datepickerInput._getThemePalette() : undefined);\n  }\n  set color(value: ThemePalette) {\n    this._color = value;\n  }\n  _color: ThemePalette;\n\n  /**\n   * Whether the calendar UI is in touch mode. In touch mode the calendar opens in a dialog rather\n   * than a popup and elements have more padding to allow for bigger touch targets.\n   */\n  @Input()\n  get touchUi(): boolean { return this._touchUi; }\n  set touchUi(value: boolean) {\n    this._touchUi = coerceBooleanProperty(value);\n  }\n  private _touchUi = false;\n\n  /** Whether the datepicker pop-up should be disabled. */\n  @Input()\n  get disabled(): boolean {\n    return this._disabled === undefined && this._datepickerInput ?\n        this._datepickerInput.disabled : !!this._disabled;\n  }\n  set disabled(value: boolean) {\n    const newValue = coerceBooleanProperty(value);\n\n    if (newValue !== this._disabled) {\n      this._disabled = newValue;\n      this._disabledChange.next(newValue);\n    }\n  }\n  private _disabled: boolean;\n\n  /**\n   * Emits selected year in multiyear view.\n   * This doesn't imply a change on the selected date.\n   */\n  @Output() readonly yearSelected: EventEmitter<D> = new EventEmitter<D>();\n\n  /**\n   * Emits selected month in year view.\n   * This doesn't imply a change on the selected date.\n   */\n  @Output() readonly monthSelected: EventEmitter<D> = new EventEmitter<D>();\n\n  /** Classes to be passed to the date picker panel. Supports the same syntax as `ngClass`. */\n  @Input() panelClass: string | string[];\n\n  /** Emits when the datepicker has been opened. */\n  @Output('opened') openedStream: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Emits when the datepicker has been closed. */\n  @Output('closed') closedStream: EventEmitter<void> = new EventEmitter<void>();\n\n\n  /** Whether the calendar is open. */\n  @Input()\n  get opened(): boolean { return this._opened; }\n  set opened(value: boolean) { value ? this.open() : this.close(); }\n  private _opened = false;\n\n  /** The id for the datepicker calendar. */\n  id: string = `mat-datepicker-${datepickerUid++}`;\n\n  /** The currently selected date. */\n  get _selected(): D | null { return this._validSelected; }\n  set _selected(value: D | null) { this._validSelected = value; }\n  private _validSelected: D | null = null;\n\n  /** The minimum selectable date. */\n  get _minDate(): D | null {\n    return this._datepickerInput && this._datepickerInput.min;\n  }\n\n  /** The maximum selectable date. */\n  get _maxDate(): D | null {\n    return this._datepickerInput && this._datepickerInput.max;\n  }\n\n  get _dateFilter(): (date: D | null) => boolean {\n    return this._datepickerInput && this._datepickerInput._dateFilter;\n  }\n\n  /** A reference to the overlay when the calendar is opened as a popup. */\n  _popupRef: OverlayRef;\n\n  /** A reference to the dialog when the calendar is opened as a dialog. */\n  private _dialogRef: MatDialogRef<MatDatepickerContent<D>> | null;\n\n  /** A portal containing the calendar for this datepicker. */\n  private _calendarPortal: ComponentPortal<MatDatepickerContent<D>>;\n\n  /** Reference to the component instantiated in popup mode. */\n  private _popupComponentRef: ComponentRef<MatDatepickerContent<D>> | null;\n\n  /** The element that was focused before the datepicker was opened. */\n  private _focusedElementBeforeOpen: HTMLElement | null = null;\n\n  /** Subscription to value changes in the associated input element. */\n  private _inputSubscription = Subscription.EMPTY;\n\n  /** The input element this datepicker is associated with. */\n  _datepickerInput: MatDatepickerInput<D>;\n\n  /** Emits when the datepicker is disabled. */\n  readonly _disabledChange = new Subject<boolean>();\n\n  /** Emits new selected date when selected date changes. */\n  readonly _selectedChanged = new Subject<D>();\n\n  constructor(private _dialog: MatDialog,\n              private _overlay: Overlay,\n              private _ngZone: NgZone,\n              private _viewContainerRef: ViewContainerRef,\n              @Inject(MAT_DATEPICKER_SCROLL_STRATEGY) private _scrollStrategy,\n              @Optional() private _dateAdapter: DateAdapter<D>,\n              @Optional() private _dir: Directionality,\n              @Optional() @Inject(DOCUMENT) private _document: any) {\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n  }\n\n  ngOnDestroy() {\n    this.close();\n    this._inputSubscription.unsubscribe();\n    this._disabledChange.complete();\n\n    if (this._popupRef) {\n      this._popupRef.dispose();\n      this._popupComponentRef = null;\n    }\n  }\n\n  /** Selects the given date */\n  _select(date: D): void {\n    let oldValue = this._selected;\n    this._selected = date;\n    if (!this._dateAdapter.sameDate(oldValue, this._selected)) {\n      this._selectedChanged.next(date);\n    }\n  }\n\n  /** Emits the selected year in multiyear view */\n  _selectYear(normalizedYear: D): void {\n    this.yearSelected.emit(normalizedYear);\n  }\n\n  /** Emits selected month in year view */\n  _selectMonth(normalizedMonth: D): void {\n    this.monthSelected.emit(normalizedMonth);\n  }\n\n  /**\n   * Register an input with this datepicker.\n   * @param input The datepicker input to register with this datepicker.\n   */\n  _registerInput(input: MatDatepickerInput<D>): void {\n    if (this._datepickerInput) {\n      throw Error('A MatDatepicker can only be associated with a single input.');\n    }\n    this._datepickerInput = input;\n    this._inputSubscription =\n        this._datepickerInput._valueChange.subscribe((value: D | null) => this._selected = value);\n  }\n\n  /** Open the calendar. */\n  open(): void {\n    if (this._opened || this.disabled) {\n      return;\n    }\n    if (!this._datepickerInput) {\n      throw Error('Attempted to open an MatDatepicker with no associated input.');\n    }\n    if (this._document) {\n      this._focusedElementBeforeOpen = this._document.activeElement;\n    }\n\n    this.touchUi ? this._openAsDialog() : this._openAsPopup();\n    this._opened = true;\n    this.openedStream.emit();\n  }\n\n  /** Close the calendar. */\n  close(): void {\n    if (!this._opened) {\n      return;\n    }\n    if (this._popupRef && this._popupRef.hasAttached()) {\n      this._popupRef.detach();\n    }\n    if (this._dialogRef) {\n      this._dialogRef.close();\n      this._dialogRef = null;\n    }\n    if (this._calendarPortal && this._calendarPortal.isAttached) {\n      this._calendarPortal.detach();\n    }\n\n    const completeClose = () => {\n      // The `_opened` could've been reset already if\n      // we got two events in quick succession.\n      if (this._opened) {\n        this._opened = false;\n        this.closedStream.emit();\n        this._focusedElementBeforeOpen = null;\n      }\n    };\n\n    if (this._focusedElementBeforeOpen &&\n      typeof this._focusedElementBeforeOpen.focus === 'function') {\n      // Because IE moves focus asynchronously, we can't count on it being restored before we've\n      // marked the datepicker as closed. If the event fires out of sequence and the element that\n      // we're refocusing opens the datepicker on focus, the user could be stuck with not being\n      // able to close the calendar at all. We work around it by making the logic, that marks\n      // the datepicker as closed, async as well.\n      this._focusedElementBeforeOpen.focus();\n      setTimeout(completeClose);\n    } else {\n      completeClose();\n    }\n  }\n\n  /** Open the calendar as a dialog. */\n  private _openAsDialog(): void {\n    this._dialogRef = this._dialog.open<MatDatepickerContent<D>>(MatDatepickerContent, {\n      direction: this._dir ? this._dir.value : 'ltr',\n      viewContainerRef: this._viewContainerRef,\n      panelClass: 'mat-datepicker-dialog',\n    });\n\n    this._dialogRef.afterClosed().subscribe(() => this.close());\n    this._dialogRef.componentInstance.datepicker = this;\n    this._setColor();\n  }\n\n  /** Open the calendar as a popup. */\n  private _openAsPopup(): void {\n    if (!this._calendarPortal) {\n      this._calendarPortal = new ComponentPortal<MatDatepickerContent<D>>(MatDatepickerContent,\n                                                                          this._viewContainerRef);\n    }\n\n    if (!this._popupRef) {\n      this._createPopup();\n    }\n\n    if (!this._popupRef.hasAttached()) {\n      this._popupComponentRef = this._popupRef.attach(this._calendarPortal);\n      this._popupComponentRef.instance.datepicker = this;\n      this._setColor();\n\n      // Update the position once the calendar has rendered.\n      this._ngZone.onStable.asObservable().pipe(take(1)).subscribe(() => {\n        this._popupRef.updatePosition();\n      });\n    }\n  }\n\n  /** Create the popup. */\n  private _createPopup(): void {\n    const overlayConfig = new OverlayConfig({\n      positionStrategy: this._createPopupPositionStrategy(),\n      hasBackdrop: true,\n      backdropClass: 'mat-overlay-transparent-backdrop',\n      direction: this._dir,\n      scrollStrategy: this._scrollStrategy(),\n      panelClass: 'mat-datepicker-popup',\n    });\n\n    this._popupRef = this._overlay.create(overlayConfig);\n\n    merge(\n      this._popupRef.backdropClick(),\n      this._popupRef.detachments(),\n      this._popupRef.keydownEvents().pipe(filter(event => {\n        // Closing on alt + up is only valid when there's an input associated with the datepicker.\n        return event.keyCode === ESCAPE ||\n               (this._datepickerInput && event.altKey && event.keyCode === UP_ARROW);\n      }))\n    ).subscribe(() => this.close());\n  }\n\n  /** Create the popup PositionStrategy. */\n  private _createPopupPositionStrategy(): PositionStrategy {\n    return this._overlay.position()\n      .flexibleConnectedTo(this._datepickerInput.getPopupConnectionElementRef())\n      .withTransformOriginOn('.mat-datepicker-content')\n      .withFlexibleDimensions(false)\n      .withViewportMargin(8)\n      .withPush(false)\n      .withPositions([\n        {\n          originX: 'start',\n          originY: 'bottom',\n          overlayX: 'start',\n          overlayY: 'top'\n        },\n        {\n          originX: 'start',\n          originY: 'top',\n          overlayX: 'start',\n          overlayY: 'bottom'\n        },\n        {\n          originX: 'end',\n          originY: 'bottom',\n          overlayX: 'end',\n          overlayY: 'top'\n        },\n        {\n          originX: 'end',\n          originY: 'top',\n          overlayX: 'end',\n          overlayY: 'bottom'\n        }\n      ]);\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n\n  /** Passes the current theme color along to the calendar overlay. */\n  private _setColor(): void {\n    const color = this.color;\n    if (this._popupComponentRef) {\n      this._popupComponentRef.instance.color = color;\n    }\n    if (this._dialogRef) {\n      this._dialogRef.componentInstance.color = color;\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ComponentRef,\n  ElementRef,\n  EmbeddedViewRef,\n  EventEmitter,\n  Inject,\n  Optional,\n  ChangeDetectorRef,\n  ViewChild,\n  ViewEncapsulation,\n  ChangeDetectionStrategy,\n} from '@angular/core';\nimport {DOCUMENT} from '@angular/common';\nimport {AnimationEvent} from '@angular/animations';\nimport {matDialogAnimations} from './dialog-animations';\nimport {\n  BasePortalOutlet,\n  ComponentPortal,\n  CdkPortalOutlet,\n  TemplatePortal\n} from '@angular/cdk/portal';\nimport {FocusTrap, FocusTrapFactory} from '@angular/cdk/a11y';\nimport {MatDialogConfig} from './dialog-config';\n\n\n/**\n * Throws an exception for the case when a ComponentPortal is\n * attached to a DomPortalOutlet without an origin.\n * @docs-private\n */\nexport function throwMatDialogContentAlreadyAttachedError() {\n  throw Error('Attempting to attach dialog content after content is already attached');\n}\n\n/**\n * Internal component that wraps user-provided dialog content.\n * Animation is based on https://material.io/guidelines/motion/choreography.html.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-dialog-container',\n  templateUrl: 'dialog-container.html',\n  styleUrls: ['dialog.css'],\n  encapsulation: ViewEncapsulation.None,\n  // Using OnPush for dialogs caused some G3 sync issues. Disabled until we can track them down.\n  // tslint:disable-next-line:validate-decorators\n  changeDetection: ChangeDetectionStrategy.Default,\n  animations: [matDialogAnimations.slideDialog],\n  host: {\n    'class': 'mat-dialog-container',\n    'tabindex': '-1',\n    '[attr.id]': '_id',\n    '[attr.role]': '_config.role',\n    '[attr.aria-labelledby]': '_config.ariaLabel ? null : _ariaLabelledBy',\n    '[attr.aria-label]': '_config.ariaLabel',\n    '[attr.aria-describedby]': '_config.ariaDescribedBy || null',\n    '[@slideDialog]': '_state',\n    '(@slideDialog.start)': '_onAnimationStart($event)',\n    '(@slideDialog.done)': '_onAnimationDone($event)',\n  },\n})\nexport class MatDialogContainer extends BasePortalOutlet {\n  /** The portal outlet inside of this container into which the dialog content will be loaded. */\n  @ViewChild(CdkPortalOutlet) _portalOutlet: CdkPortalOutlet;\n\n  /** The class that traps and manages focus within the dialog. */\n  private _focusTrap: FocusTrap;\n\n  /** Element that was focused before the dialog was opened. Save this to restore upon close. */\n  private _elementFocusedBeforeDialogWasOpened: HTMLElement | null = null;\n\n  /** State of the dialog animation. */\n  _state: 'void' | 'enter' | 'exit' = 'enter';\n\n  /** Emits when an animation state changes. */\n  _animationStateChanged = new EventEmitter<AnimationEvent>();\n\n  /** ID of the element that should be considered as the dialog's label. */\n  _ariaLabelledBy: string | null = null;\n\n  /** ID for the container DOM element. */\n  _id: string;\n\n  constructor(\n    private _elementRef: ElementRef,\n    private _focusTrapFactory: FocusTrapFactory,\n    private _changeDetectorRef: ChangeDetectorRef,\n    @Optional() @Inject(DOCUMENT) private _document: any,\n    /** The dialog configuration. */\n    public _config: MatDialogConfig) {\n\n    super();\n  }\n\n  /**\n   * Attach a ComponentPortal as content to this dialog container.\n   * @param portal Portal to be attached as the dialog content.\n   */\n  attachComponentPortal<T>(portal: ComponentPortal<T>): ComponentRef<T> {\n    if (this._portalOutlet.hasAttached()) {\n      throwMatDialogContentAlreadyAttachedError();\n    }\n\n    this._savePreviouslyFocusedElement();\n    return this._portalOutlet.attachComponentPortal(portal);\n  }\n\n  /**\n   * Attach a TemplatePortal as content to this dialog container.\n   * @param portal Portal to be attached as the dialog content.\n   */\n  attachTemplatePortal<C>(portal: TemplatePortal<C>): EmbeddedViewRef<C> {\n    if (this._portalOutlet.hasAttached()) {\n      throwMatDialogContentAlreadyAttachedError();\n    }\n\n    this._savePreviouslyFocusedElement();\n    return this._portalOutlet.attachTemplatePortal(portal);\n  }\n\n  /** Moves the focus inside the focus trap. */\n  private _trapFocus() {\n    if (!this._focusTrap) {\n      this._focusTrap = this._focusTrapFactory.create(this._elementRef.nativeElement);\n    }\n\n    // If were to attempt to focus immediately, then the content of the dialog would not yet be\n    // ready in instances where change detection has to run first. To deal with this, we simply\n    // wait for the microtask queue to be empty.\n    if (this._config.autoFocus) {\n      this._focusTrap.focusInitialElementWhenReady();\n    }\n  }\n\n  /** Restores focus to the element that was focused before the dialog opened. */\n  private _restoreFocus() {\n    const toFocus = this._elementFocusedBeforeDialogWasOpened;\n\n    // We need the extra check, because IE can set the `activeElement` to null in some cases.\n    if (toFocus && typeof toFocus.focus === 'function') {\n      toFocus.focus();\n    }\n\n    if (this._focusTrap) {\n      this._focusTrap.destroy();\n    }\n  }\n\n  /** Saves a reference to the element that was focused before the dialog was opened. */\n  private _savePreviouslyFocusedElement() {\n    if (this._document) {\n      this._elementFocusedBeforeDialogWasOpened = this._document.activeElement as HTMLElement;\n\n      // Note that there is no focus method when rendering on the server.\n      if (this._elementRef.nativeElement.focus) {\n        // Move focus onto the dialog immediately in order to prevent the user from accidentally\n        // opening multiple dialogs at the same time. Needs to be async, because the element\n        // may not be focusable immediately.\n        Promise.resolve().then(() => this._elementRef.nativeElement.focus());\n      }\n    }\n  }\n\n  /** Callback, invoked whenever an animation on the host completes. */\n  _onAnimationDone(event: AnimationEvent) {\n    if (event.toState === 'enter') {\n      this._trapFocus();\n    } else if (event.toState === 'exit') {\n      this._restoreFocus();\n    }\n\n    this._animationStateChanged.emit(event);\n  }\n\n  /** Callback, invoked when an animation on the host starts. */\n  _onAnimationStart(event: AnimationEvent) {\n    this._animationStateChanged.emit(event);\n  }\n\n  /** Starts the dialog exit animation. */\n  _startExitAnimation(): void {\n    this._state = 'exit';\n\n    // Mark the container for check so it can react if the\n    // view container is using OnPush change detection.\n    this._changeDetectorRef.markForCheck();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ESCAPE} from '@angular/cdk/keycodes';\nimport {GlobalPositionStrategy, OverlayRef} from '@angular/cdk/overlay';\nimport {Location} from '@angular/common';\nimport {Observable, Subject, Subscription, SubscriptionLike} from 'rxjs';\nimport {filter, take} from 'rxjs/operators';\nimport {DialogPosition} from './dialog-config';\nimport {MatDialogContainer} from './dialog-container';\n\n\n// TODO(jelbourn): resizing\n\n// Counter for unique dialog ids.\nlet uniqueId = 0;\n\n/**\n * Reference to a dialog opened via the MatDialog service.\n */\nexport class MatDialogRef<T, R = any> {\n  /** The instance of component opened into the dialog. */\n  componentInstance: T;\n\n  /** Whether the user is allowed to close the dialog. */\n  disableClose: boolean | undefined = this._containerInstance._config.disableClose;\n\n  /** Subject for notifying the user that the dialog has finished opening. */\n  private readonly _afterOpen = new Subject<void>();\n\n  /** Subject for notifying the user that the dialog has finished closing. */\n  private readonly _afterClosed = new Subject<R | undefined>();\n\n  /** Subject for notifying the user that the dialog has started closing. */\n  private readonly _beforeClose = new Subject<R | undefined>();\n\n  /** Result to be passed to afterClosed. */\n  private _result: R | undefined;\n\n  /** Subscription to changes in the user's location. */\n  private _locationChanges: SubscriptionLike = Subscription.EMPTY;\n\n  constructor(\n    private _overlayRef: OverlayRef,\n    public _containerInstance: MatDialogContainer,\n    location?: Location,\n    readonly id: string = `mat-dialog-${uniqueId++}`) {\n\n    // Pass the id along to the container.\n    _containerInstance._id = id;\n\n    // Emit when opening animation completes\n    _containerInstance._animationStateChanged.pipe(\n      filter(event => event.phaseName === 'done' && event.toState === 'enter'),\n      take(1)\n    )\n    .subscribe(() => {\n      this._afterOpen.next();\n      this._afterOpen.complete();\n    });\n\n    // Dispose overlay when closing animation is complete\n    _containerInstance._animationStateChanged.pipe(\n      filter(event => event.phaseName === 'done' && event.toState === 'exit'),\n      take(1)\n    ).subscribe(() => this._overlayRef.dispose());\n\n    _overlayRef.detachments().subscribe(() => {\n      this._beforeClose.next(this._result);\n      this._beforeClose.complete();\n      this._locationChanges.unsubscribe();\n      this._afterClosed.next(this._result);\n      this._afterClosed.complete();\n      this.componentInstance = null!;\n      this._overlayRef.dispose();\n    });\n\n    _overlayRef.keydownEvents()\n      .pipe(filter(event => event.keyCode === ESCAPE && !this.disableClose))\n      .subscribe(() => this.close());\n\n    if (location) {\n      // Close the dialog when the user goes forwards/backwards in history or when the location\n      // hash changes. Note that this usually doesn't include clicking on links (unless the user\n      // is using the `HashLocationStrategy`).\n      this._locationChanges = location.subscribe(() => {\n        if (this._containerInstance._config.closeOnNavigation) {\n          this.close();\n        }\n      });\n    }\n  }\n\n  /**\n   * Close the dialog.\n   * @param dialogResult Optional result to return to the dialog opener.\n   */\n  close(dialogResult?: R): void {\n    this._result = dialogResult;\n\n    // Transition the backdrop in parallel to the dialog.\n    this._containerInstance._animationStateChanged.pipe(\n      filter(event => event.phaseName === 'start'),\n      take(1)\n    )\n    .subscribe(() => {\n      this._beforeClose.next(dialogResult);\n      this._beforeClose.complete();\n      this._overlayRef.detachBackdrop();\n    });\n\n    this._containerInstance._startExitAnimation();\n  }\n\n  /**\n   * Gets an observable that is notified when the dialog is finished opening.\n   */\n  afterOpen(): Observable<void> {\n    return this._afterOpen.asObservable();\n  }\n\n  /**\n   * Gets an observable that is notified when the dialog is finished closing.\n   */\n  afterClosed(): Observable<R | undefined> {\n    return this._afterClosed.asObservable();\n  }\n\n  /**\n   * Gets an observable that is notified when the dialog has started closing.\n   */\n  beforeClose(): Observable<R | undefined> {\n    return this._beforeClose.asObservable();\n  }\n\n  /**\n   * Gets an observable that emits when the overlay's backdrop has been clicked.\n   */\n  backdropClick(): Observable<MouseEvent> {\n    return this._overlayRef.backdropClick();\n  }\n\n  /**\n   * Gets an observable that emits when keydown events are targeted on the overlay.\n   */\n  keydownEvents(): Observable<KeyboardEvent> {\n    return this._overlayRef.keydownEvents();\n  }\n\n  /**\n   * Updates the dialog's position.\n   * @param position New dialog position.\n   */\n  updatePosition(position?: DialogPosition): this {\n    let strategy = this._getPositionStrategy();\n\n    if (position && (position.left || position.right)) {\n      position.left ? strategy.left(position.left) : strategy.right(position.right);\n    } else {\n      strategy.centerHorizontally();\n    }\n\n    if (position && (position.top || position.bottom)) {\n      position.top ? strategy.top(position.top) : strategy.bottom(position.bottom);\n    } else {\n      strategy.centerVertically();\n    }\n\n    this._overlayRef.updatePosition();\n\n    return this;\n  }\n\n  /**\n   * Updates the dialog's width and height.\n   * @param width New width of the dialog.\n   * @param height New height of the dialog.\n   */\n  updateSize(width: string = 'auto', height: string = 'auto'): this {\n    this._getPositionStrategy().width(width).height(height);\n    this._overlayRef.updatePosition();\n    return this;\n  }\n\n  /** Fetches the position strategy object from the overlay ref. */\n  private _getPositionStrategy(): GlobalPositionStrategy {\n    return this._overlayRef.getConfig().positionStrategy as GlobalPositionStrategy;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directionality} from '@angular/cdk/bidi';\nimport {\n  Overlay,\n  OverlayConfig,\n  OverlayContainer,\n  OverlayRef,\n  ScrollStrategy,\n} from '@angular/cdk/overlay';\nimport {ComponentPortal, ComponentType, PortalInjector, TemplatePortal} from '@angular/cdk/portal';\nimport {Location} from '@angular/common';\nimport {\n  Inject,\n  Injectable,\n  InjectionToken,\n  Injector,\n  Optional,\n  SkipSelf,\n  TemplateRef,\n} from '@angular/core';\nimport {defer, Observable, of as observableOf, Subject} from 'rxjs';\nimport {startWith} from 'rxjs/operators';\nimport {MatDialogConfig} from './dialog-config';\nimport {MatDialogContainer} from './dialog-container';\nimport {MatDialogRef} from './dialog-ref';\n\n\n/** Injection token that can be used to access the data that was passed in to a dialog. */\nexport const MAT_DIALOG_DATA = new InjectionToken<any>('MatDialogData');\n\n/** Injection token that can be used to specify default dialog options. */\nexport const MAT_DIALOG_DEFAULT_OPTIONS =\n    new InjectionToken<MatDialogConfig>('mat-dialog-default-options');\n\n/** Injection token that determines the scroll handling while the dialog is open. */\nexport const MAT_DIALOG_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mat-dialog-scroll-strategy');\n\n/** @docs-private */\nexport function MAT_DIALOG_SCROLL_STRATEGY_FACTORY(overlay: Overlay): ()  => ScrollStrategy {\n  return () => overlay.scrollStrategies.block();\n}\n\n/** @docs-private */\nexport function MAT_DIALOG_SCROLL_STRATEGY_PROVIDER_FACTORY(overlay: Overlay):\n    () => ScrollStrategy {\n  return () => overlay.scrollStrategies.block();\n}\n\n/** @docs-private */\nexport const MAT_DIALOG_SCROLL_STRATEGY_PROVIDER = {\n  provide: MAT_DIALOG_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_DIALOG_SCROLL_STRATEGY_PROVIDER_FACTORY,\n};\n\n\n/**\n * Service to open Material Design modal dialogs.\n */\n@Injectable()\nexport class MatDialog {\n  private _openDialogsAtThisLevel: MatDialogRef<any>[] = [];\n  private readonly _afterAllClosedAtThisLevel = new Subject<void>();\n  private readonly _afterOpenAtThisLevel = new Subject<MatDialogRef<any>>();\n  private _ariaHiddenElements = new Map<Element, string|null>();\n\n  /** Keeps track of the currently-open dialogs. */\n  get openDialogs(): MatDialogRef<any>[] {\n    return this._parentDialog ? this._parentDialog.openDialogs : this._openDialogsAtThisLevel;\n  }\n\n  /** Stream that emits when a dialog has been opened. */\n  get afterOpen(): Subject<MatDialogRef<any>> {\n    return this._parentDialog ? this._parentDialog.afterOpen : this._afterOpenAtThisLevel;\n  }\n\n  get _afterAllClosed() {\n    const parent = this._parentDialog;\n    return parent ? parent._afterAllClosed : this._afterAllClosedAtThisLevel;\n  }\n\n  /**\n   * Stream that emits when all open dialog have finished closing.\n   * Will emit on subscribe if there are no open dialogs to begin with.\n   */\n  readonly afterAllClosed: Observable<void> = defer<void>(() => this.openDialogs.length ?\n      this._afterAllClosed :\n      this._afterAllClosed.pipe(startWith(undefined)));\n\n  constructor(\n      private _overlay: Overlay,\n      private _injector: Injector,\n      @Optional() private _location: Location,\n      @Optional() @Inject(MAT_DIALOG_DEFAULT_OPTIONS) private _defaultOptions,\n      @Inject(MAT_DIALOG_SCROLL_STRATEGY) private _scrollStrategy,\n      @Optional() @SkipSelf() private _parentDialog: MatDialog,\n      private _overlayContainer: OverlayContainer) {}\n\n  /**\n   * Opens a modal dialog containing the given component.\n   * @param componentOrTemplateRef Type of the component to load into the dialog,\n   *     or a TemplateRef to instantiate as the dialog content.\n   * @param config Extra configuration options.\n   * @returns Reference to the newly-opened dialog.\n   */\n  open<T, D = any, R = any>(componentOrTemplateRef: ComponentType<T> | TemplateRef<T>,\n          config?: MatDialogConfig<D>): MatDialogRef<T, R> {\n\n    config = _applyConfigDefaults(config, this._defaultOptions || new MatDialogConfig());\n\n    if (config.id && this.getDialogById(config.id)) {\n      throw Error(`Dialog with id \"${config.id}\" exists already. The dialog id must be unique.`);\n    }\n\n    const overlayRef = this._createOverlay(config);\n    const dialogContainer = this._attachDialogContainer(overlayRef, config);\n    const dialogRef = this._attachDialogContent<T, R>(componentOrTemplateRef,\n                                                      dialogContainer,\n                                                      overlayRef,\n                                                      config);\n\n    // If this is the first dialog that we're opening, hide all the non-overlay content.\n    if (!this.openDialogs.length) {\n      this._hideNonDialogContentFromAssistiveTechnology();\n    }\n\n    this.openDialogs.push(dialogRef);\n    dialogRef.afterClosed().subscribe(() => this._removeOpenDialog(dialogRef));\n    this.afterOpen.next(dialogRef);\n\n    return dialogRef;\n  }\n\n  /**\n   * Closes all of the currently-open dialogs.\n   */\n  closeAll(): void {\n    let i = this.openDialogs.length;\n\n    while (i--) {\n      // The `_openDialogs` property isn't updated after close until the rxjs subscription\n      // runs on the next microtask, in addition to modifying the array as we're going\n      // through it. We loop through all of them and call close without assuming that\n      // they'll be removed from the list instantaneously.\n      this.openDialogs[i].close();\n    }\n  }\n\n  /**\n   * Finds an open dialog by its id.\n   * @param id ID to use when looking up the dialog.\n   */\n  getDialogById(id: string): MatDialogRef<any> | undefined {\n    return this.openDialogs.find(dialog => dialog.id === id);\n  }\n\n  /**\n   * Creates the overlay into which the dialog will be loaded.\n   * @param config The dialog configuration.\n   * @returns A promise resolving to the OverlayRef for the created overlay.\n   */\n  private _createOverlay(config: MatDialogConfig): OverlayRef {\n    const overlayConfig = this._getOverlayConfig(config);\n    return this._overlay.create(overlayConfig);\n  }\n\n  /**\n   * Creates an overlay config from a dialog config.\n   * @param dialogConfig The dialog configuration.\n   * @returns The overlay configuration.\n   */\n  private _getOverlayConfig(dialogConfig: MatDialogConfig): OverlayConfig {\n    const state = new OverlayConfig({\n      positionStrategy: this._overlay.position().global(),\n      scrollStrategy: dialogConfig.scrollStrategy || this._scrollStrategy(),\n      panelClass: dialogConfig.panelClass,\n      hasBackdrop: dialogConfig.hasBackdrop,\n      direction: dialogConfig.direction,\n      minWidth: dialogConfig.minWidth,\n      minHeight: dialogConfig.minHeight,\n      maxWidth: dialogConfig.maxWidth,\n      maxHeight: dialogConfig.maxHeight\n    });\n\n    if (dialogConfig.backdropClass) {\n      state.backdropClass = dialogConfig.backdropClass;\n    }\n\n    return state;\n  }\n\n  /**\n   * Attaches an MatDialogContainer to a dialog's already-created overlay.\n   * @param overlay Reference to the dialog's underlying overlay.\n   * @param config The dialog configuration.\n   * @returns A promise resolving to a ComponentRef for the attached container.\n   */\n  private _attachDialogContainer(overlay: OverlayRef, config: MatDialogConfig): MatDialogContainer {\n    const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n    const injector = new PortalInjector(userInjector || this._injector, new WeakMap([\n      [MatDialogConfig, config]\n    ]));\n    const containerPortal =\n        new ComponentPortal(MatDialogContainer, config.viewContainerRef, injector);\n    const containerRef = overlay.attach<MatDialogContainer>(containerPortal);\n\n    return containerRef.instance;\n  }\n\n  /**\n   * Attaches the user-provided component to the already-created MatDialogContainer.\n   * @param componentOrTemplateRef The type of component being loaded into the dialog,\n   *     or a TemplateRef to instantiate as the content.\n   * @param dialogContainer Reference to the wrapping MatDialogContainer.\n   * @param overlayRef Reference to the overlay in which the dialog resides.\n   * @param config The dialog configuration.\n   * @returns A promise resolving to the MatDialogRef that should be returned to the user.\n   */\n  private _attachDialogContent<T, R>(\n      componentOrTemplateRef: ComponentType<T> | TemplateRef<T>,\n      dialogContainer: MatDialogContainer,\n      overlayRef: OverlayRef,\n      config: MatDialogConfig): MatDialogRef<T, R> {\n\n    // Create a reference to the dialog we're creating in order to give the user a handle\n    // to modify and close it.\n    const dialogRef =\n        new MatDialogRef<T, R>(overlayRef, dialogContainer, this._location, config.id);\n\n    // When the dialog backdrop is clicked, we want to close it.\n    if (config.hasBackdrop) {\n      overlayRef.backdropClick().subscribe(() => {\n        if (!dialogRef.disableClose) {\n          dialogRef.close();\n        }\n      });\n    }\n\n    if (componentOrTemplateRef instanceof TemplateRef) {\n      dialogContainer.attachTemplatePortal(\n        new TemplatePortal<T>(componentOrTemplateRef, null!,\n          <any>{ $implicit: config.data, dialogRef }));\n    } else {\n      const injector = this._createInjector<T>(config, dialogRef, dialogContainer);\n      const contentRef = dialogContainer.attachComponentPortal<T>(\n          new ComponentPortal(componentOrTemplateRef, undefined, injector));\n      dialogRef.componentInstance = contentRef.instance;\n    }\n\n    dialogRef\n      .updateSize(config.width, config.height)\n      .updatePosition(config.position);\n\n    return dialogRef;\n  }\n\n  /**\n   * Creates a custom injector to be used inside the dialog. This allows a component loaded inside\n   * of a dialog to close itself and, optionally, to return a value.\n   * @param config Config object that is used to construct the dialog.\n   * @param dialogRef Reference to the dialog.\n   * @param container Dialog container element that wraps all of the contents.\n   * @returns The custom injector that can be used inside the dialog.\n   */\n  private _createInjector<T>(\n      config: MatDialogConfig,\n      dialogRef: MatDialogRef<T>,\n      dialogContainer: MatDialogContainer): PortalInjector {\n\n    const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n\n    // The MatDialogContainer is injected in the portal as the MatDialogContainer and the dialog's\n    // content are created out of the same ViewContainerRef and as such, are siblings for injector\n    // purposes. To allow the hierarchy that is expected, the MatDialogContainer is explicitly\n    // added to the injection tokens.\n    const injectionTokens = new WeakMap<any, any>([\n      [MatDialogContainer, dialogContainer],\n      [MAT_DIALOG_DATA, config.data],\n      [MatDialogRef, dialogRef]\n    ]);\n\n    if (config.direction &&\n        (!userInjector || !userInjector.get<Directionality | null>(Directionality, null))) {\n      injectionTokens.set(Directionality, {\n        value: config.direction,\n        change: observableOf()\n      });\n    }\n\n    return new PortalInjector(userInjector || this._injector, injectionTokens);\n  }\n\n  /**\n   * Removes a dialog from the array of open dialogs.\n   * @param dialogRef Dialog to be removed.\n   */\n  private _removeOpenDialog(dialogRef: MatDialogRef<any>) {\n    const index = this.openDialogs.indexOf(dialogRef);\n\n    if (index > -1) {\n      this.openDialogs.splice(index, 1);\n\n      // If all the dialogs were closed, remove/restore the `aria-hidden`\n      // to a the siblings and emit to the `afterAllClosed` stream.\n      if (!this.openDialogs.length) {\n        this._ariaHiddenElements.forEach((previousValue, element) => {\n          if (previousValue) {\n            element.setAttribute('aria-hidden', previousValue);\n          } else {\n            element.removeAttribute('aria-hidden');\n          }\n        });\n\n        this._ariaHiddenElements.clear();\n        this._afterAllClosed.next();\n      }\n    }\n  }\n\n  /**\n   * Hides all of the content that isn't an overlay from assistive technology.\n   */\n  private _hideNonDialogContentFromAssistiveTechnology() {\n    const overlayContainer = this._overlayContainer.getContainerElement();\n\n    // Ensure that the overlay container is attached to the DOM.\n    if (overlayContainer.parentElement) {\n      const siblings = overlayContainer.parentElement.children;\n\n      for (let i = siblings.length - 1; i > -1; i--) {\n        let sibling = siblings[i];\n\n        if (sibling !== overlayContainer &&\n          sibling.nodeName !== 'SCRIPT' &&\n          sibling.nodeName !== 'STYLE' &&\n          !sibling.hasAttribute('aria-live')) {\n\n          this._ariaHiddenElements.set(sibling, sibling.getAttribute('aria-hidden'));\n          sibling.setAttribute('aria-hidden', 'true');\n        }\n      }\n    }\n\n  }\n\n}\n\n/**\n * Applies default options to the dialog config.\n * @param config Config to be modified.\n * @param defaultOptions Default options provided.\n * @returns The new configuration object.\n */\nfunction _applyConfigDefaults(\n    config?: MatDialogConfig, defaultOptions?: MatDialogConfig): MatDialogConfig {\n  return {...defaultOptions, ...config};\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Directive,\n  Input,\n  OnChanges,\n  OnInit,\n  Optional,\n  SimpleChanges,\n  ElementRef,\n} from '@angular/core';\nimport {MatDialog} from './dialog';\nimport {MatDialogRef} from './dialog-ref';\n\n/** Counter used to generate unique IDs for dialog elements. */\nlet dialogElementUid = 0;\n\n/**\n * Button that will close the current dialog.\n */\n@Directive({\n  selector: `button[mat-dialog-close], button[matDialogClose]`,\n  exportAs: 'matDialogClose',\n  host: {\n    '(click)': 'dialogRef.close(dialogResult)',\n    '[attr.aria-label]': 'ariaLabel',\n    'type': 'button', // Prevents accidental form submits.\n  }\n})\nexport class MatDialogClose implements OnInit, OnChanges {\n  /** Screenreader label for the button. */\n  @Input('aria-label') ariaLabel: string = 'Close dialog';\n\n  /** Dialog close input. */\n  @Input('mat-dialog-close') dialogResult: any;\n\n  @Input('matDialogClose') _matDialogClose: any;\n\n  constructor(\n    @Optional() public dialogRef: MatDialogRef<any>,\n    private _elementRef: ElementRef,\n    private _dialog: MatDialog) {}\n\n  ngOnInit() {\n    if (!this.dialogRef) {\n      // When this directive is included in a dialog via TemplateRef (rather than being\n      // in a Component), the DialogRef isn't available via injection because embedded\n      // views cannot be given a custom injector. Instead, we look up the DialogRef by\n      // ID. This must occur in `onInit`, as the ID binding for the dialog container won't\n      // be resolved at constructor time.\n      this.dialogRef = getClosestDialog(this._elementRef, this._dialog.openDialogs)!;\n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    const proxiedChange = changes._matDialogClose || changes._matDialogCloseResult;\n\n    if (proxiedChange) {\n      this.dialogResult = proxiedChange.currentValue;\n    }\n  }\n}\n\n/**\n * Title of a dialog element. Stays fixed to the top of the dialog when scrolling.\n */\n@Directive({\n  selector: '[mat-dialog-title], [matDialogTitle]',\n  exportAs: 'matDialogTitle',\n  host: {\n    'class': 'mat-dialog-title',\n    '[id]': 'id',\n  },\n})\nexport class MatDialogTitle implements OnInit {\n  @Input() id = `mat-dialog-title-${dialogElementUid++}`;\n\n  constructor(\n    @Optional() private _dialogRef: MatDialogRef<any>,\n    private _elementRef: ElementRef,\n    private _dialog: MatDialog) {}\n\n  ngOnInit() {\n    if (!this._dialogRef) {\n      this._dialogRef = getClosestDialog(this._elementRef, this._dialog.openDialogs)!;\n    }\n\n    if (this._dialogRef) {\n      Promise.resolve().then(() => {\n        const container = this._dialogRef._containerInstance;\n\n        if (container && !container._ariaLabelledBy) {\n          container._ariaLabelledBy = this.id;\n        }\n      });\n    }\n  }\n}\n\n\n/**\n * Scrollable content container of a dialog.\n */\n@Directive({\n  selector: `[mat-dialog-content], mat-dialog-content, [matDialogContent]`,\n  host: {'class': 'mat-dialog-content'}\n})\nexport class MatDialogContent {}\n\n\n/**\n * Container for the bottom action buttons in a dialog.\n * Stays fixed to the bottom when scrolling.\n */\n@Directive({\n  selector: `[mat-dialog-actions], mat-dialog-actions, [matDialogActions]`,\n  host: {'class': 'mat-dialog-actions'}\n})\nexport class MatDialogActions {}\n\n\n/**\n * Finds the closest MatDialogRef to an element by looking at the DOM.\n * @param element Element relative to which to look for a dialog.\n * @param openDialogs References to the currently-open dialogs.\n */\nfunction getClosestDialog(element: ElementRef, openDialogs: MatDialogRef<any>[]) {\n  let parent: HTMLElement | null = element.nativeElement.parentElement;\n\n  while (parent && !parent.classList.contains('mat-dialog-container')) {\n    parent = parent.parentElement;\n  }\n\n  return parent ? openDialogs.find(dialog => dialog.id === parent!.id) : null;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MAT_DIALOG_SCROLL_STRATEGY_PROVIDER, MatDialog} from './dialog';\nimport {MatDialogContainer} from './dialog-container';\nimport {\n  MatDialogActions,\n  MatDialogClose,\n  MatDialogContent,\n  MatDialogTitle,\n} from './dialog-content-directives';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    OverlayModule,\n    PortalModule,\n    MatCommonModule,\n  ],\n  exports: [\n    MatDialogContainer,\n    MatDialogClose,\n    MatDialogTitle,\n    MatDialogContent,\n    MatDialogActions,\n    MatCommonModule,\n  ],\n  declarations: [\n    MatDialogContainer,\n    MatDialogClose,\n    MatDialogTitle,\n    MatDialogActions,\n    MatDialogContent,\n  ],\n  providers: [\n    MatDialog,\n    MAT_DIALOG_SCROLL_STRATEGY_PROVIDER,\n  ],\n  entryComponents: [MatDialogContainer],\n})\nexport class MatDialogModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CdkTextareaAutosize} from '@angular/cdk/text-field';\nimport {Directive, Input} from '@angular/core';\n\n\n/**\n * Directive to automatically resize a textarea to fit its content.\n * @deletion-target 7.0.0 deprecate in favor of `cdkTextareaAutosize`.\n */\n@Directive({\n  selector: 'textarea[mat-autosize], textarea[matTextareaAutosize]',\n  exportAs: 'matTextareaAutosize',\n  inputs: ['cdkAutosizeMinRows', 'cdkAutosizeMaxRows'],\n  host: {\n    'class': 'cdk-textarea-autosize mat-autosize',\n    // Textarea elements that have the directive applied should have a single row by default.\n    // Browsers normally show two rows by default and therefore this limits the minRows binding.\n    'rows': '1',\n    '(input)': '_noopInputHandler()',\n  },\n})\nexport class MatTextareaAutosize extends CdkTextareaAutosize {\n  @Input()\n  get matAutosizeMinRows(): number { return this.minRows; }\n  set matAutosizeMinRows(value: number) { this.minRows = value; }\n\n  @Input()\n  get matAutosizeMaxRows(): number { return this.maxRows; }\n  set matAutosizeMaxRows(value: number) { this.maxRows = value; }\n\n  @Input('mat-autosize')\n  get matAutosize(): boolean { return this.enabled; }\n  set matAutosize(value: boolean) { this.enabled = value; }\n\n  @Input()\n  get matTextareaAutosize(): boolean { return this.enabled; }\n  set matTextareaAutosize(value: boolean) { this.enabled = value; }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {InjectionToken} from '@angular/core';\n\n\n/**\n * This token is used to inject the object whose value should be set into `MatInput`. If none is\n * provided, the native `HTMLInputElement` is used. Directives like `MatDatepickerInput` can provide\n * themselves for this token, in order to make `MatInput` delegate the getting and setting of the\n * value to them.\n */\nexport const MAT_INPUT_VALUE_ACCESSOR =\n    new InjectionToken<{value: any}>('MAT_INPUT_VALUE_ACCESSOR');\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {getSupportedInputTypes, Platform} from '@angular/cdk/platform';\nimport {\n  Directive,\n  DoCheck,\n  ElementRef,\n  Inject,\n  Input,\n  OnChanges,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Self,\n  NgZone,\n} from '@angular/core';\nimport {FormGroupDirective, NgControl, NgForm} from '@angular/forms';\nimport {CanUpdateErrorState, ErrorStateMatcher, mixinErrorState} from '@angular/material/core';\nimport {MatFormFieldControl} from '@angular/material/form-field';\nimport {Subject} from 'rxjs';\nimport {AutofillMonitor} from '@angular/cdk/text-field';\nimport {getMatInputUnsupportedTypeError} from './input-errors';\nimport {MAT_INPUT_VALUE_ACCESSOR} from './input-value-accessor';\n\n\n// Invalid input type. Using one of these will throw an MatInputUnsupportedTypeError.\nconst MAT_INPUT_INVALID_TYPES = [\n  'button',\n  'checkbox',\n  'file',\n  'hidden',\n  'image',\n  'radio',\n  'range',\n  'reset',\n  'submit'\n];\n\nlet nextUniqueId = 0;\n\n// Boilerplate for applying mixins to MatInput.\n/** @docs-private */\nexport class MatInputBase {\n  constructor(public _defaultErrorStateMatcher: ErrorStateMatcher,\n              public _parentForm: NgForm,\n              public _parentFormGroup: FormGroupDirective,\n              /** @docs-private */\n              public ngControl: NgControl) {}\n}\nexport const _MatInputMixinBase = mixinErrorState(MatInputBase);\n\n/** Directive that allows a native input to work inside a `MatFormField`. */\n@Directive({\n  selector: `input[matInput], textarea[matInput]`,\n  exportAs: 'matInput',\n  host: {\n    /**\n     * @deletion-target 7.0.0 remove .mat-form-field-autofill-control in favor of AutofillMonitor.\n     */\n    'class': 'mat-input-element mat-form-field-autofill-control',\n    '[class.mat-input-server]': '_isServer',\n    // Native input properties that are overwritten by Angular inputs need to be synced with\n    // the native input element. Otherwise property bindings for those don't work.\n    '[attr.id]': 'id',\n    '[attr.placeholder]': 'placeholder',\n    '[disabled]': 'disabled',\n    '[required]': 'required',\n    '[readonly]': 'readonly',\n    '[attr.aria-describedby]': '_ariaDescribedby || null',\n    '[attr.aria-invalid]': 'errorState',\n    '[attr.aria-required]': 'required.toString()',\n    '(blur)': '_focusChanged(false)',\n    '(focus)': '_focusChanged(true)',\n    '(input)': '_onInput()',\n  },\n  providers: [{provide: MatFormFieldControl, useExisting: MatInput}],\n})\nexport class MatInput extends _MatInputMixinBase implements MatFormFieldControl<any>, OnChanges,\n    OnDestroy, OnInit, DoCheck, CanUpdateErrorState {\n  protected _uid = `mat-input-${nextUniqueId++}`;\n  protected _previousNativeValue: any;\n  private _inputValueAccessor: {value: any};\n  /** The aria-describedby attribute on the input for improved a11y. */\n  _ariaDescribedby: string;\n\n  /** Whether the component is being rendered on the server. */\n  _isServer = false;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  focused: boolean = false;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  readonly stateChanges: Subject<void> = new Subject<void>();\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  controlType: string = 'mat-input';\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  autofilled = false;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get disabled(): boolean {\n    if (this.ngControl && this.ngControl.disabled !== null) {\n      return this.ngControl.disabled;\n    }\n    return this._disabled;\n  }\n  set disabled(value: boolean) {\n    this._disabled = coerceBooleanProperty(value);\n\n    // Browsers may not fire the blur event if the input is disabled too quickly.\n    // Reset from here to ensure that the element doesn't become stuck.\n    if (this.focused) {\n      this.focused = false;\n      this.stateChanges.next();\n    }\n  }\n  protected _disabled = false;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get id(): string { return this._id; }\n  set id(value: string) { this._id = value || this._uid; }\n  protected _id: string;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input() placeholder: string;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get required(): boolean { return this._required; }\n  set required(value: boolean) { this._required = coerceBooleanProperty(value); }\n  protected _required = false;\n\n  /** Input type of the element. */\n  @Input()\n  get type(): string { return this._type; }\n  set type(value: string) {\n    this._type = value || 'text';\n    this._validateType();\n\n    // When using Angular inputs, developers are no longer able to set the properties on the native\n    // input element. To ensure that bindings for `type` work, we need to sync the setter\n    // with the native property. Textarea elements don't support the type property or attribute.\n    if (!this._isTextarea() && getSupportedInputTypes().has(this._type)) {\n      this._elementRef.nativeElement.type = this._type;\n    }\n  }\n  protected _type = 'text';\n\n  /** An object used to control when error messages are shown. */\n  @Input() errorStateMatcher: ErrorStateMatcher;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get value(): string { return this._inputValueAccessor.value; }\n  set value(value: string) {\n    if (value !== this.value) {\n      this._inputValueAccessor.value = value;\n      this.stateChanges.next();\n    }\n  }\n\n  /** Whether the element is readonly. */\n  @Input()\n  get readonly(): boolean { return this._readonly; }\n  set readonly(value: boolean) { this._readonly = coerceBooleanProperty(value); }\n  private _readonly = false;\n\n  protected _neverEmptyInputTypes = [\n    'date',\n    'datetime',\n    'datetime-local',\n    'month',\n    'time',\n    'week'\n  ].filter(t => getSupportedInputTypes().has(t));\n\n  constructor(protected _elementRef: ElementRef,\n              protected _platform: Platform,\n              /** @docs-private */\n              @Optional() @Self() public ngControl: NgControl,\n              @Optional() _parentForm: NgForm,\n              @Optional() _parentFormGroup: FormGroupDirective,\n              _defaultErrorStateMatcher: ErrorStateMatcher,\n              @Optional() @Self() @Inject(MAT_INPUT_VALUE_ACCESSOR) inputValueAccessor: any,\n              private _autofillMonitor: AutofillMonitor,\n              ngZone: NgZone) {\n    super(_defaultErrorStateMatcher, _parentForm, _parentFormGroup, ngControl);\n    // If no input value accessor was explicitly specified, use the element as the input value\n    // accessor.\n    this._inputValueAccessor = inputValueAccessor || this._elementRef.nativeElement;\n\n    this._previousNativeValue = this.value;\n\n    // Force setter to be called in case id was not specified.\n    this.id = this.id;\n\n    // On some versions of iOS the caret gets stuck in the wrong place when holding down the delete\n    // key. In order to get around this we need to \"jiggle\" the caret loose. Since this bug only\n    // exists on iOS, we only bother to install the listener on iOS.\n    if (_platform.IOS) {\n      ngZone.runOutsideAngular(() => {\n        _elementRef.nativeElement.addEventListener('keyup', (event: Event) => {\n          let el = event.target as HTMLInputElement;\n          if (!el.value && !el.selectionStart && !el.selectionEnd) {\n            // Note: Just setting `0, 0` doesn't fix the issue. Setting\n            // `1, 1` fixes it for the first time that you type text and\n            // then hold delete. Toggling to `1, 1` and then back to\n            // `0, 0` seems to completely fix it.\n            el.setSelectionRange(1, 1);\n            el.setSelectionRange(0, 0);\n          }\n        });\n      });\n    }\n\n    this._isServer = !this._platform.isBrowser;\n  }\n\n  ngOnInit() {\n    this._autofillMonitor.monitor(this._elementRef.nativeElement).subscribe(event => {\n      this.autofilled = event.isAutofilled;\n      this.stateChanges.next();\n    });\n  }\n\n  ngOnChanges() {\n    this.stateChanges.next();\n  }\n\n  ngOnDestroy() {\n    this.stateChanges.complete();\n    this._autofillMonitor.stopMonitoring(this._elementRef.nativeElement);\n  }\n\n  ngDoCheck() {\n    if (this.ngControl) {\n      // We need to re-evaluate this on every change detection cycle, because there are some\n      // error triggers that we can't subscribe to (e.g. parent form submissions). This means\n      // that whatever logic is in here has to be super lean or we risk destroying the performance.\n      this.updateErrorState();\n    }\n\n    // We need to dirty-check the native element's value, because there are some cases where\n    // we won't be notified when it changes (e.g. the consumer isn't using forms or they're\n    // updating the value using `emitEvent: false`).\n    this._dirtyCheckNativeValue();\n  }\n\n  /** Focuses the input. */\n  focus(): void { this._elementRef.nativeElement.focus(); }\n\n  /** Callback for the cases where the focused state of the input changes. */\n  _focusChanged(isFocused: boolean) {\n    if (isFocused !== this.focused && !this.readonly) {\n      this.focused = isFocused;\n      this.stateChanges.next();\n    }\n  }\n\n  _onInput() {\n    // This is a noop function and is used to let Angular know whenever the value changes.\n    // Angular will run a new change detection each time the `input` event has been dispatched.\n    // It's necessary that Angular recognizes the value change, because when floatingLabel\n    // is set to false and Angular forms aren't used, the placeholder won't recognize the\n    // value changes and will not disappear.\n    // Listening to the input event wouldn't be necessary when the input is using the\n    // FormsModule or ReactiveFormsModule, because Angular forms also listens to input events.\n  }\n\n  /** Does some manual dirty checking on the native input `value` property. */\n  protected _dirtyCheckNativeValue() {\n    const newValue = this.value;\n\n    if (this._previousNativeValue !== newValue) {\n      this._previousNativeValue = newValue;\n      this.stateChanges.next();\n    }\n  }\n\n  /** Make sure the input is a supported type. */\n  protected _validateType() {\n    if (MAT_INPUT_INVALID_TYPES.indexOf(this._type) > -1) {\n      throw getMatInputUnsupportedTypeError(this._type);\n    }\n  }\n\n  /** Checks whether the input type is one of the types that are never empty. */\n  protected _isNeverEmpty() {\n    return this._neverEmptyInputTypes.indexOf(this._type) > -1;\n  }\n\n  /** Checks whether the input is invalid based on the native validation. */\n  protected _isBadInput() {\n    // The `validity` property won't be present on platform-server.\n    let validity = (this._elementRef.nativeElement as HTMLInputElement).validity;\n    return validity && validity.badInput;\n  }\n\n  /** Determines if the component host is a textarea. */\n  protected _isTextarea() {\n    return this._elementRef.nativeElement.nodeName.toLowerCase() === 'textarea';\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  get empty(): boolean {\n    return !this._isNeverEmpty() && !this._elementRef.nativeElement.value && !this._isBadInput() &&\n        !this.autofilled;\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  get shouldLabelFloat(): boolean { return this.focused || !this.empty; }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  setDescribedByIds(ids: string[]) { this._ariaDescribedby = ids.join(' '); }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  onContainerClick() { this.focus(); }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {TextFieldModule} from '@angular/cdk/text-field';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {ErrorStateMatcher} from '@angular/material/core';\nimport {MatFormFieldModule} from '@angular/material/form-field';\nimport {MatTextareaAutosize} from './autosize';\nimport {MatInput} from './input';\n\n\n@NgModule({\n  declarations: [MatInput, MatTextareaAutosize],\n  imports: [\n    CommonModule,\n    TextFieldModule,\n    MatFormFieldModule,\n  ],\n  exports: [\n    TextFieldModule,\n    // We re-export the `MatFormFieldModule` since `MatInput` will almost always\n    // be used together with `MatFormField`.\n    MatFormFieldModule,\n    MatInput,\n    MatTextareaAutosize,\n  ],\n  providers: [ErrorStateMatcher],\n})\nexport class MatInputModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable} from '@angular/core';\nimport {Subject} from 'rxjs';\n\n\n/** Datepicker data that requires internationalization. */\n@Injectable({providedIn: 'root'})\nexport class MatDatepickerIntl {\n  /**\n   * Stream that emits whenever the labels here are changed. Use this to notify\n   * components if the labels have changed after initialization.\n   */\n  readonly changes: Subject<void> = new Subject<void>();\n\n  /** A label for the calendar popup (used by screen readers). */\n  calendarLabel: string = 'Calendar';\n\n  /** A label for the button used to open the calendar popup (used by screen readers). */\n  openCalendarLabel: string = 'Open calendar';\n\n  /** A label for the previous month button (used by screen readers). */\n  prevMonthLabel: string = 'Previous month';\n\n  /** A label for the next month button (used by screen readers). */\n  nextMonthLabel: string = 'Next month';\n\n  /** A label for the previous year button (used by screen readers). */\n  prevYearLabel: string = 'Previous year';\n\n  /** A label for the next year button (used by screen readers). */\n  nextYearLabel: string = 'Next year';\n\n  /** A label for the previous multi-year button (used by screen readers). */\n  prevMultiYearLabel: string = 'Previous 20 years';\n\n  /** A label for the next multi-year button (used by screen readers). */\n  nextMultiYearLabel: string = 'Next 20 years';\n\n  /** A label for the 'switch to month view' button (used by screen readers). */\n  switchToMonthViewLabel: string = 'Choose date';\n\n  /** A label for the 'switch to year view' button (used by screen readers). */\n  switchToMultiYearViewLabel: string = 'Choose month and year';\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  EventEmitter,\n  Input,\n  Output,\n  ViewEncapsulation,\n  NgZone,\n} from '@angular/core';\nimport {take} from 'rxjs/operators';\n\n/**\n * An internal class that represents the data corresponding to a single calendar cell.\n * @docs-private\n */\nexport class MatCalendarCell {\n  constructor(public value: number,\n              public displayValue: string,\n              public ariaLabel: string,\n              public enabled: boolean) {}\n}\n\n\n/**\n * An internal component used to display calendar data in a table.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: '[mat-calendar-body]',\n  templateUrl: 'calendar-body.html',\n  styleUrls: ['calendar-body.css'],\n  host: {\n    'class': 'mat-calendar-body',\n    'role': 'grid',\n    'attr.aria-readonly': 'true'\n  },\n  exportAs: 'matCalendarBody',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatCalendarBody {\n  /** The label for the table. (e.g. \"Jan 2017\"). */\n  @Input() label: string;\n\n  /** The cells to display in the table. */\n  @Input() rows: MatCalendarCell[][];\n\n  /** The value in the table that corresponds to today. */\n  @Input() todayValue: number;\n\n  /** The value in the table that is currently selected. */\n  @Input() selectedValue: number;\n\n  /** The minimum number of free cells needed to fit the label in the first row. */\n  @Input() labelMinRequiredCells: number;\n\n  /** The number of columns in the table. */\n  @Input() numCols = 7;\n\n  /** Whether to allow selection of disabled cells. */\n  @Input() allowDisabledSelection = false;\n\n  /** The cell number of the active cell in the table. */\n  @Input() activeCell = 0;\n\n  /**\n   * The aspect ratio (width / height) to use for the cells in the table. This aspect ratio will be\n   * maintained even as the table resizes.\n   */\n  @Input() cellAspectRatio = 1;\n\n  /** Emits when a new value is selected. */\n  @Output() readonly selectedValueChange: EventEmitter<number> = new EventEmitter<number>();\n\n  constructor(private _elementRef: ElementRef, private _ngZone: NgZone) { }\n\n  _cellClicked(cell: MatCalendarCell): void {\n    if (!this.allowDisabledSelection && !cell.enabled) {\n      return;\n    }\n    this.selectedValueChange.emit(cell.value);\n  }\n\n  /** The number of blank cells to put at the beginning for the first row. */\n  get _firstRowOffset(): number {\n    return this.rows && this.rows.length && this.rows[0].length ?\n        this.numCols - this.rows[0].length : 0;\n  }\n\n  _isActiveCell(rowIndex: number, colIndex: number): boolean {\n    let cellNumber = rowIndex * this.numCols + colIndex;\n\n    // Account for the fact that the first row may not have as many cells.\n    if (rowIndex) {\n      cellNumber -= this._firstRowOffset;\n    }\n\n    return cellNumber == this.activeCell;\n  }\n\n  /** Focuses the active cell after the microtask queue is empty. */\n  _focusActiveCell() {\n    this._ngZone.runOutsideAngular(() => {\n      this._ngZone.onStable.asObservable().pipe(take(1)).subscribe(() => {\n        this._elementRef.nativeElement.querySelector('.mat-calendar-body-active').focus();\n      });\n    });\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  DOWN_ARROW,\n  END,\n  ENTER,\n  HOME,\n  LEFT_ARROW,\n  PAGE_DOWN,\n  PAGE_UP,\n  RIGHT_ARROW,\n  UP_ARROW,\n} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  EventEmitter,\n  Inject,\n  Input,\n  Optional,\n  Output,\n  ViewEncapsulation,\n  ViewChild,\n} from '@angular/core';\nimport {DateAdapter, MAT_DATE_FORMATS, MatDateFormats} from '@angular/material/core';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {MatCalendarBody, MatCalendarCell} from './calendar-body';\nimport {createMissingDateImplError} from './datepicker-errors';\n\n\nconst DAYS_PER_WEEK = 7;\n\n\n/**\n * An internal component used to display a single month in the datepicker.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-month-view',\n  templateUrl: 'month-view.html',\n  exportAs: 'matMonthView',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class MatMonthView<D> implements AfterContentInit {\n  /**\n   * The date to display in this month view (everything other than the month and year is ignored).\n   */\n  @Input()\n  get activeDate(): D { return this._activeDate; }\n  set activeDate(value: D) {\n    const oldActiveDate = this._activeDate;\n    const validDate =\n        this._getValidDateOrNull(this._dateAdapter.deserialize(value)) || this._dateAdapter.today();\n    this._activeDate = this._dateAdapter.clampDate(validDate, this.minDate, this.maxDate);\n    if (!this._hasSameMonthAndYear(oldActiveDate, this._activeDate)) {\n      this._init();\n    }\n  }\n  private _activeDate: D;\n\n  /** The currently selected date. */\n  @Input()\n  get selected(): D | null { return this._selected; }\n  set selected(value: D | null) {\n    this._selected = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n    this._selectedDate = this._getDateInCurrentMonth(this._selected);\n  }\n  private _selected: D | null;\n\n  /** The minimum selectable date. */\n  @Input()\n  get minDate(): D | null { return this._minDate; }\n  set minDate(value: D | null) {\n    this._minDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _minDate: D | null;\n\n  /** The maximum selectable date. */\n  @Input()\n  get maxDate(): D | null { return this._maxDate; }\n  set maxDate(value: D | null) {\n    this._maxDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _maxDate: D | null;\n\n  /** A function used to filter which dates are selectable. */\n  @Input() dateFilter: (date: D) => boolean;\n\n  /** Emits when a new date is selected. */\n  @Output() readonly selectedChange: EventEmitter<D | null> = new EventEmitter<D | null>();\n\n  /** Emits when any date is selected. */\n  @Output() readonly _userSelection: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Emits when any date is activated. */\n  @Output() readonly activeDateChange: EventEmitter<D> = new EventEmitter<D>();\n\n  /** The body of calendar table */\n  @ViewChild(MatCalendarBody) _matCalendarBody: MatCalendarBody;\n\n  /** The label for this month (e.g. \"January 2017\"). */\n  _monthLabel: string;\n\n  /** Grid of calendar cells representing the dates of the month. */\n  _weeks: MatCalendarCell[][];\n\n  /** The number of blank cells in the first row before the 1st of the month. */\n  _firstWeekOffset: number;\n\n  /**\n   * The date of the month that the currently selected Date falls on.\n   * Null if the currently selected Date is in another month.\n   */\n  _selectedDate: number | null;\n\n  /** The date of the month that today falls on. Null if today is in another month. */\n  _todayDate: number | null;\n\n  /** The names of the weekdays. */\n  _weekdays: {long: string, narrow: string}[];\n\n  constructor(private _changeDetectorRef: ChangeDetectorRef,\n              @Optional() @Inject(MAT_DATE_FORMATS) private _dateFormats: MatDateFormats,\n              @Optional() public _dateAdapter: DateAdapter<D>,\n              @Optional() private _dir?: Directionality) {\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n    if (!this._dateFormats) {\n      throw createMissingDateImplError('MAT_DATE_FORMATS');\n    }\n\n    const firstDayOfWeek = this._dateAdapter.getFirstDayOfWeek();\n    const narrowWeekdays = this._dateAdapter.getDayOfWeekNames('narrow');\n    const longWeekdays = this._dateAdapter.getDayOfWeekNames('long');\n\n    // Rotate the labels for days of the week based on the configured first day of the week.\n    let weekdays = longWeekdays.map((long, i) => {\n      return {long, narrow: narrowWeekdays[i]};\n    });\n    this._weekdays = weekdays.slice(firstDayOfWeek).concat(weekdays.slice(0, firstDayOfWeek));\n\n    this._activeDate = this._dateAdapter.today();\n  }\n\n  ngAfterContentInit() {\n    this._init();\n  }\n\n  /** Handles when a new date is selected. */\n  _dateSelected(date: number) {\n    if (this._selectedDate != date) {\n      const selectedYear = this._dateAdapter.getYear(this.activeDate);\n      const selectedMonth = this._dateAdapter.getMonth(this.activeDate);\n      const selectedDate = this._dateAdapter.createDate(selectedYear, selectedMonth, date);\n\n      this.selectedChange.emit(selectedDate);\n    }\n\n    this._userSelection.emit();\n  }\n\n  /** Handles keydown events on the calendar body when calendar is in month view. */\n  _handleCalendarBodyKeydown(event: KeyboardEvent): void {\n    // TODO(mmalerba): We currently allow keyboard navigation to disabled dates, but just prevent\n    // disabled ones from being selected. This may not be ideal, we should look into whether\n    // navigation should skip over disabled dates, and if so, how to implement that efficiently.\n\n    const oldActiveDate = this._activeDate;\n\n    const isRtl = this._isRtl();\n    switch (event.keyCode) {\n      case LEFT_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate, isRtl ? 1 : -1);\n        break;\n      case RIGHT_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate, isRtl ? -1 : 1);\n        break;\n      case UP_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate, -7);\n        break;\n      case DOWN_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate, 7);\n        break;\n      case HOME:\n        this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate,\n            1 - this._dateAdapter.getDate(this._activeDate));\n        break;\n      case END:\n        this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate,\n            (this._dateAdapter.getNumDaysInMonth(this._activeDate) -\n              this._dateAdapter.getDate(this._activeDate)));\n        break;\n      case PAGE_UP:\n        this.activeDate = event.altKey ?\n            this._dateAdapter.addCalendarYears(this._activeDate, -1) :\n            this._dateAdapter.addCalendarMonths(this._activeDate, -1);\n        break;\n      case PAGE_DOWN:\n        this.activeDate = event.altKey ?\n            this._dateAdapter.addCalendarYears(this._activeDate, 1) :\n            this._dateAdapter.addCalendarMonths(this._activeDate, 1);\n        break;\n      case ENTER:\n        if (!this.dateFilter || this.dateFilter(this._activeDate)) {\n          this._dateSelected(this._dateAdapter.getDate(this._activeDate));\n          this._userSelection.emit();\n          // Prevent unexpected default actions such as form submission.\n          event.preventDefault();\n        }\n        return;\n      default:\n        // Don't prevent default or focus active cell on keys that we don't explicitly handle.\n        return;\n    }\n\n    if (this._dateAdapter.compareDate(oldActiveDate, this.activeDate)) {\n      this.activeDateChange.emit(this.activeDate);\n    }\n\n    this._focusActiveCell();\n    // Prevent unexpected default actions such as form submission.\n    event.preventDefault();\n  }\n\n  /** Initializes this month view. */\n  _init() {\n    this._selectedDate = this._getDateInCurrentMonth(this.selected);\n    this._todayDate = this._getDateInCurrentMonth(this._dateAdapter.today());\n    this._monthLabel =\n        this._dateAdapter.getMonthNames('short')[this._dateAdapter.getMonth(this.activeDate)]\n            .toLocaleUpperCase();\n\n    let firstOfMonth = this._dateAdapter.createDate(this._dateAdapter.getYear(this.activeDate),\n        this._dateAdapter.getMonth(this.activeDate), 1);\n    this._firstWeekOffset =\n        (DAYS_PER_WEEK + this._dateAdapter.getDayOfWeek(firstOfMonth) -\n         this._dateAdapter.getFirstDayOfWeek()) % DAYS_PER_WEEK;\n\n    this._createWeekCells();\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Focuses the active cell after the microtask queue is empty. */\n  _focusActiveCell() {\n    this._matCalendarBody._focusActiveCell();\n  }\n\n  /** Creates MatCalendarCells for the dates in this month. */\n  private _createWeekCells() {\n    const daysInMonth = this._dateAdapter.getNumDaysInMonth(this.activeDate);\n    const dateNames = this._dateAdapter.getDateNames();\n    this._weeks = [[]];\n    for (let i = 0, cell = this._firstWeekOffset; i < daysInMonth; i++, cell++) {\n      if (cell == DAYS_PER_WEEK) {\n        this._weeks.push([]);\n        cell = 0;\n      }\n      const date = this._dateAdapter.createDate(\n            this._dateAdapter.getYear(this.activeDate),\n            this._dateAdapter.getMonth(this.activeDate), i + 1);\n      const enabled = this._shouldEnableDate(date);\n      const ariaLabel = this._dateAdapter.format(date, this._dateFormats.display.dateA11yLabel);\n      this._weeks[this._weeks.length - 1]\n          .push(new MatCalendarCell(i + 1, dateNames[i], ariaLabel, enabled));\n    }\n  }\n\n  /** Date filter for the month */\n  private _shouldEnableDate(date: D): boolean {\n    return !!date &&\n        (!this.dateFilter || this.dateFilter(date)) &&\n        (!this.minDate || this._dateAdapter.compareDate(date, this.minDate) >= 0) &&\n        (!this.maxDate || this._dateAdapter.compareDate(date, this.maxDate) <= 0);\n  }\n\n  /**\n   * Gets the date in this month that the given Date falls on.\n   * Returns null if the given Date is in another month.\n   */\n  private _getDateInCurrentMonth(date: D | null): number | null {\n    return date && this._hasSameMonthAndYear(date, this.activeDate) ?\n        this._dateAdapter.getDate(date) : null;\n  }\n\n  /** Checks whether the 2 dates are non-null and fall within the same month of the same year. */\n  private _hasSameMonthAndYear(d1: D | null, d2: D | null): boolean {\n    return !!(d1 && d2 && this._dateAdapter.getMonth(d1) == this._dateAdapter.getMonth(d2) &&\n              this._dateAdapter.getYear(d1) == this._dateAdapter.getYear(d2));\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n\n  /** Determines whether the user has the RTL layout direction. */\n  private _isRtl() {\n    return this._dir && this._dir.value === 'rtl';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor, FocusOrigin} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  AfterViewInit,\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  OnDestroy,\n  Optional,\n  Output,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {\n  CanColor,\n  CanDisable,\n  CanDisableRipple,\n  HasTabIndex,\n  MatRipple,\n  mixinColor,\n  mixinDisabled,\n  mixinDisableRipple,\n  mixinTabIndex,\n  RippleRef,\n} from '@angular/material/core';\nimport {MAT_CHECKBOX_CLICK_ACTION, MatCheckboxClickAction} from './checkbox-config';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\n\n\n// Increasing integer for generating unique ids for checkbox components.\nlet nextUniqueId = 0;\n\n/**\n * Provider Expression that allows mat-checkbox to register as a ControlValueAccessor.\n * This allows it to support [(ngModel)].\n * @docs-private\n */\nexport const MAT_CHECKBOX_CONTROL_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatCheckbox),\n  multi: true\n};\n\n/**\n * Represents the different states that require custom transitions between them.\n * @docs-private\n */\nexport enum TransitionCheckState {\n  /** The initial state of the component before any user interaction. */\n  Init,\n  /** The state representing the component when it's becoming checked. */\n  Checked,\n  /** The state representing the component when it's becoming unchecked. */\n  Unchecked,\n  /** The state representing the component when it's becoming indeterminate. */\n  Indeterminate\n}\n\n/** Change event object emitted by MatCheckbox. */\nexport class MatCheckboxChange {\n  /** The source MatCheckbox of the event. */\n  source: MatCheckbox;\n  /** The new `checked` value of the checkbox. */\n  checked: boolean;\n}\n\n// Boilerplate for applying mixins to MatCheckbox.\n/** @docs-private */\nexport class MatCheckboxBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatCheckboxMixinBase =\n  mixinTabIndex(mixinColor(mixinDisableRipple(mixinDisabled(MatCheckboxBase)), 'accent'));\n\n\n/**\n * A material design checkbox component. Supports all of the functionality of an HTML5 checkbox,\n * and exposes a similar API. A MatCheckbox can be either checked, unchecked, indeterminate, or\n * disabled. Note that all additional accessibility attributes are taken care of by the component,\n * so there is no need to provide them yourself. However, if you want to omit a label and still\n * have the checkbox be accessible, you may supply an [aria-label] input.\n * See: https://material.io/design/components/selection-controls.html\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-checkbox',\n  templateUrl: 'checkbox.html',\n  styleUrls: ['checkbox.css'],\n  exportAs: 'matCheckbox',\n  host: {\n    'class': 'mat-checkbox',\n    '[id]': 'id',\n    '[class.mat-checkbox-indeterminate]': 'indeterminate',\n    '[class.mat-checkbox-checked]': 'checked',\n    '[class.mat-checkbox-disabled]': 'disabled',\n    '[class.mat-checkbox-label-before]': 'labelPosition == \"before\"',\n    '[class._mat-animation-noopable]': `_animationMode === 'NoopAnimations'`,\n  },\n  providers: [MAT_CHECKBOX_CONTROL_VALUE_ACCESSOR],\n  inputs: ['disableRipple', 'color', 'tabIndex'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class MatCheckbox extends _MatCheckboxMixinBase implements ControlValueAccessor,\n    AfterViewInit, OnDestroy, CanColor, CanDisable, HasTabIndex, CanDisableRipple {\n\n  /**\n   * Attached to the aria-label attribute of the host element. In most cases, arial-labelledby will\n   * take precedence so this may be omitted.\n   */\n  @Input('aria-label') ariaLabel: string = '';\n\n  /**\n   * Users can specify the `aria-labelledby` attribute which will be forwarded to the input element\n   */\n  @Input('aria-labelledby') ariaLabelledby: string | null = null;\n\n  private _uniqueId: string = `mat-checkbox-${++nextUniqueId}`;\n\n  /** A unique id for the checkbox input. If none is supplied, it will be auto-generated. */\n  @Input() id: string = this._uniqueId;\n\n  /** Returns the unique id for the visual hidden input. */\n  get inputId(): string { return `${this.id || this._uniqueId}-input`; }\n\n  /** Whether the checkbox is required. */\n  @Input()\n  get required(): boolean { return this._required; }\n  set required(value: boolean) { this._required = coerceBooleanProperty(value); }\n  private _required: boolean;\n\n  /** Whether the label should appear after or before the checkbox. Defaults to 'after' */\n  @Input() labelPosition: 'before' | 'after' = 'after';\n\n  /** Name value will be applied to the input element if present */\n  @Input() name: string | null = null;\n\n  /** Event emitted when the checkbox's `checked` value changes. */\n  @Output() readonly change: EventEmitter<MatCheckboxChange> =\n      new EventEmitter<MatCheckboxChange>();\n\n  /** Event emitted when the checkbox's `indeterminate` value changes. */\n  @Output() readonly indeterminateChange: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n  /** The value attribute of the native input element */\n  @Input() value: string;\n\n  /** The native `<input type=\"checkbox\">` element */\n  @ViewChild('input') _inputElement: ElementRef;\n\n  /** Reference to the ripple instance of the checkbox. */\n  @ViewChild(MatRipple) ripple: MatRipple;\n\n  /**\n   * Called when the checkbox is blurred. Needed to properly implement ControlValueAccessor.\n   * @docs-private\n   */\n  _onTouched: () => any = () => {};\n\n  private _currentAnimationClass: string = '';\n\n  private _currentCheckState: TransitionCheckState = TransitionCheckState.Init;\n\n  private _controlValueAccessorChangeFn: (value: any) => void = () => {};\n\n  /** Reference to the focused state ripple. */\n  private _focusRipple: RippleRef | null;\n\n  constructor(elementRef: ElementRef,\n              private _changeDetectorRef: ChangeDetectorRef,\n              private _focusMonitor: FocusMonitor,\n              @Attribute('tabindex') tabIndex: string,\n              @Optional() @Inject(MAT_CHECKBOX_CLICK_ACTION)\n                  private _clickAction: MatCheckboxClickAction,\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode?: string) {\n    super(elementRef);\n\n    this.tabIndex = parseInt(tabIndex) || 0;\n  }\n\n  ngAfterViewInit() {\n    this._focusMonitor\n      .monitor(this._inputElement.nativeElement)\n      .subscribe(focusOrigin => this._onInputFocusChange(focusOrigin));\n  }\n\n  ngOnDestroy() {\n    this._focusMonitor.stopMonitoring(this._inputElement.nativeElement);\n  }\n\n  /**\n   * Whether the checkbox is checked.\n   */\n  @Input()\n  get checked(): boolean { return this._checked; }\n  set checked(value: boolean) {\n    if (value != this.checked) {\n      this._checked = value;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n  private _checked: boolean = false;\n\n  /**\n   * Whether the checkbox is disabled. This fully overrides the implementation provided by\n   * mixinDisabled, but the mixin is still required because mixinTabIndex requires it.\n   */\n  @Input()\n  get disabled() { return this._disabled; }\n  set disabled(value: any) {\n    if (value != this.disabled) {\n      this._disabled = value;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n  private _disabled: boolean = false;\n\n  /**\n   * Whether the checkbox is indeterminate. This is also known as \"mixed\" mode and can be used to\n   * represent a checkbox with three states, e.g. a checkbox that represents a nested list of\n   * checkable items. Note that whenever checkbox is manually clicked, indeterminate is immediately\n   * set to false.\n   */\n  @Input()\n  get indeterminate(): boolean { return this._indeterminate; }\n  set indeterminate(value: boolean) {\n    const changed = value != this._indeterminate;\n    this._indeterminate = value;\n\n    if (changed) {\n      if (this._indeterminate) {\n        this._transitionCheckState(TransitionCheckState.Indeterminate);\n      } else {\n        this._transitionCheckState(\n          this.checked ? TransitionCheckState.Checked : TransitionCheckState.Unchecked);\n      }\n      this.indeterminateChange.emit(this._indeterminate);\n    }\n  }\n  private _indeterminate: boolean = false;\n\n  _isRippleDisabled() {\n    return this.disableRipple || this.disabled;\n  }\n\n  /** Method being called whenever the label text changes. */\n  _onLabelTextChange() {\n    // This method is getting called whenever the label of the checkbox changes.\n    // Since the checkbox uses the OnPush strategy we need to notify it about the change\n    // that has been recognized by the cdkObserveContent directive.\n    this._changeDetectorRef.markForCheck();\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  writeValue(value: any) {\n    this.checked = !!value;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnChange(fn: (value: any) => void) {\n    this._controlValueAccessorChangeFn = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnTouched(fn: any) {\n    this._onTouched = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  setDisabledState(isDisabled: boolean) {\n    this.disabled = isDisabled;\n  }\n\n  _getAriaChecked(): 'true' | 'false' | 'mixed' {\n    return this.checked ? 'true' : (this.indeterminate ? 'mixed' : 'false');\n  }\n\n  private _transitionCheckState(newState: TransitionCheckState) {\n    let oldState = this._currentCheckState;\n    let element: HTMLElement = this._elementRef.nativeElement;\n\n    if (oldState === newState) {\n      return;\n    }\n    if (this._currentAnimationClass.length > 0) {\n      element.classList.remove(this._currentAnimationClass);\n    }\n\n    this._currentAnimationClass = this._getAnimationClassForCheckStateTransition(\n        oldState, newState);\n    this._currentCheckState = newState;\n\n    if (this._currentAnimationClass.length > 0) {\n      element.classList.add(this._currentAnimationClass);\n    }\n  }\n\n  private _emitChangeEvent() {\n    let event = new MatCheckboxChange();\n    event.source = this;\n    event.checked = this.checked;\n\n    this._controlValueAccessorChangeFn(this.checked);\n    this.change.emit(event);\n  }\n\n  /** Function is called whenever the focus changes for the input element. */\n  private _onInputFocusChange(focusOrigin: FocusOrigin) {\n    // TODO(paul): support `program`. See https://github.com/angular/material2/issues/9889\n    if (!this._focusRipple && focusOrigin === 'keyboard') {\n      this._focusRipple = this.ripple.launch(0, 0, {persistent: true});\n    } else if (!focusOrigin) {\n      if (this._focusRipple) {\n        this._focusRipple.fadeOut();\n        this._focusRipple = null;\n      }\n\n      this._onTouched();\n    }\n  }\n\n  /** Toggles the `checked` state of the checkbox. */\n  toggle(): void {\n    this.checked = !this.checked;\n  }\n\n  /**\n   * Event handler for checkbox input element.\n   * Toggles checked state if element is not disabled.\n   * Do not toggle on (change) event since IE doesn't fire change event when\n   *   indeterminate checkbox is clicked.\n   * @param event\n   */\n  _onInputClick(event: Event) {\n    // We have to stop propagation for click events on the visual hidden input element.\n    // By default, when a user clicks on a label element, a generated click event will be\n    // dispatched on the associated input element. Since we are using a label element as our\n    // root container, the click event on the `checkbox` will be executed twice.\n    // The real click event will bubble up, and the generated click event also tries to bubble up.\n    // This will lead to multiple click events.\n    // Preventing bubbling for the second event will solve that issue.\n    event.stopPropagation();\n\n    // If resetIndeterminate is false, and the current state is indeterminate, do nothing on click\n    if (!this.disabled && this._clickAction !== 'noop') {\n      // When user manually click on the checkbox, `indeterminate` is set to false.\n      if (this.indeterminate && this._clickAction !== 'check') {\n\n        Promise.resolve().then(() => {\n          this._indeterminate = false;\n          this.indeterminateChange.emit(this._indeterminate);\n        });\n      }\n\n      this.toggle();\n      this._transitionCheckState(\n          this._checked ? TransitionCheckState.Checked : TransitionCheckState.Unchecked);\n\n      // Emit our custom change event if the native input emitted one.\n      // It is important to only emit it, if the native input triggered one, because\n      // we don't want to trigger a change event, when the `checked` variable changes for example.\n      this._emitChangeEvent();\n    } else if (!this.disabled && this._clickAction === 'noop') {\n      // Reset native input when clicked with noop. The native checkbox becomes checked after\n      // click, reset it to be align with `checked` value of `mat-checkbox`.\n      this._inputElement.nativeElement.checked = this.checked;\n      this._inputElement.nativeElement.indeterminate = this.indeterminate;\n    }\n  }\n\n  /** Focuses the checkbox. */\n  focus(): void {\n    this._focusMonitor.focusVia(this._inputElement.nativeElement, 'keyboard');\n  }\n\n  _onInteractionEvent(event: Event) {\n    // We always have to stop propagation on the change event.\n    // Otherwise the change event, from the input element, will bubble up and\n    // emit its event object to the `change` output.\n    event.stopPropagation();\n  }\n\n  private _getAnimationClassForCheckStateTransition(\n      oldState: TransitionCheckState, newState: TransitionCheckState): string {\n    // Don't transition if animations are disabled.\n    if (this._animationMode === 'NoopAnimations') {\n      return '';\n    }\n\n    let animSuffix: string = '';\n\n    switch (oldState) {\n      case TransitionCheckState.Init:\n        // Handle edge case where user interacts with checkbox that does not have [(ngModel)] or\n        // [checked] bound to it.\n        if (newState === TransitionCheckState.Checked) {\n          animSuffix = 'unchecked-checked';\n        } else if (newState == TransitionCheckState.Indeterminate) {\n          animSuffix = 'unchecked-indeterminate';\n        } else {\n          return '';\n        }\n        break;\n      case TransitionCheckState.Unchecked:\n        animSuffix = newState === TransitionCheckState.Checked ?\n            'unchecked-checked' : 'unchecked-indeterminate';\n        break;\n      case TransitionCheckState.Checked:\n        animSuffix = newState === TransitionCheckState.Unchecked ?\n            'checked-unchecked' : 'checked-indeterminate';\n        break;\n      case TransitionCheckState.Indeterminate:\n        animSuffix = newState === TransitionCheckState.Checked ?\n            'indeterminate-checked' : 'indeterminate-unchecked';\n        break;\n    }\n\n    return `mat-checkbox-anim-${animSuffix}`;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Directive,\n  forwardRef,\n  Provider,\n} from '@angular/core';\nimport {\n  CheckboxRequiredValidator,\n  NG_VALIDATORS,\n} from '@angular/forms';\n\nexport const MAT_CHECKBOX_REQUIRED_VALIDATOR: Provider = {\n  provide: NG_VALIDATORS,\n  useExisting: forwardRef(() => MatCheckboxRequiredValidator),\n  multi: true\n};\n\n/**\n * Validator for Material checkbox's required attribute in template-driven checkbox.\n * Current CheckboxRequiredValidator only work with `input type=checkbox` and does not\n * work with `mat-checkbox`.\n */\n@Directive({\n  selector: `mat-checkbox[required][formControlName],\n             mat-checkbox[required][formControl], mat-checkbox[required][ngModel]`,\n  providers: [MAT_CHECKBOX_REQUIRED_VALIDATOR],\n  host: {'[attr.required]': 'required ? \"\" : null'}\n})\nexport class MatCheckboxRequiredValidator extends CheckboxRequiredValidator {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ObserversModule} from '@angular/cdk/observers';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {MatCheckbox} from './checkbox';\nimport {MatCheckboxRequiredValidator} from './checkbox-required-validator';\n\n\n@NgModule({\n  imports: [CommonModule, MatRippleModule, MatCommonModule, ObserversModule],\n  exports: [MatCheckbox, MatCheckboxRequiredValidator, MatCommonModule],\n  declarations: [MatCheckbox, MatCheckboxRequiredValidator],\n})\nexport class MatCheckboxModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusableOption} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {BACKSPACE, DELETE, SPACE} from '@angular/cdk/keycodes';\nimport {Platform} from '@angular/cdk/platform';\nimport {\n  ContentChild,\n  Directive,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  Output,\n} from '@angular/core';\nimport {\n  CanColor,\n  CanDisable,\n  CanDisableRipple,\n  MAT_RIPPLE_GLOBAL_OPTIONS,\n  mixinColor,\n  mixinDisabled,\n  mixinDisableRipple,\n  RippleConfig,\n  RippleGlobalOptions,\n  RippleRenderer,\n  RippleTarget\n} from '@angular/material/core';\nimport {Subject} from 'rxjs';\n\n\n/** Represents an event fired on an individual `mat-chip`. */\nexport interface MatChipEvent {\n  /** The chip the event was fired on. */\n  chip: MatChip;\n}\n\n/** Event object emitted by MatChip when selected or deselected. */\nexport class MatChipSelectionChange {\n  constructor(\n    /** Reference to the chip that emitted the event. */\n    public source: MatChip,\n    /** Whether the chip that emitted the event is selected. */\n    public selected: boolean,\n    /** Whether the selection change was a result of a user interaction. */\n    public isUserInput = false) { }\n}\n\n\n// Boilerplate for applying mixins to MatChip.\n/** @docs-private */\nexport class MatChipBase {\n  constructor(public _elementRef: ElementRef) {}\n}\n\nexport const _MatChipMixinBase =\n    mixinColor(mixinDisableRipple(mixinDisabled(MatChipBase)), 'primary');\n\nconst CHIP_ATTRIBUTE_NAMES = ['mat-basic-chip'];\n\n/**\n * Dummy directive to add CSS class to chip avatar.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-chip-avatar, [matChipAvatar]',\n  host: {'class': 'mat-chip-avatar'}\n})\nexport class MatChipAvatar {}\n\n/**\n * Dummy directive to add CSS class to chip trailing icon.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-chip-trailing-icon, [matChipTrailingIcon]',\n  host: {'class': 'mat-chip-trailing-icon'}\n})\nexport class MatChipTrailingIcon {}\n\n/**\n * Material design styled Chip component. Used inside the MatChipList component.\n */\n@Directive({\n  selector: `mat-basic-chip, [mat-basic-chip], mat-chip, [mat-chip]`,\n  inputs: ['color', 'disabled', 'disableRipple'],\n  exportAs: 'matChip',\n  host: {\n    'class': 'mat-chip',\n    '[attr.tabindex]': 'disabled ? null : -1',\n    'role': 'option',\n    '[class.mat-chip-selected]': 'selected',\n    '[class.mat-chip-with-avatar]': 'avatar',\n    '[class.mat-chip-with-trailing-icon]': 'trailingIcon || removeIcon',\n    '[class.mat-chip-disabled]': 'disabled',\n    '[attr.disabled]': 'disabled || null',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.aria-selected]': 'ariaSelected',\n    '(click)': '_handleClick($event)',\n    '(keydown)': '_handleKeydown($event)',\n    '(focus)': 'focus()',\n    '(blur)': '_blur()',\n  },\n})\nexport class MatChip extends _MatChipMixinBase implements FocusableOption, OnDestroy, CanColor,\n    CanDisable, CanDisableRipple, RippleTarget {\n  /**\n   * Ripple configuration for ripples that are launched on pointer down.\n   * @docs-private\n   */\n  rippleConfig: RippleConfig = {};\n\n  /** Reference to the RippleRenderer for the chip. */\n  private _chipRipple: RippleRenderer;\n\n  /**\n   * Whether ripples are disabled on interaction\n   * @docs-private\n   */\n  get rippleDisabled(): boolean {\n    return this.disabled || this.disableRipple;\n  }\n\n  /** Whether the chip has focus. */\n  _hasFocus: boolean = false;\n\n  /** Whether the chip list is selectable */\n  chipListSelectable: boolean = true;\n\n  /** The chip avatar */\n  @ContentChild(MatChipAvatar) avatar: MatChipAvatar;\n\n  /** The chip's trailing icon. */\n  @ContentChild(MatChipTrailingIcon) trailingIcon: MatChipTrailingIcon;\n\n  /** The chip's remove toggler. */\n  @ContentChild(forwardRef(() => MatChipRemove)) removeIcon: MatChipRemove;\n\n  /** Whether the chip is selected. */\n  @Input()\n  get selected(): boolean { return this._selected; }\n  set selected(value: boolean) {\n    this._selected = coerceBooleanProperty(value);\n    this.selectionChange.emit({\n      source: this,\n      isUserInput: false,\n      selected: value\n    });\n  }\n  protected _selected: boolean = false;\n\n  /** The value of the chip. Defaults to the content inside `<mat-chip>` tags. */\n  @Input()\n  get value(): any {\n    return this._value != undefined\n      ? this._value\n      : this._elementRef.nativeElement.textContent;\n  }\n  set value(value: any) { this._value = value; }\n  protected _value: any;\n\n  /**\n   * Whether or not the chip is selectable. When a chip is not selectable,\n   * changes to it's selected state are always ignored. By default a chip is\n   * selectable, and it becomes non-selectable if it's parent chip list is\n   * not selectable.\n   */\n  @Input()\n  get selectable(): boolean { return this._selectable && this.chipListSelectable; }\n  set selectable(value: boolean) {\n    this._selectable = coerceBooleanProperty(value);\n  }\n  protected _selectable: boolean = true;\n\n  /**\n   * Determines whether or not the chip displays the remove styling and emits (removed) events.\n   */\n  @Input()\n  get removable(): boolean { return this._removable; }\n  set removable(value: boolean) {\n    this._removable = coerceBooleanProperty(value);\n  }\n  protected _removable: boolean = true;\n\n  /** Emits when the chip is focused. */\n  readonly _onFocus = new Subject<MatChipEvent>();\n\n  /** Emits when the chip is blured. */\n  readonly _onBlur = new Subject<MatChipEvent>();\n\n  /** Emitted when the chip is selected or deselected. */\n  @Output() readonly selectionChange: EventEmitter<MatChipSelectionChange> =\n      new EventEmitter<MatChipSelectionChange>();\n\n  /** Emitted when the chip is destroyed. */\n  @Output() readonly destroyed: EventEmitter<MatChipEvent> = new EventEmitter<MatChipEvent>();\n\n  /** Emitted when a chip is to be removed. */\n  @Output() readonly removed: EventEmitter<MatChipEvent> = new EventEmitter<MatChipEvent>();\n\n  /** The ARIA selected applied to the chip. */\n  get ariaSelected(): string | null {\n    return this.selectable ? this.selected.toString() : null;\n  }\n\n  constructor(public _elementRef: ElementRef,\n              ngZone: NgZone,\n              platform: Platform,\n              @Optional() @Inject(MAT_RIPPLE_GLOBAL_OPTIONS) globalOptions: RippleGlobalOptions) {\n    super(_elementRef);\n\n    this._addHostClassName();\n\n    this._chipRipple = new RippleRenderer(this, ngZone, _elementRef, platform);\n    this._chipRipple.setupTriggerEvents(_elementRef.nativeElement);\n\n    if (globalOptions) {\n      this.rippleConfig = {\n        speedFactor: globalOptions.baseSpeedFactor,\n        animation: globalOptions.animation,\n        terminateOnPointerUp: globalOptions.terminateOnPointerUp,\n      };\n    }\n  }\n\n  _addHostClassName() {\n    // Add class for the different chips\n    for (const attr of CHIP_ATTRIBUTE_NAMES) {\n      if (this._elementRef.nativeElement.hasAttribute(attr) ||\n        this._elementRef.nativeElement.tagName.toLowerCase() === attr) {\n        (this._elementRef.nativeElement as HTMLElement).classList.add(attr);\n        return;\n      }\n    }\n    (this._elementRef.nativeElement as HTMLElement).classList.add('mat-standard-chip');\n  }\n\n  ngOnDestroy() {\n    this.destroyed.emit({chip: this});\n    this._chipRipple._removeTriggerEvents();\n  }\n\n  /** Selects the chip. */\n  select(): void {\n    this._selected = true;\n    this.selectionChange.emit({\n      source: this,\n      isUserInput: false,\n      selected: true\n    });\n  }\n\n  /** Deselects the chip. */\n  deselect(): void {\n    this._selected = false;\n    this.selectionChange.emit({\n      source: this,\n      isUserInput: false,\n      selected: false\n    });\n  }\n\n  /** Select this chip and emit selected event */\n  selectViaInteraction(): void {\n    this._selected = true;\n    // Emit select event when selected changes.\n    this.selectionChange.emit({\n      source: this,\n      isUserInput: true,\n      selected: true\n    });\n  }\n\n  /** Toggles the current selected state of this chip. */\n  toggleSelected(isUserInput: boolean = false): boolean {\n    this._selected = !this.selected;\n\n    this.selectionChange.emit({\n      source: this,\n      isUserInput,\n      selected: this._selected\n    });\n\n    return this.selected;\n  }\n\n  /** Allows for programmatic focusing of the chip. */\n  focus(): void {\n    if (!this._hasFocus) {\n      this._elementRef.nativeElement.focus();\n      this._onFocus.next({chip: this});\n    }\n    this._hasFocus = true;\n  }\n\n  /**\n   * Allows for programmatic removal of the chip. Called by the MatChipList when the DELETE or\n   * BACKSPACE keys are pressed.\n   *\n   * Informs any listeners of the removal request. Does not remove the chip from the DOM.\n   */\n  remove(): void {\n    if (this.removable) {\n      this.removed.emit({chip: this});\n    }\n  }\n\n  /** Ensures events fire properly upon click. */\n  _handleClick(event: Event) {\n    // Check disabled\n    if (this.disabled) {\n      return;\n    }\n\n    event.preventDefault();\n    event.stopPropagation();\n  }\n\n  /** Handle custom key presses. */\n  _handleKeydown(event: KeyboardEvent): void {\n    if (this.disabled) {\n      return;\n    }\n\n    switch (event.keyCode) {\n      case DELETE:\n      case BACKSPACE:\n        // If we are removable, remove the focused chip\n        this.remove();\n        // Always prevent so page navigation does not occur\n        event.preventDefault();\n        break;\n      case SPACE:\n        // If we are selectable, toggle the focused chip\n        if (this.selectable) {\n          this.toggleSelected(true);\n        }\n\n        // Always prevent space from scrolling the page since the list has focus\n        event.preventDefault();\n        break;\n    }\n  }\n\n  _blur(): void {\n    this._hasFocus = false;\n    this._onBlur.next({chip: this});\n  }\n}\n\n\n/**\n * Applies proper (click) support and adds styling for use with the Material Design \"cancel\" icon\n * available at https://material.io/icons/#ic_cancel.\n *\n * Example:\n *\n *     `<mat-chip>\n *       <mat-icon matChipRemove>cancel</mat-icon>\n *     </mat-chip>`\n *\n * You *may* use a custom icon, but you may need to override the `mat-chip-remove` positioning\n * styles to properly center the icon within the chip.\n */\n@Directive({\n  selector: '[matChipRemove]',\n  host: {\n    'class': 'mat-chip-remove mat-chip-trailing-icon',\n    '(click)': '_handleClick()',\n  }\n})\nexport class MatChipRemove {\n  constructor(protected _parentChip: MatChip) {\n  }\n\n  /** Calls the parent chip's public `remove()` method if applicable. */\n  _handleClick(): void {\n    if (this._parentChip.removable) {\n      this._parentChip.remove();\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {InjectionToken} from '@angular/core';\n\n/** Default options, for the chips module, that can be overridden. */\nexport interface MatChipsDefaultOptions {\n  /** The list of key codes that will trigger a chipEnd event. */\n  separatorKeyCodes: number[];\n}\n\n/** Injection token to be used to override the default options for the chips module. */\nexport const MAT_CHIPS_DEFAULT_OPTIONS =\n    new InjectionToken<MatChipsDefaultOptions>('mat-chips-default-options');\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusKeyManager} from '@angular/cdk/a11y';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {SelectionModel} from '@angular/cdk/collections';\nimport {BACKSPACE} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  DoCheck,\n  ElementRef,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Output,\n  QueryList,\n  Self,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {ControlValueAccessor, FormGroupDirective, NgControl, NgForm} from '@angular/forms';\nimport {CanUpdateErrorState, ErrorStateMatcher, mixinErrorState} from '@angular/material/core';\nimport {MatFormFieldControl} from '@angular/material/form-field';\nimport {merge, Observable, Subscription} from 'rxjs';\nimport {startWith} from 'rxjs/operators';\nimport {MatChip, MatChipEvent, MatChipSelectionChange} from './chip';\nimport {MatChipInput} from './chip-input';\n\n\n// Boilerplate for applying mixins to MatChipList.\n/** @docs-private */\nexport class MatChipListBase {\n  constructor(public _defaultErrorStateMatcher: ErrorStateMatcher,\n              public _parentForm: NgForm,\n              public _parentFormGroup: FormGroupDirective,\n              /** @docs-private */\n              public ngControl: NgControl) {}\n}\nexport const _MatChipListMixinBase = mixinErrorState(MatChipListBase);\n\n\n// Increasing integer for generating unique ids for chip-list components.\nlet nextUniqueId = 0;\n\n/** Change event object that is emitted when the chip list value has changed. */\nexport class MatChipListChange {\n  constructor(\n    /** Chip list that emitted the event. */\n    public source: MatChipList,\n    /** Value of the chip list when the event was emitted. */\n    public value: any) { }\n}\n\n\n/**\n * A material design chips component (named ChipList for it's similarity to the List component).\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-chip-list',\n  template: `<div class=\"mat-chip-list-wrapper\"><ng-content></ng-content></div>`,\n  exportAs: 'matChipList',\n  host: {\n    '[attr.tabindex]': '_tabIndex',\n    '[attr.aria-describedby]': '_ariaDescribedby || null',\n    '[attr.aria-required]': 'required.toString()',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.aria-invalid]': 'errorState',\n    '[attr.aria-multiselectable]': 'multiple',\n    '[attr.role]': 'role',\n    '[class.mat-chip-list-disabled]': 'disabled',\n    '[class.mat-chip-list-invalid]': 'errorState',\n    '[class.mat-chip-list-required]': 'required',\n    '[attr.aria-orientation]': 'ariaOrientation',\n    'class': 'mat-chip-list',\n    '(focus)': 'focus()',\n    '(blur)': '_blur()',\n    '(keydown)': '_keydown($event)',\n    '[id]': '_uid',\n  },\n  providers: [{provide: MatFormFieldControl, useExisting: MatChipList}],\n  styleUrls: ['chips.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class MatChipList extends _MatChipListMixinBase implements MatFormFieldControl<any>,\n  ControlValueAccessor, AfterContentInit, DoCheck, OnInit, OnDestroy, CanUpdateErrorState {\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  readonly controlType: string = 'mat-chip-list';\n\n  /** When a chip is destroyed, we track the index so we can focus the appropriate next chip. */\n  protected _lastDestroyedIndex: number|null = null;\n\n  /** Track which chips we're listening to for focus/destruction. */\n  protected _chipSet: WeakMap<MatChip, boolean> = new WeakMap();\n\n  /** Subscription to tabbing out from the chip list. */\n  private _tabOutSubscription = Subscription.EMPTY;\n\n  /** Subscription to changes in the chip list. */\n  private _changeSubscription: Subscription;\n\n  /** Subscription to focus changes in the chips. */\n  private _chipFocusSubscription: Subscription | null;\n\n  /** Subscription to blur changes in the chips. */\n  private _chipBlurSubscription: Subscription | null;\n\n  /** Subscription to selection changes in chips. */\n  private _chipSelectionSubscription: Subscription | null;\n\n  /** Subscription to remove changes in chips. */\n  private _chipRemoveSubscription: Subscription | null;\n\n  /** The chip input to add more chips */\n  protected _chipInput: MatChipInput;\n\n  /** Uid of the chip list */\n  _uid: string = `mat-chip-list-${nextUniqueId++}`;\n\n  /** The aria-describedby attribute on the chip list for improved a11y. */\n  _ariaDescribedby: string;\n\n  /** Tab index for the chip list. */\n  _tabIndex = 0;\n\n  /**\n   * User defined tab index.\n   * When it is not null, use user defined tab index. Otherwise use _tabIndex\n   */\n  _userTabIndex: number | null = null;\n\n  /** The FocusKeyManager which handles focus. */\n  _keyManager: FocusKeyManager<MatChip>;\n\n  /** Function when touched */\n  _onTouched = () => {};\n\n  /** Function when changed */\n  _onChange: (value: any) => void = () => {};\n\n  _selectionModel: SelectionModel<MatChip>;\n\n  /** The array of selected chips inside chip list. */\n  get selected(): MatChip[] | MatChip {\n    return this.multiple ? this._selectionModel.selected : this._selectionModel.selected[0];\n  }\n\n  /** The ARIA role applied to the chip list. */\n  get role(): string | null { return this.empty ? null : 'listbox'; }\n\n  /** An object used to control when error messages are shown. */\n  @Input() errorStateMatcher: ErrorStateMatcher;\n\n  /** Whether the user should be allowed to select multiple chips. */\n  @Input()\n  get multiple(): boolean { return this._multiple; }\n  set multiple(value: boolean) {\n    this._multiple = coerceBooleanProperty(value);\n  }\n  private _multiple: boolean = false;\n\n  /**\n   * A function to compare the option values with the selected values. The first argument\n   * is a value from an option. The second is a value from the selection. A boolean\n   * should be returned.\n   */\n  @Input()\n  get compareWith(): (o1: any, o2: any) => boolean { return this._compareWith; }\n  set compareWith(fn: (o1: any, o2: any) => boolean) {\n    this._compareWith = fn;\n    if (this._selectionModel) {\n      // A different comparator means the selection could change.\n      this._initializeSelection();\n    }\n  }\n  private _compareWith = (o1: any, o2: any) => o1 === o2;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get value(): any { return this._value; }\n  set value(value: any) {\n    this.writeValue(value);\n    this._value = value;\n  }\n  protected _value: any;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  get id(): string {\n    return this._chipInput ? this._chipInput.id : this._uid;\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get required(): boolean { return this._required; }\n  set required(value: boolean) {\n    this._required = coerceBooleanProperty(value);\n    this.stateChanges.next();\n  }\n  protected _required: boolean = false;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get placeholder(): string {\n    return this._chipInput ? this._chipInput.placeholder : this._placeholder;\n  }\n  set placeholder(value: string) {\n    this._placeholder = value;\n    this.stateChanges.next();\n  }\n  protected _placeholder: string;\n\n  /** Whether any chips or the matChipInput inside of this chip-list has focus. */\n  get focused(): boolean {\n    return this.chips.some(chip => chip._hasFocus) ||\n      (this._chipInput && this._chipInput.focused);\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  get empty(): boolean {\n    return (!this._chipInput || this._chipInput.empty) && this.chips.length === 0;\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  get shouldLabelFloat(): boolean { return !this.empty || this.focused; }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get disabled(): boolean { return this.ngControl ? !!this.ngControl.disabled : this._disabled; }\n  set disabled(value: boolean) { this._disabled = coerceBooleanProperty(value); }\n  protected _disabled: boolean = false;\n\n  /** Orientation of the chip list. */\n  @Input('aria-orientation') ariaOrientation: 'horizontal' | 'vertical' = 'horizontal';\n\n  /**\n   * Whether or not this chip list is selectable. When a chip list is not selectable,\n   * the selected states for all the chips inside the chip list are always ignored.\n   */\n  @Input()\n  get selectable(): boolean { return this._selectable; }\n  set selectable(value: boolean) {\n    this._selectable = coerceBooleanProperty(value);\n    if (this.chips) {\n      this.chips.forEach(chip => chip.chipListSelectable = this._selectable);\n    }\n  }\n  protected _selectable: boolean = true;\n\n  @Input()\n  set tabIndex(value: number) {\n    this._userTabIndex = value;\n    this._tabIndex = value;\n  }\n\n  /** Combined stream of all of the child chips' selection change events. */\n  get chipSelectionChanges(): Observable<MatChipSelectionChange> {\n    return merge(...this.chips.map(chip => chip.selectionChange));\n  }\n\n  /** Combined stream of all of the child chips' focus change events. */\n  get chipFocusChanges(): Observable<MatChipEvent> {\n    return merge(...this.chips.map(chip => chip._onFocus));\n  }\n\n  /** Combined stream of all of the child chips' blur change events. */\n  get chipBlurChanges(): Observable<MatChipEvent> {\n    return merge(...this.chips.map(chip => chip._onBlur));\n  }\n\n  /** Combined stream of all of the child chips' remove change events. */\n  get chipRemoveChanges(): Observable<MatChipEvent> {\n    return merge(...this.chips.map(chip => chip.destroyed));\n  }\n\n  /** Event emitted when the selected chip list value has been changed by the user. */\n  @Output() readonly change: EventEmitter<MatChipListChange> =\n      new EventEmitter<MatChipListChange>();\n\n  /**\n   * Event that emits whenever the raw value of the chip-list changes. This is here primarily\n   * to facilitate the two-way binding for the `value` input.\n   * @docs-private\n   */\n  @Output() readonly valueChange: EventEmitter<any> = new EventEmitter<any>();\n\n  /** The chip components contained within this chip list. */\n  @ContentChildren(MatChip) chips: QueryList<MatChip>;\n\n  constructor(protected _elementRef: ElementRef,\n              private _changeDetectorRef: ChangeDetectorRef,\n              @Optional() private _dir: Directionality,\n              @Optional() _parentForm: NgForm,\n              @Optional() _parentFormGroup: FormGroupDirective,\n              _defaultErrorStateMatcher: ErrorStateMatcher,\n              /** @docs-private */\n              @Optional() @Self() public ngControl: NgControl) {\n    super(_defaultErrorStateMatcher, _parentForm, _parentFormGroup, ngControl);\n    if (this.ngControl) {\n      this.ngControl.valueAccessor = this;\n    }\n  }\n\n  ngAfterContentInit() {\n    this._keyManager = new FocusKeyManager<MatChip>(this.chips)\n      .withWrap()\n      .withVerticalOrientation()\n      .withHorizontalOrientation(this._dir ? this._dir.value : 'ltr');\n\n    // Prevents the chip list from capturing focus and redirecting\n    // it back to the first chip when the user tabs out.\n    this._tabOutSubscription = this._keyManager.tabOut.subscribe(() => {\n      this._tabIndex = -1;\n      setTimeout(() => this._tabIndex = this._userTabIndex || 0);\n    });\n\n    // When the list changes, re-subscribe\n    this._changeSubscription = this.chips.changes.pipe(startWith(null)).subscribe(() => {\n      this._resetChips();\n\n      // Reset chips selected/deselected status\n      this._initializeSelection();\n\n      // Check to see if we need to update our tab index\n      this._updateTabIndex();\n\n      // Check to see if we have a destroyed chip and need to refocus\n      this._updateFocusForDestroyedChips();\n\n      this.stateChanges.next();\n    });\n  }\n\n  ngOnInit() {\n    this._selectionModel = new SelectionModel<MatChip>(this.multiple, undefined, false);\n    this.stateChanges.next();\n  }\n\n  ngDoCheck() {\n    if (this.ngControl) {\n      // We need to re-evaluate this on every change detection cycle, because there are some\n      // error triggers that we can't subscribe to (e.g. parent form submissions). This means\n      // that whatever logic is in here has to be super lean or we risk destroying the performance.\n      this.updateErrorState();\n    }\n  }\n\n  ngOnDestroy() {\n    this._tabOutSubscription.unsubscribe();\n\n    if (this._changeSubscription) {\n      this._changeSubscription.unsubscribe();\n    }\n\n    if (this._chipRemoveSubscription) {\n      this._chipRemoveSubscription.unsubscribe();\n    }\n\n    this._dropSubscriptions();\n    this.stateChanges.complete();\n  }\n\n\n  /** Associates an HTML input element with this chip list. */\n  registerInput(inputElement: MatChipInput): void {\n    this._chipInput = inputElement;\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  setDescribedByIds(ids: string[]) { this._ariaDescribedby = ids.join(' '); }\n\n  // Implemented as part of ControlValueAccessor.\n  writeValue(value: any): void {\n    if (this.chips) {\n      this._setSelectionByValue(value, false);\n    }\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnChange(fn: (value: any) => void): void {\n    this._onChange = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnTouched(fn: () => void): void {\n    this._onTouched = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n    this._elementRef.nativeElement.disabled = isDisabled;\n    this.stateChanges.next();\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  onContainerClick() { this.focus(); }\n\n  /**\n   * Focuses the the first non-disabled chip in this chip list, or the associated input when there\n   * are no eligible chips.\n   */\n  focus(): void {\n    // TODO: ARIA says this should focus the first `selected` chip if any are selected.\n    // Focus on first element if there's no chipInput inside chip-list\n    if (this._chipInput && this._chipInput.focused) {\n      // do nothing\n    } else if (this.chips.length > 0) {\n      this._keyManager.setFirstItemActive();\n      this.stateChanges.next();\n    } else {\n      this._focusInput();\n      this.stateChanges.next();\n    }\n  }\n\n  /** Attempt to focus an input if we have one. */\n  _focusInput() {\n    if (this._chipInput) {\n      this._chipInput.focus();\n    }\n  }\n\n  /**\n   * Pass events to the keyboard manager. Available here for tests.\n   */\n  _keydown(event: KeyboardEvent) {\n    const target = event.target as HTMLElement;\n\n    // If they are on an empty input and hit backspace, focus the last chip\n    if (event.keyCode === BACKSPACE && this._isInputEmpty(target)) {\n      this._keyManager.setLastItemActive();\n      event.preventDefault();\n    } else if (target && target.classList.contains('mat-chip')) {\n      this._keyManager.onKeydown(event);\n      this.stateChanges.next();\n    }\n  }\n\n\n  /**\n   * Check the tab index as you should not be allowed to focus an empty list.\n   */\n  protected _updateTabIndex(): void {\n    // If we have 0 chips, we should not allow keyboard focus\n    this._tabIndex = this._userTabIndex || (this.chips.length === 0 ? -1 : 0);\n  }\n\n  /**\n   * Update key manager's active item when chip is deleted.\n   * If the deleted chip is the last chip in chip list, focus the new last chip.\n   * Otherwise focus the next chip in the list.\n   * Save `_lastDestroyedIndex` so we can set the correct focus.\n   */\n  protected _updateKeyManager(chip: MatChip) {\n    let chipIndex: number = this.chips.toArray().indexOf(chip);\n    if (this._isValidIndex(chipIndex)) {\n      if (chip._hasFocus) {\n        // Check whether the chip is not the last item\n        if (chipIndex < this.chips.length - 1) {\n          this._keyManager.setActiveItem(chipIndex);\n        } else if (chipIndex - 1 >= 0) {\n          this._keyManager.setActiveItem(chipIndex - 1);\n        }\n      }\n      if (this._keyManager.activeItemIndex === chipIndex) {\n        this._lastDestroyedIndex = chipIndex;\n      }\n    }\n  }\n\n  /**\n   * Checks to see if a focus chip was recently destroyed so that we can refocus the next closest\n   * one.\n   */\n  protected _updateFocusForDestroyedChips() {\n    let chipsArray = this.chips;\n\n    if (this._lastDestroyedIndex != null && chipsArray.length > 0 && this.focused) {\n      // Check whether the destroyed chip was the last item\n      const newFocusIndex = Math.min(this._lastDestroyedIndex, chipsArray.length - 1);\n      this._keyManager.setActiveItem(newFocusIndex);\n      let focusChip = this._keyManager.activeItem;\n      // Focus the chip\n      if (focusChip) {\n        focusChip.focus();\n      }\n    }\n\n    // Reset our destroyed index\n    this._lastDestroyedIndex = null;\n  }\n\n  /**\n   * Utility to ensure all indexes are valid.\n   *\n   * @param index The index to be checked.\n   * @returns True if the index is valid for our list of chips.\n   */\n  private _isValidIndex(index: number): boolean {\n    return index >= 0 && index < this.chips.length;\n  }\n\n  private _isInputEmpty(element: HTMLElement): boolean {\n    if (element && element.nodeName.toLowerCase() === 'input') {\n      let input = element as HTMLInputElement;\n      return !input.value;\n    }\n\n    return false;\n  }\n\n  _setSelectionByValue(value: any, isUserInput: boolean = true) {\n    this._clearSelection();\n    this.chips.forEach(chip => chip.deselect());\n\n    if (Array.isArray(value)) {\n      value.forEach(currentValue => this._selectValue(currentValue, isUserInput));\n      this._sortValues();\n    } else {\n      const correspondingChip = this._selectValue(value, isUserInput);\n\n      // Shift focus to the active item. Note that we shouldn't do this in multiple\n      // mode, because we don't know what chip the user interacted with last.\n      if (correspondingChip) {\n        if (isUserInput) {\n          this._keyManager.setActiveItem(correspondingChip);\n        }\n      }\n    }\n  }\n\n  /**\n   * Finds and selects the chip based on its value.\n   * @returns Chip that has the corresponding value.\n   */\n  private _selectValue(value: any, isUserInput: boolean = true): MatChip | undefined {\n\n    const correspondingChip = this.chips.find(chip => {\n      return chip.value != null && this._compareWith(chip.value,  value);\n    });\n\n    if (correspondingChip) {\n      isUserInput ? correspondingChip.selectViaInteraction() : correspondingChip.select();\n      this._selectionModel.select(correspondingChip);\n    }\n\n    return correspondingChip;\n  }\n\n  private _initializeSelection(): void {\n    // Defer setting the value in order to avoid the \"Expression\n    // has changed after it was checked\" errors from Angular.\n    Promise.resolve().then(() => {\n      if (this.ngControl || this._value) {\n        this._setSelectionByValue(this.ngControl ? this.ngControl.value : this._value, false);\n        this.stateChanges.next();\n      }\n    });\n  }\n\n  /**\n   * Deselects every chip in the list.\n   * @param skip Chip that should not be deselected.\n   */\n  private _clearSelection(skip?: MatChip): void {\n    this._selectionModel.clear();\n    this.chips.forEach(chip => {\n      if (chip !== skip) {\n        chip.deselect();\n      }\n    });\n    this.stateChanges.next();\n  }\n\n  /**\n   * Sorts the model values, ensuring that they keep the same\n   * order that they have in the panel.\n   */\n  private _sortValues(): void {\n    if (this._multiple) {\n      this._selectionModel.clear();\n\n      this.chips.forEach(chip => {\n        if (chip.selected) {\n          this._selectionModel.select(chip);\n        }\n      });\n      this.stateChanges.next();\n    }\n  }\n\n  /** Emits change event to set the model value. */\n  private _propagateChanges(fallbackValue?: any): void {\n    let valueToEmit: any = null;\n\n    if (Array.isArray(this.selected)) {\n      valueToEmit = this.selected.map(chip => chip.value);\n    } else {\n      valueToEmit = this.selected ? this.selected.value : fallbackValue;\n    }\n    this._value = valueToEmit;\n    this.change.emit(new MatChipListChange(this, valueToEmit));\n    this.valueChange.emit(valueToEmit);\n    this._onChange(valueToEmit);\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** When blurred, mark the field as touched when focus moved outside the chip list. */\n  _blur() {\n    this._keyManager.setActiveItem(-1);\n    if (!this.disabled) {\n      if (this._chipInput) {\n        // If there's a chip input, we should check whether the focus moved to chip input.\n        // If the focus is not moved to chip input, mark the field as touched. If the focus moved\n        // to chip input, do nothing.\n        // Timeout is needed to wait for the focus() event trigger on chip input.\n        setTimeout(() => {\n          if (!this.focused) {\n            this._markAsTouched();\n          }\n        });\n      } else {\n        // If there's no chip input, then mark the field as touched.\n        this._markAsTouched();\n      }\n    }\n  }\n\n  /** Mark the field as touched */\n  _markAsTouched() {\n    this._onTouched();\n    this._changeDetectorRef.markForCheck();\n    this.stateChanges.next();\n  }\n\n  private _resetChips() {\n    this._dropSubscriptions();\n    this._listenToChipsFocus();\n    this._listenToChipsSelection();\n    this._listenToChipsRemoved();\n  }\n\n\n  private _dropSubscriptions() {\n    if (this._chipFocusSubscription) {\n      this._chipFocusSubscription.unsubscribe();\n      this._chipFocusSubscription = null;\n    }\n\n    if (this._chipBlurSubscription) {\n      this._chipBlurSubscription.unsubscribe();\n      this._chipBlurSubscription = null;\n    }\n\n    if (this._chipSelectionSubscription) {\n      this._chipSelectionSubscription.unsubscribe();\n      this._chipSelectionSubscription = null;\n    }\n  }\n\n  /** Listens to user-generated selection events on each chip. */\n  private _listenToChipsSelection(): void {\n    this._chipSelectionSubscription = this.chipSelectionChanges.subscribe(event => {\n      event.source.selected\n        ? this._selectionModel.select(event.source)\n        : this._selectionModel.deselect(event.source);\n\n      // For single selection chip list, make sure the deselected value is unselected.\n      if (!this.multiple) {\n        this.chips.forEach(chip => {\n          if (!this._selectionModel.isSelected(chip) && chip.selected) {\n            chip.deselect();\n          }\n        });\n      }\n\n      if (event.isUserInput) {\n        this._propagateChanges();\n      }\n    });\n  }\n\n  /** Listens to user-generated selection events on each chip. */\n  private _listenToChipsFocus(): void {\n    this._chipFocusSubscription = this.chipFocusChanges.subscribe(event => {\n      let chipIndex: number = this.chips.toArray().indexOf(event.chip);\n\n      if (this._isValidIndex(chipIndex)) {\n        this._keyManager.updateActiveItemIndex(chipIndex);\n      }\n      this.stateChanges.next();\n    });\n\n    this._chipBlurSubscription = this.chipBlurChanges.subscribe(() => {\n      this._blur();\n      this.stateChanges.next();\n    });\n  }\n\n  private _listenToChipsRemoved(): void {\n    this._chipRemoveSubscription = this.chipRemoveChanges.subscribe(event => {\n      this._updateKeyManager(event.chip);\n    });\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {Directive, ElementRef, EventEmitter, Input, Output, Inject} from '@angular/core';\nimport {MatChipList} from './chip-list';\nimport {MAT_CHIPS_DEFAULT_OPTIONS, MatChipsDefaultOptions} from './chip-default-options';\n\n\n/** Represents an input event on a `matChipInput`. */\nexport interface MatChipInputEvent {\n  /** The native `<input>` element that the event is being fired for. */\n  input: HTMLInputElement;\n\n  /** The value of the input. */\n  value: string;\n}\n\n// Increasing integer for generating unique ids.\nlet nextUniqueId = 0;\n\n/**\n * Directive that adds chip-specific behaviors to an input element inside `<mat-form-field>`.\n * May be placed inside or outside of an `<mat-chip-list>`.\n */\n@Directive({\n  selector: 'input[matChipInputFor]',\n  exportAs: 'matChipInput, matChipInputFor',\n  host: {\n    'class': 'mat-chip-input mat-input-element',\n    '(keydown)': '_keydown($event)',\n    '(blur)': '_blur()',\n    '(focus)': '_focus()',\n    '(input)': '_onInput()',\n    '[id]': 'id',\n    '[attr.placeholder]': 'placeholder || null',\n  }\n})\nexport class MatChipInput {\n  /** Whether the control is focused. */\n  focused: boolean = false;\n  _chipList: MatChipList;\n\n  /** Register input for chip list */\n  @Input('matChipInputFor')\n  set chipList(value: MatChipList) {\n    if (value) {\n      this._chipList = value;\n      this._chipList.registerInput(this);\n    }\n  }\n\n  /**\n   * Whether or not the chipEnd event will be emitted when the input is blurred.\n   */\n  @Input('matChipInputAddOnBlur')\n  get addOnBlur(): boolean { return this._addOnBlur; }\n  set addOnBlur(value: boolean) { this._addOnBlur = coerceBooleanProperty(value); }\n  _addOnBlur: boolean = false;\n\n  /**\n   * The list of key codes that will trigger a chipEnd event.\n   *\n   * Defaults to `[ENTER]`.\n   */\n  // TODO(tinayuangao): Support Set here\n  @Input('matChipInputSeparatorKeyCodes')\n  separatorKeyCodes: number[] = this._defaultOptions.separatorKeyCodes;\n\n  /** Emitted when a chip is to be added. */\n  @Output('matChipInputTokenEnd')\n  chipEnd: EventEmitter<MatChipInputEvent> = new EventEmitter<MatChipInputEvent>();\n\n  /**\n   * The input's placeholder text.\n   * @deprecated Bind to the `placeholder` attribute directly.\n   * @deletion-target 7.0.0\n   */\n  @Input() placeholder: string = '';\n\n  /** Unique id for the input. */\n  @Input() id: string = `mat-chip-list-input-${nextUniqueId++}`;\n\n  /** Whether the input is empty. */\n  get empty(): boolean { return !this._inputElement.value; }\n\n  /** The native input element to which this directive is attached. */\n  protected _inputElement: HTMLInputElement;\n\n  constructor(\n    protected _elementRef: ElementRef,\n    @Inject(MAT_CHIPS_DEFAULT_OPTIONS) private _defaultOptions: MatChipsDefaultOptions) {\n    this._inputElement = this._elementRef.nativeElement as HTMLInputElement;\n  }\n\n  /** Utility method to make host definition/tests more clear. */\n  _keydown(event?: KeyboardEvent) {\n    this._emitChipEnd(event);\n  }\n\n  /** Checks to see if the blur should emit the (chipEnd) event. */\n  _blur() {\n    if (this.addOnBlur) {\n      this._emitChipEnd();\n    }\n    this.focused = false;\n    // Blur the chip list if it is not focused\n    if (!this._chipList.focused) {\n      this._chipList._blur();\n    }\n    this._chipList.stateChanges.next();\n  }\n\n  _focus() {\n    this.focused = true;\n    this._chipList.stateChanges.next();\n  }\n\n  /** Checks to see if the (chipEnd) event needs to be emitted. */\n  _emitChipEnd(event?: KeyboardEvent) {\n    if (!this._inputElement.value && !!event) {\n      this._chipList._keydown(event);\n    }\n    if (!event || this.separatorKeyCodes.indexOf(event.keyCode) > -1) {\n      this.chipEnd.emit({ input: this._inputElement, value: this._inputElement.value });\n\n      if (event) {\n        event.preventDefault();\n      }\n    }\n  }\n\n  _onInput() {\n    // Let chip list know whenever the value changes.\n    this._chipList.stateChanges.next();\n  }\n\n  /** Focuses the input. */\n  focus(): void { this._inputElement.focus(); }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ENTER} from '@angular/cdk/keycodes';\nimport {NgModule} from '@angular/core';\nimport {ErrorStateMatcher} from '@angular/material/core';\nimport {MatChip, MatChipAvatar, MatChipRemove, MatChipTrailingIcon} from './chip';\nimport {MAT_CHIPS_DEFAULT_OPTIONS, MatChipsDefaultOptions} from './chip-default-options';\nimport {MatChipInput} from './chip-input';\nimport {MatChipList} from './chip-list';\n\nconst CHIP_DECLARATIONS = [\n  MatChipList,\n  MatChip,\n  MatChipInput,\n  MatChipRemove,\n  MatChipAvatar,\n  MatChipTrailingIcon,\n];\n\n@NgModule({\n  exports: CHIP_DECLARATIONS,\n  declarations: CHIP_DECLARATIONS,\n  providers: [\n    ErrorStateMatcher,\n    {\n      provide: MAT_CHIPS_DEFAULT_OPTIONS,\n      useValue: {\n        separatorKeyCodes: [ENTER]\n      } as MatChipsDefaultOptions\n    }\n  ]\n})\nexport class MatChipsModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ViewContainerRef} from '@angular/core';\nimport {Direction} from '@angular/cdk/bidi';\nimport {ScrollStrategy} from '@angular/cdk/overlay';\n\n/** Valid ARIA roles for a dialog element. */\nexport type DialogRole = 'dialog' | 'alertdialog';\n\n/** Possible overrides for a dialog's position. */\nexport interface DialogPosition {\n  /** Override for the dialog's top position. */\n  top?: string;\n\n  /** Override for the dialog's bottom position. */\n  bottom?: string;\n\n  /** Override for the dialog's left position. */\n  left?: string;\n\n  /** Override for the dialog's right position. */\n  right?: string;\n}\n\n/**\n * Configuration for opening a modal dialog with the MatDialog service.\n */\nexport class MatDialogConfig<D = any> {\n\n  /**\n   * Where the attached component should live in Angular's *logical* component tree.\n   * This affects what is available for injection and the change detection order for the\n   * component instantiated inside of the dialog. This does not affect where the dialog\n   * content will be rendered.\n   */\n  viewContainerRef?: ViewContainerRef;\n\n  /** ID for the dialog. If omitted, a unique one will be generated. */\n  id?: string;\n\n  /** The ARIA role of the dialog element. */\n  role?: DialogRole = 'dialog';\n\n  /** Custom class for the overlay pane. */\n  panelClass?: string | string[] = '';\n\n  /** Whether the dialog has a backdrop. */\n  hasBackdrop?: boolean = true;\n\n  /** Custom class for the backdrop, */\n  backdropClass?: string = '';\n\n  /** Whether the user can use escape or clicking outside to close a modal. */\n  disableClose?: boolean = false;\n\n  /** Width of the dialog. */\n  width?: string = '';\n\n  /** Height of the dialog. */\n  height?: string = '';\n\n  /** Min-width of the dialog. If a number is provided, pixel units are assumed. */\n  minWidth?: number | string;\n\n  /** Min-height of the dialog. If a number is provided, pixel units are assumed. */\n  minHeight?: number | string;\n\n  /** Max-width of the dialog. If a number is provided, pixel units are assumed. Defaults to 80vw */\n  maxWidth?: number | string = '80vw';\n\n  /** Max-height of the dialog. If a number is provided, pixel units are assumed. */\n  maxHeight?: number | string;\n\n  /** Position overrides. */\n  position?: DialogPosition;\n\n  /** Data being injected into the child component. */\n  data?: D | null = null;\n\n  /** Layout direction for the dialog's content. */\n  direction?: Direction;\n\n  /** ID of the element that describes the dialog. */\n  ariaDescribedBy?: string | null = null;\n\n  /** Aria label to assign to the dialog element */\n  ariaLabel?: string | null = null;\n\n  /** Whether the dialog should focus the first focusable element on open. */\n  autoFocus?: boolean = true;\n\n  /** Scroll strategy to be used for the dialog. */\n  scrollStrategy?: ScrollStrategy;\n\n  /** Whether the dialog should close when the user goes backwards/forwards in history. */\n  closeOnNavigation?: boolean = true;\n\n  // TODO(jelbourn): add configuration for lifecycle hooks, ARIA labelling.\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/** Animations used by MatDialog. */\nexport const matDialogAnimations: {\n  readonly slideDialog: AnimationTriggerMetadata;\n} = {\n  /** Animation that slides the dialog in and out of view and fades the opacity. */\n  slideDialog: trigger('slideDialog', [\n    // Note: The `enter` animation doesn't transition to something like `translate3d(0, 0, 0)\n    // scale(1)`, because for some reason specifying the transform explicitly, causes IE both\n    // to blur the dialog content and decimate the animation performance. Leaving it as `none`\n    // solves both issues.\n    state('enter', style({ transform: 'none', opacity: 1 })),\n    state('void', style({ transform: 'translate3d(0, 25%, 0) scale(0.9)', opacity: 0 })),\n    state('exit', style({ transform: 'translate3d(0, 25%, 0)', opacity: 0 })),\n    transition('* => *', animate('400ms cubic-bezier(0.25, 0.8, 0.25, 1)')),\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor} from '@angular/cdk/a11y';\nimport {Platform} from '@angular/cdk/platform';\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  OnDestroy,\n  ViewChild,\n  ViewEncapsulation,\n  Optional,\n  Inject,\n} from '@angular/core';\nimport {\n  CanColor,\n  CanDisable,\n  CanDisableRipple,\n  MatRipple,\n  mixinColor,\n  mixinDisabled,\n  mixinDisableRipple\n} from '@angular/material/core';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\n\n/** Default color palette for round buttons (mat-fab and mat-mini-fab) */\nconst DEFAULT_ROUND_BUTTON_COLOR = 'accent';\n\n/** Default color palette for flat buttons (mat-flat-button) */\nconst DEFAULT_FLAT_BUTTON_COLOR = 'primary';\n\n/**\n * List of classes to add to MatButton instances based on host attributes to\n * style as different variants.\n */\nconst BUTTON_HOST_ATTRIBUTES = [\n  'mat-button',\n  'mat-flat-button',\n  'mat-icon-button',\n  'mat-raised-button',\n  'mat-stroked-button',\n  'mat-mini-fab',\n  'mat-fab',\n];\n\n// Boilerplate for applying mixins to MatButton.\n/** @docs-private */\nexport class MatButtonBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatButtonMixinBase = mixinColor(mixinDisabled(mixinDisableRipple(MatButtonBase)));\n\n\n/**\n * Material design button.\n */\n@Component({\n  moduleId: module.id,\n  selector: `button[mat-button], button[mat-raised-button], button[mat-icon-button],\n             button[mat-fab], button[mat-mini-fab], button[mat-stroked-button],\n             button[mat-flat-button]`,\n  exportAs: 'matButton',\n  host: {\n    '[disabled]': 'disabled || null',\n    '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"',\n  },\n  templateUrl: 'button.html',\n  styleUrls: ['button.css'],\n  inputs: ['disabled', 'disableRipple', 'color'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatButton extends _MatButtonMixinBase\n    implements OnDestroy, CanDisable, CanColor, CanDisableRipple {\n\n  /** Whether the button is round. */\n  readonly isRoundButton: boolean = this._hasHostAttributes('mat-fab', 'mat-mini-fab');\n\n  /** Whether the button is icon button. */\n  readonly isIconButton: boolean = this._hasHostAttributes('mat-icon-button');\n\n  /** Reference to the MatRipple instance of the button. */\n  @ViewChild(MatRipple) ripple: MatRipple;\n\n  constructor(elementRef: ElementRef,\n              /**\n               * @deprecated Platform checks for SSR are no longer needed\n               * @deletion-target 7.0.0\n               */\n              // tslint:disable-next-line:no-unused-variable\n              private _platform: Platform,\n              private _focusMonitor: FocusMonitor,\n              // @deletion-target 7.0.0 `_animationMode` parameter to be made required.\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode?: string) {\n    super(elementRef);\n\n    // For each of the variant selectors that is prevent in the button's host\n    // attributes, add the correct corresponding class.\n    for (const attr of BUTTON_HOST_ATTRIBUTES) {\n      if (this._hasHostAttributes(attr)) {\n        (elementRef.nativeElement as HTMLElement).classList.add(attr);\n      }\n    }\n\n    this._focusMonitor.monitor(this._elementRef.nativeElement, true);\n\n    if (this.isRoundButton) {\n      this.color = DEFAULT_ROUND_BUTTON_COLOR;\n    } else if (this._hasHostAttributes('mat-flat-button')) {\n      this.color = DEFAULT_FLAT_BUTTON_COLOR;\n    }\n  }\n\n  ngOnDestroy() {\n    this._focusMonitor.stopMonitoring(this._elementRef.nativeElement);\n  }\n\n  /** Focuses the button. */\n  focus(): void {\n    this._getHostElement().focus();\n  }\n\n  _getHostElement() {\n    return this._elementRef.nativeElement;\n  }\n\n  _isRippleDisabled() {\n    return this.disableRipple || this.disabled;\n  }\n\n  /** Gets whether the button has one of the given attributes. */\n  _hasHostAttributes(...attributes: string[]) {\n    return attributes.some(attribute => this._getHostElement().hasAttribute(attribute));\n  }\n}\n\n/**\n * Raised Material design button.\n */\n@Component({\n  moduleId: module.id,\n  selector: `a[mat-button], a[mat-raised-button], a[mat-icon-button], a[mat-fab],\n             a[mat-mini-fab], a[mat-stroked-button], a[mat-flat-button]`,\n  exportAs: 'matButton, matAnchor',\n  host: {\n    '[attr.tabindex]': 'disabled ? -1 : 0',\n    '[attr.disabled]': 'disabled || null',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '(click)': '_haltDisabledEvents($event)',\n    '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"',\n  },\n  inputs: ['disabled', 'disableRipple', 'color'],\n  templateUrl: 'button.html',\n  styleUrls: ['button.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatAnchor extends MatButton {\n\n  constructor(\n    platform: Platform,\n    focusMonitor: FocusMonitor,\n    elementRef: ElementRef,\n    // @deletion-target 7.0.0 `animationMode` parameter to be made required.\n    @Optional() @Inject(ANIMATION_MODULE_TYPE) animationMode?: string) {\n    super(elementRef, platform, focusMonitor, animationMode);\n  }\n\n  _haltDisabledEvents(event: Event) {\n    // A disabled button shouldn't apply any actions\n    if (this.disabled) {\n      event.preventDefault();\n      event.stopImmediatePropagation();\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {MatAnchor, MatButton} from './button';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatRippleModule,\n    MatCommonModule,\n  ],\n  exports: [\n    MatButton,\n    MatAnchor,\n    MatCommonModule,\n  ],\n  declarations: [\n    MatButton,\n    MatAnchor,\n  ],\n})\nexport class MatButtonModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Input,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Output,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {\n  CanDisable,\n  CanDisableRipple,\n  mixinDisabled,\n  mixinDisableRipple\n} from '@angular/material/core';\nimport {SelectionModel} from '@angular/cdk/collections';\n\n/** Acceptable types for a button toggle. */\nexport type ToggleType = 'checkbox' | 'radio';\n\n// Boilerplate for applying mixins to MatButtonToggleGroup and MatButtonToggleGroupMultiple\n/** @docs-private */\nexport class MatButtonToggleGroupBase {}\nexport const _MatButtonToggleGroupMixinBase = mixinDisabled(MatButtonToggleGroupBase);\n\n/**\n * Provider Expression that allows mat-button-toggle-group to register as a ControlValueAccessor.\n * This allows it to support [(ngModel)].\n * @docs-private\n */\nexport const MAT_BUTTON_TOGGLE_GROUP_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatButtonToggleGroup),\n  multi: true\n};\n\n/**\n * @deprecated Use `MatButtonToggleGroup` instead.\n * @deletion-target 7.0.0\n */\nexport class MatButtonToggleGroupMultiple {}\n\nlet _uniqueIdCounter = 0;\n\n/** Change event object emitted by MatButtonToggle. */\nexport class MatButtonToggleChange {\n  constructor(\n    /** The MatButtonToggle that emits the event. */\n    public source: MatButtonToggle,\n\n    /** The value assigned to the MatButtonToggle. */\n    public value: any) {}\n}\n\n/** Exclusive selection button toggle group that behaves like a radio-button group. */\n@Directive({\n  selector: 'mat-button-toggle-group',\n  providers: [\n    MAT_BUTTON_TOGGLE_GROUP_VALUE_ACCESSOR,\n    {provide: MatButtonToggleGroupMultiple, useExisting: MatButtonToggleGroup},\n  ],\n  inputs: ['disabled'],\n  host: {\n    '[attr.role]': 'multiple ? \"group\" : \"radiogroup\"',\n    'class': 'mat-button-toggle-group',\n    '[class.mat-button-toggle-vertical]': 'vertical'\n  },\n  exportAs: 'matButtonToggleGroup',\n})\nexport class MatButtonToggleGroup extends _MatButtonToggleGroupMixinBase implements\n  ControlValueAccessor, CanDisable, OnInit, AfterContentInit {\n\n  private _vertical = false;\n  private _multiple = false;\n  private _selectionModel: SelectionModel<MatButtonToggle>;\n\n  /**\n   * Reference to the raw value that the consumer tried to assign. The real\n   * value will exaclude any values from this one that don't correspond to a\n   * toggle. Useful for the cases where the value is assigned before the toggles\n   * have been initialized or at the same that they're being swapped out.\n   */\n  private _rawValue: any;\n\n  /**\n   * The method to be called in order to update ngModel.\n   * Now `ngModel` binding is not supported in multiple selection mode.\n   */\n  _controlValueAccessorChangeFn: (value: any) => void = () => {};\n\n  /** onTouch function registered via registerOnTouch (ControlValueAccessor). */\n  _onTouched: () => any = () => {};\n\n  /** Child button toggle buttons. */\n  @ContentChildren(forwardRef(() => MatButtonToggle)) _buttonToggles: QueryList<MatButtonToggle>;\n\n  /** `name` attribute for the underlying `input` element. */\n  @Input()\n  get name(): string { return this._name; }\n  set name(value: string) {\n    this._name = value;\n\n    if (this._buttonToggles) {\n      this._buttonToggles.forEach(toggle => toggle.name = this._name);\n    }\n  }\n  private _name = `mat-button-toggle-group-${_uniqueIdCounter++}`;\n\n  /** Whether the toggle group is vertical. */\n  @Input()\n  get vertical(): boolean { return this._vertical; }\n  set vertical(value: boolean) {\n    this._vertical = coerceBooleanProperty(value);\n  }\n\n  /** Value of the toggle group. */\n  @Input()\n  get value(): any {\n    const selected = this._selectionModel ? this._selectionModel.selected : [];\n\n    if (this.multiple) {\n      return selected.map(toggle => toggle.value);\n    }\n\n    return selected[0] ? selected[0].value : undefined;\n  }\n  set value(newValue: any) {\n    this._setSelectionByValue(newValue);\n    this.valueChange.emit(this.value);\n  }\n\n  /**\n   * Event that emits whenever the value of the group changes.\n   * Used to facilitate two-way data binding.\n   * @docs-private\n   */\n  @Output() readonly valueChange = new EventEmitter<any>();\n\n  /** Selected button toggles in the group. */\n  get selected() {\n    const selected = this._selectionModel.selected;\n    return this.multiple ? selected : (selected[0] || null);\n  }\n\n  /** Whether multiple button toggles can be selected. */\n  @Input()\n  get multiple(): boolean { return this._multiple; }\n  set multiple(value: boolean) {\n    this._multiple = coerceBooleanProperty(value);\n  }\n\n  /** Event emitted when the group's value changes. */\n  @Output() readonly change: EventEmitter<MatButtonToggleChange> =\n      new EventEmitter<MatButtonToggleChange>();\n\n  constructor(private _changeDetector: ChangeDetectorRef) {\n    super();\n  }\n\n  ngOnInit() {\n    this._selectionModel = new SelectionModel<MatButtonToggle>(this.multiple, undefined, false);\n  }\n\n  ngAfterContentInit() {\n    this._selectionModel.select(...this._buttonToggles.filter(toggle => toggle.checked));\n  }\n\n  /**\n   * Sets the model value. Implemented as part of ControlValueAccessor.\n   * @param value Value to be set to the model.\n   */\n  writeValue(value: any) {\n    this.value = value;\n    this._changeDetector.markForCheck();\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnChange(fn: (value: any) => void) {\n    this._controlValueAccessorChangeFn = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnTouched(fn: any) {\n    this._onTouched = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n\n    if (this._buttonToggles) {\n      this._buttonToggles.forEach(toggle => toggle._markForCheck());\n    }\n  }\n\n  /** Dispatch change event with current selection and group value. */\n  _emitChangeEvent(): void {\n    const selected = this.selected;\n    const source = Array.isArray(selected) ? selected[selected.length - 1] : selected;\n    const event = new MatButtonToggleChange(source!, this.value);\n    this._controlValueAccessorChangeFn(event.value);\n    this.change.emit(event);\n  }\n\n  /**\n   * Syncs a button toggle's selected state with the model value.\n   * @param toggle Toggle to be synced.\n   * @param select Whether the toggle should be selected.\n   * @param isUserInput Whether the change was a result of a user interaction.\n   */\n  _syncButtonToggle(toggle: MatButtonToggle, select: boolean, isUserInput = false) {\n    // Deselect the currently-selected toggle, if we're in single-selection\n    // mode and the button being toggled isn't selected at the moment.\n    if (!this.multiple && this.selected && !toggle.checked) {\n      (this.selected as MatButtonToggle).checked = false;\n    }\n\n    if (select) {\n      this._selectionModel.select(toggle);\n    } else {\n      this._selectionModel.deselect(toggle);\n    }\n\n    // Only emit the change event for user input.\n    if (isUserInput) {\n      this._emitChangeEvent();\n    }\n\n    // Note: we emit this one no matter whether it was a user interaction, because\n    // it is used by Angular to sync up the two-way data binding.\n    this.valueChange.emit(this.value);\n  }\n\n  /** Checks whether a button toggle is selected. */\n  _isSelected(toggle: MatButtonToggle) {\n    return this._selectionModel.isSelected(toggle);\n  }\n\n  /** Determines whether a button toggle should be checked on init. */\n  _isPrechecked(toggle: MatButtonToggle) {\n    if (typeof this._rawValue === 'undefined') {\n      return false;\n    }\n\n    if (this.multiple && Array.isArray(this._rawValue)) {\n      return this._rawValue.some(value => toggle.value != null && value === toggle.value);\n    }\n\n    return toggle.value === this._rawValue;\n  }\n\n  /** Updates the selection state of the toggles in the group based on a value. */\n  private _setSelectionByValue(value: any|any[]) {\n    this._rawValue = value;\n\n    if (!this._buttonToggles) {\n      return;\n    }\n\n    if (this.multiple && value) {\n      if (!Array.isArray(value)) {\n        throw Error('Value must be an array in multiple-selection mode.');\n      }\n\n      this._clearSelection();\n      value.forEach((currentValue: any) => this._selectValue(currentValue));\n    } else {\n      this._clearSelection();\n      this._selectValue(value);\n    }\n  }\n\n  /** Clears the selected toggles. */\n  private _clearSelection() {\n    this._selectionModel.clear();\n    this._buttonToggles.forEach(toggle => toggle.checked = false);\n  }\n\n  /** Selects a value if there's a toggle that corresponds to it. */\n  private _selectValue(value: any) {\n    const correspondingOption = this._buttonToggles.find(toggle => {\n      return toggle.value != null && toggle.value === value;\n    });\n\n    if (correspondingOption) {\n      correspondingOption.checked = true;\n      this._selectionModel.select(correspondingOption);\n    }\n  }\n}\n\n// Boilerplate for applying mixins to the MatButtonToggle class.\n/** @docs-private */\nexport class MatButtonToggleBase {}\nexport const _MatButtonToggleMixinBase = mixinDisableRipple(MatButtonToggleBase);\n\n/** Single button inside of a toggle group. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-button-toggle',\n  templateUrl: 'button-toggle.html',\n  styleUrls: ['button-toggle.css'],\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matButtonToggle',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  inputs: ['disableRipple'],\n  host: {\n    '[class.mat-button-toggle-standalone]': '!buttonToggleGroup',\n    '[class.mat-button-toggle-checked]': 'checked',\n    '[class.mat-button-toggle-disabled]': 'disabled',\n    'class': 'mat-button-toggle',\n    '[attr.id]': 'id',\n  }\n})\nexport class MatButtonToggle extends _MatButtonToggleMixinBase implements OnInit,\n  CanDisableRipple, OnDestroy {\n\n  private _isSingleSelector = false;\n  private _checked = false;\n\n  /**\n   * Attached to the aria-label attribute of the host element. In most cases, arial-labelledby will\n   * take precedence so this may be omitted.\n   */\n  @Input('aria-label') ariaLabel: string;\n\n  /**\n   * Users can specify the `aria-labelledby` attribute which will be forwarded to the input element\n   */\n  @Input('aria-labelledby') ariaLabelledby: string | null = null;\n\n  /** Type of the button toggle. Either 'radio' or 'checkbox'. */\n  _type: ToggleType;\n\n  @ViewChild('input') _inputElement: ElementRef<HTMLInputElement>;\n\n  /** The parent button toggle group (exclusive selection). Optional. */\n  buttonToggleGroup: MatButtonToggleGroup;\n\n  /** Unique ID for the underlying `input` element. */\n  get inputId(): string { return `${this.id}-input`; }\n\n  /** The unique ID for this button toggle. */\n  @Input() id: string;\n\n  /** HTML's 'name' attribute used to group radios for unique selection. */\n  @Input() name: string;\n\n  /** MatButtonToggleGroup reads this to assign its own value. */\n  @Input() value: any;\n\n  /** Whether the button is checked. */\n  @Input()\n  get checked(): boolean {\n    return this.buttonToggleGroup ? this.buttonToggleGroup._isSelected(this) : this._checked;\n  }\n  set checked(value: boolean) {\n    const newValue = coerceBooleanProperty(value);\n\n    if (newValue !== this._checked) {\n      this._checked = newValue;\n\n      if (this.buttonToggleGroup) {\n        this.buttonToggleGroup._syncButtonToggle(this, this._checked);\n      }\n\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  /** Whether the button is disabled. */\n  @Input()\n  get disabled(): boolean {\n    return this._disabled || (this.buttonToggleGroup && this.buttonToggleGroup.disabled);\n  }\n  set disabled(value: boolean) { this._disabled = coerceBooleanProperty(value); }\n  private _disabled: boolean = false;\n\n  /** Event emitted when the group value changes. */\n  @Output() readonly change: EventEmitter<MatButtonToggleChange> =\n      new EventEmitter<MatButtonToggleChange>();\n\n  constructor(@Optional() toggleGroup: MatButtonToggleGroup,\n              private _changeDetectorRef: ChangeDetectorRef,\n              private _elementRef: ElementRef<HTMLElement>,\n              private _focusMonitor: FocusMonitor) {\n    super();\n\n    this.buttonToggleGroup = toggleGroup;\n  }\n\n  ngOnInit() {\n    this._isSingleSelector = this.buttonToggleGroup && !this.buttonToggleGroup.multiple;\n    this._type = this._isSingleSelector ? 'radio' : 'checkbox';\n    this.id = this.id || `mat-button-toggle-${_uniqueIdCounter++}`;\n\n    if (this._isSingleSelector) {\n      this.name = this.buttonToggleGroup.name;\n    }\n\n    if (this.buttonToggleGroup && this.buttonToggleGroup._isPrechecked(this)) {\n      this.checked = true;\n    }\n\n    this._focusMonitor.monitor(this._elementRef.nativeElement, true);\n  }\n\n  ngOnDestroy() {\n    this._focusMonitor.stopMonitoring(this._elementRef.nativeElement);\n  }\n\n  /** Focuses the button. */\n  focus(): void {\n    this._inputElement.nativeElement.focus();\n  }\n\n  /** Checks the button toggle due to an interaction with the underlying native input. */\n  _onInputChange(event: Event) {\n    event.stopPropagation();\n\n    this._checked = this._isSingleSelector ? true : !this._checked;\n\n    if (this.buttonToggleGroup) {\n      this.buttonToggleGroup._syncButtonToggle(this, this._checked, true);\n      this.buttonToggleGroup._onTouched();\n    }\n\n    // Emit a change event when the native input does.\n    this.change.emit(new MatButtonToggleChange(this, this.value));\n  }\n\n  _onInputClick(event: Event) {\n    // We have to stop propagation for click events on the visual hidden input element.\n    // By default, when a user clicks on a label element, a generated click event will be\n    // dispatched on the associated input element. Since we are using a label element as our\n    // root container, the click event on the `slide-toggle` will be executed twice.\n    // The real click event will bubble up, and the generated click event also tries to bubble up.\n    // This will lead to multiple click events.\n    // Preventing bubbling for the second event will solve that issue.\n    event.stopPropagation();\n  }\n\n  /**\n   * Marks the button toggle as needing checking for change detection.\n   * This method is exposed because the parent button toggle group will directly\n   * update bound properties of the radio button.\n   */\n  _markForCheck() {\n    // When the group value changes, the button will not be notified.\n    // Use `markForCheck` to explicit update button toggle's status.\n    this._changeDetectorRef.markForCheck();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {MatButtonToggle, MatButtonToggleGroup} from './button-toggle';\n\n\n@NgModule({\n  imports: [MatCommonModule, MatRippleModule],\n  exports: [MatCommonModule, MatButtonToggleGroup, MatButtonToggle],\n  declarations: [MatButtonToggleGroup, MatButtonToggle],\n})\nexport class MatButtonToggleModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ViewEncapsulation,\n  ChangeDetectionStrategy,\n  Directive,\n  Input,\n} from '@angular/core';\n\n\n/**\n * Content of a card, needed as it's used as a selector in the API.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-card-content',\n  host: {'class': 'mat-card-content'}\n})\nexport class MatCardContent {}\n\n/**\n * Title of a card, needed as it's used as a selector in the API.\n * @docs-private\n */\n@Directive({\n  selector: `mat-card-title, [mat-card-title], [matCardTitle]`,\n  host: {\n    'class': 'mat-card-title'\n  }\n})\nexport class MatCardTitle {}\n\n/**\n * Sub-title of a card, needed as it's used as a selector in the API.\n * @docs-private\n */\n@Directive({\n  selector: `mat-card-subtitle, [mat-card-subtitle], [matCardSubtitle]`,\n  host: {\n    'class': 'mat-card-subtitle'\n  }\n})\nexport class MatCardSubtitle {}\n\n/**\n * Action section of a card, needed as it's used as a selector in the API.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-card-actions',\n  exportAs: 'matCardActions',\n  host: {\n    'class': 'mat-card-actions',\n    '[class.mat-card-actions-align-end]': 'align === \"end\"',\n  }\n})\nexport class MatCardActions {\n  /** Position of the actions inside the card. */\n  @Input() align: 'start' | 'end' = 'start';\n}\n\n/**\n * Footer of a card, needed as it's used as a selector in the API.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-card-footer',\n  host: {'class': 'mat-card-footer'}\n})\nexport class MatCardFooter {}\n\n/**\n * Image used in a card, needed to add the mat- CSS styling.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-card-image], [matCardImage]',\n  host: {'class': 'mat-card-image'}\n})\nexport class MatCardImage {}\n\n/**\n * Image used in a card, needed to add the mat- CSS styling.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-card-sm-image], [matCardImageSmall]',\n  host: {'class': 'mat-card-sm-image'}\n})\nexport class MatCardSmImage {}\n\n/**\n * Image used in a card, needed to add the mat- CSS styling.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-card-md-image], [matCardImageMedium]',\n  host: {'class': 'mat-card-md-image'}\n})\nexport class MatCardMdImage {}\n\n/**\n * Image used in a card, needed to add the mat- CSS styling.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-card-lg-image], [matCardImageLarge]',\n  host: {'class': 'mat-card-lg-image'}\n})\nexport class MatCardLgImage {}\n\n/**\n * Large image used in a card, needed to add the mat- CSS styling.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-card-xl-image], [matCardImageXLarge]',\n  host: {'class': 'mat-card-xl-image'}\n})\nexport class MatCardXlImage {}\n\n/**\n * Avatar image used in a card, needed to add the mat- CSS styling.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-card-avatar], [matCardAvatar]',\n  host: {'class': 'mat-card-avatar'}\n})\nexport class MatCardAvatar {}\n\n\n/**\n * A basic content container component that adds the styles of a Material design card.\n *\n * While this component can be used alone, it also provides a number\n * of preset styles for common card sections, including:\n * - mat-card-title\n * - mat-card-subtitle\n * - mat-card-content\n * - mat-card-actions\n * - mat-card-footer\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-card',\n  exportAs: 'matCard',\n  templateUrl: 'card.html',\n  styleUrls: ['card.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {'class': 'mat-card'}\n})\nexport class MatCard {}\n\n\n/**\n * Component intended to be used within the `<mat-card>` component. It adds styles for a\n * preset header section (i.e. a title, subtitle, and avatar layout).\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-card-header',\n  templateUrl: 'card-header.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {'class': 'mat-card-header'}\n})\nexport class MatCardHeader {}\n\n\n/**\n * Component intended to be used within the `<mat-card>` component. It adds styles for a preset\n * layout that groups an image with a title section.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-card-title-group',\n  templateUrl: 'card-title-group.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {'class': 'mat-card-title-group'}\n})\nexport class MatCardTitleGroup {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {\n  MatCard,\n  MatCardActions,\n  MatCardAvatar,\n  MatCardContent,\n  MatCardFooter,\n  MatCardHeader,\n  MatCardImage,\n  MatCardLgImage,\n  MatCardMdImage,\n  MatCardSmImage,\n  MatCardSubtitle,\n  MatCardTitle,\n  MatCardTitleGroup,\n  MatCardXlImage,\n} from './card';\n\n\n@NgModule({\n  imports: [MatCommonModule],\n  exports: [\n    MatCard,\n    MatCardHeader,\n    MatCardTitleGroup,\n    MatCardContent,\n    MatCardTitle,\n    MatCardSubtitle,\n    MatCardActions,\n    MatCardFooter,\n    MatCardSmImage,\n    MatCardMdImage,\n    MatCardLgImage,\n    MatCardImage,\n    MatCardXlImage,\n    MatCardAvatar,\n    MatCommonModule,\n  ],\n  declarations: [\n    MatCard, MatCardHeader, MatCardTitleGroup, MatCardContent, MatCardTitle, MatCardSubtitle,\n    MatCardActions, MatCardFooter, MatCardSmImage, MatCardMdImage, MatCardLgImage, MatCardImage,\n    MatCardXlImage, MatCardAvatar,\n  ],\n})\nexport class MatCardModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {InjectionToken} from '@angular/core';\n\n\n/**\n * Checkbox click action when user click on input element.\n * noop: Do not toggle checked or indeterminate.\n * check: Only toggle checked status, ignore indeterminate.\n * check-indeterminate: Toggle checked status, set indeterminate to false. Default behavior.\n * undefined: Same as `check-indeterminate`.\n */\nexport type MatCheckboxClickAction = 'noop' | 'check' | 'check-indeterminate' | undefined;\n\n/**\n * Injection token that can be used to specify the checkbox click behavior.\n */\nexport const MAT_CHECKBOX_CLICK_ACTION =\n    new InjectionToken<MatCheckboxClickAction>('mat-checkbox-click-action');\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {MatOptionModule, MatCommonModule} from '@angular/material/core';\nimport {MatAutocomplete} from './autocomplete';\nimport {\n  MatAutocompleteTrigger,\n  MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY_PROVIDER,\n} from './autocomplete-trigger';\nimport {MatAutocompleteOrigin} from './autocomplete-origin';\n\n@NgModule({\n  imports: [MatOptionModule, OverlayModule, MatCommonModule, CommonModule],\n  exports: [\n    MatAutocomplete,\n    MatOptionModule,\n    MatAutocompleteTrigger,\n    MatAutocompleteOrigin,\n    MatCommonModule\n  ],\n  declarations: [MatAutocomplete, MatAutocompleteTrigger, MatAutocompleteOrigin],\n  providers: [MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY_PROVIDER],\n})\nexport class MatAutocompleteModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {AriaDescriber} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {DOCUMENT} from '@angular/common';\nimport {Directive, ElementRef, Inject, Input, NgZone, OnDestroy, Optional} from '@angular/core';\nimport {ThemePalette} from '@angular/material/core';\n\n\nlet nextId = 0;\n\nexport type MatBadgePosition = 'above after' | 'above before' | 'below before' | 'below after';\nexport type MatBadgeSize = 'small' | 'medium' | 'large';\n\n/** Directive to display a text badge. */\n@Directive({\n  selector: '[matBadge]',\n  host: {\n    'class': 'mat-badge',\n    '[class.mat-badge-overlap]': 'overlap',\n    '[class.mat-badge-above]': 'isAbove()',\n    '[class.mat-badge-below]': '!isAbove()',\n    '[class.mat-badge-before]': '!isAfter()',\n    '[class.mat-badge-after]': 'isAfter()',\n    '[class.mat-badge-small]': 'size === \"small\"',\n    '[class.mat-badge-medium]': 'size === \"medium\"',\n    '[class.mat-badge-large]': 'size === \"large\"',\n    '[class.mat-badge-hidden]': 'hidden',\n  },\n})\nexport class MatBadge implements OnDestroy {\n\n  /** The color of the badge. Can be `primary`, `accent`, or `warn`. */\n  @Input('matBadgeColor')\n  get color(): ThemePalette { return this._color; }\n  set color(value: ThemePalette) {\n    this._setColor(value);\n    this._color = value;\n  }\n  private _color: ThemePalette = 'primary';\n\n  /** Whether the badge should overlap its contents or not */\n  @Input('matBadgeOverlap')\n  get overlap(): boolean { return this._overlap; }\n  set overlap(val: boolean) {\n    this._overlap = coerceBooleanProperty(val);\n  }\n  private _overlap: boolean = true;\n\n  /**\n   * Position the badge should reside.\n   * Accepts any combination of 'above'|'below' and 'before'|'after'\n   */\n  @Input('matBadgePosition') position: MatBadgePosition = 'above after';\n\n  /** The content for the badge */\n  @Input('matBadge')\n  get content(): string { return this._content; }\n  set content(val: string) {\n    this._content = val;\n    this._updateTextContent();\n  }\n  private _content: string;\n\n  /** Message used to describe the decorated element via aria-describedby */\n  @Input('matBadgeDescription')\n  get description(): string { return this._description; }\n  set description(newDescription: string) {\n    if (newDescription !== this._description) {\n      this._updateHostAriaDescription(newDescription, this._description);\n      this._description = newDescription;\n    }\n  }\n  private _description: string;\n\n  /** Size of the badge. Can be 'small', 'medium', or 'large'. */\n  @Input('matBadgeSize') size: MatBadgeSize = 'medium';\n\n  /** Whether the badge is hidden. */\n  @Input('matBadgeHidden')\n  get hidden(): boolean { return this._hidden; }\n  set hidden(val: boolean) {\n    this._hidden = coerceBooleanProperty(val);\n  }\n  private _hidden: boolean;\n\n  /** Unique id for the badge */\n  _id: number = nextId++;\n\n  private _badgeElement: HTMLElement;\n\n  constructor(\n      @Optional() @Inject(DOCUMENT) private _document: any,\n      private _ngZone: NgZone,\n      private _elementRef: ElementRef,\n      private _ariaDescriber: AriaDescriber) {}\n\n  /** Whether the badge is above the host or not */\n  isAbove(): boolean {\n    return this.position.indexOf('below') === -1;\n  }\n\n  /** Whether the badge is after the host or not */\n  isAfter(): boolean {\n    return this.position.indexOf('before') === -1;\n  }\n\n  ngOnDestroy() {\n    if (this.description && this._badgeElement) {\n      this._ariaDescriber.removeDescription(this._badgeElement, this.description);\n    }\n  }\n\n  /** Injects a span element into the DOM with the content. */\n  private _updateTextContent(): HTMLSpanElement {\n    if (!this._badgeElement) {\n      this._badgeElement = this._createBadgeElement();\n    } else {\n      this._badgeElement.textContent = this.content;\n    }\n    return this._badgeElement;\n  }\n\n  /** Creates the badge element */\n  private _createBadgeElement(): HTMLElement {\n    const badgeElement = this._document.createElement('span');\n    const activeClass = 'mat-badge-active';\n\n    badgeElement.setAttribute('id', `mat-badge-content-${this._id}`);\n    badgeElement.classList.add('mat-badge-content');\n    badgeElement.textContent = this.content;\n\n    if (this.description) {\n      badgeElement.setAttribute('aria-label', this.description);\n    }\n\n    this._elementRef.nativeElement.appendChild(badgeElement);\n\n    // animate in after insertion\n    if (typeof requestAnimationFrame === 'function') {\n      this._ngZone.runOutsideAngular(() => {\n        requestAnimationFrame(() => {\n          badgeElement.classList.add(activeClass);\n        });\n      });\n    } else {\n      badgeElement.classList.add(activeClass);\n    }\n\n    return badgeElement;\n  }\n\n  /** Sets the aria-label property on the element */\n  private _updateHostAriaDescription(newDescription: string, oldDescription: string): void {\n    // ensure content available before setting label\n    const content = this._updateTextContent();\n\n    if (oldDescription) {\n      this._ariaDescriber.removeDescription(content, oldDescription);\n    }\n\n    if (newDescription) {\n      this._ariaDescriber.describe(content, newDescription);\n    }\n  }\n\n  /** Adds css theme class given the color to the component host */\n  private _setColor(colorPalette: ThemePalette) {\n    if (colorPalette !== this._color) {\n      if (this._color) {\n        this._elementRef.nativeElement.classList.remove(`mat-badge-${this._color}`);\n      }\n      if (colorPalette) {\n        this._elementRef.nativeElement.classList.add(`mat-badge-${colorPalette}`);\n      }\n    }\n  }\n\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatBadge} from './badge';\n\n\n@NgModule({\n  imports: [MatCommonModule],\n  exports: [MatBadge],\n  declarations: [MatBadge],\n})\nexport class MatBadgeModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ViewContainerRef, InjectionToken} from '@angular/core';\nimport {Direction} from '@angular/cdk/bidi';\n\n/** Injection token that can be used to access the data that was passed in to a bottom sheet. */\nexport const MAT_BOTTOM_SHEET_DATA = new InjectionToken<any>('MatBottomSheetData');\n\n/**\n * Configuration used when opening a bottom sheet.\n */\nexport class MatBottomSheetConfig<D = any> {\n  /** The view container to place the overlay for the bottom sheet into. */\n  viewContainerRef?: ViewContainerRef;\n\n  /** Extra CSS classes to be added to the bottom sheet container. */\n  panelClass?: string | string[];\n\n  /** Text layout direction for the bottom sheet. */\n  direction?: Direction;\n\n  /** Data being injected into the child component. */\n  data?: D | null = null;\n\n  /** Whether the bottom sheet has a backdrop. */\n  hasBackdrop?: boolean = true;\n\n  /** Custom class for the backdrop. */\n  backdropClass?: string;\n\n  /** Whether the user can use escape or clicking outside to close the bottom sheet. */\n  disableClose?: boolean = false;\n\n  /** Aria label to assign to the bottom sheet element. */\n  ariaLabel?: string | null = null;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\nimport {AnimationCurves, AnimationDurations} from '@angular/material/core';\n\n/** Animations used by the Material bottom sheet. */\nexport const matBottomSheetAnimations: {\n  readonly bottomSheetState: AnimationTriggerMetadata;\n} = {\n  /** Animation that shows and hides a bottom sheet. */\n  bottomSheetState: trigger('state', [\n    state('void, hidden', style({transform: 'translateY(100%)'})),\n    state('visible', style({transform: 'translateY(0%)'})),\n    transition('visible => void, visible => hidden',\n        animate(`${AnimationDurations.COMPLEX} ${AnimationCurves.ACCELERATION_CURVE}`)),\n    transition('void => visible',\n        animate(`${AnimationDurations.EXITING} ${AnimationCurves.DECELERATION_CURVE}`)),\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ComponentRef,\n  EmbeddedViewRef,\n  ViewChild,\n  OnDestroy,\n  ElementRef,\n  ChangeDetectionStrategy,\n  ViewEncapsulation,\n  ChangeDetectorRef,\n  EventEmitter,\n  Inject,\n  Optional,\n} from '@angular/core';\nimport {AnimationEvent} from '@angular/animations';\nimport {\n  BasePortalOutlet,\n  ComponentPortal,\n  TemplatePortal,\n  CdkPortalOutlet,\n} from '@angular/cdk/portal';\nimport {BreakpointObserver, Breakpoints} from '@angular/cdk/layout';\nimport {MatBottomSheetConfig} from './bottom-sheet-config';\nimport {matBottomSheetAnimations} from './bottom-sheet-animations';\nimport {Subscription} from 'rxjs';\nimport {DOCUMENT} from '@angular/common';\nimport {FocusTrap, FocusTrapFactory} from '@angular/cdk/a11y';\n\n// TODO(crisbeto): consolidate some logic between this, MatDialog and MatSnackBar\n\n/**\n * Internal component that wraps user-provided bottom sheet content.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-bottom-sheet-container',\n  templateUrl: 'bottom-sheet-container.html',\n  styleUrls: ['bottom-sheet-container.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  animations: [matBottomSheetAnimations.bottomSheetState],\n  host: {\n    'class': 'mat-bottom-sheet-container',\n    'tabindex': '-1',\n    'role': 'dialog',\n    '[attr.aria-label]': 'bottomSheetConfig?.ariaLabel',\n    '[@state]': '_animationState',\n    '(@state.start)': '_onAnimationStart($event)',\n    '(@state.done)': '_onAnimationDone($event)'\n  },\n})\nexport class MatBottomSheetContainer extends BasePortalOutlet implements OnDestroy {\n  private _breakpointSubscription: Subscription;\n\n  /** The portal outlet inside of this container into which the content will be loaded. */\n  @ViewChild(CdkPortalOutlet) _portalOutlet: CdkPortalOutlet;\n\n  /** The state of the bottom sheet animations. */\n  _animationState: 'void' | 'visible' | 'hidden' = 'void';\n\n  /** Emits whenever the state of the animation changes. */\n  _animationStateChanged = new EventEmitter<AnimationEvent>();\n\n  /** The class that traps and manages focus within the bottom sheet. */\n  private _focusTrap: FocusTrap;\n\n  /** Element that was focused before the bottom sheet was opened. */\n  private _elementFocusedBeforeOpened: HTMLElement | null = null;\n\n  /** Server-side rendering-compatible reference to the global document object. */\n  private _document: Document;\n\n  /** Whether the component has been destroyed. */\n  private _destroyed: boolean;\n\n  constructor(\n    private _elementRef: ElementRef,\n    private _changeDetectorRef: ChangeDetectorRef,\n    private _focusTrapFactory: FocusTrapFactory,\n    breakpointObserver: BreakpointObserver,\n    @Optional() @Inject(DOCUMENT) document: any,\n    /** The bottom sheet configuration. */\n    public bottomSheetConfig: MatBottomSheetConfig) {\n    super();\n\n    this._document = document;\n    this._breakpointSubscription = breakpointObserver\n      .observe([Breakpoints.Medium, Breakpoints.Large, Breakpoints.XLarge])\n      .subscribe(() => {\n        this._toggleClass('mat-bottom-sheet-container-medium',\n            breakpointObserver.isMatched(Breakpoints.Medium));\n        this._toggleClass('mat-bottom-sheet-container-large',\n            breakpointObserver.isMatched(Breakpoints.Large));\n        this._toggleClass('mat-bottom-sheet-container-xlarge',\n            breakpointObserver.isMatched(Breakpoints.XLarge));\n      });\n  }\n\n  /** Attach a component portal as content to this bottom sheet container. */\n  attachComponentPortal<T>(portal: ComponentPortal<T>): ComponentRef<T> {\n    this._validatePortalAttached();\n    this._setPanelClass();\n    this._savePreviouslyFocusedElement();\n    return this._portalOutlet.attachComponentPortal(portal);\n  }\n\n  /** Attach a template portal as content to this bottom sheet container. */\n  attachTemplatePortal<C>(portal: TemplatePortal<C>): EmbeddedViewRef<C> {\n    this._validatePortalAttached();\n    this._setPanelClass();\n    this._savePreviouslyFocusedElement();\n    return this._portalOutlet.attachTemplatePortal(portal);\n  }\n\n  /** Begin animation of bottom sheet entrance into view. */\n  enter(): void {\n    if (!this._destroyed) {\n      this._animationState = 'visible';\n      this._changeDetectorRef.detectChanges();\n    }\n  }\n\n  /** Begin animation of the bottom sheet exiting from view. */\n  exit(): void {\n    if (!this._destroyed) {\n      this._animationState = 'hidden';\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  ngOnDestroy() {\n    this._breakpointSubscription.unsubscribe();\n    this._destroyed = true;\n  }\n\n  _onAnimationDone(event: AnimationEvent) {\n    if (event.toState === 'visible') {\n      this._trapFocus();\n    } else if (event.toState === 'hidden') {\n      this._restoreFocus();\n    }\n\n    this._animationStateChanged.emit(event);\n  }\n\n  _onAnimationStart(event: AnimationEvent) {\n    this._animationStateChanged.emit(event);\n  }\n\n  private _toggleClass(cssClass: string, add: boolean) {\n    const classList = this._elementRef.nativeElement.classList;\n    add ? classList.add(cssClass) : classList.remove(cssClass);\n  }\n\n  private _validatePortalAttached() {\n    if (this._portalOutlet.hasAttached()) {\n      throw Error('Attempting to attach bottom sheet content after content is already attached');\n    }\n  }\n\n  private _setPanelClass() {\n    const element: HTMLElement = this._elementRef.nativeElement;\n    const panelClass = this.bottomSheetConfig.panelClass;\n\n    if (Array.isArray(panelClass)) {\n      // Note that we can't use a spread here, because IE doesn't support multiple arguments.\n      panelClass.forEach(cssClass => element.classList.add(cssClass));\n    } else if (panelClass) {\n      element.classList.add(panelClass);\n    }\n  }\n\n\n  /** Moves the focus inside the focus trap. */\n  private _trapFocus() {\n    if (!this._focusTrap) {\n      this._focusTrap = this._focusTrapFactory.create(this._elementRef.nativeElement);\n    }\n\n    this._focusTrap.focusInitialElementWhenReady();\n  }\n\n  /** Restores focus to the element that was focused before the bottom sheet opened. */\n  private _restoreFocus() {\n    const toFocus = this._elementFocusedBeforeOpened;\n\n    // We need the extra check, because IE can set the `activeElement` to null in some cases.\n    if (toFocus && typeof toFocus.focus === 'function') {\n      toFocus.focus();\n    }\n\n    if (this._focusTrap) {\n      this._focusTrap.destroy();\n    }\n  }\n\n  /** Saves a reference to the element that was focused before the bottom sheet was opened. */\n  private _savePreviouslyFocusedElement() {\n    this._elementFocusedBeforeOpened = this._document.activeElement as HTMLElement;\n\n    // The `focus` method isn't available during server-side rendering.\n    if (this._elementRef.nativeElement.focus) {\n      Promise.resolve().then(() => this._elementRef.nativeElement.focus());\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatBottomSheetContainer} from './bottom-sheet-container';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    OverlayModule,\n    MatCommonModule,\n    PortalModule,\n  ],\n  exports: [MatBottomSheetContainer, MatCommonModule],\n  declarations: [MatBottomSheetContainer],\n  entryComponents: [MatBottomSheetContainer],\n})\nexport class MatBottomSheetModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ESCAPE} from '@angular/cdk/keycodes';\nimport {OverlayRef} from '@angular/cdk/overlay';\nimport {merge, Observable, Subject} from 'rxjs';\nimport {filter, take} from 'rxjs/operators';\nimport {MatBottomSheetContainer} from './bottom-sheet-container';\n\n\n/**\n * Reference to a bottom sheet dispatched from the bottom sheet service.\n */\nexport class MatBottomSheetRef<T = any, R = any> {\n  /** Instance of the component making up the content of the bottom sheet. */\n  instance: T;\n\n  /**\n   * Instance of the component into which the bottom sheet content is projected.\n   * @docs-private\n   */\n  containerInstance: MatBottomSheetContainer;\n\n  /** Subject for notifying the user that the bottom sheet has been dismissed. */\n  private readonly _afterDismissed = new Subject<R | undefined>();\n\n  /** Subject for notifying the user that the bottom sheet has opened and appeared. */\n  private readonly _afterOpened = new Subject<void>();\n\n  /** Result to be passed down to the `afterDismissed` stream. */\n  private _result: R | undefined;\n\n  constructor(containerInstance: MatBottomSheetContainer, private _overlayRef: OverlayRef) {\n    this.containerInstance = containerInstance;\n\n    // Emit when opening animation completes\n    containerInstance._animationStateChanged.pipe(\n      filter(event => event.phaseName === 'done' && event.toState === 'visible'),\n      take(1)\n    )\n    .subscribe(() => {\n      this._afterOpened.next();\n      this._afterOpened.complete();\n    });\n\n    // Dispose overlay when closing animation is complete\n    containerInstance._animationStateChanged.pipe(\n      filter(event => event.phaseName === 'done' && event.toState === 'hidden'),\n      take(1)\n    )\n    .subscribe(() => {\n      this._overlayRef.dispose();\n      this._afterDismissed.next(this._result);\n      this._afterDismissed.complete();\n    });\n\n    if (!containerInstance.bottomSheetConfig.disableClose) {\n      merge(\n        _overlayRef.backdropClick(),\n        _overlayRef._keydownEvents.pipe(filter(event => event.keyCode === ESCAPE))\n      ).subscribe(() => this.dismiss());\n    }\n  }\n\n  /**\n   * Dismisses the bottom sheet.\n   * @param result Data to be passed back to the bottom sheet opener.\n   */\n  dismiss(result?: R): void {\n    if (!this._afterDismissed.closed) {\n      // Transition the backdrop in parallel to the bottom sheet.\n      this.containerInstance._animationStateChanged.pipe(\n        filter(event => event.phaseName === 'start'),\n        take(1)\n      ).subscribe(() => this._overlayRef.detachBackdrop());\n\n      this._result = result;\n      this.containerInstance.exit();\n    }\n  }\n\n  /** Gets an observable that is notified when the bottom sheet is finished closing. */\n  afterDismissed(): Observable<R | undefined> {\n    return this._afterDismissed.asObservable();\n  }\n\n  /** Gets an observable that is notified when the bottom sheet has opened and appeared. */\n  afterOpened(): Observable<void> {\n    return this._afterOpened.asObservable();\n  }\n\n  /**\n   * Gets an observable that emits when the overlay's backdrop has been clicked.\n   */\n  backdropClick(): Observable<MouseEvent> {\n    return this._overlayRef.backdropClick();\n  }\n\n  /**\n   * Gets an observable that emits when keydown events are targeted on the overlay.\n   */\n  keydownEvents(): Observable<KeyboardEvent> {\n    return this._overlayRef.keydownEvents();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directionality} from '@angular/cdk/bidi';\nimport {Overlay, OverlayConfig, OverlayRef} from '@angular/cdk/overlay';\nimport {ComponentPortal, ComponentType, PortalInjector, TemplatePortal} from '@angular/cdk/portal';\nimport {ComponentRef, Injectable, Injector, Optional, SkipSelf, TemplateRef} from '@angular/core';\nimport {of as observableOf} from 'rxjs';\nimport {MAT_BOTTOM_SHEET_DATA, MatBottomSheetConfig} from './bottom-sheet-config';\nimport {MatBottomSheetContainer} from './bottom-sheet-container';\nimport {MatBottomSheetModule} from './bottom-sheet-module';\nimport {MatBottomSheetRef} from './bottom-sheet-ref';\n\n\n/**\n * Service to trigger Material Design bottom sheets.\n */\n@Injectable({providedIn: MatBottomSheetModule})\nexport class MatBottomSheet {\n  private _bottomSheetRefAtThisLevel: MatBottomSheetRef<any> | null = null;\n\n  /** Reference to the currently opened bottom sheet. */\n  get _openedBottomSheetRef(): MatBottomSheetRef<any> | null {\n    const parent = this._parentBottomSheet;\n    return parent ? parent._openedBottomSheetRef : this._bottomSheetRefAtThisLevel;\n  }\n\n  set _openedBottomSheetRef(value: MatBottomSheetRef<any> | null) {\n    if (this._parentBottomSheet) {\n      this._parentBottomSheet._openedBottomSheetRef = value;\n    } else {\n      this._bottomSheetRefAtThisLevel = value;\n    }\n  }\n\n  constructor(\n      private _overlay: Overlay,\n      private _injector: Injector,\n      @Optional() @SkipSelf() private _parentBottomSheet: MatBottomSheet) {}\n\n  open<T, D = any, R = any>(component: ComponentType<T>,\n                   config?: MatBottomSheetConfig<D>): MatBottomSheetRef<T, R>;\n  open<T, D = any, R = any>(template: TemplateRef<T>,\n                   config?: MatBottomSheetConfig<D>): MatBottomSheetRef<T, R>;\n\n  open<T, D = any, R = any>(componentOrTemplateRef: ComponentType<T> | TemplateRef<T>,\n                   config?: MatBottomSheetConfig<D>): MatBottomSheetRef<T, R> {\n\n    const _config = _applyConfigDefaults(config);\n    const overlayRef = this._createOverlay(_config);\n    const container = this._attachContainer(overlayRef, _config);\n    const ref = new MatBottomSheetRef<T, R>(container, overlayRef);\n\n    if (componentOrTemplateRef instanceof TemplateRef) {\n      container.attachTemplatePortal(new TemplatePortal<T>(componentOrTemplateRef, null!, {\n        $implicit: _config.data,\n        bottomSheetRef: ref\n      } as any));\n    } else {\n      const portal = new ComponentPortal(componentOrTemplateRef, undefined,\n            this._createInjector(_config, ref));\n      const contentRef = container.attachComponentPortal(portal);\n      ref.instance = contentRef.instance;\n    }\n\n    // When the bottom sheet is dismissed, clear the reference to it.\n    ref.afterDismissed().subscribe(() => {\n      // Clear the bottom sheet ref if it hasn't already been replaced by a newer one.\n      if (this._openedBottomSheetRef == ref) {\n        this._openedBottomSheetRef = null;\n      }\n    });\n\n    if (this._openedBottomSheetRef) {\n      // If a bottom sheet is already in view, dismiss it and enter the\n      // new bottom sheet after exit animation is complete.\n      this._openedBottomSheetRef.afterDismissed().subscribe(() => ref.containerInstance.enter());\n      this._openedBottomSheetRef.dismiss();\n    } else {\n      // If no bottom sheet is in view, enter the new bottom sheet.\n      ref.containerInstance.enter();\n    }\n\n    this._openedBottomSheetRef = ref;\n\n    return ref;\n  }\n\n  /**\n   * Dismisses the currently-visible bottom sheet.\n   */\n  dismiss(): void {\n    if (this._openedBottomSheetRef) {\n      this._openedBottomSheetRef.dismiss();\n    }\n  }\n\n  /**\n   * Attaches the bottom sheet container component to the overlay.\n   */\n  private _attachContainer(overlayRef: OverlayRef,\n                           config: MatBottomSheetConfig): MatBottomSheetContainer {\n\n    const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n    const injector = new PortalInjector(userInjector || this._injector, new WeakMap([\n      [MatBottomSheetConfig, config]\n    ]));\n\n    const containerPortal =\n        new ComponentPortal(MatBottomSheetContainer, config.viewContainerRef, injector);\n    const containerRef: ComponentRef<MatBottomSheetContainer> = overlayRef.attach(containerPortal);\n    return containerRef.instance;\n  }\n\n  /**\n   * Creates a new overlay and places it in the correct location.\n   * @param config The user-specified bottom sheet config.\n   */\n  private _createOverlay(config: MatBottomSheetConfig): OverlayRef {\n    const overlayConfig = new OverlayConfig({\n      direction: config.direction,\n      hasBackdrop: config.hasBackdrop,\n      maxWidth: '100%',\n      scrollStrategy: this._overlay.scrollStrategies.block(),\n      positionStrategy: this._overlay.position()\n        .global()\n        .centerHorizontally()\n        .bottom('0')\n    });\n\n    if (config.backdropClass) {\n      overlayConfig.backdropClass = config.backdropClass;\n    }\n\n    return this._overlay.create(overlayConfig);\n  }\n\n  /**\n   * Creates an injector to be used inside of a bottom sheet component.\n   * @param config Config that was used to create the bottom sheet.\n   * @param bottomSheetRef Reference to the bottom sheet.\n   */\n  private _createInjector<T>(config: MatBottomSheetConfig,\n                             bottomSheetRef: MatBottomSheetRef<T>): PortalInjector {\n\n    const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n    const injectionTokens = new WeakMap<any, any>([\n      [MatBottomSheetRef, bottomSheetRef],\n      [MAT_BOTTOM_SHEET_DATA, config.data]\n    ]);\n\n    if (config.direction &&\n        (!userInjector || !userInjector.get<Directionality | null>(Directionality, null))) {\n      injectionTokens.set(Directionality, {\n        value: config.direction,\n        change: observableOf()\n      });\n    }\n\n    return new PortalInjector(userInjector || this._injector, injectionTokens);\n  }\n}\n\n/**\n * Applies default options to the bottom sheet config.\n * @param config The configuration to which the defaults will be applied.\n * @returns The new configuration object with defaults applied.\n */\nfunction _applyConfigDefaults(config?: MatBottomSheetConfig): MatBottomSheetConfig {\n  return {...new MatBottomSheetConfig(), ...config};\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {ENTER, SPACE} from '@angular/cdk/keycodes';\nimport {\n  AfterViewChecked,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  InjectionToken,\n  Input,\n  OnDestroy,\n  Optional,\n  Output,\n  QueryList,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {Subject} from 'rxjs';\nimport {MatOptgroup} from './optgroup';\n\n/**\n * Option IDs need to be unique across components, so this counter exists outside of\n * the component definition.\n */\nlet _uniqueIdCounter = 0;\n\n/** Event object emitted by MatOption when selected or deselected. */\nexport class MatOptionSelectionChange {\n  constructor(\n    /** Reference to the option that emitted the event. */\n    public source: MatOption,\n    /** Whether the change in the option's value was a result of a user action. */\n    public isUserInput = false) { }\n}\n\n/**\n * Describes a parent component that manages a list of options.\n * Contains properties that the options can inherit.\n * @docs-private\n */\nexport interface MatOptionParentComponent {\n  disableRipple?: boolean;\n  multiple?: boolean;\n}\n\n/**\n * Injection token used to provide the parent component to options.\n */\nexport const MAT_OPTION_PARENT_COMPONENT =\n    new InjectionToken<MatOptionParentComponent>('MAT_OPTION_PARENT_COMPONENT');\n\n/**\n * Single option inside of a `<mat-select>` element.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-option',\n  exportAs: 'matOption',\n  host: {\n    'role': 'option',\n    '[attr.tabindex]': '_getTabIndex()',\n    '[class.mat-selected]': 'selected',\n    '[class.mat-option-multiple]': 'multiple',\n    '[class.mat-active]': 'active',\n    '[id]': 'id',\n    '[attr.aria-selected]': 'selected.toString()',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[class.mat-option-disabled]': 'disabled',\n    '(click)': '_selectViaInteraction()',\n    '(keydown)': '_handleKeydown($event)',\n    'class': 'mat-option',\n  },\n  styleUrls: ['option.css'],\n  templateUrl: 'option.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatOption implements AfterViewChecked, OnDestroy {\n  private _selected = false;\n  private _active = false;\n  private _disabled = false;\n  private _id = `mat-option-${_uniqueIdCounter++}`;\n  private _mostRecentViewValue = '';\n\n  /** Whether the wrapping component is in multiple selection mode. */\n  get multiple() { return this._parent && this._parent.multiple; }\n\n  /** The unique ID of the option. */\n  get id(): string { return this._id; }\n\n  /** Whether or not the option is currently selected. */\n  get selected(): boolean { return this._selected; }\n\n  /** The form value of the option. */\n  @Input() value: any;\n\n  /** Whether the option is disabled. */\n  @Input()\n  get disabled() { return (this.group && this.group.disabled) || this._disabled; }\n  set disabled(value: any) { this._disabled = coerceBooleanProperty(value); }\n\n  /** Whether ripples for the option are disabled. */\n  get disableRipple() { return this._parent && this._parent.disableRipple; }\n\n  /** Event emitted when the option is selected or deselected. */\n  // tslint:disable-next-line:no-output-on-prefix\n  @Output() readonly onSelectionChange = new EventEmitter<MatOptionSelectionChange>();\n\n  /** Emits when the state of the option changes and any parents have to be notified. */\n  readonly _stateChanges = new Subject<void>();\n\n  constructor(\n    private _element: ElementRef,\n    private _changeDetectorRef: ChangeDetectorRef,\n    @Optional() @Inject(MAT_OPTION_PARENT_COMPONENT) private _parent: MatOptionParentComponent,\n    @Optional() readonly group: MatOptgroup) {}\n\n  /**\n   * Whether or not the option is currently active and ready to be selected.\n   * An active option displays styles as if it is focused, but the\n   * focus is actually retained somewhere else. This comes in handy\n   * for components like autocomplete where focus must remain on the input.\n   */\n  get active(): boolean {\n    return this._active;\n  }\n\n  /**\n   * The displayed value of the option. It is necessary to show the selected option in the\n   * select's trigger.\n   */\n  get viewValue(): string {\n    // TODO(kara): Add input property alternative for node envs.\n    return (this._getHostElement().textContent || '').trim();\n  }\n\n  /** Selects the option. */\n  select(): void {\n    this._selected = true;\n    this._changeDetectorRef.markForCheck();\n    this._emitSelectionChangeEvent();\n  }\n\n  /** Deselects the option. */\n  deselect(): void {\n    this._selected = false;\n    this._changeDetectorRef.markForCheck();\n    this._emitSelectionChangeEvent();\n  }\n\n  /** Sets focus onto this option. */\n  focus(): void {\n    const element = this._getHostElement();\n\n    if (typeof element.focus === 'function') {\n      element.focus();\n    }\n  }\n\n  /**\n   * This method sets display styles on the option to make it appear\n   * active. This is used by the ActiveDescendantKeyManager so key\n   * events will display the proper options as active on arrow key events.\n   */\n  setActiveStyles(): void {\n    if (!this._active) {\n      this._active = true;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  /**\n   * This method removes display styles on the option that made it appear\n   * active. This is used by the ActiveDescendantKeyManager so key\n   * events will display the proper options as active on arrow key events.\n   */\n  setInactiveStyles(): void {\n    if (this._active) {\n      this._active = false;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  /** Gets the label to be used when determining whether the option should be focused. */\n  getLabel(): string {\n    return this.viewValue;\n  }\n\n  /** Ensures the option is selected when activated from the keyboard. */\n  _handleKeydown(event: KeyboardEvent): void {\n    if (event.keyCode === ENTER || event.keyCode === SPACE) {\n      this._selectViaInteraction();\n\n      // Prevent the page from scrolling down and form submits.\n      event.preventDefault();\n    }\n  }\n\n  /**\n   * `Selects the option while indicating the selection came from the user. Used to\n   * determine if the select's view -> model callback should be invoked.`\n   */\n  _selectViaInteraction(): void {\n    if (!this.disabled) {\n      this._selected = this.multiple ? !this._selected : true;\n      this._changeDetectorRef.markForCheck();\n      this._emitSelectionChangeEvent(true);\n    }\n  }\n\n  /** Returns the correct tabindex for the option depending on disabled state. */\n  _getTabIndex(): string {\n    return this.disabled ? '-1' : '0';\n  }\n\n  /** Gets the host DOM element. */\n  _getHostElement(): HTMLElement {\n    return this._element.nativeElement;\n  }\n\n  ngAfterViewChecked() {\n    // Since parent components could be using the option's label to display the selected values\n    // (e.g. `mat-select`) and they don't have a way of knowing if the option's label has changed\n    // we have to check for changes in the DOM ourselves and dispatch an event. These checks are\n    // relatively cheap, however we still limit them only to selected options in order to avoid\n    // hitting the DOM too often.\n    if (this._selected) {\n      const viewValue = this.viewValue;\n\n      if (viewValue !== this._mostRecentViewValue) {\n        this._mostRecentViewValue = viewValue;\n        this._stateChanges.next();\n      }\n    }\n  }\n\n  ngOnDestroy() {\n    this._stateChanges.complete();\n  }\n\n  /** Emits the selection change event. */\n  private _emitSelectionChangeEvent(isUserInput = false): void {\n    this.onSelectionChange.emit(new MatOptionSelectionChange(this, isUserInput));\n  }\n}\n\n/**\n * Counts the amount of option group labels that precede the specified option.\n * @param optionIndex Index of the option at which to start counting.\n * @param options Flat list of all of the options.\n * @param optionGroups Flat list of all of the option groups.\n * @docs-private\n */\nexport function _countGroupLabelsBeforeOption(optionIndex: number, options: QueryList<MatOption>,\n  optionGroups: QueryList<MatOptgroup>): number {\n\n  if (optionGroups.length) {\n    let optionsArray = options.toArray();\n    let groups = optionGroups.toArray();\n    let groupCounter = 0;\n\n    for (let i = 0; i < optionIndex + 1; i++) {\n      if (optionsArray[i].group && optionsArray[i].group === groups[groupCounter]) {\n        groupCounter++;\n      }\n    }\n\n    return groupCounter;\n  }\n\n  return 0;\n}\n\n/**\n * Determines the position to which to scroll a panel in order for an option to be into view.\n * @param optionIndex Index of the option to be scrolled into the view.\n * @param optionHeight Height of the options.\n * @param currentScrollPosition Current scroll position of the panel.\n * @param panelHeight Height of the panel.\n * @docs-private\n */\nexport function _getOptionScrollPosition(optionIndex: number, optionHeight: number,\n    currentScrollPosition: number, panelHeight: number): number {\n  const optionOffset = optionIndex * optionHeight;\n\n  if (optionOffset < currentScrollPosition) {\n    return optionOffset;\n  }\n\n  if (optionOffset + optionHeight > currentScrollPosition + panelHeight) {\n    return Math.max(0, optionOffset - panelHeight + optionHeight);\n  }\n\n  return currentScrollPosition;\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {MatRippleModule} from '../ripple/index';\nimport {MatPseudoCheckboxModule} from '../selection/index';\nimport {MatOption} from './option';\nimport {MatOptgroup} from './optgroup';\n\n\n@NgModule({\n  imports: [MatRippleModule, CommonModule, MatPseudoCheckboxModule],\n  exports: [MatOption, MatOptgroup],\n  declarations: [MatOption, MatOptgroup]\n})\nexport class MatOptionModule {}\n\n\nexport * from './option';\nexport * from './optgroup';\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {InjectionToken} from '@angular/core';\n\n/** InjectionToken that can be used to specify the global label options. */\nexport const MAT_LABEL_GLOBAL_OPTIONS =\n  new InjectionToken<LabelOptions>('mat-label-global-options');\n\n/** Type for the available floatLabel values. */\nexport type FloatLabelType = 'always' | 'never' | 'auto';\n\n/** Configurable options for floating labels. */\nexport interface LabelOptions {\n  /**\n   * Whether the label should float `always`, `never`, or `auto` (only when necessary).\n   * Default behavior is assumed to be `auto`.\n   */\n  float?: FloatLabelType;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, Input} from '@angular/core';\n\n\nlet nextUniqueId = 0;\n\n\n/** Single error message to be shown underneath the form field. */\n@Directive({\n  selector: 'mat-error',\n  host: {\n    'class': 'mat-error',\n    'role': 'alert',\n    '[attr.id]': 'id',\n  }\n})\nexport class MatError {\n  @Input() id: string = `mat-error-${nextUniqueId++}`;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/** Animations used by the MatFormField. */\nexport const matFormFieldAnimations: {\n  readonly transitionMessages: AnimationTriggerMetadata\n} = {\n  /** Animation that transitions the form field's error and hint messages. */\n  transitionMessages: trigger('transitionMessages', [\n    // TODO(mmalerba): Use angular animations for label animation as well.\n    state('enter', style({ opacity: 1, transform: 'translateY(0%)' })),\n    transition('void => enter', [\n      style({ opacity: 0, transform: 'translateY(-100%)' }),\n      animate('300ms cubic-bezier(0.55, 0, 0.55, 0.2)'),\n    ]),\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Observable} from 'rxjs';\nimport {NgControl} from '@angular/forms';\n\n\n/** An interface which allows a control to work inside of a `MatFormField`. */\nexport abstract class MatFormFieldControl<T> {\n  /** The value of the control. */\n  value: T | null;\n\n  /**\n   * Stream that emits whenever the state of the control changes such that the parent `MatFormField`\n   * needs to run change detection.\n   */\n  readonly stateChanges: Observable<void>;\n\n  /** The element ID for this control. */\n  readonly id: string;\n\n  /** The placeholder for this control. */\n  readonly placeholder: string;\n\n  /** Gets the NgControl for this control. */\n  readonly ngControl: NgControl | null;\n\n  /** Whether the control is focused. */\n  readonly focused: boolean;\n\n  /** Whether the control is empty. */\n  readonly empty: boolean;\n\n  /** Whether the `MatFormField` label should try to float. */\n  readonly shouldLabelFloat: boolean;\n\n  /** Whether the control is required. */\n  readonly required: boolean;\n\n  /** Whether the control is disabled. */\n  readonly disabled: boolean;\n\n  /** Whether the control is in an error state. */\n  readonly errorState: boolean;\n\n  /**\n   * An optional name for the control type that can be used to distinguish `mat-form-field` elements\n   * based on their control type. The form field will add a class,\n   * `mat-form-field-type-{{controlType}}` to its root element.\n   */\n  readonly controlType?: string;\n\n  /**\n   * Whether the input is currently in an autofilled state. If property is not present on the\n   * control it is assumed to be false.\n   */\n  readonly autofilled?: boolean;\n\n  /** Sets the list of element IDs that currently describe this control. */\n  abstract setDescribedByIds(ids: string[]): void;\n\n  /** Handles a click on the control's container. */\n  abstract onContainerClick(event: MouseEvent): void;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, Input} from '@angular/core';\n\n\nlet nextUniqueId = 0;\n\n\n/** Hint text to be shown underneath the form field control. */\n@Directive({\n  selector: 'mat-hint',\n  host: {\n    'class': 'mat-hint',\n    '[class.mat-right]': 'align == \"end\"',\n    '[attr.id]': 'id',\n    // Remove align attribute to prevent it from interfering with layout.\n    '[attr.align]': 'null',\n  }\n})\nexport class MatHint {\n  /** Whether to align the hint label at the start or end of the line. */\n  @Input() align: 'start' | 'end' = 'start';\n\n  /** Unique ID for the hint. Used for the aria-describedby on the form field control. */\n  @Input() id: string = `mat-hint-${nextUniqueId++}`;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive} from '@angular/core';\n\n\n/** The floating label for a `mat-form-field`. */\n@Directive({\n  selector: 'mat-label'\n})\nexport class MatLabel {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive} from '@angular/core';\n\n\n/**\n * The placeholder text for an `MatFormField`.\n * @deprecated Use `<mat-label>` to specify the label and the `placeholder` attribute to specify the\n *     placeholder.\n * @deletion-target 8.0.0\n */\n@Directive({\n  selector: 'mat-placeholder'\n})\nexport class MatPlaceholder {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive} from '@angular/core';\n\n\n/** Prefix to be placed the the front of the form field. */\n@Directive({\n  selector: '[matPrefix]',\n})\nexport class MatPrefix {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive} from '@angular/core';\n\n\n/** Suffix to be placed at the end of the form field. */\n@Directive({\n  selector: '[matSuffix]',\n})\nexport class MatSuffix {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  AfterContentChecked,\n  AfterContentInit,\n  AfterViewInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  ContentChildren,\n  ElementRef,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  Optional,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {\n  CanColor,\n  FloatLabelType,\n  LabelOptions,\n  MAT_LABEL_GLOBAL_OPTIONS,\n  mixinColor,\n} from '@angular/material/core';\nimport {EMPTY, fromEvent, merge} from 'rxjs';\nimport {startWith, take} from 'rxjs/operators';\nimport {MatError} from './error';\nimport {matFormFieldAnimations} from './form-field-animations';\nimport {MatFormFieldControl} from './form-field-control';\nimport {\n  getMatFormFieldDuplicatedHintError,\n  getMatFormFieldMissingControlError,\n  getMatFormFieldPlaceholderConflictError,\n} from './form-field-errors';\nimport {MatHint} from './hint';\nimport {MatLabel} from './label';\nimport {MatPlaceholder} from './placeholder';\nimport {MatPrefix} from './prefix';\nimport {MatSuffix} from './suffix';\nimport {Platform} from '@angular/cdk/platform';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\n\n\nlet nextUniqueId = 0;\nconst floatingLabelScale = 0.75;\nconst outlineGapPadding = 5;\n\n\n/**\n * Boilerplate for applying mixins to MatFormField.\n * @docs-private\n */\nexport class MatFormFieldBase {\n  constructor(public _elementRef: ElementRef) { }\n}\n\n/**\n * Base class to which we're applying the form field mixins.\n * @docs-private\n */\nexport const _MatFormFieldMixinBase = mixinColor(MatFormFieldBase, 'primary');\n\n/** Possible appearance styles for the form field. */\nexport type MatFormFieldAppearance = 'legacy' | 'standard' | 'fill' | 'outline';\n\n/**\n * Represents the default options form the form field that can be configured\n * using the `MAT_FORM_FIELD_DEFAULT_OPTIONS` injection token.\n */\nexport interface MatFormFieldDefaultOptions {\n  appearance?: MatFormFieldAppearance;\n}\n\n/**\n * Injection token that can be used to configure the\n * default options for all form field within an app.\n */\nexport const MAT_FORM_FIELD_DEFAULT_OPTIONS =\n    new InjectionToken<MatFormFieldDefaultOptions>('MAT_FORM_FIELD_DEFAULT_OPTIONS');\n\n\n/** Container for form controls that applies Material Design styling and behavior. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-form-field',\n  exportAs: 'matFormField',\n  templateUrl: 'form-field.html',\n  // MatInput is a directive and can't have styles, so we need to include its styles here.\n  // The MatInput styles are fairly minimal so it shouldn't be a big deal for people who\n  // aren't using MatInput.\n  styleUrls: [\n    'form-field.css',\n    'form-field-fill.css',\n    'form-field-legacy.css',\n    'form-field-outline.css',\n    'form-field-standard.css',\n    '../input/input.css',\n  ],\n  animations: [matFormFieldAnimations.transitionMessages],\n  host: {\n    'class': 'mat-form-field',\n    '[class.mat-form-field-appearance-standard]': 'appearance == \"standard\"',\n    '[class.mat-form-field-appearance-fill]': 'appearance == \"fill\"',\n    '[class.mat-form-field-appearance-outline]': 'appearance == \"outline\"',\n    '[class.mat-form-field-appearance-legacy]': 'appearance == \"legacy\"',\n    '[class.mat-form-field-invalid]': '_control.errorState',\n    '[class.mat-form-field-can-float]': '_canLabelFloat',\n    '[class.mat-form-field-should-float]': '_shouldLabelFloat()',\n    '[class.mat-form-field-hide-placeholder]': '_hideControlPlaceholder()',\n    '[class.mat-form-field-disabled]': '_control.disabled',\n    '[class.mat-form-field-autofilled]': '_control.autofilled',\n    '[class.mat-focused]': '_control.focused',\n    '[class.mat-accent]': 'color == \"accent\"',\n    '[class.mat-warn]': 'color == \"warn\"',\n    '[class.ng-untouched]': '_shouldForward(\"untouched\")',\n    '[class.ng-touched]': '_shouldForward(\"touched\")',\n    '[class.ng-pristine]': '_shouldForward(\"pristine\")',\n    '[class.ng-dirty]': '_shouldForward(\"dirty\")',\n    '[class.ng-valid]': '_shouldForward(\"valid\")',\n    '[class.ng-invalid]': '_shouldForward(\"invalid\")',\n    '[class.ng-pending]': '_shouldForward(\"pending\")',\n    '[class._mat-animation-noopable]': '!_animationsEnabled',\n  },\n  inputs: ['color'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\n\nexport class MatFormField extends _MatFormFieldMixinBase\n    implements AfterContentInit, AfterContentChecked, AfterViewInit, CanColor {\n  private _labelOptions: LabelOptions;\n\n  /** The form-field appearance style. */\n  @Input()\n  get appearance(): MatFormFieldAppearance {\n    return this._appearance || this._defaultOptions && this._defaultOptions.appearance || 'legacy';\n  }\n  set appearance(value: MatFormFieldAppearance) {\n    this._appearance = value;\n  }\n  _appearance: MatFormFieldAppearance;\n\n  /** Whether the required marker should be hidden. */\n  @Input()\n  get hideRequiredMarker(): boolean { return this._hideRequiredMarker; }\n  set hideRequiredMarker(value: boolean) {\n    this._hideRequiredMarker = coerceBooleanProperty(value);\n  }\n  private _hideRequiredMarker: boolean;\n\n  /** Override for the logic that disables the label animation in certain cases. */\n  private _showAlwaysAnimate = false;\n\n  /** Whether the floating label should always float or not. */\n  get _shouldAlwaysFloat(): boolean {\n    return this.floatLabel === 'always' && !this._showAlwaysAnimate;\n  }\n\n  /** Whether the label can float or not. */\n  get _canLabelFloat(): boolean { return this.floatLabel !== 'never'; }\n\n  /** State of the mat-hint and mat-error animations. */\n  _subscriptAnimationState: string = '';\n\n  /** Text for the form field hint. */\n  @Input()\n  get hintLabel(): string { return this._hintLabel; }\n  set hintLabel(value: string) {\n    this._hintLabel = value;\n    this._processHints();\n  }\n  private _hintLabel = '';\n\n  // Unique id for the hint label.\n  _hintLabelId: string = `mat-hint-${nextUniqueId++}`;\n\n  /**\n   * Whether the label should always float, never float or float as the user types.\n   *\n   * Note: only the legacy appearance supports the `never` option. `never` was originally added as a\n   * way to make the floating label emulate the behavior of a standard input placeholder. However\n   * the form field now supports both floating labels and placeholders. Therefore in the non-legacy\n   * appearances the `never` option has been disabled in favor of just using the placeholder.\n   */\n  @Input()\n  get floatLabel(): FloatLabelType {\n    return this.appearance !== 'legacy' && this._floatLabel === 'never' ? 'auto' : this._floatLabel;\n  }\n  set floatLabel(value: FloatLabelType) {\n    if (value !== this._floatLabel) {\n      this._floatLabel = value || this._labelOptions.float || 'auto';\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n  private _floatLabel: FloatLabelType;\n\n  /** Whether the Angular animations are enabled. */\n  _animationsEnabled: boolean;\n\n  _outlineGapWidth = 0;\n  _outlineGapStart = 0;\n  _initialGapCalculated = false;\n\n  /**\n   * @deprecated\n   * @deletion-target 7.0.0\n   */\n  @ViewChild('underline') underlineRef: ElementRef;\n\n  @ViewChild('connectionContainer') _connectionContainerRef: ElementRef;\n  @ViewChild('inputContainer') _inputContainerRef: ElementRef;\n  @ViewChild('label') private _label: ElementRef;\n  @ContentChild(MatFormFieldControl) _control: MatFormFieldControl<any>;\n  @ContentChild(MatPlaceholder) _placeholderChild: MatPlaceholder;\n  @ContentChild(MatLabel) _labelChild: MatLabel;\n  @ContentChildren(MatError) _errorChildren: QueryList<MatError>;\n  @ContentChildren(MatHint) _hintChildren: QueryList<MatHint>;\n  @ContentChildren(MatPrefix) _prefixChildren: QueryList<MatPrefix>;\n  @ContentChildren(MatSuffix) _suffixChildren: QueryList<MatSuffix>;\n\n  constructor(\n      public _elementRef: ElementRef,\n      private _changeDetectorRef: ChangeDetectorRef,\n      @Optional() @Inject(MAT_LABEL_GLOBAL_OPTIONS) labelOptions: LabelOptions,\n      @Optional() private _dir: Directionality,\n      @Optional() @Inject(MAT_FORM_FIELD_DEFAULT_OPTIONS) private _defaultOptions:\n          MatFormFieldDefaultOptions,\n      // @deletion-target 7.0.0 _platform, _ngZone and _animationMode to be made required.\n      private _platform?: Platform,\n      private _ngZone?: NgZone,\n      @Optional() @Inject(ANIMATION_MODULE_TYPE) _animationMode?: string) {\n    super(_elementRef);\n\n    this._labelOptions = labelOptions ? labelOptions : {};\n    this.floatLabel = this._labelOptions.float || 'auto';\n    this._animationsEnabled = _animationMode !== 'NoopAnimations';\n  }\n\n  /**\n   * Gets an ElementRef for the element that a overlay attached to the form-field should be\n   * positioned relative to.\n   */\n  getConnectedOverlayOrigin(): ElementRef {\n    return this._connectionContainerRef || this._elementRef;\n  }\n\n  ngAfterContentInit() {\n    this._validateControlChild();\n    if (this._control.controlType) {\n      this._elementRef.nativeElement.classList\n          .add(`mat-form-field-type-${this._control.controlType}`);\n    }\n\n    // Subscribe to changes in the child control state in order to update the form field UI.\n    this._control.stateChanges.pipe(startWith(null!)).subscribe(() => {\n      this._validatePlaceholders();\n      this._syncDescribedByIds();\n      this._changeDetectorRef.markForCheck();\n    });\n\n    // Run change detection if the value, prefix, or suffix changes.\n    const valueChanges = this._control.ngControl && this._control.ngControl.valueChanges || EMPTY;\n    merge(valueChanges, this._prefixChildren.changes, this._suffixChildren.changes)\n        .subscribe(() => this._changeDetectorRef.markForCheck());\n\n    // Re-validate when the number of hints changes.\n    this._hintChildren.changes.pipe(startWith(null)).subscribe(() => {\n      this._processHints();\n      this._changeDetectorRef.markForCheck();\n    });\n\n    // Update the aria-described by when the number of errors changes.\n    this._errorChildren.changes.pipe(startWith(null)).subscribe(() => {\n      this._syncDescribedByIds();\n      this._changeDetectorRef.markForCheck();\n    });\n  }\n\n  ngAfterContentChecked() {\n    this._validateControlChild();\n\n    if (!this._initialGapCalculated) {\n      // @deletion-target 7.0.0 Remove this check and else block once _ngZone is required.\n      if (this._ngZone) {\n        // It's important that we run this outside the `_ngZone`, because the `Promise.resolve`\n        // can kick us into an infinite change detection loop, if the `_initialGapCalculated`\n        // wasn't flipped on for some reason.\n        this._ngZone.runOutsideAngular(() => {\n          Promise.resolve().then(() => this.updateOutlineGap());\n        });\n      } else {\n        Promise.resolve().then(() => this.updateOutlineGap());\n      }\n    }\n  }\n\n  ngAfterViewInit() {\n    // Avoid animations on load.\n    this._subscriptAnimationState = 'enter';\n    this._changeDetectorRef.detectChanges();\n  }\n\n  /** Determines whether a class from the NgControl should be forwarded to the host element. */\n  _shouldForward(prop: string): boolean {\n    const ngControl = this._control ? this._control.ngControl : null;\n    return ngControl && ngControl[prop];\n  }\n\n  _hasPlaceholder() {\n    return !!(this._control && this._control.placeholder || this._placeholderChild);\n  }\n\n  _hasLabel() {\n    return !!this._labelChild;\n  }\n\n  _shouldLabelFloat() {\n    return this._canLabelFloat && (this._control.shouldLabelFloat || this._shouldAlwaysFloat);\n  }\n\n  _hideControlPlaceholder() {\n    // In the legacy appearance the placeholder is promoted to a label if no label is given.\n    return this.appearance === 'legacy' && !this._hasLabel() ||\n        this._hasLabel() && !this._shouldLabelFloat();\n  }\n\n  _hasFloatingLabel() {\n    // In the legacy appearance the placeholder is promoted to a label if no label is given.\n    return this._hasLabel() || this.appearance === 'legacy' && this._hasPlaceholder();\n  }\n\n  /** Determines whether to display hints or errors. */\n  _getDisplayedMessages(): 'error' | 'hint' {\n    return (this._errorChildren && this._errorChildren.length > 0 &&\n        this._control.errorState) ? 'error' : 'hint';\n  }\n\n  /** Animates the placeholder up and locks it in position. */\n  _animateAndLockLabel(): void {\n    if (this._hasFloatingLabel() && this._canLabelFloat) {\n      // If animations are disabled, we shouldn't go in here,\n      // because the `transitionend` will never fire.\n      if (this._animationsEnabled) {\n        this._showAlwaysAnimate = true;\n\n        fromEvent(this._label.nativeElement, 'transitionend').pipe(take(1)).subscribe(() => {\n          this._showAlwaysAnimate = false;\n        });\n      }\n\n      this.floatLabel = 'always';\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  /**\n   * Ensure that there is only one placeholder (either `placeholder` attribute on the child control\n   * or child element with the `mat-placeholder` directive).\n   */\n  private _validatePlaceholders() {\n    if (this._control.placeholder && this._placeholderChild) {\n      throw getMatFormFieldPlaceholderConflictError();\n    }\n  }\n\n  /** Does any extra processing that is required when handling the hints. */\n  private _processHints() {\n    this._validateHints();\n    this._syncDescribedByIds();\n  }\n\n  /**\n   * Ensure that there is a maximum of one of each `<mat-hint>` alignment specified, with the\n   * attribute being considered as `align=\"start\"`.\n   */\n  private _validateHints() {\n    if (this._hintChildren) {\n      let startHint: MatHint;\n      let endHint: MatHint;\n      this._hintChildren.forEach((hint: MatHint) => {\n        if (hint.align === 'start') {\n          if (startHint || this.hintLabel) {\n            throw getMatFormFieldDuplicatedHintError('start');\n          }\n          startHint = hint;\n        } else if (hint.align === 'end') {\n          if (endHint) {\n            throw getMatFormFieldDuplicatedHintError('end');\n          }\n          endHint = hint;\n        }\n      });\n    }\n  }\n\n  /**\n   * Sets the list of element IDs that describe the child control. This allows the control to update\n   * its `aria-describedby` attribute accordingly.\n   */\n  private _syncDescribedByIds() {\n    if (this._control) {\n      let ids: string[] = [];\n\n      if (this._getDisplayedMessages() === 'hint') {\n        let startHint = this._hintChildren ?\n            this._hintChildren.find(hint => hint.align === 'start') : null;\n        let endHint = this._hintChildren ?\n            this._hintChildren.find(hint => hint.align === 'end') : null;\n\n        if (startHint) {\n          ids.push(startHint.id);\n        } else if (this._hintLabel) {\n          ids.push(this._hintLabelId);\n        }\n\n        if (endHint) {\n          ids.push(endHint.id);\n        }\n      } else if (this._errorChildren) {\n        ids = this._errorChildren.map(error => error.id);\n      }\n\n      this._control.setDescribedByIds(ids);\n    }\n  }\n\n  /** Throws an error if the form field's control is missing. */\n  protected _validateControlChild() {\n    if (!this._control) {\n      throw getMatFormFieldMissingControlError();\n    }\n  }\n\n  /**\n   * Updates the width and position of the gap in the outline. Only relevant for the outline\n   * appearance.\n   */\n  updateOutlineGap() {\n    if (this.appearance === 'outline' && this._label && this._label.nativeElement.children.length) {\n      if (this._platform && !this._platform.isBrowser) {\n        // getBoundingClientRect isn't available on the server.\n        this._initialGapCalculated = true;\n        return;\n      }\n      if (!document.documentElement.contains(this._elementRef.nativeElement)) {\n        return;\n      }\n\n      const containerStart = this._getStartEnd(\n          this._connectionContainerRef.nativeElement.getBoundingClientRect());\n      const labelStart = this._getStartEnd(\n          this._label.nativeElement.children[0].getBoundingClientRect());\n      let labelWidth = 0;\n      for (const child of this._label.nativeElement.children) {\n        labelWidth += child.offsetWidth;\n      }\n      this._outlineGapStart = labelStart - containerStart - outlineGapPadding;\n      this._outlineGapWidth = labelWidth * floatingLabelScale + outlineGapPadding * 2;\n    } else {\n      this._outlineGapStart = 0;\n      this._outlineGapWidth = 0;\n    }\n    this._initialGapCalculated = true;\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Gets the start end of the rect considering the current directionality. */\n  private _getStartEnd(rect: ClientRect): number {\n    return this._dir && this._dir.value === 'rtl' ? rect.right : rect.left;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatError} from './error';\nimport {MatFormField} from './form-field';\nimport {MatHint} from './hint';\nimport {MatLabel} from './label';\nimport {MatPlaceholder} from './placeholder';\nimport {MatPrefix} from './prefix';\nimport {MatSuffix} from './suffix';\n\n\n@NgModule({\n  declarations: [\n    MatError,\n    MatFormField,\n    MatHint,\n    MatLabel,\n    MatPlaceholder,\n    MatPrefix,\n    MatSuffix,\n  ],\n  imports: [CommonModule],\n  exports: [\n    MatError,\n    MatFormField,\n    MatHint,\n    MatLabel,\n    MatPlaceholder,\n    MatPrefix,\n    MatSuffix,\n  ],\n})\nexport class MatFormFieldModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  AfterContentInit,\n  Component,\n  ContentChildren,\n  ElementRef,\n  Input,\n  QueryList,\n  TemplateRef,\n  ViewChild,\n  ViewEncapsulation,\n  ChangeDetectorRef,\n  ChangeDetectionStrategy,\n  EventEmitter,\n  Output,\n  InjectionToken,\n  Inject,\n} from '@angular/core';\nimport {\n  MatOption,\n  MatOptgroup,\n  MAT_OPTION_PARENT_COMPONENT,\n  mixinDisableRipple,\n  CanDisableRipple,\n} from '@angular/material/core';\nimport {ActiveDescendantKeyManager} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\n\n\n/**\n * Autocomplete IDs need to be unique across components, so this counter exists outside of\n * the component definition.\n */\nlet _uniqueAutocompleteIdCounter = 0;\n\n/** Event object that is emitted when an autocomplete option is selected. */\nexport class MatAutocompleteSelectedEvent {\n  constructor(\n    /** Reference to the autocomplete panel that emitted the event. */\n    public source: MatAutocomplete,\n    /** Option that was selected. */\n    public option: MatOption) { }\n}\n\n// Boilerplate for applying mixins to MatAutocomplete.\n/** @docs-private */\nexport class MatAutocompleteBase {}\nexport const _MatAutocompleteMixinBase = mixinDisableRipple(MatAutocompleteBase);\n\n/** Default `mat-autocomplete` options that can be overridden. */\nexport interface MatAutocompleteDefaultOptions {\n  /** Whether the first option should be highlighted when an autocomplete panel is opened. */\n  autoActiveFirstOption?: boolean;\n}\n\n/** Injection token to be used to override the default options for `mat-autocomplete`. */\nexport const MAT_AUTOCOMPLETE_DEFAULT_OPTIONS =\n    new InjectionToken<MatAutocompleteDefaultOptions>('mat-autocomplete-default-options', {\n      providedIn: 'root',\n      factory: MAT_AUTOCOMPLETE_DEFAULT_OPTIONS_FACTORY,\n    });\n\n/** @docs-private */\nexport function MAT_AUTOCOMPLETE_DEFAULT_OPTIONS_FACTORY(): MatAutocompleteDefaultOptions {\n  return {autoActiveFirstOption: false};\n}\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-autocomplete',\n  templateUrl: 'autocomplete.html',\n  styleUrls: ['autocomplete.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  exportAs: 'matAutocomplete',\n  inputs: ['disableRipple'],\n  host: {\n    'class': 'mat-autocomplete'\n  },\n  providers: [\n    {provide: MAT_OPTION_PARENT_COMPONENT, useExisting: MatAutocomplete}\n  ]\n})\nexport class MatAutocomplete extends _MatAutocompleteMixinBase implements AfterContentInit,\n  CanDisableRipple {\n\n  /** Manages active item in option list based on key events. */\n  _keyManager: ActiveDescendantKeyManager<MatOption>;\n\n  /** Whether the autocomplete panel should be visible, depending on option length. */\n  showPanel: boolean = false;\n\n  /** Whether the autocomplete panel is open. */\n  get isOpen(): boolean { return this._isOpen && this.showPanel; }\n  _isOpen: boolean = false;\n\n  /** @docs-private */\n  @ViewChild(TemplateRef) template: TemplateRef<any>;\n\n  /** Element for the panel containing the autocomplete options. */\n  @ViewChild('panel') panel: ElementRef;\n\n  /** @docs-private */\n  @ContentChildren(MatOption, { descendants: true }) options: QueryList<MatOption>;\n\n  /** @docs-private */\n  @ContentChildren(MatOptgroup) optionGroups: QueryList<MatOptgroup>;\n\n  /** Function that maps an option's control value to its display value in the trigger. */\n  @Input() displayWith: ((value: any) => string) | null = null;\n\n  /**\n   * Whether the first option should be highlighted when the autocomplete panel is opened.\n   * Can be configured globally through the `MAT_AUTOCOMPLETE_DEFAULT_OPTIONS` token.\n   */\n  @Input()\n  get autoActiveFirstOption(): boolean { return this._autoActiveFirstOption; }\n  set autoActiveFirstOption(value: boolean) {\n    this._autoActiveFirstOption = coerceBooleanProperty(value);\n  }\n  private _autoActiveFirstOption: boolean;\n\n\n  /** Event that is emitted whenever an option from the list is selected. */\n  @Output() readonly optionSelected: EventEmitter<MatAutocompleteSelectedEvent> =\n      new EventEmitter<MatAutocompleteSelectedEvent>();\n\n  /** Event that is emitted when the autocomplete panel is opened. */\n  @Output() readonly opened: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Event that is emitted when the autocomplete panel is closed. */\n  @Output() readonly closed: EventEmitter<void> = new EventEmitter<void>();\n\n  /**\n   * Takes classes set on the host mat-autocomplete element and applies them to the panel\n   * inside the overlay container to allow for easy styling.\n   */\n  @Input('class')\n  set classList(value: string) {\n    if (value && value.length) {\n      value.split(' ').forEach(className => this._classList[className.trim()] = true);\n      this._elementRef.nativeElement.className = '';\n    }\n  }\n  _classList: {[key: string]: boolean} = {};\n\n  /** Unique ID to be used by autocomplete trigger's \"aria-owns\" property. */\n  id: string = `mat-autocomplete-${_uniqueAutocompleteIdCounter++}`;\n\n  constructor(\n    private _changeDetectorRef: ChangeDetectorRef,\n    private _elementRef: ElementRef,\n    @Inject(MAT_AUTOCOMPLETE_DEFAULT_OPTIONS) defaults: MatAutocompleteDefaultOptions) {\n    super();\n\n    this._autoActiveFirstOption = !!defaults.autoActiveFirstOption;\n  }\n\n  ngAfterContentInit() {\n    this._keyManager = new ActiveDescendantKeyManager<MatOption>(this.options).withWrap();\n    // Set the initial visibility state.\n    this._setVisibility();\n  }\n\n  /**\n   * Sets the panel scrollTop. This allows us to manually scroll to display options\n   * above or below the fold, as they are not actually being focused when active.\n   */\n  _setScrollTop(scrollTop: number): void {\n    if (this.panel) {\n      this.panel.nativeElement.scrollTop = scrollTop;\n    }\n  }\n\n  /** Returns the panel's scrollTop. */\n  _getScrollTop(): number {\n    return this.panel ? this.panel.nativeElement.scrollTop : 0;\n  }\n\n  /** Panel should hide itself when the option list is empty. */\n  _setVisibility() {\n    this.showPanel = !!this.options.length;\n    this._classList['mat-autocomplete-visible'] = this.showPanel;\n    this._classList['mat-autocomplete-hidden'] = !this.showPanel;\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Emits the `select` event. */\n  _emitSelectEvent(option: MatOption): void {\n    const event = new MatAutocompleteSelectedEvent(this, option);\n    this.optionSelected.emit(event);\n  }\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, ElementRef} from '@angular/core';\n\n/**\n * Directive applied to an element to make it usable\n * as a connection point for an autocomplete panel.\n */\n@Directive({\n  selector: '[matAutocompleteOrigin]',\n  exportAs: 'matAutocompleteOrigin',\n})\nexport class MatAutocompleteOrigin {\n  constructor(\n      /** Reference to the element on which the directive is applied. */\n      public elementRef: ElementRef<HTMLElement>) { }\n}\n","/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = Object.setPrototypeOf ||\r\n    ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n    function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = Object.assign || function __assign(t) {\r\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n        s = arguments[i];\r\n        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n    }\r\n    return t;\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)\r\n            t[p[i]] = s[p[i]];\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = y[op[0] & 2 ? \"return\" : op[0] ? \"throw\" : \"next\"]) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [0, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule, InjectionToken, Optional, Inject, isDevMode} from '@angular/core';\nimport {BidiModule} from '@angular/cdk/bidi';\n\n\n/** Injection token that configures whether the Material sanity checks are enabled. */\nexport const MATERIAL_SANITY_CHECKS = new InjectionToken<boolean>('mat-sanity-checks', {\n  providedIn: 'root',\n  factory: MATERIAL_SANITY_CHECKS_FACTORY,\n});\n\n/** @docs-private */\nexport function MATERIAL_SANITY_CHECKS_FACTORY(): boolean {\n  return true;\n}\n\n/**\n * Module that captures anything that should be loaded and/or run for *all* Angular Material\n * components. This includes Bidi, etc.\n *\n * This module should be imported to each top-level component module (e.g., MatTabsModule).\n */\n@NgModule({\n  imports: [BidiModule],\n  exports: [BidiModule],\n})\nexport class MatCommonModule {\n  /** Whether we've done the global sanity checks (e.g. a theme is loaded, there is a doctype). */\n  private _hasDoneGlobalChecks = false;\n\n  /** Whether we've already checked for HammerJs availability. */\n  private _hasCheckedHammer = false;\n\n  /** Reference to the global `document` object. */\n  private _document = typeof document === 'object' && document ? document : null;\n\n  /** Reference to the global 'window' object. */\n  private _window = typeof window === 'object' && window ? window : null;\n\n  constructor(@Optional() @Inject(MATERIAL_SANITY_CHECKS) private _sanityChecksEnabled: boolean) {\n    if (this._areChecksEnabled() && !this._hasDoneGlobalChecks) {\n      this._checkDoctypeIsDefined();\n      this._checkThemeIsPresent();\n      this._hasDoneGlobalChecks = true;\n    }\n  }\n\n  /** Whether any sanity checks are enabled */\n  private _areChecksEnabled(): boolean {\n    return this._sanityChecksEnabled && isDevMode() && !this._isTestEnv();\n  }\n\n  /** Whether the code is running in tests. */\n  private _isTestEnv() {\n    return this._window && (this._window['__karma__'] || this._window['jasmine']);\n  }\n\n  private _checkDoctypeIsDefined(): void {\n    if (this._document && !this._document.doctype) {\n      console.warn(\n        'Current document does not have a doctype. This may cause ' +\n        'some Angular Material components not to behave as expected.'\n      );\n    }\n  }\n\n  private _checkThemeIsPresent(): void {\n    if (this._document && typeof getComputedStyle === 'function') {\n      const testElement = this._document.createElement('div');\n\n      testElement.classList.add('mat-theme-loaded-marker');\n      this._document.body.appendChild(testElement);\n\n      const computedStyle = getComputedStyle(testElement);\n\n      // In some situations, the computed style of the test element can be null. For example in\n      // Firefox, the computed style is null if an application is running inside of a hidden iframe.\n      // See: https://bugzilla.mozilla.org/show_bug.cgi?id=548397\n      if (computedStyle && computedStyle.display !== 'none') {\n        console.warn(\n          'Could not find Angular Material core theme. Most Material ' +\n          'components may not work as expected. For more info refer ' +\n          'to the theming guide: https://material.angular.io/guide/theming'\n        );\n      }\n\n      this._document.body.removeChild(testElement);\n    }\n  }\n\n  /** Checks whether HammerJS is available. */\n  _checkHammerIsAvailable(): void {\n    if (this._hasCheckedHammer || !this._window) {\n      return;\n    }\n\n    if (this._areChecksEnabled() && !this._window['Hammer']) {\n      console.warn(\n        'Could not find HammerJS. Certain Angular Material components may not work correctly.');\n    }\n    this._hasCheckedHammer = true;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {Constructor} from './constructor';\n\n/** @docs-private */\nexport interface CanDisable {\n  /** Whether the component is disabled. */\n  disabled: boolean;\n}\n\n/** Mixin to augment a directive with a `disabled` property. */\nexport function mixinDisabled<T extends Constructor<{}>>(base: T): Constructor<CanDisable> & T {\n  return class extends base {\n    private _disabled: boolean = false;\n\n    get disabled() { return this._disabled; }\n    set disabled(value: any) { this._disabled = coerceBooleanProperty(value); }\n\n    constructor(...args: any[]) { super(...args); }\n  };\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Constructor} from './constructor';\nimport {ElementRef} from '@angular/core';\n\n/** @docs-private */\nexport interface CanColor {\n  /** Theme color palette for the component. */\n  color: ThemePalette;\n}\n\n/** @docs-private */\nexport interface HasElementRef {\n  _elementRef: ElementRef;\n}\n\n/** Possible color palette values. */\nexport type ThemePalette = 'primary' | 'accent' | 'warn' | undefined;\n\n/** Mixin to augment a directive with a `color` property. */\nexport function mixinColor<T extends Constructor<HasElementRef>>(base: T,\n    defaultColor?: ThemePalette): Constructor<CanColor> & T {\n  return class extends base {\n    private _color: ThemePalette;\n\n    get color(): ThemePalette { return this._color; }\n    set color(value: ThemePalette) {\n      const colorPalette = value || defaultColor;\n\n      if (colorPalette !== this._color) {\n        if (this._color) {\n          this._elementRef.nativeElement.classList.remove(`mat-${this._color}`);\n        }\n        if (colorPalette) {\n          this._elementRef.nativeElement.classList.add(`mat-${colorPalette}`);\n        }\n\n        this._color = colorPalette;\n      }\n    }\n\n    constructor(...args: any[]) {\n      super(...args);\n\n      // Set the default color that can be specified from the mixin.\n      this.color = defaultColor;\n    }\n  };\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {Constructor} from './constructor';\n\n/** @docs-private */\nexport interface CanDisableRipple {\n  /** Whether ripples are disabled. */\n  disableRipple: boolean;\n}\n\n/** Mixin to augment a directive with a `disableRipple` property. */\nexport function mixinDisableRipple<T extends Constructor<{}>>(base: T)\n    : Constructor<CanDisableRipple> & T {\n  return class extends base {\n    private _disableRipple: boolean = false;\n\n    /** Whether the ripple effect is disabled or not. */\n    get disableRipple() { return this._disableRipple; }\n    set disableRipple(value: any) { this._disableRipple = coerceBooleanProperty(value); }\n\n    constructor(...args: any[]) { super(...args); }\n  };\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Constructor} from './constructor';\nimport {CanDisable} from './disabled';\n\n/** @docs-private */\nexport interface HasTabIndex {\n  /** Tabindex of the component. */\n  tabIndex: number;\n}\n\n/** Mixin to augment a directive with a `tabIndex` property. */\nexport function mixinTabIndex<T extends Constructor<CanDisable>>(base: T, defaultTabIndex = 0)\n    : Constructor<HasTabIndex> & T {\n  return class extends base {\n    private _tabIndex: number = defaultTabIndex;\n\n    get tabIndex(): number { return this.disabled ? -1 : this._tabIndex; }\n    set tabIndex(value: number) {\n      // If the specified tabIndex value is null or undefined, fall back to the default value.\n      this._tabIndex = value != null ? value : defaultTabIndex;\n    }\n\n    constructor(...args: any[]) {\n      super(...args);\n    }\n  };\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Constructor} from './constructor';\nimport {ErrorStateMatcher} from '../error/error-options';\nimport {FormControl, FormGroupDirective, NgControl, NgForm} from '@angular/forms';\nimport {Subject} from 'rxjs';\n\n/** @docs-private */\nexport interface CanUpdateErrorState {\n  updateErrorState();\n  readonly stateChanges: Subject<void>;\n  errorState: boolean;\n  errorStateMatcher: ErrorStateMatcher;\n}\n\n/** @docs-private */\nexport interface HasErrorState {\n  _parentFormGroup: FormGroupDirective;\n  _parentForm: NgForm;\n  _defaultErrorStateMatcher: ErrorStateMatcher;\n  ngControl: NgControl;\n}\n\n/**\n * Mixin to augment a directive with updateErrorState method.\n * For component with `errorState` and need to update `errorState`.\n */\nexport function mixinErrorState<T extends Constructor<HasErrorState>>(base: T)\n: Constructor<CanUpdateErrorState> & T {\n  return class extends base {\n    /** Whether the component is in an error state. */\n    errorState: boolean = false;\n\n    /**\n     * Stream that emits whenever the state of the input changes such that the wrapping\n     * `MatFormField` needs to run change detection.\n     */\n    readonly stateChanges = new Subject<void>();\n\n    errorStateMatcher: ErrorStateMatcher;\n\n    updateErrorState() {\n      const oldState = this.errorState;\n      const parent = this._parentFormGroup || this._parentForm;\n      const matcher = this.errorStateMatcher || this._defaultErrorStateMatcher;\n      const control = this.ngControl ? this.ngControl.control as FormControl : null;\n      const newState = matcher.isErrorState(control, parent);\n\n      if (newState !== oldState) {\n        this.errorState = newState;\n        this.stateChanges.next();\n      }\n    }\n\n    constructor(...args: any[]) {\n      super(...args);\n    }\n  };\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Observable, Subscriber} from 'rxjs';\nimport {Constructor} from './constructor';\n\n\n/**\n * Mixin that adds an initialized property to a directive which, when subscribed to, will emit a\n * value once markInitialized has been called, which should be done during the ngOnInit function.\n * If the subscription is made after it has already been marked as initialized, then it will trigger\n * an emit immediately.\n * @docs-private\n */\nexport interface HasInitialized {\n  /** Stream that emits once during the directive/component's ngOnInit. */\n  initialized: Observable<void>;\n\n  /**\n   * Sets the state as initialized and must be called during ngOnInit to notify subscribers that\n   * the directive has been initialized.\n   * @docs-private\n   */\n  _markInitialized: () => void;\n}\n\n/** Mixin to augment a directive with an initialized property that will emits when ngOnInit ends. */\nexport function mixinInitialized<T extends Constructor<{}>>(base: T):\n    Constructor<HasInitialized> & T {\n  return class extends base {\n    /** Whether this directive has been marked as initialized. */\n    _isInitialized = false;\n\n    /**\n     * List of subscribers that subscribed before the directive was initialized. Should be notified\n     * during _markInitialized. Set to null after pending subscribers are notified, and should\n     * not expect to be populated after.\n     */\n    _pendingSubscribers: Subscriber<void>[] | null = [];\n\n    /**\n     * Observable stream that emits when the directive initializes. If already initialized, the\n     * subscriber is stored to be notified once _markInitialized is called.\n     */\n    initialized = new Observable<void>(subscriber => {\n      // If initialized, immediately notify the subscriber. Otherwise store the subscriber to notify\n      // when _markInitialized is called.\n      if (this._isInitialized) {\n        this._notifySubscriber(subscriber);\n      } else {\n        this._pendingSubscribers!.push(subscriber);\n      }\n    });\n\n    constructor(...args: any[]) { super(...args); }\n\n    /**\n     * Marks the state as initialized and notifies pending subscribers. Should be called at the end\n     * of ngOnInit.\n     * @docs-private\n     */\n    _markInitialized(): void {\n      if (this._isInitialized) {\n        throw Error('This directive has already been marked as initialized and ' +\n            'should not be called twice.');\n      }\n\n      this._isInitialized = true;\n\n      this._pendingSubscribers!.forEach(this._notifySubscriber);\n      this._pendingSubscribers = null;\n    }\n\n    /** Emits and completes the subscriber stream (should only emit once). */\n    _notifySubscriber(subscriber: Subscriber<void>): void {\n      subscriber.next();\n      subscriber.complete();\n    }\n  };\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {inject, InjectionToken, LOCALE_ID} from '@angular/core';\nimport {Observable, Subject} from 'rxjs';\n\n/** InjectionToken for datepicker that can be used to override default locale code. */\nexport const MAT_DATE_LOCALE = new InjectionToken<string>('MAT_DATE_LOCALE', {\n  providedIn: 'root',\n  factory: MAT_DATE_LOCALE_FACTORY,\n});\n\n/** @docs-private */\nexport function MAT_DATE_LOCALE_FACTORY(): string {\n  return inject(LOCALE_ID);\n}\n\n/**\n * No longer needed since MAT_DATE_LOCALE has been changed to a scoped injectable.\n * If you are importing and providing this in your code you can simply remove it.\n * @deprecated\n * @deletion-target 7.0.0\n */\nexport const MAT_DATE_LOCALE_PROVIDER = {provide: MAT_DATE_LOCALE, useExisting: LOCALE_ID};\n\n/** Adapts type `D` to be usable as a date by cdk-based components that work with dates. */\nexport abstract class DateAdapter<D> {\n  /** The locale to use for all dates. */\n  protected locale: any;\n\n  /** A stream that emits when the locale changes. */\n  get localeChanges(): Observable<void> { return this._localeChanges; }\n  protected _localeChanges = new Subject<void>();\n\n  /**\n   * Gets the year component of the given date.\n   * @param date The date to extract the year from.\n   * @returns The year component.\n   */\n  abstract getYear(date: D): number;\n\n  /**\n   * Gets the month component of the given date.\n   * @param date The date to extract the month from.\n   * @returns The month component (0-indexed, 0 = January).\n   */\n  abstract getMonth(date: D): number;\n\n  /**\n   * Gets the date of the month component of the given date.\n   * @param date The date to extract the date of the month from.\n   * @returns The month component (1-indexed, 1 = first of month).\n   */\n  abstract getDate(date: D): number;\n\n  /**\n   * Gets the day of the week component of the given date.\n   * @param date The date to extract the day of the week from.\n   * @returns The month component (0-indexed, 0 = Sunday).\n   */\n  abstract getDayOfWeek(date: D): number;\n\n  /**\n   * Gets a list of names for the months.\n   * @param style The naming style (e.g. long = 'January', short = 'Jan', narrow = 'J').\n   * @returns An ordered list of all month names, starting with January.\n   */\n  abstract getMonthNames(style: 'long' | 'short' | 'narrow'): string[];\n\n  /**\n   * Gets a list of names for the dates of the month.\n   * @returns An ordered list of all date of the month names, starting with '1'.\n   */\n  abstract getDateNames(): string[];\n\n  /**\n   * Gets a list of names for the days of the week.\n   * @param style The naming style (e.g. long = 'Sunday', short = 'Sun', narrow = 'S').\n   * @returns An ordered list of all weekday names, starting with Sunday.\n   */\n  abstract getDayOfWeekNames(style: 'long' | 'short' | 'narrow'): string[];\n\n  /**\n   * Gets the name for the year of the given date.\n   * @param date The date to get the year name for.\n   * @returns The name of the given year (e.g. '2017').\n   */\n  abstract getYearName(date: D): string;\n\n  /**\n   * Gets the first day of the week.\n   * @returns The first day of the week (0-indexed, 0 = Sunday).\n   */\n  abstract getFirstDayOfWeek(): number;\n\n  /**\n   * Gets the number of days in the month of the given date.\n   * @param date The date whose month should be checked.\n   * @returns The number of days in the month of the given date.\n   */\n  abstract getNumDaysInMonth(date: D): number;\n\n  /**\n   * Clones the given date.\n   * @param date The date to clone\n   * @returns A new date equal to the given date.\n   */\n  abstract clone(date: D): D;\n\n  /**\n   * Creates a date with the given year, month, and date. Does not allow over/under-flow of the\n   * month and date.\n   * @param year The full year of the date. (e.g. 89 means the year 89, not the year 1989).\n   * @param month The month of the date (0-indexed, 0 = January). Must be an integer 0 - 11.\n   * @param date The date of month of the date. Must be an integer 1 - length of the given month.\n   * @returns The new date, or null if invalid.\n   */\n  abstract createDate(year: number, month: number, date: number): D;\n\n  /**\n   * Gets today's date.\n   * @returns Today's date.\n   */\n  abstract today(): D;\n\n  /**\n   * Parses a date from a user-provided value.\n   * @param value The value to parse.\n   * @param parseFormat The expected format of the value being parsed\n   *     (type is implementation-dependent).\n   * @returns The parsed date.\n   */\n  abstract parse(value: any, parseFormat: any): D | null;\n\n  /**\n   * Formats a date as a string according to the given format.\n   * @param date The value to format.\n   * @param displayFormat The format to use to display the date as a string.\n   * @returns The formatted date string.\n   */\n  abstract format(date: D, displayFormat: any): string;\n\n  /**\n   * Adds the given number of years to the date. Years are counted as if flipping 12 pages on the\n   * calendar for each year and then finding the closest date in the new month. For example when\n   * adding 1 year to Feb 29, 2016, the resulting date will be Feb 28, 2017.\n   * @param date The date to add years to.\n   * @param years The number of years to add (may be negative).\n   * @returns A new date equal to the given one with the specified number of years added.\n   */\n  abstract addCalendarYears(date: D, years: number): D;\n\n  /**\n   * Adds the given number of months to the date. Months are counted as if flipping a page on the\n   * calendar for each month and then finding the closest date in the new month. For example when\n   * adding 1 month to Jan 31, 2017, the resulting date will be Feb 28, 2017.\n   * @param date The date to add months to.\n   * @param months The number of months to add (may be negative).\n   * @returns A new date equal to the given one with the specified number of months added.\n   */\n  abstract addCalendarMonths(date: D, months: number): D;\n\n  /**\n   * Adds the given number of days to the date. Days are counted as if moving one cell on the\n   * calendar for each day.\n   * @param date The date to add days to.\n   * @param days The number of days to add (may be negative).\n   * @returns A new date equal to the given one with the specified number of days added.\n   */\n  abstract addCalendarDays(date: D, days: number): D;\n\n  /**\n   * Gets the RFC 3339 compatible string (https://tools.ietf.org/html/rfc3339) for the given date.\n   * This method is used to generate date strings that are compatible with native HTML attributes\n   * such as the `min` or `max` attribute of an `<input>`.\n   * @param date The date to get the ISO date string for.\n   * @returns The ISO date string date string.\n   */\n  abstract toIso8601(date: D): string;\n\n  /**\n   * Checks whether the given object is considered a date instance by this DateAdapter.\n   * @param obj The object to check\n   * @returns Whether the object is a date instance.\n   */\n  abstract isDateInstance(obj: any): boolean;\n\n  /**\n   * Checks whether the given date is valid.\n   * @param date The date to check.\n   * @returns Whether the date is valid.\n   */\n  abstract isValid(date: D): boolean;\n\n  /**\n   * Gets date instance that is not valid.\n   * @returns An invalid date.\n   */\n  abstract invalid(): D;\n\n  /**\n   * Attempts to deserialize a value to a valid date object. This is different from parsing in that\n   * deserialize should only accept non-ambiguous, locale-independent formats (e.g. a ISO 8601\n   * string). The default implementation does not allow any deserialization, it simply checks that\n   * the given value is already a valid date object or null. The `<mat-datepicker>` will call this\n   * method on all of it's `@Input()` properties that accept dates. It is therefore possible to\n   * support passing values from your backend directly to these properties by overriding this method\n   * to also deserialize the format used by your backend.\n   * @param value The value to be deserialized into a date object.\n   * @returns The deserialized date object, either a valid date, null if the value can be\n   *     deserialized into a null date (e.g. the empty string), or an invalid date.\n   */\n  deserialize(value: any): D | null {\n    if (value == null || this.isDateInstance(value) && this.isValid(value)) {\n      return value;\n    }\n    return this.invalid();\n  }\n\n  /**\n   * Sets the locale used for all dates.\n   * @param locale The new locale.\n   */\n  setLocale(locale: any) {\n    this.locale = locale;\n    this._localeChanges.next();\n  }\n\n  /**\n   * Compares two dates.\n   * @param first The first date to compare.\n   * @param second The second date to compare.\n   * @returns 0 if the dates are equal, a number less than 0 if the first date is earlier,\n   *     a number greater than 0 if the first date is later.\n   */\n  compareDate(first: D, second: D): number {\n    return this.getYear(first) - this.getYear(second) ||\n        this.getMonth(first) - this.getMonth(second) ||\n        this.getDate(first) - this.getDate(second);\n  }\n\n  /**\n   * Checks if two dates are equal.\n   * @param first The first date to check.\n   * @param second The second date to check.\n   * @returns Whether the two dates are equal.\n   *     Null dates are considered equal to other null dates.\n   */\n  sameDate(first: D | null, second: D | null): boolean {\n    if (first && second) {\n      let firstValid = this.isValid(first);\n      let secondValid = this.isValid(second);\n      if (firstValid && secondValid) {\n        return !this.compareDate(first, second);\n      }\n      return firstValid == secondValid;\n    }\n    return first == second;\n  }\n\n  /**\n   * Clamp the given date between min and max dates.\n   * @param date The date to clamp.\n   * @param min The minimum value to allow. If null or omitted no min is enforced.\n   * @param max The maximum value to allow. If null or omitted no max is enforced.\n   * @returns `min` if `date` is less than `min`, `max` if date is greater than `max`,\n   *     otherwise `date`.\n   */\n  clampDate(date: D, min?: D | null, max?: D | null): D {\n    if (min && this.compareDate(date, min) < 0) {\n      return min;\n    }\n    if (max && this.compareDate(date, max) > 0) {\n      return max;\n    }\n    return date;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Platform} from '@angular/cdk/platform';\nimport {Inject, Injectable, Optional} from '@angular/core';\nimport {DateAdapter, MAT_DATE_LOCALE} from './date-adapter';\n\n// TODO(mmalerba): Remove when we no longer support safari 9.\n/** Whether the browser supports the Intl API. */\nconst SUPPORTS_INTL_API = typeof Intl != 'undefined';\n\n\n/** The default month names to use if Intl API is not available. */\nconst DEFAULT_MONTH_NAMES = {\n  'long': [\n    'January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September',\n    'October', 'November', 'December'\n  ],\n  'short': ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'],\n  'narrow': ['J', 'F', 'M', 'A', 'M', 'J', 'J', 'A', 'S', 'O', 'N', 'D']\n};\n\n\n/** The default date names to use if Intl API is not available. */\nconst DEFAULT_DATE_NAMES = range(31, i => String(i + 1));\n\n\n/** The default day of the week names to use if Intl API is not available. */\nconst DEFAULT_DAY_OF_WEEK_NAMES = {\n  'long': ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'],\n  'short': ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'],\n  'narrow': ['S', 'M', 'T', 'W', 'T', 'F', 'S']\n};\n\n\n/**\n * Matches strings that have the form of a valid RFC 3339 string\n * (https://tools.ietf.org/html/rfc3339). Note that the string may not actually be a valid date\n * because the regex will match strings an with out of bounds month, date, etc.\n */\nconst ISO_8601_REGEX =\n    /^\\d{4}-\\d{2}-\\d{2}(?:T\\d{2}:\\d{2}:\\d{2}(?:\\.\\d+)?(?:Z|(?:(?:\\+|-)\\d{2}:\\d{2}))?)?$/;\n\n\n/** Creates an array and fills it with values. */\nfunction range<T>(length: number, valueFunction: (index: number) => T): T[] {\n  const valuesArray = Array(length);\n  for (let i = 0; i < length; i++) {\n    valuesArray[i] = valueFunction(i);\n  }\n  return valuesArray;\n}\n\n/** Adapts the native JS Date for use with cdk-based components that work with dates. */\n@Injectable()\nexport class NativeDateAdapter extends DateAdapter<Date> {\n  /** Whether to clamp the date between 1 and 9999 to avoid IE and Edge errors. */\n  private readonly _clampDate: boolean;\n\n  /**\n   * Whether to use `timeZone: 'utc'` with `Intl.DateTimeFormat` when formatting dates.\n   * Without this `Intl.DateTimeFormat` sometimes chooses the wrong timeZone, which can throw off\n   * the result. (e.g. in the en-US locale `new Date(1800, 7, 14).toLocaleDateString()`\n   * will produce `'8/13/1800'`.\n   *\n   * TODO(mmalerba): drop this variable. It's not being used in the code right now. We're now\n   * getting the string representation of a Date object from it's utc representation. We're keeping\n   * it here for sometime, just for precaution, in case we decide to revert some of these changes\n   * though.\n   */\n  useUtcForDisplay: boolean = true;\n\n  constructor(@Optional() @Inject(MAT_DATE_LOCALE) matDateLocale: string, platform: Platform) {\n    super();\n    super.setLocale(matDateLocale);\n\n    // IE does its own time zone correction, so we disable this on IE.\n    this.useUtcForDisplay = !platform.TRIDENT;\n    this._clampDate = platform.TRIDENT || platform.EDGE;\n  }\n\n  getYear(date: Date): number {\n    return date.getFullYear();\n  }\n\n  getMonth(date: Date): number {\n    return date.getMonth();\n  }\n\n  getDate(date: Date): number {\n    return date.getDate();\n  }\n\n  getDayOfWeek(date: Date): number {\n    return date.getDay();\n  }\n\n  getMonthNames(style: 'long' | 'short' | 'narrow'): string[] {\n    if (SUPPORTS_INTL_API) {\n      const dtf = new Intl.DateTimeFormat(this.locale, {month: style, timeZone: 'utc'});\n      return range(12, i =>\n          this._stripDirectionalityCharacters(this._format(dtf, new Date(2017, i, 1))));\n    }\n    return DEFAULT_MONTH_NAMES[style];\n  }\n\n  getDateNames(): string[] {\n    if (SUPPORTS_INTL_API) {\n      const dtf = new Intl.DateTimeFormat(this.locale, {day: 'numeric', timeZone: 'utc'});\n      return range(31, i => this._stripDirectionalityCharacters(\n          this._format(dtf, new Date(2017, 0, i + 1))));\n    }\n    return DEFAULT_DATE_NAMES;\n  }\n\n  getDayOfWeekNames(style: 'long' | 'short' | 'narrow'): string[] {\n    if (SUPPORTS_INTL_API) {\n      const dtf = new Intl.DateTimeFormat(this.locale, {weekday: style, timeZone: 'utc'});\n      return range(7, i => this._stripDirectionalityCharacters(\n          this._format(dtf, new Date(2017, 0, i + 1))));\n    }\n    return DEFAULT_DAY_OF_WEEK_NAMES[style];\n  }\n\n  getYearName(date: Date): string {\n    if (SUPPORTS_INTL_API) {\n      const dtf = new Intl.DateTimeFormat(this.locale, {year: 'numeric', timeZone: 'utc'});\n      return this._stripDirectionalityCharacters(this._format(dtf, date));\n    }\n    return String(this.getYear(date));\n  }\n\n  getFirstDayOfWeek(): number {\n    // We can't tell using native JS Date what the first day of the week is, we default to Sunday.\n    return 0;\n  }\n\n  getNumDaysInMonth(date: Date): number {\n    return this.getDate(this._createDateWithOverflow(\n        this.getYear(date), this.getMonth(date) + 1, 0));\n  }\n\n  clone(date: Date): Date {\n    return this.createDate(this.getYear(date), this.getMonth(date), this.getDate(date));\n  }\n\n  createDate(year: number, month: number, date: number): Date {\n    // Check for invalid month and date (except upper bound on date which we have to check after\n    // creating the Date).\n    if (month < 0 || month > 11) {\n      throw Error(`Invalid month index \"${month}\". Month index has to be between 0 and 11.`);\n    }\n\n    if (date < 1) {\n      throw Error(`Invalid date \"${date}\". Date has to be greater than 0.`);\n    }\n\n    let result = this._createDateWithOverflow(year, month, date);\n    // Check that the date wasn't above the upper bound for the month, causing the month to overflow\n    if (result.getMonth() != month) {\n      throw Error(`Invalid date \"${date}\" for month with index \"${month}\".`);\n    }\n\n    return result;\n  }\n\n  today(): Date {\n    return new Date();\n  }\n\n  parse(value: any): Date | null {\n    // We have no way using the native JS Date to set the parse format or locale, so we ignore these\n    // parameters.\n    if (typeof value == 'number') {\n      return new Date(value);\n    }\n    return value ? new Date(Date.parse(value)) : null;\n  }\n\n  format(date: Date, displayFormat: Object): string {\n    if (!this.isValid(date)) {\n      throw Error('NativeDateAdapter: Cannot format invalid date.');\n    }\n\n    if (SUPPORTS_INTL_API) {\n      // On IE and Edge the i18n API will throw a hard error that can crash the entire app\n      // if we attempt to format a date whose year is less than 1 or greater than 9999.\n      if (this._clampDate && (date.getFullYear() < 1 || date.getFullYear() > 9999)) {\n        date = this.clone(date);\n        date.setFullYear(Math.max(1, Math.min(9999, date.getFullYear())));\n      }\n\n      displayFormat = {...displayFormat, timeZone: 'utc'};\n\n      const dtf = new Intl.DateTimeFormat(this.locale, displayFormat);\n      return this._stripDirectionalityCharacters(this._format(dtf, date));\n    }\n    return this._stripDirectionalityCharacters(date.toDateString());\n  }\n\n  addCalendarYears(date: Date, years: number): Date {\n    return this.addCalendarMonths(date, years * 12);\n  }\n\n  addCalendarMonths(date: Date, months: number): Date {\n    let newDate = this._createDateWithOverflow(\n        this.getYear(date), this.getMonth(date) + months, this.getDate(date));\n\n    // It's possible to wind up in the wrong month if the original month has more days than the new\n    // month. In this case we want to go to the last day of the desired month.\n    // Note: the additional + 12 % 12 ensures we end up with a positive number, since JS % doesn't\n    // guarantee this.\n    if (this.getMonth(newDate) != ((this.getMonth(date) + months) % 12 + 12) % 12) {\n      newDate = this._createDateWithOverflow(this.getYear(newDate), this.getMonth(newDate), 0);\n    }\n\n    return newDate;\n  }\n\n  addCalendarDays(date: Date, days: number): Date {\n    return this._createDateWithOverflow(\n        this.getYear(date), this.getMonth(date), this.getDate(date) + days);\n  }\n\n  toIso8601(date: Date): string {\n    return [\n      date.getUTCFullYear(),\n      this._2digit(date.getUTCMonth() + 1),\n      this._2digit(date.getUTCDate())\n    ].join('-');\n  }\n\n  /**\n   * Returns the given value if given a valid Date or null. Deserializes valid ISO 8601 strings\n   * (https://www.ietf.org/rfc/rfc3339.txt) into valid Dates and empty string into null. Returns an\n   * invalid date for all other values.\n   */\n  deserialize(value: any): Date | null {\n    if (typeof value === 'string') {\n      if (!value) {\n        return null;\n      }\n      // The `Date` constructor accepts formats other than ISO 8601, so we need to make sure the\n      // string is the right format first.\n      if (ISO_8601_REGEX.test(value)) {\n        let date = new Date(value);\n        if (this.isValid(date)) {\n          return date;\n        }\n      }\n    }\n    return super.deserialize(value);\n  }\n\n  isDateInstance(obj: any) {\n    return obj instanceof Date;\n  }\n\n  isValid(date: Date) {\n    return !isNaN(date.getTime());\n  }\n\n  invalid(): Date {\n    return new Date(NaN);\n  }\n\n  /** Creates a date but allows the month and date to overflow. */\n  private _createDateWithOverflow(year: number, month: number, date: number) {\n    const result = new Date(year, month, date);\n\n    // We need to correct for the fact that JS native Date treats years in range [0, 99] as\n    // abbreviations for 19xx.\n    if (year >= 0 && year < 100) {\n      result.setFullYear(this.getYear(result) - 1900);\n    }\n    return result;\n  }\n\n  /**\n   * Pads a number to make it two digits.\n   * @param n The number to pad.\n   * @returns The padded number.\n   */\n  private _2digit(n: number) {\n    return ('00' + n).slice(-2);\n  }\n\n  /**\n   * Strip out unicode LTR and RTL characters. Edge and IE insert these into formatted dates while\n   * other browsers do not. We remove them to make output consistent and because they interfere with\n   * date parsing.\n   * @param str The string to strip direction characters from.\n   * @returns The stripped string.\n   */\n  private _stripDirectionalityCharacters(str: string) {\n    return str.replace(/[\\u200e\\u200f]/g, '');\n  }\n\n  /**\n   * When converting Date object to string, javascript built-in functions may return wrong\n   * results because it applies its internal DST rules. The DST rules around the world change\n   * very frequently, and the current valid rule is not always valid in previous years though.\n   * We work around this problem building a new Date object which has its internal UTC\n   * representation with the local date and time.\n   * @param dtf Intl.DateTimeFormat object, containg the desired string format. It must have\n   *    timeZone set to 'utc' to work fine.\n   * @param date Date from which we want to get the string representation according to dtf\n   * @returns A Date object with its UTC representation based on the passed in date info\n   */\n  private _format(dtf: Intl.DateTimeFormat, date: Date) {\n    const d = new Date(Date.UTC(\n        date.getFullYear(), date.getMonth(), date.getDate(), date.getHours(),\n        date.getMinutes(), date.getSeconds(), date.getMilliseconds()));\n    return dtf.format(d);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {ElementRef, NgZone} from '@angular/core';\nimport {Platform, supportsPassiveEventListeners} from '@angular/cdk/platform';\nimport {RippleRef, RippleState} from './ripple-ref';\n\nexport type RippleConfig = {\n  color?: string;\n  centered?: boolean;\n  radius?: number;\n  persistent?: boolean;\n  animation?: RippleAnimationConfig;\n  terminateOnPointerUp?: boolean;\n  /**\n   * @deprecated Use the `animation` property instead.\n   * @deletion-target 7.0.0\n   */\n  speedFactor?: number;\n};\n\n/**\n * Interface that describes the configuration for the animation of a ripple.\n * There are two animation phases with different durations for the ripples.\n */\nexport interface RippleAnimationConfig {\n  /** Duration in milliseconds for the enter animation (expansion from point of contact). */\n  enterDuration?: number;\n  /** Duration in milliseconds for the exit animation (fade-out). */\n  exitDuration?: number;\n}\n\n/**\n * Interface that describes the target for launching ripples.\n * It defines the ripple configuration and disabled state for interaction ripples.\n * @docs-private\n */\nexport interface RippleTarget {\n  /** Configuration for ripples that are launched on pointer down. */\n  rippleConfig: RippleConfig;\n  /** Whether ripples on pointer down should be disabled. */\n  rippleDisabled: boolean;\n}\n\n/**\n * Default ripple animation configuration for ripples without an explicit\n * animation config specified.\n */\nexport const defaultRippleAnimationConfig = {\n  enterDuration: 450,\n  exitDuration: 400\n};\n\n/**\n * Timeout for ignoring mouse events. Mouse events will be temporary ignored after touch\n * events to avoid synthetic mouse events.\n */\nconst ignoreMouseEventsTimeout = 800;\n\n/**\n * Helper service that performs DOM manipulations. Not intended to be used outside this module.\n * The constructor takes a reference to the ripple directive's host element and a map of DOM\n * event handlers to be installed on the element that triggers ripple animations.\n * This will eventually become a custom renderer once Angular support exists.\n * @docs-private\n */\nexport class RippleRenderer {\n  /** Element where the ripples are being added to. */\n  private _containerElement: HTMLElement;\n\n  /** Element which triggers the ripple elements on mouse events. */\n  private _triggerElement: HTMLElement | null;\n\n  /** Whether the pointer is currently down or not. */\n  private _isPointerDown = false;\n\n  /** Events to be registered on the trigger element. */\n  private _triggerEvents = new Map<string, any>();\n\n  /** Set of currently active ripple references. */\n  private _activeRipples = new Set<RippleRef>();\n\n  /** Latest non-persistent ripple that was triggered. */\n  private _mostRecentTransientRipple: RippleRef | null;\n\n  /** Time in milliseconds when the last touchstart event happened. */\n  private _lastTouchStartEvent: number;\n\n  /** Options that apply to all the event listeners that are bound by the renderer. */\n  private _eventOptions = supportsPassiveEventListeners() ? ({passive: true} as any) : false;\n\n  /**\n   * Cached dimensions of the ripple container. Set when the first\n   * ripple is shown and cleared once no more ripples are visible.\n   */\n  private _containerRect: ClientRect | null;\n\n  constructor(private _target: RippleTarget,\n              private _ngZone: NgZone,\n              elementRef: ElementRef,\n              platform: Platform) {\n\n    // Only do anything if we're on the browser.\n    if (platform.isBrowser) {\n      this._containerElement = elementRef.nativeElement;\n\n      // Specify events which need to be registered on the trigger.\n      this._triggerEvents.set('mousedown', this.onMousedown);\n      this._triggerEvents.set('mouseup', this.onPointerUp);\n      this._triggerEvents.set('mouseleave', this.onPointerUp);\n\n      this._triggerEvents.set('touchstart', this.onTouchStart);\n      this._triggerEvents.set('touchend', this.onPointerUp);\n    }\n  }\n\n  /**\n   * Fades in a ripple at the given coordinates.\n   * @param x Coordinate within the element, along the X axis at which to start the ripple.\n   * @param y Coordinate within the element, along the Y axis at which to start the ripple.\n   * @param config Extra ripple options.\n   */\n  fadeInRipple(x: number, y: number, config: RippleConfig = {}): RippleRef {\n    const containerRect = this._containerRect =\n                          this._containerRect || this._containerElement.getBoundingClientRect();\n    const animationConfig = {...defaultRippleAnimationConfig, ...config.animation};\n\n    if (config.centered) {\n      x = containerRect.left + containerRect.width / 2;\n      y = containerRect.top + containerRect.height / 2;\n    }\n\n    const radius = config.radius || distanceToFurthestCorner(x, y, containerRect);\n    const offsetX = x - containerRect.left;\n    const offsetY = y - containerRect.top;\n    const duration = animationConfig.enterDuration / (config.speedFactor || 1);\n\n    const ripple = document.createElement('div');\n    ripple.classList.add('mat-ripple-element');\n\n    ripple.style.left = `${offsetX - radius}px`;\n    ripple.style.top = `${offsetY - radius}px`;\n    ripple.style.height = `${radius * 2}px`;\n    ripple.style.width = `${radius * 2}px`;\n\n    // If the color is not set, the default CSS color will be used.\n    ripple.style.backgroundColor = config.color || null;\n    ripple.style.transitionDuration = `${duration}ms`;\n\n    this._containerElement.appendChild(ripple);\n\n    // By default the browser does not recalculate the styles of dynamically created\n    // ripple elements. This is critical because then the `scale` would not animate properly.\n    enforceStyleRecalculation(ripple);\n\n    ripple.style.transform = 'scale(1)';\n\n    // Exposed reference to the ripple that will be returned.\n    const rippleRef = new RippleRef(this, ripple, config);\n\n    rippleRef.state = RippleState.FADING_IN;\n\n    // Add the ripple reference to the list of all active ripples.\n    this._activeRipples.add(rippleRef);\n\n    if (!config.persistent) {\n      this._mostRecentTransientRipple = rippleRef;\n    }\n\n    // Wait for the ripple element to be completely faded in.\n    // Once it's faded in, the ripple can be hidden immediately if the mouse is released.\n    this.runTimeoutOutsideZone(() => {\n      const isMostRecentTransientRipple = rippleRef === this._mostRecentTransientRipple;\n\n      rippleRef.state = RippleState.VISIBLE;\n\n      // When the timer runs out while the user has kept their pointer down, we want to\n      // keep only the persistent ripples and the latest transient ripple. We do this,\n      // because we don't want stacked transient ripples to appear after their enter\n      // animation has finished.\n      if (!config.persistent && (!isMostRecentTransientRipple || !this._isPointerDown)) {\n        rippleRef.fadeOut();\n      }\n    }, duration);\n\n    return rippleRef;\n  }\n\n  /** Fades out a ripple reference. */\n  fadeOutRipple(rippleRef: RippleRef) {\n    const wasActive = this._activeRipples.delete(rippleRef);\n\n    if (rippleRef === this._mostRecentTransientRipple) {\n      this._mostRecentTransientRipple = null;\n    }\n\n    // Clear out the cached bounding rect if we have no more ripples.\n    if (!this._activeRipples.size) {\n      this._containerRect = null;\n    }\n\n    // For ripples that are not active anymore, don't re-un the fade-out animation.\n    if (!wasActive) {\n      return;\n    }\n\n    const rippleEl = rippleRef.element;\n    const animationConfig = {...defaultRippleAnimationConfig, ...rippleRef.config.animation};\n\n    rippleEl.style.transitionDuration = `${animationConfig.exitDuration}ms`;\n    rippleEl.style.opacity = '0';\n    rippleRef.state = RippleState.FADING_OUT;\n\n    // Once the ripple faded out, the ripple can be safely removed from the DOM.\n    this.runTimeoutOutsideZone(() => {\n      rippleRef.state = RippleState.HIDDEN;\n      rippleEl.parentNode!.removeChild(rippleEl);\n    }, animationConfig.exitDuration);\n  }\n\n  /** Fades out all currently active ripples. */\n  fadeOutAll() {\n    this._activeRipples.forEach(ripple => ripple.fadeOut());\n  }\n\n  /** Sets up the trigger event listeners */\n  setupTriggerEvents(element: HTMLElement) {\n    if (!element || element === this._triggerElement) {\n      return;\n    }\n\n    // Remove all previously registered event listeners from the trigger element.\n    this._removeTriggerEvents();\n\n    this._ngZone.runOutsideAngular(() => {\n      this._triggerEvents.forEach((fn, type) =>\n          element.addEventListener(type, fn, this._eventOptions));\n    });\n\n    this._triggerElement = element;\n  }\n\n  /** Function being called whenever the trigger is being pressed using mouse. */\n  private onMousedown = (event: MouseEvent) => {\n    const isSyntheticEvent = this._lastTouchStartEvent &&\n        Date.now() < this._lastTouchStartEvent + ignoreMouseEventsTimeout;\n\n    if (!this._target.rippleDisabled && !isSyntheticEvent) {\n      this._isPointerDown = true;\n      this.fadeInRipple(event.clientX, event.clientY, this._target.rippleConfig);\n    }\n  }\n\n  /** Function being called whenever the trigger is being pressed using touch. */\n  private onTouchStart = (event: TouchEvent) => {\n    if (!this._target.rippleDisabled) {\n      // Some browsers fire mouse events after a `touchstart` event. Those synthetic mouse\n      // events will launch a second ripple if we don't ignore mouse events for a specific\n      // time after a touchstart event.\n      this._lastTouchStartEvent = Date.now();\n      this._isPointerDown = true;\n\n      this.fadeInRipple(\n          event.touches[0].clientX, event.touches[0].clientY, this._target.rippleConfig);\n    }\n  }\n\n  /** Function being called whenever the trigger is being released. */\n  private onPointerUp = () => {\n    if (!this._isPointerDown) {\n      return;\n    }\n\n    this._isPointerDown = false;\n\n    // Fade-out all ripples that are visible and not persistent.\n    this._activeRipples.forEach(ripple => {\n      // By default, only ripples that are completely visible will fade out on pointer release.\n      // If the `terminateOnPointerUp` option is set, ripples that still fade in will also fade out.\n      const isVisible = ripple.state === RippleState.VISIBLE ||\n        ripple.config.terminateOnPointerUp && ripple.state === RippleState.FADING_IN;\n\n      if (!ripple.config.persistent && isVisible) {\n        ripple.fadeOut();\n      }\n    });\n  }\n\n  /** Runs a timeout outside of the Angular zone to avoid triggering the change detection. */\n  private runTimeoutOutsideZone(fn: Function, delay = 0) {\n    this._ngZone.runOutsideAngular(() => setTimeout(fn, delay));\n  }\n\n  /** Removes previously registered event listeners from the trigger element. */\n  _removeTriggerEvents() {\n    if (this._triggerElement) {\n      this._triggerEvents.forEach((fn, type) => {\n        this._triggerElement!.removeEventListener(type, fn, this._eventOptions);\n      });\n    }\n  }\n}\n\n/** Enforces a style recalculation of a DOM element by computing its styles. */\nfunction enforceStyleRecalculation(element: HTMLElement) {\n  // Enforce a style recalculation by calling `getComputedStyle` and accessing any property.\n  // Calling `getPropertyValue` is important to let optimizers know that this is not a noop.\n  // See: https://gist.github.com/paulirish/5d52fb081b3570c81e3a\n  window.getComputedStyle(element).getPropertyValue('opacity');\n}\n\n/**\n * Returns the distance from the point (x, y) to the furthest corner of a rectangle.\n */\nfunction distanceToFurthestCorner(x: number, y: number, rect: ClientRect) {\n  const distX = Math.max(Math.abs(x - rect.left), Math.abs(x - rect.right));\n  const distY = Math.max(Math.abs(y - rect.top), Math.abs(y - rect.bottom));\n  return Math.sqrt(distX * distX + distY * distY);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** @docs-private */\nexport function getMatFormFieldPlaceholderConflictError(): Error {\n  return Error('Placeholder attribute and child element were both specified.');\n}\n\n/** @docs-private */\nexport function getMatFormFieldDuplicatedHintError(align: string): Error {\n  return Error(`A hint was already declared for 'align=\"${align}\"'.`);\n}\n\n/** @docs-private */\nexport function getMatFormFieldMissingControlError(): Error {\n  return Error('mat-form-field must contain a MatFormFieldControl.');\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** @docs-private */\nexport function getMatInputUnsupportedTypeError(type: string): Error {\n  return Error(`Input type \"${type}\" isn't supported by matInput.`);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** @docs-private */\nexport function createMissingDateImplError(provider: string) {\n  return Error(\n      `MatDatepicker: No provider found for ${provider}. You must import one of the following ` +\n      `modules at your application root: MatNativeDateModule, MatMomentDateModule, or provide a ` +\n      `custom implementation.`);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Converts values into strings. Falsy values become empty strings.\n * @docs-private\n */\nexport function coerceToString(value: string | number): string {\n  return `${value || ''}`;\n}\n\n/**\n * Converts a value that might be a string into a number.\n * @docs-private\n */\nexport function coerceToNumber(value: string | number): number {\n  return typeof value === 'string' ? parseInt(value, 10) : value;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Throws an exception for the case when menu trigger doesn't have a valid mat-menu instance\n * @docs-private\n */\nexport function throwMatMenuMissingError() {\n  throw Error(`mat-menu-trigger: must pass in an mat-menu instance.\n\n    Example:\n      <mat-menu #menu=\"matMenu\"></mat-menu>\n      <button [matMenuTriggerFor]=\"menu\"></button>`);\n}\n\n/**\n * Throws an exception for the case when menu's x-position value isn't valid.\n * In other words, it doesn't match 'before' or 'after'.\n * @docs-private\n */\nexport function throwMatMenuInvalidPositionX() {\n  throw Error(`x-position value must be either 'before' or after'.\n      Example: <mat-menu x-position=\"before\" #menu=\"matMenu\"></mat-menu>`);\n}\n\n/**\n * Throws an exception for the case when menu's y-position value isn't valid.\n * In other words, it doesn't match 'above' or 'below'.\n * @docs-private\n */\nexport function throwMatMenuInvalidPositionY() {\n  throw Error(`y-position value must be either 'above' or below'.\n      Example: <mat-menu y-position=\"above\" #menu=\"matMenu\"></mat-menu>`);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Returns an exception to be thrown when attempting to change a select's `multiple` option\n * after initialization.\n * @docs-private\n */\nexport function getMatSelectDynamicMultipleError(): Error {\n  return Error('Cannot change `multiple` mode of select after initialization.');\n}\n\n/**\n * Returns an exception to be thrown when attempting to assign a non-array value to a select\n * in `multiple` mode. Note that `undefined` and `null` are still valid values to allow for\n * resetting the value.\n * @docs-private\n */\nexport function getMatSelectNonArrayValueError(): Error {\n  return Error('Value must be an array in multiple-selection mode.');\n}\n\n/**\n * Returns an exception to be thrown when assigning a non-function value to the comparator\n * used to determine if a value corresponds to an option. Note that whether the function\n * actually takes two values and returns a boolean is not checked.\n */\nexport function getMatSelectNonFunctionValueError(): Error {\n  return Error('`compareWith` must be a function.');\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** @docs-private */\nexport function getSortDuplicateSortableIdError(id: string): Error {\n  return Error(`Cannot have two MatSortables with the same id (${id}).`);\n}\n\n/** @docs-private */\nexport function getSortHeaderNotContainedWithinSortError(): Error {\n  return Error(`MatSortHeader must be placed within a parent element with the MatSort directive.`);\n}\n\n/** @docs-private */\nexport function getSortHeaderMissingIdError(): Error {\n  return Error(`MatSortHeader must be provided with a unique id.`);\n}\n\n/** @docs-private */\nexport function getSortInvalidDirectionError(direction: string): Error {\n  return Error(`${direction} is not a valid sort direction ('asc' or 'desc').`);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** @docs-private */\nexport class AnimationCurves {\n  static STANDARD_CURVE = 'cubic-bezier(0.4,0.0,0.2,1)';\n  static DECELERATION_CURVE = 'cubic-bezier(0.0,0.0,0.2,1)';\n  static ACCELERATION_CURVE = 'cubic-bezier(0.4,0.0,1,1)';\n  static SHARP_CURVE = 'cubic-bezier(0.4,0.0,0.6,1)';\n}\n\n\n/** @docs-private */\nexport class AnimationDurations {\n  static COMPLEX = '375ms';\n  static ENTERING = '225ms';\n  static EXITING = '195ms';\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {InjectionToken} from '@angular/core';\n\n\nexport type MatDateFormats = {\n  parse: {\n    dateInput: any\n  },\n  display: {\n    dateInput: any,\n    monthYearLabel: any,\n    dateA11yLabel: any,\n    monthYearA11yLabel: any,\n  }\n};\n\n\nexport const MAT_DATE_FORMATS = new InjectionToken<MatDateFormats>('mat-date-formats');\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {MatDateFormats} from './date-formats';\n\n\nexport const MAT_NATIVE_DATE_FORMATS: MatDateFormats = {\n  parse: {\n    dateInput: null,\n  },\n  display: {\n    dateInput: {year: 'numeric', month: 'numeric', day: 'numeric'},\n    monthYearLabel: {year: 'numeric', month: 'short'},\n    dateA11yLabel: {year: 'numeric', month: 'long', day: 'numeric'},\n    monthYearA11yLabel: {year: 'numeric', month: 'long'},\n  }\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {PlatformModule} from '@angular/cdk/platform';\nimport {NgModule} from '@angular/core';\nimport {DateAdapter} from './date-adapter';\nimport {MAT_DATE_FORMATS} from './date-formats';\nimport {NativeDateAdapter} from './native-date-adapter';\nimport {MAT_NATIVE_DATE_FORMATS} from './native-date-formats';\n\nexport * from './date-adapter';\nexport * from './date-formats';\nexport * from './native-date-adapter';\nexport * from './native-date-formats';\n\n\n@NgModule({\n  imports: [PlatformModule],\n  providers: [\n    {provide: DateAdapter, useClass: NativeDateAdapter},\n  ],\n})\nexport class NativeDateModule {}\n\n\n@NgModule({\n  imports: [NativeDateModule],\n  providers: [{provide: MAT_DATE_FORMATS, useValue: MAT_NATIVE_DATE_FORMATS}],\n})\nexport class MatNativeDateModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable} from '@angular/core';\nimport {FormGroupDirective, NgForm, FormControl} from '@angular/forms';\n\n/** Error state matcher that matches when a control is invalid and dirty. */\n@Injectable()\nexport class ShowOnDirtyErrorStateMatcher implements ErrorStateMatcher {\n  isErrorState(control: FormControl | null, form: FormGroupDirective | NgForm | null): boolean {\n    return !!(control && control.invalid && (control.dirty || (form && form.submitted)));\n  }\n}\n\n/** Provider that defines how form controls behave with regards to displaying error messages. */\n@Injectable({providedIn: 'root'})\nexport class ErrorStateMatcher {\n  isErrorState(control: FormControl | null, form: FormGroupDirective | NgForm | null): boolean {\n    return !!(control && control.invalid && (control.touched || (form && form.submitted)));\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable, InjectionToken, Inject, Optional} from '@angular/core';\nimport {HammerGestureConfig} from '@angular/platform-browser';\nimport {MatCommonModule} from '../common-behaviors/common-module';\nimport {\n  HammerStatic,\n  HammerInstance,\n  Recognizer,\n  RecognizerStatic,\n  HammerOptions,\n} from './gesture-annotations';\n\n/**\n * Injection token that can be used to provide options to the Hammerjs instance.\n * More info at http://hammerjs.github.io/api/.\n */\nexport const MAT_HAMMER_OPTIONS = new InjectionToken<HammerOptions>('MAT_HAMMER_OPTIONS');\n\n/** Adjusts configuration of our gesture library, Hammer. */\n@Injectable()\nexport class GestureConfig extends HammerGestureConfig {\n  private _hammer: HammerStatic = typeof window !== 'undefined' ? (window as any).Hammer : null;\n\n  /** List of new event names to add to the gesture support list */\n  events: string[] = this._hammer ? [\n    'longpress',\n    'slide',\n    'slidestart',\n    'slideend',\n    'slideright',\n    'slideleft'\n  ] : [];\n\n  constructor(\n    @Optional() @Inject(MAT_HAMMER_OPTIONS) private _hammerOptions?: HammerOptions,\n    @Optional() commonModule?: MatCommonModule) {\n    super();\n    if (commonModule) {\n      commonModule._checkHammerIsAvailable();\n    }\n  }\n\n  /**\n   * Builds Hammer instance manually to add custom recognizers that match the Material Design spec.\n   *\n   * Our gesture names come from the Material Design gestures spec:\n   * https://material.io/design/#gestures-touch-mechanics\n   *\n   * More information on default recognizers can be found in Hammer docs:\n   * http://hammerjs.github.io/recognizer-pan/\n   * http://hammerjs.github.io/recognizer-press/\n   *\n   * @param element Element to which to assign the new HammerJS gestures.\n   * @returns Newly-created HammerJS instance.\n   */\n  buildHammer(element: HTMLElement): HammerInstance {\n    const mc = new this._hammer(element, this._hammerOptions || undefined);\n\n    // Default Hammer Recognizers.\n    const pan = new this._hammer.Pan();\n    const swipe = new this._hammer.Swipe();\n    const press = new this._hammer.Press();\n\n    // Notice that a HammerJS recognizer can only depend on one other recognizer once.\n    // Otherwise the previous `recognizeWith` will be dropped.\n    // TODO: Confirm threshold numbers with Material Design UX Team\n    const slide = this._createRecognizer(pan, {event: 'slide', threshold: 0}, swipe);\n    const longpress = this._createRecognizer(press, {event: 'longpress', time: 500});\n\n    // Overwrite the default `pan` event to use the swipe event.\n    pan.recognizeWith(swipe);\n\n    // Add customized gestures to Hammer manager\n    mc.add([swipe, press, pan, slide, longpress]);\n\n    return mc as HammerInstance;\n  }\n\n  /** Creates a new recognizer, without affecting the default recognizers of HammerJS */\n  private _createRecognizer(base: Recognizer, options: any, ...inheritances: Recognizer[]) {\n    let recognizer = new (base.constructor as RecognizerStatic)(options);\n\n    inheritances.push(base);\n    inheritances.forEach(item => recognizer.recognizeWith(item));\n\n    return recognizer;\n  }\n\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  NgModule,\n  Directive,\n  ElementRef,\n  QueryList,\n} from '@angular/core';\nimport {MatCommonModule} from '../common-behaviors/common-module';\n\n\n/**\n * Shared directive to count lines inside a text area, such as a list item.\n * Line elements can be extracted with a @ContentChildren(MatLine) query, then\n * counted by checking the query list's length.\n */\n@Directive({\n  selector: '[mat-line], [matLine]',\n  host: {'class': 'mat-line'}\n})\nexport class MatLine {}\n\n/**\n * Helper that takes a query list of lines and sets the correct class on the host.\n * @docs-private\n */\nexport class MatLineSetter {\n  constructor(private _lines: QueryList<MatLine>, private _element: ElementRef) {\n    this._setLineClass(this._lines.length);\n\n    this._lines.changes.subscribe(() => {\n      this._setLineClass(this._lines.length);\n    });\n  }\n\n  private _setLineClass(count: number): void {\n    this._resetClasses();\n    if (count === 2 || count === 3) {\n      this._setClass(`mat-${count}-line`, true);\n    } else if (count > 3) {\n      this._setClass(`mat-multi-line`, true);\n    }\n  }\n\n  private _resetClasses(): void {\n    this._setClass('mat-2-line', false);\n    this._setClass('mat-3-line', false);\n    this._setClass('mat-multi-line', false);\n  }\n\n  private _setClass(className: string, isAdd: boolean): void {\n    if (isAdd) {\n      this._element.nativeElement.classList.add(className);\n    } else {\n      this._element.nativeElement.classList.remove(className);\n    }\n  }\n\n}\n\n@NgModule({\n  imports: [MatCommonModule],\n  exports: [MatLine, MatCommonModule],\n  declarations: [MatLine],\n})\nexport class MatLineModule { }\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {RippleConfig, RippleRenderer} from './ripple-renderer';\n\n/** Possible states for a ripple element. */\nexport enum RippleState {\n  FADING_IN, VISIBLE, FADING_OUT, HIDDEN\n}\n\n/**\n * Reference to a previously launched ripple element.\n */\nexport class RippleRef {\n\n  /** Current state of the ripple reference. */\n  state: RippleState = RippleState.HIDDEN;\n\n  constructor(\n    private _renderer: RippleRenderer,\n    public element: HTMLElement,\n    public config: RippleConfig) {\n  }\n\n  /** Fades out the ripple element. */\n  fadeOut() {\n    this._renderer.fadeOutRipple(this);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Platform} from '@angular/cdk/platform';\nimport {\n  Directive,\n  ElementRef,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  OnDestroy,\n  OnInit,\n  Optional,\n} from '@angular/core';\nimport {RippleRef} from './ripple-ref';\nimport {RippleAnimationConfig, RippleConfig, RippleRenderer, RippleTarget} from './ripple-renderer';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\n\n/** Configurable options for `matRipple`. */\nexport interface RippleGlobalOptions {\n  /**\n   * Whether ripples should be disabled. Ripples can be still launched manually by using\n   * the `launch()` method. Therefore focus indicators will still show up.\n   */\n  disabled?: boolean;\n\n  /**\n   * Configuration for the animation duration of the ripples.\n   * There are two phases with different durations for the ripples.\n   */\n  animation?: RippleAnimationConfig;\n\n  /**\n   * If set, the default duration of the fade-in animation is divided by this value. For example,\n   * setting it to 0.5 will cause the ripple fade-in animation to take twice as long.\n   * A changed speedFactor will not affect the fade-out duration of the ripples.\n   * @deprecated Use the `animation` global option instead.\n   * @deletion-target 7.0.0\n   */\n  baseSpeedFactor?: number;\n\n  /**\n   * Whether ripples should start fading out immediately after the mouse our touch is released. By\n   * default, ripples will wait for the enter animation to complete and for mouse or touch release.\n   */\n  terminateOnPointerUp?: boolean;\n}\n\n/** Injection token that can be used to specify the global ripple options. */\nexport const MAT_RIPPLE_GLOBAL_OPTIONS =\n    new InjectionToken<RippleGlobalOptions>('mat-ripple-global-options');\n\n@Directive({\n  selector: '[mat-ripple], [matRipple]',\n  exportAs: 'matRipple',\n  host: {\n    'class': 'mat-ripple',\n    '[class.mat-ripple-unbounded]': 'unbounded'\n  }\n})\nexport class MatRipple implements OnInit, OnDestroy, RippleTarget {\n\n  /** Custom color for all ripples. */\n  @Input('matRippleColor') color: string;\n\n  /** Whether the ripples should be visible outside the component's bounds. */\n  @Input('matRippleUnbounded') unbounded: boolean;\n\n  /**\n   * Whether the ripple always originates from the center of the host element's bounds, rather\n   * than originating from the location of the click event.\n   */\n  @Input('matRippleCentered') centered: boolean;\n\n  /**\n   * If set, the radius in pixels of foreground ripples when fully expanded. If unset, the radius\n   * will be the distance from the center of the ripple to the furthest corner of the host element's\n   * bounding rectangle.\n   */\n  @Input('matRippleRadius') radius: number = 0;\n\n  /**\n   * If set, the normal duration of ripple animations is divided by this value. For example,\n   * setting it to 0.5 will cause the animations to take twice as long.\n   * A changed speedFactor will not modify the fade-out duration of the ripples.\n   * @deprecated Use the [matRippleAnimation] binding instead.\n   * @deletion-target 7.0.0\n   */\n  @Input('matRippleSpeedFactor') speedFactor: number = 1;\n\n  /**\n   * Configuration for the ripple animation. Allows modifying the enter and exit animation\n   * duration of the ripples.\n   */\n  @Input('matRippleAnimation') animation: RippleAnimationConfig;\n\n  /**\n   * Whether click events will not trigger the ripple. Ripples can be still launched manually\n   * by using the `launch()` method.\n   */\n  @Input('matRippleDisabled')\n  get disabled() { return this._disabled; }\n  set disabled(value: boolean) {\n    this._disabled = value;\n    this._setupTriggerEventsIfEnabled();\n  }\n  private _disabled: boolean = false;\n\n  /**\n   * The element that triggers the ripple when click events are received.\n   * Defaults to the directive's host element.\n   */\n  @Input('matRippleTrigger')\n  get trigger() { return this._trigger || this._elementRef.nativeElement; }\n  set trigger(trigger: HTMLElement) {\n    this._trigger = trigger;\n    this._setupTriggerEventsIfEnabled();\n  }\n  private _trigger: HTMLElement;\n\n  /** Renderer for the ripple DOM manipulations. */\n  private _rippleRenderer: RippleRenderer;\n\n  /** Options that are set globally for all ripples. */\n  private _globalOptions: RippleGlobalOptions;\n\n  /** Whether ripple directive is initialized and the input bindings are set. */\n  private _isInitialized: boolean = false;\n\n  constructor(private _elementRef: ElementRef,\n              ngZone: NgZone,\n              platform: Platform,\n              @Optional() @Inject(MAT_RIPPLE_GLOBAL_OPTIONS) globalOptions: RippleGlobalOptions,\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) private _animationMode?: string) {\n\n    this._globalOptions = globalOptions || {};\n    this._rippleRenderer = new RippleRenderer(this, ngZone, _elementRef, platform);\n  }\n\n  ngOnInit() {\n    this._isInitialized = true;\n    this._setupTriggerEventsIfEnabled();\n  }\n\n  ngOnDestroy() {\n    this._rippleRenderer._removeTriggerEvents();\n  }\n\n  /** Fades out all currently showing ripple elements. */\n  fadeOutAll() {\n    this._rippleRenderer.fadeOutAll();\n  }\n\n  /** Ripple configuration from the directive's input values. */\n  get rippleConfig(): RippleConfig {\n    return {\n      centered: this.centered,\n      radius: this.radius,\n      color: this.color,\n      animation: this._animationMode === 'NoopAnimations' ?\n          {enterDuration: 0, exitDuration: 0} :\n          {...this._globalOptions.animation, ...this.animation},\n      terminateOnPointerUp: this._globalOptions.terminateOnPointerUp,\n      speedFactor: this.speedFactor * (this._globalOptions.baseSpeedFactor || 1),\n    };\n  }\n\n  /** Whether ripples on pointer-down are disabled or not. */\n  get rippleDisabled(): boolean {\n    return this.disabled || !!this._globalOptions.disabled;\n  }\n\n  /** Sets up the the trigger event listeners if ripples are enabled. */\n  private _setupTriggerEventsIfEnabled() {\n    if (!this.disabled && this._isInitialized) {\n      this._rippleRenderer.setupTriggerEvents(this.trigger);\n    }\n  }\n\n  /**\n   * Launches a manual ripple using the specified ripple configuration.\n   * @param config Configuration for the manual ripple.\n   */\n  launch(config: RippleConfig): RippleRef;\n\n  /**\n   * Launches a manual ripple at the specified coordinates within the element.\n   * @param x Coordinate within the element, along the X axis at which to fade-in the ripple.\n   * @param y Coordinate within the element, along the Y axis at which to fade-in the ripple.\n   * @param config Optional ripple configuration for the manual ripple.\n   */\n  launch(x: number, y: number, config?: RippleConfig): RippleRef;\n\n  /** Launches a manual ripple at the specified coordinated or just by the ripple config. */\n  launch(configOrX: number | RippleConfig, y: number = 0, config?: RippleConfig): RippleRef {\n    if (typeof configOrX === 'number') {\n      return this._rippleRenderer.fadeInRipple(configOrX, y, {...this.rippleConfig, ...config});\n    } else {\n      return this._rippleRenderer.fadeInRipple(0, 0, {...this.rippleConfig, ...configOrX});\n    }\n  }\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {PlatformModule} from '@angular/cdk/platform';\nimport {MatCommonModule} from '../common-behaviors/common-module';\nimport {MatRipple} from './ripple';\n\nexport * from './ripple';\nexport * from './ripple-ref';\nexport * from './ripple-renderer';\n\n@NgModule({\n  imports: [MatCommonModule, PlatformModule],\n  exports: [MatRipple, MatCommonModule],\n  declarations: [MatRipple],\n})\nexport class MatRippleModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Component, ViewEncapsulation, Input, ChangeDetectionStrategy} from '@angular/core';\n\nexport type MatPseudoCheckboxState = 'unchecked' | 'checked' | 'indeterminate';\n\n/**\n * Component that shows a simplified checkbox without including any kind of \"real\" checkbox.\n * Meant to be used when the checkbox is purely decorative and a large number of them will be\n * included, such as for the options in a multi-select. Uses no SVGs or complex animations.\n * Note that theming is meant to be handled by the parent element, e.g.\n * `mat-primary .mat-pseudo-checkbox`.\n *\n * Note that this component will be completely invisible to screen-reader users. This is *not*\n * interchangeable with `<mat-checkbox>` and should *not* be used if the user would directly\n * interact with the checkbox. The pseudo-checkbox should only be used as an implementation detail\n * of more complex components that appropriately handle selected / checked state.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  selector: 'mat-pseudo-checkbox',\n  styleUrls: ['pseudo-checkbox.css'],\n  template: '',\n  host: {\n    'class': 'mat-pseudo-checkbox',\n    '[class.mat-pseudo-checkbox-indeterminate]': 'state === \"indeterminate\"',\n    '[class.mat-pseudo-checkbox-checked]': 'state === \"checked\"',\n    '[class.mat-pseudo-checkbox-disabled]': 'disabled',\n  },\n})\nexport class MatPseudoCheckbox {\n  /** Display state of the checkbox. */\n  @Input() state: MatPseudoCheckboxState = 'unchecked';\n\n  /** Whether the checkbox is disabled. */\n  @Input() disabled: boolean = false;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatPseudoCheckbox} from './pseudo-checkbox/pseudo-checkbox';\n\n\n@NgModule({\n  exports: [MatPseudoCheckbox],\n  declarations: [MatPseudoCheckbox]\n})\nexport class MatPseudoCheckboxModule { }\n\n\nexport * from './pseudo-checkbox/pseudo-checkbox';\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Component, ViewEncapsulation, Input, ChangeDetectionStrategy} from '@angular/core';\nimport {mixinDisabled, CanDisable} from '../common-behaviors/disabled';\n\n// Boilerplate for applying mixins to MatOptgroup.\n/** @docs-private */\nexport class MatOptgroupBase { }\nexport const _MatOptgroupMixinBase = mixinDisabled(MatOptgroupBase);\n\n// Counter for unique group ids.\nlet _uniqueOptgroupIdCounter = 0;\n\n/**\n * Component that is used to group instances of `mat-option`.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-optgroup',\n  exportAs: 'matOptgroup',\n  templateUrl: 'optgroup.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  inputs: ['disabled'],\n  styleUrls: ['optgroup.css'],\n  host: {\n    'class': 'mat-optgroup',\n    'role': 'group',\n    '[class.mat-optgroup-disabled]': 'disabled',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.aria-labelledby]': '_labelId',\n  }\n})\nexport class MatOptgroup extends _MatOptgroupMixinBase implements CanDisable {\n  /** Label for the option group. */\n  @Input() label: string;\n\n  /** Unique id for the underlying label. */\n  _labelId: string = `mat-optgroup-label-${_uniqueOptgroupIdCounter++}`;\n}\n"],"names":["SELECT_PANEL_PADDING_X","this","_realignInkBar","merge","dirChange","resize","subscribe","realign","MatTabHeader","prototype","ngOnDestroy","unsubscribe","_onContentChanges","_updatePagination","_alignInkBarToSelectedTab","_changeDetectorRef","markForCheck","_checkPaginationEnabled","_checkScrollingControls","_updateTabScrollPosition","Object","defineProperty","_focusIndex","value","_isValidIndex","indexFocused","emit","_setTabFocus","index","_labelWrappers","tab","toArray","disabled","tabIndex","_showPaginationControls","_scrollToLabel","length","focus","containerEl","_tabListContainer","nativeElement","dir","_getLayoutDirection","scrollLeft","scrollWidth","offsetWidth","_moveFocus","offset","tabs","i","focusIndex","_focusNextTab","_focusPreviousTab","_focusFirstTab","_focusLastTab","_dir","scrollDistance","translateX","_tabList","style","transform","_scrollDistance","v","Math","max","min","_getMaxScrollDistance","_scrollDistanceChanged","_scrollHeader","scrollDir","viewLength","labelIndex","selectedLabel","labelBeforePos","labelAfterPos","getOffsetLeft","getOffsetWidth","beforeVisiblePos","afterVisiblePos","isEnabled","_elementRef","_disableScrollBefore","_disableScrollAfter","selectedLabelWrapper","selectedIndex","elementRef","_inkBar","alignToElement","type","Component","args","selector","template","styles","inputs","encapsulation","ViewEncapsulation","None","changeDetection","ChangeDetectionStrategy","OnPush","host","class","[class.mat-tab-header-pagination-controls-enabled]","[class.mat-tab-header-rtl]","ViewportRuler","Directionality","decorators","Optional","propDecorators","ViewChild","Input","selectFocusedIndex","Output","nextId","MatTabChangeEvent","MatTabGroupBase","_MatTabGroupMixinBase","mixinColor","mixinDisableRipple","MatTabGroup","_this","_super","call","_indexToSelect","_tabBodyWrapperHeight","_tabsSubscription","Subscription","EMPTY","_tabLabelSubscription","_dynamicHeight","_selectedIndex","headerPosition","selectedIndexChange","EventEmitter","focusChange","animationDone","selectedTabChange","_groupId","tslib_1.__extends","coerceBooleanProperty","coerceNumberProperty","_backgroundColor","classList","remove","backgroundColor","add","ngAfterContentChecked","indexToSelect","_tabs","tabChangeEvent","_createChangeEvent","Promise","resolve","then","forEach","position","isActive","origin","ngAfterContentInit","_subscribeToTabLabels","changes","realignInkBar","_tabHeader","_focusChanged","event","apply","map","_disableChange","concat","_labelChange","_getTabLabelId","_getTabContentId","_setTabBodyWrapperHeight","tabHeight","wrapper","_tabBodyWrapper","height","offsetHeight","_removeTabBodyWrapperHeight","clientHeight","_handleClick","tabHeader","idx","_getTabIndex","exportAs","[class.mat-tab-group-dynamic-height]","[class.mat-tab-group-inverted-header]","dynamicHeight","MatTabNavBase","_MatTabNavMixinBase","MatTabNav","_ngZone","_viewportRuler","_onDestroy","Subject","updateActiveLink","element","_activeLinkChanged","runOutsideAngular","change","observableOf","pipe","takeUntil","_alignInkBar","activeTab","_tabLinks","find","active","_activeLinkElement","next","complete","show","hide","NgZone","ChangeDetectorRef","MatTabLinkBase","_MatTabLinkMixinBase","mixinTabIndex","mixinDisabled","_tabNavBar","_tabLinkRipple","setupTriggerEvents","parseInt","globalOptions","rippleConfig","terminateOnPointerUp","speedFactor","baseSpeedFactor","animation","get","_isActive","enumerable","configurable","preventDefault","MatTabLink","Directive","[attr.aria-current]","[attr.aria-disabled]","[attr.tabIndex]","[class.mat-tab-disabled]","[class.mat-tab-label-active]","(click)","Platform","undefined","Inject","MAT_RIPPLE_GLOBAL_OPTIONS","Attribute","NgModule","imports","CommonModule","MatCommonModule","PortalModule","MatRippleModule","ObserversModule","exports","MatTabLabel","MatTab","MatTabContent","declarations","MatInkBar","MatTabLabelWrapper","MatTabBody","MatTabBodyPortal","MatTabsModule","MatToolbarBase","_MatToolbarMixinBase","MatToolbarRow","MatToolbar","_platform","document","_document","ngAfterViewInit","isDevMode","isBrowser","_checkToolbarMixedModes","_toolbarRows","slice","childNodes","filter","node","contains","nodeType","COMMENT_NODE","some","textContent","trim","throwToolbarMixedModesError","[class.mat-toolbar-multiple-rows]","[class.mat-toolbar-single-row]","DOCUMENT","MatToolbarModule","MatTreeNodeOutlet","viewContainer","ViewContainerRef","_MatTreeNodeMixinBase","CdkTreeNode","_MatNestedTreeNodeMixinBase","CdkNestedTreeNode","MatTreeNode","_tree","role","Number","[attr.aria-expanded]","[attr.aria-level]","[attr.role]","providers","provide","useExisting","ElementRef","CdkTree","MatTreeNodeDef","CdkTreeNodeDef","data","MatNestedTreeNode","_differs","IterableDiffers","nodeOutlet","ContentChildren","MatTreeNodePadding","CdkTreeNodePadding","level","indent","MatTree","recursive","MatTreeNodeToggle","CdkTreeNodeToggle","MAT_TREE_DIRECTIVES","CdkTreeModule","MatTreeModule","MatTreeFlattener","transformFunction","getLevel","isExpandable","getChildren","_flattenNode","resultNodes","parentMap","flatNode","push","take","children","child","childParentMap","flattenNodes","structuredData","expandFlattenedNodes","nodes","treeControl","results","currentExpand","expand","isExpanded","MatTreeFlatDataSource","treeFlattener","initialData","_flattenedData","BehaviorSubject","_expandedData","_data","dataNodes","connect","collectionViewer","viewChange","expansionModel","disconnect","DataSource","MatTreeNestedDataSource","VERSION","Version","MatStepHeader","iconOverrides","selected","optional","matStepperAnimations","horizontalStepTransition","trigger","state","visibility","transition","animate","verticalStepTransition","MatStepperIcon","templateRef","TemplateRef","name","MatStep","stepper","_errorStateMatcher","isErrorState","control","form","originalErrorState","customErrorState","invalid","interacted","ErrorStateMatcher","MatStepper","arguments","icons","_icons","override","icon","_iconOverrides","_steps","_destroyed","_stateChanged","MatHorizontalStepper","aria-orientation","animations","MatVerticalStepper","ctorParameters","MatStepperNext","[type]","CdkStepper","CdkStepperNext","MatStepperPrevious","CdkStepperPrevious","MatButtonModule","CdkStepperModule","MatIconModule","MatStepLabel","MatStepperIntl","MatStepperModule","MatTable","stickyCssClass","CDK_TABLE_TEMPLATE","MatCellDef","CdkCellDef","MatHeaderCellDef","CdkHeaderCellDef","MatFooterCellDef","CdkFooterCellDef","MatColumnDef","CdkColumnDef","sticky","stickyEnd","MatHeaderCell","columnDef","cssClassFriendlyName","CdkHeaderCell","MatFooterCell","CdkFooterCell","MatCell","CdkCell","MatHeaderRowDef","CdkHeaderRowDef","MatFooterRowDef","CdkFooterRowDef","MatRowDef","CdkRowDef","MatHeaderRow","CDK_ROW_TEMPLATE","CdkHeaderRow","CdkFooterRow","MatFooterRow","MatRow","CdkRow","EXPORTED_DECLARATIONS","CdkTableModule","MatTableModule","MatTableDataSource","_renderData","_filter","_renderChangesSubscription","sortingDataAccessor","sortHeaderId","_isNumberValue","sortData","sort","direction","a","b","valueA","valueB","comparatorResult","filterPredicate","accumulator","currentTerm","key","dataStr","keys","reduce","toLowerCase","transformedFilter","indexOf","_updateChangeSubscription","_sort","_paginator","paginator","sortChange","initialized","pageChange","page","dataStream","filteredData","combineLatest","_a","_filterData","orderedData","_orderData","paginatedData","_pageData","obj","_updatePaginator","startIndex","pageIndex","pageSize","splice","filteredDataLength","lastPageIndex","ceil","_MAT_INK_BAR_POSITIONER","InjectionToken","providedIn","factory","_MAT_INK_BAR_POSITIONER_FACTORY","_inkBarPositioner","requestAnimationFrame","_setStyles","positions","inkBar","left","width","viewContainerRef","CdkPortal","MatTabBase","_MatTabMixinBase","_viewContainerRef","textLabel","_contentPortal","ngOnChanges","hasOwnProperty","ngOnInit","TemplatePortal","_explicitContent","_implicitContent","matTabsAnimations","translateTab","componentFactoryResolver","_host","_centeringSub","_leavingSub","_beforeCentering","startWith","_isCenterPosition","_position","isCentering","hasAttached","attach","_content","_afterLeavingCenter","detach","ComponentFactoryResolver","forwardRef","CdkPortalOutlet","_onCentering","_onCentered","_origin","_onTranslateTabStarted","e","toState","_onTranslateTabComplete","fromState","_portalHost","PortalHostDirective","MatTabLabelWrapperBase","_MatTabLabelWrapperMixinBase","offsetLeft","MatTabHeaderBase","_MatTabHeaderMixinBase","_selectedIndexChanged","_tabLabelCount","_handleKeydown","keyCode","RIGHT_ARROW","LEFT_ARROW","HOME","END","ENTER","SPACE","ANIMATION_MODULE_TYPE","MatSlider","step","thumbLabel","tickInterval","displayWith","vertical","input","_sliderWrapper","HAMMER_GESTURE_CONFIG","useClass","GestureConfig","MatSliderModule","MatSnackBarRef","containerInstance","_overlayRef","_afterDismissed","_afterOpened","_onAction","_dismissedByAction","onAction","dismiss","_onExit","_finishDismiss","closed","exit","clearTimeout","_durationTimeoutId","dismissWithAction","closeWithAction","_dismissAfter","duration","setTimeout","_open","dispose","dismissedByAction","afterDismissed","asObservable","afterOpened","_onEnter","MAT_SNACK_BAR_DATA","MatSnackBarConfig","politeness","announcementMessage","horizontalPosition","verticalPosition","matSnackBarAnimations","contentFade","opacity","AnimationDurations","COMPLEX","AnimationCurves","STANDARD_CURVE","snackBarState","EXITING","ACCELERATION_CURVE","ENTERING","DECELERATION_CURVE","SimpleSnackBar","snackBarRef","action","[@contentFade]","MatSnackBarContainer","snackBarConfig","_animationState","attachComponentPortal","portal","_assertNotAttached","_applySnackBarClasses","_portalOutlet","attachTemplatePortal","onAnimationEnd","startsWith","_completeExit","onEnter_1","run","enter","detectChanges","onMicrotaskEmpty","panelClasses","panelClass","Array","isArray","cssClass","Error","[@state]","(@state.done)","OverlayModule","entryComponents","MatSnackBarModule","MAT_SNACK_BAR_DEFAULT_OPTIONS","MAT_SNACK_BAR_DEFAULT_OPTIONS_FACTORY","MatSnackBar","_overlay","_live","_injector","_breakpointObserver","_parentSnackBar","_defaultConfig","_snackBarRefAtThisLevel","parent","_openedSnackBarRef","openFromComponent","component","config","_attach","openFromTemplate","open","message","_config","tslib_1.__assign","_attachSnackBarContainer","overlayRef","userInjector","injector","PortalInjector","WeakMap","containerPortal","ComponentPortal","containerRef","instance","content","userConfig","_createOverlay","container","$implicit","_createInjector","contentRef","observe","Breakpoints","Handset","detachments","matches","overlayElement","_animateSnackBar","announce","overlayConfig","OverlayConfig","positionStrategy","global","isRtl","isLeft","isRight","right","centerHorizontally","top","bottom","create","Injectable","Overlay","LiveAnnouncer","Injector","BreakpointObserver","SkipSelf","MatSortBase","_MatSortMixinBase","mixinInitialized","sortables","Map","_stateChanges","start","_direction","MatSort","getSortInvalidDirectionError","_disableClear","register","sortable","id","getSortHeaderMissingIdError","has","getSortDuplicateSortableIdError","set","deregister","delete","getNextSortDirection","disableClear","sortDirectionCycle","getSortDirectionCycle","nextDirectionIndex","_markInitialized","SORT_ANIMATION_TRANSITION","matSortAnimations","indicator","leftPointer","rightPointer","arrowOpacity","arrowPosition","keyframes","allowChildren","query","animateChild","sortButtonLabel","MatSortHeaderIntl","MAT_SORT_HEADER_INTL_PROVIDER","deps","useFactory","MAT_SORT_HEADER_INTL_PROVIDER_FACTORY","MatSortHeaderBase","_MatSortHeaderMixinBase","MatSortHeader","_intl","changeDetectorRef","_cdkColumnDef","_showIndicatorHint","_arrowDirection","_disableViewStateAnimation","getSortHeaderNotContainedWithinSortError","_rerenderSubscription","_isSorted","_updateArrowDirection","_viewState","_setAnimationTransitionState","_setIndicatorHintVisible","visible","_isDisabled","viewState","_getArrowDirectionState","_getArrowViewState","_getAriaSortAttribute","(mouseenter)","(longpress)","(mouseleave)","[attr.aria-sort]","[class.mat-sort-header-disabled]","MatSortModule","CdkStepLabel","optionalLabel","_focusMonitor","_element","monitor","_intlSubscription","stopMonitoring","_stringLabel","label","_templateLabel","_getHostElement","_getIconContext","[class.mat-drawer-container-explicit-backdrop]","MatDrawerContainer","_drawers","MatDrawer","ContentChild","MatDrawerContent","autosize","hasBackdrop","MatSidenavContent","[style.margin-left.px]","[style.margin-right.px]","MatSidenav","_fixedBottomGap","matDrawerAnimations","transformDrawer","[@transform]","(@transform.start)","(@transform.done)","[attr.align]","[class.mat-drawer-end]","[class.mat-drawer-over]","[class.mat-drawer-side]","[class.mat-sidenav-fixed]","[style.top.px]","[style.bottom.px]","fixedInViewport","MatSidenavContainer","MatSidenavModule","ScrollDispatchModule","PlatformModule","nextUniqueId","MAT_SLIDE_TOGGLE_VALUE_ACCESSOR","NG_VALUE_ACCESSOR","MatSlideToggle","multi","MatSlideToggleChange","source","checked","MatSlideToggleBase","_MatSlideToggleMixinBase","_animationMode","onChange","_","onTouched","_uniqueId","_required","_checked","_dragging","labelPosition","ariaLabel","ariaLabelledby","_inputElement","focusOrigin","_onInputFocusChange","_onChangeEvent","stopPropagation","_emitChangeEvent","_onInputClick","writeValue","registerOnChange","fn","registerOnTouched","setDisabledState","isDisabled","focusVia","toggle","_focusRipple","fadeOut","_ripple","launch","persistent","_getDragPercentage","distance","percentage","_thumbBarWidth","_previousChecked","_onDragStart","thumbEl","_thumbEl","_thumbBarEl","clientWidth","_onDrag","_dragPercentage","deltaX","dragX","_onDragEnd","newCheckedValue","_onLabelTextChange","[id]","[class.mat-checked]","[class.mat-disabled]","[class.mat-slide-toggle-label-before]","[class._mat-animation-noopable]","FocusMonitor","required","MatRipple","MatSlideToggleModule","MAT_SLIDER_VALUE_ACCESSOR","MatSliderChange","MatSliderBase","_MatSliderMixinBase","_invert","_max","_min","_step","_thumbLabel","_tickInterval","_value","_vertical","_percent","_isSliding","_tickIntervalPercent","_sliderDimensions","_controlValueAccessorChangeFn","_dirChangeSubscription","_calculatePercentage","_roundToDecimal","toString","split","pop","toFixed","_focusHostElement","blur","_blurHostElement","_clamp","invert","percent","_isMinValue","axis","_invertMouseCoords","_thumbGap","tickSize","backgroundSize","sign","rotate","_invertAxis","_onMouseenter","_getSliderDimensions","_updateTickIntervalPercent","_onClick","oldValue","_updateValueFromPosition","x","clientX","y","clientY","_emitInputEvent","_onSlide","_onSlideStart","center","_valueOnSlideStart","_onSlideEnd","_onFocus","_onBlur","_onKeydown","PAGE_UP","_increment","PAGE_DOWN","UP_ARROW","DOWN_ARROW","_onKeyup","numSteps","pos","size","posComponent","exactValue","_calculateValue","closestValue","round","parseFloat","trackSize","pixelsPerStep","stepsPerTick","pixelsPerTick","getBoundingClientRect","(focus)","(blur)","(keydown)","(keyup)","(slide)","(slideend)","(slidestart)","[tabIndex]","[attr.aria-valuemax]","[attr.aria-valuemin]","[attr.aria-valuenow]","[attr.aria-orientation]","[class.mat-slider-disabled]","[class.mat-slider-has-ticks]","[class.mat-slider-horizontal]","[class.mat-slider-axis-inverted]","[class.mat-slider-sliding]","[class.mat-slider-thumb-label-showing]","[class.mat-slider-vertical]","[class.mat-slider-min-value]","[class.mat-slider-hide-last-tick]","MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS","MatProgressSpinner","mode","animationMode","defaults","[style.width.px]","[style.height.px]","MatSpinner","MatProgressSpinnerModule","MAT_RADIO_GROUP_CONTROL_VALUE_ACCESSOR","MatRadioGroup","MatRadioChange","MatRadioGroupBase","_MatRadioGroupMixinBase","_changeDetector","_name","_selected","_isInitialized","_labelPosition","_disabled","_updateRadioButtonNames","_markRadiosForCheck","newValue","_updateSelectedRadioFromValue","_checkSelectedRadioButton","_touch","_radios","radio","isAlreadySelected","_markForCheck","MatRadioButton","descendants","MatRadioButtonBase","_MatRadioButtonMixinBase","radioGroup","_radioDispatcher","_removeUniqueSelectionListener","listen","newCheckedState","notify","newDisabledState","_isRippleDisabled","disableRipple","_onInputChange","groupValueChanged","[class.mat-radio-checked]","[class.mat-radio-disabled]","[attr.id]","UniqueSelectionDispatcher","ariaDescribedby","MatRadioModule","box-shadow","MAT_DRAWER_DEFAULT_AUTOSIZE","MAT_DRAWER_DEFAULT_AUTOSIZE_FACTORY","_container","_contentMarginChanges","_focusTrapFactory","_doc","_elementFocusedBeforeDrawerWasOpened","_mode","_disableClose","_autoFocus","openedChange","opened","_isFocusTrapEnabled","_focusTrap","_trapFocus","_restoreFocus","close","onPositionChanged","_modeChanged","focusInitialElementWhenReady","hasMovedFocus","activeEl","activeElement","HTMLElement","_openedVia","enabled","destroy","isOpen","openedVia","_opened","_enableAnimations","_openedStream","openedStart","_closedStream","closedStart","backdropClick","_doCheckSubject","_autosize","defaultAutosize","drawer","_watchDrawerToggle","_watchDrawerPosition","_watchDrawerMode","_isDrawerOpen","_start","_end","_updateContentMargins","debounceTime","ngDoCheck","_setContainerClass","throwMatDuplicatedDrawerError","_right","_left","_closeModalDrawer","disableClose","_canHaveBackdrop","_isShowingBackdrop","_width","_contentMargins","MatOptionModule","MatFormFieldModule","MatSelect","MatSelectTrigger","MAT_SELECT_SCROLL_STRATEGY_PROVIDER","MatSelectModule","matTooltipAnimations","tooltipState","SCROLL_THROTTLE_MS","MAT_TOOLTIP_SCROLL_STRATEGY","MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY_PROVIDER","MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY","MAT_TOOLTIP_DEFAULT_OPTIONS","MAT_TOOLTIP_DEFAULT_OPTIONS_FACTORY","MatTooltip","_scrollDispatcher","_ariaDescriber","_scrollStrategy","_defaultOptions","showDelay","hideDelay","_message","_manualListeners","IOS","nodeName","webkitUserSelect","userSelect","listener","addEventListener","_updatePosition","_tooltipInstance","updatePosition","removeDescription","_isTooltipVisible","_updateTooltipMessage","describe","_tooltipClass","_setTooltipClass","removeEventListener","clear","delay","_detach","_portal","TooltipComponent","afterHidden","isVisible","ESCAPE","_handleTouchend","touchendHideDelay","strategy","flexibleConnectedTo","withTransformOriginOn","withFlexibleDimensions","withViewportMargin","scrollableAncestors","getAncestorScrollContainers","withScrollableContainers","positionChanges","scrollableViewProperties","isOverlayClipped","scrollStrategy","getConfig","_getOrigin","overlay","_getOverlayPosition","withPositions","main","fallback","originPosition","isLtr","originX","originY","getMatTooltipInvalidPositionError","_invertPosition","overlayPosition","overlayX","overlayY","tooltipClass","(touchend)","ScrollDispatcher","AriaDescriber","_visibility","_closeOnInteraction","_onHide","_isHandset","_hideTimeoutId","_showTimeoutId","_animationStart","_animationDone","_handleBodyInteraction","aria-hidden","MatTooltipModule","itemsPerPageLabel","nextPageLabel","previousPageLabel","firstPageLabel","lastPageLabel","getRangeLabel","MatPaginatorIntl","MAT_PAGINATOR_INTL_PROVIDER","MAT_PAGINATOR_INTL_PROVIDER_FACTORY","PageEvent","MatPaginatorBase","_MatPaginatorBase","MatPaginator","_pageIndex","_length","_pageSizeOptions","_hidePageSize","_showFirstLastButtons","_intlChanges","_pageSize","_updateDisplayedPageSizeOptions","p","_initialized","nextPage","hasNextPage","previousPageIndex","_emitPageEvent","previousPage","hasPreviousPage","firstPage","lastPage","getNumberOfPages","numberOfPages","_changePageSize","floor","pageSizeOptions","_displayedPageSizeOptions","hidePageSize","showFirstLastButtons","MatPaginatorModule","MatProgressBarBase","_MatProgressBarMixinBase","progressbarId","MatProgressBar","_bufferValue","clamp","_primaryTransform","_bufferTransform","bufferValue","aria-valuemin","aria-valuemax","[attr.mode]","MatProgressBarModule","BASE_SIZE","MatProgressSpinnerBase","_MatProgressSpinnerMixinBase","MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS_FACTORY","INDETERMINATE_ANIMATION_TEMPLATE","platform","_defaults","_strokeWidth","strokeWidth","_fallbackAnimation","_diameter","diameter","EDGE","TRIDENT","animationClass","diameters","_attachStyleNode","viewBox","_circleRadius","PI","_strokeCircumference","styleTag","createElement","head","appendChild","sheet","insertRule","_getAnimationText","replace","Set","_isAnimating","matMenuAnimations","transformMenu","fadeInItems","MAT_MENU_PANEL","MatMenu","MAT_MENU_DEFAULT_OPTIONS","yPosition","items","MatMenuItem","lazyContent","MatMenuContent","overlapTrigger","MAT_MENU_SCROLL_STRATEGY","MAT_MENU_SCROLL_STRATEGY_FACTORY_PROVIDER","MAT_MENU_SCROLL_STRATEGY_FACTORY","MatMenuTrigger","_parentMenu","_menuItemInstance","_menuOpen","_closeSubscription","_hoverSubscription","_openedByMouse","menuOpened","onMenuOpen","menuClosed","onMenuClose","_triggersSubmenu","triggersSubmenu","menu","_checkMenu","reason","_destroyMenu","_handleHover","_cleanUpSubscriptions","toggleMenu","closeMenu","openMenu","menuData","_menuClosingActions","_initMenu","_startAnimation","menuOpen","_resetAnimation","_resetMenu","parentMenu","_setMenuElevation","_setIsMenuOpen","focusFirstItem","setElevation","depth","_highlighted","throwMatMenuMissingError","_getOverlayConfig","_subscribeToPositions","_getPosition","backdropClass","setPositionClasses","posX","connectionPair","posY","xPosition","originFallbackX","_b","overlayFallbackY","_c","originFallbackY","_d","overlayFallbackX","offsetY","backdrop","parentClose","hover","_hovered","_handleMousedown","isFakeMousedownFromScreenReader","asapScheduler","aria-haspopup","(mousedown)","Self","_deprecatedMatMenuTriggerFor","MatMenuModule","matSelectAnimations","transformPanel","minWidth","group","fadeInContent","MAT_SELECT_SCROLL_STRATEGY","MAT_SELECT_SCROLL_STRATEGY_PROVIDER_FACTORY","MatSelectChange","MatSelectBase","_defaultErrorStateMatcher","_parentForm","_parentFormGroup","ngControl","_MatSelectMixinBase","mixinErrorState","_parentFormField","_scrollStrategyFactory","_panelOpen","_scrollTop","_multiple","_compareWith","o1","o2","_uid","_destroy","_triggerFontSize","_onChange","_onTouched","_optionIds","_transformOrigin","_panelDoneAnimating","_panelDoneAnimatingStream","_offsetY","_positions","_disableOptionCentering","focused","controlType","optionSelectionChanges","defer","options","option","onSelectionChange","onStable","switchMap","o","selectionChange","valueChange","valueAccessor","_placeholder","stateChanges","_selectionModel","getMatSelectDynamicMultipleError","getMatSelectNonFunctionValueError","_initializeSelection","_id","SelectionModel","multiple","distinctUntilChanged","panelOpen","overlayDir","offsetX","_initKeyManager","_resetOptions","updateErrorState","_triggerRect","getComputedStyle","_keyManager","withHorizontalOrientation","_calculateOverlayPosition","_highlightCorrectOption","fontSize","_isRtl","_setSelectionByValue","empty","selectedOptions","viewValue","reverse","join","_handleOpenKeydown","_handleClosedKeydown","isArrowKey","altKey","onKeydown","manager","setFirstItemActive","setLastItemActive","activeItem","previouslyFocusedIndex","activeItemIndex","shiftKey","_selectViaInteraction","_onFadeInDone","_onAttached","positionChange","_calculateOverlayOffsetX","panel","scrollTop","_getPanelTheme","color","isEmpty","isUserInput","getMatSelectNonArrayValueError","_clearSelection","currentValue","_selectValue","_sortValues","correspondingOption","setActiveItem","error","console","warn","select","skip","deselect","ActiveDescendantKeyManager","withTypeAhead","withVerticalOrientation","tabOut","_scrollActiveOptionIntoView","changedOrDestroyed","_onSelect","_setOptionIds","wasSelected","isSelected","_propagateChanges","fallbackValue","valueToEmit","activeOptionIndex","labelCount","_countGroupLabelsBeforeOption","optionGroups","_getOptionScrollPosition","_getItemHeight","_getOptionIndex","result","current","itemHeight","_getItemCount","panelHeight","scrollContainerHeight","maxScroll","selectedOptionOffset","scrollBuffer","_calculateOverlayScroll","_calculateOverlayOffsetY","_checkOverlayWithinViewport","optionOffsetFromScrollTop","halfOptionHeight","optimalScrollPosition","placeholder","_getAriaActiveDescendant","overlayRect","viewportSize","getViewportSize","paddingWidth","SELECT_MULTIPLE_PANEL_PADDING_X","first","leftOverflow","rightOverflow","optionOffsetFromPanelTop","optionHeightAdjustment","maxOptionsDisplayed","firstDisplayedIndex","selectedDisplayIndex","partialItemHeight","topSpaceAvailable","bottomSpaceAvailable","panelHeightTop","abs","totalPanelHeight","panelHeightBottom","_adjustPanelUp","_adjustPanelDown","_getOriginBasedOnOption","distanceBelowViewport","distanceAboveViewport","setDescribedByIds","ids","_ariaDescribedby","onContainerClick","[attr.tabindex]","[attr.aria-label]","[attr.aria-labelledby]","[attr.aria-required]","[attr.aria-invalid]","[attr.aria-owns]","[attr.aria-multiselectable]","[attr.aria-describedby]","[attr.aria-activedescendant]","[class.mat-select-disabled]","[class.mat-select-invalid]","[class.mat-select-required]","MatFormFieldControl","MAT_OPTION_PARENT_COMPONENT","NgForm","FormGroupDirective","MatFormField","NgControl","CdkConnectedOverlay","MatOption","MatOptgroup","customTrigger","disableOptionCentering","compareWith","errorStateMatcher","MatSelectionList","MAT_SELECTION_LIST_VALUE_ACCESSOR","MatListOption","_MatSelectionListMixinBase","MatLineModule","MatPseudoCheckboxModule","MatList","MatNavList","MatListItem","MatListAvatarCssMatStyler","MatListIconCssMatStyler","MatListSubheaderCssMatStyler","MatDividerModule","MatListModule","_template","_componentFactoryResolver","_appRef","context","_outlet","DomPortalOutlet","insertBefore","outletElement","isAttached","ApplicationRef","sequence","MatMenuItemBase","_MatMenuItemMixinBase","addItem","removeItem","_checkDisabled","_handleMouseEnter","getLabel","textNodeType","TEXT_NODE","output","length_1","[class.mat-menu-item-highlighted]","[class.mat-menu-item-submenu-trigger]","[attr.disabled]","MAT_MENU_DEFAULT_OPTIONS_FACTORY","_xPosition","_yPosition","_items","_itemChanges","_tabSubscription","_classList","_panelAnimationState","_overlapTrigger","_hasBackdrop","throwMatMenuInvalidPositionX","throwMatMenuInvalidPositionY","classes","className","FocusKeyManager","withWrap","item","setFocusOrigin","resetActiveItem","newElevation","customElevation","c","_previousElevation","_onAnimationDone","_MatListMixinBase","_navList","_isNavList","_handleFocus","_handleBlur","[class.mat-list-item-avatar]","[class.mat-list-item-with-avatar]","MatSelectionListBase","MatListOptionBase","_MatListOptionMixinBase","MatSelectionListChange","selectionList","_hasFocus","checkboxPosition","_setSelected","_reportValueChange","MatLineSetter","_lines","_removeOptionFromList","_text","_setFocusedOption","tabindex","[class.mat-list-item-disabled]","[class.mat-list-item-focus]","[attr.aria-selected]","skipPredicate","_tempValues","_setOptionsFromValues","_modelChanges","_i","added","removed","optionIndex","setNextItemActive","previousFocusIndex","_toggleSelectOnFocusedOption","_getSelectedOptionValues","values","Boolean","focusedOption","focusedIndex","hasChanged","svgElement","_svgElementFromString","svgText","MatIconRegistry","_createSvgElementForSingleIcon","responseText","svg","_setSvgAttributes","_extractSvgIconFromSet","iconSet","iconName","iconSource","querySelector","iconElement","cloneNode","removeAttribute","_toSvgElement","str","div","innerHTML","ELEMENT_NODE","setAttribute","_fetchUrl","safeUrl","_httpClient","getMatIconNoHttpProviderError","url","_sanitizer","sanitize","SecurityContext","RESOURCE_URL","getMatIconFailedToSanitizeUrlError","inProgressFetch","_inProgressUrlFetches","req","responseType","finalize","share","_addSvgIconConfig","namespace","_svgIconConfigs","iconKey","_addSvgIconSetConfig","configNamespace","_iconSetConfigs","HttpClient","DomSanitizer","ICON_REGISTRY_PROVIDER","ICON_REGISTRY_PROVIDER_FACTORY","MatIconBase","_MatIconMixinBase","MatIcon","_iconRegistry","ariaHidden","_inline","inline","_fontSet","_cleanupFontValue","_fontIcon","_splitIconName","parts","svgIcon","getNamedSvgIcon","_setSvgElement","err","log","_clearSvgElement","_usingFontIcon","_updateFontIconClasses","layoutElement","childCount","removeChild","elem","fontSetClass","fontSet","classNameForFontAlias","getDefaultFontSetClass","_previousFontSetClass","fontIcon","_previousFontIconClass","[class.mat-icon-inline]","MatListBase","MatListItemBase","_MatListItemMixinBase","MatDatepickerInput","_datepicker","_datepickerSubscription","_selectedChanged","_cvaOnChange","dateInput","MatDatepickerInputEvent","dateChange","_localeSubscription","_valueChange","_disabledChange","registerOnValidatorChange","_validatorOnChange","validate","_validator","getPopupConnectionElementRef","getConnectedOverlayOrigin","_formField","_onInput","date","_dateAdapter","parse","_dateFormats","_lastValueValid","isValid","_getValidDateOrNull","sameDate","_getThemePalette","_formatValue","format","display","isDateInstance","MAT_DATEPICKER_VALUE_ACCESSOR","MAT_DATEPICKER_VALIDATORS","MAT_INPUT_VALUE_ACCESSOR","[attr.aria-haspopup]","[attr.min]","[attr.max]","[disabled]","(input)","(change)","DateAdapter","MAT_DATE_FORMATS","matDatepicker","matDatepickerFilter","MatDatepickerToggleIcon","MatDatepickerToggle","datepicker","_watchStateChanges","datepickerDisabled","inputDisabled","_datepickerInput","datepickerToggled","openedStream","closedStream","[class.mat-datepicker-toggle-active]","[class.mat-accent]","[class.mat-warn]","_customIcon","MatDialogModule","A11yModule","MatCalendar","MatCalendarBody","MatDatepicker","MatDatepickerContent","MatMonthView","MatYearView","MatMultiYearView","MatCalendarHeader","MatDatepickerIntl","MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY_PROVIDER","MatDatepickerModule","_inset","MatDivider","[class.mat-divider-vertical]","[class.mat-divider-inset]","_hideToggle","displayMode","MatAccordion","hideToggle","CdkAccordion","matExpansionAnimations","indicatorRotate","expansionHeaderHeight","params","collapsedHeight","expandedHeight","bodyExpansion","MatExpansionPanelContent","uniqueId","MatExpansionPanel","accordion","_uniqueSelectionDispatcher","_inputChanges","_headerId","_getHideToggle","_hasSpacing","expanded","_getExpandedState","_lazyContent","_bodyAnimation","phaseName","outputs","[class.mat-expanded]","[class.mat-expansion-panel-spacing]","MatExpansionPanelActionRow","MatExpansionPanelHeader","_parentChangeSubscription","_toggle","_isExpanded","_getPanelId","_showToggle","_keydown","[attr.aria-controls]","[@expansionHeight]","MatExpansionPanelDescription","MatExpansionPanelTitle","CdkAccordionModule","MatExpansionModule","MatGridTile","_rowspan","_colspan","coerceToNumber","_setStyle","property","MatGridTileText","MatGridAvatarCssMatStyler","MatGridTileHeaderCssMatStyler","MatGridTileFooterCssMatStyler","TileCoordinator","numColumns","tiles","columnIndex","rowIndex","tracker","fill","tile","_trackTile","lastRowMax","rowCount","gapStartIndex","_findMatchingGap","colspan","_markTilePosition","TilePosition","tileCols","gapEndIndex","_nextRow","_findGapEndIndex","rowspan","row","col","TileStyler","_rows","init","gutterSize","cols","_gutterSize","normalizeUnits","_cols","getBaseTileSize","sizePercent","gutterFraction","getTilePosition","baseSize","calc","getTileSize","span","setStyle","colIndex","percentWidthPerTile","gutterWidthFractionPerTile","setColStyles","setRowStyles","percentWidth","gutterWidth","baseTileWidth","side","getGutterSpan","getTileSpan","tileHeight","getComputedHeight","FixedTileStyler","fixedRowHeight","reset","list","_setListStyle","_tiles","RatioTileStyler","_parseRatio","percentHeightPerTile","rowHeightRatio","baseTileHeight","ratioParts","FitTileStyler","gutterHeightPerTile","MatGridList","_gutter","coerceToString","_rowHeight","_setTileStyler","_checkCols","_checkRowHeight","_layoutTiles","rowHeight","_tileStyler","MatGridListModule","SvgIconConfig","_cachedIconsByUrl","_fontCssClassesByAlias","_defaultFontSetClass","addSvgIcon","addSvgIconInNamespace","addSvgIconLiteral","literal","addSvgIconLiteralInNamespace","sanitizedLiteral","HTML","getMatIconFailedToSanitizeLiteralError","addSvgIconSet","addSvgIconSetInNamespace","addSvgIconSetLiteral","addSvgIconSetLiteralInNamespace","registerFontClassAlias","alias","setDefaultFontSetClass","getSvgIconFromUrl","cachedIcon","cloneSvg","_loadSvgIconFromConfig","tap","_getSvgFromConfig","iconSetConfigs","_getSvgFromIconSetConfigs","observableThrow","getMatIconNameNotFoundError","namedIcon","_extractIconWithNameFromAnySet","iconSetFetchRequests","iconSetConfig","_loadSvgIconSetFromConfig","catchError","forkJoin","foundIcon","activeDate","addCalendarYears","_activeDate","yearsPerPage","_yearSelected","getYear","_focusActiveCell","_getActiveCell","_matCalendarBody","_createCellForYear","year","yearName","getYearName","createDate","MatCalendarCell","_shouldEnableYear","maxDate","minDate","dateFilter","firstOfYear","addCalendarDays","selectedChange","yearSelected","monthSelected","createMissingDateImplError","today","oldActiveDate","validDate","deserialize","clampDate","_init","_selectedMonth","_getMonthInCurrentYear","_minDate","_maxDate","_monthSelected","month","normalizedDate","daysInMonth","getNumDaysInMonth","getDate","_handleCalendarBodyKeydown","addCalendarMonths","getMonth","_todayMonth","_yearLabel","monthNames","getMonthNames","_months","_createCellForMonth","monthName","monthYearA11yLabel","toLocaleUpperCase","_shouldEnableMonth","activeYear","_isYearAndMonthAfterMaxDate","_isYearAndMonthBeforeMinDate","firstOfMonth","maxYear","maxMonth","minYear","minMonth","calendar","currentView","monthYearLabel","switchToMultiYearViewLabel","switchToMonthViewLabel","prevMonthLabel","prevYearLabel","multi-year","prevMultiYearLabel","nextMonthLabel","nextYearLabel","nextMultiYearLabel","currentPeriodClicked","previousClicked","nextClicked","previousEnabled","_isSameView","nextEnabled","date1","date2","_moveFocusOnNextTick","startAt","_currentView","startView","focusActiveCell","firstChange","view","_getCurrentViewComponent","headerComponent","_userSelection","monthView","yearView","multiYearView","matDatepickerAnimations","fadeInCalendar","datepickerUid","MAT_DATEPICKER_SCROLL_STRATEGY","MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY","MatDatepickerContentBase","_MatDatepickerContentMixinBase","_calendar","[@transformPanel]","[class.mat-datepicker-content-touch]","_inputSubscription","_popupRef","_popupComponentRef","_focusedElementBeforeOpen","touchUi","_openAsDialog","_openAsPopup","_dialogRef","_calendarPortal","completeClose","afterClosed","componentInstance","_setColor","_createPopup","keydownEvents","withPush","MatDialog","calendarHeaderComponent","NG_VALIDATORS","target","targetElement","_parseValidator","matDatepickerParse","text","_minValidator","controlValue","compareDate","matDatepickerMin","actual","_maxValidator","matDatepickerMax","_filterValidator","_dateFilter","Validators","compose","localeChanges","registerDatepicker","_registerInput","oldDate","[@slideDialog]","(@slideDialog.start)","(@slideDialog.done)","MatDialogConfig","MatDialogContainer","MatDialogRef","_containerInstance","location","_afterOpen","_afterClosed","_beforeClose","_locationChanges","_animationStateChanged","_result","closeOnNavigation","dialogResult","detachBackdrop","_startExitAnimation","afterOpen","beforeClose","_getPositionStrategy","centerVertically","updateSize","MAT_DIALOG_DATA","MAT_DIALOG_DEFAULT_OPTIONS","MAT_DIALOG_SCROLL_STRATEGY","MAT_DIALOG_SCROLL_STRATEGY_PROVIDER","MAT_DIALOG_SCROLL_STRATEGY_PROVIDER_FACTORY","_location","_parentDialog","_overlayContainer","_openDialogsAtThisLevel","_afterAllClosedAtThisLevel","_afterOpenAtThisLevel","_ariaHiddenElements","afterAllClosed","openDialogs","_afterAllClosed","componentOrTemplateRef","_applyConfigDefaults","getDialogById","dialogContainer","_attachDialogContainer","dialogRef","_attachDialogContent","_hideNonDialogContentFromAssistiveTechnology","_removeOpenDialog","closeAll","dialog","dialogConfig","minHeight","maxWidth","maxHeight","injectionTokens","previousValue","overlayContainer","getContainerElement","parentElement","siblings","sibling","hasAttribute","getAttribute","Location","OverlayContainer","dialogElementUid","MatDialogClose","_dialog","getClosestDialog","proxiedChange","_matDialogClose","MatDialogTitle","_ariaLabelledBy","MatDialogContent","MatDialogActions","MatTextareaAutosize","minRows","maxRows","rows","matAutosizeMinRows","matAutosizeMaxRows","matAutosize","matTextareaAutosize","CdkTextareaAutosize","MAT_INPUT_INVALID_TYPES","MatInputBase","_MatInputMixinBase","MatInput","inputValueAccessor","_autofillMonitor","ngZone","_isServer","autofilled","_type","_readonly","_neverEmptyInputTypes","t","getSupportedInputTypes","_inputValueAccessor","_previousNativeValue","el","selectionStart","selectionEnd","setSelectionRange","_validateType","_isTextarea","isAutofilled","_dirtyCheckNativeValue","isFocused","readonly","getMatInputUnsupportedTypeError","_isNeverEmpty","_isBadInput","validity","badInput","[class.mat-input-server]","[attr.placeholder]","[required]","[readonly]","AutofillMonitor","TextFieldModule","MatInputModule","calendarLabel","openCalendarLabel","displayValue","numCols","allowDisabledSelection","activeCell","cellAspectRatio","selectedValueChange","_cellClicked","cell","_isActiveCell","cellNumber","_firstRowOffset","attr.aria-readonly","todayValue","selectedValue","labelMinRequiredCells","activeDateChange","firstDayOfWeek","getFirstDayOfWeek","narrowWeekdays","getDayOfWeekNames","longWeekdays","weekdays","long","narrow","_weekdays","_hasSameMonthAndYear","_selectedDate","_getDateInCurrentMonth","_dateSelected","selectedYear","selectedMonth","selectedDate","_todayDate","_monthLabel","_firstWeekOffset","getDayOfWeek","_createWeekCells","dateNames","getDateNames","_weeks","_shouldEnableDate","dateA11yLabel","d1","d2","_selectedYear","_todayYear","activeOffset","_years","[class.mat-checkbox-indeterminate]","[class.mat-checkbox-checked]","[class.mat-checkbox-disabled]","[class.mat-checkbox-label-before]","MAT_CHECKBOX_CONTROL_VALUE_ACCESSOR","MAT_CHECKBOX_CLICK_ACTION","MatCheckbox","indeterminateChange","ripple","indeterminate","MAT_CHECKBOX_REQUIRED_VALIDATOR","MatCheckboxRequiredValidator","[attr.required]","CheckboxRequiredValidator","MatCheckboxModule","MatChipSelectionChange","MatChipBase","_MatChipMixinBase","CHIP_ATTRIBUTE_NAMES","MatChipAvatar","MatChipTrailingIcon","MatChip","chipListSelectable","_selectable","_removable","destroyed","_addHostClassName","_chipRipple","RippleRenderer","selectable","CHIP_ATTRIBUTE_NAMES_1","attr","tagName","chip","_removeTriggerEvents","selectViaInteraction","toggleSelected","removable","DELETE","BACKSPACE","_blur","[class.mat-chip-selected]","[class.mat-chip-with-avatar]","[class.mat-chip-with-trailing-icon]","[class.mat-chip-disabled]","avatar","trailingIcon","removeIcon","MatChipRemove","_parentChip","MAT_CHIPS_DEFAULT_OPTIONS","MatChipListBase","_MatChipListMixinBase","MatChipListChange","MatChipList","_lastDestroyedIndex","_chipSet","_tabOutSubscription","_tabIndex","_userTabIndex","ariaOrientation","_chipInput","chips","_changeSubscription","_resetChips","_updateTabIndex","_updateFocusForDestroyedChips","_chipRemoveSubscription","_dropSubscriptions","registerInput","inputElement","_focusInput","_isInputEmpty","_updateKeyManager","chipIndex","chipsArray","newFocusIndex","focusChip","correspondingChip","_markAsTouched","_listenToChipsFocus","_listenToChipsSelection","_listenToChipsRemoved","_chipFocusSubscription","_chipBlurSubscription","_chipSelectionSubscription","chipSelectionChanges","chipFocusChanges","updateActiveItemIndex","chipBlurChanges","chipRemoveChanges","[class.mat-chip-list-disabled]","[class.mat-chip-list-invalid]","[class.mat-chip-list-required]","MatChipInput","_addOnBlur","separatorKeyCodes","chipEnd","_chipList","_emitChipEnd","addOnBlur","_focus","chipList","CHIP_DECLARATIONS","ɵ0","useValue","MatChipsModule","ariaDescribedBy","autoFocus","matDialogAnimations","slideDialog","_elementFocusedBeforeDialogWasOpened","_state","throwMatDialogContentAlreadyAttachedError","_savePreviouslyFocusedElement","toFocus","_onAnimationStart","MatAnchor","MatButton","MatButtonToggleGroupBase","_MatButtonToggleGroupMixinBase","MAT_BUTTON_TOGGLE_GROUP_VALUE_ACCESSOR","MatButtonToggleGroup","MatButtonToggleGroupMultiple","_uniqueIdCounter","MatButtonToggleChange","_buttonToggles","_syncButtonToggle","_isSelected","_isPrechecked","_rawValue","[class.mat-button-toggle-vertical]","MatButtonToggle","MatButtonToggleBase","_MatButtonToggleMixinBase","toggleGroup","_isSingleSelector","buttonToggleGroup","[class.mat-button-toggle-standalone]","[class.mat-button-toggle-checked]","[class.mat-button-toggle-disabled]","MatButtonToggleModule","MatCardContent","MatCardTitle","MatCardSubtitle","align","[class.mat-card-actions-align-end]","MatCardActions","MatCardFooter","MatCardImage","MatCardSmImage","MatCardMdImage","MatCardLgImage","MatCardXlImage","MatCardAvatar","MatCard","MatCardHeader","MatCardTitleGroup","MatCardModule","MatCheckboxChange","MatCheckboxBase","_MatCheckboxMixinBase","_clickAction","_currentAnimationClass","_currentCheckState","TransitionCheckState","Init","_indeterminate","changed","_transitionCheckState","Indeterminate","Checked","Unchecked","_getAriaChecked","newState","oldState","_getAnimationClassForCheckStateTransition","_onInteractionEvent","animSuffix","MatAutocompleteTrigger","_viewportSubscription","_componentDestroyed","_destroyPanel","_closeKeyEventStream","_overlayAttached","autocomplete","showPanel","openPanel","_attachOverlay","_floatLabel","closePanel","_resetLabel","_isOpen","_closingActionsSubscription","optionSelections","_outsideClickStream","MatOptionSelectionChange","fromEvent","clickTarget","formField","_setTriggerValue","_resetActiveItem","activeOption","prevActiveItem","TAB","_canOpen","_scrollToOption","_handleInput","_previousValue","shouldAnimate","floatLabel","_animateAndLockLabel","_manuallyFloatingLabel","newScrollPosition","_getScrollTop","_setScrollTop","_subscribeToClosingActions","firstStable","_zone","optionChanges","_positionStrategy","reapplyLastPosition","_setVisibility","panelClosingActions","_setValueAndClose","toDisplay","inputValue","_control","_clearPreviousSelectedOption","_emitSelectEvent","getMatAutocompleteMissingPanelError","_getHostWidth","wasOpen","_getConnectedElement","connectedTo","autoActiveFirstOption","readOnly","_autocompleteDisabled","[attr.aria-autocomplete]","(focusin)","MAT_AUTOCOMPLETE_VALUE_ACCESSOR","MAT_AUTOCOMPLETE_SCROLL_STRATEGY","Host","autocompleteDisabled","MatAutocomplete","MatAutocompleteOrigin","MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY_PROVIDER","MatAutocompleteModule","MatBadge","_color","_overlap","val","_updateTextContent","_description","newDescription","_updateHostAriaDescription","_hidden","isAbove","isAfter","description","_badgeElement","_createBadgeElement","badgeElement","oldDescription","colorPalette","[class.mat-badge-overlap]","[class.mat-badge-above]","[class.mat-badge-below]","[class.mat-badge-before]","[class.mat-badge-after]","[class.mat-badge-small]","[class.mat-badge-medium]","[class.mat-badge-large]","[class.mat-badge-hidden]","overlap","hidden","MatBadgeModule","MAT_BOTTOM_SHEET_DATA","MatBottomSheetConfig","matBottomSheetAnimations","bottomSheetState","MatBottomSheetContainer","breakpointObserver","bottomSheetConfig","_elementFocusedBeforeOpened","_breakpointSubscription","Medium","Large","XLarge","_toggleClass","isMatched","_validatePortalAttached","_setPanelClass","(@state.start)","FocusTrapFactory","MatBottomSheetModule","MatBottomSheetRef","_keydownEvents","MatBottomSheet","_parentBottomSheet","_bottomSheetRefAtThisLevel","_openedBottomSheetRef","_attachContainer","ref","bottomSheetRef","scrollStrategies","block","DEFAULT_ROUND_BUTTON_COLOR","DEFAULT_FLAT_BUTTON_COLOR","BUTTON_HOST_ATTRIBUTES","MatButtonBase","_MatButtonMixinBase","isRoundButton","_hasHostAttributes","isIconButton","BUTTON_HOST_ATTRIBUTES_1","attributes","attribute","stopImmediatePropagation","_emitSelectionChangeEvent","setActiveStyles","_active","setInactiveStyles","ngAfterViewChecked","_mostRecentViewValue","[class.mat-selected]","[class.mat-option-multiple]","[class.mat-active]","[class.mat-option-disabled]","MAT_LABEL_GLOBAL_OPTIONS","MatError","matFormFieldAnimations","transitionMessages","[class.mat-right]","MatHint","MatLabel","MatPlaceholder","MatPrefix","MatSuffix","MatFormFieldBase","_MatFormFieldMixinBase","MAT_FORM_FIELD_DEFAULT_OPTIONS","labelOptions","_showAlwaysAnimate","_subscriptAnimationState","_hintLabel","_hintLabelId","_outlineGapWidth","_outlineGapStart","_initialGapCalculated","_labelOptions","float","_animationsEnabled","_appearance","appearance","_hideRequiredMarker","_processHints","_connectionContainerRef","_validateControlChild","_validatePlaceholders","_syncDescribedByIds","valueChanges","_prefixChildren","_suffixChildren","_hintChildren","_errorChildren","updateOutlineGap","_shouldForward","prop","_hasPlaceholder","_placeholderChild","_hasLabel","_labelChild","_shouldLabelFloat","_canLabelFloat","shouldLabelFloat","_shouldAlwaysFloat","_hideControlPlaceholder","_hasFloatingLabel","_getDisplayedMessages","errorState","_label","getMatFormFieldPlaceholderConflictError","_validateHints","startHint_1","endHint_1","hint","hintLabel","getMatFormFieldDuplicatedHintError","startHint","endHint","getMatFormFieldMissingControlError","documentElement","containerStart","_getStartEnd","labelStart","labelWidth","outlineGapPadding","rect","[class.mat-form-field-appearance-standard]","[class.mat-form-field-appearance-fill]","[class.mat-form-field-appearance-outline]","[class.mat-form-field-appearance-legacy]","[class.mat-form-field-invalid]","[class.mat-form-field-can-float]","[class.mat-form-field-should-float]","[class.mat-form-field-hide-placeholder]","[class.mat-form-field-disabled]","[class.mat-form-field-autofilled]","[class.mat-focused]","[class.ng-untouched]","[class.ng-touched]","[class.ng-pristine]","[class.ng-dirty]","[class.ng-valid]","[class.ng-invalid]","[class.ng-pending]","hideRequiredMarker","underlineRef","_inputContainerRef","_uniqueAutocompleteIdCounter","MatAutocompleteSelectedEvent","MatAutocompleteBase","_MatAutocompleteMixinBase","MAT_AUTOCOMPLETE_DEFAULT_OPTIONS","MAT_AUTOCOMPLETE_DEFAULT_OPTIONS_FACTORY","optionSelected","_autoActiveFirstOption","MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY","__extends","d","__","constructor","extendStatics","MATERIAL_SANITY_CHECKS_FACTORY","base","class_1","defaultColor","_disableRipple","defaultTabIndex","matcher","_pendingSubscribers","Observable","subscriber","_notifySubscriber","MAT_DATE_LOCALE_FACTORY","inject","LOCALE_ID","range","valueFunction","valuesArray","enforceStyleRecalculation","window","getPropertyValue","distanceToFurthestCorner","distX","distY","sqrt","optionsArray","groups","groupCounter","optionOffset","currentScrollPosition","optionHeight","reposition","MAT_DIALOG_SCROLL_STRATEGY_FACTORY","defaultOptions","provider","exp","match","parentRegistry","httpClient","sanitizer","scrollThrottle","parentIntl","sortOrder","setPrototypeOf","__proto__","__assign","assign","s","n","SHARP_CURVE","MATERIAL_SANITY_CHECKS","_sanityChecksEnabled","_hasDoneGlobalChecks","_hasCheckedHammer","_window","_areChecksEnabled","_checkDoctypeIsDefined","_checkThemeIsPresent","_isTestEnv","doctype","testElement","body","computedStyle","_checkHammerIsAvailable","BidiModule","MAT_DATE_LOCALE","MAT_DATE_LOCALE_PROVIDER","_localeChanges","setLocale","locale","second","firstValid","secondValid","SUPPORTS_INTL_API","Intl","DEFAULT_MONTH_NAMES","short","String","DEFAULT_DATE_NAMES","DEFAULT_DAY_OF_WEEK_NAMES","ISO_8601_REGEX","NativeDateAdapter","matDateLocale","useUtcForDisplay","_clampDate","getFullYear","getDay","dtf_1","DateTimeFormat","timeZone","_stripDirectionalityCharacters","_format","Date","dtf_2","day","dtf_3","weekday","dtf","_createDateWithOverflow","clone","displayFormat","setFullYear","toDateString","years","months","newDate","days","toIso8601","getUTCFullYear","_2digit","getUTCMonth","getUTCDate","test","isNaN","getTime","NaN","UTC","getHours","getMinutes","getSeconds","getMilliseconds","MAT_NATIVE_DATE_FORMATS","NativeDateModule","MatNativeDateModule","ShowOnDirtyErrorStateMatcher","dirty","submitted","touched","MAT_HAMMER_OPTIONS","_hammerOptions","commonModule","_hammer","Hammer","events","buildHammer","mc","pan","Pan","swipe","Swipe","press","Press","slide","_createRecognizer","threshold","longpress","time","recognizeWith","inheritances","recognizer","HammerGestureConfig","MatLine","_setLineClass","count","_resetClasses","_setClass","isAdd","RippleRef","_renderer","RippleState","HIDDEN","fadeOutRipple","defaultRippleAnimationConfig","enterDuration","exitDuration","ignoreMouseEventsTimeout","_target","_isPointerDown","_triggerEvents","_activeRipples","_eventOptions","supportsPassiveEventListeners","passive","onMousedown","isSyntheticEvent","_lastTouchStartEvent","now","rippleDisabled","fadeInRipple","onTouchStart","touches","onPointerUp","VISIBLE","FADING_IN","_containerElement","containerRect","_containerRect","animationConfig","centered","radius","transitionDuration","rippleRef","_mostRecentTransientRipple","runTimeoutOutsideZone","isMostRecentTransientRipple","wasActive","rippleEl","FADING_OUT","fadeOutAll","_triggerElement","_globalOptions","_rippleRenderer","_setupTriggerEventsIfEnabled","_trigger","configOrX","[class.mat-ripple-unbounded]","unbounded","[class.mat-pseudo-checkbox-indeterminate]","[class.mat-pseudo-checkbox-checked]","[class.mat-pseudo-checkbox-disabled]","MatPseudoCheckbox","MatOptgroupBase","_MatOptgroupMixinBase","_uniqueOptgroupIdCounter","_labelId","[class.mat-optgroup-disabled]","_parent"],"mappings":"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"}