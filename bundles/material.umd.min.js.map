{"version":3,"file":"material.umd.min.js","sources":["../../src/lib/tabs/tab-nav-bar/tab-nav-bar.ts","../../src/lib/tabs/tabs-module.ts","../../src/lib/toolbar/toolbar.ts","../../src/lib/toolbar/toolbar-module.ts","../../src/lib/tree/outlet.ts","../../src/lib/tree/node.ts","../../src/lib/tree/padding.ts","../../src/lib/tree/tree.ts","../../src/lib/tree/toggle.ts","../../src/lib/tree/tree-module.ts","../../src/lib/tree/data-source/flat-data-source.ts","../../src/lib/tree/data-source/nested-data-source.ts","../../src/lib/version.ts","../../src/lib/autocomplete/autocomplete-trigger.ts","../../src/lib/core/testing/month-constants.ts","../../src/lib/expansion/expansion-animations.ts","../../src/lib/select/select.ts","../../src/lib/tooltip/tooltip.ts","../../src/lib/table/row.ts","../../src/lib/table/table-module.ts","../../src/lib/table/table-data-source.ts","../../src/lib/tabs/ink-bar.ts","../../src/lib/tabs/tab-content.ts","../../src/lib/tabs/tab-label.ts","../../src/lib/tabs/tab.ts","../../src/lib/tabs/tabs-animations.ts","../../src/lib/tabs/tab-body.ts","../../src/lib/tabs/tab-label-wrapper.ts","../../src/lib/tabs/tab-header.ts","../../src/lib/tabs/tab-group.ts","../../src/lib/sort/sort-animations.ts","../../src/lib/sort/sort-header-intl.ts","../../src/lib/sort/sort-header.ts","../../src/lib/sort/sort-module.ts","../../src/lib/stepper/step-label.ts","../../src/lib/stepper/stepper-intl.ts","../../src/lib/stepper/step-header.ts","../../src/lib/stepper/stepper-animations.ts","../../src/lib/stepper/stepper-icon.ts","../../src/lib/stepper/stepper.ts","../../src/lib/stepper/stepper-button.ts","../../src/lib/stepper/stepper-module.ts","../../src/lib/table/table.ts","../../src/lib/table/cell.ts","../../src/lib/slider/slider.ts","../../src/lib/slider/slider-module.ts","../../src/lib/snack-bar/snack-bar-ref.ts","../../src/lib/snack-bar/snack-bar-config.ts","../../src/lib/snack-bar/simple-snack-bar.ts","../../src/lib/snack-bar/snack-bar-animations.ts","../../src/lib/snack-bar/snack-bar-container.ts","../../src/lib/snack-bar/snack-bar-module.ts","../../src/lib/snack-bar/snack-bar.ts","../../src/lib/sort/sort.ts","../../src/lib/sidenav/drawer.ts","../../src/lib/sidenav/sidenav.ts","../../src/lib/sidenav/sidenav-module.ts","../../src/lib/slide-toggle/slide-toggle-config.ts","../../src/lib/slide-toggle/slide-toggle.ts","../../src/lib/slide-toggle/slide-toggle-module.ts","../../src/lib/progress-bar/progress-bar.ts","../../src/lib/progress-bar/progress-bar-module.ts","../../src/lib/progress-spinner/progress-spinner.ts","../../src/lib/progress-spinner/progress-spinner-module.ts","../../src/lib/radio/radio.ts","../../src/lib/radio/radio-module.ts","../../src/lib/sidenav/drawer-animations.ts","../../src/lib/select/select-module.ts","../../src/lib/tooltip/tooltip-animations.ts","../../src/lib/tooltip/tooltip-module.ts","../../src/lib/paginator/paginator-intl.ts","../../src/lib/paginator/paginator.ts","../../src/lib/paginator/paginator-module.ts","../../src/lib/menu/menu-content.ts","../../src/lib/menu/menu-animations.ts","../../src/lib/menu/menu-panel.ts","../../src/lib/menu/menu-item.ts","../../src/lib/menu/menu-directive.ts","../../src/lib/menu/menu-trigger.ts","../../src/lib/menu/menu-module.ts","../../src/lib/select/select-animations.ts","../../src/lib/list/selection-list.ts","../../src/lib/list/list-module.ts","../../src/lib/list/list.ts","../../src/lib/grid-list/grid-tile.ts","../../src/lib/grid-list/tile-coordinator.ts","../../src/lib/grid-list/tile-styler.ts","../../src/lib/grid-list/grid-list.ts","../../src/lib/grid-list/grid-list-module.ts","../../src/lib/icon/icon-registry.ts","../../src/lib/icon/icon.ts","../../src/lib/icon/icon-module.ts","../../src/lib/datepicker/datepicker.ts","../../src/lib/datepicker/datepicker-input.ts","../../src/lib/datepicker/datepicker-toggle.ts","../../src/lib/datepicker/datepicker-module.ts","../../src/lib/divider/divider.ts","../../src/lib/divider/divider-module.ts","../../src/lib/expansion/accordion-base.ts","../../src/lib/expansion/expansion-panel-content.ts","../../src/lib/expansion/expansion-panel.ts","../../src/lib/expansion/expansion-panel-header.ts","../../src/lib/expansion/accordion.ts","../../src/lib/expansion/expansion-module.ts","../../src/lib/grid-list/grid-list-base.ts","../../src/lib/datepicker/calendar-body.ts","../../src/lib/datepicker/month-view.ts","../../src/lib/datepicker/multi-year-view.ts","../../src/lib/datepicker/year-view.ts","../../src/lib/datepicker/calendar.ts","../../src/lib/datepicker/datepicker-animations.ts","../../src/lib/chips/chip-list.ts","../../src/lib/chips/chip-input.ts","../../src/lib/chips/chips-module.ts","../../src/lib/dialog/dialog-config.ts","../../src/lib/dialog/dialog-animations.ts","../../src/lib/dialog/dialog-container.ts","../../src/lib/dialog/dialog-ref.ts","../../src/lib/dialog/dialog.ts","../../src/lib/dialog/dialog-content-directives.ts","../../src/lib/dialog/dialog-module.ts","../../src/lib/input/autosize.ts","../../src/lib/input/input-value-accessor.ts","../../src/lib/input/input.ts","../../src/lib/input/input-module.ts","../../src/lib/datepicker/datepicker-intl.ts","../../src/lib/checkbox/checkbox.ts","../../src/lib/checkbox/checkbox-required-validator.ts","../../src/lib/checkbox/checkbox-module.ts","../../src/lib/chips/chip.ts","../../src/lib/chips/chip-default-options.ts","../../src/lib/button/button.ts","../../src/lib/button/button-module.ts","../../src/lib/button-toggle/button-toggle.ts","../../src/lib/button-toggle/button-toggle-module.ts","../../src/lib/card/card.ts","../../src/lib/card/card-module.ts","../../src/lib/checkbox/checkbox-config.ts","../../src/lib/autocomplete/autocomplete.ts","../../src/lib/autocomplete/autocomplete-origin.ts","../../src/lib/autocomplete/autocomplete-module.ts","../../src/lib/badge/badge.ts","../../src/lib/badge/badge-module.ts","../../src/lib/bottom-sheet/bottom-sheet-config.ts","../../src/lib/bottom-sheet/bottom-sheet-animations.ts","../../src/lib/bottom-sheet/bottom-sheet-container.ts","../../src/lib/bottom-sheet/bottom-sheet-module.ts","../../src/lib/bottom-sheet/bottom-sheet-ref.ts","../../src/lib/bottom-sheet/bottom-sheet.ts","../../src/lib/core/option/option.ts","../../src/lib/core/option/index.ts","../../src/lib/core/label/label-options.ts","../../src/lib/form-field/error.ts","../../src/lib/form-field/form-field-animations.ts","../../src/lib/form-field/form-field-control.ts","../../src/lib/form-field/hint.ts","../../src/lib/form-field/label.ts","../../src/lib/form-field/placeholder.ts","../../src/lib/form-field/prefix.ts","../../src/lib/form-field/suffix.ts","../../src/lib/form-field/form-field.ts","../../src/lib/form-field/form-field-module.ts","../../node_modules/tslib/tslib.es6.js","../../src/lib/core/common-behaviors/common-module.ts","../../src/lib/core/common-behaviors/disabled.ts","../../src/lib/core/common-behaviors/color.ts","../../src/lib/core/common-behaviors/disable-ripple.ts","../../src/lib/core/common-behaviors/tabindex.ts","../../src/lib/core/common-behaviors/error-state.ts","../../src/lib/core/common-behaviors/initialized.ts","../../src/lib/core/datetime/date-adapter.ts","../../src/lib/core/datetime/native-date-adapter.ts","../../src/lib/core/ripple/ripple-renderer.ts","../../src/lib/form-field/form-field-errors.ts","../../src/lib/input/input-errors.ts","../../src/lib/datepicker/datepicker-errors.ts","../../src/lib/menu/menu-errors.ts","../../src/lib/select/select-errors.ts","../../src/lib/sort/sort-errors.ts","../../src/lib/core/animation/animation.ts","../../src/lib/core/datetime/date-formats.ts","../../src/lib/core/datetime/native-date-formats.ts","../../src/lib/core/datetime/index.ts","../../src/lib/core/error/error-options.ts","../../src/lib/core/gestures/gesture-config.ts","../../src/lib/core/line/line.ts","../../src/lib/core/ripple/ripple-ref.ts","../../src/lib/core/ripple/ripple.ts","../../src/lib/core/ripple/index.ts","../../src/lib/core/selection/pseudo-checkbox/pseudo-checkbox.ts","../../src/lib/core/selection/index.ts","../../src/lib/core/option/optgroup.ts"],"sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {Directionality} from '@angular/cdk/bidi';\nimport {Platform} from '@angular/cdk/platform';\nimport {ViewportRuler} from '@angular/cdk/scrolling';\nimport {\n  AfterContentChecked,\n  AfterContentInit,\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  forwardRef,\n  Inject,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {\n  CanColor, CanColorCtor,\n  CanDisable, CanDisableCtor,\n  CanDisableRipple, CanDisableRippleCtor,\n  HasTabIndex, HasTabIndexCtor,\n  MAT_RIPPLE_GLOBAL_OPTIONS,\n  mixinColor,\n  mixinDisabled,\n  mixinDisableRipple,\n  mixinTabIndex, RippleConfig,\n  RippleGlobalOptions,\n  RippleRenderer,\n  RippleTarget,\n  ThemePalette,\n} from '@angular/material/core';\nimport {merge, of as observableOf, Subject} from 'rxjs';\nimport {takeUntil} from 'rxjs/operators';\nimport {MatInkBar} from '../ink-bar';\nimport {FocusMonitor} from '@angular/cdk/a11y';\n\n\n// Boilerplate for applying mixins to MatTabNav.\n/** @docs-private */\nexport class MatTabNavBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatTabNavMixinBase: CanDisableRippleCtor & CanColorCtor & typeof MatTabNavBase =\n    mixinDisableRipple(mixinColor(MatTabNavBase, 'primary'));\n\n/**\n * Navigation component matching the styles of the tab group header.\n * Provides anchored navigation with animated ink bar.\n */\n@Component({\n  moduleId: module.id,\n  selector: '[mat-tab-nav-bar]',\n  exportAs: 'matTabNavBar, matTabNav',\n  inputs: ['color', 'disableRipple'],\n  templateUrl: 'tab-nav-bar.html',\n  styleUrls: ['tab-nav-bar.css'],\n  host: {'class': 'mat-tab-nav-bar'},\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatTabNav extends _MatTabNavMixinBase\n    implements AfterContentChecked, AfterContentInit, CanColor, CanDisableRipple, OnDestroy {\n\n  /** Subject that emits when the component has been destroyed. */\n  private readonly _onDestroy = new Subject<void>();\n\n  private _activeLinkChanged: boolean;\n  private _activeLinkElement: ElementRef<HTMLElement> | null;\n\n  @ViewChild(MatInkBar) _inkBar: MatInkBar;\n\n  /** Query list of all tab links of the tab navigation. */\n  @ContentChildren(forwardRef(() => MatTabLink), {descendants: true})\n  _tabLinks: QueryList<MatTabLink>;\n\n  /** Background color of the tab nav. */\n  @Input()\n  get backgroundColor(): ThemePalette { return this._backgroundColor; }\n  set backgroundColor(value: ThemePalette) {\n    const nativeElement: HTMLElement = this._elementRef.nativeElement;\n\n    nativeElement.classList.remove(`mat-background-${this.backgroundColor}`);\n\n    if (value) {\n      nativeElement.classList.add(`mat-background-${value}`);\n    }\n\n    this._backgroundColor = value;\n  }\n  private _backgroundColor: ThemePalette;\n\n  constructor(elementRef: ElementRef,\n              @Optional() private _dir: Directionality,\n              private _ngZone: NgZone,\n              private _changeDetectorRef: ChangeDetectorRef,\n              private _viewportRuler: ViewportRuler) {\n    super(elementRef);\n  }\n\n  /**\n   * Notifies the component that the active link has been changed.\n   * @breaking-change 7.0.0 `element` parameter to be removed.\n   */\n  updateActiveLink(element: ElementRef) {\n    // Note: keeping the `element` for backwards-compat, but isn't being used for anything.\n    // @breaking-change 7.0.0\n    this._activeLinkChanged = !!element;\n    this._changeDetectorRef.markForCheck();\n  }\n\n  ngAfterContentInit(): void {\n    this._ngZone.runOutsideAngular(() => {\n      const dirChange = this._dir ? this._dir.change : observableOf(null);\n\n      return merge(dirChange, this._viewportRuler.change(10))\n          .pipe(takeUntil(this._onDestroy))\n          .subscribe(() => this._alignInkBar());\n    });\n  }\n\n  /** Checks if the active link has been changed and, if so, will update the ink bar. */\n  ngAfterContentChecked(): void {\n    if (this._activeLinkChanged) {\n      const activeTab = this._tabLinks.find(tab => tab.active);\n\n      this._activeLinkElement = activeTab ? activeTab._elementRef : null;\n      this._alignInkBar();\n      this._activeLinkChanged = false;\n    }\n  }\n\n  ngOnDestroy() {\n    this._onDestroy.next();\n    this._onDestroy.complete();\n  }\n\n  /** Aligns the ink bar to the active link. */\n  _alignInkBar(): void {\n    if (this._activeLinkElement) {\n      this._inkBar.show();\n      this._inkBar.alignToElement(this._activeLinkElement.nativeElement);\n    } else {\n      this._inkBar.hide();\n    }\n  }\n}\n\n\n// Boilerplate for applying mixins to MatTabLink.\nexport class MatTabLinkBase {}\nexport const _MatTabLinkMixinBase:\n    HasTabIndexCtor & CanDisableRippleCtor & CanDisableCtor & typeof MatTabLinkBase =\n        mixinTabIndex(mixinDisableRipple(mixinDisabled(MatTabLinkBase)));\n\n/**\n * Link inside of a `mat-tab-nav-bar`.\n */\n@Directive({\n  selector: '[mat-tab-link], [matTabLink]',\n  exportAs: 'matTabLink',\n  inputs: ['disabled', 'disableRipple', 'tabIndex'],\n  host: {\n    'class': 'mat-tab-link',\n    '[attr.aria-current]': 'active',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.tabIndex]': 'tabIndex',\n    '[class.mat-tab-disabled]': 'disabled',\n    '[class.mat-tab-label-active]': 'active',\n    '(click)': '_handleClick($event)'\n  }\n})\nexport class MatTabLink extends _MatTabLinkMixinBase\n    implements OnDestroy, CanDisable, CanDisableRipple, HasTabIndex, RippleTarget {\n\n  /** Whether the tab link is active or not. */\n  protected _isActive: boolean = false;\n\n  /** Reference to the RippleRenderer for the tab-link. */\n  protected _tabLinkRipple: RippleRenderer;\n\n  /** Whether the ripples are globally disabled through the RippleGlobalOptions */\n  private _ripplesGloballyDisabled = false;\n\n  /** Whether the link is active. */\n  @Input()\n  get active(): boolean { return this._isActive; }\n  set active(value: boolean) {\n    if (value !== this._isActive) {\n      this._isActive = value;\n      this._tabNavBar.updateActiveLink(this._elementRef);\n    }\n  }\n\n  /**\n   * Ripple configuration for ripples that are launched on pointer down.\n   * @docs-private\n   */\n  rippleConfig: RippleConfig = {};\n\n  /**\n   * Whether ripples are disabled on interaction\n   * @docs-private\n   */\n  get rippleDisabled(): boolean {\n    return this.disabled || this.disableRipple || this._tabNavBar.disableRipple ||\n      this._ripplesGloballyDisabled;\n  }\n\n  constructor(private _tabNavBar: MatTabNav,\n              public _elementRef: ElementRef,\n              ngZone: NgZone,\n              platform: Platform,\n              @Optional() @Inject(MAT_RIPPLE_GLOBAL_OPTIONS) globalOptions: RippleGlobalOptions,\n              @Attribute('tabindex') tabIndex: string,\n              /**\n               * @deprecated\n               * @breaking-change 7.0.0 `_focusMonitor` parameter to be made required.\n               */\n              private _focusMonitor?: FocusMonitor) {\n    super();\n\n    this._tabLinkRipple = new RippleRenderer(this, ngZone, _elementRef, platform);\n    this._tabLinkRipple.setupTriggerEvents(_elementRef.nativeElement);\n\n    this.tabIndex = parseInt(tabIndex) || 0;\n\n    if (globalOptions) {\n      // TODO(paul): Do not copy each option manually. Allow dynamic global option changes: #9729\n      this._ripplesGloballyDisabled = !!globalOptions.disabled;\n      this.rippleConfig = {\n        terminateOnPointerUp: globalOptions.terminateOnPointerUp,\n        animation: globalOptions.animation,\n      };\n    }\n\n    if (_focusMonitor) {\n      _focusMonitor.monitor(_elementRef);\n    }\n  }\n\n  ngOnDestroy() {\n    this._tabLinkRipple._removeTriggerEvents();\n\n    if (this._focusMonitor) {\n      this._focusMonitor.stopMonitoring(this._elementRef);\n    }\n  }\n\n  /**\n   * Handles the click event, preventing default navigation if the tab link is disabled.\n   */\n  _handleClick(event: MouseEvent) {\n    if (this.disabled) {\n      event.preventDefault();\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ObserversModule} from '@angular/cdk/observers';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {MatInkBar} from './ink-bar';\nimport {MatTab} from './tab';\nimport {MatTabBody, MatTabBodyPortal} from './tab-body';\nimport {MatTabContent} from './tab-content';\nimport {MatTabGroup} from './tab-group';\nimport {MatTabHeader} from './tab-header';\nimport {MatTabLabel} from './tab-label';\nimport {MatTabLabelWrapper} from './tab-label-wrapper';\nimport {MatTabLink, MatTabNav} from './tab-nav-bar/tab-nav-bar';\nimport {A11yModule} from '@angular/cdk/a11y';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatCommonModule,\n    PortalModule,\n    MatRippleModule,\n    ObserversModule,\n    A11yModule,\n  ],\n  // Don't export all components because some are only to be used internally.\n  exports: [\n    MatCommonModule,\n    MatTabGroup,\n    MatTabLabel,\n    MatTab,\n    MatTabNav,\n    MatTabLink,\n    MatTabContent,\n  ],\n  declarations: [\n    MatTabGroup,\n    MatTabLabel,\n    MatTab,\n    MatInkBar,\n    MatTabLabelWrapper,\n    MatTabNav,\n    MatTabLink,\n    MatTabBody,\n    MatTabBodyPortal,\n    MatTabHeader,\n    MatTabContent,\n  ],\n})\nexport class MatTabsModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Platform} from '@angular/cdk/platform';\nimport {DOCUMENT} from '@angular/common';\nimport {\n  AfterViewInit,\n  ChangeDetectionStrategy,\n  Component,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  Inject,\n  isDevMode,\n  QueryList,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {CanColor, CanColorCtor, mixinColor} from '@angular/material/core';\n\n\n// Boilerplate for applying mixins to MatToolbar.\n/** @docs-private */\nexport class MatToolbarBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatToolbarMixinBase: CanColorCtor & typeof MatToolbarBase =\n    mixinColor(MatToolbarBase);\n\n@Directive({\n  selector: 'mat-toolbar-row',\n  exportAs: 'matToolbarRow',\n  host: {'class': 'mat-toolbar-row'},\n})\nexport class MatToolbarRow {}\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-toolbar',\n  exportAs: 'matToolbar',\n  templateUrl: 'toolbar.html',\n  styleUrls: ['toolbar.css'],\n  inputs: ['color'],\n  host: {\n    'class': 'mat-toolbar',\n    '[class.mat-toolbar-multiple-rows]': '_toolbarRows.length > 0',\n    '[class.mat-toolbar-single-row]': '_toolbarRows.length === 0',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatToolbar extends _MatToolbarMixinBase implements CanColor, AfterViewInit {\n  private _document: Document;\n\n  /** Reference to all toolbar row elements that have been projected. */\n  @ContentChildren(MatToolbarRow) _toolbarRows: QueryList<MatToolbarRow>;\n\n  constructor(\n    elementRef: ElementRef,\n    private _platform: Platform,\n    @Inject(DOCUMENT) document?: any) {\n    super(elementRef);\n\n    // TODO: make the document a required param when doing breaking changes.\n    this._document = document;\n  }\n\n  ngAfterViewInit() {\n    if (!isDevMode() || !this._platform.isBrowser) {\n      return;\n    }\n\n    this._checkToolbarMixedModes();\n    this._toolbarRows.changes.subscribe(() => this._checkToolbarMixedModes());\n  }\n\n  /**\n   * Throws an exception when developers are attempting to combine the different toolbar row modes.\n   */\n  private _checkToolbarMixedModes() {\n    if (!this._toolbarRows.length) {\n      return;\n    }\n\n    // Check if there are any other DOM nodes that can display content but aren't inside of\n    // a <mat-toolbar-row> element.\n    const isCombinedUsage = [].slice.call(this._elementRef.nativeElement.childNodes)\n      .filter(node => !(node.classList && node.classList.contains('mat-toolbar-row')))\n      .filter(node => node.nodeType !== (this._document ? this._document.COMMENT_NODE : 8))\n      .some(node => node.textContent.trim());\n\n    if (isCombinedUsage) {\n      throwToolbarMixedModesError();\n    }\n  }\n}\n\n/**\n * Throws an exception when attempting to combine the different toolbar row modes.\n * @docs-private\n */\nexport function throwToolbarMixedModesError() {\n  throw Error('MatToolbar: Attempting to combine different toolbar modes. ' +\n    'Either specify multiple `<mat-toolbar-row>` elements explicitly or just place content ' +\n    'inside of a `<mat-toolbar>` for a single row.');\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatToolbar, MatToolbarRow} from './toolbar';\n\n\n@NgModule({\n  imports: [MatCommonModule],\n  exports: [MatToolbar, MatToolbarRow, MatCommonModule],\n  declarations: [MatToolbar, MatToolbarRow],\n})\nexport class MatToolbarModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {CdkTreeNodeOutlet} from '@angular/cdk/tree';\nimport {\n  Directive,\n  ViewContainerRef,\n} from '@angular/core';\n\n/**\n * Outlet for nested CdkNode. Put `[matTreeNodeOutlet]` on a tag to place children dataNodes\n * inside the outlet.\n */\n@Directive({\n  selector: '[matTreeNodeOutlet]'\n})\nexport class MatTreeNodeOutlet implements CdkTreeNodeOutlet {\n  constructor(public viewContainer: ViewContainerRef) {}\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CdkNestedTreeNode, CdkTree, CdkTreeNode, CdkTreeNodeDef} from '@angular/cdk/tree';\nimport {\n  AfterContentInit,\n  Attribute,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  Input,\n  IterableDiffers,\n  OnDestroy,\n  QueryList,\n} from '@angular/core';\nimport {\n  CanDisable, CanDisableCtor,\n  HasTabIndex,\n  HasTabIndexCtor,\n  mixinDisabled,\n  mixinTabIndex,\n} from '@angular/material/core';\nimport {MatTreeNodeOutlet} from './outlet';\n\n// TODO(devversion): workaround for https://github.com/angular/material2/issues/12760\nexport const _CdkTreeNodeDef = CdkTreeNodeDef;\n\nexport const _MatTreeNodeMixinBase: HasTabIndexCtor & CanDisableCtor & typeof CdkTreeNode =\n    mixinTabIndex(mixinDisabled(CdkTreeNode));\n\nexport const _MatNestedTreeNodeMixinBase:\n    HasTabIndexCtor & CanDisableCtor & typeof CdkNestedTreeNode =\n        mixinTabIndex(mixinDisabled(CdkNestedTreeNode));\n\n/**\n * Wrapper for the CdkTree node with Material design styles.\n */\n@Directive({\n  selector: 'mat-tree-node',\n  exportAs: 'matTreeNode',\n  inputs: ['disabled', 'tabIndex'],\n  host: {\n    '[attr.aria-expanded]': 'isExpanded',\n    '[attr.aria-level]': 'role === \"treeitem\" ? level : null',\n    '[attr.role]': 'role',\n    'class': 'mat-tree-node'\n  },\n  providers: [{provide: CdkTreeNode, useExisting: MatTreeNode}]\n})\nexport class MatTreeNode<T> extends _MatTreeNodeMixinBase<T>\n    implements CanDisable, HasTabIndex {\n  @Input() role: 'treeitem' | 'group' = 'treeitem';\n\n  constructor(protected _elementRef: ElementRef<HTMLElement>,\n              protected _tree: CdkTree<T>,\n              @Attribute('tabindex') tabIndex: string) {\n    super(_elementRef, _tree);\n\n    this.tabIndex = Number(tabIndex) || 0;\n  }\n}\n\n/**\n * Wrapper for the CdkTree node definition with Material design styles.\n */\n@Directive({\n  selector: '[matTreeNodeDef]',\n  inputs: [\n    'when: matTreeNodeDefWhen'\n  ],\n  providers: [{provide: CdkTreeNodeDef, useExisting: MatTreeNodeDef}]\n})\nexport class MatTreeNodeDef<T> extends _CdkTreeNodeDef<T> {\n  @Input('matTreeNode') data: T;\n}\n\n/**\n * Wrapper for the CdkTree nested node with Material design styles.\n */\n@Directive({\n  selector: 'mat-nested-tree-node',\n  exportAs: 'matNestedTreeNode',\n  host: {\n    '[attr.aria-expanded]': 'isExpanded',\n    '[attr.role]': 'role',\n    'class': 'mat-nested-tree-node',\n  },\n  inputs: ['disabled', 'tabIndex'],\n  providers: [\n    {provide: CdkNestedTreeNode, useExisting: MatNestedTreeNode},\n    {provide: CdkTreeNode, useExisting: MatNestedTreeNode}\n  ]\n})\nexport class MatNestedTreeNode<T> extends _MatNestedTreeNodeMixinBase<T>\n    implements AfterContentInit, CanDisable, HasTabIndex, OnDestroy {\n\n  @Input('matNestedTreeNode') node: T;\n\n  @ContentChildren(MatTreeNodeOutlet) nodeOutlet: QueryList<MatTreeNodeOutlet>;\n\n  constructor(protected _elementRef: ElementRef<HTMLElement>,\n              protected _tree: CdkTree<T>,\n              protected _differs: IterableDiffers,\n              @Attribute('tabindex') tabIndex: string) {\n    super(_elementRef, _tree, _differs);\n\n    this.tabIndex = Number(tabIndex) || 0;\n  }\n\n  // This is a workaround for https://github.com/angular/angular/issues/23091\n  // In aot mode, the lifecycle hooks from parent class are not called.\n  // TODO(tinayuangao): Remove when the angular issue #23091 is fixed\n  ngAfterContentInit() {\n    super.ngAfterContentInit();\n  }\n\n  ngOnDestroy() {\n    super.ngOnDestroy();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {CdkTreeNodePadding} from '@angular/cdk/tree';\nimport {Directive, Input} from '@angular/core';\n\n// TODO(devversion): workaround for https://github.com/angular/material2/issues/12760\nexport const _CdkTreeNodePadding = CdkTreeNodePadding;\n\n/**\n * Wrapper for the CdkTree padding with Material design styles.\n */\n@Directive({\n  selector: '[matTreeNodePadding]',\n  providers: [{provide: CdkTreeNodePadding, useExisting: MatTreeNodePadding}]\n})\nexport class MatTreeNodePadding<T> extends _CdkTreeNodePadding<T> {\n\n  /** The level of depth of the tree node. The padding will be `level * indent` pixels. */\n  @Input('matTreeNodePadding') level: number;\n\n  /** The indent for each level. Default number 40px from material design menu sub-menu spec. */\n  @Input('matTreeNodePaddingIndent') indent: number;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CdkTree} from '@angular/cdk/tree';\nimport {ChangeDetectionStrategy, Component, ViewChild, ViewEncapsulation} from '@angular/core';\nimport {MatTreeNodeOutlet} from './outlet';\n\n// TODO(devversion): workaround for https://github.com/angular/material2/issues/12760\nexport const _CdkTree = CdkTree;\n\n/**\n * Wrapper for the CdkTable with Material design styles.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-tree',\n  exportAs: 'matTree',\n  template: `<ng-container matTreeNodeOutlet></ng-container>`,\n  host: {\n    'class': 'mat-tree',\n    'role': 'tree',\n  },\n  styleUrls: ['tree.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  providers: [{provide: CdkTree, useExisting: MatTree}]\n})\nexport class MatTree<T> extends _CdkTree<T> {\n  // Outlets within the tree's template where the dataNodes will be inserted.\n  @ViewChild(MatTreeNodeOutlet) _nodeOutlet: MatTreeNodeOutlet;\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CdkTreeNodeToggle} from '@angular/cdk/tree';\nimport {Directive, Input} from '@angular/core';\n\n// TODO(devversion): workaround for https://github.com/angular/material2/issues/12760\nexport const _CdkTreeNodeToggle = CdkTreeNodeToggle;\n\n/**\n * Wrapper for the CdkTree's toggle with Material design styles.\n */\n@Directive({\n  selector: '[matTreeNodeToggle]',\n  host: {\n    '(click)': '_toggle($event)',\n  },\n  providers: [{provide: CdkTreeNodeToggle, useExisting: MatTreeNodeToggle}]\n})\nexport class MatTreeNodeToggle<T> extends _CdkTreeNodeToggle<T> {\n  @Input('matTreeNodeToggleRecursive') recursive: boolean = false;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\n\nimport {CdkTreeModule} from '@angular/cdk/tree';\nimport {CommonModule} from '@angular/common';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatNestedTreeNode, MatTreeNodeDef, MatTreeNode} from './node';\nimport {MatTree} from './tree';\nimport {MatTreeNodeToggle} from './toggle';\nimport {MatTreeNodeOutlet} from './outlet';\nimport {MatTreeNodePadding} from './padding';\n\nconst MAT_TREE_DIRECTIVES = [\n  MatNestedTreeNode,\n  MatTreeNodeDef,\n  MatTreeNodePadding,\n  MatTreeNodeToggle,\n  MatTree,\n  MatTreeNode,\n  MatTreeNodeOutlet\n];\n\n@NgModule({\n  imports: [CdkTreeModule, CommonModule, MatCommonModule],\n  exports: MAT_TREE_DIRECTIVES,\n  declarations: MAT_TREE_DIRECTIVES,\n})\nexport class MatTreeModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CollectionViewer, DataSource} from '@angular/cdk/collections';\nimport {FlatTreeControl, TreeControl} from '@angular/cdk/tree';\nimport {BehaviorSubject, merge, Observable} from 'rxjs';\nimport {map, take} from 'rxjs/operators';\n\n/**\n * Tree flattener to convert a normal type of node to node with children & level information.\n * Transform nested nodes of type `T` to flattened nodes of type `F`.\n *\n * For example, the input data of type `T` is nested, and contains its children data:\n *   SomeNode: {\n *     key: 'Fruits',\n *     children: [\n *       NodeOne: {\n *         key: 'Apple',\n *       },\n *       NodeTwo: {\n *        key: 'Pear',\n *      }\n *    ]\n *  }\n *  After flattener flatten the tree, the structure will become\n *  SomeNode: {\n *    key: 'Fruits',\n *    expandable: true,\n *    level: 1\n *  },\n *  NodeOne: {\n *    key: 'Apple',\n *    expandable: false,\n *    level: 2\n *  },\n *  NodeTwo: {\n *   key: 'Pear',\n *   expandable: false,\n *   level: 2\n * }\n * and the output flattened type is `F` with additional information.\n */\nexport class MatTreeFlattener<T, F> {\n\n  constructor(public transformFunction: (node: T, level: number) => F,\n              public getLevel: (node: F) => number,\n              public isExpandable: (node: F) => boolean,\n              public getChildren: (node: T) => Observable<T[]> | T[]) {}\n\n  _flattenNode(node: T, level: number,\n               resultNodes: F[], parentMap: boolean[]): F[] {\n    const flatNode = this.transformFunction(node, level);\n    resultNodes.push(flatNode);\n\n    if (this.isExpandable(flatNode)) {\n      const childrenNodes = this.getChildren(node);\n      if (Array.isArray(childrenNodes)) {\n        this._flattenChildren(childrenNodes, level, resultNodes, parentMap);\n      } else {\n        childrenNodes.pipe(take(1)).subscribe(children => {\n          this._flattenChildren(children, level, resultNodes, parentMap);\n        });\n      }\n    }\n    return resultNodes;\n  }\n\n  _flattenChildren(children: T[], level: number,\n                   resultNodes: F[], parentMap: boolean[]): void {\n    children.forEach((child, index) => {\n      let childParentMap: boolean[] = parentMap.slice();\n      childParentMap.push(index != children.length - 1);\n      this._flattenNode(child, level + 1, resultNodes, childParentMap);\n    });\n  }\n\n  /**\n   * Flatten a list of node type T to flattened version of node F.\n   * Please note that type T may be nested, and the length of `structuredData` may be different\n   * from that of returned list `F[]`.\n   */\n  flattenNodes(structuredData: T[]): F[] {\n    let resultNodes: F[] = [];\n    structuredData.forEach(node => this._flattenNode(node, 0, resultNodes, []));\n    return resultNodes;\n  }\n\n  /**\n   * Expand flattened node with current expansion status.\n   * The returned list may have different length.\n   */\n  expandFlattenedNodes(nodes: F[], treeControl: TreeControl<F>): F[] {\n    let results: F[] = [];\n    let currentExpand: boolean[] = [];\n    currentExpand[0] = true;\n\n    nodes.forEach(node => {\n      let expand = true;\n      for (let i = 0; i <= this.getLevel(node); i++) {\n        expand = expand && currentExpand[i];\n      }\n      if (expand) {\n        results.push(node);\n      }\n      if (this.isExpandable(node)) {\n        currentExpand[this.getLevel(node) + 1] = treeControl.isExpanded(node);\n      }\n    });\n    return results;\n  }\n}\n\n\n/**\n * Data source for flat tree.\n * The data source need to handle expansion/collapsion of the tree node and change the data feed\n * to `MatTree`.\n * The nested tree nodes of type `T` are flattened through `MatTreeFlattener`, and converted\n * to type `F` for `MatTree` to consume.\n */\nexport class MatTreeFlatDataSource<T, F> extends DataSource<F> {\n  _flattenedData = new BehaviorSubject<F[]>([]);\n\n  _expandedData = new BehaviorSubject<F[]>([]);\n\n  _data: BehaviorSubject<T[]>;\n  get data() { return this._data.value; }\n  set data(value: T[]) {\n    this._data.next(value);\n    this._flattenedData.next(this.treeFlattener.flattenNodes(this.data));\n    this.treeControl.dataNodes = this._flattenedData.value;\n  }\n\n  constructor(private treeControl: FlatTreeControl<F>,\n              private treeFlattener: MatTreeFlattener<T, F>,\n              initialData: T[] = []) {\n    super();\n    this._data = new BehaviorSubject<T[]>(initialData);\n  }\n\n  connect(collectionViewer: CollectionViewer): Observable<F[]> {\n    const changes = [\n      collectionViewer.viewChange,\n      this.treeControl.expansionModel.onChange,\n      this._flattenedData\n    ];\n    return merge(...changes).pipe(map(() => {\n      this._expandedData.next(\n        this.treeFlattener.expandFlattenedNodes(this._flattenedData.value, this.treeControl));\n      return this._expandedData.value;\n    }));\n  }\n\n  disconnect() {\n    // no op\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CollectionViewer, DataSource} from '@angular/cdk/collections';\nimport {BehaviorSubject, merge, Observable} from 'rxjs';\nimport {map} from 'rxjs/operators';\n\n\n/**\n * Data source for nested tree.\n *\n * The data source for nested tree doesn't have to consider node flattener, or the way to expand\n * or collapse. The expansion/collapsion will be handled by TreeControl and each non-leaf node.\n */\nexport class MatTreeNestedDataSource<T> extends DataSource<T> {\n  _data = new BehaviorSubject<T[]>([]);\n\n  /**\n   * Data for the nested tree\n   */\n  get data() { return this._data.value; }\n  set data(value: T[]) { this._data.next(value); }\n\n  connect(collectionViewer: CollectionViewer): Observable<T[]> {\n    return merge(...[collectionViewer.viewChange, this._data])\n      .pipe(map(() => {\n        return this.data;\n      }));\n  }\n\n  disconnect() {\n    // no op\n  }\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Version} from '@angular/core';\n\n/** Current version of Angular Material. */\nexport const VERSION = new Version('7.0.0-rc.0-6a73273');\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {Directionality} from '@angular/cdk/bidi';\nimport {DOWN_ARROW, ENTER, ESCAPE, TAB, UP_ARROW} from '@angular/cdk/keycodes';\nimport {\n  FlexibleConnectedPositionStrategy,\n  Overlay,\n  OverlayConfig,\n  OverlayRef,\n  PositionStrategy,\n  ScrollStrategy,\n} from '@angular/cdk/overlay';\nimport {TemplatePortal} from '@angular/cdk/portal';\nimport {DOCUMENT} from '@angular/common';\nimport {filter, take, switchMap, delay, tap, map} from 'rxjs/operators';\nimport {\n  ChangeDetectorRef,\n  Directive,\n  ElementRef,\n  forwardRef,\n  Host,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  ViewContainerRef,\n} from '@angular/core';\nimport {ViewportRuler} from '@angular/cdk/scrolling';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {\n  _countGroupLabelsBeforeOption,\n  _getOptionScrollPosition,\n  MatOption,\n  MatOptionSelectionChange,\n} from '@angular/material/core';\nimport {MatFormField} from '@angular/material/form-field';\nimport {Subscription, defer, fromEvent, merge, of as observableOf, Subject, Observable} from 'rxjs';\nimport {MatAutocomplete} from './autocomplete';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {MatAutocompleteOrigin} from './autocomplete-origin';\n\n\n/**\n * The following style constants are necessary to save here in order\n * to properly calculate the scrollTop of the panel. Because we are not\n * actually focusing the active item, scroll must be handled manually.\n */\n\n/** The height of each autocomplete option. */\nexport const AUTOCOMPLETE_OPTION_HEIGHT = 48;\n\n/** The total height of the autocomplete panel. */\nexport const AUTOCOMPLETE_PANEL_HEIGHT = 256;\n\n/** Injection token that determines the scroll handling while the autocomplete panel is open. */\nexport const MAT_AUTOCOMPLETE_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mat-autocomplete-scroll-strategy');\n\n/** @docs-private */\nexport function MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY(overlay: Overlay): () => ScrollStrategy {\n  return () => overlay.scrollStrategies.reposition();\n}\n\n/** @docs-private */\nexport const MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY_PROVIDER = {\n  provide: MAT_AUTOCOMPLETE_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY,\n};\n\n/**\n * Provider that allows the autocomplete to register as a ControlValueAccessor.\n * @docs-private\n */\nexport const MAT_AUTOCOMPLETE_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatAutocompleteTrigger),\n  multi: true\n};\n\n/**\n * Creates an error to be thrown when attempting to use an autocomplete trigger without a panel.\n * @docs-private\n */\nexport function getMatAutocompleteMissingPanelError(): Error {\n  return Error('Attempting to open an undefined instance of `mat-autocomplete`. ' +\n               'Make sure that the id passed to the `matAutocomplete` is correct and that ' +\n               'you\\'re attempting to open it after the ngAfterContentInit hook.');\n}\n\n\n@Directive({\n  selector: `input[matAutocomplete], textarea[matAutocomplete]`,\n  host: {\n    '[attr.autocomplete]': 'autocompleteAttribute',\n    '[attr.role]': 'autocompleteDisabled ? null : \"combobox\"',\n    '[attr.aria-autocomplete]': 'autocompleteDisabled ? null : \"list\"',\n    '[attr.aria-activedescendant]': 'activeOption?.id',\n    '[attr.aria-expanded]': 'autocompleteDisabled ? null : panelOpen.toString()',\n    '[attr.aria-owns]': '(autocompleteDisabled || !panelOpen) ? null : autocomplete?.id',\n    // Note: we use `focusin`, as opposed to `focus`, in order to open the panel\n    // a little earlier. This avoids issues where IE delays the focusing of the input.\n    '(focusin)': '_handleFocus()',\n    '(blur)': '_onTouched()',\n    '(input)': '_handleInput($event)',\n    '(keydown)': '_handleKeydown($event)',\n  },\n  exportAs: 'matAutocompleteTrigger',\n  providers: [MAT_AUTOCOMPLETE_VALUE_ACCESSOR]\n})\nexport class MatAutocompleteTrigger implements ControlValueAccessor, OnDestroy {\n  private _overlayRef: OverlayRef | null;\n  private _portal: TemplatePortal;\n  private _componentDestroyed = false;\n  private _autocompleteDisabled = false;\n\n  /** Old value of the native input. Used to work around issues with the `input` event on IE. */\n  private _previousValue: string | number | null;\n\n  /** Strategy that is used to position the panel. */\n  private _positionStrategy: FlexibleConnectedPositionStrategy;\n\n  /** Whether or not the label state is being overridden. */\n  private _manuallyFloatingLabel = false;\n\n  /** The subscription for closing actions (some are bound to document). */\n  private _closingActionsSubscription: Subscription;\n\n  /** Subscription to viewport size changes. */\n  private _viewportSubscription = Subscription.EMPTY;\n\n  /**\n   * Whether the autocomplete can open the next time it is focused. Used to prevent a focused,\n   * closed autocomplete from being reopened if the user switches to another browser tab and then\n   * comes back.\n   */\n  private _canOpenOnNextFocus = true;\n\n  /** Stream of keyboard events that can close the panel. */\n  private readonly _closeKeyEventStream = new Subject<void>();\n\n  /**\n   * Event handler for when the window is blurred. Needs to be an\n   * arrow function in order to preserve the context.\n   */\n  private _windowBlurHandler = () => {\n    // If the user blurred the window while the autocomplete is focused, it means that it'll be\n    // refocused when they come back. In this case we want to skip the first focus event, if the\n    // pane was closed, in order to avoid reopening it unintentionally.\n    this._canOpenOnNextFocus =\n        document.activeElement !== this._element.nativeElement || this.panelOpen;\n  }\n\n  /** `View -> model callback called when value changes` */\n  _onChange: (value: any) => void = () => {};\n\n  /** `View -> model callback called when autocomplete has been touched` */\n  _onTouched = () => {};\n\n  /** The autocomplete panel to be attached to this trigger. */\n  @Input('matAutocomplete') autocomplete: MatAutocomplete;\n\n  /**\n   * Reference relative to which to position the autocomplete panel.\n   * Defaults to the autocomplete trigger element.\n   */\n  @Input('matAutocompleteConnectedTo') connectedTo: MatAutocompleteOrigin;\n\n  /**\n   * `autocomplete` attribute to be set on the input element.\n   * @docs-private\n   */\n  @Input('autocomplete') autocompleteAttribute: string = 'off';\n\n  /**\n   * Whether the autocomplete is disabled. When disabled, the element will\n   * act as a regular input and the user won't be able to open the panel.\n   */\n  @Input('matAutocompleteDisabled')\n  get autocompleteDisabled(): boolean { return this._autocompleteDisabled; }\n  set autocompleteDisabled(value: boolean) {\n    this._autocompleteDisabled = coerceBooleanProperty(value);\n  }\n\n  constructor(private _element: ElementRef<HTMLInputElement>, private _overlay: Overlay,\n              private _viewContainerRef: ViewContainerRef,\n              private _zone: NgZone,\n              private _changeDetectorRef: ChangeDetectorRef,\n              @Inject(MAT_AUTOCOMPLETE_SCROLL_STRATEGY) private _scrollStrategy,\n              @Optional() private _dir: Directionality,\n              @Optional() @Host() private _formField: MatFormField,\n              @Optional() @Inject(DOCUMENT) private _document: any,\n              // @breaking-change 7.0.0 Make `_viewportRuler` required.\n              private _viewportRuler?: ViewportRuler) {\n\n    if (typeof window !== 'undefined') {\n      _zone.runOutsideAngular(() => {\n        window.addEventListener('blur', this._windowBlurHandler);\n      });\n    }\n  }\n\n  ngOnDestroy() {\n    if (typeof window !== 'undefined') {\n      window.removeEventListener('blur', this._windowBlurHandler);\n    }\n\n    this._viewportSubscription.unsubscribe();\n    this._componentDestroyed = true;\n    this._destroyPanel();\n    this._closeKeyEventStream.complete();\n  }\n\n  /** Whether or not the autocomplete panel is open. */\n  get panelOpen(): boolean {\n    return this._overlayAttached && this.autocomplete.showPanel;\n  }\n  private _overlayAttached: boolean = false;\n\n  /** Opens the autocomplete suggestion panel. */\n  openPanel(): void {\n    this._attachOverlay();\n    this._floatLabel();\n  }\n\n  /** Closes the autocomplete suggestion panel. */\n  closePanel(): void {\n    this._resetLabel();\n\n    if (!this._overlayAttached) {\n      return;\n    }\n\n    if (this.panelOpen) {\n      // Only emit if the panel was visible.\n      this.autocomplete.closed.emit();\n    }\n\n    this.autocomplete._isOpen = this._overlayAttached = false;\n\n    if (this._overlayRef && this._overlayRef.hasAttached()) {\n      this._overlayRef.detach();\n      this._closingActionsSubscription.unsubscribe();\n    }\n\n    // Note that in some cases this can end up being called after the component is destroyed.\n    // Add a check to ensure that we don't try to run change detection on a destroyed view.\n    if (!this._componentDestroyed) {\n      // We need to trigger change detection manually, because\n      // `fromEvent` doesn't seem to do it at the proper time.\n      // This ensures that the label is reset when the\n      // user clicks outside.\n      this._changeDetectorRef.detectChanges();\n    }\n  }\n\n  /**\n   * Updates the position of the autocomplete suggestion panel to ensure that it fits all options\n   * within the viewport.\n   */\n  updatePosition(): void {\n    if (this._overlayAttached) {\n      this._overlayRef!.updatePosition();\n    }\n  }\n\n  /**\n   * A stream of actions that should close the autocomplete panel, including\n   * when an option is selected, on blur, and when TAB is pressed.\n   */\n  get panelClosingActions(): Observable<MatOptionSelectionChange|null> {\n    return merge(\n      this.optionSelections,\n      this.autocomplete._keyManager.tabOut.pipe(filter(() => this._overlayAttached)),\n      this._closeKeyEventStream,\n      this._getOutsideClickStream(),\n      this._overlayRef ?\n          this._overlayRef.detachments().pipe(filter(() => this._overlayAttached)) :\n          observableOf()\n    ).pipe(\n      // Normalize the output so we return a consistent type.\n      map(event => event instanceof MatOptionSelectionChange ? event : null)\n    );\n  }\n\n  /** Stream of autocomplete option selections. */\n  readonly optionSelections: Observable<MatOptionSelectionChange> = defer(() => {\n    if (this.autocomplete && this.autocomplete.options) {\n     return merge(...this.autocomplete.options.map(option => option.onSelectionChange));\n    }\n\n    // If there are any subscribers before `ngAfterViewInit`, the `autocomplete` will be undefined.\n    // Return a stream that we'll replace with the real one once everything is in place.\n    return this._zone.onStable\n        .asObservable()\n        .pipe(take(1), switchMap(() => this.optionSelections));\n  });\n\n  /** The currently active option, coerced to MatOption type. */\n  get activeOption(): MatOption | null {\n    if (this.autocomplete && this.autocomplete._keyManager) {\n      return this.autocomplete._keyManager.activeItem;\n    }\n\n    return null;\n  }\n\n  /** Stream of clicks outside of the autocomplete panel. */\n  private _getOutsideClickStream(): Observable<any> {\n    if (!this._document) {\n      return observableOf(null);\n    }\n\n    return merge(\n      fromEvent<MouseEvent>(this._document, 'click'),\n      fromEvent<TouchEvent>(this._document, 'touchend')\n    )\n    .pipe(filter(event => {\n      const clickTarget = event.target as HTMLElement;\n      const formField = this._formField ?\n          this._formField._elementRef.nativeElement : null;\n\n      return this._overlayAttached &&\n              clickTarget !== this._element.nativeElement &&\n              (!formField || !formField.contains(clickTarget)) &&\n              (!!this._overlayRef && !this._overlayRef.overlayElement.contains(clickTarget));\n    }));\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  writeValue(value: any): void {\n    Promise.resolve(null).then(() => this._setTriggerValue(value));\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnChange(fn: (value: any) => {}): void {\n    this._onChange = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnTouched(fn: () => {}) {\n    this._onTouched = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  setDisabledState(isDisabled: boolean) {\n    this._element.nativeElement.disabled = isDisabled;\n  }\n\n  _handleKeydown(event: KeyboardEvent): void {\n    const keyCode = event.keyCode;\n\n    // Prevent the default action on all escape key presses. This is here primarily to bring IE\n    // in line with other browsers. By default, pressing escape on IE will cause it to revert\n    // the input value to the one that it had on focus, however it won't dispatch any events\n    // which means that the model value will be out of sync with the view.\n    if (keyCode === ESCAPE) {\n      event.preventDefault();\n    }\n\n    if (this.activeOption && keyCode === ENTER && this.panelOpen) {\n      this.activeOption._selectViaInteraction();\n      this._resetActiveItem();\n      event.preventDefault();\n    } else if (this.autocomplete) {\n      const prevActiveItem = this.autocomplete._keyManager.activeItem;\n      const isArrowKey = keyCode === UP_ARROW || keyCode === DOWN_ARROW;\n\n      if (this.panelOpen || keyCode === TAB) {\n        this.autocomplete._keyManager.onKeydown(event);\n      } else if (isArrowKey && this._canOpen()) {\n        this.openPanel();\n      }\n\n      if (isArrowKey || this.autocomplete._keyManager.activeItem !== prevActiveItem) {\n        this._scrollToOption();\n      }\n    }\n  }\n\n  _handleInput(event: KeyboardEvent): void {\n    let target = event.target as HTMLInputElement;\n    let value: number | string | null = target.value;\n\n    // Based on `NumberValueAccessor` from forms.\n    if (target.type === 'number') {\n      value = value == '' ? null : parseFloat(value);\n    }\n\n    // If the input has a placeholder, IE will fire the `input` event on page load,\n    // focus and blur, in addition to when the user actually changed the value. To\n    // filter out all of the extra events, we save the value on focus and between\n    // `input` events, and we check whether it changed.\n    // See: https://connect.microsoft.com/IE/feedback/details/885747/\n    if (this._previousValue !== value && document.activeElement === event.target) {\n      this._previousValue = value;\n      this._onChange(value);\n\n      if (this._canOpen()) {\n        this.openPanel();\n      }\n    }\n  }\n\n  _handleFocus(): void {\n    if (!this._canOpenOnNextFocus) {\n      this._canOpenOnNextFocus = true;\n    } else if (this._canOpen()) {\n      this._previousValue = this._element.nativeElement.value;\n      this._attachOverlay();\n      this._floatLabel(true);\n    }\n  }\n\n  /**\n   * In \"auto\" mode, the label will animate down as soon as focus is lost.\n   * This causes the value to jump when selecting an option with the mouse.\n   * This method manually floats the label until the panel can be closed.\n   * @param shouldAnimate Whether the label should be animated when it is floated.\n   */\n  private _floatLabel(shouldAnimate = false): void {\n    if (this._formField && this._formField.floatLabel === 'auto') {\n      if (shouldAnimate) {\n        this._formField._animateAndLockLabel();\n      } else {\n        this._formField.floatLabel = 'always';\n      }\n\n      this._manuallyFloatingLabel = true;\n    }\n  }\n\n  /** If the label has been manually elevated, return it to its normal state. */\n  private _resetLabel(): void  {\n    if (this._manuallyFloatingLabel) {\n      this._formField.floatLabel = 'auto';\n      this._manuallyFloatingLabel = false;\n    }\n  }\n\n  /**\n   * Given that we are not actually focusing active options, we must manually adjust scroll\n   * to reveal options below the fold. First, we find the offset of the option from the top\n   * of the panel. If that offset is below the fold, the new scrollTop will be the offset -\n   * the panel height + the option height, so the active option will be just visible at the\n   * bottom of the panel. If that offset is above the top of the visible panel, the new scrollTop\n   * will become the offset. If that offset is visible within the panel already, the scrollTop is\n   * not adjusted.\n   */\n  private _scrollToOption(): void {\n    const index = this.autocomplete._keyManager.activeItemIndex || 0;\n    const labelCount = _countGroupLabelsBeforeOption(index,\n        this.autocomplete.options, this.autocomplete.optionGroups);\n\n    const newScrollPosition = _getOptionScrollPosition(\n      index + labelCount,\n      AUTOCOMPLETE_OPTION_HEIGHT,\n      this.autocomplete._getScrollTop(),\n      AUTOCOMPLETE_PANEL_HEIGHT\n    );\n\n    this.autocomplete._setScrollTop(newScrollPosition);\n  }\n\n  /**\n   * This method listens to a stream of panel closing actions and resets the\n   * stream every time the option list changes.\n   */\n  private _subscribeToClosingActions(): Subscription {\n    const firstStable = this._zone.onStable.asObservable().pipe(take(1));\n    const optionChanges = this.autocomplete.options.changes.pipe(\n      tap(() => this._positionStrategy.reapplyLastPosition()),\n      // Defer emitting to the stream until the next tick, because changing\n      // bindings in here will cause \"changed after checked\" errors.\n      delay(0)\n    );\n\n    // When the zone is stable initially, and when the option list changes...\n    return merge(firstStable, optionChanges)\n      .pipe(\n        // create a new stream of panelClosingActions, replacing any previous streams\n        // that were created, and flatten it so our stream only emits closing events...\n        switchMap(() => {\n          this._resetActiveItem();\n          this.autocomplete._setVisibility();\n\n          if (this.panelOpen) {\n            this._overlayRef!.updatePosition();\n          }\n\n          return this.panelClosingActions;\n        }),\n        // when the first closing event occurs...\n        take(1)\n      )\n      // set the value, close the panel, and complete.\n      .subscribe(event => this._setValueAndClose(event));\n  }\n\n  /** Destroys the autocomplete suggestion panel. */\n  private _destroyPanel(): void {\n    if (this._overlayRef) {\n      this.closePanel();\n      this._overlayRef.dispose();\n      this._overlayRef = null;\n    }\n  }\n\n  private _setTriggerValue(value: any): void {\n    const toDisplay = this.autocomplete && this.autocomplete.displayWith ?\n      this.autocomplete.displayWith(value) :\n      value;\n\n    // Simply falling back to an empty string if the display value is falsy does not work properly.\n    // The display value can also be the number zero and shouldn't fall back to an empty string.\n    const inputValue = toDisplay != null ? toDisplay : '';\n\n    // If it's used within a `MatFormField`, we should set it through the property so it can go\n    // through change detection.\n    if (this._formField) {\n      this._formField._control.value = inputValue;\n    } else {\n      this._element.nativeElement.value = inputValue;\n    }\n  }\n\n  /**\n   * This method closes the panel, and if a value is specified, also sets the associated\n   * control to that value. It will also mark the control as dirty if this interaction\n   * stemmed from the user.\n   */\n  private _setValueAndClose(event: MatOptionSelectionChange | null): void {\n    if (event && event.source) {\n      this._clearPreviousSelectedOption(event.source);\n      this._setTriggerValue(event.source.value);\n      this._onChange(event.source.value);\n      this._element.nativeElement.focus();\n      this.autocomplete._emitSelectEvent(event.source);\n    }\n\n    this.closePanel();\n  }\n\n  /**\n   * Clear any previous selected option and emit a selection change event for this option\n   */\n  private _clearPreviousSelectedOption(skip: MatOption) {\n    this.autocomplete.options.forEach(option => {\n      if (option != skip && option.selected) {\n        option.deselect();\n      }\n    });\n  }\n\n  private _attachOverlay(): void {\n    if (!this.autocomplete) {\n      throw getMatAutocompleteMissingPanelError();\n    }\n\n    if (!this._overlayRef) {\n      this._portal = new TemplatePortal(this.autocomplete.template, this._viewContainerRef);\n      this._overlayRef = this._overlay.create(this._getOverlayConfig());\n\n      // Use the `keydownEvents` in order to take advantage of\n      // the overlay event targeting provided by the CDK overlay.\n      this._overlayRef.keydownEvents().subscribe(event => {\n        // Close when pressing ESCAPE or ALT + UP_ARROW, based on the a11y guidelines.\n        // See: https://www.w3.org/TR/wai-aria-practices-1.1/#textbox-keyboard-interaction\n        if (event.keyCode === ESCAPE || (event.keyCode === UP_ARROW && event.altKey)) {\n          this._resetActiveItem();\n          this._closeKeyEventStream.next();\n        }\n      });\n\n      if (this._viewportRuler) {\n        this._viewportSubscription = this._viewportRuler.change().subscribe(() => {\n          if (this.panelOpen && this._overlayRef) {\n            this._overlayRef.updateSize({width: this._getPanelWidth()});\n          }\n        });\n      }\n    } else {\n      // Update the panel width and direction, in case anything has changed.\n      this._overlayRef.updateSize({width: this._getPanelWidth()});\n    }\n\n    if (this._overlayRef && !this._overlayRef.hasAttached()) {\n      this._overlayRef.attach(this._portal);\n      this._closingActionsSubscription = this._subscribeToClosingActions();\n    }\n\n    const wasOpen = this.panelOpen;\n\n    this.autocomplete._setVisibility();\n    this.autocomplete._isOpen = this._overlayAttached = true;\n\n    // We need to do an extra `panelOpen` check in here, because the\n    // autocomplete won't be shown if there are no options.\n    if (this.panelOpen && wasOpen !== this.panelOpen) {\n      this.autocomplete.opened.emit();\n    }\n  }\n\n  private _getOverlayConfig(): OverlayConfig {\n    return new OverlayConfig({\n      positionStrategy: this._getOverlayPosition(),\n      scrollStrategy: this._scrollStrategy(),\n      width: this._getPanelWidth(),\n      direction: this._dir\n    });\n  }\n\n  private _getOverlayPosition(): PositionStrategy {\n    this._positionStrategy = this._overlay.position()\n      .flexibleConnectedTo(this._getConnectedElement())\n      .withFlexibleDimensions(false)\n      .withPush(false)\n      .withPositions([\n        {\n          originX: 'start',\n          originY: 'bottom',\n          overlayX: 'start',\n          overlayY: 'top'\n        },\n        {\n          originX: 'start',\n          originY: 'top',\n          overlayX: 'start',\n          overlayY: 'bottom',\n\n          // The overlay edge connected to the trigger should have squared corners, while\n          // the opposite end has rounded corners. We apply a CSS class to swap the\n          // border-radius based on the overlay position.\n          panelClass: 'mat-autocomplete-panel-above'\n        }\n      ]);\n\n    return this._positionStrategy;\n  }\n\n  private _getConnectedElement(): ElementRef {\n    if (this.connectedTo) {\n      return this.connectedTo.elementRef;\n    }\n\n    return this._formField ? this._formField.getConnectedOverlayOrigin() : this._element;\n  }\n\n  private _getPanelWidth(): number | string {\n    return this.autocomplete.panelWidth || this._getHostWidth();\n  }\n\n  /** Returns the width of the input element, so the panel width can match it. */\n  private _getHostWidth(): number {\n    return this._getConnectedElement().nativeElement.getBoundingClientRect().width;\n  }\n\n  /**\n   * Resets the active item to -1 so arrow events will activate the\n   * correct options, or to 0 if the consumer opted into it.\n   */\n  private _resetActiveItem(): void {\n    this.autocomplete._keyManager.setActiveItem(this.autocomplete.autoActiveFirstOption ? 0 : -1);\n  }\n\n  /** Determines whether the panel can be opened. */\n  private _canOpen(): boolean {\n    const element = this._element.nativeElement;\n    return !element.readOnly && !element.disabled && !this._autocompleteDisabled;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * When constructing a Date, the month is zero-based. This can be confusing, since people are\n * used to seeing them one-based. So we create these aliases to make writing the tests easier.\n */\nexport const JAN = 0, FEB = 1, MAR = 2, APR = 3, MAY = 4, JUN = 5, JUL = 6, AUG = 7, SEP = 8,\n    OCT = 9, NOV = 10, DEC = 11;\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  animateChild,\n  group,\n  state,\n  style,\n  transition,\n  trigger,\n  query,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/** Time and timing curve for expansion panel animations. */\nexport const EXPANSION_PANEL_ANIMATION_TIMING = '225ms cubic-bezier(0.4,0.0,0.2,1)';\n\n/**\n * Animations used by the Material expansion panel.\n *\n * A bug in angular animation's `state` when ViewContainers are moved using ViewContainerRef.move()\n * causes the animation state of moved components to become `void` upon exit, and not update again\n * upon reentry into the DOM.  This can lead a to situation for the expansion panel where the state\n * of the panel is `expanded` or `collapsed` but the animation state is `void`.\n *\n * To correctly handle animating to the next state, we animate between `void` and `collapsed` which\n * are defined to have the same styles. Since angular animates from the current styles to the\n * destination state's style definition, in situations where we are moving from `void`'s styles to\n * `collapsed` this acts a noop since no style values change.\n *\n * In the case where angular's animation state is out of sync with the expansion panel's state, the\n * expansion panel being `expanded` and angular animations being `void`, the animation from the\n * `expanded`'s effective styles (though in a `void` animation state) to the collapsed state will\n * occur as expected.\n *\n * Angular Bug: https://github.com/angular/angular/issues/18847\n *\n * @docs-private\n */\nexport const matExpansionAnimations: {\n  readonly indicatorRotate: AnimationTriggerMetadata;\n  readonly expansionHeaderHeight: AnimationTriggerMetadata;\n  readonly bodyExpansion: AnimationTriggerMetadata;\n} = {\n  /** Animation that rotates the indicator arrow. */\n  indicatorRotate: trigger('indicatorRotate', [\n    state('collapsed, void', style({transform: 'rotate(0deg)'})),\n    state('expanded', style({transform: 'rotate(180deg)'})),\n    transition('expanded <=> collapsed, void => collapsed',\n      animate(EXPANSION_PANEL_ANIMATION_TIMING)),\n  ]),\n\n  /** Animation that expands and collapses the panel header height. */\n  expansionHeaderHeight: trigger('expansionHeight', [\n    state('collapsed, void', style({\n      height: '{{collapsedHeight}}',\n    }), {\n      params: {collapsedHeight: '48px'},\n    }),\n    state('expanded', style({\n      height: '{{expandedHeight}}'\n    }), {\n      params: {expandedHeight: '64px'}\n    }),\n    transition('expanded <=> collapsed, void => collapsed', group([\n      query('@indicatorRotate', animateChild(), {optional: true}),\n      animate(EXPANSION_PANEL_ANIMATION_TIMING),\n    ])),\n  ]),\n\n  /** Animation that expands and collapses the panel content. */\n  bodyExpansion: trigger('bodyExpansion', [\n    state('collapsed, void', style({height: '0px', visibility: 'hidden'})),\n    state('expanded', style({height: '*', visibility: 'visible'})),\n    transition('expanded <=> collapsed, void => collapsed',\n      animate(EXPANSION_PANEL_ANIMATION_TIMING)),\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ActiveDescendantKeyManager} from '@angular/cdk/a11y';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {SelectionModel} from '@angular/cdk/collections';\nimport {\n  A,\n  DOWN_ARROW,\n  END,\n  ENTER,\n  HOME,\n  LEFT_ARROW,\n  RIGHT_ARROW,\n  SPACE,\n  UP_ARROW,\n} from '@angular/cdk/keycodes';\nimport {\n  CdkConnectedOverlay,\n  Overlay,\n  RepositionScrollStrategy,\n  ScrollStrategy,\n} from '@angular/cdk/overlay';\nimport {ViewportRuler} from '@angular/cdk/scrolling';\nimport {\n  AfterContentInit,\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  ContentChildren,\n  Directive,\n  DoCheck,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  InjectionToken,\n  Input,\n  isDevMode,\n  NgZone,\n  OnChanges,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Output,\n  QueryList,\n  Self,\n  SimpleChanges,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {ControlValueAccessor, FormGroupDirective, NgControl, NgForm} from '@angular/forms';\nimport {\n  _countGroupLabelsBeforeOption,\n  _getOptionScrollPosition,\n  CanDisable,\n  CanDisableCtor,\n  CanDisableRipple,\n  CanDisableRippleCtor,\n  CanUpdateErrorState,\n  CanUpdateErrorStateCtor,\n  ErrorStateMatcher,\n  HasTabIndex,\n  HasTabIndexCtor,\n  MAT_OPTION_PARENT_COMPONENT,\n  MatOptgroup,\n  MatOption,\n  MatOptionSelectionChange,\n  mixinDisabled,\n  mixinDisableRipple,\n  mixinErrorState,\n  mixinTabIndex,\n} from '@angular/material/core';\nimport {MatFormField, MatFormFieldControl} from '@angular/material/form-field';\nimport {defer, merge, Observable, Subject} from 'rxjs';\nimport {\n  distinctUntilChanged,\n  filter,\n  map,\n  startWith,\n  switchMap,\n  take,\n  takeUntil,\n} from 'rxjs/operators';\nimport {matSelectAnimations} from './select-animations';\nimport {\n  getMatSelectDynamicMultipleError,\n  getMatSelectNonArrayValueError,\n  getMatSelectNonFunctionValueError,\n} from './select-errors';\n\n\nlet nextUniqueId = 0;\n\n/**\n * The following style constants are necessary to save here in order\n * to properly calculate the alignment of the selected option over\n * the trigger element.\n */\n\n/** The max height of the select's overlay panel */\nexport const SELECT_PANEL_MAX_HEIGHT = 256;\n\n/** The panel's padding on the x-axis */\nexport const SELECT_PANEL_PADDING_X = 16;\n\n/** The panel's x axis padding if it is indented (e.g. there is an option group). */\nexport const SELECT_PANEL_INDENT_PADDING_X = SELECT_PANEL_PADDING_X * 2;\n\n/** The height of the select items in `em` units. */\nexport const SELECT_ITEM_HEIGHT_EM = 3;\n\n// TODO(josephperrott): Revert to a constant after 2018 spec updates are fully merged.\n/**\n * Distance between the panel edge and the option text in\n * multi-selection mode.\n *\n * Calculated as:\n * (SELECT_PANEL_PADDING_X * 1.5) + 20 = 44\n * The padding is multiplied by 1.5 because the checkbox's margin is half the padding.\n * The checkbox width is 16px.\n */\nexport let SELECT_MULTIPLE_PANEL_PADDING_X = 0;\n\n/**\n * The select panel will only \"fit\" inside the viewport if it is positioned at\n * this value or more away from the viewport boundary.\n */\nexport const SELECT_PANEL_VIEWPORT_PADDING = 8;\n\n/** Injection token that determines the scroll handling while a select is open. */\nexport const MAT_SELECT_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mat-select-scroll-strategy');\n\n/** @docs-private */\nexport function MAT_SELECT_SCROLL_STRATEGY_PROVIDER_FACTORY(overlay: Overlay):\n    () => RepositionScrollStrategy {\n  return () => overlay.scrollStrategies.reposition();\n}\n\n/** @docs-private */\nexport const MAT_SELECT_SCROLL_STRATEGY_PROVIDER = {\n  provide: MAT_SELECT_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_SELECT_SCROLL_STRATEGY_PROVIDER_FACTORY,\n};\n\n/** Change event object that is emitted when the select value has changed. */\nexport class MatSelectChange {\n  constructor(\n    /** Reference to the select that emitted the change event. */\n    public source: MatSelect,\n    /** Current value of the select that emitted the event. */\n    public value: any) { }\n}\n\n// Boilerplate for applying mixins to MatSelect.\n/** @docs-private */\nexport class MatSelectBase {\n  constructor(public _elementRef: ElementRef,\n              public _defaultErrorStateMatcher: ErrorStateMatcher,\n              public _parentForm: NgForm,\n              public _parentFormGroup: FormGroupDirective,\n              public ngControl: NgControl) {}\n}\nexport const _MatSelectMixinBase:\n    CanDisableCtor &\n    HasTabIndexCtor &\n    CanDisableRippleCtor &\n    CanUpdateErrorStateCtor &\n    typeof MatSelectBase =\n        mixinDisableRipple(mixinTabIndex(mixinDisabled(mixinErrorState(MatSelectBase))));\n\n\n/**\n * Allows the user to customize the trigger that is displayed when the select has a value.\n */\n@Directive({\n  selector: 'mat-select-trigger'\n})\nexport class MatSelectTrigger {}\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-select',\n  exportAs: 'matSelect',\n  templateUrl: 'select.html',\n  styleUrls: ['select.css'],\n  inputs: ['disabled', 'disableRipple', 'tabIndex'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {\n    'role': 'listbox',\n    '[attr.id]': 'id',\n    '[attr.tabindex]': 'tabIndex',\n    '[attr.aria-label]': '_getAriaLabel()',\n    '[attr.aria-labelledby]': '_getAriaLabelledby()',\n    '[attr.aria-required]': 'required.toString()',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.aria-invalid]': 'errorState',\n    '[attr.aria-owns]': 'panelOpen ? _optionIds : null',\n    '[attr.aria-multiselectable]': 'multiple',\n    '[attr.aria-describedby]': '_ariaDescribedby || null',\n    '[attr.aria-activedescendant]': '_getAriaActiveDescendant()',\n    '[class.mat-select-disabled]': 'disabled',\n    '[class.mat-select-invalid]': 'errorState',\n    '[class.mat-select-required]': 'required',\n    '[class.mat-select-empty]': 'empty',\n    'class': 'mat-select',\n    '(keydown)': '_handleKeydown($event)',\n    '(focus)': '_onFocus()',\n    '(blur)': '_onBlur()',\n  },\n  animations: [\n    matSelectAnimations.transformPanel\n  ],\n  providers: [\n    {provide: MatFormFieldControl, useExisting: MatSelect},\n    {provide: MAT_OPTION_PARENT_COMPONENT, useExisting: MatSelect}\n  ],\n})\nexport class MatSelect extends _MatSelectMixinBase implements AfterContentInit, OnChanges,\n    OnDestroy, OnInit, DoCheck, ControlValueAccessor, CanDisable, HasTabIndex,\n    MatFormFieldControl<any>, CanUpdateErrorState, CanDisableRipple {\n  /** Whether or not the overlay panel is open. */\n  private _panelOpen = false;\n\n  /** Whether filling out the select is required in the form. */\n  private _required: boolean = false;\n\n  /** The scroll position of the overlay panel, calculated to center the selected option. */\n  private _scrollTop = 0;\n\n  /** The placeholder displayed in the trigger of the select. */\n  private _placeholder: string;\n\n  /** Whether the component is in multiple selection mode. */\n  private _multiple: boolean = false;\n\n  /** Comparison function to specify which option is displayed. Defaults to object equality. */\n  private _compareWith = (o1: any, o2: any) => o1 === o2;\n\n  /** Unique id for this input. */\n  private _uid = `mat-select-${nextUniqueId++}`;\n\n  /** Emits whenever the component is destroyed. */\n  private readonly _destroy = new Subject<void>();\n\n  /** The last measured value for the trigger's client bounding rect. */\n  _triggerRect: ClientRect;\n\n  /** The aria-describedby attribute on the select for improved a11y. */\n  _ariaDescribedby: string;\n\n  /** The cached font-size of the trigger element. */\n  _triggerFontSize = 0;\n\n  /** Deals with the selection logic. */\n  _selectionModel: SelectionModel<MatOption>;\n\n  /** Manages keyboard events for options in the panel. */\n  _keyManager: ActiveDescendantKeyManager<MatOption>;\n\n  /** `View -> model callback called when value changes` */\n  _onChange: (value: any) => void = () => {};\n\n  /** `View -> model callback called when select has been touched` */\n  _onTouched = () => {};\n\n  /** The IDs of child options to be passed to the aria-owns attribute. */\n  _optionIds: string = '';\n\n  /** The value of the select panel's transform-origin property. */\n  _transformOrigin: string = 'top';\n\n  /** Emits when the panel element is finished transforming in. */\n  _panelDoneAnimatingStream = new Subject<string>();\n\n  /** Strategy that will be used to handle scrolling while the select panel is open. */\n  _scrollStrategy = this._scrollStrategyFactory();\n\n  /**\n   * The y-offset of the overlay panel in relation to the trigger's top start corner.\n   * This must be adjusted to align the selected option text over the trigger text.\n   * when the panel opens. Will change based on the y-position of the selected option.\n   */\n  _offsetY = 0;\n\n  /**\n   * This position config ensures that the top \"start\" corner of the overlay\n   * is aligned with with the top \"start\" of the origin by default (overlapping\n   * the trigger completely). If the panel cannot fit below the trigger, it\n   * will fall back to a position above the trigger.\n   */\n  _positions = [\n    {\n      originX: 'start',\n      originY: 'top',\n      overlayX: 'start',\n      overlayY: 'top',\n    },\n    {\n      originX: 'start',\n      originY: 'bottom',\n      overlayX: 'start',\n      overlayY: 'bottom',\n    },\n  ];\n\n  /** Whether the component is disabling centering of the active option over the trigger. */\n  private _disableOptionCentering: boolean = false;\n\n  /** Whether the select is focused. */\n  get focused(): boolean {\n    return this._focused || this._panelOpen;\n  }\n  /**\n   * @deprecated Setter to be removed as this property is intended to be readonly.\n   * @breaking-change 8.0.0\n   */\n  set focused(value: boolean) {\n    this._focused = value;\n  }\n  private _focused = false;\n\n  /** A name for this control that can be used by `mat-form-field`. */\n  controlType = 'mat-select';\n\n  /** Trigger that opens the select. */\n  @ViewChild('trigger') trigger: ElementRef;\n\n  /** Panel containing the select options. */\n  @ViewChild('panel') panel: ElementRef;\n\n  /** Overlay pane containing the options. */\n  @ViewChild(CdkConnectedOverlay) overlayDir: CdkConnectedOverlay;\n\n  /** All of the defined select options. */\n  @ContentChildren(MatOption, { descendants: true }) options: QueryList<MatOption>;\n\n  /** All of the defined groups of options. */\n  @ContentChildren(MatOptgroup) optionGroups: QueryList<MatOptgroup>;\n\n  /** Classes to be passed to the select panel. Supports the same syntax as `ngClass`. */\n  @Input() panelClass: string|string[]|Set<string>|{[key: string]: any};\n\n  /** User-supplied override of the trigger element. */\n  @ContentChild(MatSelectTrigger) customTrigger: MatSelectTrigger;\n\n  /** Placeholder to be shown if no value has been selected. */\n  @Input()\n  get placeholder(): string { return this._placeholder; }\n  set placeholder(value: string) {\n    this._placeholder = value;\n    this.stateChanges.next();\n  }\n\n  /** Whether the component is required. */\n  @Input()\n  get required(): boolean { return this._required; }\n  set required(value: boolean) {\n    this._required = coerceBooleanProperty(value);\n    this.stateChanges.next();\n  }\n\n  /** Whether the user should be allowed to select multiple options. */\n  @Input()\n  get multiple(): boolean { return this._multiple; }\n  set multiple(value: boolean) {\n    if (this._selectionModel) {\n      throw getMatSelectDynamicMultipleError();\n    }\n\n    this._multiple = coerceBooleanProperty(value);\n  }\n\n  /** Whether to center the active option over the trigger. */\n  @Input()\n  get disableOptionCentering(): boolean { return this._disableOptionCentering; }\n  set disableOptionCentering(value: boolean) {\n    this._disableOptionCentering = coerceBooleanProperty(value);\n  }\n\n  /**\n   * Function to compare the option values with the selected values. The first argument\n   * is a value from an option. The second is a value from the selection. A boolean\n   * should be returned.\n   */\n  @Input()\n  get compareWith() { return this._compareWith; }\n  set compareWith(fn: (o1: any, o2: any) => boolean) {\n    if (typeof fn !== 'function') {\n      throw getMatSelectNonFunctionValueError();\n    }\n    this._compareWith = fn;\n    if (this._selectionModel) {\n      // A different comparator means the selection could change.\n      this._initializeSelection();\n    }\n  }\n\n  /** Value of the select control. */\n  @Input()\n  get value(): any { return this._value; }\n  set value(newValue: any) {\n    if (newValue !== this._value) {\n      this.writeValue(newValue);\n      this._value = newValue;\n    }\n  }\n  private _value: any;\n\n  /** Aria label of the select. If not specified, the placeholder will be used as label. */\n  @Input('aria-label') ariaLabel: string = '';\n\n  /** Input that can be used to specify the `aria-labelledby` attribute. */\n  @Input('aria-labelledby') ariaLabelledby: string;\n\n  /** Object used to control when error messages are shown. */\n  @Input() errorStateMatcher: ErrorStateMatcher;\n\n  /**\n   * Function used to sort the values in a select in multiple mode.\n   * Follows the same logic as `Array.prototype.sort`.\n   */\n  @Input() sortComparator: (a: MatOption, b: MatOption, options: MatOption[]) => number;\n\n  /** Unique id of the element. */\n  @Input()\n  get id(): string { return this._id; }\n  set id(value: string) {\n    this._id = value || this._uid;\n    this.stateChanges.next();\n  }\n  private _id: string;\n\n  /** Combined stream of all of the child options' change events. */\n  readonly optionSelectionChanges: Observable<MatOptionSelectionChange> = defer(() => {\n    if (this.options) {\n      return merge(...this.options.map(option => option.onSelectionChange));\n    }\n\n    return this._ngZone.onStable\n      .asObservable()\n      .pipe(take(1), switchMap(() => this.optionSelectionChanges));\n  });\n\n  /** Event emitted when the select panel has been toggled. */\n  @Output() readonly openedChange: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n  /** Event emitted when the select has been opened. */\n  @Output('opened') readonly _openedStream: Observable<void> =\n      this.openedChange.pipe(filter(o => o), map(() => {}));\n\n  /** Event emitted when the select has been closed. */\n  @Output('closed') readonly _closedStream: Observable<void> =\n      this.openedChange.pipe(filter(o => !o), map(() => {}));\n\n   /** Event emitted when the selected value has been changed by the user. */\n  @Output() readonly selectionChange: EventEmitter<MatSelectChange> =\n      new EventEmitter<MatSelectChange>();\n\n  /**\n   * Event that emits whenever the raw value of the select changes. This is here primarily\n   * to facilitate the two-way binding for the `value` input.\n   * @docs-private\n   */\n  @Output() readonly valueChange: EventEmitter<any> = new EventEmitter<any>();\n\n  constructor(\n    private _viewportRuler: ViewportRuler,\n    private _changeDetectorRef: ChangeDetectorRef,\n    private _ngZone: NgZone,\n    _defaultErrorStateMatcher: ErrorStateMatcher,\n    elementRef: ElementRef,\n    @Optional() private _dir: Directionality,\n    @Optional() _parentForm: NgForm,\n    @Optional() _parentFormGroup: FormGroupDirective,\n    @Optional() private _parentFormField: MatFormField,\n    @Self() @Optional() public ngControl: NgControl,\n    @Attribute('tabindex') tabIndex: string,\n    @Inject(MAT_SELECT_SCROLL_STRATEGY) private _scrollStrategyFactory) {\n    super(elementRef, _defaultErrorStateMatcher, _parentForm,\n          _parentFormGroup, ngControl);\n\n    if (this.ngControl) {\n      // Note: we provide the value accessor through here, instead of\n      // the `providers` to avoid running into a circular import.\n      this.ngControl.valueAccessor = this;\n    }\n\n    this.tabIndex = parseInt(tabIndex) || 0;\n\n    // Force setter to be called in case id was not specified.\n    this.id = this.id;\n  }\n\n  ngOnInit() {\n    this._selectionModel = new SelectionModel<MatOption>(this.multiple);\n    this.stateChanges.next();\n\n    // We need `distinctUntilChanged` here, because some browsers will\n    // fire the animation end event twice for the same animation. See:\n    // https://github.com/angular/angular/issues/24084\n    this._panelDoneAnimatingStream\n      .pipe(distinctUntilChanged(), takeUntil(this._destroy))\n      .subscribe(() => {\n        if (this.panelOpen) {\n          this._scrollTop = 0;\n          this.openedChange.emit(true);\n        } else {\n          this.openedChange.emit(false);\n          this.overlayDir.offsetX = 0;\n          this._changeDetectorRef.markForCheck();\n        }\n      });\n  }\n\n  ngAfterContentInit() {\n    this._initKeyManager();\n\n    this._selectionModel.onChange.pipe(takeUntil(this._destroy)).subscribe(event => {\n      event.added.forEach(option => option.select());\n      event.removed.forEach(option => option.deselect());\n    });\n\n    this.options.changes.pipe(startWith(null), takeUntil(this._destroy)).subscribe(() => {\n      this._resetOptions();\n      this._initializeSelection();\n    });\n  }\n\n  ngDoCheck() {\n    if (this.ngControl) {\n      this.updateErrorState();\n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    // Updating the disabled state is handled by `mixinDisabled`, but we need to additionally let\n    // the parent form field know to run change detection when the disabled state changes.\n    if (changes.disabled) {\n      this.stateChanges.next();\n    }\n  }\n\n  ngOnDestroy() {\n    this._destroy.next();\n    this._destroy.complete();\n    this.stateChanges.complete();\n  }\n\n  /** Toggles the overlay panel open or closed. */\n  toggle(): void {\n    this.panelOpen ? this.close() : this.open();\n  }\n\n  /** Opens the overlay panel. */\n  open(): void {\n    if (this.disabled || !this.options || !this.options.length || this._panelOpen) {\n      return;\n    }\n\n    this._triggerRect = this.trigger.nativeElement.getBoundingClientRect();\n    // Note: The computed font-size will be a string pixel value (e.g. \"16px\").\n    // `parseInt` ignores the trailing 'px' and converts this to a number.\n    this._triggerFontSize = parseInt(getComputedStyle(this.trigger.nativeElement)['font-size']);\n\n    this._panelOpen = true;\n    this._keyManager.withHorizontalOrientation(null);\n    this._calculateOverlayPosition();\n    this._highlightCorrectOption();\n    this._changeDetectorRef.markForCheck();\n\n    // Set the font size on the panel element once it exists.\n    this._ngZone.onStable.asObservable().pipe(take(1)).subscribe(() => {\n      if (this._triggerFontSize && this.overlayDir.overlayRef &&\n          this.overlayDir.overlayRef.overlayElement) {\n        this.overlayDir.overlayRef.overlayElement.style.fontSize = `${this._triggerFontSize}px`;\n      }\n    });\n  }\n\n  /** Closes the overlay panel and focuses the host element. */\n  close(): void {\n    if (this._panelOpen) {\n      this._panelOpen = false;\n      this._keyManager.withHorizontalOrientation(this._isRtl() ? 'rtl' : 'ltr');\n      this._changeDetectorRef.markForCheck();\n      this._onTouched();\n    }\n  }\n\n  /**\n   * Sets the select's value. Part of the ControlValueAccessor interface\n   * required to integrate with Angular's core forms API.\n   *\n   * @param value New value to be written to the model.\n   */\n  writeValue(value: any): void {\n    if (this.options) {\n      this._setSelectionByValue(value);\n    }\n  }\n\n  /**\n   * Saves a callback function to be invoked when the select's value\n   * changes from user input. Part of the ControlValueAccessor interface\n   * required to integrate with Angular's core forms API.\n   *\n   * @param fn Callback to be triggered when the value changes.\n   */\n  registerOnChange(fn: (value: any) => void): void {\n    this._onChange = fn;\n  }\n\n  /**\n   * Saves a callback function to be invoked when the select is blurred\n   * by the user. Part of the ControlValueAccessor interface required\n   * to integrate with Angular's core forms API.\n   *\n   * @param fn Callback to be triggered when the component has been touched.\n   */\n  registerOnTouched(fn: () => {}): void {\n    this._onTouched = fn;\n  }\n\n  /**\n   * Disables the select. Part of the ControlValueAccessor interface required\n   * to integrate with Angular's core forms API.\n   *\n   * @param isDisabled Sets whether the component is disabled.\n   */\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n    this._changeDetectorRef.markForCheck();\n    this.stateChanges.next();\n  }\n\n  /** Whether or not the overlay panel is open. */\n  get panelOpen(): boolean {\n    return this._panelOpen;\n  }\n\n  /** The currently selected option. */\n  get selected(): MatOption | MatOption[] {\n    return this.multiple ? this._selectionModel.selected : this._selectionModel.selected[0];\n  }\n\n  /** The value displayed in the trigger. */\n  get triggerValue(): string {\n    if (this.empty) {\n      return '';\n    }\n\n    if (this._multiple) {\n      const selectedOptions = this._selectionModel.selected.map(option => option.viewValue);\n\n      if (this._isRtl()) {\n        selectedOptions.reverse();\n      }\n\n      // TODO(crisbeto): delimiter should be configurable for proper localization.\n      return selectedOptions.join(', ');\n    }\n\n    return this._selectionModel.selected[0].viewValue;\n  }\n\n  /** Whether the element is in RTL mode. */\n  _isRtl(): boolean {\n    return this._dir ? this._dir.value === 'rtl' : false;\n  }\n\n  /** Handles all keydown events on the select. */\n  _handleKeydown(event: KeyboardEvent): void {\n    if (!this.disabled) {\n      this.panelOpen ? this._handleOpenKeydown(event) : this._handleClosedKeydown(event);\n    }\n  }\n\n  /** Handles keyboard events while the select is closed. */\n  private _handleClosedKeydown(event: KeyboardEvent): void {\n    const keyCode = event.keyCode;\n    const isArrowKey = keyCode === DOWN_ARROW || keyCode === UP_ARROW ||\n                       keyCode === LEFT_ARROW || keyCode === RIGHT_ARROW;\n    const isOpenKey = keyCode === ENTER || keyCode === SPACE;\n    const manager = this._keyManager;\n\n    // Open the select on ALT + arrow key to match the native <select>\n    if (isOpenKey || ((this.multiple || event.altKey) && isArrowKey)) {\n      event.preventDefault(); // prevents the page from scrolling down when pressing space\n      this.open();\n    } else if (!this.multiple) {\n      if (keyCode === HOME || keyCode === END) {\n        keyCode === HOME ? manager.setFirstItemActive() : manager.setLastItemActive();\n        event.preventDefault();\n      } else {\n        manager.onKeydown(event);\n      }\n    }\n  }\n\n  /** Handles keyboard events when the selected is open. */\n  private _handleOpenKeydown(event: KeyboardEvent): void {\n    const keyCode = event.keyCode;\n    const isArrowKey = keyCode === DOWN_ARROW || keyCode === UP_ARROW;\n    const manager = this._keyManager;\n\n    if (keyCode === HOME || keyCode === END) {\n      event.preventDefault();\n      keyCode === HOME ? manager.setFirstItemActive() : manager.setLastItemActive();\n    } else if (isArrowKey && event.altKey) {\n      // Close the select on ALT + arrow key to match the native <select>\n      event.preventDefault();\n      this.close();\n    } else if ((keyCode === ENTER || keyCode === SPACE) && manager.activeItem) {\n      event.preventDefault();\n      manager.activeItem._selectViaInteraction();\n    } else if (this._multiple && keyCode === A && event.ctrlKey) {\n      event.preventDefault();\n      const hasDeselectedOptions = this.options.some(opt => !opt.disabled && !opt.selected);\n\n      this.options.forEach(option => {\n        if (!option.disabled) {\n          hasDeselectedOptions ? option.select() : option.deselect();\n        }\n      });\n    } else {\n      const previouslyFocusedIndex = manager.activeItemIndex;\n\n      manager.onKeydown(event);\n\n      if (this._multiple && isArrowKey && event.shiftKey && manager.activeItem &&\n          manager.activeItemIndex !== previouslyFocusedIndex) {\n        manager.activeItem._selectViaInteraction();\n      }\n    }\n  }\n\n  _onFocus() {\n    if (!this.disabled) {\n      this._focused = true;\n      this.stateChanges.next();\n    }\n  }\n\n  /**\n   * Calls the touched callback only if the panel is closed. Otherwise, the trigger will\n   * \"blur\" to the panel when it opens, causing a false positive.\n   */\n  _onBlur() {\n    this._focused = false;\n\n    if (!this.disabled && !this.panelOpen) {\n      this._onTouched();\n      this._changeDetectorRef.markForCheck();\n      this.stateChanges.next();\n    }\n  }\n\n  /**\n   * Callback that is invoked when the overlay panel has been attached.\n   */\n  _onAttached(): void {\n    this.overlayDir.positionChange.pipe(take(1)).subscribe(() => {\n      this._setPseudoCheckboxPaddingSize();\n      this._changeDetectorRef.detectChanges();\n      this._calculateOverlayOffsetX();\n      this.panel.nativeElement.scrollTop = this._scrollTop;\n    });\n  }\n\n  /** Returns the theme to be used on the panel. */\n  _getPanelTheme(): string {\n    return this._parentFormField ? `mat-${this._parentFormField.color}` : '';\n  }\n\n  // TODO(josephperrott): Remove after 2018 spec updates are fully merged.\n  /** Sets the pseudo checkbox padding size based on the width of the pseudo checkbox. */\n  private _setPseudoCheckboxPaddingSize() {\n    if (!SELECT_MULTIPLE_PANEL_PADDING_X && this.multiple) {\n      const pseudoCheckbox = this.panel.nativeElement.querySelector('.mat-pseudo-checkbox');\n      if (pseudoCheckbox) {\n        SELECT_MULTIPLE_PANEL_PADDING_X = SELECT_PANEL_PADDING_X * 1.5 + pseudoCheckbox.offsetWidth;\n      }\n    }\n  }\n\n  /** Whether the select has a value. */\n  get empty(): boolean {\n    return !this._selectionModel || this._selectionModel.isEmpty();\n  }\n\n  private _initializeSelection(): void {\n    // Defer setting the value in order to avoid the \"Expression\n    // has changed after it was checked\" errors from Angular.\n    Promise.resolve().then(() => {\n      this._setSelectionByValue(this.ngControl ? this.ngControl.value : this._value);\n    });\n  }\n\n  /**\n   * Sets the selected option based on a value. If no option can be\n   * found with the designated value, the select trigger is cleared.\n   */\n  private _setSelectionByValue(value: any | any[]): void {\n    if (this.multiple && value) {\n      if (!Array.isArray(value)) {\n        throw getMatSelectNonArrayValueError();\n      }\n\n      this._selectionModel.clear();\n      value.forEach((currentValue: any) => this._selectValue(currentValue));\n      this._sortValues();\n    } else {\n      this._selectionModel.clear();\n      const correspondingOption = this._selectValue(value);\n\n      // Shift focus to the active item. Note that we shouldn't do this in multiple\n      // mode, because we don't know what option the user interacted with last.\n      if (correspondingOption) {\n        this._keyManager.setActiveItem(correspondingOption);\n      }\n    }\n\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /**\n   * Finds and selects and option based on its value.\n   * @returns Option that has the corresponding value.\n   */\n  private _selectValue(value: any): MatOption | undefined {\n    const correspondingOption = this.options.find((option: MatOption) => {\n      try {\n        // Treat null as a special reset value.\n        return option.value != null && this._compareWith(option.value,  value);\n      } catch (error) {\n        if (isDevMode()) {\n          // Notify developers of errors in their comparator.\n          console.warn(error);\n        }\n        return false;\n      }\n    });\n\n    if (correspondingOption) {\n      this._selectionModel.select(correspondingOption);\n    }\n\n    return correspondingOption;\n  }\n\n  /** Sets up a key manager to listen to keyboard events on the overlay panel. */\n  private _initKeyManager() {\n    this._keyManager = new ActiveDescendantKeyManager<MatOption>(this.options)\n      .withTypeAhead()\n      .withVerticalOrientation()\n      .withHorizontalOrientation(this._isRtl() ? 'rtl' : 'ltr');\n\n    this._keyManager.tabOut.pipe(takeUntil(this._destroy)).subscribe(() => {\n      // Restore focus to the trigger before closing. Ensures that the focus\n      // position won't be lost if the user got focus into the overlay.\n      this.focus();\n      this.close();\n    });\n\n    this._keyManager.change.pipe(takeUntil(this._destroy)).subscribe(() => {\n      if (this._panelOpen && this.panel) {\n        this._scrollActiveOptionIntoView();\n      } else if (!this._panelOpen && !this.multiple && this._keyManager.activeItem) {\n        this._keyManager.activeItem._selectViaInteraction();\n      }\n    });\n  }\n\n  /** Drops current option subscriptions and IDs and resets from scratch. */\n  private _resetOptions(): void {\n    const changedOrDestroyed = merge(this.options.changes, this._destroy);\n\n    this.optionSelectionChanges.pipe(takeUntil(changedOrDestroyed)).subscribe(event => {\n      this._onSelect(event.source, event.isUserInput);\n\n      if (event.isUserInput && !this.multiple && this._panelOpen) {\n        this.close();\n        this.focus();\n      }\n    });\n\n    // Listen to changes in the internal state of the options and react accordingly.\n    // Handles cases like the labels of the selected options changing.\n    merge(...this.options.map(option => option._stateChanges))\n      .pipe(takeUntil(changedOrDestroyed))\n      .subscribe(() => {\n        this._changeDetectorRef.markForCheck();\n        this.stateChanges.next();\n      });\n\n    this._setOptionIds();\n  }\n\n  /** Invoked when an option is clicked. */\n  private _onSelect(option: MatOption, isUserInput: boolean): void {\n    const wasSelected = this._selectionModel.isSelected(option);\n\n    if (option.value == null && !this._multiple) {\n      option.deselect();\n      this._selectionModel.clear();\n      this._propagateChanges(option.value);\n    } else {\n      option.selected ? this._selectionModel.select(option) : this._selectionModel.deselect(option);\n\n      if (isUserInput) {\n        this._keyManager.setActiveItem(option);\n      }\n\n      if (this.multiple) {\n        this._sortValues();\n\n        if (isUserInput) {\n          // In case the user selected the option with their mouse, we\n          // want to restore focus back to the trigger, in order to\n          // prevent the select keyboard controls from clashing with\n          // the ones from `mat-option`.\n          this.focus();\n        }\n      }\n    }\n\n    if (wasSelected !== this._selectionModel.isSelected(option)) {\n      this._propagateChanges();\n    }\n\n    this.stateChanges.next();\n  }\n\n  /** Sorts the selected values in the selected based on their order in the panel. */\n  private _sortValues() {\n    if (this.multiple) {\n      const options = this.options.toArray();\n\n      this._selectionModel.sort((a, b) => {\n        return this.sortComparator ? this.sortComparator(a, b, options) :\n                                     options.indexOf(a) - options.indexOf(b);\n      });\n      this.stateChanges.next();\n    }\n  }\n\n  /** Emits change event to set the model value. */\n  private _propagateChanges(fallbackValue?: any): void {\n    let valueToEmit: any = null;\n\n    if (this.multiple) {\n      valueToEmit = (this.selected as MatOption[]).map(option => option.value);\n    } else {\n      valueToEmit = this.selected ? (this.selected as MatOption).value : fallbackValue;\n    }\n\n    this._value = valueToEmit;\n    this.valueChange.emit(valueToEmit);\n    this._onChange(valueToEmit);\n    this.selectionChange.emit(new MatSelectChange(this, valueToEmit));\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Records option IDs to pass to the aria-owns property. */\n  private _setOptionIds() {\n    this._optionIds = this.options.map(option => option.id).join(' ');\n  }\n\n  /**\n   * Highlights the selected item. If no option is selected, it will highlight\n   * the first item instead.\n   */\n  private _highlightCorrectOption(): void {\n    if (this._keyManager) {\n      if (this.empty) {\n        this._keyManager.setFirstItemActive();\n      } else {\n        this._keyManager.setActiveItem(this._selectionModel.selected[0]);\n      }\n    }\n  }\n\n  /** Scrolls the active option into view. */\n  private _scrollActiveOptionIntoView(): void {\n    const activeOptionIndex = this._keyManager.activeItemIndex || 0;\n    const labelCount = _countGroupLabelsBeforeOption(activeOptionIndex, this.options,\n        this.optionGroups);\n\n    this.panel.nativeElement.scrollTop = _getOptionScrollPosition(\n      activeOptionIndex + labelCount,\n      this._getItemHeight(),\n      this.panel.nativeElement.scrollTop,\n      SELECT_PANEL_MAX_HEIGHT\n    );\n  }\n\n  /** Focuses the select element. */\n  focus(): void {\n    this._elementRef.nativeElement.focus();\n  }\n\n  /** Gets the index of the provided option in the option list. */\n  private _getOptionIndex(option: MatOption): number | undefined {\n    return this.options.reduce((result: number | undefined, current: MatOption, index: number) => {\n      return result === undefined ? (option === current ? index : undefined) : result;\n    }, undefined);\n  }\n\n  /** Calculates the scroll position and x- and y-offsets of the overlay panel. */\n  private _calculateOverlayPosition(): void {\n    const itemHeight = this._getItemHeight();\n    const items = this._getItemCount();\n    const panelHeight = Math.min(items * itemHeight, SELECT_PANEL_MAX_HEIGHT);\n    const scrollContainerHeight = items * itemHeight;\n\n    // The farthest the panel can be scrolled before it hits the bottom\n    const maxScroll = scrollContainerHeight - panelHeight;\n\n    // If no value is selected we open the popup to the first item.\n    let selectedOptionOffset =\n        this.empty ? 0 : this._getOptionIndex(this._selectionModel.selected[0])!;\n\n    selectedOptionOffset += _countGroupLabelsBeforeOption(selectedOptionOffset, this.options,\n        this.optionGroups);\n\n    // We must maintain a scroll buffer so the selected option will be scrolled to the\n    // center of the overlay panel rather than the top.\n    const scrollBuffer = panelHeight / 2;\n    this._scrollTop = this._calculateOverlayScroll(selectedOptionOffset, scrollBuffer, maxScroll);\n    this._offsetY = this._calculateOverlayOffsetY(selectedOptionOffset, scrollBuffer, maxScroll);\n\n    this._checkOverlayWithinViewport(maxScroll);\n  }\n\n  /**\n   * Calculates the scroll position of the select's overlay panel.\n   *\n   * Attempts to center the selected option in the panel. If the option is\n   * too high or too low in the panel to be scrolled to the center, it clamps the\n   * scroll position to the min or max scroll positions respectively.\n   */\n  _calculateOverlayScroll(selectedIndex: number, scrollBuffer: number,\n                          maxScroll: number): number {\n    const itemHeight = this._getItemHeight();\n    const optionOffsetFromScrollTop = itemHeight * selectedIndex;\n    const halfOptionHeight = itemHeight / 2;\n\n    // Starts at the optionOffsetFromScrollTop, which scrolls the option to the top of the\n    // scroll container, then subtracts the scroll buffer to scroll the option down to\n    // the center of the overlay panel. Half the option height must be re-added to the\n    // scrollTop so the option is centered based on its middle, not its top edge.\n    const optimalScrollPosition = optionOffsetFromScrollTop - scrollBuffer + halfOptionHeight;\n    return Math.min(Math.max(0, optimalScrollPosition), maxScroll);\n  }\n\n  /** Returns the aria-label of the select component. */\n  _getAriaLabel(): string | null {\n    // If an ariaLabelledby value has been set by the consumer, the select should not overwrite the\n    // `aria-labelledby` value by setting the ariaLabel to the placeholder.\n    return this.ariaLabelledby ? null : this.ariaLabel || this.placeholder;\n  }\n\n  /** Returns the aria-labelledby of the select component. */\n  _getAriaLabelledby(): string | null {\n    if (this.ariaLabelledby) {\n      return this.ariaLabelledby;\n    }\n\n    // Note: we use `_getAriaLabel` here, because we want to check whether there's a\n    // computed label. `this.ariaLabel` is only the user-specified label.\n    if (!this._parentFormField || !this._parentFormField._hasFloatingLabel() ||\n      this._getAriaLabel()) {\n      return null;\n    }\n\n    return this._parentFormField._labelId || null;\n  }\n\n  /** Determines the `aria-activedescendant` to be set on the host. */\n  _getAriaActiveDescendant(): string | null {\n    if (this.panelOpen && this._keyManager && this._keyManager.activeItem) {\n      return this._keyManager.activeItem.id;\n    }\n\n    return null;\n  }\n\n  /**\n   * Sets the x-offset of the overlay panel in relation to the trigger's top start corner.\n   * This must be adjusted to align the selected option text over the trigger text when\n   * the panel opens. Will change based on LTR or RTL text direction. Note that the offset\n   * can't be calculated until the panel has been attached, because we need to know the\n   * content width in order to constrain the panel within the viewport.\n   */\n  private _calculateOverlayOffsetX(): void {\n    const overlayRect = this.overlayDir.overlayRef.overlayElement.getBoundingClientRect();\n    const viewportSize = this._viewportRuler.getViewportSize();\n    const isRtl = this._isRtl();\n    const paddingWidth = this.multiple ? SELECT_MULTIPLE_PANEL_PADDING_X + SELECT_PANEL_PADDING_X :\n                                         SELECT_PANEL_PADDING_X * 2;\n    let offsetX: number;\n\n    // Adjust the offset, depending on the option padding.\n    if (this.multiple) {\n      offsetX = SELECT_MULTIPLE_PANEL_PADDING_X;\n    } else {\n      let selected = this._selectionModel.selected[0] || this.options.first;\n      offsetX = selected && selected.group ? SELECT_PANEL_INDENT_PADDING_X : SELECT_PANEL_PADDING_X;\n    }\n\n    // Invert the offset in LTR.\n    if (!isRtl) {\n      offsetX *= -1;\n    }\n\n    // Determine how much the select overflows on each side.\n    const leftOverflow = 0 - (overlayRect.left + offsetX - (isRtl ? paddingWidth : 0));\n    const rightOverflow = overlayRect.right + offsetX - viewportSize.width\n                          + (isRtl ? 0 : paddingWidth);\n\n    // If the element overflows on either side, reduce the offset to allow it to fit.\n    if (leftOverflow > 0) {\n      offsetX += leftOverflow + SELECT_PANEL_VIEWPORT_PADDING;\n    } else if (rightOverflow > 0) {\n      offsetX -= rightOverflow + SELECT_PANEL_VIEWPORT_PADDING;\n    }\n\n    // Set the offset directly in order to avoid having to go through change detection and\n    // potentially triggering \"changed after it was checked\" errors. Round the value to avoid\n    // blurry content in some browsers.\n    this.overlayDir.offsetX = Math.round(offsetX);\n    this.overlayDir.overlayRef.updatePosition();\n  }\n\n  /**\n   * Calculates the y-offset of the select's overlay panel in relation to the\n   * top start corner of the trigger. It has to be adjusted in order for the\n   * selected option to be aligned over the trigger when the panel opens.\n   */\n  private _calculateOverlayOffsetY(selectedIndex: number, scrollBuffer: number,\n                                  maxScroll: number): number {\n    const itemHeight = this._getItemHeight();\n    const optionHeightAdjustment = (itemHeight - this._triggerRect.height) / 2;\n    const maxOptionsDisplayed = Math.floor(SELECT_PANEL_MAX_HEIGHT / itemHeight);\n    let optionOffsetFromPanelTop: number;\n\n    // Disable offset if requested by user by returning 0 as value to offset\n    if (this._disableOptionCentering) {\n      return 0;\n    }\n\n    if (this._scrollTop === 0) {\n      optionOffsetFromPanelTop = selectedIndex * itemHeight;\n    } else if (this._scrollTop === maxScroll) {\n      const firstDisplayedIndex = this._getItemCount() - maxOptionsDisplayed;\n      const selectedDisplayIndex = selectedIndex - firstDisplayedIndex;\n\n      // The first item is partially out of the viewport. Therefore we need to calculate what\n      // portion of it is shown in the viewport and account for it in our offset.\n      let partialItemHeight =\n          itemHeight - (this._getItemCount() * itemHeight - SELECT_PANEL_MAX_HEIGHT) % itemHeight;\n\n      // Because the panel height is longer than the height of the options alone,\n      // there is always extra padding at the top or bottom of the panel. When\n      // scrolled to the very bottom, this padding is at the top of the panel and\n      // must be added to the offset.\n      optionOffsetFromPanelTop = selectedDisplayIndex * itemHeight + partialItemHeight;\n    } else {\n      // If the option was scrolled to the middle of the panel using a scroll buffer,\n      // its offset will be the scroll buffer minus the half height that was added to\n      // center it.\n      optionOffsetFromPanelTop = scrollBuffer - itemHeight / 2;\n    }\n\n    // The final offset is the option's offset from the top, adjusted for the height difference,\n    // multiplied by -1 to ensure that the overlay moves in the correct direction up the page.\n    // The value is rounded to prevent some browsers from blurring the content.\n    return Math.round(optionOffsetFromPanelTop * -1 - optionHeightAdjustment);\n  }\n\n  /**\n   * Checks that the attempted overlay position will fit within the viewport.\n   * If it will not fit, tries to adjust the scroll position and the associated\n   * y-offset so the panel can open fully on-screen. If it still won't fit,\n   * sets the offset back to 0 to allow the fallback position to take over.\n   */\n  private _checkOverlayWithinViewport(maxScroll: number): void {\n    const itemHeight = this._getItemHeight();\n    const viewportSize = this._viewportRuler.getViewportSize();\n\n    const topSpaceAvailable = this._triggerRect.top - SELECT_PANEL_VIEWPORT_PADDING;\n    const bottomSpaceAvailable =\n        viewportSize.height - this._triggerRect.bottom - SELECT_PANEL_VIEWPORT_PADDING;\n\n    const panelHeightTop = Math.abs(this._offsetY);\n    const totalPanelHeight =\n        Math.min(this._getItemCount() * itemHeight, SELECT_PANEL_MAX_HEIGHT);\n    const panelHeightBottom = totalPanelHeight - panelHeightTop - this._triggerRect.height;\n\n    if (panelHeightBottom > bottomSpaceAvailable) {\n      this._adjustPanelUp(panelHeightBottom, bottomSpaceAvailable);\n    } else if (panelHeightTop > topSpaceAvailable) {\n     this._adjustPanelDown(panelHeightTop, topSpaceAvailable, maxScroll);\n    } else {\n      this._transformOrigin = this._getOriginBasedOnOption();\n    }\n  }\n\n  /** Adjusts the overlay panel up to fit in the viewport. */\n  private _adjustPanelUp(panelHeightBottom: number, bottomSpaceAvailable: number) {\n    // Browsers ignore fractional scroll offsets, so we need to round.\n    const distanceBelowViewport = Math.round(panelHeightBottom - bottomSpaceAvailable);\n\n    // Scrolls the panel up by the distance it was extending past the boundary, then\n    // adjusts the offset by that amount to move the panel up into the viewport.\n    this._scrollTop -= distanceBelowViewport;\n    this._offsetY -= distanceBelowViewport;\n    this._transformOrigin = this._getOriginBasedOnOption();\n\n    // If the panel is scrolled to the very top, it won't be able to fit the panel\n    // by scrolling, so set the offset to 0 to allow the fallback position to take\n    // effect.\n    if (this._scrollTop <= 0) {\n      this._scrollTop = 0;\n      this._offsetY = 0;\n      this._transformOrigin = `50% bottom 0px`;\n    }\n  }\n\n  /** Adjusts the overlay panel down to fit in the viewport. */\n  private _adjustPanelDown(panelHeightTop: number, topSpaceAvailable: number,\n                           maxScroll: number) {\n    // Browsers ignore fractional scroll offsets, so we need to round.\n    const distanceAboveViewport = Math.round(panelHeightTop - topSpaceAvailable);\n\n    // Scrolls the panel down by the distance it was extending past the boundary, then\n    // adjusts the offset by that amount to move the panel down into the viewport.\n    this._scrollTop += distanceAboveViewport;\n    this._offsetY += distanceAboveViewport;\n    this._transformOrigin = this._getOriginBasedOnOption();\n\n    // If the panel is scrolled to the very bottom, it won't be able to fit the\n    // panel by scrolling, so set the offset to 0 to allow the fallback position\n    // to take effect.\n    if (this._scrollTop >= maxScroll) {\n      this._scrollTop = maxScroll;\n      this._offsetY = 0;\n      this._transformOrigin = `50% top 0px`;\n      return;\n    }\n  }\n\n  /** Sets the transform origin point based on the selected option. */\n  private _getOriginBasedOnOption(): string {\n    const itemHeight = this._getItemHeight();\n    const optionHeightAdjustment = (itemHeight - this._triggerRect.height) / 2;\n    const originY = Math.abs(this._offsetY) - optionHeightAdjustment + itemHeight / 2;\n    return `50% ${originY}px 0px`;\n  }\n\n  /** Calculates the amount of items in the select. This includes options and group labels. */\n  private _getItemCount(): number {\n    return this.options.length + this.optionGroups.length;\n  }\n\n  /** Calculates the height of the select's options. */\n  private _getItemHeight(): number {\n    return this._triggerFontSize * SELECT_ITEM_HEIGHT_EM;\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  setDescribedByIds(ids: string[]) {\n    this._ariaDescribedby = ids.join(' ');\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  onContainerClick() {\n    this.focus();\n    this.open();\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  get shouldLabelFloat(): boolean {\n    return this._panelOpen || !this.empty;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {AnimationEvent} from '@angular/animations';\nimport {AriaDescriber, FocusMonitor} from '@angular/cdk/a11y';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {ESCAPE} from '@angular/cdk/keycodes';\nimport {BreakpointObserver, Breakpoints, BreakpointState} from '@angular/cdk/layout';\nimport {\n  FlexibleConnectedPositionStrategy,\n  HorizontalConnectionPos,\n  OriginConnectionPosition,\n  Overlay,\n  OverlayConnectionPosition,\n  OverlayRef,\n  ScrollStrategy,\n  VerticalConnectionPos,\n} from '@angular/cdk/overlay';\nimport {ScrollDispatcher} from '@angular/cdk/scrolling';\nimport {Platform} from '@angular/cdk/platform';\nimport {ComponentPortal} from '@angular/cdk/portal';\nimport {take, takeUntil} from 'rxjs/operators';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  Directive,\n  ElementRef,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  ViewContainerRef,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {Subject, Observable} from 'rxjs';\nimport {matTooltipAnimations} from './tooltip-animations';\n\n\nexport type TooltipPosition = 'left' | 'right' | 'above' | 'below' | 'before' | 'after';\n\n/** Time in ms to throttle repositioning after scroll events. */\nexport const SCROLL_THROTTLE_MS = 20;\n\n/** CSS class that will be attached to the overlay panel. */\nexport const TOOLTIP_PANEL_CLASS = 'mat-tooltip-panel';\n\n/**\n * Creates an error to be thrown if the user supplied an invalid tooltip position.\n * @docs-private\n */\nexport function getMatTooltipInvalidPositionError(position: string) {\n  return Error(`Tooltip position \"${position}\" is invalid.`);\n}\n\n/** Injection token that determines the scroll handling while a tooltip is visible. */\nexport const MAT_TOOLTIP_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mat-tooltip-scroll-strategy');\n\n/** @docs-private */\nexport function MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY(overlay: Overlay): () => ScrollStrategy {\n  return () => overlay.scrollStrategies.reposition({scrollThrottle: SCROLL_THROTTLE_MS});\n}\n\n/** @docs-private */\nexport const MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY_PROVIDER = {\n  provide: MAT_TOOLTIP_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY,\n};\n\n/** Default `matTooltip` options that can be overridden. */\nexport interface MatTooltipDefaultOptions {\n  showDelay: number;\n  hideDelay: number;\n  touchendHideDelay: number;\n}\n\n/** Injection token to be used to override the default options for `matTooltip`. */\nexport const MAT_TOOLTIP_DEFAULT_OPTIONS =\n    new InjectionToken<MatTooltipDefaultOptions>('mat-tooltip-default-options', {\n      providedIn: 'root',\n      factory: MAT_TOOLTIP_DEFAULT_OPTIONS_FACTORY\n    });\n\n/** @docs-private */\nexport function MAT_TOOLTIP_DEFAULT_OPTIONS_FACTORY(): MatTooltipDefaultOptions {\n  return {\n    showDelay: 0,\n    hideDelay: 0,\n    touchendHideDelay: 1500,\n  };\n}\n\n/**\n * Directive that attaches a material design tooltip to the host element. Animates the showing and\n * hiding of a tooltip provided position (defaults to below the element).\n *\n * https://material.io/design/components/tooltips.html\n */\n@Directive({\n  selector: '[matTooltip]',\n  exportAs: 'matTooltip',\n  host: {\n    '(longpress)': 'show()',\n    '(keydown)': '_handleKeydown($event)',\n    '(touchend)': '_handleTouchend()',\n  },\n})\nexport class MatTooltip implements OnDestroy {\n  _overlayRef: OverlayRef | null;\n  _tooltipInstance: TooltipComponent | null;\n\n  private _portal: ComponentPortal<TooltipComponent>;\n  private _position: TooltipPosition = 'below';\n  private _disabled: boolean = false;\n  private _tooltipClass: string|string[]|Set<string>|{[key: string]: any};\n\n  /** Allows the user to define the position of the tooltip relative to the parent element */\n  @Input('matTooltipPosition')\n  get position(): TooltipPosition { return this._position; }\n  set position(value: TooltipPosition) {\n    if (value !== this._position) {\n      this._position = value;\n\n      if (this._overlayRef) {\n        this._updatePosition();\n\n        if (this._tooltipInstance) {\n          this._tooltipInstance!.show(0);\n        }\n\n        this._overlayRef.updatePosition();\n      }\n    }\n  }\n\n  /** Disables the display of the tooltip. */\n  @Input('matTooltipDisabled')\n  get disabled(): boolean { return this._disabled; }\n  set disabled(value) {\n    this._disabled = coerceBooleanProperty(value);\n\n    // If tooltip is disabled, hide immediately.\n    if (this._disabled) {\n      this.hide(0);\n    }\n  }\n\n  /** The default delay in ms before showing the tooltip after show is called */\n  @Input('matTooltipShowDelay') showDelay = this._defaultOptions.showDelay;\n\n  /** The default delay in ms before hiding the tooltip after hide is called */\n  @Input('matTooltipHideDelay') hideDelay = this._defaultOptions.hideDelay;\n\n  private _message = '';\n\n  /** The message to be displayed in the tooltip */\n  @Input('matTooltip')\n  get message() { return this._message; }\n  set message(value: string) {\n    this._ariaDescriber.removeDescription(this._elementRef.nativeElement, this._message);\n\n    // If the message is not a string (e.g. number), convert it to a string and trim it.\n    this._message = value != null ? `${value}`.trim() : '';\n\n    if (!this._message && this._isTooltipVisible()) {\n      this.hide(0);\n    } else {\n      this._updateTooltipMessage();\n      this._ariaDescriber.describe(this._elementRef.nativeElement, this.message);\n    }\n  }\n\n  /** Classes to be passed to the tooltip. Supports the same syntax as `ngClass`. */\n  @Input('matTooltipClass')\n  get tooltipClass() { return this._tooltipClass; }\n  set tooltipClass(value: string|string[]|Set<string>|{[key: string]: any}) {\n    this._tooltipClass = value;\n    if (this._tooltipInstance) {\n      this._setTooltipClass(this._tooltipClass);\n    }\n  }\n\n  private _manualListeners = new Map<string, EventListenerOrEventListenerObject>();\n\n  /** Emits when the component is destroyed. */\n  private readonly _destroyed = new Subject<void>();\n\n  constructor(\n    private _overlay: Overlay,\n    private _elementRef: ElementRef<HTMLElement>,\n    private _scrollDispatcher: ScrollDispatcher,\n    private _viewContainerRef: ViewContainerRef,\n    private _ngZone: NgZone,\n    private _platform: Platform,\n    private _ariaDescriber: AriaDescriber,\n    private _focusMonitor: FocusMonitor,\n    @Inject(MAT_TOOLTIP_SCROLL_STRATEGY) private _scrollStrategy,\n    @Optional() private _dir: Directionality,\n    @Optional() @Inject(MAT_TOOLTIP_DEFAULT_OPTIONS)\n      private _defaultOptions: MatTooltipDefaultOptions) {\n\n    const element: HTMLElement = _elementRef.nativeElement;\n\n    // The mouse events shouldn't be bound on mobile devices, because they can prevent the\n    // first tap from firing its click event or can cause the tooltip to open for clicks.\n    if (!_platform.IOS && !_platform.ANDROID) {\n      this._manualListeners\n        .set('mouseenter', () => this.show())\n        .set('mouseleave', () => this.hide())\n        .forEach((listener, event) => element.addEventListener(event, listener));\n    }\n\n    if (element.nodeName === 'INPUT' || element.nodeName === 'TEXTAREA') {\n      // When we bind a gesture event on an element (in this case `longpress`), HammerJS\n      // will add some inline styles by default, including `user-select: none`. This is\n      // problematic on iOS and in Safari, because it will prevent users from typing in inputs.\n      // Since `user-select: none` is not needed for the `longpress` event and can cause unexpected\n      // behavior for text fields, we always clear the `user-select` to avoid such issues.\n      element.style.webkitUserSelect = element.style.userSelect = element.style.msUserSelect = '';\n    }\n\n    // Hammer applies `-webkit-user-drag: none` on all elements by default,\n    // which breaks the native drag&drop. If the consumer explicitly made\n    // the element draggable, clear the `-webkit-user-drag`.\n    if (element.draggable && element.style['webkitUserDrag'] === 'none') {\n      element.style['webkitUserDrag'] = '';\n    }\n\n    _focusMonitor.monitor(_elementRef).pipe(takeUntil(this._destroyed)).subscribe(origin => {\n      // Note that the focus monitor runs outside the Angular zone.\n      if (!origin) {\n        _ngZone.run(() => this.hide(0));\n      } else if (origin === 'keyboard') {\n        _ngZone.run(() => this.show());\n      }\n    });\n  }\n\n  /**\n   * Dispose the tooltip when destroyed.\n   */\n  ngOnDestroy() {\n    if (this._overlayRef) {\n      this._overlayRef.dispose();\n      this._tooltipInstance = null;\n    }\n\n    // Clean up the event listeners set in the constructor\n    if (!this._platform.IOS) {\n      this._manualListeners.forEach((listener, event) =>\n        this._elementRef.nativeElement.removeEventListener(event, listener));\n\n      this._manualListeners.clear();\n    }\n\n    this._destroyed.next();\n    this._destroyed.complete();\n\n    this._ariaDescriber.removeDescription(this._elementRef.nativeElement, this.message);\n    this._focusMonitor.stopMonitoring(this._elementRef);\n  }\n\n  /** Shows the tooltip after the delay in ms, defaults to tooltip-delay-show or 0ms if no input */\n  show(delay: number = this.showDelay): void {\n    if (this.disabled || !this.message || (this._isTooltipVisible() &&\n      !this._tooltipInstance!._showTimeoutId && !this._tooltipInstance!._hideTimeoutId)) {\n        return;\n    }\n\n    const overlayRef = this._createOverlay();\n\n    this._detach();\n    this._portal = this._portal || new ComponentPortal(TooltipComponent, this._viewContainerRef);\n    this._tooltipInstance = overlayRef.attach(this._portal).instance;\n    this._tooltipInstance.afterHidden()\n      .pipe(takeUntil(this._destroyed))\n      .subscribe(() => this._detach());\n    this._setTooltipClass(this._tooltipClass);\n    this._updateTooltipMessage();\n    this._tooltipInstance!.show(delay);\n  }\n\n  /** Hides the tooltip after the delay in ms, defaults to tooltip-delay-hide or 0ms if no input */\n  hide(delay: number = this.hideDelay): void {\n    if (this._tooltipInstance) {\n      this._tooltipInstance.hide(delay);\n    }\n  }\n\n  /** Shows/hides the tooltip */\n  toggle(): void {\n    this._isTooltipVisible() ? this.hide() : this.show();\n  }\n\n  /** Returns true if the tooltip is currently visible to the user */\n  _isTooltipVisible(): boolean {\n    return !!this._tooltipInstance && this._tooltipInstance.isVisible();\n  }\n\n  /** Handles the keydown events on the host element. */\n  _handleKeydown(e: KeyboardEvent) {\n    if (this._isTooltipVisible() && e.keyCode === ESCAPE) {\n      e.stopPropagation();\n      this.hide(0);\n    }\n  }\n\n  /** Handles the touchend events on the host element. */\n  _handleTouchend() {\n    this.hide(this._defaultOptions.touchendHideDelay);\n  }\n\n  /** Create the overlay config and position strategy */\n  private _createOverlay(): OverlayRef {\n    if (this._overlayRef) {\n      return this._overlayRef;\n    }\n\n    // Create connected position strategy that listens for scroll events to reposition.\n    const strategy = this._overlay.position()\n      .flexibleConnectedTo(this._elementRef)\n      .withTransformOriginOn('.mat-tooltip')\n      .withFlexibleDimensions(false)\n      .withViewportMargin(8);\n\n    const scrollableAncestors = this._scrollDispatcher\n      .getAncestorScrollContainers(this._elementRef);\n\n    strategy.withScrollableContainers(scrollableAncestors);\n\n    strategy.positionChanges.pipe(takeUntil(this._destroyed)).subscribe(change => {\n      if (this._tooltipInstance) {\n        if (change.scrollableViewProperties.isOverlayClipped && this._tooltipInstance.isVisible()) {\n          // After position changes occur and the overlay is clipped by\n          // a parent scrollable then close the tooltip.\n          this._ngZone.run(() => this.hide(0));\n        }\n      }\n    });\n\n    this._overlayRef = this._overlay.create({\n      direction: this._dir,\n      positionStrategy: strategy,\n      panelClass: TOOLTIP_PANEL_CLASS,\n      scrollStrategy: this._scrollStrategy()\n    });\n\n    this._updatePosition();\n\n    this._overlayRef.detachments()\n      .pipe(takeUntil(this._destroyed))\n      .subscribe(() => this._detach());\n\n    return this._overlayRef;\n  }\n\n  /** Detaches the currently-attached tooltip. */\n  private _detach() {\n    if (this._overlayRef && this._overlayRef.hasAttached()) {\n      this._overlayRef.detach();\n    }\n\n    this._tooltipInstance = null;\n  }\n\n  /** Updates the position of the current tooltip. */\n  private _updatePosition() {\n    const position =\n        this._overlayRef!.getConfig().positionStrategy as FlexibleConnectedPositionStrategy;\n    const origin = this._getOrigin();\n    const overlay = this._getOverlayPosition();\n\n    position.withPositions([\n      {...origin.main, ...overlay.main},\n      {...origin.fallback, ...overlay.fallback}\n    ]);\n  }\n\n  /**\n   * Returns the origin position and a fallback position based on the user's position preference.\n   * The fallback position is the inverse of the origin (e.g. `'below' -> 'above'`).\n   */\n  _getOrigin(): {main: OriginConnectionPosition, fallback: OriginConnectionPosition} {\n    const isLtr = !this._dir || this._dir.value == 'ltr';\n    const position = this.position;\n    let originPosition: OriginConnectionPosition;\n\n    if (position == 'above' || position == 'below') {\n      originPosition = {originX: 'center', originY: position == 'above' ? 'top' : 'bottom'};\n    } else if (\n      position == 'before' ||\n      (position == 'left' && isLtr) ||\n      (position == 'right' && !isLtr)) {\n      originPosition = {originX: 'start', originY: 'center'};\n    } else if (\n      position == 'after' ||\n      (position == 'right' && isLtr) ||\n      (position == 'left' && !isLtr)) {\n      originPosition = {originX: 'end', originY: 'center'};\n    } else {\n      throw getMatTooltipInvalidPositionError(position);\n    }\n\n    const {x, y} = this._invertPosition(originPosition.originX, originPosition.originY);\n\n    return {\n      main: originPosition,\n      fallback: {originX: x, originY: y}\n    };\n  }\n\n  /** Returns the overlay position and a fallback position based on the user's preference */\n  _getOverlayPosition(): {main: OverlayConnectionPosition, fallback: OverlayConnectionPosition} {\n    const isLtr = !this._dir || this._dir.value == 'ltr';\n    const position = this.position;\n    let overlayPosition: OverlayConnectionPosition;\n\n    if (position == 'above') {\n      overlayPosition = {overlayX: 'center', overlayY: 'bottom'};\n    } else if (position == 'below') {\n      overlayPosition = {overlayX: 'center', overlayY: 'top'};\n    } else if (\n      position == 'before' ||\n      (position == 'left' && isLtr) ||\n      (position == 'right' && !isLtr)) {\n      overlayPosition = {overlayX: 'end', overlayY: 'center'};\n    } else if (\n      position == 'after' ||\n      (position == 'right' && isLtr) ||\n      (position == 'left' && !isLtr)) {\n      overlayPosition = {overlayX: 'start', overlayY: 'center'};\n    } else {\n      throw getMatTooltipInvalidPositionError(position);\n    }\n\n    const {x, y} = this._invertPosition(overlayPosition.overlayX, overlayPosition.overlayY);\n\n    return {\n      main: overlayPosition,\n      fallback: {overlayX: x, overlayY: y}\n    };\n  }\n\n  /** Updates the tooltip message and repositions the overlay according to the new message length */\n  private _updateTooltipMessage() {\n    // Must wait for the message to be painted to the tooltip so that the overlay can properly\n    // calculate the correct positioning based on the size of the text.\n    if (this._tooltipInstance) {\n      this._tooltipInstance.message = this.message;\n      this._tooltipInstance._markForCheck();\n\n      this._ngZone.onMicrotaskEmpty.asObservable().pipe(\n        take(1),\n        takeUntil(this._destroyed)\n      ).subscribe(() => {\n        if (this._tooltipInstance) {\n          this._overlayRef!.updatePosition();\n        }\n      });\n    }\n  }\n\n  /** Updates the tooltip class */\n  private _setTooltipClass(tooltipClass: string|string[]|Set<string>|{[key: string]: any}) {\n    if (this._tooltipInstance) {\n      this._tooltipInstance.tooltipClass = tooltipClass;\n      this._tooltipInstance._markForCheck();\n    }\n  }\n\n  /** Inverts an overlay position. */\n  private _invertPosition(x: HorizontalConnectionPos, y: VerticalConnectionPos) {\n    if (this.position === 'above' || this.position === 'below') {\n      if (y === 'top') {\n        y = 'bottom';\n      } else if (y === 'bottom') {\n        y = 'top';\n      }\n    } else {\n      if (x === 'end') {\n        x = 'start';\n      } else if (x === 'start') {\n        x = 'end';\n      }\n    }\n\n    return {x, y};\n  }\n}\n\nexport type TooltipVisibility = 'initial' | 'visible' | 'hidden';\n\n/**\n * Internal component that wraps the tooltip's content.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-tooltip-component',\n  templateUrl: 'tooltip.html',\n  styleUrls: ['tooltip.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  animations: [matTooltipAnimations.tooltipState],\n  host: {\n    // Forces the element to have a layout in IE and Edge. This fixes issues where the element\n    // won't be rendered if the animations are disabled or there is no web animations polyfill.\n    '[style.zoom]': '_visibility === \"visible\" ? 1 : null',\n    '(body:click)': 'this._handleBodyInteraction()',\n    'aria-hidden': 'true',\n  }\n})\nexport class TooltipComponent {\n  /** Message to display in the tooltip */\n  message: string;\n\n  /** Classes to be added to the tooltip. Supports the same syntax as `ngClass`. */\n  tooltipClass: string|string[]|Set<string>|{[key: string]: any};\n\n  /** The timeout ID of any current timer set to show the tooltip */\n  _showTimeoutId: number | null;\n\n  /** The timeout ID of any current timer set to hide the tooltip */\n  _hideTimeoutId: number | null;\n\n  /** Property watched by the animation framework to show or hide the tooltip */\n  _visibility: TooltipVisibility = 'initial';\n\n  /** Whether interactions on the page should close the tooltip */\n  private _closeOnInteraction: boolean = false;\n\n  /** Subject for notifying that the tooltip has been hidden from the view */\n  private readonly _onHide: Subject<any> = new Subject();\n\n  /** Stream that emits whether the user has a handset-sized display.  */\n  _isHandset: Observable<BreakpointState> = this._breakpointObserver.observe(Breakpoints.Handset);\n\n  constructor(\n    private _changeDetectorRef: ChangeDetectorRef,\n    private _breakpointObserver: BreakpointObserver) {}\n\n  /**\n   * Shows the tooltip with an animation originating from the provided origin\n   * @param delay Amount of milliseconds to the delay showing the tooltip.\n   */\n  show(delay: number): void {\n    // Cancel the delayed hide if it is scheduled\n    if (this._hideTimeoutId) {\n      clearTimeout(this._hideTimeoutId);\n      this._hideTimeoutId = null;\n    }\n\n    // Body interactions should cancel the tooltip if there is a delay in showing.\n    this._closeOnInteraction = true;\n    this._showTimeoutId = setTimeout(() => {\n      this._visibility = 'visible';\n      this._showTimeoutId = null;\n\n      // Mark for check so if any parent component has set the\n      // ChangeDetectionStrategy to OnPush it will be checked anyways\n      this._markForCheck();\n    }, delay);\n  }\n\n  /**\n   * Begins the animation to hide the tooltip after the provided delay in ms.\n   * @param delay Amount of milliseconds to delay showing the tooltip.\n   */\n  hide(delay: number): void {\n    // Cancel the delayed show if it is scheduled\n    if (this._showTimeoutId) {\n      clearTimeout(this._showTimeoutId);\n      this._showTimeoutId = null;\n    }\n\n    this._hideTimeoutId = setTimeout(() => {\n      this._visibility = 'hidden';\n      this._hideTimeoutId = null;\n\n      // Mark for check so if any parent component has set the\n      // ChangeDetectionStrategy to OnPush it will be checked anyways\n      this._markForCheck();\n    }, delay);\n  }\n\n  /** Returns an observable that notifies when the tooltip has been hidden from view. */\n  afterHidden(): Observable<void> {\n    return this._onHide.asObservable();\n  }\n\n  /** Whether the tooltip is being displayed. */\n  isVisible(): boolean {\n    return this._visibility === 'visible';\n  }\n\n  _animationStart() {\n    this._closeOnInteraction = false;\n  }\n\n  _animationDone(event: AnimationEvent): void {\n    const toState = event.toState as TooltipVisibility;\n\n    if (toState === 'hidden' && !this.isVisible()) {\n      this._onHide.next();\n    }\n\n    if (toState === 'visible' || toState === 'hidden') {\n      this._closeOnInteraction = true;\n    }\n  }\n\n  /**\n   * Interactions on the HTML body should close the tooltip immediately as defined in the\n   * material design spec.\n   * https://material.io/design/components/tooltips.html#behavior\n   */\n  _handleBodyInteraction(): void {\n    if (this._closeOnInteraction) {\n      this.hide(0);\n    }\n  }\n\n  /**\n   * Marks that the tooltip needs to be checked in the next change detection run.\n   * Mainly used for rendering the initial text before positioning a tooltip, which\n   * can be problematic in components with OnPush change detection.\n   */\n  _markForCheck(): void {\n    this._changeDetectorRef.markForCheck();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  Directive,\n  ViewEncapsulation\n} from '@angular/core';\nimport {\n  CDK_ROW_TEMPLATE, CdkFooterRow, CdkFooterRowDef,\n  CdkHeaderRow,\n  CdkHeaderRowDef,\n  CdkRow,\n  CdkRowDef,\n} from '@angular/cdk/table';\n\n// TODO(devversion): workaround for https://github.com/angular/material2/issues/12760\nexport const _CdkHeaderRowDef = CdkHeaderRowDef;\nexport const _CdkFooterRowDef = CdkFooterRowDef;\nexport const _CdkRowDef = CdkRowDef;\n\n/**\n * Header row definition for the mat-table.\n * Captures the header row's template and other header properties such as the columns to display.\n */\n@Directive({\n  selector: '[matHeaderRowDef]',\n  providers: [{provide: CdkHeaderRowDef, useExisting: MatHeaderRowDef}],\n  inputs: ['columns: matHeaderRowDef', 'sticky: matHeaderRowDefSticky'],\n})\nexport class MatHeaderRowDef extends _CdkHeaderRowDef {}\n\n/**\n * Footer row definition for the mat-table.\n * Captures the footer row's template and other footer properties such as the columns to display.\n */\n@Directive({\n  selector: '[matFooterRowDef]',\n  providers: [{provide: CdkFooterRowDef, useExisting: MatFooterRowDef}],\n  inputs: ['columns: matFooterRowDef', 'sticky: matFooterRowDefSticky'],\n})\nexport class MatFooterRowDef extends _CdkFooterRowDef {}\n\n/**\n * Data row definition for the mat-table.\n * Captures the data row's template and other properties such as the columns to display and\n * a when predicate that describes when this row should be used.\n */\n@Directive({\n  selector: '[matRowDef]',\n  providers: [{provide: CdkRowDef, useExisting: MatRowDef}],\n  inputs: ['columns: matRowDefColumns', 'when: matRowDefWhen'],\n})\nexport class MatRowDef<T> extends _CdkRowDef<T> {}\n\n/** Footer template container that contains the cell outlet. Adds the right class and role. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-header-row, tr[mat-header-row]',\n  template: CDK_ROW_TEMPLATE,\n  host: {\n    'class': 'mat-header-row',\n    'role': 'row',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matHeaderRow',\n  providers: [{provide: CdkHeaderRow, useExisting: MatHeaderRow}],\n})\nexport class MatHeaderRow extends CdkHeaderRow { }\n\n/** Footer template container that contains the cell outlet. Adds the right class and role. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-footer-row, tr[mat-footer-row]',\n  template: CDK_ROW_TEMPLATE,\n  host: {\n    'class': 'mat-footer-row',\n    'role': 'row',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matFooterRow',\n  providers: [{provide: CdkFooterRow, useExisting: MatFooterRow}],\n})\nexport class MatFooterRow extends CdkFooterRow { }\n\n/** Data row template container that contains the cell outlet. Adds the right class and role. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-row, tr[mat-row]',\n  template: CDK_ROW_TEMPLATE,\n  host: {\n    'class': 'mat-row',\n    'role': 'row',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matRow',\n  providers: [{provide: CdkRow, useExisting: MatRow}],\n})\nexport class MatRow extends CdkRow { }\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatTable} from './table';\nimport {CdkTableModule} from '@angular/cdk/table';\nimport {\n  MatCell,\n  MatCellDef,\n  MatColumnDef,\n  MatFooterCell,\n  MatFooterCellDef,\n  MatHeaderCell,\n  MatHeaderCellDef\n} from './cell';\nimport {\n  MatFooterRow,\n  MatFooterRowDef,\n  MatHeaderRow,\n  MatHeaderRowDef,\n  MatRow,\n  MatRowDef\n} from './row';\nimport {CommonModule} from '@angular/common';\nimport {MatCommonModule} from '@angular/material/core';\n\nconst EXPORTED_DECLARATIONS = [\n  // Table\n  MatTable,\n\n  // Template defs\n  MatHeaderCellDef,\n  MatHeaderRowDef,\n  MatColumnDef,\n  MatCellDef,\n  MatRowDef,\n  MatFooterCellDef,\n  MatFooterRowDef,\n\n  // Cell directives\n  MatHeaderCell,\n  MatCell,\n  MatFooterCell,\n\n  // Row directions\n  MatHeaderRow,\n  MatRow,\n  MatFooterRow,\n];\n\n@NgModule({\n  imports: [CdkTableModule, CommonModule, MatCommonModule],\n  exports: EXPORTED_DECLARATIONS,\n  declarations: EXPORTED_DECLARATIONS,\n})\nexport class MatTableModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {_isNumberValue} from '@angular/cdk/coercion';\nimport {DataSource} from '@angular/cdk/table';\nimport {\n  BehaviorSubject,\n  combineLatest,\n  merge,\n  Observable,\n  of as observableOf,\n  Subscription\n} from 'rxjs';\nimport {MatPaginator, PageEvent} from '@angular/material/paginator';\nimport {MatSort, Sort} from '@angular/material/sort';\nimport {map} from 'rxjs/operators';\n\n/**\n * Corresponds to `Number.MAX_SAFE_INTEGER`. Moved out into a variable here due to\n * flaky browser support and the value not being defined in Closure's typings.\n */\nconst MAX_SAFE_INTEGER = 9007199254740991;\n\n/**\n * Data source that accepts a client-side data array and includes native support of filtering,\n * sorting (using MatSort), and pagination (using MatPaginator).\n *\n * Allows for sort customization by overriding sortingDataAccessor, which defines how data\n * properties are accessed. Also allows for filter customization by overriding filterTermAccessor,\n * which defines how row data is converted to a string for filter matching.\n */\nexport class MatTableDataSource<T> extends DataSource<T> {\n  /** Stream that emits when a new data array is set on the data source. */\n  private readonly _data: BehaviorSubject<T[]>;\n\n  /** Stream emitting render data to the table (depends on ordered data changes). */\n  private readonly _renderData = new BehaviorSubject<T[]>([]);\n\n  /** Stream that emits when a new filter string is set on the data source. */\n  private readonly _filter = new BehaviorSubject<string>('');\n\n  /**\n   * Subscription to the changes that should trigger an update to the table's rendered rows, such\n   * as filtering, sorting, pagination, or base data changes.\n   */\n  _renderChangesSubscription = Subscription.EMPTY;\n\n  /**\n   * The filtered set of data that has been matched by the filter string, or all the data if there\n   * is no filter. Useful for knowing the set of data the table represents.\n   * For example, a 'selectAll()' function would likely want to select the set of filtered data\n   * shown to the user rather than all the data.\n   */\n  filteredData: T[];\n\n  /** Array of data that should be rendered by the table, where each object represents one row. */\n  get data() { return this._data.value; }\n  set data(data: T[]) { this._data.next(data); }\n\n  /**\n   * Filter term that should be used to filter out objects from the data array. To override how\n   * data objects match to this filter string, provide a custom function for filterPredicate.\n   */\n  get filter(): string { return this._filter.value; }\n  set filter(filter: string) { this._filter.next(filter); }\n\n  /**\n   * Instance of the MatSort directive used by the table to control its sorting. Sort changes\n   * emitted by the MatSort will trigger an update to the table's rendered data.\n   */\n  get sort(): MatSort | null { return this._sort; }\n  set sort(sort: MatSort|null) {\n    this._sort = sort;\n    this._updateChangeSubscription();\n  }\n  private _sort: MatSort|null;\n\n  /**\n   * Instance of the MatPaginator component used by the table to control what page of the data is\n   * displayed. Page changes emitted by the MatPaginator will trigger an update to the\n   * table's rendered data.\n   *\n   * Note that the data source uses the paginator's properties to calculate which page of data\n   * should be displayed. If the paginator receives its properties as template inputs,\n   * e.g. `[pageLength]=100` or `[pageIndex]=1`, then be sure that the paginator's view has been\n   * initialized before assigning it to this data source.\n   */\n  get paginator(): MatPaginator | null { return this._paginator; }\n  set paginator(paginator: MatPaginator|null) {\n    this._paginator = paginator;\n    this._updateChangeSubscription();\n  }\n  private _paginator: MatPaginator|null;\n\n  /**\n   * Data accessor function that is used for accessing data properties for sorting through\n   * the default sortData function.\n   * This default function assumes that the sort header IDs (which defaults to the column name)\n   * matches the data's properties (e.g. column Xyz represents data['Xyz']).\n   * May be set to a custom function for different behavior.\n   * @param data Data object that is being accessed.\n   * @param sortHeaderId The name of the column that represents the data.\n   */\n  sortingDataAccessor: ((data: T, sortHeaderId: string) => string|number) =\n      (data: T, sortHeaderId: string): string|number => {\n    const value: any = data[sortHeaderId];\n\n    if (_isNumberValue(value)) {\n      const numberValue = Number(value);\n\n      // Numbers beyond `MAX_SAFE_INTEGER` can't be compared reliably so we\n      // leave them as strings. For more info: https://goo.gl/y5vbSg\n      return numberValue < MAX_SAFE_INTEGER ? numberValue : value;\n    }\n\n    return value;\n  }\n\n  /**\n   * Gets a sorted copy of the data array based on the state of the MatSort. Called\n   * after changes are made to the filtered data or when sort changes are emitted from MatSort.\n   * By default, the function retrieves the active sort and its direction and compares data\n   * by retrieving data using the sortingDataAccessor. May be overridden for a custom implementation\n   * of data ordering.\n   * @param data The array of data that should be sorted.\n   * @param sort The connected MatSort that holds the current sort state.\n   */\n  sortData: ((data: T[], sort: MatSort) => T[]) = (data: T[], sort: MatSort): T[] => {\n    const active = sort.active;\n    const direction = sort.direction;\n    if (!active || direction == '') { return data; }\n\n    return data.sort((a, b) => {\n      let valueA = this.sortingDataAccessor(a, active);\n      let valueB = this.sortingDataAccessor(b, active);\n\n      // If both valueA and valueB exist (truthy), then compare the two. Otherwise, check if\n      // one value exists while the other doesn't. In this case, existing value should come first.\n      // This avoids inconsistent results when comparing values to undefined/null.\n      // If neither value exists, return 0 (equal).\n      let comparatorResult = 0;\n      if (valueA != null && valueB != null) {\n        // Check if one value is greater than the other; if equal, comparatorResult should remain 0.\n        if (valueA > valueB) {\n          comparatorResult = 1;\n        } else if (valueA < valueB) {\n          comparatorResult = -1;\n        }\n      } else if (valueA != null) {\n        comparatorResult = 1;\n      } else if (valueB != null) {\n        comparatorResult = -1;\n      }\n\n      return comparatorResult * (direction == 'asc' ? 1 : -1);\n    });\n  }\n\n  /**\n   * Checks if a data object matches the data source's filter string. By default, each data object\n   * is converted to a string of its properties and returns true if the filter has\n   * at least one occurrence in that string. By default, the filter string has its whitespace\n   * trimmed and the match is case-insensitive. May be overridden for a custom implementation of\n   * filter matching.\n   * @param data Data object used to check against the filter.\n   * @param filter Filter string that has been set on the data source.\n   * @returns Whether the filter matches against the data\n   */\n  filterPredicate: ((data: T, filter: string) => boolean) = (data: T, filter: string): boolean => {\n    // Transform the data into a lowercase string of all property values.\n    const accumulator = (currentTerm, key) => currentTerm + data[key];\n    const dataStr = Object.keys(data).reduce(accumulator, '').toLowerCase();\n\n    // Transform the filter by converting it to lowercase and removing whitespace.\n    const transformedFilter = filter.trim().toLowerCase();\n\n    return dataStr.indexOf(transformedFilter) != -1;\n  }\n\n  constructor(initialData: T[] = []) {\n    super();\n    this._data = new BehaviorSubject<T[]>(initialData);\n    this._updateChangeSubscription();\n  }\n\n  /**\n   * Subscribe to changes that should trigger an update to the table's rendered rows. When the\n   * changes occur, process the current state of the filter, sort, and pagination along with\n   * the provided base data and send it to the table for rendering.\n   */\n  _updateChangeSubscription() {\n    // Sorting and/or pagination should be watched if MatSort and/or MatPaginator are provided.\n    // The events should emit whenever the component emits a change or initializes, or if no\n    // component is provided, a stream with just a null event should be provided.\n    // The `sortChange` and `pageChange` acts as a signal to the combineLatests below so that the\n    // pipeline can progress to the next step. Note that the value from these streams are not used,\n    // they purely act as a signal to progress in the pipeline.\n    const sortChange: Observable<Sort|null|void> = this._sort ?\n        merge<Sort|void>(this._sort.sortChange, this._sort.initialized) :\n        observableOf(null);\n    const pageChange: Observable<PageEvent|null|void> = this._paginator ?\n        merge<PageEvent|void>(this._paginator.page, this._paginator.initialized) :\n        observableOf(null);\n\n    const dataStream = this._data;\n    // Watch for base data or filter changes to provide a filtered set of data.\n    const filteredData = combineLatest(dataStream, this._filter)\n      .pipe(map(([data]) => this._filterData(data)));\n    // Watch for filtered data or sort changes to provide an ordered set of data.\n    const orderedData = combineLatest(filteredData, sortChange)\n      .pipe(map(([data]) => this._orderData(data)));\n    // Watch for ordered data or page changes to provide a paged set of data.\n    const paginatedData = combineLatest(orderedData, pageChange)\n      .pipe(map(([data]) => this._pageData(data)));\n    // Watched for paged data changes and send the result to the table to render.\n    this._renderChangesSubscription.unsubscribe();\n    this._renderChangesSubscription = paginatedData.subscribe(data => this._renderData.next(data));\n  }\n\n  /**\n   * Returns a filtered data array where each filter object contains the filter string within\n   * the result of the filterTermAccessor function. If no filter is set, returns the data array\n   * as provided.\n   */\n  _filterData(data: T[]) {\n    // If there is a filter string, filter out data that does not contain it.\n    // Each data object is converted to a string using the function defined by filterTermAccessor.\n    // May be overridden for customization.\n    this.filteredData =\n        !this.filter ? data : data.filter(obj => this.filterPredicate(obj, this.filter));\n\n    if (this.paginator) { this._updatePaginator(this.filteredData.length); }\n\n    return this.filteredData;\n  }\n\n  /**\n   * Returns a sorted copy of the data if MatSort has a sort applied, otherwise just returns the\n   * data array as provided. Uses the default data accessor for data lookup, unless a\n   * sortDataAccessor function is defined.\n   */\n  _orderData(data: T[]): T[] {\n    // If there is no active sort or direction, return the data without trying to sort.\n    if (!this.sort) { return data; }\n\n    return this.sortData(data.slice(), this.sort);\n  }\n\n  /**\n   * Returns a paged splice of the provided data array according to the provided MatPaginator's page\n   * index and length. If there is no paginator provided, returns the data array as provided.\n   */\n  _pageData(data: T[]): T[] {\n    if (!this.paginator) { return data; }\n\n    const startIndex = this.paginator.pageIndex * this.paginator.pageSize;\n    return data.slice().splice(startIndex, this.paginator.pageSize);\n  }\n\n  /**\n   * Updates the paginator to reflect the length of the filtered data, and makes sure that the page\n   * index does not exceed the paginator's last page. Values are changed in a resolved promise to\n   * guard against making property changes within a round of change detection.\n   */\n  _updatePaginator(filteredDataLength: number) {\n    Promise.resolve().then(() => {\n      if (!this.paginator) { return; }\n\n      this.paginator.length = filteredDataLength;\n\n      // If the page index is set beyond the page, reduce it to the last page.\n      if (this.paginator.pageIndex > 0) {\n        const lastPageIndex = Math.ceil(this.paginator.length / this.paginator.pageSize) - 1 || 0;\n        this.paginator.pageIndex = Math.min(this.paginator.pageIndex, lastPageIndex);\n      }\n    });\n  }\n\n  /**\n   * Used by the MatTable. Called when it connects to the data source.\n   * @docs-private\n   */\n  connect() { return this._renderData; }\n\n  /**\n   * Used by the MatTable. Called when it is destroyed. No-op.\n   * @docs-private\n   */\n  disconnect() { }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, ElementRef, Inject, InjectionToken, NgZone} from '@angular/core';\n\n\n/**\n * Interface for a a MatInkBar positioner method, defining the positioning and width of the ink\n * bar in a set of tabs.\n */\n// tslint:disable-next-line class-name Using leading underscore to denote internal interface.\nexport interface _MatInkBarPositioner {\n  (element: HTMLElement): { left: string, width: string };\n}\n\n/** Injection token for the MatInkBar's Positioner. */\nexport const _MAT_INK_BAR_POSITIONER =\n  new InjectionToken<_MatInkBarPositioner>('MatInkBarPositioner', {\n    providedIn: 'root',\n    factory: _MAT_INK_BAR_POSITIONER_FACTORY\n  });\n\n/**\n * The default positioner function for the MatInkBar.\n * @docs-private\n */\nexport function _MAT_INK_BAR_POSITIONER_FACTORY(): _MatInkBarPositioner {\n  const method = (element: HTMLElement) => ({\n    left: element ? (element.offsetLeft || 0) + 'px' : '0',\n    width: element ? (element.offsetWidth || 0) + 'px' : '0',\n  });\n\n  return method;\n}\n\n/**\n * The ink-bar is used to display and animate the line underneath the current active tab label.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-ink-bar',\n  host: {\n    'class': 'mat-ink-bar',\n  },\n})\nexport class MatInkBar {\n  constructor(\n    private _elementRef: ElementRef<HTMLElement>,\n    private _ngZone: NgZone,\n    @Inject(_MAT_INK_BAR_POSITIONER) private _inkBarPositioner: _MatInkBarPositioner) { }\n\n  /**\n   * Calculates the styles from the provided element in order to align the ink-bar to that element.\n   * Shows the ink bar if previously set as hidden.\n   * @param element\n   */\n  alignToElement(element: HTMLElement) {\n    this.show();\n\n    if (typeof requestAnimationFrame !== 'undefined') {\n      this._ngZone.runOutsideAngular(() => {\n        requestAnimationFrame(() => this._setStyles(element));\n      });\n    } else {\n      this._setStyles(element);\n    }\n  }\n\n  /** Shows the ink bar. */\n  show(): void {\n    this._elementRef.nativeElement.style.visibility = 'visible';\n  }\n\n  /** Hides the ink bar. */\n  hide(): void {\n    this._elementRef.nativeElement.style.visibility = 'hidden';\n  }\n\n  /**\n   * Sets the proper styles to the ink bar element.\n   * @param element\n   */\n  private _setStyles(element: HTMLElement) {\n    const positions = this._inkBarPositioner(element);\n    const inkBar: HTMLElement = this._elementRef.nativeElement;\n\n    inkBar.style.left = positions.left;\n    inkBar.style.width = positions.width;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, TemplateRef} from '@angular/core';\n\n/** Decorates the `ng-template` tags and reads out the template from it. */\n@Directive({selector: '[matTabContent]'})\nexport class MatTabContent {\n  constructor(public template: TemplateRef<any>) { }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive} from '@angular/core';\nimport {CdkPortal} from '@angular/cdk/portal';\n\n// TODO(devversion): Workaround for https://github.com/angular/material2/issues/12760\nexport const _CdkPortal = CdkPortal;\n\n/** Used to flag tab labels for use with the portal directive */\n@Directive({\n  selector: '[mat-tab-label], [matTabLabel]',\n})\nexport class MatTabLabel extends _CdkPortal {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {TemplatePortal} from '@angular/cdk/portal';\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  ContentChild,\n  Input,\n  OnChanges,\n  OnDestroy,\n  OnInit,\n  SimpleChanges,\n  TemplateRef,\n  ViewChild,\n  ViewContainerRef,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {CanDisable, CanDisableCtor, mixinDisabled} from '@angular/material/core';\nimport {Subject} from 'rxjs';\nimport {MatTabContent} from './tab-content';\nimport {MatTabLabel} from './tab-label';\n\n\n// Boilerplate for applying mixins to MatTab.\n/** @docs-private */\nexport class MatTabBase {}\nexport const _MatTabMixinBase: CanDisableCtor & typeof MatTabBase =\n    mixinDisabled(MatTabBase);\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-tab',\n  templateUrl: 'tab.html',\n  inputs: ['disabled'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matTab',\n})\nexport class MatTab extends _MatTabMixinBase implements OnInit, CanDisable, OnChanges, OnDestroy {\n  /** Content for the tab label given by `<ng-template mat-tab-label>`. */\n  @ContentChild(MatTabLabel) templateLabel: MatTabLabel;\n\n  /**\n   * Template provided in the tab content that will be used if present, used to enable lazy-loading\n   */\n  @ContentChild(MatTabContent, {read: TemplateRef}) _explicitContent: TemplateRef<any>;\n\n  /** Template inside the MatTab view that contains an `<ng-content>`. */\n  @ViewChild(TemplateRef) _implicitContent: TemplateRef<any>;\n\n  /** Plain text label for the tab, used when there is no template label. */\n  @Input('label') textLabel: string = '';\n\n  /** Aria label for the tab. */\n  @Input('aria-label') ariaLabel: string;\n\n  /**\n   * Reference to the element that the tab is labelled by.\n   * Will be cleared if `aria-label` is set at the same time.\n   */\n  @Input('aria-labelledby') ariaLabelledby: string;\n\n  /** Portal that will be the hosted content of the tab */\n  private _contentPortal: TemplatePortal | null = null;\n\n  /** @docs-private */\n  get content(): TemplatePortal | null {\n    return this._contentPortal;\n  }\n\n  /** Emits whenever the internal state of the tab changes. */\n  readonly _stateChanges = new Subject<void>();\n\n  /**\n   * The relatively indexed position where 0 represents the center, negative is left, and positive\n   * represents the right.\n   */\n  position: number | null = null;\n\n  /**\n   * The initial relatively index origin of the tab if it was created and selected after there\n   * was already a selected tab. Provides context of what position the tab should originate from.\n   */\n  origin: number | null = null;\n\n  /**\n   * Whether the tab is currently active.\n   */\n  isActive = false;\n\n  constructor(private _viewContainerRef: ViewContainerRef) {\n    super();\n  }\n\n  ngOnChanges(changes: SimpleChanges): void {\n    if (changes.hasOwnProperty('textLabel') || changes.hasOwnProperty('disabled')) {\n      this._stateChanges.next();\n    }\n  }\n\n  ngOnDestroy(): void {\n    this._stateChanges.complete();\n  }\n\n  ngOnInit(): void {\n    this._contentPortal = new TemplatePortal(\n        this._explicitContent || this._implicitContent, this._viewContainerRef);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/**\n * Animations used by the Material tabs.\n * @docs-private\n */\nexport const matTabsAnimations: {\n  readonly translateTab: AnimationTriggerMetadata;\n} = {\n  /** Animation translates a tab along the X axis. */\n  translateTab: trigger('translateTab', [\n    // Note: transitions to `none` instead of 0, because some browsers might blur the content.\n    state('center, void, left-origin-center, right-origin-center', style({transform: 'none'})),\n\n    // If the tab is either on the left or right, we additionally add a `min-height` of 1px\n    // in order to ensure that the element has a height before its state changes. This is\n    // necessary because Chrome does seem to skip the transition in RTL mode if the element does\n    // not have a static height and is not rendered. See related issue: #9465\n    state('left', style({transform: 'translate3d(-100%, 0, 0)', minHeight: '1px'})),\n    state('right', style({transform: 'translate3d(100%, 0, 0)', minHeight: '1px'})),\n\n    transition('* => left, * => right, left => center, right => center',\n        animate('500ms cubic-bezier(0.35, 0, 0.25, 1)')),\n    transition('void => left-origin-center', [\n      style({transform: 'translate3d(-100%, 0, 0)'}),\n      animate('500ms cubic-bezier(0.35, 0, 0.25, 1)')\n    ]),\n    transition('void => right-origin-center', [\n      style({transform: 'translate3d(100%, 0, 0)'}),\n      animate('500ms cubic-bezier(0.35, 0, 0.25, 1)')\n    ])\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ChangeDetectorRef,\n  Input,\n  Inject,\n  Output,\n  EventEmitter,\n  OnDestroy,\n  OnInit,\n  ElementRef,\n  Directive,\n  Optional,\n  ViewEncapsulation,\n  ChangeDetectionStrategy,\n  ComponentFactoryResolver,\n  ViewContainerRef,\n  forwardRef,\n  ViewChild,\n} from '@angular/core';\nimport {AnimationEvent} from '@angular/animations';\nimport {TemplatePortal, CdkPortalOutlet, PortalHostDirective} from '@angular/cdk/portal';\nimport {Directionality, Direction} from '@angular/cdk/bidi';\nimport {Subscription} from 'rxjs';\nimport {matTabsAnimations} from './tabs-animations';\nimport {startWith} from 'rxjs/operators';\n\n/**\n * These position states are used internally as animation states for the tab body. Setting the\n * position state to left, right, or center will transition the tab body from its current\n * position to its respective state. If there is not current position (void, in the case of a new\n * tab body), then there will be no transition animation to its state.\n *\n * In the case of a new tab body that should immediately be centered with an animating transition,\n * then left-origin-center or right-origin-center can be used, which will use left or right as its\n * psuedo-prior state.\n */\nexport type MatTabBodyPositionState =\n    'left' | 'center' | 'right' | 'left-origin-center' | 'right-origin-center';\n\n/**\n * The origin state is an internally used state that is set on a new tab body indicating if it\n * began to the left or right of the prior selected index. For example, if the selected index was\n * set to 1, and a new tab is created and selected at index 2, then the tab body would have an\n * origin of right because its index was greater than the prior selected index.\n */\nexport type MatTabBodyOriginState = 'left' | 'right';\n\n/**\n * The portal host directive for the contents of the tab.\n * @docs-private\n */\n@Directive({\n  selector: '[matTabBodyHost]'\n})\nexport class MatTabBodyPortal extends CdkPortalOutlet implements OnInit, OnDestroy {\n  /** Subscription to events for when the tab body begins centering. */\n  private _centeringSub = Subscription.EMPTY;\n  /** Subscription to events for when the tab body finishes leaving from center position. */\n  private _leavingSub = Subscription.EMPTY;\n\n  constructor(\n    componentFactoryResolver: ComponentFactoryResolver,\n    viewContainerRef: ViewContainerRef,\n    @Inject(forwardRef(() => MatTabBody)) private _host: MatTabBody) {\n      super(componentFactoryResolver, viewContainerRef);\n  }\n\n  /** Set initial visibility or set up subscription for changing visibility. */\n  ngOnInit(): void {\n    super.ngOnInit();\n\n    this._centeringSub = this._host._beforeCentering\n      .pipe(startWith(this._host._isCenterPosition(this._host._position)))\n      .subscribe((isCentering: boolean) => {\n        if (isCentering && !this.hasAttached()) {\n          this.attach(this._host._content);\n        }\n      });\n\n    this._leavingSub = this._host._afterLeavingCenter.subscribe(() => {\n      this.detach();\n    });\n  }\n\n  /** Clean up centering subscription. */\n  ngOnDestroy(): void {\n    super.ngOnDestroy();\n    this._centeringSub.unsubscribe();\n    this._leavingSub.unsubscribe();\n  }\n}\n\n/**\n * Wrapper for the contents of a tab.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-tab-body',\n  templateUrl: 'tab-body.html',\n  styleUrls: ['tab-body.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  animations: [matTabsAnimations.translateTab],\n  host: {\n    'class': 'mat-tab-body',\n  },\n})\nexport class MatTabBody implements OnInit, OnDestroy {\n\n  /** Current position of the tab-body in the tab-group. Zero means that the tab is visible. */\n  private _positionIndex: number;\n\n  /** Subscription to the directionality change observable. */\n  private _dirChangeSubscription = Subscription.EMPTY;\n\n  /** Tab body position state. Used by the animation trigger for the current state. */\n  _position: MatTabBodyPositionState;\n\n  /** Event emitted when the tab begins to animate towards the center as the active tab. */\n  @Output() readonly _onCentering: EventEmitter<number> = new EventEmitter<number>();\n\n  /** Event emitted before the centering of the tab begins. */\n  @Output() readonly _beforeCentering: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n  /** Event emitted before the centering of the tab begins. */\n  @Output() readonly _afterLeavingCenter: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n  /** Event emitted when the tab completes its animation towards the center. */\n  @Output() readonly _onCentered: EventEmitter<void> = new EventEmitter<void>(true);\n\n   /** The portal host inside of this container into which the tab body content will be loaded. */\n  @ViewChild(PortalHostDirective) _portalHost: PortalHostDirective;\n\n  /** The tab body content to display. */\n  @Input('content') _content: TemplatePortal;\n\n  /** Position that will be used when the tab is immediately becoming visible after creation. */\n  @Input() origin: number;\n\n  /** The shifted index position of the tab body, where zero represents the active center tab. */\n  @Input()\n  set position(position: number) {\n    this._positionIndex = position;\n    this._computePositionAnimationState();\n  }\n\n  constructor(private _elementRef: ElementRef<HTMLElement>,\n              @Optional() private _dir: Directionality,\n              /**\n               * @breaking-change 7.0.0 changeDetectorRef to be made required.\n               */\n              changeDetectorRef?: ChangeDetectorRef) {\n\n    if (this._dir && changeDetectorRef) {\n      this._dirChangeSubscription = this._dir.change.subscribe(dir => {\n        this._computePositionAnimationState(dir);\n        changeDetectorRef.markForCheck();\n      });\n    }\n  }\n\n  /**\n   * After initialized, check if the content is centered and has an origin. If so, set the\n   * special position states that transition the tab from the left or right before centering.\n   */\n  ngOnInit() {\n    if (this._position == 'center' && this.origin != null) {\n      this._position = this._computePositionFromOrigin();\n    }\n  }\n\n  ngOnDestroy() {\n    this._dirChangeSubscription.unsubscribe();\n  }\n\n  _onTranslateTabStarted(e: AnimationEvent): void {\n    const isCentering = this._isCenterPosition(e.toState);\n    this._beforeCentering.emit(isCentering);\n    if (isCentering) {\n      this._onCentering.emit(this._elementRef.nativeElement.clientHeight);\n    }\n  }\n\n  _onTranslateTabComplete(e: AnimationEvent): void {\n    // If the transition to the center is complete, emit an event.\n    if (this._isCenterPosition(e.toState) && this._isCenterPosition(this._position)) {\n      this._onCentered.emit();\n    }\n\n    if (this._isCenterPosition(e.fromState) && !this._isCenterPosition(this._position)) {\n      this._afterLeavingCenter.emit();\n    }\n  }\n\n  /** The text direction of the containing app. */\n  _getLayoutDirection(): Direction {\n    return this._dir && this._dir.value === 'rtl' ? 'rtl' : 'ltr';\n  }\n\n  /** Whether the provided position state is considered center, regardless of origin. */\n  _isCenterPosition(position: MatTabBodyPositionState|string): boolean {\n    return position == 'center' ||\n        position == 'left-origin-center' ||\n        position == 'right-origin-center';\n  }\n\n  /** Computes the position state that will be used for the tab-body animation trigger. */\n  private _computePositionAnimationState(dir: Direction = this._getLayoutDirection()) {\n    if (this._positionIndex < 0) {\n      this._position = dir == 'ltr' ? 'left' : 'right';\n    } else if (this._positionIndex > 0) {\n      this._position = dir == 'ltr' ? 'right' : 'left';\n    } else {\n      this._position = 'center';\n    }\n  }\n\n  /**\n   * Computes the position state based on the specified origin position. This is used if the\n   * tab is becoming visible immediately after creation.\n   */\n  private _computePositionFromOrigin(): MatTabBodyPositionState {\n    const dir = this._getLayoutDirection();\n\n    if ((dir == 'ltr' && this.origin <= 0) || (dir == 'rtl' && this.origin > 0)) {\n      return 'left-origin-center';\n    }\n\n    return 'right-origin-center';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, ElementRef} from '@angular/core';\nimport {CanDisable, CanDisableCtor, mixinDisabled} from '@angular/material/core';\n\n\n// Boilerplate for applying mixins to MatTabLabelWrapper.\n/** @docs-private */\nexport class MatTabLabelWrapperBase {}\nexport const _MatTabLabelWrapperMixinBase: CanDisableCtor & typeof MatTabLabelWrapperBase =\n    mixinDisabled(MatTabLabelWrapperBase);\n\n/**\n * Used in the `mat-tab-group` view to display tab labels.\n * @docs-private\n */\n@Directive({\n  selector: '[matTabLabelWrapper]',\n  inputs: ['disabled'],\n  host: {\n    '[class.mat-tab-disabled]': 'disabled',\n    '[attr.aria-disabled]': '!!disabled',\n  }\n})\nexport class MatTabLabelWrapper extends _MatTabLabelWrapperMixinBase implements CanDisable {\n  constructor(public elementRef: ElementRef) {\n    super();\n  }\n\n  /** Sets focus on the wrapper element */\n  focus(): void {\n    this.elementRef.nativeElement.focus();\n  }\n\n  getOffsetLeft(): number {\n    return this.elementRef.nativeElement.offsetLeft;\n  }\n\n  getOffsetWidth(): number {\n    return this.elementRef.nativeElement.offsetWidth;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Direction, Directionality} from '@angular/cdk/bidi';\nimport {coerceNumberProperty} from '@angular/cdk/coercion';\nimport {END, ENTER, HOME, SPACE} from '@angular/cdk/keycodes';\nimport {ViewportRuler} from '@angular/cdk/scrolling';\nimport {\n  AfterContentChecked,\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  ElementRef,\n  EventEmitter,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  Output,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {CanDisableRipple, CanDisableRippleCtor, mixinDisableRipple} from '@angular/material/core';\nimport {merge, of as observableOf, Subject} from 'rxjs';\nimport {takeUntil} from 'rxjs/operators';\nimport {MatInkBar} from './ink-bar';\nimport {MatTabLabelWrapper} from './tab-label-wrapper';\nimport {FocusKeyManager} from '@angular/cdk/a11y';\n\n\n/**\n * The directions that scrolling can go in when the header's tabs exceed the header width. 'After'\n * will scroll the header towards the end of the tabs list and 'before' will scroll towards the\n * beginning of the list.\n */\nexport type ScrollDirection = 'after' | 'before';\n\n/**\n * The distance in pixels that will be overshot when scrolling a tab label into view. This helps\n * provide a small affordance to the label next to it.\n */\nconst EXAGGERATED_OVERSCROLL = 60;\n\n// Boilerplate for applying mixins to MatTabHeader.\n/** @docs-private */\nexport class MatTabHeaderBase {}\nexport const _MatTabHeaderMixinBase: CanDisableRippleCtor & typeof MatTabHeaderBase =\n    mixinDisableRipple(MatTabHeaderBase);\n\n/**\n * The header of the tab group which displays a list of all the tabs in the tab group. Includes\n * an ink bar that follows the currently selected tab. When the tabs list's width exceeds the\n * width of the header container, then arrows will be displayed to allow the user to scroll\n * left and right across the header.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-tab-header',\n  templateUrl: 'tab-header.html',\n  styleUrls: ['tab-header.css'],\n  inputs: ['disableRipple'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {\n    'class': 'mat-tab-header',\n    '[class.mat-tab-header-pagination-controls-enabled]': '_showPaginationControls',\n    '[class.mat-tab-header-rtl]': \"_getLayoutDirection() == 'rtl'\",\n  },\n})\nexport class MatTabHeader extends _MatTabHeaderMixinBase\n    implements AfterContentChecked, AfterContentInit, OnDestroy, CanDisableRipple {\n\n  @ContentChildren(MatTabLabelWrapper) _labelWrappers: QueryList<MatTabLabelWrapper>;\n  @ViewChild(MatInkBar) _inkBar: MatInkBar;\n  @ViewChild('tabListContainer') _tabListContainer: ElementRef;\n  @ViewChild('tabList') _tabList: ElementRef;\n\n  /** The distance in pixels that the tab labels should be translated to the left. */\n  private _scrollDistance = 0;\n\n  /** Whether the header should scroll to the selected index after the view has been checked. */\n  private _selectedIndexChanged = false;\n\n  /** Emits when the component is destroyed. */\n  private readonly _destroyed = new Subject<void>();\n\n  /** Whether the controls for pagination should be displayed */\n  _showPaginationControls = false;\n\n  /** Whether the tab list can be scrolled more towards the end of the tab label list. */\n  _disableScrollAfter = true;\n\n  /** Whether the tab list can be scrolled more towards the beginning of the tab label list. */\n  _disableScrollBefore = true;\n\n  /**\n   * The number of tab labels that are displayed on the header. When this changes, the header\n   * should re-evaluate the scroll position.\n   */\n  private _tabLabelCount: number;\n\n  /** Whether the scroll distance has changed and should be applied after the view is checked. */\n  private _scrollDistanceChanged: boolean;\n\n  /** Used to manage focus between the tabs. */\n  private _keyManager: FocusKeyManager<MatTabLabelWrapper>;\n\n  private _selectedIndex: number = 0;\n\n  /** The index of the active tab. */\n  @Input()\n  get selectedIndex(): number { return this._selectedIndex; }\n  set selectedIndex(value: number) {\n    value = coerceNumberProperty(value);\n    this._selectedIndexChanged = this._selectedIndex != value;\n    this._selectedIndex = value;\n\n    if (this._keyManager) {\n      this._keyManager.updateActiveItemIndex(value);\n    }\n  }\n\n  /** Event emitted when the option is selected. */\n  @Output() readonly selectFocusedIndex = new EventEmitter();\n\n  /** Event emitted when a label is focused. */\n  @Output() readonly indexFocused = new EventEmitter();\n\n  constructor(private _elementRef: ElementRef,\n              private _changeDetectorRef: ChangeDetectorRef,\n              private _viewportRuler: ViewportRuler,\n              @Optional() private _dir: Directionality,\n              // @breaking-change 8.0.0 `_ngZone` parameter to be made required.\n              private _ngZone?: NgZone) {\n    super();\n  }\n\n  ngAfterContentChecked(): void {\n    // If the number of tab labels have changed, check if scrolling should be enabled\n    if (this._tabLabelCount != this._labelWrappers.length) {\n      this._updatePagination();\n      this._tabLabelCount = this._labelWrappers.length;\n      this._changeDetectorRef.markForCheck();\n    }\n\n    // If the selected index has changed, scroll to the label and check if the scrolling controls\n    // should be disabled.\n    if (this._selectedIndexChanged) {\n      this._scrollToLabel(this._selectedIndex);\n      this._checkScrollingControls();\n      this._alignInkBarToSelectedTab();\n      this._selectedIndexChanged = false;\n      this._changeDetectorRef.markForCheck();\n    }\n\n    // If the scroll distance has been changed (tab selected, focused, scroll controls activated),\n    // then translate the header to reflect this.\n    if (this._scrollDistanceChanged) {\n      this._updateTabScrollPosition();\n      this._scrollDistanceChanged = false;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  _handleKeydown(event: KeyboardEvent) {\n    switch (event.keyCode) {\n      case HOME:\n        this._keyManager.setFirstItemActive();\n        event.preventDefault();\n        break;\n      case END:\n        this._keyManager.setLastItemActive();\n        event.preventDefault();\n        break;\n      case ENTER:\n      case SPACE:\n        this.selectFocusedIndex.emit(this.focusIndex);\n        event.preventDefault();\n        break;\n      default:\n        this._keyManager.onKeydown(event);\n    }\n  }\n\n  /**\n   * Aligns the ink bar to the selected tab on load.\n   */\n  ngAfterContentInit() {\n    const dirChange = this._dir ? this._dir.change : observableOf(null);\n    const resize = this._viewportRuler.change(150);\n    const realign = () => {\n      this._updatePagination();\n      this._alignInkBarToSelectedTab();\n    };\n\n    this._keyManager = new FocusKeyManager(this._labelWrappers)\n      .withHorizontalOrientation(this._getLayoutDirection())\n      .withWrap();\n\n    this._keyManager.updateActiveItem(0);\n\n    // Defer the first call in order to allow for slower browsers to lay out the elements.\n    // This helps in cases where the user lands directly on a page with paginated tabs.\n    typeof requestAnimationFrame !== 'undefined' ? requestAnimationFrame(realign) : realign();\n\n    // On dir change or window resize, realign the ink bar and update the orientation of\n    // the key manager if the direction has changed.\n    merge(dirChange, resize).pipe(takeUntil(this._destroyed)).subscribe(() => {\n      realign();\n      this._keyManager.withHorizontalOrientation(this._getLayoutDirection());\n    });\n\n    // If there is a change in the focus key manager we need to emit the `indexFocused`\n    // event in order to provide a public event that notifies about focus changes. Also we realign\n    // the tabs container by scrolling the new focused tab into the visible section.\n    this._keyManager.change.pipe(takeUntil(this._destroyed)).subscribe(newFocusIndex => {\n      this.indexFocused.emit(newFocusIndex);\n      this._setTabFocus(newFocusIndex);\n    });\n  }\n\n  ngOnDestroy() {\n    this._destroyed.next();\n    this._destroyed.complete();\n  }\n\n  /**\n   * Callback for when the MutationObserver detects that the content has changed.\n   */\n  _onContentChanges() {\n    const zoneCallback = () => {\n      this._updatePagination();\n      this._alignInkBarToSelectedTab();\n      this._changeDetectorRef.markForCheck();\n    };\n\n    // The content observer runs outside the `NgZone` by default, which\n    // means that we need to bring the callback back in ourselves.\n    // @breaking-change 8.0.0 Remove null check for `_ngZone` once it's a required parameter.\n    this._ngZone ? this._ngZone.run(zoneCallback) : zoneCallback();\n  }\n\n  /**\n   * Updating the view whether pagination should be enabled or not\n   */\n  _updatePagination() {\n    this._checkPaginationEnabled();\n    this._checkScrollingControls();\n    this._updateTabScrollPosition();\n  }\n\n  /** Tracks which element has focus; used for keyboard navigation */\n  get focusIndex(): number {\n    return this._keyManager ? this._keyManager.activeItemIndex! : 0;\n  }\n\n  /** When the focus index is set, we must manually send focus to the correct label */\n  set focusIndex(value: number) {\n    if (!this._isValidIndex(value) || this.focusIndex === value || !this._keyManager) {\n      return;\n    }\n\n    this._keyManager.setActiveItem(value);\n  }\n\n  /**\n   * Determines if an index is valid.  If the tabs are not ready yet, we assume that the user is\n   * providing a valid index and return true.\n   */\n  _isValidIndex(index: number): boolean {\n    if (!this._labelWrappers) { return true; }\n\n    const tab = this._labelWrappers ? this._labelWrappers.toArray()[index] : null;\n    return !!tab && !tab.disabled;\n  }\n\n  /**\n   * Sets focus on the HTML element for the label wrapper and scrolls it into the view if\n   * scrolling is enabled.\n   */\n  _setTabFocus(tabIndex: number) {\n    if (this._showPaginationControls) {\n      this._scrollToLabel(tabIndex);\n    }\n\n    if (this._labelWrappers && this._labelWrappers.length) {\n      this._labelWrappers.toArray()[tabIndex].focus();\n\n      // Do not let the browser manage scrolling to focus the element, this will be handled\n      // by using translation. In LTR, the scroll left should be 0. In RTL, the scroll width\n      // should be the full width minus the offset width.\n      const containerEl = this._tabListContainer.nativeElement;\n      const dir = this._getLayoutDirection();\n\n      if (dir == 'ltr') {\n        containerEl.scrollLeft = 0;\n      } else {\n        containerEl.scrollLeft = containerEl.scrollWidth - containerEl.offsetWidth;\n      }\n    }\n  }\n\n  /** The layout direction of the containing app. */\n  _getLayoutDirection(): Direction {\n    return this._dir && this._dir.value === 'rtl' ? 'rtl' : 'ltr';\n  }\n\n  /** Performs the CSS transformation on the tab list that will cause the list to scroll. */\n  _updateTabScrollPosition() {\n    const scrollDistance = this.scrollDistance;\n    const translateX = this._getLayoutDirection() === 'ltr' ? -scrollDistance : scrollDistance;\n\n    // Don't use `translate3d` here because we don't want to create a new layer. A new layer\n    // seems to cause flickering and overflow in Internet Explorer. For example, the ink bar\n    // and ripples will exceed the boundaries of the visible tab bar.\n    // See: https://github.com/angular/material2/issues/10276\n    this._tabList.nativeElement.style.transform = `translateX(${translateX}px)`;\n  }\n\n  /** Sets the distance in pixels that the tab header should be transformed in the X-axis. */\n  get scrollDistance(): number { return this._scrollDistance; }\n  set scrollDistance(v: number) {\n    this._scrollDistance = Math.max(0, Math.min(this._getMaxScrollDistance(), v));\n\n    // Mark that the scroll distance has changed so that after the view is checked, the CSS\n    // transformation can move the header.\n    this._scrollDistanceChanged = true;\n    this._checkScrollingControls();\n  }\n\n  /**\n   * Moves the tab list in the 'before' or 'after' direction (towards the beginning of the list or\n   * the end of the list, respectively). The distance to scroll is computed to be a third of the\n   * length of the tab list view window.\n   *\n   * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n   * should be called sparingly.\n   */\n  _scrollHeader(scrollDir: ScrollDirection) {\n    const viewLength = this._tabListContainer.nativeElement.offsetWidth;\n\n    // Move the scroll distance one-third the length of the tab list's viewport.\n    this.scrollDistance += (scrollDir == 'before' ? -1 : 1) * viewLength / 3;\n  }\n\n  /**\n   * Moves the tab list such that the desired tab label (marked by index) is moved into view.\n   *\n   * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n   * should be called sparingly.\n   */\n  _scrollToLabel(labelIndex: number) {\n    const selectedLabel = this._labelWrappers ? this._labelWrappers.toArray()[labelIndex] : null;\n\n    if (!selectedLabel) { return; }\n\n    // The view length is the visible width of the tab labels.\n    const viewLength = this._tabListContainer.nativeElement.offsetWidth;\n\n    let labelBeforePos: number, labelAfterPos: number;\n    if (this._getLayoutDirection() == 'ltr') {\n      labelBeforePos = selectedLabel.getOffsetLeft();\n      labelAfterPos = labelBeforePos + selectedLabel.getOffsetWidth();\n    } else {\n      labelAfterPos = this._tabList.nativeElement.offsetWidth - selectedLabel.getOffsetLeft();\n      labelBeforePos = labelAfterPos - selectedLabel.getOffsetWidth();\n    }\n\n    const beforeVisiblePos = this.scrollDistance;\n    const afterVisiblePos = this.scrollDistance + viewLength;\n\n    if (labelBeforePos < beforeVisiblePos) {\n      // Scroll header to move label to the before direction\n      this.scrollDistance -= beforeVisiblePos - labelBeforePos + EXAGGERATED_OVERSCROLL;\n    } else if (labelAfterPos > afterVisiblePos) {\n      // Scroll header to move label to the after direction\n      this.scrollDistance += labelAfterPos - afterVisiblePos + EXAGGERATED_OVERSCROLL;\n    }\n  }\n\n  /**\n   * Evaluate whether the pagination controls should be displayed. If the scroll width of the\n   * tab list is wider than the size of the header container, then the pagination controls should\n   * be shown.\n   *\n   * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n   * should be called sparingly.\n   */\n  _checkPaginationEnabled() {\n    const isEnabled =\n        this._tabList.nativeElement.scrollWidth > this._elementRef.nativeElement.offsetWidth;\n\n    if (!isEnabled) {\n      this.scrollDistance = 0;\n    }\n\n    if (isEnabled !== this._showPaginationControls) {\n      this._changeDetectorRef.markForCheck();\n    }\n\n    this._showPaginationControls = isEnabled;\n  }\n\n  /**\n   * Evaluate whether the before and after controls should be enabled or disabled.\n   * If the header is at the beginning of the list (scroll distance is equal to 0) then disable the\n   * before button. If the header is at the end of the list (scroll distance is equal to the\n   * maximum distance we can scroll), then disable the after button.\n   *\n   * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n   * should be called sparingly.\n   */\n  _checkScrollingControls() {\n    // Check if the pagination arrows should be activated.\n    this._disableScrollBefore = this.scrollDistance == 0;\n    this._disableScrollAfter = this.scrollDistance == this._getMaxScrollDistance();\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /**\n   * Determines what is the maximum length in pixels that can be set for the scroll distance. This\n   * is equal to the difference in width between the tab list container and tab header container.\n   *\n   * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n   * should be called sparingly.\n   */\n  _getMaxScrollDistance(): number {\n    const lengthOfTabList = this._tabList.nativeElement.scrollWidth;\n    const viewLength = this._tabListContainer.nativeElement.offsetWidth;\n    return (lengthOfTabList - viewLength) || 0;\n  }\n\n  /** Tells the ink-bar to align itself to the current label wrapper */\n  _alignInkBarToSelectedTab(): void {\n    const selectedLabelWrapper = this._labelWrappers && this._labelWrappers.length ?\n        this._labelWrappers.toArray()[this.selectedIndex].elementRef.nativeElement :\n        null;\n\n    this._inkBar.alignToElement(selectedLabelWrapper!);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty, coerceNumberProperty} from '@angular/cdk/coercion';\nimport {\n  AfterContentChecked,\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  ElementRef,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  Output,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {\n  CanColor,\n  CanColorCtor,\n  CanDisableRipple,\n  CanDisableRippleCtor,\n  mixinColor,\n  mixinDisableRipple,\n  ThemePalette,\n} from '@angular/material/core';\nimport {merge, Subscription} from 'rxjs';\nimport {MatTab} from './tab';\nimport {MatTabHeader} from './tab-header';\n\n\n/** Used to generate unique ID's for each tab component */\nlet nextId = 0;\n\n/** A simple change event emitted on focus or selection changes. */\nexport class MatTabChangeEvent {\n  /** Index of the currently-selected tab. */\n  index: number;\n  /** Reference to the currently-selected tab. */\n  tab: MatTab;\n}\n\n/** Possible positions for the tab header. */\nexport type MatTabHeaderPosition = 'above' | 'below';\n\n// Boilerplate for applying mixins to MatTabGroup.\n/** @docs-private */\nexport class MatTabGroupBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatTabGroupMixinBase: CanColorCtor & CanDisableRippleCtor & typeof MatTabGroupBase =\n    mixinColor(mixinDisableRipple(MatTabGroupBase), 'primary');\n\n/**\n * Material design tab-group component.  Supports basic tab pairs (label + content) and includes\n * animated ink-bar, keyboard navigation, and screen reader.\n * See: https://material.io/design/components/tabs.html\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-tab-group',\n  exportAs: 'matTabGroup',\n  templateUrl: 'tab-group.html',\n  styleUrls: ['tab-group.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  inputs: ['color', 'disableRipple'],\n  host: {\n    'class': 'mat-tab-group',\n    '[class.mat-tab-group-dynamic-height]': 'dynamicHeight',\n    '[class.mat-tab-group-inverted-header]': 'headerPosition === \"below\"',\n  },\n})\nexport class MatTabGroup extends _MatTabGroupMixinBase implements AfterContentInit,\n    AfterContentChecked, OnDestroy, CanColor, CanDisableRipple {\n\n  @ContentChildren(MatTab) _tabs: QueryList<MatTab>;\n\n  @ViewChild('tabBodyWrapper') _tabBodyWrapper: ElementRef;\n\n  @ViewChild('tabHeader') _tabHeader: MatTabHeader;\n\n  /** The tab index that should be selected after the content has been checked. */\n  private _indexToSelect: number | null = 0;\n\n  /** Snapshot of the height of the tab body wrapper before another tab is activated. */\n  private _tabBodyWrapperHeight: number = 0;\n\n  /** Subscription to tabs being added/removed. */\n  private _tabsSubscription = Subscription.EMPTY;\n\n  /** Subscription to changes in the tab labels. */\n  private _tabLabelSubscription = Subscription.EMPTY;\n\n  /** Whether the tab group should grow to the size of the active tab. */\n  @Input()\n  get dynamicHeight(): boolean { return this._dynamicHeight; }\n  set dynamicHeight(value: boolean) { this._dynamicHeight = coerceBooleanProperty(value); }\n  private _dynamicHeight: boolean = false;\n\n  /** The index of the active tab. */\n  @Input()\n  get selectedIndex(): number | null { return this._selectedIndex; }\n  set selectedIndex(value: number | null) {\n    this._indexToSelect = coerceNumberProperty(value, null);\n  }\n  private _selectedIndex: number | null = null;\n\n  /** Position of the tab header. */\n  @Input() headerPosition: MatTabHeaderPosition = 'above';\n\n  /** Background color of the tab group. */\n  @Input()\n  get backgroundColor(): ThemePalette { return this._backgroundColor; }\n  set backgroundColor(value: ThemePalette) {\n    const nativeElement: HTMLElement = this._elementRef.nativeElement;\n\n    nativeElement.classList.remove(`mat-background-${this.backgroundColor}`);\n\n    if (value) {\n      nativeElement.classList.add(`mat-background-${value}`);\n    }\n\n    this._backgroundColor = value;\n  }\n  private _backgroundColor: ThemePalette;\n\n  /** Output to enable support for two-way binding on `[(selectedIndex)]` */\n  @Output() readonly selectedIndexChange: EventEmitter<number> = new EventEmitter<number>();\n\n  /** Event emitted when focus has changed within a tab group. */\n  @Output() readonly focusChange: EventEmitter<MatTabChangeEvent> =\n      new EventEmitter<MatTabChangeEvent>();\n\n  /** Event emitted when the body animation has completed */\n  @Output() readonly animationDone: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Event emitted when the tab selection has changed. */\n  @Output() readonly selectedTabChange: EventEmitter<MatTabChangeEvent> =\n      new EventEmitter<MatTabChangeEvent>(true);\n\n  private _groupId: number;\n\n  constructor(elementRef: ElementRef,\n              private _changeDetectorRef: ChangeDetectorRef) {\n    super(elementRef);\n    this._groupId = nextId++;\n  }\n\n  /**\n   * After the content is checked, this component knows what tabs have been defined\n   * and what the selected index should be. This is where we can know exactly what position\n   * each tab should be in according to the new selected index, and additionally we know how\n   * a new selected tab should transition in (from the left or right).\n   */\n  ngAfterContentChecked() {\n    // Don't clamp the `indexToSelect` immediately in the setter because it can happen that\n    // the amount of tabs changes before the actual change detection runs.\n    const indexToSelect = this._indexToSelect = this._clampTabIndex(this._indexToSelect);\n\n    // If there is a change in selected index, emit a change event. Should not trigger if\n    // the selected index has not yet been initialized.\n    if (this._selectedIndex != indexToSelect) {\n      const isFirstRun = this._selectedIndex == null;\n\n      if (!isFirstRun) {\n        this.selectedTabChange.emit(this._createChangeEvent(indexToSelect));\n      }\n\n      // Changing these values after change detection has run\n      // since the checked content may contain references to them.\n      Promise.resolve().then(() => {\n        this._tabs.forEach((tab, index) => tab.isActive = index === indexToSelect);\n\n        if (!isFirstRun) {\n          this.selectedIndexChange.emit(indexToSelect);\n        }\n      });\n    }\n\n    // Setup the position for each tab and optionally setup an origin on the next selected tab.\n    this._tabs.forEach((tab: MatTab, index: number) => {\n      tab.position = index - indexToSelect;\n\n      // If there is already a selected tab, then set up an origin for the next selected tab\n      // if it doesn't have one already.\n      if (this._selectedIndex != null && tab.position == 0 && !tab.origin) {\n        tab.origin = indexToSelect - this._selectedIndex;\n      }\n    });\n\n    if (this._selectedIndex !== indexToSelect) {\n      this._selectedIndex = indexToSelect;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  ngAfterContentInit() {\n    this._subscribeToTabLabels();\n\n    // Subscribe to changes in the amount of tabs, in order to be\n    // able to re-render the content as new tabs are added or removed.\n    this._tabsSubscription = this._tabs.changes.subscribe(() => {\n      const indexToSelect = this._clampTabIndex(this._indexToSelect);\n\n      // Maintain the previously-selected tab if a new tab is added or removed and there is no\n      // explicit change that selects a different tab.\n      if (indexToSelect === this._selectedIndex) {\n        const tabs = this._tabs.toArray();\n\n        for (let i = 0; i < tabs.length; i++) {\n          if (tabs[i].isActive) {\n            // Assign both to the `_indexToSelect` and `_selectedIndex` so we don't fire a changed\n            // event, otherwise the consumer may end up in an infinite loop in some edge cases like\n            // adding a tab within the `selectedIndexChange` event.\n            this._indexToSelect = this._selectedIndex = i;\n            break;\n          }\n        }\n      }\n\n      this._subscribeToTabLabels();\n      this._changeDetectorRef.markForCheck();\n    });\n  }\n\n  ngOnDestroy() {\n    this._tabsSubscription.unsubscribe();\n    this._tabLabelSubscription.unsubscribe();\n  }\n\n  /** Re-aligns the ink bar to the selected tab element. */\n  realignInkBar() {\n    if (this._tabHeader) {\n      this._tabHeader._alignInkBarToSelectedTab();\n    }\n  }\n\n  _focusChanged(index: number) {\n    this.focusChange.emit(this._createChangeEvent(index));\n  }\n\n  private _createChangeEvent(index: number): MatTabChangeEvent {\n    const event = new MatTabChangeEvent;\n    event.index = index;\n    if (this._tabs && this._tabs.length) {\n      event.tab = this._tabs.toArray()[index];\n    }\n    return event;\n  }\n\n  /**\n   * Subscribes to changes in the tab labels. This is needed, because the @Input for the label is\n   * on the MatTab component, whereas the data binding is inside the MatTabGroup. In order for the\n   * binding to be updated, we need to subscribe to changes in it and trigger change detection\n   * manually.\n   */\n  private _subscribeToTabLabels() {\n    if (this._tabLabelSubscription) {\n      this._tabLabelSubscription.unsubscribe();\n    }\n\n    this._tabLabelSubscription = merge(...this._tabs.map(tab => tab._stateChanges))\n      .subscribe(() => this._changeDetectorRef.markForCheck());\n  }\n\n  /** Clamps the given index to the bounds of 0 and the tabs length. */\n  private _clampTabIndex(index: number | null): number {\n    // Note the `|| 0`, which ensures that values like NaN can't get through\n    // and which would otherwise throw the component into an infinite loop\n    // (since Math.max(NaN, 0) === NaN).\n    return Math.min(this._tabs.length - 1, Math.max(index || 0, 0));\n  }\n\n  /** Returns a unique id for each tab label element */\n  _getTabLabelId(i: number): string {\n    return `mat-tab-label-${this._groupId}-${i}`;\n  }\n\n  /** Returns a unique id for each tab content element */\n  _getTabContentId(i: number): string {\n    return `mat-tab-content-${this._groupId}-${i}`;\n  }\n\n  /**\n   * Sets the height of the body wrapper to the height of the activating tab if dynamic\n   * height property is true.\n   */\n  _setTabBodyWrapperHeight(tabHeight: number): void {\n    if (!this._dynamicHeight || !this._tabBodyWrapperHeight) { return; }\n\n    const wrapper: HTMLElement = this._tabBodyWrapper.nativeElement;\n\n    wrapper.style.height = this._tabBodyWrapperHeight + 'px';\n\n    // This conditional forces the browser to paint the height so that\n    // the animation to the new height can have an origin.\n    if (this._tabBodyWrapper.nativeElement.offsetHeight) {\n      wrapper.style.height = tabHeight + 'px';\n    }\n  }\n\n  /** Removes the height of the tab body wrapper. */\n  _removeTabBodyWrapperHeight(): void {\n    this._tabBodyWrapperHeight = this._tabBodyWrapper.nativeElement.clientHeight;\n    this._tabBodyWrapper.nativeElement.style.height = '';\n    this.animationDone.emit();\n  }\n\n  /** Handle click events, setting new selected index if appropriate. */\n  _handleClick(tab: MatTab, tabHeader: MatTabHeader, idx: number) {\n    if (!tab.disabled) {\n      this.selectedIndex = tabHeader.focusIndex = idx;\n    }\n  }\n\n  /** Retrieves the tabindex for the tab. */\n  _getTabIndex(tab: MatTab, idx: number): number | null {\n    if (tab.disabled) {\n      return null;\n    }\n    return this.selectedIndex === idx ? 0 : -1;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  keyframes,\n  AnimationTriggerMetadata, query, animateChild,\n} from '@angular/animations';\nimport {AnimationCurves, AnimationDurations} from '@angular/material/core';\n\nconst SORT_ANIMATION_TRANSITION = AnimationDurations.ENTERING + ' ' +\n                                  AnimationCurves.STANDARD_CURVE;\n\n/**\n * Animations used by MatSort.\n * @docs-private\n */\nexport const matSortAnimations: {\n  readonly indicator: AnimationTriggerMetadata;\n  readonly leftPointer: AnimationTriggerMetadata;\n  readonly rightPointer: AnimationTriggerMetadata;\n  readonly arrowOpacity: AnimationTriggerMetadata;\n  readonly arrowPosition: AnimationTriggerMetadata;\n  readonly allowChildren: AnimationTriggerMetadata;\n} = {\n  /** Animation that moves the sort indicator. */\n  indicator: trigger('indicator', [\n    state('active-asc, asc', style({transform: 'translateY(0px)'})),\n    // 10px is the height of the sort indicator, minus the width of the pointers\n    state('active-desc, desc', style({transform: 'translateY(10px)'})),\n    transition('active-asc <=> active-desc', animate(SORT_ANIMATION_TRANSITION))\n  ]),\n\n  /** Animation that rotates the left pointer of the indicator based on the sorting direction. */\n  leftPointer: trigger('leftPointer', [\n    state('active-asc, asc', style({transform: 'rotate(-45deg)'})),\n    state('active-desc, desc', style({transform: 'rotate(45deg)'})),\n    transition('active-asc <=> active-desc', animate(SORT_ANIMATION_TRANSITION))\n  ]),\n\n  /** Animation that rotates the right pointer of the indicator based on the sorting direction. */\n  rightPointer: trigger('rightPointer', [\n    state('active-asc, asc', style({transform: 'rotate(45deg)'})),\n    state('active-desc, desc', style({transform: 'rotate(-45deg)'})),\n    transition('active-asc <=> active-desc', animate(SORT_ANIMATION_TRANSITION))\n  ]),\n\n  /** Animation that controls the arrow opacity. */\n  arrowOpacity: trigger('arrowOpacity', [\n    state('desc-to-active, asc-to-active, active', style({opacity: 1})),\n    state('desc-to-hint, asc-to-hint, hint', style({opacity: .54})),\n    state('hint-to-desc, active-to-desc, desc, hint-to-asc, active-to-asc, asc, void',\n        style({opacity: 0})),\n    // Transition between all states except for immediate transitions\n    transition('* => asc, * => desc, * => active, * => hint, * => void', animate('0ms')),\n    transition('* <=> *', animate(SORT_ANIMATION_TRANSITION)),\n  ]),\n\n  /**\n   * Animation for the translation of the arrow as a whole. States are separated into two\n   * groups: ones with animations and others that are immediate. Immediate states are asc, desc,\n   * peek, and active. The other states define a specific animation (source-to-destination)\n   * and are determined as a function of their prev user-perceived state and what the next state\n   * should be.\n   */\n  arrowPosition: trigger('arrowPosition', [\n    // Hidden Above => Hint Center\n    transition('* => desc-to-hint, * => desc-to-active',\n        animate(SORT_ANIMATION_TRANSITION, keyframes([\n          style({transform: 'translateY(-25%)'}),\n          style({transform: 'translateY(0)'})\n        ]))),\n    // Hint Center => Hidden Below\n    transition('* => hint-to-desc, * => active-to-desc',\n        animate(SORT_ANIMATION_TRANSITION, keyframes([\n          style({transform: 'translateY(0)'}),\n          style({transform: 'translateY(25%)'})\n        ]))),\n    // Hidden Below => Hint Center\n    transition('* => asc-to-hint, * => asc-to-active',\n        animate(SORT_ANIMATION_TRANSITION, keyframes([\n          style({transform: 'translateY(25%)'}),\n          style({transform: 'translateY(0)'})\n        ]))),\n    // Hint Center => Hidden Above\n    transition('* => hint-to-asc, * => active-to-asc',\n        animate(SORT_ANIMATION_TRANSITION, keyframes([\n          style({transform: 'translateY(0)'}),\n          style({transform: 'translateY(-25%)'})\n        ]))),\n    state('desc-to-hint, asc-to-hint, hint, desc-to-active, asc-to-active, active',\n        style({transform: 'translateY(0)'})),\n    state('hint-to-desc, active-to-desc, desc',\n        style({transform: 'translateY(-25%)'})),\n    state('hint-to-asc, active-to-asc, asc',\n        style({transform: 'translateY(25%)'})),\n  ]),\n\n  /** Necessary trigger that calls animate on children animations. */\n  allowChildren: trigger('allowChildren', [\n    transition('* <=> *', [\n      query('@*', animateChild(), {optional: true})\n    ])\n  ]),\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable, SkipSelf, Optional} from '@angular/core';\nimport {Subject} from 'rxjs';\n\n/**\n * To modify the labels and text displayed, create a new instance of MatSortHeaderIntl and\n * include it in a custom provider.\n */\n@Injectable({providedIn: 'root'})\nexport class MatSortHeaderIntl {\n  /**\n   * Stream that emits whenever the labels here are changed. Use this to notify\n   * components if the labels have changed after initialization.\n   */\n  readonly changes: Subject<void> = new Subject<void>();\n\n  /** ARIA label for the sorting button. */\n  sortButtonLabel = (id: string) => {\n    return `Change sorting for ${id}`;\n  }\n}\n/** @docs-private */\nexport function MAT_SORT_HEADER_INTL_PROVIDER_FACTORY(parentIntl: MatSortHeaderIntl) {\n  return parentIntl || new MatSortHeaderIntl();\n}\n\n/** @docs-private */\nexport const MAT_SORT_HEADER_INTL_PROVIDER = {\n  // If there is already an MatSortHeaderIntl available, use that. Otherwise, provide a new one.\n  provide: MatSortHeaderIntl,\n  deps: [[new Optional(), new SkipSelf(), MatSortHeaderIntl]],\n  useFactory: MAT_SORT_HEADER_INTL_PROVIDER_FACTORY\n};\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {CdkColumnDef} from '@angular/cdk/table';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  Input,\n  OnDestroy,\n  OnInit,\n  Optional,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {CanDisable, CanDisableCtor, mixinDisabled} from '@angular/material/core';\nimport {merge, Subscription} from 'rxjs';\nimport {MatSort, MatSortable} from './sort';\nimport {matSortAnimations} from './sort-animations';\nimport {SortDirection} from './sort-direction';\nimport {getSortHeaderNotContainedWithinSortError} from './sort-errors';\nimport {MatSortHeaderIntl} from './sort-header-intl';\n\n\n// Boilerplate for applying mixins to the sort header.\n/** @docs-private */\nexport class MatSortHeaderBase {}\nexport const _MatSortHeaderMixinBase: CanDisableCtor & typeof MatSortHeaderBase =\n    mixinDisabled(MatSortHeaderBase);\n\n/**\n * Valid positions for the arrow to be in for its opacity and translation. If the state is a\n * sort direction, the position of the arrow will be above/below and opacity 0. If the state is\n * hint, the arrow will be in the center with a slight opacity. Active state means the arrow will\n * be fully opaque in the center.\n *\n * @docs-private\n */\nexport type ArrowViewState = SortDirection | 'hint' | 'active';\n\n/**\n * States describing the arrow's animated position (animating fromState to toState).\n * If the fromState is not defined, there will be no animated transition to the toState.\n * @docs-private\n */\nexport interface ArrowViewStateTransition {\n  fromState?: ArrowViewState;\n  toState: ArrowViewState;\n}\n\n/**\n * Applies sorting behavior (click to change sort) and styles to an element, including an\n * arrow to display the current sort direction.\n *\n * Must be provided with an id and contained within a parent MatSort directive.\n *\n * If used on header cells in a CdkTable, it will automatically default its id from its containing\n * column definition.\n */\n@Component({\n  moduleId: module.id,\n  selector: '[mat-sort-header]',\n  exportAs: 'matSortHeader',\n  templateUrl: 'sort-header.html',\n  styleUrls: ['sort-header.css'],\n  host: {\n    '(click)': '_handleClick()',\n    '(mouseenter)': '_setIndicatorHintVisible(true)',\n    '(longpress)': '_setIndicatorHintVisible(true)',\n    '(mouseleave)': '_setIndicatorHintVisible(false)',\n    '[attr.aria-sort]': '_getAriaSortAttribute()',\n    '[class.mat-sort-header-disabled]': '_isDisabled()',\n  },\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  inputs: ['disabled'],\n  animations: [\n    matSortAnimations.indicator,\n    matSortAnimations.leftPointer,\n    matSortAnimations.rightPointer,\n    matSortAnimations.arrowOpacity,\n    matSortAnimations.arrowPosition,\n    matSortAnimations.allowChildren,\n  ]\n})\nexport class MatSortHeader extends _MatSortHeaderMixinBase\n    implements CanDisable, MatSortable, OnDestroy, OnInit {\n  private _rerenderSubscription: Subscription;\n\n  /**\n   * Flag set to true when the indicator should be displayed while the sort is not active. Used to\n   * provide an affordance that the header is sortable by showing on focus and hover.\n   */\n  _showIndicatorHint: boolean = false;\n\n  /**\n   * The view transition state of the arrow (translation/ opacity) - indicates its `from` and `to`\n   * position through the animation. If animations are currently disabled, the fromState is removed\n   * so that there is no animation displayed.\n   */\n  _viewState: ArrowViewStateTransition;\n\n  /** The direction the arrow should be facing according to the current state. */\n  _arrowDirection: SortDirection = '';\n\n  /**\n   * Whether the view state animation should show the transition between the `from` and `to` states.\n   */\n  _disableViewStateAnimation = false;\n\n  /**\n   * ID of this sort header. If used within the context of a CdkColumnDef, this will default to\n   * the column's name.\n   */\n  @Input('mat-sort-header') id: string;\n\n  /** Sets the position of the arrow that displays when sorted. */\n  @Input() arrowPosition: 'before' | 'after' = 'after';\n\n  /** Overrides the sort start value of the containing MatSort for this MatSortable. */\n  @Input() start: 'asc' | 'desc';\n\n  /** Overrides the disable clear value of the containing MatSort for this MatSortable. */\n  @Input()\n  get disableClear(): boolean { return this._disableClear; }\n  set disableClear(v) { this._disableClear = coerceBooleanProperty(v); }\n  private _disableClear: boolean;\n\n  constructor(public _intl: MatSortHeaderIntl,\n              changeDetectorRef: ChangeDetectorRef,\n              @Optional() public _sort: MatSort,\n              @Optional() public _cdkColumnDef: CdkColumnDef) {\n\n    super();\n\n    if (!_sort) {\n      throw getSortHeaderNotContainedWithinSortError();\n    }\n\n    this._rerenderSubscription = merge(_sort.sortChange, _sort._stateChanges, _intl.changes)\n        .subscribe(() => {\n          if (this._isSorted()) {\n            this._updateArrowDirection();\n          }\n\n          // If this header was recently active and now no longer sorted, animate away the arrow.\n          if (!this._isSorted() && this._viewState && this._viewState.toState === 'active') {\n            this._disableViewStateAnimation = false;\n            this._setAnimationTransitionState({fromState: 'active', toState: this._arrowDirection});\n          }\n\n          changeDetectorRef.markForCheck();\n        });\n  }\n\n  ngOnInit() {\n    if (!this.id && this._cdkColumnDef) {\n      this.id = this._cdkColumnDef.name;\n    }\n\n    // Initialize the direction of the arrow and set the view state to be immediately that state.\n    this._updateArrowDirection();\n    this._setAnimationTransitionState(\n        {toState: this._isSorted() ? 'active' : this._arrowDirection});\n\n    this._sort.register(this);\n  }\n\n  ngOnDestroy() {\n    this._sort.deregister(this);\n    this._rerenderSubscription.unsubscribe();\n  }\n\n  /**\n   * Sets the \"hint\" state such that the arrow will be semi-transparently displayed as a hint to the\n   * user showing what the active sort will become. If set to false, the arrow will fade away.\n   */\n  _setIndicatorHintVisible(visible: boolean) {\n    // No-op if the sort header is disabled - should not make the hint visible.\n    if (this._isDisabled() && visible) { return; }\n\n    this._showIndicatorHint = visible;\n\n    if (!this._isSorted()) {\n      this._updateArrowDirection();\n      if (this._showIndicatorHint) {\n        this._setAnimationTransitionState({fromState: this._arrowDirection, toState: 'hint'});\n      } else {\n        this._setAnimationTransitionState({fromState: 'hint', toState: this._arrowDirection});\n      }\n    }\n  }\n\n  /**\n   * Sets the animation transition view state for the arrow's position and opacity. If the\n   * `disableViewStateAnimation` flag is set to true, the `fromState` will be ignored so that\n   * no animation appears.\n   */\n  _setAnimationTransitionState(viewState: ArrowViewStateTransition) {\n    this._viewState = viewState;\n\n    // If the animation for arrow position state (opacity/translation) should be disabled,\n    // remove the fromState so that it jumps right to the toState.\n    if (this._disableViewStateAnimation) {\n      this._viewState = {toState: viewState.toState};\n    }\n  }\n\n  /** Triggers the sort on this sort header and removes the indicator hint. */\n  _handleClick() {\n    if (this._isDisabled()) { return; }\n\n    this._sort.sort(this);\n\n    // Do not show the animation if the header was already shown in the right position.\n    if (this._viewState.toState === 'hint' || this._viewState.toState === 'active') {\n      this._disableViewStateAnimation = true;\n    }\n\n    // If the arrow is now sorted, animate the arrow into place. Otherwise, animate it away into\n    // the direction it is facing.\n    const viewState: ArrowViewStateTransition = this._isSorted() ?\n        {fromState: this._arrowDirection, toState: 'active'} :\n        {fromState: 'active', toState: this._arrowDirection};\n    this._setAnimationTransitionState(viewState);\n\n    this._showIndicatorHint = false;\n  }\n\n  /** Whether this MatSortHeader is currently sorted in either ascending or descending order. */\n  _isSorted() {\n    return this._sort.active == this.id &&\n        (this._sort.direction === 'asc' || this._sort.direction === 'desc');\n  }\n\n  /** Returns the animation state for the arrow direction (indicator and pointers). */\n  _getArrowDirectionState() {\n    return `${this._isSorted() ? 'active-' : ''}${this._arrowDirection}`;\n  }\n\n  /** Returns the arrow position state (opacity, translation). */\n  _getArrowViewState() {\n    const fromState = this._viewState.fromState;\n    return (fromState ? `${fromState}-to-` : '') + this._viewState.toState;\n  }\n\n  /**\n   * Updates the direction the arrow should be pointing. If it is not sorted, the arrow should be\n   * facing the start direction. Otherwise if it is sorted, the arrow should point in the currently\n   * active sorted direction. The reason this is updated through a function is because the direction\n   * should only be changed at specific times - when deactivated but the hint is displayed and when\n   * the sort is active and the direction changes. Otherwise the arrow's direction should linger\n   * in cases such as the sort becoming deactivated but we want to animate the arrow away while\n   * preserving its direction, even though the next sort direction is actually different and should\n   * only be changed once the arrow displays again (hint or activation).\n   */\n  _updateArrowDirection() {\n    this._arrowDirection = this._isSorted() ?\n        this._sort.direction :\n        (this.start || this._sort.start);\n  }\n\n  _isDisabled() {\n    return this._sort.disabled || this.disabled;\n  }\n\n  /**\n   * Gets the aria-sort attribute that should be applied to this sort header. If this header\n   * is not sorted, returns null so that the attribute is removed from the host element. Aria spec\n   * says that the aria-sort property should only be present on one header at a time, so removing\n   * ensures this is true.\n   */\n  _getAriaSortAttribute() {\n    if (!this._isSorted()) { return null; }\n\n    return this._sort.direction == 'asc' ? 'ascending' : 'descending';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatSortHeader} from './sort-header';\nimport {MatSort} from './sort';\nimport {MAT_SORT_HEADER_INTL_PROVIDER} from './sort-header-intl';\nimport {CommonModule} from '@angular/common';\n\n\n@NgModule({\n  imports: [CommonModule],\n  exports: [MatSort, MatSortHeader],\n  declarations: [MatSort, MatSortHeader],\n  providers: [MAT_SORT_HEADER_INTL_PROVIDER]\n})\nexport class MatSortModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive} from '@angular/core';\nimport {CdkStepLabel} from '@angular/cdk/stepper';\n\n// TODO(devversion): workaround for https://github.com/angular/material2/issues/12760\nexport const _CdkStepLabel = CdkStepLabel;\n\n@Directive({\n  selector: '[matStepLabel]',\n})\nexport class MatStepLabel extends _CdkStepLabel {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable} from '@angular/core';\nimport {Subject} from 'rxjs';\n\n\n/** Stepper data that is required for internationalization. */\n@Injectable({providedIn: 'root'})\nexport class MatStepperIntl {\n  /**\n   * Stream that emits whenever the labels here are changed. Use this to notify\n   * components if the labels have changed after initialization.\n   */\n  readonly changes: Subject<void> = new Subject<void>();\n\n  /** Label that is rendered below optional steps. */\n  optionalLabel: string = 'Optional';\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor} from '@angular/cdk/a11y';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  Input,\n  OnDestroy,\n  ViewEncapsulation,\n  TemplateRef,\n} from '@angular/core';\nimport {Subscription} from 'rxjs';\nimport {MatStepLabel} from './step-label';\nimport {MatStepperIntl} from './stepper-intl';\nimport {MatStepperIconContext} from './stepper-icon';\nimport {StepState} from '@angular/cdk/stepper';\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-step-header',\n  templateUrl: 'step-header.html',\n  styleUrls: ['step-header.css'],\n  host: {\n    'class': 'mat-step-header',\n    'role': 'tab',\n  },\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatStepHeader implements OnDestroy {\n  private _intlSubscription: Subscription;\n\n  /** State of the given step. */\n  @Input() state: StepState;\n\n  /** Label of the given step. */\n  @Input() label: MatStepLabel | string;\n\n  /** Error message to display when there's an error. */\n  @Input() errorMessage: string;\n\n  /** Overrides for the header icons, passed in via the stepper. */\n  @Input() iconOverrides: {[key: string]: TemplateRef<MatStepperIconContext>};\n\n  /** Index of the given step. */\n  @Input() index: number;\n\n  /** Whether the given step is selected. */\n  @Input() selected: boolean;\n\n  /** Whether the given step label is active. */\n  @Input() active: boolean;\n\n  /** Whether the given step is optional. */\n  @Input() optional: boolean;\n\n  constructor(\n    public _intl: MatStepperIntl,\n    private _focusMonitor: FocusMonitor,\n    private _element: ElementRef<HTMLElement>,\n    changeDetectorRef: ChangeDetectorRef) {\n    _focusMonitor.monitor(_element, true);\n    this._intlSubscription = _intl.changes.subscribe(() => changeDetectorRef.markForCheck());\n  }\n\n  ngOnDestroy() {\n    this._intlSubscription.unsubscribe();\n    this._focusMonitor.stopMonitoring(this._element);\n  }\n\n  /** Returns string label of given step if it is a text label. */\n  _stringLabel(): string | null {\n    return this.label instanceof MatStepLabel ? null : this.label;\n  }\n\n  /** Returns MatStepLabel if the label of given step is a template label. */\n  _templateLabel(): MatStepLabel | null {\n    return this.label instanceof MatStepLabel ? this.label : null;\n  }\n\n  /** Returns the host HTML element. */\n  _getHostElement() {\n    return this._element.nativeElement;\n  }\n\n  /** Template context variables that are exposed to the `matStepperIcon` instances. */\n  _getIconContext(): MatStepperIconContext {\n    return {\n      index: this.index,\n      active: this.active,\n      optional: this.optional\n    };\n  }\n\n  focus() {\n    this._getHostElement().focus();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/**\n * Animations used by the Material steppers.\n * @docs-private\n */\nexport const matStepperAnimations: {\n  readonly horizontalStepTransition: AnimationTriggerMetadata;\n  readonly verticalStepTransition: AnimationTriggerMetadata;\n} = {\n  /** Animation that transitions the step along the X axis in a horizontal stepper. */\n  horizontalStepTransition: trigger('stepTransition', [\n    state('previous', style({transform: 'translate3d(-100%, 0, 0)', visibility: 'hidden'})),\n    state('current', style({transform: 'none', visibility: 'visible'})),\n    state('next', style({transform: 'translate3d(100%, 0, 0)', visibility: 'hidden'})),\n    transition('* => *', animate('500ms cubic-bezier(0.35, 0, 0.25, 1)'))\n  ]),\n\n  /** Animation that transitions the step along the Y axis in a vertical stepper. */\n  verticalStepTransition: trigger('stepTransition', [\n    state('previous', style({height: '0px', visibility: 'hidden'})),\n    state('next', style({height: '0px', visibility: 'hidden'})),\n    state('current', style({height: '*', visibility: 'visible'})),\n    transition('* <=> current', animate('225ms cubic-bezier(0.4, 0.0, 0.2, 1)'))\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, Input, TemplateRef} from '@angular/core';\nimport {StepState} from '@angular/cdk/stepper';\n\n/** Template context available to an attached `matStepperIcon`. */\nexport interface MatStepperIconContext {\n  /** Index of the step. */\n  index: number;\n  /** Whether the step is currently active. */\n  active: boolean;\n  /** Whether the step is optional. */\n  optional: boolean;\n}\n\n/**\n * Template to be used to override the icons inside the step header.\n */\n@Directive({\n  selector: 'ng-template[matStepperIcon]',\n})\nexport class MatStepperIcon {\n  /** Name of the icon to be overridden. */\n  @Input('matStepperIcon') name: StepState;\n\n  constructor(public templateRef: TemplateRef<MatStepperIconContext>) {}\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directionality} from '@angular/cdk/bidi';\nimport {\n  CdkStep,\n  CdkStepper,\n  StepContentPositionState,\n  MAT_STEPPER_GLOBAL_OPTIONS,\n  StepperOptions\n} from '@angular/cdk/stepper';\nimport {AnimationEvent} from '@angular/animations';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  Optional,\n  Output,\n  QueryList,\n  SkipSelf,\n  TemplateRef,\n  ViewChildren,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {FormControl, FormGroupDirective, NgForm} from '@angular/forms';\nimport {DOCUMENT} from '@angular/common';\nimport {ErrorStateMatcher} from '@angular/material/core';\nimport {takeUntil} from 'rxjs/operators';\n\nimport {MatStepHeader} from './step-header';\nimport {MatStepLabel} from './step-label';\nimport {matStepperAnimations} from './stepper-animations';\nimport {MatStepperIcon, MatStepperIconContext} from './stepper-icon';\n\n// TODO(devversion): workaround for https://github.com/angular/material2/issues/12760\nexport const _CdkStepper = CdkStepper;\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-step',\n  templateUrl: 'step.html',\n  providers: [{provide: ErrorStateMatcher, useExisting: MatStep}],\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matStep',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatStep extends CdkStep implements ErrorStateMatcher {\n  /** Content for step label given by `<ng-template matStepLabel>`. */\n  @ContentChild(MatStepLabel) stepLabel: MatStepLabel;\n\n  /** @breaking-change 8.0.0 remove the `?` after `stepperOptions` */\n  constructor(@Inject(forwardRef(() => MatStepper)) stepper: MatStepper,\n              @SkipSelf() private _errorStateMatcher: ErrorStateMatcher,\n              @Optional() @Inject(MAT_STEPPER_GLOBAL_OPTIONS) stepperOptions?: StepperOptions) {\n    super(stepper, stepperOptions);\n  }\n\n  /** Custom error state matcher that additionally checks for validity of interacted form. */\n  isErrorState(control: FormControl | null, form: FormGroupDirective | NgForm | null): boolean {\n    const originalErrorState = this._errorStateMatcher.isErrorState(control, form);\n\n    // Custom error state checks for the validity of form that is not submitted or touched\n    // since user can trigger a form change by calling for another step without directly\n    // interacting with the current form.\n    const customErrorState = !!(control && control.invalid && this.interacted);\n\n    return originalErrorState || customErrorState;\n  }\n}\n\n\n@Directive({\n  selector: '[matStepper]'\n})\nexport class MatStepper extends _CdkStepper implements AfterContentInit {\n  /** The list of step headers of the steps in the stepper. */\n  @ViewChildren(MatStepHeader) _stepHeader: QueryList<MatStepHeader>;\n\n  /** Steps that the stepper holds. */\n  @ContentChildren(MatStep) _steps: QueryList<MatStep>;\n\n  /** Custom icon overrides passed in by the consumer. */\n  @ContentChildren(MatStepperIcon) _icons: QueryList<MatStepperIcon>;\n\n  /** Event emitted when the current step is done transitioning in. */\n  @Output() readonly animationDone: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Consumer-specified template-refs to be used to override the header icons. */\n  _iconOverrides: {[key: string]: TemplateRef<MatStepperIconContext>} = {};\n\n  ngAfterContentInit() {\n    const icons = this._icons.toArray();\n    icons.forEach(({name, templateRef}) => this._iconOverrides[name] = templateRef);\n\n    // Mark the component for change detection whenever the content children query changes\n    this._steps.changes.pipe(takeUntil(this._destroyed)).subscribe(() => this._stateChanged());\n  }\n\n  _animationDone(event: AnimationEvent) {\n    if ((event.toState as StepContentPositionState) === 'current') {\n      this.animationDone.emit();\n    }\n  }\n}\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-horizontal-stepper',\n  exportAs: 'matHorizontalStepper',\n  templateUrl: 'stepper-horizontal.html',\n  styleUrls: ['stepper.css'],\n  inputs: ['selectedIndex'],\n  host: {\n    'class': 'mat-stepper-horizontal',\n    '[class.mat-stepper-label-position-end]': 'labelPosition == \"end\"',\n    '[class.mat-stepper-label-position-bottom]': 'labelPosition == \"bottom\"',\n    'aria-orientation': 'horizontal',\n    'role': 'tablist',\n  },\n  animations: [matStepperAnimations.horizontalStepTransition],\n  providers: [{provide: MatStepper, useExisting: MatHorizontalStepper}],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatHorizontalStepper extends MatStepper {\n  /** Whether the label should display in bottom or end position. */\n  @Input()\n  labelPosition: 'bottom' | 'end' = 'end';\n}\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-vertical-stepper',\n  exportAs: 'matVerticalStepper',\n  templateUrl: 'stepper-vertical.html',\n  styleUrls: ['stepper.css'],\n  inputs: ['selectedIndex'],\n  host: {\n    'class': 'mat-stepper-vertical',\n    'aria-orientation': 'vertical',\n    'role': 'tablist',\n  },\n  animations: [matStepperAnimations.verticalStepTransition],\n  providers: [{provide: MatStepper, useExisting: MatVerticalStepper}],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatVerticalStepper extends MatStepper {\n  constructor(\n    @Optional() dir: Directionality,\n    changeDetectorRef: ChangeDetectorRef,\n    // @breaking-change 8.0.0 `elementRef` and `_document` parameters to become required.\n    elementRef?: ElementRef<HTMLElement>,\n    @Inject(DOCUMENT) _document?: any) {\n    super(dir, changeDetectorRef, elementRef, _document);\n    this._orientation = 'vertical';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive} from '@angular/core';\nimport {CdkStepper, CdkStepperNext, CdkStepperPrevious} from '@angular/cdk/stepper';\nimport {MatStepper} from './stepper';\n\n// TODO(devversion): workaround for https://github.com/angular/material2/issues/12760\nexport const _CdkStepperNext = CdkStepperNext;\nexport const _CdkStepperPrevious = CdkStepperPrevious;\n\n/** Button that moves to the next step in a stepper workflow. */\n@Directive({\n  selector: 'button[matStepperNext]',\n  host: {\n    '(click)': '_stepper.next()',\n    '[type]': 'type',\n  },\n  inputs: ['type'],\n  providers: [{provide: CdkStepper, useExisting: MatStepper}]\n})\nexport class MatStepperNext extends _CdkStepperNext {}\n\n/** Button that moves to the previous step in a stepper workflow. */\n@Directive({\n  selector: 'button[matStepperPrevious]',\n  host: {\n    '(click)': '_stepper.previous()',\n    '[type]': 'type',\n  },\n  inputs: ['type'],\n  providers: [{provide: CdkStepper, useExisting: MatStepper}]\n})\nexport class MatStepperPrevious extends _CdkStepperPrevious {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {PortalModule} from '@angular/cdk/portal';\nimport {CdkStepperModule} from '@angular/cdk/stepper';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatButtonModule} from '@angular/material/button';\nimport {ErrorStateMatcher, MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {MatIconModule} from '@angular/material/icon';\nimport {MatStepHeader} from './step-header';\nimport {MatStepLabel} from './step-label';\nimport {MatHorizontalStepper, MatStep, MatStepper, MatVerticalStepper} from './stepper';\nimport {MatStepperNext, MatStepperPrevious} from './stepper-button';\nimport {MatStepperIcon} from './stepper-icon';\nimport {MatStepperIntl} from './stepper-intl';\n\n\n@NgModule({\n  imports: [\n    MatCommonModule,\n    CommonModule,\n    PortalModule,\n    MatButtonModule,\n    CdkStepperModule,\n    MatIconModule,\n    MatRippleModule,\n  ],\n  exports: [\n    MatCommonModule,\n    MatHorizontalStepper,\n    MatVerticalStepper,\n    MatStep,\n    MatStepLabel,\n    MatStepper,\n    MatStepperNext,\n    MatStepperPrevious,\n    MatStepHeader,\n    MatStepperIcon,\n  ],\n  declarations: [\n    MatHorizontalStepper,\n    MatVerticalStepper,\n    MatStep,\n    MatStepLabel,\n    MatStepper,\n    MatStepperNext,\n    MatStepperPrevious,\n    MatStepHeader,\n    MatStepperIcon,\n  ],\n  providers: [MatStepperIntl, ErrorStateMatcher],\n})\nexport class MatStepperModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CDK_TABLE_TEMPLATE, CdkTable} from '@angular/cdk/table';\nimport {ChangeDetectionStrategy, Component, ViewEncapsulation} from '@angular/core';\n\n// TODO(devversion): workaround for https://github.com/angular/material2/issues/12760\nexport const _CdkTable = CdkTable;\n\n/**\n * Wrapper for the CdkTable with Material design styles.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-table, table[mat-table]',\n  exportAs: 'matTable',\n  template: CDK_TABLE_TEMPLATE,\n  styleUrls: ['table.css'],\n  host: {\n    'class': 'mat-table',\n  },\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatTable<T> extends _CdkTable<T> {\n  /** Overrides the sticky CSS class set by the `CdkTable`. */\n  protected stickyCssClass = 'mat-table-sticky';\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, ElementRef, Input} from '@angular/core';\nimport {\n  CdkCell,\n  CdkCellDef,\n  CdkColumnDef, CdkFooterCell, CdkFooterCellDef,\n  CdkHeaderCell,\n  CdkHeaderCellDef,\n} from '@angular/cdk/table';\n\n// TODO(devversion): workaround for https://github.com/angular/material2/issues/12760\nexport const _CdkCellDef = CdkCellDef;\nexport const _CdkHeaderCellDef = CdkHeaderCellDef;\nexport const _CdkFooterCellDef = CdkFooterCellDef;\n\n/**\n * Cell definition for the mat-table.\n * Captures the template of a column's data row cell as well as cell-specific properties.\n */\n@Directive({\n  selector: '[matCellDef]',\n  providers: [{provide: CdkCellDef, useExisting: MatCellDef}]\n})\nexport class MatCellDef extends _CdkCellDef {}\n\n/**\n * Header cell definition for the mat-table.\n * Captures the template of a column's header cell and as well as cell-specific properties.\n */\n@Directive({\n  selector: '[matHeaderCellDef]',\n  providers: [{provide: CdkHeaderCellDef, useExisting: MatHeaderCellDef}]\n})\nexport class MatHeaderCellDef extends _CdkHeaderCellDef {}\n\n/**\n * Footer cell definition for the mat-table.\n * Captures the template of a column's footer cell and as well as cell-specific properties.\n */\n@Directive({\n  selector: '[matFooterCellDef]',\n  providers: [{provide: CdkFooterCellDef, useExisting: MatFooterCellDef}]\n})\nexport class MatFooterCellDef extends _CdkFooterCellDef {}\n\n/**\n * Column definition for the mat-table.\n * Defines a set of cells available for a table column.\n */\n@Directive({\n  selector: '[matColumnDef]',\n  providers: [{provide: CdkColumnDef, useExisting: MatColumnDef}],\n})\nexport class MatColumnDef extends CdkColumnDef {\n  /** Unique name for this column. */\n  @Input('matColumnDef') name: string;\n\n  /** Whether this column should be sticky positioned at the start of the row */\n  @Input() sticky: boolean;\n\n  /** Whether this column should be sticky positioned on the end of the row */\n  @Input() stickyEnd: boolean;\n}\n\n/** Header cell template container that adds the right classes and role. */\n@Directive({\n  selector: 'mat-header-cell, th[mat-header-cell]',\n  host: {\n    'class': 'mat-header-cell',\n    'role': 'columnheader',\n  },\n})\nexport class MatHeaderCell extends CdkHeaderCell {\n  constructor(columnDef: CdkColumnDef,\n              elementRef: ElementRef<HTMLElement>) {\n    super(columnDef, elementRef);\n    elementRef.nativeElement.classList.add(`mat-column-${columnDef.cssClassFriendlyName}`);\n  }\n}\n\n/** Footer cell template container that adds the right classes and role. */\n@Directive({\n  selector: 'mat-footer-cell, td[mat-footer-cell]',\n  host: {\n    'class': 'mat-footer-cell',\n    'role': 'gridcell',\n  },\n})\nexport class MatFooterCell extends CdkFooterCell {\n  constructor(columnDef: CdkColumnDef,\n              elementRef: ElementRef) {\n    super(columnDef, elementRef);\n    elementRef.nativeElement.classList.add(`mat-column-${columnDef.cssClassFriendlyName}`);\n  }\n}\n\n/** Cell template container that adds the right classes and role. */\n@Directive({\n  selector: 'mat-cell, td[mat-cell]',\n  host: {\n    'class': 'mat-cell',\n    'role': 'gridcell',\n  },\n})\nexport class MatCell extends CdkCell {\n  constructor(columnDef: CdkColumnDef,\n              elementRef: ElementRef<HTMLElement>) {\n    super(columnDef, elementRef);\n    elementRef.nativeElement.classList.add(`mat-column-${columnDef.cssClassFriendlyName}`);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor, FocusOrigin} from '@angular/cdk/a11y';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty, coerceNumberProperty} from '@angular/cdk/coercion';\nimport {\n  DOWN_ARROW,\n  END,\n  HOME,\n  LEFT_ARROW,\n  PAGE_DOWN,\n  PAGE_UP,\n  RIGHT_ARROW,\n  UP_ARROW,\n} from '@angular/cdk/keycodes';\nimport {\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Output,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {\n  CanColor,\n  CanColorCtor,\n  CanDisable,\n  CanDisableCtor,\n  HammerInput,\n  HasTabIndex,\n  HasTabIndexCtor,\n  mixinColor,\n  mixinDisabled,\n  mixinTabIndex,\n} from '@angular/material/core';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\nimport {Subscription} from 'rxjs';\n\n/**\n * Visually, a 30px separation between tick marks looks best. This is very subjective but it is\n * the default separation we chose.\n */\nconst MIN_AUTO_TICK_SEPARATION = 30;\n\n/** The thumb gap size for a disabled slider. */\nconst DISABLED_THUMB_GAP = 7;\n\n/** The thumb gap size for a non-active slider at its minimum value. */\nconst MIN_VALUE_NONACTIVE_THUMB_GAP = 7;\n\n/** The thumb gap size for an active slider at its minimum value. */\nconst MIN_VALUE_ACTIVE_THUMB_GAP = 10;\n\n/**\n * Provider Expression that allows mat-slider to register as a ControlValueAccessor.\n * This allows it to support [(ngModel)] and [formControl].\n */\nexport const MAT_SLIDER_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatSlider),\n  multi: true\n};\n\n/** A simple change event emitted by the MatSlider component. */\nexport class MatSliderChange {\n  /** The MatSlider that changed. */\n  source: MatSlider;\n\n  /** The new value of the source slider. */\n  value: number | null;\n}\n\n\n// Boilerplate for applying mixins to MatSlider.\n/** @docs-private */\nexport class MatSliderBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatSliderMixinBase:\n    HasTabIndexCtor &\n    CanColorCtor &\n    CanDisableCtor &\n    typeof MatSliderBase =\n        mixinTabIndex(mixinColor(mixinDisabled(MatSliderBase), 'accent'));\n\n/**\n * Allows users to select from a range of values by moving the slider thumb. It is similar in\n * behavior to the native `<input type=\"range\">` element.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-slider',\n  exportAs: 'matSlider',\n  providers: [MAT_SLIDER_VALUE_ACCESSOR],\n  host: {\n    '(focus)': '_onFocus()',\n    '(blur)': '_onBlur()',\n    '(click)': '_onClick($event)',\n    '(keydown)': '_onKeydown($event)',\n    '(keyup)': '_onKeyup()',\n    '(mouseenter)': '_onMouseenter()',\n    '(slide)': '_onSlide($event)',\n    '(slideend)': '_onSlideEnd()',\n    '(slidestart)': '_onSlideStart($event)',\n    'class': 'mat-slider',\n    'role': 'slider',\n    '[tabIndex]': 'tabIndex',\n    '[attr.aria-disabled]': 'disabled',\n    '[attr.aria-valuemax]': 'max',\n    '[attr.aria-valuemin]': 'min',\n    '[attr.aria-valuenow]': 'value',\n    '[attr.aria-orientation]': 'vertical ? \"vertical\" : \"horizontal\"',\n    '[class.mat-slider-disabled]': 'disabled',\n    '[class.mat-slider-has-ticks]': 'tickInterval',\n    '[class.mat-slider-horizontal]': '!vertical',\n    '[class.mat-slider-axis-inverted]': '_invertAxis',\n    '[class.mat-slider-sliding]': '_isSliding',\n    '[class.mat-slider-thumb-label-showing]': 'thumbLabel',\n    '[class.mat-slider-vertical]': 'vertical',\n    '[class.mat-slider-min-value]': '_isMinValue',\n    '[class.mat-slider-hide-last-tick]': 'disabled || _isMinValue && _thumbGap && _invertAxis',\n    '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"',\n  },\n  templateUrl: 'slider.html',\n  styleUrls: ['slider.css'],\n  inputs: ['disabled', 'color', 'tabIndex'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatSlider extends _MatSliderMixinBase\n    implements ControlValueAccessor, OnDestroy, CanDisable, CanColor, OnInit, HasTabIndex {\n  /** Whether the slider is inverted. */\n  @Input()\n  get invert(): boolean { return this._invert; }\n  set invert(value: boolean) {\n    this._invert = coerceBooleanProperty(value);\n  }\n  private _invert = false;\n\n  /** The maximum value that the slider can have. */\n  @Input()\n  get max(): number { return this._max; }\n  set max(v: number) {\n    this._max = coerceNumberProperty(v, this._max);\n    this._percent = this._calculatePercentage(this._value);\n\n    // Since this also modifies the percentage, we need to let the change detection know.\n    this._changeDetectorRef.markForCheck();\n  }\n  private _max: number = 100;\n\n  /** The minimum value that the slider can have. */\n  @Input()\n  get min(): number { return this._min; }\n  set min(v: number) {\n    this._min = coerceNumberProperty(v, this._min);\n\n    // If the value wasn't explicitly set by the user, set it to the min.\n    if (this._value === null) {\n      this.value = this._min;\n    }\n    this._percent = this._calculatePercentage(this._value);\n\n    // Since this also modifies the percentage, we need to let the change detection know.\n    this._changeDetectorRef.markForCheck();\n  }\n  private _min: number = 0;\n\n  /** The values at which the thumb will snap. */\n  @Input()\n  get step(): number { return this._step; }\n  set step(v: number) {\n    this._step = coerceNumberProperty(v, this._step);\n\n    if (this._step % 1 !== 0) {\n      this._roundToDecimal = this._step.toString().split('.').pop()!.length;\n    }\n\n    // Since this could modify the label, we need to notify the change detection.\n    this._changeDetectorRef.markForCheck();\n  }\n  private _step: number = 1;\n\n  /** Whether or not to show the thumb label. */\n  @Input()\n  get thumbLabel(): boolean { return this._thumbLabel; }\n  set thumbLabel(value: boolean) { this._thumbLabel = coerceBooleanProperty(value); }\n  private _thumbLabel: boolean = false;\n\n  /**\n   * How often to show ticks. Relative to the step so that a tick always appears on a step.\n   * Ex: Tick interval of 4 with a step of 3 will draw a tick every 4 steps (every 12 values).\n   */\n  @Input()\n  get tickInterval() { return this._tickInterval; }\n  set tickInterval(value: 'auto' | number) {\n    if (value === 'auto') {\n      this._tickInterval = 'auto';\n    } else if (typeof value === 'number' || typeof value === 'string') {\n      this._tickInterval = coerceNumberProperty(value, this._tickInterval as number);\n    } else {\n      this._tickInterval = 0;\n    }\n  }\n  private _tickInterval: 'auto' | number = 0;\n\n  /** Value of the slider. */\n  @Input()\n  get value(): number | null {\n    // If the value needs to be read and it is still uninitialized, initialize it to the min.\n    if (this._value === null) {\n      this.value = this._min;\n    }\n    return this._value;\n  }\n  set value(v: number | null) {\n    if (v !== this._value) {\n      let value = coerceNumberProperty(v);\n\n      // While incrementing by a decimal we can end up with values like 33.300000000000004.\n      // Truncate it to ensure that it matches the label and to make it easier to work with.\n      if (this._roundToDecimal) {\n        value = parseFloat(value.toFixed(this._roundToDecimal));\n      }\n\n      this._value = value;\n      this._percent = this._calculatePercentage(this._value);\n\n      // Since this also modifies the percentage, we need to let the change detection know.\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n  private _value: number | null = null;\n\n  /**\n   * Function that will be used to format the value before it is displayed\n   * in the thumb label. Can be used to format very large number in order\n   * for them to fit into the slider thumb.\n   */\n  @Input() displayWith: (value: number | null) => string | number;\n\n  /** Whether the slider is vertical. */\n  @Input()\n  get vertical(): boolean { return this._vertical; }\n  set vertical(value: boolean) {\n    this._vertical = coerceBooleanProperty(value);\n  }\n  private _vertical = false;\n\n  /** Event emitted when the slider value has changed. */\n  @Output() readonly change: EventEmitter<MatSliderChange> = new EventEmitter<MatSliderChange>();\n\n  /** Event emitted when the slider thumb moves. */\n  @Output() readonly input: EventEmitter<MatSliderChange> = new EventEmitter<MatSliderChange>();\n\n  /**\n   * Emits when the raw value of the slider changes. This is here primarily\n   * to facilitate the two-way binding for the `value` input.\n   * @docs-private\n   */\n  @Output() readonly valueChange: EventEmitter<number | null> = new EventEmitter<number | null>();\n\n  /** The value to be used for display purposes. */\n  get displayValue(): string | number {\n    if (this.displayWith) {\n      return this.displayWith(this.value);\n    }\n\n    // Note that this could be improved further by rounding something like 0.999 to 1 or\n    // 0.899 to 0.9, however it is very performance sensitive, because it gets called on\n    // every change detection cycle.\n    if (this._roundToDecimal && this.value && this.value % 1 !== 0) {\n      return this.value.toFixed(this._roundToDecimal);\n    }\n\n    return this.value || 0;\n  }\n\n  /** set focus to the host element */\n  focus() {\n    this._focusHostElement();\n  }\n\n  /** blur the host element */\n  blur() {\n    this._blurHostElement();\n  }\n\n  /** onTouch function registered via registerOnTouch (ControlValueAccessor). */\n  onTouched: () => any = () => {};\n\n  /** The percentage of the slider that coincides with the value. */\n  get percent(): number { return this._clamp(this._percent); }\n  private _percent: number = 0;\n\n  /**\n   * Whether or not the thumb is sliding.\n   * Used to determine if there should be a transition for the thumb and fill track.\n   */\n  _isSliding: boolean = false;\n\n  /**\n   * Whether or not the slider is active (clicked or sliding).\n   * Used to shrink and grow the thumb as according to the Material Design spec.\n   */\n  _isActive: boolean = false;\n\n  /**\n   * Whether the axis of the slider is inverted.\n   * (i.e. whether moving the thumb in the positive x or y direction decreases the slider's value).\n   */\n  get _invertAxis() {\n    // Standard non-inverted mode for a vertical slider should be dragging the thumb from bottom to\n    // top. However from a y-axis standpoint this is inverted.\n    return this.vertical ? !this.invert : this.invert;\n  }\n\n\n  /** Whether the slider is at its minimum value. */\n  get _isMinValue() {\n    return this.percent === 0;\n  }\n\n  /**\n   * The amount of space to leave between the slider thumb and the track fill & track background\n   * elements.\n   */\n  get _thumbGap() {\n    if (this.disabled) {\n      return DISABLED_THUMB_GAP;\n    }\n    if (this._isMinValue && !this.thumbLabel) {\n      return this._isActive ? MIN_VALUE_ACTIVE_THUMB_GAP : MIN_VALUE_NONACTIVE_THUMB_GAP;\n    }\n    return 0;\n  }\n\n  /** CSS styles for the track background element. */\n  get _trackBackgroundStyles(): { [key: string]: string } {\n    const axis = this.vertical ? 'Y' : 'X';\n    const scale = this.vertical ? `1, ${1 - this.percent}, 1` : `${1 - this.percent}, 1, 1`;\n    const sign = this._shouldInvertMouseCoords() ? '-' : '';\n\n    return {\n      // scale3d avoids some rendering issues in Chrome. See #12071.\n      transform: `translate${axis}(${sign}${this._thumbGap}px) scale3d(${scale})`\n    };\n  }\n\n  /** CSS styles for the track fill element. */\n  get _trackFillStyles(): { [key: string]: string } {\n    const axis = this.vertical ? 'Y' : 'X';\n    const scale = this.vertical ? `1, ${this.percent}, 1` : `${this.percent}, 1, 1`;\n    const sign = this._shouldInvertMouseCoords() ? '' : '-';\n\n    return {\n      // scale3d avoids some rendering issues in Chrome. See #12071.\n      transform: `translate${axis}(${sign}${this._thumbGap}px) scale3d(${scale})`\n    };\n  }\n\n  /** CSS styles for the ticks container element. */\n  get _ticksContainerStyles(): { [key: string]: string } {\n    let axis = this.vertical ? 'Y' : 'X';\n    // For a horizontal slider in RTL languages we push the ticks container off the left edge\n    // instead of the right edge to avoid causing a horizontal scrollbar to appear.\n    let sign = !this.vertical && this._getDirection() == 'rtl' ? '' : '-';\n    let offset = this._tickIntervalPercent / 2 * 100;\n    return {\n      'transform': `translate${axis}(${sign}${offset}%)`\n    };\n  }\n\n  /** CSS styles for the ticks element. */\n  get _ticksStyles(): { [key: string]: string } {\n    let tickSize = this._tickIntervalPercent * 100;\n    let backgroundSize = this.vertical ? `2px ${tickSize}%` : `${tickSize}% 2px`;\n    let axis = this.vertical ? 'Y' : 'X';\n    // Depending on the direction we pushed the ticks container, push the ticks the opposite\n    // direction to re-center them but clip off the end edge. In RTL languages we need to flip the\n    // ticks 180 degrees so we're really cutting off the end edge abd not the start.\n    let sign = !this.vertical && this._getDirection() == 'rtl' ? '-' : '';\n    let rotate = !this.vertical && this._getDirection() == 'rtl' ? ' rotate(180deg)' : '';\n    let styles: { [key: string]: string } = {\n      'backgroundSize': backgroundSize,\n      // Without translateZ ticks sometimes jitter as the slider moves on Chrome & Firefox.\n      'transform': `translateZ(0) translate${axis}(${sign}${tickSize / 2}%)${rotate}`\n    };\n\n    if (this._isMinValue && this._thumbGap) {\n      let side = this.vertical ?\n          (this._invertAxis ? 'Bottom' : 'Top') :\n          (this._invertAxis ? 'Right' : 'Left');\n      styles[`padding${side}`] = `${this._thumbGap}px`;\n    }\n\n    return styles;\n  }\n\n  get _thumbContainerStyles(): { [key: string]: string } {\n    let axis = this.vertical ? 'Y' : 'X';\n    // For a horizontal slider in RTL languages we push the thumb container off the left edge\n    // instead of the right edge to avoid causing a horizontal scrollbar to appear.\n    let invertOffset =\n        (this._getDirection() == 'rtl' && !this.vertical) ? !this._invertAxis : this._invertAxis;\n    let offset = (invertOffset ? this.percent : 1 - this.percent) * 100;\n    return {\n      'transform': `translate${axis}(-${offset}%)`\n    };\n  }\n\n  /** The size of a tick interval as a percentage of the size of the track. */\n  private _tickIntervalPercent: number = 0;\n\n  /** The dimensions of the slider. */\n  private _sliderDimensions: ClientRect | null = null;\n\n  private _controlValueAccessorChangeFn: (value: any) => void = () => {};\n\n  /** Decimal places to round to, based on the step amount. */\n  private _roundToDecimal: number;\n\n  /** Subscription to the Directionality change EventEmitter. */\n  private _dirChangeSubscription = Subscription.EMPTY;\n\n  /** The value of the slider when the slide start event fires. */\n  private _valueOnSlideStart: number | null;\n\n  /** Reference to the inner slider wrapper element. */\n  @ViewChild('sliderWrapper') private _sliderWrapper: ElementRef;\n\n  /**\n   * Whether mouse events should be converted to a slider position by calculating their distance\n   * from the right or bottom edge of the slider as opposed to the top or left.\n   */\n  private _shouldInvertMouseCoords() {\n    return (this._getDirection() == 'rtl' && !this.vertical) ? !this._invertAxis : this._invertAxis;\n  }\n\n  /** The language direction for this slider element. */\n  private _getDirection() {\n    return (this._dir && this._dir.value == 'rtl') ? 'rtl' : 'ltr';\n  }\n\n  constructor(elementRef: ElementRef,\n              private _focusMonitor: FocusMonitor,\n              private _changeDetectorRef: ChangeDetectorRef,\n              @Optional() private _dir: Directionality,\n              @Attribute('tabindex') tabIndex: string,\n              // @breaking-change 7.0.0 `_animationMode` parameter to be made required.\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode?: string) {\n    super(elementRef);\n\n    this.tabIndex = parseInt(tabIndex) || 0;\n  }\n\n  ngOnInit() {\n    this._focusMonitor\n        .monitor(this._elementRef, true)\n        .subscribe((origin: FocusOrigin) => {\n          this._isActive = !!origin && origin !== 'keyboard';\n          this._changeDetectorRef.detectChanges();\n        });\n    if (this._dir) {\n      this._dirChangeSubscription = this._dir.change.subscribe(() => {\n        this._changeDetectorRef.markForCheck();\n      });\n    }\n  }\n\n  ngOnDestroy() {\n    this._focusMonitor.stopMonitoring(this._elementRef);\n    this._dirChangeSubscription.unsubscribe();\n  }\n\n  _onMouseenter() {\n    if (this.disabled) {\n      return;\n    }\n\n    // We save the dimensions of the slider here so we can use them to update the spacing of the\n    // ticks and determine where on the slider click and slide events happen.\n    this._sliderDimensions = this._getSliderDimensions();\n    this._updateTickIntervalPercent();\n  }\n\n  _onClick(event: MouseEvent) {\n    if (this.disabled) {\n      return;\n    }\n\n    let oldValue = this.value;\n    this._isSliding = false;\n    this._focusHostElement();\n    this._updateValueFromPosition({x: event.clientX, y: event.clientY});\n\n    // Emit a change and input event if the value changed.\n    if (oldValue != this.value) {\n      this._emitInputEvent();\n      this._emitChangeEvent();\n    }\n  }\n\n  _onSlide(event: HammerInput) {\n    if (this.disabled) {\n      return;\n    }\n\n    // The slide start event sometimes fails to fire on iOS, so if we're not already in the sliding\n    // state, call the slide start handler manually.\n    if (!this._isSliding) {\n      this._onSlideStart(null);\n    }\n\n    // Prevent the slide from selecting anything else.\n    event.preventDefault();\n\n    let oldValue = this.value;\n    this._updateValueFromPosition({x: event.center.x, y: event.center.y});\n\n    // Native range elements always emit `input` events when the value changed while sliding.\n    if (oldValue != this.value) {\n      this._emitInputEvent();\n    }\n  }\n\n  _onSlideStart(event: HammerInput | null) {\n    if (this.disabled || this._isSliding) {\n      return;\n    }\n\n    // Simulate mouseenter in case this is a mobile device.\n    this._onMouseenter();\n\n    this._isSliding = true;\n    this._focusHostElement();\n    this._valueOnSlideStart = this.value;\n\n    if (event) {\n      this._updateValueFromPosition({x: event.center.x, y: event.center.y});\n      event.preventDefault();\n    }\n  }\n\n  _onSlideEnd() {\n    this._isSliding = false;\n\n    if (this._valueOnSlideStart != this.value && !this.disabled) {\n      this._emitChangeEvent();\n    }\n    this._valueOnSlideStart = null;\n  }\n\n  _onFocus() {\n    // We save the dimensions of the slider here so we can use them to update the spacing of the\n    // ticks and determine where on the slider click and slide events happen.\n    this._sliderDimensions = this._getSliderDimensions();\n    this._updateTickIntervalPercent();\n  }\n\n  _onBlur() {\n    this.onTouched();\n  }\n\n  _onKeydown(event: KeyboardEvent) {\n    if (this.disabled) { return; }\n\n    let oldValue = this.value;\n\n    switch (event.keyCode) {\n      case PAGE_UP:\n        this._increment(10);\n        break;\n      case PAGE_DOWN:\n        this._increment(-10);\n        break;\n      case END:\n        this.value = this.max;\n        break;\n      case HOME:\n        this.value = this.min;\n        break;\n      case LEFT_ARROW:\n        // NOTE: For a sighted user it would make more sense that when they press an arrow key on an\n        // inverted slider the thumb moves in that direction. However for a blind user, nothing\n        // about the slider indicates that it is inverted. They will expect left to be decrement,\n        // regardless of how it appears on the screen. For speakers ofRTL languages, they probably\n        // expect left to mean increment. Therefore we flip the meaning of the side arrow keys for\n        // RTL. For inverted sliders we prefer a good a11y experience to having it \"look right\" for\n        // sighted users, therefore we do not swap the meaning.\n        this._increment(this._getDirection() == 'rtl' ? 1 : -1);\n        break;\n      case UP_ARROW:\n        this._increment(1);\n        break;\n      case RIGHT_ARROW:\n        // See comment on LEFT_ARROW about the conditions under which we flip the meaning.\n        this._increment(this._getDirection() == 'rtl' ? -1 : 1);\n        break;\n      case DOWN_ARROW:\n        this._increment(-1);\n        break;\n      default:\n        // Return if the key is not one that we explicitly handle to avoid calling preventDefault on\n        // it.\n        return;\n    }\n\n    if (oldValue != this.value) {\n      this._emitInputEvent();\n      this._emitChangeEvent();\n    }\n\n    this._isSliding = true;\n    event.preventDefault();\n  }\n\n  _onKeyup() {\n    this._isSliding = false;\n  }\n\n  /** Increments the slider by the given number of steps (negative number decrements). */\n  private _increment(numSteps: number) {\n    this.value = this._clamp((this.value || 0) + this.step * numSteps, this.min, this.max);\n  }\n\n  /** Calculate the new value from the new physical location. The value will always be snapped. */\n  private _updateValueFromPosition(pos: {x: number, y: number}) {\n    if (!this._sliderDimensions) {\n      return;\n    }\n\n    let offset = this.vertical ? this._sliderDimensions.top : this._sliderDimensions.left;\n    let size = this.vertical ? this._sliderDimensions.height : this._sliderDimensions.width;\n    let posComponent = this.vertical ? pos.y : pos.x;\n\n    // The exact value is calculated from the event and used to find the closest snap value.\n    let percent = this._clamp((posComponent - offset) / size);\n\n    if (this._shouldInvertMouseCoords()) {\n      percent = 1 - percent;\n    }\n\n    // Since the steps may not divide cleanly into the max value, if the user\n    // slid to 0 or 100 percent, we jump to the min/max value. This approach\n    // is slightly more intuitive than using `Math.ceil` below, because it\n    // follows the user's pointer closer.\n    if (percent === 0) {\n      this.value = this.min;\n    } else if (percent === 1) {\n      this.value = this.max;\n    } else {\n      const exactValue = this._calculateValue(percent);\n\n      // This calculation finds the closest step by finding the closest\n      // whole number divisible by the step relative to the min.\n      const closestValue = Math.round((exactValue - this.min) / this.step) * this.step + this.min;\n\n      // The value needs to snap to the min and max.\n      this.value = this._clamp(closestValue, this.min, this.max);\n    }\n  }\n\n  /** Emits a change event if the current value is different from the last emitted value. */\n  private _emitChangeEvent() {\n    this._controlValueAccessorChangeFn(this.value);\n    this.valueChange.emit(this.value);\n    this.change.emit(this._createChangeEvent());\n  }\n\n  /** Emits an input event when the current value is different from the last emitted value. */\n  private _emitInputEvent() {\n    this.input.emit(this._createChangeEvent());\n  }\n\n  /** Updates the amount of space between ticks as a percentage of the width of the slider. */\n  private _updateTickIntervalPercent() {\n    if (!this.tickInterval || !this._sliderDimensions) {\n      return;\n    }\n\n    if (this.tickInterval == 'auto') {\n      let trackSize = this.vertical ? this._sliderDimensions.height : this._sliderDimensions.width;\n      let pixelsPerStep = trackSize * this.step / (this.max - this.min);\n      let stepsPerTick = Math.ceil(MIN_AUTO_TICK_SEPARATION / pixelsPerStep);\n      let pixelsPerTick = stepsPerTick * this.step;\n      this._tickIntervalPercent = pixelsPerTick / trackSize;\n    } else {\n      this._tickIntervalPercent = this.tickInterval * this.step / (this.max - this.min);\n    }\n  }\n\n  /** Creates a slider change object from the specified value. */\n  private _createChangeEvent(value = this.value): MatSliderChange {\n    let event = new MatSliderChange();\n\n    event.source = this;\n    event.value = value;\n\n    return event;\n  }\n\n  /** Calculates the percentage of the slider that a value is. */\n  private _calculatePercentage(value: number | null) {\n    return ((value || 0) - this.min) / (this.max - this.min);\n  }\n\n  /** Calculates the value a percentage of the slider corresponds to. */\n  private _calculateValue(percentage: number) {\n    return this.min + percentage * (this.max - this.min);\n  }\n\n  /** Return a number between two numbers. */\n  private _clamp(value: number, min = 0, max = 1) {\n    return Math.max(min, Math.min(value, max));\n  }\n\n  /**\n   * Get the bounding client rect of the slider track element.\n   * The track is used rather than the native element to ignore the extra space that the thumb can\n   * take up.\n   */\n  private _getSliderDimensions() {\n    return this._sliderWrapper ? this._sliderWrapper.nativeElement.getBoundingClientRect() : null;\n  }\n\n  /**\n   * Focuses the native element.\n   * Currently only used to allow a blur event to fire but will be used with keyboard input later.\n   */\n  private _focusHostElement() {\n    this._elementRef.nativeElement.focus();\n  }\n\n  /** Blurs the native element. */\n  private _blurHostElement() {\n    this._elementRef.nativeElement.blur();\n  }\n\n  /**\n   * Sets the model value. Implemented as part of ControlValueAccessor.\n   * @param value\n   */\n  writeValue(value: any) {\n    this.value = value;\n  }\n\n  /**\n   * Registers a callback to be triggered when the value has changed.\n   * Implemented as part of ControlValueAccessor.\n   * @param fn Callback to be registered.\n   */\n  registerOnChange(fn: (value: any) => void) {\n    this._controlValueAccessorChangeFn = fn;\n  }\n\n  /**\n   * Registers a callback to be triggered when the component is touched.\n   * Implemented as part of ControlValueAccessor.\n   * @param fn Callback to be registered.\n   */\n  registerOnTouched(fn: any) {\n    this.onTouched = fn;\n  }\n\n  /**\n   * Sets whether the component should be disabled.\n   * Implemented as part of ControlValueAccessor.\n   * @param isDisabled\n   */\n  setDisabledState(isDisabled: boolean) {\n    this.disabled = isDisabled;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {GestureConfig, MatCommonModule} from '@angular/material/core';\nimport {HAMMER_GESTURE_CONFIG} from '@angular/platform-browser';\nimport {MatSlider} from './slider';\n\n\n@NgModule({\n  imports: [CommonModule, MatCommonModule],\n  exports: [MatSlider, MatCommonModule],\n  declarations: [MatSlider],\n  providers: [{provide: HAMMER_GESTURE_CONFIG, useClass: GestureConfig}]\n})\nexport class MatSliderModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {OverlayRef} from '@angular/cdk/overlay';\nimport {Observable, Subject} from 'rxjs';\nimport {MatSnackBarContainer} from './snack-bar-container';\n\n\n/** Event that is emitted when a snack bar is dismissed. */\nexport interface MatSnackBarDismiss {\n  /** Whether the snack bar was dismissed using the action button. */\n  dismissedByAction: boolean;\n}\n\n/**\n * Reference to a snack bar dispatched from the snack bar service.\n */\nexport class MatSnackBarRef<T> {\n  /** The instance of the component making up the content of the snack bar. */\n  instance: T;\n\n  /**\n   * The instance of the component making up the content of the snack bar.\n   * @docs-private\n   */\n  containerInstance: MatSnackBarContainer;\n\n  /** Subject for notifying the user that the snack bar has been dismissed. */\n  private readonly _afterDismissed = new Subject<MatSnackBarDismiss>();\n\n  /** Subject for notifying the user that the snack bar has opened and appeared. */\n  private readonly _afterOpened = new Subject<void>();\n\n  /** Subject for notifying the user that the snack bar action was called. */\n  private readonly _onAction = new Subject<void>();\n\n  /**\n   * Timeout ID for the duration setTimeout call. Used to clear the timeout if the snackbar is\n   * dismissed before the duration passes.\n   */\n  private _durationTimeoutId: number;\n\n  /** Whether the snack bar was dismissed using the action button. */\n  private _dismissedByAction = false;\n\n  constructor(containerInstance: MatSnackBarContainer,\n              private _overlayRef: OverlayRef) {\n    this.containerInstance = containerInstance;\n    // Dismiss snackbar on action.\n    this.onAction().subscribe(() => this.dismiss());\n    containerInstance._onExit.subscribe(() => this._finishDismiss());\n  }\n\n  /** Dismisses the snack bar. */\n  dismiss(): void {\n    if (!this._afterDismissed.closed) {\n      this.containerInstance.exit();\n    }\n    clearTimeout(this._durationTimeoutId);\n  }\n\n  /** Marks the snackbar action clicked. */\n  dismissWithAction(): void {\n    if (!this._onAction.closed) {\n      this._dismissedByAction = true;\n      this._onAction.next();\n      this._onAction.complete();\n    }\n  }\n\n\n  /**\n   * Marks the snackbar action clicked.\n   * @deprecated Use `dismissWithAction` instead.\n   * @breaking-change 7.0.0\n   */\n  closeWithAction(): void {\n    this.dismissWithAction();\n  }\n\n  /** Dismisses the snack bar after some duration */\n  _dismissAfter(duration: number): void {\n    this._durationTimeoutId = setTimeout(() => this.dismiss(), duration);\n  }\n\n  /** Marks the snackbar as opened */\n  _open(): void {\n    if (!this._afterOpened.closed) {\n      this._afterOpened.next();\n      this._afterOpened.complete();\n    }\n  }\n\n  /** Cleans up the DOM after closing. */\n  private _finishDismiss(): void {\n    this._overlayRef.dispose();\n\n    if (!this._onAction.closed) {\n      this._onAction.complete();\n    }\n\n    this._afterDismissed.next({dismissedByAction: this._dismissedByAction});\n    this._afterDismissed.complete();\n    this._dismissedByAction = false;\n  }\n\n  /** Gets an observable that is notified when the snack bar is finished closing. */\n  afterDismissed(): Observable<MatSnackBarDismiss> {\n    return this._afterDismissed.asObservable();\n  }\n\n  /** Gets an observable that is notified when the snack bar has opened and appeared. */\n  afterOpened(): Observable<void> {\n    return this.containerInstance._onEnter;\n  }\n\n  /** Gets an observable that is notified when the snack bar action is called. */\n  onAction(): Observable<void> {\n    return this._onAction.asObservable();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ViewContainerRef, InjectionToken} from '@angular/core';\nimport {AriaLivePoliteness} from '@angular/cdk/a11y';\nimport {Direction} from '@angular/cdk/bidi';\n\n/** Injection token that can be used to access the data that was passed in to a snack bar. */\nexport const MAT_SNACK_BAR_DATA = new InjectionToken<any>('MatSnackBarData');\n\n/** Possible values for horizontalPosition on MatSnackBarConfig. */\nexport type MatSnackBarHorizontalPosition = 'start' | 'center' | 'end' | 'left' | 'right';\n\n/** Possible values for verticalPosition on MatSnackBarConfig. */\nexport type MatSnackBarVerticalPosition = 'top' | 'bottom';\n\n/**\n * Configuration used when opening a snack-bar.\n */\nexport class MatSnackBarConfig<D = any> {\n  /** The politeness level for the MatAriaLiveAnnouncer announcement. */\n  politeness?: AriaLivePoliteness = 'assertive';\n\n  /**\n   * Message to be announced by the LiveAnnouncer. When opening a snackbar without a custom\n   * component or template, the announcement message will default to the specified message.\n   */\n  announcementMessage?: string = '';\n\n  /** The view container to place the overlay for the snack bar into. */\n  viewContainerRef?: ViewContainerRef;\n\n  /** The length of time in milliseconds to wait before automatically dismissing the snack bar. */\n  duration?: number = 0;\n\n  /** Extra CSS classes to be added to the snack bar container. */\n  panelClass?: string | string[];\n\n  /** Text layout direction for the snack bar. */\n  direction?: Direction;\n\n  /** Data being injected into the child component. */\n  data?: D | null = null;\n\n  /** The horizontal position to place the snack bar. */\n  horizontalPosition?: MatSnackBarHorizontalPosition = 'center';\n\n  /** The vertical position to place the snack bar. */\n  verticalPosition?: MatSnackBarVerticalPosition = 'bottom';\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Component, ViewEncapsulation, Inject, ChangeDetectionStrategy} from '@angular/core';\nimport {MatSnackBarRef} from './snack-bar-ref';\nimport {MAT_SNACK_BAR_DATA} from './snack-bar-config';\n\n\n/**\n * A component used to open as the default snack bar, matching material spec.\n * This should only be used internally by the snack bar service.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'simple-snack-bar',\n  templateUrl: 'simple-snack-bar.html',\n  styleUrls: ['simple-snack-bar.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {\n    'class': 'mat-simple-snackbar',\n  }\n})\nexport class SimpleSnackBar {\n  /** Data that was injected into the snack bar. */\n  data: {message: string, action: string};\n\n  constructor(\n    public snackBarRef: MatSnackBarRef<SimpleSnackBar>,\n    @Inject(MAT_SNACK_BAR_DATA) data: any) {\n    this.data = data;\n  }\n\n  /** Performs the action on the snack bar. */\n  action(): void {\n    this.snackBarRef.dismissWithAction();\n  }\n\n  /** If the action button should be shown. */\n  get hasAction(): boolean {\n    return !!this.data.action;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/**\n * Animations used by the Material snack bar.\n * @docs-private\n */\nexport const matSnackBarAnimations: {\n  readonly snackBarState: AnimationTriggerMetadata;\n} = {\n  /** Animation that shows and hides a snack bar. */\n  snackBarState: trigger('state', [\n    state('void, hidden', style({\n      transform: 'scale(0.8)',\n      opacity: 0,\n    })),\n    state('visible', style({\n      transform: 'scale(1)',\n      opacity: 1,\n    })),\n    transition('* => visible', animate('150ms cubic-bezier(0, 0, 0.2, 1)')),\n    transition('* => void, * => hidden', animate('75ms cubic-bezier(0.4, 0.0, 1, 1)', style({\n      opacity: 0\n    }))),\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {AnimationEvent} from '@angular/animations';\nimport {\n  BasePortalOutlet,\n  CdkPortalOutlet,\n  ComponentPortal,\n  TemplatePortal,\n} from '@angular/cdk/portal';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ComponentRef,\n  ElementRef,\n  EmbeddedViewRef,\n  NgZone,\n  OnDestroy,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {Observable, Subject} from 'rxjs';\nimport {take} from 'rxjs/operators';\nimport {matSnackBarAnimations} from './snack-bar-animations';\nimport {MatSnackBarConfig} from './snack-bar-config';\n\n\n/**\n * Internal component that wraps user-provided snack bar content.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'snack-bar-container',\n  templateUrl: 'snack-bar-container.html',\n  styleUrls: ['snack-bar-container.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  animations: [matSnackBarAnimations.snackBarState],\n  host: {\n    'role': 'alert',\n    'class': 'mat-snack-bar-container',\n    '[@state]': '_animationState',\n    '(@state.done)': 'onAnimationEnd($event)'\n  },\n})\nexport class MatSnackBarContainer extends BasePortalOutlet implements OnDestroy {\n  /** Whether the component has been destroyed. */\n  private _destroyed = false;\n\n  /** The portal outlet inside of this container into which the snack bar content will be loaded. */\n  @ViewChild(CdkPortalOutlet) _portalOutlet: CdkPortalOutlet;\n\n  /** Subject for notifying that the snack bar has exited from view. */\n  readonly _onExit: Subject<any> = new Subject();\n\n  /** Subject for notifying that the snack bar has finished entering the view. */\n  readonly _onEnter: Subject<any> = new Subject();\n\n  /** The state of the snack bar animations. */\n  _animationState = 'void';\n\n  constructor(\n    private _ngZone: NgZone,\n    private _elementRef: ElementRef<HTMLElement>,\n    private _changeDetectorRef: ChangeDetectorRef,\n    /** The snack bar configuration. */\n    public snackBarConfig: MatSnackBarConfig) {\n\n    super();\n  }\n\n  /** Attach a component portal as content to this snack bar container. */\n  attachComponentPortal<T>(portal: ComponentPortal<T>): ComponentRef<T> {\n    this._assertNotAttached();\n    this._applySnackBarClasses();\n    return this._portalOutlet.attachComponentPortal(portal);\n  }\n\n  /** Attach a template portal as content to this snack bar container. */\n  attachTemplatePortal<C>(portal: TemplatePortal<C>): EmbeddedViewRef<C> {\n    this._assertNotAttached();\n    this._applySnackBarClasses();\n    return this._portalOutlet.attachTemplatePortal(portal);\n  }\n\n  /** Handle end of animations, updating the state of the snackbar. */\n  onAnimationEnd(event: AnimationEvent) {\n    const {fromState, toState} = event;\n\n    if ((toState === 'void' && fromState !== 'void') || toState === 'hidden') {\n      this._completeExit();\n    }\n\n    if (toState === 'visible') {\n      // Note: we shouldn't use `this` inside the zone callback,\n      // because it can cause a memory leak.\n      const onEnter = this._onEnter;\n\n      this._ngZone.run(() => {\n        onEnter.next();\n        onEnter.complete();\n      });\n    }\n  }\n\n  /** Begin animation of snack bar entrance into view. */\n  enter(): void {\n    if (!this._destroyed) {\n      this._animationState = 'visible';\n      this._changeDetectorRef.detectChanges();\n    }\n  }\n\n  /** Begin animation of the snack bar exiting from view. */\n  exit(): Observable<void> {\n    // Note: this one transitions to `hidden`, rather than `void`, in order to handle the case\n    // where multiple snack bars are opened in quick succession (e.g. two consecutive calls to\n    // `MatSnackBar.open`).\n    this._animationState = 'hidden';\n    return this._onExit;\n  }\n\n  /** Makes sure the exit callbacks have been invoked when the element is destroyed. */\n  ngOnDestroy() {\n    this._destroyed = true;\n    this._completeExit();\n  }\n\n  /**\n   * Waits for the zone to settle before removing the element. Helps prevent\n   * errors where we end up removing an element which is in the middle of an animation.\n   */\n  private _completeExit() {\n    this._ngZone.onMicrotaskEmpty.asObservable().pipe(take(1)).subscribe(() => {\n      this._onExit.next();\n      this._onExit.complete();\n    });\n  }\n\n  /** Applies the various positioning and user-configured CSS classes to the snack bar. */\n  private _applySnackBarClasses() {\n    const element: HTMLElement = this._elementRef.nativeElement;\n    const panelClasses = this.snackBarConfig.panelClass;\n\n    if (panelClasses) {\n      if (Array.isArray(panelClasses)) {\n        // Note that we can't use a spread here, because IE doesn't support multiple arguments.\n        panelClasses.forEach(cssClass => element.classList.add(cssClass));\n      } else {\n        element.classList.add(panelClasses);\n      }\n    }\n\n    if (this.snackBarConfig.horizontalPosition === 'center') {\n      element.classList.add('mat-snack-bar-center');\n    }\n\n    if (this.snackBarConfig.verticalPosition === 'top') {\n      element.classList.add('mat-snack-bar-top');\n    }\n  }\n\n  /** Asserts that no content is already attached to the container. */\n  private _assertNotAttached() {\n    if (this._portalOutlet.hasAttached()) {\n      throw Error('Attempting to attach snack bar content after content is already attached');\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatButtonModule} from '@angular/material/button';\nimport {SimpleSnackBar} from './simple-snack-bar';\nimport {MatSnackBarContainer} from './snack-bar-container';\n\n\n@NgModule({\n  imports: [\n    OverlayModule,\n    PortalModule,\n    CommonModule,\n    MatButtonModule,\n    MatCommonModule,\n  ],\n  exports: [MatSnackBarContainer, MatCommonModule],\n  declarations: [MatSnackBarContainer, SimpleSnackBar],\n  entryComponents: [MatSnackBarContainer, SimpleSnackBar],\n})\nexport class MatSnackBarModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {LiveAnnouncer} from '@angular/cdk/a11y';\nimport {BreakpointObserver, Breakpoints} from '@angular/cdk/layout';\nimport {Overlay, OverlayConfig, OverlayRef} from '@angular/cdk/overlay';\nimport {ComponentPortal, ComponentType, PortalInjector, TemplatePortal} from '@angular/cdk/portal';\nimport {\n  ComponentRef,\n  EmbeddedViewRef,\n  Inject,\n  Injectable,\n  InjectionToken,\n  Injector,\n  Optional,\n  SkipSelf,\n  TemplateRef,\n  OnDestroy,\n} from '@angular/core';\nimport {take, takeUntil} from 'rxjs/operators';\nimport {SimpleSnackBar} from './simple-snack-bar';\nimport {MAT_SNACK_BAR_DATA, MatSnackBarConfig} from './snack-bar-config';\nimport {MatSnackBarContainer} from './snack-bar-container';\nimport {MatSnackBarModule} from './snack-bar-module';\nimport {MatSnackBarRef} from './snack-bar-ref';\n\n\n/** Injection token that can be used to specify default snack bar. */\nexport const MAT_SNACK_BAR_DEFAULT_OPTIONS =\n    new InjectionToken<MatSnackBarConfig>('mat-snack-bar-default-options', {\n      providedIn: 'root',\n      factory: MAT_SNACK_BAR_DEFAULT_OPTIONS_FACTORY,\n    });\n\n/** @docs-private */\nexport function MAT_SNACK_BAR_DEFAULT_OPTIONS_FACTORY(): MatSnackBarConfig {\n  return new MatSnackBarConfig();\n}\n\n/**\n * Service to dispatch Material Design snack bar messages.\n */\n@Injectable({providedIn: MatSnackBarModule})\nexport class MatSnackBar implements OnDestroy {\n  /**\n   * Reference to the current snack bar in the view *at this level* (in the Angular injector tree).\n   * If there is a parent snack-bar service, all operations should delegate to that parent\n   * via `_openedSnackBarRef`.\n   */\n  private _snackBarRefAtThisLevel: MatSnackBarRef<any> | null = null;\n\n  /** Reference to the currently opened snackbar at *any* level. */\n  get _openedSnackBarRef(): MatSnackBarRef<any> | null {\n    const parent = this._parentSnackBar;\n    return parent ? parent._openedSnackBarRef : this._snackBarRefAtThisLevel;\n  }\n\n  set _openedSnackBarRef(value: MatSnackBarRef<any> | null) {\n    if (this._parentSnackBar) {\n      this._parentSnackBar._openedSnackBarRef = value;\n    } else {\n      this._snackBarRefAtThisLevel = value;\n    }\n  }\n\n  constructor(\n      private _overlay: Overlay,\n      private _live: LiveAnnouncer,\n      private _injector: Injector,\n      private _breakpointObserver: BreakpointObserver,\n      @Optional() @SkipSelf() private _parentSnackBar: MatSnackBar,\n      @Inject(MAT_SNACK_BAR_DEFAULT_OPTIONS) private _defaultConfig: MatSnackBarConfig) {}\n\n  /**\n   * Creates and dispatches a snack bar with a custom component for the content, removing any\n   * currently opened snack bars.\n   *\n   * @param component Component to be instantiated.\n   * @param config Extra configuration for the snack bar.\n   */\n  openFromComponent<T>(component: ComponentType<T>, config?: MatSnackBarConfig):\n    MatSnackBarRef<T> {\n    return this._attach(component, config) as MatSnackBarRef<T>;\n  }\n\n  /**\n   * Creates and dispatches a snack bar with a custom template for the content, removing any\n   * currently opened snack bars.\n   *\n   * @param template Template to be instantiated.\n   * @param config Extra configuration for the snack bar.\n   */\n  openFromTemplate(template: TemplateRef<any>, config?: MatSnackBarConfig):\n    MatSnackBarRef<EmbeddedViewRef<any>> {\n    return this._attach(template, config);\n  }\n\n  /**\n   * Opens a snackbar with a message and an optional action.\n   * @param message The message to show in the snackbar.\n   * @param action The label for the snackbar action.\n   * @param config Additional configuration options for the snackbar.\n   */\n  open(message: string, action: string = '', config?: MatSnackBarConfig):\n      MatSnackBarRef<SimpleSnackBar> {\n    const _config = {...this._defaultConfig, ...config};\n\n    // Since the user doesn't have access to the component, we can\n    // override the data to pass in our own message and action.\n    _config.data = {message, action};\n\n    if (!_config.announcementMessage) {\n      _config.announcementMessage = message;\n    }\n\n    return this.openFromComponent(SimpleSnackBar, _config);\n  }\n\n  /**\n   * Dismisses the currently-visible snack bar.\n   */\n  dismiss(): void {\n    if (this._openedSnackBarRef) {\n      this._openedSnackBarRef.dismiss();\n    }\n  }\n\n  ngOnDestroy() {\n    // Only dismiss the snack bar at the current level on destroy.\n    if (this._snackBarRefAtThisLevel) {\n      this._snackBarRefAtThisLevel.dismiss();\n    }\n  }\n\n  /**\n   * Attaches the snack bar container component to the overlay.\n   */\n  private _attachSnackBarContainer(overlayRef: OverlayRef,\n                                   config: MatSnackBarConfig): MatSnackBarContainer {\n\n    const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n    const injector = new PortalInjector(userInjector || this._injector, new WeakMap([\n      [MatSnackBarConfig, config]\n    ]));\n\n    const containerPortal =\n        new ComponentPortal(MatSnackBarContainer, config.viewContainerRef, injector);\n    const containerRef: ComponentRef<MatSnackBarContainer> = overlayRef.attach(containerPortal);\n    containerRef.instance.snackBarConfig = config;\n    return containerRef.instance;\n  }\n\n  /**\n   * Places a new component or a template as the content of the snack bar container.\n   */\n  private _attach<T>(content: ComponentType<T> | TemplateRef<T>, userConfig?: MatSnackBarConfig):\n    MatSnackBarRef<T | EmbeddedViewRef<any>> {\n\n    const config = {...new MatSnackBarConfig(), ...this._defaultConfig, ...userConfig};\n    const overlayRef = this._createOverlay(config);\n    const container = this._attachSnackBarContainer(overlayRef, config);\n    const snackBarRef = new MatSnackBarRef<T | EmbeddedViewRef<any>>(container, overlayRef);\n\n    if (content instanceof TemplateRef) {\n      const portal = new TemplatePortal(content, null!, {\n        $implicit: config.data,\n        snackBarRef\n      } as any);\n\n      snackBarRef.instance = container.attachTemplatePortal(portal);\n    } else {\n      const injector = this._createInjector(config, snackBarRef);\n      const portal = new ComponentPortal(content, undefined, injector);\n      const contentRef = container.attachComponentPortal<T>(portal);\n\n      // We can't pass this via the injector, because the injector is created earlier.\n      snackBarRef.instance = contentRef.instance;\n    }\n\n    // Subscribe to the breakpoint observer and attach the mat-snack-bar-handset class as\n    // appropriate. This class is applied to the overlay element because the overlay must expand to\n    // fill the width of the screen for full width snackbars.\n    this._breakpointObserver.observe(Breakpoints.Handset).pipe(\n      takeUntil(overlayRef.detachments().pipe(take(1)))\n    ).subscribe(state => {\n      if (state.matches) {\n        overlayRef.overlayElement.classList.add('mat-snack-bar-handset');\n      } else {\n        overlayRef.overlayElement.classList.remove('mat-snack-bar-handset');\n      }\n    });\n\n    this._animateSnackBar(snackBarRef, config);\n    this._openedSnackBarRef = snackBarRef;\n    return this._openedSnackBarRef;\n  }\n\n  /** Animates the old snack bar out and the new one in. */\n  private _animateSnackBar(snackBarRef: MatSnackBarRef<any>, config: MatSnackBarConfig) {\n    // When the snackbar is dismissed, clear the reference to it.\n    snackBarRef.afterDismissed().subscribe(() => {\n      // Clear the snackbar ref if it hasn't already been replaced by a newer snackbar.\n      if (this._openedSnackBarRef == snackBarRef) {\n        this._openedSnackBarRef = null;\n      }\n    });\n\n    if (this._openedSnackBarRef) {\n      // If a snack bar is already in view, dismiss it and enter the\n      // new snack bar after exit animation is complete.\n      this._openedSnackBarRef.afterDismissed().subscribe(() => {\n        snackBarRef.containerInstance.enter();\n      });\n      this._openedSnackBarRef.dismiss();\n    } else {\n      // If no snack bar is in view, enter the new snack bar.\n      snackBarRef.containerInstance.enter();\n    }\n\n    // If a dismiss timeout is provided, set up dismiss based on after the snackbar is opened.\n    if (config.duration && config.duration > 0) {\n      snackBarRef.afterOpened().subscribe(() => snackBarRef._dismissAfter(config.duration!));\n    }\n\n    if (config.announcementMessage) {\n      this._live.announce(config.announcementMessage, config.politeness);\n    }\n  }\n\n  /**\n   * Creates a new overlay and places it in the correct location.\n   * @param config The user-specified snack bar config.\n   */\n  private _createOverlay(config: MatSnackBarConfig): OverlayRef {\n    const overlayConfig = new OverlayConfig();\n    overlayConfig.direction = config.direction;\n\n    let positionStrategy = this._overlay.position().global();\n    // Set horizontal position.\n    const isRtl = config.direction === 'rtl';\n    const isLeft = (\n      config.horizontalPosition === 'left' ||\n      (config.horizontalPosition === 'start' && !isRtl) ||\n      (config.horizontalPosition === 'end' && isRtl));\n    const isRight = !isLeft && config.horizontalPosition !== 'center';\n    if (isLeft) {\n      positionStrategy.left('0');\n    } else if (isRight) {\n      positionStrategy.right('0');\n    } else {\n      positionStrategy.centerHorizontally();\n    }\n    // Set horizontal position.\n    if (config.verticalPosition === 'top') {\n      positionStrategy.top('0');\n    } else {\n      positionStrategy.bottom('0');\n    }\n\n    overlayConfig.positionStrategy = positionStrategy;\n    return this._overlay.create(overlayConfig);\n  }\n\n  /**\n   * Creates an injector to be used inside of a snack bar component.\n   * @param config Config that was used to create the snack bar.\n   * @param snackBarRef Reference to the snack bar.\n   */\n  private _createInjector<T>(\n      config: MatSnackBarConfig,\n      snackBarRef: MatSnackBarRef<T>): PortalInjector {\n\n    const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n\n    return new PortalInjector(userInjector || this._injector, new WeakMap<any, any>([\n      [MatSnackBarRef, snackBarRef],\n      [MAT_SNACK_BAR_DATA, config.data]\n    ]));\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  Directive,\n  EventEmitter,\n  Input,\n  isDevMode,\n  OnChanges,\n  OnDestroy,\n  OnInit,\n  Output,\n} from '@angular/core';\nimport {\n  CanDisable,\n  CanDisableCtor,\n  HasInitialized,\n  HasInitializedCtor,\n  mixinDisabled,\n  mixinInitialized,\n} from '@angular/material/core';\nimport {Subject} from 'rxjs';\nimport {SortDirection} from './sort-direction';\nimport {\n  getSortDuplicateSortableIdError,\n  getSortHeaderMissingIdError,\n  getSortInvalidDirectionError,\n} from './sort-errors';\n\n/** Interface for a directive that holds sorting state consumed by `MatSortHeader`. */\nexport interface MatSortable {\n  /** The id of the column being sorted. */\n  id: string;\n\n  /** Starting sort direction. */\n  start: 'asc' | 'desc';\n\n  /** Whether to disable clearing the sorting state. */\n  disableClear: boolean;\n}\n\n/** The current sort state. */\nexport interface Sort {\n  /** The id of the column being sorted. */\n  active: string;\n\n  /** The sort direction. */\n  direction: SortDirection;\n}\n\n// Boilerplate for applying mixins to MatSort.\n/** @docs-private */\nexport class MatSortBase {}\nexport const _MatSortMixinBase: HasInitializedCtor & CanDisableCtor & typeof MatSortBase =\n    mixinInitialized(mixinDisabled(MatSortBase));\n\n/** Container for MatSortables to manage the sort state and provide default sort parameters. */\n@Directive({\n  selector: '[matSort]',\n  exportAs: 'matSort',\n  inputs: ['disabled: matSortDisabled']\n})\nexport class MatSort extends _MatSortMixinBase\n    implements CanDisable, HasInitialized, OnChanges, OnDestroy, OnInit {\n  /** Collection of all registered sortables that this directive manages. */\n  sortables = new Map<string, MatSortable>();\n\n  /** Used to notify any child components listening to state changes. */\n  readonly _stateChanges = new Subject<void>();\n\n  /** The id of the most recently sorted MatSortable. */\n  @Input('matSortActive') active: string;\n\n  /**\n   * The direction to set when an MatSortable is initially sorted.\n   * May be overriden by the MatSortable's sort start.\n   */\n  @Input('matSortStart') start: 'asc' | 'desc' = 'asc';\n\n  /** The sort direction of the currently active MatSortable. */\n  @Input('matSortDirection')\n  get direction(): SortDirection { return this._direction; }\n  set direction(direction: SortDirection) {\n    if (isDevMode() && direction && direction !== 'asc' && direction !== 'desc') {\n      throw getSortInvalidDirectionError(direction);\n    }\n    this._direction = direction;\n  }\n  private _direction: SortDirection = '';\n\n  /**\n   * Whether to disable the user from clearing the sort by finishing the sort direction cycle.\n   * May be overriden by the MatSortable's disable clear input.\n   */\n  @Input('matSortDisableClear')\n  get disableClear(): boolean { return this._disableClear; }\n  set disableClear(v: boolean) { this._disableClear = coerceBooleanProperty(v); }\n  private _disableClear: boolean;\n\n  /** Event emitted when the user changes either the active sort or sort direction. */\n  @Output('matSortChange') readonly sortChange: EventEmitter<Sort> = new EventEmitter<Sort>();\n\n  /**\n   * Register function to be used by the contained MatSortables. Adds the MatSortable to the\n   * collection of MatSortables.\n   */\n  register(sortable: MatSortable): void {\n    if (!sortable.id) {\n      throw getSortHeaderMissingIdError();\n    }\n\n    if (this.sortables.has(sortable.id)) {\n      throw getSortDuplicateSortableIdError(sortable.id);\n    }\n    this.sortables.set(sortable.id, sortable);\n  }\n\n  /**\n   * Unregister function to be used by the contained MatSortables. Removes the MatSortable from the\n   * collection of contained MatSortables.\n   */\n  deregister(sortable: MatSortable): void {\n    this.sortables.delete(sortable.id);\n  }\n\n  /** Sets the active sort id and determines the new sort direction. */\n  sort(sortable: MatSortable): void {\n    if (this.active != sortable.id) {\n      this.active = sortable.id;\n      this.direction = sortable.start ? sortable.start : this.start;\n    } else {\n      this.direction = this.getNextSortDirection(sortable);\n    }\n\n    this.sortChange.emit({active: this.active, direction: this.direction});\n  }\n\n  /** Returns the next sort direction of the active sortable, checking for potential overrides. */\n  getNextSortDirection(sortable: MatSortable): SortDirection {\n    if (!sortable) { return ''; }\n\n    // Get the sort direction cycle with the potential sortable overrides.\n    const disableClear = sortable.disableClear != null ? sortable.disableClear : this.disableClear;\n    let sortDirectionCycle = getSortDirectionCycle(sortable.start || this.start, disableClear);\n\n    // Get and return the next direction in the cycle\n    let nextDirectionIndex = sortDirectionCycle.indexOf(this.direction) + 1;\n    if (nextDirectionIndex >= sortDirectionCycle.length) { nextDirectionIndex = 0; }\n    return sortDirectionCycle[nextDirectionIndex];\n  }\n\n  ngOnInit() {\n    this._markInitialized();\n  }\n\n  ngOnChanges() {\n    this._stateChanges.next();\n  }\n\n  ngOnDestroy() {\n    this._stateChanges.complete();\n  }\n}\n\n/** Returns the sort direction cycle to use given the provided parameters of order and clear. */\nfunction getSortDirectionCycle(start: 'asc' | 'desc',\n                               disableClear: boolean): SortDirection[] {\n  let sortOrder: SortDirection[] = ['asc', 'desc'];\n  if (start == 'desc') { sortOrder.reverse(); }\n  if (!disableClear) { sortOrder.push(''); }\n\n  return sortOrder;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {AnimationEvent} from '@angular/animations';\nimport {FocusMonitor, FocusOrigin, FocusTrap, FocusTrapFactory} from '@angular/cdk/a11y';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {ESCAPE} from '@angular/cdk/keycodes';\nimport {Platform} from '@angular/cdk/platform';\nimport {CdkScrollable, ScrollDispatcher} from '@angular/cdk/scrolling';\nimport {DOCUMENT} from '@angular/common';\nimport {\n  AfterContentChecked,\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  ContentChildren,\n  DoCheck,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  Output,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {fromEvent, merge, Observable, Subject} from 'rxjs';\nimport {debounceTime, filter, map, startWith, take, takeUntil} from 'rxjs/operators';\nimport {matDrawerAnimations} from './drawer-animations';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\n\n\n/**\n * Throws an exception when two MatDrawer are matching the same position.\n * @docs-private\n */\nexport function throwMatDuplicatedDrawerError(position: string) {\n  throw Error(`A drawer was already declared for 'position=\"${position}\"'`);\n}\n\n\n/** Result of the toggle promise that indicates the state of the drawer. */\nexport type MatDrawerToggleResult = 'open' | 'close';\n\n/** Configures whether drawers should use auto sizing by default. */\nexport const MAT_DRAWER_DEFAULT_AUTOSIZE =\n    new InjectionToken<boolean>('MAT_DRAWER_DEFAULT_AUTOSIZE', {\n      providedIn: 'root',\n      factory: MAT_DRAWER_DEFAULT_AUTOSIZE_FACTORY,\n    });\n\n/** @docs-private */\nexport function MAT_DRAWER_DEFAULT_AUTOSIZE_FACTORY(): boolean {\n  return false;\n}\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-drawer-content',\n  template: '<ng-content></ng-content>',\n  host: {\n    'class': 'mat-drawer-content',\n    '[style.margin-left.px]': '_container._contentMargins.left',\n    '[style.margin-right.px]': '_container._contentMargins.right',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatDrawerContent extends CdkScrollable implements AfterContentInit {\n  constructor(\n      private _changeDetectorRef: ChangeDetectorRef,\n      @Inject(forwardRef(() => MatDrawerContainer)) public _container: MatDrawerContainer,\n      elementRef: ElementRef<HTMLElement>,\n      scrollDispatcher: ScrollDispatcher,\n      ngZone: NgZone) {\n    super(elementRef, scrollDispatcher, ngZone);\n  }\n\n  ngAfterContentInit() {\n    this._container._contentMarginChanges.subscribe(() => {\n      this._changeDetectorRef.markForCheck();\n    });\n  }\n}\n\n\n/**\n * This component corresponds to a drawer that can be opened on the drawer container.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-drawer',\n  exportAs: 'matDrawer',\n  templateUrl: 'drawer.html',\n  animations: [matDrawerAnimations.transformDrawer],\n  host: {\n    'class': 'mat-drawer',\n    '[@transform]': '_animationState',\n    '(@transform.start)': '_onAnimationStart($event)',\n    '(@transform.done)': '_onAnimationEnd($event)',\n    // must prevent the browser from aligning text based on value\n    '[attr.align]': 'null',\n    '[class.mat-drawer-end]': 'position === \"end\"',\n    '[class.mat-drawer-over]': 'mode === \"over\"',\n    '[class.mat-drawer-push]': 'mode === \"push\"',\n    '[class.mat-drawer-side]': 'mode === \"side\"',\n    'tabIndex': '-1',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatDrawer implements AfterContentInit, AfterContentChecked, OnDestroy {\n  private _focusTrap: FocusTrap;\n  private _elementFocusedBeforeDrawerWasOpened: HTMLElement | null = null;\n\n  /** Whether the drawer is initialized. Used for disabling the initial animation. */\n  private _enableAnimations = false;\n\n  /** The side that the drawer is attached to. */\n  @Input()\n  get position(): 'start' | 'end' { return this._position; }\n  set position(value: 'start' | 'end') {\n    // Make sure we have a valid value.\n    value = value === 'end' ? 'end' : 'start';\n    if (value != this._position) {\n      this._position = value;\n      this.onPositionChanged.emit();\n    }\n  }\n  private _position: 'start' | 'end' = 'start';\n\n  /** Mode of the drawer; one of 'over', 'push' or 'side'. */\n  @Input()\n  get mode(): 'over' | 'push' | 'side' { return this._mode; }\n  set mode(value: 'over' | 'push' | 'side') {\n    this._mode = value;\n    this._modeChanged.next();\n  }\n  private _mode: 'over' | 'push' | 'side' = 'over';\n\n  /** Whether the drawer can be closed with the escape key or by clicking on the backdrop. */\n  @Input()\n  get disableClose(): boolean { return this._disableClose; }\n  set disableClose(value: boolean) { this._disableClose = coerceBooleanProperty(value); }\n  private _disableClose: boolean = false;\n\n  /** Whether the drawer should focus the first focusable element automatically when opened. */\n  @Input()\n  get autoFocus(): boolean { return this._autoFocus; }\n  set autoFocus(value: boolean) { this._autoFocus = coerceBooleanProperty(value); }\n  private _autoFocus: boolean = true;\n\n  /** How the sidenav was opened (keypress, mouse click etc.) */\n  private _openedVia: FocusOrigin | null;\n\n  /** Emits whenever the drawer has started animating. */\n  _animationStarted = new EventEmitter<AnimationEvent>();\n\n  /** Current state of the sidenav animation. */\n  _animationState: 'open-instant' | 'open' | 'void' = 'void';\n\n  /** Event emitted when the drawer open state is changed. */\n  @Output() readonly openedChange: EventEmitter<boolean> =\n      // Note this has to be async in order to avoid some issues with two-bindings (see #8872).\n      new EventEmitter<boolean>(/* isAsync */true);\n\n  /** Event emitted when the drawer has been opened. */\n  @Output('opened')\n  get _openedStream(): Observable<void> {\n    return this.openedChange.pipe(filter(o => o), map(() => {}));\n  }\n\n  /** Event emitted when the drawer has started opening. */\n  @Output()\n  get openedStart(): Observable<void> {\n    return this._animationStarted.pipe(\n      filter(e => e.fromState !== e.toState && e.toState.indexOf('open') === 0),\n      map(() => {})\n    );\n  }\n\n  /** Event emitted when the drawer has been closed. */\n  @Output('closed')\n  get _closedStream(): Observable<void> {\n    return this.openedChange.pipe(filter(o => !o), map(() => {}));\n  }\n\n  /** Event emitted when the drawer has started closing. */\n  @Output()\n  get closedStart(): Observable<void> {\n    return this._animationStarted.pipe(\n      filter(e => e.fromState !== e.toState && e.toState === 'void'),\n      map(() => {})\n    );\n  }\n\n  /** Event emitted when the drawer's position changes. */\n  // tslint:disable-next-line:no-output-on-prefix\n  @Output('positionChanged') onPositionChanged: EventEmitter<void> = new EventEmitter<void>();\n\n  /**\n   * An observable that emits when the drawer mode changes. This is used by the drawer container to\n   * to know when to when the mode changes so it can adapt the margins on the content.\n   */\n  readonly _modeChanged = new Subject();\n\n  get _isFocusTrapEnabled(): boolean {\n    // The focus trap is only enabled when the drawer is open in any mode other than side.\n    return this.opened && this.mode !== 'side';\n  }\n\n  constructor(private _elementRef: ElementRef<HTMLElement>,\n              private _focusTrapFactory: FocusTrapFactory,\n              private _focusMonitor: FocusMonitor,\n              private _platform: Platform,\n              private _ngZone: NgZone,\n              @Optional() @Inject(DOCUMENT) private _doc: any) {\n\n    this.openedChange.subscribe((opened: boolean) => {\n      if (opened) {\n        if (this._doc) {\n          this._elementFocusedBeforeDrawerWasOpened = this._doc.activeElement as HTMLElement;\n        }\n\n        if (this._isFocusTrapEnabled && this._focusTrap) {\n          this._trapFocus();\n        }\n      } else {\n        this._restoreFocus();\n      }\n    });\n\n    /**\n     * Listen to `keydown` events outside the zone so that change detection is not run every\n     * time a key is pressed. Instead we re-enter the zone only if the `ESC` key is pressed\n     * and we don't have close disabled.\n     */\n    this._ngZone.runOutsideAngular(() => {\n        fromEvent<KeyboardEvent>(this._elementRef.nativeElement, 'keydown').pipe(\n            filter(event => event.keyCode === ESCAPE && !this.disableClose)\n        ).subscribe(event => this._ngZone.run(() => {\n            this.close();\n            event.stopPropagation();\n        }));\n    });\n  }\n\n  /** Traps focus inside the drawer. */\n  private _trapFocus() {\n    if (!this.autoFocus) {\n      return;\n    }\n\n    this._focusTrap.focusInitialElementWhenReady().then(hasMovedFocus => {\n      // If there were no focusable elements, focus the sidenav itself so the keyboard navigation\n      // still works. We need to check that `focus` is a function due to Universal.\n      if (!hasMovedFocus && typeof this._elementRef.nativeElement.focus === 'function') {\n        this._elementRef.nativeElement.focus();\n      }\n    });\n  }\n\n  /**\n   * If focus is currently inside the drawer, restores it to where it was before the drawer\n   * opened.\n   */\n  private _restoreFocus() {\n    if (!this.autoFocus) {\n      return;\n    }\n\n    const activeEl = this._doc && this._doc.activeElement;\n\n    if (activeEl && this._elementRef.nativeElement.contains(activeEl)) {\n      if (this._elementFocusedBeforeDrawerWasOpened instanceof HTMLElement) {\n        this._focusMonitor.focusVia(this._elementFocusedBeforeDrawerWasOpened, this._openedVia);\n      } else {\n        this._elementRef.nativeElement.blur();\n      }\n    }\n\n    this._elementFocusedBeforeDrawerWasOpened = null;\n    this._openedVia = null;\n  }\n\n  ngAfterContentInit() {\n    this._focusTrap = this._focusTrapFactory.create(this._elementRef.nativeElement);\n    this._focusTrap.enabled = this._isFocusTrapEnabled;\n  }\n\n  ngAfterContentChecked() {\n    // Enable the animations after the lifecycle hooks have run, in order to avoid animating\n    // drawers that are open by default. When we're on the server, we shouldn't enable the\n    // animations, because we don't want the drawer to animate the first time the user sees\n    // the page.\n    if (this._platform.isBrowser) {\n      this._enableAnimations = true;\n    }\n  }\n\n  ngOnDestroy() {\n    if (this._focusTrap) {\n      this._focusTrap.destroy();\n    }\n  }\n\n  /**\n   * Whether the drawer is opened. We overload this because we trigger an event when it\n   * starts or end.\n   */\n  @Input()\n  get opened(): boolean { return this._opened; }\n  set opened(value: boolean) { this.toggle(coerceBooleanProperty(value)); }\n  private _opened: boolean = false;\n\n  /**\n   * Open the drawer.\n   * @param openedVia Whether the drawer was opened by a key press, mouse click or programmatically.\n   * Used for focus management after the sidenav is closed.\n   */\n  open(openedVia?: FocusOrigin): Promise<MatDrawerToggleResult> {\n    return this.toggle(true, openedVia);\n  }\n\n  /** Close the drawer. */\n  close(): Promise<MatDrawerToggleResult> {\n    return this.toggle(false);\n  }\n\n  /**\n   * Toggle this drawer.\n   * @param isOpen Whether the drawer should be open.\n   * @param openedVia Whether the drawer was opened by a key press, mouse click or programmatically.\n   * Used for focus management after the sidenav is closed.\n   */\n  toggle(isOpen: boolean = !this.opened, openedVia: FocusOrigin = 'program'):\n    Promise<MatDrawerToggleResult> {\n\n    this._opened = isOpen;\n\n    if (isOpen) {\n      this._animationState = this._enableAnimations ? 'open' : 'open-instant';\n      this._openedVia = openedVia;\n    } else {\n      this._animationState = 'void';\n      this._restoreFocus();\n    }\n\n    if (this._focusTrap) {\n      this._focusTrap.enabled = this._isFocusTrapEnabled;\n    }\n\n    return new Promise<MatDrawerToggleResult>(resolve => {\n      this.openedChange.pipe(take(1)).subscribe(open => resolve(open ? 'open' : 'close'));\n    });\n  }\n\n  _onAnimationStart(event: AnimationEvent) {\n    this._animationStarted.emit(event);\n  }\n\n  _onAnimationEnd(event: AnimationEvent) {\n    const {fromState, toState} = event;\n\n    if ((toState.indexOf('open') === 0 && fromState === 'void') ||\n        (toState === 'void' && fromState.indexOf('open') === 0)) {\n      this.openedChange.emit(this._opened);\n    }\n  }\n\n  get _width(): number {\n    return this._elementRef.nativeElement ? (this._elementRef.nativeElement.offsetWidth || 0) : 0;\n  }\n}\n\n\n/**\n * `<mat-drawer-container>` component.\n *\n * This is the parent component to one or two `<mat-drawer>`s that validates the state internally\n * and coordinates the backdrop and content styling.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-drawer-container',\n  exportAs: 'matDrawerContainer',\n  templateUrl: 'drawer-container.html',\n  styleUrls: ['drawer.css'],\n  host: {\n    'class': 'mat-drawer-container',\n    '[class.mat-drawer-container-explicit-backdrop]': '_backdropOverride',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatDrawerContainer implements AfterContentInit, DoCheck, OnDestroy {\n  @ContentChildren(MatDrawer) _drawers: QueryList<MatDrawer>;\n  @ContentChild(MatDrawerContent) _content: MatDrawerContent;\n  @ViewChild(MatDrawerContent) _userContent: MatDrawerContent;\n\n  /** The drawer child with the `start` position. */\n  get start(): MatDrawer | null { return this._start; }\n\n  /** The drawer child with the `end` position. */\n  get end(): MatDrawer | null { return this._end; }\n\n  /**\n   * Whether to automatically resize the container whenever\n   * the size of any of its drawers changes.\n   *\n   * **Use at your own risk!** Enabling this option can cause layout thrashing by measuring\n   * the drawers on every change detection cycle. Can be configured globally via the\n   * `MAT_DRAWER_DEFAULT_AUTOSIZE` token.\n   */\n  @Input()\n  get autosize(): boolean { return this._autosize; }\n  set autosize(value: boolean) { this._autosize = coerceBooleanProperty(value); }\n  private _autosize: boolean;\n\n  /**\n   * Whether the drawer container should have a backdrop while one of the sidenavs is open.\n   * If explicitly set to `true`, the backdrop will be enabled for drawers in the `side`\n   * mode as well.\n   */\n  @Input()\n  get hasBackdrop() {\n    if (this._backdropOverride == null) {\n      return !this._start || this._start.mode !== 'side' || !this._end || this._end.mode !== 'side';\n    }\n\n    return this._backdropOverride;\n  }\n  set hasBackdrop(value: any) {\n    this._backdropOverride = value == null ? null : coerceBooleanProperty(value);\n  }\n  _backdropOverride: boolean | null;\n\n  /** Event emitted when the drawer backdrop is clicked. */\n  @Output() readonly backdropClick: EventEmitter<void> = new EventEmitter<void>();\n\n  /** The drawer at the start/end position, independent of direction. */\n  private _start: MatDrawer | null;\n  private _end: MatDrawer | null;\n\n  /**\n   * The drawer at the left/right. When direction changes, these will change as well.\n   * They're used as aliases for the above to set the left/right style properly.\n   * In LTR, _left == _start and _right == _end.\n   * In RTL, _left == _end and _right == _start.\n   */\n  private _left: MatDrawer | null;\n  private _right: MatDrawer | null;\n\n  /** Emits when the component is destroyed. */\n  private readonly _destroyed = new Subject<void>();\n\n  /** Emits on every ngDoCheck. Used for debouncing reflows. */\n  private readonly _doCheckSubject = new Subject<void>();\n\n  /**\n   * Margins to be applied to the content. These are used to push / shrink the drawer content when a\n   * drawer is open. We use margin rather than transform even for push mode because transform breaks\n   * fixed position elements inside of the transformed element.\n   */\n  _contentMargins: {left: number|null, right: number|null} = {left: null, right: null};\n\n  readonly _contentMarginChanges = new Subject<{left: number|null, right: number|null}>();\n\n  /** Reference to the CdkScrollable instance that wraps the scrollable content. */\n  get scrollable(): CdkScrollable {\n    return this._userContent || this._content;\n  }\n\n  constructor(@Optional() private _dir: Directionality,\n              private _element: ElementRef<HTMLElement>,\n              private _ngZone: NgZone,\n              private _changeDetectorRef: ChangeDetectorRef,\n              @Inject(MAT_DRAWER_DEFAULT_AUTOSIZE) defaultAutosize = false,\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) private _animationMode?: string) {\n\n    // If a `Dir` directive exists up the tree, listen direction changes\n    // and update the left/right properties to point to the proper start/end.\n    if (_dir) {\n      _dir.change.pipe(takeUntil(this._destroyed)).subscribe(() => {\n        this._validateDrawers();\n        this._updateContentMargins();\n      });\n    }\n\n    this._autosize = defaultAutosize;\n  }\n\n  ngAfterContentInit() {\n    this._drawers.changes.pipe(startWith(null)).subscribe(() => {\n      this._validateDrawers();\n\n      this._drawers.forEach((drawer: MatDrawer) => {\n        this._watchDrawerToggle(drawer);\n        this._watchDrawerPosition(drawer);\n        this._watchDrawerMode(drawer);\n      });\n\n      if (!this._drawers.length ||\n          this._isDrawerOpen(this._start) ||\n          this._isDrawerOpen(this._end)) {\n        this._updateContentMargins();\n      }\n\n      this._changeDetectorRef.markForCheck();\n    });\n\n    this._doCheckSubject.pipe(\n      debounceTime(10), // Arbitrary debounce time, less than a frame at 60fps\n      takeUntil(this._destroyed)\n    ).subscribe(() => this._updateContentMargins());\n  }\n\n  ngOnDestroy() {\n    this._doCheckSubject.complete();\n    this._destroyed.next();\n    this._destroyed.complete();\n  }\n\n  /** Calls `open` of both start and end drawers */\n  open(): void {\n    this._drawers.forEach(drawer => drawer.open());\n  }\n\n  /** Calls `close` of both start and end drawers */\n  close(): void {\n    this._drawers.forEach(drawer => drawer.close());\n  }\n\n  ngDoCheck() {\n    // If users opted into autosizing, do a check every change detection cycle.\n    if (this._autosize && this._isPushed()) {\n      // Run outside the NgZone, otherwise the debouncer will throw us into an infinite loop.\n      this._ngZone.runOutsideAngular(() => this._doCheckSubject.next());\n    }\n  }\n\n  /**\n   * Subscribes to drawer events in order to set a class on the main container element when the\n   * drawer is open and the backdrop is visible. This ensures any overflow on the container element\n   * is properly hidden.\n   */\n  private _watchDrawerToggle(drawer: MatDrawer): void {\n    drawer._animationStarted.pipe(\n      takeUntil(this._drawers.changes),\n      filter((event: AnimationEvent) => event.fromState !== event.toState)\n    )\n    .subscribe((event: AnimationEvent) => {\n      // Set the transition class on the container so that the animations occur. This should not\n      // be set initially because animations should only be triggered via a change in state.\n      if (event.toState !== 'open-instant' && this._animationMode !== 'NoopAnimations') {\n        this._element.nativeElement.classList.add('mat-drawer-transition');\n      }\n\n      this._updateContentMargins();\n      this._changeDetectorRef.markForCheck();\n    });\n\n    if (drawer.mode !== 'side') {\n      drawer.openedChange.pipe(takeUntil(this._drawers.changes)).subscribe(() =>\n          this._setContainerClass(drawer.opened));\n    }\n  }\n\n  /**\n   * Subscribes to drawer onPositionChanged event in order to\n   * re-validate drawers when the position changes.\n   */\n  private _watchDrawerPosition(drawer: MatDrawer): void {\n    if (!drawer) {\n      return;\n    }\n    // NOTE: We need to wait for the microtask queue to be empty before validating,\n    // since both drawers may be swapping positions at the same time.\n    drawer.onPositionChanged.pipe(takeUntil(this._drawers.changes)).subscribe(() => {\n      this._ngZone.onMicrotaskEmpty.asObservable().pipe(take(1)).subscribe(() => {\n        this._validateDrawers();\n      });\n    });\n  }\n\n  /** Subscribes to changes in drawer mode so we can run change detection. */\n  private _watchDrawerMode(drawer: MatDrawer): void {\n    if (drawer) {\n      drawer._modeChanged.pipe(takeUntil(merge(this._drawers.changes, this._destroyed)))\n        .subscribe(() => {\n          this._updateContentMargins();\n          this._changeDetectorRef.markForCheck();\n        });\n    }\n  }\n\n  /** Toggles the 'mat-drawer-opened' class on the main 'mat-drawer-container' element. */\n  private _setContainerClass(isAdd: boolean): void {\n    if (isAdd) {\n      this._element.nativeElement.classList.add('mat-drawer-opened');\n    } else {\n      this._element.nativeElement.classList.remove('mat-drawer-opened');\n    }\n  }\n\n  /** Validate the state of the drawer children components. */\n  private _validateDrawers() {\n    this._start = this._end = null;\n\n    // Ensure that we have at most one start and one end drawer.\n    this._drawers.forEach(drawer => {\n      if (drawer.position == 'end') {\n        if (this._end != null) {\n          throwMatDuplicatedDrawerError('end');\n        }\n        this._end = drawer;\n      } else {\n        if (this._start != null) {\n          throwMatDuplicatedDrawerError('start');\n        }\n        this._start = drawer;\n      }\n    });\n\n    this._right = this._left = null;\n\n    // Detect if we're LTR or RTL.\n    if (this._dir && this._dir.value === 'rtl') {\n      this._left = this._end;\n      this._right = this._start;\n    } else {\n      this._left = this._start;\n      this._right = this._end;\n    }\n  }\n\n  /** Whether the container is being pushed to the side by one of the drawers. */\n  private _isPushed() {\n    return (this._isDrawerOpen(this._start) && this._start.mode != 'over') ||\n           (this._isDrawerOpen(this._end) && this._end.mode != 'over');\n  }\n\n  _onBackdropClicked() {\n    this.backdropClick.emit();\n    this._closeModalDrawer();\n  }\n\n  _closeModalDrawer() {\n    // Close all open drawers where closing is not disabled and the mode is not `side`.\n    [this._start, this._end]\n      .filter(drawer => drawer && !drawer.disableClose && this._canHaveBackdrop(drawer))\n      .forEach(drawer => drawer!.close());\n  }\n\n  _isShowingBackdrop(): boolean {\n    return (this._isDrawerOpen(this._start) && this._canHaveBackdrop(this._start)) ||\n           (this._isDrawerOpen(this._end) && this._canHaveBackdrop(this._end));\n  }\n\n  private _canHaveBackdrop(drawer: MatDrawer): boolean {\n    return drawer.mode !== 'side' || !!this._backdropOverride;\n  }\n\n  private _isDrawerOpen(drawer: MatDrawer | null): drawer is MatDrawer {\n    return drawer != null && drawer.opened;\n  }\n\n  /**\n   * Recalculates and updates the inline styles for the content. Note that this should be used\n   * sparingly, because it causes a reflow.\n   */\n  private _updateContentMargins() {\n    // 1. For drawers in `over` mode, they don't affect the content.\n    // 2. For drawers in `side` mode they should shrink the content. We do this by adding to the\n    //    left margin (for left drawer) or right margin (for right the drawer).\n    // 3. For drawers in `push` mode the should shift the content without resizing it. We do this by\n    //    adding to the left or right margin and simultaneously subtracting the same amount of\n    //    margin from the other side.\n\n    let left = 0;\n    let right = 0;\n\n    if (this._left && this._left.opened) {\n      if (this._left.mode == 'side') {\n        left += this._left._width;\n      } else if (this._left.mode == 'push') {\n        let width = this._left._width;\n        left += width;\n        right -= width;\n      }\n    }\n\n    if (this._right && this._right.opened) {\n      if (this._right.mode == 'side') {\n        right += this._right._width;\n      } else if (this._right.mode == 'push') {\n        let width = this._right._width;\n        right += width;\n        left -= width;\n      }\n    }\n\n    // If either `right` or `left` is zero, don't set a style to the element. This\n    // allows users to specify a custom size via CSS class in SSR scenarios where the\n    // measured widths will always be zero. Note that we reset to `null` here, rather\n    // than below, in order to ensure that the types in the `if` below are consistent.\n    left = left || null!;\n    right = right || null!;\n\n    if (left !== this._contentMargins.left || right !== this._contentMargins.right) {\n      this._contentMargins = {left, right};\n\n      // Pull back into the NgZone since in some cases we could be outside. We need to be careful\n      // to do it only when something changed, otherwise we can end up hitting the zone too often.\n      this._ngZone.run(() => this._contentMarginChanges.next(this._contentMargins));\n    }\n\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  ContentChildren,\n  forwardRef,\n  Inject,\n  Input,\n  ViewEncapsulation,\n  QueryList,\n  ElementRef,\n  NgZone,\n} from '@angular/core';\nimport {MatDrawer, MatDrawerContainer, MatDrawerContent} from './drawer';\nimport {matDrawerAnimations} from './drawer-animations';\nimport {coerceBooleanProperty, coerceNumberProperty} from '@angular/cdk/coercion';\nimport {ScrollDispatcher} from '@angular/cdk/scrolling';\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-sidenav-content',\n  template: '<ng-content></ng-content>',\n  host: {\n    'class': 'mat-drawer-content mat-sidenav-content',\n    '[style.margin-left.px]': '_container._contentMargins.left',\n    '[style.margin-right.px]': '_container._contentMargins.right',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatSidenavContent extends MatDrawerContent {\n  constructor(\n      changeDetectorRef: ChangeDetectorRef,\n      @Inject(forwardRef(() => MatSidenavContainer)) container: MatSidenavContainer,\n      elementRef: ElementRef<HTMLElement>,\n      scrollDispatcher: ScrollDispatcher,\n      ngZone: NgZone) {\n    super(changeDetectorRef, container, elementRef, scrollDispatcher, ngZone);\n  }\n}\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-sidenav',\n  exportAs: 'matSidenav',\n  templateUrl: 'drawer.html',\n  animations: [matDrawerAnimations.transformDrawer],\n  host: {\n    'class': 'mat-drawer mat-sidenav',\n    'tabIndex': '-1',\n    '[@transform]': '_animationState',\n    '(@transform.start)': '_onAnimationStart($event)',\n    '(@transform.done)': '_onAnimationEnd($event)',\n    // must prevent the browser from aligning text based on value\n    '[attr.align]': 'null',\n    '[class.mat-drawer-end]': 'position === \"end\"',\n    '[class.mat-drawer-over]': 'mode === \"over\"',\n    '[class.mat-drawer-push]': 'mode === \"push\"',\n    '[class.mat-drawer-side]': 'mode === \"side\"',\n    '[class.mat-sidenav-fixed]': 'fixedInViewport',\n    '[style.top.px]': 'fixedInViewport ? fixedTopGap : null',\n    '[style.bottom.px]': 'fixedInViewport ? fixedBottomGap : null',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatSidenav extends MatDrawer {\n  /** Whether the sidenav is fixed in the viewport. */\n  @Input()\n  get fixedInViewport(): boolean { return this._fixedInViewport; }\n  set fixedInViewport(value) { this._fixedInViewport = coerceBooleanProperty(value); }\n  private _fixedInViewport = false;\n\n  /**\n   * The gap between the top of the sidenav and the top of the viewport when the sidenav is in fixed\n   * mode.\n   */\n  @Input()\n  get fixedTopGap(): number { return this._fixedTopGap; }\n  set fixedTopGap(value) { this._fixedTopGap = coerceNumberProperty(value); }\n  private _fixedTopGap = 0;\n\n  /**\n   * The gap between the bottom of the sidenav and the bottom of the viewport when the sidenav is in\n   * fixed mode.\n   */\n  @Input()\n  get fixedBottomGap(): number { return this._fixedBottomGap; }\n  set fixedBottomGap(value) { this._fixedBottomGap = coerceNumberProperty(value); }\n  private _fixedBottomGap = 0;\n}\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-sidenav-container',\n  exportAs: 'matSidenavContainer',\n  templateUrl: 'sidenav-container.html',\n  styleUrls: ['drawer.css'],\n  host: {\n    'class': 'mat-drawer-container mat-sidenav-container',\n    '[class.mat-drawer-container-explicit-backdrop]': '_backdropOverride',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatSidenavContainer extends MatDrawerContainer {\n  @ContentChildren(MatSidenav) _drawers: QueryList<MatSidenav>;\n  @ContentChild(MatSidenavContent) _content: MatSidenavContent;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {PlatformModule} from '@angular/cdk/platform';\nimport {ScrollingModule} from '@angular/cdk/scrolling';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatDrawer, MatDrawerContainer, MatDrawerContent} from './drawer';\nimport {MatSidenav, MatSidenavContainer, MatSidenavContent} from './sidenav';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatCommonModule,\n    ScrollingModule,\n    PlatformModule,\n  ],\n  exports: [\n    MatCommonModule,\n    MatDrawer,\n    MatDrawerContainer,\n    MatDrawerContent,\n    MatSidenav,\n    MatSidenavContainer,\n    MatSidenavContent,\n  ],\n  declarations: [\n    MatDrawer,\n    MatDrawerContainer,\n    MatDrawerContent,\n    MatSidenav,\n    MatSidenavContainer,\n    MatSidenavContent,\n  ],\n})\nexport class MatSidenavModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {InjectionToken} from '@angular/core';\n\n\n/** Default `mat-slide-toggle` options that can be overridden. */\nexport interface MatSlideToggleDefaultOptions {\n  /** Whether toggle action triggers value changes in slide toggle. */\n  disableToggleValue?: boolean;\n  /** Whether drag action triggers value changes in slide toggle. */\n  disableDragValue?: boolean;\n}\n\n/** Injection token to be used to override the default options for `mat-slide-toggle`. */\nexport const MAT_SLIDE_TOGGLE_DEFAULT_OPTIONS =\n  new InjectionToken<MatSlideToggleDefaultOptions>('mat-slide-toggle-default-options', {\n    providedIn: 'root',\n    factory: () => ({disableToggleValue: false, disableDragValue: false})\n  });\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor} from '@angular/cdk/a11y';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {Platform} from '@angular/cdk/platform';\nimport {\n  AfterContentInit,\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Input,\n  OnDestroy,\n  Output,\n  ViewChild,\n  ViewEncapsulation,\n  NgZone,\n  Optional,\n  Inject,\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {\n  CanColor, CanColorCtor,\n  CanDisable, CanDisableCtor,\n  CanDisableRipple, CanDisableRippleCtor,\n  HammerInput,\n  HasTabIndex, HasTabIndexCtor,\n  mixinColor,\n  mixinDisabled,\n  mixinDisableRipple,\n  mixinTabIndex,\n} from '@angular/material/core';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\nimport {\n  MAT_SLIDE_TOGGLE_DEFAULT_OPTIONS,\n  MatSlideToggleDefaultOptions\n} from './slide-toggle-config';\n\n// Increasing integer for generating unique ids for slide-toggle components.\nlet nextUniqueId = 0;\n\nexport const MAT_SLIDE_TOGGLE_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatSlideToggle),\n  multi: true\n};\n\n/** Change event object emitted by a MatSlideToggle. */\nexport class MatSlideToggleChange {\n  constructor(\n    /** The source MatSlideToggle of the event. */\n    public source: MatSlideToggle,\n    /** The new `checked` value of the MatSlideToggle. */\n    public checked: boolean) { }\n}\n\n// Boilerplate for applying mixins to MatSlideToggle.\n/** @docs-private */\nexport class MatSlideToggleBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatSlideToggleMixinBase:\n    HasTabIndexCtor &\n    CanColorCtor &\n    CanDisableRippleCtor &\n    CanDisableCtor &\n    typeof MatSlideToggleBase =\n        mixinTabIndex(mixinColor(mixinDisableRipple(mixinDisabled(MatSlideToggleBase)), 'accent'));\n\n/** Represents a slidable \"switch\" toggle that can be moved between on and off. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-slide-toggle',\n  exportAs: 'matSlideToggle',\n  host: {\n    'class': 'mat-slide-toggle',\n    '[id]': 'id',\n    '[attr.tabindex]': 'null',\n    '[class.mat-checked]': 'checked',\n    '[class.mat-disabled]': 'disabled',\n    '[class.mat-slide-toggle-label-before]': 'labelPosition == \"before\"',\n    '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"',\n  },\n  templateUrl: 'slide-toggle.html',\n  styleUrls: ['slide-toggle.css'],\n  providers: [MAT_SLIDE_TOGGLE_VALUE_ACCESSOR],\n  inputs: ['disabled', 'disableRipple', 'color', 'tabIndex'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatSlideToggle extends _MatSlideToggleMixinBase implements OnDestroy, AfterContentInit,\n    ControlValueAccessor, CanDisable, CanColor, HasTabIndex, CanDisableRipple {\n\n  private onChange = (_: any) => {};\n  private onTouched = () => {};\n\n  private _uniqueId: string = `mat-slide-toggle-${++nextUniqueId}`;\n  private _required: boolean = false;\n  private _checked: boolean = false;\n\n  /** Whether the thumb is currently being dragged. */\n  private _dragging = false;\n\n  /** Previous checked state before drag started. */\n  private _previousChecked: boolean;\n\n  /** Width of the thumb bar of the slide-toggle. */\n  private _thumbBarWidth: number;\n\n  /** Percentage of the thumb while dragging. Percentage as fraction of 100. */\n  private _dragPercentage: number;\n\n  /** Reference to the thumb HTMLElement. */\n  @ViewChild('thumbContainer') _thumbEl: ElementRef;\n\n  /** Reference to the thumb bar HTMLElement. */\n  @ViewChild('toggleBar') _thumbBarEl: ElementRef;\n\n  /** Name value will be applied to the input element if present */\n  @Input() name: string | null = null;\n\n  /** A unique id for the slide-toggle input. If none is supplied, it will be auto-generated. */\n  @Input() id: string = this._uniqueId;\n\n  /** Whether the label should appear after or before the slide-toggle. Defaults to 'after' */\n  @Input() labelPosition: 'before' | 'after' = 'after';\n\n  /** Whether the slide-toggle element is checked or not */\n\n  /** Used to set the aria-label attribute on the underlying input element. */\n  @Input('aria-label') ariaLabel: string | null = null;\n\n  /** Used to set the aria-labelledby attribute on the underlying input element. */\n  @Input('aria-labelledby') ariaLabelledby: string | null = null;\n\n  /** Whether the slide-toggle is required. */\n  @Input()\n  get required(): boolean { return this._required; }\n  set required(value) { this._required = coerceBooleanProperty(value); }\n\n  /** Whether the slide-toggle element is checked or not */\n  @Input()\n  get checked(): boolean { return this._checked; }\n  set checked(value) {\n    this._checked = coerceBooleanProperty(value);\n    this._changeDetectorRef.markForCheck();\n  }\n  /** An event will be dispatched each time the slide-toggle changes its value. */\n  @Output() readonly change: EventEmitter<MatSlideToggleChange> =\n      new EventEmitter<MatSlideToggleChange>();\n\n  /**\n   * An event will be dispatched each time the slide-toggle input is toggled.\n   * This event always fire when user toggle the slide toggle, but does not mean the slide toggle's\n   * value is changed. The event does not fire when user drag to change the slide toggle value.\n   */\n  @Output() readonly toggleChange: EventEmitter<void> = new EventEmitter<void>();\n\n  /**\n   * An event will be dispatched each time the slide-toggle is dragged.\n   * This event always fire when user drag the slide toggle to make a change that greater than 50%.\n   * It does not mean the slide toggle's value is changed. The event does not fire when user toggle\n   * the slide toggle to change the slide toggle's value.\n   */\n  @Output() readonly dragChange: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Returns the unique id for the visual hidden input. */\n  get inputId(): string { return `${this.id || this._uniqueId}-input`; }\n\n  /** Reference to the underlying input element. */\n  @ViewChild('input') _inputElement: ElementRef<HTMLInputElement>;\n\n  constructor(elementRef: ElementRef,\n              /**\n               * @deprecated The `_platform` parameter to be removed.\n               * @breaking-change 7.0.0\n               */\n              _platform: Platform,\n              private _focusMonitor: FocusMonitor,\n              private _changeDetectorRef: ChangeDetectorRef,\n              @Attribute('tabindex') tabIndex: string,\n              private _ngZone: NgZone,\n              @Inject(MAT_SLIDE_TOGGLE_DEFAULT_OPTIONS)\n                  public defaults: MatSlideToggleDefaultOptions,\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode?: string,\n              @Optional() private _dir?: Directionality) {\n    super(elementRef);\n    this.tabIndex = parseInt(tabIndex) || 0;\n  }\n\n  ngAfterContentInit() {\n    this._focusMonitor\n      .monitor(this._elementRef, true)\n      .subscribe(focusOrigin => {\n        if (!focusOrigin) {\n          // When a focused element becomes disabled, the browser *immediately* fires a blur event.\n          // Angular does not expect events to be raised during change detection, so any state\n          // change (such as a form control's 'ng-touched') will cause a changed-after-checked\n          // error. See https://github.com/angular/angular/issues/17793. To work around this,\n          // we defer telling the form control it has been touched until the next tick.\n          Promise.resolve().then(() => this.onTouched());\n        }\n      });\n  }\n\n  ngOnDestroy() {\n    this._focusMonitor.stopMonitoring(this._elementRef);\n  }\n\n  /** Method being called whenever the underlying input emits a change event. */\n  _onChangeEvent(event: Event) {\n    // We always have to stop propagation on the change event.\n    // Otherwise the change event, from the input element, will bubble up and\n    // emit its event object to the component's `change` output.\n    event.stopPropagation();\n\n    if (!this._dragging) {\n      this.toggleChange.emit();\n    }\n    // Releasing the pointer over the `<label>` element while dragging triggers another\n    // click event on the `<label>` element. This means that the checked state of the underlying\n    // input changed unintentionally and needs to be changed back. Or when the slide toggle's config\n    // disabled toggle change event by setting `disableToggleValue: true`, the slide toggle's value\n    // does not change, and the checked state of the underlying input needs to be changed back.\n    if (this._dragging || this.defaults.disableToggleValue) {\n      this._inputElement.nativeElement.checked = this.checked;\n      return;\n    }\n\n    // Sync the value from the underlying input element with the component instance.\n    this.checked = this._inputElement.nativeElement.checked;\n\n    // Emit our custom change event only if the underlying input emitted one. This ensures that\n    // there is no change event, when the checked state changes programmatically.\n    this._emitChangeEvent();\n  }\n\n  /** Method being called whenever the slide-toggle has been clicked. */\n  _onInputClick(event: Event) {\n    // We have to stop propagation for click events on the visual hidden input element.\n    // By default, when a user clicks on a label element, a generated click event will be\n    // dispatched on the associated input element. Since we are using a label element as our\n    // root container, the click event on the `slide-toggle` will be executed twice.\n    // The real click event will bubble up, and the generated click event also tries to bubble up.\n    // This will lead to multiple click events.\n    // Preventing bubbling for the second event will solve that issue.\n    event.stopPropagation();\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  writeValue(value: any): void {\n    this.checked = !!value;\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  registerOnChange(fn: any): void {\n    this.onChange = fn;\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  registerOnTouched(fn: any): void {\n    this.onTouched = fn;\n  }\n\n  /** Implemented as a part of ControlValueAccessor. */\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Focuses the slide-toggle. */\n  focus(): void {\n    this._focusMonitor.focusVia(this._inputElement, 'keyboard');\n  }\n\n  /** Toggles the checked state of the slide-toggle. */\n  toggle(): void {\n    this.checked = !this.checked;\n    this.onChange(this.checked);\n  }\n\n  /**\n   * Emits a change event on the `change` output. Also notifies the FormControl about the change.\n   */\n  private _emitChangeEvent() {\n    this.onChange(this.checked);\n    this.change.emit(new MatSlideToggleChange(this, this.checked));\n  }\n\n  /** Retrieves the percentage of thumb from the moved distance. Percentage as fraction of 100. */\n  private _getDragPercentage(distance: number) {\n    let percentage = (distance / this._thumbBarWidth) * 100;\n\n    // When the toggle was initially checked, then we have to start the drag at the end.\n    if (this._previousChecked) {\n      percentage += 100;\n    }\n\n    return Math.max(0, Math.min(percentage, 100));\n  }\n\n  _onDragStart() {\n    if (!this.disabled && !this._dragging) {\n      const thumbEl = this._thumbEl.nativeElement;\n      this._thumbBarWidth = this._thumbBarEl.nativeElement.clientWidth - thumbEl.clientWidth;\n      thumbEl.classList.add('mat-dragging');\n\n      this._previousChecked = this.checked;\n      this._dragging = true;\n    }\n  }\n\n  _onDrag(event: HammerInput) {\n    if (this._dragging) {\n      const direction = this._dir && this._dir.value === 'rtl' ? -1 : 1;\n      this._dragPercentage = this._getDragPercentage(event.deltaX * direction);\n      // Calculate the moved distance based on the thumb bar width.\n      const dragX = (this._dragPercentage / 100) * this._thumbBarWidth * direction;\n      this._thumbEl.nativeElement.style.transform = `translate3d(${dragX}px, 0, 0)`;\n    }\n  }\n\n  _onDragEnd() {\n    if (this._dragging) {\n      const newCheckedValue = this._dragPercentage > 50;\n\n      if (newCheckedValue !== this.checked) {\n        this.dragChange.emit();\n        if (!this.defaults.disableDragValue) {\n          this.checked = newCheckedValue;\n          this._emitChangeEvent();\n        }\n      }\n\n      // The drag should be stopped outside of the current event handler, otherwise the\n      // click event will be fired before it and will revert the drag change.\n      this._ngZone.runOutsideAngular(() => setTimeout(() => {\n        if (this._dragging) {\n          this._dragging = false;\n          this._thumbEl.nativeElement.classList.remove('mat-dragging');\n\n          // Reset the transform because the component will take care\n          // of the thumb position after drag.\n          this._thumbEl.nativeElement.style.transform = '';\n        }\n      }));\n    }\n  }\n\n  /** Method being called whenever the label text changes. */\n  _onLabelTextChange() {\n    // Since the event of the `cdkObserveContent` directive runs outside of the zone, the\n    // slide-toggle component will be only marked for check, but no actual change detection runs\n    // automatically. Instead of going back into the zone in order to trigger a change detection\n    // which causes *all* components to be checked (if explicitly marked or not using OnPush),\n    // we only trigger an explicit change detection for the slide-toggle view and it's children.\n    this._changeDetectorRef.detectChanges();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ObserversModule} from '@angular/cdk/observers';\nimport {NgModule} from '@angular/core';\nimport {GestureConfig, MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {HAMMER_GESTURE_CONFIG} from '@angular/platform-browser';\nimport {MatSlideToggle} from './slide-toggle';\n\n\n@NgModule({\n  imports: [MatRippleModule, MatCommonModule, ObserversModule],\n  exports: [MatSlideToggle, MatCommonModule],\n  declarations: [MatSlideToggle],\n  providers: [\n    {provide: HAMMER_GESTURE_CONFIG, useClass: GestureConfig}\n  ],\n})\nexport class MatSlideToggleModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  Component,\n  ChangeDetectionStrategy,\n  ElementRef,\n  Inject,\n  Input,\n  Output,\n  EventEmitter,\n  Optional,\n  NgZone,\n  ViewEncapsulation,\n  AfterViewInit,\n  ViewChild,\n  OnDestroy,\n  InjectionToken,\n  inject,\n} from '@angular/core';\nimport {fromEvent, Subscription} from 'rxjs';\nimport {filter} from 'rxjs/operators';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\nimport {CanColor, CanColorCtor, mixinColor} from '@angular/material/core';\nimport {DOCUMENT} from '@angular/common';\n\n// TODO(josephperrott): Benchpress tests.\n// TODO(josephperrott): Add ARIA attributes for progress bar \"for\".\n\n// Boilerplate for applying mixins to MatProgressBar.\n/** @docs-private */\nexport class MatProgressBarBase {\n  constructor(public _elementRef: ElementRef) { }\n}\n\n/** Last animation end data. */\nexport interface ProgressAnimationEnd {\n  value: number;\n}\n\nexport const _MatProgressBarMixinBase: CanColorCtor & typeof MatProgressBarBase =\n    mixinColor(MatProgressBarBase, 'primary');\n\n/**\n * Injection token used to provide the current location to `MatProgressBar`.\n * Used to handle server-side rendering and to stub out during unit tests.\n * @docs-private\n */\nexport const MAT_PROGRESS_BAR_LOCATION = new InjectionToken<MatProgressBarLocation>(\n  'mat-progress-bar-location',\n  {providedIn: 'root', factory: MAT_PROGRESS_BAR_LOCATION_FACTORY}\n);\n\n/**\n * Stubbed out location for `MatProgressBar`.\n * @docs-private\n */\nexport interface MatProgressBarLocation {\n  pathname: string;\n}\n\n/** @docs-private */\nexport function MAT_PROGRESS_BAR_LOCATION_FACTORY(): MatProgressBarLocation {\n  const _document = inject(DOCUMENT);\n  const pathname = (_document && _document.location && _document.location.pathname) || '';\n  return {pathname};\n}\n\n\n/** Counter used to generate unique IDs for progress bars. */\nlet progressbarId = 0;\n\n/**\n * `<mat-progress-bar>` component.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-progress-bar',\n  exportAs: 'matProgressBar',\n  host: {\n    'role': 'progressbar',\n    'aria-valuemin': '0',\n    'aria-valuemax': '100',\n    '[attr.aria-valuenow]': 'value',\n    '[attr.mode]': 'mode',\n    'class': 'mat-progress-bar',\n    '[class._mat-animation-noopable]': `_isNoopAnimation`,\n  },\n  inputs: ['color'],\n  templateUrl: 'progress-bar.html',\n  styleUrls: ['progress-bar.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatProgressBar extends _MatProgressBarMixinBase implements CanColor,\n                                                      AfterViewInit, OnDestroy {\n  constructor(public _elementRef: ElementRef, private _ngZone: NgZone,\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode?: string,\n              /**\n               * @deprecated `location` parameter to be made required.\n               * @breaking-change 8.0.0\n               */\n              @Optional() @Inject(MAT_PROGRESS_BAR_LOCATION) location?: MatProgressBarLocation) {\n    super(_elementRef);\n\n    // We need to prefix the SVG reference with the current path, otherwise they won't work\n    // in Safari if the page has a `<base>` tag. Note that we need quotes inside the `url()`,\n\n    // because named route URLs can contain parentheses (see #12338). Also we don't use since\n    // we can't tell the difference between whether\n    // the consumer is using the hash location strategy or not, because `Location` normalizes\n    // both `/#/foo/bar` and `/foo/bar` to the same thing.\n    const path = location && location.pathname ? location.pathname.split('#')[0] : '';\n    this._rectangleFillValue = `url('${path}#${this.progressbarId}')`;\n    this._isNoopAnimation = _animationMode === 'NoopAnimations';\n  }\n\n  /** Flag that indicates whether NoopAnimations mode is set to true. */\n  _isNoopAnimation = false;\n\n  /** Value of the progress bar. Defaults to zero. Mirrored to aria-valuenow. */\n  @Input()\n  get value(): number { return this._value; }\n  set value(v: number) {\n    this._value = clamp(v || 0);\n\n    // When noop animation is set to true, trigger animationEnd directly.\n    if (this._isNoopAnimation) {\n      this.emitAnimationEnd();\n    }\n  }\n  private _value: number = 0;\n\n  /** Buffer value of the progress bar. Defaults to zero. */\n  @Input()\n  get bufferValue(): number { return this._bufferValue; }\n  set bufferValue(v: number) { this._bufferValue = clamp(v || 0); }\n  private _bufferValue: number = 0;\n\n  @ViewChild('primaryValueBar') _primaryValueBar: ElementRef;\n\n  /**\n   * Event emitted when animation of the primary progress bar completes. This event will not\n   * be emitted when animations are disabled, nor will it be emitted for modes with continuous\n   * animations (indeterminate and query).\n   */\n  @Output() animationEnd = new EventEmitter<ProgressAnimationEnd>();\n\n  /** Reference to animation end subscription to be unsubscribed on destroy. */\n  private _animationEndSubscription: Subscription = Subscription.EMPTY;\n\n  /**\n   * Mode of the progress bar.\n   *\n   * Input must be one of these values: determinate, indeterminate, buffer, query, defaults to\n   * 'determinate'.\n   * Mirrored to mode attribute.\n   */\n  @Input() mode: 'determinate' | 'indeterminate' | 'buffer' | 'query' = 'determinate';\n\n  /** ID of the progress bar. */\n  progressbarId = `mat-progress-bar-${progressbarId++}`;\n\n  /** Attribute to be used for the `fill` attribute on the internal `rect` element. */\n  _rectangleFillValue: string;\n\n  /** Gets the current transform value for the progress bar's primary indicator. */\n  _primaryTransform() {\n    const scale = this.value / 100;\n    return {transform: `scaleX(${scale})`};\n  }\n\n  /**\n   * Gets the current transform value for the progress bar's buffer indicator. Only used if the\n   * progress mode is set to buffer, otherwise returns an undefined, causing no transformation.\n   */\n  _bufferTransform() {\n    if (this.mode === 'buffer') {\n      const scale = this.bufferValue / 100;\n      return {transform: `scaleX(${scale})`};\n    }\n  }\n\n  ngAfterViewInit() {\n    if (!this._isNoopAnimation) {\n      // Run outside angular so change detection didn't get triggered on every transition end\n      // instead only on the animation that we care about (primary value bar's transitionend)\n      this._ngZone.runOutsideAngular((() => {\n        this._animationEndSubscription =\n            fromEvent<TransitionEvent>(this._primaryValueBar.nativeElement, 'transitionend')\n            .pipe(filter(((e: TransitionEvent) =>\n              e.target === this._primaryValueBar.nativeElement)))\n            .subscribe(_ => this._ngZone.run(() => this.emitAnimationEnd()));\n      }));\n    }\n  }\n\n  ngOnDestroy() {\n    this._animationEndSubscription.unsubscribe();\n  }\n\n  /** Emit an animationEnd event if in determinate or buffer mode. */\n  private emitAnimationEnd(): void {\n    if (this.mode === 'determinate' || this.mode === 'buffer') {\n      this.animationEnd.next({value: this.value});\n    }\n  }\n}\n\n/** Clamps a value to be between two numbers, by default 0 and 100. */\nfunction clamp(v: number, min = 0, max = 100) {\n  return Math.max(min, Math.min(max, v));\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatProgressBar} from './progress-bar';\n\n\n@NgModule({\n  imports: [CommonModule, MatCommonModule],\n  exports: [MatProgressBar, MatCommonModule],\n  declarations: [MatProgressBar],\n})\nexport class MatProgressBarModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceNumberProperty} from '@angular/cdk/coercion';\nimport {Platform} from '@angular/cdk/platform';\nimport {DOCUMENT} from '@angular/common';\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  Inject,\n  InjectionToken,\n  Input,\n  Optional,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {CanColor, CanColorCtor, mixinColor} from '@angular/material/core';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\n\n\n/** Possible mode for a progress spinner. */\nexport type ProgressSpinnerMode = 'determinate' | 'indeterminate';\n\n/**\n * Base reference size of the spinner.\n * @docs-private\n */\nconst BASE_SIZE = 100;\n\n/**\n * Base reference stroke width of the spinner.\n * @docs-private\n */\nconst BASE_STROKE_WIDTH = 10;\n\n// Boilerplate for applying mixins to MatProgressSpinner.\n/** @docs-private */\nexport class MatProgressSpinnerBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatProgressSpinnerMixinBase: CanColorCtor & typeof MatProgressSpinnerBase =\n    mixinColor(MatProgressSpinnerBase, 'primary');\n\n/** Default `mat-progress-spinner` options that can be overridden. */\nexport interface MatProgressSpinnerDefaultOptions {\n  /** Diameter of the spinner. */\n  diameter?: number;\n  /** Width of the spinner's stroke. */\n  strokeWidth?: number;\n  /**\n   * Whether the animations should be force to be enabled, ignoring if the current environment is\n   * using NoopAnimationsModule.\n   */\n  _forceAnimations?: boolean;\n}\n\n/** Injection token to be used to override the default options for `mat-progress-spinner`. */\nexport const MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS =\n    new InjectionToken<MatProgressSpinnerDefaultOptions>('mat-progress-spinner-default-options', {\n      providedIn: 'root',\n      factory: MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS_FACTORY,\n    });\n\n/** @docs-private */\nexport function MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS_FACTORY(): MatProgressSpinnerDefaultOptions {\n  return {diameter: BASE_SIZE};\n}\n\n// .0001 percentage difference is necessary in order to avoid unwanted animation frames\n// for example because the animation duration is 4 seconds, .1% accounts to 4ms\n// which are enough to see the flicker described in\n// https://github.com/angular/material2/issues/8984\nconst INDETERMINATE_ANIMATION_TEMPLATE = `\n @keyframes mat-progress-spinner-stroke-rotate-DIAMETER {\n    0%      { stroke-dashoffset: START_VALUE;  transform: rotate(0); }\n    12.5%   { stroke-dashoffset: END_VALUE;    transform: rotate(0); }\n    12.5001%  { stroke-dashoffset: END_VALUE;    transform: rotateX(180deg) rotate(72.5deg); }\n    25%     { stroke-dashoffset: START_VALUE;  transform: rotateX(180deg) rotate(72.5deg); }\n\n    25.0001%   { stroke-dashoffset: START_VALUE;  transform: rotate(270deg); }\n    37.5%   { stroke-dashoffset: END_VALUE;    transform: rotate(270deg); }\n    37.5001%  { stroke-dashoffset: END_VALUE;    transform: rotateX(180deg) rotate(161.5deg); }\n    50%     { stroke-dashoffset: START_VALUE;  transform: rotateX(180deg) rotate(161.5deg); }\n\n    50.0001%  { stroke-dashoffset: START_VALUE;  transform: rotate(180deg); }\n    62.5%   { stroke-dashoffset: END_VALUE;    transform: rotate(180deg); }\n    62.5001%  { stroke-dashoffset: END_VALUE;    transform: rotateX(180deg) rotate(251.5deg); }\n    75%     { stroke-dashoffset: START_VALUE;  transform: rotateX(180deg) rotate(251.5deg); }\n\n    75.0001%  { stroke-dashoffset: START_VALUE;  transform: rotate(90deg); }\n    87.5%   { stroke-dashoffset: END_VALUE;    transform: rotate(90deg); }\n    87.5001%  { stroke-dashoffset: END_VALUE;    transform: rotateX(180deg) rotate(341.5deg); }\n    100%    { stroke-dashoffset: START_VALUE;  transform: rotateX(180deg) rotate(341.5deg); }\n  }\n`;\n\n/**\n * `<mat-progress-spinner>` component.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-progress-spinner',\n  exportAs: 'matProgressSpinner',\n  host: {\n    'role': 'progressbar',\n    'class': 'mat-progress-spinner',\n    '[class._mat-animation-noopable]': `_noopAnimations`,\n    '[style.width.px]': 'diameter',\n    '[style.height.px]': 'diameter',\n    '[attr.aria-valuemin]': 'mode === \"determinate\" ? 0 : null',\n    '[attr.aria-valuemax]': 'mode === \"determinate\" ? 100 : null',\n    '[attr.aria-valuenow]': 'value',\n    '[attr.mode]': 'mode',\n  },\n  inputs: ['color'],\n  templateUrl: 'progress-spinner.html',\n  styleUrls: ['progress-spinner.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatProgressSpinner extends _MatProgressSpinnerMixinBase implements CanColor {\n\n  private _value = 0;\n  private _strokeWidth: number;\n  private _fallbackAnimation = false;\n\n  /** Tracks diameters of existing instances to de-dupe generated styles (default d = 100) */\n  private static diameters = new Set<number>([BASE_SIZE]);\n\n  /**\n   * Used for storing all of the generated keyframe animations.\n   * @dynamic\n   */\n  private static styleTag: HTMLStyleElement|null = null;\n\n  /** Whether the _mat-animation-noopable class should be applied, disabling animations.  */\n  _noopAnimations: boolean = this.animationMode === 'NoopAnimations' && (\n      !!this.defaults && !this.defaults._forceAnimations);\n\n  /** The diameter of the progress spinner (will set width and height of svg). */\n  @Input()\n  get diameter(): number { return this._diameter; }\n  set diameter(size: number) {\n    this._diameter = coerceNumberProperty(size);\n\n    if (!this._fallbackAnimation && !MatProgressSpinner.diameters.has(this._diameter)) {\n      this._attachStyleNode();\n    }\n  }\n  private _diameter = BASE_SIZE;\n\n  /** Stroke width of the progress spinner. */\n  @Input()\n  get strokeWidth(): number {\n    return this._strokeWidth || this.diameter / 10;\n  }\n  set strokeWidth(value: number) {\n    this._strokeWidth = coerceNumberProperty(value);\n  }\n\n  /** Mode of the progress circle */\n  @Input() mode: ProgressSpinnerMode = 'determinate';\n\n  /** Value of the progress circle. */\n  @Input()\n  get value(): number {\n    return this.mode === 'determinate' ? this._value : 0;\n  }\n  set value(newValue: number) {\n    this._value = Math.max(0, Math.min(100, coerceNumberProperty(newValue)));\n  }\n\n  constructor(public _elementRef: ElementRef,\n              platform: Platform,\n              @Optional() @Inject(DOCUMENT) private _document: any,\n              // @breaking-change 7.0.0 animationMode and defaults parameters to be made required.\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) private animationMode?: string,\n              @Inject(MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS)\n                  private defaults?: MatProgressSpinnerDefaultOptions) {\n\n    super(_elementRef);\n    this._fallbackAnimation = platform.EDGE || platform.TRIDENT;\n\n    if (defaults) {\n      if (defaults.diameter) {\n        this.diameter = defaults.diameter;\n      }\n\n      if (defaults.strokeWidth) {\n        this.strokeWidth = defaults.strokeWidth;\n      }\n    }\n\n    // On IE and Edge, we can't animate the `stroke-dashoffset`\n    // reliably so we fall back to a non-spec animation.\n    const animationClass =\n      `mat-progress-spinner-indeterminate${this._fallbackAnimation ? '-fallback' : ''}-animation`;\n\n    _elementRef.nativeElement.classList.add(animationClass);\n  }\n\n  /** The radius of the spinner, adjusted for stroke width. */\n  get _circleRadius() {\n    return (this.diameter - BASE_STROKE_WIDTH) / 2;\n  }\n\n  /** The view box of the spinner's svg element. */\n  get _viewBox() {\n    const viewBox = this._circleRadius * 2 + this.strokeWidth;\n    return `0 0 ${viewBox} ${viewBox}`;\n  }\n\n  /** The stroke circumference of the svg circle. */\n  get _strokeCircumference(): number {\n    return 2 * Math.PI * this._circleRadius;\n  }\n\n  /** The dash offset of the svg circle. */\n  get _strokeDashOffset() {\n    if (this.mode === 'determinate') {\n      return this._strokeCircumference * (100 - this._value) / 100;\n    }\n\n    // In fallback mode set the circle to 80% and rotate it with CSS.\n    if (this._fallbackAnimation && this.mode === 'indeterminate') {\n      return this._strokeCircumference * 0.2;\n    }\n\n    return null;\n  }\n\n  /** Stroke width of the circle in percent. */\n  get _circleStrokeWidth() {\n    return this.strokeWidth / this.diameter * 100;\n  }\n\n  /** Dynamically generates a style tag containing the correct animation for this diameter. */\n  private _attachStyleNode(): void {\n    let styleTag = MatProgressSpinner.styleTag;\n\n    if (!styleTag) {\n      styleTag = this._document.createElement('style');\n      this._document.head.appendChild(styleTag);\n      MatProgressSpinner.styleTag = styleTag;\n    }\n\n    if (styleTag && styleTag.sheet) {\n      (styleTag.sheet as CSSStyleSheet).insertRule(this._getAnimationText(), 0);\n    }\n\n    MatProgressSpinner.diameters.add(this.diameter);\n  }\n\n  /** Generates animation styles adjusted for the spinner's diameter. */\n  private _getAnimationText(): string {\n    return INDETERMINATE_ANIMATION_TEMPLATE\n        // Animation should begin at 5% and end at 80%\n        .replace(/START_VALUE/g, `${0.95 * this._strokeCircumference}`)\n        .replace(/END_VALUE/g, `${0.2 * this._strokeCircumference}`)\n        .replace(/DIAMETER/g, `${this.diameter}`);\n  }\n}\n\n\n/**\n * `<mat-spinner>` component.\n *\n * This is a component definition to be used as a convenience reference to create an\n * indeterminate `<mat-progress-spinner>` instance.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-spinner',\n  host: {\n    'role': 'progressbar',\n    'mode': 'indeterminate',\n    'class': 'mat-spinner mat-progress-spinner',\n    '[class._mat-animation-noopable]': `_noopAnimations`,\n    '[style.width.px]': 'diameter',\n    '[style.height.px]': 'diameter',\n  },\n  inputs: ['color'],\n  templateUrl: 'progress-spinner.html',\n  styleUrls: ['progress-spinner.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatSpinner extends MatProgressSpinner {\n  constructor(elementRef: ElementRef, platform: Platform,\n              @Optional() @Inject(DOCUMENT) document: any,\n              // @breaking-changes 7.0.0 animationMode and defaults parameters to be made required.\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) animationMode?: string,\n              @Inject(MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS)\n                  defaults?: MatProgressSpinnerDefaultOptions) {\n    super(elementRef, platform, document, animationMode, defaults);\n    this.mode = 'indeterminate';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatProgressSpinner, MatSpinner} from './progress-spinner';\n\n\n@NgModule({\n  imports: [MatCommonModule, CommonModule],\n  exports: [\n    MatProgressSpinner,\n    MatSpinner,\n    MatCommonModule\n  ],\n  declarations: [\n    MatProgressSpinner,\n    MatSpinner\n  ],\n})\nclass MatProgressSpinnerModule {}\n\nexport {MatProgressSpinnerModule};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {UniqueSelectionDispatcher} from '@angular/cdk/collections';\nimport {\n  AfterContentInit,\n  AfterViewInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Output,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {\n  CanColor,\n  CanColorCtor,\n  CanDisable,\n  CanDisableCtor,\n  CanDisableRipple,\n  CanDisableRippleCtor,\n  HasTabIndex,\n  HasTabIndexCtor,\n  mixinColor,\n  mixinDisabled,\n  mixinDisableRipple,\n  mixinTabIndex,\n} from '@angular/material/core';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\n\n\n// Increasing integer for generating unique ids for radio components.\nlet nextUniqueId = 0;\n\n/**\n * Provider Expression that allows mat-radio-group to register as a ControlValueAccessor. This\n * allows it to support [(ngModel)] and ngControl.\n * @docs-private\n */\nexport const MAT_RADIO_GROUP_CONTROL_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatRadioGroup),\n  multi: true\n};\n\n/** Change event object emitted by MatRadio and MatRadioGroup. */\nexport class MatRadioChange {\n  constructor(\n    /** The MatRadioButton that emits the change event. */\n    public source: MatRadioButton,\n    /** The value of the MatRadioButton. */\n    public value: any) {}\n}\n\n\n// Boilerplate for applying mixins to MatRadioGroup.\n/** @docs-private */\nexport class MatRadioGroupBase { }\nexport const _MatRadioGroupMixinBase: CanDisableCtor & typeof MatRadioGroupBase =\n    mixinDisabled(MatRadioGroupBase);\n\n/**\n * A group of radio buttons. May contain one or more `<mat-radio-button>` elements.\n */\n@Directive({\n  selector: 'mat-radio-group',\n  exportAs: 'matRadioGroup',\n  providers: [MAT_RADIO_GROUP_CONTROL_VALUE_ACCESSOR],\n  host: {\n    'role': 'radiogroup',\n    'class': 'mat-radio-group',\n  },\n  inputs: ['disabled'],\n})\nexport class MatRadioGroup extends _MatRadioGroupMixinBase\n    implements AfterContentInit, ControlValueAccessor, CanDisable {\n\n  /** Selected value for the radio group. */\n  private _value: any = null;\n\n  /** The HTML name attribute applied to radio buttons in this group. */\n  private _name: string = `mat-radio-group-${nextUniqueId++}`;\n\n  /** The currently selected radio button. Should match value. */\n  private _selected: MatRadioButton | null = null;\n\n  /** Whether the `value` has been set to its initial value. */\n  private _isInitialized: boolean = false;\n\n  /** Whether the labels should appear after or before the radio-buttons. Defaults to 'after' */\n  private _labelPosition: 'before' | 'after' = 'after';\n\n  /** Whether the radio group is disabled. */\n  private _disabled: boolean = false;\n\n  /** Whether the radio group is required. */\n  private _required: boolean = false;\n\n  /** The method to be called in order to update ngModel */\n  _controlValueAccessorChangeFn: (value: any) => void = () => {};\n\n  /**\n   * onTouch function registered via registerOnTouch (ControlValueAccessor).\n   * @docs-private\n   */\n  onTouched: () => any = () => {};\n\n  /**\n   * Event emitted when the group value changes.\n   * Change events are only emitted when the value changes due to user interaction with\n   * a radio button (the same behavior as `<input type-\"radio\">`).\n   */\n  @Output() readonly change: EventEmitter<MatRadioChange> = new EventEmitter<MatRadioChange>();\n\n  /** Child radio buttons. */\n  @ContentChildren(forwardRef(() => MatRadioButton), { descendants: true })\n  _radios: QueryList<MatRadioButton>;\n\n  /** Name of the radio button group. All radio buttons inside this group will use this name. */\n  @Input()\n  get name(): string { return this._name; }\n  set name(value: string) {\n    this._name = value;\n    this._updateRadioButtonNames();\n  }\n\n  /** Whether the labels should appear after or before the radio-buttons. Defaults to 'after' */\n  @Input()\n  get labelPosition(): 'before' | 'after' {\n    return this._labelPosition;\n  }\n  set labelPosition(v) {\n    this._labelPosition = v === 'before' ? 'before' : 'after';\n    this._markRadiosForCheck();\n  }\n\n  /**\n   * Value for the radio-group. Should equal the value of the selected radio button if there is\n   * a corresponding radio button with a matching value. If there is not such a corresponding\n   * radio button, this value persists to be applied in case a new radio button is added with a\n   * matching value.\n   */\n  @Input()\n  get value(): any { return this._value; }\n  set value(newValue: any) {\n    if (this._value !== newValue) {\n      // Set this before proceeding to ensure no circular loop occurs with selection.\n      this._value = newValue;\n\n      this._updateSelectedRadioFromValue();\n      this._checkSelectedRadioButton();\n    }\n  }\n\n  _checkSelectedRadioButton() {\n    if (this._selected && !this._selected.checked) {\n      this._selected.checked = true;\n    }\n  }\n\n  /**\n   * The currently selected radio button. If set to a new radio button, the radio group value\n   * will be updated to match the new selected button.\n   */\n  @Input()\n  get selected() { return this._selected; }\n  set selected(selected: MatRadioButton | null) {\n    this._selected = selected;\n    this.value = selected ? selected.value : null;\n    this._checkSelectedRadioButton();\n  }\n\n  /** Whether the radio group is disabled */\n  @Input()\n  get disabled(): boolean { return this._disabled; }\n  set disabled(value) {\n    this._disabled = coerceBooleanProperty(value);\n    this._markRadiosForCheck();\n  }\n\n  /** Whether the radio group is required */\n  @Input()\n  get required(): boolean { return this._required; }\n  set required(value: boolean) {\n    this._required = coerceBooleanProperty(value);\n    this._markRadiosForCheck();\n  }\n\n  constructor(private _changeDetector: ChangeDetectorRef) {\n    super();\n  }\n\n  /**\n   * Initialize properties once content children are available.\n   * This allows us to propagate relevant attributes to associated buttons.\n   */\n  ngAfterContentInit() {\n    // Mark this component as initialized in AfterContentInit because the initial value can\n    // possibly be set by NgModel on MatRadioGroup, and it is possible that the OnInit of the\n    // NgModel occurs *after* the OnInit of the MatRadioGroup.\n    this._isInitialized = true;\n  }\n\n  /**\n   * Mark this group as being \"touched\" (for ngModel). Meant to be called by the contained\n   * radio buttons upon their blur.\n   */\n  _touch() {\n    if (this.onTouched) {\n      this.onTouched();\n    }\n  }\n\n  private _updateRadioButtonNames(): void {\n    if (this._radios) {\n      this._radios.forEach(radio => {\n        radio.name = this.name;\n      });\n    }\n  }\n\n  /** Updates the `selected` radio button from the internal _value state. */\n  private _updateSelectedRadioFromValue(): void {\n    // If the value already matches the selected radio, do nothing.\n    const isAlreadySelected = this._selected !== null && this._selected.value === this._value;\n\n    if (this._radios && !isAlreadySelected) {\n      this._selected = null;\n      this._radios.forEach(radio => {\n        radio.checked = this.value === radio.value;\n        if (radio.checked) {\n          this._selected = radio;\n        }\n      });\n    }\n  }\n\n  /** Dispatch change event with current selection and group value. */\n  _emitChangeEvent(): void {\n    if (this._isInitialized) {\n      this.change.emit(new MatRadioChange(this._selected!, this._value));\n    }\n  }\n\n  _markRadiosForCheck() {\n    if (this._radios) {\n      this._radios.forEach(radio => radio._markForCheck());\n    }\n  }\n\n  /**\n   * Sets the model value. Implemented as part of ControlValueAccessor.\n   * @param value\n   */\n  writeValue(value: any) {\n    this.value = value;\n    this._changeDetector.markForCheck();\n  }\n\n  /**\n   * Registers a callback to be triggered when the model value changes.\n   * Implemented as part of ControlValueAccessor.\n   * @param fn Callback to be registered.\n   */\n  registerOnChange(fn: (value: any) => void) {\n    this._controlValueAccessorChangeFn = fn;\n  }\n\n  /**\n   * Registers a callback to be triggered when the control is touched.\n   * Implemented as part of ControlValueAccessor.\n   * @param fn Callback to be registered.\n   */\n  registerOnTouched(fn: any) {\n    this.onTouched = fn;\n  }\n\n  /**\n   * Sets the disabled state of the control. Implemented as a part of ControlValueAccessor.\n   * @param isDisabled Whether the control should be disabled.\n   */\n  setDisabledState(isDisabled: boolean) {\n    this.disabled = isDisabled;\n    this._changeDetector.markForCheck();\n  }\n}\n\n// Boilerplate for applying mixins to MatRadioButton.\n/** @docs-private */\nexport class MatRadioButtonBase {\n  // Since the disabled property is manually defined for the MatRadioButton and isn't set up in\n  // the mixin base class. To be able to use the tabindex mixin, a disabled property must be\n  // defined to properly work.\n  disabled: boolean;\n\n  constructor(public _elementRef: ElementRef) {}\n}\n// As per Material design specifications the selection control radio should use the accent color\n// palette by default. https://material.io/guidelines/components/selection-controls.html\nexport const _MatRadioButtonMixinBase:\n    CanColorCtor & CanDisableRippleCtor & HasTabIndexCtor & typeof MatRadioButtonBase =\n        mixinColor(mixinDisableRipple(mixinTabIndex(MatRadioButtonBase)), 'accent');\n\n/**\n * A Material design radio-button. Typically placed inside of `<mat-radio-group>` elements.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-radio-button',\n  templateUrl: 'radio.html',\n  styleUrls: ['radio.css'],\n  inputs: ['color', 'disableRipple', 'tabIndex'],\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matRadioButton',\n  host: {\n    'class': 'mat-radio-button',\n    '[class.mat-radio-checked]': 'checked',\n    '[class.mat-radio-disabled]': 'disabled',\n    '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"',\n    '[attr.tabindex]': 'null',\n    '[attr.id]': 'id',\n    // Note: under normal conditions focus shouldn't land on this element, however it may be\n    // programmatically set, for example inside of a focus trap, in this case we want to forward\n    // the focus to the native element.\n    '(focus)': '_inputElement.nativeElement.focus()',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatRadioButton extends _MatRadioButtonMixinBase\n    implements OnInit, AfterViewInit, OnDestroy, CanColor, CanDisableRipple, HasTabIndex {\n\n  private _uniqueId: string = `mat-radio-${++nextUniqueId}`;\n\n  /** The unique ID for the radio button. */\n  @Input() id: string = this._uniqueId;\n\n  /** Analog to HTML 'name' attribute used to group radios for unique selection. */\n  @Input() name: string;\n\n  /** Used to set the 'aria-label' attribute on the underlying input element. */\n  @Input('aria-label') ariaLabel: string;\n\n  /** The 'aria-labelledby' attribute takes precedence as the element's text alternative. */\n  @Input('aria-labelledby') ariaLabelledby: string;\n\n  /** The 'aria-describedby' attribute is read after the element's label and field type. */\n  @Input('aria-describedby') ariaDescribedby: string;\n\n  /** Whether this radio button is checked. */\n  @Input()\n  get checked(): boolean { return this._checked; }\n  set checked(value: boolean) {\n    const newCheckedState = coerceBooleanProperty(value);\n    if (this._checked !== newCheckedState) {\n      this._checked = newCheckedState;\n      if (newCheckedState && this.radioGroup && this.radioGroup.value !== this.value) {\n        this.radioGroup.selected = this;\n      } else if (!newCheckedState && this.radioGroup && this.radioGroup.value === this.value) {\n\n        // When unchecking the selected radio button, update the selected radio\n        // property on the group.\n        this.radioGroup.selected = null;\n      }\n\n      if (newCheckedState) {\n        // Notify all radio buttons with the same name to un-check.\n        this._radioDispatcher.notify(this.id, this.name);\n      }\n      this._changeDetector.markForCheck();\n    }\n  }\n\n  /** The value of this radio button. */\n  @Input()\n  get value(): any { return this._value; }\n  set value(value: any) {\n    if (this._value !== value) {\n      this._value = value;\n      if (this.radioGroup !== null) {\n        if (!this.checked) {\n          // Update checked when the value changed to match the radio group's value\n          this.checked = this.radioGroup.value === value;\n        }\n        if (this.checked) {\n          this.radioGroup.selected = this;\n        }\n      }\n    }\n  }\n\n  /** Whether the label should appear after or before the radio button. Defaults to 'after' */\n  @Input()\n  get labelPosition(): 'before' | 'after' {\n    return this._labelPosition || (this.radioGroup && this.radioGroup.labelPosition) || 'after';\n  }\n  set labelPosition(value) {\n    this._labelPosition = value;\n  }\n  private _labelPosition: 'before' | 'after';\n\n  /** Whether the radio button is disabled. */\n  @Input()\n  get disabled(): boolean {\n    return this._disabled || (this.radioGroup !== null && this.radioGroup.disabled);\n  }\n  set disabled(value: boolean) {\n    const newDisabledState = coerceBooleanProperty(value);\n    if (this._disabled !== newDisabledState) {\n      this._disabled = newDisabledState;\n      this._changeDetector.markForCheck();\n    }\n  }\n\n  /** Whether the radio button is required. */\n  @Input()\n  get required(): boolean {\n    return this._required || (this.radioGroup && this.radioGroup.required);\n  }\n  set required(value: boolean) {\n    this._required = coerceBooleanProperty(value);\n  }\n\n  /**\n   * Event emitted when the checked state of this radio button changes.\n   * Change events are only emitted when the value changes due to user interaction with\n   * the radio button (the same behavior as `<input type-\"radio\">`).\n   */\n  @Output() readonly change: EventEmitter<MatRadioChange> = new EventEmitter<MatRadioChange>();\n\n  /** The parent radio group. May or may not be present. */\n  radioGroup: MatRadioGroup;\n\n  /** ID of the native input element inside `<mat-radio-button>` */\n  get inputId(): string { return `${this.id || this._uniqueId}-input`; }\n\n  /** Whether this radio is checked. */\n  private _checked: boolean = false;\n\n  /** Whether this radio is disabled. */\n  private _disabled: boolean;\n\n  /** Whether this radio is required. */\n  private _required: boolean;\n\n  /** Value assigned to this radio. */\n  private _value: any = null;\n\n  /** Unregister function for _radioDispatcher */\n  private _removeUniqueSelectionListener: () => void = () => {};\n\n  /** The native `<input type=radio>` element */\n  @ViewChild('input') _inputElement: ElementRef<HTMLInputElement>;\n\n  constructor(@Optional() radioGroup: MatRadioGroup,\n              elementRef: ElementRef,\n              private _changeDetector: ChangeDetectorRef,\n              private _focusMonitor: FocusMonitor,\n              private _radioDispatcher: UniqueSelectionDispatcher,\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode?: string) {\n    super(elementRef);\n\n    // Assertions. Ideally these should be stripped out by the compiler.\n    // TODO(jelbourn): Assert that there's no name binding AND a parent radio group.\n    this.radioGroup = radioGroup;\n\n    this._removeUniqueSelectionListener =\n      _radioDispatcher.listen((id: string, name: string) => {\n        if (id !== this.id && name === this.name) {\n          this.checked = false;\n        }\n      });\n  }\n\n  /** Focuses the radio button. */\n  focus(): void {\n    this._focusMonitor.focusVia(this._inputElement, 'keyboard');\n  }\n\n  /**\n   * Marks the radio button as needing checking for change detection.\n   * This method is exposed because the parent radio group will directly\n   * update bound properties of the radio button.\n   */\n  _markForCheck() {\n    // When group value changes, the button will not be notified. Use `markForCheck` to explicit\n    // update radio button's status\n    this._changeDetector.markForCheck();\n  }\n\n  ngOnInit() {\n    if (this.radioGroup) {\n      // If the radio is inside a radio group, determine if it should be checked\n      this.checked = this.radioGroup.value === this._value;\n      // Copy name from parent radio group\n      this.name = this.radioGroup.name;\n    }\n  }\n\n  ngAfterViewInit() {\n    this._focusMonitor\n      .monitor(this._elementRef, true)\n      .subscribe(focusOrigin => {\n        if (!focusOrigin && this.radioGroup) {\n          this.radioGroup._touch();\n        }\n      });\n  }\n\n  ngOnDestroy() {\n    this._focusMonitor.stopMonitoring(this._elementRef);\n    this._removeUniqueSelectionListener();\n  }\n\n  /** Dispatch change event with current value. */\n  private _emitChangeEvent(): void {\n    this.change.emit(new MatRadioChange(this, this._value));\n  }\n\n  _isRippleDisabled() {\n    return this.disableRipple || this.disabled;\n  }\n\n  _onInputClick(event: Event) {\n    // We have to stop propagation for click events on the visual hidden input element.\n    // By default, when a user clicks on a label element, a generated click event will be\n    // dispatched on the associated input element. Since we are using a label element as our\n    // root container, the click event on the `radio-button` will be executed twice.\n    // The real click event will bubble up, and the generated click event also tries to bubble up.\n    // This will lead to multiple click events.\n    // Preventing bubbling for the second event will solve that issue.\n    event.stopPropagation();\n  }\n\n  /**\n   * Triggered when the radio button received a click or the input recognized any change.\n   * Clicking on a label element, will trigger a change event on the associated input.\n   */\n  _onInputChange(event: Event) {\n    // We always have to stop propagation on the change event.\n    // Otherwise the change event, from the input element, will bubble up and\n    // emit its event object to the `change` output.\n    event.stopPropagation();\n\n    const groupValueChanged = this.radioGroup && this.value !== this.radioGroup.value;\n    this.checked = true;\n    this._emitChangeEvent();\n\n    if (this.radioGroup) {\n      this.radioGroup._controlValueAccessorChangeFn(this.value);\n      this.radioGroup._touch();\n      if (groupValueChanged) {\n        this.radioGroup._emitChangeEvent();\n      }\n    }\n  }\n\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {MatRadioButton, MatRadioGroup} from './radio';\n\n\n@NgModule({\n  imports: [CommonModule, MatRippleModule, MatCommonModule],\n  exports: [MatRadioGroup, MatRadioButton, MatCommonModule],\n  declarations: [MatRadioGroup, MatRadioButton],\n})\nexport class MatRadioModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/**\n * Animations used by the Material drawers.\n * @docs-private\n */\nexport const matDrawerAnimations: {\n  readonly transformDrawer: AnimationTriggerMetadata;\n} = {\n  /** Animation that slides a drawer in and out. */\n  transformDrawer: trigger('transform', [\n    // We remove the `transform` here completely, rather than setting it to zero, because:\n    // 1. Having a transform can cause elements with ripples or an animated\n    //    transform to shift around in Chrome with an RTL layout (see #10023).\n    // 2. 3d transforms causes text to appear blurry on IE and Edge.\n    state('open, open-instant', style({\n      'transform': 'none',\n      'visibility': 'visible',\n    })),\n    state('void', style({\n      // Avoids the shadow showing up when closed in SSR.\n      'box-shadow': 'none',\n      'visibility': 'hidden',\n    })),\n    transition('void => open-instant', animate('0ms')),\n    transition('void <=> open, open-instant => void',\n        animate('400ms cubic-bezier(0.25, 0.8, 0.25, 1)'))\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatOptionModule} from '@angular/material/core';\nimport {MatFormFieldModule} from '@angular/material/form-field';\nimport {MAT_SELECT_SCROLL_STRATEGY_PROVIDER, MatSelect, MatSelectTrigger} from './select';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    OverlayModule,\n    MatOptionModule,\n    MatCommonModule,\n  ],\n  exports: [MatFormFieldModule, MatSelect, MatSelectTrigger, MatOptionModule, MatCommonModule],\n  declarations: [MatSelect, MatSelectTrigger],\n  providers: [MAT_SELECT_SCROLL_STRATEGY_PROVIDER]\n})\nexport class MatSelectModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  AnimationTriggerMetadata,\n  keyframes,\n  state,\n  style,\n  transition,\n  trigger,\n} from '@angular/animations';\n\n/**\n * Animations used by MatTooltip.\n * @docs-private\n */\nexport const matTooltipAnimations: {\n  readonly tooltipState: AnimationTriggerMetadata;\n} = {\n  /** Animation that transitions a tooltip in and out. */\n  tooltipState: trigger('state', [\n    state('initial, void, hidden', style({opacity: 0, transform: 'scale(0)'})),\n    state('visible', style({transform: 'scale(1)'})),\n    transition('* => visible', animate('200ms cubic-bezier(0, 0, 0.2, 1)', keyframes([\n      style({opacity: 0, transform: 'scale(0)', offset: 0}),\n      style({opacity: 0.5, transform: 'scale(0.99)', offset: 0.5}),\n      style({opacity: 1, transform: 'scale(1)', offset: 1})\n    ]))),\n    transition('* => hidden', animate('100ms cubic-bezier(0, 0, 0.2, 1)', style({opacity: 0}))),\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {A11yModule} from '@angular/cdk/a11y';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {GestureConfig, MatCommonModule} from '@angular/material/core';\nimport {HAMMER_GESTURE_CONFIG} from '@angular/platform-browser';\nimport {\n  MatTooltip,\n  TooltipComponent,\n  MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY_PROVIDER,\n} from './tooltip';\n\n@NgModule({\n  imports: [\n    A11yModule,\n    CommonModule,\n    OverlayModule,\n    MatCommonModule,\n  ],\n  exports: [MatTooltip, TooltipComponent, MatCommonModule],\n  declarations: [MatTooltip, TooltipComponent],\n  entryComponents: [TooltipComponent],\n  providers: [\n    MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY_PROVIDER,\n    {provide: HAMMER_GESTURE_CONFIG, useClass: GestureConfig},\n  ]\n})\nexport class MatTooltipModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable, Optional, SkipSelf} from '@angular/core';\nimport {Subject} from 'rxjs';\n\n\n/**\n * To modify the labels and text displayed, create a new instance of MatPaginatorIntl and\n * include it in a custom provider\n */\n@Injectable({providedIn: 'root'})\nexport class MatPaginatorIntl {\n  /**\n   * Stream to emit from when labels are changed. Use this to notify components when the labels have\n   * changed after initialization.\n   */\n  readonly changes: Subject<void> = new Subject<void>();\n\n  /** A label for the page size selector. */\n  itemsPerPageLabel: string = 'Items per page:';\n\n  /** A label for the button that increments the current page. */\n  nextPageLabel: string = 'Next page';\n\n  /** A label for the button that decrements the current page. */\n  previousPageLabel: string = 'Previous page';\n\n  /** A label for the button that moves to the first page. */\n  firstPageLabel: string = 'First page';\n\n  /** A label for the button that moves to the last page. */\n  lastPageLabel: string = 'Last page';\n\n  /** A label for the range of items within the current page and the length of the whole list. */\n  getRangeLabel = (page: number, pageSize: number, length: number) => {\n    if (length == 0 || pageSize == 0) { return `0 of ${length}`; }\n\n    length = Math.max(length, 0);\n\n    const startIndex = page * pageSize;\n\n    // If the start index exceeds the list length, do not try and fix the end index to the end.\n    const endIndex = startIndex < length ?\n        Math.min(startIndex + pageSize, length) :\n        startIndex + pageSize;\n\n    return `${startIndex + 1} - ${endIndex} of ${length}`;\n  }\n}\n\n/** @docs-private */\nexport function MAT_PAGINATOR_INTL_PROVIDER_FACTORY(parentIntl: MatPaginatorIntl) {\n  return parentIntl || new MatPaginatorIntl();\n}\n\n/** @docs-private */\nexport const MAT_PAGINATOR_INTL_PROVIDER = {\n  // If there is already an MatPaginatorIntl available, use that. Otherwise, provide a new one.\n  provide: MatPaginatorIntl,\n  deps: [[new Optional(), new SkipSelf(), MatPaginatorIntl]],\n  useFactory: MAT_PAGINATOR_INTL_PROVIDER_FACTORY\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceNumberProperty, coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  OnInit,\n  Output,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {Subscription} from 'rxjs';\nimport {MatPaginatorIntl} from './paginator-intl';\nimport {\n  HasInitialized,\n  HasInitializedCtor,\n  mixinInitialized,\n  ThemePalette,\n} from '@angular/material/core';\n\n/** The default page size if there is no page size and there are no provided page size options. */\nconst DEFAULT_PAGE_SIZE = 50;\n\n/**\n * Change event object that is emitted when the user selects a\n * different page size or navigates to another page.\n */\nexport class PageEvent {\n  /** The current page index. */\n  pageIndex: number;\n\n  /**\n   * Index of the page that was selected previously.\n   * @breaking-change 7.0.0 To be made into a required property.\n   */\n  previousPageIndex?: number;\n\n  /** The current page size */\n  pageSize: number;\n\n  /** The current total number of items being paged */\n  length: number;\n}\n\n// Boilerplate for applying mixins to MatPaginator.\n/** @docs-private */\nexport class MatPaginatorBase {}\nexport const _MatPaginatorBase: HasInitializedCtor & typeof MatPaginatorBase =\n    mixinInitialized(MatPaginatorBase);\n\n/**\n * Component to provide navigation between paged information. Displays the size of the current\n * page, user-selectable options to change that size, what items are being shown, and\n * navigational button to go to the previous or next page.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-paginator',\n  exportAs: 'matPaginator',\n  templateUrl: 'paginator.html',\n  styleUrls: ['paginator.css'],\n  host: {\n    'class': 'mat-paginator',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatPaginator extends _MatPaginatorBase implements OnInit, OnDestroy, HasInitialized {\n  private _initialized: boolean;\n  private _intlChanges: Subscription;\n\n  /** Theme color to be used for the underlying form controls. */\n  @Input() color: ThemePalette;\n\n  /** The zero-based page index of the displayed list of items. Defaulted to 0. */\n  @Input()\n  get pageIndex(): number { return this._pageIndex; }\n  set pageIndex(value: number) {\n    this._pageIndex = Math.max(coerceNumberProperty(value), 0);\n    this._changeDetectorRef.markForCheck();\n  }\n  _pageIndex: number = 0;\n\n  /** The length of the total number of items that are being paginated. Defaulted to 0. */\n  @Input()\n  get length(): number { return this._length; }\n  set length(value: number) {\n    this._length = coerceNumberProperty(value);\n    this._changeDetectorRef.markForCheck();\n  }\n  _length: number = 0;\n\n  /** Number of items to display on a page. By default set to 50. */\n  @Input()\n  get pageSize(): number { return this._pageSize; }\n  set pageSize(value: number) {\n    this._pageSize = Math.max(coerceNumberProperty(value), 0);\n    this._updateDisplayedPageSizeOptions();\n  }\n  private _pageSize: number;\n\n  /** The set of provided page size options to display to the user. */\n  @Input()\n  get pageSizeOptions(): number[] { return this._pageSizeOptions; }\n  set pageSizeOptions(value: number[]) {\n    this._pageSizeOptions = (value || []).map(p => coerceNumberProperty(p));\n    this._updateDisplayedPageSizeOptions();\n  }\n  private _pageSizeOptions: number[] = [];\n\n  /** Whether to hide the page size selection UI from the user. */\n  @Input()\n  get hidePageSize(): boolean { return this._hidePageSize; }\n  set hidePageSize(value: boolean) {\n    this._hidePageSize = coerceBooleanProperty(value);\n  }\n  private _hidePageSize = false;\n\n\n  /** Whether to show the first/last buttons UI to the user. */\n  @Input()\n  get showFirstLastButtons(): boolean { return this._showFirstLastButtons; }\n  set showFirstLastButtons(value: boolean) {\n    this._showFirstLastButtons = coerceBooleanProperty(value);\n  }\n  private _showFirstLastButtons = false;\n\n  /** Event emitted when the paginator changes the page size or page index. */\n  @Output() readonly page: EventEmitter<PageEvent> = new EventEmitter<PageEvent>();\n\n  /** Displayed set of page size options. Will be sorted and include current page size. */\n  _displayedPageSizeOptions: number[];\n\n  constructor(public _intl: MatPaginatorIntl,\n              private _changeDetectorRef: ChangeDetectorRef) {\n    super();\n    this._intlChanges = _intl.changes.subscribe(() => this._changeDetectorRef.markForCheck());\n  }\n\n  ngOnInit() {\n    this._initialized = true;\n    this._updateDisplayedPageSizeOptions();\n    this._markInitialized();\n  }\n\n  ngOnDestroy() {\n    this._intlChanges.unsubscribe();\n  }\n\n  /** Advances to the next page if it exists. */\n  nextPage(): void {\n    if (!this.hasNextPage()) { return; }\n\n    const previousPageIndex = this.pageIndex;\n    this.pageIndex++;\n    this._emitPageEvent(previousPageIndex);\n  }\n\n  /** Move back to the previous page if it exists. */\n  previousPage(): void {\n    if (!this.hasPreviousPage()) { return; }\n\n    const previousPageIndex = this.pageIndex;\n    this.pageIndex--;\n    this._emitPageEvent(previousPageIndex);\n  }\n\n  /** Move to the first page if not already there. */\n  firstPage(): void {\n    // hasPreviousPage being false implies at the start\n    if (!this.hasPreviousPage()) { return; }\n\n    const previousPageIndex = this.pageIndex;\n    this.pageIndex = 0;\n    this._emitPageEvent(previousPageIndex);\n  }\n\n  /** Move to the last page if not already there. */\n  lastPage(): void {\n    // hasNextPage being false implies at the end\n    if (!this.hasNextPage()) { return; }\n\n    const previousPageIndex = this.pageIndex;\n    this.pageIndex = this.getNumberOfPages() - 1;\n    this._emitPageEvent(previousPageIndex);\n  }\n\n  /** Whether there is a previous page. */\n  hasPreviousPage(): boolean {\n    return this.pageIndex >= 1 && this.pageSize != 0;\n  }\n\n  /** Whether there is a next page. */\n  hasNextPage(): boolean {\n    const maxPageIndex = this.getNumberOfPages() - 1;\n    return this.pageIndex < maxPageIndex && this.pageSize != 0;\n  }\n\n  /** Calculate the number of pages */\n  getNumberOfPages(): number {\n    if (!this.pageSize) {\n      return 0;\n    }\n\n    return Math.ceil(this.length / this.pageSize);\n  }\n\n\n  /**\n   * Changes the page size so that the first item displayed on the page will still be\n   * displayed using the new page size.\n   *\n   * For example, if the page size is 10 and on the second page (items indexed 10-19) then\n   * switching so that the page size is 5 will set the third page as the current page so\n   * that the 10th item will still be displayed.\n   */\n  _changePageSize(pageSize: number) {\n    // Current page needs to be updated to reflect the new page size. Navigate to the page\n    // containing the previous page's first item.\n    const startIndex = this.pageIndex * this.pageSize;\n    const previousPageIndex = this.pageIndex;\n\n    this.pageIndex = Math.floor(startIndex / pageSize) || 0;\n    this.pageSize = pageSize;\n    this._emitPageEvent(previousPageIndex);\n  }\n\n  /**\n   * Updates the list of page size options to display to the user. Includes making sure that\n   * the page size is an option and that the list is sorted.\n   */\n  private _updateDisplayedPageSizeOptions() {\n    if (!this._initialized) { return; }\n\n    // If no page size is provided, use the first page size option or the default page size.\n    if (!this.pageSize) {\n      this._pageSize = this.pageSizeOptions.length != 0 ?\n          this.pageSizeOptions[0] :\n          DEFAULT_PAGE_SIZE;\n    }\n\n    this._displayedPageSizeOptions = this.pageSizeOptions.slice();\n\n    if (this._displayedPageSizeOptions.indexOf(this.pageSize) === -1) {\n      this._displayedPageSizeOptions.push(this.pageSize);\n    }\n\n    // Sort the numbers using a number-specific sort function.\n    this._displayedPageSizeOptions.sort((a, b) => a - b);\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Emits an event notifying that a change of the paginator's properties has been triggered. */\n  private _emitPageEvent(previousPageIndex: number) {\n    this.page.emit({\n      previousPageIndex,\n      pageIndex: this.pageIndex,\n      pageSize: this.pageSize,\n      length: this.length\n    });\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatButtonModule} from '@angular/material/button';\nimport {MatSelectModule} from '@angular/material/select';\nimport {MatTooltipModule} from '@angular/material/tooltip';\nimport {MatPaginator} from './paginator';\nimport {MAT_PAGINATOR_INTL_PROVIDER} from './paginator-intl';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatButtonModule,\n    MatSelectModule,\n    MatTooltipModule,\n  ],\n  exports: [MatPaginator],\n  declarations: [MatPaginator],\n  providers: [MAT_PAGINATOR_INTL_PROVIDER],\n})\nexport class MatPaginatorModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Directive,\n  TemplateRef,\n  ComponentFactoryResolver,\n  ApplicationRef,\n  Injector,\n  ViewContainerRef,\n  Inject,\n  OnDestroy,\n} from '@angular/core';\nimport {TemplatePortal, DomPortalOutlet} from '@angular/cdk/portal';\nimport {DOCUMENT} from '@angular/common';\nimport {Subject} from 'rxjs';\n\n/**\n * Menu content that will be rendered lazily once the menu is opened.\n */\n@Directive({\n  selector: 'ng-template[matMenuContent]'\n})\nexport class MatMenuContent implements OnDestroy {\n  private _portal: TemplatePortal<any>;\n  private _outlet: DomPortalOutlet;\n\n  /** Emits when the menu content has been attached. */\n  _attached = new Subject<void>();\n\n  constructor(\n    private _template: TemplateRef<any>,\n    private _componentFactoryResolver: ComponentFactoryResolver,\n    private _appRef: ApplicationRef,\n    private _injector: Injector,\n    private _viewContainerRef: ViewContainerRef,\n    @Inject(DOCUMENT) private _document: any) {}\n\n  /**\n   * Attaches the content with a particular context.\n   * @docs-private\n   */\n  attach(context: any = {}) {\n    if (!this._portal) {\n      this._portal = new TemplatePortal(this._template, this._viewContainerRef);\n    }\n\n    this.detach();\n\n    if (!this._outlet) {\n      this._outlet = new DomPortalOutlet(this._document.createElement('div'),\n          this._componentFactoryResolver, this._appRef, this._injector);\n    }\n\n    const element: HTMLElement = this._template.elementRef.nativeElement;\n\n    // Because we support opening the same menu from different triggers (which in turn have their\n    // own `OverlayRef` panel), we have to re-insert the host element every time, otherwise we\n    // risk it staying attached to a pane that's no longer in the DOM.\n    element.parentNode!.insertBefore(this._outlet.outletElement, element);\n    this._portal.attach(this._outlet, context);\n    this._attached.next();\n  }\n\n  /**\n   * Detaches the content.\n   * @docs-private\n   */\n  detach() {\n    if (this._portal.isAttached) {\n      this._portal.detach();\n    }\n  }\n\n  ngOnDestroy() {\n    if (this._outlet) {\n      this._outlet.dispose();\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport{\n  trigger,\n  state,\n  style,\n  animate,\n  transition,\n  query,\n  group,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/**\n * Animations used by the mat-menu component.\n * Animation duration and timing values are based on:\n * https://material.io/guidelines/components/menus.html#menus-usage\n * @docs-private\n */\nexport const matMenuAnimations: {\n  readonly transformMenu: AnimationTriggerMetadata;\n  readonly fadeInItems: AnimationTriggerMetadata;\n} = {\n  /**\n   * This animation controls the menu panel's entry and exit from the page.\n   *\n   * When the menu panel is added to the DOM, it scales in and fades in its border.\n   *\n   * When the menu panel is removed from the DOM, it simply fades out after a brief\n   * delay to display the ripple.\n   */\n  transformMenu: trigger('transformMenu', [\n    state('void', style({\n      opacity: 0,\n      transform: 'scale(0.8)'\n    })),\n    transition('void => enter', group([\n      query('.mat-menu-content', animate('100ms linear', style({opacity: 1}))),\n      animate('120ms cubic-bezier(0, 0, 0.2, 1)', style({transform: 'scale(1)'})),\n    ])),\n    transition('* => void', animate('100ms 25ms linear', style({opacity: 0})))\n  ]),\n\n\n  /**\n   * This animation fades in the background color and content of the menu panel\n   * after its containing element is scaled in.\n   */\n  fadeInItems: trigger('fadeInItems', [\n    // TODO(crisbeto): this is inside the `transformMenu`\n    // now. Remove next time we do breaking changes.\n    state('showing', style({opacity: 1})),\n    transition('void => *', [\n      style({opacity: 0}),\n      animate('400ms 100ms cubic-bezier(0.55, 0, 0.55, 0.2)')\n    ])\n  ])\n};\n\n/**\n * @deprecated\n * @breaking-change 7.0.0\n * @docs-private\n */\nexport const fadeInItems = matMenuAnimations.fadeInItems;\n\n/**\n * @deprecated\n * @breaking-change 7.0.0\n * @docs-private\n */\nexport const transformMenu = matMenuAnimations.transformMenu;\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {EventEmitter, TemplateRef, InjectionToken} from '@angular/core';\nimport {MenuPositionX, MenuPositionY} from './menu-positions';\nimport {Direction} from '@angular/cdk/bidi';\nimport {FocusOrigin} from '@angular/cdk/a11y';\nimport {MatMenuContent} from './menu-content';\n\n/**\n * Injection token used to provide the parent menu to menu-specific components.\n * @docs-private\n */\nexport const MAT_MENU_PANEL = new InjectionToken<MatMenuPanel>('MAT_MENU_PANEL');\n\n/**\n * Interface for a custom menu panel that can be used with `matMenuTriggerFor`.\n * @docs-private\n */\nexport interface MatMenuPanel<T = any> {\n  xPosition: MenuPositionX;\n  yPosition: MenuPositionY;\n  overlapTrigger: boolean;\n  templateRef: TemplateRef<any>;\n  close: EventEmitter<void | 'click' | 'keydown' | 'tab'>;\n  parentMenu?: MatMenuPanel | undefined;\n  direction?: Direction;\n  focusFirstItem: (origin?: FocusOrigin) => void;\n  resetActiveItem: () => void;\n  setPositionClasses?: (x: MenuPositionX, y: MenuPositionY) => void;\n  setElevation?(depth: number): void;\n  lazyContent?: MatMenuContent;\n  backdropClass?: string;\n  hasBackdrop?: boolean;\n  addItem?: (item: T) => void;\n  removeItem?: (item: T) => void;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusableOption, FocusMonitor, FocusOrigin} from '@angular/cdk/a11y';\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  OnDestroy,\n  ViewEncapsulation,\n  Inject,\n  Optional,\n} from '@angular/core';\nimport {\n  CanDisable, CanDisableCtor,\n  CanDisableRipple, CanDisableRippleCtor,\n  mixinDisabled,\n  mixinDisableRipple,\n} from '@angular/material/core';\nimport {Subject} from 'rxjs';\nimport {DOCUMENT} from '@angular/common';\nimport {MAT_MENU_PANEL, MatMenuPanel} from './menu-panel';\n\n// Boilerplate for applying mixins to MatMenuItem.\n/** @docs-private */\nexport class MatMenuItemBase {}\nexport const _MatMenuItemMixinBase: CanDisableRippleCtor & CanDisableCtor & typeof MatMenuItemBase =\n    mixinDisableRipple(mixinDisabled(MatMenuItemBase));\n\n/**\n * This directive is intended to be used inside an mat-menu tag.\n * It exists mostly to set the role attribute.\n */\n@Component({\n  moduleId: module.id,\n  selector: '[mat-menu-item]',\n  exportAs: 'matMenuItem',\n  inputs: ['disabled', 'disableRipple'],\n  host: {\n    'role': 'menuitem',\n    'class': 'mat-menu-item',\n    '[class.mat-menu-item-highlighted]': '_highlighted',\n    '[class.mat-menu-item-submenu-trigger]': '_triggersSubmenu',\n    '[attr.tabindex]': '_getTabIndex()',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.disabled]': 'disabled || null',\n    '(click)': '_checkDisabled($event)',\n    '(mouseenter)': '_handleMouseEnter()',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  templateUrl: 'menu-item.html',\n})\nexport class MatMenuItem extends _MatMenuItemMixinBase\n    implements FocusableOption, CanDisable, CanDisableRipple, OnDestroy {\n\n  private _document: Document;\n\n  /** Stream that emits when the menu item is hovered. */\n  readonly _hovered: Subject<MatMenuItem> = new Subject<MatMenuItem>();\n\n  /** Whether the menu item is highlighted. */\n  _highlighted: boolean = false;\n\n  /** Whether the menu item acts as a trigger for a sub-menu. */\n  _triggersSubmenu: boolean = false;\n\n  constructor(\n    private _elementRef: ElementRef<HTMLElement>,\n    @Inject(DOCUMENT) document?: any,\n    private _focusMonitor?: FocusMonitor,\n    @Inject(MAT_MENU_PANEL) @Optional() private _parentMenu?: MatMenuPanel<MatMenuItem>) {\n\n    // @breaking-change 7.0.0 make `_focusMonitor` and `document` required params.\n    super();\n\n    if (_focusMonitor) {\n      // Start monitoring the element so it gets the appropriate focused classes. We want\n      // to show the focus style for menu items only when the focus was not caused by a\n      // mouse or touch interaction.\n      _focusMonitor.monitor(this._elementRef, false);\n    }\n\n    if (_parentMenu && _parentMenu.addItem) {\n      _parentMenu.addItem(this);\n    }\n\n    this._document = document;\n  }\n\n  /** Focuses the menu item. */\n  focus(origin: FocusOrigin = 'program'): void {\n    if (this._focusMonitor) {\n      this._focusMonitor.focusVia(this._getHostElement(), origin);\n    } else {\n      this._getHostElement().focus();\n    }\n  }\n\n  ngOnDestroy() {\n    if (this._focusMonitor) {\n      this._focusMonitor.stopMonitoring(this._elementRef);\n    }\n\n    if (this._parentMenu && this._parentMenu.removeItem) {\n      this._parentMenu.removeItem(this);\n    }\n\n    this._hovered.complete();\n  }\n\n  /** Used to set the `tabindex`. */\n  _getTabIndex(): string {\n    return this.disabled ? '-1' : '0';\n  }\n\n  /** Returns the host DOM element. */\n  _getHostElement(): HTMLElement {\n    return this._elementRef.nativeElement;\n  }\n\n  /** Prevents the default element actions if it is disabled. */\n  _checkDisabled(event: Event): void {\n    if (this.disabled) {\n      event.preventDefault();\n      event.stopPropagation();\n    }\n  }\n\n  /** Emits to the hover stream. */\n  _handleMouseEnter() {\n    this._hovered.next(this);\n  }\n\n  /** Gets the label to be used when determining whether the option should be focused. */\n  getLabel(): string {\n    const element: HTMLElement = this._elementRef.nativeElement;\n    const textNodeType = this._document ? this._document.TEXT_NODE : 3;\n    let output = '';\n\n    if (element.childNodes) {\n      const length = element.childNodes.length;\n\n      // Go through all the top-level text nodes and extract their text.\n      // We skip anything that's not a text node to prevent the text from\n      // being thrown off by something like an icon.\n      for (let i = 0; i < length; i++) {\n        if (element.childNodes[i].nodeType === textNodeType) {\n          output += element.childNodes[i].textContent;\n        }\n      }\n    }\n\n    return output.trim();\n  }\n\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusKeyManager, FocusOrigin} from '@angular/cdk/a11y';\nimport {Direction} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {ESCAPE, LEFT_ARROW, RIGHT_ARROW, DOWN_ARROW, UP_ARROW} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  Component,\n  ContentChild,\n  ContentChildren,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  OnDestroy,\n  Output,\n  TemplateRef,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n  OnInit,\n} from '@angular/core';\nimport {merge, Observable, Subject, Subscription} from 'rxjs';\nimport {startWith, switchMap, take} from 'rxjs/operators';\nimport {matMenuAnimations} from './menu-animations';\nimport {MatMenuContent} from './menu-content';\nimport {throwMatMenuInvalidPositionX, throwMatMenuInvalidPositionY} from './menu-errors';\nimport {MatMenuItem} from './menu-item';\nimport {MAT_MENU_PANEL, MatMenuPanel} from './menu-panel';\nimport {MenuPositionX, MenuPositionY} from './menu-positions';\nimport {AnimationEvent} from '@angular/animations';\n\n\n/** Default `mat-menu` options that can be overridden. */\nexport interface MatMenuDefaultOptions {\n  /** The x-axis position of the menu. */\n  xPosition: MenuPositionX;\n\n  /** The y-axis position of the menu. */\n  yPosition: MenuPositionY;\n\n  /** Whether the menu should overlap the menu trigger. */\n  overlapTrigger: boolean;\n\n  /** Class to be applied to the menu's backdrop. */\n  backdropClass: string;\n\n  /** Whether the menu has a backdrop. */\n  hasBackdrop?: boolean;\n}\n\n/** Injection token to be used to override the default options for `mat-menu`. */\nexport const MAT_MENU_DEFAULT_OPTIONS =\n    new InjectionToken<MatMenuDefaultOptions>('mat-menu-default-options', {\n      providedIn: 'root',\n      factory: MAT_MENU_DEFAULT_OPTIONS_FACTORY\n    });\n\n/** @docs-private */\nexport function MAT_MENU_DEFAULT_OPTIONS_FACTORY(): MatMenuDefaultOptions {\n  return {\n    overlapTrigger: false,\n    xPosition: 'after',\n    yPosition: 'below',\n    backdropClass: 'cdk-overlay-transparent-backdrop',\n  };\n}\n/**\n * Start elevation for the menu panel.\n * @docs-private\n */\nconst MAT_MENU_BASE_ELEVATION = 4;\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-menu',\n  templateUrl: 'menu.html',\n  styleUrls: ['menu.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matMenu',\n  animations: [\n    matMenuAnimations.transformMenu,\n    matMenuAnimations.fadeInItems\n  ],\n  providers: [\n    {provide: MAT_MENU_PANEL, useExisting: MatMenu}\n  ]\n})\nexport class MatMenu implements AfterContentInit, MatMenuPanel<MatMenuItem>, OnInit, OnDestroy {\n  private _keyManager: FocusKeyManager<MatMenuItem>;\n  private _xPosition: MenuPositionX = this._defaultOptions.xPosition;\n  private _yPosition: MenuPositionY = this._defaultOptions.yPosition;\n  private _previousElevation: string;\n\n  /** Menu items inside the current menu. */\n  private _items: MatMenuItem[] = [];\n\n  /** Emits whenever the amount of menu items changes. */\n  private _itemChanges = new Subject<MatMenuItem[]>();\n\n  /** Subscription to tab events on the menu panel */\n  private _tabSubscription = Subscription.EMPTY;\n\n  /** Config object to be passed into the menu's ngClass */\n  _classList: {[key: string]: boolean} = {};\n\n  /** Current state of the panel animation. */\n  _panelAnimationState: 'void' | 'enter' = 'void';\n\n  /** Emits whenever an animation on the menu completes. */\n  _animationDone = new Subject<AnimationEvent>();\n\n  /** Whether the menu is animating. */\n  _isAnimating: boolean;\n\n  /** Parent menu of the current menu panel. */\n  parentMenu: MatMenuPanel | undefined;\n\n  /** Layout direction of the menu. */\n  direction: Direction;\n\n  /** Class to be added to the backdrop element. */\n  @Input() backdropClass: string = this._defaultOptions.backdropClass;\n\n  /** Position of the menu in the X axis. */\n  @Input()\n  get xPosition(): MenuPositionX { return this._xPosition; }\n  set xPosition(value: MenuPositionX) {\n    if (value !== 'before' && value !== 'after') {\n      throwMatMenuInvalidPositionX();\n    }\n    this._xPosition = value;\n    this.setPositionClasses();\n  }\n\n  /** Position of the menu in the Y axis. */\n  @Input()\n  get yPosition(): MenuPositionY { return this._yPosition; }\n  set yPosition(value: MenuPositionY) {\n    if (value !== 'above' && value !== 'below') {\n      throwMatMenuInvalidPositionY();\n    }\n    this._yPosition = value;\n    this.setPositionClasses();\n  }\n\n  /** @docs-private */\n  @ViewChild(TemplateRef) templateRef: TemplateRef<any>;\n\n  /**\n   * List of the items inside of a menu.\n   * @deprecated\n   * @breaking-change 7.0.0\n   */\n  @ContentChildren(MatMenuItem) items: QueryList<MatMenuItem>;\n\n  /**\n   * Menu content that will be rendered lazily.\n   * @docs-private\n   */\n  @ContentChild(MatMenuContent) lazyContent: MatMenuContent;\n\n  /** Whether the menu should overlap its trigger. */\n  @Input()\n  get overlapTrigger(): boolean { return this._overlapTrigger; }\n  set overlapTrigger(value: boolean) {\n    this._overlapTrigger = coerceBooleanProperty(value);\n  }\n  private _overlapTrigger: boolean = this._defaultOptions.overlapTrigger;\n\n  /** Whether the menu has a backdrop. */\n  @Input()\n  get hasBackdrop(): boolean | undefined { return this._hasBackdrop; }\n  set hasBackdrop(value: boolean | undefined) {\n    this._hasBackdrop = coerceBooleanProperty(value);\n  }\n  private _hasBackdrop: boolean | undefined = this._defaultOptions.hasBackdrop;\n\n  /**\n   * This method takes classes set on the host mat-menu element and applies them on the\n   * menu template that displays in the overlay container.  Otherwise, it's difficult\n   * to style the containing menu from outside the component.\n   * @param classes list of class names\n   */\n  @Input('class')\n  set panelClass(classes: string) {\n    if (classes && classes.length) {\n      this._classList = classes.split(' ').reduce((obj: any, className: string) => {\n        obj[className] = true;\n        return obj;\n      }, {});\n\n      this._elementRef.nativeElement.className = '';\n    }\n  }\n\n  /**\n   * This method takes classes set on the host mat-menu element and applies them on the\n   * menu template that displays in the overlay container.  Otherwise, it's difficult\n   * to style the containing menu from outside the component.\n   * @deprecated Use `panelClass` instead.\n   * @breaking-change 7.0.0\n   */\n  @Input()\n  get classList(): string { return this.panelClass; }\n  set classList(classes: string) { this.panelClass = classes; }\n\n  /** Event emitted when the menu is closed. */\n  @Output() readonly closed: EventEmitter<void | 'click' | 'keydown' | 'tab'> =\n      new EventEmitter<void | 'click' | 'keydown' | 'tab'>();\n\n  /**\n   * Event emitted when the menu is closed.\n   * @deprecated Switch to `closed` instead\n   * @breaking-change 7.0.0\n   */\n  @Output() close = this.closed;\n\n  constructor(\n    private _elementRef: ElementRef<HTMLElement>,\n    private _ngZone: NgZone,\n    @Inject(MAT_MENU_DEFAULT_OPTIONS) private _defaultOptions: MatMenuDefaultOptions) { }\n\n  ngOnInit() {\n    this.setPositionClasses();\n  }\n\n  ngAfterContentInit() {\n    this._keyManager = new FocusKeyManager<MatMenuItem>(this._items).withWrap().withTypeAhead();\n    this._tabSubscription = this._keyManager.tabOut.subscribe(() => this.closed.emit('tab'));\n  }\n\n  ngOnDestroy() {\n    this._tabSubscription.unsubscribe();\n    this.closed.complete();\n  }\n\n  /** Stream that emits whenever the hovered menu item changes. */\n  _hovered(): Observable<MatMenuItem> {\n    return this._itemChanges.pipe(\n      startWith(this._items),\n      switchMap(items => merge(...items.map(item => item._hovered)))\n    );\n  }\n\n  /** Handle a keyboard event from the menu, delegating to the appropriate action. */\n  _handleKeydown(event: KeyboardEvent) {\n    const keyCode = event.keyCode;\n\n    switch (keyCode) {\n      case ESCAPE:\n        this.closed.emit('keydown');\n        event.stopPropagation();\n      break;\n      case LEFT_ARROW:\n        if (this.parentMenu && this.direction === 'ltr') {\n          this.closed.emit('keydown');\n        }\n      break;\n      case RIGHT_ARROW:\n        if (this.parentMenu && this.direction === 'rtl') {\n          this.closed.emit('keydown');\n        }\n      break;\n      default:\n        if (keyCode === UP_ARROW || keyCode === DOWN_ARROW) {\n          this._keyManager.setFocusOrigin('keyboard');\n        }\n\n        this._keyManager.onKeydown(event);\n    }\n  }\n\n  /**\n   * Focus the first item in the menu.\n   * @param origin Action from which the focus originated. Used to set the correct styling.\n   */\n  focusFirstItem(origin: FocusOrigin = 'program'): void {\n    // When the content is rendered lazily, it takes a bit before the items are inside the DOM.\n    if (this.lazyContent) {\n      this._ngZone.onStable.asObservable()\n        .pipe(take(1))\n        .subscribe(() => this._keyManager.setFocusOrigin(origin).setFirstItemActive());\n    } else {\n      this._keyManager.setFocusOrigin(origin).setFirstItemActive();\n    }\n  }\n\n  /**\n   * Resets the active item in the menu. This is used when the menu is opened, allowing\n   * the user to start from the first option when pressing the down arrow.\n   */\n  resetActiveItem() {\n    this._keyManager.setActiveItem(-1);\n  }\n\n  /**\n   * Sets the menu panel elevation.\n   * @param depth Number of parent menus that come before the menu.\n   */\n  setElevation(depth: number): void {\n    // The elevation starts at the base and increases by one for each level.\n    const newElevation = `mat-elevation-z${MAT_MENU_BASE_ELEVATION + depth}`;\n    const customElevation = Object.keys(this._classList).find(c => c.startsWith('mat-elevation-z'));\n\n    if (!customElevation || customElevation === this._previousElevation) {\n      if (this._previousElevation) {\n        this._classList[this._previousElevation] = false;\n      }\n\n      this._classList[newElevation] = true;\n      this._previousElevation = newElevation;\n    }\n  }\n\n  /**\n   * Registers a menu item with the menu.\n   * @docs-private\n   */\n  addItem(item: MatMenuItem) {\n    // We register the items through this method, rather than picking them up through\n    // `ContentChildren`, because we need the items to be picked up by their closest\n    // `mat-menu` ancestor. If we used `@ContentChildren(MatMenuItem, {descendants: true})`,\n    // all descendant items will bleed into the top-level menu in the case where the consumer\n    // has `mat-menu` instances nested inside each other.\n    if (this._items.indexOf(item) === -1) {\n      this._items.push(item);\n      this._itemChanges.next(this._items);\n    }\n  }\n\n  /**\n   * Removes an item from the menu.\n   * @docs-private\n   */\n  removeItem(item: MatMenuItem) {\n    const index = this._items.indexOf(item);\n\n    if (this._items.indexOf(item) > -1) {\n      this._items.splice(index, 1);\n      this._itemChanges.next(this._items);\n    }\n  }\n\n  /**\n   * Adds classes to the menu panel based on its position. Can be used by\n   * consumers to add specific styling based on the position.\n   * @param posX Position of the menu along the x axis.\n   * @param posY Position of the menu along the y axis.\n   * @docs-private\n   */\n  setPositionClasses(posX: MenuPositionX = this.xPosition, posY: MenuPositionY = this.yPosition) {\n    const classes = this._classList;\n    classes['mat-menu-before'] = posX === 'before';\n    classes['mat-menu-after'] = posX === 'after';\n    classes['mat-menu-above'] = posY === 'above';\n    classes['mat-menu-below'] = posY === 'below';\n  }\n\n  /** Starts the enter animation. */\n  _startAnimation() {\n    // @breaking-change 7.0.0 Combine with _resetAnimation.\n    this._panelAnimationState = 'enter';\n  }\n\n  /** Resets the panel animation to its initial state. */\n  _resetAnimation() {\n    // @breaking-change 7.0.0 Combine with _startAnimation.\n    this._panelAnimationState = 'void';\n  }\n\n  /** Callback that is invoked when the panel animation completes. */\n  _onAnimationDone(event: AnimationEvent) {\n    this._animationDone.next(event);\n    this._isAnimating = false;\n\n    // Scroll the content element to the top once the animation is done. This is necessary, because\n    // we move focus to the first item while it's still being animated, which can throw the browser\n    // off when it determines the scroll position. Alternatively we can move focus when the\n    // animation is done, however moving focus asynchronously will interrupt screen readers\n    // which are in the process of reading out the menu already. We take the `element` from\n    // the `event` since we can't use a `ViewChild` to access the pane.\n    if (event.toState === 'enter' && this._keyManager.activeItemIndex === 0) {\n      event.element.scrollTop = 0;\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor, FocusOrigin, isFakeMousedownFromScreenReader} from '@angular/cdk/a11y';\nimport {Direction, Directionality} from '@angular/cdk/bidi';\nimport {LEFT_ARROW, RIGHT_ARROW} from '@angular/cdk/keycodes';\nimport {\n  FlexibleConnectedPositionStrategy,\n  HorizontalConnectionPos,\n  Overlay,\n  OverlayConfig,\n  OverlayRef,\n  ScrollStrategy,\n  VerticalConnectionPos,\n} from '@angular/cdk/overlay';\nimport {TemplatePortal} from '@angular/cdk/portal';\nimport {\n  AfterContentInit,\n  Directive,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  InjectionToken,\n  Input,\n  OnDestroy,\n  Optional,\n  Output,\n  Self,\n  ViewContainerRef,\n} from '@angular/core';\nimport {asapScheduler, merge, of as observableOf, Subscription} from 'rxjs';\nimport {delay, filter, take, takeUntil} from 'rxjs/operators';\nimport {MatMenu} from './menu-directive';\nimport {throwMatMenuMissingError} from './menu-errors';\nimport {MatMenuItem} from './menu-item';\nimport {MatMenuPanel} from './menu-panel';\nimport {MenuPositionX, MenuPositionY} from './menu-positions';\n\n/** Injection token that determines the scroll handling while the menu is open. */\nexport const MAT_MENU_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mat-menu-scroll-strategy');\n\n/** @docs-private */\nexport function MAT_MENU_SCROLL_STRATEGY_FACTORY(overlay: Overlay): () => ScrollStrategy {\n  return () => overlay.scrollStrategies.reposition();\n}\n\n/** @docs-private */\nexport const MAT_MENU_SCROLL_STRATEGY_FACTORY_PROVIDER = {\n  provide: MAT_MENU_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_MENU_SCROLL_STRATEGY_FACTORY,\n};\n\n/** Default top padding of the menu panel. */\nexport const MENU_PANEL_TOP_PADDING = 8;\n\n// TODO(andrewseguin): Remove the kebab versions in favor of camelCased attribute selectors\n\n/**\n * This directive is intended to be used in conjunction with an mat-menu tag.  It is\n * responsible for toggling the display of the provided menu instance.\n */\n@Directive({\n  selector: `[mat-menu-trigger-for], [matMenuTriggerFor]`,\n  host: {\n    'aria-haspopup': 'true',\n    '[attr.aria-expanded]': 'menuOpen || null',\n    '(mousedown)': '_handleMousedown($event)',\n    '(keydown)': '_handleKeydown($event)',\n    '(click)': '_handleClick($event)',\n  },\n  exportAs: 'matMenuTrigger'\n})\nexport class MatMenuTrigger implements AfterContentInit, OnDestroy {\n  private _portal: TemplatePortal;\n  private _overlayRef: OverlayRef | null = null;\n  private _menuOpen: boolean = false;\n  private _closeSubscription = Subscription.EMPTY;\n  private _hoverSubscription = Subscription.EMPTY;\n\n  // Tracking input type is necessary so it's possible to only auto-focus\n  // the first item of the list when the menu is opened via the keyboard\n  private _openedByMouse: boolean = false;\n\n  /**\n   * @deprecated\n   * @breaking-change 7.0.0\n   */\n  @Input('mat-menu-trigger-for')\n  get _deprecatedMatMenuTriggerFor(): MatMenuPanel {\n    return this.menu;\n  }\n\n  set _deprecatedMatMenuTriggerFor(v: MatMenuPanel) {\n    this.menu = v;\n  }\n\n  /** References the menu instance that the trigger is associated with. */\n  @Input('matMenuTriggerFor') menu: MatMenuPanel;\n\n  /** Data to be passed along to any lazily-rendered content. */\n  @Input('matMenuTriggerData') menuData: any;\n\n  /** Event emitted when the associated menu is opened. */\n  @Output() readonly menuOpened: EventEmitter<void> = new EventEmitter<void>();\n\n  /**\n   * Event emitted when the associated menu is opened.\n   * @deprecated Switch to `menuOpened` instead\n   * @breaking-change 7.0.0\n   */\n  // tslint:disable-next-line:no-output-on-prefix\n  @Output() readonly onMenuOpen: EventEmitter<void> = this.menuOpened;\n\n  /** Event emitted when the associated menu is closed. */\n  @Output() readonly menuClosed: EventEmitter<void> = new EventEmitter<void>();\n\n  /**\n   * Event emitted when the associated menu is closed.\n   * @deprecated Switch to `menuClosed` instead\n   * @breaking-change 7.0.0\n   */\n  // tslint:disable-next-line:no-output-on-prefix\n  @Output() readonly onMenuClose: EventEmitter<void> = this.menuClosed;\n\n  constructor(private _overlay: Overlay,\n              private _element: ElementRef<HTMLElement>,\n              private _viewContainerRef: ViewContainerRef,\n              @Inject(MAT_MENU_SCROLL_STRATEGY) private _scrollStrategy,\n              @Optional() private _parentMenu: MatMenu,\n              @Optional() @Self() private _menuItemInstance: MatMenuItem,\n              @Optional() private _dir: Directionality,\n              // TODO(crisbeto): make the _focusMonitor required when doing breaking changes.\n              // @breaking-change 7.0.0\n              private _focusMonitor?: FocusMonitor) {\n\n    if (_menuItemInstance) {\n      _menuItemInstance._triggersSubmenu = this.triggersSubmenu();\n    }\n  }\n\n  ngAfterContentInit() {\n    this._checkMenu();\n\n    this.menu.close.subscribe(reason => {\n      this._destroyMenu();\n\n      // If a click closed the menu, we should close the entire chain of nested menus.\n      if ((reason === 'click' || reason === 'tab') && this._parentMenu) {\n        this._parentMenu.closed.emit(reason);\n      }\n    });\n\n    this._handleHover();\n  }\n\n  ngOnDestroy() {\n    if (this._overlayRef) {\n      this._overlayRef.dispose();\n      this._overlayRef = null;\n    }\n\n    this._cleanUpSubscriptions();\n  }\n\n  /** Whether the menu is open. */\n  get menuOpen(): boolean {\n    return this._menuOpen;\n  }\n\n  /** The text direction of the containing app. */\n  get dir(): Direction {\n    return this._dir && this._dir.value === 'rtl' ? 'rtl' : 'ltr';\n  }\n\n  /** Whether the menu triggers a sub-menu or a top-level one. */\n  triggersSubmenu(): boolean {\n    return !!(this._menuItemInstance && this._parentMenu);\n  }\n\n  /** Toggles the menu between the open and closed states. */\n  toggleMenu(): void {\n    return this._menuOpen ? this.closeMenu() : this.openMenu();\n  }\n\n  /** Opens the menu. */\n  openMenu(): void {\n    if (this._menuOpen) {\n      return;\n    }\n\n    this._checkMenu();\n\n    const overlayRef = this._createOverlay();\n    this._setPosition(overlayRef.getConfig().positionStrategy as FlexibleConnectedPositionStrategy);\n    overlayRef.attach(this._portal);\n\n    if (this.menu.lazyContent) {\n      this.menu.lazyContent.attach(this.menuData);\n    }\n\n    this._closeSubscription = this._menuClosingActions().subscribe(() => this.closeMenu());\n    this._initMenu();\n\n    if (this.menu instanceof MatMenu) {\n      this.menu._startAnimation();\n    }\n  }\n\n  /** Closes the menu. */\n  closeMenu(): void {\n    this.menu.close.emit();\n  }\n\n  /**\n   * Focuses the menu trigger.\n   * @param origin Source of the menu trigger's focus.\n   */\n  focus(origin: FocusOrigin = 'program') {\n    if (this._focusMonitor) {\n      this._focusMonitor.focusVia(this._element, origin);\n    } else {\n      this._element.nativeElement.focus();\n    }\n  }\n\n  /** Closes the menu and does the necessary cleanup. */\n  private _destroyMenu() {\n    if (!this._overlayRef || !this.menuOpen) {\n      return;\n    }\n\n    const menu = this.menu;\n\n    this._closeSubscription.unsubscribe();\n    this._overlayRef.detach();\n\n    if (menu instanceof MatMenu) {\n      menu._resetAnimation();\n\n      if (menu.lazyContent) {\n        // Wait for the exit animation to finish before detaching the content.\n        menu._animationDone\n          .pipe(\n            filter(event => event.toState === 'void'),\n            take(1),\n            // Interrupt if the content got re-attached.\n            takeUntil(menu.lazyContent._attached)\n          )\n          .subscribe(() => menu.lazyContent!.detach(), undefined, () => {\n            // No matter whether the content got re-attached, reset the menu.\n            this._resetMenu();\n          });\n      } else {\n        this._resetMenu();\n      }\n    } else {\n      this._resetMenu();\n\n      if (menu.lazyContent) {\n        menu.lazyContent.detach();\n      }\n    }\n  }\n\n  /**\n   * This method sets the menu state to open and focuses the first item if\n   * the menu was opened via the keyboard.\n   */\n  private _initMenu(): void {\n    this.menu.parentMenu = this.triggersSubmenu() ? this._parentMenu : undefined;\n    this.menu.direction = this.dir;\n    this._setMenuElevation();\n    this._setIsMenuOpen(true);\n    this.menu.focusFirstItem(this._openedByMouse ? 'mouse' : 'program');\n  }\n\n  /** Updates the menu elevation based on the amount of parent menus that it has. */\n  private _setMenuElevation(): void {\n    if (this.menu.setElevation) {\n      let depth = 0;\n      let parentMenu = this.menu.parentMenu;\n\n      while (parentMenu) {\n        depth++;\n        parentMenu = parentMenu.parentMenu;\n      }\n\n      this.menu.setElevation(depth);\n    }\n  }\n\n  /**\n   * This method resets the menu when it's closed, most importantly restoring\n   * focus to the menu trigger if the menu was opened via the keyboard.\n   */\n  private _resetMenu(): void {\n    this._setIsMenuOpen(false);\n\n    // We should reset focus if the user is navigating using a keyboard or\n    // if we have a top-level trigger which might cause focus to be lost\n    // when clicking on the backdrop.\n    if (!this._openedByMouse) {\n      // Note that the focus style will show up both for `program` and\n      // `keyboard` so we don't have to specify which one it is.\n      this.focus();\n    } else if (!this.triggersSubmenu()) {\n      this.focus('mouse');\n    }\n\n    this._openedByMouse = false;\n  }\n\n  // set state rather than toggle to support triggers sharing a menu\n  private _setIsMenuOpen(isOpen: boolean): void {\n    this._menuOpen = isOpen;\n    this._menuOpen ? this.menuOpened.emit() : this.menuClosed.emit();\n\n    if (this.triggersSubmenu()) {\n      this._menuItemInstance._highlighted = isOpen;\n    }\n  }\n\n  /**\n   * This method checks that a valid instance of MatMenu has been passed into\n   * matMenuTriggerFor. If not, an exception is thrown.\n   */\n  private _checkMenu() {\n    if (!this.menu) {\n      throwMatMenuMissingError();\n    }\n  }\n\n  /**\n   * This method creates the overlay from the provided menu's template and saves its\n   * OverlayRef so that it can be attached to the DOM when openMenu is called.\n   */\n  private _createOverlay(): OverlayRef {\n    if (!this._overlayRef) {\n      this._portal = new TemplatePortal(this.menu.templateRef, this._viewContainerRef);\n      const config = this._getOverlayConfig();\n      this._subscribeToPositions(config.positionStrategy as FlexibleConnectedPositionStrategy);\n      this._overlayRef = this._overlay.create(config);\n    }\n\n    return this._overlayRef;\n  }\n\n  /**\n   * This method builds the configuration object needed to create the overlay, the OverlayState.\n   * @returns OverlayConfig\n   */\n  private _getOverlayConfig(): OverlayConfig {\n    return new OverlayConfig({\n      positionStrategy: this._overlay.position()\n          .flexibleConnectedTo(this._element)\n          .withLockedPosition()\n          .withTransformOriginOn('.mat-menu-panel'),\n      hasBackdrop: this.menu.hasBackdrop == null ? !this.triggersSubmenu() : this.menu.hasBackdrop,\n      backdropClass: this.menu.backdropClass || 'cdk-overlay-transparent-backdrop',\n      scrollStrategy: this._scrollStrategy(),\n      direction: this._dir\n    });\n  }\n\n  /**\n   * Listens to changes in the position of the overlay and sets the correct classes\n   * on the menu based on the new position. This ensures the animation origin is always\n   * correct, even if a fallback position is used for the overlay.\n   */\n  private _subscribeToPositions(position: FlexibleConnectedPositionStrategy): void {\n    if (this.menu.setPositionClasses) {\n      position.positionChanges.subscribe(change => {\n        const posX: MenuPositionX = change.connectionPair.overlayX === 'start' ? 'after' : 'before';\n        const posY: MenuPositionY = change.connectionPair.overlayY === 'top' ? 'below' : 'above';\n\n        this.menu.setPositionClasses!(posX, posY);\n      });\n    }\n  }\n\n  /**\n   * Sets the appropriate positions on a position strategy\n   * so the overlay connects with the trigger correctly.\n   * @param positionStrategy Strategy whose position to update.\n   */\n  private _setPosition(positionStrategy: FlexibleConnectedPositionStrategy) {\n    let [originX, originFallbackX]: HorizontalConnectionPos[] =\n        this.menu.xPosition === 'before' ? ['end', 'start'] : ['start', 'end'];\n\n    let [overlayY, overlayFallbackY]: VerticalConnectionPos[] =\n        this.menu.yPosition === 'above' ? ['bottom', 'top'] : ['top', 'bottom'];\n\n    let [originY, originFallbackY] = [overlayY, overlayFallbackY];\n    let [overlayX, overlayFallbackX] = [originX, originFallbackX];\n    let offsetY = 0;\n\n    if (this.triggersSubmenu()) {\n      // When the menu is a sub-menu, it should always align itself\n      // to the edges of the trigger, instead of overlapping it.\n      overlayFallbackX = originX = this.menu.xPosition === 'before' ? 'start' : 'end';\n      originFallbackX = overlayX = originX === 'end' ? 'start' : 'end';\n      offsetY = overlayY === 'bottom' ? MENU_PANEL_TOP_PADDING : -MENU_PANEL_TOP_PADDING;\n    } else if (!this.menu.overlapTrigger) {\n      originY = overlayY === 'top' ? 'bottom' : 'top';\n      originFallbackY = overlayFallbackY === 'top' ? 'bottom' : 'top';\n    }\n\n    positionStrategy.withPositions([\n      {originX, originY, overlayX, overlayY, offsetY},\n      {originX: originFallbackX, originY, overlayX: overlayFallbackX, overlayY, offsetY},\n      {\n        originX,\n        originY: originFallbackY,\n        overlayX,\n        overlayY: overlayFallbackY,\n        offsetY: -offsetY\n      },\n      {\n        originX: originFallbackX,\n        originY: originFallbackY,\n        overlayX: overlayFallbackX,\n        overlayY: overlayFallbackY,\n        offsetY: -offsetY\n      }\n    ]);\n  }\n\n  /** Cleans up the active subscriptions. */\n  private _cleanUpSubscriptions(): void {\n    this._closeSubscription.unsubscribe();\n    this._hoverSubscription.unsubscribe();\n  }\n\n  /** Returns a stream that emits whenever an action that should close the menu occurs. */\n  private _menuClosingActions() {\n    const backdrop = this._overlayRef!.backdropClick();\n    const detachments = this._overlayRef!.detachments();\n    const parentClose = this._parentMenu ? this._parentMenu.closed : observableOf();\n    const hover = this._parentMenu ? this._parentMenu._hovered().pipe(\n      filter(active => active !== this._menuItemInstance),\n      filter(() => this._menuOpen)\n    ) : observableOf();\n\n    return merge(backdrop, parentClose, hover, detachments);\n  }\n\n  /** Handles mouse presses on the trigger. */\n  _handleMousedown(event: MouseEvent): void {\n    if (!isFakeMousedownFromScreenReader(event)) {\n      // Since right or middle button clicks won't trigger the `click` event,\n      // we shouldn't consider the menu as opened by mouse in those cases.\n      this._openedByMouse = event.button === 0;\n\n      // Since clicking on the trigger won't close the menu if it opens a sub-menu,\n      // we should prevent focus from moving onto it via click to avoid the\n      // highlight from lingering on the menu item.\n      if (this.triggersSubmenu()) {\n        event.preventDefault();\n      }\n    }\n  }\n\n  /** Handles key presses on the trigger. */\n  _handleKeydown(event: KeyboardEvent): void {\n    const keyCode = event.keyCode;\n\n    if (this.triggersSubmenu() && (\n            (keyCode === RIGHT_ARROW && this.dir === 'ltr') ||\n            (keyCode === LEFT_ARROW && this.dir === 'rtl'))) {\n      this.openMenu();\n    }\n  }\n\n  /** Handles click events on the trigger. */\n  _handleClick(event: MouseEvent): void {\n    if (this.triggersSubmenu()) {\n      // Stop event propagation to avoid closing the parent menu.\n      event.stopPropagation();\n      this.openMenu();\n    } else {\n      this.toggleMenu();\n    }\n  }\n\n  /** Handles the cases where the user hovers over the trigger. */\n  private _handleHover() {\n    // Subscribe to changes in the hovered item in order to toggle the panel.\n    if (!this.triggersSubmenu()) {\n      return;\n    }\n\n    this._hoverSubscription = this._parentMenu._hovered()\n      // Since we might have multiple competing triggers for the same menu (e.g. a sub-menu\n      // with different data and triggers), we have to delay it by a tick to ensure that\n      // it won't be closed immediately after it is opened.\n      .pipe(\n        filter(active => active === this._menuItemInstance && !active.disabled),\n        delay(0, asapScheduler)\n      )\n      .subscribe(() => {\n        this._openedByMouse = true;\n\n        // If the same menu is used between multiple triggers, it might still be animating\n        // while the new trigger tries to re-open it. Wait for the animation to finish\n        // before doing so. Also interrupt if the user moves to another item.\n        if (this.menu instanceof MatMenu && this.menu._isAnimating) {\n          // We need the `delay(0)` here in order to avoid\n          // 'changed after checked' errors in some cases. See #12194.\n          this.menu._animationDone\n            .pipe(take(1), delay(0, asapScheduler), takeUntil(this._parentMenu._hovered()))\n            .subscribe(() => this.openMenu());\n        } else {\n          this.openMenu();\n        }\n      });\n  }\n\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {MatMenuContent} from './menu-content';\nimport {MatMenu} from './menu-directive';\nimport {MatMenuItem} from './menu-item';\nimport {\n  MatMenuTrigger,\n  MAT_MENU_SCROLL_STRATEGY_FACTORY_PROVIDER,\n} from './menu-trigger';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatCommonModule,\n    MatRippleModule,\n    OverlayModule,\n  ],\n  exports: [MatMenu, MatMenuItem, MatMenuTrigger, MatMenuContent, MatCommonModule],\n  declarations: [MatMenu, MatMenuItem, MatMenuTrigger, MatMenuContent],\n  providers: [MAT_MENU_SCROLL_STRATEGY_FACTORY_PROVIDER]\n})\nexport class MatMenuModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  animate,\n  AnimationTriggerMetadata,\n  state,\n  style,\n  transition,\n  trigger,\n} from '@angular/animations';\n\n/**\n * The following are all the animations for the mat-select component, with each\n * const containing the metadata for one animation.\n *\n * The values below match the implementation of the AngularJS Material mat-select animation.\n * @docs-private\n */\nexport const matSelectAnimations: {\n  readonly transformPanel: AnimationTriggerMetadata;\n  readonly fadeInContent: AnimationTriggerMetadata;\n} = {\n  /**\n   * This animation transforms the select's overlay panel on and off the page.\n   *\n   * When the panel is attached to the DOM, it expands its width by the amount of padding, scales it\n   * up to 100% on the Y axis, fades in its border, and translates slightly up and to the\n   * side to ensure the option text correctly overlaps the trigger text.\n   *\n   * When the panel is removed from the DOM, it simply fades out linearly.\n   */\n  transformPanel: trigger('transformPanel', [\n    state('void', style({\n      transform: 'scaleY(0.8)',\n      minWidth: '100%',\n      opacity: 0\n    })),\n    state('showing', style({\n      opacity: 1,\n      minWidth: 'calc(100% + 32px)', // 32px = 2 * 16px padding\n      transform: 'scaleY(1)'\n    })),\n    state('showing-multiple', style({\n      opacity: 1,\n      minWidth: 'calc(100% + 64px)', // 64px = 48px padding on the left + 16px padding on the right\n      transform: 'scaleY(1)'\n    })),\n    transition('void => *', animate('120ms cubic-bezier(0, 0, 0.2, 1)')),\n    transition('* => void', animate('100ms 25ms linear', style({opacity: 0})))\n  ]),\n\n  /**\n   * This animation fades in the background color and text content of the\n   * select's options. It is time delayed to occur 100ms after the overlay\n   * panel has transformed in.\n   * @deprecated Not used anymore. To be removed.\n   * @breaking-change 8.0.0\n   */\n  fadeInContent: trigger('fadeInContent', [\n    state('showing', style({opacity: 1})),\n    transition('void => showing', [\n      style({opacity: 0}),\n      animate('150ms 100ms cubic-bezier(0.55, 0, 0.55, 0.2)')\n    ])\n  ])\n};\n\n\n/**\n * @deprecated\n * @breaking-change 7.0.0\n * @docs-private\n */\nexport const transformPanel = matSelectAnimations.transformPanel;\n\n/**\n * @deprecated\n * @breaking-change 7.0.0\n * @docs-private\n */\nexport const fadeInContent = matSelectAnimations.fadeInContent;\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusableOption, FocusKeyManager} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {SelectionModel} from '@angular/cdk/collections';\nimport {SPACE, ENTER, HOME, END, UP_ARROW, DOWN_ARROW, A} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  ContentChildren,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  OnDestroy,\n  OnInit,\n  Output,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {\n  CanDisableRipple, CanDisableRippleCtor,\n  MatLine,\n  MatLineSetter,\n  mixinDisableRipple,\n} from '@angular/material/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {Subscription} from 'rxjs';\nimport {MatListAvatarCssMatStyler, MatListIconCssMatStyler} from './list';\n\n\n/** @docs-private */\nexport class MatSelectionListBase {}\nexport const _MatSelectionListMixinBase: CanDisableRippleCtor & typeof MatSelectionListBase =\n    mixinDisableRipple(MatSelectionListBase);\n\n/** @docs-private */\nexport class MatListOptionBase {}\nexport const _MatListOptionMixinBase: CanDisableRippleCtor & typeof MatListOptionBase =\n    mixinDisableRipple(MatListOptionBase);\n\n/** @docs-private */\nexport const MAT_SELECTION_LIST_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatSelectionList),\n  multi: true\n};\n\n/** Change event that is being fired whenever the selected state of an option changes. */\nexport class MatSelectionListChange {\n  constructor(\n    /** Reference to the selection list that emitted the event. */\n    public source: MatSelectionList,\n    /** Reference to the option that has been changed. */\n    public option: MatListOption) {}\n}\n\n/**\n * Component for list-options of selection-list. Each list-option can automatically\n * generate a checkbox and can put current item into the selectionModel of selection-list\n * if the current item is selected.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-list-option',\n  exportAs: 'matListOption',\n  inputs: ['disableRipple'],\n  host: {\n    'role': 'option',\n    'class': 'mat-list-item mat-list-option',\n    '(focus)': '_handleFocus()',\n    '(blur)': '_handleBlur()',\n    '(click)': '_handleClick()',\n    'tabindex': '-1',\n    '[class.mat-list-item-disabled]': 'disabled',\n    '[class.mat-list-item-with-avatar]': '_avatar || _icon',\n    '[attr.aria-selected]': 'selected.toString()',\n    '[attr.aria-disabled]': 'disabled.toString()',\n  },\n  templateUrl: 'list-option.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatListOption extends _MatListOptionMixinBase\n    implements AfterContentInit, OnDestroy, OnInit, FocusableOption, CanDisableRipple {\n\n  private _selected = false;\n  private _disabled = false;\n\n  @ContentChild(MatListAvatarCssMatStyler) _avatar: MatListAvatarCssMatStyler;\n  @ContentChild(MatListIconCssMatStyler) _icon: MatListIconCssMatStyler;\n  @ContentChildren(MatLine) _lines: QueryList<MatLine>;\n\n  /** DOM element containing the item's text. */\n  @ViewChild('text') _text: ElementRef;\n\n  /** Whether the label should appear before or after the checkbox. Defaults to 'after' */\n  @Input() checkboxPosition: 'before' | 'after' = 'after';\n\n  /** Value of the option */\n  @Input() value: any;\n\n  /** Whether the option is disabled. */\n  @Input()\n  get disabled() { return this._disabled || (this.selectionList && this.selectionList.disabled); }\n  set disabled(value: any) {\n    const newValue = coerceBooleanProperty(value);\n\n    if (newValue !== this._disabled) {\n      this._disabled = newValue;\n      this._changeDetector.markForCheck();\n    }\n  }\n\n  /** Whether the option is selected. */\n  @Input()\n  get selected(): boolean { return this.selectionList.selectedOptions.isSelected(this); }\n  set selected(value: boolean) {\n    const isSelected = coerceBooleanProperty(value);\n\n    if (isSelected !== this._selected) {\n      this._setSelected(isSelected);\n      this.selectionList._reportValueChange();\n    }\n  }\n\n  constructor(private _element: ElementRef<HTMLElement>,\n              private _changeDetector: ChangeDetectorRef,\n              /** @docs-private */\n              @Inject(forwardRef(() => MatSelectionList)) public selectionList: MatSelectionList) {\n    super();\n  }\n\n  ngOnInit() {\n    // List options that are selected at initialization can't be reported properly to the form\n    // control. This is because it takes some time until the selection-list knows about all\n    // available options. Also it can happen that the ControlValueAccessor has an initial value\n    // that should be used instead. Deferring the value change report to the next tick ensures\n    // that the form control value is not being overwritten.\n    const wasSelected = this._selected;\n\n    Promise.resolve().then(() => {\n      if (this._selected || wasSelected) {\n        this.selected = true;\n        this._changeDetector.markForCheck();\n      }\n    });\n  }\n\n  ngAfterContentInit() {\n    // TODO: consider turning the setter into a function, it doesn't do anything as a class.\n    // tslint:disable-next-line:no-unused-expression\n    new MatLineSetter(this._lines, this._element);\n  }\n\n  ngOnDestroy(): void {\n    if (this.selected) {\n      // We have to delay this until the next tick in order\n      // to avoid changed after checked errors.\n      Promise.resolve().then(() => this.selected = false);\n    }\n\n    this.selectionList._removeOptionFromList(this);\n  }\n\n  /** Toggles the selection state of the option. */\n  toggle(): void {\n    this.selected = !this.selected;\n  }\n\n  /** Allows for programmatic focusing of the option. */\n  focus(): void {\n    this._element.nativeElement.focus();\n  }\n\n  /**\n   * Returns the list item's text label. Implemented as a part of the FocusKeyManager.\n   * @docs-private\n   */\n  getLabel() {\n    return this._text ? (this._text.nativeElement.textContent || '') : '';\n  }\n\n  /** Whether this list item should show a ripple effect when clicked. */\n  _isRippleDisabled() {\n    return this.disabled || this.disableRipple || this.selectionList.disableRipple;\n  }\n\n  _handleClick() {\n    if (!this.disabled) {\n      this.toggle();\n\n      // Emit a change event if the selected state of the option changed through user interaction.\n      this.selectionList._emitChangeEvent(this);\n    }\n  }\n\n  _handleFocus() {\n    this.selectionList._setFocusedOption(this);\n  }\n\n  _handleBlur() {\n    this.selectionList._onTouched();\n  }\n\n  /** Retrieves the DOM element of the component host. */\n  _getHostElement(): HTMLElement {\n    return this._element.nativeElement;\n  }\n\n  /** Sets the selected state of the option. Returns whether the value has changed. */\n  _setSelected(selected: boolean): boolean {\n    if (selected === this._selected) {\n      return false;\n    }\n\n    this._selected = selected;\n\n    if (selected) {\n      this.selectionList.selectedOptions.select(this);\n    } else {\n      this.selectionList.selectedOptions.deselect(this);\n    }\n\n    this._changeDetector.markForCheck();\n    return true;\n  }\n\n  /**\n   * Notifies Angular that the option needs to be checked in the next change detection run. Mainly\n   * used to trigger an update of the list option if the disabled state of the selection list\n   * changed.\n   */\n  _markForCheck() {\n    this._changeDetector.markForCheck();\n  }\n}\n\n\n/**\n * Material Design list component where each item is a selectable option. Behaves as a listbox.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-selection-list',\n  exportAs: 'matSelectionList',\n  inputs: ['disabled', 'disableRipple', 'tabIndex'],\n  host: {\n    'role': 'listbox',\n    '[tabIndex]': 'tabIndex',\n    'class': 'mat-selection-list',\n    '(focus)': 'focus()',\n    '(blur)': '_onTouched()',\n    '(keydown)': '_keydown($event)',\n    'aria-multiselectable': 'true',\n    '[attr.aria-disabled]': 'disabled.toString()',\n  },\n  template: '<ng-content></ng-content>',\n  styleUrls: ['list.css'],\n  encapsulation: ViewEncapsulation.None,\n  providers: [MAT_SELECTION_LIST_VALUE_ACCESSOR],\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class MatSelectionList extends _MatSelectionListMixinBase implements FocusableOption,\n    CanDisableRipple, AfterContentInit, ControlValueAccessor, OnDestroy {\n\n  /** The FocusKeyManager which handles focus. */\n  _keyManager: FocusKeyManager<MatListOption>;\n\n  /** The option components contained within this selection-list. */\n  @ContentChildren(MatListOption) options: QueryList<MatListOption>;\n\n  /** Emits a change event whenever the selected state of an option changes. */\n  @Output() readonly selectionChange: EventEmitter<MatSelectionListChange> =\n      new EventEmitter<MatSelectionListChange>();\n\n  /** Tabindex of the selection list. */\n  @Input() tabIndex: number = 0;\n\n  /**\n   * Function used for comparing an option against the selected value when determining which\n   * options should appear as selected. The first argument is the value of an options. The second\n   * one is a value from the selected value. A boolean must be returned.\n   */\n  @Input() compareWith: (o1: any, o2: any) => boolean;\n\n  /** Whether the selection list is disabled. */\n  @Input()\n  get disabled(): boolean { return this._disabled; }\n  set disabled(value: boolean) {\n    this._disabled = coerceBooleanProperty(value);\n\n    // The `MatSelectionList` and `MatListOption` are using the `OnPush` change detection\n    // strategy. Therefore the options will not check for any changes if the `MatSelectionList`\n    // changed its state. Since we know that a change to `disabled` property of the list affects\n    // the state of the options, we manually mark each option for check.\n    if (this.options) {\n      this.options.forEach(option => option._markForCheck());\n    }\n  }\n  private _disabled: boolean = false;\n\n  /** The currently selected options. */\n  selectedOptions: SelectionModel<MatListOption> = new SelectionModel<MatListOption>(true);\n\n  /** View to model callback that should be called whenever the selected options change. */\n  private _onChange: (value: any) => void = (_: any) => {};\n\n  /** Used for storing the values that were assigned before the options were initialized. */\n  private _tempValues: string[]|null;\n\n  /** Subscription to sync value changes in the SelectionModel back to the SelectionList. */\n  private _modelChanges = Subscription.EMPTY;\n\n  /** View to model callback that should be called if the list or its options lost focus. */\n  _onTouched: () => void = () => {};\n\n  constructor(private _element: ElementRef<HTMLElement>, @Attribute('tabindex') tabIndex: string) {\n    super();\n    this.tabIndex = parseInt(tabIndex) || 0;\n  }\n\n  ngAfterContentInit(): void {\n    this._keyManager = new FocusKeyManager<MatListOption>(this.options)\n      .withWrap()\n      .withTypeAhead()\n      // Allow disabled items to be focusable. For accessibility reasons, there must be a way for\n      // screenreader users, that allows reading the different options of the list.\n      .skipPredicate(() => false);\n\n    if (this._tempValues) {\n      this._setOptionsFromValues(this._tempValues);\n      this._tempValues = null;\n    }\n\n    // Sync external changes to the model back to the options.\n    this._modelChanges = this.selectedOptions.onChange.subscribe(event => {\n      if (event.added) {\n        for (let item of event.added) {\n          item.selected = true;\n        }\n      }\n\n      if (event.removed) {\n        for (let item of event.removed) {\n          item.selected = false;\n        }\n      }\n    });\n  }\n\n  ngOnDestroy() {\n    this._modelChanges.unsubscribe();\n  }\n\n  /** Focuses the last active list option. */\n  focus() {\n    this._element.nativeElement.focus();\n  }\n\n  /** Selects all of the options. */\n  selectAll() {\n    this._setAllOptionsSelected(true);\n  }\n\n  /** Deselects all of the options. */\n  deselectAll() {\n    this._setAllOptionsSelected(false);\n  }\n\n  /** Sets the focused option of the selection-list. */\n  _setFocusedOption(option: MatListOption) {\n    this._keyManager.updateActiveItemIndex(this._getOptionIndex(option));\n  }\n\n  /** Removes an option from the selection list and updates the active item. */\n  _removeOptionFromList(option: MatListOption) {\n    const optionIndex = this._getOptionIndex(option);\n\n    if (optionIndex > -1 && this._keyManager.activeItemIndex === optionIndex) {\n      // Check whether the option is the last item\n      if (optionIndex > 0) {\n        this._keyManager.setPreviousItemActive();\n      } else if (optionIndex === 0 && this.options.length > 1) {\n        this._keyManager.setNextItemActive();\n      }\n    }\n  }\n\n  /** Passes relevant key presses to our key manager. */\n  _keydown(event: KeyboardEvent) {\n    const keyCode = event.keyCode;\n    const manager = this._keyManager;\n    const previousFocusIndex = manager.activeItemIndex;\n\n    switch (keyCode) {\n      case SPACE:\n      case ENTER:\n        this._toggleFocusedOption();\n        // Always prevent space from scrolling the page since the list has focus\n        event.preventDefault();\n        break;\n      case HOME:\n      case END:\n        keyCode === HOME ? manager.setFirstItemActive() : manager.setLastItemActive();\n        event.preventDefault();\n        break;\n      case A:\n        if (event.ctrlKey) {\n          this.options.find(option => !option.selected) ? this.selectAll() : this.deselectAll();\n          event.preventDefault();\n        }\n        break;\n      default:\n        manager.onKeydown(event);\n    }\n\n    if ((keyCode === UP_ARROW || keyCode === DOWN_ARROW) && event.shiftKey &&\n        manager.activeItemIndex !== previousFocusIndex) {\n      this._toggleFocusedOption();\n    }\n  }\n\n  /** Reports a value change to the ControlValueAccessor */\n  _reportValueChange() {\n    if (this.options) {\n      this._onChange(this._getSelectedOptionValues());\n    }\n  }\n\n  /** Emits a change event if the selected state of an option changed. */\n  _emitChangeEvent(option: MatListOption) {\n    this.selectionChange.emit(new MatSelectionListChange(this, option));\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  writeValue(values: string[]): void {\n    if (this.options) {\n      this._setOptionsFromValues(values || []);\n    } else {\n      this._tempValues = values;\n    }\n  }\n\n  /** Implemented as a part of ControlValueAccessor. */\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  registerOnChange(fn: (value: any) => void): void {\n    this._onChange = fn;\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  registerOnTouched(fn: () => void): void {\n    this._onTouched = fn;\n  }\n\n  /** Sets the selected options based on the specified values. */\n  private _setOptionsFromValues(values: string[]) {\n    this.options.forEach(option => option._setSelected(false));\n\n    values.forEach(value => {\n      const correspondingOption = this.options.find(option => {\n        // Skip options that are already in the model. This allows us to handle cases\n        // where the same primitive value is selected multiple times.\n        if (option.selected) {\n          return false;\n        }\n\n        return this.compareWith ? this.compareWith(option.value, value) : option.value === value;\n      });\n\n      if (correspondingOption) {\n        correspondingOption._setSelected(true);\n      }\n    });\n  }\n\n  /** Returns the values of the selected options. */\n  private _getSelectedOptionValues(): string[] {\n    return this.options.filter(option => option.selected).map(option => option.value);\n  }\n\n  /** Toggles the state of the currently focused option if enabled. */\n  private _toggleFocusedOption(): void {\n    let focusedIndex = this._keyManager.activeItemIndex;\n\n    if (focusedIndex != null && this._isValidIndex(focusedIndex)) {\n      let focusedOption: MatListOption = this.options.toArray()[focusedIndex];\n\n      if (focusedOption && !focusedOption.disabled) {\n        focusedOption.toggle();\n\n        // Emit a change event because the focused option changed its state through user\n        // interaction.\n        this._emitChangeEvent(focusedOption);\n      }\n    }\n  }\n\n  /**\n   * Sets the selected state on all of the options\n   * and emits an event if anything changed.\n   */\n  private _setAllOptionsSelected(isSelected: boolean) {\n    // Keep track of whether anything changed, because we only want to\n    // emit the changed event when something actually changed.\n    let hasChanged = false;\n\n    this.options.forEach(option => {\n      if (option._setSelected(isSelected)) {\n        hasChanged = true;\n      }\n    });\n\n    if (hasChanged) {\n      this._reportValueChange();\n    }\n  }\n\n  /**\n   * Utility to ensure all indexes are valid.\n   * @param index The index to be checked.\n   * @returns True if the index is valid for our list of options.\n   */\n  private _isValidIndex(index: number): boolean {\n    return index >= 0 && index < this.options.length;\n  }\n\n  /** Returns the index of the specified list option. */\n  private _getOptionIndex(option: MatListOption): number {\n    return this.options.toArray().indexOf(option);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {\n  MatCommonModule,\n  MatLineModule,\n  MatPseudoCheckboxModule,\n  MatRippleModule,\n} from '@angular/material/core';\nimport {\n  MatList,\n  MatNavList,\n  MatListAvatarCssMatStyler,\n  MatListIconCssMatStyler,\n  MatListItem,\n  MatListSubheaderCssMatStyler,\n} from './list';\nimport {MatListOption, MatSelectionList} from './selection-list';\nimport {MatDividerModule} from '@angular/material/divider';\n\n\n@NgModule({\n  imports: [MatLineModule, MatRippleModule, MatCommonModule, MatPseudoCheckboxModule, CommonModule],\n  exports: [\n    MatList,\n    MatNavList,\n    MatListItem,\n    MatListAvatarCssMatStyler,\n    MatLineModule,\n    MatCommonModule,\n    MatListIconCssMatStyler,\n    MatListSubheaderCssMatStyler,\n    MatPseudoCheckboxModule,\n    MatSelectionList,\n    MatListOption,\n    MatDividerModule\n  ],\n  declarations: [\n    MatList,\n    MatNavList,\n    MatListItem,\n    MatListAvatarCssMatStyler,\n    MatListIconCssMatStyler,\n    MatListSubheaderCssMatStyler,\n    MatSelectionList,\n    MatListOption\n  ],\n})\nexport class MatListModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  Component,\n  ContentChild,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  Optional,\n  QueryList,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {\n  CanDisableRipple,\n  CanDisableRippleCtor,\n  MatLine,\n  MatLineSetter,\n  mixinDisableRipple,\n} from '@angular/material/core';\n\n// Boilerplate for applying mixins to MatList.\n/** @docs-private */\nexport class MatListBase {}\nexport const _MatListMixinBase: CanDisableRippleCtor & typeof MatListBase =\n    mixinDisableRipple(MatListBase);\n\n// Boilerplate for applying mixins to MatListItem.\n/** @docs-private */\nexport class MatListItemBase {}\nexport const _MatListItemMixinBase: CanDisableRippleCtor & typeof MatListItemBase =\n    mixinDisableRipple(MatListItemBase);\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-nav-list',\n  exportAs: 'matNavList',\n  host: {\n    'role': 'navigation',\n    'class': 'mat-nav-list'\n  },\n  templateUrl: 'list.html',\n  styleUrls: ['list.css'],\n  inputs: ['disableRipple'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatNavList extends _MatListMixinBase implements CanDisableRipple {}\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-list, mat-action-list',\n  exportAs: 'matList',\n  templateUrl: 'list.html',\n  host: {'class': 'mat-list'},\n  styleUrls: ['list.css'],\n  inputs: ['disableRipple'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatList extends _MatListMixinBase implements CanDisableRipple {}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-list-avatar], [matListAvatar]',\n  host: {'class': 'mat-list-avatar'}\n})\nexport class MatListAvatarCssMatStyler {}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-list-icon], [matListIcon]',\n  host: {'class': 'mat-list-icon'}\n})\nexport class MatListIconCssMatStyler {}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-subheader], [matSubheader]',\n  host: {'class': 'mat-subheader'}\n})\nexport class MatListSubheaderCssMatStyler {}\n\n/** An item within a Material Design list. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-list-item, a[mat-list-item], button[mat-list-item]',\n  exportAs: 'matListItem',\n  host: {\n    'class': 'mat-list-item',\n    // @breaking-change 7.0.0 Remove `mat-list-item-avatar` in favor of `mat-list-item-with-avatar`.\n    '[class.mat-list-item-avatar]': '_avatar || _icon',\n    '[class.mat-list-item-with-avatar]': '_avatar || _icon',\n  },\n  inputs: ['disableRipple'],\n  templateUrl: 'list-item.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatListItem extends _MatListItemMixinBase implements AfterContentInit,\n    CanDisableRipple {\n  private _isNavList: boolean = false;\n\n  @ContentChildren(MatLine) _lines: QueryList<MatLine>;\n  @ContentChild(MatListAvatarCssMatStyler) _avatar: MatListAvatarCssMatStyler;\n  @ContentChild(MatListIconCssMatStyler) _icon: MatListIconCssMatStyler;\n\n  constructor(private _element: ElementRef<HTMLElement>,\n              @Optional() private _navList: MatNavList) {\n    super();\n    this._isNavList = !!_navList;\n\n    // If no type attributed is specified for <button>, set it to \"button\".\n    // If a type attribute is already specified, do nothing.\n    const element = this._getHostElement();\n    if (element.nodeName && element.nodeName.toLowerCase() === 'button'\n        && !element.hasAttribute('type')) {\n      element.setAttribute('type', 'button');\n    }\n  }\n\n  ngAfterContentInit() {\n    // TODO: consider turning the setter into a function, it doesn't do anything as a class.\n    // tslint:disable-next-line:no-unused-expression\n    new MatLineSetter(this._lines, this._element);\n  }\n\n  /** Whether this list item should show a ripple effect when clicked. */\n  _isRippleDisabled() {\n    return !this._isNavList || this.disableRipple || this._navList.disableRipple;\n  }\n\n  /** Retrieves the DOM element of the component host. */\n  _getHostElement(): HTMLElement {\n    return this._element.nativeElement;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ViewEncapsulation,\n  ElementRef,\n  Input,\n  Optional,\n  ContentChildren,\n  QueryList,\n  AfterContentInit,\n  Directive,\n  ChangeDetectionStrategy,\n  Inject,\n} from '@angular/core';\nimport {MatLine, MatLineSetter} from '@angular/material/core';\nimport {coerceNumberProperty} from '@angular/cdk/coercion';\nimport {MAT_GRID_LIST, MatGridListBase} from './grid-list-base';\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-grid-tile',\n  exportAs: 'matGridTile',\n  host: {\n    'class': 'mat-grid-tile',\n  },\n  templateUrl: 'grid-tile.html',\n  styleUrls: ['grid-list.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatGridTile {\n  _rowspan: number = 1;\n  _colspan: number = 1;\n\n  constructor(\n    private _element: ElementRef<HTMLElement>,\n    @Optional() @Inject(MAT_GRID_LIST) public _gridList?: MatGridListBase) {}\n\n  /** Amount of rows that the grid tile takes up. */\n  @Input()\n  get rowspan(): number { return this._rowspan; }\n  set rowspan(value: number) { this._rowspan = Math.round(coerceNumberProperty(value)); }\n\n  /** Amount of columns that the grid tile takes up. */\n  @Input()\n  get colspan(): number { return this._colspan; }\n  set colspan(value: number) { this._colspan = Math.round(coerceNumberProperty(value)); }\n\n  /**\n   * Sets the style of the grid-tile element.  Needs to be set manually to avoid\n   * \"Changed after checked\" errors that would occur with HostBinding.\n   */\n  _setStyle(property: string, value: any): void {\n    this._element.nativeElement.style[property] = value;\n  }\n}\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-grid-tile-header, mat-grid-tile-footer',\n  templateUrl: 'grid-tile-text.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatGridTileText implements AfterContentInit {\n  /**\n   *  Helper that watches the number of lines in a text area and sets\n   * a class on the host element that matches the line count.\n   */\n  _lineSetter: MatLineSetter;\n  @ContentChildren(MatLine) _lines: QueryList<MatLine>;\n\n  constructor(private _element: ElementRef<HTMLElement>) {}\n\n  ngAfterContentInit() {\n    this._lineSetter = new MatLineSetter(this._lines, this._element);\n  }\n}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-grid-avatar], [matGridAvatar]',\n  host: {'class': 'mat-grid-avatar'}\n})\nexport class MatGridAvatarCssMatStyler {}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-grid-tile-header',\n  host: {'class': 'mat-grid-tile-header'}\n})\nexport class MatGridTileHeaderCssMatStyler {}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-grid-tile-footer',\n  host: {'class': 'mat-grid-tile-footer'}\n})\nexport class MatGridTileFooterCssMatStyler {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {MatGridTile} from './grid-tile';\n\n/**\n * Class for determining, from a list of tiles, the (row, col) position of each of those tiles\n * in the grid. This is necessary (rather than just rendering the tiles in normal document flow)\n * because the tiles can have a rowspan.\n *\n * The positioning algorithm greedily places each tile as soon as it encounters a gap in the grid\n * large enough to accommodate it so that the tiles still render in the same order in which they\n * are given.\n *\n * The basis of the algorithm is the use of an array to track the already placed tiles. Each\n * element of the array corresponds to a column, and the value indicates how many cells in that\n * column are already occupied; zero indicates an empty cell. Moving \"down\" to the next row\n * decrements each value in the tracking array (indicating that the column is one cell closer to\n * being free).\n *\n * @docs-private\n */\nexport class TileCoordinator {\n  /** Tracking array (see class description). */\n  tracker: number[];\n\n  /** Index at which the search for the next gap will start. */\n  columnIndex: number = 0;\n\n  /** The current row index. */\n  rowIndex: number = 0;\n\n  /** Gets the total number of rows occupied by tiles */\n  get rowCount(): number { return this.rowIndex + 1; }\n\n  /**\n   * Gets the total span of rows occupied by tiles.\n   * Ex: A list with 1 row that contains a tile with rowspan 2 will have a total rowspan of 2.\n   */\n  get rowspan() {\n    const lastRowMax = Math.max(...this.tracker);\n    // if any of the tiles has a rowspan that pushes it beyond the total row count,\n    // add the difference to the rowcount\n    return lastRowMax > 1 ? this.rowCount + lastRowMax - 1 : this.rowCount;\n  }\n\n  /** The computed (row, col) position of each tile (the output). */\n  positions: TilePosition[];\n\n  /**\n   * Updates the tile positions.\n   * @param numColumns Amount of columns in the grid.\n   */\n  update(numColumns: number, tiles: MatGridTile[]) {\n    this.columnIndex = 0;\n    this.rowIndex = 0;\n\n    this.tracker = new Array(numColumns);\n    this.tracker.fill(0, 0, this.tracker.length);\n    this.positions = tiles.map(tile => this._trackTile(tile));\n  }\n\n  /** Calculates the row and col position of a tile. */\n  private _trackTile(tile: MatGridTile): TilePosition {\n    // Find a gap large enough for this tile.\n    const gapStartIndex = this._findMatchingGap(tile.colspan);\n\n    // Place tile in the resulting gap.\n    this._markTilePosition(gapStartIndex, tile);\n\n    // The next time we look for a gap, the search will start at columnIndex, which should be\n    // immediately after the tile that has just been placed.\n    this.columnIndex = gapStartIndex + tile.colspan;\n\n    return new TilePosition(this.rowIndex, gapStartIndex);\n  }\n\n  /** Finds the next available space large enough to fit the tile. */\n  private _findMatchingGap(tileCols: number): number {\n    if (tileCols > this.tracker.length) {\n      throw Error(`mat-grid-list: tile with colspan ${tileCols} is wider than ` +\n                      `grid with cols=\"${this.tracker.length}\".`);\n    }\n\n    // Start index is inclusive, end index is exclusive.\n    let gapStartIndex = -1;\n    let gapEndIndex = -1;\n\n    // Look for a gap large enough to fit the given tile. Empty spaces are marked with a zero.\n    do {\n      // If we've reached the end of the row, go to the next row.\n      if (this.columnIndex + tileCols > this.tracker.length) {\n        this._nextRow();\n        gapStartIndex = this.tracker.indexOf(0, this.columnIndex);\n        gapEndIndex = this._findGapEndIndex(gapStartIndex);\n        continue;\n      }\n\n      gapStartIndex = this.tracker.indexOf(0, this.columnIndex);\n\n      // If there are no more empty spaces in this row at all, move on to the next row.\n      if (gapStartIndex == -1) {\n        this._nextRow();\n        gapStartIndex = this.tracker.indexOf(0, this.columnIndex);\n        gapEndIndex = this._findGapEndIndex(gapStartIndex);\n        continue;\n      }\n\n      gapEndIndex = this._findGapEndIndex(gapStartIndex);\n\n      // If a gap large enough isn't found, we want to start looking immediately after the current\n      // gap on the next iteration.\n      this.columnIndex = gapStartIndex + 1;\n\n      // Continue iterating until we find a gap wide enough for this tile. Since gapEndIndex is\n      // exclusive, gapEndIndex is 0 means we didn't find a gap and should continue.\n    } while ((gapEndIndex - gapStartIndex < tileCols) || (gapEndIndex == 0));\n\n    // If we still didn't manage to find a gap, ensure that the index is\n    // at least zero so the tile doesn't get pulled out of the grid.\n    return Math.max(gapStartIndex, 0);\n  }\n\n  /** Move \"down\" to the next row. */\n  private _nextRow(): void {\n    this.columnIndex = 0;\n    this.rowIndex++;\n\n    // Decrement all spaces by one to reflect moving down one row.\n    for (let i = 0; i < this.tracker.length; i++) {\n      this.tracker[i] = Math.max(0, this.tracker[i] - 1);\n    }\n  }\n\n  /**\n   * Finds the end index (exclusive) of a gap given the index from which to start looking.\n   * The gap ends when a non-zero value is found.\n   */\n  private _findGapEndIndex(gapStartIndex: number): number {\n    for (let i = gapStartIndex + 1; i < this.tracker.length; i++) {\n      if (this.tracker[i] != 0) {\n        return i;\n      }\n    }\n\n    // The gap ends with the end of the row.\n    return this.tracker.length;\n  }\n\n  /** Update the tile tracker to account for the given tile in the given space. */\n  private _markTilePosition(start: number, tile: MatGridTile): void {\n    for (let i = 0; i < tile.colspan; i++) {\n      this.tracker[start + i] = tile.rowspan;\n    }\n  }\n}\n\n/**\n * Simple data structure for tile position (row, col).\n * @docs-private\n */\nexport class TilePosition {\n  constructor(public row: number, public col: number) {}\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {MatGridList} from './grid-list';\nimport {MatGridTile} from './grid-tile';\nimport {TileCoordinator} from './tile-coordinator';\n\n/**\n * RegExp that can be used to check whether a value will\n * be allowed inside a CSS `calc()` expression.\n */\nconst cssCalcAllowedValue = /^-?\\d+((\\.\\d+)?[A-Za-z%$]?)+$/;\n\n/**\n * Sets the style properties for an individual tile, given the position calculated by the\n * Tile Coordinator.\n * @docs-private\n */\nexport abstract class TileStyler {\n  _gutterSize: string;\n  _rows: number = 0;\n  _rowspan: number = 0;\n  _cols: number;\n  _direction: string;\n\n  /**\n   * Adds grid-list layout info once it is available. Cannot be processed in the constructor\n   * because these properties haven't been calculated by that point.\n   *\n   * @param gutterSize Size of the grid's gutter.\n   * @param tracker Instance of the TileCoordinator.\n   * @param cols Amount of columns in the grid.\n   * @param direction Layout direction of the grid.\n   */\n  init(gutterSize: string, tracker: TileCoordinator, cols: number, direction: string): void {\n    this._gutterSize = normalizeUnits(gutterSize);\n    this._rows = tracker.rowCount;\n    this._rowspan = tracker.rowspan;\n    this._cols = cols;\n    this._direction = direction;\n  }\n\n  /**\n   * Computes the amount of space a single 1x1 tile would take up (width or height).\n   * Used as a basis for other calculations.\n   * @param sizePercent Percent of the total grid-list space that one 1x1 tile would take up.\n   * @param gutterFraction Fraction of the gutter size taken up by one 1x1 tile.\n   * @return The size of a 1x1 tile as an expression that can be evaluated via CSS calc().\n   */\n  getBaseTileSize(sizePercent: number, gutterFraction: number): string {\n    // Take the base size percent (as would be if evenly dividing the size between cells),\n    // and then subtracting the size of one gutter. However, since there are no gutters on the\n    // edges, each tile only uses a fraction (gutterShare = numGutters / numCells) of the gutter\n    // size. (Imagine having one gutter per tile, and then breaking up the extra gutter on the\n    // edge evenly among the cells).\n    return `(${sizePercent}% - (${this._gutterSize} * ${gutterFraction}))`;\n  }\n\n\n  /**\n   * Gets The horizontal or vertical position of a tile, e.g., the 'top' or 'left' property value.\n   * @param offset Number of tiles that have already been rendered in the row/column.\n   * @param baseSize Base size of a 1x1 tile (as computed in getBaseTileSize).\n   * @return Position of the tile as a CSS calc() expression.\n   */\n  getTilePosition(baseSize: string, offset: number): string {\n    // The position comes the size of a 1x1 tile plus gutter for each previous tile in the\n    // row/column (offset).\n    return offset === 0 ? '0' : calc(`(${baseSize} + ${this._gutterSize}) * ${offset}`);\n  }\n\n\n  /**\n   * Gets the actual size of a tile, e.g., width or height, taking rowspan or colspan into account.\n   * @param baseSize Base size of a 1x1 tile (as computed in getBaseTileSize).\n   * @param span The tile's rowspan or colspan.\n   * @return Size of the tile as a CSS calc() expression.\n   */\n  getTileSize(baseSize: string, span: number): string {\n    return `(${baseSize} * ${span}) + (${span - 1} * ${this._gutterSize})`;\n  }\n\n\n  /**\n   * Sets the style properties to be applied to a tile for the given row and column index.\n   * @param tile Tile to which to apply the styling.\n   * @param rowIndex Index of the tile's row.\n   * @param colIndex Index of the tile's column.\n   */\n  setStyle(tile: MatGridTile, rowIndex: number, colIndex: number): void {\n    // Percent of the available horizontal space that one column takes up.\n    let percentWidthPerTile = 100 / this._cols;\n\n    // Fraction of the vertical gutter size that each column takes up.\n    // For example, if there are 5 columns, each column uses 4/5 = 0.8 times the gutter width.\n    let gutterWidthFractionPerTile = (this._cols - 1) / this._cols;\n\n    this.setColStyles(tile, colIndex, percentWidthPerTile, gutterWidthFractionPerTile);\n    this.setRowStyles(tile, rowIndex, percentWidthPerTile, gutterWidthFractionPerTile);\n  }\n\n  /** Sets the horizontal placement of the tile in the list. */\n  setColStyles(tile: MatGridTile, colIndex: number, percentWidth: number,\n               gutterWidth: number) {\n    // Base horizontal size of a column.\n    let baseTileWidth = this.getBaseTileSize(percentWidth, gutterWidth);\n\n    // The width and horizontal position of each tile is always calculated the same way, but the\n    // height and vertical position depends on the rowMode.\n    let side = this._direction === 'rtl' ? 'right' : 'left';\n    tile._setStyle(side, this.getTilePosition(baseTileWidth, colIndex));\n    tile._setStyle('width', calc(this.getTileSize(baseTileWidth, tile.colspan)));\n  }\n\n  /**\n   * Calculates the total size taken up by gutters across one axis of a list.\n   */\n  getGutterSpan(): string {\n    return `${this._gutterSize} * (${this._rowspan} - 1)`;\n  }\n\n  /**\n   * Calculates the total size taken up by tiles across one axis of a list.\n   * @param tileHeight Height of the tile.\n   */\n  getTileSpan(tileHeight: string): string {\n    return `${this._rowspan} * ${this.getTileSize(tileHeight, 1)}`;\n  }\n\n  /**\n   * Sets the vertical placement of the tile in the list.\n   * This method will be implemented by each type of TileStyler.\n   * @docs-private\n   */\n  abstract setRowStyles(tile: MatGridTile, rowIndex: number, percentWidth: number,\n                        gutterWidth: number);\n\n  /**\n   * Calculates the computed height and returns the correct style property to set.\n   * This method can be implemented by each type of TileStyler.\n   * @docs-private\n   */\n  getComputedHeight(): [string, string] | null { return null; }\n\n  /**\n   * Called when the tile styler is swapped out with a different one. To be used for cleanup.\n   * @param list Grid list that the styler was attached to.\n   * @docs-private\n   */\n  abstract reset(list: MatGridList);\n}\n\n\n/**\n * This type of styler is instantiated when the user passes in a fixed row height.\n * Example `<mat-grid-list cols=\"3\" rowHeight=\"100px\">`\n * @docs-private\n */\nexport class FixedTileStyler extends TileStyler {\n\n  constructor(public fixedRowHeight: string) { super(); }\n\n  init(gutterSize: string, tracker: TileCoordinator, cols: number, direction: string) {\n    super.init(gutterSize, tracker, cols, direction);\n    this.fixedRowHeight = normalizeUnits(this.fixedRowHeight);\n\n    if (!cssCalcAllowedValue.test(this.fixedRowHeight)) {\n      throw Error(`Invalid value \"${this.fixedRowHeight}\" set as rowHeight.`);\n    }\n  }\n\n  setRowStyles(tile: MatGridTile, rowIndex: number): void {\n    tile._setStyle('top', this.getTilePosition(this.fixedRowHeight, rowIndex));\n    tile._setStyle('height', calc(this.getTileSize(this.fixedRowHeight, tile.rowspan)));\n  }\n\n  getComputedHeight(): [string, string] {\n    return [\n      'height', calc(`${this.getTileSpan(this.fixedRowHeight)} + ${this.getGutterSpan()}`)\n    ];\n  }\n\n  reset(list: MatGridList) {\n    list._setListStyle(['height', null]);\n\n    if (list._tiles) {\n      list._tiles.forEach(tile => {\n        tile._setStyle('top', null);\n        tile._setStyle('height', null);\n      });\n    }\n  }\n}\n\n\n/**\n * This type of styler is instantiated when the user passes in a width:height ratio\n * for the row height.  Example `<mat-grid-list cols=\"3\" rowHeight=\"3:1\">`\n * @docs-private\n */\nexport class RatioTileStyler extends TileStyler {\n\n  /** Ratio width:height given by user to determine row height. */\n  rowHeightRatio: number;\n  baseTileHeight: string;\n\n  constructor(value: string) {\n    super();\n    this._parseRatio(value);\n  }\n\n  setRowStyles(tile: MatGridTile, rowIndex: number, percentWidth: number,\n               gutterWidth: number): void {\n    let percentHeightPerTile = percentWidth / this.rowHeightRatio;\n    this.baseTileHeight = this.getBaseTileSize(percentHeightPerTile, gutterWidth);\n\n    // Use padding-top and margin-top to maintain the given aspect ratio, as\n    // a percentage-based value for these properties is applied versus the *width* of the\n    // containing block. See http://www.w3.org/TR/CSS2/box.html#margin-properties\n    tile._setStyle('marginTop', this.getTilePosition(this.baseTileHeight, rowIndex));\n    tile._setStyle('paddingTop', calc(this.getTileSize(this.baseTileHeight, tile.rowspan)));\n  }\n\n  getComputedHeight(): [string, string] {\n    return [\n      'paddingBottom', calc(`${this.getTileSpan(this.baseTileHeight)} + ${this.getGutterSpan()}`)\n    ];\n  }\n\n  reset(list: MatGridList) {\n    list._setListStyle(['paddingBottom', null]);\n\n    list._tiles.forEach(tile => {\n      tile._setStyle('marginTop', null);\n      tile._setStyle('paddingTop', null);\n    });\n  }\n\n  private _parseRatio(value: string): void {\n    const ratioParts = value.split(':');\n\n    if (ratioParts.length !== 2) {\n      throw Error(`mat-grid-list: invalid ratio given for row-height: \"${value}\"`);\n    }\n\n    this.rowHeightRatio = parseFloat(ratioParts[0]) / parseFloat(ratioParts[1]);\n  }\n}\n\n/**\n * This type of styler is instantiated when the user selects a \"fit\" row height mode.\n * In other words, the row height will reflect the total height of the container divided\n * by the number of rows.  Example `<mat-grid-list cols=\"3\" rowHeight=\"fit\">`\n *\n * @docs-private\n */\nexport class FitTileStyler extends TileStyler {\n  setRowStyles(tile: MatGridTile, rowIndex: number): void {\n    // Percent of the available vertical space that one row takes up.\n    let percentHeightPerTile = 100 / this._rowspan;\n\n    // Fraction of the horizontal gutter size that each column takes up.\n    let gutterHeightPerTile = (this._rows - 1) / this._rows;\n\n    // Base vertical size of a column.\n    let baseTileHeight = this.getBaseTileSize(percentHeightPerTile, gutterHeightPerTile);\n\n    tile._setStyle('top', this.getTilePosition(baseTileHeight, rowIndex));\n    tile._setStyle('height', calc(this.getTileSize(baseTileHeight, tile.rowspan)));\n  }\n\n  reset(list: MatGridList) {\n    if (list._tiles) {\n      list._tiles.forEach(tile => {\n        tile._setStyle('top', null);\n        tile._setStyle('height', null);\n      });\n    }\n  }\n}\n\n\n/** Wraps a CSS string in a calc function */\nfunction calc(exp: string): string { return `calc(${exp})`; }\n\n\n/** Appends pixels to a CSS string if no units are given. */\nfunction normalizeUnits(value: string): string {\n  return (value.match(/px|em|rem/)) ? value : value + 'px';\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ViewEncapsulation,\n  AfterContentChecked,\n  OnInit,\n  Input,\n  ContentChildren,\n  QueryList,\n  ElementRef,\n  Optional,\n  ChangeDetectionStrategy,\n} from '@angular/core';\nimport {MatGridTile} from './grid-tile';\nimport {TileCoordinator} from './tile-coordinator';\nimport {TileStyler, FitTileStyler, RatioTileStyler, FixedTileStyler} from './tile-styler';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceNumberProperty} from '@angular/cdk/coercion';\nimport {MAT_GRID_LIST, MatGridListBase} from './grid-list-base';\n\n\n// TODO(kara): Conditional (responsive) column count / row size.\n// TODO(kara): Re-layout on window resize / media change (debounced).\n// TODO(kara): gridTileHeader and gridTileFooter.\n\nconst MAT_FIT_MODE = 'fit';\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-grid-list',\n  exportAs: 'matGridList',\n  templateUrl: 'grid-list.html',\n  styleUrls: ['grid-list.css'],\n  host: {\n    'class': 'mat-grid-list',\n  },\n  providers: [{\n    provide: MAT_GRID_LIST,\n    useExisting: MatGridList\n  }],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatGridList implements MatGridListBase, OnInit, AfterContentChecked {\n  /** Number of columns being rendered. */\n  private _cols: number;\n\n  /** Used for determiningthe position of each tile in the grid. */\n  private _tileCoordinator: TileCoordinator;\n\n  /**\n   * Row height value passed in by user. This can be one of three types:\n   * - Number value (ex: \"100px\"):  sets a fixed row height to that value\n   * - Ratio value (ex: \"4:3\"): sets the row height based on width:height ratio\n   * - \"Fit\" mode (ex: \"fit\"): sets the row height to total height divided by number of rows\n   */\n  private _rowHeight: string;\n\n  /** The amount of space between tiles. This will be something like '5px' or '2em'. */\n  private _gutter: string = '1px';\n\n  /** Sets position and size styles for a tile */\n  private _tileStyler: TileStyler;\n\n  /** Query list of tiles that are being rendered. */\n  @ContentChildren(MatGridTile, {descendants: true}) _tiles: QueryList<MatGridTile>;\n\n  constructor(private _element: ElementRef<HTMLElement>,\n              @Optional() private _dir: Directionality) {}\n\n  /** Amount of columns in the grid list. */\n  @Input()\n  get cols(): number { return this._cols; }\n  set cols(value: number) {\n    this._cols = Math.max(1, Math.round(coerceNumberProperty(value)));\n  }\n\n  /** Size of the grid list's gutter in pixels. */\n  @Input()\n  get gutterSize(): string { return this._gutter; }\n  set gutterSize(value: string) { this._gutter = `${value || ''}`; }\n\n  /** Set internal representation of row height from the user-provided value. */\n  @Input()\n  set rowHeight(value: string | number) {\n    const newValue = `${value || ''}`;\n\n    if (newValue !== this._rowHeight) {\n      this._rowHeight = newValue;\n      this._setTileStyler(this._rowHeight);\n    }\n  }\n\n  ngOnInit() {\n    this._checkCols();\n    this._checkRowHeight();\n  }\n\n  /**\n   * The layout calculation is fairly cheap if nothing changes, so there's little cost\n   * to run it frequently.\n   */\n  ngAfterContentChecked() {\n    this._layoutTiles();\n  }\n\n  /** Throw a friendly error if cols property is missing */\n  private _checkCols() {\n    if (!this.cols) {\n      throw Error(`mat-grid-list: must pass in number of columns. ` +\n                  `Example: <mat-grid-list cols=\"3\">`);\n    }\n  }\n\n  /** Default to equal width:height if rowHeight property is missing */\n  private _checkRowHeight(): void {\n    if (!this._rowHeight) {\n      this._setTileStyler('1:1');\n    }\n  }\n\n  /** Creates correct Tile Styler subtype based on rowHeight passed in by user */\n  private _setTileStyler(rowHeight: string): void {\n    if (this._tileStyler) {\n      this._tileStyler.reset(this);\n    }\n\n    if (rowHeight === MAT_FIT_MODE) {\n      this._tileStyler = new FitTileStyler();\n    } else if (rowHeight && rowHeight.indexOf(':') > -1) {\n      this._tileStyler = new RatioTileStyler(rowHeight);\n    } else {\n      this._tileStyler = new FixedTileStyler(rowHeight);\n    }\n  }\n\n  /** Computes and applies the size and position for all children grid tiles. */\n  private _layoutTiles(): void {\n    if (!this._tileCoordinator) {\n      this._tileCoordinator = new TileCoordinator();\n    }\n\n\n    const tracker = this._tileCoordinator;\n    const tiles = this._tiles.filter(tile => !tile._gridList || tile._gridList === this);\n    const direction = this._dir ? this._dir.value : 'ltr';\n\n    this._tileCoordinator.update(this.cols, tiles);\n    this._tileStyler.init(this.gutterSize, tracker, this.cols, direction);\n\n    tiles.forEach((tile, index) => {\n      const pos = tracker.positions[index];\n      this._tileStyler.setStyle(tile, pos.row, pos.col);\n    });\n\n    this._setListStyle(this._tileStyler.getComputedHeight());\n  }\n\n  /** Sets style on the main grid-list element, given the style name and value. */\n  _setListStyle(style: [string, string | null] | null): void {\n    if (style) {\n      this._element.nativeElement.style[style[0]] = style[1];\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatLineModule, MatCommonModule} from '@angular/material/core';\nimport {\n  MatGridTile, MatGridTileText, MatGridTileFooterCssMatStyler,\n  MatGridTileHeaderCssMatStyler, MatGridAvatarCssMatStyler\n} from './grid-tile';\nimport {MatGridList} from './grid-list';\n\n\n@NgModule({\n  imports: [MatLineModule, MatCommonModule],\n  exports: [\n    MatGridList,\n    MatGridTile,\n    MatGridTileText,\n    MatLineModule,\n    MatCommonModule,\n    MatGridTileHeaderCssMatStyler,\n    MatGridTileFooterCssMatStyler,\n    MatGridAvatarCssMatStyler\n  ],\n  declarations: [\n    MatGridList,\n    MatGridTile,\n    MatGridTileText,\n    MatGridTileHeaderCssMatStyler,\n    MatGridTileFooterCssMatStyler,\n    MatGridAvatarCssMatStyler\n  ],\n})\nexport class MatGridListModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {DOCUMENT} from '@angular/common';\nimport {HttpClient, HttpErrorResponse} from '@angular/common/http';\nimport {\n  Inject,\n  Injectable,\n  InjectionToken,\n  Optional,\n  SecurityContext,\n  SkipSelf,\n} from '@angular/core';\nimport {DomSanitizer, SafeResourceUrl, SafeHtml} from '@angular/platform-browser';\nimport {forkJoin, Observable, of as observableOf, throwError as observableThrow} from 'rxjs';\nimport {catchError, finalize, map, share, tap} from 'rxjs/operators';\n\n\n/**\n * Returns an exception to be thrown in the case when attempting to\n * load an icon with a name that cannot be found.\n * @docs-private\n */\nexport function getMatIconNameNotFoundError(iconName: string): Error {\n  return Error(`Unable to find icon with the name \"${iconName}\"`);\n}\n\n\n/**\n * Returns an exception to be thrown when the consumer attempts to use\n * `<mat-icon>` without including @angular/http.\n * @docs-private\n */\nexport function getMatIconNoHttpProviderError(): Error {\n  return Error('Could not find HttpClient provider for use with Angular Material icons. ' +\n               'Please include the HttpClientModule from @angular/common/http in your ' +\n               'app imports.');\n}\n\n\n/**\n * Returns an exception to be thrown when a URL couldn't be sanitized.\n * @param url URL that was attempted to be sanitized.\n * @docs-private\n */\nexport function getMatIconFailedToSanitizeUrlError(url: SafeResourceUrl): Error {\n  return Error(`The URL provided to MatIconRegistry was not trusted as a resource URL ` +\n               `via Angular's DomSanitizer. Attempted URL was \"${url}\".`);\n}\n\n/**\n * Returns an exception to be thrown when a HTML string couldn't be sanitized.\n * @param literal HTML that was attempted to be sanitized.\n * @docs-private\n */\nexport function getMatIconFailedToSanitizeLiteralError(literal: SafeHtml): Error {\n  return Error(`The literal provided to MatIconRegistry was not trusted as safe HTML by ` +\n               `Angular's DomSanitizer. Attempted literal was \"${literal}\".`);\n}\n\n\n/**\n * Configuration for an icon, including the URL and possibly the cached SVG element.\n * @docs-private\n */\nclass SvgIconConfig {\n  url: SafeResourceUrl | null;\n  svgElement: SVGElement | null;\n\n  constructor(url: SafeResourceUrl);\n  constructor(svgElement: SVGElement);\n  constructor(data: SafeResourceUrl | SVGElement) {\n    // Note that we can't use `instanceof SVGElement` here,\n    // because it'll break during server-side rendering.\n    if (!!(data as any).nodeName) {\n      this.svgElement = data as SVGElement;\n    } else {\n      this.url = data as SafeResourceUrl;\n    }\n  }\n}\n\n/**\n * Service to register and display icons used by the `<mat-icon>` component.\n * - Registers icon URLs by namespace and name.\n * - Registers icon set URLs by namespace.\n * - Registers aliases for CSS classes, for use with icon fonts.\n * - Loads icons from URLs and extracts individual icons from icon sets.\n */\n@Injectable({providedIn: 'root'})\nexport class MatIconRegistry {\n  private _document: Document;\n\n  /**\n   * URLs and cached SVG elements for individual icons. Keys are of the format \"[namespace]:[icon]\".\n   */\n  private _svgIconConfigs = new Map<string, SvgIconConfig>();\n\n  /**\n   * SvgIconConfig objects and cached SVG elements for icon sets, keyed by namespace.\n   * Multiple icon sets can be registered under the same namespace.\n   */\n  private _iconSetConfigs = new Map<string, SvgIconConfig[]>();\n\n  /** Cache for icons loaded by direct URLs. */\n  private _cachedIconsByUrl = new Map<string, SVGElement>();\n\n  /** In-progress icon fetches. Used to coalesce multiple requests to the same URL. */\n  private _inProgressUrlFetches = new Map<string, Observable<string>>();\n\n  /** Map from font identifiers to their CSS class names. Used for icon fonts. */\n  private _fontCssClassesByAlias = new Map<string, string>();\n\n  /**\n   * The CSS class to apply when an `<mat-icon>` component has no icon name, url, or font specified.\n   * The default 'material-icons' value assumes that the material icon font has been loaded as\n   * described at http://google.github.io/material-design-icons/#icon-font-for-the-web\n   */\n  private _defaultFontSetClass = 'material-icons';\n\n  constructor(\n    @Optional() private _httpClient: HttpClient,\n    private _sanitizer: DomSanitizer,\n    @Optional() @Inject(DOCUMENT) document: any) {\n      this._document = document;\n    }\n\n  /**\n   * Registers an icon by URL in the default namespace.\n   * @param iconName Name under which the icon should be registered.\n   * @param url\n   */\n  addSvgIcon(iconName: string, url: SafeResourceUrl): this {\n    return this.addSvgIconInNamespace('', iconName, url);\n  }\n\n  /**\n   * Registers an icon using an HTML string in the default namespace.\n   * @param iconName Name under which the icon should be registered.\n   * @param literal SVG source of the icon.\n   */\n  addSvgIconLiteral(iconName: string, literal: SafeHtml): this {\n    return this.addSvgIconLiteralInNamespace('', iconName, literal);\n  }\n\n  /**\n   * Registers an icon by URL in the specified namespace.\n   * @param namespace Namespace in which the icon should be registered.\n   * @param iconName Name under which the icon should be registered.\n   * @param url\n   */\n  addSvgIconInNamespace(namespace: string, iconName: string, url: SafeResourceUrl): this {\n    return this._addSvgIconConfig(namespace, iconName, new SvgIconConfig(url));\n  }\n\n  /**\n   * Registers an icon using an HTML string in the specified namespace.\n   * @param namespace Namespace in which the icon should be registered.\n   * @param iconName Name under which the icon should be registered.\n   * @param literal SVG source of the icon.\n   */\n  addSvgIconLiteralInNamespace(namespace: string, iconName: string, literal: SafeHtml): this {\n    const sanitizedLiteral = this._sanitizer.sanitize(SecurityContext.HTML, literal);\n\n    if (!sanitizedLiteral) {\n      throw getMatIconFailedToSanitizeLiteralError(literal);\n    }\n\n    const svgElement = this._createSvgElementForSingleIcon(sanitizedLiteral);\n    return this._addSvgIconConfig(namespace, iconName, new SvgIconConfig(svgElement));\n  }\n\n  /**\n   * Registers an icon set by URL in the default namespace.\n   * @param url\n   */\n  addSvgIconSet(url: SafeResourceUrl): this {\n    return this.addSvgIconSetInNamespace('', url);\n  }\n\n  /**\n   * Registers an icon set using an HTML string in the default namespace.\n   * @param literal SVG source of the icon set.\n   */\n  addSvgIconSetLiteral(literal: SafeHtml): this {\n    return this.addSvgIconSetLiteralInNamespace('', literal);\n  }\n\n  /**\n   * Registers an icon set by URL in the specified namespace.\n   * @param namespace Namespace in which to register the icon set.\n   * @param url\n   */\n  addSvgIconSetInNamespace(namespace: string, url: SafeResourceUrl): this {\n    return this._addSvgIconSetConfig(namespace, new SvgIconConfig(url));\n  }\n\n  /**\n   * Registers an icon set using an HTML string in the specified namespace.\n   * @param namespace Namespace in which to register the icon set.\n   * @param literal SVG source of the icon set.\n   */\n  addSvgIconSetLiteralInNamespace(namespace: string, literal: SafeHtml): this {\n    const sanitizedLiteral = this._sanitizer.sanitize(SecurityContext.HTML, literal);\n\n    if (!sanitizedLiteral) {\n      throw getMatIconFailedToSanitizeLiteralError(literal);\n    }\n\n    const svgElement = this._svgElementFromString(sanitizedLiteral);\n    return this._addSvgIconSetConfig(namespace, new SvgIconConfig(svgElement));\n  }\n\n  /**\n   * Defines an alias for a CSS class name to be used for icon fonts. Creating an matIcon\n   * component with the alias as the fontSet input will cause the class name to be applied\n   * to the `<mat-icon>` element.\n   *\n   * @param alias Alias for the font.\n   * @param className Class name override to be used instead of the alias.\n   */\n  registerFontClassAlias(alias: string, className: string = alias): this {\n    this._fontCssClassesByAlias.set(alias, className);\n    return this;\n  }\n\n  /**\n   * Returns the CSS class name associated with the alias by a previous call to\n   * registerFontClassAlias. If no CSS class has been associated, returns the alias unmodified.\n   */\n  classNameForFontAlias(alias: string): string {\n    return this._fontCssClassesByAlias.get(alias) || alias;\n  }\n\n  /**\n   * Sets the CSS class name to be used for icon fonts when an `<mat-icon>` component does not\n   * have a fontSet input value, and is not loading an icon by name or URL.\n   *\n   * @param className\n   */\n  setDefaultFontSetClass(className: string): this {\n    this._defaultFontSetClass = className;\n    return this;\n  }\n\n  /**\n   * Returns the CSS class name to be used for icon fonts when an `<mat-icon>` component does not\n   * have a fontSet input value, and is not loading an icon by name or URL.\n   */\n  getDefaultFontSetClass(): string {\n    return this._defaultFontSetClass;\n  }\n\n  /**\n   * Returns an Observable that produces the icon (as an `<svg>` DOM element) from the given URL.\n   * The response from the URL may be cached so this will not always cause an HTTP request, but\n   * the produced element will always be a new copy of the originally fetched icon. (That is,\n   * it will not contain any modifications made to elements previously returned).\n   *\n   * @param safeUrl URL from which to fetch the SVG icon.\n   */\n  getSvgIconFromUrl(safeUrl: SafeResourceUrl): Observable<SVGElement> {\n    const url = this._sanitizer.sanitize(SecurityContext.RESOURCE_URL, safeUrl);\n\n    if (!url) {\n      throw getMatIconFailedToSanitizeUrlError(safeUrl);\n    }\n\n    const cachedIcon = this._cachedIconsByUrl.get(url);\n\n    if (cachedIcon) {\n      return observableOf(cloneSvg(cachedIcon));\n    }\n\n    return this._loadSvgIconFromConfig(new SvgIconConfig(safeUrl)).pipe(\n      tap(svg => this._cachedIconsByUrl.set(url!, svg)),\n      map(svg => cloneSvg(svg)),\n    );\n  }\n\n  /**\n   * Returns an Observable that produces the icon (as an `<svg>` DOM element) with the given name\n   * and namespace. The icon must have been previously registered with addIcon or addIconSet;\n   * if not, the Observable will throw an error.\n   *\n   * @param name Name of the icon to be retrieved.\n   * @param namespace Namespace in which to look for the icon.\n   */\n  getNamedSvgIcon(name: string, namespace: string = ''): Observable<SVGElement> {\n    // Return (copy of) cached icon if possible.\n    const key = iconKey(namespace, name);\n    const config = this._svgIconConfigs.get(key);\n\n    if (config) {\n      return this._getSvgFromConfig(config);\n    }\n\n    // See if we have any icon sets registered for the namespace.\n    const iconSetConfigs = this._iconSetConfigs.get(namespace);\n\n    if (iconSetConfigs) {\n      return this._getSvgFromIconSetConfigs(name, iconSetConfigs);\n    }\n\n    return observableThrow(getMatIconNameNotFoundError(key));\n  }\n\n  /**\n   * Returns the cached icon for a SvgIconConfig if available, or fetches it from its URL if not.\n   */\n  private _getSvgFromConfig(config: SvgIconConfig): Observable<SVGElement> {\n    if (config.svgElement) {\n      // We already have the SVG element for this icon, return a copy.\n      return observableOf(cloneSvg(config.svgElement));\n    } else {\n      // Fetch the icon from the config's URL, cache it, and return a copy.\n      return this._loadSvgIconFromConfig(config).pipe(\n        tap(svg => config.svgElement = svg),\n        map(svg => cloneSvg(svg)),\n      );\n    }\n  }\n\n  /**\n   * Attempts to find an icon with the specified name in any of the SVG icon sets.\n   * First searches the available cached icons for a nested element with a matching name, and\n   * if found copies the element to a new `<svg>` element. If not found, fetches all icon sets\n   * that have not been cached, and searches again after all fetches are completed.\n   * The returned Observable produces the SVG element if possible, and throws\n   * an error if no icon with the specified name can be found.\n   */\n  private _getSvgFromIconSetConfigs(name: string, iconSetConfigs: SvgIconConfig[]):\n      Observable<SVGElement> {\n    // For all the icon set SVG elements we've fetched, see if any contain an icon with the\n    // requested name.\n    const namedIcon = this._extractIconWithNameFromAnySet(name, iconSetConfigs);\n\n    if (namedIcon) {\n      // We could cache namedIcon in _svgIconConfigs, but since we have to make a copy every\n      // time anyway, there's probably not much advantage compared to just always extracting\n      // it from the icon set.\n      return observableOf(namedIcon);\n    }\n\n    // Not found in any cached icon sets. If there are icon sets with URLs that we haven't\n    // fetched, fetch them now and look for iconName in the results.\n    const iconSetFetchRequests: Observable<SVGElement | null>[] = iconSetConfigs\n      .filter(iconSetConfig => !iconSetConfig.svgElement)\n      .map(iconSetConfig => {\n        return this._loadSvgIconSetFromConfig(iconSetConfig).pipe(\n          catchError((err: HttpErrorResponse): Observable<SVGElement | null> => {\n            const url = this._sanitizer.sanitize(SecurityContext.RESOURCE_URL, iconSetConfig.url);\n\n            // Swallow errors fetching individual URLs so the\n            // combined Observable won't necessarily fail.\n            console.error(`Loading icon set URL: ${url} failed: ${err.message}`);\n            return observableOf(null);\n          })\n        );\n      });\n\n    // Fetch all the icon set URLs. When the requests complete, every IconSet should have a\n    // cached SVG element (unless the request failed), and we can check again for the icon.\n    return forkJoin(iconSetFetchRequests).pipe(map(() => {\n      const foundIcon = this._extractIconWithNameFromAnySet(name, iconSetConfigs);\n\n      if (!foundIcon) {\n        throw getMatIconNameNotFoundError(name);\n      }\n\n      return foundIcon;\n    }));\n  }\n\n  /**\n   * Searches the cached SVG elements for the given icon sets for a nested icon element whose \"id\"\n   * tag matches the specified name. If found, copies the nested element to a new SVG element and\n   * returns it. Returns null if no matching element is found.\n   */\n  private _extractIconWithNameFromAnySet(iconName: string, iconSetConfigs: SvgIconConfig[]):\n      SVGElement | null {\n    // Iterate backwards, so icon sets added later have precedence.\n    for (let i = iconSetConfigs.length - 1; i >= 0; i--) {\n      const config = iconSetConfigs[i];\n      if (config.svgElement) {\n        const foundIcon = this._extractSvgIconFromSet(config.svgElement, iconName);\n        if (foundIcon) {\n          return foundIcon;\n        }\n      }\n    }\n    return null;\n  }\n\n  /**\n   * Loads the content of the icon URL specified in the SvgIconConfig and creates an SVG element\n   * from it.\n   */\n  private _loadSvgIconFromConfig(config: SvgIconConfig): Observable<SVGElement> {\n    return this._fetchUrl(config.url)\n        .pipe(map(svgText => this._createSvgElementForSingleIcon(svgText)));\n  }\n\n  /**\n   * Loads the content of the icon set URL specified in the SvgIconConfig and creates an SVG element\n   * from it.\n   */\n  private _loadSvgIconSetFromConfig(config: SvgIconConfig): Observable<SVGElement> {\n    // If the SVG for this icon set has already been parsed, do nothing.\n    if (config.svgElement) {\n      return observableOf(config.svgElement);\n    }\n\n    return this._fetchUrl(config.url).pipe(map(svgText => {\n      // It is possible that the icon set was parsed and cached by an earlier request, so parsing\n      // only needs to occur if the cache is yet unset.\n      if (!config.svgElement) {\n        config.svgElement = this._svgElementFromString(svgText);\n      }\n\n      return config.svgElement;\n    }));\n  }\n\n  /**\n   * Creates a DOM element from the given SVG string, and adds default attributes.\n   */\n  private _createSvgElementForSingleIcon(responseText: string): SVGElement {\n    const svg = this._svgElementFromString(responseText);\n    this._setSvgAttributes(svg);\n    return svg;\n  }\n\n  /**\n   * Searches the cached element of the given SvgIconConfig for a nested icon element whose \"id\"\n   * tag matches the specified name. If found, copies the nested element to a new SVG element and\n   * returns it. Returns null if no matching element is found.\n   */\n  private _extractSvgIconFromSet(iconSet: SVGElement, iconName: string): SVGElement | null {\n    const iconSource = iconSet.querySelector('#' + iconName);\n\n    if (!iconSource) {\n      return null;\n    }\n\n    // Clone the element and remove the ID to prevent multiple elements from being added\n    // to the page with the same ID.\n    const iconElement = iconSource.cloneNode(true) as Element;\n    iconElement.removeAttribute('id');\n\n    // If the icon node is itself an <svg> node, clone and return it directly. If not, set it as\n    // the content of a new <svg> node.\n    if (iconElement.nodeName.toLowerCase() === 'svg') {\n      return this._setSvgAttributes(iconElement as SVGElement);\n    }\n\n    // If the node is a <symbol>, it won't be rendered so we have to convert it into <svg>. Note\n    // that the same could be achieved by referring to it via <use href=\"#id\">, however the <use>\n    // tag is problematic on Firefox, because it needs to include the current page path.\n    if (iconElement.nodeName.toLowerCase() === 'symbol') {\n      return this._setSvgAttributes(this._toSvgElement(iconElement));\n    }\n\n    // createElement('SVG') doesn't work as expected; the DOM ends up with\n    // the correct nodes, but the SVG content doesn't render. Instead we\n    // have to create an empty SVG node using innerHTML and append its content.\n    // Elements created using DOMParser.parseFromString have the same problem.\n    // http://stackoverflow.com/questions/23003278/svg-innerhtml-in-firefox-can-not-display\n    const svg = this._svgElementFromString('<svg></svg>');\n    // Clone the node so we don't remove it from the parent icon set element.\n    svg.appendChild(iconElement);\n\n    return this._setSvgAttributes(svg);\n  }\n\n  /**\n   * Creates a DOM element from the given SVG string.\n   */\n  private _svgElementFromString(str: string): SVGElement {\n    const div = this._document.createElement('DIV');\n    div.innerHTML = str;\n    const svg = div.querySelector('svg') as SVGElement;\n\n    if (!svg) {\n      throw Error('<svg> tag not found');\n    }\n\n    return svg;\n  }\n\n  /**\n   * Converts an element into an SVG node by cloning all of its children.\n   */\n  private _toSvgElement(element: Element): SVGElement {\n    let svg = this._svgElementFromString('<svg></svg>');\n\n    for (let i = 0; i < element.childNodes.length; i++) {\n      if (element.childNodes[i].nodeType === this._document.ELEMENT_NODE) {\n        svg.appendChild(element.childNodes[i].cloneNode(true));\n      }\n    }\n\n    return svg;\n  }\n\n  /**\n   * Sets the default attributes for an SVG element to be used as an icon.\n   */\n  private _setSvgAttributes(svg: SVGElement): SVGElement {\n    svg.setAttribute('fit', '');\n    svg.setAttribute('height', '100%');\n    svg.setAttribute('width', '100%');\n    svg.setAttribute('preserveAspectRatio', 'xMidYMid meet');\n    svg.setAttribute('focusable', 'false'); // Disable IE11 default behavior to make SVGs focusable.\n    return svg;\n  }\n\n  /**\n   * Returns an Observable which produces the string contents of the given URL. Results may be\n   * cached, so future calls with the same URL may not cause another HTTP request.\n   */\n  private _fetchUrl(safeUrl: SafeResourceUrl | null): Observable<string> {\n    if (!this._httpClient) {\n      throw getMatIconNoHttpProviderError();\n    }\n\n    if (safeUrl == null) {\n      throw Error(`Cannot fetch icon from URL \"${safeUrl}\".`);\n    }\n\n    const url = this._sanitizer.sanitize(SecurityContext.RESOURCE_URL, safeUrl);\n\n    if (!url) {\n      throw getMatIconFailedToSanitizeUrlError(safeUrl);\n    }\n\n    // Store in-progress fetches to avoid sending a duplicate request for a URL when there is\n    // already a request in progress for that URL. It's necessary to call share() on the\n    // Observable returned by http.get() so that multiple subscribers don't cause multiple XHRs.\n    const inProgressFetch = this._inProgressUrlFetches.get(url);\n\n    if (inProgressFetch) {\n      return inProgressFetch;\n    }\n\n    // TODO(jelbourn): for some reason, the `finalize` operator \"loses\" the generic type on the\n    // Observable. Figure out why and fix it.\n    const req = this._httpClient.get(url, {responseType: 'text'}).pipe(\n      finalize(() => this._inProgressUrlFetches.delete(url)),\n      share(),\n    );\n\n    this._inProgressUrlFetches.set(url, req);\n    return req;\n  }\n\n  /**\n   * Registers an icon config by name in the specified namespace.\n   * @param namespace Namespace in which to register the icon config.\n   * @param iconName Name under which to register the config.\n   * @param config Config to be registered.\n   */\n  private _addSvgIconConfig(namespace: string, iconName: string, config: SvgIconConfig): this {\n    this._svgIconConfigs.set(iconKey(namespace, iconName), config);\n    return this;\n  }\n\n  /**\n   * Registers an icon set config in the specified namespace.\n   * @param namespace Namespace in which to register the icon config.\n   * @param config Config to be registered.\n   */\n  private _addSvgIconSetConfig(namespace: string, config: SvgIconConfig): this {\n    const configNamespace = this._iconSetConfigs.get(namespace);\n\n    if (configNamespace) {\n      configNamespace.push(config);\n    } else {\n      this._iconSetConfigs.set(namespace, [config]);\n    }\n\n    return this;\n  }\n}\n\n/** @docs-private */\nexport function ICON_REGISTRY_PROVIDER_FACTORY(\n  parentRegistry: MatIconRegistry,\n  httpClient: HttpClient,\n  sanitizer: DomSanitizer,\n  document?: any) {\n  return parentRegistry || new MatIconRegistry(httpClient, sanitizer, document);\n}\n\n/** @docs-private */\nexport const ICON_REGISTRY_PROVIDER = {\n  // If there is already an MatIconRegistry available, use that. Otherwise, provide a new one.\n  provide: MatIconRegistry,\n  deps: [\n    [new Optional(), new SkipSelf(), MatIconRegistry],\n    [new Optional(), HttpClient],\n    DomSanitizer,\n    [new Optional(), DOCUMENT as InjectionToken<any>],\n  ],\n  useFactory: ICON_REGISTRY_PROVIDER_FACTORY,\n};\n\n/** Clones an SVGElement while preserving type information. */\nfunction cloneSvg(svg: SVGElement): SVGElement {\n  return svg.cloneNode(true) as SVGElement;\n}\n\n/** Returns the cache key to use for an icon namespace and name. */\nfunction iconKey(namespace: string, name: string) {\n  return namespace + ':' + name;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {take} from 'rxjs/operators';\nimport {\n  Attribute,\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  Input,\n  OnChanges,\n  OnInit,\n  SimpleChanges,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {CanColor, CanColorCtor, mixinColor} from '@angular/material/core';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {MatIconRegistry} from './icon-registry';\n\n\n// Boilerplate for applying mixins to MatIcon.\n/** @docs-private */\nexport class MatIconBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatIconMixinBase: CanColorCtor & typeof MatIconBase =\n    mixinColor(MatIconBase);\n\n\n/**\n * Component to display an icon. It can be used in the following ways:\n *\n * - Specify the svgIcon input to load an SVG icon from a URL previously registered with the\n *   addSvgIcon, addSvgIconInNamespace, addSvgIconSet, or addSvgIconSetInNamespace methods of\n *   MatIconRegistry. If the svgIcon value contains a colon it is assumed to be in the format\n *   \"[namespace]:[name]\", if not the value will be the name of an icon in the default namespace.\n *   Examples:\n *     `<mat-icon svgIcon=\"left-arrow\"></mat-icon>\n *     <mat-icon svgIcon=\"animals:cat\"></mat-icon>`\n *\n * - Use a font ligature as an icon by putting the ligature text in the content of the `<mat-icon>`\n *   component. By default the Material icons font is used as described at\n *   http://google.github.io/material-design-icons/#icon-font-for-the-web. You can specify an\n *   alternate font by setting the fontSet input to either the CSS class to apply to use the\n *   desired font, or to an alias previously registered with MatIconRegistry.registerFontClassAlias.\n *   Examples:\n *     `<mat-icon>home</mat-icon>\n *     <mat-icon fontSet=\"myfont\">sun</mat-icon>`\n *\n * - Specify a font glyph to be included via CSS rules by setting the fontSet input to specify the\n *   font, and the fontIcon input to specify the icon. Typically the fontIcon will specify a\n *   CSS class which causes the glyph to be displayed via a :before selector, as in\n *   https://fortawesome.github.io/Font-Awesome/examples/\n *   Example:\n *     `<mat-icon fontSet=\"fa\" fontIcon=\"alarm\"></mat-icon>`\n */\n@Component({\n  moduleId: module.id,\n  template: '<ng-content></ng-content>',\n  selector: 'mat-icon',\n  exportAs: 'matIcon',\n  styleUrls: ['icon.css'],\n  inputs: ['color'],\n  host: {\n    'role': 'img',\n    'class': 'mat-icon',\n    '[class.mat-icon-inline]': 'inline',\n  },\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatIcon extends _MatIconMixinBase implements OnChanges, OnInit, CanColor {\n  /**\n   * Whether the icon should be inlined, automatically sizing the icon to match the font size of\n   * the element the icon is contained in.\n   */\n  @Input()\n  get inline(): boolean {\n    return this._inline;\n  }\n  set inline(inline: boolean) {\n    this._inline = coerceBooleanProperty(inline);\n  }\n  private _inline: boolean = false;\n\n  /** Name of the icon in the SVG icon set. */\n  @Input() svgIcon: string;\n\n  /** Font set that the icon is a part of. */\n  @Input()\n  get fontSet(): string { return this._fontSet; }\n  set fontSet(value: string) {\n    this._fontSet = this._cleanupFontValue(value);\n  }\n  private _fontSet: string;\n\n  /** Name of an icon within a font set. */\n  @Input()\n  get fontIcon(): string { return this._fontIcon; }\n  set fontIcon(value: string) {\n    this._fontIcon = this._cleanupFontValue(value);\n  }\n  private _fontIcon: string;\n\n  private _previousFontSetClass: string;\n  private _previousFontIconClass: string;\n\n  constructor(\n      elementRef: ElementRef<HTMLElement>,\n      private _iconRegistry: MatIconRegistry,\n      @Attribute('aria-hidden') ariaHidden: string) {\n    super(elementRef);\n\n    // If the user has not explicitly set aria-hidden, mark the icon as hidden, as this is\n    // the right thing to do for the majority of icon use-cases.\n    if (!ariaHidden) {\n      elementRef.nativeElement.setAttribute('aria-hidden', 'true');\n    }\n  }\n\n  /**\n   * Splits an svgIcon binding value into its icon set and icon name components.\n   * Returns a 2-element array of [(icon set), (icon name)].\n   * The separator for the two fields is ':'. If there is no separator, an empty\n   * string is returned for the icon set and the entire value is returned for\n   * the icon name. If the argument is falsy, returns an array of two empty strings.\n   * Throws an error if the name contains two or more ':' separators.\n   * Examples:\n   *   `'social:cake' -> ['social', 'cake']\n   *   'penguin' -> ['', 'penguin']\n   *   null -> ['', '']\n   *   'a:b:c' -> (throws Error)`\n   */\n  private _splitIconName(iconName: string): [string, string] {\n    if (!iconName) {\n      return ['', ''];\n    }\n    const parts = iconName.split(':');\n    switch (parts.length) {\n      case 1: return ['', parts[0]]; // Use default namespace.\n      case 2: return <[string, string]>parts;\n      default: throw Error(`Invalid icon name: \"${iconName}\"`);\n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    // Only update the inline SVG icon if the inputs changed, to avoid unnecessary DOM operations.\n    if (changes.svgIcon) {\n      if (this.svgIcon) {\n        const [namespace, iconName] = this._splitIconName(this.svgIcon);\n\n        this._iconRegistry.getNamedSvgIcon(iconName, namespace).pipe(take(1)).subscribe(\n          svg => this._setSvgElement(svg),\n          (err: Error) => console.log(`Error retrieving icon: ${err.message}`)\n        );\n      } else {\n        this._clearSvgElement();\n      }\n    }\n\n    if (this._usingFontIcon()) {\n      this._updateFontIconClasses();\n    }\n  }\n\n  ngOnInit() {\n    // Update font classes because ngOnChanges won't be called if none of the inputs are present,\n    // e.g. <mat-icon>arrow</mat-icon> In this case we need to add a CSS class for the default font.\n    if (this._usingFontIcon()) {\n      this._updateFontIconClasses();\n    }\n  }\n\n  private _usingFontIcon(): boolean {\n    return !this.svgIcon;\n  }\n\n  private _setSvgElement(svg: SVGElement) {\n    this._clearSvgElement();\n\n    // Workaround for IE11 and Edge ignoring `style` tags inside dynamically-created SVGs.\n    // See: https://developer.microsoft.com/en-us/microsoft-edge/platform/issues/10898469/\n    // Do this before inserting the element into the DOM, in order to avoid a style recalculation.\n    const styleTags = svg.querySelectorAll('style') as NodeListOf<HTMLStyleElement>;\n\n    for (let i = 0; i < styleTags.length; i++) {\n      styleTags[i].textContent += ' ';\n    }\n\n    this._elementRef.nativeElement.appendChild(svg);\n  }\n\n  private _clearSvgElement() {\n    const layoutElement: HTMLElement = this._elementRef.nativeElement;\n    let childCount = layoutElement.childNodes.length;\n\n    // Remove existing non-element child nodes and SVGs, and add the new SVG element. Note that\n    // we can't use innerHTML, because IE will throw if the element has a data binding.\n    while (childCount--) {\n      const child = layoutElement.childNodes[childCount];\n\n      // 1 corresponds to Node.ELEMENT_NODE. We remove all non-element nodes in order to get rid\n      // of any loose text nodes, as well as any SVG elements in order to remove any old icons.\n      if (child.nodeType !== 1 || child.nodeName.toLowerCase() === 'svg') {\n        layoutElement.removeChild(child);\n      }\n    }\n  }\n\n  private _updateFontIconClasses() {\n    if (!this._usingFontIcon()) {\n      return;\n    }\n\n    const elem: HTMLElement = this._elementRef.nativeElement;\n    const fontSetClass = this.fontSet ?\n        this._iconRegistry.classNameForFontAlias(this.fontSet) :\n        this._iconRegistry.getDefaultFontSetClass();\n\n    if (fontSetClass != this._previousFontSetClass) {\n      if (this._previousFontSetClass) {\n        elem.classList.remove(this._previousFontSetClass);\n      }\n      if (fontSetClass) {\n        elem.classList.add(fontSetClass);\n      }\n      this._previousFontSetClass = fontSetClass;\n    }\n\n    if (this.fontIcon != this._previousFontIconClass) {\n      if (this._previousFontIconClass) {\n        elem.classList.remove(this._previousFontIconClass);\n      }\n      if (this.fontIcon) {\n        elem.classList.add(this.fontIcon);\n      }\n      this._previousFontIconClass = this.fontIcon;\n    }\n  }\n\n  /**\n   * Cleans up a value to be used as a fontIcon or fontSet.\n   * Since the value ends up being assigned as a CSS class, we\n   * have to trim the value and omit space-separated values.\n   */\n  private _cleanupFontValue(value: string) {\n    return typeof value === 'string' ? value.trim().split(' ')[0] : value;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatIcon} from './icon';\n\n\n@NgModule({\n  imports: [MatCommonModule],\n  exports: [MatIcon, MatCommonModule],\n  declarations: [MatIcon],\n})\nexport class MatIconModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {ESCAPE, UP_ARROW} from '@angular/cdk/keycodes';\nimport {\n  Overlay,\n  OverlayConfig,\n  OverlayRef,\n  PositionStrategy,\n  ScrollStrategy,\n} from '@angular/cdk/overlay';\nimport {ComponentPortal, ComponentType} from '@angular/cdk/portal';\nimport {DOCUMENT} from '@angular/common';\nimport {\n  AfterViewInit,\n  ChangeDetectionStrategy,\n  Component,\n  ComponentRef,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  Output,\n  ViewChild,\n  ViewContainerRef,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {\n  CanColor,\n  CanColorCtor,\n  DateAdapter,\n  mixinColor,\n  ThemePalette,\n} from '@angular/material/core';\nimport {MatDialog, MatDialogRef} from '@angular/material/dialog';\nimport {merge, Subject, Subscription} from 'rxjs';\nimport {filter, take} from 'rxjs/operators';\nimport {MatCalendar} from './calendar';\nimport {matDatepickerAnimations} from './datepicker-animations';\nimport {createMissingDateImplError} from './datepicker-errors';\nimport {MatDatepickerInput} from './datepicker-input';\n\n/** Used to generate a unique ID for each datepicker instance. */\nlet datepickerUid = 0;\n\n/** Injection token that determines the scroll handling while the calendar is open. */\nexport const MAT_DATEPICKER_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mat-datepicker-scroll-strategy');\n\n/** @docs-private */\nexport function MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY(overlay: Overlay): () => ScrollStrategy {\n  return () => overlay.scrollStrategies.reposition();\n}\n\n/** @docs-private */\nexport const MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY_PROVIDER = {\n  provide: MAT_DATEPICKER_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY,\n};\n\n// Boilerplate for applying mixins to MatDatepickerContent.\n/** @docs-private */\nexport class MatDatepickerContentBase {\n  constructor(public _elementRef: ElementRef) { }\n}\nexport const _MatDatepickerContentMixinBase: CanColorCtor & typeof MatDatepickerContentBase =\n    mixinColor(MatDatepickerContentBase);\n\n/**\n * Component used as the content for the datepicker dialog and popup. We use this instead of using\n * MatCalendar directly as the content so we can control the initial focus. This also gives us a\n * place to put additional features of the popup that are not part of the calendar itself in the\n * future. (e.g. confirmation buttons).\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-datepicker-content',\n  templateUrl: 'datepicker-content.html',\n  styleUrls: ['datepicker-content.css'],\n  host: {\n    'class': 'mat-datepicker-content',\n    '[@transformPanel]': '\"enter\"',\n    '[class.mat-datepicker-content-touch]': 'datepicker.touchUi',\n  },\n  animations: [\n    matDatepickerAnimations.transformPanel,\n    matDatepickerAnimations.fadeInCalendar,\n  ],\n  exportAs: 'matDatepickerContent',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  inputs: ['color'],\n})\nexport class MatDatepickerContent<D> extends _MatDatepickerContentMixinBase\n  implements AfterViewInit, CanColor {\n\n  /** Reference to the internal calendar component. */\n  @ViewChild(MatCalendar) _calendar: MatCalendar<D>;\n\n  /** Reference to the datepicker that created the overlay. */\n  datepicker: MatDatepicker<D>;\n\n  /** Whether the datepicker is above or below the input. */\n  _isAbove: boolean;\n\n  constructor(elementRef: ElementRef) {\n    super(elementRef);\n  }\n\n  ngAfterViewInit() {\n    this._calendar.focusActiveCell();\n  }\n}\n\n\n// TODO(mmalerba): We use a component instead of a directive here so the user can use implicit\n// template reference variables (e.g. #d vs #d=\"matDatepicker\"). We can change this to a directive\n// if angular adds support for `exportAs: '$implicit'` on directives.\n/** Component responsible for managing the datepicker popup/dialog. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-datepicker',\n  template: '',\n  exportAs: 'matDatepicker',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatDatepicker<D> implements OnDestroy, CanColor {\n  /** An input indicating the type of the custom header component for the calendar, if set. */\n  @Input() calendarHeaderComponent: ComponentType<any>;\n\n  /** The date to open the calendar to initially. */\n  @Input()\n  get startAt(): D | null {\n    // If an explicit startAt is set we start there, otherwise we start at whatever the currently\n    // selected value is.\n    return this._startAt || (this._datepickerInput ? this._datepickerInput.value : null);\n  }\n  set startAt(value: D | null) {\n    this._startAt = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _startAt: D | null;\n\n  /** The view that the calendar should start in. */\n  @Input() startView: 'month' | 'year' | 'multi-year' = 'month';\n\n  /** Color palette to use on the datepicker's calendar. */\n  @Input()\n  get color(): ThemePalette {\n    return this._color ||\n        (this._datepickerInput ? this._datepickerInput._getThemePalette() : undefined);\n  }\n  set color(value: ThemePalette) {\n    this._color = value;\n  }\n  _color: ThemePalette;\n\n  /**\n   * Whether the calendar UI is in touch mode. In touch mode the calendar opens in a dialog rather\n   * than a popup and elements have more padding to allow for bigger touch targets.\n   */\n  @Input()\n  get touchUi(): boolean { return this._touchUi; }\n  set touchUi(value: boolean) {\n    this._touchUi = coerceBooleanProperty(value);\n  }\n  private _touchUi = false;\n\n  /** Whether the datepicker pop-up should be disabled. */\n  @Input()\n  get disabled(): boolean {\n    return this._disabled === undefined && this._datepickerInput ?\n        this._datepickerInput.disabled : !!this._disabled;\n  }\n  set disabled(value: boolean) {\n    const newValue = coerceBooleanProperty(value);\n\n    if (newValue !== this._disabled) {\n      this._disabled = newValue;\n      this._disabledChange.next(newValue);\n    }\n  }\n  private _disabled: boolean;\n\n  /**\n   * Emits selected year in multiyear view.\n   * This doesn't imply a change on the selected date.\n   */\n  @Output() readonly yearSelected: EventEmitter<D> = new EventEmitter<D>();\n\n  /**\n   * Emits selected month in year view.\n   * This doesn't imply a change on the selected date.\n   */\n  @Output() readonly monthSelected: EventEmitter<D> = new EventEmitter<D>();\n\n  /** Classes to be passed to the date picker panel. Supports the same syntax as `ngClass`. */\n  @Input() panelClass: string | string[];\n\n  /** Emits when the datepicker has been opened. */\n  @Output('opened') openedStream: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Emits when the datepicker has been closed. */\n  @Output('closed') closedStream: EventEmitter<void> = new EventEmitter<void>();\n\n\n  /** Whether the calendar is open. */\n  @Input()\n  get opened(): boolean { return this._opened; }\n  set opened(value: boolean) { value ? this.open() : this.close(); }\n  private _opened = false;\n\n  /** The id for the datepicker calendar. */\n  id: string = `mat-datepicker-${datepickerUid++}`;\n\n  /** The currently selected date. */\n  get _selected(): D | null { return this._validSelected; }\n  set _selected(value: D | null) { this._validSelected = value; }\n  private _validSelected: D | null = null;\n\n  /** The minimum selectable date. */\n  get _minDate(): D | null {\n    return this._datepickerInput && this._datepickerInput.min;\n  }\n\n  /** The maximum selectable date. */\n  get _maxDate(): D | null {\n    return this._datepickerInput && this._datepickerInput.max;\n  }\n\n  get _dateFilter(): (date: D | null) => boolean {\n    return this._datepickerInput && this._datepickerInput._dateFilter;\n  }\n\n  /** A reference to the overlay when the calendar is opened as a popup. */\n  _popupRef: OverlayRef;\n\n  /** A reference to the dialog when the calendar is opened as a dialog. */\n  private _dialogRef: MatDialogRef<MatDatepickerContent<D>> | null;\n\n  /** A portal containing the calendar for this datepicker. */\n  private _calendarPortal: ComponentPortal<MatDatepickerContent<D>>;\n\n  /** Reference to the component instantiated in popup mode. */\n  private _popupComponentRef: ComponentRef<MatDatepickerContent<D>> | null;\n\n  /** The element that was focused before the datepicker was opened. */\n  private _focusedElementBeforeOpen: HTMLElement | null = null;\n\n  /** Subscription to value changes in the associated input element. */\n  private _inputSubscription = Subscription.EMPTY;\n\n  /** The input element this datepicker is associated with. */\n  _datepickerInput: MatDatepickerInput<D>;\n\n  /** Emits when the datepicker is disabled. */\n  readonly _disabledChange = new Subject<boolean>();\n\n  /** Emits new selected date when selected date changes. */\n  readonly _selectedChanged = new Subject<D>();\n\n  constructor(private _dialog: MatDialog,\n              private _overlay: Overlay,\n              private _ngZone: NgZone,\n              private _viewContainerRef: ViewContainerRef,\n              @Inject(MAT_DATEPICKER_SCROLL_STRATEGY) private _scrollStrategy,\n              @Optional() private _dateAdapter: DateAdapter<D>,\n              @Optional() private _dir: Directionality,\n              @Optional() @Inject(DOCUMENT) private _document: any) {\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n  }\n\n  ngOnDestroy() {\n    this.close();\n    this._inputSubscription.unsubscribe();\n    this._disabledChange.complete();\n\n    if (this._popupRef) {\n      this._popupRef.dispose();\n      this._popupComponentRef = null;\n    }\n  }\n\n  /** Selects the given date */\n  select(date: D): void {\n    let oldValue = this._selected;\n    this._selected = date;\n    if (!this._dateAdapter.sameDate(oldValue, this._selected)) {\n      this._selectedChanged.next(date);\n    }\n  }\n\n  /** Emits the selected year in multiyear view */\n  _selectYear(normalizedYear: D): void {\n    this.yearSelected.emit(normalizedYear);\n  }\n\n  /** Emits selected month in year view */\n  _selectMonth(normalizedMonth: D): void {\n    this.monthSelected.emit(normalizedMonth);\n  }\n\n  /**\n   * Register an input with this datepicker.\n   * @param input The datepicker input to register with this datepicker.\n   */\n  _registerInput(input: MatDatepickerInput<D>): void {\n    if (this._datepickerInput) {\n      throw Error('A MatDatepicker can only be associated with a single input.');\n    }\n    this._datepickerInput = input;\n    this._inputSubscription =\n        this._datepickerInput._valueChange.subscribe((value: D | null) => this._selected = value);\n  }\n\n  /** Open the calendar. */\n  open(): void {\n    if (this._opened || this.disabled) {\n      return;\n    }\n    if (!this._datepickerInput) {\n      throw Error('Attempted to open an MatDatepicker with no associated input.');\n    }\n    if (this._document) {\n      this._focusedElementBeforeOpen = this._document.activeElement;\n    }\n\n    this.touchUi ? this._openAsDialog() : this._openAsPopup();\n    this._opened = true;\n    this.openedStream.emit();\n  }\n\n  /** Close the calendar. */\n  close(): void {\n    if (!this._opened) {\n      return;\n    }\n    if (this._popupRef && this._popupRef.hasAttached()) {\n      this._popupRef.detach();\n    }\n    if (this._dialogRef) {\n      this._dialogRef.close();\n      this._dialogRef = null;\n    }\n    if (this._calendarPortal && this._calendarPortal.isAttached) {\n      this._calendarPortal.detach();\n    }\n\n    const completeClose = () => {\n      // The `_opened` could've been reset already if\n      // we got two events in quick succession.\n      if (this._opened) {\n        this._opened = false;\n        this.closedStream.emit();\n        this._focusedElementBeforeOpen = null;\n      }\n    };\n\n    if (this._focusedElementBeforeOpen &&\n      typeof this._focusedElementBeforeOpen.focus === 'function') {\n      // Because IE moves focus asynchronously, we can't count on it being restored before we've\n      // marked the datepicker as closed. If the event fires out of sequence and the element that\n      // we're refocusing opens the datepicker on focus, the user could be stuck with not being\n      // able to close the calendar at all. We work around it by making the logic, that marks\n      // the datepicker as closed, async as well.\n      this._focusedElementBeforeOpen.focus();\n      setTimeout(completeClose);\n    } else {\n      completeClose();\n    }\n  }\n\n  /** Open the calendar as a dialog. */\n  private _openAsDialog(): void {\n    // Usually this would be handled by `open` which ensures that we can only have one overlay\n    // open at a time, however since we reset the variables in async handlers some overlays\n    // may slip through if the user opens and closes multiple times in quick succession (e.g.\n    // by holding down the enter key).\n    if (this._dialogRef) {\n      this._dialogRef.close();\n    }\n\n    this._dialogRef = this._dialog.open<MatDatepickerContent<D>>(MatDatepickerContent, {\n      direction: this._dir ? this._dir.value : 'ltr',\n      viewContainerRef: this._viewContainerRef,\n      panelClass: 'mat-datepicker-dialog',\n    });\n\n    this._dialogRef.afterClosed().subscribe(() => this.close());\n    this._dialogRef.componentInstance.datepicker = this;\n    this._setColor();\n  }\n\n  /** Open the calendar as a popup. */\n  private _openAsPopup(): void {\n    if (!this._calendarPortal) {\n      this._calendarPortal = new ComponentPortal<MatDatepickerContent<D>>(MatDatepickerContent,\n                                                                          this._viewContainerRef);\n    }\n\n    if (!this._popupRef) {\n      this._createPopup();\n    }\n\n    if (!this._popupRef.hasAttached()) {\n      this._popupComponentRef = this._popupRef.attach(this._calendarPortal);\n      this._popupComponentRef.instance.datepicker = this;\n      this._setColor();\n\n      // Update the position once the calendar has rendered.\n      this._ngZone.onStable.asObservable().pipe(take(1)).subscribe(() => {\n        this._popupRef.updatePosition();\n      });\n    }\n  }\n\n  /** Create the popup. */\n  private _createPopup(): void {\n    const overlayConfig = new OverlayConfig({\n      positionStrategy: this._createPopupPositionStrategy(),\n      hasBackdrop: true,\n      backdropClass: 'mat-overlay-transparent-backdrop',\n      direction: this._dir,\n      scrollStrategy: this._scrollStrategy(),\n      panelClass: 'mat-datepicker-popup',\n    });\n\n    this._popupRef = this._overlay.create(overlayConfig);\n    this._popupRef.overlayElement.setAttribute('role', 'dialog');\n\n    merge(\n      this._popupRef.backdropClick(),\n      this._popupRef.detachments(),\n      this._popupRef.keydownEvents().pipe(filter(event => {\n        // Closing on alt + up is only valid when there's an input associated with the datepicker.\n        return event.keyCode === ESCAPE ||\n               (this._datepickerInput && event.altKey && event.keyCode === UP_ARROW);\n      }))\n    ).subscribe(() => this.close());\n  }\n\n  /** Create the popup PositionStrategy. */\n  private _createPopupPositionStrategy(): PositionStrategy {\n    return this._overlay.position()\n      .flexibleConnectedTo(this._datepickerInput.getConnectedOverlayOrigin())\n      .withTransformOriginOn('.mat-datepicker-content')\n      .withFlexibleDimensions(false)\n      .withViewportMargin(8)\n      .withLockedPosition()\n      .withPositions([\n        {\n          originX: 'start',\n          originY: 'bottom',\n          overlayX: 'start',\n          overlayY: 'top'\n        },\n        {\n          originX: 'start',\n          originY: 'top',\n          overlayX: 'start',\n          overlayY: 'bottom'\n        },\n        {\n          originX: 'end',\n          originY: 'bottom',\n          overlayX: 'end',\n          overlayY: 'top'\n        },\n        {\n          originX: 'end',\n          originY: 'top',\n          overlayX: 'end',\n          overlayY: 'bottom'\n        }\n      ]);\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n\n  /** Passes the current theme color along to the calendar overlay. */\n  private _setColor(): void {\n    const color = this.color;\n    if (this._popupComponentRef) {\n      this._popupComponentRef.instance.color = color;\n    }\n    if (this._dialogRef) {\n      this._dialogRef.componentInstance.color = color;\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {DOWN_ARROW} from '@angular/cdk/keycodes';\nimport {\n  Directive,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  OnDestroy,\n  Optional,\n  Output,\n} from '@angular/core';\nimport {\n  AbstractControl,\n  ControlValueAccessor,\n  NG_VALIDATORS,\n  NG_VALUE_ACCESSOR,\n  ValidationErrors,\n  Validator,\n  ValidatorFn,\n  Validators,\n} from '@angular/forms';\nimport {DateAdapter, MAT_DATE_FORMATS, MatDateFormats, ThemePalette} from '@angular/material/core';\nimport {MatFormField} from '@angular/material/form-field';\nimport {MAT_INPUT_VALUE_ACCESSOR} from '@angular/material/input';\nimport {Subscription} from 'rxjs';\nimport {MatDatepicker} from './datepicker';\nimport {createMissingDateImplError} from './datepicker-errors';\n\n\nexport const MAT_DATEPICKER_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatDatepickerInput),\n  multi: true\n};\n\n\nexport const MAT_DATEPICKER_VALIDATORS: any = {\n  provide: NG_VALIDATORS,\n  useExisting: forwardRef(() => MatDatepickerInput),\n  multi: true\n};\n\n\n/**\n * An event used for datepicker input and change events. We don't always have access to a native\n * input or change event because the event may have been triggered by the user clicking on the\n * calendar popup. For consistency, we always use MatDatepickerInputEvent instead.\n */\nexport class MatDatepickerInputEvent<D> {\n  /** The new value for the target datepicker input. */\n  value: D | null;\n\n  constructor(\n    /** Reference to the datepicker input component that emitted the event. */\n    public target: MatDatepickerInput<D>,\n    /** Reference to the native input element associated with the datepicker input. */\n    public targetElement: HTMLElement) {\n    this.value = this.target.value;\n  }\n}\n\n\n/** Directive used to connect an input to a MatDatepicker. */\n@Directive({\n  selector: 'input[matDatepicker]',\n  providers: [\n    MAT_DATEPICKER_VALUE_ACCESSOR,\n    MAT_DATEPICKER_VALIDATORS,\n    {provide: MAT_INPUT_VALUE_ACCESSOR, useExisting: MatDatepickerInput},\n  ],\n  host: {\n    '[attr.aria-haspopup]': 'true',\n    '[attr.aria-owns]': '(_datepicker?.opened && _datepicker.id) || null',\n    '[attr.min]': 'min ? _dateAdapter.toIso8601(min) : null',\n    '[attr.max]': 'max ? _dateAdapter.toIso8601(max) : null',\n    '[disabled]': 'disabled',\n    '(input)': '_onInput($event.target.value)',\n    '(change)': '_onChange()',\n    '(blur)': '_onBlur()',\n    '(keydown)': '_onKeydown($event)',\n  },\n  exportAs: 'matDatepickerInput',\n})\nexport class MatDatepickerInput<D> implements ControlValueAccessor, OnDestroy, Validator {\n  /** The datepicker that this input is associated with. */\n  @Input()\n  set matDatepicker(value: MatDatepicker<D>) {\n    if (!value) {\n      return;\n    }\n\n    this._datepicker = value;\n    this._datepicker._registerInput(this);\n    this._datepickerSubscription.unsubscribe();\n\n    this._datepickerSubscription = this._datepicker._selectedChanged.subscribe((selected: D) => {\n      this.value = selected;\n      this._cvaOnChange(selected);\n      this._onTouched();\n      this.dateInput.emit(new MatDatepickerInputEvent(this, this._elementRef.nativeElement));\n      this.dateChange.emit(new MatDatepickerInputEvent(this, this._elementRef.nativeElement));\n    });\n  }\n  _datepicker: MatDatepicker<D>;\n\n  /** Function that can be used to filter out dates within the datepicker. */\n  @Input()\n  set matDatepickerFilter(value: (date: D | null) => boolean) {\n    this._dateFilter = value;\n    this._validatorOnChange();\n  }\n  _dateFilter: (date: D | null) => boolean;\n\n  /** The value of the input. */\n  @Input()\n  get value(): D | null { return this._value; }\n  set value(value: D | null) {\n    value = this._dateAdapter.deserialize(value);\n    this._lastValueValid = !value || this._dateAdapter.isValid(value);\n    value = this._getValidDateOrNull(value);\n    const oldDate = this.value;\n    this._value = value;\n    this._formatValue(value);\n\n    if (!this._dateAdapter.sameDate(oldDate, value)) {\n      this._valueChange.emit(value);\n    }\n  }\n  private _value: D | null;\n\n  /** The minimum valid date. */\n  @Input()\n  get min(): D | null { return this._min; }\n  set min(value: D | null) {\n    this._min = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n    this._validatorOnChange();\n  }\n  private _min: D | null;\n\n  /** The maximum valid date. */\n  @Input()\n  get max(): D | null { return this._max; }\n  set max(value: D | null) {\n    this._max = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n    this._validatorOnChange();\n  }\n  private _max: D | null;\n\n  /** Whether the datepicker-input is disabled. */\n  @Input()\n  get disabled(): boolean { return !!this._disabled; }\n  set disabled(value: boolean) {\n    const newValue = coerceBooleanProperty(value);\n    const element = this._elementRef.nativeElement;\n\n    if (this._disabled !== newValue) {\n      this._disabled = newValue;\n      this._disabledChange.emit(newValue);\n    }\n\n    // We need to null check the `blur` method, because it's undefined during SSR.\n    if (newValue && element.blur) {\n      // Normally, native input elements automatically blur if they turn disabled. This behavior\n      // is problematic, because it would mean that it triggers another change detection cycle,\n      // which then causes a changed after checked error if the input element was focused before.\n      element.blur();\n    }\n  }\n  private _disabled: boolean;\n\n  /** Emits when a `change` event is fired on this `<input>`. */\n  @Output() readonly dateChange: EventEmitter<MatDatepickerInputEvent<D>> =\n      new EventEmitter<MatDatepickerInputEvent<D>>();\n\n  /** Emits when an `input` event is fired on this `<input>`. */\n  @Output() readonly dateInput: EventEmitter<MatDatepickerInputEvent<D>> =\n      new EventEmitter<MatDatepickerInputEvent<D>>();\n\n  /** Emits when the value changes (either due to user input or programmatic change). */\n  _valueChange = new EventEmitter<D | null>();\n\n  /** Emits when the disabled state has changed */\n  _disabledChange = new EventEmitter<boolean>();\n\n  _onTouched = () => {};\n\n  private _cvaOnChange: (value: any) => void = () => {};\n\n  private _validatorOnChange = () => {};\n\n  private _datepickerSubscription = Subscription.EMPTY;\n\n  private _localeSubscription = Subscription.EMPTY;\n\n  /** The form control validator for whether the input parses. */\n  private _parseValidator: ValidatorFn = (): ValidationErrors | null => {\n    return this._lastValueValid ?\n        null : {'matDatepickerParse': {'text': this._elementRef.nativeElement.value}};\n  }\n\n  /** The form control validator for the min date. */\n  private _minValidator: ValidatorFn = (control: AbstractControl): ValidationErrors | null => {\n    const controlValue = this._getValidDateOrNull(this._dateAdapter.deserialize(control.value));\n    return (!this.min || !controlValue ||\n        this._dateAdapter.compareDate(this.min, controlValue) <= 0) ?\n        null : {'matDatepickerMin': {'min': this.min, 'actual': controlValue}};\n  }\n\n  /** The form control validator for the max date. */\n  private _maxValidator: ValidatorFn = (control: AbstractControl): ValidationErrors | null => {\n    const controlValue = this._getValidDateOrNull(this._dateAdapter.deserialize(control.value));\n    return (!this.max || !controlValue ||\n        this._dateAdapter.compareDate(this.max, controlValue) >= 0) ?\n        null : {'matDatepickerMax': {'max': this.max, 'actual': controlValue}};\n  }\n\n  /** The form control validator for the date filter. */\n  private _filterValidator: ValidatorFn = (control: AbstractControl): ValidationErrors | null => {\n    const controlValue = this._getValidDateOrNull(this._dateAdapter.deserialize(control.value));\n    return !this._dateFilter || !controlValue || this._dateFilter(controlValue) ?\n        null : {'matDatepickerFilter': true};\n  }\n\n  /** The combined form control validator for this input. */\n  private _validator: ValidatorFn | null =\n      Validators.compose(\n          [this._parseValidator, this._minValidator, this._maxValidator, this._filterValidator]);\n\n  /** Whether the last value set on the input was valid. */\n  private _lastValueValid = false;\n\n  constructor(\n      private _elementRef: ElementRef<HTMLInputElement>,\n      @Optional() public _dateAdapter: DateAdapter<D>,\n      @Optional() @Inject(MAT_DATE_FORMATS) private _dateFormats: MatDateFormats,\n      @Optional() private _formField: MatFormField) {\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n    if (!this._dateFormats) {\n      throw createMissingDateImplError('MAT_DATE_FORMATS');\n    }\n\n    // Update the displayed date when the locale changes.\n    this._localeSubscription = _dateAdapter.localeChanges.subscribe(() => {\n      this.value = this.value;\n    });\n  }\n\n  ngOnDestroy() {\n    this._datepickerSubscription.unsubscribe();\n    this._localeSubscription.unsubscribe();\n    this._valueChange.complete();\n    this._disabledChange.complete();\n  }\n\n  /** @docs-private */\n  registerOnValidatorChange(fn: () => void): void {\n    this._validatorOnChange = fn;\n  }\n\n  /** @docs-private */\n  validate(c: AbstractControl): ValidationErrors | null {\n    return this._validator ? this._validator(c) : null;\n  }\n\n  /**\n   * @deprecated\n   * @breaking-change 7.0.0 Use `getConnectedOverlayOrigin` instead\n   */\n  getPopupConnectionElementRef(): ElementRef {\n    return this.getConnectedOverlayOrigin();\n  }\n\n  /**\n   * Gets the element that the datepicker popup should be connected to.\n   * @return The element to connect the popup to.\n   */\n  getConnectedOverlayOrigin(): ElementRef {\n    return this._formField ? this._formField.getConnectedOverlayOrigin() : this._elementRef;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  writeValue(value: D): void {\n    this.value = value;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnChange(fn: (value: any) => void): void {\n    this._cvaOnChange = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnTouched(fn: () => void): void {\n    this._onTouched = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n  }\n\n  _onKeydown(event: KeyboardEvent) {\n    const isAltDownArrow = event.altKey && event.keyCode === DOWN_ARROW;\n\n    if (this._datepicker && isAltDownArrow && !this._elementRef.nativeElement.readOnly) {\n      this._datepicker.open();\n      event.preventDefault();\n    }\n  }\n\n  _onInput(value: string) {\n    let date = this._dateAdapter.parse(value, this._dateFormats.parse.dateInput);\n    this._lastValueValid = !date || this._dateAdapter.isValid(date);\n    date = this._getValidDateOrNull(date);\n\n    if (!this._dateAdapter.sameDate(date, this._value)) {\n      this._value = date;\n      this._cvaOnChange(date);\n      this._valueChange.emit(date);\n      this.dateInput.emit(new MatDatepickerInputEvent(this, this._elementRef.nativeElement));\n    }\n  }\n\n  _onChange() {\n    this.dateChange.emit(new MatDatepickerInputEvent(this, this._elementRef.nativeElement));\n  }\n\n  /** Returns the palette used by the input's form field, if any. */\n  _getThemePalette(): ThemePalette {\n    return this._formField ? this._formField.color : undefined;\n  }\n\n  /** Handles blur events on the input. */\n  _onBlur() {\n    // Reformat the input only if we have a valid value.\n    if (this.value) {\n      this._formatValue(this.value);\n    }\n\n    this._onTouched();\n  }\n\n  /** Formats a value and sets it on the input element. */\n  private _formatValue(value: D | null) {\n    this._elementRef.nativeElement.value =\n        value ? this._dateAdapter.format(value, this._dateFormats.display.dateInput) : '';\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  AfterContentInit,\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  Directive,\n  Input,\n  OnChanges,\n  OnDestroy,\n  SimpleChanges,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {merge, of as observableOf, Subscription} from 'rxjs';\nimport {MatDatepicker} from './datepicker';\nimport {MatDatepickerIntl} from './datepicker-intl';\n\n\n/** Can be used to override the icon of a `matDatepickerToggle`. */\n@Directive({\n  selector: '[matDatepickerToggleIcon]'\n})\nexport class MatDatepickerToggleIcon {}\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-datepicker-toggle',\n  templateUrl: 'datepicker-toggle.html',\n  styleUrls: ['datepicker-toggle.css'],\n  host: {\n    'class': 'mat-datepicker-toggle',\n    // Clear out the native tabindex here since we forward it to the underlying button\n    '[attr.tabindex]': 'null',\n    '[class.mat-datepicker-toggle-active]': 'datepicker && datepicker.opened',\n    '[class.mat-accent]': 'datepicker && datepicker.color === \"accent\"',\n    '[class.mat-warn]': 'datepicker && datepicker.color === \"warn\"',\n  },\n  exportAs: 'matDatepickerToggle',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatDatepickerToggle<D> implements AfterContentInit, OnChanges, OnDestroy {\n  private _stateChanges = Subscription.EMPTY;\n\n  /** Datepicker instance that the button will toggle. */\n  @Input('for') datepicker: MatDatepicker<D>;\n\n  /** Tabindex for the toggle. */\n  @Input() tabIndex: number | null;\n\n  /** Whether the toggle button is disabled. */\n  @Input()\n  get disabled(): boolean {\n    return this._disabled === undefined ? this.datepicker.disabled : !!this._disabled;\n  }\n  set disabled(value: boolean) {\n    this._disabled = coerceBooleanProperty(value);\n  }\n  private _disabled: boolean;\n\n  /** Custom icon set by the consumer. */\n  @ContentChild(MatDatepickerToggleIcon) _customIcon: MatDatepickerToggleIcon;\n\n  constructor(\n    public _intl: MatDatepickerIntl,\n    private _changeDetectorRef: ChangeDetectorRef,\n    @Attribute('tabindex') defaultTabIndex: string) {\n\n    const parsedTabIndex = Number(defaultTabIndex);\n    this.tabIndex = (parsedTabIndex || parsedTabIndex === 0) ? parsedTabIndex : null;\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    if (changes.datepicker) {\n      this._watchStateChanges();\n    }\n  }\n\n  ngOnDestroy() {\n    this._stateChanges.unsubscribe();\n  }\n\n  ngAfterContentInit() {\n    this._watchStateChanges();\n  }\n\n  _open(event: Event): void {\n    if (this.datepicker && !this.disabled) {\n      this.datepicker.open();\n      event.stopPropagation();\n    }\n  }\n\n  private _watchStateChanges() {\n    const datepickerDisabled = this.datepicker ? this.datepicker._disabledChange : observableOf();\n    const inputDisabled = this.datepicker && this.datepicker._datepickerInput ?\n        this.datepicker._datepickerInput._disabledChange : observableOf();\n    const datepickerToggled = this.datepicker ?\n        merge(this.datepicker.openedStream, this.datepicker.closedStream) :\n        observableOf();\n\n    this._stateChanges.unsubscribe();\n    this._stateChanges = merge(\n      this._intl.changes,\n      datepickerDisabled,\n      inputDisabled,\n      datepickerToggled\n    ).subscribe(() => this._changeDetectorRef.markForCheck());\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {A11yModule} from '@angular/cdk/a11y';\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatButtonModule} from '@angular/material/button';\nimport {MatDialogModule} from '@angular/material/dialog';\nimport {MatCalendar, MatCalendarHeader} from './calendar';\nimport {MatCalendarBody} from './calendar-body';\nimport {\n  MatDatepicker,\n  MatDatepickerContent,\n  MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY_PROVIDER,\n} from './datepicker';\nimport {MatDatepickerInput} from './datepicker-input';\nimport {MatDatepickerIntl} from './datepicker-intl';\nimport {MatDatepickerToggle, MatDatepickerToggleIcon} from './datepicker-toggle';\nimport {MatMonthView} from './month-view';\nimport {MatMultiYearView} from './multi-year-view';\nimport {MatYearView} from './year-view';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatButtonModule,\n    MatDialogModule,\n    OverlayModule,\n    A11yModule,\n    PortalModule,\n  ],\n  exports: [\n    MatCalendar,\n    MatCalendarBody,\n    MatDatepicker,\n    MatDatepickerContent,\n    MatDatepickerInput,\n    MatDatepickerToggle,\n    MatDatepickerToggleIcon,\n    MatMonthView,\n    MatYearView,\n    MatMultiYearView,\n    MatCalendarHeader,\n  ],\n  declarations: [\n    MatCalendar,\n    MatCalendarBody,\n    MatDatepicker,\n    MatDatepickerContent,\n    MatDatepickerInput,\n    MatDatepickerToggle,\n    MatDatepickerToggleIcon,\n    MatMonthView,\n    MatYearView,\n    MatMultiYearView,\n    MatCalendarHeader,\n  ],\n  providers: [\n    MatDatepickerIntl,\n    MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY_PROVIDER,\n  ],\n  entryComponents: [\n    MatDatepickerContent,\n    MatCalendarHeader,\n  ]\n})\nexport class MatDatepickerModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ChangeDetectionStrategy, Component, Input, ViewEncapsulation} from '@angular/core';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-divider',\n  host: {\n    'role': 'separator',\n    '[attr.aria-orientation]': 'vertical ? \"vertical\" : \"horizontal\"',\n    '[class.mat-divider-vertical]': 'vertical',\n    '[class.mat-divider-horizontal]': '!vertical',\n    '[class.mat-divider-inset]': 'inset',\n    'class': 'mat-divider'\n  },\n  template: '',\n  styleUrls: ['divider.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatDivider {\n  /** Whether the divider is vertically aligned. */\n  @Input()\n  get vertical(): boolean { return this._vertical; }\n  set vertical(value: boolean) { this._vertical = coerceBooleanProperty(value); }\n  private _vertical: boolean = false;\n\n  /** Whether the divider is an inset divider. */\n  @Input()\n  get inset(): boolean { return this._inset; }\n  set inset(value: boolean) { this._inset = coerceBooleanProperty(value); }\n  private _inset: boolean = false;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatDivider} from './divider';\n\n\n@NgModule({\n  imports: [MatCommonModule, CommonModule],\n  exports: [MatDivider, MatCommonModule],\n  declarations: [MatDivider],\n})\nexport class MatDividerModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {InjectionToken} from '@angular/core';\nimport {CdkAccordion} from '@angular/cdk/accordion';\n\n/** MatAccordion's display modes. */\nexport type MatAccordionDisplayMode = 'default' | 'flat';\n\n/**\n * Base interface for a `MatAccordion`.\n * @docs-private\n */\nexport interface MatAccordionBase extends CdkAccordion {\n  /** Whether the expansion indicator should be hidden. */\n  hideToggle: boolean;\n\n  /** Display mode used for all expansion panels in the accordion. */\n  displayMode: MatAccordionDisplayMode;\n\n  /** Handles keyboard events coming in from the panel headers. */\n  _handleHeaderKeydown: (event: KeyboardEvent) => void;\n\n  /** Handles focus events on the panel headers. */\n  _handleHeaderFocus: (header: any) => void;\n}\n\n\n/**\n * Token used to provide a `MatAccordion` to `MatExpansionPanel`.\n * Used primarily to avoid circular imports between `MatAccordion` and `MatExpansionPanel`.\n */\nexport const MAT_ACCORDION = new InjectionToken<MatAccordionBase>('MAT_ACCORDION');\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, TemplateRef} from '@angular/core';\n\n/**\n * Expansion panel content that will be rendered lazily\n * after the panel is opened for the first time.\n */\n@Directive({\n  selector: 'ng-template[matExpansionPanelContent]'\n})\nexport class MatExpansionPanelContent {\n  constructor(public _template: TemplateRef<any>) {}\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {AnimationEvent} from '@angular/animations';\nimport {CdkAccordionItem} from '@angular/cdk/accordion';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {UniqueSelectionDispatcher} from '@angular/cdk/collections';\nimport {TemplatePortal} from '@angular/cdk/portal';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  Directive,\n  EventEmitter,\n  ElementRef,\n  Input,\n  Inject,\n  OnChanges,\n  OnDestroy,\n  Optional,\n  Output,\n  SimpleChanges,\n  SkipSelf,\n  ViewContainerRef,\n  ViewEncapsulation,\n  ViewChild,\n} from '@angular/core';\nimport {DOCUMENT} from '@angular/common';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\nimport {Subject} from 'rxjs';\nimport {filter, startWith, take} from 'rxjs/operators';\nimport {matExpansionAnimations} from './expansion-animations';\nimport {MatExpansionPanelContent} from './expansion-panel-content';\nimport {MAT_ACCORDION, MatAccordionBase} from './accordion-base';\n\n// TODO(devversion): workaround for https://github.com/angular/material2/issues/12760\nexport const _CdkAccordionItem = CdkAccordionItem;\n\n/** MatExpansionPanel's states. */\nexport type MatExpansionPanelState = 'expanded' | 'collapsed';\n\n/** Counter for generating unique element ids. */\nlet uniqueId = 0;\n\n/**\n * `<mat-expansion-panel>`\n *\n * This component can be used as a single element to show expandable content, or as one of\n * multiple children of an element with the MatAccordion directive attached.\n */\n@Component({\n  moduleId: module.id,\n  styleUrls: ['./expansion-panel.css'],\n  selector: 'mat-expansion-panel',\n  exportAs: 'matExpansionPanel',\n  templateUrl: './expansion-panel.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  inputs: ['disabled', 'expanded'],\n  outputs: ['opened', 'closed', 'expandedChange'],\n  animations: [matExpansionAnimations.bodyExpansion],\n  providers: [\n    // Provide MatAccordion as undefined to prevent nested expansion panels from registering\n    // to the same accordion.\n    {provide: MAT_ACCORDION, useValue: undefined},\n  ],\n  host: {\n    'class': 'mat-expansion-panel',\n    '[class.mat-expanded]': 'expanded',\n    '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"',\n    '[class.mat-expansion-panel-spacing]': '_hasSpacing()',\n  }\n})\nexport class MatExpansionPanel extends CdkAccordionItem implements AfterContentInit, OnChanges,\n  OnDestroy {\n\n  // @breaking-change 8.0.0 Remove `| undefined` from here\n  // when the `_document` constructor param is required.\n  private _document: Document | undefined;\n\n  /** Whether the toggle indicator should be hidden. */\n  @Input()\n  get hideToggle(): boolean {\n    return this._hideToggle || (this.accordion && this.accordion.hideToggle);\n  }\n  set hideToggle(value: boolean) {\n    this._hideToggle = coerceBooleanProperty(value);\n  }\n  private _hideToggle = false;\n\n  /** An event emitted after the body's expansion animation happens. */\n  @Output() afterExpand = new EventEmitter<void>();\n\n  /** An event emitted after the body's collapse animation happens. */\n  @Output() afterCollapse = new EventEmitter<void>();\n\n  /** Stream that emits for changes in `@Input` properties. */\n  readonly _inputChanges = new Subject<SimpleChanges>();\n\n  /** Optionally defined accordion the expansion panel belongs to. */\n  accordion: MatAccordionBase;\n\n  /** Content that will be rendered lazily. */\n  @ContentChild(MatExpansionPanelContent) _lazyContent: MatExpansionPanelContent;\n\n  /** Element containing the panel's user-provided content. */\n  @ViewChild('body') _body: ElementRef<HTMLElement>;\n\n  /** Portal holding the user's content. */\n  _portal: TemplatePortal;\n\n  /** ID for the associated header element. Used for a11y labelling. */\n  _headerId = `mat-expansion-panel-header-${uniqueId++}`;\n\n  constructor(@Optional() @SkipSelf() @Inject(MAT_ACCORDION) accordion: MatAccordionBase,\n              _changeDetectorRef: ChangeDetectorRef,\n              _uniqueSelectionDispatcher: UniqueSelectionDispatcher,\n              private _viewContainerRef: ViewContainerRef,\n              // @breaking-change 8.0.0 _document and _animationMode to be made required\n              @Inject(DOCUMENT) _document?: any,\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode?: string) {\n    super(accordion, _changeDetectorRef, _uniqueSelectionDispatcher);\n    this.accordion = accordion;\n    this._document = _document;\n  }\n\n  /** Determines whether the expansion panel should have spacing between it and its siblings. */\n  _hasSpacing(): boolean {\n    if (this.accordion) {\n      // We don't need to subscribe to the `stateChanges` of the parent accordion because each time\n      // the [displayMode] input changes, the change detection will also cover the host bindings\n      // of this expansion panel.\n      return (this.expanded ? this.accordion.displayMode : this._getExpandedState()) === 'default';\n    }\n    return false;\n  }\n\n  /** Gets the expanded state string. */\n  _getExpandedState(): MatExpansionPanelState {\n    return this.expanded ? 'expanded' : 'collapsed';\n  }\n\n  ngAfterContentInit() {\n    if (this._lazyContent) {\n      // Render the content as soon as the panel becomes open.\n      this.opened.pipe(\n        startWith<void>(null!),\n        filter(() => this.expanded && !this._portal),\n        take(1)\n      ).subscribe(() => {\n        this._portal = new TemplatePortal(this._lazyContent._template, this._viewContainerRef);\n      });\n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    this._inputChanges.next(changes);\n  }\n\n  ngOnDestroy() {\n    super.ngOnDestroy();\n    this._inputChanges.complete();\n  }\n\n  _bodyAnimation(event: AnimationEvent) {\n    const classList = event.element.classList;\n    const cssClass = 'mat-expanded';\n    const {phaseName, toState, fromState} = event;\n\n    // Toggle the body's `overflow: hidden` class when closing starts or when expansion ends in\n    // order to prevent the cases where switching too early would cause the animation to jump.\n    // Note that we do it directly on the DOM element to avoid the slight delay that comes\n    // with doing it via change detection.\n    if (phaseName === 'done' && toState === 'expanded') {\n      classList.add(cssClass);\n    }\n    if (phaseName === 'start' && toState === 'collapsed') {\n      classList.remove(cssClass);\n    }\n\n    if (phaseName === 'done' && toState === 'expanded' && fromState !== 'void') {\n      this.afterExpand.emit();\n    }\n    if (phaseName === 'done' && toState === 'collapsed' && fromState !== 'void') {\n      this.afterCollapse.emit();\n    }\n  }\n\n  /** Checks whether the expansion panel's content contains the currently-focused element. */\n  _containsFocus(): boolean {\n    if (this._body && this._document) {\n      const focusedElement = this._document.activeElement;\n      const bodyElement = this._body.nativeElement;\n      return focusedElement === bodyElement || bodyElement.contains(focusedElement);\n    }\n\n    return false;\n  }\n}\n\n@Directive({\n  selector: 'mat-action-row',\n  host: {\n    class: 'mat-action-row'\n  }\n})\nexport class MatExpansionPanelActionRow {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor, FocusableOption, FocusOrigin} from '@angular/cdk/a11y';\nimport {ENTER, SPACE} from '@angular/cdk/keycodes';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  Directive,\n  ElementRef,\n  Host,\n  Input,\n  OnDestroy,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {merge, Subscription, EMPTY} from 'rxjs';\nimport {filter} from 'rxjs/operators';\nimport {matExpansionAnimations} from './expansion-animations';\nimport {MatExpansionPanel} from './expansion-panel';\n\n\n/**\n * `<mat-expansion-panel-header>`\n *\n * This component corresponds to the header element of an `<mat-expansion-panel>`.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-expansion-panel-header',\n  styleUrls: ['./expansion-panel-header.css'],\n  templateUrl: './expansion-panel-header.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  animations: [\n    matExpansionAnimations.indicatorRotate,\n    matExpansionAnimations.expansionHeaderHeight\n  ],\n  host: {\n    'class': 'mat-expansion-panel-header',\n    'role': 'button',\n    '[attr.id]': 'panel._headerId',\n    '[attr.tabindex]': 'disabled ? -1 : 0',\n    '[attr.aria-controls]': '_getPanelId()',\n    '[attr.aria-expanded]': '_isExpanded()',\n    '[attr.aria-disabled]': 'panel.disabled',\n    '[class.mat-expanded]': '_isExpanded()',\n    '(click)': '_toggle()',\n    '(keydown)': '_keydown($event)',\n    '[@expansionHeight]': `{\n        value: _getExpandedState(),\n        params: {\n          collapsedHeight: collapsedHeight,\n          expandedHeight: expandedHeight\n        }\n    }`,\n  },\n})\nexport class MatExpansionPanelHeader implements OnDestroy, FocusableOption {\n  private _parentChangeSubscription = Subscription.EMPTY;\n\n  constructor(\n      @Host() public panel: MatExpansionPanel,\n      private _element: ElementRef,\n      private _focusMonitor: FocusMonitor,\n      private _changeDetectorRef: ChangeDetectorRef) {\n\n    const accordionHideToggleChange = panel.accordion ?\n      panel.accordion._stateChanges.pipe(filter(changes => !!changes.hideToggle)) : EMPTY;\n\n    // Since the toggle state depends on an @Input on the panel, we\n    // need to subscribe and trigger change detection manually.\n    this._parentChangeSubscription = merge(\n      panel.opened,\n      panel.closed,\n      accordionHideToggleChange,\n      panel._inputChanges.pipe(filter(changes => !!(changes.hideToggle || changes.disabled)))\n    )\n    .subscribe(() => this._changeDetectorRef.markForCheck());\n\n    // Avoids focus being lost if the panel contained the focused element and was closed.\n    panel.closed\n      .pipe(filter(() => panel._containsFocus()))\n      .subscribe(() => _focusMonitor.focusVia(_element, 'program'));\n\n    _focusMonitor.monitor(_element).subscribe(origin => {\n      if (origin && panel.accordion) {\n        panel.accordion._handleHeaderFocus(this);\n      }\n    });\n  }\n\n  /** Height of the header while the panel is expanded. */\n  @Input() expandedHeight: string;\n\n  /** Height of the header while the panel is collapsed. */\n  @Input() collapsedHeight: string;\n\n  /**\n   * Whether the associated panel is disabled. Implemented as a part of `FocusableOption`.\n   * @docs-private\n   */\n  get disabled() {\n    return this.panel.disabled;\n  }\n\n  /** Toggles the expanded state of the panel. */\n  _toggle(): void {\n    this.panel.toggle();\n  }\n\n  /** Gets whether the panel is expanded. */\n  _isExpanded(): boolean {\n    return this.panel.expanded;\n  }\n\n  /** Gets the expanded state string of the panel. */\n  _getExpandedState(): string {\n    return this.panel._getExpandedState();\n  }\n\n  /** Gets the panel id. */\n  _getPanelId(): string {\n    return this.panel.id;\n  }\n\n  /** Gets whether the expand indicator should be shown. */\n  _showToggle(): boolean {\n    return !this.panel.hideToggle && !this.panel.disabled;\n  }\n\n  /** Handle keydown event calling to toggle() if appropriate. */\n  _keydown(event: KeyboardEvent) {\n    switch (event.keyCode) {\n      // Toggle for space and enter keys.\n      case SPACE:\n      case ENTER:\n        event.preventDefault();\n        this._toggle();\n        break;\n      default:\n        if (this.panel.accordion) {\n          this.panel.accordion._handleHeaderKeydown(event);\n        }\n\n        return;\n    }\n  }\n\n  /**\n   * Focuses the panel header. Implemented as a part of `FocusableOption`.\n   * @param origin Origin of the action that triggered the focus.\n   * @docs-private\n   */\n  focus(origin: FocusOrigin = 'program') {\n    this._focusMonitor.focusVia(this._element, origin);\n  }\n\n  ngOnDestroy() {\n    this._parentChangeSubscription.unsubscribe();\n    this._focusMonitor.stopMonitoring(this._element);\n  }\n}\n\n/**\n * `<mat-panel-description>`\n *\n * This directive is to be used inside of the MatExpansionPanelHeader component.\n */\n@Directive({\n  selector: 'mat-panel-description',\n  host: {\n    class: 'mat-expansion-panel-header-description'\n  }\n})\nexport class MatExpansionPanelDescription {}\n\n/**\n * `<mat-panel-title>`\n *\n * This directive is to be used inside of the MatExpansionPanelHeader component.\n */\n@Directive({\n  selector: 'mat-panel-title',\n  host: {\n    class: 'mat-expansion-panel-header-title'\n  }\n})\nexport class MatExpansionPanelTitle {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, Input, ContentChildren, QueryList, AfterContentInit} from '@angular/core';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {CdkAccordion} from '@angular/cdk/accordion';\nimport {FocusKeyManager} from '@angular/cdk/a11y';\nimport {HOME, END} from '@angular/cdk/keycodes';\nimport {MAT_ACCORDION, MatAccordionBase, MatAccordionDisplayMode} from './accordion-base';\nimport {MatExpansionPanelHeader} from './expansion-panel-header';\n\n/**\n * Directive for a Material Design Accordion.\n */\n@Directive({\n  selector: 'mat-accordion',\n  exportAs: 'matAccordion',\n  inputs: ['multi'],\n  providers: [{\n    provide: MAT_ACCORDION,\n    useExisting: MatAccordion\n  }],\n  host: {\n    class: 'mat-accordion'\n  }\n})\nexport class MatAccordion extends CdkAccordion implements MatAccordionBase, AfterContentInit {\n  private _keyManager: FocusKeyManager<MatExpansionPanelHeader>;\n\n  @ContentChildren(MatExpansionPanelHeader, {descendants: true})\n  _headers: QueryList<MatExpansionPanelHeader>;\n\n  /** Whether the expansion indicator should be hidden. */\n  @Input()\n  get hideToggle(): boolean { return this._hideToggle; }\n  set hideToggle(show: boolean) { this._hideToggle = coerceBooleanProperty(show); }\n  private _hideToggle: boolean = false;\n\n  /**\n   * Display mode used for all expansion panels in the accordion. Currently two display\n   * modes exist:\n   *  default - a gutter-like spacing is placed around any expanded panel, placing the expanded\n   *     panel at a different elevation from the rest of the accordion.\n   *  flat - no spacing is placed around expanded panels, showing all panels at the same\n   *     elevation.\n   */\n  @Input() displayMode: MatAccordionDisplayMode = 'default';\n\n  ngAfterContentInit() {\n    this._keyManager = new FocusKeyManager(this._headers).withWrap();\n  }\n\n  /** Handles keyboard events coming in from the panel headers. */\n  _handleHeaderKeydown(event: KeyboardEvent) {\n    const {keyCode} = event;\n    const manager = this._keyManager;\n\n    if (keyCode === HOME) {\n      manager.setFirstItemActive();\n      event.preventDefault();\n    } else if (keyCode === END) {\n      manager.setLastItemActive();\n      event.preventDefault();\n    } else {\n      this._keyManager.onKeydown(event);\n    }\n  }\n\n  _handleHeaderFocus(header: MatExpansionPanelHeader) {\n    this._keyManager.updateActiveItem(header);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CdkAccordionModule} from '@angular/cdk/accordion';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatAccordion} from './accordion';\nimport {MatExpansionPanel, MatExpansionPanelActionRow} from './expansion-panel';\nimport {MatExpansionPanelContent} from './expansion-panel-content';\nimport {\n  MatExpansionPanelDescription,\n  MatExpansionPanelHeader,\n  MatExpansionPanelTitle,\n} from './expansion-panel-header';\n\n\n@NgModule({\n  imports: [CommonModule, CdkAccordionModule, PortalModule],\n  exports: [\n    MatAccordion,\n    MatExpansionPanel,\n    MatExpansionPanelActionRow,\n    MatExpansionPanelHeader,\n    MatExpansionPanelTitle,\n    MatExpansionPanelDescription,\n    MatExpansionPanelContent,\n  ],\n  declarations: [\n    MatAccordion,\n    MatExpansionPanel,\n    MatExpansionPanelActionRow,\n    MatExpansionPanelHeader,\n    MatExpansionPanelTitle,\n    MatExpansionPanelDescription,\n    MatExpansionPanelContent,\n  ],\n})\nexport class MatExpansionModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {InjectionToken} from '@angular/core';\n\n/**\n * Injection token used to provide a grid list to a tile and to avoid circular imports.\n * @docs-private\n */\nexport const MAT_GRID_LIST = new InjectionToken<MatGridListBase>('MAT_GRID_LIST');\n\n/**\n * Base interface for a `MatGridList`.\n * @docs-private\n */\nexport interface MatGridListBase {\n  cols: number;\n  gutterSize: string;\n  rowHeight: number | string;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  EventEmitter,\n  Input,\n  Output,\n  ViewEncapsulation,\n  NgZone,\n} from '@angular/core';\nimport {take} from 'rxjs/operators';\n\n/**\n * An internal class that represents the data corresponding to a single calendar cell.\n * @docs-private\n */\nexport class MatCalendarCell {\n  constructor(public value: number,\n              public displayValue: string,\n              public ariaLabel: string,\n              public enabled: boolean) {}\n}\n\n\n/**\n * An internal component used to display calendar data in a table.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: '[mat-calendar-body]',\n  templateUrl: 'calendar-body.html',\n  styleUrls: ['calendar-body.css'],\n  host: {\n    'class': 'mat-calendar-body',\n    'role': 'grid',\n    'aria-readonly': 'true'\n  },\n  exportAs: 'matCalendarBody',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatCalendarBody {\n  /** The label for the table. (e.g. \"Jan 2017\"). */\n  @Input() label: string;\n\n  /** The cells to display in the table. */\n  @Input() rows: MatCalendarCell[][];\n\n  /** The value in the table that corresponds to today. */\n  @Input() todayValue: number;\n\n  /** The value in the table that is currently selected. */\n  @Input() selectedValue: number;\n\n  /** The minimum number of free cells needed to fit the label in the first row. */\n  @Input() labelMinRequiredCells: number;\n\n  /** The number of columns in the table. */\n  @Input() numCols = 7;\n\n  /** Whether to allow selection of disabled cells. */\n  @Input() allowDisabledSelection = false;\n\n  /** The cell number of the active cell in the table. */\n  @Input() activeCell = 0;\n\n  /**\n   * The aspect ratio (width / height) to use for the cells in the table. This aspect ratio will be\n   * maintained even as the table resizes.\n   */\n  @Input() cellAspectRatio = 1;\n\n  /** Emits when a new value is selected. */\n  @Output() readonly selectedValueChange: EventEmitter<number> = new EventEmitter<number>();\n\n  constructor(private _elementRef: ElementRef<HTMLElement>, private _ngZone: NgZone) { }\n\n  _cellClicked(cell: MatCalendarCell): void {\n    if (!this.allowDisabledSelection && !cell.enabled) {\n      return;\n    }\n    this.selectedValueChange.emit(cell.value);\n  }\n\n  /** The number of blank cells to put at the beginning for the first row. */\n  get _firstRowOffset(): number {\n    return this.rows && this.rows.length && this.rows[0].length ?\n        this.numCols - this.rows[0].length : 0;\n  }\n\n  _isActiveCell(rowIndex: number, colIndex: number): boolean {\n    let cellNumber = rowIndex * this.numCols + colIndex;\n\n    // Account for the fact that the first row may not have as many cells.\n    if (rowIndex) {\n      cellNumber -= this._firstRowOffset;\n    }\n\n    return cellNumber == this.activeCell;\n  }\n\n  /** Focuses the active cell after the microtask queue is empty. */\n  _focusActiveCell() {\n    this._ngZone.runOutsideAngular(() => {\n      this._ngZone.onStable.asObservable().pipe(take(1)).subscribe(() => {\n        const activeCell: HTMLElement | null =\n            this._elementRef.nativeElement.querySelector('.mat-calendar-body-active');\n\n        if (activeCell) {\n          activeCell.focus();\n        }\n      });\n    });\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  DOWN_ARROW,\n  END,\n  ENTER,\n  HOME,\n  LEFT_ARROW,\n  PAGE_DOWN,\n  PAGE_UP,\n  RIGHT_ARROW,\n  UP_ARROW,\n  SPACE,\n} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  EventEmitter,\n  Inject,\n  Input,\n  Optional,\n  Output,\n  ViewEncapsulation,\n  ViewChild,\n} from '@angular/core';\nimport {DateAdapter, MAT_DATE_FORMATS, MatDateFormats} from '@angular/material/core';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {MatCalendarBody, MatCalendarCell} from './calendar-body';\nimport {createMissingDateImplError} from './datepicker-errors';\n\n\nconst DAYS_PER_WEEK = 7;\n\n\n/**\n * An internal component used to display a single month in the datepicker.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-month-view',\n  templateUrl: 'month-view.html',\n  exportAs: 'matMonthView',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class MatMonthView<D> implements AfterContentInit {\n  /**\n   * The date to display in this month view (everything other than the month and year is ignored).\n   */\n  @Input()\n  get activeDate(): D { return this._activeDate; }\n  set activeDate(value: D) {\n    const oldActiveDate = this._activeDate;\n    const validDate =\n        this._getValidDateOrNull(this._dateAdapter.deserialize(value)) || this._dateAdapter.today();\n    this._activeDate = this._dateAdapter.clampDate(validDate, this.minDate, this.maxDate);\n    if (!this._hasSameMonthAndYear(oldActiveDate, this._activeDate)) {\n      this._init();\n    }\n  }\n  private _activeDate: D;\n\n  /** The currently selected date. */\n  @Input()\n  get selected(): D | null { return this._selected; }\n  set selected(value: D | null) {\n    this._selected = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n    this._selectedDate = this._getDateInCurrentMonth(this._selected);\n  }\n  private _selected: D | null;\n\n  /** The minimum selectable date. */\n  @Input()\n  get minDate(): D | null { return this._minDate; }\n  set minDate(value: D | null) {\n    this._minDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _minDate: D | null;\n\n  /** The maximum selectable date. */\n  @Input()\n  get maxDate(): D | null { return this._maxDate; }\n  set maxDate(value: D | null) {\n    this._maxDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _maxDate: D | null;\n\n  /** A function used to filter which dates are selectable. */\n  @Input() dateFilter: (date: D) => boolean;\n\n  /** Emits when a new date is selected. */\n  @Output() readonly selectedChange: EventEmitter<D | null> = new EventEmitter<D | null>();\n\n  /** Emits when any date is selected. */\n  @Output() readonly _userSelection: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Emits when any date is activated. */\n  @Output() readonly activeDateChange: EventEmitter<D> = new EventEmitter<D>();\n\n  /** The body of calendar table */\n  @ViewChild(MatCalendarBody) _matCalendarBody: MatCalendarBody;\n\n  /** The label for this month (e.g. \"January 2017\"). */\n  _monthLabel: string;\n\n  /** Grid of calendar cells representing the dates of the month. */\n  _weeks: MatCalendarCell[][];\n\n  /** The number of blank cells in the first row before the 1st of the month. */\n  _firstWeekOffset: number;\n\n  /**\n   * The date of the month that the currently selected Date falls on.\n   * Null if the currently selected Date is in another month.\n   */\n  _selectedDate: number | null;\n\n  /** The date of the month that today falls on. Null if today is in another month. */\n  _todayDate: number | null;\n\n  /** The names of the weekdays. */\n  _weekdays: {long: string, narrow: string}[];\n\n  constructor(private _changeDetectorRef: ChangeDetectorRef,\n              @Optional() @Inject(MAT_DATE_FORMATS) private _dateFormats: MatDateFormats,\n              @Optional() public _dateAdapter: DateAdapter<D>,\n              @Optional() private _dir?: Directionality) {\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n    if (!this._dateFormats) {\n      throw createMissingDateImplError('MAT_DATE_FORMATS');\n    }\n\n    const firstDayOfWeek = this._dateAdapter.getFirstDayOfWeek();\n    const narrowWeekdays = this._dateAdapter.getDayOfWeekNames('narrow');\n    const longWeekdays = this._dateAdapter.getDayOfWeekNames('long');\n\n    // Rotate the labels for days of the week based on the configured first day of the week.\n    let weekdays = longWeekdays.map((long, i) => {\n      return {long, narrow: narrowWeekdays[i]};\n    });\n    this._weekdays = weekdays.slice(firstDayOfWeek).concat(weekdays.slice(0, firstDayOfWeek));\n\n    this._activeDate = this._dateAdapter.today();\n  }\n\n  ngAfterContentInit() {\n    this._init();\n  }\n\n  /** Handles when a new date is selected. */\n  _dateSelected(date: number) {\n    if (this._selectedDate != date) {\n      const selectedYear = this._dateAdapter.getYear(this.activeDate);\n      const selectedMonth = this._dateAdapter.getMonth(this.activeDate);\n      const selectedDate = this._dateAdapter.createDate(selectedYear, selectedMonth, date);\n\n      this.selectedChange.emit(selectedDate);\n    }\n\n    this._userSelection.emit();\n  }\n\n  /** Handles keydown events on the calendar body when calendar is in month view. */\n  _handleCalendarBodyKeydown(event: KeyboardEvent): void {\n    // TODO(mmalerba): We currently allow keyboard navigation to disabled dates, but just prevent\n    // disabled ones from being selected. This may not be ideal, we should look into whether\n    // navigation should skip over disabled dates, and if so, how to implement that efficiently.\n\n    const oldActiveDate = this._activeDate;\n    const isRtl = this._isRtl();\n\n    switch (event.keyCode) {\n      case LEFT_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate, isRtl ? 1 : -1);\n        break;\n      case RIGHT_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate, isRtl ? -1 : 1);\n        break;\n      case UP_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate, -7);\n        break;\n      case DOWN_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate, 7);\n        break;\n      case HOME:\n        this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate,\n            1 - this._dateAdapter.getDate(this._activeDate));\n        break;\n      case END:\n        this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate,\n            (this._dateAdapter.getNumDaysInMonth(this._activeDate) -\n              this._dateAdapter.getDate(this._activeDate)));\n        break;\n      case PAGE_UP:\n        this.activeDate = event.altKey ?\n            this._dateAdapter.addCalendarYears(this._activeDate, -1) :\n            this._dateAdapter.addCalendarMonths(this._activeDate, -1);\n        break;\n      case PAGE_DOWN:\n        this.activeDate = event.altKey ?\n            this._dateAdapter.addCalendarYears(this._activeDate, 1) :\n            this._dateAdapter.addCalendarMonths(this._activeDate, 1);\n        break;\n      case ENTER:\n      case SPACE:\n        if (!this.dateFilter || this.dateFilter(this._activeDate)) {\n          this._dateSelected(this._dateAdapter.getDate(this._activeDate));\n          this._userSelection.emit();\n          // Prevent unexpected default actions such as form submission.\n          event.preventDefault();\n        }\n        return;\n      default:\n        // Don't prevent default or focus active cell on keys that we don't explicitly handle.\n        return;\n    }\n\n    if (this._dateAdapter.compareDate(oldActiveDate, this.activeDate)) {\n      this.activeDateChange.emit(this.activeDate);\n    }\n\n    this._focusActiveCell();\n    // Prevent unexpected default actions such as form submission.\n    event.preventDefault();\n  }\n\n  /** Initializes this month view. */\n  _init() {\n    this._selectedDate = this._getDateInCurrentMonth(this.selected);\n    this._todayDate = this._getDateInCurrentMonth(this._dateAdapter.today());\n    this._monthLabel =\n        this._dateAdapter.getMonthNames('short')[this._dateAdapter.getMonth(this.activeDate)]\n            .toLocaleUpperCase();\n\n    let firstOfMonth = this._dateAdapter.createDate(this._dateAdapter.getYear(this.activeDate),\n        this._dateAdapter.getMonth(this.activeDate), 1);\n    this._firstWeekOffset =\n        (DAYS_PER_WEEK + this._dateAdapter.getDayOfWeek(firstOfMonth) -\n         this._dateAdapter.getFirstDayOfWeek()) % DAYS_PER_WEEK;\n\n    this._createWeekCells();\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Focuses the active cell after the microtask queue is empty. */\n  _focusActiveCell() {\n    this._matCalendarBody._focusActiveCell();\n  }\n\n  /** Creates MatCalendarCells for the dates in this month. */\n  private _createWeekCells() {\n    const daysInMonth = this._dateAdapter.getNumDaysInMonth(this.activeDate);\n    const dateNames = this._dateAdapter.getDateNames();\n    this._weeks = [[]];\n    for (let i = 0, cell = this._firstWeekOffset; i < daysInMonth; i++, cell++) {\n      if (cell == DAYS_PER_WEEK) {\n        this._weeks.push([]);\n        cell = 0;\n      }\n      const date = this._dateAdapter.createDate(\n            this._dateAdapter.getYear(this.activeDate),\n            this._dateAdapter.getMonth(this.activeDate), i + 1);\n      const enabled = this._shouldEnableDate(date);\n      const ariaLabel = this._dateAdapter.format(date, this._dateFormats.display.dateA11yLabel);\n      this._weeks[this._weeks.length - 1]\n          .push(new MatCalendarCell(i + 1, dateNames[i], ariaLabel, enabled));\n    }\n  }\n\n  /** Date filter for the month */\n  private _shouldEnableDate(date: D): boolean {\n    return !!date &&\n        (!this.dateFilter || this.dateFilter(date)) &&\n        (!this.minDate || this._dateAdapter.compareDate(date, this.minDate) >= 0) &&\n        (!this.maxDate || this._dateAdapter.compareDate(date, this.maxDate) <= 0);\n  }\n\n  /**\n   * Gets the date in this month that the given Date falls on.\n   * Returns null if the given Date is in another month.\n   */\n  private _getDateInCurrentMonth(date: D | null): number | null {\n    return date && this._hasSameMonthAndYear(date, this.activeDate) ?\n        this._dateAdapter.getDate(date) : null;\n  }\n\n  /** Checks whether the 2 dates are non-null and fall within the same month of the same year. */\n  private _hasSameMonthAndYear(d1: D | null, d2: D | null): boolean {\n    return !!(d1 && d2 && this._dateAdapter.getMonth(d1) == this._dateAdapter.getMonth(d2) &&\n              this._dateAdapter.getYear(d1) == this._dateAdapter.getYear(d2));\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n\n  /** Determines whether the user has the RTL layout direction. */\n  private _isRtl() {\n    return this._dir && this._dir.value === 'rtl';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  DOWN_ARROW,\n  END,\n  ENTER,\n  HOME,\n  LEFT_ARROW,\n  PAGE_DOWN,\n  PAGE_UP,\n  RIGHT_ARROW,\n  UP_ARROW,\n  SPACE,\n} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  EventEmitter,\n  Input,\n  Optional,\n  Output,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {DateAdapter} from '@angular/material/core';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {MatCalendarBody, MatCalendarCell} from './calendar-body';\nimport {createMissingDateImplError} from './datepicker-errors';\n\nexport const yearsPerPage = 24;\n\nexport const yearsPerRow = 4;\n\n\n/**\n * An internal component used to display a year selector in the datepicker.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-multi-year-view',\n  templateUrl: 'multi-year-view.html',\n  exportAs: 'matMultiYearView',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class MatMultiYearView<D> implements AfterContentInit {\n  /** The date to display in this multi-year view (everything other than the year is ignored). */\n  @Input()\n  get activeDate(): D { return this._activeDate; }\n  set activeDate(value: D) {\n    let oldActiveDate = this._activeDate;\n    const validDate =\n        this._getValidDateOrNull(this._dateAdapter.deserialize(value)) || this._dateAdapter.today();\n    this._activeDate = this._dateAdapter.clampDate(validDate, this.minDate, this.maxDate);\n    if (Math.floor(this._dateAdapter.getYear(oldActiveDate) / yearsPerPage) !=\n        Math.floor(this._dateAdapter.getYear(this._activeDate) / yearsPerPage)) {\n      this._init();\n    }\n  }\n  private _activeDate: D;\n\n  /** The currently selected date. */\n  @Input()\n  get selected(): D | null { return this._selected; }\n  set selected(value: D | null) {\n    this._selected = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n    this._selectedYear = this._selected && this._dateAdapter.getYear(this._selected);\n  }\n  private _selected: D | null;\n\n  /** The minimum selectable date. */\n  @Input()\n  get minDate(): D | null { return this._minDate; }\n  set minDate(value: D | null) {\n    this._minDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _minDate: D | null;\n\n  /** The maximum selectable date. */\n  @Input()\n  get maxDate(): D | null { return this._maxDate; }\n  set maxDate(value: D | null) {\n    this._maxDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _maxDate: D | null;\n\n  /** A function used to filter which dates are selectable. */\n  @Input() dateFilter: (date: D) => boolean;\n\n  /** Emits when a new year is selected. */\n  @Output() readonly selectedChange: EventEmitter<D> = new EventEmitter<D>();\n\n  /** Emits the selected year. This doesn't imply a change on the selected date */\n  @Output() readonly yearSelected: EventEmitter<D> = new EventEmitter<D>();\n\n  /** Emits when any date is activated. */\n  @Output() readonly activeDateChange: EventEmitter<D> = new EventEmitter<D>();\n\n  /** The body of calendar table */\n  @ViewChild(MatCalendarBody) _matCalendarBody: MatCalendarBody;\n\n  /** Grid of calendar cells representing the currently displayed years. */\n  _years: MatCalendarCell[][];\n\n  /** The year that today falls on. */\n  _todayYear: number;\n\n  /** The year of the selected date. Null if the selected date is null. */\n  _selectedYear: number | null;\n\n  constructor(private _changeDetectorRef: ChangeDetectorRef,\n              @Optional() public _dateAdapter: DateAdapter<D>,\n              @Optional() private _dir?: Directionality) {\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n\n    this._activeDate = this._dateAdapter.today();\n  }\n\n  ngAfterContentInit() {\n    this._init();\n  }\n\n  /** Initializes this multi-year view. */\n  _init() {\n    this._todayYear = this._dateAdapter.getYear(this._dateAdapter.today());\n    let activeYear = this._dateAdapter.getYear(this._activeDate);\n    let activeOffset = activeYear % yearsPerPage;\n    this._years = [];\n    for (let i = 0, row: number[] = []; i < yearsPerPage; i++) {\n      row.push(activeYear - activeOffset + i);\n      if (row.length == yearsPerRow) {\n        this._years.push(row.map(year => this._createCellForYear(year)));\n        row = [];\n      }\n    }\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Handles when a new year is selected. */\n  _yearSelected(year: number) {\n    this.yearSelected.emit(this._dateAdapter.createDate(year, 0, 1));\n    let month = this._dateAdapter.getMonth(this.activeDate);\n    let daysInMonth =\n        this._dateAdapter.getNumDaysInMonth(this._dateAdapter.createDate(year, month, 1));\n    this.selectedChange.emit(this._dateAdapter.createDate(year, month,\n        Math.min(this._dateAdapter.getDate(this.activeDate), daysInMonth)));\n  }\n\n  /** Handles keydown events on the calendar body when calendar is in multi-year view. */\n  _handleCalendarBodyKeydown(event: KeyboardEvent): void {\n    // TODO(mmalerba): We currently allow keyboard navigation to disabled dates, but just prevent\n    // disabled ones from being selected. This may not be ideal, we should look into whether\n    // navigation should skip over disabled dates, and if so, how to implement that efficiently.\n\n    const oldActiveDate = this._activeDate;\n    const isRtl = this._isRtl();\n\n    switch (event.keyCode) {\n      case LEFT_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate, isRtl ? 1 : -1);\n        break;\n      case RIGHT_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate, isRtl ? -1 : 1);\n        break;\n      case UP_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate, -yearsPerRow);\n        break;\n      case DOWN_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate, yearsPerRow);\n        break;\n      case HOME:\n        this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate,\n            -this._dateAdapter.getYear(this._activeDate) % yearsPerPage);\n        break;\n      case END:\n        this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate,\n            yearsPerPage - this._dateAdapter.getYear(this._activeDate) % yearsPerPage - 1);\n        break;\n      case PAGE_UP:\n        this.activeDate =\n            this._dateAdapter.addCalendarYears(\n                this._activeDate, event.altKey ? -yearsPerPage * 10 : -yearsPerPage);\n        break;\n      case PAGE_DOWN:\n        this.activeDate =\n            this._dateAdapter.addCalendarYears(\n                this._activeDate, event.altKey ? yearsPerPage * 10 : yearsPerPage);\n        break;\n      case ENTER:\n      case SPACE:\n        this._yearSelected(this._dateAdapter.getYear(this._activeDate));\n        break;\n      default:\n        // Don't prevent default or focus active cell on keys that we don't explicitly handle.\n        return;\n    }\n\n    if (this._dateAdapter.compareDate(oldActiveDate, this.activeDate)) {\n      this.activeDateChange.emit(this.activeDate);\n    }\n\n    this._focusActiveCell();\n    // Prevent unexpected default actions such as form submission.\n    event.preventDefault();\n  }\n\n  _getActiveCell(): number {\n    return this._dateAdapter.getYear(this.activeDate) % yearsPerPage;\n  }\n\n  /** Focuses the active cell after the microtask queue is empty. */\n  _focusActiveCell() {\n    this._matCalendarBody._focusActiveCell();\n  }\n\n  /** Creates an MatCalendarCell for the given year. */\n  private _createCellForYear(year: number) {\n    let yearName = this._dateAdapter.getYearName(this._dateAdapter.createDate(year, 0, 1));\n    return new MatCalendarCell(year, yearName, yearName, this._shouldEnableYear(year));\n  }\n\n  /** Whether the given year is enabled. */\n  private _shouldEnableYear(year: number) {\n    // disable if the year is greater than maxDate lower than minDate\n    if (year === undefined || year === null ||\n        (this.maxDate && year > this._dateAdapter.getYear(this.maxDate)) ||\n        (this.minDate && year < this._dateAdapter.getYear(this.minDate))) {\n      return false;\n    }\n\n    // enable if it reaches here and there's no filter defined\n    if (!this.dateFilter) {\n      return true;\n    }\n\n    const firstOfYear = this._dateAdapter.createDate(year, 0, 1);\n\n    // If any date in the year is enabled count the year as enabled.\n    for (let date = firstOfYear; this._dateAdapter.getYear(date) == year;\n      date = this._dateAdapter.addCalendarDays(date, 1)) {\n      if (this.dateFilter(date)) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n\n  /** Determines whether the user has the RTL layout direction. */\n  private _isRtl() {\n    return this._dir && this._dir.value === 'rtl';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  DOWN_ARROW,\n  END,\n  ENTER,\n  HOME,\n  LEFT_ARROW,\n  PAGE_DOWN,\n  PAGE_UP,\n  RIGHT_ARROW,\n  UP_ARROW,\n  SPACE,\n} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  EventEmitter,\n  Inject,\n  Input,\n  Optional,\n  Output,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {DateAdapter, MAT_DATE_FORMATS, MatDateFormats} from '@angular/material/core';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {MatCalendarBody, MatCalendarCell} from './calendar-body';\nimport {createMissingDateImplError} from './datepicker-errors';\n\n/**\n * An internal component used to display a single year in the datepicker.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-year-view',\n  templateUrl: 'year-view.html',\n  exportAs: 'matYearView',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class MatYearView<D> implements AfterContentInit {\n  /** The date to display in this year view (everything other than the year is ignored). */\n  @Input()\n  get activeDate(): D { return this._activeDate; }\n  set activeDate(value: D) {\n    let oldActiveDate = this._activeDate;\n    const validDate =\n        this._getValidDateOrNull(this._dateAdapter.deserialize(value)) || this._dateAdapter.today();\n    this._activeDate = this._dateAdapter.clampDate(validDate, this.minDate, this.maxDate);\n    if (this._dateAdapter.getYear(oldActiveDate) !== this._dateAdapter.getYear(this._activeDate)) {\n      this._init();\n    }\n  }\n  private _activeDate: D;\n\n  /** The currently selected date. */\n  @Input()\n  get selected(): D | null { return this._selected; }\n  set selected(value: D | null) {\n    this._selected = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n    this._selectedMonth = this._getMonthInCurrentYear(this._selected);\n  }\n  private _selected: D | null;\n\n  /** The minimum selectable date. */\n  @Input()\n  get minDate(): D | null { return this._minDate; }\n  set minDate(value: D | null) {\n    this._minDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _minDate: D | null;\n\n  /** The maximum selectable date. */\n  @Input()\n  get maxDate(): D | null { return this._maxDate; }\n  set maxDate(value: D | null) {\n    this._maxDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _maxDate: D | null;\n\n  /** A function used to filter which dates are selectable. */\n  @Input() dateFilter: (date: D) => boolean;\n\n  /** Emits when a new month is selected. */\n  @Output() readonly selectedChange: EventEmitter<D> = new EventEmitter<D>();\n\n  /** Emits the selected month. This doesn't imply a change on the selected date */\n  @Output() readonly monthSelected: EventEmitter<D> = new EventEmitter<D>();\n\n  /** Emits when any date is activated. */\n  @Output() readonly activeDateChange: EventEmitter<D> = new EventEmitter<D>();\n\n  /** The body of calendar table */\n  @ViewChild(MatCalendarBody) _matCalendarBody: MatCalendarBody;\n\n  /** Grid of calendar cells representing the months of the year. */\n  _months: MatCalendarCell[][];\n\n  /** The label for this year (e.g. \"2017\"). */\n  _yearLabel: string;\n\n  /** The month in this year that today falls on. Null if today is in a different year. */\n  _todayMonth: number | null;\n\n  /**\n   * The month in this year that the selected Date falls on.\n   * Null if the selected Date is in a different year.\n   */\n  _selectedMonth: number | null;\n\n  constructor(private _changeDetectorRef: ChangeDetectorRef,\n              @Optional() @Inject(MAT_DATE_FORMATS) private _dateFormats: MatDateFormats,\n              @Optional() public _dateAdapter: DateAdapter<D>,\n              @Optional() private _dir?: Directionality) {\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n    if (!this._dateFormats) {\n      throw createMissingDateImplError('MAT_DATE_FORMATS');\n    }\n\n    this._activeDate = this._dateAdapter.today();\n  }\n\n  ngAfterContentInit() {\n    this._init();\n  }\n\n  /** Handles when a new month is selected. */\n  _monthSelected(month: number) {\n    const normalizedDate =\n          this._dateAdapter.createDate(this._dateAdapter.getYear(this.activeDate), month, 1);\n\n    this.monthSelected.emit(normalizedDate);\n\n    const daysInMonth = this._dateAdapter.getNumDaysInMonth(normalizedDate);\n\n    this.selectedChange.emit(this._dateAdapter.createDate(\n        this._dateAdapter.getYear(this.activeDate), month,\n        Math.min(this._dateAdapter.getDate(this.activeDate), daysInMonth)));\n  }\n\n  /** Handles keydown events on the calendar body when calendar is in year view. */\n  _handleCalendarBodyKeydown(event: KeyboardEvent): void {\n    // TODO(mmalerba): We currently allow keyboard navigation to disabled dates, but just prevent\n    // disabled ones from being selected. This may not be ideal, we should look into whether\n    // navigation should skip over disabled dates, and if so, how to implement that efficiently.\n\n    const oldActiveDate = this._activeDate;\n    const isRtl = this._isRtl();\n\n    switch (event.keyCode) {\n      case LEFT_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate, isRtl ? 1 : -1);\n        break;\n      case RIGHT_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate, isRtl ? -1 : 1);\n        break;\n      case UP_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate, -4);\n        break;\n      case DOWN_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate, 4);\n        break;\n      case HOME:\n        this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate,\n            -this._dateAdapter.getMonth(this._activeDate));\n        break;\n      case END:\n        this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate,\n            11 - this._dateAdapter.getMonth(this._activeDate));\n        break;\n      case PAGE_UP:\n        this.activeDate =\n            this._dateAdapter.addCalendarYears(this._activeDate, event.altKey ? -10 : -1);\n        break;\n      case PAGE_DOWN:\n        this.activeDate =\n            this._dateAdapter.addCalendarYears(this._activeDate, event.altKey ? 10 : 1);\n        break;\n      case ENTER:\n      case SPACE:\n        this._monthSelected(this._dateAdapter.getMonth(this._activeDate));\n        break;\n      default:\n        // Don't prevent default or focus active cell on keys that we don't explicitly handle.\n        return;\n    }\n\n    if (this._dateAdapter.compareDate(oldActiveDate, this.activeDate)) {\n      this.activeDateChange.emit(this.activeDate);\n    }\n\n    this._focusActiveCell();\n    // Prevent unexpected default actions such as form submission.\n    event.preventDefault();\n  }\n\n  /** Initializes this year view. */\n  _init() {\n    this._selectedMonth = this._getMonthInCurrentYear(this.selected);\n    this._todayMonth = this._getMonthInCurrentYear(this._dateAdapter.today());\n    this._yearLabel = this._dateAdapter.getYearName(this.activeDate);\n\n    let monthNames = this._dateAdapter.getMonthNames('short');\n    // First row of months only contains 5 elements so we can fit the year label on the same row.\n    this._months = [[0, 1, 2, 3], [4, 5, 6, 7], [8, 9, 10, 11]].map(row => row.map(\n        month => this._createCellForMonth(month, monthNames[month])));\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Focuses the active cell after the microtask queue is empty. */\n  _focusActiveCell() {\n    this._matCalendarBody._focusActiveCell();\n  }\n\n  /**\n   * Gets the month in this year that the given Date falls on.\n   * Returns null if the given Date is in another year.\n   */\n  private _getMonthInCurrentYear(date: D | null) {\n    return date && this._dateAdapter.getYear(date) == this._dateAdapter.getYear(this.activeDate) ?\n        this._dateAdapter.getMonth(date) : null;\n  }\n\n  /** Creates an MatCalendarCell for the given month. */\n  private _createCellForMonth(month: number, monthName: string) {\n    let ariaLabel = this._dateAdapter.format(\n        this._dateAdapter.createDate(this._dateAdapter.getYear(this.activeDate), month, 1),\n        this._dateFormats.display.monthYearA11yLabel);\n    return new MatCalendarCell(\n        month, monthName.toLocaleUpperCase(), ariaLabel, this._shouldEnableMonth(month));\n  }\n\n  /** Whether the given month is enabled. */\n  private _shouldEnableMonth(month: number) {\n\n    const activeYear = this._dateAdapter.getYear(this.activeDate);\n\n    if (month === undefined || month === null ||\n        this._isYearAndMonthAfterMaxDate(activeYear, month) ||\n        this._isYearAndMonthBeforeMinDate(activeYear, month)) {\n      return false;\n    }\n\n    if (!this.dateFilter) {\n      return true;\n    }\n\n    const firstOfMonth = this._dateAdapter.createDate(activeYear, month, 1);\n\n    // If any date in the month is enabled count the month as enabled.\n    for (let date = firstOfMonth; this._dateAdapter.getMonth(date) == month;\n         date = this._dateAdapter.addCalendarDays(date, 1)) {\n      if (this.dateFilter(date)) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  /**\n   * Tests whether the combination month/year is after this.maxDate, considering\n   * just the month and year of this.maxDate\n   */\n  private _isYearAndMonthAfterMaxDate(year: number, month: number) {\n    if (this.maxDate) {\n      const maxYear = this._dateAdapter.getYear(this.maxDate);\n      const maxMonth = this._dateAdapter.getMonth(this.maxDate);\n\n      return year > maxYear || (year === maxYear && month > maxMonth);\n    }\n\n    return false;\n  }\n\n  /**\n   * Tests whether the combination month/year is before this.minDate, considering\n   * just the month and year of this.minDate\n   */\n  private _isYearAndMonthBeforeMinDate(year: number, month: number) {\n    if (this.minDate) {\n      const minYear = this._dateAdapter.getYear(this.minDate);\n      const minMonth = this._dateAdapter.getMonth(this.minDate);\n\n      return year < minYear || (year === minYear && month < minMonth);\n    }\n\n    return false;\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n\n  /** Determines whether the user has the RTL layout direction. */\n  private _isRtl() {\n    return this._dir && this._dir.value === 'rtl';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ComponentPortal, ComponentType, Portal} from '@angular/cdk/portal';\nimport {\n  AfterContentInit,\n  AfterViewChecked,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  OnChanges,\n  OnDestroy,\n  Optional,\n  Output,\n  SimpleChanges,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {DateAdapter, MAT_DATE_FORMATS, MatDateFormats} from '@angular/material/core';\nimport {Subject, Subscription} from 'rxjs';\nimport {createMissingDateImplError} from './datepicker-errors';\nimport {MatDatepickerIntl} from './datepicker-intl';\nimport {MatMonthView} from './month-view';\nimport {MatMultiYearView, yearsPerPage} from './multi-year-view';\nimport {MatYearView} from './year-view';\n\n/**\n * Possible views for the calendar.\n * @docs-private\n */\nexport type MatCalendarView = 'month' | 'year' | 'multi-year';\n\n/** Default header for MatCalendar */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-calendar-header',\n  templateUrl: 'calendar-header.html',\n  exportAs: 'matCalendarHeader',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatCalendarHeader<D> {\n  constructor(private _intl: MatDatepickerIntl,\n              @Inject(forwardRef(() => MatCalendar)) public calendar: MatCalendar<D>,\n              @Optional() private _dateAdapter: DateAdapter<D>,\n              @Optional() @Inject(MAT_DATE_FORMATS) private _dateFormats: MatDateFormats,\n              changeDetectorRef: ChangeDetectorRef) {\n\n    this.calendar.stateChanges.subscribe(() => changeDetectorRef.markForCheck());\n  }\n\n  /** The label for the current calendar view. */\n  get periodButtonText(): string {\n    if (this.calendar.currentView == 'month') {\n      return this._dateAdapter\n          .format(this.calendar.activeDate, this._dateFormats.display.monthYearLabel)\n              .toLocaleUpperCase();\n    }\n    if (this.calendar.currentView == 'year') {\n      return this._dateAdapter.getYearName(this.calendar.activeDate);\n    }\n    const activeYear = this._dateAdapter.getYear(this.calendar.activeDate);\n    const firstYearInView = this._dateAdapter.getYearName(\n        this._dateAdapter.createDate(activeYear - activeYear % 24, 0, 1));\n    const lastYearInView = this._dateAdapter.getYearName(\n        this._dateAdapter.createDate(activeYear + yearsPerPage - 1 - activeYear % 24, 0, 1));\n    return `${firstYearInView} \\u2013 ${lastYearInView}`;\n  }\n\n  get periodButtonLabel(): string {\n    return this.calendar.currentView == 'month' ?\n        this._intl.switchToMultiYearViewLabel : this._intl.switchToMonthViewLabel;\n  }\n\n  /** The label for the the previous button. */\n  get prevButtonLabel(): string {\n    return {\n      'month': this._intl.prevMonthLabel,\n      'year': this._intl.prevYearLabel,\n      'multi-year': this._intl.prevMultiYearLabel\n    }[this.calendar.currentView];\n  }\n\n  /** The label for the the next button. */\n  get nextButtonLabel(): string {\n    return {\n      'month': this._intl.nextMonthLabel,\n      'year': this._intl.nextYearLabel,\n      'multi-year': this._intl.nextMultiYearLabel\n    }[this.calendar.currentView];\n  }\n\n  /** Handles user clicks on the period label. */\n  currentPeriodClicked(): void {\n    this.calendar.currentView = this.calendar.currentView == 'month' ? 'multi-year' : 'month';\n  }\n\n  /** Handles user clicks on the previous button. */\n  previousClicked(): void {\n    this.calendar.activeDate = this.calendar.currentView == 'month' ?\n        this._dateAdapter.addCalendarMonths(this.calendar.activeDate, -1) :\n            this._dateAdapter.addCalendarYears(\n                this.calendar.activeDate, this.calendar.currentView == 'year' ? -1 : -yearsPerPage\n            );\n  }\n\n  /** Handles user clicks on the next button. */\n  nextClicked(): void {\n    this.calendar.activeDate = this.calendar.currentView == 'month' ?\n        this._dateAdapter.addCalendarMonths(this.calendar.activeDate, 1) :\n            this._dateAdapter.addCalendarYears(\n                this.calendar.activeDate,\n                    this.calendar.currentView == 'year' ? 1 : yearsPerPage\n            );\n  }\n\n  /** Whether the previous period button is enabled. */\n  previousEnabled(): boolean {\n    if (!this.calendar.minDate) {\n      return true;\n    }\n    return !this.calendar.minDate ||\n        !this._isSameView(this.calendar.activeDate, this.calendar.minDate);\n  }\n\n  /** Whether the next period button is enabled. */\n  nextEnabled(): boolean {\n    return !this.calendar.maxDate ||\n        !this._isSameView(this.calendar.activeDate, this.calendar.maxDate);\n  }\n\n  /** Whether the two dates represent the same view in the current view mode (month or year). */\n  private _isSameView(date1: D, date2: D): boolean {\n    if (this.calendar.currentView == 'month') {\n      return this._dateAdapter.getYear(date1) == this._dateAdapter.getYear(date2) &&\n          this._dateAdapter.getMonth(date1) == this._dateAdapter.getMonth(date2);\n    }\n    if (this.calendar.currentView == 'year') {\n      return this._dateAdapter.getYear(date1) == this._dateAdapter.getYear(date2);\n    }\n    // Otherwise we are in 'multi-year' view.\n    return Math.floor(this._dateAdapter.getYear(date1) / yearsPerPage) ==\n        Math.floor(this._dateAdapter.getYear(date2) / yearsPerPage);\n  }\n}\n\n/**\n * A calendar that is used as part of the datepicker.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-calendar',\n  templateUrl: 'calendar.html',\n  styleUrls: ['calendar.css'],\n  host: {\n    'class': 'mat-calendar',\n  },\n  exportAs: 'matCalendar',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatCalendar<D> implements AfterContentInit, AfterViewChecked, OnDestroy, OnChanges {\n  /** An input indicating the type of the header component, if set. */\n  @Input() headerComponent: ComponentType<any>;\n\n  /** A portal containing the header component type for this calendar. */\n  _calendarHeaderPortal: Portal<any>;\n\n  private _intlChanges: Subscription;\n\n  /**\n   * Used for scheduling that focus should be moved to the active cell on the next tick.\n   * We need to schedule it, rather than do it immediately, because we have to wait\n   * for Angular to re-evaluate the view children.\n   */\n  private _moveFocusOnNextTick = false;\n\n  /** A date representing the period (month or year) to start the calendar in. */\n  @Input()\n  get startAt(): D | null { return this._startAt; }\n  set startAt(value: D | null) {\n    this._startAt = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _startAt: D | null;\n\n  /** Whether the calendar should be started in month or year view. */\n  @Input() startView: MatCalendarView = 'month';\n\n  /** The currently selected date. */\n  @Input()\n  get selected(): D | null { return this._selected; }\n  set selected(value: D | null) {\n    this._selected = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _selected: D | null;\n\n  /** The minimum selectable date. */\n  @Input()\n  get minDate(): D | null { return this._minDate; }\n  set minDate(value: D | null) {\n    this._minDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _minDate: D | null;\n\n  /** The maximum selectable date. */\n  @Input()\n  get maxDate(): D | null { return this._maxDate; }\n  set maxDate(value: D | null) {\n    this._maxDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _maxDate: D | null;\n\n  /** A function used to filter which dates are selectable. */\n  @Input() dateFilter: (date: D) => boolean;\n\n  /** Emits when the currently selected date changes. */\n  @Output() readonly selectedChange: EventEmitter<D> = new EventEmitter<D>();\n\n  /**\n   * Emits the year chosen in multiyear view.\n   * This doesn't imply a change on the selected date.\n   */\n  @Output() readonly yearSelected: EventEmitter<D> = new EventEmitter<D>();\n\n  /**\n   * Emits the month chosen in year view.\n   * This doesn't imply a change on the selected date.\n   */\n  @Output() readonly monthSelected: EventEmitter<D> = new EventEmitter<D>();\n\n  /** Emits when any date is selected. */\n  @Output() readonly _userSelection: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Reference to the current month view component. */\n  @ViewChild(MatMonthView) monthView: MatMonthView<D>;\n\n  /** Reference to the current year view component. */\n  @ViewChild(MatYearView) yearView: MatYearView<D>;\n\n  /** Reference to the current multi-year view component. */\n  @ViewChild(MatMultiYearView) multiYearView: MatMultiYearView<D>;\n\n  /**\n   * The current active date. This determines which time period is shown and which date is\n   * highlighted when using keyboard navigation.\n   */\n  get activeDate(): D { return this._clampedActiveDate; }\n  set activeDate(value: D) {\n    this._clampedActiveDate = this._dateAdapter.clampDate(value, this.minDate, this.maxDate);\n    this.stateChanges.next();\n  }\n  private _clampedActiveDate: D;\n\n  /** Whether the calendar is in month view. */\n  get currentView(): MatCalendarView { return this._currentView; }\n  set currentView(value: MatCalendarView) {\n    this._currentView = value;\n    this._moveFocusOnNextTick = true;\n  }\n  private _currentView: MatCalendarView;\n\n  /**\n   * Emits whenever there is a state change that the header may need to respond to.\n   */\n  stateChanges = new Subject<void>();\n\n  constructor(_intl: MatDatepickerIntl,\n              @Optional() private _dateAdapter: DateAdapter<D>,\n              @Optional() @Inject(MAT_DATE_FORMATS) private _dateFormats: MatDateFormats,\n              private _changeDetectorRef: ChangeDetectorRef) {\n\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n\n    if (!this._dateFormats) {\n      throw createMissingDateImplError('MAT_DATE_FORMATS');\n    }\n\n    this._intlChanges = _intl.changes.subscribe(() => {\n      _changeDetectorRef.markForCheck();\n      this.stateChanges.next();\n    });\n  }\n\n  ngAfterContentInit() {\n    this._calendarHeaderPortal = new ComponentPortal(this.headerComponent || MatCalendarHeader);\n    this.activeDate = this.startAt || this._dateAdapter.today();\n\n    // Assign to the private property since we don't want to move focus on init.\n    this._currentView = this.startView;\n  }\n\n  ngAfterViewChecked() {\n    if (this._moveFocusOnNextTick) {\n      this._moveFocusOnNextTick = false;\n      this.focusActiveCell();\n    }\n  }\n\n  ngOnDestroy() {\n    this._intlChanges.unsubscribe();\n    this.stateChanges.complete();\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    const change = changes.minDate || changes.maxDate || changes.dateFilter;\n\n    if (change && !change.firstChange) {\n      const view = this._getCurrentViewComponent();\n\n      if (view) {\n        // We need to `detectChanges` manually here, because the `minDate`, `maxDate` etc. are\n        // passed down to the view via data bindings which won't be up-to-date when we call `_init`.\n        this._changeDetectorRef.detectChanges();\n        view._init();\n      }\n    }\n\n    this.stateChanges.next();\n  }\n\n  focusActiveCell() {\n    this._getCurrentViewComponent()._focusActiveCell();\n  }\n\n  /** Updates today's date after an update of the active date */\n  updateTodaysDate() {\n    let view = this.currentView == 'month' ? this.monthView :\n            (this.currentView == 'year' ? this.yearView : this.multiYearView);\n\n    view.ngAfterContentInit();\n  }\n\n  /** Handles date selection in the month view. */\n  _dateSelected(date: D): void {\n    if (!this._dateAdapter.sameDate(date, this.selected)) {\n      this.selectedChange.emit(date);\n    }\n  }\n\n  /** Handles year selection in the multiyear view. */\n  _yearSelectedInMultiYearView(normalizedYear: D) {\n    this.yearSelected.emit(normalizedYear);\n  }\n\n  /** Handles month selection in the year view. */\n  _monthSelectedInYearView(normalizedMonth: D) {\n    this.monthSelected.emit(normalizedMonth);\n  }\n\n  _userSelected(): void {\n    this._userSelection.emit();\n  }\n\n  /** Handles year/month selection in the multi-year/year views. */\n  _goToDateInView(date: D, view: 'month' | 'year' | 'multi-year'): void {\n    this.activeDate = date;\n    this.currentView = view;\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n\n  /** Returns the component instance that corresponds to the current calendar view. */\n  private _getCurrentViewComponent() {\n    return this.monthView || this.yearView || this.multiYearView;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/**\n * Animations used by the Material datepicker.\n * @docs-private\n */\nexport const matDatepickerAnimations: {\n  readonly transformPanel: AnimationTriggerMetadata;\n  readonly fadeInCalendar: AnimationTriggerMetadata;\n} = {\n  /** Transforms the height of the datepicker's calendar. */\n  transformPanel: trigger('transformPanel', [\n    state('void', style({\n      opacity: 0,\n      transform: 'scale(1, 0.8)'\n    })),\n    transition('void => enter',  animate('120ms cubic-bezier(0, 0, 0.2, 1)', style({\n      opacity: 1,\n      transform: 'scale(1, 1)'\n    }))),\n    transition('* => void', animate('100ms linear', style({opacity: 0})))\n  ]),\n\n  /** Fades in the content of the calendar. */\n  fadeInCalendar: trigger('fadeInCalendar', [\n    state('void', style({opacity: 0})),\n    state('enter', style({opacity: 1})),\n\n    // TODO(crisbeto): this animation should be removed since it isn't quite on spec, but we\n    // need to keep it until #12440 gets in, otherwise the exit animation will look glitchy.\n    transition('void => *', animate('120ms 100ms cubic-bezier(0.55, 0, 0.55, 0.2)'))\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusKeyManager} from '@angular/cdk/a11y';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {SelectionModel} from '@angular/cdk/collections';\nimport {BACKSPACE, END, HOME} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  DoCheck,\n  ElementRef,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Output,\n  QueryList,\n  Self,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {ControlValueAccessor, FormGroupDirective, NgControl, NgForm} from '@angular/forms';\nimport {\n  CanUpdateErrorState,\n  CanUpdateErrorStateCtor,\n  ErrorStateMatcher,\n  mixinErrorState,\n} from '@angular/material/core';\nimport {MatFormFieldControl} from '@angular/material/form-field';\nimport {merge, Observable, Subject, Subscription} from 'rxjs';\nimport {startWith, takeUntil} from 'rxjs/operators';\nimport {MatChip, MatChipEvent, MatChipSelectionChange} from './chip';\nimport {MatChipInput} from './chip-input';\n\n\n// Boilerplate for applying mixins to MatChipList.\n/** @docs-private */\nexport class MatChipListBase {\n  constructor(public _defaultErrorStateMatcher: ErrorStateMatcher,\n              public _parentForm: NgForm,\n              public _parentFormGroup: FormGroupDirective,\n              /** @docs-private */\n              public ngControl: NgControl) {}\n}\nexport const _MatChipListMixinBase: CanUpdateErrorStateCtor & typeof MatChipListBase =\n    mixinErrorState(MatChipListBase);\n\n\n// Increasing integer for generating unique ids for chip-list components.\nlet nextUniqueId = 0;\n\n/** Change event object that is emitted when the chip list value has changed. */\nexport class MatChipListChange {\n  constructor(\n    /** Chip list that emitted the event. */\n    public source: MatChipList,\n    /** Value of the chip list when the event was emitted. */\n    public value: any) { }\n}\n\n\n/**\n * A material design chips component (named ChipList for it's similarity to the List component).\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-chip-list',\n  template: `<div class=\"mat-chip-list-wrapper\"><ng-content></ng-content></div>`,\n  exportAs: 'matChipList',\n  host: {\n    '[attr.tabindex]': 'disabled ? null : _tabIndex',\n    '[attr.aria-describedby]': '_ariaDescribedby || null',\n    '[attr.aria-required]': 'required.toString()',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.aria-invalid]': 'errorState',\n    '[attr.aria-multiselectable]': 'multiple',\n    '[attr.role]': 'role',\n    '[class.mat-chip-list-disabled]': 'disabled',\n    '[class.mat-chip-list-invalid]': 'errorState',\n    '[class.mat-chip-list-required]': 'required',\n    '[attr.aria-orientation]': 'ariaOrientation',\n    'class': 'mat-chip-list',\n    '(focus)': 'focus()',\n    '(blur)': '_blur()',\n    '(keydown)': '_keydown($event)',\n    '[id]': '_uid',\n  },\n  providers: [{provide: MatFormFieldControl, useExisting: MatChipList}],\n  styleUrls: ['chips.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class MatChipList extends _MatChipListMixinBase implements MatFormFieldControl<any>,\n  ControlValueAccessor, AfterContentInit, DoCheck, OnInit, OnDestroy, CanUpdateErrorState {\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  readonly controlType: string = 'mat-chip-list';\n\n  /**\n   * When a chip is destroyed, we store the index of the destroyed chip until the chips\n   * query list notifies about the update. This is necessary because we cannot determine an\n   * appropriate chip that should receive focus until the array of chips updated completely.\n   */\n  private _lastDestroyedChipIndex: number | null = null;\n\n  /** Subject that emits when the component has been destroyed. */\n  private _destroyed = new Subject<void>();\n\n  /** Subscription to focus changes in the chips. */\n  private _chipFocusSubscription: Subscription | null;\n\n  /** Subscription to blur changes in the chips. */\n  private _chipBlurSubscription: Subscription | null;\n\n  /** Subscription to selection changes in chips. */\n  private _chipSelectionSubscription: Subscription | null;\n\n  /** Subscription to remove changes in chips. */\n  private _chipRemoveSubscription: Subscription | null;\n\n  /** The chip input to add more chips */\n  protected _chipInput: MatChipInput;\n\n  /** Uid of the chip list */\n  _uid: string = `mat-chip-list-${nextUniqueId++}`;\n\n  /** The aria-describedby attribute on the chip list for improved a11y. */\n  _ariaDescribedby: string;\n\n  /** Tab index for the chip list. */\n  _tabIndex = 0;\n\n  /**\n   * User defined tab index.\n   * When it is not null, use user defined tab index. Otherwise use _tabIndex\n   */\n  _userTabIndex: number | null = null;\n\n  /** The FocusKeyManager which handles focus. */\n  _keyManager: FocusKeyManager<MatChip>;\n\n  /** Function when touched */\n  _onTouched = () => {};\n\n  /** Function when changed */\n  _onChange: (value: any) => void = () => {};\n\n  _selectionModel: SelectionModel<MatChip>;\n\n  /** The array of selected chips inside chip list. */\n  get selected(): MatChip[] | MatChip {\n    return this.multiple ? this._selectionModel.selected : this._selectionModel.selected[0];\n  }\n\n  /** The ARIA role applied to the chip list. */\n  get role(): string | null { return this.empty ? null : 'listbox'; }\n\n  /** An object used to control when error messages are shown. */\n  @Input() errorStateMatcher: ErrorStateMatcher;\n\n  /** Whether the user should be allowed to select multiple chips. */\n  @Input()\n  get multiple(): boolean { return this._multiple; }\n  set multiple(value: boolean) {\n    this._multiple = coerceBooleanProperty(value);\n  }\n  private _multiple: boolean = false;\n\n  /**\n   * A function to compare the option values with the selected values. The first argument\n   * is a value from an option. The second is a value from the selection. A boolean\n   * should be returned.\n   */\n  @Input()\n  get compareWith(): (o1: any, o2: any) => boolean { return this._compareWith; }\n  set compareWith(fn: (o1: any, o2: any) => boolean) {\n    this._compareWith = fn;\n    if (this._selectionModel) {\n      // A different comparator means the selection could change.\n      this._initializeSelection();\n    }\n  }\n  private _compareWith = (o1: any, o2: any) => o1 === o2;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get value(): any { return this._value; }\n  set value(value: any) {\n    this.writeValue(value);\n    this._value = value;\n  }\n  protected _value: any;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  get id(): string {\n    return this._chipInput ? this._chipInput.id : this._uid;\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get required(): boolean { return this._required; }\n  set required(value: boolean) {\n    this._required = coerceBooleanProperty(value);\n    this.stateChanges.next();\n  }\n  protected _required: boolean = false;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get placeholder(): string {\n    return this._chipInput ? this._chipInput.placeholder : this._placeholder;\n  }\n  set placeholder(value: string) {\n    this._placeholder = value;\n    this.stateChanges.next();\n  }\n  protected _placeholder: string;\n\n  /** Whether any chips or the matChipInput inside of this chip-list has focus. */\n  get focused(): boolean {\n    return (this._chipInput && this._chipInput.focused) || this._hasFocusedChip();\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  get empty(): boolean {\n    return (!this._chipInput || this._chipInput.empty) && this.chips.length === 0;\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  get shouldLabelFloat(): boolean { return !this.empty || this.focused; }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get disabled(): boolean { return this.ngControl ? !!this.ngControl.disabled : this._disabled; }\n  set disabled(value: boolean) {\n    this._disabled = coerceBooleanProperty(value);\n\n    if (this.chips) {\n      this.chips.forEach(chip => chip.disabled = this._disabled);\n    }\n  }\n  protected _disabled: boolean = false;\n\n  /** Orientation of the chip list. */\n  @Input('aria-orientation') ariaOrientation: 'horizontal' | 'vertical' = 'horizontal';\n\n  /**\n   * Whether or not this chip list is selectable. When a chip list is not selectable,\n   * the selected states for all the chips inside the chip list are always ignored.\n   */\n  @Input()\n  get selectable(): boolean { return this._selectable; }\n  set selectable(value: boolean) {\n    this._selectable = coerceBooleanProperty(value);\n\n    if (this.chips) {\n      this.chips.forEach(chip => chip.chipListSelectable = this._selectable);\n    }\n  }\n  protected _selectable: boolean = true;\n\n  @Input()\n  set tabIndex(value: number) {\n    this._userTabIndex = value;\n    this._tabIndex = value;\n  }\n\n  /** Combined stream of all of the child chips' selection change events. */\n  get chipSelectionChanges(): Observable<MatChipSelectionChange> {\n    return merge(...this.chips.map(chip => chip.selectionChange));\n  }\n\n  /** Combined stream of all of the child chips' focus change events. */\n  get chipFocusChanges(): Observable<MatChipEvent> {\n    return merge(...this.chips.map(chip => chip._onFocus));\n  }\n\n  /** Combined stream of all of the child chips' blur change events. */\n  get chipBlurChanges(): Observable<MatChipEvent> {\n    return merge(...this.chips.map(chip => chip._onBlur));\n  }\n\n  /** Combined stream of all of the child chips' remove change events. */\n  get chipRemoveChanges(): Observable<MatChipEvent> {\n    return merge(...this.chips.map(chip => chip.destroyed));\n  }\n\n  /** Event emitted when the selected chip list value has been changed by the user. */\n  @Output() readonly change: EventEmitter<MatChipListChange> =\n      new EventEmitter<MatChipListChange>();\n\n  /**\n   * Event that emits whenever the raw value of the chip-list changes. This is here primarily\n   * to facilitate the two-way binding for the `value` input.\n   * @docs-private\n   */\n  @Output() readonly valueChange: EventEmitter<any> = new EventEmitter<any>();\n\n  /** The chip components contained within this chip list. */\n  @ContentChildren(MatChip) chips: QueryList<MatChip>;\n\n  constructor(protected _elementRef: ElementRef<HTMLElement>,\n              private _changeDetectorRef: ChangeDetectorRef,\n              @Optional() private _dir: Directionality,\n              @Optional() _parentForm: NgForm,\n              @Optional() _parentFormGroup: FormGroupDirective,\n              _defaultErrorStateMatcher: ErrorStateMatcher,\n              /** @docs-private */\n              @Optional() @Self() public ngControl: NgControl) {\n    super(_defaultErrorStateMatcher, _parentForm, _parentFormGroup, ngControl);\n    if (this.ngControl) {\n      this.ngControl.valueAccessor = this;\n    }\n  }\n\n  ngAfterContentInit() {\n    this._keyManager = new FocusKeyManager<MatChip>(this.chips)\n      .withWrap()\n      .withVerticalOrientation()\n      .withHorizontalOrientation(this._dir ? this._dir.value : 'ltr');\n\n    // Prevents the chip list from capturing focus and redirecting\n    // it back to the first chip when the user tabs out.\n    this._keyManager.tabOut.pipe(takeUntil(this._destroyed)).subscribe(() => {\n      this._tabIndex = -1;\n      setTimeout(() => this._tabIndex = this._userTabIndex || 0);\n    });\n\n    // When the list changes, re-subscribe\n    this.chips.changes.pipe(startWith(null), takeUntil(this._destroyed)).subscribe(() => {\n      this._resetChips();\n\n      // Reset chips selected/deselected status\n      this._initializeSelection();\n\n      // Check to see if we need to update our tab index\n      this._updateTabIndex();\n\n      // Check to see if we have a destroyed chip and need to refocus\n      this._updateFocusForDestroyedChips();\n\n      this.stateChanges.next();\n    });\n  }\n\n  ngOnInit() {\n    this._selectionModel = new SelectionModel<MatChip>(this.multiple, undefined, false);\n    this.stateChanges.next();\n  }\n\n  ngDoCheck() {\n    if (this.ngControl) {\n      // We need to re-evaluate this on every change detection cycle, because there are some\n      // error triggers that we can't subscribe to (e.g. parent form submissions). This means\n      // that whatever logic is in here has to be super lean or we risk destroying the performance.\n      this.updateErrorState();\n    }\n  }\n\n  ngOnDestroy() {\n    this._destroyed.next();\n    this._destroyed.complete();\n    this.stateChanges.complete();\n\n    this._dropSubscriptions();\n  }\n\n\n  /** Associates an HTML input element with this chip list. */\n  registerInput(inputElement: MatChipInput): void {\n    this._chipInput = inputElement;\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  setDescribedByIds(ids: string[]) { this._ariaDescribedby = ids.join(' '); }\n\n  // Implemented as part of ControlValueAccessor.\n  writeValue(value: any): void {\n    if (this.chips) {\n      this._setSelectionByValue(value, false);\n    }\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnChange(fn: (value: any) => void): void {\n    this._onChange = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnTouched(fn: () => void): void {\n    this._onTouched = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n    this.stateChanges.next();\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  onContainerClick(event: MouseEvent) {\n    if (!this._originatesFromChip(event)) {\n      this.focus();\n    }\n  }\n\n  /**\n   * Focuses the the first non-disabled chip in this chip list, or the associated input when there\n   * are no eligible chips.\n   */\n  focus(): void {\n    if (this.disabled) {\n      return;\n    }\n\n    // TODO: ARIA says this should focus the first `selected` chip if any are selected.\n    // Focus on first element if there's no chipInput inside chip-list\n    if (this._chipInput && this._chipInput.focused) {\n      // do nothing\n    } else if (this.chips.length > 0) {\n      this._keyManager.setFirstItemActive();\n      this.stateChanges.next();\n    } else {\n      this._focusInput();\n      this.stateChanges.next();\n    }\n  }\n\n  /** Attempt to focus an input if we have one. */\n  _focusInput() {\n    if (this._chipInput) {\n      this._chipInput.focus();\n    }\n  }\n\n  /**\n   * Pass events to the keyboard manager. Available here for tests.\n   */\n  _keydown(event: KeyboardEvent) {\n    const target = event.target as HTMLElement;\n\n    // If they are on an empty input and hit backspace, focus the last chip\n    if (event.keyCode === BACKSPACE && this._isInputEmpty(target)) {\n      this._keyManager.setLastItemActive();\n      event.preventDefault();\n    } else if (target && target.classList.contains('mat-chip')) {\n      if (event.keyCode === HOME) {\n        this._keyManager.setFirstItemActive();\n        event.preventDefault();\n      } else if (event.keyCode === END) {\n        this._keyManager.setLastItemActive();\n        event.preventDefault();\n      } else {\n        this._keyManager.onKeydown(event);\n      }\n\n      this.stateChanges.next();\n    }\n  }\n\n\n  /**\n   * Check the tab index as you should not be allowed to focus an empty list.\n   */\n  protected _updateTabIndex(): void {\n    // If we have 0 chips, we should not allow keyboard focus\n    this._tabIndex = this._userTabIndex || (this.chips.length === 0 ? -1 : 0);\n  }\n\n  /**\n   * If the amount of chips changed, we need to update the\n   * key manager state and focus the next closest chip.\n   */\n  protected _updateFocusForDestroyedChips() {\n    if (this._lastDestroyedChipIndex != null && this.chips.length) {\n      const newChipIndex = Math.min(this._lastDestroyedChipIndex, this.chips.length - 1);\n      this._keyManager.setActiveItem(newChipIndex);\n    }\n\n    this._lastDestroyedChipIndex = null;\n  }\n\n  /**\n   * Utility to ensure all indexes are valid.\n   *\n   * @param index The index to be checked.\n   * @returns True if the index is valid for our list of chips.\n   */\n  private _isValidIndex(index: number): boolean {\n    return index >= 0 && index < this.chips.length;\n  }\n\n  private _isInputEmpty(element: HTMLElement): boolean {\n    if (element && element.nodeName.toLowerCase() === 'input') {\n      let input = element as HTMLInputElement;\n      return !input.value;\n    }\n\n    return false;\n  }\n\n  _setSelectionByValue(value: any, isUserInput: boolean = true) {\n    this._clearSelection();\n    this.chips.forEach(chip => chip.deselect());\n\n    if (Array.isArray(value)) {\n      value.forEach(currentValue => this._selectValue(currentValue, isUserInput));\n      this._sortValues();\n    } else {\n      const correspondingChip = this._selectValue(value, isUserInput);\n\n      // Shift focus to the active item. Note that we shouldn't do this in multiple\n      // mode, because we don't know what chip the user interacted with last.\n      if (correspondingChip) {\n        if (isUserInput) {\n          this._keyManager.setActiveItem(correspondingChip);\n        }\n      }\n    }\n  }\n\n  /**\n   * Finds and selects the chip based on its value.\n   * @returns Chip that has the corresponding value.\n   */\n  private _selectValue(value: any, isUserInput: boolean = true): MatChip | undefined {\n\n    const correspondingChip = this.chips.find(chip => {\n      return chip.value != null && this._compareWith(chip.value,  value);\n    });\n\n    if (correspondingChip) {\n      isUserInput ? correspondingChip.selectViaInteraction() : correspondingChip.select();\n      this._selectionModel.select(correspondingChip);\n    }\n\n    return correspondingChip;\n  }\n\n  private _initializeSelection(): void {\n    // Defer setting the value in order to avoid the \"Expression\n    // has changed after it was checked\" errors from Angular.\n    Promise.resolve().then(() => {\n      if (this.ngControl || this._value) {\n        this._setSelectionByValue(this.ngControl ? this.ngControl.value : this._value, false);\n        this.stateChanges.next();\n      }\n    });\n  }\n\n  /**\n   * Deselects every chip in the list.\n   * @param skip Chip that should not be deselected.\n   */\n  private _clearSelection(skip?: MatChip): void {\n    this._selectionModel.clear();\n    this.chips.forEach(chip => {\n      if (chip !== skip) {\n        chip.deselect();\n      }\n    });\n    this.stateChanges.next();\n  }\n\n  /**\n   * Sorts the model values, ensuring that they keep the same\n   * order that they have in the panel.\n   */\n  private _sortValues(): void {\n    if (this._multiple) {\n      this._selectionModel.clear();\n\n      this.chips.forEach(chip => {\n        if (chip.selected) {\n          this._selectionModel.select(chip);\n        }\n      });\n      this.stateChanges.next();\n    }\n  }\n\n  /** Emits change event to set the model value. */\n  private _propagateChanges(fallbackValue?: any): void {\n    let valueToEmit: any = null;\n\n    if (Array.isArray(this.selected)) {\n      valueToEmit = this.selected.map(chip => chip.value);\n    } else {\n      valueToEmit = this.selected ? this.selected.value : fallbackValue;\n    }\n    this._value = valueToEmit;\n    this.change.emit(new MatChipListChange(this, valueToEmit));\n    this.valueChange.emit(valueToEmit);\n    this._onChange(valueToEmit);\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** When blurred, mark the field as touched when focus moved outside the chip list. */\n  _blur() {\n    if (!this._hasFocusedChip()) {\n      this._keyManager.setActiveItem(-1);\n    }\n\n    if (!this.disabled) {\n      if (this._chipInput) {\n        // If there's a chip input, we should check whether the focus moved to chip input.\n        // If the focus is not moved to chip input, mark the field as touched. If the focus moved\n        // to chip input, do nothing.\n        // Timeout is needed to wait for the focus() event trigger on chip input.\n        setTimeout(() => {\n          if (!this.focused) {\n            this._markAsTouched();\n          }\n        });\n      } else {\n        // If there's no chip input, then mark the field as touched.\n        this._markAsTouched();\n      }\n    }\n  }\n\n  /** Mark the field as touched */\n  _markAsTouched() {\n    this._onTouched();\n    this._changeDetectorRef.markForCheck();\n    this.stateChanges.next();\n  }\n\n  private _resetChips() {\n    this._dropSubscriptions();\n    this._listenToChipsFocus();\n    this._listenToChipsSelection();\n    this._listenToChipsRemoved();\n  }\n\n  private _dropSubscriptions() {\n    if (this._chipFocusSubscription) {\n      this._chipFocusSubscription.unsubscribe();\n      this._chipFocusSubscription = null;\n    }\n\n    if (this._chipBlurSubscription) {\n      this._chipBlurSubscription.unsubscribe();\n      this._chipBlurSubscription = null;\n    }\n\n    if (this._chipSelectionSubscription) {\n      this._chipSelectionSubscription.unsubscribe();\n      this._chipSelectionSubscription = null;\n    }\n\n    if (this._chipRemoveSubscription) {\n      this._chipRemoveSubscription.unsubscribe();\n      this._chipRemoveSubscription = null;\n    }\n  }\n\n  /** Listens to user-generated selection events on each chip. */\n  private _listenToChipsSelection(): void {\n    this._chipSelectionSubscription = this.chipSelectionChanges.subscribe(event => {\n      event.source.selected\n        ? this._selectionModel.select(event.source)\n        : this._selectionModel.deselect(event.source);\n\n      // For single selection chip list, make sure the deselected value is unselected.\n      if (!this.multiple) {\n        this.chips.forEach(chip => {\n          if (!this._selectionModel.isSelected(chip) && chip.selected) {\n            chip.deselect();\n          }\n        });\n      }\n\n      if (event.isUserInput) {\n        this._propagateChanges();\n      }\n    });\n  }\n\n  /** Listens to user-generated selection events on each chip. */\n  private _listenToChipsFocus(): void {\n    this._chipFocusSubscription = this.chipFocusChanges.subscribe(event => {\n      let chipIndex: number = this.chips.toArray().indexOf(event.chip);\n\n      if (this._isValidIndex(chipIndex)) {\n        this._keyManager.updateActiveItemIndex(chipIndex);\n      }\n      this.stateChanges.next();\n    });\n\n    this._chipBlurSubscription = this.chipBlurChanges.subscribe(() => {\n      this._blur();\n      this.stateChanges.next();\n    });\n  }\n\n  private _listenToChipsRemoved(): void {\n    this._chipRemoveSubscription = this.chipRemoveChanges.subscribe(event => {\n      const chip = event.chip;\n      const chipIndex = this.chips.toArray().indexOf(event.chip);\n\n      // In case the chip that will be removed is currently focused, we temporarily store\n      // the index in order to be able to determine an appropriate sibling chip that will\n      // receive focus.\n      if (this._isValidIndex(chipIndex) && chip._hasFocus) {\n        this._lastDestroyedChipIndex = chipIndex;\n      }\n    });\n  }\n\n  /** Checks whether an event comes from inside a chip element. */\n  private _originatesFromChip(event: Event): boolean {\n    let currentElement = event.target as HTMLElement | null;\n\n    while (currentElement && currentElement !== this._elementRef.nativeElement) {\n      if (currentElement.classList.contains('mat-chip')) {\n        return true;\n      }\n\n      currentElement = currentElement.parentElement;\n    }\n\n    return false;\n  }\n\n  /** Checks whether any of the chips is focused. */\n  private _hasFocusedChip() {\n    return this.chips.some(chip => chip._hasFocus);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {Directive, ElementRef, EventEmitter, Input, Output, Inject, OnChanges} from '@angular/core';\nimport {MatChipList} from './chip-list';\nimport {MAT_CHIPS_DEFAULT_OPTIONS, MatChipsDefaultOptions} from './chip-default-options';\n\n\n/** Represents an input event on a `matChipInput`. */\nexport interface MatChipInputEvent {\n  /** The native `<input>` element that the event is being fired for. */\n  input: HTMLInputElement;\n\n  /** The value of the input. */\n  value: string;\n}\n\n// Increasing integer for generating unique ids.\nlet nextUniqueId = 0;\n\n/**\n * Directive that adds chip-specific behaviors to an input element inside `<mat-form-field>`.\n * May be placed inside or outside of an `<mat-chip-list>`.\n */\n@Directive({\n  selector: 'input[matChipInputFor]',\n  exportAs: 'matChipInput, matChipInputFor',\n  host: {\n    'class': 'mat-chip-input mat-input-element',\n    '(keydown)': '_keydown($event)',\n    '(blur)': '_blur()',\n    '(focus)': '_focus()',\n    '(input)': '_onInput()',\n    '[id]': 'id',\n    '[attr.disabled]': 'disabled || null',\n    '[attr.placeholder]': 'placeholder || null',\n    '[attr.aria-invalid]': '_chipList && _chipList.ngControl ? _chipList.ngControl.invalid : null',\n  }\n})\nexport class MatChipInput implements OnChanges {\n  /** Whether the control is focused. */\n  focused: boolean = false;\n  _chipList: MatChipList;\n\n  /** Register input for chip list */\n  @Input('matChipInputFor')\n  set chipList(value: MatChipList) {\n    if (value) {\n      this._chipList = value;\n      this._chipList.registerInput(this);\n    }\n  }\n\n  /**\n   * Whether or not the chipEnd event will be emitted when the input is blurred.\n   */\n  @Input('matChipInputAddOnBlur')\n  get addOnBlur(): boolean { return this._addOnBlur; }\n  set addOnBlur(value: boolean) { this._addOnBlur = coerceBooleanProperty(value); }\n  _addOnBlur: boolean = false;\n\n  /**\n   * The list of key codes that will trigger a chipEnd event.\n   *\n   * Defaults to `[ENTER]`.\n   */\n  @Input('matChipInputSeparatorKeyCodes')\n  separatorKeyCodes: number[] | Set<number> = this._defaultOptions.separatorKeyCodes;\n\n  /** Emitted when a chip is to be added. */\n  @Output('matChipInputTokenEnd')\n  chipEnd: EventEmitter<MatChipInputEvent> = new EventEmitter<MatChipInputEvent>();\n\n  /** The input's placeholder text. */\n  @Input() placeholder: string = '';\n\n  /** Unique id for the input. */\n  @Input() id: string = `mat-chip-list-input-${nextUniqueId++}`;\n\n  /** Whether the input is disabled. */\n  @Input()\n  get disabled(): boolean { return this._disabled || (this._chipList && this._chipList.disabled); }\n  set disabled(value: boolean) { this._disabled = coerceBooleanProperty(value); }\n  private _disabled: boolean = false;\n\n  /** Whether the input is empty. */\n  get empty(): boolean { return !this._inputElement.value; }\n\n  /** The native input element to which this directive is attached. */\n  protected _inputElement: HTMLInputElement;\n\n  constructor(\n    protected _elementRef: ElementRef<HTMLInputElement>,\n    @Inject(MAT_CHIPS_DEFAULT_OPTIONS) private _defaultOptions: MatChipsDefaultOptions) {\n    this._inputElement = this._elementRef.nativeElement as HTMLInputElement;\n  }\n\n  ngOnChanges() {\n    this._chipList.stateChanges.next();\n  }\n\n  /** Utility method to make host definition/tests more clear. */\n  _keydown(event?: KeyboardEvent) {\n    this._emitChipEnd(event);\n  }\n\n  /** Checks to see if the blur should emit the (chipEnd) event. */\n  _blur() {\n    if (this.addOnBlur) {\n      this._emitChipEnd();\n    }\n    this.focused = false;\n    // Blur the chip list if it is not focused\n    if (!this._chipList.focused) {\n      this._chipList._blur();\n    }\n    this._chipList.stateChanges.next();\n  }\n\n  _focus() {\n    this.focused = true;\n    this._chipList.stateChanges.next();\n  }\n\n  /** Checks to see if the (chipEnd) event needs to be emitted. */\n  _emitChipEnd(event?: KeyboardEvent) {\n    if (!this._inputElement.value && !!event) {\n      this._chipList._keydown(event);\n    }\n    if (!event || this._isSeparatorKey(event.keyCode)) {\n      this.chipEnd.emit({ input: this._inputElement, value: this._inputElement.value });\n\n      if (event) {\n        event.preventDefault();\n      }\n    }\n  }\n\n  _onInput() {\n    // Let chip list know whenever the value changes.\n    this._chipList.stateChanges.next();\n  }\n\n  /** Focuses the input. */\n  focus(): void {\n    this._inputElement.focus();\n  }\n\n  /** Checks whether a keycode is one of the configured separators. */\n  private _isSeparatorKey(keyCode: number) {\n    const separators = this.separatorKeyCodes;\n    return Array.isArray(separators) ? separators.indexOf(keyCode) > -1 : separators.has(keyCode);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ENTER} from '@angular/cdk/keycodes';\nimport {NgModule} from '@angular/core';\nimport {ErrorStateMatcher} from '@angular/material/core';\nimport {MatChip, MatChipAvatar, MatChipRemove, MatChipTrailingIcon} from './chip';\nimport {MAT_CHIPS_DEFAULT_OPTIONS, MatChipsDefaultOptions} from './chip-default-options';\nimport {MatChipInput} from './chip-input';\nimport {MatChipList} from './chip-list';\n\nconst CHIP_DECLARATIONS = [\n  MatChipList,\n  MatChip,\n  MatChipInput,\n  MatChipRemove,\n  MatChipAvatar,\n  MatChipTrailingIcon,\n];\n\n@NgModule({\n  exports: CHIP_DECLARATIONS,\n  declarations: CHIP_DECLARATIONS,\n  providers: [\n    ErrorStateMatcher,\n    {\n      provide: MAT_CHIPS_DEFAULT_OPTIONS,\n      useValue: {\n        separatorKeyCodes: [ENTER]\n      } as MatChipsDefaultOptions\n    }\n  ]\n})\nexport class MatChipsModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ViewContainerRef} from '@angular/core';\nimport {Direction} from '@angular/cdk/bidi';\nimport {ScrollStrategy} from '@angular/cdk/overlay';\n\n/** Valid ARIA roles for a dialog element. */\nexport type DialogRole = 'dialog' | 'alertdialog';\n\n/** Possible overrides for a dialog's position. */\nexport interface DialogPosition {\n  /** Override for the dialog's top position. */\n  top?: string;\n\n  /** Override for the dialog's bottom position. */\n  bottom?: string;\n\n  /** Override for the dialog's left position. */\n  left?: string;\n\n  /** Override for the dialog's right position. */\n  right?: string;\n}\n\n/**\n * Configuration for opening a modal dialog with the MatDialog service.\n */\nexport class MatDialogConfig<D = any> {\n\n  /**\n   * Where the attached component should live in Angular's *logical* component tree.\n   * This affects what is available for injection and the change detection order for the\n   * component instantiated inside of the dialog. This does not affect where the dialog\n   * content will be rendered.\n   */\n  viewContainerRef?: ViewContainerRef;\n\n  /** ID for the dialog. If omitted, a unique one will be generated. */\n  id?: string;\n\n  /** The ARIA role of the dialog element. */\n  role?: DialogRole = 'dialog';\n\n  /** Custom class for the overlay pane. */\n  panelClass?: string | string[] = '';\n\n  /** Whether the dialog has a backdrop. */\n  hasBackdrop?: boolean = true;\n\n  /** Custom class for the backdrop, */\n  backdropClass?: string = '';\n\n  /** Whether the user can use escape or clicking on the backdrop to close the modal. */\n  disableClose?: boolean = false;\n\n  /** Width of the dialog. */\n  width?: string = '';\n\n  /** Height of the dialog. */\n  height?: string = '';\n\n  /** Min-width of the dialog. If a number is provided, pixel units are assumed. */\n  minWidth?: number | string;\n\n  /** Min-height of the dialog. If a number is provided, pixel units are assumed. */\n  minHeight?: number | string;\n\n  /** Max-width of the dialog. If a number is provided, pixel units are assumed. Defaults to 80vw */\n  maxWidth?: number | string = '80vw';\n\n  /** Max-height of the dialog. If a number is provided, pixel units are assumed. */\n  maxHeight?: number | string;\n\n  /** Position overrides. */\n  position?: DialogPosition;\n\n  /** Data being injected into the child component. */\n  data?: D | null = null;\n\n  /** Layout direction for the dialog's content. */\n  direction?: Direction;\n\n  /** ID of the element that describes the dialog. */\n  ariaDescribedBy?: string | null = null;\n\n  /** Aria label to assign to the dialog element */\n  ariaLabel?: string | null = null;\n\n  /** Whether the dialog should focus the first focusable element on open. */\n  autoFocus?: boolean = true;\n\n  /**\n   * Whether the dialog should restore focus to the\n   * previously-focused element, after it's closed.\n   */\n  restoreFocus?: boolean = true;\n\n  /** Scroll strategy to be used for the dialog. */\n  scrollStrategy?: ScrollStrategy;\n\n  /**\n   * Whether the dialog should close when the user goes backwards/forwards in history.\n   * Note that this usually doesn't include clicking on links (unless the user is using\n   * the `HashLocationStrategy`).\n   */\n  closeOnNavigation?: boolean = true;\n\n  // TODO(jelbourn): add configuration for lifecycle hooks, ARIA labelling.\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\nconst animationBody = [\n  // Note: The `enter` animation transitions to `transform: none`, because for some reason\n  // specifying the transform explicitly, causes IE both to blur the dialog content and\n  // decimate the animation performance. Leaving it as `none` solves both issues.\n  state('void, exit', style({opacity: 0, transform: 'scale(0.7)'})),\n  state('enter', style({transform: 'none'})),\n  transition('* => enter', animate('150ms cubic-bezier(0, 0, 0.2, 1)',\n      style({transform: 'none', opacity: 1}))),\n  transition('* => void, * => exit',\n      animate('75ms cubic-bezier(0.4, 0.0, 0.2, 1)', style({opacity: 0}))),\n];\n\n/**\n * Animations used by MatDialog.\n * @docs-private\n */\nexport const matDialogAnimations: {\n  readonly dialogContainer: AnimationTriggerMetadata;\n  readonly slideDialog: AnimationTriggerMetadata;\n} = {\n  /** Animation that is applied on the dialog container by defalt. */\n  dialogContainer: trigger('dialogContainer', animationBody),\n\n  /** @deprecated @breaking-change 8.0.0 Use `matDialogAnimations.dialogContainer` instead. */\n  slideDialog: trigger('slideDialog', animationBody)\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ComponentRef,\n  ElementRef,\n  EmbeddedViewRef,\n  EventEmitter,\n  Inject,\n  Optional,\n  ChangeDetectorRef,\n  ViewChild,\n  ViewEncapsulation,\n  ChangeDetectionStrategy,\n} from '@angular/core';\nimport {DOCUMENT} from '@angular/common';\nimport {AnimationEvent} from '@angular/animations';\nimport {matDialogAnimations} from './dialog-animations';\nimport {\n  BasePortalOutlet,\n  ComponentPortal,\n  CdkPortalOutlet,\n  TemplatePortal\n} from '@angular/cdk/portal';\nimport {FocusTrap, FocusTrapFactory} from '@angular/cdk/a11y';\nimport {MatDialogConfig} from './dialog-config';\n\n\n/**\n * Throws an exception for the case when a ComponentPortal is\n * attached to a DomPortalOutlet without an origin.\n * @docs-private\n */\nexport function throwMatDialogContentAlreadyAttachedError() {\n  throw Error('Attempting to attach dialog content after content is already attached');\n}\n\n/**\n * Internal component that wraps user-provided dialog content.\n * Animation is based on https://material.io/guidelines/motion/choreography.html.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-dialog-container',\n  templateUrl: 'dialog-container.html',\n  styleUrls: ['dialog.css'],\n  encapsulation: ViewEncapsulation.None,\n  // Using OnPush for dialogs caused some G3 sync issues. Disabled until we can track them down.\n  // tslint:disable-next-line:validate-decorators\n  changeDetection: ChangeDetectionStrategy.Default,\n  animations: [matDialogAnimations.dialogContainer],\n  host: {\n    'class': 'mat-dialog-container',\n    'tabindex': '-1',\n    'aria-modal': 'true',\n    '[attr.id]': '_id',\n    '[attr.role]': '_config.role',\n    '[attr.aria-labelledby]': '_config.ariaLabel ? null : _ariaLabelledBy',\n    '[attr.aria-label]': '_config.ariaLabel',\n    '[attr.aria-describedby]': '_config.ariaDescribedBy || null',\n    '[@dialogContainer]': '_state',\n    '(@dialogContainer.start)': '_onAnimationStart($event)',\n    '(@dialogContainer.done)': '_onAnimationDone($event)',\n  },\n})\nexport class MatDialogContainer extends BasePortalOutlet {\n  /** The portal outlet inside of this container into which the dialog content will be loaded. */\n  @ViewChild(CdkPortalOutlet) _portalOutlet: CdkPortalOutlet;\n\n  /** The class that traps and manages focus within the dialog. */\n  private _focusTrap: FocusTrap;\n\n  /** Element that was focused before the dialog was opened. Save this to restore upon close. */\n  private _elementFocusedBeforeDialogWasOpened: HTMLElement | null = null;\n\n  /** State of the dialog animation. */\n  _state: 'void' | 'enter' | 'exit' = 'enter';\n\n  /** Emits when an animation state changes. */\n  _animationStateChanged = new EventEmitter<AnimationEvent>();\n\n  /** ID of the element that should be considered as the dialog's label. */\n  _ariaLabelledBy: string | null = null;\n\n  /** ID for the container DOM element. */\n  _id: string;\n\n  constructor(\n    private _elementRef: ElementRef,\n    private _focusTrapFactory: FocusTrapFactory,\n    private _changeDetectorRef: ChangeDetectorRef,\n    @Optional() @Inject(DOCUMENT) private _document: any,\n    /** The dialog configuration. */\n    public _config: MatDialogConfig) {\n\n    super();\n  }\n\n  /**\n   * Attach a ComponentPortal as content to this dialog container.\n   * @param portal Portal to be attached as the dialog content.\n   */\n  attachComponentPortal<T>(portal: ComponentPortal<T>): ComponentRef<T> {\n    if (this._portalOutlet.hasAttached()) {\n      throwMatDialogContentAlreadyAttachedError();\n    }\n\n    this._savePreviouslyFocusedElement();\n    return this._portalOutlet.attachComponentPortal(portal);\n  }\n\n  /**\n   * Attach a TemplatePortal as content to this dialog container.\n   * @param portal Portal to be attached as the dialog content.\n   */\n  attachTemplatePortal<C>(portal: TemplatePortal<C>): EmbeddedViewRef<C> {\n    if (this._portalOutlet.hasAttached()) {\n      throwMatDialogContentAlreadyAttachedError();\n    }\n\n    this._savePreviouslyFocusedElement();\n    return this._portalOutlet.attachTemplatePortal(portal);\n  }\n\n  /** Moves the focus inside the focus trap. */\n  private _trapFocus() {\n    if (!this._focusTrap) {\n      this._focusTrap = this._focusTrapFactory.create(this._elementRef.nativeElement);\n    }\n\n    // If were to attempt to focus immediately, then the content of the dialog would not yet be\n    // ready in instances where change detection has to run first. To deal with this, we simply\n    // wait for the microtask queue to be empty.\n    if (this._config.autoFocus) {\n      this._focusTrap.focusInitialElementWhenReady();\n    }\n  }\n\n  /** Restores focus to the element that was focused before the dialog opened. */\n  private _restoreFocus() {\n    const toFocus = this._elementFocusedBeforeDialogWasOpened;\n\n    // We need the extra check, because IE can set the `activeElement` to null in some cases.\n    if (this._config.restoreFocus && toFocus && typeof toFocus.focus === 'function') {\n      toFocus.focus();\n    }\n\n    if (this._focusTrap) {\n      this._focusTrap.destroy();\n    }\n  }\n\n  /** Saves a reference to the element that was focused before the dialog was opened. */\n  private _savePreviouslyFocusedElement() {\n    if (this._document) {\n      this._elementFocusedBeforeDialogWasOpened = this._document.activeElement as HTMLElement;\n\n      // Note that there is no focus method when rendering on the server.\n      if (this._elementRef.nativeElement.focus) {\n        // Move focus onto the dialog immediately in order to prevent the user from accidentally\n        // opening multiple dialogs at the same time. Needs to be async, because the element\n        // may not be focusable immediately.\n        Promise.resolve().then(() => this._elementRef.nativeElement.focus());\n      }\n    }\n  }\n\n  /** Callback, invoked whenever an animation on the host completes. */\n  _onAnimationDone(event: AnimationEvent) {\n    if (event.toState === 'enter') {\n      this._trapFocus();\n    } else if (event.toState === 'exit') {\n      this._restoreFocus();\n    }\n\n    this._animationStateChanged.emit(event);\n  }\n\n  /** Callback, invoked when an animation on the host starts. */\n  _onAnimationStart(event: AnimationEvent) {\n    this._animationStateChanged.emit(event);\n  }\n\n  /** Starts the dialog exit animation. */\n  _startExitAnimation(): void {\n    this._state = 'exit';\n\n    // Mark the container for check so it can react if the\n    // view container is using OnPush change detection.\n    this._changeDetectorRef.markForCheck();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ESCAPE} from '@angular/cdk/keycodes';\nimport {GlobalPositionStrategy, OverlayRef} from '@angular/cdk/overlay';\nimport {Location} from '@angular/common';\nimport {Observable, Subject} from 'rxjs';\nimport {filter, take} from 'rxjs/operators';\nimport {DialogPosition} from './dialog-config';\nimport {MatDialogContainer} from './dialog-container';\n\n\n// TODO(jelbourn): resizing\n\n// Counter for unique dialog ids.\nlet uniqueId = 0;\n\n/**\n * Reference to a dialog opened via the MatDialog service.\n */\nexport class MatDialogRef<T, R = any> {\n  /** The instance of component opened into the dialog. */\n  componentInstance: T;\n\n  /** Whether the user is allowed to close the dialog. */\n  disableClose: boolean | undefined = this._containerInstance._config.disableClose;\n\n  /** Subject for notifying the user that the dialog has finished opening. */\n  private readonly _afterOpened = new Subject<void>();\n\n  /** Subject for notifying the user that the dialog has finished closing. */\n  private readonly _afterClosed = new Subject<R | undefined>();\n\n  /** Subject for notifying the user that the dialog has started closing. */\n  private readonly _beforeClosed = new Subject<R | undefined>();\n\n  /** Result to be passed to afterClosed. */\n  private _result: R | undefined;\n\n  constructor(\n    private _overlayRef: OverlayRef,\n    public _containerInstance: MatDialogContainer,\n    // @breaking-change 8.0.0 `_location` parameter to be removed.\n    _location?: Location,\n    readonly id: string = `mat-dialog-${uniqueId++}`) {\n\n    // Pass the id along to the container.\n    _containerInstance._id = id;\n\n    // Emit when opening animation completes\n    _containerInstance._animationStateChanged.pipe(\n      filter(event => event.phaseName === 'done' && event.toState === 'enter'),\n      take(1)\n    )\n    .subscribe(() => {\n      this._afterOpened.next();\n      this._afterOpened.complete();\n    });\n\n    // Dispose overlay when closing animation is complete\n    _containerInstance._animationStateChanged.pipe(\n      filter(event => event.phaseName === 'done' && event.toState === 'exit'),\n      take(1)\n    ).subscribe(() => this._overlayRef.dispose());\n\n    _overlayRef.detachments().subscribe(() => {\n      this._beforeClosed.next(this._result);\n      this._beforeClosed.complete();\n      this._afterClosed.next(this._result);\n      this._afterClosed.complete();\n      this.componentInstance = null!;\n      this._overlayRef.dispose();\n    });\n\n    _overlayRef.keydownEvents()\n      .pipe(filter(event => event.keyCode === ESCAPE && !this.disableClose))\n      .subscribe(() => this.close());\n  }\n\n  /**\n   * Close the dialog.\n   * @param dialogResult Optional result to return to the dialog opener.\n   */\n  close(dialogResult?: R): void {\n    this._result = dialogResult;\n\n    // Transition the backdrop in parallel to the dialog.\n    this._containerInstance._animationStateChanged.pipe(\n      filter(event => event.phaseName === 'start'),\n      take(1)\n    )\n    .subscribe(() => {\n      this._beforeClosed.next(dialogResult);\n      this._beforeClosed.complete();\n      this._overlayRef.detachBackdrop();\n    });\n\n    this._containerInstance._startExitAnimation();\n  }\n\n  /**\n   * Gets an observable that is notified when the dialog is finished opening.\n   */\n  afterOpened(): Observable<void> {\n    return this._afterOpened.asObservable();\n  }\n\n  /**\n   * Gets an observable that is notified when the dialog is finished closing.\n   */\n  afterClosed(): Observable<R | undefined> {\n    return this._afterClosed.asObservable();\n  }\n\n  /**\n   * Gets an observable that is notified when the dialog has started closing.\n   */\n  beforeClosed(): Observable<R | undefined> {\n    return this._beforeClosed.asObservable();\n  }\n\n  /**\n   * Gets an observable that emits when the overlay's backdrop has been clicked.\n   */\n  backdropClick(): Observable<MouseEvent> {\n    return this._overlayRef.backdropClick();\n  }\n\n  /**\n   * Gets an observable that emits when keydown events are targeted on the overlay.\n   */\n  keydownEvents(): Observable<KeyboardEvent> {\n    return this._overlayRef.keydownEvents();\n  }\n\n  /**\n   * Updates the dialog's position.\n   * @param position New dialog position.\n   */\n  updatePosition(position?: DialogPosition): this {\n    let strategy = this._getPositionStrategy();\n\n    if (position && (position.left || position.right)) {\n      position.left ? strategy.left(position.left) : strategy.right(position.right);\n    } else {\n      strategy.centerHorizontally();\n    }\n\n    if (position && (position.top || position.bottom)) {\n      position.top ? strategy.top(position.top) : strategy.bottom(position.bottom);\n    } else {\n      strategy.centerVertically();\n    }\n\n    this._overlayRef.updatePosition();\n\n    return this;\n  }\n\n  /**\n   * Updates the dialog's width and height.\n   * @param width New width of the dialog.\n   * @param height New height of the dialog.\n   */\n  updateSize(width: string = '', height: string = ''): this {\n    this._getPositionStrategy().width(width).height(height);\n    this._overlayRef.updatePosition();\n    return this;\n  }\n\n  /**\n   * Gets an observable that is notified when the dialog is finished opening.\n   * @deprecated Use `afterOpened` instead.\n   * @breaking-change 8.0.0\n   */\n  afterOpen(): Observable<void> {\n    return this.afterOpened();\n  }\n\n  /**\n   * Gets an observable that is notified when the dialog has started closing.\n   * @deprecated Use `beforeClosed` instead.\n   * @breaking-change 8.0.0\n   */\n  beforeClose(): Observable<R | undefined> {\n    return this.beforeClosed();\n  }\n\n  /** Fetches the position strategy object from the overlay ref. */\n  private _getPositionStrategy(): GlobalPositionStrategy {\n    return this._overlayRef.getConfig().positionStrategy as GlobalPositionStrategy;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directionality} from '@angular/cdk/bidi';\nimport {\n  Overlay,\n  OverlayConfig,\n  OverlayContainer,\n  OverlayRef,\n  ScrollStrategy,\n} from '@angular/cdk/overlay';\nimport {ComponentPortal, ComponentType, PortalInjector, TemplatePortal} from '@angular/cdk/portal';\nimport {Location} from '@angular/common';\nimport {\n  Inject,\n  Injectable,\n  InjectionToken,\n  Injector,\n  OnDestroy,\n  Optional,\n  SkipSelf,\n  TemplateRef,\n} from '@angular/core';\nimport {defer, Observable, of as observableOf, Subject} from 'rxjs';\nimport {startWith} from 'rxjs/operators';\nimport {MatDialogConfig} from './dialog-config';\nimport {MatDialogContainer} from './dialog-container';\nimport {MatDialogRef} from './dialog-ref';\n\n\n/** Injection token that can be used to access the data that was passed in to a dialog. */\nexport const MAT_DIALOG_DATA = new InjectionToken<any>('MatDialogData');\n\n/** Injection token that can be used to specify default dialog options. */\nexport const MAT_DIALOG_DEFAULT_OPTIONS =\n    new InjectionToken<MatDialogConfig>('mat-dialog-default-options');\n\n/** Injection token that determines the scroll handling while the dialog is open. */\nexport const MAT_DIALOG_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mat-dialog-scroll-strategy');\n\n/** @docs-private */\nexport function MAT_DIALOG_SCROLL_STRATEGY_FACTORY(overlay: Overlay): ()  => ScrollStrategy {\n  return () => overlay.scrollStrategies.block();\n}\n\n/** @docs-private */\nexport function MAT_DIALOG_SCROLL_STRATEGY_PROVIDER_FACTORY(overlay: Overlay):\n    () => ScrollStrategy {\n  return () => overlay.scrollStrategies.block();\n}\n\n/** @docs-private */\nexport const MAT_DIALOG_SCROLL_STRATEGY_PROVIDER = {\n  provide: MAT_DIALOG_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_DIALOG_SCROLL_STRATEGY_PROVIDER_FACTORY,\n};\n\n\n/**\n * Service to open Material Design modal dialogs.\n */\n@Injectable()\nexport class MatDialog implements OnDestroy {\n  private _openDialogsAtThisLevel: MatDialogRef<any>[] = [];\n  private readonly _afterAllClosedAtThisLevel = new Subject<void>();\n  private readonly _afterOpenedAtThisLevel = new Subject<MatDialogRef<any>>();\n  private _ariaHiddenElements = new Map<Element, string|null>();\n\n  /** Keeps track of the currently-open dialogs. */\n  get openDialogs(): MatDialogRef<any>[] {\n    return this._parentDialog ? this._parentDialog.openDialogs : this._openDialogsAtThisLevel;\n  }\n\n  /** Stream that emits when a dialog has been opened. */\n  get afterOpened(): Subject<MatDialogRef<any>> {\n    return this._parentDialog ? this._parentDialog.afterOpened : this._afterOpenedAtThisLevel;\n  }\n\n  /**\n   * Stream that emits when a dialog has been opened.\n   * @deprecated Use `afterOpened` instead.\n   * @breaking-change 8.0.0\n   */\n  get afterOpen(): Subject<MatDialogRef<any>> {\n    return this.afterOpened;\n  }\n\n  get _afterAllClosed() {\n    const parent = this._parentDialog;\n    return parent ? parent._afterAllClosed : this._afterAllClosedAtThisLevel;\n  }\n\n  /**\n   * Stream that emits when all open dialog have finished closing.\n   * Will emit on subscribe if there are no open dialogs to begin with.\n   */\n  readonly afterAllClosed: Observable<void> = defer<void>(() => this.openDialogs.length ?\n      this._afterAllClosed :\n      this._afterAllClosed.pipe(startWith(undefined)));\n\n  constructor(\n      private _overlay: Overlay,\n      private _injector: Injector,\n      @Optional() private _location: Location,\n      @Optional() @Inject(MAT_DIALOG_DEFAULT_OPTIONS) private _defaultOptions,\n      @Inject(MAT_DIALOG_SCROLL_STRATEGY) private _scrollStrategy,\n      @Optional() @SkipSelf() private _parentDialog: MatDialog,\n      private _overlayContainer: OverlayContainer) {}\n\n  /**\n   * Opens a modal dialog containing the given component.\n   * @param componentOrTemplateRef Type of the component to load into the dialog,\n   *     or a TemplateRef to instantiate as the dialog content.\n   * @param config Extra configuration options.\n   * @returns Reference to the newly-opened dialog.\n   */\n  open<T, D = any, R = any>(componentOrTemplateRef: ComponentType<T> | TemplateRef<T>,\n          config?: MatDialogConfig<D>): MatDialogRef<T, R> {\n\n    config = _applyConfigDefaults(config, this._defaultOptions || new MatDialogConfig());\n\n    if (config.id && this.getDialogById(config.id)) {\n      throw Error(`Dialog with id \"${config.id}\" exists already. The dialog id must be unique.`);\n    }\n\n    const overlayRef = this._createOverlay(config);\n    const dialogContainer = this._attachDialogContainer(overlayRef, config);\n    const dialogRef = this._attachDialogContent<T, R>(componentOrTemplateRef,\n                                                      dialogContainer,\n                                                      overlayRef,\n                                                      config);\n\n    // If this is the first dialog that we're opening, hide all the non-overlay content.\n    if (!this.openDialogs.length) {\n      this._hideNonDialogContentFromAssistiveTechnology();\n    }\n\n    this.openDialogs.push(dialogRef);\n    dialogRef.afterClosed().subscribe(() => this._removeOpenDialog(dialogRef));\n    this.afterOpened.next(dialogRef);\n\n    return dialogRef;\n  }\n\n  /**\n   * Closes all of the currently-open dialogs.\n   */\n  closeAll(): void {\n    this._closeDialogs(this.openDialogs);\n  }\n\n  /**\n   * Finds an open dialog by its id.\n   * @param id ID to use when looking up the dialog.\n   */\n  getDialogById(id: string): MatDialogRef<any> | undefined {\n    return this.openDialogs.find(dialog => dialog.id === id);\n  }\n\n  ngOnDestroy() {\n    // Only close the dialogs at this level on destroy\n    // since the parent service may still be active.\n    this._closeDialogs(this._openDialogsAtThisLevel);\n  }\n\n  /**\n   * Creates the overlay into which the dialog will be loaded.\n   * @param config The dialog configuration.\n   * @returns A promise resolving to the OverlayRef for the created overlay.\n   */\n  private _createOverlay(config: MatDialogConfig): OverlayRef {\n    const overlayConfig = this._getOverlayConfig(config);\n    return this._overlay.create(overlayConfig);\n  }\n\n  /**\n   * Creates an overlay config from a dialog config.\n   * @param dialogConfig The dialog configuration.\n   * @returns The overlay configuration.\n   */\n  private _getOverlayConfig(dialogConfig: MatDialogConfig): OverlayConfig {\n    const state = new OverlayConfig({\n      positionStrategy: this._overlay.position().global(),\n      scrollStrategy: dialogConfig.scrollStrategy || this._scrollStrategy(),\n      panelClass: dialogConfig.panelClass,\n      hasBackdrop: dialogConfig.hasBackdrop,\n      direction: dialogConfig.direction,\n      minWidth: dialogConfig.minWidth,\n      minHeight: dialogConfig.minHeight,\n      maxWidth: dialogConfig.maxWidth,\n      maxHeight: dialogConfig.maxHeight,\n      disposeOnNavigation: dialogConfig.closeOnNavigation\n    });\n\n    if (dialogConfig.backdropClass) {\n      state.backdropClass = dialogConfig.backdropClass;\n    }\n\n    return state;\n  }\n\n  /**\n   * Attaches an MatDialogContainer to a dialog's already-created overlay.\n   * @param overlay Reference to the dialog's underlying overlay.\n   * @param config The dialog configuration.\n   * @returns A promise resolving to a ComponentRef for the attached container.\n   */\n  private _attachDialogContainer(overlay: OverlayRef, config: MatDialogConfig): MatDialogContainer {\n    const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n    const injector = new PortalInjector(userInjector || this._injector, new WeakMap([\n      [MatDialogConfig, config]\n    ]));\n    const containerPortal =\n        new ComponentPortal(MatDialogContainer, config.viewContainerRef, injector);\n    const containerRef = overlay.attach<MatDialogContainer>(containerPortal);\n\n    return containerRef.instance;\n  }\n\n  /**\n   * Attaches the user-provided component to the already-created MatDialogContainer.\n   * @param componentOrTemplateRef The type of component being loaded into the dialog,\n   *     or a TemplateRef to instantiate as the content.\n   * @param dialogContainer Reference to the wrapping MatDialogContainer.\n   * @param overlayRef Reference to the overlay in which the dialog resides.\n   * @param config The dialog configuration.\n   * @returns A promise resolving to the MatDialogRef that should be returned to the user.\n   */\n  private _attachDialogContent<T, R>(\n      componentOrTemplateRef: ComponentType<T> | TemplateRef<T>,\n      dialogContainer: MatDialogContainer,\n      overlayRef: OverlayRef,\n      config: MatDialogConfig): MatDialogRef<T, R> {\n\n    // Create a reference to the dialog we're creating in order to give the user a handle\n    // to modify and close it.\n    const dialogRef =\n        new MatDialogRef<T, R>(overlayRef, dialogContainer, this._location, config.id);\n\n    // When the dialog backdrop is clicked, we want to close it.\n    if (config.hasBackdrop) {\n      overlayRef.backdropClick().subscribe(() => {\n        if (!dialogRef.disableClose) {\n          dialogRef.close();\n        }\n      });\n    }\n\n    if (componentOrTemplateRef instanceof TemplateRef) {\n      dialogContainer.attachTemplatePortal(\n        new TemplatePortal<T>(componentOrTemplateRef, null!,\n          <any>{ $implicit: config.data, dialogRef }));\n    } else {\n      const injector = this._createInjector<T>(config, dialogRef, dialogContainer);\n      const contentRef = dialogContainer.attachComponentPortal<T>(\n          new ComponentPortal(componentOrTemplateRef, undefined, injector));\n      dialogRef.componentInstance = contentRef.instance;\n    }\n\n    dialogRef\n      .updateSize(config.width, config.height)\n      .updatePosition(config.position);\n\n    return dialogRef;\n  }\n\n  /**\n   * Creates a custom injector to be used inside the dialog. This allows a component loaded inside\n   * of a dialog to close itself and, optionally, to return a value.\n   * @param config Config object that is used to construct the dialog.\n   * @param dialogRef Reference to the dialog.\n   * @param container Dialog container element that wraps all of the contents.\n   * @returns The custom injector that can be used inside the dialog.\n   */\n  private _createInjector<T>(\n      config: MatDialogConfig,\n      dialogRef: MatDialogRef<T>,\n      dialogContainer: MatDialogContainer): PortalInjector {\n\n    const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n\n    // The MatDialogContainer is injected in the portal as the MatDialogContainer and the dialog's\n    // content are created out of the same ViewContainerRef and as such, are siblings for injector\n    // purposes. To allow the hierarchy that is expected, the MatDialogContainer is explicitly\n    // added to the injection tokens.\n    const injectionTokens = new WeakMap<any, any>([\n      [MatDialogContainer, dialogContainer],\n      [MAT_DIALOG_DATA, config.data],\n      [MatDialogRef, dialogRef]\n    ]);\n\n    if (config.direction &&\n        (!userInjector || !userInjector.get<Directionality | null>(Directionality, null))) {\n      injectionTokens.set(Directionality, {\n        value: config.direction,\n        change: observableOf()\n      });\n    }\n\n    return new PortalInjector(userInjector || this._injector, injectionTokens);\n  }\n\n  /**\n   * Removes a dialog from the array of open dialogs.\n   * @param dialogRef Dialog to be removed.\n   */\n  private _removeOpenDialog(dialogRef: MatDialogRef<any>) {\n    const index = this.openDialogs.indexOf(dialogRef);\n\n    if (index > -1) {\n      this.openDialogs.splice(index, 1);\n\n      // If all the dialogs were closed, remove/restore the `aria-hidden`\n      // to a the siblings and emit to the `afterAllClosed` stream.\n      if (!this.openDialogs.length) {\n        this._ariaHiddenElements.forEach((previousValue, element) => {\n          if (previousValue) {\n            element.setAttribute('aria-hidden', previousValue);\n          } else {\n            element.removeAttribute('aria-hidden');\n          }\n        });\n\n        this._ariaHiddenElements.clear();\n        this._afterAllClosed.next();\n      }\n    }\n  }\n\n  /**\n   * Hides all of the content that isn't an overlay from assistive technology.\n   */\n  private _hideNonDialogContentFromAssistiveTechnology() {\n    const overlayContainer = this._overlayContainer.getContainerElement();\n\n    // Ensure that the overlay container is attached to the DOM.\n    if (overlayContainer.parentElement) {\n      const siblings = overlayContainer.parentElement.children;\n\n      for (let i = siblings.length - 1; i > -1; i--) {\n        let sibling = siblings[i];\n\n        if (sibling !== overlayContainer &&\n          sibling.nodeName !== 'SCRIPT' &&\n          sibling.nodeName !== 'STYLE' &&\n          !sibling.hasAttribute('aria-live')) {\n\n          this._ariaHiddenElements.set(sibling, sibling.getAttribute('aria-hidden'));\n          sibling.setAttribute('aria-hidden', 'true');\n        }\n      }\n    }\n  }\n\n  /** Closes all of the dialogs in an array. */\n  private _closeDialogs(dialogs: MatDialogRef<any>[]) {\n    let i = dialogs.length;\n\n    while (i--) {\n      // The `_openDialogs` property isn't updated after close until the rxjs subscription\n      // runs on the next microtask, in addition to modifying the array as we're going\n      // through it. We loop through all of them and call close without assuming that\n      // they'll be removed from the list instantaneously.\n      dialogs[i].close();\n    }\n  }\n\n}\n\n/**\n * Applies default options to the dialog config.\n * @param config Config to be modified.\n * @param defaultOptions Default options provided.\n * @returns The new configuration object.\n */\nfunction _applyConfigDefaults(\n    config?: MatDialogConfig, defaultOptions?: MatDialogConfig): MatDialogConfig {\n  return {...defaultOptions, ...config};\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Directive,\n  Input,\n  OnChanges,\n  OnInit,\n  Optional,\n  SimpleChanges,\n  ElementRef,\n} from '@angular/core';\nimport {MatDialog} from './dialog';\nimport {MatDialogRef} from './dialog-ref';\n\n/** Counter used to generate unique IDs for dialog elements. */\nlet dialogElementUid = 0;\n\n/**\n * Button that will close the current dialog.\n */\n@Directive({\n  selector: `button[mat-dialog-close], button[matDialogClose]`,\n  exportAs: 'matDialogClose',\n  host: {\n    '(click)': 'dialogRef.close(dialogResult)',\n    '[attr.aria-label]': 'ariaLabel',\n    'type': 'button', // Prevents accidental form submits.\n  }\n})\nexport class MatDialogClose implements OnInit, OnChanges {\n  /** Screenreader label for the button. */\n  @Input('aria-label') ariaLabel: string = 'Close dialog';\n\n  /** Dialog close input. */\n  @Input('mat-dialog-close') dialogResult: any;\n\n  @Input('matDialogClose') _matDialogClose: any;\n\n  constructor(\n    @Optional() public dialogRef: MatDialogRef<any>,\n    private _elementRef: ElementRef<HTMLElement>,\n    private _dialog: MatDialog) {}\n\n  ngOnInit() {\n    if (!this.dialogRef) {\n      // When this directive is included in a dialog via TemplateRef (rather than being\n      // in a Component), the DialogRef isn't available via injection because embedded\n      // views cannot be given a custom injector. Instead, we look up the DialogRef by\n      // ID. This must occur in `onInit`, as the ID binding for the dialog container won't\n      // be resolved at constructor time.\n      this.dialogRef = getClosestDialog(this._elementRef, this._dialog.openDialogs)!;\n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    const proxiedChange = changes._matDialogClose || changes._matDialogCloseResult;\n\n    if (proxiedChange) {\n      this.dialogResult = proxiedChange.currentValue;\n    }\n  }\n}\n\n/**\n * Title of a dialog element. Stays fixed to the top of the dialog when scrolling.\n */\n@Directive({\n  selector: '[mat-dialog-title], [matDialogTitle]',\n  exportAs: 'matDialogTitle',\n  host: {\n    'class': 'mat-dialog-title',\n    '[id]': 'id',\n  },\n})\nexport class MatDialogTitle implements OnInit {\n  @Input() id = `mat-dialog-title-${dialogElementUid++}`;\n\n  constructor(\n    @Optional() private _dialogRef: MatDialogRef<any>,\n    private _elementRef: ElementRef<HTMLElement>,\n    private _dialog: MatDialog) {}\n\n  ngOnInit() {\n    if (!this._dialogRef) {\n      this._dialogRef = getClosestDialog(this._elementRef, this._dialog.openDialogs)!;\n    }\n\n    if (this._dialogRef) {\n      Promise.resolve().then(() => {\n        const container = this._dialogRef._containerInstance;\n\n        if (container && !container._ariaLabelledBy) {\n          container._ariaLabelledBy = this.id;\n        }\n      });\n    }\n  }\n}\n\n\n/**\n * Scrollable content container of a dialog.\n */\n@Directive({\n  selector: `[mat-dialog-content], mat-dialog-content, [matDialogContent]`,\n  host: {'class': 'mat-dialog-content'}\n})\nexport class MatDialogContent {}\n\n\n/**\n * Container for the bottom action buttons in a dialog.\n * Stays fixed to the bottom when scrolling.\n */\n@Directive({\n  selector: `[mat-dialog-actions], mat-dialog-actions, [matDialogActions]`,\n  host: {'class': 'mat-dialog-actions'}\n})\nexport class MatDialogActions {}\n\n\n/**\n * Finds the closest MatDialogRef to an element by looking at the DOM.\n * @param element Element relative to which to look for a dialog.\n * @param openDialogs References to the currently-open dialogs.\n */\nfunction getClosestDialog(element: ElementRef<HTMLElement>, openDialogs: MatDialogRef<any>[]) {\n  let parent: HTMLElement | null = element.nativeElement.parentElement;\n\n  while (parent && !parent.classList.contains('mat-dialog-container')) {\n    parent = parent.parentElement;\n  }\n\n  return parent ? openDialogs.find(dialog => dialog.id === parent!.id) : null;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MAT_DIALOG_SCROLL_STRATEGY_PROVIDER, MatDialog} from './dialog';\nimport {MatDialogContainer} from './dialog-container';\nimport {\n  MatDialogActions,\n  MatDialogClose,\n  MatDialogContent,\n  MatDialogTitle,\n} from './dialog-content-directives';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    OverlayModule,\n    PortalModule,\n    MatCommonModule,\n  ],\n  exports: [\n    MatDialogContainer,\n    MatDialogClose,\n    MatDialogTitle,\n    MatDialogContent,\n    MatDialogActions,\n    MatCommonModule,\n  ],\n  declarations: [\n    MatDialogContainer,\n    MatDialogClose,\n    MatDialogTitle,\n    MatDialogActions,\n    MatDialogContent,\n  ],\n  providers: [\n    MatDialog,\n    MAT_DIALOG_SCROLL_STRATEGY_PROVIDER,\n  ],\n  entryComponents: [MatDialogContainer],\n})\nexport class MatDialogModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CdkTextareaAutosize} from '@angular/cdk/text-field';\nimport {Directive, Input} from '@angular/core';\n\n// TODO(devversion): Workaround for https://github.com/angular/material2/issues/12760\nexport const _CdkTextareaAutosize = CdkTextareaAutosize;\n\n/**\n * Directive to automatically resize a textarea to fit its content.\n * @deprecated Use `cdkTextareaAutosize` from `@angular/cdk/text-field` instead.\n * @breaking-change 7.0.0\n */\n@Directive({\n  selector: 'textarea[mat-autosize], textarea[matTextareaAutosize]',\n  exportAs: 'matTextareaAutosize',\n  inputs: ['cdkAutosizeMinRows', 'cdkAutosizeMaxRows'],\n  host: {\n    'class': 'cdk-textarea-autosize mat-autosize',\n    // Textarea elements that have the directive applied should have a single row by default.\n    // Browsers normally show two rows by default and therefore this limits the minRows binding.\n    'rows': '1',\n    '(input)': '_noopInputHandler()',\n  },\n})\nexport class MatTextareaAutosize extends _CdkTextareaAutosize {\n  @Input()\n  get matAutosizeMinRows(): number { return this.minRows; }\n  set matAutosizeMinRows(value: number) { this.minRows = value; }\n\n  @Input()\n  get matAutosizeMaxRows(): number { return this.maxRows; }\n  set matAutosizeMaxRows(value: number) { this.maxRows = value; }\n\n  @Input('mat-autosize')\n  get matAutosize(): boolean { return this.enabled; }\n  set matAutosize(value: boolean) { this.enabled = value; }\n\n  @Input()\n  get matTextareaAutosize(): boolean { return this.enabled; }\n  set matTextareaAutosize(value: boolean) { this.enabled = value; }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {InjectionToken} from '@angular/core';\n\n\n/**\n * This token is used to inject the object whose value should be set into `MatInput`. If none is\n * provided, the native `HTMLInputElement` is used. Directives like `MatDatepickerInput` can provide\n * themselves for this token, in order to make `MatInput` delegate the getting and setting of the\n * value to them.\n */\nexport const MAT_INPUT_VALUE_ACCESSOR =\n    new InjectionToken<{value: any}>('MAT_INPUT_VALUE_ACCESSOR');\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {getSupportedInputTypes, Platform} from '@angular/cdk/platform';\nimport {AutofillMonitor} from '@angular/cdk/text-field';\nimport {\n  Directive,\n  DoCheck,\n  ElementRef,\n  Inject,\n  Input,\n  NgZone,\n  OnChanges,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Self,\n} from '@angular/core';\nimport {FormGroupDirective, NgControl, NgForm} from '@angular/forms';\nimport {\n  CanUpdateErrorState,\n  CanUpdateErrorStateCtor,\n  ErrorStateMatcher,\n  mixinErrorState,\n} from '@angular/material/core';\nimport {MatFormFieldControl} from '@angular/material/form-field';\nimport {Subject} from 'rxjs';\nimport {getMatInputUnsupportedTypeError} from './input-errors';\nimport {MAT_INPUT_VALUE_ACCESSOR} from './input-value-accessor';\n\n\n// Invalid input type. Using one of these will throw an MatInputUnsupportedTypeError.\nconst MAT_INPUT_INVALID_TYPES = [\n  'button',\n  'checkbox',\n  'file',\n  'hidden',\n  'image',\n  'radio',\n  'range',\n  'reset',\n  'submit'\n];\n\nlet nextUniqueId = 0;\n\n// Boilerplate for applying mixins to MatInput.\n/** @docs-private */\nexport class MatInputBase {\n  constructor(public _defaultErrorStateMatcher: ErrorStateMatcher,\n              public _parentForm: NgForm,\n              public _parentFormGroup: FormGroupDirective,\n              /** @docs-private */\n              public ngControl: NgControl) {}\n}\nexport const _MatInputMixinBase: CanUpdateErrorStateCtor & typeof MatInputBase =\n    mixinErrorState(MatInputBase);\n\n/** Directive that allows a native input to work inside a `MatFormField`. */\n@Directive({\n  selector: `input[matInput], textarea[matInput], select[matNativeControl],\n      input[matNativeControl], textarea[matNativeControl]`,\n  exportAs: 'matInput',\n  host: {\n    /**\n     * @breaking-change 7.0.0 remove .mat-form-field-autofill-control in favor of AutofillMonitor.\n     */\n    'class': 'mat-input-element mat-form-field-autofill-control',\n    '[class.mat-input-server]': '_isServer',\n    // Native input properties that are overwritten by Angular inputs need to be synced with\n    // the native input element. Otherwise property bindings for those don't work.\n    '[attr.id]': 'id',\n    '[attr.placeholder]': 'placeholder',\n    '[disabled]': 'disabled',\n    '[required]': 'required',\n    '[attr.readonly]': 'readonly && !_isNativeSelect || null',\n    '[attr.aria-describedby]': '_ariaDescribedby || null',\n    '[attr.aria-invalid]': 'errorState',\n    '[attr.aria-required]': 'required.toString()',\n    '(blur)': '_focusChanged(false)',\n    '(focus)': '_focusChanged(true)',\n    '(input)': '_onInput()',\n  },\n  providers: [{provide: MatFormFieldControl, useExisting: MatInput}],\n})\nexport class MatInput extends _MatInputMixinBase implements MatFormFieldControl<any>, OnChanges,\n    OnDestroy, OnInit, DoCheck, CanUpdateErrorState {\n  protected _uid = `mat-input-${nextUniqueId++}`;\n  protected _previousNativeValue: any;\n  private _inputValueAccessor: {value: any};\n  /** The aria-describedby attribute on the input for improved a11y. */\n  _ariaDescribedby: string;\n\n  /** Whether the component is being rendered on the server. */\n  _isServer = false;\n\n  /** Whether the component is a native html select. */\n  _isNativeSelect = false;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  focused: boolean = false;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  readonly stateChanges: Subject<void> = new Subject<void>();\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  controlType: string = 'mat-input';\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  autofilled = false;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get disabled(): boolean {\n    if (this.ngControl && this.ngControl.disabled !== null) {\n      return this.ngControl.disabled;\n    }\n    return this._disabled;\n  }\n  set disabled(value: boolean) {\n    this._disabled = coerceBooleanProperty(value);\n\n    // Browsers may not fire the blur event if the input is disabled too quickly.\n    // Reset from here to ensure that the element doesn't become stuck.\n    if (this.focused) {\n      this.focused = false;\n      this.stateChanges.next();\n    }\n  }\n  protected _disabled = false;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get id(): string { return this._id; }\n  set id(value: string) { this._id = value || this._uid; }\n  protected _id: string;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input() placeholder: string;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get required(): boolean { return this._required; }\n  set required(value: boolean) { this._required = coerceBooleanProperty(value); }\n  protected _required = false;\n\n  /** Input type of the element. */\n  @Input()\n  get type(): string { return this._type; }\n  set type(value: string) {\n    this._type = value || 'text';\n    this._validateType();\n\n    // When using Angular inputs, developers are no longer able to set the properties on the native\n    // input element. To ensure that bindings for `type` work, we need to sync the setter\n    // with the native property. Textarea elements don't support the type property or attribute.\n    if (!this._isTextarea() && getSupportedInputTypes().has(this._type)) {\n      (this._elementRef.nativeElement as HTMLInputElement).type = this._type;\n    }\n  }\n  protected _type = 'text';\n\n  /** An object used to control when error messages are shown. */\n  @Input() errorStateMatcher: ErrorStateMatcher;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get value(): string { return this._inputValueAccessor.value; }\n  set value(value: string) {\n    if (value !== this.value) {\n      this._inputValueAccessor.value = value;\n      this.stateChanges.next();\n    }\n  }\n\n  /** Whether the element is readonly. */\n  @Input()\n  get readonly(): boolean { return this._readonly; }\n  set readonly(value: boolean) { this._readonly = coerceBooleanProperty(value); }\n  private _readonly = false;\n\n  protected _neverEmptyInputTypes = [\n    'date',\n    'datetime',\n    'datetime-local',\n    'month',\n    'time',\n    'week'\n  ].filter(t => getSupportedInputTypes().has(t));\n\n  constructor(\n    protected _elementRef: ElementRef<HTMLInputElement | HTMLSelectElement | HTMLTextAreaElement>,\n    protected _platform: Platform,\n    /** @docs-private */\n    @Optional() @Self() public ngControl: NgControl,\n    @Optional() _parentForm: NgForm,\n    @Optional() _parentFormGroup: FormGroupDirective,\n    _defaultErrorStateMatcher: ErrorStateMatcher,\n    @Optional() @Self() @Inject(MAT_INPUT_VALUE_ACCESSOR) inputValueAccessor: any,\n    private _autofillMonitor: AutofillMonitor,\n    ngZone: NgZone) {\n\n    super(_defaultErrorStateMatcher, _parentForm, _parentFormGroup, ngControl);\n\n    const element = this._elementRef.nativeElement;\n\n    // If no input value accessor was explicitly specified, use the element as the input value\n    // accessor.\n    this._inputValueAccessor = inputValueAccessor || element;\n\n    this._previousNativeValue = this.value;\n\n    // Force setter to be called in case id was not specified.\n    this.id = this.id;\n\n    // On some versions of iOS the caret gets stuck in the wrong place when holding down the delete\n    // key. In order to get around this we need to \"jiggle\" the caret loose. Since this bug only\n    // exists on iOS, we only bother to install the listener on iOS.\n    if (_platform.IOS) {\n      ngZone.runOutsideAngular(() => {\n        _elementRef.nativeElement.addEventListener('keyup', (event: Event) => {\n          let el = event.target as HTMLInputElement;\n          if (!el.value && !el.selectionStart && !el.selectionEnd) {\n            // Note: Just setting `0, 0` doesn't fix the issue. Setting\n            // `1, 1` fixes it for the first time that you type text and\n            // then hold delete. Toggling to `1, 1` and then back to\n            // `0, 0` seems to completely fix it.\n            el.setSelectionRange(1, 1);\n            el.setSelectionRange(0, 0);\n          }\n        });\n      });\n    }\n\n    this._isServer = !this._platform.isBrowser;\n    this._isNativeSelect = element.nodeName.toLowerCase() === 'select';\n\n    if (this._isNativeSelect) {\n      this.controlType = (element as HTMLSelectElement).multiple ? 'mat-native-select-multiple' :\n                                                                   'mat-native-select';\n    }\n  }\n\n  ngOnInit() {\n    if (this._platform.isBrowser) {\n      this._autofillMonitor.monitor(this._elementRef.nativeElement).subscribe(event => {\n        this.autofilled = event.isAutofilled;\n        this.stateChanges.next();\n      });\n    }\n  }\n\n  ngOnChanges() {\n    this.stateChanges.next();\n  }\n\n  ngOnDestroy() {\n    this.stateChanges.complete();\n\n    if (this._platform.isBrowser) {\n      this._autofillMonitor.stopMonitoring(this._elementRef.nativeElement);\n    }\n  }\n\n  ngDoCheck() {\n    if (this.ngControl) {\n      // We need to re-evaluate this on every change detection cycle, because there are some\n      // error triggers that we can't subscribe to (e.g. parent form submissions). This means\n      // that whatever logic is in here has to be super lean or we risk destroying the performance.\n      this.updateErrorState();\n    }\n\n    // We need to dirty-check the native element's value, because there are some cases where\n    // we won't be notified when it changes (e.g. the consumer isn't using forms or they're\n    // updating the value using `emitEvent: false`).\n    this._dirtyCheckNativeValue();\n  }\n\n  /** Focuses the input. */\n  focus(): void { this._elementRef.nativeElement.focus(); }\n\n  /** Callback for the cases where the focused state of the input changes. */\n  _focusChanged(isFocused: boolean) {\n    if (isFocused !== this.focused && !this.readonly) {\n      this.focused = isFocused;\n      this.stateChanges.next();\n    }\n  }\n\n  _onInput() {\n    // This is a noop function and is used to let Angular know whenever the value changes.\n    // Angular will run a new change detection each time the `input` event has been dispatched.\n    // It's necessary that Angular recognizes the value change, because when floatingLabel\n    // is set to false and Angular forms aren't used, the placeholder won't recognize the\n    // value changes and will not disappear.\n    // Listening to the input event wouldn't be necessary when the input is using the\n    // FormsModule or ReactiveFormsModule, because Angular forms also listens to input events.\n  }\n\n  /** Does some manual dirty checking on the native input `value` property. */\n  protected _dirtyCheckNativeValue() {\n    const newValue = this._elementRef.nativeElement.value;\n\n    if (this._previousNativeValue !== newValue) {\n      this._previousNativeValue = newValue;\n      this.stateChanges.next();\n    }\n  }\n\n  /** Make sure the input is a supported type. */\n  protected _validateType() {\n    if (MAT_INPUT_INVALID_TYPES.indexOf(this._type) > -1) {\n      throw getMatInputUnsupportedTypeError(this._type);\n    }\n  }\n\n  /** Checks whether the input type is one of the types that are never empty. */\n  protected _isNeverEmpty() {\n    return this._neverEmptyInputTypes.indexOf(this._type) > -1;\n  }\n\n  /** Checks whether the input is invalid based on the native validation. */\n  protected _isBadInput() {\n    // The `validity` property won't be present on platform-server.\n    let validity = (this._elementRef.nativeElement as HTMLInputElement).validity;\n    return validity && validity.badInput;\n  }\n\n  /** Determines if the component host is a textarea. */\n  protected _isTextarea() {\n    return this._elementRef.nativeElement.nodeName.toLowerCase() === 'textarea';\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  get empty(): boolean {\n    return !this._isNeverEmpty() && !this._elementRef.nativeElement.value && !this._isBadInput() &&\n        !this.autofilled;\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  get shouldLabelFloat(): boolean {\n    if (this._isNativeSelect) {\n      // For a single-selection `<select>`, the label should float when the selected option has\n      // a non-empty display value. For a `<select multiple>`, the label *always* floats to avoid\n      // overlapping the label with the options.\n      const selectElement = this._elementRef.nativeElement as HTMLSelectElement;\n\n      return selectElement.multiple || !this.empty || !!selectElement.options[0].label ||\n          this.focused;\n    } else {\n      return this.focused || !this.empty;\n    }\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  setDescribedByIds(ids: string[]) { this._ariaDescribedby = ids.join(' '); }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  onContainerClick() {\n    // Do not re-focus the input element if the element is already focused. Otherwise it can happen\n    // that someone clicks on a time input and the cursor resets to the \"hours\" field while the\n    // \"minutes\" field was actually clicked. See: https://github.com/angular/material2/issues/12849\n    if (!this.focused) {\n      this.focus();\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {TextFieldModule} from '@angular/cdk/text-field';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {ErrorStateMatcher} from '@angular/material/core';\nimport {MatFormFieldModule} from '@angular/material/form-field';\nimport {MatTextareaAutosize} from './autosize';\nimport {MatInput} from './input';\n\n\n@NgModule({\n  declarations: [MatInput, MatTextareaAutosize],\n  imports: [\n    CommonModule,\n    TextFieldModule,\n    MatFormFieldModule,\n  ],\n  exports: [\n    TextFieldModule,\n    // We re-export the `MatFormFieldModule` since `MatInput` will almost always\n    // be used together with `MatFormField`.\n    MatFormFieldModule,\n    MatInput,\n    MatTextareaAutosize,\n  ],\n  providers: [ErrorStateMatcher],\n})\nexport class MatInputModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable} from '@angular/core';\nimport {Subject} from 'rxjs';\n\n\n/** Datepicker data that requires internationalization. */\n@Injectable({providedIn: 'root'})\nexport class MatDatepickerIntl {\n  /**\n   * Stream that emits whenever the labels here are changed. Use this to notify\n   * components if the labels have changed after initialization.\n   */\n  readonly changes: Subject<void> = new Subject<void>();\n\n  /** A label for the calendar popup (used by screen readers). */\n  calendarLabel: string = 'Calendar';\n\n  /** A label for the button used to open the calendar popup (used by screen readers). */\n  openCalendarLabel: string = 'Open calendar';\n\n  /** A label for the previous month button (used by screen readers). */\n  prevMonthLabel: string = 'Previous month';\n\n  /** A label for the next month button (used by screen readers). */\n  nextMonthLabel: string = 'Next month';\n\n  /** A label for the previous year button (used by screen readers). */\n  prevYearLabel: string = 'Previous year';\n\n  /** A label for the next year button (used by screen readers). */\n  nextYearLabel: string = 'Next year';\n\n  /** A label for the previous multi-year button (used by screen readers). */\n  prevMultiYearLabel: string = 'Previous 20 years';\n\n  /** A label for the next multi-year button (used by screen readers). */\n  nextMultiYearLabel: string = 'Next 20 years';\n\n  /** A label for the 'switch to month view' button (used by screen readers). */\n  switchToMonthViewLabel: string = 'Choose date';\n\n  /** A label for the 'switch to year view' button (used by screen readers). */\n  switchToMultiYearViewLabel: string = 'Choose month and year';\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  Output,\n  ViewChild,\n  ViewEncapsulation,\n  AfterViewChecked,\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {\n  CanColor,\n  CanColorCtor,\n  CanDisable,\n  CanDisableCtor,\n  CanDisableRipple,\n  CanDisableRippleCtor,\n  HasTabIndex,\n  HasTabIndexCtor,\n  MatRipple,\n  mixinColor,\n  mixinDisabled,\n  mixinDisableRipple,\n  mixinTabIndex,\n} from '@angular/material/core';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\nimport {MAT_CHECKBOX_CLICK_ACTION, MatCheckboxClickAction} from './checkbox-config';\n\n\n// Increasing integer for generating unique ids for checkbox components.\nlet nextUniqueId = 0;\n\n// TODO(josephperrott): Revert to constants for ripple radius once 2018 Checkbox updates have\n// landed.\n// The radius for the checkbox's ripple, in pixels.\nlet calculatedRippleRadius = 0;\n\n/**\n * Provider Expression that allows mat-checkbox to register as a ControlValueAccessor.\n * This allows it to support [(ngModel)].\n * @docs-private\n */\nexport const MAT_CHECKBOX_CONTROL_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatCheckbox),\n  multi: true\n};\n\n/**\n * Represents the different states that require custom transitions between them.\n * @docs-private\n */\nexport enum TransitionCheckState {\n  /** The initial state of the component before any user interaction. */\n  Init,\n  /** The state representing the component when it's becoming checked. */\n  Checked,\n  /** The state representing the component when it's becoming unchecked. */\n  Unchecked,\n  /** The state representing the component when it's becoming indeterminate. */\n  Indeterminate\n}\n\n/** Change event object emitted by MatCheckbox. */\nexport class MatCheckboxChange {\n  /** The source MatCheckbox of the event. */\n  source: MatCheckbox;\n  /** The new `checked` value of the checkbox. */\n  checked: boolean;\n}\n\n// Boilerplate for applying mixins to MatCheckbox.\n/** @docs-private */\nexport class MatCheckboxBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatCheckboxMixinBase:\n    HasTabIndexCtor &\n    CanColorCtor &\n    CanDisableRippleCtor &\n    CanDisableCtor &\n    typeof MatCheckboxBase =\n        mixinTabIndex(mixinColor(mixinDisableRipple(mixinDisabled(MatCheckboxBase)), 'accent'));\n\n\n/**\n * A material design checkbox component. Supports all of the functionality of an HTML5 checkbox,\n * and exposes a similar API. A MatCheckbox can be either checked, unchecked, indeterminate, or\n * disabled. Note that all additional accessibility attributes are taken care of by the component,\n * so there is no need to provide them yourself. However, if you want to omit a label and still\n * have the checkbox be accessible, you may supply an [aria-label] input.\n * See: https://material.io/design/components/selection-controls.html\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-checkbox',\n  templateUrl: 'checkbox.html',\n  styleUrls: ['checkbox.css'],\n  exportAs: 'matCheckbox',\n  host: {\n    'class': 'mat-checkbox',\n    '[id]': 'id',\n    '[attr.tabindex]': 'null',\n    '[class.mat-checkbox-indeterminate]': 'indeterminate',\n    '[class.mat-checkbox-checked]': 'checked',\n    '[class.mat-checkbox-disabled]': 'disabled',\n    '[class.mat-checkbox-label-before]': 'labelPosition == \"before\"',\n    '[class._mat-animation-noopable]': `_animationMode === 'NoopAnimations'`,\n  },\n  providers: [MAT_CHECKBOX_CONTROL_VALUE_ACCESSOR],\n  inputs: ['disableRipple', 'color', 'tabIndex'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class MatCheckbox extends _MatCheckboxMixinBase implements ControlValueAccessor,\n    AfterViewChecked, OnDestroy, CanColor, CanDisable, HasTabIndex, CanDisableRipple {\n\n  /**\n   * Attached to the aria-label attribute of the host element. In most cases, arial-labelledby will\n   * take precedence so this may be omitted.\n   */\n  @Input('aria-label') ariaLabel: string = '';\n\n  /**\n   * Users can specify the `aria-labelledby` attribute which will be forwarded to the input element\n   */\n  @Input('aria-labelledby') ariaLabelledby: string | null = null;\n\n  private _uniqueId: string = `mat-checkbox-${++nextUniqueId}`;\n\n  /** A unique id for the checkbox input. If none is supplied, it will be auto-generated. */\n  @Input() id: string = this._uniqueId;\n\n  /** Returns the unique id for the visual hidden input. */\n  get inputId(): string { return `${this.id || this._uniqueId}-input`; }\n\n  /** Whether the checkbox is required. */\n  @Input()\n  get required(): boolean { return this._required; }\n  set required(value: boolean) { this._required = coerceBooleanProperty(value); }\n  private _required: boolean;\n\n  /** Whether the label should appear after or before the checkbox. Defaults to 'after' */\n  @Input() labelPosition: 'before' | 'after' = 'after';\n\n  /** Name value will be applied to the input element if present */\n  @Input() name: string | null = null;\n\n  /** Event emitted when the checkbox's `checked` value changes. */\n  @Output() readonly change: EventEmitter<MatCheckboxChange> =\n      new EventEmitter<MatCheckboxChange>();\n\n  /** Event emitted when the checkbox's `indeterminate` value changes. */\n  @Output() readonly indeterminateChange: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n  /** The value attribute of the native input element */\n  @Input() value: string;\n\n  /** The native `<input type=\"checkbox\">` element */\n  @ViewChild('input') _inputElement: ElementRef<HTMLInputElement>;\n\n  /** Reference to the ripple instance of the checkbox. */\n  @ViewChild(MatRipple) ripple: MatRipple;\n\n  /**\n   * Called when the checkbox is blurred. Needed to properly implement ControlValueAccessor.\n   * @docs-private\n   */\n  _onTouched: () => any = () => {};\n\n  private _currentAnimationClass: string = '';\n\n  private _currentCheckState: TransitionCheckState = TransitionCheckState.Init;\n\n  private _controlValueAccessorChangeFn: (value: any) => void = () => {};\n\n  constructor(elementRef: ElementRef<HTMLElement>,\n              private _changeDetectorRef: ChangeDetectorRef,\n              private _focusMonitor: FocusMonitor,\n              private _ngZone: NgZone,\n              @Attribute('tabindex') tabIndex: string,\n              @Optional() @Inject(MAT_CHECKBOX_CLICK_ACTION)\n                  private _clickAction: MatCheckboxClickAction,\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode?: string) {\n    super(elementRef);\n\n    this.tabIndex = parseInt(tabIndex) || 0;\n\n    this._focusMonitor.monitor(elementRef, true).subscribe(focusOrigin => {\n      if (!focusOrigin) {\n        // When a focused element becomes disabled, the browser *immediately* fires a blur event.\n        // Angular does not expect events to be raised during change detection, so any state change\n        // (such as a form control's 'ng-touched') will cause a changed-after-checked error.\n        // See https://github.com/angular/angular/issues/17793. To work around this, we defer\n        // telling the form control it has been touched until the next tick.\n        Promise.resolve().then(() => this._onTouched());\n      }\n    });\n  }\n\n  ngAfterViewChecked() {\n    this._calculateRippleRadius();\n  }\n\n  ngOnDestroy() {\n    this._focusMonitor.stopMonitoring(this._elementRef);\n  }\n\n  /**\n   * Whether the checkbox is checked.\n   */\n  @Input()\n  get checked(): boolean { return this._checked; }\n  set checked(value: boolean) {\n    if (value != this.checked) {\n      this._checked = value;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n  private _checked: boolean = false;\n\n  /**\n   * Whether the checkbox is disabled. This fully overrides the implementation provided by\n   * mixinDisabled, but the mixin is still required because mixinTabIndex requires it.\n   */\n  @Input()\n  get disabled() { return this._disabled; }\n  set disabled(value: any) {\n    if (value != this.disabled) {\n      this._disabled = value;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n  private _disabled: boolean = false;\n\n  /**\n   * Whether the checkbox is indeterminate. This is also known as \"mixed\" mode and can be used to\n   * represent a checkbox with three states, e.g. a checkbox that represents a nested list of\n   * checkable items. Note that whenever checkbox is manually clicked, indeterminate is immediately\n   * set to false.\n   */\n  @Input()\n  get indeterminate(): boolean { return this._indeterminate; }\n  set indeterminate(value: boolean) {\n    const changed = value != this._indeterminate;\n    this._indeterminate = value;\n\n    if (changed) {\n      if (this._indeterminate) {\n        this._transitionCheckState(TransitionCheckState.Indeterminate);\n      } else {\n        this._transitionCheckState(\n          this.checked ? TransitionCheckState.Checked : TransitionCheckState.Unchecked);\n      }\n      this.indeterminateChange.emit(this._indeterminate);\n    }\n  }\n  private _indeterminate: boolean = false;\n\n  _isRippleDisabled() {\n    return this.disableRipple || this.disabled;\n  }\n\n  /** Method being called whenever the label text changes. */\n  _onLabelTextChange() {\n    // Since the event of the `cdkObserveContent` directive runs outside of the zone, the checkbox\n    // component will be only marked for check, but no actual change detection runs automatically.\n    // Instead of going back into the zone in order to trigger a change detection which causes\n    // *all* components to be checked (if explicitly marked or not using OnPush), we only trigger\n    // an explicit change detection for the checkbox view and it's children.\n    this._changeDetectorRef.detectChanges();\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  writeValue(value: any) {\n    this.checked = !!value;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnChange(fn: (value: any) => void) {\n    this._controlValueAccessorChangeFn = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnTouched(fn: any) {\n    this._onTouched = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  setDisabledState(isDisabled: boolean) {\n    this.disabled = isDisabled;\n  }\n\n  _getAriaChecked(): 'true' | 'false' | 'mixed' {\n    return this.checked ? 'true' : (this.indeterminate ? 'mixed' : 'false');\n  }\n\n  private _transitionCheckState(newState: TransitionCheckState) {\n    let oldState = this._currentCheckState;\n    let element: HTMLElement = this._elementRef.nativeElement;\n\n    if (oldState === newState) {\n      return;\n    }\n    if (this._currentAnimationClass.length > 0) {\n      element.classList.remove(this._currentAnimationClass);\n    }\n\n    this._currentAnimationClass = this._getAnimationClassForCheckStateTransition(\n        oldState, newState);\n    this._currentCheckState = newState;\n\n    if (this._currentAnimationClass.length > 0) {\n      element.classList.add(this._currentAnimationClass);\n\n      // Remove the animation class to avoid animation when the checkbox is moved between containers\n      const animationClass = this._currentAnimationClass;\n\n      this._ngZone.runOutsideAngular(() => {\n        setTimeout(() => {\n          element.classList.remove(animationClass);\n        }, 1000);\n      });\n    }\n  }\n\n  private _emitChangeEvent() {\n    const event = new MatCheckboxChange();\n    event.source = this;\n    event.checked = this.checked;\n\n    this._controlValueAccessorChangeFn(this.checked);\n    this.change.emit(event);\n  }\n\n  /** Toggles the `checked` state of the checkbox. */\n  toggle(): void {\n    this.checked = !this.checked;\n  }\n\n  /**\n   * Event handler for checkbox input element.\n   * Toggles checked state if element is not disabled.\n   * Do not toggle on (change) event since IE doesn't fire change event when\n   *   indeterminate checkbox is clicked.\n   * @param event\n   */\n  _onInputClick(event: Event) {\n    // We have to stop propagation for click events on the visual hidden input element.\n    // By default, when a user clicks on a label element, a generated click event will be\n    // dispatched on the associated input element. Since we are using a label element as our\n    // root container, the click event on the `checkbox` will be executed twice.\n    // The real click event will bubble up, and the generated click event also tries to bubble up.\n    // This will lead to multiple click events.\n    // Preventing bubbling for the second event will solve that issue.\n    event.stopPropagation();\n\n    // If resetIndeterminate is false, and the current state is indeterminate, do nothing on click\n    if (!this.disabled && this._clickAction !== 'noop') {\n      // When user manually click on the checkbox, `indeterminate` is set to false.\n      if (this.indeterminate && this._clickAction !== 'check') {\n\n        Promise.resolve().then(() => {\n          this._indeterminate = false;\n          this.indeterminateChange.emit(this._indeterminate);\n        });\n      }\n\n      this.toggle();\n      this._transitionCheckState(\n          this._checked ? TransitionCheckState.Checked : TransitionCheckState.Unchecked);\n\n      // Emit our custom change event if the native input emitted one.\n      // It is important to only emit it, if the native input triggered one, because\n      // we don't want to trigger a change event, when the `checked` variable changes for example.\n      this._emitChangeEvent();\n    } else if (!this.disabled && this._clickAction === 'noop') {\n      // Reset native input when clicked with noop. The native checkbox becomes checked after\n      // click, reset it to be align with `checked` value of `mat-checkbox`.\n      this._inputElement.nativeElement.checked = this.checked;\n      this._inputElement.nativeElement.indeterminate = this.indeterminate;\n    }\n  }\n\n  /** Focuses the checkbox. */\n  focus(): void {\n    this._focusMonitor.focusVia(this._inputElement, 'keyboard');\n  }\n\n  _onInteractionEvent(event: Event) {\n    // We always have to stop propagation on the change event.\n    // Otherwise the change event, from the input element, will bubble up and\n    // emit its event object to the `change` output.\n    event.stopPropagation();\n  }\n\n  private _getAnimationClassForCheckStateTransition(\n      oldState: TransitionCheckState, newState: TransitionCheckState): string {\n    // Don't transition if animations are disabled.\n    if (this._animationMode === 'NoopAnimations') {\n      return '';\n    }\n\n    let animSuffix: string = '';\n\n    switch (oldState) {\n      case TransitionCheckState.Init:\n        // Handle edge case where user interacts with checkbox that does not have [(ngModel)] or\n        // [checked] bound to it.\n        if (newState === TransitionCheckState.Checked) {\n          animSuffix = 'unchecked-checked';\n        } else if (newState == TransitionCheckState.Indeterminate) {\n          animSuffix = 'unchecked-indeterminate';\n        } else {\n          return '';\n        }\n        break;\n      case TransitionCheckState.Unchecked:\n        animSuffix = newState === TransitionCheckState.Checked ?\n            'unchecked-checked' : 'unchecked-indeterminate';\n        break;\n      case TransitionCheckState.Checked:\n        animSuffix = newState === TransitionCheckState.Unchecked ?\n            'checked-unchecked' : 'checked-indeterminate';\n        break;\n      case TransitionCheckState.Indeterminate:\n        animSuffix = newState === TransitionCheckState.Checked ?\n            'indeterminate-checked' : 'indeterminate-unchecked';\n        break;\n    }\n\n    return `mat-checkbox-anim-${animSuffix}`;\n  }\n\n  // TODO(josephperrott): Revert to constants for ripple radius once 2018 Checkbox updates have\n  // landed.\n  /**\n   * Calculate the radius for the ripple based on the ripple elements width.  Only calculated once\n   * for the application.\n   */\n  private _calculateRippleRadius() {\n    if (!calculatedRippleRadius) {\n      const rippleWidth =\n          this._elementRef.nativeElement.querySelector('.mat-checkbox-ripple').clientWidth || 0;\n      calculatedRippleRadius = rippleWidth / 2;\n    }\n    this.ripple.radius = calculatedRippleRadius;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Directive,\n  forwardRef,\n  Provider,\n} from '@angular/core';\nimport {\n  CheckboxRequiredValidator,\n  NG_VALIDATORS,\n} from '@angular/forms';\n\nexport const MAT_CHECKBOX_REQUIRED_VALIDATOR: Provider = {\n  provide: NG_VALIDATORS,\n  useExisting: forwardRef(() => MatCheckboxRequiredValidator),\n  multi: true\n};\n\n/**\n * Validator for Material checkbox's required attribute in template-driven checkbox.\n * Current CheckboxRequiredValidator only work with `input type=checkbox` and does not\n * work with `mat-checkbox`.\n */\n@Directive({\n  selector: `mat-checkbox[required][formControlName],\n             mat-checkbox[required][formControl], mat-checkbox[required][ngModel]`,\n  providers: [MAT_CHECKBOX_REQUIRED_VALIDATOR],\n  host: {'[attr.required]': 'required ? \"\" : null'}\n})\nexport class MatCheckboxRequiredValidator extends CheckboxRequiredValidator {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ObserversModule} from '@angular/cdk/observers';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {MatCheckbox} from './checkbox';\nimport {MatCheckboxRequiredValidator} from './checkbox-required-validator';\n\n\n@NgModule({\n  imports: [CommonModule, MatRippleModule, MatCommonModule, ObserversModule],\n  exports: [MatCheckbox, MatCheckboxRequiredValidator, MatCommonModule],\n  declarations: [MatCheckbox, MatCheckboxRequiredValidator],\n})\nexport class MatCheckboxModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusableOption} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {BACKSPACE, DELETE, SPACE} from '@angular/cdk/keycodes';\nimport {Platform} from '@angular/cdk/platform';\nimport {\n  ContentChild,\n  Directive,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  Output,\n} from '@angular/core';\nimport {\n  CanColor,\n  CanColorCtor,\n  CanDisable,\n  CanDisableCtor,\n  CanDisableRipple,\n  CanDisableRippleCtor,\n  MAT_RIPPLE_GLOBAL_OPTIONS,\n  mixinColor,\n  mixinDisabled,\n  mixinDisableRipple,\n  RippleConfig,\n  RippleGlobalOptions,\n  RippleRenderer,\n  RippleTarget,\n} from '@angular/material/core';\nimport {Subject} from 'rxjs';\nimport {take} from 'rxjs/operators';\n\n\n/** Represents an event fired on an individual `mat-chip`. */\nexport interface MatChipEvent {\n  /** The chip the event was fired on. */\n  chip: MatChip;\n}\n\n/** Event object emitted by MatChip when selected or deselected. */\nexport class MatChipSelectionChange {\n  constructor(\n    /** Reference to the chip that emitted the event. */\n    public source: MatChip,\n    /** Whether the chip that emitted the event is selected. */\n    public selected: boolean,\n    /** Whether the selection change was a result of a user interaction. */\n    public isUserInput = false) { }\n}\n\n\n// Boilerplate for applying mixins to MatChip.\n/** @docs-private */\nexport class MatChipBase {\n  constructor(public _elementRef: ElementRef) {}\n}\n\nexport const _MatChipMixinBase:\n    CanColorCtor & CanDisableRippleCtor & CanDisableCtor & typeof MatChipBase =\n        mixinColor(mixinDisableRipple(mixinDisabled(MatChipBase)), 'primary');\n\nconst CHIP_ATTRIBUTE_NAMES = ['mat-basic-chip'];\n\n/**\n * Dummy directive to add CSS class to chip avatar.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-chip-avatar, [matChipAvatar]',\n  host: {'class': 'mat-chip-avatar'}\n})\nexport class MatChipAvatar {}\n\n/**\n * Dummy directive to add CSS class to chip trailing icon.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-chip-trailing-icon, [matChipTrailingIcon]',\n  host: {'class': 'mat-chip-trailing-icon'}\n})\nexport class MatChipTrailingIcon {}\n\n/**\n * Material design styled Chip component. Used inside the MatChipList component.\n */\n@Directive({\n  selector: `mat-basic-chip, [mat-basic-chip], mat-chip, [mat-chip]`,\n  inputs: ['color', 'disabled', 'disableRipple'],\n  exportAs: 'matChip',\n  host: {\n    'class': 'mat-chip',\n    '[attr.tabindex]': 'disabled ? null : -1',\n    'role': 'option',\n    '[class.mat-chip-selected]': 'selected',\n    '[class.mat-chip-with-avatar]': 'avatar',\n    '[class.mat-chip-with-trailing-icon]': 'trailingIcon || removeIcon',\n    '[class.mat-chip-disabled]': 'disabled',\n    '[attr.disabled]': 'disabled || null',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.aria-selected]': 'ariaSelected',\n    '(click)': '_handleClick($event)',\n    '(keydown)': '_handleKeydown($event)',\n    '(focus)': 'focus()',\n    '(blur)': '_blur()',\n  },\n})\nexport class MatChip extends _MatChipMixinBase implements FocusableOption, OnDestroy, CanColor,\n    CanDisable, CanDisableRipple, RippleTarget {\n\n  /** Reference to the RippleRenderer for the chip. */\n  private _chipRipple: RippleRenderer;\n\n  /** Whether the ripples are globally disabled through the RippleGlobalOptions */\n  private _ripplesGloballyDisabled = false;\n\n  /**\n   * Ripple configuration for ripples that are launched on pointer down.\n   * @docs-private\n   */\n  rippleConfig: RippleConfig = {};\n\n  /**\n   * Whether ripples are disabled on interaction\n   * @docs-private\n   */\n  get rippleDisabled(): boolean {\n    return this.disabled || this.disableRipple || this._ripplesGloballyDisabled;\n  }\n\n  /** Whether the chip has focus. */\n  _hasFocus: boolean = false;\n\n  /** Whether the chip list is selectable */\n  chipListSelectable: boolean = true;\n\n  /** The chip avatar */\n  @ContentChild(MatChipAvatar) avatar: MatChipAvatar;\n\n  /** The chip's trailing icon. */\n  @ContentChild(MatChipTrailingIcon) trailingIcon: MatChipTrailingIcon;\n\n  /** The chip's remove toggler. */\n  @ContentChild(forwardRef(() => MatChipRemove)) removeIcon: MatChipRemove;\n\n  /** Whether the chip is selected. */\n  @Input()\n  get selected(): boolean { return this._selected; }\n  set selected(value: boolean) {\n    const coercedValue = coerceBooleanProperty(value);\n\n    if (coercedValue !== this._selected) {\n      this._selected = coercedValue;\n      this._dispatchSelectionChange();\n    }\n  }\n  protected _selected: boolean = false;\n\n  /** The value of the chip. Defaults to the content inside `<mat-chip>` tags. */\n  @Input()\n  get value(): any {\n    return this._value != undefined\n      ? this._value\n      : this._elementRef.nativeElement.textContent;\n  }\n  set value(value: any) { this._value = value; }\n  protected _value: any;\n\n  /**\n   * Whether or not the chip is selectable. When a chip is not selectable,\n   * changes to it's selected state are always ignored. By default a chip is\n   * selectable, and it becomes non-selectable if it's parent chip list is\n   * not selectable.\n   */\n  @Input()\n  get selectable(): boolean { return this._selectable && this.chipListSelectable; }\n  set selectable(value: boolean) {\n    this._selectable = coerceBooleanProperty(value);\n  }\n  protected _selectable: boolean = true;\n\n  /**\n   * Determines whether or not the chip displays the remove styling and emits (removed) events.\n   */\n  @Input()\n  get removable(): boolean { return this._removable; }\n  set removable(value: boolean) {\n    this._removable = coerceBooleanProperty(value);\n  }\n  protected _removable: boolean = true;\n\n  /** Emits when the chip is focused. */\n  readonly _onFocus = new Subject<MatChipEvent>();\n\n  /** Emits when the chip is blured. */\n  readonly _onBlur = new Subject<MatChipEvent>();\n\n  /** Emitted when the chip is selected or deselected. */\n  @Output() readonly selectionChange: EventEmitter<MatChipSelectionChange> =\n      new EventEmitter<MatChipSelectionChange>();\n\n  /** Emitted when the chip is destroyed. */\n  @Output() readonly destroyed: EventEmitter<MatChipEvent> = new EventEmitter<MatChipEvent>();\n\n  /** Emitted when a chip is to be removed. */\n  @Output() readonly removed: EventEmitter<MatChipEvent> = new EventEmitter<MatChipEvent>();\n\n  /** The ARIA selected applied to the chip. */\n  get ariaSelected(): string | null {\n    return this.selectable ? this.selected.toString() : null;\n  }\n\n  constructor(public _elementRef: ElementRef,\n              private _ngZone: NgZone,\n              platform: Platform,\n              @Optional() @Inject(MAT_RIPPLE_GLOBAL_OPTIONS) globalOptions: RippleGlobalOptions) {\n    super(_elementRef);\n\n    this._addHostClassName();\n\n    this._chipRipple = new RippleRenderer(this, _ngZone, _elementRef, platform);\n    this._chipRipple.setupTriggerEvents(_elementRef.nativeElement);\n\n    if (globalOptions) {\n      // TODO(paul): Do not copy each option manually. Allow dynamic global option changes: #9729\n      this._ripplesGloballyDisabled = !!globalOptions.disabled;\n      this.rippleConfig = {\n        animation: globalOptions.animation,\n        terminateOnPointerUp: globalOptions.terminateOnPointerUp,\n      };\n    }\n  }\n\n  _addHostClassName() {\n    // Add class for the different chips\n    for (const attr of CHIP_ATTRIBUTE_NAMES) {\n      if (this._elementRef.nativeElement.hasAttribute(attr) ||\n        this._elementRef.nativeElement.tagName.toLowerCase() === attr) {\n        (this._elementRef.nativeElement as HTMLElement).classList.add(attr);\n        return;\n      }\n    }\n    (this._elementRef.nativeElement as HTMLElement).classList.add('mat-standard-chip');\n  }\n\n  ngOnDestroy() {\n    this.destroyed.emit({chip: this});\n    this._chipRipple._removeTriggerEvents();\n  }\n\n  /** Selects the chip. */\n  select(): void {\n    if (!this._selected) {\n      this._selected = true;\n      this._dispatchSelectionChange();\n    }\n  }\n\n  /** Deselects the chip. */\n  deselect(): void {\n    if (this._selected) {\n      this._selected = false;\n      this._dispatchSelectionChange();\n    }\n  }\n\n  /** Select this chip and emit selected event */\n  selectViaInteraction(): void {\n    if (!this._selected) {\n      this._selected = true;\n      this._dispatchSelectionChange(true);\n    }\n  }\n\n  /** Toggles the current selected state of this chip. */\n  toggleSelected(isUserInput: boolean = false): boolean {\n    this._selected = !this.selected;\n    this._dispatchSelectionChange(isUserInput);\n    return this.selected;\n  }\n\n  /** Allows for programmatic focusing of the chip. */\n  focus(): void {\n    if (!this._hasFocus) {\n      this._elementRef.nativeElement.focus();\n      this._onFocus.next({chip: this});\n    }\n    this._hasFocus = true;\n  }\n\n  /**\n   * Allows for programmatic removal of the chip. Called by the MatChipList when the DELETE or\n   * BACKSPACE keys are pressed.\n   *\n   * Informs any listeners of the removal request. Does not remove the chip from the DOM.\n   */\n  remove(): void {\n    if (this.removable) {\n      this.removed.emit({chip: this});\n    }\n  }\n\n  /** Handles click events on the chip. */\n  _handleClick(event: Event) {\n    if (this.disabled) {\n      event.preventDefault();\n    } else {\n      event.stopPropagation();\n    }\n  }\n\n  /** Handle custom key presses. */\n  _handleKeydown(event: KeyboardEvent): void {\n    if (this.disabled) {\n      return;\n    }\n\n    switch (event.keyCode) {\n      case DELETE:\n      case BACKSPACE:\n        // If we are removable, remove the focused chip\n        this.remove();\n        // Always prevent so page navigation does not occur\n        event.preventDefault();\n        break;\n      case SPACE:\n        // If we are selectable, toggle the focused chip\n        if (this.selectable) {\n          this.toggleSelected(true);\n        }\n\n        // Always prevent space from scrolling the page since the list has focus\n        event.preventDefault();\n        break;\n    }\n  }\n\n  _blur(): void {\n    // When animations are enabled, Angular may end up removing the chip from the DOM a little\n    // earlier than usual, causing it to be blurred and throwing off the logic in the chip list\n    // that moves focus not the next item. To work around the issue, we defer marking the chip\n    // as not focused until the next time the zone stabilizes.\n    this._ngZone.onStable\n      .asObservable()\n      .pipe(take(1))\n      .subscribe(() => {\n        this._ngZone.run(() => {\n          this._hasFocus = false;\n          this._onBlur.next({chip: this});\n        });\n      });\n  }\n\n  private _dispatchSelectionChange(isUserInput = false) {\n    this.selectionChange.emit({\n      source: this,\n      isUserInput,\n      selected: this._selected\n    });\n  }\n}\n\n\n/**\n * Applies proper (click) support and adds styling for use with the Material Design \"cancel\" icon\n * available at https://material.io/icons/#ic_cancel.\n *\n * Example:\n *\n *     `<mat-chip>\n *       <mat-icon matChipRemove>cancel</mat-icon>\n *     </mat-chip>`\n *\n * You *may* use a custom icon, but you may need to override the `mat-chip-remove` positioning\n * styles to properly center the icon within the chip.\n */\n@Directive({\n  selector: '[matChipRemove]',\n  host: {\n    'class': 'mat-chip-remove mat-chip-trailing-icon',\n    '(click)': '_handleClick($event)',\n  }\n})\nexport class MatChipRemove {\n  constructor(protected _parentChip: MatChip) {}\n\n  /** Calls the parent chip's public `remove()` method if applicable. */\n  _handleClick(event: Event): void {\n    if (this._parentChip.removable) {\n      this._parentChip.remove();\n    }\n\n    // We need to stop event propagation because otherwise the event will bubble up to the\n    // form field and cause the `onContainerClick` method to be invoked. This method would then\n    // reset the focused chip that has been focused after chip removal. Usually the parent\n    // the parent click listener of the `MatChip` would prevent propagation, but it can happen\n    // that the chip is being removed before the event bubbles up.\n    event.stopPropagation();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {InjectionToken} from '@angular/core';\n\n/** Default options, for the chips module, that can be overridden. */\nexport interface MatChipsDefaultOptions {\n  /** The list of key codes that will trigger a chipEnd event. */\n  separatorKeyCodes: number[] | Set<number>;\n}\n\n/** Injection token to be used to override the default options for the chips module. */\nexport const MAT_CHIPS_DEFAULT_OPTIONS =\n    new InjectionToken<MatChipsDefaultOptions>('mat-chips-default-options');\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor} from '@angular/cdk/a11y';\nimport {Platform} from '@angular/cdk/platform';\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  OnDestroy,\n  ViewChild,\n  ViewEncapsulation,\n  Optional,\n  Inject,\n  Input,\n} from '@angular/core';\nimport {\n  CanColor,\n  CanDisable,\n  CanDisableRipple,\n  CanColorCtor,\n  CanDisableCtor,\n  CanDisableRippleCtor,\n  MatRipple,\n  mixinColor,\n  mixinDisabled,\n  mixinDisableRipple,\n} from '@angular/material/core';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\n\n/** Default color palette for round buttons (mat-fab and mat-mini-fab) */\nconst DEFAULT_ROUND_BUTTON_COLOR = 'accent';\n\n/**\n * List of classes to add to MatButton instances based on host attributes to\n * style as different variants.\n */\nconst BUTTON_HOST_ATTRIBUTES = [\n  'mat-button',\n  'mat-flat-button',\n  'mat-icon-button',\n  'mat-raised-button',\n  'mat-stroked-button',\n  'mat-mini-fab',\n  'mat-fab',\n];\n\n// Boilerplate for applying mixins to MatButton.\n/** @docs-private */\nexport class MatButtonBase {\n  constructor(public _elementRef: ElementRef) {}\n}\n\nexport const _MatButtonMixinBase:\n    CanDisableRippleCtor & CanDisableCtor & CanColorCtor & typeof MatButtonBase =\n        mixinColor(mixinDisabled(mixinDisableRipple(MatButtonBase)));\n\n/**\n * Material design button.\n */\n@Component({\n  moduleId: module.id,\n  selector: `button[mat-button], button[mat-raised-button], button[mat-icon-button],\n             button[mat-fab], button[mat-mini-fab], button[mat-stroked-button],\n             button[mat-flat-button]`,\n  exportAs: 'matButton',\n  host: {\n    '[disabled]': 'disabled || null',\n    '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"',\n  },\n  templateUrl: 'button.html',\n  styleUrls: ['button.css'],\n  inputs: ['disabled', 'disableRipple', 'color'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatButton extends _MatButtonMixinBase\n    implements OnDestroy, CanDisable, CanColor, CanDisableRipple {\n\n  /** Whether the button is round. */\n  readonly isRoundButton: boolean = this._hasHostAttributes('mat-fab', 'mat-mini-fab');\n\n  /** Whether the button is icon button. */\n  readonly isIconButton: boolean = this._hasHostAttributes('mat-icon-button');\n\n  /** Reference to the MatRipple instance of the button. */\n  @ViewChild(MatRipple) ripple: MatRipple;\n\n  constructor(elementRef: ElementRef,\n              /**\n               * @deprecated Platform checks for SSR are no longer needed\n               * @breaking-change 7.0.0\n               */\n              // tslint:disable-next-line:no-unused-variable\n              private _platform: Platform,\n              private _focusMonitor: FocusMonitor,\n              // @breaking-change 7.0.0 `_animationMode` parameter to be made required.\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode?: string) {\n    super(elementRef);\n\n    // For each of the variant selectors that is prevent in the button's host\n    // attributes, add the correct corresponding class.\n    for (const attr of BUTTON_HOST_ATTRIBUTES) {\n      if (this._hasHostAttributes(attr)) {\n        (elementRef.nativeElement as HTMLElement).classList.add(attr);\n      }\n    }\n\n    this._focusMonitor.monitor(this._elementRef, true);\n\n    if (this.isRoundButton) {\n      this.color = DEFAULT_ROUND_BUTTON_COLOR;\n    }\n  }\n\n  ngOnDestroy() {\n    this._focusMonitor.stopMonitoring(this._elementRef);\n  }\n\n  /** Focuses the button. */\n  focus(): void {\n    this._getHostElement().focus();\n  }\n\n  _getHostElement() {\n    return this._elementRef.nativeElement;\n  }\n\n  _isRippleDisabled() {\n    return this.disableRipple || this.disabled;\n  }\n\n  /** Gets whether the button has one of the given attributes. */\n  _hasHostAttributes(...attributes: string[]) {\n    return attributes.some(attribute => this._getHostElement().hasAttribute(attribute));\n  }\n}\n\n/**\n * Raised Material design button.\n */\n@Component({\n  moduleId: module.id,\n  selector: `a[mat-button], a[mat-raised-button], a[mat-icon-button], a[mat-fab],\n             a[mat-mini-fab], a[mat-stroked-button], a[mat-flat-button]`,\n  exportAs: 'matButton, matAnchor',\n  host: {\n    // Note that we ignore the user-specified tabindex when it's disabled for\n    // consistency with the `mat-button` applied on native buttons where even\n    // though they have an index, they're not tabbable.\n    '[attr.tabindex]': 'disabled ? -1 : (tabIndex || 0)',\n    '[attr.disabled]': 'disabled || null',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '(click)': '_haltDisabledEvents($event)',\n    '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"',\n  },\n  inputs: ['disabled', 'disableRipple', 'color'],\n  templateUrl: 'button.html',\n  styleUrls: ['button.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatAnchor extends MatButton {\n  /** Tabindex of the button. */\n  @Input() tabIndex: number;\n\n  constructor(\n    platform: Platform,\n    focusMonitor: FocusMonitor,\n    elementRef: ElementRef,\n    // @breaking-change 7.0.0 `animationMode` parameter to be made required.\n    @Optional() @Inject(ANIMATION_MODULE_TYPE) animationMode?: string) {\n    super(elementRef, platform, focusMonitor, animationMode);\n  }\n\n  _haltDisabledEvents(event: Event) {\n    // A disabled button shouldn't apply any actions\n    if (this.disabled) {\n      event.preventDefault();\n      event.stopImmediatePropagation();\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {MatAnchor, MatButton} from './button';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatRippleModule,\n    MatCommonModule,\n  ],\n  exports: [\n    MatButton,\n    MatAnchor,\n    MatCommonModule,\n  ],\n  declarations: [\n    MatButton,\n    MatAnchor,\n  ],\n})\nexport class MatButtonModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {SelectionModel} from '@angular/cdk/collections';\nimport {\n  AfterContentInit,\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Input,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Output,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n  InjectionToken,\n  Inject,\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {\n  CanDisableRipple,\n  mixinDisableRipple,\n  CanDisableRippleCtor,\n} from '@angular/material/core';\n\n\n/** Acceptable types for a button toggle. */\nexport type ToggleType = 'checkbox' | 'radio';\n\n/** Possible appearance styles for the button toggle. */\nexport type MatButtonToggleAppearance = 'legacy' | 'standard';\n\n/**\n * Represents the default options for the button toggle that can be configured\n * using the `MAT_BUTTON_TOGGLE_DEFAULT_OPTIONS` injection token.\n */\nexport interface MatButtonToggleDefaultOptions {\n  appearance?: MatButtonToggleAppearance;\n}\n\n/**\n * Injection token that can be used to configure the\n * default options for all button toggles within an app.\n */\nexport const MAT_BUTTON_TOGGLE_DEFAULT_OPTIONS =\n    new InjectionToken<MatButtonToggleDefaultOptions>('MAT_BUTTON_TOGGLE_DEFAULT_OPTIONS');\n\n\n\n/**\n * Provider Expression that allows mat-button-toggle-group to register as a ControlValueAccessor.\n * This allows it to support [(ngModel)].\n * @docs-private\n */\nexport const MAT_BUTTON_TOGGLE_GROUP_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatButtonToggleGroup),\n  multi: true\n};\n\n/**\n * @deprecated Use `MatButtonToggleGroup` instead.\n * @breaking-change 7.0.0\n */\nexport class MatButtonToggleGroupMultiple {}\n\nlet _uniqueIdCounter = 0;\n\n/** Change event object emitted by MatButtonToggle. */\nexport class MatButtonToggleChange {\n  constructor(\n    /** The MatButtonToggle that emits the event. */\n    public source: MatButtonToggle,\n\n    /** The value assigned to the MatButtonToggle. */\n    public value: any) {}\n}\n\n/** Exclusive selection button toggle group that behaves like a radio-button group. */\n@Directive({\n  selector: 'mat-button-toggle-group',\n  providers: [\n    MAT_BUTTON_TOGGLE_GROUP_VALUE_ACCESSOR,\n    {provide: MatButtonToggleGroupMultiple, useExisting: MatButtonToggleGroup},\n  ],\n  host: {\n    'role': 'group',\n    'class': 'mat-button-toggle-group',\n    '[attr.aria-disabled]': 'disabled',\n    '[class.mat-button-toggle-vertical]': 'vertical',\n    '[class.mat-button-toggle-group-appearance-standard]': 'appearance === \"standard\"',\n  },\n  exportAs: 'matButtonToggleGroup',\n})\nexport class MatButtonToggleGroup implements ControlValueAccessor, OnInit, AfterContentInit {\n  private _vertical = false;\n  private _multiple = false;\n  private _disabled = false;\n  private _selectionModel: SelectionModel<MatButtonToggle>;\n\n  /**\n   * Reference to the raw value that the consumer tried to assign. The real\n   * value will exclude any values from this one that don't correspond to a\n   * toggle. Useful for the cases where the value is assigned before the toggles\n   * have been initialized or at the same that they're being swapped out.\n   */\n  private _rawValue: any;\n\n  /**\n   * The method to be called in order to update ngModel.\n   * Now `ngModel` binding is not supported in multiple selection mode.\n   */\n  _controlValueAccessorChangeFn: (value: any) => void = () => {};\n\n  /** onTouch function registered via registerOnTouch (ControlValueAccessor). */\n  _onTouched: () => any = () => {};\n\n  /** Child button toggle buttons. */\n  @ContentChildren(forwardRef(() => MatButtonToggle)) _buttonToggles: QueryList<MatButtonToggle>;\n\n  /** The appearance for all the buttons in the group. */\n  @Input() appearance: MatButtonToggleAppearance;\n\n  /** `name` attribute for the underlying `input` element. */\n  @Input()\n  get name(): string { return this._name; }\n  set name(value: string) {\n    this._name = value;\n\n    if (this._buttonToggles) {\n      this._buttonToggles.forEach(toggle => toggle.name = this._name);\n    }\n  }\n  private _name = `mat-button-toggle-group-${_uniqueIdCounter++}`;\n\n  /** Whether the toggle group is vertical. */\n  @Input()\n  get vertical(): boolean { return this._vertical; }\n  set vertical(value: boolean) {\n    this._vertical = coerceBooleanProperty(value);\n  }\n\n  /** Value of the toggle group. */\n  @Input()\n  get value(): any {\n    const selected = this._selectionModel ? this._selectionModel.selected : [];\n\n    if (this.multiple) {\n      return selected.map(toggle => toggle.value);\n    }\n\n    return selected[0] ? selected[0].value : undefined;\n  }\n  set value(newValue: any) {\n    this._setSelectionByValue(newValue);\n    this.valueChange.emit(this.value);\n  }\n\n  /**\n   * Event that emits whenever the value of the group changes.\n   * Used to facilitate two-way data binding.\n   * @docs-private\n   */\n  @Output() readonly valueChange = new EventEmitter<any>();\n\n  /** Selected button toggles in the group. */\n  get selected() {\n    const selected = this._selectionModel.selected;\n    return this.multiple ? selected : (selected[0] || null);\n  }\n\n  /** Whether multiple button toggles can be selected. */\n  @Input()\n  get multiple(): boolean { return this._multiple; }\n  set multiple(value: boolean) {\n    this._multiple = coerceBooleanProperty(value);\n  }\n\n  /** Whether multiple button toggle group is disabled. */\n  @Input()\n  get disabled(): boolean { return this._disabled; }\n  set disabled(value: boolean) {\n    this._disabled = coerceBooleanProperty(value);\n\n    if (this._buttonToggles) {\n      this._buttonToggles.forEach(toggle => toggle._markForCheck());\n    }\n  }\n\n  /** Event emitted when the group's value changes. */\n  @Output() readonly change: EventEmitter<MatButtonToggleChange> =\n      new EventEmitter<MatButtonToggleChange>();\n\n  constructor(\n    private _changeDetector: ChangeDetectorRef,\n    @Optional() @Inject(MAT_BUTTON_TOGGLE_DEFAULT_OPTIONS)\n        defaultOptions?: MatButtonToggleDefaultOptions) {\n\n      this.appearance =\n          defaultOptions && defaultOptions.appearance ? defaultOptions.appearance : 'standard';\n    }\n\n  ngOnInit() {\n    this._selectionModel = new SelectionModel<MatButtonToggle>(this.multiple, undefined, false);\n  }\n\n  ngAfterContentInit() {\n    this._selectionModel.select(...this._buttonToggles.filter(toggle => toggle.checked));\n  }\n\n  /**\n   * Sets the model value. Implemented as part of ControlValueAccessor.\n   * @param value Value to be set to the model.\n   */\n  writeValue(value: any) {\n    this.value = value;\n    this._changeDetector.markForCheck();\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnChange(fn: (value: any) => void) {\n    this._controlValueAccessorChangeFn = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnTouched(fn: any) {\n    this._onTouched = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n  }\n\n  /** Dispatch change event with current selection and group value. */\n  _emitChangeEvent(): void {\n    const selected = this.selected;\n    const source = Array.isArray(selected) ? selected[selected.length - 1] : selected;\n    const event = new MatButtonToggleChange(source!, this.value);\n    this._controlValueAccessorChangeFn(event.value);\n    this.change.emit(event);\n  }\n\n  /**\n   * Syncs a button toggle's selected state with the model value.\n   * @param toggle Toggle to be synced.\n   * @param select Whether the toggle should be selected.\n   * @param isUserInput Whether the change was a result of a user interaction.\n   */\n  _syncButtonToggle(toggle: MatButtonToggle, select: boolean, isUserInput = false) {\n    // Deselect the currently-selected toggle, if we're in single-selection\n    // mode and the button being toggled isn't selected at the moment.\n    if (!this.multiple && this.selected && !toggle.checked) {\n      (this.selected as MatButtonToggle).checked = false;\n    }\n\n    if (select) {\n      this._selectionModel.select(toggle);\n    } else {\n      this._selectionModel.deselect(toggle);\n    }\n\n    // Only emit the change event for user input.\n    if (isUserInput) {\n      this._emitChangeEvent();\n    }\n\n    // Note: we emit this one no matter whether it was a user interaction, because\n    // it is used by Angular to sync up the two-way data binding.\n    this.valueChange.emit(this.value);\n  }\n\n  /** Checks whether a button toggle is selected. */\n  _isSelected(toggle: MatButtonToggle) {\n    return this._selectionModel.isSelected(toggle);\n  }\n\n  /** Determines whether a button toggle should be checked on init. */\n  _isPrechecked(toggle: MatButtonToggle) {\n    if (typeof this._rawValue === 'undefined') {\n      return false;\n    }\n\n    if (this.multiple && Array.isArray(this._rawValue)) {\n      return this._rawValue.some(value => toggle.value != null && value === toggle.value);\n    }\n\n    return toggle.value === this._rawValue;\n  }\n\n  /** Updates the selection state of the toggles in the group based on a value. */\n  private _setSelectionByValue(value: any|any[]) {\n    this._rawValue = value;\n\n    if (!this._buttonToggles) {\n      return;\n    }\n\n    if (this.multiple && value) {\n      if (!Array.isArray(value)) {\n        throw Error('Value must be an array in multiple-selection mode.');\n      }\n\n      this._clearSelection();\n      value.forEach((currentValue: any) => this._selectValue(currentValue));\n    } else {\n      this._clearSelection();\n      this._selectValue(value);\n    }\n  }\n\n  /** Clears the selected toggles. */\n  private _clearSelection() {\n    this._selectionModel.clear();\n    this._buttonToggles.forEach(toggle => toggle.checked = false);\n  }\n\n  /** Selects a value if there's a toggle that corresponds to it. */\n  private _selectValue(value: any) {\n    const correspondingOption = this._buttonToggles.find(toggle => {\n      return toggle.value != null && toggle.value === value;\n    });\n\n    if (correspondingOption) {\n      correspondingOption.checked = true;\n      this._selectionModel.select(correspondingOption);\n    }\n  }\n}\n\n// Boilerplate for applying mixins to the MatButtonToggle class.\n/** @docs-private */\nexport class MatButtonToggleBase {}\nexport const _MatButtonToggleMixinBase: CanDisableRippleCtor & typeof MatButtonToggleBase =\n    mixinDisableRipple(MatButtonToggleBase);\n\n/** Single button inside of a toggle group. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-button-toggle',\n  templateUrl: 'button-toggle.html',\n  styleUrls: ['button-toggle.css'],\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matButtonToggle',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  inputs: ['disableRipple'],\n  host: {\n    '[class.mat-button-toggle-standalone]': '!buttonToggleGroup',\n    '[class.mat-button-toggle-checked]': 'checked',\n    '[class.mat-button-toggle-disabled]': 'disabled',\n    '[class.mat-button-toggle-appearance-standard]': 'appearance === \"standard\"',\n    'class': 'mat-button-toggle',\n    // Clear out the native tabindex here since we forward it to the underlying button\n    '[attr.tabindex]': 'null',\n    '[attr.id]': 'id',\n  }\n})\nexport class MatButtonToggle extends _MatButtonToggleMixinBase implements OnInit,\n  CanDisableRipple, OnDestroy {\n\n  private _isSingleSelector = false;\n  private _checked = false;\n\n  /**\n   * Attached to the aria-label attribute of the host element. In most cases, arial-labelledby will\n   * take precedence so this may be omitted.\n   */\n  @Input('aria-label') ariaLabel: string;\n\n  /**\n   * Users can specify the `aria-labelledby` attribute which will be forwarded to the input element\n   */\n  @Input('aria-labelledby') ariaLabelledby: string | null = null;\n\n  /** Type of the button toggle. Either 'radio' or 'checkbox'. */\n  _type: ToggleType;\n\n  @ViewChild('button') _buttonElement: ElementRef<HTMLButtonElement>;\n\n  /** The parent button toggle group (exclusive selection). Optional. */\n  buttonToggleGroup: MatButtonToggleGroup;\n\n  /** Unique ID for the underlying `button` element. */\n  get buttonId(): string { return `${this.id}-button`; }\n\n  /** The unique ID for this button toggle. */\n  @Input() id: string;\n\n  /** HTML's 'name' attribute used to group radios for unique selection. */\n  @Input() name: string;\n\n  /** MatButtonToggleGroup reads this to assign its own value. */\n  @Input() value: any;\n\n  /** Tabindex for the toggle. */\n  @Input() tabIndex: number | null;\n\n  /** The appearance style of the button. */\n  @Input()\n  get appearance(): MatButtonToggleAppearance {\n    return this.buttonToggleGroup ? this.buttonToggleGroup.appearance : this._appearance;\n  }\n  set appearance(value: MatButtonToggleAppearance) {\n    this._appearance = value;\n  }\n  private _appearance: MatButtonToggleAppearance;\n\n  /** Whether the button is checked. */\n  @Input()\n  get checked(): boolean {\n    return this.buttonToggleGroup ? this.buttonToggleGroup._isSelected(this) : this._checked;\n  }\n  set checked(value: boolean) {\n    const newValue = coerceBooleanProperty(value);\n\n    if (newValue !== this._checked) {\n      this._checked = newValue;\n\n      if (this.buttonToggleGroup) {\n        this.buttonToggleGroup._syncButtonToggle(this, this._checked);\n      }\n\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  /** Whether the button is disabled. */\n  @Input()\n  get disabled(): boolean {\n    return this._disabled || (this.buttonToggleGroup && this.buttonToggleGroup.disabled);\n  }\n  set disabled(value: boolean) { this._disabled = coerceBooleanProperty(value); }\n  private _disabled: boolean = false;\n\n  /** Event emitted when the group value changes. */\n  @Output() readonly change: EventEmitter<MatButtonToggleChange> =\n      new EventEmitter<MatButtonToggleChange>();\n\n  constructor(@Optional() toggleGroup: MatButtonToggleGroup,\n              private _changeDetectorRef: ChangeDetectorRef,\n              private _elementRef: ElementRef<HTMLElement>,\n              private _focusMonitor: FocusMonitor,\n              // @breaking-change 8.0.0 `defaultTabIndex` to be made a required parameter.\n              @Attribute('tabindex') defaultTabIndex: string,\n              @Optional() @Inject(MAT_BUTTON_TOGGLE_DEFAULT_OPTIONS)\n                  defaultOptions?: MatButtonToggleDefaultOptions) {\n    super();\n\n    const parsedTabIndex = Number(defaultTabIndex);\n    this.tabIndex = (parsedTabIndex || parsedTabIndex === 0) ? parsedTabIndex : null;\n    this.buttonToggleGroup = toggleGroup;\n    this.appearance =\n        defaultOptions && defaultOptions.appearance ? defaultOptions.appearance : 'standard';\n  }\n\n  ngOnInit() {\n    this._isSingleSelector = this.buttonToggleGroup && !this.buttonToggleGroup.multiple;\n    this._type = this._isSingleSelector ? 'radio' : 'checkbox';\n    this.id = this.id || `mat-button-toggle-${_uniqueIdCounter++}`;\n\n    if (this._isSingleSelector) {\n      this.name = this.buttonToggleGroup.name;\n    }\n\n    if (this.buttonToggleGroup && this.buttonToggleGroup._isPrechecked(this)) {\n      this.checked = true;\n    }\n\n    this._focusMonitor.monitor(this._elementRef, true);\n  }\n\n  ngOnDestroy() {\n    this._focusMonitor.stopMonitoring(this._elementRef);\n  }\n\n  /** Focuses the button. */\n  focus(): void {\n    this._buttonElement.nativeElement.focus();\n  }\n\n  /** Checks the button toggle due to an interaction with the underlying native button. */\n  _onButtonClick() {\n    const newChecked = this._isSingleSelector ? true : !this._checked;\n\n    if (newChecked !== this._checked) {\n      this._checked = newChecked;\n      if (this.buttonToggleGroup) {\n        this.buttonToggleGroup._syncButtonToggle(this, this._checked, true);\n        this.buttonToggleGroup._onTouched();\n      }\n    }\n    // Emit a change event when it's the single selector\n    this.change.emit(new MatButtonToggleChange(this, this.value));\n  }\n\n  /**\n   * Marks the button toggle as needing checking for change detection.\n   * This method is exposed because the parent button toggle group will directly\n   * update bound properties of the radio button.\n   */\n  _markForCheck() {\n    // When the group value changes, the button will not be notified.\n    // Use `markForCheck` to explicit update button toggle's status.\n    this._changeDetectorRef.markForCheck();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {MatButtonToggle, MatButtonToggleGroup} from './button-toggle';\n\n\n@NgModule({\n  imports: [MatCommonModule, MatRippleModule],\n  exports: [MatCommonModule, MatButtonToggleGroup, MatButtonToggle],\n  declarations: [MatButtonToggleGroup, MatButtonToggle],\n})\nexport class MatButtonToggleModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ViewEncapsulation,\n  ChangeDetectionStrategy,\n  Directive,\n  Input,\n} from '@angular/core';\n\n\n/**\n * Content of a card, needed as it's used as a selector in the API.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-card-content',\n  host: {'class': 'mat-card-content'}\n})\nexport class MatCardContent {}\n\n/**\n * Title of a card, needed as it's used as a selector in the API.\n * @docs-private\n */\n@Directive({\n  selector: `mat-card-title, [mat-card-title], [matCardTitle]`,\n  host: {\n    'class': 'mat-card-title'\n  }\n})\nexport class MatCardTitle {}\n\n/**\n * Sub-title of a card, needed as it's used as a selector in the API.\n * @docs-private\n */\n@Directive({\n  selector: `mat-card-subtitle, [mat-card-subtitle], [matCardSubtitle]`,\n  host: {\n    'class': 'mat-card-subtitle'\n  }\n})\nexport class MatCardSubtitle {}\n\n/**\n * Action section of a card, needed as it's used as a selector in the API.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-card-actions',\n  exportAs: 'matCardActions',\n  host: {\n    'class': 'mat-card-actions',\n    '[class.mat-card-actions-align-end]': 'align === \"end\"',\n  }\n})\nexport class MatCardActions {\n  /** Position of the actions inside the card. */\n  @Input() align: 'start' | 'end' = 'start';\n}\n\n/**\n * Footer of a card, needed as it's used as a selector in the API.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-card-footer',\n  host: {'class': 'mat-card-footer'}\n})\nexport class MatCardFooter {}\n\n/**\n * Image used in a card, needed to add the mat- CSS styling.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-card-image], [matCardImage]',\n  host: {'class': 'mat-card-image'}\n})\nexport class MatCardImage {}\n\n/**\n * Image used in a card, needed to add the mat- CSS styling.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-card-sm-image], [matCardImageSmall]',\n  host: {'class': 'mat-card-sm-image'}\n})\nexport class MatCardSmImage {}\n\n/**\n * Image used in a card, needed to add the mat- CSS styling.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-card-md-image], [matCardImageMedium]',\n  host: {'class': 'mat-card-md-image'}\n})\nexport class MatCardMdImage {}\n\n/**\n * Image used in a card, needed to add the mat- CSS styling.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-card-lg-image], [matCardImageLarge]',\n  host: {'class': 'mat-card-lg-image'}\n})\nexport class MatCardLgImage {}\n\n/**\n * Large image used in a card, needed to add the mat- CSS styling.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-card-xl-image], [matCardImageXLarge]',\n  host: {'class': 'mat-card-xl-image'}\n})\nexport class MatCardXlImage {}\n\n/**\n * Avatar image used in a card, needed to add the mat- CSS styling.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-card-avatar], [matCardAvatar]',\n  host: {'class': 'mat-card-avatar'}\n})\nexport class MatCardAvatar {}\n\n\n/**\n * A basic content container component that adds the styles of a Material design card.\n *\n * While this component can be used alone, it also provides a number\n * of preset styles for common card sections, including:\n * - mat-card-title\n * - mat-card-subtitle\n * - mat-card-content\n * - mat-card-actions\n * - mat-card-footer\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-card',\n  exportAs: 'matCard',\n  templateUrl: 'card.html',\n  styleUrls: ['card.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {'class': 'mat-card'}\n})\nexport class MatCard {}\n\n\n/**\n * Component intended to be used within the `<mat-card>` component. It adds styles for a\n * preset header section (i.e. a title, subtitle, and avatar layout).\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-card-header',\n  templateUrl: 'card-header.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {'class': 'mat-card-header'}\n})\nexport class MatCardHeader {}\n\n\n/**\n * Component intended to be used within the `<mat-card>` component. It adds styles for a preset\n * layout that groups an image with a title section.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-card-title-group',\n  templateUrl: 'card-title-group.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {'class': 'mat-card-title-group'}\n})\nexport class MatCardTitleGroup {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {\n  MatCard,\n  MatCardActions,\n  MatCardAvatar,\n  MatCardContent,\n  MatCardFooter,\n  MatCardHeader,\n  MatCardImage,\n  MatCardLgImage,\n  MatCardMdImage,\n  MatCardSmImage,\n  MatCardSubtitle,\n  MatCardTitle,\n  MatCardTitleGroup,\n  MatCardXlImage,\n} from './card';\n\n\n@NgModule({\n  imports: [MatCommonModule],\n  exports: [\n    MatCard,\n    MatCardHeader,\n    MatCardTitleGroup,\n    MatCardContent,\n    MatCardTitle,\n    MatCardSubtitle,\n    MatCardActions,\n    MatCardFooter,\n    MatCardSmImage,\n    MatCardMdImage,\n    MatCardLgImage,\n    MatCardImage,\n    MatCardXlImage,\n    MatCardAvatar,\n    MatCommonModule,\n  ],\n  declarations: [\n    MatCard, MatCardHeader, MatCardTitleGroup, MatCardContent, MatCardTitle, MatCardSubtitle,\n    MatCardActions, MatCardFooter, MatCardSmImage, MatCardMdImage, MatCardLgImage, MatCardImage,\n    MatCardXlImage, MatCardAvatar,\n  ],\n})\nexport class MatCardModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {InjectionToken} from '@angular/core';\n\n\n/**\n * Checkbox click action when user click on input element.\n * noop: Do not toggle checked or indeterminate.\n * check: Only toggle checked status, ignore indeterminate.\n * check-indeterminate: Toggle checked status, set indeterminate to false. Default behavior.\n * undefined: Same as `check-indeterminate`.\n */\nexport type MatCheckboxClickAction = 'noop' | 'check' | 'check-indeterminate' | undefined;\n\n/**\n * Injection token that can be used to specify the checkbox click behavior.\n */\nexport const MAT_CHECKBOX_CLICK_ACTION =\n    new InjectionToken<MatCheckboxClickAction>('mat-checkbox-click-action');\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ActiveDescendantKeyManager} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  InjectionToken,\n  Input,\n  Output,\n  QueryList,\n  TemplateRef,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {\n  CanDisableRipple,\n  CanDisableRippleCtor,\n  MAT_OPTION_PARENT_COMPONENT,\n  MatOptgroup,\n  MatOption,\n  mixinDisableRipple,\n} from '@angular/material/core';\n\n\n/**\n * Autocomplete IDs need to be unique across components, so this counter exists outside of\n * the component definition.\n */\nlet _uniqueAutocompleteIdCounter = 0;\n\n/** Event object that is emitted when an autocomplete option is selected. */\nexport class MatAutocompleteSelectedEvent {\n  constructor(\n    /** Reference to the autocomplete panel that emitted the event. */\n    public source: MatAutocomplete,\n    /** Option that was selected. */\n    public option: MatOption) { }\n}\n\n\n// Boilerplate for applying mixins to MatAutocomplete.\n/** @docs-private */\nexport class MatAutocompleteBase {}\nexport const _MatAutocompleteMixinBase: CanDisableRippleCtor & typeof MatAutocompleteBase =\n    mixinDisableRipple(MatAutocompleteBase);\n\n/** Default `mat-autocomplete` options that can be overridden. */\nexport interface MatAutocompleteDefaultOptions {\n  /** Whether the first option should be highlighted when an autocomplete panel is opened. */\n  autoActiveFirstOption?: boolean;\n}\n\n/** Injection token to be used to override the default options for `mat-autocomplete`. */\nexport const MAT_AUTOCOMPLETE_DEFAULT_OPTIONS =\n    new InjectionToken<MatAutocompleteDefaultOptions>('mat-autocomplete-default-options', {\n      providedIn: 'root',\n      factory: MAT_AUTOCOMPLETE_DEFAULT_OPTIONS_FACTORY,\n    });\n\n/** @docs-private */\nexport function MAT_AUTOCOMPLETE_DEFAULT_OPTIONS_FACTORY(): MatAutocompleteDefaultOptions {\n  return {autoActiveFirstOption: false};\n}\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-autocomplete',\n  templateUrl: 'autocomplete.html',\n  styleUrls: ['autocomplete.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  exportAs: 'matAutocomplete',\n  inputs: ['disableRipple'],\n  host: {\n    'class': 'mat-autocomplete'\n  },\n  providers: [\n    {provide: MAT_OPTION_PARENT_COMPONENT, useExisting: MatAutocomplete}\n  ]\n})\nexport class MatAutocomplete extends _MatAutocompleteMixinBase implements AfterContentInit,\n  CanDisableRipple {\n\n  /** Manages active item in option list based on key events. */\n  _keyManager: ActiveDescendantKeyManager<MatOption>;\n\n  /** Whether the autocomplete panel should be visible, depending on option length. */\n  showPanel: boolean = false;\n\n  /** Whether the autocomplete panel is open. */\n  get isOpen(): boolean { return this._isOpen && this.showPanel; }\n  _isOpen: boolean = false;\n\n  /** @docs-private */\n  @ViewChild(TemplateRef) template: TemplateRef<any>;\n\n  /** Element for the panel containing the autocomplete options. */\n  @ViewChild('panel') panel: ElementRef;\n\n  /** @docs-private */\n  @ContentChildren(MatOption, { descendants: true }) options: QueryList<MatOption>;\n\n  /** @docs-private */\n  @ContentChildren(MatOptgroup) optionGroups: QueryList<MatOptgroup>;\n\n  /** Function that maps an option's control value to its display value in the trigger. */\n  @Input() displayWith: ((value: any) => string) | null = null;\n\n  /**\n   * Whether the first option should be highlighted when the autocomplete panel is opened.\n   * Can be configured globally through the `MAT_AUTOCOMPLETE_DEFAULT_OPTIONS` token.\n   */\n  @Input()\n  get autoActiveFirstOption(): boolean { return this._autoActiveFirstOption; }\n  set autoActiveFirstOption(value: boolean) {\n    this._autoActiveFirstOption = coerceBooleanProperty(value);\n  }\n  private _autoActiveFirstOption: boolean;\n\n  /**\n   * Specify the width of the autocomplete panel.  Can be any CSS sizing value, otherwise it will\n   * match the width of its host.\n   */\n  @Input() panelWidth: string | number;\n\n  /** Event that is emitted whenever an option from the list is selected. */\n  @Output() readonly optionSelected: EventEmitter<MatAutocompleteSelectedEvent> =\n      new EventEmitter<MatAutocompleteSelectedEvent>();\n\n  /** Event that is emitted when the autocomplete panel is opened. */\n  @Output() readonly opened: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Event that is emitted when the autocomplete panel is closed. */\n  @Output() readonly closed: EventEmitter<void> = new EventEmitter<void>();\n\n  /**\n   * Takes classes set on the host mat-autocomplete element and applies them to the panel\n   * inside the overlay container to allow for easy styling.\n   */\n  @Input('class')\n  set classList(value: string) {\n    if (value && value.length) {\n      value.split(' ').forEach(className => this._classList[className.trim()] = true);\n      this._elementRef.nativeElement.className = '';\n    }\n  }\n  _classList: {[key: string]: boolean} = {};\n\n  /** Unique ID to be used by autocomplete trigger's \"aria-owns\" property. */\n  id: string = `mat-autocomplete-${_uniqueAutocompleteIdCounter++}`;\n\n  constructor(\n    private _changeDetectorRef: ChangeDetectorRef,\n    private _elementRef: ElementRef<HTMLElement>,\n    @Inject(MAT_AUTOCOMPLETE_DEFAULT_OPTIONS) defaults: MatAutocompleteDefaultOptions) {\n    super();\n\n    this._autoActiveFirstOption = !!defaults.autoActiveFirstOption;\n  }\n\n  ngAfterContentInit() {\n    this._keyManager = new ActiveDescendantKeyManager<MatOption>(this.options).withWrap();\n    // Set the initial visibility state.\n    this._setVisibility();\n  }\n\n  /**\n   * Sets the panel scrollTop. This allows us to manually scroll to display options\n   * above or below the fold, as they are not actually being focused when active.\n   */\n  _setScrollTop(scrollTop: number): void {\n    if (this.panel) {\n      this.panel.nativeElement.scrollTop = scrollTop;\n    }\n  }\n\n  /** Returns the panel's scrollTop. */\n  _getScrollTop(): number {\n    return this.panel ? this.panel.nativeElement.scrollTop : 0;\n  }\n\n  /** Panel should hide itself when the option list is empty. */\n  _setVisibility() {\n    this.showPanel = !!this.options.length;\n    this._classList['mat-autocomplete-visible'] = this.showPanel;\n    this._classList['mat-autocomplete-hidden'] = !this.showPanel;\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Emits the `select` event. */\n  _emitSelectEvent(option: MatOption): void {\n    const event = new MatAutocompleteSelectedEvent(this, option);\n    this.optionSelected.emit(event);\n  }\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, ElementRef} from '@angular/core';\n\n/**\n * Directive applied to an element to make it usable\n * as a connection point for an autocomplete panel.\n */\n@Directive({\n  selector: '[matAutocompleteOrigin]',\n  exportAs: 'matAutocompleteOrigin',\n})\nexport class MatAutocompleteOrigin {\n  constructor(\n      /** Reference to the element on which the directive is applied. */\n      public elementRef: ElementRef<HTMLElement>) { }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {MatOptionModule, MatCommonModule} from '@angular/material/core';\nimport {MatAutocomplete} from './autocomplete';\nimport {\n  MatAutocompleteTrigger,\n  MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY_PROVIDER,\n} from './autocomplete-trigger';\nimport {MatAutocompleteOrigin} from './autocomplete-origin';\n\n@NgModule({\n  imports: [MatOptionModule, OverlayModule, MatCommonModule, CommonModule],\n  exports: [\n    MatAutocomplete,\n    MatOptionModule,\n    MatAutocompleteTrigger,\n    MatAutocompleteOrigin,\n    MatCommonModule\n  ],\n  declarations: [MatAutocomplete, MatAutocompleteTrigger, MatAutocompleteOrigin],\n  providers: [MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY_PROVIDER],\n})\nexport class MatAutocompleteModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {AriaDescriber} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {DOCUMENT} from '@angular/common';\nimport {\n  Directive,\n  ElementRef,\n  Inject,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  Renderer2,\n} from '@angular/core';\nimport {ThemePalette, mixinDisabled, CanDisableCtor, CanDisable} from '@angular/material/core';\n\n\nlet nextId = 0;\n\n// Boilerplate for applying mixins to MatBadge.\n/** @docs-private */\nexport class MatBadgeBase {}\n\nexport const _MatBadgeMixinBase:\n    CanDisableCtor & typeof MatBadgeBase = mixinDisabled(MatBadgeBase);\n\nexport type MatBadgePosition = 'above after' | 'above before' | 'below before' | 'below after';\nexport type MatBadgeSize = 'small' | 'medium' | 'large';\n\n/** Directive to display a text badge. */\n@Directive({\n  selector: '[matBadge]',\n  inputs: ['disabled: matBadgeDisabled'],\n  host: {\n    'class': 'mat-badge',\n    '[class.mat-badge-overlap]': 'overlap',\n    '[class.mat-badge-above]': 'isAbove()',\n    '[class.mat-badge-below]': '!isAbove()',\n    '[class.mat-badge-before]': '!isAfter()',\n    '[class.mat-badge-after]': 'isAfter()',\n    '[class.mat-badge-small]': 'size === \"small\"',\n    '[class.mat-badge-medium]': 'size === \"medium\"',\n    '[class.mat-badge-large]': 'size === \"large\"',\n    '[class.mat-badge-hidden]': 'hidden || !_hasContent',\n    '[class.mat-badge-disabled]': 'disabled',\n  },\n})\nexport class MatBadge extends _MatBadgeMixinBase implements OnDestroy, CanDisable {\n  /** Whether the badge has any content. */\n  _hasContent = false;\n\n  /** The color of the badge. Can be `primary`, `accent`, or `warn`. */\n  @Input('matBadgeColor')\n  get color(): ThemePalette { return this._color; }\n  set color(value: ThemePalette) {\n    this._setColor(value);\n    this._color = value;\n  }\n  private _color: ThemePalette = 'primary';\n\n  /** Whether the badge should overlap its contents or not */\n  @Input('matBadgeOverlap')\n  get overlap(): boolean { return this._overlap; }\n  set overlap(val: boolean) {\n    this._overlap = coerceBooleanProperty(val);\n  }\n  private _overlap: boolean = true;\n\n  /**\n   * Position the badge should reside.\n   * Accepts any combination of 'above'|'below' and 'before'|'after'\n   */\n  @Input('matBadgePosition') position: MatBadgePosition = 'above after';\n\n  /** The content for the badge */\n  @Input('matBadge')\n  get content(): string { return this._content; }\n  set content(value: string) {\n    this._content = value;\n    this._hasContent = value != null && `${value}`.trim().length > 0;\n    this._updateTextContent();\n  }\n  private _content: string;\n\n  /** Message used to describe the decorated element via aria-describedby */\n  @Input('matBadgeDescription')\n  get description(): string { return this._description; }\n  set description(newDescription: string) {\n    if (newDescription !== this._description) {\n      this._updateHostAriaDescription(newDescription, this._description);\n      this._description = newDescription;\n    }\n  }\n  private _description: string;\n\n  /** Size of the badge. Can be 'small', 'medium', or 'large'. */\n  @Input('matBadgeSize') size: MatBadgeSize = 'medium';\n\n  /** Whether the badge is hidden. */\n  @Input('matBadgeHidden')\n  get hidden(): boolean { return this._hidden; }\n  set hidden(val: boolean) {\n    this._hidden = coerceBooleanProperty(val);\n  }\n  private _hidden: boolean;\n\n  /** Unique id for the badge */\n  _id: number = nextId++;\n\n  private _badgeElement: HTMLElement;\n\n  constructor(\n      @Optional() @Inject(DOCUMENT) private _document: any,\n      private _ngZone: NgZone,\n      private _elementRef: ElementRef<HTMLElement>,\n      private _ariaDescriber: AriaDescriber,\n      /** @breaking-change 8.0.0 Make _renderer a required param and remove _document. */\n      private _renderer?: Renderer2) {\n        super();\n      }\n\n  /** Whether the badge is above the host or not */\n  isAbove(): boolean {\n    return this.position.indexOf('below') === -1;\n  }\n\n  /** Whether the badge is after the host or not */\n  isAfter(): boolean {\n    return this.position.indexOf('before') === -1;\n  }\n\n  ngOnDestroy() {\n    if (this.description && this._badgeElement) {\n      this._ariaDescriber.removeDescription(this._badgeElement, this.description);\n    }\n  }\n\n  /** Injects a span element into the DOM with the content. */\n  private _updateTextContent(): HTMLSpanElement {\n    if (!this._badgeElement) {\n      this._badgeElement = this._createBadgeElement();\n    } else {\n      this._badgeElement.textContent = this.content;\n    }\n    return this._badgeElement;\n  }\n\n  /** Creates the badge element */\n  private _createBadgeElement(): HTMLElement {\n    // @breaking-change 8.0.0 Remove null check for _renderer\n    const rootNode = this._renderer || this._document;\n    const badgeElement = rootNode.createElement('span');\n    const activeClass = 'mat-badge-active';\n\n    badgeElement.setAttribute('id', `mat-badge-content-${this._id}`);\n    badgeElement.classList.add('mat-badge-content');\n    badgeElement.textContent = this.content;\n\n    if (this.description) {\n      badgeElement.setAttribute('aria-label', this.description);\n    }\n\n    this._elementRef.nativeElement.appendChild(badgeElement);\n\n    // animate in after insertion\n    if (typeof requestAnimationFrame === 'function') {\n      this._ngZone.runOutsideAngular(() => {\n        requestAnimationFrame(() => {\n          badgeElement.classList.add(activeClass);\n        });\n      });\n    } else {\n      badgeElement.classList.add(activeClass);\n    }\n\n    return badgeElement;\n  }\n\n  /** Sets the aria-label property on the element */\n  private _updateHostAriaDescription(newDescription: string, oldDescription: string): void {\n    // ensure content available before setting label\n    const content = this._updateTextContent();\n\n    if (oldDescription) {\n      this._ariaDescriber.removeDescription(content, oldDescription);\n    }\n\n    if (newDescription) {\n      this._ariaDescriber.describe(content, newDescription);\n    }\n  }\n\n  /** Adds css theme class given the color to the component host */\n  private _setColor(colorPalette: ThemePalette) {\n    if (colorPalette !== this._color) {\n      if (this._color) {\n        this._elementRef.nativeElement.classList.remove(`mat-badge-${this._color}`);\n      }\n      if (colorPalette) {\n        this._elementRef.nativeElement.classList.add(`mat-badge-${colorPalette}`);\n      }\n    }\n  }\n\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {A11yModule} from '@angular/cdk/a11y';\nimport {MatBadge} from './badge';\n\n\n@NgModule({\n  imports: [\n    A11yModule,\n    MatCommonModule\n  ],\n  exports: [MatBadge],\n  declarations: [MatBadge],\n})\nexport class MatBadgeModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ViewContainerRef, InjectionToken} from '@angular/core';\nimport {Direction} from '@angular/cdk/bidi';\n\n/** Injection token that can be used to access the data that was passed in to a bottom sheet. */\nexport const MAT_BOTTOM_SHEET_DATA = new InjectionToken<any>('MatBottomSheetData');\n\n/**\n * Configuration used when opening a bottom sheet.\n */\nexport class MatBottomSheetConfig<D = any> {\n  /** The view container to place the overlay for the bottom sheet into. */\n  viewContainerRef?: ViewContainerRef;\n\n  /** Extra CSS classes to be added to the bottom sheet container. */\n  panelClass?: string | string[];\n\n  /** Text layout direction for the bottom sheet. */\n  direction?: Direction;\n\n  /** Data being injected into the child component. */\n  data?: D | null = null;\n\n  /** Whether the bottom sheet has a backdrop. */\n  hasBackdrop?: boolean = true;\n\n  /** Custom class for the backdrop. */\n  backdropClass?: string;\n\n  /** Whether the user can use escape or clicking outside to close the bottom sheet. */\n  disableClose?: boolean = false;\n\n  /** Aria label to assign to the bottom sheet element. */\n  ariaLabel?: string | null = null;\n\n  /**\n   * Whether the bottom sheet should close when the user goes backwards/forwards in history.\n   * Note that this usually doesn't include clicking on links (unless the user is using\n   * the `HashLocationStrategy`).\n   */\n  closeOnNavigation?: boolean = true;\n\n  /** Whether the bottom sheet should focus the first focusable element on open. */\n  autoFocus?: boolean = true;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\nimport {AnimationCurves, AnimationDurations} from '@angular/material/core';\n\n/** Animations used by the Material bottom sheet. */\nexport const matBottomSheetAnimations: {\n  readonly bottomSheetState: AnimationTriggerMetadata;\n} = {\n  /** Animation that shows and hides a bottom sheet. */\n  bottomSheetState: trigger('state', [\n    state('void, hidden', style({transform: 'translateY(100%)'})),\n    state('visible', style({transform: 'translateY(0%)'})),\n    transition('visible => void, visible => hidden',\n        animate(`${AnimationDurations.COMPLEX} ${AnimationCurves.ACCELERATION_CURVE}`)),\n    transition('void => visible',\n        animate(`${AnimationDurations.EXITING} ${AnimationCurves.DECELERATION_CURVE}`)),\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ComponentRef,\n  EmbeddedViewRef,\n  ViewChild,\n  OnDestroy,\n  ElementRef,\n  ChangeDetectionStrategy,\n  ViewEncapsulation,\n  ChangeDetectorRef,\n  EventEmitter,\n  Inject,\n  Optional,\n} from '@angular/core';\nimport {AnimationEvent} from '@angular/animations';\nimport {\n  BasePortalOutlet,\n  ComponentPortal,\n  TemplatePortal,\n  CdkPortalOutlet,\n} from '@angular/cdk/portal';\nimport {BreakpointObserver, Breakpoints} from '@angular/cdk/layout';\nimport {MatBottomSheetConfig} from './bottom-sheet-config';\nimport {matBottomSheetAnimations} from './bottom-sheet-animations';\nimport {Subscription} from 'rxjs';\nimport {DOCUMENT} from '@angular/common';\nimport {FocusTrap, FocusTrapFactory} from '@angular/cdk/a11y';\n\n// TODO(crisbeto): consolidate some logic between this, MatDialog and MatSnackBar\n\n/**\n * Internal component that wraps user-provided bottom sheet content.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-bottom-sheet-container',\n  templateUrl: 'bottom-sheet-container.html',\n  styleUrls: ['bottom-sheet-container.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  animations: [matBottomSheetAnimations.bottomSheetState],\n  host: {\n    'class': 'mat-bottom-sheet-container',\n    'tabindex': '-1',\n    'role': 'dialog',\n    'aria-modal': 'true',\n    '[attr.aria-label]': 'bottomSheetConfig?.ariaLabel',\n    '[@state]': '_animationState',\n    '(@state.start)': '_onAnimationStart($event)',\n    '(@state.done)': '_onAnimationDone($event)'\n  },\n})\nexport class MatBottomSheetContainer extends BasePortalOutlet implements OnDestroy {\n  private _breakpointSubscription: Subscription;\n\n  /** The portal outlet inside of this container into which the content will be loaded. */\n  @ViewChild(CdkPortalOutlet) _portalOutlet: CdkPortalOutlet;\n\n  /** The state of the bottom sheet animations. */\n  _animationState: 'void' | 'visible' | 'hidden' = 'void';\n\n  /** Emits whenever the state of the animation changes. */\n  _animationStateChanged = new EventEmitter<AnimationEvent>();\n\n  /** The class that traps and manages focus within the bottom sheet. */\n  private _focusTrap: FocusTrap;\n\n  /** Element that was focused before the bottom sheet was opened. */\n  private _elementFocusedBeforeOpened: HTMLElement | null = null;\n\n  /** Server-side rendering-compatible reference to the global document object. */\n  private _document: Document;\n\n  /** Whether the component has been destroyed. */\n  private _destroyed: boolean;\n\n  constructor(\n    private _elementRef: ElementRef<HTMLElement>,\n    private _changeDetectorRef: ChangeDetectorRef,\n    private _focusTrapFactory: FocusTrapFactory,\n    breakpointObserver: BreakpointObserver,\n    @Optional() @Inject(DOCUMENT) document: any,\n    /** The bottom sheet configuration. */\n    public bottomSheetConfig: MatBottomSheetConfig) {\n    super();\n\n    this._document = document;\n    this._breakpointSubscription = breakpointObserver\n      .observe([Breakpoints.Medium, Breakpoints.Large, Breakpoints.XLarge])\n      .subscribe(() => {\n        this._toggleClass('mat-bottom-sheet-container-medium',\n            breakpointObserver.isMatched(Breakpoints.Medium));\n        this._toggleClass('mat-bottom-sheet-container-large',\n            breakpointObserver.isMatched(Breakpoints.Large));\n        this._toggleClass('mat-bottom-sheet-container-xlarge',\n            breakpointObserver.isMatched(Breakpoints.XLarge));\n      });\n  }\n\n  /** Attach a component portal as content to this bottom sheet container. */\n  attachComponentPortal<T>(portal: ComponentPortal<T>): ComponentRef<T> {\n    this._validatePortalAttached();\n    this._setPanelClass();\n    this._savePreviouslyFocusedElement();\n    return this._portalOutlet.attachComponentPortal(portal);\n  }\n\n  /** Attach a template portal as content to this bottom sheet container. */\n  attachTemplatePortal<C>(portal: TemplatePortal<C>): EmbeddedViewRef<C> {\n    this._validatePortalAttached();\n    this._setPanelClass();\n    this._savePreviouslyFocusedElement();\n    return this._portalOutlet.attachTemplatePortal(portal);\n  }\n\n  /** Begin animation of bottom sheet entrance into view. */\n  enter(): void {\n    if (!this._destroyed) {\n      this._animationState = 'visible';\n      this._changeDetectorRef.detectChanges();\n    }\n  }\n\n  /** Begin animation of the bottom sheet exiting from view. */\n  exit(): void {\n    if (!this._destroyed) {\n      this._animationState = 'hidden';\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  ngOnDestroy() {\n    this._breakpointSubscription.unsubscribe();\n    this._destroyed = true;\n  }\n\n  _onAnimationDone(event: AnimationEvent) {\n    if (event.toState === 'hidden') {\n      this._restoreFocus();\n    } else if (event.toState === 'visible' && this.bottomSheetConfig.autoFocus) {\n      this._trapFocus();\n    }\n\n    this._animationStateChanged.emit(event);\n  }\n\n  _onAnimationStart(event: AnimationEvent) {\n    this._animationStateChanged.emit(event);\n  }\n\n  private _toggleClass(cssClass: string, add: boolean) {\n    const classList = this._elementRef.nativeElement.classList;\n    add ? classList.add(cssClass) : classList.remove(cssClass);\n  }\n\n  private _validatePortalAttached() {\n    if (this._portalOutlet.hasAttached()) {\n      throw Error('Attempting to attach bottom sheet content after content is already attached');\n    }\n  }\n\n  private _setPanelClass() {\n    const element: HTMLElement = this._elementRef.nativeElement;\n    const panelClass = this.bottomSheetConfig.panelClass;\n\n    if (Array.isArray(panelClass)) {\n      // Note that we can't use a spread here, because IE doesn't support multiple arguments.\n      panelClass.forEach(cssClass => element.classList.add(cssClass));\n    } else if (panelClass) {\n      element.classList.add(panelClass);\n    }\n  }\n\n\n  /** Moves the focus inside the focus trap. */\n  private _trapFocus() {\n    if (!this._focusTrap) {\n      this._focusTrap = this._focusTrapFactory.create(this._elementRef.nativeElement);\n    }\n\n    this._focusTrap.focusInitialElementWhenReady();\n  }\n\n  /** Restores focus to the element that was focused before the bottom sheet opened. */\n  private _restoreFocus() {\n    const toFocus = this._elementFocusedBeforeOpened;\n\n    // We need the extra check, because IE can set the `activeElement` to null in some cases.\n    if (toFocus && typeof toFocus.focus === 'function') {\n      toFocus.focus();\n    }\n\n    if (this._focusTrap) {\n      this._focusTrap.destroy();\n    }\n  }\n\n  /** Saves a reference to the element that was focused before the bottom sheet was opened. */\n  private _savePreviouslyFocusedElement() {\n    this._elementFocusedBeforeOpened = this._document.activeElement as HTMLElement;\n\n    // The `focus` method isn't available during server-side rendering.\n    if (this._elementRef.nativeElement.focus) {\n      Promise.resolve().then(() => this._elementRef.nativeElement.focus());\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatBottomSheetContainer} from './bottom-sheet-container';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    OverlayModule,\n    MatCommonModule,\n    PortalModule,\n  ],\n  exports: [MatBottomSheetContainer, MatCommonModule],\n  declarations: [MatBottomSheetContainer],\n  entryComponents: [MatBottomSheetContainer],\n})\nexport class MatBottomSheetModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Location} from '@angular/common';\nimport {ESCAPE} from '@angular/cdk/keycodes';\nimport {OverlayRef} from '@angular/cdk/overlay';\nimport {merge, Observable, Subject} from 'rxjs';\nimport {filter, take} from 'rxjs/operators';\nimport {MatBottomSheetContainer} from './bottom-sheet-container';\n\n\n/**\n * Reference to a bottom sheet dispatched from the bottom sheet service.\n */\nexport class MatBottomSheetRef<T = any, R = any> {\n  /** Instance of the component making up the content of the bottom sheet. */\n  instance: T;\n\n  /**\n   * Instance of the component into which the bottom sheet content is projected.\n   * @docs-private\n   */\n  containerInstance: MatBottomSheetContainer;\n\n  /** Subject for notifying the user that the bottom sheet has been dismissed. */\n  private readonly _afterDismissed = new Subject<R | undefined>();\n\n  /** Subject for notifying the user that the bottom sheet has opened and appeared. */\n  private readonly _afterOpened = new Subject<void>();\n\n  /** Result to be passed down to the `afterDismissed` stream. */\n  private _result: R | undefined;\n\n  constructor(\n    containerInstance: MatBottomSheetContainer,\n    private _overlayRef: OverlayRef,\n    // @breaking-change 8.0.0 `_location` parameter to be removed.\n    _location?: Location) {\n    this.containerInstance = containerInstance;\n\n    // Emit when opening animation completes\n    containerInstance._animationStateChanged.pipe(\n      filter(event => event.phaseName === 'done' && event.toState === 'visible'),\n      take(1)\n    )\n    .subscribe(() => {\n      this._afterOpened.next();\n      this._afterOpened.complete();\n    });\n\n    // Dispose overlay when closing animation is complete\n    containerInstance._animationStateChanged.pipe(\n      filter(event => event.phaseName === 'done' && event.toState === 'hidden'),\n      take(1)\n    )\n    .subscribe(() => {\n      this._overlayRef.dispose();\n      this._afterDismissed.next(this._result);\n      this._afterDismissed.complete();\n    });\n\n    if (!containerInstance.bottomSheetConfig.disableClose) {\n      merge(\n        _overlayRef.backdropClick(),\n        _overlayRef.keydownEvents().pipe(filter(event => event.keyCode === ESCAPE))\n      ).subscribe(() => this.dismiss());\n    }\n  }\n\n  /**\n   * Dismisses the bottom sheet.\n   * @param result Data to be passed back to the bottom sheet opener.\n   */\n  dismiss(result?: R): void {\n    if (!this._afterDismissed.closed) {\n      // Transition the backdrop in parallel to the bottom sheet.\n      this.containerInstance._animationStateChanged.pipe(\n        filter(event => event.phaseName === 'start'),\n        take(1)\n      ).subscribe(() => this._overlayRef.detachBackdrop());\n\n      this._result = result;\n      this.containerInstance.exit();\n    }\n  }\n\n  /** Gets an observable that is notified when the bottom sheet is finished closing. */\n  afterDismissed(): Observable<R | undefined> {\n    return this._afterDismissed.asObservable();\n  }\n\n  /** Gets an observable that is notified when the bottom sheet has opened and appeared. */\n  afterOpened(): Observable<void> {\n    return this._afterOpened.asObservable();\n  }\n\n  /**\n   * Gets an observable that emits when the overlay's backdrop has been clicked.\n   */\n  backdropClick(): Observable<MouseEvent> {\n    return this._overlayRef.backdropClick();\n  }\n\n  /**\n   * Gets an observable that emits when keydown events are targeted on the overlay.\n   */\n  keydownEvents(): Observable<KeyboardEvent> {\n    return this._overlayRef.keydownEvents();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directionality} from '@angular/cdk/bidi';\nimport {Overlay, OverlayConfig, OverlayRef} from '@angular/cdk/overlay';\nimport {ComponentPortal, ComponentType, PortalInjector, TemplatePortal} from '@angular/cdk/portal';\nimport {\n  ComponentRef,\n  Injectable,\n  Injector,\n  Optional,\n  SkipSelf,\n  TemplateRef,\n  InjectionToken,\n  Inject,\n  OnDestroy,\n} from '@angular/core';\nimport {Location} from '@angular/common';\nimport {of as observableOf} from 'rxjs';\nimport {MAT_BOTTOM_SHEET_DATA, MatBottomSheetConfig} from './bottom-sheet-config';\nimport {MatBottomSheetContainer} from './bottom-sheet-container';\nimport {MatBottomSheetModule} from './bottom-sheet-module';\nimport {MatBottomSheetRef} from './bottom-sheet-ref';\n\n\n/** Injection token that can be used to specify default bottom sheet options. */\nexport const MAT_BOTTOM_SHEET_DEFAULT_OPTIONS =\n    new InjectionToken<MatBottomSheetConfig>('mat-bottom-sheet-default-options');\n\n/**\n * Service to trigger Material Design bottom sheets.\n */\n@Injectable({providedIn: MatBottomSheetModule})\nexport class MatBottomSheet implements OnDestroy {\n  private _bottomSheetRefAtThisLevel: MatBottomSheetRef<any> | null = null;\n\n  /** Reference to the currently opened bottom sheet. */\n  get _openedBottomSheetRef(): MatBottomSheetRef<any> | null {\n    const parent = this._parentBottomSheet;\n    return parent ? parent._openedBottomSheetRef : this._bottomSheetRefAtThisLevel;\n  }\n\n  set _openedBottomSheetRef(value: MatBottomSheetRef<any> | null) {\n    if (this._parentBottomSheet) {\n      this._parentBottomSheet._openedBottomSheetRef = value;\n    } else {\n      this._bottomSheetRefAtThisLevel = value;\n    }\n  }\n\n  constructor(\n      private _overlay: Overlay,\n      private _injector: Injector,\n      @Optional() @SkipSelf() private _parentBottomSheet: MatBottomSheet,\n      @Optional() private _location?: Location,\n      @Optional() @Inject(MAT_BOTTOM_SHEET_DEFAULT_OPTIONS)\n          private _defaultOptions?: MatBottomSheetConfig) {}\n\n  open<T, D = any, R = any>(component: ComponentType<T>,\n                   config?: MatBottomSheetConfig<D>): MatBottomSheetRef<T, R>;\n  open<T, D = any, R = any>(template: TemplateRef<T>,\n                   config?: MatBottomSheetConfig<D>): MatBottomSheetRef<T, R>;\n\n  open<T, D = any, R = any>(componentOrTemplateRef: ComponentType<T> | TemplateRef<T>,\n                   config?: MatBottomSheetConfig<D>): MatBottomSheetRef<T, R> {\n\n    const _config =\n        _applyConfigDefaults(this._defaultOptions || new MatBottomSheetConfig(), config);\n    const overlayRef = this._createOverlay(_config);\n    const container = this._attachContainer(overlayRef, _config);\n    const ref = new MatBottomSheetRef<T, R>(container, overlayRef, this._location);\n\n    if (componentOrTemplateRef instanceof TemplateRef) {\n      container.attachTemplatePortal(new TemplatePortal<T>(componentOrTemplateRef, null!, {\n        $implicit: _config.data,\n        bottomSheetRef: ref\n      } as any));\n    } else {\n      const portal = new ComponentPortal(componentOrTemplateRef, undefined,\n            this._createInjector(_config, ref));\n      const contentRef = container.attachComponentPortal(portal);\n      ref.instance = contentRef.instance;\n    }\n\n    // When the bottom sheet is dismissed, clear the reference to it.\n    ref.afterDismissed().subscribe(() => {\n      // Clear the bottom sheet ref if it hasn't already been replaced by a newer one.\n      if (this._openedBottomSheetRef == ref) {\n        this._openedBottomSheetRef = null;\n      }\n    });\n\n    if (this._openedBottomSheetRef) {\n      // If a bottom sheet is already in view, dismiss it and enter the\n      // new bottom sheet after exit animation is complete.\n      this._openedBottomSheetRef.afterDismissed().subscribe(() => ref.containerInstance.enter());\n      this._openedBottomSheetRef.dismiss();\n    } else {\n      // If no bottom sheet is in view, enter the new bottom sheet.\n      ref.containerInstance.enter();\n    }\n\n    this._openedBottomSheetRef = ref;\n\n    return ref;\n  }\n\n  /**\n   * Dismisses the currently-visible bottom sheet.\n   */\n  dismiss(): void {\n    if (this._openedBottomSheetRef) {\n      this._openedBottomSheetRef.dismiss();\n    }\n  }\n\n  ngOnDestroy() {\n    if (this._bottomSheetRefAtThisLevel) {\n      this._bottomSheetRefAtThisLevel.dismiss();\n    }\n  }\n\n  /**\n   * Attaches the bottom sheet container component to the overlay.\n   */\n  private _attachContainer(overlayRef: OverlayRef,\n                           config: MatBottomSheetConfig): MatBottomSheetContainer {\n\n    const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n    const injector = new PortalInjector(userInjector || this._injector, new WeakMap([\n      [MatBottomSheetConfig, config]\n    ]));\n\n    const containerPortal =\n        new ComponentPortal(MatBottomSheetContainer, config.viewContainerRef, injector);\n    const containerRef: ComponentRef<MatBottomSheetContainer> = overlayRef.attach(containerPortal);\n    return containerRef.instance;\n  }\n\n  /**\n   * Creates a new overlay and places it in the correct location.\n   * @param config The user-specified bottom sheet config.\n   */\n  private _createOverlay(config: MatBottomSheetConfig): OverlayRef {\n    const overlayConfig = new OverlayConfig({\n      direction: config.direction,\n      hasBackdrop: config.hasBackdrop,\n      disposeOnNavigation: config.closeOnNavigation,\n      maxWidth: '100%',\n      scrollStrategy: this._overlay.scrollStrategies.block(),\n      positionStrategy: this._overlay.position()\n        .global()\n        .centerHorizontally()\n        .bottom('0')\n    });\n\n    if (config.backdropClass) {\n      overlayConfig.backdropClass = config.backdropClass;\n    }\n\n    return this._overlay.create(overlayConfig);\n  }\n\n  /**\n   * Creates an injector to be used inside of a bottom sheet component.\n   * @param config Config that was used to create the bottom sheet.\n   * @param bottomSheetRef Reference to the bottom sheet.\n   */\n  private _createInjector<T>(config: MatBottomSheetConfig,\n                             bottomSheetRef: MatBottomSheetRef<T>): PortalInjector {\n\n    const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n    const injectionTokens = new WeakMap<any, any>([\n      [MatBottomSheetRef, bottomSheetRef],\n      [MAT_BOTTOM_SHEET_DATA, config.data]\n    ]);\n\n    if (config.direction &&\n        (!userInjector || !userInjector.get<Directionality | null>(Directionality, null))) {\n      injectionTokens.set(Directionality, {\n        value: config.direction,\n        change: observableOf()\n      });\n    }\n\n    return new PortalInjector(userInjector || this._injector, injectionTokens);\n  }\n}\n\n/**\n * Applies default options to the bottom sheet config.\n * @param defaults Object containing the default values to which to fall back.\n * @param config The configuration to which the defaults will be applied.\n * @returns The new configuration object with defaults applied.\n */\nfunction _applyConfigDefaults(defaults: MatBottomSheetConfig,\n                              config?: MatBottomSheetConfig): MatBottomSheetConfig {\n  return {...defaults, ...config};\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {ENTER, SPACE} from '@angular/cdk/keycodes';\nimport {\n  AfterViewChecked,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  InjectionToken,\n  Input,\n  OnDestroy,\n  Optional,\n  Output,\n  QueryList,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {Subject} from 'rxjs';\nimport {MatOptgroup} from './optgroup';\n\n/**\n * Option IDs need to be unique across components, so this counter exists outside of\n * the component definition.\n */\nlet _uniqueIdCounter = 0;\n\n/** Event object emitted by MatOption when selected or deselected. */\nexport class MatOptionSelectionChange {\n  constructor(\n    /** Reference to the option that emitted the event. */\n    public source: MatOption,\n    /** Whether the change in the option's value was a result of a user action. */\n    public isUserInput = false) { }\n}\n\n/**\n * Describes a parent component that manages a list of options.\n * Contains properties that the options can inherit.\n * @docs-private\n */\nexport interface MatOptionParentComponent {\n  disableRipple?: boolean;\n  multiple?: boolean;\n}\n\n/**\n * Injection token used to provide the parent component to options.\n */\nexport const MAT_OPTION_PARENT_COMPONENT =\n    new InjectionToken<MatOptionParentComponent>('MAT_OPTION_PARENT_COMPONENT');\n\n/**\n * Single option inside of a `<mat-select>` element.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-option',\n  exportAs: 'matOption',\n  host: {\n    'role': 'option',\n    '[attr.tabindex]': '_getTabIndex()',\n    '[class.mat-selected]': 'selected',\n    '[class.mat-option-multiple]': 'multiple',\n    '[class.mat-active]': 'active',\n    '[id]': 'id',\n    '[attr.aria-selected]': 'selected.toString()',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[class.mat-option-disabled]': 'disabled',\n    '(click)': '_selectViaInteraction()',\n    '(keydown)': '_handleKeydown($event)',\n    'class': 'mat-option',\n  },\n  styleUrls: ['option.css'],\n  templateUrl: 'option.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatOption implements AfterViewChecked, OnDestroy {\n  private _selected = false;\n  private _active = false;\n  private _disabled = false;\n  private _mostRecentViewValue = '';\n\n  /** Whether the wrapping component is in multiple selection mode. */\n  get multiple() { return this._parent && this._parent.multiple; }\n\n  /** Whether or not the option is currently selected. */\n  get selected(): boolean { return this._selected; }\n\n  /** The form value of the option. */\n  @Input() value: any;\n\n  /** The unique ID of the option. */\n  @Input() id: string = `mat-option-${_uniqueIdCounter++}`;\n\n  /** Whether the option is disabled. */\n  @Input()\n  get disabled() { return (this.group && this.group.disabled) || this._disabled; }\n  set disabled(value: any) { this._disabled = coerceBooleanProperty(value); }\n\n  /** Whether ripples for the option are disabled. */\n  get disableRipple() { return this._parent && this._parent.disableRipple; }\n\n  /** Event emitted when the option is selected or deselected. */\n  // tslint:disable-next-line:no-output-on-prefix\n  @Output() readonly onSelectionChange = new EventEmitter<MatOptionSelectionChange>();\n\n  /** Emits when the state of the option changes and any parents have to be notified. */\n  readonly _stateChanges = new Subject<void>();\n\n  constructor(\n    private _element: ElementRef<HTMLElement>,\n    private _changeDetectorRef: ChangeDetectorRef,\n    @Optional() @Inject(MAT_OPTION_PARENT_COMPONENT) private _parent: MatOptionParentComponent,\n    @Optional() readonly group: MatOptgroup) {}\n\n  /**\n   * Whether or not the option is currently active and ready to be selected.\n   * An active option displays styles as if it is focused, but the\n   * focus is actually retained somewhere else. This comes in handy\n   * for components like autocomplete where focus must remain on the input.\n   */\n  get active(): boolean {\n    return this._active;\n  }\n\n  /**\n   * The displayed value of the option. It is necessary to show the selected option in the\n   * select's trigger.\n   */\n  get viewValue(): string {\n    // TODO(kara): Add input property alternative for node envs.\n    return (this._getHostElement().textContent || '').trim();\n  }\n\n  /** Selects the option. */\n  select(): void {\n    if (!this._selected) {\n      this._selected = true;\n      this._changeDetectorRef.markForCheck();\n      this._emitSelectionChangeEvent();\n    }\n  }\n\n  /** Deselects the option. */\n  deselect(): void {\n    if (this._selected) {\n      this._selected = false;\n      this._changeDetectorRef.markForCheck();\n      this._emitSelectionChangeEvent();\n    }\n  }\n\n  /** Sets focus onto this option. */\n  focus(): void {\n    const element = this._getHostElement();\n\n    if (typeof element.focus === 'function') {\n      element.focus();\n    }\n  }\n\n  /**\n   * This method sets display styles on the option to make it appear\n   * active. This is used by the ActiveDescendantKeyManager so key\n   * events will display the proper options as active on arrow key events.\n   */\n  setActiveStyles(): void {\n    if (!this._active) {\n      this._active = true;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  /**\n   * This method removes display styles on the option that made it appear\n   * active. This is used by the ActiveDescendantKeyManager so key\n   * events will display the proper options as active on arrow key events.\n   */\n  setInactiveStyles(): void {\n    if (this._active) {\n      this._active = false;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  /** Gets the label to be used when determining whether the option should be focused. */\n  getLabel(): string {\n    return this.viewValue;\n  }\n\n  /** Ensures the option is selected when activated from the keyboard. */\n  _handleKeydown(event: KeyboardEvent): void {\n    if (event.keyCode === ENTER || event.keyCode === SPACE) {\n      this._selectViaInteraction();\n\n      // Prevent the page from scrolling down and form submits.\n      event.preventDefault();\n    }\n  }\n\n  /**\n   * `Selects the option while indicating the selection came from the user. Used to\n   * determine if the select's view -> model callback should be invoked.`\n   */\n  _selectViaInteraction(): void {\n    if (!this.disabled) {\n      this._selected = this.multiple ? !this._selected : true;\n      this._changeDetectorRef.markForCheck();\n      this._emitSelectionChangeEvent(true);\n    }\n  }\n\n  /** Returns the correct tabindex for the option depending on disabled state. */\n  _getTabIndex(): string {\n    return this.disabled ? '-1' : '0';\n  }\n\n  /** Gets the host DOM element. */\n  _getHostElement(): HTMLElement {\n    return this._element.nativeElement;\n  }\n\n  ngAfterViewChecked() {\n    // Since parent components could be using the option's label to display the selected values\n    // (e.g. `mat-select`) and they don't have a way of knowing if the option's label has changed\n    // we have to check for changes in the DOM ourselves and dispatch an event. These checks are\n    // relatively cheap, however we still limit them only to selected options in order to avoid\n    // hitting the DOM too often.\n    if (this._selected) {\n      const viewValue = this.viewValue;\n\n      if (viewValue !== this._mostRecentViewValue) {\n        this._mostRecentViewValue = viewValue;\n        this._stateChanges.next();\n      }\n    }\n  }\n\n  ngOnDestroy() {\n    this._stateChanges.complete();\n  }\n\n  /** Emits the selection change event. */\n  private _emitSelectionChangeEvent(isUserInput = false): void {\n    this.onSelectionChange.emit(new MatOptionSelectionChange(this, isUserInput));\n  }\n}\n\n/**\n * Counts the amount of option group labels that precede the specified option.\n * @param optionIndex Index of the option at which to start counting.\n * @param options Flat list of all of the options.\n * @param optionGroups Flat list of all of the option groups.\n * @docs-private\n */\nexport function _countGroupLabelsBeforeOption(optionIndex: number, options: QueryList<MatOption>,\n  optionGroups: QueryList<MatOptgroup>): number {\n\n  if (optionGroups.length) {\n    let optionsArray = options.toArray();\n    let groups = optionGroups.toArray();\n    let groupCounter = 0;\n\n    for (let i = 0; i < optionIndex + 1; i++) {\n      if (optionsArray[i].group && optionsArray[i].group === groups[groupCounter]) {\n        groupCounter++;\n      }\n    }\n\n    return groupCounter;\n  }\n\n  return 0;\n}\n\n/**\n * Determines the position to which to scroll a panel in order for an option to be into view.\n * @param optionIndex Index of the option to be scrolled into the view.\n * @param optionHeight Height of the options.\n * @param currentScrollPosition Current scroll position of the panel.\n * @param panelHeight Height of the panel.\n * @docs-private\n */\nexport function _getOptionScrollPosition(optionIndex: number, optionHeight: number,\n    currentScrollPosition: number, panelHeight: number): number {\n  const optionOffset = optionIndex * optionHeight;\n\n  if (optionOffset < currentScrollPosition) {\n    return optionOffset;\n  }\n\n  if (optionOffset + optionHeight > currentScrollPosition + panelHeight) {\n    return Math.max(0, optionOffset - panelHeight + optionHeight);\n  }\n\n  return currentScrollPosition;\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {MatRippleModule} from '../ripple/index';\nimport {MatPseudoCheckboxModule} from '../selection/index';\nimport {MatOption} from './option';\nimport {MatOptgroup} from './optgroup';\n\n\n@NgModule({\n  imports: [MatRippleModule, CommonModule, MatPseudoCheckboxModule],\n  exports: [MatOption, MatOptgroup],\n  declarations: [MatOption, MatOptgroup]\n})\nexport class MatOptionModule {}\n\n\nexport * from './option';\nexport * from './optgroup';\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {InjectionToken} from '@angular/core';\n\n/** InjectionToken that can be used to specify the global label options. */\nexport const MAT_LABEL_GLOBAL_OPTIONS =\n  new InjectionToken<LabelOptions>('mat-label-global-options');\n\n/** Type for the available floatLabel values. */\nexport type FloatLabelType = 'always' | 'never' | 'auto';\n\n/** Configurable options for floating labels. */\nexport interface LabelOptions {\n  /**\n   * Whether the label should float `always`, `never`, or `auto` (only when necessary).\n   * Default behavior is assumed to be `auto`.\n   */\n  float?: FloatLabelType;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, Input} from '@angular/core';\n\n\nlet nextUniqueId = 0;\n\n\n/** Single error message to be shown underneath the form field. */\n@Directive({\n  selector: 'mat-error',\n  host: {\n    'class': 'mat-error',\n    'role': 'alert',\n    '[attr.id]': 'id',\n  }\n})\nexport class MatError {\n  @Input() id: string = `mat-error-${nextUniqueId++}`;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/**\n * Animations used by the MatFormField.\n * @docs-private\n */\nexport const matFormFieldAnimations: {\n  readonly transitionMessages: AnimationTriggerMetadata\n} = {\n  /** Animation that transitions the form field's error and hint messages. */\n  transitionMessages: trigger('transitionMessages', [\n    // TODO(mmalerba): Use angular animations for label animation as well.\n    state('enter', style({ opacity: 1, transform: 'translateY(0%)' })),\n    transition('void => enter', [\n      style({ opacity: 0, transform: 'translateY(-100%)' }),\n      animate('300ms cubic-bezier(0.55, 0, 0.55, 0.2)'),\n    ]),\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Observable} from 'rxjs';\nimport {NgControl} from '@angular/forms';\n\n\n/** An interface which allows a control to work inside of a `MatFormField`. */\nexport abstract class MatFormFieldControl<T> {\n  /** The value of the control. */\n  value: T | null;\n\n  /**\n   * Stream that emits whenever the state of the control changes such that the parent `MatFormField`\n   * needs to run change detection.\n   */\n  readonly stateChanges: Observable<void>;\n\n  /** The element ID for this control. */\n  readonly id: string;\n\n  /** The placeholder for this control. */\n  readonly placeholder: string;\n\n  /** Gets the NgControl for this control. */\n  readonly ngControl: NgControl | null;\n\n  /** Whether the control is focused. */\n  readonly focused: boolean;\n\n  /** Whether the control is empty. */\n  readonly empty: boolean;\n\n  /** Whether the `MatFormField` label should try to float. */\n  readonly shouldLabelFloat: boolean;\n\n  /** Whether the control is required. */\n  readonly required: boolean;\n\n  /** Whether the control is disabled. */\n  readonly disabled: boolean;\n\n  /** Whether the control is in an error state. */\n  readonly errorState: boolean;\n\n  /**\n   * An optional name for the control type that can be used to distinguish `mat-form-field` elements\n   * based on their control type. The form field will add a class,\n   * `mat-form-field-type-{{controlType}}` to its root element.\n   */\n  readonly controlType?: string;\n\n  /**\n   * Whether the input is currently in an autofilled state. If property is not present on the\n   * control it is assumed to be false.\n   */\n  readonly autofilled?: boolean;\n\n  /** Sets the list of element IDs that currently describe this control. */\n  abstract setDescribedByIds(ids: string[]): void;\n\n  /** Handles a click on the control's container. */\n  abstract onContainerClick(event: MouseEvent): void;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, Input} from '@angular/core';\n\n\nlet nextUniqueId = 0;\n\n\n/** Hint text to be shown underneath the form field control. */\n@Directive({\n  selector: 'mat-hint',\n  host: {\n    'class': 'mat-hint',\n    '[class.mat-right]': 'align == \"end\"',\n    '[attr.id]': 'id',\n    // Remove align attribute to prevent it from interfering with layout.\n    '[attr.align]': 'null',\n  }\n})\nexport class MatHint {\n  /** Whether to align the hint label at the start or end of the line. */\n  @Input() align: 'start' | 'end' = 'start';\n\n  /** Unique ID for the hint. Used for the aria-describedby on the form field control. */\n  @Input() id: string = `mat-hint-${nextUniqueId++}`;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive} from '@angular/core';\n\n\n/** The floating label for a `mat-form-field`. */\n@Directive({\n  selector: 'mat-label'\n})\nexport class MatLabel {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive} from '@angular/core';\n\n\n/**\n * The placeholder text for an `MatFormField`.\n * @deprecated Use `<mat-label>` to specify the label and the `placeholder` attribute to specify the\n *     placeholder.\n * @breaking-change 8.0.0\n */\n@Directive({\n  selector: 'mat-placeholder'\n})\nexport class MatPlaceholder {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive} from '@angular/core';\n\n\n/** Prefix to be placed the the front of the form field. */\n@Directive({\n  selector: '[matPrefix]',\n})\nexport class MatPrefix {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive} from '@angular/core';\n\n\n/** Suffix to be placed at the end of the form field. */\n@Directive({\n  selector: '[matSuffix]',\n})\nexport class MatSuffix {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  AfterContentChecked,\n  AfterContentInit,\n  AfterViewInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  ContentChildren,\n  ElementRef,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  Optional,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {\n  CanColor, CanColorCtor,\n  FloatLabelType,\n  LabelOptions,\n  MAT_LABEL_GLOBAL_OPTIONS,\n  mixinColor,\n} from '@angular/material/core';\nimport {EMPTY, fromEvent, merge} from 'rxjs';\nimport {startWith, take} from 'rxjs/operators';\nimport {MatError} from './error';\nimport {matFormFieldAnimations} from './form-field-animations';\nimport {MatFormFieldControl} from './form-field-control';\nimport {\n  getMatFormFieldDuplicatedHintError,\n  getMatFormFieldMissingControlError,\n  getMatFormFieldPlaceholderConflictError,\n} from './form-field-errors';\nimport {MatHint} from './hint';\nimport {MatLabel} from './label';\nimport {MatPlaceholder} from './placeholder';\nimport {MatPrefix} from './prefix';\nimport {MatSuffix} from './suffix';\nimport {Platform} from '@angular/cdk/platform';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\n\n\nlet nextUniqueId = 0;\nconst floatingLabelScale = 0.75;\nconst outlineGapPadding = 5;\n\n\n/**\n * Boilerplate for applying mixins to MatFormField.\n * @docs-private\n */\nexport class MatFormFieldBase {\n  constructor(public _elementRef: ElementRef) { }\n}\n\n/**\n * Base class to which we're applying the form field mixins.\n * @docs-private\n */\nexport const _MatFormFieldMixinBase: CanColorCtor & typeof MatFormFieldBase =\n    mixinColor(MatFormFieldBase, 'primary');\n\n/** Possible appearance styles for the form field. */\nexport type MatFormFieldAppearance = 'legacy' | 'standard' | 'fill' | 'outline';\n\n/**\n * Represents the default options form the form field that can be configured\n * using the `MAT_FORM_FIELD_DEFAULT_OPTIONS` injection token.\n */\nexport interface MatFormFieldDefaultOptions {\n  appearance?: MatFormFieldAppearance;\n}\n\n/**\n * Injection token that can be used to configure the\n * default options for all form field within an app.\n */\nexport const MAT_FORM_FIELD_DEFAULT_OPTIONS =\n    new InjectionToken<MatFormFieldDefaultOptions>('MAT_FORM_FIELD_DEFAULT_OPTIONS');\n\n\n/** Container for form controls that applies Material Design styling and behavior. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-form-field',\n  exportAs: 'matFormField',\n  templateUrl: 'form-field.html',\n  // MatInput is a directive and can't have styles, so we need to include its styles here.\n  // The MatInput styles are fairly minimal so it shouldn't be a big deal for people who\n  // aren't using MatInput.\n  styleUrls: [\n    'form-field.css',\n    'form-field-fill.css',\n    'form-field-legacy.css',\n    'form-field-outline.css',\n    'form-field-standard.css',\n    '../input/input.css',\n  ],\n  animations: [matFormFieldAnimations.transitionMessages],\n  host: {\n    'class': 'mat-form-field',\n    '[class.mat-form-field-appearance-standard]': 'appearance == \"standard\"',\n    '[class.mat-form-field-appearance-fill]': 'appearance == \"fill\"',\n    '[class.mat-form-field-appearance-outline]': 'appearance == \"outline\"',\n    '[class.mat-form-field-appearance-legacy]': 'appearance == \"legacy\"',\n    '[class.mat-form-field-invalid]': '_control.errorState',\n    '[class.mat-form-field-can-float]': '_canLabelFloat',\n    '[class.mat-form-field-should-float]': '_shouldLabelFloat()',\n    '[class.mat-form-field-hide-placeholder]': '_hideControlPlaceholder()',\n    '[class.mat-form-field-disabled]': '_control.disabled',\n    '[class.mat-form-field-autofilled]': '_control.autofilled',\n    '[class.mat-focused]': '_control.focused',\n    '[class.mat-accent]': 'color == \"accent\"',\n    '[class.mat-warn]': 'color == \"warn\"',\n    '[class.ng-untouched]': '_shouldForward(\"untouched\")',\n    '[class.ng-touched]': '_shouldForward(\"touched\")',\n    '[class.ng-pristine]': '_shouldForward(\"pristine\")',\n    '[class.ng-dirty]': '_shouldForward(\"dirty\")',\n    '[class.ng-valid]': '_shouldForward(\"valid\")',\n    '[class.ng-invalid]': '_shouldForward(\"invalid\")',\n    '[class.ng-pending]': '_shouldForward(\"pending\")',\n    '[class._mat-animation-noopable]': '!_animationsEnabled',\n  },\n  inputs: ['color'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\n\nexport class MatFormField extends _MatFormFieldMixinBase\n    implements AfterContentInit, AfterContentChecked, AfterViewInit, CanColor {\n  private _labelOptions: LabelOptions;\n  private _outlineGapCalculationNeeded = false;\n\n  /** The form-field appearance style. */\n  @Input()\n  get appearance(): MatFormFieldAppearance { return this._appearance; }\n  set appearance(value: MatFormFieldAppearance) {\n    const oldValue = this._appearance;\n\n    this._appearance = value || (this._defaults && this._defaults.appearance) || 'legacy';\n\n    if (this._appearance === 'outline' && oldValue !== value) {\n      // @breaking-change 7.0.0 Remove this check and else block once _ngZone is required.\n      if (this._ngZone) {\n        this._ngZone!.onStable.pipe(take(1)).subscribe(() => {\n          this._ngZone!.runOutsideAngular(() => this.updateOutlineGap());\n        });\n      } else {\n        Promise.resolve().then(() => this.updateOutlineGap());\n      }\n    }\n  }\n  _appearance: MatFormFieldAppearance;\n\n  /** Whether the required marker should be hidden. */\n  @Input()\n  get hideRequiredMarker(): boolean { return this._hideRequiredMarker; }\n  set hideRequiredMarker(value: boolean) {\n    this._hideRequiredMarker = coerceBooleanProperty(value);\n  }\n  private _hideRequiredMarker: boolean;\n\n  /** Override for the logic that disables the label animation in certain cases. */\n  private _showAlwaysAnimate = false;\n\n  /** Whether the floating label should always float or not. */\n  get _shouldAlwaysFloat(): boolean {\n    return this.floatLabel === 'always' && !this._showAlwaysAnimate;\n  }\n\n  /** Whether the label can float or not. */\n  get _canLabelFloat(): boolean { return this.floatLabel !== 'never'; }\n\n  /** State of the mat-hint and mat-error animations. */\n  _subscriptAnimationState: string = '';\n\n  /** Text for the form field hint. */\n  @Input()\n  get hintLabel(): string { return this._hintLabel; }\n  set hintLabel(value: string) {\n    this._hintLabel = value;\n    this._processHints();\n  }\n  private _hintLabel = '';\n\n  // Unique id for the hint label.\n  _hintLabelId: string = `mat-hint-${nextUniqueId++}`;\n\n  // Unique id for the internal form field label.\n  _labelId = `mat-form-field-label-${nextUniqueId++}`;\n\n  /**\n   * Whether the label should always float, never float or float as the user types.\n   *\n   * Note: only the legacy appearance supports the `never` option. `never` was originally added as a\n   * way to make the floating label emulate the behavior of a standard input placeholder. However\n   * the form field now supports both floating labels and placeholders. Therefore in the non-legacy\n   * appearances the `never` option has been disabled in favor of just using the placeholder.\n   */\n  @Input()\n  get floatLabel(): FloatLabelType {\n    return this.appearance !== 'legacy' && this._floatLabel === 'never' ? 'auto' : this._floatLabel;\n  }\n  set floatLabel(value: FloatLabelType) {\n    if (value !== this._floatLabel) {\n      this._floatLabel = value || this._labelOptions.float || 'auto';\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n  private _floatLabel: FloatLabelType;\n\n  /** Whether the Angular animations are enabled. */\n  _animationsEnabled: boolean;\n\n  /**\n   * @deprecated\n   * @breaking-change 7.0.0\n   */\n  @ViewChild('underline') underlineRef: ElementRef;\n\n  @ViewChild('connectionContainer') _connectionContainerRef: ElementRef;\n  @ViewChild('inputContainer') _inputContainerRef: ElementRef;\n  @ViewChild('label') private _label: ElementRef;\n  @ContentChild(MatFormFieldControl) _control: MatFormFieldControl<any>;\n  @ContentChild(MatPlaceholder) _placeholderChild: MatPlaceholder;\n  @ContentChild(MatLabel) _labelChild: MatLabel;\n  @ContentChildren(MatError) _errorChildren: QueryList<MatError>;\n  @ContentChildren(MatHint) _hintChildren: QueryList<MatHint>;\n  @ContentChildren(MatPrefix) _prefixChildren: QueryList<MatPrefix>;\n  @ContentChildren(MatSuffix) _suffixChildren: QueryList<MatSuffix>;\n\n  constructor(\n      public _elementRef: ElementRef,\n      private _changeDetectorRef: ChangeDetectorRef,\n      @Optional() @Inject(MAT_LABEL_GLOBAL_OPTIONS) labelOptions: LabelOptions,\n      @Optional() private _dir: Directionality,\n      @Optional() @Inject(MAT_FORM_FIELD_DEFAULT_OPTIONS)\n          private _defaults: MatFormFieldDefaultOptions,\n      // @breaking-change 7.0.0 _platform, _ngZone and _animationMode to be made required.\n      private _platform?: Platform,\n      private _ngZone?: NgZone,\n      @Optional() @Inject(ANIMATION_MODULE_TYPE) _animationMode?: string) {\n    super(_elementRef);\n\n    this._labelOptions = labelOptions ? labelOptions : {};\n    this.floatLabel = this._labelOptions.float || 'auto';\n    this._animationsEnabled = _animationMode !== 'NoopAnimations';\n\n    // Set the default through here so we invoke the setter on the first run.\n    this.appearance = (_defaults && _defaults.appearance) ? _defaults.appearance : 'legacy';\n  }\n\n  /**\n   * Gets an ElementRef for the element that a overlay attached to the form-field should be\n   * positioned relative to.\n   */\n  getConnectedOverlayOrigin(): ElementRef {\n    return this._connectionContainerRef || this._elementRef;\n  }\n\n  ngAfterContentInit() {\n    this._validateControlChild();\n    if (this._control.controlType) {\n      this._elementRef.nativeElement.classList\n          .add(`mat-form-field-type-${this._control.controlType}`);\n    }\n\n    // Subscribe to changes in the child control state in order to update the form field UI.\n    this._control.stateChanges.pipe(startWith<void>(null!)).subscribe(() => {\n      this._validatePlaceholders();\n      this._syncDescribedByIds();\n      this._changeDetectorRef.markForCheck();\n    });\n\n    // Run change detection if the value, prefix, or suffix changes.\n    const valueChanges = this._control.ngControl && this._control.ngControl.valueChanges || EMPTY;\n    merge(valueChanges, this._prefixChildren.changes, this._suffixChildren.changes)\n        .subscribe(() => this._changeDetectorRef.markForCheck());\n\n    // Re-validate when the number of hints changes.\n    this._hintChildren.changes.pipe(startWith(null)).subscribe(() => {\n      this._processHints();\n      this._changeDetectorRef.markForCheck();\n    });\n\n    // Update the aria-described by when the number of errors changes.\n    this._errorChildren.changes.pipe(startWith(null)).subscribe(() => {\n      this._syncDescribedByIds();\n      this._changeDetectorRef.markForCheck();\n    });\n  }\n\n  ngAfterContentChecked() {\n    this._validateControlChild();\n    if (this._outlineGapCalculationNeeded) {\n      this.updateOutlineGap();\n    }\n  }\n\n  ngAfterViewInit() {\n    // Avoid animations on load.\n    this._subscriptAnimationState = 'enter';\n    this._changeDetectorRef.detectChanges();\n  }\n\n  /** Determines whether a class from the NgControl should be forwarded to the host element. */\n  _shouldForward(prop: string): boolean {\n    const ngControl = this._control ? this._control.ngControl : null;\n    return ngControl && ngControl[prop];\n  }\n\n  _hasPlaceholder() {\n    return !!(this._control && this._control.placeholder || this._placeholderChild);\n  }\n\n  _hasLabel() {\n    return !!this._labelChild;\n  }\n\n  _shouldLabelFloat() {\n    return this._canLabelFloat && (this._control.shouldLabelFloat || this._shouldAlwaysFloat);\n  }\n\n  _hideControlPlaceholder() {\n    // In the legacy appearance the placeholder is promoted to a label if no label is given.\n    return this.appearance === 'legacy' && !this._hasLabel() ||\n        this._hasLabel() && !this._shouldLabelFloat();\n  }\n\n  _hasFloatingLabel() {\n    // In the legacy appearance the placeholder is promoted to a label if no label is given.\n    return this._hasLabel() || this.appearance === 'legacy' && this._hasPlaceholder();\n  }\n\n  /** Determines whether to display hints or errors. */\n  _getDisplayedMessages(): 'error' | 'hint' {\n    return (this._errorChildren && this._errorChildren.length > 0 &&\n        this._control.errorState) ? 'error' : 'hint';\n  }\n\n  /** Animates the placeholder up and locks it in position. */\n  _animateAndLockLabel(): void {\n    if (this._hasFloatingLabel() && this._canLabelFloat) {\n      // If animations are disabled, we shouldn't go in here,\n      // because the `transitionend` will never fire.\n      if (this._animationsEnabled) {\n        this._showAlwaysAnimate = true;\n\n        fromEvent(this._label.nativeElement, 'transitionend').pipe(take(1)).subscribe(() => {\n          this._showAlwaysAnimate = false;\n        });\n      }\n\n      this.floatLabel = 'always';\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  /**\n   * Ensure that there is only one placeholder (either `placeholder` attribute on the child control\n   * or child element with the `mat-placeholder` directive).\n   */\n  private _validatePlaceholders() {\n    if (this._control.placeholder && this._placeholderChild) {\n      throw getMatFormFieldPlaceholderConflictError();\n    }\n  }\n\n  /** Does any extra processing that is required when handling the hints. */\n  private _processHints() {\n    this._validateHints();\n    this._syncDescribedByIds();\n  }\n\n  /**\n   * Ensure that there is a maximum of one of each `<mat-hint>` alignment specified, with the\n   * attribute being considered as `align=\"start\"`.\n   */\n  private _validateHints() {\n    if (this._hintChildren) {\n      let startHint: MatHint;\n      let endHint: MatHint;\n      this._hintChildren.forEach((hint: MatHint) => {\n        if (hint.align === 'start') {\n          if (startHint || this.hintLabel) {\n            throw getMatFormFieldDuplicatedHintError('start');\n          }\n          startHint = hint;\n        } else if (hint.align === 'end') {\n          if (endHint) {\n            throw getMatFormFieldDuplicatedHintError('end');\n          }\n          endHint = hint;\n        }\n      });\n    }\n  }\n\n  /**\n   * Sets the list of element IDs that describe the child control. This allows the control to update\n   * its `aria-describedby` attribute accordingly.\n   */\n  private _syncDescribedByIds() {\n    if (this._control) {\n      let ids: string[] = [];\n\n      if (this._getDisplayedMessages() === 'hint') {\n        const startHint = this._hintChildren ?\n            this._hintChildren.find(hint => hint.align === 'start') : null;\n        const endHint = this._hintChildren ?\n            this._hintChildren.find(hint => hint.align === 'end') : null;\n\n        if (startHint) {\n          ids.push(startHint.id);\n        } else if (this._hintLabel) {\n          ids.push(this._hintLabelId);\n        }\n\n        if (endHint) {\n          ids.push(endHint.id);\n        }\n      } else if (this._errorChildren) {\n        ids = this._errorChildren.map(error => error.id);\n      }\n\n      this._control.setDescribedByIds(ids);\n    }\n  }\n\n  /** Throws an error if the form field's control is missing. */\n  protected _validateControlChild() {\n    if (!this._control) {\n      throw getMatFormFieldMissingControlError();\n    }\n  }\n\n  /**\n   * Updates the width and position of the gap in the outline. Only relevant for the outline\n   * appearance.\n   */\n  updateOutlineGap() {\n    const labelEl = this._label ? this._label.nativeElement : null;\n\n    if (this.appearance !== 'outline' || !labelEl || !labelEl.children.length ||\n        !labelEl.textContent.trim()) {\n      return;\n    }\n\n    if (this._platform && !this._platform.isBrowser) {\n      // getBoundingClientRect isn't available on the server.\n      return;\n    }\n    // If the element is not present in the DOM, the outline gap will need to be calculated\n    // the next time it is checked and in the DOM.\n    if (!document.documentElement!.contains(this._elementRef.nativeElement)) {\n      this._outlineGapCalculationNeeded = true;\n      return;\n    }\n\n    let startWidth = 0;\n    let gapWidth = 0;\n    const startEls = this._connectionContainerRef.nativeElement.querySelectorAll(\n      '.mat-form-field-outline-start');\n    const gapEls = this._connectionContainerRef.nativeElement.querySelectorAll(\n        '.mat-form-field-outline-gap');\n    if (this._label && this._label.nativeElement.children.length) {\n      const containerStart = this._getStartEnd(\n          this._connectionContainerRef.nativeElement.getBoundingClientRect());\n      const labelStart = this._getStartEnd(labelEl.children[0].getBoundingClientRect());\n      let labelWidth = 0;\n\n      for (const child of labelEl.children) {\n        labelWidth += child.offsetWidth;\n      }\n      startWidth = labelStart - containerStart - outlineGapPadding;\n      gapWidth = labelWidth > 0 ? labelWidth * floatingLabelScale + outlineGapPadding * 2 : 0;\n    }\n\n    for (let i = 0; i < startEls.length; i++) {\n      startEls.item(i).style.width = `${startWidth}px`;\n    }\n    for (let i = 0; i < gapEls.length; i++) {\n      gapEls.item(i).style.width = `${gapWidth}px`;\n    }\n\n    this._outlineGapCalculationNeeded = false;\n  }\n\n  /** Gets the start end of the rect considering the current directionality. */\n  private _getStartEnd(rect: ClientRect): number {\n    return this._dir && this._dir.value === 'rtl' ? rect.right : rect.left;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {ObserversModule} from '@angular/cdk/observers';\nimport {MatError} from './error';\nimport {MatFormField} from './form-field';\nimport {MatHint} from './hint';\nimport {MatLabel} from './label';\nimport {MatPlaceholder} from './placeholder';\nimport {MatPrefix} from './prefix';\nimport {MatSuffix} from './suffix';\n\n\n@NgModule({\n  declarations: [\n    MatError,\n    MatFormField,\n    MatHint,\n    MatLabel,\n    MatPlaceholder,\n    MatPrefix,\n    MatSuffix,\n  ],\n  imports: [\n    CommonModule,\n    ObserversModule,\n  ],\n  exports: [\n    MatError,\n    MatFormField,\n    MatHint,\n    MatLabel,\n    MatPlaceholder,\n    MatPrefix,\n    MatSuffix,\n  ],\n})\nexport class MatFormFieldModule {}\n","/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)\r\n            t[p[i]] = s[p[i]];\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule, InjectionToken, Optional, Inject, isDevMode} from '@angular/core';\nimport {HammerLoader, HAMMER_LOADER} from '@angular/platform-browser';\nimport {BidiModule} from '@angular/cdk/bidi';\n\n\n/** Injection token that configures whether the Material sanity checks are enabled. */\nexport const MATERIAL_SANITY_CHECKS = new InjectionToken<boolean>('mat-sanity-checks', {\n  providedIn: 'root',\n  factory: MATERIAL_SANITY_CHECKS_FACTORY,\n});\n\n/** @docs-private */\nexport function MATERIAL_SANITY_CHECKS_FACTORY(): boolean {\n  return true;\n}\n\n/**\n * Module that captures anything that should be loaded and/or run for *all* Angular Material\n * components. This includes Bidi, etc.\n *\n * This module should be imported to each top-level component module (e.g., MatTabsModule).\n */\n@NgModule({\n  imports: [BidiModule],\n  exports: [BidiModule],\n})\nexport class MatCommonModule {\n  /** Whether we've done the global sanity checks (e.g. a theme is loaded, there is a doctype). */\n  private _hasDoneGlobalChecks = false;\n\n  /** Whether we've already checked for HammerJs availability. */\n  private _hasCheckedHammer = false;\n\n  /** Reference to the global `document` object. */\n  private _document = typeof document === 'object' && document ? document : null;\n\n  /** Reference to the global 'window' object. */\n  private _window = typeof window === 'object' && window ? window : null;\n\n  constructor(\n    @Optional() @Inject(MATERIAL_SANITY_CHECKS) private _sanityChecksEnabled: boolean,\n    @Optional() @Inject(HAMMER_LOADER) private _hammerLoader?: HammerLoader) {\n\n    if (this._areChecksEnabled() && !this._hasDoneGlobalChecks) {\n      this._checkDoctypeIsDefined();\n      this._checkThemeIsPresent();\n      this._hasDoneGlobalChecks = true;\n    }\n  }\n\n  /** Whether any sanity checks are enabled */\n  private _areChecksEnabled(): boolean {\n    return this._sanityChecksEnabled && isDevMode() && !this._isTestEnv();\n  }\n\n  /** Whether the code is running in tests. */\n  private _isTestEnv() {\n    return this._window && (this._window['__karma__'] || this._window['jasmine']);\n  }\n\n  private _checkDoctypeIsDefined(): void {\n    if (this._document && !this._document.doctype) {\n      console.warn(\n        'Current document does not have a doctype. This may cause ' +\n        'some Angular Material components not to behave as expected.'\n      );\n    }\n  }\n\n  private _checkThemeIsPresent(): void {\n    // We need to assert that the `body` is defined, because these checks run very early\n    // and the `body` won't be defined if the consumer put their scripts in the `head`.\n    if (!this._document || !this._document.body || typeof getComputedStyle !== 'function') {\n      return;\n    }\n\n    const testElement = this._document.createElement('div');\n\n    testElement.classList.add('mat-theme-loaded-marker');\n    this._document.body.appendChild(testElement);\n\n    const computedStyle = getComputedStyle(testElement);\n\n    // In some situations the computed style of the test element can be null. For example in\n    // Firefox, the computed style is null if an application is running inside of a hidden iframe.\n    // See: https://bugzilla.mozilla.org/show_bug.cgi?id=548397\n    if (computedStyle && computedStyle.display !== 'none') {\n      console.warn(\n        'Could not find Angular Material core theme. Most Material ' +\n        'components may not work as expected. For more info refer ' +\n        'to the theming guide: https://material.angular.io/guide/theming'\n      );\n    }\n\n    this._document.body.removeChild(testElement);\n  }\n\n  /** Checks whether HammerJS is available. */\n  _checkHammerIsAvailable(): void {\n    if (this._hasCheckedHammer || !this._window) {\n      return;\n    }\n\n    if (this._areChecksEnabled() && !this._window['Hammer'] && !this._hammerLoader) {\n      console.warn(\n        'Could not find HammerJS. Certain Angular Material components may not work correctly.');\n    }\n    this._hasCheckedHammer = true;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {Constructor} from './constructor';\n\n/** @docs-private */\nexport interface CanDisable {\n  /** Whether the component is disabled. */\n  disabled: boolean;\n}\n\n/** @docs-private */\nexport type CanDisableCtor = Constructor<CanDisable>;\n\n/** Mixin to augment a directive with a `disabled` property. */\nexport function mixinDisabled<T extends Constructor<{}>>(base: T): CanDisableCtor & T {\n  return class extends base {\n    private _disabled: boolean = false;\n\n    get disabled() { return this._disabled; }\n    set disabled(value: any) { this._disabled = coerceBooleanProperty(value); }\n\n    constructor(...args: any[]) { super(...args); }\n  };\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Constructor} from './constructor';\nimport {ElementRef} from '@angular/core';\n\n/** @docs-private */\nexport interface CanColor {\n  /** Theme color palette for the component. */\n  color: ThemePalette;\n}\n\n/** @docs-private */\nexport type CanColorCtor = Constructor<CanColor>;\n\n/** @docs-private */\nexport interface HasElementRef {\n  _elementRef: ElementRef;\n}\n\n/** Possible color palette values. */\nexport type ThemePalette = 'primary' | 'accent' | 'warn' | undefined;\n\n/** Mixin to augment a directive with a `color` property. */\nexport function mixinColor<T extends Constructor<HasElementRef>>(\n    base: T, defaultColor?: ThemePalette): CanColorCtor & T {\n  return class extends base {\n    private _color: ThemePalette;\n\n    get color(): ThemePalette { return this._color; }\n    set color(value: ThemePalette) {\n      const colorPalette = value || defaultColor;\n\n      if (colorPalette !== this._color) {\n        if (this._color) {\n          this._elementRef.nativeElement.classList.remove(`mat-${this._color}`);\n        }\n        if (colorPalette) {\n          this._elementRef.nativeElement.classList.add(`mat-${colorPalette}`);\n        }\n\n        this._color = colorPalette;\n      }\n    }\n\n    constructor(...args: any[]) {\n      super(...args);\n\n      // Set the default color that can be specified from the mixin.\n      this.color = defaultColor;\n    }\n  };\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {Constructor} from './constructor';\n\n/** @docs-private */\nexport interface CanDisableRipple {\n  /** Whether ripples are disabled. */\n  disableRipple: boolean;\n}\n\n/** @docs-private */\nexport type CanDisableRippleCtor = Constructor<CanDisableRipple>;\n\n/** Mixin to augment a directive with a `disableRipple` property. */\nexport function mixinDisableRipple<T extends Constructor<{}>>(base: T): CanDisableRippleCtor & T {\n  return class extends base {\n    private _disableRipple: boolean = false;\n\n    /** Whether the ripple effect is disabled or not. */\n    get disableRipple() { return this._disableRipple; }\n    set disableRipple(value: any) { this._disableRipple = coerceBooleanProperty(value); }\n\n    constructor(...args: any[]) { super(...args); }\n  };\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Constructor} from './constructor';\nimport {CanDisable} from './disabled';\n\n\n/** @docs-private */\nexport interface HasTabIndex {\n  /** Tabindex of the component. */\n  tabIndex: number;\n}\n\n/** @docs-private */\nexport type HasTabIndexCtor = Constructor<HasTabIndex>;\n\n/** Mixin to augment a directive with a `tabIndex` property. */\nexport function mixinTabIndex<T extends Constructor<CanDisable>>(base: T, defaultTabIndex = 0)\n    : HasTabIndexCtor & T {\n  return class extends base {\n    private _tabIndex: number = defaultTabIndex;\n\n    get tabIndex(): number { return this.disabled ? -1 : this._tabIndex; }\n    set tabIndex(value: number) {\n      // If the specified tabIndex value is null or undefined, fall back to the default value.\n      this._tabIndex = value != null ? value : defaultTabIndex;\n    }\n\n    constructor(...args: any[]) {\n      super(...args);\n    }\n  };\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FormControl, FormGroupDirective, NgControl, NgForm} from '@angular/forms';\nimport {Subject} from 'rxjs';\nimport {ErrorStateMatcher} from '../error/error-options';\nimport {Constructor} from './constructor';\n\n\n/** @docs-private */\nexport interface CanUpdateErrorState {\n  updateErrorState();\n  readonly stateChanges: Subject<void>;\n  errorState: boolean;\n  errorStateMatcher: ErrorStateMatcher;\n}\n\n/** @docs-private */\nexport type CanUpdateErrorStateCtor = Constructor<CanUpdateErrorState>;\n\n/** @docs-private */\nexport interface HasErrorState {\n  _parentFormGroup: FormGroupDirective;\n  _parentForm: NgForm;\n  _defaultErrorStateMatcher: ErrorStateMatcher;\n  ngControl: NgControl;\n}\n\n/**\n * Mixin to augment a directive with updateErrorState method.\n * For component with `errorState` and need to update `errorState`.\n */\nexport function mixinErrorState<T extends Constructor<HasErrorState>>(base: T)\n: CanUpdateErrorStateCtor & T {\n  return class extends base {\n    /** Whether the component is in an error state. */\n    errorState: boolean = false;\n\n    /**\n     * Stream that emits whenever the state of the input changes such that the wrapping\n     * `MatFormField` needs to run change detection.\n     */\n    readonly stateChanges = new Subject<void>();\n\n    errorStateMatcher: ErrorStateMatcher;\n\n    updateErrorState() {\n      const oldState = this.errorState;\n      const parent = this._parentFormGroup || this._parentForm;\n      const matcher = this.errorStateMatcher || this._defaultErrorStateMatcher;\n      const control = this.ngControl ? this.ngControl.control as FormControl : null;\n      const newState = matcher.isErrorState(control, parent);\n\n      if (newState !== oldState) {\n        this.errorState = newState;\n        this.stateChanges.next();\n      }\n    }\n\n    constructor(...args: any[]) {\n      super(...args);\n    }\n  };\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Observable, Subscriber} from 'rxjs';\nimport {Constructor} from './constructor';\n\n\n/**\n * Mixin that adds an initialized property to a directive which, when subscribed to, will emit a\n * value once markInitialized has been called, which should be done during the ngOnInit function.\n * If the subscription is made after it has already been marked as initialized, then it will trigger\n * an emit immediately.\n * @docs-private\n */\nexport interface HasInitialized {\n  /** Stream that emits once during the directive/component's ngOnInit. */\n  initialized: Observable<void>;\n\n  /**\n   * Sets the state as initialized and must be called during ngOnInit to notify subscribers that\n   * the directive has been initialized.\n   * @docs-private\n   */\n  _markInitialized: () => void;\n}\n\n/** @docs-private */\nexport type HasInitializedCtor = Constructor<HasInitialized>;\n\n/** Mixin to augment a directive with an initialized property that will emits when ngOnInit ends. */\nexport function mixinInitialized<T extends Constructor<{}>>(base: T):\n    HasInitializedCtor & T {\n  return class extends base {\n    /** Whether this directive has been marked as initialized. */\n    _isInitialized = false;\n\n    /**\n     * List of subscribers that subscribed before the directive was initialized. Should be notified\n     * during _markInitialized. Set to null after pending subscribers are notified, and should\n     * not expect to be populated after.\n     */\n    _pendingSubscribers: Subscriber<void>[] | null = [];\n\n    /**\n     * Observable stream that emits when the directive initializes. If already initialized, the\n     * subscriber is stored to be notified once _markInitialized is called.\n     */\n    initialized = new Observable<void>(subscriber => {\n      // If initialized, immediately notify the subscriber. Otherwise store the subscriber to notify\n      // when _markInitialized is called.\n      if (this._isInitialized) {\n        this._notifySubscriber(subscriber);\n      } else {\n        this._pendingSubscribers!.push(subscriber);\n      }\n    });\n\n    constructor(...args: any[]) { super(...args); }\n\n    /**\n     * Marks the state as initialized and notifies pending subscribers. Should be called at the end\n     * of ngOnInit.\n     * @docs-private\n     */\n    _markInitialized(): void {\n      if (this._isInitialized) {\n        throw Error('This directive has already been marked as initialized and ' +\n            'should not be called twice.');\n      }\n\n      this._isInitialized = true;\n\n      this._pendingSubscribers!.forEach(this._notifySubscriber);\n      this._pendingSubscribers = null;\n    }\n\n    /** Emits and completes the subscriber stream (should only emit once). */\n    _notifySubscriber(subscriber: Subscriber<void>): void {\n      subscriber.next();\n      subscriber.complete();\n    }\n  };\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {inject, InjectionToken, LOCALE_ID} from '@angular/core';\nimport {Observable, Subject} from 'rxjs';\n\n/** InjectionToken for datepicker that can be used to override default locale code. */\nexport const MAT_DATE_LOCALE = new InjectionToken<string>('MAT_DATE_LOCALE', {\n  providedIn: 'root',\n  factory: MAT_DATE_LOCALE_FACTORY,\n});\n\n/** @docs-private */\nexport function MAT_DATE_LOCALE_FACTORY(): string {\n  return inject(LOCALE_ID);\n}\n\n/**\n * No longer needed since MAT_DATE_LOCALE has been changed to a scoped injectable.\n * If you are importing and providing this in your code you can simply remove it.\n * @deprecated\n * @breaking-change 7.0.0\n */\nexport const MAT_DATE_LOCALE_PROVIDER = {provide: MAT_DATE_LOCALE, useExisting: LOCALE_ID};\n\n/** Adapts type `D` to be usable as a date by cdk-based components that work with dates. */\nexport abstract class DateAdapter<D> {\n  /** The locale to use for all dates. */\n  protected locale: any;\n\n  /** A stream that emits when the locale changes. */\n  get localeChanges(): Observable<void> { return this._localeChanges; }\n  protected _localeChanges = new Subject<void>();\n\n  /**\n   * Gets the year component of the given date.\n   * @param date The date to extract the year from.\n   * @returns The year component.\n   */\n  abstract getYear(date: D): number;\n\n  /**\n   * Gets the month component of the given date.\n   * @param date The date to extract the month from.\n   * @returns The month component (0-indexed, 0 = January).\n   */\n  abstract getMonth(date: D): number;\n\n  /**\n   * Gets the date of the month component of the given date.\n   * @param date The date to extract the date of the month from.\n   * @returns The month component (1-indexed, 1 = first of month).\n   */\n  abstract getDate(date: D): number;\n\n  /**\n   * Gets the day of the week component of the given date.\n   * @param date The date to extract the day of the week from.\n   * @returns The month component (0-indexed, 0 = Sunday).\n   */\n  abstract getDayOfWeek(date: D): number;\n\n  /**\n   * Gets a list of names for the months.\n   * @param style The naming style (e.g. long = 'January', short = 'Jan', narrow = 'J').\n   * @returns An ordered list of all month names, starting with January.\n   */\n  abstract getMonthNames(style: 'long' | 'short' | 'narrow'): string[];\n\n  /**\n   * Gets a list of names for the dates of the month.\n   * @returns An ordered list of all date of the month names, starting with '1'.\n   */\n  abstract getDateNames(): string[];\n\n  /**\n   * Gets a list of names for the days of the week.\n   * @param style The naming style (e.g. long = 'Sunday', short = 'Sun', narrow = 'S').\n   * @returns An ordered list of all weekday names, starting with Sunday.\n   */\n  abstract getDayOfWeekNames(style: 'long' | 'short' | 'narrow'): string[];\n\n  /**\n   * Gets the name for the year of the given date.\n   * @param date The date to get the year name for.\n   * @returns The name of the given year (e.g. '2017').\n   */\n  abstract getYearName(date: D): string;\n\n  /**\n   * Gets the first day of the week.\n   * @returns The first day of the week (0-indexed, 0 = Sunday).\n   */\n  abstract getFirstDayOfWeek(): number;\n\n  /**\n   * Gets the number of days in the month of the given date.\n   * @param date The date whose month should be checked.\n   * @returns The number of days in the month of the given date.\n   */\n  abstract getNumDaysInMonth(date: D): number;\n\n  /**\n   * Clones the given date.\n   * @param date The date to clone\n   * @returns A new date equal to the given date.\n   */\n  abstract clone(date: D): D;\n\n  /**\n   * Creates a date with the given year, month, and date. Does not allow over/under-flow of the\n   * month and date.\n   * @param year The full year of the date. (e.g. 89 means the year 89, not the year 1989).\n   * @param month The month of the date (0-indexed, 0 = January). Must be an integer 0 - 11.\n   * @param date The date of month of the date. Must be an integer 1 - length of the given month.\n   * @returns The new date, or null if invalid.\n   */\n  abstract createDate(year: number, month: number, date: number): D;\n\n  /**\n   * Gets today's date.\n   * @returns Today's date.\n   */\n  abstract today(): D;\n\n  /**\n   * Parses a date from a user-provided value.\n   * @param value The value to parse.\n   * @param parseFormat The expected format of the value being parsed\n   *     (type is implementation-dependent).\n   * @returns The parsed date.\n   */\n  abstract parse(value: any, parseFormat: any): D | null;\n\n  /**\n   * Formats a date as a string according to the given format.\n   * @param date The value to format.\n   * @param displayFormat The format to use to display the date as a string.\n   * @returns The formatted date string.\n   */\n  abstract format(date: D, displayFormat: any): string;\n\n  /**\n   * Adds the given number of years to the date. Years are counted as if flipping 12 pages on the\n   * calendar for each year and then finding the closest date in the new month. For example when\n   * adding 1 year to Feb 29, 2016, the resulting date will be Feb 28, 2017.\n   * @param date The date to add years to.\n   * @param years The number of years to add (may be negative).\n   * @returns A new date equal to the given one with the specified number of years added.\n   */\n  abstract addCalendarYears(date: D, years: number): D;\n\n  /**\n   * Adds the given number of months to the date. Months are counted as if flipping a page on the\n   * calendar for each month and then finding the closest date in the new month. For example when\n   * adding 1 month to Jan 31, 2017, the resulting date will be Feb 28, 2017.\n   * @param date The date to add months to.\n   * @param months The number of months to add (may be negative).\n   * @returns A new date equal to the given one with the specified number of months added.\n   */\n  abstract addCalendarMonths(date: D, months: number): D;\n\n  /**\n   * Adds the given number of days to the date. Days are counted as if moving one cell on the\n   * calendar for each day.\n   * @param date The date to add days to.\n   * @param days The number of days to add (may be negative).\n   * @returns A new date equal to the given one with the specified number of days added.\n   */\n  abstract addCalendarDays(date: D, days: number): D;\n\n  /**\n   * Gets the RFC 3339 compatible string (https://tools.ietf.org/html/rfc3339) for the given date.\n   * This method is used to generate date strings that are compatible with native HTML attributes\n   * such as the `min` or `max` attribute of an `<input>`.\n   * @param date The date to get the ISO date string for.\n   * @returns The ISO date string date string.\n   */\n  abstract toIso8601(date: D): string;\n\n  /**\n   * Checks whether the given object is considered a date instance by this DateAdapter.\n   * @param obj The object to check\n   * @returns Whether the object is a date instance.\n   */\n  abstract isDateInstance(obj: any): boolean;\n\n  /**\n   * Checks whether the given date is valid.\n   * @param date The date to check.\n   * @returns Whether the date is valid.\n   */\n  abstract isValid(date: D): boolean;\n\n  /**\n   * Gets date instance that is not valid.\n   * @returns An invalid date.\n   */\n  abstract invalid(): D;\n\n  /**\n   * Attempts to deserialize a value to a valid date object. This is different from parsing in that\n   * deserialize should only accept non-ambiguous, locale-independent formats (e.g. a ISO 8601\n   * string). The default implementation does not allow any deserialization, it simply checks that\n   * the given value is already a valid date object or null. The `<mat-datepicker>` will call this\n   * method on all of it's `@Input()` properties that accept dates. It is therefore possible to\n   * support passing values from your backend directly to these properties by overriding this method\n   * to also deserialize the format used by your backend.\n   * @param value The value to be deserialized into a date object.\n   * @returns The deserialized date object, either a valid date, null if the value can be\n   *     deserialized into a null date (e.g. the empty string), or an invalid date.\n   */\n  deserialize(value: any): D | null {\n    if (value == null || this.isDateInstance(value) && this.isValid(value)) {\n      return value;\n    }\n    return this.invalid();\n  }\n\n  /**\n   * Sets the locale used for all dates.\n   * @param locale The new locale.\n   */\n  setLocale(locale: any) {\n    this.locale = locale;\n    this._localeChanges.next();\n  }\n\n  /**\n   * Compares two dates.\n   * @param first The first date to compare.\n   * @param second The second date to compare.\n   * @returns 0 if the dates are equal, a number less than 0 if the first date is earlier,\n   *     a number greater than 0 if the first date is later.\n   */\n  compareDate(first: D, second: D): number {\n    return this.getYear(first) - this.getYear(second) ||\n        this.getMonth(first) - this.getMonth(second) ||\n        this.getDate(first) - this.getDate(second);\n  }\n\n  /**\n   * Checks if two dates are equal.\n   * @param first The first date to check.\n   * @param second The second date to check.\n   * @returns Whether the two dates are equal.\n   *     Null dates are considered equal to other null dates.\n   */\n  sameDate(first: D | null, second: D | null): boolean {\n    if (first && second) {\n      let firstValid = this.isValid(first);\n      let secondValid = this.isValid(second);\n      if (firstValid && secondValid) {\n        return !this.compareDate(first, second);\n      }\n      return firstValid == secondValid;\n    }\n    return first == second;\n  }\n\n  /**\n   * Clamp the given date between min and max dates.\n   * @param date The date to clamp.\n   * @param min The minimum value to allow. If null or omitted no min is enforced.\n   * @param max The maximum value to allow. If null or omitted no max is enforced.\n   * @returns `min` if `date` is less than `min`, `max` if date is greater than `max`,\n   *     otherwise `date`.\n   */\n  clampDate(date: D, min?: D | null, max?: D | null): D {\n    if (min && this.compareDate(date, min) < 0) {\n      return min;\n    }\n    if (max && this.compareDate(date, max) > 0) {\n      return max;\n    }\n    return date;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Platform} from '@angular/cdk/platform';\nimport {Inject, Injectable, Optional} from '@angular/core';\nimport {DateAdapter, MAT_DATE_LOCALE} from './date-adapter';\n\n// TODO(mmalerba): Remove when we no longer support safari 9.\n/** Whether the browser supports the Intl API. */\nconst SUPPORTS_INTL_API = typeof Intl != 'undefined';\n\n\n/** The default month names to use if Intl API is not available. */\nconst DEFAULT_MONTH_NAMES = {\n  'long': [\n    'January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September',\n    'October', 'November', 'December'\n  ],\n  'short': ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'],\n  'narrow': ['J', 'F', 'M', 'A', 'M', 'J', 'J', 'A', 'S', 'O', 'N', 'D']\n};\n\n\n/** The default date names to use if Intl API is not available. */\nconst DEFAULT_DATE_NAMES = range(31, i => String(i + 1));\n\n\n/** The default day of the week names to use if Intl API is not available. */\nconst DEFAULT_DAY_OF_WEEK_NAMES = {\n  'long': ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'],\n  'short': ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'],\n  'narrow': ['S', 'M', 'T', 'W', 'T', 'F', 'S']\n};\n\n\n/**\n * Matches strings that have the form of a valid RFC 3339 string\n * (https://tools.ietf.org/html/rfc3339). Note that the string may not actually be a valid date\n * because the regex will match strings an with out of bounds month, date, etc.\n */\nconst ISO_8601_REGEX =\n    /^\\d{4}-\\d{2}-\\d{2}(?:T\\d{2}:\\d{2}:\\d{2}(?:\\.\\d+)?(?:Z|(?:(?:\\+|-)\\d{2}:\\d{2}))?)?$/;\n\n\n/** Creates an array and fills it with values. */\nfunction range<T>(length: number, valueFunction: (index: number) => T): T[] {\n  const valuesArray = Array(length);\n  for (let i = 0; i < length; i++) {\n    valuesArray[i] = valueFunction(i);\n  }\n  return valuesArray;\n}\n\n/** Adapts the native JS Date for use with cdk-based components that work with dates. */\n@Injectable()\nexport class NativeDateAdapter extends DateAdapter<Date> {\n  /** Whether to clamp the date between 1 and 9999 to avoid IE and Edge errors. */\n  private readonly _clampDate: boolean;\n\n  /**\n   * Whether to use `timeZone: 'utc'` with `Intl.DateTimeFormat` when formatting dates.\n   * Without this `Intl.DateTimeFormat` sometimes chooses the wrong timeZone, which can throw off\n   * the result. (e.g. in the en-US locale `new Date(1800, 7, 14).toLocaleDateString()`\n   * will produce `'8/13/1800'`.\n   *\n   * TODO(mmalerba): drop this variable. It's not being used in the code right now. We're now\n   * getting the string representation of a Date object from it's utc representation. We're keeping\n   * it here for sometime, just for precaution, in case we decide to revert some of these changes\n   * though.\n   */\n  useUtcForDisplay: boolean = true;\n\n  constructor(@Optional() @Inject(MAT_DATE_LOCALE) matDateLocale: string, platform: Platform) {\n    super();\n    super.setLocale(matDateLocale);\n\n    // IE does its own time zone correction, so we disable this on IE.\n    this.useUtcForDisplay = !platform.TRIDENT;\n    this._clampDate = platform.TRIDENT || platform.EDGE;\n  }\n\n  getYear(date: Date): number {\n    return date.getFullYear();\n  }\n\n  getMonth(date: Date): number {\n    return date.getMonth();\n  }\n\n  getDate(date: Date): number {\n    return date.getDate();\n  }\n\n  getDayOfWeek(date: Date): number {\n    return date.getDay();\n  }\n\n  getMonthNames(style: 'long' | 'short' | 'narrow'): string[] {\n    if (SUPPORTS_INTL_API) {\n      const dtf = new Intl.DateTimeFormat(this.locale, {month: style, timeZone: 'utc'});\n      return range(12, i =>\n          this._stripDirectionalityCharacters(this._format(dtf, new Date(2017, i, 1))));\n    }\n    return DEFAULT_MONTH_NAMES[style];\n  }\n\n  getDateNames(): string[] {\n    if (SUPPORTS_INTL_API) {\n      const dtf = new Intl.DateTimeFormat(this.locale, {day: 'numeric', timeZone: 'utc'});\n      return range(31, i => this._stripDirectionalityCharacters(\n          this._format(dtf, new Date(2017, 0, i + 1))));\n    }\n    return DEFAULT_DATE_NAMES;\n  }\n\n  getDayOfWeekNames(style: 'long' | 'short' | 'narrow'): string[] {\n    if (SUPPORTS_INTL_API) {\n      const dtf = new Intl.DateTimeFormat(this.locale, {weekday: style, timeZone: 'utc'});\n      return range(7, i => this._stripDirectionalityCharacters(\n          this._format(dtf, new Date(2017, 0, i + 1))));\n    }\n    return DEFAULT_DAY_OF_WEEK_NAMES[style];\n  }\n\n  getYearName(date: Date): string {\n    if (SUPPORTS_INTL_API) {\n      const dtf = new Intl.DateTimeFormat(this.locale, {year: 'numeric', timeZone: 'utc'});\n      return this._stripDirectionalityCharacters(this._format(dtf, date));\n    }\n    return String(this.getYear(date));\n  }\n\n  getFirstDayOfWeek(): number {\n    // We can't tell using native JS Date what the first day of the week is, we default to Sunday.\n    return 0;\n  }\n\n  getNumDaysInMonth(date: Date): number {\n    return this.getDate(this._createDateWithOverflow(\n        this.getYear(date), this.getMonth(date) + 1, 0));\n  }\n\n  clone(date: Date): Date {\n    return this.createDate(this.getYear(date), this.getMonth(date), this.getDate(date));\n  }\n\n  createDate(year: number, month: number, date: number): Date {\n    // Check for invalid month and date (except upper bound on date which we have to check after\n    // creating the Date).\n    if (month < 0 || month > 11) {\n      throw Error(`Invalid month index \"${month}\". Month index has to be between 0 and 11.`);\n    }\n\n    if (date < 1) {\n      throw Error(`Invalid date \"${date}\". Date has to be greater than 0.`);\n    }\n\n    let result = this._createDateWithOverflow(year, month, date);\n    // Check that the date wasn't above the upper bound for the month, causing the month to overflow\n    if (result.getMonth() != month) {\n      throw Error(`Invalid date \"${date}\" for month with index \"${month}\".`);\n    }\n\n    return result;\n  }\n\n  today(): Date {\n    return new Date();\n  }\n\n  parse(value: any): Date | null {\n    // We have no way using the native JS Date to set the parse format or locale, so we ignore these\n    // parameters.\n    if (typeof value == 'number') {\n      return new Date(value);\n    }\n    return value ? new Date(Date.parse(value)) : null;\n  }\n\n  format(date: Date, displayFormat: Object): string {\n    if (!this.isValid(date)) {\n      throw Error('NativeDateAdapter: Cannot format invalid date.');\n    }\n\n    if (SUPPORTS_INTL_API) {\n      // On IE and Edge the i18n API will throw a hard error that can crash the entire app\n      // if we attempt to format a date whose year is less than 1 or greater than 9999.\n      if (this._clampDate && (date.getFullYear() < 1 || date.getFullYear() > 9999)) {\n        date = this.clone(date);\n        date.setFullYear(Math.max(1, Math.min(9999, date.getFullYear())));\n      }\n\n      displayFormat = {...displayFormat, timeZone: 'utc'};\n\n      const dtf = new Intl.DateTimeFormat(this.locale, displayFormat);\n      return this._stripDirectionalityCharacters(this._format(dtf, date));\n    }\n    return this._stripDirectionalityCharacters(date.toDateString());\n  }\n\n  addCalendarYears(date: Date, years: number): Date {\n    return this.addCalendarMonths(date, years * 12);\n  }\n\n  addCalendarMonths(date: Date, months: number): Date {\n    let newDate = this._createDateWithOverflow(\n        this.getYear(date), this.getMonth(date) + months, this.getDate(date));\n\n    // It's possible to wind up in the wrong month if the original month has more days than the new\n    // month. In this case we want to go to the last day of the desired month.\n    // Note: the additional + 12 % 12 ensures we end up with a positive number, since JS % doesn't\n    // guarantee this.\n    if (this.getMonth(newDate) != ((this.getMonth(date) + months) % 12 + 12) % 12) {\n      newDate = this._createDateWithOverflow(this.getYear(newDate), this.getMonth(newDate), 0);\n    }\n\n    return newDate;\n  }\n\n  addCalendarDays(date: Date, days: number): Date {\n    return this._createDateWithOverflow(\n        this.getYear(date), this.getMonth(date), this.getDate(date) + days);\n  }\n\n  toIso8601(date: Date): string {\n    return [\n      date.getUTCFullYear(),\n      this._2digit(date.getUTCMonth() + 1),\n      this._2digit(date.getUTCDate())\n    ].join('-');\n  }\n\n  /**\n   * Returns the given value if given a valid Date or null. Deserializes valid ISO 8601 strings\n   * (https://www.ietf.org/rfc/rfc3339.txt) into valid Dates and empty string into null. Returns an\n   * invalid date for all other values.\n   */\n  deserialize(value: any): Date | null {\n    if (typeof value === 'string') {\n      if (!value) {\n        return null;\n      }\n      // The `Date` constructor accepts formats other than ISO 8601, so we need to make sure the\n      // string is the right format first.\n      if (ISO_8601_REGEX.test(value)) {\n        let date = new Date(value);\n        if (this.isValid(date)) {\n          return date;\n        }\n      }\n    }\n    return super.deserialize(value);\n  }\n\n  isDateInstance(obj: any) {\n    return obj instanceof Date;\n  }\n\n  isValid(date: Date) {\n    return !isNaN(date.getTime());\n  }\n\n  invalid(): Date {\n    return new Date(NaN);\n  }\n\n  /** Creates a date but allows the month and date to overflow. */\n  private _createDateWithOverflow(year: number, month: number, date: number) {\n    const result = new Date(year, month, date);\n\n    // We need to correct for the fact that JS native Date treats years in range [0, 99] as\n    // abbreviations for 19xx.\n    if (year >= 0 && year < 100) {\n      result.setFullYear(this.getYear(result) - 1900);\n    }\n    return result;\n  }\n\n  /**\n   * Pads a number to make it two digits.\n   * @param n The number to pad.\n   * @returns The padded number.\n   */\n  private _2digit(n: number) {\n    return ('00' + n).slice(-2);\n  }\n\n  /**\n   * Strip out unicode LTR and RTL characters. Edge and IE insert these into formatted dates while\n   * other browsers do not. We remove them to make output consistent and because they interfere with\n   * date parsing.\n   * @param str The string to strip direction characters from.\n   * @returns The stripped string.\n   */\n  private _stripDirectionalityCharacters(str: string) {\n    return str.replace(/[\\u200e\\u200f]/g, '');\n  }\n\n  /**\n   * When converting Date object to string, javascript built-in functions may return wrong\n   * results because it applies its internal DST rules. The DST rules around the world change\n   * very frequently, and the current valid rule is not always valid in previous years though.\n   * We work around this problem building a new Date object which has its internal UTC\n   * representation with the local date and time.\n   * @param dtf Intl.DateTimeFormat object, containg the desired string format. It must have\n   *    timeZone set to 'utc' to work fine.\n   * @param date Date from which we want to get the string representation according to dtf\n   * @returns A Date object with its UTC representation based on the passed in date info\n   */\n  private _format(dtf: Intl.DateTimeFormat, date: Date) {\n    const d = new Date(Date.UTC(\n        date.getFullYear(), date.getMonth(), date.getDate(), date.getHours(),\n        date.getMinutes(), date.getSeconds(), date.getMilliseconds()));\n    return dtf.format(d);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {ElementRef, NgZone} from '@angular/core';\nimport {Platform, supportsPassiveEventListeners} from '@angular/cdk/platform';\nimport {isFakeMousedownFromScreenReader} from '@angular/cdk/a11y';\nimport {RippleRef, RippleState} from './ripple-ref';\n\nexport type RippleConfig = {\n  color?: string;\n  centered?: boolean;\n  radius?: number;\n  persistent?: boolean;\n  animation?: RippleAnimationConfig;\n  terminateOnPointerUp?: boolean;\n};\n\n/**\n * Interface that describes the configuration for the animation of a ripple.\n * There are two animation phases with different durations for the ripples.\n */\nexport interface RippleAnimationConfig {\n  /** Duration in milliseconds for the enter animation (expansion from point of contact). */\n  enterDuration?: number;\n  /** Duration in milliseconds for the exit animation (fade-out). */\n  exitDuration?: number;\n}\n\n/**\n * Interface that describes the target for launching ripples.\n * It defines the ripple configuration and disabled state for interaction ripples.\n * @docs-private\n */\nexport interface RippleTarget {\n  /** Configuration for ripples that are launched on pointer down. */\n  rippleConfig: RippleConfig;\n  /** Whether ripples on pointer down should be disabled. */\n  rippleDisabled: boolean;\n}\n\n/**\n * Default ripple animation configuration for ripples without an explicit\n * animation config specified.\n */\nexport const defaultRippleAnimationConfig = {\n  enterDuration: 450,\n  exitDuration: 400\n};\n\n/**\n * Timeout for ignoring mouse events. Mouse events will be temporary ignored after touch\n * events to avoid synthetic mouse events.\n */\nconst ignoreMouseEventsTimeout = 800;\n\n/**\n * Helper service that performs DOM manipulations. Not intended to be used outside this module.\n * The constructor takes a reference to the ripple directive's host element and a map of DOM\n * event handlers to be installed on the element that triggers ripple animations.\n * This will eventually become a custom renderer once Angular support exists.\n * @docs-private\n */\nexport class RippleRenderer {\n  /** Element where the ripples are being added to. */\n  private _containerElement: HTMLElement;\n\n  /** Element which triggers the ripple elements on mouse events. */\n  private _triggerElement: HTMLElement | null;\n\n  /** Whether the pointer is currently down or not. */\n  private _isPointerDown = false;\n\n  /** Events to be registered on the trigger element. */\n  private _triggerEvents = new Map<string, any>();\n\n  /** Set of currently active ripple references. */\n  private _activeRipples = new Set<RippleRef>();\n\n  /** Latest non-persistent ripple that was triggered. */\n  private _mostRecentTransientRipple: RippleRef | null;\n\n  /** Time in milliseconds when the last touchstart event happened. */\n  private _lastTouchStartEvent: number;\n\n  /** Options that apply to all the event listeners that are bound by the renderer. */\n  private _eventOptions = supportsPassiveEventListeners() ? ({passive: true} as any) : false;\n\n  /**\n   * Cached dimensions of the ripple container. Set when the first\n   * ripple is shown and cleared once no more ripples are visible.\n   */\n  private _containerRect: ClientRect | null;\n\n  constructor(private _target: RippleTarget,\n              private _ngZone: NgZone,\n              elementRef: ElementRef<HTMLElement>,\n              platform: Platform) {\n\n    // Only do anything if we're on the browser.\n    if (platform.isBrowser) {\n      this._containerElement = elementRef.nativeElement;\n\n      // Specify events which need to be registered on the trigger.\n      this._triggerEvents\n        .set('mousedown', this.onMousedown)\n        .set('mouseup', this.onPointerUp)\n        .set('mouseleave', this.onPointerUp)\n\n        .set('touchstart', this.onTouchStart)\n        .set('touchend', this.onPointerUp)\n        .set('touchcancel', this.onPointerUp);\n    }\n  }\n\n  /**\n   * Fades in a ripple at the given coordinates.\n   * @param x Coordinate within the element, along the X axis at which to start the ripple.\n   * @param y Coordinate within the element, along the Y axis at which to start the ripple.\n   * @param config Extra ripple options.\n   */\n  fadeInRipple(x: number, y: number, config: RippleConfig = {}): RippleRef {\n    const containerRect = this._containerRect =\n                          this._containerRect || this._containerElement.getBoundingClientRect();\n    const animationConfig = {...defaultRippleAnimationConfig, ...config.animation};\n\n    if (config.centered) {\n      x = containerRect.left + containerRect.width / 2;\n      y = containerRect.top + containerRect.height / 2;\n    }\n\n    const radius = config.radius || distanceToFurthestCorner(x, y, containerRect);\n    const offsetX = x - containerRect.left;\n    const offsetY = y - containerRect.top;\n    const duration = animationConfig.enterDuration;\n\n    const ripple = document.createElement('div');\n    ripple.classList.add('mat-ripple-element');\n\n    ripple.style.left = `${offsetX - radius}px`;\n    ripple.style.top = `${offsetY - radius}px`;\n    ripple.style.height = `${radius * 2}px`;\n    ripple.style.width = `${radius * 2}px`;\n\n    // If the color is not set, the default CSS color will be used.\n    ripple.style.backgroundColor = config.color || null;\n    ripple.style.transitionDuration = `${duration}ms`;\n\n    this._containerElement.appendChild(ripple);\n\n    // By default the browser does not recalculate the styles of dynamically created\n    // ripple elements. This is critical because then the `scale` would not animate properly.\n    enforceStyleRecalculation(ripple);\n\n    ripple.style.transform = 'scale(1)';\n\n    // Exposed reference to the ripple that will be returned.\n    const rippleRef = new RippleRef(this, ripple, config);\n\n    rippleRef.state = RippleState.FADING_IN;\n\n    // Add the ripple reference to the list of all active ripples.\n    this._activeRipples.add(rippleRef);\n\n    if (!config.persistent) {\n      this._mostRecentTransientRipple = rippleRef;\n    }\n\n    // Wait for the ripple element to be completely faded in.\n    // Once it's faded in, the ripple can be hidden immediately if the mouse is released.\n    this.runTimeoutOutsideZone(() => {\n      const isMostRecentTransientRipple = rippleRef === this._mostRecentTransientRipple;\n\n      rippleRef.state = RippleState.VISIBLE;\n\n      // When the timer runs out while the user has kept their pointer down, we want to\n      // keep only the persistent ripples and the latest transient ripple. We do this,\n      // because we don't want stacked transient ripples to appear after their enter\n      // animation has finished.\n      if (!config.persistent && (!isMostRecentTransientRipple || !this._isPointerDown)) {\n        rippleRef.fadeOut();\n      }\n    }, duration);\n\n    return rippleRef;\n  }\n\n  /** Fades out a ripple reference. */\n  fadeOutRipple(rippleRef: RippleRef) {\n    const wasActive = this._activeRipples.delete(rippleRef);\n\n    if (rippleRef === this._mostRecentTransientRipple) {\n      this._mostRecentTransientRipple = null;\n    }\n\n    // Clear out the cached bounding rect if we have no more ripples.\n    if (!this._activeRipples.size) {\n      this._containerRect = null;\n    }\n\n    // For ripples that are not active anymore, don't re-un the fade-out animation.\n    if (!wasActive) {\n      return;\n    }\n\n    const rippleEl = rippleRef.element;\n    const animationConfig = {...defaultRippleAnimationConfig, ...rippleRef.config.animation};\n\n    rippleEl.style.transitionDuration = `${animationConfig.exitDuration}ms`;\n    rippleEl.style.opacity = '0';\n    rippleRef.state = RippleState.FADING_OUT;\n\n    // Once the ripple faded out, the ripple can be safely removed from the DOM.\n    this.runTimeoutOutsideZone(() => {\n      rippleRef.state = RippleState.HIDDEN;\n      rippleEl.parentNode!.removeChild(rippleEl);\n    }, animationConfig.exitDuration);\n  }\n\n  /** Fades out all currently active ripples. */\n  fadeOutAll() {\n    this._activeRipples.forEach(ripple => ripple.fadeOut());\n  }\n\n  /** Sets up the trigger event listeners */\n  setupTriggerEvents(element: HTMLElement) {\n    if (!element || element === this._triggerElement) {\n      return;\n    }\n\n    // Remove all previously registered event listeners from the trigger element.\n    this._removeTriggerEvents();\n\n    this._ngZone.runOutsideAngular(() => {\n      this._triggerEvents.forEach((fn, type) =>\n          element.addEventListener(type, fn, this._eventOptions));\n    });\n\n    this._triggerElement = element;\n  }\n\n  /** Function being called whenever the trigger is being pressed using mouse. */\n  private onMousedown = (event: MouseEvent) => {\n    // Screen readers will fire fake mouse events for space/enter. Skip launching a\n    // ripple in this case for consistency with the non-screen-reader experience.\n    const isFakeMousedown = isFakeMousedownFromScreenReader(event);\n    const isSyntheticEvent = this._lastTouchStartEvent &&\n        Date.now() < this._lastTouchStartEvent + ignoreMouseEventsTimeout;\n\n    if (!this._target.rippleDisabled && !isFakeMousedown && !isSyntheticEvent) {\n      this._isPointerDown = true;\n      this.fadeInRipple(event.clientX, event.clientY, this._target.rippleConfig);\n    }\n  }\n\n  /** Function being called whenever the trigger is being pressed using touch. */\n  private onTouchStart = (event: TouchEvent) => {\n    if (!this._target.rippleDisabled) {\n      // Some browsers fire mouse events after a `touchstart` event. Those synthetic mouse\n      // events will launch a second ripple if we don't ignore mouse events for a specific\n      // time after a touchstart event.\n      this._lastTouchStartEvent = Date.now();\n      this._isPointerDown = true;\n\n      // Use `changedTouches` so we skip any touches where the user put\n      // their finger down, but used another finger to tap the element again.\n      const touches = event.changedTouches;\n\n      for (let i = 0; i < touches.length; i++) {\n        this.fadeInRipple(touches[i].clientX, touches[i].clientY, this._target.rippleConfig);\n      }\n    }\n  }\n\n  /** Function being called whenever the trigger is being released. */\n  private onPointerUp = () => {\n    if (!this._isPointerDown) {\n      return;\n    }\n\n    this._isPointerDown = false;\n\n    // Fade-out all ripples that are visible and not persistent.\n    this._activeRipples.forEach(ripple => {\n      // By default, only ripples that are completely visible will fade out on pointer release.\n      // If the `terminateOnPointerUp` option is set, ripples that still fade in will also fade out.\n      const isVisible = ripple.state === RippleState.VISIBLE ||\n        ripple.config.terminateOnPointerUp && ripple.state === RippleState.FADING_IN;\n\n      if (!ripple.config.persistent && isVisible) {\n        ripple.fadeOut();\n      }\n    });\n  }\n\n  /** Runs a timeout outside of the Angular zone to avoid triggering the change detection. */\n  private runTimeoutOutsideZone(fn: Function, delay = 0) {\n    this._ngZone.runOutsideAngular(() => setTimeout(fn, delay));\n  }\n\n  /** Removes previously registered event listeners from the trigger element. */\n  _removeTriggerEvents() {\n    if (this._triggerElement) {\n      this._triggerEvents.forEach((fn, type) => {\n        this._triggerElement!.removeEventListener(type, fn, this._eventOptions);\n      });\n    }\n  }\n}\n\n/** Enforces a style recalculation of a DOM element by computing its styles. */\nfunction enforceStyleRecalculation(element: HTMLElement) {\n  // Enforce a style recalculation by calling `getComputedStyle` and accessing any property.\n  // Calling `getPropertyValue` is important to let optimizers know that this is not a noop.\n  // See: https://gist.github.com/paulirish/5d52fb081b3570c81e3a\n  window.getComputedStyle(element).getPropertyValue('opacity');\n}\n\n/**\n * Returns the distance from the point (x, y) to the furthest corner of a rectangle.\n */\nfunction distanceToFurthestCorner(x: number, y: number, rect: ClientRect) {\n  const distX = Math.max(Math.abs(x - rect.left), Math.abs(x - rect.right));\n  const distY = Math.max(Math.abs(y - rect.top), Math.abs(y - rect.bottom));\n  return Math.sqrt(distX * distX + distY * distY);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** @docs-private */\nexport function getMatFormFieldPlaceholderConflictError(): Error {\n  return Error('Placeholder attribute and child element were both specified.');\n}\n\n/** @docs-private */\nexport function getMatFormFieldDuplicatedHintError(align: string): Error {\n  return Error(`A hint was already declared for 'align=\"${align}\"'.`);\n}\n\n/** @docs-private */\nexport function getMatFormFieldMissingControlError(): Error {\n  return Error('mat-form-field must contain a MatFormFieldControl.');\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** @docs-private */\nexport function getMatInputUnsupportedTypeError(type: string): Error {\n  return Error(`Input type \"${type}\" isn't supported by matInput.`);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** @docs-private */\nexport function createMissingDateImplError(provider: string) {\n  return Error(\n      `MatDatepicker: No provider found for ${provider}. You must import one of the following ` +\n      `modules at your application root: MatNativeDateModule, MatMomentDateModule, or provide a ` +\n      `custom implementation.`);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Throws an exception for the case when menu trigger doesn't have a valid mat-menu instance\n * @docs-private\n */\nexport function throwMatMenuMissingError() {\n  throw Error(`matMenuTriggerFor: must pass in an mat-menu instance.\n\n    Example:\n      <mat-menu #menu=\"matMenu\"></mat-menu>\n      <button [matMenuTriggerFor]=\"menu\"></button>`);\n}\n\n/**\n * Throws an exception for the case when menu's x-position value isn't valid.\n * In other words, it doesn't match 'before' or 'after'.\n * @docs-private\n */\nexport function throwMatMenuInvalidPositionX() {\n  throw Error(`xPosition value must be either 'before' or after'.\n      Example: <mat-menu xPosition=\"before\" #menu=\"matMenu\"></mat-menu>`);\n}\n\n/**\n * Throws an exception for the case when menu's y-position value isn't valid.\n * In other words, it doesn't match 'above' or 'below'.\n * @docs-private\n */\nexport function throwMatMenuInvalidPositionY() {\n  throw Error(`yPosition value must be either 'above' or below'.\n      Example: <mat-menu yPosition=\"above\" #menu=\"matMenu\"></mat-menu>`);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Returns an exception to be thrown when attempting to change a select's `multiple` option\n * after initialization.\n * @docs-private\n */\nexport function getMatSelectDynamicMultipleError(): Error {\n  return Error('Cannot change `multiple` mode of select after initialization.');\n}\n\n/**\n * Returns an exception to be thrown when attempting to assign a non-array value to a select\n * in `multiple` mode. Note that `undefined` and `null` are still valid values to allow for\n * resetting the value.\n * @docs-private\n */\nexport function getMatSelectNonArrayValueError(): Error {\n  return Error('Value must be an array in multiple-selection mode.');\n}\n\n/**\n * Returns an exception to be thrown when assigning a non-function value to the comparator\n * used to determine if a value corresponds to an option. Note that whether the function\n * actually takes two values and returns a boolean is not checked.\n */\nexport function getMatSelectNonFunctionValueError(): Error {\n  return Error('`compareWith` must be a function.');\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** @docs-private */\nexport function getSortDuplicateSortableIdError(id: string): Error {\n  return Error(`Cannot have two MatSortables with the same id (${id}).`);\n}\n\n/** @docs-private */\nexport function getSortHeaderNotContainedWithinSortError(): Error {\n  return Error(`MatSortHeader must be placed within a parent element with the MatSort directive.`);\n}\n\n/** @docs-private */\nexport function getSortHeaderMissingIdError(): Error {\n  return Error(`MatSortHeader must be provided with a unique id.`);\n}\n\n/** @docs-private */\nexport function getSortInvalidDirectionError(direction: string): Error {\n  return Error(`${direction} is not a valid sort direction ('asc' or 'desc').`);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** @docs-private */\nexport class AnimationCurves {\n  static STANDARD_CURVE = 'cubic-bezier(0.4,0.0,0.2,1)';\n  static DECELERATION_CURVE = 'cubic-bezier(0.0,0.0,0.2,1)';\n  static ACCELERATION_CURVE = 'cubic-bezier(0.4,0.0,1,1)';\n  static SHARP_CURVE = 'cubic-bezier(0.4,0.0,0.6,1)';\n}\n\n\n/** @docs-private */\nexport class AnimationDurations {\n  static COMPLEX = '375ms';\n  static ENTERING = '225ms';\n  static EXITING = '195ms';\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {InjectionToken} from '@angular/core';\n\n\nexport type MatDateFormats = {\n  parse: {\n    dateInput: any\n  },\n  display: {\n    dateInput: any,\n    monthYearLabel: any,\n    dateA11yLabel: any,\n    monthYearA11yLabel: any,\n  }\n};\n\n\nexport const MAT_DATE_FORMATS = new InjectionToken<MatDateFormats>('mat-date-formats');\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {MatDateFormats} from './date-formats';\n\n\nexport const MAT_NATIVE_DATE_FORMATS: MatDateFormats = {\n  parse: {\n    dateInput: null,\n  },\n  display: {\n    dateInput: {year: 'numeric', month: 'numeric', day: 'numeric'},\n    monthYearLabel: {year: 'numeric', month: 'short'},\n    dateA11yLabel: {year: 'numeric', month: 'long', day: 'numeric'},\n    monthYearA11yLabel: {year: 'numeric', month: 'long'},\n  }\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {PlatformModule} from '@angular/cdk/platform';\nimport {NgModule} from '@angular/core';\nimport {DateAdapter} from './date-adapter';\nimport {MAT_DATE_FORMATS} from './date-formats';\nimport {NativeDateAdapter} from './native-date-adapter';\nimport {MAT_NATIVE_DATE_FORMATS} from './native-date-formats';\n\nexport * from './date-adapter';\nexport * from './date-formats';\nexport * from './native-date-adapter';\nexport * from './native-date-formats';\n\n\n@NgModule({\n  imports: [PlatformModule],\n  providers: [\n    {provide: DateAdapter, useClass: NativeDateAdapter},\n  ],\n})\nexport class NativeDateModule {}\n\n\n@NgModule({\n  imports: [NativeDateModule],\n  providers: [{provide: MAT_DATE_FORMATS, useValue: MAT_NATIVE_DATE_FORMATS}],\n})\nexport class MatNativeDateModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable} from '@angular/core';\nimport {FormGroupDirective, NgForm, FormControl} from '@angular/forms';\n\n/** Error state matcher that matches when a control is invalid and dirty. */\n@Injectable()\nexport class ShowOnDirtyErrorStateMatcher implements ErrorStateMatcher {\n  isErrorState(control: FormControl | null, form: FormGroupDirective | NgForm | null): boolean {\n    return !!(control && control.invalid && (control.dirty || (form && form.submitted)));\n  }\n}\n\n/** Provider that defines how form controls behave with regards to displaying error messages. */\n@Injectable({providedIn: 'root'})\nexport class ErrorStateMatcher {\n  isErrorState(control: FormControl | null, form: FormGroupDirective | NgForm | null): boolean {\n    return !!(control && control.invalid && (control.touched || (form && form.submitted)));\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable, InjectionToken, Inject, Optional} from '@angular/core';\nimport {HammerGestureConfig} from '@angular/platform-browser';\nimport {MatCommonModule} from '../common-behaviors/common-module';\nimport {\n  HammerStatic,\n  HammerInstance,\n  Recognizer,\n  RecognizerStatic,\n  HammerOptions,\n} from './gesture-annotations';\n\n/**\n * Injection token that can be used to provide options to the Hammerjs instance.\n * More info at http://hammerjs.github.io/api/.\n */\nexport const MAT_HAMMER_OPTIONS = new InjectionToken<HammerOptions>('MAT_HAMMER_OPTIONS');\n\nconst ANGULAR_MATERIAL_SUPPORTED_HAMMER_GESTURES = [\n  'longpress',\n  'slide',\n  'slidestart',\n  'slideend',\n  'slideright',\n  'slideleft'\n];\n\n/**\n * Fake HammerInstance that is used when a Hammer instance is requested when HammerJS has not\n * been loaded on the page.\n */\nconst noopHammerInstance: HammerInstance = {\n  on: () => {},\n  off: () => {},\n};\n\n/** Adjusts configuration of our gesture library, Hammer. */\n@Injectable()\nexport class GestureConfig extends HammerGestureConfig {\n  /** List of new event names to add to the gesture support list */\n  events = ANGULAR_MATERIAL_SUPPORTED_HAMMER_GESTURES;\n\n  constructor(\n    @Optional() @Inject(MAT_HAMMER_OPTIONS) private _hammerOptions?: HammerOptions,\n    @Optional() commonModule?: MatCommonModule) {\n    super();\n    if (commonModule) {\n      commonModule._checkHammerIsAvailable();\n    }\n  }\n\n  /**\n   * Builds Hammer instance manually to add custom recognizers that match the Material Design spec.\n   *\n   * Our gesture names come from the Material Design gestures spec:\n   * https://material.io/design/#gestures-touch-mechanics\n   *\n   * More information on default recognizers can be found in Hammer docs:\n   * http://hammerjs.github.io/recognizer-pan/\n   * http://hammerjs.github.io/recognizer-press/\n   *\n   * @param element Element to which to assign the new HammerJS gestures.\n   * @returns Newly-created HammerJS instance.\n   */\n  buildHammer(element: HTMLElement): HammerInstance {\n    const hammer: HammerStatic = typeof window !== 'undefined' ? (window as any).Hammer : null;\n\n    if (!hammer) {\n      // If HammerJS is not loaded here, return the noop HammerInstance. This is necessary to\n      // ensure that omitting HammerJS completely will not cause any errors while *also* supporting\n      // the lazy-loading of HammerJS via the HAMMER_LOADER token introduced in Angular 6.1.\n      // Because we can't depend on HAMMER_LOADER's existance until 7.0, we have to always set\n      // `this.events` to the set we support, instead of conditionally setting it to `[]` if\n      // `HAMMER_LOADER` is present (and then throwing an Error here if `window.Hammer` is\n      // undefined).\n      // @breaking-change 7.0.0\n      return noopHammerInstance;\n    }\n\n    const mc = new hammer(element, this._hammerOptions || undefined);\n\n    // Default Hammer Recognizers.\n    const pan = new hammer.Pan();\n    const swipe = new hammer.Swipe();\n    const press = new hammer.Press();\n\n    // Notice that a HammerJS recognizer can only depend on one other recognizer once.\n    // Otherwise the previous `recognizeWith` will be dropped.\n    // TODO: Confirm threshold numbers with Material Design UX Team\n    const slide = this._createRecognizer(pan, {event: 'slide', threshold: 0}, swipe);\n    const longpress = this._createRecognizer(press, {event: 'longpress', time: 500});\n\n    // Overwrite the default `pan` event to use the swipe event.\n    pan.recognizeWith(swipe);\n\n    // Since the slide event threshold is set to zero, the slide recognizer can fire and\n    // accidentally reset the longpress recognizer. In order to make sure that the two\n    // recognizers can run simultaneously but don't affect each other, we allow the slide\n    // recognizer to recognize while a longpress is being processed.\n    // See: https://github.com/hammerjs/hammer.js/blob/master/src/manager.js#L123-L124\n    longpress.recognizeWith(slide);\n\n    // Add customized gestures to Hammer manager\n    mc.add([swipe, press, pan, slide, longpress]);\n\n    return mc as HammerInstance;\n  }\n\n  /** Creates a new recognizer, without affecting the default recognizers of HammerJS */\n  private _createRecognizer(base: Recognizer, options: any, ...inheritances: Recognizer[]) {\n    let recognizer = new (base.constructor as RecognizerStatic)(options);\n\n    inheritances.push(base);\n    inheritances.forEach(item => recognizer.recognizeWith(item));\n\n    return recognizer;\n  }\n\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  NgModule,\n  Directive,\n  ElementRef,\n  QueryList,\n} from '@angular/core';\nimport {MatCommonModule} from '../common-behaviors/common-module';\n\n\n/**\n * Shared directive to count lines inside a text area, such as a list item.\n * Line elements can be extracted with a @ContentChildren(MatLine) query, then\n * counted by checking the query list's length.\n */\n@Directive({\n  selector: '[mat-line], [matLine]',\n  host: {'class': 'mat-line'}\n})\nexport class MatLine {}\n\n/**\n * Helper that takes a query list of lines and sets the correct class on the host.\n * @docs-private\n */\nexport class MatLineSetter {\n  constructor(private _lines: QueryList<MatLine>, private _element: ElementRef<HTMLElement>) {\n    this._setLineClass(this._lines.length);\n\n    this._lines.changes.subscribe(() => {\n      this._setLineClass(this._lines.length);\n    });\n  }\n\n  private _setLineClass(count: number): void {\n    this._resetClasses();\n    if (count === 2 || count === 3) {\n      this._setClass(`mat-${count}-line`, true);\n    } else if (count > 3) {\n      this._setClass(`mat-multi-line`, true);\n    }\n  }\n\n  private _resetClasses(): void {\n    this._setClass('mat-2-line', false);\n    this._setClass('mat-3-line', false);\n    this._setClass('mat-multi-line', false);\n  }\n\n  private _setClass(className: string, isAdd: boolean): void {\n    if (isAdd) {\n      this._element.nativeElement.classList.add(className);\n    } else {\n      this._element.nativeElement.classList.remove(className);\n    }\n  }\n\n}\n\n@NgModule({\n  imports: [MatCommonModule],\n  exports: [MatLine, MatCommonModule],\n  declarations: [MatLine],\n})\nexport class MatLineModule { }\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {RippleConfig, RippleRenderer} from './ripple-renderer';\n\n/** Possible states for a ripple element. */\nexport enum RippleState {\n  FADING_IN, VISIBLE, FADING_OUT, HIDDEN\n}\n\n/**\n * Reference to a previously launched ripple element.\n */\nexport class RippleRef {\n\n  /** Current state of the ripple. */\n  state: RippleState = RippleState.HIDDEN;\n\n  constructor(\n    private _renderer: RippleRenderer,\n    /** Reference to the ripple HTML element. */\n    public element: HTMLElement,\n    /** Ripple configuration used for the ripple. */\n    public config: RippleConfig) {\n  }\n\n  /** Fades out the ripple element. */\n  fadeOut() {\n    this._renderer.fadeOutRipple(this);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Platform} from '@angular/cdk/platform';\nimport {\n  Directive,\n  ElementRef,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  OnDestroy,\n  OnInit,\n  Optional,\n} from '@angular/core';\nimport {RippleRef} from './ripple-ref';\nimport {RippleAnimationConfig, RippleConfig, RippleRenderer, RippleTarget} from './ripple-renderer';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\n\n/** Configurable options for `matRipple`. */\nexport interface RippleGlobalOptions {\n  /**\n   * Whether ripples should be disabled. Ripples can be still launched manually by using\n   * the `launch()` method. Therefore focus indicators will still show up.\n   */\n  disabled?: boolean;\n\n  /**\n   * Configuration for the animation duration of the ripples. There are two phases with different\n   * durations for the ripples. The animation durations will be overwritten if the\n   * `NoopAnimationsModule` is being used.\n   */\n  animation?: RippleAnimationConfig;\n\n  /**\n   * Whether ripples should start fading out immediately after the mouse our touch is released. By\n   * default, ripples will wait for the enter animation to complete and for mouse or touch release.\n   */\n  terminateOnPointerUp?: boolean;\n}\n\n/** Injection token that can be used to specify the global ripple options. */\nexport const MAT_RIPPLE_GLOBAL_OPTIONS =\n    new InjectionToken<RippleGlobalOptions>('mat-ripple-global-options');\n\n@Directive({\n  selector: '[mat-ripple], [matRipple]',\n  exportAs: 'matRipple',\n  host: {\n    'class': 'mat-ripple',\n    '[class.mat-ripple-unbounded]': 'unbounded'\n  }\n})\nexport class MatRipple implements OnInit, OnDestroy, RippleTarget {\n\n  /** Custom color for all ripples. */\n  @Input('matRippleColor') color: string;\n\n  /** Whether the ripples should be visible outside the component's bounds. */\n  @Input('matRippleUnbounded') unbounded: boolean;\n\n  /**\n   * Whether the ripple always originates from the center of the host element's bounds, rather\n   * than originating from the location of the click event.\n   */\n  @Input('matRippleCentered') centered: boolean;\n\n  /**\n   * If set, the radius in pixels of foreground ripples when fully expanded. If unset, the radius\n   * will be the distance from the center of the ripple to the furthest corner of the host element's\n   * bounding rectangle.\n   */\n  @Input('matRippleRadius') radius: number = 0;\n\n  /**\n   * Configuration for the ripple animation. Allows modifying the enter and exit animation\n   * duration of the ripples. The animation durations will be overwritten if the\n   * `NoopAnimationsModule` is being used.\n   */\n  @Input('matRippleAnimation') animation: RippleAnimationConfig;\n\n  /**\n   * Whether click events will not trigger the ripple. Ripples can be still launched manually\n   * by using the `launch()` method.\n   */\n  @Input('matRippleDisabled')\n  get disabled() { return this._disabled; }\n  set disabled(value: boolean) {\n    this._disabled = value;\n    this._setupTriggerEventsIfEnabled();\n  }\n  private _disabled: boolean = false;\n\n  /**\n   * The element that triggers the ripple when click events are received.\n   * Defaults to the directive's host element.\n   */\n  @Input('matRippleTrigger')\n  get trigger() { return this._trigger || this._elementRef.nativeElement; }\n  set trigger(trigger: HTMLElement) {\n    this._trigger = trigger;\n    this._setupTriggerEventsIfEnabled();\n  }\n  private _trigger: HTMLElement;\n\n  /** Renderer for the ripple DOM manipulations. */\n  private _rippleRenderer: RippleRenderer;\n\n  /** Options that are set globally for all ripples. */\n  private _globalOptions: RippleGlobalOptions;\n\n  /** Whether ripple directive is initialized and the input bindings are set. */\n  private _isInitialized: boolean = false;\n\n  constructor(private _elementRef: ElementRef<HTMLElement>,\n              ngZone: NgZone,\n              platform: Platform,\n              @Optional() @Inject(MAT_RIPPLE_GLOBAL_OPTIONS) globalOptions: RippleGlobalOptions,\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) animationMode?: string) {\n\n    this._globalOptions = globalOptions || {};\n    this._rippleRenderer = new RippleRenderer(this, ngZone, _elementRef, platform);\n\n    if (animationMode === 'NoopAnimations') {\n      this._globalOptions.animation = {enterDuration: 0, exitDuration: 0};\n    }\n  }\n\n  ngOnInit() {\n    this._isInitialized = true;\n    this._setupTriggerEventsIfEnabled();\n  }\n\n  ngOnDestroy() {\n    this._rippleRenderer._removeTriggerEvents();\n  }\n\n  /** Fades out all currently showing ripple elements. */\n  fadeOutAll() {\n    this._rippleRenderer.fadeOutAll();\n  }\n\n  /**\n   * Ripple configuration from the directive's input values.\n   * @docs-private Implemented as part of RippleTarget\n   */\n  get rippleConfig(): RippleConfig {\n    return {\n      centered: this.centered,\n      radius: this.radius,\n      color: this.color,\n      animation: {...this._globalOptions.animation, ...this.animation},\n      terminateOnPointerUp: this._globalOptions.terminateOnPointerUp,\n    };\n  }\n\n  /**\n   * Whether ripples on pointer-down are disabled or not.\n   * @docs-private Implemented as part of RippleTarget\n   */\n  get rippleDisabled(): boolean {\n    return this.disabled || !!this._globalOptions.disabled;\n  }\n\n  /** Sets up the the trigger event listeners if ripples are enabled. */\n  private _setupTriggerEventsIfEnabled() {\n    if (!this.disabled && this._isInitialized) {\n      this._rippleRenderer.setupTriggerEvents(this.trigger);\n    }\n  }\n\n  /**\n   * Launches a manual ripple using the specified ripple configuration.\n   * @param config Configuration for the manual ripple.\n   */\n  launch(config: RippleConfig): RippleRef;\n\n  /**\n   * Launches a manual ripple at the specified coordinates within the element.\n   * @param x Coordinate within the element, along the X axis at which to fade-in the ripple.\n   * @param y Coordinate within the element, along the Y axis at which to fade-in the ripple.\n   * @param config Optional ripple configuration for the manual ripple.\n   */\n  launch(x: number, y: number, config?: RippleConfig): RippleRef;\n\n  /** Launches a manual ripple at the specified coordinated or just by the ripple config. */\n  launch(configOrX: number | RippleConfig, y: number = 0, config?: RippleConfig): RippleRef {\n    if (typeof configOrX === 'number') {\n      return this._rippleRenderer.fadeInRipple(configOrX, y, {...this.rippleConfig, ...config});\n    } else {\n      return this._rippleRenderer.fadeInRipple(0, 0, {...this.rippleConfig, ...configOrX});\n    }\n  }\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {PlatformModule} from '@angular/cdk/platform';\nimport {MatCommonModule} from '../common-behaviors/common-module';\nimport {MatRipple} from './ripple';\n\nexport * from './ripple';\nexport * from './ripple-ref';\nexport * from './ripple-renderer';\n\n@NgModule({\n  imports: [MatCommonModule, PlatformModule],\n  exports: [MatRipple, MatCommonModule],\n  declarations: [MatRipple],\n})\nexport class MatRippleModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ViewEncapsulation,\n  Input,\n  ChangeDetectionStrategy,\n  Inject,\n  Optional,\n} from '@angular/core';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\n\n/**\n * Possible states for a pseudo checkbox.\n * @docs-private\n */\nexport type MatPseudoCheckboxState = 'unchecked' | 'checked' | 'indeterminate';\n\n/**\n * Component that shows a simplified checkbox without including any kind of \"real\" checkbox.\n * Meant to be used when the checkbox is purely decorative and a large number of them will be\n * included, such as for the options in a multi-select. Uses no SVGs or complex animations.\n * Note that theming is meant to be handled by the parent element, e.g.\n * `mat-primary .mat-pseudo-checkbox`.\n *\n * Note that this component will be completely invisible to screen-reader users. This is *not*\n * interchangeable with `<mat-checkbox>` and should *not* be used if the user would directly\n * interact with the checkbox. The pseudo-checkbox should only be used as an implementation detail\n * of more complex components that appropriately handle selected / checked state.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  selector: 'mat-pseudo-checkbox',\n  styleUrls: ['pseudo-checkbox.css'],\n  template: '',\n  host: {\n    'class': 'mat-pseudo-checkbox',\n    '[class.mat-pseudo-checkbox-indeterminate]': 'state === \"indeterminate\"',\n    '[class.mat-pseudo-checkbox-checked]': 'state === \"checked\"',\n    '[class.mat-pseudo-checkbox-disabled]': 'disabled',\n    '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"',\n  },\n})\nexport class MatPseudoCheckbox {\n  /** Display state of the checkbox. */\n  @Input() state: MatPseudoCheckboxState = 'unchecked';\n\n  /** Whether the checkbox is disabled. */\n  @Input() disabled: boolean = false;\n\n  constructor(@Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode?: string) { }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatPseudoCheckbox} from './pseudo-checkbox/pseudo-checkbox';\n\n\n@NgModule({\n  exports: [MatPseudoCheckbox],\n  declarations: [MatPseudoCheckbox]\n})\nexport class MatPseudoCheckboxModule { }\n\n\nexport * from './pseudo-checkbox/pseudo-checkbox';\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ChangeDetectionStrategy, Component, Input, ViewEncapsulation} from '@angular/core';\nimport {CanDisable, CanDisableCtor, mixinDisabled} from '../common-behaviors/disabled';\n\n\n// Boilerplate for applying mixins to MatOptgroup.\n/** @docs-private */\nexport class MatOptgroupBase { }\nexport const _MatOptgroupMixinBase: CanDisableCtor & typeof MatOptgroupBase =\n    mixinDisabled(MatOptgroupBase);\n\n// Counter for unique group ids.\nlet _uniqueOptgroupIdCounter = 0;\n\n/**\n * Component that is used to group instances of `mat-option`.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-optgroup',\n  exportAs: 'matOptgroup',\n  templateUrl: 'optgroup.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  inputs: ['disabled'],\n  styleUrls: ['optgroup.css'],\n  host: {\n    'class': 'mat-optgroup',\n    'role': 'group',\n    '[class.mat-optgroup-disabled]': 'disabled',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.aria-labelledby]': '_labelId',\n  }\n})\nexport class MatOptgroup extends _MatOptgroupMixinBase implements CanDisable {\n  /** Label for the option group. */\n  @Input() label: string;\n\n  /** Unique id for the underlying label. */\n  _labelId: string = `mat-optgroup-label-${_uniqueOptgroupIdCounter++}`;\n}\n"],"names":["host","class","encapsulation","ViewEncapsulation","None","changeDetection","ChangeDetectionStrategy","OnPush","type","NgZone","ChangeDetectorRef","ViewportRuler","MatTabNav","propDecorators","backgroundColor","Input","MatTabLinkBase","_MatTabLinkMixinBase","mixinTabIndex","mixinDisableRipple","mixinDisabled","_this","_super","call","this","_tabNavBar","_elementRef","_focusMonitor","_tabLinkRipple","setupTriggerEvents","nativeElement","tabIndex","parseInt","globalOptions","_ripplesGloballyDisabled","disabled","terminateOnPointerUp","animation","monitor","get","_isActive","value","updateActiveLink","enumerable","configurable","stopMonitoring","event","preventDefault","MatTabLink","decorators","Directive","args","exportAs","inputs","[attr.aria-current]","[attr.aria-disabled]","[attr.tabIndex]","[class.mat-tab-disabled]","[class.mat-tab-label-active]","(click)","Platform","undefined","Optional","Inject","MAT_RIPPLE_GLOBAL_OPTIONS","String","Attribute","FocusMonitor","NgModule","imports","CommonModule","MatCommonModule","PortalModule","MatRippleModule","ObserversModule","A11yModule","exports","MatTabGroup","MatTabLabel","MatTab","MatTabContent","declarations","MatInkBar","MatTabLabelWrapper","MatTabBody","MatTabBodyPortal","MatTabHeader","MatTabsModule","MatToolbarBase","_MatToolbarMixinBase","mixinColor","selector","MatToolbarRow","MatToolbar","elementRef","_platform","document","_document","tslib_1.__extends","prototype","ngAfterViewInit","isDevMode","isBrowser","_checkToolbarMixedModes","_toolbarRows","changes","subscribe","length","slice","childNodes","filter","node","classList","contains","nodeType","COMMENT_NODE","some","textContent","trim","throwToolbarMixedModesError","Component","template","styles","[class.mat-toolbar-multiple-rows]","[class.mat-toolbar-single-row]","DOCUMENT","MatToolbarModule","MatTreeNodeOutlet","viewContainer","ViewContainerRef","_CdkTreeNodeDef","CdkTreeNodeDef","_MatTreeNodeMixinBase","CdkTreeNode","_MatNestedTreeNodeMixinBase","CdkNestedTreeNode","MatTreeNode","_tree","role","Number","[attr.aria-expanded]","[attr.aria-level]","[attr.role]","providers","provide","useExisting","ElementRef","CdkTree","MatTreeNodeDef","data","MatNestedTreeNode","_differs","ngAfterContentInit","ngOnDestroy","IterableDiffers","nodeOutlet","ContentChildren","_CdkTreeNodePadding","CdkTreeNodePadding","MatTreeNodePadding","level","indent","_CdkTree","MatTree","_CdkTreeNodeToggle","CdkTreeNodeToggle","recursive","MatTreeNodeToggle","MAT_TREE_DIRECTIVES","CdkTreeModule","MatTreeModule","MatTreeFlattener","transformFunction","getLevel","isExpandable","getChildren","_flattenNode","resultNodes","parentMap","flatNode","push","childrenNodes","Array","isArray","_flattenChildren","pipe","take","children","forEach","child","index","childParentMap","flattenNodes","structuredData","expandFlattenedNodes","nodes","treeControl","results","currentExpand","expand","i","isExpanded","MatTreeFlatDataSource","treeFlattener","initialData","_flattenedData","BehaviorSubject","_expandedData","_data","Object","defineProperty","next","dataNodes","connect","collectionViewer","viewChange","expansionModel","onChange","merge","apply","map","disconnect","DataSource","MatTreeNestedDataSource","VERSION","Version","SELECT_PANEL_PADDING_X","CdkHeaderRow","MatHeaderRow","arguments","CdkFooterRow","MatFooterRow","MatRow","CdkRow","EXPORTED_DECLARATIONS","MatTable","MatHeaderCellDef","MatHeaderRowDef","MatColumnDef","MatCellDef","MatRowDef","MatFooterCellDef","MatFooterRowDef","MatHeaderCell","MatCell","MatFooterCell","CdkTableModule","MatTableModule","MAX_SAFE_INTEGER","MatTableDataSource","_renderData","_filter","_renderChangesSubscription","Subscription","EMPTY","sortingDataAccessor","sortHeaderId","_isNumberValue","numberValue","sortData","sort","active","direction","a","b","valueA","valueB","comparatorResult","filterPredicate","accumulator","currentTerm","key","dataStr","keys","reduce","toLowerCase","transformedFilter","indexOf","_updateChangeSubscription","_sort","_paginator","paginator","sortChange","initialized","observableOf","pageChange","page","dataStream","filteredData","combineLatest","_a","_filterData","orderedData","_orderData","paginatedData","_pageData","unsubscribe","obj","_updatePaginator","startIndex","pageIndex","pageSize","splice","filteredDataLength","Promise","resolve","then","lastPageIndex","Math","ceil","min","_MAT_INK_BAR_POSITIONER","InjectionToken","providedIn","factory","_MAT_INK_BAR_POSITIONER_FACTORY","_ngZone","_inkBarPositioner","alignToElement","element","show","requestAnimationFrame","runOutsideAngular","_setStyles","style","visibility","hide","positions","inkBar","left","width","TemplateRef","_CdkPortal","CdkPortal","MatTabBase","_MatTabMixinBase","_viewContainerRef","textLabel","_contentPortal","_stateChanges","Subject","position","origin","isActive","ngOnChanges","hasOwnProperty","complete","ngOnInit","TemplatePortal","_explicitContent","_implicitContent","ViewChild","ariaLabel","ariaLabelledby","matTabsAnimations","translateTab","trigger","state","transform","minHeight","transition","animate","componentFactoryResolver","viewContainerRef","_host","_centeringSub","_leavingSub","_beforeCentering","startWith","_isCenterPosition","_position","isCentering","hasAttached","attach","_content","_afterLeavingCenter","detach","ComponentFactoryResolver","forwardRef","CdkPortalOutlet","_dir","changeDetectorRef","_dirChangeSubscription","_onCentering","EventEmitter","_onCentered","change","dir","_computePositionAnimationState","markForCheck","_positionIndex","_computePositionFromOrigin","_onTranslateTabStarted","e","toState","emit","clientHeight","_onTranslateTabComplete","fromState","_getLayoutDirection","animations","Output","_portalHost","PortalHostDirective","MatTabLabelWrapperBase","_MatTabLabelWrapperMixinBase","focus","getOffsetLeft","offsetLeft","getOffsetWidth","offsetWidth","MatTabHeaderBase","_MatTabHeaderMixinBase","_changeDetectorRef","_viewportRuler","_scrollDistance","_selectedIndexChanged","_destroyed","_showPaginationControls","_disableScrollAfter","_disableScrollBefore","_selectedIndex","selectFocusedIndex","indexFocused","coerceNumberProperty","_keyManager","updateActiveItemIndex","ngAfterContentChecked","_tabLabelCount","_labelWrappers","_updatePagination","_scrollToLabel","_checkScrollingControls","_alignInkBarToSelectedTab","_scrollDistanceChanged","_updateTabScrollPosition","_handleKeydown","keyCode","HOME","setFirstItemActive","END","setLastItemActive","ENTER","SPACE","focusIndex","onKeydown","dirChange","resize","realign","FocusKeyManager","withHorizontalOrientation","withWrap","updateActiveItem","takeUntil","newFocusIndex","_setTabFocus","_onContentChanges","zoneCallback","run","_checkPaginationEnabled","_isValidIndex","setActiveItem","tab","toArray","containerEl","_tabListContainer","scrollLeft","scrollWidth","scrollDistance","translateX","_tabList","v","max","_getMaxScrollDistance","_scrollHeader","scrollDir","viewLength","labelIndex","selectedLabel","labelBeforePos","labelAfterPos","beforeVisiblePos","afterVisiblePos","isEnabled","selectedLabelWrapper","selectedIndex","_inkBar","[class.mat-tab-header-pagination-controls-enabled]","[class.mat-tab-header-rtl]","Directionality","nextId","MatTabChangeEvent","MatTabGroupBase","_MatTabGroupMixinBase","_indexToSelect","_tabBodyWrapperHeight","_tabsSubscription","_tabLabelSubscription","_dynamicHeight","headerPosition","selectedIndexChange","focusChange","animationDone","selectedTabChange","_groupId","coerceBooleanProperty","_backgroundColor","remove","add","indexToSelect","_clampTabIndex","isFirstRun_1","_createChangeEvent","_tabs","_subscribeToTabLabels","tabs","realignInkBar","_tabHeader","_focusChanged","_getTabLabelId","_getTabContentId","_setTabBodyWrapperHeight","tabHeight","wrapper","_tabBodyWrapper","height","offsetHeight","_removeTabBodyWrapperHeight","_handleClick","tabHeader","idx","_getTabIndex","[class.mat-tab-group-dynamic-height]","[class.mat-tab-group-inverted-header]","dynamicHeight","MatTabNavBase","_MatTabNavMixinBase","_onDestroy","_activeLinkChanged","_alignInkBar","activeTab","_tabLinks","find","_activeLinkElement","SORT_ANIMATION_TRANSITION","keyframes","allowChildren","query","animateChild","optional","sortButtonLabel","id","Injectable","MatSortHeaderIntl","MAT_SORT_HEADER_INTL_PROVIDER","deps","SkipSelf","useFactory","MAT_SORT_HEADER_INTL_PROVIDER_FACTORY","MatSortHeaderBase","_MatSortHeaderMixinBase","MatSortHeader","_intl","_cdkColumnDef","_showIndicatorHint","_arrowDirection","_disableViewStateAnimation","arrowPosition","getSortHeaderNotContainedWithinSortError","_rerenderSubscription","_isSorted","_updateArrowDirection","_viewState","_setAnimationTransitionState","_disableClear","name","register","deregister","_setIndicatorHintVisible","visible","_isDisabled","viewState","_getArrowDirectionState","_getArrowViewState","start","_getAriaSortAttribute","(mouseenter)","(longpress)","(mouseleave)","[attr.aria-sort]","[class.mat-sort-header-disabled]","matSortAnimations","indicator","leftPointer","rightPointer","arrowOpacity","MatSort","CdkColumnDef","disableClear","MatSortModule","_CdkStepLabel","CdkStepLabel","MatStepLabel","optionalLabel","MatStepperIntl","MatStepHeader","_element","_intlSubscription","_stringLabel","label","_templateLabel","_getHostElement","_getIconContext","errorMessage","iconOverrides","selected","matStepperAnimations","horizontalStepTransition","verticalStepTransition","MatStepperIcon","templateRef","_CdkStepper","CdkStepper","MatStep","stepper","_errorStateMatcher","stepperOptions","isErrorState","control","form","originalErrorState","customErrorState","invalid","interacted","ErrorStateMatcher","MAT_STEPPER_GLOBAL_OPTIONS","MatStepper","_icons","_iconOverrides","_steps","_stateChanged","MatHorizontalStepper","[class.mat-stepper-label-position-end]","[class.mat-stepper-label-position-bottom]","aria-orientation","labelPosition","MatVerticalStepper","_orientation","ctorParameters","_CdkStepperNext","CdkStepperNext","_CdkStepperPrevious","CdkStepperPrevious","MatStepperNext","[type]","MatStepperPrevious","MatButtonModule","CdkStepperModule","MatIconModule","MatStepperModule","_CdkTable","CdkTable","stickyCssClass","CDK_TABLE_TEMPLATE","_CdkCellDef","CdkCellDef","_CdkHeaderCellDef","CdkHeaderCellDef","_CdkFooterCellDef","CdkFooterCellDef","sticky","stickyEnd","columnDef","cssClassFriendlyName","CdkHeaderCell","CdkFooterCell","CdkCell","_CdkHeaderRowDef","CdkHeaderRowDef","_CdkFooterRowDef","CdkFooterRowDef","_CdkRowDef","CdkRowDef","CDK_ROW_TEMPLATE","MatSlider","_tickInterval","_value","_min","_roundToDecimal","parseFloat","toFixed","_percent","_calculatePercentage","_vertical","displayWith","_focusHostElement","blur","_blurHostElement","_clamp","vertical","invert","percent","_isMinValue","thumbLabel","axis","scale","_shouldInvertMouseCoords","_thumbGap","_getDirection","_tickIntervalPercent","tickSize","backgroundSize","sign","rotate","_invertAxis","detectChanges","_onMouseenter","_sliderDimensions","_getSliderDimensions","_updateTickIntervalPercent","_onClick","oldValue","_isSliding","_updateValueFromPosition","x","clientX","y","clientY","_emitInputEvent","_emitChangeEvent","_onSlide","_onSlideStart","center","_valueOnSlideStart","_onSlideEnd","_onFocus","_onBlur","onTouched","_onKeydown","PAGE_UP","_increment","PAGE_DOWN","LEFT_ARROW","UP_ARROW","RIGHT_ARROW","DOWN_ARROW","_onKeyup","numSteps","step","pos","offset","top","size","posComponent","exactValue","_calculateValue","closestValue","round","_controlValueAccessorChangeFn","valueChange","input","tickInterval","trackSize","pixelsPerStep","stepsPerTick","pixelsPerTick","MatSliderChange","source","percentage","_sliderWrapper","getBoundingClientRect","writeValue","registerOnChange","fn","registerOnTouched","setDisabledState","isDisabled","MAT_SLIDER_VALUE_ACCESSOR","(focus)","(blur)","(keydown)","(keyup)","(slide)","(slideend)","(slidestart)","[tabIndex]","[attr.aria-valuemax]","[attr.aria-valuemin]","[attr.aria-valuenow]","[attr.aria-orientation]","[class.mat-slider-disabled]","[class.mat-slider-has-ticks]","[class.mat-slider-horizontal]","[class.mat-slider-axis-inverted]","[class.mat-slider-sliding]","[class.mat-slider-thumb-label-showing]","[class.mat-slider-vertical]","[class.mat-slider-min-value]","[class.mat-slider-hide-last-tick]","[class._mat-animation-noopable]","ANIMATION_MODULE_TYPE","HAMMER_GESTURE_CONFIG","useClass","GestureConfig","MatSliderModule","MatSnackBarRef","containerInstance","_overlayRef","_afterDismissed","_afterOpened","_onAction","_dismissedByAction","onAction","dismiss","_onExit","_finishDismiss","closed","exit","clearTimeout","_durationTimeoutId","dismissWithAction","closeWithAction","_dismissAfter","duration","setTimeout","_open","dispose","dismissedByAction","afterDismissed","asObservable","afterOpened","_onEnter","MAT_SNACK_BAR_DATA","MatSnackBarConfig","politeness","announcementMessage","horizontalPosition","verticalPosition","SimpleSnackBar","snackBarRef","action","matSnackBarAnimations","snackBarState","opacity","MatSnackBarContainer","snackBarConfig","_animationState","attachComponentPortal","portal","_assertNotAttached","_applySnackBarClasses","_portalOutlet","attachTemplatePortal","onAnimationEnd","_completeExit","onEnter_1","enter","onMicrotaskEmpty","panelClasses","panelClass","cssClass","Error","[@state]","(@state.done)","OverlayModule","entryComponents","MatSnackBarModule","MAT_SNACK_BAR_DEFAULT_OPTIONS","MAT_SNACK_BAR_DEFAULT_OPTIONS_FACTORY","MatSnackBar","_overlay","_live","_injector","_breakpointObserver","_parentSnackBar","_defaultConfig","_snackBarRefAtThisLevel","parent","_openedSnackBarRef","openFromComponent","component","config","_attach","openFromTemplate","open","message","_config","tslib_1.__assign","_attachSnackBarContainer","overlayRef","userInjector","injector","PortalInjector","WeakMap","containerPortal","ComponentPortal","containerRef","instance","content","userConfig","_createOverlay","container","$implicit","_createInjector","contentRef","observe","Breakpoints","Handset","detachments","matches","overlayElement","_animateSnackBar","announce","overlayConfig","OverlayConfig","positionStrategy","global","isRtl","isLeft","isRight","right","centerHorizontally","bottom","create","Overlay","LiveAnnouncer","Injector","BreakpointObserver","MatSortBase","_MatSortMixinBase","mixinInitialized","sortables","Map","_direction","getSortInvalidDirectionError","sortable","getSortHeaderMissingIdError","has","getSortDuplicateSortableIdError","set","delete","getNextSortDirection","sortDirectionCycle","getSortDirectionCycle","nextDirectionIndex","_markInitialized","AnimationDurations","ENTERING","AnimationCurves","STANDARD_CURVE","_focusTrapFactory","_doc","_elementFocusedBeforeDrawerWasOpened","_mode","_disableClose","_autoFocus","openedChange","opened","_isFocusTrapEnabled","_focusTrap","_trapFocus","_restoreFocus","close","stopPropagation","MatDrawer","onPositionChanged","_modeChanged","mode","focusInitialElementWhenReady","hasMovedFocus","activeEl","activeElement","HTMLElement","focusVia","_openedVia","enabled","destroy","isOpen","openedVia","_opened","_enableAnimations","matDrawerAnimations","transformDrawer","[@transform]","(@transform.start)","(@transform.done)","[attr.align]","[class.mat-drawer-end]","[class.mat-drawer-over]","[class.mat-drawer-side]","_openedStream","openedStart","_closedStream","closedStart","_animationMode","backdropClick","_doCheckSubject","_autosize","defaultAutosize","MatDrawerContainer","_backdropOverride","_drawers","drawer","_watchDrawerToggle","_watchDrawerPosition","_watchDrawerMode","_isDrawerOpen","_start","_end","_updateContentMargins","debounceTime","ngDoCheck","_setContainerClass","throwMatDuplicatedDrawerError","_right","_left","_closeModalDrawer","disableClose","_canHaveBackdrop","_isShowingBackdrop","_width","_contentMarginChanges","_contentMargins","[class.mat-drawer-container-explicit-backdrop]","ContentChild","MatDrawerContent","_userContent","autosize","MatSidenavContent","scrollDispatcher","ngZone","[style.margin-left.px]","[style.margin-right.px]","ScrollDispatcher","MatSidenav","_fixedBottomGap","[class.mat-sidenav-fixed]","[style.top.px]","[style.bottom.px]","fixedInViewport","fixedTopGap","MatSidenavContainer","MatSidenavModule","ScrollingModule","PlatformModule","MAT_SLIDE_TOGGLE_DEFAULT_OPTIONS","disableToggleValue","disableDragValue","nextUniqueId","MAT_SLIDE_TOGGLE_VALUE_ACCESSOR","NG_VALUE_ACCESSOR","MatSlideToggle","multi","MatSlideToggleChange","checked","MatSlideToggleBase","_MatSlideToggleMixinBase","defaults","_","_uniqueId","_required","_checked","_dragging","toggleChange","dragChange","focusOrigin","_onChangeEvent","_inputElement","_onInputClick","toggle","_getDragPercentage","distance","_thumbBarWidth","_previousChecked","_onDragStart","thumbEl","_thumbEl","_thumbBarEl","clientWidth","_onDrag","_dragPercentage","deltaX","dragX","_onDragEnd","newCheckedValue","_onLabelTextChange","[id]","[attr.tabindex]","[class.mat-checked]","[class.mat-disabled]","[class.mat-slide-toggle-label-before]","required","MatSlideToggleModule","MatSliderBase","_MatSliderMixinBase","_invert","_max","_step","_thumbLabel","toString","split","pop","MAT_PROGRESS_BAR_LOCATION","MatProgressBar","_primaryValueBar","animationEnd","MatProgressBarModule","BASE_SIZE","MatProgressSpinnerBase","_MatProgressSpinnerMixinBase","MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS","MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS_FACTORY","INDETERMINATE_ANIMATION_TEMPLATE","MatProgressSpinner","platform","animationMode","_fallbackAnimation","_noopAnimations","_forceAnimations","_diameter","EDGE","TRIDENT","diameter","strokeWidth","animationClass","diameters","_attachStyleNode","_strokeWidth","newValue","viewBox","_circleRadius","PI","_strokeCircumference","styleTag","createElement","head","appendChild","sheet","insertRule","_getAnimationText","replace","Set","[style.width.px]","[style.height.px]","[attr.mode]","MatSpinner","MatProgressSpinnerModule","MAT_RADIO_GROUP_CONTROL_VALUE_ACCESSOR","MatRadioGroup","MatRadioChange","MatRadioGroupBase","_MatRadioGroupMixinBase","_changeDetector","_name","_selected","_isInitialized","_labelPosition","_disabled","_updateRadioButtonNames","_markRadiosForCheck","_updateSelectedRadioFromValue","_checkSelectedRadioButton","_touch","_radios","radio","isAlreadySelected","_markForCheck","MatRadioButton","descendants","MatRadioButtonBase","_MatRadioButtonMixinBase","radioGroup","_radioDispatcher","_removeUniqueSelectionListener","listen","newCheckedState","notify","newDisabledState","_isRippleDisabled","disableRipple","_onInputChange","groupValueChanged","[class.mat-radio-checked]","[class.mat-radio-disabled]","[attr.id]","UniqueSelectionDispatcher","ariaDescribedby","MatRadioModule","box-shadow","MAT_DRAWER_DEFAULT_AUTOSIZE","MAT_DRAWER_DEFAULT_AUTOSIZE_FACTORY","_container","selectedOptionOffset","_countGroupLabelsBeforeOption","options","optionGroups","scrollBuffer","panelHeight","_scrollTop","_calculateOverlayScroll","maxScroll","_offsetY","_calculateOverlayOffsetY","_checkOverlayWithinViewport","MatSelect","itemHeight","_getItemHeight","optionOffsetFromScrollTop","halfOptionHeight","optimalScrollPosition","_getAriaLabel","placeholder","_getAriaLabelledby","_parentFormField","_hasFloatingLabel","_labelId","_getAriaActiveDescendant","panelOpen","activeItem","_calculateOverlayOffsetX","offsetX","overlayRect","overlayDir","viewportSize","getViewportSize","_isRtl","paddingWidth","multiple","SELECT_MULTIPLE_PANEL_PADDING_X","_selectionModel","first","group","leftOverflow","rightOverflow","updatePosition","optionOffsetFromPanelTop","optionHeightAdjustment","_triggerRect","maxOptionsDisplayed","floor","_disableOptionCentering","firstDisplayedIndex","_getItemCount","selectedDisplayIndex","partialItemHeight","topSpaceAvailable","bottomSpaceAvailable","panelHeightTop","abs","totalPanelHeight","panelHeightBottom","_adjustPanelUp","_adjustPanelDown","_transformOrigin","_getOriginBasedOnOption","distanceBelowViewport","distanceAboveViewport","_triggerFontSize","setDescribedByIds","ids","_ariaDescribedby","join","onContainerClick","_panelOpen","empty","[attr.aria-label]","[attr.aria-labelledby]","[attr.aria-required]","[attr.aria-invalid]","[attr.aria-owns]","[attr.aria-multiselectable]","[attr.aria-describedby]","[attr.aria-activedescendant]","[class.mat-select-disabled]","[class.mat-select-invalid]","[class.mat-select-required]","[class.mat-select-empty]","matSelectAnimations","transformPanel","MatFormFieldControl","MAT_OPTION_PARENT_COMPONENT","NgForm","FormGroupDirective","MatFormField","NgControl","Self","MAT_SELECT_SCROLL_STRATEGY","CdkConnectedOverlay","MatOption","MatOptgroup","customTrigger","MatSelectTrigger","disableOptionCentering","compareWith","errorStateMatcher","sortComparator","selectionChange","MatOptionModule","MatFormFieldModule","MAT_SELECT_SCROLL_STRATEGY_PROVIDER","MatSelectModule","matTooltipAnimations","tooltipState","SCROLL_THROTTLE_MS","MAT_TOOLTIP_SCROLL_STRATEGY","MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY_PROVIDER","MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY","MAT_TOOLTIP_DEFAULT_OPTIONS","MAT_TOOLTIP_DEFAULT_OPTIONS_FACTORY","MatTooltip","_scrollDispatcher","_ariaDescriber","_scrollStrategy","_defaultOptions","showDelay","hideDelay","_message","_manualListeners","IOS","ANDROID","listener","addEventListener","nodeName","webkitUserSelect","userSelect","msUserSelect","draggable","_updatePosition","_tooltipInstance","removeDescription","_isTooltipVisible","_updateTooltipMessage","describe","_tooltipClass","_setTooltipClass","removeEventListener","clear","delay","_showTimeoutId","_hideTimeoutId","_detach","_portal","TooltipComponent","afterHidden","isVisible","ESCAPE","_handleTouchend","touchendHideDelay","strategy","flexibleConnectedTo","withTransformOriginOn","withFlexibleDimensions","withViewportMargin","scrollableAncestors","getAncestorScrollContainers","withScrollableContainers","positionChanges","scrollableViewProperties","isOverlayClipped","scrollStrategy","getConfig","_getOrigin","overlay","_getOverlayPosition","withPositions","main","fallback","originPosition","isLtr","originX","originY","getMatTooltipInvalidPositionError","_invertPosition","overlayPosition","overlayX","overlayY","tooltipClass","(touchend)","AriaDescriber","_visibility","_closeOnInteraction","_onHide","_isHandset","_animationStart","_animationDone","_handleBodyInteraction","aria-hidden","MatTooltipModule","itemsPerPageLabel","nextPageLabel","previousPageLabel","firstPageLabel","lastPageLabel","getRangeLabel","MatPaginatorIntl","MAT_PAGINATOR_INTL_PROVIDER","MAT_PAGINATOR_INTL_PROVIDER_FACTORY","PageEvent","MatPaginatorBase","_MatPaginatorBase","MatPaginator","_pageIndex","_length","_pageSizeOptions","_hidePageSize","_showFirstLastButtons","_intlChanges","_pageSize","_updateDisplayedPageSizeOptions","p","_initialized","nextPage","hasNextPage","previousPageIndex","_emitPageEvent","previousPage","hasPreviousPage","firstPage","lastPage","getNumberOfPages","maxPageIndex","_changePageSize","pageSizeOptions","_displayedPageSizeOptions","hidePageSize","showFirstLastButtons","MatPaginatorModule","MatProgressBarBase","_MatProgressBarMixinBase","MAT_PROGRESS_BAR_LOCATION_FACTORY","progressbarId","location","_isNoopAnimation","_bufferValue","_animationEndSubscription","path","pathname","_rectangleFillValue","clamp","emitAnimationEnd","_primaryTransform","_bufferTransform","bufferValue","fromEvent","target","aria-valuemin","aria-valuemax","_attached","MatMenuContent","context","_template","_outlet","DomPortalOutlet","_componentFactoryResolver","_appRef","insertBefore","outletElement","isAttached","ApplicationRef","matMenuAnimations","transformMenu","fadeInItems","MAT_MENU_PANEL","MatMenuItemBase","_MatMenuItemMixinBase","MatMenuItem","_parentMenu","_hovered","_highlighted","_triggersSubmenu","addItem","removeItem","_checkDisabled","_handleMouseEnter","getLabel","textNodeType","TEXT_NODE","output","length_1","[class.mat-menu-item-highlighted]","[class.mat-menu-item-submenu-trigger]","[attr.disabled]","MAT_MENU_DEFAULT_OPTIONS","MAT_MENU_DEFAULT_OPTIONS_FACTORY","MatMenu","_xPosition","xPosition","_yPosition","yPosition","_items","_itemChanges","_tabSubscription","_classList","_panelAnimationState","backdropClass","_overlapTrigger","overlapTrigger","_hasBackdrop","hasBackdrop","throwMatMenuInvalidPositionX","setPositionClasses","throwMatMenuInvalidPositionY","classes","className","withTypeAhead","tabOut","switchMap","items","item","parentMenu","setFocusOrigin","focusFirstItem","lazyContent","onStable","resetActiveItem","setElevation","depth","newElevation","customElevation","c","startsWith","_previousElevation","posX","posY","_startAnimation","_resetAnimation","_onAnimationDone","_isAnimating","activeItemIndex","scrollTop","MAT_MENU_SCROLL_STRATEGY","MAT_MENU_SCROLL_STRATEGY_FACTORY_PROVIDER","MAT_MENU_SCROLL_STRATEGY_FACTORY","MatMenuTrigger","_menuItemInstance","_menuOpen","_closeSubscription","_hoverSubscription","_openedByMouse","menuOpened","onMenuOpen","menuClosed","onMenuClose","triggersSubmenu","menu","_checkMenu","reason","_destroyMenu","_handleHover","_cleanUpSubscriptions","toggleMenu","closeMenu","openMenu","_setPosition","menuData","_menuClosingActions","_initMenu","menuOpen","_resetMenu","_setMenuElevation","_setIsMenuOpen","throwMatMenuMissingError","_getOverlayConfig","_subscribeToPositions","withLockedPosition","connectionPair","originFallbackX","_b","overlayFallbackY","_c","originFallbackY","_d","overlayFallbackX","offsetY","backdrop","parentClose","hover","_handleMousedown","isFakeMousedownFromScreenReader","button","asapScheduler","aria-haspopup","(mousedown)","_deprecatedMatMenuTriggerFor","MatMenuModule","minWidth","fadeInContent","MAT_SELECT_SCROLL_STRATEGY_PROVIDER_FACTORY","MatSelectChange","MatSelectBase","_defaultErrorStateMatcher","_parentForm","_parentFormGroup","ngControl","_MatSelectMixinBase","mixinErrorState","_scrollStrategyFactory","_multiple","_compareWith","o1","o2","_uid","_destroy","_onChange","_onTouched","_optionIds","_panelDoneAnimatingStream","_positions","_focused","controlType","optionSelectionChanges","defer","option","onSelectionChange","o","valueAccessor","_placeholder","stateChanges","getMatSelectDynamicMultipleError","getMatSelectNonFunctionValueError","_initializeSelection","_id","SelectionModel","distinctUntilChanged","_initKeyManager","added","select","removed","deselect","_resetOptions","updateErrorState","getComputedStyle","_calculateOverlayPosition","_highlightCorrectOption","fontSize","_setSelectionByValue","selectedOptions","viewValue","reverse","_handleOpenKeydown","_handleClosedKeydown","isArrowKey","isOpenKey","manager","altKey","A","ctrlKey","hasDeselectedOptions_1","opt","previouslyFocusedIndex","shiftKey","_selectViaInteraction","_onAttached","positionChange","_setPseudoCheckboxPaddingSize","panel","_getPanelTheme","color","pseudoCheckbox","querySelector","isEmpty","getMatSelectNonArrayValueError","currentValue","_selectValue","_sortValues","correspondingOption","error","console","warn","ActiveDescendantKeyManager","withVerticalOrientation","_scrollActiveOptionIntoView","changedOrDestroyed","_onSelect","isUserInput","_setOptionIds","wasSelected","isSelected","_propagateChanges","options_1","fallbackValue","valueToEmit","activeOptionIndex","labelCount","_getOptionScrollPosition","_getOptionIndex","result","current","scrollContainerHeight","MAT_SELECTION_LIST_VALUE_ACCESSOR","MatSelectionList","MatListOption","_MatSelectionListMixinBase","MatLineModule","MatPseudoCheckboxModule","MatList","MatNavList","MatListItem","MatListAvatarCssMatStyler","MatListIconCssMatStyler","MatListSubheaderCssMatStyler","MatDividerModule","MatListModule","[class.mat-list-item-avatar]","[class.mat-list-item-with-avatar]","_icon","MatSelectionListBase","MatListOptionBase","_MatListOptionMixinBase","MatSelectionListChange","selectionList","checkboxPosition","_setSelected","_reportValueChange","MatLineSetter","_lines","_removeOptionFromList","_text","_handleFocus","_setFocusedOption","_handleBlur","tabindex","[class.mat-list-item-disabled]","[attr.aria-selected]","MatLine","skipPredicate","_tempValues","_setOptionsFromValues","_modelChanges","_i","optionIndex","setNextItemActive","previousFocusIndex","_toggleFocusedOption","selectAll","deselectAll","_getSelectedOptionValues","values","focusedOption","focusedIndex","hasChanged","aria-multiselectable","_MatListMixinBase","_navList","_isNavList","hasAttribute","MatGridTile","MatGridTileText","MatGridAvatarCssMatStyler","MatGridTileHeaderCssMatStyler","MatGridTileFooterCssMatStyler","TileCoordinator","columnIndex","rowIndex","lastRowMax","tracker","rowCount","update","numColumns","tiles","fill","tile","_trackTile","gapStartIndex","_findMatchingGap","colspan","_markTilePosition","TilePosition","tileCols","gapEndIndex","_nextRow","_findGapEndIndex","rowspan","row","col","cssCalcAllowedValue","TileStyler","_rows","_rowspan","init","gutterSize","cols","_gutterSize","normalizeUnits","_cols","getBaseTileSize","sizePercent","gutterFraction","getTilePosition","baseSize","calc","getTileSize","span","setStyle","colIndex","percentWidthPerTile","gutterWidthFractionPerTile","setColStyles","setRowStyles","percentWidth","gutterWidth","baseTileWidth","side","_setStyle","getGutterSpan","getTileSpan","tileHeight","getComputedHeight","FixedTileStyler","fixedRowHeight","test","reset","list","_setListStyle","_tiles","RatioTileStyler","_parseRatio","percentHeightPerTile","rowHeightRatio","baseTileHeight","ratioParts","FitTileStyler","gutterHeightPerTile","MatGridList","_gutter","_rowHeight","_setTileStyler","_checkCols","_checkRowHeight","_layoutTiles","rowHeight","_tileStyler","_tileCoordinator","_gridList","MAT_GRID_LIST","MatGridListModule","SvgIconConfig","svgElement","url","MatIconRegistry","_httpClient","_sanitizer","_svgIconConfigs","_iconSetConfigs","_cachedIconsByUrl","_inProgressUrlFetches","_fontCssClassesByAlias","_defaultFontSetClass","addSvgIcon","iconName","addSvgIconInNamespace","addSvgIconLiteral","literal","addSvgIconLiteralInNamespace","namespace","_addSvgIconConfig","sanitizedLiteral","sanitize","SecurityContext","HTML","getMatIconFailedToSanitizeLiteralError","_createSvgElementForSingleIcon","addSvgIconSet","addSvgIconSetInNamespace","addSvgIconSetLiteral","addSvgIconSetLiteralInNamespace","_addSvgIconSetConfig","_svgElementFromString","registerFontClassAlias","alias","classNameForFontAlias","setDefaultFontSetClass","getDefaultFontSetClass","getSvgIconFromUrl","safeUrl","RESOURCE_URL","getMatIconFailedToSanitizeUrlError","cachedIcon","cloneSvg","_loadSvgIconFromConfig","tap","svg","getNamedSvgIcon","iconKey","_getSvgFromConfig","iconSetConfigs","_getSvgFromIconSetConfigs","observableThrow","getMatIconNameNotFoundError","namedIcon","_extractIconWithNameFromAnySet","iconSetFetchRequests","iconSetConfig","_loadSvgIconSetFromConfig","catchError","err","forkJoin","foundIcon","_extractSvgIconFromSet","_fetchUrl","svgText","responseText","_setSvgAttributes","iconSet","iconSource","iconElement","cloneNode","removeAttribute","_toSvgElement","str","div","innerHTML","ELEMENT_NODE","setAttribute","getMatIconNoHttpProviderError","inProgressFetch","req","responseType","finalize","share","configNamespace","HttpClient","DomSanitizer","ICON_REGISTRY_PROVIDER","ICON_REGISTRY_PROVIDER_FACTORY","MatIconBase","_MatIconMixinBase","MatIcon","_iconRegistry","ariaHidden","_inline","inline","_fontSet","_cleanupFontValue","_fontIcon","_splitIconName","parts","svgIcon","_setSvgElement","log","_clearSvgElement","_usingFontIcon","_updateFontIconClasses","styleTags","querySelectorAll","layoutElement","childCount","removeChild","elem","fontSetClass","fontSet","_previousFontSetClass","fontIcon","_previousFontIconClass","[class.mat-icon-inline]","MatListBase","MatListItemBase","_MatListItemMixinBase","_dateAdapter","createMissingDateImplError","MatDatepicker","_datepickerInput","_getThemePalette","_disabledChange","_inputSubscription","_popupRef","_popupComponentRef","sameDate","_selectedChanged","date","_valueChange","_focusedElementBeforeOpen","touchUi","_openAsDialog","_openAsPopup","openedStream","_dialogRef","_calendarPortal","completeClose","closedStream","_dialog","MatDatepickerContent","afterClosed","componentInstance","datepicker","_setColor","_createPopup","keydownEvents","MatDialog","MAT_DATEPICKER_SCROLL_STRATEGY","DateAdapter","calendarHeaderComponent","startAt","yearSelected","monthSelected","MAT_DATEPICKER_VALUE_ACCESSOR","MatDatepickerInput","MAT_DATEPICKER_VALIDATORS","NG_VALIDATORS","MatDatepickerInputEvent","targetElement","_dateFormats","_formField","dateChange","dateInput","_cvaOnChange","_validatorOnChange","_datepickerSubscription","_localeSubscription","_parseValidator","_lastValueValid","matDatepickerParse","text","_minValidator","controlValue","_getValidDateOrNull","deserialize","compareDate","matDatepickerMin","actual","_maxValidator","matDatepickerMax","_filterValidator","_dateFilter","matDatepickerFilter","_validator","Validators","compose","localeChanges","_datepicker","_registerInput","isValid","oldDate","_formatValue","registerOnValidatorChange","validate","getPopupConnectionElementRef","getConnectedOverlayOrigin","isAltDownArrow","readOnly","_onInput","parse","format","display","isDateInstance","MAT_INPUT_VALUE_ACCESSOR","[attr.aria-haspopup]","[attr.min]","[attr.max]","[disabled]","(input)","(change)","MAT_DATE_FORMATS","matDatepicker","MatDatepickerToggleIcon","MatDatepickerToggle","defaultTabIndex","parsedTabIndex","_watchStateChanges","datepickerDisabled","inputDisabled","datepickerToggled","[class.mat-accent]","[class.mat-warn]","_customIcon","MatDialogModule","MatCalendar","MatCalendarBody","MatMonthView","MatYearView","MatMultiYearView","MatCalendarHeader","MatDatepickerIntl","MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY_PROVIDER","MatDatepickerModule","_inset","MatDivider","[class.mat-divider-vertical]","[class.mat-divider-horizontal]","[class.mat-divider-inset]","MAT_ACCORDION","matExpansionAnimations","indicatorRotate","expansionHeaderHeight","params","collapsedHeight","expandedHeight","bodyExpansion","MatExpansionPanelContent","_CdkAccordionItem","CdkAccordionItem","uniqueId","MatExpansionPanel","accordion","_uniqueSelectionDispatcher","_hideToggle","afterExpand","afterCollapse","_inputChanges","_headerId","hideToggle","_hasSpacing","expanded","displayMode","_getExpandedState","_lazyContent","_bodyAnimation","phaseName","_containsFocus","_body","focusedElement","bodyElement","outputs","[class.mat-expanded]","[class.mat-expansion-panel-spacing]","MatExpansionPanelActionRow","MatExpansionPanelHeader","_parentChangeSubscription","accordionHideToggleChange","_handleHeaderFocus","_toggle","_isExpanded","_getPanelId","_showToggle","_keydown","_handleHeaderKeydown","[attr.aria-controls]","[@expansionHeight]","MatExpansionPanelDescription","MatExpansionPanelTitle","MatAccordion","_headers","header","CdkAccordion","CdkAccordionModule","MatExpansionModule","_colspan","property","todayValue","selectedValue","labelMinRequiredCells","numCols","allowDisabledSelection","activeCell","cellAspectRatio","selectedValueChange","selectedChange","_userSelection","activeDateChange","firstDayOfWeek","getFirstDayOfWeek","narrowWeekdays","getDayOfWeekNames","longWeekdays","weekdays","long","narrow","_weekdays","concat","_activeDate","today","oldActiveDate","validDate","clampDate","minDate","maxDate","_hasSameMonthAndYear","_init","_selectedDate","_getDateInCurrentMonth","_minDate","_maxDate","_dateSelected","selectedYear","getYear","activeDate","selectedMonth","getMonth","selectedDate","createDate","_handleCalendarBodyKeydown","addCalendarDays","getDate","getNumDaysInMonth","addCalendarYears","addCalendarMonths","dateFilter","_focusActiveCell","_todayDate","_monthLabel","getMonthNames","toLocaleUpperCase","firstOfMonth","_firstWeekOffset","getDayOfWeek","_createWeekCells","_matCalendarBody","daysInMonth","dateNames","getDateNames","_weeks","cell","_shouldEnableDate","dateA11yLabel","MatCalendarCell","d1","d2","_selectedYear","_todayYear","activeYear","activeOffset","_years","year","_createCellForYear","_yearSelected","month","yearsPerPage","_getActiveCell","yearName","getYearName","_shouldEnableYear","firstOfYear","_selectedMonth","_getMonthInCurrentYear","_monthSelected","normalizedDate","_todayMonth","_yearLabel","monthNames","_months","_createCellForMonth","monthName","monthYearA11yLabel","_shouldEnableMonth","_isYearAndMonthAfterMaxDate","_isYearAndMonthBeforeMinDate","maxYear","maxMonth","minYear","minMonth","calendar","currentView","monthYearLabel","switchToMultiYearViewLabel","switchToMonthViewLabel","prevMonthLabel","prevYearLabel","multi-year","prevMultiYearLabel","nextMonthLabel","nextYearLabel","nextMultiYearLabel","currentPeriodClicked","previousClicked","nextClicked","previousEnabled","_isSameView","nextEnabled","date1","date2","_moveFocusOnNextTick","_currentView","startView","focusActiveCell","view","_getCurrentViewComponent","monthView","headerComponent","yearView","multiYearView","matDatepickerAnimations","fadeInCalendar","datepickerUid","MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY","MatDatepickerContentBase","_MatDatepickerContentMixinBase","_calendar","[@transformPanel]","[class.mat-datepicker-content-touch]","MatChipList","ariaOrientation","selectable","chips","MatChip","MatChipInput","focused","_addOnBlur","separatorKeyCodes","chipEnd","_chipList","registerInput","_emitChipEnd","_blur","addOnBlur","_focus","_isSeparatorKey","separators","[attr.placeholder]","MAT_CHIPS_DEFAULT_OPTIONS","chipList","CHIP_DECLARATIONS","MatChipRemove","MatChipAvatar","MatChipTrailingIcon","ɵ0","useValue","MatChipsModule","MatDialogConfig","maxWidth","ariaDescribedBy","autoFocus","restoreFocus","closeOnNavigation","animationBody","matDialogAnimations","dialogContainer","slideDialog","MatDialogContainer","_elementFocusedBeforeDialogWasOpened","_state","_animationStateChanged","_ariaLabelledBy","throwMatDialogContentAlreadyAttachedError","_savePreviouslyFocusedElement","toFocus","_onAnimationStart","_startExitAnimation","aria-modal","[@dialogContainer]","(@dialogContainer.start)","(@dialogContainer.done)","MatDialogRef","_containerInstance","_location","_afterClosed","_beforeClosed","_result","dialogResult","detachBackdrop","beforeClosed","_getPositionStrategy","centerVertically","updateSize","afterOpen","beforeClose","MAT_DIALOG_DATA","MAT_DIALOG_DEFAULT_OPTIONS","MAT_DIALOG_SCROLL_STRATEGY","MAT_DIALOG_SCROLL_STRATEGY_PROVIDER","MAT_DIALOG_SCROLL_STRATEGY_PROVIDER_FACTORY","_parentDialog","_overlayContainer","_openDialogsAtThisLevel","_afterAllClosedAtThisLevel","_afterOpenedAtThisLevel","_ariaHiddenElements","afterAllClosed","openDialogs","_afterAllClosed","componentOrTemplateRef","_applyConfigDefaults","getDialogById","_attachDialogContainer","dialogRef","_attachDialogContent","_hideNonDialogContentFromAssistiveTechnology","_removeOpenDialog","closeAll","_closeDialogs","dialog","dialogConfig","maxHeight","disposeOnNavigation","injectionTokens","previousValue","overlayContainer","getContainerElement","parentElement","siblings","sibling","getAttribute","dialogs","Location","OverlayContainer","dialogElementUid","MatDialogClose","getClosestDialog","proxiedChange","_matDialogClose","MatDialogTitle","MatDialogContent","MatDialogActions","_CdkTextareaAutosize","CdkTextareaAutosize","MatTextareaAutosize","minRows","maxRows","rows","matAutosizeMinRows","matAutosizeMaxRows","matAutosize","matTextareaAutosize","MAT_INPUT_INVALID_TYPES","MatInputBase","_MatInputMixinBase","MatInput","inputValueAccessor","_autofillMonitor","_isServer","_isNativeSelect","autofilled","_type","_readonly","_neverEmptyInputTypes","t","getSupportedInputTypes","_inputValueAccessor","_previousNativeValue","el","selectionStart","selectionEnd","setSelectionRange","_validateType","_isTextarea","isAutofilled","_dirtyCheckNativeValue","isFocused","readonly","getMatInputUnsupportedTypeError","_isNeverEmpty","_isBadInput","validity","badInput","selectElement","[class.mat-input-server]","[required]","[attr.readonly]","AutofillMonitor","TextFieldModule","MatInputModule","calendarLabel","openCalendarLabel","displayValue","_cellClicked","_isActiveCell","cellNumber","_firstRowOffset","aria-readonly","_clickAction","indeterminateChange","_currentAnimationClass","_currentCheckState","TransitionCheckState","Init","_indeterminate","MatCheckbox","ngAfterViewChecked","_calculateRippleRadius","changed","_transitionCheckState","Indeterminate","Checked","Unchecked","_getAriaChecked","indeterminate","newState","oldState","_getAnimationClassForCheckStateTransition","animationClass_1","MatCheckboxChange","_onInteractionEvent","animSuffix","calculatedRippleRadius","rippleWidth","ripple","radius","[class.mat-checkbox-indeterminate]","[class.mat-checkbox-checked]","[class.mat-checkbox-disabled]","[class.mat-checkbox-label-before]","MAT_CHECKBOX_CONTROL_VALUE_ACCESSOR","MAT_CHECKBOX_CLICK_ACTION","MatRipple","MAT_CHECKBOX_REQUIRED_VALIDATOR","MatCheckboxRequiredValidator","[attr.required]","CheckboxRequiredValidator","MatCheckboxModule","MatChipSelectionChange","MatChipBase","_MatChipMixinBase","CHIP_ATTRIBUTE_NAMES","rippleConfig","_hasFocus","chipListSelectable","_selectable","_removable","destroyed","_addHostClassName","_chipRipple","RippleRenderer","coercedValue","_dispatchSelectionChange","CHIP_ATTRIBUTE_NAMES_1","attr","tagName","chip","_removeTriggerEvents","selectViaInteraction","toggleSelected","removable","DELETE","BACKSPACE","[class.mat-chip-selected]","[class.mat-chip-with-avatar]","[class.mat-chip-with-trailing-icon]","[class.mat-chip-disabled]","avatar","trailingIcon","removeIcon","_parentChip","MatChipListBase","_MatChipListMixinBase","MatChipListChange","_lastDestroyedChipIndex","_tabIndex","_userTabIndex","_chipInput","_hasFocusedChip","_resetChips","_updateTabIndex","_updateFocusForDestroyedChips","_dropSubscriptions","inputElement","_originatesFromChip","_focusInput","_isInputEmpty","newChipIndex","_clearSelection","correspondingChip","skip","_markAsTouched","_listenToChipsFocus","_listenToChipsSelection","_listenToChipsRemoved","_chipFocusSubscription","_chipBlurSubscription","_chipSelectionSubscription","_chipRemoveSubscription","chipSelectionChanges","chipFocusChanges","chipIndex","chipBlurChanges","chipRemoveChanges","currentElement","[class.mat-chip-list-disabled]","[class.mat-chip-list-invalid]","[class.mat-chip-list-required]","MatButton","stopImmediatePropagation","MatAnchor","MAT_BUTTON_TOGGLE_DEFAULT_OPTIONS","MAT_BUTTON_TOGGLE_GROUP_VALUE_ACCESSOR","MatButtonToggleGroup","MatButtonToggleGroupMultiple","_uniqueIdCounter","MatButtonToggleChange","defaultOptions","appearance","_buttonToggles","_syncButtonToggle","_isSelected","_isPrechecked","_rawValue","[class.mat-button-toggle-vertical]","[class.mat-button-toggle-group-appearance-standard]","MatButtonToggle","MatButtonToggleBase","_MatButtonToggleMixinBase","toggleGroup","_isSingleSelector","buttonToggleGroup","_appearance","_buttonElement","_onButtonClick","newChecked","[class.mat-button-toggle-standalone]","[class.mat-button-toggle-checked]","[class.mat-button-toggle-disabled]","[class.mat-button-toggle-appearance-standard]","MatButtonToggleModule","MatCardContent","MatCardTitle","MatCardSubtitle","align","[class.mat-card-actions-align-end]","MatCardActions","MatCardFooter","MatCardImage","MatCardSmImage","MatCardMdImage","MatCardLgImage","MatCardXlImage","MatCardAvatar","MatCard","MatCardHeader","MatCardTitleGroup","MatCardModule","MatCheckboxBase","_MatCheckboxMixinBase","MatAutocomplete","_autoActiveFirstOption","_setVisibility","_setScrollTop","_getScrollTop","showPanel","_emitSelectEvent","MatAutocompleteSelectedEvent","optionSelected","MAT_AUTOCOMPLETE_DEFAULT_OPTIONS","autoActiveFirstOption","panelWidth","MatAutocompleteOrigin","MAT_AUTOCOMPLETE_SCROLL_STRATEGY","MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY_PROVIDER","MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY","MAT_AUTOCOMPLETE_VALUE_ACCESSOR","MatAutocompleteTrigger","_zone","_componentDestroyed","_autocompleteDisabled","_manuallyFloatingLabel","_viewportSubscription","_canOpenOnNextFocus","_closeKeyEventStream","_windowBlurHandler","autocompleteAttribute","_overlayAttached","optionSelections","autocomplete","window","_destroyPanel","openPanel","_attachOverlay","_floatLabel","closePanel","_resetLabel","_isOpen","_closingActionsSubscription","_getOutsideClickStream","MatOptionSelectionChange","clickTarget","formField","_setTriggerValue","activeOption","_resetActiveItem","prevActiveItem","TAB","_canOpen","_scrollToOption","_handleInput","_previousValue","shouldAnimate","floatLabel","_animateAndLockLabel","newScrollPosition","_subscribeToClosingActions","firstStable","optionChanges","_positionStrategy","reapplyLastPosition","panelClosingActions","_setValueAndClose","toDisplay","inputValue","_control","_clearPreviousSelectedOption","getMatAutocompleteMissingPanelError","_getPanelWidth","wasOpen","_getConnectedElement","withPush","connectedTo","_getHostWidth","[attr.autocomplete]","[attr.aria-autocomplete]","(focusin)","Host","autocompleteDisabled","MatAutocompleteModule","MatBadgeBase","_MatBadgeMixinBase","MatBadge","_renderer","_hasContent","_color","_overlap","val","_updateTextContent","_description","newDescription","_updateHostAriaDescription","_hidden","isAbove","isAfter","description","_badgeElement","_createBadgeElement","rootNode","badgeElement","oldDescription","colorPalette","[class.mat-badge-overlap]","[class.mat-badge-above]","[class.mat-badge-below]","[class.mat-badge-before]","[class.mat-badge-after]","[class.mat-badge-small]","[class.mat-badge-medium]","[class.mat-badge-large]","[class.mat-badge-hidden]","[class.mat-badge-disabled]","Renderer2","overlap","hidden","MatBadgeModule","MAT_BOTTOM_SHEET_DATA","MatBottomSheetConfig","matBottomSheetAnimations","bottomSheetState","COMPLEX","ACCELERATION_CURVE","EXITING","DECELERATION_CURVE","MatBottomSheetContainer","breakpointObserver","bottomSheetConfig","_elementFocusedBeforeOpened","_breakpointSubscription","Medium","Large","XLarge","_toggleClass","isMatched","_validatePortalAttached","_setPanelClass","(@state.start)","FocusTrapFactory","MatBottomSheetModule","MatBottomSheetRef","MAT_BOTTOM_SHEET_DEFAULT_OPTIONS","MatBottomSheet","_parentBottomSheet","_bottomSheetRefAtThisLevel","_openedBottomSheetRef","_attachContainer","ref","bottomSheetRef","scrollStrategies","block","DEFAULT_ROUND_BUTTON_COLOR","BUTTON_HOST_ATTRIBUTES","MatButtonBase","_MatButtonMixinBase","isRoundButton","_hasHostAttributes","isIconButton","BUTTON_HOST_ATTRIBUTES_1","attributes","attribute","_parent","_active","_emitSelectionChangeEvent","setActiveStyles","setInactiveStyles","_mostRecentViewValue","[class.mat-selected]","[class.mat-option-multiple]","[class.mat-active]","[class.mat-option-disabled]","MAT_LABEL_GLOBAL_OPTIONS","MatError","matFormFieldAnimations","transitionMessages","[class.mat-right]","MatHint","MatLabel","MatPlaceholder","MatPrefix","MatSuffix","MatFormFieldBase","_MatFormFieldMixinBase","MAT_FORM_FIELD_DEFAULT_OPTIONS","labelOptions","_defaults","_outlineGapCalculationNeeded","_showAlwaysAnimate","_subscriptAnimationState","_hintLabel","_hintLabelId","_labelOptions","float","_animationsEnabled","updateOutlineGap","_hideRequiredMarker","_processHints","_connectionContainerRef","_validateControlChild","_validatePlaceholders","_syncDescribedByIds","valueChanges","_prefixChildren","_suffixChildren","_hintChildren","_errorChildren","_shouldForward","prop","_hasPlaceholder","_placeholderChild","_hasLabel","_labelChild","_shouldLabelFloat","_canLabelFloat","shouldLabelFloat","_shouldAlwaysFloat","_hideControlPlaceholder","_getDisplayedMessages","errorState","_label","getMatFormFieldPlaceholderConflictError","_validateHints","startHint_1","endHint_1","hint","hintLabel","getMatFormFieldDuplicatedHintError","startHint","endHint","getMatFormFieldMissingControlError","labelEl","startWidth","gapWidth","startEls","gapEls","containerStart","_getStartEnd","labelStart","labelWidth","outlineGapPadding","rect","[class.mat-form-field-appearance-standard]","[class.mat-form-field-appearance-fill]","[class.mat-form-field-appearance-outline]","[class.mat-form-field-appearance-legacy]","[class.mat-form-field-invalid]","[class.mat-form-field-can-float]","[class.mat-form-field-should-float]","[class.mat-form-field-hide-placeholder]","[class.mat-form-field-disabled]","[class.mat-form-field-autofilled]","[class.mat-focused]","[class.ng-untouched]","[class.ng-touched]","[class.ng-pristine]","[class.ng-dirty]","[class.ng-valid]","[class.ng-invalid]","[class.ng-pending]","hideRequiredMarker","underlineRef","_inputContainerRef","_uniqueAutocompleteIdCounter","MatAutocompleteBase","_MatAutocompleteMixinBase","MAT_AUTOCOMPLETE_DEFAULT_OPTIONS_FACTORY","__extends","d","__","constructor","extendStatics","MATERIAL_SANITY_CHECKS_FACTORY","base","class_1","defaultColor","_disableRipple","matcher","_pendingSubscribers","Observable","subscriber","_notifySubscriber","MAT_DATE_LOCALE_FACTORY","inject","LOCALE_ID","range","valueFunction","valuesArray","enforceStyleRecalculation","getPropertyValue","distanceToFurthestCorner","distX","distY","sqrt","optionsArray","groups","groupCounter","optionOffset","optionHeight","currentScrollPosition","reposition","MAT_DIALOG_SCROLL_STRATEGY_FACTORY","provider","exp","match","parentRegistry","httpClient","sanitizer","scrollThrottle","parentIntl","sortOrder","setPrototypeOf","__proto__","__assign","assign","s","n","SHARP_CURVE","MATERIAL_SANITY_CHECKS","_sanityChecksEnabled","_hammerLoader","_hasDoneGlobalChecks","_hasCheckedHammer","_window","_areChecksEnabled","_checkDoctypeIsDefined","_checkThemeIsPresent","_isTestEnv","doctype","body","testElement","computedStyle","_checkHammerIsAvailable","BidiModule","Boolean","HAMMER_LOADER","MAT_DATE_LOCALE","MAT_DATE_LOCALE_PROVIDER","_localeChanges","setLocale","locale","second","firstValid","secondValid","SUPPORTS_INTL_API","Intl","DEFAULT_MONTH_NAMES","short","DEFAULT_DATE_NAMES","DEFAULT_DAY_OF_WEEK_NAMES","ISO_8601_REGEX","NativeDateAdapter","matDateLocale","useUtcForDisplay","_clampDate","getFullYear","getDay","dtf_1","DateTimeFormat","timeZone","_stripDirectionalityCharacters","_format","Date","dtf_2","day","dtf_3","weekday","dtf","_createDateWithOverflow","clone","displayFormat","setFullYear","toDateString","years","months","newDate","days","toIso8601","getUTCFullYear","_2digit","getUTCMonth","getUTCDate","isNaN","getTime","NaN","UTC","getHours","getMinutes","getSeconds","getMilliseconds","MAT_NATIVE_DATE_FORMATS","NativeDateModule","MatNativeDateModule","ShowOnDirtyErrorStateMatcher","dirty","submitted","touched","MAT_HAMMER_OPTIONS","ANGULAR_MATERIAL_SUPPORTED_HAMMER_GESTURES","ɵ1","noopHammerInstance","on","off","_hammerOptions","commonModule","events","buildHammer","hammer","Hammer","mc","pan","Pan","swipe","Swipe","press","Press","slide","_createRecognizer","threshold","longpress","time","recognizeWith","inheritances","recognizer","HammerGestureConfig","_setLineClass","count","_resetClasses","_setClass","isAdd","FADING_IN","VISIBLE","FADING_OUT","HIDDEN","RippleState","RippleRef","fadeOut","fadeOutRipple","defaultRippleAnimationConfig","enterDuration","exitDuration","ignoreMouseEventsTimeout","_target","_isPointerDown","_triggerEvents","_activeRipples","_eventOptions","supportsPassiveEventListeners","passive","onMousedown","isFakeMousedown","isSyntheticEvent","_lastTouchStartEvent","now","rippleDisabled","fadeInRipple","onTouchStart","touches","changedTouches","onPointerUp","persistent","_containerElement","containerRect","_containerRect","animationConfig","centered","transitionDuration","rippleRef","_mostRecentTransientRipple","runTimeoutOutsideZone","isMostRecentTransientRipple","wasActive","rippleEl","fadeOutAll","_triggerElement","_globalOptions","_rippleRenderer","_setupTriggerEventsIfEnabled","_trigger","launch","configOrX","[class.mat-ripple-unbounded]","unbounded","MatPseudoCheckbox","[class.mat-pseudo-checkbox-indeterminate]","[class.mat-pseudo-checkbox-checked]","[class.mat-pseudo-checkbox-disabled]","MatOptgroupBase","_MatOptgroupMixinBase","_uniqueOptgroupIdCounter","[class.mat-optgroup-disabled]"],"mappings":";;;;;;;i/DkKuBA,SAAgB2zF,GAAUC,EAAGpjF,GAEzB,QAASqjF,KAAOryF,KAAKsyF,YAAcF,EADnCG,GAAcH,EAAGpjF,GAEjBojF,EAAEztF,UAAkB,OAANqK,EAAavD,OAAO0sB,OAAOnpB,IAAMqjF,EAAG1tF,UAAYqK,EAAErK,UAAW,GAAI0tF,ICNnF,QAAgBG,KACd,OAAO,ECAT,QAAgB5yF,GAAyC6yF,GACvD,MAAF,UAAA3yF,GAMI,QAAJ4yF,KAAA,IAAgB,GAAhB/wF,MAAA8oD,EAAA,EAAgBA,EAAhB59C,UAAA1H,OAAgBslD,IAAA9oD,EAAhB8oD,GAAA59C,UAAA49C,EAAI,IAAJ5qD,GAAAC,EAAAqM,MAAAnM,KAA2C2B,IAA3C3B,WALAH,GAAAgnC,WAAiC,IAvBjC,MAsBuBniC,GAAvBguF,EAAA5yF,GAGI2L,OAAJC,eAAQgnF,EAAR/tF,UAAA,gBAAI,WAAiB,MAAO3E,MAAK6mC,eAC7B,SAAa5lC,GAAcjB,KAAK6mC,UAAY5oB,EAAAA,sBAAsBhd,oCA1BtEyxF,GAsBuBD,GCOvB,QAAgBvuF,GACZuuF,EAASE,GACX,MAAF,UAAA7yF,GAmBI,QAAJ4yF,KAAA,IAAgB,GAAhB/wF,MAAA8oD,EAAA,EAAgBA,EAAhB59C,UAAA1H,OAAgBslD,IAAA9oD,EAAhB8oD,GAAA59C,UAAA49C,EAAI,IAAJ5qD,GAAAC,EAAAqM,MAAAnM,KACe2B,IADf3B,WAIMH,GAAKomD,MAAQ0sC,IAtDnB,MA+BuBjuF,GAAvBguF,EAAA5yF,GAGI2L,OAAJC,eAAQgnF,EAAR/tF,UAAA,aAAI,WAA4B,MAAO3E,MAAK+mF,YACxC,SAAU9lF,GACR,GAAM8mF,GAAe9mF,GAAS0xF,CAE1B5K,KAAiB/nF,KAAK+mF,SACpB/mF,KAAK+mF,QACP/mF,KAAKE,YAAYI,cAAckF,UAAU2Y,OAAO,OAAOne,KAAK+mF,QAE1DgB,GACF/nF,KAAKE,YAAYI,cAAckF,UAAU4Y,IAAI,OAAO2pE,GAGtD/nF,KAAK+mF,OAASgB,oCA9CtB2K,GA+BuBD,GCVvB,QAAgB9yF,GAA8C8yF,GAC5D,MAAF,UAAA3yF,GAOI,QAAJ4yF,KAAA,IAAgB,GAAhB/wF,MAAA8oD,EAAA,EAAgBA,EAAhB59C,UAAA1H,OAAgBslD,IAAA9oD,EAAhB8oD,GAAA59C,UAAA49C,EAAI,IAAJ5qD,GAAAC,EAAAqM,MAAAnM,KAA2C2B,IAA3C3B,WANAH,GAAA+yF,gBAAsC,IAvBtC,MAsBuBluF,GAAvBguF,EAAA5yF,GAII2L,OAAJC,eAAQgnF,EAAR/tF,UAAA,qBAAI,WAAsB,MAAO3E,MAAK4yF,oBAClC,SAAkB3xF,GAAcjB,KAAK4yF,eAAiB30E,EAAAA,sBAAsBhd,oCA3BhFyxF,GAsBuBD,GCAvB,QAAgB/yF,GAAiD+yF,EAASzzB,GAExE,WAFF,KAAAA,IAA0EA,EAA1E,GAEA,SAAAl/D,GASI,QAAJ4yF,KAAA,IAAgB,GAAhB/wF,MAAA8oD,EAAA,EAAgBA,EAAhB59C,UAAA1H,OAAgBslD,IAAA9oD,EAAhB8oD,GAAA59C,UAAA49C,EAAI,IAAJ5qD,GAAAC,EAAAqM,MAAAnM,KACe2B,IADf3B,WARAH,GAAAw8E,UAAgCrd,IAzBhC,MAwBuBt6D,GAAvBguF,EAAA5yF,GAGI2L,OAAJC,eAAQgnF,EAAR/tF,UAAA,gBAAI,WAAyB,MAAO3E,MAAKW,UAAY,EAAIX,KAAKq8E,eAC1D,SAAap7E,GAEXjB,KAAKq8E,UAAqB,MAATp7E,EAAgBA,EAAQ+9D,mCA9B/C0zB,GAwBuBD,GCavB,QAAgBtwC,GAAsDswC,GAEpE,MAAF,UAAA3yF,GAyBI,QAAJ4yF,KAAA,IAAgB,GAAhB/wF,MAAA8oD,EAAA,EAAgBA,EAAhB59C,UAAA1H,OAAgBslD,IAAA9oD,EAAhB8oD,GAAA59C,UAAA49C,EAAI,IAAJ5qD,GAAAC,EAAAqM,MAAAnM,KACe2B,IADf3B,WAvBIH,GAAJsvF,YAA0B,EAMtBtvF,EAAJ4jD,aAA4B,GAAI7vC,GAAAA,UA/ChC,MAuCuBlP,GAAvBguF,EAAA5yF,GAYI4yF,EAAJ/tF,UAAA2/C,iBAAI,WACE,GAAMo0B,GAAW14E,KAAKmvF,WAChB95D,EAASr1B,KAAKgiD,kBAAoBhiD,KAAK+hD,YACvC8wC,EAAU7yF,KAAKsvC,mBAAqBtvC,KAAK8hD,0BACzCl8B,EAAU5lB,KAAKiiD,UAAYjiD,KAAKiiD,UAAgC,QAAG,KACnEw2B,EAAWoa,EAAQltE,aAAaC,EAASyP,EAE3CojD,KAAaC,IACf14E,KAAKmvF,WAAa1W,EAClBz4E,KAAKyjD,aAAa93C,SA5D1B+mF,GAuCuBD,GCJvB,QAAgB/5D,GAA4C+5D,GAE1D,MAAF,UAAA3yF,GAyBI,QAAJ4yF,KAAA,IAAgB,GAAhB/wF,MAAA8oD,EAAA,EAAgBA,EAAhB59C,UAAA1H,OAAgBslD,IAAA9oD,EAAhB8oD,GAAA59C,UAAA49C,EAAI,IAAJ5qD,GAAAC,EAAAqM,MAAAnM,KAA2C2B,IAA3C3B,WAvBIH,GAAJ8mC,gBAAqB,EAOjB9mC,EAAJizF,uBAMIjzF,EAAJsQ,YAAkB,GAAI4iF,GAAAA,WAAiB,SAAAC,GAG7BnzF,EAAK8mC,eACP9mC,EAAKozF,kBAAkBD,GAEvBnzF,EAAwB,oBAAE+J,KAAKopF,OA1DvC,MAqCuBtuF,GAAvBguF,EAAA5yF,GAgCI4yF,EAAJ/tF,UAAA80B,iBAAI,WACE,GAAIz5B,KAAK2mC,eACP,KAAMtS,OAAM,wFAIdr0B,MAAK2mC,gBAAiB,EAEtB3mC,KAAwB,oBAAEoK,QAAQpK,KAAKizF,mBACvCjzF,KAAK8yF,oBAAsB,MAI7BJ,EAAJ/tF,UAAAsuF,kBAAI,SAAkBD,GAChBA,EAAWrnF,OACXqnF,EAAW9+E,YApFjBw+E,GAqCuBD,GCnBvB,QAAgBS,KACd,MAAOC,GAAAA,OAAOC,EAAAA,WC+BhB,QAASC,GAASluF,EAAgBmuF,GAEhC,IAAK,GADCC,GAAczpF,MAAM3E,GACjB6F,EAAI,EAAGA,EAAI7F,EAAQ6F,IAC1BuoF,EAAYvoF,GAAKsoF,EAActoF,EAEjC,OAAOuoF,GCmQT,QAASC,GAA0BjhF,GAIjCixE,OAAOj/B,iBAAiBhyC,GAASkhF,iBAAiB,WAMpD,QAASC,GAAyB9nE,EAAWE,EAAW2kE,GACtD,GAAMkD,GAAQ/hF,KAAKoK,IAAIpK,KAAK46B,IAAI5gB,EAAI6kE,EAAKx9E,MAAOrB,KAAK46B,IAAI5gB,EAAI6kE,EAAKz4D,QAC5D47D,EAAQhiF,KAAKoK,IAAIpK,KAAK46B,IAAI1gB,EAAI2kE,EAAKljE,KAAM3b,KAAK46B,IAAI1gB,EAAI2kE,EAAKv4D,QACjE,OAAOtmB,MAAKiiF,KAAKF,EAAQA,EAAQC,EAAQA,yCvB3D3CE,GAAyB5qD,EAAzB3tB,UACQw4E,EAAR5qD,EAA8B5tB,UACtBy4E,EAAR,gBACAF,EAAyB9oF,GAAzBugC,OAAAuoD,EAAA9oF,GAAAugC,QAAAwoD,EAAAC,IAEAA,GAGA,OAAAA,GAGA,MAAA,uBAcA,GAAAC,GAAAvpC,EAAAwpC,aAEAD,EAGIA,EAAJC,EAAAC,EAAA9qD,EACAz3B,KAAAoK,IAAA,EAAAi4E,EAAA5qD,EAAA6qD,GAGAC,EwBrSA,QAAgB9E,KACd,MAAOh7D,OAAM,gEAIf,QAAgBs7D,GAAmCjP,GACjD,MAAOrsD,OAAM,4CAA2CqsD,EAA1D,QAIA,QAAgBoP,KACd,MAAOz7D,OAAM,sDnCqDf,QAAgB69D,KACd,OAAQ9P,uBAAuB,G7HRjC,QAAgBK,GAAyC/uC,GACvD,MAAO,YAAM,MAAAA,GAAQo3C,iBAAiBsJ,cAwBxC,QAAgBvO,KACd,MAAOxxD,OAAM,6MuI4Gf,QAAS29C,GAAqBvxC,EACAhL,GAC5B,MAAFM,OAAa0K,EAAahL,GhCnK1B,QAAgBi6C,KACd,KAAMr7C,OAAM,yEEOd,QAAgBggE,GAAmC3gD,GACjD,MAAO,YAAM,MAAAA,GAAQo3C,iBAAiBC,SAIxC,QAAgB1Z,GAA4C39B,GAE1D,MAAO,YAAM,MAAAA,GAAQo3C,iBAAiBC,SAwUxC,QAAS/Y,GACLv8C,EAA0BspD,GAC5B,MAAFhpD,OAAagpD,EAAmBtpD,GC5PhC,QAASi+C,GAAiBnhE,EAAkCs/D,GAG1D,IAFA,GAAIx8C,GAA6B9iB,EAAQjS,cAAc2yE,cAEhD59C,IAAWA,EAAO7vB,UAAUC,SAAS,yBAC1C4vB,EAASA,EAAO49C,aAGlB,OAAO59C,GAASw8C,EAAYvxD,KAAK,SAAAmyD,GAAU,MAAAA,GAAO1xD,KAApD,EAAmEA,KAAM,KuDlIzE,QAAgBq1D,GAAgCp3E,GAC9C,MAAOq1B,OAAM,eAAer1B,EAA9B,mCCDA,QAAgB+5D,GAA2Bu7B,GACzC,MAAOjgE,OACH,wCAAwCigE,EAD9C,0JnFmDA,QAAgB7nB,IAAuC/4B,GACrD,MAAO,YAAM,MAAAA,GAAQo3C,iBAAiBsJ,cNkOxC,QAAS9lC,IAAKimC,GAAuB,MAAO,QAAQA,EAApD,IAIA,QAASxmC,IAAe9sD,GACtB,MAAQA,GAAMuzF,MAAM,aAAgBvzF,EAAQA,EAAQ,KGzQtD,QAAgBuzD,IAA4BvC,GAC1C,MAAO59B,OAAM,sCAAsC49B,EAArD,KASA,QAAgBiE,MACd,MAAO7hC,OAAM,8JAWf,QAAgBu/B,IAAmCtC,GACjD,MAAOj9B,OAAM,yHACkDi9B,EAAjE,MAQA,QAAgBsB,IAAuCR,GACrD,MAAO/9B,OAAM,2HACkD+9B,EAAjE,MAihBA,QAAgBwE,IACd69B,EACAC,EACAC,EACAnwF,GACA,MAAOiwF,IAAkB,GAAIljC,IAAgBmjC,EAAYC,EAAWnwF,GAiBtE,QAASsvD,IAASG,GAChB,MAAOA,GAAIyB,WAAU,GAIvB,QAASvB,IAAQ7B,EAAmB/vC,GAClC,MAAO+vC,GAAY,IAAM/vC,EuF/lB3B,QAAgB09B,MACd,KAAM5rB,OAAM,0KAYd,QAAgB8nB,MACd,KAAM9nB,OAAM,kIASd,QAAgBgoB,MACd,KAAMhoB,OAAM,gInGiCd,QAAgB8mB,MACd,OACEa,gBAAgB,EAChBV,UAAW,QACXE,UAAW,QACXM,cAAe,oCC1BnB,QAAgBsC,IAAiC1K,GAC/C,MAAO,YAAM,MAAAA,GAAQo3C,iBAAiBsJ,cmGpCxC,QAAgB1wC,MACd,MAAOrvB,OAAM,iEASf,QAAgBgyB,MACd,MAAOhyB,OAAM,sDAQf,QAAgBsvB,MACd,MAAOtvB,OAAM,qCjK6Gf,QAAgBstB,IAA4CjO,GAE1D,MAAO,YAAM,MAAAA,GAAQo3C,iBAAiBsJ,cCtFxC,QAAgBjgD,IAAkCtgC,GAChD,MAAOwgB,OAAM,qBAAqBxgB,EAApC,iBAQA,QAAgBq8B,IAAoCwD,GAClD,MAAO,YAAM,MAAAA,GAAQo3C,iBAAiBsJ,YAAYQ,eAAgB7kD,MAyBpE,QAAgBK,MACd,OACEM,UAAW,EACXC,UAAW,EACXgC,kBAAmB,MqDxCvB,QAAgBiD,IAAoCi/C,GAClD,MAAOA,IAAc,GAAIn/C,IVQ3B,QAAgBmC,MACd,GAAMpzC,GAAY0uF,EAAAA,OAAO9sF,EAAAA,SAEzB,QAAQ+xC,SADU3zC,GAAaA,EAAUszC,UAAYtzC,EAAUszC,SAASK,UAAa,uBAkJ7D,6BAAF,KAAxBp8B,IAA4CA,EAA5C,KAAApK,KAAAoK,IAAAlK,EAAAF,KAAAE,IAAAkK,EAAAD,IEjJA,QAAgBgoB,MACd,OAAQW,SAAUf,IRtBpB,QAAgB9F,IAA8BhqB,GAC5C,KAAMwgB,OAAM,iDAAgDxgB,EAA9D,OAeA,QAAgBi1B,MACd,OAAO,EFzBT,QAAgBlU,MACd,MAAO,IAAInC,I8HhCb,QAAgByG,IAAgCnY,GAC9C,MAAOsT,OAAM,kDAAkDtT,EAAjE,MAIA,QAAgBiB,MACd,MAAOqS,OAAM,oFAIf,QAAgB2E,MACd,MAAO3E,OAAM,oDAIf,QAAgByE,IAA6BhqB,GAC3C,MAAOulB,OAASvlB,EAAlB,qD7HkJA,QAASyqB,IAAsBvW,EACAc,GAC7B,GAAIgxE,IAA8B,MAAO,OAIzC,OAHa,QAAT9xE,GAAmB8xE,EAAUhwC,UAC5BhhC,GAAgBgxE,EAAUlrF,KAAK,IAE7BkrF,EtBpJT,QAAgBxzE,IAAsCuzE,GACpD,MAAOA,IAAc,GAAI5zE,IVC3B,QAAgB9O,MAMd,MALe,UAACI,GAAyB,OACvCU,KAAMV,GAAWA,EAAQyF,YAAc,GAAK,KAAO,IACnD9E,MAAOX,GAAWA,EAAQ2F,aAAe,GAAK,KAAO,kO6IlBzD,GAAIq6E,IAAgB,SAASH,EAAGpjF,GAI5B,OAHAujF,GAAgB9mF,OAAOspF,iBAChBC,uBAA2BlrF,QAAS,SAAUsoF,EAAGpjF,GAAKojF,EAAE4C,UAAYhmF,IACvE,SAAUojF,EAAGpjF,GAAK,IAAK,GAAIynC,KAAKznC,GAAOA,EAAEiF,eAAewiC,KAAI27C,EAAE37C,GAAKznC,EAAEynC,MACpD27C,EAAGpjF,IASjBimF,GAAW,WAQlB,MAPAA,IAAWxpF,OAAOypF,QAAU,SAAkB5f,GAC1C,IAAK,GAAI6f,GAAGnqF,EAAI,EAAGoqF,EAAIvoF,UAAU1H,OAAQ6F,EAAIoqF,EAAGpqF,IAAK,CACjDmqF,EAAItoF,UAAU7B,EACd,KAAK,GAAIyrC,KAAK0+C,GAAO1pF,OAAO9G,UAAUsP,eAAelU,KAAKo1F,EAAG1+C,KAAI6+B,EAAE7+B,GAAK0+C,EAAE1+C,IAE9E,MAAO6+B,IAEJ2f,GAAS9oF,MAAMnM,KAAM6M,wCiBrChC,MAUE+sB,GAAFC,eAA0B,8BACxBD,EAAFyvD,mBAA8B,8BAC5BzvD,EAAFuvD,mBAA8B,4BAC5BvvD,EAAFy7D,YAAuB,8BAbvBz7D,iCAAA,MAmBEF,GAAFwvD,QAAmB,QACjBxvD,EAAFC,SAAoB,QAClBD,EAAF0vD,QAAmB,QArBnB1vD,KhBca47D,GAAyB,GAAItjF,GAAAA,eAAwB,qBAChEC,WAAY,OACZC,QAASsgF,kBA+BT,QAAFzvF,GACwDwyF,EACTC,GADSx1F,KAAxDu1F,qBAAwDA,EACTv1F,KAA/Cw1F,cAA+CA,EAb/Cx1F,KAAAy1F,sBAAiC,EAGjCz1F,KAAA01F,mBAA8B,EAG9B11F,KAAAyE,UAA0C,gBAAbD,WAAyBA,SAAWA,SAAW,KAG5ExE,KAAA21F,QAAsC,gBAAXnS,SAAuBA,OAASA,OAAS,KAM5DxjF,KAAK41F,sBAAwB51F,KAAKy1F,uBACpCz1F,KAAK61F,yBACL71F,KAAK81F,uBACL91F,KAAKy1F,sBAAuB,GAtDlC,MA2DU1yF,GAAV4B,UAAAixF,6BACI,MAAO51F,MAAKu1F,sBAAwB1wF,EAAAA,cAAgB7E,KAAK+1F,cAInDhzF,EAAV4B,UAAAoxF,sBACI,MAAO/1F,MAAK21F,UAAY31F,KAAK21F,QAAmB,WAAK31F,KAAK21F,QAAiB,UAGrE5yF,EAAV4B,UAAAkxF,kCACQ71F,KAAKyE,YAAczE,KAAKyE,UAAUuxF,SACpCrvC,QAAQC,KACN,yHAME7jD,EAAV4B,UAAAmxF,gCAGI,GAAK91F,KAAKyE,WAAczE,KAAKyE,UAAUwxF,MAAoC,kBAArB1xC,kBAAtD,CAIA,GAAM2xC,GAAcl2F,KAAKyE,UAAU6gC,cAAc,MAEjD4wD,GAAY1wF,UAAU4Y,IAAI,2BAC1Bpe,KAAKyE,UAAUwxF,KAAKzwD,YAAY0wD,EAEhC,IAAMC,GAAgB5xC,iBAAiB2xC,EAKnCC,IAA2C,SAA1BA,EAAch4B,SACjCxX,QAAQC,KACN,sLAMJ5mD,KAAKyE,UAAUwxF,KAAK99B,YAAY+9B,KAIlCnzF,EAAF4B,UAAAyxF,wBAAE,YACMp2F,KAAK01F,mBAAsB11F,KAAK21F,WAIhC31F,KAAK41F,qBAAwB51F,KAAK21F,QAAgB,QAAM31F,KAAKw1F,eAC/D7uC,QAAQC,KACN,wFAEJ5mD,KAAK01F,mBAAoB,mBArF7B12F,KAAC4D,EAAAA,SAADjB,OACEkB,SAAUwzF,EAAAA,YACVjzF,SAAUizF,EAAAA,oDAgBZr3F,KAAAs3F,QAAA70F,aAAAzC,KAAKsD,EAAAA,WAALtD,KAAiBuD,EAAAA,OAAjBZ,MAAwB2zF,QACxBt2F,SAAAqD,GAAAZ,aAAAzC,KAAKsD,EAAAA,WAALtD,KAAiBuD,EAAAA,OAAjBZ,MAAwB40F,EAAAA,oBAjDxBxzF,KOYayzF,GAAkB,GAAIxkF,GAAAA,eAAuB,mBACxDC,WAAY,OACZC,QAASghF,IAcEuD,IAA4BjvF,QAASgvF,GAAiB/uF,YAAa2rF,EAAAA,WAGhFt4B,GAAA,wBAME96D,KAAF02F,eAA6B,GAAI9iF,GAAAA,QArCjC,MAoCEnI,QAAFC,eAAMovD,EAANn2D,UAAA,qBAAE,WAAwC,MAAO3E,MAAK02F,gDAqLpD57B,EAAFn2D,UAAA63D,YAAE,SAAYv7D,GACV,MAAa,OAATA,GAAiBjB,KAAKo+D,eAAen9D,IAAUjB,KAAKu9D,QAAQt8D,GACvDA,EAEFjB,KAAKgmB,WAOd80C,EAAFn2D,UAAAgyF,UAAE,SAAUC,GACR52F,KAAK42F,OAASA,EACd52F,KAAK02F,eAAe/qF,QAUtBmvD,EAAFn2D,UAAA83D,YAAE,SAAYnxB,EAAUurD,GACpB,MAAO72F,MAAKsmE,QAAQh7B,GAAStrC,KAAKsmE,QAAQuwB,IACtC72F,KAAKymE,SAASn7B,GAAStrC,KAAKymE,SAASowB,IACrC72F,KAAK8mE,QAAQx7B,GAAStrC,KAAK8mE,QAAQ+vB,IAUzC/7B,EAAFn2D,UAAA40D,SAAE,SAASjuB,EAAiBurD,GACxB,GAAIvrD,GAASurD,EAAQ,CACnB,GAAIC,GAAa92F,KAAKu9D,QAAQjyB,GAC1ByrD,EAAc/2F,KAAKu9D,QAAQs5B,EAC/B,OAAIC,IAAcC,GACR/2F,KAAKy8D,YAAYnxB,EAAOurD,GAE3BC,GAAcC,EAEvB,MAAOzrD,IAASurD,GAWlB/7B,EAAFn2D,UAAAghE,UAAE,SAAUlM,EAAS3nD,EAAgBkK,GACjC,MAAIlK,IAAO9R,KAAKy8D,YAAYhD,EAAM3nD,GAAO,EAChCA,EAELkK,GAAOhc,KAAKy8D,YAAYhD,EAAMz9C,GAAO,EAChCA,EAEFy9C,GAxRXqB,KUwBa8D,GAAmB,GAAI5sD,GAAAA,eAA+B,oBTV7DglF,GAAmC,mBAARC,MAI3BC,IACJ/xB,MACE,UAAW,WAAY,QAAS,QAAS,MAAO,OAAQ,OAAQ,SAAU,YAC1E,UAAW,WAAY,YAEzBgyB,OAAU,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,OACvF/xB,QAAW,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,MAKpEoJ,GAAqC,SAAAxjE,GAAK,MAAAvI,QAAOuI,EAAI,IAA/CosF,GAAqB/D,EAAM,GAAjC7kB,IAIM6oB,IACJlyB,MAAS,SAAU,SAAU,UAAW,YAAa,WAAY,SAAU,YAC3EgyB,OAAU,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,OACpD/xB,QAAW,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,MASrCkyB,GACF,oGA+BF,QAAFC,GAAmDC,EAAuBtzD,GAAxE,GAAFrkC,GACIC,EADJC,KAAAC,OAAAA,WAFEH,GAAF43F,kBAA8B,EAI1B33F,EAAJ6E,UAAUgyF,UAAV52F,KAAAF,EAAoB23F,GAGhB33F,EAAK43F,kBAAoBvzD,EAASO,QAClC5kC,EAAK63F,WAAaxzD,EAASO,SAAWP,EAASM,OAnFnD,MA4DuC9/B,GAAvC6yF,EAAAz3F,GA0BEy3F,EAAF5yF,UAAA2hE,QAAE,SAAQ7M,GACN,MAAOA,GAAKk+B,eAGdJ,EAAF5yF,UAAA8hE,SAAE,SAAShN,GACP,MAAOA,GAAKgN,YAGd8wB,EAAF5yF,UAAAmiE,QAAE,SAAQrN,GACN,MAAOA,GAAKqN,WAGdywB,EAAF5yF,UAAA+iE,aAAE,SAAajO,GACX,MAAOA,GAAKm+B,UAGdL,EAAF5yF,UAAA2iE,cAAE,SAAc10D,GAAd,GAAF/S,GAAAG,IACI,IAAIg3F,GAAmB,CACrB,GAAMa,GAAM,GAAIZ,MAAKa,eAAe93F,KAAK42F,QAAS7tB,MAAOn2D,EAAOmlF,SAAU,OAC1E,OAAO1E,GAAM,GAAI,SAAAroF,GACb,MAAAnL,GAAKm4F,+BAA+Bn4F,EAAKo4F,QAAQJ,EAAK,GAAIK,MAAK,KAAMltF,EAAG,OAE9E,MAAOksF,IAAoBtkF,IAG7B2kF,EAAF5yF,UAAAojE,aAAE,WAAA,GAAFloE,GAAAG,IACI,IAAIg3F,GAAmB,CACrB,GAAMmB,GAAM,GAAIlB,MAAKa,eAAe93F,KAAK42F,QAASwB,IAAK,UAAWL,SAAU,OAC5E,OAAO1E,GAAM,GAAI,SAAAroF,GAAK,MAAAnL,GAAKm4F,+BACvBn4F,EAAKo4F,QAAQE,EAAK,GAAID,MAAK,KAAM,EAAGltF,EAAI,OAE9C,MAAOosF,KAGTG,EAAF5yF,UAAAqgE,kBAAE,SAAkBpyD,GAAlB,GAAF/S,GAAAG,IACI,IAAIg3F,GAAmB,CACrB,GAAMqB,GAAM,GAAIpB,MAAKa,eAAe93F,KAAK42F,QAAS0B,QAAS1lF,EAAOmlF,SAAU,OAC5E,OAAO1E,GAAM,EAAG,SAAAroF,GAAK,MAAAnL,GAAKm4F,+BACtBn4F,EAAKo4F,QAAQI,EAAK,GAAIH,MAAK,KAAM,EAAGltF,EAAI,OAE9C,MAAOqsF,IAA0BzkF,IAGnC2kF,EAAF5yF,UAAAwkE,YAAE,SAAY1P,GACV,GAAIu9B,GAAmB,CACrB,GAAMuB,GAAM,GAAItB,MAAKa,eAAe93F,KAAK42F,QAAShuB,KAAM,UAAWmvB,SAAU,OAC7E,OAAO/3F,MAAKg4F,+BAA+Bh4F,KAAKi4F,QAAQM,EAAK9+B,IAE/D,MAAOh3D,QAAOzC,KAAKsmE,QAAQ7M,KAG7B89B,EAAF5yF,UAAAmgE,kBAAE,WAEE,MAAO,IAGTyyB,EAAF5yF,UAAAoiE,kBAAE,SAAkBtN,GAChB,MAAOz5D,MAAK8mE,QAAQ9mE,KAAKw4F,wBACrBx4F,KAAKsmE,QAAQ7M,GAAOz5D,KAAKymE,SAAShN,GAAQ,EAAG,KAGnD89B,EAAF5yF,UAAA8zF,MAAE,SAAMh/B,GACJ,MAAOz5D,MAAK2mE,WAAW3mE,KAAKsmE,QAAQ7M,GAAOz5D,KAAKymE,SAAShN,GAAOz5D,KAAK8mE,QAAQrN,KAG/E89B,EAAF5yF,UAAAgiE,WAAE,SAAWiC,EAAcG,EAAetP,GAGtC,GAAIsP,EAAQ,GAAKA,EAAQ,GACvB,KAAM10C,OAAM,wBAAwB00C,EAA1C,6CAGI,IAAItP,EAAO,EACT,KAAMplC,OAAM,iBAAiBolC,EAAnC,oCAGI,IAAI3R,GAAS9nD,KAAKw4F,wBAAwB5vB,EAAMG,EAAOtP,EAEvD,IAAI3R,EAAO2e,YAAcsC,EACvB,KAAM10C,OAAM,iBAAiBolC,EAAnC,2BAAkEsP,EAAlE,KAGI,OAAOjhB,IAGTyvC,EAAF5yF,UAAA6gE,MAAE,WACE,MAAO,IAAI0yB,OAGbX,EAAF5yF,UAAAs5D,MAAE,SAAMh9D,GAGJ,MAAoB,gBAATA,GACF,GAAIi3F,MAAKj3F,GAEXA,EAAQ,GAAIi3F,MAAKA,KAAKj6B,MAAMh9D,IAAU,MAG/Cs2F,EAAF5yF,UAAAu5D,OAAE,SAAOzE,EAAYi/B,GACjB,IAAK14F,KAAKu9D,QAAQ9D,GAChB,KAAMplC,OAAM,iDAGd,IAAI2iE,GAAmB,CAGjBh3F,KAAK03F,aAAej+B,EAAKk+B,cAAgB,GAAKl+B,EAAKk+B,cAAgB,QACrEl+B,EAAOz5D,KAAKy4F,MAAMh/B,GAClBA,EAAKk/B,YAAY/mF,KAAKoK,IAAI,EAAGpK,KAAKE,IAAI,KAAM2nD,EAAKk+B,kBAGnDe,EAAN3iE,MAA0B2iE,GAAeX,SAAU,OAE7C,IAAMQ,GAAM,GAAItB,MAAKa,eAAe93F,KAAK42F,OAAQ8B,EACjD,OAAO14F,MAAKg4F,+BAA+Bh4F,KAAKi4F,QAAQM,EAAK9+B,IAE/D,MAAOz5D,MAAKg4F,+BAA+Bv+B,EAAKm/B,iBAGlDrB,EAAF5yF,UAAAqiE,iBAAE,SAAiBvN,EAAYo/B,GAC3B,MAAO74F,MAAKinE,kBAAkBxN,EAAc,GAARo/B,IAGtCtB,EAAF5yF,UAAAsiE,kBAAE,SAAkBxN,EAAYq/B,GAC5B,GAAIC,GAAU/4F,KAAKw4F,wBACfx4F,KAAKsmE,QAAQ7M,GAAOz5D,KAAKymE,SAAShN,GAAQq/B,EAAQ94F,KAAK8mE,QAAQrN,GAUnE,OAJIz5D,MAAKymE,SAASsyB,MAAc/4F,KAAKymE,SAAShN,GAAQq/B,GAAU,GAAK,IAAM,KACzEC,EAAU/4F,KAAKw4F,wBAAwBx4F,KAAKsmE,QAAQyyB,GAAU/4F,KAAKymE,SAASsyB,GAAU,IAGjFA,GAGTxB,EAAF5yF,UAAAkiE,gBAAE,SAAgBpN,EAAYu/B,GAC1B,MAAOh5F,MAAKw4F,wBACRx4F,KAAKsmE,QAAQ7M,GAAOz5D,KAAKymE,SAAShN,GAAOz5D,KAAK8mE,QAAQrN,GAAQu/B,IAGpEzB,EAAF5yF,UAAAs0F,UAAE,SAAUx/B,GACR,OACEA,EAAKy/B,iBACLl5F,KAAKm5F,QAAQ1/B,EAAK2/B,cAAgB,GAClCp5F,KAAKm5F,QAAQ1/B,EAAK4/B,eAClBhsD,KAAK,MAQTkqD,EAAF5yF,UAAA63D,YAAE,SAAYv7D,GACV,GAAqB,gBAAVA,GAAoB,CAC7B,IAAKA,EACH,MAAO,KAIT,IAAIq2F,GAAe5nC,KAAKzuD,GAAQ,CAC9B,GAAIw4D,GAAO,GAAIy+B,MAAKj3F,EACpB,IAAIjB,KAAKu9D,QAAQ9D,GACf,MAAOA,IAIb,MAAO35D,GAAX6E,UAAiB63D,YAAjBz8D,KAAAC,KAA6BiB,IAG3Bs2F,EAAF5yF,UAAAy5D,eAAE,SAAentD,GACb,MAAOA,aAAeinF,OAGxBX,EAAF5yF,UAAA44D,QAAE,SAAQ9D,GACN,OAAQ6/B,MAAM7/B,EAAK8/B,YAGrBhC,EAAF5yF,UAAAqhB,QAAE,WACE,MAAO,IAAIkyE,MAAKsB,MAIVjC,EAAV5yF,UAAA6zF,wBAAA,SAAkC5vB,EAAcG,EAAetP,GAC3D,GAAM3R,GAAS,GAAIowC,MAAKtvB,EAAMG,EAAOtP,EAOrC,OAHImP,IAAQ,GAAKA,EAAO,KACtB9gB,EAAO6wC,YAAY34F,KAAKsmE,QAAQxe,GAAU,MAErCA,GAQDyvC,EAAV5yF,UAAAw0F,QAAA,SAAkB/D,GACd,OAAQ,KAAOA,GAAGhwF,OAAO,IAUnBmyF,EAAV5yF,UAAAqzF,+BAAA,SAAyCniC,GACrC,MAAOA,GAAIjwB,QAAQ,kBAAmB,KAchC2xD,EAAV5yF,UAAAszF,QAAA,SAAkBM,EAA0B9+B,GACxC,GAAM24B,GAAI,GAAI8F,MAAKA,KAAKuB,IACpBhgC,EAAKk+B,cAAel+B,EAAKgN,WAAYhN,EAAKqN,UAAWrN,EAAKigC,WAC1DjgC,EAAKkgC,aAAclgC,EAAKmgC,aAAcngC,EAAKogC,mBAC/C,OAAOtB,GAAIr6B,OAAOk0B,mBAnQtBpzF,KAACgiB,EAAAA,iDAkBDhiB,KAAAyD,OAAAhB,aAAAzC,KAAesD,EAAAA,WAAftD,KAA2BuD,EAAAA,OAA3BZ,MAAkC60F,QArElCx3F,KAAQoD,EAAAA,YARRm1F,GA4DuCz8B,IUjD1Bg/B,IACX77B,OACErC,UAAW,MAEbuC,SACEvC,WAAYgN,KAAM,UAAWG,MAAO,UAAWqvB,IAAK,WACpD1tB,gBAAiB9B,KAAM,UAAWG,MAAO,SACzCZ,eAAgBS,KAAM,UAAWG,MAAO,OAAQqvB,IAAK,WACrDpuB,oBAAqBpB,KAAM,UAAWG,MAAO,sCCnBjD,sBAqBA/pE,KAAC4D,EAAAA,SAADjB,OACEkB,SAAU+8B,EAAAA,gBACVr4B,YACGC,QAASszD,GAAapqC,SAAU6mE,SAxBrCwC,KAgCAvrB,GAAoDsrB,+BAhCpD,sBA8BA96F,KAAC4D,EAAAA,SAADjB,OACEkB,SAAUk3F,IACVxyF,YAAaC,QAASo3D,GAAkB6P,SAA1CD,SAhCAwrB,iCCAA,MAcEC,GAAFt1F,UAAAghB,aAAE,SAAaC,EAA6BC,GACxC,SAAUD,GAAWA,EAAQI,UAAYJ,EAAQs0E,OAAUr0E,GAAQA,EAAKs0E,4BAH5En7F,KAACgiB,EAAAA,aAZDi5E,iCAAA,MAsBE/zE,GAAFvhB,UAAAghB,aAAE,SAAaC,EAA6BC,GACxC,SAAUD,GAAWA,EAAQI,UAAYJ,EAAQw0E,SAAYv0E,GAAQA,EAAKs0E,4BAH9En7F,KAACgiB,EAAAA,WAADrf,OAAasQ,WAAY,8GApBzBiU,KCuBam0E,GAAqB,GAAIroF,GAAAA,eAA8B,sBAE9DsoF,IACJ,YACA,QACA,aACA,WACA,aACA,aAQF9rB,GAAM,aAAN+rB,GACO,aAFDC,IACJC,GAAFjsB,GACEksB,IAAFH,mBASE,QAAF5pE,GACoDgqE,EACpCC,GAFd,GAAF/6F,GAGIC,EAHJC,KAAAC,OAAAA,WACoDH,GAApD86F,eAAoDA,EAHlD96F,EAAFg7F,OAAWP,GAMHM,GACFA,EAAaxE,4BAtDnB,MA6CmC1xF,GAAnCisB,EAAA7wB,GA0BE6wB,EAAFhsB,UAAAm2F,YAAE,SAAYvoF,GACV,GAAMwoF,GAAyC,mBAAXvX,QAAyB,OAAgBwX,OAAS,IAEtF,KAAKD,EASH,MAAOP,GAGT,IAAMS,GAAK,GAAIF,GAAOxoF,EAASvS,KAAK26F,oBAAkBt4F,IAGhD64F,EAAM,GAAIH,GAAOI,IACjBC,EAAQ,GAAIL,GAAOM,MACnBC,EAAQ,GAAIP,GAAOQ,MAKnBC,EAAQx7F,KAAKy7F,kBAAkBP,GAAM55F,MAAO,QAASo6F,UAAW,GAAIN,GACpEO,EAAY37F,KAAKy7F,kBAAkBH,GAAQh6F,MAAO,YAAas6F,KAAM,KAe3E,OAZAV,GAAIW,cAAcT,GAOlBO,EAAUE,cAAcL,GAGxBP,EAAG78E,KAAKg9E,EAAOE,EAAOJ,EAAKM,EAAOG,IAElC,GAIMhrE,EAAVhsB,UAAA82F,kBAAA,SAA4BhJ,EAAkBvpD,GAA9C,IAA4D,GAA5D4yD,MAAArxC,EAAA,EAA4DA,EAA5D59C,UAAA1H,OAA4DslD,IAAAqxC,EAA5DrxC,EAAA,GAAA59C,UAAA49C,EACI,IAAIsxC,GAAa,GAAKtJ,GAAoC,YAAEvpD,EAK5D,OAHA4yD,GAAalyF,KAAK6oF,GAClBqJ,EAAa1xF,QAAQ,SAAAwyC,GAAQ,MAAAm/C,GAAWF,cAAcj/C,KAE/Cm/C,kBA9EX/8F,KAACgiB,EAAAA,iDAMDhiB,SAAAqD,GAAAZ,aAAAzC,KAAKsD,EAAAA,WAALtD,KAAiBuD,EAAAA,OAAjBZ,MAAwB04F,QAxCxBr7F,KAAQ+D,GAARtB,aAAAzC,KAyCKsD,EAAAA,cAnDLquB,GA6CmCqrE,EAAAA,iDC7CnC,sBAsBAh9F,KAAC0C,EAAAA,UAADC,OACEwC,SAAU,wBACV3F,MAAOC,MAAS,gBAxBlB2rD,KAgCAV,GAAA,WACE,QAAFA,GAAsBC,EAAoCrlC,GAAxD,GAAFzkB,GAAAG,IAAsBA,MAAtB2pD,OAAsBA,EAAoC3pD,KAA1DskB,SAA0DA,EACtDtkB,KAAKi8F,cAAcj8F,KAAK2pD,OAAOxkD,QAE/BnF,KAAK2pD,OAAO1kD,QAAQC,UAAU,WAC5BrF,EAAKo8F,cAAcp8F,EAAK8pD,OAAOxkD,UArCrC,MAyCUukD,GAAV/kD,UAAAs3F,cAAA,SAAwBC,GACpBl8F,KAAKm8F,gBACS,IAAVD,GAAyB,IAAVA,EACjBl8F,KAAKo8F,UAAU,OAAOF,EAA5B,SAA0C,GAC3BA,EAAQ,GACjBl8F,KAAKo8F,UAAU,kBAAkB,IAI7B1yC,EAAV/kD,UAAAw3F,yBACIn8F,KAAKo8F,UAAU,cAAc,GAC7Bp8F,KAAKo8F,UAAU,cAAc,GAC7Bp8F,KAAKo8F,UAAU,kBAAkB,IAG3B1yC,EAAV/kD,UAAAy3F,UAAA,SAAoB7/C,EAAmB8/C,GAC/BA,EACFr8F,KAAKskB,SAAShkB,cAAckF,UAAU4Y,IAAIm+B,GAE1Cv8C,KAAKskB,SAAShkB,cAAckF,UAAU2Y,OAAOo+B,IA5DnDmN,iCAAA,sBAkEA1qD,KAAC4D,EAAAA,SAADjB,OACEkB,SAAUE,IACVK,SAAUgnD,GAASrnD,IACnBU,cAAe2mD,QArEjB/B,SCYEi0C,UAAF,EAAaC,QAAb,EAAsBC,WAAtB,EAAkCC,OAAlC,EAAAC,IAAAA,GAAEJ,WAAF,YAAAI,GAAAA,GAAaH,SAAb,UAAAG,GAAAA,GAAsBF,YAAtB,aAAAE,GAAAA,GAAkCD,QAAlC,QAMA,IAAAE,IAAA,WAKE,QAAFA,GACY9V,EAEDt0E,EAEAkjB,GAJCz1B,KAAZ6mF,UAAYA,EAED7mF,KAAXuS,QAAWA,EAEAvS,KAAXy1B,OAAWA,EAPTz1B,KAAF6U,MAAuB6nF,GAAYD,OArBnC,MAgCEE,GAAFh4F,UAAAi4F,QAAE,WACE58F,KAAK6mF,UAAUgW,cAAc78F,OAjCjC28F,KdgDaG,IACXC,cAAe,IACfC,aAAc,KAOVC,GAA2B,IASjCriB,GAAA,WA+BE,QAAFA,GAAsBsiB,EACA9qF,EACR9N,EACA4/B,GAHZ,GAAFrkC,GAAAG,IAAsBA,MAAtBk9F,QAAsBA,EACAl9F,KAAtBoS,QAAsBA,EAxBtBpS,KAAAm9F,gBAA2B,EAG3Bn9F,KAAAo9F,eAA2B,GAAIxkE,KAG/B54B,KAAAq9F,eAA2B,GAAIx3D,KAS/B7lC,KAAAs9F,gBAA0BC,EAAAA,kCAAoCC,SAAS,GA4JvEx9F,KAAAy9F,YAAwB,SAACn8F,GAGrB,GAAMo8F,GAAkBx8C,EAAAA,gCAAgC5/C,GAClDq8F,EAAmB99F,EAAK+9F,sBAC1B1F,KAAK2F,MAAQh+F,EAAK+9F,qBAAuBX,EAExCp9F,GAAKq9F,QAAQY,gBAAmBJ,GAAoBC,IACvD99F,EAAKs9F,gBAAiB,EACtBt9F,EAAKk+F,aAAaz8F,EAAMuqB,QAASvqB,EAAMyqB,QAASlsB,EAAKq9F,QAAQ9iB,gBAKnEp6E,KAAAg+F,aAAyB,SAAC18F,GACtB,IAAKzB,EAAKq9F,QAAQY,eAAgB,CAIhCj+F,EAAK+9F,qBAAuB1F,KAAK2F,MACjCh+F,EAAKs9F,gBAAiB,CAMtB,KAAK,GAFCc,GAAU38F,EAAM48F,eAEblzF,EAAI,EAAGA,EAAIizF,EAAQ94F,OAAQ6F,IAClCnL,EAAKk+F,aAAaE,EAAQjzF,GAAG6gB,QAASoyE,EAAQjzF,GAAG+gB,QAASlsB,EAAKq9F,QAAQ9iB,gBAM/Ep6E,KAAAm+F,YAAwB,WACft+F,EAAKs9F,iBAIVt9F,EAAKs9F,gBAAiB,EAGtBt9F,EAAKw9F,eAAejzF,QAAQ,SAAA8uE,GAG1B,GAAM1mC,GAAY0mC,EAAOrkE,QAAU6nF,GAAYH,SAC7CrjB,EAAOzjD,OAAO70B,sBAAwBs4E,EAAOrkE,QAAU6nF,GAAYJ,WAEhEpjB,EAAOzjD,OAAO2oE,YAAc5rD,GAC/B0mC,EAAO0jB,cA9LP14D,EAASp/B,YACX9E,KAAKq+F,kBAAoB/5F,EAAWhE,cAGpCN,KAAKo9F,eACFjkE,IAAI,YAAan5B,KAAKy9F,aACtBtkE,IAAI,UAAWn5B,KAAKm+F,aACpBhlE,IAAI,aAAcn5B,KAAKm+F,aAEvBhlE,IAAI,aAAcn5B,KAAKg+F,cACvB7kE,IAAI,WAAYn5B,KAAKm+F,aACrBhlE,IAAI,cAAen5B,KAAKm+F,cAlHjC,MA4HEvjB,GAAFj2E,UAAAo5F,aAAE,SAAanyE,EAAWE,EAAW2J,GAAnC,GAAF51B,GAAAG,SAAA,KAAAy1B,IAAqCA,KACjC,IAAM6oE,GAAgBt+F,KAAKu+F,eACLv+F,KAAKu+F,gBAAkBv+F,KAAKq+F,kBAAkB3vE,wBAC9D8vE,EAAVzoE,MAAgC+mE,GAAiCrnE,EAAO50B,UAEhE40B,GAAOgpE,WACT7yE,EAAI0yE,EAAcrrF,KAAOqrF,EAAcprF,MAAQ,EAC/C4Y,EAAIwyE,EAAc/wE,IAAM+wE,EAAcj/E,OAAS,EAGjD,IAAM85D,GAAS1jD,EAAO0jD,QAAUua,EAAyB9nE,EAAGE,EAAGwyE,GACzD1zD,EAAUhf,EAAI0yE,EAAcrrF,KAC5B4tC,EAAU/0B,EAAIwyE,EAAc/wE,IAC5BwE,EAAWysE,EAAgBzB,cAE3B7jB,EAAS10E,SAAS8gC,cAAc,MACtC4zC,GAAO1zE,UAAU4Y,IAAI,sBAErB86D,EAAOtmE,MAAMK,KAAU23B,EAAUuuC,EAArC,KACID,EAAOtmE,MAAM2a,IAASszB,EAAUs4B,EAApC,KACID,EAAOtmE,MAAMyM,OAAqB,EAAT85D,EAA7B,KACID,EAAOtmE,MAAMM,MAAoB,EAATimE,EAA5B,KAGID,EAAOtmE,MAAMtT,gBAAkBm2B,EAAOwwB,OAAS,KAC/CizB,EAAOtmE,MAAM8rF,mBAAwB3sE,EAAzC,KAEI/xB,KAAKq+F,kBAAkB74D,YAAY0zC,GAInCsa,EAA0Bta,GAE1BA,EAAOtmE,MAAMkC,UAAY,UAGzB,IAAM6pF,GAAY,GAAIhC,IAAU38F,KAAMk5E,EAAQzjD,EA2B9C,OAzBAkpE,GAAU9pF,MAAQ6nF,GAAYJ,UAG9Bt8F,KAAKq9F,eAAej/E,IAAIugF,GAEnBlpE,EAAO2oE,aACVp+F,KAAK4+F,2BAA6BD,GAKpC3+F,KAAK6+F,sBAAsB,WACzB,GAAMC,GAA8BH,IAAc9+F,EAAK++F,0BAEvDD,GAAU9pF,MAAQ6nF,GAAYH,QAMzB9mE,EAAO2oE,YAAgBU,GAAgCj/F,EAAKs9F,gBAC/DwB,EAAU/B,WAEX7qE,GAEI4sE,GAIT/jB,EAAFj2E,UAAAk4F,cAAE,SAAc8B,GACZ,GAAMI,GAAY/+F,KAAKq9F,eAAejkE,OAAOulE,EAY7C,IAVIA,IAAc3+F,KAAK4+F,6BACrB5+F,KAAK4+F,2BAA6B,MAI/B5+F,KAAKq9F,eAAe7vE,OACvBxtB,KAAKu+F,eAAiB,MAInBQ,EAAL,CAIA,GAAMC,GAAWL,EAAUpsF,QACrBisF,EAAVzoE,MAAgC+mE,GAAiC6B,EAAUlpE,OAAO50B,UAE9Em+F,GAASpsF,MAAM8rF,mBAAwBF,EAAgBxB,aAA3D,KACIgC,EAASpsF,MAAMugB,QAAU,IACzBwrE,EAAU9pF,MAAQ6nF,GAAYF,WAG9Bx8F,KAAK6+F,sBAAsB,WACzBF,EAAU9pF,MAAQ6nF,GAAYD,OAC9BuC,EAAmB,WAAE7mC,YAAY6mC,IAChCR,EAAgBxB,gBAIrBpiB,EAAFj2E,UAAAs6F,WAAE,WACEj/F,KAAKq9F,eAAejzF,QAAQ,SAAA8uE,GAAU,MAAAA,GAAO0jB,aAI/ChiB,EAAFj2E,UAAAtE,mBAAE,SAAmBkS,GAAnB,GAAF1S,GAAAG,IACSuS,IAAWA,IAAYvS,KAAKk/F,kBAKjCl/F,KAAKm7E,uBAELn7E,KAAKoS,QAAQM,kBAAkB,WAC7B7S,EAAKu9F,eAAehzF,QAAQ,SAACykB,EAAI7vB,GAC7B,MAAAuT,GAAQ0+B,iBAAiBjyC,EAAM6vB,EAAIhvB,EAAKy9F,mBAG9Ct9F,KAAKk/F,gBAAkB3sF,IA0DjBqoE,EAAVj2E,UAAAk6F,sBAAA,SAAgChwE,EAAcojB,OAA9C,KAAAA,IAA8CA,EAA9C,GACIjyC,KAAKoS,QAAQM,kBAAkB,WAAM,MAAAsf,YAAWnD,EAAIojB,MAItD2oC,EAAFj2E,UAAAw2E,qBAAE,WAAA,GAAFt7E,GAAAG,IACQA,MAAKk/F,iBACPl/F,KAAKo9F,eAAehzF,QAAQ,SAACykB,EAAI7vB,GAC/Ba,EAAoB,gBAAEkyC,oBAAoB/yC,EAAM6vB,EAAIhvB,EAAKy9F,kBAnTjE1iB,Ke+Cap4E,GACT,GAAIwP,GAAAA,eAAoC,2CAuE1C,QAAF0nE,GAAsBx5E,EACR4+B,EACAoF,EAC+CzjC,EACJ0jC,GAJnCnkC,KAAtBE,YAAsBA,EA1CpBF,KAAFm5E,OAA6C,EAmB7Cn5E,KAAA6mC,WAA+B,EAqB/B7mC,KAAA2mC,gBAAoC,EAQhC3mC,KAAKm/F,eAAiB1+F,MACtBT,KAAKo/F,gBAAkB,GAAIxkB,IAAe56E,KAAM8+B,EAAQ5+B,EAAagkC,GAE/C,mBAAlBC,IACFnkC,KAAKm/F,eAAet+F,WAAak8F,cAAe,EAAGC,aAAc,IAjIvE,MA0FEvxF,QAAFC,eACMguE,EADN/0E,UAAA,gBAAE,WACiB,MAAO3E,MAAK6mC,eAC7B,SAAa5lC,GACXjB,KAAK6mC,UAAY5lC,EACjBjB,KAAKq/F,gEAQP5zF,OAAFC,eACMguE,EADN/0E,UAAA,eAAE,WACgB,MAAO3E,MAAKs/F,UAAYt/F,KAAKE,YAAYI,mBACzD,SAAYsU,GACV5U,KAAKs/F,SAAW1qF,EAChB5U,KAAKq/F,gEA2BP3lB,EAAF/0E,UAAAwP,SAAE,WACEnU,KAAK2mC,gBAAiB,EACtB3mC,KAAKq/F,gCAGP3lB,EAAF/0E,UAAAsD,YAAE,WACEjI,KAAKo/F,gBAAgBjkB,wBAIvBzB,EAAF/0E,UAAAs6F,WAAE,WACEj/F,KAAKo/F,gBAAgBH,cAOvBxzF,OAAFC,eAAMguE,EAAN/0E,UAAA,oBAAE,WACE,OACE85F,SAAUz+F,KAAKy+F,SACftlB,OAAQn5E,KAAKm5E,OACblzB,MAAOjmD,KAAKimD,MACZplD,UAANk1B,MAAqB/1B,KAAKm/F,eAAet+F,UAAcb,KAAKa,WACtDD,qBAAsBZ,KAAKm/F,eAAev+F,uDAQ9C6K,OAAFC,eAAMguE,EAAN/0E,UAAA,sBAAE,WACE,MAAO3E,MAAKW,YAAcX,KAAKm/F,eAAex+F,0CAIxC+4E,EAAV/0E,UAAA06F,yCACSr/F,KAAKW,UAAYX,KAAK2mC,gBACzB3mC,KAAKo/F,gBAAgB/+F,mBAAmBL,KAAK4U,UAmBjD8kE,EAAF/0E,UAAA46F,OAAE,SAAOC,EAAkC1zE,EAAe2J,GACtD,WADJ,KAAA3J,IAA2CA,EAA3C,GAC6B,gBAAd0zE,GACFx/F,KAAKo/F,gBAAgBrB,aAAayB,EAAW1zE,EAA1DiK,MAAiE/1B,KAAKo6E,aAAiB3kD,IAE1Ez1B,KAAKo/F,gBAAgBrB,aAAa,EAAG,EAAlDhoE,MAAyD/1B,KAAKo6E,aAAiBolB,oBAjJ/ExgG,KAAC0C,EAAAA,UAADC,OACEwC,SAAU,4BACVvC,SAAU,YACVpD,MACEC,MAAS,aACTghG,+BAAgC,qDA5CpCzgG,KAAE0I,EAAAA,aAIF1I,KAAEC,EAAAA,SAPFD,KAAQoD,EAAAA,WAkHRpD,SAAAqD,GAAAZ,aAAAzC,KAAesD,EAAAA,WAAftD,KAA2BuD,EAAAA,OAA3BZ,MAAkCa,QAClCxD,KAAAyD,OAAAhB,aAAAzC,KAAesD,EAAAA,WAAftD,KAA2BuD,EAAAA,OAA3BZ,MAAkC6uB,EAAAA,8CA9DlCy1B,QAAAjnD,KAAGO,EAAAA,MAAHoC,MAAS,oBAGT+9F,YAAA1gG,KAAGO,EAAAA,MAAHoC,MAAS,wBAMT88F,WAAAz/F,KAAGO,EAAAA,MAAHoC,MAAS,uBAOTw3E,SAAAn6E,KAAGO,EAAAA,MAAHoC,MAAS,qBAOTd,YAAA7B,KAAGO,EAAAA,MAAHoC,MAAS,wBAMThB,WAAA3B,KAAGO,EAAAA,MAAHoC,MAAS,uBAYTiT,UAAA5V,KAAGO,EAAAA,MAAHoC,MAAS,uBAtGT+3E,iCCAA,sBAiBA16E,KAAC4D,EAAAA,SAADjB,OACEkB,SAAUE,GAAiB68B,EAAAA,gBAC3Bx8B,SAAUs2E,GAAW32E,IACrBU,cAAei2E,QApBjBz2E,mBC2DE,QAAF08F,GAAgEjjE,GAAA18B,KAAhE08B,eAAgEA,EAL9D18B,KAAF6U,MAA2C,YAGzC7U,KAAFW,UAA+B,EAA/B,sBApBA3B,KAACgH,EAAAA,UAADrE,OAAAjD,cAAAC,EAAAA,kBAAAC,KACEC,gBAAiBC,EAAAA,wBAAnBC,OACEoF,SAAF,sBACE+B,QAAF,2jCACED,SAAU,GACVzH,MACFC,MAAA,sBACMmhG,4CAAN,4BACIC,sCAAJ,sBACIC,uCAAJ,WACIvvE,kCAAJ,4KAYAovE,EAAAtgG,kEAFAsgG,iCCzDA,sBAYA3gG,KAAC4D,EAAAA,SAADjB,OACEyB,SAAUu8F,IACVl8F,cAAek8F,QAdjBr3C,KCcAy3C,GAAA,yBAdA,MAAAA,MAeaC,GACTpgG,EAAcmgG,IAGdE,GAA2B,kFA2B7BpgG,GAAF0qC,SAAqB,sBAAsB01D,OAH3C,MAFiCv7F,GAAjCuqC,EAAAnvC,kBAjBAd,KAACgH,EAAAA,UAADrE,OAAAwC,SAAA,eACEvC,SAAU,cACVqE,SAAU,4JACVvH,cAAFC,EAAAA,kBAAAC,KACEC,gBAAFC,EAAAA,wBAAAC,OACE8C,QAAF,YACEqE,QAAF,mkBACE1H,MACFC,MAAA,eACMyI,KAAN,QACIg5F,gCAAJ,WACIn+F,uBAAJ,sBACI2rC,yBAAJ,gBAIAuB,EAAA5vC,wCAGA4vC,O1CVI4vC,GAAmB,EAGvBqF,GAAA,WACE,QAAFA,GAEW31D,EAEA24B,sBAFAlnD,KAAXuuB,OAAWA,EAEAvuB,KAAXknD,YAAWA,EAzCX,MAAAg9B,MAyDa11C,GACT,GAAIx8B,GAAAA,eAAyC,6CA6D/C,QAAFg9B,GACY1qB,EACAjM,EACiDqzE,EACpCngD,GAHbvrC,KAAZskB,SAAYA,EACAtkB,KAAZqY,mBAAYA,EACiDrY,KAA7D0rF,QAA6DA,EACpC1rF,KAAzBurC,MAAyBA,EApCzBvrC,KAAA0mC,WAAsB,EACtB1mC,KAAA2rF,SAAoB,EACpB3rF,KAAA6mC,WAAsB,EACtB7mC,KAAA+rF,qBAAiC,GAY/B/rF,KAAF+gB,GAAwB,cAAc89D,KAYpC7+E,KAAFqjD,kBAAyC,GAAI7sC,GAAAA,aAG3CxW,KAAF2T,cAA2B,GAAIC,GAAAA,QAH/B,MArBEnI,QAAFC,eAAMsjC,EAANrqC,UAAA,gBAAE,WAAiB,MAAO3E,MAAK0rF,SAAW1rF,KAAK0rF,QAAQvgD,0CAGrD1/B,OAAFC,eAAMsjC,EAANrqC,UAAA,gBAAE,WAA0B,MAAO3E,MAAK0mC,2CAStCj7B,OAAFC,eACMsjC,EADNrqC,UAAA,gBAAE,WACiB,MAAQ3E,MAAKurC,OAASvrC,KAAKurC,MAAM5qC,UAAaX,KAAK6mC,eACpE,SAAa5lC;gBAAcjB,KAAK6mC,UAAY5oB,EAAAA,sBAAsBhd,oCAGlEwK,OAAFC,eAAMsjC,EAANrqC,UAAA,qBAAE,WAAsB,MAAO3E,MAAK0rF,SAAW1rF,KAAK0rF,QAAQvjD,+CAqB1D18B,OAAFC,eAAMsjC,EAANrqC,UAAA,cAAE,WACE,MAAO3E,MAAK2rF,yCAOdlgF,OAAFC,eAAMsjC,EAANrqC,UAAA,iBAAE,WAEE,OAAQ3E,KAAK2kB,kBAAkB9e,aAAe,IAAIC,wCAIpDkpC,EAAFrqC,UAAAu/C,OAAE,WACOlkD,KAAK0mC,YACR1mC,KAAK0mC,WAAY,EACjB1mC,KAAKqY,mBAAmBxB,eACxB7W,KAAK4rF,8BAKT58C,EAAFrqC,UAAAy/C,SAAE,WACMpkD,KAAK0mC,YACP1mC,KAAK0mC,WAAY,EACjB1mC,KAAKqY,mBAAmBxB,eACxB7W,KAAK4rF,8BAKT58C,EAAFrqC,UAAAmT,MAAE,WACE,GAAMvF,GAAUvS,KAAK2kB,iBAEQ,mBAAlBpS,GAAQuF,OACjBvF,EAAQuF,SASZk3B,EAAFrqC,UAAAknF,gBAAE,WACO7rF,KAAK2rF,UACR3rF,KAAK2rF,SAAU,EACf3rF,KAAKqY,mBAAmBxB,iBAS5Bm4B,EAAFrqC,UAAAmnF,kBAAE,WACM9rF,KAAK2rF,UACP3rF,KAAK2rF,SAAU,EACf3rF,KAAKqY,mBAAmBxB,iBAK5Bm4B,EAAFrqC,UAAA+1C,SAAE,WACE,MAAO16C,MAAK6kD,WAId7V,EAAFrqC,UAAAiV,eAAE,SAAetY,GACTA,EAAMuY,UAAYK,EAAAA,OAAS5Y,EAAMuY,UAAYM,EAAAA,QAC/Cna,KAAK2lD,wBAGLrkD,EAAMC,mBAQVytC,EAAFrqC,UAAAghD,sBAAE,WACO3lD,KAAKW,WACRX,KAAK0mC,WAAY1mC,KAAKmrC,WAAYnrC,KAAK0mC,UACvC1mC,KAAKqY,mBAAmBxB,eACxB7W,KAAK4rF,2BAA0B,KAKnC58C,EAAFrqC,UAAAgb,aAAE,WACE,MAAO3f,MAAKW,SAAW,KAAO,KAIhCquC,EAAFrqC,UAAAggB,gBAAE,WACE,MAAO3kB,MAAKskB,SAAShkB,eAGvB0uC,EAAFrqC,UAAAqzE,mBAAE,WAME,GAAIh4E,KAAK0mC,UAAW,CAClB,GAAMme,GAAY7kD,KAAK6kD,SAEnBA,KAAc7kD,KAAK+rF,uBACrB/rF,KAAK+rF,qBAAuBlnC,EAC5B7kD,KAAK2T,cAAchI,UAKzBqjC,EAAFrqC,UAAAsD,YAAE,WACEjI,KAAK2T,cAAcO,YAIb86B,EAAVrqC,UAAAinF,0BAAA,SAAoC1kC,OAApC,KAAAA,IAAoCA,GAApC,GACIlnD,KAAKqjD,kBAAkBlsC,KAAK,GAAI+sE,IAAyBlkF,KAAMknD,oBA/LnEloD,KAACgH,EAAAA,UAADrE,OAAAwC,SAAA,aACEvC,SAAU,YACVpD,MACF0I,KAAA,SACMq7B,kBAAN,iBACIypD,uBAAJ,WACIC,8BAAJ,WACIC,qBAAsB,SACtB5pD,OAAJ,KACI6nB,uBAAJ,sBACIpoD,uBAAJ,sBACIoqF,8BAAJ,WACIhqF,UAAJ,0BACIitB,YAAJ,yBACI3wB,MAAS,cAEbyH,QAAA,k5CACAD,SAAA,qWACEvH,cAAFC,EAAAA,kBAAAC,KACEC,gBAAFC,EAAAA,wBAAAC,8FAnEAC,SAAEqD,GAAFZ,aAAAzC,KAAAsD,EAAAA,WAAAtD,KAAAuD,EAAAA,OAAAZ,MAAA6sC,QAFAxvC,KAAEiwC,GAAFxtC,aAAAzC,KAAAsD,EAAAA,cAcA0sC,EAAA3vC,2DAwEAsB,WAAA3B,KAAAO,EAAAA,QAGA8jD,oBAAArkD,KAAAyY,EAAAA,UAYAu3B,iCClHA,sBAgBAhwC,KAAC4D,EAAAA,SAADjB,OACEkB,SAAUI,GAAiBH,EAAAA,aAAcwlD,IACzCllD,SAAU4rC,GAAWC,IACrBxrC,cAAeurC,GAAWC,QAnB5BQ,KCWa28C,GACX,GAAIp6E,GAAAA,eAA6B,4BCD/BguB,GAAe,6BAajBhgC,KAAF+gB,GAAwB,aAAaif,KAxBrC,sBAeAhhC,KAAC0C,EAAAA,UAADC,OACEwC,SAAU,YACV3F,MACEC,MAAS,YACTyI,KAAQ,QACRshC,YAAa,4BAIjBznB,KAAA/hB,KAAGO,EAAAA,SAxBH8sF,KCoBaC,IAIXC,mBAAoB33E,EAAAA,QAAQ,sBAE1BC,EAAAA,MAAM,QAASjC,EAAAA,OAAQugB,QAAS,EAAGre,UAAW,oBAC9CE,EAAAA,WAAW,iBACTpC,EAAAA,OAAQugB,QAAS,EAAGre,UAAW,sBAC/BG,EAAAA,QAAQ,+CChBds5B,GAAA,yBAbA,MAAAA,MCWIvO,GAAe,6BAgBjBhgC,KAAF0gF,MAAoC,QAGlC1gF,KAAF+gB,GAAwB,YAAYif,KA9BpC,sBAeAhhC,KAAC0C,EAAAA,UAADC,OACEwC,SAAU,WACV3F,MACEC,MAAS,WACT+tF,oBAAqB,iBACrBhkD,YAAa,KAEbtM,eAAgB,8BAKpBwkD,QAAA1hF,KAAGO,EAAAA,QAGHwhB,KAAA/hB,KAAGO,EAAAA,SA9BHktF,iCCAA,sBAYAztF,KAAC0C,EAAAA,UAADC,OACEwC,SAAU,gBAbZuoF,iCCAA,sBAiBA1tF,KAAC0C,EAAAA,UAADC,OACEwC,SAAU,sBAlBZwoF,iCCAA,sBAYA3tF,KAAC0C,EAAAA,UAADC,OACEwC,SAAU,kBAbZyoF,iCCAA,sBAYA5tF,KAAC0C,EAAAA,UAADC,OACEwC,SAAU,kBAbZ0oF,KCuDI7sD,GAAe,EASnB8sD,GAAA,WACE,QAAFA,GAAqB5sF,GAAAF,KAArBE,YAAqBA,EAjErB,MAAA4sF,MAwEaC,GACT7oF,EAAW4oF,GAAkB,WAiBpBE,GACT,GAAIh7E,GAAAA,eAA2C,iDAyJjD,QAAF28B,GACazuC,EACCmY,EACsC40E,EAC1B72E,EAER82E,EAEJ3oF,EACA6N,EACmCsqB,GAV/C,GAAF78B,GAWIC,EAXJC,KAAAC,KAWUE,IAXVF,WACaH,GAAbK,YAAaA,EACCL,EAAdwY,mBAAcA,EAEYxY,EAA1BuW,KAA0BA,EAERvW,EAAlBqtF,UAAkBA,EAEJrtF,EAAd0E,UAAcA,EACA1E,EAAduS,QAAcA,EA7GdvS,EAAAstF,8BAAyC,EAgCzCttF,EAAAutF,oBAA+B,EAW7BvtF,EAAFwtF,yBAAqC,GASrCxtF,EAAAytF,WAAuB,GAGrBztF,EAAF0tF,aAAyB,YAAYvtD,KAGnCngC,EAAF0qC,SAAa,wBAAwBvK,KAuDjCngC,EAAK2tF,cAAgBP,MACrBptF,EAAKklF,WAAallF,EAAK2tF,cAAcC,OAAS,OAC9C5tF,EAAK6tF,mBAAwC,mBAAnBhxD,EAG1B78B,EAAKm/E,WAAckO,GAAaA,EAAUlO,WAAckO,EAAUlO,WAAa,WA3BnF,MA9FkCt6E,GAAlCiqC,EAAA7uC,GAME2L,OAAFC,eACMijC,EADNhqC,UAAA,kBAAE,WAC2C,MAAO3E,MAAK8/E,iBACvD,SAAe7+E,GAAf,GAAFpB,GAAAG,KACUyrB,EAAWzrB,KAAK8/E,WAEtB9/E,MAAK8/E,YAAc7+E,GAAUjB,KAAKktF,WAAaltF,KAAKktF,UAAUlO,YAAe,SAEpD,YAArBh/E,KAAK8/E,aAA6Br0D,IAAaxqB,IAE7CjB,KAAKoS,QACPpS,KAAY,QAAEi9C,SAAShzC,KAAKC,EAAAA,KAAK,IAAIhF,UAAU,WAC7CrF,EAAY,QAAE6S,kBAAkB,WAAM,MAAA7S,GAAK8tF,uBAG7Cn8E,QAAQC,UAAUC,KAAK,WAAM,MAAA7R,GAAK8tF,uDAOxCliF,OAAFC,eACMijC,EADNhqC,UAAA,0BAAE,WACoC,MAAO3E,MAAK4tF,yBAChD,SAAuB3sF,GACrBjB,KAAK4tF,oBAAsB3vE,EAAAA,sBAAsBhd,oCAQnDwK,OAAFC,eAAMijC,EAANhqC,UAAA,0BAAE,WACE,MAA2B,WAApB3E,KAAK+kF,aAA4B/kF,KAAKotF,oDAI/C3hF,OAAFC,eAAMijC,EAANhqC,UAAA,sBAAE,WAAgC,MAA2B,UAApB3E,KAAK+kF,4CAM5Ct5E,OAAFC,eACMijC,EADNhqC,UAAA,iBAAE,WAC0B,MAAO3E,MAAKstF,gBACtC,SAAcrsF,GACZjB,KAAKstF,WAAarsF,EAClBjB,KAAK6tF,iDAkBPpiF,OAAFC,eACMijC,EADNhqC,UAAA,kBAAE,WAEE,MAA2B,WAApB3E,KAAKg/E,YAAgD,UAArBh/E,KAAK4jF,YAA0B,OAAS5jF,KAAK4jF,iBAEtF,SAAe3iF,GACTA,IAAUjB,KAAK4jF,cACjB5jF,KAAK4jF,YAAc3iF,GAASjB,KAAKwtF,cAAcC,OAAS,OACxDztF,KAAKqY,mBAAmBxB,iDAkD5B83B,EAAFhqC,UAAAk5D,0BAAE,WACE,MAAO79D,MAAK8tF,yBAA2B9tF,KAAKE,aAG9CyuC,EAAFhqC,UAAAqD,mBAAE,WAAA,GAAFnI,GAAAG,IACIA,MAAK+tF,wBACD/tF,KAAK2lF,SAAS1iC,aAChBjjD,KAAKE,YAAYI,cAAckF,UAC1B4Y,IAAI,uBAAuBpe,KAAK2lF,SAAS1iC,aAIhDjjD,KAAK2lF,SAASliC,aAAax5C,KAAKuL,EAAAA,UAAS,OAAetQ,UAAU,WAChErF,EAAKmuF,wBACLnuF,EAAKouF,sBACLpuF,EAAKwY,mBAAmBxB,gBAI1B,IAAMq3E,GAAeluF,KAAK2lF,SAAS1jC,WAAajiD,KAAK2lF,SAAS1jC,UAAUisC,cAAgB5/E,EAAAA,KACxFpC,GAAAA,MAAMgiF,EAAcluF,KAAKmuF,gBAAgBlpF,QAASjF,KAAKouF,gBAAgBnpF,SAClEC,UAAU,WAAM,MAAArF,GAAKwY,mBAAmBxB,iBAG7C7W,KAAKquF,cAAcppF,QAAQgF,KAAKuL,EAAAA,UAAU,OAAOtQ,UAAU,WACzDrF,EAAKguF,gBACLhuF,EAAKwY,mBAAmBxB,iBAI1B7W,KAAKsuF,eAAerpF,QAAQgF,KAAKuL,EAAAA,UAAU,OAAOtQ,UAAU,WAC1DrF,EAAKouF,sBACLpuF,EAAKwY,mBAAmBxB,kBAI5B83B,EAAFhqC,UAAAwU,sBAAE,WACEnZ,KAAK+tF,wBACD/tF,KAAKmtF,8BACPntF,KAAK2tF,oBAITh/C,EAAFhqC,UAAAC,gBAAE,WAEE5E,KAAKqtF,yBAA2B,QAChCrtF,KAAKqY,mBAAmB8S,iBAI1BwjB,EAAFhqC,UAAA4pF,eAAE,SAAeC,GACb,GAAMvsC,GAAYjiD,KAAK2lF,SAAW3lF,KAAK2lF,SAAS1jC,UAAY,IAC5D,OAAOA,IAAaA,EAAUusC,IAGhC7/C,EAAFhqC,UAAA8pF,gBAAE,WACE,SAAUzuF,KAAK2lF,UAAY3lF,KAAK2lF,SAASx7C,aAAenqC,KAAK0uF,oBAG/D//C,EAAFhqC,UAAAgqF,UAAE,WACE,QAAS3uF,KAAK4uF,aAGhBjgD,EAAFhqC,UAAAkqF,kBAAE,WACE,MAAO7uF,MAAK8uF,iBAAmB9uF,KAAK2lF,SAASoJ,kBAAoB/uF,KAAKgvF,qBAGxErgD,EAAFhqC,UAAAsqF,wBAAE,WAEE,MAA2B,WAApBjvF,KAAKg/E,aAA4Bh/E,KAAK2uF,aACzC3uF,KAAK2uF,cAAgB3uF,KAAK6uF,qBAGhClgD,EAAFhqC,UAAA2lC,kBAAE,WAEE,MAAOtqC,MAAK2uF,aAAmC,WAApB3uF,KAAKg/E,YAA2Bh/E,KAAKyuF,mBAIlE9/C,EAAFhqC,UAAAuqF,sBAAE,WACE,MAAQlvF,MAAKsuF,gBAAkBtuF,KAAKsuF,eAAenpF,OAAS,GACxDnF,KAAK2lF,SAASwJ,WAAc,QAAU,QAI5CxgD,EAAFhqC,UAAAqgF,qBAAE,WAAA,GAAFnlF,GAAAG,IACQA,MAAKsqC,qBAAuBtqC,KAAK8uF,iBAG/B9uF,KAAK0tF,qBACP1tF,KAAKotF,oBAAqB,EAE1Bz0C,EAAAA,UAAU34C,KAAKovF,OAAO9uF,cAAe,iBAAiB2J,KAAKC,EAAAA,KAAK,IAAIhF,UAAU,WAC5ErF,EAAKutF,oBAAqB,KAI9BptF,KAAK+kF,WAAa,SAClB/kF,KAAKqY,mBAAmBxB,iBAQpB83B,EAAVhqC,UAAAqpF,iCACI,GAAIhuF,KAAK2lF,SAASx7C,aAAenqC,KAAK0uF,kBACpC,KAAMW,MAKF1gD,EAAVhqC,UAAAkpF,yBACI7tF,KAAKsvF,iBACLtvF,KAAKiuF,uBAOCt/C,EAAVhqC,UAAA2qF,oCACI,IAAItvF,KAAKquF,cAAe,CACtB,GAAIkB,OAAV,GACUC,MAAV,EACMxvF,MAAKquF,cAAcjkF,QAAQ,SAACqlF,GAC1B,GAAmB,UAAfA,EAAK/O,MAAmB,CAC1B,GAAI6O,GAAa1vF,EAAK6vF,UACpB,KAAMC,GAAmC,QAE3CJ,GAAYE,MACP,IAAmB,QAAfA,EAAK/O,MAAiB,CAC/B,GAAI8O,EACF,KAAMG,GAAmC,MAE3CH,GAAUC,OAUV9gD,EAAVhqC,UAAAspF,+BACI,GAAIjuF,KAAK2lF,SAAU,CACjB,GAAIx4C,KAEJ,IAAqC,SAAjCntC,KAAKkvF,wBAAoC,CAC3C,GAAMU,GAAY5vF,KAAKquF,cACnBruF,KAAKquF,cAAc/tE,KAAK,SAAAmvE,GAAQ,MAAe,UAAfA,EAAK/O,QAAqB,KACxDmP,EAAU7vF,KAAKquF,cACjBruF,KAAKquF,cAAc/tE,KAAK,SAAAmvE,GAAQ,MAAe,QAAfA,EAAK/O,QAAmB,IAExDkP,GACFziD,EAAIvjC,KAAKgmF,EAAU7uE,IACV/gB,KAAKstF,YACdngD,EAAIvjC,KAAK5J,KAAKutF,cAGZsC,GACF1iD,EAAIvjC,KAAKimF,EAAQ9uE,QAEV/gB,MAAKsuF,iBACdnhD,EAAMntC,KAAKsuF,eAAeliF,IAAI,SAAAs6C,GAAS,MAAAA,GAAM3lC,KAG/C/gB,MAAK2lF,SAASz4C,kBAAkBC,KAK1BwB,EAAZhqC,UAAAopF,sBAAE,WACE,IAAK/tF,KAAK2lF,SACR,KAAMmK,MAQVnhD,EAAFhqC,UAAAgpF,iBAAE,WACE,GAAMoC,GAAU/vF,KAAKovF,OAASpvF,KAAKovF,OAAO9uF,cAAgB,IAE1D,IAAwB,YAApBN,KAAKg/E,YAA6B+Q,GAAYA,EAAQ5lF,SAAShF,QAC9D4qF,EAAQlqF,YAAYC,UAIrB9F,KAAKuE,WAAcvE,KAAKuE,UAAUO,WAAtC,CAMA,IAAKN,SAAwB,gBAAEiB,SAASzF,KAAKE,YAAYI,eAEvD,YADAN,KAAKmtF,8BAA+B,EAItC,IAAI6C,GAAa,EACbC,EAAW,EACTC,EAAWlwF,KAAK8tF,wBAAwBxtF,cAAc03D,iBAC1D,iCACIm4B,EAASnwF,KAAK8tF,wBAAwBxtF,cAAc03D,iBACtD,8BACJ,IAAIh4D,KAAKovF,QAAUpvF,KAAKovF,OAAO9uF,cAAc6J,SAAShF,OAAQ,CAM5D,IAAoB,GALdirF,GAAiBpwF,KAAKqwF,aACxBrwF,KAAK8tF,wBAAwBxtF,cAAcouB,yBACzC4hE,EAAatwF,KAAKqwF,aAAaN,EAAQ5lF,SAAS,GAAGukB,yBACrD6hE,EAAa,EAEvB9lC,EAAA,EAA0B/5C,EAAAq/E,EAAQ5lF,SAARsgD,EAA1B/5C,EAAAvL,OAA0BslD,IAAkB,CACpC8lC,GADR7/E,EAAA+5C,GAC4BvyC,YAEtB83E,EAAaM,EAAaF,EA9aN,EA+apBH,EAAWM,EAAa,EAhbH,IAgbOA,EAAkCC,GAAwB,EAGxF,IAAK,GAAIxlF,GAAI,EAAGA,EAAIklF,EAAS/qF,OAAQ6F,IACnCklF,EAAStzC,KAAK5xC,GAAG4H,MAAMM,MAAW88E,EAAxC,IAEI,KAAK,GAAIhlF,GAAI,EAAGA,EAAImlF,EAAOhrF,OAAQ6F,IACjCmlF,EAAOvzC,KAAK5xC,GAAG4H,MAAMM,MAAW+8E,EAAtC,IAGIjwF,MAAKmtF,8BAA+B,IAI9Bx+C,EAAVhqC,UAAA0rF,aAAA,SAAuBI,GACnB,MAAOzwF,MAAKoW,MAA4B,QAApBpW,KAAKoW,KAAKnV,MAAkBwvF,EAAKz4D,MAAQy4D,EAAKx9E,qBAxZtEjU,KAACgH,EAAAA,UAADrE,OAAAwC,SAAA,iBACEvC,SAAU,eACVqE,SAAU,0mfAMVzH,MACEC,MAAJ,iBACIiyF,6CAAJ,2BACIC,yCAAJ,uBACIC,4CAAJ,0BACIC,2CAAJ,yBACIC,iCAAJ,sBACAC,mCAAA,iBACAC,sCAAA,sBACMC,0CAAN,4BACIC,kCAAJ,oBACIC,oCAAJ,sBACIC,sBAAJ,mBACI9xB,qBAAJ,oBACIC,mBAAJ,kBACI8xB,uBAAJ,8BACIC,qBAAJ,4BACIC,sBAAJ,6BACIC,mBAAJ,0BACIC,mBAAJ,0BACIC,qBAAJ,4BACIC,qBAAJ,4BACIphE,kCAAJ,uBAEA1uB,QAAA,SACAnD,cAAAC,EAAAA,kBAAAC,KACAC,gBAAAC,EAAAA,wBAAAC,WAIA4vC,EAAA3nB,eAAA,WAAA,QACAhoB,KAAA0I,EAAAA,aACA1I,KAAAE,EAAAA,oBACAF,SAAAqD,GAAAZ,aAAAzC,KAAAsD,EAAAA,WAAAtD,KAAAuD,EAAAA,OAAAZ,MAAAyqF,QACAptF,KAAAie,EAAAA,eAAAxb,aAAAzC,KAAmCsD,EAAAA,aACnCtD,SAAAqD,GAAAZ,aAAAzC,KAAAsD,EAAAA,WAAAtD,KAAAuD,EAAAA,OAAAZ,MAAAqrF,QACAhuF,KAAAoD,EAAAA,wHAxHAusC,EAAAtvC,gBAJA2/E,aAAAhgF,KAAAO,EAAAA,QAwOAqyF,qBAAA5yF,KAAAO,EAAAA,QA/OAmwF,YAAA1wF,KAAAO,EAAAA,QAiPAwlF,aAAA/lF,KAAAO,EAAAA,QAtMAsyF,eAAA7yF,KAAAuV,EAAAA,UAAA5S,MAAA,eA5BAmsF,0BAAA9uF,KAAAuV,EAAAA,UAAA5S,MAAA,yBAuOAmwF,qBAAA9yF,KAAAuV,EAAAA,UAAA5S,MAAA,0GA3GA+sF,oBAAA1vF,KAAAw/B,EAAAA,aAAA78B,MAAAgrF,MAqBAiC,cAAA5vF,KAAAw/B,EAAAA,aAAA78B,MAAA+qF,MAsBA4B,iBAAAtvF,KAAQoJ,EAAAA,gBAARzG,MAAA0qF,MAsBAgC,gBAAArvF,KAAAoJ,EAAAA,gBAAAzG,MAAA8qF,MAmBA0B,kBAAAnvF,KAAAoJ,EAAAA,gBAAAzG,MAAAirF,MAEAwB,kBAAApvF,KAAAoJ,EAAAA,gBAAYzG,MAAZkrF,OAEAl+C,GACAo+C,gCC5OA,sBAoBA/tF,KAAC4D,EAAAA,SAADjB,OACE8B,cACE4oF,GACA19C,GACA89C,GACAC,GACAC,GACAC,GACAC,IAEFhqF,SACEC,EAAAA,aACAI,EAAAA,iBAEFE,SACEipF,GACA19C,GACA89C,GACAC,GACAC,GACAC,GACAC,QAzCJn9C,KvByCIqiD,GAA+B,EAGnC9P,GAAA,WACE,QAAFA,GAEW1zD,EAEA60B,GAFApjD,KAAXuuB,OAAWA,EAEAvuB,KAAXojD,OAAWA,EAjDX,MAAA6+B,MAuDA+P,GAAA,yBAvDA,MAAAA,MAwDaC,GACTtyF,EAAmBqyF,IASV7P,GACT,GAAInwE,GAAAA,eAA8C,oCAChDC,WAAY,OACZC,QAASggF,mBA+Fb,QAAFxQ,GACYrpE,EACAnY,EACkCugC,GAH5C,GAAF5gC,GAIIC,EAJJC,KAAAC,OAAAA,WACYH,GAAZwY,mBAAYA,EACAxY,EAAZK,YAAYA,EAlEVL,EAAFkiF,WAAuB,EAIrBliF,EAAFkkF,SAAqB,EAenBlkF,EAAFiqB,YAA0D,KAoBxDjqB,EAAFqiF,eACM,GAAI1rE,GAAAA,aAGR3W,EAAFw6B,OAAkD,GAAI7jB,GAAAA,aAGpD3W,EAAF2xB,OAAkD,GAAIhb,GAAAA,aAapD3W,EAAF+7C,cAGE/7C,EAAFkhB,GAAe,oBAAoBgxE,KAQ/BlyF,EAAK8hF,yBAA2BlhD,EAAS2hD,wBAlB7C,MA3DqC19E,GAArCg9E,EAAA5hF,GAUE2L,OAAFC,eAAMg2E,EAAN/8E,UAAA,cAAE,WAAwB,MAAO3E,MAAK+jF,SAAW/jF,KAAK+hF;qEAsBpDt2E,OAAFC,eACMg2E,EADN/8E,UAAA,6BAAE,WACuC,MAAO3E,MAAK2hF,4BACnD,SAA0B1gF,GACxBjB,KAAK2hF,uBAAyB1jE,EAAAA,sBAAsBhd,oCAwBtDwK,OAAFC,eACMg2E,EADN/8E,UAAA,iBAAE,SACc1D,GADd,GAAFpB,GAAAG,IAEQiB,IAASA,EAAMkE,SACjBlE,EAAMmiC,MAAM,KAAKh5B,QAAQ,SAAAmyC,GAAa,MAAA18C,GAAK+7C,WAAWW,EAAUz2C,SAAU,IAC1E9F,KAAKE,YAAYI,cAAci8C,UAAY,qCAiB/CmlC,EAAF/8E,UAAAqD,mBAAE,WACEhI,KAAKiZ,YAAc,GAAI4tC,GAAAA,2BAAsC7mD,KAAKkpC,SAASvuB,WAE3E3a,KAAK4hF,kBAOPF,EAAF/8E,UAAAk9E,cAAE,SAAc5jC,GACRj+C,KAAK+lD,QACP/lD,KAAK+lD,MAAMzlD,cAAc29C,UAAYA,IAKzCyjC,EAAF/8E,UAAAm9E,cAAE,WACE,MAAO9hF,MAAK+lD,MAAQ/lD,KAAK+lD,MAAMzlD,cAAc29C,UAAY,GAI3DyjC,EAAF/8E,UAAAi9E,eAAE,WACE5hF,KAAK+hF,YAAc/hF,KAAKkpC,QAAQ/jC,OAChCnF,KAAK47C,WAAW,4BAA8B57C,KAAK+hF,UACnD/hF,KAAK47C,WAAW,4BAA8B57C,KAAK+hF,UACnD/hF,KAAKqY,mBAAmBxB,gBAI1B6qE,EAAF/8E,UAAAq9E,iBAAE,SAAiB5+B,GACf,GAAM9hD,GAAQ,GAAI2gF,IAA6BjiF,KAAMojD,EACrDpjD,MAAKkiF,eAAe/qE,KAAK7V,mBAhI7BtC,KAACgH,EAAAA,UAADrE,OAAAwC,SAAA,mBACE8B,SAAU,wJACVC,QAAF,kpBACExH,cAAFC,EAAAA,kBAAAC,KACEC,gBAAFC,EAAAA,wBAAAC,OACE6C,SAAF,kBACEC,QAAF,iBACErD,MACFC,MAAA,oBAEA8I,YACAC,QAAAgnC,GAAA/mC,YAAAi6E,2FA3EA1iF,SAAEqD,GAAFZ,aAAAzC,KAAAuD,EAAAA,OAAAZ,MAAAwgF,SA0JAT,EAAAriF,6GA5DA6pC,UAAAlqC,KAAAoJ,EAAAA,gBAAAzG,MAAAqtC,IAAAxH,aAAA,MAGA2B,eAAAnqC,KAAAoJ,EAAAA,gBAAAzG,MAAAstC,MAGAnlB,cAAA9qB,KAAAO,EAAAA,QAGA6iF,wBAAApjF,KAAAO,EAAAA,QAGA8iF,aAAArjF,KAAAO,EAAAA,QAMA2iF,iBAAAljF,KAAAyY,EAAAA,SAWA4iB,SAAAr7B,KAAAyY,EAAAA,SAGA+Z,SAAAxyB,KAAAyY,EAAAA,SAIAjS,YAAAxG,KAAAO,EAAAA,MAAAoC,MAAA,YASA+/E,qBCrIE,QAAFY,GAEah+E,GAAAtE,KAAbsE,WAAaA,EArBb,sBAcAtF,KAAC0C,EAAAA,UAADC,OACEwC,SAAU,0BACVvC,SAAU,gEARZ5C,KAAmB0I,EAAAA,cARnB46E,K9H8DaC,GACT,GAAIvwE,GAAAA,eAAqC,oCAQhCwwE,IACXh7E,QAAS+6E,GACTphE,MAAOiX,EAAAA,SACP/W,WAAYohE,GAODC,IACXl7E,QAAS04B,EAAAA,kBACTz4B,YAAayO,EAAAA,WAAW,WAAM,MAAAysE,MAC9BviD,OAAO,iBA2GP,QAAFuiD,GAAsBr+D,EAAgDwQ,EAChDthB,EACAovE,EACAvqE,EAC0Cm4B,EAC9Bp6B,EACQslD,EACUj3D,EAE9B6T,GATpB,GAAFzY,GAAAG,IAAsBA,MAAtBskB,SAAsBA,EAAgDtkB,KAAtE80B,SAAsEA,EAChD90B,KAAtBwT,kBAAsBA,EACAxT,KAAtB4iF,MAAsBA,EACA5iF,KAAtBqY,mBAAsBA,EAC0CrY,KAAhEwwC,gBAAgEA,EAC9BxwC,KAAlCoW,KAAkCA,EACQpW,KAA1C07D,WAA0CA,EACU17D,KAApDyE,UAAoDA,EAE9BzE,KAAtBsY,eAAsBA,EAhFtBtY,KAAA6iF,qBAAgC,EAChC7iF,KAAA8iF,uBAAkC,EASlC9iF,KAAA+iF,wBAAmC,EAMnC/iF,KAAAgjF,sBAAkC30E,EAAAA,aAAaC,MAO/CtO,KAAAijF,qBAAgC,EAGhCjjF,KAAAkjF,qBAA0C,GAAItvE,GAAAA,QAM9C5T,KAAAmjF,mBAA+B,WAI3BtjF,EAAKojF,oBACDz+E,SAAS22B,gBAAkBt7B,EAAKykB,SAAShkB,eAAiBT,EAAK4qC,WAIrEzqC,KAAF2iD,UAAoC,aAGlC3iD,KAAF4iD,WAAe,aAeb5iD,KAAFojF,sBAAyD,MA6CzDpjF,KAAAqjF,kBAAsC,EAqEpCrjF,KAAFsjF,iBAAoEngC,EAAAA,MAAM,WACtE,MAAItjD,GAAK0jF,cAAgB1jF,EAAK0jF,aAAar6C,QACnCh9B,EAAAA,MAAZC,UAAA,GAAqBtM,EAAK0jF,aAAar6C,QAAQ98B,IAAI,SAAAg3C,GAAU,MAAAA,GAAOC,qBAKzDxjD,EAAK+iF,MAAM3lC,SACb5qB,eACApoB,KAAKC,EAAAA,KAAK,GAAIwyC,EAAAA,UAAU,WAAM,MAAA78C,GAAKyjF,sBApGlB,mBAAXE,SACTZ,EAAMlwE,kBAAkB,WACtB8wE,OAAOvyC,iBAAiB,OAAQpxC,EAAKsjF,sBA5M7C,MAyLE13E,QAAFC,eACMi3E,EADNh+E,UAAA,4BAAE,WACsC,MAAO3E,MAAK8iF,2BAClD,SAAyB7hF,GACvBjB,KAAK8iF,sBAAwB7kE,EAAAA,sBAAsBhd,oCAqBrD0hF,EAAFh+E,UAAAsD,YAAE,WACwB,mBAAXu7E,SACTA,OAAOzxC,oBAAoB,OAAQ/xC,KAAKmjF,oBAG1CnjF,KAAKgjF,sBAAsBhyE,cAC3BhR,KAAK6iF,qBAAsB,EAC3B7iF,KAAKyjF,gBACLzjF,KAAKkjF,qBAAqBhvE,YAI5BzI,OAAFC,eAAMi3E,EAANh+E,UAAA,iBAAE,WACE,MAAO3E,MAAKqjF,kBAAoBrjF,KAAKujF,aAAaxB,2CAKpDY,EAAFh+E,UAAA++E,UAAE,WACE1jF,KAAK2jF,iBACL3jF,KAAK4jF,eAIPjB,EAAFh+E,UAAAk/E,WAAE,WACE7jF,KAAK8jF,cAEA9jF,KAAKqjF,mBAINrjF,KAAKyqC,WAEPzqC,KAAKujF,aAAa/xD,OAAOra,OAG3BnX,KAAKujF,aAAaQ,QAAU/jF,KAAKqjF,kBAAmB,EAEhDrjF,KAAK+wB,aAAe/wB,KAAK+wB,YAAYnb,gBACvC5V,KAAK+wB,YAAY/a,SACjBhW,KAAKgkF,4BAA4BhzE,eAK9BhR,KAAK6iF,qBAKR7iF,KAAKqY,mBAAmB8S,kBAQ5Bw3D,EAAFh+E,UAAA+mC,eAAE,WACM1rC,KAAKqjF,kBACPrjF,KAAgB,YAAE0rC,kBAQtBjgC,OAAFC,eAAMi3E,EAANh+E,UAAA,2BAAE,WAAA,GAAF9E,GAAAG,IACI,OAAOkM,GAAAA,MACLlM,KAAKsjF,iBACLtjF,KAAKujF,aAAatqE,YAAYwjC,OAAOxyC,KAAK3E,EAAAA,OAAO,WAAM,MAAAzF,GAAKwjF,oBAC5DrjF,KAAKkjF,qBACLljF,KAAKikF,yBACLjkF,KAAK+wB,YACD/wB,KAAK+wB,YAAYqG,cAAcntB,KAAK3E,EAAAA,OAAO,WAAM,MAAAzF,GAAKwjF,oBACtDjzE,EAAAA,MACJnG,KAEAmC,EAAAA,IAAI,SAAA9K,GAAS,MAAAA,aAAiB4iF,IAA2B5iF,EAAQ,yCAkBrEmK,OAAFC,eAAMi3E,EAANh+E,UAAA,oBAAE,WACE,MAAI3E,MAAKujF,cAAgBvjF,KAAKujF,aAAatqE,YAClCjZ,KAAKujF,aAAatqE,YAAYyxB,WAGhC,sCAIDi4C,EAAVh+E,UAAAs/E,4CACI,OAAKjkF,MAAKyE,UAIHyH,EAAAA,MACLysC,EAAAA,UAAsB34C,KAAKyE,UAAW,SACtCk0C,EAAAA,UAAsB34C,KAAKyE,UAAW,aAEvCwF,KAAK3E,EAAAA,OAAO,SAAAhE,GACX,GAAM6iF,GAAc7iF,EAA2B,OACzC8iF,EAAYvkF,EAAK67D,WACnB77D,EAAK67D,WAAWx7D,YAAYI,cAAgB,IAEhD,OAAOT,GAAKwjF,kBACJc,IAAgBtkF,EAAKykB,SAAShkB,iBAC5B8jF,IAAcA,EAAU3+E,SAAS0+E,OAChCtkF,EAAKkxB,cAAgBlxB,EAAKkxB,YAAYuG,eAAe7xB,SAAS0+E,MAflE/zE,EAAAA,GAAa,OAoBxBuyE,EAAFh+E,UAAAgqB,WAAE,SAAW1tB,GAAX,GAAFpB,GAAAG,IACIwR,SAAQC,QAAQ,MAAMC,KAAK,WAAM,MAAA7R,GAAKwkF,iBAAiBpjF,MAIzD0hF,EAAFh+E,UAAAiqB,iBAAE,SAAiBC,GACf7uB,KAAK2iD,UAAY9zB,GAInB8zD,EAAFh+E,UAAAmqB,kBAAE,SAAkBD,GAChB7uB,KAAK4iD,WAAa/zB,GAIpB8zD,EAAFh+E,UAAAoqB,iBAAE,SAAiBC,GACfhvB,KAAKskB,SAAShkB,cAAcK,SAAWquB,GAGzC2zD,EAAFh+E,UAAAiV,eAAE,SAAetY,GACb,GAAMuY,GAAUvY,EAAMuY,OAUtB,IAJIA,IAAY44B,EAAAA,QACdnxC,EAAMC,iBAGJvB,KAAKskF,cAAgBzqE,IAAYK,EAAAA,OAASla,KAAKyqC,UACjDzqC,KAAKskF,aAAa3+B,wBAClB3lD,KAAKukF,mBACLjjF,EAAMC,qBACD,IAAIvB,KAAKujF,aAAc,CAC5B,GAAMiB,GAAiBxkF,KAAKujF,aAAatqE,YAAYyxB,WAC/Cua,EAAaprC,IAAYkT,EAAAA,UAAYlT,IAAYoT,EAAAA,UAEnDjtB,MAAKyqC,WAAa5wB,IAAY4qE,EAAAA,IAChCzkF,KAAKujF,aAAatqE,YAAYoB,UAAU/Y,GAC/B2jD,GAAcjlD,KAAK0kF,YAC5B1kF,KAAK0jF,aAGHz+B,GAAcjlD,KAAKujF,aAAatqE,YAAYyxB,aAAe85C,IAC7DxkF,KAAK2kF,oBAKXhC,EAAFh+E,UAAAigF,aAAE,SAAatjF,GACX,GAAIs3C,GAASt3C,EAAgC,OACzCL,EAAgC23C,EAAO33C,KAGvB,YAAhB23C,EAAO55C,OACTiC,EAAiB,IAATA,EAAc,KAAOwoB,WAAWxoB,IAQtCjB,KAAK6kF,iBAAmB5jF,GAASuD,SAAS22B,gBAAkB75B,EAAMs3C,SACpE54C,KAAK6kF,eAAiB5jF,EACtBjB,KAAK2iD,UAAU1hD,GAEXjB,KAAK0kF,YACP1kF,KAAK0jF,cAKXf,EAAFh+E,UAAAmlD,aAAE,WACO9pD,KAAKijF,oBAECjjF,KAAK0kF,aACd1kF,KAAK6kF,eAAiB7kF,KAAKskB,SAAShkB,cAAcW,MAClDjB,KAAK2jF,iBACL3jF,KAAK4jF,aAAY,IAJjB5jF,KAAKijF,qBAAsB,GAcvBN,EAAVh+E,UAAAi/E,YAAA,SAAsBkB,OAAtB,KAAAA,IAAsBA,GAAtB,GACQ9kF,KAAK07D,YAA6C,SAA/B17D,KAAK07D,WAAWqpB,aACjCD,EACF9kF,KAAK07D,WAAWspB,uBAEhBhlF,KAAK07D,WAAWqpB,WAAa,SAG/B/kF,KAAK+iF,wBAAyB,IAK1BJ,EAAVh+E,UAAAm/E,uBACQ9jF,KAAK+iF,yBACP/iF,KAAK07D,WAAWqpB,WAAa,OAC7B/kF,KAAK+iF,wBAAyB,IAa1BJ,EAAVh+E,UAAAggF,2BACI,GAAMr6E,GAAQtK,KAAKujF,aAAatqE,YAAY+kC,iBAAmB,EACzD2J,EAAa1e,EAA8B3+B,EAC7CtK,KAAKujF,aAAar6C,QAASlpC,KAAKujF,aAAap6C,cAE3C87C,EAAoBr9B,EACxBt9C,EAAQq9C,EAtZ4B,GAwZpC3nD,KAAKujF,aAAazB,gBArZiB,IAyZrC9hF,MAAKujF,aAAa1B,cAAcoD,IAO1BtC,EAAVh+E,UAAAugF,iDACUC,EAAcnlF,KAAK4iF,MAAM3lC,SAAS5qB,eAAepoB,KAAKC,EAAAA,KAAK,IAC3Dk7E,EAAgBplF,KAAKujF,aAAar6C,QAAQjkC,QAAQgF,KACtD+pD,EAAAA,IAAI,WAAM,MAAAn0D,GAAKwlF,kBAAkBC,wBAGjCrzC,EAAAA,MAAM,GAIR,OAAO/lC,GAAAA,MAAMi5E,EAAaC,GACvBn7E,KAGCyyC,EAAAA,UAAU,WAQR,MAPA78C,GAAK0kF,mBACL1kF,EAAK0jF,aAAa3B,iBAEd/hF,EAAK4qC,WACP5qC,EAAgB,YAAE6rC,iBAGb7rC,EAAK0lF,sBAGdr7E,EAAAA,KAAK,IAGNhF,UAAU,SAAA5D,GAAS,MAAAzB,GAAK2lF,kBAAkBlkF,MAIvCqhF,EAAVh+E,UAAA8+E,yBACQzjF,KAAK+wB,cACP/wB,KAAK6jF,aACL7jF,KAAK+wB,YAAYmB,UACjBlyB,KAAK+wB,YAAc,OAIf4xD,EAAVh+E,UAAA0/E,iBAAA,SAA2BpjF,GACvB,GAAMwkF,GAAYzlF,KAAKujF,cAAgBvjF,KAAKujF,aAAaz5D,YACvD9pB,KAAKujF,aAAaz5D,YAAY7oB,GAC9BA,EAIIykF,EAA0B,MAAbD,EAAoBA,EAAY,EAI/CzlF,MAAK07D,WACP17D,KAAK07D,WAAWiqB,SAAS1kF,MAAQykF,EAEjC1lF,KAAKskB,SAAShkB,cAAcW,MAAQykF,GAShC/C,EAAVh+E,UAAA6gF,kBAAA,SAA4BlkF,GACpBA,GAASA,EAAMitB,SACjBvuB,KAAK4lF,6BAA6BtkF,EAAMitB,QACxCvuB,KAAKqkF,iBAAiB/iF,EAAMitB,OAAOttB,OACnCjB,KAAK2iD,UAAUrhD,EAAMitB,OAAOttB,OAC5BjB,KAAKskB,SAAShkB,cAAcwX,QAC5B9X,KAAKujF,aAAavB,iBAAiB1gF,EAAMitB,SAG3CvuB,KAAK6jF,cAMClB,EAAVh+E,UAAAihF,6BAAA,SAAuCxI,GACnCp9E,KAAKujF,aAAar6C,QAAQ9+B,QAAQ,SAAAg5C,GAC5BA,GAAUg6B,GAAQh6B,EAAOr+B,UAC3Bq+B,EAAOgB,cAKLu+B,EAAVh+E,UAAAg/E,oCACI,KAAK3jF,KAAKujF,aACR,KAAMsC,IAGH7lF,MAAK+wB,YAwBR/wB,KAAK+wB,YAAY+/C,YAAY59D,MAAOlT,KAAK8lF,oBAvBzC9lF,KAAKqyC,QAAU,GAAIj+B,GAAAA,eAAepU,KAAKujF,aAAat9E,SAAUjG,KAAKwT,mBACnExT,KAAK+wB,YAAc/wB,KAAK80B,SAASqD,OAAOn4B,KAAKkgD,qBAI7ClgD,KAAK+wB,YAAY4pC,gBAAgBz1D,UAAU,SAAA5D,IAGrCA,EAAMuY,UAAY44B,EAAAA,QAAWnxC,EAAMuY,UAAYkT,EAAAA,UAAYzrB,EAAM8jD,UACnEvlD,EAAK0kF,mBACL1kF,EAAKqjF,qBAAqBv3E,UAI1B3L,KAAKsY,iBACPtY,KAAKgjF,sBAAwBhjF,KAAKsY,eAAe5B,SAASxR,UAAU,WAC9DrF,EAAK4qC,WAAa5qC,EAAKkxB,aACzBlxB,EAAKkxB,YAAY+/C,YAAY59D,MAAOrT,EAAKimF,uBAS7C9lF,KAAK+wB,cAAgB/wB,KAAK+wB,YAAYnb,gBACxC5V,KAAK+wB,YAAYlb,OAAO7V,KAAKqyC,SAC7BryC,KAAKgkF,4BAA8BhkF,KAAKklF,6BAG1C,IAAMa,GAAU/lF,KAAKyqC,SAErBzqC,MAAKujF,aAAa3B,iBAClB5hF,KAAKujF,aAAaQ,QAAU/jF,KAAKqjF,kBAAmB,EAIhDrjF,KAAKyqC,WAAas7C,IAAY/lF,KAAKyqC,WACrCzqC,KAAKujF,aAAalpD,OAAOljB,QAIrBwrE,EAAVh+E,UAAAu7C,6BACI,MAAO,IAAIxoB,GAAAA,eACTC,iBAAkB33B,KAAK2zC,sBACvBJ,eAAgBvzC,KAAKwwC,kBACrBt9B,MAAOlT,KAAK8lF,iBACZh3E,UAAW9O,KAAKoW,QAIZusE,EAAVh+E,UAAAgvC,+BAyBI,MAxBA3zC,MAAKqlF,kBAAoBrlF,KAAK80B,SAASjhB,WACpCg/B,oBAAoB7yC,KAAKgmF,wBACzBjzC,wBAAuB,GACvBkzC,UAAS,GACTryC,gBAEGK,QAAS,QACTC,QAAS,SACTI,SAAU,QACVC,SAAU,QAGVN,QAAS,QACTC,QAAS,MACTI,SAAU,QACVC,SAAU,SAKVpgB,WAAY,kCAIXn0B,KAAKqlF,mBAGN1C,EAAVh+E,UAAAqhF,gCACI,MAAIhmF,MAAKkmF,YACAlmF,KAAKkmF,YAAY5hF,WAGnBtE,KAAK07D,WAAa17D,KAAK07D,WAAWmC,4BAA8B79D,KAAKskB,UAGtEq+D,EAAVh+E,UAAAmhF,0BACI,MAAO9lF,MAAKujF,aAAalB,YAAcriF,KAAKmmF,iBAItCxD,EAAVh+E,UAAAwhF,yBACI,MAAOnmF,MAAKgmF,uBAAuB1lF,cAAcouB,wBAAwBxb,OAOnEyvE,EAAVh+E,UAAA4/E,4BACIvkF,KAAKujF,aAAatqE,YAAYoC,cAAcrb,KAAKujF,aAAanB,sBAAwB,GAAK,IAIrFO,EAAVh+E,UAAA+/E,oBACI,GAAMnyE,GAAUvS,KAAKskB,SAAShkB,aAC9B,QAAQiS,EAAQwrD,WAAaxrD,EAAQ5R,WAAaX,KAAK8iF,sCAjkB3D9jF,KAAC0C,EAAAA,UAADC,OACEwC,SAAU,oDACV3F,MACE4nF,sBAAuB,wBACvB9+E,cAAe,2CACf++E,2BAA4B,uCAC5Br4C,+BAAgC,mBAChC5mC,uBAAwB,qDACxBymC,mBAAoB,iEAGpBy4C,YAAa,iBACbn3D,SAAU,eACVuvC,UAAW,uBACXtvC,YAAa,0BAEfxtB,SAAU,yBACV2F,WAAYm7E,4CA5Fd1jF,KAAE0I,EAAAA,aAZF1I,KAAEo5B,EAAAA,UAqBFp5B,KAAEyH,EAAAA,mBAHFzH,KAAEC,EAAAA,SARFD,KAAEE,EAAAA,oBA8KFF,SAAAqD,GAAAZ,aAAAzC,KAAeuD,EAAAA,OAAfZ,MAAsB4gF,QA5LtBvjF,KAAQie,EAAAA,eAARxb,aAAAzC,KA6LesD,EAAAA,aA1JftD,KAAQ2vC,GAARltC,aAAAzC,KA2JesD,EAAAA,WA3JftD,KA2J2BunF,EAAAA,SAC3BvnF,SAAAqD,GAAAZ,aAAAzC,KAAesD,EAAAA,WAAftD,KAA2BuD,EAAAA,OAA3BZ,MAAkC0E,EAAAA,cApKlCrH,KAAQG,EAAAA,mCAqIRokF,eAAAvkF,KAAGO,EAAAA,MAAHoC,MAAS,qBAMTukF,cAAAlnF,KAAGO,EAAAA,MAAHoC,MAAS,gCAMTyhF,wBAAApkF,KAAGO,EAAAA,MAAHoC,MAAS,kBAMT6kF,uBAAAxnF,KAAGO,EAAAA,MAAHoC,MAAS,8BAzLTghF,iC+HAA,sBAmBA3jF,KAAC4D,EAAAA,SAADjB,OACEkB,SAAU4sC,GAAiBjb,EAAAA,cAAezxB,GAAiBD,EAAAA,cAC3DM,SACEs+E,GACAjyC,GACAkzC,GACAL,GACAv/E,IAEFU,cAAei+E,GAAiBiB,GAAwBL,IACxD/6E,WAAYi7E,QA7BdiE,KCwBIvpE,GAAS,EAIbwpE,GAAA,yBA5BA,MAAAA,MA8BaC,GAC8B/mF,EAAc8mF,mBAuFvD,QAAFE,GAC4CniF,EAC9B2N,EACAlS,EACAqwC,EAEAs2C,GANZ,GAAFhnF,GAOQC,EAPRC,KAAAC,OAAAA,WAC4CH,GAA5C4E,UAA4CA,EAC9B5E,EAAduS,QAAcA,EACAvS,EAAdK,YAAcA,EACAL,EAAd0wC,eAAcA,EAEA1wC,EAAdgnF,UAAcA,EApEZhnF,EAAFinF,aAAgB,EAShBjnF,EAAAknF,OAAiC,UAQjClnF,EAAAmnF,UAA8B,EAM5BnnF,EAAFgU,SAA0D,cAwBxDhU,EAAF2tB,KAA8C,SAW5C3tB,EAAFgkD,IAAgB3mC,OAlHhB,MAsD8BxY,GAA9BkiF,EAAA9mF,GAKE2L,OAAFC,eACMk7E,EADNjiF,UAAA,aAAE,WAC4B,MAAO3E,MAAK+mF,YACxC,SAAU9lF,GACRjB,KAAKy6D,UAAUx5D,GACfjB,KAAK+mF,OAAS9lF,mCAKhBwK,OAAFC,eACMk7E,EADNjiF,UAAA,eAAE,WACyB,MAAO3E,MAAKgnF,cACrC,SAAYC,GACVjnF,KAAKgnF,SAAW/oE,EAAAA,sBAAsBgpE,oCAWxCx7E,OAAFC,eACMk7E,EADNjiF,UAAA,eAAE,WACwB,MAAO3E,MAAK8V,cACpC,SAAY7U,GACVjB,KAAK8V,SAAW7U,EAChBjB,KAAK8mF,YAAuB,MAAT7lF,IAAiB,GAAGA,GAAQ6E,OAAOX,OAAS,EAC/DnF,KAAKknF,sDAKPz7E,OAAFC,eACMk7E,EADNjiF,UAAA,mBAAE,WAC4B,MAAO3E,MAAKmnF,kBACxC,SAAgBC,GACVA,IAAmBpnF,KAAKmnF,eAC1BnnF,KAAKqnF,2BAA2BD,EAAgBpnF,KAAKmnF,cACrDnnF,KAAKmnF,aAAeC,oCASxB37E,OAAFC,eACMk7E,EADNjiF,UAAA,cAAE,WACwB,MAAO3E,MAAKsnF,aACpC,SAAWL,GACTjnF,KAAKsnF,QAAUrpE,EAAAA,sBAAsBgpE,oCAoBvCL,EAAFjiF,UAAA4iF,QAAE,WACE,OAA2C,IAApCvnF,KAAK6T,SAAShE,QAAQ,UAI/B+2E,EAAFjiF,UAAA6iF,QAAE,WACE,OAA4C,IAArCxnF,KAAK6T,SAAShE,QAAQ,WAG/B+2E,EAAFjiF,UAAAsD,YAAE,WACMjI,KAAKynF,aAAeznF,KAAK0nF,eAC3B1nF,KAAKuwC,eAAekB,kBAAkBzxC,KAAK0nF,cAAe1nF,KAAKynF,cAK3Db,EAAVjiF,UAAAuiF,8BAMI,MALKlnF,MAAK0nF,cAGR1nF,KAAK0nF,cAAc7hF,YAAc7F,KAAK02B,QAFtC12B,KAAK0nF,cAAgB1nF,KAAK2nF,sBAIrB3nF,KAAK0nF,eAINd,EAAVjiF,UAAAgjF,+BAEI,GAAMC,GAAW5nF,KAAK6mF,WAAa7mF,KAAKyE,UAClCojF,EAAeD,EAAStiD,cAAc,OAwB5C,OArBAuiD,GAAa5xB,aAAa,KAAM,qBAAqBj2D,KAAK6jD,KAC1DgkC,EAAariF,UAAU4Y,IAAI,qBAC3BypE,EAAahiF,YAAc7F,KAAK02B,QAE5B12B,KAAKynF,aACPI,EAAa5xB,aAAa,aAAcj2D,KAAKynF,aAG/CznF,KAAKE,YAAYI,cAAcklC,YAAYqiD,GAGN,kBAA1Bp1E,uBACTzS,KAAKoS,QAAQM,kBAAkB,WAC7BD,sBAAsB,WACpBo1E,EAAariF,UAAU4Y,IAhBT,wBAoBlBypE,EAAariF,UAAU4Y,IApBL,oBAuBbypE,GAIDjB,EAAVjiF,UAAA0iF,2BAAA,SAAqCD,EAAwBU,GAEzD,GAAMpxD,GAAU12B,KAAKknF,oBAEjBY,IACF9nF,KAAKuwC,eAAekB,kBAAkB/a,EAASoxD,GAG7CV,GACFpnF,KAAKuwC,eAAeqB,SAASlb,EAAS0wD,IAKlCR,EAAVjiF,UAAA81D,UAAA,SAAoBstB,GACZA,IAAiB/nF,KAAK+mF,SACpB/mF,KAAK+mF,QACP/mF,KAAKE,YAAYI,cAAckF,UAAU2Y,OAAO,aAAane,KAAK+mF,QAEhEgB,GACF/nF,KAAKE,YAAYI,cAAckF,UAAU4Y,IAAI,aAAa2pE,oBAzKlE/oF,KAAC0C,EAAAA,UAADC,OACEwC,SAAU,aACVtC,QAAS,8BACTrD,MACEC,MAAS,YACTupF,4BAA6B,UAC7BC,0BAA2B,YAC3BC,0BAA2B,aAC3BC,2BAA4B,aAC5BC,0BAA2B,YAC3BC,0BAA2B,mBAC3BC,2BAA4B,oBAC5BC,0BAA2B,mBAC3BC,2BAA4B,yBAC5BC,6BAA8B,oDAoElCzpF,SAAAqD,GAAAZ,aAAAzC,KAAOsD,EAAAA,WAAPtD,KAAmBuD,EAAAA,OAAnBZ,MAA0B0E,EAAAA,cAvG1BrH,KAAEC,EAAAA,SAHFD,KAAE0I,EAAAA,aALF1I,KAAQ01C,EAAAA,gBAWR11C,KAAE0pF,EAAAA,+BAwCFziC,QAAAjnD,KAAGO,EAAAA,MAAHoC,MAAS,mBASTgnF,UAAA3pF,KAAGO,EAAAA,MAAHoC,MAAS,qBAWTkS,WAAA7U,KAAGO,EAAAA,MAAHoC,MAAS,sBAGT+0B,UAAA13B,KAAGO,EAAAA,MAAHoC,MAAS,cAUT8lF,cAAAzoF,KAAGO,EAAAA,MAAHoC,MAAS,yBAWT6rB,OAAAxuB,KAAGO,EAAAA,MAAHoC,MAAS,kBAGTinF,SAAA5pF,KAAGO,EAAAA,MAAHoC,MAAS,qBA1GTilF,GAsD8BD,gCCtD9B,sBAcA3nF,KAAC4D,EAAAA,SAADjB,OACEkB,SACEM,EAAAA,WACAJ,IAEFK,SAAUwjF,IACVnjF,cAAemjF,QApBjBiC,KCYaC,GAAwB,GAAI92E,GAAAA,eAAoB,sBAK7D+2E,GAAA,wBAWE/oF,KAAF6H,KAAoB,KAGlB7H,KAAFk8C,aAA0B,EAMxBl8C,KAAFi+B,cAA2B,EAGzBj+B,KAAFwU,UAA8B,KAO5BxU,KAAFgvE,mBAAgC,EAG9BhvE,KAAF8uE,WAAwB,EAlDxB,MAAAia,MCkBaC,IAIXC,iBAAkBr0E,EAAAA,QAAQ,SACxBC,EAAAA,MAAM,eAAgBjC,EAAAA,OAAOkC,UAAW,sBACxCD,EAAAA,MAAM,UAAWjC,EAAAA,OAAOkC,UAAW,oBACnCE,EAAAA,WAAW,qCACPC,EAAAA,QAAWykB,GAAmBwvD,QADtC,IACiDtvD,GAAgBuvD,qBAC7Dn0E,EAAAA,WAAW,kBACPC,EAAAA,QAAWykB,GAAmB0vD,QADtC,IACiDxvD,GAAgByvD,uCCyD/D,QAAFC,GACYppF,EACAmY,EACAyhB,EACRyvD,EAC8B/kF,EAEvBglF,GAPT,GAAF3pF,GAQIC,EARJC,KAAAC,OAAAA,WACYH,GAAZK,YAAYA,EACAL,EAAZwY,mBAAYA,EACAxY,EAAZi6B,kBAAYA,EAIDj6B,EAAX2pF,kBAAWA,EAxBT3pF,EAAFyzB,gBAAmD,OAGjDzzB,EAAF2vE,uBAA2B,GAAIh5D,GAAAA,aAM/B3W,EAAA4pF,4BAA4D,KAkBxD5pF,EAAK4E,UAAYD,EACjB3E,EAAK6pF,wBAA0BH,EAC5BtyD,SAASC,EAAAA,YAAYyyD,OAAQzyD,EAAAA,YAAY0yD,MAAO1yD,EAAAA,YAAY2yD,SAC5D3kF,UAAU,WACTrF,EAAKiqF,aAAa,oCACdP,EAAmBQ,UAAU7yD,EAAAA,YAAYyyD,SAC7C9pF,EAAKiqF,aAAa,mCACdP,EAAmBQ,UAAU7yD,EAAAA,YAAY0yD,QAC7C/pF,EAAKiqF,aAAa,oCACdP,EAAmBQ,UAAU7yD,EAAAA,YAAY2yD,aAvCrD,MAJ6CnlF,GAA7C4kF,EAAAxpF,GAgDEwpF,EAAF3kF,UAAA4uB,sBAAE,SAAyBC,GAIvB,MAHAxzB,MAAKgqF,0BACLhqF,KAAKiqF,iBACLjqF,KAAK2vE,gCACE3vE,KAAK2zB,cAAcJ,sBAAsBC,IAIlD81D,EAAF3kF,UAAAivB,qBAAE,SAAwBJ,GAItB,MAHAxzB,MAAKgqF,0BACLhqF,KAAKiqF,iBACLjqF,KAAK2vE,gCACE3vE,KAAK2zB,cAAcC,qBAAqBJ,IAIjD81D,EAAF3kF,UAAAqvB,MAAE,WACOh0B,KAAKyY,aACRzY,KAAKszB,gBAAkB,UACvBtzB,KAAKqY,mBAAmB8S,kBAK5Bm+D,EAAF3kF,UAAA8sB,KAAE,WACOzxB,KAAKyY,aACRzY,KAAKszB,gBAAkB,SACvBtzB,KAAKqY,mBAAmBxB,iBAI5ByyE,EAAF3kF,UAAAsD,YAAE,WACEjI,KAAK0pF,wBAAwB14E,cAC7BhR,KAAKyY,YAAa,GAGpB6wE,EAAF3kF,UAAAm5C,iBAAE,SAAiBx8C,GACO,WAAlBA,EAAM4V,QACRlX,KAAKy6B,gBACsB,YAAlBn5B,EAAM4V,SAAyBlX,KAAKwpF,kBAAkB1a,WAC/D9uE,KAAKw6B,aAGPx6B,KAAKwvE,uBAAuBr4D,KAAK7V,IAGnCgoF,EAAF3kF,UAAAkrE,kBAAE,SAAkBvuE,GAChBtB,KAAKwvE,uBAAuBr4D,KAAK7V,IAG3BgoF,EAAV3kF,UAAAmlF,aAAA,SAAuB11D,EAAkBhW,GACrC,GAAM5Y,GAAYxF,KAAKE,YAAYI,cAAckF,SACjD4Y,GAAM5Y,EAAU4Y,IAAIgW,GAAY5uB,EAAU2Y,OAAOiW,IAG3Ck1D,EAAV3kF,UAAAqlF,mCACI,GAAIhqF,KAAK2zB,cAAc/d,cACrB,KAAMye,OAAM,gFAIRi1D,EAAV3kF,UAAAslF,0BACI,GAAM13E,GAAuBvS,KAAKE,YAAYI,cACxC6zB,EAAan0B,KAAKwpF,kBAAkBr1D,UAEtCrqB,OAAMC,QAAQoqB,GAEhBA,EAAW/pB,QAAQ,SAAAgqB,GAAY,MAAA7hB,GAAQ/M,UAAU4Y,IAAIgW,KAC5CD,GACT5hB,EAAQ/M,UAAU4Y,IAAI+V,IAMlBm1D,EAAV3kF,UAAA61B,sBACSx6B,KAAKu6B,aACRv6B,KAAKu6B,WAAav6B,KAAK85B,kBAAkB3B,OAAOn4B,KAAKE,YAAYI,gBAGnEN,KAAKu6B,WAAWS,gCAIVsuD,EAAV3kF,UAAA81B,yBACI,GAAMm1C,GAAU5vE,KAAKypF,2BAGjB7Z,IAAoC,kBAAlBA,GAAQ93D,OAC5B83D,EAAQ93D,QAGN9X,KAAKu6B,YACPv6B,KAAKu6B,WAAWiB,WAKZ8tD,EAAV3kF,UAAAgrE,mDACI3vE,MAAKypF,4BAA8BzpF,KAAKyE,UAAsC,cAG1EzE,KAAKE,YAAYI,cAAcwX,OACjCtG,QAAQC,UAAUC,KAAK,WAAM,MAAA7R,GAAKK,YAAYI,cAAcwX,0BA1KlE9Y,KAACgH,EAAAA,UAADrE,OAAAwC,SAAA,6BACE8B,SAAU,8CACVC,QAAF,0nBACErH,gBAAFC,EAAAA,wBAAAC,OACEL,cAAFC,EAAAA,kBAAAC,KACE4Y,YAAFwxE,GAAAC,kBACEzqF,MACFC,MAAe,6BACTwrD,SAAN,KACI/iD,KAAJ,SACI6oE,aAAJ,OACItiC,oBAAJ,+BACInZ,WAAY,kBACZ41D,iBAAJ,4BACI31D,gBAAJ,mHA1CAv1B,KAAEmrF,EAAAA,mBAGFnrF,KAAEu5B,EAAAA,qBAiBFv5B,SAAmBqD,GAAnBZ,aAAAzC,KAAAsD,EAAAA,WAAAtD,KAAAuD,EAAAA,OAAAZ,MAAA0E,EAAAA,cALArH,KAAQ+pF,MACRO,EAAAjqF,6EAmCAiqF,mDCjEA,sBAgBAtqF,KAAC4D,EAAAA,SAADjB,OACEkB,SACEC,EAAAA,aACA0xB,EAAAA,cACAzxB,GACAC,EAAAA,cAEFI,SAAUkmF,GAAyBvmF,IACnCU,cAAe6lF,IACf70D,iBAAkB60D,QAzBpBc,KCmBAC,GAAA,WAmBE,QAAFA,GACIv5D,EACQC,EAERs/C,GAJF,GAAFxwE,GAAAG,IAEYA,MAAZ+wB,YAAYA,EAVZ/wB,KAAAgxB,gBAAqC,GAAIpd,GAAAA,QAGzC5T,KAAAixB,aAAkC,GAAIrd,GAAAA,QAUlC5T,KAAK8wB,kBAAoBA,EAGzBA,EAAkB0+C,uBAAuBvlE,KACvC3E,EAAAA,OAAO,SAAAhE,GAAS,MAAoB,SAApBA,EAAM6gE,WAA0C,YAAlB7gE,EAAM4V,UACpDhN,EAAAA,KAAK,IAENhF,UAAU,WACTrF,EAAKoxB,aAAatlB,OAClB9L,EAAKoxB,aAAa/c,aAIpB4c,EAAkB0+C,uBAAuBvlE,KACvC3E,EAAAA,OAAO,SAAAhE,GAAS,MAAoB,SAApBA,EAAM6gE,WAA0C,WAAlB7gE,EAAM4V,UACpDhN,EAAAA,KAAK,IAENhF,UAAU,WACTrF,EAAKkxB,YAAYmB,UACjBryB,EAAKmxB,gBAAgBrlB,KAAK9L,EAAK2wE,SAC/B3wE,EAAKmxB,gBAAgB9c,aAGlB4c,EAAkB04D,kBAAkBvrD,cACvC/xB,EAAAA,MACE6kB,EAAY4L,gBACZ5L,EAAY4pC,gBAAgB1wD,KAAK3E,EAAAA,OAAO,SAAAhE,GAAS,MAAAA,GAAMuY,UAAY44B,EAAAA,WACnEvtC,UAAU,WAAM,MAAArF,GAAKwxB,YAtE7B,MA8EEg5D,GAAF1lF,UAAA0sB,QAAE,SAAQy2B,GAAR,GAAFjoD,GAAAG,IACSA,MAAKgxB,gBAAgBQ,SAExBxxB,KAAK8wB,kBAAkB0+C,uBAAuBvlE,KAC5C3E,EAAAA,OAAO,SAAAhE,GAAS,MAAoB,UAApBA,EAAM6gE,YACtBj4D,EAAAA,KAAK,IACLhF,UAAU,WAAM,MAAArF,GAAKkxB,YAAY2/C,mBAEnC1wE,KAAKwwE,QAAU1oB,EACf9nD,KAAK8wB,kBAAkBW,SAK3B44D,EAAF1lF,UAAAytB,eAAE,WACE,MAAOpyB,MAAKgxB,gBAAgBqB,gBAI9Bg4D,EAAF1lF,UAAA2tB,YAAE,WACE,MAAOtyB,MAAKixB,aAAaoB,gBAM3Bg4D,EAAF1lF,UAAAg4B,cAAE,WACE,MAAO38B,MAAK+wB,YAAY4L,iBAM1B0tD,EAAF1lF,UAAAg2D,cAAE,WACE,MAAO36D,MAAK+wB,YAAY4pC,iBAhH5B0vB,KC+BaC,GACT,GAAIt4E,GAAAA,eAAqC,kDAuB3C,QAAFu4E,GACcz1D,EACAE,EACwBw1D,EACZna,EAER5/B,GALJzwC,KAAd80B,SAAcA,EACA90B,KAAdg1B,UAAcA,EACwBh1B,KAAtCwqF,mBAAsCA,EACZxqF,KAA1BqwE,UAA0BA,EAERrwE,KAAlBywC,gBAAkBA,EAtBlBzwC,KAAAyqF,2BAAsE,KAvCtE,MA0CEh/E,QAAFC,eAAM6+E,EAAN5lF,UAAA,6BAAE,WACE,GAAM0wB,GAASr1B,KAAKwqF,kBACpB,OAAOn1D,GAASA,EAAOq1D,sBAAwB1qF,KAAKyqF,gCAGtD,SAA0BxpF,GACpBjB,KAAKwqF,mBACPxqF,KAAKwqF,mBAAmBE,sBAAwBzpF,EAEhDjB,KAAKyqF,2BAA6BxpF,mCAiBtCspF,EAAF5lF,UAAAixB,KAAE,SAA0Bm8C,EACTt8C,GADjB,GAAF51B,GAAAG,KAGU81B,EACFk8C,EAAqBhyE,KAAKywC,iBAAmB,GAAIs4C,IAAwBtzD,GACvEQ,EAAaj2B,KAAK42B,eAAed,GACjCe,EAAY72B,KAAK2qF,iBAAiB10D,EAAYH,GAC9C80D,EAAM,GAAIP,IAAwBxzD,EAAWZ,EAAYj2B,KAAKqwE,UAEpE,IAAI0B,YAAkC5+D,GAAAA,YACpC0jB,EAAUjD,qBAAqB,GAAIxf,GAAAA,eAAkB29D,EAAsB,MACzEj7C,UAAWhB,EAAQjuB,KACnBgjF,eAAgBD,SAEb,CACL,GAAMp3D,GAAS,GAAI+C,GAAAA,gBAAgBw7C,MAAwB1vE,GACrDrC,KAAK+2B,gBAAgBjB,EAAS80D,IAC9B5zD,EAAaH,EAAUtD,sBAAsBC,EACnDo3D,GAAIn0D,SAAWO,EAAWP,SAuB5B,MAnBAm0D,GAAIx4D,iBAAiBltB,UAAU,WAEzBrF,EAAK6qF,uBAAyBE,IAChC/qF,EAAK6qF,sBAAwB,QAI7B1qF,KAAK0qF,uBAGP1qF,KAAK0qF,sBAAsBt4D,iBAAiBltB,UAAU,WAAM,MAAA0lF,GAAI95D,kBAAkBkD,UAClFh0B,KAAK0qF,sBAAsBr5D,WAG3Bu5D,EAAI95D,kBAAkBkD,QAGxBh0B,KAAK0qF,sBAAwBE,EAEtBA,GAMTL,EAAF5lF,UAAA0sB,QAAE,WACMrxB,KAAK0qF,uBACP1qF,KAAK0qF,sBAAsBr5D,WAI/Bk5D,EAAF5lF,UAAAsD,YAAE,WACMjI,KAAKyqF,4BACPzqF,KAAKyqF,2BAA2Bp5D,WAO5Bk5D,EAAV5lF,UAAAgmF,iBAAA,SAA2B10D,EACAR,GAEvB,GAAMS,GAAeT,GAAUA,EAAOtgB,kBAAoBsgB,EAAOtgB,iBAAiBghB,SAC5EA,EAAW,GAAIC,GAAAA,eAAeF,GAAgBl2B,KAAKg1B,UAAW,GAAIqB,WACrE0yD,GAAsBtzD,MAGnBa,EACF,GAAIC,GAAAA,gBAAgB+yD,GAAyB7zD,EAAOtgB,iBAAkBghB,EAE1E,OAD4DF,GAAWpgB,OAAOygB,GAC1DG,UAOd8zD,EAAV5lF,UAAAiyB,eAAA,SAAyBnB,GACrB,GAAMgC,GAAgB,GAAIC,GAAAA,eACxB5oB,UAAW2mB,EAAO3mB,UAClBotC,YAAazmB,EAAOymB,YACpB02B,oBAAqBn9C,EAAOu5C,kBAC5BJ,SAAU,OACVr7B,eAAgBvzC,KAAK80B,SAASg2D,iBAAiBC,QAC/CpzD,iBAAkB33B,KAAK80B,SAASjhB,WAC7B+jB,SACAK,qBACAC,OAAO,MAOZ,OAJIzC,GAAOqmB,gBACTrkB,EAAcqkB,cAAgBrmB,EAAOqmB,eAGhC97C,KAAK80B,SAASqD,OAAOV,IAQtB8yD,EAAV5lF,UAAAoyB,gBAAA,SAA6BtB,EACAo1D,GAEzB,GAAM30D,GAAeT,GAAUA,EAAOtgB,kBAAoBsgB,EAAOtgB,iBAAiBghB,SAC5E08C,EAAkB,GAAIx8C,WACzBg0D,GAAmBQ,IACnB/B,GAAuBrzD,EAAO5tB,OAWjC,QARI4tB,EAAO3mB,WACLonB,GAAiBA,EAAan1B,IAA2Bkc,EAAAA,eAAgB,OAC7E41D,EAAgB15C,IAAIlc,EAAAA,gBAClBhc,MAAOw0B,EAAO3mB,UACd4H,OAAQtG,EAAAA,OAIL,GAAIgmB,GAAAA,eAAeF,GAAgBl2B,KAAKg1B,UAAW69C,mBAzJ9D7zE,KAACgiB,EAAAA,WAADrf,OAAasQ,WAAYm4E,2CA5BzBprF,KAAQo5B,EAAAA,UAKRp5B,KAAEs5B,EAAAA,WA4CFt5B,KAA0DurF,EAA1D9oF,aAAAzC,KAAOsD,EAAAA,WAAPtD,KAAmBoiB,EAAAA,aApCnBpiB,KAAQs0E,EAAAA,SAAR7xE,aAAAzC,KAqCOsD,EAAAA,aAnCPtD,KAA+B+pF,GAA/BtnF,aAAAzC,KAoCOsD,EAAAA,WApCPtD,KAoCmBuD,EAAAA,OApCnBZ,MAoC0B2oF,uMA5D1BC,KjBoCMS,GAA6B,SAM7BC,IACJ,aACA,kBACA,kBACA,oBACA,qBACA,eACA,WAKFC,GAAA,WACE,QAAFA,GAAqBhrF,GAAAF,KAArBE,YAAqBA,EAvDrB,MAAAgrF,MA0DaC,GAELjnF,EAAWtE,EAAcD,EAAmBurF,qBAiClD,QAAF5M,GAAch6E,EAMQC,EACApE,EAE0Cu8B,GAT9D,GAAF78B,GAUIC,EAVJC,KAAAC,KAUUsE,IAVVtE,IAMsBH,GAAtB0E,UAAsBA,EACA1E,EAAtBM,cAAsBA,EAE0CN,EAAhE68B,eAAgEA,EAjB9D78B,EAAFurF,cAAoCvrF,EAAKwrF,mBAAmB,UAAW,gBAGrExrF,EAAFyrF,aAAmCzrF,EAAKwrF,mBAAmB,kBAmBvD,KAAmB,GAAvB5gC,GAAA,EAAuB8gC,EAAvBN,GAAuBxgC,EAAvB8gC,EAAApmF,OAAuBslD,IAAwB,CAAtC,GAAMuwB,GAAfuQ,EAAA9gC,EACU5qD,GAAKwrF,mBAAmBrQ,IACzB12E,EAAuC,cAAEkB,UAAU4Y,IAAI48D,SAI5Dn7E,GAAKM,cAAcW,QAAQjB,EAAKK,aAAa,GAEzCL,EAAKurF,gBACPvrF,EAAKomD,MAAQ+kC,MAzBnB,MAV+BtmF,GAA/B45E,EAAAx+E,GAuCEw+E,EAAF35E,UAAAsD,YAAE,WACEjI,KAAKG,cAAckB,eAAerB,KAAKE,cAIzCo+E,EAAF35E,UAAAmT,MAAE,WACE9X,KAAK2kB,kBAAkB7M,SAGzBwmE,EAAF35E,UAAAggB,gBAAE,WACE,MAAO3kB,MAAKE,YAAYI,eAG1Bg+E,EAAF35E,UAAAujC,kBAAE,WACE,MAAOloC,MAAKmoC,eAAiBnoC,KAAKW,UAIpC29E,EAAF35E,UAAA0mF,mBAAE,WAAF,IAAqB,GAArBxrF,GAAAG,KAAAwrF,KAAA/gC,EAAA,EAAqBA,EAArB59C,UAAA1H,OAAqBslD,IAAA+gC,EAArB/gC,GAAA59C,UAAA49C,EACI,OAAO+gC,GAAW5lF,KAAK,SAAA6lF,GAAa,MAAA5rF,GAAK8kB,kBAAkB8mC,aAAaggC,qBA1E5EzsF,KAACgH,EAAAA,UAADrE,OAAAwC,SAAA,iMACEvC,SAAU,YACVpD,MAGFigE,aAAA,mBACMluC,kCAAN,uCAEAtqB,SAAA,mVACAC,QAAA;08LACErE,QAAF,WAAA,gBAAA,SACEnD,cAAFC,EAAAA,kBAAAC,KACEC,gBAAFC,EAAAA,wBAAAC,qFAhEAC,KAAE2D,EAAAA,eAJF3D,KAAQyD,OAAQhB,aAAhBzC,KAAAsD,EAAAA,WAAAtD,KAAAuD,EAAAA,OAAAZ,MAAA6uB,EAAAA,4BA6FA8tD,EAAAj/E,uDAXAi/E,uCAgFEn6C,+FASFnkC,KAAAW,8BAEQW,EAARi9E,6BAGAC,EAAA/8E,aACAzC,KAAAgH,EAAAA,UAAArE,OAAAwC,SAAA,gLAxCA3F,MAKM+jC,kBAAN,4JAIIhS,kCAAJ,uCAEA1uB,QAAA,WAAA,gBAAA,SACAoE,SAAA,mVACAC,QAAA,k8LACAxH,cAAAC,EAAAA,kBAAAC,KACEC,gBAAFC,EAAAA,wBAAAC,WAIAy/E,EAAAx3D,eAAA,WAAA,QACAhoB,KAAAoD,EAAAA,kJA9JAo8E,EAAAn/E,gBAKAkB,WAAAvB,KAAAO,EAAAA,4CCbA,sBAcAP,KAAC4D,EAAAA,SAADjB,OACEkB,SACEC,EAAAA,aACAG,GACAF,IAEFK,SACEk7E,GACAE,GACAz7E,IAEFU,cACE66E,GACAE,QA3BJh3D,KC2Dai3D,GACT,GAAIzsE,GAAAA,eAA8C,qCASzC0sE,IACXl3E,QAAS04B,EAAAA,kBACTz4B,YAAayO,EAAAA,WAAW,WAAM,MAAAyoE,MAC9Bv+C,OAAO,GAOTw+C,GAAA,yBA/EA,MAAAA,MAiFIC,GAAmB,EAGvBC,GAAA,WACE,QAAFA,GAEWvwD,EAGAttB,GAHAjB,KAAXuuB,OAAWA,EAGAvuB,KAAXiB,MAAWA,EA1FX,MAAA69E,oBAgNE,QAAFH,GACYn4C,EAEJu4C,GAFI/+E,KAAZwmC,gBAAYA,EAnGZxmC,KAAA6pB,WAAsB,EACtB7pB,KAAAqiD,WAAsB,EACtBriD,KAAA6mC,WAAsB,EAepB7mC,KAAF8tB,8BAAwD,aAGtD9tB,KAAF4iD,WAA0B,aAkB1B5iD,KAAAymC,MAAkB,2BAA2Bo4C,KA8B3C7+E,KAAF+tB,YAAmC,GAAIvX,GAAAA,aA2BrCxW,KAAF0W,OACM,GAAIF,GAAAA,aAOJxW,KAAKg/E,WACDD,GAAkBA,EAAeC,WAAaD,EAAeC,WAAa,WAtNpF,MA2IEvzE,QAAFC,eACMizE,EADNh6E,UAAA,YAAE,WACqB,MAAO3E,MAAKymC,WACjC,SAASxlC,GAAT,GAAFpB,GAAAG,IACIA,MAAKymC,MAAQxlC,EAETjB,KAAKi/E,gBACPj/E,KAAKi/E,eAAe70E,QAAQ,SAAAi3B,GAAU,MAAAA,GAAO9e,KAAO1iB,EAAK4mC,yCAM7Dh7B,OAAFC,eACMizE,EADNh6E,UAAA,gBAAE,WAC0B,MAAO3E,MAAK6pB,eACtC,SAAa5oB,GACXjB,KAAK6pB,UAAY5L,EAAAA,sBAAsBhd,oCAIzCwK,OAAFC,eACMizE,EADNh6E,UAAA,aAAE,WAEE,GAAMogB,GAAW/kB,KAAKqrC,gBAAkBrrC,KAAKqrC,gBAAgBtmB,WAE7D,OAAI/kB,MAAKmrC,SACApmB,EAAS3Y,IAAI,SAAAi1B,GAAU,MAAAA,GAAOpgC,QAGhC8jB,EAAS,GAAKA,EAAS,GAAG9jB,UAAQoB,QAE3C,SAAU2iC,GACRhlC,KAAK2kD,qBAAqB3f,GAC1BhlC,KAAK+tB,YAAY5W,KAAKnX,KAAKiB,wCAW7BwK,OAAFC,eAAMizE,EAANh6E,UAAA,gBAAE,WACE,GAAMogB,GAAW/kB,KAAKqrC,gBAAgBtmB,QACtC,OAAO/kB,MAAKmrC,SAAWpmB,EAAYA,EAAS,IAAM,sCAIpDtZ,OAAFC,eACMizE,EADNh6E,UAAA,gBAAE,WAC0B,MAAO3E,MAAKqiD,eACtC,SAAaphD,GACXjB,KAAKqiD,UAAYpkC,EAAAA,sBAAsBhd,oCAIzCwK,OAAFC,eACMizE,EADNh6E,UAAA,gBAAE,WAC0B,MAAO3E,MAAK6mC,eACtC,SAAa5lC,GACXjB,KAAK6mC,UAAY5oB,EAAAA,sBAAsBhd,GAEnCjB,KAAKi/E,gBACPj/E,KAAKi/E,eAAe70E,QAAQ,SAAAi3B,GAAU,MAAAA,GAAOiG,mDAiBjDq3C,EAAFh6E,UAAAwP,SAAE,WACEnU,KAAKqrC,gBAAkB,GAAIyY,GAAAA,eAAgC9jD,KAAKmrC,aAAU9oC,IAAW,IAGvFs8E,EAAFh6E,UAAAqD,mBAAE,kBACE0I,EAAA1Q,KAAKqrC,iBAAgB6Y,OAAzB/3C,MAAAuE,EAAmC1Q,KAAKi/E,eAAe35E,OAAO,SAAA+7B,GAAU,MAAAA,GAAOf,YAO7Eq+C,EAAFh6E,UAAAgqB,WAAE,SAAW1tB,GACTjB,KAAKiB,MAAQA,EACbjB,KAAKwmC,gBAAgB3vB,gBAIvB8nE,EAAFh6E,UAAAiqB,iBAAE,SAAiBC,GACf7uB,KAAK8tB,8BAAgCe,GAIvC8vD,EAAFh6E,UAAAmqB,kBAAE,SAAkBD,GAChB7uB,KAAK4iD,WAAa/zB,GAIpB8vD,EAAFh6E,UAAAoqB,iBAAE,SAAiBC,GACfhvB,KAAKW,SAAWquB,GAIlB2vD,EAAFh6E,UAAAsnB,iBAAE,WACE,GAAMlH,GAAW/kB,KAAK+kB,SAChBwJ,EAASzkB,MAAMC,QAAQgb,GAAYA,EAASA,EAAS5f,OAAS,GAAK4f,EACnEzjB,EAAQ,GAAIw9E,IAAqB,EAAU9+E,KAAKiB,MACtDjB,MAAK8tB,8BAA8BxsB,EAAML,OACzCjB,KAAK0W,OAAOS,KAAK7V,IASnBq9E,EAAFh6E,UAAAu6E,kBAAE,SAAkB79C,EAAyB6iB,EAAiBgD,OAA9D,KAAAA,IAA8DA,GAA9D,GAGSlnD,KAAKmrC,WAAYnrC,KAAK+kB,UAAasc,EAAOf,UAC5CtgC,KAAgC,SAAEsgC,SAAU,GAG3C4jB,EACFlkD,KAAKqrC,gBAAgB6Y,OAAO7iB,GAE5BrhC,KAAKqrC,gBAAgB+Y,SAAS/iB,GAI5B6lB,GACFlnD,KAAKisB,mBAKPjsB,KAAK+tB,YAAY5W,KAAKnX,KAAKiB,QAI7B09E,EAAFh6E,UAAAw6E,YAAE,SAAY99C,GACV,MAAOrhC,MAAKqrC,gBAAgBgc,WAAWhmB,IAIzCs9C,EAAFh6E,UAAAy6E,cAAE,SAAc/9C,GACZ,WAA8B,KAAnBrhC,KAAKq/E,YAIZr/E,KAAKmrC,UAAYrhC,MAAMC,QAAQ/J,KAAKq/E,WAC/Br/E,KAAKq/E,UAAUz5E,KAAK,SAAA3E,GAAS,MAAgB,OAAhBogC,EAAOpgC,OAAiBA,IAAUogC,EAAOpgC,QAGxEogC,EAAOpgC,QAAUjB,KAAKq/E,YAIvBV,EAAVh6E,UAAAggD,qBAAA,SAA+B1jD,aAG3B,IAFAjB,KAAKq/E,UAAYp+E,EAEZjB,KAAKi/E,eAIV,GAAIj/E,KAAKmrC,UAAYlqC,EAAO,CAC1B,IAAK6I,MAAMC,QAAQ9I,GACjB,KAAMozB,OAAM,qDAGdr0B,MAAKk9E,kBACLj8E,EAAMmJ,QAAQ,SAACk8C,GAAsB,MAAAzmD,GAAK0mD,aAAaD,SAEvDtmD,MAAKk9E,kBACLl9E,KAAKumD,aAAatlD,IAKd09E,EAAVh6E,UAAAu4E,2BACIl9E,KAAKqrC,gBAAgB2G,QACrBhyC,KAAKi/E,eAAe70E,QAAQ,SAAAi3B,GAAU,MAAAA,GAAOf,SAAU,KAIjDq+C,EAAVh6E,UAAA4hD,aAAA,SAAuBtlD,GACnB,GAAMwlD,GAAsBzmD,KAAKi/E,eAAe3+D,KAAK,SAAA+gB,GACnD,MAAuB,OAAhBA,EAAOpgC,OAAiBogC,EAAOpgC,QAAUA,GAG9CwlD,KACFA,EAAoBnmB,SAAU,EAC9BtgC,KAAKqrC,gBAAgB6Y,OAAOuC,oBAtPlCznD,KAAC0C,EAAAA,UAADC,OACEwC,SAAU,0BACVoD,WACEm3E,IACCl3E,QAASo3E,GAA8Bn3E,YAAak3E,IAEvDngF,MACE0I,KAAQ,QACRzI,MAAS,0BACTsD,uBAAwB,WACxBu9E,qCAAsC,WACtCC,sDAAuD,6BAEzD39E,SAAU,+DA5FZ5C,KAAEE,EAAAA,oBAmMFF,SAAAqD,GAAAZ,aAAAzC,KAAKsD,EAAAA,WAALtD,KAAiBuD,EAAAA,OAAjBZ,MAAwB88E,2BA7ExBQ,iBAAAjgF,KAAGoJ,EAAAA,gBAAHzG,MAAmBuU,EAAAA,WAAW,WAAM,MAAAspE,SAGpCR,aAAAhgF,KAAGO,EAAAA,QAGHgjB,OAAAvjB,KAAGO,EAAAA,QAYH4qB,WAAAnrB,KAAGO,EAAAA,QAOH0B,QAAAjC,KAAGO,EAAAA,QAoBHwuB,cAAA/uB,KAAGyY,EAAAA,SASH0zB,WAAAnsC,KAAGO,EAAAA,QAOHoB,WAAA3B,KAAGO,EAAAA,QAWHmX,SAAA1X,KAAGyY,EAAAA,UA7MHknE,KA2VAc,GAAA,yBA3VA,MAAAA,MA4VaC,GACT//E,EAAmB8/E,mBAwGrB,QAAFD,GAA0BG,EACJtnE,EACAnY,EACAC,EAEe6+D,EAEnB+f,GAPhB,GAAFl/E,GAQIC,EARJC,KAAAC,OAAAA,IACsBH,GAAtBwY,mBAAsBA,EACAxY,EAAtBK,YAAsBA,EACAL,EAAtBM,cAAsBA,EAjFtBN,EAAA+/E,mBAA8B,EAC9B//E,EAAAghC,UAAqB,EAWnBhhC,EAAF4U,eAA4D,KA4D5D5U,EAAAgnC,WAA+B,EAG7BhnC,EAAF6W,OACM,GAAIF,GAAAA,YAYN,IAAMyoD,GAAiB93D,OAAO63D,SAC9Bn/D,GAAKU,SAAY0+D,GAAqC,IAAnBA,EAAwBA,EAAiB,KAC5Ep/D,EAAKggF,kBAAoBF,EACzB9/E,EAAKm/E,WACDD,GAAkBA,EAAeC,WAAaD,EAAeC,WAAa,aAjBlF,MA9EqCt6E,GAArC86E,EAAA1/E,GA0BE2L,OAAFC,eAAM8zE,EAAN76E,UAAA,gBAAE,WAAyB,MAAU3E,MAAK+gB,GAA1C,2CAeEtV,OAAFC,eACM8zE,EADN76E,UAAA,kBAAE,WAEE,MAAO3E,MAAK6/E,kBAAoB7/E,KAAK6/E,kBAAkBb,WAAah/E,KAAK8/E,iBAE3E,SAAe7+E,GACbjB,KAAK8/E,YAAc7+E,mCAKrBwK,OAAFC,eACM8zE,EADN76E,UAAA,eAAE,WAEE,MAAO3E,MAAK6/E,kBAAoB7/E,KAAK6/E,kBAAkBV,YAAYn/E,MAAQA,KAAK6gC,cAElF,SAAY5/B,GACV,GAAM+jC,GAAW/mB,EAAAA,sBAAsBhd,EAEnC+jC,KAAahlC,KAAK6gC,WACpB7gC,KAAK6gC,SAAWmE,EAEZhlC,KAAK6/E,mBACP7/E,KAAK6/E,kBAAkBX,kBAAkBl/E,KAAMA,KAAK6gC,UAGtD7gC,KAAKqY,mBAAmBxB,iDAK5BpL,OAAFC,eACM8zE,EADN76E,UAAA,gBAAE,WAEE,MAAO3E,MAAK6mC,WAAc7mC,KAAK6/E,mBAAqB7/E,KAAK6/E,kBAAkBl/E,cAE7E,SAAaM,GAAkBjB,KAAK6mC,UAAY5oB,EAAAA,sBAAsBhd,oCAwBtEu+E,EAAF76E,UAAAwP,SAAE,WACEnU,KAAK4/E,kBAAoB5/E,KAAK6/E,oBAAsB7/E,KAAK6/E,kBAAkB10C,SAC3EnrC,KAAKm1E,MAAQn1E,KAAK4/E,kBAAoB,QAAU,WAChD5/E,KAAK+gB,GAAK/gB,KAAK+gB,IAAM,qBAAqB89D,KAEtC7+E,KAAK4/E,oBACP5/E,KAAKuiB,KAAOviB,KAAK6/E,kBAAkBt9D,MAGjCviB,KAAK6/E,mBAAqB7/E,KAAK6/E,kBAAkBT,cAAcp/E,QACjEA,KAAKsgC,SAAU,GAGjBtgC,KAAKG,cAAcW,QAAQd,KAAKE,aAAa,IAG/Cs/E,EAAF76E,UAAAsD,YAAE,WACEjI,KAAKG,cAAckB,eAAerB,KAAKE,cAIzCs/E,EAAF76E,UAAAmT,MAAE,WACE9X,KAAK+/E,eAAez/E,cAAcwX,SAIpC0nE,EAAF76E,UAAAq7E,eAAE,WACE,GAAMC,KAAajgF,KAAK4/E,oBAA4B5/E,KAAK6gC,QAErDo/C,KAAejgF,KAAK6gC,WACtB7gC,KAAK6gC,SAAWo/C,EACZjgF,KAAK6/E,oBACP7/E,KAAK6/E,kBAAkBX,kBAAkBl/E,KAAMA,KAAK6gC,UAAU,GAC9D7gC,KAAK6/E,kBAAkBj9B,eAI3B5iD,KAAK0W,OAAOS,KAAK,GAAI2nE,IAAsB9+E,KAAMA,KAAKiB,SAQxDu+E,EAAF76E,UAAA2iC,cAAE,WAGEtnC,KAAKqY,mBAAmBxB,+BAtK5B7X,KAACgH,EAAAA,UAADrE,OAAAwC,SAAA,oBACE8B,SAAU,ykBACVC,QAAF,qoFACExH,cAAFC,EAAAA,kBAAmCC,KACjCgD,SAAF,kBACE/C,gBAAFC,EAAAA,wBAAAC,OACE8C,QAAF,iBACErD,MACF0hF,uCAAA,qBACMC,oCAAN,UACIC,qCAAsC,WACtCC,gDAAJ,4BACI5hF,MAAJ,oBAEI8jC,kBAAJ,qIAuFAvjC,KAAuC0I,EAAAA,aAtbvC1I,KAAE2D,EAAAA,eAIF3D,KAAEyD,OAAFhB,aAAAzC,KAAA0D,EAAAA,UAAAf,MAAA,gBAXA3C,SAAQqD,GAARZ,aAAAzC,KAAAsD,EAAAA,WAAAtD,KAAAuD,EAAAA,OAAAZ,MAAA88E,SAmcAe,EAAAngF,wHA7EA0gF,iBAAA/gF,KAAQuV,EAAAA,UAAR5S,MAAA,YAKAof,KAAA/hB,KAAAO,EAAAA,QAKAgjB,OAAAvjB,KAAAO,EAAAA,QASA0B,QAAAjC,KAAAO,EAAAA,QAGAgB,WAAAvB,KAAAO,EAAAA,QAGAy/E,aAAAhgF,KAAQO,EAAAA,QAGR+gC,UAAAthC,KAAAO,EAAAA,QAGAoB,WAAA3B,KAAAO,EAAAA,QAUAmX,SAAA1X,KAAAyY,EAAAA,UA2BA+nE,mCClcA,sBAaAxgF,KAAC4D,EAAAA,SAADjB,OACEkB,SAAUE,GAAiBE,IAC3BG,SAAUL,GAAiB47E,GAAsBa,IACjD/7E,cAAek7E,GAAsBa,QAhBvCc,iCCAA,sBAqBAthF,KAAC0C,EAAAA,UAADC,OACEwC,SAAU,mBACV3F,MAAOC,MAAS,wBAvBlB8hF,iCAAA,sBA+BAvhF,KAAC0C,EAAAA,UAADC,OACEwC,SAAU,mDACV3F,MACEC,MAAS,sBAlCb+hF,iCAAA,sBA2CAxhF,KAAC0C,EAAAA,UAADC,OACEwC,SAAU,4DACV3F,MACEC,MAAS,yBA9CbgiF,gCAiEEzgF,KAAF0gF,MAAoC,QAjEpC,sBAuDA1hF,KAAC0C,EAAAA,UAADC,OACEwC,SAAU,mBACVvC,SAAU,iBACVpD,MACEC,MAAS,mBACTkiF,qCAAsC,yCAK1CD,QAAA1hF,KAAGO,EAAAA,SAjEHqhF,iCAAA,sBAwEA5hF,KAAC0C,EAAAA,UAADC,OACEwC,SAAU,kBACV3F,MAAOC,MAAS,uBA1ElBoiF,iCAAA,sBAkFA7hF,KAAC0C,EAAAA,UAADC,OACEwC,SAAU,mCACV3F,MAAOC,MAAS,sBApFlBqiF,iCAAA,sBA4FA9hF,KAAC0C,EAAAA,UAADC,OACEwC,SAAU,2CACV3F,MAAOC,MAAS,yBA9FlBsiF,iCAAA,sBAsGA/hF,KAAC0C,EAAAA,UAADC,OACEwC,SAAU,4CACV3F,MAAOC,MAAS,yBAxGlBuiF,iCAAA,sBAgHAhiF,KAAC0C,EAAAA,UAADC,OACEwC,SAAU,2CACV3F,MAAOC,MAAS,yBAlHlBwiF,iCAAA,sBA0HAjiF,KAAC0C,EAAAA,UAADC,OACEwC,SAAU,4CACV3F,MAAOC,MAAS,yBA5HlByiF,iCAAA,sBAoIAliF,KAAC0C,EAAAA,UAADC,OACEwC,SAAU,qCACV3F,MAAOC,MAAS,uBAtIlB0iF,iCA+JA,sBATAniF,KAACgH,EAAAA,UAADrE,OAAAwC,SAAA,WACEvC,SAAU,UACVqE,SAAU,8EACVC,QAAF,01EACExH,cAAFC,EAAAA,kBAAAC,KACEC,gBAAFC,EAAAA,wBAAAC,OACEP,MAAFC,MAAA,gBAGA2iF,iCAcA,yWALA1iF,cAAAC,EAAAA,kBAAAC,KACEC,gBAAiBC,EAAAA,wBAAnBC,OACEP,MAAQC,MAAV,uBAGA4iF,iCAcA,0YAHA7iF,MAAAC,MAAA,4BAGA6iF,iCC3LA,sBA4BAtiF,KAAC4D,EAAAA,SAADjB,OACEkB,SAAUE,IACVK,SACEg+E,GACAC,GACAC,GACAf,GACAC,GACAC,GACAG,GACAC,GACAE,GACAC,GACAC,GACAH,GACAI,GACAC,GACAp+E,IAEFU,cACE29E,GAASC,GAAeC,GAAmBf,GAAgBC,GAAcC,GACzEG,GAAgBC,GAAeE,GAAgBC,GAAgBC,GAAgBH,GAC/EI,GAAgBC,QAlDpBI,KCsBa9H,GACT,GAAIznE,GAAAA,eAAuC,6BX0B3CguB,GAAe,EAKfg5C,GAAyB,EAOhBQ,IACXhyE,QAAS04B,EAAAA,kBACTz4B,YAAayO,EAAAA,WAAW,WAAM,MAAA6hE,MAC9B33C,OAAO,OASPy3C,KAAF,EAEEQ,QAAF,EAEEC,UAAF,EAEEF,cAAF,EANAR,IAAAA,GAAEC,MAAF,OAEAD,GAAAA,GAAES,SAAF,UAEAT,GAAAA,GAAEU,WAAF,YAEAV,GAAAA,GAAEQ,eAAF,eAIA,IAAAS,IAAA,yBAnFA,MAAAA,MA4FA2I,GAAA,WACE,QAAFA,GAAqBthF,GAAAF,KAArBE,YAAqBA,EA7FrB,MAAAshF,MA+FaC,GAML/hF,EAAcwE,EAAWvE,EAAmBC,EAAc4hF,KAAmB,0BA8FnF,QAAFzJ,GAAczzE,EACQ+T,EACAlY,EACAiS,EACe7R,EAEXi3E,EACsC96C,GAP9D,GAAF78B,GAQIC,EARJC,KAAAC,KAQUsE,IARVtE;iCACsBH,GAAtBwY,mBAAsBA,EACAxY,EAAtBM,cAAsBA,EACAN,EAAtBuS,QAAsBA,EAGIvS,EAA1B23E,aAA0BA,EACsC33E,EAAhE68B,eAAgEA,EA9D9D78B,EAAF2U,UAA2C,GAKzC3U,EAAF4U,eAA4D,KAE5D5U,EAAA8gC,UAA8B,mBAAkBX,GAG9CngC,EAAFkhB,GAAwBlhB,EAAK8gC,UAY3B9gC,EAAFgnB,cAA+C,QAG7ChnB,EAAF0iB,KAAiC,KAG/B1iB,EAAF6W,OACM,GAAIF,GAAAA,aAGR3W,EAAF43E,oBAAkE,GAAIjhE,GAAAA,aAepE3W,EAAF+iD,WAA0B,aAE1B/iD,EAAA63E,uBAA2C,GAE3C73E,EAAA83E,mBAAqDC,GAAqBC,KAE1Eh4E,EAAAiuB,8BAAgE,aA6ChEjuB,EAAAghC,UAA8B,EAc9BhhC,EAAAgnC,WAA+B,EAwB/BhnC,EAAAi4E,gBAAoC,EAvEhCj4E,EAAKU,SAAWC,SAASD,IAAa,EAEtCV,EAAKM,cAAcW,QAAQwD,GAAY,GAAMY,UAAU,SAAA+7B,GAChDA,GAMHzvB,QAAQC,UAAUC,KAAK,WAAM,MAAA7R,GAAK+iD,mBA8C1C,MA/HiCl+C,GAAjCqzE,EAAAj4E,GAoBE2L,OAAFC,eAAMqsE,EAANpzE,UAAA,eAAE,WAAwB,OAAU3E,KAAK+gB,IAAM/gB,KAAK2gC,WAApD,0CAGEl1B,OAAFC,eACMqsE,EADNpzE,UAAA,gBAAE,WAC0B,MAAO3E,MAAK4gC,eACtC,SAAa3/B,GAAkBjB,KAAK4gC,UAAY3iB,EAAAA,sBAAsBhd,oCA6DtE82E,EAAFpzE,UAAAqzE,mBAAE,WACEh4E,KAAKi4E,0BAGPF,EAAFpzE,UAAAsD,YAAE,WACEjI,KAAKG,cAAckB,eAAerB,KAAKE,cAMzCuL,OAAFC,eACMqsE,EADNpzE,UAAA,eAAE,WACyB,MAAO3E,MAAK6gC,cACrC,SAAY5/B,GACNA,GAASjB,KAAKsgC,UAChBtgC,KAAK6gC,SAAW5/B,EAChBjB,KAAKqY,mBAAmBxB,iDAS5BpL,OAAFC,eACMqsE,EADNpzE,UAAA,gBAAE,WACiB,MAAO3E,MAAK6mC,eAC7B,SAAa5lC,GACPA,GAASjB,KAAKW,WAChBX,KAAK6mC,UAAY5lC,EACjBjB,KAAKqY,mBAAmBxB,iDAW5BpL,OAAFC,eACMqsE,EADNpzE,UAAA,qBAAE,WAC+B,MAAO3E,MAAK83E,oBAC3C,SAAkB72E,GAChB,GAAMi3E,GAAUj3E,GAASjB,KAAK83E,cAC9B93E,MAAK83E,eAAiB72E,EAElBi3E,IACEl4E,KAAK83E,eACP93E,KAAKm4E,sBAAsBP,GAAqBQ,eAEhDp4E,KAAKm4E,sBACHn4E,KAAKsgC,QAAUs3C,GAAqBS,QAAUT,GAAqBU,WAEvEt4E,KAAKy3E,oBAAoBtgE,KAAKnX,KAAK83E,kDAKvCC,EAAFpzE,UAAAujC,kBAAE,WACE,MAAOloC,MAAKmoC,eAAiBnoC,KAAKW,UAIpCo3E,EAAFpzE,UAAA09B,mBAAE,WAMEriC,KAAKqY,mBAAmB8S,iBAI1B4sD,EAAFpzE,UAAAgqB,WAAE,SAAW1tB,GACTjB,KAAKsgC,UAAYr/B,GAInB82E,EAAFpzE,UAAAiqB,iBAAE,SAAiBC,GACf7uB,KAAK8tB,8BAAgCe,GAIvCkpD,EAAFpzE,UAAAmqB,kBAAE,SAAkBD,GAChB7uB,KAAK4iD,WAAa/zB,GAIpBkpD,EAAFpzE,UAAAoqB,iBAAE,SAAiBC,GACfhvB,KAAKW,SAAWquB,GAGlB+oD,EAAFpzE,UAAA4zE,gBAAE,WACE,MAAOv4E,MAAKsgC,QAAU,OAAUtgC,KAAKw4E,cAAgB,QAAU,SAGzDT,EAAVpzE,UAAAwzE,sBAAA,SAAgCM,GAC5B,GAAIC,GAAW14E,KAAK23E,mBAChBplE,EAAuBvS,KAAKE,YAAYI,aAE5C,IAAIo4E,IAAaD,IAGbz4E,KAAK03E,uBAAuBvyE,OAAS,GACvCoN,EAAQ/M,UAAU2Y,OAAOne,KAAK03E,wBAGhC13E,KAAK03E,uBAAyB13E,KAAK24E,0CAC/BD,EAAUD,GACdz4E,KAAK23E,mBAAqBc,EAEtBz4E,KAAK03E,uBAAuBvyE,OAAS,GAAG,CAC1CoN,EAAQ/M,UAAU4Y,IAAIpe,KAAK03E,uBAG3B,IAAMkB,GAAiB54E,KAAK03E,sBAE5B13E,MAAKoS,QAAQM,kBAAkB,WAC7Bsf,WAAW,WACTzf,EAAQ/M,UAAU2Y,OAAOy6D,IACxB,SAKDb,EAAVpzE,UAAAsnB,4BACI,GAAM3qB,GAAQ,GAAIu3E,GAClBv3E,GAAMitB,OAASvuB,KACfsB,EAAMg/B,QAAUtgC,KAAKsgC,QAErBtgC,KAAK8tB,8BAA8B9tB,KAAKsgC,SACxCtgC,KAAK0W,OAAOS,KAAK7V,IAInBy2E,EAAFpzE,UAAA08B,OAAE,WACErhC,KAAKsgC,SAAWtgC,KAAKsgC,SAUvBy3C,EAAFpzE,UAAAy8B,cAAE,SAAc9/B,GAAd,GAAFzB,GAAAG,IAQIsB,GAAMq5B,kBAGD36B,KAAKW,UAAkC,SAAtBX,KAAKw3E,aAkBfx3E,KAAKW,UAAkC,SAAtBX,KAAKw3E,eAGhCx3E,KAAKmhC,cAAc7gC,cAAcggC,QAAUtgC,KAAKsgC,QAChDtgC,KAAKmhC,cAAc7gC,cAAck4E,cAAgBx4E,KAAKw4E,gBApBlDx4E,KAAKw4E,eAAuC,UAAtBx4E,KAAKw3E,cAE7BhmE,QAAQC,UAAUC,KAAK,WACrB7R,EAAKi4E,gBAAiB,EACtBj4E,EAAK43E,oBAAoBtgE,KAAKtX,EAAKi4E,kBAIvC93E,KAAKqhC,SACLrhC,KAAKm4E,sBACDn4E,KAAK6gC,SAAW+2C,GAAqBS,QAAUT,GAAqBU,WAKxEt4E,KAAKisB,qBAUT8rD,EAAFpzE,UAAAmT,MAAE,WACE9X,KAAKG,cAAck7B,SAASr7B,KAAKmhC,cAAe,aAGlD42C,EAAFpzE,UAAAm0E,oBAAE,SAAoBx3E,GAIlBA,EAAMq5B,mBAGAo9C,EAAVpzE,UAAAg0E,0CACA,SAAMD,EAAgCD,GAElC,GAA4B,mBAAxBz4E,KAAK08B,eACP,MAAO,EAGT,IAAIq8C,GAAqB,EAEzB,QAAQL,GACN,IAAKd,IAAqBC,KAGxB,GAAIY,IAAab,GAAqBS,QACpCU,EAAa,wBACR,CAAA,GAAIN,GAAYb,GAAqBQ,cAG1C,MAAO,EAFPW,GAAa,0BAIf,KACF,KAAKnB,IAAqBU,UACxBS,EAAaN,IAAab,GAAqBS,QAC3C,oBAAsB,yBAC1B,MACF,KAAKT,IAAqBS,QACxBU,EAAaN,IAAab,GAAqBU,UAC3C,oBAAsB,uBAC1B,MACF,KAAKV,IAAqBQ,cACxBW,EAAaN,IAAab,GAAqBS,QAC3C,wBAA0B,0BAIlC,MAAO,qBAAqBU,GAStBhB,EAAVpzE,UAAAszE,kCACI,IAAKe,GAAwB,CAC3B,GAAMC,GACFj5E,KAAKE,YAAYI,cAAc6lD,cAAc,wBAAwBrkB,aAAe,CACxFk3C,IAAyBC,EAAc,EAEzCj5E,KAAKk5E,OAAOC,OAASH,mBAjWzBh6E,KAACgH,EAAAA,UAADrE,OAAAwC,SAAA,eACE8B,SAAU,q7CACVC,QAAF,0sMACEtE,SAAF,cACEpD,MACFC,MAAA,eACM6jC,OAAN,KACIC,kBAAJ,OACI62C,qCAAJ,gBACIC,+BAAJ,UACIC,gCAAJ,WACIC,oCAAJ,4BACIhpD,kCAAJ,uCAEAhpB,WAAAiyE,IACA33E,QAAA,gBAAA,QAAA,YACEnD,cAAFC,EAAAA,kBAAAC,KACEC,gBAAFC,EAAAA,wBAAAC,8FAlHAC,KAAE2D,EAAAA,eAFF3D,KAAEC,EAAAA,SALFD,KAAQyD,OAARhB,aAAAzC,KAAA0D,EAAAA,UAAAf,MAAA,gBAYA3C,SAAEqD,GAAFZ,aAAAzC,KAAAsD,EAAAA,WAAAtD,KAAAuD,EAAAA,OAAAZ,MAAA83E,QAmLAz6E,KAAAyD,OAAAhB,aAAAzC,KAAesD,EAAAA,WAAftD,KAAAuD,EAAAA,OAAmCZ,MAAnC6uB,EAAAA,4BAGAunD,EAAA14E,wHA9DA0hB,KAAA/hB,KAAAO,EAAAA,QAKAojC,WAAA3jC,KAAAO,EAAAA,QAKAsnB,gBAAQ7nB,KAARO,EAAAA,QAMAgjB,OAAAvjB,KAAAO,EAAAA,QAMAmX,SAAA1X,KAAAyY,EAAAA,SAGAggE,sBAAAz4E,KAAAyY,EAAAA,SAGAxW,QAAAjC,KAAAO,EAAAA,QAIA4hC,gBAAAniC,KAAAuV,EAAAA,UAAA5S,MAAA,WAGAu3E,SAAAl6E,KAAAuV,EAAAA,UAAA5S,MAAA+3E,MAGAp5C,UAAAthC,KAAAO,EAAAA,QAGAoB,WAAA3B,KAAAO,EAAAA,QAiDAi5E,gBAAGx5E,KAAHO,EAAAA,SA8BAw4E,OClPa4B,IACXnyE,QAAS8zD,EAAAA,cACT7zD,YAAayO,EAAAA,WAAW,WAAM,MAAA0jE,MAC9Bx5C,OAAO,8EArBT,MAmCkD17B,GAAlDk1E,EAAA95E,kBANAd,KAAC0C,EAAAA,UAADC,OACEwC,SAAU,8HAEVoD,WAAYoyE,IACZn7E,MAAOq7E,kBAAmB,4BAjC5BD,GAmCkDE,EAAAA,uDCnClD,sBAgBA96E,KAAC4D,EAAAA,SAADjB,OACEkB,SAAUC,EAAAA,aAAcG,GAAiBF,GAAiBG,EAAAA,iBAC1DE,SAAU20E,GAAa6B,GAA8B72E,IACrDU,cAAes0E,GAAa6B,QAnB9BG,KCoDAC,GAAA,WACE,QAAFA,GAEWzrD,EAEAxJ,EAEAmiC,sBAJAlnD,KAAXuuB,OAAWA,EAEAvuB,KAAX+kB,SAAWA,EAEA/kB,KAAXknD,YAAWA,EA3DX,MAAA8yB,MAiEAC,GAAA,WACE,QAAFA,GAAqB/5E,GAAAF,KAArBE,YAAqBA,EAlErB,MAAA+5E,MAqEaC,GAELh2E,EAAWvE,EAAmBC,EAAcq6E,KAAe,WAE7DE,IAAwB,8CAzE9B,sBA+EAn7E,KAAC0C,EAAAA,UAADC,OACEwC,SAAU,mCACV3F,MAAOC,MAAS,uBAjFlB6vE,iCAAA,sBAyFAtvE,KAAC0C,EAAAA,UAADC,OACEwC,SAAU,gDACV3F,MAAOC,MAAS,8BA3FlB8vE,oBAgOE,QAAFpB,GAAqBjtE,EACCkS,EACR8xB,EAC+CzjC,GAH3D,GAAFZ,GAIIC,EAJJC,KAAAC,KAIUE,IAJVF,WAAqBH,GAArBK,YAAqBA,EACCL,EAAtBuS,QAAsBA,EAnGtBvS,EAAAa,0BAAqC,EAMnCb,EAAFu6E,gBAWEv6E,EAAFw6E,WAAuB,EAGrBx6E,EAAFy6E,oBAAgC,EAsB9Bz6E,EAAF6mC,WAAiC,EAuB/B7mC,EAAF06E,aAAmC,EAUjC16E,EAAF26E,YAAkC,EAGhC36E,EAAF0sB,SAAsB,GAAI3Y,GAAAA,QAGxB/T,EAAF2sB,QAAqB,GAAI5Y,GAAAA,QAGvB/T,EAAF2vC,gBACM,GAAIh5B,GAAAA,aAGR3W,EAAF46E,UAA6D,GAAIjkE,GAAAA,aAG/D3W,EAAFskD,QAA2D,GAAI3tC,GAAAA,aAa3D3W,EAAK66E,oBAEL76E,EAAK86E,YAAc,GAAIC,IAAe/6E,EAAMuS,EAASlS,EAAagkC,GAClErkC,EAAK86E,YAAYt6E,mBAAmBH,EAAYI,eAE5CG,IAEFZ,EAAKa,2BAA6BD,EAAcE,SAChDd,EAAKu6E,cACHv5E,UAAWJ,EAAcI,UACzBD,qBAAsBH,EAAcG,yBAhP5C,MAuH6B8D,GAA7ByoE,EAAArtE,GAmBE2L,OAAFC,eAAMyhE,EAANxoE,UAAA,sBAAE,WACE,MAAO3E,MAAKW,UAAYX,KAAKmoC,eAAiBnoC,KAAKU,0DAmBrD+K,OAAFC,eACMyhE,EADNxoE,UAAA,gBAAE,WAC0B,MAAO3E,MAAK0mC,eACtC,SAAazlC,GACX,GAAM45E,GAAe58D,EAAAA,sBAAsBhd,EAEvC45E,KAAiB76E,KAAK0mC,YACxB1mC,KAAK0mC,UAAYm0C,EACjB76E,KAAK86E,6DAMTrvE,OAAFC,eACMyhE,EADNxoE,UAAA,aAAE,WAEE,WAAsBtC,IAAfrC,KAAKspB,OACRtpB,KAAKspB,OACLtpB,KAAKE,YAAYI,cAAcuF,iBAErC,SAAU5E,GAAcjB,KAAKspB,OAASroB,mCAStCwK,OAAFC,eACMyhE,EADNxoE,UAAA,kBAAE,WAC4B,MAAO3E,MAAKu6E,aAAev6E,KAAKs6E,wBAC5D,SAAer5E,GACbjB,KAAKu6E,YAAct8D,EAAAA,sBAAsBhd,oCAO3CwK,OAAFC,eACMyhE,EADNxoE,UAAA,iBAAE,WAC2B,MAAO3E,MAAKw6E,gBACvC,SAAcv5E,GACZjB,KAAKw6E,WAAav8D,EAAAA,sBAAsBhd,oCAqB1CwK,OAAFC,eAAMyhE,EAANxoE,UAAA,oBAAE,WACE,MAAO3E,MAAKitE,WAAajtE,KAAK+kB,SAASoe,WAAa,sCAwBtDgqC,EAAFxoE,UAAA+1E,kBAAE,WAEE,IAAmB,GAAvBjwB,GAAA,EAAuBswB,EAAvBZ,GAAuB1vB,EAAvBswB,EAAA51E,OAAuBslD,IAAsB,CAApC,GAAMuwB,GAAfD,EAAAtwB,EACM,IAAIzqD,KAAKE,YAAYI,cAAcmrD,aAAauvB,IAC9Ch7E,KAAKE,YAAYI,cAAc26E,QAAQtrE,gBAAkBqrE,EAEzD,WADCh7E,MAAKE,YAAwC,cAAEsF,UAAU4Y,IAAI48D,GAIjEh7E,KAAKE,YAAwC,cAAEsF,UAAU4Y,IAAI,sBAGhE+uD,EAAFxoE,UAAAsD,YAAE,WACEjI,KAAKy6E,UAAUtjE,MAAM+jE,KAAMl7E,OAC3BA,KAAK26E,YAAYQ,wBAInBhO,EAAFxoE,UAAAu/C,OAAE,WACOlkD,KAAK0mC,YACR1mC,KAAK0mC,WAAY,EACjB1mC,KAAK86E,6BAKT3N,EAAFxoE,UAAAy/C,SAAE,WACMpkD,KAAK0mC,YACP1mC,KAAK0mC,WAAY,EACjB1mC,KAAK86E,6BAKT3N,EAAFxoE,UAAAy2E,qBAAE,WACOp7E,KAAK0mC,YACR1mC,KAAK0mC,WAAY,EACjB1mC,KAAK86E,0BAAyB,KAKlC3N,EAAFxoE,UAAA02E,eAAE,SAAen0B,GAGb,WAHJ,KAAAA,IAAiBA,GAAjB,GACIlnD,KAAK0mC,WAAa1mC,KAAK+kB,SACvB/kB,KAAK86E,yBAAyB5zB,GACvBlnD,KAAK+kB,UAIdooD,EAAFxoE,UAAAmT,MAAE,WACO9X,KAAKq6E,YACRr6E,KAAKE,YAAYI,cAAcwX,QAC/B9X,KAAKusB,SAAS5gB,MAAMuvE,KAAMl7E,QAE5BA,KAAKq6E,WAAY,GASnBlN,EAAFxoE,UAAAwZ,OAAE,WACMne,KAAKs7E,WACPt7E,KAAKmkD,QAAQhtC,MAAM+jE,KAAMl7E,QAK7BmtE,EAAFxoE,UAAA6a,aAAE,SAAale,GACPtB,KAAKW,SACPW,EAAMC,iBAEND,EAAMq5B,mBAKVwyC,EAAFxoE,UAAAiV,eAAE,SAAetY,GACb,IAAItB,KAAKW,SAIT,OAAQW,EAAMuY,SACZ,IAAK0hE,GAAAA,OACL,IAAKC,GAAAA,UAEHx7E,KAAKme,SAEL7c,EAAMC,gBACN,MACF,KAAK4Y,GAAAA,MAECna,KAAKitE,YACPjtE,KAAKq7E,gBAAe,GAItB/5E,EAAMC,mBAKZ4rE,EAAFxoE,UAAAipE,MAAE,WAAA,GAAF/tE,GAAAG,IAKIA,MAAKoS,QAAQ6qC,SACV5qB,eACApoB,KAAKC,EAAAA,KAAK,IACVhF,UAAU,WACTrF,EAAKuS,QAAQ8I,IAAI,WACfrb,EAAKw6E,WAAY,EACjBx6E,EAAK2sB,QAAQ7gB,MAAMuvE,KAAMr7E,SAKzBstE,EAAVxoE,UAAAm2E,yBAAA,SAAmC5zB,OAAnC,KAAAA,IAAmCA,GAAnC,GACIlnD,KAAKwvC,gBAAgBr4B,MACnBoX,OAAQvuB,KACRknD,YAANA,EACMniC,SAAU/kB,KAAK0mC,4BA/QrB1nC,KAAC0C,EAAAA,UAADC,OACEwC,SAAU,yDACVtC,QAAS,QAAS,WAAY,iBAC9BD,SAAU,UACVpD,MACEC,MAAS,WACT8jC,kBAAmB,uBACnBr7B,KAAQ,SACRu0E,4BAA6B,WAC7BC,+BAAgC,SAChCC,sCAAuC,6BACvCC,4BAA6B,WAC7B3gC,kBAAmB,mBACnBl5C,uBAAwB,sBACxBooD,uBAAwB,eACxBhoD,UAAW,uBACXitB,YAAa,yBACbF,UAAW,UACXC,SAAU,mDArGdnwB,KAAE0I,EAAAA,aAKF1I,KAAEC,EAAAA,SATFD,KAAQoD,EAAAA,WAwNRpD,SAAAqD,GAAAZ,aAAAzC,KAAesD,EAAAA,WAAftD,KAA2BuD,EAAAA,OAA3BZ,MAAkCa,2BA9ElCq5E,SAAA78E,KAAGw/B,EAAAA,aAAH78B,MAAgB2sE,MAGhBwN,eAAA98E,KAAGw/B,EAAAA,aAAH78B,MAAgB4sE,MAGhBwN,aAAA/8E,KAAGw/B,EAAAA,aAAH78B,MAAgBuU,EAAAA,WAAW,WAAM,MAAAm4D,SAGjCtpD,WAAA/lB,KAAGO,EAAAA,QAaH0B,QAAAjC,KAAGO,EAAAA,QAeH0tE,aAAAjuE,KAAGO,EAAAA,QAUH+7E,YAAAt8E,KAAGO,EAAAA,QAcHiwC,kBAAAxwC,KAAGyY,EAAAA,SAIHgjE,YAAAz7E,KAAGyY,EAAAA,SAGH0sC,UAAAnlD,KAAGyY,EAAAA,UAzNH01D,GAuH6B+M,kBAqR3B,QAAF7L,GAAwB2N,GAAAh8E,KAAxBg8E,YAAwBA,EA5YxB,MA+YE3N,GAAF1pE,UAAA6a,aAAE,SAAale,GACPtB,KAAKg8E,YAAYV,WACnBt7E,KAAKg8E,YAAY79D,SAQnB7c,EAAMq5B,kCArBV37B,KAAC0C,EAAAA,UAADC,OACEwC,SAAU,kBACV3F,MACEC,MAAS,yCACT0D,UAAW,gEAIfnD,KAAqCmuE,MA5YrCkB,KCiBaH,GACT,GAAIl8D,GAAAA,eAAuC,6BnB6B/CiqE,GAAA,WACE,QAAFA,GAAqBn6B,EACAC,EACAC,EAEAC,GAJAjiD,KAArB8hD,0BAAqBA,EACA9hD,KAArB+hD,YAAqBA,EACA/hD,KAArBgiD,iBAAqBA,EAEAhiD,KAArBiiD,UAAqBA,EApDrB,MAAAg6B,MAsDaC,GACT/5B,EAAgB85B,IAIhBj8C,GAAe,EAGnBm8C,GAAA,WACE,QAAFA,GAEW5tD,EAEAttB,GAFAjB,KAAXuuB,OAAWA,EAEAvuB,KAAXiB,MAAWA,EAnEX,MAAAk7E,qBA8UE,QAAFpP,GAAwB7sE,EACFmY,EACYjC,EACR2rC,EACAC,EACZF,EAE2BG,GAPvC,GAAFpiD,GAQIC,EARJC,KAAAC,KAQU8hD,EAA2BC,EAAaC,EAAkBC,IARpEjiD,WAAwBH,GAAxBK,YAAwBA,EACFL,EAAtBwY,mBAAsBA,EACYxY,EAAlCuW,KAAkCA,EAKOvW,EAAzCoiD,UAAyCA,EAzOvCpiD,EAAFojD,YAAiC,gBAOjCpjD,EAAAu8E,wBAAmD,KAGnDv8E,EAAA4Y,WAAuB,GAAI7E,GAAAA,QAkBzB/T,EAAF4iD,KAAiB,iBAAiBziB,KAMhCngC,EAAFw8E,UAAc,EAMZx8E,EAAFy8E,cAAiC,KAM/Bz8E,EAAF+iD,WAAe,aAGb/iD,EAAF8iD,UAAoC,aAqBpC9iD,EAAAwiD,WAA+B,EAgB/BxiD,EAAAyiD,aAAyB,SAACC,EAASC,GAAY,MAAAD,KAAOC,GAgCpD3iD,EAAF+gC,WAAiC,EAgD/B/gC,EAAFgnC,WAAiC,EAG/BhnC,EAAFmtE,gBAA0E,aAexEntE,EAAF06E,aAAmC,EA6BjC16E,EAAF6W,OACM,GAAIF,GAAAA,aAOR3W,EAAFkuB,YAAsD,GAAIvX,GAAAA,aAclD3W,EAAKoiD,YACPpiD,EAAKoiD,UAAUsB,cAAgB1jD,KAZrC,MAtOiC6E,GAAjCqoE,EAAAjtE,GA4DE2L,OAAFC,eAAMqhE,EAANpoE,UAAA,gBAAE,WACE,MAAO3E,MAAKmrC,SAAWnrC,KAAKqrC,gBAAgBtmB,SAAW/kB,KAAKqrC,gBAAgBtmB,SAAS,oCAIvFtZ,OAAFC,eAAMqhE,EAANpoE,UAAA,YAAE,WAA4B,MAAO3E,MAAKwtC,MAAQ,KAAO,2CAMvD/hC,OAAFC,eACMqhE,EADNpoE,UAAA,gBAAE,WAC0B,MAAO3E,MAAKqiD,eACtC,SAAaphD,GACXjB,KAAKqiD,UAAYpkC,EAAAA,sBAAsBhd,oCASzCwK,OAAFC,eACMqhE,EADNpoE,UAAA,mBAAE,WACmD,MAAO3E,MAAKsiD,kBAC/D,SAAgBzzB,GACd7uB,KAAKsiD,aAAezzB,EAChB7uB,KAAKqrC,iBAEPrrC,KAAK4jD,wDASTn4C,OAAFC,eACMqhE,EADNpoE,UAAA,aAAE,WACmB,MAAO3E,MAAKspB,YAC/B,SAAUroB,GACRjB,KAAK2uB,WAAW1tB,GAChBjB,KAAKspB,OAASroB,mCAQhBwK,OAAFC,eAAMqhE,EAANpoE,UAAA,UAAE,WACE,MAAO3E,MAAKu8E,WAAav8E,KAAKu8E,WAAWx7D,GAAK/gB,KAAKyiD,sCAOrDh3C,OAAFC,eACMqhE,EADNpoE,UAAA,gBAAE,WAC0B,MAAO3E,MAAK4gC,eACtC,SAAa3/B,GACXjB,KAAK4gC,UAAY3iB,EAAAA,sBAAsBhd,GACvCjB,KAAKyjD,aAAa93C,wCAQpBF,OAAFC,eACMqhE,EADNpoE,UAAA,mBAAE,WAEE,MAAO3E,MAAKu8E,WAAav8E,KAAKu8E,WAAWpyC,YAAcnqC,KAAKwjD,kBAE9D,SAAgBviD,GACdjB,KAAKwjD,aAAeviD,EACpBjB,KAAKyjD,aAAa93C,wCAKpBF,OAAFC,eAAMqhE,EAANpoE,UAAA,eAAE,WACE,MAAQ3E,MAAKu8E,YAAcv8E,KAAKu8E,WAAWlP,SAAYrtE,KAAKw8E,mDAO9D/wE,OAAFC,eAAMqhE,EAANpoE,UAAA,aAAE,WACE,QAAS3E,KAAKu8E,YAAcv8E,KAAKu8E,WAAW/uC,QAAgC,IAAtBxtC,KAAKktE,MAAM/nE,wCAOnEsG,OAAFC,eAAMqhE,EAANpoE,UAAA,wBAAE,WAAkC,OAAQ3E,KAAKwtC,OAASxtC,KAAKqtE,yCAM7D5hE,OAAFC,eACMqhE,EADNpoE,UAAA,gBAAE,WAC0B,MAAO3E,MAAKiiD,YAAcjiD,KAAKiiD,UAAUthD,SAAWX,KAAK6mC,eACnF,SAAa5lC,GAAb,GAAFpB,GAAAG,IACIA,MAAK6mC,UAAY5oB,EAAAA,sBAAsBhd,GAEnCjB,KAAKktE,OACPltE,KAAKktE,MAAM9iE,QAAQ,SAAA8wE,GAAQ,MAAAA,GAAKv6E,SAAWd,EAAKgnC,6CAYpDp7B,OAAFC,eACMqhE,EADNpoE,UAAA,kBAAE,WAC4B,MAAO3E,MAAKu6E,iBACxC,SAAet5E,GAAf,GAAFpB,GAAAG,IACIA,MAAKu6E,YAAct8D,EAAAA,sBAAsBhd,GAErCjB,KAAKktE,OACPltE,KAAKktE,MAAM9iE,QAAQ,SAAA8wE,GAAQ,MAAAA,GAAKZ,mBAAqBz6E,EAAK06E,+CAK9D9uE,OAAFC,eACMqhE,EADNpoE,UAAA,gBAAE,SACa1D,GACXjB,KAAKs8E,cAAgBr7E,EACrBjB,KAAKq8E,UAAYp7E,mCAInBwK,OAAFC,eAAMqhE,EAANpoE,UAAA,4BAAE,WACE,MAAOuH,GAAAA,MAAXC,UAAA,GAAoBnM,KAAKktE,MAAM9gE,IAAI,SAAA8uE,GAAQ,MAAAA,GAAK1rC,oDAI9C/jC,OAAFC,eAAMqhE,EAANpoE,UAAA,wBAAE,WACE,MAAOuH,GAAAA,MAAXC,UAAA,GAAoBnM,KAAKktE,MAAM9gE,IAAI,SAAA8uE,GAAQ,MAAAA,GAAK3uD,6CAI9C9gB,OAAFC,eAAMqhE,EAANpoE,UAAA,uBAAE,WACE,MAAOuH,GAAAA,MAAXC,UAAA,GAAoBnM,KAAKktE,MAAM9gE,IAAI,SAAA8uE,GAAQ,MAAAA,GAAK1uD,4CAI9C/gB,OAAFC,eAAMqhE,EAANpoE,UAAA,yBAAE,WACE,MAAOuH,GAAAA,MAAXC,UAAA,GAAoBnM,KAAKktE,MAAM9gE,IAAI,SAAA8uE,GAAQ,MAAAA,GAAKT,8CA+B9C1N,EAAFpoE,UAAAqD,mBAAE,WAAA,GAAFnI,GAAAG,IACIA,MAAKiZ,YAAc,GAAIwB,GAAAA,gBAAyBza,KAAKktE,OAClDvyD,WACAmsC,0BACApsC,0BAA0B1a,KAAKoW,KAAOpW,KAAKoW,KAAKnV,MAAQ,OAI3DjB,KAAKiZ,YAAYwjC,OAAOxyC,KAAK4Q,EAAAA,UAAU7a,KAAKyY,aAAavT,UAAU,WACjErF,EAAKw8E,WAAa,EAClBrqD,WAAW,WAAM,MAAAnyB,GAAKw8E,UAAYx8E,EAAKy8E,eAAiB,MAI1Dt8E,KAAKktE,MAAMjoE,QAAQgF,KAAKuL,EAAAA,UAAU,MAAOqF,EAAAA,UAAU7a,KAAKyY,aAAavT,UAAU,WAC7ErF,EAAK48E,cAGL58E,EAAK+jD,uBAGL/jD,EAAK68E,kBAGL78E,EAAK88E,gCAEL98E,EAAK4jD,aAAa93C,UAItBohE,EAAFpoE,UAAAwP,SAAE,WACEnU,KAAKqrC,gBAAkB,GAAIyY,GAAAA,eAAwB9jD,KAAKmrC,aAAU9oC,IAAW,GAC7ErC,KAAKyjD,aAAa93C,QAGpBohE,EAAFpoE,UAAAg5B,UAAE,WACM39B,KAAKiiD,WAIPjiD,KAAKskD,oBAITyoB,EAAFpoE,UAAAsD,YAAE,WACEjI,KAAKyY,WAAW9M,OAChB3L,KAAKyY,WAAWvE,WAChBlU,KAAKyjD,aAAavvC,WAElBlU,KAAK48E,sBAKP7P,EAAFpoE,UAAA+oE,cAAE,SAAcmP,GACZ78E,KAAKu8E,WAAaM,GAOpB9P,EAAFpoE,UAAAuoC,kBAAE,SAAkBC,GAAiBntC,KAAKotC,iBAAmBD,EAAIE,KAAK,MAGpE0/B,EAAFpoE,UAAAgqB,WAAE,SAAW1tB,GACLjB,KAAKktE,OACPltE,KAAK2kD,qBAAqB1jD,GAAO,IAKrC8rE,EAAFpoE,UAAAiqB,iBAAE,SAAiBC,GACf7uB,KAAK2iD,UAAY9zB,GAInBk+C,EAAFpoE,UAAAmqB,kBAAE,SAAkBD,GAChB7uB,KAAK4iD,WAAa/zB,GAIpBk+C,EAAFpoE,UAAAoqB,iBAAE,SAAiBC,GACfhvB,KAAKW,SAAWquB,EAChBhvB,KAAKyjD,aAAa93C,QAOpBohE,EAAFpoE,UAAA2oC,iBAAE,SAAiBhsC,GACVtB,KAAK88E,oBAAoBx7E,IAC5BtB,KAAK8X,SAQTi1D,EAAFpoE,UAAAmT,MAAE,WACM9X,KAAKW,UAMLX,KAAKu8E,YAAcv8E,KAAKu8E,WAAWlP,UAE5BrtE,KAAKktE,MAAM/nE,OAAS,GAC7BnF,KAAKiZ,YAAYc,qBACjB/Z,KAAKyjD,aAAa93C,SAElB3L,KAAK+8E,cACL/8E,KAAKyjD,aAAa93C,UAKtBohE,EAAFpoE,UAAAo4E,YAAE,WACM/8E,KAAKu8E,YACPv8E,KAAKu8E,WAAWzkE,SAOpBi1D,EAAFpoE,UAAAy+D,SAAE,SAAS9hE,GACP,GAAMs3C,GAASt3C,EAA2B,MAGtCA,GAAMuY,UAAY2hE,EAAAA,WAAax7E,KAAKg9E,cAAcpkC,IACpD54C,KAAKiZ,YAAYgB,oBACjB3Y,EAAMC,kBACGq3C,GAAUA,EAAOpzC,UAAUC,SAAS,cACzCnE,EAAMuY,UAAYC,EAAAA,MACpB9Z,KAAKiZ,YAAYc,qBACjBzY,EAAMC,kBACGD,EAAMuY,UAAYG,EAAAA,KAC3Bha,KAAKiZ,YAAYgB,oBACjB3Y,EAAMC,kBAENvB,KAAKiZ,YAAYoB,UAAU/Y,GAG7BtB,KAAKyjD,aAAa93C,SAQZohE,EAAZpoE,UAAA+3E,gBAAE,WAEE18E,KAAKq8E,UAAYr8E,KAAKs8E,gBAAwC,IAAtBt8E,KAAKktE,MAAM/nE,QAAgB,EAAI,IAO/D4nE,EAAZpoE,UAAAg4E,8BAAE,WACE,GAAoC,MAAhC38E,KAAKo8E,yBAAmCp8E,KAAKktE,MAAM/nE,OAAQ,CAC7D,GAAM83E,GAAerrE,KAAKE,IAAI9R,KAAKo8E,wBAAyBp8E,KAAKktE,MAAM/nE,OAAS,EAChFnF,MAAKiZ,YAAYoC,cAAc4hE,GAGjCj9E,KAAKo8E,wBAA0B,MASzBrP,EAAVpoE,UAAAyW,cAAA,SAAwB9Q,GACpB,MAAOA,IAAS,GAAKA,EAAQtK,KAAKktE,MAAM/nE,QAGlC4nE,EAAVpoE,UAAAq4E,cAAA,SAAwBzqE,GACpB,GAAIA,GAA8C,UAAnCA,EAAQ2+B,SAASvhC,cAA2B,CAEzD,OADS,EACK1O,MAGhB,OAAO,GAGT8rE,EAAFpoE,UAAAggD,qBAAE,SAAqB1jD,EAAYimD,GAAjC,GAAFrnD,GAAAG,IAII,QAJJ,KAAAknD,IAAmCA,GAAnC,GACIlnD,KAAKk9E,kBACLl9E,KAAKktE,MAAM9iE,QAAQ,SAAA8wE,GAAQ,MAAAA,GAAK92B,aAE5Bt6C,MAAMC,QAAQ9I,GAChBA,EAAMmJ,QAAQ,SAAAk8C,GAAgB,MAAAzmD,GAAK0mD,aAAaD,EAAcY,KAC9DlnD,KAAKwmD,kBACA,CACL,GAAM22B,GAAoBn9E,KAAKumD,aAAatlD,EAAOimD,EAI/Ci2B,IACEj2B,GACFlnD,KAAKiZ,YAAYoC,cAAc8hE,KAU/BpQ,EAAVpoE,UAAA4hD,aAAA,SAAuBtlD,EAAYimD,kBAAnC,KAAAA,IAAmCA,GAAnC,EAEI,IAAMi2B,GAAoBn9E,KAAKktE,MAAM5sD,KAAK,SAAA46D,GACxC,MAAqB,OAAdA,EAAKj6E,OAAiBpB,EAAKyiD,aAAa44B,EAAKj6E,MAAQA,IAQ9D,OALIk8E,KACFj2B,EAAci2B,EAAkB/B,uBAAyB+B,EAAkBj5B,SAC3ElkD,KAAKqrC,gBAAgB6Y,OAAOi5B,IAGvBA,GAGDpQ,EAAVpoE,UAAAi/C,0CAGIpyC,SAAQC,UAAUC,KAAK,YACjB7R,EAAKoiD,WAAapiD,EAAKypB,UACzBzpB,EAAK8kD,qBAAqB9kD,EAAKoiD,UAAYpiD,EAAKoiD,UAAUhhD,MAAQpB,EAAKypB,QAAQ,GAC/EzpB,EAAK4jD,aAAa93C,WAShBohE,EAAVpoE,UAAAu4E,gBAAA,SAA0BE,GACtBp9E,KAAKqrC,gBAAgB2G,QACrBhyC,KAAKktE,MAAM9iE,QAAQ,SAAA8wE,GACbA,IAASkC,GACXlC,EAAK92B,aAGTpkD,KAAKyjD,aAAa93C,QAOZohE,EAAVpoE,UAAA6hD,iCACQxmD,MAAKqiD,YACPriD,KAAKqrC,gBAAgB2G,QAErBhyC,KAAKktE,MAAM9iE,QAAQ,SAAA8wE,GACbA,EAAKn2D,UACPllB,EAAKwrC,gBAAgB6Y,OAAOg3B,KAGhCl7E,KAAKyjD,aAAa93C,SAKdohE,EAAVpoE,UAAA2iD,kBAAA,SAA4BE,GACxB,GAAIC,GAAmB,IAGrBA,GADE39C,MAAMC,QAAQ/J,KAAK+kB,UACP/kB,KAAK+kB,SAAS3Y,IAAI,SAAA8uE,GAAQ,MAAAA,GAAKj6E,QAE/BjB,KAAK+kB,SAAW/kB,KAAK+kB,SAAS9jB,MAAQumD,EAEtDxnD,KAAKspB,OAASm+B,EACdznD,KAAK0W,OAAOS,KAAK,GAAIglE,IAAkBn8E,KAAMynD,IAC7CznD,KAAK+tB,YAAY5W,KAAKswC,GACtBznD,KAAK2iD,UAAU8E,GACfznD,KAAKqY,mBAAmBxB,gBAI1Bk2D,EAAFpoE,UAAAipE,MAAE,WAAA,GAAF/tE,GAAAG,IACSA,MAAKw8E,mBACRx8E,KAAKiZ,YAAYoC,eAAe,GAG7Brb,KAAKW,WACJX,KAAKu8E,WAKPvqD,WAAW,WACJnyB,EAAKwtE,SACRxtE,EAAKw9E,mBAKTr9E,KAAKq9E,mBAMXtQ,EAAFpoE,UAAA04E,eAAE,WACEr9E,KAAK4iD,aACL5iD,KAAKqY,mBAAmBxB,eACxB7W,KAAKyjD,aAAa93C,QAGZohE,EAAVpoE,UAAA83E,uBACIz8E,KAAK48E,qBACL58E,KAAKs9E,sBACLt9E,KAAKu9E,0BACLv9E,KAAKw9E,yBAGCzQ,EAAVpoE,UAAAi4E,8BACQ58E,KAAKy9E,yBACPz9E,KAAKy9E,uBAAuBzsE,cAC5BhR,KAAKy9E,uBAAyB,MAG5Bz9E,KAAK09E,wBACP19E,KAAK09E,sBAAsB1sE,cAC3BhR,KAAK09E,sBAAwB,MAG3B19E,KAAK29E,6BACP39E,KAAK29E,2BAA2B3sE,cAChChR,KAAK29E,2BAA6B,MAGhC39E,KAAK49E,0BACP59E,KAAK49E,wBAAwB5sE,cAC7BhR,KAAK49E,wBAA0B,OAK3B7Q,EAAVpoE,UAAA44E,6CACIv9E,MAAK29E,2BAA6B39E,KAAK69E,qBAAqB34E,UAAU,SAAA5D,GACpEA,EAAMitB,OAAOxJ,SACTllB,EAAKwrC,gBAAgB6Y,OAAO5iD,EAAMitB,QAClC1uB,EAAKwrC,gBAAgB+Y,SAAS9iD,EAAMitB,QAGnC1uB,EAAKsrC,UACRtrC,EAAKqtE,MAAM9iE,QAAQ,SAAA8wE,IACZr7E,EAAKwrC,gBAAgBgc,WAAW6zB,IAASA,EAAKn2D,UACjDm2D,EAAK92B,aAKP9iD,EAAM4lD,aACRrnD,EAAKynD,uBAMHylB,EAAVpoE,UAAA24E,yCACIt9E,MAAKy9E,uBAAyBz9E,KAAK89E,iBAAiB54E,UAAU,SAAA5D,GAC5D,GAAIy8E,GAAoBl+E,EAAKqtE,MAAM3xD,UAAU1L,QAAQvO,EAAM45E,KAEvDr7E,GAAKub,cAAc2iE,IACrBl+E,EAAKoZ,YAAYC,sBAAsB6kE,GAEzCl+E,EAAK4jD,aAAa93C,SAGpB3L,KAAK09E,sBAAwB19E,KAAKg+E,gBAAgB94E,UAAU,WAC1DrF,EAAK+tE,QACL/tE,EAAK4jD,aAAa93C,UAIdohE,EAAVpoE,UAAA64E,2CACIx9E,MAAK49E,wBAA0B59E,KAAKi+E,kBAAkB/4E,UAAU,SAAA5D,GAC9D,GAAM45E,GAAO55E,EAAM45E,KACb6C,EAAYl+E,EAAKqtE,MAAM3xD,UAAU1L,QAAQvO,EAAM45E,KAKjDr7E,GAAKub,cAAc2iE,IAAc7C,EAAKb,YACxCx6E,EAAKu8E,wBAA0B2B,MAM7BhR,EAAVpoE,UAAAm4E,oBAAA,SAA8Bx7E,GAG1B,IAFA,GAAI48E,GAAiB58E,EAAkC,OAEhD48E,GAAkBA,IAAmBl+E,KAAKE,YAAYI,eAAe,CAC1E,GAAI49E,EAAe14E,UAAUC,SAAS,YACpC,OAAO,CAGTy4E,GAAiBA,EAAejL,cAGlC,OAAO,GAIDlG,EAAVpoE,UAAA63E,2BACI,MAAOx8E,MAAKktE,MAAMtnE,KAAK,SAAAs1E,GAAQ,MAAAA,GAAKb,4BAprBxCr7E,KAACgH,EAAAA,UAADrE,OAAAwC,SAAA,gBACE8B,SAAU,qEACVrE,SAAU,cACVpD,MACF+jC,kBAAyB,8BACnBwL,0BAAN,2BACIJ,uBAAJ,sBACI5rC,uBAAJ,sBACI6rC,sBAAJ,aACIE,8BAAJ,WACIxmC,cAAJ,OACI62E,iCAAJ,WACIC,gCAAJ,aACIC,iCAAkC,WAClCxuD,0BAAJ,kBACIpxB,MAAJ,gBACIywB,UAAJ,UACIC,SAAJ,UACIC,YAAJ,mBACIkT,OAAQ,QAEZ/6B,YAAAC,QAAA+mC,GAAA9mC,YAAAslE,IACA7mE,QAAA;srFACExH,cAAFC,EAAAA,kBAAAC,KACEC,gBAAFC,EAAAA,wBAAAC,8FA9EAC,KAAEie,EAAAA,eAAFxb,aAAAzC,KAAAsD,EAAAA,aAJAtD,KAAEyvC,EAAAA,OAAFhtC,aAAAzC,KAAAsD,EAAAA,aAPAtD,KAAQ0vC,EAAAA,mBAARjtC,aAAAzC,KAAAsD,EAAAA,aAsBAtD,KAA6DknB,KAA7DlnB,KAA8B4vC,EAAAA,UAA9BntC,aAAAzC,KAAAsD,EAAAA,WAAAtD,KAAA6vC,EAAAA,UAAAk+B,EAAkD1tE,6EA2IlDgwC,cAAArwC,KAAAO,EAAAA,QAGA0B,QAAAjC,KAAAO,EAAAA,QAYAojC,WAAA3jC,KAAAO,EAAAA,QAeA4qC,cAAGnrC,KAAHO,EAAAA,QAoBAoB,WAAA3B,KAAGO,EAAAA,QAYHytE,kBAAAhuE,KAAAO,EAAAA,MAAAoC,MAAA,sBAiCAsrE,aAAAjuE,KAAAO,EAAAA,QAYAgB,WAAAvB,KAAAO,EAAAA,QAMAmX,SAAA1X,KAAAyY,EAAAA,SAWAsW,cAAA/uB,KAAAyY,EAAAA,SA2BAy1D,QAAAluE,KAAAoJ,EAAAA,gBAAAzG,MAAAwrE,OAWAJ,OCpTI/sC,GAAe,gBAyEjB,QAAFotC,GACcltE,EACiCuwC,GADjCzwC,KAAdE,YAAcA,EACiCF,KAA/CywC,gBAA+CA,EApD7CzwC,KAAFqtE,SAAqB,EAkBnBrtE,KAAFstE,YAAwB,EAOtBttE,KAAFutE,kBAC8CvtE,KAAKywC,gBAAgB88B,kBAGjEvtE,KAAFwtE,QAC6C,GAAIh3D,GAAAA,aAG/CxW,KAAFmqC,YAAiC,GAG/BnqC,KAAF+gB,GAAwB,uBAAuBif,KAM/ChgC,KAAA6mC,WAA+B,EAW3B7mC,KAAKmhC,cAAgBnhC,KAAKE,YAA6C,cApG3E,MAmDEuL,QAAFC,eACM0hE,EADNzoE,UAAA,gBAAE,SACa1D,GACPA,IACFjB,KAAKytE,UAAYxsE,EACjBjB,KAAKytE,UAAUC,cAAc1tE,wCAOjCyL,OAAFC,eACM0hE,EADNzoE,UAAA,iBAAE,WAC2B,MAAO3E,MAAKstE,gBACvC,SAAcrsE,GAAkBjB,KAAKstE,WAAarvD,EAAAA,sBAAsBhd,oCAsBxEwK,OAAFC,eACM0hE,EADNzoE,UAAA,gBAAE,WAC0B,MAAO3E,MAAK6mC,WAAc7mC,KAAKytE,WAAaztE,KAAKytE,UAAU9sE,cACrF,SAAaM,GAAkBjB,KAAK6mC,UAAY5oB,EAAAA,sBAAsBhd,oCAItEwK,OAAFC,eAAM0hE,EAANzoE,UAAA,aAAE,WAAuB,OAAQ3E,KAAKmhC,cAAclgC,uCAWlDmsE,EAAFzoE,UAAAqP,YAAE,WACEhU,KAAKytE,UAAUhqB,aAAa93C,QAI9ByhE,EAAFzoE,UAAAy+D,SAAE,SAAS9hE,GACPtB,KAAK2tE,aAAarsE,IAIpB8rE,EAAFzoE,UAAAipE,MAAE,WACM5tE,KAAK6tE,WACP7tE,KAAK2tE,eAEP3tE,KAAKqtE,SAAU,EAEVrtE,KAAKytE,UAAUJ,SAClBrtE,KAAKytE,UAAUG,QAEjB5tE,KAAKytE,UAAUhqB,aAAa93C,QAG9ByhE,EAAFzoE,UAAAmpE,OAAE,WACE9tE,KAAKqtE,SAAU,EACfrtE,KAAKytE,UAAUhqB,aAAa93C,QAI9ByhE,EAAFzoE,UAAAgpE,aAAE,SAAarsE,IACNtB,KAAKmhC,cAAclgC,OAAWK,GACjCtB,KAAKytE,UAAUrK,SAAS9hE,GAErBA,IAAStB,KAAK+tE,gBAAgBzsE,EAAMuY,WACvC7Z,KAAKwtE,QAAQr2D,MAAO6W,MAAOhuB,KAAKmhC,cAAelgC,MAAOjB,KAAKmhC,cAAclgC,QAErEK,GACFA,EAAMC,mBAKZ6rE,EAAFzoE,UAAAq5D,SAAE,WAEEh+D,KAAKytE,UAAUhqB,aAAa93C,QAI9ByhE,EAAFzoE,UAAAmT,MAAE,WACE9X,KAAKmhC,cAAcrpB,SAIbs1D,EAAVzoE,UAAAopE,gBAAA,SAA0Bl0D,GACtB,GAAMm0D,GAAahuE,KAAKutE,iBACxB,OAAOzjE,OAAMC,QAAQikE,GAAcA,EAAWn+D,QAAQgK,IAAY,EAAIm0D,EAAW/0C,IAAIpf,mBA/HzF7a,KAAC0C,EAAAA,UAADC,OACEwC,SAAU,yBACVvC,SAAU,gCACVpD,MACEC,MAAS,mCACT2wB,YAAa,mBACbD,SAAU,UACVD,UAAW,WACXwvC,UAAW,aACXp8B,OAAQ,KACR2Y,kBAAmB,mBACnBgzB,qBAAsB,sBACtBrgC,sBAAuB,iHAjC3B5uC,KAAmB0I,EAAAA,aA0FnB1I,SAAAqD,GAAAZ,aAAAzC,KAAKuD,EAAAA,OAALZ,MAAYusE,2BAhDZC,WAAAnvE,KAAGO,EAAAA,MAAHoC,MAAS,qBAWTksE,YAAA7uE,KAAGO,EAAAA,MAAHoC,MAAS,2BAUT4rE,oBAAAvuE,KAAGO,EAAAA,MAAHoC,MAAS,mCAIT6rE,UAAAxuE,KAAGyY,EAAAA,OAAH9V,MAAU,0BAIVwoC,cAAAnrC,KAAGO,EAAAA,QAGHwhB,KAAA/hB,KAAGO,EAAAA,QAGHoB,WAAA3B,KAAGO,EAAAA,SAtFH6tE,KCgBMgB,IACJrB,GACAI,GACAC,GACAiB,GACAC,GACAC,IAUFC,IACQjB,mBAAoBrzD,EAAAA,oCAjC5B,sBAyBAlb,KAAC4D,EAAAA,SAADjB,OACEyB,QAASgrE,GACT3qE,aAAc2qE,GACd7mE,WACE2e,IAEE1e,QAAS0mE,GACTO,SAAQ,SAhCdC,KCiCAC,GAAA,wBAcE3uE,KAAFkH,KAAsB,SAGpBlH,KAAFm0B,WAAmC,GAGjCn0B,KAAFk8C,aAA0B,EAGxBl8C,KAAF87C,cAA2B,GAGzB97C,KAAFi+B,cAA2B,EAGzBj+B,KAAFkT,MAAmB,GAGjBlT,KAAFqf,OAAoB,GASlBrf,KAAF4uE,SAA+B,OAS7B5uE,KAAF6H,KAAoB,KAMlB7H,KAAF6uE,gBAAoC,KAGlC7uE,KAAFwU,UAA8B,KAG5BxU,KAAF8uE,WAAwB,EAMtB9uE,KAAF+uE,cAA2B,EAUzB/uE,KAAFgvE,mBAAgC,EA/GhC,MAAAL,MCgBMM,IAIJp6D,EAAAA,MAAM,aAAcjC,EAAAA,OAAOugB,QAAS,EAAGre,UAAW,gBAClDD,EAAAA,MAAM,QAASjC,EAAAA,OAAOkC,UAAW,UACjCE,EAAAA,WAAW,aAAcC,EAAAA,QAAQ,mCAC7BrC,EAAAA,OAAOkC,UAAW,OAAQqe,QAAS,MACvCne,EAAAA,WAAW,uBACPC,EAAAA,QAAQ,sCAAuCrC,EAAAA,OAAOugB,QAAS,OAOxD+7C,IAKXC,gBAAiBv6D,EAAAA,QAAQ,kBAAmBq6D,IAG5CG,YAAax6D,EAAAA,QAAQ,cAAeq6D,oBCsDpC,QAAFI,GACYnvE,EACA45B,EACAzhB,EAC8B5T,EAE/BqxB,GANT,GAAFj2B,GAQIC,EARJC,KAAAC,OAAAA,WACYH,GAAZK,YAAYA,EACAL,EAAZi6B,kBAAYA,EACAj6B,EAAZwY,mBAAYA,EAC8BxY,EAA1C4E,UAA0CA,EAE/B5E,EAAXi2B,QAAWA,EApBXj2B,EAAAyvE,qCAAqE,KAGnEzvE,EAAF0vE,OAAsC,QAGpC1vE,EAAF2vE,uBAA2B,GAAIh5D,GAAAA,aAG7B3W,EAAF4vE,gBAAmC,OAfnC,MAFwC/qE,GAAxC2qE,EAAAvvE,GAqCEuvE,EAAF1qE,UAAA4uB,sBAAE,SAAyBC,GAMvB,MALIxzB,MAAK2zB,cAAc/d,eACrB85D,IAGF1vE,KAAK2vE,gCACE3vE,KAAK2zB,cAAcJ,sBAAsBC,IAOlD67C,EAAF1qE,UAAAivB,qBAAE,SAAwBJ,GAMtB,MALIxzB,MAAK2zB,cAAc/d,eACrB85D,IAGF1vE,KAAK2vE,gCACE3vE,KAAK2zB,cAAcC,qBAAqBJ,IAIzC67C,EAAV1qE,UAAA61B,sBACSx6B,KAAKu6B,aACRv6B,KAAKu6B,WAAav6B,KAAK85B,kBAAkB3B,OAAOn4B,KAAKE,YAAYI,gBAM/DN,KAAK81B,QAAQg5C,WACf9uE,KAAKu6B,WAAWS,gCAKZq0C,EAAV1qE,UAAA81B,yBACI,GAAMm1C,GAAU5vE,KAAKsvE,oCAGjBtvE,MAAK81B,QAAQi5C,cAAgBa,GAAoC,kBAAlBA,GAAQ93D,OACzD83D,EAAQ93D,QAGN9X,KAAKu6B,YACPv6B,KAAKu6B,WAAWiB,WAKZ6zC,EAAV1qE,UAAAgrE,mDACQ3vE,MAAKyE,YACPzE,KAAKsvE,qCAAuCtvE,KAAKyE,UAAsC,cAGnFzE,KAAKE,YAAYI,cAAcwX,OAIjCtG,QAAQC,UAAUC,KAAK,WAAM,MAAA7R,GAAKK,YAAYI,cAAcwX,YAMlEu3D,EAAF1qE,UAAAm5C,iBAAE,SAAiBx8C,GACO,UAAlBA,EAAM4V,QACRlX,KAAKw6B,aACsB,SAAlBl5B,EAAM4V,SACflX,KAAKy6B,gBAGPz6B,KAAKwvE,uBAAuBr4D,KAAK7V,IAInC+tE,EAAF1qE,UAAAkrE,kBAAE,SAAkBvuE,GAChBtB,KAAKwvE,uBAAuBr4D,KAAK7V,IAInC+tE,EAAF1qE,UAAAmrE,oBAAE,WACE9vE,KAAKuvE,OAAS,OAIdvvE,KAAKqY,mBAAmBxB,+BApJ5B7X,KAACgH,EAAAA,UAADrE,OAAAwC,SAAA,uBACE8B,SAAU,8CACVC,QAAF,4oCACExH,cAAFC,EAAAA,kBAAAC,uFAKEJ,MACFC,MAAe,uBACTwrD,SAAN,KACI8lB,aAAJ,OACIvnC,YAAJ,MACIlhC,cAAJ,eACIomC,yBAAJ,6CACID,oBAAJ,oBACIM,0BAAJ,kCACIiiC,qBAAJ,SACIC,2BAAJ,4BACIC,0BAAJ,kHAxDAlxE,KAAEE,EAAAA,oBAmBFF,SAAmBqD,GAAnBZ,aAAAzC,KAAAsD,EAAAA,WAAAtD,KAAAuD,EAAAA,OAAAZ,MAAA0E,EAAAA,cAdArH,KAAE2vE,MAeFU,EAAAhwE,6EA2CAgwE,uBCtDIlO,GAAW,EAKfgP,GAAA,WAmBE,QAAFA,GACYp/C,EACDq/C,EAEPC,EACStvD,OAAb,KAAAA,IAAAA,EAAA,cAAwCogD,KALtC,IAAFthE,GAAAG,IACYA,MAAZ+wB,YAAYA,EACD/wB,KAAXowE,mBAAWA,EAGEpwE,KAAb+gB,GAAaA,EAnBX/gB,KAAFi+B,aAAsCj+B,KAAKowE,mBAAmBt6C,QAAQmI,aAGtEj+B,KAAAixB,aAAkC,GAAIrd,GAAAA,QAGtC5T,KAAAswE,aAAkC,GAAI18D,GAAAA,QAGtC5T,KAAAuwE,cAAmC,GAAI38D,GAAAA,QAanCw8D,EAAmBvsB,IAAM9iC,EAGzBqvD,EAAmBZ,uBAAuBvlE,KACxC3E,EAAAA,OAAO,SAAAhE,GAAS,MAAoB,SAApBA,EAAM6gE,WAA0C,UAAlB7gE,EAAM4V,UACpDhN,EAAAA,KAAK,IAENhF,UAAU,WACTrF,EAAKoxB,aAAatlB,OAClB9L,EAAKoxB,aAAa/c,aAIpBk8D,EAAmBZ,uBAAuBvlE,KACxC3E,EAAAA,OAAO,SAAAhE,GAAS,MAAoB,SAApBA,EAAM6gE,WAA0C,SAAlB7gE,EAAM4V,UACpDhN,EAAAA,KAAK,IACLhF,UAAU,WAAM,MAAArF,GAAKkxB,YAAYmB,YAEnCnB,EAAYqG,cAAclyB,UAAU,WAClCrF,EAAK0wE,cAAc5kE,KAAK9L,EAAK2wE,SAC7B3wE,EAAK0wE,cAAcr8D,WACnBrU,EAAKywE,aAAa3kE,KAAK9L,EAAK2wE,SAC5B3wE,EAAKywE,aAAap8D,WAClBrU,EAAK06D,kBAAiB,KACtB16D,EAAKkxB,YAAYmB,YAGnBnB,EAAY4pC,gBACT1wD,KAAK3E,EAAAA,OAAO,SAAAhE,GAAS,MAAAA,GAAMuY,UAAY44B,EAAAA,SAAW5yC,EAAKo+B,gBACvD/4B,UAAU,WAAM,MAAArF,GAAK66B,UAjF5B,MAwFEy1C,GAAFxrE,UAAA+1B,MAAE,SAAM+1C,GAAN,GAAF5wE,GAAAG,IACIA,MAAKwwE,QAAUC,EAGfzwE,KAAKowE,mBAAmBZ,uBAAuBvlE,KAC7C3E,EAAAA,OAAO,SAAAhE,GAAS,MAAoB,UAApBA,EAAM6gE,YACtBj4D,EAAAA,KAAK,IAENhF,UAAU,WACTrF,EAAK0wE,cAAc5kE,KAAK8kE,GACxB5wE,EAAK0wE,cAAcr8D,WACnBrU,EAAKkxB,YAAY2/C,mBAGnB1wE,KAAKowE,mBAAmBN,uBAM1BK,EAAFxrE,UAAA2tB,YAAE,WACE,MAAOtyB,MAAKixB,aAAaoB,gBAM3B89C,EAAFxrE,UAAA21D,YAAE,WACE,MAAOt6D,MAAKswE,aAAaj+C,gBAM3B89C,EAAFxrE,UAAAgsE,aAAE,WACE,MAAO3wE,MAAKuwE,cAAcl+C,gBAM5B89C,EAAFxrE,UAAAg4B,cAAE,WACE,MAAO38B,MAAK+wB,YAAY4L,iBAM1BwzC,EAAFxrE,UAAAg2D,cAAE,WACE,MAAO36D,MAAK+wB,YAAY4pC,iBAO1BwV,EAAFxrE,UAAA+mC,eAAE,SAAe73B,GACb,GAAI++B,GAAW5yC,KAAK4wE,sBAgBpB,OAdI/8D,KAAaA,EAASZ,MAAQY,EAASmkB,OACzCnkB,EAASZ,KAAO2/B,EAAS3/B,KAAKY,EAASZ,MAAQ2/B,EAAS5a,MAAMnkB,EAASmkB,OAEvE4a,EAAS3a,qBAGPpkB,IAAaA,EAAS0Z,KAAO1Z,EAASqkB,QACxCrkB,EAAS0Z,IAAMqlB,EAASrlB,IAAI1Z,EAAS0Z,KAAOqlB,EAAS1a,OAAOrkB,EAASqkB,QAErE0a,EAASi+B,mBAGX7wE,KAAK+wB,YAAY2a,iBAEV1rC,MAQTmwE,EAAFxrE,UAAAmsE,WAAE,SAAW59D,EAAoBmM,GAG7B,WAHJ,KAAAnM,IAAaA,EAAb,QAAA,KAAAmM,IAAiCA,EAAjC,IACIrf,KAAK4wE,uBAAuB19D,MAAMA,GAAOmM,OAAOA,GAChDrf,KAAK+wB,YAAY2a,iBACV1rC,MAQTmwE,EAAFxrE,UAAAosE,UAAE,WACE,MAAO/wE,MAAKsyB,eAQd69C,EAAFxrE,UAAAqsE,YAAE,WACE,MAAOhxE,MAAK2wE,gBAINR,EAAVxrE,UAAAisE,gCACI,MAAO5wE,MAAK+wB,YAAYyiB,YAAsD,kBAnMlF28B,KCoCac,GAAkB,GAAIj/D,GAAAA,eAAoB,iBAG1Ck/D,GACT,GAAIl/D,GAAAA,eAAgC,8BAG3Bm/D,GACT,GAAIn/D,GAAAA,eAAqC,8BAchCo/D,IACX5pE,QAAS2pE,GACThwD,MAAOiX,EAAAA,SACP/W,WAAYgwD,iBA8CZ,QAAFzW,GACc9lC,EACAE,EACYq7C,EACoC5/B,EACZD,EACZ8gC,EACxBC,GAPZ,GAAF1xE,GAAAG,IACcA,MAAd80B,SAAcA,EACA90B,KAAdg1B,UAAcA,EACYh1B,KAA1BqwE,UAA0BA,EACoCrwE,KAA9DywC,gBAA8DA,EACZzwC,KAAlDwwC,gBAAkDA,EACZxwC,KAAtCsxE,cAAsCA,EACxBtxE,KAAduxE,kBAAcA,EA5CdvxE,KAAAwxE,2BACAxxE,KAAAyxE,2BAAgD,GAAI79D,GAAAA,QACpD5T,KAAA0xE,wBAA6C,GAAI99D,GAAAA,QACjD5T,KAAA2xE,oBAAgC,GAAI/4C,KA8BlC54B,KAAF4xE,eAA8CzuB,EAAAA,MAAY,WAAM,MAAAtjD,GAAKgyE,YAAY1sE,OAC3EtF,EAAKiyE,gBACLjyE,EAAKiyE,gBAAgB7nE,KAAKuL,EAAAA,cAAUnT,OAzG1C,MA4EEoJ,QAAFC,eAAMkvD,EAANj2D,UAAA,mBAAE,WACE,MAAO3E,MAAKsxE,cAAgBtxE,KAAKsxE,cAAcO,YAAc7xE,KAAKwxE,yDAIpE/lE,OAAFC,eAAMkvD,EAANj2D,UAAA,mBAAE,WACE,MAAO3E,MAAKsxE,cAAgBtxE,KAAKsxE,cAAch/C,YAActyB,KAAK0xE,yDAQpEjmE,OAAFC,eAAMkvD,EAANj2D,UAAA,iBAAE,WACE,MAAO3E,MAAKsyB,6CAGd7mB,OAAFC,eAAMkvD,EAANj2D,UAAA,uBAAE,WACE,GAAM0wB,GAASr1B,KAAKsxE,aACpB,OAAOj8C,GAASA,EAAOy8C,gBAAkB9xE,KAAKyxE,4DA2BhD7W,EAAFj2D,UAAAixB,KAAE,SAA0Bm8C,EAClBt8C,GADR,GAAF51B,GAAAG,IAKI,IAFAy1B,EAASu8C,EAAqBv8C,EAAQz1B,KAAKywC,iBAAmB,GAAIk+B,KAE9Dl5C,EAAO1U,IAAM/gB,KAAKiyE,cAAcx8C,EAAO1U,IACzC,KAAMsT,OAAM,mBAAmBoB,EAAO1U,GAA5C,kDAGI,IAAMkV,GAAaj2B,KAAK42B,eAAenB,GACjC05C,EAAkBnvE,KAAKkyE,uBAAuBj8C,EAAYR,GAC1D08C,EAAYnyE,KAAKoyE,qBAA2BL,EACA5C,EACAl5C,EACAR,EAWlD,OARKz1B,MAAK6xE,YAAY1sE,QACpBnF,KAAKqyE,+CAGPryE,KAAK6xE,YAAYjoE,KAAKuoE,GACtBA,EAAU7X,cAAcp1D,UAAU,WAAM,MAAArF,GAAKyyE,kBAAkBH,KAC/DnyE,KAAKsyB,YAAY3mB,KAAKwmE,GAEfA,GAMTvX,EAAFj2D,UAAA4tE,SAAE,WACEvyE,KAAKwyE,cAAcxyE,KAAK6xE,cAO1BjX,EAAFj2D,UAAAstE,cAAE,SAAclxD,GACZ,MAAO/gB,MAAK6xE,YAAYvxD,KAAK,SAAAmyD,GAAU,MAAAA,GAAO1xD,KAAOA,KAGvD65C,EAAFj2D,UAAAsD,YAAE,WAGEjI,KAAKwyE,cAAcxyE,KAAKwxE,0BAQlB5W,EAAVj2D,UAAAiyB,eAAA,SAAyBnB,GACrB,GAAMgC,GAAgBz3B,KAAKkgD,kBAAkBzqB,EAC7C,OAAOz1B,MAAK80B,SAASqD,OAAOV,IAQtBmjC,EAAVj2D,UAAAu7C,kBAAA,SAA4BwyB,GACxB,GAAM79D,GAAQ,GAAI6iB,GAAAA,eAChBC,iBAAkB33B,KAAK80B,SAASjhB,WAAW+jB,SAC3C2b,eAAgBm/B,EAAan/B,gBAAkBvzC,KAAKwwC,kBACpDrc,WAAYu+C,EAAav+C,WACzB+nB,YAAaw2B,EAAax2B,YAC1BptC,UAAW4jE,EAAa5jE,UACxB2yC,SAAUixB,EAAajxB,SACvB1sC,UAAW29D,EAAa39D,UACxB65D,SAAU8D,EAAa9D,SACvB+D,UAAWD,EAAaC,UACxBC,oBAAqBF,EAAa1D,mBAOpC,OAJI0D,GAAa52B,gBACfjnC,EAAMinC,cAAgB42B,EAAa52B,eAG9BjnC,GASD+lD,EAAVj2D,UAAAutE,uBAAA,SAAiCx+B,EAAqBje,GAClD,GAAMS,GAAeT,GAAUA,EAAOtgB,kBAAoBsgB,EAAOtgB,iBAAiBghB,SAC5EA,EAAW,GAAIC,GAAAA,eAAeF,GAAgBl2B,KAAKg1B,UAAW,GAAIqB,WACrEs4C,GAAiBl5C,MAEda,EACF,GAAIC,GAAAA,gBAAgB84C,GAAoB55C,EAAOtgB,iBAAkBghB,EAGrE,OAFqBud,GAAQ79B,OAA2BygB,GAEpCG,UAYdmkC,EAAVj2D,UAAAytE,qBACA,SAAML,EACA5C,EACAl5C,EACAR,GAIF,GAAM08C,GACF,GAAIhC,IAAmBl6C,EAAYk5C,EAAiBnvE,KAAKqwE,UAAW56C,EAAO1U,GAW/E,IARI0U,EAAOymB,aACTjmB,EAAW0G,gBAAgBz3B,UAAU,WAC9BitE,EAAUl0C,cACbk0C,EAAUz3C,UAKZq3C,YAAkC5+D,GAAAA,YACpCg8D,EAAgBv7C,qBACd,GAAIxf,GAAAA,eAAkB29D,EAAsB,MACnCj7C,UAAWrB,EAAO5tB,KAAMsqE,UAFzCA,SAGW,CACL,GAAMh8C,GAAWn2B,KAAK+2B,gBAAmBtB,EAAQ08C,EAAWhD,GACtDn4C,EAAam4C,EAAgB57C,sBAC/B,GAAIgD,GAAAA,gBAAgBw7C,MAAwB1vE,GAAW8zB,GAC3Dg8C,GAAU5X,kBAAoBvjC,EAAWP,SAO3C,MAJA07C,GACGrB,WAAWr7C,EAAOviB,MAAOuiB,EAAOpW,QAChCqsB,eAAejW,EAAO5hB,UAElBs+D,GAWDvX,EAAVj2D,UAAAoyB,gBACA,SAAMtB,EACA08C,EACAhD,GAEF,GAAMj5C,GAAeT,GAAUA,EAAOtgB,kBAAoBsgB,EAAOtgB,iBAAiBghB,SAM5E08C,EAAkB,GAAIx8C,WACzBg5C,GAAoBF,IACpB8B,GAAiBx7C,EAAO5tB,OACxBsoE,GAAcgC,IAWjB,QARI18C,EAAO3mB,WACLonB,GAAiBA,EAAan1B,IAA2Bkc,EAAAA,eAAgB,OAC7E41D,EAAgB15C,IAAIlc,EAAAA,gBAClBhc,MAAOw0B,EAAO3mB,UACd4H,OAAQtG,EAAAA,OAIL,GAAIgmB,GAAAA,eAAeF,GAAgBl2B,KAAKg1B,UAAW69C,IAOpDjY,EAAVj2D,UAAA2tE,kBAAA,SAA4BH,GACxB,GAAM7nE,GAAQtK,KAAK6xE,YAAYhiE,QAAQsiE,EAEnC7nE,IAAS,IACXtK,KAAK6xE,YAAYvgE,OAAOhH,EAAO,GAI1BtK,KAAK6xE,YAAY1sE,SACpBnF,KAAK2xE,oBAAoBvnE,QAAQ,SAAC0oE,EAAevgE,GAC3CugE,EACFvgE,EAAQ0jD,aAAa,cAAe6c,GAEpCvgE,EAAQojD,gBAAgB,iBAI5B31D,KAAK2xE,oBAAoB3/B,QACzBhyC,KAAK8xE,gBAAgBnmE,UAQnBivD,EAAVj2D,UAAA0tE,wDACI,GAAMU,GAAmB/yE,KAAKuxE,kBAAkByB,qBAGhD,IAAID,EAAiBE,cAGnB,IAAK,GAFCC,GAAWH,EAAiBE,cAAc9oE,SAEvCa,EAAIkoE,EAAS/tE,OAAS,EAAG6F,GAAK,EAAGA,IAAK,CAC7C,GAAImoE,GAAUD,EAASloE,EAEnBmoE,KAAYJ,GACO,WAArBI,EAAQjiC,UACa,UAArBiiC,EAAQjiC,UACPiiC,EAAQ1nB,aAAa,eAEtBzrD,KAAK2xE,oBAAoBx4C,IAAIg6C,EAASA,EAAQC,aAAa,gBAC3DD,EAAQld,aAAa,cAAe,WAOpC2E,EAAVj2D,UAAA6tE,cAAA,SAAwBa,GAGpB,IAFA,GAAIroE,GAAIqoE,EAAQluE,OAET6F,KAKLqoE,EAAQroE,GAAG0vB,wBA9SjB17B,KAACgiB,EAAAA,iDA1DDhiB,KAAEo5B,EAAAA,UAYFp5B,KAAEs5B,EAAAA,WALFt5B,KAAQs0E,EAAAA,SAAR7xE,aAAAzC,KA6FOsD,EAAAA,aACPtD,SAAAqD,GAAAZ,aAAAzC,KAAOsD,EAAAA,WAAPtD,KAAmBuD,EAAAA,OAAnBZ,MAA0BuvE,QAC1BlyE,SAAAqD,GAAAZ,aAAAzC,KAAOuD,EAAAA,OAAPZ,MAAcwvE,QACdnyE,KAAqD47D,EAArDn5D,aAAAzC,KAAOsD,EAAAA,WAAPtD,KAAmBoiB,EAAAA,aArGnBpiB,KAAEu0E,EAAAA,oBAZF3Y,KCqBI4Y,GAAmB,gBAuBrB,QAAFC,GACuBtB,EACXjyE,EACAk6D,GAFWp6D,KAAvBmyE,UAAuBA,EACXnyE,KAAZE,YAAYA,EACAF,KAAZo6D,QAAYA,EAVVp6D,KAAFwU,UAA2C,eArC3C,MAiDEi/D,GAAF9uE,UAAAwP,SAAE,WACOnU,KAAKmyE,YAMRnyE,KAAKmyE,UAAYuB,EAAiB1zE,KAAKE,YAAaF,KAAKo6D,QAAQyX,eAIrE4B,EAAF9uE,UAAAqP,YAAE,SAAY/O,GACV,GAAM0uE,GAAgB1uE,EAA1B,iBAAqDA,EAArD,qBAEQ0uE,KACF3zE,KAAKywE,aAAekD,EAAcrtB,8BAtCxCtnD,KAAC0C,EAAAA,UAADC,OACEwC,SAAU,mDACVvC,SAAU,iBACVpD,MACE2D,UAAW,gCACXsrC,oBAAqB,YACrBzuC,KAAQ,kDAdZA,KAAQmxE,GAAR1uE,aAAAzC,KA2BKsD,EAAAA,aA9BLtD,KAAE0I,EAAAA,aAEF1I,KAAQ47D,wBAoBRpmD,YAAAxV,KAAGO,EAAAA,MAAHoC,MAAS,gBAGT8uE,eAAAzxE,KAAGO,EAAAA,MAAHoC,MAAS,sBAETiyE,kBAAA50E,KAAGO,EAAAA,MAAHoC,MAAS,qBA1CT8xE,mBAmFE,QAAFI,GACwB7Z,EACZ95D,EACAk6D,GAFYp6D,KAAxBg6D,WAAwBA,EACZh6D,KAAZE,YAAYA,EACAF,KAAZo6D,QAAYA,EALVp6D,KAAF+gB,GAAgB,oBAAoByyD,KAjFpC,MAwFEK,GAAFlvE,UAAAwP,SAAE,WAAA,GAAFtU,GAAAG,IACSA,MAAKg6D,aACRh6D,KAAKg6D,WAAa0Z,EAAiB1zE,KAAKE,YAAaF,KAAKo6D,QAAQyX,cAGhE7xE,KAAKg6D,YACPxoD,QAAQC,UAAUC,KAAK,WACrB,GAAMmlB,GAAYh3B,EAAKm6D,WAAWoW,kBAE9Bv5C,KAAcA,EAAU44C,kBAC1B54C,EAAU44C,gBAAkB5vE,EAAKkhB,sBA1B3C/hB,KAAC0C,EAAAA,UAADC,OACEwC,SAAU,uCACVvC,SAAU,iBACVpD,MACEC,MAAS,mBACT6jC,OAAQ,8CA3DZtjC,KAAQmxE,GAAR1uE,aAAAzC,KAkEKsD,EAAAA,aArELtD,KAAE0I,EAAAA,aAEF1I,KAAQ47D,wBAgER75C,KAAA/hB,KAAGO,EAAAA,SAjFHs0E,iCAAA,sBA6GA70E,KAAC0C,EAAAA,UAADC,OACEwC,SAAU,+DACV3F,MAAOC,MAAS,0BA/GlBq1E,iCAAA,sBAwHA90E,KAAC0C,EAAAA,UAADC,OACEwC,SAAU,+DACV3F,MAAOC,MAAS,0BA1HlBs1E,iCCAA,sBAuBA/0E,KAAC4D,EAAAA,SAADjB,OACEkB,SACEC,EAAAA,aACA0xB,EAAAA,cACAxxB,EAAAA,aACAD,IAEFK,SACEisE,GACAoE,GACAI,GACAC,GACAC,GACAhxE,IAEFU,cACE4rE,GACAoE,GACAI,GACAE,GACAD,IAEFvsE,WACEqzD,GACAwW,IAEF38C,iBAAkB46C,QAjDpB5P,KCYauU,GAAuBC,EAAAA,+FAZpC,MA+ByCvvE,GAAzCwvE,EAAAp0E,GACE2L,OAAFC,eACMwoE,EADNvvE,UAAA,0BAAE,WACmC,MAAO3E,MAAKm0E,aAC/C,SAAuBlzE,GAAiBjB,KAAKm0E,QAAUlzE,mCAEvDwK,OAAFC,eACMwoE,EADNvvE,UAAA,0BAAE,WACmC,MAAO3E,MAAKo0E,aAC/C,SAAuBnzE,GAAiBjB,KAAKo0E,QAAUnzE,mCAEvDwK,OAAFC,eACMwoE,EADNvvE,UAAA,mBAAE,WAC6B,MAAO3E,MAAKu7B,aACzC,SAAgBt6B,GAAkBjB,KAAKu7B,QAAUt6B,mCAEjDwK,OAAFC,eACMwoE,EADNvvE,UAAA,2BAAE,WACqC,MAAO3E,MAAKu7B,aACjD,SAAwBt6B,GAAkBjB,KAAKu7B,QAAUt6B,kDA3B3DjC,KAAC0C,EAAAA,UAADC,OACEwC,SAAU,wDACVvC,SAAU,sBACVC,QAAS,qBAAsB,sBAC/BrD,MACEC,MAAS,qCAGT41E,KAAQ,IACR3V,UAAW,6CAIf4V,qBAAAt1E,KAAGO,EAAAA,QAIHg1E,qBAAAv1E,KAAGO,EAAAA,QAIHi1E,cAAAx1E,KAAGO,EAAAA,MAAHoC,MAAS,kBAIT8yE,sBAAAz1E,KAAGO,EAAAA,SA5CH20E,GA+ByCF,ICd5B3V,GACT,GAAIrsD,GAAAA,eAA6B,4BCoB/B0iE,IACJ,SACA,WACA,OACA,SACA,QACA,QACA,QACA,QACA,UAGE10C,GAAe,EAInB20C,GAAA,WACE,QAAFA,GAAqB7yB,EACAC,EACAC,EAEAC,GAJAjiD,KAArB8hD,0BAAqBA,EACA9hD,KAArB+hD,YAAqBA,EACA/hD,KAArBgiD,iBAAqBA,EAEAhiD,KAArBiiD,UAAqBA,EA3DrB,MAAA0yB,MA6DaC,GACTzyB,EAAgBwyB,mBAiKlB,QAAFE,GACc30E,EACAqE,EAEiB09C,EACfF,EACAC,EACZF,EACsDgzB,EAC9CC,EACRj2C,GAVF,GAAFj/B,GAYIC,EAZJC,KAAAC,KAYU8hD,EAA2BC,EAAaC,EAAkBC,IAZpEjiD,IACcH,GAAdK,YAAcA,EACAL,EAAd0E,UAAcA,EAEiB1E,EAA/BoiD,UAA+BA,EAKnBpiD,EAAZk1E,iBAAYA,EA3IVl1E,EAAF4iD,KAAmB,aAAaziB,KAO9BngC,EAAFm1E,WAAc,EAGZn1E,EAAFo1E,iBAAoB,EAMlBp1E,EAAFwtE,SAAqB,EAMnBxtE,EAAF4jD,aAAyC,GAAI7vC,GAAAA,QAM3C/T,EAAFojD,YAAwB,YAMtBpjD,EAAFq1E,YAAe,EAuBbr1E,EAAFgnC,WAAwB,EAwBtBhnC,EAAF+gC,WAAwB,EAgBtB/gC,EAAFs1E,MAAoB,OAsBpBt1E,EAAAu1E,WAAsB,EAEpBv1E,EAAFw1E,uBACI,OACA,WACA,iBACA,QACA,OACA,QACA/vE,OAAO,SAAAgwE,GAAK,MAAAC,GAAAA,yBAAyBt8C,IAAIq8C,IAgBzC,IAAM/iE,GAAU1S,EAAKK,YAAYI,oBAIjCT,GAAK21E,oBAAsBV,GAAsBviE,EAEjD1S,EAAK41E,qBAAuB51E,EAAKoB,MAGjCpB,EAAKkhB,GAAKlhB,EAAKkhB,GAKXxc,EAAUusC,KACZhS,EAAOpsB,kBAAkB,WACvBxS,EAAYI,cAAc2wC,iBAAiB,QAAS,SAAC3vC,GACnD,GAAIo0E,GAAKp0E,EAAgC,MACpCo0E,GAAGz0E,OAAUy0E,EAAGC,gBAAmBD,EAAGE,eAKzCF,EAAGG,kBAAkB,EAAG,GACxBH,EAAGG,kBAAkB,EAAG,QAMhCh2E,EAAKm1E,WAAan1E,EAAK0E,UAAUO,UACjCjF,EAAKo1E,gBAAqD,WAAnC1iE,EAAQ2+B,SAASvhC,cAEpC9P,EAAKo1E,kBACPp1E,EAAKojD,YAAc,EAA+B9X,SAAW,6BACA,uBAhRnE,MA2F8BzmC,GAA9BmwE,EAAA/0E,GA0CE2L,OAAFC,eACMmpE,EADNlwE,UAAA,gBAAE,WAEE,MAAI3E,MAAKiiD,WAAyC,OAA5BjiD,KAAKiiD,UAAUthD,SAC5BX,KAAKiiD,UAAUthD,SAEjBX,KAAK6mC,eAEd,SAAa5lC,GACXjB,KAAK6mC,UAAY5oB,EAAAA,sBAAsBhd,GAInCjB,KAAKqtE,UACPrtE,KAAKqtE,SAAU,EACfrtE,KAAKyjD,aAAa93C,yCAStBF,OAAFC,eACMmpE,EADNlwE,UAAA,UAAE,WACmB,MAAO3E,MAAK6jD,SAC/B,SAAO5iD,GAAiBjB,KAAK6jD,IAAM5iD,GAASjB,KAAKyiD,sCAajDh3C,OAAFC,eACMmpE,EADNlwE,UAAA,gBAAE,WAC0B,MAAO3E,MAAK4gC,eACtC,SAAa3/B,GAAkBjB,KAAK4gC,UAAY3iB,EAAAA,sBAAsBhd,oCAItEwK,OAAFC,eACMmpE,EADNlwE,UAAA,YAAE,WACqB,MAAO3E,MAAKm1E,WACjC,SAASl0E,GACPjB,KAAKm1E,MAAQl0E,GAAS,OACtBjB,KAAK81E,iBAKA91E,KAAK+1E,eAAiBR,EAAAA,yBAAyBt8C,IAAIj5B,KAAKm1E,SAC1Dn1E,KAAKE,YAA6C,cAAElB,KAAOgB,KAAKm1E,wCAYrE1pE,OAAFC,eACMmpE,EADNlwE,UAAA,aAAE,WACsB,MAAO3E,MAAKw1E,oBAAoBv0E,WACtD,SAAUA,GACJA,IAAUjB,KAAKiB,QACjBjB,KAAKw1E,oBAAoBv0E,MAAQA,EACjCjB,KAAKyjD,aAAa93C,yCAKtBF,OAAFC,eACMmpE,EADNlwE,UAAA,gBAAE,WAC0B,MAAO3E,MAAKo1E,eACtC,SAAan0E,GAAkBjB,KAAKo1E,UAAYn3D,EAAAA,sBAAsBhd,oCAiEtE4zE,EAAFlwE,UAAAwP,SAAE,WAAA,GAAFtU,GAAAG,IACQA,MAAKuE,UAAUO,WACjB9E,KAAK+0E,iBAAiBj0E,QAAQd,KAAKE,YAAYI,eAAe4E,UAAU,SAAA5D,GACtEzB,EAAKq1E,WAAa5zE,EAAM00E,aACxBn2E,EAAK4jD,aAAa93C,UAKxBkpE,EAAFlwE,UAAAqP,YAAE,WACEhU,KAAKyjD,aAAa93C,QAGpBkpE,EAAFlwE,UAAAsD,YAAE,WACEjI,KAAKyjD,aAAavvC,WAEdlU,KAAKuE,UAAUO,WACjB9E,KAAK+0E,iBAAiB1zE,eAAerB,KAAKE,YAAYI,gBAI1Du0E,EAAFlwE,UAAAg5B,UAAE,WACM39B,KAAKiiD,WAIPjiD,KAAKskD,mBAMPtkD,KAAKi2E,0BAIPpB,EAAFlwE,UAAAmT,MAAE,WAAgB9X,KAAKE,YAAYI,cAAcwX,SAG/C+8D,EAAFlwE,UAAAma,cAAE,SAAco3D,GACRA,IAAcl2E,KAAKqtE,SAAYrtE,KAAKm2E,WACtCn2E,KAAKqtE,QAAU6I,EACfl2E,KAAKyjD,aAAa93C,SAItBkpE,EAAFlwE,UAAAq5D,SAAE,aAWU6W,EAAZlwE,UAAAsxE,uBAAE,WACE,GAAMjxC,GAAWhlC,KAAKE,YAAYI,cAAcW,KAE5CjB,MAAKy1E,uBAAyBzwC,IAChChlC,KAAKy1E,qBAAuBzwC,EAC5BhlC,KAAKyjD,aAAa93C,SAKZkpE,EAAZlwE,UAAAmxE,cAAE,WACE,GAAIpB,GAAwB7kE,QAAQ7P,KAAKm1E,QAAU,EACjD,KAAMiB,GAAgCp2E,KAAKm1E,QAKrCN,EAAZlwE,UAAA0xE,cAAE,WACE,MAAOr2E,MAAKq1E,sBAAsBxlE,QAAQ7P,KAAKm1E,QAAU,GAIjDN,EAAZlwE,UAAA2xE,YAAE,WAEE,GAAIC,GAAYv2E,KAAKE,YAA6C,cAAEq2E,QACpE,OAAOA,IAAYA,EAASC,UAIpB3B,EAAZlwE,UAAAoxE,YAAE,WACE,MAAiE,aAA1D/1E,KAAKE,YAAYI,cAAc4wC,SAASvhC,eAOjDlE,OAAFC,eAAMmpE,EAANlwE,UAAA,aAAE,WACE,QAAQ3E,KAAKq2E,iBAAoBr2E,KAAKE,YAAYI,cAAcW,OAAUjB,KAAKs2E,eAC1Et2E,KAAKk1E,6CAOZzpE,OAAFC,eAAMmpE,EAANlwE,UAAA,wBAAE,WACE,GAAI3E,KAAKi1E,gBAAiB,CAIxB,GAAMwB,GAAgBz2E,KAAKE,YAA8C,aAEzE,OAAOu2E,GAActrC,WAAanrC,KAAKwtC,SAAWipC,EAAcvtC,QAAQ,GAAGzkB,OACvEzkB,KAAKqtE,QAET,MAAOrtE,MAAKqtE,UAAYrtE,KAAKwtC,uCAQjCqnC,EAAFlwE,UAAAuoC,kBAAE,SAAkBC,GAAiBntC,KAAKotC,iBAAmBD,EAAIE,KAAK,MAMpEwnC,EAAFlwE,UAAA2oC,iBAAE,WAIOttC,KAAKqtE,SACRrtE,KAAK8X,wBAvVX9Y,KAAC0C,EAAAA,UAADC,OACEwC,SAAU,4HAEVvC,SAAU,WACVpD,MAIEC,MAAS,oDACTi4E,2BAA4B,YAG5BluC,YAAa,KACbylC,qBAAsB,cACtBxP,aAAc,WACdkY,aAAc,WACdC,kBAAmB,uCACnB7oC,0BAA2B,2BAC3BH,sBAAuB,aACvBD,uBAAwB,sBACxBxe,SAAU,uBACVD,UAAW,sBACXwvC,UAAW,cAEbn3D,YAAaC,QAAS+mC,GAAqB9mC,YAAaotE,4CA3E1D71E,KAAE0I,EAAAA,aALF1I,KAAgCoD,EAAAA,WAehCpD,KAA4B4vC,EAAAA,UAA5BntC,aAAAzC,KA2MKsD,EAAAA,WA3MLtD,KA2MiB6vC,EAAAA,SA3MjB7vC,KAAuCyvC,EAAAA,OAAvChtC,aAAAzC,KA4MKsD,EAAAA,aA5MLtD,KAAQ0vC,EAAAA,mBAARjtC,aAAAzC,KA6MKsD,EAAAA,aAzMLtD,KAAEknB,KA2MFlnB,SAAAqD,GAAAZ,aAAAzC,KAAKsD,EAAAA,WAALtD,KAAiB6vC,EAAAA,OAAjB7vC,KAAyBuD,EAAAA,OAAzBZ,MAAgC08D,QA7NhCr/D,KAAQ63E,EAAAA,kBAOR73E,KAAEC,EAAAA,4BAoHF0B,WAAA3B,KAAGO,EAAAA,QAuBHwhB,KAAA/hB,KAAGO,EAAAA,QASH4qC,cAAAnrC,KAAGO,EAAAA,QAMHojC,WAAA3jC,KAAGO,EAAAA,QAMHP,OAAAA,KAAGO,EAAAA,QAgBH+vC,oBAAAtwC,KAAGO,EAAAA,QAMH0B,QAAAjC,KAAGO,EAAAA,QAUH42E,WAAAn3E,KAAGO,EAAAA,SAjNHs1E,GA2F8BD,gCC3F9B,sBAiBA51E,KAAC4D,EAAAA,SAADjB,OACE8B,cAAeoxE,GAAUX,IACzBrxE,SACEC,EAAAA,aACAg0E,EAAAA,gBACApnC,IAEFtsC,SACE0zE,EAAAA,gBAGApnC,GACAmlC,GACAX,IAEF3sE,WAAY2e,QAhCd6wD,gCCmBE/2E,KAAFiF,QAAoC,GAAI2O,GAAAA,QAGtC5T,KAAFg3E,cAA0B,WAGxBh3E,KAAFi3E,kBAA8B,gBAG5Bj3E,KAAF6qE,eAA2B,iBAGzB7qE,KAAFirE,eAA2B,aAGzBjrE,KAAF8qE,cAA0B,gBAGxB9qE,KAAFkrE,cAA0B,YAGxBlrE,KAAFgrE,mBAA+B,oBAG7BhrE,KAAFmrE,mBAA+B,gBAG7BnrE,KAAF4qE,uBAAmC,cAGjC5qE,KAAF2qE,2BAAuC,wBAjDvC,sBAaA3rE,KAACgiB,EAAAA,WAADrf,OAAasQ,WAAY,8GAbzB+tD,KpBwBAoI,GAAA,WACE,QAAFA,GAAqBnnE,EACAi2E,EACA1iE,EACA+mB,GAHAv7B,KAArBiB,MAAqBA,EACAjB,KAArBk3E,aAAqBA,EACAl3E,KAArBwU,UAAqBA,EACAxU,KAArBu7B,QAAqBA,EA5BrB,MAAA6sC,oBAoFE,QAAFzI,GAAsBz/D,EAA8CkS,GAA9CpS,KAAtBE,YAAsBA,EAA8CF,KAApEoS,QAAoEA,EAjBlEpS,KAAFqkE,QAAqB,EAGnBrkE,KAAFskE,wBAAoC,EAGlCtkE,KAAFukE,WAAwB,EAMtBvkE,KAAFwkE,gBAA6B,EAG3BxkE,KAAFykE,oBAAiE,GAAIjuD,GAAAA,aAArE,MAIEmpD,GAAFh7D,UAAAwyE,aAAE,SAAalP,IACNjoE,KAAKskE,wBAA2B2D,EAAK1sC,UAG1Cv7B,KAAKykE,oBAAoBttD,KAAK8wD,EAAKhnE,QAIrCwK,OAAFC,eAAMi0D,EAANh7D,UAAA,uBAAE,WACE,MAAO3E,MAAKq0E,MAAQr0E,KAAKq0E,KAAKlvE,QAAUnF,KAAKq0E,KAAK,GAAGlvE,OACjDnF,KAAKqkE,QAAUrkE,KAAKq0E,KAAK,GAAGlvE,OAAS,mCAG3Cw6D,EAAFh7D,UAAAyyE,cAAE,SAAcnrB,EAAkByC,GAC9B,GAAI2oB,GAAaprB,EAAWjsD,KAAKqkE,QAAU3V,CAO3C,OAJIzC,KACForB,GAAcr3E,KAAKs3E,iBAGdD,GAAcr3E,KAAKukE,YAI5B5E,EAAFh7D,UAAAwiE,iBAAE,WAAA,GAAFtnE,GAAAG,IACIA,MAAKoS,QAAQM,kBAAkB,WAC7B7S,EAAKuS,QAAQ6qC,SAAS5qB,eAAepoB,KAAKC,EAAAA,KAAK,IAAIhF,UAAU,WAC3D,GAAMq/D,GACF1kE,EAAKK,YAAYI,cAAc6lD,cAAc,4BAE7Coe,IACFA,EAAWzsD,4BAlFrB9Y,KAACgH,EAAAA,UAADrE,OAAAwC,SAAA,sBACE8B,SAAU,y4CACVC,QAAF,40BACE1H,MACFC,MAAA,oBACMyI,KAAN,OACIqwE,gBAAJ,QAEA31E,SAAA,kBACAlD,cAAAC,EAAAA,kBAAAC,KACEC,gBAAFC,EAAAA,wBAAAC,oFA9BA4gE,EAAAtgE;yBAoCA6kE,aAAAllE,KAAQO,EAAAA,QAGR4kE,gBAAAnlE,KAAAO,EAAAA,QAGA6kE,wBAAQplE,KAARO,EAAAA,QAGA8kE,UAAArlE,KAAAO,EAAAA,QAGA+kE,yBAAAtlE,KAAAO,EAAAA,QAGAglE,aAAAvlE,KAAAO,EAAAA,QAGAilE,kBAAAxlE,KAAAO,EAAAA,QAGAklE,sBAAAzlE,KAAAyY,EAAAA,UASAkoD,mBCkDE,QAAFC,GAAsBvnD,EACsCojD,EAC3B3C,EACC1iD,GAC9B,GAJkBpW,KAAtBqY,mBAAsBA,EACsCrY,KAA5Dy7D,aAA4DA,EAC3Bz7D,KAAjC84D,aAAiCA,EACC94D,KAAlCoW,KAAkCA,EAnChCpW,KAAF0kE,eAA8D,GAAIluD,GAAAA,aAGhExW,KAAF2kE,eAA0D,GAAInuD,GAAAA,aAG5DxW,KAAF4kE,iBAAyD,GAAIpuD,GAAAA,cA8BpDxW,KAAK84D,aACR,KAAMC,GAA2B,cAEnC,KAAK/4D,KAAKy7D,aACR,KAAM1C,GAA2B,mBAGnC,IAAM8L,GAAiB7kE,KAAK84D,aAAagM,oBACnCC,EAAiB/kE,KAAK84D,aAAakM,kBAAkB,UACrDC,EAAejlE,KAAK84D,aAAakM,kBAAkB,QAGrDE,EAAWD,EAAa74D,IAAI,SAAC+4D,EAAMn6D,GACrC,OAAQm6D,KAAdA,EAAoBC,OAAQL,EAAe/5D,KAEvChL,MAAKqlE,UAAYH,EAAS9/D,MAAMy/D,GAAgBS,OAAOJ,EAAS9/D,MAAM,EAAGy/D,IAEzE7kE,KAAKulE,YAAcvlE,KAAK84D,aAAa0M,QA5CzC,MAnDE/5D,QAAFC,eACMk0D,EADNj7D,UAAA,kBAAE,WACsB,MAAO3E,MAAKulE,iBAClC,SAAetkE,GACb,GAAMwkE,GAAgBzlE,KAAKulE,YACrBG,EACF1lE,KAAKu8D,oBAAoBv8D,KAAK84D,aAAa0D,YAAYv7D,KAAWjB,KAAK84D,aAAa0M,OACxFxlE,MAAKulE,YAAcvlE,KAAK84D,aAAa6M,UAAUD,EAAW1lE,KAAK4lE,QAAS5lE,KAAK6lE,SACxE7lE,KAAK8lE,qBAAqBL,EAAezlE,KAAKulE,cACjDvlE,KAAK+lE,yCAMTt6D,OAAFC,eACMk0D,EADNj7D,UAAA,gBAAE,WAC2B,MAAO3E,MAAK0mC,eACvC,SAAazlC,GACXjB,KAAK0mC,UAAY1mC,KAAKu8D,oBAAoBv8D,KAAK84D,aAAa0D,YAAYv7D,IACxEjB,KAAKgmE,cAAgBhmE,KAAKimE,uBAAuBjmE,KAAK0mC,4CAKxDj7B,OAAFC,eACMk0D,EADNj7D,UAAA,eAAE,WAC0B,MAAO3E,MAAKkmE,cACtC,SAAYjlE,GACVjB,KAAKkmE,SAAWlmE,KAAKu8D,oBAAoBv8D,KAAK84D,aAAa0D,YAAYv7D,qCAKzEwK,OAAFC,eACMk0D,EADNj7D,UAAA,eAAE,WAC0B,MAAO3E,MAAKmmE,cACtC,SAAYllE,GACVjB,KAAKmmE,SAAWnmE,KAAKu8D,oBAAoBv8D,KAAK84D,aAAa0D,YAAYv7D,qCAgEzE2+D,EAAFj7D,UAAAqD,mBAAE,WACEhI,KAAK+lE,SAIPnG,EAAFj7D,UAAAyhE,cAAE,SAAc3M,GACZ,GAAIz5D,KAAKgmE,eAAiBvM,EAAM,CAC9B,GAAM4M,GAAermE,KAAK84D,aAAawN,QAAQtmE,KAAKumE,YAC9CC,EAAgBxmE,KAAK84D,aAAa2N,SAASzmE,KAAKumE,YAChDG,EAAe1mE,KAAK84D,aAAa6N,WAAWN,EAAcG,EAAe/M,EAE/Ez5D,MAAK0kE,eAAevtD,KAAKuvD,GAG3B1mE,KAAK2kE,eAAextD,QAItByoD,EAAFj7D,UAAAiiE,2BAAE,SAA2BtlE,GAKzB,GAAMmkE,GAAgBzlE,KAAKulE,YACrB1tC,EAAQ73B,KAAKirC,QAEnB,QAAQ3pC,EAAMuY,SACZ,IAAKiT,GAAAA,WACH9sB,KAAKumE,WAAavmE,KAAK84D,aAAa+N,gBAAgB7mE,KAAKulE,YAAa1tC,EAAQ,GAAK,EACnF,MACF,KAAK7K,GAAAA,YACHhtB,KAAKumE,WAAavmE,KAAK84D,aAAa+N,gBAAgB7mE,KAAKulE,YAAa1tC,GAAS,EAAI,EACnF,MACF,KAAK9K,GAAAA,SACH/sB,KAAKumE,WAAavmE,KAAK84D,aAAa+N,gBAAgB7mE,KAAKulE,aAAc,EACvE,MACF,KAAKt4C,GAAAA,WACHjtB,KAAKumE,WAAavmE,KAAK84D,aAAa+N,gBAAgB7mE,KAAKulE,YAAa,EACtE,MACF,KAAKzrD,GAAAA,KACH9Z,KAAKumE,WAAavmE,KAAK84D,aAAa+N,gBAAgB7mE,KAAKulE,YACrD,EAAIvlE,KAAK84D,aAAagO,QAAQ9mE,KAAKulE,aACvC,MACF,KAAKvrD,GAAAA,IACHha,KAAKumE,WAAavmE,KAAK84D,aAAa+N,gBAAgB7mE,KAAKulE,YACpDvlE,KAAK84D,aAAaiO,kBAAkB/mE,KAAKulE,aACxCvlE,KAAK84D,aAAagO,QAAQ9mE,KAAKulE,aACrC,MACF,KAAK54C,GAAAA,QACH3sB,KAAKumE,WAAajlE,EAAM8jD,OACpBplD,KAAK84D,aAAakO,iBAAiBhnE,KAAKulE,aAAc,GACtDvlE,KAAK84D,aAAamO,kBAAkBjnE,KAAKulE,aAAc,EAC3D,MACF,KAAK14C,GAAAA,UACH7sB,KAAKumE,WAAajlE,EAAM8jD,OACpBplD,KAAK84D,aAAakO,iBAAiBhnE,KAAKulE,YAAa,GACrDvlE,KAAK84D,aAAamO,kBAAkBjnE,KAAKulE,YAAa,EAC1D,MACF,KAAKrrD,GAAAA,MACL,IAAKC,GAAAA,MAOH,YANKna,KAAKknE,aAAclnE,KAAKknE,WAAWlnE,KAAKulE,eAC3CvlE,KAAKomE,cAAcpmE,KAAK84D,aAAagO,QAAQ9mE,KAAKulE,cAClDvlE,KAAK2kE,eAAextD,OAEpB7V,EAAMC,kBAGV,SAEE,OAGAvB,KAAK84D,aAAa2D,YAAYgJ,EAAezlE,KAAKumE,aACpDvmE,KAAK4kE,iBAAiBztD,KAAKnX,KAAKumE,YAGlCvmE,KAAKmnE,mBAEL7lE,EAAMC,kBAIRq+D,EAAFj7D,UAAAohE,MAAE,WACE/lE,KAAKgmE,cAAgBhmE,KAAKimE,uBAAuBjmE,KAAK+kB,UACtD/kB,KAAKonE,WAAapnE,KAAKimE,uBAAuBjmE,KAAK84D,aAAa0M,SAChExlE,KAAKqnE,YACDrnE,KAAK84D,aAAawO,cAAc,SAAStnE,KAAK84D,aAAa2N,SAASzmE,KAAKumE,aACpEgB,mBAET,IAAIC,GAAexnE,KAAK84D,aAAa6N,WAAW3mE,KAAK84D,aAAawN,QAAQtmE,KAAKumE,YAC3EvmE,KAAK84D,aAAa2N,SAASzmE,KAAKumE,YAAa,EACjDvmE,MAAKynE,kBAhNa,EAiNGznE,KAAK84D,aAAa4O,aAAaF,GAC/CxnE,KAAK84D,aAAagM,qBAlNL,EAoNlB9kE,KAAK2nE,mBACL3nE,KAAKqY,mBAAmBxB,gBAI1B+oD,EAAFj7D,UAAAwiE,iBAAE,WACEnnE,KAAK4nE,iBAAiBT,oBAIhBvH,EAAVj7D,UAAAgjE,4BACI,GAAME,GAAc7nE,KAAK84D,aAAaiO,kBAAkB/mE,KAAKumE,YACvDuB,EAAY9nE,KAAK84D,aAAaiP,cACpC/nE,MAAKgoE,WACL,KAAK,GAAIh9D,GAAI,EAAGi9D,EAAOjoE,KAAKynE,iBAAkBz8D,EAAI68D,EAAa78D,IAAKi9D,IAAQ,CAlO1D,GAmOZA,IACFjoE,KAAKgoE,OAAOp+D,SACZq+D,EAAO,EAET,IAAMxO,GAAOz5D,KAAK84D,aAAa6N,WACzB3mE,KAAK84D,aAAawN,QAAQtmE,KAAKumE,YAC/BvmE,KAAK84D,aAAa2N,SAASzmE,KAAKumE,YAAav7D,EAAI,GACjDuwB,EAAUv7B,KAAKkoE,kBAAkBzO,GACjCjlD,EAAYxU,KAAK84D,aAAaoF,OAAOzE,EAAMz5D,KAAKy7D,aAAa0C,QAAQgK,cAC3EnoE,MAAKgoE,OAAOhoE,KAAKgoE,OAAO7iE,OAAS,GAC5ByE,KAAK,GAAIw+D,IAAgBp9D,EAAI,EAAG88D,EAAU98D,GAAIwJ,EAAW+mB,MAK1DqkC,EAAVj7D,UAAAujE,kBAAA,SAA4BzO,GACxB,QAASA,KACHz5D,KAAKknE,YAAclnE,KAAKknE,WAAWzN,OACnCz5D,KAAK4lE,SAAW5lE,KAAK84D,aAAa2D,YAAYhD,EAAMz5D,KAAK4lE,UAAY,MACrE5lE,KAAK6lE,SAAW7lE,KAAK84D,aAAa2D,YAAYhD,EAAMz5D,KAAK6lE,UAAY,IAOrEjG,EAAVj7D,UAAAshE,uBAAA,SAAiCxM,GAC7B,MAAOA,IAAQz5D,KAAK8lE,qBAAqBrM,EAAMz5D,KAAKumE,YAChDvmE,KAAK84D,aAAagO,QAAQrN,GAAQ,MAIhCmG,EAAVj7D,UAAAmhE,qBAAA,SAA+BuC,EAAcC,GACzC,SAAUD,IAAMC,GAAMtoE,KAAK84D,aAAa2N,SAAS4B,IAAOroE,KAAK84D,aAAa2N,SAAS6B,IACzEtoE,KAAK84D,aAAawN,QAAQ+B,IAAOroE,KAAK84D,aAAawN,QAAQgC,KAO/D1I,EAAVj7D,UAAA43D,oBAAA,SAA8BtrD,GAC1B,MAAQjR,MAAK84D,aAAasF,eAAentD,IAAQjR,KAAK84D,aAAayE,QAAQtsD,GAAQA,EAAM,MAInF2uD,EAAVj7D,UAAAsmC,kBACI,MAAOjrC,MAAKoW,MAA4B,QAApBpW,KAAKoW,KAAKnV,sBA3QlCjC,KAACgH,EAAAA,UAADrE,OAAAwC,SAAA,iBACE8B,SAAU,kkBACVrE,SAAU,eACVlD,cAAFC,EAAAA,kBAAAC,KACEC,gBAAFC,EAAAA,wBAAAC,iJA3BAC,KAAE87D,GAAFr5D,aAAAzC,KAAAsD,EAAAA,aA8GAtD,KAAAie,EAAAA,eAAAxb,aAAAzC,KAAAsD,EAAAA,cAnGAs9D,EAAAvgE,sEAwBAumE,UAAA5mE,KAAAO,EAAAA,QAcAsmE,UAAA7mE,KAAAO,EAAAA,QASA2nE,aAAAloE,KAAAO,EAAAA,QAQAmlE,iBAAA1lE,KAAAyY,EAAAA,SAQAktD,iBAAA3lE,KAAAyY,EAAAA,SAGAmtD,mBAAA5lE,KAAAyY,EAAAA,SAGAmwD,mBAAA5oE,KAAAuV,EAAAA,UAAA5S,MAAAg+D,OAMAC,mBCUE,QAAFE,GAAsBznD,EACWygD,EACC1iD,GAC9B,GAHkBpW,KAAtBqY,mBAAsBA,EACWrY,KAAjC84D,aAAiCA,EACC94D,KAAlCoW,KAAkCA,EAtBhCpW,KAAF0kE,eAAuD,GAAIluD,GAAAA,aAGzDxW,KAAFi7D,aAAqD,GAAIzkD,GAAAA,aAGvDxW,KAAF4kE,iBAAyD,GAAIpuD,GAAAA,cAiBpDxW,KAAK84D,aACR,KAAMC,GAA2B,cAGnC/4D,MAAKulE,YAAcvlE,KAAK84D,aAAa0M,QAlBzC,MApDE/5D,QAAFC,eACMo0D,EADNn7D,UAAA,kBAAE,WACsB,MAAO3E,MAAKulE,iBAClC,SAAetkE,GACb,GAAIwkE,GAAgBzlE,KAAKulE,YACnBG,EACF1lE,KAAKu8D,oBAAoBv8D,KAAK84D,aAAa0D,YAAYv7D,KAAWjB,KAAK84D,aAAa0M,OACxFxlE,MAAKulE,YAAcvlE,KAAK84D,aAAa6M,UAAUD,EAAW1lE,KAAK4lE,QAAS5lE,KAAK6lE,SACzEj0D,KAAKm6B,MAAM/rC,KAAK84D,aAAawN,QAAQb,GA1BjB,KA2BpB7zD,KAAKm6B,MAAM/rC,KAAK84D,aAAawN,QAAQtmE,KAAKulE,aA3BtB,KA4BtBvlE,KAAK+lE,yCAMTt6D,OAAFC,eACMo0D,EADNn7D,UAAA,gBAAE,WAC2B,MAAO3E,MAAK0mC,eACvC,SAAazlC,GACXjB,KAAK0mC,UAAY1mC,KAAKu8D,oBAAoBv8D,KAAK84D,aAAa0D,YAAYv7D,IACxEjB,KAAKuoE,cAAgBvoE,KAAK0mC,WAAa1mC,KAAK84D,aAAawN,QAAQtmE,KAAK0mC,4CAKxEj7B,OAAFC,eACMo0D,EADNn7D,UAAA,eAAE,WAC0B,MAAO3E,MAAKkmE,cACtC,SAAYjlE,GACVjB,KAAKkmE,SAAWlmE,KAAKu8D,oBAAoBv8D,KAAK84D,aAAa0D,YAAYv7D,qCAKzEwK,OAAFC,eACMo0D,EADNn7D,UAAA,eAAE,WAC0B,MAAO3E,MAAKmmE,cACtC,SAAYllE,GACVjB,KAAKmmE,SAAWnmE,KAAKu8D,oBAAoBv8D,KAAK84D,aAAa0D,YAAYv7D,qCAsCzE6+D,EAAFn7D,UAAAqD,mBAAE,WACEhI,KAAK+lE,SAIPjG,EAAFn7D,UAAAohE,MAAE,WAAA,GAAFlmE,GAAAG,IACIA,MAAKwoE,WAAaxoE,KAAK84D,aAAawN,QAAQtmE,KAAK84D,aAAa0M,QAC9D,IAAIiD,GAAazoE,KAAK84D,aAAawN,QAAQtmE,KAAKulE,aAC5CmD,EAAeD,EApGK,EAqGxBzoE,MAAK2oE,SACL,KAAK,GAAI39D,GAAI,EAAGqiD,KAAoBriD,EAtGZ,GAsG8BA,IACpDqiD,EAAIzjD,KAAK6+D,EAAaC,EAAe19D,GArGhB,GAsGjBqiD,EAAIloD,SACNnF,KAAK2oE,OAAO/+D,KAAKyjD,EAAIjhD,IAAI,SAAAw8D,GAAQ,MAAA/oE,GAAKgpE,mBAAmBD,MACzDvb,KAGJrtD,MAAKqY,mBAAmBxB,gBAI1BipD,EAAFn7D,UAAAmkE,cAAE,SAAcF,GACZ5oE,KAAKi7D,aAAa9jD,KAAKnX,KAAK84D,aAAa6N,WAAWiC,EAAM,EAAG,GAC7D,IAAIG,GAAQ/oE,KAAK84D,aAAa2N,SAASzmE,KAAKumE,YACxCsB,EACA7nE,KAAK84D,aAAaiO,kBAAkB/mE,KAAK84D,aAAa6N,WAAWiC,EAAMG,EAAO,GAClF/oE,MAAK0kE,eAAevtD,KAAKnX,KAAK84D,aAAa6N,WAAWiC,EAAMG,EACxDn3D,KAAKE,IAAI9R,KAAK84D,aAAagO,QAAQ9mE,KAAKumE,YAAasB,MAI3D/H,EAAFn7D,UAAAiiE,2BAAE,SAA2BtlE,GAKzB,GAAMmkE,GAAgBzlE,KAAKulE,YACrB1tC,EAAQ73B,KAAKirC,QAEnB,QAAQ3pC,EAAMuY,SACZ,IAAKiT,GAAAA,WACH9sB,KAAKumE,WAAavmE,KAAK84D,aAAakO,iBAAiBhnE,KAAKulE,YAAa1tC,EAAQ,GAAK,EACpF,MACF,KAAK7K,GAAAA,YACHhtB,KAAKumE,WAAavmE,KAAK84D,aAAakO,iBAAiBhnE,KAAKulE,YAAa1tC,GAAS,EAAI,EACpF,MACF,KAAK9K,GAAAA,SACH/sB,KAAKumE,WAAavmE,KAAK84D,aAAakO,iBAAiBhnE,KAAKulE,aAzIvC,EA0InB,MACF,KAAKt4C,GAAAA,WACHjtB,KAAKumE,WAAavmE,KAAK84D,aAAakO,iBAAiBhnE,KAAKulE,YA5IvC,EA6InB,MACF,KAAKzrD,GAAAA,KACH9Z,KAAKumE,WAAavmE,KAAK84D,aAAakO,iBAAiBhnE,KAAKulE,aACrDvlE,KAAK84D,aAAawN,QAAQtmE,KAAKulE,aAlJhB,GAmJpB,MACF,KAAKvrD,GAAAA,IACHha,KAAKumE,WAAavmE,KAAK84D,aAAakO,iBAAiBhnE,KAAKulE,YArJtC,GAsJDvlE,KAAK84D,aAAawN,QAAQtmE,KAAKulE,aAtJ9B,GAsJ4D,EAChF,MACF,KAAK54C,GAAAA,QACH3sB,KAAKumE,WACDvmE,KAAK84D,aAAakO,iBACdhnE,KAAKulE,YAAajkE,EAAM8jD,QAAS,KA3JrB,GA4JpB,MACF,KAAKv4B,GAAAA,UACH7sB,KAAKumE,WACDvmE,KAAK84D,aAAakO,iBACdhnE,KAAKulE,YAAajkE,EAAM8jD,OAAS4jB,IAhKrB,GAiKpB,MACF,KAAK9uD,GAAAA,MACL,IAAKC,GAAAA,MACHna,KAAK8oE,cAAc9oE,KAAK84D,aAAawN,QAAQtmE,KAAKulE,aAClD,MACF,SAEE,OAGAvlE,KAAK84D,aAAa2D,YAAYgJ,EAAezlE,KAAKumE,aACpDvmE,KAAK4kE,iBAAiBztD,KAAKnX,KAAKumE,YAGlCvmE,KAAKmnE,mBAEL7lE,EAAMC,kBAGRu+D,EAAFn7D,UAAAskE,eAAE,WACE,MAAOjpE,MAAK84D,aAAawN,QAAQtmE,KAAKumE,YArLd,IAyL1BzG,EAAFn7D,UAAAwiE,iBAAE,WACEnnE,KAAK4nE,iBAAiBT,oBAIhBrH,EAAVn7D,UAAAkkE,mBAAA,SAA6BD,GACzB,GAAIM,GAAWlpE,KAAK84D,aAAaqQ,YAAYnpE,KAAK84D,aAAa6N,WAAWiC,EAAM,EAAG,GACnF,OAAO,IAAIR,IAAgBQ,EAAMM,EAAUA,EAAUlpE,KAAKopE,kBAAkBR,KAItE9I,EAAVn7D,UAAAykE,kBAAA,SAA4BR,GAExB,OAAavmE,KAATumE,GAA+B,OAATA,GACrB5oE,KAAK6lE,SAAW+C,EAAO5oE,KAAK84D,aAAawN,QAAQtmE,KAAK6lE,UACtD7lE,KAAK4lE,SAAWgD,EAAO5oE,KAAK84D,aAAawN,QAAQtmE,KAAK4lE,SACzD,OAAO,CAIT,KAAK5lE,KAAKknE,WACR,OAAO,CAMT,KAAK,GAHCmC,GAAcrpE,KAAK84D,aAAa6N,WAAWiC,EAAM,EAAG,GAGjDnP,EAAO4P,EAAarpE,KAAK84D,aAAawN,QAAQ7M,IAASmP,EAC9DnP,EAAOz5D,KAAK84D,aAAa+N,gBAAgBpN,EAAM,GAC/C,GAAIz5D,KAAKknE,WAAWzN,GAClB,OAAO,CAIX,QAAO,GAODqG,EAAVn7D,UAAA43D,oBAAA,SAA8BtrD,GAC1B,MAAQjR,MAAK84D,aAAasF,eAAentD,IAAQjR,KAAK84D,aAAayE,QAAQtsD,GAAQA,EAAM,MAInF6uD,EAAVn7D,UAAAsmC,kBACI,MAAOjrC,MAAKoW,MAA4B,QAApBpW,KAAKoW,KAAKnV,sBA/NlCjC,KAACgH,EAAAA,UAADrE,OAAAwC,SAAA,sBACE8B,SAAU,odACVrE,SAAU,mBACVlD,cAAFC,EAAAA,kBAAAC,KACEC,gBAAFC,EAAAA,wBAAAC,mHA3BAC,KAAEie,EAAAA,eAAFxb,aAAAzC,KAAAsD,EAAAA,cAUAw9D,EAAAzgE,sEAuBAumE,UAAA5mE,KAAAO,EAAAA,QAeAsmE,UAAA7mE,KAAAO,EAAAA,QASA2nE,aAAAloE,KAAAO,EAAAA,QAQAmlE,iBAAA1lE,KAAAyY,EAAAA,SAQAwjD,eAAAj8D,KAAAyY,EAAAA,SAGAmtD,mBAAA5lE,KAAAyY,EAAAA,SAGAmwD,mBAAA5oE,KAAAuV,EAAAA,UAAA5S,MAAAg+D,OAMAG,mBCYE,QAAFD,GAAsBxnD,EACsCojD,EAC3B3C,EACC1iD,GAC9B,GAJkBpW,KAAtBqY,mBAAsBA,EACsCrY,KAA5Dy7D,aAA4DA,EAC3Bz7D,KAAjC84D,aAAiCA,EACC94D,KAAlCoW,KAAkCA,EA7BhCpW,KAAF0kE,eAAuD,GAAIluD,GAAAA,aAGzDxW,KAAFk7D,cAAsD,GAAI1kD,GAAAA,aAGxDxW,KAAF4kE,iBAAyD,GAAIpuD,GAAAA,cAwBpDxW,KAAK84D,aACR,KAAMC,GAA2B,cAEnC,KAAK/4D,KAAKy7D,aACR,KAAM1C,GAA2B,mBAGnC/4D,MAAKulE,YAAcvlE,KAAK84D,aAAa0M,QA5BzC,MAnDE/5D,QAAFC,eACMm0D,EADNl7D,UAAA,kBAAE,WACsB,MAAO3E,MAAKulE,iBAClC,SAAetkE,GACb,GAAIwkE,GAAgBzlE,KAAKulE,YACnBG,EACF1lE,KAAKu8D,oBAAoBv8D,KAAK84D,aAAa0D,YAAYv7D,KAAWjB,KAAK84D,aAAa0M,OACxFxlE,MAAKulE,YAAcvlE,KAAK84D,aAAa6M,UAAUD,EAAW1lE,KAAK4lE,QAAS5lE,KAAK6lE,SACzE7lE,KAAK84D,aAAawN,QAAQb,KAAmBzlE,KAAK84D,aAAawN,QAAQtmE,KAAKulE,cAC9EvlE,KAAK+lE,yCAMTt6D,OAAFC,eACMm0D,EADNl7D,UAAA,gBAAE,WAC2B,MAAO3E,MAAK0mC,eACvC,SAAazlC,GACXjB,KAAK0mC,UAAY1mC,KAAKu8D,oBAAoBv8D,KAAK84D,aAAa0D,YAAYv7D,IACxEjB,KAAKspE,eAAiBtpE,KAAKupE,uBAAuBvpE,KAAK0mC,4CAKzDj7B,OAAFC,eACMm0D,EADNl7D,UAAA,eAAE,WAC0B,MAAO3E,MAAKkmE,cACtC,SAAYjlE,GACVjB,KAAKkmE,SAAWlmE,KAAKu8D,oBAAoBv8D,KAAK84D,aAAa0D,YAAYv7D,qCAKzEwK,OAAFC,eACMm0D,EADNl7D,UAAA,eAAE,WAC0B,MAAO3E,MAAKmmE,cACtC,SAAYllE,GACVjB,KAAKmmE,SAAWnmE,KAAKu8D,oBAAoBv8D,KAAK84D,aAAa0D,YAAYv7D,qCAgDzE4+D,EAAFl7D,UAAAqD,mBAAE,WACEhI,KAAK+lE,SAIPlG,EAAFl7D,UAAA6kE,eAAE,SAAeT,GACb,GAAMU,GACAzpE,KAAK84D,aAAa6N,WAAW3mE,KAAK84D,aAAawN,QAAQtmE,KAAKumE,YAAawC,EAAO,EAEtF/oE,MAAKk7D,cAAc/jD,KAAKsyD,EAExB,IAAM5B,GAAc7nE,KAAK84D,aAAaiO,kBAAkB0C,EAExDzpE,MAAK0kE,eAAevtD,KAAKnX,KAAK84D,aAAa6N,WACvC3mE,KAAK84D,aAAawN,QAAQtmE,KAAKumE,YAAawC,EAC5Cn3D,KAAKE,IAAI9R,KAAK84D,aAAagO,QAAQ9mE,KAAKumE,YAAasB,MAI3DhI,EAAFl7D,UAAAiiE,2BAAE,SAA2BtlE,GAKzB,GAAMmkE,GAAgBzlE,KAAKulE,YACrB1tC,EAAQ73B,KAAKirC,QAEnB,QAAQ3pC,EAAMuY,SACZ,IAAKiT,GAAAA,WACH9sB,KAAKumE,WAAavmE,KAAK84D,aAAamO,kBAAkBjnE,KAAKulE,YAAa1tC,EAAQ,GAAK,EACrF,MACF,KAAK7K,GAAAA,YACHhtB,KAAKumE,WAAavmE,KAAK84D,aAAamO,kBAAkBjnE,KAAKulE,YAAa1tC,GAAS,EAAI,EACrF,MACF,KAAK9K,GAAAA,SACH/sB,KAAKumE,WAAavmE,KAAK84D,aAAamO,kBAAkBjnE,KAAKulE,aAAc,EACzE,MACF,KAAKt4C,GAAAA,WACHjtB,KAAKumE,WAAavmE,KAAK84D,aAAamO,kBAAkBjnE,KAAKulE,YAAa,EACxE,MACF,KAAKzrD,GAAAA,KACH9Z,KAAKumE,WAAavmE,KAAK84D,aAAamO,kBAAkBjnE,KAAKulE,aACtDvlE,KAAK84D,aAAa2N,SAASzmE,KAAKulE,aACrC,MACF,KAAKvrD,GAAAA,IACHha,KAAKumE,WAAavmE,KAAK84D,aAAamO,kBAAkBjnE,KAAKulE,YACvD,GAAKvlE,KAAK84D,aAAa2N,SAASzmE,KAAKulE,aACzC,MACF,KAAK54C,GAAAA,QACH3sB,KAAKumE,WACDvmE,KAAK84D,aAAakO,iBAAiBhnE,KAAKulE,YAAajkE,EAAM8jD,QAAU,IAAM,EAC/E,MACF,KAAKv4B,GAAAA,UACH7sB,KAAKumE,WACDvmE,KAAK84D,aAAakO,iBAAiBhnE,KAAKulE,YAAajkE,EAAM8jD,OAAS,GAAK,EAC7E,MACF,KAAKlrC,GAAAA,MACL,IAAKC,GAAAA,MACHna,KAAKwpE,eAAexpE,KAAK84D,aAAa2N,SAASzmE,KAAKulE,aACpD,MACF,SAEE,OAGAvlE,KAAK84D,aAAa2D,YAAYgJ,EAAezlE,KAAKumE,aACpDvmE,KAAK4kE,iBAAiBztD,KAAKnX,KAAKumE,YAGlCvmE,KAAKmnE,mBAEL7lE,EAAMC,kBAIRs+D,EAAFl7D,UAAAohE,MAAE,WAAA,GAAFlmE,GAAAG,IACIA,MAAKspE,eAAiBtpE,KAAKupE,uBAAuBvpE,KAAK+kB,UACvD/kB,KAAK0pE,YAAc1pE,KAAKupE,uBAAuBvpE,KAAK84D,aAAa0M,SACjExlE,KAAK2pE,WAAa3pE,KAAK84D,aAAaqQ,YAAYnpE,KAAKumE,WAErD,IAAIqD,GAAa5pE,KAAK84D,aAAawO,cAAc,QAEjDtnE,MAAK6pE,UAAY,EAAG,EAAG,EAAG,IAAK,EAAG,EAAG,EAAG,IAAK,EAAG,EAAG,GAAI,KAAKz9D,IAAI,SAAAihD,GAAO,MAAAA,GAAIjhD,IACvE,SAAA28D,GAAS,MAAAlpE,GAAKiqE,oBAAoBf,EAAOa,EAAWb,QACxD/oE,KAAKqY,mBAAmBxB,gBAI1BgpD,EAAFl7D,UAAAwiE,iBAAE,WACEnnE,KAAK4nE,iBAAiBT,oBAOhBtH,EAAVl7D,UAAA4kE,uBAAA,SAAiC9P,GAC7B,MAAOA,IAAQz5D,KAAK84D,aAAawN,QAAQ7M,IAASz5D,KAAK84D,aAAawN,QAAQtmE,KAAKumE,YAC7EvmE,KAAK84D,aAAa2N,SAAShN,GAAQ,MAIjCoG,EAAVl7D,UAAAmlE,oBAAA,SAA8Bf,EAAegB,GACzC,GAAIv1D,GAAYxU,KAAK84D,aAAaoF,OAC9Bl+D,KAAK84D,aAAa6N,WAAW3mE,KAAK84D,aAAawN,QAAQtmE,KAAKumE,YAAawC,EAAO,GAChF/oE,KAAKy7D,aAAa0C,QAAQ6L,mBAC9B,OAAO,IAAI5B,IACPW,EAAOgB,EAAUxC,oBAAqB/yD,EAAWxU,KAAKiqE,mBAAmBlB,KAIvElJ,EAAVl7D,UAAAslE,mBAAA,SAA6BlB,GAEzB,GAAMN,GAAazoE,KAAK84D,aAAawN,QAAQtmE,KAAKumE,WAElD,QAAclkE,KAAV0mE,GAAiC,OAAVA,GACvB/oE,KAAKkqE,4BAA4BzB,EAAYM,IAC7C/oE,KAAKmqE,6BAA6B1B,EAAYM,GAChD,OAAO,CAGT,KAAK/oE,KAAKknE,WACR,OAAO,CAMT,KAAK,GAHCM,GAAexnE,KAAK84D,aAAa6N,WAAW8B,EAAYM,EAAO,GAG5DtP,EAAO+N,EAAcxnE,KAAK84D,aAAa2N,SAAShN,IAASsP,EAC7DtP,EAAOz5D,KAAK84D,aAAa+N,gBAAgBpN,EAAM,GAClD,GAAIz5D,KAAKknE,WAAWzN,GAClB,OAAO,CAIX,QAAO,GAODoG,EAAVl7D,UAAAulE,4BAAA,SAAsCtB,EAAcG,GAChD,GAAI/oE,KAAK6lE,QAAS,CAChB,GAAMuE,GAAUpqE,KAAK84D,aAAawN,QAAQtmE,KAAK6lE,SACzCwE,EAAWrqE,KAAK84D,aAAa2N,SAASzmE,KAAK6lE,QAEjD,OAAO+C,GAAOwB,GAAYxB,IAASwB,GAAWrB,EAAQsB,EAGxD,OAAO,GAODxK,EAAVl7D,UAAAwlE,6BAAA,SAAuCvB,EAAcG,GACjD,GAAI/oE,KAAK4lE,QAAS,CAChB,GAAM0E,GAAUtqE,KAAK84D,aAAawN,QAAQtmE,KAAK4lE,SACzC2E,EAAWvqE,KAAK84D,aAAa2N,SAASzmE,KAAK4lE,QAEjD,OAAOgD,GAAO0B,GAAY1B,IAAS0B,GAAWvB,EAAQwB,EAGxD,OAAO,GAOD1K,EAAVl7D,UAAA43D,oBAAA,SAA8BtrD,GAC1B,MAAQjR,MAAK84D,aAAasF,eAAentD,IAAQjR,KAAK84D,aAAayE,QAAQtsD,GAAQA,EAAM,MAInF4uD,EAAVl7D,UAAAsmC,kBACI,MAAOjrC,MAAKoW,MAA4B,QAApBpW,KAAKoW,KAAKnV,sBA9QlCjC,KAACgH,EAAAA,UAADrE,OAAAwC,SAAA,gBACE8B,SAAU,0hBACVrE,SAAU,cACVlD,cAAFC,EAAAA,kBAAAC,KACEC,gBAAFC,EAAAA,wBAAAC,iJAvBAC,KAAE87D,GAAFr5D,aAAAzC,KAAAsD,EAAAA,aAkGAtD,KAAAie,EAAAA,eAAAxb,aAAAzC,KAAAsD,EAAAA,cAvFAu9D,EAAQxgE,sEAkBRumE,UAAA5mE,KAAAO,EAAAA,QAcAsmE,UAAA7mE,KAAAO,EAAAA,QASA2nE,aAAAloE,KAAAO,EAAAA,QAQAmlE,iBAAA1lE,KAAAyY,EAAAA,SAQAyjD,gBAAAl8D,KAAAyY,EAAAA,SAGAmtD,mBAAA5lE,KAAAyY,EAAAA,SAGAmwD,mBAAA5oE,KAAAuV,EAAAA,UAAA5S,MAAAg+D,OAMAE,mBCpDE,QAAFE,GAAsBr+C,EACsC8oD,EAC1B1R,EAC0B2C,EAC9CplD,GAJQrW,KAAtB0hB,MAAsBA,EACsC1hB,KAA5DwqE,SAA4DA,EAC1BxqE,KAAlC84D,aAAkCA,EAC0B94D,KAA5Dy7D,aAA4DA,EAGxDz7D,KAAKwqE,SAAS/mB,aAAav+C,UAAU,WAAM,MAAAmR,GAAkBQ,iBA5CjE,MAgDEpL,QAAFC,eAAMq0D,EAANp7D,UAAA,wBAAE,WACE,GAAiC,SAA7B3E,KAAKwqE,SAASC,YAChB,MAAOzqE,MAAK84D,aACPoF,OAAOl+D,KAAKwqE,SAASjE,WAAYvmE,KAAKy7D,aAAa0C,QAAQuM,gBACvDnD,mBAEX,IAAiC,QAA7BvnE,KAAKwqE,SAASC,YAChB,MAAOzqE,MAAK84D,aAAaqQ,YAAYnpE,KAAKwqE,SAASjE,WAErD,IAAMkC,GAAazoE,KAAK84D,aAAawN,QAAQtmE,KAAKwqE,SAASjE,WAK3D,OAJwBvmE,MAAK84D,aAAaqQ,YACtCnpE,KAAK84D,aAAa6N,WAAW8B,EAAaA,EAAa,GAAI,EAAG,IAGtE,MAF2BzoE,KAAK84D,aAAaqQ,YACrCnpE,KAAK84D,aAAa6N,WAAW8B,EFrCT,GEqCqC,EAAIA,EAAa,GAAI,EAAG,qCAIvFh9D,OAAFC,eAAMq0D,EAANp7D,UAAA,yBAAE,WACE,MAAoC,SAA7B3E,KAAKwqE,SAASC,YACjBzqE,KAAK0hB,MAAMipD,2BAA6B3qE,KAAK0hB,MAAMkpD,wDAIzDn/D,OAAFC,eAAMq0D,EAANp7D,UAAA,uBAAE,WACE,OACEokE,MAAS/oE,KAAK0hB,MAAMmpD,eACpBjC,KAAQ5oE,KAAK0hB,MAAMopD,cACnBC,aAAc/qE,KAAK0hB,MAAMspD,oBACzBhrE,KAAKwqE,SAASC,8CAIlBh/D,OAAFC,eAAMq0D,EAANp7D,UAAA,uBAAE,WACE,OACEokE,MAAS/oE,KAAK0hB,MAAMupD,eACpBrC,KAAQ5oE,KAAK0hB,MAAMwpD,cACnBH,aAAc/qE,KAAK0hB,MAAMypD,oBACzBnrE,KAAKwqE,SAASC,8CAIlB1K,EAAFp7D,UAAAymE,qBAAE,WACEprE,KAAKwqE,SAASC,YAA2C,SAA7BzqE,KAAKwqE,SAASC,YAAyB,aAAe,SAIpF1K,EAAFp7D,UAAA0mE,gBAAE,WACErrE,KAAKwqE,SAASjE,WAA0C,SAA7BvmE,KAAKwqE,SAASC,YACrCzqE,KAAK84D,aAAamO,kBAAkBjnE,KAAKwqE,SAASjE,YAAa,GAC3DvmE,KAAK84D,aAAakO,iBACdhnE,KAAKwqE,SAASjE,WAAyC,QAA7BvmE,KAAKwqE,SAASC,aAAyB,GF1ErD,KE+E1B1K,EAAFp7D,UAAA2mE,YAAE,WACEtrE,KAAKwqE,SAASjE,WAA0C,SAA7BvmE,KAAKwqE,SAASC,YACrCzqE,KAAK84D,aAAamO,kBAAkBjnE,KAAKwqE,SAASjE,WAAY,GAC1DvmE,KAAK84D,aAAakO,iBACdhnE,KAAKwqE,SAASjE,WACmB,QAA7BvmE,KAAKwqE,SAASC,YAAwB,EFpF9B,KEyF1B1K,EAAFp7D,UAAA4mE,gBAAE,WACE,OAAKvrE,KAAKwqE,SAAS5E,WAGX5lE,KAAKwqE,SAAS5E,UACjB5lE,KAAKwrE,YAAYxrE,KAAKwqE,SAASjE,WAAYvmE,KAAKwqE,SAAS5E,WAIhE7F,EAAFp7D,UAAA8mE,YAAE,WACE,OAAQzrE,KAAKwqE,SAAS3E,UACjB7lE,KAAKwrE,YAAYxrE,KAAKwqE,SAASjE,WAAYvmE,KAAKwqE,SAAS3E,UAIxD9F,EAAVp7D,UAAA6mE,YAAA,SAAsBE,EAAUC,GAC5B,MAAiC,SAA7B3rE,KAAKwqE,SAASC,YACTzqE,KAAK84D,aAAawN,QAAQoF,IAAU1rE,KAAK84D,aAAawN,QAAQqF,IACjE3rE,KAAK84D,aAAa2N,SAASiF,IAAU1rE,KAAK84D,aAAa2N,SAASkF,GAErC,QAA7B3rE,KAAKwqE,SAASC,YACTzqE,KAAK84D,aAAawN,QAAQoF,IAAU1rE,KAAK84D,aAAawN,QAAQqF,GAGhE/5D,KAAKm6B,MAAM/rC,KAAK84D,aAAawN,QAAQoF,GFjHpB,KEkHpB95D,KAAKm6B,MAAM/rC,KAAK84D,aAAawN,QAAQqF,GFlHjB,oBEK5B3sE,KAACgH,EAAAA,UAADrE,OAAAwC,SAAA,sBACE8B,SAAU,0vBACVrE,SAAU,oBACVlD,cAAFC,EAAAA,kBAAAC,KACEC,gBAAFC,EAAAA,wBAAAC,2IAhBAC,KAAQ87D,GAARr5D,aAAAzC,KAAAsD,EAAAA,aAsBAtD,SAAsEqD,GAAWZ,aAAjFzC,KAAAsD,EAAAA,WAAAtD,KAAAuD,EAAAA,OAAiCZ,MAAjCi9D,QAzBA5/D,KAAQE,EAAAA,qBAdR6gE,qDAuQA//D,KAAA84D,aAAAA,EAAE94D,KAAFy7D,aAAAA,EACkCz7D,KAAlCqY,mBAAAA,kQAHA,KAAA0gD,GAAA,cAQA,KAAA/4D,KAAYy7D,aACZ,KAAA1C,GAAA,mBAGA/4D,MAAAs2C,aAAA50B,EAAAzc,QAAAC,UAAA,WACAmT,EAAAxB,eAEQhX,EAAR4jD,aAAA93C,SA7CA,MAgDAF,QAAOC,eAAPg0D,EAAA/6D,UAAA,WAxGA5D,+HAGAI,YAAA,EACAC,cAAA,kDAOAL,iIAGAI,YAAA,EACAC,cAAA,iDAIAL,+HAGAI,YAAA,EACAC,cAAA,iDAIAL,+HAGAI,YAAA,EACAC,cAAA,oMAsCApB,KAAAyjD,aAAA93C,QAEAxK,YAAA,EACAC,cAAA,qDAIAL,6EACAf,KAAA4rE,sBAAA,GAEAzqE,YAAA,EACAC,cAAA,yHA2BApB,KAAAumE,WAAAvmE,KAAAg7D,SAAAh7D,KAAA84D,aAAA0M,QAEIxlE,KAAK6rE,aAAT7rE,KAAA8rE,iFAMA9rE,KAAA4rE,sBAAA,EACQ5rE,KAAK+rE,uFAMb/rE,KAAAyjD,aAAAvvC,gDAKA,GAAAwC,GAAoCzR,EAApC,SAAAA,EAAA,SAAAA,EAAA,iCAGQ,GAAR+mE,GAAmBhsE,KAAnBisE,kFAQAjsE,KAAOyjD,aAAP93C,4IAWA,SAAA3L,KAAAyqE,YAAAzqE,KAAAksE,qEACAlkE,yGAOAhI,KAAA0kE,eAAAvtD,KAAAsiD,8RAqBAz5D,KAAAyqE,YAAAuB,0OAeAtM,EAAAj+D,6iCA9NAyE,QAAA,67CACE1H,MACFC,MAAA,gBAEEmD,SAAF,cACElD,cAAFC,EAAAA,kBAAAC,KACAC,gBAAAC,EAAAA,wBAAAC,WAIA2gE,EAAA14C,eAAA,WAAA,QACAhoB,KAAAghE,iJA/IAN,EAAQrgE,gBA2PR8sE,kBAAAntE,KAAAO,EAAAA,QAzQAy7D,UAAAh8D,KAAAO,EAAAA,6DAgKAqmE,UAAA5mE,KAAAO,EAAAA,QAeAsmE,UAAA7mE,KAAGO,EAAAA,QAQH2nE,aAAAloE,KAAAO,EAAAA,QAGAmlE,iBAAG1lE,KAAHyY,EAAAA,SAQAwjD,eAAAj8D,KAAQyY,EAAAA,SAQRyjD,gBAAGl8D,KAAHyY,EAAAA,SAQAktD,iBAAA3lE,KAAAyY,EAAAA,SAGAy0D,YAAAltE,KAAAuV,EAAAA,UAAS5S,MAATi+D,MAMAwM,WAAAptE,KAAAuV,EAAAA,UAAA5S,MAAAk+D,MAMAwM,gBAAArtE,KAAGuV,EAAAA,UAAH5S,MAAAm+D,OAMAJ,KChOa4M,IAKXh+B,eAAgB15B,EAAAA,QAAQ,kBACtBC,EAAAA,MAAM,OAAQjC,EAAAA,OACZugB,QAAS,EACTre,UAAW,mBAEbE,EAAAA,WAAW,gBAAkBC,EAAAA,QAAQ,mCAAoCrC,EAAAA,OACvEugB,QAAS,EACTre,UAAW,kBAEbE,EAAAA,WAAW,YAAaC,EAAAA,QAAQ,eAAgBrC,EAAAA,OAAOugB,QAAS,QAIlEo5C,eAAgB33D,EAAAA,QAAQ,kBACtBC,EAAAA,MAAM,OAAQjC,EAAAA,OAAOugB,QAAS,KAC9Bte,EAAAA,MAAM,QAASjC,EAAAA,OAAOugB,QAAS,KAI/Bne,EAAAA,WAAW,YAAaC,EAAAA,QAAQ,oDlBUhCu3D,GAAgB,EAGP3R,GACT,GAAI7oD,GAAAA,eAAqC,kCAQhCiuD,IACXz4D,QAASqzD,GACT15C,MAAOiX,EAAAA,SACP/W,WAAYorD,IAKdC,GAAA,WACE,QAAFA,GAAqBxsE,GAAAF,KAArBE,YAAqBA,EA3ErB,MAAAwsE,MA6EaC,GACTzoE,EAAWwoE,mBAwCb,QAAFrS,GAAc/1D,GACd,MAAIxE,GAAJC,KAAAC,KAAUsE,IAAVtE,KATA,MAJ6C0E,GAA7C21D,EAAAv6D,GAgBEu6D,EAAF11D,UAAAC,gBAAE,WACE5E,KAAK4sE,UAAUb,kCApCnB/sE,KAACgH,EAAAA,UAADrE,OAAAwC,SAAA,yBACE8B,SAAU,wjBACVC,QAAF,shBACE1H,MACFC,MAAA,yBACMouE,oBAAN,UACIC,uCAAJ,sBAEAt1D,YACA80D,GAAAh+B,eACAg+B,GAAAC,gBAEA3qE,SAAA,uBACAlD,cAAAC,EAAAA,kBAAAC,KACEC,gBAAFC,EAAAA,wBAAAC,OACE8C,QAAF,sEA7EAw4D,EAAAh7D,0DAqFAg7D;kBAoKAr6D,KAAA80B,SAAAA,EAAsB90B,KAAtBoS,QAAsBA,EACApS,KAAtBwT,kBAAAA,EACsBxT,KAAtBwwC,gBAAAA,EACsBxwC,KAAtB84D,aAAAA,EAC8D94D,KAA9DoW,KAAAA,EACkCpW,KAAlCyE,UAA8CA,kbAP9C,KAAAs0D,GAA8C,eA3D9C,MAuEAttD,QAAAC,eAAAstD,EAAAr0D,UAAA,WA3IA5D,+FAIAo4B,0FAGAh4B,YAAA,EACAC,cAAA,+CAOAL,oCAAAf,KAAAi5D,iBAAAj5D,KAAAi5D,iBAAAC,uBAAA72D,KAGA82B,+BAGAh4B,YAAA,EACAC,cAAA,gJAUAD,YAAA,EACAC,cAAA,kDAIAL,qEAAAf,KAAAi5D,iBAAAt4D,WAAAX,KAAA6mC,WAGA1N,gBAEA,GAAA6L,GAAA/mB,EAAAA,sBAAAhd,wBACUjB,KAAV6mC,UAAA7B,EAEQhlC,KAARm5D,gBAAAxtD,KAAAq5B,KAGA7jC,YAAA,EACAC,cAAA,gDA0BAL,8FAEEK,cAAF,mDAOAL,gGACEK,cAAF,kDAIAL,wEACAI,YAAA,EACAC,cAAA,kDAGAL,wEACAI,YAAA,EACAC,cAAA,qDAAAL,gFAGAI,YAAA,EACAC,cAAA,oDA0CApB,KAAAo5D,mBAAApoD,cACIhR,KAAKm5D,gBAATjlD,WACQlU,KAARq5D,YACQr5D,KAARq5D,UAAAnnC,UAEQlyB,KAAKs5D,mBAAb,sCAOA,GAAA7tC,GAAAzrB,KAAA0mC,2BACA1mC,KAAA84D,aAAAS,SAAA9tC,EAAAzrB,KAAA0mC,YACQ1mC,KAARw5D,iBAAA7tD,KAAA8tD,qLAoBA,IAAAz5D,KAAAi5D,iBAAA,KAAA5kC,OAAA,8DAEAr0B,MAAAi5D,iBAAAjrC,EACAhuB,KAAAo5D,mBACQp5D,KAARi5D,iBAAAS,aAAAx0D,UAAA,SAAAjE,GAAA,MAAApB,GAAA6mC,UAAAzlC,mEAQA,IAAAjB,KAAAi5D,iBACA,KAAA5kC,OAAA,+DAEMr0B,MAANyE,YACAzE,KAAA25D,0BAAA35D,KAAAyE,UAAA02B,eAEAn7B,KAAA45D,QAAA55D,KAAA65D,gBAAA75D,KAAA85D,eACA95D,KAAA27B,SAAA,EAEI37B,KAAK+5D,aAAT5iD,gDAMA,IAAAnX,KAAA27B,QAAA,CAEM37B,KAANq5D,WAAAr5D,KAAAq5D,UAAAzjD,eACA5V,KAAAq5D,UAAArjD,SAEMhW,KAAKg6D,aACXh6D,KAAAg6D,WAAAt/B,QACQ16B,KAAKg6D,WAAb,MAEMh6D,KAAKi6D,iBAAXj6D,KAAAi6D,gBAAAxgB,YACAz5C,KAAAi6D,gBAAAjkD,QAGA,IAAAkkD,GAAA,oCAKUr6D,EAAKs6D,aAAfhjD,OACQtX,EAAK85D,0BAAb,MAGA35D,MAAA25D,2BACA,kBAAA35D,MAAA25D,0BAAA7hD,6DAWAoiD,+FAYAl6D,KAAAg6D,WAAAh6D,KAAAo6D,QAAAxkC,KAAAykC,IACAvrD,UAAA9O,KAAAoW,KAAApW,KAAAoW,KAAAnV,MAAA,MAEQkU,iBAAkBnV,KAA1BwT,kBACM2gB,WAAN,0BAEAn0B,KAAAg6D,WAAkBM,cAAlBp1D,UAAA,WAAA,MAAArF,GAAA66B,UACA16B,KAAAg6D,WAAAO,kBAAAC,WAAAx6D,KAEIA,KAAKy6D,0JAQTz6D,KAAAq5D,WAEAr5D,KAAA06D,eAGA16D,KAAAq5D,UAAAzjD,gBACA5V,KAAAs5D,mBAAAt5D,KAAAq5D,UAAAxjD,OAAA7V,KAAAi6D,iBAEQj6D,KAAKs5D,mBAAb7iC,SAAA+jC,WAAAx6D,KACMA,KAAKy6D,YAELz6D,KAAKoS,QAAX6qC,SAAA5qB,eAAApoB,KAAAC,EAAAA,KAAA,IAAAhF,UAAA,uKAWUg3C,aAAa,EACjBJ,cAAN,mCACMhtC,UAAW9O,KAAjBoW,KACMm9B,eAANvzC,KAAAwwC,kBACMrc,WAAN,wBAEAn0B,MAAAq5D,UAAAr5D,KAAA80B,SAAAqD,OAAwCV,GACxCz3B,KAAAq5D,UAAA/hC,eAAA2+B,aAAA,OAAA,UAEI/pD,EAAAA,MAAJlM,KAAAq5D,UAAyB18B,gBAAiB38B,KAA1Cq5D,UAAyDjiC,cAAzDp3B,KAAAq5D,UAAAsB,gBAAA1wD,KAAA3E,EAAAA,OAAA,SAAAhE,GAGA,MACWA,GADXuY,UAAA44B,EAAAA,iEAKAvtC,UAAA,WAAiC,MAAjCrF,GAAA66B,sKAQAoY,sBAAA,2BACOC,wBAAP,GACOC,mBAAP,GACOoN,qBACAxM,gBAEPK,QAAA,QACAC,QAAA,SACUI,SAAV,QACUC,SAAV,QAGAN,QAAA,QACAC,QAAA,MACUI,SAAV,QACUC,SAAV,WAGAN,QAAA,MACAC,QAAA,SACUI,SAAV,MACUC,SAAV,QAGAN,QAAA,MACAC,QAAA,MACUI,SAAV,MACUC,SAAV,sNAiBUv0C,KAAKs5D,mBAAf7iC,SAAAwvB,MAAAA,GAEMjmD,KAAKg6D,aACXh6D,KAAAg6D,WAAAO,kBAAAtU,MAAAA,IAGA+S,EAAAv3D,2EAxXAG,SAAA,gBACE/C,gBAAiBC,EAAAA,wBAAnBC,OACEL,cAAFC,EAAAA,kBAAAC,SAIAo6D,EAAAhyC,eAAiB,WAAjB,QACAhoB,KAAA47D,gEA9FA57D,SAAQqD,GAARZ,aAAAzC,KAAAuD,EAAAA,OAAAZ,MAAAk5D,QAjCA77D,KAAE87D,GAAFr5D,aAAAzC,KAAAsD,EAAAA,aAkBAtD,KAAEie,EAAAA,eAAFxb,aAAAzC,KAAAsD,EAAAA,aAKAtD,SAAEqD,GAAFZ,aAAAzC,KAAAsD,EAAAA,WAAAtD,KAAAuD,EAAAA,OAAAZ,MAAA0E,EAAAA,eAMA2yD,EAAA35D,gBAjCA07D,0BAAA/7D,KAAAO,EAAAA,QAiRAy7D,UAAAh8D,KAAAO,EAAAA,0DA3IAq6D,UAAA56D,KAAAO,EAAAA,QAGAoB,WAAA3B,KAAAO,EAAAA,QAYA07D,eAAAj8D,KAAAyY,EAAAA,SAGAyjD,gBAAAl8D,KAAAyY,EAAAA,SAcA0c,aAAAn1B,KAAAO,EAAAA,QAQAw6D,eAAA/6D,KAAAyY,EAAAA,OAAA9V,MAAA,YAmBAw4D,eAAAn7D,KAAGyY,EAAAA,OAAH9V,MAAA,YAMA04B,SAAAr7B,KAAAO,EAAAA,SAMAy5D,KC9KamC,IACX3zD,QAAS04B,EAAAA,kBACTz4B,YAAayO,EAAAA,WAAW,WAAM,MAAAklD,MAC9Bh7B,OAAO,GAIIi7B,IACX7zD,QAAS8zD,EAAAA,cACT7zD,YAAayO,EAAAA,WAAW,WAAM,MAAAklD,MAC9Bh7B,OAAO,GASTm7B,GAAA,WAIE,QAAFA,GAEW3iB,EAEA4iB,GAFAx7D,KAAX44C,OAAWA,EAEA54C,KAAXw7D,cAAWA,EACPx7D,KAAKiB,MAAQjB,KAAK44C,OAAO33C,MAnE7B,MAAAs6D,oBAiPE,QAAFH,GACcl7D,EACW44D,EAC2B2C,EAC1BC,GAJxB,GAAF77D,GAAAG,IAKI,IAJUA,KAAdE,YAAcA,EACWF,KAAzB84D,aAAyBA,EAC2B94D,KAApDy7D,aAAoDA,EAC1Bz7D,KAA1B07D,WAA0BA,EAhExB17D,KAAF27D,WACM,GAAInlD,GAAAA,aAGRxW,KAAF47D,UACM,GAAIplD,GAAAA,aAGRxW,KAAF05D,aAAiB,GAAIljD,GAAAA,aAGnBxW,KAAFm5D,gBAAoB,GAAI3iD,GAAAA,aAEtBxW,KAAF4iD,WAAe,aAEf5iD,KAAA67D,aAA+C,aAE/C77D,KAAA87D,mBAA+B,aAE/B97D,KAAA+7D,wBAAoC1tD,EAAAA,aAAaC,MAEjDtO,KAAAg8D,oBAAgC3tD,EAAAA,aAAaC,MAG7CtO,KAAAi8D,gBAAyC,WACrC,MAAOp8D,GAAKq8D,gBACR,MAAQC,oBAAuBC,KAAQv8D,EAAKK,YAAYI,cAAcW,SAI9EjB,KAAAq8D,cAAuC,SAACz2C,GACpC,GAAM02C,GAAez8D,EAAK08D,oBAAoB18D,EAAKi5D,aAAa0D,YAAY52C,EAAQ3kB,OACpF,QAASpB,EAAKiS,MAAQwqD,GAClBz8D,EAAKi5D,aAAa2D,YAAY58D,EAAKiS,IAAKwqD,IAAiB,EACzD,MAAQI,kBAAqB5qD,IAAOjS,EAAKiS,IAAK6qD,OAAUL,KAIhEt8D,KAAA48D,cAAuC,SAACh3C,GACpC,GAAM02C,GAAez8D,EAAK08D,oBAAoB18D,EAAKi5D,aAAa0D,YAAY52C,EAAQ3kB,OACpF,QAASpB,EAAKmc,MAAQsgD,GAClBz8D,EAAKi5D,aAAa2D,YAAY58D,EAAKmc,IAAKsgD,IAAiB,EACzD,MAAQO,kBAAqB7gD,IAAOnc,EAAKmc,IAAK2gD,OAAUL,KAIhEt8D,KAAA88D,iBAA0C,SAACl3C,GACvC,GAAM02C,GAAez8D,EAAK08D,oBAAoB18D,EAAKi5D,aAAa0D,YAAY52C,EAAQ3kB,OACpF,OAAQpB,GAAKk9D,aAAgBT,IAAgBz8D,EAAKk9D,YAAYT,IAClDU,qBAAuB,GAA/B,MAKRh9D,KAAAi9D,WAAMC,EAAAA,WAAWC,SACNn9D,KAAKi8D,gBAAiBj8D,KAAKq8D,cAAer8D,KAAK48D,cAAe58D,KAAK88D,mBAG9E98D,KAAAk8D,iBAA4B,GAOnBl8D,KAAK84D,aACR,KAAMC,GAA2B,cAEnC,KAAK/4D,KAAKy7D,aACR,KAAM1C,GAA2B,mBAInC/4D,MAAKg8D,oBAAsBlD,EAAasE,cAAcl4D,UAAU,WAC9DrF,EAAKoB,MAAQpB,EAAKoB,QA/PxB,MA+FEwK,QAAFC,eACM0vD,EADNz2D,UAAA,qBAAE,SACkB1D,GADlB,GAAFpB,GAAAG,IAESiB,KAILjB,KAAKq9D,YAAcp8D,EACnBjB,KAAKq9D,YAAYC,eAAet9D,MAChCA,KAAK+7D,wBAAwB/qD,cAE7BhR,KAAK+7D,wBAA0B/7D,KAAKq9D,YAAY7D,iBAAiBt0D,UAAU,SAAC6f,GAC1EllB,EAAKoB,MAAQ8jB,EACbllB,EAAKg8D,aAAa92C,GAClBllB,EAAK+iD,aACL/iD,EAAK+7D,UAAUzkD,KAAK,GAAIokD,IAAwB17D,EAAMA,EAAKK,YAAYI,gBACvET,EAAK87D,WAAWxkD,KAAK,GAAIokD,IAAwB17D,EAAMA,EAAKK,YAAYI,oDAM5EmL,OAAFC,eACM0vD,EADNz2D,UAAA,2BAAE,SACwB1D,GACtBjB,KAAK+8D,YAAc97D,EACnBjB,KAAK87D,sDAKPrwD,OAAFC,eACM0vD,EADNz2D,UAAA,aAAE,WACwB,MAAO3E,MAAKspB,YACpC,SAAUroB,GACRA,EAAQjB,KAAK84D,aAAa0D,YAAYv7D,GACtCjB,KAAKk8D,iBAAmBj7D,GAASjB,KAAK84D,aAAayE,QAAQt8D,GAC3DA,EAAQjB,KAAKu8D,oBAAoBt7D,EACjC,IAAMu8D,GAAUx9D,KAAKiB,KACrBjB,MAAKspB,OAASroB,EACdjB,KAAKy9D,aAAax8D,GAEbjB,KAAK84D,aAAaS,SAASiE,EAASv8D,IACvCjB,KAAK05D,aAAaviD,KAAKlW,oCAM3BwK,OAAFC,eACM0vD,EADNz2D,UAAA,WAAE,WACsB,MAAO3E,MAAKupB,UAClC,SAAQtoB,GACNjB,KAAKupB,KAAOvpB,KAAKu8D,oBAAoBv8D,KAAK84D,aAAa0D,YAAYv7D,IACnEjB,KAAK87D,sDAKPrwD,OAAFC,eACM0vD,EADNz2D,UAAA,WAAE,WACsB,MAAO3E,MAAKgjC,UAClC,SAAQ/hC,GACNjB,KAAKgjC,KAAOhjC,KAAKu8D,oBAAoBv8D,KAAK84D,aAAa0D,YAAYv7D,IACnEjB,KAAK87D,sDAKPrwD,OAAFC,eACM0vD,EADNz2D,UAAA,gBAAE,WAC0B,QAAS3E,KAAK6mC,eACxC,SAAa5lC,GACX,GAAM+jC,GAAW/mB,EAAAA,sBAAsBhd,GACjCsR,EAAUvS,KAAKE,YAAYI,aAE7BN,MAAK6mC,YAAc7B,IACrBhlC,KAAK6mC,UAAY7B,EACjBhlC,KAAKm5D,gBAAgBhiD,KAAK6tB,IAIxBA,GAAYzyB,EAAQyX,MAItBzX,EAAQyX,wCAoFZoxC,EAAFz2D,UAAAsD,YAAE,WACEjI,KAAK+7D,wBAAwB/qD,cAC7BhR,KAAKg8D,oBAAoBhrD,cACzBhR,KAAK05D,aAAaxlD,WAClBlU,KAAKm5D,gBAAgBjlD,YAIvBknD,EAAFz2D,UAAA+4D,0BAAE,SAA0B7uC,GACxB7uB,KAAK87D,mBAAqBjtC,GAI5BusC,EAAFz2D,UAAAg5D,SAAE,SAASpgB,GACP,MAAOv9C,MAAKi9D,WAAaj9D,KAAKi9D,WAAW1f,GAAK,MAOhD6d,EAAFz2D,UAAAi5D,6BAAE,WACE,MAAO59D,MAAK69D,6BAOdzC,EAAFz2D,UAAAk5D,0BAAE,WACE,MAAO79D,MAAK07D,WAAa17D,KAAK07D,WAAWmC,4BAA8B79D,KAAKE,aAI9Ek7D,EAAFz2D,UAAAgqB,WAAE,SAAW1tB,GACTjB,KAAKiB,MAAQA,GAIfm6D,EAAFz2D,UAAAiqB,iBAAE,SAAiBC,GACf7uB,KAAK67D,aAAehtC,GAItBusC,EAAFz2D,UAAAmqB,kBAAE,SAAkBD,GAChB7uB,KAAK4iD,WAAa/zB,GAIpBusC,EAAFz2D,UAAAoqB,iBAAE,SAAiBC,GACfhvB,KAAKW,SAAWquB,GAGlBosC,EAAFz2D,UAAA+nB,WAAE,SAAWprB,GACT,GAAMw8D,GAAiBx8D,EAAM8jD,QAAU9jD,EAAMuY,UAAYoT,EAAAA,UAErDjtB,MAAKq9D,aAAeS,IAAmB99D,KAAKE,YAAYI,cAAcy9D,WACxE/9D,KAAKq9D,YAAYznC,OACjBt0B,EAAMC,mBAIV65D,EAAFz2D,UAAAq5D,SAAE,SAAS/8D,GACP,GAAIw4D,GAAOz5D,KAAK84D,aAAamF,MAAMh9D,EAAOjB,KAAKy7D,aAAawC,MAAMrC,UAClE57D,MAAKk8D,iBAAmBzC,GAAQz5D,KAAK84D,aAAayE,QAAQ9D,GAC1DA,EAAOz5D,KAAKu8D,oBAAoB9C,GAE3Bz5D,KAAK84D,aAAaS,SAASE,EAAMz5D,KAAKspB,UACzCtpB,KAAKspB,OAASmwC,EACdz5D,KAAK67D,aAAapC,GAClBz5D,KAAK05D,aAAaviD,KAAKsiD,GACvBz5D,KAAK47D,UAAUzkD,KAAK,GAAIokD,IAAwBv7D,KAAMA,KAAKE,YAAYI,kBAI3E86D,EAAFz2D,UAAAg+C,UAAE,WACE3iD,KAAK27D,WAAWxkD,KAAK,GAAIokD,IAAwBv7D,KAAMA,KAAKE,YAAYI,iBAI1E86D,EAAFz2D,UAAAu0D,iBAAE,WACE,MAAOl5D,MAAK07D,WAAa17D,KAAK07D,WAAWzV,UAAQ5jD,IAInD+4D,EAAFz2D,UAAA6nB,QAAE,WAEMxsB,KAAKiB,OACPjB,KAAKy9D,aAAaz9D,KAAKiB,OAGzBjB,KAAK4iD,cAICwY,EAAVz2D,UAAA84D,aAAA,SAAuBx8D,GACnBjB,KAAKE,YAAYI,cAAcW,MAC3BA,EAAQjB,KAAK84D,aAAaoF,OAAOj9D,EAAOjB,KAAKy7D,aAAa0C,QAAQvC,WAAa,IAO7ER,EAAVz2D,UAAA43D,oBAAA,SAA8BtrD,GAC1B,MAAQjR,MAAK84D,aAAasF,eAAentD,IAAQjR,KAAK84D,aAAayE,QAAQtsD,GAAQA,EAAM,qBAnS7FjS,KAAC0C,EAAAA,UAADC,OACEwC,SAAU,uBACVoD,WACE4zD,GACAE,IACC7zD,QAAS62D,GAA0B52D,YAAa2zD,IAEnD58D,MACE8/D,uBAAwB,OACxBzwB,mBAAoB,kDACpB0wB,aAAc,2CACdC,aAAc,2CACdC,aAAc,WACdC,UAAW,gCACXC,WAAY,cACZxvC,SAAU,YACVC,YAAa,sBAEfxtB,SAAU,6DA/EZ5C,KAAE0I,EAAAA,aAmBF1I,KAAQ87D,GAARr5D,aAAAzC,KAoNOsD,EAAAA,aACPtD,SAAAqD,GAAAZ,aAAAzC,KAAOsD,EAAAA,WAAPtD,KAAmBuD,EAAAA,OAAnBZ,MAA0Bi9D,QApN1B5/D,KAAQ2vC,GAARltC,aAAAzC,KAqNOsD,EAAAA,gCAtJPu8D,gBAAA7/D,KAAGO,EAAAA,QAqBHy9D,sBAAAh+D,KAAGO,EAAAA,QAQH0B,QAAAjC,KAAGO,EAAAA,QAiBHuS,MAAA9S,KAAGO,EAAAA,QASHyc,MAAAhd,KAAGO,EAAAA,QASHoB,WAAA3B,KAAGO,EAAAA,QAsBHo8D,aAAA38D,KAAGyY,EAAAA,SAIHmkD,YAAA58D,KAAGyY,EAAAA,UAzLH2jD,iCCAA,sBA6BAp8D,KAAC0C,EAAAA,UAADC,OACEwC,SAAU,gCA9BZ26D,mBA0EE,QAAFC,GACWr9C,EACCrJ,EACe2mD,GAFhBh/D,KAAX0hB,MAAWA,EACC1hB,KAAZqY,mBAAYA,EAvBZrY,KAAA2T,cAA0BtF,EAAAA,aAAaC,KA0BnC,IAAM2wD,GAAiB93D,OAAO63D,EAC9Bh/D,MAAKO,SAAY0+D,GAAqC,IAAnBA,EAAwBA,EAAiB,KARhF,MAVExzD,QAAFC,eACMqzD,EADNp6D,UAAA,gBAAE,WAEE,WAA0BtC,KAAnBrC,KAAK6mC,UAA0B7mC,KAAKw6D,WAAW75D,WAAaX,KAAK6mC,eAE1E,SAAa5lC,GACXjB,KAAK6mC,UAAY5oB,EAAAA,sBAAsBhd,oCAgBzC89D,EAAFp6D,UAAAqP,YAAE,SAAY/O,GACNA,EAAR,YACMjF,KAAKk/D,sBAITH,EAAFp6D,UAAAsD,YAAE,WACEjI,KAAK2T,cAAc3C,eAGrB+tD,EAAFp6D,UAAAqD,mBAAE,WACEhI,KAAKk/D,sBAGPH,EAAFp6D,UAAAstB,MAAE,SAAM3wB,GACAtB,KAAKw6D,aAAex6D,KAAKW,WAC3BX,KAAKw6D,WAAW5kC,OAChBt0B,EAAMq5B,oBAIFokC,EAAVp6D,UAAAu6D,yCACUC,EAAqBn/D,KAAKw6D,WAAax6D,KAAKw6D,WAAWrB,gBAAkB/oD,EAAAA,KACzEgvD,EAAgBp/D,KAAKw6D,YAAcx6D,KAAKw6D,WAAWvB,iBACrDj5D,KAAKw6D,WAAWvB,iBAAiBE,gBAAkB/oD,EAAAA,KACjDivD,EAAoBr/D,KAAKw6D,WAC3BtuD,EAAAA,MAAMlM,KAAKw6D,WAAWT,aAAc/5D,KAAKw6D,WAAWL,cACpD/pD,EAAAA,IAEJpQ,MAAK2T,cAAc3C,cACnBhR,KAAK2T,cAAgBzH,EAAAA,MACnBlM,KAAK0hB,MAAMzc,QACXk6D,EACAC,EACAC,GACAn6D,UAAU,WAAM,MAAArF,GAAKwY,mBAAmBxB,iCAnF9C7X,KAACgH,EAAAA,UAADrE,OAAAwC,SAAA,wBACE8B,SAAU,4lBACVC,QAAF,quBACE1H,MACFC,MAAA,wBAEI8jC,kBAAJ,gFAEI+8B,qBAAJ,8CACIC,mBAAJ,6CAEA39D,SAAA,sBACAlD,cAAAC,EAAAA,kBAAAC,KACEC,gBAAFC,EAAAA,wBAAAC,oFAvBAC,KAAQyD,OAARhB,aAAAzC,KAAA0D,EAAAA,UAAAf,MAAA,iBAoDAo9D,EAAA1/D,mFArBAsB,WAAA3B,KAAAO,EAAAA,QAGAigE,cAAAxgE,KAAAw/B,EAAAA,aAAA78B,MAAAm9D,OAaAC,iCCxEA,sBA8BA//D,KAAC4D,EAAAA,SAADjB,OACEkB,SACEC,EAAAA,aACA0kB,GACAi4C,GACAjrC,EAAAA,cACArxB,EAAAA,WACAH,EAAAA,cAEFI,SACEs8D,GACAC,GACA3G,GACAqB,GACAe,GACA2D,GACAD,GACAc,GACAC,GACAC,GACAC,IAEFt8D,cACEi8D,GACAC,GACA3G,GACAqB,GACAe,GACA2D,GACAD,GACAc,GACAC,GACAC,GACAC,IAEFx4D,WACEy4D,GACAC,IAEFxrC,iBACE4lC,GACA0F,QAvEJG,gCCgCAlgE,KAAA6pB,WAA+B,EAM/B7pB,KAAAmgE,QAA4B,EAH5B,MANE10D,QAAFC,eACM00D,EADNz7D,UAAA,gBAAE,WAC0B,MAAO3E,MAAK6pB,eACtC,SAAa5oB,GAAkBjB,KAAK6pB,UAAY5L,EAAAA,sBAAsBhd,oCAItEwK,OAAFC,eACM00D,EADNz7D,UAAA,aAAE,WACuB,MAAO3E,MAAKmgE,YACnC,SAAUl/D,GAAkBjB,KAAKmgE,OAASliD,EAAAA,sBAAsBhd,mDA1BlEjC,KAACgH,EAAAA,UAADrE,OAAAwC,SAAA,cACE3F,MACF0I,KAAA,YACM2oB,0BAAN,uCACIwwC,+BAAJ,WACIC,iCAAJ,YACIC,4BAAJ,QACI9hE,MAAJ,eAEAwH,SAAA,GACAC,QAAA,+SACExH,cAAFC,EAAAA,kBAAAC,KACEC,gBAAFC,EAAAA,wBAAAC,WAGAqhE,EAAA/gE,kEASA+gE,iCCnCA,sBAcAphE,KAAC4D,EAAAA,SAADjB,OACEkB,SAAUE,GAAiBD,EAAAA,cAC3BM,SAAUg9D,GAAYr9D,IACtBU,cAAe28D,QAjBjBvX,KCqCa2X,GAAgB,GAAIxuD,GAAAA,eAAiC,iBnFOrDyuD,IAMXC,gBAAiB9rD,EAAAA,QAAQ,mBACvBC,EAAAA,MAAM,kBAAmBjC,EAAAA,OAAOkC,UAAW,kBAC3CD,EAAAA,MAAM,WAAYjC,EAAAA,OAAOkC,UAAW,oBACpCE,EAAAA,WAAW,4CACTC,EAAAA,QAlC0C,wCAsC9C0rD,sBAAuB/rD,EAAAA,QAAQ,mBAC7BC,EAAAA,MAAM,kBAAmBjC,EAAAA,OACvByM,OAAQ,yBAERuhD,QAASC,gBAAiB,UAE5BhsD,EAAAA,MAAM,WAAYjC,EAAAA,OAChByM,OAAQ,wBAERuhD,QAASE,eAAgB,UAE3B9rD,EAAAA,WAAW,4CAA6Cu2B,EAAAA,OACtD5qB,EAAAA,MAAM,mBAAoBC,EAAAA,gBAAiBC,UAAU,IACrD5L,EAAAA,QAnD0C,0CAwD9C8rD,cAAensD,EAAAA,QAAQ,iBACrBC,EAAAA,MAAM,kBAAmBjC,EAAAA,OAAOyM,OAAQ,MAAOxM,WAAY,YAC3DgC,EAAAA,MAAM,WAAYjC,EAAAA,OAAOyM,OAAQ,IAAKxM,WAAY,aAClDmC,EAAAA,WAAW,4CACTC,EAAAA,QA5D0C,uDoFF9C,QAAF+rD,GAAqB9nB,GAAAl5C,KAArBk5C,UAAqBA,EAlBrB,sBAcAl6C,KAAC0C,EAAAA,UAADC,OACEwC,SAAU,gFAPZnF,KAAmBmU,EAAAA,eARnB6tD,KC2CaC,GAAoBC,EAAAA,iBAM7BC,GAAW,iBAwEb,QAAFC,GAA6DC,EAC/ChpD,EACAipD,EACQ9tD,EAEU/O,EACgCi4B,GAN9D,GAAF78B,GAOIC,EAPJC,KAAAC,KAOUqhE,EAAWhpD,EAAoBipD,IAPzCthE,WAGsBH,GAAtB2T,kBAAsBA,EAG0C3T,EAAhE68B,eAAgEA,EAhChE78B,EAAA0hE,aAAwB,EAGtB1hE,EAAF2hE,YAA0B,GAAIhrD,GAAAA,aAG5B3W,EAAF4hE,cAA4B,GAAIjrD,GAAAA,aAG9B3W,EAAF6hE,cAA2B,GAAI9tD,GAAAA,QAe7B/T,EAAF8hE,UAAc,8BAA8BR,KAUxCthE,EAAKwhE,UAAYA,EACjBxhE,EAAK4E,UAAYA,IAjBrB,MAjCuCC,GAAvC08D,EAAAthE,GAQE2L,OAAFC,eACM01D,EADNz8D,UAAA,kBAAE,WAEE,MAAO3E,MAAKuhE,aAAgBvhE,KAAKqhE,WAAarhE,KAAKqhE,UAAUO,gBAE/D,SAAe3gE,GACbjB,KAAKuhE,YAActjD,EAAAA,sBAAsBhd,oCAyC3CmgE,EAAFz8D,UAAAk9D,YAAE,WACE,QAAI7hE,KAAKqhE,WAI4E,aAA3ErhE,KAAK8hE,SAAW9hE,KAAKqhE,UAAUU,YAAc/hE,KAAKgiE,sBAM9DZ,EAAFz8D,UAAAq9D,kBAAE,WACE,MAAOhiE,MAAK8hE,SAAW,WAAa,aAGtCV,EAAFz8D,UAAAqD,mBAAE,WAAA,GAAFnI,GAAAG,IACQA,MAAKiiE,cAEPjiE,KAAKq6B,OAAOpwB,KACVuL,EAAAA,UAAS,MACTlQ,EAAAA,OAAO,WAAM,MAAAzF,GAAKiiE,WAAajiE,EAAKwyC,UACpCnoC,EAAAA,KAAK,IACLhF,UAAU,WACVrF,EAAKwyC,QAAU,GAAIj+B,GAAAA,eAAevU,EAAKoiE,aAAa/oB,UAAWr5C,EAAK2T,sBAK1E4tD,EAAFz8D,UAAAqP,YAAE,SAAY/O,GACVjF,KAAK0hE,cAAc/1D,KAAK1G,IAG1Bm8D,EAAFz8D,UAAAsD,YAAE,WACEnI,EAAJ6E,UAAUsD,YAAVlI,KAAAC,MACIA,KAAK0hE,cAAcxtD,YAGrBktD,EAAFz8D,UAAAu9D,eAAE,SAAe5gE,GACb,GAAMkE,GAAYlE,EAAMiR,QAAQ/M,UAEzB28D,EAAX7gE,EAAA6gE,UAAsBjrD,EAAtB5V,EAAA4V,QAA+BI,EAA/BhW,EAAAgW,SAMsB,UAAd6qD,GAAoC,aAAZjrD,GAC1B1R,EAAU4Y,IARK,gBAUC,UAAd+jD,GAAqC,cAAZjrD,GAC3B1R,EAAU2Y,OAXK,gBAcC,SAAdgkD,GAAoC,aAAZjrD,GAAwC,SAAdI,GACpDtX,KAAKwhE,YAAYrqD,OAED,SAAdgrD,GAAoC,cAAZjrD,GAAyC,SAAdI,GACrDtX,KAAKyhE,cAActqD,QAKvBiqD,EAAFz8D,UAAAy9D,eAAE,WACE,GAAIpiE,KAAKqiE,OAASriE,KAAKyE,UAAW,CAChC,GAAM69D,GAAiBtiE,KAAKyE,UAAU02B,cAChConC,EAAcviE,KAAKqiE,MAAM/hE,aAC/B,OAAOgiE,KAAmBC,GAAeA,EAAY98D,SAAS68D,GAGhE,OAAO,kBAlJXtjE,KAACgH,EAAAA,UAADrE,OAAAuE,QAAA,0/CACE/B,SAAU,sBACVvC,SAAF,oBACEqE,SAAU,meACVvH,cAAFC,EAAAA,kBAAAC,KACEC,gBAAFC,EAAAA,wBAAAC,OACE8C,QAAF,WAAA,YACE2gE,SAAF,SAAA,SAAA,kBACEhrD,YAAFipD,GAAAM,eACEx5D,oCAKqClF,KAAvC7D,MACAC,MAAA,sBACMgkE,uBAAN,WACIlyC,kCAAJ,sCACImyC,sCAAJ,6KA8CA1jE,KAAAypC,EAAAA,4BAzGAzpC,KAAEyH,EAAAA,mBALFzH,SAAQqD,GAARZ,aAAAzC,KAAAuD,EAAAA,OAAAZ,MAAA0E,EAAAA,cAmBArH,KAAEyD,OAAFhB,aAAAzC,KAAAsD,EAAAA,WAAAtD,KAAAuD,EAAAA,OAAAZ,MAAA6uB,EAAAA,4BAiGA4wC,EAAA/hE,0EAvCAoiE,gBAAAziE,KAAAyY,EAAAA,SAUAwqD,eAAAjjE,KAAAw/B,EAAAA,aAAA78B,MAAAq/D,MAGAqB,QAAArjE,KAAAuV,EAAAA,UAAA5S,MAAA,WAYAy/D,uBAjHAuB,GAAA,yBAoNA,wEALAnkE,MACAC,MAAA,sBAIAkkE,mBClJE,QAAFC,GACqB7c,EACPzhC,EACAnkB,EACAkY,GAJZ,GAAFxY,GAAAG,IACqBA,MAArB+lD,MAAqBA,EACP/lD,KAAdskB,SAAcA,EACAtkB,KAAdG,cAAcA,EACAH,KAAdqY,mBAAcA,EANdrY,KAAA6iE,0BAAsCx0D,EAAAA,aAAaC,KAQ/C,IAAMw0D,GAA4B/c,EAAMsb,UACtCtb,EAAMsb,UAAU1tD,cAAc1J,KAAK3E,EAAAA,OAAO,SAAAL,GAAW,QAAEA,EAA7D,cAAoFqJ,EAAAA,KAIhFtO,MAAK6iE,0BAA4B32D,EAAAA,MAC/B65C,EAAM1rB,OACN0rB,EAAMv0B,OACNsxC,EACA/c,EAAM2b,cAAcz3D,KAAK3E,EAAAA,OAAO,SAAAL,GAAW,SAAGA,EAJpD,aAI0EA,EAJ1E,cAMKC,UAAU,WAAM,MAAArF,GAAKwY,mBAAmBxB,iBAGzCkvC,EAAMv0B,OACHvnB,KAAK3E,EAAAA,OAAO,WAAM,MAAAygD,GAAMqc,oBACxBl9D,UAAU,WAAM,MAAA/E,GAAck7B,SAAS/W,EAAU,aAEpDnkB,EAAcW,QAAQwjB,GAAUpf,UAAU,SAAA4O,GACpCA,GAAUiyC,EAAMsb,WAClBtb,EAAMsb,UAAU0B,mBAAmBljE,KAS3C,MAME4L,QAAFC,eAAMk3D,EAANj+D,UAAA,gBAAE,WACE,MAAO3E,MAAK+lD,MAAMplD,0CAIpBiiE,EAAFj+D,UAAAq+D,QAAE,WACEhjE,KAAK+lD,MAAM1kB,UAIbuhC,EAAFj+D,UAAAs+D,YAAE,WACE,MAAOjjE,MAAK+lD,MAAM+b,UAIpBc,EAAFj+D,UAAAq9D,kBAAE,WACE,MAAOhiE,MAAK+lD,MAAMic,qBAIpBY,EAAFj+D,UAAAu+D,YAAE,WACE,MAAOljE,MAAK+lD,MAAMhlC,IAIpB6hD,EAAFj+D,UAAAw+D,YAAE,WACE,OAAQnjE,KAAK+lD,MAAM6b,aAAe5hE,KAAK+lD,MAAMplD,UAI/CiiE,EAAFj+D,UAAAy+D,SAAE,SAAS9hE,GACP,OAAQA,EAAMuY,SAEZ,IAAKM,GAAAA,MACL,IAAKD,GAAAA,MACH5Y,EAAMC,iBACNvB,KAAKgjE,SACL,MACF,SAKE,YAJIhjE,KAAK+lD,MAAMsb,WACbrhE,KAAK+lD,MAAMsb,UAAUgC,qBAAqB/hE,MAYlDshE,EAAFj+D,UAAAmT,MAAE,SAAMhE,OAAR,KAAAA,IAAQA,EAAR,WACI9T,KAAKG,cAAck7B,SAASr7B,KAAKskB,SAAUxQ,IAG7C8uD,EAAFj+D,UAAAsD,YAAE,WACEjI,KAAK6iE,0BAA0B7xD,cAC/BhR,KAAKG,cAAckB,eAAerB,KAAKskB,0BArI3CtlB,KAACgH,EAAAA,UAADrE,OAAAwC,SAAA,6BACE+B,QAAF,64BACED,SAAU,mRACVvH,cAAFC,EAAAA,kBAAAC,KACEC,gBAAFC,EAAAA,wBAAAC,OACEyY,YACFipD,GAAAC,gBACAD,GAAAE,uBAEAniE,MACAC,MAAA,6BACMyI,KAAN,SACIshC,YAAJ,kBACIjG,kBAAJ,oBACI+gC,uBAAJ,gBACIl8D,uBAAJ,gBACIrF,uBAAwB,iBACxB0gE,uBAAwB,gBACxBtgE,UAAJ,YACIitB,YAAJ,mBACIm0C,qBAAsB,uQA5B1BvkE,KAAQ2D,EAAAA,eATR3D,KAAEE,EAAAA,qBAHF0jE,EAAAvjE,kFAyFAujE,iCA8EA,+EALApkE,MACAC,MAAA,8CAIA+kE,iCAaA,yEALAhlE,MACAC,MAAA,wCAIAglE,qFCvJA5jE,GAAA0hE,aAAiC,EAU/B1hE,EAAFkiE,YAAkD,YAnDlD,MA+BkCr9D,GAAlCg/D,EAAA5jE,GAOE2L,OAAFC,eACMg4D,EADN/+D,UAAA,kBAAE,WAC4B,MAAO3E,MAAKuhE,iBACxC,SAAe/uD,GAAiBxS,KAAKuhE,YAActjD,EAAAA,sBAAsBzL,oCAazEkxD,EAAF/+D,UAAAqD,mBAAE,WACEhI,KAAKiZ,YAAc,GAAIwB,GAAAA,gBAAgBza,KAAK2jE,UAAUhpD,YAIxD+oD,EAAF/+D,UAAA0+D,qBAAE,SAAqB/hE,GACZ,GAAAuY,GAAXvY,EAAAuY,QACUsrC,EAAUnlD,KAAKiZ,WAEjBY,KAAYC,EAAAA,MACdqrC,EAAQprC,qBACRzY,EAAMC,kBACGsY,IAAYG,EAAAA,KACrBmrC,EAAQlrC,oBACR3Y,EAAMC,kBAENvB,KAAKiZ,YAAYoB,UAAU/Y,IAI/BoiE,EAAF/+D,UAAAo+D,mBAAE,SAAmBa,GACjB5jE,KAAKiZ,YAAY2B,iBAAiBgpD,mBAvDtC5kE,KAAC0C,EAAAA,UAADC,OACEwC,SAAU,gBACVvC,SAAU,eACVC,QAAS,SACT0F,YACEC,QAASg5D,GACT/4D,YAAai8D,IAEfllE,MACEC,MAAO,uCAMXklE,WAAA3kE,KAAGoJ,EAAAA,gBAAHzG,MAAmBihE,IAA0Bp7B,aAAa,MAI1Do6B,aAAA5iE,KAAGO,EAAAA,QAaHwiE,cAAA/iE,KAAGO,EAAAA,SAnDHmkE,GA+BkCG,EAAAA,0CC/BlC,sBAsBA7kE,KAAC4D,EAAAA,SAADjB,OACEkB,SAAUC,EAAAA,aAAcghE,EAAAA,mBAAoB9gE,EAAAA,cAC5CI,SACEsgE,GACAtC,GACAuB,GACAC,GACAa,GACAD,GACAxC,IAEFv9D,cACEigE,GACAtC,GACAuB,GACAC,GACAa,GACAD,GACAxC,QAxCJ+C,KCca7S,GAAgB,GAAIl/C,GAAAA,eAAgC,+BpB2B/D,QAAF05C,GACYpnC,EACkC2sC,GADlCjxD,KAAZskB,SAAYA,EACkCtkB,KAA9CixD,UAA8CA,EAL5CjxD,KAAF0tD,SAAqB,EACnB1tD,KAAFgkE,SAAqB,EAYrB,MALEv4D,QAAFC,eACMggD,EADN/mD,UAAA,eAAE,WACwB,MAAO3E,MAAK0tD,cACpC,SAAYzsD,GAAiBjB,KAAK0tD,SAAW97C,KAAKic,MAAM7U,EAAAA,qBAAqB/X,qCAG7EwK,OAAFC,eACMggD,EADN/mD,UAAA,eAAE,WACwB,MAAO3E,MAAKgkE,cACpC,SAAY/iE,GAAiBjB,KAAKgkE,SAAWpyD,KAAKic,MAAM7U,EAAAA,qBAAqB/X,qCAM7EyqD,EAAF/mD,UAAAwqD,UAAE,SAAU8U,EAAkBhjE,GAC1BjB,KAAKskB,SAAShkB,cAAcsS,MAAMqxD,GAAYhjE,kBAnClDjC,KAACgH,EAAAA,UAADrE,OAAAwC,SAAA,gBACEvC,SAAU,cACVpD,MACFC,MAAA,iBAEAwH,SAAA,gEACAC,QAAA;wvCACExH,cAAFC,EAAAA,kBAAAC,KACEC,gBAAFC,EAAAA,wBAAAC,2IAUA2sD,EAAArsD,mEAQAqsD,KAnDAC,GAAA,8IAkFAA,EAAAlqD,aACAzC,KAAAgH,EAAAA,UAAArE,OAAAwC,SAAA,qPAnBAtF,gBAAAC,EAAAA,wBAAAC,OACEL,cAAFC,EAAAA,kBAAAC,SAIA+sD,EAAE3kC,eAAF,WAAA,QACAhoB,KAAA0I,EAAAA,8GAqBA,+HAAAkkD,iCAUA,sHAAAC,iCAUA,sHAAAC,KCpFAC,GAAA,wBAKE/rD,KAAFgsD,YAAwB,EAGtBhsD,KAAFisD,SAAqB,EAnCrB,MAsCExgD,QAAFC,eAAMqgD,EAANpnD,UAAA,gBAAE,WAAyB,MAAO3E,MAAKisD,SAAW,mCAMhDxgD,OAAFC,eAAMqgD,EAANpnD,UAAA,eAAE,WACE,GAAMunD,GAAat6C,KAAKoK,IAA5B7P,MAAuByF,KAAY5R,KAAKmsD,QAGpC,OAAOD,GAAa,EAAIlsD,KAAKosD,SAAWF,EAAa,EAAIlsD,KAAKosD,0CAUhEL,EAAFpnD,UAAA0nD,OAAE,SAAOC,EAAoBC,GAA3B,GAAF1sD,GAAAG,IACIA,MAAKgsD,YAAc,EACnBhsD,KAAKisD,SAAW,EAEhBjsD,KAAKmsD,QAAU,GAAIriD,OAAMwiD,GACzBtsD,KAAKmsD,QAAQK,KAAK,EAAG,EAAGxsD,KAAKmsD,QAAQhnD,QACrCnF,KAAK+S,UAAYw5C,EAAMngD,IAAI,SAAAqgD,GAAQ,MAAA5sD,GAAK6sD,WAAWD,MAI7CV,EAAVpnD,UAAA+nD,WAAA,SAAqBD,GAEjB,GAAME,GAAgB3sD,KAAK4sD,iBAAiBH,EAAKI,QASjD,OANA7sD,MAAK8sD,kBAAkBH,EAAeF,GAItCzsD,KAAKgsD,YAAcW,EAAgBF,EAAKI,QAEjC,GAAIE,IAAa/sD,KAAKisD,SAAUU,IAIjCZ,EAAVpnD,UAAAioD,iBAAA,SAA2BI,GACvB,GAAIA,EAAWhtD,KAAKmsD,QAAQhnD,OAC1B,KAAMkvB,OAAM,oCAAoC24B,EAAtD,kCACyChtD,KAAKmsD,QAAQhnD,OAAtD,KAII,IAAIwnD,IAAiB,EACjBM,GAAe,CAGnB,IAEMjtD,KAAKgsD,YAAcgB,EAAWhtD,KAAKmsD,QAAQhnD,QAC7CnF,KAAKktD,WACLP,EAAgB3sD,KAAKmsD,QAAQt8C,QAAQ,EAAG7P,KAAKgsD,aAC7CiB,EAAcjtD,KAAKmtD,iBAAiBR,KAItCA,EAAgB3sD,KAAKmsD,QAAQt8C,QAAQ,EAAG7P,KAAKgsD,cAGvB,GAAlBW,GAOJM,EAAcjtD,KAAKmtD,iBAAiBR,GAIpC3sD,KAAKgsD,YAAcW,EAAgB,IAVjC3sD,KAAKktD,WACLP,EAAgB3sD,KAAKmsD,QAAQt8C,QAAQ,EAAG7P,KAAKgsD,aAC7CiB,EAAcjtD,KAAKmtD,iBAAiBR,WAY9BM,EAAcN,EAAgBK,GAA6B,GAAfC,EAItD,OAAOr7C,MAAKoK,IAAI2wC,EAAe,IAIzBZ,EAAVpnD,UAAAuoD,oBACIltD,KAAKgsD,YAAc,EACnBhsD,KAAKisD,UAGL,KAAK,GAAIjhD,GAAI,EAAGA,EAAIhL,KAAKmsD,QAAQhnD,OAAQ6F,IACvChL,KAAKmsD,QAAQnhD,GAAK4G,KAAKoK,IAAI,EAAGhc,KAAKmsD,QAAQnhD,GAAK,IAQ5C+gD,EAAVpnD,UAAAwoD,iBAAA,SAA2BR,GACvB,IAAK,GAAI3hD,GAAI2hD,EAAgB,EAAG3hD,EAAIhL,KAAKmsD,QAAQhnD,OAAQ6F,IACvD,GAAuB,GAAnBhL,KAAKmsD,QAAQnhD,GACf,MAAOA,EAKX,OAAOhL,MAAKmsD,QAAQhnD,QAId4mD,EAAVpnD,UAAAmoD,kBAAA,SAA4B9pC,EAAeypC,GACvC,IAAK,GAAIzhD,GAAI,EAAGA,EAAIyhD,EAAKI,QAAS7hD,IAChChL,KAAKmsD,QAAQnpC,EAAQhY,GAAKyhD,EAAKW,SA7JrCrB,KAsKAgB,GAAA,WACE,QAAFA,GAAqBM,EAAoBC,GAApBttD,KAArBqtD,IAAqBA,EAAoBrtD,KAAzCstD,IAAyCA,EAvKzC,MAAAP,MCgBMQ,GAAsB,gCAO5BC,GAAA,wBAEExtD,KAAFytD,MAAkB,EAChBztD,KAAF0tD,SAAqB,EA1BrB,MAuCEF,GAAF7oD,UAAAgpD,KAAE,SAAKC,EAAoBzB,EAA0B0B,EAAc/+C,GAC/D9O,KAAK8tD,YAAcC,GAAeH,GAClC5tD,KAAKytD,MAAQtB,EAAQC,SACrBpsD,KAAK0tD,SAAWvB,EAAQiB,QACxBptD,KAAKguD,MAAQH,EACb7tD,KAAK64B,WAAa/pB,GAUpB0+C,EAAF7oD,UAAAspD,gBAAE,SAAgBC,EAAqBC,GAMnC,MAAO,IAAID,EAAf,QAAkCluD,KAAK8tD,YAAvC,MAAwDK,EAAxD,MAUEX,EAAF7oD,UAAAypD,gBAAE,SAAgBC,EAAkB/gC,GAGhC,MAAkB,KAAXA,EAAe,IAAMghC,GAAK,IAAID,EAAzC,MAAuDruD,KAAK8tD,YAA5D,OAA8ExgC,IAU5EkgC,EAAF7oD,UAAA4pD,YAAE,SAAYF,EAAkBG,GAC5B,MAAO,IAAIH,EAAf,MAA6BG,EAA7B,SAAyCA,EAAO,GAAhD,MAAuDxuD,KAAK8tD,YAA5D,KAUEN,EAAF7oD,UAAA8pD,SAAE,SAAShC,EAAmBR,EAAkByC,GAE5C,GAAIC,GAAsB,IAAM3uD,KAAKguD,MAIjCY,GAA8B5uD,KAAKguD,MAAQ,GAAKhuD,KAAKguD,KAEzDhuD,MAAK6uD,aAAapC,EAAMiC,EAAUC,EAAqBC,GACvD5uD,KAAK8uD,aAAarC,EAAMR,EAAU0C,EAAqBC,IAIzDpB,EAAF7oD,UAAAkqD,aAAE,SAAapC,EAAmBiC,EAAkBK,EACrCC,GAEX,GAAIC,GAAgBjvD,KAAKiuD,gBAAgBc,EAAcC,GAInDE,EAA2B,QAApBlvD,KAAK64B,WAAuB,QAAU,MACjD4zB,GAAK0C,UAAUD,EAAMlvD,KAAKouD,gBAAgBa,EAAeP,IACzDjC,EAAK0C,UAAU,QAASb,GAAKtuD,KAAKuuD,YAAYU,EAAexC,EAAKI,YAMpEW,EAAF7oD,UAAAyqD,cAAE,WACE,MAAUpvD,MAAK8tD,YAAnB,OAAqC9tD,KAAK0tD,SAA1C,SAOEF,EAAF7oD,UAAA0qD,YAAE,SAAYC,GACV,MAAUtvD,MAAK0tD,SAAnB,MAAiC1tD,KAAKuuD,YAAYe,EAAY,IAgB5D9B,EAAF7oD,UAAA4qD,kBAAE,WAA+C,MAAO,OAnJxD/B,KAmKAgC,GAAA,SAAA1vD,GAEE,QAAF0vD,GAAqBC,GAAnB,GAAF5vD,GAA+CC,EAA/CC,KAAAC,OAAAA,WAAqBH,GAArB4vD,eAAqBA,IArKrB,MAmKqC/qD,GAArC8qD,EAAA1vD,GAIE0vD,EAAF7qD,UAAAgpD,KAAE,SAAKC,EAAoBzB,EAA0B0B,EAAc/+C,GAI/D,GAHAhP,EAAJ6E,UAAUgpD,KAAV5tD,KAAAC,KAAe4tD,EAAYzB,EAAS0B,EAAM/+C,GACtC9O,KAAKyvD,eAAiB1B,GAAe/tD,KAAKyvD,iBAErClC,GAAoBmC,KAAK1vD,KAAKyvD,gBACjC,KAAMp7B,OAAM,kBAAkBr0B,KAAKyvD,eAAzC,wBAIED,EAAF7qD,UAAAmqD,aAAE,SAAarC,EAAmBR,GAC9BQ,EAAK0C,UAAU,MAAOnvD,KAAKouD,gBAAgBpuD,KAAKyvD,eAAgBxD,IAChEQ,EAAK0C,UAAU,SAAUb,GAAKtuD,KAAKuuD,YAAYvuD,KAAKyvD,eAAgBhD,EAAKW,YAG3EoC,EAAF7qD,UAAA4qD,kBAAE,WACE,OACE,SAAUjB,GAAQtuD,KAAKqvD,YAAYrvD,KAAKyvD,gBAA9C,MAAmEzvD,KAAKovD,mBAItEI,EAAF7qD,UAAAgrD,MAAE,SAAMC,GACJA,EAAKC,eAAe,SAAU,OAE1BD,EAAKE,QACPF,EAAKE,OAAO1lD,QAAQ,SAAAqiD,GAClBA,EAAK0C,UAAU,MAAO,MACtB1C,EAAK0C,UAAU,SAAU,SAjMjCK,GAmKqChC,IA0CrCuC,GAAA,SAAAjwD,GAME,QAAFiwD,GAAc9uD,GAAZ,GAAFpB,GACIC,EADJC,KAAAC,OAAAA,WAEIH,GAAKmwD,YAAY/uD,KArNrB,MA6MqCyD,GAArCqrD,EAAAjwD,GAWEiwD,EAAFprD,UAAAmqD,aAAE,SAAarC,EAAmBR,EAAkB8C,EACrCC,GACX,GAAIiB,GAAuBlB,EAAe/uD,KAAKkwD,cAC/ClwD,MAAKmwD,eAAiBnwD,KAAKiuD,gBAAgBgC,EAAsBjB,GAKjEvC,EAAK0C,UAAU,YAAanvD,KAAKouD,gBAAgBpuD,KAAKmwD,eAAgBlE,IACtEQ,EAAK0C,UAAU,aAAcb,GAAKtuD,KAAKuuD,YAAYvuD,KAAKmwD,eAAgB1D,EAAKW,YAG/E2C,EAAFprD,UAAA4qD,kBAAE,WACE,OACE,gBAAiBjB,GAAQtuD,KAAKqvD,YAAYrvD,KAAKmwD,gBAArD,MAA0EnwD,KAAKovD,mBAI7EW,EAAFprD,UAAAgrD,MAAE,SAAMC,GACJA,EAAKC,eAAe,gBAAiB,OAErCD,EAAKE,OAAO1lD,QAAQ,SAAAqiD,GAClBA,EAAK0C,UAAU,YAAa,MAC5B1C,EAAK0C,UAAU,aAAc,SAIzBY,EAAVprD,UAAAqrD,YAAA,SAAsB/uD,GAClB,GAAMmvD,GAAanvD,EAAMmiC,MAAM,IAE/B,IAA0B,IAAtBgtB,EAAWjrD,OACb,KAAMkvB,OAAM,uDAAuDpzB,EAAzE,IAGIjB,MAAKkwD,eAAiBzmC,WAAW2mC,EAAW,IAAM3mC,WAAW2mC,EAAW,KA1P5EL,GA6MqCvC,IAwDrC6C,GAAA,SAAAvwD,+DArQA,MAqQmC4E,GAAnC2rD,EAAAvwD,GACEuwD,EAAF1rD,UAAAmqD,aAAE,SAAarC,EAAmBR,GAE9B,GAAIgE,GAAuB,IAAMjwD,KAAK0tD,SAGlC4C,GAAuBtwD,KAAKytD,MAAQ,GAAKztD,KAAKytD,MAG9C0C,EAAiBnwD,KAAKiuD,gBAAgBgC,EAAsBK,EAEhE7D,GAAK0C,UAAU,MAAOnvD,KAAKouD,gBAAgB+B,EAAgBlE,IAC3DQ,EAAK0C,UAAU,SAAUb,GAAKtuD,KAAKuuD,YAAY4B,EAAgB1D,EAAKW,YAGtEiD,EAAF1rD,UAAAgrD,MAAE,SAAMC,GACAA,EAAKE,QACPF,EAAKE,OAAO1lD,QAAQ,SAAAqiD,GAClBA,EAAK0C,UAAU,MAAO,MACtB1C,EAAK0C,UAAU,SAAU,SAxRjCkB,GAqQmC7C,kBC3LjC,QAAF+C,GAAsBjsC,EACYlO,GADZpW,KAAtBskB,SAAsBA,EACYtkB,KAAlCoW,KAAkCA,EATlCpW,KAAAwwD,QAA4B,MAwB5B,MAZE/kD,QAAFC,eACM6kD,EADN5rD,UAAA,YAAE,WACqB,MAAO3E,MAAKguD,WACjC,SAAS/sD,GACPjB,KAAKguD,MAAQp8C,KAAKoK,IAAI,EAAGpK,KAAKic,MAAM7U,EAAAA,qBAAqB/X,sCAI3DwK,OAAFC,eACM6kD,EADN5rD,UAAA,kBAAE,WAC2B,MAAO3E,MAAKwwD,aACvC,SAAevvD,GAAiBjB,KAAKwwD,QAAU,IAAGvvD,GAAS,qCAG3DwK,OAAFC,eACM6kD,EADN5rD,UAAA,iBAAE,SACc1D,GACZ,GAAM+jC,GAAW,IAAG/jC,GAAS,GAEzB+jC,KAAahlC,KAAKywD,aACpBzwD,KAAKywD,WAAazrB,EAClBhlC,KAAK0wD,eAAe1wD,KAAKywD,8CAI7BF,EAAF5rD,UAAAwP,SAAE,WACEnU,KAAK2wD,aACL3wD,KAAK4wD,mBAOPL,EAAF5rD,UAAAwU,sBAAE,WACEnZ,KAAK6wD,gBAICN,EAAV5rD,UAAAgsD,sBACI,IAAK3wD,KAAK6tD,KACR,KAAMx5B,OAAM,qFAMRk8B,EAAV5rD,UAAAisD,2BACS5wD,KAAKywD,YACRzwD,KAAK0wD,eAAe,QAKhBH,EAAV5rD,UAAA+rD,eAAA,SAAyBI,GACjB9wD,KAAK+wD,aACP/wD,KAAK+wD,YAAYpB,MAAM3vD,MAnGR,QAsGb8wD,EACF9wD,KAAK+wD,YAAc,GAAIV,IACdS,GAAaA,EAAUjhD,QAAQ,MAAQ,EAChD7P,KAAK+wD,YAAc,GAAIhB,IAAgBe,GAEvC9wD,KAAK+wD,YAAc,GAAIvB,IAAgBsB,IAKnCP,EAAV5rD,UAAAksD,kCACS7wD,MAAKgxD,mBACRhxD,KAAKgxD,iBAAmB,GAAIjF,IAI9B,IAAMI,GAAUnsD,KAAKgxD,iBACfzE,EAAQvsD,KAAK8vD,OAAOxqD,OAAO,SAAAmnD,GAAQ,OAACA,EAAKwE,WAAaxE,EAAKwE,YAAcpxD,IACzEiP,EAAY9O,KAAKoW,KAAOpW,KAAKoW,KAAKnV,MAAQ,KAEhDjB,MAAKgxD,iBAAiB3E,OAAOrsD,KAAK6tD,KAAMtB,GACxCvsD,KAAK+wD,YAAYpD,KAAK3tD,KAAK4tD,WAAYzB,EAASnsD,KAAK6tD,KAAM/+C,GAE3Dy9C,EAAMniD,QAAQ,SAACqiD,EAAMniD,GACnB,GAAM+iB,GAAM8+B,EAAQp5C,UAAUzI,EAC9BzK,GAAKkxD,YAAYtC,SAAShC,EAAMp/B,EAAIggC,IAAKhgC,EAAIigC,OAG/CttD,KAAK6vD,cAAc7vD,KAAK+wD,YAAYxB,sBAItCgB,EAAF5rD,UAAAkrD,cAAE,SAAcj9C,GACRA,IACF5S,KAAKskB,SAAShkB,cAAcsS,MAAMA,EAAM,IAAMA,EAAM,oBAtI1D5T,KAACgH,EAAAA,UAADrE,OAAAwC,SAAA,gBACEvC,SAAU,cACVqE,SAAU,uCACVC,QAAF,gvCACE1H,MACFC,MAAA,iBAEA8I,YACAC,QAAA0pD,GACAzpD,YAAA8oD,IAEA1xD,gBAAAC,EAAAA,wBAAAC,OACAL,cAAAC,EAAAA,kBAAAC,yHAvBA2xD,EAAQlxD,mGAiDRuuD,aAAA5uD,KAAAO,EAAAA,QAMAuxD,YAAA9xD,KAAQO,EAAAA,SAYRgxD,iCC1FA,sBAiBAvxD,KAAC4D,EAAAA,SAADjB,OACEkB,SAAUwlD,GAAetlD,IACzBK,SACEmtD,GACA7E,GACAC,GACAtD,GACAtlD,GACA8oD,GACAC,GACAF,IAEFnoD,cACE8sD,GACA7E,GACAC,GACAE,GACAC,GACAF,QAnCJuF,KCsEAC,GAAA,WAME,QAAFA,GAAcvpD,GAGJ,EAAcqpC,SAClBlxC,KAAKqxD,WAAU,EAEfrxD,KAAKsxD,IAAG,EAlFd,MAAAF,oBA6HE,QAAFG,GACwBC,EACZC,EACsBjtD,GAFVxE,KAAxBwxD,YAAwBA,EACZxxD,KAAZyxD,WAAYA,EA1BZzxD,KAAA0xD,gBAA4B,GAAI94B,KAMhC54B,KAAA2xD,gBAA4B,GAAI/4B,KAGhC54B,KAAA4xD,kBAA8B,GAAIh5B,KAGlC54B,KAAA6xD,sBAAkC,GAAIj5B,KAGtC54B,KAAA8xD,uBAAmC,GAAIl5B,KAOvC54B,KAAA+xD,qBAAiC,iBAM3B/xD,KAAKyE,UAAYD,EAjIvB,MAyIE+sD,GAAF5sD,UAAAqtD,WAAE,SAAWC,EAAkBX,GAC3B,MAAOtxD,MAAKkyD,sBAAsB,GAAID,EAAUX,IAQlDC,EAAF5sD,UAAAwtD,kBAAE,SAAkBF,EAAkBG,GAClC,MAAOpyD,MAAKqyD,6BAA6B,GAAIJ,EAAUG,IASzDb,EAAF5sD,UAAAutD,sBAAE,SAAsBI,EAAmBL,EAAkBX,GACzD,MAAOtxD,MAAKuyD,kBAAkBD,EAAWL,EAAU,GAAIb,IAAcE,KASvEC,EAAF5sD,UAAA0tD,6BAAE,SAA6BC,EAAmBL,EAAkBG,GAChE,GAAMI,GAAmBxyD,KAAKyxD,WAAWgB,SAASC,EAAAA,gBAAgBC,KAAMP,EAExE,KAAKI,EACH,KAAMI,IAAuCR,EAG/C,IAAMf,GAAarxD,KAAK6yD,+BAA+BL,EACvD,OAAOxyD,MAAKuyD,kBAAkBD,EAAWL,EAAU,GAAIb,IAAcC,KAOvEE,EAAF5sD,UAAAmuD,cAAE,SAAcxB,GACZ,MAAOtxD,MAAK+yD,yBAAyB,GAAIzB,IAO3CC,EAAF5sD,UAAAquD,qBAAE,SAAqBZ,GACnB,MAAOpyD,MAAKizD,gCAAgC,GAAIb,IAQlDb,EAAF5sD,UAAAouD,yBAAE,SAAyBT,EAAmBhB,GAC1C,MAAOtxD,MAAKkzD,qBAAqBZ,EAAW,GAAIlB,IAAcE,KAQhEC,EAAF5sD,UAAAsuD,gCAAE,SAAgCX,EAAmBF,GACjD,GAAMI,GAAmBxyD,KAAKyxD,WAAWgB,SAASC,EAAAA,gBAAgBC,KAAMP,EAExE,KAAKI,EACH,KAAMI,IAAuCR,EAG/C,IAAMf,GAAarxD,KAAKmzD,sBAAsBX,EAC9C,OAAOxyD,MAAKkzD,qBAAqBZ,EAAW,GAAIlB,IAAcC,KAWhEE,EAAF5sD,UAAAyuD,uBAAE,SAAuBC,EAAe9W,GAEpC,WAFJ,KAAAA,IAAwCA,EAAxC8W,GACIrzD,KAAK8xD,uBAAuB34B,IAAIk6B,EAAO9W,GAChCv8C,MAOTuxD,EAAF5sD,UAAA2uD,sBAAE,SAAsBD,GACpB,MAAOrzD,MAAK8xD,uBAAuB/wD,IAAIsyD,IAAUA,GASnD9B,EAAF5sD,UAAA4uD,uBAAE,SAAuBhX,GAErB,MADAv8C,MAAK+xD,qBAAuBxV,EACrBv8C,MAOTuxD,EAAF5sD,UAAA6uD,uBAAE,WACE,MAAOxzD,MAAK+xD,sBAWdR,EAAF5sD,UAAA8uD,kBAAE,SAAkBC,GAAlB,GAAF7zD,GAAAG,KACUsxD,EAAMtxD,KAAKyxD,WAAWgB,SAASC,EAAAA,gBAAgBiB,aAAcD,EAEnE,KAAKpC,EACH,KAAMsC,IAAmCF,EAG3C,IAAMG,GAAa7zD,KAAK4xD,kBAAkB7wD,IAAIuwD,EAE9C,OAAIuC,GACKzjD,EAAAA,GAAa0jD,GAASD,IAGxB7zD,KAAK+zD,uBAAuB,GAAI3C,IAAcsC,IAAUzpD,KAC7D+pD,EAAAA,IAAI,SAAAC,GAAO,MAAAp0D,GAAK+xD,kBAAkBz4B,IAAG,EAAO86B,KAC5C7nD,EAAAA,IAAI,SAAA6nD,GAAO,MAAAH,IAASG,OAYxB1C,EAAF5sD,UAAAuvD,gBAAE,SAAgB3xC,EAAc+vC,OAAhC,KAAAA,IAAgCA,EAAhC,GAEI,IAAM/iD,GAAM4kD,GAAQ7B,EAAW/vC,GACzBkT,EAASz1B,KAAK0xD,gBAAgB3wD,IAAIwO,EAExC,IAAIkmB,EACF,MAAOz1B,MAAKo0D,kBAAkB3+B,EAIhC,IAAM4+B,GAAiBr0D,KAAK2xD,gBAAgB5wD,IAAIuxD,EAEhD,OAAI+B,GACKr0D,KAAKs0D,0BAA0B/xC,EAAM8xC,GAGvCE,EAAAA,WAAgBC,GAA4BjlD,KAM7CgiD,EAAV5sD,UAAAyvD,kBAAA,SAA4B3+B,GACxB,MAAIA,GAAO47B,WAEFjhD,EAAAA,GAAa0jD,GAASr+B,EAAO47B,aAG7BrxD,KAAK+zD,uBAAuBt+B,GAAQxrB,KACzC+pD,EAAAA,IAAI,SAAAC,GAAO,MAAAx+B,GAAO47B,WAAa4C,IAC/B7nD,EAAAA,IAAI,SAAA6nD,GAAO,MAAAH,IAASG,OAalB1C,EAAV5sD,UAAA2vD,0BAAA,SAAoC/xC,EAAc8xC,cAIxCI,EAAYz0D,KAAK00D,+BAA+BnyC,EAAM8xC,EAE5D,IAAII,EAIF,MAAOrkD,GAAAA,GAAaqkD,EAKtB,IAAME,GAAwDN,EAC3D/uD,OAAO,SAAAsvD,GAAiB,OAACA,EAAcvD,aACvCjlD,IAAI,SAAAwoD,GACH,MAAO/0D,GAAKg1D,0BAA0BD,GAAe3qD,KACnD6qD,EAAAA,WAAW,SAACC,GACV,GAAMzD,GAAMzxD,EAAK4xD,WAAWgB,SAASC,EAAAA,gBAAgBiB,aAAciB,EAActD,IAKjF,OADA3K,SAAQD,MAAM,yBAAyB4K,EAAnD,YAAkEyD,EAAIl/B,SACnDzlB,EAAAA,GAAa,UAO5B,OAAO4kD,GAAAA,SAASL,GAAsB1qD,KAAKmC,EAAAA,IAAI,WAC7C,GAAM6oD,GAAYp1D,EAAK60D,+BAA+BnyC,EAAM8xC,EAE5D,KAAKY,EACH,KAAMT,IAA4BjyC,EAGpC,OAAO0yC,OASH1D,EAAV5sD,UAAA+vD,+BAAA,SAAyCzC,EAAkBoC,GAGvD,IAAK,GAAIrpD,GAAIqpD,EAAelvD,OAAS,EAAG6F,GAAK,EAAGA,IAAK,CACnD,GAAMyqB,GAAS4+B,EAAerpD,EAC9B,IAAIyqB,EAAO47B,WAAY,CACrB,GAAM4D,GAAYj1D,KAAKk1D,uBAAuBz/B,EAAO47B,WAAYY,EACjE,IAAIgD,EACF,MAAOA,IAIb,MAAO,OAOD1D,EAAV5sD,UAAAovD,uBAAA,SAAiCt+B,aAC7B,OAAOz1B,MAAKm1D,UAAU1/B,EAAO67B,KACxBrnD,KAAKmC,EAAAA,IAAI,SAAAgpD,GAAW,MAAAv1D,GAAKgzD,+BAA+BuC,OAOvD7D,EAAV5sD,UAAAkwD,0BAAA,SAAoCp/B,aAEhC,OAAIA,GAAO47B,WACFjhD,EAAAA,GAAaqlB,EAAO47B,YAGtBrxD,KAAKm1D,UAAU1/B,EAAO67B,KAAKrnD,KAAKmC,EAAAA,IAAI,SAAAgpD,GAOzC,MAJK3/B,GAAO47B,aACV57B,EAAO47B,WAAaxxD,EAAKszD,sBAAsBiC,IAG1C3/B,EAAO47B,eAOVE,EAAV5sD,UAAAkuD,+BAAA,SAAyCwC,GACrC,GAAMpB,GAAMj0D,KAAKmzD,sBAAsBkC,EAEvC,OADAr1D,MAAKs1D,kBAAkBrB,GAChBA,GAQD1C,EAAV5sD,UAAAuwD,uBAAA,SAAiCK,EAAqBtD,GAClD,GAAMuD,GAAaD,EAAQpP,cAAc,IAAM8L,EAE/C,KAAKuD,EACH,MAAO,KAKT,IAAMC,GAAcD,EAAWE,WAAU,EAKzC,IAJAD,EAAYE,gBAAgB,MAIe,QAAvCF,EAAYvkB,SAASvhC,cACvB,MAAO3P,MAAKs1D,kBAAiB,EAM/B,IAA2C,WAAvCG,EAAYvkB,SAASvhC,cACvB,MAAO3P,MAAKs1D,kBAAkBt1D,KAAK41D,cAAcH,GAQnD,IAAMxB,GAAMj0D,KAAKmzD,sBAAsB,cAIvC,OAFAc,GAAIzuB,YAAYiwB,GAETz1D,KAAKs1D,kBAAkBrB,IAMxB1C,EAAV5sD,UAAAwuD,sBAAA,SAAgC0C,GAC5B,GAAMC,GAAM91D,KAAKyE,UAAU6gC,cAAc,MACzCwwB,GAAIC,UAAYF,CAChB,IAAM5B,GAAM6B,EAAI3P,cAAc,MAE9B,KAAK8N,EACH,KAAM5/B,OAAM,sBAGd,OAAO4/B,IAMD1C,EAAV5sD,UAAAixD,cAAA,SAAwBrjD,GAGpB,IAAK,GAFD0hD,GAAMj0D,KAAKmzD,sBAAsB,eAE5BnoD,EAAI,EAAGA,EAAIuH,EAAQlN,WAAWF,OAAQ6F,IACzCuH,EAAQlN,WAAW2F,GAAGtF,WAAa1F,KAAKyE,UAAUuxD,cACpD/B,EAAIzuB,YAAYjzB,EAAQlN,WAAW2F,GAAG0qD,WAAU,GAIpD,OAAOzB,IAMD1C,EAAV5sD,UAAA2wD,kBAAA,SAA4BrB,GAMxB,MALAA,GAAIgC,aAAa,MAAO,IACxBhC,EAAIgC,aAAa,SAAU,QAC3BhC,EAAIgC,aAAa,QAAS,QAC1BhC,EAAIgC,aAAa,sBAAuB,iBACxChC,EAAIgC,aAAa,YAAa,SACvBhC,GAOD1C,EAAV5sD,UAAAwwD,UAAA,SAAoBzB,aAChB,KAAK1zD,KAAKwxD,YACR,KAAM0E,KAGR,IAAe,MAAXxC,EACF,KAAMr/B,OAAM,+BAA+Bq/B,EAAjD,KAGI,IAAMpC,GAAMtxD,KAAKyxD,WAAWgB,SAASC,EAAAA,gBAAgBiB,aAAcD,EAEnE,KAAKpC,EACH,KAAMsC,IAAmCF,EAM3C,IAAMyC,GAAkBn2D,KAAK6xD,sBAAsB9wD,IAAIuwD,EAEvD,IAAI6E,EACF,MAAOA,EAKT,IAAMC,GAAMp2D,KAAKwxD,YAAYzwD,IAAIuwD,GAAM+E,aAAc,SAASpsD,KAC5DqsD,EAAAA,SAAS,WAAM,MAAAz2D,GAAKgyD,sBAAsBz4B,OAAOk4B,KACjDiF,EAAAA,QAIF,OADAv2D,MAAK6xD,sBAAsB14B,IAAIm4B,EAAK8E,GAC7BA,GASD7E,EAAV5sD,UAAA4tD,kBAAA,SAA4BD,EAAmBL,EAAkBx8B,GAE7D,MADAz1B,MAAK0xD,gBAAgBv4B,IAAIg7B,GAAQ7B,EAAWL,GAAWx8B,GAChDz1B,MAQDuxD,EAAV5sD,UAAAuuD,qBAAA,SAA+BZ,EAAmB78B,GAC9C,GAAM+gC,GAAkBx2D,KAAK2xD,gBAAgB5wD,IAAIuxD,EAQjD,OANIkE,GACFA,EAAgB5sD,KAAK6rB,GAErBz1B,KAAK2xD,gBAAgBx4B,IAAIm5B,GAAY78B,IAGhCz1B,qBA5eXhB,KAACgiB,EAAAA,WAADrf,OAAasQ,WAAY,+CArFzBjT,KAAQy3D,EAAAA,WAARh1D,aAAAzC,KAqHKsD,EAAAA,aA5GLtD,KAAQ03D,EAAAA,eA8GR13D,SAAAqD,GAAAZ,aAAAzC,KAAKsD,EAAAA,WAALtD,KAAiBuD,EAAAA,OAAjBZ,MAAwB0E,EAAAA,4LAhIxBkrD,KAwlBaoF,IAEXnvD,QAAS+pD,GACTpwC,OACG,GAAI7e,GAAAA,SAAY,GAAI8e,GAAAA,SAAYmwC,KAChC,GAAIjvD,GAAAA,SAAYm0D,EAAAA,YACjBC,EAAAA,cACC,GAAIp0D,GAAAA,SAAY+D,EAA+B,WAElDgb,WAAYu1C,ICtkBdC,GAAA,WACE,QAAFA,GAAqB32D,GAAAF,KAArBE,YAAqBA,EA5BrB,MAAA22D,MA8BaC,GACT5yD,EAAW2yD,mBAiFb,QAAFE,GACMzyD,EACQ0yD,EACkBC,GAH9B,GAAFp3D,GAIIC,EAJJC,KAAAC,KAIUsE,IAJVtE,WAEcH,GAAdm3D,cAAcA,EA1Bdn3D,EAAAq3D,SAA6B,EAgCpBD,GACH3yD,EAAWhE,cAAc21D,aAAa,cAAe,UAnB3D,MA1B6BvxD,GAA7BqyD,EAAAj3D,GAKE2L,OAAFC,eACMqrD,EADNpyD,UAAA,cAAE,WAEE,MAAO3E,MAAKk3D,aAEd,SAAWC,GACTn3D,KAAKk3D,QAAUj5C,EAAAA,sBAAsBk5C,oCAQvC1rD,OAAFC,eACMqrD,EADNpyD,UAAA,eAAE,WACwB,MAAO3E,MAAKo3D,cACpC,SAAYn2D,GACVjB,KAAKo3D,SAAWp3D,KAAKq3D,kBAAkBp2D,oCAKzCwK,OAAFC,eACMqrD,EADNpyD,UAAA,gBAAE,WACyB,MAAO3E,MAAKs3D,eACrC,SAAar2D,GACXjB,KAAKs3D,UAAYt3D,KAAKq3D,kBAAkBp2D,oCAiClC81D,EAAVpyD,UAAA4yD,eAAA,SAAyBtF,GACrB,IAAKA,EACH,OAAQ,GAAI,GAEd,IAAMuF,GAAQvF,EAAS7uB,MAAM,IAC7B,QAAQo0B,EAAMryD,QACZ,IAAK,GAAG,OAAQ,GAAIqyD,EAAM,GAC1B,KAAK,GAAG,MAAA,EACR,SAAS,KAAMnjC,OAAM,uBAAuB49B,EAAlD,OAIE8E,EAAFpyD,UAAAqP,YAAE,SAAY/O,GAAZ,GAAFpF,GAAAG,IAEI,IAAIiF,EAAR,QACM,GAAIjF,KAAKy3D,QAAS,CACT,GAAf/mD,GAAA1Q,KAAAu3D,eAAAv3D,KAAAy3D,SAAenF,EAAf5hD,EAAA,GAA0BuhD,EAA1BvhD,EAAA,EAEQ1Q,MAAKg3D,cAAc9C,gBAAgBjC,EAAUK,GAAWroD,KAAKC,EAAAA,KAAK,IAAIhF,UACpE,SAAA+uD,GAAO,MAAAp0D,GAAK63D,eAAezD,IAC3B,SAACc,GAAe,MAAApO,SAAQgR,IAAI,0BAA0B5C,EAAIl/B,eAG5D71B,MAAK43D,kBAIL53D,MAAK63D,kBACP73D,KAAK83D,0BAITf,EAAFpyD,UAAAwP,SAAE,WAGMnU,KAAK63D,kBACP73D,KAAK83D,0BAIDf,EAAVpyD,UAAAkzD,0BACI,OAAQ73D,KAAKy3D,SAGPV,EAAVpyD,UAAA+yD,eAAA,SAAyBzD,GACrBj0D,KAAK43D,kBAOL,KAAK,GAFCG,GAAY9D,EAAI+D,iBAAiB,SAE9BhtD,EAAI,EAAGA,EAAI+sD,EAAU5yD,OAAQ6F,IACpC+sD,EAAU/sD,GAAGnF,aAAe,GAG9B7F,MAAKE,YAAYI,cAAcklC,YAAYyuB,IAGrC8C,EAAVpyD,UAAAizD,4BAMI,IALA,GAAMK,GAA6Bj4D,KAAKE,YAAYI,cAChD43D,EAAaD,EAAc5yD,WAAWF,OAInC+yD,KAAc,CACnB,GAAM7tD,GAAQ4tD,EAAc5yD,WAAW6yD,EAIhB,KAAnB7tD,EAAM3E,UAAmD,QAAjC2E,EAAM6mC,SAASvhC,eACzCsoD,EAAcE,YAAY9tD,KAKxB0sD,EAAVpyD,UAAAmzD,kCACI,GAAK93D,KAAK63D,iBAAV,CAIA,GAAMO,GAAoBp4D,KAAKE,YAAYI,cACrC+3D,EAAer4D,KAAKs4D,QACtBt4D,KAAKg3D,cAAc1D,sBAAsBtzD,KAAKs4D,SAC9Ct4D,KAAKg3D,cAAcxD,wBAEnB6E,IAAgBr4D,KAAKu4D,wBACnBv4D,KAAKu4D,uBACPH,EAAK5yD,UAAU2Y,OAAOne,KAAKu4D,uBAEzBF,GACFD,EAAK5yD,UAAU4Y,IAAIi6C,GAErBr4D,KAAKu4D,sBAAwBF,GAG3Br4D,KAAKw4D,UAAYx4D,KAAKy4D,yBACpBz4D,KAAKy4D,wBACPL,EAAK5yD,UAAU2Y,OAAOne,KAAKy4D,wBAEzBz4D,KAAKw4D,UACPJ,EAAK5yD,UAAU4Y,IAAIpe,KAAKw4D,UAE1Bx4D,KAAKy4D,uBAAyBz4D,KAAKw4D,YAS/BzB,EAAVpyD,UAAA0yD,kBAAA,SAA4Bp2D,GACxB,MAAwB,gBAAVA,GAAqBA,EAAM6E,OAAOs9B,MAAM,KAAK,GAAKniC,kBA9LpEjC,KAACgH,EAAAA,UAADrE,OAAAsE,SAAA,4BACE9B,SAAU,WACVvC,SAAU,UACVsE,QAAF,spBACErE,QAAF,SACErD,MACF0I,KAAA,MACMzI,MAAN,WACIi6D,0BAAJ,UAEAh6D,cAAAC,EAAAA,kBAAAC,KACAC,gBAAAC,EAAAA,wBAAAC,6EA3DAC,KAAEyD,OAAFhB,aAAAzC,KAAA0D,EAAAA,UAAAf,MAAA,oBAsGAo1D,EAAA13D,iEAlCAi5D,UAAAt5D,KAAAO,EAAAA,QAUAi5D,WAAAx5D,KAAAO,EAAAA,SAWAw3D,mCCtGA,sBAaA/3D,KAAC4D,EAAAA,SAADjB,OACEkB,SAAUE,IACVK,SAAU2zD,GAASh0D,IACnBU,cAAeszD,QAhBjBrvC,KR8BAixC,GAAA,yBA9BA,MAAAA,MA+BarN,GACT3rD,EAAmBg5D,IAIvBC,GAAA,yBApCA,MAAAA,MAqCaC,GACTl5D,EAAmBi5D,+EAevB,MACgCl0D,GAAhC8jD,EAAA1oD,kBAdAd,KAACgH,EAAAA,UAADrE,OAAAwC,SAAA,eACEvC,SAAU,aACVpD,MACF0I,KAAA,aACMzI,MAAN,gBAEAwH,SAAA,4BACAC,QAAA;w/8BACErE,QAAF,iBACEnD,cAAFC,EAAAA,kBAAAC,KACEC,gBAAFC,EAAAA,wBAAAC,WAGAypD,OACAD,GAAA,SAAAzoD,gBAaA,MAAA,QAAAA,GAAAA,EAAAqM,MAAAnM,KAAA6M,YAAA7M,KAHA,MAVA0E,GAAA6jD,EAAAzoD,kGAEAmG,SAAA,4BACEzH,MAAQC,MAAS,YACjByH,QAAF;w/8BACErE,QAAF,iBACEnD,cAAFC,EAAAA,kBAAAC,KACEC,gBAAgBC,EAAAA,wBAAlBC,WAGAwpD,GACA+C,gCASA,+HAAA5C,iCAUA,yHAAAC,iCAUA,0HAAAC,KAGAH,GAAA,SAAA3oD,yDAkBAD,EAAA0rD,SAAAA,EAQA1rD,EAAA2rD,YAAA,EAAE3rD,EAAF2rD,aAAAD,CACkC,IAAlCh5C,GAA0C1S,EAA1C8kB,iBAOI,OAdJpS,GAAA2+B,UAAA,WAAqC3+B,EAArC2+B,SAAAvhC,gBASA4C,EAAmBk5C,aAAa;kHAKhC5rD,gBAIA4oD,EAAA9jD,UAAAqD,+FASE,gHAKA,8DAAFhJ,KAAAgH,EAAAA,UAAArE,OAAAwC,SAAA,yDACgBvC,SAAhB,cACApD,4BAlDAuqD,+BAAA,mBACAC,oCAAA,oBAEEnnD,QAAF,iBACAoE,SAAA,8aAEApH,gBAAAC,EAAAA,wBAAAC,WAIA0pD,EAAAzhC,eAAe,WAAf,QACAhoB,KAAA0I,EAAAA,aACA1I,KAAAwpD,GAAA/mD,aAAAzC,KAAAsD,EAAAA,sHAlGA2mD,QAAAjqD,KAAAw/B,EAAAA,aAAA78B,MAAAgnD,cF6BAO,GAAA,yBA5CA,MAAAA,MA6Cad,GACTzoD,EAAmBupD,IAGvBC,GAAA,yBAjDA,MAAAA,MAkDaC,GACTzpD,EAAmBwpD,IAGVlB,IACXzgD,QAAS04B,EAAAA,kBACTz4B,YAAayO,EAAAA,WAAW,WAAM,MAAAgyC,MAC9B9nB,OAAO,GAITipB,GAAA,WACE,QAAFA,GAEW96B,EAEA60B,GAFApjD,KAAXuuB,OAAWA,EAEAvuB,KAAXojD,OAAWA,EAlEX,MAAAiG,qBA0IE,QAAFlB,GAAsB7jC,EACAkiB,EAE2C8iB,GAH/D,GAAFzpD,GAIIC,EAJJC,KAAAC,OAAAA,WAAsBH,GAAtBykB,SAAsBA,EACAzkB,EAAtB2mC,gBAAsBA,EAE2C3mC,EAAjEypD,cAAiEA,EA3CjEzpD,EAAA6mC,WAAsB,EACtB7mC,EAAAgnC,WAAsB,EAUpBhnC,EAAF0pD,iBAAkD,UAkBlD,MAhCmC7kD,GAAnCyjD,EAAAroD,GAoBE2L,OAAFC,eACMy8C,EADNxjD,UAAA,gBAAE,WACiB,MAAO3E,MAAK6mC,WAAc7mC,KAAKspD,eAAiBtpD,KAAKspD,cAAc3oD,cACpF,SAAaM,GACX,GAAM+jC,GAAW/mB,EAAAA,sBAAsBhd,EAEnC+jC,KAAahlC,KAAK6mC,YACpB7mC,KAAK6mC,UAAY7B,EACjBhlC,KAAKwmC,gBAAgB3vB,iDAKzBpL,OAAFC,eACMy8C,EADNxjD,UAAA,gBAAE,WAC0B,MAAO3E,MAAKspD,cAAc1E,gBAAgByC,WAAWrnD,WAC/E,SAAaiB,GACX,GAAMomD,GAAappC,EAAAA,sBAAsBhd,EAErComD,KAAernD,KAAK0mC,YACtB1mC,KAAKwpD,aAAanC,GAClBrnD,KAAKspD,cAAcG,uDAWvBtB,EAAFxjD,UAAAwP,SAAE,WAAA,GAAFtU,GAAAG,KAMUonD,EAAcpnD,KAAK0mC,SAEzBl1B,SAAQC,UAAUC,KAAK,YACjB7R,EAAK6mC,WAAa0gB,KACpBvnD,EAAKklB,UAAW,EAChBllB,EAAK2mC,gBAAgB3vB,mBAK3BsxC,EAAFxjD,UAAAqD,mBAAE,WAGE,GAAI0hD,IAAc1pD,KAAK2pD,OAAQ3pD,KAAKskB,WAGtC6jC,EAAFxjD,UAAAsD,YAAE,WAAA,GAAFpI,GAAAG,IACQA,MAAK+kB,UAGPvT,QAAQC,UAAUC,KAAK,WAAM,MAAA7R,GAAKklB,UAAW,IAG/C/kB,KAAKspD,cAAcM,sBAAsB5pD,OAI3CmoD,EAAFxjD,UAAA08B,OAAE,WACErhC,KAAK+kB,UAAY/kB,KAAK+kB,UAIxBojC,EAAFxjD,UAAAmT,MAAE,WACE9X,KAAKskB,SAAShkB,cAAcwX,SAO9BqwC,EAAFxjD,UAAA+1C,SAAE,WACE,MAAO16C,MAAK6pD,MAAS7pD,KAAK6pD,MAAMvpD,cAAcuF,aAAe,GAAM,IAIrEsiD,EAAFxjD,UAAAujC,kBAAE,WACE,MAAOloC,MAAKW,UAAYX,KAAKmoC,eAAiBnoC,KAAKspD,cAAcnhB,eAGnEggB,EAAFxjD,UAAA6a,aAAE,WACOxf,KAAKW,WACRX,KAAKqhC,SAGLrhC,KAAKspD,cAAcr9B,iBAAiBjsB,QAIxCmoD,EAAFxjD,UAAAmlD,aAAE,WACE9pD,KAAKspD,cAAcS,kBAAkB/pD,OAGvCmoD,EAAFxjD,UAAAqlD,YAAE,WACEhqD,KAAKspD,cAAc1G,cAIrBuF,EAAFxjD,UAAAggB,gBAAE,WACE,MAAO3kB,MAAKskB,SAAShkB,eAIvB6nD,EAAFxjD,UAAA6kD,aAAE,SAAazkC,GACX,MAAIA,KAAa/kB,KAAK0mC,YAItB1mC,KAAK0mC,UAAY3hB,EAEbA,EACF/kB,KAAKspD,cAAc1E,gBAAgBV,OAAOlkD,MAE1CA,KAAKspD,cAAc1E,gBAAgBR,SAASpkD,MAG9CA,KAAKwmC,gBAAgB3vB,gBACd,IAQTsxC,EAAFxjD,UAAA2iC,cAAE,WACEtnC,KAAKwmC,gBAAgB3vB,+BA5KzB7X,KAACgH,EAAAA,UAADrE,OAAAwC,SAAA,kBACEvC,SAAU,gBACVC,QAAF,iBACErD,MACF0I,KAAA,SACMzI,MAAN,gCACIywB,UAAJ,iBACIC,SAAJ,gBACIhtB,UAAW,iBACX8nD,SAAJ,KACIC,iCAAJ,WACIlB,oCAAJ,mBACImB,uBAAJ,sBACIpoD,uBAAJ,uBAEAkE,SAAA,6gBACAvH,cAAAC,EAAAA,kBAAAC,KACEC,gBAAFC,EAAAA,wBAAAC,8FAvEAC,KAAEkpD,GAAFzmD,aAAAzC,KAAAuD,EAAAA,OAAAZ,MAAAuU,EAAAA,WAAA,WAAA,MAAAgyC,YAyHAC,EAAA9oD,kGAxCAsqD,SAAA3qD,KAAAoJ,EAAAA,gBAAAzG,MAAAyoD,MACAP,QAAA7qD,KAAGuV,EAAAA,UAAH5S,MAAA,UACA4nD,mBAAAvqD,KAAAO,EAAAA,QAGA0B,QAAAjC,KAAGO,EAAAA,QAGHoB,WAAA3B,KAAAO,EAAAA,QAGAwlB,WAAA/lB,KAAAO,EAAAA,SAeA4oD,sCAoJA,GAAAtoD,GAAAC,EAAAC,KAAAC,OAAAA,IAoDE,OAEFH,GAAAykB,SAAAA,iOAFAzkB,EAtCA,4DAUAkB,2KAWAI,YAAA,EACAC,cAAA,mGAuBAuZ,WACS6hC,gBAGT6N,cAAA,WAAA,OAAA,IACMrqD,KAANsqD,cACAtqD,KAAAuqD,sBAAAvqD,KAAAsqD,aAEQtqD,KAAKsqD,YAAb,MAGAtqD,KAAAwqD,cAAAxqD,KAAA4kD,gBAAA34C,SAAA/G,UAAA,SAAA5D,cAGA,IAAA,GAAAmpD,GAAA,EAA6B/5C,EAA7BpP,EAAA2iD,MAAAwG,EAAA/5C,EAAuDvL,OAAvDslD,IAAA,CACA,GAAA7N,GAAAlsC,EAAA+5C,EACA7N,GAAA73B,UAAA,EAEA,GAAAzjB,EAAA6iD,QACA,IAAA,GAAA5D,GAAA,EAAAE,EAAAn/C,EAAA6iD,QAAA5D,EAAAE,EAAAt7C,OAAAo7C,IAAA,CAEA,GAAA3D,GAAyB6D,EAAzBF,EACA3D,GAAA73B,UAAA,4aAgCA,GAAA2lC,GAAA1qD,KAAA6nD,gBAAAzE,gDAGAsH,EAAA,2CAGA,IAAaA,GAAb1qD,KAAAkpC,QAAA/jC,OAAA,GACAnF,KAAAiZ,YAAA0xC,uDAOA,GAAA9wC,GAAAvY,EAAAuY,QACUsrC,EAAUnlD,KAAKiZ,YACf2xC,EAAVzF,EAAAnH,0BACU,IAAV7jC,GAAAA,MAEA,IAAAD,GAAAA,MACAla,KAAA6qD,uBAEQvpD,EAARC,sBAEA,KAAAuY,GAAAA,KACA,IAAAE,GAAAA,IACAH,IAAAC,EAAAA,KAAAqrC,EAAAprC,qBAAAorC,EAAAlrC,oBACA3Y,EAAAC,gBACQ,MACR,KAAA8jD,GAAAA,EACA/jD,EAAAgkD,UACAtlD,KAAAkpC,QAAA5oB,KAAA,SAAA8iC,GAAA,OAAAA,EAAAr+B,WAAA/kB,KAAA8qD,YAAA9qD,KAAA+qD,cACYzpD,EAAMC,iBAElB,MACA,SACQ4jD,EAAR9qC,UAAA/Y,GAEAuY,IAAAkT,EAAAA,UAAAlT,IAAAoT,EAAAA,aAAA3rB,EAAAokD,UACAP,EAAAnH,kBAAA4M,GAEQ5qD,KAAR6qD,gFAOA7qD,KAAA2iD,UAAA3iD,KAAAgrD,iKAYAhrD,KAAAuqD,sBAAAU,OAGAjrD,KAAAsqD,YAAAW,6OAqBAjrD,MAAAkpC,QAAA9+B,QAAA,SAAAg5C,GAAA,MAAAA,GAAAoG,cAAA,2BAGA,GAAA/C,GAAwB5mD,EAAxBqpC,QAAA5oB,KAAA,SAAA8iC,uBAKAvjD,EAAAwvC,YAAAxvC,EAAAwvC,YAAA+T,EAAAniD,MAAAA,GAAAmiD,EAAAniD,QAAAA,IAGQwlD,IACRA,EAAA+C,cAAA,yQAiBQ,GAAR0B,GAA4BlrD,KAA5BkpC,QAAA3tB,UAAmD4vC,oBACzCD,EAAV7pB,oFAgBA,GAAA+pB,IAAA,mCAGAhI,EAAAoG,aAAAnC,KAEA+D,GAAyB,KAGzBA,GACAprD,KAAAypD,kLAkBAvB,EAAAzmD,+FAnSAI,QAAA,WAAA,gBAAA,YACErD,MACF0I,KAAA,UACAuoB,aAAA,WACAhxB,MAAA,qBACMywB,UAAN,UACIC,SAAJ,eACIC,YAAJ,mBACIi8B,uBAAJ,OACItpD,uBAAJ,uBAEAkE,SAAA,4BACAC,QAAA;w/8BACAxH,cAAAC,EAAAA,kBAAAC,KACA2I,WAAA0gD,IACEppD,gBAAFC,EAAAA,wBAAAC,WAIAmpD,EAAAlhC,eAAA,WAAA,QACAhoB,KAAA0I,EAAAA,gGA9PAwhC,UAAAlqC,KAAYoJ,EAAAA,gBAAZzG,MAAAwmD,MAqTA3Y,kBAAAxwC,KAAAyY,EAAAA,gEA/CA9W,WAAA3B,KAAAO,EAAAA,SAOA2oD,GAOAE,gCCxSA,sBA4BAppD,KAAC4D,EAAAA,SAADjB,OACEkB,SAAUwlD,GAAeplD,GAAiBF,GAAiBulD,GAAyBxlD,EAAAA,cACpFM,SACEmlD,GACAC,GACAC,GACAC,GACAL,GACAtlD,GACA4lD,GACAC,GACAN,GACAJ,GACAC,GACAU,IAEFplD,cACE8kD,GACAC,GACAC,GACAC,GACAC,GACAC,GACAV,GACAC,QApDJW,mBTmCE,QAAF9P,GACYE,EACAG,EACAC,EACAtkB,EACAxhB,EACkB/O,GALlBzE,KAAZk5C,UAAYA,EACAl5C,KAAZq5C,0BAAYA,EACAr5C,KAAZs5C,QAAYA,EACAt5C,KAAZg1B,UAAYA,EACAh1B,KAAZwT,kBAAYA,EACkBxT,KAA9ByE,UAA8BA;iBAR5BzE,KAAF+4C,UAAc,GAAInlC,GAAAA,QAjClB,MA+CEolC,GAAFr0C,UAAAkR,OAAE,SAAOojC,OAAT,KAAAA,IAASA,MACAj5C,KAAKqyC,UACRryC,KAAKqyC,QAAU,GAAIj+B,GAAAA,eAAepU,KAAKk5C,UAAWl5C,KAAKwT,oBAGzDxT,KAAKgW,SAEAhW,KAAKm5C,UACRn5C,KAAKm5C,QAAU,GAAIC,GAAAA,gBAAgBp5C,KAAKyE,UAAU6gC,cAAc,OAC5DtlC,KAAKq5C,0BAA2Br5C,KAAKs5C,QAASt5C,KAAKg1B,WAGzD,IAAMziB,GAAuBvS,KAAKk5C,UAAU50C,WAAWhE,aAKvDiS,GAAkB,WAAEgnC,aAAav5C,KAAKm5C,QAAQK,cAAejnC,GAC7DvS,KAAKqyC,QAAQx8B,OAAO7V,KAAKm5C,QAASF,GAClCj5C,KAAK+4C,UAAUptC,QAOjBqtC,EAAFr0C,UAAAqR,OAAE,WACMhW,KAAKqyC,QAAQoH,YACfz5C,KAAKqyC,QAAQr8B,UAIjBgjC,EAAFr0C,UAAAsD,YAAE,WACMjI,KAAKm5C,SACPn5C,KAAKm5C,QAAQjnB,0BAxDnBlzB,KAAC0C,EAAAA,UAADC,OACEwC,SAAU,sEAhBZnF,KAAEmU,EAAAA,cACFnU,KAAEiX,EAAAA,2BACFjX,KAAE06C,EAAAA,iBACF16C,KAAEs5B,EAAAA,WACFt5B,KAAEyH,EAAAA,mBA2BFzH,SAAAqD,GAAAZ,aAAAzC,KAAKuD,EAAAA,OAALZ,MAAY0E,EAAAA,eAzCZ2yC,KCyBaW,IAYXC,cAAehlC,EAAAA,QAAQ,iBACrBC,EAAAA,MAAM,OAAQjC,EAAAA,OACZugB,QAAS,EACTre,UAAW,gBAEbE,EAAAA,WAAW,gBAAiBu2B,EAAAA,OAC1B5qB,EAAAA,MAAM,oBAAqB1L,EAAAA,QAAQ,eAAgBrC,EAAAA,OAAOugB,QAAS,MACnEle,EAAAA,QAAQ,mCAAoCrC,EAAAA,OAAOkC,UAAW,iBAEhEE,EAAAA,WAAW,YAAaC,EAAAA,QAAQ,oBAAqBrC,EAAAA,OAAOugB,QAAS,QAQvE0mB,YAAajlC,EAAAA,QAAQ,eAGnBC,EAAAA,MAAM,UAAWjC,EAAAA,OAAOugB,QAAS,KACjCne,EAAAA,WAAW,aACTpC,EAAAA,OAAOugB,QAAS,IAChBle,EAAAA,QAAQ,qDAUD4kC,GAAcF,GAAkBE,YAOhCD,GAAgBD,GAAkBC,cC3DlCE,GAAiB,GAAI9nC,GAAAA,eAA6B,kBCY/D+nC,GAAA,yBA9BA,MAAAA,MA+BaC,GACTr6C,EAAmBC,EAAcm6C,oBAwCnC,QAAFE,GACY/5C,EACUsE,EACVrE,EACoC+5C,GAJ9C,GAAFr6C,GAOIC,EAAJC,KAAAC,OAAAA,WANYH,GAAZK,YAAYA,EAEAL,EAAZM,cAAYA,EACoCN,EAAhDq6C,YAAgDA,EAZ9Cr6C,EAAFs6C,SAA4C,GAAIvmC,GAAAA,QAG9C/T,EAAFu6C,cAA0B,EAGxBv6C,EAAFw6C,kBAA8B,EAWtBl6C,GAIFA,EAAcW,QAAQjB,EAAKK,aAAa,GAGtCg6C,GAAeA,EAAYI,SAC7BJ,EAAYI,QAAQz6C,GAGtBA,EAAK4E,UAAYD,IAhBrB,MAlBiCE,GAAjCu1C,EAAAn6C,GAsCEm6C,EAAFt1C,UAAAmT,MAAE,SAAMhE,OAAR,KAAAA,IAAQA,EAAR,WACQ9T,KAAKG,cACPH,KAAKG,cAAck7B,SAASr7B,KAAK2kB,kBAAmB7Q,GAEpD9T,KAAK2kB,kBAAkB7M,SAI3BmiC,EAAFt1C,UAAAsD,YAAE,WACMjI,KAAKG,eACPH,KAAKG,cAAckB,eAAerB,KAAKE,aAGrCF,KAAKk6C,aAAel6C,KAAKk6C,YAAYK,YACvCv6C,KAAKk6C,YAAYK,WAAWv6C,MAG9BA,KAAKm6C,SAASjmC,YAIhB+lC,EAAFt1C,UAAAgb,aAAE,WACE,MAAO3f,MAAKW,SAAW,KAAO,KAIhCs5C,EAAFt1C,UAAAggB,gBAAE,WACE,MAAO3kB,MAAKE,YAAYI,eAI1B25C,EAAFt1C,UAAA61C,eAAE,SAAel5C,GACTtB,KAAKW,WACPW,EAAMC,iBACND,EAAMq5B,oBAKVsf,EAAFt1C,UAAA81C,kBAAE,WACEz6C,KAAKm6C,SAASxuC,KAAK3L,OAIrBi6C,EAAFt1C,UAAA+1C,SAAE,WACE,GAAMnoC,GAAuBvS,KAAKE,YAAYI,cACxCq6C,EAAe36C,KAAKyE,UAAYzE,KAAKyE,UAAUm2C,UAAY,EAC7DC,EAAS,EAEb,IAAItoC,EAAQlN,WAMV,IAAK,GALCy1C,GAASvoC,EAAQlN,WAAWF,OAKzB6F,EAAI,EAAGA,EAAI8vC,EAAQ9vC,IACtBuH,EAAQlN,WAAW2F,GAAGtF,WAAai1C,IACrCE,GAAUtoC,EAAQlN,WAAW2F,GAAGnF,YAKtC,OAAOg1C,GAAO/0C,uBAxHlB9G,KAACgH,EAAAA,UAADrE,OAAAwC,SAAA,kBACEvC,SAAU,cACVC,QAAF,WAAA,iBACErD,MACF0I,KAAA,WACMzI,MAAN,gBACIs8C,oCAAJ,eACIC,wCAAJ,mBACIzY,kBAAJ,iBACIxgC,uBAAJ,sBACIk5C,kBAAmB,mBACnB94C,UAAJ,yBACI+gB,eAAJ,uBAEArkB,gBAAAC,EAAAA,wBAAyCC,OACzCL,cAAAC,EAAAA,kBAAAC,KACEqH,SAAF,yRA1CAjH,KAAE2D,EAAAA,eA8DF3D,SAAAqD,GAAAZ,aAAAzC,KAAKuD,EAAAA,OAALZ,MAAYm4C,MAAZ96C,KAAAsD,EAAAA,cAEA23C,OCdaiB,GACT,GAAIlpC,GAAAA,eAAsC,4BACxCC,WAAY,OACZC,QAASipC,mBAqKb,QAAFC,GACYl7C,EACAkS,EACkCq+B,GAFlCzwC,KAAZE,YAAYA,EACAF,KAAZoS,QAAYA,EACkCpS,KAA9CywC,gBAA8CA,EAnI9CzwC,KAAAq7C,WAAsCr7C,KAAKywC,gBAAgB6K,UAC3Dt7C,KAAAu7C,WAAsCv7C,KAAKywC,gBAAgB+K,UAI3Dx7C,KAAAy7C,UAGAz7C,KAAA07C,aAAyB,GAAI9nC,GAAAA,QAG7B5T,KAAA27C,iBAA6BttC,EAAAA,aAAaC,MAGxCtO,KAAF47C,cAGE57C,KAAF67C,qBAA2C,OAGzC77C,KAAFg1C,eAAmB,GAAIphC,GAAAA,QAYrB5T,KAAF87C,cAAmC97C,KAAKywC,gBAAgBqL,cA8CxD97C,KAAA+7C,gBAAqC/7C,KAAKywC,gBAAgBuL,eAQ1Dh8C,KAAAi8C,aAA8Cj8C,KAAKywC,gBAAgByL,YAgCjEl8C,KAAFwxB,OACM,GAAIhb,GAAAA,aAORxW,KAAF06B,MAAoB16B,KAAKwxB,OAAzB,MA3FE/lB,QAAFC,eACM0vC,EADNz2C,UAAA,iBAAE,WACiC,MAAO3E,MAAKq7C,gBAC7C,SAAcp6C,GACE,WAAVA,GAAgC,UAAVA,GACxBk7C,KAEFn8C,KAAKq7C,WAAap6C,EAClBjB,KAAKo8C,sDAIP3wC,OAAFC,eACM0vC,EADNz2C,UAAA,iBAAE,WACiC,MAAO3E,MAAKu7C,gBAC7C,SAAct6C,GACE,UAAVA,GAA+B,UAAVA,GACvBo7C,KAEFr8C,KAAKu7C,WAAat6C,EAClBjB,KAAKo8C,sDAoBP3wC,OAAFC,eACM0vC,EADNz2C,UAAA,sBAAE,WACgC,MAAO3E,MAAK+7C,qBAC5C,SAAmB96C,GACjBjB,KAAK+7C,gBAAkB99B,EAAAA,sBAAsBhd,oCAK/CwK,OAAFC,eACM0vC,EADNz2C,UAAA,mBAAE,WACyC,MAAO3E,MAAKi8C,kBACrD,SAAgBh7C,GACdjB,KAAKi8C,aAAeh+B,EAAAA,sBAAsBhd,oCAU5CwK,OAAFC,eACM0vC,EADNz2C,UAAA,kBAAE,SACe23C,GACTA,GAAWA,EAAQn3C,SACrBnF,KAAK47C,WAAaU,EAAQlZ,MAAM,KAAK1zB,OAAO,SAACuB,EAAUsrC,GAErD,MADAtrC,GAAIsrC,IAAa,EACVtrC,OAGTjR,KAAKE,YAAYI,cAAci8C,UAAY,qCAW/C9wC,OAAFC,eACM0vC,EADNz2C,UAAA,iBAAE,WAC0B,MAAO3E,MAAKm0B,gBACtC,SAAcmoB,GAAmBt8C,KAAKm0B,WAAamoB,mCAkBnDlB,EAAFz2C,UAAAwP,SAAE,WACEnU,KAAKo8C,sBAGPhB,EAAFz2C,UAAAqD,mBAAE,WAAA,GAAFnI,GAAAG,IACIA,MAAKiZ,YAAc,GAAIwB,GAAAA,gBAA6Bza,KAAKy7C,QAAQ9gC,WAAW6hC,gBAC5Ex8C,KAAK27C,iBAAmB37C,KAAKiZ,YAAYwjC,OAAOv3C,UAAU,WAAM,MAAArF,GAAK2xB,OAAOra,KAAK,UAGnFikC,EAAFz2C,UAAAsD,YAAE,WACEjI,KAAK27C,iBAAiB3qC,cACtBhR,KAAKwxB,OAAOtd,YAIdknC,EAAFz2C,UAAAw1C,SAAE,WACE,MAAOn6C,MAAK07C,aAAazxC,KACvBuL,EAAAA,UAAUxV,KAAKy7C,QACfiB,EAAAA,UAAU,SAAAC,GAAS,MAAAzwC,GAAAA,MAFzBC,UAAA,GAEkCwwC,EAAMvwC,IAAI,SAAAwwC,GAAQ,MAAAA,GAAKzC,gBAKvDiB,EAAFz2C,UAAAiV,eAAE,SAAetY,GACb,GAAMuY,GAAUvY,EAAMuY,OAEtB,QAAQA,GACN,IAAK44B,GAAAA,OACHzyC,KAAKwxB,OAAOra,KAAK,WACjB7V,EAAMq5B,iBACR,MACA,KAAK7N,GAAAA,WACC9sB,KAAK68C,YAAiC,QAAnB78C,KAAK8O,WAC1B9O,KAAKwxB,OAAOra,KAAK,UAErB,MACA,KAAK6V,GAAAA,YACChtB,KAAK68C,YAAiC,QAAnB78C,KAAK8O,WAC1B9O,KAAKwxB,OAAOra,KAAK,UAErB,MACA,SACM0C,IAAYkT,EAAAA,UAAYlT,IAAYoT,EAAAA,YACtCjtB,KAAKiZ,YAAY6jC,eAAe,YAGlC98C,KAAKiZ,YAAYoB,UAAU/Y,KAQjC85C,EAAFz2C,UAAAo4C,eAAE,SAAejpC,GAAf,GAAFjU,GAAAG,SAAA,KAAA8T,IAAiBA,EAAjB,WAEQ9T,KAAKg9C,YACPh9C,KAAKoS,QAAQ6qC,SAAS5qB,eACnBpoB,KAAKC,EAAAA,KAAK,IACVhF,UAAU,WAAM,MAAArF,GAAKoZ,YAAY6jC,eAAehpC,GAAQiG,uBAE3D/Z,KAAKiZ,YAAY6jC,eAAehpC,GAAQiG,sBAQ5CqhC,EAAFz2C,UAAAu4C,gBAAE,WACEl9C,KAAKiZ,YAAYoC,eAAe,IAOlC+/B,EAAFz2C,UAAAw4C,aAAE,SAAaC,GAEX,GAAMC,GAAe,mBAzOO,EAyOqCD,GAC3DE,EAAkB7xC,OAAOgE,KAAKzP,KAAK47C,YAAYt7B,KAAK,SAAAi9B,GAAK,MAAAA,GAAEC,WAAW,oBAEvEF,IAAmBA,IAAoBt9C,KAAKy9C,qBAC3Cz9C,KAAKy9C,qBACPz9C,KAAK47C,WAAW57C,KAAKy9C,qBAAsB,GAG7Cz9C,KAAK47C,WAAWyB,IAAgB,EAChCr9C,KAAKy9C,mBAAqBJ,IAQ9BjC,EAAFz2C,UAAA21C,QAAE,SAAQsC,IAM6B,IAA/B58C,KAAKy7C,OAAO5rC,QAAQ+sC,KACtB58C,KAAKy7C,OAAO7xC,KAAKgzC,GACjB58C,KAAK07C,aAAa/vC,KAAK3L,KAAKy7C,UAQhCL,EAAFz2C,UAAA41C,WAAE,SAAWqC,GACT,GAAMtyC,GAAQtK,KAAKy7C,OAAO5rC,QAAQ+sC,EAE9B58C,MAAKy7C,OAAO5rC,QAAQ+sC,IAAS,IAC/B58C,KAAKy7C,OAAOnqC,OAAOhH,EAAO,GAC1BtK,KAAK07C,aAAa/vC,KAAK3L,KAAKy7C,UAWhCL,EAAFz2C,UAAAy3C,mBAAE,SAAmBsB,EAAsCC,OAA3D,KAAAD,IAAqBA,EAAsB19C,KAAKs7C,eAAhD,KAAAqC,IAA2DA,EAAsB39C,KAAKw7C,UAClF,IAAMc,GAAUt8C,KAAK47C,UACrBU,GAAQ,mBAA8B,WAAToB,EAC7BpB,EAAQ,kBAA6B,UAAToB,EAC5BpB,EAAQ,kBAA6B,UAATqB,EAC5BrB,EAAQ,kBAA6B,UAATqB,GAI9BvC,EAAFz2C,UAAAi5C,gBAAE,WAEE59C,KAAK67C,qBAAuB,SAI9BT,EAAFz2C,UAAAk5C,gBAAE,WAEE79C,KAAK67C,qBAAuB,QAI9BT,EAAFz2C,UAAAm5C,iBAAE,SAAiBx8C,GACftB,KAAKg1C,eAAerpC,KAAKrK,GACzBtB,KAAK+9C,cAAe,EAQE,UAAlBz8C,EAAM4V,SAA4D,IAArClX,KAAKiZ,YAAY+kC,kBAChD18C,EAAMiR,QAAQ0rC,UAAY,mBAvThCj/C,KAACgH,EAAAA,UAADrE,OAAAwC,SAAA,WACE8B,SAAU,wXACVC,QAAF,mzDACErH,gBAAFC,EAAAA,wBAAAC,OACEL,cAAFC,EAAAA,kBAAAC,KACEgD,SAAF,UACE4V,YACFmiC,GAAAC,cACAD,GAAAE,aAEAtyC,YACAC,QAAAsyC,GAAAryC,YAAA2zC,gFA7EAp8C,SAAEqD,GAAFZ,aAAAzC,KAAAuD,EAAAA,OAAAZ,MAAAu5C,SAuNAE,EAAA/7C,0EAnGAm8C,YAAAx8C,KAAAO,EAAAA,QAGA6lB,cAAApmB,KAAAuV,EAAAA,UAAA5S,MAAAwR,EAAAA,eAWAwpC,QAAA39C,KAAAoJ,EAAAA,gBAAAzG,MAAAs4C,MAWA+C,cAAAh+C,KAAGw/B,EAAAA,aAAH78B,MAAAq3C,MAOAgD,iBAAAh9C,KAAAO,EAAAA,QAMA28C,cAAAl9C,KAAGO,EAAAA,QAGH40B,aAAAn1B,KAAAO,EAAAA,MAAAoC,MAAA,WAQA6D,YAAAxG,KAAAO,EAAAA,QAaAiyB,SAAAxyB,KAAAyY,EAAAA,SAmBAijB,QAAA17B,KAAAyY,EAAAA,UAaA2jC,KCxLa8C,GACT,GAAIlsC,GAAAA,eAAqC,4BAQhCmsC,IACX32C,QAAS02C,GACT/8B,MAAOiX,EAAAA,SACP/W,WAAY+8B,kBA2EZ,QAAFC,GAAsBvpB,EACAxQ,EACA9Q,EACkCg9B,EACtB0J,EACQoE,EACRloC,EAGZjW,GATAH,KAAtB80B,SAAsBA,EACA90B,KAAtBskB,SAAsBA,EACAtkB,KAAtBwT,kBAAsBA,EACkCxT,KAAxDwwC,gBAAwDA,EACtBxwC,KAAlCk6C,YAAkCA,EACQl6C,KAA1Cs+C,kBAA0CA,EACRt+C,KAAlCoW,KAAkCA,EAGZpW,KAAtBG,cAAsBA,EA3DtBH,KAAA+wB,YAA2C,KAC3C/wB,KAAAu+C,WAA+B,EAC/Bv+C,KAAAw+C,mBAA+BnwC,EAAAA,aAAaC,MAC5CtO,KAAAy+C,mBAA+BpwC,EAAAA,aAAaC,MAI5CtO,KAAA0+C,gBAAoC,EAsBlC1+C,KAAF2+C,WAAsD,GAAInoC,GAAAA,aAQxDxW,KAAF4+C,WAAsD5+C,KAAK2+C,WAGzD3+C,KAAF6+C,WAAsD,GAAIroC,GAAAA,aAQxDxW,KAAF8+C,YAAuD9+C,KAAK6+C,WAapDP,IACFA,EAAkBjE,iBAAmBr6C,KAAK++C,mBA/IhD,MA8FEtzC,QAAFC,eACM2yC,EADN15C,UAAA,oCAAE,WAEE,MAAO3E,MAAKg/C,UAGd,SAAiCjjC,GAC/B/b,KAAKg/C,KAAOjjC,mCA+CdsiC,EAAF15C,UAAAqD,mBAAE,WAAA,GAAFnI,GAAAG,IACIA,MAAKi/C,aAELj/C,KAAKg/C,KAAKtkB,MAAMx1B,UAAU,SAAAg6C,GACxBr/C,EAAKs/C,eAGW,UAAXD,GAAiC,QAAXA,IAAqBr/C,EAAKq6C,aACnDr6C,EAAKq6C,YAAY1oB,OAAOra,KAAK+nC,KAIjCl/C,KAAKo/C,gBAGPf,EAAF15C,UAAAsD,YAAE,WACMjI,KAAK+wB,cACP/wB,KAAK+wB,YAAYmB,UACjBlyB,KAAK+wB,YAAc,MAGrB/wB,KAAKq/C,yBAIP5zC,OAAFC,eAAM2yC,EAAN15C,UAAA,gBAAE,WACE,MAAO3E,MAAKu+C,2CAId9yC,OAAFC,eAAM2yC,EAAN15C,UAAA,WAAE,WACE,MAAO3E,MAAKoW,MAA4B,QAApBpW,KAAKoW,KAAKnV,MAAkB,MAAQ,uCAI1Do9C,EAAF15C,UAAAo6C,gBAAE,WACE,SAAU/+C,KAAKs+C,oBAAqBt+C,KAAKk6C,cAI3CmE,EAAF15C,UAAA26C,WAAE,WACE,MAAOt/C,MAAKu+C,UAAYv+C,KAAKu/C,YAAcv/C,KAAKw/C,YAIlDnB,EAAF15C,UAAA66C,SAAE,WAAA,GAAF3/C,GAAAG,IACI,KAAIA,KAAKu+C,UAAT,CAIAv+C,KAAKi/C,YAEL,IAAMhpB,GAAaj2B,KAAK42B,gBACxB52B,MAAKy/C,aAAaxpB,EAAWud,YAAiE,kBAC9Fvd,EAAWpgB,OAAO7V,KAAKqyC,SAEnBryC,KAAKg/C,KAAKhC,aACZh9C,KAAKg/C,KAAKhC,YAAYnnC,OAAO7V,KAAK0/C,UAGpC1/C,KAAKw+C,mBAAqBx+C,KAAK2/C,sBAAsBz6C,UAAU,WAAM,MAAArF,GAAK0/C,cAC1Ev/C,KAAK4/C,YAED5/C,KAAKg/C,eAAgB5D,KACvBp7C,KAAKg/C,KAAKpB,oBAKdS,EAAF15C,UAAA46C,UAAE,WACEv/C,KAAKg/C,KAAKtkB,MAAMvjB,QAOlBknC,EAAF15C,UAAAmT,MAAE,SAAMhE,OAAR,KAAAA,IAAQA,EAAR,WACQ9T,KAAKG,cACPH,KAAKG,cAAck7B,SAASr7B,KAAKskB,SAAUxQ,GAE3C9T,KAAKskB,SAAShkB,cAAcwX,SAKxBumC,EAAV15C,UAAAw6C,kCACI,IAAKn/C,KAAK+wB,aAAgB/wB,KAAK6/C,SAA/B,CAIA,GAAMb,GAAOh/C,KAAKg/C,IAElBh/C,MAAKw+C,mBAAmBxtC,cACxBhR,KAAK+wB,YAAY/a,SAEbgpC,YAAgB5D,KAClB4D,EAAKnB,kBAEDmB,EAAKhC,YAEPgC,EAAKhK,eACF/qC,KACC3E,EAAAA,OAAO,SAAAhE,GAAS,MAAkB,SAAlBA,EAAM4V,UACtBhN,EAAAA,KAAK,GAEL2Q,EAAAA,UAAUmkC,EAAKhC,YAAYjE,YAE5B7zC,UAAU,WAArB,MAA2B85C,GAAgB,YAAEhpC,cAAU3T,GAAW,WAEtDxC,EAAKigD,eAGT9/C,KAAK8/C,eAGP9/C,KAAK8/C,aAEDd,EAAKhC,aACPgC,EAAKhC,YAAYhnC,YASfqoC,EAAV15C,UAAAi7C,qBACI5/C,KAAKg/C,KAAKnC,WAAa78C,KAAK++C,kBAAoB/+C,KAAKk6C,gBAAc73C,GACnErC,KAAKg/C,KAAKlwC,UAAY9O,KAAK2W,IAC3B3W,KAAK+/C,oBACL//C,KAAKggD,gBAAe,GACpBhgD,KAAKg/C,KAAKjC,eAAe/8C,KAAK0+C,eAAiB,QAAU,YAInDL,EAAV15C,UAAAo7C,6BACI,GAAI//C,KAAKg/C,KAAK7B,aAAc,CAI1B,IAHA,GAAIC,GAAQ,EACRP,EAAa78C,KAAKg/C,KAAKnC,WAEpBA,GACLO,IACAP,EAAaA,EAAWA,UAG1B78C,MAAKg/C,KAAK7B,aAAaC,KAQnBiB,EAAV15C,UAAAm7C,sBACI9/C,KAAKggD,gBAAe,GAKfhgD,KAAK0+C,eAIE1+C,KAAK++C,mBACf/+C,KAAK8X,MAAM,SAFX9X,KAAK8X,QAKP9X,KAAK0+C,gBAAiB,GAIhBL,EAAV15C,UAAAq7C,eAAA,SAAyBvkB,GACrBz7B,KAAKu+C,UAAY9iB,EACjBz7B,KAAKu+C,UAAYv+C,KAAK2+C,WAAWxnC,OAASnX,KAAK6+C,WAAW1nC,OAEtDnX,KAAK++C,oBACP/+C,KAAKs+C,kBAAkBlE,aAAe3e,IAQlC4iB,EAAV15C,UAAAs6C,sBACSj/C,KAAKg/C,MACRiB,MAQI5B,EAAV15C,UAAAiyB,0BACI,IAAK52B,KAAK+wB,YAAa,CACrB/wB,KAAKqyC,QAAU,GAAIj+B,GAAAA,eAAepU,KAAKg/C,KAAK55B,YAAaplB,KAAKwT,kBAC9D,IAAMiiB,GAASz1B,KAAKkgD,mBACpBlgD,MAAKmgD,sBAAsB1qB,EAA4D,kBACvFz1B,KAAK+wB,YAAc/wB,KAAK80B,SAASqD,OAAO1C,GAG1C,MAAOz1B,MAAK+wB,aAONstB,EAAV15C,UAAAu7C,6BACI,MAAO,IAAIxoB,GAAAA,eACTC,iBAAkB33B,KAAK80B,SAASjhB,WAC3Bg/B,oBAAoB7yC,KAAKskB,UACzB87B,qBACAtN,sBAAsB,mBAC3BoJ,YAAsC,MAAzBl8C,KAAKg/C,KAAK9C,aAAuBl8C,KAAK++C,kBAAoB/+C,KAAKg/C,KAAK9C,YACjFJ,cAAe97C,KAAKg/C,KAAKlD,eAAiB,mCAC1CvI,eAAgBvzC,KAAKwwC,kBACrB1hC,UAAW9O,KAAKoW,QASZioC,EAAV15C,UAAAw7C,sBAAA,SAAgCtsC,aACxB7T,MAAKg/C,KAAK5C,oBACZvoC,EAASu/B,gBAAgBluC,UAAU,SAAAwR,GACjC,GAAMgnC,GAAyD,UAAnChnC,EAAO2pC,eAAe/L,SAAuB,QAAU,SAC7EqJ,EAAyD,QAAnCjnC,EAAO2pC,eAAe9L,SAAqB,QAAU,OAEjF10C,GAAKm/C,KAAuB,mBAAEtB,EAAMC,MAUlCU,EAAV15C,UAAA86C,aAAA,SAAuB9nB,GACd,GAATjnB,GAAA,WAAA1Q,KAAAg/C,KAAA1D,WAAA,MAAA,UAAA,QAAA,OAASrH,EAATvjC,EAAA,GAAkB4vC,EAAlB5vC,EAAA,GAGA6vC,EAAA,UAAAvgD,KAAAg/C,KAAAxD,WAAA,SAAA,QAAA,MAAA,UAASjH,EAATgM,EAAA,GAAmBC,EAAnBD,EAAA,GAGAE,GAAAlM,EAAAiM,GAAStM,EAATuM,EAAA,GAAkBC,EAAlBD,EAAA,GACAE,GAAA1M,EAAAqM,GAAShM,EAATqM,EAAA,GAAmBC,EAAnBD,EAAA,GACQE,EAAU,CAEV7gD,MAAK++C,mBAGP6B,EAAmB3M,EAAkC,WAAxBj0C,KAAKg/C,KAAK1D,UAAyB,QAAU,MAC1EgF,EAAkBhM,EAAuB,QAAZL,EAAoB,QAAU,MAC3D4M,EAAuB,WAAbtM,EA5VsB,GAAA,GA6VtBv0C,KAAKg/C,KAAKhD,iBACpB9H,EAAuB,QAAbK,EAAqB,SAAW,MAC1CmM,EAAuC,QAArBF,EAA6B,SAAW,OAG5D7oB,EAAiBic,gBACdK,QAAPA,EAAgBC,QAAhBA,EAAyBI,SAAzBA,EAAmCC,SAAnCA,EAA6CsM,QAA7CA,IACO5M,QAASqM,EAAiBpM,QAAjCA,EAA0CI,SAAUsM,EAAkBrM,SAAtEA,EAAgFsM,QAAhFA,IAEQ5M,QAARA,EACQC,QAASwM,EACTpM,SAARA,EACQC,SAAUiM,EACVK,SAAUA,IAGV5M,QAASqM,EACTpM,QAASwM,EACTpM,SAAUsM,EACVrM,SAAUiM,EACVK,SAAUA,MAMRxC,EAAV15C,UAAA06C,iCACIr/C,KAAKw+C,mBAAmBxtC,cACxBhR,KAAKy+C,mBAAmBztC,eAIlBqtC,EAAV15C,UAAAg7C,0CACUmB,EAAW9gD,KAAgB,YAAE28B,gBAC7BvF,EAAcp3B,KAAgB,YAAEo3B,cAChC2pB,EAAc/gD,KAAKk6C,YAAcl6C,KAAKk6C,YAAY1oB,OAASphB,EAAAA,KAC3D4wC,EAAQhhD,KAAKk6C,YAAcl6C,KAAKk6C,YAAYC,WAAWlwC,KAC3D3E,EAAAA,OAAO,SAAAuJ,GAAU,MAAAA,KAAWhP,EAAKy+C,oBACjCh5C,EAAAA,OAAO,WAAM,MAAAzF,GAAK0+C,aAChBnuC,EAAAA,IAEJ,OAAOlE,GAAAA,MAAM40C,EAAUC,EAAaC,EAAO5pB,IAI7CinB,EAAF15C,UAAAs8C,iBAAE,SAAiB3/C,GACV4/C,EAAAA,gCAAgC5/C,KAGnCtB,KAAK0+C,eAAkC,IAAjBp9C,EAAM6/C,OAKxBnhD,KAAK++C,mBACPz9C,EAAMC,mBAMZ88C,EAAF15C,UAAAiV,eAAE,SAAetY,GACb,GAAMuY,GAAUvY,EAAMuY,OAElB7Z,MAAK++C,oBACAllC,IAAYmT,EAAAA,aAA4B,QAAbhtB,KAAK2W,KAChCkD,IAAYiT,EAAAA,YAA2B,QAAb9sB,KAAK2W,MACtC3W,KAAKw/C,YAKTnB,EAAF15C,UAAA6a,aAAE,SAAale,GACPtB,KAAK++C,mBAEPz9C,EAAMq5B,kBACN36B,KAAKw/C,YAELx/C,KAAKs/C,cAKDjB,EAAV15C,UAAAy6C,kCAESp/C,MAAK++C,oBAIV/+C,KAAKy+C,mBAAqBz+C,KAAKk6C,YAAYC,WAIxClwC,KACC3E,EAAAA,OAAO,SAAAuJ,GAAU,MAAAA,KAAWhP,EAAKy+C,oBAAsBzvC,EAAOlO,WAC9DsxC,EAAAA,MAAM,EAAGmP,EAAAA,gBAEVl8C,UAAU,WACTrF,EAAK6+C,gBAAiB,EAKlB7+C,EAAKm/C,eAAgB5D,KAAWv7C,EAAKm/C,KAAKjB,aAG5Cl+C,EAAKm/C,KAAKhK,eACP/qC,KAAKC,EAAAA,KAAK,GAAI+nC,EAAAA,MAAM,EAAGmP,EAAAA,eAAgBvmC,EAAAA,UAAUhb,EAAKq6C,YAAYC,aAClEj1C,UAAU,WAAM,MAAArF,GAAK2/C,aAExB3/C,EAAK2/C,8BAncfxgD,KAAC0C,EAAAA,UAADC,OACEwC,SAAU,8CACV3F,MACE6iD,gBAAiB,OACjBj6C,uBAAwB,mBACxBk6C,cAAe,2BACflyB,YAAa,yBACbjtB,UAAW,wBAEbP,SAAU,yDA/DZ5C,KAAEo5B,EAAAA,UAUFp5B,KAAE0I,EAAAA,aASF1I,KAAEyH,EAAAA,mBAqGFzH,SAAAqD,GAAAZ,aAAAzC,KAAeuD,EAAAA,OAAfZ,MAAsBu8C,QAjGtBl/C,KAAQo8C,GAAR35C,aAAAzC,KAkGesD,EAAAA,aAhGftD,KAAQi7C,GAARx4C,aAAAzC,KAiGesD,EAAAA,WAjGftD,KAiG2B6vC,EAAAA,SA/H3B7vC,KAAmBie,EAAAA,eAAnBxb,aAAAzC,KAgIesD,EAAAA,aAjIftD,KAAQ2D,EAAAA,kCAsFR4+C,+BAAAviD,KAAGO,EAAAA,MAAHoC,MAAS,0BAUTq9C,OAAAhgD,KAAGO,EAAAA,MAAHoC,MAAS,uBAGT+9C,WAAA1gD,KAAGO,EAAAA,MAAHoC,MAAS,wBAGTg9C,aAAA3/C,KAAGyY,EAAAA,SAQHmnC,aAAA5/C,KAAGyY,EAAAA,SAGHonC,aAAA7/C,KAAGyY,EAAAA,SAQHqnC,cAAA9/C,KAAGyY,EAAAA,UAjIH4mC,iCCAA,sBAqBAr/C,KAAC4D,EAAAA,SAADjB,OACEkB,SACEC,EAAAA,aACAC,GACAE,GACAuxB,EAAAA,eAEFpxB,SAAUg4C,GAASnB,GAAaoE,GAAgBrF,GAAgBj2C,IAChEU,cAAe23C,GAASnB,GAAaoE,GAAgBrF,IACrDzxC,WAAY42C,QA9BdqD,KCwBanT,IAaXC,eAAgB15B,EAAAA,QAAQ,kBACtBC,EAAAA,MAAM,OAAQjC,EAAAA,OACZkC,UAAW,cACX2sC,SAAU,OACVtuB,QAAS,KAEXte,EAAAA,MAAM,UAAWjC,EAAAA,OACfugB,QAAS,EACTsuB,SAAU,oBACV3sC,UAAW,eAEbD,EAAAA,MAAM,mBAAoBjC,EAAAA,OACxBugB,QAAS,EACTsuB,SAAU,oBACV3sC,UAAW,eAEbE,EAAAA,WAAW,YAAaC,EAAAA,QAAQ,qCAChCD,EAAAA,WAAW,YAAaC,EAAAA,QAAQ,oBAAqBrC,EAAAA,OAAOugB,QAAS,QAUvEuuB,cAAe9sC,EAAAA,QAAQ,iBACrBC,EAAAA,MAAM,UAAWjC,EAAAA,OAAOugB,QAAS,KACjCne,EAAAA,WAAW,mBACTpC,EAAAA,OAAOugB,QAAS,IAChBle,EAAAA,QAAQ,qDAWDq5B,GAAiBD,GAAoBC,eAOrCoT,GAAgBrT,GAAoBqT,chEa7C1hB,GAAe,CA8BnB58B,GAAAgoC,gCAA6C,CAM7C,IAGa0D,IACT,GAAI98B,GAAAA,eAAqC,8BAShC29B,IACXnoC,QAASsnC,GACT3tB,MAAOiX,EAAAA,SACP/W,WAAYsgC,IAIdC,GAAA,WACE,QAAFA,GAEWrzB,EAEAttB,GAFAjB,KAAXuuB,OAAWA,EAEAvuB,KAAXiB,MAAWA,EAhKX,MAAA2gD,MAqKAC,GAAA,WACE,QAAFA,GAAqB3hD,EACA4hD,EACAC,EACAC,EACAC,GAJAjiD,KAArBE,YAAqBA,EACAF,KAArB8hD,0BAAqBA,EACA9hD,KAArB+hD,YAAqBA,EACA/hD,KAArBgiD,iBAAqBA,EACAhiD,KAArBiiD,UAAqBA,EA1KrB,MAAAJ,MA4KaK,GAMLviD,EAAmBD,EAAcE,EAAcuiD,EAAgBN,mCAlLvE,sBAwLA7iD,KAAC0C,EAAAA,UAADC,OACEwC,SAAU,yBAzLZgrC,KA2LAvF,GAAA,SAAA9pC,GAkSE,QAAF8pC,GACYtxB,EACAD,EACAjG,EACR0vC,EACAx9C,EACoB8R,EACR2rC,EACAC,EACQ3X,EACO4X,EACJ1hD,EACqB6hD,GAZ9C,GAAFviD,GAaIC,EAbJC,KAAAC,KAaUsE,EAAYw9C,EAA2BC,EACvCC,EAAkBC,IAd5BjiD,WACYH,GAAZyY,eAAYA,EACAzY,EAAZwY,mBAAYA,EACAxY,EAAZuS,QAAYA,EAGYvS,EAAxBuW,KAAwBA,EAGAvW,EAAxBwqC,iBAAwBA,EACOxqC,EAA/BoiD,UAA+BA,EAEiBpiD,EAAhDuiD,uBAAgDA,EAhQhDviD,EAAA0tC,YAAuB,EAGvB1tC,EAAA+gC,WAA+B,EAG/B/gC,EAAAypC,WAAuB,EAMvBzpC,EAAAwiD,WAA+B,EAG/BxiD,EAAAyiD,aAAyB,SAACC,EAASC,GAAY,MAAAD,KAAOC,GAGtD3iD,EAAA4iD,KAAiB,cAAcziB,KAG/BngC,EAAA6iD,SAA8B,GAAI9uC,GAAAA,QAShC/T,EAAFotC,iBAAqB,EASnBptC,EAAF8iD,UAAoC,aAGlC9iD,EAAF+iD,WAAe,aAGb/iD,EAAFgjD,WAAuB,GAGrBhjD,EAAFgtC,iBAA6B,MAG3BhtC,EAAFijD,0BAA8B,GAAIlvC,GAAAA,QAGhC/T,EAAF2wC,gBAAoB3wC,EAAKuiD,yBAOvBviD,EAAF4pC,SAAa,EAQX5pC,EAAFkjD,aAEM9O,QAAS,QACTC,QAAS,MACTI,SAAU,QACVC,SAAU,QAGVN,QAAS,QACTC,QAAS,SACTI,SAAU,QACVC,SAAU,WAKhB10C,EAAAmsC,yBAA6C,EAa7CnsC,EAAAmjD,UAAqB,EAGnBnjD,EAAFojD,YAAgB,aAuFdpjD,EAAF2U,UAA2C,GAwBzC3U,EAAFqjD,uBAA0EC,EAAAA,MAAM,WAC5E,MAAItjD,GAAKqpC,QACAh9B,EAAAA,MAAbC,UAAA,GAAsBtM,EAAKqpC,QAAQ98B,IAAI,SAAAg3C,GAAU,MAAAA,GAAOC,qBAG7CxjD,EAAKuS,QAAQ6qC,SACjB5qB,eACApoB,KAAKC,EAAAA,KAAK,GAAIwyC,EAAAA,UAAU,WAAM,MAAA78C,GAAKqjD,4BAIxCrjD,EAAFu6B,aAA2D,GAAI5jB,GAAAA,aAG7D3W,EAAFy8B,cACMz8B,EAAKu6B,aAAanwB,KAAK3E,EAAAA,OAAO,SAAAg+C,GAAK,MAAAA,KAAIl3C,EAAAA,IAAI,eAG/CvM,EAAF28B,cACM38B,EAAKu6B,aAAanwB,KAAK3E,EAAAA,OAAO,SAAAg+C,GAAK,OAACA,IAAIl3C,EAAAA,IAAI,eAGhDvM,EAAF2vC,gBACM,GAAIh5B,GAAAA,aAOR3W,EAAFkuB,YAAsD,GAAIvX,GAAAA,aAkBlD3W,EAAKoiD,YAGPpiD,EAAKoiD,UAAUsB,cAAgB1jD,GAGjCA,EAAKU,SAAWC,SAASD,IAAa,EAGtCV,EAAKkhB,GAAKlhB,EAAKkhB,KA3BnB,MAtP+Brc,GAA/BklC,EAAA9pC,GA4FE2L,OAAFC,eAAMk+B,EAANjlC,UAAA,eAAE,WACE,MAAO3E,MAAKgjD,UAAYhjD,KAAKutC,gBAM/B,SAAYtsC,GACVjB,KAAKgjD,SAAW/hD,mCA6BlBwK,OAAFC,eACMk+B,EADNjlC,UAAA,mBAAE,WAC4B,MAAO3E,MAAKwjD,kBACxC,SAAgBviD,GACdjB,KAAKwjD,aAAeviD,EACpBjB,KAAKyjD,aAAa93C,wCAIpBF,OAAFC,eACMk+B,EADNjlC,UAAA,gBAAE,WAC0B,MAAO3E,MAAK4gC,eACtC,SAAa3/B,GACXjB,KAAK4gC,UAAY3iB,EAAAA,sBAAsBhd,GACvCjB,KAAKyjD,aAAa93C,wCAIpBF,OAAFC,eACMk+B,EADNjlC,UAAA,gBAAE,WAC0B,MAAO3E,MAAKqiD,eACtC,SAAaphD,GACX,GAAIjB,KAAKqrC,gBACP,KAAMqY,KAGR1jD,MAAKqiD,UAAYpkC,EAAAA,sBAAsBhd,oCAIzCwK,OAAFC,eACMk+B,EADNjlC,UAAA,8BAAE,WACwC,MAAO3E,MAAKgsC,6BACpD,SAA2B/qC,GACzBjB,KAAKgsC,wBAA0B/tB,EAAAA,sBAAsBhd,oCAQvDwK,OAAFC,eACMk+B,EADNjlC,UAAA,mBAAE,WACoB,MAAO3E,MAAKsiD,kBAChC,SAAgBzzB,GACd,GAAkB,kBAAPA,GACT,KAAM80B,KAER3jD,MAAKsiD,aAAezzB,EAChB7uB,KAAKqrC,iBAEPrrC,KAAK4jD,wDAKTn4C,OAAFC,eACMk+B,EADNjlC,UAAA,aAAE,WACmB,MAAO3E,MAAKspB,YAC/B,SAAU0b,GACJA,IAAahlC,KAAKspB,SACpBtpB,KAAK2uB,WAAWqW,GAChBhlC,KAAKspB,OAAS0b,oCAqBlBv5B,OAAFC,eACMk+B,EADNjlC,UAAA,UAAE,WACmB,MAAO3E,MAAK6jD,SAC/B,SAAO5iD,GACLjB,KAAK6jD,IAAM5iD,GAASjB,KAAKyiD,KACzBziD,KAAKyjD,aAAa93C,wCAiEpBi+B,EAAFjlC,UAAAwP,SAAE,WAAA,GAAFtU,GAAAG,IACIA,MAAKqrC,gBAAkB,GAAIyY,GAAAA,eAA0B9jD,KAAKmrC,UAC1DnrC,KAAKyjD,aAAa93C,OAKlB3L,KAAK8iD,0BACF74C,KAAK85C,EAAAA,uBAAwBlpC,EAAAA,UAAU7a,KAAK0iD,WAC5Cx9C,UAAU,WACLrF,EAAK4qC,WACP5qC,EAAKypC,WAAa,EAClBzpC,EAAKu6B,aAAajjB,MAAK,KAEvBtX,EAAKu6B,aAAajjB,MAAK,GACvBtX,EAAKirC,WAAWF,QAAU,EAC1B/qC,EAAKwY,mBAAmBxB,mBAKhC+yB,EAAFjlC,UAAAqD,mBAAE,WAAA,GAAFnI,GAAAG,IACIA,MAAKgkD,kBAELhkD,KAAKqrC,gBAAgBp/B,SAAShC,KAAK4Q,EAAAA,UAAU7a,KAAK0iD,WAAWx9C,UAAU,SAAA5D,GACrEA,EAAM2iD,MAAM75C,QAAQ,SAAAg5C,GAAU,MAAAA,GAAOc,WACrC5iD,EAAM6iD,QAAQ/5C,QAAQ,SAAAg5C,GAAU,MAAAA,GAAOgB,eAGzCpkD,KAAKkpC,QAAQjkC,QAAQgF,KAAKuL,EAAAA,UAAU,MAAOqF,EAAAA,UAAU7a,KAAK0iD,WAAWx9C,UAAU,WAC7ErF,EAAKwkD,gBACLxkD,EAAK+jD,0BAITha,EAAFjlC,UAAAg5B,UAAE,WACM39B,KAAKiiD,WACPjiD,KAAKskD,oBAIT1a,EAAFjlC,UAAAqP,YAAE,SAAY/O,GAGNA,EAAR,UACMjF,KAAKyjD,aAAa93C,QAItBi+B,EAAFjlC,UAAAsD,YAAE,WACEjI,KAAK0iD,SAAS/2C,OACd3L,KAAK0iD,SAASxuC,WACdlU,KAAKyjD,aAAavvC,YAIpB01B,EAAFjlC,UAAA08B,OAAE,WACErhC,KAAKyqC,UAAYzqC,KAAK06B,QAAU16B,KAAK41B,QAIvCgU,EAAFjlC,UAAAixB,KAAE,WAAA,GAAF/1B,GAAAG,MACQA,KAAKW,UAAaX,KAAKkpC,SAAYlpC,KAAKkpC,QAAQ/jC,SAAUnF,KAAKutC,aAInEvtC,KAAK6rC,aAAe7rC,KAAK4U,QAAQtU,cAAcouB,wBAG/C1uB,KAAKitC,iBAAmBzsC,SAAS+jD,iBAAiBvkD,KAAK4U,QAAQtU,eAAe,cAE9EN,KAAKutC,YAAa,EAClBvtC,KAAKiZ,YAAYyB,0BAA0B,MAC3C1a,KAAKwkD,4BACLxkD,KAAKykD,0BACLzkD,KAAKqY,mBAAmBxB,eAGxB7W,KAAKoS,QAAQ6qC,SAAS5qB,eAAepoB,KAAKC,EAAAA,KAAK,IAAIhF,UAAU,WACvDrF,EAAKotC,kBAAoBptC,EAAKirC,WAAW7U,YACzCp2B,EAAKirC,WAAW7U,WAAWqB,iBAC7Bz3B,EAAKirC,WAAW7U,WAAWqB,eAAe1kB,MAAM8xC,SAAc7kD,EAAKotC,iBAA3E,UAMErD,EAAFjlC,UAAA+1B,MAAE,WACM16B,KAAKutC,aACPvtC,KAAKutC,YAAa,EAClBvtC,KAAKiZ,YAAYyB,0BAA0B1a,KAAKirC,SAAW,MAAQ,OACnEjrC,KAAKqY,mBAAmBxB,eACxB7W,KAAK4iD,eAUThZ,EAAFjlC,UAAAgqB,WAAE,SAAW1tB,GACLjB,KAAKkpC,SACPlpC,KAAK2kD,qBAAqB1jD,IAW9B2oC,EAAFjlC,UAAAiqB,iBAAE,SAAiBC,GACf7uB,KAAK2iD,UAAY9zB,GAUnB+a,EAAFjlC,UAAAmqB,kBAAE,SAAkBD,GAChB7uB,KAAK4iD,WAAa/zB,GASpB+a,EAAFjlC,UAAAoqB,iBAAE,SAAiBC,GACfhvB,KAAKW,SAAWquB,EAChBhvB,KAAKqY,mBAAmBxB,eACxB7W,KAAKyjD,aAAa93C,QAIpBF,OAAFC,eAAMk+B,EAANjlC,UAAA,iBAAE,WACE,MAAO3E,MAAKutC,4CAId9hC,OAAFC,eAAMk+B,EAANjlC,UAAA,gBAAE,WACE,MAAO3E,MAAKmrC,SAAWnrC,KAAKqrC,gBAAgBtmB,SAAW/kB,KAAKqrC,gBAAgBtmB,SAAS,oCAIvFtZ,OAAFC,eAAMk+B,EAANjlC,UAAA,oBAAE,WACE,GAAI3E,KAAKwtC,MACP,MAAO,EAGT,IAAIxtC,KAAKqiD,UAAW,CAClB,GAAMuC,GAAkB5kD,KAAKqrC,gBAAgBtmB,SAAS3Y,IAAI,SAAAg3C,GAAU,MAAAA,GAAOyB,WAO3E,OALI7kD,MAAKirC,UACP2Z,EAAgBE,UAIXF,EAAgBvX,KAAK,MAG9B,MAAOrtC,MAAKqrC,gBAAgBtmB,SAAS,GAAG8/B,2CAI1Cjb,EAAFjlC,UAAAsmC,OAAE,WACE,QAAOjrC,KAAKoW,MAA2B,QAApBpW,KAAKoW,KAAKnV,OAI/B2oC,EAAFjlC,UAAAiV,eAAE,SAAetY,GACRtB,KAAKW,WACRX,KAAKyqC,UAAYzqC,KAAK+kD,mBAAmBzjD,GAAStB,KAAKglD,qBAAqB1jD,KAKxEsoC,EAAVjlC,UAAAqgD,qBAAA,SAA+B1jD,GAC3B,GAAMuY,GAAUvY,EAAMuY,QAChBorC,EAAaprC,IAAYoT,EAAAA,YAAcpT,IAAYkT,EAAAA,UACtClT,IAAYiT,EAAAA,YAAcjT,IAAYmT,EAAAA,YACnDk4B,EAAYrrC,IAAYK,EAAAA,OAASL,IAAYM,EAAAA,MAC7CgrC,EAAUnlD,KAAKiZ,WAGjBisC,KAAellD,KAAKmrC,UAAY7pC,EAAM8jD,SAAWH,GACnD3jD,EAAMC,iBACNvB,KAAK41B,QACK51B,KAAKmrC,WACXtxB,IAAYC,EAAAA,MAAQD,IAAYG,EAAAA,KAClCH,IAAYC,EAAAA,KAAOqrC,EAAQprC,qBAAuBorC,EAAQlrC,oBAC1D3Y,EAAMC,kBAEN4jD,EAAQ9qC,UAAU/Y,KAMhBsoC,EAAVjlC,UAAAogD,mBAAA,SAA6BzjD,GACzB,GAAMuY,GAAUvY,EAAMuY,QAChBorC,EAAaprC,IAAYoT,EAAAA,YAAcpT,IAAYkT,EAAAA,SACnDo4B,EAAUnlD,KAAKiZ,WAErB,IAAIY,IAAYC,EAAAA,MAAQD,IAAYG,EAAAA,IAClC1Y,EAAMC,iBACNsY,IAAYC,EAAAA,KAAOqrC,EAAQprC,qBAAuBorC,EAAQlrC,wBACrD,IAAIgrC,GAAc3jD,EAAM8jD,OAE7B9jD,EAAMC,iBACNvB,KAAK06B,YACA,IAAK7gB,IAAYK,EAAAA,OAASL,IAAYM,EAAAA,QAAUgrC,EAAQza,WAGxD,GAAI1qC,KAAKqiD,WAAaxoC,IAAYwrC,EAAAA,GAAK/jD,EAAMgkD,QAAS,CAC3DhkD,EAAMC,gBACN,IAAMgkD,GAAuBvlD,KAAKkpC,QAAQtjC,KAAK,SAAA4/C,GAAO,OAACA,EAAI7kD,WAAa6kD,EAAIzgC,UAE5E/kB,MAAKkpC,QAAQ9+B,QAAQ,SAAAg5C,GACdA,EAAOziD,WACV4kD,EAAuBnC,EAAOc,SAAWd,EAAOgB,kBAG/C,CACL,GAAMqB,GAAyBN,EAAQnH,eAEvCmH,GAAQ9qC,UAAU/Y,GAEdtB,KAAKqiD,WAAa4C,GAAc3jD,EAAMokD,UAAYP,EAAQza,YAC1Dya,EAAQnH,kBAAoByH,GAC9BN,EAAQza,WAAWib,4BAlBrBrkD,GAAMC,iBACN4jD,EAAQza,WAAWib,yBAsBvB/b,EAAFjlC,UAAA4nB,SAAE,WACOvsB,KAAKW,WACRX,KAAKgjD,UAAW,EAChBhjD,KAAKyjD,aAAa93C,SAQtBi+B,EAAFjlC,UAAA6nB,QAAE,WACExsB,KAAKgjD,UAAW,EAEXhjD,KAAKW,UAAaX,KAAKyqC,YAC1BzqC,KAAK4iD,aACL5iD,KAAKqY,mBAAmBxB,eACxB7W,KAAKyjD,aAAa93C,SAOtBi+B,EAAFjlC,UAAAihD,YAAE,WAAA,GAAF/lD,GAAAG,IACIA,MAAK8qC,WAAW+a,eAAe57C,KAAKC,EAAAA,KAAK,IAAIhF,UAAU,WACrDrF,EAAKimD,gCACLjmD,EAAKwY,mBAAmB8S,gBACxBtrB,EAAK8qC,2BACL9qC,EAAKkmD,MAAMzlD,cAAc29C,UAAYp+C,EAAKypC,cAK9CM,EAAFjlC,UAAAqhD,eAAE,WACE,MAAOhmD,MAAKqqC,iBAAmB,OAAOrqC,KAAKqqC,iBAAiB4b,MAAU,IAKhErc,EAAVjlC,UAAAmhD,yCACI,IAAK1a,EAAAA,iCAAmCprC,KAAKmrC,SAAU,CACrD,GAAM+a,GAAiBlmD,KAAK+lD,MAAMzlD,cAAc6lD,cAAc,uBAC1DD,KACF9a,EAAAA,gCAAkC1+B,GAA+Bw5C,EAAehuC,eAMtFzM,OAAFC,eAAMk+B,EAANjlC,UAAA,aAAE,WACE,OAAQ3E,KAAKqrC,iBAAmBrrC,KAAKqrC,gBAAgB+a,2CAG/Cxc,EAAVjlC,UAAAi/C,0CAGIpyC,SAAQC,UAAUC,KAAK,WACrB7R,EAAK8kD,qBAAqB9kD,EAAKoiD,UAAYpiD,EAAKoiD,UAAUhhD,MAAQpB,EAAKypB,WAQnEsgB,EAAVjlC,UAAAggD,qBAAA,SAA+B1jD,aAC3B,IAAIjB,KAAKmrC,UAAYlqC,EAAO,CAC1B,IAAK6I,MAAMC,QAAQ9I,GACjB,KAAMolD,KAGRrmD,MAAKqrC,gBAAgB2G,QACrB/wC,EAAMmJ,QAAQ,SAACk8C,GAAsB,MAAAzmD,GAAK0mD,aAAaD,KACvDtmD,KAAKwmD,kBACA,CACLxmD,KAAKqrC,gBAAgB2G,OACrB,IAAMyU,GAAsBzmD,KAAKumD,aAAatlD,EAI1CwlD,IACFzmD,KAAKiZ,YAAYoC,cAAcorC,GAInCzmD,KAAKqY,mBAAmBxB,gBAOlB+yB,EAAVjlC,UAAA4hD,aAAA,SAAuBtlD,cACbwlD,EAAsBzmD,KAAKkpC,QAAQ5oB,KAAK,SAAC8iC,GAC7C,IAEE,MAAuB,OAAhBA,EAAOniD,OAAiBpB,EAAKyiD,aAAac,EAAOniD,MAAQA,GAChE,MAAOylD,GAKP,MAJI7hD,GAAAA,aAEF8hD,QAAQC,KAAKF,IAER,IAQX,OAJID,IACFzmD,KAAKqrC,gBAAgB6Y,OAAOuC,GAGvBA,GAID7c,EAAVjlC,UAAAq/C,qCACIhkD,MAAKiZ,YAAc,GAAI4tC,GAAAA,2BAAsC7mD,KAAKkpC,SAC/DsT,gBACAsK,0BACApsC,0BAA0B1a,KAAKirC,SAAW,MAAQ,OAErDjrC,KAAKiZ,YAAYwjC,OAAOxyC,KAAK4Q,EAAAA,UAAU7a,KAAK0iD,WAAWx9C,UAAU,WAG/DrF,EAAKiY,QACLjY,EAAK66B,UAGP16B,KAAKiZ,YAAYvC,OAAOzM,KAAK4Q,EAAAA,UAAU7a,KAAK0iD,WAAWx9C,UAAU,WAC3DrF,EAAK0tC,YAAc1tC,EAAKkmD,MAC1BlmD,EAAKknD,8BACKlnD,EAAK0tC,YAAe1tC,EAAKsrC,WAAYtrC,EAAKoZ,YAAYyxB,YAChE7qC,EAAKoZ,YAAYyxB,WAAWib,2BAM1B/b,EAAVjlC,UAAA0/C,oCACU2C,EAAqB96C,EAAAA,MAAMlM,KAAKkpC,QAAQjkC,QAASjF,KAAK0iD,SAE5D1iD,MAAKkjD,uBAAuBj5C,KAAK4Q,EAAAA,UAAUmsC,IAAqB9hD,UAAU,SAAA5D,GACxEzB,EAAKonD,UAAU3lD,EAAMitB,OAAQjtB,EAAM4lD,aAE/B5lD,EAAM4lD,cAAgBrnD,EAAKsrC,UAAYtrC,EAAK0tC,aAC9C1tC,EAAK66B,QACL76B,EAAKiY,WAMT5L,EAAAA,MAAJC,UAAA,GAAanM,KAAKkpC,QAAQ98B,IAAI,SAAAg3C,GAAU,MAAAA,GAAOzvC,iBACxC1J,KAAK4Q,EAAAA,UAAUmsC,IACf9hD,UAAU,WACTrF,EAAKwY,mBAAmBxB,eACxBhX,EAAK4jD,aAAa93C,SAGtB3L,KAAKmnD,iBAICvd,EAAVjlC,UAAAsiD,UAAA,SAAoB7D,EAAmB8D,GACnC,GAAME,GAAcpnD,KAAKqrC,gBAAgBgc,WAAWjE,EAEhC,OAAhBA,EAAOniD,OAAkBjB,KAAKqiD,WAKhCe,EAAOr+B,SAAW/kB,KAAKqrC,gBAAgB6Y,OAAOd,GAAUpjD,KAAKqrC,gBAAgB+Y,SAAShB,GAElF8D,GACFlnD,KAAKiZ,YAAYoC,cAAc+nC,GAG7BpjD,KAAKmrC,WACPnrC,KAAKwmD,cAEDU,GAKFlnD,KAAK8X,WAlBTsrC,EAAOgB,WACPpkD,KAAKqrC,gBAAgB2G,QACrBhyC,KAAKsnD,kBAAkBlE,EAAOniD,QAqB5BmmD,IAAgBpnD,KAAKqrC,gBAAgBgc,WAAWjE,IAClDpjD,KAAKsnD,oBAGPtnD,KAAKyjD,aAAa93C,QAIZi+B,EAAVjlC,UAAA6hD,iCACI,IAAIxmD,KAAKmrC,SAAU,CACjB,GAAMoc,GAAUvnD,KAAKkpC,QAAQ3tB,SAE7Bvb,MAAKqrC,gBAAgBz8B,KAAK,SAACG,EAAGC,GAC5B,MAAOnP,GAAK0vC,eAAiB1vC,EAAK0vC,eAAexgC,EAAGC,EAAGu4C,GAC1BA,EAAQ13C,QAAQd,GAAKw4C,EAAQ13C,QAAQb,KAEpEhP,KAAKyjD,aAAa93C,SAKdi+B,EAAVjlC,UAAA2iD,kBAAA,SAA4BE,GACxB,GAAIC,GAAmB,IAGrBA,GADEznD,KAAKmrC,SACQnrC,KAA4B,SAAEoM,IAAI,SAAAg3C,GAAU,MAAAA,GAAOniD,QAEpDjB,KAAK+kB,SAAY/kB,KAA0B,SAAEiB,MAAQumD,EAGrExnD,KAAKspB,OAASm+B,EACdznD,KAAK+tB,YAAY5W,KAAKswC,GACtBznD,KAAK2iD,UAAU8E,GACfznD,KAAKwvC,gBAAgBr4B,KAAK,GAAIyqC,IAAgB5hD,KAAMynD,IACpDznD,KAAKqY,mBAAmBxB,gBAIlB+yB,EAAVjlC,UAAAwiD,yBACInnD,KAAK6iD,WAAa7iD,KAAKkpC,QAAQ98B,IAAI,SAAAg3C,GAAU,MAAAA,GAAOriC,KAAIssB,KAAK,MAOvDzD,EAAVjlC,UAAA8/C,mCACQzkD,KAAKiZ,cACHjZ,KAAKwtC,MACPxtC,KAAKiZ,YAAYc,qBAEjB/Z,KAAKiZ,YAAYoC,cAAcrb,KAAKqrC,gBAAgBtmB,SAAS,MAM3D6kB,EAAVjlC,UAAAoiD,uCACI,GAAMW,GAAoB1nD,KAAKiZ,YAAY+kC,iBAAmB,EACxD2J,EAAa1e,EAA8Bye,EAAmB1nD,KAAKkpC,QACrElpC,KAAKmpC,aAETnpC,MAAK+lD,MAAMzlD,cAAc29C,UAAY2J,EACnCF,EAAoBC,EACpB3nD,KAAK8pC,iBACL9pC,KAAK+lD,MAAMzlD,cAAc29C,UA/3BQ,MAq4BrCrU,EAAFjlC,UAAAmT,MAAE,WACE9X,KAAKE,YAAYI,cAAcwX,SAIzB8xB,EAAVjlC,UAAAkjD,gBAAA,SAA0BzE,GACtB,MAAOpjD,MAAKkpC,QAAQx5B,OAAO,SAACo4C,EAA4BC,EAAoBz9C,GAC1E,WAAkBjI,KAAXylD,EAAwB1E,IAAW2E,EAAUz9C,MAAQjI,GAAaylD,OACxEzlD,KAIGunC,EAAVjlC,UAAA6/C,qCACI,GAAM3a,GAAa7pC,KAAK8pC,iBAClB6S,EAAQ38C,KAAKksC,gBACb7C,EAAcz3B,KAAKE,IAAI6qC,EAAQ9S,EAp5BF,KAq5B7Bme,EAAwBrL,EAAQ9S,EAGhCL,EAAYwe,EAAwB3e,EAGtCL,EACAhpC,KAAKwtC,MAAQ,EAAIxtC,KAAK6nD,gBAAgB7nD,KAAKqrC,gBAAgBtmB,SAAS;wJAExEikB,IAAwBC,EAA8BD,EAAsBhpC,KAAKkpC,QAC7ElpC,KAAKmpC,aAIT,IAAMC,GAAeC,EAAc,CACnCrpC,MAAKspC,WAAatpC,KAAKupC,wBAAwBP,EAAsBI,EAAcI,GACnFxpC,KAAKypC,SAAWzpC,KAAK0pC,yBAAyBV,EAAsBI,EAAcI,GAElFxpC,KAAK2pC,4BAA4BH,IAUnCI,EAAFjlC,UAAA4kC,wBAAE,SAAwB1sB,EAAuBusB,EACvBI,GACtB,GAAMK,GAAa7pC,KAAK8pC,iBAClBC,EAA4BF,EAAahtB,EACzCmtB,EAAmBH,EAAa,EAMhCI,EAAwBF,EAA4BX,EAAeY,CACzE,OAAOp4B,MAAKE,IAAIF,KAAKoK,IAAI,EAAGiuB,GAAwBT,IAItDI,EAAFjlC,UAAAulC,cAAE,WAGE,MAAOlqC,MAAKyU,eAAiB,KAAOzU,KAAKwU,WAAaxU,KAAKmqC,aAI7DP,EAAFjlC,UAAAylC,mBAAE,WACE,MAAIpqC,MAAKyU,eACAzU,KAAKyU,eAKTzU,KAAKqqC,kBAAqBrqC,KAAKqqC,iBAAiBC,sBACnDtqC,KAAKkqC,gBAIAlqC,KAAKqqC,iBAAiBE,UAAY,KAHhC,MAOXX,EAAFjlC,UAAA6lC,yBAAE,WACE,MAAIxqC,MAAKyqC,WAAazqC,KAAKiZ,aAAejZ,KAAKiZ,YAAYyxB,WAClD1qC,KAAKiZ,YAAYyxB,WAAW3pB,GAG9B,MAUD6oB,EAAVjlC,UAAAgmC,oCACI,GAKIC,GALEC,EAAc7qC,KAAK8qC,WAAW7U,WAAWqB,eAAe5I,wBACxDqc,EAAe/qC,KAAKsY,eAAe0yB,kBACnCnT,EAAQ73B,KAAKirC,SACbC,EAAelrC,KAAKmrC,SAAWC,EAAAA,gCAv+BH,GAw+BG1+B,EAIrC,IAAI1M,KAAKmrC,SACPP,EAAUQ,EAAAA,oCACL,CACL,GAAIrmB,GAAW/kB,KAAKqrC,gBAAgBtmB,SAAS,IAAM/kB,KAAKkpC,QAAQoC,KAChEV,GAAU7lB,GAAYA,EAASwmB,MA7+BQ7+B,GAHP,GAo/B7BmrB,IACH+S,IAAY,EAId,IAAMY,GAAe,GAAKX,EAAY53B,KAAO23B,GAAW/S,EAAQqT,EAAe,IACzEO,EAAgBZ,EAAY7S,MAAQ4S,EAAUG,EAAa73B,OACxC2kB,EAAQ,EAAIqT,EAGjCM,GAAe,EACjBZ,GAAWY,EAv+B4B,EAw+B9BC,EAAgB,IACzBb,GAAWa,EAz+B4B,GA++BzCzrC,KAAK8qC,WAAWF,QAAUh5B,KAAKic,MAAM+c,GACrC5qC,KAAK8qC,WAAW7U,WAAWyV,kBAQrB9B,EAAVjlC,UAAA+kC,yBAAA,SAAmC7sB,EAAuBusB,EACxBI,GAC9B,GAGImC,GAHE9B,EAAa7pC,KAAK8pC,iBAClB8B,GAA0B/B,EAAa7pC,KAAK6rC,aAAaxsB,QAAU,EACnEysB,EAAsBl6B,KAAKm6B,MAvhCE,IAuhC8BlC,EAIjE,IAAI7pC,KAAKgsC,wBACP,MAAO,EAGT,IAAwB,IAApBhsC,KAAKspC,WACPqC,EAA2B9uB,EAAgBgtB,MACtC,IAAI7pC,KAAKspC,aAAeE,EAAW,CACxC,GAAMyC,GAAsBjsC,KAAKksC,gBAAkBJ,EAC7CK,EAAuBtvB,EAAgBovB,EAIzCG,EACAvC,GAAc7pC,KAAKksC,gBAAkBrC,EAxiCR,KAwiCgDA,CAMjF8B,GAA2BQ,EAAuBtC,EAAauC,MAK/DT,GAA2BvC,EAAeS,EAAa,CAMzD,OAAOj4B,MAAKic,OAAkC,EAA5B8d,EAAgCC,IAS5ChC,EAAVjlC,UAAAglC,4BAAA,SAAsCH,GAClC,GAAMK,GAAa7pC,KAAK8pC,iBAClBiB,EAAe/qC,KAAKsY,eAAe0yB,kBAEnCqB,EAAoBrsC,KAAK6rC,aAAate,IA3iCH,EA4iCnC+e,EACFvB,EAAa1rB,OAASrf,KAAK6rC,aAAa3T,OA7iCH,EA+iCnCqU,EAAiB36B,KAAK46B,IAAIxsC,KAAKypC,UAC/BgD,EACF76B,KAAKE,IAAI9R,KAAKksC,gBAAkBrC,EA5kCD,KA6kC7B6C,EAAoBD,EAAmBF,EAAiBvsC,KAAK6rC,aAAaxsB,MAE5EqtB,GAAoBJ,EACtBtsC,KAAK2sC,eAAeD,EAAmBJ,GAC9BC,EAAiBF,EAC3BrsC,KAAK4sC,iBAAiBL,EAAgBF,EAAmB7C,GAExDxpC,KAAK6sC,iBAAmB7sC,KAAK8sC,2BAKzBlD,EAAVjlC,UAAAgoC,eAAA,SAAyBD,EAA2BJ,GAEhD,GAAMS,GAAwBn7B,KAAKic,MAAM6e,EAAoBJ,EAI7DtsC,MAAKspC,YAAcyD,EACnB/sC,KAAKypC,UAAYsD,EACjB/sC,KAAK6sC,iBAAmB7sC,KAAK8sC,0BAKzB9sC,KAAKspC,YAAc,IACrBtpC,KAAKspC,WAAa,EAClBtpC,KAAKypC,SAAW,EAChBzpC,KAAK6sC,iBAAmB,mBAKpBjD,EAAVjlC,UAAAioC,iBAAA,SAA2BL,EAAwBF,EACxB7C,GAEvB,GAAMwD,GAAwBp7B,KAAKic,MAAM0e,EAAiBF,EAW1D,IAPArsC,KAAKspC,YAAc0D,EACnBhtC,KAAKypC,UAAYuD,EACjBhtC,KAAK6sC,iBAAmB7sC,KAAK8sC,0BAKzB9sC,KAAKspC,YAAcE,EAIrB,MAHAxpC,MAAKspC,WAAaE,EAClBxpC,KAAKypC,SAAW,OAChBzpC,KAAK6sC,iBAAmB,gBAMpBjD,EAAVjlC,UAAAmoC,mCACI,GAAMjD,GAAa7pC,KAAK8pC,iBAClB8B,GAA0B/B,EAAa7pC,KAAK6rC,aAAaxsB,QAAU,CAEzE,OAAO,QADSzN,KAAK46B,IAAIxsC,KAAKypC,UAAYmC,EAAyB/B,EAAa,GACpF,UAIUD,EAAVjlC,UAAAunC,yBACI,MAAOlsC,MAAKkpC,QAAQ/jC,OAASnF,KAAKmpC,aAAahkC,QAIzCykC,EAAVjlC,UAAAmlC,0BACI,MA1oCiC,GA0oC1B9pC,KAAKitC,kBAOdrD,EAAFjlC,UAAAuoC,kBAAE,SAAkBC,GAChBntC,KAAKotC,iBAAmBD,EAAIE,KAAK,MAOnCzD,EAAFjlC,UAAA2oC,iBAAE,WACEttC,KAAK8X,QACL9X,KAAK41B,QAOPnqB,OAAFC,eAAMk+B,EAANjlC,UAAA,wBAAE,WACE,MAAO3E,MAAKutC,aAAevtC,KAAKwtC,sDA1lCpCxuC,KAACgH,EAAAA,UAADrE,OAAAwC,SAAA,aACEvC,SAAU,YACVqE,SAAU,27CACVC,QAAF,ujEACErE,QAAF,WAAA,gBAAA,YACEnD,cAAFC,EAAAA,kBAAAC,KACEC,gBAAFC,EAAAA,wBAAAC,OACEP,MACF0I,KAAA,UACMshC,YAAN,KACIjG,kBAAJ,WACIkL,oBAAJ,kBACIC,yBAAJ,uBACIC,uBAAJ,sBACI5rC,uBAAwB,sBACxB6rC,sBAAJ,aACIC,mBAAJ,gCACIC,8BAAJ,WACIC,0BAAJ,2BACIC,+BAAJ,6BACIC,8BAAJ,WACIC,6BAA8B,aAC9BC,8BAA+B,WAC/BC,2BAA4B,QAC5B3vC,MAAJ,aACI2wB,YAAJ,yBACIF,UAAJ,aACIC,SAAJ,aAEA3X,YACA62B,GAAAC,gBAEA/mC,YACAC,QAAA+mC,GAAA9mC,YAAAmiC,IACApiC,QAAAgnC,GAAA/mC,YAAAmiC,8FAnMA5qC,KAAQC,EAAAA,SAKRD,KAAEknB,KAYFlnB,KAAE0I,EAAAA,aAsBF1I,KAAEie,EAAAA,eAAFxb,aAAAzC,KAAAsD,EAAAA,aA5BAtD,KAAEyvC,EAAAA,OAAFhtC,aAAAzC,KAAAsD,EAAAA,aA/BAtD,KAAQ0vC,EAAAA,mBAARjtC,aAAAzC,KAAAsD,EAAAA,aAiDAtD,KAA6D2vC,GAA7DltC,aA0aKzC,KA1aLsD,EAAAA,aAAAtD,KAA8B4vC,EAAAA,UAA9BntC,aAAAzC,KAAA6vC,EAAAA,OAAA7vC,KAAAsD,EAAAA,aAsBAtD,KAAQyD,OAARhB,aAAAzC,KAAA0D,EAAAA,UAAAf,MAAA,gBAtBA3C,SAAkDqD,GAAlDZ,aAAAzC,KA6aKuD,EAAAA,OA7aLZ,MAAAmtC,SA+aAlF,EAAAvqC,wGAxJAyrC,aAAA9rC,KAAAuV,EAAAA,UAAA5S,MAAAotC,EAAAA,uBAGA7F,UAAAlqC,KAAAoJ,EAAAA,gBAAAzG,MAAAqtC,IAAAxH,aAAA,MAGA2B,eAAAnqC,KAAAoJ,EAAAA,gBAAAzG,MAAAstC,MAGA9a,aAAAn1B,KAAAO,EAAAA,QAGA2vC,gBAAAlwC,KAAAw/B,EAAAA,aAAkB78B,MAAlBwtC,MAGAhF,cAAAnrC,KAAAO,EAAAA,QAGAojC,WAAA3jC,KAAAO,EAAAA,QAGA4rC,WAAAnsC,KAAAO,EAAAA,QAQA6vC,yBAAApwC,KAAAO,EAAAA,QAQA8vC,cAAArwC,KAAAO,EAAAA,QAWA0B,QAAAjC,KAAAO,EAAAA,QAWAiV,YAAAxV,KAAAO,EAAAA,MAAQoC,MAAR,gBAcA8S,iBAAAzV,KAAAO,EAAAA,MAAAoC,MAAA,qBAWA2tC,oBAAAtwC,KAAAO,EAAAA,QAGAgwC,iBAAAvwC,KAAGO,EAAAA,QAGHwhB,KAAA/hB,KAAAO,EAAAA,QAMA66B,eAAAp7B,KAAAyY,EAAAA,SAGA6kB,gBAAQt9B,KAARyY,EAAAA,OAAA9V,MAAA,YAoBA66B,gBAAAx9B,KAAAyY,EAAAA,OAAA9V,MAAA,YAGA6tC,kBAAAxwC,KAAAyY,EAAAA,SAIAsW,cAAA/uB,KAAAyY,EAAAA,UAYAmyB,mCmD3dA,sBAgBA5qC,KAAC4D,EAAAA,SAADjB,OACEkB,SACEC,EAAAA,aACA0xB,EAAAA,cACAib,GACA1sC,IAEFK,SAAUssC,GAAoB9F,GAAWuF,GAAkBM,GAAiB1sC,IAC5EU,cAAemmC,GAAWuF,IAC1B5nC,WAAYooC,QAzBdC,KCqBaC,IAIXC,aAAcl7B,EAAAA,QAAQ,SACpBC,EAAAA,MAAM,wBAAyBjC,EAAAA,OAAOugB,QAAS,EAAGre,UAAW,cAC7DD,EAAAA,MAAM,UAAWjC,EAAAA,OAAOkC,UAAW,cACnCE,EAAAA,WAAW,eAAgBC,EAAAA,QAAQ,mCAAoCwL,EAAAA,WACrE7N,EAAAA,OAAOugB,QAAS,EAAGre,UAAW,WAAYwY,OAAQ,IAClD1a,EAAAA,OAAOugB,QAAS,GAAKre,UAAW,cAAewY,OAAQ,KACvD1a,EAAAA,OAAOugB,QAAS,EAAGre,UAAW,WAAYwY,OAAQ,QAEpDtY,EAAAA,WAAW,cAAeC,EAAAA,QAAQ,mCAAoCrC,EAAAA,OAAOugB,QAAS,SnDgB7E4c,GAAqB,GAcrBC,GACT,GAAIh+B,GAAAA,eAAqC,+BAQhCi+B,IACXzoC,QAASwoC,GACT7uB,MAAOiX,EAAAA,SACP/W,WAAY6uB,IAWDC,GACT,GAAIn+B,GAAAA,eAAyC,+BAC3CC,WAAY,OACZC,QAASk+B,mBA2Gb,QAAFC,GACYvb,EACA50B,EACAowC,EACA98B,EACApB,EACA7N,EACAgsC,EACApwC,EACqCqwC,EACzBp6B,EAEVq6B,GAZZ,GAAF5wC,GAAAG,IACYA,MAAZ80B,SAAYA,EACA90B,KAAZE,YAAYA,EACAF,KAAZswC,kBAAYA,EACAtwC,KAAZwT,kBAAYA,EACAxT,KAAZoS,QAAYA,EACApS,KAAZuE,UAAYA,EACAvE,KAAZuwC,eAAYA,EACAvwC,KAAZG,cAAYA,EACqCH,KAAjDwwC,gBAAiDA,EACzBxwC,KAAxBoW,KAAwBA,EAEVpW,KAAdywC,gBAAcA,EAvFdzwC,KAAA0V,UAAuC,QACvC1V,KAAA6mC,WAA+B,EAmC7B7mC,KAAF0wC,UAA4C1wC,KAAKywC,gBAAgBC,UAG/D1wC,KAAF2wC,UAA4C3wC,KAAKywC,gBAAgBE,UAEjE3wC,KAAA4wC,SAAqB,GA6BrB5wC,KAAA6wC,iBAA6B,GAAIjY,KAGjC54B,KAAAyY,WAAgC,GAAI7E,GAAAA,OAgBhC,IAAMrB,GAAuBrS,EAAYI,aAIpCiE,GAAUusC,KAAQvsC,EAAUwsC,SAC/B/wC,KAAK6wC,iBACF1X,IAAI,aAAc,WAAM,MAAAt5B,GAAK2S,SAC7B2mB,IAAI,aAAc,WAAM,MAAAt5B,GAAKiT,SAC7B1I,QAAQ,SAAC4mC,EAAU1vC,GAAU,MAAAiR,GAAQ0+B,iBAAiB3vC,EAAO0vC,KAGzC,UAArBz+B,EAAQ2+B,UAA6C,aAArB3+B,EAAQ2+B,WAM1C3+B,EAAQK,MAAMu+B,iBAAmB5+B,EAAQK,MAAMw+B,WAAa7+B,EAAQK,MAAMy+B,aAAe,IAMvF9+B,EAAQ++B,WAAiD,SAApC/+B,EAAQK,MAAsB,iBACrDL,EAAQK,MAAsB,eAAI,IAGpCzS,EAAcW,QAAQZ,GAAa+J,KAAK4Q,EAAAA,UAAU7a,KAAKyY,aAAavT,UAAU,SAAA4O,GAEvEA,EAEiB,aAAXA,GACT1B,EAAQ8I,IAAI,WAAM,MAAArb,GAAK2S,SAFvBJ,EAAQ8I,IAAI,WAAM,MAAArb,GAAKiT,KAAK,OAhPpC,MA8HErH,QAAFC,eACM2kC,EADN1rC,UAAA,gBAAE,WACkC,MAAO3E,MAAK0V,eAC9C,SAAazU,GACPA,IAAUjB,KAAK0V,YACjB1V,KAAK0V,UAAYzU,EAEbjB,KAAK+wB,cACP/wB,KAAKuxC,kBAEDvxC,KAAKwxC,kBACPxxC,KAAqB,iBAAEwS,KAAK,GAG9BxS,KAAK+wB,YAAY2a,oDAMvBjgC,OAAFC,eACM2kC,EADN1rC,UAAA,gBAAE,WAC0B,MAAO3E,MAAK6mC,eACtC,SAAa5lC,GACXjB,KAAK6mC,UAAY5oB,EAAAA,sBAAsBhd,GAGnCjB,KAAK6mC,WACP7mC,KAAK8S,KAAK,oCAadrH,OAAFC,eACM2kC,EADN1rC,UAAA,eAAE,WACgB,MAAO3E,MAAK4wC,cAC5B,SAAY3vC,GACVjB,KAAKuwC,eAAekB,kBAAkBzxC,KAAKE,YAAYI,cAAeN,KAAK4wC,UAG3E5wC,KAAK4wC,SAAoB,MAAT3vC,GAAgB,GAAGA,GAAQ6E,OAAS,IAE/C9F,KAAK4wC,UAAY5wC,KAAK0xC,oBACzB1xC,KAAK8S,KAAK,IAEV9S,KAAK2xC,wBACL3xC,KAAKuwC,eAAeqB,SAAS5xC,KAAKE,YAAYI,cAAeN,KAAK61B,2CAKtEpqB,OAAFC,eACM2kC,EADN1rC,UAAA,oBAAE,WACqB,MAAO3E,MAAK6xC,mBACjC,SAAiB5wC,GACfjB,KAAK6xC,cAAgB5wC,EACjBjB,KAAKwxC,kBACPxxC,KAAK8xC,iBAAiB9xC,KAAK6xC,gDA+D/BxB,EAAF1rC,UAAAsD,YAAE,WAAA,GAAFpI,GAAAG,IACQA,MAAK+wB,cACP/wB,KAAK+wB,YAAYmB,UACjBlyB,KAAKwxC,iBAAmB,MAIrBxxC,KAAKuE,UAAUusC,MAClB9wC,KAAK6wC,iBAAiBzmC,QAAQ,SAAC4mC,EAAU1vC,GACvC,MAAAzB,GAAKK,YAAYI,cAAcyxC,oBAAoBzwC,EAAO0vC,KAE5DhxC,KAAK6wC,iBAAiBmB,SAGxBhyC,KAAKyY,WAAW9M,OAChB3L,KAAKyY,WAAWvE,WAEhBlU,KAAKuwC,eAAekB,kBAAkBzxC,KAAKE,YAAYI,cAAeN,KAAK61B,SAC3E71B,KAAKG,cAAckB,eAAerB,KAAKE,cAIzCmwC,EAAF1rC,UAAA6N,KAAE,SAAKy/B,GAAL,GAAFpyC,GAAAG,IACI,QADJ,KAAAiyC,IAAOA,EAAgBjyC,KAAK0wC,YACpB1wC,KAAKW,UAAaX,KAAK61B,WAAY71B,KAAK0xC,qBACzC1xC,KAAqB,iBAAEkyC,gBAAmBlyC,KAAqB,iBAAEmyC,gBADpE,CAKA,GAAMlc,GAAaj2B,KAAK42B,gBAExB52B,MAAKoyC,UACLpyC,KAAKqyC,QAAUryC,KAAKqyC,SAAW,GAAI9b,GAAAA,gBAAgB+b,GAAkBtyC,KAAKwT,mBAC1ExT,KAAKwxC,iBAAmBvb,EAAWpgB,OAAO7V,KAAKqyC,SAAS5b,SACxDz2B,KAAKwxC,iBAAiBe,cACnBtoC,KAAK4Q,EAAAA,UAAU7a,KAAKyY,aACpBvT,UAAU,WAAM,MAAArF,GAAKuyC,YACxBpyC,KAAK8xC,iBAAiB9xC,KAAK6xC,eAC3B7xC,KAAK2xC,wBACL3xC,KAAqB,iBAAEwS,KAAKy/B,KAI9B5B,EAAF1rC,UAAAmO,KAAE,SAAKm/B,OAAP,KAAAA,IAAOA,EAAgBjyC,KAAK2wC,WACpB3wC,KAAKwxC,kBACPxxC,KAAKwxC,iBAAiB1+B,KAAKm/B,IAK/B5B,EAAF1rC,UAAA08B,OAAE,WACErhC,KAAK0xC,oBAAsB1xC,KAAK8S,OAAS9S,KAAKwS,QAIhD69B,EAAF1rC,UAAA+sC,kBAAE,WACE,QAAS1xC,KAAKwxC,kBAAoBxxC,KAAKwxC,iBAAiBgB,aAI1DnC,EAAF1rC,UAAAiV,eAAE,SAAe3C,GACTjX,KAAK0xC,qBAAuBz6B,EAAE4C,UAAY44B,EAAAA,SAC5Cx7B,EAAE0jB,kBACF36B,KAAK8S,KAAK,KAKdu9B,EAAF1rC,UAAA+tC,gBAAE,WACE1yC,KAAK8S,KAAK9S,KAAKywC,gBAAgBkC,oBAIzBtC,EAAV1rC,UAAAiyB,oCACI,IAAI52B,KAAK+wB,YACP,MAAO/wB,MAAK+wB,WAId,IAAM6hB,GAAW5yC,KAAK80B,SAASjhB,WAC5Bg/B,oBAAoB7yC,KAAKE,aACzB4yC,sBAAsB,gBACtBC,wBAAuB,GACvBC,mBAAmB,GAEhBC,EAAsBjzC,KAAKswC,kBAC9B4C,4BAA4BlzC,KAAKE,YA2BpC,OAzBA0yC,GAASO,yBAAyBF,GAElCL,EAASQ,gBAAgBnpC,KAAK4Q,EAAAA,UAAU7a,KAAKyY,aAAavT,UAAU,SAAAwR,GAC9D7W,EAAK2xC,kBACH96B,EAAO28B,yBAAyBC,kBAAoBzzC,EAAK2xC,iBAAiBgB,aAG5E3yC,EAAKuS,QAAQ8I,IAAI,WAAM,MAAArb,GAAKiT,KAAK,OAKvC9S,KAAK+wB,YAAc/wB,KAAK80B,SAASqD,QAC/BrpB,UAAW9O,KAAKoW,KAChBuhB,iBAAkBib,EAClBze,WA5S6B,oBA6S7Bof,eAAgBvzC,KAAKwwC,oBAGvBxwC,KAAKuxC,kBAELvxC,KAAK+wB,YAAYqG,cACdntB,KAAK4Q,EAAAA,UAAU7a,KAAKyY,aACpBvT,UAAU,WAAM,MAAArF,GAAKuyC,YAEjBpyC,KAAK+wB,aAINsf,EAAV1rC,UAAAytC,mBACQpyC,KAAK+wB,aAAe/wB,KAAK+wB,YAAYnb,eACvC5V,KAAK+wB,YAAY/a,SAGnBhW,KAAKwxC,iBAAmB,MAIlBnB,EAAV1rC,UAAA4sC,2BACI,GAAM19B,GACF7T,KAAgB,YAAEwzC,YAA4B,iBAC5C1/B,EAAS9T,KAAKyzC,aACdC,EAAU1zC,KAAK2zC,qBAErB9/B,GAAS+/B,eACb7d,MAAUjiB,EAAO+/B,KAASH,EAAQG,MAClC9d,MAAUjiB,EAAOggC,SAAaJ,EAAQI,aAQpCzD,EAAF1rC,UAAA8uC,WAAE,WACE,GAEIM,GAFEC,GAASh0C,KAAKoW,MAA2B,OAAnBpW,KAAKoW,KAAKnV,MAChC4S,EAAW7T,KAAK6T,QAGtB,IAAgB,SAAZA,GAAmC,SAAZA,EACzBkgC,GAAkBE,QAAS,SAAUC,QAAqB,SAAZrgC,EAAsB,MAAQ,cACvE,IACO,UAAZA,GACa,QAAZA,GAAsBmgC,GACV,SAAZngC,IAAwBmgC,EACzBD,GAAkBE,QAAS,QAASC,QAAS,cACxC,CAAA,KACO,SAAZrgC,GACa,SAAZA,GAAuBmgC,GACX,QAAZngC,IAAuBmgC,GAGxB,KAAMG,IAAkCtgC,EAFxCkgC,IAAkBE,QAAS,MAAOC,QAAS,UAKtC,GAAXxjC,GAAA1Q,KAAAo0C,gBAAAL,EAAAE,QAAAF,EAAAG,QAEI,QACEL,KAAME,EACND,UAAWG,QAJjBvjC,EAAAkb,EAI6BsoB,QAJ7BxjC,EAAAob,KASEukB,EAAF1rC,UAAAgvC,oBAAE,WACE,GAEIU,GAFEL,GAASh0C,KAAKoW,MAA2B,OAAnBpW,KAAKoW,KAAKnV,MAChC4S,EAAW7T,KAAK6T,QAGtB,IAAgB,SAAZA,EACFwgC,GAAmBC,SAAU,SAAUC,SAAU,cAC5C,IAAgB,SAAZ1gC,EACTwgC,GAAmBC,SAAU,SAAUC,SAAU,WAC5C,IACO,UAAZ1gC,GACa,QAAZA,GAAsBmgC,GACV,SAAZngC,IAAwBmgC,EACzBK,GAAmBC,SAAU,MAAOC,SAAU,cACzC,CAAA,KACO,SAAZ1gC,GACa,SAAZA,GAAuBmgC,GACX,QAAZngC,IAAuBmgC,GAGxB,KAAMG,IAAkCtgC,EAFxCwgC,IAAmBC,SAAU,QAASC,SAAU,UAK3C,GAAX7jC,GAAA1Q,KAAAo0C,gBAAAC,EAAAC,SAAAD,EAAAE,SAEI,QACEV,KAAMQ,EACNP,UAAWQ,SAJjB5jC,EAAAkb,EAI8B2oB,SAJ9B7jC,EAAAob,KASUukB,EAAV1rC,UAAAgtC,2CAGQ3xC,MAAKwxC,mBACPxxC,KAAKwxC,iBAAiB3b,QAAU71B,KAAK61B,QACrC71B,KAAKwxC,iBAAiBlK,gBAEtBtnC,KAAKoS,QAAQ6hB,iBAAiB5B,eAAepoB,KAC3CC,EAAAA,KAAK,GACL2Q,EAAAA,UAAU7a,KAAKyY,aACfvT,UAAU,WACNrF,EAAK2xC,kBACP3xC,EAAgB,YAAE6rC,qBAOlB2E,EAAV1rC,UAAAmtC,iBAAA,SAA2B0C,GACnBx0C,KAAKwxC,mBACPxxC,KAAKwxC,iBAAiBgD,aAAeA,EACrCx0C,KAAKwxC,iBAAiBlK,kBAKlB+I,EAAV1rC,UAAAyvC,gBAAA,SAA0BxoB,EAA4BE,GAelD,MAdsB,UAAlB9rB,KAAK6T,UAA0C,UAAlB7T,KAAK6T,SAC1B,QAANiY,EACFA,EAAI,SACW,WAANA,IACTA,EAAI,OAGI,QAANF,EACFA,EAAI,QACW,UAANA,IACTA,EAAI,QAIAA,EAAZA,EAAeE,EAAfA,mBApYA9sB,KAAC0C,EAAAA,UAADC,OACEwC,SAAU,eACVvC,SAAU,aACVpD,MACE2kB,cAAe,SACfiM,YAAa,yBACbqlB,aAAc,6DAhGlBz1C,KAAEo5B,EAAAA,UAeFp5B,KAAE0I,EAAAA,aATF1I,KAAQigC,EAAAA,mBAgBRjgC,KAAEyH,EAAAA,mBAHFzH,KAAEC,EAAAA,SAZFD,KAAQoD,EAAAA,WAhBRpD,KAAQ01C,EAAAA,gBAAR11C,KAAuB2D,EAAAA,eAqMvB3D,SAAAqD,GAAAZ,aAAAzC,KAAKuD,EAAAA,OAALZ,MAAYquC,QApMZhxC,KAAQie,EAAAA,eAARxb,aAAAzC,KAqMKsD,EAAAA,aACLtD,SAAAqD,GAAAZ,aAAAzC,KAAKsD,EAAAA,WAALtD,KAAiBuD,EAAAA,OAAjBZ,MAAwBwuC,2BAjFxBt8B,WAAA7U,KAAGO,EAAAA,MAAHoC,MAAS,wBAmBThB,WAAA3B,KAAGO,EAAAA,MAAHoC,MAAS,wBAYT+uC,YAAA1xC,KAAGO,EAAAA,MAAHoC,MAAS,yBAGTgvC,YAAA3xC,KAAGO,EAAAA,MAAHoC,MAAS,yBAKTk0B,UAAA72B,KAAGO,EAAAA,MAAHoC,MAAS,gBAiBT6yC,eAAAx1C,KAAGO,EAAAA,MAAHoC,MAAS,sBAtLT0uC,mBAkiBE,QAAFiC,GACYj6B,EACA4c,GADAj1B,KAAZqY,mBAAYA,EACArY,KAAZi1B,oBAAYA,EAbVj1B,KAAF20C,YAAmC,UAGnC30C,KAAA40C,qBAAyC,EAGzC50C,KAAA60C,QAA2C,GAAIjhC,GAAAA,QAG7C5T,KAAF80C,WAA4C90C,KAAKi1B,oBAAoBgC,QAAQC,EAAAA,YAAYC,SAphBzF,MA8hBEmb,GAAF3tC,UAAA6N,KAAE,SAAKy/B,GAAL,GAAFpyC,GAAAG,IAEQA,MAAKmyC,iBACPzgB,aAAa1xB,KAAKmyC,gBAClBnyC,KAAKmyC,eAAiB,MAIxBnyC,KAAK40C,qBAAsB,EAC3B50C,KAAKkyC,eAAiBlgB,WAAW,WAC/BnyB,EAAK80C,YAAc,UACnB90C,EAAKqyC,eAAiB,KAItBryC,EAAKynC,iBACJ2K,IAOLK,EAAF3tC,UAAAmO,KAAE,SAAKm/B,GAAL,GAAFpyC,GAAAG,IAEQA,MAAKkyC,iBACPxgB,aAAa1xB,KAAKkyC,gBAClBlyC,KAAKkyC,eAAiB,MAGxBlyC,KAAKmyC,eAAiBngB,WAAW,WAC/BnyB,EAAK80C,YAAc,SACnB90C,EAAKsyC,eAAiB,KAItBtyC,EAAKynC,iBACJ2K,IAILK,EAAF3tC,UAAA4tC,YAAE,WACE,MAAOvyC,MAAK60C,QAAQxiB,gBAItBigB,EAAF3tC,UAAA6tC,UAAE,WACE,MAA4B,YAArBxyC,KAAK20C,aAGdrC,EAAF3tC,UAAAowC,gBAAE,WACE/0C,KAAK40C,qBAAsB,GAG7BtC,EAAF3tC,UAAAqwC,eAAE,SAAe1zC,GACb,GAAM4V,GAAU5V,EAAkC,OAElC,YAAZ4V,GAAyBlX,KAAKwyC,aAChCxyC,KAAK60C,QAAQlpC,OAGC,YAAZuL,GAAqC,WAAZA,IAC3BlX,KAAK40C,qBAAsB,IAS/BtC,EAAF3tC,UAAAswC,uBAAE,WACMj1C,KAAK40C,qBACP50C,KAAK8S,KAAK,IASdw/B,EAAF3tC,UAAA2iC,cAAE,WACEtnC,KAAKqY,mBAAmBxB,+BApI5B7X,KAACgH,EAAAA,UAADrE,OAAAwC,SAAA,wBACE8B,SAAU,mOACVC,QAAF,wVACExH,cAAFC,EAAAA,kBAAAC,KACEC,gBAAFC,EAAAA,wBAAAC,OACEyY,YAAaq4B,GAAfC,cACEtxC,2GAKE02C,cAAJ,wGAxfA5C,iCoDZA,sBAoBAtzC,KAAC4D,EAAAA,SAADjB,OACEkB,SACEM,EAAAA,WACAL,EAAAA,aACA0xB,EAAAA,cACAzxB,IAEFK,SAAUitC,GAAYiC,GAAkBvvC,IACxCU,cAAe4sC,GAAYiC,IAC3B7d,iBAAkB6d,IAClB/qC,WACE0oC,IACCzoC,QAASipB,EAAAA,sBAAuBC,SAAUC,SAhC/CwkB,gCCsBEn1C,KAAFiF,QAAoC,GAAI2O,GAAAA,QAGtC5T,KAAFo1C,kBAA8B,kBAG5Bp1C,KAAFq1C,cAA0B,YAGxBr1C,KAAFs1C,kBAA8B,gBAG5Bt1C,KAAFu1C,eAA2B,aAGzBv1C,KAAFw1C,cAA0B,YAGxBx1C,KAAFy1C,cAAkB,SAACnlC,EAAce,EAAkBlM,GAC/C,GAAc,GAAVA,GAA2B,GAAZkM,EAAiB,MAAO,QAAQlM,CAEnDA,GAASyM,KAAKoK,IAAI7W,EAAQ,EAE1B,IAAMgM,GAAab,EAAOe,CAO1B,OAAUF,GAAa,EAA3B,OAJqBA,EAAahM,EAC1ByM,KAAKE,IAAIX,EAAaE,EAAUlM,GAChCgM,EAAaE,GAErB,OAAiDlM,GApDjD,sBAgBAnG,KAACgiB,EAAAA,WAADrf,OAAasQ,WAAY,8GAhBzByjC,KA8DaC,IAEXnuC,QAASkuC,GACTv0B,OAAQ,GAAI7e,GAAAA,SAAY,GAAI8e,GAAAA,SAAYs0B,KACxCr0B,WAAYu0B,IC9BdC,GAAA,yBApCA,MAAAA,MAuDAC,GAAA,yBAvDA,MAAAA,MAwDaC,GACTrd,EAAiBod,mBAqFnB,QAAFE,GAAqBt0B,EACCrJ,GADpB,GAAFxY,GAEIC,EAFJC,KAAAC,OAAAA,WAAqBH,GAArB6hB,MAAqBA,EACC7hB,EAAtBwY,mBAAsBA,EArDpBxY,EAAFo2C,WAAuB,EASrBp2C,EAAFq2C,QAAoB,EAkBpBr2C,EAAAs2C,oBAQAt2C,EAAAu2C,eAA0B,EAS1Bv2C,EAAAw2C,uBAAkC,EAGhCx2C,EAAFyQ,KAAqD,GAAIkG,GAAAA,aAQrD3W,EAAKy2C,aAAe50B,EAAMzc,QAAQC,UAAU,WAAM,MAAArF,GAAKwY,mBAAmBxB,mBAR9E,MA7DkCnS,GAAlCsxC,EAAAl2C,GAQE2L,OAAFC,eACMsqC,EADNrxC,UAAA,iBAAE,WAC0B,MAAO3E,MAAKi2C,gBACtC,SAAch1C,GACZjB,KAAKi2C,WAAarkC,KAAKoK,IAAIhD,EAAAA,qBAAqB/X,GAAQ,GACxDjB,KAAKqY,mBAAmBxB,gDAK1BpL,OAAFC,eACMsqC,EADNrxC,UAAA,cAAE,WACuB,MAAO3E,MAAKk2C,aACnC,SAAWj1C,GACTjB,KAAKk2C,QAAUl9B,EAAAA,qBAAqB/X,GACpCjB,KAAKqY,mBAAmBxB,gDAK1BpL,OAAFC,eACMsqC,EADNrxC,UAAA,gBAAE,WACyB,MAAO3E,MAAKu2C,eACrC,SAAat1C,GACXjB,KAAKu2C,UAAY3kC,KAAKoK,IAAIhD,EAAAA,qBAAqB/X,GAAQ,GACvDjB,KAAKw2C,mEAKP/qC,OAAFC,eACMsqC,EADNrxC,UAAA,uBAAE,WACkC,MAAO3E,MAAKm2C,sBAC9C,SAAoBl1C,GAClBjB,KAAKm2C,kBAAoBl1C,OAAamL,IAAI,SAAAqqC,GAAK,MAAAz9B,GAAAA,qBAAqBy9B,KACpEz2C,KAAKw2C,mEAKP/qC,OAAFC,eACMsqC,EADNrxC,UAAA,oBAAE,WAC8B,MAAO3E,MAAKo2C,mBAC1C,SAAiBn1C,GACfjB,KAAKo2C,cAAgBn4B,EAAAA,sBAAsBhd,oCAM7CwK,OAAFC,eACMsqC,EADNrxC,UAAA,4BAAE,WACsC,MAAO3E,MAAKq2C,2BAClD,SAAyBp1C,GACvBjB,KAAKq2C,sBAAwBp4B,EAAAA,sBAAsBhd,oCAgBrD+0C,EAAFrxC,UAAAwP,SAAE,WACEnU,KAAK02C,cAAe,EACpB12C,KAAKw2C,kCACLx2C,KAAKy5B,oBAGPuc,EAAFrxC,UAAAsD,YAAE,WACEjI,KAAKs2C,aAAatlC,eAIpBglC,EAAFrxC,UAAAgyC,SAAE,WACE,GAAK32C,KAAK42C,cAAV,CAEA,GAAMC,GAAoB72C,KAAKoR,SAC/BpR,MAAKoR,YACLpR,KAAK82C,eAAeD,KAItBb,EAAFrxC,UAAAoyC,aAAE,WACE,GAAK/2C,KAAKg3C,kBAAV,CAEA,GAAMH,GAAoB72C,KAAKoR,SAC/BpR,MAAKoR,YACLpR,KAAK82C,eAAeD,KAItBb,EAAFrxC,UAAAsyC,UAAE,WAEE,GAAKj3C,KAAKg3C,kBAAV,CAEA,GAAMH,GAAoB72C,KAAKoR,SAC/BpR,MAAKoR,UAAY,EACjBpR,KAAK82C,eAAeD,KAItBb,EAAFrxC,UAAAuyC,SAAE,WAEE,GAAKl3C,KAAK42C,cAAV,CAEA,GAAMC,GAAoB72C,KAAKoR,SAC/BpR,MAAKoR,UAAYpR,KAAKm3C,mBAAqB,EAC3Cn3C,KAAK82C,eAAeD,KAItBb,EAAFrxC,UAAAqyC,gBAAE,WACE,MAAOh3C,MAAKoR,WAAa,GAAsB,GAAjBpR,KAAKqR,UAIrC2kC,EAAFrxC,UAAAiyC,YAAE,WACE,GAAMQ,GAAep3C,KAAKm3C,mBAAqB,CAC/C,OAAOn3C,MAAKoR,UAAYgmC,GAAiC,GAAjBp3C,KAAKqR,UAI/C2kC,EAAFrxC,UAAAwyC,iBAAE,WACE,MAAKn3C,MAAKqR,SAIHO,KAAKC,KAAK7R,KAAKmF,OAASnF,KAAKqR,UAH3B,GAeX2kC,EAAFrxC,UAAA0yC,gBAAE,SAAgBhmC,GAGd,GAAMF,GAAanR,KAAKoR,UAAYpR,KAAKqR,SACnCwlC,EAAoB72C,KAAKoR,SAE/BpR,MAAKoR,UAAYQ,KAAKm6B,MAAM56B,EAAaE,IAAa,EACtDrR,KAAKqR,SAAWA,EAChBrR,KAAK82C,eAAeD,IAOdb,EAAVrxC,UAAA6xC,2CACSx2C,KAAK02C,eAGL12C,KAAKqR,WACRrR,KAAKu2C,UAA2C,GAA/Bv2C,KAAKs3C,gBAAgBnyC,OAClCnF,KAAKs3C,gBAAgB,GAxNL,IA4NtBt3C,KAAKu3C,0BAA4Bv3C,KAAKs3C,gBAAgBlyC,SAES,IAA3DpF,KAAKu3C,0BAA0B1nC,QAAQ7P,KAAKqR,WAC9CrR,KAAKu3C,0BAA0B3tC,KAAK5J,KAAKqR,UAI3CrR,KAAKu3C,0BAA0B3oC,KAAK,SAACG,EAAGC,GAAM,MAAAD,GAAIC,IAClDhP,KAAKqY,mBAAmBxB,iBAIlBm/B,EAAVrxC,UAAAmyC,eAAA,SAAyBD,GACrB72C,KAAKsQ,KAAK6G,MACR0/B,kBAANA,EACMzlC,UAAWpR,KAAKoR,UAChBC,SAAUrR,KAAKqR,SACflM,OAAQnF,KAAKmF,yBA3MnBnG,KAACgH,EAAAA,UAADrE,OAAAwC,SAAA,gBACEvC,SAAU,eACVqE,SAAU,wjFACVC,QAAF,q0BACE1H,MACFC,MAAA,iBAEAI,gBAAAC,EAAAA,wBAAAC,OACAL,cAAAC,EAAAA,kBAAAC,mFA7DAo3C,EAAA32C,kEAsEA8F,SAAAnG,KAAAO,EAAAA,QAGA8R,WAAArS,KAAAO,EAAAA,QASA+3C,kBAAAt4C,KAAAO,EAAAA,QASAi4C,eAAAx4C,KAAAO,EAAAA,QASAk4C,uBAAAz4C,KAAQO,EAAAA,QASR+Q,OAAAtR,KAAAyY,EAAAA,UAiBAu+B,mCCzIA,sBAiBAh3C,KAAC4D,EAAAA,SAADjB,OACEkB,SACEC,EAAAA,aACA0kB,GACAooB,GACAuF,IAEF/xC,SAAU4yC,IACVvyC,cAAeuyC,IACfzuC,WAAYouC,QA1Bd+B,KZmCAC,GAAA,WACE,QAAFA,GAAqBz3C,GAAAF,KAArBE,YAAqBA,EApCrB,MAAAy3C,MA4CaC,GACT1zC,EAAWyzC,GAAoB,WAOtBrU,GAA4B,GAAItxB,GAAAA,eAC3C,6BACCC,WAAY,OAAQC,QAAS2lC,KAoB5BC,GAAgB,iBA0BlB,QAAFvU,GAAqBrjC,EAAiCkS,EACUsqB,EAKHqb,GAN3D,GAAFl4C,GAOIC,EAPJC,KAAAC,KAOUE,IAPVF,IAAqBH,GAArBK,YAAqBA,EAAiCL,EAAtDuS,QAAsDA,EACUvS,EAAhE68B,eAAgEA,EAqB9D78B,EAAFm4C,kBAAqB,EAarBn4C,EAAAypB,OAA2B,EAM3BzpB,EAAAo4C,aAAiC,EAS/Bp4C,EAAF4jC,aAA2B,GAAIjtB,GAAAA,aAG/B3W,EAAAq4C,0BAAoD7pC,EAAAA,aAAaC,MAS/DzO,EAAFk7B,KAAwE,cAGtEl7B,EAAFi4C,cAAkB,oBAAoBA,IAjDlC,IAAMK,GAAOJ,GAAYA,EAASK,SAAWL,EAASK,SAAShV,MAAM,KAAK,GAAK,SAC/EvjC,GAAKw4C,oBAAsB,QAAQF,EAAvC,IAA+Ct4C,EAAKi4C,cAApD,KACIj4C,EAAKm4C,iBAAsC,mBAAnBtb,IA4C5B,MAhEoCh4B,GAApC6+B,EAAAzjC,GA2BE2L,OAAFC,eACM63B,EADN5+B,UAAA,aAAE,WACsB,MAAO3E,MAAKspB,YAClC,SAAUvN,GACR/b,KAAKspB,OAASgvB,GAAMv8B,GAAK,GAGrB/b,KAAKg4C,kBACPh4C,KAAKu4C,oDAMT9sC,OAAFC,eACM63B,EADN5+B,UAAA,mBAAE,WAC4B,MAAO3E,MAAKi4C,kBACxC,SAAgBl8B,GAAa/b,KAAKi4C,aAAeK,GAAMv8B,GAAK,oCA+B5DwnB,EAAF5+B,UAAA6zC,kBAAE,WAEE,OAAQ1jC,UAAW,UADL9U,KAAKiB,MAAQ,IAC/B,MAOEsiC,EAAF5+B,UAAA8zC,iBAAE,WACE,GAAkB,WAAdz4C,KAAK+6B,KAAmB,CAE1B,OAAQjmB,UAAW,UADL9U,KAAK04C,YAAc,IACvC,OAIEnV,EAAF5+B,UAAAC,gBAAE,WAAA,GAAF/E,GAAAG,IACSA,MAAKg4C,kBAGRh4C,KAAKoS,QAAQM,kBAAiB,WAC5B7S,EAAKq4C,0BACDS,EAAAA,UAA2B94C,EAAK2jC,iBAAiBljC,cAAe,iBAC/D2J,KAAK3E,EAAAA,OAAM,SAAG2R,GACb,MAAAA,GAAE2hC,SAAW/4C,EAAK2jC,iBAAiBljC,iBACpC4E,UAAU,SAAAw7B,GAAK,MAAA7gC,GAAKuS,QAAQ8I,IAAI,WAAM,MAAArb,GAAK04C,0BAKtDhV,EAAF5+B,UAAAsD,YAAE,WACEjI,KAAKk4C,0BAA0BlnC,eAIzBuyB,EAAV5+B,UAAA4zC,4BACsB,gBAAdv4C,KAAK+6B,MAAwC,WAAd/6B,KAAK+6B,MACtC/6B,KAAKyjC,aAAa93B,MAAM1K,MAAOjB,KAAKiB,wBAjI1CjC,KAACgH,EAAAA,UAADrE,OAAAwC,SAAA,mBACEvC,SAAU,iBACVpD,MACF0I,KAAA,cACM2xC,gBAAN,IACIC,gBAAJ,MACIlpB,uBAAJ,QACIoW,cAAe,OACfvnC,MAAJ,mBACI8xB,kCAAJ,oBAEA1uB,QAAA,SACAoE,SAAA,spBACEC,QAAS;y3JACTrH,gBAAFC,EAAAA,wBAAAC,OACEL,cAAFC,EAAAA,kBAAAC,iFApFAI,KAAEyD,OAAFhB,aAAAzC,KAAAsD,EAAAA,WAAAtD,KAAAuD,EAAAA,OAAAZ,MAAA6uB,EAAAA,2BAMAxxB,SAAEqD,GAAFZ,aAAAzC,KAAAsD,EAAAA,WAAAtD,KAAAuD,EAAAA,OAAAZ,MAAA2hC,SA0FAC,EAAAlkC,oEAmBAmkC,mBAAQxkC,KAARuV,EAAAA,UAAA5S,MAAA,qBAaA8hC,eAAAzkC,KAAAyY,EAAAA,SAKAsjB,OAAA/7B,KAAAO,EAAAA,SAmBAgkC,mCClKA,sBAcAvkC,KAAC4D,EAAAA,SAADjB,OACEkB,SAAUC,EAAAA,aAAcC,IACxBK,SAAUmgC,GAAgBxgC,IAC1BU,cAAe8/B,QAjBjBG,KCgCMC,GAAY,IAUlBC,GAAA,WACE,QAAFA,GAAqB1jC,GAAAF,KAArBE,YAAqBA,EA3CrB,MAAA0jC,MA6CaC,GACT3/B,EAAW0/B,GAAwB,WAgB1BE,GACT,GAAI9xB,GAAAA,eAAiD,wCACnDC,WAAY,OACZC,QAAS6xB,KAYTC,GAAmC,27CAoGvC,QAAFC,GAAqB/jC,EACPgkC,EACsCz/B,EAEa0/B,EAEvC1D,GANxB,GAAF5gC,GAQIC,EARJC,KAAAC,KAQUE,IARVF,IAAqBH,GAArBK,YAAqBA,EAE+BL,EAApD4E,UAAoDA,EAEa5E,EAAjEskC,cAAiEA,EAEvCtkC,EAA1B4gC,SAA0BA,EAxD1B5gC,EAAAypB,OAAmB,EAEnBzpB,EAAAukC,oBAA+B,EAY7BvkC,EAAFwkC,gBAAoD,mBAAvBxkC,EAAKskC,iBAC1BtkC,EAAK4gC,WAAa5gC,EAAK4gC,SAAS6D,iBAYxCzkC,EAAA0kC,UAAsBZ,GAYpB9jC,EAAFk7B,KAAuC,cAoBnCl7B,EAAKukC,mBAAqBF,EAASM,MAAQN,EAASO,QAEhDhE,IACEA,EAASiE,WACX7kC,EAAK6kC,SAAWjE,EAASiE,UAGvBjE,EAASkE,cACX9kC,EAAK8kC,YAAclE,EAASkE,aAMhC,IAAMC,GACJ,sCAAqC/kC,EAAKukC,mBAAqB,YAAc,IADnF,mBAGIlkC,GAAYI,cAAckF,UAAU4Y,IAAIwmB,KAlC5C,MA5CwClgC,GAAxCu/B,EAAAnkC,GAoBE2L,OAAFC,eACMu4B,EADNt/B,UAAA,gBAAE,WACyB,MAAO3E,MAAKukC,eACrC,SAAa/W,GACXxtB,KAAKukC,UAAYvrB,EAAAA,qBAAqBwU,GAEjCxtB,KAAKokC,oBAAuBH,EAAmBY,UAAU5L,IAAIj5B,KAAKukC,YACrEvkC,KAAK8kC,oDAMTr5B,OAAFC,eACMu4B,EADNt/B,UAAA,mBAAE,WAEE,MAAO3E,MAAK+kC,cAAgB/kC,KAAK0kC,SAAW,QAE9C,SAAgBzjC,GACdjB,KAAK+kC,aAAe/rB,EAAAA,qBAAqB/X,oCAO3CwK,OAAFC,eACMu4B,EADNt/B,UAAA,aAAE,WAEE,MAAqB,gBAAd3E,KAAK+6B,KAAyB/6B,KAAKspB,OAAS,OAErD,SAAU0b,GACRhlC,KAAKspB,OAAS1X,KAAKoK,IAAI,EAAGpK,KAAKE,IAAI,IAAKkH,EAAAA,qBAAqBgsB,sCAiC/Dv5B,OAAFC,eAAMu4B,EAANt/B,UAAA,qBAAE,WACE,OAAQ3E,KAAK0kC,SA1KS,IA0KuB,mCAI/Cj5B,OAAFC,eAAMu4B,EAANt/B,UAAA,gBAAE,WACE,GAAMsgC,GAA+B,EAArBjlC,KAAKklC,cAAoBllC,KAAK2kC,WAC9C,OAAO,OAAOM,EAAlB,IAA6BA,mCAI3Bx5B,OAAFC,eAAMu4B,EAANt/B,UAAA,4BAAE,WACE,MAAO,GAAIiN,KAAKuzB,GAAKnlC,KAAKklC,+CAI5Bz5B,OAAFC,eAAMu4B,EAANt/B,UAAA,yBAAE,WACE,MAAkB,gBAAd3E,KAAK+6B,KACA/6B,KAAKolC,sBAAwB,IAAMplC,KAAKspB,QAAU,IAIvDtpB,KAAKokC,oBAAoC,kBAAdpkC,KAAK+6B,KACC,GAA5B/6B,KAAKolC,qBAGP,sCAIT35B,OAAFC,eAAMu4B,EAANt/B,UAAA,0BAAE,WACE,MAAO3E,MAAK2kC,YAAc3kC,KAAK0kC,SAAW,qCAIpCT,EAAVt/B,UAAAmgC,4BACI,GAAIO,GAAWpB,EAAmBoB,QAE7BA,KACHA,EAAWrlC,KAAKyE,UAAU6gC,cAAc,SACxCtlC,KAAKyE,UAAU8gC,KAAKC,YAAYH,GAChCpB,EAAmBoB,SAAWA,GAG5BA,GAAYA,EAASI,OACtBJ,EAA+B,MAAEK,WAAW1lC,KAAK2lC,oBAAqB,GAGzE1B,EAAmBY,UAAUzmB,IAAIpe,KAAK0kC,WAIhCT,EAAVt/B,UAAAghC,6BACI,MAAO3B,IAEF4B,QAAQ,eAAgB,GAAG,IAAO5lC,KAAKolC,sBACvCQ,QAAQ,aAAc,GAAG,GAAM5lC,KAAKolC,sBACpCQ,QAAQ,YAAa,GAAG5lC,KAAK0kC,WApItCT,EAAAY,UAA6B,GAAIgB,MAAalC,KAM9CM,EAAAoB,SAAmD,oBAlCnDrmC,KAACgH,EAAAA,UAADrE,OAAAwC,SAAA,uBACEvC,SAAU,qBACVpD,MACF0I,KAAA,cACMzI,MAAN,uBACI8xB,kCAAJ,kBACIuV,mBAAJ,WACIC,oBAAJ,WACIpW,uBAAJ,oCACID,uBAAJ,sCACIE,uBAAwB,QACxBoW,cAAJ,QAEAnkC,QAAA,SACAoE,SAAA,8sBACEC,QAAS,mkGACTrH,gBAAFC,EAAAA,wBAAAC,OACEL,cAAFC,EAAAA,kBAAAC,mFA3GAI,SAAEqD,GAAFZ,aAAAzC,KAAAsD,EAAAA,WAAAtD,KAAAuD,EAAAA,OAAAZ,MAAA0E,EAAAA,cALArH,KAAQyD,OAAQhB,aAAhBzC,KAAAsD,EAAAA,WAAAtD,KAAAuD,EAAAA,OAAAZ,MAAA6uB,EAAAA,2BA0KAxxB,SAAAqD,GAAAZ,aAAAzC,KAAeuD,EAAAA,OAAQZ,MAAvBmiC,SAGAG,EAAA5kC,uEArCA07B,OAAA/7B,KAAAO,EAAAA,QAYA0B,QAAAjC,KAAAO,EAAAA,SAYA0kC,uCA4HEE,EAAF1D,qCAAE,OAGF5gC,GAAAk7B,KAAA,gBAHAl7B,EACA,6BAOAb,KAAAgH,EAAAA,UAAArE,OAAAwC,SAAA,oBA1BA+C,KAAA,cACA6zB,KAAA,gBACAt8B,MAAA,mCACM8xB,kCAAN,kBACIuV,mBAAJ,WACIC,oBAAJ,YAEAlkC,QAAA,SACAoE,SAAA,8sBACAC,QAAA,mkGACArH,gBAAAC,EAAAA,wBAAAC,OACEL,cAAFC,EAAAA,kBAAAC,SAIAqnC,EAAAjf,eAAA,WAAA,QACAhoB,KAAA0I,EAAAA,0MArRA1I,SAAEqD,GAAFZ,aAAAzC,KAAAuD,EAAAA,OAAAZ,MAAAmiC,SAwRAmC,GAEAhC,ICjSAiC,GAAA,yBAPA,sBAaAlnC,KAAC4D,EAAAA,SAADjB,OACEkB,SAAUE,GAAiBD,EAAAA,cAC3BM,SACE6gC,GACAgC,GACAljC,IAEFU,cACEwgC,GACAgC,QAtBJC,KCmDIlG,GAAe,EAONmG,IACX3+B,QAAS04B,EAAAA,kBACTz4B,YAAayO,EAAAA,WAAW,WAAM,MAAAkwB,MAC9BhG,OAAO,GAITiG,GAAA,WACE,QAAFA,GAEW9X,EAEAttB,GAFAjB,KAAXuuB,OAAWA,EAEAvuB,KAAXiB,MAAWA,EAtEX,MAAAolC,MA4EAC,GAAA,yBA5EA,MAAAA,MA6EaC,GACT3mC,EAAc0mC,mBAiIhB,QAAFF,GAAsBI,GAApB,GAAF3mC,GACIC,EADJC,KAAAC,OAAAA,WAAsBH,GAAtB2mC,gBAAsBA,EA9GtB3mC,EAAAypB,OAAwB,KAGxBzpB,EAAA4mC,MAA0B,mBAAmBzG,KAG7CngC,EAAA6mC,UAA6C,KAG7C7mC,EAAA8mC,gBAAoC,EAGpC9mC,EAAA+mC,eAA+C,QAG/C/mC,EAAAgnC,WAA+B,EAG/BhnC,EAAA+gC,WAA+B,EAG7B/gC,EAAFiuB,8BAAwD,aAMtDjuB,EAAF4sB,UAAyB,aAOvB5sB,EAAF6W,OAA4D,GAAIF,GAAAA,eAnIhE,MA6FmC9R,GAAnC0hC,EAAAtmC,GA6CE2L,OAAFC,eACM06B,EADNzhC,UAAA,YAAE,WACqB,MAAO3E,MAAKymC,WACjC,SAASxlC,GACPjB,KAAKymC,MAAQxlC,EACbjB,KAAK8mC,2DAIPr7B,OAAFC,eACM06B,EADNzhC,UAAA,qBAAE,WAEE,MAAO3E,MAAK4mC,oBAEd,SAAkB7qB,GAChB/b,KAAK4mC,eAAuB,WAAN7qB,EAAiB,SAAW,QAClD/b,KAAK+mC,uDASPt7B,OAAFC,eACM06B,EADNzhC,UAAA,aAAE,WACmB,MAAO3E,MAAKspB,YAC/B,SAAU0b,GACJhlC,KAAKspB,SAAW0b,IAElBhlC,KAAKspB,OAAS0b,EAEdhlC,KAAKgnC,gCACLhnC,KAAKinC,8DAITb,EAAFzhC,UAAAsiC,0BAAE,WACMjnC,KAAK0mC,YAAc1mC,KAAK0mC,UAAUpG,UACpCtgC,KAAK0mC,UAAUpG,SAAU,IAQ7B70B,OAAFC,eACM06B,EADNzhC,UAAA,gBAAE,WACiB,MAAO3E,MAAK0mC,eAC7B,SAAa3hB,GACX/kB,KAAK0mC,UAAY3hB,EACjB/kB,KAAKiB,MAAQ8jB,EAAWA,EAAS9jB,MAAQ,KACzCjB,KAAKinC,6DAIPx7B,OAAFC,eACM06B,EADNzhC,UAAA,gBAAE,WAC0B,MAAO3E,MAAK6mC,eACtC,SAAa5lC,GACXjB,KAAK6mC,UAAY5oB,EAAAA,sBAAsBhd,GACvCjB,KAAK+mC,uDAIPt7B,OAAFC,eACM06B,EADNzhC,UAAA,gBAAE,WAC0B,MAAO3E,MAAK4gC,eACtC,SAAa3/B,GACXjB,KAAK4gC,UAAY3iB,EAAAA,sBAAsBhd,GACvCjB,KAAK+mC,uDAWPX,EAAFzhC,UAAAqD,mBAAE,WAIEhI,KAAK2mC,gBAAiB,GAOxBP,EAAFzhC,UAAAuiC,OAAE,WACMlnC,KAAKysB,WACPzsB,KAAKysB,aAID2Z,EAAVzhC,UAAAmiC,6CACQ9mC,MAAKmnC,SACPnnC,KAAKmnC,QAAQ/8B,QAAQ,SAAAg9B,GACnBA,EAAM7kB,KAAO1iB,EAAK0iB,QAMhB6jB,EAAVzhC,UAAAqiC,oDAEUK,EAAuC,OAAnBrnC,KAAK0mC,WAAsB1mC,KAAK0mC,UAAUzlC,QAAUjB,KAAKspB,MAE/EtpB,MAAKmnC,UAAYE,IACnBrnC,KAAK0mC,UAAY,KACjB1mC,KAAKmnC,QAAQ/8B,QAAQ,SAAAg9B,GACnBA,EAAM9G,QAAUzgC,EAAKoB,QAAUmmC,EAAMnmC,MACjCmmC,EAAM9G,UACRzgC,EAAK6mC,UAAYU,OAOzBhB,EAAFzhC,UAAAsnB,iBAAE,WACMjsB,KAAK2mC,gBACP3mC,KAAK0W,OAAOS,KAAK,GAAIkvB,IAAermC,KAAc,UAAGA,KAAKspB,UAI9D8c,EAAFzhC,UAAAoiC,oBAAE,WACM/mC,KAAKmnC,SACPnnC,KAAKmnC,QAAQ/8B,QAAQ,SAAAg9B,GAAS,MAAAA,GAAME,mBAQxClB,EAAFzhC,UAAAgqB,WAAE,SAAW1tB,GACTjB,KAAKiB,MAAQA,EACbjB,KAAKwmC,gBAAgB3vB,gBAQvBuvB,EAAFzhC,UAAAiqB,iBAAE,SAAiBC,GACf7uB,KAAK8tB,8BAAgCe,GAQvCuX,EAAFzhC,UAAAmqB,kBAAE,SAAkBD,GAChB7uB,KAAKysB,UAAYoC,GAOnBuX,EAAFzhC,UAAAoqB,iBAAE,SAAiBC,GACfhvB,KAAKW,SAAWquB,EAChBhvB,KAAKwmC,gBAAgB3vB,+BA3NzB7X,KAAC0C,EAAAA,UAADC,OACEwC,SAAU,kBACVvC,SAAU,gBACV2F,WAAY4+B,IACZ3nC,MACE0I,KAAQ,aACRzI,MAAS,mBAEXoD,QAAS,oDA5EX7C,KAAEE,EAAAA,uCAoHFwX,SAAA1X,KAAGyY,EAAAA,SAGH0vB,UAAAnoC,KAAGoJ,EAAAA,gBAAHzG,MAAmBuU,EAAAA,WAAW,WAAM,MAAAqxB,OAAmBC,aAAa,MAIpEjlB,OAAAvjB,KAAGO,EAAAA,QAQHsnB,gBAAA7nB,KAAGO,EAAAA,QAeH0B,QAAAjC,KAAGO,EAAAA,QAsBHwlB,WAAA/lB,KAAGO,EAAAA,QASHoB,WAAA3B,KAAGO,EAAAA,QAQHojC,WAAA3jC,KAAGO,EAAAA,SAxMH6mC,GA6FmCG,IAuNnCkB,GAAA,WAME,QAAFA,GAAqBvnC,GAAAF,KAArBE,YAAqBA,EA1TrB,MAAAunC,MA8TaC,GAELxjC,EAAWvE,EAAmBD,EAAc+nC,KAAsB,yBAwJxE,QAAFF,GAA0BI,EACZrjC,EACQkiC,EACArmC,EACAynC,EAC0ClL,GAL9D,GAAF78B,GAMIC,EANJC,KAAAC,KAMUsE,IANVtE,WAEsBH,GAAtB2mC,gBAAsBA,EACA3mC,EAAtBM,cAAsBA,EACAN,EAAtB+nC,iBAAsBA,EAC0C/nC,EAAhE68B,eAAgEA,EA/HhE78B,EAAA8gC,UAA8B,gBAAeX,GAG3CngC,EAAFkhB,GAAwBlhB,EAAK8gC,UA6F3B9gC,EAAF6W,OAA4D,GAAIF,GAAAA,aAShE3W,EAAAghC,UAA8B,EAS9BhhC,EAAAypB,OAAwB,KAGxBzpB,EAAAgoC,+BAAuD,aAenDhoC,EAAK8nC,WAAaA,EAElB9nC,EAAKgoC,+BACHD,EAAiBE,OAAO,SAAC/mB,EAAYwB,GAC/BxB,IAAOlhB,EAAKkhB,IAAMwB,IAAS1iB,EAAK0iB,OAClC1iB,EAAKygC,SAAU,OAjBzB,MA3HoC57B,GAApC6iC,EAAAznC,GAqBE2L,OAAFC,eACM67B,EADN5iC,UAAA,eAAE,WACyB,MAAO3E,MAAK6gC,cACrC,SAAY5/B,GACV,GAAM8mC,GAAkB9pB,EAAAA,sBAAsBhd,EAC1CjB,MAAK6gC,WAAakH,IACpB/nC,KAAK6gC,SAAWkH,EACZA,GAAmB/nC,KAAK2nC,YAAc3nC,KAAK2nC,WAAW1mC,QAAUjB,KAAKiB,MACvEjB,KAAK2nC,WAAW5iB,SAAW/kB,MACjB+nC,GAAmB/nC,KAAK2nC,YAAc3nC,KAAK2nC,WAAW1mC,QAAUjB,KAAKiB,QAI/EjB,KAAK2nC,WAAW5iB,SAAW,MAGzBgjB,GAEF/nC,KAAK4nC,iBAAiBI,OAAOhoC,KAAK+gB,GAAI/gB,KAAKuiB,MAE7CviB,KAAKwmC,gBAAgB3vB,iDAKzBpL,OAAFC,eACM67B,EADN5iC,UAAA,aAAE,WACmB,MAAO3E,MAAKspB,YAC/B,SAAUroB,GACJjB,KAAKspB,SAAWroB,IAClBjB,KAAKspB,OAASroB,EACU,OAApBjB,KAAK2nC,aACF3nC,KAAKsgC,UAERtgC,KAAKsgC,QAAUtgC,KAAK2nC,WAAW1mC,QAAUA,GAEvCjB,KAAKsgC,UACPtgC,KAAK2nC,WAAW5iB,SAAW/kB,yCAOnCyL,OAAFC,eACM67B,EADN5iC,UAAA,qBAAE,WAEE,MAAO3E,MAAK4mC,gBAAmB5mC,KAAK2nC,YAAc3nC,KAAK2nC,WAAW9gB,eAAkB,aAEtF,SAAkB5lB,GAChBjB,KAAK4mC,eAAiB3lC,mCAKxBwK,OAAFC,eACM67B,EADN5iC,UAAA,gBAAE,WAEE,MAAO3E,MAAK6mC,WAAkC,OAApB7mC,KAAK2nC,YAAuB3nC,KAAK2nC,WAAWhnC,cAExE,SAAaM,GACX,GAAMgnC,GAAmBhqB,EAAAA,sBAAsBhd,EAC3CjB,MAAK6mC,YAAcoB,IACrBjoC,KAAK6mC,UAAYoB,EACjBjoC,KAAKwmC,gBAAgB3vB,iDAKzBpL,OAAFC,eACM67B,EADN5iC,UAAA,gBAAE,WAEE,MAAO3E,MAAK4gC,WAAc5gC,KAAK2nC,YAAc3nC,KAAK2nC,WAAWhF,cAE/D,SAAa1hC,GACXjB,KAAK4gC,UAAY3iB,EAAAA,sBAAsBhd,oCAczCwK,OAAFC,eAAM67B,EAAN5iC,UAAA,eAAE,WAAwB,OAAU3E,KAAK+gB,IAAM/gB,KAAK2gC,WAApD,0CAyCE4G,EAAF5iC,UAAAmT,MAAE,WACE9X,KAAKG,cAAck7B,SAASr7B,KAAKmhC,cAAe,aAQlDoG,EAAF5iC,UAAA2iC,cAAE,WAGEtnC,KAAKwmC,gBAAgB3vB,gBAGvB0wB,EAAF5iC,UAAAwP,SAAE,WACMnU,KAAK2nC,aAEP3nC,KAAKsgC,QAAUtgC,KAAK2nC,WAAW1mC,QAAUjB,KAAKspB,OAE9CtpB,KAAKuiB,KAAOviB,KAAK2nC,WAAWplB,OAIhCglB,EAAF5iC,UAAAC,gBAAE,WAAA,GAAF/E,GAAAG,IACIA,MAAKG,cACFW,QAAQd,KAAKE,aAAa,GAC1BgF,UAAU,SAAA+7B,IACJA,GAAephC,EAAK8nC,YACvB9nC,EAAK8nC,WAAWT,YAKxBK,EAAF5iC,UAAAsD,YAAE,WACEjI,KAAKG,cAAckB,eAAerB,KAAKE,aACvCF,KAAK6nC,kCAICN,EAAV5iC,UAAAsnB,4BACIjsB,KAAK0W,OAAOS,KAAK,GAAIkvB,IAAermC,KAAMA,KAAKspB,UAGjDie,EAAF5iC,UAAAujC,kBAAE,WACE,MAAOloC,MAAKmoC,eAAiBnoC,KAAKW,UAGpC4mC,EAAF5iC,UAAAy8B,cAAE,SAAc9/B,GAQZA,EAAMq5B,mBAOR4M,EAAF5iC,UAAAyjC,eAAE,SAAe9mC,GAIbA,EAAMq5B,iBAEN,IAAM0N,GAAoBroC,KAAK2nC,YAAc3nC,KAAKiB,QAAUjB,KAAK2nC,WAAW1mC,KAC5EjB,MAAKsgC,SAAU,EACftgC,KAAKisB,mBAEDjsB,KAAK2nC,aACP3nC,KAAK2nC,WAAW7Z,8BAA8B9tB,KAAKiB,OACnDjB,KAAK2nC,WAAWT,SACZmB,GACFroC,KAAK2nC,WAAW1b,oCArPxBjtB,KAACgH,EAAAA,UAADrE,OAAAwC,SAAA,mBACE8B,SAAU,++BACVC,QAAF,o9DACErE,QAAF,QAAA,gBAAA,YACEnD,cAAFC,EAAAA,kBAAAC,KACEgD,SAAF,iBACEpD,MACFC,MAAA,mBACM6pC,4BAAN,UACIC,6BAAJ,WACIhY,kCAAJ,sCACIgS,kBAAJ,OACIiG,YAAJ,sDAMA3pC,gBAAAC,EAAAA,wBAAAC,4GAiIAC,KAAsCE,EAAAA,oBArctCF,KAAE2D,EAAAA,eAJF3D,KAAEypC,EAAAA,4BAPFzpC,KAAQyD,OAARhB,aAAAzC,KAAAsD,EAAAA,WAAAtD,KAAAuD,EAAAA,OAAAZ,MAAA6uB,EAAAA,4BAqdA+W,EAAAloC,0DA5HAmV,YAAAxV,KAAAO,EAAAA,MAAAoC,MAAA,gBAGA8S,iBAAAzV,KAAAO,EAAAA,MAAAoC,MAAA,qBAGA+mC,kBAAG1pC,KAAHO,EAAAA,MAAAoC,MAAA,sBAGA2+B,UAAAthC,KAAAO,EAAAA,QAGA0B,QAAAjC,KAAAO,EAAAA,QAGAsnB,gBAAG7nB,KAAHO,EAAAA,QAwBAoB,WAAA3B,KAAAO,EAAAA,QAkBAojC,WAAA3jC,KAAAO,EAAAA,QAUAmX,SAAA1X,KAAAyY,EAAAA,SAaA0pB,gBAAAniC,KAAQuV,EAAAA,UAAR5S,MAAA,YAqCA4lC,mCCtdA,sBAcAvoC,KAAC4D,EAAAA,SAADjB,OACEkB,SAAUC,EAAAA,aAAcG,GAAiBF,IACzCK,SAAUgjC,GAAemB,GAAgBxkC,IACzCU,cAAe2iC,GAAemB,QAjBhCoB,KCoBa9M,IAIXC,gBAAiBlnB,EAAAA,QAAQ,aAKvBC,EAAAA,MAAM,qBAAsBjC,EAAAA,OAC1BkC,UAAa,OACbjC,WAAc,aAEhBgC,EAAAA,MAAM,OAAQjC,EAAAA,OAEZg2B,aAAc,OACd/1B,WAAc,YAEhBmC,EAAAA,WAAW,uBAAwBC,EAAAA,QAAQ,QAC3CD,EAAAA,WAAW,sCACPC,EAAAA,QAAQ,8CZiBH4zB,GACT,GAAI72B,GAAAA,eAAwB,+BAC1BC,WAAY,OACZC,QAAS42B,oBAqBb,QAAFrK,GACcpmB,EAC6C0wB,EACrDzkC,EACAu6B,EACAC,GALJ,GAAFj/B,GAMIC,EANJC,KAAAC,KAMUsE,EAAYu6B,EAAkBC,IANxC9+B,WACcH,GAAdwY,mBAAcA,EAC6CxY,EAA3DkpC,WAA2DA,IArD3D,MAkDsCrkC,GAAtC+5B,EAAA3+B,GAUE2+B,EAAF95B,UAAAqD,mBAAE,WAAA,GAAFnI,GAAAG,IACIA,MAAK+oC,WAAW1K,sBAAsBn5B,UAAU,WAC9CrF,EAAKwY,mBAAmBxB,iCAxB9B7X,KAACgH,EAAAA,UAADrE,OAAAwC,SAAA,qBACE8B,SAAU,4BACVzH,MACFC,MAAA,qBACMsgC,yBAAN,kCACIC,0BAAJ,oCAEAngC,gBAAAC,EAAAA,wBAAAC,OACAL,cAAAC,EAAAA,kBAAAC,0JAzDAI,KAAE0I,EAAAA,aAgEF1I,KAAuEigC,EAAAA,mBA3DvEjgC,KAAEC,EAAAA,UAMFw/B,oEAiMAz+B,MAAAE,YAAAA;oBAAEF,KAAF85B,kBAAAA,EAAsB95B,KAAtBG,cAAAA,EACsBH,KAAtBuE,UAAAA,EACsBvE,KAAtBoS,QAAAA,EACsBpS,KAAtB+5B,KAAAA,EACsB/5B,KAAtBg6B,qCAAA,sDAnGAh6B,KAAAi6B,MAAA,OAaAj6B,KAAAk6B,eAAA,EASAl6B,KAAAm6B,YAAA,0FAwBE,GAAF3jB,GAAAA,cAAA,6FA0CExW,KAAFo6B,aAAAl1B,UAAA,SAAAm1B,GA6GAA,GA/FAx6B,EAAsBk6B,OACtBl6B,EAAAm6B,qCAAAn6B,EAAAk6B,KAAA,eAEUl6B,EAAKy6B,qBAAfz6B,EAAA06B,YACA16B,EAAA26B,cAKA36B,EAAA46B,+OAUA56B,EAAA66B,QACAp5B,EAAiCq5B,wBAlDjC,MAwDAlvB,QAAOC,eAAPkvB,EAAAj2B,UAAA,YA7HA5D,uDAEAE,EAAA,QAAAA,EAAA,MAAA,2BAEAjB,KAAA0V,UAAAzU,EACQjB,KAAK66B,kBAAkB1jB,SAG/BhW,YAAA,EACAC,cAAA,8CAIAL,+DAEAf,KAAA86B,aAAAnvB,QAEAxK,YAAA,EACAC,cAAA,sDAIAL,uHAEEK,cAAF,mDAIAL,iHAEEK,cAAF,uDAkBAL,mGAEAI,YAAA,EACAC,cAAA,qDAGAL,6JAEAI,YAAA,EAIAC,cAAA,uDAGAL,mGAEAI,YAAA,EACAC,cAAA,qDAGAL,kJAEAI,YAAA,EAIAC,cAAA,6DAAAL,eAYA,MAAAf,MAAAq6B,QAAA,SAAAr6B,KAAA+6B,MAEA55B,YAAA,EACAC,cAAA,iEAyCApB,KAAAu6B,WAAAS,+BAAAtpB,KAAA,SAAAupB,2JAmBA,GAAAC,GAAAl7B,KAAA+5B,MAAA/5B,KAAA+5B,KAAAoB,8DAEAn7B,KAAAg6B,+CAAAoB,aAEAp7B,KAAAG,cAAAk7B,SAAAr7B,KAAAg6B,qCAAAh6B,KAAAs7B,YAGAt7B,KAAAE,YAAAI,cAAA0pB,QAEAhqB,KAAOg6B,qCAAP,KACAh6B,KAAAs7B,WAAA,+HAMAt7B,KAAAu6B,WAAAgB,QAAAv7B,KAAAs6B,6KAeAt6B,KAAAu6B,WAAAiB,WAGA/vB,OAAAC,eAAAkvB,EAAAj2B,UAAA,qHASEvD,cAAF,2JAqCA,YAdA,KAAAq6B,IAAAA,GAAAz7B,KAAAq6B,YAAA,KAAAqB,IAAAA,EAAA,WAAS17B,KAAT27B,QAAAF,EAAAA,GAGQz7B,KAARszB,gBAAAtzB,KAAA47B,kBAAA,OAAA,eAEQ57B,KAARs7B,WAAAI,IAGA17B,KAAAszB,gBAAA,OAAAtzB,KAAAy6B,iBAEMz6B,KAAKu6B,aACXv6B,KAAAu6B,WAAAgB,QAAAv7B,KAAAs6B,qBAGA,GAAA9oB,SAAqB,SAArBC,GACA5R,EAAAu6B,aAAAnwB,KAAAC,EAAAA,KAAA,IAAAhF,UAAA,SAAA0wB,GAAA,MAAAnkB,GAAAmkB,EAAA,OAAA,+JAWA,IAAA1e,EAAArH,QAAA,SAAA,SAAAyH,GACA,SAAAJ,GAAuC,IAAvCI,EAAAzH,QAAA,UAEQ7P,KAARo6B,aAAAjjB,KAA+BnX,KAA/B27B,UAGAlwB,OAAAC,eAAAkvB,EAAAj2B,UAAA,UACA5D,sGAGAI,YAAA,EACAC,cAAA,mBAAApC,KAAAgH,EAAAA,UAAArE,OAAAwC,SAAA,kCA3RA8B,SAAA,0EACEuR,YAAFqkB,GAAAC,iBACEt9B,MACFC,MAAA,aACAs9B,eAAA,kBACAC,qBAAA,4BACMC,oBAAN,0BAEIC,eAAgB,OAChBC,yBAAJ,qBACIC,0BAAJ,8DAEIC,0BAAJ,kBACI97B,SAAJ,MAEA1B,gBAAAC,EAAAA,wBAAAC,OACAL,cAAAC,EAAAA,kBAAAC,SAIAg8B,EAAA5T,eAAA,WAAA,QACAhoB,KAAA0I,EAAAA,+EAlGA1I,KAAEC,EAAAA,SAhBFD,SAA8CqD,GAA9CZ,aAAAzC,KAAAsD,EAAAA,WAAAtD,KAAAuD,EAAAA,OAAAZ,MAAA0E,EAAAA,eAIAu0B,EAAAv7B,gBAkBAwU,WAAA7U,KAAAO,EAAAA,QAsMAw7B,OAAA/7B,KAAAO,EAAAA,iEAjGA66B,eAAAp7B,KAAAyY,EAAAA,SAaA6kB,gBAAAt9B,KAAAyY,EAAAA,OAAA9V,MAAA,YASA46B,cAAAv9B,KAAAyY,EAAAA,SAMA+kB,gBAAAx9B,KAAAyY,EAAAA,OAAA9V,MAAA,YAeA86B,cAAAz9B,KAAAyY,EAAAA,SAKAojB,oBAAA77B,KAAAyY,EAAAA,OAAA9V,MAAA,qBAMA04B,SAAAr7B,KAAAO,EAAAA,SAeAq7B,qFA6RA56B,KAAAskB,SAAAA,EAIctkB,KAAdoS,QAAAA,EAJEpS,KAAFqY,mBAAAA,EAAkCrY,KAAlC08B,eAAAA,EAKiE18B,KAAjE28B,cAAA,GAAAnmB,GAAAA,aAxCExW,KAAFyY,WAAA,GAAA7E,GAAAA,QAgBA5T,KAAA48B,gBAAA,GAAAhpB,GAAAA,6FAUAwC,GAEAA,EAAAM,OAAAzM,KAAA4Q,EAAAA,UAAA7a,KAAAyY,aAAAvT,UAAA,4DAkBAlF,KAAA68B,UAAAC,EAvFA,MAyFArxB,QAAAC,eAAAqxB,EAAAp4B,UAAA,SAGI5D,mEAxFJ0K,OAAAC,eAAAqxB,EAAAp4B,UAAA,wEAGA8G,OAAAC,eAAAqxB,EAAAp4B,UAAA,6IAYA8G,OAAAC,eAAAqxB,EAAAp4B,UAAA,+IAQA3E,KAAAg9B,mBAGA7D,8FAKE/3B,cAAF,IAEAqK,OAAAC,eAAAqxB,EAAAp4B,UAAA,oFAmCEvD,cAAF,IAEA27B,EAAAp4B,UAAAqD,8BAqBA,GAAAnI,GAAAG,6FAAAH,EAAAo9B,SAAA7yB,QAAA,SAAA8yB,GAAAr9B,EAAAs9B,mBAAAD,GACAr9B,EAAkBu9B,qBAAlBF,GACAr9B,EAAAw9B,iBAAAH,OAGAr9B,EAAAo9B,SAAA93B,QACQtF,EAAKy9B,cAAbz9B,EAAiC09B,SACzB19B,EAAKy9B,cAAbz9B,EAAA29B,QACA39B,EAAA49B,wBAGA59B,EAAAwY,mBAAAxB,iBAEA7W,KAAA48B,gBAAA3yB,KAAAyzB,EAAAA,aAAA,IAGA7iB,EAAAA,UAAW7a,KAAXyY,aAA6BvT,UAA7B,WAAA,MAAArF,GAAA49B,2BAOAV,EAAAp4B,UAAAsD,uBAEAjI,KAAA48B,gBAAA1oB,+EAOE,kFAKA,iEAEF6oB,EAAAp4B,UAAAg5B,qBAEA,GAAA99B,GAAAG,uCAAAA,KAAAoS,QAMGM,kBANH,WAAA,MAAA7S,GAAA+8B,gBAAAjxB,yMAcA,iBAAArK,EAAA4V,SAAA,mBACoBrX,EADpB68B,gBAIA78B,EAAcykB,SAAdhkB,cAAAkF,UAAA4Y,IAAA,mDAGMve,EAANwY,mBAAAxB,iBAEA,SAAAqmB,EAAAnC,MAEMmC,EAAN9C,aAAAnwB,KAAA4Q,EAAAA,UAAA7a,KAAAi9B,SAAAh4B,UAAAC,UAAA,WACA,MAAArF,GAAA+9B,mBAAAV,EAAA7C,sEAeA6C,EAAArC,kBAAA5wB,KAAA4Q,EAAAA,UAAA7a,KAAAi9B,SAAAh4B,UAAAC,UAAA,WACArF,EAAAuS,QAAA6hB,iBAAA5B,eAAApoB,KAAAC,EAAAA,KAAA,IAAAhF,UAAA,6KAWAA,UAAA,qCACArF,EAAAwY,mBAAAxB,8HAWQ7W,KAAKskB,SAAbhkB,cAAAkF,UAAA2Y,OAAA,mDAQU,sGACoB,MAA9Bte,EAAsB29B,gBAIZ39B,EAAM29B,KAAhBN,IAGA,MAAAr9B,EAAA09B,QACAM,GAAA,SACAh+B,EAAA09B,OAAAL,KAGAl9B,KAAA89B,OAAA99B,KAAA+9B,MAAA,KAEA/9B,KAAAoW,MAAA,QAAApW,KAAAoW,KAAAnV,OACAjB,KAAA+9B,MAAA/9B,KAAAw9B,KAEQx9B,KAAR89B,OAAsB99B,KAAtBu9B,SAIMv9B,KAAK+9B,MAAQ/9B,KAAKu9B,OAClBv9B,KAAK89B,OAAS99B,KAAKw9B,6BAQf,8KAKVx9B,KAAA28B,cAAAxlB,iCAGA4lB,EAAAp4B,UAAAq5B,6BAEA,GAAAn+B,GAAAG,6BAAAsF,OAAA,SAAA43B,GAAA,MAAAA,KAAAA,EAAAe,cAAAp+B,EAAAq+B,iBAAAhB,KAAA9yB,QAAA,SAAA8yB,GAAA,MAAA,GAAAxC,WAKAqC,EAAAp4B,UAAAw5B,8BAEA,MAAAn+B,MAAAs9B,cAAAt9B,KAAAu9B,SAAoBv9B,KAApBk+B,iBAAAl+B,KAAAu9B,uGAKU,SAAVL,8EAIU,SAAVA,8HAgBQ,GAAR,QAAYl9B,KAAK+9B,MAAjBhD,8BAGa,IAAb,QAAA/6B,KAAsB+9B,MAAtBhD,KAAA,CAEQ,GAAI7nB,GAAQlT,KAApB+9B,MAAAK,MACAnrB,IAAAC,EAAA8kB,GAAqB9kB,EAErB,GAAAlT,KAAA89B,QAAA99B,KAAA89B,OAAAzD,OACA,GAAA,QAAQr6B,KAAK89B,OAAb/C,KACA/C,GAAAh4B,KAAA89B,OAAAM,WAGa,IAAb,QAAAp+B,KAAA89B,OAAA/C,KAAA,CAEQ,GAAR7nB,GAAAlT,KAAA89B,OAAAM,MACApG,IAAA9kB,EAAAD,GAAAC,4HAcQlT,KAARoS,QAAqB8I,IAArB,WAAA,MAA8Crb,GAA9Cw+B,sBAAA1yB,KAAA9L,EAAAy+B,oCAKAt/B,KAAUgH,EAAAA,UAAVrE,OAAAwC,SAAA,uBACAvC,SAAA,09EA7UApD,MACAC,MAAA,uBACA8/B,iDAAA,qBAEE1/B,gBAAFC,EAAAA,wBAAAC,OACEL,cAAFC,EAAAA,kBAAAC,SAIAm+B,EAAA/V,eAAA,WAAA,QACAhoB,KAAAie,EAAAA,eAAAxb,aAAAzC,KAAAsD,EAAAA,aACAtD,KAAA0I,EAAAA,aACA1I,KAAAC,EAAAA,sLA9XA89B,EAAA19B,gBAMA49B,WAAAj+B,KAAAoJ,EAAAA,gBAAAzG,MAAAi5B,MAXA9kB,WAAA9W,KAAAw/B,EAAAA,aAAA78B,MAAA88B,MAsdAC,eAAA1/B,KAAAuV,EAAAA,UAAA5S,MAAA88B,MACAE,WAAA3/B,KAAAO,EAAAA,sEAjFAw9B,oBChXE,QAAF6B,GACMvoB,EAC+CwgB,EAC/CvyB,EACAu6B,EACAC,GACN,MAAIh/B,GAAJC,KAAAC,KAAUqW,EAAmBwgB,EAAWvyB,EAAYu6B,EAAkBC,IAAtE9+B,KA3BA,MAoBuC0E,GAAvCk6B,EAAA9+B,kBAZAd,KAACgH,EAAAA,UAADrE,OAAAwC,SAAA,sBACE8B,SAAU,4BACVzH,MACFC,MAAA,yCACMsgC,yBAAN,kCACIC,0BAAJ,oCAEAngC,gBAAAC,EAAAA,wBAAAC,OACAL,cAAAC,EAAAA,kBAAAC,0JA1BAI,KAAE0I,EAAAA,aAiCF1I,KAAgEigC,EAAAA,mBAxBhEjgC,KAAEC,EAAAA,UACF2/B,OAoBAM,GAAA,SAAAp/B,gBAqCA,GAAAD,GAAA,OAAAC,GAAAA,EAAAqM,MAAAnM,KAAA6M,YAAA7M,IAcA,+CATAH,EAAAs/B,gBAAA,EASAt/B,EAZA,MAvCA6E,GAAAw6B,EAAAp/B,wDAuCAiB,6HAEEK,cAAF,yKASEA,cAAF,kLASEA,cAAF,mBADApC,KAAAgH,EAAAA,UAAArE,OAAAwC,SAAA,oCA9CA8B,SAAA,0EACEuR,YAAFqkB,GAAAC,iBACEt9B,MACFC,MAAA,yBACA8B,SAAA,KACAw7B,eAAA,kBACMC,qBAAN,4BACIC,oBAAJ,0BAEIC,eAAgB,OAChBC,yBAAJ,qBACIC,0BAAJ,8DAEIC,0BAAJ,kBACI+C,4BAAJ,kBACIC,iBAAJ,uCACIC,oBAAJ,2CAEAzgC,gBAAAC,EAAAA,wBAAAC,OACAL,cAAAC,EAAAA,kBAAAC,SAGAsgC,EAAA7/B,gBACAkgC,kBAAAvgC,KAAAO,EAAAA,QACAigC,cAAAxgC,KAAAO,EAAAA,yCAGA2/B,GASAtE,IASA6E,GAAA,SAAA3/B,+DAmBA,cACyC2/B,EAAzCh+B,4jFAbAjD,MACAC,MAAA,6CACA8/B,iDAAA,qBAEE1/B,gBAAFC,EAAAA,wBAAAC,OACEL,cAAFC,EAAAA,kBAAAC,SAGA6gC,EAAIpgC,gBACJ49B,WAAGj+B,KAAHoJ,EAAAA,gBAAAzG,MAAAu9B,MACAppB,WAAA9W,KAAAw/B,EAAAA,aAAA78B,MAAAi9B,OAEAa,OC7GAC,GAAA,yBAPA,sBAgBA1gC,KAAC4D,EAAAA,SAADjB,OACEkB,SACEC,EAAAA,aACAC,GACA48B,EAAAA,gBACAC,EAAAA,gBAEFx8B,SACEL,GACA63B,GACAmC,GACA0B,GACAS,GACAO,GACAb,IAEFn7B,cACEm3B,GACAmC,GACA0B,GACAS,GACAO,GACAb,QAtCJc,KCmBaG,GACX,GAAI7tB,GAAAA,eAA6C,oCAC/CC,WAAY,OACZC,QAAS,WAAM,OAAE4tB,oBAAoB,EAAOC,kBAAkB,MC2B9DC,GAAe,EAENC,IACXz4B,QAAS04B,EAAAA,kBACTz4B,YAAayO,EAAAA,WAAW,WAAM,MAAAiqB,MAC9BC,OAAO,GAITC,GAAA,WACE,QAAFA,GAEW9R,EAEA+R,GAFAtgC,KAAXuuB,OAAWA,EAEAvuB,KAAXsgC,QAAWA,EA/DX,MAAAD,MAoEAE,GAAA,WACE,QAAFA,GAAqBrgC,GAAAF,KAArBE,YAAqBA,EArErB,MAAAqgC,MAuEaC,GAML9gC,EAAcwE,EAAWvE,EAAmBC,EAAc2gC,KAAsB,0BAyGtF,QAAFJ,GAAc77B,EAKAC,EACQpE,EACAkY,EACe9X,EACf6R,EAEGquB,EACuC/D,EAC9BtmB,GAbhC,GAAFvW,GAcIC,EAdJC,KAAAC,KAcUsE,IAdVtE,WAMsBH,GAAtBM,cAAsBA,EACAN,EAAtBwY,mBAAsBA,EAEAxY,EAAtBuS,QAAsBA,EAEGvS,EAAzB4gC,SAAyBA,EACuC5gC,EAAhE68B,eAAgEA,EAC9B78B,EAAlCuW,KAAkCA,EA5FlCvW,EAAAoM,SAAqB,SAACy0B,KACtB7gC,EAAA4sB,UAAsB,aAEtB5sB,EAAA8gC,UAA8B,uBAAsBX,GACpDngC,EAAA+gC,WAA+B,EAC/B/gC,EAAAghC,UAA8B,EAG9BhhC,EAAAihC,WAAsB,EAkBpBjhC,EAAF0iB,KAAiC,KAG/B1iB,EAAFkhB,GAAwBlhB,EAAK8gC,UAG3B9gC,EAAFgnB,cAA+C,QAK7ChnB,EAAF2U,UAAkD,KAGhD3U,EAAF4U,eAA4D,KAe1D5U,EAAF6W,OACM,GAAIF,GAAAA,aAOR3W,EAAFkhC,aAAwD,GAAIvqB,GAAAA,aAQ1D3W,EAAFmhC,WAAsD,GAAIxqB,GAAAA,aAuBtD3W,EAAKU,SAAWC,SAASD,IAAa,IAjB1C,MAhFoCmE,GAApCy7B,EAAArgC,GA8CE2L,OAAFC,eACMy0B,EADNx7B,UAAA,gBAAE,WAC0B,MAAO3E,MAAK4gC,eACtC,SAAa3/B,GAASjB,KAAK4gC,UAAY3iB,EAAAA,sBAAsBhd,oCAG7DwK,OAAFC,eACMy0B,EADNx7B,UAAA,eAAE,WACyB,MAAO3E,MAAK6gC,cACrC,SAAY5/B,GACVjB,KAAK6gC,SAAW5iB,EAAAA,sBAAsBhd,GACtCjB,KAAKqY,mBAAmBxB,gDAsB1BpL,OAAFC,eAAMy0B,EAANx7B,UAAA,eAAE,WAAwB,OAAU3E,KAAK+gB,IAAM/gB,KAAK2gC,WAApD,0CAuBER,EAAFx7B,UAAAqD,mBAAE,WAAA,GAAFnI,GAAAG,IACIA,MAAKG,cACFW,QAAQd,KAAKE,aAAa,GAC1BgF,UAAU,SAAA+7B,GACJA,GAMHzvB,QAAQC,UAAUC,KAAK,WAAM,MAAA7R,GAAK4sB,iBAK1C0T,EAAFx7B,UAAAsD,YAAE,WACEjI,KAAKG,cAAckB,eAAerB,KAAKE,cAIzCigC,EAAFx7B,UAAAu8B,eAAE,SAAe5/B,GAcb,GAVAA,EAAMq5B,kBAED36B,KAAK8gC,WACR9gC,KAAK+gC,aAAa5pB,OAOhBnX,KAAK8gC,WAAa9gC,KAAKygC,SAASX,mBAElC,YADA9/B,KAAKmhC,cAAc7gC,cAAcggC,QAAUtgC,KAAKsgC,QAKlDtgC,MAAKsgC,QAAUtgC,KAAKmhC,cAAc7gC,cAAcggC,QAIhDtgC,KAAKisB,oBAIPkU,EAAFx7B,UAAAy8B,cAAE,SAAc9/B,GAQZA,EAAMq5B,mBAIRwF,EAAFx7B,UAAAgqB,WAAE,SAAW1tB,GACTjB,KAAKsgC,UAAYr/B,GAInBk/B,EAAFx7B,UAAAiqB,iBAAE,SAAiBC,GACf7uB,KAAKiM,SAAW4iB,GAIlBsR,EAAFx7B,UAAAmqB,kBAAE,SAAkBD,GAChB7uB,KAAKysB,UAAYoC,GAInBsR,EAAFx7B,UAAAoqB,iBAAE,SAAiBC,GACfhvB,KAAKW,SAAWquB,EAChBhvB,KAAKqY,mBAAmBxB,gBAI1BspB,EAAFx7B,UAAAmT,MAAE,WACE9X,KAAKG,cAAck7B,SAASr7B,KAAKmhC,cAAe,aAIlDhB,EAAFx7B,UAAA08B,OAAE,WACErhC,KAAKsgC,SAAWtgC,KAAKsgC,QACrBtgC,KAAKiM,SAASjM,KAAKsgC,UAMbH,EAAVx7B,UAAAsnB,4BACIjsB,KAAKiM,SAASjM,KAAKsgC,SACnBtgC,KAAK0W,OAAOS,KAAK,GAAIkpB,IAAqBrgC,KAAMA,KAAKsgC,WAI/CH,EAAVx7B,UAAA28B,mBAAA,SAA6BC,GACzB,GAAI/S,GAAc+S,EAAWvhC,KAAKwhC,eAAkB,GAOpD,OAJIxhC,MAAKyhC,mBACPjT,GAAc,KAGT5c,KAAKoK,IAAI,EAAGpK,KAAKE,IAAI0c,EAAY,OAG1C2R,EAAFx7B,UAAA+8B,aAAE,WACE,IAAK1hC,KAAKW,WAAaX,KAAK8gC,UAAW,CACrC,GAAMa,GAAU3hC,KAAK4hC,SAASthC,aAC9BN,MAAKwhC,eAAiBxhC,KAAK6hC,YAAYvhC,cAAcwhC,YAAcH,EAAQG,YAC3EH,EAAQn8B,UAAU4Y,IAAI,gBAEtBpe,KAAKyhC,iBAAmBzhC,KAAKsgC,QAC7BtgC,KAAK8gC,WAAY,IAIrBX,EAAFx7B,UAAAo9B,QAAE,SAAQzgC,GACN,GAAItB,KAAK8gC,UAAW,CAClB,GAAMhyB,GAAY9O,KAAKoW,MAA4B,QAApBpW,KAAKoW,KAAKnV,OAAmB,EAAI,CAChEjB,MAAKgiC,gBAAkBhiC,KAAKshC,mBAAmBhgC,EAAM2gC,OAASnzB,EAE9D,IAAMozB,GAASliC,KAAKgiC,gBAAkB,IAAOhiC,KAAKwhC,eAAiB1yB,CACnE9O,MAAK4hC,SAASthC,cAAcsS,MAAMkC,UAAY,eAAeotB,EAAnE,cAIE/B,EAAFx7B,UAAAw9B,WAAE,WAAA,GAAFtiC,GAAAG,IACI,IAAIA,KAAK8gC,UAAW,CAClB,GAAMsB,GAAkBpiC,KAAKgiC,gBAAkB,EAE3CI,KAAoBpiC,KAAKsgC,UAC3BtgC,KAAKghC,WAAW7pB,OACXnX,KAAKygC,SAASV,mBACjB//B,KAAKsgC,QAAU8B,EACfpiC,KAAKisB,qBAMTjsB,KAAKoS,QAAQM,kBAAkB,WAAM,MAAAsf,YAAW,WAC1CnyB,EAAKihC,YACPjhC,EAAKihC,WAAY,EACjBjhC,EAAK+hC,SAASthC,cAAckF,UAAU2Y,OAAO,gBAI7Cte,EAAK+hC,SAASthC,cAAcsS,MAAMkC,UAAY,UAOtDqrB,EAAFx7B,UAAA09B,mBAAE,WAMEriC,KAAKqY,mBAAmB8S,gCA9R5BnsB,KAACgH,EAAAA,UAADrE,OAAAwC,SAAA,mBACEvC,SAAU,iBACVpD,MACFC,MAAA,mBACM6jC,OAAN,KACIC,kBAAJ,OACIC,sBAAJ,UACIC,uBAAJ,WACIC,wCAAJ,4BACInS,kCAAJ,uCAEAtqB,SAAA,gpCACAC,QAAA,gnGACEqB,WAAF04B,IACEp+B,QAAS,WAAX,gBAAA,QAAA,YACEnD,cAAFC,EAAAA,kBAAAC,KACEC,gBAAFC,EAAAA,wBAAAC,qFA9EAC,KAAE2D,EAAAA,eAPF3D,KAAQE,EAAAA,oBAHRF,KAAQyD,OAARhB,aAAAzC,KAAA0D,EAAAA,UAAAf,MAAA,gBAQA3C,KAAEC,EAAAA,SA8KFD,SAAAqD,GAAAZ,aAAAzC,KAAAuD,EAAAA,OAAAZ,MAAyBk+B,QApKzB7gC,KAAEyD,OAAFhB,aAAAzC,KAAAsD,EAAAA,WAAAtD,KAAAuD,EAAAA,OAAAZ,MAAA6uB,EAAAA,2BAsKAxxB,KAAAie,EAAAA,eAAAxb,aAAAzC,KAAAsD,EAAAA,cAvLA69B,EAAA9gC,0HAkHAkjB,OAAAvjB,KAAAO,EAAAA,QAGAwhB,KAAA/hB,KAAAO,EAAAA,QAGAsnB,gBAAA7nB,KAAAO,EAAAA,QAGAiV,YAAAxV,KAAAO,EAAAA,MAAAoC,MAAA,gBAGA8S,iBAAAzV,KAAAO,EAAAA,MAAAoC,MAAA,qBAKAghC,WAAA3jC,KAAAO,EAAAA,QAGA+gC,UAAAthC,KAAAO,EAAAA,QAGAmX,SAAA1X,KAAAyY,EAAAA,SAKAspB,eAAA/hC,KAAQyY,EAAAA,SAORupB,aAAAhiC,KAAAyY,EAAAA,SAQA0pB,gBAAAniC,KAAAuV,EAAAA,UAAA5S,MAAA,YAcAw+B,mCCpLA,sBAeAnhC,KAAC4D,EAAAA,SAADjB,OACEkB,SAAUI,GAAiBF,GAAiBG,EAAAA,iBAC5CE,SAAU+8B,GAAgBp9B,IAC1BU,cAAe08B,IACf54B,YACGC,QAASipB,EAAAA,sBAAuBC,SAAUC,SApB/CiS,KfyEa3T,IACXznB,QAAS04B,EAAAA,kBACTz4B,YAAayO,EAAAA,WAAW,WAAM,MAAAkT,MAC9BgX,OAAO,GAIT9R,GAAA,yBAhFA,MAAAA,MA2FAuU,GAAA,WACE,QAAFA,GAAqB3iC,GAAAF,KAArBE,YAAqBA,EA5FrB,MAAA2iC,MA8FaC,GAKLpjC,EAAcwE,EAAWtE,EAAcijC,IAAgB,0BAyW7D,QAAFzZ,GAAc9kB,EACQnE,EACAkY,EACYjC,EACG7V,EAE2Bm8B,GAN9D,GAAF78B,GAOIC,EAPJC,KAAAC,KAOUsE,IAPVtE,WACsBH,GAAtBM,cAAsBA,EACAN,EAAtBwY,mBAAsBA,EACYxY,EAAlCuW,KAAkCA,EAG8BvW,EAAhE68B,eAAgEA,EAzThE78B,EAAAkjC,SAAoB,EAYpBljC,EAAAmjC,KAAyB,IAiBzBnjC,EAAA0pB,KAAyB,EAezB1pB,EAAAojC,MAA0B,EAM1BpjC,EAAAqjC,aAAiC,EAiBjCrjC,EAAAwpB,cAA2C,EA4B3CxpB,EAAAypB,OAAkC,KAelCzpB,EAAAgqB,WAAsB,EAGpBhqB,EAAF6W,OAA6D,GAAIF,GAAAA,aAG/D3W,EAAFmuB,MAA4D,GAAIxX,GAAAA,aAO9D3W,EAAFkuB,YAAgE,GAAIvX,GAAAA,aA6BlE3W,EAAF4sB,UAAyB,aAIzB5sB,EAAA8pB,SAA6B,EAM3B9pB,EAAF6rB,YAAwB,EAMtB7rB,EAAFmB,WAAuB,EA2GvBnB,EAAAgrB,qBAAyC,EAGzChrB,EAAAwrB,kBAAiD,KAEjDxrB,EAAAiuB,8BAAgE,aAMhEjuB,EAAAyW,uBAAmCjI,EAAAA,aAAaC,MA8B5CzO,EAAKU,SAAWC,SAASD,IAAa,IAxB1C,MA5S+BmE,GAA/B0kB,EAAAtpB,GAGE2L,OAAFC,eACM0d,EADNzkB,UAAA,cAAE,WACwB,MAAO3E,MAAK+iC,aACpC,SAAW9hC,GACTjB,KAAK+iC,QAAU9kB,EAAAA,sBAAsBhd,oCAKvCwK,OAAFC,eACM0d,EADNzkB,UAAA,WAAE,WACoB,MAAO3E,MAAKgjC,UAChC,SAAQjnB,GACN/b,KAAKgjC,KAAOhqB,EAAAA,qBAAqB+C,EAAG/b,KAAKgjC,MACzChjC,KAAK2pB,SAAW3pB,KAAK4pB,qBAAqB5pB,KAAKspB,QAG/CtpB,KAAKqY,mBAAmBxB,gDAK1BpL,OAAFC,eACM0d,EADNzkB,UAAA,WAAE,WACoB,MAAO3E,MAAKupB,UAChC,SAAQxN,GACN/b,KAAKupB,KAAOvQ,EAAAA,qBAAqB+C,EAAG/b,KAAKupB,MAGrB,OAAhBvpB,KAAKspB,SACPtpB,KAAKiB,MAAQjB,KAAKupB,MAEpBvpB,KAAK2pB,SAAW3pB,KAAK4pB,qBAAqB5pB,KAAKspB,QAG/CtpB,KAAKqY,mBAAmBxB,gDAK1BpL,OAAFC,eACM0d,EADNzkB,UAAA,YAAE,WACqB,MAAO3E,MAAKijC,WACjC,SAASlnB,GACP/b,KAAKijC,MAAQjqB,EAAAA,qBAAqB+C,EAAG/b,KAAKijC,OAEtCjjC,KAAKijC,MAAQ,GAAM,IACrBjjC,KAAKwpB,gBAAkBxpB,KAAKijC,MAAME,WAAWC,MAAM,KAAKC,MAAOl+B,QAIjEnF,KAAKqY,mBAAmBxB,gDAK1BpL,OAAFC,eACM0d,EADNzkB,UAAA,kBAAE,WAC4B,MAAO3E,MAAKkjC,iBACxC,SAAejiC,GAAkBjB,KAAKkjC,YAAcjlB,EAAAA,sBAAsBhd;kBAO1EwK,OAAFC,eACM0d,EADNzkB,UAAA,oBAAE,WACqB,MAAO3E,MAAKqpB,mBACjC,SAAiBpoB,GAEbjB,KAAKqpB,cADO,SAAVpoB,EACmB,OACK,gBAAVA,IAAuC,gBAAVA,GACxB+X,EAAAA,qBAAqB/X,EAAOjB,KAA4B,eAExD,mCAMzByL,OAAFC,eACM0d,EADNzkB,UAAA,aAAE,WAME,MAHoB,QAAhB3E,KAAKspB,SACPtpB,KAAKiB,MAAQjB,KAAKupB,MAEbvpB,KAAKspB,YAEd,SAAUvN,GACR,GAAIA,IAAM/b,KAAKspB,OAAQ,CACrB,GAAIroB,GAAQ+X,EAAAA,qBAAqB+C,EAI7B/b,MAAKwpB,kBACPvoB,EAAQwoB,WAAWxoB,EAAMyoB,QAAQ1pB,KAAKwpB,mBAGxCxpB,KAAKspB,OAASroB,EACdjB,KAAK2pB,SAAW3pB,KAAK4pB,qBAAqB5pB,KAAKspB,QAG/CtpB,KAAKqY,mBAAmBxB,iDAa5BpL,OAAFC,eACM0d,EADNzkB,UAAA,gBAAE,WAC0B,MAAO3E,MAAK6pB,eACtC,SAAa5oB,GACXjB,KAAK6pB,UAAY5L,EAAAA,sBAAsBhd,oCAkBzCwK,OAAFC,eAAM0d,EAANzkB,UAAA,oBAAE,WACE,MAAI3E,MAAK8pB,YACA9pB,KAAK8pB,YAAY9pB,KAAKiB,OAM3BjB,KAAKwpB,iBAAmBxpB,KAAKiB,OAASjB,KAAKiB,MAAQ,GAAM,EACpDjB,KAAKiB,MAAMyoB,QAAQ1pB,KAAKwpB,iBAG1BxpB,KAAKiB,OAAS,mCAIvBmoB,EAAFzkB,UAAAmT,MAAE,WACE9X,KAAK+pB,qBAIPX,EAAFzkB,UAAAqlB,KAAE,WACEhqB,KAAKiqB,oBAOPxe,OAAFC,eAAM0d,EAANzkB,UAAA,eAAE,WAAwB,MAAO3E,MAAKkqB,OAAOlqB,KAAK2pB,2CAmBhDle,OAAFC,eAAM0d,EAANzkB,UAAA,mBAAE,WAGE,MAAO3E,MAAKmqB,UAAYnqB,KAAKoqB,OAASpqB,KAAKoqB,wCAK7C3e,OAAFC,eAAM0d,EAANzkB,UAAA,mBAAE,WACE,MAAwB,KAAjB3E,KAAKqqB,yCAOd5e,OAAFC,eAAM0d,EAANzkB,UAAA,iBAAE,WACE,MAAI3E,MAAKW,SA3Rc,EA8RnBX,KAAKsqB,cAAgBtqB,KAAKuqB,WACrBvqB,KAAKgB,UAzRiB,GAHG,EA8R3B,mCAITyK,OAAFC,eAAM0d,EAANzkB,UAAA,8BAAE,WACE,GAAM6lB,GAAOxqB,KAAKmqB,SAAW,IAAM,IAC7BM,EAAQzqB,KAAKmqB,SAAW,OAAM,EAAInqB,KAAKqqB,SAAjD,MAAmE,EAAIrqB,KAAKqqB,QAA5E,QAGI,QAEEvV,UAAW,YAAY0V,EAA7B,KAJiBxqB,KAAK0qB,2BAA6B,IAAM,IAIb1qB,KAAK2qB,UAAjD,eAAyEF,EAAzE,sCAKEhf,OAAFC,eAAM0d,EAANzkB,UAAA,wBAAE,WACE,GAAM6lB,GAAOxqB,KAAKmqB,SAAW,IAAM,IAC7BM,EAAQzqB,KAAKmqB,SAAW,MAAMnqB,KAAKqqB,QAA7C,MAA+DrqB,KAAKqqB,QAApE,QAGI,QAEEvV,UAAW,YAAY0V,EAA7B,KAJiBxqB,KAAK0qB,2BAA6B,GAAK,KAIZ1qB,KAAK2qB,UAAjD,eAAyEF,EAAzE,sCAKEhf,OAAFC,eAAM0d,EAANzkB,UAAA,6BAAE,WAME,OACEmQ,UAAa,aANJ9U,KAAKmqB,SAAW,IAAM,KAMrC,KAHgBnqB,KAAKmqB,UAAoC,OAAxBnqB,KAAK4qB,gBAAgC,IAAL,IAChD5qB,KAAK6qB,qBAAuB,EAAI,IAEjD,uCAKEpf,OAAFC,eAAM0d,EAANzkB,UAAA,oBAAE,WACE,GAAImmB,GAAuC,IAA5B9qB,KAAK6qB,qBAChBE,EAAiB/qB,KAAKmqB,SAAW,OAAOW,EAAhD,IAAiEA,EAAjE,QACQN,EAAOxqB,KAAKmqB,SAAW,IAAM,IAI7Ba,EAAQhrB,KAAKmqB,UAAoC,OAAxBnqB,KAAK4qB,gBAAiC,GAAN,IACzDK,EAAUjrB,KAAKmqB,UAAoC,OAAxBnqB,KAAK4qB,gBAA+C,GAApB,kBAC3D1kB,GACF6kB,eAAkBA,EAElBjW,UAAa,0BAA0B0V,EAA7C,IAAqDQ,EAAOF,EAAW,EAAvE,KAA6EG,EAGzE,IAAIjrB,KAAKsqB,aAAetqB,KAAK2qB,UAAW,CAItCzkB,EAAO,WAHIlG,KAAKmqB,SACXnqB,KAAKkrB,YAAc,SAAW,MAC9BlrB,KAAKkrB,YAAc,QAAU,SACJlrB,KAAK2qB,UAAzC,KAGI,MAAOzkB,oCAGTuF,OAAFC,eAAM0d,EAANzkB,UAAA,6BAAE,WAOE,OACEmQ,UAAa,aAPJ9U,KAAKmqB,SAAW,IAAM,KAOrC,KAFoE,MADnC,OAAxBnqB,KAAK4qB,iBAA6B5qB,KAAKmqB,SAAgCnqB,KAAKkrB,aAAxBlrB,KAAKkrB,aACjClrB,KAAKqqB,QAAU,EAAIrqB,KAAKqqB,SAEzD,uCA4BUjB,EAAVzkB,UAAA+lB,oCACI,MAAgC,OAAxB1qB,KAAK4qB,iBAA6B5qB,KAAKmqB,SAAgCnqB,KAAKkrB,aAAxBlrB,KAAKkrB,aAI3D9B,EAAVzkB,UAAAimB,yBACI,MAAQ5qB,MAAKoW,MAA2B,OAAnBpW,KAAKoW,KAAKnV,MAAkB,MAAQ,OAe3DmoB,EAAFzkB,UAAAwP,SAAE,WAAA,GAAFtU,GAAAG,IACIA,MAAKG,cACAW,QAAQd,KAAKE,aAAa,GAC1BgF,UAAU,SAAC4O,GACVjU,EAAKmB,YAAc8S,GAAqB,aAAXA,EAC7BjU,EAAKwY,mBAAmB8S,kBAE1BnrB,KAAKoW,OACPpW,KAAKsW,uBAAyBtW,KAAKoW,KAAKM,OAAOxR,UAAU,WACvDrF,EAAKwY,mBAAmBxB,mBAK9BuS,EAAFzkB,UAAAsD,YAAE,WACEjI,KAAKG,cAAckB,eAAerB,KAAKE,aACvCF,KAAKsW,uBAAuBtF,eAG9BoY,EAAFzkB,UAAAymB,cAAE,WACMprB,KAAKW,WAMTX,KAAKqrB,kBAAoBrrB,KAAKsrB,uBAC9BtrB,KAAKurB,+BAGPnC,EAAFzkB,UAAA6mB,SAAE,SAASlqB,GACP,IAAItB,KAAKW,SAAT,CAIA,GAAI8qB,GAAWzrB,KAAKiB,KACpBjB,MAAK0rB,YAAa,EAClB1rB,KAAK+pB,oBACL/pB,KAAK2rB,0BAA0BC,EAAGtqB,EAAMuqB,QAASC,EAAGxqB,EAAMyqB,UAGtDN,GAAYzrB,KAAKiB,QACnBjB,KAAKgsB,kBACLhsB,KAAKisB,sBAIT7C,EAAFzkB,UAAAunB,SAAE,SAAS5qB,GACP,IAAItB,KAAKW,SAAT,CAMKX,KAAK0rB,YACR1rB,KAAKmsB,cAAc,MAIrB7qB,EAAMC,gBAEN,IAAIkqB,GAAWzrB,KAAKiB,KACpBjB,MAAK2rB,0BAA0BC,EAAGtqB,EAAM8qB,OAAOR,EAAGE,EAAGxqB,EAAM8qB,OAAON,IAG9DL,GAAYzrB,KAAKiB,OACnBjB,KAAKgsB,oBAIT5C,EAAFzkB,UAAAwnB,cAAE,SAAc7qB,GACRtB,KAAKW,UAAYX,KAAK0rB,aAK1B1rB,KAAKorB,gBAELprB,KAAK0rB,YAAa,EAClB1rB,KAAK+pB,oBACL/pB,KAAKqsB,mBAAqBrsB,KAAKiB,MAE3BK,IACFtB,KAAK2rB,0BAA0BC,EAAGtqB,EAAM8qB,OAAOR,EAAGE,EAAGxqB,EAAM8qB,OAAON,IAClExqB,EAAMC,oBAIV6nB,EAAFzkB,UAAA2nB,YAAE,WACEtsB,KAAK0rB,YAAa,EAEd1rB,KAAKqsB,oBAAsBrsB,KAAKiB,OAAUjB,KAAKW,UACjDX,KAAKisB,mBAEPjsB,KAAKqsB,mBAAqB,MAG5BjD,EAAFzkB,UAAA4nB,SAAE,WAGEvsB,KAAKqrB,kBAAoBrrB,KAAKsrB,uBAC9BtrB,KAAKurB,8BAGPnC,EAAFzkB,UAAA6nB,QAAE,WACExsB,KAAKysB,aAGPrD,EAAFzkB,UAAA+nB,WAAE,SAAWprB,GACT,IAAItB,KAAKW,SAAT,CAEA,GAAI8qB,GAAWzrB,KAAKiB,KAEpB,QAAQK,EAAMuY,SACZ,IAAK8S,GAAAA,QACH3sB,KAAK4sB,WAAW,GAChB,MACF,KAAKC,GAAAA,UACH7sB,KAAK4sB,YAAY,GACjB,MACF,KAAK5S,GAAAA,IACHha,KAAKiB,MAAQjB,KAAKgc,GAClB,MACF,KAAKlC,GAAAA,KACH9Z,KAAKiB,MAAQjB,KAAK8R,GAClB,MACF,KAAKgb,GAAAA,WAQH9sB,KAAK4sB,WAAmC,OAAxB5sB,KAAK4qB,gBAA2B,GAAK,EACrD,MACF,KAAKmC,GAAAA,SACH/sB,KAAK4sB,WAAW,EAChB,MACF,KAAKI,GAAAA,YAEHhtB,KAAK4sB,WAAmC,OAAxB5sB,KAAK4qB,iBAA4B,EAAI,EACrD,MACF,KAAKqC,GAAAA,WACHjtB,KAAK4sB,YAAY,EACjB,MACF,SAGE,OAGAnB,GAAYzrB,KAAKiB,QACnBjB,KAAKgsB,kBACLhsB,KAAKisB,oBAGPjsB,KAAK0rB,YAAa,EAClBpqB,EAAMC,mBAGR6nB,EAAFzkB,UAAAuoB,SAAE,WACEltB,KAAK0rB,YAAa,GAIZtC,EAAVzkB,UAAAioB,WAAA,SAAqBO,GACjBntB,KAAKiB,MAAQjB,KAAKkqB,QAAQlqB,KAAKiB,OAAS,GAAKjB,KAAKotB,KAAOD,EAAUntB,KAAK8R,IAAK9R,KAAKgc,MAI5EoN,EAAVzkB,UAAAgnB,yBAAA,SAAmC0B,GAC/B,GAAKrtB,KAAKqrB,kBAAV,CAIA,GAAIiC,GAASttB,KAAKmqB,SAAWnqB,KAAKqrB,kBAAkBkC,IAAMvtB,KAAKqrB,kBAAkBpY,KAC7Eua,EAAOxtB,KAAKmqB,SAAWnqB,KAAKqrB,kBAAkBhM,OAASrf,KAAKqrB,kBAAkBnY,MAC9Eua,EAAeztB,KAAKmqB,SAAWkD,EAAIvB,EAAIuB,EAAIzB,EAG3CvB,EAAUrqB,KAAKkqB,QAAQuD,EAAeH,GAAUE,EAUpD,IARIxtB,KAAK0qB,6BACPL,EAAU,EAAIA,GAOA,IAAZA,EACFrqB,KAAKiB,MAAQjB,KAAK8R,QACb,IAAgB,IAAZuY,EACTrqB,KAAKiB,MAAQjB,KAAKgc,QACb,CACL,GAAM0R,GAAa1tB,KAAK2tB,gBAAgBtD,GAIlCuD,EAAehc,KAAKic,OAAOH,EAAa1tB,KAAK8R,KAAO9R,KAAKotB,MAAQptB,KAAKotB,KAAOptB,KAAK8R,GAGxF9R,MAAKiB,MAAQjB,KAAKkqB,OAAO0D,EAAc5tB,KAAK8R,IAAK9R,KAAKgc,QAKlDoN,EAAVzkB,UAAAsnB,4BACIjsB,KAAK8tB,8BAA8B9tB,KAAKiB,OACxCjB,KAAK+tB,YAAY5W,KAAKnX,KAAKiB,OAC3BjB,KAAK0W,OAAOS,KAAKnX,KAAKwe,uBAIhB4K,EAAVzkB,UAAAqnB,2BACIhsB,KAAKguB,MAAM7W,KAAKnX,KAAKwe,uBAIf4K,EAAVzkB,UAAA4mB,sCACI,GAAKvrB,KAAKiuB,cAAiBjuB,KAAKqrB,kBAIhC,GAAyB,QAArBrrB,KAAKiuB,aAAwB,CAC/B,GAAIC,GAAYluB,KAAKmqB,SAAWnqB,KAAKqrB,kBAAkBhM,OAASrf,KAAKqrB,kBAAkBnY,MACnFib,EAAgBD,EAAYluB,KAAKotB,MAAQptB,KAAKgc,IAAMhc,KAAK8R,KACzDsc,EAAexc,KAAKC,KAloBG,GAkoB6Bsc,GACpDE,EAAgBD,EAAepuB,KAAKotB,IACxCptB,MAAK6qB,qBAAuBwD,EAAgBH,MAE5CluB,MAAK6qB,qBAAuB7qB,KAAKiuB,aAAejuB,KAAKotB,MAAQptB,KAAKgc,IAAMhc,KAAK8R,MAKzEsX,EAAVzkB,UAAA6Z,mBAAA,SAA6Bvd,OAA7B,KAAAA,IAA6BA,EAAQjB,KAAKiB,MACtC,IAAIK,GAAQ,GAAIgtB,GAKhB,OAHAhtB,GAAMitB,OAASvuB,KACfsB,EAAML,MAAQA,EAEPK,GAID8nB,EAAVzkB,UAAAilB,qBAAA,SAA+B3oB,GAC3B,QAASA,GAAS,GAAKjB,KAAK8R,MAAQ9R,KAAKgc,IAAMhc,KAAK8R,MAI9CsX,EAAVzkB,UAAAgpB,gBAAA,SAA0Ba,GACtB,MAAOxuB,MAAK8R,IAAM0c,GAAcxuB,KAAKgc,IAAMhc,KAAK8R,MAI1CsX,EAAVzkB,UAAAulB,OAAA,SAAiBjpB,EAAe6Q,EAASkK,GACrC,WADJ,KAAAlK,IAAgCA,EAAhC,OAAA,KAAAkK,IAAyCA,EAAzC,GACWpK,KAAKoK,IAAIlK,EAAKF,KAAKE,IAAI7Q,EAAO+a,KAQ/BoN,EAAVzkB,UAAA2mB,gCACI,MAAOtrB,MAAKyuB,eAAiBzuB,KAAKyuB,eAAenuB,cAAcouB,wBAA0B,MAOnFtF,EAAVzkB,UAAAolB,6BACI/pB,KAAKE,YAAYI,cAAcwX,SAIzBsR,EAAVzkB,UAAAslB,4BACIjqB,KAAKE,YAAYI,cAAc0pB,QAOjCZ,EAAFzkB,UAAAgqB,WAAE,SAAW1tB,GACTjB,KAAKiB,MAAQA,GAQfmoB,EAAFzkB,UAAAiqB,iBAAE,SAAiBC,GACf7uB,KAAK8tB,8BAAgCe,GAQvCzF,EAAFzkB,UAAAmqB,kBAAE,SAAkBD,GAChB7uB,KAAKysB,UAAYoC,GAQnBzF,EAAFzkB,UAAAoqB,iBAAE,SAAiBC,GACfhvB,KAAKW,SAAWquB,kBA1qBpBhwB,KAACgH,EAAAA,UAADrE,OAAAwC,SAAA,aACEvC,SAAU,YACV2F,WAAF0nB,IACEzwB,MACF0wB,UAAA,aACMC,SAAN,YACIhtB,UAAW,mBACXitB,YAAJ,qBACIC,UAAW,aACXnM,eAAJ,kBACIoM,UAAW,mBACXC,aAAc,gBACdC,eAAJ,wBACI/wB,MAAJ,aACIyI,KAAJ,SACIuoB,aAAJ,WACI1tB,uBAAJ,WACI2tB,uBAAwB,MACxBC,uBAAwB,MACxBC,uBAAwB,QACxBC,0BAAJ,uCACIC,8BAA+B,WAC/BC,+BAAJ,eACIC,gCAAJ,YACIC,mCAAJ,cACIC,6BAAJ,aACIC,yCAAJ,aACIC,8BAAJ,WACIC,+BAAJ,cACIC,oCAAJ,sDACIC,kCAAJ,uCAEAtqB,SAAA,ipBACAC,QAAA,4uPACErE,QAAF,WAAA,QAAA,YACEnD,cAAFC,EAAAA,kBAAAC,KACEC,gBAAFC,EAAAA,wBAA2CC,yFAnH3CC,KAAEE,EAAAA,oBAlBFF,KAAQie,EAAAA,eAARxb,aAAAzC,KAAAsD,EAAAA,aAgBAtD,KAAEyD,OAAFhB,aAAAzC,KAAA0D,EAAAA,UAAAf,MAAA,gBAfA3C,KAAQyD,OAARhB,aAAAzC,KAAAsD,EAAAA,WAAAtD,KAAAuD,EAAAA,OAAAZ,MAAA6uB,EAAAA,4BAycApH,EAAA/pB,6DA9TAyS,MAAA9S,KAAAO,EAAAA,QAQA6tB,OAAApuB,KAAAO,EAAAA,QAYAgrB,aAAAvrB,KAAAO,EAAAA,QAiBA0uB,eAAAjvB,KAAAO,EAAAA,QAeA0B,QAAAjC,KAAAO,EAAAA,QASAuqB,cAAA9qB,KAAAO,EAAAA,QAcA4qB,WAAAnrB,KAAAO,EAAAA,QAgCAmX,SAAA1X,KAAAyY,EAAAA,SAGAuW,QAAAhvB,KAAAyY,EAAAA,SAQAsW,cAAA/uB,KAAAyY,EAAAA,SAGAgX,iBAAAzvB,KAAAuV,EAAAA,UAAA5S,MAAA,oBAgLAynB,mCC7bA,sBAeApqB,KAAC4D,EAAAA,SAADjB,OACEkB,SAAUC,EAAAA,aAAcC,IACxBK,SAAUgmB,GAAWrmB,IACrBU,cAAe2lB,IACf7hB,YAAaC,QAASipB,EAAAA,sBAAuBC,SAAUC,SAnBzDC,KCsBAC,GAAA,WA4BE,QAAFA,GAAcC,EACQC,GADpB,GAAFlxB,GAAAG,IACsBA,MAAtB+wB,YAAsBA,EAlBtB/wB,KAAAgxB,gBAAqC,GAAIpd,GAAAA,QAGzC5T,KAAAixB,aAAkC,GAAIrd,GAAAA,QAGtC5T,KAAAkxB,UAA+B,GAAItd,GAAAA,QASnC5T,KAAAmxB,oBAA+B,EAI3BnxB,KAAK8wB,kBAAoBA,EAEzB9wB,KAAKoxB,WAAWlsB,UAAU,WAAM,MAAArF,GAAKwxB,YACrCP,EAAkBQ,QAAQpsB,UAAU,WAAM,MAAArF,GAAK0xB,mBAvDnD,MA2DEV,GAAFlsB,UAAA0sB,QAAE,WACOrxB,KAAKgxB,gBAAgBQ,QACxBxxB,KAAK8wB,kBAAkBW,OAEzBC,aAAa1xB,KAAK2xB,qBAIpBd,EAAFlsB,UAAAitB,kBAAE,WACO5xB,KAAKkxB,UAAUM,SAClBxxB,KAAKmxB,oBAAqB,EAC1BnxB,KAAKkxB,UAAUvlB,OACf3L,KAAKkxB,UAAUhd,aAUnB2c,EAAFlsB,UAAAktB,gBAAE,WACE7xB,KAAK4xB,qBAIPf,EAAFlsB,UAAAmtB,cAAE,SAAcC,GAAd,GAAFlyB,GAAAG,IACIA,MAAK2xB,mBAAqBK,WAAW,WAAM,MAAAnyB,GAAKwxB,WAAWU,IAI7DlB,EAAFlsB,UAAAstB,MAAE,WACOjyB,KAAKixB,aAAaO,SACrBxxB,KAAKixB,aAAatlB,OAClB3L,KAAKixB,aAAa/c,aAKd2c,EAAVlsB,UAAA4sB,0BACIvxB,KAAK+wB,YAAYmB,UAEZlyB,KAAKkxB,UAAUM,QAClBxxB,KAAKkxB,UAAUhd,WAGjBlU,KAAKgxB,gBAAgBrlB,MAAMwmB,kBAAmBnyB,KAAKmxB,qBACnDnxB,KAAKgxB,gBAAgB9c,WACrBlU,KAAKmxB,oBAAqB,GAI5BN,EAAFlsB,UAAAytB,eAAE,WACE,MAAOpyB,MAAKgxB,gBAAgBqB,gBAI9BxB,EAAFlsB,UAAA2tB,YAAE,WACE,MAAOtyB,MAAK8wB,kBAAkByB,UAIhC1B,EAAFlsB,UAAAysB,SAAE,WACE,MAAOpxB,MAAKkxB,UAAUmB,gBA3H1BxB,KCaa2B,GAAqB,GAAIxgB,GAAAA,eAAoB,mBAW1DygB,GAAA,wBAEEzyB,KAAF0yB,WAAoC,YAMlC1yB,KAAF2yB,oBAAiC,GAM/B3yB,KAAF+xB,SAAsB,EASpB/xB,KAAF6H,KAAoB,KAGlB7H,KAAF4yB,mBAAuD,SAGrD5yB,KAAF6yB,iBAAmD,SArDnD,MAAAJ,oBCgCE,QAAFK,GACWC,EACqBlrB,GADrB7H,KAAX+yB,YAAWA,EAEP/yB,KAAK6H,KAAOA,EADhB,MAKEirB,GAAFnuB,UAAAquB,OAAE,WACEhzB,KAAK+yB,YAAYnB,qBAInBnmB,OAAFC,eAAMonB,EAANnuB,UAAA,iBAAE,WACE,QAAS3E,KAAK6H,KAAKmrB,uDA5BvBh0B,KAACgH,EAAAA,UAADrE,OAAAwC,SAAA,mBACE8B,SAAU,8JACVC,QAAF,yUACExH,cAAFC,EAAAA,kBAAAC,KACEC,gBAAFC,EAAAA,wBAAAC,OACEP,MACFC,MAAA,+HAWAq0B,KCdaG,IAIXC,cAAete,EAAAA,QAAQ,SACrBC,EAAAA,MAAM,eAAgBjC,EAAAA,OACpBkC,UAAW,aACXqe,QAAS,KAEXte,EAAAA,MAAM,UAAWjC,EAAAA,OACfkC,UAAW,WACXqe,QAAS,KAEXne,EAAAA,WAAW,eAAgBC,EAAAA,QAAQ,qCACnCD,EAAAA,WAAW,yBAA0BC,EAAAA,QAAQ,oCAAqCrC,EAAAA,OAChFugB,QAAS,wBCiCb,QAAFC,GACYhhB,EACAlS,EACAmY,EAEDgb,GALT,GAAFxzB,GAOIC,EAPJC,KAAAC,OAAAA,WACYH,GAAZuS,QAAYA,EACAvS,EAAZK,YAAYA,EACAL,EAAZwY,mBAAYA,EAEDxY,EAAXwzB,eAAWA,EAnBXxzB,EAAA4Y,YAAuB,EAMrB5Y,EAAFyxB,QAAmC,GAAI1d,GAAAA,QAGrC/T,EAAF0yB,SAAoC,GAAI3e,GAAAA,QAGtC/T,EAAFyzB,gBAAoB,SATpB,MAL0C5uB,GAA1C0uB,EAAAtzB,GA2BEszB,EAAFzuB,UAAA4uB,sBAAE,SAAyBC,GAGvB,MAFAxzB,MAAKyzB,qBACLzzB,KAAK0zB,wBACE1zB,KAAK2zB,cAAcJ,sBAAsBC,IAIlDJ,EAAFzuB,UAAAivB,qBAAE,SAAwBJ,GAGtB,MAFAxzB,MAAKyzB,qBACLzzB,KAAK0zB,wBACE1zB,KAAK2zB,cAAcC,qBAAqBJ,IAIjDJ,EAAFzuB,UAAAkvB,eAAE,SAAevyB,GACN,GAAAgW,GAAXhW,EAAAgW,UAAsBJ,EAAtB5V,EAAA4V,OAMI,KAJiB,SAAZA,GAAoC,SAAdI,GAAqC,WAAZJ,IAClDlX,KAAK8zB,gBAGS,YAAZ5c,EAAuB,CAGzB,GAAM6c,GAAU/zB,KAAKuyB,QAErBvyB,MAAKoS,QAAQ8I,IAAI,WACf6Y,EAAQpoB,OACRooB,EAAQ7f,eAMdkf,EAAFzuB,UAAAqvB,MAAE,WACOh0B,KAAKyY,aACRzY,KAAKszB,gBAAkB,UACvBtzB,KAAKqY,mBAAmB8S,kBAK5BiI,EAAFzuB,UAAA8sB,KAAE,WAKE,MADAzxB,MAAKszB,gBAAkB,SAChBtzB,KAAKsxB,SAId8B,EAAFzuB,UAAAsD,YAAE,WACEjI,KAAKyY,YAAa,EAClBzY,KAAK8zB,iBAOCV,EAAVzuB,UAAAmvB,mCACI9zB,MAAKoS,QAAQ6hB,iBAAiB5B,eAAepoB,KAAKC,EAAAA,KAAK,IAAIhF,UAAU,WACnErF,EAAKyxB,QAAQ3lB,OACb9L,EAAKyxB,QAAQpd,cAKTkf,EAAVzuB,UAAA+uB,iCACI,GAAMnhB,GAAuBvS,KAAKE,YAAYI,cACxC4zB,EAAel0B,KAAKqzB,eAAec,UAErCD,KACEpqB,MAAMC,QAAQmqB,GAEhBA,EAAa9pB,QAAQ,SAAAgqB,GAAY,MAAA7hB,GAAQ/M,UAAU4Y,IAAIgW,KAEvD7hB,EAAQ/M,UAAU4Y,IAAI8V,IAIqB,WAA3Cl0B,KAAKqzB,eAAeT,oBACtBrgB,EAAQ/M,UAAU4Y,IAAI,wBAGqB,QAAzCpe,KAAKqzB,eAAeR,kBACtBtgB,EAAQ/M,UAAU4Y,IAAI,sBAKlBgV,EAAVzuB,UAAA8uB,8BACI,GAAIzzB,KAAK2zB,cAAc/d,cACrB,KAAMye,OAAM,4FAvIlBr1B,KAACgH,EAAAA,UAADrE,OAAAwC,SAAA,sBACE8B,SAAU,8CACVC,QAAF,uYACErH,gBAAFC,EAAAA,wBAAAC,OACEL,cAAFC,EAAAA,kBAAAC,KACE4Y,YAAFyb,GAAAC,eACE10B,MACF0I,KAAc,QACRzI,MAAN,0BACI61B,WAAJ,kBACIC,gBAAJ,sGAzBAv1B,KAAEE,EAAAA,oBAFFF,KAAEyzB,MAUFW,EAAA/zB,6EA2BA+zB,mDCzDA,sBAkBAp0B,KAAC4D,EAAAA,SAADjB,OACEkB,SACE2xB,EAAAA,cACAxxB,EAAAA,aACAF,EAAAA,aACA0kB,GACAzkB,IAEFK,SAAUgwB,GAAsBrwB,IAChCU,cAAe2vB,GAAsBN,IACrC2B,iBAAkBrB,GAAsBN,QA5B1C4B,KCiCaC,GACT,GAAI3iB,GAAAA,eAAkC,iCACpCC,WAAY,OACZC,QAAS0iB,mBAkCb,QAAFC,GACcC,EACAC,EACAC,EACAC,EACwBC,EACeC,GALvCn1B,KAAd80B,SAAcA,EACA90B,KAAd+0B,MAAcA,EACA/0B,KAAdg1B,UAAcA,EACAh1B,KAAdi1B,oBAAcA,EACwBj1B,KAAtCk1B,gBAAsCA,EACel1B,KAArDm1B,eAAqDA,EAtBrDn1B,KAAAo1B,wBAAgE,KAtDhE,MAyDE3pB,QAAFC,eAAMmpB,EAANlwB,UAAA,0BAAE,WACE,GAAM0wB,GAASr1B,KAAKk1B,eACpB,OAAOG,GAASA,EAAOC,mBAAqBt1B,KAAKo1B,6BAGnD,SAAuBn0B,GACjBjB,KAAKk1B,gBACPl1B,KAAKk1B,gBAAgBI,mBAAqBr0B,EAE1CjB,KAAKo1B,wBAA0Bn0B,mCAmBnC4zB,EAAFlwB,UAAA4wB,kBAAE,SAAqBC,EAA6BC,GAEhD,MAAOz1B,MAAK01B,QAAQF,EAAWC,IAUjCZ,EAAFlwB,UAAAgxB,iBAAE,SAAiB1vB,EAA4BwvB,GAE3C,MAAOz1B,MAAK01B,QAAQzvB,EAAUwvB,IAShCZ,EAAFlwB,UAAAixB,KAAE,SAAKC,EAAiB7C,EAAqByC,OAA7C,KAAAzC,IAAwBA,EAAxB,GAEI,IAAM8C,GAAVC,MAAwB/1B,KAAKm1B,eAAmBM,EAU5C,OANAK,GAAQjuB,MAAQguB,QAApBA,EAA6B7C,OAA7BA,GAES8C,EAAQnD,sBACXmD,EAAQnD,oBAAsBkD,GAGzB71B,KAAKu1B,kBAAkBzC,GAAgBgD,IAMhDjB,EAAFlwB,UAAA0sB,QAAE,WACMrxB,KAAKs1B,oBACPt1B,KAAKs1B,mBAAmBjE,WAI5BwD,EAAFlwB,UAAAsD,YAAE,WAEMjI,KAAKo1B,yBACPp1B,KAAKo1B,wBAAwB/D,WAOzBwD,EAAVlwB,UAAAqxB,yBAAA,SAAmCC,EACAR,GAE/B,GAAMS,GAAeT,GAAUA,EAAOtgB,kBAAoBsgB,EAAOtgB,iBAAiBghB,SAC5EA,EAAW,GAAIC,GAAAA,eAAeF,GAAgBl2B,KAAKg1B,UAAW,GAAIqB,WACrE5D,GAAmBgD,MAGhBa,EACF,GAAIC,GAAAA,gBAAgBnD,GAAsBqC,EAAOtgB,iBAAkBghB,GACjEK,EAAmDP,EAAWpgB,OAAOygB,EAE3E,OADAE,GAAaC,SAASpD,eAAiBoC,EAChCe,EAAaC,UAMd5B,EAAVlwB,UAAA+wB,QAAA,SAAqBgB,EAA4CC,GAG7D,GAAMlB,GAAVM,MAAuB,GAAItD,IAAwBzyB,KAAKm1B,eAAmBwB,GACjEV,EAAaj2B,KAAK42B,eAAenB,GACjCoB,EAAY72B,KAAKg2B,yBAAyBC,EAAYR,GACtD1C,EAAc,GAAIlC,IAAyCgG,EAAWZ,EAE5E,IAAIS,YAAmBvjB,GAAAA,YAAa,CAClC,GAAMqgB,GAAS,GAAIpf,GAAAA,eAAesiB,EAAO,MACvCI,UAAWrB,EAAO5tB,KAClBkrB,YAARA,GAGMA,GAAY0D,SAAWI,EAAUjD,qBAAqBJ,OACjD,CACL,GAAM2C,GAAWn2B,KAAK+2B,gBAAgBtB,EAAQ1C,GACxCS,EAAS,GAAI+C,GAAAA,gBAAgBG,MAASr0B,GAAW8zB,GACjDa,EAAaH,EAAUtD,sBAAyBC,EAGtDT,GAAY0D,SAAWO,EAAWP,SAkBpC,MAZAz2B,MAAKi1B,oBAAoBgC,QAAQC,EAAAA,YAAYC,SAASltB,KACpD4Q,EAAAA,UAAUob,EAAWmB,cAAcntB,KAAKC,EAAAA,KAAK,MAC7ChF,UAAU,SAAA2P,GACNA,EAAMwiB,QACRpB,EAAWqB,eAAe9xB,UAAU4Y,IAAI,yBAExC6X,EAAWqB,eAAe9xB,UAAU2Y,OAAO,2BAI/Cne,KAAKu3B,iBAAiBxE,EAAa0C,GACnCz1B,KAAKs1B,mBAAqBvC,EACnB/yB,KAAKs1B,oBAINT,EAAVlwB,UAAA4yB,iBAAA,SAA2BxE,EAAkC0C,aAEzD1C,GAAYX,iBAAiBltB,UAAU,WAEjCrF,EAAKy1B,oBAAsBvC,IAC7BlzB,EAAKy1B,mBAAqB,QAI1Bt1B,KAAKs1B,oBAGPt1B,KAAKs1B,mBAAmBlD,iBAAiBltB,UAAU,WACjD6tB,EAAYjC,kBAAkBkD,UAEhCh0B,KAAKs1B,mBAAmBjE,WAGxB0B,EAAYjC,kBAAkBkD,QAI5ByB,EAAO1D,UAAY0D,EAAO1D,SAAW,GACvCgB,EAAYT,cAAcptB,UAAU,WAAM,MAAA6tB,GAAYjB,cAAc2D,EAAe,YAGjFA,EAAO9C,qBACT3yB,KAAK+0B,MAAMyC,SAAS/B,EAAO9C,oBAAqB8C,EAAO/C,aAQnDmC,EAAVlwB,UAAAiyB,eAAA,SAAyBnB,GACrB,GAAMgC,GAAgB,GAAIC,GAAAA,aAC1BD,GAAc3oB,UAAY2mB,EAAO3mB,SAEjC,IAAI6oB,GAAmB33B,KAAK80B,SAASjhB,WAAW+jB,SAE1CC,EAA6B,QAArBpC,EAAO3mB,UACfgpB,EAC0B,SAA9BrC,EAAO7C,oBACwB,UAA9B6C,EAAO7C,qBAAmCiF,GACZ,QAA9BpC,EAAO7C,oBAAgCiF,EACpCE,GAAWD,GAAwC,WAA9BrC,EAAO7C,kBAgBlC,OAfIkF,GACFH,EAAiB1kB,KAAK,KACb8kB,EACTJ,EAAiBK,MAAM,KAEvBL,EAAiBM,qBAGa,QAA5BxC,EAAO5C,iBACT8E,EAAiBpK,IAAI,KAErBoK,EAAiBO,OAAO,KAG1BT,EAAcE,iBAAmBA,EAC1B33B,KAAK80B,SAASqD,OAAOV,IAQtB5C,EAAVlwB,UAAAoyB,gBACA,SAAMtB,EACA1C,GAEF,GAAMmD,GAAeT,GAAUA,EAAOtgB,kBAAoBsgB,EAAOtgB,iBAAiBghB,QAElF,OAAO,IAAIC,GAAAA,eAAeF,GAAgBl2B,KAAKg1B,UAAW,GAAIqB,WAC3DxF,GAAgBkC,IAChBP,GAAoBiD,EAAO5tB,yBA1OlC7I,KAACgiB,EAAAA,WAADrf,OAAasQ,WAAYyiB,2CArCzB11B,KAAQo5B,EAAAA,UAFRp5B,KAAQq5B,EAAAA,gBAURr5B,KAAEs5B,EAAAA,WATFt5B,KAAQu5B,EAAAA,qBAkERv5B,KAAuD61B,EAAvDpzB,aAAAzC,KAAOsD,EAAAA,WAAPtD,KAAmBoiB,EAAAA,aAjDnBpiB,KAA4ByzB,GAA5BhxB,aAAAzC,KAkDOuD,EAAAA,OAlDPZ,MAkDcgzB,uOA5EdE,KC0DA2D,GAAA,yBA1DA,MAAAA,MA2DaC,GACTC,EAAiB94B,EAAc44B,qFAWjC34B,GAAF84B,UAAc,GAAIC,KAGhB/4B,EAAF8T,cAA2B,GAAIC,GAAAA,QAS7B/T,EAAFmjB,MAAiD,MAWjDnjB,EAAAg5B,WAAsC,GAYpCh5B,EAAFqQ,WAAqE,GAAIsG,GAAAA,eA1GzE,MAoE6B9R,GAA7Bkf,EAAA9jB,GAkBE2L,OAAFC,eACMkY,EADNjf,UAAA,iBAAE,WACiC,MAAO3E,MAAK64B,gBAC7C,SAAc/pB,GACZ,GAAIjK,EAAAA,aAAeiK,GAA2B,QAAdA,GAAqC,SAAdA,EACrD,KAAMgqB,IAA6BhqB,EAErC9O,MAAK64B,WAAa/pB,mCAQpBrD,OAAFC,eACMkY,EADNjf,UAAA,oBAAE,WAC8B,MAAO3E,MAAKsiB,mBAC1C,SAAiBvG,GAAc/b,KAAKsiB,cAAgBrE,EAAAA,sBAAsBlC,oCAU1E6H,EAAFjf,UAAA6d,SAAE,SAASuW,GACP,IAAKA,EAAShY,GACZ,KAAMiY,KAGR,IAAIh5B,KAAK24B,UAAUM,IAAIF,EAAShY,IAC9B,KAAMmY,IAAgCH,EAAShY,GAEjD/gB,MAAK24B,UAAUQ,IAAIJ,EAAShY,GAAIgY,IAOlCnV,EAAFjf,UAAA8d,WAAE,SAAWsW,GACT/4B,KAAK24B,UAAUS,OAAOL,EAAShY,KAIjC6C,EAAFjf,UAAAiK,KAAE,SAAKmqB,GACC/4B,KAAK6O,QAAUkqB,EAAShY,IAC1B/gB,KAAK6O,OAASkqB,EAAShY,GACvB/gB,KAAK8O,UAAYiqB,EAAS/V,MAAQ+V,EAAS/V,MAAQhjB,KAAKgjB,OAExDhjB,KAAK8O,UAAY9O,KAAKq5B,qBAAqBN,GAG7C/4B,KAAKkQ,WAAWiH,MAAMtI,OAAQ7O,KAAK6O,OAAQC,UAAW9O,KAAK8O,aAI7D8U,EAAFjf,UAAA00B,qBAAE,SAAqBN,GACnB,IAAKA,EAAY,MAAO,EAGxB,IAAMjV,GAAwC,MAAzBiV,EAASjV,aAAuBiV,EAASjV,aAAe9jB,KAAK8jB,aAC9EwV,EAAqBC,GAAsBR,EAAS/V,OAAShjB,KAAKgjB,MAAOc,GAGzE0V,EAAqBF,EAAmBzpB,QAAQ7P,KAAK8O,WAAa,CAEtE,OADI0qB,IAAsBF,EAAmBn0B,SAAUq0B,EAAqB,GACrEF,EAAmBE,IAG5B5V,EAAFjf,UAAAwP,SAAE,WACEnU,KAAKy5B,oBAGP7V,EAAFjf,UAAAqP,YAAE,WACEhU,KAAK2T,cAAchI,QAGrBiY,EAAFjf,UAAAsD,YAAE,WACEjI,KAAK2T,cAAcO,2BAvGvBlV,KAAC0C,EAAAA,UAADC,OACEwC,SAAU,YACVvC,SAAU,UACVC,QAAS,mDAWXgN,SAAA7P,KAAGO,EAAAA,MAAHoC,MAAS,mBAMTqhB,QAAAhkB,KAAGO,EAAAA,MAAHoC,MAAS,kBAGTmN,YAAA9P,KAAGO,EAAAA,MAAHoC,MAAS,sBAcTmiB,eAAA9kB,KAAGO,EAAAA,MAAHoC,MAAS,yBAMTuO,aAAAlR,KAAGyY,EAAAA,OAAH9V,MAAU,oBA1GViiB,GAoE6B6U,IvBlDvBjY,GAA4BkZ,GAAmBC,SAAW,IAC9BC,GAAgBC,eAMrCtW,IASXC,UAAW5O,EAAAA,QAAQ,aACjBC,EAAAA,MAAM,kBAAmBjC,EAAAA,OAAOkC,UAAW,qBAE3CD,EAAAA,MAAM,oBAAqBjC,EAAAA,OAAOkC,UAAW,sBAC7CE,EAAAA,WAAW,6BAA8BC,EAAAA,QAAQuL,OAInDiD,YAAa7O,EAAAA,QAAQ,eACnBC,EAAAA,MAAM,kBAAmBjC,EAAAA,OAAOkC,UAAW,oBAC3CD,EAAAA,MAAM,oBAAqBjC,EAAAA,OAAOkC,UAAW,mBAC7CE,EAAAA,WAAW,6BAA8BC,EAAAA,QAAQuL,OAInDkD,aAAc9O,EAAAA,QAAQ,gBACpBC,EAAAA,MAAM,kBAAmBjC,EAAAA,OAAOkC,UAAW,mBAC3CD,EAAAA,MAAM,oBAAqBjC,EAAAA,OAAOkC,UAAW,oBAC7CE,EAAAA,WAAW,6BAA8BC,EAAAA,QAAQuL,OAInDmD,aAAc/O,EAAAA,QAAQ,gBACpBC,EAAAA,MAAM,wCAAyCjC,EAAAA,OAAOugB,QAAS,KAC/Dte,EAAAA,MAAM,kCAAmCjC,EAAAA,OAAOugB,QAAS,OACzDte,EAAAA,MAAM,4EACFjC,EAAAA,OAAOugB,QAAS,KAEpBne,EAAAA,WAAW,yDAA0DC,EAAAA,QAAQ,QAC7ED,EAAAA,WAAW,UAAWC,EAAAA,QAAQuL,OAUhCuB,cAAenN,EAAAA,QAAQ,iBAErBI,EAAAA,WAAW,yCACPC,EAAAA,QAAQuL,GAA2BC,EAAAA,WACjC7N,EAAAA,OAAOkC,UAAW,qBAClBlC,EAAAA,OAAOkC,UAAW,sBAGxBE,EAAAA,WAAW,yCACPC,EAAAA,QAAQuL,GAA2BC,EAAAA,WACjC7N,EAAAA;gGAAOkC,UAAW,kBAClBlC,EAAAA,OAAOkC,UAAW,wBAGxBE,EAAAA,WAAW,uCACPC,EAAAA,QAAQuL,GAA2BC,EAAAA,WACjC7N,EAAAA,OAAOkC,UAAW,oBAClBlC,EAAAA,OAAOkC,UAAW,sBAGxBE,EAAAA,WAAW,uCACPC,EAAAA,QAAQuL,GAA2BC,EAAAA,WACjC7N,EAAAA,OAAOkC,UAAW,kBAClBlC,EAAAA,OAAOkC,UAAW,yBAExBD,EAAAA,MAAM,yEACFjC,EAAAA,OAAOkC,UAAW,mBACtBD,EAAAA,MAAM,qCACFjC,EAAAA,OAAOkC,UAAW,sBACtBD,EAAAA,MAAM,kCACFjC,EAAAA,OAAOkC,UAAW,uBAIxB4L,cAAe9L,EAAAA,QAAQ,iBACrBI,EAAAA,WAAW,WACT2L,EAAAA,MAAM,KAAMC,EAAAA,gBAAiBC,UAAU,oCCxF3C7gB,KAAFiF,QAAoC,GAAI2O,GAAAA,QAGtC5T,KAAF8gB,gBAAoB,SAACC,GACjB,MAAO,sBAAsBA,GAzBjC,sBAeA/hB,KAACgiB,EAAAA,WAADrf,OAAasQ,WAAY,8GAfzBgP,KAkCaC,IAEX1Z,QAASyZ,GACTE,OAAQ,GAAI7e,GAAAA,SAAY,GAAI8e,GAAAA,SAAYH,KACxCI,WAAYC,ICPdC,GAAA,yBA/BA,MAAAA,MAgCaC,GACT5hB,EAAc2hB,mBAoGhB,QAAFE,GAAqBC,EACPrL,EACmBtG,EACA4R,GAH/B,GAAF9hB,GAKIC,EALJC,KAAAC,OAAAA,IAOI,IAPiBH,EAArB6hB,MAAqBA,EAEY7hB,EAAjCkQ,MAAiCA,EACAlQ,EAAjC8hB,cAAiCA,EAtC/B9hB,EAAF+hB,oBAAgC,EAU9B/hB,EAAFgiB,gBAAmC,GAKjChiB,EAAFiiB,4BAA+B,EAS7BjiB,EAAFkiB,cAA+C,SAkBtChS,EACH,KAAMiS,YAGRniB,GAAKoiB,sBAAwB/V,EAAAA,MAAM6D,EAAMG,WAAYH,EAAM4D,cAAe+N,EAAMzc,SAC3EC,UAAU,WACLrF,EAAKqiB,aACPriB,EAAKsiB,yBAIFtiB,EAAKqiB,aAAeriB,EAAKuiB,YAA0C,WAA5BviB,EAAKuiB,WAAWlL,UAC1DrX,EAAKiiB,4BAA6B,EAClCjiB,EAAKwiB,8BAA8B/K,UAAW,SAAUJ,QAASrX,EAAKgiB,mBAGxExL,EAAkBQ,mBA5B5B,MAtCmCnS,GAAnC+c,EAAA3hB,GAsCE2L,OAAFC,eACM+V,EADN9c,UAAA,oBAAE,WAC8B,MAAO3E,MAAKsiB,mBAC1C,SAAiBvG,GAAK/b,KAAKsiB,cAAgBrE,EAAAA,sBAAsBlC,oCA8BjE0F,EAAF9c,UAAAwP,SAAE,YACOnU,KAAK+gB,IAAM/gB,KAAK2hB,gBACnB3hB,KAAK+gB,GAAK/gB,KAAK2hB,cAAcY,MAI/BviB,KAAKmiB,wBACLniB,KAAKqiB,8BACAnL,QAASlX,KAAKkiB,YAAc,SAAWliB,KAAK6hB,kBAEjD7hB,KAAK+P,MAAMyS,SAASxiB,OAGtByhB,EAAF9c,UAAAsD,YAAE,WACEjI,KAAK+P,MAAM0S,WAAWziB,MACtBA,KAAKiiB,sBAAsBjR,eAO7ByQ,EAAF9c,UAAA+d,yBAAE,SAAyBC,GAEnB3iB,KAAK4iB,eAAiBD,IAE1B3iB,KAAK4hB,mBAAqBe,EAErB3iB,KAAKkiB,cACRliB,KAAKmiB,wBACDniB,KAAK4hB,mBACP5hB,KAAKqiB,8BAA8B/K,UAAWtX,KAAK6hB,gBAAiB3K,QAAS,SAE7ElX,KAAKqiB,8BAA8B/K,UAAW,OAAQJ,QAASlX,KAAK6hB,qBAU1EJ,EAAF9c,UAAA0d,6BAAE,SAA6BQ,GAC3B7iB,KAAKoiB,WAAaS,EAId7iB,KAAK8hB,6BACP9hB,KAAKoiB,YAAclL,QAAS2L,EAAU3L,WAK1CuK,EAAF9c,UAAA6a,aAAE,WACE,IAAIxf,KAAK4iB,cAAT,CAEA5iB,KAAK+P,MAAMnB,KAAK5O,MAGgB,SAA5BA,KAAKoiB,WAAWlL,SAAkD,WAA5BlX,KAAKoiB,WAAWlL,UACxDlX,KAAK8hB,4BAA6B,EAKpC,IAAMe,GAAsC7iB,KAAKkiB,aAC5C5K,UAAWtX,KAAK6hB,gBAAiB3K,QAAS,WAC1CI,UAAW,SAAUJ,QAASlX,KAAK6hB,gBACxC7hB,MAAKqiB,6BAA6BQ,GAElC7iB,KAAK4hB,oBAAqB,IAI5BH,EAAF9c,UAAAud,UAAE,WACE,MAAOliB,MAAK+P,MAAMlB,QAAU7O,KAAK+gB,KACH,QAAzB/gB,KAAK+P,MAAMjB,WAAgD,SAAzB9O,KAAK+P,MAAMjB,YAIpD2S,EAAF9c,UAAAme,wBAAE,WACE,OAAU9iB,KAAKkiB,YAAc,UAAY,IAAKliB,KAAK6hB,iBAIrDJ,EAAF9c,UAAAoe,mBAAE,WACE,GAAMzL,GAAYtX,KAAKoiB,WAAW9K,SAClC,QAAQA,EAAeA,EAA3B,OAA6C,IAAMtX,KAAKoiB,WAAWlL,SAajEuK,EAAF9c,UAAAwd,sBAAE,WACEniB,KAAK6hB,gBAAkB7hB,KAAKkiB,YACxBliB,KAAK+P,MAAMjB,UACV9O,KAAKgjB,OAAShjB,KAAK+P,MAAMiT,OAGhCvB,EAAF9c,UAAAie,YAAE,WACE,MAAO5iB,MAAK+P,MAAMpP,UAAYX,KAAKW,UASrC8gB,EAAF9c,UAAAse,sBAAE,WACE,MAAKjjB,MAAKkiB,YAEqB,OAAxBliB,KAAK+P,MAAMjB,UAAqB,YAAc,aAFrB,qBAtNpC9P,KAACgH,EAAAA,UAADrE,OAAAwC,SAAA,oBACEvC,SAAU,gBACVqE,SAAU,qiCACVC,QAAF,6nDACE1H,MACF2D,UAAA,iBACM+gB,eAAN,iCACIC,cAAJ,iCACIC,eAAgB,kCAChBC,mBAAJ,0BACIC,mCAAJ,iBAEA5kB,cAAAC,EAAAA,kBAAAC,KACAC,gBAAAC,EAAAA,wBAAAC,OACE8C,QAAF,YACE2V,YACF+L,GAAAC,UACAD,GAAAE,YACIF,GAAkBG,aAClBH,GAAkBI,aAClBJ,GAAkBxB,cAClBwB,GAAkB7C,4FA3DtB1hB,KAAQ4kB,GAARniB,aAAAzC,KAAAsD,EAAAA,aAdAtD,KAAE6kB,EAAAA,aAAFpiB,aAAAzC,KAAAsD,EAAAA,cAHAmf,EAAApiB,4FA8GA2jB,QAAAhkB,KAAAO,EAAAA,QAGAukB,eAAA9kB,KAAAO,EAAAA,SAMAkiB,mCChIA,sBAeAziB,KAAC4D,EAAAA,SAADjB,OACEkB,SAAUC,EAAAA,cACVM,SAAUwgB,GAASnC,IACnBhe,cAAemgB,GAASnC,IACxBla,WAAY2Z,QAnBd6C,KCYaC,GAAgBC,EAAAA,wFAZ7B,MAiBkCvf,GAAlCwf,EAAApkB,kBAHAd,KAAC0C,EAAAA,UAADC,OACEwC,SAAU,qBAfZ+f,GAiBkCF,+BCEhChkB,KAAFiF,QAAoC,GAAI2O,GAAAA,QAGtC5T,KAAFmkB,cAA0B,WAtB1B,sBAaAnlB,KAACgiB,EAAAA,WAADrf,OAAasQ,WAAY,8GAbzBmS,mBCgEE,QAAFC,GACW3C,EACCvhB,EACAmkB,EACRjO,GAHOrW,KAAX0hB,MAAWA,EACC1hB,KAAZG,cAAYA,EACAH,KAAZskB,SAAYA,EAERnkB,EAAcW,QAAQwjB,GAAU,GAChCtkB,KAAKukB,kBAAoB7C,EAAMzc,QAAQC,UAAU,WAAM,MAAAmR,GAAkBQ,iBAR7E,MAWEwN,GAAF1f,UAAAsD,YAAE,WACEjI,KAAKukB,kBAAkBvT,cACvBhR,KAAKG,cAAckB,eAAerB,KAAKskB,WAIzCD,EAAF1f,UAAA6f,aAAE,WACE,MAAOxkB,MAAKykB,gBAAiBP,IAAe,KAAOlkB,KAAKykB,OAI1DJ,EAAF1f,UAAA+f,eAAE,WACE,MAAO1kB,MAAKykB,gBAAiBP,IAAelkB,KAAKykB,MAAQ,MAI3DJ,EAAF1f,UAAAggB,gBAAE,WACE,MAAO3kB,MAAKskB,SAAShkB,eAIvB+jB,EAAF1f,UAAAigB,gBAAE,WACE,OACEta,MAAOtK,KAAKsK,MACZuE,OAAQ7O,KAAK6O,OACbgS,SAAU7gB,KAAK6gB,WAInBwD,EAAF1f,UAAAmT,MAAE,WACE9X,KAAK2kB,kBAAkB7M,wBA9E3B9Y,KAACgH,EAAAA,UAADrE,OAAAwC,SAAA,kBACE8B,SAAU,muEACVC,QAAF,mzBACE1H,MACFC,MAAA,kBACMyI,KAAN,OAEAxI,cAAAC,EAAAA,kBAAAC,KACAC,gBAAAC,EAAAA,wBAAAC,+EAZAC,KAAQ0I,EAAAA,aAbR1I,KAAQE,EAAAA,qBAGRmlB,EAAAhlB,8DA8BAwlB,eAAA7lB,KAAAO,EAAAA,QAGAulB,gBAAA9lB,KAAAO,EAAAA,QAGA+K,QAAAtL,KAAAO,EAAAA,QAGAwlB,WAAA/lB,KAAAO,EAAAA,QAGAsP,SAAA7P,KAAAO,EAAAA,QAGAshB,WAAA7hB,KAAGO,EAAAA,SAMH8kB,KC1CaW,IAKXC,yBAA0BrQ,EAAAA,QAAQ,kBAChCC,EAAAA,MAAM,WAAYjC,EAAAA,OAAOkC,UAAW,2BAA4BjC,WAAY,YAC5EgC,EAAAA,MAAM,UAAWjC,EAAAA,OAAOkC,UAAW,OAAQjC,WAAY,aACvDgC,EAAAA,MAAM,OAAQjC,EAAAA,OAAOkC,UAAW,0BAA2BjC,WAAY,YACvEmC,EAAAA,WAAW,SAAUC,EAAAA,QAAQ,2CAI/BiQ,uBAAwBtQ,EAAAA,QAAQ,kBAC9BC,EAAAA,MAAM,WAAYjC,EAAAA,OAAOyM,OAAQ,MAAOxM,WAAY,YACpDgC,EAAAA,MAAM,OAAQjC,EAAAA,OAAOyM,OAAQ,MAAOxM,WAAY,YAChDgC,EAAAA,MAAM,UAAWjC,EAAAA,OAAOyM,OAAQ,IAAKxM,WAAY,aACjDmC,EAAAA,WAAW,gBAAiBC,EAAAA,QAAQ,0DCNtC,QAAFkQ,GAAqBC,GAAAplB,KAArBolB,YAAqBA,EA/BrB,sBAwBApmB,KAAC0C,EAAAA,UAADC,OACEwC,SAAU,sEAjBZnF,KAA0BmU,EAAAA,iCAqB1BoP,OAAAvjB,KAAGO,EAAAA,MAAHoC,MAAS,qBA7BTwjB,KCiDaE,GAAcC,EAAAA,0BAgBzB,QAAFC,GAAoDC,EAClBC,EAC4BC,GAF5D,GAAF7lB,GAGIC,EAHJC,KAAAC,KAGUwlB,EAASE,IAHnB1lB,WACkCH,GAAlC4lB,mBAAkCA,IAJlC,MAF6B/gB,GAA7B6gB,EAAAzlB,GAYEylB,EAAF5gB,UAAAghB,aAAE,SAAaC,EAA6BC,GACxC,GAAMC,GAAqB9lB,KAAKylB,mBAAmBE,aAAaC,EAASC,GAKnEE,KAAsBH,GAAWA,EAAQI,SAAWhmB,KAAKimB,WAE/D,OAAOH,IAAsBC,kBA7BjC/mB,KAACgH,EAAAA,UAADrE,OAAAwC,SAAA,WACE8B,SAAU,uDACVsB,YAAFC,QAAA0e,GAAAze,YAAA8d,IACE7mB,cAAFC,EAAAA,kBAAAC,KACEgD,SAAF,UACE/C,gBAAFC,EAAAA,wBAAAC,0KASAC,SAA6DqD,GAA7DZ,aAAAzC,KAAAsD,EAAAA,WAAAtD,KAAAuD,EAAAA,OAAAZ,MAAAwkB,EAAAA,iCAEAZ,EAAAlmB,6DALAkmB,cA9DAa,GAAA,SAAAtmB,gBAwFA,GAAAD,GAAA,OAAAC,GAAAA,EAAAqM,MAAAnM,KAAA6M,YAAA7M,qEAWA,kEAKAA,MAMGqmB,OANH9K,8BACU,GAAVgH,GAAA7R,EAAA6R,KAA8B6C,EAA9B1U,EAAA0U,WACA,OAAAvlB,GAAAymB,eAAA/D,GAAA6C,IAA2CplB,KAA3CumB,OAAAthB,QAAAgF,KAAA4Q,EAAAA,UAAA7a,KAAAyY,aAAAvT,UAAA,WAAA,MAAArF,GAAA2mB,iFAMAxmB,KAAA8d,cAAA3G,QAGAiP,EAAA3kB,aACAzC,KAAA0C,EAAAA,UAAAC,mCA7BAykB,EAAA/mB,0GAGAgnB,SAAArnB,KAAAoJ,EAAAA,gBAAezG,MAAfwjB,MAGArH,gBAAA9e,KAAAyY,EAAAA,UAMA2O,OAnGAK,GAAA,SAAA3mB,gBA0IA,GAAAD,GAAA,OAAAC,GAAAA,EAAAqM,MAAoDnM,KAApD6M,YAAA7M,2JAnBAiG,SAAA,24CACEC,QAAF,wiGACErE,QAAF,iBACErD,MACFC,MAAe,yBACfioB,yCAAA,yBACAC,4CAAA,4BACMC,mBAAN,aACI1f,KAAJ,WAEAsQ,YAAAwN,GAAAC,0BACA1d,YAAAC,QAAA4e,GAAA3e,YAAAgf,IACA/nB,cAAAC,EAAAA,kBAAAC,KACAC,gBAAAC,EAAAA,wBAAAC,WAGA0nB,EAAApnB,gBACAwnB,gBAAA7nB,KAAAO,EAAAA,gBAIAunB,GAAA,SAAAhnB,uBAqBA,GAAAD,GAAAC,EAAAC,KAAAC,KAAA2W,EAAAN,EAAA/R,EAAAG,IAAAzE,WACAH,GAAAknB,aAAA,2BAAAD,EAAArlB,aAOAzC,KAAAgH,EAAAA,UAAArE,OAAAwC,SAAA,qDACA8B,SAAA,m2IA1BApE,QAAA,iBACErD,MACFC,MAAA,uBACAmoB,mBAAA,WACA1f,KAAA,WAEEsQ,YAAFwN,GAAAE,wBACE3d,YAAFC,QAAA4e,GAAA3e,YAAAqf,IACApoB,cAAAC,EAAAA,kBAAAC,KACAC,gBAAAC,EAAAA,wBAAAC,WAIA+nB,EAAAE,eAAA,WAAA,QACAhoB,KAAAie,EAAAA,eAAAxb,aAAAzC,KAAmCsD,EAAAA,aACnCtD,KAAAE,EAAAA,oBACAF,KAAA0I,EAAAA,8EAxJA0e,ICKaa,GAAkBC,EAAAA,eAClBC,GAAsBC,EAAAA,8FAdnC,MA0BoC1iB,GAApC2iB,EAAAvnB,kBATAd,KAAC0C,EAAAA,UAADC,OACEwC,SAAU,yBACV3F,MACE2D,UAAW,kBACXmlB,SAAU,QAEZzlB,QAAS,QACT0F,YAAaC,QAAS8d,EAAAA,WAAY7d,YAAa2e,SAxBjDiB,GA0BoCJ,+EA1BpC,MAsCwCviB,GAAxC6iB,EAAAznB,kBATAd,KAAC0C,EAAAA,UAADC,OACEwC,SAAU,6BACV3F,MACE2D,UAAW,sBACXmlB,SAAU,QAEZzlB,QAAS,QACT0F,YAAaC,QAAS8d,EAAAA,WAAY7d,YAAa2e,SApCjDmB,GAsCwCJ,gCCtCxC,sBAuBAnoB,KAAC4D,EAAAA,SAADjB,OACEkB,SACEE,GACAD,EAAAA,aACAE,EAAAA,aACAwkB,GACAC,EAAAA,iBACAC,GACAzkB,IAEFG,SACEL,GACA0jB,GACAK,GACAvB,GACArB,GACAkC,GACAiB,GACAE,GACAlD,GACAc,IAEF1hB,cACEgjB,GACAK,GACAvB,GACArB,GACAkC,GACAiB,GACAE,GACAlD,GACAc,IAEF5d,WAAY6c,GAAgB8B,QAxD9ByB,KCYaC,GAAYC,EAAAA,yFAmBvBhoB,GAAFioB,eAA6B,qBAH7B,MACiCpjB,GAAjCyI,EAAArN,kBAZAd,KAACgH,EAAAA,UAADrE,OAAAwC,SAAA,8BACEvC,SAAU,WACVqE,SAAU8hB,EAAAA,mBACV7hB,QAAF,+wDACE1H,MACFC,MAAA,aAEAC,cAAAC,EAAAA,kBAAAC,KACAC,gBAAAC,EAAAA,wBAAAC,WAGAoO,OCVa6a,GAAcC,EAAAA,WACdC,GAAoBC,EAAAA,iBACpBC,GAAoBC,EAAAA,4FApBjC,MA8BgC3jB,GAAhC6I,EAAAzN,kBAJAd,KAAC0C,EAAAA,UAADC,OACEwC,SAAU,eACVoD,YAAaC,QAASygB,EAAAA,WAAYxgB,YAAa8F,QA5BjDA,GA8BgCya,+EA9BhC,MAwCsCtjB,GAAtC0I,EAAAtN,kBAJAd,KAAC0C,EAAAA,UAADC,OACEwC,SAAU,qBACVoD,YAAaC,QAAS2gB,EAAAA,iBAAkB1gB,YAAa2F,QAtCvDA,GAwCsC8a,+EAxCtC,MAkDsCxjB,GAAtC+I,EAAA3N,kBAJAd,KAAC0C,EAAAA,UAADC,OACEwC,SAAU,qBACVoD,YAAaC,QAAS6gB,EAAAA,iBAAkB5gB,YAAagG,QAhDvDA,GAkDsC2a,+EAlDtC,MA4DkC1jB,GAAlC4I,EAAAxN,kBAJAd,KAAC0C,EAAAA,UAADC,OACEwC,SAAU,iBACVoD,YAAaC,QAASqc,EAAAA,aAAcpc,YAAa6F,0BAInDiV,OAAAvjB,KAAGO,EAAAA,MAAHoC,MAAS,kBAGT2mB,SAAAtpB,KAAGO,EAAAA,QAGHgpB,YAAAvpB,KAAGO,EAAAA,SApEH+N,GA4DkCuW,EAAAA,6BAoBhC,QAAFlW,GAAc6a,EACAlkB,GADZ,GAAFzE,GAEIC,EAFJC,KAAAC,KAEUwoB,EAAWlkB,IAFrBtE,WAGIsE,GAAWhE,cAAckF,UAAU4Y,IAAI,cAAcoK,EAAUC,wBAnFnE,MA+EmC/jB,GAAnCiJ,EAAA7N,kBAPAd,KAAC0C,EAAAA,UAADC,OACEwC,SAAU,uCACV3F,MACEC,MAAS,kBACTyI,KAAQ,wDAhEZlI,KAAE6kB,EAAAA,eAJF7kB,KAAmB0I,EAAAA,cARnBiG,GA+EmC+a,EAAAA,8BAiBjC,QAAF7a,GAAc2a,EACAlkB,GADZ,GAAFzE,GAEIC,EAFJC,KAAAC,KAEUwoB,EAAWlkB,IAFrBtE,WAGIsE,GAAWhE,cAAckF,UAAU4Y,IAAI,cAAcoK,EAAUC,wBAnGnE,MA+FmC/jB,GAAnCmJ,EAAA/N,kBAPAd,KAAC0C,EAAAA,UAADC,OACEwC,SAAU,uCACV3F,MACEC,MAAS,kBACTyI,KAAQ,oDAhFZlI,KAAE6kB,EAAAA,eAJF7kB,KAAmB0I,EAAAA,cARnBmG,GA+FmC8a,EAAAA,8BAiBjC,QAAF/a,GAAc4a,EACAlkB,GADZ,GAAFzE,GAEIC,EAFJC,KAAAC,KAEUwoB,EAAWlkB,IAFrBtE,WAGIsE,GAAWhE,cAAckF,UAAU4Y,IAAI,cAAcoK,EAAUC,wBAnHnE,MA+G6B/jB,GAA7BkJ,EAAA9N,kBAPAd,KAAC0C,EAAAA,UAADC,OACEwC,SAAU,yBACV3F,MACEC,MAAS,WACTyI,KAAQ,oDAhGZlI,KAAE6kB,EAAAA,eAJF7kB,KAAmB0I,EAAAA,cARnBkG,GA+G6Bgb,EAAAA,SzBxFhBC,GAAmBC,EAAAA,gBACnBC,GAAmBC,EAAAA,gBACnBC,GAAaC,EAAAA,qFAzB1B,MAoCqCxkB,GAArC2I,EAAAvN,kBALAd,KAAC0C,EAAAA,UAADC,OACEwC,SAAU,oBACVoD,YAAaC,QAASshB,EAAAA,gBAAiBrhB,YAAa4F,IACpDxL,QAAS,2BAA4B,qCAlCvCwL,GAoCqCwb,+EApCrC,MA+CqCnkB,GAArCgJ,EAAA5N,kBALAd,KAAC0C,EAAAA,UAADC,OACEwC,SAAU,oBACVoD,YAAaC,QAASwhB,EAAAA,gBAAiBvhB,YAAaiG,IACpD7L,QAAS,2BAA4B,qCA7CvC6L,GA+CqCqb,+EA/CrC,MA2DkCrkB,GAAlC8I,EAAA1N,kBALAd,KAAC0C,EAAAA,UAADC,OACEwC,SAAU,cACVoD,YAAaC,QAAS0hB,EAAAA,UAAWzhB,YAAa+F,IAC9C3L,QAAS,4BAA6B,2BAzDxC2L,GA2DkCyb,+EAelC,MACkCvkB,GAAlCkI,EAAA9M,kBAbAd,KAACgH,EAAAA,UAADrE,OAAAwC,SAAA,qCACE8B,SAAUkjB,EAAAA,iBACV3qB,MACFC,MAAA;uBACMyI,KAAN,OAEArI,gBAAiBC,EAAAA,wBAAjBC,OACAL,cAAAC,EAAAA,kBAAAC,KACEgD,SAAF,eACE2F,YAAFC,QAAAmF,EAAAA,aAAuClF,YAAvCmF,QAGAA,+CAiBA,MAAA,QAAA9M,GAAAA,EAAAqM,MAAAnM,KAAA6M,YAAA7M,KAHA,+HAVAxB,MACAC,MAAA,iBACAyI,KAAA,OAEErI,gBAAFC,EAAAA,wBAAAC,OACAL,cAAAC,EAAAA,kBAAAC,KACAgD,SAAU,eACV2F,YAAAC,QAAAsF,EAAAA,aAAArF,YAAAsF,QAGAA,GACAD,EAAAA,cAEAE,GAAA,SAAAlN,+DAWA,cAK4BkN,EAA5BvL,uHAbAyF,KAAA,OAEErI,gBAAFC,EAAAA,wBAAAC,OACEL,cAAFC,EAAAA,kBAAAC,KACEgD,SAAF,SACA2F,YAAAC,QAAAyF,EAAAA,OAAAxF,YAAAuF,QAGAA,GACAC,EAAAA,QCxEMC,IAEJC,GAGAC,GACAC,GACAC,GACAC,GACAC,GACAC,GACAC,GAGAC,GACAC,GACAC,GAGAjB,GACAI,GACAD,gCApDF,sBAuDA/N,KAAC4D,EAAAA,SAADjB,OACEkB,SAAUiL,EAAAA,eAAgBhL,EAAAA,aAAcC,IACxCK,QAAS8J,GACTzJ,aAAcyJ,OA1DhBa,KC0BMC,GAAmB,iBAUzBC,GAAA,SAAAnO,GAoJE,QAAFmO,GAAc7C,OAAd,KAAAA,IAAcA,KAAZ,IAAFvL,GACIC,EADJC,KAAAC,OAAAA,WA/IAH,GAAAqO,YAAiC,GAAI5C,GAAAA,oBAGrCzL,EAAAsO,QAA6B,GAAI7C,GAAAA,gBAAwB,IAMvDzL,EAAFuO,2BAA+BC,EAAAA,aAAaC,MA0D1CzO,EAAF0O,oBACM,SAAC1G,EAAS2G,GACZ,GAAMvN,GAAa4G,EAAK2G,EAExB,IAAIC,EAAAA,eAAexN,GAAQ,CACzB,GAAMyN,GAAcvH,OAAOlG,EAI3B,OAAOyN,GAAcV,GAAmBU,EAAczN,EAGxD,MAAOA,IAYTpB,EAAF8O,SAAkD,SAAC9G,EAAW+G,GAC1D,GAAMC,GAASD,EAAKC,OACdC,EAAYF,EAAKE,SACvB,OAAKD,IAAuB,IAAbC,EAERjH,EAAK+G,KAAK,SAACG,EAAGC,GACnB,GAAIC,GAASpP,EAAK0O,oBAAoBQ,EAAGF,GACrCK,EAASrP,EAAK0O,oBAAoBS,EAAGH,GAMrCM,EAAmB,CAcvB,OAbc,OAAVF,GAA4B,MAAVC,EAEhBD,EAASC,EACXC,EAAmB,EACVF,EAASC,IAClBC,GAAoB,GAEH,MAAVF,EACTE,EAAmB,EACA,MAAVD,IACTC,GAAoB,GAGfA,GAAiC,OAAbL,EAAqB,GAAK,KAxBdjH,GAsC3ChI,EAAFuP,gBAA4D,SAACvH,EAASvC,GAElE,GAAM+J,GAAc,SAACC,EAAaC,GAAQ,MAAAD,GAAczH,EAAK0H,IACvDC,EAAU/D,OAAOgE,KAAK5H,GAAM6H,OAAOL,EAAa,IAAIM,cAGpDC,EAAoBtK,EAAOQ,OAAO6J,aAExC,QAA8C,GAAvCH,EAAQK,QAAQD,IAKvB/P,EAAK2L,MAAQ,GAAIF,GAAAA,gBAAqBF,GACtCvL,EAAKiQ,8BA3LT,MAoC2CpL,GAA3CuJ,EAAAnO,GAyBE2L,OAAFC,eAAMuC,EAANtJ,UAAA,YAAE,WAAa,MAAO3E,MAAKwL,MAAMvK,WAC/B,SAAS4G,GAAa7H,KAAKwL,MAAMG,KAAK9D,oCAMtC4D,OAAFC,eAAMuC,EAANtJ,UAAA,cAAE,WAAuB,MAAO3E,MAAKmO,QAAQlN,WAC3C,SAAWqE,GAAkBtF,KAAKmO,QAAQxC,KAAKrG,oCAM/CmG,OAAFC,eAAMuC,EAANtJ,UAAA,YAAE,WAA6B,MAAO3E,MAAK+P,WACzC,SAASnB,GACP5O,KAAK+P,MAAQnB,EACb5O,KAAK8P,6DAcPrE,OAAFC,eAAMuC,EAANtJ,UAAA,iBAAE,WAAuC,MAAO3E,MAAKgQ,gBACnD,SAAcC,GACZjQ,KAAKgQ,WAAaC,EAClBjQ,KAAK8P,6DAoGP7B,EAAFtJ,UAAAmL,0BAAE,WAAA,GAAFjQ,GAAAG,KAOUkQ,EAAyClQ,KAAK+P,MAChD7D,EAAAA,MAAiBlM,KAAK+P,MAAMG,WAAYlQ,KAAK+P,MAAMI,aACnDC,EAAAA,GAAa,MACXC,EAA8CrQ,KAAKgQ,WACrD9D,EAAAA,MAAsBlM,KAAKgQ,WAAWM,KAAMtQ,KAAKgQ,WAAWG,aAC5DC,EAAAA,GAAa,MAEXG,EAAavQ,KAAKwL,MAElBgF,EAAeC,EAAAA,cAAcF,EAAYvQ,KAAKmO,SACjDlE,KAAKmC,EAAAA,IAAI,SAACsE,GAAjB,GAAkB7I,GAAlB6I,EAAA,EAA4B,OAAA7Q,GAAK8Q,YAAY9I,MAEnC+I,EAAcH,EAAAA,cAAcD,EAAcN,GAC7CjG,KAAKmC,EAAAA,IAAI,SAACsE,GAAjB,GAAkB7I,GAAlB6I,EAAA,EAA4B,OAAA7Q,GAAKgR,WAAWhJ,MAElCiJ,EAAgBL,EAAAA,cAAcG,EAAaP,GAC9CpG,KAAKmC,EAAAA,IAAI,SAACsE,GAAjB,GAAkB7I,GAAlB6I,EAAA,EAA4B,OAAA7Q,GAAKkR,UAAUlJ,KAEvC7H,MAAKoO,2BAA2B4C,cAChChR,KAAKoO,2BAA6B0C,EAAc5L,UAAU,SAAA2C,GAAQ,MAAAhI,GAAKqO,YAAYvC,KAAK9D,MAQ1FoG,EAAFtJ,UAAAgM,YAAE,SAAY9I,GAAZ,GAAFhI,GAAAG,IASI,OALAA,MAAKwQ,aACAxQ,KAAKsF,OAAgBuC,EAAKvC,OAAO,SAAA2L,GAAO,MAAApR,GAAKuP,gBAAgB6B,EAAKpR,EAAKyF,UAAzDuC,EAEf7H,KAAKiQ,WAAajQ,KAAKkR,iBAAiBlR,KAAKwQ,aAAarL,QAEvDnF,KAAKwQ,cAQdvC,EAAFtJ,UAAAkM,WAAE,SAAWhJ,GAET,MAAK7H,MAAK4O,KAEH5O,KAAK2O,SAAS9G,EAAKzC,QAASpF,KAAK4O,MAFf/G,GAS3BoG,EAAFtJ,UAAAoM,UAAE,SAAUlJ,GACR,IAAK7H,KAAKiQ,UAAa,MAAOpI,EAE9B,IAAMsJ,GAAanR,KAAKiQ,UAAUmB,UAAYpR,KAAKiQ,UAAUoB,QAC7D,OAAOxJ,GAAKzC,QAAQkM,OAAOH,EAAYnR,KAAKiQ,UAAUoB,WAQxDpD,EAAFtJ,UAAAuM,iBAAE,SAAiBK,GAAjB,GAAF1R,GAAAG,IACIwR,SAAQC,UAAUC,KAAK,WACrB,GAAK7R,EAAKoQ,YAEVpQ,EAAKoQ,UAAU9K,OAASoM,EAGpB1R,EAAKoQ,UAAUmB,UAAY,GAAG,CAChC,GAAMO,GAAgBC,KAAKC,KAAKhS,EAAKoQ,UAAU9K,OAAStF,EAAKoQ,UAAUoB,UAAY,GAAK,CACxFxR,GAAKoQ,UAAUmB,UAAYQ,KAAKE,IAAIjS,EAAKoQ,UAAUmB,UAAWO,OASpE1D,EAAFtJ,UAAAkH,QAAE,WAAY,MAAO7L,MAAKkO,aAMxBD,EAAFtJ,UAAA0H,WAAE,aArSF4B,GAoC2C3B,EAAAA,YCf9ByF,GACX,GAAIC,GAAAA,eAAqC,uBACvCC,WAAY,OACZC,QAASC,mBA2BX,QAAFzO,GACYxD,EACAkS,EACiCC,GAFjCrS,KAAZE,YAAYA,EACAF,KAAZoS,QAAYA,EACiCpS,KAA7CqS,kBAA6CA,EAtD7C,MA6DE3O,GAAFiB,UAAA2N,eAAE,SAAeC,GAAf,GAAF1S,GAAAG,IACIA,MAAKwS,OAEgC,mBAA1BC,uBACTzS,KAAKoS,QAAQM,kBAAkB,WAC7BD,sBAAsB,WAAM,MAAA5S,GAAK8S,WAAWJ,OAG9CvS,KAAK2S,WAAWJ,IAKpB7O,EAAFiB,UAAA6N,KAAE,WACExS,KAAKE,YAAYI,cAAcsS,MAAMC,WAAa,WAIpDnP,EAAFiB,UAAAmO,KAAE,WACE9S,KAAKE,YAAYI,cAAcsS,MAAMC,WAAa,UAO5CnP,EAAViB,UAAAgO,WAAA,SAAqBJ,GACjB,GAAMQ,GAAY/S,KAAKqS,kBAAkBE,GACnCS,EAAsBhT,KAAKE,YAAYI,aAE7C0S,GAAOJ,MAAMK,KAAOF,EAAUE,KAC9BD,EAAOJ,MAAMM,MAAQH,EAAUG,sBAhDnClU,KAAC0C,EAAAA,UAADC,OACEwC,SAAU,cACV3F,MACEC,MAAS,uDAvCbO,KAAmB0I,EAAAA,aAAnB1I,KAAuDC,EAAAA,SA8CvDD,SAAAqD,GAAAZ,aAAAzC,KAAKuD,EAAAA,OAALZ,MAAYoQ,SAtDZrO,mBCaE,QAAFF,GAAqByC,GAAAjG,KAArBiG,SAAqBA,EAbrB,sBAWAjH,KAAC0C,EAAAA,UAADC,OAAYwC,SAAU,0DAHtBnF,KAAmBmU,EAAAA,eARnB3P,KCYa4P,GAAaC,EAAAA,qFAZ1B,MAkBiC3O,GAAjCpB,EAAAxD,kBAHAd,KAAC0C,EAAAA,UAADC,OACEwC,SAAU,qCAhBZb,GAkBiC8P,ICajCE,GAAA,yBA/BA,MAAAA,MAgCaC,GACT3T,EAAc0T,mBA+DhB,QAAF/P,GAAsBiQ,GAApB,GAAF3T,GACIC,EADJC,KAAAC,OAAAA,WAAsBH,GAAtB2T,kBAAsBA,EAvCpB3T,EAAF4T,UAAsC,GAYtC5T,EAAA6T,eAAkD,KAQhD7T,EAAF8T,cAA2B,GAAIC,GAAAA,QAM7B/T,EAAFgU,SAA4B,KAM1BhU,EAAFiU,OAA0B,KAKxBjU,EAAFkU,UAAa,IA5Bb,MAtB4BrP,GAA5BnB,EAAAzD,GA4BE2L,OAAFC,eAAMnI,EAANoB,UAAA,eAAE,WACE,MAAO3E,MAAK0T,gDA2BdnQ,EAAFoB,UAAAqP,YAAE,SAAY/O,IACNA,EAAQgP,eAAe,cAAgBhP,EAAQgP,eAAe,cAChEjU,KAAK2T,cAAchI,QAIvBpI,EAAFoB,UAAAsD,YAAE,WACEjI,KAAK2T,cAAcO,YAGrB3Q,EAAFoB,UAAAwP,SAAE,WACEnU,KAAK0T,eAAiB,GAAIU,GAAAA,eACtBpU,KAAKqU,kBAAoBrU,KAAKsU,iBAAkBtU,KAAKwT,mCA7E7DxU,KAACgH,EAAAA,UAADrE,OAAAwC,SAAA,UACE8B,SAAU,uDACVpE,QAAF,YACEhD,gBAAFC,EAAAA,wBAAAC,OACEL,cAAFC,EAAAA,kBAAAC,KACEgD,SAAF,4EApBA2B,EAAAlE,wIA0BAiV,mBAAAtV,KAAAuV,EAAAA,UAAA5S,MAAgBwR,EAAAA,eAKhBM,YAAAzU,KAAAO,EAAAA,MAAGoC,MAAH,WAGA6S,YAAAxV,KAAAO,EAAAA,MAAGoC,MAAH,gBAGA8S,iBAAAzV,KAAQO,EAAAA,MAARoC,MAAA,sBASA4B,OC9CamR,IAIXC,aAAcC,EAAAA,QAAQ,gBAEpBC,EAAAA,MAAM,wDAAyDjC,EAAAA,OAAOkC,UAAW,UAMjFD,EAAAA,MAAM,OAAQjC,EAAAA,OAAOkC,UAAW,2BAA4BC,UAAW,SACvEF,EAAAA,MAAM,QAASjC,EAAAA,OAAOkC,UAAW,0BAA2BC,UAAW,SAEvEC,EAAAA,WAAW,yDACPC,EAAAA,QAAQ,yCACZD,EAAAA,WAAW,8BACTpC,EAAAA,OAAOkC,UAAW,6BAClBG,EAAAA,QAAQ,0CAEVD,EAAAA,WAAW,+BACTpC,EAAAA,OAAOkC,UAAW,4BAClBG,EAAAA,QAAQ,4DCyBZ,QAAFpR,GACIqR,EACAC,EAC8CC,GAHhD,GAAFvV,GAIMC,EAJNC,KAAAC,KAIYkV,EAA0BC,IAJtCnV,WAGkDH,GAAlDuV,MAAkDA,EAPlDvV,EAAAwV,cAA0BhH,EAAAA,aAAaC,MAEvCzO,EAAAyV,YAAwBjH,EAAAA,aAAaC,QAlErC,MA8DsC5J,GAAtCb,EAAA/D,GAcE+D,EAAFc,UAAAwP,SAAE,WAAA,GAAFtU,GAAAG,IACIF,GAAJ6E,UAAUwP,SAAVpU,KAAAC,MAEIA,KAAKqV,cAAgBrV,KAAKoV,MAAMG,iBAC7BtL,KAAKuL,EAAAA,UAAUxV,KAAKoV,MAAMK,kBAAkBzV,KAAKoV,MAAMM,aACvDxQ,UAAU,SAACyQ,GACNA,IAAgB9V,EAAK+V,eACvB/V,EAAKgW,OAAOhW,EAAKuV,MAAMU,YAI7B9V,KAAKsV,YAActV,KAAKoV,MAAMW,oBAAoB7Q,UAAU,WAC1DrF,EAAKmW,YAKTnS,EAAFc,UAAAsD,YAAE,WACEnI,EAAJ6E,UAAUsD,YAAVlI,KAAAC,MACIA,KAAKqV,cAAcrE,cACnBhR,KAAKsV,YAAYtE,8BArCrBhS,KAAC0C,EAAAA,UAADC,OACEwC,SAAU,2DAtCZnF,KAAEiX,EAAAA,2BACFjX,KAAEyH,EAAAA,mBAgDFzH,KAAyD4E,GAAzDnC,aAAAzC,KAAKuD,EAAAA,OAALZ,MAAYuU,EAAAA,WAAW,WAAM,MAAAtS,YAvE7BC,GA8DsCsS,EAAAA,+BA6FpC,QAAFvS,GAAsB1D,EACYkW,EAIpBC,GALZ,GAAFxW,GAAAG,IAAsBA,MAAtBE,YAAsBA,EACYF,KAAlCoW,KAAkCA,EAlClCpW,KAAAsW,uBAAmCjI,EAAAA,aAAaC,MAM9CtO,KAAFuW,aAA0D,GAAIC,GAAAA,aAG5DxW,KAAFuV,iBAA+D,GAAIiB,GAAAA,aAGjExW,KAAF+V,oBAAkE,GAAIS,GAAAA,aAGpExW,KAAFyW,YAAuD,GAAID,GAAAA,cAAmB,GAyBtExW,KAAKoW,MAAQC,IACfrW,KAAKsW,uBAAyBtW,KAAKoW,KAAKM,OAAOxR,UAAU,SAAAyR,GACvD9W,EAAK+W,+BAA+BD,GACpCN,EAAkBQ,kBAhB1B,MAAEpL,QAAFC,eACM9H,EADNe,UAAA,gBAAE,SACakP,GACX7T,KAAK8W,eAAiBjD,EACtB7T,KAAK4W,kEAsBPhT,EAAFe,UAAAwP,SAAE,WACwB,UAAlBnU,KAAK0V,WAAwC,MAAf1V,KAAK8T,SACrC9T,KAAK0V,UAAY1V,KAAK+W,+BAI1BnT,EAAFe,UAAAsD,YAAE,WACEjI,KAAKsW,uBAAuBtF,eAG9BpN,EAAFe,UAAAqS,uBAAE,SAAuBC,GACrB,GAAMtB,GAAc3V,KAAKyV,kBAAkBwB,EAAEC,QAC7ClX,MAAKuV,iBAAiB4B,KAAKxB,GACvBA,GACF3V,KAAKuW,aAAaY,KAAKnX,KAAKE,YAAYI,cAAc8W,eAI1DxT,EAAFe,UAAA0S,wBAAE,SAAwBJ,GAElBjX,KAAKyV,kBAAkBwB,EAAEC,UAAYlX,KAAKyV,kBAAkBzV,KAAK0V,YACnE1V,KAAKyW,YAAYU,OAGfnX,KAAKyV,kBAAkBwB,EAAEK,aAAetX,KAAKyV,kBAAkBzV,KAAK0V,YACtE1V,KAAK+V,oBAAoBoB,QAK7BvT,EAAFe,UAAA4S,oBAAE,WACE,MAAOvX,MAAKoW,MAA4B,QAApBpW,KAAKoW,KAAKnV,MAAkB,MAAQ,OAI1D2C,EAAFe,UAAA8Q,kBAAE,SAAkB5B,GAChB,MAAmB,UAAZA,GACS,sBAAZA,GACY,uBAAZA,GAIEjQ,EAAVe,UAAAiS,+BAAA,SAAyCD,OAAzC,KAAAA,IAAyCA,EAAiB3W,KAAKuX,uBACvDvX,KAAK8W,eAAiB,EACxB9W,KAAK0V,UAAmB,OAAPiB,EAAe,OAAS,QAChC3W,KAAK8W,eAAiB,EAC/B9W,KAAK0V,UAAmB,OAAPiB,EAAe,QAAU,OAE1C3W,KAAK0V,UAAY,UAQb9R,EAAVe,UAAAoS,sCACI,GAAMJ,GAAM3W,KAAKuX,qBAEjB,OAAY,OAAPZ,GAAgB3W,KAAK8T,QAAU,GAAc,OAAP6C,GAAgB3W,KAAK8T,OAAS,EAChE,qBAGF,sCArIX9U,KAACgH,EAAAA,UAADrE,OAAAwC,SAAA,eACE8B,SAAU,wOACVC,QAAF,wHACExH,cAAFC,EAAAA,kBAAAC,KACEC,gBAAFC,EAAAA,wBAAAC,OACEyY,YAAa9C,GAAfC,cACEnW,MACFC,MAAe,mIA9FfO,KAAEE,EAAAA,qBAPF0E,EAAAvE,kFAsHA0W,sBAAA/W,KAAAyY,EAAAA,SAGAhB,cAAAzX,KAAAyY,EAAAA,SAGAC,cAAA1Y,KAAAuV,EAAAA,UAAA5S,MAAAgW,EAAAA,uBAGA7B,WAAA9W,KAAAO,EAAAA,MAAAoC,MAAA,aAGAmS,SAAA9U,KAAAO,EAAAA,QAGAsU,WAAA7U,KAAGO,EAAAA,SAMHqE,KCvIAgU,GAAA,yBAdA,MAAAA,MAeaC,GACTjY,EAAcgY,mBAehB,QAAFjU,GAAqBW,GAAnB,GAAFzE,GACIC,EADJC,KAAAC,OAAAA,WAAqBH,GAArByE,WAAqBA,IA/BrB,MA8BwCI,GAAxCf,EAAA7D,GAME6D,EAAFgB,UAAAmT,MAAE,WACE9X,KAAKsE,WAAWhE,cAAcwX,SAGhCnU,EAAFgB,UAAAoT,cAAE,WACE,MAAO/X,MAAKsE,WAAWhE,cAAc0X,YAGvCrU,EAAFgB,UAAAsT,eAAE,WACE,MAAOjY,MAAKsE,WAAWhE,cAAc4X,4BAvBzClZ,KAAC0C,EAAAA,UAADC,OACEwC,SAAU,uBACVtC,QAAS,YACTrD,MACEyD,2BAA4B,WAC5BF,uBAAwB,sDAnB5B/C,KAAmB0I,EAAAA,cARnB/D,GA8BwCkU,ICuBxCM,GAAA,yBArDA,MAAAA,MAsDaC,GACTzY,EAAmBwY,mBAkFrB,QAAFrU,GAAsB5D,EACAmY,EACAC,EACYlC,EAEZhE,GALpB,GAAFvS,GAMIC,EANJC,KAAAC,OAAAA,WAAsBH,GAAtBK,YAAsBA,EACAL,EAAtBwY,mBAAsBA,EACAxY,EAAtByY,eAAsBA,EACYzY,EAAlCuW,KAAkCA,EAEZvW,EAAtBuS,QAAsBA,EAvDtBvS,EAAA0Y,gBAA4B,EAG5B1Y,EAAA2Y,uBAAkC,EAGlC3Y,EAAA4Y,WAAgC,GAAI7E,GAAAA,QAGlC/T,EAAF6Y,yBAA4B,EAG1B7Y,EAAF8Y,qBAAwB,EAGtB9Y,EAAF+Y,sBAAyB,EAczB/Y,EAAAgZ,eAAmC,EAgBjChZ,EAAFiZ,mBAA0C,GAAItC,GAAAA,aAG5C3W,EAAFkZ,aAAoC,GAAIvC,GAAAA,eAAxC,MAzDkC9R,GAAlCZ,EAAAhE,GAyCE2L,OAAFC,eACM5H,EADNa,UAAA,qBAAE,WAC8B,MAAO3E,MAAK6Y,oBAC1C,SAAkB5X,GAChBA,EAAQ+X,EAAAA,qBAAqB/X,GAC7BjB,KAAKwY,sBAAwBxY,KAAK6Y,gBAAkB5X,EACpDjB,KAAK6Y,eAAiB5X,EAElBjB,KAAKiZ,aACPjZ,KAAKiZ,YAAYC,sBAAsBjY,oCAmB3C6C,EAAFa,UAAAwU,sBAAE,WAEMnZ,KAAKoZ,gBAAkBpZ,KAAKqZ,eAAelU,SAC7CnF,KAAKsZ,oBACLtZ,KAAKoZ,eAAiBpZ,KAAKqZ,eAAelU,OAC1CnF,KAAKqY,mBAAmBxB,gBAKtB7W,KAAKwY,wBACPxY,KAAKuZ,eAAevZ,KAAK6Y,gBACzB7Y,KAAKwZ,0BACLxZ,KAAKyZ,4BACLzZ,KAAKwY,uBAAwB,EAC7BxY,KAAKqY,mBAAmBxB,gBAKtB7W,KAAK0Z,yBACP1Z,KAAK2Z,2BACL3Z,KAAK0Z,wBAAyB,EAC9B1Z,KAAKqY,mBAAmBxB,iBAI5B/S,EAAFa,UAAAiV,eAAE,SAAetY,GACb,OAAQA,EAAMuY,SACZ,IAAKC,GAAAA,KACH9Z,KAAKiZ,YAAYc,qBACjBzY,EAAMC,gBACN,MACF,KAAKyY,GAAAA,IACHha,KAAKiZ,YAAYgB,oBACjB3Y,EAAMC,gBACN,MACF,KAAK2Y,GAAAA,MACL,IAAKC,GAAAA,MACHna,KAAK8Y,mBAAmB3B,KAAKnX,KAAKoa,YAClC9Y,EAAMC,gBACN,MACF,SACEvB,KAAKiZ,YAAYoB,UAAU/Y,KAOjCwC,EAAFa,UAAAqD,mBAAE,WAAA,GAAFnI,GAAAG,KACUsa,EAAYta,KAAKoW,KAAOpW,KAAKoW,KAAKM,OAAStG,EAAAA,GAAa,MACxDmK,EAASva,KAAKsY,eAAe5B,OAAO,KACpC8D,EAAU,WACd3a,EAAKyZ,oBACLzZ,EAAK4Z,4BAGPzZ,MAAKiZ,YAAc,GAAIwB,GAAAA,gBAAgBza,KAAKqZ,gBACzCqB,0BAA0B1a,KAAKuX,uBAC/BoD,WAEH3a,KAAKiZ,YAAY2B,iBAAiB,GAID,mBAA1BnI,uBAAwCA,sBAAsB+H,GAAWA,IAIhFtO,EAAAA,MAAMoO,EAAWC,GAAQtQ,KAAK4Q,EAAAA,UAAU7a,KAAKyY,aAAavT,UAAU,WAClEsV,IACA3a,EAAKoZ,YAAYyB,0BAA0B7a,EAAK0X,yBAMlDvX,KAAKiZ,YAAYvC,OAAOzM,KAAK4Q,EAAAA,UAAU7a,KAAKyY,aAAavT,UAAU,SAAA4V,GACjEjb,EAAKkZ,aAAa5B,KAAK2D,GACvBjb,EAAKkb,aAAaD,MAItBhX,EAAFa,UAAAsD,YAAE,WACEjI,KAAKyY,WAAW9M,OAChB3L,KAAKyY,WAAWvE,YAMlBpQ,EAAFa,UAAAqW,kBAAE,WAAA,GAAFnb,GAAAG,KACUib,EAAe,WACnBpb,EAAKyZ,oBACLzZ,EAAK4Z,4BACL5Z,EAAKwY,mBAAmBxB,eAM1B7W,MAAKoS,QAAUpS,KAAKoS,QAAQ8I,IAAID,GAAgBA,KAMlDnX,EAAFa,UAAA2U,kBAAE,WACEtZ,KAAKmb,0BACLnb,KAAKwZ,0BACLxZ,KAAK2Z,4BAIPlO,OAAFC,eAAM5H,EAANa,UAAA,kBAAE,WACE,MAAO3E,MAAKiZ,YAAcjZ,KAAKiZ,YAA2B,gBAAI,OAIhE,SAAehY,GACRjB,KAAKob,cAAcna,IAAUjB,KAAKoa,aAAenZ,GAAUjB,KAAKiZ,aAIrEjZ,KAAKiZ,YAAYoC,cAAcpa,oCAOjC6C,EAAFa,UAAAyW,cAAE,SAAc9Q,GACZ,IAAKtK,KAAKqZ,eAAkB,OAAO,CAEnC,IAAMiC,GAAMtb,KAAKqZ,eAAiBrZ,KAAKqZ,eAAekC,UAAUjR,GAAS,IACzE,SAASgR,IAAQA,EAAI3a,UAOvBmD,EAAFa,UAAAoW,aAAE,SAAaxa,GAKX,GAJIP,KAAK0Y,yBACP1Y,KAAKuZ,eAAehZ,GAGlBP,KAAKqZ,gBAAkBrZ,KAAKqZ,eAAelU,OAAQ,CACrDnF,KAAKqZ,eAAekC,UAAUhb,GAAUuX,OAKxC,IAAM0D,GAAcxb,KAAKyb,kBAAkBnb,cACrCqW,EAAM3W,KAAKuX,qBAGfiE,GAAYE,WADH,OAAP/E,EACuB,EAEA6E,EAAYG,YAAcH,EAAYtD,cAMrEpU,EAAFa,UAAA4S,oBAAE,WACE,MAAOvX,MAAKoW,MAA4B,QAApBpW,KAAKoW,KAAKnV,MAAkB,MAAQ,OAI1D6C,EAAFa,UAAAgV,yBAAE,WACE,GAAMiC,GAAiB5b,KAAK4b,eACtBC,EAA4C,QAA/B7b,KAAKuX,uBAAmCqE,EAAiBA,CAM5E5b,MAAK8b,SAASxb,cAAcsS,MAAMkC,UAAY,cAAc+G,EAAhE,OAIEpQ,OAAFC,eAAM5H,EAANa,UAAA,sBAAE,WAA+B,MAAO3E,MAAKuY,qBAC3C,SAAmBwD,GACjB/b,KAAKuY,gBAAkB3G,KAAKoK,IAAI,EAAGpK,KAAKE,IAAI9R,KAAKic,wBAAyBF,IAI1E/b,KAAK0Z,wBAAyB,EAC9B1Z,KAAKwZ,2DAWP1V,EAAFa,UAAAuX,cAAE,SAAcC,GACZ,GAAMC,GAAapc,KAAKyb,kBAAkBnb,cAAc4X,WAGxDlY,MAAK4b,iBAAgC,UAAbO,GAAyB,EAAI,GAAKC,EAAa,GASzEtY,EAAFa,UAAA4U,eAAE,SAAe8C,GACb,GAAMC,GAAgBtc,KAAKqZ,eAAiBrZ,KAAKqZ,eAAekC,UAAUc,GAAc,IAExF,IAAKC,EAAL,CAGA,GAEIC,GAAwBC,EAFtBJ,EAAapc,KAAKyb,kBAAkBnb,cAAc4X,WAGtB,QAA9BlY,KAAKuX,uBACPgF,EAAiBD,EAAcvE,gBAC/ByE,EAAgBD,EAAiBD,EAAcrE,mBAE/CuE,EAAgBxc,KAAK8b,SAASxb,cAAc4X,YAAcoE,EAAcvE,gBACxEwE,EAAiBC,EAAgBF,EAAcrE,iBAGjD,IAAMwE,GAAmBzc,KAAK4b,eACxBc,EAAkB1c,KAAK4b,eAAiBQ,CAE1CG,GAAiBE,EAEnBzc,KAAK4b,gBAAkBa,EAAmBF,EA7UjB,GA8UhBC,EAAgBE,IAEzB1c,KAAK4b,gBAAkBY,EAAgBE,EAhVd,MA4V7B5Y,EAAFa,UAAAwW,wBAAE,WACE,GAAMwB,GACF3c,KAAK8b,SAASxb,cAAcqb,YAAc3b,KAAKE,YAAYI,cAAc4X,WAExEyE,KACH3c,KAAK4b,eAAiB,GAGpBe,IAAc3c,KAAK0Y,yBACrB1Y,KAAKqY,mBAAmBxB,eAG1B7W,KAAK0Y,wBAA0BiE,GAYjC7Y,EAAFa,UAAA6U,wBAAE,WAEExZ,KAAK4Y,qBAA8C,GAAvB5Y,KAAK4b,eACjC5b,KAAK2Y,oBAAsB3Y,KAAK4b,gBAAkB5b,KAAKic,wBACvDjc,KAAKqY,mBAAmBxB,gBAU1B/S,EAAFa,UAAAsX,sBAAE,WAGE,MAFwBjc,MAAK8b,SAASxb,cAAcqb,YACjC3b,KAAKyb,kBAAkBnb,cAAc4X,aACf,GAI3CpU,EAAFa,UAAA8U,0BAAE,WACE,GAAMmD,GAAuB5c,KAAKqZ,gBAAkBrZ,KAAKqZ,eAAelU,OACpEnF,KAAKqZ,eAAekC,UAAUvb,KAAK6c,eAAevY,WAAWhE,cAC7D,IAEJN,MAAK8c,QAAQxK,eAAc,mBA/X/BtT,KAACgH,EAAAA,UAADrE,OAAAwC,SAAA,iBACE8B,SAAU,+7BACVC,QAAF,61EACErE,QAAF,iBACEnD,cAAFC,EAAAA,kBAAAC,KACEC,gBAAFC,EAAAA,wBAAAC,OACEP,MACFC,MAAA,iBACMse,qDAAN,0BACIC,6BAAJ,yHAtDAhe,KAAEG,EAAAA,gBAHFH,KAAEie,EAAAA,eAAFxb,aAAAzC,KAAAsD,EAAAA,aALAtD,KAAQC,EAAAA,UAWR6E,EAAAzE,2GA2DAoc,oBAAAzc,KAAAuV,EAAAA,UAAA5S,MAAA,sBACAma,WAAA9c,KAAAuV,EAAAA,UAAA5S,MAAA,aACAkb,gBAAA7d,KAAAO,EAAAA,QACAuZ,qBAAA9Z,KAAAyY,EAAAA,SAmCAsB,eAAA/Z,KAAAyY,EAAAA,UAgBA3T,OC/FIoZ,GAAS,EAGbC,GAAA,yBA3CA,MAAAA,MAuDAC,GAAA,WACE,QAAFA,GAAqBld,GAAAF,KAArBE,YAAqBA,EAxDrB,MAAAkd,MA0DaC,GACTnZ,EAAWvE,EAAmByd,IAAkB,0BA4FlD,QAAF/Z,GAAciB,EACQ+T,GADpB,GAAFxY,GAEIC,EAFJC,KAAAC,KAEUsE,IAFVtE,WACsBH,GAAtBwY,mBAAsBA,EA7DtBxY,EAAAyd,eAA0C,EAG1Czd,EAAA0d,sBAA0C,EAG1C1d,EAAA2d,kBAA8BnP,EAAAA,aAAaC,MAG3CzO,EAAA4d,sBAAkCpP,EAAAA,aAAaC,MAM/CzO,EAAA6d,gBAAoC,EAQpC7d,EAAAgZ,eAA0C,KAGxChZ,EAAF8d,eAAkD,QAmBhD9d,EAAF+d,oBAAiE,GAAIpH,GAAAA,aAGnE3W,EAAFge,YACM,GAAIrH,GAAAA,aAGR3W,EAAFie,cAAyD,GAAItH,GAAAA,aAG3D3W,EAAFke,kBACM,GAAIvH,GAAAA,cAAgC,GAOtC3W,EAAKme,SAAWd,OARpB,MAjEiCxY,GAAjCrB,EAAAvD,GAsBE2L,OAAFC,eACMrI,EADNsB,UAAA,qBAAE,WAC+B,MAAO3E,MAAK0d,oBAC3C,SAAkBzc,GAAkBjB,KAAK0d,eAAiBO,EAAAA,sBAAsBhd,oCAIhFwK,OAAFC,eACMrI,EADNsB,UAAA,qBAAE,WACqC,MAAO3E,MAAK6Y,oBACjD,SAAkB5X,GAChBjB,KAAKsd,eAAiBtE,EAAAA,qBAAqB/X,EAAO,uCAQpDwK,OAAFC,eACMrI,EADNsB,UAAA,uBAAE,WACsC,MAAO3E,MAAKke,sBAClD,SAAoBjd,GAClB,GAAMX,GAA6BN,KAAKE,YAAYI,aAEpDA,GAAckF,UAAU2Y,OAAO,kBAAkBne,KAAKV,iBAElD2B,GACFX,EAAckF,UAAU4Y,IAAI,kBAAkBnd,GAGhDjB,KAAKke,iBAAmBjd,mCAgC1BoC,EAAFsB,UAAAwU,sBAAE,WAAA,GAAFtZ,GAAAG,KAGUqe,EAAgBre,KAAKsd,eAAiBtd,KAAKse,eAAete,KAAKsd,eAIrE,IAAItd,KAAK6Y,gBAAkBwF,EAAe,CACxC,GAAME,GAAoC,MAAvBve,KAAK6Y,cAEnB0F,IACHve,KAAK+d,kBAAkB5G,KAAKnX,KAAKwe,mBAAmBH,IAKtD7M,QAAQC,UAAUC,KAAK,WACrB7R,EAAK4e,MAAMrU,QAAQ,SAACkR,EAAKhR,GAAU,MAAAgR,GAAIvH,SAAWzJ,IAAU+T,IAEvDE,GACH1e,EAAK+d,oBAAoBzG,KAAKkH,KAMpCre,KAAKye,MAAMrU,QAAQ,SAACkR,EAAahR,GAC/BgR,EAAIzH,SAAWvJ,EAAQ+T,EAII,MAAvBxe,EAAKgZ,gBAA0C,GAAhByC,EAAIzH,UAAkByH,EAAIxH,SAC3DwH,EAAIxH,OAASuK,EAAgBxe,EAAKgZ,kBAIlC7Y,KAAK6Y,iBAAmBwF,IAC1Bre,KAAK6Y,eAAiBwF,EACtBre,KAAKqY,mBAAmBxB,iBAI5BxT,EAAFsB,UAAAqD,mBAAE,WAAA,GAAFnI,GAAAG,IACIA,MAAK0e,wBAIL1e,KAAKwd,kBAAoBxd,KAAKye,MAAMxZ,QAAQC,UAAU,WAKpD,GAJsBrF,EAAKye,eAAeze,EAAKyd,kBAIzBzd,EAAKgZ,eAGzB,IAAK,GAFC8F,GAAO9e,EAAK4e,MAAMlD,UAEfvQ,EAAI,EAAGA,EAAI2T,EAAKxZ,OAAQ6F,IAC/B,GAAI2T,EAAK3T,GAAG+I,SAAU,CAIpBlU,EAAKyd,eAAiBzd,EAAKgZ,eAAiB7N,CAC5C,OAKNnL,EAAK6e,wBACL7e,EAAKwY,mBAAmBxB,kBAI5BxT,EAAFsB,UAAAsD,YAAE,WACEjI,KAAKwd,kBAAkBxM,cACvBhR,KAAKyd,sBAAsBzM,eAI7B3N,EAAFsB,UAAAia,cAAE,WACM5e,KAAK6e,YACP7e,KAAK6e,WAAWpF,6BAIpBpW,EAAFsB,UAAAma,cAAE,SAAcxU,GACZtK,KAAK6d,YAAY1G,KAAKnX,KAAKwe,mBAAmBlU,KAGxCjH,EAAVsB,UAAA6Z,mBAAA,SAA6BlU,GACzB,GAAMhJ,GAAQ,GAAI6b,GAKlB,OAJA7b,GAAMgJ,MAAQA,EACVtK,KAAKye,OAASze,KAAKye,MAAMtZ,SAC3B7D,EAAMga,IAAMtb,KAAKye,MAAMlD,UAAUjR,IAE5BhJ,GASD+B,EAAVsB,UAAA+Z,2CACQ1e,MAAKyd,uBACPzd,KAAKyd,sBAAsBzM,cAG7BhR,KAAKyd,sBAAwBvR,EAAAA,MAAjCC,UAAA,GAA0CnM,KAAKye,MAAMrS,IAAI,SAAAkP,GAAO,MAAAA,GAAI3H,iBAC7DzO,UAAU,WAAM,MAAArF,GAAKwY,mBAAmBxB,kBAIrCxT,EAAVsB,UAAA2Z,eAAA,SAAyBhU,GAIrB,MAAOsH,MAAKE,IAAI9R,KAAKye,MAAMtZ,OAAS,EAAGyM,KAAKoK,IAAI1R,GAAS,EAAG,KAI9DjH,EAAFsB,UAAAoa,eAAE,SAAe/T,GACb,MAAO,iBAAiBhL,KAAKge,SAAjC,IAA6ChT,GAI3C3H,EAAFsB,UAAAqa,iBAAE,SAAiBhU,GACf,MAAO,mBAAmBhL,KAAKge,SAAnC,IAA+ChT,GAO7C3H,EAAFsB,UAAAsa,yBAAE,SAAyBC,GACvB,GAAKlf,KAAK0d,gBAAmB1d,KAAKud,sBAAlC,CAEA,GAAM4B,GAAuBnf,KAAKof,gBAAgB9e,aAElD6e,GAAQvM,MAAMyM,OAASrf,KAAKud,sBAAwB,KAIhDvd,KAAKof,gBAAgB9e,cAAcgf,eACrCH,EAAQvM,MAAMyM,OAASH,EAAY,QAKvC7b,EAAFsB,UAAA4a,4BAAE,WACEvf,KAAKud,sBAAwBvd,KAAKof,gBAAgB9e,cAAc8W,aAChEpX,KAAKof,gBAAgB9e,cAAcsS,MAAMyM,OAAS,GAClDrf,KAAK8d,cAAc3G,QAIrB9T,EAAFsB,UAAA6a,aAAE,SAAalE,EAAamE,EAAyBC,GAC5CpE,EAAI3a,WACPX,KAAK6c,cAAgB4C,EAAUrF,WAAasF,IAKhDrc,EAAFsB,UAAAgb,aAAE,SAAarE,EAAaoE,GACxB,MAAIpE,GAAI3a,SACC,KAEFX,KAAK6c,gBAAkB6C,EAAM,GAAK,kBAvQ7C1gB,KAACgH,EAAAA,UAADrE,OAAAwC,SAAA,gBACEvC,SAAU,cACVqE,SAAU,w+CACVC,QAAF,u8CACExH,cAAFC,EAAAA,kBAAAC,KACEC,gBAAFC,EAAAA,wBAAAC,OACE8C,QAAF,QAAA,iBACErD,MACFC,MAAA,gBACMmhB,uCAAN,gBACIC,wCAAJ,sHA/DAxc,EAAEhE,wHAuEFwf,aAAA7f,KAAAuV,EAAAA,UAAA5S,MAAA,eAEAme,gBAAA9gB,KAAAO,EAAAA,QAEAsd,gBAAA7d,KAAAO,EAAAA,QAeAoe,iBAAA3e,KAAAO,EAAAA,QAMAD,kBAAAN,KAAAO,EAAAA,QAQAqe,sBAAA5e,KAAQyY,EAAAA,SAGRoG,cAAA7e,KAAAyY,EAAAA,SAgBAqG,gBAAA9e,KAAAyY,EAAAA,SAGAsG,oBAAG/e,KAAMyY,EAAAA,UAOTpU,O7B7FA0c,GAAA,WACE,QAAFA,GAAqB7f,GAAAF,KAArBE,YAAqBA,EAtDrB,MAAA6f,MAwDaC,GACTrgB,EAAmBuE,EAAW6b,GAAe,2BAgD/C,QAAF3gB,GAAckF,EACoB8R,EACZhE,EACAiG,EACAC,GAJpB,GAAFzY,GAKIC,EALJC,KAAAC,KAKUsE,IALVtE,WACkCH,GAAlCuW,KAAkCA,EACZvW,EAAtBuS,QAAsBA,EACAvS,EAAtBwY,mBAAsBA,EACAxY,EAAtByY,eAAsBA,EA/BtBzY,EAAAogB,WAAgC,GAAIrM,GAAAA,UAYpC,MAhB+BlP,GAA/BtF,EAAAU,GAgBE2L,OAAFC,eACMtM,EADNuF,UAAA,uBAAE,WACsC,MAAO3E,MAAKke,sBAClD,SAAoBjd,GAClB,GAAMX,GAA6BN,KAAKE,YAAYI,aAEpDA,GAAckF,UAAU2Y,OAAO,kBAAkBne,KAAKV,iBAElD2B,GACFX,EAAckF,UAAU4Y,IAAI,kBAAkBnd,GAGhDjB,KAAKke,iBAAmBjd,mCAgB1B7B,EAAFuF,UAAAzD,iBAAE,SAAiBqR,GAGfvS,KAAKkgB,qBAAuB3N,EAC5BvS,KAAKqY,mBAAmBxB,gBAG1BzX,EAAFuF,UAAAqD,mBAAE,WAAA,GAAFnI,GAAAG,IACIA,MAAKoS,QAAQM,kBAAkB,WAC7B,GAAM4H,GAAYza,EAAKuW,KAAOvW,EAAKuW,KAAKM,OAAStG,EAAAA,GAAa,KAE9D,OAAOlE,GAAAA,MAAMoO,EAAWza,EAAKyY,eAAe5B,OAAO,KAC9CzM,KAAK4Q,EAAAA,UAAUhb,EAAKogB,aACpB/a,UAAU,WAAM,MAAArF,GAAKsgB,oBAK9B/gB,EAAFuF,UAAAwU,sBAAE,WACE,GAAInZ,KAAKkgB,mBAAoB,CAC3B,GAAME,GAAYpgB,KAAKqgB,UAAUC,KAAK,SAAAhF,GAAO,MAAAA,GAAIzM,QAEjD7O,MAAKugB,mBAAqBH,EAAYA,EAAUlgB,YAAc,KAC9DF,KAAKmgB,eACLngB,KAAKkgB,oBAAqB,IAI9B9gB,EAAFuF,UAAAsD,YAAE,WACEjI,KAAKigB,WAAWtU,OAChB3L,KAAKigB,WAAW/L,YAIlB9U,EAAFuF,UAAAwb,aAAE,WACMngB,KAAKugB,oBACPvgB,KAAK8c,QAAQtK,OACbxS,KAAK8c,QAAQxK,eAAetS,KAAKugB,mBAAmBjgB,gBAEpDN,KAAK8c,QAAQhK,uBA7FnB9T,KAACgH,EAAAA,UAADrE,OAAAwC,SAAA,oBACEvC,SAAU,0BACVC,QAAF,QAAA,iBACEoE,SAAU,6HACVC,QAAS;owCACT1H,MAAFC,MAAA,mBACEC,cAAFC,EAAAA,kBAAAC,KACEC,gBAAgBC,EAAAA,wBAAlBC,0HAnDAC,KAAEC,EAAAA,SAZFD,KAAQE,EAAAA,oBAgBRF,KAAEG,EAAAA,iBAdFC,EAAAC,wJA0EAC,kBAAAN,KAAAO,EAAAA,SAOAH,OA1FAI,GAAA,qCAmKAC,GAAAC,EAAAC,EAAAC,EAAAJ,+CAsBA,GAAAK,GAAAC,EAAAC,KAAAC,OAAAA,IAiEA,OA5BAH,GAAAI,WAAAA,EAAEJ,EAAFK,YAAAA,EAAsBL,EAAtBM,cAAAA,kGAXEN,EAAFO,eAA+BC,mBAA/BH,EAAAI,eAwBIT,EAAKU,SAATC,SAAAD,IAAA,EACAE,IAIQZ,EAARa,2BAAAD,EAAAE,yBAEAC,qBAAAH,EAAAG,qBACAC,UAAAJ,EAAAI,YAGAV,GACAA,EAAAW,QAAAZ,GAGAL,EApDA,0DAAAkB,2EAEAf,KAAAgB,UAAAC,EACQjB,KAAKC,WAAbiB,iBAAAlB,KAAAE,eAGAiB,YAAA,EACAC,cAAA,gJAYApB,KAAAU,0BAEAS,YAAU,EACVC,cAAA,kFAkCApB,KAAAG,eACQH,KAARG,cAAAkB,eAAArB,KAA+CE,kEAU/CoB,EAAAC,kBAGAC,EAAAC,aACAzC,KAAA0C,EAAAA,UAAAC,+CAlGAC,SAAA,aACEC,QAAF,WAAA,gBAAA,YACErD,MACFC,MAAA,eACMqD,sBAAN,SACIC,uBAAJ,sBACIC,kBAAJ,WACIC,2BAAJ,WACIC,+BAAJ,SACIC,UAAJ,8FA0CAnD,KAAkCC,EAAAA,SA3MlCD,KAAEoD,EAAAA,WAIFpD,SAAEqD,GAAFZ,aAAAzC,KAAAsD,EAAAA,WAAAtD,KAAAuD,EAAAA,OAAAZ,MAAAa,QAfAxD,KAAQyD,OAAQhB,aAAhBzC,KAAA0D,EAAAA,UAAAf,MAAA,gBA0NA3C,KAAA2D,EAAAA,gBAlLAnB,EAAAnC,yCAsJAmC,mCCtMA,sBAyBAxC,KAAC4D,EAAAA,SAADjB,OACEkB,SACEC,EAAAA,aACAC,GACAC,EAAAA,aACAC,GACAC,EAAAA,gBACAC,EAAAA,YAGFC,SACEL,GACAM,GACAC,GACAC,GACAnE,GACAoC,GACAgC,IAEFC,cACEJ,GACAC,GACAC,GACAG,GACAC,GACAvE,GACAoC,GACAoC,GACAC,GACAC,GACAN,QAvDJO,KC2BAC,GAAA,WACE,QAAFA,GAAqB9D,GAAAF,KAArBE,YAAqBA,EA5BrB,MAAA8D,MA8BaC,GACTC,EAAWF,gCA/Bf,sBAiCAhF,KAAC0C,EAAAA,UAADC,OACEwC,SAAU,kBACVvC,SAAU,gBACVpD,MAAOC,MAAS,uBApClB2F,KAsCAC,GAAA,SAAAvE,GAuBE,QAAFuE,GACIC,EACQC,EACUC,GAHpB,GAAF3E,GAIIC,EAJJC,KAAAC,KAIUsE,IAJVtE,WAEYH,GAAZ0E,UAAYA,EAKR1E,EAAK4E,UAAYD,IATrB,MAJgCE,GAAhCL,EAAAvE,GAgBEuE,EAAFM,UAAAC,gBAAE,WAAA,GAAF/E,GAAAG,IACS6E,GAAAA,aAAgB7E,KAAKuE,UAAUO,YAIpC9E,KAAK+E,0BACL/E,KAAKgF,aAAaC,QAAQC,UAAU,WAAM,MAAArF,GAAKkF,8BAMzCV,EAAVM,UAAAI,6CACI,IAAK/E,KAAKgF,aAAaG,OAAvB,IAM2BC,MAAMrF,KAAKC,KAAKE,YAAYI,cAAc+E,YAClEC,OAAO,SAAAC,GAAQ,QAAEA,EAAKC,WAAaD,EAAKC,UAAUC,SAAS,sBAC3DH,OAAO,SAAAC,GAAQ,MAAAA,GAAKG,YAAc7F,EAAK4E,UAAY5E,EAAK4E,UAAUkB,aAAe,KACjFC,KAAK,SAAAL,GAAQ,MAAAA,GAAKM,YAAYC,UAG/BC,sBAxDN/G,KAACgH,EAAAA,UAADrE,OAAAwC,SAAA,cACEvC,SAAU,aACVqE,SAAU,8EACVC,QAAF,yiBACErE,QAAF,SACErD,MACFC,MAAA,cACM0H,oCAAN,0BACIC,iCAAJ,6BAEAvH,gBAAAC,EAAAA,wBAAAC,OACAL,cAAAC,EAAAA,kBAAAC,mFAnCAI,SAAEqD,GAAFZ,aAAAzC,KAAAuD,EAAAA,OAAAZ,MAAA0E,EAAAA,eAgDAhC,EAAAhF,mEALAgF,mCC3DA,sBAaArF,KAAC4D,EAAAA,SAADjB,OACEkB,SAAUE,IACVK,SAAUiB,GAAYD,GAAerB,IACrCU,cAAeY,GAAYD,QAhB7BkC,mBCqBE,QAAFC,GAAqBC,GAAAxG,KAArBwG,cAAqBA,EArBrB,sBAiBAxH,KAAC0C,EAAAA,UAADC,OACEwC,SAAU,8DARZnF,KAAEyH,EAAAA,oBAVFF,KC8BaG,GAAkBC,EAAAA,eAElBC,GACTlH,EAAcE,EAAciH,EAAAA,cAEnBC,GAELpH,EAAcE,EAAcmH,EAAAA,mCAqBlC,QAAFC,GAAwB9G,EACA+G,EACa1G,GAFnC,GAAFV,GAGIC,EAHJC,KAAAC,KAGUE,EAAa+G,IAHvBjH,WAAwBH,GAAxBK,YAAwBA,EACAL,EAAxBoH,MAAwBA,EAHtBpH,EAAFqH,KAAwC,WAOpCrH,EAAKU,SAAW4G,OAAO5G,IAAa,IA/DxC,MAsDoCmE,GAApCsC,EAAAlH,kBAZAd,KAAC0C,EAAAA,UAADC,OACEwC,SAAU,gBACVvC,SAAU,cACVC,QAAS,WAAY,YACrBrD,MACE4I,uBAAwB,aACxBC,oBAAqB,qCACrBC,cAAe,OACf7I,MAAS,iBAEX8I,YAAaC,QAASX,EAAAA,YAAaY,YAAaT,4CAtClDhI,KAAE0I,EAAAA,aANF1I,KAA2B2I,EAAAA,UAoD3B3I,KAAAyD,OAAAhB,aAAAzC,KAAe0D,EAAAA,UAAff,MAAyB,mCAJzBuF,OAAAlI,KAAGO,EAAAA,SAxDHyH,GAsDoCJ,+EAtDpC,MA6EuClC,GAAvCkD,EAAA9H,kBAPAd,KAAC0C,EAAAA,UAADC,OACEwC,SAAU,mBACVtC,QACE,4BAEF0F,YAAaC,QAASb,EAAAA,eAAgBc,YAAaG,0BAGrDC,OAAA7I,KAAGO,EAAAA,MAAHoC,MAAS,kBA9ETiG,GA6EuClB,mBA4BrC,QAAFoB,GAAwB5H,EACA+G,EACAc,EACaxH,GAHnC,GAAFV,GAIIC,EAJJC,KAAAC,KAIUE,EAAa+G,EAAOc,IAJ9B/H,WAAwBH,GAAxBK,YAAwBA,EACAL,EAAxBoH,MAAwBA,EACApH,EAAxBkI,SAAwBA,EAIpBlI,EAAKU,SAAW4G,OAAO5G,IAAa,IA/GxC,MAkG0CmE,GAA1CoD,EAAAhI,GAmBEgI,EAAFnD,UAAAqD,mBAAE,WACElI,EAAJ6E,UAAUqD,mBAAVjI,KAAAC,OAGE8H,EAAFnD,UAAAsD,YAAE,WACEnI,EAAJ6E,UAAUsD,YAAVlI,KAAAC,sBAtCAhB,KAAC0C,EAAAA,UAADC,OACEwC,SAAU,uBACVvC,SAAU,oBACVpD,MACE4I,uBAAwB,aACxBE,cAAe,OACf7I,MAAS,wBAEXoD,QAAS,WAAY,YACrB0F,YACGC,QAAST,EAAAA,kBAAmBU,YAAaK,IACzCN,QAASX,EAAAA,YAAaY,YAAaK,4CAjFxC9I,KAAE0I,EAAAA,aANF1I,KAA2B2I,EAAAA,UAQ3B3I,KAAEkJ,EAAAA,kBA4FFlJ,KAAAyD,OAAAhB,aAAAzC,KAAe0D,EAAAA,UAAff,MAAyB,mCAPzB4D,OAAAvG,KAAGO,EAAAA,MAAHoC,MAAS,uBAETwG,aAAAnJ,KAAGoJ,EAAAA,gBAAHzG,MAAmB4E,OAvGnBuB,GAkG0ChB,ICvF7BuB,GAAsBC,EAAAA,8FAXnC,MAoB2C5D,GAA3C6D,EAAAzI,kBAJAd,KAAC0C,EAAAA,UAADC,OACEwC,SAAU,uBACVoD,YAAaC,QAASc,EAAAA,mBAAoBb,YAAac,0BAKzDC,QAAAxJ,KAAGO,EAAAA,MAAHoC,MAAS,wBAGT8G,SAAAzJ,KAAGO,EAAAA,MAAHoC,MAAS,+BA1BT4G,GAoB2CF,ICP9BK,GAAWf,EAAAA,mFAqBxB,MAFgCjD,GAAhCiE,EAAA7I,kBAdAd,KAACgH,EAAAA,UAADrE,OAAAwC,SAAA,WACEvC,SAAU,UACVqE,SAAU,kDACVzH,MACFC,MAAA,WACMyI,KAAN,QAEAhB,QAAA,mLACAxH,cAAAC,EAAAA,kBAAAC,KACEC,gBAAFC,EAAAA,wBAAAC,OACEwI,YAAFC,QAAAG,EAAAA,QAAkCF,YAAlCkB,QAGAA,EAAAtJ,4DAGAsJ,OCtBaC,GAAqBC,EAAAA,kGAahChJ,GAAFiJ,WAA4D,IAzB5D,MAwB0CpE,GAA1CqE,EAAAjJ,kBAPAd,KAAC0C,EAAAA,UAADC,OACEwC,SAAU,sBACV3F,MACE2D,UAAW,mBAEboF,YAAaC,QAASqB,EAAAA,kBAAmBpB,YAAasB,0BAGxDD,YAAA9J,KAAGO,EAAAA,MAAHoC,MAAS,iCAzBToH,GAwB0CH,ICLpCI,IACJlB,GACAF,GACAW,GACAQ,GACAJ,GACA3B,GACAT,gCA1BF,sBA6BAvH,KAAC4D,EAAAA,SAADjB,OACEkB,SAAUoG,EAAAA,cAAenG,EAAAA,aAAcC,IACvCK,QAAS4F,GACTvF,aAAcuF,OAhChBE,KC+CAC,GAAA,WAEE,QAAFA,GAAqBC,EACAC,EACAC,EACAC,GAHAvJ,KAArBoJ,kBAAqBA,EACApJ,KAArBqJ,SAAqBA,EACArJ,KAArBsJ,aAAqBA,EACAtJ,KAArBuJ,YAAqBA,EApDrB,MAsDEJ,GAAFxE,UAAA6E,aAAE,SAAajE,EAASiD,EACTiB,EAAkBC,GAD/B,GAAF7J,GAAAG,KAEU2J,EAAW3J,KAAKoJ,kBAAkB7D,EAAMiD,EAG9C,IAFAiB,EAAYG,KAAKD,GAEb3J,KAAKsJ,aAAaK,GAAW,CAC/B,GAAME,GAAgB7J,KAAKuJ,YAAYhE,EACnCuE,OAAMC,QAAQF,GAChB7J,KAAKgK,iBAAiBH,EAAerB,EAAOiB,EAAaC,GAEzDG,EAAcI,KAAKC,EAAAA,KAAK,IAAIhF,UAAU,SAAAiF,GACpCtK,EAAKmK,iBAAiBG,EAAU3B,EAAOiB,EAAaC,KAI1D,MAAOD,IAGTN,EAAFxE,UAAAqF,iBAAE,SAAiBG,EAAe3B,EACfiB,EAAkBC,GADnC,GAAF7J,GAAAG,IAEImK,GAASC,QAAQ,SAACC,EAAOC,GACvB,GAAIC,GAA4Bb,EAAUtE,OAC1CmF,GAAeX,KAAKU,GAASH,EAAShF,OAAS,GAC/CtF,EAAK2J,aAAaa,EAAO7B,EAAQ,EAAGiB,EAAac,MASrDpB,EAAFxE,UAAA6F,aAAE,SAAaC,GAAb,GAAF5K,GAAAG,KACQyJ,IAEJ,OADAgB,GAAeL,QAAQ,SAAA7E,GAAQ,MAAA1F,GAAK2J,aAAajE,EAAM,EAAGkE,QACnDA,GAOTN,EAAFxE,UAAA+F,qBAAE,SAAqBC,EAAYC,GAAjC,GAAF/K,GAAAG,KACQ6K,KACAC,IAeJ,OAdAA,GAAc,IAAK,EAEnBH,EAAMP,QAAQ,SAAA7E,GAEZ,IAAK,GADDwF,IAAS,EACJC,EAAI,EAAGA,GAAKnL,EAAKwJ,SAAS9D,GAAOyF,IACxCD,EAASA,GAAUD,EAAcE,EAE/BD,IACFF,EAAQjB,KAAKrE,GAEX1F,EAAKyJ,aAAa/D,KACpBuF,EAAcjL,EAAKwJ,SAAS9D,GAAQ,GAAKqF,EAAYK,WAAW1F,MAG7DsF,GAjHX1B,KA6HA+B,GAAA,SAAApL,GAaE,QAAFoL,GAAsBN,EACAO,EACRC,OAAd,KAAAA,IAAcA,KAFZ,IAAFvL,GAGIC,EAHJC,KAAAC,OAAAA,WAAsBH,GAAtB+K,YAAsBA,EACA/K,EAAtBsL,cAAsBA,EAbpBtL,EAAFwL,eAAmB,GAAIC,GAAAA,oBAErBzL,EAAF0L,cAAkB,GAAID,GAAAA,oBAclBzL,EAAK2L,MAAQ,GAAIF,GAAAA,gBAAqBF,KA9I1C,MA6HiD1G,GAAjDwG,EAAApL,GAME2L,OAAFC,eAAMR,EAANvG,UAAA,YAAE,WAAa,MAAO3E,MAAKwL,MAAMvK,WAC/B,SAASA,GACPjB,KAAKwL,MAAMG,KAAK1K,GAChBjB,KAAKqL,eAAeM,KAAK3L,KAAKmL,cAAcX,aAAaxK,KAAK6H,OAC9D7H,KAAK4K,YAAYgB,UAAY5L,KAAKqL,eAAepK,uCAUnDiK,EAAFvG,UAAAkH,QAAE,SAAQC,GAAR,GAAFjM,GAAAG,KACUiF,GACJ6G,EAAiBC,WACjB/L,KAAK4K,YAAYoB,eAAeC,SAChCjM,KAAKqL,eAEP,OAAOa,GAAAA,MAAXC,UAAA,GAAoBlH,GAASgF,KAAKmC,EAAAA,IAAI,WAGhC,MAFAvM,GAAK0L,cAAcI,KACjB9L,EAAKsL,cAAcT,qBAAqB7K,EAAKwL,eAAepK,MAAOpB,EAAK+K,cACnE/K,EAAK0L,cAActK,UAI9BiK,EAAFvG,UAAA0H,WAAE,aA9JFnB,GA6HiDoB,EAAAA,YC1GjDC,GAAA,SAAAzM,oEACED,GAAF2L,MAAU,GAAIF,GAAAA,sBApBd,MAmBgD5G,GAAhD6H,EAAAzM,GAME2L,OAAFC,eAAMa,EAAN5H,UAAA,YAAE,WAAa,MAAO3E,MAAKwL,MAAMvK,WAC/B,SAASA,GAAcjB,KAAKwL,MAAMG,KAAK1K,oCAEvCsL,EAAF5H,UAAAkH,QAAE,SAAQC,GAAR,GAAFjM,GAAAG,IACI,OAAOkM,GAAAA,MAAXC,UAAA,IAAqBL,EAAiBC,WAAY/L,KAAKwL,QAChDvB,KAAKmC,EAAAA,IAAI,WACR,MAAOvM,GAAKgI,SAIlB0E,EAAF5H,UAAA0H,WAAE,aAnCFE,GAmBgDD,EAAAA,YCRnCE,GAAU,GAAIC,GAAAA,QAAQ,2XC6CO,+BAGD,6rFC/CtB,QAAS,QAAS,QAAS,QAAS,QAAS,QAAS,QAAS,QAAS,QACjF,QAAS,SAAU,g5CCOmB,8uFCwFT,6BAGD,mCAGOC,2BAGR,kCAkBQ,41FCnFV"}