{"version":3,"file":"material.umd.min.js","sources":["../../src/lib/tree/tree.ts","../../src/lib/tree/toggle.ts","../../src/lib/tree/tree-module.ts","../../src/lib/tree/data-source/flat-data-source.ts","../../src/lib/tree/data-source/nested-data-source.ts","../../src/lib/version.ts","../../src/lib/autocomplete/autocomplete-trigger.ts","../../src/lib/core/testing/month-constants.ts","../../src/lib/expansion/expansion-animations.ts","../../src/lib/select/select.ts","../../src/lib/tooltip/tooltip.ts","../../src/lib/tabs/tab.ts","../../src/lib/tabs/tabs-animations.ts","../../src/lib/tabs/tab-body.ts","../../src/lib/tabs/tab-label-wrapper.ts","../../src/lib/tabs/tab-header.ts","../../src/lib/tabs/tab-group.ts","../../src/lib/tabs/tab-nav-bar/tab-nav-bar.ts","../../src/lib/tabs/tabs-module.ts","../../src/lib/toolbar/toolbar.ts","../../src/lib/toolbar/toolbar-module.ts","../../src/lib/tree/outlet.ts","../../src/lib/tree/node.ts","../../src/lib/tree/padding.ts","../../src/lib/sort/sort-header.ts","../../src/lib/sort/sort-module.ts","../../src/lib/stepper/step-label.ts","../../src/lib/stepper/stepper-intl.ts","../../src/lib/stepper/step-header.ts","../../src/lib/stepper/stepper-animations.ts","../../src/lib/stepper/stepper-icon.ts","../../src/lib/stepper/stepper.ts","../../src/lib/stepper/stepper-button.ts","../../src/lib/stepper/stepper-module.ts","../../src/lib/table/table.ts","../../src/lib/table/cell.ts","../../src/lib/table/row.ts","../../src/lib/table/table-module.ts","../../src/lib/table/table-data-source.ts","../../src/lib/tabs/ink-bar.ts","../../src/lib/tabs/tab-label.ts","../../src/lib/tabs/tab-content.ts","../../src/lib/slider/slider.ts","../../src/lib/slider/slider-module.ts","../../src/lib/snack-bar/snack-bar-ref.ts","../../src/lib/snack-bar/snack-bar-config.ts","../../src/lib/snack-bar/snack-bar-animations.ts","../../src/lib/snack-bar/simple-snack-bar.ts","../../src/lib/snack-bar/snack-bar-container.ts","../../src/lib/snack-bar/snack-bar-module.ts","../../src/lib/snack-bar/snack-bar.ts","../../src/lib/sort/sort.ts","../../src/lib/sort/sort-animations.ts","../../src/lib/sort/sort-header-intl.ts","../../src/lib/sidenav/drawer.ts","../../src/lib/sidenav/sidenav.ts","../../src/lib/sidenav/sidenav-module.ts","../../src/lib/slide-toggle/slide-toggle-config.ts","../../src/lib/slide-toggle/slide-toggle.ts","../../src/lib/slide-toggle/slide-toggle-module.ts","../../src/lib/progress-bar/progress-bar.ts","../../src/lib/progress-bar/progress-bar-module.ts","../../src/lib/progress-spinner/progress-spinner.ts","../../src/lib/progress-spinner/progress-spinner-module.ts","../../src/lib/radio/radio.ts","../../src/lib/radio/radio-module.ts","../../src/lib/sidenav/drawer-animations.ts","../../src/lib/select/select-module.ts","../../src/lib/tooltip/tooltip-animations.ts","../../src/lib/tooltip/tooltip-module.ts","../../src/lib/paginator/paginator-intl.ts","../../src/lib/paginator/paginator.ts","../../src/lib/paginator/paginator-module.ts","../../src/lib/menu/menu-content.ts","../../src/lib/menu/menu-animations.ts","../../src/lib/menu/menu-panel.ts","../../src/lib/menu/menu-item.ts","../../src/lib/menu/menu-directive.ts","../../src/lib/menu/menu-trigger.ts","../../src/lib/menu/menu-module.ts","../../src/lib/select/select-animations.ts","../../src/lib/list/selection-list.ts","../../src/lib/list/list-module.ts","../../src/lib/list/list.ts","../../src/lib/grid-list/tile-styler.ts","../../src/lib/grid-list/grid-list.ts","../../src/lib/grid-list/grid-list-module.ts","../../src/lib/icon/icon-registry.ts","../../src/lib/icon/icon.ts","../../src/lib/icon/icon-module.ts","../../src/lib/datepicker/datepicker.ts","../../src/lib/datepicker/datepicker-input.ts","../../src/lib/datepicker/datepicker-toggle.ts","../../src/lib/datepicker/datepicker-module.ts","../../src/lib/divider/divider.ts","../../src/lib/divider/divider-module.ts","../../src/lib/expansion/accordion.ts","../../src/lib/expansion/expansion-panel-content.ts","../../src/lib/expansion/expansion-panel.ts","../../src/lib/expansion/expansion-panel-header.ts","../../src/lib/expansion/expansion-module.ts","../../src/lib/grid-list/grid-tile.ts","../../src/lib/grid-list/tile-coordinator.ts","../../src/lib/datepicker/month-view.ts","../../src/lib/datepicker/multi-year-view.ts","../../src/lib/datepicker/year-view.ts","../../src/lib/datepicker/calendar.ts","../../src/lib/datepicker/datepicker-animations.ts","../../src/lib/chips/chip-list.ts","../../src/lib/chips/chip-input.ts","../../src/lib/chips/chips-module.ts","../../src/lib/dialog/dialog-config.ts","../../src/lib/dialog/dialog-animations.ts","../../src/lib/dialog/dialog-container.ts","../../src/lib/dialog/dialog-ref.ts","../../src/lib/dialog/dialog.ts","../../src/lib/dialog/dialog-content-directives.ts","../../src/lib/dialog/dialog-module.ts","../../src/lib/input/autosize.ts","../../src/lib/input/input-value-accessor.ts","../../src/lib/input/input.ts","../../src/lib/input/input-module.ts","../../src/lib/datepicker/datepicker-intl.ts","../../src/lib/datepicker/calendar-body.ts","../../src/lib/card/card.ts","../../src/lib/card/card-module.ts","../../src/lib/checkbox/checkbox-config.ts","../../src/lib/checkbox/checkbox.ts","../../src/lib/checkbox/checkbox-required-validator.ts","../../src/lib/checkbox/checkbox-module.ts","../../src/lib/chips/chip.ts","../../src/lib/chips/chip-default-options.ts","../../src/lib/button/button.ts","../../src/lib/button/button-module.ts","../../src/lib/button-toggle/button-toggle.ts","../../src/lib/button-toggle/button-toggle-module.ts","../../src/lib/autocomplete/autocomplete.ts","../../src/lib/autocomplete/autocomplete-origin.ts","../../src/lib/autocomplete/autocomplete-module.ts","../../src/lib/badge/badge.ts","../../src/lib/badge/badge-module.ts","../../src/lib/bottom-sheet/bottom-sheet-config.ts","../../src/lib/bottom-sheet/bottom-sheet-animations.ts","../../src/lib/bottom-sheet/bottom-sheet-container.ts","../../src/lib/bottom-sheet/bottom-sheet-module.ts","../../src/lib/bottom-sheet/bottom-sheet-ref.ts","../../src/lib/bottom-sheet/bottom-sheet.ts","../../src/lib/core/option/option.ts","../../src/lib/core/option/index.ts","../../src/lib/core/label/label-options.ts","../../src/lib/form-field/error.ts","../../src/lib/form-field/form-field-animations.ts","../../src/lib/form-field/form-field-control.ts","../../src/lib/form-field/hint.ts","../../src/lib/form-field/label.ts","../../src/lib/form-field/placeholder.ts","../../src/lib/form-field/prefix.ts","../../src/lib/form-field/suffix.ts","../../src/lib/form-field/form-field.ts","../../src/lib/form-field/form-field-module.ts","../../node_modules/tslib/tslib.es6.js","../../src/lib/core/common-behaviors/common-module.ts","../../src/lib/core/common-behaviors/disabled.ts","../../src/lib/core/common-behaviors/color.ts","../../src/lib/core/common-behaviors/disable-ripple.ts","../../src/lib/core/common-behaviors/tabindex.ts","../../src/lib/core/common-behaviors/error-state.ts","../../src/lib/core/common-behaviors/initialized.ts","../../src/lib/core/datetime/date-adapter.ts","../../src/lib/core/datetime/native-date-adapter.ts","../../src/lib/core/ripple/ripple-renderer.ts","../../src/lib/form-field/form-field-errors.ts","../../src/lib/input/input-errors.ts","../../src/lib/datepicker/datepicker-errors.ts","../../src/lib/grid-list/grid-list-measure.ts","../../src/lib/menu/menu-errors.ts","../../src/lib/select/select-errors.ts","../../src/lib/sort/sort-errors.ts","../../src/lib/core/animation/animation.ts","../../src/lib/core/datetime/date-formats.ts","../../src/lib/core/datetime/native-date-formats.ts","../../src/lib/core/datetime/index.ts","../../src/lib/core/error/error-options.ts","../../src/lib/core/gestures/gesture-config.ts","../../src/lib/core/line/line.ts","../../src/lib/core/ripple/ripple-ref.ts","../../src/lib/core/ripple/ripple.ts","../../src/lib/core/ripple/index.ts","../../src/lib/core/selection/pseudo-checkbox/pseudo-checkbox.ts","../../src/lib/core/selection/index.ts","../../src/lib/core/option/optgroup.ts"],"sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ChangeDetectionStrategy, Component, ViewChild, ViewEncapsulation} from '@angular/core';\nimport {CdkTree} from '@angular/cdk/tree';\nimport {MatTreeNodeOutlet} from './outlet';\n\n/**\n * Wrapper for the CdkTable with Material design styles.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-tree',\n  exportAs: 'matTree',\n  template: `<ng-container matTreeNodeOutlet></ng-container>`,\n  host: {\n    'class': 'mat-tree',\n    'role': 'tree',\n  },\n  styleUrls: ['tree.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  providers: [{provide: CdkTree, useExisting: MatTree}]\n})\nexport class MatTree<T> extends CdkTree<T> {\n  // Outlets within the tree's template where the dataNodes will be inserted.\n  @ViewChild(MatTreeNodeOutlet) _nodeOutlet: MatTreeNodeOutlet;\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, Input} from '@angular/core';\nimport {CdkTreeNodeToggle} from '@angular/cdk/tree';\n\n/**\n * Wrapper for the CdkTree's toggle with Material design styles.\n */\n@Directive({\n  selector: '[matTreeNodeToggle]',\n  host: {\n    '(click)': '_toggle($event)',\n  },\n  providers: [{provide: CdkTreeNodeToggle, useExisting: MatTreeNodeToggle}]\n})\nexport class MatTreeNodeToggle<T> extends CdkTreeNodeToggle<T> {\n  @Input('matTreeNodeToggleRecursive') recursive: boolean = false;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\n\nimport {CdkTreeModule} from '@angular/cdk/tree';\nimport {CommonModule} from '@angular/common';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatNestedTreeNode, MatTreeNodeDef, MatTreeNode} from './node';\nimport {MatTree} from './tree';\nimport {MatTreeNodeToggle} from './toggle';\nimport {MatTreeNodeOutlet} from './outlet';\nimport {MatTreeNodePadding} from './padding';\n\nconst MAT_TREE_DIRECTIVES = [\n  MatNestedTreeNode,\n  MatTreeNodeDef,\n  MatTreeNodePadding,\n  MatTreeNodeToggle,\n  MatTree,\n  MatTreeNode,\n  MatTreeNodeOutlet\n];\n\n@NgModule({\n  imports: [CdkTreeModule, CommonModule, MatCommonModule],\n  exports: MAT_TREE_DIRECTIVES,\n  declarations: MAT_TREE_DIRECTIVES,\n})\nexport class MatTreeModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CollectionViewer, DataSource} from '@angular/cdk/collections';\nimport {FlatTreeControl, TreeControl} from '@angular/cdk/tree';\nimport {BehaviorSubject, merge, Observable} from 'rxjs';\nimport {map, take} from 'rxjs/operators';\n\n/**\n * Tree flattener to convert a normal type of node to node with children & level information.\n * Transform nested nodes of type `T` to flattened nodes of type `F`.\n *\n * For example, the input data of type `T` is nested, and contains its children data:\n *   SomeNode: {\n *     key: 'Fruits',\n *     children: [\n *       NodeOne: {\n *         key: 'Apple',\n *       },\n *       NodeTwo: {\n *        key: 'Pear',\n *      }\n *    ]\n *  }\n *  After flattener flatten the tree, the structure will become\n *  SomeNode: {\n *    key: 'Fruits',\n *    expandable: true,\n *    level: 1\n *  },\n *  NodeOne: {\n *    key: 'Apple',\n *    expandable: false,\n *    level: 2\n *  },\n *  NodeTwo: {\n *   key: 'Pear',\n *   expandable: false,\n *   level: 2\n * }\n * and the output flattened type is `F` with additional information.\n */\nexport class MatTreeFlattener<T, F> {\n\n  constructor(public transformFunction: (node: T, level: number) => F,\n              public getLevel: (node: F) => number,\n              public isExpandable: (node: F) => boolean,\n              public getChildren: (node: T) => Observable<T[]> | T[]) {}\n\n  _flattenNode(node: T, level: number,\n               resultNodes: F[], parentMap: boolean[]): F[] {\n    const flatNode = this.transformFunction(node, level);\n    resultNodes.push(flatNode);\n\n    if (this.isExpandable(flatNode)) {\n      const childrenNodes = this.getChildren(node);\n      if (Array.isArray(childrenNodes)) {\n        this._flattenChildren(childrenNodes, level, resultNodes, parentMap);\n      } else {\n        childrenNodes.pipe(take(1)).subscribe(children => {\n          this._flattenChildren(children, level, resultNodes, parentMap);\n        });\n      }\n    }\n    return resultNodes;\n  }\n\n  _flattenChildren(children: T[], level: number,\n                   resultNodes: F[], parentMap: boolean[]): void {\n    children.forEach((child, index) => {\n      let childParentMap: boolean[] = parentMap.slice();\n      childParentMap.push(index != children.length - 1);\n      this._flattenNode(child, level + 1, resultNodes, childParentMap);\n    });\n  }\n\n  /**\n   * Flatten a list of node type T to flattened version of node F.\n   * Please note that type T may be nested, and the length of `structuredData` may be different\n   * from that of returned list `F[]`.\n   */\n  flattenNodes(structuredData: T[]): F[] {\n    let resultNodes: F[] = [];\n    structuredData.forEach(node => this._flattenNode(node, 0, resultNodes, []));\n    return resultNodes;\n  }\n\n  /**\n   * Expand flattened node with current expansion status.\n   * The returned list may have different length.\n   */\n  expandFlattenedNodes(nodes: F[], treeControl: TreeControl<F>): F[] {\n    let results: F[] = [];\n    let currentExpand: boolean[] = [];\n    currentExpand[0] = true;\n\n    nodes.forEach(node => {\n      let expand = true;\n      for (let i = 0; i <= this.getLevel(node); i++) {\n        expand = expand && currentExpand[i];\n      }\n      if (expand) {\n        results.push(node);\n      }\n      if (this.isExpandable(node)) {\n        currentExpand[this.getLevel(node) + 1] = treeControl.isExpanded(node);\n      }\n    });\n    return results;\n  }\n}\n\n\n/**\n * Data source for flat tree.\n * The data source need to handle expansion/collapsion of the tree node and change the data feed\n * to `MatTree`.\n * The nested tree nodes of type `T` are flattened through `MatTreeFlattener`, and converted\n * to type `F` for `MatTree` to consume.\n */\nexport class MatTreeFlatDataSource<T, F> extends DataSource<F> {\n  _flattenedData = new BehaviorSubject<F[]>([]);\n\n  _expandedData = new BehaviorSubject<F[]>([]);\n\n  _data: BehaviorSubject<T[]>;\n  get data() { return this._data.value; }\n  set data(value: T[]) {\n    this._data.next(value);\n    this._flattenedData.next(this.treeFlattener.flattenNodes(this.data));\n    this.treeControl.dataNodes = this._flattenedData.value;\n  }\n\n  constructor(private treeControl: FlatTreeControl<F>,\n              private treeFlattener: MatTreeFlattener<T, F>,\n              initialData: T[] = []) {\n    super();\n    this._data = new BehaviorSubject<T[]>(initialData);\n  }\n\n  connect(collectionViewer: CollectionViewer): Observable<F[]> {\n    const changes = [\n      collectionViewer.viewChange,\n      this.treeControl.expansionModel.onChange!,\n      this._flattenedData\n    ];\n    return merge(...changes).pipe(map(() => {\n      this._expandedData.next(\n        this.treeFlattener.expandFlattenedNodes(this._flattenedData.value, this.treeControl));\n      return this._expandedData.value;\n    }));\n  }\n\n  disconnect() {\n    // no op\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CollectionViewer, DataSource} from '@angular/cdk/collections';\nimport {BehaviorSubject, merge, Observable} from 'rxjs';\nimport {map} from 'rxjs/operators';\n\n\n/**\n * Data source for nested tree.\n *\n * The data source for nested tree doesn't have to consider node flattener, or the way to expand\n * or collapse. The expansion/collapsion will be handled by TreeControl and each non-leaf node.\n */\nexport class MatTreeNestedDataSource<T> extends DataSource<T> {\n  _data = new BehaviorSubject<T[]>([]);\n\n  /**\n   * Data for the nested tree\n   */\n  get data() { return this._data.value; }\n  set data(value: T[]) { this._data.next(value); }\n\n  connect(collectionViewer: CollectionViewer): Observable<T[]> {\n    return merge(...[collectionViewer.viewChange, this._data])\n      .pipe(map(() => {\n        return this.data;\n      }));\n  }\n\n  disconnect() {\n    // no op\n  }\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Version} from '@angular/core';\n\n/** Current version of Angular Material. */\nexport const VERSION = new Version('6.3.2-20cbdba');\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {Directionality} from '@angular/cdk/bidi';\nimport {DOWN_ARROW, ENTER, ESCAPE, TAB, UP_ARROW} from '@angular/cdk/keycodes';\nimport {\n  FlexibleConnectedPositionStrategy,\n  Overlay,\n  OverlayConfig,\n  OverlayRef,\n  PositionStrategy,\n  ScrollStrategy,\n  ViewportRuler,\n} from '@angular/cdk/overlay';\nimport {TemplatePortal} from '@angular/cdk/portal';\nimport {DOCUMENT} from '@angular/common';\nimport {filter, take, switchMap, delay, tap, map} from 'rxjs/operators';\nimport {\n  ChangeDetectorRef,\n  Directive,\n  ElementRef,\n  forwardRef,\n  Host,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  ViewContainerRef,\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {\n  _countGroupLabelsBeforeOption,\n  _getOptionScrollPosition,\n  MatOption,\n  MatOptionSelectionChange,\n} from '@angular/material/core';\nimport {MatFormField} from '@angular/material/form-field';\nimport {Subscription, defer, fromEvent, merge, of as observableOf, Subject, Observable} from 'rxjs';\nimport {MatAutocomplete} from './autocomplete';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {MatAutocompleteOrigin} from './autocomplete-origin';\n\n\n/**\n * The following style constants are necessary to save here in order\n * to properly calculate the scrollTop of the panel. Because we are not\n * actually focusing the active item, scroll must be handled manually.\n */\n\n/** The height of each autocomplete option. */\nexport const AUTOCOMPLETE_OPTION_HEIGHT = 48;\n\n/** The total height of the autocomplete panel. */\nexport const AUTOCOMPLETE_PANEL_HEIGHT = 256;\n\n/** Injection token that determines the scroll handling while the autocomplete panel is open. */\nexport const MAT_AUTOCOMPLETE_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mat-autocomplete-scroll-strategy');\n\n/** @docs-private */\nexport function MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY(overlay: Overlay): () => ScrollStrategy {\n  return () => overlay.scrollStrategies.reposition();\n}\n\n/** @docs-private */\nexport const MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY_PROVIDER = {\n  provide: MAT_AUTOCOMPLETE_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY,\n};\n\n/**\n * Provider that allows the autocomplete to register as a ControlValueAccessor.\n * @docs-private\n */\nexport const MAT_AUTOCOMPLETE_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatAutocompleteTrigger),\n  multi: true\n};\n\n/**\n * Creates an error to be thrown when attempting to use an autocomplete trigger without a panel.\n */\nexport function getMatAutocompleteMissingPanelError(): Error {\n  return Error('Attempting to open an undefined instance of `mat-autocomplete`. ' +\n               'Make sure that the id passed to the `matAutocomplete` is correct and that ' +\n               'you\\'re attempting to open it after the ngAfterContentInit hook.');\n}\n\n\n@Directive({\n  selector: `input[matAutocomplete], textarea[matAutocomplete]`,\n  host: {\n    '[attr.autocomplete]': 'autocompleteAttribute',\n    '[attr.role]': 'autocompleteDisabled ? null : \"combobox\"',\n    '[attr.aria-autocomplete]': 'autocompleteDisabled ? null : \"list\"',\n    '[attr.aria-activedescendant]': 'activeOption?.id',\n    '[attr.aria-expanded]': 'autocompleteDisabled ? null : panelOpen.toString()',\n    '[attr.aria-owns]': 'autocompleteDisabled ? null : autocomplete?.id',\n    // Note: we use `focusin`, as opposed to `focus`, in order to open the panel\n    // a little earlier. This avoids issues where IE delays the focusing of the input.\n    '(focusin)': '_handleFocus()',\n    '(blur)': '_onTouched()',\n    '(input)': '_handleInput($event)',\n    '(keydown)': '_handleKeydown($event)',\n  },\n  exportAs: 'matAutocompleteTrigger',\n  providers: [MAT_AUTOCOMPLETE_VALUE_ACCESSOR]\n})\nexport class MatAutocompleteTrigger implements ControlValueAccessor, OnDestroy {\n  private _overlayRef: OverlayRef | null;\n  private _portal: TemplatePortal;\n  private _componentDestroyed = false;\n  private _autocompleteDisabled = false;\n\n  /** Old value of the native input. Used to work around issues with the `input` event on IE. */\n  private _previousValue: string | number | null;\n\n  /** Strategy that is used to position the panel. */\n  private _positionStrategy: FlexibleConnectedPositionStrategy;\n\n  /** Whether or not the label state is being overridden. */\n  private _manuallyFloatingLabel = false;\n\n  /** The subscription for closing actions (some are bound to document). */\n  private _closingActionsSubscription: Subscription;\n\n  /** Subscription to viewport size changes. */\n  private _viewportSubscription = Subscription.EMPTY;\n\n  /** Stream of keyboard events that can close the panel. */\n  private readonly _closeKeyEventStream = new Subject<void>();\n\n  /** `View -> model callback called when value changes` */\n  _onChange: (value: any) => void = () => {};\n\n  /** `View -> model callback called when autocomplete has been touched` */\n  _onTouched = () => {};\n\n  /** The autocomplete panel to be attached to this trigger. */\n  @Input('matAutocomplete') autocomplete: MatAutocomplete;\n\n  /**\n   * Reference relative to which to position the autocomplete panel.\n   * Defaults to the autocomplete trigger element.\n   */\n  @Input('matAutocompleteConnectedTo') connectedTo: MatAutocompleteOrigin;\n\n  /**\n   * `autocomplete` attribute to be set on the input element.\n   * @docs-private\n   */\n  @Input('autocomplete') autocompleteAttribute: string = 'off';\n\n  /**\n   * Whether the autocomplete is disabled. When disabled, the element will\n   * act as a regular input and the user won't be able to open the panel.\n   */\n  @Input('matAutocompleteDisabled')\n  get autocompleteDisabled(): boolean { return this._autocompleteDisabled; }\n  set autocompleteDisabled(value: boolean) {\n    this._autocompleteDisabled = coerceBooleanProperty(value);\n  }\n\n  constructor(private _element: ElementRef, private _overlay: Overlay,\n              private _viewContainerRef: ViewContainerRef,\n              private _zone: NgZone,\n              private _changeDetectorRef: ChangeDetectorRef,\n              @Inject(MAT_AUTOCOMPLETE_SCROLL_STRATEGY) private _scrollStrategy,\n              @Optional() private _dir: Directionality,\n              @Optional() @Host() private _formField: MatFormField,\n              @Optional() @Inject(DOCUMENT) private _document: any,\n              // @deletion-target 7.0.0 Make `_viewportRuler` required.\n              private _viewportRuler?: ViewportRuler) {}\n\n  ngOnDestroy() {\n    this._viewportSubscription.unsubscribe();\n    this._componentDestroyed = true;\n    this._destroyPanel();\n    this._closeKeyEventStream.complete();\n  }\n\n  /** Whether or not the autocomplete panel is open. */\n  get panelOpen(): boolean {\n    return this._overlayAttached && this.autocomplete.showPanel;\n  }\n  private _overlayAttached: boolean = false;\n\n  /** Opens the autocomplete suggestion panel. */\n  openPanel(): void {\n    this._attachOverlay();\n    this._floatLabel();\n  }\n\n  /** Closes the autocomplete suggestion panel. */\n  closePanel(): void {\n    this._resetLabel();\n\n    if (!this._overlayAttached) {\n      return;\n    }\n\n    if (this.panelOpen) {\n      // Only emit if the panel was visible.\n      this.autocomplete.closed.emit();\n    }\n\n    this.autocomplete._isOpen = this._overlayAttached = false;\n\n    if (this._overlayRef && this._overlayRef.hasAttached()) {\n      this._overlayRef.detach();\n      this._closingActionsSubscription.unsubscribe();\n    }\n\n    // Note that in some cases this can end up being called after the component is destroyed.\n    // Add a check to ensure that we don't try to run change detection on a destroyed view.\n    if (!this._componentDestroyed) {\n      // We need to trigger change detection manually, because\n      // `fromEvent` doesn't seem to do it at the proper time.\n      // This ensures that the label is reset when the\n      // user clicks outside.\n      this._changeDetectorRef.detectChanges();\n    }\n  }\n\n  /**\n   * A stream of actions that should close the autocomplete panel, including\n   * when an option is selected, on blur, and when TAB is pressed.\n   */\n  get panelClosingActions(): Observable<MatOptionSelectionChange|null> {\n    return merge(\n      this.optionSelections,\n      this.autocomplete._keyManager.tabOut.pipe(filter(() => this._overlayAttached)),\n      this._closeKeyEventStream,\n      this._outsideClickStream,\n      this._overlayRef ?\n          this._overlayRef.detachments().pipe(filter(() => this._overlayAttached)) :\n          observableOf()\n    ).pipe(\n      // Normalize the output so we return a consistent type.\n      map(event => event instanceof MatOptionSelectionChange ? event : null)\n    );\n  }\n\n  /** Stream of autocomplete option selections. */\n  readonly optionSelections: Observable<MatOptionSelectionChange> = defer(() => {\n    if (this.autocomplete && this.autocomplete.options) {\n     return merge(...this.autocomplete.options.map(option => option.onSelectionChange));\n    }\n\n    // If there are any subscribers before `ngAfterViewInit`, the `autocomplete` will be undefined.\n    // Return a stream that we'll replace with the real one once everything is in place.\n    return this._zone.onStable\n        .asObservable()\n        .pipe(take(1), switchMap(() => this.optionSelections));\n  });\n\n  /** The currently active option, coerced to MatOption type. */\n  get activeOption(): MatOption | null {\n    if (this.autocomplete && this.autocomplete._keyManager) {\n      return this.autocomplete._keyManager.activeItem;\n    }\n\n    return null;\n  }\n\n  /** Stream of clicks outside of the autocomplete panel. */\n  private get _outsideClickStream(): Observable<any> {\n    if (!this._document) {\n      return observableOf(null);\n    }\n\n    return merge(\n      fromEvent(this._document, 'click'),\n      fromEvent(this._document, 'touchend')\n    )\n    .pipe(filter((event: MouseEvent | TouchEvent) => {\n      const clickTarget = event.target as HTMLElement;\n      const formField = this._formField ?\n          this._formField._elementRef.nativeElement : null;\n\n      return this._overlayAttached &&\n              clickTarget !== this._element.nativeElement &&\n              (!formField || !formField.contains(clickTarget)) &&\n              (!!this._overlayRef && !this._overlayRef.overlayElement.contains(clickTarget));\n    }));\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  writeValue(value: any): void {\n    Promise.resolve(null).then(() => this._setTriggerValue(value));\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnChange(fn: (value: any) => {}): void {\n    this._onChange = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnTouched(fn: () => {}) {\n    this._onTouched = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  setDisabledState(isDisabled: boolean) {\n    this._element.nativeElement.disabled = isDisabled;\n  }\n\n  _handleKeydown(event: KeyboardEvent): void {\n    const keyCode = event.keyCode;\n\n    // Prevent the default action on all escape key presses. This is here primarily to bring IE\n    // in line with other browsers. By default, pressing escape on IE will cause it to revert\n    // the input value to the one that it had on focus, however it won't dispatch any events\n    // which means that the model value will be out of sync with the view.\n    if (keyCode === ESCAPE) {\n      event.preventDefault();\n    }\n\n    // Close when pressing ESCAPE or ALT + UP_ARROW, based on the a11y guidelines.\n    // See: https://www.w3.org/TR/wai-aria-practices-1.1/#textbox-keyboard-interaction\n    if (this.panelOpen && (keyCode === ESCAPE || (keyCode === UP_ARROW && event.altKey))) {\n      this._resetActiveItem();\n      this._closeKeyEventStream.next();\n      event.stopPropagation();\n    } else if (this.activeOption && keyCode === ENTER && this.panelOpen) {\n      this.activeOption._selectViaInteraction();\n      this._resetActiveItem();\n      event.preventDefault();\n    } else {\n      const prevActiveItem = this.autocomplete._keyManager.activeItem;\n      const isArrowKey = keyCode === UP_ARROW || keyCode === DOWN_ARROW;\n\n      if (this.panelOpen || keyCode === TAB) {\n        this.autocomplete._keyManager.onKeydown(event);\n      } else if (isArrowKey && this._canOpen()) {\n        this.openPanel();\n      }\n\n      if (isArrowKey || this.autocomplete._keyManager.activeItem !== prevActiveItem) {\n        this._scrollToOption();\n      }\n    }\n  }\n\n  _handleInput(event: KeyboardEvent): void {\n    let target = event.target as HTMLInputElement;\n    let value: number | string | null = target.value;\n\n    // Based on `NumberValueAccessor` from forms.\n    if (target.type === 'number') {\n      value = value == '' ? null : parseFloat(value);\n    }\n\n    // If the input has a placeholder, IE will fire the `input` event on page load,\n    // focus and blur, in addition to when the user actually changed the value. To\n    // filter out all of the extra events, we save the value on focus and between\n    // `input` events, and we check whether it changed.\n    // See: https://connect.microsoft.com/IE/feedback/details/885747/\n    if (this._previousValue !== value && document.activeElement === event.target) {\n      this._previousValue = value;\n      this._onChange(value);\n\n      if (this._canOpen()) {\n        this.openPanel();\n      }\n    }\n  }\n\n  _handleFocus(): void {\n    if (this._canOpen()) {\n      this._previousValue = this._element.nativeElement.value;\n      this._attachOverlay();\n      this._floatLabel(true);\n    }\n  }\n\n  /**\n   * In \"auto\" mode, the label will animate down as soon as focus is lost.\n   * This causes the value to jump when selecting an option with the mouse.\n   * This method manually floats the label until the panel can be closed.\n   * @param shouldAnimate Whether the label should be animated when it is floated.\n   */\n  private _floatLabel(shouldAnimate = false): void {\n    if (this._formField && this._formField.floatLabel === 'auto') {\n      if (shouldAnimate) {\n        this._formField._animateAndLockLabel();\n      } else {\n        this._formField.floatLabel = 'always';\n      }\n\n      this._manuallyFloatingLabel = true;\n    }\n  }\n\n  /** If the label has been manually elevated, return it to its normal state. */\n  private _resetLabel(): void  {\n    if (this._manuallyFloatingLabel) {\n      this._formField.floatLabel = 'auto';\n      this._manuallyFloatingLabel = false;\n    }\n  }\n\n  /**\n   * Given that we are not actually focusing active options, we must manually adjust scroll\n   * to reveal options below the fold. First, we find the offset of the option from the top\n   * of the panel. If that offset is below the fold, the new scrollTop will be the offset -\n   * the panel height + the option height, so the active option will be just visible at the\n   * bottom of the panel. If that offset is above the top of the visible panel, the new scrollTop\n   * will become the offset. If that offset is visible within the panel already, the scrollTop is\n   * not adjusted.\n   */\n  private _scrollToOption(): void {\n    const index = this.autocomplete._keyManager.activeItemIndex || 0;\n    const labelCount = _countGroupLabelsBeforeOption(index,\n        this.autocomplete.options, this.autocomplete.optionGroups);\n\n    const newScrollPosition = _getOptionScrollPosition(\n      index + labelCount,\n      AUTOCOMPLETE_OPTION_HEIGHT,\n      this.autocomplete._getScrollTop(),\n      AUTOCOMPLETE_PANEL_HEIGHT\n    );\n\n    this.autocomplete._setScrollTop(newScrollPosition);\n  }\n\n  /**\n   * This method listens to a stream of panel closing actions and resets the\n   * stream every time the option list changes.\n   */\n  private _subscribeToClosingActions(): Subscription {\n    const firstStable = this._zone.onStable.asObservable().pipe(take(1));\n    const optionChanges = this.autocomplete.options.changes.pipe(\n      tap(() => this._positionStrategy.reapplyLastPosition()),\n      // Defer emitting to the stream until the next tick, because changing\n      // bindings in here will cause \"changed after checked\" errors.\n      delay(0)\n    );\n\n    // When the zone is stable initially, and when the option list changes...\n    return merge(firstStable, optionChanges)\n      .pipe(\n        // create a new stream of panelClosingActions, replacing any previous streams\n        // that were created, and flatten it so our stream only emits closing events...\n        switchMap(() => {\n          this._resetActiveItem();\n          this.autocomplete._setVisibility();\n\n          if (this.panelOpen) {\n            this._overlayRef!.updatePosition();\n          }\n\n          return this.panelClosingActions;\n        }),\n        // when the first closing event occurs...\n        take(1)\n      )\n      // set the value, close the panel, and complete.\n      .subscribe(event => this._setValueAndClose(event));\n  }\n\n  /** Destroys the autocomplete suggestion panel. */\n  private _destroyPanel(): void {\n    if (this._overlayRef) {\n      this.closePanel();\n      this._overlayRef.dispose();\n      this._overlayRef = null;\n    }\n  }\n\n  private _setTriggerValue(value: any): void {\n    const toDisplay = this.autocomplete && this.autocomplete.displayWith ?\n      this.autocomplete.displayWith(value) :\n      value;\n\n    // Simply falling back to an empty string if the display value is falsy does not work properly.\n    // The display value can also be the number zero and shouldn't fall back to an empty string.\n    const inputValue = toDisplay != null ? toDisplay : '';\n\n    // If it's used within a `MatFormField`, we should set it through the property so it can go\n    // through change detection.\n    if (this._formField) {\n      this._formField._control.value = inputValue;\n    } else {\n      this._element.nativeElement.value = inputValue;\n    }\n  }\n\n  /**\n   * This method closes the panel, and if a value is specified, also sets the associated\n   * control to that value. It will also mark the control as dirty if this interaction\n   * stemmed from the user.\n   */\n  private _setValueAndClose(event: MatOptionSelectionChange | null): void {\n    if (event && event.source) {\n      this._clearPreviousSelectedOption(event.source);\n      this._setTriggerValue(event.source.value);\n      this._onChange(event.source.value);\n      this._element.nativeElement.focus();\n      this.autocomplete._emitSelectEvent(event.source);\n    }\n\n    this.closePanel();\n  }\n\n  /**\n   * Clear any previous selected option and emit a selection change event for this option\n   */\n  private _clearPreviousSelectedOption(skip: MatOption) {\n    this.autocomplete.options.forEach(option => {\n      if (option != skip && option.selected) {\n        option.deselect();\n      }\n    });\n  }\n\n  private _attachOverlay(): void {\n    if (!this.autocomplete) {\n      throw getMatAutocompleteMissingPanelError();\n    }\n\n    if (!this._overlayRef) {\n      this._portal = new TemplatePortal(this.autocomplete.template, this._viewContainerRef);\n      this._overlayRef = this._overlay.create(this._getOverlayConfig());\n\n      if (this._viewportRuler) {\n        this._viewportSubscription = this._viewportRuler.change().subscribe(() => {\n          if (this.panelOpen && this._overlayRef) {\n            this._overlayRef.updateSize({width: this._getPanelWidth()});\n          }\n        });\n      }\n    } else {\n      // Update the panel width and direction, in case anything has changed.\n      this._overlayRef.updateSize({width: this._getPanelWidth()});\n    }\n\n    if (this._overlayRef && !this._overlayRef.hasAttached()) {\n      this._overlayRef.attach(this._portal);\n      this._closingActionsSubscription = this._subscribeToClosingActions();\n    }\n\n    const wasOpen = this.panelOpen;\n\n    this.autocomplete._setVisibility();\n    this.autocomplete._isOpen = this._overlayAttached = true;\n\n    // We need to do an extra `panelOpen` check in here, because the\n    // autocomplete won't be shown if there are no options.\n    if (this.panelOpen && wasOpen !== this.panelOpen) {\n      this.autocomplete.opened.emit();\n    }\n  }\n\n  private _getOverlayConfig(): OverlayConfig {\n    return new OverlayConfig({\n      positionStrategy: this._getOverlayPosition(),\n      scrollStrategy: this._scrollStrategy(),\n      width: this._getPanelWidth(),\n      direction: this._dir\n    });\n  }\n\n  private _getOverlayPosition(): PositionStrategy {\n    this._positionStrategy = this._overlay.position()\n      .flexibleConnectedTo(this._getConnectedElement())\n      .withFlexibleDimensions(false)\n      .withPush(false)\n      .withPositions([\n        {originX: 'start', originY: 'bottom', overlayX: 'start', overlayY: 'top'},\n        {originX: 'start', originY: 'top', overlayX: 'start', overlayY: 'bottom'}\n      ]);\n\n    return this._positionStrategy;\n  }\n\n  private _getConnectedElement(): ElementRef {\n    if (this.connectedTo) {\n      return this.connectedTo.elementRef;\n    }\n\n    return this._formField ? this._formField.getConnectedOverlayOrigin() : this._element;\n  }\n\n  private _getPanelWidth(): number | string {\n    return this.autocomplete.panelWidth || this._getHostWidth();\n  }\n\n  /** Returns the width of the input element, so the panel width can match it. */\n  private _getHostWidth(): number {\n    return this._getConnectedElement().nativeElement.getBoundingClientRect().width;\n  }\n\n  /**\n   * Resets the active item to -1 so arrow events will activate the\n   * correct options, or to 0 if the consumer opted into it.\n   */\n  private _resetActiveItem(): void {\n    this.autocomplete._keyManager.setActiveItem(this.autocomplete.autoActiveFirstOption ? 0 : -1);\n  }\n\n  /** Determines whether the panel can be opened. */\n  private _canOpen(): boolean {\n    const element: HTMLInputElement = this._element.nativeElement;\n    return !element.readOnly && !element.disabled && !this._autocompleteDisabled;\n  }\n\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * When constructing a Date, the month is zero-based. This can be confusing, since people are\n * used to seeing them one-based. So we create these aliases to make writing the tests easier.\n */\nexport const JAN = 0, FEB = 1, MAR = 2, APR = 3, MAY = 4, JUN = 5, JUL = 6, AUG = 7, SEP = 8,\n    OCT = 9, NOV = 10, DEC = 11;\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  animateChild,\n  group,\n  state,\n  style,\n  transition,\n  trigger,\n  query,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/** Time and timing curve for expansion panel animations. */\nexport const EXPANSION_PANEL_ANIMATION_TIMING = '225ms cubic-bezier(0.4,0.0,0.2,1)';\n\n/** Animations used by the Material expansion panel. */\nexport const matExpansionAnimations: {\n  readonly indicatorRotate: AnimationTriggerMetadata;\n  readonly expansionHeaderHeight: AnimationTriggerMetadata;\n  readonly bodyExpansion: AnimationTriggerMetadata;\n} = {\n  /** Animation that rotates the indicator arrow. */\n  indicatorRotate: trigger('indicatorRotate', [\n    state('collapsed', style({transform: 'rotate(0deg)'})),\n    state('expanded', style({transform: 'rotate(180deg)'})),\n    transition('expanded <=> collapsed', animate(EXPANSION_PANEL_ANIMATION_TIMING)),\n  ]),\n\n  /** Animation that expands and collapses the panel header height. */\n  expansionHeaderHeight: trigger('expansionHeight', [\n    state('collapsed', style({\n      height: '{{collapsedHeight}}',\n    }), {\n      params: {collapsedHeight: '48px'},\n    }),\n    state('expanded', style({\n      height: '{{expandedHeight}}'\n    }), {\n      params: {expandedHeight: '64px'}\n    }),\n    transition('expanded <=> collapsed', group([\n      query('@indicatorRotate', animateChild(), {optional: true}),\n      animate(EXPANSION_PANEL_ANIMATION_TIMING),\n    ])),\n  ]),\n\n  /** Animation that expands and collapses the panel content. */\n  bodyExpansion: trigger('bodyExpansion', [\n    state('collapsed', style({height: '0px', visibility: 'hidden'})),\n    state('expanded', style({height: '*', visibility: 'visible'})),\n    transition('expanded <=> collapsed', animate(EXPANSION_PANEL_ANIMATION_TIMING)),\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ActiveDescendantKeyManager} from '@angular/cdk/a11y';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {SelectionModel} from '@angular/cdk/collections';\nimport {\n  DOWN_ARROW,\n  END,\n  ENTER,\n  HOME,\n  LEFT_ARROW,\n  RIGHT_ARROW,\n  SPACE,\n  UP_ARROW,\n  A,\n} from '@angular/cdk/keycodes';\nimport {\n  CdkConnectedOverlay,\n  Overlay,\n  RepositionScrollStrategy,\n  ScrollStrategy,\n  ViewportRuler,\n} from '@angular/cdk/overlay';\nimport {\n  AfterContentInit,\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  ContentChildren,\n  Directive,\n  DoCheck,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  InjectionToken,\n  Input,\n  isDevMode,\n  NgZone,\n  OnChanges,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Output,\n  QueryList,\n  Self,\n  SimpleChanges,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {ControlValueAccessor, FormGroupDirective, NgControl, NgForm} from '@angular/forms';\nimport {\n  _countGroupLabelsBeforeOption,\n  _getOptionScrollPosition,\n  CanDisable,\n  CanDisableRipple,\n  CanUpdateErrorState,\n  ErrorStateMatcher,\n  HasTabIndex,\n  MAT_OPTION_PARENT_COMPONENT,\n  MatOptgroup,\n  MatOption,\n  MatOptionSelectionChange,\n  mixinDisabled,\n  mixinDisableRipple,\n  mixinErrorState,\n  mixinTabIndex,\n} from '@angular/material/core';\nimport {MatFormField, MatFormFieldControl} from '@angular/material/form-field';\nimport {defer, merge, Observable, Subject} from 'rxjs';\nimport {\n  filter,\n  map,\n  startWith,\n  switchMap,\n  take,\n  takeUntil,\n  distinctUntilChanged,\n} from 'rxjs/operators';\nimport {matSelectAnimations} from './select-animations';\nimport {\n  getMatSelectDynamicMultipleError,\n  getMatSelectNonArrayValueError,\n  getMatSelectNonFunctionValueError,\n} from './select-errors';\n\n\nlet nextUniqueId = 0;\n\n/**\n * The following style constants are necessary to save here in order\n * to properly calculate the alignment of the selected option over\n * the trigger element.\n */\n\n/** The max height of the select's overlay panel */\nexport const SELECT_PANEL_MAX_HEIGHT = 256;\n\n/** The panel's padding on the x-axis */\nexport const SELECT_PANEL_PADDING_X = 16;\n\n/** The panel's x axis padding if it is indented (e.g. there is an option group). */\nexport const SELECT_PANEL_INDENT_PADDING_X = SELECT_PANEL_PADDING_X * 2;\n\n/** The height of the select items in `em` units. */\nexport const SELECT_ITEM_HEIGHT_EM = 3;\n\n/**\n * Distance between the panel edge and the option text in\n * multi-selection mode.\n *\n * (SELECT_PANEL_PADDING_X * 1.5) + 20 = 44\n * The padding is multiplied by 1.5 because the checkbox's margin is half the padding.\n * The checkbox width is 20px.\n */\nexport const SELECT_MULTIPLE_PANEL_PADDING_X = SELECT_PANEL_PADDING_X * 1.5 + 20;\n\n/**\n * The select panel will only \"fit\" inside the viewport if it is positioned at\n * this value or more away from the viewport boundary.\n */\nexport const SELECT_PANEL_VIEWPORT_PADDING = 8;\n\n/** Injection token that determines the scroll handling while a select is open. */\nexport const MAT_SELECT_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mat-select-scroll-strategy');\n\n/** @docs-private */\nexport function MAT_SELECT_SCROLL_STRATEGY_PROVIDER_FACTORY(overlay: Overlay):\n    () => RepositionScrollStrategy {\n  return () => overlay.scrollStrategies.reposition();\n}\n\n/** @docs-private */\nexport const MAT_SELECT_SCROLL_STRATEGY_PROVIDER = {\n  provide: MAT_SELECT_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_SELECT_SCROLL_STRATEGY_PROVIDER_FACTORY,\n};\n\n/** Change event object that is emitted when the select value has changed. */\nexport class MatSelectChange {\n  constructor(\n    /** Reference to the select that emitted the change event. */\n    public source: MatSelect,\n    /** Current value of the select that emitted the event. */\n    public value: any) { }\n}\n\n// Boilerplate for applying mixins to MatSelect.\n/** @docs-private */\nexport class MatSelectBase {\n  constructor(public _elementRef: ElementRef,\n              public _defaultErrorStateMatcher: ErrorStateMatcher,\n              public _parentForm: NgForm,\n              public _parentFormGroup: FormGroupDirective,\n              public ngControl: NgControl) {}\n}\nexport const _MatSelectMixinBase = mixinDisableRipple(\n    mixinTabIndex(mixinDisabled(mixinErrorState(MatSelectBase))));\n\n\n/**\n * Allows the user to customize the trigger that is displayed when the select has a value.\n */\n@Directive({\n  selector: 'mat-select-trigger'\n})\nexport class MatSelectTrigger {}\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-select',\n  exportAs: 'matSelect',\n  templateUrl: 'select.html',\n  styleUrls: ['select.css'],\n  inputs: ['disabled', 'disableRipple', 'tabIndex'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {\n    'role': 'listbox',\n    '[attr.id]': 'id',\n    '[attr.tabindex]': 'tabIndex',\n    '[attr.aria-label]': '_getAriaLabel()',\n    '[attr.aria-labelledby]': '_getAriaLabelledby()',\n    '[attr.aria-required]': 'required.toString()',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.aria-invalid]': 'errorState',\n    '[attr.aria-owns]': 'panelOpen ? _optionIds : null',\n    '[attr.aria-multiselectable]': 'multiple',\n    '[attr.aria-describedby]': '_ariaDescribedby || null',\n    '[attr.aria-activedescendant]': '_getAriaActiveDescendant()',\n    '[class.mat-select-disabled]': 'disabled',\n    '[class.mat-select-invalid]': 'errorState',\n    '[class.mat-select-required]': 'required',\n    'class': 'mat-select',\n    '(keydown)': '_handleKeydown($event)',\n    '(focus)': '_onFocus()',\n    '(blur)': '_onBlur()',\n  },\n  animations: [\n    matSelectAnimations.transformPanel,\n    matSelectAnimations.fadeInContent\n  ],\n  providers: [\n    {provide: MatFormFieldControl, useExisting: MatSelect},\n    {provide: MAT_OPTION_PARENT_COMPONENT, useExisting: MatSelect}\n  ],\n})\nexport class MatSelect extends _MatSelectMixinBase implements AfterContentInit, OnChanges,\n    OnDestroy, OnInit, DoCheck, ControlValueAccessor, CanDisable, HasTabIndex,\n    MatFormFieldControl<any>, CanUpdateErrorState, CanDisableRipple {\n  /** Whether or not the overlay panel is open. */\n  private _panelOpen = false;\n\n  /** Whether filling out the select is required in the form. */\n  private _required: boolean = false;\n\n  /** The scroll position of the overlay panel, calculated to center the selected option. */\n  private _scrollTop = 0;\n\n  /** The placeholder displayed in the trigger of the select. */\n  private _placeholder: string;\n\n  /** Whether the component is in multiple selection mode. */\n  private _multiple: boolean = false;\n\n  /** Comparison function to specify which option is displayed. Defaults to object equality. */\n  private _compareWith = (o1: any, o2: any) => o1 === o2;\n\n  /** Unique id for this input. */\n  private _uid = `mat-select-${nextUniqueId++}`;\n\n  /** Emits whenever the component is destroyed. */\n  private readonly _destroy = new Subject<void>();\n\n  /** The last measured value for the trigger's client bounding rect. */\n  _triggerRect: ClientRect;\n\n  /** The aria-describedby attribute on the select for improved a11y. */\n  _ariaDescribedby: string;\n\n  /** The cached font-size of the trigger element. */\n  _triggerFontSize = 0;\n\n  /** Deals with the selection logic. */\n  _selectionModel: SelectionModel<MatOption>;\n\n  /** Manages keyboard events for options in the panel. */\n  _keyManager: ActiveDescendantKeyManager<MatOption>;\n\n  /** `View -> model callback called when value changes` */\n  _onChange: (value: any) => void = () => {};\n\n  /** `View -> model callback called when select has been touched` */\n  _onTouched = () => {};\n\n  /** The IDs of child options to be passed to the aria-owns attribute. */\n  _optionIds: string = '';\n\n  /** The value of the select panel's transform-origin property. */\n  _transformOrigin: string = 'top';\n\n  /** Whether the panel's animation is done. */\n  _panelDoneAnimating: boolean = false;\n\n  /** Emits when the panel element is finished transforming in. */\n  _panelDoneAnimatingStream = new Subject<string>();\n\n  /** Strategy that will be used to handle scrolling while the select panel is open. */\n  _scrollStrategy = this._scrollStrategyFactory();\n\n  /**\n   * The y-offset of the overlay panel in relation to the trigger's top start corner.\n   * This must be adjusted to align the selected option text over the trigger text.\n   * when the panel opens. Will change based on the y-position of the selected option.\n   */\n  _offsetY = 0;\n\n  /**\n   * This position config ensures that the top \"start\" corner of the overlay\n   * is aligned with with the top \"start\" of the origin by default (overlapping\n   * the trigger completely). If the panel cannot fit below the trigger, it\n   * will fall back to a position above the trigger.\n   */\n  _positions = [\n    {\n      originX: 'start',\n      originY: 'top',\n      overlayX: 'start',\n      overlayY: 'top',\n    },\n    {\n      originX: 'start',\n      originY: 'bottom',\n      overlayX: 'start',\n      overlayY: 'bottom',\n    },\n  ];\n\n  /** Whether the component is disabling centering of the active option over the trigger. */\n  private _disableOptionCentering: boolean = false;\n\n  /** Whether the select is focused. */\n  get focused(): boolean {\n    return this._focused || this._panelOpen;\n  }\n  /**\n   * @deprecated Setter to be removed as this property is intended to be readonly.\n   * @deletion-target 8.0.0\n   */\n  set focused(value: boolean) {\n    this._focused = value;\n  }\n  private _focused = false;\n\n  /** A name for this control that can be used by `mat-form-field`. */\n  controlType = 'mat-select';\n\n  /** Trigger that opens the select. */\n  @ViewChild('trigger') trigger: ElementRef;\n\n  /** Panel containing the select options. */\n  @ViewChild('panel') panel: ElementRef;\n\n  /** Overlay pane containing the options. */\n  @ViewChild(CdkConnectedOverlay) overlayDir: CdkConnectedOverlay;\n\n  /** All of the defined select options. */\n  @ContentChildren(MatOption, { descendants: true }) options: QueryList<MatOption>;\n\n  /** All of the defined groups of options. */\n  @ContentChildren(MatOptgroup) optionGroups: QueryList<MatOptgroup>;\n\n  /** Classes to be passed to the select panel. Supports the same syntax as `ngClass`. */\n  @Input() panelClass: string|string[]|Set<string>|{[key: string]: any};\n\n  /** User-supplied override of the trigger element. */\n  @ContentChild(MatSelectTrigger) customTrigger: MatSelectTrigger;\n\n  /** Placeholder to be shown if no value has been selected. */\n  @Input()\n  get placeholder(): string { return this._placeholder; }\n  set placeholder(value: string) {\n    this._placeholder = value;\n    this.stateChanges.next();\n  }\n\n  /** Whether the component is required. */\n  @Input()\n  get required(): boolean { return this._required; }\n  set required(value: boolean) {\n    this._required = coerceBooleanProperty(value);\n    this.stateChanges.next();\n  }\n\n  /** Whether the user should be allowed to select multiple options. */\n  @Input()\n  get multiple(): boolean { return this._multiple; }\n  set multiple(value: boolean) {\n    if (this._selectionModel) {\n      throw getMatSelectDynamicMultipleError();\n    }\n\n    this._multiple = coerceBooleanProperty(value);\n  }\n\n  /** Whether to center the active option over the trigger. */\n  @Input()\n  get disableOptionCentering(): boolean { return this._disableOptionCentering; }\n  set disableOptionCentering(value: boolean) {\n    this._disableOptionCentering = coerceBooleanProperty(value);\n  }\n\n  /**\n   * A function to compare the option values with the selected values. The first argument\n   * is a value from an option. The second is a value from the selection. A boolean\n   * should be returned.\n   */\n  @Input()\n  get compareWith() { return this._compareWith; }\n  set compareWith(fn: (o1: any, o2: any) => boolean) {\n    if (typeof fn !== 'function') {\n      throw getMatSelectNonFunctionValueError();\n    }\n    this._compareWith = fn;\n    if (this._selectionModel) {\n      // A different comparator means the selection could change.\n      this._initializeSelection();\n    }\n  }\n\n  /** Value of the select control. */\n  @Input()\n  get value(): any { return this._value; }\n  set value(newValue: any) {\n    if (newValue !== this._value) {\n      this.writeValue(newValue);\n      this._value = newValue;\n    }\n  }\n  private _value: any;\n\n  /** Aria label of the select. If not specified, the placeholder will be used as label. */\n  @Input('aria-label') ariaLabel: string = '';\n\n  /** Input that can be used to specify the `aria-labelledby` attribute. */\n  @Input('aria-labelledby') ariaLabelledby: string;\n\n  /** An object used to control when error messages are shown. */\n  @Input() errorStateMatcher: ErrorStateMatcher;\n\n  /** Unique id of the element. */\n  @Input()\n  get id(): string { return this._id; }\n  set id(value: string) {\n    this._id = value || this._uid;\n    this.stateChanges.next();\n  }\n  private _id: string;\n\n  /** Combined stream of all of the child options' change events. */\n  readonly optionSelectionChanges: Observable<MatOptionSelectionChange> = defer(() => {\n    if (this.options) {\n      return merge(...this.options.map(option => option.onSelectionChange));\n    }\n\n    return this._ngZone.onStable\n      .asObservable()\n      .pipe(take(1), switchMap(() => this.optionSelectionChanges));\n  });\n\n   /** Event emitted when the select panel has been toggled. */\n   @Output() readonly openedChange: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n  /** Event emitted when the select has been opened. */\n  @Output('opened') readonly _openedStream: Observable<void> =\n      this.openedChange.pipe(filter(o => o), map(() => {}));\n\n  /** Event emitted when the select has been closed. */\n  @Output('closed') readonly _closedStream: Observable<void> =\n      this.openedChange.pipe(filter(o => !o), map(() => {}));\n\n   /** Event emitted when the selected value has been changed by the user. */\n  @Output() readonly selectionChange: EventEmitter<MatSelectChange> =\n      new EventEmitter<MatSelectChange>();\n\n  /**\n   * Event that emits whenever the raw value of the select changes. This is here primarily\n   * to facilitate the two-way binding for the `value` input.\n   * @docs-private\n   */\n  @Output() readonly valueChange: EventEmitter<any> = new EventEmitter<any>();\n\n  constructor(\n    private _viewportRuler: ViewportRuler,\n    private _changeDetectorRef: ChangeDetectorRef,\n    private _ngZone: NgZone,\n    _defaultErrorStateMatcher: ErrorStateMatcher,\n    elementRef: ElementRef,\n    @Optional() private _dir: Directionality,\n    @Optional() _parentForm: NgForm,\n    @Optional() _parentFormGroup: FormGroupDirective,\n    @Optional() private _parentFormField: MatFormField,\n    @Self() @Optional() public ngControl: NgControl,\n    @Attribute('tabindex') tabIndex: string,\n    @Inject(MAT_SELECT_SCROLL_STRATEGY) private _scrollStrategyFactory) {\n    super(elementRef, _defaultErrorStateMatcher, _parentForm,\n          _parentFormGroup, ngControl);\n\n    if (this.ngControl) {\n      // Note: we provide the value accessor through here, instead of\n      // the `providers` to avoid running into a circular import.\n      this.ngControl.valueAccessor = this;\n    }\n\n    this.tabIndex = parseInt(tabIndex) || 0;\n\n    // Force setter to be called in case id was not specified.\n    this.id = this.id;\n  }\n\n  ngOnInit() {\n    this._selectionModel = new SelectionModel<MatOption>(this.multiple);\n    this.stateChanges.next();\n\n    // We need `distinctUntilChanged` here, because some browsers will\n    // fire the animation end event twice for the same animation. See:\n    // https://github.com/angular/angular/issues/24084\n    this._panelDoneAnimatingStream\n      .pipe(distinctUntilChanged(), takeUntil(this._destroy))\n      .subscribe(() => {\n        if (this.panelOpen) {\n          this._scrollTop = 0;\n          this.openedChange.emit(true);\n        } else {\n          this.openedChange.emit(false);\n          this._panelDoneAnimating = false;\n          this.overlayDir.offsetX = 0;\n          this._changeDetectorRef.markForCheck();\n        }\n      });\n  }\n\n  ngAfterContentInit() {\n    this._initKeyManager();\n\n    this._selectionModel.onChange!.pipe(takeUntil(this._destroy)).subscribe(event => {\n      event.added.forEach(option => option.select());\n      event.removed.forEach(option => option.deselect());\n    });\n\n    this.options.changes.pipe(startWith(null), takeUntil(this._destroy)).subscribe(() => {\n      this._resetOptions();\n      this._initializeSelection();\n    });\n  }\n\n  ngDoCheck() {\n    if (this.ngControl) {\n      this.updateErrorState();\n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    // Updating the disabled state is handled by `mixinDisabled`, but we need to additionally let\n    // the parent form field know to run change detection when the disabled state changes.\n    if (changes.disabled) {\n      this.stateChanges.next();\n    }\n  }\n\n  ngOnDestroy() {\n    this._destroy.next();\n    this._destroy.complete();\n    this.stateChanges.complete();\n  }\n\n  /** Toggles the overlay panel open or closed. */\n  toggle(): void {\n    this.panelOpen ? this.close() : this.open();\n  }\n\n  /** Opens the overlay panel. */\n  open(): void {\n    if (this.disabled || !this.options || !this.options.length || this._panelOpen) {\n      return;\n    }\n\n    this._triggerRect = this.trigger.nativeElement.getBoundingClientRect();\n    // Note: The computed font-size will be a string pixel value (e.g. \"16px\").\n    // `parseInt` ignores the trailing 'px' and converts this to a number.\n    this._triggerFontSize = parseInt(getComputedStyle(this.trigger.nativeElement)['font-size']);\n\n    this._panelOpen = true;\n    this._keyManager.withHorizontalOrientation(null);\n    this._calculateOverlayPosition();\n    this._highlightCorrectOption();\n    this._changeDetectorRef.markForCheck();\n\n    // Set the font size on the panel element once it exists.\n    this._ngZone.onStable.asObservable().pipe(take(1)).subscribe(() => {\n      if (this._triggerFontSize && this.overlayDir.overlayRef &&\n          this.overlayDir.overlayRef.overlayElement) {\n        this.overlayDir.overlayRef.overlayElement.style.fontSize = `${this._triggerFontSize}px`;\n      }\n    });\n  }\n\n  /** Closes the overlay panel and focuses the host element. */\n  close(): void {\n    if (this._panelOpen) {\n      this._panelOpen = false;\n      this._keyManager.withHorizontalOrientation(this._isRtl() ? 'rtl' : 'ltr');\n      this._changeDetectorRef.markForCheck();\n      this._onTouched();\n    }\n  }\n\n  /**\n   * Sets the select's value. Part of the ControlValueAccessor interface\n   * required to integrate with Angular's core forms API.\n   *\n   * @param value New value to be written to the model.\n   */\n  writeValue(value: any): void {\n    if (this.options) {\n      this._setSelectionByValue(value);\n    }\n  }\n\n  /**\n   * Saves a callback function to be invoked when the select's value\n   * changes from user input. Part of the ControlValueAccessor interface\n   * required to integrate with Angular's core forms API.\n   *\n   * @param fn Callback to be triggered when the value changes.\n   */\n  registerOnChange(fn: (value: any) => void): void {\n    this._onChange = fn;\n  }\n\n  /**\n   * Saves a callback function to be invoked when the select is blurred\n   * by the user. Part of the ControlValueAccessor interface required\n   * to integrate with Angular's core forms API.\n   *\n   * @param fn Callback to be triggered when the component has been touched.\n   */\n  registerOnTouched(fn: () => {}): void {\n    this._onTouched = fn;\n  }\n\n  /**\n   * Disables the select. Part of the ControlValueAccessor interface required\n   * to integrate with Angular's core forms API.\n   *\n   * @param isDisabled Sets whether the component is disabled.\n   */\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n    this._changeDetectorRef.markForCheck();\n    this.stateChanges.next();\n  }\n\n  /** Whether or not the overlay panel is open. */\n  get panelOpen(): boolean {\n    return this._panelOpen;\n  }\n\n  /** The currently selected option. */\n  get selected(): MatOption | MatOption[] {\n    return this.multiple ? this._selectionModel.selected : this._selectionModel.selected[0];\n  }\n\n  /** The value displayed in the trigger. */\n  get triggerValue(): string {\n    if (this.empty) {\n      return '';\n    }\n\n    if (this._multiple) {\n      const selectedOptions = this._selectionModel.selected.map(option => option.viewValue);\n\n      if (this._isRtl()) {\n        selectedOptions.reverse();\n      }\n\n      // TODO(crisbeto): delimiter should be configurable for proper localization.\n      return selectedOptions.join(', ');\n    }\n\n    return this._selectionModel.selected[0].viewValue;\n  }\n\n  /** Whether the element is in RTL mode. */\n  _isRtl(): boolean {\n    return this._dir ? this._dir.value === 'rtl' : false;\n  }\n\n  /** Handles all keydown events on the select. */\n  _handleKeydown(event: KeyboardEvent): void {\n    if (!this.disabled) {\n      this.panelOpen ? this._handleOpenKeydown(event) : this._handleClosedKeydown(event);\n    }\n  }\n\n  /** Handles keyboard events while the select is closed. */\n  private _handleClosedKeydown(event: KeyboardEvent): void {\n    const keyCode = event.keyCode;\n    const isArrowKey = keyCode === DOWN_ARROW || keyCode === UP_ARROW ||\n        keyCode === LEFT_ARROW || keyCode === RIGHT_ARROW;\n    const isOpenKey = keyCode === ENTER || keyCode === SPACE;\n\n    // Open the select on ALT + arrow key to match the native <select>\n    if (isOpenKey || ((this.multiple || event.altKey) && isArrowKey)) {\n      event.preventDefault(); // prevents the page from scrolling down when pressing space\n      this.open();\n    } else if (!this.multiple) {\n      this._keyManager.onKeydown(event);\n    }\n  }\n\n  /** Handles keyboard events when the selected is open. */\n  private _handleOpenKeydown(event: KeyboardEvent): void {\n    const keyCode = event.keyCode;\n    const isArrowKey = keyCode === DOWN_ARROW || keyCode === UP_ARROW;\n    const manager = this._keyManager;\n\n    if (keyCode === HOME || keyCode === END) {\n      event.preventDefault();\n      keyCode === HOME ? manager.setFirstItemActive() : manager.setLastItemActive();\n    } else if (isArrowKey && event.altKey) {\n      // Close the select on ALT + arrow key to match the native <select>\n      event.preventDefault();\n      this.close();\n    } else if ((keyCode === ENTER || keyCode === SPACE) && manager.activeItem) {\n      event.preventDefault();\n      manager.activeItem._selectViaInteraction();\n    } else if (this._multiple && keyCode === A && event.ctrlKey) {\n      event.preventDefault();\n      const hasDeselectedOptions = this.options.some(option => !option.selected);\n      this.options.forEach(option => hasDeselectedOptions ? option.select() : option.deselect());\n    } else {\n      const previouslyFocusedIndex = manager.activeItemIndex;\n\n      manager.onKeydown(event);\n\n      if (this._multiple && isArrowKey && event.shiftKey && manager.activeItem &&\n          manager.activeItemIndex !== previouslyFocusedIndex) {\n        manager.activeItem._selectViaInteraction();\n      }\n    }\n  }\n\n  /**\n   * When the panel content is done fading in, the _panelDoneAnimating property is\n   * set so the proper class can be added to the panel.\n   */\n  _onFadeInDone(): void {\n    this._panelDoneAnimating = this.panelOpen;\n    this._changeDetectorRef.markForCheck();\n  }\n\n  _onFocus() {\n    if (!this.disabled) {\n      this._focused = true;\n      this.stateChanges.next();\n    }\n  }\n\n  /**\n   * Calls the touched callback only if the panel is closed. Otherwise, the trigger will\n   * \"blur\" to the panel when it opens, causing a false positive.\n   */\n  _onBlur() {\n    this._focused = false;\n\n    if (!this.disabled && !this.panelOpen) {\n      this._onTouched();\n      this._changeDetectorRef.markForCheck();\n      this.stateChanges.next();\n    }\n  }\n\n  /**\n   * Callback that is invoked when the overlay panel has been attached.\n   */\n  _onAttached(): void {\n    this.overlayDir.positionChange.pipe(take(1)).subscribe(() => {\n      this._changeDetectorRef.detectChanges();\n      this._calculateOverlayOffsetX();\n      this.panel.nativeElement.scrollTop = this._scrollTop;\n    });\n  }\n\n  /** Returns the theme to be used on the panel. */\n  _getPanelTheme(): string {\n    return this._parentFormField ? `mat-${this._parentFormField.color}` : '';\n  }\n\n  /** Whether the select has a value. */\n  get empty(): boolean {\n    return !this._selectionModel || this._selectionModel.isEmpty();\n  }\n\n  private _initializeSelection(): void {\n    // Defer setting the value in order to avoid the \"Expression\n    // has changed after it was checked\" errors from Angular.\n    Promise.resolve().then(() => {\n      this._setSelectionByValue(this.ngControl ? this.ngControl.value : this._value);\n    });\n  }\n\n  /**\n   * Sets the selected option based on a value. If no option can be\n   * found with the designated value, the select trigger is cleared.\n   */\n  private _setSelectionByValue(value: any | any[]): void {\n    if (this.multiple && value) {\n      if (!Array.isArray(value)) {\n        throw getMatSelectNonArrayValueError();\n      }\n\n      this._selectionModel.clear();\n      value.forEach((currentValue: any) => this._selectValue(currentValue));\n      this._sortValues();\n    } else {\n      this._selectionModel.clear();\n      const correspondingOption = this._selectValue(value);\n\n      // Shift focus to the active item. Note that we shouldn't do this in multiple\n      // mode, because we don't know what option the user interacted with last.\n      if (correspondingOption) {\n        this._keyManager.setActiveItem(correspondingOption);\n      }\n    }\n\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /**\n   * Finds and selects and option based on its value.\n   * @returns Option that has the corresponding value.\n   */\n  private _selectValue(value: any): MatOption | undefined {\n    const correspondingOption = this.options.find((option: MatOption) => {\n      try {\n        // Treat null as a special reset value.\n        return option.value != null && this._compareWith(option.value,  value);\n      } catch (error) {\n        if (isDevMode()) {\n          // Notify developers of errors in their comparator.\n          console.warn(error);\n        }\n        return false;\n      }\n    });\n\n    if (correspondingOption) {\n      this._selectionModel.select(correspondingOption);\n    }\n\n    return correspondingOption;\n  }\n\n  /** Sets up a key manager to listen to keyboard events on the overlay panel. */\n  private _initKeyManager() {\n    this._keyManager = new ActiveDescendantKeyManager<MatOption>(this.options)\n      .withTypeAhead()\n      .withVerticalOrientation()\n      .withHorizontalOrientation(this._isRtl() ? 'rtl' : 'ltr');\n\n    this._keyManager.tabOut.pipe(takeUntil(this._destroy)).subscribe(() => {\n      // Restore focus to the trigger before closing. Ensures that the focus\n      // position won't be lost if the user got focus into the overlay.\n      this.focus();\n      this.close();\n    });\n\n    this._keyManager.change.pipe(takeUntil(this._destroy)).subscribe(() => {\n      if (this._panelOpen && this.panel) {\n        this._scrollActiveOptionIntoView();\n      } else if (!this._panelOpen && !this.multiple && this._keyManager.activeItem) {\n        this._keyManager.activeItem._selectViaInteraction();\n      }\n    });\n  }\n\n  /** Drops current option subscriptions and IDs and resets from scratch. */\n  private _resetOptions(): void {\n    const changedOrDestroyed = merge(this.options.changes, this._destroy);\n\n    this.optionSelectionChanges.pipe(takeUntil(changedOrDestroyed)).subscribe(event => {\n      this._onSelect(event.source, event.isUserInput);\n\n      if (event.isUserInput && !this.multiple && this._panelOpen) {\n        this.close();\n        this.focus();\n      }\n    });\n\n    // Listen to changes in the internal state of the options and react accordingly.\n    // Handles cases like the labels of the selected options changing.\n    merge(...this.options.map(option => option._stateChanges))\n      .pipe(takeUntil(changedOrDestroyed))\n      .subscribe(() => {\n        this._changeDetectorRef.markForCheck();\n        this.stateChanges.next();\n      });\n\n    this._setOptionIds();\n  }\n\n  /** Invoked when an option is clicked. */\n  private _onSelect(option: MatOption, isUserInput: boolean): void {\n    const wasSelected = this._selectionModel.isSelected(option);\n\n    if (option.value == null && !this._multiple) {\n      option.deselect();\n      this._selectionModel.clear();\n      this._propagateChanges(option.value);\n    } else {\n      option.selected ? this._selectionModel.select(option) : this._selectionModel.deselect(option);\n\n      if (isUserInput) {\n        this._keyManager.setActiveItem(option);\n      }\n\n      if (this.multiple) {\n        this._sortValues();\n\n        if (isUserInput) {\n          // In case the user selected the option with their mouse, we\n          // want to restore focus back to the trigger, in order to\n          // prevent the select keyboard controls from clashing with\n          // the ones from `mat-option`.\n          this.focus();\n        }\n      }\n    }\n\n    if (wasSelected !== this._selectionModel.isSelected(option)) {\n      this._propagateChanges();\n    }\n\n    this.stateChanges.next();\n  }\n\n  /** Sorts the selected values in the selected based on their order in the panel. */\n  private _sortValues() {\n    if (this.multiple) {\n      const options = this.options.toArray();\n      this._selectionModel.sort((a, b) => options.indexOf(a) - options.indexOf(b));\n      this.stateChanges.next();\n    }\n  }\n\n  /** Emits change event to set the model value. */\n  private _propagateChanges(fallbackValue?: any): void {\n    let valueToEmit: any = null;\n\n    if (this.multiple) {\n      valueToEmit = (this.selected as MatOption[]).map(option => option.value);\n    } else {\n      valueToEmit = this.selected ? (this.selected as MatOption).value : fallbackValue;\n    }\n\n    this._value = valueToEmit;\n    this.valueChange.emit(valueToEmit);\n    this._onChange(valueToEmit);\n    this.selectionChange.emit(new MatSelectChange(this, valueToEmit));\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Records option IDs to pass to the aria-owns property. */\n  private _setOptionIds() {\n    this._optionIds = this.options.map(option => option.id).join(' ');\n  }\n\n  /**\n   * Highlights the selected item. If no option is selected, it will highlight\n   * the first item instead.\n   */\n  private _highlightCorrectOption(): void {\n    if (this._keyManager) {\n      if (this.empty) {\n        this._keyManager.setFirstItemActive();\n      } else {\n        this._keyManager.setActiveItem(this._selectionModel.selected[0]);\n      }\n    }\n  }\n\n  /** Scrolls the active option into view. */\n  private _scrollActiveOptionIntoView(): void {\n    const activeOptionIndex = this._keyManager.activeItemIndex || 0;\n    const labelCount = _countGroupLabelsBeforeOption(activeOptionIndex, this.options,\n        this.optionGroups);\n\n    this.panel.nativeElement.scrollTop = _getOptionScrollPosition(\n      activeOptionIndex + labelCount,\n      this._getItemHeight(),\n      this.panel.nativeElement.scrollTop,\n      SELECT_PANEL_MAX_HEIGHT\n    );\n  }\n\n  /** Focuses the select element. */\n  focus(): void {\n    this._elementRef.nativeElement.focus();\n  }\n\n  /** Gets the index of the provided option in the option list. */\n  private _getOptionIndex(option: MatOption): number | undefined {\n    return this.options.reduce((result: number, current: MatOption, index: number) => {\n      return result === undefined ? (option === current ? index : undefined) : result;\n    }, undefined);\n  }\n\n  /** Calculates the scroll position and x- and y-offsets of the overlay panel. */\n  private _calculateOverlayPosition(): void {\n    const itemHeight = this._getItemHeight();\n    const items = this._getItemCount();\n    const panelHeight = Math.min(items * itemHeight, SELECT_PANEL_MAX_HEIGHT);\n    const scrollContainerHeight = items * itemHeight;\n\n    // The farthest the panel can be scrolled before it hits the bottom\n    const maxScroll = scrollContainerHeight - panelHeight;\n\n    // If no value is selected we open the popup to the first item.\n    let selectedOptionOffset =\n        this.empty ? 0 : this._getOptionIndex(this._selectionModel.selected[0])!;\n\n    selectedOptionOffset += _countGroupLabelsBeforeOption(selectedOptionOffset, this.options,\n        this.optionGroups);\n\n    // We must maintain a scroll buffer so the selected option will be scrolled to the\n    // center of the overlay panel rather than the top.\n    const scrollBuffer = panelHeight / 2;\n    this._scrollTop = this._calculateOverlayScroll(selectedOptionOffset, scrollBuffer, maxScroll);\n    this._offsetY = this._calculateOverlayOffsetY(selectedOptionOffset, scrollBuffer, maxScroll);\n\n    this._checkOverlayWithinViewport(maxScroll);\n  }\n\n  /**\n   * Calculates the scroll position of the select's overlay panel.\n   *\n   * Attempts to center the selected option in the panel. If the option is\n   * too high or too low in the panel to be scrolled to the center, it clamps the\n   * scroll position to the min or max scroll positions respectively.\n   */\n  _calculateOverlayScroll(selectedIndex: number, scrollBuffer: number,\n                          maxScroll: number): number {\n    const itemHeight = this._getItemHeight();\n    const optionOffsetFromScrollTop = itemHeight * selectedIndex;\n    const halfOptionHeight = itemHeight / 2;\n\n    // Starts at the optionOffsetFromScrollTop, which scrolls the option to the top of the\n    // scroll container, then subtracts the scroll buffer to scroll the option down to\n    // the center of the overlay panel. Half the option height must be re-added to the\n    // scrollTop so the option is centered based on its middle, not its top edge.\n    const optimalScrollPosition = optionOffsetFromScrollTop - scrollBuffer + halfOptionHeight;\n    return Math.min(Math.max(0, optimalScrollPosition), maxScroll);\n  }\n\n  /** Returns the aria-label of the select component. */\n  _getAriaLabel(): string | null {\n    // If an ariaLabelledby value has been set by the consumer, the select should not overwrite the\n    // `aria-labelledby` value by setting the ariaLabel to the placeholder.\n    return this.ariaLabelledby ? null : this.ariaLabel || this.placeholder;\n  }\n\n  /** Returns the aria-labelledby of the select component. */\n  _getAriaLabelledby(): string | null {\n    if (this.ariaLabelledby) {\n      return this.ariaLabelledby;\n    }\n\n    // Note: we use `_getAriaLabel` here, because we want to check whether there's a\n    // computed label. `this.ariaLabel` is only the user-specified label.\n    if (!this._parentFormField || this._getAriaLabel()) {\n      return null;\n    }\n\n    return this._parentFormField._labelId || null;\n  }\n\n  /** Determines the `aria-activedescendant` to be set on the host. */\n  _getAriaActiveDescendant(): string | null {\n    if (this.panelOpen && this._keyManager && this._keyManager.activeItem) {\n      return this._keyManager.activeItem.id;\n    }\n\n    return null;\n  }\n\n  /**\n   * Sets the x-offset of the overlay panel in relation to the trigger's top start corner.\n   * This must be adjusted to align the selected option text over the trigger text when\n   * the panel opens. Will change based on LTR or RTL text direction. Note that the offset\n   * can't be calculated until the panel has been attached, because we need to know the\n   * content width in order to constrain the panel within the viewport.\n   */\n  private _calculateOverlayOffsetX(): void {\n    const overlayRect = this.overlayDir.overlayRef.overlayElement.getBoundingClientRect();\n    const viewportSize = this._viewportRuler.getViewportSize();\n    const isRtl = this._isRtl();\n    const paddingWidth = this.multiple ? SELECT_MULTIPLE_PANEL_PADDING_X + SELECT_PANEL_PADDING_X :\n                                         SELECT_PANEL_PADDING_X * 2;\n    let offsetX: number;\n\n    // Adjust the offset, depending on the option padding.\n    if (this.multiple) {\n      offsetX = SELECT_MULTIPLE_PANEL_PADDING_X;\n    } else {\n      let selected = this._selectionModel.selected[0] || this.options.first;\n      offsetX = selected && selected.group ? SELECT_PANEL_INDENT_PADDING_X : SELECT_PANEL_PADDING_X;\n    }\n\n    // Invert the offset in LTR.\n    if (!isRtl) {\n      offsetX *= -1;\n    }\n\n    // Determine how much the select overflows on each side.\n    const leftOverflow = 0 - (overlayRect.left + offsetX - (isRtl ? paddingWidth : 0));\n    const rightOverflow = overlayRect.right + offsetX - viewportSize.width\n                          + (isRtl ? 0 : paddingWidth);\n\n    // If the element overflows on either side, reduce the offset to allow it to fit.\n    if (leftOverflow > 0) {\n      offsetX += leftOverflow + SELECT_PANEL_VIEWPORT_PADDING;\n    } else if (rightOverflow > 0) {\n      offsetX -= rightOverflow + SELECT_PANEL_VIEWPORT_PADDING;\n    }\n\n    // Set the offset directly in order to avoid having to go through change detection and\n    // potentially triggering \"changed after it was checked\" errors. Round the value to avoid\n    // blurry content in some browsers.\n    this.overlayDir.offsetX = Math.round(offsetX);\n    this.overlayDir.overlayRef.updatePosition();\n  }\n\n  /**\n   * Calculates the y-offset of the select's overlay panel in relation to the\n   * top start corner of the trigger. It has to be adjusted in order for the\n   * selected option to be aligned over the trigger when the panel opens.\n   */\n  private _calculateOverlayOffsetY(selectedIndex: number, scrollBuffer: number,\n                                  maxScroll: number): number {\n    const itemHeight = this._getItemHeight();\n    const optionHeightAdjustment = (itemHeight - this._triggerRect.height) / 2;\n    const maxOptionsDisplayed = Math.floor(SELECT_PANEL_MAX_HEIGHT / itemHeight);\n    let optionOffsetFromPanelTop: number;\n\n    // Disable offset if requested by user by returning 0 as value to offset\n    if (this._disableOptionCentering) {\n      return 0;\n    }\n\n    if (this._scrollTop === 0) {\n      optionOffsetFromPanelTop = selectedIndex * itemHeight;\n    } else if (this._scrollTop === maxScroll) {\n      const firstDisplayedIndex = this._getItemCount() - maxOptionsDisplayed;\n      const selectedDisplayIndex = selectedIndex - firstDisplayedIndex;\n\n      // The first item is partially out of the viewport. Therefore we need to calculate what\n      // portion of it is shown in the viewport and account for it in our offset.\n      let partialItemHeight =\n          itemHeight - (this._getItemCount() * itemHeight - SELECT_PANEL_MAX_HEIGHT) % itemHeight;\n\n      // Because the panel height is longer than the height of the options alone,\n      // there is always extra padding at the top or bottom of the panel. When\n      // scrolled to the very bottom, this padding is at the top of the panel and\n      // must be added to the offset.\n      optionOffsetFromPanelTop = selectedDisplayIndex * itemHeight + partialItemHeight;\n    } else {\n      // If the option was scrolled to the middle of the panel using a scroll buffer,\n      // its offset will be the scroll buffer minus the half height that was added to\n      // center it.\n      optionOffsetFromPanelTop = scrollBuffer - itemHeight / 2;\n    }\n\n    // The final offset is the option's offset from the top, adjusted for the height difference,\n    // multiplied by -1 to ensure that the overlay moves in the correct direction up the page.\n    // The value is rounded to prevent some browsers from blurring the content.\n    return Math.round(optionOffsetFromPanelTop * -1 - optionHeightAdjustment);\n  }\n\n  /**\n   * Checks that the attempted overlay position will fit within the viewport.\n   * If it will not fit, tries to adjust the scroll position and the associated\n   * y-offset so the panel can open fully on-screen. If it still won't fit,\n   * sets the offset back to 0 to allow the fallback position to take over.\n   */\n  private _checkOverlayWithinViewport(maxScroll: number): void {\n    const itemHeight = this._getItemHeight();\n    const viewportSize = this._viewportRuler.getViewportSize();\n\n    const topSpaceAvailable = this._triggerRect.top - SELECT_PANEL_VIEWPORT_PADDING;\n    const bottomSpaceAvailable =\n        viewportSize.height - this._triggerRect.bottom - SELECT_PANEL_VIEWPORT_PADDING;\n\n    const panelHeightTop = Math.abs(this._offsetY);\n    const totalPanelHeight =\n        Math.min(this._getItemCount() * itemHeight, SELECT_PANEL_MAX_HEIGHT);\n    const panelHeightBottom = totalPanelHeight - panelHeightTop - this._triggerRect.height;\n\n    if (panelHeightBottom > bottomSpaceAvailable) {\n      this._adjustPanelUp(panelHeightBottom, bottomSpaceAvailable);\n    } else if (panelHeightTop > topSpaceAvailable) {\n     this._adjustPanelDown(panelHeightTop, topSpaceAvailable, maxScroll);\n    } else {\n      this._transformOrigin = this._getOriginBasedOnOption();\n    }\n  }\n\n  /** Adjusts the overlay panel up to fit in the viewport. */\n  private _adjustPanelUp(panelHeightBottom: number, bottomSpaceAvailable: number) {\n    // Browsers ignore fractional scroll offsets, so we need to round.\n    const distanceBelowViewport = Math.round(panelHeightBottom - bottomSpaceAvailable);\n\n    // Scrolls the panel up by the distance it was extending past the boundary, then\n    // adjusts the offset by that amount to move the panel up into the viewport.\n    this._scrollTop -= distanceBelowViewport;\n    this._offsetY -= distanceBelowViewport;\n    this._transformOrigin = this._getOriginBasedOnOption();\n\n    // If the panel is scrolled to the very top, it won't be able to fit the panel\n    // by scrolling, so set the offset to 0 to allow the fallback position to take\n    // effect.\n    if (this._scrollTop <= 0) {\n      this._scrollTop = 0;\n      this._offsetY = 0;\n      this._transformOrigin = `50% bottom 0px`;\n    }\n  }\n\n  /** Adjusts the overlay panel down to fit in the viewport. */\n  private _adjustPanelDown(panelHeightTop: number, topSpaceAvailable: number,\n                           maxScroll: number) {\n    // Browsers ignore fractional scroll offsets, so we need to round.\n    const distanceAboveViewport = Math.round(panelHeightTop - topSpaceAvailable);\n\n    // Scrolls the panel down by the distance it was extending past the boundary, then\n    // adjusts the offset by that amount to move the panel down into the viewport.\n    this._scrollTop += distanceAboveViewport;\n    this._offsetY += distanceAboveViewport;\n    this._transformOrigin = this._getOriginBasedOnOption();\n\n    // If the panel is scrolled to the very bottom, it won't be able to fit the\n    // panel by scrolling, so set the offset to 0 to allow the fallback position\n    // to take effect.\n    if (this._scrollTop >= maxScroll) {\n      this._scrollTop = maxScroll;\n      this._offsetY = 0;\n      this._transformOrigin = `50% top 0px`;\n      return;\n    }\n  }\n\n  /** Sets the transform origin point based on the selected option. */\n  private _getOriginBasedOnOption(): string {\n    const itemHeight = this._getItemHeight();\n    const optionHeightAdjustment = (itemHeight - this._triggerRect.height) / 2;\n    const originY = Math.abs(this._offsetY) - optionHeightAdjustment + itemHeight / 2;\n    return `50% ${originY}px 0px`;\n  }\n\n  /** Calculates the amount of items in the select. This includes options and group labels. */\n  private _getItemCount(): number {\n    return this.options.length + this.optionGroups.length;\n  }\n\n  /** Calculates the height of the select's options. */\n  private _getItemHeight(): number {\n    return this._triggerFontSize * SELECT_ITEM_HEIGHT_EM;\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  setDescribedByIds(ids: string[]) {\n    this._ariaDescribedby = ids.join(' ');\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  onContainerClick() {\n    this.focus();\n    this.open();\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  get shouldLabelFloat(): boolean {\n    return this._panelOpen || !this.empty;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {AnimationEvent} from '@angular/animations';\nimport {AriaDescriber, FocusMonitor} from '@angular/cdk/a11y';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {ESCAPE} from '@angular/cdk/keycodes';\nimport {BreakpointObserver, Breakpoints, BreakpointState} from '@angular/cdk/layout';\nimport {\n  FlexibleConnectedPositionStrategy,\n  HorizontalConnectionPos,\n  OriginConnectionPosition,\n  Overlay,\n  OverlayConnectionPosition,\n  OverlayRef,\n  ScrollDispatcher,\n  ScrollStrategy,\n  VerticalConnectionPos,\n} from '@angular/cdk/overlay';\nimport {Platform} from '@angular/cdk/platform';\nimport {ComponentPortal} from '@angular/cdk/portal';\nimport {take, takeUntil} from 'rxjs/operators';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  Directive,\n  ElementRef,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  ViewContainerRef,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {Subject, Observable} from 'rxjs';\nimport {matTooltipAnimations} from './tooltip-animations';\n\n\nexport type TooltipPosition = 'left' | 'right' | 'above' | 'below' | 'before' | 'after';\n\n/** Time in ms to throttle repositioning after scroll events. */\nexport const SCROLL_THROTTLE_MS = 20;\n\n/** CSS class that will be attached to the overlay panel. */\nexport const TOOLTIP_PANEL_CLASS = 'mat-tooltip-panel';\n\n/** Creates an error to be thrown if the user supplied an invalid tooltip position. */\nexport function getMatTooltipInvalidPositionError(position: string) {\n  return Error(`Tooltip position \"${position}\" is invalid.`);\n}\n\n/** Injection token that determines the scroll handling while a tooltip is visible. */\nexport const MAT_TOOLTIP_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mat-tooltip-scroll-strategy');\n\n/** @docs-private */\nexport function MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY(overlay: Overlay): () => ScrollStrategy {\n  return () => overlay.scrollStrategies.reposition({scrollThrottle: SCROLL_THROTTLE_MS});\n}\n\n/** @docs-private */\nexport const MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY_PROVIDER = {\n  provide: MAT_TOOLTIP_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY,\n};\n\n/** Default `matTooltip` options that can be overridden. */\nexport interface MatTooltipDefaultOptions {\n  showDelay: number;\n  hideDelay: number;\n  touchendHideDelay: number;\n}\n\n/** Injection token to be used to override the default options for `matTooltip`. */\nexport const MAT_TOOLTIP_DEFAULT_OPTIONS =\n    new InjectionToken<MatTooltipDefaultOptions>('mat-tooltip-default-options', {\n      providedIn: 'root',\n      factory: MAT_TOOLTIP_DEFAULT_OPTIONS_FACTORY\n    });\n\nexport function MAT_TOOLTIP_DEFAULT_OPTIONS_FACTORY(): MatTooltipDefaultOptions {\n  return {\n    showDelay: 0,\n    hideDelay: 0,\n    touchendHideDelay: 1500,\n  };\n}\n\n/**\n * Directive that attaches a material design tooltip to the host element. Animates the showing and\n * hiding of a tooltip provided position (defaults to below the element).\n *\n * https://material.google.com/components/tooltips.html\n */\n@Directive({\n  selector: '[matTooltip]',\n  exportAs: 'matTooltip',\n  host: {\n    '(longpress)': 'show()',\n    '(keydown)': '_handleKeydown($event)',\n    '(touchend)': '_handleTouchend()',\n  },\n})\nexport class MatTooltip implements OnDestroy {\n  _overlayRef: OverlayRef | null;\n  _tooltipInstance: TooltipComponent | null;\n\n  private _portal: ComponentPortal<TooltipComponent>;\n  private _position: TooltipPosition = 'below';\n  private _disabled: boolean = false;\n  private _tooltipClass: string|string[]|Set<string>|{[key: string]: any};\n\n  /** Allows the user to define the position of the tooltip relative to the parent element */\n  @Input('matTooltipPosition')\n  get position(): TooltipPosition { return this._position; }\n  set position(value: TooltipPosition) {\n    if (value !== this._position) {\n      this._position = value;\n\n      if (this._overlayRef) {\n        this._updatePosition();\n\n        if (this._tooltipInstance) {\n          this._tooltipInstance!.show(0);\n        }\n\n        this._overlayRef.updatePosition();\n      }\n    }\n  }\n\n  /** Disables the display of the tooltip. */\n  @Input('matTooltipDisabled')\n  get disabled(): boolean { return this._disabled; }\n  set disabled(value) {\n    this._disabled = coerceBooleanProperty(value);\n\n    // If tooltip is disabled, hide immediately.\n    if (this._disabled) {\n      this.hide(0);\n    }\n  }\n\n  /** The default delay in ms before showing the tooltip after show is called */\n  @Input('matTooltipShowDelay') showDelay = this._defaultOptions.showDelay;\n\n  /** The default delay in ms before hiding the tooltip after hide is called */\n  @Input('matTooltipHideDelay') hideDelay = this._defaultOptions.hideDelay;\n\n  private _message = '';\n\n  /** The message to be displayed in the tooltip */\n  @Input('matTooltip')\n  get message() { return this._message; }\n  set message(value: string) {\n    this._ariaDescriber.removeDescription(this._elementRef.nativeElement, this._message);\n\n    // If the message is not a string (e.g. number), convert it to a string and trim it.\n    this._message = value != null ? `${value}`.trim() : '';\n\n    if (!this._message && this._isTooltipVisible()) {\n      this.hide(0);\n    } else {\n      this._updateTooltipMessage();\n      this._ariaDescriber.describe(this._elementRef.nativeElement, this.message);\n    }\n  }\n\n  /** Classes to be passed to the tooltip. Supports the same syntax as `ngClass`. */\n  @Input('matTooltipClass')\n  get tooltipClass() { return this._tooltipClass; }\n  set tooltipClass(value: string|string[]|Set<string>|{[key: string]: any}) {\n    this._tooltipClass = value;\n    if (this._tooltipInstance) {\n      this._setTooltipClass(this._tooltipClass);\n    }\n  }\n\n  private _manualListeners = new Map<string, Function>();\n\n  /** Emits when the component is destroyed. */\n  private readonly _destroyed = new Subject<void>();\n\n  constructor(\n    private _overlay: Overlay,\n    private _elementRef: ElementRef,\n    private _scrollDispatcher: ScrollDispatcher,\n    private _viewContainerRef: ViewContainerRef,\n    private _ngZone: NgZone,\n    private _platform: Platform,\n    private _ariaDescriber: AriaDescriber,\n    private _focusMonitor: FocusMonitor,\n    @Inject(MAT_TOOLTIP_SCROLL_STRATEGY) private _scrollStrategy,\n    @Optional() private _dir: Directionality,\n    @Optional() @Inject(MAT_TOOLTIP_DEFAULT_OPTIONS)\n      private _defaultOptions: MatTooltipDefaultOptions) {\n\n    const element: HTMLElement = _elementRef.nativeElement;\n\n    // The mouse events shouldn't be bound on iOS devices, because\n    // they can prevent the first tap from firing its click event.\n    if (!_platform.IOS) {\n      this._manualListeners.set('mouseenter', () => this.show());\n      this._manualListeners.set('mouseleave', () => this.hide());\n\n      this._manualListeners\n        .forEach((listener, event) => _elementRef.nativeElement.addEventListener(event, listener));\n    } else if (element.nodeName === 'INPUT' || element.nodeName === 'TEXTAREA') {\n      // When we bind a gesture event on an element (in this case `longpress`), HammerJS\n      // will add some inline styles by default, including `user-select: none`. This is\n      // problematic on iOS, because it will prevent users from typing in inputs. If\n      // we're on iOS and the tooltip is attached on an input or textarea, we clear\n      // the `user-select` to avoid these issues.\n      element.style.webkitUserSelect = element.style.userSelect = '';\n    }\n\n    _focusMonitor.monitor(element).pipe(takeUntil(this._destroyed)).subscribe(origin => {\n      // Note that the focus monitor runs outside the Angular zone.\n      if (!origin) {\n        _ngZone.run(() => this.hide(0));\n      } else if (origin === 'keyboard') {\n        _ngZone.run(() => this.show());\n      }\n    });\n  }\n\n  /**\n   * Dispose the tooltip when destroyed.\n   */\n  ngOnDestroy() {\n    if (this._overlayRef) {\n      this._overlayRef.dispose();\n      this._tooltipInstance = null;\n    }\n\n    // Clean up the event listeners set in the constructor\n    if (!this._platform.IOS) {\n      this._manualListeners.forEach((listener, event) =>\n        this._elementRef.nativeElement.removeEventListener(event, listener));\n\n      this._manualListeners.clear();\n    }\n\n    this._destroyed.next();\n    this._destroyed.complete();\n\n    this._ariaDescriber.removeDescription(this._elementRef.nativeElement, this.message);\n    this._focusMonitor.stopMonitoring(this._elementRef.nativeElement);\n  }\n\n  /** Shows the tooltip after the delay in ms, defaults to tooltip-delay-show or 0ms if no input */\n  show(delay: number = this.showDelay): void {\n    if (this.disabled || !this.message) { return; }\n\n    const overlayRef = this._createOverlay();\n\n    this._detach();\n    this._portal = this._portal || new ComponentPortal(TooltipComponent, this._viewContainerRef);\n    this._tooltipInstance = overlayRef.attach(this._portal).instance;\n    this._tooltipInstance.afterHidden()\n      .pipe(takeUntil(this._destroyed))\n      .subscribe(() => this._detach());\n    this._setTooltipClass(this._tooltipClass);\n    this._updateTooltipMessage();\n    this._tooltipInstance!.show(delay);\n  }\n\n  /** Hides the tooltip after the delay in ms, defaults to tooltip-delay-hide or 0ms if no input */\n  hide(delay: number = this.hideDelay): void {\n    if (this._tooltipInstance) {\n      this._tooltipInstance.hide(delay);\n    }\n  }\n\n  /** Shows/hides the tooltip */\n  toggle(): void {\n    this._isTooltipVisible() ? this.hide() : this.show();\n  }\n\n  /** Returns true if the tooltip is currently visible to the user */\n  _isTooltipVisible(): boolean {\n    return !!this._tooltipInstance && this._tooltipInstance.isVisible();\n  }\n\n  /** Handles the keydown events on the host element. */\n  _handleKeydown(e: KeyboardEvent) {\n    if (this._isTooltipVisible() && e.keyCode === ESCAPE) {\n      e.stopPropagation();\n      this.hide(0);\n    }\n  }\n\n  /** Handles the touchend events on the host element. */\n  _handleTouchend() {\n    this.hide(this._defaultOptions.touchendHideDelay);\n  }\n\n  /** Create the overlay config and position strategy */\n  private _createOverlay(): OverlayRef {\n    if (this._overlayRef) {\n      return this._overlayRef;\n    }\n\n    // Create connected position strategy that listens for scroll events to reposition.\n    const strategy = this._overlay.position()\n      .flexibleConnectedTo(this._elementRef)\n      .withTransformOriginOn('.mat-tooltip')\n      .withFlexibleDimensions(false)\n      .withViewportMargin(8);\n\n    const scrollableAncestors = this._scrollDispatcher\n      .getAncestorScrollContainers(this._elementRef);\n\n    strategy.withScrollableContainers(scrollableAncestors);\n\n    strategy.positionChanges.pipe(takeUntil(this._destroyed)).subscribe(change => {\n      if (this._tooltipInstance) {\n        if (change.scrollableViewProperties.isOverlayClipped && this._tooltipInstance.isVisible()) {\n          // After position changes occur and the overlay is clipped by\n          // a parent scrollable then close the tooltip.\n          this._ngZone.run(() => this.hide(0));\n        }\n      }\n    });\n\n    this._overlayRef = this._overlay.create({\n      direction: this._dir,\n      positionStrategy: strategy,\n      panelClass: TOOLTIP_PANEL_CLASS,\n      scrollStrategy: this._scrollStrategy()\n    });\n\n    this._updatePosition();\n\n    this._overlayRef.detachments()\n      .pipe(takeUntil(this._destroyed))\n      .subscribe(() => this._detach());\n\n    return this._overlayRef;\n  }\n\n  /** Detaches the currently-attached tooltip. */\n  private _detach() {\n    if (this._overlayRef && this._overlayRef.hasAttached()) {\n      this._overlayRef.detach();\n    }\n\n    this._tooltipInstance = null;\n  }\n\n  /** Updates the position of the current tooltip. */\n  private _updatePosition() {\n    const position =\n        this._overlayRef!.getConfig().positionStrategy as FlexibleConnectedPositionStrategy;\n    const origin = this._getOrigin();\n    const overlay = this._getOverlayPosition();\n\n    position.withPositions([\n      {...origin.main, ...overlay.main},\n      {...origin.fallback, ...overlay.fallback}\n    ]);\n  }\n\n  /**\n   * Returns the origin position and a fallback position based on the user's position preference.\n   * The fallback position is the inverse of the origin (e.g. `'below' -> 'above'`).\n   */\n  _getOrigin(): {main: OriginConnectionPosition, fallback: OriginConnectionPosition} {\n    const isLtr = !this._dir || this._dir.value == 'ltr';\n    const position = this.position;\n    let originPosition: OriginConnectionPosition;\n\n    if (position == 'above' || position == 'below') {\n      originPosition = {originX: 'center', originY: position == 'above' ? 'top' : 'bottom'};\n    } else if (\n      position == 'before' ||\n      (position == 'left' && isLtr) ||\n      (position == 'right' && !isLtr)) {\n      originPosition = {originX: 'start', originY: 'center'};\n    } else if (\n      position == 'after' ||\n      (position == 'right' && isLtr) ||\n      (position == 'left' && !isLtr)) {\n      originPosition = {originX: 'end', originY: 'center'};\n    } else {\n      throw getMatTooltipInvalidPositionError(position);\n    }\n\n    const {x, y} = this._invertPosition(originPosition.originX, originPosition.originY);\n\n    return {\n      main: originPosition,\n      fallback: {originX: x, originY: y}\n    };\n  }\n\n  /** Returns the overlay position and a fallback position based on the user's preference */\n  _getOverlayPosition(): {main: OverlayConnectionPosition, fallback: OverlayConnectionPosition} {\n    const isLtr = !this._dir || this._dir.value == 'ltr';\n    const position = this.position;\n    let overlayPosition: OverlayConnectionPosition;\n\n    if (position == 'above') {\n      overlayPosition = {overlayX: 'center', overlayY: 'bottom'};\n    } else if (position == 'below') {\n      overlayPosition = {overlayX: 'center', overlayY: 'top'};\n    } else if (\n      position == 'before' ||\n      (position == 'left' && isLtr) ||\n      (position == 'right' && !isLtr)) {\n      overlayPosition = {overlayX: 'end', overlayY: 'center'};\n    } else if (\n      position == 'after' ||\n      (position == 'right' && isLtr) ||\n      (position == 'left' && !isLtr)) {\n      overlayPosition = {overlayX: 'start', overlayY: 'center'};\n    } else {\n      throw getMatTooltipInvalidPositionError(position);\n    }\n\n    const {x, y} = this._invertPosition(overlayPosition.overlayX, overlayPosition.overlayY);\n\n    return {\n      main: overlayPosition,\n      fallback: {overlayX: x, overlayY: y}\n    };\n  }\n\n  /** Updates the tooltip message and repositions the overlay according to the new message length */\n  private _updateTooltipMessage() {\n    // Must wait for the message to be painted to the tooltip so that the overlay can properly\n    // calculate the correct positioning based on the size of the text.\n    if (this._tooltipInstance) {\n      this._tooltipInstance.message = this.message;\n      this._tooltipInstance._markForCheck();\n\n      this._ngZone.onMicrotaskEmpty.asObservable().pipe(\n        take(1),\n        takeUntil(this._destroyed)\n      ).subscribe(() => {\n        if (this._tooltipInstance) {\n          this._overlayRef!.updatePosition();\n        }\n      });\n    }\n  }\n\n  /** Updates the tooltip class */\n  private _setTooltipClass(tooltipClass: string|string[]|Set<string>|{[key: string]: any}) {\n    if (this._tooltipInstance) {\n      this._tooltipInstance.tooltipClass = tooltipClass;\n      this._tooltipInstance._markForCheck();\n    }\n  }\n\n  /** Inverts an overlay position. */\n  private _invertPosition(x: HorizontalConnectionPos, y: VerticalConnectionPos) {\n    if (this.position === 'above' || this.position === 'below') {\n      if (y === 'top') {\n        y = 'bottom';\n      } else if (y === 'bottom') {\n        y = 'top';\n      }\n    } else {\n      if (x === 'end') {\n        x = 'start';\n      } else if (x === 'start') {\n        x = 'end';\n      }\n    }\n\n    return {x, y};\n  }\n}\n\nexport type TooltipVisibility = 'initial' | 'visible' | 'hidden';\n\n/**\n * Internal component that wraps the tooltip's content.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-tooltip-component',\n  templateUrl: 'tooltip.html',\n  styleUrls: ['tooltip.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  animations: [matTooltipAnimations.tooltipState],\n  host: {\n    // Forces the element to have a layout in IE and Edge. This fixes issues where the element\n    // won't be rendered if the animations are disabled or there is no web animations polyfill.\n    '[style.zoom]': '_visibility === \"visible\" ? 1 : null',\n    '(body:click)': 'this._handleBodyInteraction()',\n    'aria-hidden': 'true',\n  }\n})\nexport class TooltipComponent {\n  /** Message to display in the tooltip */\n  message: string;\n\n  /** Classes to be added to the tooltip. Supports the same syntax as `ngClass`. */\n  tooltipClass: string|string[]|Set<string>|{[key: string]: any};\n\n  /** The timeout ID of any current timer set to show the tooltip */\n  _showTimeoutId: number;\n\n  /** The timeout ID of any current timer set to hide the tooltip */\n  _hideTimeoutId: number;\n\n  /** Property watched by the animation framework to show or hide the tooltip */\n  _visibility: TooltipVisibility = 'initial';\n\n  /** Whether interactions on the page should close the tooltip */\n  private _closeOnInteraction: boolean = false;\n\n  /** Subject for notifying that the tooltip has been hidden from the view */\n  private readonly _onHide: Subject<any> = new Subject();\n\n  /** Stream that emits whether the user has a handset-sized display.  */\n  _isHandset: Observable<BreakpointState> = this._breakpointObserver.observe(Breakpoints.Handset);\n\n  constructor(\n    private _changeDetectorRef: ChangeDetectorRef,\n    private _breakpointObserver: BreakpointObserver) {}\n\n  /**\n   * Shows the tooltip with an animation originating from the provided origin\n   * @param delay Amount of milliseconds to the delay showing the tooltip.\n   */\n  show(delay: number): void {\n    // Cancel the delayed hide if it is scheduled\n    if (this._hideTimeoutId) {\n      clearTimeout(this._hideTimeoutId);\n    }\n\n    // Body interactions should cancel the tooltip if there is a delay in showing.\n    this._closeOnInteraction = true;\n    this._showTimeoutId = setTimeout(() => {\n      this._visibility = 'visible';\n\n      // Mark for check so if any parent component has set the\n      // ChangeDetectionStrategy to OnPush it will be checked anyways\n      this._markForCheck();\n    }, delay);\n  }\n\n  /**\n   * Begins the animation to hide the tooltip after the provided delay in ms.\n   * @param delay Amount of milliseconds to delay showing the tooltip.\n   */\n  hide(delay: number): void {\n    // Cancel the delayed show if it is scheduled\n    if (this._showTimeoutId) {\n      clearTimeout(this._showTimeoutId);\n    }\n\n    this._hideTimeoutId = setTimeout(() => {\n      this._visibility = 'hidden';\n\n      // Mark for check so if any parent component has set the\n      // ChangeDetectionStrategy to OnPush it will be checked anyways\n      this._markForCheck();\n    }, delay);\n  }\n\n  /** Returns an observable that notifies when the tooltip has been hidden from view. */\n  afterHidden(): Observable<void> {\n    return this._onHide.asObservable();\n  }\n\n  /** Whether the tooltip is being displayed. */\n  isVisible(): boolean {\n    return this._visibility === 'visible';\n  }\n\n  _animationStart() {\n    this._closeOnInteraction = false;\n  }\n\n  _animationDone(event: AnimationEvent): void {\n    const toState = event.toState as TooltipVisibility;\n\n    if (toState === 'hidden' && !this.isVisible()) {\n      this._onHide.next();\n    }\n\n    if (toState === 'visible' || toState === 'hidden') {\n      this._closeOnInteraction = true;\n    }\n  }\n\n  /**\n   * Interactions on the HTML body should close the tooltip immediately as defined in the\n   * material design spec.\n   * https://material.google.com/components/tooltips.html#tooltips-interaction\n   */\n  _handleBodyInteraction(): void {\n    if (this._closeOnInteraction) {\n      this.hide(0);\n    }\n  }\n\n  /**\n   * Marks that the tooltip needs to be checked in the next change detection run.\n   * Mainly used for rendering the initial text before positioning a tooltip, which\n   * can be problematic in components with OnPush change detection.\n   */\n  _markForCheck(): void {\n    this._changeDetectorRef.markForCheck();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {TemplatePortal} from '@angular/cdk/portal';\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  ContentChild,\n  Input,\n  OnChanges,\n  OnDestroy,\n  OnInit,\n  SimpleChanges,\n  TemplateRef,\n  ViewChild,\n  ViewContainerRef,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {CanDisable, mixinDisabled} from '@angular/material/core';\nimport {Subject} from 'rxjs';\nimport {MatTabLabel} from './tab-label';\nimport {MatTabContent} from './tab-content';\n\n\n// Boilerplate for applying mixins to MatTab.\n/** @docs-private */\nexport class MatTabBase {}\nexport const _MatTabMixinBase = mixinDisabled(MatTabBase);\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-tab',\n  templateUrl: 'tab.html',\n  inputs: ['disabled'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matTab',\n})\nexport class MatTab extends _MatTabMixinBase implements OnInit, CanDisable, OnChanges, OnDestroy {\n  /** Content for the tab label given by `<ng-template mat-tab-label>`. */\n  @ContentChild(MatTabLabel) templateLabel: MatTabLabel;\n\n  /**\n   * Template provided in the tab content that will be used if present, used to enable lazy-loading\n   */\n  @ContentChild(MatTabContent, {read: TemplateRef}) _explicitContent: TemplateRef<any>;\n\n  /** Template inside the MatTab view that contains an `<ng-content>`. */\n  @ViewChild(TemplateRef) _implicitContent: TemplateRef<any>;\n\n  /** Plain text label for the tab, used when there is no template label. */\n  @Input('label') textLabel: string = '';\n\n  /** Aria label for the tab. */\n  @Input('aria-label') ariaLabel: string;\n\n  /**\n   * Reference to the element that the tab is labelled by.\n   * Will be cleared if `aria-label` is set at the same time.\n   */\n  @Input('aria-labelledby') ariaLabelledby: string;\n\n  /** Portal that will be the hosted content of the tab */\n  private _contentPortal: TemplatePortal | null = null;\n\n  /** @docs-private */\n  get content(): TemplatePortal | null {\n    return this._contentPortal;\n  }\n\n  /** Emits whenever the label changes. */\n  readonly _labelChange = new Subject<void>();\n\n  /** Emits whenever the disable changes */\n  readonly _disableChange = new Subject<void>();\n\n  /**\n   * The relatively indexed position where 0 represents the center, negative is left, and positive\n   * represents the right.\n   */\n  position: number | null = null;\n\n  /**\n   * The initial relatively index origin of the tab if it was created and selected after there\n   * was already a selected tab. Provides context of what position the tab should originate from.\n   */\n  origin: number | null = null;\n\n  /**\n   * Whether the tab is currently active.\n   */\n  isActive = false;\n\n  constructor(private _viewContainerRef: ViewContainerRef) {\n    super();\n  }\n\n  ngOnChanges(changes: SimpleChanges): void {\n    if (changes.hasOwnProperty('textLabel')) {\n      this._labelChange.next();\n    }\n\n    if (changes.hasOwnProperty('disabled')) {\n      this._disableChange.next();\n    }\n  }\n\n  ngOnDestroy(): void {\n    this._disableChange.complete();\n    this._labelChange.complete();\n  }\n\n  ngOnInit(): void {\n    this._contentPortal = new TemplatePortal(\n        this._explicitContent || this._implicitContent, this._viewContainerRef);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/** Animations used by the Material tabs. */\nexport const matTabsAnimations: {\n  readonly translateTab: AnimationTriggerMetadata;\n} = {\n  /** Animation translates a tab along the X axis. */\n  translateTab: trigger('translateTab', [\n    // Note: transitions to `none` instead of 0, because some browsers might blur the content.\n    state('center, void, left-origin-center, right-origin-center', style({transform: 'none'})),\n    state('left', style({transform: 'translate3d(-100%, 0, 0)'})),\n    state('right', style({transform: 'translate3d(100%, 0, 0)'})),\n    transition('* => left, * => right, left => center, right => center',\n        animate('500ms cubic-bezier(0.35, 0, 0.25, 1)')),\n    transition('void => left-origin-center', [\n      style({transform: 'translate3d(-100%, 0, 0)'}),\n      animate('500ms cubic-bezier(0.35, 0, 0.25, 1)')\n    ]),\n    transition('void => right-origin-center', [\n      style({transform: 'translate3d(100%, 0, 0)'}),\n      animate('500ms cubic-bezier(0.35, 0, 0.25, 1)')\n    ])\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  Input,\n  Inject,\n  Output,\n  EventEmitter,\n  OnDestroy,\n  OnInit,\n  ElementRef,\n  Directive,\n  Optional,\n  ViewEncapsulation,\n  ChangeDetectionStrategy,\n  ComponentFactoryResolver,\n  ViewContainerRef,\n  forwardRef,\n  ViewChild,\n} from '@angular/core';\nimport {AnimationEvent} from '@angular/animations';\nimport {TemplatePortal, CdkPortalOutlet, PortalHostDirective} from '@angular/cdk/portal';\nimport {Directionality, Direction} from '@angular/cdk/bidi';\nimport {Subscription} from 'rxjs';\nimport {matTabsAnimations} from './tabs-animations';\nimport {startWith} from 'rxjs/operators';\n\n/**\n * These position states are used internally as animation states for the tab body. Setting the\n * position state to left, right, or center will transition the tab body from its current\n * position to its respective state. If there is not current position (void, in the case of a new\n * tab body), then there will be no transition animation to its state.\n *\n * In the case of a new tab body that should immediately be centered with an animating transition,\n * then left-origin-center or right-origin-center can be used, which will use left or right as its\n * psuedo-prior state.\n */\nexport type MatTabBodyPositionState =\n    'left' | 'center' | 'right' | 'left-origin-center' | 'right-origin-center';\n\n/**\n * The origin state is an internally used state that is set on a new tab body indicating if it\n * began to the left or right of the prior selected index. For example, if the selected index was\n * set to 1, and a new tab is created and selected at index 2, then the tab body would have an\n * origin of right because its index was greater than the prior selected index.\n */\nexport type MatTabBodyOriginState = 'left' | 'right';\n\n/**\n * The portal host directive for the contents of the tab.\n * @docs-private\n */\n@Directive({\n  selector: '[matTabBodyHost]'\n})\nexport class MatTabBodyPortal extends CdkPortalOutlet implements OnInit, OnDestroy {\n  /** Subscription to events for when the tab body begins centering. */\n  private _centeringSub = Subscription.EMPTY;\n  /** Subscription to events for when the tab body finishes leaving from center position. */\n  private _leavingSub = Subscription.EMPTY;\n\n  constructor(\n    componentFactoryResolver: ComponentFactoryResolver,\n    viewContainerRef: ViewContainerRef,\n    @Inject(forwardRef(() => MatTabBody)) private _host: MatTabBody) {\n      super(componentFactoryResolver, viewContainerRef);\n  }\n\n  /** Set initial visibility or set up subscription for changing visibility. */\n  ngOnInit(): void {\n    super.ngOnInit();\n\n    this._centeringSub = this._host._beforeCentering\n      .pipe(startWith(this._host._isCenterPosition(this._host._position)))\n      .subscribe((isCentering: boolean) => {\n        if (isCentering && !this.hasAttached()) {\n          this.attach(this._host._content);\n        }\n      });\n\n    this._leavingSub = this._host._afterLeavingCenter.subscribe(() => {\n      this.detach();\n    });\n  }\n\n  /** Clean up centering subscription. */\n  ngOnDestroy(): void {\n    super.ngOnDestroy();\n    this._centeringSub.unsubscribe();\n    this._leavingSub.unsubscribe();\n  }\n}\n\n/**\n * Wrapper for the contents of a tab.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-tab-body',\n  templateUrl: 'tab-body.html',\n  styleUrls: ['tab-body.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  animations: [matTabsAnimations.translateTab],\n  host: {\n    'class': 'mat-tab-body',\n  },\n})\nexport class MatTabBody implements OnInit {\n  /** Event emitted when the tab begins to animate towards the center as the active tab. */\n  @Output() readonly _onCentering: EventEmitter<number> = new EventEmitter<number>();\n\n  /** Event emitted before the centering of the tab begins. */\n  @Output() readonly _beforeCentering: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n  /** Event emitted before the centering of the tab begins. */\n  @Output() readonly _afterLeavingCenter: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n  /** Event emitted when the tab completes its animation towards the center. */\n  @Output() readonly _onCentered: EventEmitter<void> = new EventEmitter<void>(true);\n\n   /** The portal host inside of this container into which the tab body content will be loaded. */\n  @ViewChild(PortalHostDirective) _portalHost: PortalHostDirective;\n\n  /** The tab body content to display. */\n  @Input('content') _content: TemplatePortal;\n\n  /** The shifted index position of the tab body, where zero represents the active center tab. */\n  @Input()\n  set position(position: number) {\n    if (position < 0) {\n      this._position = this._getLayoutDirection() == 'ltr' ? 'left' : 'right';\n    } else if (position > 0) {\n      this._position = this._getLayoutDirection() == 'ltr' ? 'right' : 'left';\n    } else {\n      this._position = 'center';\n    }\n  }\n  _position: MatTabBodyPositionState;\n\n  /** The origin position from which this tab should appear when it is centered into view. */\n  @Input()\n  set origin(origin: number) {\n    if (origin == null) { return; }\n\n    const dir = this._getLayoutDirection();\n    if ((dir == 'ltr' && origin <= 0) || (dir == 'rtl' && origin > 0)) {\n      this._origin = 'left';\n    } else {\n      this._origin = 'right';\n    }\n  }\n  _origin: MatTabBodyOriginState;\n\n  constructor(private _elementRef: ElementRef,\n              @Optional() private _dir: Directionality) { }\n\n  /**\n   * After initialized, check if the content is centered and has an origin. If so, set the\n   * special position states that transition the tab from the left or right before centering.\n   */\n  ngOnInit() {\n    if (this._position == 'center' && this._origin) {\n      this._position = this._origin == 'left' ? 'left-origin-center' : 'right-origin-center';\n    }\n  }\n\n  _onTranslateTabStarted(e: AnimationEvent): void {\n    const isCentering = this._isCenterPosition(e.toState);\n    this._beforeCentering.emit(isCentering);\n    if (isCentering) {\n      this._onCentering.emit(this._elementRef.nativeElement.clientHeight);\n    }\n  }\n\n  _onTranslateTabComplete(e: AnimationEvent): void {\n    // If the transition to the center is complete, emit an event.\n    if (this._isCenterPosition(e.toState) && this._isCenterPosition(this._position)) {\n      this._onCentered.emit();\n    }\n\n    if (this._isCenterPosition(e.fromState) && !this._isCenterPosition(this._position)) {\n      this._afterLeavingCenter.emit();\n    }\n  }\n\n  /** The text direction of the containing app. */\n  _getLayoutDirection(): Direction {\n    return this._dir && this._dir.value === 'rtl' ? 'rtl' : 'ltr';\n  }\n\n  /** Whether the provided position state is considered center, regardless of origin. */\n  _isCenterPosition(position: MatTabBodyPositionState|string): boolean {\n    return position == 'center' ||\n        position == 'left-origin-center' ||\n        position == 'right-origin-center';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, ElementRef} from '@angular/core';\nimport {CanDisable, mixinDisabled} from '@angular/material/core';\n\n// Boilerplate for applying mixins to MatTabLabelWrapper.\n/** @docs-private */\nexport class MatTabLabelWrapperBase {}\nexport const _MatTabLabelWrapperMixinBase = mixinDisabled(MatTabLabelWrapperBase);\n\n/**\n * Used in the `mat-tab-group` view to display tab labels.\n * @docs-private\n */\n@Directive({\n  selector: '[matTabLabelWrapper]',\n  inputs: ['disabled'],\n  host: {\n    '[class.mat-tab-disabled]': 'disabled'\n  }\n})\nexport class MatTabLabelWrapper extends _MatTabLabelWrapperMixinBase implements CanDisable {\n  constructor(public elementRef: ElementRef) {\n    super();\n  }\n\n  /** Sets focus on the wrapper element */\n  focus(): void {\n    this.elementRef.nativeElement.focus();\n  }\n\n  getOffsetLeft(): number {\n    return this.elementRef.nativeElement.offsetLeft;\n  }\n\n  getOffsetWidth(): number {\n    return this.elementRef.nativeElement.offsetWidth;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Direction, Directionality} from '@angular/cdk/bidi';\nimport {coerceNumberProperty} from '@angular/cdk/coercion';\nimport {END, ENTER, HOME, SPACE} from '@angular/cdk/keycodes';\nimport {ViewportRuler} from '@angular/cdk/scrolling';\nimport {\n  AfterContentChecked,\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  ElementRef,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  Optional,\n  Output,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {CanDisableRipple, mixinDisableRipple} from '@angular/material/core';\nimport {merge, of as observableOf, Subscription} from 'rxjs';\nimport {MatInkBar} from './ink-bar';\nimport {MatTabLabelWrapper} from './tab-label-wrapper';\nimport {FocusKeyManager} from '@angular/cdk/a11y';\n\n\n/**\n * The directions that scrolling can go in when the header's tabs exceed the header width. 'After'\n * will scroll the header towards the end of the tabs list and 'before' will scroll towards the\n * beginning of the list.\n */\nexport type ScrollDirection = 'after' | 'before';\n\n/**\n * The distance in pixels that will be overshot when scrolling a tab label into view. This helps\n * provide a small affordance to the label next to it.\n */\nconst EXAGGERATED_OVERSCROLL = 60;\n\n// Boilerplate for applying mixins to MatTabHeader.\n/** @docs-private */\nexport class MatTabHeaderBase {}\nexport const _MatTabHeaderMixinBase = mixinDisableRipple(MatTabHeaderBase);\n\n/**\n * The header of the tab group which displays a list of all the tabs in the tab group. Includes\n * an ink bar that follows the currently selected tab. When the tabs list's width exceeds the\n * width of the header container, then arrows will be displayed to allow the user to scroll\n * left and right across the header.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-tab-header',\n  templateUrl: 'tab-header.html',\n  styleUrls: ['tab-header.css'],\n  inputs: ['disableRipple'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {\n    'class': 'mat-tab-header',\n    '[class.mat-tab-header-pagination-controls-enabled]': '_showPaginationControls',\n    '[class.mat-tab-header-rtl]': \"_getLayoutDirection() == 'rtl'\",\n  },\n})\nexport class MatTabHeader extends _MatTabHeaderMixinBase\n    implements AfterContentChecked, AfterContentInit, OnDestroy, CanDisableRipple {\n\n  @ContentChildren(MatTabLabelWrapper) _labelWrappers: QueryList<MatTabLabelWrapper>;\n  @ViewChild(MatInkBar) _inkBar: MatInkBar;\n  @ViewChild('tabListContainer') _tabListContainer: ElementRef;\n  @ViewChild('tabList') _tabList: ElementRef;\n\n  /** The distance in pixels that the tab labels should be translated to the left. */\n  private _scrollDistance = 0;\n\n  /** Whether the header should scroll to the selected index after the view has been checked. */\n  private _selectedIndexChanged = false;\n\n  /** Combines listeners that will re-align the ink bar whenever they're invoked. */\n  private _realignInkBar = Subscription.EMPTY;\n\n  /** Whether the controls for pagination should be displayed */\n  _showPaginationControls = false;\n\n  /** Whether the tab list can be scrolled more towards the end of the tab label list. */\n  _disableScrollAfter = true;\n\n  /** Whether the tab list can be scrolled more towards the beginning of the tab label list. */\n  _disableScrollBefore = true;\n\n  /**\n   * The number of tab labels that are displayed on the header. When this changes, the header\n   * should re-evaluate the scroll position.\n   */\n  private _tabLabelCount: number;\n\n  /** Whether the scroll distance has changed and should be applied after the view is checked. */\n  private _scrollDistanceChanged: boolean;\n\n  /** Used to manage focus between the tabs. */\n  private _keyManager: FocusKeyManager<MatTabLabelWrapper>;\n\n  private _selectedIndex: number = 0;\n\n  /** The index of the active tab. */\n  @Input()\n  get selectedIndex(): number { return this._selectedIndex; }\n  set selectedIndex(value: number) {\n    value = coerceNumberProperty(value);\n    this._selectedIndexChanged = this._selectedIndex != value;\n    this._selectedIndex = value;\n\n    if (this._keyManager) {\n      this._keyManager.updateActiveItemIndex(value);\n    }\n  }\n\n  /** Event emitted when the option is selected. */\n  @Output() readonly selectFocusedIndex = new EventEmitter();\n\n  /** Event emitted when a label is focused. */\n  @Output() readonly indexFocused = new EventEmitter();\n\n  constructor(private _elementRef: ElementRef,\n              private _changeDetectorRef: ChangeDetectorRef,\n              private _viewportRuler: ViewportRuler,\n              @Optional() private _dir: Directionality) {\n    super();\n  }\n\n  ngAfterContentChecked(): void {\n    // If the number of tab labels have changed, check if scrolling should be enabled\n    if (this._tabLabelCount != this._labelWrappers.length) {\n      this._updatePagination();\n      this._tabLabelCount = this._labelWrappers.length;\n      this._changeDetectorRef.markForCheck();\n    }\n\n    // If the selected index has changed, scroll to the label and check if the scrolling controls\n    // should be disabled.\n    if (this._selectedIndexChanged) {\n      this._scrollToLabel(this._selectedIndex);\n      this._checkScrollingControls();\n      this._alignInkBarToSelectedTab();\n      this._selectedIndexChanged = false;\n      this._changeDetectorRef.markForCheck();\n    }\n\n    // If the scroll distance has been changed (tab selected, focused, scroll controls activated),\n    // then translate the header to reflect this.\n    if (this._scrollDistanceChanged) {\n      this._updateTabScrollPosition();\n      this._scrollDistanceChanged = false;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  _handleKeydown(event: KeyboardEvent) {\n    switch (event.keyCode) {\n      case HOME:\n        this._keyManager.setFirstItemActive();\n        event.preventDefault();\n        break;\n      case END:\n        this._keyManager.setLastItemActive();\n        event.preventDefault();\n        break;\n      case ENTER:\n      case SPACE:\n        this.selectFocusedIndex.emit(this.focusIndex);\n        event.preventDefault();\n        break;\n      default:\n        this._keyManager.onKeydown(event);\n    }\n  }\n\n  /**\n   * Aligns the ink bar to the selected tab on load.\n   */\n  ngAfterContentInit() {\n    const dirChange = this._dir ? this._dir.change : observableOf(null);\n    const resize = this._viewportRuler.change(150);\n    const realign = () => {\n      this._updatePagination();\n      this._alignInkBarToSelectedTab();\n    };\n\n    this._keyManager = new FocusKeyManager(this._labelWrappers)\n      .withHorizontalOrientation(this._getLayoutDirection());\n\n    this._keyManager.updateActiveItemIndex(0);\n\n    // Defer the first call in order to allow for slower browsers to lay out the elements.\n    // This helps in cases where the user lands directly on a page with paginated tabs.\n    typeof requestAnimationFrame !== 'undefined' ? requestAnimationFrame(realign) : realign();\n\n    this._realignInkBar = merge(dirChange, resize).subscribe(() => {\n      realign();\n      this._keyManager.withHorizontalOrientation(this._getLayoutDirection());\n    });\n  }\n\n  ngOnDestroy() {\n    this._realignInkBar.unsubscribe();\n  }\n\n  /**\n   * Callback for when the MutationObserver detects that the content has changed.\n   */\n  _onContentChanges() {\n    this._updatePagination();\n    this._alignInkBarToSelectedTab();\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /**\n   * Updating the view whether pagination should be enabled or not\n   */\n  _updatePagination() {\n    this._checkPaginationEnabled();\n    this._checkScrollingControls();\n    this._updateTabScrollPosition();\n  }\n\n  /** Tracks which element has focus; used for keyboard navigation */\n  get focusIndex(): number {\n    return this._keyManager ? this._keyManager.activeItemIndex! : 0;\n  }\n\n  /** When the focus index is set, we must manually send focus to the correct label */\n  set focusIndex(value: number) {\n    if (!this._isValidIndex(value) || this.focusIndex == value || !this._keyManager) { return; }\n\n    this._keyManager.setActiveItem(value);\n    this.indexFocused.emit(value);\n    this._setTabFocus(value);\n  }\n\n  /**\n   * Determines if an index is valid.  If the tabs are not ready yet, we assume that the user is\n   * providing a valid index and return true.\n   */\n  _isValidIndex(index: number): boolean {\n    if (!this._labelWrappers) { return true; }\n\n    const tab = this._labelWrappers ? this._labelWrappers.toArray()[index] : null;\n    return !!tab && !tab.disabled;\n  }\n\n  /**\n   * Sets focus on the HTML element for the label wrapper and scrolls it into the view if\n   * scrolling is enabled.\n   */\n  _setTabFocus(tabIndex: number) {\n    if (this._showPaginationControls) {\n      this._scrollToLabel(tabIndex);\n    }\n\n    if (this._labelWrappers && this._labelWrappers.length) {\n      this._labelWrappers.toArray()[tabIndex].focus();\n\n      // Do not let the browser manage scrolling to focus the element, this will be handled\n      // by using translation. In LTR, the scroll left should be 0. In RTL, the scroll width\n      // should be the full width minus the offset width.\n      const containerEl = this._tabListContainer.nativeElement;\n      const dir = this._getLayoutDirection();\n\n      if (dir == 'ltr') {\n        containerEl.scrollLeft = 0;\n      } else {\n        containerEl.scrollLeft = containerEl.scrollWidth - containerEl.offsetWidth;\n      }\n    }\n  }\n\n  /** The layout direction of the containing app. */\n  _getLayoutDirection(): Direction {\n    return this._dir && this._dir.value === 'rtl' ? 'rtl' : 'ltr';\n  }\n\n  /** Performs the CSS transformation on the tab list that will cause the list to scroll. */\n  _updateTabScrollPosition() {\n    const scrollDistance = this.scrollDistance;\n    const translateX = this._getLayoutDirection() === 'ltr' ? -scrollDistance : scrollDistance;\n\n    this._tabList.nativeElement.style.transform = `translate3d(${translateX}px, 0, 0)`;\n  }\n\n  /** Sets the distance in pixels that the tab header should be transformed in the X-axis. */\n  get scrollDistance(): number { return this._scrollDistance; }\n  set scrollDistance(v: number) {\n    this._scrollDistance = Math.max(0, Math.min(this._getMaxScrollDistance(), v));\n\n    // Mark that the scroll distance has changed so that after the view is checked, the CSS\n    // transformation can move the header.\n    this._scrollDistanceChanged = true;\n    this._checkScrollingControls();\n  }\n\n  /**\n   * Moves the tab list in the 'before' or 'after' direction (towards the beginning of the list or\n   * the end of the list, respectively). The distance to scroll is computed to be a third of the\n   * length of the tab list view window.\n   *\n   * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n   * should be called sparingly.\n   */\n  _scrollHeader(scrollDir: ScrollDirection) {\n    const viewLength = this._tabListContainer.nativeElement.offsetWidth;\n\n    // Move the scroll distance one-third the length of the tab list's viewport.\n    this.scrollDistance += (scrollDir == 'before' ? -1 : 1) * viewLength / 3;\n  }\n\n  /**\n   * Moves the tab list such that the desired tab label (marked by index) is moved into view.\n   *\n   * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n   * should be called sparingly.\n   */\n  _scrollToLabel(labelIndex: number) {\n    const selectedLabel = this._labelWrappers ? this._labelWrappers.toArray()[labelIndex] : null;\n\n    if (!selectedLabel) { return; }\n\n    // The view length is the visible width of the tab labels.\n    const viewLength = this._tabListContainer.nativeElement.offsetWidth;\n\n    let labelBeforePos: number, labelAfterPos: number;\n    if (this._getLayoutDirection() == 'ltr') {\n      labelBeforePos = selectedLabel.getOffsetLeft();\n      labelAfterPos = labelBeforePos + selectedLabel.getOffsetWidth();\n    } else {\n      labelAfterPos = this._tabList.nativeElement.offsetWidth - selectedLabel.getOffsetLeft();\n      labelBeforePos = labelAfterPos - selectedLabel.getOffsetWidth();\n    }\n\n    const beforeVisiblePos = this.scrollDistance;\n    const afterVisiblePos = this.scrollDistance + viewLength;\n\n    if (labelBeforePos < beforeVisiblePos) {\n      // Scroll header to move label to the before direction\n      this.scrollDistance -= beforeVisiblePos - labelBeforePos + EXAGGERATED_OVERSCROLL;\n    } else if (labelAfterPos > afterVisiblePos) {\n      // Scroll header to move label to the after direction\n      this.scrollDistance += labelAfterPos - afterVisiblePos + EXAGGERATED_OVERSCROLL;\n    }\n  }\n\n  /**\n   * Evaluate whether the pagination controls should be displayed. If the scroll width of the\n   * tab list is wider than the size of the header container, then the pagination controls should\n   * be shown.\n   *\n   * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n   * should be called sparingly.\n   */\n  _checkPaginationEnabled() {\n    const isEnabled =\n        this._tabList.nativeElement.scrollWidth > this._elementRef.nativeElement.offsetWidth;\n\n    if (!isEnabled) {\n      this.scrollDistance = 0;\n    }\n\n    if (isEnabled !== this._showPaginationControls) {\n      this._changeDetectorRef.markForCheck();\n    }\n\n    this._showPaginationControls = isEnabled;\n  }\n\n  /**\n   * Evaluate whether the before and after controls should be enabled or disabled.\n   * If the header is at the beginning of the list (scroll distance is equal to 0) then disable the\n   * before button. If the header is at the end of the list (scroll distance is equal to the\n   * maximum distance we can scroll), then disable the after button.\n   *\n   * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n   * should be called sparingly.\n   */\n  _checkScrollingControls() {\n    // Check if the pagination arrows should be activated.\n    this._disableScrollBefore = this.scrollDistance == 0;\n    this._disableScrollAfter = this.scrollDistance == this._getMaxScrollDistance();\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /**\n   * Determines what is the maximum length in pixels that can be set for the scroll distance. This\n   * is equal to the difference in width between the tab list container and tab header container.\n   *\n   * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n   * should be called sparingly.\n   */\n  _getMaxScrollDistance(): number {\n    const lengthOfTabList = this._tabList.nativeElement.scrollWidth;\n    const viewLength = this._tabListContainer.nativeElement.offsetWidth;\n    return (lengthOfTabList - viewLength) || 0;\n  }\n\n  /** Tells the ink-bar to align itself to the current label wrapper */\n  _alignInkBarToSelectedTab(): void {\n    const selectedLabelWrapper = this._labelWrappers && this._labelWrappers.length ?\n        this._labelWrappers.toArray()[this.selectedIndex].elementRef.nativeElement :\n        null;\n\n    this._inkBar.alignToElement(selectedLabelWrapper);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty, coerceNumberProperty} from '@angular/cdk/coercion';\nimport {\n  AfterContentChecked,\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  ElementRef,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  Output,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {\n  CanColor,\n  CanDisableRipple,\n  mixinColor,\n  mixinDisableRipple,\n  ThemePalette\n} from '@angular/material/core';\nimport {merge, Subscription} from 'rxjs';\nimport {MatTab} from './tab';\nimport {MatTabHeader} from './tab-header';\n\n\n/** Used to generate unique ID's for each tab component */\nlet nextId = 0;\n\n/** A simple change event emitted on focus or selection changes. */\nexport class MatTabChangeEvent {\n  /** Index of the currently-selected tab. */\n  index: number;\n  /** Reference to the currently-selected tab. */\n  tab: MatTab;\n}\n\n/** Possible positions for the tab header. */\nexport type MatTabHeaderPosition = 'above' | 'below';\n\n// Boilerplate for applying mixins to MatTabGroup.\n/** @docs-private */\nexport class MatTabGroupBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatTabGroupMixinBase = mixinColor(mixinDisableRipple(MatTabGroupBase), 'primary');\n\n/**\n * Material design tab-group component.  Supports basic tab pairs (label + content) and includes\n * animated ink-bar, keyboard navigation, and screen reader.\n * See: https://material.io/design/components/tabs.html\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-tab-group',\n  exportAs: 'matTabGroup',\n  templateUrl: 'tab-group.html',\n  styleUrls: ['tab-group.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  inputs: ['color', 'disableRipple'],\n  host: {\n    'class': 'mat-tab-group',\n    '[class.mat-tab-group-dynamic-height]': 'dynamicHeight',\n    '[class.mat-tab-group-inverted-header]': 'headerPosition === \"below\"',\n  },\n})\nexport class MatTabGroup extends _MatTabGroupMixinBase implements AfterContentInit,\n    AfterContentChecked, OnDestroy, CanColor, CanDisableRipple {\n\n  @ContentChildren(MatTab) _tabs: QueryList<MatTab>;\n\n  @ViewChild('tabBodyWrapper') _tabBodyWrapper: ElementRef;\n\n  @ViewChild('tabHeader') _tabHeader: MatTabHeader;\n\n  /** The tab index that should be selected after the content has been checked. */\n  private _indexToSelect: number | null = 0;\n\n  /** Snapshot of the height of the tab body wrapper before another tab is activated. */\n  private _tabBodyWrapperHeight: number = 0;\n\n  /** Subscription to tabs being added/removed. */\n  private _tabsSubscription = Subscription.EMPTY;\n\n  /** Subscription to changes in the tab labels. */\n  private _tabLabelSubscription = Subscription.EMPTY;\n\n  /** Whether the tab group should grow to the size of the active tab. */\n  @Input()\n  get dynamicHeight(): boolean { return this._dynamicHeight; }\n  set dynamicHeight(value: boolean) { this._dynamicHeight = coerceBooleanProperty(value); }\n  private _dynamicHeight: boolean = false;\n\n  /** The index of the active tab. */\n  @Input()\n  get selectedIndex(): number | null { return this._selectedIndex; }\n  set selectedIndex(value: number | null) {\n    this._indexToSelect = coerceNumberProperty(value, null);\n  }\n  private _selectedIndex: number | null = null;\n\n  /** Position of the tab header. */\n  @Input() headerPosition: MatTabHeaderPosition = 'above';\n\n  /** Background color of the tab group. */\n  @Input()\n  get backgroundColor(): ThemePalette { return this._backgroundColor; }\n  set backgroundColor(value: ThemePalette) {\n    const nativeElement: HTMLElement = this._elementRef.nativeElement;\n\n    nativeElement.classList.remove(`mat-background-${this.backgroundColor}`);\n\n    if (value) {\n      nativeElement.classList.add(`mat-background-${value}`);\n    }\n\n    this._backgroundColor = value;\n  }\n  private _backgroundColor: ThemePalette;\n\n  /** Output to enable support for two-way binding on `[(selectedIndex)]` */\n  @Output() readonly selectedIndexChange: EventEmitter<number> = new EventEmitter<number>();\n\n  /** Event emitted when focus has changed within a tab group. */\n  @Output() readonly focusChange: EventEmitter<MatTabChangeEvent> =\n      new EventEmitter<MatTabChangeEvent>();\n\n  /** Event emitted when the body animation has completed */\n  @Output() readonly animationDone: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Event emitted when the tab selection has changed. */\n  @Output() readonly selectedTabChange: EventEmitter<MatTabChangeEvent> =\n      new EventEmitter<MatTabChangeEvent>(true);\n\n  private _groupId: number;\n\n  constructor(elementRef: ElementRef,\n              private _changeDetectorRef: ChangeDetectorRef) {\n    super(elementRef);\n    this._groupId = nextId++;\n  }\n\n  /**\n   * After the content is checked, this component knows what tabs have been defined\n   * and what the selected index should be. This is where we can know exactly what position\n   * each tab should be in according to the new selected index, and additionally we know how\n   * a new selected tab should transition in (from the left or right).\n   */\n  ngAfterContentChecked() {\n    // Clamp the next selected index to the boundsof 0 and the tabs length.\n    // Note the `|| 0`, which ensures that values like NaN can't get through\n    // and which would otherwise throw the component into an infinite loop\n    // (since Math.max(NaN, 0) === NaN).\n    let indexToSelect = this._indexToSelect =\n        Math.min(this._tabs.length - 1, Math.max(this._indexToSelect || 0, 0));\n\n    // If there is a change in selected index, emit a change event. Should not trigger if\n    // the selected index has not yet been initialized.\n    if (this._selectedIndex != indexToSelect && this._selectedIndex != null) {\n      const tabChangeEvent = this._createChangeEvent(indexToSelect);\n      this.selectedTabChange.emit(tabChangeEvent);\n      // Emitting this value after change detection has run\n      // since the checked content may contain this variable'\n      Promise.resolve().then(() => this.selectedIndexChange.emit(indexToSelect));\n    }\n\n    // Setup the position for each tab and optionally setup an origin on the next selected tab.\n    this._tabs.forEach((tab: MatTab, index: number) => {\n      tab.position = index - indexToSelect;\n      tab.isActive = index === indexToSelect;\n\n      // If there is already a selected tab, then set up an origin for the next selected tab\n      // if it doesn't have one already.\n      if (this._selectedIndex != null && tab.position == 0 && !tab.origin) {\n        tab.origin = indexToSelect - this._selectedIndex;\n      }\n    });\n\n    if (this._selectedIndex !== indexToSelect) {\n      this._selectedIndex = indexToSelect;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  ngAfterContentInit() {\n    this._subscribeToTabLabels();\n\n    // Subscribe to changes in the amount of tabs, in order to be\n    // able to re-render the content as new tabs are added or removed.\n    this._tabsSubscription = this._tabs.changes.subscribe(() => {\n      const tabs = this._tabs.toArray();\n\n      // Maintain the previously-selected tab if a new tab is added or removed.\n      for (let i = 0; i < tabs.length; i++) {\n        if (tabs[i].isActive) {\n          this._indexToSelect = i;\n          break;\n        }\n      }\n\n      this._subscribeToTabLabels();\n      this._changeDetectorRef.markForCheck();\n    });\n  }\n\n  ngOnDestroy() {\n    this._tabsSubscription.unsubscribe();\n    this._tabLabelSubscription.unsubscribe();\n  }\n\n  /** Re-aligns the ink bar to the selected tab element. */\n  realignInkBar() {\n    if (this._tabHeader) {\n      this._tabHeader._alignInkBarToSelectedTab();\n    }\n  }\n\n  _focusChanged(index: number) {\n    this.focusChange.emit(this._createChangeEvent(index));\n  }\n\n  private _createChangeEvent(index: number): MatTabChangeEvent {\n    const event = new MatTabChangeEvent;\n    event.index = index;\n    if (this._tabs && this._tabs.length) {\n      event.tab = this._tabs.toArray()[index];\n    }\n    return event;\n  }\n\n  /**\n   * Subscribes to changes in the tab labels. This is needed, because the @Input for the label is\n   * on the MatTab component, whereas the data binding is inside the MatTabGroup. In order for the\n   * binding to be updated, we need to subscribe to changes in it and trigger change detection\n   * manually.\n   */\n  private _subscribeToTabLabels() {\n    if (this._tabLabelSubscription) {\n      this._tabLabelSubscription.unsubscribe();\n    }\n\n    this._tabLabelSubscription = merge(\n        ...this._tabs.map(tab => tab._disableChange),\n        ...this._tabs.map(tab => tab._labelChange)).subscribe(() => {\n      this._changeDetectorRef.markForCheck();\n    });\n  }\n\n  /** Returns a unique id for each tab label element */\n  _getTabLabelId(i: number): string {\n    return `mat-tab-label-${this._groupId}-${i}`;\n  }\n\n  /** Returns a unique id for each tab content element */\n  _getTabContentId(i: number): string {\n    return `mat-tab-content-${this._groupId}-${i}`;\n  }\n\n  /**\n   * Sets the height of the body wrapper to the height of the activating tab if dynamic\n   * height property is true.\n   */\n  _setTabBodyWrapperHeight(tabHeight: number): void {\n    if (!this._dynamicHeight || !this._tabBodyWrapperHeight) { return; }\n\n    const wrapper: HTMLElement = this._tabBodyWrapper.nativeElement;\n\n    wrapper.style.height = this._tabBodyWrapperHeight + 'px';\n\n    // This conditional forces the browser to paint the height so that\n    // the animation to the new height can have an origin.\n    if (this._tabBodyWrapper.nativeElement.offsetHeight) {\n      wrapper.style.height = tabHeight + 'px';\n    }\n  }\n\n  /** Removes the height of the tab body wrapper. */\n  _removeTabBodyWrapperHeight(): void {\n    this._tabBodyWrapperHeight = this._tabBodyWrapper.nativeElement.clientHeight;\n    this._tabBodyWrapper.nativeElement.style.height = '';\n    this.animationDone.emit();\n  }\n\n  /** Handle click events, setting new selected index if appropriate. */\n  _handleClick(tab: MatTab, tabHeader: MatTabHeader, idx: number) {\n    if (!tab.disabled) {\n      this.selectedIndex = tabHeader.focusIndex = idx;\n    }\n  }\n\n  /** Retrieves the tabindex for the tab. */\n  _getTabIndex(tab: MatTab, idx: number): number | null {\n    if (tab.disabled) {\n      return null;\n    }\n    return this.selectedIndex === idx ? 0 : -1;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {Directionality} from '@angular/cdk/bidi';\nimport {Platform} from '@angular/cdk/platform';\nimport {ViewportRuler} from '@angular/cdk/scrolling';\nimport {\n  AfterContentChecked,\n  AfterContentInit,\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  forwardRef,\n  Inject,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {\n  CanColor,\n  CanDisable,\n  CanDisableRipple,\n  HasTabIndex,\n  MAT_RIPPLE_GLOBAL_OPTIONS,\n  mixinColor,\n  mixinDisabled,\n  mixinDisableRipple,\n  mixinTabIndex, RippleConfig,\n  RippleGlobalOptions,\n  RippleRenderer,\n  RippleTarget,\n  ThemePalette,\n} from '@angular/material/core';\nimport {merge, of as observableOf, Subject} from 'rxjs';\nimport {takeUntil} from 'rxjs/operators';\nimport {MatInkBar} from '../ink-bar';\n\n\n// Boilerplate for applying mixins to MatTabNav.\n/** @docs-private */\nexport class MatTabNavBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatTabNavMixinBase = mixinDisableRipple(mixinColor(MatTabNavBase, 'primary'));\n\n/**\n * Navigation component matching the styles of the tab group header.\n * Provides anchored navigation with animated ink bar.\n */\n@Component({\n  moduleId: module.id,\n  selector: '[mat-tab-nav-bar]',\n  exportAs: 'matTabNavBar, matTabNav',\n  inputs: ['color', 'disableRipple'],\n  templateUrl: 'tab-nav-bar.html',\n  styleUrls: ['tab-nav-bar.css'],\n  host: {'class': 'mat-tab-nav-bar'},\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatTabNav extends _MatTabNavMixinBase\n    implements AfterContentChecked, AfterContentInit, CanColor, CanDisableRipple, OnDestroy {\n\n  /** Subject that emits when the component has been destroyed. */\n  private readonly _onDestroy = new Subject<void>();\n\n  private _activeLinkChanged: boolean;\n  private _activeLinkElement: ElementRef | null;\n\n  @ViewChild(MatInkBar) _inkBar: MatInkBar;\n\n  /** Query list of all tab links of the tab navigation. */\n  @ContentChildren(forwardRef(() => MatTabLink), {descendants: true})\n  _tabLinks: QueryList<MatTabLink>;\n\n  /** Background color of the tab nav. */\n  @Input()\n  get backgroundColor(): ThemePalette { return this._backgroundColor; }\n  set backgroundColor(value: ThemePalette) {\n    const nativeElement: HTMLElement = this._elementRef.nativeElement;\n\n    nativeElement.classList.remove(`mat-background-${this.backgroundColor}`);\n\n    if (value) {\n      nativeElement.classList.add(`mat-background-${value}`);\n    }\n\n    this._backgroundColor = value;\n  }\n  private _backgroundColor: ThemePalette;\n\n  constructor(elementRef: ElementRef,\n              @Optional() private _dir: Directionality,\n              private _ngZone: NgZone,\n              private _changeDetectorRef: ChangeDetectorRef,\n              private _viewportRuler: ViewportRuler) {\n    super(elementRef);\n  }\n\n  /**\n   * Notifies the component that the active link has been changed.\n   * @deletion-target 7.0.0 `element` parameter to be removed.\n   */\n  updateActiveLink(element: ElementRef) {\n    // Note: keeping the `element` for backwards-compat, but isn't being used for anything.\n    // @deletion-target 7.0.0\n    this._activeLinkChanged = !!element;\n    this._changeDetectorRef.markForCheck();\n  }\n\n  ngAfterContentInit(): void {\n    this._ngZone.runOutsideAngular(() => {\n      const dirChange = this._dir ? this._dir.change : observableOf(null);\n\n      return merge(dirChange, this._viewportRuler.change(10))\n          .pipe(takeUntil(this._onDestroy))\n          .subscribe(() => this._alignInkBar());\n    });\n  }\n\n  /** Checks if the active link has been changed and, if so, will update the ink bar. */\n  ngAfterContentChecked(): void {\n    if (this._activeLinkChanged) {\n      const activeTab = this._tabLinks.find(tab => tab.active);\n\n      this._activeLinkElement = activeTab ? activeTab._elementRef : null;\n      this._alignInkBar();\n      this._activeLinkChanged = false;\n    }\n  }\n\n  ngOnDestroy() {\n    this._onDestroy.next();\n    this._onDestroy.complete();\n  }\n\n  /** Aligns the ink bar to the active link. */\n  _alignInkBar(): void {\n    if (this._activeLinkElement) {\n      this._inkBar.show();\n      this._inkBar.alignToElement(this._activeLinkElement.nativeElement);\n    } else {\n      this._inkBar.hide();\n    }\n  }\n}\n\n\n// Boilerplate for applying mixins to MatTabLink.\nexport class MatTabLinkBase {}\nexport const _MatTabLinkMixinBase =\n  mixinTabIndex(mixinDisableRipple(mixinDisabled(MatTabLinkBase)));\n\n/**\n * Link inside of a `mat-tab-nav-bar`.\n */\n@Directive({\n  selector: '[mat-tab-link], [matTabLink]',\n  exportAs: 'matTabLink',\n  inputs: ['disabled', 'disableRipple', 'tabIndex'],\n  host: {\n    'class': 'mat-tab-link',\n    '[attr.aria-current]': 'active',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.tabIndex]': 'tabIndex',\n    '[class.mat-tab-disabled]': 'disabled',\n    '[class.mat-tab-label-active]': 'active',\n    '(click)': '_handleClick($event)'\n  }\n})\nexport class MatTabLink extends _MatTabLinkMixinBase\n    implements OnDestroy, CanDisable, CanDisableRipple, HasTabIndex, RippleTarget {\n\n  /** Whether the tab link is active or not. */\n  protected _isActive: boolean = false;\n\n  /** Reference to the RippleRenderer for the tab-link. */\n  protected _tabLinkRipple: RippleRenderer;\n\n  /** Whether the ripples are globally disabled through the RippleGlobalOptions */\n  private _ripplesGloballyDisabled = false;\n\n  /** Whether the link is active. */\n  @Input()\n  get active(): boolean { return this._isActive; }\n  set active(value: boolean) {\n    if (value !== this._isActive) {\n      this._isActive = value;\n      this._tabNavBar.updateActiveLink(this._elementRef);\n    }\n  }\n\n  /**\n   * Ripple configuration for ripples that are launched on pointer down.\n   * @docs-private\n   */\n  rippleConfig: RippleConfig = {};\n\n  /**\n   * Whether ripples are disabled on interaction\n   * @docs-private\n   */\n  get rippleDisabled(): boolean {\n    return this.disabled || this.disableRipple || this._tabNavBar.disableRipple ||\n      this._ripplesGloballyDisabled;\n  }\n\n  constructor(private _tabNavBar: MatTabNav,\n              public _elementRef: ElementRef,\n              ngZone: NgZone,\n              platform: Platform,\n              @Optional() @Inject(MAT_RIPPLE_GLOBAL_OPTIONS) globalOptions: RippleGlobalOptions,\n              @Attribute('tabindex') tabIndex: string) {\n    super();\n\n    this._tabLinkRipple = new RippleRenderer(this, ngZone, _elementRef, platform);\n    this._tabLinkRipple.setupTriggerEvents(_elementRef.nativeElement);\n\n    this.tabIndex = parseInt(tabIndex) || 0;\n\n    if (globalOptions) {\n      this._ripplesGloballyDisabled = !!globalOptions.disabled;\n      // TODO(paul): Once the speedFactor is removed, we no longer need to copy each single option.\n      this.rippleConfig = {\n        terminateOnPointerUp: globalOptions.terminateOnPointerUp,\n        speedFactor: globalOptions.baseSpeedFactor,\n        animation: globalOptions.animation,\n      };\n    }\n  }\n\n  ngOnDestroy() {\n    this._tabLinkRipple._removeTriggerEvents();\n  }\n\n  /**\n   * Handles the click event, preventing default navigation if the tab link is disabled.\n   */\n  _handleClick(event: MouseEvent) {\n    if (this.disabled) {\n      event.preventDefault();\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ObserversModule} from '@angular/cdk/observers';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {MatInkBar} from './ink-bar';\nimport {MatTab} from './tab';\nimport {MatTabBody, MatTabBodyPortal} from './tab-body';\nimport {MatTabContent} from './tab-content';\nimport {MatTabGroup} from './tab-group';\nimport {MatTabHeader} from './tab-header';\nimport {MatTabLabel} from './tab-label';\nimport {MatTabLabelWrapper} from './tab-label-wrapper';\nimport {MatTabLink, MatTabNav} from './tab-nav-bar/tab-nav-bar';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatCommonModule,\n    PortalModule,\n    MatRippleModule,\n    ObserversModule,\n  ],\n  // Don't export all components because some are only to be used internally.\n  exports: [\n    MatCommonModule,\n    MatTabGroup,\n    MatTabLabel,\n    MatTab,\n    MatTabNav,\n    MatTabLink,\n    MatTabContent,\n  ],\n  declarations: [\n    MatTabGroup,\n    MatTabLabel,\n    MatTab,\n    MatInkBar,\n    MatTabLabelWrapper,\n    MatTabNav,\n    MatTabLink,\n    MatTabBody,\n    MatTabBodyPortal,\n    MatTabHeader,\n    MatTabContent,\n  ],\n})\nexport class MatTabsModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  AfterViewInit,\n  ChangeDetectionStrategy,\n  Component,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  isDevMode,\n  QueryList,\n  ViewEncapsulation,\n  Inject,\n} from '@angular/core';\nimport {CanColor, mixinColor} from '@angular/material/core';\nimport {Platform} from '@angular/cdk/platform';\nimport {DOCUMENT} from '@angular/common';\n\n// Boilerplate for applying mixins to MatToolbar.\n/** @docs-private */\nexport class MatToolbarBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatToolbarMixinBase = mixinColor(MatToolbarBase);\n\n@Directive({\n  selector: 'mat-toolbar-row',\n  exportAs: 'matToolbarRow',\n  host: {'class': 'mat-toolbar-row'},\n})\nexport class MatToolbarRow {}\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-toolbar',\n  exportAs: 'matToolbar',\n  templateUrl: 'toolbar.html',\n  styleUrls: ['toolbar.css'],\n  inputs: ['color'],\n  host: {\n    'class': 'mat-toolbar',\n    '[class.mat-toolbar-multiple-rows]': 'this._toolbarRows.length',\n    '[class.mat-toolbar-single-row]': '!this._toolbarRows.length'\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatToolbar extends _MatToolbarMixinBase implements CanColor, AfterViewInit {\n  private _document: Document;\n\n  /** Reference to all toolbar row elements that have been projected. */\n  @ContentChildren(MatToolbarRow) _toolbarRows: QueryList<MatToolbarRow>;\n\n  constructor(\n    elementRef: ElementRef,\n    private _platform: Platform,\n    @Inject(DOCUMENT) document?: any) {\n    super(elementRef);\n\n    // TODO: make the document a required param when doing breaking changes.\n    this._document = document;\n  }\n\n  ngAfterViewInit() {\n    if (!isDevMode() || !this._platform.isBrowser) {\n      return;\n    }\n\n    this._checkToolbarMixedModes();\n    this._toolbarRows.changes.subscribe(() => this._checkToolbarMixedModes());\n  }\n\n  /**\n   * Throws an exception when developers are attempting to combine the different toolbar row modes.\n   */\n  private _checkToolbarMixedModes() {\n    if (!this._toolbarRows.length) {\n      return;\n    }\n\n    // Check if there are any other DOM nodes that can display content but aren't inside of\n    // a <mat-toolbar-row> element.\n    const isCombinedUsage = [].slice.call(this._elementRef.nativeElement.childNodes)\n      .filter(node => !(node.classList && node.classList.contains('mat-toolbar-row')))\n      .filter(node => node.nodeType !== (this._document ? this._document.COMMENT_NODE : 8))\n      .some(node => node.textContent.trim());\n\n    if (isCombinedUsage) {\n      throwToolbarMixedModesError();\n    }\n  }\n}\n\n/**\n * Throws an exception when attempting to combine the different toolbar row modes.\n * @docs-private\n */\nexport function throwToolbarMixedModesError() {\n  throw Error('MatToolbar: Attempting to combine different toolbar modes. ' +\n    'Either specify multiple `<mat-toolbar-row>` elements explicitly or just place content ' +\n    'inside of a `<mat-toolbar>` for a single row.');\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatToolbar, MatToolbarRow} from './toolbar';\n\n\n@NgModule({\n  imports: [MatCommonModule],\n  exports: [MatToolbar, MatToolbarRow, MatCommonModule],\n  declarations: [MatToolbar, MatToolbarRow],\n})\nexport class MatToolbarModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {CdkTreeNodeOutlet} from '@angular/cdk/tree';\nimport {\n  Directive,\n  ViewContainerRef,\n} from '@angular/core';\n\n/**\n * Outlet for nested CdkNode. Put `[matTreeNodeOutlet]` on a tag to place children dataNodes\n * inside the outlet.\n */\n@Directive({\n  selector: '[matTreeNodeOutlet]'\n})\nexport class MatTreeNodeOutlet implements CdkTreeNodeOutlet {\n  constructor(public viewContainer: ViewContainerRef) {}\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  CdkNestedTreeNode,\n  CdkTree,\n  CdkTreeNode,\n  CdkTreeNodeDef,\n} from '@angular/cdk/tree';\nimport {\n  AfterContentInit,\n  Attribute,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  Input,\n  IterableDiffers,\n  OnDestroy,\n  QueryList\n} from '@angular/core';\nimport {CanDisable, HasTabIndex, mixinDisabled, mixinTabIndex} from '@angular/material/core';\nimport {MatTreeNodeOutlet} from './outlet';\n\n\nexport const _MatTreeNodeMixinBase = mixinTabIndex(mixinDisabled(CdkTreeNode));\nexport const _MatNestedTreeNodeMixinBase = mixinTabIndex(mixinDisabled(CdkNestedTreeNode));\n\n/**\n * Wrapper for the CdkTree node with Material design styles.\n */\n@Directive({\n  selector: 'mat-tree-node',\n  exportAs: 'matTreeNode',\n  inputs: ['disabled', 'tabIndex'],\n  host: {\n    '[attr.aria-expanded]': 'isExpanded',\n    '[attr.aria-level]': 'role === \"treeitem\" ? level : null',\n    '[attr.role]': 'role',\n    'class': 'mat-tree-node'\n  },\n  providers: [{provide: CdkTreeNode, useExisting: MatTreeNode}]\n})\nexport class MatTreeNode<T> extends _MatTreeNodeMixinBase<T>\n    implements CanDisable, HasTabIndex {\n  @Input() role: 'treeitem' | 'group' = 'treeitem';\n\n  constructor(protected _elementRef: ElementRef,\n              protected _tree: CdkTree<T>,\n              @Attribute('tabindex') tabIndex: string) {\n    super(_elementRef, _tree);\n\n    this.tabIndex = Number(tabIndex) || 0;\n  }\n}\n\n/**\n * Wrapper for the CdkTree node definition with Material design styles.\n */\n@Directive({\n  selector: '[matTreeNodeDef]',\n  inputs: [\n    'when: matTreeNodeDefWhen'\n  ],\n  providers: [{provide: CdkTreeNodeDef, useExisting: MatTreeNodeDef}]\n})\nexport class MatTreeNodeDef<T> extends CdkTreeNodeDef<T> {\n  @Input('matTreeNode') data: T;\n}\n\n/**\n * Wrapper for the CdkTree nested node with Material design styles.\n */\n@Directive({\n  selector: 'mat-nested-tree-node',\n  exportAs: 'matNestedTreeNode',\n  host: {\n    '[attr.aria-expanded]': 'isExpanded',\n    '[attr.role]': 'role',\n    'class': 'mat-nested-tree-node',\n  },\n  inputs: ['disabled', 'tabIndex'],\n  providers: [\n    {provide: CdkNestedTreeNode, useExisting: MatNestedTreeNode},\n    {provide: CdkTreeNode, useExisting: MatNestedTreeNode}\n  ]\n})\nexport class MatNestedTreeNode<T> extends _MatNestedTreeNodeMixinBase<T>\n    implements AfterContentInit, CanDisable, HasTabIndex, OnDestroy {\n\n  @Input('matNestedTreeNode') node: T;\n\n  @ContentChildren(MatTreeNodeOutlet) nodeOutlet: QueryList<MatTreeNodeOutlet>;\n\n  constructor(protected _elementRef: ElementRef,\n              protected _tree: CdkTree<T>,\n              protected _differs: IterableDiffers,\n              @Attribute('tabindex') tabIndex: string) {\n    super(_elementRef, _tree, _differs);\n\n    this.tabIndex = Number(tabIndex) || 0;\n  }\n\n  // This is a workaround for https://github.com/angular/angular/issues/23091\n  // In aot mode, the lifecycle hooks from parent class are not called.\n  // TODO(tinayuangao): Remove when the angular issue #23091 is fixed\n  ngAfterContentInit() {\n    super.ngAfterContentInit();\n  }\n\n  ngOnDestroy() {\n    super.ngOnDestroy();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {CdkTreeNodePadding} from '@angular/cdk/tree';\nimport {Directive, Input} from '@angular/core';\n\n\n/**\n * Wrapper for the CdkTree padding with Material design styles.\n */\n@Directive({\n  selector: '[matTreeNodePadding]',\n  providers: [{provide: CdkTreeNodePadding, useExisting: MatTreeNodePadding}]\n})\nexport class MatTreeNodePadding<T> extends CdkTreeNodePadding<T> {\n\n  /** The level of depth of the tree node. The padding will be `level * indent` pixels. */\n  @Input('matTreeNodePadding') level: number;\n\n  /** The indent for each level. Default number 40px from material design menu sub-menu spec. */\n  @Input('matTreeNodePaddingIndent') indent: number;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {CdkColumnDef} from '@angular/cdk/table';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  Input,\n  OnDestroy,\n  OnInit,\n  Optional,\n  ViewEncapsulation\n} from '@angular/core';\nimport {CanDisable, mixinDisabled} from '@angular/material/core';\nimport {merge, Subscription} from 'rxjs';\nimport {MatSort, MatSortable} from './sort';\nimport {matSortAnimations} from './sort-animations';\nimport {SortDirection} from './sort-direction';\nimport {getSortHeaderNotContainedWithinSortError} from './sort-errors';\nimport {MatSortHeaderIntl} from './sort-header-intl';\n\n\n// Boilerplate for applying mixins to the sort header.\n/** @docs-private */\nexport class MatSortHeaderBase {}\nexport const _MatSortHeaderMixinBase = mixinDisabled(MatSortHeaderBase);\n\n/**\n * Valid positions for the arrow to be in for its opacity and translation. If the state is a\n * sort direction, the position of the arrow will be above/below and opacity 0. If the state is\n * hint, the arrow will be in the center with a slight opacity. Active state means the arrow will\n * be fully opaque in the center.\n *\n * @docs-private\n */\nexport type ArrowViewState = SortDirection | 'hint' | 'active';\n\n/**\n * States describing the arrow's animated position (animating fromState to toState).\n * If the fromState is not defined, there will be no animated transition to the toState.\n * @docs-private\n */\nexport interface ArrowViewStateTransition {\n  fromState?: ArrowViewState;\n  toState: ArrowViewState;\n}\n\n/**\n * Applies sorting behavior (click to change sort) and styles to an element, including an\n * arrow to display the current sort direction.\n *\n * Must be provided with an id and contained within a parent MatSort directive.\n *\n * If used on header cells in a CdkTable, it will automatically default its id from its containing\n * column definition.\n */\n@Component({\n  moduleId: module.id,\n  selector: '[mat-sort-header]',\n  exportAs: 'matSortHeader',\n  templateUrl: 'sort-header.html',\n  styleUrls: ['sort-header.css'],\n  host: {\n    '(click)': '_handleClick()',\n    '(mouseenter)': '_setIndicatorHintVisible(true)',\n    '(longpress)': '_setIndicatorHintVisible(true)',\n    '(mouseleave)': '_setIndicatorHintVisible(false)',\n    '[attr.aria-sort]': '_getAriaSortAttribute()',\n    '[class.mat-sort-header-disabled]': '_isDisabled()',\n  },\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  inputs: ['disabled'],\n  animations: [\n    matSortAnimations.indicator,\n    matSortAnimations.leftPointer,\n    matSortAnimations.rightPointer,\n    matSortAnimations.arrowOpacity,\n    matSortAnimations.arrowPosition,\n    matSortAnimations.allowChildren,\n  ]\n})\nexport class MatSortHeader extends _MatSortHeaderMixinBase\n    implements CanDisable, MatSortable, OnDestroy, OnInit {\n  private _rerenderSubscription: Subscription;\n\n  /**\n   * Flag set to true when the indicator should be displayed while the sort is not active. Used to\n   * provide an affordance that the header is sortable by showing on focus and hover.\n   */\n  _showIndicatorHint: boolean = false;\n\n  /**\n   * The view transition state of the arrow (translation/ opacity) - indicates its `from` and `to`\n   * position through the animation. If animations are currently disabled, the fromState is removed\n   * so that there is no animation displayed.\n   */\n  _viewState: ArrowViewStateTransition;\n\n  /** The direction the arrow should be facing according to the current state. */\n  _arrowDirection: SortDirection = '';\n\n  /**\n   * Whether the view state animation should show the transition between the `from` and `to` states.\n   */\n  _disableViewStateAnimation = false;\n\n  /**\n   * ID of this sort header. If used within the context of a CdkColumnDef, this will default to\n   * the column's name.\n   */\n  @Input('mat-sort-header') id: string;\n\n  /** Sets the position of the arrow that displays when sorted. */\n  @Input() arrowPosition: 'before' | 'after' = 'after';\n\n  /** Overrides the sort start value of the containing MatSort for this MatSortable. */\n  @Input() start: 'asc' | 'desc';\n\n  /** Overrides the disable clear value of the containing MatSort for this MatSortable. */\n  @Input()\n  get disableClear(): boolean { return this._disableClear; }\n  set disableClear(v) { this._disableClear = coerceBooleanProperty(v); }\n  private _disableClear: boolean;\n\n  constructor(public _intl: MatSortHeaderIntl,\n              changeDetectorRef: ChangeDetectorRef,\n              @Optional() public _sort: MatSort,\n              @Optional() public _cdkColumnDef: CdkColumnDef) {\n\n    super();\n\n    if (!_sort) {\n      throw getSortHeaderNotContainedWithinSortError();\n    }\n\n    this._rerenderSubscription = merge(_sort.sortChange, _sort._stateChanges, _intl.changes)\n        .subscribe(() => {\n          if (this._isSorted()) {\n            this._updateArrowDirection();\n          }\n\n          // If this header was recently active and now no longer sorted, animate away the arrow.\n          if (!this._isSorted() && this._viewState && this._viewState.toState === 'active') {\n            this._disableViewStateAnimation = false;\n            this._setAnimationTransitionState({fromState: 'active', toState: this._arrowDirection});\n          }\n\n          changeDetectorRef.markForCheck();\n        });\n  }\n\n  ngOnInit() {\n    if (!this.id && this._cdkColumnDef) {\n      this.id = this._cdkColumnDef.name;\n    }\n\n    // Initialize the direction of the arrow and set the view state to be immediately that state.\n    this._updateArrowDirection();\n    this._setAnimationTransitionState(\n        {toState: this._isSorted() ? 'active' : this._arrowDirection});\n\n    this._sort.register(this);\n  }\n\n  ngOnDestroy() {\n    this._sort.deregister(this);\n    this._rerenderSubscription.unsubscribe();\n  }\n\n  /**\n   * Sets the \"hint\" state such that the arrow will be semi-transparently displayed as a hint to the\n   * user showing what the active sort will become. If set to false, the arrow will fade away.\n   */\n  _setIndicatorHintVisible(visible: boolean) {\n    // No-op if the sort header is disabled - should not make the hint visible.\n    if (this._isDisabled() && visible) { return; }\n\n    this._showIndicatorHint = visible;\n\n    if (!this._isSorted()) {\n      this._updateArrowDirection();\n      if (this._showIndicatorHint) {\n        this._setAnimationTransitionState({fromState: this._arrowDirection, toState: 'hint'});\n      } else {\n        this._setAnimationTransitionState({fromState: 'hint', toState: this._arrowDirection});\n      }\n    }\n  }\n\n  /**\n   * Sets the animation transition view state for the arrow's position and opacity. If the\n   * `disableViewStateAnimation` flag is set to true, the `fromState` will be ignored so that\n   * no animation appears.\n   */\n  _setAnimationTransitionState(viewState: ArrowViewStateTransition) {\n    this._viewState = viewState;\n\n    // If the animation for arrow position state (opacity/translation) should be disabled,\n    // remove the fromState so that it jumps right to the toState.\n    if (this._disableViewStateAnimation) {\n      this._viewState = {toState: viewState.toState};\n    }\n  }\n\n  /** Triggers the sort on this sort header and removes the indicator hint. */\n  _handleClick() {\n    if (this._isDisabled()) { return; }\n\n    this._sort.sort(this);\n\n    // Do not show the animation if the header was already shown in the right position.\n    if (this._viewState.toState === 'hint' || this._viewState.toState === 'active') {\n      this._disableViewStateAnimation = true;\n    }\n\n    // If the arrow is now sorted, animate the arrow into place. Otherwise, animate it away into\n    // the direction it is facing.\n    const viewState: ArrowViewStateTransition = this._isSorted() ?\n        {fromState: this._arrowDirection, toState: 'active'} :\n        {fromState: 'active', toState: this._arrowDirection};\n    this._setAnimationTransitionState(viewState);\n\n    this._showIndicatorHint = false;\n  }\n\n  /** Whether this MatSortHeader is currently sorted in either ascending or descending order. */\n  _isSorted() {\n    return this._sort.active == this.id &&\n        (this._sort.direction === 'asc' || this._sort.direction === 'desc');\n  }\n\n  /** Returns the animation state for the arrow direction (indicator and pointers). */\n  _getArrowDirectionState() {\n    return `${this._isSorted() ? 'active-' : ''}${this._arrowDirection}`;\n  }\n\n  /** Returns the arrow position state (opacity, translation). */\n  _getArrowViewState() {\n    const fromState = this._viewState.fromState;\n    return (fromState ? `${fromState}-to-` : '') + this._viewState.toState;\n  }\n\n  /**\n   * Updates the direction the arrow should be pointing. If it is not sorted, the arrow should be\n   * facing the start direction. Otherwise if it is sorted, the arrow should point in the currently\n   * active sorted direction. The reason this is updated through a function is because the direction\n   * should only be changed at specific times - when deactivated but the hint is displayed and when\n   * the sort is active and the direction changes. Otherwise the arrow's direction should linger\n   * in cases such as the sort becoming deactivated but we want to animate the arrow away while\n   * preserving its direction, even though the next sort direction is actually different and should\n   * only be changed once the arrow displays again (hint or activation).\n   */\n  _updateArrowDirection() {\n    this._arrowDirection = this._isSorted() ?\n        this._sort.direction :\n        (this.start || this._sort.start);\n  }\n\n  _isDisabled() {\n    return this._sort.disabled || this.disabled;\n  }\n\n  /**\n   * Gets the aria-sort attribute that should be applied to this sort header. If this header\n   * is not sorted, returns null so that the attribute is removed from the host element. Aria spec\n   * says that the aria-sort property should only be present on one header at a time, so removing\n   * ensures this is true.\n   */\n  _getAriaSortAttribute() {\n    if (!this._isSorted()) { return null; }\n\n    return this._sort.direction == 'asc' ? 'ascending' : 'descending';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatSortHeader} from './sort-header';\nimport {MatSort} from './sort';\nimport {MAT_SORT_HEADER_INTL_PROVIDER} from './sort-header-intl';\nimport {CommonModule} from '@angular/common';\n\n\n@NgModule({\n  imports: [CommonModule],\n  exports: [MatSort, MatSortHeader],\n  declarations: [MatSort, MatSortHeader],\n  providers: [MAT_SORT_HEADER_INTL_PROVIDER]\n})\nexport class MatSortModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, TemplateRef} from '@angular/core';\nimport {CdkStepLabel} from '@angular/cdk/stepper';\n\n@Directive({\n  selector: '[matStepLabel]',\n})\nexport class MatStepLabel extends CdkStepLabel {\n  constructor(template: TemplateRef<any>) {\n    super(template);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable} from '@angular/core';\nimport {Subject} from 'rxjs';\n\n\n/** Stepper data that is required for internationalization. */\n@Injectable({providedIn: 'root'})\nexport class MatStepperIntl {\n  /**\n   * Stream that emits whenever the labels here are changed. Use this to notify\n   * components if the labels have changed after initialization.\n   */\n  readonly changes: Subject<void> = new Subject<void>();\n\n  /** Label that is rendered below optional steps. */\n  optionalLabel: string = 'Optional';\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor} from '@angular/cdk/a11y';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  Input,\n  OnDestroy,\n  ViewEncapsulation,\n  TemplateRef,\n} from '@angular/core';\nimport {Subscription} from 'rxjs';\nimport {MatStepLabel} from './step-label';\nimport {MatStepperIntl} from './stepper-intl';\nimport {MatStepperIconContext} from './stepper-icon';\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-step-header',\n  templateUrl: 'step-header.html',\n  styleUrls: ['step-header.css'],\n  host: {\n    'class': 'mat-step-header',\n    'role': 'tab',\n  },\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatStepHeader implements OnDestroy {\n  private _intlSubscription: Subscription;\n\n  /** State of the given step. */\n  @Input() state: string;\n\n  /** Label of the given step. */\n  @Input() label: MatStepLabel | string;\n\n  /** Overrides for the header icons, passed in via the stepper. */\n  @Input() iconOverrides: {[key: string]: TemplateRef<MatStepperIconContext>};\n\n  /** Index of the given step. */\n  @Input() index: number;\n\n  /** Whether the given step is selected. */\n  @Input() selected: boolean;\n\n  /** Whether the given step label is active. */\n  @Input() active: boolean;\n\n  /** Whether the given step is optional. */\n  @Input() optional: boolean;\n\n  constructor(\n    public _intl: MatStepperIntl,\n    private _focusMonitor: FocusMonitor,\n    private _element: ElementRef,\n    changeDetectorRef: ChangeDetectorRef) {\n    _focusMonitor.monitor(_element.nativeElement, true);\n    this._intlSubscription = _intl.changes.subscribe(() => changeDetectorRef.markForCheck());\n  }\n\n  ngOnDestroy() {\n    this._intlSubscription.unsubscribe();\n    this._focusMonitor.stopMonitoring(this._element.nativeElement);\n  }\n\n  /** Returns string label of given step if it is a text label. */\n  _stringLabel(): string | null {\n    return this.label instanceof MatStepLabel ? null : this.label;\n  }\n\n  /** Returns MatStepLabel if the label of given step is a template label. */\n  _templateLabel(): MatStepLabel | null {\n    return this.label instanceof MatStepLabel ? this.label : null;\n  }\n\n  /** Returns the host HTML element. */\n  _getHostElement() {\n    return this._element.nativeElement;\n  }\n\n  /** Template context variables that are exposed to the `matStepperIcon` instances. */\n  _getIconContext(): MatStepperIconContext {\n    return {\n      index: this.index,\n      active: this.active,\n      optional: this.optional\n    };\n  }\n\n  focus() {\n    this._getHostElement().focus();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/** Animations used by the Material steppers. */\nexport const matStepperAnimations: {\n  readonly horizontalStepTransition: AnimationTriggerMetadata;\n  readonly verticalStepTransition: AnimationTriggerMetadata;\n} = {\n  /** Animation that transitions the step along the X axis in a horizontal stepper. */\n  horizontalStepTransition: trigger('stepTransition', [\n    state('previous', style({transform: 'translate3d(-100%, 0, 0)', visibility: 'hidden'})),\n    state('current', style({transform: 'none', visibility: 'visible'})),\n    state('next', style({transform: 'translate3d(100%, 0, 0)', visibility: 'hidden'})),\n    transition('* => *', animate('500ms cubic-bezier(0.35, 0, 0.25, 1)'))\n  ]),\n\n  /** Animation that transitions the step along the Y axis in a vertical stepper. */\n  verticalStepTransition: trigger('stepTransition', [\n    state('previous', style({height: '0px', visibility: 'hidden'})),\n    state('next', style({height: '0px', visibility: 'hidden'})),\n    state('current', style({height: '*', visibility: 'visible'})),\n    transition('* <=> current', animate('225ms cubic-bezier(0.4, 0.0, 0.2, 1)'))\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, Input, TemplateRef} from '@angular/core';\n\n/** Template context available to an attached `matStepperIcon`. */\nexport interface MatStepperIconContext {\n  /** Index of the step. */\n  index: number;\n  /** Whether the step is currently active. */\n  active: boolean;\n  /** Whether the step is optional. */\n  optional: boolean;\n}\n\n/**\n * Template to be used to override the icons inside the step header.\n */\n@Directive({\n  selector: 'ng-template[matStepperIcon]',\n})\nexport class MatStepperIcon {\n  /** Name of the icon to be overridden. */\n  @Input('matStepperIcon') name: 'edit' | 'done' | 'number';\n\n  constructor(public templateRef: TemplateRef<MatStepperIconContext>) {}\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directionality} from '@angular/cdk/bidi';\nimport {CdkStep, CdkStepper, StepContentPositionState} from '@angular/cdk/stepper';\nimport {AnimationEvent} from '@angular/animations';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  ContentChildren,\n  Directive,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Optional,\n  Output,\n  QueryList,\n  SkipSelf,\n  TemplateRef,\n  ViewChildren,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {FormControl, FormGroupDirective, NgForm} from '@angular/forms';\nimport {ErrorStateMatcher} from '@angular/material/core';\nimport {MatStepHeader} from './step-header';\nimport {MatStepLabel} from './step-label';\nimport {takeUntil} from 'rxjs/operators';\nimport {matStepperAnimations} from './stepper-animations';\nimport {MatStepperIcon, MatStepperIconContext} from './stepper-icon';\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-step',\n  templateUrl: 'step.html',\n  providers: [{provide: ErrorStateMatcher, useExisting: MatStep}],\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matStep',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatStep extends CdkStep implements ErrorStateMatcher {\n  /** Content for step label given by `<ng-template matStepLabel>`. */\n  @ContentChild(MatStepLabel) stepLabel: MatStepLabel;\n\n  constructor(@Inject(forwardRef(() => MatStepper)) stepper: MatStepper,\n              @SkipSelf() private _errorStateMatcher: ErrorStateMatcher) {\n    super(stepper);\n  }\n\n  /** Custom error state matcher that additionally checks for validity of interacted form. */\n  isErrorState(control: FormControl | null, form: FormGroupDirective | NgForm | null): boolean {\n    const originalErrorState = this._errorStateMatcher.isErrorState(control, form);\n\n    // Custom error state checks for the validity of form that is not submitted or touched\n    // since user can trigger a form change by calling for another step without directly\n    // interacting with the current form.\n    const customErrorState = !!(control && control.invalid && this.interacted);\n\n    return originalErrorState || customErrorState;\n  }\n}\n\n\n@Directive({\n  selector: '[matStepper]'\n})\nexport class MatStepper extends CdkStepper implements AfterContentInit {\n  /** The list of step headers of the steps in the stepper. */\n  @ViewChildren(MatStepHeader) _stepHeader: QueryList<MatStepHeader>;\n\n  /** Steps that the stepper holds. */\n  @ContentChildren(MatStep) _steps: QueryList<MatStep>;\n\n  /** Custom icon overrides passed in by the consumer. */\n  @ContentChildren(MatStepperIcon) _icons: QueryList<MatStepperIcon>;\n\n  /** Event emitted when the current step is done transitioning in. */\n  @Output() readonly animationDone: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Consumer-specified template-refs to be used to override the header icons. */\n  _iconOverrides: {[key: string]: TemplateRef<MatStepperIconContext>} = {};\n\n  ngAfterContentInit() {\n    const icons = this._icons.toArray();\n\n    ['edit', 'done', 'number'].forEach(name => {\n      const override = icons.find(icon => icon.name === name);\n\n      if (override) {\n        this._iconOverrides[name] = override.templateRef;\n      }\n    });\n\n    // Mark the component for change detection whenever the content children query changes\n    this._steps.changes.pipe(takeUntil(this._destroyed)).subscribe(() => this._stateChanged());\n  }\n\n  _animationDone(event: AnimationEvent) {\n    if ((event.toState as StepContentPositionState) === 'current') {\n      this.animationDone.emit();\n    }\n  }\n}\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-horizontal-stepper',\n  exportAs: 'matHorizontalStepper',\n  templateUrl: 'stepper-horizontal.html',\n  styleUrls: ['stepper.css'],\n  inputs: ['selectedIndex'],\n  host: {\n    'class': 'mat-stepper-horizontal',\n    'aria-orientation': 'horizontal',\n    'role': 'tablist',\n  },\n  animations: [matStepperAnimations.horizontalStepTransition],\n  providers: [{provide: MatStepper, useExisting: MatHorizontalStepper}],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatHorizontalStepper extends MatStepper { }\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-vertical-stepper',\n  exportAs: 'matVerticalStepper',\n  templateUrl: 'stepper-vertical.html',\n  styleUrls: ['stepper.css'],\n  inputs: ['selectedIndex'],\n  host: {\n    'class': 'mat-stepper-vertical',\n    'aria-orientation': 'vertical',\n    'role': 'tablist',\n  },\n  animations: [matStepperAnimations.verticalStepTransition],\n  providers: [{provide: MatStepper, useExisting: MatVerticalStepper}],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatVerticalStepper extends MatStepper {\n  constructor(@Optional() dir: Directionality, changeDetectorRef: ChangeDetectorRef) {\n    super(dir, changeDetectorRef);\n    this._orientation = 'vertical';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive} from '@angular/core';\nimport {CdkStepper, CdkStepperNext, CdkStepperPrevious} from '@angular/cdk/stepper';\nimport {MatStepper} from './stepper';\n\n/** Button that moves to the next step in a stepper workflow. */\n@Directive({\n  selector: 'button[matStepperNext]',\n  host: {\n    '(click)': '_stepper.next()',\n    '[type]': 'type',\n  },\n  inputs: ['type'],\n  providers: [{provide: CdkStepper, useExisting: MatStepper}]\n})\nexport class MatStepperNext extends CdkStepperNext {}\n\n/** Button that moves to the previous step in a stepper workflow. */\n@Directive({\n  selector: 'button[matStepperPrevious]',\n  host: {\n    '(click)': '_stepper.previous()',\n    '[type]': 'type',\n  },\n  inputs: ['type'],\n  providers: [{provide: CdkStepper, useExisting: MatStepper}]\n})\nexport class MatStepperPrevious extends CdkStepperPrevious {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {PortalModule} from '@angular/cdk/portal';\nimport {CdkStepperModule} from '@angular/cdk/stepper';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatButtonModule} from '@angular/material/button';\nimport {ErrorStateMatcher, MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {MatIconModule} from '@angular/material/icon';\nimport {MatStepHeader} from './step-header';\nimport {MatStepLabel} from './step-label';\nimport {MatHorizontalStepper, MatStep, MatStepper, MatVerticalStepper} from './stepper';\nimport {MatStepperNext, MatStepperPrevious} from './stepper-button';\nimport {MatStepperIcon} from './stepper-icon';\nimport {MatStepperIntl} from './stepper-intl';\n\n\n@NgModule({\n  imports: [\n    MatCommonModule,\n    CommonModule,\n    PortalModule,\n    MatButtonModule,\n    CdkStepperModule,\n    MatIconModule,\n    MatRippleModule,\n  ],\n  exports: [\n    MatCommonModule,\n    MatHorizontalStepper,\n    MatVerticalStepper,\n    MatStep,\n    MatStepLabel,\n    MatStepper,\n    MatStepperNext,\n    MatStepperPrevious,\n    MatStepHeader,\n    MatStepperIcon,\n  ],\n  declarations: [\n    MatHorizontalStepper,\n    MatVerticalStepper,\n    MatStep,\n    MatStepLabel,\n    MatStepper,\n    MatStepperNext,\n    MatStepperPrevious,\n    MatStepHeader,\n    MatStepperIcon,\n  ],\n  providers: [MatStepperIntl, ErrorStateMatcher],\n})\nexport class MatStepperModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  IterableDiffers,\n  Optional,\n  ViewEncapsulation\n} from '@angular/core';\nimport {CDK_TABLE_TEMPLATE, CdkTable} from '@angular/cdk/table';\nimport {Directionality} from '@angular/cdk/bidi';\n\n/**\n * Wrapper for the CdkTable with Material design styles.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-table, table[mat-table]',\n  exportAs: 'matTable',\n  template: CDK_TABLE_TEMPLATE,\n  styleUrls: ['table.css'],\n  host: {\n    'class': 'mat-table',\n  },\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatTable<T> extends CdkTable<T> {\n  /** Overrides the sticky CSS class set by the `CdkTable`. */\n  protected stickyCssClass = 'mat-table-sticky';\n\n  // TODO(andrewseguin): Remove this explicitly set constructor when the compiler knows how to\n  // properly build the es6 version of the class. Currently sets ctorParameters to empty due to a\n  // fixed bug.\n  // https://github.com/angular/tsickle/pull/760 - tsickle PR that fixed this\n  // https://github.com/angular/angular/pull/23531 - updates compiler-cli to fixed version\n  constructor(protected _differs: IterableDiffers,\n              protected _changeDetectorRef: ChangeDetectorRef,\n              protected _elementRef: ElementRef,\n              @Attribute('role') role: string,\n              @Optional() protected readonly _dir: Directionality) {\n    super(_differs, _changeDetectorRef, _elementRef, role, _dir);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, ElementRef, Input, TemplateRef} from '@angular/core';\nimport {\n  CdkCell,\n  CdkCellDef,\n  CdkColumnDef, CdkFooterCell, CdkFooterCellDef,\n  CdkHeaderCell,\n  CdkHeaderCellDef,\n} from '@angular/cdk/table';\n\n/**\n * Cell definition for the mat-table.\n * Captures the template of a column's data row cell as well as cell-specific properties.\n */\n@Directive({\n  selector: '[matCellDef]',\n  providers: [{provide: CdkCellDef, useExisting: MatCellDef}]\n})\nexport class MatCellDef extends CdkCellDef {\n  // TODO(andrewseguin): Remove this constructor after compiler-cli is updated; see issue #9329\n  constructor(/** @docs-private */ public template: TemplateRef<any>) {\n    super(template);\n  }\n}\n\n/**\n * Header cell definition for the mat-table.\n * Captures the template of a column's header cell and as well as cell-specific properties.\n */\n@Directive({\n  selector: '[matHeaderCellDef]',\n  providers: [{provide: CdkHeaderCellDef, useExisting: MatHeaderCellDef}]\n})\nexport class MatHeaderCellDef extends CdkHeaderCellDef {\n  // TODO(andrewseguin): Remove this constructor after compiler-cli is updated; see issue #9329\n  constructor(/** @docs-private */ public template: TemplateRef<any>) {\n    super(template);\n  }\n}\n\n/**\n * Footer cell definition for the mat-table.\n * Captures the template of a column's footer cell and as well as cell-specific properties.\n */\n@Directive({\n  selector: '[matFooterCellDef]',\n  providers: [{provide: CdkFooterCellDef, useExisting: MatFooterCellDef}]\n})\nexport class MatFooterCellDef extends CdkFooterCellDef {\n  // TODO(andrewseguin): Remove this constructor after compiler-cli is updated; see issue #9329\n  constructor(/** @docs-private */ public template: TemplateRef<any>) {\n    super(template);\n  }\n}\n\n/**\n * Column definition for the mat-table.\n * Defines a set of cells available for a table column.\n */\n@Directive({\n  selector: '[matColumnDef]',\n  providers: [{provide: CdkColumnDef, useExisting: MatColumnDef}],\n})\nexport class MatColumnDef extends CdkColumnDef {\n  /** Unique name for this column. */\n  @Input('matColumnDef') name: string;\n\n  /** Whether this column should be sticky positioned at the start of the row */\n  @Input() sticky: boolean;\n\n  /** Whether this column should be sticky positioned on the end of the row */\n  @Input() stickyEnd: boolean;\n}\n\n/** Header cell template container that adds the right classes and role. */\n@Directive({\n  selector: 'mat-header-cell, th[mat-header-cell]',\n  host: {\n    'class': 'mat-header-cell',\n    'role': 'columnheader',\n  },\n})\nexport class MatHeaderCell extends CdkHeaderCell {\n  constructor(columnDef: CdkColumnDef,\n              elementRef: ElementRef) {\n    super(columnDef, elementRef);\n    elementRef.nativeElement.classList.add(`mat-column-${columnDef.cssClassFriendlyName}`);\n  }\n}\n\n/** Footer cell template container that adds the right classes and role. */\n@Directive({\n  selector: 'mat-footer-cell, td[mat-footer-cell]',\n  host: {\n    'class': 'mat-footer-cell',\n    'role': 'gridcell',\n  },\n})\nexport class MatFooterCell extends CdkFooterCell {\n  constructor(columnDef: CdkColumnDef,\n              elementRef: ElementRef) {\n    super(columnDef, elementRef);\n    elementRef.nativeElement.classList.add(`mat-column-${columnDef.cssClassFriendlyName}`);\n  }\n}\n\n/** Cell template container that adds the right classes and role. */\n@Directive({\n  selector: 'mat-cell, td[mat-cell]',\n  host: {\n    'class': 'mat-cell',\n    'role': 'gridcell',\n  },\n})\nexport class MatCell extends CdkCell {\n  constructor(columnDef: CdkColumnDef,\n              elementRef: ElementRef) {\n    super(columnDef, elementRef);\n    elementRef.nativeElement.classList.add(`mat-column-${columnDef.cssClassFriendlyName}`);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  Directive,\n  IterableDiffers, TemplateRef,\n  ViewEncapsulation\n} from '@angular/core';\nimport {\n  CDK_ROW_TEMPLATE, CdkFooterRow, CdkFooterRowDef,\n  CdkHeaderRow,\n  CdkHeaderRowDef,\n  CdkRow,\n  CdkRowDef,\n} from '@angular/cdk/table';\n\n/**\n * Header row definition for the mat-table.\n * Captures the header row's template and other header properties such as the columns to display.\n */\n@Directive({\n  selector: '[matHeaderRowDef]',\n  providers: [{provide: CdkHeaderRowDef, useExisting: MatHeaderRowDef}],\n  inputs: ['columns: matHeaderRowDef', 'sticky: matHeaderRowDefSticky'],\n})\nexport class MatHeaderRowDef extends CdkHeaderRowDef {\n  // TODO(andrewseguin): Remove this constructor after compiler-cli is updated; see issue #9329\n  constructor(template: TemplateRef<any>, _differs: IterableDiffers) {\n    super(template, _differs);\n  }\n}\n\n/**\n * Footer row definition for the mat-table.\n * Captures the footer row's template and other footer properties such as the columns to display.\n */\n@Directive({\n  selector: '[matFooterRowDef]',\n  providers: [{provide: CdkFooterRowDef, useExisting: MatFooterRowDef}],\n  inputs: ['columns: matFooterRowDef', 'sticky: matFooterRowDefSticky'],\n})\nexport class MatFooterRowDef extends CdkFooterRowDef {\n  // TODO(andrewseguin): Remove this constructor after compiler-cli is updated; see issue #9329\n  constructor(template: TemplateRef<any>, _differs: IterableDiffers) {\n    super(template, _differs);\n  }\n}\n\n/**\n * Data row definition for the mat-table.\n * Captures the footer row's template and other footer properties such as the columns to display and\n * a when predicate that describes when this row should be used.\n */\n@Directive({\n  selector: '[matRowDef]',\n  providers: [{provide: CdkRowDef, useExisting: MatRowDef}],\n  inputs: ['columns: matRowDefColumns', 'when: matRowDefWhen'],\n})\nexport class MatRowDef<T> extends CdkRowDef<T> {\n  // TODO(andrewseguin): Remove this constructor after compiler-cli is updated; see issue #9329\n  constructor(template: TemplateRef<any>, _differs: IterableDiffers) {\n    super(template, _differs);\n  }\n}\n\n/** Footer template container that contains the cell outlet. Adds the right class and role. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-header-row, tr[mat-header-row]',\n  template: CDK_ROW_TEMPLATE,\n  host: {\n    'class': 'mat-header-row',\n    'role': 'row',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matHeaderRow',\n  providers: [{provide: CdkHeaderRow, useExisting: MatHeaderRow}],\n})\nexport class MatHeaderRow extends CdkHeaderRow { }\n\n/** Footer template container that contains the cell outlet. Adds the right class and role. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-footer-row, tr[mat-footer-row]',\n  template: CDK_ROW_TEMPLATE,\n  host: {\n    'class': 'mat-footer-row',\n    'role': 'row',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matFooterRow',\n  providers: [{provide: CdkFooterRow, useExisting: MatFooterRow}],\n})\nexport class MatFooterRow extends CdkFooterRow { }\n\n/** Data row template container that contains the cell outlet. Adds the right class and role. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-row, tr[mat-row]',\n  template: CDK_ROW_TEMPLATE,\n  host: {\n    'class': 'mat-row',\n    'role': 'row',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matRow',\n  providers: [{provide: CdkRow, useExisting: MatRow}],\n})\nexport class MatRow extends CdkRow { }\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatTable} from './table';\nimport {CdkTableModule} from '@angular/cdk/table';\nimport {\n  MatCell,\n  MatCellDef,\n  MatColumnDef,\n  MatFooterCell,\n  MatFooterCellDef,\n  MatHeaderCell,\n  MatHeaderCellDef\n} from './cell';\nimport {\n  MatFooterRow,\n  MatFooterRowDef,\n  MatHeaderRow,\n  MatHeaderRowDef,\n  MatRow,\n  MatRowDef\n} from './row';\nimport {CommonModule} from '@angular/common';\nimport {MatCommonModule} from '@angular/material/core';\n\nconst EXPORTED_DECLARATIONS = [\n  // Table\n  MatTable,\n\n  // Template defs\n  MatHeaderCellDef,\n  MatHeaderRowDef,\n  MatColumnDef,\n  MatCellDef,\n  MatRowDef,\n  MatFooterCellDef,\n  MatFooterRowDef,\n\n  // Cell directives\n  MatHeaderCell,\n  MatCell,\n  MatFooterCell,\n\n  // Row directions\n  MatHeaderRow,\n  MatRow,\n  MatFooterRow,\n];\n\n@NgModule({\n  imports: [CdkTableModule, CommonModule, MatCommonModule],\n  exports: EXPORTED_DECLARATIONS,\n  declarations: EXPORTED_DECLARATIONS,\n})\nexport class MatTableModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {_isNumberValue} from '@angular/cdk/coercion';\nimport {DataSource} from '@angular/cdk/table';\nimport {\n  BehaviorSubject,\n  combineLatest,\n  merge,\n  Observable,\n  of as observableOf,\n  Subscription\n} from 'rxjs';\nimport {MatPaginator, PageEvent} from '@angular/material/paginator';\nimport {MatSort, Sort} from '@angular/material/sort';\nimport {map} from 'rxjs/operators';\n\n\n/**\n * Data source that accepts a client-side data array and includes native support of filtering,\n * sorting (using MatSort), and pagination (using MatPaginator).\n *\n * Allows for sort customization by overriding sortingDataAccessor, which defines how data\n * properties are accessed. Also allows for filter customization by overriding filterTermAccessor,\n * which defines how row data is converted to a string for filter matching.\n */\nexport class MatTableDataSource<T> extends DataSource<T> {\n  /** Stream that emits when a new data array is set on the data source. */\n  private readonly _data: BehaviorSubject<T[]>;\n\n  /** Stream emitting render data to the table (depends on ordered data changes). */\n  private readonly _renderData = new BehaviorSubject<T[]>([]);\n\n  /** Stream that emits when a new filter string is set on the data source. */\n  private readonly _filter = new BehaviorSubject<string>('');\n\n  /**\n   * Subscription to the changes that should trigger an update to the table's rendered rows, such\n   * as filtering, sorting, pagination, or base data changes.\n   */\n  _renderChangesSubscription = Subscription.EMPTY;\n\n  /**\n   * The filtered set of data that has been matched by the filter string, or all the data if there\n   * is no filter. Useful for knowing the set of data the table represents.\n   * For example, a 'selectAll()' function would likely want to select the set of filtered data\n   * shown to the user rather than all the data.\n   */\n  filteredData: T[];\n\n  /** Array of data that should be rendered by the table, where each object represents one row. */\n  get data() { return this._data.value; }\n  set data(data: T[]) { this._data.next(data); }\n\n  /**\n   * Filter term that should be used to filter out objects from the data array. To override how\n   * data objects match to this filter string, provide a custom function for filterPredicate.\n   */\n  get filter(): string { return this._filter.value; }\n  set filter(filter: string) { this._filter.next(filter); }\n\n  /**\n   * Instance of the MatSort directive used by the table to control its sorting. Sort changes\n   * emitted by the MatSort will trigger an update to the table's rendered data.\n   */\n  get sort(): MatSort | null { return this._sort; }\n  set sort(sort: MatSort|null) {\n    this._sort = sort;\n    this._updateChangeSubscription();\n  }\n  private _sort: MatSort|null;\n\n  /**\n   * Instance of the MatPaginator component used by the table to control what page of the data is\n   * displayed. Page changes emitted by the MatPaginator will trigger an update to the\n   * table's rendered data.\n   *\n   * Note that the data source uses the paginator's properties to calculate which page of data\n   * should be displayed. If the paginator receives its properties as template inputs,\n   * e.g. `[pageLength]=100` or `[pageIndex]=1`, then be sure that the paginator's view has been\n   * initialized before assigning it to this data source.\n   */\n  get paginator(): MatPaginator | null { return this._paginator; }\n  set paginator(paginator: MatPaginator|null) {\n    this._paginator = paginator;\n    this._updateChangeSubscription();\n  }\n  private _paginator: MatPaginator|null;\n\n  /**\n   * Data accessor function that is used for accessing data properties for sorting through\n   * the default sortData function.\n   * This default function assumes that the sort header IDs (which defaults to the column name)\n   * matches the data's properties (e.g. column Xyz represents data['Xyz']).\n   * May be set to a custom function for different behavior.\n   * @param data Data object that is being accessed.\n   * @param sortHeaderId The name of the column that represents the data.\n   */\n  sortingDataAccessor: ((data: T, sortHeaderId: string) => string|number) =\n      (data: T, sortHeaderId: string): string|number => {\n    const value: any = data[sortHeaderId];\n    return _isNumberValue(value) ? Number(value) : value;\n  }\n\n  /**\n   * Gets a sorted copy of the data array based on the state of the MatSort. Called\n   * after changes are made to the filtered data or when sort changes are emitted from MatSort.\n   * By default, the function retrieves the active sort and its direction and compares data\n   * by retrieving data using the sortingDataAccessor. May be overridden for a custom implementation\n   * of data ordering.\n   * @param data The array of data that should be sorted.\n   * @param sort The connected MatSort that holds the current sort state.\n   */\n  sortData: ((data: T[], sort: MatSort) => T[]) = (data: T[], sort: MatSort): T[] => {\n    const active = sort.active;\n    const direction = sort.direction;\n    if (!active || direction == '') { return data; }\n\n    return data.sort((a, b) => {\n      let valueA = this.sortingDataAccessor(a, active);\n      let valueB = this.sortingDataAccessor(b, active);\n\n      // If both valueA and valueB exist (truthy), then compare the two. Otherwise, check if\n      // one value exists while the other doesn't. In this case, existing value should come first.\n      // This avoids inconsistent results when comparing values to undefined/null.\n      // If neither value exists, return 0 (equal).\n      let comparatorResult = 0;\n      if (valueA != null && valueB != null) {\n        // Check if one value is greater than the other; if equal, comparatorResult should remain 0.\n        if (valueA > valueB) {\n          comparatorResult = 1;\n        } else if (valueA < valueB) {\n          comparatorResult = -1;\n        }\n      } else if (valueA != null) {\n        comparatorResult = 1;\n      } else if (valueB != null) {\n        comparatorResult = -1;\n      }\n\n      return comparatorResult * (direction == 'asc' ? 1 : -1);\n    });\n  }\n\n  /**\n   * Checks if a data object matches the data source's filter string. By default, each data object\n   * is converted to a string of its properties and returns true if the filter has\n   * at least one occurrence in that string. By default, the filter string has its whitespace\n   * trimmed and the match is case-insensitive. May be overridden for a custom implementation of\n   * filter matching.\n   * @param data Data object used to check against the filter.\n   * @param filter Filter string that has been set on the data source.\n   * @returns Whether the filter matches against the data\n   */\n  filterPredicate: ((data: T, filter: string) => boolean) = (data: T, filter: string): boolean => {\n    // Transform the data into a lowercase string of all property values.\n    const accumulator = (currentTerm, key) => currentTerm + data[key];\n    const dataStr = Object.keys(data).reduce(accumulator, '').toLowerCase();\n\n    // Transform the filter by converting it to lowercase and removing whitespace.\n    const transformedFilter = filter.trim().toLowerCase();\n\n    return dataStr.indexOf(transformedFilter) != -1;\n  }\n\n  constructor(initialData: T[] = []) {\n    super();\n    this._data = new BehaviorSubject<T[]>(initialData);\n    this._updateChangeSubscription();\n  }\n\n  /**\n   * Subscribe to changes that should trigger an update to the table's rendered rows. When the\n   * changes occur, process the current state of the filter, sort, and pagination along with\n   * the provided base data and send it to the table for rendering.\n   */\n  _updateChangeSubscription() {\n    // Sorting and/or pagination should be watched if MatSort and/or MatPaginator are provided.\n    // The events should emit whenever the component emits a change or initializes, or if no\n    // component is provided, a stream with just a null event should be provided.\n    // The `sortChange` and `pageChange` acts as a signal to the combineLatests below so that the\n    // pipeline can progress to the next step. Note that the value from these streams are not used,\n    // they purely act as a signal to progress in the pipeline.\n    const sortChange: Observable<Sort|null> = this._sort ?\n        merge<Sort>(this._sort.sortChange, this._sort.initialized) :\n        observableOf(null);\n    const pageChange: Observable<PageEvent|null> = this._paginator ?\n        merge<PageEvent>(this._paginator.page, this._paginator.initialized) :\n        observableOf(null);\n\n    const dataStream = this._data;\n    // Watch for base data or filter changes to provide a filtered set of data.\n    const filteredData = combineLatest(dataStream, this._filter)\n      .pipe(map(([data]) => this._filterData(data)));\n    // Watch for filtered data or sort changes to provide an ordered set of data.\n    const orderedData = combineLatest(filteredData, sortChange)\n      .pipe(map(([data]) => this._orderData(data)));\n    // Watch for ordered data or page changes to provide a paged set of data.\n    const paginatedData = combineLatest(orderedData, pageChange)\n      .pipe(map(([data]) => this._pageData(data)));\n    // Watched for paged data changes and send the result to the table to render.\n    this._renderChangesSubscription.unsubscribe();\n    this._renderChangesSubscription = paginatedData.subscribe(data => this._renderData.next(data));\n  }\n\n  /**\n   * Returns a filtered data array where each filter object contains the filter string within\n   * the result of the filterTermAccessor function. If no filter is set, returns the data array\n   * as provided.\n   */\n  _filterData(data: T[]) {\n    // If there is a filter string, filter out data that does not contain it.\n    // Each data object is converted to a string using the function defined by filterTermAccessor.\n    // May be overridden for customization.\n    this.filteredData =\n        !this.filter ? data : data.filter(obj => this.filterPredicate(obj, this.filter));\n\n    if (this.paginator) { this._updatePaginator(this.filteredData.length); }\n\n    return this.filteredData;\n  }\n\n  /**\n   * Returns a sorted copy of the data if MatSort has a sort applied, otherwise just returns the\n   * data array as provided. Uses the default data accessor for data lookup, unless a\n   * sortDataAccessor function is defined.\n   */\n  _orderData(data: T[]): T[] {\n    // If there is no active sort or direction, return the data without trying to sort.\n    if (!this.sort) { return data; }\n\n    return this.sortData(data.slice(), this.sort);\n  }\n\n  /**\n   * Returns a paged splice of the provided data array according to the provided MatPaginator's page\n   * index and length. If there is no paginator provided, returns the data array as provided.\n   */\n  _pageData(data: T[]): T[] {\n    if (!this.paginator) { return data; }\n\n    const startIndex = this.paginator.pageIndex * this.paginator.pageSize;\n    return data.slice().splice(startIndex, this.paginator.pageSize);\n  }\n\n  /**\n   * Updates the paginator to reflect the length of the filtered data, and makes sure that the page\n   * index does not exceed the paginator's last page. Values are changed in a resolved promise to\n   * guard against making property changes within a round of change detection.\n   */\n  _updatePaginator(filteredDataLength: number) {\n    Promise.resolve().then(() => {\n      if (!this.paginator) { return; }\n\n      this.paginator.length = filteredDataLength;\n\n      // If the page index is set beyond the page, reduce it to the last page.\n      if (this.paginator.pageIndex > 0) {\n        const lastPageIndex = Math.ceil(this.paginator.length / this.paginator.pageSize) - 1 || 0;\n        this.paginator.pageIndex = Math.min(this.paginator.pageIndex, lastPageIndex);\n      }\n    });\n  }\n\n  /**\n   * Used by the MatTable. Called when it connects to the data source.\n   * @docs-private\n   */\n  connect() { return this._renderData; }\n\n  /**\n   * Used by the MatTable. Called when it is destroyed. No-op.\n   * @docs-private\n   */\n  disconnect() { }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, ElementRef, Inject, InjectionToken, NgZone} from '@angular/core';\n\n\n/**\n * Interface for a a MatInkBar positioner method, defining the positioning and width of the ink\n * bar in a set of tabs.\n */\n// tslint:disable-next-line class-name Using leading underscore to denote internal interface.\nexport interface _MatInkBarPositioner {\n  (element: HTMLElement): { left: string, width: string };\n}\n\n/** Injection token for the MatInkBar's Positioner. */\nexport const _MAT_INK_BAR_POSITIONER =\n  new InjectionToken<_MatInkBarPositioner>('MatInkBarPositioner', {\n    providedIn: 'root',\n    factory: _MAT_INK_BAR_POSITIONER_FACTORY\n  });\n\n/**\n * The default positioner function for the MatInkBar.\n * @docs-private\n */\nexport function _MAT_INK_BAR_POSITIONER_FACTORY(): _MatInkBarPositioner {\n  const method = (element: HTMLElement) => ({\n    left: element ? (element.offsetLeft || 0) + 'px' : '0',\n    width: element ? (element.offsetWidth || 0) + 'px' : '0',\n  });\n\n  return method;\n}\n\n/**\n * The ink-bar is used to display and animate the line underneath the current active tab label.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-ink-bar',\n  host: {\n    'class': 'mat-ink-bar',\n  },\n})\nexport class MatInkBar {\n  constructor(\n    private _elementRef: ElementRef,\n    private _ngZone: NgZone,\n    @Inject(_MAT_INK_BAR_POSITIONER) private _inkBarPositioner: _MatInkBarPositioner) { }\n\n  /**\n   * Calculates the styles from the provided element in order to align the ink-bar to that element.\n   * Shows the ink bar if previously set as hidden.\n   * @param element\n   */\n  alignToElement(element: HTMLElement) {\n    this.show();\n\n    if (typeof requestAnimationFrame !== 'undefined') {\n      this._ngZone.runOutsideAngular(() => {\n        requestAnimationFrame(() => this._setStyles(element));\n      });\n    } else {\n      this._setStyles(element);\n    }\n  }\n\n  /** Shows the ink bar. */\n  show(): void {\n    this._elementRef.nativeElement.style.visibility = 'visible';\n  }\n\n  /** Hides the ink bar. */\n  hide(): void {\n    this._elementRef.nativeElement.style.visibility = 'hidden';\n  }\n\n  /**\n   * Sets the proper styles to the ink bar element.\n   * @param element\n   */\n  private _setStyles(element: HTMLElement) {\n    const positions = this._inkBarPositioner(element);\n    const inkBar: HTMLElement = this._elementRef.nativeElement;\n\n    inkBar.style.left = positions.left;\n    inkBar.style.width = positions.width;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, TemplateRef, ViewContainerRef} from '@angular/core';\nimport {CdkPortal} from '@angular/cdk/portal';\n\n/** Used to flag tab labels for use with the portal directive */\n@Directive({\n  selector: '[mat-tab-label], [matTabLabel]',\n})\nexport class MatTabLabel extends CdkPortal {\n  constructor(templateRef: TemplateRef<any>, viewContainerRef: ViewContainerRef) {\n    super(templateRef, viewContainerRef);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, TemplateRef} from '@angular/core';\n\n/** Decorates the `ng-template` tags and reads out the template from it. */\n@Directive({selector: '[matTabContent]'})\nexport class MatTabContent {\n  constructor(public template: TemplateRef<any>) { }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor, FocusOrigin} from '@angular/cdk/a11y';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty, coerceNumberProperty} from '@angular/cdk/coercion';\nimport {\n  DOWN_ARROW,\n  END,\n  HOME,\n  LEFT_ARROW,\n  PAGE_DOWN,\n  PAGE_UP,\n  RIGHT_ARROW,\n  UP_ARROW,\n} from '@angular/cdk/keycodes';\nimport {\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Input,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Output,\n  ViewChild,\n  ViewEncapsulation,\n  Inject,\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {\n  CanColor,\n  CanDisable,\n  HammerInput,\n  HasTabIndex,\n  mixinColor,\n  mixinDisabled,\n  mixinTabIndex,\n} from '@angular/material/core';\nimport {Subscription} from 'rxjs';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\n\n/**\n * Visually, a 30px separation between tick marks looks best. This is very subjective but it is\n * the default separation we chose.\n */\nconst MIN_AUTO_TICK_SEPARATION = 30;\n\n/** The thumb gap size for a disabled slider. */\nconst DISABLED_THUMB_GAP = 7;\n\n/** The thumb gap size for a non-active slider at its minimum value. */\nconst MIN_VALUE_NONACTIVE_THUMB_GAP = 7;\n\n/** The thumb gap size for an active slider at its minimum value. */\nconst MIN_VALUE_ACTIVE_THUMB_GAP = 10;\n\n/**\n * Provider Expression that allows mat-slider to register as a ControlValueAccessor.\n * This allows it to support [(ngModel)] and [formControl].\n */\nexport const MAT_SLIDER_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatSlider),\n  multi: true\n};\n\n/** A simple change event emitted by the MatSlider component. */\nexport class MatSliderChange {\n  /** The MatSlider that changed. */\n  source: MatSlider;\n\n  /** The new value of the source slider. */\n  value: number | null;\n}\n\n\n// Boilerplate for applying mixins to MatSlider.\n/** @docs-private */\nexport class MatSliderBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatSliderMixinBase =\n  mixinTabIndex(mixinColor(mixinDisabled(MatSliderBase), 'accent'));\n\n/**\n * Allows users to select from a range of values by moving the slider thumb. It is similar in\n * behavior to the native `<input type=\"range\">` element.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-slider',\n  exportAs: 'matSlider',\n  providers: [MAT_SLIDER_VALUE_ACCESSOR],\n  host: {\n    '(focus)': '_onFocus()',\n    '(blur)': '_onBlur()',\n    '(click)': '_onClick($event)',\n    '(keydown)': '_onKeydown($event)',\n    '(keyup)': '_onKeyup()',\n    '(mouseenter)': '_onMouseenter()',\n    '(slide)': '_onSlide($event)',\n    '(slideend)': '_onSlideEnd()',\n    '(slidestart)': '_onSlideStart($event)',\n    'class': 'mat-slider',\n    'role': 'slider',\n    '[tabIndex]': 'tabIndex',\n    '[attr.aria-disabled]': 'disabled',\n    '[attr.aria-valuemax]': 'max',\n    '[attr.aria-valuemin]': 'min',\n    '[attr.aria-valuenow]': 'value',\n    '[attr.aria-orientation]': 'vertical ? \"vertical\" : \"horizontal\"',\n    '[class.mat-slider-disabled]': 'disabled',\n    '[class.mat-slider-has-ticks]': 'tickInterval',\n    '[class.mat-slider-horizontal]': '!vertical',\n    '[class.mat-slider-axis-inverted]': '_invertAxis',\n    '[class.mat-slider-sliding]': '_isSliding',\n    '[class.mat-slider-thumb-label-showing]': 'thumbLabel',\n    '[class.mat-slider-vertical]': 'vertical',\n    '[class.mat-slider-min-value]': '_isMinValue',\n    '[class.mat-slider-hide-last-tick]': 'disabled || _isMinValue && _thumbGap && _invertAxis',\n    '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"',\n  },\n  templateUrl: 'slider.html',\n  styleUrls: ['slider.css'],\n  inputs: ['disabled', 'color', 'tabIndex'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatSlider extends _MatSliderMixinBase\n    implements ControlValueAccessor, OnDestroy, CanDisable, CanColor, OnInit, HasTabIndex {\n  /** Whether the slider is inverted. */\n  @Input()\n  get invert(): boolean { return this._invert; }\n  set invert(value: boolean) {\n    this._invert = coerceBooleanProperty(value);\n  }\n  private _invert = false;\n\n  /** The maximum value that the slider can have. */\n  @Input()\n  get max(): number { return this._max; }\n  set max(v: number) {\n    this._max = coerceNumberProperty(v, this._max);\n    this._percent = this._calculatePercentage(this._value);\n\n    // Since this also modifies the percentage, we need to let the change detection know.\n    this._changeDetectorRef.markForCheck();\n  }\n  private _max: number = 100;\n\n  /** The minimum value that the slider can have. */\n  @Input()\n  get min(): number { return this._min; }\n  set min(v: number) {\n    this._min = coerceNumberProperty(v, this._min);\n\n    // If the value wasn't explicitly set by the user, set it to the min.\n    if (this._value === null) {\n      this.value = this._min;\n    }\n    this._percent = this._calculatePercentage(this._value);\n\n    // Since this also modifies the percentage, we need to let the change detection know.\n    this._changeDetectorRef.markForCheck();\n  }\n  private _min: number = 0;\n\n  /** The values at which the thumb will snap. */\n  @Input()\n  get step(): number { return this._step; }\n  set step(v: number) {\n    this._step = coerceNumberProperty(v, this._step);\n\n    if (this._step % 1 !== 0) {\n      this._roundToDecimal = this._step.toString().split('.').pop()!.length;\n    }\n\n    // Since this could modify the label, we need to notify the change detection.\n    this._changeDetectorRef.markForCheck();\n  }\n  private _step: number = 1;\n\n  /** Whether or not to show the thumb label. */\n  @Input()\n  get thumbLabel(): boolean { return this._thumbLabel; }\n  set thumbLabel(value: boolean) { this._thumbLabel = coerceBooleanProperty(value); }\n  private _thumbLabel: boolean = false;\n\n  /**\n   * How often to show ticks. Relative to the step so that a tick always appears on a step.\n   * Ex: Tick interval of 4 with a step of 3 will draw a tick every 4 steps (every 12 values).\n   */\n  @Input()\n  get tickInterval() { return this._tickInterval; }\n  set tickInterval(value: 'auto' | number) {\n    if (value === 'auto') {\n      this._tickInterval = 'auto';\n    } else if (typeof value === 'number' || typeof value === 'string') {\n      this._tickInterval = coerceNumberProperty(value, this._tickInterval as number);\n    } else {\n      this._tickInterval = 0;\n    }\n  }\n  private _tickInterval: 'auto' | number = 0;\n\n  /** Value of the slider. */\n  @Input()\n  get value(): number | null {\n    // If the value needs to be read and it is still uninitialized, initialize it to the min.\n    if (this._value === null) {\n      this.value = this._min;\n    }\n    return this._value;\n  }\n  set value(v: number | null) {\n    if (v !== this._value) {\n      let value = coerceNumberProperty(v);\n\n      // While incrementing by a decimal we can end up with values like 33.300000000000004.\n      // Truncate it to ensure that it matches the label and to make it easier to work with.\n      if (this._roundToDecimal) {\n        value = parseFloat(value.toFixed(this._roundToDecimal));\n      }\n\n      this._value = value;\n      this._percent = this._calculatePercentage(this._value);\n\n      // Since this also modifies the percentage, we need to let the change detection know.\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n  private _value: number | null = null;\n\n  /**\n   * Function that will be used to format the value before it is displayed\n   * in the thumb label. Can be used to format very large number in order\n   * for them to fit into the slider thumb.\n   */\n  @Input() displayWith: (value: number | null) => string | number;\n\n  /** Whether the slider is vertical. */\n  @Input()\n  get vertical(): boolean { return this._vertical; }\n  set vertical(value: boolean) {\n    this._vertical = coerceBooleanProperty(value);\n  }\n  private _vertical = false;\n\n  /** Event emitted when the slider value has changed. */\n  @Output() readonly change: EventEmitter<MatSliderChange> = new EventEmitter<MatSliderChange>();\n\n  /** Event emitted when the slider thumb moves. */\n  @Output() readonly input: EventEmitter<MatSliderChange> = new EventEmitter<MatSliderChange>();\n\n  /** The value to be used for display purposes. */\n  get displayValue(): string | number {\n    if (this.displayWith) {\n      return this.displayWith(this.value);\n    }\n\n    // Note that this could be improved further by rounding something like 0.999 to 1 or\n    // 0.899 to 0.9, however it is very performance sensitive, because it gets called on\n    // every change detection cycle.\n    if (this._roundToDecimal && this.value && this.value % 1 !== 0) {\n      return this.value.toFixed(this._roundToDecimal);\n    }\n\n    return this.value || 0;\n  }\n\n  /** set focus to the host element */\n  focus() {\n    this._focusHostElement();\n  }\n\n  /** blur the host element */\n  blur() {\n    this._blurHostElement();\n  }\n\n  /** onTouch function registered via registerOnTouch (ControlValueAccessor). */\n  onTouched: () => any = () => {};\n\n  /** The percentage of the slider that coincides with the value. */\n  get percent(): number { return this._clamp(this._percent); }\n  private _percent: number = 0;\n\n  /**\n   * Whether or not the thumb is sliding.\n   * Used to determine if there should be a transition for the thumb and fill track.\n   */\n  _isSliding: boolean = false;\n\n  /**\n   * Whether or not the slider is active (clicked or sliding).\n   * Used to shrink and grow the thumb as according to the Material Design spec.\n   */\n  _isActive: boolean = false;\n\n  /**\n   * Whether the axis of the slider is inverted.\n   * (i.e. whether moving the thumb in the positive x or y direction decreases the slider's value).\n   */\n  get _invertAxis() {\n    // Standard non-inverted mode for a vertical slider should be dragging the thumb from bottom to\n    // top. However from a y-axis standpoint this is inverted.\n    return this.vertical ? !this.invert : this.invert;\n  }\n\n\n  /** Whether the slider is at its minimum value. */\n  get _isMinValue() {\n    return this.percent === 0;\n  }\n\n  /**\n   * The amount of space to leave between the slider thumb and the track fill & track background\n   * elements.\n   */\n  get _thumbGap() {\n    if (this.disabled) {\n      return DISABLED_THUMB_GAP;\n    }\n    if (this._isMinValue && !this.thumbLabel) {\n      return this._isActive ? MIN_VALUE_ACTIVE_THUMB_GAP : MIN_VALUE_NONACTIVE_THUMB_GAP;\n    }\n    return 0;\n  }\n\n  /** CSS styles for the track background element. */\n  get _trackBackgroundStyles(): { [key: string]: string } {\n    let axis = this.vertical ? 'Y' : 'X';\n    let sign = this._invertMouseCoords ? '-' : '';\n    return {\n      'transform': `translate${axis}(${sign}${this._thumbGap}px) scale${axis}(${1 - this.percent})`\n    };\n  }\n\n  /** CSS styles for the track fill element. */\n  get _trackFillStyles(): { [key: string]: string } {\n    let axis = this.vertical ? 'Y' : 'X';\n    let sign = this._invertMouseCoords ? '' : '-';\n    return {\n      'transform': `translate${axis}(${sign}${this._thumbGap}px) scale${axis}(${this.percent})`\n    };\n  }\n\n  /** CSS styles for the ticks container element. */\n  get _ticksContainerStyles(): { [key: string]: string } {\n    let axis = this.vertical ? 'Y' : 'X';\n    // For a horizontal slider in RTL languages we push the ticks container off the left edge\n    // instead of the right edge to avoid causing a horizontal scrollbar to appear.\n    let sign = !this.vertical && this._direction == 'rtl' ? '' : '-';\n    let offset = this._tickIntervalPercent / 2 * 100;\n    return {\n      'transform': `translate${axis}(${sign}${offset}%)`\n    };\n  }\n\n  /** CSS styles for the ticks element. */\n  get _ticksStyles(): { [key: string]: string } {\n    let tickSize = this._tickIntervalPercent * 100;\n    let backgroundSize = this.vertical ? `2px ${tickSize}%` : `${tickSize}% 2px`;\n    let axis = this.vertical ? 'Y' : 'X';\n    // Depending on the direction we pushed the ticks container, push the ticks the opposite\n    // direction to re-center them but clip off the end edge. In RTL languages we need to flip the\n    // ticks 180 degrees so we're really cutting off the end edge abd not the start.\n    let sign = !this.vertical && this._direction == 'rtl' ? '-' : '';\n    let rotate = !this.vertical && this._direction == 'rtl' ? ' rotate(180deg)' : '';\n    let styles: { [key: string]: string } = {\n      'backgroundSize': backgroundSize,\n      // Without translateZ ticks sometimes jitter as the slider moves on Chrome & Firefox.\n      'transform': `translateZ(0) translate${axis}(${sign}${tickSize / 2}%)${rotate}`\n    };\n\n    if (this._isMinValue && this._thumbGap) {\n      let side = this.vertical ?\n          (this._invertAxis ? 'Bottom' : 'Top') :\n          (this._invertAxis ? 'Right' : 'Left');\n      styles[`padding${side}`] = `${this._thumbGap}px`;\n    }\n\n    return styles;\n  }\n\n  get _thumbContainerStyles(): { [key: string]: string } {\n    let axis = this.vertical ? 'Y' : 'X';\n    // For a horizontal slider in RTL languages we push the thumb container off the left edge\n    // instead of the right edge to avoid causing a horizontal scrollbar to appear.\n    let invertOffset =\n        (this._direction == 'rtl' && !this.vertical) ? !this._invertAxis : this._invertAxis;\n    let offset = (invertOffset ? this.percent : 1 - this.percent) * 100;\n    return {\n      'transform': `translate${axis}(-${offset}%)`\n    };\n  }\n\n  /** The size of a tick interval as a percentage of the size of the track. */\n  private _tickIntervalPercent: number = 0;\n\n  /** The dimensions of the slider. */\n  private _sliderDimensions: ClientRect | null = null;\n\n  private _controlValueAccessorChangeFn: (value: any) => void = () => {};\n\n  /** Decimal places to round to, based on the step amount. */\n  private _roundToDecimal: number;\n\n  /** Subscription to the Directionality change EventEmitter. */\n  private _dirChangeSubscription = Subscription.EMPTY;\n\n  /** The value of the slider when the slide start event fires. */\n  private _valueOnSlideStart: number | null;\n\n  /** Reference to the inner slider wrapper element. */\n  @ViewChild('sliderWrapper') private _sliderWrapper: ElementRef;\n\n  /**\n   * Whether mouse events should be converted to a slider position by calculating their distance\n   * from the right or bottom edge of the slider as opposed to the top or left.\n   */\n  private get _invertMouseCoords() {\n    return (this._direction == 'rtl' && !this.vertical) ? !this._invertAxis : this._invertAxis;\n  }\n\n  /** The language direction for this slider element. */\n  private get _direction() {\n    return (this._dir && this._dir.value == 'rtl') ? 'rtl' : 'ltr';\n  }\n\n  constructor(elementRef: ElementRef,\n              private _focusMonitor: FocusMonitor,\n              private _changeDetectorRef: ChangeDetectorRef,\n              @Optional() private _dir: Directionality,\n              @Attribute('tabindex') tabIndex: string,\n              // @deletion-target 7.0.0 `_animationMode` parameter to be made required.\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode?: string) {\n    super(elementRef);\n\n    this.tabIndex = parseInt(tabIndex) || 0;\n  }\n\n  ngOnInit() {\n    this._focusMonitor\n        .monitor(this._elementRef.nativeElement, true)\n        .subscribe((origin: FocusOrigin) => {\n          this._isActive = !!origin && origin !== 'keyboard';\n          this._changeDetectorRef.detectChanges();\n        });\n    if (this._dir) {\n      this._dirChangeSubscription = this._dir.change.subscribe(() => {\n        this._changeDetectorRef.markForCheck();\n      });\n    }\n  }\n\n  ngOnDestroy() {\n    this._focusMonitor.stopMonitoring(this._elementRef.nativeElement);\n    this._dirChangeSubscription.unsubscribe();\n  }\n\n  _onMouseenter() {\n    if (this.disabled) {\n      return;\n    }\n\n    // We save the dimensions of the slider here so we can use them to update the spacing of the\n    // ticks and determine where on the slider click and slide events happen.\n    this._sliderDimensions = this._getSliderDimensions();\n    this._updateTickIntervalPercent();\n  }\n\n  _onClick(event: MouseEvent) {\n    if (this.disabled) {\n      return;\n    }\n\n    let oldValue = this.value;\n    this._isSliding = false;\n    this._focusHostElement();\n    this._updateValueFromPosition({x: event.clientX, y: event.clientY});\n\n    // Emit a change and input event if the value changed.\n    if (oldValue != this.value) {\n      this._emitInputEvent();\n      this._emitChangeEvent();\n    }\n  }\n\n  _onSlide(event: HammerInput) {\n    if (this.disabled) {\n      return;\n    }\n\n    // The slide start event sometimes fails to fire on iOS, so if we're not already in the sliding\n    // state, call the slide start handler manually.\n    if (!this._isSliding) {\n      this._onSlideStart(null);\n    }\n\n    // Prevent the slide from selecting anything else.\n    event.preventDefault();\n\n    let oldValue = this.value;\n    this._updateValueFromPosition({x: event.center.x, y: event.center.y});\n\n    // Native range elements always emit `input` events when the value changed while sliding.\n    if (oldValue != this.value) {\n      this._emitInputEvent();\n    }\n  }\n\n  _onSlideStart(event: HammerInput | null) {\n    if (this.disabled || this._isSliding) {\n      return;\n    }\n\n    // Simulate mouseenter in case this is a mobile device.\n    this._onMouseenter();\n\n    this._isSliding = true;\n    this._focusHostElement();\n    this._valueOnSlideStart = this.value;\n\n    if (event) {\n      this._updateValueFromPosition({x: event.center.x, y: event.center.y});\n      event.preventDefault();\n    }\n  }\n\n  _onSlideEnd() {\n    this._isSliding = false;\n\n    if (this._valueOnSlideStart != this.value && !this.disabled) {\n      this._emitChangeEvent();\n    }\n    this._valueOnSlideStart = null;\n  }\n\n  _onFocus() {\n    // We save the dimensions of the slider here so we can use them to update the spacing of the\n    // ticks and determine where on the slider click and slide events happen.\n    this._sliderDimensions = this._getSliderDimensions();\n    this._updateTickIntervalPercent();\n  }\n\n  _onBlur() {\n    this.onTouched();\n  }\n\n  _onKeydown(event: KeyboardEvent) {\n    if (this.disabled) { return; }\n\n    let oldValue = this.value;\n\n    switch (event.keyCode) {\n      case PAGE_UP:\n        this._increment(10);\n        break;\n      case PAGE_DOWN:\n        this._increment(-10);\n        break;\n      case END:\n        this.value = this.max;\n        break;\n      case HOME:\n        this.value = this.min;\n        break;\n      case LEFT_ARROW:\n        // NOTE: For a sighted user it would make more sense that when they press an arrow key on an\n        // inverted slider the thumb moves in that direction. However for a blind user, nothing\n        // about the slider indicates that it is inverted. They will expect left to be decrement,\n        // regardless of how it appears on the screen. For speakers ofRTL languages, they probably\n        // expect left to mean increment. Therefore we flip the meaning of the side arrow keys for\n        // RTL. For inverted sliders we prefer a good a11y experience to having it \"look right\" for\n        // sighted users, therefore we do not swap the meaning.\n        this._increment(this._direction == 'rtl' ? 1 : -1);\n        break;\n      case UP_ARROW:\n        this._increment(1);\n        break;\n      case RIGHT_ARROW:\n        // See comment on LEFT_ARROW about the conditions under which we flip the meaning.\n        this._increment(this._direction == 'rtl' ? -1 : 1);\n        break;\n      case DOWN_ARROW:\n        this._increment(-1);\n        break;\n      default:\n        // Return if the key is not one that we explicitly handle to avoid calling preventDefault on\n        // it.\n        return;\n    }\n\n    if (oldValue != this.value) {\n      this._emitInputEvent();\n      this._emitChangeEvent();\n    }\n\n    this._isSliding = true;\n    event.preventDefault();\n  }\n\n  _onKeyup() {\n    this._isSliding = false;\n  }\n\n  /** Increments the slider by the given number of steps (negative number decrements). */\n  private _increment(numSteps: number) {\n    this.value = this._clamp((this.value || 0) + this.step * numSteps, this.min, this.max);\n  }\n\n  /** Calculate the new value from the new physical location. The value will always be snapped. */\n  private _updateValueFromPosition(pos: {x: number, y: number}) {\n    if (!this._sliderDimensions) {\n      return;\n    }\n\n    let offset = this.vertical ? this._sliderDimensions.top : this._sliderDimensions.left;\n    let size = this.vertical ? this._sliderDimensions.height : this._sliderDimensions.width;\n    let posComponent = this.vertical ? pos.y : pos.x;\n\n    // The exact value is calculated from the event and used to find the closest snap value.\n    let percent = this._clamp((posComponent - offset) / size);\n\n    if (this._invertMouseCoords) {\n      percent = 1 - percent;\n    }\n\n    // Since the steps may not divide cleanly into the max value, if the user\n    // slid to 0 or 100 percent, we jump to the min/max value. This approach\n    // is slightly more intuitive than using `Math.ceil` below, because it\n    // follows the user's pointer closer.\n    if (percent === 0) {\n      this.value = this.min;\n    } else if (percent === 1) {\n      this.value = this.max;\n    } else {\n      const exactValue = this._calculateValue(percent);\n\n      // This calculation finds the closest step by finding the closest\n      // whole number divisible by the step relative to the min.\n      const closestValue = Math.round((exactValue - this.min) / this.step) * this.step + this.min;\n\n      // The value needs to snap to the min and max.\n      this.value = this._clamp(closestValue, this.min, this.max);\n    }\n  }\n\n  /** Emits a change event if the current value is different from the last emitted value. */\n  private _emitChangeEvent() {\n    this._controlValueAccessorChangeFn(this.value);\n    this.change.emit(this._createChangeEvent());\n  }\n\n  /** Emits an input event when the current value is different from the last emitted value. */\n  private _emitInputEvent() {\n    this.input.emit(this._createChangeEvent());\n  }\n\n  /** Updates the amount of space between ticks as a percentage of the width of the slider. */\n  private _updateTickIntervalPercent() {\n    if (!this.tickInterval || !this._sliderDimensions) {\n      return;\n    }\n\n    if (this.tickInterval == 'auto') {\n      let trackSize = this.vertical ? this._sliderDimensions.height : this._sliderDimensions.width;\n      let pixelsPerStep = trackSize * this.step / (this.max - this.min);\n      let stepsPerTick = Math.ceil(MIN_AUTO_TICK_SEPARATION / pixelsPerStep);\n      let pixelsPerTick = stepsPerTick * this.step;\n      this._tickIntervalPercent = pixelsPerTick / trackSize;\n    } else {\n      this._tickIntervalPercent = this.tickInterval * this.step / (this.max - this.min);\n    }\n  }\n\n  /** Creates a slider change object from the specified value. */\n  private _createChangeEvent(value = this.value): MatSliderChange {\n    let event = new MatSliderChange();\n\n    event.source = this;\n    event.value = value;\n\n    return event;\n  }\n\n  /** Calculates the percentage of the slider that a value is. */\n  private _calculatePercentage(value: number | null) {\n    return ((value || 0) - this.min) / (this.max - this.min);\n  }\n\n  /** Calculates the value a percentage of the slider corresponds to. */\n  private _calculateValue(percentage: number) {\n    return this.min + percentage * (this.max - this.min);\n  }\n\n  /** Return a number between two numbers. */\n  private _clamp(value: number, min = 0, max = 1) {\n    return Math.max(min, Math.min(value, max));\n  }\n\n  /**\n   * Get the bounding client rect of the slider track element.\n   * The track is used rather than the native element to ignore the extra space that the thumb can\n   * take up.\n   */\n  private _getSliderDimensions() {\n    return this._sliderWrapper ? this._sliderWrapper.nativeElement.getBoundingClientRect() : null;\n  }\n\n  /**\n   * Focuses the native element.\n   * Currently only used to allow a blur event to fire but will be used with keyboard input later.\n   */\n  private _focusHostElement() {\n    this._elementRef.nativeElement.focus();\n  }\n\n  /** Blurs the native element. */\n  private _blurHostElement() {\n    this._elementRef.nativeElement.blur();\n  }\n\n  /**\n   * Sets the model value. Implemented as part of ControlValueAccessor.\n   * @param value\n   */\n  writeValue(value: any) {\n    this.value = value;\n  }\n\n  /**\n   * Registers a callback to be triggered when the value has changed.\n   * Implemented as part of ControlValueAccessor.\n   * @param fn Callback to be registered.\n   */\n  registerOnChange(fn: (value: any) => void) {\n    this._controlValueAccessorChangeFn = fn;\n  }\n\n  /**\n   * Registers a callback to be triggered when the component is touched.\n   * Implemented as part of ControlValueAccessor.\n   * @param fn Callback to be registered.\n   */\n  registerOnTouched(fn: any) {\n    this.onTouched = fn;\n  }\n\n  /**\n   * Sets whether the component should be disabled.\n   * Implemented as part of ControlValueAccessor.\n   * @param isDisabled\n   */\n  setDisabledState(isDisabled: boolean) {\n    this.disabled = isDisabled;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {GestureConfig, MatCommonModule} from '@angular/material/core';\nimport {HAMMER_GESTURE_CONFIG} from '@angular/platform-browser';\nimport {MatSlider} from './slider';\n\n\n@NgModule({\n  imports: [CommonModule, MatCommonModule],\n  exports: [MatSlider, MatCommonModule],\n  declarations: [MatSlider],\n  providers: [{provide: HAMMER_GESTURE_CONFIG, useClass: GestureConfig}]\n})\nexport class MatSliderModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {OverlayRef} from '@angular/cdk/overlay';\nimport {Observable, Subject} from 'rxjs';\nimport {MatSnackBarContainer} from './snack-bar-container';\n\n\n/** Event that is emitted when a snack bar is dismissed. */\nexport interface MatSnackBarDismiss {\n  /** Whether the snack bar was dismissed using the action button. */\n  dismissedByAction: boolean;\n}\n\n/**\n * Reference to a snack bar dispatched from the snack bar service.\n */\nexport class MatSnackBarRef<T> {\n  /** The instance of the component making up the content of the snack bar. */\n  instance: T;\n\n  /**\n   * The instance of the component making up the content of the snack bar.\n   * @docs-private\n   */\n  containerInstance: MatSnackBarContainer;\n\n  /** Subject for notifying the user that the snack bar has been dismissed. */\n  private readonly _afterDismissed = new Subject<MatSnackBarDismiss>();\n\n  /** Subject for notifying the user that the snack bar has opened and appeared. */\n  private readonly _afterOpened = new Subject<void>();\n\n  /** Subject for notifying the user that the snack bar action was called. */\n  private readonly _onAction = new Subject<void>();\n\n  /**\n   * Timeout ID for the duration setTimeout call. Used to clear the timeout if the snackbar is\n   * dismissed before the duration passes.\n   */\n  private _durationTimeoutId: number;\n\n  /** Whether the snack bar was dismissed using the action button. */\n  private _dismissedByAction = false;\n\n  constructor(containerInstance: MatSnackBarContainer,\n              private _overlayRef: OverlayRef) {\n    this.containerInstance = containerInstance;\n    // Dismiss snackbar on action.\n    this.onAction().subscribe(() => this.dismiss());\n    containerInstance._onExit.subscribe(() => this._finishDismiss());\n  }\n\n  /** Dismisses the snack bar. */\n  dismiss(): void {\n    if (!this._afterDismissed.closed) {\n      this.containerInstance.exit();\n    }\n    clearTimeout(this._durationTimeoutId);\n  }\n\n  /** Marks the snackbar action clicked. */\n  dismissWithAction(): void {\n    if (!this._onAction.closed) {\n      this._dismissedByAction = true;\n      this._onAction.next();\n      this._onAction.complete();\n    }\n  }\n\n\n  /**\n   * Marks the snackbar action clicked.\n   * @deprecated Use `dismissWithAction` instead.\n   * @deletion-target 7.0.0\n   */\n  closeWithAction(): void {\n    this.dismissWithAction();\n  }\n\n  /** Dismisses the snack bar after some duration */\n  _dismissAfter(duration: number): void {\n    this._durationTimeoutId = setTimeout(() => this.dismiss(), duration);\n  }\n\n  /** Marks the snackbar as opened */\n  _open(): void {\n    if (!this._afterOpened.closed) {\n      this._afterOpened.next();\n      this._afterOpened.complete();\n    }\n  }\n\n  /** Cleans up the DOM after closing. */\n  private _finishDismiss(): void {\n    this._overlayRef.dispose();\n\n    if (!this._onAction.closed) {\n      this._onAction.complete();\n    }\n\n    this._afterDismissed.next({dismissedByAction: this._dismissedByAction});\n    this._afterDismissed.complete();\n    this._dismissedByAction = false;\n  }\n\n  /** Gets an observable that is notified when the snack bar is finished closing. */\n  afterDismissed(): Observable<MatSnackBarDismiss> {\n    return this._afterDismissed.asObservable();\n  }\n\n  /** Gets an observable that is notified when the snack bar has opened and appeared. */\n  afterOpened(): Observable<void> {\n    return this.containerInstance._onEnter;\n  }\n\n  /** Gets an observable that is notified when the snack bar action is called. */\n  onAction(): Observable<void> {\n    return this._onAction.asObservable();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ViewContainerRef, InjectionToken} from '@angular/core';\nimport {AriaLivePoliteness} from '@angular/cdk/a11y';\nimport {Direction} from '@angular/cdk/bidi';\n\n/** Injection token that can be used to access the data that was passed in to a snack bar. */\nexport const MAT_SNACK_BAR_DATA = new InjectionToken<any>('MatSnackBarData');\n\n/** Possible values for horizontalPosition on MatSnackBarConfig. */\nexport type MatSnackBarHorizontalPosition = 'start' | 'center' | 'end' | 'left' | 'right';\n\n/** Possible values for verticalPosition on MatSnackBarConfig. */\nexport type MatSnackBarVerticalPosition = 'top' | 'bottom';\n\n/**\n * Configuration used when opening a snack-bar.\n */\nexport class MatSnackBarConfig<D = any> {\n  /** The politeness level for the MatAriaLiveAnnouncer announcement. */\n  politeness?: AriaLivePoliteness = 'assertive';\n\n  /** Message to be announced by the MatAriaLiveAnnouncer */\n  announcementMessage?: string = '';\n\n  /** The view container to place the overlay for the snack bar into. */\n  viewContainerRef?: ViewContainerRef;\n\n  /** The length of time in milliseconds to wait before automatically dismissing the snack bar. */\n  duration?: number = 0;\n\n  /** Extra CSS classes to be added to the snack bar container. */\n  panelClass?: string | string[];\n\n  /** Text layout direction for the snack bar. */\n  direction?: Direction;\n\n  /** Data being injected into the child component. */\n  data?: D | null = null;\n\n  /** The horizontal position to place the snack bar. */\n  horizontalPosition?: MatSnackBarHorizontalPosition = 'center';\n\n  /** The vertical position to place the snack bar. */\n  verticalPosition?: MatSnackBarVerticalPosition = 'bottom';\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\nimport {AnimationCurves, AnimationDurations} from '@angular/material/core';\n\n/** Animations used by the Material snack bar. */\nexport const matSnackBarAnimations: {\n  readonly contentFade: AnimationTriggerMetadata;\n  readonly snackBarState: AnimationTriggerMetadata;\n} = {\n  /** Animation that slides the dialog in and out of view and fades the opacity. */\n  contentFade: trigger('contentFade', [\n    transition(':enter', [\n      style({opacity: '0'}),\n      animate(`${AnimationDurations.COMPLEX} ${AnimationCurves.STANDARD_CURVE}`)\n    ])\n  ]),\n\n  /** Animation that shows and hides a snack bar. */\n  snackBarState: trigger('state', [\n    state('visible-top, visible-bottom', style({transform: 'translateY(0%)'})),\n    transition('visible-top => hidden-top, visible-bottom => hidden-bottom',\n      animate(`${AnimationDurations.EXITING} ${AnimationCurves.ACCELERATION_CURVE}`)),\n    transition('void => visible-top, void => visible-bottom',\n      animate(`${AnimationDurations.ENTERING} ${AnimationCurves.DECELERATION_CURVE}`)),\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Component, ViewEncapsulation, Inject, ChangeDetectionStrategy} from '@angular/core';\nimport {MatSnackBarRef} from './snack-bar-ref';\nimport {MAT_SNACK_BAR_DATA} from './snack-bar-config';\nimport {matSnackBarAnimations} from './snack-bar-animations';\n\n\n/**\n * A component used to open as the default snack bar, matching material spec.\n * This should only be used internally by the snack bar service.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'simple-snack-bar',\n  templateUrl: 'simple-snack-bar.html',\n  styleUrls: ['simple-snack-bar.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  animations: [matSnackBarAnimations.contentFade],\n  host: {\n    '[@contentFade]': '',\n    'class': 'mat-simple-snackbar',\n  }\n})\nexport class SimpleSnackBar {\n  /** Data that was injected into the snack bar. */\n  data: { message: string, action: string };\n\n  constructor(\n    public snackBarRef: MatSnackBarRef<SimpleSnackBar>,\n    @Inject(MAT_SNACK_BAR_DATA) data: any) {\n    this.data = data;\n  }\n\n  /** Performs the action on the snack bar. */\n  action(): void {\n    this.snackBarRef.dismissWithAction();\n  }\n\n  /** If the action button should be shown. */\n  get hasAction(): boolean {\n    return !!this.data.action;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {AnimationEvent} from '@angular/animations';\nimport {\n  BasePortalOutlet,\n  CdkPortalOutlet,\n  ComponentPortal,\n  TemplatePortal,\n} from '@angular/cdk/portal';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ComponentRef,\n  ElementRef,\n  EmbeddedViewRef,\n  NgZone,\n  OnDestroy,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {Observable, Subject} from 'rxjs';\nimport {take} from 'rxjs/operators';\nimport {matSnackBarAnimations} from './snack-bar-animations';\nimport {MatSnackBarConfig} from './snack-bar-config';\n\n\n/**\n * Internal component that wraps user-provided snack bar content.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'snack-bar-container',\n  templateUrl: 'snack-bar-container.html',\n  styleUrls: ['snack-bar-container.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  animations: [matSnackBarAnimations.snackBarState],\n  host: {\n    'role': 'alert',\n    'class': 'mat-snack-bar-container',\n    '[@state]': '_animationState',\n    '(@state.done)': 'onAnimationEnd($event)'\n  },\n})\nexport class MatSnackBarContainer extends BasePortalOutlet implements OnDestroy {\n  /** Whether the component has been destroyed. */\n  private _destroyed = false;\n\n  /** The portal outlet inside of this container into which the snack bar content will be loaded. */\n  @ViewChild(CdkPortalOutlet) _portalOutlet: CdkPortalOutlet;\n\n  /** Subject for notifying that the snack bar has exited from view. */\n  readonly _onExit: Subject<any> = new Subject();\n\n  /** Subject for notifying that the snack bar has finished entering the view. */\n  readonly _onEnter: Subject<any> = new Subject();\n\n  /** The state of the snack bar animations. */\n  _animationState = 'void';\n\n  constructor(\n    private _ngZone: NgZone,\n    private _elementRef: ElementRef,\n    private _changeDetectorRef: ChangeDetectorRef,\n    /** The snack bar configuration. */\n    public snackBarConfig: MatSnackBarConfig) {\n\n    super();\n  }\n\n  /** Attach a component portal as content to this snack bar container. */\n  attachComponentPortal<T>(portal: ComponentPortal<T>): ComponentRef<T> {\n    this._assertNotAttached();\n    this._applySnackBarClasses();\n    return this._portalOutlet.attachComponentPortal(portal);\n  }\n\n  /** Attach a template portal as content to this snack bar container. */\n  attachTemplatePortal<C>(portal: TemplatePortal<C>): EmbeddedViewRef<C> {\n    this._assertNotAttached();\n    this._applySnackBarClasses();\n    return this._portalOutlet.attachTemplatePortal(portal);\n  }\n\n  /** Handle end of animations, updating the state of the snackbar. */\n  onAnimationEnd(event: AnimationEvent) {\n    const {fromState, toState} = event;\n\n    if ((toState === 'void' && fromState !== 'void') || toState.startsWith('hidden')) {\n      this._completeExit();\n    }\n\n    if (toState.startsWith('visible')) {\n      // Note: we shouldn't use `this` inside the zone callback,\n      // because it can cause a memory leak.\n      const onEnter = this._onEnter;\n\n      this._ngZone.run(() => {\n        onEnter.next();\n        onEnter.complete();\n      });\n    }\n  }\n\n  /** Begin animation of snack bar entrance into view. */\n  enter(): void {\n    if (!this._destroyed) {\n      this._animationState = `visible-${this.snackBarConfig.verticalPosition}`;\n      this._changeDetectorRef.detectChanges();\n    }\n  }\n\n  /** Begin animation of the snack bar exiting from view. */\n  exit(): Observable<void> {\n    this._animationState = `hidden-${this.snackBarConfig.verticalPosition}`;\n    return this._onExit;\n  }\n\n  /** Makes sure the exit callbacks have been invoked when the element is destroyed. */\n  ngOnDestroy() {\n    this._destroyed = true;\n    this._completeExit();\n  }\n\n  /**\n   * Waits for the zone to settle before removing the element. Helps prevent\n   * errors where we end up removing an element which is in the middle of an animation.\n   */\n  private _completeExit() {\n    this._ngZone.onMicrotaskEmpty.asObservable().pipe(take(1)).subscribe(() => {\n      this._onExit.next();\n      this._onExit.complete();\n    });\n  }\n\n  /** Applies the various positioning and user-configured CSS classes to the snack bar. */\n  private _applySnackBarClasses() {\n    const element: HTMLElement = this._elementRef.nativeElement;\n    const panelClasses = this.snackBarConfig.panelClass;\n\n    if (panelClasses) {\n      if (Array.isArray(panelClasses)) {\n        // Note that we can't use a spread here, because IE doesn't support multiple arguments.\n        panelClasses.forEach(cssClass => element.classList.add(cssClass));\n      } else {\n        element.classList.add(panelClasses);\n      }\n    }\n\n    if (this.snackBarConfig.horizontalPosition === 'center') {\n      element.classList.add('mat-snack-bar-center');\n    }\n\n    if (this.snackBarConfig.verticalPosition === 'top') {\n      element.classList.add('mat-snack-bar-top');\n    }\n  }\n\n  /** Asserts that no content is already attached to the container. */\n  private _assertNotAttached() {\n    if (this._portalOutlet.hasAttached()) {\n      throw Error('Attempting to attach snack bar content after content is already attached');\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatButtonModule} from '@angular/material/button';\nimport {SimpleSnackBar} from './simple-snack-bar';\nimport {MatSnackBarContainer} from './snack-bar-container';\n\n\n@NgModule({\n  imports: [\n    OverlayModule,\n    PortalModule,\n    CommonModule,\n    MatButtonModule,\n    MatCommonModule,\n  ],\n  exports: [MatSnackBarContainer, MatCommonModule],\n  declarations: [MatSnackBarContainer, SimpleSnackBar],\n  entryComponents: [MatSnackBarContainer, SimpleSnackBar],\n})\nexport class MatSnackBarModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {LiveAnnouncer} from '@angular/cdk/a11y';\nimport {BreakpointObserver, Breakpoints} from '@angular/cdk/layout';\nimport {Overlay, OverlayConfig, OverlayRef} from '@angular/cdk/overlay';\nimport {ComponentPortal, ComponentType, PortalInjector, TemplatePortal} from '@angular/cdk/portal';\nimport {\n  ComponentRef,\n  EmbeddedViewRef,\n  Inject,\n  Injectable,\n  InjectionToken,\n  Injector,\n  Optional,\n  SkipSelf,\n  TemplateRef,\n} from '@angular/core';\nimport {take, takeUntil} from 'rxjs/operators';\nimport {SimpleSnackBar} from './simple-snack-bar';\nimport {MAT_SNACK_BAR_DATA, MatSnackBarConfig} from './snack-bar-config';\nimport {MatSnackBarContainer} from './snack-bar-container';\nimport {MatSnackBarModule} from './snack-bar-module';\nimport {MatSnackBarRef} from './snack-bar-ref';\n\n\n/** Injection token that can be used to specify default snack bar. */\nexport const MAT_SNACK_BAR_DEFAULT_OPTIONS =\n    new InjectionToken<MatSnackBarConfig>('mat-snack-bar-default-options', {\n      providedIn: 'root',\n      factory: MAT_SNACK_BAR_DEFAULT_OPTIONS_FACTORY,\n    });\n\n/** @docs-private */\nexport function MAT_SNACK_BAR_DEFAULT_OPTIONS_FACTORY(): MatSnackBarConfig {\n  return new MatSnackBarConfig();\n}\n\n/**\n * Service to dispatch Material Design snack bar messages.\n */\n@Injectable({providedIn: MatSnackBarModule})\nexport class MatSnackBar {\n  /**\n   * Reference to the current snack bar in the view *at this level* (in the Angular injector tree).\n   * If there is a parent snack-bar service, all operations should delegate to that parent\n   * via `_openedSnackBarRef`.\n   */\n  private _snackBarRefAtThisLevel: MatSnackBarRef<any> | null = null;\n\n  /** Reference to the currently opened snackbar at *any* level. */\n  get _openedSnackBarRef(): MatSnackBarRef<any> | null {\n    const parent = this._parentSnackBar;\n    return parent ? parent._openedSnackBarRef : this._snackBarRefAtThisLevel;\n  }\n\n  set _openedSnackBarRef(value: MatSnackBarRef<any> | null) {\n    if (this._parentSnackBar) {\n      this._parentSnackBar._openedSnackBarRef = value;\n    } else {\n      this._snackBarRefAtThisLevel = value;\n    }\n  }\n\n  constructor(\n      private _overlay: Overlay,\n      private _live: LiveAnnouncer,\n      private _injector: Injector,\n      private _breakpointObserver: BreakpointObserver,\n      @Optional() @SkipSelf() private _parentSnackBar: MatSnackBar,\n      @Inject(MAT_SNACK_BAR_DEFAULT_OPTIONS) private _defaultConfig: MatSnackBarConfig) {}\n\n  /**\n   * Creates and dispatches a snack bar with a custom component for the content, removing any\n   * currently opened snack bars.\n   *\n   * @param component Component to be instantiated.\n   * @param config Extra configuration for the snack bar.\n   */\n  openFromComponent<T>(component: ComponentType<T>, config?: MatSnackBarConfig):\n    MatSnackBarRef<T> {\n    return this._attach(component, config) as MatSnackBarRef<T>;\n  }\n\n  /**\n   * Creates and dispatches a snack bar with a custom template for the content, removing any\n   * currently opened snack bars.\n   *\n   * @param template Template to be instantiated.\n   * @param config Extra configuration for the snack bar.\n   */\n  openFromTemplate(template: TemplateRef<any>, config?: MatSnackBarConfig):\n    MatSnackBarRef<EmbeddedViewRef<any>> {\n    return this._attach(template, config);\n  }\n\n  /**\n   * Opens a snackbar with a message and an optional action.\n   * @param message The message to show in the snackbar.\n   * @param action The label for the snackbar action.\n   * @param config Additional configuration options for the snackbar.\n   */\n  open(message: string, action: string = '', config?: MatSnackBarConfig):\n      MatSnackBarRef<SimpleSnackBar> {\n    const _config = {...this._defaultConfig, ...config};\n\n    // Since the user doesn't have access to the component, we can\n    // override the data to pass in our own message and action.\n    _config.data = {message, action};\n    _config.announcementMessage = message;\n\n    return this.openFromComponent(SimpleSnackBar, _config);\n  }\n\n  /**\n   * Dismisses the currently-visible snack bar.\n   */\n  dismiss(): void {\n    if (this._openedSnackBarRef) {\n      this._openedSnackBarRef.dismiss();\n    }\n  }\n\n  /**\n   * Attaches the snack bar container component to the overlay.\n   */\n  private _attachSnackBarContainer(overlayRef: OverlayRef,\n                                   config: MatSnackBarConfig): MatSnackBarContainer {\n\n    const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n    const injector = new PortalInjector(userInjector || this._injector, new WeakMap([\n      [MatSnackBarConfig, config]\n    ]));\n\n    const containerPortal =\n        new ComponentPortal(MatSnackBarContainer, config.viewContainerRef, injector);\n    const containerRef: ComponentRef<MatSnackBarContainer> = overlayRef.attach(containerPortal);\n    containerRef.instance.snackBarConfig = config;\n    return containerRef.instance;\n  }\n\n  /**\n   * Places a new component or a template as the content of the snack bar container.\n   */\n  private _attach<T>(content: ComponentType<T> | TemplateRef<T>, userConfig?: MatSnackBarConfig):\n    MatSnackBarRef<T | EmbeddedViewRef<any>> {\n\n    const config = {...new MatSnackBarConfig(), ...this._defaultConfig, ...userConfig};\n    const overlayRef = this._createOverlay(config);\n    const container = this._attachSnackBarContainer(overlayRef, config);\n    const snackBarRef = new MatSnackBarRef<T | EmbeddedViewRef<any>>(container, overlayRef);\n\n    if (content instanceof TemplateRef) {\n      const portal = new TemplatePortal(content, null!, {\n        $implicit: config.data,\n        snackBarRef\n      } as any);\n\n      snackBarRef.instance = container.attachTemplatePortal(portal);\n    } else {\n      const injector = this._createInjector(config, snackBarRef);\n      const portal = new ComponentPortal(content, undefined, injector);\n      const contentRef = container.attachComponentPortal<T>(portal);\n\n      // We can't pass this via the injector, because the injector is created earlier.\n      snackBarRef.instance = contentRef.instance;\n    }\n\n    // Subscribe to the breakpoint observer and attach the mat-snack-bar-handset class as\n    // appropriate. This class is applied to the overlay element because the overlay must expand to\n    // fill the width of the screen for full width snackbars.\n    this._breakpointObserver.observe(Breakpoints.Handset).pipe(\n      takeUntil(overlayRef.detachments().pipe(take(1)))\n    ).subscribe(state => {\n      if (state.matches) {\n        overlayRef.overlayElement.classList.add('mat-snack-bar-handset');\n      } else {\n        overlayRef.overlayElement.classList.remove('mat-snack-bar-handset');\n      }\n    });\n\n    this._animateSnackBar(snackBarRef, config);\n    this._openedSnackBarRef = snackBarRef;\n    return this._openedSnackBarRef;\n  }\n\n  /** Animates the old snack bar out and the new one in. */\n  private _animateSnackBar(snackBarRef: MatSnackBarRef<any>, config: MatSnackBarConfig) {\n    // When the snackbar is dismissed, clear the reference to it.\n    snackBarRef.afterDismissed().subscribe(() => {\n      // Clear the snackbar ref if it hasn't already been replaced by a newer snackbar.\n      if (this._openedSnackBarRef == snackBarRef) {\n        this._openedSnackBarRef = null;\n      }\n    });\n\n    if (this._openedSnackBarRef) {\n      // If a snack bar is already in view, dismiss it and enter the\n      // new snack bar after exit animation is complete.\n      this._openedSnackBarRef.afterDismissed().subscribe(() => {\n        snackBarRef.containerInstance.enter();\n      });\n      this._openedSnackBarRef.dismiss();\n    } else {\n      // If no snack bar is in view, enter the new snack bar.\n      snackBarRef.containerInstance.enter();\n    }\n\n    // If a dismiss timeout is provided, set up dismiss based on after the snackbar is opened.\n    if (config.duration && config.duration > 0) {\n      snackBarRef.afterOpened().subscribe(() => snackBarRef._dismissAfter(config.duration!));\n    }\n\n    if (config.announcementMessage) {\n      this._live.announce(config.announcementMessage, config.politeness);\n    }\n  }\n\n  /**\n   * Creates a new overlay and places it in the correct location.\n   * @param config The user-specified snack bar config.\n   */\n  private _createOverlay(config: MatSnackBarConfig): OverlayRef {\n    const overlayConfig = new OverlayConfig();\n    overlayConfig.direction = config.direction;\n\n    let positionStrategy = this._overlay.position().global();\n    // Set horizontal position.\n    const isRtl = config.direction === 'rtl';\n    const isLeft = (\n      config.horizontalPosition === 'left' ||\n      (config.horizontalPosition === 'start' && !isRtl) ||\n      (config.horizontalPosition === 'end' && isRtl));\n    const isRight = !isLeft && config.horizontalPosition !== 'center';\n    if (isLeft) {\n      positionStrategy.left('0');\n    } else if (isRight) {\n      positionStrategy.right('0');\n    } else {\n      positionStrategy.centerHorizontally();\n    }\n    // Set horizontal position.\n    if (config.verticalPosition === 'top') {\n      positionStrategy.top('0');\n    } else {\n      positionStrategy.bottom('0');\n    }\n\n    overlayConfig.positionStrategy = positionStrategy;\n    return this._overlay.create(overlayConfig);\n  }\n\n  /**\n   * Creates an injector to be used inside of a snack bar component.\n   * @param config Config that was used to create the snack bar.\n   * @param snackBarRef Reference to the snack bar.\n   */\n  private _createInjector<T>(\n      config: MatSnackBarConfig,\n      snackBarRef: MatSnackBarRef<T>): PortalInjector {\n\n    const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n\n    return new PortalInjector(userInjector || this._injector, new WeakMap<any, any>([\n      [MatSnackBarRef, snackBarRef],\n      [MAT_SNACK_BAR_DATA, config.data]\n    ]));\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Directive,\n  EventEmitter,\n  Input,\n  isDevMode,\n  OnChanges,\n  OnDestroy,\n  OnInit,\n  Output,\n} from '@angular/core';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {CanDisable, HasInitialized, mixinDisabled, mixinInitialized} from '@angular/material/core';\nimport {SortDirection} from './sort-direction';\nimport {\n  getSortDuplicateSortableIdError,\n  getSortHeaderMissingIdError,\n  getSortInvalidDirectionError\n} from './sort-errors';\nimport {Subject} from 'rxjs';\n\n/** Interface for a directive that holds sorting state consumed by `MatSortHeader`. */\nexport interface MatSortable {\n  /** The id of the column being sorted. */\n  id: string;\n\n  /** Starting sort direction. */\n  start: 'asc' | 'desc';\n\n  /** Whether to disable clearing the sorting state. */\n  disableClear: boolean;\n}\n\n/** The current sort state. */\nexport interface Sort {\n  /** The id of the column being sorted. */\n  active: string;\n\n  /** The sort direction. */\n  direction: SortDirection;\n}\n\n// Boilerplate for applying mixins to MatSort.\n/** @docs-private */\nexport class MatSortBase {}\nexport const _MatSortMixinBase = mixinInitialized(mixinDisabled(MatSortBase));\n\n/** Container for MatSortables to manage the sort state and provide default sort parameters. */\n@Directive({\n  selector: '[matSort]',\n  exportAs: 'matSort',\n  inputs: ['disabled: matSortDisabled']\n})\nexport class MatSort extends _MatSortMixinBase\n    implements CanDisable, HasInitialized, OnChanges, OnDestroy, OnInit {\n  /** Collection of all registered sortables that this directive manages. */\n  sortables = new Map<string, MatSortable>();\n\n  /** Used to notify any child components listening to state changes. */\n  readonly _stateChanges = new Subject<void>();\n\n  /** The id of the most recently sorted MatSortable. */\n  @Input('matSortActive') active: string;\n\n  /**\n   * The direction to set when an MatSortable is initially sorted.\n   * May be overriden by the MatSortable's sort start.\n   */\n  @Input('matSortStart') start: 'asc' | 'desc' = 'asc';\n\n  /** The sort direction of the currently active MatSortable. */\n  @Input('matSortDirection')\n  get direction(): SortDirection { return this._direction; }\n  set direction(direction: SortDirection) {\n    if (isDevMode() && direction && direction !== 'asc' && direction !== 'desc') {\n      throw getSortInvalidDirectionError(direction);\n    }\n    this._direction = direction;\n  }\n  private _direction: SortDirection = '';\n\n  /**\n   * Whether to disable the user from clearing the sort by finishing the sort direction cycle.\n   * May be overriden by the MatSortable's disable clear input.\n   */\n  @Input('matSortDisableClear')\n  get disableClear(): boolean { return this._disableClear; }\n  set disableClear(v: boolean) { this._disableClear = coerceBooleanProperty(v); }\n  private _disableClear: boolean;\n\n  /** Event emitted when the user changes either the active sort or sort direction. */\n  @Output('matSortChange') readonly sortChange: EventEmitter<Sort> = new EventEmitter<Sort>();\n\n  /**\n   * Register function to be used by the contained MatSortables. Adds the MatSortable to the\n   * collection of MatSortables.\n   */\n  register(sortable: MatSortable): void {\n    if (!sortable.id) {\n      throw getSortHeaderMissingIdError();\n    }\n\n    if (this.sortables.has(sortable.id)) {\n      throw getSortDuplicateSortableIdError(sortable.id);\n    }\n    this.sortables.set(sortable.id, sortable);\n  }\n\n  /**\n   * Unregister function to be used by the contained MatSortables. Removes the MatSortable from the\n   * collection of contained MatSortables.\n   */\n  deregister(sortable: MatSortable): void {\n    this.sortables.delete(sortable.id);\n  }\n\n  /** Sets the active sort id and determines the new sort direction. */\n  sort(sortable: MatSortable): void {\n    if (this.active != sortable.id) {\n      this.active = sortable.id;\n      this.direction = sortable.start ? sortable.start : this.start;\n    } else {\n      this.direction = this.getNextSortDirection(sortable);\n    }\n\n    this.sortChange.emit({active: this.active, direction: this.direction});\n  }\n\n  /** Returns the next sort direction of the active sortable, checking for potential overrides. */\n  getNextSortDirection(sortable: MatSortable): SortDirection {\n    if (!sortable) { return ''; }\n\n    // Get the sort direction cycle with the potential sortable overrides.\n    const disableClear = sortable.disableClear != null ? sortable.disableClear : this.disableClear;\n    let sortDirectionCycle = getSortDirectionCycle(sortable.start || this.start, disableClear);\n\n    // Get and return the next direction in the cycle\n    let nextDirectionIndex = sortDirectionCycle.indexOf(this.direction) + 1;\n    if (nextDirectionIndex >= sortDirectionCycle.length) { nextDirectionIndex = 0; }\n    return sortDirectionCycle[nextDirectionIndex];\n  }\n\n  ngOnInit() {\n    this._markInitialized();\n  }\n\n  ngOnChanges() {\n    this._stateChanges.next();\n  }\n\n  ngOnDestroy() {\n    this._stateChanges.complete();\n  }\n}\n\n/** Returns the sort direction cycle to use given the provided parameters of order and clear. */\nfunction getSortDirectionCycle(start: 'asc' | 'desc',\n                               disableClear: boolean): SortDirection[] {\n  let sortOrder: SortDirection[] = ['asc', 'desc'];\n  if (start == 'desc') { sortOrder.reverse(); }\n  if (!disableClear) { sortOrder.push(''); }\n\n  return sortOrder;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  keyframes,\n  AnimationTriggerMetadata, query, animateChild,\n} from '@angular/animations';\nimport {AnimationCurves, AnimationDurations} from '@angular/material/core';\n\nconst SORT_ANIMATION_TRANSITION = AnimationDurations.ENTERING + ' ' +\n                                  AnimationCurves.STANDARD_CURVE;\n\n/** Animations used by MatSort. */\nexport const matSortAnimations: {\n  readonly indicator: AnimationTriggerMetadata;\n  readonly leftPointer: AnimationTriggerMetadata;\n  readonly rightPointer: AnimationTriggerMetadata;\n  readonly arrowOpacity: AnimationTriggerMetadata;\n  readonly arrowPosition: AnimationTriggerMetadata;\n  readonly allowChildren: AnimationTriggerMetadata;\n} = {\n  /** Animation that moves the sort indicator. */\n  indicator: trigger('indicator', [\n    state('active-asc, asc', style({transform: 'translateY(0px)'})),\n    // 10px is the height of the sort indicator, minus the width of the pointers\n    state('active-desc, desc', style({transform: 'translateY(10px)'})),\n    transition('active-asc <=> active-desc', animate(SORT_ANIMATION_TRANSITION))\n  ]),\n\n  /** Animation that rotates the left pointer of the indicator based on the sorting direction. */\n  leftPointer: trigger('leftPointer', [\n    state('active-asc, asc', style({transform: 'rotate(-45deg)'})),\n    state('active-desc, desc', style({transform: 'rotate(45deg)'})),\n    transition('active-asc <=> active-desc', animate(SORT_ANIMATION_TRANSITION))\n  ]),\n\n  /** Animation that rotates the right pointer of the indicator based on the sorting direction. */\n  rightPointer: trigger('rightPointer', [\n    state('active-asc, asc', style({transform: 'rotate(45deg)'})),\n    state('active-desc, desc', style({transform: 'rotate(-45deg)'})),\n    transition('active-asc <=> active-desc', animate(SORT_ANIMATION_TRANSITION))\n  ]),\n\n  /** Animation that controls the arrow opacity. */\n  arrowOpacity: trigger('arrowOpacity', [\n    state('desc-to-active, asc-to-active, active', style({opacity: 1})),\n    state('desc-to-hint, asc-to-hint, hint', style({opacity: .54})),\n    state('hint-to-desc, active-to-desc, desc, hint-to-asc, active-to-asc, asc, void',\n        style({opacity: 0})),\n    // Transition between all states except for immediate transitions\n    transition('* => asc, * => desc, * => active, * => hint, * => void', animate('0ms')),\n    transition('* <=> *', animate(SORT_ANIMATION_TRANSITION)),\n  ]),\n\n  /**\n   * Animation for the translation of the arrow as a whole. States are separated into two\n   * groups: ones with animations and others that are immediate. Immediate states are asc, desc,\n   * peek, and active. The other states define a specific animation (source-to-destination)\n   * and are determined as a function of their prev user-perceived state and what the next state\n   * should be.\n   */\n  arrowPosition: trigger('arrowPosition', [\n    // Hidden Above => Hint Center\n    transition('* => desc-to-hint, * => desc-to-active',\n        animate(SORT_ANIMATION_TRANSITION, keyframes([\n          style({transform: 'translateY(-25%)'}),\n          style({transform: 'translateY(0)'})\n        ]))),\n    // Hint Center => Hidden Below\n    transition('* => hint-to-desc, * => active-to-desc',\n        animate(SORT_ANIMATION_TRANSITION, keyframes([\n          style({transform: 'translateY(0)'}),\n          style({transform: 'translateY(25%)'})\n        ]))),\n    // Hidden Below => Hint Center\n    transition('* => asc-to-hint, * => asc-to-active',\n        animate(SORT_ANIMATION_TRANSITION, keyframes([\n          style({transform: 'translateY(25%)'}),\n          style({transform: 'translateY(0)'})\n        ]))),\n    // Hint Center => Hidden Above\n    transition('* => hint-to-asc, * => active-to-asc',\n        animate(SORT_ANIMATION_TRANSITION, keyframes([\n          style({transform: 'translateY(0)'}),\n          style({transform: 'translateY(-25%)'})\n        ]))),\n    state('desc-to-hint, asc-to-hint, hint, desc-to-active, asc-to-active, active',\n        style({transform: 'translateY(0)'})),\n    state('hint-to-desc, active-to-desc, desc',\n        style({transform: 'translateY(-25%)'})),\n    state('hint-to-asc, active-to-asc, asc',\n        style({transform: 'translateY(25%)'})),\n  ]),\n\n  /** Necessary trigger that calls animate on children animations. */\n  allowChildren: trigger('allowChildren', [\n    transition('* <=> *', [\n      query('@*', animateChild(), {optional: true})\n    ])\n  ]),\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable, SkipSelf, Optional} from '@angular/core';\nimport {Subject} from 'rxjs';\n\n/**\n * To modify the labels and text displayed, create a new instance of MatSortHeaderIntl and\n * include it in a custom provider.\n */\n@Injectable({providedIn: 'root'})\nexport class MatSortHeaderIntl {\n  /**\n   * Stream that emits whenever the labels here are changed. Use this to notify\n   * components if the labels have changed after initialization.\n   */\n  readonly changes: Subject<void> = new Subject<void>();\n\n  /** ARIA label for the sorting button. */\n  sortButtonLabel = (id: string) => {\n    return `Change sorting for ${id}`;\n  }\n}\n/** @docs-private */\nexport function MAT_SORT_HEADER_INTL_PROVIDER_FACTORY(parentIntl: MatSortHeaderIntl) {\n  return parentIntl || new MatSortHeaderIntl();\n}\n\n/** @docs-private */\nexport const MAT_SORT_HEADER_INTL_PROVIDER = {\n  // If there is already an MatSortHeaderIntl available, use that. Otherwise, provide a new one.\n  provide: MatSortHeaderIntl,\n  deps: [[new Optional(), new SkipSelf(), MatSortHeaderIntl]],\n  useFactory: MAT_SORT_HEADER_INTL_PROVIDER_FACTORY\n};\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {AnimationEvent} from '@angular/animations';\nimport {FocusMonitor, FocusOrigin, FocusTrap, FocusTrapFactory} from '@angular/cdk/a11y';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {ESCAPE} from '@angular/cdk/keycodes';\nimport {Platform} from '@angular/cdk/platform';\nimport {CdkScrollable} from '@angular/cdk/scrolling';\nimport {DOCUMENT} from '@angular/common';\nimport {\n  AfterContentChecked,\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  ContentChildren,\n  DoCheck,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  Output,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {fromEvent, merge, Observable, Subject} from 'rxjs';\nimport {debounceTime, filter, map, startWith, take, takeUntil} from 'rxjs/operators';\nimport {matDrawerAnimations} from './drawer-animations';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\n\n\n/** Throws an exception when two MatDrawer are matching the same position. */\nexport function throwMatDuplicatedDrawerError(position: string) {\n  throw Error(`A drawer was already declared for 'position=\"${position}\"'`);\n}\n\n\n/** Result of the toggle promise that indicates the state of the drawer. */\nexport type MatDrawerToggleResult = 'open' | 'close';\n\n/** Configures whether drawers should use auto sizing by default. */\nexport const MAT_DRAWER_DEFAULT_AUTOSIZE =\n    new InjectionToken<boolean>('MAT_DRAWER_DEFAULT_AUTOSIZE', {\n      providedIn: 'root',\n      factory: MAT_DRAWER_DEFAULT_AUTOSIZE_FACTORY,\n    });\n\n/** @docs-private */\nexport function MAT_DRAWER_DEFAULT_AUTOSIZE_FACTORY(): boolean {\n  return false;\n}\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-drawer-content',\n  template: '<ng-content></ng-content>',\n  host: {\n    'class': 'mat-drawer-content',\n    '[style.margin-left.px]': '_container._contentMargins.left',\n    '[style.margin-right.px]': '_container._contentMargins.right',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatDrawerContent implements AfterContentInit {\n  constructor(\n      private _changeDetectorRef: ChangeDetectorRef,\n      @Inject(forwardRef(() => MatDrawerContainer)) public _container: MatDrawerContainer) {\n  }\n\n  ngAfterContentInit() {\n    this._container._contentMarginChanges.subscribe(() => {\n      this._changeDetectorRef.markForCheck();\n    });\n  }\n}\n\n\n/**\n * This component corresponds to a drawer that can be opened on the drawer container.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-drawer',\n  exportAs: 'matDrawer',\n  template: '<ng-content></ng-content>',\n  animations: [matDrawerAnimations.transformDrawer],\n  host: {\n    'class': 'mat-drawer',\n    '[@transform]': '_animationState',\n    '(@transform.start)': '_onAnimationStart($event)',\n    '(@transform.done)': '_onAnimationEnd($event)',\n    // must prevent the browser from aligning text based on value\n    '[attr.align]': 'null',\n    '[class.mat-drawer-end]': 'position === \"end\"',\n    '[class.mat-drawer-over]': 'mode === \"over\"',\n    '[class.mat-drawer-push]': 'mode === \"push\"',\n    '[class.mat-drawer-side]': 'mode === \"side\"',\n    'tabIndex': '-1',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatDrawer implements AfterContentInit, AfterContentChecked, OnDestroy {\n  private _focusTrap: FocusTrap;\n  private _elementFocusedBeforeDrawerWasOpened: HTMLElement | null = null;\n\n  /** Whether the drawer is initialized. Used for disabling the initial animation. */\n  private _enableAnimations = false;\n\n  /** The side that the drawer is attached to. */\n  @Input()\n  get position(): 'start' | 'end' { return this._position; }\n  set position(value: 'start' | 'end') {\n    // Make sure we have a valid value.\n    value = value === 'end' ? 'end' : 'start';\n    if (value != this._position) {\n      this._position = value;\n      this.onPositionChanged.emit();\n    }\n  }\n  private _position: 'start' | 'end' = 'start';\n\n  /** Mode of the drawer; one of 'over', 'push' or 'side'. */\n  @Input()\n  get mode(): 'over' | 'push' | 'side' { return this._mode; }\n  set mode(value: 'over' | 'push' | 'side') {\n    this._mode = value;\n    this._modeChanged.next();\n  }\n  private _mode: 'over' | 'push' | 'side' = 'over';\n\n  /** Whether the drawer can be closed with the escape key or by clicking on the backdrop. */\n  @Input()\n  get disableClose(): boolean { return this._disableClose; }\n  set disableClose(value: boolean) { this._disableClose = coerceBooleanProperty(value); }\n  private _disableClose: boolean = false;\n\n  /** Whether the drawer should focus the first focusable element automatically when opened. */\n  @Input()\n  get autoFocus(): boolean { return this._autoFocus; }\n  set autoFocus(value: boolean) { this._autoFocus = coerceBooleanProperty(value); }\n  private _autoFocus: boolean = true;\n\n  /** How the sidenav was opened (keypress, mouse click etc.) */\n  private _openedVia: FocusOrigin | null;\n\n  /** Emits whenever the drawer has started animating. */\n  _animationStarted = new EventEmitter<AnimationEvent>();\n\n  /** Current state of the sidenav animation. */\n  _animationState: 'open-instant' | 'open' | 'void' = 'void';\n\n  /** Event emitted when the drawer open state is changed. */\n  @Output() readonly openedChange: EventEmitter<boolean> =\n      // Note this has to be async in order to avoid some issues with two-bindings (see #8872).\n      new EventEmitter<boolean>(/* isAsync */true);\n\n  /** Event emitted when the drawer has been opened. */\n  @Output('opened')\n  get _openedStream(): Observable<void> {\n    return this.openedChange.pipe(filter(o => o), map(() => {}));\n  }\n\n  /** Event emitted when the drawer has started opening. */\n  @Output()\n  get openedStart(): Observable<void> {\n    return this._animationStarted.pipe(\n      filter(e => e.fromState !== e.toState && e.toState.indexOf('open') === 0),\n      map(() => {})\n    );\n  }\n\n  /** Event emitted when the drawer has been closed. */\n  @Output('closed')\n  get _closedStream(): Observable<void> {\n    return this.openedChange.pipe(filter(o => !o), map(() => {}));\n  }\n\n  /** Event emitted when the drawer has started closing. */\n  @Output()\n  get closedStart(): Observable<void> {\n    return this._animationStarted.pipe(\n      filter(e => e.fromState !== e.toState && e.toState === 'void'),\n      map(() => {})\n    );\n  }\n\n  /** Event emitted when the drawer's position changes. */\n  // tslint:disable-next-line:no-output-on-prefix\n  @Output('positionChanged') onPositionChanged: EventEmitter<void> = new EventEmitter<void>();\n\n  /**\n   * An observable that emits when the drawer mode changes. This is used by the drawer container to\n   * to know when to when the mode changes so it can adapt the margins on the content.\n   */\n  readonly _modeChanged = new Subject();\n\n  get _isFocusTrapEnabled(): boolean {\n    // The focus trap is only enabled when the drawer is open in any mode other than side.\n    return this.opened && this.mode !== 'side';\n  }\n\n  constructor(private _elementRef: ElementRef,\n              private _focusTrapFactory: FocusTrapFactory,\n              private _focusMonitor: FocusMonitor,\n              private _platform: Platform,\n              private _ngZone: NgZone,\n              @Optional() @Inject(DOCUMENT) private _doc: any) {\n\n    this.openedChange.subscribe((opened: boolean) => {\n      if (opened) {\n        if (this._doc) {\n          this._elementFocusedBeforeDrawerWasOpened = this._doc.activeElement as HTMLElement;\n        }\n\n        if (this._isFocusTrapEnabled && this._focusTrap) {\n          this._trapFocus();\n        }\n      } else {\n        this._restoreFocus();\n      }\n    });\n\n    /**\n     * Listen to `keydown` events outside the zone so that change detection is not run every\n     * time a key is pressed. Instead we re-enter the zone only if the `ESC` key is pressed\n     * and we don't have close disabled.\n     */\n    this._ngZone.runOutsideAngular(() => {\n        fromEvent(this._elementRef.nativeElement, 'keydown').pipe(\n            filter((event: KeyboardEvent) => event.keyCode === ESCAPE && !this.disableClose)\n        ).subscribe((event) => this._ngZone.run(() => {\n            this.close();\n            event.stopPropagation();\n        }));\n    });\n  }\n\n  /** Traps focus inside the drawer. */\n  private _trapFocus() {\n    if (!this.autoFocus) {\n      return;\n    }\n\n    this._focusTrap.focusInitialElementWhenReady().then(hasMovedFocus => {\n      // If there were no focusable elements, focus the sidenav itself so the keyboard navigation\n      // still works. We need to check that `focus` is a function due to Universal.\n      if (!hasMovedFocus && typeof this._elementRef.nativeElement.focus === 'function') {\n        this._elementRef.nativeElement.focus();\n      }\n    });\n  }\n\n  /**\n   * If focus is currently inside the drawer, restores it to where it was before the drawer\n   * opened.\n   */\n  private _restoreFocus() {\n    if (!this.autoFocus) {\n      return;\n    }\n\n    const activeEl = this._doc && this._doc.activeElement;\n\n    if (activeEl && this._elementRef.nativeElement.contains(activeEl)) {\n      if (this._elementFocusedBeforeDrawerWasOpened instanceof HTMLElement) {\n        this._focusMonitor.focusVia(this._elementFocusedBeforeDrawerWasOpened, this._openedVia);\n      } else {\n        this._elementRef.nativeElement.blur();\n      }\n    }\n\n    this._elementFocusedBeforeDrawerWasOpened = null;\n    this._openedVia = null;\n  }\n\n  ngAfterContentInit() {\n    this._focusTrap = this._focusTrapFactory.create(this._elementRef.nativeElement);\n    this._focusTrap.enabled = this._isFocusTrapEnabled;\n  }\n\n  ngAfterContentChecked() {\n    // Enable the animations after the lifecycle hooks have run, in order to avoid animating\n    // drawers that are open by default. When we're on the server, we shouldn't enable the\n    // animations, because we don't want the drawer to animate the first time the user sees\n    // the page.\n    if (this._platform.isBrowser) {\n      this._enableAnimations = true;\n    }\n  }\n\n  ngOnDestroy() {\n    if (this._focusTrap) {\n      this._focusTrap.destroy();\n    }\n  }\n\n  /**\n   * Whether the drawer is opened. We overload this because we trigger an event when it\n   * starts or end.\n   */\n  @Input()\n  get opened(): boolean { return this._opened; }\n  set opened(value: boolean) { this.toggle(coerceBooleanProperty(value)); }\n  private _opened: boolean = false;\n\n  /**\n   * Open the drawer.\n   * @param openedVia Whether the drawer was opened by a key press, mouse click or programmatically.\n   * Used for focus management after the sidenav is closed.\n   */\n  open(openedVia?: FocusOrigin): Promise<MatDrawerToggleResult> {\n    return this.toggle(true, openedVia);\n  }\n\n  /** Close the drawer. */\n  close(): Promise<MatDrawerToggleResult> {\n    return this.toggle(false);\n  }\n\n  /**\n   * Toggle this drawer.\n   * @param isOpen Whether the drawer should be open.\n   * @param openedVia Whether the drawer was opened by a key press, mouse click or programmatically.\n   * Used for focus management after the sidenav is closed.\n   */\n  toggle(isOpen: boolean = !this.opened, openedVia: FocusOrigin = 'program'):\n    Promise<MatDrawerToggleResult> {\n\n    this._opened = isOpen;\n\n    if (isOpen) {\n      this._animationState = this._enableAnimations ? 'open' : 'open-instant';\n      this._openedVia = openedVia;\n    } else {\n      this._animationState = 'void';\n      this._restoreFocus();\n    }\n\n    if (this._focusTrap) {\n      this._focusTrap.enabled = this._isFocusTrapEnabled;\n    }\n\n    return new Promise<MatDrawerToggleResult>(resolve => {\n      this.openedChange.pipe(take(1)).subscribe(open => resolve(open ? 'open' : 'close'));\n    });\n  }\n\n  _onAnimationStart(event: AnimationEvent) {\n    this._animationStarted.emit(event);\n  }\n\n  _onAnimationEnd(event: AnimationEvent) {\n    const {fromState, toState} = event;\n\n    if ((toState.indexOf('open') === 0 && fromState === 'void') ||\n        (toState === 'void' && fromState.indexOf('open') === 0)) {\n      this.openedChange.emit(this._opened);\n    }\n  }\n\n  get _width(): number {\n    return this._elementRef.nativeElement ? (this._elementRef.nativeElement.offsetWidth || 0) : 0;\n  }\n}\n\n\n/**\n * `<mat-drawer-container>` component.\n *\n * This is the parent component to one or two `<mat-drawer>`s that validates the state internally\n * and coordinates the backdrop and content styling.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-drawer-container',\n  exportAs: 'matDrawerContainer',\n  templateUrl: 'drawer-container.html',\n  styleUrls: ['drawer.css'],\n  host: {\n    'class': 'mat-drawer-container',\n    '[class.mat-drawer-container-explicit-backdrop]': '_backdropOverride',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatDrawerContainer implements AfterContentInit, DoCheck, OnDestroy {\n  @ContentChildren(MatDrawer) _drawers: QueryList<MatDrawer>;\n  @ContentChild(MatDrawerContent) _content: MatDrawerContent;\n\n  /** The drawer child with the `start` position. */\n  get start(): MatDrawer | null { return this._start; }\n\n  /** The drawer child with the `end` position. */\n  get end(): MatDrawer | null { return this._end; }\n\n  /**\n   * Whether to automatically resize the container whenever\n   * the size of any of its drawers changes.\n   *\n   * **Use at your own risk!** Enabling this option can cause layout thrashing by measuring\n   * the drawers on every change detection cycle. Can be configured globally via the\n   * `MAT_DRAWER_DEFAULT_AUTOSIZE` token.\n   */\n  @Input()\n  get autosize(): boolean { return this._autosize; }\n  set autosize(value: boolean) { this._autosize = coerceBooleanProperty(value); }\n  private _autosize: boolean;\n\n  /**\n   * Whether the drawer container should have a backdrop while one of the sidenavs is open.\n   * If explicitly set to `true`, the backdrop will be enabled for drawers in the `side`\n   * mode as well.\n   */\n  @Input()\n  get hasBackdrop() {\n    if (this._backdropOverride == null) {\n      return !this._start || this._start.mode !== 'side' || !this._end || this._end.mode !== 'side';\n    }\n\n    return this._backdropOverride;\n  }\n  set hasBackdrop(value: any) {\n    this._backdropOverride = value == null ? null : coerceBooleanProperty(value);\n  }\n  _backdropOverride: boolean | null;\n\n  /** Event emitted when the drawer backdrop is clicked. */\n  @Output() readonly backdropClick: EventEmitter<void> = new EventEmitter<void>();\n\n  /** The drawer at the start/end position, independent of direction. */\n  private _start: MatDrawer | null;\n  private _end: MatDrawer | null;\n\n  /**\n   * The drawer at the left/right. When direction changes, these will change as well.\n   * They're used as aliases for the above to set the left/right style properly.\n   * In LTR, _left == _start and _right == _end.\n   * In RTL, _left == _end and _right == _start.\n   */\n  private _left: MatDrawer | null;\n  private _right: MatDrawer | null;\n\n  /** Emits when the component is destroyed. */\n  private readonly _destroyed = new Subject<void>();\n\n  /** Emits on every ngDoCheck. Used for debouncing reflows. */\n  private readonly _doCheckSubject = new Subject<void>();\n\n  /**\n   * Margins to be applied to the content. These are used to push / shrink the drawer content when a\n   * drawer is open. We use margin rather than transform even for push mode because transform breaks\n   * fixed position elements inside of the transformed element.\n   */\n  _contentMargins: {left: number|null, right: number|null} = {left: null, right: null};\n\n  readonly _contentMarginChanges = new Subject<{left: number|null, right: number|null}>();\n\n  /** Reference to the CdkScrollable instance that wraps the scrollable content. */\n  @ViewChild(CdkScrollable) scrollable: CdkScrollable;\n\n  constructor(@Optional() private _dir: Directionality,\n              private _element: ElementRef,\n              private _ngZone: NgZone,\n              private _changeDetectorRef: ChangeDetectorRef,\n              @Inject(MAT_DRAWER_DEFAULT_AUTOSIZE) defaultAutosize = false,\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) private _animationMode?: string) {\n\n    // If a `Dir` directive exists up the tree, listen direction changes\n    // and update the left/right properties to point to the proper start/end.\n    if (_dir) {\n      _dir.change.pipe(takeUntil(this._destroyed)).subscribe(() => {\n        this._validateDrawers();\n        this._updateContentMargins();\n      });\n    }\n\n    this._autosize = defaultAutosize;\n  }\n\n  ngAfterContentInit() {\n    this._drawers.changes.pipe(startWith(null)).subscribe(() => {\n      this._validateDrawers();\n\n      this._drawers.forEach((drawer: MatDrawer) => {\n        this._watchDrawerToggle(drawer);\n        this._watchDrawerPosition(drawer);\n        this._watchDrawerMode(drawer);\n      });\n\n      if (!this._drawers.length ||\n          this._isDrawerOpen(this._start) ||\n          this._isDrawerOpen(this._end)) {\n        this._updateContentMargins();\n      }\n\n      this._changeDetectorRef.markForCheck();\n    });\n\n    this._doCheckSubject.pipe(\n      debounceTime(10), // Arbitrary debounce time, less than a frame at 60fps\n      takeUntil(this._destroyed)\n    ).subscribe(() => this._updateContentMargins());\n  }\n\n  ngOnDestroy() {\n    this._doCheckSubject.complete();\n    this._destroyed.next();\n    this._destroyed.complete();\n  }\n\n  /** Calls `open` of both start and end drawers */\n  open(): void {\n    this._drawers.forEach(drawer => drawer.open());\n  }\n\n  /** Calls `close` of both start and end drawers */\n  close(): void {\n    this._drawers.forEach(drawer => drawer.close());\n  }\n\n  ngDoCheck() {\n    // If users opted into autosizing, do a check every change detection cycle.\n    if (this._autosize && this._isPushed()) {\n      // Run outside the NgZone, otherwise the debouncer will throw us into an infinite loop.\n      this._ngZone.runOutsideAngular(() => this._doCheckSubject.next());\n    }\n  }\n\n  /**\n   * Subscribes to drawer events in order to set a class on the main container element when the\n   * drawer is open and the backdrop is visible. This ensures any overflow on the container element\n   * is properly hidden.\n   */\n  private _watchDrawerToggle(drawer: MatDrawer): void {\n    drawer._animationStarted.pipe(\n      takeUntil(this._drawers.changes),\n      filter((event: AnimationEvent) => event.fromState !== event.toState)\n    )\n    .subscribe((event: AnimationEvent) => {\n      // Set the transition class on the container so that the animations occur. This should not\n      // be set initially because animations should only be triggered via a change in state.\n      if (event.toState !== 'open-instant' && this._animationMode !== 'NoopAnimations') {\n        this._element.nativeElement.classList.add('mat-drawer-transition');\n      }\n\n      this._updateContentMargins();\n      this._changeDetectorRef.markForCheck();\n    });\n\n    if (drawer.mode !== 'side') {\n      drawer.openedChange.pipe(takeUntil(this._drawers.changes)).subscribe(() =>\n          this._setContainerClass(drawer.opened));\n    }\n  }\n\n  /**\n   * Subscribes to drawer onPositionChanged event in order to\n   * re-validate drawers when the position changes.\n   */\n  private _watchDrawerPosition(drawer: MatDrawer): void {\n    if (!drawer) {\n      return;\n    }\n    // NOTE: We need to wait for the microtask queue to be empty before validating,\n    // since both drawers may be swapping positions at the same time.\n    drawer.onPositionChanged.pipe(takeUntil(this._drawers.changes)).subscribe(() => {\n      this._ngZone.onMicrotaskEmpty.asObservable().pipe(take(1)).subscribe(() => {\n        this._validateDrawers();\n      });\n    });\n  }\n\n  /** Subscribes to changes in drawer mode so we can run change detection. */\n  private _watchDrawerMode(drawer: MatDrawer): void {\n    if (drawer) {\n      drawer._modeChanged.pipe(takeUntil(merge(this._drawers.changes, this._destroyed)))\n        .subscribe(() => {\n          this._updateContentMargins();\n          this._changeDetectorRef.markForCheck();\n        });\n    }\n  }\n\n  /** Toggles the 'mat-drawer-opened' class on the main 'mat-drawer-container' element. */\n  private _setContainerClass(isAdd: boolean): void {\n    if (isAdd) {\n      this._element.nativeElement.classList.add('mat-drawer-opened');\n    } else {\n      this._element.nativeElement.classList.remove('mat-drawer-opened');\n    }\n  }\n\n  /** Validate the state of the drawer children components. */\n  private _validateDrawers() {\n    this._start = this._end = null;\n\n    // Ensure that we have at most one start and one end drawer.\n    this._drawers.forEach(drawer => {\n      if (drawer.position == 'end') {\n        if (this._end != null) {\n          throwMatDuplicatedDrawerError('end');\n        }\n        this._end = drawer;\n      } else {\n        if (this._start != null) {\n          throwMatDuplicatedDrawerError('start');\n        }\n        this._start = drawer;\n      }\n    });\n\n    this._right = this._left = null;\n\n    // Detect if we're LTR or RTL.\n    if (this._dir && this._dir.value === 'rtl') {\n      this._left = this._end;\n      this._right = this._start;\n    } else {\n      this._left = this._start;\n      this._right = this._end;\n    }\n  }\n\n  /** Whether the container is being pushed to the side by one of the drawers. */\n  private _isPushed() {\n    return (this._isDrawerOpen(this._start) && this._start.mode != 'over') ||\n           (this._isDrawerOpen(this._end) && this._end.mode != 'over');\n  }\n\n  _onBackdropClicked() {\n    this.backdropClick.emit();\n    this._closeModalDrawer();\n  }\n\n  _closeModalDrawer() {\n    // Close all open drawers where closing is not disabled and the mode is not `side`.\n    [this._start, this._end]\n      .filter(drawer => drawer && !drawer.disableClose && this._canHaveBackdrop(drawer))\n      .forEach(drawer => drawer!.close());\n  }\n\n  _isShowingBackdrop(): boolean {\n    return (this._isDrawerOpen(this._start) && this._canHaveBackdrop(this._start)) ||\n           (this._isDrawerOpen(this._end) && this._canHaveBackdrop(this._end));\n  }\n\n  private _canHaveBackdrop(drawer: MatDrawer): boolean {\n    return drawer.mode !== 'side' || !!this._backdropOverride;\n  }\n\n  private _isDrawerOpen(drawer: MatDrawer | null): drawer is MatDrawer {\n    return drawer != null && drawer.opened;\n  }\n\n  /**\n   * Recalculates and updates the inline styles for the content. Note that this should be used\n   * sparingly, because it causes a reflow.\n   */\n  private _updateContentMargins() {\n    // 1. For drawers in `over` mode, they don't affect the content.\n    // 2. For drawers in `side` mode they should shrink the content. We do this by adding to the\n    //    left margin (for left drawer) or right margin (for right the drawer).\n    // 3. For drawers in `push` mode the should shift the content without resizing it. We do this by\n    //    adding to the left or right margin and simultaneously subtracting the same amount of\n    //    margin from the other side.\n\n    let left = 0;\n    let right = 0;\n\n    if (this._left && this._left.opened) {\n      if (this._left.mode == 'side') {\n        left += this._left._width;\n      } else if (this._left.mode == 'push') {\n        let width = this._left._width;\n        left += width;\n        right -= width;\n      }\n    }\n\n    if (this._right && this._right.opened) {\n      if (this._right.mode == 'side') {\n        right += this._right._width;\n      } else if (this._right.mode == 'push') {\n        let width = this._right._width;\n        right += width;\n        left -= width;\n      }\n    }\n\n    if (left !== this._contentMargins.left || right !== this._contentMargins.right) {\n      this._contentMargins = {\n        // If either `right` or `left` is zero, don't set a style to the element. This\n        // allows users to specify a custom size via CSS class in SSR scenarios where the\n        // measured widths will always be zero.\n        left: left || null,\n        right: right || null,\n      };\n\n      // Pull back into the NgZone since in some cases we could be outside. We need to be careful\n      // to do it only when something changed, otherwise we can end up hitting the zone too often.\n      this._ngZone.run(() => this._contentMarginChanges.next(this._contentMargins));\n    }\n\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  ContentChildren,\n  forwardRef,\n  Inject,\n  Input,\n  ViewEncapsulation,\n  QueryList,\n} from '@angular/core';\nimport {MatDrawer, MatDrawerContainer, MatDrawerContent} from './drawer';\nimport {matDrawerAnimations} from './drawer-animations';\nimport {coerceBooleanProperty, coerceNumberProperty} from '@angular/cdk/coercion';\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-sidenav-content',\n  template: '<ng-content></ng-content>',\n  host: {\n    'class': 'mat-drawer-content mat-sidenav-content',\n    '[style.margin-left.px]': '_container._contentMargins.left',\n    '[style.margin-right.px]': '_container._contentMargins.right',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatSidenavContent extends MatDrawerContent {\n  constructor(\n      changeDetectorRef: ChangeDetectorRef,\n      @Inject(forwardRef(() => MatSidenavContainer)) container: MatSidenavContainer) {\n    super(changeDetectorRef, container);\n  }\n}\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-sidenav',\n  exportAs: 'matSidenav',\n  template: '<ng-content></ng-content>',\n  animations: [matDrawerAnimations.transformDrawer],\n  host: {\n    'class': 'mat-drawer mat-sidenav',\n    'tabIndex': '-1',\n    '[@transform]': '_animationState',\n    '(@transform.start)': '_onAnimationStart($event)',\n    '(@transform.done)': '_onAnimationEnd($event)',\n    // must prevent the browser from aligning text based on value\n    '[attr.align]': 'null',\n    '[class.mat-drawer-end]': 'position === \"end\"',\n    '[class.mat-drawer-over]': 'mode === \"over\"',\n    '[class.mat-drawer-push]': 'mode === \"push\"',\n    '[class.mat-drawer-side]': 'mode === \"side\"',\n    '[class.mat-sidenav-fixed]': 'fixedInViewport',\n    '[style.top.px]': 'fixedInViewport ? fixedTopGap : null',\n    '[style.bottom.px]': 'fixedInViewport ? fixedBottomGap : null',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatSidenav extends MatDrawer {\n  /** Whether the sidenav is fixed in the viewport. */\n  @Input()\n  get fixedInViewport(): boolean { return this._fixedInViewport; }\n  set fixedInViewport(value) { this._fixedInViewport = coerceBooleanProperty(value); }\n  private _fixedInViewport = false;\n\n  /**\n   * The gap between the top of the sidenav and the top of the viewport when the sidenav is in fixed\n   * mode.\n   */\n  @Input()\n  get fixedTopGap(): number { return this._fixedTopGap; }\n  set fixedTopGap(value) { this._fixedTopGap = coerceNumberProperty(value); }\n  private _fixedTopGap = 0;\n\n  /**\n   * The gap between the bottom of the sidenav and the bottom of the viewport when the sidenav is in\n   * fixed mode.\n   */\n  @Input()\n  get fixedBottomGap(): number { return this._fixedBottomGap; }\n  set fixedBottomGap(value) { this._fixedBottomGap = coerceNumberProperty(value); }\n  private _fixedBottomGap = 0;\n}\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-sidenav-container',\n  exportAs: 'matSidenavContainer',\n  templateUrl: 'sidenav-container.html',\n  styleUrls: ['drawer.css'],\n  host: {\n    'class': 'mat-drawer-container mat-sidenav-container',\n    '[class.mat-drawer-container-explicit-backdrop]': '_backdropOverride',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatSidenavContainer extends MatDrawerContainer {\n  @ContentChildren(MatSidenav) _drawers: QueryList<MatSidenav>;\n  @ContentChild(MatSidenavContent) _content: MatSidenavContent;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {PlatformModule} from '@angular/cdk/platform';\nimport {ScrollDispatchModule} from '@angular/cdk/scrolling';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatDrawer, MatDrawerContainer, MatDrawerContent} from './drawer';\nimport {MatSidenav, MatSidenavContainer, MatSidenavContent} from './sidenav';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatCommonModule,\n    ScrollDispatchModule,\n    PlatformModule,\n  ],\n  exports: [\n    MatCommonModule,\n    MatDrawer,\n    MatDrawerContainer,\n    MatDrawerContent,\n    MatSidenav,\n    MatSidenavContainer,\n    MatSidenavContent,\n  ],\n  declarations: [\n    MatDrawer,\n    MatDrawerContainer,\n    MatDrawerContent,\n    MatSidenav,\n    MatSidenavContainer,\n    MatSidenavContent,\n  ],\n})\nexport class MatSidenavModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {InjectionToken} from '@angular/core';\n\n\n/** Default `mat-slide-toggle` options that can be overridden. */\nexport interface MatSlideToggleDefaultOptions {\n  /** Whether toggle action triggers value changes in slide toggle. */\n  disableToggleValue?: boolean;\n  /** Whether drag action triggers value changes in slide toggle. */\n  disableDragValue?: boolean;\n}\n\n/** Injection token to be used to override the default options for `mat-slide-toggle`. */\nexport const MAT_SLIDE_TOGGLE_DEFAULT_OPTIONS =\n  new InjectionToken<MatSlideToggleDefaultOptions>('mat-slide-toggle-default-options', {\n    providedIn: 'root',\n    factory: () => ({disableToggleValue: false, disableDragValue: false})\n  });\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor, FocusOrigin} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {Platform} from '@angular/cdk/platform';\nimport {\n  AfterContentInit,\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Input,\n  OnDestroy,\n  Output,\n  ViewChild,\n  ViewEncapsulation,\n  NgZone,\n  Optional,\n  Inject,\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {\n  CanColor,\n  CanDisable,\n  CanDisableRipple,\n  HammerInput,\n  HasTabIndex,\n  MatRipple,\n  mixinColor,\n  mixinDisabled,\n  mixinDisableRipple,\n  mixinTabIndex,\n  RippleRef,\n} from '@angular/material/core';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\nimport {\n  MAT_SLIDE_TOGGLE_DEFAULT_OPTIONS,\n  MatSlideToggleDefaultOptions\n} from './slide-toggle-config';\n\n// Increasing integer for generating unique ids for slide-toggle components.\nlet nextUniqueId = 0;\n\nexport const MAT_SLIDE_TOGGLE_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatSlideToggle),\n  multi: true\n};\n\n/** Change event object emitted by a MatSlideToggle. */\nexport class MatSlideToggleChange {\n  constructor(\n    /** The source MatSlideToggle of the event. */\n    public source: MatSlideToggle,\n    /** The new `checked` value of the MatSlideToggle. */\n    public checked: boolean) { }\n}\n\n// Boilerplate for applying mixins to MatSlideToggle.\n/** @docs-private */\nexport class MatSlideToggleBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatSlideToggleMixinBase =\n  mixinTabIndex(mixinColor(mixinDisableRipple(mixinDisabled(MatSlideToggleBase)), 'accent'));\n\n/** Represents a slidable \"switch\" toggle that can be moved between on and off. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-slide-toggle',\n  exportAs: 'matSlideToggle',\n  host: {\n    'class': 'mat-slide-toggle',\n    '[id]': 'id',\n    '[class.mat-checked]': 'checked',\n    '[class.mat-disabled]': 'disabled',\n    '[class.mat-slide-toggle-label-before]': 'labelPosition == \"before\"',\n    '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"',\n  },\n  templateUrl: 'slide-toggle.html',\n  styleUrls: ['slide-toggle.css'],\n  providers: [MAT_SLIDE_TOGGLE_VALUE_ACCESSOR],\n  inputs: ['disabled', 'disableRipple', 'color', 'tabIndex'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatSlideToggle extends _MatSlideToggleMixinBase implements OnDestroy, AfterContentInit,\n    ControlValueAccessor, CanDisable, CanColor, HasTabIndex, CanDisableRipple {\n\n  private onChange = (_: any) => {};\n  private onTouched = () => {};\n\n  private _uniqueId: string = `mat-slide-toggle-${++nextUniqueId}`;\n  private _required: boolean = false;\n  private _checked: boolean = false;\n\n  /** Reference to the focus state ripple. */\n  private _focusRipple: RippleRef | null;\n\n  /** Whether the thumb is currently being dragged. */\n  private _dragging = false;\n\n  /** Previous checked state before drag started. */\n  private _previousChecked: boolean;\n\n  /** Width of the thumb bar of the slide-toggle. */\n  private _thumbBarWidth: number;\n\n  /** Percentage of the thumb while dragging. Percentage as fraction of 100. */\n  private _dragPercentage: number;\n\n  /** Reference to the thumb HTMLElement. */\n  @ViewChild('thumbContainer') _thumbEl: ElementRef<HTMLElement>;\n\n  /** Reference to the thumb bar HTMLElement. */\n  @ViewChild('toggleBar') _thumbBarEl: ElementRef<HTMLElement>;\n\n  /** Name value will be applied to the input element if present */\n  @Input() name: string | null = null;\n\n  /** A unique id for the slide-toggle input. If none is supplied, it will be auto-generated. */\n  @Input() id: string = this._uniqueId;\n\n  /** Whether the label should appear after or before the slide-toggle. Defaults to 'after' */\n  @Input() labelPosition: 'before' | 'after' = 'after';\n\n  /** Whether the slide-toggle element is checked or not */\n\n  /** Used to set the aria-label attribute on the underlying input element. */\n  @Input('aria-label') ariaLabel: string | null = null;\n\n  /** Used to set the aria-labelledby attribute on the underlying input element. */\n  @Input('aria-labelledby') ariaLabelledby: string | null = null;\n\n  /** Whether the slide-toggle is required. */\n  @Input()\n  get required(): boolean { return this._required; }\n  set required(value) { this._required = coerceBooleanProperty(value); }\n\n  /** Whether the slide-toggle element is checked or not */\n  @Input()\n  get checked(): boolean { return this._checked; }\n  set checked(value) {\n    this._checked = coerceBooleanProperty(value);\n    this._changeDetectorRef.markForCheck();\n  }\n  /** An event will be dispatched each time the slide-toggle changes its value. */\n  @Output() readonly change: EventEmitter<MatSlideToggleChange> =\n      new EventEmitter<MatSlideToggleChange>();\n\n  /**\n   * An event will be dispatched each time the slide-toggle input is toggled.\n   * This event always fire when user toggle the slide toggle, but does not mean the slide toggle's\n   * value is changed. The event does not fire when user drag to change the slide toggle value.\n   */\n  @Output() readonly toggleChange: EventEmitter<void> = new EventEmitter<void>();\n\n  /**\n   * An event will be dispatched each time the slide-toggle is dragged.\n   * This event always fire when user drag the slide toggle to make a change that greater than 50%.\n   * It does not mean the slide toggle's value is changed. The event does not fire when user toggle\n   * the slide toggle to change the slide toggle's value.\n   */\n  @Output() readonly dragChange: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Returns the unique id for the visual hidden input. */\n  get inputId(): string { return `${this.id || this._uniqueId}-input`; }\n\n  /** Reference to the underlying input element. */\n  @ViewChild('input') _inputElement: ElementRef;\n\n  /** Reference to the ripple directive on the thumb container. */\n  @ViewChild(MatRipple) _ripple: MatRipple;\n\n  constructor(elementRef: ElementRef,\n              /**\n               * @deprecated The `_platform` parameter to be removed.\n               * @deletion-target 7.0.0\n               */\n              _platform: Platform,\n              private _focusMonitor: FocusMonitor,\n              private _changeDetectorRef: ChangeDetectorRef,\n              @Attribute('tabindex') tabIndex: string,\n              private _ngZone: NgZone,\n              @Inject(MAT_SLIDE_TOGGLE_DEFAULT_OPTIONS)\n                  public defaults: MatSlideToggleDefaultOptions,\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode?: string) {\n    super(elementRef);\n    this.tabIndex = parseInt(tabIndex) || 0;\n  }\n\n  ngAfterContentInit() {\n    this._focusMonitor\n      .monitor(this._inputElement.nativeElement)\n      .subscribe(focusOrigin => this._onInputFocusChange(focusOrigin));\n  }\n\n  ngOnDestroy() {\n    this._focusMonitor.stopMonitoring(this._inputElement.nativeElement);\n  }\n\n  /** Method being called whenever the underlying input emits a change event. */\n  _onChangeEvent(event: Event) {\n    // We always have to stop propagation on the change event.\n    // Otherwise the change event, from the input element, will bubble up and\n    // emit its event object to the component's `change` output.\n    event.stopPropagation();\n\n    if (!this._dragging) {\n      this.toggleChange.emit();\n    }\n    // Releasing the pointer over the `<label>` element while dragging triggers another\n    // click event on the `<label>` element. This means that the checked state of the underlying\n    // input changed unintentionally and needs to be changed back. Or when the slide toggle's config\n    // disabled toggle change event by setting `disableToggleValue: true`, the slide toggle's value\n    // does not change, and the checked state of the underlying input needs to be changed back.\n    if (this._dragging || this.defaults.disableToggleValue) {\n      this._inputElement.nativeElement.checked = this.checked;\n      return;\n    }\n\n    // Sync the value from the underlying input element with the component instance.\n    this.checked = this._inputElement.nativeElement.checked;\n\n    // Emit our custom change event only if the underlying input emitted one. This ensures that\n    // there is no change event, when the checked state changes programmatically.\n    this._emitChangeEvent();\n  }\n\n  /** Method being called whenever the slide-toggle has been clicked. */\n  _onInputClick(event: Event) {\n    // We have to stop propagation for click events on the visual hidden input element.\n    // By default, when a user clicks on a label element, a generated click event will be\n    // dispatched on the associated input element. Since we are using a label element as our\n    // root container, the click event on the `slide-toggle` will be executed twice.\n    // The real click event will bubble up, and the generated click event also tries to bubble up.\n    // This will lead to multiple click events.\n    // Preventing bubbling for the second event will solve that issue.\n    event.stopPropagation();\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  writeValue(value: any): void {\n    this.checked = !!value;\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  registerOnChange(fn: any): void {\n    this.onChange = fn;\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  registerOnTouched(fn: any): void {\n    this.onTouched = fn;\n  }\n\n  /** Implemented as a part of ControlValueAccessor. */\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Focuses the slide-toggle. */\n  focus(): void {\n    this._focusMonitor.focusVia(this._inputElement.nativeElement, 'keyboard');\n  }\n\n  /** Toggles the checked state of the slide-toggle. */\n  toggle(): void {\n    this.checked = !this.checked;\n    this.onChange(this.checked);\n  }\n\n  /** Function is called whenever the focus changes for the input element. */\n  private _onInputFocusChange(focusOrigin: FocusOrigin) {\n    // TODO(paul): support `program`. See https://github.com/angular/material2/issues/9889\n    if (!this._focusRipple && focusOrigin === 'keyboard') {\n      // For keyboard focus show a persistent ripple as focus indicator.\n      this._focusRipple = this._ripple.launch(0, 0, {persistent: true});\n    } else if (!focusOrigin) {\n      this.onTouched();\n\n      // Fade out and clear the focus ripple if one is currently present.\n      if (this._focusRipple) {\n        this._focusRipple.fadeOut();\n        this._focusRipple = null;\n      }\n    }\n  }\n\n  /**\n   * Emits a change event on the `change` output. Also notifies the FormControl about the change.\n   */\n  private _emitChangeEvent() {\n    this.onChange(this.checked);\n    this.change.emit(new MatSlideToggleChange(this, this.checked));\n  }\n\n  /** Retrieves the percentage of thumb from the moved distance. Percentage as fraction of 100. */\n  private _getDragPercentage(distance: number) {\n    let percentage = (distance / this._thumbBarWidth) * 100;\n\n    // When the toggle was initially checked, then we have to start the drag at the end.\n    if (this._previousChecked) {\n      percentage += 100;\n    }\n\n    return Math.max(0, Math.min(percentage, 100));\n  }\n\n  _onDragStart() {\n    if (!this.disabled && !this._dragging) {\n      const thumbEl = this._thumbEl.nativeElement;\n      this._thumbBarWidth = this._thumbBarEl.nativeElement.clientWidth - thumbEl.clientWidth;\n      thumbEl.classList.add('mat-dragging');\n\n      this._previousChecked = this.checked;\n      this._dragging = true;\n    }\n  }\n\n  _onDrag(event: HammerInput) {\n    if (this._dragging) {\n      this._dragPercentage = this._getDragPercentage(event.deltaX);\n      // Calculate the moved distance based on the thumb bar width.\n      const dragX = (this._dragPercentage / 100) * this._thumbBarWidth;\n      this._thumbEl.nativeElement.style.transform = `translate3d(${dragX}px, 0, 0)`;\n    }\n  }\n\n  _onDragEnd() {\n    if (this._dragging) {\n      const newCheckedValue = this._dragPercentage > 50;\n\n      if (newCheckedValue !== this.checked) {\n        this.dragChange.emit();\n        if (!this.defaults.disableDragValue) {\n          this.checked = newCheckedValue;\n          this._emitChangeEvent();\n        }\n      }\n\n      // The drag should be stopped outside of the current event handler, otherwise the\n      // click event will be fired before it and will revert the drag change.\n      this._ngZone.runOutsideAngular(() => setTimeout(() => {\n        if (this._dragging) {\n          this._dragging = false;\n          this._thumbEl.nativeElement.classList.remove('mat-dragging');\n\n          // Reset the transform because the component will take care\n          // of the thumb position after drag.\n          this._thumbEl.nativeElement.style.transform = '';\n        }\n      }));\n    }\n  }\n\n  /** Method being called whenever the label text changes. */\n  _onLabelTextChange() {\n    // This method is getting called whenever the label of the slide-toggle changes.\n    // Since the slide-toggle uses the OnPush strategy we need to notify it about the change\n    // that has been recognized by the cdkObserveContent directive.\n    this._changeDetectorRef.markForCheck();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ObserversModule} from '@angular/cdk/observers';\nimport {NgModule} from '@angular/core';\nimport {GestureConfig, MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {HAMMER_GESTURE_CONFIG} from '@angular/platform-browser';\nimport {MatSlideToggle} from './slide-toggle';\n\n\n@NgModule({\n  imports: [MatRippleModule, MatCommonModule, ObserversModule],\n  exports: [MatSlideToggle, MatCommonModule],\n  declarations: [MatSlideToggle],\n  providers: [\n    {provide: HAMMER_GESTURE_CONFIG, useClass: GestureConfig}\n  ],\n})\nexport class MatSlideToggleModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  Component,\n  ChangeDetectionStrategy,\n  ElementRef,\n  Inject,\n  Input,\n  Optional,\n  ViewEncapsulation\n} from '@angular/core';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\nimport {CanColor, mixinColor} from '@angular/material/core';\n\n// TODO(josephperrott): Benchpress tests.\n// TODO(josephperrott): Add ARIA attributes for progress bar \"for\".\n\n// Boilerplate for applying mixins to MatProgressBar.\n/** @docs-private */\nexport class MatProgressBarBase {\n  constructor(public _elementRef: ElementRef) { }\n}\n\nexport const _MatProgressBarMixinBase = mixinColor(MatProgressBarBase, 'primary');\n\n/** Counter used to generate unique IDs for progress bars. */\nlet progressbarId = 0;\n\n/**\n * `<mat-progress-bar>` component.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-progress-bar',\n  exportAs: 'matProgressBar',\n  host: {\n    'role': 'progressbar',\n    'aria-valuemin': '0',\n    'aria-valuemax': '100',\n    '[attr.aria-valuenow]': 'value',\n    '[attr.mode]': 'mode',\n    'class': 'mat-progress-bar',\n    '[class._mat-animation-noopable]': `_animationMode === 'NoopAnimations'`,\n  },\n  inputs: ['color'],\n  templateUrl: 'progress-bar.html',\n  styleUrls: ['progress-bar.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatProgressBar extends _MatProgressBarMixinBase implements CanColor {\n\n\n  constructor(public _elementRef: ElementRef,\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode?: string) {\n    super(_elementRef);\n  }\n\n  /** Value of the progress bar. Defaults to zero. Mirrored to aria-valuenow. */\n  @Input()\n  get value(): number { return this._value; }\n  set value(v: number) { this._value = clamp(v || 0); }\n  private _value: number = 0;\n\n  /** Buffer value of the progress bar. Defaults to zero. */\n  @Input()\n  get bufferValue(): number { return this._bufferValue; }\n  set bufferValue(v: number) { this._bufferValue = clamp(v || 0); }\n  private _bufferValue: number = 0;\n\n  /**\n   * Mode of the progress bar.\n   *\n   * Input must be one of these values: determinate, indeterminate, buffer, query, defaults to\n   * 'determinate'.\n   * Mirrored to mode attribute.\n   */\n  @Input() mode: 'determinate' | 'indeterminate' | 'buffer' | 'query' = 'determinate';\n\n  /** The id of the progress bar. */\n  progressbarId = `mat-progress-bar-${progressbarId++}`;\n\n  /** Gets the current transform value for the progress bar's primary indicator. */\n  _primaryTransform() {\n    const scale = this.value / 100;\n    return {transform: `scaleX(${scale})`};\n  }\n\n  /**\n   * Gets the current transform value for the progress bar's buffer indicator. Only used if the\n   * progress mode is set to buffer, otherwise returns an undefined, causing no transformation.\n   */\n  _bufferTransform() {\n    if (this.mode === 'buffer') {\n      const scale = this.bufferValue / 100;\n      return {transform: `scaleX(${scale})`};\n    }\n  }\n}\n\n/** Clamps a value to be between two numbers, by default 0 and 100. */\nfunction clamp(v: number, min = 0, max = 100) {\n  return Math.max(min, Math.min(max, v));\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatProgressBar} from './progress-bar';\n\n\n@NgModule({\n  imports: [CommonModule, MatCommonModule],\n  exports: [MatProgressBar, MatCommonModule],\n  declarations: [MatProgressBar],\n})\nexport class MatProgressBarModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ChangeDetectionStrategy,\n  Inject,\n  Input,\n  ElementRef,\n  ViewEncapsulation,\n  Optional,\n  InjectionToken,\n} from '@angular/core';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\nimport {CanColor, mixinColor} from '@angular/material/core';\nimport {Platform} from '@angular/cdk/platform';\nimport {DOCUMENT} from '@angular/common';\nimport {coerceNumberProperty} from '@angular/cdk/coercion';\n\n/** Possible mode for a progress spinner. */\nexport type ProgressSpinnerMode = 'determinate' | 'indeterminate';\n\n/**\n * Base reference size of the spinner.\n * @docs-private\n */\nconst BASE_SIZE = 100;\n\n/**\n * Base reference stroke width of the spinner.\n * @docs-private\n */\nconst BASE_STROKE_WIDTH = 10;\n\n// Boilerplate for applying mixins to MatProgressSpinner.\n/** @docs-private */\nexport class MatProgressSpinnerBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatProgressSpinnerMixinBase = mixinColor(MatProgressSpinnerBase, 'primary');\n\n/** Default `mat-progress-spinner` options that can be overridden. */\nexport interface MatProgressSpinnerDefaultOptions {\n  /** Diameter of the spinner. */\n  diameter?: number;\n  /** Width of the spinner's stroke. */\n  strokeWidth?: number;\n  /**\n   * Whether the animations should be force to be enabled, ignoring if the current environment is\n   * using NoopAnimationsModule.\n   */\n  _forceAnimations?: boolean;\n}\n\n/** Injection token to be used to override the default options for `mat-progress-spinner`. */\nexport const MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS =\n    new InjectionToken<MatProgressSpinnerDefaultOptions>('mat-progress-spinner-default-options', {\n      providedIn: 'root',\n      factory: MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS_FACTORY,\n    });\n\n/** @docs-private */\nexport function MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS_FACTORY(): MatProgressSpinnerDefaultOptions {\n  return {diameter: BASE_SIZE};\n}\n\n// .0001 percentage difference is necessary in order to avoid unwanted animation frames\n// for example because the animation duration is 4 seconds, .1% accounts to 4ms\n// which are enough to see the flicker described in\n// https://github.com/angular/material2/issues/8984\nconst INDETERMINATE_ANIMATION_TEMPLATE = `\n @keyframes mat-progress-spinner-stroke-rotate-DIAMETER {\n    0%      { stroke-dashoffset: START_VALUE;  transform: rotate(0); }\n    12.5%   { stroke-dashoffset: END_VALUE;    transform: rotate(0); }\n    12.5001%  { stroke-dashoffset: END_VALUE;    transform: rotateX(180deg) rotate(72.5deg); }\n    25%     { stroke-dashoffset: START_VALUE;  transform: rotateX(180deg) rotate(72.5deg); }\n\n    25.0001%   { stroke-dashoffset: START_VALUE;  transform: rotate(270deg); }\n    37.5%   { stroke-dashoffset: END_VALUE;    transform: rotate(270deg); }\n    37.5001%  { stroke-dashoffset: END_VALUE;    transform: rotateX(180deg) rotate(161.5deg); }\n    50%     { stroke-dashoffset: START_VALUE;  transform: rotateX(180deg) rotate(161.5deg); }\n\n    50.0001%  { stroke-dashoffset: START_VALUE;  transform: rotate(180deg); }\n    62.5%   { stroke-dashoffset: END_VALUE;    transform: rotate(180deg); }\n    62.5001%  { stroke-dashoffset: END_VALUE;    transform: rotateX(180deg) rotate(251.5deg); }\n    75%     { stroke-dashoffset: START_VALUE;  transform: rotateX(180deg) rotate(251.5deg); }\n\n    75.0001%  { stroke-dashoffset: START_VALUE;  transform: rotate(90deg); }\n    87.5%   { stroke-dashoffset: END_VALUE;    transform: rotate(90deg); }\n    87.5001%  { stroke-dashoffset: END_VALUE;    transform: rotateX(180deg) rotate(341.5deg); }\n    100%    { stroke-dashoffset: START_VALUE;  transform: rotateX(180deg) rotate(341.5deg); }\n  }\n`;\n\n/**\n * `<mat-progress-spinner>` component.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-progress-spinner',\n  exportAs: 'matProgressSpinner',\n  host: {\n    'role': 'progressbar',\n    'class': 'mat-progress-spinner',\n    '[class._mat-animation-noopable]': `_noopAnimations`,\n    '[style.width.px]': 'diameter',\n    '[style.height.px]': 'diameter',\n    '[attr.aria-valuemin]': 'mode === \"determinate\" ? 0 : null',\n    '[attr.aria-valuemax]': 'mode === \"determinate\" ? 100 : null',\n    '[attr.aria-valuenow]': 'value',\n    '[attr.mode]': 'mode',\n  },\n  inputs: ['color'],\n  templateUrl: 'progress-spinner.html',\n  styleUrls: ['progress-spinner.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatProgressSpinner extends _MatProgressSpinnerMixinBase implements CanColor {\n\n  private _value = 0;\n  private _strokeWidth: number;\n  private _fallbackAnimation = false;\n\n  /** Tracks diameters of existing instances to de-dupe generated styles (default d = 100) */\n  private static diameters = new Set<number>([BASE_SIZE]);\n\n  /**\n   * Used for storing all of the generated keyframe animations.\n   * @dynamic\n   */\n  private static styleTag: HTMLStyleElement|null = null;\n\n  /** Whether the _mat-animation-noopable class should be applied, disabling animations.  */\n  _noopAnimations: boolean = this.animationMode === 'NoopAnimations' && (\n      !!this.defaults && !this.defaults._forceAnimations);\n\n  /** The diameter of the progress spinner (will set width and height of svg). */\n  @Input()\n  get diameter(): number { return this._diameter; }\n  set diameter(size: number) {\n    this._diameter = coerceNumberProperty(size);\n\n    if (!this._fallbackAnimation && !MatProgressSpinner.diameters.has(this._diameter)) {\n      this._attachStyleNode();\n    }\n  }\n  private _diameter = BASE_SIZE;\n\n  /** Stroke width of the progress spinner. */\n  @Input()\n  get strokeWidth(): number {\n    return this._strokeWidth || this.diameter / 10;\n  }\n  set strokeWidth(value: number) {\n    this._strokeWidth = coerceNumberProperty(value);\n  }\n\n  /** Mode of the progress circle */\n  @Input() mode: ProgressSpinnerMode = 'determinate';\n\n  /** Value of the progress circle. */\n  @Input()\n  get value(): number {\n    return this.mode === 'determinate' ? this._value : 0;\n  }\n  set value(newValue: number) {\n    this._value = Math.max(0, Math.min(100, coerceNumberProperty(newValue)));\n  }\n\n  constructor(public _elementRef: ElementRef,\n              platform: Platform,\n              @Optional() @Inject(DOCUMENT) private _document: any,\n              // @deletion-target 7.0.0 animationMode and defaults parameters to be made required.\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) private animationMode?: string,\n              @Inject(MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS)\n                  private defaults?: MatProgressSpinnerDefaultOptions) {\n\n    super(_elementRef);\n    this._fallbackAnimation = platform.EDGE || platform.TRIDENT;\n\n    if (defaults) {\n      if (defaults.diameter) {\n        this.diameter = defaults.diameter;\n      }\n\n      if (defaults.strokeWidth) {\n        this.strokeWidth = defaults.strokeWidth;\n      }\n    }\n\n    // On IE and Edge, we can't animate the `stroke-dashoffset`\n    // reliably so we fall back to a non-spec animation.\n    const animationClass =\n      `mat-progress-spinner-indeterminate${this._fallbackAnimation ? '-fallback' : ''}-animation`;\n\n    _elementRef.nativeElement.classList.add(animationClass);\n  }\n\n  /** The radius of the spinner, adjusted for stroke width. */\n  get _circleRadius() {\n    return (this.diameter - BASE_STROKE_WIDTH) / 2;\n  }\n\n  /** The view box of the spinner's svg element. */\n  get _viewBox() {\n    const viewBox = this._circleRadius * 2 + this.strokeWidth;\n    return `0 0 ${viewBox} ${viewBox}`;\n  }\n\n  /** The stroke circumference of the svg circle. */\n  get _strokeCircumference(): number {\n    return 2 * Math.PI * this._circleRadius;\n  }\n\n  /** The dash offset of the svg circle. */\n  get _strokeDashOffset() {\n    if (this.mode === 'determinate') {\n      return this._strokeCircumference * (100 - this._value) / 100;\n    }\n\n    // In fallback mode set the circle to 80% and rotate it with CSS.\n    if (this._fallbackAnimation && this.mode === 'indeterminate') {\n      return this._strokeCircumference * 0.2;\n    }\n\n    return null;\n  }\n\n  /** Stroke width of the circle in percent. */\n  get _circleStrokeWidth() {\n    return this.strokeWidth / this.diameter * 100;\n  }\n\n  /** Dynamically generates a style tag containing the correct animation for this diameter. */\n  private _attachStyleNode(): void {\n    let styleTag = MatProgressSpinner.styleTag;\n\n    if (!styleTag) {\n      styleTag = this._document.createElement('style');\n      this._document.head.appendChild(styleTag);\n      MatProgressSpinner.styleTag = styleTag;\n    }\n\n    if (styleTag && styleTag.sheet) {\n      (styleTag.sheet as CSSStyleSheet).insertRule(this._getAnimationText(), 0);\n    }\n\n    MatProgressSpinner.diameters.add(this.diameter);\n  }\n\n  /** Generates animation styles adjusted for the spinner's diameter. */\n  private _getAnimationText(): string {\n    return INDETERMINATE_ANIMATION_TEMPLATE\n        // Animation should begin at 5% and end at 80%\n        .replace(/START_VALUE/g, `${0.95 * this._strokeCircumference}`)\n        .replace(/END_VALUE/g, `${0.2 * this._strokeCircumference}`)\n        .replace(/DIAMETER/g, `${this.diameter}`);\n  }\n}\n\n\n/**\n * `<mat-spinner>` component.\n *\n * This is a component definition to be used as a convenience reference to create an\n * indeterminate `<mat-progress-spinner>` instance.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-spinner',\n  host: {\n    'role': 'progressbar',\n    'mode': 'indeterminate',\n    'class': 'mat-spinner mat-progress-spinner',\n    '[class._mat-animation-noopable]': `_noopAnimations`,\n    '[style.width.px]': 'diameter',\n    '[style.height.px]': 'diameter',\n  },\n  inputs: ['color'],\n  templateUrl: 'progress-spinner.html',\n  styleUrls: ['progress-spinner.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatSpinner extends MatProgressSpinner {\n  constructor(elementRef: ElementRef, platform: Platform,\n              @Optional() @Inject(DOCUMENT) document: any,\n              // @deletion-targets 7.0.0 animationMode and defaults parameters to be made required.\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) animationMode?: string,\n              @Inject(MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS)\n                  defaults?: MatProgressSpinnerDefaultOptions) {\n    super(elementRef, platform, document, animationMode, defaults);\n    this.mode = 'indeterminate';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatProgressSpinner, MatSpinner} from './progress-spinner';\n\n\n@NgModule({\n  imports: [MatCommonModule],\n  exports: [\n    MatProgressSpinner,\n    MatSpinner,\n    MatCommonModule\n  ],\n  declarations: [\n    MatProgressSpinner,\n    MatSpinner\n  ],\n})\nclass MatProgressSpinnerModule {}\n\nexport {MatProgressSpinnerModule};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor, FocusOrigin} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {UniqueSelectionDispatcher} from '@angular/cdk/collections';\nimport {\n  AfterContentInit,\n  AfterViewInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Input,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Output,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n  Inject,\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {\n  CanColor,\n  CanDisable,\n  CanDisableRipple,\n  HasTabIndex,\n  MatRipple,\n  mixinColor,\n  mixinDisabled,\n  mixinDisableRipple,\n  mixinTabIndex,\n  RippleRef,\n} from '@angular/material/core';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\n\n\n// Increasing integer for generating unique ids for radio components.\nlet nextUniqueId = 0;\n\n/**\n * Provider Expression that allows mat-radio-group to register as a ControlValueAccessor. This\n * allows it to support [(ngModel)] and ngControl.\n * @docs-private\n */\nexport const MAT_RADIO_GROUP_CONTROL_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatRadioGroup),\n  multi: true\n};\n\n/** Change event object emitted by MatRadio and MatRadioGroup. */\nexport class MatRadioChange {\n  constructor(\n    /** The MatRadioButton that emits the change event. */\n    public source: MatRadioButton,\n    /** The value of the MatRadioButton. */\n    public value: any) {}\n}\n\n\n// Boilerplate for applying mixins to MatRadioGroup.\n/** @docs-private */\nexport class MatRadioGroupBase { }\nexport const _MatRadioGroupMixinBase = mixinDisabled(MatRadioGroupBase);\n\n/**\n * A group of radio buttons. May contain one or more `<mat-radio-button>` elements.\n */\n@Directive({\n  selector: 'mat-radio-group',\n  exportAs: 'matRadioGroup',\n  providers: [MAT_RADIO_GROUP_CONTROL_VALUE_ACCESSOR],\n  host: {\n    'role': 'radiogroup',\n    'class': 'mat-radio-group',\n  },\n  inputs: ['disabled'],\n})\nexport class MatRadioGroup extends _MatRadioGroupMixinBase\n    implements AfterContentInit, ControlValueAccessor, CanDisable {\n  /**\n   * Selected value for group. Should equal the value of the selected radio button if there *is*\n   * a corresponding radio button with a matching value. If there is *not* such a corresponding\n   * radio button, this value persists to be applied in case a new radio button is added with a\n   * matching value.\n   */\n  private _value: any = null;\n\n  /** The HTML name attribute applied to radio buttons in this group. */\n  private _name: string = `mat-radio-group-${nextUniqueId++}`;\n\n  /** The currently selected radio button. Should match value. */\n  private _selected: MatRadioButton | null = null;\n\n  /** Whether the `value` has been set to its initial value. */\n  private _isInitialized: boolean = false;\n\n  /** Whether the labels should appear after or before the radio-buttons. Defaults to 'after' */\n  private _labelPosition: 'before' | 'after' = 'after';\n\n  /** Whether the radio group is disabled. */\n  private _disabled: boolean = false;\n\n  /** Whether the radio group is required. */\n  private _required: boolean = false;\n\n  /** The method to be called in order to update ngModel */\n  _controlValueAccessorChangeFn: (value: any) => void = () => {};\n\n  /**\n   * onTouch function registered via registerOnTouch (ControlValueAccessor).\n   * @docs-private\n   */\n  onTouched: () => any = () => {};\n\n  /**\n   * Event emitted when the group value changes.\n   * Change events are only emitted when the value changes due to user interaction with\n   * a radio button (the same behavior as `<input type-\"radio\">`).\n   */\n  @Output() readonly change: EventEmitter<MatRadioChange> = new EventEmitter<MatRadioChange>();\n\n  /** Child radio buttons. */\n  @ContentChildren(forwardRef(() => MatRadioButton), { descendants: true })\n  _radios: QueryList<MatRadioButton>;\n\n  /** Name of the radio button group. All radio buttons inside this group will use this name. */\n  @Input()\n  get name(): string { return this._name; }\n  set name(value: string) {\n    this._name = value;\n    this._updateRadioButtonNames();\n  }\n\n  /** Whether the labels should appear after or before the radio-buttons. Defaults to 'after' */\n  @Input()\n  get labelPosition(): 'before' | 'after' {\n    return this._labelPosition;\n  }\n  set labelPosition(v) {\n    this._labelPosition = v === 'before' ? 'before' : 'after';\n    this._markRadiosForCheck();\n  }\n\n  /** Value of the radio button. */\n  @Input()\n  get value(): any { return this._value; }\n  set value(newValue: any) {\n    if (this._value !== newValue) {\n      // Set this before proceeding to ensure no circular loop occurs with selection.\n      this._value = newValue;\n\n      this._updateSelectedRadioFromValue();\n      this._checkSelectedRadioButton();\n    }\n  }\n\n  _checkSelectedRadioButton() {\n    if (this._selected && !this._selected.checked) {\n      this._selected.checked = true;\n    }\n  }\n\n  /** Whether the radio button is selected. */\n  @Input()\n  get selected() { return this._selected; }\n  set selected(selected: MatRadioButton | null) {\n    this._selected = selected;\n    this.value = selected ? selected.value : null;\n    this._checkSelectedRadioButton();\n  }\n\n  /** Whether the radio group is disabled */\n  @Input()\n  get disabled(): boolean { return this._disabled; }\n  set disabled(value) {\n    this._disabled = coerceBooleanProperty(value);\n    this._markRadiosForCheck();\n  }\n\n  /** Whether the radio group is required */\n  @Input()\n  get required(): boolean { return this._required; }\n  set required(value: boolean) {\n    this._required = coerceBooleanProperty(value);\n    this._markRadiosForCheck();\n  }\n\n  constructor(private _changeDetector: ChangeDetectorRef) {\n    super();\n  }\n\n  /**\n   * Initialize properties once content children are available.\n   * This allows us to propagate relevant attributes to associated buttons.\n   */\n  ngAfterContentInit() {\n    // Mark this component as initialized in AfterContentInit because the initial value can\n    // possibly be set by NgModel on MatRadioGroup, and it is possible that the OnInit of the\n    // NgModel occurs *after* the OnInit of the MatRadioGroup.\n    this._isInitialized = true;\n  }\n\n  /**\n   * Mark this group as being \"touched\" (for ngModel). Meant to be called by the contained\n   * radio buttons upon their blur.\n   */\n  _touch() {\n    if (this.onTouched) {\n      this.onTouched();\n    }\n  }\n\n  private _updateRadioButtonNames(): void {\n    if (this._radios) {\n      this._radios.forEach(radio => {\n        radio.name = this.name;\n      });\n    }\n  }\n\n  /** Updates the `selected` radio button from the internal _value state. */\n  private _updateSelectedRadioFromValue(): void {\n    // If the value already matches the selected radio, do nothing.\n    const isAlreadySelected = this._selected !== null && this._selected.value === this._value;\n\n    if (this._radios && !isAlreadySelected) {\n      this._selected = null;\n      this._radios.forEach(radio => {\n        radio.checked = this.value === radio.value;\n        if (radio.checked) {\n          this._selected = radio;\n        }\n      });\n    }\n  }\n\n  /** Dispatch change event with current selection and group value. */\n  _emitChangeEvent(): void {\n    if (this._isInitialized) {\n      this.change.emit(new MatRadioChange(this._selected!, this._value));\n    }\n  }\n\n  _markRadiosForCheck() {\n    if (this._radios) {\n      this._radios.forEach(radio => radio._markForCheck());\n    }\n  }\n\n  /**\n   * Sets the model value. Implemented as part of ControlValueAccessor.\n   * @param value\n   */\n  writeValue(value: any) {\n    this.value = value;\n    this._changeDetector.markForCheck();\n  }\n\n  /**\n   * Registers a callback to be triggered when the model value changes.\n   * Implemented as part of ControlValueAccessor.\n   * @param fn Callback to be registered.\n   */\n  registerOnChange(fn: (value: any) => void) {\n    this._controlValueAccessorChangeFn = fn;\n  }\n\n  /**\n   * Registers a callback to be triggered when the control is touched.\n   * Implemented as part of ControlValueAccessor.\n   * @param fn Callback to be registered.\n   */\n  registerOnTouched(fn: any) {\n    this.onTouched = fn;\n  }\n\n  /**\n   * Sets the disabled state of the control. Implemented as a part of ControlValueAccessor.\n   * @param isDisabled Whether the control should be disabled.\n   */\n  setDisabledState(isDisabled: boolean) {\n    this.disabled = isDisabled;\n    this._changeDetector.markForCheck();\n  }\n}\n\n// Boilerplate for applying mixins to MatRadioButton.\n/** @docs-private */\nexport class MatRadioButtonBase {\n  // Since the disabled property is manually defined for the MatRadioButton and isn't set up in\n  // the mixin base class. To be able to use the tabindex mixin, a disabled property must be\n  // defined to properly work.\n  disabled: boolean;\n\n  constructor(public _elementRef: ElementRef) {}\n}\n// As per Material design specifications the selection control radio should use the accent color\n// palette by default. https://material.io/guidelines/components/selection-controls.html\nexport const _MatRadioButtonMixinBase =\n    mixinColor(mixinDisableRipple(mixinTabIndex(MatRadioButtonBase)), 'accent');\n\n/**\n * A Material design radio-button. Typically placed inside of `<mat-radio-group>` elements.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-radio-button',\n  templateUrl: 'radio.html',\n  styleUrls: ['radio.css'],\n  inputs: ['color', 'disableRipple', 'tabIndex'],\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matRadioButton',\n  host: {\n    'class': 'mat-radio-button',\n    '[class.mat-radio-checked]': 'checked',\n    '[class.mat-radio-disabled]': 'disabled',\n    '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"',\n    '[attr.id]': 'id',\n    // Note: under normal conditions focus shouldn't land on this element, however it may be\n    // programmatically set, for example inside of a focus trap, in this case we want to forward\n    // the focus to the native element.\n    '(focus)': '_inputElement.nativeElement.focus()',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatRadioButton extends _MatRadioButtonMixinBase\n    implements OnInit, AfterViewInit, OnDestroy, CanColor, CanDisableRipple, HasTabIndex {\n\n  private _uniqueId: string = `mat-radio-${++nextUniqueId}`;\n\n  /** The unique ID for the radio button. */\n  @Input() id: string = this._uniqueId;\n\n  /** Analog to HTML 'name' attribute used to group radios for unique selection. */\n  @Input() name: string;\n\n  /** Used to set the 'aria-label' attribute on the underlying input element. */\n  @Input('aria-label') ariaLabel: string;\n\n  /** The 'aria-labelledby' attribute takes precedence as the element's text alternative. */\n  @Input('aria-labelledby') ariaLabelledby: string;\n\n  /** The 'aria-describedby' attribute is read after the element's label and field type. */\n  @Input('aria-describedby') ariaDescribedby: string;\n\n  /** Whether this radio button is checked. */\n  @Input()\n  get checked(): boolean { return this._checked; }\n  set checked(value: boolean) {\n    const newCheckedState = coerceBooleanProperty(value);\n    if (this._checked !== newCheckedState) {\n      this._checked = newCheckedState;\n      if (newCheckedState && this.radioGroup && this.radioGroup.value !== this.value) {\n        this.radioGroup.selected = this;\n      } else if (!newCheckedState && this.radioGroup && this.radioGroup.value === this.value) {\n\n        // When unchecking the selected radio button, update the selected radio\n        // property on the group.\n        this.radioGroup.selected = null;\n      }\n\n      if (newCheckedState) {\n        // Notify all radio buttons with the same name to un-check.\n        this._radioDispatcher.notify(this.id, this.name);\n      }\n      this._changeDetector.markForCheck();\n    }\n  }\n\n  /** The value of this radio button. */\n  @Input()\n  get value(): any { return this._value; }\n  set value(value: any) {\n    if (this._value !== value) {\n      this._value = value;\n      if (this.radioGroup !== null) {\n        if (!this.checked) {\n          // Update checked when the value changed to match the radio group's value\n          this.checked = this.radioGroup.value === value;\n        }\n        if (this.checked) {\n          this.radioGroup.selected = this;\n        }\n      }\n    }\n  }\n\n  /** Whether the label should appear after or before the radio button. Defaults to 'after' */\n  @Input()\n  get labelPosition(): 'before' | 'after' {\n    return this._labelPosition || (this.radioGroup && this.radioGroup.labelPosition) || 'after';\n  }\n  set labelPosition(value) {\n    this._labelPosition = value;\n  }\n  private _labelPosition: 'before' | 'after';\n\n  /** Whether the radio button is disabled. */\n  @Input()\n  get disabled(): boolean {\n    return this._disabled || (this.radioGroup !== null && this.radioGroup.disabled);\n  }\n  set disabled(value: boolean) {\n    const newDisabledState = coerceBooleanProperty(value);\n    if (this._disabled !== newDisabledState) {\n      this._disabled = newDisabledState;\n      this._changeDetector.markForCheck();\n    }\n  }\n\n  /** Whether the radio button is required. */\n  @Input()\n  get required(): boolean {\n    return this._required || (this.radioGroup && this.radioGroup.required);\n  }\n  set required(value: boolean) {\n    this._required = coerceBooleanProperty(value);\n  }\n\n  /**\n   * Event emitted when the checked state of this radio button changes.\n   * Change events are only emitted when the value changes due to user interaction with\n   * the radio button (the same behavior as `<input type-\"radio\">`).\n   */\n  @Output() readonly change: EventEmitter<MatRadioChange> = new EventEmitter<MatRadioChange>();\n\n  /** The parent radio group. May or may not be present. */\n  radioGroup: MatRadioGroup;\n\n  /** ID of the native input element inside `<mat-radio-button>` */\n  get inputId(): string { return `${this.id || this._uniqueId}-input`; }\n\n  /** Whether this radio is checked. */\n  private _checked: boolean = false;\n\n  /** Whether this radio is disabled. */\n  private _disabled: boolean;\n\n  /** Whether this radio is required. */\n  private _required: boolean;\n\n  /** Value assigned to this radio. */\n  private _value: any = null;\n\n  /** The child ripple instance. */\n  @ViewChild(MatRipple) _ripple: MatRipple;\n\n  /** Reference to the current focus ripple. */\n  private _focusRipple: RippleRef | null;\n\n  /** Unregister function for _radioDispatcher */\n  private _removeUniqueSelectionListener: () => void = () => {};\n\n  /** The native `<input type=radio>` element */\n  @ViewChild('input') _inputElement: ElementRef;\n\n  constructor(@Optional() radioGroup: MatRadioGroup,\n              elementRef: ElementRef,\n              private _changeDetector: ChangeDetectorRef,\n              private _focusMonitor: FocusMonitor,\n              private _radioDispatcher: UniqueSelectionDispatcher,\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode?: string) {\n    super(elementRef);\n\n    // Assertions. Ideally these should be stripped out by the compiler.\n    // TODO(jelbourn): Assert that there's no name binding AND a parent radio group.\n    this.radioGroup = radioGroup;\n\n    this._removeUniqueSelectionListener =\n      _radioDispatcher.listen((id: string, name: string) => {\n        if (id !== this.id && name === this.name) {\n          this.checked = false;\n        }\n      });\n  }\n\n  /** Focuses the radio button. */\n  focus(): void {\n    this._focusMonitor.focusVia(this._inputElement.nativeElement, 'keyboard');\n  }\n\n  /**\n   * Marks the radio button as needing checking for change detection.\n   * This method is exposed because the parent radio group will directly\n   * update bound properties of the radio button.\n   */\n  _markForCheck() {\n    // When group value changes, the button will not be notified. Use `markForCheck` to explicit\n    // update radio button's status\n    this._changeDetector.markForCheck();\n  }\n\n  ngOnInit() {\n    if (this.radioGroup) {\n      // If the radio is inside a radio group, determine if it should be checked\n      this.checked = this.radioGroup.value === this._value;\n      // Copy name from parent radio group\n      this.name = this.radioGroup.name;\n    }\n  }\n\n  ngAfterViewInit() {\n    this._focusMonitor\n      .monitor(this._inputElement.nativeElement)\n      .subscribe(focusOrigin => this._onInputFocusChange(focusOrigin));\n  }\n\n  ngOnDestroy() {\n    this._focusMonitor.stopMonitoring(this._inputElement.nativeElement);\n    this._removeUniqueSelectionListener();\n  }\n\n  /** Dispatch change event with current value. */\n  private _emitChangeEvent(): void {\n    this.change.emit(new MatRadioChange(this, this._value));\n  }\n\n  _isRippleDisabled() {\n    return this.disableRipple || this.disabled;\n  }\n\n  _onInputClick(event: Event) {\n    // We have to stop propagation for click events on the visual hidden input element.\n    // By default, when a user clicks on a label element, a generated click event will be\n    // dispatched on the associated input element. Since we are using a label element as our\n    // root container, the click event on the `radio-button` will be executed twice.\n    // The real click event will bubble up, and the generated click event also tries to bubble up.\n    // This will lead to multiple click events.\n    // Preventing bubbling for the second event will solve that issue.\n    event.stopPropagation();\n  }\n\n  /**\n   * Triggered when the radio button received a click or the input recognized any change.\n   * Clicking on a label element, will trigger a change event on the associated input.\n   */\n  _onInputChange(event: Event) {\n    // We always have to stop propagation on the change event.\n    // Otherwise the change event, from the input element, will bubble up and\n    // emit its event object to the `change` output.\n    event.stopPropagation();\n\n    const groupValueChanged = this.radioGroup && this.value !== this.radioGroup.value;\n    this.checked = true;\n    this._emitChangeEvent();\n\n    if (this.radioGroup) {\n      this.radioGroup._controlValueAccessorChangeFn(this.value);\n      this.radioGroup._touch();\n      if (groupValueChanged) {\n        this.radioGroup._emitChangeEvent();\n      }\n    }\n  }\n\n  /** Function is called whenever the focus changes for the input element. */\n  private _onInputFocusChange(focusOrigin: FocusOrigin) {\n    // TODO(paul): support `program`. See https://github.com/angular/material2/issues/9889\n    if (!this._focusRipple && focusOrigin === 'keyboard') {\n      this._focusRipple = this._ripple.launch(0, 0, {persistent: true});\n    } else if (!focusOrigin) {\n      if (this.radioGroup) {\n        this.radioGroup._touch();\n      }\n\n      if (this._focusRipple) {\n        this._focusRipple.fadeOut();\n        this._focusRipple = null;\n      }\n    }\n  }\n\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {MatRadioButton, MatRadioGroup} from './radio';\n\n\n@NgModule({\n  imports: [CommonModule, MatRippleModule, MatCommonModule],\n  exports: [MatRadioGroup, MatRadioButton, MatCommonModule],\n  declarations: [MatRadioGroup, MatRadioButton],\n})\nexport class MatRadioModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/** Animations used by the Material drawers. */\nexport const matDrawerAnimations: {\n  readonly transformDrawer: AnimationTriggerMetadata;\n} = {\n  /** Animation that slides a drawer in and out. */\n  transformDrawer: trigger('transform', [\n    state('open, open-instant', style({\n      'transform': 'translate3d(0, 0, 0)',\n      'visibility': 'visible',\n    })),\n    state('void', style({\n      // Avoids the shadow showing up when closed in SSR.\n      'box-shadow': 'none',\n      'visibility': 'hidden',\n    })),\n    transition('void => open-instant', animate('0ms')),\n    transition('void <=> open, open-instant => void',\n        animate('400ms cubic-bezier(0.25, 0.8, 0.25, 1)'))\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatOptionModule} from '@angular/material/core';\nimport {MatFormFieldModule} from '@angular/material/form-field';\nimport {MAT_SELECT_SCROLL_STRATEGY_PROVIDER, MatSelect, MatSelectTrigger} from './select';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    OverlayModule,\n    MatOptionModule,\n    MatCommonModule,\n  ],\n  exports: [MatFormFieldModule, MatSelect, MatSelectTrigger, MatOptionModule, MatCommonModule],\n  declarations: [MatSelect, MatSelectTrigger],\n  providers: [MAT_SELECT_SCROLL_STRATEGY_PROVIDER]\n})\nexport class MatSelectModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/** Animations used by MatTooltip. */\nexport const matTooltipAnimations: {\n  readonly tooltipState: AnimationTriggerMetadata;\n} = {\n  /** Animation that transitions a tooltip in and out. */\n  tooltipState: trigger('state', [\n    state('initial, void, hidden', style({transform: 'scale(0)'})),\n    state('visible', style({transform: 'scale(1)'})),\n    transition('* => visible', animate('150ms cubic-bezier(0.0, 0.0, 0.2, 1)')),\n    transition('* => hidden', animate('150ms cubic-bezier(0.4, 0.0, 1, 1)')),\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {A11yModule} from '@angular/cdk/a11y';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {\n  MatTooltip,\n  TooltipComponent,\n  MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY_PROVIDER,\n} from './tooltip';\n\n@NgModule({\n  imports: [\n    A11yModule,\n    CommonModule,\n    OverlayModule,\n    MatCommonModule,\n  ],\n  exports: [MatTooltip, TooltipComponent, MatCommonModule],\n  declarations: [MatTooltip, TooltipComponent],\n  entryComponents: [TooltipComponent],\n  providers: [MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY_PROVIDER]\n})\nexport class MatTooltipModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable, Optional, SkipSelf} from '@angular/core';\nimport {Subject} from 'rxjs';\n\n\n/**\n * To modify the labels and text displayed, create a new instance of MatPaginatorIntl and\n * include it in a custom provider\n */\n@Injectable({providedIn: 'root'})\nexport class MatPaginatorIntl {\n  /**\n   * Stream that emits whenever the labels here are changed. Use this to notify\n   * components if the labels have changed after initialization.\n   */\n  readonly changes: Subject<void> = new Subject<void>();\n\n  /** A label for the page size selector. */\n  itemsPerPageLabel: string = 'Items per page:';\n\n  /** A label for the button that increments the current page. */\n  nextPageLabel: string = 'Next page';\n\n  /** A label for the button that decrements the current page. */\n  previousPageLabel: string = 'Previous page';\n\n  /** A label for the button that moves to the first page. */\n  firstPageLabel: string = 'First page';\n\n  /** A label for the button that moves to the last page. */\n  lastPageLabel: string = 'Last page';\n\n  /** A label for the range of items within the current page and the length of the whole list. */\n  getRangeLabel = (page: number, pageSize: number, length: number) => {\n    if (length == 0 || pageSize == 0) { return `0 of ${length}`; }\n\n    length = Math.max(length, 0);\n\n    const startIndex = page * pageSize;\n\n    // If the start index exceeds the list length, do not try and fix the end index to the end.\n    const endIndex = startIndex < length ?\n        Math.min(startIndex + pageSize, length) :\n        startIndex + pageSize;\n\n    return `${startIndex + 1} - ${endIndex} of ${length}`;\n  }\n}\n\n/** @docs-private */\nexport function MAT_PAGINATOR_INTL_PROVIDER_FACTORY(parentIntl: MatPaginatorIntl) {\n  return parentIntl || new MatPaginatorIntl();\n}\n\n/** @docs-private */\nexport const MAT_PAGINATOR_INTL_PROVIDER = {\n  // If there is already an MatPaginatorIntl available, use that. Otherwise, provide a new one.\n  provide: MatPaginatorIntl,\n  deps: [[new Optional(), new SkipSelf(), MatPaginatorIntl]],\n  useFactory: MAT_PAGINATOR_INTL_PROVIDER_FACTORY\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceNumberProperty, coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  OnInit,\n  Output,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {Subscription} from 'rxjs';\nimport {MatPaginatorIntl} from './paginator-intl';\nimport {HasInitialized, mixinInitialized} from '@angular/material/core';\n\n/** The default page size if there is no page size and there are no provided page size options. */\nconst DEFAULT_PAGE_SIZE = 50;\n\n/**\n * Change event object that is emitted when the user selects a\n * different page size or navigates to another page.\n */\nexport class PageEvent {\n  /** The current page index. */\n  pageIndex: number;\n\n  /**\n   * Index of the page that was selected previously.\n   * @deletion-target 7.0.0 To be made into a required property.\n   */\n  previousPageIndex?: number;\n\n  /** The current page size */\n  pageSize: number;\n\n  /** The current total number of items being paged */\n  length: number;\n}\n\n// Boilerplate for applying mixins to MatPaginator.\n/** @docs-private */\nexport class MatPaginatorBase {}\nexport const _MatPaginatorBase = mixinInitialized(MatPaginatorBase);\n\n/**\n * Component to provide navigation between paged information. Displays the size of the current\n * page, user-selectable options to change that size, what items are being shown, and\n * navigational button to go to the previous or next page.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-paginator',\n  exportAs: 'matPaginator',\n  templateUrl: 'paginator.html',\n  styleUrls: ['paginator.css'],\n  host: {\n    'class': 'mat-paginator',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatPaginator extends _MatPaginatorBase implements OnInit, OnDestroy, HasInitialized {\n  private _initialized: boolean;\n  private _intlChanges: Subscription;\n\n  /** The zero-based page index of the displayed list of items. Defaulted to 0. */\n  @Input()\n  get pageIndex(): number { return this._pageIndex; }\n  set pageIndex(value: number) {\n    this._pageIndex = Math.max(coerceNumberProperty(value), 0);\n    this._changeDetectorRef.markForCheck();\n  }\n  _pageIndex: number = 0;\n\n  /** The length of the total number of items that are being paginated. Defaulted to 0. */\n  @Input()\n  get length(): number { return this._length; }\n  set length(value: number) {\n    this._length = coerceNumberProperty(value);\n    this._changeDetectorRef.markForCheck();\n  }\n  _length: number = 0;\n\n  /** Number of items to display on a page. By default set to 50. */\n  @Input()\n  get pageSize(): number { return this._pageSize; }\n  set pageSize(value: number) {\n    this._pageSize = Math.max(coerceNumberProperty(value), 0);\n    this._updateDisplayedPageSizeOptions();\n  }\n  private _pageSize: number;\n\n  /** The set of provided page size options to display to the user. */\n  @Input()\n  get pageSizeOptions(): number[] { return this._pageSizeOptions; }\n  set pageSizeOptions(value: number[]) {\n    this._pageSizeOptions = (value || []).map(p => coerceNumberProperty(p));\n    this._updateDisplayedPageSizeOptions();\n  }\n  private _pageSizeOptions: number[] = [];\n\n  /** Whether to hide the page size selection UI from the user. */\n  @Input()\n  get hidePageSize(): boolean { return this._hidePageSize; }\n  set hidePageSize(value: boolean) {\n    this._hidePageSize = coerceBooleanProperty(value);\n  }\n  private _hidePageSize = false;\n\n\n  /** Whether to show the first/last buttons UI to the user. */\n  @Input()\n  get showFirstLastButtons(): boolean { return this._showFirstLastButtons; }\n  set showFirstLastButtons(value: boolean) {\n    this._showFirstLastButtons = coerceBooleanProperty(value);\n  }\n  private _showFirstLastButtons = false;\n\n  /** Event emitted when the paginator changes the page size or page index. */\n  @Output() readonly page: EventEmitter<PageEvent> = new EventEmitter<PageEvent>();\n\n  /** Displayed set of page size options. Will be sorted and include current page size. */\n  _displayedPageSizeOptions: number[];\n\n  constructor(public _intl: MatPaginatorIntl,\n              private _changeDetectorRef: ChangeDetectorRef) {\n    super();\n    this._intlChanges = _intl.changes.subscribe(() => this._changeDetectorRef.markForCheck());\n  }\n\n  ngOnInit() {\n    this._initialized = true;\n    this._updateDisplayedPageSizeOptions();\n    this._markInitialized();\n  }\n\n  ngOnDestroy() {\n    this._intlChanges.unsubscribe();\n  }\n\n  /** Advances to the next page if it exists. */\n  nextPage(): void {\n    if (!this.hasNextPage()) { return; }\n\n    const previousPageIndex = this.pageIndex;\n    this.pageIndex++;\n    this._emitPageEvent(previousPageIndex);\n  }\n\n  /** Move back to the previous page if it exists. */\n  previousPage(): void {\n    if (!this.hasPreviousPage()) { return; }\n\n    const previousPageIndex = this.pageIndex;\n    this.pageIndex--;\n    this._emitPageEvent(previousPageIndex);\n  }\n\n  /** Move to the first page if not already there. */\n  firstPage(): void {\n    // hasPreviousPage being false implies at the start\n    if (!this.hasPreviousPage()) { return; }\n\n    const previousPageIndex = this.pageIndex;\n    this.pageIndex = 0;\n    this._emitPageEvent(previousPageIndex);\n  }\n\n  /** Move to the last page if not already there. */\n  lastPage(): void {\n    // hasNextPage being false implies at the end\n    if (!this.hasNextPage()) { return; }\n\n    const previousPageIndex = this.pageIndex;\n    this.pageIndex = this.getNumberOfPages();\n    this._emitPageEvent(previousPageIndex);\n  }\n\n  /** Whether there is a previous page. */\n  hasPreviousPage(): boolean {\n    return this.pageIndex >= 1 && this.pageSize != 0;\n  }\n\n  /** Whether there is a next page. */\n  hasNextPage(): boolean {\n    const numberOfPages = this.getNumberOfPages();\n    return this.pageIndex < numberOfPages && this.pageSize != 0;\n  }\n\n  /** Calculate the number of pages */\n  getNumberOfPages(): number {\n    return Math.ceil(this.length / this.pageSize) - 1;\n  }\n\n\n  /**\n   * Changes the page size so that the first item displayed on the page will still be\n   * displayed using the new page size.\n   *\n   * For example, if the page size is 10 and on the second page (items indexed 10-19) then\n   * switching so that the page size is 5 will set the third page as the current page so\n   * that the 10th item will still be displayed.\n   */\n  _changePageSize(pageSize: number) {\n    // Current page needs to be updated to reflect the new page size. Navigate to the page\n    // containing the previous page's first item.\n    const startIndex = this.pageIndex * this.pageSize;\n    const previousPageIndex = this.pageIndex;\n\n    this.pageIndex = Math.floor(startIndex / pageSize) || 0;\n    this.pageSize = pageSize;\n    this._emitPageEvent(previousPageIndex);\n  }\n\n  /**\n   * Updates the list of page size options to display to the user. Includes making sure that\n   * the page size is an option and that the list is sorted.\n   */\n  private _updateDisplayedPageSizeOptions() {\n    if (!this._initialized) { return; }\n\n    // If no page size is provided, use the first page size option or the default page size.\n    if (!this.pageSize) {\n      this._pageSize = this.pageSizeOptions.length != 0 ?\n          this.pageSizeOptions[0] :\n          DEFAULT_PAGE_SIZE;\n    }\n\n    this._displayedPageSizeOptions = this.pageSizeOptions.slice();\n\n    if (this._displayedPageSizeOptions.indexOf(this.pageSize) === -1) {\n      this._displayedPageSizeOptions.push(this.pageSize);\n    }\n\n    // Sort the numbers using a number-specific sort function.\n    this._displayedPageSizeOptions.sort((a, b) => a - b);\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Emits an event notifying that a change of the paginator's properties has been triggered. */\n  private _emitPageEvent(previousPageIndex: number) {\n    this.page.emit({\n      previousPageIndex,\n      pageIndex: this.pageIndex,\n      pageSize: this.pageSize,\n      length: this.length\n    });\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatButtonModule} from '@angular/material/button';\nimport {MatSelectModule} from '@angular/material/select';\nimport {MatTooltipModule} from '@angular/material/tooltip';\nimport {MatPaginator} from './paginator';\nimport {MAT_PAGINATOR_INTL_PROVIDER} from './paginator-intl';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatButtonModule,\n    MatSelectModule,\n    MatTooltipModule,\n  ],\n  exports: [MatPaginator],\n  declarations: [MatPaginator],\n  providers: [MAT_PAGINATOR_INTL_PROVIDER],\n})\nexport class MatPaginatorModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Directive,\n  TemplateRef,\n  ComponentFactoryResolver,\n  ApplicationRef,\n  Injector,\n  ViewContainerRef,\n  Inject,\n  OnDestroy,\n} from '@angular/core';\nimport {TemplatePortal, DomPortalOutlet} from '@angular/cdk/portal';\nimport {DOCUMENT} from '@angular/common';\n\n/**\n * Menu content that will be rendered lazily once the menu is opened.\n */\n@Directive({\n  selector: 'ng-template[matMenuContent]'\n})\nexport class MatMenuContent implements OnDestroy {\n  private _portal: TemplatePortal<any>;\n  private _outlet: DomPortalOutlet;\n\n  constructor(\n    private _template: TemplateRef<any>,\n    private _componentFactoryResolver: ComponentFactoryResolver,\n    private _appRef: ApplicationRef,\n    private _injector: Injector,\n    private _viewContainerRef: ViewContainerRef,\n    @Inject(DOCUMENT) private _document: any) {}\n\n  /**\n   * Attaches the content with a particular context.\n   * @docs-private\n   */\n  attach(context: any = {}) {\n    if (!this._portal) {\n      this._portal = new TemplatePortal(this._template, this._viewContainerRef);\n    }\n\n    this.detach();\n\n    if (!this._outlet) {\n      this._outlet = new DomPortalOutlet(this._document.createElement('div'),\n          this._componentFactoryResolver, this._appRef, this._injector);\n    }\n\n    const element: HTMLElement = this._template.elementRef.nativeElement;\n\n    // Because we support opening the same menu from different triggers (which in turn have their\n    // own `OverlayRef` panel), we have to re-insert the host element every time, otherwise we\n    // risk it staying attached to a pane that's no longer in the DOM.\n    element.parentNode!.insertBefore(this._outlet.outletElement, element);\n    this._portal.attach(this._outlet, context);\n  }\n\n  /**\n   * Detaches the content.\n   * @docs-private\n   */\n  detach() {\n    if (this._portal.isAttached) {\n      this._portal.detach();\n    }\n  }\n\n  ngOnDestroy() {\n    if (this._outlet) {\n      this._outlet.dispose();\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport{\n  trigger,\n  state,\n  style,\n  animate,\n  transition,\n  query,\n  group,\n  sequence,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/**\n * Animations used by the mat-menu component.\n * Animation duration and timing values are based on:\n * https://material.io/guidelines/components/menus.html#menus-usage\n */\nexport const matMenuAnimations: {\n  readonly transformMenu: AnimationTriggerMetadata;\n  readonly fadeInItems: AnimationTriggerMetadata;\n} = {\n  /**\n   * This animation controls the menu panel's entry and exit from the page.\n   *\n   * When the menu panel is added to the DOM, it scales in and fades in its border.\n   *\n   * When the menu panel is removed from the DOM, it simply fades out after a brief\n   * delay to display the ripple.\n   */\n  transformMenu: trigger('transformMenu', [\n    state('void', style({\n      opacity: 0,\n      // This starts off from 0.01, instead of 0, because there's an issue in the Angular animations\n      // as of 4.2, which causes the animation to be skipped if it starts from 0.\n      transform: 'scale(0.01, 0.01)'\n    })),\n    transition('void => enter', sequence([\n      query('.mat-menu-content', style({opacity: 0})),\n      animate('100ms linear', style({opacity: 1, transform: 'scale(1, 0.5)'})),\n      group([\n        query('.mat-menu-content', animate('400ms cubic-bezier(0.55, 0, 0.55, 0.2)',\n          style({opacity: 1})\n        )),\n        animate('300ms cubic-bezier(0.25, 0.8, 0.25, 1)', style({transform: 'scale(1, 1)'})),\n      ])\n    ])),\n    transition('* => void', animate('150ms 50ms linear', style({opacity: 0})))\n  ]),\n\n\n  /**\n   * This animation fades in the background color and content of the menu panel\n   * after its containing element is scaled in.\n   */\n  fadeInItems: trigger('fadeInItems', [\n    // TODO(crisbeto): this is inside the `transformMenu`\n    // now. Remove next time we do breaking changes.\n    state('showing', style({opacity: 1})),\n    transition('void => *', [\n      style({opacity: 0}),\n      animate('400ms 100ms cubic-bezier(0.55, 0, 0.55, 0.2)')\n    ])\n  ])\n};\n\n/**\n * @deprecated\n * @deletion-target 7.0.0\n */\nexport const fadeInItems = matMenuAnimations.fadeInItems;\n\n/**\n * @deprecated\n * @deletion-target 7.0.0\n */\nexport const transformMenu = matMenuAnimations.transformMenu;\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {EventEmitter, TemplateRef, InjectionToken} from '@angular/core';\nimport {MenuPositionX, MenuPositionY} from './menu-positions';\nimport {Direction} from '@angular/cdk/bidi';\nimport {FocusOrigin} from '@angular/cdk/a11y';\nimport {MatMenuContent} from './menu-content';\n\n/**\n * Injection token used to provide the parent menu to menu-specific components.\n * @docs-private\n */\nexport const MAT_MENU_PANEL = new InjectionToken<MatMenuPanel>('MAT_MENU_PANEL');\n\n/**\n * Interface for a custom menu panel that can be used with `matMenuTriggerFor`.\n * @docs-private\n */\nexport interface MatMenuPanel<T = any> {\n  xPosition: MenuPositionX;\n  yPosition: MenuPositionY;\n  overlapTrigger: boolean;\n  templateRef: TemplateRef<any>;\n  close: EventEmitter<void | 'click' | 'keydown' | 'tab'>;\n  parentMenu?: MatMenuPanel | undefined;\n  direction?: Direction;\n  focusFirstItem: (origin?: FocusOrigin) => void;\n  resetActiveItem: () => void;\n  setPositionClasses?: (x: MenuPositionX, y: MenuPositionY) => void;\n  setElevation?(depth: number): void;\n  lazyContent?: MatMenuContent;\n  backdropClass?: string;\n  hasBackdrop?: boolean;\n  addItem?: (item: T) => void;\n  removeItem?: (item: T) => void;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusableOption, FocusMonitor, FocusOrigin} from '@angular/cdk/a11y';\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  OnDestroy,\n  ViewEncapsulation,\n  Inject,\n  Optional,\n} from '@angular/core';\nimport {\n  CanDisable,\n  CanDisableRipple,\n  mixinDisabled,\n  mixinDisableRipple\n} from '@angular/material/core';\nimport {Subject} from 'rxjs';\nimport {DOCUMENT} from '@angular/common';\nimport {MAT_MENU_PANEL, MatMenuPanel} from './menu-panel';\n\n// Boilerplate for applying mixins to MatMenuItem.\n/** @docs-private */\nexport class MatMenuItemBase {}\nexport const _MatMenuItemMixinBase = mixinDisableRipple(mixinDisabled(MatMenuItemBase));\n\n/**\n * This directive is intended to be used inside an mat-menu tag.\n * It exists mostly to set the role attribute.\n */\n@Component({\n  moduleId: module.id,\n  selector: '[mat-menu-item]',\n  exportAs: 'matMenuItem',\n  inputs: ['disabled', 'disableRipple'],\n  host: {\n    'role': 'menuitem',\n    'class': 'mat-menu-item',\n    '[class.mat-menu-item-highlighted]': '_highlighted',\n    '[class.mat-menu-item-submenu-trigger]': '_triggersSubmenu',\n    '[attr.tabindex]': '_getTabIndex()',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.disabled]': 'disabled || null',\n    '(click)': '_checkDisabled($event)',\n    '(mouseenter)': '_handleMouseEnter()',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  templateUrl: 'menu-item.html',\n})\nexport class MatMenuItem extends _MatMenuItemMixinBase\n    implements FocusableOption, CanDisable, CanDisableRipple, OnDestroy {\n\n  private _document: Document;\n\n  /** Stream that emits when the menu item is hovered. */\n  readonly _hovered: Subject<MatMenuItem> = new Subject<MatMenuItem>();\n\n  /** Whether the menu item is highlighted. */\n  _highlighted: boolean = false;\n\n  /** Whether the menu item acts as a trigger for a sub-menu. */\n  _triggersSubmenu: boolean = false;\n\n  constructor(\n    private _elementRef: ElementRef,\n    @Inject(DOCUMENT) document?: any,\n    private _focusMonitor?: FocusMonitor,\n    @Inject(MAT_MENU_PANEL) @Optional() private _parentMenu?: MatMenuPanel<MatMenuItem>) {\n\n    // @deletion-target 7.0.0 make `_focusMonitor` and `document` required params.\n    super();\n\n    if (_focusMonitor) {\n      // Start monitoring the element so it gets the appropriate focused classes. We want\n      // to show the focus style for menu items only when the focus was not caused by a\n      // mouse or touch interaction.\n      _focusMonitor.monitor(this._getHostElement(), false);\n    }\n\n    if (_parentMenu && _parentMenu.addItem) {\n      _parentMenu.addItem(this);\n    }\n\n    this._document = document;\n  }\n\n  /** Focuses the menu item. */\n  focus(origin: FocusOrigin = 'program'): void {\n    if (this._focusMonitor) {\n      this._focusMonitor.focusVia(this._getHostElement(), origin);\n    } else {\n      this._getHostElement().focus();\n    }\n  }\n\n  ngOnDestroy() {\n    if (this._focusMonitor) {\n      this._focusMonitor.stopMonitoring(this._getHostElement());\n    }\n\n    if (this._parentMenu && this._parentMenu.removeItem) {\n      this._parentMenu.removeItem(this);\n    }\n\n    this._hovered.complete();\n  }\n\n  /** Used to set the `tabindex`. */\n  _getTabIndex(): string {\n    return this.disabled ? '-1' : '0';\n  }\n\n  /** Returns the host DOM element. */\n  _getHostElement(): HTMLElement {\n    return this._elementRef.nativeElement;\n  }\n\n  /** Prevents the default element actions if it is disabled. */\n  _checkDisabled(event: Event): void {\n    if (this.disabled) {\n      event.preventDefault();\n      event.stopPropagation();\n    }\n  }\n\n  /** Emits to the hover stream. */\n  _handleMouseEnter() {\n    this._hovered.next(this);\n  }\n\n  /** Gets the label to be used when determining whether the option should be focused. */\n  getLabel(): string {\n    const element: HTMLElement = this._elementRef.nativeElement;\n    const textNodeType = this._document ? this._document.TEXT_NODE : 3;\n    let output = '';\n\n    if (element.childNodes) {\n      const length = element.childNodes.length;\n\n      // Go through all the top-level text nodes and extract their text.\n      // We skip anything that's not a text node to prevent the text from\n      // being thrown off by something like an icon.\n      for (let i = 0; i < length; i++) {\n        if (element.childNodes[i].nodeType === textNodeType) {\n          output += element.childNodes[i].textContent;\n        }\n      }\n    }\n\n    return output.trim();\n  }\n\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusKeyManager, FocusOrigin} from '@angular/cdk/a11y';\nimport {Direction} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {ESCAPE, LEFT_ARROW, RIGHT_ARROW, DOWN_ARROW, UP_ARROW} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  Component,\n  ContentChild,\n  ContentChildren,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  OnDestroy,\n  Output,\n  TemplateRef,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n  OnInit,\n} from '@angular/core';\nimport {merge, Observable, Subject, Subscription} from 'rxjs';\nimport {startWith, switchMap, take} from 'rxjs/operators';\nimport {matMenuAnimations} from './menu-animations';\nimport {MatMenuContent} from './menu-content';\nimport {throwMatMenuInvalidPositionX, throwMatMenuInvalidPositionY} from './menu-errors';\nimport {MatMenuItem} from './menu-item';\nimport {MAT_MENU_PANEL, MatMenuPanel} from './menu-panel';\nimport {MenuPositionX, MenuPositionY} from './menu-positions';\nimport {AnimationEvent} from '@angular/animations';\n\n\n/** Default `mat-menu` options that can be overridden. */\nexport interface MatMenuDefaultOptions {\n  /** The x-axis position of the menu. */\n  xPosition: MenuPositionX;\n\n  /** The y-axis position of the menu. */\n  yPosition: MenuPositionY;\n\n  /** Whether the menu should overlap the menu trigger. */\n  overlapTrigger: boolean;\n\n  /** Class to be applied to the menu's backdrop. */\n  backdropClass: string;\n\n  /** Whether the menu has a backdrop. */\n  hasBackdrop?: boolean;\n}\n\n/** Injection token to be used to override the default options for `mat-menu`. */\nexport const MAT_MENU_DEFAULT_OPTIONS =\n    new InjectionToken<MatMenuDefaultOptions>('mat-menu-default-options', {\n      providedIn: 'root',\n      factory: MAT_MENU_DEFAULT_OPTIONS_FACTORY\n    });\n\n/** @docs-private */\nexport function MAT_MENU_DEFAULT_OPTIONS_FACTORY(): MatMenuDefaultOptions {\n  return {\n    overlapTrigger: true,\n    xPosition: 'after',\n    yPosition: 'below',\n    backdropClass: 'cdk-overlay-transparent-backdrop',\n  };\n}\n/**\n * Start elevation for the menu panel.\n * @docs-private\n */\nconst MAT_MENU_BASE_ELEVATION = 2;\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-menu',\n  templateUrl: 'menu.html',\n  styleUrls: ['menu.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matMenu',\n  animations: [\n    matMenuAnimations.transformMenu,\n    matMenuAnimations.fadeInItems\n  ],\n  providers: [\n    {provide: MAT_MENU_PANEL, useExisting: MatMenu}\n  ]\n})\nexport class MatMenu implements AfterContentInit, MatMenuPanel<MatMenuItem>, OnInit, OnDestroy {\n  private _keyManager: FocusKeyManager<MatMenuItem>;\n  private _xPosition: MenuPositionX = this._defaultOptions.xPosition;\n  private _yPosition: MenuPositionY = this._defaultOptions.yPosition;\n  private _previousElevation: string;\n\n  /** Menu items inside the current menu. */\n  private _items: MatMenuItem[] = [];\n\n  /** Emits whenever the amount of menu items changes. */\n  private _itemChanges = new Subject<MatMenuItem[]>();\n\n  /** Subscription to tab events on the menu panel */\n  private _tabSubscription = Subscription.EMPTY;\n\n  /** Config object to be passed into the menu's ngClass */\n  _classList: {[key: string]: boolean} = {};\n\n  /** Current state of the panel animation. */\n  _panelAnimationState: 'void' | 'enter' = 'void';\n\n  /** Emits whenever an animation on the menu completes. */\n  _animationDone = new Subject<AnimationEvent>();\n\n  /** Whether the menu is animating. */\n  _isAnimating: boolean;\n\n  /** Parent menu of the current menu panel. */\n  parentMenu: MatMenuPanel | undefined;\n\n  /** Layout direction of the menu. */\n  direction: Direction;\n\n  /** Class to be added to the backdrop element. */\n  @Input() backdropClass: string = this._defaultOptions.backdropClass;\n\n  /** Position of the menu in the X axis. */\n  @Input()\n  get xPosition(): MenuPositionX { return this._xPosition; }\n  set xPosition(value: MenuPositionX) {\n    if (value !== 'before' && value !== 'after') {\n      throwMatMenuInvalidPositionX();\n    }\n    this._xPosition = value;\n    this.setPositionClasses();\n  }\n\n  /** Position of the menu in the Y axis. */\n  @Input()\n  get yPosition(): MenuPositionY { return this._yPosition; }\n  set yPosition(value: MenuPositionY) {\n    if (value !== 'above' && value !== 'below') {\n      throwMatMenuInvalidPositionY();\n    }\n    this._yPosition = value;\n    this.setPositionClasses();\n  }\n\n  /** @docs-private */\n  @ViewChild(TemplateRef) templateRef: TemplateRef<any>;\n\n  /**\n   * List of the items inside of a menu.\n   * @deprecated\n   * @deletion-target 7.0.0\n   */\n  @ContentChildren(MatMenuItem) items: QueryList<MatMenuItem>;\n\n  /**\n   * Menu content that will be rendered lazily.\n   * @docs-private\n   */\n  @ContentChild(MatMenuContent) lazyContent: MatMenuContent;\n\n  /** Whether the menu should overlap its trigger. */\n  @Input()\n  get overlapTrigger(): boolean { return this._overlapTrigger; }\n  set overlapTrigger(value: boolean) {\n    this._overlapTrigger = coerceBooleanProperty(value);\n  }\n  private _overlapTrigger: boolean = this._defaultOptions.overlapTrigger;\n\n  /** Whether the menu has a backdrop. */\n  @Input()\n  get hasBackdrop(): boolean | undefined { return this._hasBackdrop; }\n  set hasBackdrop(value: boolean | undefined) {\n    this._hasBackdrop = coerceBooleanProperty(value);\n  }\n  private _hasBackdrop: boolean | undefined = this._defaultOptions.hasBackdrop;\n\n  /**\n   * This method takes classes set on the host mat-menu element and applies them on the\n   * menu template that displays in the overlay container.  Otherwise, it's difficult\n   * to style the containing menu from outside the component.\n   * @param classes list of class names\n   */\n  @Input('class')\n  set panelClass(classes: string) {\n    if (classes && classes.length) {\n      this._classList = classes.split(' ').reduce((obj: any, className: string) => {\n        obj[className] = true;\n        return obj;\n      }, {});\n\n      this._elementRef.nativeElement.className = '';\n    }\n  }\n\n  /**\n   * This method takes classes set on the host mat-menu element and applies them on the\n   * menu template that displays in the overlay container.  Otherwise, it's difficult\n   * to style the containing menu from outside the component.\n   * @deprecated Use `panelClass` instead.\n   * @deletion-target 7.0.0\n   */\n  @Input()\n  get classList(): string { return this.panelClass; }\n  set classList(classes: string) { this.panelClass = classes; }\n\n  /** Event emitted when the menu is closed. */\n  @Output() readonly closed: EventEmitter<void | 'click' | 'keydown' | 'tab'> =\n      new EventEmitter<void | 'click' | 'keydown' | 'tab'>();\n\n  /**\n   * Event emitted when the menu is closed.\n   * @deprecated Switch to `closed` instead\n   * @deletion-target 7.0.0\n   */\n  @Output() close = this.closed;\n\n  constructor(\n    private _elementRef: ElementRef,\n    private _ngZone: NgZone,\n    @Inject(MAT_MENU_DEFAULT_OPTIONS) private _defaultOptions: MatMenuDefaultOptions) { }\n\n  ngOnInit() {\n    this.setPositionClasses();\n  }\n\n  ngAfterContentInit() {\n    this._keyManager = new FocusKeyManager<MatMenuItem>(this._items).withWrap().withTypeAhead();\n    this._tabSubscription = this._keyManager.tabOut.subscribe(() => this.closed.emit('tab'));\n  }\n\n  ngOnDestroy() {\n    this._tabSubscription.unsubscribe();\n    this.closed.complete();\n  }\n\n  /** Stream that emits whenever the hovered menu item changes. */\n  _hovered(): Observable<MatMenuItem> {\n    return this._itemChanges.pipe(\n      startWith(this._items),\n      switchMap(items => merge(...items.map(item => item._hovered)))\n    );\n  }\n\n  /** Handle a keyboard event from the menu, delegating to the appropriate action. */\n  _handleKeydown(event: KeyboardEvent) {\n    const keyCode = event.keyCode;\n\n    switch (keyCode) {\n      case ESCAPE:\n        this.closed.emit('keydown');\n        event.stopPropagation();\n      break;\n      case LEFT_ARROW:\n        if (this.parentMenu && this.direction === 'ltr') {\n          this.closed.emit('keydown');\n        }\n      break;\n      case RIGHT_ARROW:\n        if (this.parentMenu && this.direction === 'rtl') {\n          this.closed.emit('keydown');\n        }\n      break;\n      default:\n        if (keyCode === UP_ARROW || keyCode === DOWN_ARROW) {\n          this._keyManager.setFocusOrigin('keyboard');\n        }\n\n        this._keyManager.onKeydown(event);\n    }\n  }\n\n  /**\n   * Focus the first item in the menu.\n   * @param origin Action from which the focus originated. Used to set the correct styling.\n   */\n  focusFirstItem(origin: FocusOrigin = 'program'): void {\n    // When the content is rendered lazily, it takes a bit before the items are inside the DOM.\n    if (this.lazyContent) {\n      this._ngZone.onStable.asObservable()\n        .pipe(take(1))\n        .subscribe(() => this._keyManager.setFocusOrigin(origin).setFirstItemActive());\n    } else {\n      this._keyManager.setFocusOrigin(origin).setFirstItemActive();\n    }\n  }\n\n  /**\n   * Resets the active item in the menu. This is used when the menu is opened, allowing\n   * the user to start from the first option when pressing the down arrow.\n   */\n  resetActiveItem() {\n    this._keyManager.setActiveItem(-1);\n  }\n\n  /**\n   * Sets the menu panel elevation.\n   * @param depth Number of parent menus that come before the menu.\n   */\n  setElevation(depth: number): void {\n    // The elevation starts at the base and increases by one for each level.\n    const newElevation = `mat-elevation-z${MAT_MENU_BASE_ELEVATION + depth}`;\n    const customElevation = Object.keys(this._classList).find(c => c.startsWith('mat-elevation-z'));\n\n    if (!customElevation || customElevation === this._previousElevation) {\n      if (this._previousElevation) {\n        this._classList[this._previousElevation] = false;\n      }\n\n      this._classList[newElevation] = true;\n      this._previousElevation = newElevation;\n    }\n  }\n\n  /**\n   * Registers a menu item with the menu.\n   * @docs-private\n   */\n  addItem(item: MatMenuItem) {\n    // We register the items through this method, rather than picking them up through\n    // `ContentChildren`, because we need the items to be picked up by their closest\n    // `mat-menu` ancestor. If we used `@ContentChildren(MatMenuItem, {descendants: true})`,\n    // all descendant items will bleed into the top-level menu in the case where the consumer\n    // has `mat-menu` instances nested inside each other.\n    if (this._items.indexOf(item) === -1) {\n      this._items.push(item);\n      this._itemChanges.next(this._items);\n    }\n  }\n\n  /**\n   * Removes an item from the menu.\n   * @docs-private\n   */\n  removeItem(item: MatMenuItem) {\n    const index = this._items.indexOf(item);\n\n    if (this._items.indexOf(item) > -1) {\n      this._items.splice(index, 1);\n      this._itemChanges.next(this._items);\n    }\n  }\n\n  /**\n   * Adds classes to the menu panel based on its position. Can be used by\n   * consumers to add specific styling based on the position.\n   * @param posX Position of the menu along the x axis.\n   * @param posY Position of the menu along the y axis.\n   * @docs-private\n   */\n  setPositionClasses(posX: MenuPositionX = this.xPosition, posY: MenuPositionY = this.yPosition) {\n    const classes = this._classList;\n    classes['mat-menu-before'] = posX === 'before';\n    classes['mat-menu-after'] = posX === 'after';\n    classes['mat-menu-above'] = posY === 'above';\n    classes['mat-menu-below'] = posY === 'below';\n  }\n\n  /** Starts the enter animation. */\n  _startAnimation() {\n    // @deletion-target 7.0.0 Combine with _resetAnimation.\n    this._panelAnimationState = 'enter';\n  }\n\n  /** Resets the panel animation to its initial state. */\n  _resetAnimation() {\n    // @deletion-target 7.0.0 Combine with _startAnimation.\n    this._panelAnimationState = 'void';\n  }\n\n  /** Callback that is invoked when the panel animation completes. */\n  _onAnimationDone(event: AnimationEvent) {\n    this._animationDone.next(event);\n    this._isAnimating = false;\n\n    // Scroll the content element to the top once the animation is done. This is necessary, because\n    // we move focus to the first item while it's still being animated, which can throw the browser\n    // off when it determines the scroll position. Alternatively we can move focus when the\n    // animation is done, however moving focus asynchronously will interrupt screen readers\n    // which are in the process of reading out the menu already. We take the `element` from\n    // the `event` since we can't use a `ViewChild` to access the pane.\n    if (event.toState === 'enter' && this._keyManager.activeItemIndex === 0) {\n      event.element.scrollTop = 0;\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor, FocusOrigin, isFakeMousedownFromScreenReader} from '@angular/cdk/a11y';\nimport {Direction, Directionality} from '@angular/cdk/bidi';\nimport {LEFT_ARROW, RIGHT_ARROW} from '@angular/cdk/keycodes';\nimport {\n  FlexibleConnectedPositionStrategy,\n  HorizontalConnectionPos,\n  Overlay,\n  OverlayConfig,\n  OverlayRef,\n  ScrollStrategy,\n  VerticalConnectionPos,\n} from '@angular/cdk/overlay';\nimport {TemplatePortal} from '@angular/cdk/portal';\nimport {\n  AfterContentInit,\n  Directive,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  InjectionToken,\n  Input,\n  OnDestroy,\n  Optional,\n  Output,\n  Self,\n  ViewContainerRef,\n} from '@angular/core';\nimport {asapScheduler, merge, of as observableOf, Subscription} from 'rxjs';\nimport {delay, filter, take, takeUntil} from 'rxjs/operators';\nimport {MatMenu} from './menu-directive';\nimport {throwMatMenuMissingError} from './menu-errors';\nimport {MatMenuItem} from './menu-item';\nimport {MatMenuPanel} from './menu-panel';\nimport {MenuPositionX, MenuPositionY} from './menu-positions';\n\n/** Injection token that determines the scroll handling while the menu is open. */\nexport const MAT_MENU_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mat-menu-scroll-strategy');\n\n/** @docs-private */\nexport function MAT_MENU_SCROLL_STRATEGY_FACTORY(overlay: Overlay): () => ScrollStrategy {\n  return () => overlay.scrollStrategies.reposition();\n}\n\n/** @docs-private */\nexport const MAT_MENU_SCROLL_STRATEGY_FACTORY_PROVIDER = {\n  provide: MAT_MENU_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_MENU_SCROLL_STRATEGY_FACTORY,\n};\n\n/** Default top padding of the menu panel. */\nexport const MENU_PANEL_TOP_PADDING = 8;\n\n// TODO(andrewseguin): Remove the kebab versions in favor of camelCased attribute selectors\n\n/**\n * This directive is intended to be used in conjunction with an mat-menu tag.  It is\n * responsible for toggling the display of the provided menu instance.\n */\n@Directive({\n  selector: `[mat-menu-trigger-for], [matMenuTriggerFor]`,\n  host: {\n    'aria-haspopup': 'true',\n    '[attr.aria-expanded]': 'menuOpen || null',\n    '(mousedown)': '_handleMousedown($event)',\n    '(keydown)': '_handleKeydown($event)',\n    '(click)': '_handleClick($event)',\n  },\n  exportAs: 'matMenuTrigger'\n})\nexport class MatMenuTrigger implements AfterContentInit, OnDestroy {\n  private _portal: TemplatePortal;\n  private _overlayRef: OverlayRef | null = null;\n  private _menuOpen: boolean = false;\n  private _closeSubscription = Subscription.EMPTY;\n  private _hoverSubscription = Subscription.EMPTY;\n\n  // Tracking input type is necessary so it's possible to only auto-focus\n  // the first item of the list when the menu is opened via the keyboard\n  private _openedByMouse: boolean = false;\n\n  /**\n   * @deprecated\n   * @deletion-target 7.0.0\n   */\n  @Input('mat-menu-trigger-for')\n  get _deprecatedMatMenuTriggerFor(): MatMenuPanel {\n    return this.menu;\n  }\n\n  set _deprecatedMatMenuTriggerFor(v: MatMenuPanel) {\n    this.menu = v;\n  }\n\n  /** References the menu instance that the trigger is associated with. */\n  @Input('matMenuTriggerFor') menu: MatMenuPanel;\n\n  /** Data to be passed along to any lazily-rendered content. */\n  @Input('matMenuTriggerData') menuData: any;\n\n  /** Event emitted when the associated menu is opened. */\n  @Output() readonly menuOpened: EventEmitter<void> = new EventEmitter<void>();\n\n  /**\n   * Event emitted when the associated menu is opened.\n   * @deprecated Switch to `menuOpened` instead\n   * @deletion-target 7.0.0\n   */\n  // tslint:disable-next-line:no-output-on-prefix\n  @Output() readonly onMenuOpen: EventEmitter<void> = this.menuOpened;\n\n  /** Event emitted when the associated menu is closed. */\n  @Output() readonly menuClosed: EventEmitter<void> = new EventEmitter<void>();\n\n  /**\n   * Event emitted when the associated menu is closed.\n   * @deprecated Switch to `menuClosed` instead\n   * @deletion-target 7.0.0\n   */\n  // tslint:disable-next-line:no-output-on-prefix\n  @Output() readonly onMenuClose: EventEmitter<void> = this.menuClosed;\n\n  constructor(private _overlay: Overlay,\n              private _element: ElementRef,\n              private _viewContainerRef: ViewContainerRef,\n              @Inject(MAT_MENU_SCROLL_STRATEGY) private _scrollStrategy,\n              @Optional() private _parentMenu: MatMenu,\n              @Optional() @Self() private _menuItemInstance: MatMenuItem,\n              @Optional() private _dir: Directionality,\n              // TODO(crisbeto): make the _focusMonitor required when doing breaking changes.\n              // @deletion-target 7.0.0\n              private _focusMonitor?: FocusMonitor) {\n\n    if (_menuItemInstance) {\n      _menuItemInstance._triggersSubmenu = this.triggersSubmenu();\n    }\n  }\n\n  ngAfterContentInit() {\n    this._checkMenu();\n\n    this.menu.close.subscribe(reason => {\n      this._destroyMenu();\n\n      // If a click closed the menu, we should close the entire chain of nested menus.\n      if ((reason === 'click' || reason === 'tab') && this._parentMenu) {\n        this._parentMenu.closed.emit(reason);\n      }\n    });\n\n    this._handleHover();\n  }\n\n  ngOnDestroy() {\n    if (this._overlayRef) {\n      this._overlayRef.dispose();\n      this._overlayRef = null;\n    }\n\n    this._cleanUpSubscriptions();\n  }\n\n  /** Whether the menu is open. */\n  get menuOpen(): boolean {\n    return this._menuOpen;\n  }\n\n  /** The text direction of the containing app. */\n  get dir(): Direction {\n    return this._dir && this._dir.value === 'rtl' ? 'rtl' : 'ltr';\n  }\n\n  /** Whether the menu triggers a sub-menu or a top-level one. */\n  triggersSubmenu(): boolean {\n    return !!(this._menuItemInstance && this._parentMenu);\n  }\n\n  /** Toggles the menu between the open and closed states. */\n  toggleMenu(): void {\n    return this._menuOpen ? this.closeMenu() : this.openMenu();\n  }\n\n  /** Opens the menu. */\n  openMenu(): void {\n    if (this._menuOpen) {\n      return;\n    }\n\n    const overlayRef = this._createOverlay();\n    this._setPosition(overlayRef.getConfig().positionStrategy as FlexibleConnectedPositionStrategy);\n    overlayRef.attach(this._portal);\n\n    if (this.menu.lazyContent) {\n      this.menu.lazyContent.attach(this.menuData);\n    }\n\n    this._closeSubscription = this._menuClosingActions().subscribe(() => this.closeMenu());\n    this._initMenu();\n\n    if (this.menu instanceof MatMenu) {\n      this.menu._startAnimation();\n    }\n  }\n\n  /** Closes the menu. */\n  closeMenu(): void {\n    this.menu.close.emit();\n  }\n\n  /**\n   * Focuses the menu trigger.\n   * @param origin Source of the menu trigger's focus.\n   */\n  focus(origin: FocusOrigin = 'program') {\n    if (this._focusMonitor) {\n      this._focusMonitor.focusVia(this._element.nativeElement, origin);\n    } else {\n      this._element.nativeElement.focus();\n    }\n  }\n\n  /** Closes the menu and does the necessary cleanup. */\n  private _destroyMenu() {\n    if (!this._overlayRef || !this.menuOpen) {\n      return;\n    }\n\n    const menu = this.menu;\n\n    this._closeSubscription.unsubscribe();\n    this._overlayRef.detach();\n\n    if (menu instanceof MatMenu) {\n      menu._resetAnimation();\n\n      if (menu.lazyContent) {\n        // Wait for the exit animation to finish before detaching the content.\n        menu._animationDone\n          .pipe(filter(event => event.toState === 'void'), take(1))\n          .subscribe(() => {\n            menu.lazyContent!.detach();\n            this._resetMenu();\n          });\n      } else {\n        this._resetMenu();\n      }\n    } else {\n      this._resetMenu();\n\n      if (menu.lazyContent) {\n        menu.lazyContent.detach();\n      }\n    }\n  }\n\n  /**\n   * This method sets the menu state to open and focuses the first item if\n   * the menu was opened via the keyboard.\n   */\n  private _initMenu(): void {\n    this.menu.parentMenu = this.triggersSubmenu() ? this._parentMenu : undefined;\n    this.menu.direction = this.dir;\n    this._setMenuElevation();\n    this._setIsMenuOpen(true);\n    this.menu.focusFirstItem(this._openedByMouse ? 'mouse' : 'program');\n  }\n\n  /** Updates the menu elevation based on the amount of parent menus that it has. */\n  private _setMenuElevation(): void {\n    if (this.menu.setElevation) {\n      let depth = 0;\n      let parentMenu = this.menu.parentMenu;\n\n      while (parentMenu) {\n        depth++;\n        parentMenu = parentMenu.parentMenu;\n      }\n\n      this.menu.setElevation(depth);\n    }\n  }\n\n  /**\n   * This method resets the menu when it's closed, most importantly restoring\n   * focus to the menu trigger if the menu was opened via the keyboard.\n   */\n  private _resetMenu(): void {\n    this._setIsMenuOpen(false);\n\n    // We should reset focus if the user is navigating using a keyboard or\n    // if we have a top-level trigger which might cause focus to be lost\n    // when clicking on the backdrop.\n    if (!this._openedByMouse) {\n      // Note that the focus style will show up both for `program` and\n      // `keyboard` so we don't have to specify which one it is.\n      this.focus();\n    } else if (!this.triggersSubmenu()) {\n      this.focus('mouse');\n    }\n\n    this._openedByMouse = false;\n  }\n\n  // set state rather than toggle to support triggers sharing a menu\n  private _setIsMenuOpen(isOpen: boolean): void {\n    this._menuOpen = isOpen;\n    this._menuOpen ? this.menuOpened.emit() : this.menuClosed.emit();\n\n    if (this.triggersSubmenu()) {\n      this._menuItemInstance._highlighted = isOpen;\n    }\n  }\n\n  /**\n   * This method checks that a valid instance of MatMenu has been passed into\n   * matMenuTriggerFor. If not, an exception is thrown.\n   */\n  private _checkMenu() {\n    if (!this.menu) {\n      throwMatMenuMissingError();\n    }\n  }\n\n  /**\n   * This method creates the overlay from the provided menu's template and saves its\n   * OverlayRef so that it can be attached to the DOM when openMenu is called.\n   */\n  private _createOverlay(): OverlayRef {\n    if (!this._overlayRef) {\n      this._portal = new TemplatePortal(this.menu.templateRef, this._viewContainerRef);\n      const config = this._getOverlayConfig();\n      this._subscribeToPositions(config.positionStrategy as FlexibleConnectedPositionStrategy);\n      this._overlayRef = this._overlay.create(config);\n    }\n\n    return this._overlayRef;\n  }\n\n  /**\n   * This method builds the configuration object needed to create the overlay, the OverlayState.\n   * @returns OverlayConfig\n   */\n  private _getOverlayConfig(): OverlayConfig {\n    return new OverlayConfig({\n      positionStrategy: this._overlay.position()\n          .flexibleConnectedTo(this._element)\n          .withTransformOriginOn('.mat-menu-panel'),\n      hasBackdrop: this.menu.hasBackdrop == null ? !this.triggersSubmenu() : this.menu.hasBackdrop,\n      backdropClass: this.menu.backdropClass || 'cdk-overlay-transparent-backdrop',\n      scrollStrategy: this._scrollStrategy(),\n      direction: this._dir\n    });\n  }\n\n  /**\n   * Listens to changes in the position of the overlay and sets the correct classes\n   * on the menu based on the new position. This ensures the animation origin is always\n   * correct, even if a fallback position is used for the overlay.\n   */\n  private _subscribeToPositions(position: FlexibleConnectedPositionStrategy): void {\n    if (this.menu.setPositionClasses) {\n      position.positionChanges.subscribe(change => {\n        const posX: MenuPositionX = change.connectionPair.overlayX === 'start' ? 'after' : 'before';\n        const posY: MenuPositionY = change.connectionPair.overlayY === 'top' ? 'below' : 'above';\n\n        this.menu.setPositionClasses!(posX, posY);\n      });\n    }\n  }\n\n  /**\n   * Sets the appropriate positions on a position strategy\n   * so the overlay connects with the trigger correctly.\n   * @param positionStrategy Strategy whose position to update.\n   */\n  private _setPosition(positionStrategy: FlexibleConnectedPositionStrategy) {\n    let [originX, originFallbackX]: HorizontalConnectionPos[] =\n        this.menu.xPosition === 'before' ? ['end', 'start'] : ['start', 'end'];\n\n    let [overlayY, overlayFallbackY]: VerticalConnectionPos[] =\n        this.menu.yPosition === 'above' ? ['bottom', 'top'] : ['top', 'bottom'];\n\n    let [originY, originFallbackY] = [overlayY, overlayFallbackY];\n    let [overlayX, overlayFallbackX] = [originX, originFallbackX];\n    let offsetY = 0;\n\n    if (this.triggersSubmenu()) {\n      // When the menu is a sub-menu, it should always align itself\n      // to the edges of the trigger, instead of overlapping it.\n      overlayFallbackX = originX = this.menu.xPosition === 'before' ? 'start' : 'end';\n      originFallbackX = overlayX = originX === 'end' ? 'start' : 'end';\n      offsetY = overlayY === 'bottom' ? MENU_PANEL_TOP_PADDING : -MENU_PANEL_TOP_PADDING;\n    } else if (!this.menu.overlapTrigger) {\n      originY = overlayY === 'top' ? 'bottom' : 'top';\n      originFallbackY = overlayFallbackY === 'top' ? 'bottom' : 'top';\n    }\n\n    positionStrategy.withPositions([\n      {originX, originY, overlayX, overlayY, offsetY},\n      {originX: originFallbackX, originY, overlayX: overlayFallbackX, overlayY, offsetY},\n      {\n        originX,\n        originY: originFallbackY,\n        overlayX,\n        overlayY: overlayFallbackY,\n        offsetY: -offsetY\n      },\n      {\n        originX: originFallbackX,\n        originY: originFallbackY,\n        overlayX: overlayFallbackX,\n        overlayY: overlayFallbackY,\n        offsetY: -offsetY\n      }\n    ]);\n  }\n\n  /** Cleans up the active subscriptions. */\n  private _cleanUpSubscriptions(): void {\n    this._closeSubscription.unsubscribe();\n    this._hoverSubscription.unsubscribe();\n  }\n\n  /** Returns a stream that emits whenever an action that should close the menu occurs. */\n  private _menuClosingActions() {\n    const backdrop = this._overlayRef!.backdropClick();\n    const detachments = this._overlayRef!.detachments();\n    const parentClose = this._parentMenu ? this._parentMenu.closed : observableOf();\n    const hover = this._parentMenu ? this._parentMenu._hovered().pipe(\n      filter(active => active !== this._menuItemInstance),\n      filter(() => this._menuOpen)\n    ) : observableOf();\n\n    return merge(backdrop, parentClose, hover, detachments);\n  }\n\n  /** Handles mouse presses on the trigger. */\n  _handleMousedown(event: MouseEvent): void {\n    if (!isFakeMousedownFromScreenReader(event)) {\n      this._openedByMouse = true;\n\n      // Since clicking on the trigger won't close the menu if it opens a sub-menu,\n      // we should prevent focus from moving onto it via click to avoid the\n      // highlight from lingering on the menu item.\n      if (this.triggersSubmenu()) {\n        event.preventDefault();\n      }\n    }\n  }\n\n  /** Handles key presses on the trigger. */\n  _handleKeydown(event: KeyboardEvent): void {\n    const keyCode = event.keyCode;\n\n    if (this.triggersSubmenu() && (\n            (keyCode === RIGHT_ARROW && this.dir === 'ltr') ||\n            (keyCode === LEFT_ARROW && this.dir === 'rtl'))) {\n      this.openMenu();\n    }\n  }\n\n  /** Handles click events on the trigger. */\n  _handleClick(event: MouseEvent): void {\n    if (this.triggersSubmenu()) {\n      // Stop event propagation to avoid closing the parent menu.\n      event.stopPropagation();\n      this.openMenu();\n    } else {\n      this.toggleMenu();\n    }\n  }\n\n  /** Handles the cases where the user hovers over the trigger. */\n  private _handleHover() {\n    // Subscribe to changes in the hovered item in order to toggle the panel.\n    if (!this.triggersSubmenu()) {\n      return;\n    }\n\n    this._hoverSubscription = this._parentMenu._hovered()\n      // Since we might have multiple competing triggers for the same menu (e.g. a sub-menu\n      // with different data and triggers), we have to delay it by a tick to ensure that\n      // it won't be closed immediately after it is opened.\n      .pipe(\n        filter(active => active === this._menuItemInstance && !active.disabled),\n        delay(0, asapScheduler)\n      )\n      .subscribe(() => {\n        this._openedByMouse = true;\n\n        // If the same menu is used between multiple triggers, it might still be animating\n        // while the new trigger tries to re-open it. Wait for the animation to finish\n        // before doing so. Also interrupt if the user moves to another item.\n        if (this.menu instanceof MatMenu && this.menu._isAnimating) {\n          this.menu._animationDone\n            .pipe(take(1), takeUntil(this._parentMenu._hovered()))\n            .subscribe(() => this.openMenu());\n        } else {\n          this.openMenu();\n        }\n      });\n  }\n\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {MatMenuContent} from './menu-content';\nimport {MatMenu} from './menu-directive';\nimport {MatMenuItem} from './menu-item';\nimport {\n  MatMenuTrigger,\n  MAT_MENU_SCROLL_STRATEGY_FACTORY_PROVIDER,\n} from './menu-trigger';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatCommonModule,\n    MatRippleModule,\n    OverlayModule,\n  ],\n  exports: [MatMenu, MatMenuItem, MatMenuTrigger, MatMenuContent, MatCommonModule],\n  declarations: [MatMenu, MatMenuItem, MatMenuTrigger, MatMenuContent],\n  providers: [MAT_MENU_SCROLL_STRATEGY_FACTORY_PROVIDER]\n})\nexport class MatMenuModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  animate,\n  AnimationTriggerMetadata,\n  state,\n  style,\n  transition,\n  trigger,\n  query,\n  animateChild,\n  group,\n} from '@angular/animations';\n\n/**\n * The following are all the animations for the mat-select component, with each\n * const containing the metadata for one animation.\n *\n * The values below match the implementation of the AngularJS Material mat-select animation.\n */\nexport const matSelectAnimations: {\n  readonly transformPanel: AnimationTriggerMetadata;\n  readonly fadeInContent: AnimationTriggerMetadata;\n} = {\n  /**\n   * This animation transforms the select's overlay panel on and off the page.\n   *\n   * When the panel is attached to the DOM, it expands its width by the amount of padding, scales it\n   * up to 100% on the Y axis, fades in its border, and translates slightly up and to the\n   * side to ensure the option text correctly overlaps the trigger text.\n   *\n   * When the panel is removed from the DOM, it simply fades out linearly.\n   */\n  transformPanel: trigger('transformPanel', [\n    state('void', style({\n      transform: 'scaleY(0)',\n      minWidth: '100%',\n      opacity: 0\n    })),\n    state('showing', style({\n      opacity: 1,\n      minWidth: 'calc(100% + 32px)', // 32px = 2 * 16px padding\n      transform: 'scaleY(1)'\n    })),\n    state('showing-multiple', style({\n      opacity: 1,\n      minWidth: 'calc(100% + 64px)', // 64px = 48px padding on the left + 16px padding on the right\n      transform: 'scaleY(1)'\n    })),\n    transition('void => *', group([\n      query('@fadeInContent', animateChild()),\n      animate('150ms cubic-bezier(0.25, 0.8, 0.25, 1)')\n    ])),\n    transition('* => void', [\n      animate('250ms 100ms linear', style({opacity: 0}))\n    ])\n  ]),\n\n  /**\n   * This animation fades in the background color and text content of the\n   * select's options. It is time delayed to occur 100ms after the overlay\n   * panel has transformed in.\n   */\n  fadeInContent: trigger('fadeInContent', [\n    state('showing', style({opacity: 1})),\n    transition('void => showing', [\n      style({opacity: 0}),\n      animate('150ms 100ms cubic-bezier(0.55, 0, 0.55, 0.2)')\n    ])\n  ])\n};\n\n\n/**\n * @deprecated\n * @deletion-target 7.0.0\n */\nexport const transformPanel = matSelectAnimations.transformPanel;\n\n/**\n * @deprecated\n * @deletion-target 7.0.0\n */\nexport const fadeInContent = matSelectAnimations.fadeInContent;\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusableOption, FocusKeyManager} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {SelectionModel} from '@angular/cdk/collections';\nimport {SPACE, ENTER, HOME, END, UP_ARROW, DOWN_ARROW, A} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  ContentChildren,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  OnDestroy,\n  OnInit,\n  Output,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {\n  CanDisableRipple,\n  MatLine,\n  MatLineSetter,\n  mixinDisableRipple,\n} from '@angular/material/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {Subscription} from 'rxjs';\nimport {MatListAvatarCssMatStyler} from './list';\n\n\n/** @docs-private */\nexport class MatSelectionListBase {}\nexport const _MatSelectionListMixinBase = mixinDisableRipple(MatSelectionListBase);\n\n/** @docs-private */\nexport class MatListOptionBase {}\nexport const _MatListOptionMixinBase = mixinDisableRipple(MatListOptionBase);\n\n/** @docs-private */\nexport const MAT_SELECTION_LIST_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatSelectionList),\n  multi: true\n};\n\n/** Change event that is being fired whenever the selected state of an option changes. */\nexport class MatSelectionListChange {\n  constructor(\n    /** Reference to the selection list that emitted the event. */\n    public source: MatSelectionList,\n    /** Reference to the option that has been changed. */\n    public option: MatListOption) {}\n}\n\n/**\n * Component for list-options of selection-list. Each list-option can automatically\n * generate a checkbox and can put current item into the selectionModel of selection-list\n * if the current item is selected.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-list-option',\n  exportAs: 'matListOption',\n  inputs: ['disableRipple'],\n  host: {\n    'role': 'option',\n    'class': 'mat-list-item mat-list-option',\n    '(focus)': '_handleFocus()',\n    '(blur)': '_handleBlur()',\n    '(click)': '_handleClick()',\n    'tabindex': '-1',\n    '[class.mat-list-item-disabled]': 'disabled',\n    '[class.mat-list-item-focus]': '_hasFocus',\n    '[class.mat-list-item-with-avatar]': '_avatar',\n    '[attr.aria-selected]': 'selected.toString()',\n    '[attr.aria-disabled]': 'disabled.toString()',\n  },\n  templateUrl: 'list-option.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatListOption extends _MatListOptionMixinBase\n    implements AfterContentInit, OnDestroy, OnInit, FocusableOption, CanDisableRipple {\n\n  private _selected = false;\n  private _disabled = false;\n\n  /** Whether the option has focus. */\n  _hasFocus: boolean = false;\n\n  @ContentChild(MatListAvatarCssMatStyler) _avatar: MatListAvatarCssMatStyler;\n  @ContentChildren(MatLine) _lines: QueryList<MatLine>;\n\n  /** DOM element containing the item's text. */\n  @ViewChild('text') _text: ElementRef;\n\n  /** Whether the label should appear before or after the checkbox. Defaults to 'after' */\n  @Input() checkboxPosition: 'before' | 'after' = 'after';\n\n  /** Value of the option */\n  @Input() value: any;\n\n  /** Whether the option is disabled. */\n  @Input()\n  get disabled() { return this._disabled || (this.selectionList && this.selectionList.disabled); }\n  set disabled(value: any) {\n    const newValue = coerceBooleanProperty(value);\n\n    if (newValue !== this._disabled) {\n      this._disabled = newValue;\n      this._changeDetector.markForCheck();\n    }\n  }\n\n  /** Whether the option is selected. */\n  @Input()\n  get selected(): boolean { return this.selectionList.selectedOptions.isSelected(this); }\n  set selected(value: boolean) {\n    const isSelected = coerceBooleanProperty(value);\n\n    if (isSelected !== this._selected) {\n      this._setSelected(isSelected);\n      this.selectionList._reportValueChange();\n    }\n  }\n\n  constructor(private _element: ElementRef,\n              private _changeDetector: ChangeDetectorRef,\n              /** @docs-private */\n              @Inject(forwardRef(() => MatSelectionList)) public selectionList: MatSelectionList) {\n    super();\n  }\n\n  ngOnInit() {\n    // List options that are selected at initialization can't be reported properly to the form\n    // control. This is because it takes some time until the selection-list knows about all\n    // available options. Also it can happen that the ControlValueAccessor has an initial value\n    // that should be used instead. Deferring the value change report to the next tick ensures\n    // that the form control value is not being overwritten.\n    const wasSelected = this._selected;\n\n    Promise.resolve().then(() => {\n      if (this._selected || wasSelected) {\n        this.selected = true;\n        this._changeDetector.markForCheck();\n      }\n    });\n  }\n\n  ngAfterContentInit() {\n    // TODO: consider turning the setter into a function, it doesn't do anything as a class.\n    // tslint:disable-next-line:no-unused-expression\n    new MatLineSetter(this._lines, this._element);\n  }\n\n  ngOnDestroy(): void {\n    if (this.selected) {\n      // We have to delay this until the next tick in order\n      // to avoid changed after checked errors.\n      Promise.resolve().then(() => this.selected = false);\n    }\n\n    this.selectionList._removeOptionFromList(this);\n  }\n\n  /** Toggles the selection state of the option. */\n  toggle(): void {\n    this.selected = !this.selected;\n  }\n\n  /** Allows for programmatic focusing of the option. */\n  focus(): void {\n    this._element.nativeElement.focus();\n  }\n\n  /**\n   * Returns the list item's text label. Implemented as a part of the FocusKeyManager.\n   * @docs-private\n   */\n  getLabel() {\n    return this._text ? this._text.nativeElement.textContent : '';\n  }\n\n  /** Whether this list item should show a ripple effect when clicked. */\n  _isRippleDisabled() {\n    return this.disabled || this.disableRipple || this.selectionList.disableRipple;\n  }\n\n  _handleClick() {\n    if (!this.disabled) {\n      this.toggle();\n\n      // Emit a change event if the selected state of the option changed through user interaction.\n      this.selectionList._emitChangeEvent(this);\n    }\n  }\n\n  _handleFocus() {\n    this._hasFocus = true;\n    this.selectionList._setFocusedOption(this);\n  }\n\n  _handleBlur() {\n    this._hasFocus = false;\n    this.selectionList._onTouched();\n  }\n\n  /** Retrieves the DOM element of the component host. */\n  _getHostElement(): HTMLElement {\n    return this._element.nativeElement;\n  }\n\n  /** Sets the selected state of the option. Returns whether the value has changed. */\n  _setSelected(selected: boolean): boolean {\n    if (selected === this._selected) {\n      return false;\n    }\n\n    this._selected = selected;\n\n    if (selected) {\n      this.selectionList.selectedOptions.select(this);\n    } else {\n      this.selectionList.selectedOptions.deselect(this);\n    }\n\n    this._changeDetector.markForCheck();\n    return true;\n  }\n\n  /**\n   * Notifies Angular that the option needs to be checked in the next change detection run. Mainly\n   * used to trigger an update of the list option if the disabled state of the selection list\n   * changed.\n   */\n  _markForCheck() {\n    this._changeDetector.markForCheck();\n  }\n}\n\n\n/**\n * Material Design list component where each item is a selectable option. Behaves as a listbox.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-selection-list',\n  exportAs: 'matSelectionList',\n  inputs: ['disabled', 'disableRipple', 'tabIndex'],\n  host: {\n    'role': 'listbox',\n    '[tabIndex]': 'tabIndex',\n    'class': 'mat-selection-list',\n    '(focus)': 'focus()',\n    '(blur)': '_onTouched()',\n    '(keydown)': '_keydown($event)',\n    '[attr.aria-disabled]': 'disabled.toString()',\n  },\n  template: '<ng-content></ng-content>',\n  styleUrls: ['list.css'],\n  encapsulation: ViewEncapsulation.None,\n  providers: [MAT_SELECTION_LIST_VALUE_ACCESSOR],\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class MatSelectionList extends _MatSelectionListMixinBase implements FocusableOption,\n    CanDisableRipple, AfterContentInit, ControlValueAccessor, OnDestroy {\n\n  /** The FocusKeyManager which handles focus. */\n  _keyManager: FocusKeyManager<MatListOption>;\n\n  /** The option components contained within this selection-list. */\n  @ContentChildren(MatListOption) options: QueryList<MatListOption>;\n\n  /** Emits a change event whenever the selected state of an option changes. */\n  @Output() readonly selectionChange: EventEmitter<MatSelectionListChange> =\n      new EventEmitter<MatSelectionListChange>();\n\n  /** Tabindex of the selection list. */\n  @Input() tabIndex: number = 0;\n\n  /**\n   * Function used for comparing an option against the selected value when determining which\n   * options should appear as selected. The first argument is the value of an options. The second\n   * one is a value from the selected value. A boolean must be returned.\n   */\n  @Input() compareWith: (o1: any, o2: any) => boolean;\n\n  /** Whether the selection list is disabled. */\n  @Input()\n  get disabled(): boolean { return this._disabled; }\n  set disabled(value: boolean) {\n    this._disabled = coerceBooleanProperty(value);\n\n    // The `MatSelectionList` and `MatListOption` are using the `OnPush` change detection\n    // strategy. Therefore the options will not check for any changes if the `MatSelectionList`\n    // changed its state. Since we know that a change to `disabled` property of the list affects\n    // the state of the options, we manually mark each option for check.\n    if (this.options) {\n      this.options.forEach(option => option._markForCheck());\n    }\n  }\n  private _disabled: boolean = false;\n\n  /** The currently selected options. */\n  selectedOptions: SelectionModel<MatListOption> = new SelectionModel<MatListOption>(true);\n\n  /** View to model callback that should be called whenever the selected options change. */\n  private _onChange: (value: any) => void = (_: any) => {};\n\n  /** Used for storing the values that were assigned before the options were initialized. */\n  private _tempValues: string[]|null;\n\n  /** Subscription to sync value changes in the SelectionModel back to the SelectionList. */\n  private _modelChanges = Subscription.EMPTY;\n\n  /** View to model callback that should be called if the list or its options lost focus. */\n  _onTouched: () => void = () => {};\n\n  constructor(private _element: ElementRef, @Attribute('tabindex') tabIndex: string) {\n    super();\n    this.tabIndex = parseInt(tabIndex) || 0;\n  }\n\n  ngAfterContentInit(): void {\n    this._keyManager = new FocusKeyManager<MatListOption>(this.options)\n      .withWrap()\n      .withTypeAhead()\n      // Allow disabled items to be focusable. For accessibility reasons, there must be a way for\n      // screenreader users, that allows reading the different options of the list.\n      .skipPredicate(() => false);\n\n    if (this._tempValues) {\n      this._setOptionsFromValues(this._tempValues);\n      this._tempValues = null;\n    }\n\n    // Sync external changes to the model back to the options.\n    this._modelChanges = this.selectedOptions.onChange!.subscribe(event => {\n      if (event.added) {\n        for (let item of event.added) {\n          item.selected = true;\n        }\n      }\n\n      if (event.removed) {\n        for (let item of event.removed) {\n          item.selected = false;\n        }\n      }\n    });\n  }\n\n  ngOnDestroy() {\n    this._modelChanges.unsubscribe();\n  }\n\n  /** Focuses the last active list option. */\n  focus() {\n    this._element.nativeElement.focus();\n  }\n\n  /** Selects all of the options. */\n  selectAll() {\n    this._setAllOptionsSelected(true);\n  }\n\n  /** Deselects all of the options. */\n  deselectAll() {\n    this._setAllOptionsSelected(false);\n  }\n\n  /** Sets the focused option of the selection-list. */\n  _setFocusedOption(option: MatListOption) {\n    this._keyManager.updateActiveItemIndex(this._getOptionIndex(option));\n  }\n\n  /** Removes an option from the selection list and updates the active item. */\n  _removeOptionFromList(option: MatListOption) {\n    if (option._hasFocus) {\n      const optionIndex = this._getOptionIndex(option);\n\n      // Check whether the option is the last item\n      if (optionIndex > 0) {\n        this._keyManager.setPreviousItemActive();\n      } else if (optionIndex === 0 && this.options.length > 1) {\n        this._keyManager.setNextItemActive();\n      }\n    }\n  }\n\n  /** Passes relevant key presses to our key manager. */\n  _keydown(event: KeyboardEvent) {\n    const keyCode = event.keyCode;\n    const manager = this._keyManager;\n    const previousFocusIndex = manager.activeItemIndex;\n\n    switch (keyCode) {\n      case SPACE:\n      case ENTER:\n        if (!this.disabled) {\n          this._toggleSelectOnFocusedOption();\n\n          // Always prevent space from scrolling the page since the list has focus\n          event.preventDefault();\n        }\n        break;\n      case HOME:\n      case END:\n        keyCode === HOME ? manager.setFirstItemActive() : manager.setLastItemActive();\n        event.preventDefault();\n        break;\n      case A:\n        if (event.ctrlKey) {\n          this.options.find(option => !option.selected) ? this.selectAll() : this.deselectAll();\n          event.preventDefault();\n        }\n        break;\n      default:\n        manager.onKeydown(event);\n    }\n\n    if ((keyCode === UP_ARROW || keyCode === DOWN_ARROW) && event.shiftKey &&\n        manager.activeItemIndex !== previousFocusIndex) {\n      this._toggleSelectOnFocusedOption();\n    }\n  }\n\n  /** Reports a value change to the ControlValueAccessor */\n  _reportValueChange() {\n    if (this.options) {\n      this._onChange(this._getSelectedOptionValues());\n    }\n  }\n\n  /** Emits a change event if the selected state of an option changed. */\n  _emitChangeEvent(option: MatListOption) {\n    this.selectionChange.emit(new MatSelectionListChange(this, option));\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  writeValue(values: string[]): void {\n    if (this.options) {\n      this._setOptionsFromValues(values || []);\n    } else {\n      this._tempValues = values;\n    }\n  }\n\n  /** Implemented as a part of ControlValueAccessor. */\n  setDisabledState(isDisabled: boolean): void {\n    if (this.options) {\n      this.options.forEach(option => option.disabled = isDisabled);\n    }\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  registerOnChange(fn: (value: any) => void): void {\n    this._onChange = fn;\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  registerOnTouched(fn: () => void): void {\n    this._onTouched = fn;\n  }\n\n  /** Sets the selected options based on the specified values. */\n  private _setOptionsFromValues(values: string[]) {\n    this.options.forEach(option => option._setSelected(false));\n\n    values\n      .map(value => {\n        return this.options.find(option =>\n            this.compareWith ? this.compareWith(option.value, value) : option.value === value);\n      })\n      .filter(Boolean)\n      .forEach(option => option!._setSelected(true));\n  }\n\n  /** Returns the values of the selected options. */\n  private _getSelectedOptionValues(): string[] {\n    return this.options.filter(option => option.selected).map(option => option.value);\n  }\n\n  /** Toggles the selected state of the currently focused option. */\n  private _toggleSelectOnFocusedOption(): void {\n    let focusedIndex = this._keyManager.activeItemIndex;\n\n    if (focusedIndex != null && this._isValidIndex(focusedIndex)) {\n      let focusedOption: MatListOption = this.options.toArray()[focusedIndex];\n\n      if (focusedOption) {\n        focusedOption.toggle();\n\n        // Emit a change event because the focused option changed its state through user\n        // interaction.\n        this._emitChangeEvent(focusedOption);\n      }\n    }\n  }\n\n  /**\n   * Sets the selected state on all of the options\n   * and emits an event if anything changed.\n   */\n  private _setAllOptionsSelected(isSelected: boolean) {\n    // Keep track of whether anything changed, because we only want to\n    // emit the changed event when something actually changed.\n    let hasChanged = false;\n\n    this.options.forEach(option => {\n      if (option._setSelected(isSelected)) {\n        hasChanged = true;\n      }\n    });\n\n    if (hasChanged) {\n      this._reportValueChange();\n    }\n  }\n\n  /**\n   * Utility to ensure all indexes are valid.\n   * @param index The index to be checked.\n   * @returns True if the index is valid for our list of options.\n   */\n  private _isValidIndex(index: number): boolean {\n    return index >= 0 && index < this.options.length;\n  }\n\n  /** Returns the index of the specified list option. */\n  private _getOptionIndex(option: MatListOption): number {\n    return this.options.toArray().indexOf(option);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {\n  MatCommonModule,\n  MatLineModule,\n  MatPseudoCheckboxModule,\n  MatRippleModule,\n} from '@angular/material/core';\nimport {\n  MatList,\n  MatNavList,\n  MatListAvatarCssMatStyler,\n  MatListIconCssMatStyler,\n  MatListItem,\n  MatListSubheaderCssMatStyler,\n} from './list';\nimport {MatListOption, MatSelectionList} from './selection-list';\nimport {MatDividerModule} from '@angular/material/divider';\n\n\n@NgModule({\n  imports: [MatLineModule, MatRippleModule, MatCommonModule, MatPseudoCheckboxModule, CommonModule],\n  exports: [\n    MatList,\n    MatNavList,\n    MatListItem,\n    MatListAvatarCssMatStyler,\n    MatLineModule,\n    MatCommonModule,\n    MatListIconCssMatStyler,\n    MatListSubheaderCssMatStyler,\n    MatPseudoCheckboxModule,\n    MatSelectionList,\n    MatListOption,\n    MatDividerModule\n  ],\n  declarations: [\n    MatList,\n    MatNavList,\n    MatListItem,\n    MatListAvatarCssMatStyler,\n    MatListIconCssMatStyler,\n    MatListSubheaderCssMatStyler,\n    MatSelectionList,\n    MatListOption\n  ],\n})\nexport class MatListModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  Component,\n  ContentChild,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  Optional,\n  QueryList,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {CanDisableRipple, MatLine, MatLineSetter, mixinDisableRipple} from '@angular/material/core';\n\n// Boilerplate for applying mixins to MatList.\n/** @docs-private */\nexport class MatListBase {}\nexport const _MatListMixinBase = mixinDisableRipple(MatListBase);\n\n// Boilerplate for applying mixins to MatListItem.\n/** @docs-private */\nexport class MatListItemBase {}\nexport const _MatListItemMixinBase = mixinDisableRipple(MatListItemBase);\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-nav-list',\n  exportAs: 'matNavList',\n  host: {\n    'role': 'navigation',\n    'class': 'mat-nav-list'\n  },\n  templateUrl: 'list.html',\n  styleUrls: ['list.css'],\n  inputs: ['disableRipple'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatNavList extends _MatListMixinBase implements CanDisableRipple {}\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-list',\n  exportAs: 'matList',\n  templateUrl: 'list.html',\n  host: {'class': 'mat-list'},\n  styleUrls: ['list.css'],\n  inputs: ['disableRipple'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatList extends _MatListMixinBase implements CanDisableRipple {}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-list-avatar], [matListAvatar]',\n  host: {'class': 'mat-list-avatar'}\n})\nexport class MatListAvatarCssMatStyler {}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-list-icon], [matListIcon]',\n  host: {'class': 'mat-list-icon'}\n})\nexport class MatListIconCssMatStyler {}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-subheader], [matSubheader]',\n  host: {'class': 'mat-subheader'}\n})\nexport class MatListSubheaderCssMatStyler {}\n\n/** An item within a Material Design list. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-list-item, a[mat-list-item]',\n  exportAs: 'matListItem',\n  host: {\n    'class': 'mat-list-item',\n    // @deletion-target 7.0.0 Remove `mat-list-item-avatar` in favor of `mat-list-item-with-avatar`.\n    '[class.mat-list-item-avatar]': '_avatar || _icon',\n    '[class.mat-list-item-with-avatar]': '_avatar || _icon',\n    '(focus)': '_handleFocus()',\n    '(blur)': '_handleBlur()',\n  },\n  inputs: ['disableRipple'],\n  templateUrl: 'list-item.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatListItem extends _MatListItemMixinBase implements AfterContentInit,\n    CanDisableRipple {\n  private _isNavList: boolean = false;\n\n  @ContentChildren(MatLine) _lines: QueryList<MatLine>;\n  @ContentChild(MatListAvatarCssMatStyler) _avatar: MatListAvatarCssMatStyler;\n  @ContentChild(MatListIconCssMatStyler) _icon: MatListIconCssMatStyler;\n\n  constructor(private _element: ElementRef,\n              @Optional() private _navList: MatNavList) {\n    super();\n    this._isNavList = !!_navList;\n  }\n\n  ngAfterContentInit() {\n    // TODO: consider turning the setter into a function, it doesn't do anything as a class.\n    // tslint:disable-next-line:no-unused-expression\n    new MatLineSetter(this._lines, this._element);\n  }\n\n  /** Whether this list item should show a ripple effect when clicked. */\n  _isRippleDisabled() {\n    return !this._isNavList || this.disableRipple || this._navList.disableRipple;\n  }\n\n  _handleFocus() {\n    this._element.nativeElement.classList.add('mat-list-item-focus');\n  }\n\n  _handleBlur() {\n    this._element.nativeElement.classList.remove('mat-list-item-focus');\n  }\n\n  /** Retrieves the DOM element of the component host. */\n  _getHostElement(): HTMLElement {\n    return this._element.nativeElement;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {MatGridList} from './grid-list';\nimport {MatGridTile} from './grid-tile';\nimport {TileCoordinator} from './tile-coordinator';\n\n/**\n * Sets the style properties for an individual tile, given the position calculated by the\n * Tile Coordinator.\n * @docs-private\n */\nexport abstract class TileStyler {\n  _gutterSize: string;\n  _rows: number = 0;\n  _rowspan: number = 0;\n  _cols: number;\n  _direction: string;\n\n  /**\n   * Adds grid-list layout info once it is available. Cannot be processed in the constructor\n   * because these properties haven't been calculated by that point.\n   *\n   * @param gutterSize Size of the grid's gutter.\n   * @param tracker Instance of the TileCoordinator.\n   * @param cols Amount of columns in the grid.\n   * @param direction Layout direction of the grid.\n   */\n  init(gutterSize: string, tracker: TileCoordinator, cols: number, direction: string): void {\n    this._gutterSize = normalizeUnits(gutterSize);\n    this._rows = tracker.rowCount;\n    this._rowspan = tracker.rowspan;\n    this._cols = cols;\n    this._direction = direction;\n  }\n\n  /**\n   * Computes the amount of space a single 1x1 tile would take up (width or height).\n   * Used as a basis for other calculations.\n   * @param sizePercent Percent of the total grid-list space that one 1x1 tile would take up.\n   * @param gutterFraction Fraction of the gutter size taken up by one 1x1 tile.\n   * @return The size of a 1x1 tile as an expression that can be evaluated via CSS calc().\n   */\n  getBaseTileSize(sizePercent: number, gutterFraction: number): string {\n    // Take the base size percent (as would be if evenly dividing the size between cells),\n    // and then subtracting the size of one gutter. However, since there are no gutters on the\n    // edges, each tile only uses a fraction (gutterShare = numGutters / numCells) of the gutter\n    // size. (Imagine having one gutter per tile, and then breaking up the extra gutter on the\n    // edge evenly among the cells).\n    return `(${sizePercent}% - (${this._gutterSize} * ${gutterFraction}))`;\n  }\n\n\n  /**\n   * Gets The horizontal or vertical position of a tile, e.g., the 'top' or 'left' property value.\n   * @param offset Number of tiles that have already been rendered in the row/column.\n   * @param baseSize Base size of a 1x1 tile (as computed in getBaseTileSize).\n   * @return Position of the tile as a CSS calc() expression.\n   */\n  getTilePosition(baseSize: string, offset: number): string {\n    // The position comes the size of a 1x1 tile plus gutter for each previous tile in the\n    // row/column (offset).\n    return offset === 0 ? '0' : calc(`(${baseSize} + ${this._gutterSize}) * ${offset}`);\n  }\n\n\n  /**\n   * Gets the actual size of a tile, e.g., width or height, taking rowspan or colspan into account.\n   * @param baseSize Base size of a 1x1 tile (as computed in getBaseTileSize).\n   * @param span The tile's rowspan or colspan.\n   * @return Size of the tile as a CSS calc() expression.\n   */\n  getTileSize(baseSize: string, span: number): string {\n    return `(${baseSize} * ${span}) + (${span - 1} * ${this._gutterSize})`;\n  }\n\n\n  /**\n   * Sets the style properties to be applied to a tile for the given row and column index.\n   * @param tile Tile to which to apply the styling.\n   * @param rowIndex Index of the tile's row.\n   * @param colIndex Index of the tile's column.\n   */\n  setStyle(tile: MatGridTile, rowIndex: number, colIndex: number): void {\n    // Percent of the available horizontal space that one column takes up.\n    let percentWidthPerTile = 100 / this._cols;\n\n    // Fraction of the vertical gutter size that each column takes up.\n    // For example, if there are 5 columns, each column uses 4/5 = 0.8 times the gutter width.\n    let gutterWidthFractionPerTile = (this._cols - 1) / this._cols;\n\n    this.setColStyles(tile, colIndex, percentWidthPerTile, gutterWidthFractionPerTile);\n    this.setRowStyles(tile, rowIndex, percentWidthPerTile, gutterWidthFractionPerTile);\n  }\n\n  /** Sets the horizontal placement of the tile in the list. */\n  setColStyles(tile: MatGridTile, colIndex: number, percentWidth: number,\n               gutterWidth: number) {\n    // Base horizontal size of a column.\n    let baseTileWidth = this.getBaseTileSize(percentWidth, gutterWidth);\n\n    // The width and horizontal position of each tile is always calculated the same way, but the\n    // height and vertical position depends on the rowMode.\n    let side = this._direction === 'rtl' ? 'right' : 'left';\n    tile._setStyle(side, this.getTilePosition(baseTileWidth, colIndex));\n    tile._setStyle('width', calc(this.getTileSize(baseTileWidth, tile.colspan)));\n  }\n\n  /**\n   * Calculates the total size taken up by gutters across one axis of a list.\n   */\n  getGutterSpan(): string {\n    return `${this._gutterSize} * (${this._rowspan} - 1)`;\n  }\n\n  /**\n   * Calculates the total size taken up by tiles across one axis of a list.\n   * @param tileHeight Height of the tile.\n   */\n  getTileSpan(tileHeight: string): string {\n    return `${this._rowspan} * ${this.getTileSize(tileHeight, 1)}`;\n  }\n\n  /**\n   * Sets the vertical placement of the tile in the list.\n   * This method will be implemented by each type of TileStyler.\n   * @docs-private\n   */\n  abstract setRowStyles(tile: MatGridTile, rowIndex: number, percentWidth: number,\n                        gutterWidth: number);\n\n  /**\n   * Calculates the computed height and returns the correct style property to set.\n   * This method can be implemented by each type of TileStyler.\n   * @docs-private\n   */\n  getComputedHeight(): [string, string] | null { return null; }\n\n  /**\n   * Called when the tile styler is swapped out with a different one. To be used for cleanup.\n   * @param list Grid list that the styler was attached to.\n   * @docs-private\n   */\n  abstract reset(list: MatGridList);\n}\n\n\n/**\n * This type of styler is instantiated when the user passes in a fixed row height.\n * Example `<mat-grid-list cols=\"3\" rowHeight=\"100px\">`\n * @docs-private\n */\nexport class FixedTileStyler extends TileStyler {\n\n  constructor(public fixedRowHeight: string) { super(); }\n\n  init(gutterSize: string, tracker: TileCoordinator, cols: number, direction: string) {\n    super.init(gutterSize, tracker, cols, direction);\n    this.fixedRowHeight = normalizeUnits(this.fixedRowHeight);\n  }\n\n  setRowStyles(tile: MatGridTile, rowIndex: number): void {\n    tile._setStyle('top', this.getTilePosition(this.fixedRowHeight, rowIndex));\n    tile._setStyle('height', calc(this.getTileSize(this.fixedRowHeight, tile.rowspan)));\n  }\n\n  getComputedHeight(): [string, string] {\n    return [\n      'height', calc(`${this.getTileSpan(this.fixedRowHeight)} + ${this.getGutterSpan()}`)\n    ];\n  }\n\n  reset(list: MatGridList) {\n    list._setListStyle(['height', null]);\n\n    list._tiles.forEach(tile => {\n      tile._setStyle('top', null);\n      tile._setStyle('height', null);\n    });\n  }\n}\n\n\n/**\n * This type of styler is instantiated when the user passes in a width:height ratio\n * for the row height.  Example `<mat-grid-list cols=\"3\" rowHeight=\"3:1\">`\n * @docs-private\n */\nexport class RatioTileStyler extends TileStyler {\n\n  /** Ratio width:height given by user to determine row height. */\n  rowHeightRatio: number;\n  baseTileHeight: string;\n\n  constructor(value: string) {\n    super();\n    this._parseRatio(value);\n  }\n\n  setRowStyles(tile: MatGridTile, rowIndex: number, percentWidth: number,\n               gutterWidth: number): void {\n    let percentHeightPerTile = percentWidth / this.rowHeightRatio;\n    this.baseTileHeight = this.getBaseTileSize(percentHeightPerTile, gutterWidth);\n\n    // Use padding-top and margin-top to maintain the given aspect ratio, as\n    // a percentage-based value for these properties is applied versus the *width* of the\n    // containing block. See http://www.w3.org/TR/CSS2/box.html#margin-properties\n    tile._setStyle('marginTop', this.getTilePosition(this.baseTileHeight, rowIndex));\n    tile._setStyle('paddingTop', calc(this.getTileSize(this.baseTileHeight, tile.rowspan)));\n  }\n\n  getComputedHeight(): [string, string] {\n    return [\n      'paddingBottom', calc(`${this.getTileSpan(this.baseTileHeight)} + ${this.getGutterSpan()}`)\n    ];\n  }\n\n  reset(list: MatGridList) {\n    list._setListStyle(['paddingBottom', null]);\n\n    list._tiles.forEach(tile => {\n      tile._setStyle('marginTop', null);\n      tile._setStyle('paddingTop', null);\n    });\n  }\n\n  private _parseRatio(value: string): void {\n    const ratioParts = value.split(':');\n\n    if (ratioParts.length !== 2) {\n      throw Error(`mat-grid-list: invalid ratio given for row-height: \"${value}\"`);\n    }\n\n    this.rowHeightRatio = parseFloat(ratioParts[0]) / parseFloat(ratioParts[1]);\n  }\n}\n\n/**\n * This type of styler is instantiated when the user selects a \"fit\" row height mode.\n * In other words, the row height will reflect the total height of the container divided\n * by the number of rows.  Example `<mat-grid-list cols=\"3\" rowHeight=\"fit\">`\n *\n * @docs-private\n */\nexport class FitTileStyler extends TileStyler {\n\n  setRowStyles(tile: MatGridTile, rowIndex: number): void {\n    // Percent of the available vertical space that one row takes up.\n    let percentHeightPerTile = 100 / this._rowspan;\n\n    // Fraction of the horizontal gutter size that each column takes up.\n    let gutterHeightPerTile = (this._rows - 1) / this._rows;\n\n    // Base vertical size of a column.\n    let baseTileHeight = this.getBaseTileSize(percentHeightPerTile, gutterHeightPerTile);\n\n    tile._setStyle('top', this.getTilePosition(baseTileHeight, rowIndex));\n    tile._setStyle('height', calc(this.getTileSize(baseTileHeight, tile.rowspan)));\n  }\n\n  reset(list: MatGridList) {\n    list._tiles.forEach(tile => {\n      tile._setStyle('top', null);\n      tile._setStyle('height', null);\n    });\n  }\n}\n\n\n/** Wraps a CSS string in a calc function */\nfunction calc(exp: string): string { return `calc(${exp})`; }\n\n\n/** Appends pixels to a CSS string if no units are given. */\nfunction normalizeUnits(value: string): string {\n  return (value.match(/px|em|rem/)) ? value : value + 'px';\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ViewEncapsulation,\n  AfterContentChecked,\n  OnInit,\n  Input,\n  ContentChildren,\n  QueryList,\n  ElementRef,\n  Optional,\n  ChangeDetectionStrategy,\n} from '@angular/core';\nimport {MatGridTile} from './grid-tile';\nimport {TileCoordinator} from './tile-coordinator';\nimport {TileStyler, FitTileStyler, RatioTileStyler, FixedTileStyler} from './tile-styler';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {\n  coerceToString,\n  coerceToNumber,\n} from './grid-list-measure';\n\n\n// TODO(kara): Conditional (responsive) column count / row size.\n// TODO(kara): Re-layout on window resize / media change (debounced).\n// TODO(kara): gridTileHeader and gridTileFooter.\n\nconst MAT_FIT_MODE = 'fit';\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-grid-list',\n  exportAs: 'matGridList',\n  templateUrl: 'grid-list.html',\n  styleUrls: ['grid-list.css'],\n  host: {\n    'class': 'mat-grid-list',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatGridList implements OnInit, AfterContentChecked {\n  /** Number of columns being rendered. */\n  private _cols: number;\n\n  /**\n   * Row height value passed in by user. This can be one of three types:\n   * - Number value (ex: \"100px\"):  sets a fixed row height to that value\n   * - Ratio value (ex: \"4:3\"): sets the row height based on width:height ratio\n   * - \"Fit\" mode (ex: \"fit\"): sets the row height to total height divided by number of rows\n   */\n  private _rowHeight: string;\n\n  /** The amount of space between tiles. This will be something like '5px' or '2em'. */\n  private _gutter: string = '1px';\n\n  /** Sets position and size styles for a tile */\n  private _tileStyler: TileStyler;\n\n  /** Query list of tiles that are being rendered. */\n  @ContentChildren(MatGridTile) _tiles: QueryList<MatGridTile>;\n\n  constructor(private _element: ElementRef, @Optional() private _dir: Directionality) {}\n\n  /** Amount of columns in the grid list. */\n  @Input()\n  get cols(): number { return this._cols; }\n  set cols(value: number) { this._cols = coerceToNumber(value); }\n\n  /** Size of the grid list's gutter in pixels. */\n  @Input()\n  get gutterSize(): string { return this._gutter; }\n  set gutterSize(value: string) { this._gutter = coerceToString(value); }\n\n  /** Set internal representation of row height from the user-provided value. */\n  @Input()\n  set rowHeight(value: string | number) {\n    const newValue = coerceToString(value);\n\n    if (newValue !== this._rowHeight) {\n      this._rowHeight = newValue;\n      this._setTileStyler(this._rowHeight);\n    }\n  }\n\n  ngOnInit() {\n    this._checkCols();\n    this._checkRowHeight();\n  }\n\n  /**\n   * The layout calculation is fairly cheap if nothing changes, so there's little cost\n   * to run it frequently.\n   */\n  ngAfterContentChecked() {\n    this._layoutTiles();\n  }\n\n  /** Throw a friendly error if cols property is missing */\n  private _checkCols() {\n    if (!this.cols) {\n      throw Error(`mat-grid-list: must pass in number of columns. ` +\n                  `Example: <mat-grid-list cols=\"3\">`);\n    }\n  }\n\n  /** Default to equal width:height if rowHeight property is missing */\n  private _checkRowHeight(): void {\n    if (!this._rowHeight) {\n      this._setTileStyler('1:1');\n    }\n  }\n\n  /** Creates correct Tile Styler subtype based on rowHeight passed in by user */\n  private _setTileStyler(rowHeight: string): void {\n    if (this._tileStyler) {\n      this._tileStyler.reset(this);\n    }\n\n    if (rowHeight === MAT_FIT_MODE) {\n      this._tileStyler = new FitTileStyler();\n    } else if (rowHeight && rowHeight.indexOf(':') > -1) {\n      this._tileStyler = new RatioTileStyler(rowHeight);\n    } else {\n      this._tileStyler = new FixedTileStyler(rowHeight);\n    }\n  }\n\n  /** Computes and applies the size and position for all children grid tiles. */\n  private _layoutTiles(): void {\n    const tracker = new TileCoordinator(this.cols, this._tiles);\n    const direction = this._dir ? this._dir.value : 'ltr';\n    this._tileStyler.init(this.gutterSize, tracker, this.cols, direction);\n\n    this._tiles.forEach((tile, index) => {\n      const pos = tracker.positions[index];\n      this._tileStyler.setStyle(tile, pos.row, pos.col);\n    });\n\n    this._setListStyle(this._tileStyler.getComputedHeight());\n  }\n\n  /** Sets style on the main grid-list element, given the style name and value. */\n  _setListStyle(style: [string, string | null] | null): void {\n    if (style) {\n      this._element.nativeElement.style[style[0]] = style[1];\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatLineModule, MatCommonModule} from '@angular/material/core';\nimport {\n  MatGridTile, MatGridTileText, MatGridTileFooterCssMatStyler,\n  MatGridTileHeaderCssMatStyler, MatGridAvatarCssMatStyler\n} from './grid-tile';\nimport {MatGridList} from './grid-list';\n\n\n@NgModule({\n  imports: [MatLineModule, MatCommonModule],\n  exports: [\n    MatGridList,\n    MatGridTile,\n    MatGridTileText,\n    MatLineModule,\n    MatCommonModule,\n    MatGridTileHeaderCssMatStyler,\n    MatGridTileFooterCssMatStyler,\n    MatGridAvatarCssMatStyler\n  ],\n  declarations: [\n    MatGridList,\n    MatGridTile,\n    MatGridTileText,\n    MatGridTileHeaderCssMatStyler,\n    MatGridTileFooterCssMatStyler,\n    MatGridAvatarCssMatStyler\n  ],\n})\nexport class MatGridListModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {DOCUMENT} from '@angular/common';\nimport {HttpClient, HttpErrorResponse} from '@angular/common/http';\nimport {\n  Inject,\n  Injectable,\n  InjectionToken,\n  Optional,\n  SecurityContext,\n  SkipSelf,\n} from '@angular/core';\nimport {DomSanitizer, SafeResourceUrl, SafeHtml} from '@angular/platform-browser';\nimport {forkJoin, Observable, of as observableOf, throwError as observableThrow} from 'rxjs';\nimport {catchError, finalize, map, share, tap} from 'rxjs/operators';\n\n\n/**\n * Returns an exception to be thrown in the case when attempting to\n * load an icon with a name that cannot be found.\n * @docs-private\n */\nexport function getMatIconNameNotFoundError(iconName: string): Error {\n  return Error(`Unable to find icon with the name \"${iconName}\"`);\n}\n\n\n/**\n * Returns an exception to be thrown when the consumer attempts to use\n * `<mat-icon>` without including @angular/http.\n * @docs-private\n */\nexport function getMatIconNoHttpProviderError(): Error {\n  return Error('Could not find HttpClient provider for use with Angular Material icons. ' +\n               'Please include the HttpClientModule from @angular/common/http in your ' +\n               'app imports.');\n}\n\n\n/**\n * Returns an exception to be thrown when a URL couldn't be sanitized.\n * @param url URL that was attempted to be sanitized.\n * @docs-private\n */\nexport function getMatIconFailedToSanitizeUrlError(url: SafeResourceUrl): Error {\n  return Error(`The URL provided to MatIconRegistry was not trusted as a resource URL ` +\n               `via Angular's DomSanitizer. Attempted URL was \"${url}\".`);\n}\n\n/**\n * Returns an exception to be thrown when a HTML string couldn't be sanitized.\n * @param literal HTML that was attempted to be sanitized.\n * @docs-private\n */\nexport function getMatIconFailedToSanitizeLiteralError(literal: SafeHtml): Error {\n  return Error(`The literal provided to MatIconRegistry was not trusted as safe HTML by ` +\n               `Angular's DomSanitizer. Attempted literal was \"${literal}\".`);\n}\n\n\n/**\n * Configuration for an icon, including the URL and possibly the cached SVG element.\n * @docs-private\n */\nclass SvgIconConfig {\n  url: SafeResourceUrl | null;\n  svgElement: SVGElement | null;\n\n  constructor(url: SafeResourceUrl);\n  constructor(svgElement: SVGElement);\n  constructor(data: SafeResourceUrl | SVGElement) {\n    // Note that we can't use `instanceof SVGElement` here,\n    // because it'll break during server-side rendering.\n    if (!!(data as any).nodeName) {\n      this.svgElement = data as SVGElement;\n    } else {\n      this.url = data as SafeResourceUrl;\n    }\n  }\n}\n\n/**\n * Service to register and display icons used by the `<mat-icon>` component.\n * - Registers icon URLs by namespace and name.\n * - Registers icon set URLs by namespace.\n * - Registers aliases for CSS classes, for use with icon fonts.\n * - Loads icons from URLs and extracts individual icons from icon sets.\n */\n@Injectable({providedIn: 'root'})\nexport class MatIconRegistry {\n  private _document: Document;\n\n  /**\n   * URLs and cached SVG elements for individual icons. Keys are of the format \"[namespace]:[icon]\".\n   */\n  private _svgIconConfigs = new Map<string, SvgIconConfig>();\n\n  /**\n   * SvgIconConfig objects and cached SVG elements for icon sets, keyed by namespace.\n   * Multiple icon sets can be registered under the same namespace.\n   */\n  private _iconSetConfigs = new Map<string, SvgIconConfig[]>();\n\n  /** Cache for icons loaded by direct URLs. */\n  private _cachedIconsByUrl = new Map<string, SVGElement>();\n\n  /** In-progress icon fetches. Used to coalesce multiple requests to the same URL. */\n  private _inProgressUrlFetches = new Map<string, Observable<string>>();\n\n  /** Map from font identifiers to their CSS class names. Used for icon fonts. */\n  private _fontCssClassesByAlias = new Map<string, string>();\n\n  /**\n   * The CSS class to apply when an `<mat-icon>` component has no icon name, url, or font specified.\n   * The default 'material-icons' value assumes that the material icon font has been loaded as\n   * described at http://google.github.io/material-design-icons/#icon-font-for-the-web\n   */\n  private _defaultFontSetClass = 'material-icons';\n\n  constructor(\n    @Optional() private _httpClient: HttpClient,\n    private _sanitizer: DomSanitizer,\n    @Optional() @Inject(DOCUMENT) document: any) {\n      this._document = document;\n    }\n\n  /**\n   * Registers an icon by URL in the default namespace.\n   * @param iconName Name under which the icon should be registered.\n   * @param url\n   */\n  addSvgIcon(iconName: string, url: SafeResourceUrl): this {\n    return this.addSvgIconInNamespace('', iconName, url);\n  }\n\n  /**\n   * Registers an icon using an HTML string in the default namespace.\n   * @param iconName Name under which the icon should be registered.\n   * @param literal SVG source of the icon.\n   */\n  addSvgIconLiteral(iconName: string, literal: SafeHtml): this {\n    return this.addSvgIconLiteralInNamespace('', iconName, literal);\n  }\n\n  /**\n   * Registers an icon by URL in the specified namespace.\n   * @param namespace Namespace in which the icon should be registered.\n   * @param iconName Name under which the icon should be registered.\n   * @param url\n   */\n  addSvgIconInNamespace(namespace: string, iconName: string, url: SafeResourceUrl): this {\n    return this._addSvgIconConfig(namespace, iconName, new SvgIconConfig(url));\n  }\n\n  /**\n   * Registers an icon using an HTML string in the specified namespace.\n   * @param namespace Namespace in which the icon should be registered.\n   * @param iconName Name under which the icon should be registered.\n   * @param literal SVG source of the icon.\n   */\n  addSvgIconLiteralInNamespace(namespace: string, iconName: string, literal: SafeHtml): this {\n    const sanitizedLiteral = this._sanitizer.sanitize(SecurityContext.HTML, literal);\n\n    if (!sanitizedLiteral) {\n      throw getMatIconFailedToSanitizeLiteralError(literal);\n    }\n\n    const svgElement = this._createSvgElementForSingleIcon(sanitizedLiteral);\n    return this._addSvgIconConfig(namespace, iconName, new SvgIconConfig(svgElement));\n  }\n\n  /**\n   * Registers an icon set by URL in the default namespace.\n   * @param url\n   */\n  addSvgIconSet(url: SafeResourceUrl): this {\n    return this.addSvgIconSetInNamespace('', url);\n  }\n\n  /**\n   * Registers an icon set using an HTML string in the default namespace.\n   * @param literal SVG source of the icon set.\n   */\n  addSvgIconSetLiteral(literal: SafeHtml): this {\n    return this.addSvgIconSetLiteralInNamespace('', literal);\n  }\n\n  /**\n   * Registers an icon set by URL in the specified namespace.\n   * @param namespace Namespace in which to register the icon set.\n   * @param url\n   */\n  addSvgIconSetInNamespace(namespace: string, url: SafeResourceUrl): this {\n    return this._addSvgIconSetConfig(namespace, new SvgIconConfig(url));\n  }\n\n  /**\n   * Registers an icon set using an HTML string in the specified namespace.\n   * @param namespace Namespace in which to register the icon set.\n   * @param literal SVG source of the icon set.\n   */\n  addSvgIconSetLiteralInNamespace(namespace: string, literal: SafeHtml): this {\n    const sanitizedLiteral = this._sanitizer.sanitize(SecurityContext.HTML, literal);\n\n    if (!sanitizedLiteral) {\n      throw getMatIconFailedToSanitizeLiteralError(literal);\n    }\n\n    const svgElement = this._svgElementFromString(sanitizedLiteral);\n    return this._addSvgIconSetConfig(namespace, new SvgIconConfig(svgElement));\n  }\n\n  /**\n   * Defines an alias for a CSS class name to be used for icon fonts. Creating an matIcon\n   * component with the alias as the fontSet input will cause the class name to be applied\n   * to the `<mat-icon>` element.\n   *\n   * @param alias Alias for the font.\n   * @param className Class name override to be used instead of the alias.\n   */\n  registerFontClassAlias(alias: string, className: string = alias): this {\n    this._fontCssClassesByAlias.set(alias, className);\n    return this;\n  }\n\n  /**\n   * Returns the CSS class name associated with the alias by a previous call to\n   * registerFontClassAlias. If no CSS class has been associated, returns the alias unmodified.\n   */\n  classNameForFontAlias(alias: string): string {\n    return this._fontCssClassesByAlias.get(alias) || alias;\n  }\n\n  /**\n   * Sets the CSS class name to be used for icon fonts when an `<mat-icon>` component does not\n   * have a fontSet input value, and is not loading an icon by name or URL.\n   *\n   * @param className\n   */\n  setDefaultFontSetClass(className: string): this {\n    this._defaultFontSetClass = className;\n    return this;\n  }\n\n  /**\n   * Returns the CSS class name to be used for icon fonts when an `<mat-icon>` component does not\n   * have a fontSet input value, and is not loading an icon by name or URL.\n   */\n  getDefaultFontSetClass(): string {\n    return this._defaultFontSetClass;\n  }\n\n  /**\n   * Returns an Observable that produces the icon (as an `<svg>` DOM element) from the given URL.\n   * The response from the URL may be cached so this will not always cause an HTTP request, but\n   * the produced element will always be a new copy of the originally fetched icon. (That is,\n   * it will not contain any modifications made to elements previously returned).\n   *\n   * @param safeUrl URL from which to fetch the SVG icon.\n   */\n  getSvgIconFromUrl(safeUrl: SafeResourceUrl): Observable<SVGElement> {\n    const url = this._sanitizer.sanitize(SecurityContext.RESOURCE_URL, safeUrl);\n\n    if (!url) {\n      throw getMatIconFailedToSanitizeUrlError(safeUrl);\n    }\n\n    const cachedIcon = this._cachedIconsByUrl.get(url);\n\n    if (cachedIcon) {\n      return observableOf(cloneSvg(cachedIcon));\n    }\n\n    return this._loadSvgIconFromConfig(new SvgIconConfig(safeUrl)).pipe(\n      tap(svg => this._cachedIconsByUrl.set(url!, svg)),\n      map(svg => cloneSvg(svg)),\n    );\n  }\n\n  /**\n   * Returns an Observable that produces the icon (as an `<svg>` DOM element) with the given name\n   * and namespace. The icon must have been previously registered with addIcon or addIconSet;\n   * if not, the Observable will throw an error.\n   *\n   * @param name Name of the icon to be retrieved.\n   * @param namespace Namespace in which to look for the icon.\n   */\n  getNamedSvgIcon(name: string, namespace: string = ''): Observable<SVGElement> {\n    // Return (copy of) cached icon if possible.\n    const key = iconKey(namespace, name);\n    const config = this._svgIconConfigs.get(key);\n\n    if (config) {\n      return this._getSvgFromConfig(config);\n    }\n\n    // See if we have any icon sets registered for the namespace.\n    const iconSetConfigs = this._iconSetConfigs.get(namespace);\n\n    if (iconSetConfigs) {\n      return this._getSvgFromIconSetConfigs(name, iconSetConfigs);\n    }\n\n    return observableThrow(getMatIconNameNotFoundError(key));\n  }\n\n  /**\n   * Returns the cached icon for a SvgIconConfig if available, or fetches it from its URL if not.\n   */\n  private _getSvgFromConfig(config: SvgIconConfig): Observable<SVGElement> {\n    if (config.svgElement) {\n      // We already have the SVG element for this icon, return a copy.\n      return observableOf(cloneSvg(config.svgElement));\n    } else {\n      // Fetch the icon from the config's URL, cache it, and return a copy.\n      return this._loadSvgIconFromConfig(config).pipe(\n        tap(svg => config.svgElement = svg),\n        map(svg => cloneSvg(svg)),\n      );\n    }\n  }\n\n  /**\n   * Attempts to find an icon with the specified name in any of the SVG icon sets.\n   * First searches the available cached icons for a nested element with a matching name, and\n   * if found copies the element to a new `<svg>` element. If not found, fetches all icon sets\n   * that have not been cached, and searches again after all fetches are completed.\n   * The returned Observable produces the SVG element if possible, and throws\n   * an error if no icon with the specified name can be found.\n   */\n  private _getSvgFromIconSetConfigs(name: string, iconSetConfigs: SvgIconConfig[]):\n      Observable<SVGElement> {\n    // For all the icon set SVG elements we've fetched, see if any contain an icon with the\n    // requested name.\n    const namedIcon = this._extractIconWithNameFromAnySet(name, iconSetConfigs);\n\n    if (namedIcon) {\n      // We could cache namedIcon in _svgIconConfigs, but since we have to make a copy every\n      // time anyway, there's probably not much advantage compared to just always extracting\n      // it from the icon set.\n      return observableOf(namedIcon);\n    }\n\n    // Not found in any cached icon sets. If there are icon sets with URLs that we haven't\n    // fetched, fetch them now and look for iconName in the results.\n    const iconSetFetchRequests: Observable<SVGElement | null>[] = iconSetConfigs\n      .filter(iconSetConfig => !iconSetConfig.svgElement)\n      .map(iconSetConfig => {\n        return this._loadSvgIconSetFromConfig(iconSetConfig).pipe(\n          catchError((err: HttpErrorResponse): Observable<SVGElement | null> => {\n            const url = this._sanitizer.sanitize(SecurityContext.RESOURCE_URL, iconSetConfig.url);\n\n            // Swallow errors fetching individual URLs so the\n            // combined Observable won't necessarily fail.\n            console.error(`Loading icon set URL: ${url} failed: ${err.message}`);\n            return observableOf(null);\n          })\n        );\n      });\n\n    // Fetch all the icon set URLs. When the requests complete, every IconSet should have a\n    // cached SVG element (unless the request failed), and we can check again for the icon.\n    return forkJoin(iconSetFetchRequests).pipe(map(() => {\n      const foundIcon = this._extractIconWithNameFromAnySet(name, iconSetConfigs);\n\n      if (!foundIcon) {\n        throw getMatIconNameNotFoundError(name);\n      }\n\n      return foundIcon;\n    }));\n  }\n\n  /**\n   * Searches the cached SVG elements for the given icon sets for a nested icon element whose \"id\"\n   * tag matches the specified name. If found, copies the nested element to a new SVG element and\n   * returns it. Returns null if no matching element is found.\n   */\n  private _extractIconWithNameFromAnySet(iconName: string, iconSetConfigs: SvgIconConfig[]):\n      SVGElement | null {\n    // Iterate backwards, so icon sets added later have precedence.\n    for (let i = iconSetConfigs.length - 1; i >= 0; i--) {\n      const config = iconSetConfigs[i];\n      if (config.svgElement) {\n        const foundIcon = this._extractSvgIconFromSet(config.svgElement, iconName);\n        if (foundIcon) {\n          return foundIcon;\n        }\n      }\n    }\n    return null;\n  }\n\n  /**\n   * Loads the content of the icon URL specified in the SvgIconConfig and creates an SVG element\n   * from it.\n   */\n  private _loadSvgIconFromConfig(config: SvgIconConfig): Observable<SVGElement> {\n    return this._fetchUrl(config.url)\n        .pipe(map(svgText => this._createSvgElementForSingleIcon(svgText)));\n  }\n\n  /**\n   * Loads the content of the icon set URL specified in the SvgIconConfig and creates an SVG element\n   * from it.\n   */\n  private _loadSvgIconSetFromConfig(config: SvgIconConfig): Observable<SVGElement> {\n    // If the SVG for this icon set has already been parsed, do nothing.\n    if (config.svgElement) {\n      return observableOf(config.svgElement);\n    }\n\n    return this._fetchUrl(config.url).pipe(map(svgText => {\n      // It is possible that the icon set was parsed and cached by an earlier request, so parsing\n      // only needs to occur if the cache is yet unset.\n      if (!config.svgElement) {\n        config.svgElement = this._svgElementFromString(svgText);\n      }\n\n      return config.svgElement;\n    }));\n  }\n\n  /**\n   * Creates a DOM element from the given SVG string, and adds default attributes.\n   */\n  private _createSvgElementForSingleIcon(responseText: string): SVGElement {\n    const svg = this._svgElementFromString(responseText);\n    this._setSvgAttributes(svg);\n    return svg;\n  }\n\n  /**\n   * Searches the cached element of the given SvgIconConfig for a nested icon element whose \"id\"\n   * tag matches the specified name. If found, copies the nested element to a new SVG element and\n   * returns it. Returns null if no matching element is found.\n   */\n  private _extractSvgIconFromSet(iconSet: SVGElement, iconName: string): SVGElement | null {\n    const iconSource = iconSet.querySelector('#' + iconName);\n\n    if (!iconSource) {\n      return null;\n    }\n\n    // Clone the element and remove the ID to prevent multiple elements from being added\n    // to the page with the same ID.\n    const iconElement = iconSource.cloneNode(true) as Element;\n    iconElement.removeAttribute('id');\n\n    // If the icon node is itself an <svg> node, clone and return it directly. If not, set it as\n    // the content of a new <svg> node.\n    if (iconElement.nodeName.toLowerCase() === 'svg') {\n      return this._setSvgAttributes(iconElement as SVGElement);\n    }\n\n    // If the node is a <symbol>, it won't be rendered so we have to convert it into <svg>. Note\n    // that the same could be achieved by referring to it via <use href=\"#id\">, however the <use>\n    // tag is problematic on Firefox, because it needs to include the current page path.\n    if (iconElement.nodeName.toLowerCase() === 'symbol') {\n      return this._setSvgAttributes(this._toSvgElement(iconElement));\n    }\n\n    // createElement('SVG') doesn't work as expected; the DOM ends up with\n    // the correct nodes, but the SVG content doesn't render. Instead we\n    // have to create an empty SVG node using innerHTML and append its content.\n    // Elements created using DOMParser.parseFromString have the same problem.\n    // http://stackoverflow.com/questions/23003278/svg-innerhtml-in-firefox-can-not-display\n    const svg = this._svgElementFromString('<svg></svg>');\n    // Clone the node so we don't remove it from the parent icon set element.\n    svg.appendChild(iconElement);\n\n    return this._setSvgAttributes(svg);\n  }\n\n  /**\n   * Creates a DOM element from the given SVG string.\n   */\n  private _svgElementFromString(str: string): SVGElement {\n    const div = this._document.createElement('DIV');\n    div.innerHTML = str;\n    const svg = div.querySelector('svg') as SVGElement;\n\n    if (!svg) {\n      throw Error('<svg> tag not found');\n    }\n\n    return svg;\n  }\n\n  /**\n   * Converts an element into an SVG node by cloning all of its children.\n   */\n  private _toSvgElement(element: Element): SVGElement {\n    let svg = this._svgElementFromString('<svg></svg>');\n\n    for (let i = 0; i < element.childNodes.length; i++) {\n      if (element.childNodes[i].nodeType === this._document.ELEMENT_NODE) {\n        svg.appendChild(element.childNodes[i].cloneNode(true));\n      }\n    }\n\n    return svg;\n  }\n\n  /**\n   * Sets the default attributes for an SVG element to be used as an icon.\n   */\n  private _setSvgAttributes(svg: SVGElement): SVGElement {\n    svg.setAttribute('fit', '');\n    svg.setAttribute('height', '100%');\n    svg.setAttribute('width', '100%');\n    svg.setAttribute('preserveAspectRatio', 'xMidYMid meet');\n    svg.setAttribute('focusable', 'false'); // Disable IE11 default behavior to make SVGs focusable.\n    return svg;\n  }\n\n  /**\n   * Returns an Observable which produces the string contents of the given URL. Results may be\n   * cached, so future calls with the same URL may not cause another HTTP request.\n   */\n  private _fetchUrl(safeUrl: SafeResourceUrl | null): Observable<string> {\n    if (!this._httpClient) {\n      throw getMatIconNoHttpProviderError();\n    }\n\n    if (safeUrl == null) {\n      throw Error(`Cannot fetch icon from URL \"${safeUrl}\".`);\n    }\n\n    const url = this._sanitizer.sanitize(SecurityContext.RESOURCE_URL, safeUrl);\n\n    if (!url) {\n      throw getMatIconFailedToSanitizeUrlError(safeUrl);\n    }\n\n    // Store in-progress fetches to avoid sending a duplicate request for a URL when there is\n    // already a request in progress for that URL. It's necessary to call share() on the\n    // Observable returned by http.get() so that multiple subscribers don't cause multiple XHRs.\n    const inProgressFetch = this._inProgressUrlFetches.get(url);\n\n    if (inProgressFetch) {\n      return inProgressFetch;\n    }\n\n    // TODO(jelbourn): for some reason, the `finalize` operator \"loses\" the generic type on the\n    // Observable. Figure out why and fix it.\n    const req = this._httpClient.get(url, {responseType: 'text'}).pipe(\n      finalize(() => this._inProgressUrlFetches.delete(url)),\n      share(),\n    );\n\n    this._inProgressUrlFetches.set(url, req);\n    return req;\n  }\n\n  /**\n   * Registers an icon config by name in the specified namespace.\n   * @param namespace Namespace in which to register the icon config.\n   * @param iconName Name under which to register the config.\n   * @param config Config to be registered.\n   */\n  private _addSvgIconConfig(namespace: string, iconName: string, config: SvgIconConfig): this {\n    this._svgIconConfigs.set(iconKey(namespace, iconName), config);\n    return this;\n  }\n\n  /**\n   * Registers an icon set config in the specified namespace.\n   * @param namespace Namespace in which to register the icon config.\n   * @param config Config to be registered.\n   */\n  private _addSvgIconSetConfig(namespace: string, config: SvgIconConfig): this {\n    const configNamespace = this._iconSetConfigs.get(namespace);\n\n    if (configNamespace) {\n      configNamespace.push(config);\n    } else {\n      this._iconSetConfigs.set(namespace, [config]);\n    }\n\n    return this;\n  }\n}\n\n/** @docs-private */\nexport function ICON_REGISTRY_PROVIDER_FACTORY(\n  parentRegistry: MatIconRegistry,\n  httpClient: HttpClient,\n  sanitizer: DomSanitizer,\n  document?: any) {\n  return parentRegistry || new MatIconRegistry(httpClient, sanitizer, document);\n}\n\n/** @docs-private */\nexport const ICON_REGISTRY_PROVIDER = {\n  // If there is already an MatIconRegistry available, use that. Otherwise, provide a new one.\n  provide: MatIconRegistry,\n  deps: [\n    [new Optional(), new SkipSelf(), MatIconRegistry],\n    [new Optional(), HttpClient],\n    DomSanitizer,\n    [new Optional(), DOCUMENT as InjectionToken<any>],\n  ],\n  useFactory: ICON_REGISTRY_PROVIDER_FACTORY,\n};\n\n/** Clones an SVGElement while preserving type information. */\nfunction cloneSvg(svg: SVGElement): SVGElement {\n  return svg.cloneNode(true) as SVGElement;\n}\n\n/** Returns the cache key to use for an icon namespace and name. */\nfunction iconKey(namespace: string, name: string) {\n  return namespace + ':' + name;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {take} from 'rxjs/operators';\nimport {\n  Attribute,\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  Input,\n  OnChanges,\n  OnInit,\n  SimpleChanges,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {CanColor, mixinColor} from '@angular/material/core';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {MatIconRegistry} from './icon-registry';\n\n\n// Boilerplate for applying mixins to MatIcon.\n/** @docs-private */\nexport class MatIconBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatIconMixinBase = mixinColor(MatIconBase);\n\n\n/**\n * Component to display an icon. It can be used in the following ways:\n *\n * - Specify the svgIcon input to load an SVG icon from a URL previously registered with the\n *   addSvgIcon, addSvgIconInNamespace, addSvgIconSet, or addSvgIconSetInNamespace methods of\n *   MatIconRegistry. If the svgIcon value contains a colon it is assumed to be in the format\n *   \"[namespace]:[name]\", if not the value will be the name of an icon in the default namespace.\n *   Examples:\n *     `<mat-icon svgIcon=\"left-arrow\"></mat-icon>\n *     <mat-icon svgIcon=\"animals:cat\"></mat-icon>`\n *\n * - Use a font ligature as an icon by putting the ligature text in the content of the `<mat-icon>`\n *   component. By default the Material icons font is used as described at\n *   http://google.github.io/material-design-icons/#icon-font-for-the-web. You can specify an\n *   alternate font by setting the fontSet input to either the CSS class to apply to use the\n *   desired font, or to an alias previously registered with MatIconRegistry.registerFontClassAlias.\n *   Examples:\n *     `<mat-icon>home</mat-icon>\n *     <mat-icon fontSet=\"myfont\">sun</mat-icon>`\n *\n * - Specify a font glyph to be included via CSS rules by setting the fontSet input to specify the\n *   font, and the fontIcon input to specify the icon. Typically the fontIcon will specify a\n *   CSS class which causes the glyph to be displayed via a :before selector, as in\n *   https://fortawesome.github.io/Font-Awesome/examples/\n *   Example:\n *     `<mat-icon fontSet=\"fa\" fontIcon=\"alarm\"></mat-icon>`\n */\n@Component({\n  moduleId: module.id,\n  template: '<ng-content></ng-content>',\n  selector: 'mat-icon',\n  exportAs: 'matIcon',\n  styleUrls: ['icon.css'],\n  inputs: ['color'],\n  host: {\n    'role': 'img',\n    'class': 'mat-icon',\n    '[class.mat-icon-inline]': 'inline',\n  },\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatIcon extends _MatIconMixinBase implements OnChanges, OnInit, CanColor {\n  /**\n   * Whether the icon should be inlined, automatically sizing the icon to match the font size of\n   * the element the icon is contained in.\n   */\n  @Input()\n  get inline(): boolean {\n    return this._inline;\n  }\n  set inline(inline: boolean) {\n    this._inline = coerceBooleanProperty(inline);\n  }\n  private _inline: boolean = false;\n\n  /** Name of the icon in the SVG icon set. */\n  @Input() svgIcon: string;\n\n  /** Font set that the icon is a part of. */\n  @Input()\n  get fontSet(): string { return this._fontSet; }\n  set fontSet(value: string) {\n    this._fontSet = this._cleanupFontValue(value);\n  }\n  private _fontSet: string;\n\n  /** Name of an icon within a font set. */\n  @Input()\n  get fontIcon(): string { return this._fontIcon; }\n  set fontIcon(value: string) {\n    this._fontIcon = this._cleanupFontValue(value);\n  }\n  private _fontIcon: string;\n\n  private _previousFontSetClass: string;\n  private _previousFontIconClass: string;\n\n  constructor(\n      elementRef: ElementRef,\n      private _iconRegistry: MatIconRegistry,\n      @Attribute('aria-hidden') ariaHidden: string) {\n    super(elementRef);\n\n    // If the user has not explicitly set aria-hidden, mark the icon as hidden, as this is\n    // the right thing to do for the majority of icon use-cases.\n    if (!ariaHidden) {\n      elementRef.nativeElement.setAttribute('aria-hidden', 'true');\n    }\n  }\n\n  /**\n   * Splits an svgIcon binding value into its icon set and icon name components.\n   * Returns a 2-element array of [(icon set), (icon name)].\n   * The separator for the two fields is ':'. If there is no separator, an empty\n   * string is returned for the icon set and the entire value is returned for\n   * the icon name. If the argument is falsy, returns an array of two empty strings.\n   * Throws an error if the name contains two or more ':' separators.\n   * Examples:\n   *   `'social:cake' -> ['social', 'cake']\n   *   'penguin' -> ['', 'penguin']\n   *   null -> ['', '']\n   *   'a:b:c' -> (throws Error)`\n   */\n  private _splitIconName(iconName: string): [string, string] {\n    if (!iconName) {\n      return ['', ''];\n    }\n    const parts = iconName.split(':');\n    switch (parts.length) {\n      case 1: return ['', parts[0]]; // Use default namespace.\n      case 2: return <[string, string]>parts;\n      default: throw Error(`Invalid icon name: \"${iconName}\"`);\n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    // Only update the inline SVG icon if the inputs changed, to avoid unnecessary DOM operations.\n    if (changes.svgIcon) {\n      if (this.svgIcon) {\n        const [namespace, iconName] = this._splitIconName(this.svgIcon);\n\n        this._iconRegistry.getNamedSvgIcon(iconName, namespace).pipe(take(1)).subscribe(\n          svg => this._setSvgElement(svg),\n          (err: Error) => console.log(`Error retrieving icon: ${err.message}`)\n        );\n      } else {\n        this._clearSvgElement();\n      }\n    }\n\n    if (this._usingFontIcon()) {\n      this._updateFontIconClasses();\n    }\n  }\n\n  ngOnInit() {\n    // Update font classes because ngOnChanges won't be called if none of the inputs are present,\n    // e.g. <mat-icon>arrow</mat-icon> In this case we need to add a CSS class for the default font.\n    if (this._usingFontIcon()) {\n      this._updateFontIconClasses();\n    }\n  }\n\n  private _usingFontIcon(): boolean {\n    return !this.svgIcon;\n  }\n\n  private _setSvgElement(svg: SVGElement) {\n    this._clearSvgElement();\n\n    // Workaround for IE11 and Edge ignoring `style` tags inside dynamically-created SVGs.\n    // See: https://developer.microsoft.com/en-us/microsoft-edge/platform/issues/10898469/\n    // Do this before inserting the element into the DOM, in order to avoid a style recalculation.\n    const styleTags = svg.querySelectorAll('style') as NodeListOf<HTMLStyleElement>;\n\n    for (let i = 0; i < styleTags.length; i++) {\n      styleTags[i].textContent += ' ';\n    }\n\n    this._elementRef.nativeElement.appendChild(svg);\n  }\n\n  private _clearSvgElement() {\n    const layoutElement: HTMLElement = this._elementRef.nativeElement;\n    const childCount = layoutElement.childNodes.length;\n\n    // Remove existing non-element child nodes and SVGs, and add the new SVG element. Note that\n    // we can't use innerHTML, because IE will throw if the element has a data binding.\n    for (let i = 0; i < childCount; i++) {\n      const child = layoutElement.childNodes[i];\n\n      // 1 corresponds to Node.ELEMENT_NODE. We remove all non-element nodes in order to get rid\n      // of any loose text nodes, as well as any SVG elements in order to remove any old icons.\n      if (child.nodeType !== 1 || child.nodeName.toLowerCase() === 'svg') {\n        layoutElement.removeChild(child);\n      }\n    }\n  }\n\n  private _updateFontIconClasses() {\n    if (!this._usingFontIcon()) {\n      return;\n    }\n\n    const elem: HTMLElement = this._elementRef.nativeElement;\n    const fontSetClass = this.fontSet ?\n        this._iconRegistry.classNameForFontAlias(this.fontSet) :\n        this._iconRegistry.getDefaultFontSetClass();\n\n    if (fontSetClass != this._previousFontSetClass) {\n      if (this._previousFontSetClass) {\n        elem.classList.remove(this._previousFontSetClass);\n      }\n      if (fontSetClass) {\n        elem.classList.add(fontSetClass);\n      }\n      this._previousFontSetClass = fontSetClass;\n    }\n\n    if (this.fontIcon != this._previousFontIconClass) {\n      if (this._previousFontIconClass) {\n        elem.classList.remove(this._previousFontIconClass);\n      }\n      if (this.fontIcon) {\n        elem.classList.add(this.fontIcon);\n      }\n      this._previousFontIconClass = this.fontIcon;\n    }\n  }\n\n  /**\n   * Cleans up a value to be used as a fontIcon or fontSet.\n   * Since the value ends up being assigned as a CSS class, we\n   * have to trim the value and omit space-separated values.\n   */\n  private _cleanupFontValue(value: string) {\n    return typeof value === 'string' ? value.trim().split(' ')[0] : value;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatIcon} from './icon';\n\n\n@NgModule({\n  imports: [MatCommonModule],\n  exports: [MatIcon, MatCommonModule],\n  declarations: [MatIcon],\n})\nexport class MatIconModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {ESCAPE, UP_ARROW} from '@angular/cdk/keycodes';\nimport {\n  Overlay,\n  OverlayConfig,\n  OverlayRef,\n  PositionStrategy,\n  ScrollStrategy,\n} from '@angular/cdk/overlay';\nimport {ComponentPortal, ComponentType} from '@angular/cdk/portal';\nimport {DOCUMENT} from '@angular/common';\nimport {take, filter} from 'rxjs/operators';\nimport {\n  AfterViewInit,\n  ChangeDetectionStrategy,\n  Component,\n  ComponentRef,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  Optional,\n  Output,\n  ViewChild,\n  ViewContainerRef,\n  ViewEncapsulation,\n  OnDestroy,\n} from '@angular/core';\nimport {CanColor, DateAdapter, mixinColor, ThemePalette} from '@angular/material/core';\nimport {MatDialog, MatDialogRef} from '@angular/material/dialog';\nimport {merge, Subject, Subscription} from 'rxjs';\nimport {createMissingDateImplError} from './datepicker-errors';\nimport {MatDatepickerInput} from './datepicker-input';\nimport {MatCalendar} from './calendar';\nimport {matDatepickerAnimations} from './datepicker-animations';\n\n/** Used to generate a unique ID for each datepicker instance. */\nlet datepickerUid = 0;\n\n/** Injection token that determines the scroll handling while the calendar is open. */\nexport const MAT_DATEPICKER_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mat-datepicker-scroll-strategy');\n\n/** @docs-private */\nexport function MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY(overlay: Overlay): () => ScrollStrategy {\n  return () => overlay.scrollStrategies.reposition();\n}\n\n/** @docs-private */\nexport const MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY_PROVIDER = {\n  provide: MAT_DATEPICKER_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY,\n};\n\n// Boilerplate for applying mixins to MatDatepickerContent.\n/** @docs-private */\nexport class MatDatepickerContentBase {\n  constructor(public _elementRef: ElementRef) { }\n}\nexport const _MatDatepickerContentMixinBase = mixinColor(MatDatepickerContentBase);\n\n/**\n * Component used as the content for the datepicker dialog and popup. We use this instead of using\n * MatCalendar directly as the content so we can control the initial focus. This also gives us a\n * place to put additional features of the popup that are not part of the calendar itself in the\n * future. (e.g. confirmation buttons).\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-datepicker-content',\n  templateUrl: 'datepicker-content.html',\n  styleUrls: ['datepicker-content.css'],\n  host: {\n    'class': 'mat-datepicker-content',\n    '[@transformPanel]': '\"enter\"',\n    '[class.mat-datepicker-content-touch]': 'datepicker.touchUi',\n  },\n  animations: [\n    matDatepickerAnimations.transformPanel,\n    matDatepickerAnimations.fadeInCalendar,\n  ],\n  exportAs: 'matDatepickerContent',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  inputs: ['color'],\n})\nexport class MatDatepickerContent<D> extends _MatDatepickerContentMixinBase\n  implements AfterViewInit, CanColor {\n\n  /** Reference to the internal calendar component. */\n  @ViewChild(MatCalendar) _calendar: MatCalendar<D>;\n\n  /** Reference to the datepicker that created the overlay. */\n  datepicker: MatDatepicker<D>;\n\n  /** Whether the datepicker is above or below the input. */\n  _isAbove: boolean;\n\n  constructor(elementRef: ElementRef) {\n    super(elementRef);\n  }\n\n  ngAfterViewInit() {\n    this._calendar.focusActiveCell();\n  }\n}\n\n\n// TODO(mmalerba): We use a component instead of a directive here so the user can use implicit\n// template reference variables (e.g. #d vs #d=\"matDatepicker\"). We can change this to a directive\n// if angular adds support for `exportAs: '$implicit'` on directives.\n/** Component responsible for managing the datepicker popup/dialog. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-datepicker',\n  template: '',\n  exportAs: 'matDatepicker',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatDatepicker<D> implements OnDestroy, CanColor {\n  /** An input indicating the type of the custom header component for the calendar, if set. */\n  @Input() calendarHeaderComponent: ComponentType<any>;\n\n  /** The date to open the calendar to initially. */\n  @Input()\n  get startAt(): D | null {\n    // If an explicit startAt is set we start there, otherwise we start at whatever the currently\n    // selected value is.\n    return this._startAt || (this._datepickerInput ? this._datepickerInput.value : null);\n  }\n  set startAt(value: D | null) {\n    this._startAt = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _startAt: D | null;\n\n  /** The view that the calendar should start in. */\n  @Input() startView: 'month' | 'year' = 'month';\n\n  /** Color palette to use on the datepicker's calendar. */\n  @Input()\n  get color(): ThemePalette {\n    return this._color ||\n        (this._datepickerInput ? this._datepickerInput._getThemePalette() : undefined);\n  }\n  set color(value: ThemePalette) {\n    this._color = value;\n  }\n  _color: ThemePalette;\n\n  /**\n   * Whether the calendar UI is in touch mode. In touch mode the calendar opens in a dialog rather\n   * than a popup and elements have more padding to allow for bigger touch targets.\n   */\n  @Input()\n  get touchUi(): boolean { return this._touchUi; }\n  set touchUi(value: boolean) {\n    this._touchUi = coerceBooleanProperty(value);\n  }\n  private _touchUi = false;\n\n  /** Whether the datepicker pop-up should be disabled. */\n  @Input()\n  get disabled(): boolean {\n    return this._disabled === undefined && this._datepickerInput ?\n        this._datepickerInput.disabled : !!this._disabled;\n  }\n  set disabled(value: boolean) {\n    const newValue = coerceBooleanProperty(value);\n\n    if (newValue !== this._disabled) {\n      this._disabled = newValue;\n      this._disabledChange.next(newValue);\n    }\n  }\n  private _disabled: boolean;\n\n  /**\n   * Emits selected year in multiyear view.\n   * This doesn't imply a change on the selected date.\n   */\n  @Output() readonly yearSelected: EventEmitter<D> = new EventEmitter<D>();\n\n  /**\n   * Emits selected month in year view.\n   * This doesn't imply a change on the selected date.\n   */\n  @Output() readonly monthSelected: EventEmitter<D> = new EventEmitter<D>();\n\n  /** Classes to be passed to the date picker panel. Supports the same syntax as `ngClass`. */\n  @Input() panelClass: string | string[];\n\n  /** Emits when the datepicker has been opened. */\n  @Output('opened') openedStream: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Emits when the datepicker has been closed. */\n  @Output('closed') closedStream: EventEmitter<void> = new EventEmitter<void>();\n\n\n  /** Whether the calendar is open. */\n  @Input()\n  get opened(): boolean { return this._opened; }\n  set opened(value: boolean) { value ? this.open() : this.close(); }\n  private _opened = false;\n\n  /** The id for the datepicker calendar. */\n  id: string = `mat-datepicker-${datepickerUid++}`;\n\n  /** The currently selected date. */\n  get _selected(): D | null { return this._validSelected; }\n  set _selected(value: D | null) { this._validSelected = value; }\n  private _validSelected: D | null = null;\n\n  /** The minimum selectable date. */\n  get _minDate(): D | null {\n    return this._datepickerInput && this._datepickerInput.min;\n  }\n\n  /** The maximum selectable date. */\n  get _maxDate(): D | null {\n    return this._datepickerInput && this._datepickerInput.max;\n  }\n\n  get _dateFilter(): (date: D | null) => boolean {\n    return this._datepickerInput && this._datepickerInput._dateFilter;\n  }\n\n  /** A reference to the overlay when the calendar is opened as a popup. */\n  _popupRef: OverlayRef;\n\n  /** A reference to the dialog when the calendar is opened as a dialog. */\n  private _dialogRef: MatDialogRef<MatDatepickerContent<D>> | null;\n\n  /** A portal containing the calendar for this datepicker. */\n  private _calendarPortal: ComponentPortal<MatDatepickerContent<D>>;\n\n  /** Reference to the component instantiated in popup mode. */\n  private _popupComponentRef: ComponentRef<MatDatepickerContent<D>> | null;\n\n  /** The element that was focused before the datepicker was opened. */\n  private _focusedElementBeforeOpen: HTMLElement | null = null;\n\n  /** Subscription to value changes in the associated input element. */\n  private _inputSubscription = Subscription.EMPTY;\n\n  /** The input element this datepicker is associated with. */\n  _datepickerInput: MatDatepickerInput<D>;\n\n  /** Emits when the datepicker is disabled. */\n  readonly _disabledChange = new Subject<boolean>();\n\n  /** Emits new selected date when selected date changes. */\n  readonly _selectedChanged = new Subject<D>();\n\n  constructor(private _dialog: MatDialog,\n              private _overlay: Overlay,\n              private _ngZone: NgZone,\n              private _viewContainerRef: ViewContainerRef,\n              @Inject(MAT_DATEPICKER_SCROLL_STRATEGY) private _scrollStrategy,\n              @Optional() private _dateAdapter: DateAdapter<D>,\n              @Optional() private _dir: Directionality,\n              @Optional() @Inject(DOCUMENT) private _document: any) {\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n  }\n\n  ngOnDestroy() {\n    this.close();\n    this._inputSubscription.unsubscribe();\n    this._disabledChange.complete();\n\n    if (this._popupRef) {\n      this._popupRef.dispose();\n      this._popupComponentRef = null;\n    }\n  }\n\n  /** Selects the given date */\n  _select(date: D): void {\n    let oldValue = this._selected;\n    this._selected = date;\n    if (!this._dateAdapter.sameDate(oldValue, this._selected)) {\n      this._selectedChanged.next(date);\n    }\n  }\n\n  /** Emits the selected year in multiyear view */\n  _selectYear(normalizedYear: D): void {\n    this.yearSelected.emit(normalizedYear);\n  }\n\n  /** Emits selected month in year view */\n  _selectMonth(normalizedMonth: D): void {\n    this.monthSelected.emit(normalizedMonth);\n  }\n\n  /**\n   * Register an input with this datepicker.\n   * @param input The datepicker input to register with this datepicker.\n   */\n  _registerInput(input: MatDatepickerInput<D>): void {\n    if (this._datepickerInput) {\n      throw Error('A MatDatepicker can only be associated with a single input.');\n    }\n    this._datepickerInput = input;\n    this._inputSubscription =\n        this._datepickerInput._valueChange.subscribe((value: D | null) => this._selected = value);\n  }\n\n  /** Open the calendar. */\n  open(): void {\n    if (this._opened || this.disabled) {\n      return;\n    }\n    if (!this._datepickerInput) {\n      throw Error('Attempted to open an MatDatepicker with no associated input.');\n    }\n    if (this._document) {\n      this._focusedElementBeforeOpen = this._document.activeElement;\n    }\n\n    this.touchUi ? this._openAsDialog() : this._openAsPopup();\n    this._opened = true;\n    this.openedStream.emit();\n  }\n\n  /** Close the calendar. */\n  close(): void {\n    if (!this._opened) {\n      return;\n    }\n    if (this._popupRef && this._popupRef.hasAttached()) {\n      this._popupRef.detach();\n    }\n    if (this._dialogRef) {\n      this._dialogRef.close();\n      this._dialogRef = null;\n    }\n    if (this._calendarPortal && this._calendarPortal.isAttached) {\n      this._calendarPortal.detach();\n    }\n\n    const completeClose = () => {\n      // The `_opened` could've been reset already if\n      // we got two events in quick succession.\n      if (this._opened) {\n        this._opened = false;\n        this.closedStream.emit();\n        this._focusedElementBeforeOpen = null;\n      }\n    };\n\n    if (this._focusedElementBeforeOpen &&\n      typeof this._focusedElementBeforeOpen.focus === 'function') {\n      // Because IE moves focus asynchronously, we can't count on it being restored before we've\n      // marked the datepicker as closed. If the event fires out of sequence and the element that\n      // we're refocusing opens the datepicker on focus, the user could be stuck with not being\n      // able to close the calendar at all. We work around it by making the logic, that marks\n      // the datepicker as closed, async as well.\n      this._focusedElementBeforeOpen.focus();\n      setTimeout(completeClose);\n    } else {\n      completeClose();\n    }\n  }\n\n  /** Open the calendar as a dialog. */\n  private _openAsDialog(): void {\n    this._dialogRef = this._dialog.open<MatDatepickerContent<D>>(MatDatepickerContent, {\n      direction: this._dir ? this._dir.value : 'ltr',\n      viewContainerRef: this._viewContainerRef,\n      panelClass: 'mat-datepicker-dialog',\n    });\n\n    this._dialogRef.afterClosed().subscribe(() => this.close());\n    this._dialogRef.componentInstance.datepicker = this;\n    this._setColor();\n  }\n\n  /** Open the calendar as a popup. */\n  private _openAsPopup(): void {\n    if (!this._calendarPortal) {\n      this._calendarPortal = new ComponentPortal<MatDatepickerContent<D>>(MatDatepickerContent,\n                                                                          this._viewContainerRef);\n    }\n\n    if (!this._popupRef) {\n      this._createPopup();\n    }\n\n    if (!this._popupRef.hasAttached()) {\n      this._popupComponentRef = this._popupRef.attach(this._calendarPortal);\n      this._popupComponentRef.instance.datepicker = this;\n      this._setColor();\n\n      // Update the position once the calendar has rendered.\n      this._ngZone.onStable.asObservable().pipe(take(1)).subscribe(() => {\n        this._popupRef.updatePosition();\n      });\n    }\n  }\n\n  /** Create the popup. */\n  private _createPopup(): void {\n    const overlayConfig = new OverlayConfig({\n      positionStrategy: this._createPopupPositionStrategy(),\n      hasBackdrop: true,\n      backdropClass: 'mat-overlay-transparent-backdrop',\n      direction: this._dir,\n      scrollStrategy: this._scrollStrategy(),\n      panelClass: 'mat-datepicker-popup',\n    });\n\n    this._popupRef = this._overlay.create(overlayConfig);\n\n    merge(\n      this._popupRef.backdropClick(),\n      this._popupRef.detachments(),\n      this._popupRef.keydownEvents().pipe(filter(event => {\n        // Closing on alt + up is only valid when there's an input associated with the datepicker.\n        return event.keyCode === ESCAPE ||\n               (this._datepickerInput && event.altKey && event.keyCode === UP_ARROW);\n      }))\n    ).subscribe(() => this.close());\n  }\n\n  /** Create the popup PositionStrategy. */\n  private _createPopupPositionStrategy(): PositionStrategy {\n    return this._overlay.position()\n      .flexibleConnectedTo(this._datepickerInput.getPopupConnectionElementRef())\n      .withTransformOriginOn('.mat-datepicker-content')\n      .withFlexibleDimensions(false)\n      .withViewportMargin(8)\n      .withPush(false)\n      .withPositions([\n        {\n          originX: 'start',\n          originY: 'bottom',\n          overlayX: 'start',\n          overlayY: 'top'\n        },\n        {\n          originX: 'start',\n          originY: 'top',\n          overlayX: 'start',\n          overlayY: 'bottom'\n        },\n        {\n          originX: 'end',\n          originY: 'bottom',\n          overlayX: 'end',\n          overlayY: 'top'\n        },\n        {\n          originX: 'end',\n          originY: 'top',\n          overlayX: 'end',\n          overlayY: 'bottom'\n        }\n      ]);\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n\n  /** Passes the current theme color along to the calendar overlay. */\n  private _setColor(): void {\n    const color = this.color;\n    if (this._popupComponentRef) {\n      this._popupComponentRef.instance.color = color;\n    }\n    if (this._dialogRef) {\n      this._dialogRef.componentInstance.color = color;\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {DOWN_ARROW} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  Directive,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  OnDestroy,\n  Optional,\n  Output,\n} from '@angular/core';\nimport {\n  AbstractControl,\n  ControlValueAccessor,\n  NG_VALIDATORS,\n  NG_VALUE_ACCESSOR,\n  ValidationErrors,\n  Validator,\n  ValidatorFn,\n  Validators\n} from '@angular/forms';\nimport {DateAdapter, MAT_DATE_FORMATS, MatDateFormats} from '@angular/material/core';\nimport {MatFormField} from '@angular/material/form-field';\nimport {MAT_INPUT_VALUE_ACCESSOR} from '@angular/material/input';\nimport {Subscription} from 'rxjs';\nimport {MatDatepicker} from './datepicker';\nimport {createMissingDateImplError} from './datepicker-errors';\n\n\nexport const MAT_DATEPICKER_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatDatepickerInput),\n  multi: true\n};\n\n\nexport const MAT_DATEPICKER_VALIDATORS: any = {\n  provide: NG_VALIDATORS,\n  useExisting: forwardRef(() => MatDatepickerInput),\n  multi: true\n};\n\n\n/**\n * An event used for datepicker input and change events. We don't always have access to a native\n * input or change event because the event may have been triggered by the user clicking on the\n * calendar popup. For consistency, we always use MatDatepickerInputEvent instead.\n */\nexport class MatDatepickerInputEvent<D> {\n  /** The new value for the target datepicker input. */\n  value: D | null;\n\n  constructor(\n    /** Reference to the datepicker input component that emitted the event. */\n    public target: MatDatepickerInput<D>,\n    /** Reference to the native input element associated with the datepicker input. */\n    public targetElement: HTMLElement) {\n    this.value = this.target.value;\n  }\n}\n\n\n/** Directive used to connect an input to a MatDatepicker. */\n@Directive({\n  selector: 'input[matDatepicker]',\n  providers: [\n    MAT_DATEPICKER_VALUE_ACCESSOR,\n    MAT_DATEPICKER_VALIDATORS,\n    {provide: MAT_INPUT_VALUE_ACCESSOR, useExisting: MatDatepickerInput},\n  ],\n  host: {\n    '[attr.aria-haspopup]': 'true',\n    '[attr.aria-owns]': '(_datepicker?.opened && _datepicker.id) || null',\n    '[attr.min]': 'min ? _dateAdapter.toIso8601(min) : null',\n    '[attr.max]': 'max ? _dateAdapter.toIso8601(max) : null',\n    '[disabled]': 'disabled',\n    '(input)': '_onInput($event.target.value)',\n    '(change)': '_onChange()',\n    '(blur)': '_onBlur()',\n    '(keydown)': '_onKeydown($event)',\n  },\n  exportAs: 'matDatepickerInput',\n})\nexport class MatDatepickerInput<D> implements AfterContentInit, ControlValueAccessor, OnDestroy,\n    Validator {\n  /** The datepicker that this input is associated with. */\n  @Input()\n  set matDatepicker(value: MatDatepicker<D>) {\n    this.registerDatepicker(value);\n  }\n  _datepicker: MatDatepicker<D>;\n\n  private registerDatepicker(value: MatDatepicker<D>) {\n    if (value) {\n      this._datepicker = value;\n      this._datepicker._registerInput(this);\n    }\n  }\n\n  /** Function that can be used to filter out dates within the datepicker. */\n  @Input()\n  set matDatepickerFilter(value: (date: D | null) => boolean) {\n    this._dateFilter = value;\n    this._validatorOnChange();\n  }\n  _dateFilter: (date: D | null) => boolean;\n\n  /** The value of the input. */\n  @Input()\n  get value(): D | null { return this._value; }\n  set value(value: D | null) {\n    value = this._dateAdapter.deserialize(value);\n    this._lastValueValid = !value || this._dateAdapter.isValid(value);\n    value = this._getValidDateOrNull(value);\n    const oldDate = this.value;\n    this._value = value;\n    this._formatValue(value);\n\n    if (!this._dateAdapter.sameDate(oldDate, value)) {\n      this._valueChange.emit(value);\n    }\n  }\n  private _value: D | null;\n\n  /** The minimum valid date. */\n  @Input()\n  get min(): D | null { return this._min; }\n  set min(value: D | null) {\n    this._min = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n    this._validatorOnChange();\n  }\n  private _min: D | null;\n\n  /** The maximum valid date. */\n  @Input()\n  get max(): D | null { return this._max; }\n  set max(value: D | null) {\n    this._max = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n    this._validatorOnChange();\n  }\n  private _max: D | null;\n\n  /** Whether the datepicker-input is disabled. */\n  @Input()\n  get disabled(): boolean { return !!this._disabled; }\n  set disabled(value: boolean) {\n    const newValue = coerceBooleanProperty(value);\n    const element = this._elementRef.nativeElement;\n\n    if (this._disabled !== newValue) {\n      this._disabled = newValue;\n      this._disabledChange.emit(newValue);\n    }\n\n    // We need to null check the `blur` method, because it's undefined during SSR.\n    if (newValue && element.blur) {\n      // Normally, native input elements automatically blur if they turn disabled. This behavior\n      // is problematic, because it would mean that it triggers another change detection cycle,\n      // which then causes a changed after checked error if the input element was focused before.\n      element.blur();\n    }\n  }\n  private _disabled: boolean;\n\n  /** Emits when a `change` event is fired on this `<input>`. */\n  @Output() readonly dateChange: EventEmitter<MatDatepickerInputEvent<D>> =\n      new EventEmitter<MatDatepickerInputEvent<D>>();\n\n  /** Emits when an `input` event is fired on this `<input>`. */\n  @Output() readonly dateInput: EventEmitter<MatDatepickerInputEvent<D>> =\n      new EventEmitter<MatDatepickerInputEvent<D>>();\n\n  /** Emits when the value changes (either due to user input or programmatic change). */\n  _valueChange = new EventEmitter<D | null>();\n\n  /** Emits when the disabled state has changed */\n  _disabledChange = new EventEmitter<boolean>();\n\n  _onTouched = () => {};\n\n  private _cvaOnChange: (value: any) => void = () => {};\n\n  private _validatorOnChange = () => {};\n\n  private _datepickerSubscription = Subscription.EMPTY;\n\n  private _localeSubscription = Subscription.EMPTY;\n\n  /** The form control validator for whether the input parses. */\n  private _parseValidator: ValidatorFn = (): ValidationErrors | null => {\n    return this._lastValueValid ?\n        null : {'matDatepickerParse': {'text': this._elementRef.nativeElement.value}};\n  }\n\n  /** The form control validator for the min date. */\n  private _minValidator: ValidatorFn = (control: AbstractControl): ValidationErrors | null => {\n    const controlValue = this._getValidDateOrNull(this._dateAdapter.deserialize(control.value));\n    return (!this.min || !controlValue ||\n        this._dateAdapter.compareDate(this.min, controlValue) <= 0) ?\n        null : {'matDatepickerMin': {'min': this.min, 'actual': controlValue}};\n  }\n\n  /** The form control validator for the max date. */\n  private _maxValidator: ValidatorFn = (control: AbstractControl): ValidationErrors | null => {\n    const controlValue = this._getValidDateOrNull(this._dateAdapter.deserialize(control.value));\n    return (!this.max || !controlValue ||\n        this._dateAdapter.compareDate(this.max, controlValue) >= 0) ?\n        null : {'matDatepickerMax': {'max': this.max, 'actual': controlValue}};\n  }\n\n  /** The form control validator for the date filter. */\n  private _filterValidator: ValidatorFn = (control: AbstractControl): ValidationErrors | null => {\n    const controlValue = this._getValidDateOrNull(this._dateAdapter.deserialize(control.value));\n    return !this._dateFilter || !controlValue || this._dateFilter(controlValue) ?\n        null : {'matDatepickerFilter': true};\n  }\n\n  /** The combined form control validator for this input. */\n  private _validator: ValidatorFn | null =\n      Validators.compose(\n          [this._parseValidator, this._minValidator, this._maxValidator, this._filterValidator]);\n\n  /** Whether the last value set on the input was valid. */\n  private _lastValueValid = false;\n\n  constructor(\n      private _elementRef: ElementRef,\n      @Optional() public _dateAdapter: DateAdapter<D>,\n      @Optional() @Inject(MAT_DATE_FORMATS) private _dateFormats: MatDateFormats,\n      @Optional() private _formField: MatFormField) {\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n    if (!this._dateFormats) {\n      throw createMissingDateImplError('MAT_DATE_FORMATS');\n    }\n\n    // Update the displayed date when the locale changes.\n    this._localeSubscription = _dateAdapter.localeChanges.subscribe(() => {\n      this.value = this.value;\n    });\n  }\n\n  ngAfterContentInit() {\n    if (this._datepicker) {\n      this._datepickerSubscription = this._datepicker._selectedChanged.subscribe((selected: D) => {\n        this.value = selected;\n        this._cvaOnChange(selected);\n        this._onTouched();\n        this.dateInput.emit(new MatDatepickerInputEvent(this, this._elementRef.nativeElement));\n        this.dateChange.emit(new MatDatepickerInputEvent(this, this._elementRef.nativeElement));\n      });\n    }\n  }\n\n  ngOnDestroy() {\n    this._datepickerSubscription.unsubscribe();\n    this._localeSubscription.unsubscribe();\n    this._valueChange.complete();\n    this._disabledChange.complete();\n  }\n\n  /** @docs-private */\n  registerOnValidatorChange(fn: () => void): void {\n    this._validatorOnChange = fn;\n  }\n\n  /** @docs-private */\n  validate(c: AbstractControl): ValidationErrors | null {\n    return this._validator ? this._validator(c) : null;\n  }\n\n  /**\n   * @deprecated\n   * @deletion-target 7.0.0 Use `getConnectedOverlayOrigin` instead\n   */\n  getPopupConnectionElementRef(): ElementRef {\n    return this.getConnectedOverlayOrigin();\n  }\n\n  /**\n   * Gets the element that the datepicker popup should be connected to.\n   * @return The element to connect the popup to.\n   */\n  getConnectedOverlayOrigin(): ElementRef {\n    return this._formField ? this._formField.getConnectedOverlayOrigin() : this._elementRef;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  writeValue(value: D): void {\n    this.value = value;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnChange(fn: (value: any) => void): void {\n    this._cvaOnChange = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnTouched(fn: () => void): void {\n    this._onTouched = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n  }\n\n  _onKeydown(event: KeyboardEvent) {\n    if (event.altKey && event.keyCode === DOWN_ARROW) {\n      this._datepicker.open();\n      event.preventDefault();\n    }\n  }\n\n  _onInput(value: string) {\n    let date = this._dateAdapter.parse(value, this._dateFormats.parse.dateInput);\n    this._lastValueValid = !date || this._dateAdapter.isValid(date);\n    date = this._getValidDateOrNull(date);\n\n    if (!this._dateAdapter.sameDate(date, this._value)) {\n      this._value = date;\n      this._cvaOnChange(date);\n      this._valueChange.emit(date);\n      this.dateInput.emit(new MatDatepickerInputEvent(this, this._elementRef.nativeElement));\n    }\n  }\n\n  _onChange() {\n    this.dateChange.emit(new MatDatepickerInputEvent(this, this._elementRef.nativeElement));\n  }\n\n  /** Returns the palette used by the input's form field, if any. */\n  _getThemePalette() {\n    return this._formField ? this._formField.color : undefined;\n  }\n\n  /** Handles blur events on the input. */\n  _onBlur() {\n    // Reformat the input only if we have a valid value.\n    if (this.value) {\n      this._formatValue(this.value);\n    }\n\n    this._onTouched();\n  }\n\n  /** Formats a value and sets it on the input element. */\n  private _formatValue(value: D | null) {\n    this._elementRef.nativeElement.value =\n        value ? this._dateAdapter.format(value, this._dateFormats.display.dateInput) : '';\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  Directive,\n  Input,\n  OnChanges,\n  OnDestroy,\n  SimpleChanges,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {merge, of as observableOf, Subscription} from 'rxjs';\nimport {MatDatepicker} from './datepicker';\nimport {MatDatepickerIntl} from './datepicker-intl';\n\n\n/** Can be used to override the icon of a `matDatepickerToggle`. */\n@Directive({\n  selector: '[matDatepickerToggleIcon]'\n})\nexport class MatDatepickerToggleIcon {}\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-datepicker-toggle',\n  templateUrl: 'datepicker-toggle.html',\n  styleUrls: ['datepicker-toggle.css'],\n  host: {\n    'class': 'mat-datepicker-toggle',\n    '[class.mat-datepicker-toggle-active]': 'datepicker && datepicker.opened',\n    '[class.mat-accent]': 'datepicker && datepicker.color === \"accent\"',\n    '[class.mat-warn]': 'datepicker && datepicker.color === \"warn\"',\n  },\n  exportAs: 'matDatepickerToggle',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatDatepickerToggle<D> implements AfterContentInit, OnChanges, OnDestroy {\n  private _stateChanges = Subscription.EMPTY;\n\n  /** Datepicker instance that the button will toggle. */\n  @Input('for') datepicker: MatDatepicker<D>;\n\n  /** Whether the toggle button is disabled. */\n  @Input()\n  get disabled(): boolean {\n    return this._disabled === undefined ? this.datepicker.disabled : !!this._disabled;\n  }\n  set disabled(value: boolean) {\n    this._disabled = coerceBooleanProperty(value);\n  }\n  private _disabled: boolean;\n\n  /** Custom icon set by the consumer. */\n  @ContentChild(MatDatepickerToggleIcon) _customIcon: MatDatepickerToggleIcon;\n\n  constructor(public _intl: MatDatepickerIntl, private _changeDetectorRef: ChangeDetectorRef) {}\n\n  ngOnChanges(changes: SimpleChanges) {\n    if (changes.datepicker) {\n      this._watchStateChanges();\n    }\n  }\n\n  ngOnDestroy() {\n    this._stateChanges.unsubscribe();\n  }\n\n  ngAfterContentInit() {\n    this._watchStateChanges();\n  }\n\n  _open(event: Event): void {\n    if (this.datepicker && !this.disabled) {\n      this.datepicker.open();\n      event.stopPropagation();\n    }\n  }\n\n  private _watchStateChanges() {\n    const datepickerDisabled = this.datepicker ? this.datepicker._disabledChange : observableOf();\n    const inputDisabled = this.datepicker && this.datepicker._datepickerInput ?\n        this.datepicker._datepickerInput._disabledChange : observableOf();\n    const datepickerToggled = this.datepicker ?\n        merge(this.datepicker.openedStream, this.datepicker.closedStream) :\n        observableOf();\n\n    this._stateChanges.unsubscribe();\n    this._stateChanges = merge(\n      this._intl.changes,\n      datepickerDisabled,\n      inputDisabled,\n      datepickerToggled\n    ).subscribe(() => this._changeDetectorRef.markForCheck());\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {A11yModule} from '@angular/cdk/a11y';\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatButtonModule} from '@angular/material/button';\nimport {MatDialogModule} from '@angular/material/dialog';\nimport {MatCalendar, MatCalendarHeader} from './calendar';\nimport {MatCalendarBody} from './calendar-body';\nimport {\n  MatDatepicker,\n  MatDatepickerContent,\n  MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY_PROVIDER,\n} from './datepicker';\nimport {MatDatepickerInput} from './datepicker-input';\nimport {MatDatepickerIntl} from './datepicker-intl';\nimport {MatDatepickerToggle, MatDatepickerToggleIcon} from './datepicker-toggle';\nimport {MatMonthView} from './month-view';\nimport {MatMultiYearView} from './multi-year-view';\nimport {MatYearView} from './year-view';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatButtonModule,\n    MatDialogModule,\n    OverlayModule,\n    A11yModule,\n    PortalModule,\n  ],\n  exports: [\n    MatCalendar,\n    MatCalendarBody,\n    MatDatepicker,\n    MatDatepickerContent,\n    MatDatepickerInput,\n    MatDatepickerToggle,\n    MatDatepickerToggleIcon,\n    MatMonthView,\n    MatYearView,\n    MatMultiYearView,\n    MatCalendarHeader,\n  ],\n  declarations: [\n    MatCalendar,\n    MatCalendarBody,\n    MatDatepicker,\n    MatDatepickerContent,\n    MatDatepickerInput,\n    MatDatepickerToggle,\n    MatDatepickerToggleIcon,\n    MatMonthView,\n    MatYearView,\n    MatMultiYearView,\n    MatCalendarHeader,\n  ],\n  providers: [\n    MatDatepickerIntl,\n    MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY_PROVIDER,\n  ],\n  entryComponents: [\n    MatDatepickerContent,\n    MatCalendarHeader,\n  ]\n})\nexport class MatDatepickerModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ChangeDetectionStrategy, Component, Input, ViewEncapsulation} from '@angular/core';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-divider',\n  host: {\n    'role': 'separator',\n    '[attr.aria-orientation]': 'vertical ? \"vertical\" : \"horizontal\"',\n    '[class.mat-divider-vertical]': 'vertical',\n    '[class.mat-divider-horizontal]': '!vertical',\n    '[class.mat-divider-inset]': 'inset',\n    'class': 'mat-divider'\n  },\n  template: '',\n  styleUrls: ['divider.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatDivider {\n  /** Whether the divider is vertically aligned. */\n  @Input()\n  get vertical(): boolean { return this._vertical; }\n  set vertical(value: boolean) { this._vertical = coerceBooleanProperty(value); }\n  private _vertical: boolean = false;\n\n  /** Whether the divider is an inset divider. */\n  @Input()\n  get inset(): boolean { return this._inset; }\n  set inset(value: boolean) { this._inset = coerceBooleanProperty(value); }\n  private _inset: boolean = false;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatDivider} from './divider';\n\n\n@NgModule({\n  imports: [MatCommonModule, CommonModule],\n  exports: [MatDivider, MatCommonModule],\n  declarations: [MatDivider],\n})\nexport class MatDividerModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, Input} from '@angular/core';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {CdkAccordion} from '@angular/cdk/accordion';\n\n/** MatAccordion's display modes. */\nexport type MatAccordionDisplayMode = 'default' | 'flat';\n\n/**\n * Directive for a Material Design Accordion.\n */\n@Directive({\n  selector: 'mat-accordion',\n  exportAs: 'matAccordion',\n  host: {\n    class: 'mat-accordion'\n  }\n})\nexport class MatAccordion extends CdkAccordion {\n  /** Whether the expansion indicator should be hidden. */\n  @Input()\n  get hideToggle(): boolean { return this._hideToggle; }\n  set hideToggle(show: boolean) { this._hideToggle = coerceBooleanProperty(show); }\n  private _hideToggle: boolean = false;\n\n  /**\n   * The display mode used for all expansion panels in the accordion. Currently two display\n   * modes exist:\n   *  default - a gutter-like spacing is placed around any expanded panel, placing the expanded\n   *     panel at a different elevation from the reset of the accordion.\n   *  flat - no spacing is placed around expanded panels, showing all panels at the same\n   *     elevation.\n   */\n  @Input() displayMode: MatAccordionDisplayMode = 'default';\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, TemplateRef} from '@angular/core';\n\n/**\n * Expansion panel content that will be rendered lazily\n * after the panel is opened for the first time.\n */\n@Directive({\n  selector: 'ng-template[matExpansionPanelContent]'\n})\nexport class MatExpansionPanelContent {\n  constructor(public _template: TemplateRef<any>) {}\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {AnimationEvent} from '@angular/animations';\nimport {CdkAccordionItem} from '@angular/cdk/accordion';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {UniqueSelectionDispatcher} from '@angular/cdk/collections';\nimport {TemplatePortal} from '@angular/cdk/portal';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  Directive,\n  Input,\n  OnChanges,\n  OnDestroy,\n  Optional,\n  SimpleChanges,\n  SkipSelf,\n  ViewContainerRef,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {Subject} from 'rxjs';\nimport {filter, startWith, take} from 'rxjs/operators';\nimport {MatAccordion} from './accordion';\nimport {matExpansionAnimations} from './expansion-animations';\nimport {MatExpansionPanelContent} from './expansion-panel-content';\n\n\n/** MatExpansionPanel's states. */\nexport type MatExpansionPanelState = 'expanded' | 'collapsed';\n\n/** Counter for generating unique element ids. */\nlet uniqueId = 0;\n\n/**\n * `<mat-expansion-panel>`\n *\n * This component can be used as a single element to show expandable content, or as one of\n * multiple children of an element with the MatAccordion directive attached.\n */\n@Component({\n  moduleId: module.id,\n  styleUrls: ['./expansion-panel.css'],\n  selector: 'mat-expansion-panel',\n  exportAs: 'matExpansionPanel',\n  templateUrl: './expansion-panel.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  inputs: ['disabled', 'expanded'],\n  outputs: ['opened', 'closed', 'expandedChange'],\n  animations: [matExpansionAnimations.bodyExpansion],\n  providers: [\n    // Provide MatAccordion as undefined to prevent nested expansion panels from registering\n    // to the same accordion.\n    {provide: MatAccordion, useValue: undefined},\n  ],\n  host: {\n    'class': 'mat-expansion-panel',\n    '[class.mat-expanded]': 'expanded',\n    '[class.mat-expansion-panel-spacing]': '_hasSpacing()',\n  }\n})\nexport class MatExpansionPanel extends CdkAccordionItem\n    implements AfterContentInit, OnChanges, OnDestroy {\n  /** Whether the toggle indicator should be hidden. */\n  @Input()\n  get hideToggle(): boolean { return this._hideToggle; }\n  set hideToggle(value: boolean) {\n    this._hideToggle = coerceBooleanProperty(value);\n  }\n  private _hideToggle = false;\n\n  /** Stream that emits for changes in `@Input` properties. */\n  readonly _inputChanges = new Subject<SimpleChanges>();\n\n  /** Optionally defined accordion the expansion panel belongs to. */\n  accordion: MatAccordion;\n\n  /** Content that will be rendered lazily. */\n  @ContentChild(MatExpansionPanelContent) _lazyContent: MatExpansionPanelContent;\n\n  /** Portal holding the user's content. */\n  _portal: TemplatePortal;\n\n  /** ID for the associated header element. Used for a11y labelling. */\n  _headerId = `mat-expansion-panel-header-${uniqueId++}`;\n\n  constructor(@Optional() @SkipSelf() accordion: MatAccordion,\n              _changeDetectorRef: ChangeDetectorRef,\n              _uniqueSelectionDispatcher: UniqueSelectionDispatcher,\n              private _viewContainerRef: ViewContainerRef) {\n    super(accordion, _changeDetectorRef, _uniqueSelectionDispatcher);\n    this.accordion = accordion;\n  }\n\n  /** Whether the expansion indicator should be hidden. */\n  _getHideToggle(): boolean {\n    if (this.accordion) {\n      return this.accordion.hideToggle;\n    }\n    return this.hideToggle;\n  }\n\n  /** Determines whether the expansion panel should have spacing between it and its siblings. */\n  _hasSpacing(): boolean {\n    if (this.accordion) {\n      return (this.expanded ? this.accordion.displayMode : this._getExpandedState()) === 'default';\n    }\n    return false;\n  }\n\n  /** Gets the expanded state string. */\n  _getExpandedState(): MatExpansionPanelState {\n    return this.expanded ? 'expanded' : 'collapsed';\n  }\n\n  ngAfterContentInit() {\n    if (this._lazyContent) {\n      // Render the content as soon as the panel becomes open.\n      this.opened.pipe(\n        startWith(null!),\n        filter(() => this.expanded && !this._portal),\n        take(1)\n      ).subscribe(() => {\n        this._portal = new TemplatePortal(this._lazyContent._template, this._viewContainerRef);\n      });\n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    this._inputChanges.next(changes);\n  }\n\n  ngOnDestroy() {\n    super.ngOnDestroy();\n    this._inputChanges.complete();\n  }\n\n  _bodyAnimation(event: AnimationEvent) {\n    const classList = event.element.classList;\n    const cssClass = 'mat-expanded';\n    const {phaseName, toState} = event;\n\n    // Toggle the body's `overflow: hidden` class when closing starts or when expansion ends in\n    // order to prevent the cases where switching too early would cause the animation to jump.\n    // Note that we do it directly on the DOM element to avoid the slight delay that comes\n    // with doing it via change detection.\n    if (phaseName === 'done' && toState === 'expanded') {\n      classList.add(cssClass);\n    } else if (phaseName === 'start' && toState === 'collapsed') {\n      classList.remove(cssClass);\n    }\n  }\n}\n\n@Directive({\n  selector: 'mat-action-row',\n  host: {\n    class: 'mat-action-row'\n  }\n})\nexport class MatExpansionPanelActionRow {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor} from '@angular/cdk/a11y';\nimport {ENTER, SPACE} from '@angular/cdk/keycodes';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  Directive,\n  ElementRef,\n  Host,\n  Input,\n  OnDestroy,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {merge, Subscription} from 'rxjs';\nimport {filter} from 'rxjs/operators';\nimport {matExpansionAnimations} from './expansion-animations';\nimport {MatExpansionPanel} from './expansion-panel';\n\n\n/**\n * `<mat-expansion-panel-header>`\n *\n * This component corresponds to the header element of an `<mat-expansion-panel>`.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-expansion-panel-header',\n  styleUrls: ['./expansion-panel-header.css'],\n  templateUrl: './expansion-panel-header.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  animations: [\n    matExpansionAnimations.indicatorRotate,\n    matExpansionAnimations.expansionHeaderHeight\n  ],\n  host: {\n    'class': 'mat-expansion-panel-header',\n    'role': 'button',\n    '[attr.id]': 'panel._headerId',\n    '[attr.tabindex]': 'panel.disabled ? -1 : 0',\n    '[attr.aria-controls]': '_getPanelId()',\n    '[attr.aria-expanded]': '_isExpanded()',\n    '[attr.aria-disabled]': 'panel.disabled',\n    '[class.mat-expanded]': '_isExpanded()',\n    '(click)': '_toggle()',\n    '(keydown)': '_keydown($event)',\n    '[@expansionHeight]': `{\n        value: _getExpandedState(),\n        params: {\n          collapsedHeight: collapsedHeight,\n          expandedHeight: expandedHeight\n        }\n    }`,\n  },\n})\nexport class MatExpansionPanelHeader implements OnDestroy {\n  private _parentChangeSubscription = Subscription.EMPTY;\n\n  constructor(\n    @Host() public panel: MatExpansionPanel,\n    private _element: ElementRef,\n    private _focusMonitor: FocusMonitor,\n    private _changeDetectorRef: ChangeDetectorRef) {\n\n    // Since the toggle state depends on an @Input on the panel, we\n    // need to  subscribe and trigger change detection manually.\n    this._parentChangeSubscription = merge(\n      panel.opened,\n      panel.closed,\n      panel._inputChanges.pipe(filter(changes => !!(changes.hideToggle || changes.disabled)))\n    )\n    .subscribe(() => this._changeDetectorRef.markForCheck());\n\n    _focusMonitor.monitor(_element.nativeElement);\n  }\n\n  /** Height of the header while the panel is expanded. */\n  @Input() expandedHeight: string;\n\n  /** Height of the header while the panel is collapsed. */\n  @Input() collapsedHeight: string;\n\n  /** Toggles the expanded state of the panel. */\n  _toggle(): void {\n    this.panel.toggle();\n  }\n\n  /** Gets whether the panel is expanded. */\n  _isExpanded(): boolean {\n    return this.panel.expanded;\n  }\n\n  /** Gets the expanded state string of the panel. */\n  _getExpandedState(): string {\n    return this.panel._getExpandedState();\n  }\n\n  /** Gets the panel id. */\n  _getPanelId(): string {\n    return this.panel.id;\n  }\n\n  /** Gets whether the expand indicator should be shown. */\n  _showToggle(): boolean {\n    return !this.panel.hideToggle && !this.panel.disabled;\n  }\n\n  /** Handle keydown event calling to toggle() if appropriate. */\n  _keydown(event: KeyboardEvent) {\n    switch (event.keyCode) {\n      // Toggle for space and enter keys.\n      case SPACE:\n      case ENTER:\n        event.preventDefault();\n        this._toggle();\n        break;\n      default:\n        return;\n    }\n  }\n\n  ngOnDestroy() {\n    this._parentChangeSubscription.unsubscribe();\n    this._focusMonitor.stopMonitoring(this._element.nativeElement);\n  }\n}\n\n/**\n * `<mat-panel-description>`\n *\n * This directive is to be used inside of the MatExpansionPanelHeader component.\n */\n@Directive({\n  selector: 'mat-panel-description',\n  host : {\n    class: 'mat-expansion-panel-header-description'\n  }\n})\nexport class MatExpansionPanelDescription {}\n\n/**\n * `<mat-panel-title>`\n *\n * This directive is to be used inside of the MatExpansionPanelHeader component.\n */\n@Directive({\n  selector: 'mat-panel-title',\n  host : {\n    class: 'mat-expansion-panel-header-title'\n  }\n})\nexport class MatExpansionPanelTitle {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CdkAccordionModule} from '@angular/cdk/accordion';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatAccordion} from './accordion';\nimport {MatExpansionPanel, MatExpansionPanelActionRow} from './expansion-panel';\nimport {MatExpansionPanelContent} from './expansion-panel-content';\nimport {\n  MatExpansionPanelDescription,\n  MatExpansionPanelHeader,\n  MatExpansionPanelTitle,\n} from './expansion-panel-header';\n\n\n@NgModule({\n  imports: [CommonModule, CdkAccordionModule, PortalModule],\n  exports: [\n    MatAccordion,\n    MatExpansionPanel,\n    MatExpansionPanelActionRow,\n    MatExpansionPanelHeader,\n    MatExpansionPanelTitle,\n    MatExpansionPanelDescription,\n    MatExpansionPanelContent,\n  ],\n  declarations: [\n    MatAccordion,\n    MatExpansionPanel,\n    MatExpansionPanelActionRow,\n    MatExpansionPanelHeader,\n    MatExpansionPanelTitle,\n    MatExpansionPanelDescription,\n    MatExpansionPanelContent,\n  ],\n})\nexport class MatExpansionModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ViewEncapsulation,\n  ElementRef,\n  Input,\n  ContentChildren,\n  QueryList,\n  AfterContentInit,\n  Directive,\n  ChangeDetectionStrategy,\n} from '@angular/core';\nimport {MatLine, MatLineSetter} from '@angular/material/core';\nimport {coerceToNumber} from './grid-list-measure';\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-grid-tile',\n  exportAs: 'matGridTile',\n  host: {\n    'class': 'mat-grid-tile',\n  },\n  templateUrl: 'grid-tile.html',\n  styleUrls: ['grid-list.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatGridTile {\n  _rowspan: number = 1;\n  _colspan: number = 1;\n\n  constructor(private _element: ElementRef) {}\n\n  /** Amount of rows that the grid tile takes up. */\n  @Input()\n  get rowspan(): number { return this._rowspan; }\n  set rowspan(value: number) { this._rowspan = coerceToNumber(value); }\n\n  /** Amount of columns that the grid tile takes up. */\n  @Input()\n  get colspan(): number { return this._colspan; }\n  set colspan(value: number) { this._colspan = coerceToNumber(value); }\n\n  /**\n   * Sets the style of the grid-tile element.  Needs to be set manually to avoid\n   * \"Changed after checked\" errors that would occur with HostBinding.\n   */\n  _setStyle(property: string, value: any): void {\n    this._element.nativeElement.style[property] = value;\n  }\n}\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-grid-tile-header, mat-grid-tile-footer',\n  templateUrl: 'grid-tile-text.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatGridTileText implements AfterContentInit {\n  /**\n   *  Helper that watches the number of lines in a text area and sets\n   * a class on the host element that matches the line count.\n   */\n  _lineSetter: MatLineSetter;\n  @ContentChildren(MatLine) _lines: QueryList<MatLine>;\n\n  constructor(private _element: ElementRef) {}\n\n  ngAfterContentInit() {\n    this._lineSetter = new MatLineSetter(this._lines, this._element);\n  }\n}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-grid-avatar], [matGridAvatar]',\n  host: {'class': 'mat-grid-avatar'}\n})\nexport class MatGridAvatarCssMatStyler {}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-grid-tile-header',\n  host: {'class': 'mat-grid-tile-header'}\n})\nexport class MatGridTileHeaderCssMatStyler {}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-grid-tile-footer',\n  host: {'class': 'mat-grid-tile-footer'}\n})\nexport class MatGridTileFooterCssMatStyler {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {QueryList} from '@angular/core';\nimport {MatGridTile} from './grid-tile';\n\n/**\n * Class for determining, from a list of tiles, the (row, col) position of each of those tiles\n * in the grid. This is necessary (rather than just rendering the tiles in normal document flow)\n * because the tiles can have a rowspan.\n *\n * The positioning algorithm greedily places each tile as soon as it encounters a gap in the grid\n * large enough to accommodate it so that the tiles still render in the same order in which they\n * are given.\n *\n * The basis of the algorithm is the use of an array to track the already placed tiles. Each\n * element of the array corresponds to a column, and the value indicates how many cells in that\n * column are already occupied; zero indicates an empty cell. Moving \"down\" to the next row\n * decrements each value in the tracking array (indicating that the column is one cell closer to\n * being free).\n *\n * @docs-private\n */\nexport class TileCoordinator {\n  /** Tracking array (see class description). */\n  tracker: number[];\n\n  /** Index at which the search for the next gap will start. */\n  columnIndex: number = 0;\n\n  /** The current row index. */\n  rowIndex: number = 0;\n\n  /** Gets the total number of rows occupied by tiles */\n  get rowCount(): number { return this.rowIndex + 1; }\n\n  /**\n   * Gets the total span of rows occupied by tiles.\n   * Ex: A list with 1 row that contains a tile with rowspan 2 will have a total rowspan of 2.\n   */\n  get rowspan() {\n    let lastRowMax = Math.max(...this.tracker);\n    // if any of the tiles has a rowspan that pushes it beyond the total row count,\n    // add the difference to the rowcount\n    return lastRowMax > 1 ? this.rowCount + lastRowMax - 1 : this.rowCount;\n  }\n\n  /** The computed (row, col) position of each tile (the output). */\n  positions: TilePosition[];\n\n  constructor(numColumns: number, tiles: QueryList<MatGridTile>) {\n    this.tracker = new Array(numColumns);\n    this.tracker.fill(0, 0, this.tracker.length);\n\n    this.positions = tiles.map(tile => this._trackTile(tile));\n  }\n\n  /** Calculates the row and col position of a tile. */\n  private _trackTile(tile: MatGridTile): TilePosition {\n    // Find a gap large enough for this tile.\n    let gapStartIndex = this._findMatchingGap(tile.colspan);\n\n    // Place tile in the resulting gap.\n    this._markTilePosition(gapStartIndex, tile);\n\n    // The next time we look for a gap, the search will start at columnIndex, which should be\n    // immediately after the tile that has just been placed.\n    this.columnIndex = gapStartIndex + tile.colspan;\n\n    return new TilePosition(this.rowIndex, gapStartIndex);\n  }\n\n  /** Finds the next available space large enough to fit the tile. */\n  private _findMatchingGap(tileCols: number): number {\n    if (tileCols > this.tracker.length) {\n      throw Error(`mat-grid-list: tile with colspan ${tileCols} is wider than ` +\n                      `grid with cols=\"${this.tracker.length}\".`);\n    }\n\n    // Start index is inclusive, end index is exclusive.\n    let gapStartIndex = -1;\n    let gapEndIndex = -1;\n\n    // Look for a gap large enough to fit the given tile. Empty spaces are marked with a zero.\n    do {\n      // If we've reached the end of the row, go to the next row.\n      if (this.columnIndex + tileCols > this.tracker.length) {\n        this._nextRow();\n        continue;\n      }\n\n      gapStartIndex = this.tracker.indexOf(0, this.columnIndex);\n\n      // If there are no more empty spaces in this row at all, move on to the next row.\n      if (gapStartIndex == -1) {\n        this._nextRow();\n        continue;\n      }\n\n      gapEndIndex = this._findGapEndIndex(gapStartIndex);\n\n      // If a gap large enough isn't found, we want to start looking immediately after the current\n      // gap on the next iteration.\n      this.columnIndex = gapStartIndex + 1;\n\n      // Continue iterating until we find a gap wide enough for this tile.\n    } while (gapEndIndex - gapStartIndex < tileCols);\n\n    // If we still didn't manage to find a gap, ensure that the index is\n    // at least zero so the tile doesn't get pulled out of the grid.\n    return Math.max(gapStartIndex, 0);\n  }\n\n  /** Move \"down\" to the next row. */\n  private _nextRow(): void {\n    this.columnIndex = 0;\n    this.rowIndex++;\n\n    // Decrement all spaces by one to reflect moving down one row.\n    for (let i = 0; i < this.tracker.length; i++) {\n      this.tracker[i] = Math.max(0, this.tracker[i] - 1);\n    }\n  }\n\n  /**\n   * Finds the end index (exclusive) of a gap given the index from which to start looking.\n   * The gap ends when a non-zero value is found.\n   */\n  private _findGapEndIndex(gapStartIndex: number): number {\n    for (let i = gapStartIndex + 1; i < this.tracker.length; i++) {\n      if (this.tracker[i] != 0) {\n        return i;\n      }\n    }\n\n    // The gap ends with the end of the row.\n    return this.tracker.length;\n  }\n\n  /** Update the tile tracker to account for the given tile in the given space. */\n  private _markTilePosition(start: number, tile: MatGridTile): void {\n    for (let i = 0; i < tile.colspan; i++) {\n      this.tracker[start + i] = tile.rowspan;\n    }\n  }\n}\n\n/**\n * Simple data structure for tile position (row, col).\n * @docs-private\n */\nexport class TilePosition {\n  constructor(public row: number, public col: number) {}\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  DOWN_ARROW,\n  END,\n  ENTER,\n  HOME,\n  LEFT_ARROW,\n  PAGE_DOWN,\n  PAGE_UP,\n  RIGHT_ARROW,\n  UP_ARROW,\n} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  EventEmitter,\n  Inject,\n  Input,\n  Optional,\n  Output,\n  ViewEncapsulation,\n  ViewChild,\n} from '@angular/core';\nimport {DateAdapter, MAT_DATE_FORMATS, MatDateFormats} from '@angular/material/core';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {MatCalendarBody, MatCalendarCell} from './calendar-body';\nimport {createMissingDateImplError} from './datepicker-errors';\n\n\nconst DAYS_PER_WEEK = 7;\n\n\n/**\n * An internal component used to display a single month in the datepicker.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-month-view',\n  templateUrl: 'month-view.html',\n  exportAs: 'matMonthView',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class MatMonthView<D> implements AfterContentInit {\n  /**\n   * The date to display in this month view (everything other than the month and year is ignored).\n   */\n  @Input()\n  get activeDate(): D { return this._activeDate; }\n  set activeDate(value: D) {\n    const oldActiveDate = this._activeDate;\n    const validDate =\n        this._getValidDateOrNull(this._dateAdapter.deserialize(value)) || this._dateAdapter.today();\n    this._activeDate = this._dateAdapter.clampDate(validDate, this.minDate, this.maxDate);\n    if (!this._hasSameMonthAndYear(oldActiveDate, this._activeDate)) {\n      this._init();\n    }\n  }\n  private _activeDate: D;\n\n  /** The currently selected date. */\n  @Input()\n  get selected(): D | null { return this._selected; }\n  set selected(value: D | null) {\n    this._selected = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n    this._selectedDate = this._getDateInCurrentMonth(this._selected);\n  }\n  private _selected: D | null;\n\n  /** The minimum selectable date. */\n  @Input()\n  get minDate(): D | null { return this._minDate; }\n  set minDate(value: D | null) {\n    this._minDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _minDate: D | null;\n\n  /** The maximum selectable date. */\n  @Input()\n  get maxDate(): D | null { return this._maxDate; }\n  set maxDate(value: D | null) {\n    this._maxDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _maxDate: D | null;\n\n  /** A function used to filter which dates are selectable. */\n  @Input() dateFilter: (date: D) => boolean;\n\n  /** Emits when a new date is selected. */\n  @Output() readonly selectedChange: EventEmitter<D | null> = new EventEmitter<D | null>();\n\n  /** Emits when any date is selected. */\n  @Output() readonly _userSelection: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Emits when any date is activated. */\n  @Output() readonly activeDateChange: EventEmitter<D> = new EventEmitter<D>();\n\n  /** The body of calendar table */\n  @ViewChild(MatCalendarBody) _matCalendarBody: MatCalendarBody;\n\n  /** The label for this month (e.g. \"January 2017\"). */\n  _monthLabel: string;\n\n  /** Grid of calendar cells representing the dates of the month. */\n  _weeks: MatCalendarCell[][];\n\n  /** The number of blank cells in the first row before the 1st of the month. */\n  _firstWeekOffset: number;\n\n  /**\n   * The date of the month that the currently selected Date falls on.\n   * Null if the currently selected Date is in another month.\n   */\n  _selectedDate: number | null;\n\n  /** The date of the month that today falls on. Null if today is in another month. */\n  _todayDate: number | null;\n\n  /** The names of the weekdays. */\n  _weekdays: {long: string, narrow: string}[];\n\n  constructor(private _changeDetectorRef: ChangeDetectorRef,\n              @Optional() @Inject(MAT_DATE_FORMATS) private _dateFormats: MatDateFormats,\n              @Optional() public _dateAdapter: DateAdapter<D>,\n              @Optional() private _dir?: Directionality) {\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n    if (!this._dateFormats) {\n      throw createMissingDateImplError('MAT_DATE_FORMATS');\n    }\n\n    const firstDayOfWeek = this._dateAdapter.getFirstDayOfWeek();\n    const narrowWeekdays = this._dateAdapter.getDayOfWeekNames('narrow');\n    const longWeekdays = this._dateAdapter.getDayOfWeekNames('long');\n\n    // Rotate the labels for days of the week based on the configured first day of the week.\n    let weekdays = longWeekdays.map((long, i) => {\n      return {long, narrow: narrowWeekdays[i]};\n    });\n    this._weekdays = weekdays.slice(firstDayOfWeek).concat(weekdays.slice(0, firstDayOfWeek));\n\n    this._activeDate = this._dateAdapter.today();\n  }\n\n  ngAfterContentInit() {\n    this._init();\n  }\n\n  /** Handles when a new date is selected. */\n  _dateSelected(date: number) {\n    if (this._selectedDate != date) {\n      const selectedYear = this._dateAdapter.getYear(this.activeDate);\n      const selectedMonth = this._dateAdapter.getMonth(this.activeDate);\n      const selectedDate = this._dateAdapter.createDate(selectedYear, selectedMonth, date);\n\n      this.selectedChange.emit(selectedDate);\n    }\n\n    this._userSelection.emit();\n  }\n\n  /** Handles keydown events on the calendar body when calendar is in month view. */\n  _handleCalendarBodyKeydown(event: KeyboardEvent): void {\n    // TODO(mmalerba): We currently allow keyboard navigation to disabled dates, but just prevent\n    // disabled ones from being selected. This may not be ideal, we should look into whether\n    // navigation should skip over disabled dates, and if so, how to implement that efficiently.\n\n    const oldActiveDate = this._activeDate;\n    const isRtl = this._isRtl();\n\n    switch (event.keyCode) {\n      case LEFT_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate, isRtl ? 1 : -1);\n        break;\n      case RIGHT_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate, isRtl ? -1 : 1);\n        break;\n      case UP_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate, -7);\n        break;\n      case DOWN_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate, 7);\n        break;\n      case HOME:\n        this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate,\n            1 - this._dateAdapter.getDate(this._activeDate));\n        break;\n      case END:\n        this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate,\n            (this._dateAdapter.getNumDaysInMonth(this._activeDate) -\n              this._dateAdapter.getDate(this._activeDate)));\n        break;\n      case PAGE_UP:\n        this.activeDate = event.altKey ?\n            this._dateAdapter.addCalendarYears(this._activeDate, -1) :\n            this._dateAdapter.addCalendarMonths(this._activeDate, -1);\n        break;\n      case PAGE_DOWN:\n        this.activeDate = event.altKey ?\n            this._dateAdapter.addCalendarYears(this._activeDate, 1) :\n            this._dateAdapter.addCalendarMonths(this._activeDate, 1);\n        break;\n      case ENTER:\n        if (!this.dateFilter || this.dateFilter(this._activeDate)) {\n          this._dateSelected(this._dateAdapter.getDate(this._activeDate));\n          this._userSelection.emit();\n          // Prevent unexpected default actions such as form submission.\n          event.preventDefault();\n        }\n        return;\n      default:\n        // Don't prevent default or focus active cell on keys that we don't explicitly handle.\n        return;\n    }\n\n    if (this._dateAdapter.compareDate(oldActiveDate, this.activeDate)) {\n      this.activeDateChange.emit(this.activeDate);\n    }\n\n    this._focusActiveCell();\n    // Prevent unexpected default actions such as form submission.\n    event.preventDefault();\n  }\n\n  /** Initializes this month view. */\n  _init() {\n    this._selectedDate = this._getDateInCurrentMonth(this.selected);\n    this._todayDate = this._getDateInCurrentMonth(this._dateAdapter.today());\n    this._monthLabel =\n        this._dateAdapter.getMonthNames('short')[this._dateAdapter.getMonth(this.activeDate)]\n            .toLocaleUpperCase();\n\n    let firstOfMonth = this._dateAdapter.createDate(this._dateAdapter.getYear(this.activeDate),\n        this._dateAdapter.getMonth(this.activeDate), 1);\n    this._firstWeekOffset =\n        (DAYS_PER_WEEK + this._dateAdapter.getDayOfWeek(firstOfMonth) -\n         this._dateAdapter.getFirstDayOfWeek()) % DAYS_PER_WEEK;\n\n    this._createWeekCells();\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Focuses the active cell after the microtask queue is empty. */\n  _focusActiveCell() {\n    this._matCalendarBody._focusActiveCell();\n  }\n\n  /** Creates MatCalendarCells for the dates in this month. */\n  private _createWeekCells() {\n    const daysInMonth = this._dateAdapter.getNumDaysInMonth(this.activeDate);\n    const dateNames = this._dateAdapter.getDateNames();\n    this._weeks = [[]];\n    for (let i = 0, cell = this._firstWeekOffset; i < daysInMonth; i++, cell++) {\n      if (cell == DAYS_PER_WEEK) {\n        this._weeks.push([]);\n        cell = 0;\n      }\n      const date = this._dateAdapter.createDate(\n            this._dateAdapter.getYear(this.activeDate),\n            this._dateAdapter.getMonth(this.activeDate), i + 1);\n      const enabled = this._shouldEnableDate(date);\n      const ariaLabel = this._dateAdapter.format(date, this._dateFormats.display.dateA11yLabel);\n      this._weeks[this._weeks.length - 1]\n          .push(new MatCalendarCell(i + 1, dateNames[i], ariaLabel, enabled));\n    }\n  }\n\n  /** Date filter for the month */\n  private _shouldEnableDate(date: D): boolean {\n    return !!date &&\n        (!this.dateFilter || this.dateFilter(date)) &&\n        (!this.minDate || this._dateAdapter.compareDate(date, this.minDate) >= 0) &&\n        (!this.maxDate || this._dateAdapter.compareDate(date, this.maxDate) <= 0);\n  }\n\n  /**\n   * Gets the date in this month that the given Date falls on.\n   * Returns null if the given Date is in another month.\n   */\n  private _getDateInCurrentMonth(date: D | null): number | null {\n    return date && this._hasSameMonthAndYear(date, this.activeDate) ?\n        this._dateAdapter.getDate(date) : null;\n  }\n\n  /** Checks whether the 2 dates are non-null and fall within the same month of the same year. */\n  private _hasSameMonthAndYear(d1: D | null, d2: D | null): boolean {\n    return !!(d1 && d2 && this._dateAdapter.getMonth(d1) == this._dateAdapter.getMonth(d2) &&\n              this._dateAdapter.getYear(d1) == this._dateAdapter.getYear(d2));\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n\n  /** Determines whether the user has the RTL layout direction. */\n  private _isRtl() {\n    return this._dir && this._dir.value === 'rtl';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  DOWN_ARROW,\n  END,\n  ENTER,\n  HOME,\n  LEFT_ARROW,\n  PAGE_DOWN,\n  PAGE_UP,\n  RIGHT_ARROW,\n  UP_ARROW,\n} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  EventEmitter,\n  Input,\n  Optional,\n  Output,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {DateAdapter} from '@angular/material/core';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {MatCalendarBody, MatCalendarCell} from './calendar-body';\nimport {createMissingDateImplError} from './datepicker-errors';\n\nexport const yearsPerPage = 24;\n\nexport const yearsPerRow = 4;\n\n\n/**\n * An internal component used to display a year selector in the datepicker.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-multi-year-view',\n  templateUrl: 'multi-year-view.html',\n  exportAs: 'matMultiYearView',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class MatMultiYearView<D> implements AfterContentInit {\n  /** The date to display in this multi-year view (everything other than the year is ignored). */\n  @Input()\n  get activeDate(): D { return this._activeDate; }\n  set activeDate(value: D) {\n    let oldActiveDate = this._activeDate;\n    const validDate =\n        this._getValidDateOrNull(this._dateAdapter.deserialize(value)) || this._dateAdapter.today();\n    this._activeDate = this._dateAdapter.clampDate(validDate, this.minDate, this.maxDate);\n    if (Math.floor(this._dateAdapter.getYear(oldActiveDate) / yearsPerPage) !=\n        Math.floor(this._dateAdapter.getYear(this._activeDate) / yearsPerPage)) {\n      this._init();\n    }\n  }\n  private _activeDate: D;\n\n  /** The currently selected date. */\n  @Input()\n  get selected(): D | null { return this._selected; }\n  set selected(value: D | null) {\n    this._selected = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n    this._selectedYear = this._selected && this._dateAdapter.getYear(this._selected);\n  }\n  private _selected: D | null;\n\n  /** The minimum selectable date. */\n  @Input()\n  get minDate(): D | null { return this._minDate; }\n  set minDate(value: D | null) {\n    this._minDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _minDate: D | null;\n\n  /** The maximum selectable date. */\n  @Input()\n  get maxDate(): D | null { return this._maxDate; }\n  set maxDate(value: D | null) {\n    this._maxDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _maxDate: D | null;\n\n  /** A function used to filter which dates are selectable. */\n  @Input() dateFilter: (date: D) => boolean;\n\n  /** Emits when a new year is selected. */\n  @Output() readonly selectedChange: EventEmitter<D> = new EventEmitter<D>();\n\n  /** Emits the selected year. This doesn't imply a change on the selected date */\n  @Output() readonly yearSelected: EventEmitter<D> = new EventEmitter<D>();\n\n  /** Emits when any date is activated. */\n  @Output() readonly activeDateChange: EventEmitter<D> = new EventEmitter<D>();\n\n  /** The body of calendar table */\n  @ViewChild(MatCalendarBody) _matCalendarBody: MatCalendarBody;\n\n  /** Grid of calendar cells representing the currently displayed years. */\n  _years: MatCalendarCell[][];\n\n  /** The year that today falls on. */\n  _todayYear: number;\n\n  /** The year of the selected date. Null if the selected date is null. */\n  _selectedYear: number | null;\n\n  constructor(private _changeDetectorRef: ChangeDetectorRef,\n              @Optional() public _dateAdapter: DateAdapter<D>,\n              @Optional() private _dir?: Directionality) {\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n\n    this._activeDate = this._dateAdapter.today();\n  }\n\n  ngAfterContentInit() {\n    this._init();\n  }\n\n  /** Initializes this multi-year view. */\n  _init() {\n    this._todayYear = this._dateAdapter.getYear(this._dateAdapter.today());\n    let activeYear = this._dateAdapter.getYear(this._activeDate);\n    let activeOffset = activeYear % yearsPerPage;\n    this._years = [];\n    for (let i = 0, row: number[] = []; i < yearsPerPage; i++) {\n      row.push(activeYear - activeOffset + i);\n      if (row.length == yearsPerRow) {\n        this._years.push(row.map(year => this._createCellForYear(year)));\n        row = [];\n      }\n    }\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Handles when a new year is selected. */\n  _yearSelected(year: number) {\n    this.yearSelected.emit(this._dateAdapter.createDate(year, 0, 1));\n    let month = this._dateAdapter.getMonth(this.activeDate);\n    let daysInMonth =\n        this._dateAdapter.getNumDaysInMonth(this._dateAdapter.createDate(year, month, 1));\n    this.selectedChange.emit(this._dateAdapter.createDate(year, month,\n        Math.min(this._dateAdapter.getDate(this.activeDate), daysInMonth)));\n  }\n\n  /** Handles keydown events on the calendar body when calendar is in multi-year view. */\n  _handleCalendarBodyKeydown(event: KeyboardEvent): void {\n    // TODO(mmalerba): We currently allow keyboard navigation to disabled dates, but just prevent\n    // disabled ones from being selected. This may not be ideal, we should look into whether\n    // navigation should skip over disabled dates, and if so, how to implement that efficiently.\n\n    const oldActiveDate = this._activeDate;\n    const isRtl = this._isRtl();\n\n    switch (event.keyCode) {\n      case LEFT_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate, isRtl ? 1 : -1);\n        break;\n      case RIGHT_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate, isRtl ? -1 : 1);\n        break;\n      case UP_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate, -yearsPerRow);\n        break;\n      case DOWN_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate, yearsPerRow);\n        break;\n      case HOME:\n        this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate,\n            -this._dateAdapter.getYear(this._activeDate) % yearsPerPage);\n        break;\n      case END:\n        this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate,\n            yearsPerPage - this._dateAdapter.getYear(this._activeDate) % yearsPerPage - 1);\n        break;\n      case PAGE_UP:\n        this.activeDate =\n            this._dateAdapter.addCalendarYears(\n                this._activeDate, event.altKey ? -yearsPerPage * 10 : -yearsPerPage);\n        break;\n      case PAGE_DOWN:\n        this.activeDate =\n            this._dateAdapter.addCalendarYears(\n                this._activeDate, event.altKey ? yearsPerPage * 10 : yearsPerPage);\n        break;\n      case ENTER:\n        this._yearSelected(this._dateAdapter.getYear(this._activeDate));\n        break;\n      default:\n        // Don't prevent default or focus active cell on keys that we don't explicitly handle.\n        return;\n    }\n\n    if (this._dateAdapter.compareDate(oldActiveDate, this.activeDate)) {\n      this.activeDateChange.emit(this.activeDate);\n    }\n\n    this._focusActiveCell();\n    // Prevent unexpected default actions such as form submission.\n    event.preventDefault();\n  }\n\n  _getActiveCell(): number {\n    return this._dateAdapter.getYear(this.activeDate) % yearsPerPage;\n  }\n\n  /** Focuses the active cell after the microtask queue is empty. */\n  _focusActiveCell() {\n    this._matCalendarBody._focusActiveCell();\n  }\n\n  /** Creates an MatCalendarCell for the given year. */\n  private _createCellForYear(year: number) {\n    let yearName = this._dateAdapter.getYearName(this._dateAdapter.createDate(year, 0, 1));\n    return new MatCalendarCell(year, yearName, yearName, this._shouldEnableYear(year));\n  }\n\n  /** Whether the given year is enabled. */\n  private _shouldEnableYear(year: number) {\n    // disable if the year is greater than maxDate lower than minDate\n    if (year === undefined || year === null ||\n        (this.maxDate && year > this._dateAdapter.getYear(this.maxDate)) ||\n        (this.minDate && year < this._dateAdapter.getYear(this.minDate))) {\n      return false;\n    }\n\n    // enable if it reaches here and there's no filter defined\n    if (!this.dateFilter) {\n      return true;\n    }\n\n    const firstOfYear = this._dateAdapter.createDate(year, 0, 1);\n\n    // If any date in the year is enabled count the year as enabled.\n    for (let date = firstOfYear; this._dateAdapter.getYear(date) == year;\n      date = this._dateAdapter.addCalendarDays(date, 1)) {\n      if (this.dateFilter(date)) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n\n  /** Determines whether the user has the RTL layout direction. */\n  private _isRtl() {\n    return this._dir && this._dir.value === 'rtl';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  DOWN_ARROW,\n  END,\n  ENTER,\n  HOME,\n  LEFT_ARROW,\n  PAGE_DOWN,\n  PAGE_UP,\n  RIGHT_ARROW,\n  UP_ARROW,\n} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  EventEmitter,\n  Inject,\n  Input,\n  Optional,\n  Output,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {DateAdapter, MAT_DATE_FORMATS, MatDateFormats} from '@angular/material/core';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {MatCalendarBody, MatCalendarCell} from './calendar-body';\nimport {createMissingDateImplError} from './datepicker-errors';\n\n/**\n * An internal component used to display a single year in the datepicker.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-year-view',\n  templateUrl: 'year-view.html',\n  exportAs: 'matYearView',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class MatYearView<D> implements AfterContentInit {\n  /** The date to display in this year view (everything other than the year is ignored). */\n  @Input()\n  get activeDate(): D { return this._activeDate; }\n  set activeDate(value: D) {\n    let oldActiveDate = this._activeDate;\n    const validDate =\n        this._getValidDateOrNull(this._dateAdapter.deserialize(value)) || this._dateAdapter.today();\n    this._activeDate = this._dateAdapter.clampDate(validDate, this.minDate, this.maxDate);\n    if (this._dateAdapter.getYear(oldActiveDate) !== this._dateAdapter.getYear(this._activeDate)) {\n      this._init();\n    }\n  }\n  private _activeDate: D;\n\n  /** The currently selected date. */\n  @Input()\n  get selected(): D | null { return this._selected; }\n  set selected(value: D | null) {\n    this._selected = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n    this._selectedMonth = this._getMonthInCurrentYear(this._selected);\n  }\n  private _selected: D | null;\n\n  /** The minimum selectable date. */\n  @Input()\n  get minDate(): D | null { return this._minDate; }\n  set minDate(value: D | null) {\n    this._minDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _minDate: D | null;\n\n  /** The maximum selectable date. */\n  @Input()\n  get maxDate(): D | null { return this._maxDate; }\n  set maxDate(value: D | null) {\n    this._maxDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _maxDate: D | null;\n\n  /** A function used to filter which dates are selectable. */\n  @Input() dateFilter: (date: D) => boolean;\n\n  /** Emits when a new month is selected. */\n  @Output() readonly selectedChange: EventEmitter<D> = new EventEmitter<D>();\n\n  /** Emits the selected month. This doesn't imply a change on the selected date */\n  @Output() readonly monthSelected: EventEmitter<D> = new EventEmitter<D>();\n\n  /** Emits when any date is activated. */\n  @Output() readonly activeDateChange: EventEmitter<D> = new EventEmitter<D>();\n\n  /** The body of calendar table */\n  @ViewChild(MatCalendarBody) _matCalendarBody: MatCalendarBody;\n\n  /** Grid of calendar cells representing the months of the year. */\n  _months: MatCalendarCell[][];\n\n  /** The label for this year (e.g. \"2017\"). */\n  _yearLabel: string;\n\n  /** The month in this year that today falls on. Null if today is in a different year. */\n  _todayMonth: number | null;\n\n  /**\n   * The month in this year that the selected Date falls on.\n   * Null if the selected Date is in a different year.\n   */\n  _selectedMonth: number | null;\n\n  constructor(private _changeDetectorRef: ChangeDetectorRef,\n              @Optional() @Inject(MAT_DATE_FORMATS) private _dateFormats: MatDateFormats,\n              @Optional() public _dateAdapter: DateAdapter<D>,\n              @Optional() private _dir?: Directionality) {\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n    if (!this._dateFormats) {\n      throw createMissingDateImplError('MAT_DATE_FORMATS');\n    }\n\n    this._activeDate = this._dateAdapter.today();\n  }\n\n  ngAfterContentInit() {\n    this._init();\n  }\n\n  /** Handles when a new month is selected. */\n  _monthSelected(month: number) {\n    const normalizedDate =\n          this._dateAdapter.createDate(this._dateAdapter.getYear(this.activeDate), month, 1);\n\n    this.monthSelected.emit(normalizedDate);\n\n    const daysInMonth = this._dateAdapter.getNumDaysInMonth(normalizedDate);\n\n    this.selectedChange.emit(this._dateAdapter.createDate(\n        this._dateAdapter.getYear(this.activeDate), month,\n        Math.min(this._dateAdapter.getDate(this.activeDate), daysInMonth)));\n  }\n\n  /** Handles keydown events on the calendar body when calendar is in year view. */\n  _handleCalendarBodyKeydown(event: KeyboardEvent): void {\n    // TODO(mmalerba): We currently allow keyboard navigation to disabled dates, but just prevent\n    // disabled ones from being selected. This may not be ideal, we should look into whether\n    // navigation should skip over disabled dates, and if so, how to implement that efficiently.\n\n    const oldActiveDate = this._activeDate;\n    const isRtl = this._isRtl();\n\n    switch (event.keyCode) {\n      case LEFT_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate, isRtl ? 1 : -1);\n        break;\n      case RIGHT_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate, isRtl ? -1 : 1);\n        break;\n      case UP_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate, -4);\n        break;\n      case DOWN_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate, 4);\n        break;\n      case HOME:\n        this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate,\n            -this._dateAdapter.getMonth(this._activeDate));\n        break;\n      case END:\n        this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate,\n            11 - this._dateAdapter.getMonth(this._activeDate));\n        break;\n      case PAGE_UP:\n        this.activeDate =\n            this._dateAdapter.addCalendarYears(this._activeDate, event.altKey ? -10 : -1);\n        break;\n      case PAGE_DOWN:\n        this.activeDate =\n            this._dateAdapter.addCalendarYears(this._activeDate, event.altKey ? 10 : 1);\n        break;\n      case ENTER:\n        this._monthSelected(this._dateAdapter.getMonth(this._activeDate));\n        break;\n      default:\n        // Don't prevent default or focus active cell on keys that we don't explicitly handle.\n        return;\n    }\n\n    if (this._dateAdapter.compareDate(oldActiveDate, this.activeDate)) {\n      this.activeDateChange.emit(this.activeDate);\n    }\n\n    this._focusActiveCell();\n    // Prevent unexpected default actions such as form submission.\n    event.preventDefault();\n  }\n\n  /** Initializes this year view. */\n  _init() {\n    this._selectedMonth = this._getMonthInCurrentYear(this.selected);\n    this._todayMonth = this._getMonthInCurrentYear(this._dateAdapter.today());\n    this._yearLabel = this._dateAdapter.getYearName(this.activeDate);\n\n    let monthNames = this._dateAdapter.getMonthNames('short');\n    // First row of months only contains 5 elements so we can fit the year label on the same row.\n    this._months = [[0, 1, 2, 3], [4, 5, 6, 7], [8, 9, 10, 11]].map(row => row.map(\n        month => this._createCellForMonth(month, monthNames[month])));\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Focuses the active cell after the microtask queue is empty. */\n  _focusActiveCell() {\n    this._matCalendarBody._focusActiveCell();\n  }\n\n  /**\n   * Gets the month in this year that the given Date falls on.\n   * Returns null if the given Date is in another year.\n   */\n  private _getMonthInCurrentYear(date: D | null) {\n    return date && this._dateAdapter.getYear(date) == this._dateAdapter.getYear(this.activeDate) ?\n        this._dateAdapter.getMonth(date) : null;\n  }\n\n  /** Creates an MatCalendarCell for the given month. */\n  private _createCellForMonth(month: number, monthName: string) {\n    let ariaLabel = this._dateAdapter.format(\n        this._dateAdapter.createDate(this._dateAdapter.getYear(this.activeDate), month, 1),\n        this._dateFormats.display.monthYearA11yLabel);\n    return new MatCalendarCell(\n        month, monthName.toLocaleUpperCase(), ariaLabel, this._shouldEnableMonth(month));\n  }\n\n  /** Whether the given month is enabled. */\n  private _shouldEnableMonth(month: number) {\n\n    const activeYear = this._dateAdapter.getYear(this.activeDate);\n\n    if (month === undefined || month === null ||\n        this._isYearAndMonthAfterMaxDate(activeYear, month) ||\n        this._isYearAndMonthBeforeMinDate(activeYear, month)) {\n      return false;\n    }\n\n    if (!this.dateFilter) {\n      return true;\n    }\n\n    const firstOfMonth = this._dateAdapter.createDate(activeYear, month, 1);\n\n    // If any date in the month is enabled count the month as enabled.\n    for (let date = firstOfMonth; this._dateAdapter.getMonth(date) == month;\n         date = this._dateAdapter.addCalendarDays(date, 1)) {\n      if (this.dateFilter(date)) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  /**\n   * Tests whether the combination month/year is after this.maxDate, considering\n   * just the month and year of this.maxDate\n   */\n  private _isYearAndMonthAfterMaxDate(year: number, month: number) {\n    if (this.maxDate) {\n      const maxYear = this._dateAdapter.getYear(this.maxDate);\n      const maxMonth = this._dateAdapter.getMonth(this.maxDate);\n\n      return year > maxYear || (year === maxYear && month > maxMonth);\n    }\n\n    return false;\n  }\n\n  /**\n   * Tests whether the combination month/year is before this.minDate, considering\n   * just the month and year of this.minDate\n   */\n  private _isYearAndMonthBeforeMinDate(year: number, month: number) {\n    if (this.minDate) {\n      const minYear = this._dateAdapter.getYear(this.minDate);\n      const minMonth = this._dateAdapter.getMonth(this.minDate);\n\n      return year < minYear || (year === minYear && month < minMonth);\n    }\n\n    return false;\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n\n  /** Determines whether the user has the RTL layout direction. */\n  private _isRtl() {\n    return this._dir && this._dir.value === 'rtl';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ComponentPortal, ComponentType, Portal} from '@angular/cdk/portal';\nimport {\n  AfterContentInit,\n  AfterViewChecked,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  OnChanges,\n  OnDestroy,\n  Optional,\n  Output,\n  SimpleChanges,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {DateAdapter, MAT_DATE_FORMATS, MatDateFormats} from '@angular/material/core';\nimport {Subject, Subscription} from 'rxjs';\nimport {createMissingDateImplError} from './datepicker-errors';\nimport {MatDatepickerIntl} from './datepicker-intl';\nimport {MatMonthView} from './month-view';\nimport {MatMultiYearView, yearsPerPage} from './multi-year-view';\nimport {MatYearView} from './year-view';\n\n/**\n * Possible views for the calendar.\n * @docs-private\n */\nexport type MatCalendarView = 'month' | 'year' | 'multi-year';\n\n/** Default header for MatCalendar */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-calendar-header',\n  templateUrl: 'calendar-header.html',\n  exportAs: 'matCalendarHeader',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatCalendarHeader<D> {\n  constructor(private _intl: MatDatepickerIntl,\n              @Inject(forwardRef(() => MatCalendar)) public calendar: MatCalendar<D>,\n              @Optional() private _dateAdapter: DateAdapter<D>,\n              @Optional() @Inject(MAT_DATE_FORMATS) private _dateFormats: MatDateFormats,\n              changeDetectorRef: ChangeDetectorRef) {\n\n    this.calendar.stateChanges.subscribe(() => changeDetectorRef.markForCheck());\n  }\n\n  /** The label for the current calendar view. */\n  get periodButtonText(): string {\n    if (this.calendar.currentView == 'month') {\n      return this._dateAdapter\n          .format(this.calendar.activeDate, this._dateFormats.display.monthYearLabel)\n              .toLocaleUpperCase();\n    }\n    if (this.calendar.currentView == 'year') {\n      return this._dateAdapter.getYearName(this.calendar.activeDate);\n    }\n    const activeYear = this._dateAdapter.getYear(this.calendar.activeDate);\n    const firstYearInView = this._dateAdapter.getYearName(\n        this._dateAdapter.createDate(activeYear - activeYear % 24, 0, 1));\n    const lastYearInView = this._dateAdapter.getYearName(\n        this._dateAdapter.createDate(activeYear + yearsPerPage - 1 - activeYear % 24, 0, 1));\n    return `${firstYearInView} \\u2013 ${lastYearInView}`;\n  }\n\n  get periodButtonLabel(): string {\n    return this.calendar.currentView == 'month' ?\n        this._intl.switchToMultiYearViewLabel : this._intl.switchToMonthViewLabel;\n  }\n\n  /** The label for the the previous button. */\n  get prevButtonLabel(): string {\n    return {\n      'month': this._intl.prevMonthLabel,\n      'year': this._intl.prevYearLabel,\n      'multi-year': this._intl.prevMultiYearLabel\n    }[this.calendar.currentView];\n  }\n\n  /** The label for the the next button. */\n  get nextButtonLabel(): string {\n    return {\n      'month': this._intl.nextMonthLabel,\n      'year': this._intl.nextYearLabel,\n      'multi-year': this._intl.nextMultiYearLabel\n    }[this.calendar.currentView];\n  }\n\n  /** Handles user clicks on the period label. */\n  currentPeriodClicked(): void {\n    this.calendar.currentView = this.calendar.currentView == 'month' ? 'multi-year' : 'month';\n  }\n\n  /** Handles user clicks on the previous button. */\n  previousClicked(): void {\n    this.calendar.activeDate = this.calendar.currentView == 'month' ?\n        this._dateAdapter.addCalendarMonths(this.calendar.activeDate, -1) :\n            this._dateAdapter.addCalendarYears(\n                this.calendar.activeDate, this.calendar.currentView == 'year' ? -1 : -yearsPerPage\n            );\n  }\n\n  /** Handles user clicks on the next button. */\n  nextClicked(): void {\n    this.calendar.activeDate = this.calendar.currentView == 'month' ?\n        this._dateAdapter.addCalendarMonths(this.calendar.activeDate, 1) :\n            this._dateAdapter.addCalendarYears(\n                this.calendar.activeDate,\n                    this.calendar.currentView == 'year' ? 1 : yearsPerPage\n            );\n  }\n\n  /** Whether the previous period button is enabled. */\n  previousEnabled(): boolean {\n    if (!this.calendar.minDate) {\n      return true;\n    }\n    return !this.calendar.minDate ||\n        !this._isSameView(this.calendar.activeDate, this.calendar.minDate);\n  }\n\n  /** Whether the next period button is enabled. */\n  nextEnabled(): boolean {\n    return !this.calendar.maxDate ||\n        !this._isSameView(this.calendar.activeDate, this.calendar.maxDate);\n  }\n\n  /** Whether the two dates represent the same view in the current view mode (month or year). */\n  private _isSameView(date1: D, date2: D): boolean {\n    if (this.calendar.currentView == 'month') {\n      return this._dateAdapter.getYear(date1) == this._dateAdapter.getYear(date2) &&\n          this._dateAdapter.getMonth(date1) == this._dateAdapter.getMonth(date2);\n    }\n    if (this.calendar.currentView == 'year') {\n      return this._dateAdapter.getYear(date1) == this._dateAdapter.getYear(date2);\n    }\n    // Otherwise we are in 'multi-year' view.\n    return Math.floor(this._dateAdapter.getYear(date1) / yearsPerPage) ==\n        Math.floor(this._dateAdapter.getYear(date2) / yearsPerPage);\n  }\n}\n\n/**\n * A calendar that is used as part of the datepicker.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-calendar',\n  templateUrl: 'calendar.html',\n  styleUrls: ['calendar.css'],\n  host: {\n    'class': 'mat-calendar',\n  },\n  exportAs: 'matCalendar',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatCalendar<D> implements AfterContentInit, AfterViewChecked, OnDestroy, OnChanges {\n  /** An input indicating the type of the header component, if set. */\n  @Input() headerComponent: ComponentType<any>;\n\n  /** A portal containing the header component type for this calendar. */\n  _calendarHeaderPortal: Portal<any>;\n\n  private _intlChanges: Subscription;\n\n  /**\n   * Used for scheduling that focus should be moved to the active cell on the next tick.\n   * We need to schedule it, rather than do it immediately, because we have to wait\n   * for Angular to re-evaluate the view children.\n   */\n  private _moveFocusOnNextTick = false;\n\n  /** A date representing the period (month or year) to start the calendar in. */\n  @Input()\n  get startAt(): D | null { return this._startAt; }\n  set startAt(value: D | null) {\n    this._startAt = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _startAt: D | null;\n\n  /** Whether the calendar should be started in month or year view. */\n  @Input() startView: MatCalendarView = 'month';\n\n  /** The currently selected date. */\n  @Input()\n  get selected(): D | null { return this._selected; }\n  set selected(value: D | null) {\n    this._selected = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _selected: D | null;\n\n  /** The minimum selectable date. */\n  @Input()\n  get minDate(): D | null { return this._minDate; }\n  set minDate(value: D | null) {\n    this._minDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _minDate: D | null;\n\n  /** The maximum selectable date. */\n  @Input()\n  get maxDate(): D | null { return this._maxDate; }\n  set maxDate(value: D | null) {\n    this._maxDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _maxDate: D | null;\n\n  /** A function used to filter which dates are selectable. */\n  @Input() dateFilter: (date: D) => boolean;\n\n  /** Emits when the currently selected date changes. */\n  @Output() readonly selectedChange: EventEmitter<D> = new EventEmitter<D>();\n\n  /**\n   * Emits the year chosen in multiyear view.\n   * This doesn't imply a change on the selected date.\n   */\n  @Output() readonly yearSelected: EventEmitter<D> = new EventEmitter<D>();\n\n  /**\n   * Emits the month chosen in year view.\n   * This doesn't imply a change on the selected date.\n   */\n  @Output() readonly monthSelected: EventEmitter<D> = new EventEmitter<D>();\n\n  /** Emits when any date is selected. */\n  @Output() readonly _userSelection: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Reference to the current month view component. */\n  @ViewChild(MatMonthView) monthView: MatMonthView<D>;\n\n  /** Reference to the current year view component. */\n  @ViewChild(MatYearView) yearView: MatYearView<D>;\n\n  /** Reference to the current multi-year view component. */\n  @ViewChild(MatMultiYearView) multiYearView: MatMultiYearView<D>;\n\n  /**\n   * The current active date. This determines which time period is shown and which date is\n   * highlighted when using keyboard navigation.\n   */\n  get activeDate(): D { return this._clampedActiveDate; }\n  set activeDate(value: D) {\n    this._clampedActiveDate = this._dateAdapter.clampDate(value, this.minDate, this.maxDate);\n    this.stateChanges.next();\n  }\n  private _clampedActiveDate: D;\n\n  /** Whether the calendar is in month view. */\n  get currentView(): MatCalendarView { return this._currentView; }\n  set currentView(value: MatCalendarView) {\n    this._currentView = value;\n    this._moveFocusOnNextTick = true;\n  }\n  private _currentView: MatCalendarView;\n\n  /**\n   * Emits whenever there is a state change that the header may need to respond to.\n   */\n  stateChanges = new Subject<void>();\n\n  constructor(_intl: MatDatepickerIntl,\n              @Optional() private _dateAdapter: DateAdapter<D>,\n              @Optional() @Inject(MAT_DATE_FORMATS) private _dateFormats: MatDateFormats,\n              changeDetectorRef: ChangeDetectorRef) {\n\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n\n    if (!this._dateFormats) {\n      throw createMissingDateImplError('MAT_DATE_FORMATS');\n    }\n\n    this._intlChanges = _intl.changes.subscribe(() => {\n      changeDetectorRef.markForCheck();\n      this.stateChanges.next();\n    });\n  }\n\n  ngAfterContentInit() {\n    this._calendarHeaderPortal = new ComponentPortal(this.headerComponent || MatCalendarHeader);\n    this.activeDate = this.startAt || this._dateAdapter.today();\n\n    // Assign to the private property since we don't want to move focus on init.\n    this._currentView = this.startView;\n  }\n\n  ngAfterViewChecked() {\n    if (this._moveFocusOnNextTick) {\n      this._moveFocusOnNextTick = false;\n      this.focusActiveCell();\n    }\n  }\n\n  ngOnDestroy() {\n    this._intlChanges.unsubscribe();\n    this.stateChanges.complete();\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    const change = changes.minDate || changes.maxDate || changes.dateFilter;\n\n    if (change && !change.firstChange) {\n      const view = this._getCurrentViewComponent();\n\n      if (view) {\n        view._init();\n      }\n    }\n\n    this.stateChanges.next();\n  }\n\n  focusActiveCell() {\n    this._getCurrentViewComponent()._focusActiveCell();\n  }\n\n  /** Handles date selection in the month view. */\n  _dateSelected(date: D): void {\n    if (!this._dateAdapter.sameDate(date, this.selected)) {\n      this.selectedChange.emit(date);\n    }\n  }\n\n  /** Handles year selection in the multiyear view. */\n  _yearSelectedInMultiYearView(normalizedYear: D) {\n    this.yearSelected.emit(normalizedYear);\n  }\n\n  /** Handles month selection in the year view. */\n  _monthSelectedInYearView(normalizedMonth: D) {\n    this.monthSelected.emit(normalizedMonth);\n  }\n\n  _userSelected(): void {\n    this._userSelection.emit();\n  }\n\n  /** Handles year/month selection in the multi-year/year views. */\n  _goToDateInView(date: D, view: 'month' | 'year' | 'multi-year'): void {\n    this.activeDate = date;\n    this.currentView = view;\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n\n  /** Returns the component instance that corresponds to the current calendar view. */\n  private _getCurrentViewComponent() {\n    return this.monthView || this.yearView || this.multiYearView;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n  group,\n  query,\n  animateChild,\n} from '@angular/animations';\n\n/** Animations used by the Material datepicker. */\nexport const matDatepickerAnimations: {\n  readonly transformPanel: AnimationTriggerMetadata;\n  readonly fadeInCalendar: AnimationTriggerMetadata;\n} = {\n  /** Transforms the height of the datepicker's calendar. */\n  transformPanel: trigger('transformPanel', [\n    state('void', style({opacity: 0, transform: 'scale(1, 0)'})),\n    state('enter', style({opacity: 1, transform: 'scale(1, 1)'})),\n    transition('void => enter', group([\n      query('@fadeInCalendar', animateChild()),\n      animate('400ms cubic-bezier(0.25, 0.8, 0.25, 1)')\n    ])),\n    transition('* => void', animate('100ms linear', style({opacity: 0})))\n  ]),\n\n  /** Fades in the content of the calendar. */\n  fadeInCalendar: trigger('fadeInCalendar', [\n    state('void', style({opacity: 0})),\n    state('enter', style({opacity: 1})),\n    transition('void => *', animate('400ms 100ms cubic-bezier(0.55, 0, 0.55, 0.2)'))\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusKeyManager} from '@angular/cdk/a11y';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {SelectionModel} from '@angular/cdk/collections';\nimport {BACKSPACE} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  DoCheck,\n  ElementRef,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Output,\n  QueryList,\n  Self,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {ControlValueAccessor, FormGroupDirective, NgControl, NgForm} from '@angular/forms';\nimport {CanUpdateErrorState, ErrorStateMatcher, mixinErrorState} from '@angular/material/core';\nimport {MatFormFieldControl} from '@angular/material/form-field';\nimport {merge, Observable, Subscription} from 'rxjs';\nimport {startWith} from 'rxjs/operators';\nimport {MatChip, MatChipEvent, MatChipSelectionChange} from './chip';\nimport {MatChipInput} from './chip-input';\n\n\n// Boilerplate for applying mixins to MatChipList.\n/** @docs-private */\nexport class MatChipListBase {\n  constructor(public _defaultErrorStateMatcher: ErrorStateMatcher,\n              public _parentForm: NgForm,\n              public _parentFormGroup: FormGroupDirective,\n              /** @docs-private */\n              public ngControl: NgControl) {}\n}\nexport const _MatChipListMixinBase = mixinErrorState(MatChipListBase);\n\n\n// Increasing integer for generating unique ids for chip-list components.\nlet nextUniqueId = 0;\n\n/** Change event object that is emitted when the chip list value has changed. */\nexport class MatChipListChange {\n  constructor(\n    /** Chip list that emitted the event. */\n    public source: MatChipList,\n    /** Value of the chip list when the event was emitted. */\n    public value: any) { }\n}\n\n\n/**\n * A material design chips component (named ChipList for it's similarity to the List component).\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-chip-list',\n  template: `<div class=\"mat-chip-list-wrapper\"><ng-content></ng-content></div>`,\n  exportAs: 'matChipList',\n  host: {\n    '[attr.tabindex]': '_tabIndex',\n    '[attr.aria-describedby]': '_ariaDescribedby || null',\n    '[attr.aria-required]': 'required.toString()',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.aria-invalid]': 'errorState',\n    '[attr.aria-multiselectable]': 'multiple',\n    '[attr.role]': 'role',\n    '[class.mat-chip-list-disabled]': 'disabled',\n    '[class.mat-chip-list-invalid]': 'errorState',\n    '[class.mat-chip-list-required]': 'required',\n    '[attr.aria-orientation]': 'ariaOrientation',\n    'class': 'mat-chip-list',\n    '(focus)': 'focus()',\n    '(blur)': '_blur()',\n    '(keydown)': '_keydown($event)',\n    '[id]': '_uid',\n  },\n  providers: [{provide: MatFormFieldControl, useExisting: MatChipList}],\n  styleUrls: ['chips.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class MatChipList extends _MatChipListMixinBase implements MatFormFieldControl<any>,\n  ControlValueAccessor, AfterContentInit, DoCheck, OnInit, OnDestroy, CanUpdateErrorState {\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  readonly controlType: string = 'mat-chip-list';\n\n  /** When a chip is destroyed, we track the index so we can focus the appropriate next chip. */\n  protected _lastDestroyedIndex: number|null = null;\n\n  /** Track which chips we're listening to for focus/destruction. */\n  protected _chipSet: WeakMap<MatChip, boolean> = new WeakMap();\n\n  /** Subscription to tabbing out from the chip list. */\n  private _tabOutSubscription = Subscription.EMPTY;\n\n  /** Subscription to changes in the chip list. */\n  private _changeSubscription: Subscription;\n\n  /** Subscription to focus changes in the chips. */\n  private _chipFocusSubscription: Subscription | null;\n\n  /** Subscription to blur changes in the chips. */\n  private _chipBlurSubscription: Subscription | null;\n\n  /** Subscription to selection changes in chips. */\n  private _chipSelectionSubscription: Subscription | null;\n\n  /** Subscription to remove changes in chips. */\n  private _chipRemoveSubscription: Subscription | null;\n\n  /** The chip input to add more chips */\n  protected _chipInput: MatChipInput;\n\n  /** Uid of the chip list */\n  _uid: string = `mat-chip-list-${nextUniqueId++}`;\n\n  /** The aria-describedby attribute on the chip list for improved a11y. */\n  _ariaDescribedby: string;\n\n  /** Tab index for the chip list. */\n  _tabIndex = 0;\n\n  /**\n   * User defined tab index.\n   * When it is not null, use user defined tab index. Otherwise use _tabIndex\n   */\n  _userTabIndex: number | null = null;\n\n  /** The FocusKeyManager which handles focus. */\n  _keyManager: FocusKeyManager<MatChip>;\n\n  /** Function when touched */\n  _onTouched = () => {};\n\n  /** Function when changed */\n  _onChange: (value: any) => void = () => {};\n\n  _selectionModel: SelectionModel<MatChip>;\n\n  /** The array of selected chips inside chip list. */\n  get selected(): MatChip[] | MatChip {\n    return this.multiple ? this._selectionModel.selected : this._selectionModel.selected[0];\n  }\n\n  /** The ARIA role applied to the chip list. */\n  get role(): string | null { return this.empty ? null : 'listbox'; }\n\n  /** An object used to control when error messages are shown. */\n  @Input() errorStateMatcher: ErrorStateMatcher;\n\n  /** Whether the user should be allowed to select multiple chips. */\n  @Input()\n  get multiple(): boolean { return this._multiple; }\n  set multiple(value: boolean) {\n    this._multiple = coerceBooleanProperty(value);\n  }\n  private _multiple: boolean = false;\n\n  /**\n   * A function to compare the option values with the selected values. The first argument\n   * is a value from an option. The second is a value from the selection. A boolean\n   * should be returned.\n   */\n  @Input()\n  get compareWith(): (o1: any, o2: any) => boolean { return this._compareWith; }\n  set compareWith(fn: (o1: any, o2: any) => boolean) {\n    this._compareWith = fn;\n    if (this._selectionModel) {\n      // A different comparator means the selection could change.\n      this._initializeSelection();\n    }\n  }\n  private _compareWith = (o1: any, o2: any) => o1 === o2;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get value(): any { return this._value; }\n  set value(value: any) {\n    this.writeValue(value);\n    this._value = value;\n  }\n  protected _value: any;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  get id(): string {\n    return this._chipInput ? this._chipInput.id : this._uid;\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get required(): boolean { return this._required; }\n  set required(value: boolean) {\n    this._required = coerceBooleanProperty(value);\n    this.stateChanges.next();\n  }\n  protected _required: boolean = false;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get placeholder(): string {\n    return this._chipInput ? this._chipInput.placeholder : this._placeholder;\n  }\n  set placeholder(value: string) {\n    this._placeholder = value;\n    this.stateChanges.next();\n  }\n  protected _placeholder: string;\n\n  /** Whether any chips or the matChipInput inside of this chip-list has focus. */\n  get focused(): boolean {\n    return this.chips.some(chip => chip._hasFocus) ||\n      (this._chipInput && this._chipInput.focused);\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  get empty(): boolean {\n    return (!this._chipInput || this._chipInput.empty) && this.chips.length === 0;\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  get shouldLabelFloat(): boolean { return !this.empty || this.focused; }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get disabled(): boolean { return this.ngControl ? !!this.ngControl.disabled : this._disabled; }\n  set disabled(value: boolean) { this._disabled = coerceBooleanProperty(value); }\n  protected _disabled: boolean = false;\n\n  /** Orientation of the chip list. */\n  @Input('aria-orientation') ariaOrientation: 'horizontal' | 'vertical' = 'horizontal';\n\n  /**\n   * Whether or not this chip list is selectable. When a chip list is not selectable,\n   * the selected states for all the chips inside the chip list are always ignored.\n   */\n  @Input()\n  get selectable(): boolean { return this._selectable; }\n  set selectable(value: boolean) {\n    this._selectable = coerceBooleanProperty(value);\n    if (this.chips) {\n      this.chips.forEach(chip => chip.chipListSelectable = this._selectable);\n    }\n  }\n  protected _selectable: boolean = true;\n\n  @Input()\n  set tabIndex(value: number) {\n    this._userTabIndex = value;\n    this._tabIndex = value;\n  }\n\n  /** Combined stream of all of the child chips' selection change events. */\n  get chipSelectionChanges(): Observable<MatChipSelectionChange> {\n    return merge(...this.chips.map(chip => chip.selectionChange));\n  }\n\n  /** Combined stream of all of the child chips' focus change events. */\n  get chipFocusChanges(): Observable<MatChipEvent> {\n    return merge(...this.chips.map(chip => chip._onFocus));\n  }\n\n  /** Combined stream of all of the child chips' blur change events. */\n  get chipBlurChanges(): Observable<MatChipEvent> {\n    return merge(...this.chips.map(chip => chip._onBlur));\n  }\n\n  /** Combined stream of all of the child chips' remove change events. */\n  get chipRemoveChanges(): Observable<MatChipEvent> {\n    return merge(...this.chips.map(chip => chip.destroyed));\n  }\n\n  /** Event emitted when the selected chip list value has been changed by the user. */\n  @Output() readonly change: EventEmitter<MatChipListChange> =\n      new EventEmitter<MatChipListChange>();\n\n  /**\n   * Event that emits whenever the raw value of the chip-list changes. This is here primarily\n   * to facilitate the two-way binding for the `value` input.\n   * @docs-private\n   */\n  @Output() readonly valueChange: EventEmitter<any> = new EventEmitter<any>();\n\n  /** The chip components contained within this chip list. */\n  @ContentChildren(MatChip) chips: QueryList<MatChip>;\n\n  constructor(protected _elementRef: ElementRef,\n              private _changeDetectorRef: ChangeDetectorRef,\n              @Optional() private _dir: Directionality,\n              @Optional() _parentForm: NgForm,\n              @Optional() _parentFormGroup: FormGroupDirective,\n              _defaultErrorStateMatcher: ErrorStateMatcher,\n              /** @docs-private */\n              @Optional() @Self() public ngControl: NgControl) {\n    super(_defaultErrorStateMatcher, _parentForm, _parentFormGroup, ngControl);\n    if (this.ngControl) {\n      this.ngControl.valueAccessor = this;\n    }\n  }\n\n  ngAfterContentInit() {\n    this._keyManager = new FocusKeyManager<MatChip>(this.chips)\n      .withWrap()\n      .withVerticalOrientation()\n      .withHorizontalOrientation(this._dir ? this._dir.value : 'ltr');\n\n    // Prevents the chip list from capturing focus and redirecting\n    // it back to the first chip when the user tabs out.\n    this._tabOutSubscription = this._keyManager.tabOut.subscribe(() => {\n      this._tabIndex = -1;\n      setTimeout(() => this._tabIndex = this._userTabIndex || 0);\n    });\n\n    // When the list changes, re-subscribe\n    this._changeSubscription = this.chips.changes.pipe(startWith(null)).subscribe(() => {\n      this._resetChips();\n\n      // Reset chips selected/deselected status\n      this._initializeSelection();\n\n      // Check to see if we need to update our tab index\n      this._updateTabIndex();\n\n      // Check to see if we have a destroyed chip and need to refocus\n      this._updateFocusForDestroyedChips();\n\n      this.stateChanges.next();\n    });\n  }\n\n  ngOnInit() {\n    this._selectionModel = new SelectionModel<MatChip>(this.multiple, undefined, false);\n    this.stateChanges.next();\n  }\n\n  ngDoCheck() {\n    if (this.ngControl) {\n      // We need to re-evaluate this on every change detection cycle, because there are some\n      // error triggers that we can't subscribe to (e.g. parent form submissions). This means\n      // that whatever logic is in here has to be super lean or we risk destroying the performance.\n      this.updateErrorState();\n    }\n  }\n\n  ngOnDestroy() {\n    this._tabOutSubscription.unsubscribe();\n\n    if (this._changeSubscription) {\n      this._changeSubscription.unsubscribe();\n    }\n\n    if (this._chipRemoveSubscription) {\n      this._chipRemoveSubscription.unsubscribe();\n    }\n\n    this._dropSubscriptions();\n    this.stateChanges.complete();\n  }\n\n\n  /** Associates an HTML input element with this chip list. */\n  registerInput(inputElement: MatChipInput): void {\n    this._chipInput = inputElement;\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  setDescribedByIds(ids: string[]) { this._ariaDescribedby = ids.join(' '); }\n\n  // Implemented as part of ControlValueAccessor.\n  writeValue(value: any): void {\n    if (this.chips) {\n      this._setSelectionByValue(value, false);\n    }\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnChange(fn: (value: any) => void): void {\n    this._onChange = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnTouched(fn: () => void): void {\n    this._onTouched = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n    this._elementRef.nativeElement.disabled = isDisabled;\n    this.stateChanges.next();\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  onContainerClick() { this.focus(); }\n\n  /**\n   * Focuses the the first non-disabled chip in this chip list, or the associated input when there\n   * are no eligible chips.\n   */\n  focus(): void {\n    // TODO: ARIA says this should focus the first `selected` chip if any are selected.\n    // Focus on first element if there's no chipInput inside chip-list\n    if (this._chipInput && this._chipInput.focused) {\n      // do nothing\n    } else if (this.chips.length > 0) {\n      this._keyManager.setFirstItemActive();\n      this.stateChanges.next();\n    } else {\n      this._focusInput();\n      this.stateChanges.next();\n    }\n  }\n\n  /** Attempt to focus an input if we have one. */\n  _focusInput() {\n    if (this._chipInput) {\n      this._chipInput.focus();\n    }\n  }\n\n  /**\n   * Pass events to the keyboard manager. Available here for tests.\n   */\n  _keydown(event: KeyboardEvent) {\n    const target = event.target as HTMLElement;\n\n    // If they are on an empty input and hit backspace, focus the last chip\n    if (event.keyCode === BACKSPACE && this._isInputEmpty(target)) {\n      this._keyManager.setLastItemActive();\n      event.preventDefault();\n    } else if (target && target.classList.contains('mat-chip')) {\n      this._keyManager.onKeydown(event);\n      this.stateChanges.next();\n    }\n  }\n\n\n  /**\n   * Check the tab index as you should not be allowed to focus an empty list.\n   */\n  protected _updateTabIndex(): void {\n    // If we have 0 chips, we should not allow keyboard focus\n    this._tabIndex = this._userTabIndex || (this.chips.length === 0 ? -1 : 0);\n  }\n\n  /**\n   * Update key manager's active item when chip is deleted.\n   * If the deleted chip is the last chip in chip list, focus the new last chip.\n   * Otherwise focus the next chip in the list.\n   * Save `_lastDestroyedIndex` so we can set the correct focus.\n   */\n  protected _updateKeyManager(chip: MatChip) {\n    let chipIndex: number = this.chips.toArray().indexOf(chip);\n    if (this._isValidIndex(chipIndex)) {\n      if (chip._hasFocus) {\n        // Check whether the chip is not the last item\n        if (chipIndex < this.chips.length - 1) {\n          this._keyManager.setActiveItem(chipIndex);\n        } else if (chipIndex - 1 >= 0) {\n          this._keyManager.setActiveItem(chipIndex - 1);\n        }\n      }\n      if (this._keyManager.activeItemIndex === chipIndex) {\n        this._lastDestroyedIndex = chipIndex;\n      }\n    }\n  }\n\n  /**\n   * Checks to see if a focus chip was recently destroyed so that we can refocus the next closest\n   * one.\n   */\n  protected _updateFocusForDestroyedChips() {\n    let chipsArray = this.chips;\n\n    if (this._lastDestroyedIndex != null && chipsArray.length > 0 && this.focused) {\n      // Check whether the destroyed chip was the last item\n      const newFocusIndex = Math.min(this._lastDestroyedIndex, chipsArray.length - 1);\n      this._keyManager.setActiveItem(newFocusIndex);\n      let focusChip = this._keyManager.activeItem;\n      // Focus the chip\n      if (focusChip) {\n        focusChip.focus();\n      }\n    }\n\n    // Reset our destroyed index\n    this._lastDestroyedIndex = null;\n  }\n\n  /**\n   * Utility to ensure all indexes are valid.\n   *\n   * @param index The index to be checked.\n   * @returns True if the index is valid for our list of chips.\n   */\n  private _isValidIndex(index: number): boolean {\n    return index >= 0 && index < this.chips.length;\n  }\n\n  private _isInputEmpty(element: HTMLElement): boolean {\n    if (element && element.nodeName.toLowerCase() === 'input') {\n      let input = element as HTMLInputElement;\n      return !input.value;\n    }\n\n    return false;\n  }\n\n  _setSelectionByValue(value: any, isUserInput: boolean = true) {\n    this._clearSelection();\n    this.chips.forEach(chip => chip.deselect());\n\n    if (Array.isArray(value)) {\n      value.forEach(currentValue => this._selectValue(currentValue, isUserInput));\n      this._sortValues();\n    } else {\n      const correspondingChip = this._selectValue(value, isUserInput);\n\n      // Shift focus to the active item. Note that we shouldn't do this in multiple\n      // mode, because we don't know what chip the user interacted with last.\n      if (correspondingChip) {\n        if (isUserInput) {\n          this._keyManager.setActiveItem(correspondingChip);\n        }\n      }\n    }\n  }\n\n  /**\n   * Finds and selects the chip based on its value.\n   * @returns Chip that has the corresponding value.\n   */\n  private _selectValue(value: any, isUserInput: boolean = true): MatChip | undefined {\n\n    const correspondingChip = this.chips.find(chip => {\n      return chip.value != null && this._compareWith(chip.value,  value);\n    });\n\n    if (correspondingChip) {\n      isUserInput ? correspondingChip.selectViaInteraction() : correspondingChip.select();\n      this._selectionModel.select(correspondingChip);\n    }\n\n    return correspondingChip;\n  }\n\n  private _initializeSelection(): void {\n    // Defer setting the value in order to avoid the \"Expression\n    // has changed after it was checked\" errors from Angular.\n    Promise.resolve().then(() => {\n      if (this.ngControl || this._value) {\n        this._setSelectionByValue(this.ngControl ? this.ngControl.value : this._value, false);\n        this.stateChanges.next();\n      }\n    });\n  }\n\n  /**\n   * Deselects every chip in the list.\n   * @param skip Chip that should not be deselected.\n   */\n  private _clearSelection(skip?: MatChip): void {\n    this._selectionModel.clear();\n    this.chips.forEach(chip => {\n      if (chip !== skip) {\n        chip.deselect();\n      }\n    });\n    this.stateChanges.next();\n  }\n\n  /**\n   * Sorts the model values, ensuring that they keep the same\n   * order that they have in the panel.\n   */\n  private _sortValues(): void {\n    if (this._multiple) {\n      this._selectionModel.clear();\n\n      this.chips.forEach(chip => {\n        if (chip.selected) {\n          this._selectionModel.select(chip);\n        }\n      });\n      this.stateChanges.next();\n    }\n  }\n\n  /** Emits change event to set the model value. */\n  private _propagateChanges(fallbackValue?: any): void {\n    let valueToEmit: any = null;\n\n    if (Array.isArray(this.selected)) {\n      valueToEmit = this.selected.map(chip => chip.value);\n    } else {\n      valueToEmit = this.selected ? this.selected.value : fallbackValue;\n    }\n    this._value = valueToEmit;\n    this.change.emit(new MatChipListChange(this, valueToEmit));\n    this.valueChange.emit(valueToEmit);\n    this._onChange(valueToEmit);\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** When blurred, mark the field as touched when focus moved outside the chip list. */\n  _blur() {\n    this._keyManager.setActiveItem(-1);\n    if (!this.disabled) {\n      if (this._chipInput) {\n        // If there's a chip input, we should check whether the focus moved to chip input.\n        // If the focus is not moved to chip input, mark the field as touched. If the focus moved\n        // to chip input, do nothing.\n        // Timeout is needed to wait for the focus() event trigger on chip input.\n        setTimeout(() => {\n          if (!this.focused) {\n            this._markAsTouched();\n          }\n        });\n      } else {\n        // If there's no chip input, then mark the field as touched.\n        this._markAsTouched();\n      }\n    }\n  }\n\n  /** Mark the field as touched */\n  _markAsTouched() {\n    this._onTouched();\n    this._changeDetectorRef.markForCheck();\n    this.stateChanges.next();\n  }\n\n  private _resetChips() {\n    this._dropSubscriptions();\n    this._listenToChipsFocus();\n    this._listenToChipsSelection();\n    this._listenToChipsRemoved();\n  }\n\n\n  private _dropSubscriptions() {\n    if (this._chipFocusSubscription) {\n      this._chipFocusSubscription.unsubscribe();\n      this._chipFocusSubscription = null;\n    }\n\n    if (this._chipBlurSubscription) {\n      this._chipBlurSubscription.unsubscribe();\n      this._chipBlurSubscription = null;\n    }\n\n    if (this._chipSelectionSubscription) {\n      this._chipSelectionSubscription.unsubscribe();\n      this._chipSelectionSubscription = null;\n    }\n  }\n\n  /** Listens to user-generated selection events on each chip. */\n  private _listenToChipsSelection(): void {\n    this._chipSelectionSubscription = this.chipSelectionChanges.subscribe(event => {\n      event.source.selected\n        ? this._selectionModel.select(event.source)\n        : this._selectionModel.deselect(event.source);\n\n      // For single selection chip list, make sure the deselected value is unselected.\n      if (!this.multiple) {\n        this.chips.forEach(chip => {\n          if (!this._selectionModel.isSelected(chip) && chip.selected) {\n            chip.deselect();\n          }\n        });\n      }\n\n      if (event.isUserInput) {\n        this._propagateChanges();\n      }\n    });\n  }\n\n  /** Listens to user-generated selection events on each chip. */\n  private _listenToChipsFocus(): void {\n    this._chipFocusSubscription = this.chipFocusChanges.subscribe(event => {\n      let chipIndex: number = this.chips.toArray().indexOf(event.chip);\n\n      if (this._isValidIndex(chipIndex)) {\n        this._keyManager.updateActiveItemIndex(chipIndex);\n      }\n      this.stateChanges.next();\n    });\n\n    this._chipBlurSubscription = this.chipBlurChanges.subscribe(() => {\n      this._blur();\n      this.stateChanges.next();\n    });\n  }\n\n  private _listenToChipsRemoved(): void {\n    this._chipRemoveSubscription = this.chipRemoveChanges.subscribe(event => {\n      this._updateKeyManager(event.chip);\n    });\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {Directive, ElementRef, EventEmitter, Input, Output, Inject} from '@angular/core';\nimport {MatChipList} from './chip-list';\nimport {MAT_CHIPS_DEFAULT_OPTIONS, MatChipsDefaultOptions} from './chip-default-options';\n\n\n/** Represents an input event on a `matChipInput`. */\nexport interface MatChipInputEvent {\n  /** The native `<input>` element that the event is being fired for. */\n  input: HTMLInputElement;\n\n  /** The value of the input. */\n  value: string;\n}\n\n// Increasing integer for generating unique ids.\nlet nextUniqueId = 0;\n\n/**\n * Directive that adds chip-specific behaviors to an input element inside `<mat-form-field>`.\n * May be placed inside or outside of an `<mat-chip-list>`.\n */\n@Directive({\n  selector: 'input[matChipInputFor]',\n  exportAs: 'matChipInput, matChipInputFor',\n  host: {\n    'class': 'mat-chip-input mat-input-element',\n    '(keydown)': '_keydown($event)',\n    '(blur)': '_blur()',\n    '(focus)': '_focus()',\n    '(input)': '_onInput()',\n    '[id]': 'id',\n    '[attr.placeholder]': 'placeholder || null',\n  }\n})\nexport class MatChipInput {\n  /** Whether the control is focused. */\n  focused: boolean = false;\n  _chipList: MatChipList;\n\n  /** Register input for chip list */\n  @Input('matChipInputFor')\n  set chipList(value: MatChipList) {\n    if (value) {\n      this._chipList = value;\n      this._chipList.registerInput(this);\n    }\n  }\n\n  /**\n   * Whether or not the chipEnd event will be emitted when the input is blurred.\n   */\n  @Input('matChipInputAddOnBlur')\n  get addOnBlur(): boolean { return this._addOnBlur; }\n  set addOnBlur(value: boolean) { this._addOnBlur = coerceBooleanProperty(value); }\n  _addOnBlur: boolean = false;\n\n  /**\n   * The list of key codes that will trigger a chipEnd event.\n   *\n   * Defaults to `[ENTER]`.\n   */\n  // TODO(tinayuangao): Support Set here\n  @Input('matChipInputSeparatorKeyCodes')\n  separatorKeyCodes: number[] = this._defaultOptions.separatorKeyCodes;\n\n  /** Emitted when a chip is to be added. */\n  @Output('matChipInputTokenEnd')\n  chipEnd: EventEmitter<MatChipInputEvent> = new EventEmitter<MatChipInputEvent>();\n\n  /**\n   * The input's placeholder text.\n   * @deprecated Bind to the `placeholder` attribute directly.\n   * @deletion-target 7.0.0\n   */\n  @Input() placeholder: string = '';\n\n  /** Unique id for the input. */\n  @Input() id: string = `mat-chip-list-input-${nextUniqueId++}`;\n\n  /** Whether the input is empty. */\n  get empty(): boolean { return !this._inputElement.value; }\n\n  /** The native input element to which this directive is attached. */\n  protected _inputElement: HTMLInputElement;\n\n  constructor(\n    protected _elementRef: ElementRef,\n    @Inject(MAT_CHIPS_DEFAULT_OPTIONS) private _defaultOptions: MatChipsDefaultOptions) {\n    this._inputElement = this._elementRef.nativeElement as HTMLInputElement;\n  }\n\n  /** Utility method to make host definition/tests more clear. */\n  _keydown(event?: KeyboardEvent) {\n    this._emitChipEnd(event);\n  }\n\n  /** Checks to see if the blur should emit the (chipEnd) event. */\n  _blur() {\n    if (this.addOnBlur) {\n      this._emitChipEnd();\n    }\n    this.focused = false;\n    // Blur the chip list if it is not focused\n    if (!this._chipList.focused) {\n      this._chipList._blur();\n    }\n    this._chipList.stateChanges.next();\n  }\n\n  _focus() {\n    this.focused = true;\n    this._chipList.stateChanges.next();\n  }\n\n  /** Checks to see if the (chipEnd) event needs to be emitted. */\n  _emitChipEnd(event?: KeyboardEvent) {\n    if (!this._inputElement.value && !!event) {\n      this._chipList._keydown(event);\n    }\n    if (!event || this.separatorKeyCodes.indexOf(event.keyCode) > -1) {\n      this.chipEnd.emit({ input: this._inputElement, value: this._inputElement.value });\n\n      if (event) {\n        event.preventDefault();\n      }\n    }\n  }\n\n  _onInput() {\n    // Let chip list know whenever the value changes.\n    this._chipList.stateChanges.next();\n  }\n\n  /** Focuses the input. */\n  focus(): void { this._inputElement.focus(); }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ENTER} from '@angular/cdk/keycodes';\nimport {NgModule} from '@angular/core';\nimport {ErrorStateMatcher} from '@angular/material/core';\nimport {MatChip, MatChipAvatar, MatChipRemove, MatChipTrailingIcon} from './chip';\nimport {MAT_CHIPS_DEFAULT_OPTIONS, MatChipsDefaultOptions} from './chip-default-options';\nimport {MatChipInput} from './chip-input';\nimport {MatChipList} from './chip-list';\n\nconst CHIP_DECLARATIONS = [\n  MatChipList,\n  MatChip,\n  MatChipInput,\n  MatChipRemove,\n  MatChipAvatar,\n  MatChipTrailingIcon,\n];\n\n@NgModule({\n  exports: CHIP_DECLARATIONS,\n  declarations: CHIP_DECLARATIONS,\n  providers: [\n    ErrorStateMatcher,\n    {\n      provide: MAT_CHIPS_DEFAULT_OPTIONS,\n      useValue: {\n        separatorKeyCodes: [ENTER]\n      } as MatChipsDefaultOptions\n    }\n  ]\n})\nexport class MatChipsModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ViewContainerRef} from '@angular/core';\nimport {Direction} from '@angular/cdk/bidi';\nimport {ScrollStrategy} from '@angular/cdk/overlay';\n\n/** Valid ARIA roles for a dialog element. */\nexport type DialogRole = 'dialog' | 'alertdialog';\n\n/** Possible overrides for a dialog's position. */\nexport interface DialogPosition {\n  /** Override for the dialog's top position. */\n  top?: string;\n\n  /** Override for the dialog's bottom position. */\n  bottom?: string;\n\n  /** Override for the dialog's left position. */\n  left?: string;\n\n  /** Override for the dialog's right position. */\n  right?: string;\n}\n\n/**\n * Configuration for opening a modal dialog with the MatDialog service.\n */\nexport class MatDialogConfig<D = any> {\n\n  /**\n   * Where the attached component should live in Angular's *logical* component tree.\n   * This affects what is available for injection and the change detection order for the\n   * component instantiated inside of the dialog. This does not affect where the dialog\n   * content will be rendered.\n   */\n  viewContainerRef?: ViewContainerRef;\n\n  /** ID for the dialog. If omitted, a unique one will be generated. */\n  id?: string;\n\n  /** The ARIA role of the dialog element. */\n  role?: DialogRole = 'dialog';\n\n  /** Custom class for the overlay pane. */\n  panelClass?: string | string[] = '';\n\n  /** Whether the dialog has a backdrop. */\n  hasBackdrop?: boolean = true;\n\n  /** Custom class for the backdrop, */\n  backdropClass?: string = '';\n\n  /** Whether the user can use escape or clicking on the backdrop to close the modal. */\n  disableClose?: boolean = false;\n\n  /** Width of the dialog. */\n  width?: string = '';\n\n  /** Height of the dialog. */\n  height?: string = '';\n\n  /** Min-width of the dialog. If a number is provided, pixel units are assumed. */\n  minWidth?: number | string;\n\n  /** Min-height of the dialog. If a number is provided, pixel units are assumed. */\n  minHeight?: number | string;\n\n  /** Max-width of the dialog. If a number is provided, pixel units are assumed. Defaults to 80vw */\n  maxWidth?: number | string = '80vw';\n\n  /** Max-height of the dialog. If a number is provided, pixel units are assumed. */\n  maxHeight?: number | string;\n\n  /** Position overrides. */\n  position?: DialogPosition;\n\n  /** Data being injected into the child component. */\n  data?: D | null = null;\n\n  /** Layout direction for the dialog's content. */\n  direction?: Direction;\n\n  /** ID of the element that describes the dialog. */\n  ariaDescribedBy?: string | null = null;\n\n  /** Aria label to assign to the dialog element */\n  ariaLabel?: string | null = null;\n\n  /** Whether the dialog should focus the first focusable element on open. */\n  autoFocus?: boolean = true;\n\n  /** Scroll strategy to be used for the dialog. */\n  scrollStrategy?: ScrollStrategy;\n\n  /** Whether the dialog should close when the user goes backwards/forwards in history. */\n  closeOnNavigation?: boolean = true;\n\n  // TODO(jelbourn): add configuration for lifecycle hooks, ARIA labelling.\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/** Animations used by MatDialog. */\nexport const matDialogAnimations: {\n  readonly slideDialog: AnimationTriggerMetadata;\n} = {\n  /** Animation that slides the dialog in and out of view and fades the opacity. */\n  slideDialog: trigger('slideDialog', [\n    // Note: The `enter` animation doesn't transition to something like `translate3d(0, 0, 0)\n    // scale(1)`, because for some reason specifying the transform explicitly, causes IE both\n    // to blur the dialog content and decimate the animation performance. Leaving it as `none`\n    // solves both issues.\n    state('enter', style({ transform: 'none', opacity: 1 })),\n    state('void', style({ transform: 'translate3d(0, 25%, 0) scale(0.9)', opacity: 0 })),\n    state('exit', style({ transform: 'translate3d(0, 25%, 0)', opacity: 0 })),\n    transition('* => *', animate('400ms cubic-bezier(0.25, 0.8, 0.25, 1)')),\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ComponentRef,\n  ElementRef,\n  EmbeddedViewRef,\n  EventEmitter,\n  Inject,\n  Optional,\n  ChangeDetectorRef,\n  ViewChild,\n  ViewEncapsulation,\n  ChangeDetectionStrategy,\n} from '@angular/core';\nimport {DOCUMENT} from '@angular/common';\nimport {AnimationEvent} from '@angular/animations';\nimport {matDialogAnimations} from './dialog-animations';\nimport {\n  BasePortalOutlet,\n  ComponentPortal,\n  CdkPortalOutlet,\n  TemplatePortal\n} from '@angular/cdk/portal';\nimport {FocusTrap, FocusTrapFactory} from '@angular/cdk/a11y';\nimport {MatDialogConfig} from './dialog-config';\n\n\n/**\n * Throws an exception for the case when a ComponentPortal is\n * attached to a DomPortalOutlet without an origin.\n * @docs-private\n */\nexport function throwMatDialogContentAlreadyAttachedError() {\n  throw Error('Attempting to attach dialog content after content is already attached');\n}\n\n/**\n * Internal component that wraps user-provided dialog content.\n * Animation is based on https://material.io/guidelines/motion/choreography.html.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-dialog-container',\n  templateUrl: 'dialog-container.html',\n  styleUrls: ['dialog.css'],\n  encapsulation: ViewEncapsulation.None,\n  // Using OnPush for dialogs caused some G3 sync issues. Disabled until we can track them down.\n  // tslint:disable-next-line:validate-decorators\n  changeDetection: ChangeDetectionStrategy.Default,\n  animations: [matDialogAnimations.slideDialog],\n  host: {\n    'class': 'mat-dialog-container',\n    'tabindex': '-1',\n    'aria-modal': 'true',\n    '[attr.id]': '_id',\n    '[attr.role]': '_config.role',\n    '[attr.aria-labelledby]': '_config.ariaLabel ? null : _ariaLabelledBy',\n    '[attr.aria-label]': '_config.ariaLabel',\n    '[attr.aria-describedby]': '_config.ariaDescribedBy || null',\n    '[@slideDialog]': '_state',\n    '(@slideDialog.start)': '_onAnimationStart($event)',\n    '(@slideDialog.done)': '_onAnimationDone($event)',\n  },\n})\nexport class MatDialogContainer extends BasePortalOutlet {\n  /** The portal outlet inside of this container into which the dialog content will be loaded. */\n  @ViewChild(CdkPortalOutlet) _portalOutlet: CdkPortalOutlet;\n\n  /** The class that traps and manages focus within the dialog. */\n  private _focusTrap: FocusTrap;\n\n  /** Element that was focused before the dialog was opened. Save this to restore upon close. */\n  private _elementFocusedBeforeDialogWasOpened: HTMLElement | null = null;\n\n  /** State of the dialog animation. */\n  _state: 'void' | 'enter' | 'exit' = 'enter';\n\n  /** Emits when an animation state changes. */\n  _animationStateChanged = new EventEmitter<AnimationEvent>();\n\n  /** ID of the element that should be considered as the dialog's label. */\n  _ariaLabelledBy: string | null = null;\n\n  /** ID for the container DOM element. */\n  _id: string;\n\n  constructor(\n    private _elementRef: ElementRef,\n    private _focusTrapFactory: FocusTrapFactory,\n    private _changeDetectorRef: ChangeDetectorRef,\n    @Optional() @Inject(DOCUMENT) private _document: any,\n    /** The dialog configuration. */\n    public _config: MatDialogConfig) {\n\n    super();\n  }\n\n  /**\n   * Attach a ComponentPortal as content to this dialog container.\n   * @param portal Portal to be attached as the dialog content.\n   */\n  attachComponentPortal<T>(portal: ComponentPortal<T>): ComponentRef<T> {\n    if (this._portalOutlet.hasAttached()) {\n      throwMatDialogContentAlreadyAttachedError();\n    }\n\n    this._savePreviouslyFocusedElement();\n    return this._portalOutlet.attachComponentPortal(portal);\n  }\n\n  /**\n   * Attach a TemplatePortal as content to this dialog container.\n   * @param portal Portal to be attached as the dialog content.\n   */\n  attachTemplatePortal<C>(portal: TemplatePortal<C>): EmbeddedViewRef<C> {\n    if (this._portalOutlet.hasAttached()) {\n      throwMatDialogContentAlreadyAttachedError();\n    }\n\n    this._savePreviouslyFocusedElement();\n    return this._portalOutlet.attachTemplatePortal(portal);\n  }\n\n  /** Moves the focus inside the focus trap. */\n  private _trapFocus() {\n    if (!this._focusTrap) {\n      this._focusTrap = this._focusTrapFactory.create(this._elementRef.nativeElement);\n    }\n\n    // If were to attempt to focus immediately, then the content of the dialog would not yet be\n    // ready in instances where change detection has to run first. To deal with this, we simply\n    // wait for the microtask queue to be empty.\n    if (this._config.autoFocus) {\n      this._focusTrap.focusInitialElementWhenReady();\n    }\n  }\n\n  /** Restores focus to the element that was focused before the dialog opened. */\n  private _restoreFocus() {\n    const toFocus = this._elementFocusedBeforeDialogWasOpened;\n\n    // We need the extra check, because IE can set the `activeElement` to null in some cases.\n    if (toFocus && typeof toFocus.focus === 'function') {\n      toFocus.focus();\n    }\n\n    if (this._focusTrap) {\n      this._focusTrap.destroy();\n    }\n  }\n\n  /** Saves a reference to the element that was focused before the dialog was opened. */\n  private _savePreviouslyFocusedElement() {\n    if (this._document) {\n      this._elementFocusedBeforeDialogWasOpened = this._document.activeElement as HTMLElement;\n\n      // Note that there is no focus method when rendering on the server.\n      if (this._elementRef.nativeElement.focus) {\n        // Move focus onto the dialog immediately in order to prevent the user from accidentally\n        // opening multiple dialogs at the same time. Needs to be async, because the element\n        // may not be focusable immediately.\n        Promise.resolve().then(() => this._elementRef.nativeElement.focus());\n      }\n    }\n  }\n\n  /** Callback, invoked whenever an animation on the host completes. */\n  _onAnimationDone(event: AnimationEvent) {\n    if (event.toState === 'enter') {\n      this._trapFocus();\n    } else if (event.toState === 'exit') {\n      this._restoreFocus();\n    }\n\n    this._animationStateChanged.emit(event);\n  }\n\n  /** Callback, invoked when an animation on the host starts. */\n  _onAnimationStart(event: AnimationEvent) {\n    this._animationStateChanged.emit(event);\n  }\n\n  /** Starts the dialog exit animation. */\n  _startExitAnimation(): void {\n    this._state = 'exit';\n\n    // Mark the container for check so it can react if the\n    // view container is using OnPush change detection.\n    this._changeDetectorRef.markForCheck();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ESCAPE} from '@angular/cdk/keycodes';\nimport {GlobalPositionStrategy, OverlayRef} from '@angular/cdk/overlay';\nimport {Location} from '@angular/common';\nimport {Observable, Subject, Subscription, SubscriptionLike} from 'rxjs';\nimport {filter, take} from 'rxjs/operators';\nimport {DialogPosition} from './dialog-config';\nimport {MatDialogContainer} from './dialog-container';\n\n\n// TODO(jelbourn): resizing\n\n// Counter for unique dialog ids.\nlet uniqueId = 0;\n\n/**\n * Reference to a dialog opened via the MatDialog service.\n */\nexport class MatDialogRef<T, R = any> {\n  /** The instance of component opened into the dialog. */\n  componentInstance: T;\n\n  /** Whether the user is allowed to close the dialog. */\n  disableClose: boolean | undefined = this._containerInstance._config.disableClose;\n\n  /** Subject for notifying the user that the dialog has finished opening. */\n  private readonly _afterOpen = new Subject<void>();\n\n  /** Subject for notifying the user that the dialog has finished closing. */\n  private readonly _afterClosed = new Subject<R | undefined>();\n\n  /** Subject for notifying the user that the dialog has started closing. */\n  private readonly _beforeClose = new Subject<R | undefined>();\n\n  /** Result to be passed to afterClosed. */\n  private _result: R | undefined;\n\n  /** Subscription to changes in the user's location. */\n  private _locationChanges: SubscriptionLike = Subscription.EMPTY;\n\n  constructor(\n    private _overlayRef: OverlayRef,\n    public _containerInstance: MatDialogContainer,\n    location?: Location,\n    readonly id: string = `mat-dialog-${uniqueId++}`) {\n\n    // Pass the id along to the container.\n    _containerInstance._id = id;\n\n    // Emit when opening animation completes\n    _containerInstance._animationStateChanged.pipe(\n      filter(event => event.phaseName === 'done' && event.toState === 'enter'),\n      take(1)\n    )\n    .subscribe(() => {\n      this._afterOpen.next();\n      this._afterOpen.complete();\n    });\n\n    // Dispose overlay when closing animation is complete\n    _containerInstance._animationStateChanged.pipe(\n      filter(event => event.phaseName === 'done' && event.toState === 'exit'),\n      take(1)\n    ).subscribe(() => this._overlayRef.dispose());\n\n    _overlayRef.detachments().subscribe(() => {\n      this._beforeClose.next(this._result);\n      this._beforeClose.complete();\n      this._locationChanges.unsubscribe();\n      this._afterClosed.next(this._result);\n      this._afterClosed.complete();\n      this.componentInstance = null!;\n      this._overlayRef.dispose();\n    });\n\n    _overlayRef.keydownEvents()\n      .pipe(filter(event => event.keyCode === ESCAPE && !this.disableClose))\n      .subscribe(() => this.close());\n\n    if (location) {\n      // Close the dialog when the user goes forwards/backwards in history or when the location\n      // hash changes. Note that this usually doesn't include clicking on links (unless the user\n      // is using the `HashLocationStrategy`).\n      this._locationChanges = location.subscribe(() => {\n        if (this._containerInstance._config.closeOnNavigation) {\n          this.close();\n        }\n      });\n    }\n  }\n\n  /**\n   * Close the dialog.\n   * @param dialogResult Optional result to return to the dialog opener.\n   */\n  close(dialogResult?: R): void {\n    this._result = dialogResult;\n\n    // Transition the backdrop in parallel to the dialog.\n    this._containerInstance._animationStateChanged.pipe(\n      filter(event => event.phaseName === 'start'),\n      take(1)\n    )\n    .subscribe(() => {\n      this._beforeClose.next(dialogResult);\n      this._beforeClose.complete();\n      this._overlayRef.detachBackdrop();\n    });\n\n    this._containerInstance._startExitAnimation();\n  }\n\n  /**\n   * Gets an observable that is notified when the dialog is finished opening.\n   */\n  afterOpen(): Observable<void> {\n    return this._afterOpen.asObservable();\n  }\n\n  /**\n   * Gets an observable that is notified when the dialog is finished closing.\n   */\n  afterClosed(): Observable<R | undefined> {\n    return this._afterClosed.asObservable();\n  }\n\n  /**\n   * Gets an observable that is notified when the dialog has started closing.\n   */\n  beforeClose(): Observable<R | undefined> {\n    return this._beforeClose.asObservable();\n  }\n\n  /**\n   * Gets an observable that emits when the overlay's backdrop has been clicked.\n   */\n  backdropClick(): Observable<MouseEvent> {\n    return this._overlayRef.backdropClick();\n  }\n\n  /**\n   * Gets an observable that emits when keydown events are targeted on the overlay.\n   */\n  keydownEvents(): Observable<KeyboardEvent> {\n    return this._overlayRef.keydownEvents();\n  }\n\n  /**\n   * Updates the dialog's position.\n   * @param position New dialog position.\n   */\n  updatePosition(position?: DialogPosition): this {\n    let strategy = this._getPositionStrategy();\n\n    if (position && (position.left || position.right)) {\n      position.left ? strategy.left(position.left) : strategy.right(position.right);\n    } else {\n      strategy.centerHorizontally();\n    }\n\n    if (position && (position.top || position.bottom)) {\n      position.top ? strategy.top(position.top) : strategy.bottom(position.bottom);\n    } else {\n      strategy.centerVertically();\n    }\n\n    this._overlayRef.updatePosition();\n\n    return this;\n  }\n\n  /**\n   * Updates the dialog's width and height.\n   * @param width New width of the dialog.\n   * @param height New height of the dialog.\n   */\n  updateSize(width: string = '', height: string = ''): this {\n    this._getPositionStrategy().width(width).height(height);\n    this._overlayRef.updatePosition();\n    return this;\n  }\n\n  /** Fetches the position strategy object from the overlay ref. */\n  private _getPositionStrategy(): GlobalPositionStrategy {\n    return this._overlayRef.getConfig().positionStrategy as GlobalPositionStrategy;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directionality} from '@angular/cdk/bidi';\nimport {\n  Overlay,\n  OverlayConfig,\n  OverlayContainer,\n  OverlayRef,\n  ScrollStrategy,\n} from '@angular/cdk/overlay';\nimport {ComponentPortal, ComponentType, PortalInjector, TemplatePortal} from '@angular/cdk/portal';\nimport {Location} from '@angular/common';\nimport {\n  Inject,\n  Injectable,\n  InjectionToken,\n  Injector,\n  Optional,\n  SkipSelf,\n  TemplateRef,\n} from '@angular/core';\nimport {defer, Observable, of as observableOf, Subject} from 'rxjs';\nimport {startWith} from 'rxjs/operators';\nimport {MatDialogConfig} from './dialog-config';\nimport {MatDialogContainer} from './dialog-container';\nimport {MatDialogRef} from './dialog-ref';\n\n\n/** Injection token that can be used to access the data that was passed in to a dialog. */\nexport const MAT_DIALOG_DATA = new InjectionToken<any>('MatDialogData');\n\n/** Injection token that can be used to specify default dialog options. */\nexport const MAT_DIALOG_DEFAULT_OPTIONS =\n    new InjectionToken<MatDialogConfig>('mat-dialog-default-options');\n\n/** Injection token that determines the scroll handling while the dialog is open. */\nexport const MAT_DIALOG_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mat-dialog-scroll-strategy');\n\n/** @docs-private */\nexport function MAT_DIALOG_SCROLL_STRATEGY_FACTORY(overlay: Overlay): ()  => ScrollStrategy {\n  return () => overlay.scrollStrategies.block();\n}\n\n/** @docs-private */\nexport function MAT_DIALOG_SCROLL_STRATEGY_PROVIDER_FACTORY(overlay: Overlay):\n    () => ScrollStrategy {\n  return () => overlay.scrollStrategies.block();\n}\n\n/** @docs-private */\nexport const MAT_DIALOG_SCROLL_STRATEGY_PROVIDER = {\n  provide: MAT_DIALOG_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_DIALOG_SCROLL_STRATEGY_PROVIDER_FACTORY,\n};\n\n\n/**\n * Service to open Material Design modal dialogs.\n */\n@Injectable()\nexport class MatDialog {\n  private _openDialogsAtThisLevel: MatDialogRef<any>[] = [];\n  private readonly _afterAllClosedAtThisLevel = new Subject<void>();\n  private readonly _afterOpenAtThisLevel = new Subject<MatDialogRef<any>>();\n  private _ariaHiddenElements = new Map<Element, string|null>();\n\n  /** Keeps track of the currently-open dialogs. */\n  get openDialogs(): MatDialogRef<any>[] {\n    return this._parentDialog ? this._parentDialog.openDialogs : this._openDialogsAtThisLevel;\n  }\n\n  /** Stream that emits when a dialog has been opened. */\n  get afterOpen(): Subject<MatDialogRef<any>> {\n    return this._parentDialog ? this._parentDialog.afterOpen : this._afterOpenAtThisLevel;\n  }\n\n  get _afterAllClosed() {\n    const parent = this._parentDialog;\n    return parent ? parent._afterAllClosed : this._afterAllClosedAtThisLevel;\n  }\n\n  /**\n   * Stream that emits when all open dialog have finished closing.\n   * Will emit on subscribe if there are no open dialogs to begin with.\n   */\n  readonly afterAllClosed: Observable<void> = defer<void>(() => this.openDialogs.length ?\n      this._afterAllClosed :\n      this._afterAllClosed.pipe(startWith(undefined)));\n\n  constructor(\n      private _overlay: Overlay,\n      private _injector: Injector,\n      @Optional() private _location: Location,\n      @Optional() @Inject(MAT_DIALOG_DEFAULT_OPTIONS) private _defaultOptions,\n      @Inject(MAT_DIALOG_SCROLL_STRATEGY) private _scrollStrategy,\n      @Optional() @SkipSelf() private _parentDialog: MatDialog,\n      private _overlayContainer: OverlayContainer) {}\n\n  /**\n   * Opens a modal dialog containing the given component.\n   * @param componentOrTemplateRef Type of the component to load into the dialog,\n   *     or a TemplateRef to instantiate as the dialog content.\n   * @param config Extra configuration options.\n   * @returns Reference to the newly-opened dialog.\n   */\n  open<T, D = any, R = any>(componentOrTemplateRef: ComponentType<T> | TemplateRef<T>,\n          config?: MatDialogConfig<D>): MatDialogRef<T, R> {\n\n    config = _applyConfigDefaults(config, this._defaultOptions || new MatDialogConfig());\n\n    if (config.id && this.getDialogById(config.id)) {\n      throw Error(`Dialog with id \"${config.id}\" exists already. The dialog id must be unique.`);\n    }\n\n    const overlayRef = this._createOverlay(config);\n    const dialogContainer = this._attachDialogContainer(overlayRef, config);\n    const dialogRef = this._attachDialogContent<T, R>(componentOrTemplateRef,\n                                                      dialogContainer,\n                                                      overlayRef,\n                                                      config);\n\n    // If this is the first dialog that we're opening, hide all the non-overlay content.\n    if (!this.openDialogs.length) {\n      this._hideNonDialogContentFromAssistiveTechnology();\n    }\n\n    this.openDialogs.push(dialogRef);\n    dialogRef.afterClosed().subscribe(() => this._removeOpenDialog(dialogRef));\n    this.afterOpen.next(dialogRef);\n\n    return dialogRef;\n  }\n\n  /**\n   * Closes all of the currently-open dialogs.\n   */\n  closeAll(): void {\n    let i = this.openDialogs.length;\n\n    while (i--) {\n      // The `_openDialogs` property isn't updated after close until the rxjs subscription\n      // runs on the next microtask, in addition to modifying the array as we're going\n      // through it. We loop through all of them and call close without assuming that\n      // they'll be removed from the list instantaneously.\n      this.openDialogs[i].close();\n    }\n  }\n\n  /**\n   * Finds an open dialog by its id.\n   * @param id ID to use when looking up the dialog.\n   */\n  getDialogById(id: string): MatDialogRef<any> | undefined {\n    return this.openDialogs.find(dialog => dialog.id === id);\n  }\n\n  /**\n   * Creates the overlay into which the dialog will be loaded.\n   * @param config The dialog configuration.\n   * @returns A promise resolving to the OverlayRef for the created overlay.\n   */\n  private _createOverlay(config: MatDialogConfig): OverlayRef {\n    const overlayConfig = this._getOverlayConfig(config);\n    return this._overlay.create(overlayConfig);\n  }\n\n  /**\n   * Creates an overlay config from a dialog config.\n   * @param dialogConfig The dialog configuration.\n   * @returns The overlay configuration.\n   */\n  private _getOverlayConfig(dialogConfig: MatDialogConfig): OverlayConfig {\n    const state = new OverlayConfig({\n      positionStrategy: this._overlay.position().global(),\n      scrollStrategy: dialogConfig.scrollStrategy || this._scrollStrategy(),\n      panelClass: dialogConfig.panelClass,\n      hasBackdrop: dialogConfig.hasBackdrop,\n      direction: dialogConfig.direction,\n      minWidth: dialogConfig.minWidth,\n      minHeight: dialogConfig.minHeight,\n      maxWidth: dialogConfig.maxWidth,\n      maxHeight: dialogConfig.maxHeight\n    });\n\n    if (dialogConfig.backdropClass) {\n      state.backdropClass = dialogConfig.backdropClass;\n    }\n\n    return state;\n  }\n\n  /**\n   * Attaches an MatDialogContainer to a dialog's already-created overlay.\n   * @param overlay Reference to the dialog's underlying overlay.\n   * @param config The dialog configuration.\n   * @returns A promise resolving to a ComponentRef for the attached container.\n   */\n  private _attachDialogContainer(overlay: OverlayRef, config: MatDialogConfig): MatDialogContainer {\n    const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n    const injector = new PortalInjector(userInjector || this._injector, new WeakMap([\n      [MatDialogConfig, config]\n    ]));\n    const containerPortal =\n        new ComponentPortal(MatDialogContainer, config.viewContainerRef, injector);\n    const containerRef = overlay.attach<MatDialogContainer>(containerPortal);\n\n    return containerRef.instance;\n  }\n\n  /**\n   * Attaches the user-provided component to the already-created MatDialogContainer.\n   * @param componentOrTemplateRef The type of component being loaded into the dialog,\n   *     or a TemplateRef to instantiate as the content.\n   * @param dialogContainer Reference to the wrapping MatDialogContainer.\n   * @param overlayRef Reference to the overlay in which the dialog resides.\n   * @param config The dialog configuration.\n   * @returns A promise resolving to the MatDialogRef that should be returned to the user.\n   */\n  private _attachDialogContent<T, R>(\n      componentOrTemplateRef: ComponentType<T> | TemplateRef<T>,\n      dialogContainer: MatDialogContainer,\n      overlayRef: OverlayRef,\n      config: MatDialogConfig): MatDialogRef<T, R> {\n\n    // Create a reference to the dialog we're creating in order to give the user a handle\n    // to modify and close it.\n    const dialogRef =\n        new MatDialogRef<T, R>(overlayRef, dialogContainer, this._location, config.id);\n\n    // When the dialog backdrop is clicked, we want to close it.\n    if (config.hasBackdrop) {\n      overlayRef.backdropClick().subscribe(() => {\n        if (!dialogRef.disableClose) {\n          dialogRef.close();\n        }\n      });\n    }\n\n    if (componentOrTemplateRef instanceof TemplateRef) {\n      dialogContainer.attachTemplatePortal(\n        new TemplatePortal<T>(componentOrTemplateRef, null!,\n          <any>{ $implicit: config.data, dialogRef }));\n    } else {\n      const injector = this._createInjector<T>(config, dialogRef, dialogContainer);\n      const contentRef = dialogContainer.attachComponentPortal<T>(\n          new ComponentPortal(componentOrTemplateRef, undefined, injector));\n      dialogRef.componentInstance = contentRef.instance;\n    }\n\n    dialogRef\n      .updateSize(config.width, config.height)\n      .updatePosition(config.position);\n\n    return dialogRef;\n  }\n\n  /**\n   * Creates a custom injector to be used inside the dialog. This allows a component loaded inside\n   * of a dialog to close itself and, optionally, to return a value.\n   * @param config Config object that is used to construct the dialog.\n   * @param dialogRef Reference to the dialog.\n   * @param container Dialog container element that wraps all of the contents.\n   * @returns The custom injector that can be used inside the dialog.\n   */\n  private _createInjector<T>(\n      config: MatDialogConfig,\n      dialogRef: MatDialogRef<T>,\n      dialogContainer: MatDialogContainer): PortalInjector {\n\n    const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n\n    // The MatDialogContainer is injected in the portal as the MatDialogContainer and the dialog's\n    // content are created out of the same ViewContainerRef and as such, are siblings for injector\n    // purposes. To allow the hierarchy that is expected, the MatDialogContainer is explicitly\n    // added to the injection tokens.\n    const injectionTokens = new WeakMap<any, any>([\n      [MatDialogContainer, dialogContainer],\n      [MAT_DIALOG_DATA, config.data],\n      [MatDialogRef, dialogRef]\n    ]);\n\n    if (config.direction &&\n        (!userInjector || !userInjector.get<Directionality | null>(Directionality, null))) {\n      injectionTokens.set(Directionality, {\n        value: config.direction,\n        change: observableOf()\n      });\n    }\n\n    return new PortalInjector(userInjector || this._injector, injectionTokens);\n  }\n\n  /**\n   * Removes a dialog from the array of open dialogs.\n   * @param dialogRef Dialog to be removed.\n   */\n  private _removeOpenDialog(dialogRef: MatDialogRef<any>) {\n    const index = this.openDialogs.indexOf(dialogRef);\n\n    if (index > -1) {\n      this.openDialogs.splice(index, 1);\n\n      // If all the dialogs were closed, remove/restore the `aria-hidden`\n      // to a the siblings and emit to the `afterAllClosed` stream.\n      if (!this.openDialogs.length) {\n        this._ariaHiddenElements.forEach((previousValue, element) => {\n          if (previousValue) {\n            element.setAttribute('aria-hidden', previousValue);\n          } else {\n            element.removeAttribute('aria-hidden');\n          }\n        });\n\n        this._ariaHiddenElements.clear();\n        this._afterAllClosed.next();\n      }\n    }\n  }\n\n  /**\n   * Hides all of the content that isn't an overlay from assistive technology.\n   */\n  private _hideNonDialogContentFromAssistiveTechnology() {\n    const overlayContainer = this._overlayContainer.getContainerElement();\n\n    // Ensure that the overlay container is attached to the DOM.\n    if (overlayContainer.parentElement) {\n      const siblings = overlayContainer.parentElement.children;\n\n      for (let i = siblings.length - 1; i > -1; i--) {\n        let sibling = siblings[i];\n\n        if (sibling !== overlayContainer &&\n          sibling.nodeName !== 'SCRIPT' &&\n          sibling.nodeName !== 'STYLE' &&\n          !sibling.hasAttribute('aria-live')) {\n\n          this._ariaHiddenElements.set(sibling, sibling.getAttribute('aria-hidden'));\n          sibling.setAttribute('aria-hidden', 'true');\n        }\n      }\n    }\n\n  }\n\n}\n\n/**\n * Applies default options to the dialog config.\n * @param config Config to be modified.\n * @param defaultOptions Default options provided.\n * @returns The new configuration object.\n */\nfunction _applyConfigDefaults(\n    config?: MatDialogConfig, defaultOptions?: MatDialogConfig): MatDialogConfig {\n  return {...defaultOptions, ...config};\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Directive,\n  Input,\n  OnChanges,\n  OnInit,\n  Optional,\n  SimpleChanges,\n  ElementRef,\n} from '@angular/core';\nimport {MatDialog} from './dialog';\nimport {MatDialogRef} from './dialog-ref';\n\n/** Counter used to generate unique IDs for dialog elements. */\nlet dialogElementUid = 0;\n\n/**\n * Button that will close the current dialog.\n */\n@Directive({\n  selector: `button[mat-dialog-close], button[matDialogClose]`,\n  exportAs: 'matDialogClose',\n  host: {\n    '(click)': 'dialogRef.close(dialogResult)',\n    '[attr.aria-label]': 'ariaLabel',\n    'type': 'button', // Prevents accidental form submits.\n  }\n})\nexport class MatDialogClose implements OnInit, OnChanges {\n  /** Screenreader label for the button. */\n  @Input('aria-label') ariaLabel: string = 'Close dialog';\n\n  /** Dialog close input. */\n  @Input('mat-dialog-close') dialogResult: any;\n\n  @Input('matDialogClose') _matDialogClose: any;\n\n  constructor(\n    @Optional() public dialogRef: MatDialogRef<any>,\n    private _elementRef: ElementRef,\n    private _dialog: MatDialog) {}\n\n  ngOnInit() {\n    if (!this.dialogRef) {\n      // When this directive is included in a dialog via TemplateRef (rather than being\n      // in a Component), the DialogRef isn't available via injection because embedded\n      // views cannot be given a custom injector. Instead, we look up the DialogRef by\n      // ID. This must occur in `onInit`, as the ID binding for the dialog container won't\n      // be resolved at constructor time.\n      this.dialogRef = getClosestDialog(this._elementRef, this._dialog.openDialogs)!;\n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    const proxiedChange = changes._matDialogClose || changes._matDialogCloseResult;\n\n    if (proxiedChange) {\n      this.dialogResult = proxiedChange.currentValue;\n    }\n  }\n}\n\n/**\n * Title of a dialog element. Stays fixed to the top of the dialog when scrolling.\n */\n@Directive({\n  selector: '[mat-dialog-title], [matDialogTitle]',\n  exportAs: 'matDialogTitle',\n  host: {\n    'class': 'mat-dialog-title',\n    '[id]': 'id',\n  },\n})\nexport class MatDialogTitle implements OnInit {\n  @Input() id = `mat-dialog-title-${dialogElementUid++}`;\n\n  constructor(\n    @Optional() private _dialogRef: MatDialogRef<any>,\n    private _elementRef: ElementRef,\n    private _dialog: MatDialog) {}\n\n  ngOnInit() {\n    if (!this._dialogRef) {\n      this._dialogRef = getClosestDialog(this._elementRef, this._dialog.openDialogs)!;\n    }\n\n    if (this._dialogRef) {\n      Promise.resolve().then(() => {\n        const container = this._dialogRef._containerInstance;\n\n        if (container && !container._ariaLabelledBy) {\n          container._ariaLabelledBy = this.id;\n        }\n      });\n    }\n  }\n}\n\n\n/**\n * Scrollable content container of a dialog.\n */\n@Directive({\n  selector: `[mat-dialog-content], mat-dialog-content, [matDialogContent]`,\n  host: {'class': 'mat-dialog-content'}\n})\nexport class MatDialogContent {}\n\n\n/**\n * Container for the bottom action buttons in a dialog.\n * Stays fixed to the bottom when scrolling.\n */\n@Directive({\n  selector: `[mat-dialog-actions], mat-dialog-actions, [matDialogActions]`,\n  host: {'class': 'mat-dialog-actions'}\n})\nexport class MatDialogActions {}\n\n\n/**\n * Finds the closest MatDialogRef to an element by looking at the DOM.\n * @param element Element relative to which to look for a dialog.\n * @param openDialogs References to the currently-open dialogs.\n */\nfunction getClosestDialog(element: ElementRef, openDialogs: MatDialogRef<any>[]) {\n  let parent: HTMLElement | null = element.nativeElement.parentElement;\n\n  while (parent && !parent.classList.contains('mat-dialog-container')) {\n    parent = parent.parentElement;\n  }\n\n  return parent ? openDialogs.find(dialog => dialog.id === parent!.id) : null;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MAT_DIALOG_SCROLL_STRATEGY_PROVIDER, MatDialog} from './dialog';\nimport {MatDialogContainer} from './dialog-container';\nimport {\n  MatDialogActions,\n  MatDialogClose,\n  MatDialogContent,\n  MatDialogTitle,\n} from './dialog-content-directives';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    OverlayModule,\n    PortalModule,\n    MatCommonModule,\n  ],\n  exports: [\n    MatDialogContainer,\n    MatDialogClose,\n    MatDialogTitle,\n    MatDialogContent,\n    MatDialogActions,\n    MatCommonModule,\n  ],\n  declarations: [\n    MatDialogContainer,\n    MatDialogClose,\n    MatDialogTitle,\n    MatDialogActions,\n    MatDialogContent,\n  ],\n  providers: [\n    MatDialog,\n    MAT_DIALOG_SCROLL_STRATEGY_PROVIDER,\n  ],\n  entryComponents: [MatDialogContainer],\n})\nexport class MatDialogModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CdkTextareaAutosize} from '@angular/cdk/text-field';\nimport {Directive, Input} from '@angular/core';\n\n\n/**\n * Directive to automatically resize a textarea to fit its content.\n * @deprecated Use `cdkTextareaAutosize` from `@angular/cdk/text-field` instead.\n * @deletion-target 7.0.0\n */\n@Directive({\n  selector: 'textarea[mat-autosize], textarea[matTextareaAutosize]',\n  exportAs: 'matTextareaAutosize',\n  inputs: ['cdkAutosizeMinRows', 'cdkAutosizeMaxRows'],\n  host: {\n    'class': 'cdk-textarea-autosize mat-autosize',\n    // Textarea elements that have the directive applied should have a single row by default.\n    // Browsers normally show two rows by default and therefore this limits the minRows binding.\n    'rows': '1',\n    '(input)': '_noopInputHandler()',\n  },\n})\nexport class MatTextareaAutosize extends CdkTextareaAutosize {\n  @Input()\n  get matAutosizeMinRows(): number { return this.minRows; }\n  set matAutosizeMinRows(value: number) { this.minRows = value; }\n\n  @Input()\n  get matAutosizeMaxRows(): number { return this.maxRows; }\n  set matAutosizeMaxRows(value: number) { this.maxRows = value; }\n\n  @Input('mat-autosize')\n  get matAutosize(): boolean { return this.enabled; }\n  set matAutosize(value: boolean) { this.enabled = value; }\n\n  @Input()\n  get matTextareaAutosize(): boolean { return this.enabled; }\n  set matTextareaAutosize(value: boolean) { this.enabled = value; }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {InjectionToken} from '@angular/core';\n\n\n/**\n * This token is used to inject the object whose value should be set into `MatInput`. If none is\n * provided, the native `HTMLInputElement` is used. Directives like `MatDatepickerInput` can provide\n * themselves for this token, in order to make `MatInput` delegate the getting and setting of the\n * value to them.\n */\nexport const MAT_INPUT_VALUE_ACCESSOR =\n    new InjectionToken<{value: any}>('MAT_INPUT_VALUE_ACCESSOR');\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {getSupportedInputTypes, Platform} from '@angular/cdk/platform';\nimport {\n  Directive,\n  DoCheck,\n  ElementRef,\n  Inject,\n  Input,\n  OnChanges,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Self,\n  NgZone,\n} from '@angular/core';\nimport {FormGroupDirective, NgControl, NgForm} from '@angular/forms';\nimport {CanUpdateErrorState, ErrorStateMatcher, mixinErrorState} from '@angular/material/core';\nimport {MatFormFieldControl} from '@angular/material/form-field';\nimport {Subject} from 'rxjs';\nimport {AutofillMonitor} from '@angular/cdk/text-field';\nimport {getMatInputUnsupportedTypeError} from './input-errors';\nimport {MAT_INPUT_VALUE_ACCESSOR} from './input-value-accessor';\n\n\n// Invalid input type. Using one of these will throw an MatInputUnsupportedTypeError.\nconst MAT_INPUT_INVALID_TYPES = [\n  'button',\n  'checkbox',\n  'file',\n  'hidden',\n  'image',\n  'radio',\n  'range',\n  'reset',\n  'submit'\n];\n\nlet nextUniqueId = 0;\n\n// Boilerplate for applying mixins to MatInput.\n/** @docs-private */\nexport class MatInputBase {\n  constructor(public _defaultErrorStateMatcher: ErrorStateMatcher,\n              public _parentForm: NgForm,\n              public _parentFormGroup: FormGroupDirective,\n              /** @docs-private */\n              public ngControl: NgControl) {}\n}\nexport const _MatInputMixinBase = mixinErrorState(MatInputBase);\n\n/** Directive that allows a native input to work inside a `MatFormField`. */\n@Directive({\n  selector: `input[matInput], textarea[matInput]`,\n  exportAs: 'matInput',\n  host: {\n    /**\n     * @deletion-target 7.0.0 remove .mat-form-field-autofill-control in favor of AutofillMonitor.\n     */\n    'class': 'mat-input-element mat-form-field-autofill-control',\n    '[class.mat-input-server]': '_isServer',\n    // Native input properties that are overwritten by Angular inputs need to be synced with\n    // the native input element. Otherwise property bindings for those don't work.\n    '[attr.id]': 'id',\n    '[attr.placeholder]': 'placeholder',\n    '[disabled]': 'disabled',\n    '[required]': 'required',\n    '[readonly]': 'readonly',\n    '[attr.aria-describedby]': '_ariaDescribedby || null',\n    '[attr.aria-invalid]': 'errorState',\n    '[attr.aria-required]': 'required.toString()',\n    '(blur)': '_focusChanged(false)',\n    '(focus)': '_focusChanged(true)',\n    '(input)': '_onInput()',\n  },\n  providers: [{provide: MatFormFieldControl, useExisting: MatInput}],\n})\nexport class MatInput extends _MatInputMixinBase implements MatFormFieldControl<any>, OnChanges,\n    OnDestroy, OnInit, DoCheck, CanUpdateErrorState {\n  protected _uid = `mat-input-${nextUniqueId++}`;\n  protected _previousNativeValue: any;\n  private _inputValueAccessor: {value: any};\n  /** The aria-describedby attribute on the input for improved a11y. */\n  _ariaDescribedby: string;\n\n  /** Whether the component is being rendered on the server. */\n  _isServer = false;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  focused: boolean = false;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  readonly stateChanges: Subject<void> = new Subject<void>();\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  controlType: string = 'mat-input';\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  autofilled = false;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get disabled(): boolean {\n    if (this.ngControl && this.ngControl.disabled !== null) {\n      return this.ngControl.disabled;\n    }\n    return this._disabled;\n  }\n  set disabled(value: boolean) {\n    this._disabled = coerceBooleanProperty(value);\n\n    // Browsers may not fire the blur event if the input is disabled too quickly.\n    // Reset from here to ensure that the element doesn't become stuck.\n    if (this.focused) {\n      this.focused = false;\n      this.stateChanges.next();\n    }\n  }\n  protected _disabled = false;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get id(): string { return this._id; }\n  set id(value: string) { this._id = value || this._uid; }\n  protected _id: string;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input() placeholder: string;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get required(): boolean { return this._required; }\n  set required(value: boolean) { this._required = coerceBooleanProperty(value); }\n  protected _required = false;\n\n  /** Input type of the element. */\n  @Input()\n  get type(): string { return this._type; }\n  set type(value: string) {\n    this._type = value || 'text';\n    this._validateType();\n\n    // When using Angular inputs, developers are no longer able to set the properties on the native\n    // input element. To ensure that bindings for `type` work, we need to sync the setter\n    // with the native property. Textarea elements don't support the type property or attribute.\n    if (!this._isTextarea() && getSupportedInputTypes().has(this._type)) {\n      this._elementRef.nativeElement.type = this._type;\n    }\n  }\n  protected _type = 'text';\n\n  /** An object used to control when error messages are shown. */\n  @Input() errorStateMatcher: ErrorStateMatcher;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get value(): string { return this._inputValueAccessor.value; }\n  set value(value: string) {\n    if (value !== this.value) {\n      this._inputValueAccessor.value = value;\n      this.stateChanges.next();\n    }\n  }\n\n  /** Whether the element is readonly. */\n  @Input()\n  get readonly(): boolean { return this._readonly; }\n  set readonly(value: boolean) { this._readonly = coerceBooleanProperty(value); }\n  private _readonly = false;\n\n  protected _neverEmptyInputTypes = [\n    'date',\n    'datetime',\n    'datetime-local',\n    'month',\n    'time',\n    'week'\n  ].filter(t => getSupportedInputTypes().has(t));\n\n  constructor(protected _elementRef: ElementRef,\n              protected _platform: Platform,\n              /** @docs-private */\n              @Optional() @Self() public ngControl: NgControl,\n              @Optional() _parentForm: NgForm,\n              @Optional() _parentFormGroup: FormGroupDirective,\n              _defaultErrorStateMatcher: ErrorStateMatcher,\n              @Optional() @Self() @Inject(MAT_INPUT_VALUE_ACCESSOR) inputValueAccessor: any,\n              private _autofillMonitor: AutofillMonitor,\n              ngZone: NgZone) {\n    super(_defaultErrorStateMatcher, _parentForm, _parentFormGroup, ngControl);\n    // If no input value accessor was explicitly specified, use the element as the input value\n    // accessor.\n    this._inputValueAccessor = inputValueAccessor || this._elementRef.nativeElement;\n\n    this._previousNativeValue = this.value;\n\n    // Force setter to be called in case id was not specified.\n    this.id = this.id;\n\n    // On some versions of iOS the caret gets stuck in the wrong place when holding down the delete\n    // key. In order to get around this we need to \"jiggle\" the caret loose. Since this bug only\n    // exists on iOS, we only bother to install the listener on iOS.\n    if (_platform.IOS) {\n      ngZone.runOutsideAngular(() => {\n        _elementRef.nativeElement.addEventListener('keyup', (event: Event) => {\n          let el = event.target as HTMLInputElement;\n          if (!el.value && !el.selectionStart && !el.selectionEnd) {\n            // Note: Just setting `0, 0` doesn't fix the issue. Setting\n            // `1, 1` fixes it for the first time that you type text and\n            // then hold delete. Toggling to `1, 1` and then back to\n            // `0, 0` seems to completely fix it.\n            el.setSelectionRange(1, 1);\n            el.setSelectionRange(0, 0);\n          }\n        });\n      });\n    }\n\n    this._isServer = !this._platform.isBrowser;\n  }\n\n  ngOnInit() {\n    this._autofillMonitor.monitor(this._elementRef.nativeElement).subscribe(event => {\n      this.autofilled = event.isAutofilled;\n      this.stateChanges.next();\n    });\n  }\n\n  ngOnChanges() {\n    this.stateChanges.next();\n  }\n\n  ngOnDestroy() {\n    this.stateChanges.complete();\n    this._autofillMonitor.stopMonitoring(this._elementRef.nativeElement);\n  }\n\n  ngDoCheck() {\n    if (this.ngControl) {\n      // We need to re-evaluate this on every change detection cycle, because there are some\n      // error triggers that we can't subscribe to (e.g. parent form submissions). This means\n      // that whatever logic is in here has to be super lean or we risk destroying the performance.\n      this.updateErrorState();\n    }\n\n    // We need to dirty-check the native element's value, because there are some cases where\n    // we won't be notified when it changes (e.g. the consumer isn't using forms or they're\n    // updating the value using `emitEvent: false`).\n    this._dirtyCheckNativeValue();\n  }\n\n  /** Focuses the input. */\n  focus(): void { this._elementRef.nativeElement.focus(); }\n\n  /** Callback for the cases where the focused state of the input changes. */\n  _focusChanged(isFocused: boolean) {\n    if (isFocused !== this.focused && !this.readonly) {\n      this.focused = isFocused;\n      this.stateChanges.next();\n    }\n  }\n\n  _onInput() {\n    // This is a noop function and is used to let Angular know whenever the value changes.\n    // Angular will run a new change detection each time the `input` event has been dispatched.\n    // It's necessary that Angular recognizes the value change, because when floatingLabel\n    // is set to false and Angular forms aren't used, the placeholder won't recognize the\n    // value changes and will not disappear.\n    // Listening to the input event wouldn't be necessary when the input is using the\n    // FormsModule or ReactiveFormsModule, because Angular forms also listens to input events.\n  }\n\n  /** Does some manual dirty checking on the native input `value` property. */\n  protected _dirtyCheckNativeValue() {\n    const newValue = this.value;\n\n    if (this._previousNativeValue !== newValue) {\n      this._previousNativeValue = newValue;\n      this.stateChanges.next();\n    }\n  }\n\n  /** Make sure the input is a supported type. */\n  protected _validateType() {\n    if (MAT_INPUT_INVALID_TYPES.indexOf(this._type) > -1) {\n      throw getMatInputUnsupportedTypeError(this._type);\n    }\n  }\n\n  /** Checks whether the input type is one of the types that are never empty. */\n  protected _isNeverEmpty() {\n    return this._neverEmptyInputTypes.indexOf(this._type) > -1;\n  }\n\n  /** Checks whether the input is invalid based on the native validation. */\n  protected _isBadInput() {\n    // The `validity` property won't be present on platform-server.\n    let validity = (this._elementRef.nativeElement as HTMLInputElement).validity;\n    return validity && validity.badInput;\n  }\n\n  /** Determines if the component host is a textarea. */\n  protected _isTextarea() {\n    return this._elementRef.nativeElement.nodeName.toLowerCase() === 'textarea';\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  get empty(): boolean {\n    return !this._isNeverEmpty() && !this._elementRef.nativeElement.value && !this._isBadInput() &&\n        !this.autofilled;\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  get shouldLabelFloat(): boolean { return this.focused || !this.empty; }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  setDescribedByIds(ids: string[]) { this._ariaDescribedby = ids.join(' '); }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  onContainerClick() { this.focus(); }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {TextFieldModule} from '@angular/cdk/text-field';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {ErrorStateMatcher} from '@angular/material/core';\nimport {MatFormFieldModule} from '@angular/material/form-field';\nimport {MatTextareaAutosize} from './autosize';\nimport {MatInput} from './input';\n\n\n@NgModule({\n  declarations: [MatInput, MatTextareaAutosize],\n  imports: [\n    CommonModule,\n    TextFieldModule,\n    MatFormFieldModule,\n  ],\n  exports: [\n    TextFieldModule,\n    // We re-export the `MatFormFieldModule` since `MatInput` will almost always\n    // be used together with `MatFormField`.\n    MatFormFieldModule,\n    MatInput,\n    MatTextareaAutosize,\n  ],\n  providers: [ErrorStateMatcher],\n})\nexport class MatInputModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable} from '@angular/core';\nimport {Subject} from 'rxjs';\n\n\n/** Datepicker data that requires internationalization. */\n@Injectable({providedIn: 'root'})\nexport class MatDatepickerIntl {\n  /**\n   * Stream that emits whenever the labels here are changed. Use this to notify\n   * components if the labels have changed after initialization.\n   */\n  readonly changes: Subject<void> = new Subject<void>();\n\n  /** A label for the calendar popup (used by screen readers). */\n  calendarLabel: string = 'Calendar';\n\n  /** A label for the button used to open the calendar popup (used by screen readers). */\n  openCalendarLabel: string = 'Open calendar';\n\n  /** A label for the previous month button (used by screen readers). */\n  prevMonthLabel: string = 'Previous month';\n\n  /** A label for the next month button (used by screen readers). */\n  nextMonthLabel: string = 'Next month';\n\n  /** A label for the previous year button (used by screen readers). */\n  prevYearLabel: string = 'Previous year';\n\n  /** A label for the next year button (used by screen readers). */\n  nextYearLabel: string = 'Next year';\n\n  /** A label for the previous multi-year button (used by screen readers). */\n  prevMultiYearLabel: string = 'Previous 20 years';\n\n  /** A label for the next multi-year button (used by screen readers). */\n  nextMultiYearLabel: string = 'Next 20 years';\n\n  /** A label for the 'switch to month view' button (used by screen readers). */\n  switchToMonthViewLabel: string = 'Choose date';\n\n  /** A label for the 'switch to year view' button (used by screen readers). */\n  switchToMultiYearViewLabel: string = 'Choose month and year';\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  EventEmitter,\n  Input,\n  Output,\n  ViewEncapsulation,\n  NgZone,\n} from '@angular/core';\nimport {take} from 'rxjs/operators';\n\n/**\n * An internal class that represents the data corresponding to a single calendar cell.\n * @docs-private\n */\nexport class MatCalendarCell {\n  constructor(public value: number,\n              public displayValue: string,\n              public ariaLabel: string,\n              public enabled: boolean) {}\n}\n\n\n/**\n * An internal component used to display calendar data in a table.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: '[mat-calendar-body]',\n  templateUrl: 'calendar-body.html',\n  styleUrls: ['calendar-body.css'],\n  host: {\n    'class': 'mat-calendar-body',\n    'role': 'grid',\n    'attr.aria-readonly': 'true'\n  },\n  exportAs: 'matCalendarBody',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatCalendarBody {\n  /** The label for the table. (e.g. \"Jan 2017\"). */\n  @Input() label: string;\n\n  /** The cells to display in the table. */\n  @Input() rows: MatCalendarCell[][];\n\n  /** The value in the table that corresponds to today. */\n  @Input() todayValue: number;\n\n  /** The value in the table that is currently selected. */\n  @Input() selectedValue: number;\n\n  /** The minimum number of free cells needed to fit the label in the first row. */\n  @Input() labelMinRequiredCells: number;\n\n  /** The number of columns in the table. */\n  @Input() numCols = 7;\n\n  /** Whether to allow selection of disabled cells. */\n  @Input() allowDisabledSelection = false;\n\n  /** The cell number of the active cell in the table. */\n  @Input() activeCell = 0;\n\n  /**\n   * The aspect ratio (width / height) to use for the cells in the table. This aspect ratio will be\n   * maintained even as the table resizes.\n   */\n  @Input() cellAspectRatio = 1;\n\n  /** Emits when a new value is selected. */\n  @Output() readonly selectedValueChange: EventEmitter<number> = new EventEmitter<number>();\n\n  constructor(private _elementRef: ElementRef, private _ngZone: NgZone) { }\n\n  _cellClicked(cell: MatCalendarCell): void {\n    if (!this.allowDisabledSelection && !cell.enabled) {\n      return;\n    }\n    this.selectedValueChange.emit(cell.value);\n  }\n\n  /** The number of blank cells to put at the beginning for the first row. */\n  get _firstRowOffset(): number {\n    return this.rows && this.rows.length && this.rows[0].length ?\n        this.numCols - this.rows[0].length : 0;\n  }\n\n  _isActiveCell(rowIndex: number, colIndex: number): boolean {\n    let cellNumber = rowIndex * this.numCols + colIndex;\n\n    // Account for the fact that the first row may not have as many cells.\n    if (rowIndex) {\n      cellNumber -= this._firstRowOffset;\n    }\n\n    return cellNumber == this.activeCell;\n  }\n\n  /** Focuses the active cell after the microtask queue is empty. */\n  _focusActiveCell() {\n    this._ngZone.runOutsideAngular(() => {\n      this._ngZone.onStable.asObservable().pipe(take(1)).subscribe(() => {\n        this._elementRef.nativeElement.querySelector('.mat-calendar-body-active').focus();\n      });\n    });\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ViewEncapsulation,\n  ChangeDetectionStrategy,\n  Directive,\n  Input,\n} from '@angular/core';\n\n\n/**\n * Content of a card, needed as it's used as a selector in the API.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-card-content',\n  host: {'class': 'mat-card-content'}\n})\nexport class MatCardContent {}\n\n/**\n * Title of a card, needed as it's used as a selector in the API.\n * @docs-private\n */\n@Directive({\n  selector: `mat-card-title, [mat-card-title], [matCardTitle]`,\n  host: {\n    'class': 'mat-card-title'\n  }\n})\nexport class MatCardTitle {}\n\n/**\n * Sub-title of a card, needed as it's used as a selector in the API.\n * @docs-private\n */\n@Directive({\n  selector: `mat-card-subtitle, [mat-card-subtitle], [matCardSubtitle]`,\n  host: {\n    'class': 'mat-card-subtitle'\n  }\n})\nexport class MatCardSubtitle {}\n\n/**\n * Action section of a card, needed as it's used as a selector in the API.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-card-actions',\n  exportAs: 'matCardActions',\n  host: {\n    'class': 'mat-card-actions',\n    '[class.mat-card-actions-align-end]': 'align === \"end\"',\n  }\n})\nexport class MatCardActions {\n  /** Position of the actions inside the card. */\n  @Input() align: 'start' | 'end' = 'start';\n}\n\n/**\n * Footer of a card, needed as it's used as a selector in the API.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-card-footer',\n  host: {'class': 'mat-card-footer'}\n})\nexport class MatCardFooter {}\n\n/**\n * Image used in a card, needed to add the mat- CSS styling.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-card-image], [matCardImage]',\n  host: {'class': 'mat-card-image'}\n})\nexport class MatCardImage {}\n\n/**\n * Image used in a card, needed to add the mat- CSS styling.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-card-sm-image], [matCardImageSmall]',\n  host: {'class': 'mat-card-sm-image'}\n})\nexport class MatCardSmImage {}\n\n/**\n * Image used in a card, needed to add the mat- CSS styling.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-card-md-image], [matCardImageMedium]',\n  host: {'class': 'mat-card-md-image'}\n})\nexport class MatCardMdImage {}\n\n/**\n * Image used in a card, needed to add the mat- CSS styling.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-card-lg-image], [matCardImageLarge]',\n  host: {'class': 'mat-card-lg-image'}\n})\nexport class MatCardLgImage {}\n\n/**\n * Large image used in a card, needed to add the mat- CSS styling.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-card-xl-image], [matCardImageXLarge]',\n  host: {'class': 'mat-card-xl-image'}\n})\nexport class MatCardXlImage {}\n\n/**\n * Avatar image used in a card, needed to add the mat- CSS styling.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-card-avatar], [matCardAvatar]',\n  host: {'class': 'mat-card-avatar'}\n})\nexport class MatCardAvatar {}\n\n\n/**\n * A basic content container component that adds the styles of a Material design card.\n *\n * While this component can be used alone, it also provides a number\n * of preset styles for common card sections, including:\n * - mat-card-title\n * - mat-card-subtitle\n * - mat-card-content\n * - mat-card-actions\n * - mat-card-footer\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-card',\n  exportAs: 'matCard',\n  templateUrl: 'card.html',\n  styleUrls: ['card.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {'class': 'mat-card'}\n})\nexport class MatCard {}\n\n\n/**\n * Component intended to be used within the `<mat-card>` component. It adds styles for a\n * preset header section (i.e. a title, subtitle, and avatar layout).\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-card-header',\n  templateUrl: 'card-header.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {'class': 'mat-card-header'}\n})\nexport class MatCardHeader {}\n\n\n/**\n * Component intended to be used within the `<mat-card>` component. It adds styles for a preset\n * layout that groups an image with a title section.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-card-title-group',\n  templateUrl: 'card-title-group.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {'class': 'mat-card-title-group'}\n})\nexport class MatCardTitleGroup {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {\n  MatCard,\n  MatCardActions,\n  MatCardAvatar,\n  MatCardContent,\n  MatCardFooter,\n  MatCardHeader,\n  MatCardImage,\n  MatCardLgImage,\n  MatCardMdImage,\n  MatCardSmImage,\n  MatCardSubtitle,\n  MatCardTitle,\n  MatCardTitleGroup,\n  MatCardXlImage,\n} from './card';\n\n\n@NgModule({\n  imports: [MatCommonModule],\n  exports: [\n    MatCard,\n    MatCardHeader,\n    MatCardTitleGroup,\n    MatCardContent,\n    MatCardTitle,\n    MatCardSubtitle,\n    MatCardActions,\n    MatCardFooter,\n    MatCardSmImage,\n    MatCardMdImage,\n    MatCardLgImage,\n    MatCardImage,\n    MatCardXlImage,\n    MatCardAvatar,\n    MatCommonModule,\n  ],\n  declarations: [\n    MatCard, MatCardHeader, MatCardTitleGroup, MatCardContent, MatCardTitle, MatCardSubtitle,\n    MatCardActions, MatCardFooter, MatCardSmImage, MatCardMdImage, MatCardLgImage, MatCardImage,\n    MatCardXlImage, MatCardAvatar,\n  ],\n})\nexport class MatCardModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {InjectionToken} from '@angular/core';\n\n\n/**\n * Checkbox click action when user click on input element.\n * noop: Do not toggle checked or indeterminate.\n * check: Only toggle checked status, ignore indeterminate.\n * check-indeterminate: Toggle checked status, set indeterminate to false. Default behavior.\n * undefined: Same as `check-indeterminate`.\n */\nexport type MatCheckboxClickAction = 'noop' | 'check' | 'check-indeterminate' | undefined;\n\n/**\n * Injection token that can be used to specify the checkbox click behavior.\n */\nexport const MAT_CHECKBOX_CLICK_ACTION =\n    new InjectionToken<MatCheckboxClickAction>('mat-checkbox-click-action');\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor, FocusOrigin} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  AfterViewInit,\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  Output,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {\n  CanColor,\n  CanDisable,\n  CanDisableRipple,\n  HasTabIndex,\n  MatRipple,\n  mixinColor,\n  mixinDisabled,\n  mixinDisableRipple,\n  mixinTabIndex,\n  RippleRef,\n} from '@angular/material/core';\nimport {MAT_CHECKBOX_CLICK_ACTION, MatCheckboxClickAction} from './checkbox-config';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\n\n\n// Increasing integer for generating unique ids for checkbox components.\nlet nextUniqueId = 0;\n\n/**\n * Provider Expression that allows mat-checkbox to register as a ControlValueAccessor.\n * This allows it to support [(ngModel)].\n * @docs-private\n */\nexport const MAT_CHECKBOX_CONTROL_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatCheckbox),\n  multi: true\n};\n\n/**\n * Represents the different states that require custom transitions between them.\n * @docs-private\n */\nexport enum TransitionCheckState {\n  /** The initial state of the component before any user interaction. */\n  Init,\n  /** The state representing the component when it's becoming checked. */\n  Checked,\n  /** The state representing the component when it's becoming unchecked. */\n  Unchecked,\n  /** The state representing the component when it's becoming indeterminate. */\n  Indeterminate\n}\n\n/** Change event object emitted by MatCheckbox. */\nexport class MatCheckboxChange {\n  /** The source MatCheckbox of the event. */\n  source: MatCheckbox;\n  /** The new `checked` value of the checkbox. */\n  checked: boolean;\n}\n\n// Boilerplate for applying mixins to MatCheckbox.\n/** @docs-private */\nexport class MatCheckboxBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatCheckboxMixinBase =\n  mixinTabIndex(mixinColor(mixinDisableRipple(mixinDisabled(MatCheckboxBase)), 'accent'));\n\n\n/**\n * A material design checkbox component. Supports all of the functionality of an HTML5 checkbox,\n * and exposes a similar API. A MatCheckbox can be either checked, unchecked, indeterminate, or\n * disabled. Note that all additional accessibility attributes are taken care of by the component,\n * so there is no need to provide them yourself. However, if you want to omit a label and still\n * have the checkbox be accessible, you may supply an [aria-label] input.\n * See: https://material.io/design/components/selection-controls.html\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-checkbox',\n  templateUrl: 'checkbox.html',\n  styleUrls: ['checkbox.css'],\n  exportAs: 'matCheckbox',\n  host: {\n    'class': 'mat-checkbox',\n    '[id]': 'id',\n    '[class.mat-checkbox-indeterminate]': 'indeterminate',\n    '[class.mat-checkbox-checked]': 'checked',\n    '[class.mat-checkbox-disabled]': 'disabled',\n    '[class.mat-checkbox-label-before]': 'labelPosition == \"before\"',\n    '[class._mat-animation-noopable]': `_animationMode === 'NoopAnimations'`,\n  },\n  providers: [MAT_CHECKBOX_CONTROL_VALUE_ACCESSOR],\n  inputs: ['disableRipple', 'color', 'tabIndex'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class MatCheckbox extends _MatCheckboxMixinBase implements ControlValueAccessor,\n    AfterViewInit, OnDestroy, CanColor, CanDisable, HasTabIndex, CanDisableRipple {\n\n  /**\n   * Attached to the aria-label attribute of the host element. In most cases, arial-labelledby will\n   * take precedence so this may be omitted.\n   */\n  @Input('aria-label') ariaLabel: string = '';\n\n  /**\n   * Users can specify the `aria-labelledby` attribute which will be forwarded to the input element\n   */\n  @Input('aria-labelledby') ariaLabelledby: string | null = null;\n\n  private _uniqueId: string = `mat-checkbox-${++nextUniqueId}`;\n\n  /** A unique id for the checkbox input. If none is supplied, it will be auto-generated. */\n  @Input() id: string = this._uniqueId;\n\n  /** Returns the unique id for the visual hidden input. */\n  get inputId(): string { return `${this.id || this._uniqueId}-input`; }\n\n  /** Whether the checkbox is required. */\n  @Input()\n  get required(): boolean { return this._required; }\n  set required(value: boolean) { this._required = coerceBooleanProperty(value); }\n  private _required: boolean;\n\n  /** Whether the label should appear after or before the checkbox. Defaults to 'after' */\n  @Input() labelPosition: 'before' | 'after' = 'after';\n\n  /** Name value will be applied to the input element if present */\n  @Input() name: string | null = null;\n\n  /** Event emitted when the checkbox's `checked` value changes. */\n  @Output() readonly change: EventEmitter<MatCheckboxChange> =\n      new EventEmitter<MatCheckboxChange>();\n\n  /** Event emitted when the checkbox's `indeterminate` value changes. */\n  @Output() readonly indeterminateChange: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n  /** The value attribute of the native input element */\n  @Input() value: string;\n\n  /** The native `<input type=\"checkbox\">` element */\n  @ViewChild('input') _inputElement: ElementRef;\n\n  /** Reference to the ripple instance of the checkbox. */\n  @ViewChild(MatRipple) ripple: MatRipple;\n\n  /**\n   * Called when the checkbox is blurred. Needed to properly implement ControlValueAccessor.\n   * @docs-private\n   */\n  _onTouched: () => any = () => {};\n\n  private _currentAnimationClass: string = '';\n\n  private _currentCheckState: TransitionCheckState = TransitionCheckState.Init;\n\n  private _controlValueAccessorChangeFn: (value: any) => void = () => {};\n\n  /** Reference to the focused state ripple. */\n  private _focusRipple: RippleRef | null;\n\n  constructor(elementRef: ElementRef,\n              private _changeDetectorRef: ChangeDetectorRef,\n              private _focusMonitor: FocusMonitor,\n              private _ngZone: NgZone,\n              @Attribute('tabindex') tabIndex: string,\n              @Optional() @Inject(MAT_CHECKBOX_CLICK_ACTION)\n                  private _clickAction: MatCheckboxClickAction,\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode?: string) {\n    super(elementRef);\n\n    this.tabIndex = parseInt(tabIndex) || 0;\n  }\n\n  ngAfterViewInit() {\n    this._focusMonitor\n      .monitor(this._inputElement.nativeElement)\n      .subscribe(focusOrigin => this._onInputFocusChange(focusOrigin));\n  }\n\n  ngOnDestroy() {\n    this._focusMonitor.stopMonitoring(this._inputElement.nativeElement);\n  }\n\n  /**\n   * Whether the checkbox is checked.\n   */\n  @Input()\n  get checked(): boolean { return this._checked; }\n  set checked(value: boolean) {\n    if (value != this.checked) {\n      this._checked = value;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n  private _checked: boolean = false;\n\n  /**\n   * Whether the checkbox is disabled. This fully overrides the implementation provided by\n   * mixinDisabled, but the mixin is still required because mixinTabIndex requires it.\n   */\n  @Input()\n  get disabled() { return this._disabled; }\n  set disabled(value: any) {\n    if (value != this.disabled) {\n      this._disabled = value;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n  private _disabled: boolean = false;\n\n  /**\n   * Whether the checkbox is indeterminate. This is also known as \"mixed\" mode and can be used to\n   * represent a checkbox with three states, e.g. a checkbox that represents a nested list of\n   * checkable items. Note that whenever checkbox is manually clicked, indeterminate is immediately\n   * set to false.\n   */\n  @Input()\n  get indeterminate(): boolean { return this._indeterminate; }\n  set indeterminate(value: boolean) {\n    const changed = value != this._indeterminate;\n    this._indeterminate = value;\n\n    if (changed) {\n      if (this._indeterminate) {\n        this._transitionCheckState(TransitionCheckState.Indeterminate);\n      } else {\n        this._transitionCheckState(\n          this.checked ? TransitionCheckState.Checked : TransitionCheckState.Unchecked);\n      }\n      this.indeterminateChange.emit(this._indeterminate);\n    }\n  }\n  private _indeterminate: boolean = false;\n\n  _isRippleDisabled() {\n    return this.disableRipple || this.disabled;\n  }\n\n  /** Method being called whenever the label text changes. */\n  _onLabelTextChange() {\n    // This method is getting called whenever the label of the checkbox changes.\n    // Since the checkbox uses the OnPush strategy we need to notify it about the change\n    // that has been recognized by the cdkObserveContent directive.\n    this._changeDetectorRef.markForCheck();\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  writeValue(value: any) {\n    this.checked = !!value;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnChange(fn: (value: any) => void) {\n    this._controlValueAccessorChangeFn = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnTouched(fn: any) {\n    this._onTouched = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  setDisabledState(isDisabled: boolean) {\n    this.disabled = isDisabled;\n  }\n\n  _getAriaChecked(): 'true' | 'false' | 'mixed' {\n    return this.checked ? 'true' : (this.indeterminate ? 'mixed' : 'false');\n  }\n\n  private _transitionCheckState(newState: TransitionCheckState) {\n    let oldState = this._currentCheckState;\n    let element: HTMLElement = this._elementRef.nativeElement;\n\n    if (oldState === newState) {\n      return;\n    }\n    if (this._currentAnimationClass.length > 0) {\n      element.classList.remove(this._currentAnimationClass);\n    }\n\n    this._currentAnimationClass = this._getAnimationClassForCheckStateTransition(\n        oldState, newState);\n    this._currentCheckState = newState;\n\n    if (this._currentAnimationClass.length > 0) {\n      element.classList.add(this._currentAnimationClass);\n\n      // Remove the animation class to avoid animation when the checkbox is moved between containers\n      const animationClass = this._currentAnimationClass;\n\n      this._ngZone.runOutsideAngular(() => {\n        setTimeout(() => {\n          element.classList.remove(animationClass);\n        }, 1000);\n      });\n    }\n  }\n\n  private _emitChangeEvent() {\n    let event = new MatCheckboxChange();\n    event.source = this;\n    event.checked = this.checked;\n\n    this._controlValueAccessorChangeFn(this.checked);\n    this.change.emit(event);\n  }\n\n  /** Function is called whenever the focus changes for the input element. */\n  private _onInputFocusChange(focusOrigin: FocusOrigin) {\n    // TODO(paul): support `program`. See https://github.com/angular/material2/issues/9889\n    if (!this._focusRipple && focusOrigin === 'keyboard') {\n      this._focusRipple = this.ripple.launch(0, 0, {persistent: true});\n    } else if (!focusOrigin) {\n      if (this._focusRipple) {\n        this._focusRipple.fadeOut();\n        this._focusRipple = null;\n      }\n\n      this._onTouched();\n    }\n  }\n\n  /** Toggles the `checked` state of the checkbox. */\n  toggle(): void {\n    this.checked = !this.checked;\n  }\n\n  /**\n   * Event handler for checkbox input element.\n   * Toggles checked state if element is not disabled.\n   * Do not toggle on (change) event since IE doesn't fire change event when\n   *   indeterminate checkbox is clicked.\n   * @param event\n   */\n  _onInputClick(event: Event) {\n    // We have to stop propagation for click events on the visual hidden input element.\n    // By default, when a user clicks on a label element, a generated click event will be\n    // dispatched on the associated input element. Since we are using a label element as our\n    // root container, the click event on the `checkbox` will be executed twice.\n    // The real click event will bubble up, and the generated click event also tries to bubble up.\n    // This will lead to multiple click events.\n    // Preventing bubbling for the second event will solve that issue.\n    event.stopPropagation();\n\n    // If resetIndeterminate is false, and the current state is indeterminate, do nothing on click\n    if (!this.disabled && this._clickAction !== 'noop') {\n      // When user manually click on the checkbox, `indeterminate` is set to false.\n      if (this.indeterminate && this._clickAction !== 'check') {\n\n        Promise.resolve().then(() => {\n          this._indeterminate = false;\n          this.indeterminateChange.emit(this._indeterminate);\n        });\n      }\n\n      this.toggle();\n      this._transitionCheckState(\n          this._checked ? TransitionCheckState.Checked : TransitionCheckState.Unchecked);\n\n      // Emit our custom change event if the native input emitted one.\n      // It is important to only emit it, if the native input triggered one, because\n      // we don't want to trigger a change event, when the `checked` variable changes for example.\n      this._emitChangeEvent();\n    } else if (!this.disabled && this._clickAction === 'noop') {\n      // Reset native input when clicked with noop. The native checkbox becomes checked after\n      // click, reset it to be align with `checked` value of `mat-checkbox`.\n      this._inputElement.nativeElement.checked = this.checked;\n      this._inputElement.nativeElement.indeterminate = this.indeterminate;\n    }\n  }\n\n  /** Focuses the checkbox. */\n  focus(): void {\n    this._focusMonitor.focusVia(this._inputElement.nativeElement, 'keyboard');\n  }\n\n  _onInteractionEvent(event: Event) {\n    // We always have to stop propagation on the change event.\n    // Otherwise the change event, from the input element, will bubble up and\n    // emit its event object to the `change` output.\n    event.stopPropagation();\n  }\n\n  private _getAnimationClassForCheckStateTransition(\n      oldState: TransitionCheckState, newState: TransitionCheckState): string {\n    // Don't transition if animations are disabled.\n    if (this._animationMode === 'NoopAnimations') {\n      return '';\n    }\n\n    let animSuffix: string = '';\n\n    switch (oldState) {\n      case TransitionCheckState.Init:\n        // Handle edge case where user interacts with checkbox that does not have [(ngModel)] or\n        // [checked] bound to it.\n        if (newState === TransitionCheckState.Checked) {\n          animSuffix = 'unchecked-checked';\n        } else if (newState == TransitionCheckState.Indeterminate) {\n          animSuffix = 'unchecked-indeterminate';\n        } else {\n          return '';\n        }\n        break;\n      case TransitionCheckState.Unchecked:\n        animSuffix = newState === TransitionCheckState.Checked ?\n            'unchecked-checked' : 'unchecked-indeterminate';\n        break;\n      case TransitionCheckState.Checked:\n        animSuffix = newState === TransitionCheckState.Unchecked ?\n            'checked-unchecked' : 'checked-indeterminate';\n        break;\n      case TransitionCheckState.Indeterminate:\n        animSuffix = newState === TransitionCheckState.Checked ?\n            'indeterminate-checked' : 'indeterminate-unchecked';\n        break;\n    }\n\n    return `mat-checkbox-anim-${animSuffix}`;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Directive,\n  forwardRef,\n  Provider,\n} from '@angular/core';\nimport {\n  CheckboxRequiredValidator,\n  NG_VALIDATORS,\n} from '@angular/forms';\n\nexport const MAT_CHECKBOX_REQUIRED_VALIDATOR: Provider = {\n  provide: NG_VALIDATORS,\n  useExisting: forwardRef(() => MatCheckboxRequiredValidator),\n  multi: true\n};\n\n/**\n * Validator for Material checkbox's required attribute in template-driven checkbox.\n * Current CheckboxRequiredValidator only work with `input type=checkbox` and does not\n * work with `mat-checkbox`.\n */\n@Directive({\n  selector: `mat-checkbox[required][formControlName],\n             mat-checkbox[required][formControl], mat-checkbox[required][ngModel]`,\n  providers: [MAT_CHECKBOX_REQUIRED_VALIDATOR],\n  host: {'[attr.required]': 'required ? \"\" : null'}\n})\nexport class MatCheckboxRequiredValidator extends CheckboxRequiredValidator {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ObserversModule} from '@angular/cdk/observers';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {MatCheckbox} from './checkbox';\nimport {MatCheckboxRequiredValidator} from './checkbox-required-validator';\n\n\n@NgModule({\n  imports: [CommonModule, MatRippleModule, MatCommonModule, ObserversModule],\n  exports: [MatCheckbox, MatCheckboxRequiredValidator, MatCommonModule],\n  declarations: [MatCheckbox, MatCheckboxRequiredValidator],\n})\nexport class MatCheckboxModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusableOption} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {BACKSPACE, DELETE, SPACE} from '@angular/cdk/keycodes';\nimport {Platform} from '@angular/cdk/platform';\nimport {\n  ContentChild,\n  Directive,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  Output,\n} from '@angular/core';\nimport {\n  CanColor,\n  CanDisable,\n  CanDisableRipple,\n  MAT_RIPPLE_GLOBAL_OPTIONS,\n  mixinColor,\n  mixinDisabled,\n  mixinDisableRipple,\n  RippleConfig,\n  RippleGlobalOptions,\n  RippleRenderer,\n  RippleTarget\n} from '@angular/material/core';\nimport {Subject} from 'rxjs';\n\n\n/** Represents an event fired on an individual `mat-chip`. */\nexport interface MatChipEvent {\n  /** The chip the event was fired on. */\n  chip: MatChip;\n}\n\n/** Event object emitted by MatChip when selected or deselected. */\nexport class MatChipSelectionChange {\n  constructor(\n    /** Reference to the chip that emitted the event. */\n    public source: MatChip,\n    /** Whether the chip that emitted the event is selected. */\n    public selected: boolean,\n    /** Whether the selection change was a result of a user interaction. */\n    public isUserInput = false) { }\n}\n\n\n// Boilerplate for applying mixins to MatChip.\n/** @docs-private */\nexport class MatChipBase {\n  constructor(public _elementRef: ElementRef) {}\n}\n\nexport const _MatChipMixinBase =\n    mixinColor(mixinDisableRipple(mixinDisabled(MatChipBase)), 'primary');\n\nconst CHIP_ATTRIBUTE_NAMES = ['mat-basic-chip'];\n\n/**\n * Dummy directive to add CSS class to chip avatar.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-chip-avatar, [matChipAvatar]',\n  host: {'class': 'mat-chip-avatar'}\n})\nexport class MatChipAvatar {}\n\n/**\n * Dummy directive to add CSS class to chip trailing icon.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-chip-trailing-icon, [matChipTrailingIcon]',\n  host: {'class': 'mat-chip-trailing-icon'}\n})\nexport class MatChipTrailingIcon {}\n\n/**\n * Material design styled Chip component. Used inside the MatChipList component.\n */\n@Directive({\n  selector: `mat-basic-chip, [mat-basic-chip], mat-chip, [mat-chip]`,\n  inputs: ['color', 'disabled', 'disableRipple'],\n  exportAs: 'matChip',\n  host: {\n    'class': 'mat-chip',\n    '[attr.tabindex]': 'disabled ? null : -1',\n    'role': 'option',\n    '[class.mat-chip-selected]': 'selected',\n    '[class.mat-chip-with-avatar]': 'avatar',\n    '[class.mat-chip-with-trailing-icon]': 'trailingIcon || removeIcon',\n    '[class.mat-chip-disabled]': 'disabled',\n    '[attr.disabled]': 'disabled || null',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.aria-selected]': 'ariaSelected',\n    '(click)': '_handleClick($event)',\n    '(keydown)': '_handleKeydown($event)',\n    '(focus)': 'focus()',\n    '(blur)': '_blur()',\n  },\n})\nexport class MatChip extends _MatChipMixinBase implements FocusableOption, OnDestroy, CanColor,\n    CanDisable, CanDisableRipple, RippleTarget {\n\n  /** Reference to the RippleRenderer for the chip. */\n  private _chipRipple: RippleRenderer;\n\n  /** Whether the ripples are globally disabled through the RippleGlobalOptions */\n  private _ripplesGloballyDisabled = false;\n\n  /**\n   * Ripple configuration for ripples that are launched on pointer down.\n   * @docs-private\n   */\n  rippleConfig: RippleConfig = {};\n\n  /**\n   * Whether ripples are disabled on interaction\n   * @docs-private\n   */\n  get rippleDisabled(): boolean {\n    return this.disabled || this.disableRipple || this._ripplesGloballyDisabled;\n  }\n\n  /** Whether the chip has focus. */\n  _hasFocus: boolean = false;\n\n  /** Whether the chip list is selectable */\n  chipListSelectable: boolean = true;\n\n  /** The chip avatar */\n  @ContentChild(MatChipAvatar) avatar: MatChipAvatar;\n\n  /** The chip's trailing icon. */\n  @ContentChild(MatChipTrailingIcon) trailingIcon: MatChipTrailingIcon;\n\n  /** The chip's remove toggler. */\n  @ContentChild(forwardRef(() => MatChipRemove)) removeIcon: MatChipRemove;\n\n  /** Whether the chip is selected. */\n  @Input()\n  get selected(): boolean { return this._selected; }\n  set selected(value: boolean) {\n    this._selected = coerceBooleanProperty(value);\n    this.selectionChange.emit({\n      source: this,\n      isUserInput: false,\n      selected: value\n    });\n  }\n  protected _selected: boolean = false;\n\n  /** The value of the chip. Defaults to the content inside `<mat-chip>` tags. */\n  @Input()\n  get value(): any {\n    return this._value != undefined\n      ? this._value\n      : this._elementRef.nativeElement.textContent;\n  }\n  set value(value: any) { this._value = value; }\n  protected _value: any;\n\n  /**\n   * Whether or not the chip is selectable. When a chip is not selectable,\n   * changes to it's selected state are always ignored. By default a chip is\n   * selectable, and it becomes non-selectable if it's parent chip list is\n   * not selectable.\n   */\n  @Input()\n  get selectable(): boolean { return this._selectable && this.chipListSelectable; }\n  set selectable(value: boolean) {\n    this._selectable = coerceBooleanProperty(value);\n  }\n  protected _selectable: boolean = true;\n\n  /**\n   * Determines whether or not the chip displays the remove styling and emits (removed) events.\n   */\n  @Input()\n  get removable(): boolean { return this._removable; }\n  set removable(value: boolean) {\n    this._removable = coerceBooleanProperty(value);\n  }\n  protected _removable: boolean = true;\n\n  /** Emits when the chip is focused. */\n  readonly _onFocus = new Subject<MatChipEvent>();\n\n  /** Emits when the chip is blured. */\n  readonly _onBlur = new Subject<MatChipEvent>();\n\n  /** Emitted when the chip is selected or deselected. */\n  @Output() readonly selectionChange: EventEmitter<MatChipSelectionChange> =\n      new EventEmitter<MatChipSelectionChange>();\n\n  /** Emitted when the chip is destroyed. */\n  @Output() readonly destroyed: EventEmitter<MatChipEvent> = new EventEmitter<MatChipEvent>();\n\n  /** Emitted when a chip is to be removed. */\n  @Output() readonly removed: EventEmitter<MatChipEvent> = new EventEmitter<MatChipEvent>();\n\n  /** The ARIA selected applied to the chip. */\n  get ariaSelected(): string | null {\n    return this.selectable ? this.selected.toString() : null;\n  }\n\n  constructor(public _elementRef: ElementRef,\n              ngZone: NgZone,\n              platform: Platform,\n              @Optional() @Inject(MAT_RIPPLE_GLOBAL_OPTIONS) globalOptions: RippleGlobalOptions) {\n    super(_elementRef);\n\n    this._addHostClassName();\n\n    this._chipRipple = new RippleRenderer(this, ngZone, _elementRef, platform);\n    this._chipRipple.setupTriggerEvents(_elementRef.nativeElement);\n\n    if (globalOptions) {\n      this._ripplesGloballyDisabled = !!globalOptions.disabled;\n      // TODO(paul): Once the speedFactor is removed, we no longer need to copy each single option.\n      this.rippleConfig = {\n        speedFactor: globalOptions.baseSpeedFactor,\n        animation: globalOptions.animation,\n        terminateOnPointerUp: globalOptions.terminateOnPointerUp,\n      };\n    }\n  }\n\n  _addHostClassName() {\n    // Add class for the different chips\n    for (const attr of CHIP_ATTRIBUTE_NAMES) {\n      if (this._elementRef.nativeElement.hasAttribute(attr) ||\n        this._elementRef.nativeElement.tagName.toLowerCase() === attr) {\n        (this._elementRef.nativeElement as HTMLElement).classList.add(attr);\n        return;\n      }\n    }\n    (this._elementRef.nativeElement as HTMLElement).classList.add('mat-standard-chip');\n  }\n\n  ngOnDestroy() {\n    this.destroyed.emit({chip: this});\n    this._chipRipple._removeTriggerEvents();\n  }\n\n  /** Selects the chip. */\n  select(): void {\n    this._selected = true;\n    this.selectionChange.emit({\n      source: this,\n      isUserInput: false,\n      selected: true\n    });\n  }\n\n  /** Deselects the chip. */\n  deselect(): void {\n    this._selected = false;\n    this.selectionChange.emit({\n      source: this,\n      isUserInput: false,\n      selected: false\n    });\n  }\n\n  /** Select this chip and emit selected event */\n  selectViaInteraction(): void {\n    this._selected = true;\n    // Emit select event when selected changes.\n    this.selectionChange.emit({\n      source: this,\n      isUserInput: true,\n      selected: true\n    });\n  }\n\n  /** Toggles the current selected state of this chip. */\n  toggleSelected(isUserInput: boolean = false): boolean {\n    this._selected = !this.selected;\n\n    this.selectionChange.emit({\n      source: this,\n      isUserInput,\n      selected: this._selected\n    });\n\n    return this.selected;\n  }\n\n  /** Allows for programmatic focusing of the chip. */\n  focus(): void {\n    if (!this._hasFocus) {\n      this._elementRef.nativeElement.focus();\n      this._onFocus.next({chip: this});\n    }\n    this._hasFocus = true;\n  }\n\n  /**\n   * Allows for programmatic removal of the chip. Called by the MatChipList when the DELETE or\n   * BACKSPACE keys are pressed.\n   *\n   * Informs any listeners of the removal request. Does not remove the chip from the DOM.\n   */\n  remove(): void {\n    if (this.removable) {\n      this.removed.emit({chip: this});\n    }\n  }\n\n  /** Ensures events fire properly upon click. */\n  _handleClick(event: Event) {\n    // Check disabled\n    if (this.disabled) {\n      return;\n    }\n\n    event.preventDefault();\n    event.stopPropagation();\n  }\n\n  /** Handle custom key presses. */\n  _handleKeydown(event: KeyboardEvent): void {\n    if (this.disabled) {\n      return;\n    }\n\n    switch (event.keyCode) {\n      case DELETE:\n      case BACKSPACE:\n        // If we are removable, remove the focused chip\n        this.remove();\n        // Always prevent so page navigation does not occur\n        event.preventDefault();\n        break;\n      case SPACE:\n        // If we are selectable, toggle the focused chip\n        if (this.selectable) {\n          this.toggleSelected(true);\n        }\n\n        // Always prevent space from scrolling the page since the list has focus\n        event.preventDefault();\n        break;\n    }\n  }\n\n  _blur(): void {\n    this._hasFocus = false;\n    this._onBlur.next({chip: this});\n  }\n}\n\n\n/**\n * Applies proper (click) support and adds styling for use with the Material Design \"cancel\" icon\n * available at https://material.io/icons/#ic_cancel.\n *\n * Example:\n *\n *     `<mat-chip>\n *       <mat-icon matChipRemove>cancel</mat-icon>\n *     </mat-chip>`\n *\n * You *may* use a custom icon, but you may need to override the `mat-chip-remove` positioning\n * styles to properly center the icon within the chip.\n */\n@Directive({\n  selector: '[matChipRemove]',\n  host: {\n    'class': 'mat-chip-remove mat-chip-trailing-icon',\n    '(click)': '_handleClick()',\n  }\n})\nexport class MatChipRemove {\n  constructor(protected _parentChip: MatChip) {\n  }\n\n  /** Calls the parent chip's public `remove()` method if applicable. */\n  _handleClick(): void {\n    if (this._parentChip.removable) {\n      this._parentChip.remove();\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {InjectionToken} from '@angular/core';\n\n/** Default options, for the chips module, that can be overridden. */\nexport interface MatChipsDefaultOptions {\n  /** The list of key codes that will trigger a chipEnd event. */\n  separatorKeyCodes: number[];\n}\n\n/** Injection token to be used to override the default options for the chips module. */\nexport const MAT_CHIPS_DEFAULT_OPTIONS =\n    new InjectionToken<MatChipsDefaultOptions>('mat-chips-default-options');\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor} from '@angular/cdk/a11y';\nimport {Platform} from '@angular/cdk/platform';\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  OnDestroy,\n  ViewChild,\n  ViewEncapsulation,\n  Optional,\n  Inject,\n} from '@angular/core';\nimport {\n  CanColor,\n  CanDisable,\n  CanDisableRipple,\n  MatRipple,\n  mixinColor,\n  mixinDisabled,\n  mixinDisableRipple\n} from '@angular/material/core';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\n\n/** Default color palette for round buttons (mat-fab and mat-mini-fab) */\nconst DEFAULT_ROUND_BUTTON_COLOR = 'accent';\n\n/** Default color palette for flat buttons (mat-flat-button) */\nconst DEFAULT_FLAT_BUTTON_COLOR = 'primary';\n\n/**\n * List of classes to add to MatButton instances based on host attributes to\n * style as different variants.\n */\nconst BUTTON_HOST_ATTRIBUTES = [\n  'mat-button',\n  'mat-flat-button',\n  'mat-icon-button',\n  'mat-raised-button',\n  'mat-stroked-button',\n  'mat-mini-fab',\n  'mat-fab',\n];\n\n// Boilerplate for applying mixins to MatButton.\n/** @docs-private */\nexport class MatButtonBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatButtonMixinBase = mixinColor(mixinDisabled(mixinDisableRipple(MatButtonBase)));\n\n\n/**\n * Material design button.\n */\n@Component({\n  moduleId: module.id,\n  selector: `button[mat-button], button[mat-raised-button], button[mat-icon-button],\n             button[mat-fab], button[mat-mini-fab], button[mat-stroked-button],\n             button[mat-flat-button]`,\n  exportAs: 'matButton',\n  host: {\n    '[disabled]': 'disabled || null',\n    '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"',\n  },\n  templateUrl: 'button.html',\n  styleUrls: ['button.css'],\n  inputs: ['disabled', 'disableRipple', 'color'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatButton extends _MatButtonMixinBase\n    implements OnDestroy, CanDisable, CanColor, CanDisableRipple {\n\n  /** Whether the button is round. */\n  readonly isRoundButton: boolean = this._hasHostAttributes('mat-fab', 'mat-mini-fab');\n\n  /** Whether the button is icon button. */\n  readonly isIconButton: boolean = this._hasHostAttributes('mat-icon-button');\n\n  /** Reference to the MatRipple instance of the button. */\n  @ViewChild(MatRipple) ripple: MatRipple;\n\n  constructor(elementRef: ElementRef,\n              /**\n               * @deprecated Platform checks for SSR are no longer needed\n               * @deletion-target 7.0.0\n               */\n              // tslint:disable-next-line:no-unused-variable\n              private _platform: Platform,\n              private _focusMonitor: FocusMonitor,\n              // @deletion-target 7.0.0 `_animationMode` parameter to be made required.\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode?: string) {\n    super(elementRef);\n\n    // For each of the variant selectors that is prevent in the button's host\n    // attributes, add the correct corresponding class.\n    for (const attr of BUTTON_HOST_ATTRIBUTES) {\n      if (this._hasHostAttributes(attr)) {\n        (elementRef.nativeElement as HTMLElement).classList.add(attr);\n      }\n    }\n\n    this._focusMonitor.monitor(this._elementRef.nativeElement, true);\n\n    if (this.isRoundButton) {\n      this.color = DEFAULT_ROUND_BUTTON_COLOR;\n    } else if (this._hasHostAttributes('mat-flat-button')) {\n      this.color = DEFAULT_FLAT_BUTTON_COLOR;\n    }\n  }\n\n  ngOnDestroy() {\n    this._focusMonitor.stopMonitoring(this._elementRef.nativeElement);\n  }\n\n  /** Focuses the button. */\n  focus(): void {\n    this._getHostElement().focus();\n  }\n\n  _getHostElement() {\n    return this._elementRef.nativeElement;\n  }\n\n  _isRippleDisabled() {\n    return this.disableRipple || this.disabled;\n  }\n\n  /** Gets whether the button has one of the given attributes. */\n  _hasHostAttributes(...attributes: string[]) {\n    return attributes.some(attribute => this._getHostElement().hasAttribute(attribute));\n  }\n}\n\n/**\n * Raised Material design button.\n */\n@Component({\n  moduleId: module.id,\n  selector: `a[mat-button], a[mat-raised-button], a[mat-icon-button], a[mat-fab],\n             a[mat-mini-fab], a[mat-stroked-button], a[mat-flat-button]`,\n  exportAs: 'matButton, matAnchor',\n  host: {\n    '[attr.tabindex]': 'disabled ? -1 : 0',\n    '[attr.disabled]': 'disabled || null',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '(click)': '_haltDisabledEvents($event)',\n    '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"',\n  },\n  inputs: ['disabled', 'disableRipple', 'color'],\n  templateUrl: 'button.html',\n  styleUrls: ['button.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatAnchor extends MatButton {\n\n  constructor(\n    platform: Platform,\n    focusMonitor: FocusMonitor,\n    elementRef: ElementRef,\n    // @deletion-target 7.0.0 `animationMode` parameter to be made required.\n    @Optional() @Inject(ANIMATION_MODULE_TYPE) animationMode?: string) {\n    super(elementRef, platform, focusMonitor, animationMode);\n  }\n\n  _haltDisabledEvents(event: Event) {\n    // A disabled button shouldn't apply any actions\n    if (this.disabled) {\n      event.preventDefault();\n      event.stopImmediatePropagation();\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {MatAnchor, MatButton} from './button';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatRippleModule,\n    MatCommonModule,\n  ],\n  exports: [\n    MatButton,\n    MatAnchor,\n    MatCommonModule,\n  ],\n  declarations: [\n    MatButton,\n    MatAnchor,\n  ],\n})\nexport class MatButtonModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Input,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Output,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {\n  CanDisable,\n  CanDisableRipple,\n  mixinDisabled,\n  mixinDisableRipple\n} from '@angular/material/core';\nimport {SelectionModel} from '@angular/cdk/collections';\n\n/** Acceptable types for a button toggle. */\nexport type ToggleType = 'checkbox' | 'radio';\n\n// Boilerplate for applying mixins to MatButtonToggleGroup and MatButtonToggleGroupMultiple\n/** @docs-private */\nexport class MatButtonToggleGroupBase {}\nexport const _MatButtonToggleGroupMixinBase = mixinDisabled(MatButtonToggleGroupBase);\n\n/**\n * Provider Expression that allows mat-button-toggle-group to register as a ControlValueAccessor.\n * This allows it to support [(ngModel)].\n * @docs-private\n */\nexport const MAT_BUTTON_TOGGLE_GROUP_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatButtonToggleGroup),\n  multi: true\n};\n\n/**\n * @deprecated Use `MatButtonToggleGroup` instead.\n * @deletion-target 7.0.0\n */\nexport class MatButtonToggleGroupMultiple {}\n\nlet _uniqueIdCounter = 0;\n\n/** Change event object emitted by MatButtonToggle. */\nexport class MatButtonToggleChange {\n  constructor(\n    /** The MatButtonToggle that emits the event. */\n    public source: MatButtonToggle,\n\n    /** The value assigned to the MatButtonToggle. */\n    public value: any) {}\n}\n\n/** Exclusive selection button toggle group that behaves like a radio-button group. */\n@Directive({\n  selector: 'mat-button-toggle-group',\n  providers: [\n    MAT_BUTTON_TOGGLE_GROUP_VALUE_ACCESSOR,\n    {provide: MatButtonToggleGroupMultiple, useExisting: MatButtonToggleGroup},\n  ],\n  inputs: ['disabled'],\n  host: {\n    'role': 'group',\n    'class': 'mat-button-toggle-group',\n    '[class.mat-button-toggle-vertical]': 'vertical'\n  },\n  exportAs: 'matButtonToggleGroup',\n})\nexport class MatButtonToggleGroup extends _MatButtonToggleGroupMixinBase implements\n  ControlValueAccessor, CanDisable, OnInit, AfterContentInit {\n\n  private _vertical = false;\n  private _multiple = false;\n  private _selectionModel: SelectionModel<MatButtonToggle>;\n\n  /**\n   * Reference to the raw value that the consumer tried to assign. The real\n   * value will exaclude any values from this one that don't correspond to a\n   * toggle. Useful for the cases where the value is assigned before the toggles\n   * have been initialized or at the same that they're being swapped out.\n   */\n  private _rawValue: any;\n\n  /**\n   * The method to be called in order to update ngModel.\n   * Now `ngModel` binding is not supported in multiple selection mode.\n   */\n  _controlValueAccessorChangeFn: (value: any) => void = () => {};\n\n  /** onTouch function registered via registerOnTouch (ControlValueAccessor). */\n  _onTouched: () => any = () => {};\n\n  /** Child button toggle buttons. */\n  @ContentChildren(forwardRef(() => MatButtonToggle)) _buttonToggles: QueryList<MatButtonToggle>;\n\n  /** `name` attribute for the underlying `input` element. */\n  @Input()\n  get name(): string { return this._name; }\n  set name(value: string) {\n    this._name = value;\n\n    if (this._buttonToggles) {\n      this._buttonToggles.forEach(toggle => toggle.name = this._name);\n    }\n  }\n  private _name = `mat-button-toggle-group-${_uniqueIdCounter++}`;\n\n  /** Whether the toggle group is vertical. */\n  @Input()\n  get vertical(): boolean { return this._vertical; }\n  set vertical(value: boolean) {\n    this._vertical = coerceBooleanProperty(value);\n  }\n\n  /** Value of the toggle group. */\n  @Input()\n  get value(): any {\n    const selected = this._selectionModel ? this._selectionModel.selected : [];\n\n    if (this.multiple) {\n      return selected.map(toggle => toggle.value);\n    }\n\n    return selected[0] ? selected[0].value : undefined;\n  }\n  set value(newValue: any) {\n    this._setSelectionByValue(newValue);\n    this.valueChange.emit(this.value);\n  }\n\n  /**\n   * Event that emits whenever the value of the group changes.\n   * Used to facilitate two-way data binding.\n   * @docs-private\n   */\n  @Output() readonly valueChange = new EventEmitter<any>();\n\n  /** Selected button toggles in the group. */\n  get selected() {\n    const selected = this._selectionModel.selected;\n    return this.multiple ? selected : (selected[0] || null);\n  }\n\n  /** Whether multiple button toggles can be selected. */\n  @Input()\n  get multiple(): boolean { return this._multiple; }\n  set multiple(value: boolean) {\n    this._multiple = coerceBooleanProperty(value);\n  }\n\n  /** Event emitted when the group's value changes. */\n  @Output() readonly change: EventEmitter<MatButtonToggleChange> =\n      new EventEmitter<MatButtonToggleChange>();\n\n  constructor(private _changeDetector: ChangeDetectorRef) {\n    super();\n  }\n\n  ngOnInit() {\n    this._selectionModel = new SelectionModel<MatButtonToggle>(this.multiple, undefined, false);\n  }\n\n  ngAfterContentInit() {\n    this._selectionModel.select(...this._buttonToggles.filter(toggle => toggle.checked));\n  }\n\n  /**\n   * Sets the model value. Implemented as part of ControlValueAccessor.\n   * @param value Value to be set to the model.\n   */\n  writeValue(value: any) {\n    this.value = value;\n    this._changeDetector.markForCheck();\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnChange(fn: (value: any) => void) {\n    this._controlValueAccessorChangeFn = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnTouched(fn: any) {\n    this._onTouched = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n\n    if (this._buttonToggles) {\n      this._buttonToggles.forEach(toggle => toggle._markForCheck());\n    }\n  }\n\n  /** Dispatch change event with current selection and group value. */\n  _emitChangeEvent(): void {\n    const selected = this.selected;\n    const source = Array.isArray(selected) ? selected[selected.length - 1] : selected;\n    const event = new MatButtonToggleChange(source!, this.value);\n    this._controlValueAccessorChangeFn(event.value);\n    this.change.emit(event);\n  }\n\n  /**\n   * Syncs a button toggle's selected state with the model value.\n   * @param toggle Toggle to be synced.\n   * @param select Whether the toggle should be selected.\n   * @param isUserInput Whether the change was a result of a user interaction.\n   */\n  _syncButtonToggle(toggle: MatButtonToggle, select: boolean, isUserInput = false) {\n    // Deselect the currently-selected toggle, if we're in single-selection\n    // mode and the button being toggled isn't selected at the moment.\n    if (!this.multiple && this.selected && !toggle.checked) {\n      (this.selected as MatButtonToggle).checked = false;\n    }\n\n    if (select) {\n      this._selectionModel.select(toggle);\n    } else {\n      this._selectionModel.deselect(toggle);\n    }\n\n    // Only emit the change event for user input.\n    if (isUserInput) {\n      this._emitChangeEvent();\n    }\n\n    // Note: we emit this one no matter whether it was a user interaction, because\n    // it is used by Angular to sync up the two-way data binding.\n    this.valueChange.emit(this.value);\n  }\n\n  /** Checks whether a button toggle is selected. */\n  _isSelected(toggle: MatButtonToggle) {\n    return this._selectionModel.isSelected(toggle);\n  }\n\n  /** Determines whether a button toggle should be checked on init. */\n  _isPrechecked(toggle: MatButtonToggle) {\n    if (typeof this._rawValue === 'undefined') {\n      return false;\n    }\n\n    if (this.multiple && Array.isArray(this._rawValue)) {\n      return this._rawValue.some(value => toggle.value != null && value === toggle.value);\n    }\n\n    return toggle.value === this._rawValue;\n  }\n\n  /** Updates the selection state of the toggles in the group based on a value. */\n  private _setSelectionByValue(value: any|any[]) {\n    this._rawValue = value;\n\n    if (!this._buttonToggles) {\n      return;\n    }\n\n    if (this.multiple && value) {\n      if (!Array.isArray(value)) {\n        throw Error('Value must be an array in multiple-selection mode.');\n      }\n\n      this._clearSelection();\n      value.forEach((currentValue: any) => this._selectValue(currentValue));\n    } else {\n      this._clearSelection();\n      this._selectValue(value);\n    }\n  }\n\n  /** Clears the selected toggles. */\n  private _clearSelection() {\n    this._selectionModel.clear();\n    this._buttonToggles.forEach(toggle => toggle.checked = false);\n  }\n\n  /** Selects a value if there's a toggle that corresponds to it. */\n  private _selectValue(value: any) {\n    const correspondingOption = this._buttonToggles.find(toggle => {\n      return toggle.value != null && toggle.value === value;\n    });\n\n    if (correspondingOption) {\n      correspondingOption.checked = true;\n      this._selectionModel.select(correspondingOption);\n    }\n  }\n}\n\n// Boilerplate for applying mixins to the MatButtonToggle class.\n/** @docs-private */\nexport class MatButtonToggleBase {}\nexport const _MatButtonToggleMixinBase = mixinDisableRipple(MatButtonToggleBase);\n\n/** Single button inside of a toggle group. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-button-toggle',\n  templateUrl: 'button-toggle.html',\n  styleUrls: ['button-toggle.css'],\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matButtonToggle',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  inputs: ['disableRipple'],\n  host: {\n    '[class.mat-button-toggle-standalone]': '!buttonToggleGroup',\n    '[class.mat-button-toggle-checked]': 'checked',\n    '[class.mat-button-toggle-disabled]': 'disabled',\n    'class': 'mat-button-toggle',\n    '[attr.id]': 'id',\n  }\n})\nexport class MatButtonToggle extends _MatButtonToggleMixinBase implements OnInit,\n  CanDisableRipple, OnDestroy {\n\n  private _isSingleSelector = false;\n  private _checked = false;\n\n  /**\n   * Attached to the aria-label attribute of the host element. In most cases, arial-labelledby will\n   * take precedence so this may be omitted.\n   */\n  @Input('aria-label') ariaLabel: string;\n\n  /**\n   * Users can specify the `aria-labelledby` attribute which will be forwarded to the input element\n   */\n  @Input('aria-labelledby') ariaLabelledby: string | null = null;\n\n  /** Type of the button toggle. Either 'radio' or 'checkbox'. */\n  _type: ToggleType;\n\n  @ViewChild('button') _buttonElement: ElementRef<HTMLButtonElement>;\n\n  /** The parent button toggle group (exclusive selection). Optional. */\n  buttonToggleGroup: MatButtonToggleGroup;\n\n  /** Unique ID for the underlying `button` element. */\n  get buttonId(): string { return `${this.id}-button`; }\n\n  /** The unique ID for this button toggle. */\n  @Input() id: string;\n\n  /** HTML's 'name' attribute used to group radios for unique selection. */\n  @Input() name: string;\n\n  /** MatButtonToggleGroup reads this to assign its own value. */\n  @Input() value: any;\n\n  /** Whether the button is checked. */\n  @Input()\n  get checked(): boolean {\n    return this.buttonToggleGroup ? this.buttonToggleGroup._isSelected(this) : this._checked;\n  }\n  set checked(value: boolean) {\n    const newValue = coerceBooleanProperty(value);\n\n    if (newValue !== this._checked) {\n      this._checked = newValue;\n\n      if (this.buttonToggleGroup) {\n        this.buttonToggleGroup._syncButtonToggle(this, this._checked);\n      }\n\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  /** Whether the button is disabled. */\n  @Input()\n  get disabled(): boolean {\n    return this._disabled || (this.buttonToggleGroup && this.buttonToggleGroup.disabled);\n  }\n  set disabled(value: boolean) { this._disabled = coerceBooleanProperty(value); }\n  private _disabled: boolean = false;\n\n  /** Event emitted when the group value changes. */\n  @Output() readonly change: EventEmitter<MatButtonToggleChange> =\n      new EventEmitter<MatButtonToggleChange>();\n\n  constructor(@Optional() toggleGroup: MatButtonToggleGroup,\n              private _changeDetectorRef: ChangeDetectorRef,\n              private _elementRef: ElementRef<HTMLElement>,\n              private _focusMonitor: FocusMonitor) {\n    super();\n\n    this.buttonToggleGroup = toggleGroup;\n  }\n\n  ngOnInit() {\n    this._isSingleSelector = this.buttonToggleGroup && !this.buttonToggleGroup.multiple;\n    this._type = this._isSingleSelector ? 'radio' : 'checkbox';\n    this.id = this.id || `mat-button-toggle-${_uniqueIdCounter++}`;\n\n    if (this._isSingleSelector) {\n      this.name = this.buttonToggleGroup.name;\n    }\n\n    if (this.buttonToggleGroup && this.buttonToggleGroup._isPrechecked(this)) {\n      this.checked = true;\n    }\n\n    this._focusMonitor.monitor(this._elementRef.nativeElement, true);\n  }\n\n  ngOnDestroy() {\n    this._focusMonitor.stopMonitoring(this._elementRef.nativeElement);\n  }\n\n  /** Focuses the button. */\n  focus(): void {\n    this._buttonElement.nativeElement.focus();\n  }\n\n  /** Checks the button toggle due to an interaction with the underlying native button. */\n  _onButtonClick() {\n    const newChecked = this._isSingleSelector ? true : !this._checked;\n\n    if (newChecked !== this._checked) {\n      this._checked = newChecked;\n      if (this.buttonToggleGroup) {\n        this.buttonToggleGroup._syncButtonToggle(this, this._checked, true);\n        this.buttonToggleGroup._onTouched();\n      }\n    }\n    // Emit a change event when it's the single selector\n    this.change.emit(new MatButtonToggleChange(this, this.value));\n  }\n\n  /**\n   * Marks the button toggle as needing checking for change detection.\n   * This method is exposed because the parent button toggle group will directly\n   * update bound properties of the radio button.\n   */\n  _markForCheck() {\n    // When the group value changes, the button will not be notified.\n    // Use `markForCheck` to explicit update button toggle's status.\n    this._changeDetectorRef.markForCheck();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {MatButtonToggle, MatButtonToggleGroup} from './button-toggle';\n\n\n@NgModule({\n  imports: [MatCommonModule, MatRippleModule],\n  exports: [MatCommonModule, MatButtonToggleGroup, MatButtonToggle],\n  declarations: [MatButtonToggleGroup, MatButtonToggle],\n})\nexport class MatButtonToggleModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  AfterContentInit,\n  Component,\n  ContentChildren,\n  ElementRef,\n  Input,\n  QueryList,\n  TemplateRef,\n  ViewChild,\n  ViewEncapsulation,\n  ChangeDetectorRef,\n  ChangeDetectionStrategy,\n  EventEmitter,\n  Output,\n  InjectionToken,\n  Inject,\n} from '@angular/core';\nimport {\n  MatOption,\n  MatOptgroup,\n  MAT_OPTION_PARENT_COMPONENT,\n  mixinDisableRipple,\n  CanDisableRipple,\n} from '@angular/material/core';\nimport {ActiveDescendantKeyManager} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\n\n\n/**\n * Autocomplete IDs need to be unique across components, so this counter exists outside of\n * the component definition.\n */\nlet _uniqueAutocompleteIdCounter = 0;\n\n/** Event object that is emitted when an autocomplete option is selected. */\nexport class MatAutocompleteSelectedEvent {\n  constructor(\n    /** Reference to the autocomplete panel that emitted the event. */\n    public source: MatAutocomplete,\n    /** Option that was selected. */\n    public option: MatOption) { }\n}\n\n// Boilerplate for applying mixins to MatAutocomplete.\n/** @docs-private */\nexport class MatAutocompleteBase {}\nexport const _MatAutocompleteMixinBase = mixinDisableRipple(MatAutocompleteBase);\n\n/** Default `mat-autocomplete` options that can be overridden. */\nexport interface MatAutocompleteDefaultOptions {\n  /** Whether the first option should be highlighted when an autocomplete panel is opened. */\n  autoActiveFirstOption?: boolean;\n}\n\n/** Injection token to be used to override the default options for `mat-autocomplete`. */\nexport const MAT_AUTOCOMPLETE_DEFAULT_OPTIONS =\n    new InjectionToken<MatAutocompleteDefaultOptions>('mat-autocomplete-default-options', {\n      providedIn: 'root',\n      factory: MAT_AUTOCOMPLETE_DEFAULT_OPTIONS_FACTORY,\n    });\n\n/** @docs-private */\nexport function MAT_AUTOCOMPLETE_DEFAULT_OPTIONS_FACTORY(): MatAutocompleteDefaultOptions {\n  return {autoActiveFirstOption: false};\n}\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-autocomplete',\n  templateUrl: 'autocomplete.html',\n  styleUrls: ['autocomplete.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  exportAs: 'matAutocomplete',\n  inputs: ['disableRipple'],\n  host: {\n    'class': 'mat-autocomplete'\n  },\n  providers: [\n    {provide: MAT_OPTION_PARENT_COMPONENT, useExisting: MatAutocomplete}\n  ]\n})\nexport class MatAutocomplete extends _MatAutocompleteMixinBase implements AfterContentInit,\n  CanDisableRipple {\n\n  /** Manages active item in option list based on key events. */\n  _keyManager: ActiveDescendantKeyManager<MatOption>;\n\n  /** Whether the autocomplete panel should be visible, depending on option length. */\n  showPanel: boolean = false;\n\n  /** Whether the autocomplete panel is open. */\n  get isOpen(): boolean { return this._isOpen && this.showPanel; }\n  _isOpen: boolean = false;\n\n  /** @docs-private */\n  @ViewChild(TemplateRef) template: TemplateRef<any>;\n\n  /** Element for the panel containing the autocomplete options. */\n  @ViewChild('panel') panel: ElementRef;\n\n  /** @docs-private */\n  @ContentChildren(MatOption, { descendants: true }) options: QueryList<MatOption>;\n\n  /** @docs-private */\n  @ContentChildren(MatOptgroup) optionGroups: QueryList<MatOptgroup>;\n\n  /** Function that maps an option's control value to its display value in the trigger. */\n  @Input() displayWith: ((value: any) => string) | null = null;\n\n  /**\n   * Whether the first option should be highlighted when the autocomplete panel is opened.\n   * Can be configured globally through the `MAT_AUTOCOMPLETE_DEFAULT_OPTIONS` token.\n   */\n  @Input()\n  get autoActiveFirstOption(): boolean { return this._autoActiveFirstOption; }\n  set autoActiveFirstOption(value: boolean) {\n    this._autoActiveFirstOption = coerceBooleanProperty(value);\n  }\n  private _autoActiveFirstOption: boolean;\n\n  /**\n   * Specify the width of the autocomplete panel.  Can be any CSS sizing value, otherwise it will\n   * match the width of its host.\n   */\n  @Input() panelWidth: string | number;\n\n  /** Event that is emitted whenever an option from the list is selected. */\n  @Output() readonly optionSelected: EventEmitter<MatAutocompleteSelectedEvent> =\n      new EventEmitter<MatAutocompleteSelectedEvent>();\n\n  /** Event that is emitted when the autocomplete panel is opened. */\n  @Output() readonly opened: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Event that is emitted when the autocomplete panel is closed. */\n  @Output() readonly closed: EventEmitter<void> = new EventEmitter<void>();\n\n  /**\n   * Takes classes set on the host mat-autocomplete element and applies them to the panel\n   * inside the overlay container to allow for easy styling.\n   */\n  @Input('class')\n  set classList(value: string) {\n    if (value && value.length) {\n      value.split(' ').forEach(className => this._classList[className.trim()] = true);\n      this._elementRef.nativeElement.className = '';\n    }\n  }\n  _classList: {[key: string]: boolean} = {};\n\n  /** Unique ID to be used by autocomplete trigger's \"aria-owns\" property. */\n  id: string = `mat-autocomplete-${_uniqueAutocompleteIdCounter++}`;\n\n  constructor(\n    private _changeDetectorRef: ChangeDetectorRef,\n    private _elementRef: ElementRef,\n    @Inject(MAT_AUTOCOMPLETE_DEFAULT_OPTIONS) defaults: MatAutocompleteDefaultOptions) {\n    super();\n\n    this._autoActiveFirstOption = !!defaults.autoActiveFirstOption;\n  }\n\n  ngAfterContentInit() {\n    this._keyManager = new ActiveDescendantKeyManager<MatOption>(this.options).withWrap();\n    // Set the initial visibility state.\n    this._setVisibility();\n  }\n\n  /**\n   * Sets the panel scrollTop. This allows us to manually scroll to display options\n   * above or below the fold, as they are not actually being focused when active.\n   */\n  _setScrollTop(scrollTop: number): void {\n    if (this.panel) {\n      this.panel.nativeElement.scrollTop = scrollTop;\n    }\n  }\n\n  /** Returns the panel's scrollTop. */\n  _getScrollTop(): number {\n    return this.panel ? this.panel.nativeElement.scrollTop : 0;\n  }\n\n  /** Panel should hide itself when the option list is empty. */\n  _setVisibility() {\n    this.showPanel = !!this.options.length;\n    this._classList['mat-autocomplete-visible'] = this.showPanel;\n    this._classList['mat-autocomplete-hidden'] = !this.showPanel;\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Emits the `select` event. */\n  _emitSelectEvent(option: MatOption): void {\n    const event = new MatAutocompleteSelectedEvent(this, option);\n    this.optionSelected.emit(event);\n  }\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, ElementRef} from '@angular/core';\n\n/**\n * Directive applied to an element to make it usable\n * as a connection point for an autocomplete panel.\n */\n@Directive({\n  selector: '[matAutocompleteOrigin]',\n  exportAs: 'matAutocompleteOrigin',\n})\nexport class MatAutocompleteOrigin {\n  constructor(\n      /** Reference to the element on which the directive is applied. */\n      public elementRef: ElementRef<HTMLElement>) { }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {MatOptionModule, MatCommonModule} from '@angular/material/core';\nimport {MatAutocomplete} from './autocomplete';\nimport {\n  MatAutocompleteTrigger,\n  MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY_PROVIDER,\n} from './autocomplete-trigger';\nimport {MatAutocompleteOrigin} from './autocomplete-origin';\n\n@NgModule({\n  imports: [MatOptionModule, OverlayModule, MatCommonModule, CommonModule],\n  exports: [\n    MatAutocomplete,\n    MatOptionModule,\n    MatAutocompleteTrigger,\n    MatAutocompleteOrigin,\n    MatCommonModule\n  ],\n  declarations: [MatAutocomplete, MatAutocompleteTrigger, MatAutocompleteOrigin],\n  providers: [MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY_PROVIDER],\n})\nexport class MatAutocompleteModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {AriaDescriber} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {DOCUMENT} from '@angular/common';\nimport {Directive, ElementRef, Inject, Input, NgZone, OnDestroy, Optional} from '@angular/core';\nimport {ThemePalette} from '@angular/material/core';\n\n\nlet nextId = 0;\n\nexport type MatBadgePosition = 'above after' | 'above before' | 'below before' | 'below after';\nexport type MatBadgeSize = 'small' | 'medium' | 'large';\n\n/** Directive to display a text badge. */\n@Directive({\n  selector: '[matBadge]',\n  host: {\n    'class': 'mat-badge',\n    '[class.mat-badge-overlap]': 'overlap',\n    '[class.mat-badge-above]': 'isAbove()',\n    '[class.mat-badge-below]': '!isAbove()',\n    '[class.mat-badge-before]': '!isAfter()',\n    '[class.mat-badge-after]': 'isAfter()',\n    '[class.mat-badge-small]': 'size === \"small\"',\n    '[class.mat-badge-medium]': 'size === \"medium\"',\n    '[class.mat-badge-large]': 'size === \"large\"',\n    '[class.mat-badge-hidden]': 'hidden',\n  },\n})\nexport class MatBadge implements OnDestroy {\n\n  /** The color of the badge. Can be `primary`, `accent`, or `warn`. */\n  @Input('matBadgeColor')\n  get color(): ThemePalette { return this._color; }\n  set color(value: ThemePalette) {\n    this._setColor(value);\n    this._color = value;\n  }\n  private _color: ThemePalette = 'primary';\n\n  /** Whether the badge should overlap its contents or not */\n  @Input('matBadgeOverlap')\n  get overlap(): boolean { return this._overlap; }\n  set overlap(val: boolean) {\n    this._overlap = coerceBooleanProperty(val);\n  }\n  private _overlap: boolean = true;\n\n  /**\n   * Position the badge should reside.\n   * Accepts any combination of 'above'|'below' and 'before'|'after'\n   */\n  @Input('matBadgePosition') position: MatBadgePosition = 'above after';\n\n  /** The content for the badge */\n  @Input('matBadge')\n  get content(): string { return this._content; }\n  set content(val: string) {\n    this._content = val;\n    this._updateTextContent();\n  }\n  private _content: string;\n\n  /** Message used to describe the decorated element via aria-describedby */\n  @Input('matBadgeDescription')\n  get description(): string { return this._description; }\n  set description(newDescription: string) {\n    if (newDescription !== this._description) {\n      this._updateHostAriaDescription(newDescription, this._description);\n      this._description = newDescription;\n    }\n  }\n  private _description: string;\n\n  /** Size of the badge. Can be 'small', 'medium', or 'large'. */\n  @Input('matBadgeSize') size: MatBadgeSize = 'medium';\n\n  /** Whether the badge is hidden. */\n  @Input('matBadgeHidden')\n  get hidden(): boolean { return this._hidden; }\n  set hidden(val: boolean) {\n    this._hidden = coerceBooleanProperty(val);\n  }\n  private _hidden: boolean;\n\n  /** Unique id for the badge */\n  _id: number = nextId++;\n\n  private _badgeElement: HTMLElement;\n\n  constructor(\n      @Optional() @Inject(DOCUMENT) private _document: any,\n      private _ngZone: NgZone,\n      private _elementRef: ElementRef,\n      private _ariaDescriber: AriaDescriber) {}\n\n  /** Whether the badge is above the host or not */\n  isAbove(): boolean {\n    return this.position.indexOf('below') === -1;\n  }\n\n  /** Whether the badge is after the host or not */\n  isAfter(): boolean {\n    return this.position.indexOf('before') === -1;\n  }\n\n  ngOnDestroy() {\n    if (this.description && this._badgeElement) {\n      this._ariaDescriber.removeDescription(this._badgeElement, this.description);\n    }\n  }\n\n  /** Injects a span element into the DOM with the content. */\n  private _updateTextContent(): HTMLSpanElement {\n    if (!this._badgeElement) {\n      this._badgeElement = this._createBadgeElement();\n    } else {\n      this._badgeElement.textContent = this.content;\n    }\n    return this._badgeElement;\n  }\n\n  /** Creates the badge element */\n  private _createBadgeElement(): HTMLElement {\n    const badgeElement = this._document.createElement('span');\n    const activeClass = 'mat-badge-active';\n\n    badgeElement.setAttribute('id', `mat-badge-content-${this._id}`);\n    badgeElement.classList.add('mat-badge-content');\n    badgeElement.textContent = this.content;\n\n    if (this.description) {\n      badgeElement.setAttribute('aria-label', this.description);\n    }\n\n    this._elementRef.nativeElement.appendChild(badgeElement);\n\n    // animate in after insertion\n    if (typeof requestAnimationFrame === 'function') {\n      this._ngZone.runOutsideAngular(() => {\n        requestAnimationFrame(() => {\n          badgeElement.classList.add(activeClass);\n        });\n      });\n    } else {\n      badgeElement.classList.add(activeClass);\n    }\n\n    return badgeElement;\n  }\n\n  /** Sets the aria-label property on the element */\n  private _updateHostAriaDescription(newDescription: string, oldDescription: string): void {\n    // ensure content available before setting label\n    const content = this._updateTextContent();\n\n    if (oldDescription) {\n      this._ariaDescriber.removeDescription(content, oldDescription);\n    }\n\n    if (newDescription) {\n      this._ariaDescriber.describe(content, newDescription);\n    }\n  }\n\n  /** Adds css theme class given the color to the component host */\n  private _setColor(colorPalette: ThemePalette) {\n    if (colorPalette !== this._color) {\n      if (this._color) {\n        this._elementRef.nativeElement.classList.remove(`mat-badge-${this._color}`);\n      }\n      if (colorPalette) {\n        this._elementRef.nativeElement.classList.add(`mat-badge-${colorPalette}`);\n      }\n    }\n  }\n\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {A11yModule} from '@angular/cdk/a11y';\nimport {MatBadge} from './badge';\n\n\n@NgModule({\n  imports: [\n    A11yModule,\n    MatCommonModule\n  ],\n  exports: [MatBadge],\n  declarations: [MatBadge],\n})\nexport class MatBadgeModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ViewContainerRef, InjectionToken} from '@angular/core';\nimport {Direction} from '@angular/cdk/bidi';\n\n/** Injection token that can be used to access the data that was passed in to a bottom sheet. */\nexport const MAT_BOTTOM_SHEET_DATA = new InjectionToken<any>('MatBottomSheetData');\n\n/**\n * Configuration used when opening a bottom sheet.\n */\nexport class MatBottomSheetConfig<D = any> {\n  /** The view container to place the overlay for the bottom sheet into. */\n  viewContainerRef?: ViewContainerRef;\n\n  /** Extra CSS classes to be added to the bottom sheet container. */\n  panelClass?: string | string[];\n\n  /** Text layout direction for the bottom sheet. */\n  direction?: Direction;\n\n  /** Data being injected into the child component. */\n  data?: D | null = null;\n\n  /** Whether the bottom sheet has a backdrop. */\n  hasBackdrop?: boolean = true;\n\n  /** Custom class for the backdrop. */\n  backdropClass?: string;\n\n  /** Whether the user can use escape or clicking outside to close the bottom sheet. */\n  disableClose?: boolean = false;\n\n  /** Aria label to assign to the bottom sheet element. */\n  ariaLabel?: string | null = null;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\nimport {AnimationCurves, AnimationDurations} from '@angular/material/core';\n\n/** Animations used by the Material bottom sheet. */\nexport const matBottomSheetAnimations: {\n  readonly bottomSheetState: AnimationTriggerMetadata;\n} = {\n  /** Animation that shows and hides a bottom sheet. */\n  bottomSheetState: trigger('state', [\n    state('void, hidden', style({transform: 'translateY(100%)'})),\n    state('visible', style({transform: 'translateY(0%)'})),\n    transition('visible => void, visible => hidden',\n        animate(`${AnimationDurations.COMPLEX} ${AnimationCurves.ACCELERATION_CURVE}`)),\n    transition('void => visible',\n        animate(`${AnimationDurations.EXITING} ${AnimationCurves.DECELERATION_CURVE}`)),\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ComponentRef,\n  EmbeddedViewRef,\n  ViewChild,\n  OnDestroy,\n  ElementRef,\n  ChangeDetectionStrategy,\n  ViewEncapsulation,\n  ChangeDetectorRef,\n  EventEmitter,\n  Inject,\n  Optional,\n} from '@angular/core';\nimport {AnimationEvent} from '@angular/animations';\nimport {\n  BasePortalOutlet,\n  ComponentPortal,\n  TemplatePortal,\n  CdkPortalOutlet,\n} from '@angular/cdk/portal';\nimport {BreakpointObserver, Breakpoints} from '@angular/cdk/layout';\nimport {MatBottomSheetConfig} from './bottom-sheet-config';\nimport {matBottomSheetAnimations} from './bottom-sheet-animations';\nimport {Subscription} from 'rxjs';\nimport {DOCUMENT} from '@angular/common';\nimport {FocusTrap, FocusTrapFactory} from '@angular/cdk/a11y';\n\n// TODO(crisbeto): consolidate some logic between this, MatDialog and MatSnackBar\n\n/**\n * Internal component that wraps user-provided bottom sheet content.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-bottom-sheet-container',\n  templateUrl: 'bottom-sheet-container.html',\n  styleUrls: ['bottom-sheet-container.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  animations: [matBottomSheetAnimations.bottomSheetState],\n  host: {\n    'class': 'mat-bottom-sheet-container',\n    'tabindex': '-1',\n    'role': 'dialog',\n    'aria-modal': 'true',\n    '[attr.aria-label]': 'bottomSheetConfig?.ariaLabel',\n    '[@state]': '_animationState',\n    '(@state.start)': '_onAnimationStart($event)',\n    '(@state.done)': '_onAnimationDone($event)'\n  },\n})\nexport class MatBottomSheetContainer extends BasePortalOutlet implements OnDestroy {\n  private _breakpointSubscription: Subscription;\n\n  /** The portal outlet inside of this container into which the content will be loaded. */\n  @ViewChild(CdkPortalOutlet) _portalOutlet: CdkPortalOutlet;\n\n  /** The state of the bottom sheet animations. */\n  _animationState: 'void' | 'visible' | 'hidden' = 'void';\n\n  /** Emits whenever the state of the animation changes. */\n  _animationStateChanged = new EventEmitter<AnimationEvent>();\n\n  /** The class that traps and manages focus within the bottom sheet. */\n  private _focusTrap: FocusTrap;\n\n  /** Element that was focused before the bottom sheet was opened. */\n  private _elementFocusedBeforeOpened: HTMLElement | null = null;\n\n  /** Server-side rendering-compatible reference to the global document object. */\n  private _document: Document;\n\n  /** Whether the component has been destroyed. */\n  private _destroyed: boolean;\n\n  constructor(\n    private _elementRef: ElementRef,\n    private _changeDetectorRef: ChangeDetectorRef,\n    private _focusTrapFactory: FocusTrapFactory,\n    breakpointObserver: BreakpointObserver,\n    @Optional() @Inject(DOCUMENT) document: any,\n    /** The bottom sheet configuration. */\n    public bottomSheetConfig: MatBottomSheetConfig) {\n    super();\n\n    this._document = document;\n    this._breakpointSubscription = breakpointObserver\n      .observe([Breakpoints.Medium, Breakpoints.Large, Breakpoints.XLarge])\n      .subscribe(() => {\n        this._toggleClass('mat-bottom-sheet-container-medium',\n            breakpointObserver.isMatched(Breakpoints.Medium));\n        this._toggleClass('mat-bottom-sheet-container-large',\n            breakpointObserver.isMatched(Breakpoints.Large));\n        this._toggleClass('mat-bottom-sheet-container-xlarge',\n            breakpointObserver.isMatched(Breakpoints.XLarge));\n      });\n  }\n\n  /** Attach a component portal as content to this bottom sheet container. */\n  attachComponentPortal<T>(portal: ComponentPortal<T>): ComponentRef<T> {\n    this._validatePortalAttached();\n    this._setPanelClass();\n    this._savePreviouslyFocusedElement();\n    return this._portalOutlet.attachComponentPortal(portal);\n  }\n\n  /** Attach a template portal as content to this bottom sheet container. */\n  attachTemplatePortal<C>(portal: TemplatePortal<C>): EmbeddedViewRef<C> {\n    this._validatePortalAttached();\n    this._setPanelClass();\n    this._savePreviouslyFocusedElement();\n    return this._portalOutlet.attachTemplatePortal(portal);\n  }\n\n  /** Begin animation of bottom sheet entrance into view. */\n  enter(): void {\n    if (!this._destroyed) {\n      this._animationState = 'visible';\n      this._changeDetectorRef.detectChanges();\n    }\n  }\n\n  /** Begin animation of the bottom sheet exiting from view. */\n  exit(): void {\n    if (!this._destroyed) {\n      this._animationState = 'hidden';\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  ngOnDestroy() {\n    this._breakpointSubscription.unsubscribe();\n    this._destroyed = true;\n  }\n\n  _onAnimationDone(event: AnimationEvent) {\n    if (event.toState === 'visible') {\n      this._trapFocus();\n    } else if (event.toState === 'hidden') {\n      this._restoreFocus();\n    }\n\n    this._animationStateChanged.emit(event);\n  }\n\n  _onAnimationStart(event: AnimationEvent) {\n    this._animationStateChanged.emit(event);\n  }\n\n  private _toggleClass(cssClass: string, add: boolean) {\n    const classList = this._elementRef.nativeElement.classList;\n    add ? classList.add(cssClass) : classList.remove(cssClass);\n  }\n\n  private _validatePortalAttached() {\n    if (this._portalOutlet.hasAttached()) {\n      throw Error('Attempting to attach bottom sheet content after content is already attached');\n    }\n  }\n\n  private _setPanelClass() {\n    const element: HTMLElement = this._elementRef.nativeElement;\n    const panelClass = this.bottomSheetConfig.panelClass;\n\n    if (Array.isArray(panelClass)) {\n      // Note that we can't use a spread here, because IE doesn't support multiple arguments.\n      panelClass.forEach(cssClass => element.classList.add(cssClass));\n    } else if (panelClass) {\n      element.classList.add(panelClass);\n    }\n  }\n\n\n  /** Moves the focus inside the focus trap. */\n  private _trapFocus() {\n    if (!this._focusTrap) {\n      this._focusTrap = this._focusTrapFactory.create(this._elementRef.nativeElement);\n    }\n\n    this._focusTrap.focusInitialElementWhenReady();\n  }\n\n  /** Restores focus to the element that was focused before the bottom sheet opened. */\n  private _restoreFocus() {\n    const toFocus = this._elementFocusedBeforeOpened;\n\n    // We need the extra check, because IE can set the `activeElement` to null in some cases.\n    if (toFocus && typeof toFocus.focus === 'function') {\n      toFocus.focus();\n    }\n\n    if (this._focusTrap) {\n      this._focusTrap.destroy();\n    }\n  }\n\n  /** Saves a reference to the element that was focused before the bottom sheet was opened. */\n  private _savePreviouslyFocusedElement() {\n    this._elementFocusedBeforeOpened = this._document.activeElement as HTMLElement;\n\n    // The `focus` method isn't available during server-side rendering.\n    if (this._elementRef.nativeElement.focus) {\n      Promise.resolve().then(() => this._elementRef.nativeElement.focus());\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatBottomSheetContainer} from './bottom-sheet-container';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    OverlayModule,\n    MatCommonModule,\n    PortalModule,\n  ],\n  exports: [MatBottomSheetContainer, MatCommonModule],\n  declarations: [MatBottomSheetContainer],\n  entryComponents: [MatBottomSheetContainer],\n})\nexport class MatBottomSheetModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ESCAPE} from '@angular/cdk/keycodes';\nimport {OverlayRef} from '@angular/cdk/overlay';\nimport {merge, Observable, Subject} from 'rxjs';\nimport {filter, take} from 'rxjs/operators';\nimport {MatBottomSheetContainer} from './bottom-sheet-container';\n\n\n/**\n * Reference to a bottom sheet dispatched from the bottom sheet service.\n */\nexport class MatBottomSheetRef<T = any, R = any> {\n  /** Instance of the component making up the content of the bottom sheet. */\n  instance: T;\n\n  /**\n   * Instance of the component into which the bottom sheet content is projected.\n   * @docs-private\n   */\n  containerInstance: MatBottomSheetContainer;\n\n  /** Subject for notifying the user that the bottom sheet has been dismissed. */\n  private readonly _afterDismissed = new Subject<R | undefined>();\n\n  /** Subject for notifying the user that the bottom sheet has opened and appeared. */\n  private readonly _afterOpened = new Subject<void>();\n\n  /** Result to be passed down to the `afterDismissed` stream. */\n  private _result: R | undefined;\n\n  constructor(containerInstance: MatBottomSheetContainer, private _overlayRef: OverlayRef) {\n    this.containerInstance = containerInstance;\n\n    // Emit when opening animation completes\n    containerInstance._animationStateChanged.pipe(\n      filter(event => event.phaseName === 'done' && event.toState === 'visible'),\n      take(1)\n    )\n    .subscribe(() => {\n      this._afterOpened.next();\n      this._afterOpened.complete();\n    });\n\n    // Dispose overlay when closing animation is complete\n    containerInstance._animationStateChanged.pipe(\n      filter(event => event.phaseName === 'done' && event.toState === 'hidden'),\n      take(1)\n    )\n    .subscribe(() => {\n      this._overlayRef.dispose();\n      this._afterDismissed.next(this._result);\n      this._afterDismissed.complete();\n    });\n\n    if (!containerInstance.bottomSheetConfig.disableClose) {\n      merge(\n        _overlayRef.backdropClick(),\n        _overlayRef.keydownEvents().pipe(filter(event => event.keyCode === ESCAPE))\n      ).subscribe(() => this.dismiss());\n    }\n  }\n\n  /**\n   * Dismisses the bottom sheet.\n   * @param result Data to be passed back to the bottom sheet opener.\n   */\n  dismiss(result?: R): void {\n    if (!this._afterDismissed.closed) {\n      // Transition the backdrop in parallel to the bottom sheet.\n      this.containerInstance._animationStateChanged.pipe(\n        filter(event => event.phaseName === 'start'),\n        take(1)\n      ).subscribe(() => this._overlayRef.detachBackdrop());\n\n      this._result = result;\n      this.containerInstance.exit();\n    }\n  }\n\n  /** Gets an observable that is notified when the bottom sheet is finished closing. */\n  afterDismissed(): Observable<R | undefined> {\n    return this._afterDismissed.asObservable();\n  }\n\n  /** Gets an observable that is notified when the bottom sheet has opened and appeared. */\n  afterOpened(): Observable<void> {\n    return this._afterOpened.asObservable();\n  }\n\n  /**\n   * Gets an observable that emits when the overlay's backdrop has been clicked.\n   */\n  backdropClick(): Observable<MouseEvent> {\n    return this._overlayRef.backdropClick();\n  }\n\n  /**\n   * Gets an observable that emits when keydown events are targeted on the overlay.\n   */\n  keydownEvents(): Observable<KeyboardEvent> {\n    return this._overlayRef.keydownEvents();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directionality} from '@angular/cdk/bidi';\nimport {Overlay, OverlayConfig, OverlayRef} from '@angular/cdk/overlay';\nimport {ComponentPortal, ComponentType, PortalInjector, TemplatePortal} from '@angular/cdk/portal';\nimport {ComponentRef, Injectable, Injector, Optional, SkipSelf, TemplateRef} from '@angular/core';\nimport {of as observableOf} from 'rxjs';\nimport {MAT_BOTTOM_SHEET_DATA, MatBottomSheetConfig} from './bottom-sheet-config';\nimport {MatBottomSheetContainer} from './bottom-sheet-container';\nimport {MatBottomSheetModule} from './bottom-sheet-module';\nimport {MatBottomSheetRef} from './bottom-sheet-ref';\n\n\n/**\n * Service to trigger Material Design bottom sheets.\n */\n@Injectable({providedIn: MatBottomSheetModule})\nexport class MatBottomSheet {\n  private _bottomSheetRefAtThisLevel: MatBottomSheetRef<any> | null = null;\n\n  /** Reference to the currently opened bottom sheet. */\n  get _openedBottomSheetRef(): MatBottomSheetRef<any> | null {\n    const parent = this._parentBottomSheet;\n    return parent ? parent._openedBottomSheetRef : this._bottomSheetRefAtThisLevel;\n  }\n\n  set _openedBottomSheetRef(value: MatBottomSheetRef<any> | null) {\n    if (this._parentBottomSheet) {\n      this._parentBottomSheet._openedBottomSheetRef = value;\n    } else {\n      this._bottomSheetRefAtThisLevel = value;\n    }\n  }\n\n  constructor(\n      private _overlay: Overlay,\n      private _injector: Injector,\n      @Optional() @SkipSelf() private _parentBottomSheet: MatBottomSheet) {}\n\n  open<T, D = any, R = any>(component: ComponentType<T>,\n                   config?: MatBottomSheetConfig<D>): MatBottomSheetRef<T, R>;\n  open<T, D = any, R = any>(template: TemplateRef<T>,\n                   config?: MatBottomSheetConfig<D>): MatBottomSheetRef<T, R>;\n\n  open<T, D = any, R = any>(componentOrTemplateRef: ComponentType<T> | TemplateRef<T>,\n                   config?: MatBottomSheetConfig<D>): MatBottomSheetRef<T, R> {\n\n    const _config = _applyConfigDefaults(config);\n    const overlayRef = this._createOverlay(_config);\n    const container = this._attachContainer(overlayRef, _config);\n    const ref = new MatBottomSheetRef<T, R>(container, overlayRef);\n\n    if (componentOrTemplateRef instanceof TemplateRef) {\n      container.attachTemplatePortal(new TemplatePortal<T>(componentOrTemplateRef, null!, {\n        $implicit: _config.data,\n        bottomSheetRef: ref\n      } as any));\n    } else {\n      const portal = new ComponentPortal(componentOrTemplateRef, undefined,\n            this._createInjector(_config, ref));\n      const contentRef = container.attachComponentPortal(portal);\n      ref.instance = contentRef.instance;\n    }\n\n    // When the bottom sheet is dismissed, clear the reference to it.\n    ref.afterDismissed().subscribe(() => {\n      // Clear the bottom sheet ref if it hasn't already been replaced by a newer one.\n      if (this._openedBottomSheetRef == ref) {\n        this._openedBottomSheetRef = null;\n      }\n    });\n\n    if (this._openedBottomSheetRef) {\n      // If a bottom sheet is already in view, dismiss it and enter the\n      // new bottom sheet after exit animation is complete.\n      this._openedBottomSheetRef.afterDismissed().subscribe(() => ref.containerInstance.enter());\n      this._openedBottomSheetRef.dismiss();\n    } else {\n      // If no bottom sheet is in view, enter the new bottom sheet.\n      ref.containerInstance.enter();\n    }\n\n    this._openedBottomSheetRef = ref;\n\n    return ref;\n  }\n\n  /**\n   * Dismisses the currently-visible bottom sheet.\n   */\n  dismiss(): void {\n    if (this._openedBottomSheetRef) {\n      this._openedBottomSheetRef.dismiss();\n    }\n  }\n\n  /**\n   * Attaches the bottom sheet container component to the overlay.\n   */\n  private _attachContainer(overlayRef: OverlayRef,\n                           config: MatBottomSheetConfig): MatBottomSheetContainer {\n\n    const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n    const injector = new PortalInjector(userInjector || this._injector, new WeakMap([\n      [MatBottomSheetConfig, config]\n    ]));\n\n    const containerPortal =\n        new ComponentPortal(MatBottomSheetContainer, config.viewContainerRef, injector);\n    const containerRef: ComponentRef<MatBottomSheetContainer> = overlayRef.attach(containerPortal);\n    return containerRef.instance;\n  }\n\n  /**\n   * Creates a new overlay and places it in the correct location.\n   * @param config The user-specified bottom sheet config.\n   */\n  private _createOverlay(config: MatBottomSheetConfig): OverlayRef {\n    const overlayConfig = new OverlayConfig({\n      direction: config.direction,\n      hasBackdrop: config.hasBackdrop,\n      maxWidth: '100%',\n      scrollStrategy: this._overlay.scrollStrategies.block(),\n      positionStrategy: this._overlay.position()\n        .global()\n        .centerHorizontally()\n        .bottom('0')\n    });\n\n    if (config.backdropClass) {\n      overlayConfig.backdropClass = config.backdropClass;\n    }\n\n    return this._overlay.create(overlayConfig);\n  }\n\n  /**\n   * Creates an injector to be used inside of a bottom sheet component.\n   * @param config Config that was used to create the bottom sheet.\n   * @param bottomSheetRef Reference to the bottom sheet.\n   */\n  private _createInjector<T>(config: MatBottomSheetConfig,\n                             bottomSheetRef: MatBottomSheetRef<T>): PortalInjector {\n\n    const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n    const injectionTokens = new WeakMap<any, any>([\n      [MatBottomSheetRef, bottomSheetRef],\n      [MAT_BOTTOM_SHEET_DATA, config.data]\n    ]);\n\n    if (config.direction &&\n        (!userInjector || !userInjector.get<Directionality | null>(Directionality, null))) {\n      injectionTokens.set(Directionality, {\n        value: config.direction,\n        change: observableOf()\n      });\n    }\n\n    return new PortalInjector(userInjector || this._injector, injectionTokens);\n  }\n}\n\n/**\n * Applies default options to the bottom sheet config.\n * @param config The configuration to which the defaults will be applied.\n * @returns The new configuration object with defaults applied.\n */\nfunction _applyConfigDefaults(config?: MatBottomSheetConfig): MatBottomSheetConfig {\n  return {...new MatBottomSheetConfig(), ...config};\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {ENTER, SPACE} from '@angular/cdk/keycodes';\nimport {\n  AfterViewChecked,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  InjectionToken,\n  Input,\n  OnDestroy,\n  Optional,\n  Output,\n  QueryList,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {Subject} from 'rxjs';\nimport {MatOptgroup} from './optgroup';\n\n/**\n * Option IDs need to be unique across components, so this counter exists outside of\n * the component definition.\n */\nlet _uniqueIdCounter = 0;\n\n/** Event object emitted by MatOption when selected or deselected. */\nexport class MatOptionSelectionChange {\n  constructor(\n    /** Reference to the option that emitted the event. */\n    public source: MatOption,\n    /** Whether the change in the option's value was a result of a user action. */\n    public isUserInput = false) { }\n}\n\n/**\n * Describes a parent component that manages a list of options.\n * Contains properties that the options can inherit.\n * @docs-private\n */\nexport interface MatOptionParentComponent {\n  disableRipple?: boolean;\n  multiple?: boolean;\n}\n\n/**\n * Injection token used to provide the parent component to options.\n */\nexport const MAT_OPTION_PARENT_COMPONENT =\n    new InjectionToken<MatOptionParentComponent>('MAT_OPTION_PARENT_COMPONENT');\n\n/**\n * Single option inside of a `<mat-select>` element.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-option',\n  exportAs: 'matOption',\n  host: {\n    'role': 'option',\n    '[attr.tabindex]': '_getTabIndex()',\n    '[class.mat-selected]': 'selected',\n    '[class.mat-option-multiple]': 'multiple',\n    '[class.mat-active]': 'active',\n    '[id]': 'id',\n    '[attr.aria-selected]': 'selected.toString()',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[class.mat-option-disabled]': 'disabled',\n    '(click)': '_selectViaInteraction()',\n    '(keydown)': '_handleKeydown($event)',\n    'class': 'mat-option',\n  },\n  styleUrls: ['option.css'],\n  templateUrl: 'option.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatOption implements AfterViewChecked, OnDestroy {\n  private _selected = false;\n  private _active = false;\n  private _disabled = false;\n  private _id = `mat-option-${_uniqueIdCounter++}`;\n  private _mostRecentViewValue = '';\n\n  /** Whether the wrapping component is in multiple selection mode. */\n  get multiple() { return this._parent && this._parent.multiple; }\n\n  /** The unique ID of the option. */\n  get id(): string { return this._id; }\n\n  /** Whether or not the option is currently selected. */\n  get selected(): boolean { return this._selected; }\n\n  /** The form value of the option. */\n  @Input() value: any;\n\n  /** Whether the option is disabled. */\n  @Input()\n  get disabled() { return (this.group && this.group.disabled) || this._disabled; }\n  set disabled(value: any) { this._disabled = coerceBooleanProperty(value); }\n\n  /** Whether ripples for the option are disabled. */\n  get disableRipple() { return this._parent && this._parent.disableRipple; }\n\n  /** Event emitted when the option is selected or deselected. */\n  // tslint:disable-next-line:no-output-on-prefix\n  @Output() readonly onSelectionChange = new EventEmitter<MatOptionSelectionChange>();\n\n  /** Emits when the state of the option changes and any parents have to be notified. */\n  readonly _stateChanges = new Subject<void>();\n\n  constructor(\n    private _element: ElementRef,\n    private _changeDetectorRef: ChangeDetectorRef,\n    @Optional() @Inject(MAT_OPTION_PARENT_COMPONENT) private _parent: MatOptionParentComponent,\n    @Optional() readonly group: MatOptgroup) {}\n\n  /**\n   * Whether or not the option is currently active and ready to be selected.\n   * An active option displays styles as if it is focused, but the\n   * focus is actually retained somewhere else. This comes in handy\n   * for components like autocomplete where focus must remain on the input.\n   */\n  get active(): boolean {\n    return this._active;\n  }\n\n  /**\n   * The displayed value of the option. It is necessary to show the selected option in the\n   * select's trigger.\n   */\n  get viewValue(): string {\n    // TODO(kara): Add input property alternative for node envs.\n    return (this._getHostElement().textContent || '').trim();\n  }\n\n  /** Selects the option. */\n  select(): void {\n    if (!this._selected) {\n      this._selected = true;\n      this._changeDetectorRef.markForCheck();\n      this._emitSelectionChangeEvent();\n    }\n  }\n\n  /** Deselects the option. */\n  deselect(): void {\n    if (this._selected) {\n      this._selected = false;\n      this._changeDetectorRef.markForCheck();\n      this._emitSelectionChangeEvent();\n    }\n  }\n\n  /** Sets focus onto this option. */\n  focus(): void {\n    const element = this._getHostElement();\n\n    if (typeof element.focus === 'function') {\n      element.focus();\n    }\n  }\n\n  /**\n   * This method sets display styles on the option to make it appear\n   * active. This is used by the ActiveDescendantKeyManager so key\n   * events will display the proper options as active on arrow key events.\n   */\n  setActiveStyles(): void {\n    if (!this._active) {\n      this._active = true;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  /**\n   * This method removes display styles on the option that made it appear\n   * active. This is used by the ActiveDescendantKeyManager so key\n   * events will display the proper options as active on arrow key events.\n   */\n  setInactiveStyles(): void {\n    if (this._active) {\n      this._active = false;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  /** Gets the label to be used when determining whether the option should be focused. */\n  getLabel(): string {\n    return this.viewValue;\n  }\n\n  /** Ensures the option is selected when activated from the keyboard. */\n  _handleKeydown(event: KeyboardEvent): void {\n    if (event.keyCode === ENTER || event.keyCode === SPACE) {\n      this._selectViaInteraction();\n\n      // Prevent the page from scrolling down and form submits.\n      event.preventDefault();\n    }\n  }\n\n  /**\n   * `Selects the option while indicating the selection came from the user. Used to\n   * determine if the select's view -> model callback should be invoked.`\n   */\n  _selectViaInteraction(): void {\n    if (!this.disabled) {\n      this._selected = this.multiple ? !this._selected : true;\n      this._changeDetectorRef.markForCheck();\n      this._emitSelectionChangeEvent(true);\n    }\n  }\n\n  /** Returns the correct tabindex for the option depending on disabled state. */\n  _getTabIndex(): string {\n    return this.disabled ? '-1' : '0';\n  }\n\n  /** Gets the host DOM element. */\n  _getHostElement(): HTMLElement {\n    return this._element.nativeElement;\n  }\n\n  ngAfterViewChecked() {\n    // Since parent components could be using the option's label to display the selected values\n    // (e.g. `mat-select`) and they don't have a way of knowing if the option's label has changed\n    // we have to check for changes in the DOM ourselves and dispatch an event. These checks are\n    // relatively cheap, however we still limit them only to selected options in order to avoid\n    // hitting the DOM too often.\n    if (this._selected) {\n      const viewValue = this.viewValue;\n\n      if (viewValue !== this._mostRecentViewValue) {\n        this._mostRecentViewValue = viewValue;\n        this._stateChanges.next();\n      }\n    }\n  }\n\n  ngOnDestroy() {\n    this._stateChanges.complete();\n  }\n\n  /** Emits the selection change event. */\n  private _emitSelectionChangeEvent(isUserInput = false): void {\n    this.onSelectionChange.emit(new MatOptionSelectionChange(this, isUserInput));\n  }\n}\n\n/**\n * Counts the amount of option group labels that precede the specified option.\n * @param optionIndex Index of the option at which to start counting.\n * @param options Flat list of all of the options.\n * @param optionGroups Flat list of all of the option groups.\n * @docs-private\n */\nexport function _countGroupLabelsBeforeOption(optionIndex: number, options: QueryList<MatOption>,\n  optionGroups: QueryList<MatOptgroup>): number {\n\n  if (optionGroups.length) {\n    let optionsArray = options.toArray();\n    let groups = optionGroups.toArray();\n    let groupCounter = 0;\n\n    for (let i = 0; i < optionIndex + 1; i++) {\n      if (optionsArray[i].group && optionsArray[i].group === groups[groupCounter]) {\n        groupCounter++;\n      }\n    }\n\n    return groupCounter;\n  }\n\n  return 0;\n}\n\n/**\n * Determines the position to which to scroll a panel in order for an option to be into view.\n * @param optionIndex Index of the option to be scrolled into the view.\n * @param optionHeight Height of the options.\n * @param currentScrollPosition Current scroll position of the panel.\n * @param panelHeight Height of the panel.\n * @docs-private\n */\nexport function _getOptionScrollPosition(optionIndex: number, optionHeight: number,\n    currentScrollPosition: number, panelHeight: number): number {\n  const optionOffset = optionIndex * optionHeight;\n\n  if (optionOffset < currentScrollPosition) {\n    return optionOffset;\n  }\n\n  if (optionOffset + optionHeight > currentScrollPosition + panelHeight) {\n    return Math.max(0, optionOffset - panelHeight + optionHeight);\n  }\n\n  return currentScrollPosition;\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {MatRippleModule} from '../ripple/index';\nimport {MatPseudoCheckboxModule} from '../selection/index';\nimport {MatOption} from './option';\nimport {MatOptgroup} from './optgroup';\n\n\n@NgModule({\n  imports: [MatRippleModule, CommonModule, MatPseudoCheckboxModule],\n  exports: [MatOption, MatOptgroup],\n  declarations: [MatOption, MatOptgroup]\n})\nexport class MatOptionModule {}\n\n\nexport * from './option';\nexport * from './optgroup';\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {InjectionToken} from '@angular/core';\n\n/** InjectionToken that can be used to specify the global label options. */\nexport const MAT_LABEL_GLOBAL_OPTIONS =\n  new InjectionToken<LabelOptions>('mat-label-global-options');\n\n/** Type for the available floatLabel values. */\nexport type FloatLabelType = 'always' | 'never' | 'auto';\n\n/** Configurable options for floating labels. */\nexport interface LabelOptions {\n  /**\n   * Whether the label should float `always`, `never`, or `auto` (only when necessary).\n   * Default behavior is assumed to be `auto`.\n   */\n  float?: FloatLabelType;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, Input} from '@angular/core';\n\n\nlet nextUniqueId = 0;\n\n\n/** Single error message to be shown underneath the form field. */\n@Directive({\n  selector: 'mat-error',\n  host: {\n    'class': 'mat-error',\n    'role': 'alert',\n    '[attr.id]': 'id',\n  }\n})\nexport class MatError {\n  @Input() id: string = `mat-error-${nextUniqueId++}`;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/** Animations used by the MatFormField. */\nexport const matFormFieldAnimations: {\n  readonly transitionMessages: AnimationTriggerMetadata\n} = {\n  /** Animation that transitions the form field's error and hint messages. */\n  transitionMessages: trigger('transitionMessages', [\n    // TODO(mmalerba): Use angular animations for label animation as well.\n    state('enter', style({ opacity: 1, transform: 'translateY(0%)' })),\n    transition('void => enter', [\n      style({ opacity: 0, transform: 'translateY(-100%)' }),\n      animate('300ms cubic-bezier(0.55, 0, 0.55, 0.2)'),\n    ]),\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Observable} from 'rxjs';\nimport {NgControl} from '@angular/forms';\n\n\n/** An interface which allows a control to work inside of a `MatFormField`. */\nexport abstract class MatFormFieldControl<T> {\n  /** The value of the control. */\n  value: T | null;\n\n  /**\n   * Stream that emits whenever the state of the control changes such that the parent `MatFormField`\n   * needs to run change detection.\n   */\n  readonly stateChanges: Observable<void>;\n\n  /** The element ID for this control. */\n  readonly id: string;\n\n  /** The placeholder for this control. */\n  readonly placeholder: string;\n\n  /** Gets the NgControl for this control. */\n  readonly ngControl: NgControl | null;\n\n  /** Whether the control is focused. */\n  readonly focused: boolean;\n\n  /** Whether the control is empty. */\n  readonly empty: boolean;\n\n  /** Whether the `MatFormField` label should try to float. */\n  readonly shouldLabelFloat: boolean;\n\n  /** Whether the control is required. */\n  readonly required: boolean;\n\n  /** Whether the control is disabled. */\n  readonly disabled: boolean;\n\n  /** Whether the control is in an error state. */\n  readonly errorState: boolean;\n\n  /**\n   * An optional name for the control type that can be used to distinguish `mat-form-field` elements\n   * based on their control type. The form field will add a class,\n   * `mat-form-field-type-{{controlType}}` to its root element.\n   */\n  readonly controlType?: string;\n\n  /**\n   * Whether the input is currently in an autofilled state. If property is not present on the\n   * control it is assumed to be false.\n   */\n  readonly autofilled?: boolean;\n\n  /** Sets the list of element IDs that currently describe this control. */\n  abstract setDescribedByIds(ids: string[]): void;\n\n  /** Handles a click on the control's container. */\n  abstract onContainerClick(event: MouseEvent): void;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, Input} from '@angular/core';\n\n\nlet nextUniqueId = 0;\n\n\n/** Hint text to be shown underneath the form field control. */\n@Directive({\n  selector: 'mat-hint',\n  host: {\n    'class': 'mat-hint',\n    '[class.mat-right]': 'align == \"end\"',\n    '[attr.id]': 'id',\n    // Remove align attribute to prevent it from interfering with layout.\n    '[attr.align]': 'null',\n  }\n})\nexport class MatHint {\n  /** Whether to align the hint label at the start or end of the line. */\n  @Input() align: 'start' | 'end' = 'start';\n\n  /** Unique ID for the hint. Used for the aria-describedby on the form field control. */\n  @Input() id: string = `mat-hint-${nextUniqueId++}`;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive} from '@angular/core';\n\n\n/** The floating label for a `mat-form-field`. */\n@Directive({\n  selector: 'mat-label'\n})\nexport class MatLabel {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive} from '@angular/core';\n\n\n/**\n * The placeholder text for an `MatFormField`.\n * @deprecated Use `<mat-label>` to specify the label and the `placeholder` attribute to specify the\n *     placeholder.\n * @deletion-target 8.0.0\n */\n@Directive({\n  selector: 'mat-placeholder'\n})\nexport class MatPlaceholder {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive} from '@angular/core';\n\n\n/** Prefix to be placed the the front of the form field. */\n@Directive({\n  selector: '[matPrefix]',\n})\nexport class MatPrefix {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive} from '@angular/core';\n\n\n/** Suffix to be placed at the end of the form field. */\n@Directive({\n  selector: '[matSuffix]',\n})\nexport class MatSuffix {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  AfterContentChecked,\n  AfterContentInit,\n  AfterViewInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  ContentChildren,\n  ElementRef,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  Optional,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {\n  CanColor,\n  FloatLabelType,\n  LabelOptions,\n  MAT_LABEL_GLOBAL_OPTIONS,\n  mixinColor,\n} from '@angular/material/core';\nimport {EMPTY, fromEvent, merge} from 'rxjs';\nimport {startWith, take} from 'rxjs/operators';\nimport {MatError} from './error';\nimport {matFormFieldAnimations} from './form-field-animations';\nimport {MatFormFieldControl} from './form-field-control';\nimport {\n  getMatFormFieldDuplicatedHintError,\n  getMatFormFieldMissingControlError,\n  getMatFormFieldPlaceholderConflictError,\n} from './form-field-errors';\nimport {MatHint} from './hint';\nimport {MatLabel} from './label';\nimport {MatPlaceholder} from './placeholder';\nimport {MatPrefix} from './prefix';\nimport {MatSuffix} from './suffix';\nimport {Platform} from '@angular/cdk/platform';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\n\n\nlet nextUniqueId = 0;\nconst floatingLabelScale = 0.75;\nconst outlineGapPadding = 5;\n\n\n/**\n * Boilerplate for applying mixins to MatFormField.\n * @docs-private\n */\nexport class MatFormFieldBase {\n  constructor(public _elementRef: ElementRef) { }\n}\n\n/**\n * Base class to which we're applying the form field mixins.\n * @docs-private\n */\nexport const _MatFormFieldMixinBase = mixinColor(MatFormFieldBase, 'primary');\n\n/** Possible appearance styles for the form field. */\nexport type MatFormFieldAppearance = 'legacy' | 'standard' | 'fill' | 'outline';\n\n/**\n * Represents the default options form the form field that can be configured\n * using the `MAT_FORM_FIELD_DEFAULT_OPTIONS` injection token.\n */\nexport interface MatFormFieldDefaultOptions {\n  appearance?: MatFormFieldAppearance;\n}\n\n/**\n * Injection token that can be used to configure the\n * default options for all form field within an app.\n */\nexport const MAT_FORM_FIELD_DEFAULT_OPTIONS =\n    new InjectionToken<MatFormFieldDefaultOptions>('MAT_FORM_FIELD_DEFAULT_OPTIONS');\n\n\n/** Container for form controls that applies Material Design styling and behavior. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-form-field',\n  exportAs: 'matFormField',\n  templateUrl: 'form-field.html',\n  // MatInput is a directive and can't have styles, so we need to include its styles here.\n  // The MatInput styles are fairly minimal so it shouldn't be a big deal for people who\n  // aren't using MatInput.\n  styleUrls: [\n    'form-field.css',\n    'form-field-fill.css',\n    'form-field-legacy.css',\n    'form-field-outline.css',\n    'form-field-standard.css',\n    '../input/input.css',\n  ],\n  animations: [matFormFieldAnimations.transitionMessages],\n  host: {\n    'class': 'mat-form-field',\n    '[class.mat-form-field-appearance-standard]': 'appearance == \"standard\"',\n    '[class.mat-form-field-appearance-fill]': 'appearance == \"fill\"',\n    '[class.mat-form-field-appearance-outline]': 'appearance == \"outline\"',\n    '[class.mat-form-field-appearance-legacy]': 'appearance == \"legacy\"',\n    '[class.mat-form-field-invalid]': '_control.errorState',\n    '[class.mat-form-field-can-float]': '_canLabelFloat',\n    '[class.mat-form-field-should-float]': '_shouldLabelFloat()',\n    '[class.mat-form-field-hide-placeholder]': '_hideControlPlaceholder()',\n    '[class.mat-form-field-disabled]': '_control.disabled',\n    '[class.mat-form-field-autofilled]': '_control.autofilled',\n    '[class.mat-focused]': '_control.focused',\n    '[class.mat-accent]': 'color == \"accent\"',\n    '[class.mat-warn]': 'color == \"warn\"',\n    '[class.ng-untouched]': '_shouldForward(\"untouched\")',\n    '[class.ng-touched]': '_shouldForward(\"touched\")',\n    '[class.ng-pristine]': '_shouldForward(\"pristine\")',\n    '[class.ng-dirty]': '_shouldForward(\"dirty\")',\n    '[class.ng-valid]': '_shouldForward(\"valid\")',\n    '[class.ng-invalid]': '_shouldForward(\"invalid\")',\n    '[class.ng-pending]': '_shouldForward(\"pending\")',\n    '[class._mat-animation-noopable]': '!_animationsEnabled',\n  },\n  inputs: ['color'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\n\nexport class MatFormField extends _MatFormFieldMixinBase\n    implements AfterContentInit, AfterContentChecked, AfterViewInit, CanColor {\n  private _labelOptions: LabelOptions;\n\n  /** The form-field appearance style. */\n  @Input()\n  get appearance(): MatFormFieldAppearance {\n    return this._appearance || this._defaultOptions && this._defaultOptions.appearance || 'legacy';\n  }\n  set appearance(value: MatFormFieldAppearance) {\n    this._appearance = value;\n  }\n  _appearance: MatFormFieldAppearance;\n\n  /** Whether the required marker should be hidden. */\n  @Input()\n  get hideRequiredMarker(): boolean { return this._hideRequiredMarker; }\n  set hideRequiredMarker(value: boolean) {\n    this._hideRequiredMarker = coerceBooleanProperty(value);\n  }\n  private _hideRequiredMarker: boolean;\n\n  /** Override for the logic that disables the label animation in certain cases. */\n  private _showAlwaysAnimate = false;\n\n  /** Whether the floating label should always float or not. */\n  get _shouldAlwaysFloat(): boolean {\n    return this.floatLabel === 'always' && !this._showAlwaysAnimate;\n  }\n\n  /** Whether the label can float or not. */\n  get _canLabelFloat(): boolean { return this.floatLabel !== 'never'; }\n\n  /** State of the mat-hint and mat-error animations. */\n  _subscriptAnimationState: string = '';\n\n  /** Text for the form field hint. */\n  @Input()\n  get hintLabel(): string { return this._hintLabel; }\n  set hintLabel(value: string) {\n    this._hintLabel = value;\n    this._processHints();\n  }\n  private _hintLabel = '';\n\n  // Unique id for the hint label.\n  _hintLabelId: string = `mat-hint-${nextUniqueId++}`;\n\n  // Unique id for the internal form field label.\n  _labelId = `mat-form-field-label-${nextUniqueId++}`;\n\n  /**\n   * Whether the label should always float, never float or float as the user types.\n   *\n   * Note: only the legacy appearance supports the `never` option. `never` was originally added as a\n   * way to make the floating label emulate the behavior of a standard input placeholder. However\n   * the form field now supports both floating labels and placeholders. Therefore in the non-legacy\n   * appearances the `never` option has been disabled in favor of just using the placeholder.\n   */\n  @Input()\n  get floatLabel(): FloatLabelType {\n    return this.appearance !== 'legacy' && this._floatLabel === 'never' ? 'auto' : this._floatLabel;\n  }\n  set floatLabel(value: FloatLabelType) {\n    if (value !== this._floatLabel) {\n      this._floatLabel = value || this._labelOptions.float || 'auto';\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n  private _floatLabel: FloatLabelType;\n\n  /** Whether the Angular animations are enabled. */\n  _animationsEnabled: boolean;\n\n  _outlineGapWidth = 0;\n  _outlineGapStart = 0;\n  _initialGapCalculated = false;\n\n  /**\n   * @deprecated\n   * @deletion-target 7.0.0\n   */\n  @ViewChild('underline') underlineRef: ElementRef;\n\n  @ViewChild('connectionContainer') _connectionContainerRef: ElementRef;\n  @ViewChild('inputContainer') _inputContainerRef: ElementRef;\n  @ViewChild('label') private _label: ElementRef;\n  @ContentChild(MatFormFieldControl) _control: MatFormFieldControl<any>;\n  @ContentChild(MatPlaceholder) _placeholderChild: MatPlaceholder;\n  @ContentChild(MatLabel) _labelChild: MatLabel;\n  @ContentChildren(MatError) _errorChildren: QueryList<MatError>;\n  @ContentChildren(MatHint) _hintChildren: QueryList<MatHint>;\n  @ContentChildren(MatPrefix) _prefixChildren: QueryList<MatPrefix>;\n  @ContentChildren(MatSuffix) _suffixChildren: QueryList<MatSuffix>;\n\n  constructor(\n      public _elementRef: ElementRef,\n      private _changeDetectorRef: ChangeDetectorRef,\n      @Optional() @Inject(MAT_LABEL_GLOBAL_OPTIONS) labelOptions: LabelOptions,\n      @Optional() private _dir: Directionality,\n      @Optional() @Inject(MAT_FORM_FIELD_DEFAULT_OPTIONS) private _defaultOptions:\n          MatFormFieldDefaultOptions,\n      // @deletion-target 7.0.0 _platform, _ngZone and _animationMode to be made required.\n      private _platform?: Platform,\n      private _ngZone?: NgZone,\n      @Optional() @Inject(ANIMATION_MODULE_TYPE) _animationMode?: string) {\n    super(_elementRef);\n\n    this._labelOptions = labelOptions ? labelOptions : {};\n    this.floatLabel = this._labelOptions.float || 'auto';\n    this._animationsEnabled = _animationMode !== 'NoopAnimations';\n  }\n\n  /**\n   * Gets an ElementRef for the element that a overlay attached to the form-field should be\n   * positioned relative to.\n   */\n  getConnectedOverlayOrigin(): ElementRef {\n    return this._connectionContainerRef || this._elementRef;\n  }\n\n  ngAfterContentInit() {\n    this._validateControlChild();\n    if (this._control.controlType) {\n      this._elementRef.nativeElement.classList\n          .add(`mat-form-field-type-${this._control.controlType}`);\n    }\n\n    // Subscribe to changes in the child control state in order to update the form field UI.\n    this._control.stateChanges.pipe(startWith(null!)).subscribe(() => {\n      this._validatePlaceholders();\n      this._syncDescribedByIds();\n      this._changeDetectorRef.markForCheck();\n    });\n\n    // Run change detection if the value, prefix, or suffix changes.\n    const valueChanges = this._control.ngControl && this._control.ngControl.valueChanges || EMPTY;\n    merge(valueChanges, this._prefixChildren.changes, this._suffixChildren.changes)\n        .subscribe(() => this._changeDetectorRef.markForCheck());\n\n    // Re-validate when the number of hints changes.\n    this._hintChildren.changes.pipe(startWith(null)).subscribe(() => {\n      this._processHints();\n      this._changeDetectorRef.markForCheck();\n    });\n\n    // Update the aria-described by when the number of errors changes.\n    this._errorChildren.changes.pipe(startWith(null)).subscribe(() => {\n      this._syncDescribedByIds();\n      this._changeDetectorRef.markForCheck();\n    });\n  }\n\n  ngAfterContentChecked() {\n    this._validateControlChild();\n\n    if (!this._initialGapCalculated) {\n      // @deletion-target 7.0.0 Remove this check and else block once _ngZone is required.\n      if (this._ngZone) {\n        // It's important that we run this outside the `_ngZone`, because the `Promise.resolve`\n        // can kick us into an infinite change detection loop, if the `_initialGapCalculated`\n        // wasn't flipped on for some reason.\n        this._ngZone.runOutsideAngular(() => {\n          Promise.resolve().then(() => this.updateOutlineGap());\n        });\n      } else {\n        Promise.resolve().then(() => this.updateOutlineGap());\n      }\n    }\n  }\n\n  ngAfterViewInit() {\n    // Avoid animations on load.\n    this._subscriptAnimationState = 'enter';\n    this._changeDetectorRef.detectChanges();\n  }\n\n  /** Determines whether a class from the NgControl should be forwarded to the host element. */\n  _shouldForward(prop: string): boolean {\n    const ngControl = this._control ? this._control.ngControl : null;\n    return ngControl && ngControl[prop];\n  }\n\n  _hasPlaceholder() {\n    return !!(this._control && this._control.placeholder || this._placeholderChild);\n  }\n\n  _hasLabel() {\n    return !!this._labelChild;\n  }\n\n  _shouldLabelFloat() {\n    return this._canLabelFloat && (this._control.shouldLabelFloat || this._shouldAlwaysFloat);\n  }\n\n  _hideControlPlaceholder() {\n    // In the legacy appearance the placeholder is promoted to a label if no label is given.\n    return this.appearance === 'legacy' && !this._hasLabel() ||\n        this._hasLabel() && !this._shouldLabelFloat();\n  }\n\n  _hasFloatingLabel() {\n    // In the legacy appearance the placeholder is promoted to a label if no label is given.\n    return this._hasLabel() || this.appearance === 'legacy' && this._hasPlaceholder();\n  }\n\n  /** Determines whether to display hints or errors. */\n  _getDisplayedMessages(): 'error' | 'hint' {\n    return (this._errorChildren && this._errorChildren.length > 0 &&\n        this._control.errorState) ? 'error' : 'hint';\n  }\n\n  /** Animates the placeholder up and locks it in position. */\n  _animateAndLockLabel(): void {\n    if (this._hasFloatingLabel() && this._canLabelFloat) {\n      // If animations are disabled, we shouldn't go in here,\n      // because the `transitionend` will never fire.\n      if (this._animationsEnabled) {\n        this._showAlwaysAnimate = true;\n\n        fromEvent(this._label.nativeElement, 'transitionend').pipe(take(1)).subscribe(() => {\n          this._showAlwaysAnimate = false;\n        });\n      }\n\n      this.floatLabel = 'always';\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  /**\n   * Ensure that there is only one placeholder (either `placeholder` attribute on the child control\n   * or child element with the `mat-placeholder` directive).\n   */\n  private _validatePlaceholders() {\n    if (this._control.placeholder && this._placeholderChild) {\n      throw getMatFormFieldPlaceholderConflictError();\n    }\n  }\n\n  /** Does any extra processing that is required when handling the hints. */\n  private _processHints() {\n    this._validateHints();\n    this._syncDescribedByIds();\n  }\n\n  /**\n   * Ensure that there is a maximum of one of each `<mat-hint>` alignment specified, with the\n   * attribute being considered as `align=\"start\"`.\n   */\n  private _validateHints() {\n    if (this._hintChildren) {\n      let startHint: MatHint;\n      let endHint: MatHint;\n      this._hintChildren.forEach((hint: MatHint) => {\n        if (hint.align === 'start') {\n          if (startHint || this.hintLabel) {\n            throw getMatFormFieldDuplicatedHintError('start');\n          }\n          startHint = hint;\n        } else if (hint.align === 'end') {\n          if (endHint) {\n            throw getMatFormFieldDuplicatedHintError('end');\n          }\n          endHint = hint;\n        }\n      });\n    }\n  }\n\n  /**\n   * Sets the list of element IDs that describe the child control. This allows the control to update\n   * its `aria-describedby` attribute accordingly.\n   */\n  private _syncDescribedByIds() {\n    if (this._control) {\n      let ids: string[] = [];\n\n      if (this._getDisplayedMessages() === 'hint') {\n        let startHint = this._hintChildren ?\n            this._hintChildren.find(hint => hint.align === 'start') : null;\n        let endHint = this._hintChildren ?\n            this._hintChildren.find(hint => hint.align === 'end') : null;\n\n        if (startHint) {\n          ids.push(startHint.id);\n        } else if (this._hintLabel) {\n          ids.push(this._hintLabelId);\n        }\n\n        if (endHint) {\n          ids.push(endHint.id);\n        }\n      } else if (this._errorChildren) {\n        ids = this._errorChildren.map(error => error.id);\n      }\n\n      this._control.setDescribedByIds(ids);\n    }\n  }\n\n  /** Throws an error if the form field's control is missing. */\n  protected _validateControlChild() {\n    if (!this._control) {\n      throw getMatFormFieldMissingControlError();\n    }\n  }\n\n  /**\n   * Updates the width and position of the gap in the outline. Only relevant for the outline\n   * appearance.\n   */\n  updateOutlineGap() {\n    if (this.appearance === 'outline' && this._label && this._label.nativeElement.children.length) {\n      if (this._platform && !this._platform.isBrowser) {\n        // getBoundingClientRect isn't available on the server.\n        this._initialGapCalculated = true;\n        return;\n      }\n      if (!document.documentElement.contains(this._elementRef.nativeElement)) {\n        return;\n      }\n\n      const containerStart = this._getStartEnd(\n          this._connectionContainerRef.nativeElement.getBoundingClientRect());\n      const labelStart = this._getStartEnd(\n          this._label.nativeElement.children[0].getBoundingClientRect());\n      let labelWidth = 0;\n      for (const child of this._label.nativeElement.children) {\n        labelWidth += child.offsetWidth;\n      }\n      this._outlineGapStart = labelStart - containerStart - outlineGapPadding;\n      this._outlineGapWidth = labelWidth * floatingLabelScale + outlineGapPadding * 2;\n    } else {\n      this._outlineGapStart = 0;\n      this._outlineGapWidth = 0;\n    }\n    this._initialGapCalculated = true;\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Gets the start end of the rect considering the current directionality. */\n  private _getStartEnd(rect: ClientRect): number {\n    return this._dir && this._dir.value === 'rtl' ? rect.right : rect.left;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatError} from './error';\nimport {MatFormField} from './form-field';\nimport {MatHint} from './hint';\nimport {MatLabel} from './label';\nimport {MatPlaceholder} from './placeholder';\nimport {MatPrefix} from './prefix';\nimport {MatSuffix} from './suffix';\n\n\n@NgModule({\n  declarations: [\n    MatError,\n    MatFormField,\n    MatHint,\n    MatLabel,\n    MatPlaceholder,\n    MatPrefix,\n    MatSuffix,\n  ],\n  imports: [CommonModule],\n  exports: [\n    MatError,\n    MatFormField,\n    MatHint,\n    MatLabel,\n    MatPlaceholder,\n    MatPrefix,\n    MatSuffix,\n  ],\n})\nexport class MatFormFieldModule {}\n","/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = Object.setPrototypeOf ||\r\n    ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n    function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = Object.assign || function __assign(t) {\r\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n        s = arguments[i];\r\n        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n    }\r\n    return t;\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)\r\n            t[p[i]] = s[p[i]];\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = y[op[0] & 2 ? \"return\" : op[0] ? \"throw\" : \"next\"]) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [0, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule, InjectionToken, Optional, Inject, isDevMode} from '@angular/core';\nimport {BidiModule} from '@angular/cdk/bidi';\n\n\n/** Injection token that configures whether the Material sanity checks are enabled. */\nexport const MATERIAL_SANITY_CHECKS = new InjectionToken<boolean>('mat-sanity-checks', {\n  providedIn: 'root',\n  factory: MATERIAL_SANITY_CHECKS_FACTORY,\n});\n\n/** @docs-private */\nexport function MATERIAL_SANITY_CHECKS_FACTORY(): boolean {\n  return true;\n}\n\n/**\n * Module that captures anything that should be loaded and/or run for *all* Angular Material\n * components. This includes Bidi, etc.\n *\n * This module should be imported to each top-level component module (e.g., MatTabsModule).\n */\n@NgModule({\n  imports: [BidiModule],\n  exports: [BidiModule],\n})\nexport class MatCommonModule {\n  /** Whether we've done the global sanity checks (e.g. a theme is loaded, there is a doctype). */\n  private _hasDoneGlobalChecks = false;\n\n  /** Whether we've already checked for HammerJs availability. */\n  private _hasCheckedHammer = false;\n\n  /** Reference to the global `document` object. */\n  private _document = typeof document === 'object' && document ? document : null;\n\n  /** Reference to the global 'window' object. */\n  private _window = typeof window === 'object' && window ? window : null;\n\n  constructor(@Optional() @Inject(MATERIAL_SANITY_CHECKS) private _sanityChecksEnabled: boolean) {\n    if (this._areChecksEnabled() && !this._hasDoneGlobalChecks) {\n      this._checkDoctypeIsDefined();\n      this._checkThemeIsPresent();\n      this._hasDoneGlobalChecks = true;\n    }\n  }\n\n  /** Whether any sanity checks are enabled */\n  private _areChecksEnabled(): boolean {\n    return this._sanityChecksEnabled && isDevMode() && !this._isTestEnv();\n  }\n\n  /** Whether the code is running in tests. */\n  private _isTestEnv() {\n    return this._window && (this._window['__karma__'] || this._window['jasmine']);\n  }\n\n  private _checkDoctypeIsDefined(): void {\n    if (this._document && !this._document.doctype) {\n      console.warn(\n        'Current document does not have a doctype. This may cause ' +\n        'some Angular Material components not to behave as expected.'\n      );\n    }\n  }\n\n  private _checkThemeIsPresent(): void {\n    if (this._document && typeof getComputedStyle === 'function') {\n      const testElement = this._document.createElement('div');\n\n      testElement.classList.add('mat-theme-loaded-marker');\n      this._document.body.appendChild(testElement);\n\n      const computedStyle = getComputedStyle(testElement);\n\n      // In some situations, the computed style of the test element can be null. For example in\n      // Firefox, the computed style is null if an application is running inside of a hidden iframe.\n      // See: https://bugzilla.mozilla.org/show_bug.cgi?id=548397\n      if (computedStyle && computedStyle.display !== 'none') {\n        console.warn(\n          'Could not find Angular Material core theme. Most Material ' +\n          'components may not work as expected. For more info refer ' +\n          'to the theming guide: https://material.angular.io/guide/theming'\n        );\n      }\n\n      this._document.body.removeChild(testElement);\n    }\n  }\n\n  /** Checks whether HammerJS is available. */\n  _checkHammerIsAvailable(): void {\n    if (this._hasCheckedHammer || !this._window) {\n      return;\n    }\n\n    if (this._areChecksEnabled() && !this._window['Hammer']) {\n      console.warn(\n        'Could not find HammerJS. Certain Angular Material components may not work correctly.');\n    }\n    this._hasCheckedHammer = true;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {Constructor} from './constructor';\n\n/** @docs-private */\nexport interface CanDisable {\n  /** Whether the component is disabled. */\n  disabled: boolean;\n}\n\n/** Mixin to augment a directive with a `disabled` property. */\nexport function mixinDisabled<T extends Constructor<{}>>(base: T): Constructor<CanDisable> & T {\n  return class extends base {\n    private _disabled: boolean = false;\n\n    get disabled() { return this._disabled; }\n    set disabled(value: any) { this._disabled = coerceBooleanProperty(value); }\n\n    constructor(...args: any[]) { super(...args); }\n  };\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Constructor} from './constructor';\nimport {ElementRef} from '@angular/core';\n\n/** @docs-private */\nexport interface CanColor {\n  /** Theme color palette for the component. */\n  color: ThemePalette;\n}\n\n/** @docs-private */\nexport interface HasElementRef {\n  _elementRef: ElementRef;\n}\n\n/** Possible color palette values. */\nexport type ThemePalette = 'primary' | 'accent' | 'warn' | undefined;\n\n/** Mixin to augment a directive with a `color` property. */\nexport function mixinColor<T extends Constructor<HasElementRef>>(base: T,\n    defaultColor?: ThemePalette): Constructor<CanColor> & T {\n  return class extends base {\n    private _color: ThemePalette;\n\n    get color(): ThemePalette { return this._color; }\n    set color(value: ThemePalette) {\n      const colorPalette = value || defaultColor;\n\n      if (colorPalette !== this._color) {\n        if (this._color) {\n          this._elementRef.nativeElement.classList.remove(`mat-${this._color}`);\n        }\n        if (colorPalette) {\n          this._elementRef.nativeElement.classList.add(`mat-${colorPalette}`);\n        }\n\n        this._color = colorPalette;\n      }\n    }\n\n    constructor(...args: any[]) {\n      super(...args);\n\n      // Set the default color that can be specified from the mixin.\n      this.color = defaultColor;\n    }\n  };\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {Constructor} from './constructor';\n\n/** @docs-private */\nexport interface CanDisableRipple {\n  /** Whether ripples are disabled. */\n  disableRipple: boolean;\n}\n\n/** Mixin to augment a directive with a `disableRipple` property. */\nexport function mixinDisableRipple<T extends Constructor<{}>>(base: T)\n    : Constructor<CanDisableRipple> & T {\n  return class extends base {\n    private _disableRipple: boolean = false;\n\n    /** Whether the ripple effect is disabled or not. */\n    get disableRipple() { return this._disableRipple; }\n    set disableRipple(value: any) { this._disableRipple = coerceBooleanProperty(value); }\n\n    constructor(...args: any[]) { super(...args); }\n  };\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Constructor} from './constructor';\nimport {CanDisable} from './disabled';\n\n/** @docs-private */\nexport interface HasTabIndex {\n  /** Tabindex of the component. */\n  tabIndex: number;\n}\n\n/** Mixin to augment a directive with a `tabIndex` property. */\nexport function mixinTabIndex<T extends Constructor<CanDisable>>(base: T, defaultTabIndex = 0)\n    : Constructor<HasTabIndex> & T {\n  return class extends base {\n    private _tabIndex: number = defaultTabIndex;\n\n    get tabIndex(): number { return this.disabled ? -1 : this._tabIndex; }\n    set tabIndex(value: number) {\n      // If the specified tabIndex value is null or undefined, fall back to the default value.\n      this._tabIndex = value != null ? value : defaultTabIndex;\n    }\n\n    constructor(...args: any[]) {\n      super(...args);\n    }\n  };\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Constructor} from './constructor';\nimport {ErrorStateMatcher} from '../error/error-options';\nimport {FormControl, FormGroupDirective, NgControl, NgForm} from '@angular/forms';\nimport {Subject} from 'rxjs';\n\n/** @docs-private */\nexport interface CanUpdateErrorState {\n  updateErrorState();\n  readonly stateChanges: Subject<void>;\n  errorState: boolean;\n  errorStateMatcher: ErrorStateMatcher;\n}\n\n/** @docs-private */\nexport interface HasErrorState {\n  _parentFormGroup: FormGroupDirective;\n  _parentForm: NgForm;\n  _defaultErrorStateMatcher: ErrorStateMatcher;\n  ngControl: NgControl;\n}\n\n/**\n * Mixin to augment a directive with updateErrorState method.\n * For component with `errorState` and need to update `errorState`.\n */\nexport function mixinErrorState<T extends Constructor<HasErrorState>>(base: T)\n: Constructor<CanUpdateErrorState> & T {\n  return class extends base {\n    /** Whether the component is in an error state. */\n    errorState: boolean = false;\n\n    /**\n     * Stream that emits whenever the state of the input changes such that the wrapping\n     * `MatFormField` needs to run change detection.\n     */\n    readonly stateChanges = new Subject<void>();\n\n    errorStateMatcher: ErrorStateMatcher;\n\n    updateErrorState() {\n      const oldState = this.errorState;\n      const parent = this._parentFormGroup || this._parentForm;\n      const matcher = this.errorStateMatcher || this._defaultErrorStateMatcher;\n      const control = this.ngControl ? this.ngControl.control as FormControl : null;\n      const newState = matcher.isErrorState(control, parent);\n\n      if (newState !== oldState) {\n        this.errorState = newState;\n        this.stateChanges.next();\n      }\n    }\n\n    constructor(...args: any[]) {\n      super(...args);\n    }\n  };\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Observable, Subscriber} from 'rxjs';\nimport {Constructor} from './constructor';\n\n\n/**\n * Mixin that adds an initialized property to a directive which, when subscribed to, will emit a\n * value once markInitialized has been called, which should be done during the ngOnInit function.\n * If the subscription is made after it has already been marked as initialized, then it will trigger\n * an emit immediately.\n * @docs-private\n */\nexport interface HasInitialized {\n  /** Stream that emits once during the directive/component's ngOnInit. */\n  initialized: Observable<void>;\n\n  /**\n   * Sets the state as initialized and must be called during ngOnInit to notify subscribers that\n   * the directive has been initialized.\n   * @docs-private\n   */\n  _markInitialized: () => void;\n}\n\n/** Mixin to augment a directive with an initialized property that will emits when ngOnInit ends. */\nexport function mixinInitialized<T extends Constructor<{}>>(base: T):\n    Constructor<HasInitialized> & T {\n  return class extends base {\n    /** Whether this directive has been marked as initialized. */\n    _isInitialized = false;\n\n    /**\n     * List of subscribers that subscribed before the directive was initialized. Should be notified\n     * during _markInitialized. Set to null after pending subscribers are notified, and should\n     * not expect to be populated after.\n     */\n    _pendingSubscribers: Subscriber<void>[] | null = [];\n\n    /**\n     * Observable stream that emits when the directive initializes. If already initialized, the\n     * subscriber is stored to be notified once _markInitialized is called.\n     */\n    initialized = new Observable<void>(subscriber => {\n      // If initialized, immediately notify the subscriber. Otherwise store the subscriber to notify\n      // when _markInitialized is called.\n      if (this._isInitialized) {\n        this._notifySubscriber(subscriber);\n      } else {\n        this._pendingSubscribers!.push(subscriber);\n      }\n    });\n\n    constructor(...args: any[]) { super(...args); }\n\n    /**\n     * Marks the state as initialized and notifies pending subscribers. Should be called at the end\n     * of ngOnInit.\n     * @docs-private\n     */\n    _markInitialized(): void {\n      if (this._isInitialized) {\n        throw Error('This directive has already been marked as initialized and ' +\n            'should not be called twice.');\n      }\n\n      this._isInitialized = true;\n\n      this._pendingSubscribers!.forEach(this._notifySubscriber);\n      this._pendingSubscribers = null;\n    }\n\n    /** Emits and completes the subscriber stream (should only emit once). */\n    _notifySubscriber(subscriber: Subscriber<void>): void {\n      subscriber.next();\n      subscriber.complete();\n    }\n  };\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {inject, InjectionToken, LOCALE_ID} from '@angular/core';\nimport {Observable, Subject} from 'rxjs';\n\n/** InjectionToken for datepicker that can be used to override default locale code. */\nexport const MAT_DATE_LOCALE = new InjectionToken<string>('MAT_DATE_LOCALE', {\n  providedIn: 'root',\n  factory: MAT_DATE_LOCALE_FACTORY,\n});\n\n/** @docs-private */\nexport function MAT_DATE_LOCALE_FACTORY(): string {\n  return inject(LOCALE_ID);\n}\n\n/**\n * No longer needed since MAT_DATE_LOCALE has been changed to a scoped injectable.\n * If you are importing and providing this in your code you can simply remove it.\n * @deprecated\n * @deletion-target 7.0.0\n */\nexport const MAT_DATE_LOCALE_PROVIDER = {provide: MAT_DATE_LOCALE, useExisting: LOCALE_ID};\n\n/** Adapts type `D` to be usable as a date by cdk-based components that work with dates. */\nexport abstract class DateAdapter<D> {\n  /** The locale to use for all dates. */\n  protected locale: any;\n\n  /** A stream that emits when the locale changes. */\n  get localeChanges(): Observable<void> { return this._localeChanges; }\n  protected _localeChanges = new Subject<void>();\n\n  /**\n   * Gets the year component of the given date.\n   * @param date The date to extract the year from.\n   * @returns The year component.\n   */\n  abstract getYear(date: D): number;\n\n  /**\n   * Gets the month component of the given date.\n   * @param date The date to extract the month from.\n   * @returns The month component (0-indexed, 0 = January).\n   */\n  abstract getMonth(date: D): number;\n\n  /**\n   * Gets the date of the month component of the given date.\n   * @param date The date to extract the date of the month from.\n   * @returns The month component (1-indexed, 1 = first of month).\n   */\n  abstract getDate(date: D): number;\n\n  /**\n   * Gets the day of the week component of the given date.\n   * @param date The date to extract the day of the week from.\n   * @returns The month component (0-indexed, 0 = Sunday).\n   */\n  abstract getDayOfWeek(date: D): number;\n\n  /**\n   * Gets a list of names for the months.\n   * @param style The naming style (e.g. long = 'January', short = 'Jan', narrow = 'J').\n   * @returns An ordered list of all month names, starting with January.\n   */\n  abstract getMonthNames(style: 'long' | 'short' | 'narrow'): string[];\n\n  /**\n   * Gets a list of names for the dates of the month.\n   * @returns An ordered list of all date of the month names, starting with '1'.\n   */\n  abstract getDateNames(): string[];\n\n  /**\n   * Gets a list of names for the days of the week.\n   * @param style The naming style (e.g. long = 'Sunday', short = 'Sun', narrow = 'S').\n   * @returns An ordered list of all weekday names, starting with Sunday.\n   */\n  abstract getDayOfWeekNames(style: 'long' | 'short' | 'narrow'): string[];\n\n  /**\n   * Gets the name for the year of the given date.\n   * @param date The date to get the year name for.\n   * @returns The name of the given year (e.g. '2017').\n   */\n  abstract getYearName(date: D): string;\n\n  /**\n   * Gets the first day of the week.\n   * @returns The first day of the week (0-indexed, 0 = Sunday).\n   */\n  abstract getFirstDayOfWeek(): number;\n\n  /**\n   * Gets the number of days in the month of the given date.\n   * @param date The date whose month should be checked.\n   * @returns The number of days in the month of the given date.\n   */\n  abstract getNumDaysInMonth(date: D): number;\n\n  /**\n   * Clones the given date.\n   * @param date The date to clone\n   * @returns A new date equal to the given date.\n   */\n  abstract clone(date: D): D;\n\n  /**\n   * Creates a date with the given year, month, and date. Does not allow over/under-flow of the\n   * month and date.\n   * @param year The full year of the date. (e.g. 89 means the year 89, not the year 1989).\n   * @param month The month of the date (0-indexed, 0 = January). Must be an integer 0 - 11.\n   * @param date The date of month of the date. Must be an integer 1 - length of the given month.\n   * @returns The new date, or null if invalid.\n   */\n  abstract createDate(year: number, month: number, date: number): D;\n\n  /**\n   * Gets today's date.\n   * @returns Today's date.\n   */\n  abstract today(): D;\n\n  /**\n   * Parses a date from a user-provided value.\n   * @param value The value to parse.\n   * @param parseFormat The expected format of the value being parsed\n   *     (type is implementation-dependent).\n   * @returns The parsed date.\n   */\n  abstract parse(value: any, parseFormat: any): D | null;\n\n  /**\n   * Formats a date as a string according to the given format.\n   * @param date The value to format.\n   * @param displayFormat The format to use to display the date as a string.\n   * @returns The formatted date string.\n   */\n  abstract format(date: D, displayFormat: any): string;\n\n  /**\n   * Adds the given number of years to the date. Years are counted as if flipping 12 pages on the\n   * calendar for each year and then finding the closest date in the new month. For example when\n   * adding 1 year to Feb 29, 2016, the resulting date will be Feb 28, 2017.\n   * @param date The date to add years to.\n   * @param years The number of years to add (may be negative).\n   * @returns A new date equal to the given one with the specified number of years added.\n   */\n  abstract addCalendarYears(date: D, years: number): D;\n\n  /**\n   * Adds the given number of months to the date. Months are counted as if flipping a page on the\n   * calendar for each month and then finding the closest date in the new month. For example when\n   * adding 1 month to Jan 31, 2017, the resulting date will be Feb 28, 2017.\n   * @param date The date to add months to.\n   * @param months The number of months to add (may be negative).\n   * @returns A new date equal to the given one with the specified number of months added.\n   */\n  abstract addCalendarMonths(date: D, months: number): D;\n\n  /**\n   * Adds the given number of days to the date. Days are counted as if moving one cell on the\n   * calendar for each day.\n   * @param date The date to add days to.\n   * @param days The number of days to add (may be negative).\n   * @returns A new date equal to the given one with the specified number of days added.\n   */\n  abstract addCalendarDays(date: D, days: number): D;\n\n  /**\n   * Gets the RFC 3339 compatible string (https://tools.ietf.org/html/rfc3339) for the given date.\n   * This method is used to generate date strings that are compatible with native HTML attributes\n   * such as the `min` or `max` attribute of an `<input>`.\n   * @param date The date to get the ISO date string for.\n   * @returns The ISO date string date string.\n   */\n  abstract toIso8601(date: D): string;\n\n  /**\n   * Checks whether the given object is considered a date instance by this DateAdapter.\n   * @param obj The object to check\n   * @returns Whether the object is a date instance.\n   */\n  abstract isDateInstance(obj: any): boolean;\n\n  /**\n   * Checks whether the given date is valid.\n   * @param date The date to check.\n   * @returns Whether the date is valid.\n   */\n  abstract isValid(date: D): boolean;\n\n  /**\n   * Gets date instance that is not valid.\n   * @returns An invalid date.\n   */\n  abstract invalid(): D;\n\n  /**\n   * Attempts to deserialize a value to a valid date object. This is different from parsing in that\n   * deserialize should only accept non-ambiguous, locale-independent formats (e.g. a ISO 8601\n   * string). The default implementation does not allow any deserialization, it simply checks that\n   * the given value is already a valid date object or null. The `<mat-datepicker>` will call this\n   * method on all of it's `@Input()` properties that accept dates. It is therefore possible to\n   * support passing values from your backend directly to these properties by overriding this method\n   * to also deserialize the format used by your backend.\n   * @param value The value to be deserialized into a date object.\n   * @returns The deserialized date object, either a valid date, null if the value can be\n   *     deserialized into a null date (e.g. the empty string), or an invalid date.\n   */\n  deserialize(value: any): D | null {\n    if (value == null || this.isDateInstance(value) && this.isValid(value)) {\n      return value;\n    }\n    return this.invalid();\n  }\n\n  /**\n   * Sets the locale used for all dates.\n   * @param locale The new locale.\n   */\n  setLocale(locale: any) {\n    this.locale = locale;\n    this._localeChanges.next();\n  }\n\n  /**\n   * Compares two dates.\n   * @param first The first date to compare.\n   * @param second The second date to compare.\n   * @returns 0 if the dates are equal, a number less than 0 if the first date is earlier,\n   *     a number greater than 0 if the first date is later.\n   */\n  compareDate(first: D, second: D): number {\n    return this.getYear(first) - this.getYear(second) ||\n        this.getMonth(first) - this.getMonth(second) ||\n        this.getDate(first) - this.getDate(second);\n  }\n\n  /**\n   * Checks if two dates are equal.\n   * @param first The first date to check.\n   * @param second The second date to check.\n   * @returns Whether the two dates are equal.\n   *     Null dates are considered equal to other null dates.\n   */\n  sameDate(first: D | null, second: D | null): boolean {\n    if (first && second) {\n      let firstValid = this.isValid(first);\n      let secondValid = this.isValid(second);\n      if (firstValid && secondValid) {\n        return !this.compareDate(first, second);\n      }\n      return firstValid == secondValid;\n    }\n    return first == second;\n  }\n\n  /**\n   * Clamp the given date between min and max dates.\n   * @param date The date to clamp.\n   * @param min The minimum value to allow. If null or omitted no min is enforced.\n   * @param max The maximum value to allow. If null or omitted no max is enforced.\n   * @returns `min` if `date` is less than `min`, `max` if date is greater than `max`,\n   *     otherwise `date`.\n   */\n  clampDate(date: D, min?: D | null, max?: D | null): D {\n    if (min && this.compareDate(date, min) < 0) {\n      return min;\n    }\n    if (max && this.compareDate(date, max) > 0) {\n      return max;\n    }\n    return date;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Platform} from '@angular/cdk/platform';\nimport {Inject, Injectable, Optional} from '@angular/core';\nimport {DateAdapter, MAT_DATE_LOCALE} from './date-adapter';\n\n// TODO(mmalerba): Remove when we no longer support safari 9.\n/** Whether the browser supports the Intl API. */\nconst SUPPORTS_INTL_API = typeof Intl != 'undefined';\n\n\n/** The default month names to use if Intl API is not available. */\nconst DEFAULT_MONTH_NAMES = {\n  'long': [\n    'January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September',\n    'October', 'November', 'December'\n  ],\n  'short': ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'],\n  'narrow': ['J', 'F', 'M', 'A', 'M', 'J', 'J', 'A', 'S', 'O', 'N', 'D']\n};\n\n\n/** The default date names to use if Intl API is not available. */\nconst DEFAULT_DATE_NAMES = range(31, i => String(i + 1));\n\n\n/** The default day of the week names to use if Intl API is not available. */\nconst DEFAULT_DAY_OF_WEEK_NAMES = {\n  'long': ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'],\n  'short': ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'],\n  'narrow': ['S', 'M', 'T', 'W', 'T', 'F', 'S']\n};\n\n\n/**\n * Matches strings that have the form of a valid RFC 3339 string\n * (https://tools.ietf.org/html/rfc3339). Note that the string may not actually be a valid date\n * because the regex will match strings an with out of bounds month, date, etc.\n */\nconst ISO_8601_REGEX =\n    /^\\d{4}-\\d{2}-\\d{2}(?:T\\d{2}:\\d{2}:\\d{2}(?:\\.\\d+)?(?:Z|(?:(?:\\+|-)\\d{2}:\\d{2}))?)?$/;\n\n\n/** Creates an array and fills it with values. */\nfunction range<T>(length: number, valueFunction: (index: number) => T): T[] {\n  const valuesArray = Array(length);\n  for (let i = 0; i < length; i++) {\n    valuesArray[i] = valueFunction(i);\n  }\n  return valuesArray;\n}\n\n/** Adapts the native JS Date for use with cdk-based components that work with dates. */\n@Injectable()\nexport class NativeDateAdapter extends DateAdapter<Date> {\n  /** Whether to clamp the date between 1 and 9999 to avoid IE and Edge errors. */\n  private readonly _clampDate: boolean;\n\n  /**\n   * Whether to use `timeZone: 'utc'` with `Intl.DateTimeFormat` when formatting dates.\n   * Without this `Intl.DateTimeFormat` sometimes chooses the wrong timeZone, which can throw off\n   * the result. (e.g. in the en-US locale `new Date(1800, 7, 14).toLocaleDateString()`\n   * will produce `'8/13/1800'`.\n   *\n   * TODO(mmalerba): drop this variable. It's not being used in the code right now. We're now\n   * getting the string representation of a Date object from it's utc representation. We're keeping\n   * it here for sometime, just for precaution, in case we decide to revert some of these changes\n   * though.\n   */\n  useUtcForDisplay: boolean = true;\n\n  constructor(@Optional() @Inject(MAT_DATE_LOCALE) matDateLocale: string, platform: Platform) {\n    super();\n    super.setLocale(matDateLocale);\n\n    // IE does its own time zone correction, so we disable this on IE.\n    this.useUtcForDisplay = !platform.TRIDENT;\n    this._clampDate = platform.TRIDENT || platform.EDGE;\n  }\n\n  getYear(date: Date): number {\n    return date.getFullYear();\n  }\n\n  getMonth(date: Date): number {\n    return date.getMonth();\n  }\n\n  getDate(date: Date): number {\n    return date.getDate();\n  }\n\n  getDayOfWeek(date: Date): number {\n    return date.getDay();\n  }\n\n  getMonthNames(style: 'long' | 'short' | 'narrow'): string[] {\n    if (SUPPORTS_INTL_API) {\n      const dtf = new Intl.DateTimeFormat(this.locale, {month: style, timeZone: 'utc'});\n      return range(12, i =>\n          this._stripDirectionalityCharacters(this._format(dtf, new Date(2017, i, 1))));\n    }\n    return DEFAULT_MONTH_NAMES[style];\n  }\n\n  getDateNames(): string[] {\n    if (SUPPORTS_INTL_API) {\n      const dtf = new Intl.DateTimeFormat(this.locale, {day: 'numeric', timeZone: 'utc'});\n      return range(31, i => this._stripDirectionalityCharacters(\n          this._format(dtf, new Date(2017, 0, i + 1))));\n    }\n    return DEFAULT_DATE_NAMES;\n  }\n\n  getDayOfWeekNames(style: 'long' | 'short' | 'narrow'): string[] {\n    if (SUPPORTS_INTL_API) {\n      const dtf = new Intl.DateTimeFormat(this.locale, {weekday: style, timeZone: 'utc'});\n      return range(7, i => this._stripDirectionalityCharacters(\n          this._format(dtf, new Date(2017, 0, i + 1))));\n    }\n    return DEFAULT_DAY_OF_WEEK_NAMES[style];\n  }\n\n  getYearName(date: Date): string {\n    if (SUPPORTS_INTL_API) {\n      const dtf = new Intl.DateTimeFormat(this.locale, {year: 'numeric', timeZone: 'utc'});\n      return this._stripDirectionalityCharacters(this._format(dtf, date));\n    }\n    return String(this.getYear(date));\n  }\n\n  getFirstDayOfWeek(): number {\n    // We can't tell using native JS Date what the first day of the week is, we default to Sunday.\n    return 0;\n  }\n\n  getNumDaysInMonth(date: Date): number {\n    return this.getDate(this._createDateWithOverflow(\n        this.getYear(date), this.getMonth(date) + 1, 0));\n  }\n\n  clone(date: Date): Date {\n    return this.createDate(this.getYear(date), this.getMonth(date), this.getDate(date));\n  }\n\n  createDate(year: number, month: number, date: number): Date {\n    // Check for invalid month and date (except upper bound on date which we have to check after\n    // creating the Date).\n    if (month < 0 || month > 11) {\n      throw Error(`Invalid month index \"${month}\". Month index has to be between 0 and 11.`);\n    }\n\n    if (date < 1) {\n      throw Error(`Invalid date \"${date}\". Date has to be greater than 0.`);\n    }\n\n    let result = this._createDateWithOverflow(year, month, date);\n    // Check that the date wasn't above the upper bound for the month, causing the month to overflow\n    if (result.getMonth() != month) {\n      throw Error(`Invalid date \"${date}\" for month with index \"${month}\".`);\n    }\n\n    return result;\n  }\n\n  today(): Date {\n    return new Date();\n  }\n\n  parse(value: any): Date | null {\n    // We have no way using the native JS Date to set the parse format or locale, so we ignore these\n    // parameters.\n    if (typeof value == 'number') {\n      return new Date(value);\n    }\n    return value ? new Date(Date.parse(value)) : null;\n  }\n\n  format(date: Date, displayFormat: Object): string {\n    if (!this.isValid(date)) {\n      throw Error('NativeDateAdapter: Cannot format invalid date.');\n    }\n\n    if (SUPPORTS_INTL_API) {\n      // On IE and Edge the i18n API will throw a hard error that can crash the entire app\n      // if we attempt to format a date whose year is less than 1 or greater than 9999.\n      if (this._clampDate && (date.getFullYear() < 1 || date.getFullYear() > 9999)) {\n        date = this.clone(date);\n        date.setFullYear(Math.max(1, Math.min(9999, date.getFullYear())));\n      }\n\n      displayFormat = {...displayFormat, timeZone: 'utc'};\n\n      const dtf = new Intl.DateTimeFormat(this.locale, displayFormat);\n      return this._stripDirectionalityCharacters(this._format(dtf, date));\n    }\n    return this._stripDirectionalityCharacters(date.toDateString());\n  }\n\n  addCalendarYears(date: Date, years: number): Date {\n    return this.addCalendarMonths(date, years * 12);\n  }\n\n  addCalendarMonths(date: Date, months: number): Date {\n    let newDate = this._createDateWithOverflow(\n        this.getYear(date), this.getMonth(date) + months, this.getDate(date));\n\n    // It's possible to wind up in the wrong month if the original month has more days than the new\n    // month. In this case we want to go to the last day of the desired month.\n    // Note: the additional + 12 % 12 ensures we end up with a positive number, since JS % doesn't\n    // guarantee this.\n    if (this.getMonth(newDate) != ((this.getMonth(date) + months) % 12 + 12) % 12) {\n      newDate = this._createDateWithOverflow(this.getYear(newDate), this.getMonth(newDate), 0);\n    }\n\n    return newDate;\n  }\n\n  addCalendarDays(date: Date, days: number): Date {\n    return this._createDateWithOverflow(\n        this.getYear(date), this.getMonth(date), this.getDate(date) + days);\n  }\n\n  toIso8601(date: Date): string {\n    return [\n      date.getUTCFullYear(),\n      this._2digit(date.getUTCMonth() + 1),\n      this._2digit(date.getUTCDate())\n    ].join('-');\n  }\n\n  /**\n   * Returns the given value if given a valid Date or null. Deserializes valid ISO 8601 strings\n   * (https://www.ietf.org/rfc/rfc3339.txt) into valid Dates and empty string into null. Returns an\n   * invalid date for all other values.\n   */\n  deserialize(value: any): Date | null {\n    if (typeof value === 'string') {\n      if (!value) {\n        return null;\n      }\n      // The `Date` constructor accepts formats other than ISO 8601, so we need to make sure the\n      // string is the right format first.\n      if (ISO_8601_REGEX.test(value)) {\n        let date = new Date(value);\n        if (this.isValid(date)) {\n          return date;\n        }\n      }\n    }\n    return super.deserialize(value);\n  }\n\n  isDateInstance(obj: any) {\n    return obj instanceof Date;\n  }\n\n  isValid(date: Date) {\n    return !isNaN(date.getTime());\n  }\n\n  invalid(): Date {\n    return new Date(NaN);\n  }\n\n  /** Creates a date but allows the month and date to overflow. */\n  private _createDateWithOverflow(year: number, month: number, date: number) {\n    const result = new Date(year, month, date);\n\n    // We need to correct for the fact that JS native Date treats years in range [0, 99] as\n    // abbreviations for 19xx.\n    if (year >= 0 && year < 100) {\n      result.setFullYear(this.getYear(result) - 1900);\n    }\n    return result;\n  }\n\n  /**\n   * Pads a number to make it two digits.\n   * @param n The number to pad.\n   * @returns The padded number.\n   */\n  private _2digit(n: number) {\n    return ('00' + n).slice(-2);\n  }\n\n  /**\n   * Strip out unicode LTR and RTL characters. Edge and IE insert these into formatted dates while\n   * other browsers do not. We remove them to make output consistent and because they interfere with\n   * date parsing.\n   * @param str The string to strip direction characters from.\n   * @returns The stripped string.\n   */\n  private _stripDirectionalityCharacters(str: string) {\n    return str.replace(/[\\u200e\\u200f]/g, '');\n  }\n\n  /**\n   * When converting Date object to string, javascript built-in functions may return wrong\n   * results because it applies its internal DST rules. The DST rules around the world change\n   * very frequently, and the current valid rule is not always valid in previous years though.\n   * We work around this problem building a new Date object which has its internal UTC\n   * representation with the local date and time.\n   * @param dtf Intl.DateTimeFormat object, containg the desired string format. It must have\n   *    timeZone set to 'utc' to work fine.\n   * @param date Date from which we want to get the string representation according to dtf\n   * @returns A Date object with its UTC representation based on the passed in date info\n   */\n  private _format(dtf: Intl.DateTimeFormat, date: Date) {\n    const d = new Date(Date.UTC(\n        date.getFullYear(), date.getMonth(), date.getDate(), date.getHours(),\n        date.getMinutes(), date.getSeconds(), date.getMilliseconds()));\n    return dtf.format(d);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {ElementRef, NgZone} from '@angular/core';\nimport {Platform, supportsPassiveEventListeners} from '@angular/cdk/platform';\nimport {RippleRef, RippleState} from './ripple-ref';\n\nexport type RippleConfig = {\n  color?: string;\n  centered?: boolean;\n  radius?: number;\n  persistent?: boolean;\n  animation?: RippleAnimationConfig;\n  terminateOnPointerUp?: boolean;\n  /**\n   * @deprecated Use the `animation` property instead.\n   * @deletion-target 7.0.0\n   */\n  speedFactor?: number;\n};\n\n/**\n * Interface that describes the configuration for the animation of a ripple.\n * There are two animation phases with different durations for the ripples.\n */\nexport interface RippleAnimationConfig {\n  /** Duration in milliseconds for the enter animation (expansion from point of contact). */\n  enterDuration?: number;\n  /** Duration in milliseconds for the exit animation (fade-out). */\n  exitDuration?: number;\n}\n\n/**\n * Interface that describes the target for launching ripples.\n * It defines the ripple configuration and disabled state for interaction ripples.\n * @docs-private\n */\nexport interface RippleTarget {\n  /** Configuration for ripples that are launched on pointer down. */\n  rippleConfig: RippleConfig;\n  /** Whether ripples on pointer down should be disabled. */\n  rippleDisabled: boolean;\n}\n\n/**\n * Default ripple animation configuration for ripples without an explicit\n * animation config specified.\n */\nexport const defaultRippleAnimationConfig = {\n  enterDuration: 450,\n  exitDuration: 400\n};\n\n/**\n * Timeout for ignoring mouse events. Mouse events will be temporary ignored after touch\n * events to avoid synthetic mouse events.\n */\nconst ignoreMouseEventsTimeout = 800;\n\n/**\n * Helper service that performs DOM manipulations. Not intended to be used outside this module.\n * The constructor takes a reference to the ripple directive's host element and a map of DOM\n * event handlers to be installed on the element that triggers ripple animations.\n * This will eventually become a custom renderer once Angular support exists.\n * @docs-private\n */\nexport class RippleRenderer {\n  /** Element where the ripples are being added to. */\n  private _containerElement: HTMLElement;\n\n  /** Element which triggers the ripple elements on mouse events. */\n  private _triggerElement: HTMLElement | null;\n\n  /** Whether the pointer is currently down or not. */\n  private _isPointerDown = false;\n\n  /** Events to be registered on the trigger element. */\n  private _triggerEvents = new Map<string, any>();\n\n  /** Set of currently active ripple references. */\n  private _activeRipples = new Set<RippleRef>();\n\n  /** Latest non-persistent ripple that was triggered. */\n  private _mostRecentTransientRipple: RippleRef | null;\n\n  /** Time in milliseconds when the last touchstart event happened. */\n  private _lastTouchStartEvent: number;\n\n  /** Options that apply to all the event listeners that are bound by the renderer. */\n  private _eventOptions = supportsPassiveEventListeners() ? ({passive: true} as any) : false;\n\n  /**\n   * Cached dimensions of the ripple container. Set when the first\n   * ripple is shown and cleared once no more ripples are visible.\n   */\n  private _containerRect: ClientRect | null;\n\n  constructor(private _target: RippleTarget,\n              private _ngZone: NgZone,\n              elementRef: ElementRef,\n              platform: Platform) {\n\n    // Only do anything if we're on the browser.\n    if (platform.isBrowser) {\n      this._containerElement = elementRef.nativeElement;\n\n      // Specify events which need to be registered on the trigger.\n      this._triggerEvents.set('mousedown', this.onMousedown);\n      this._triggerEvents.set('mouseup', this.onPointerUp);\n      this._triggerEvents.set('mouseleave', this.onPointerUp);\n\n      this._triggerEvents.set('touchstart', this.onTouchStart);\n      this._triggerEvents.set('touchend', this.onPointerUp);\n    }\n  }\n\n  /**\n   * Fades in a ripple at the given coordinates.\n   * @param x Coordinate within the element, along the X axis at which to start the ripple.\n   * @param y Coordinate within the element, along the Y axis at which to start the ripple.\n   * @param config Extra ripple options.\n   */\n  fadeInRipple(x: number, y: number, config: RippleConfig = {}): RippleRef {\n    const containerRect = this._containerRect =\n                          this._containerRect || this._containerElement.getBoundingClientRect();\n    const animationConfig = {...defaultRippleAnimationConfig, ...config.animation};\n\n    if (config.centered) {\n      x = containerRect.left + containerRect.width / 2;\n      y = containerRect.top + containerRect.height / 2;\n    }\n\n    const radius = config.radius || distanceToFurthestCorner(x, y, containerRect);\n    const offsetX = x - containerRect.left;\n    const offsetY = y - containerRect.top;\n    const duration = animationConfig.enterDuration / (config.speedFactor || 1);\n\n    const ripple = document.createElement('div');\n    ripple.classList.add('mat-ripple-element');\n\n    ripple.style.left = `${offsetX - radius}px`;\n    ripple.style.top = `${offsetY - radius}px`;\n    ripple.style.height = `${radius * 2}px`;\n    ripple.style.width = `${radius * 2}px`;\n\n    // If the color is not set, the default CSS color will be used.\n    ripple.style.backgroundColor = config.color || null;\n    ripple.style.transitionDuration = `${duration}ms`;\n\n    this._containerElement.appendChild(ripple);\n\n    // By default the browser does not recalculate the styles of dynamically created\n    // ripple elements. This is critical because then the `scale` would not animate properly.\n    enforceStyleRecalculation(ripple);\n\n    ripple.style.transform = 'scale(1)';\n\n    // Exposed reference to the ripple that will be returned.\n    const rippleRef = new RippleRef(this, ripple, config);\n\n    rippleRef.state = RippleState.FADING_IN;\n\n    // Add the ripple reference to the list of all active ripples.\n    this._activeRipples.add(rippleRef);\n\n    if (!config.persistent) {\n      this._mostRecentTransientRipple = rippleRef;\n    }\n\n    // Wait for the ripple element to be completely faded in.\n    // Once it's faded in, the ripple can be hidden immediately if the mouse is released.\n    this.runTimeoutOutsideZone(() => {\n      const isMostRecentTransientRipple = rippleRef === this._mostRecentTransientRipple;\n\n      rippleRef.state = RippleState.VISIBLE;\n\n      // When the timer runs out while the user has kept their pointer down, we want to\n      // keep only the persistent ripples and the latest transient ripple. We do this,\n      // because we don't want stacked transient ripples to appear after their enter\n      // animation has finished.\n      if (!config.persistent && (!isMostRecentTransientRipple || !this._isPointerDown)) {\n        rippleRef.fadeOut();\n      }\n    }, duration);\n\n    return rippleRef;\n  }\n\n  /** Fades out a ripple reference. */\n  fadeOutRipple(rippleRef: RippleRef) {\n    const wasActive = this._activeRipples.delete(rippleRef);\n\n    if (rippleRef === this._mostRecentTransientRipple) {\n      this._mostRecentTransientRipple = null;\n    }\n\n    // Clear out the cached bounding rect if we have no more ripples.\n    if (!this._activeRipples.size) {\n      this._containerRect = null;\n    }\n\n    // For ripples that are not active anymore, don't re-un the fade-out animation.\n    if (!wasActive) {\n      return;\n    }\n\n    const rippleEl = rippleRef.element;\n    const animationConfig = {...defaultRippleAnimationConfig, ...rippleRef.config.animation};\n\n    rippleEl.style.transitionDuration = `${animationConfig.exitDuration}ms`;\n    rippleEl.style.opacity = '0';\n    rippleRef.state = RippleState.FADING_OUT;\n\n    // Once the ripple faded out, the ripple can be safely removed from the DOM.\n    this.runTimeoutOutsideZone(() => {\n      rippleRef.state = RippleState.HIDDEN;\n      rippleEl.parentNode!.removeChild(rippleEl);\n    }, animationConfig.exitDuration);\n  }\n\n  /** Fades out all currently active ripples. */\n  fadeOutAll() {\n    this._activeRipples.forEach(ripple => ripple.fadeOut());\n  }\n\n  /** Sets up the trigger event listeners */\n  setupTriggerEvents(element: HTMLElement) {\n    if (!element || element === this._triggerElement) {\n      return;\n    }\n\n    // Remove all previously registered event listeners from the trigger element.\n    this._removeTriggerEvents();\n\n    this._ngZone.runOutsideAngular(() => {\n      this._triggerEvents.forEach((fn, type) =>\n          element.addEventListener(type, fn, this._eventOptions));\n    });\n\n    this._triggerElement = element;\n  }\n\n  /** Function being called whenever the trigger is being pressed using mouse. */\n  private onMousedown = (event: MouseEvent) => {\n    const isSyntheticEvent = this._lastTouchStartEvent &&\n        Date.now() < this._lastTouchStartEvent + ignoreMouseEventsTimeout;\n\n    if (!this._target.rippleDisabled && !isSyntheticEvent) {\n      this._isPointerDown = true;\n      this.fadeInRipple(event.clientX, event.clientY, this._target.rippleConfig);\n    }\n  }\n\n  /** Function being called whenever the trigger is being pressed using touch. */\n  private onTouchStart = (event: TouchEvent) => {\n    if (!this._target.rippleDisabled) {\n      // Some browsers fire mouse events after a `touchstart` event. Those synthetic mouse\n      // events will launch a second ripple if we don't ignore mouse events for a specific\n      // time after a touchstart event.\n      this._lastTouchStartEvent = Date.now();\n      this._isPointerDown = true;\n\n      this.fadeInRipple(\n          event.touches[0].clientX, event.touches[0].clientY, this._target.rippleConfig);\n    }\n  }\n\n  /** Function being called whenever the trigger is being released. */\n  private onPointerUp = () => {\n    if (!this._isPointerDown) {\n      return;\n    }\n\n    this._isPointerDown = false;\n\n    // Fade-out all ripples that are visible and not persistent.\n    this._activeRipples.forEach(ripple => {\n      // By default, only ripples that are completely visible will fade out on pointer release.\n      // If the `terminateOnPointerUp` option is set, ripples that still fade in will also fade out.\n      const isVisible = ripple.state === RippleState.VISIBLE ||\n        ripple.config.terminateOnPointerUp && ripple.state === RippleState.FADING_IN;\n\n      if (!ripple.config.persistent && isVisible) {\n        ripple.fadeOut();\n      }\n    });\n  }\n\n  /** Runs a timeout outside of the Angular zone to avoid triggering the change detection. */\n  private runTimeoutOutsideZone(fn: Function, delay = 0) {\n    this._ngZone.runOutsideAngular(() => setTimeout(fn, delay));\n  }\n\n  /** Removes previously registered event listeners from the trigger element. */\n  _removeTriggerEvents() {\n    if (this._triggerElement) {\n      this._triggerEvents.forEach((fn, type) => {\n        this._triggerElement!.removeEventListener(type, fn, this._eventOptions);\n      });\n    }\n  }\n}\n\n/** Enforces a style recalculation of a DOM element by computing its styles. */\nfunction enforceStyleRecalculation(element: HTMLElement) {\n  // Enforce a style recalculation by calling `getComputedStyle` and accessing any property.\n  // Calling `getPropertyValue` is important to let optimizers know that this is not a noop.\n  // See: https://gist.github.com/paulirish/5d52fb081b3570c81e3a\n  window.getComputedStyle(element).getPropertyValue('opacity');\n}\n\n/**\n * Returns the distance from the point (x, y) to the furthest corner of a rectangle.\n */\nfunction distanceToFurthestCorner(x: number, y: number, rect: ClientRect) {\n  const distX = Math.max(Math.abs(x - rect.left), Math.abs(x - rect.right));\n  const distY = Math.max(Math.abs(y - rect.top), Math.abs(y - rect.bottom));\n  return Math.sqrt(distX * distX + distY * distY);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** @docs-private */\nexport function getMatFormFieldPlaceholderConflictError(): Error {\n  return Error('Placeholder attribute and child element were both specified.');\n}\n\n/** @docs-private */\nexport function getMatFormFieldDuplicatedHintError(align: string): Error {\n  return Error(`A hint was already declared for 'align=\"${align}\"'.`);\n}\n\n/** @docs-private */\nexport function getMatFormFieldMissingControlError(): Error {\n  return Error('mat-form-field must contain a MatFormFieldControl.');\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** @docs-private */\nexport function getMatInputUnsupportedTypeError(type: string): Error {\n  return Error(`Input type \"${type}\" isn't supported by matInput.`);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** @docs-private */\nexport function createMissingDateImplError(provider: string) {\n  return Error(\n      `MatDatepicker: No provider found for ${provider}. You must import one of the following ` +\n      `modules at your application root: MatNativeDateModule, MatMomentDateModule, or provide a ` +\n      `custom implementation.`);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Converts values into strings. Falsy values become empty strings.\n * @docs-private\n */\nexport function coerceToString(value: string | number): string {\n  return `${value || ''}`;\n}\n\n/**\n * Converts a value that might be a string into a number.\n * @docs-private\n */\nexport function coerceToNumber(value: string | number): number {\n  return typeof value === 'string' ? parseInt(value, 10) : value;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Throws an exception for the case when menu trigger doesn't have a valid mat-menu instance\n * @docs-private\n */\nexport function throwMatMenuMissingError() {\n  throw Error(`mat-menu-trigger: must pass in an mat-menu instance.\n\n    Example:\n      <mat-menu #menu=\"matMenu\"></mat-menu>\n      <button [matMenuTriggerFor]=\"menu\"></button>`);\n}\n\n/**\n * Throws an exception for the case when menu's x-position value isn't valid.\n * In other words, it doesn't match 'before' or 'after'.\n * @docs-private\n */\nexport function throwMatMenuInvalidPositionX() {\n  throw Error(`x-position value must be either 'before' or after'.\n      Example: <mat-menu x-position=\"before\" #menu=\"matMenu\"></mat-menu>`);\n}\n\n/**\n * Throws an exception for the case when menu's y-position value isn't valid.\n * In other words, it doesn't match 'above' or 'below'.\n * @docs-private\n */\nexport function throwMatMenuInvalidPositionY() {\n  throw Error(`y-position value must be either 'above' or below'.\n      Example: <mat-menu y-position=\"above\" #menu=\"matMenu\"></mat-menu>`);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Returns an exception to be thrown when attempting to change a select's `multiple` option\n * after initialization.\n * @docs-private\n */\nexport function getMatSelectDynamicMultipleError(): Error {\n  return Error('Cannot change `multiple` mode of select after initialization.');\n}\n\n/**\n * Returns an exception to be thrown when attempting to assign a non-array value to a select\n * in `multiple` mode. Note that `undefined` and `null` are still valid values to allow for\n * resetting the value.\n * @docs-private\n */\nexport function getMatSelectNonArrayValueError(): Error {\n  return Error('Value must be an array in multiple-selection mode.');\n}\n\n/**\n * Returns an exception to be thrown when assigning a non-function value to the comparator\n * used to determine if a value corresponds to an option. Note that whether the function\n * actually takes two values and returns a boolean is not checked.\n */\nexport function getMatSelectNonFunctionValueError(): Error {\n  return Error('`compareWith` must be a function.');\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** @docs-private */\nexport function getSortDuplicateSortableIdError(id: string): Error {\n  return Error(`Cannot have two MatSortables with the same id (${id}).`);\n}\n\n/** @docs-private */\nexport function getSortHeaderNotContainedWithinSortError(): Error {\n  return Error(`MatSortHeader must be placed within a parent element with the MatSort directive.`);\n}\n\n/** @docs-private */\nexport function getSortHeaderMissingIdError(): Error {\n  return Error(`MatSortHeader must be provided with a unique id.`);\n}\n\n/** @docs-private */\nexport function getSortInvalidDirectionError(direction: string): Error {\n  return Error(`${direction} is not a valid sort direction ('asc' or 'desc').`);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** @docs-private */\nexport class AnimationCurves {\n  static STANDARD_CURVE = 'cubic-bezier(0.4,0.0,0.2,1)';\n  static DECELERATION_CURVE = 'cubic-bezier(0.0,0.0,0.2,1)';\n  static ACCELERATION_CURVE = 'cubic-bezier(0.4,0.0,1,1)';\n  static SHARP_CURVE = 'cubic-bezier(0.4,0.0,0.6,1)';\n}\n\n\n/** @docs-private */\nexport class AnimationDurations {\n  static COMPLEX = '375ms';\n  static ENTERING = '225ms';\n  static EXITING = '195ms';\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {InjectionToken} from '@angular/core';\n\n\nexport type MatDateFormats = {\n  parse: {\n    dateInput: any\n  },\n  display: {\n    dateInput: any,\n    monthYearLabel: any,\n    dateA11yLabel: any,\n    monthYearA11yLabel: any,\n  }\n};\n\n\nexport const MAT_DATE_FORMATS = new InjectionToken<MatDateFormats>('mat-date-formats');\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {MatDateFormats} from './date-formats';\n\n\nexport const MAT_NATIVE_DATE_FORMATS: MatDateFormats = {\n  parse: {\n    dateInput: null,\n  },\n  display: {\n    dateInput: {year: 'numeric', month: 'numeric', day: 'numeric'},\n    monthYearLabel: {year: 'numeric', month: 'short'},\n    dateA11yLabel: {year: 'numeric', month: 'long', day: 'numeric'},\n    monthYearA11yLabel: {year: 'numeric', month: 'long'},\n  }\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {PlatformModule} from '@angular/cdk/platform';\nimport {NgModule} from '@angular/core';\nimport {DateAdapter} from './date-adapter';\nimport {MAT_DATE_FORMATS} from './date-formats';\nimport {NativeDateAdapter} from './native-date-adapter';\nimport {MAT_NATIVE_DATE_FORMATS} from './native-date-formats';\n\nexport * from './date-adapter';\nexport * from './date-formats';\nexport * from './native-date-adapter';\nexport * from './native-date-formats';\n\n\n@NgModule({\n  imports: [PlatformModule],\n  providers: [\n    {provide: DateAdapter, useClass: NativeDateAdapter},\n  ],\n})\nexport class NativeDateModule {}\n\n\n@NgModule({\n  imports: [NativeDateModule],\n  providers: [{provide: MAT_DATE_FORMATS, useValue: MAT_NATIVE_DATE_FORMATS}],\n})\nexport class MatNativeDateModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable} from '@angular/core';\nimport {FormGroupDirective, NgForm, FormControl} from '@angular/forms';\n\n/** Error state matcher that matches when a control is invalid and dirty. */\n@Injectable()\nexport class ShowOnDirtyErrorStateMatcher implements ErrorStateMatcher {\n  isErrorState(control: FormControl | null, form: FormGroupDirective | NgForm | null): boolean {\n    return !!(control && control.invalid && (control.dirty || (form && form.submitted)));\n  }\n}\n\n/** Provider that defines how form controls behave with regards to displaying error messages. */\n@Injectable({providedIn: 'root'})\nexport class ErrorStateMatcher {\n  isErrorState(control: FormControl | null, form: FormGroupDirective | NgForm | null): boolean {\n    return !!(control && control.invalid && (control.touched || (form && form.submitted)));\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable, InjectionToken, Inject, Optional} from '@angular/core';\nimport {HammerGestureConfig} from '@angular/platform-browser';\nimport {MatCommonModule} from '../common-behaviors/common-module';\nimport {\n  HammerStatic,\n  HammerInstance,\n  Recognizer,\n  RecognizerStatic,\n  HammerOptions,\n} from './gesture-annotations';\n\n/**\n * Injection token that can be used to provide options to the Hammerjs instance.\n * More info at http://hammerjs.github.io/api/.\n */\nexport const MAT_HAMMER_OPTIONS = new InjectionToken<HammerOptions>('MAT_HAMMER_OPTIONS');\n\n/** Adjusts configuration of our gesture library, Hammer. */\n@Injectable()\nexport class GestureConfig extends HammerGestureConfig {\n  private _hammer: HammerStatic = typeof window !== 'undefined' ? (window as any).Hammer : null;\n\n  /** List of new event names to add to the gesture support list */\n  events: string[] = this._hammer ? [\n    'longpress',\n    'slide',\n    'slidestart',\n    'slideend',\n    'slideright',\n    'slideleft'\n  ] : [];\n\n  constructor(\n    @Optional() @Inject(MAT_HAMMER_OPTIONS) private _hammerOptions?: HammerOptions,\n    @Optional() commonModule?: MatCommonModule) {\n    super();\n    if (commonModule) {\n      commonModule._checkHammerIsAvailable();\n    }\n  }\n\n  /**\n   * Builds Hammer instance manually to add custom recognizers that match the Material Design spec.\n   *\n   * Our gesture names come from the Material Design gestures spec:\n   * https://material.io/design/#gestures-touch-mechanics\n   *\n   * More information on default recognizers can be found in Hammer docs:\n   * http://hammerjs.github.io/recognizer-pan/\n   * http://hammerjs.github.io/recognizer-press/\n   *\n   * @param element Element to which to assign the new HammerJS gestures.\n   * @returns Newly-created HammerJS instance.\n   */\n  buildHammer(element: HTMLElement): HammerInstance {\n    const mc = new this._hammer(element, this._hammerOptions || undefined);\n\n    // Default Hammer Recognizers.\n    const pan = new this._hammer.Pan();\n    const swipe = new this._hammer.Swipe();\n    const press = new this._hammer.Press();\n\n    // Notice that a HammerJS recognizer can only depend on one other recognizer once.\n    // Otherwise the previous `recognizeWith` will be dropped.\n    // TODO: Confirm threshold numbers with Material Design UX Team\n    const slide = this._createRecognizer(pan, {event: 'slide', threshold: 0}, swipe);\n    const longpress = this._createRecognizer(press, {event: 'longpress', time: 500});\n\n    // Overwrite the default `pan` event to use the swipe event.\n    pan.recognizeWith(swipe);\n\n    // Add customized gestures to Hammer manager\n    mc.add([swipe, press, pan, slide, longpress]);\n\n    return mc as HammerInstance;\n  }\n\n  /** Creates a new recognizer, without affecting the default recognizers of HammerJS */\n  private _createRecognizer(base: Recognizer, options: any, ...inheritances: Recognizer[]) {\n    let recognizer = new (base.constructor as RecognizerStatic)(options);\n\n    inheritances.push(base);\n    inheritances.forEach(item => recognizer.recognizeWith(item));\n\n    return recognizer;\n  }\n\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  NgModule,\n  Directive,\n  ElementRef,\n  QueryList,\n} from '@angular/core';\nimport {MatCommonModule} from '../common-behaviors/common-module';\n\n\n/**\n * Shared directive to count lines inside a text area, such as a list item.\n * Line elements can be extracted with a @ContentChildren(MatLine) query, then\n * counted by checking the query list's length.\n */\n@Directive({\n  selector: '[mat-line], [matLine]',\n  host: {'class': 'mat-line'}\n})\nexport class MatLine {}\n\n/**\n * Helper that takes a query list of lines and sets the correct class on the host.\n * @docs-private\n */\nexport class MatLineSetter {\n  constructor(private _lines: QueryList<MatLine>, private _element: ElementRef) {\n    this._setLineClass(this._lines.length);\n\n    this._lines.changes.subscribe(() => {\n      this._setLineClass(this._lines.length);\n    });\n  }\n\n  private _setLineClass(count: number): void {\n    this._resetClasses();\n    if (count === 2 || count === 3) {\n      this._setClass(`mat-${count}-line`, true);\n    } else if (count > 3) {\n      this._setClass(`mat-multi-line`, true);\n    }\n  }\n\n  private _resetClasses(): void {\n    this._setClass('mat-2-line', false);\n    this._setClass('mat-3-line', false);\n    this._setClass('mat-multi-line', false);\n  }\n\n  private _setClass(className: string, isAdd: boolean): void {\n    if (isAdd) {\n      this._element.nativeElement.classList.add(className);\n    } else {\n      this._element.nativeElement.classList.remove(className);\n    }\n  }\n\n}\n\n@NgModule({\n  imports: [MatCommonModule],\n  exports: [MatLine, MatCommonModule],\n  declarations: [MatLine],\n})\nexport class MatLineModule { }\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {RippleConfig, RippleRenderer} from './ripple-renderer';\n\n/** Possible states for a ripple element. */\nexport enum RippleState {\n  FADING_IN, VISIBLE, FADING_OUT, HIDDEN\n}\n\n/**\n * Reference to a previously launched ripple element.\n */\nexport class RippleRef {\n\n  /** Current state of the ripple reference. */\n  state: RippleState = RippleState.HIDDEN;\n\n  constructor(\n    private _renderer: RippleRenderer,\n    public element: HTMLElement,\n    public config: RippleConfig) {\n  }\n\n  /** Fades out the ripple element. */\n  fadeOut() {\n    this._renderer.fadeOutRipple(this);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Platform} from '@angular/cdk/platform';\nimport {\n  Directive,\n  ElementRef,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  OnDestroy,\n  OnInit,\n  Optional,\n} from '@angular/core';\nimport {RippleRef} from './ripple-ref';\nimport {RippleAnimationConfig, RippleConfig, RippleRenderer, RippleTarget} from './ripple-renderer';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\n\n/** Configurable options for `matRipple`. */\nexport interface RippleGlobalOptions {\n  /**\n   * Whether ripples should be disabled. Ripples can be still launched manually by using\n   * the `launch()` method. Therefore focus indicators will still show up.\n   */\n  disabled?: boolean;\n\n  /**\n   * Configuration for the animation duration of the ripples. There are two phases with different\n   * durations for the ripples. The animation durations will be overwritten if the\n   * `NoopAnimationsModule` is being used.\n   */\n  animation?: RippleAnimationConfig;\n\n  /**\n   * If set, the default duration of the fade-in animation is divided by this value. For example,\n   * setting it to 0.5 will cause the ripple fade-in animation to take twice as long.\n   * A changed speedFactor will not affect the fade-out duration of the ripples.\n   * @deprecated Use the `animation` global option instead.\n   * @deletion-target 7.0.0\n   */\n  baseSpeedFactor?: number;\n\n  /**\n   * Whether ripples should start fading out immediately after the mouse our touch is released. By\n   * default, ripples will wait for the enter animation to complete and for mouse or touch release.\n   */\n  terminateOnPointerUp?: boolean;\n}\n\n/** Injection token that can be used to specify the global ripple options. */\nexport const MAT_RIPPLE_GLOBAL_OPTIONS =\n    new InjectionToken<RippleGlobalOptions>('mat-ripple-global-options');\n\n@Directive({\n  selector: '[mat-ripple], [matRipple]',\n  exportAs: 'matRipple',\n  host: {\n    'class': 'mat-ripple',\n    '[class.mat-ripple-unbounded]': 'unbounded'\n  }\n})\nexport class MatRipple implements OnInit, OnDestroy, RippleTarget {\n\n  /** Custom color for all ripples. */\n  @Input('matRippleColor') color: string;\n\n  /** Whether the ripples should be visible outside the component's bounds. */\n  @Input('matRippleUnbounded') unbounded: boolean;\n\n  /**\n   * Whether the ripple always originates from the center of the host element's bounds, rather\n   * than originating from the location of the click event.\n   */\n  @Input('matRippleCentered') centered: boolean;\n\n  /**\n   * If set, the radius in pixels of foreground ripples when fully expanded. If unset, the radius\n   * will be the distance from the center of the ripple to the furthest corner of the host element's\n   * bounding rectangle.\n   */\n  @Input('matRippleRadius') radius: number = 0;\n\n  /**\n   * If set, the normal duration of ripple animations is divided by this value. For example,\n   * setting it to 0.5 will cause the animations to take twice as long.\n   * A changed speedFactor will not modify the fade-out duration of the ripples.\n   * @deprecated Use the [matRippleAnimation] binding instead.\n   * @deletion-target 7.0.0\n   */\n  @Input('matRippleSpeedFactor') speedFactor: number = 1;\n\n  /**\n   * Configuration for the ripple animation. Allows modifying the enter and exit animation\n   * duration of the ripples. The animation durations will be overwritten if the\n   * `NoopAnimationsModule` is being used.\n   */\n  @Input('matRippleAnimation') animation: RippleAnimationConfig;\n\n  /**\n   * Whether click events will not trigger the ripple. Ripples can be still launched manually\n   * by using the `launch()` method.\n   */\n  @Input('matRippleDisabled')\n  get disabled() { return this._disabled; }\n  set disabled(value: boolean) {\n    this._disabled = value;\n    this._setupTriggerEventsIfEnabled();\n  }\n  private _disabled: boolean = false;\n\n  /**\n   * The element that triggers the ripple when click events are received.\n   * Defaults to the directive's host element.\n   */\n  @Input('matRippleTrigger')\n  get trigger() { return this._trigger || this._elementRef.nativeElement; }\n  set trigger(trigger: HTMLElement) {\n    this._trigger = trigger;\n    this._setupTriggerEventsIfEnabled();\n  }\n  private _trigger: HTMLElement;\n\n  /** Renderer for the ripple DOM manipulations. */\n  private _rippleRenderer: RippleRenderer;\n\n  /** Options that are set globally for all ripples. */\n  private _globalOptions: RippleGlobalOptions;\n\n  /** Whether ripple directive is initialized and the input bindings are set. */\n  private _isInitialized: boolean = false;\n\n  constructor(private _elementRef: ElementRef,\n              ngZone: NgZone,\n              platform: Platform,\n              @Optional() @Inject(MAT_RIPPLE_GLOBAL_OPTIONS) globalOptions: RippleGlobalOptions,\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) animationMode?: string) {\n\n    this._globalOptions = globalOptions || {};\n    this._rippleRenderer = new RippleRenderer(this, ngZone, _elementRef, platform);\n\n    if (animationMode === 'NoopAnimations') {\n      this._globalOptions.animation = {enterDuration: 0, exitDuration: 0};\n    }\n  }\n\n  ngOnInit() {\n    this._isInitialized = true;\n    this._setupTriggerEventsIfEnabled();\n  }\n\n  ngOnDestroy() {\n    this._rippleRenderer._removeTriggerEvents();\n  }\n\n  /** Fades out all currently showing ripple elements. */\n  fadeOutAll() {\n    this._rippleRenderer.fadeOutAll();\n  }\n\n  /** Ripple configuration from the directive's input values. */\n  get rippleConfig(): RippleConfig {\n    return {\n      centered: this.centered,\n      radius: this.radius,\n      color: this.color,\n      animation: {...this._globalOptions.animation, ...this.animation},\n      terminateOnPointerUp: this._globalOptions.terminateOnPointerUp,\n      speedFactor: this.speedFactor * (this._globalOptions.baseSpeedFactor || 1),\n    };\n  }\n\n  /** Whether ripples on pointer-down are disabled or not. */\n  get rippleDisabled(): boolean {\n    return this.disabled || !!this._globalOptions.disabled;\n  }\n\n  /** Sets up the the trigger event listeners if ripples are enabled. */\n  private _setupTriggerEventsIfEnabled() {\n    if (!this.disabled && this._isInitialized) {\n      this._rippleRenderer.setupTriggerEvents(this.trigger);\n    }\n  }\n\n  /**\n   * Launches a manual ripple using the specified ripple configuration.\n   * @param config Configuration for the manual ripple.\n   */\n  launch(config: RippleConfig): RippleRef;\n\n  /**\n   * Launches a manual ripple at the specified coordinates within the element.\n   * @param x Coordinate within the element, along the X axis at which to fade-in the ripple.\n   * @param y Coordinate within the element, along the Y axis at which to fade-in the ripple.\n   * @param config Optional ripple configuration for the manual ripple.\n   */\n  launch(x: number, y: number, config?: RippleConfig): RippleRef;\n\n  /** Launches a manual ripple at the specified coordinated or just by the ripple config. */\n  launch(configOrX: number | RippleConfig, y: number = 0, config?: RippleConfig): RippleRef {\n    if (typeof configOrX === 'number') {\n      return this._rippleRenderer.fadeInRipple(configOrX, y, {...this.rippleConfig, ...config});\n    } else {\n      return this._rippleRenderer.fadeInRipple(0, 0, {...this.rippleConfig, ...configOrX});\n    }\n  }\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {PlatformModule} from '@angular/cdk/platform';\nimport {MatCommonModule} from '../common-behaviors/common-module';\nimport {MatRipple} from './ripple';\n\nexport * from './ripple';\nexport * from './ripple-ref';\nexport * from './ripple-renderer';\n\n@NgModule({\n  imports: [MatCommonModule, PlatformModule],\n  exports: [MatRipple, MatCommonModule],\n  declarations: [MatRipple],\n})\nexport class MatRippleModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ViewEncapsulation,\n  Input,\n  ChangeDetectionStrategy,\n  Inject,\n  Optional,\n} from '@angular/core';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\n\n/**\n * Possible states for a pseudo checkbox.\n * @docs-private\n */\nexport type MatPseudoCheckboxState = 'unchecked' | 'checked' | 'indeterminate';\n\n/**\n * Component that shows a simplified checkbox without including any kind of \"real\" checkbox.\n * Meant to be used when the checkbox is purely decorative and a large number of them will be\n * included, such as for the options in a multi-select. Uses no SVGs or complex animations.\n * Note that theming is meant to be handled by the parent element, e.g.\n * `mat-primary .mat-pseudo-checkbox`.\n *\n * Note that this component will be completely invisible to screen-reader users. This is *not*\n * interchangeable with `<mat-checkbox>` and should *not* be used if the user would directly\n * interact with the checkbox. The pseudo-checkbox should only be used as an implementation detail\n * of more complex components that appropriately handle selected / checked state.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  selector: 'mat-pseudo-checkbox',\n  styleUrls: ['pseudo-checkbox.css'],\n  template: '',\n  host: {\n    'class': 'mat-pseudo-checkbox',\n    '[class.mat-pseudo-checkbox-indeterminate]': 'state === \"indeterminate\"',\n    '[class.mat-pseudo-checkbox-checked]': 'state === \"checked\"',\n    '[class.mat-pseudo-checkbox-disabled]': 'disabled',\n    '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"',\n  },\n})\nexport class MatPseudoCheckbox {\n  /** Display state of the checkbox. */\n  @Input() state: MatPseudoCheckboxState = 'unchecked';\n\n  /** Whether the checkbox is disabled. */\n  @Input() disabled: boolean = false;\n\n  constructor(@Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode?: string) { }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatPseudoCheckbox} from './pseudo-checkbox/pseudo-checkbox';\n\n\n@NgModule({\n  exports: [MatPseudoCheckbox],\n  declarations: [MatPseudoCheckbox]\n})\nexport class MatPseudoCheckboxModule { }\n\n\nexport * from './pseudo-checkbox/pseudo-checkbox';\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Component, ViewEncapsulation, Input, ChangeDetectionStrategy} from '@angular/core';\nimport {mixinDisabled, CanDisable} from '../common-behaviors/disabled';\n\n// Boilerplate for applying mixins to MatOptgroup.\n/** @docs-private */\nexport class MatOptgroupBase { }\nexport const _MatOptgroupMixinBase = mixinDisabled(MatOptgroupBase);\n\n// Counter for unique group ids.\nlet _uniqueOptgroupIdCounter = 0;\n\n/**\n * Component that is used to group instances of `mat-option`.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-optgroup',\n  exportAs: 'matOptgroup',\n  templateUrl: 'optgroup.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  inputs: ['disabled'],\n  styleUrls: ['optgroup.css'],\n  host: {\n    'class': 'mat-optgroup',\n    'role': 'group',\n    '[class.mat-optgroup-disabled]': 'disabled',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.aria-labelledby]': '_labelId',\n  }\n})\nexport class MatOptgroup extends _MatOptgroupMixinBase implements CanDisable {\n  /** Label for the option group. */\n  @Input() label: string;\n\n  /** Unique id for the underlying label. */\n  _labelId: string = `mat-optgroup-label-${_uniqueOptgroupIdCounter++}`;\n}\n"],"names":["role","styles","encapsulation","ViewEncapsulation","None","changeDetection","ChangeDetectionStrategy","OnPush","providers","provide","CdkTree","useExisting","MatTree","_this","recursive","tslib_1.__extends","MatTreeNodeToggle","_super","type","Directive","args","selector","host","(click)","CdkTreeNodeToggle","Input","MAT_TREE_DIRECTIVES","MatNestedTreeNode","MatTreeNodeDef","MatTreeNodePadding","MatTreeNode","MatTreeNodeOutlet","NgModule","imports","CdkTreeModule","CommonModule","MatCommonModule","exports","declarations","MatTreeModule","MatTreeFlattener","transformFunction","getLevel","isExpandable","getChildren","this","prototype","_flattenNode","node","level","resultNodes","parentMap","flatNode","push","childrenNodes","Array","isArray","_flattenChildren","pipe","take","subscribe","children","forEach","child","index","childParentMap","slice","length","flattenNodes","structuredData","expandFlattenedNodes","nodes","treeControl","results","currentExpand","expand","i","isExpanded","MatTreeFlatDataSource","treeFlattener","initialData","call","_flattenedData","BehaviorSubject","_expandedData","_data","Object","defineProperty","value","next","data","dataNodes","connect","collectionViewer","changes","viewChange","expansionModel","merge","apply","map","disconnect","DataSource","MatTreeNestedDataSource","VERSION","Version","SELECT_PANEL_PADDING_X","inputs","exportAs","MatTab","propDecorators","_implicitContent","ViewChild","TemplateRef","textLabel","ariaLabel","ariaLabelledby","matTabsAnimations","translateTab","trigger","state","style","transform","transition","animate","MatTabBodyPortal","componentFactoryResolver","viewContainerRef","_host","_centeringSub","Subscription","EMPTY","_leavingSub","ngOnInit","_beforeCentering","startWith","_isCenterPosition","_position","isCentering","hasAttached","attach","_content","_afterLeavingCenter","detach","ngOnDestroy","unsubscribe","ComponentFactoryResolver","ViewContainerRef","MatTabBody","decorators","Inject","forwardRef","CdkPortalOutlet","_elementRef","_dir","_onCentering","EventEmitter","_onCentered","position","_getLayoutDirection","origin","dir","_origin","_onTranslateTabStarted","e","toState","emit","nativeElement","clientHeight","_onTranslateTabComplete","fromState","Component","template","animations","class","Output","_portalHost","PortalHostDirective","MatTabLabelWrapperBase","_MatTabLabelWrapperMixinBase","mixinDisabled","MatTabLabelWrapper","elementRef","focus","getOffsetLeft","offsetLeft","getOffsetWidth","offsetWidth","[class.mat-tab-disabled]","ElementRef","MatTabHeaderBase","_MatTabHeaderMixinBase","mixinDisableRipple","MatTabHeader","_changeDetectorRef","_viewportRuler","_scrollDistance","_selectedIndexChanged","_realignInkBar","_showPaginationControls","_disableScrollAfter","_disableScrollBefore","_selectedIndex","selectFocusedIndex","indexFocused","coerceNumberProperty","_keyManager","updateActiveItemIndex","ngAfterContentChecked","_tabLabelCount","_labelWrappers","_updatePagination","markForCheck","_scrollToLabel","_checkScrollingControls","_alignInkBarToSelectedTab","_scrollDistanceChanged","_updateTabScrollPosition","_handleKeydown","event","keyCode","HOME","setFirstItemActive","preventDefault","END","setLastItemActive","ENTER","SPACE","focusIndex","onKeydown","ngAfterContentInit","dirChange","change","observableOf","resize","realign","FocusKeyManager","withHorizontalOrientation","requestAnimationFrame","_onContentChanges","_checkPaginationEnabled","_isValidIndex","setActiveItem","_setTabFocus","tab","toArray","disabled","tabIndex","containerEl","_tabListContainer","scrollLeft","scrollWidth","scrollDistance","translateX","_tabList","v","Math","max","min","_getMaxScrollDistance","_scrollHeader","scrollDir","viewLength","labelIndex","selectedLabel","labelBeforePos","labelAfterPos","beforeVisiblePos","afterVisiblePos","isEnabled","selectedLabelWrapper","selectedIndex","_inkBar","alignToElement","[class.mat-tab-header-pagination-controls-enabled]","[class.mat-tab-header-rtl]","ViewportRuler","Directionality","Optional","nextId","MatTabChangeEvent","MatTabGroupBase","_MatTabGroupMixinBase","mixinColor","MatTabGroup","_indexToSelect","_tabBodyWrapperHeight","_tabsSubscription","_tabLabelSubscription","_dynamicHeight","headerPosition","selectedIndexChange","focusChange","animationDone","selectedTabChange","_groupId","coerceBooleanProperty","_backgroundColor","classList","remove","backgroundColor","add","indexToSelect","_tabs","tabChangeEvent","_createChangeEvent","Promise","resolve","then","isActive","_subscribeToTabLabels","tabs","realignInkBar","_tabHeader","_focusChanged","_disableChange","concat","_labelChange","_getTabLabelId","_getTabContentId","_setTabBodyWrapperHeight","tabHeight","wrapper","_tabBodyWrapper","height","offsetHeight","_removeTabBodyWrapperHeight","_handleClick","tabHeader","idx","_getTabIndex","[class.mat-tab-group-dynamic-height]","[class.mat-tab-group-inverted-header]","dynamicHeight","MatTabNavBase","_MatTabNavMixinBase","MatTabNav","_ngZone","_onDestroy","Subject","updateActiveLink","element","_activeLinkChanged","runOutsideAngular","takeUntil","_alignInkBar","activeTab","_tabLinks","find","active","_activeLinkElement","complete","show","hide","NgZone","ChangeDetectorRef","MatTabLinkBase","_MatTabLinkMixinBase","mixinTabIndex","_tabNavBar","_tabLinkRipple","setupTriggerEvents","parseInt","globalOptions","_ripplesGloballyDisabled","terminateOnPointerUp","speedFactor","baseSpeedFactor","animation","get","_isActive","enumerable","configurable","MatTabLink","[attr.aria-current]","[attr.aria-disabled]","[attr.tabIndex]","[class.mat-tab-label-active]","Platform","undefined","MAT_RIPPLE_GLOBAL_OPTIONS","Attribute","PortalModule","MatRippleModule","ObserversModule","MatTabLabel","MatTabContent","MatInkBar","MatTabsModule","MatToolbarBase","_MatToolbarMixinBase","MatToolbarRow","MatToolbar","_platform","document","_document","ngAfterViewInit","isDevMode","isBrowser","_checkToolbarMixedModes","_toolbarRows","childNodes","filter","contains","nodeType","COMMENT_NODE","some","textContent","trim","throwToolbarMixedModesError","[class.mat-toolbar-multiple-rows]","[class.mat-toolbar-single-row]","DOCUMENT","MatToolbarModule","viewContainer","_MatTreeNodeMixinBase","CdkTreeNode","_MatNestedTreeNodeMixinBase","CdkNestedTreeNode","_tree","Number","[attr.aria-expanded]","[attr.aria-level]","[attr.role]","CdkTreeNodeDef","_differs","IterableDiffers","nodeOutlet","ContentChildren","CdkTreeNodePadding","indent","changeDetectorRef","MatSortHeader","_disableClear","id","_cdkColumnDef","name","_updateArrowDirection","_setAnimationTransitionState","_isSorted","_arrowDirection","_sort","register","deregister","_rerenderSubscription","_setIndicatorHintVisible","visible","_isDisabled","_showIndicatorHint","viewState","_viewState","_disableViewStateAnimation","sort","direction","_getArrowDirectionState","_getArrowViewState","start","_getAriaSortAttribute","(mouseenter)","(longpress)","(mouseleave)","[attr.aria-sort]","[class.mat-sort-header-disabled]","matSortAnimations","indicator","leftPointer","rightPointer","arrowOpacity","arrowPosition","allowChildren","MatSort","CdkColumnDef","disableClear","MAT_SORT_HEADER_INTL_PROVIDER","MatSortModule","MatStepLabel","CdkStepLabel","optionalLabel","Injectable","providedIn","MatStepperIntl","MatStepHeader","_intl","_focusMonitor","_element","monitor","_intlSubscription","stopMonitoring","_stringLabel","label","_templateLabel","_getHostElement","_getIconContext","optional","iconOverrides","selected","matStepperAnimations","horizontalStepTransition","visibility","verticalStepTransition","MatStepperIcon","templateRef","MatStep","stepper","_errorStateMatcher","isErrorState","control","form","originalErrorState","customErrorState","invalid","interacted","ErrorStateMatcher","MatStepper","arguments","icons","_icons","override","icon","_iconOverrides","_steps","_destroyed","_stateChanged","MatHorizontalStepper","aria-orientation","MatVerticalStepper","ctorParameters","MatStepperNext","[type]","CdkStepper","CdkStepperNext","MatStepperPrevious","CdkStepperPrevious","MatButtonModule","CdkStepperModule","MatIconModule","MatStepperModule","MatTable","stickyCssClass","CDK_TABLE_TEMPLATE","MatCellDef","CdkCellDef","MatHeaderCellDef","CdkHeaderCellDef","MatFooterCellDef","CdkFooterCellDef","MatColumnDef","sticky","stickyEnd","MatHeaderCell","columnDef","cssClassFriendlyName","CdkHeaderCell","MatFooterCell","CdkFooterCell","MatCell","CdkCell","MatHeaderRowDef","CdkHeaderRowDef","MatFooterRowDef","CdkFooterRowDef","MatRowDef","CdkRowDef","MatHeaderRow","CDK_ROW_TEMPLATE","CdkHeaderRow","CdkFooterRow","MatFooterRow","MatRow","CdkRow","EXPORTED_DECLARATIONS","CdkTableModule","MatTableModule","MatTableDataSource","_renderData","_filter","_renderChangesSubscription","sortingDataAccessor","sortHeaderId","_isNumberValue","sortData","a","b","valueA","valueB","comparatorResult","filterPredicate","accumulator","currentTerm","key","dataStr","keys","reduce","toLowerCase","transformedFilter","indexOf","_updateChangeSubscription","_paginator","paginator","sortChange","initialized","pageChange","page","dataStream","filteredData","combineLatest","_a","_filterData","orderedData","_orderData","paginatedData","_pageData","obj","_updatePaginator","startIndex","pageIndex","pageSize","splice","filteredDataLength","lastPageIndex","ceil","_MAT_INK_BAR_POSITIONER","InjectionToken","factory","_MAT_INK_BAR_POSITIONER_FACTORY","_inkBarPositioner","_setStyles","positions","inkBar","left","width","CdkPortal","MatTabBase","_MatTabMixinBase","_viewContainerRef","_contentPortal","ngOnChanges","hasOwnProperty","TemplatePortal","_explicitContent","axis","vertical","_invertMouseCoords","_thumbGap","percent","MatSlider","_direction","_tickIntervalPercent","tickSize","backgroundSize","sign","rotate","_isMinValue","_invertAxis","detectChanges","_dirChangeSubscription","_onMouseenter","_sliderDimensions","_getSliderDimensions","_updateTickIntervalPercent","_onClick","oldValue","_isSliding","_focusHostElement","_updateValueFromPosition","x","clientX","y","clientY","_emitInputEvent","_emitChangeEvent","_onSlide","_onSlideStart","center","_valueOnSlideStart","_onSlideEnd","_onFocus","_onBlur","onTouched","_onKeydown","PAGE_UP","_increment","PAGE_DOWN","LEFT_ARROW","UP_ARROW","RIGHT_ARROW","DOWN_ARROW","_onKeyup","numSteps","_clamp","step","pos","offset","top","size","posComponent","exactValue","_calculateValue","closestValue","round","_controlValueAccessorChangeFn","input","tickInterval","trackSize","pixelsPerStep","stepsPerTick","pixelsPerTick","MatSliderChange","source","_calculatePercentage","percentage","_sliderWrapper","getBoundingClientRect","_blurHostElement","blur","writeValue","registerOnChange","fn","registerOnTouched","setDisabledState","isDisabled","MAT_SLIDER_VALUE_ACCESSOR","(focus)","(blur)","(keydown)","(keyup)","(slide)","(slideend)","(slidestart)","[tabIndex]","[attr.aria-valuemax]","[attr.aria-valuemin]","[attr.aria-valuenow]","[attr.aria-orientation]","[class.mat-slider-disabled]","[class.mat-slider-has-ticks]","[class.mat-slider-horizontal]","[class.mat-slider-axis-inverted]","[class.mat-slider-sliding]","[class.mat-slider-thumb-label-showing]","[class.mat-slider-vertical]","[class.mat-slider-min-value]","[class.mat-slider-hide-last-tick]","[class._mat-animation-noopable]","ANIMATION_MODULE_TYPE","thumbLabel","displayWith","HAMMER_GESTURE_CONFIG","useClass","GestureConfig","MatSliderModule","MatSnackBarRef","containerInstance","_overlayRef","_afterDismissed","_afterOpened","_onAction","_dismissedByAction","onAction","dismiss","_onExit","_finishDismiss","closed","exit","clearTimeout","_durationTimeoutId","dismissWithAction","closeWithAction","_dismissAfter","duration","setTimeout","_open","dispose","dismissedByAction","afterDismissed","asObservable","afterOpened","_onEnter","MAT_SNACK_BAR_DATA","MatSnackBarConfig","politeness","announcementMessage","horizontalPosition","verticalPosition","matSnackBarAnimations","contentFade","opacity","AnimationDurations","COMPLEX","AnimationCurves","STANDARD_CURVE","snackBarState","EXITING","ACCELERATION_CURVE","ENTERING","DECELERATION_CURVE","SimpleSnackBar","snackBarRef","action","[@contentFade]","MatSnackBarContainer","snackBarConfig","_animationState","attachComponentPortal","portal","_assertNotAttached","_applySnackBarClasses","_portalOutlet","attachTemplatePortal","onAnimationEnd","startsWith","_completeExit","onEnter_1","run","enter","onMicrotaskEmpty","panelClasses","panelClass","cssClass","Error","[@state]","(@state.done)","OverlayModule","entryComponents","MatSnackBarModule","MAT_SNACK_BAR_DEFAULT_OPTIONS","MAT_SNACK_BAR_DEFAULT_OPTIONS_FACTORY","MatSnackBar","_overlay","_live","_injector","_breakpointObserver","_parentSnackBar","_defaultConfig","_snackBarRefAtThisLevel","parent","_openedSnackBarRef","openFromComponent","component","config","_attach","openFromTemplate","open","message","_config","tslib_1.__assign","_attachSnackBarContainer","overlayRef","userInjector","injector","PortalInjector","WeakMap","containerPortal","ComponentPortal","containerRef","instance","content","userConfig","_createOverlay","container","$implicit","_createInjector","contentRef","observe","Breakpoints","Handset","detachments","matches","overlayElement","_animateSnackBar","announce","overlayConfig","OverlayConfig","positionStrategy","global","isRtl","isLeft","isRight","right","centerHorizontally","bottom","create","Overlay","LiveAnnouncer","Injector","BreakpointObserver","SkipSelf","MatSortBase","_MatSortMixinBase","mixinInitialized","sortables","Map","_stateChanges","getSortInvalidDirectionError","sortable","getSortHeaderMissingIdError","has","getSortDuplicateSortableIdError","set","delete","getNextSortDirection","sortDirectionCycle","getSortDirectionCycle","nextDirectionIndex","_markInitialized","SORT_ANIMATION_TRANSITION","keyframes","query","animateChild","sortButtonLabel","MatSortHeaderIntl","deps","useFactory","MAT_SORT_HEADER_INTL_PROVIDER_FACTORY","MatSortHeaderBase","_MatSortHeaderMixinBase","getSortHeaderNotContainedWithinSortError","openedChange","opened","_doc","_elementFocusedBeforeDrawerWasOpened","_isFocusTrapEnabled","_focusTrap","_trapFocus","_restoreFocus","close","stopPropagation","MatDrawer","onPositionChanged","_modeChanged","mode","focusInitialElementWhenReady","hasMovedFocus","activeEl","activeElement","HTMLElement","focusVia","_openedVia","enabled","destroy","isOpen","openedVia","_opened","_enableAnimations","matDrawerAnimations","transformDrawer","[@transform]","(@transform.start)","(@transform.done)","[attr.align]","[class.mat-drawer-end]","[class.mat-drawer-over]","[class.mat-drawer-side]","_openedStream","openedStart","_closedStream","closedStart","_animationMode","backdropClick","_doCheckSubject","_autosize","defaultAutosize","MatDrawerContainer","_drawers","drawer","_watchDrawerToggle","_watchDrawerPosition","_watchDrawerMode","_isDrawerOpen","_start","_end","_updateContentMargins","debounceTime","ngDoCheck","_setContainerClass","throwMatDuplicatedDrawerError","_right","_left","_closeModalDrawer","disableClose","_canHaveBackdrop","_isShowingBackdrop","_width","_contentMargins","_contentMarginChanges","[class.mat-drawer-container-explicit-backdrop]","ContentChild","MatDrawerContent","autosize","hasBackdrop","MatSidenavContent","[style.margin-left.px]","[style.margin-right.px]","MatSidenav","_fixedBottomGap","[class.mat-sidenav-fixed]","[style.top.px]","[style.bottom.px]","fixedInViewport","MatSidenavContainer","MatSidenavModule","ScrollDispatchModule","PlatformModule","MAT_SLIDE_TOGGLE_DEFAULT_OPTIONS","disableToggleValue","disableDragValue","nextUniqueId","MAT_SLIDE_TOGGLE_VALUE_ACCESSOR","NG_VALUE_ACCESSOR","MatSlideToggle","multi","MatSlideToggleChange","checked","MatSlideToggleBase","_MatSlideToggleMixinBase","defaults","onChange","_","_uniqueId","_required","_checked","_dragging","labelPosition","toggleChange","dragChange","_inputElement","focusOrigin","_onInputFocusChange","_onChangeEvent","_onInputClick","toggle","_focusRipple","fadeOut","_ripple","launch","persistent","_getDragPercentage","distance","_thumbBarWidth","_previousChecked","_onDragStart","thumbEl","_thumbEl","_thumbBarEl","clientWidth","_onDrag","_dragPercentage","deltaX","dragX","_onDragEnd","newCheckedValue","_onLabelTextChange","[id]","[class.mat-checked]","[class.mat-disabled]","[class.mat-slide-toggle-label-before]","FocusMonitor","required","MatRipple","MatSlideToggleModule","MatSliderBase","_MatSliderMixinBase","_invert","_max","_min","_step","_thumbLabel","_tickInterval","_value","_vertical","_percent","_roundToDecimal","toString","split","pop","parseFloat","toFixed","invert","MatProgressBar","MatProgressBarModule","BASE_SIZE","MatProgressSpinnerBase","_MatProgressSpinnerMixinBase","MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS","MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS_FACTORY","INDETERMINATE_ANIMATION_TEMPLATE","MatProgressSpinner","platform","animationMode","_fallbackAnimation","_noopAnimations","_forceAnimations","_diameter","EDGE","TRIDENT","diameter","strokeWidth","animationClass","diameters","_attachStyleNode","_strokeWidth","newValue","viewBox","_circleRadius","PI","_strokeCircumference","styleTag","createElement","head","appendChild","sheet","insertRule","_getAnimationText","replace","Set","[style.width.px]","[style.height.px]","[attr.mode]","MatSpinner","MatProgressSpinnerModule","MAT_RADIO_GROUP_CONTROL_VALUE_ACCESSOR","MatRadioGroup","MatRadioChange","MatRadioGroupBase","_MatRadioGroupMixinBase","_changeDetector","_name","_selected","_isInitialized","_labelPosition","_disabled","_updateRadioButtonNames","_markRadiosForCheck","_updateSelectedRadioFromValue","_checkSelectedRadioButton","_touch","_radios","radio","isAlreadySelected","_markForCheck","MatRadioButton","descendants","MatRadioButtonBase","_MatRadioButtonMixinBase","radioGroup","_radioDispatcher","_removeUniqueSelectionListener","listen","newCheckedState","notify","newDisabledState","_isRippleDisabled","disableRipple","_onInputChange","groupValueChanged","[class.mat-radio-checked]","[class.mat-radio-disabled]","[attr.id]","UniqueSelectionDispatcher","ariaDescribedby","MatRadioModule","box-shadow","MAT_DRAWER_DEFAULT_AUTOSIZE","MAT_DRAWER_DEFAULT_AUTOSIZE_FACTORY","_container","_focusTrapFactory","_mode","_disableClose","_autoFocus","panelOpen","activeItem","MatSelect","_calculateOverlayOffsetX","offsetX","overlayRect","overlayDir","viewportSize","getViewportSize","_isRtl","paddingWidth","multiple","SELECT_MULTIPLE_PANEL_PADDING_X","_selectionModel","options","first","group","leftOverflow","rightOverflow","updatePosition","_calculateOverlayOffsetY","scrollBuffer","maxScroll","optionOffsetFromPanelTop","itemHeight","_getItemHeight","optionHeightAdjustment","_triggerRect","maxOptionsDisplayed","floor","_disableOptionCentering","_scrollTop","firstDisplayedIndex","_getItemCount","selectedDisplayIndex","partialItemHeight","_checkOverlayWithinViewport","topSpaceAvailable","bottomSpaceAvailable","panelHeightTop","abs","_offsetY","totalPanelHeight","panelHeightBottom","_adjustPanelUp","_adjustPanelDown","_transformOrigin","_getOriginBasedOnOption","distanceBelowViewport","distanceAboveViewport","optionGroups","_triggerFontSize","setDescribedByIds","ids","_ariaDescribedby","join","onContainerClick","_panelOpen","empty","[attr.tabindex]","[attr.aria-label]","[attr.aria-labelledby]","[attr.aria-required]","[attr.aria-invalid]","[attr.aria-owns]","[attr.aria-multiselectable]","[attr.aria-describedby]","[attr.aria-activedescendant]","[class.mat-select-disabled]","[class.mat-select-invalid]","[class.mat-select-required]","matSelectAnimations","transformPanel","fadeInContent","MatFormFieldControl","MAT_OPTION_PARENT_COMPONENT","NgForm","FormGroupDirective","MatFormField","NgControl","Self","MAT_SELECT_SCROLL_STRATEGY","CdkConnectedOverlay","MatOption","MatOptgroup","customTrigger","MatSelectTrigger","placeholder","disableOptionCentering","compareWith","errorStateMatcher","selectionChange","valueChange","MatOptionModule","MatFormFieldModule","MAT_SELECT_SCROLL_STRATEGY_PROVIDER","MatSelectModule","matTooltipAnimations","tooltipState","SCROLL_THROTTLE_MS","MAT_TOOLTIP_SCROLL_STRATEGY","MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY_PROVIDER","MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY","MAT_TOOLTIP_DEFAULT_OPTIONS","MAT_TOOLTIP_DEFAULT_OPTIONS_FACTORY","MatTooltip","_scrollDispatcher","_ariaDescriber","_scrollStrategy","_defaultOptions","showDelay","hideDelay","_message","_manualListeners","IOS","nodeName","webkitUserSelect","userSelect","listener","addEventListener","_updatePosition","_tooltipInstance","removeDescription","_isTooltipVisible","_updateTooltipMessage","describe","_tooltipClass","_setTooltipClass","removeEventListener","clear","delay","_detach","_portal","TooltipComponent","afterHidden","isVisible","ESCAPE","_handleTouchend","touchendHideDelay","strategy","flexibleConnectedTo","withTransformOriginOn","withFlexibleDimensions","withViewportMargin","scrollableAncestors","getAncestorScrollContainers","withScrollableContainers","positionChanges","scrollableViewProperties","isOverlayClipped","scrollStrategy","getConfig","_getOrigin","overlay","_getOverlayPosition","withPositions","main","fallback","originPosition","isLtr","originX","originY","getMatTooltipInvalidPositionError","_invertPosition","overlayPosition","overlayX","overlayY","tooltipClass","(touchend)","ScrollDispatcher","AriaDescriber","_visibility","_closeOnInteraction","_onHide","_isHandset","_hideTimeoutId","_showTimeoutId","_animationStart","_animationDone","_handleBodyInteraction","aria-hidden","A11yModule","MatTooltipModule","itemsPerPageLabel","nextPageLabel","previousPageLabel","firstPageLabel","lastPageLabel","getRangeLabel","MatPaginatorIntl","MAT_PAGINATOR_INTL_PROVIDER","MAT_PAGINATOR_INTL_PROVIDER_FACTORY","PageEvent","MatPaginatorBase","_MatPaginatorBase","MatPaginator","_pageIndex","_length","_pageSizeOptions","_hidePageSize","_showFirstLastButtons","_intlChanges","_pageSize","_updateDisplayedPageSizeOptions","p","_initialized","nextPage","hasNextPage","previousPageIndex","_emitPageEvent","previousPage","hasPreviousPage","firstPage","lastPage","getNumberOfPages","numberOfPages","_changePageSize","pageSizeOptions","_displayedPageSizeOptions","hidePageSize","showFirstLastButtons","MatPaginatorModule","MatProgressBarBase","_MatProgressBarMixinBase","progressbarId","_bufferValue","clamp","_primaryTransform","_bufferTransform","bufferValue","aria-valuemin","aria-valuemax","_outlet","context","MatMenuContent","isAttached","ApplicationRef","matMenuAnimations","transformMenu","sequence","fadeInItems","MAT_MENU_PANEL","MatMenuItemBase","_MatMenuItemMixinBase","MatMenuItem","_parentMenu","_hovered","_highlighted","_triggersSubmenu","addItem","removeItem","_checkDisabled","_handleMouseEnter","getLabel","textNodeType","TEXT_NODE","output","length_1","[class.mat-menu-item-highlighted]","[class.mat-menu-item-submenu-trigger]","[attr.disabled]","MAT_MENU_DEFAULT_OPTIONS","MAT_MENU_DEFAULT_OPTIONS_FACTORY","MatMenu","_xPosition","xPosition","_yPosition","yPosition","_items","_itemChanges","_tabSubscription","_classList","_panelAnimationState","backdropClass","_overlapTrigger","overlapTrigger","_hasBackdrop","throwMatMenuInvalidPositionX","setPositionClasses","throwMatMenuInvalidPositionY","classes","className","withWrap","withTypeAhead","tabOut","switchMap","items","item","parentMenu","setFocusOrigin","focusFirstItem","lazyContent","onStable","resetActiveItem","setElevation","depth","newElevation","customElevation","c","_previousElevation","posX","posY","_startAnimation","_resetAnimation","_onAnimationDone","_isAnimating","activeItemIndex","scrollTop","MAT_MENU_SCROLL_STRATEGY","MAT_MENU_SCROLL_STRATEGY_FACTORY_PROVIDER","MAT_MENU_SCROLL_STRATEGY_FACTORY","MatMenuTrigger","_menuItemInstance","_menuOpen","_closeSubscription","_hoverSubscription","_openedByMouse","menuOpened","onMenuOpen","menuClosed","onMenuClose","triggersSubmenu","menu","_checkMenu","reason","_destroyMenu","_handleHover","_cleanUpSubscriptions","toggleMenu","closeMenu","openMenu","_setPosition","menuData","_menuClosingActions","_initMenu","menuOpen","_resetMenu","_setMenuElevation","_setIsMenuOpen","throwMatMenuMissingError","_getOverlayConfig","_subscribeToPositions","connectionPair","originFallbackX","_b","overlayFallbackY","_c","originFallbackY","_d","overlayFallbackX","offsetY","backdrop","parentClose","hover","_handleMousedown","isFakeMousedownFromScreenReader","asapScheduler","aria-haspopup","(mousedown)","_deprecatedMatMenuTriggerFor","MatMenuModule","minWidth","MAT_SELECT_SCROLL_STRATEGY_PROVIDER_FACTORY","MatSelectChange","MatSelectBase","_defaultErrorStateMatcher","_parentForm","_parentFormGroup","ngControl","_MatSelectMixinBase","mixinErrorState","_parentFormField","_scrollStrategyFactory","_multiple","_compareWith","o1","o2","_uid","_destroy","_onChange","_onTouched","_optionIds","_panelDoneAnimating","_panelDoneAnimatingStream","_positions","_focused","controlType","optionSelectionChanges","defer","option","onSelectionChange","o","valueAccessor","_placeholder","stateChanges","getMatSelectDynamicMultipleError","getMatSelectNonFunctionValueError","_initializeSelection","_id","SelectionModel","distinctUntilChanged","_initKeyManager","added","select","removed","deselect","_resetOptions","updateErrorState","getComputedStyle","_calculateOverlayPosition","_highlightCorrectOption","fontSize","_setSelectionByValue","selectedOptions","viewValue","reverse","_handleOpenKeydown","_handleClosedKeydown","isArrowKey","altKey","manager","A","ctrlKey","hasDeselectedOptions_1","previouslyFocusedIndex","shiftKey","_selectViaInteraction","_onFadeInDone","_onAttached","positionChange","panel","_getPanelTheme","color","isEmpty","getMatSelectNonArrayValueError","currentValue","_selectValue","_sortValues","correspondingOption","error","console","warn","ActiveDescendantKeyManager","withVerticalOrientation","_scrollActiveOptionIntoView","changedOrDestroyed","_onSelect","isUserInput","_setOptionIds","wasSelected","isSelected","_propagateChanges","options_1","fallbackValue","valueToEmit","activeOptionIndex","labelCount","_countGroupLabelsBeforeOption","_getOptionScrollPosition","_getOptionIndex","result","current","panelHeight","scrollContainerHeight","selectedOptionOffset","_calculateOverlayScroll","optionOffsetFromScrollTop","halfOptionHeight","optimalScrollPosition","_getAriaLabel","_getAriaLabelledby","_labelId","_getAriaActiveDescendant","MAT_SELECTION_LIST_VALUE_ACCESSOR","MatSelectionList","MatListOption","_MatSelectionListMixinBase","MatLineModule","MatPseudoCheckboxModule","MatList","MatNavList","MatListItem","MatListAvatarCssMatStyler","MatListIconCssMatStyler","MatListSubheaderCssMatStyler","MatDividerModule","MatListModule","_template","_componentFactoryResolver","_appRef","DomPortalOutlet","insertBefore","outletElement","[class.mat-list-item-avatar]","[class.mat-list-item-with-avatar]","_icon","MatSelectionListBase","MatListOptionBase","_MatListOptionMixinBase","MatSelectionListChange","selectionList","_hasFocus","checkboxPosition","_setSelected","_reportValueChange","MatLineSetter","_lines","_removeOptionFromList","_text","_handleFocus","_setFocusedOption","_handleBlur","tabindex","[class.mat-list-item-disabled]","[class.mat-list-item-focus]","[attr.aria-selected]","skipPredicate","_tempValues","_setOptionsFromValues","_modelChanges","_i","optionIndex","setNextItemActive","previousFocusIndex","_toggleSelectOnFocusedOption","selectAll","deselectAll","_getSelectedOptionValues","values","Boolean","focusedOption","focusedIndex","hasChanged","_MatListMixinBase","_navList","_isNavList","FixedTileStyler","reset","list","_setListStyle","_tiles","tile","_setStyle","TileStyler","RatioTileStyler","_parseRatio","setRowStyles","rowIndex","percentWidth","gutterWidth","percentHeightPerTile","rowHeightRatio","baseTileHeight","getBaseTileSize","getTilePosition","calc","getTileSize","rowspan","getComputedHeight","getTileSpan","getGutterSpan","ratioParts","FitTileStyler","_rowspan","gutterHeightPerTile","_rows","MatGridList","_gutter","_cols","coerceToNumber","coerceToString","_rowHeight","_setTileStyler","_checkCols","_checkRowHeight","_layoutTiles","cols","rowHeight","_tileStyler","tracker","TileCoordinator","init","gutterSize","setStyle","row","col","MatGridTile","MatGridTileText","MatGridTileHeaderCssMatStyler","MatGridTileFooterCssMatStyler","MatGridAvatarCssMatStyler","MatGridListModule","SvgIconConfig","svgElement","url","MatIconRegistry","_httpClient","_sanitizer","_svgIconConfigs","_iconSetConfigs","_cachedIconsByUrl","_inProgressUrlFetches","_fontCssClassesByAlias","_defaultFontSetClass","addSvgIcon","iconName","addSvgIconInNamespace","addSvgIconLiteral","literal","addSvgIconLiteralInNamespace","namespace","_addSvgIconConfig","sanitizedLiteral","sanitize","SecurityContext","HTML","getMatIconFailedToSanitizeLiteralError","_createSvgElementForSingleIcon","addSvgIconSet","addSvgIconSetInNamespace","addSvgIconSetLiteral","addSvgIconSetLiteralInNamespace","_addSvgIconSetConfig","_svgElementFromString","registerFontClassAlias","alias","classNameForFontAlias","setDefaultFontSetClass","getDefaultFontSetClass","getSvgIconFromUrl","safeUrl","RESOURCE_URL","getMatIconFailedToSanitizeUrlError","cachedIcon","cloneSvg","_loadSvgIconFromConfig","tap","svg","getNamedSvgIcon","iconKey","_getSvgFromConfig","iconSetConfigs","_getSvgFromIconSetConfigs","observableThrow","getMatIconNameNotFoundError","namedIcon","_extractIconWithNameFromAnySet","iconSetFetchRequests","iconSetConfig","_loadSvgIconSetFromConfig","catchError","err","forkJoin","foundIcon","_extractSvgIconFromSet","_fetchUrl","svgText","responseText","_setSvgAttributes","iconSet","iconSource","querySelector","iconElement","cloneNode","removeAttribute","_toSvgElement","str","div","innerHTML","ELEMENT_NODE","setAttribute","getMatIconNoHttpProviderError","inProgressFetch","req","responseType","finalize","share","configNamespace","HttpClient","DomSanitizer","ICON_REGISTRY_PROVIDER","ICON_REGISTRY_PROVIDER_FACTORY","MatIconBase","_MatIconMixinBase","MatIcon","_iconRegistry","ariaHidden","_inline","inline","_fontSet","_cleanupFontValue","_fontIcon","_splitIconName","parts","svgIcon","_setSvgElement","log","_clearSvgElement","_usingFontIcon","_updateFontIconClasses","styleTags","querySelectorAll","layoutElement","childCount","removeChild","elem","fontSetClass","fontSet","_previousFontSetClass","fontIcon","_previousFontIconClass","[class.mat-icon-inline]","MatListBase","MatListItemBase","_MatListItemMixinBase","_inputSubscription","_disabledChange","_popupRef","_popupComponentRef","date","_dateAdapter","sameDate","_selectedChanged","_datepickerInput","_valueChange","_focusedElementBeforeOpen","touchUi","_openAsDialog","_openAsPopup","openedStream","_dialogRef","_calendarPortal","completeClose","closedStream","afterClosed","componentInstance","datepicker","_setColor","_createPopup","keydownEvents","withPush","MatDatepicker","MatDialog","MAT_DATEPICKER_SCROLL_STRATEGY","DateAdapter","calendarHeaderComponent","startAt","yearSelected","monthSelected","MAT_DATEPICKER_VALUE_ACCESSOR","MatDatepickerInput","MAT_DATEPICKER_VALIDATORS","NG_VALIDATORS","MatDatepickerInputEvent","target","targetElement","_dateFormats","_formField","dateChange","dateInput","_cvaOnChange","_validatorOnChange","_datepickerSubscription","_localeSubscription","_parseValidator","_lastValueValid","matDatepickerParse","text","_minValidator","controlValue","_getValidDateOrNull","deserialize","compareDate","matDatepickerMin","actual","_maxValidator","matDatepickerMax","_filterValidator","_dateFilter","matDatepickerFilter","_validator","Validators","compose","createMissingDateImplError","localeChanges","registerDatepicker","_datepicker","_registerInput","isValid","oldDate","_formatValue","registerOnValidatorChange","validate","getPopupConnectionElementRef","getConnectedOverlayOrigin","_onInput","parse","_getThemePalette","format","display","isDateInstance","MAT_INPUT_VALUE_ACCESSOR","[attr.aria-haspopup]","[attr.min]","[attr.max]","[disabled]","(input)","(change)","MAT_DATE_FORMATS","matDatepicker","MatDatepickerToggleIcon","MatDatepickerToggle","_watchStateChanges","datepickerDisabled","inputDisabled","datepickerToggled","[class.mat-datepicker-toggle-active]","[class.mat-accent]","[class.mat-warn]","_customIcon","MatDialogModule","MatCalendar","MatCalendarBody","MatDatepickerContent","MatMonthView","MatYearView","MatMultiYearView","MatCalendarHeader","MatDatepickerIntl","MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY_PROVIDER","MatDatepickerModule","_inset","MatDivider","[class.mat-divider-vertical]","[class.mat-divider-horizontal]","[class.mat-divider-inset]","_hideToggle","displayMode","MatAccordion","hideToggle","CdkAccordion","matExpansionAnimations","indicatorRotate","expansionHeaderHeight","params","collapsedHeight","expandedHeight","bodyExpansion","MatExpansionPanelContent","uniqueId","MatExpansionPanel","accordion","_uniqueSelectionDispatcher","_inputChanges","_headerId","_getHideToggle","_hasSpacing","expanded","_getExpandedState","_lazyContent","_bodyAnimation","phaseName","outputs","[class.mat-expanded]","[class.mat-expansion-panel-spacing]","MatExpansionPanelActionRow","MatExpansionPanelHeader","_parentChangeSubscription","_toggle","_isExpanded","_getPanelId","_showToggle","_keydown","[attr.aria-controls]","[@expansionHeight]","MatExpansionPanelDescription","MatExpansionPanelTitle","CdkAccordionModule","MatExpansionModule","_colspan","property","numColumns","tiles","columnIndex","fill","_trackTile","lastRowMax","rowCount","gapStartIndex","_findMatchingGap","colspan","_markTilePosition","TilePosition","tileCols","gapEndIndex","_nextRow","_findGapEndIndex","_gutterSize","normalizeUnits","sizePercent","gutterFraction","baseSize","span","colIndex","percentWidthPerTile","gutterWidthFractionPerTile","setColStyles","baseTileWidth","side","tileHeight","fixedRowHeight","_init","_dateSelected","_selectedDate","selectedYear","getYear","activeDate","selectedMonth","getMonth","selectedDate","createDate","selectedChange","_userSelection","_handleCalendarBodyKeydown","oldActiveDate","_activeDate","addCalendarDays","getDate","getNumDaysInMonth","addCalendarYears","addCalendarMonths","dateFilter","activeDateChange","_focusActiveCell","_getDateInCurrentMonth","_todayDate","today","_monthLabel","getMonthNames","toLocaleUpperCase","firstOfMonth","_firstWeekOffset","getDayOfWeek","getFirstDayOfWeek","_createWeekCells","_matCalendarBody","daysInMonth","dateNames","getDateNames","_weeks","cell","_shouldEnableDate","dateA11yLabel","MatCalendarCell","minDate","maxDate","_hasSameMonthAndYear","d1","d2","validDate","clampDate","_selectedYear","_minDate","_maxDate","_todayYear","activeYear","activeOffset","_years","year","_createCellForYear","_yearSelected","month","yearsPerPage","_getActiveCell","yearName","getYearName","_shouldEnableYear","firstOfYear","_selectedMonth","_getMonthInCurrentYear","_monthSelected","normalizedDate","_todayMonth","_yearLabel","monthNames","_months","_createCellForMonth","monthName","monthYearA11yLabel","_shouldEnableMonth","_isYearAndMonthAfterMaxDate","_isYearAndMonthBeforeMinDate","maxYear","maxMonth","minYear","minMonth","calendar","currentView","monthYearLabel","switchToMultiYearViewLabel","switchToMonthViewLabel","prevMonthLabel","prevYearLabel","multi-year","prevMultiYearLabel","nextMonthLabel","nextYearLabel","nextMultiYearLabel","currentPeriodClicked","previousClicked","nextClicked","previousEnabled","_isSameView","nextEnabled","date1","date2","_moveFocusOnNextTick","_currentView","startView","focusActiveCell","firstChange","view","_getCurrentViewComponent","headerComponent","monthView","yearView","multiYearView","matDatepickerAnimations","fadeInCalendar","datepickerUid","MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY","MatDatepickerContentBase","_MatDatepickerContentMixinBase","_calendar","[@transformPanel]","[class.mat-datepicker-content-touch]","MatChipList","ariaOrientation","selectable","chips","MatChip","MatChipInput","focused","_addOnBlur","separatorKeyCodes","chipEnd","_chipList","registerInput","_emitChipEnd","_blur","addOnBlur","_focus","[attr.placeholder]","MAT_CHIPS_DEFAULT_OPTIONS","chipList","CHIP_DECLARATIONS","MatChipRemove","MatChipAvatar","MatChipTrailingIcon","ɵ0","useValue","MatChipsModule","MatDialogConfig","maxWidth","ariaDescribedBy","autoFocus","closeOnNavigation","matDialogAnimations","slideDialog","MatDialogContainer","_elementFocusedBeforeDialogWasOpened","_state","_animationStateChanged","_ariaLabelledBy","throwMatDialogContentAlreadyAttachedError","_savePreviouslyFocusedElement","toFocus","_onAnimationStart","_startExitAnimation","aria-modal","[@slideDialog]","(@slideDialog.start)","(@slideDialog.done)","MatDialogRef","_containerInstance","location","_afterOpen","_afterClosed","_beforeClose","_locationChanges","_result","dialogResult","detachBackdrop","afterOpen","beforeClose","_getPositionStrategy","centerVertically","updateSize","MAT_DIALOG_DATA","MAT_DIALOG_DEFAULT_OPTIONS","MAT_DIALOG_SCROLL_STRATEGY","MAT_DIALOG_SCROLL_STRATEGY_PROVIDER","MAT_DIALOG_SCROLL_STRATEGY_PROVIDER_FACTORY","_location","_parentDialog","_overlayContainer","_openDialogsAtThisLevel","_afterAllClosedAtThisLevel","_afterOpenAtThisLevel","_ariaHiddenElements","afterAllClosed","openDialogs","_afterAllClosed","componentOrTemplateRef","_applyConfigDefaults","getDialogById","dialogContainer","_attachDialogContainer","dialogRef","_attachDialogContent","_hideNonDialogContentFromAssistiveTechnology","_removeOpenDialog","closeAll","dialog","dialogConfig","minHeight","maxHeight","injectionTokens","previousValue","overlayContainer","getContainerElement","parentElement","siblings","sibling","hasAttribute","getAttribute","Location","OverlayContainer","dialogElementUid","MatDialogClose","_dialog","getClosestDialog","proxiedChange","_matDialogClose","MatDialogTitle","MatDialogContent","MatDialogActions","MatTextareaAutosize","minRows","maxRows","rows","matAutosizeMinRows","matAutosizeMaxRows","matAutosize","matTextareaAutosize","CdkTextareaAutosize","MAT_INPUT_INVALID_TYPES","MatInputBase","_MatInputMixinBase","MatInput","inputValueAccessor","_autofillMonitor","ngZone","_isServer","autofilled","_type","_readonly","_neverEmptyInputTypes","t","getSupportedInputTypes","_inputValueAccessor","_previousNativeValue","el","selectionStart","selectionEnd","setSelectionRange","_validateType","_isTextarea","isAutofilled","_dirtyCheckNativeValue","isFocused","readonly","getMatInputUnsupportedTypeError","_isNeverEmpty","_isBadInput","validity","badInput","[class.mat-input-server]","[required]","[readonly]","AutofillMonitor","TextFieldModule","MatInputModule","calendarLabel","openCalendarLabel","displayValue","numCols","allowDisabledSelection","activeCell","cellAspectRatio","selectedValueChange","_cellClicked","_isActiveCell","cellNumber","_firstRowOffset","attr.aria-readonly","todayValue","selectedValue","labelMinRequiredCells","firstDayOfWeek","narrowWeekdays","getDayOfWeekNames","longWeekdays","weekdays","long","narrow","_weekdays","MatCardHeader","MatCardTitleGroup","MatCard","MatCardContent","MatCardTitle","MatCardSubtitle","MatCardActions","MatCardFooter","MatCardSmImage","MatCardMdImage","MatCardLgImage","MatCardImage","MatCardXlImage","MatCardAvatar","MatCardModule","MAT_CHECKBOX_CLICK_ACTION","MAT_CHECKBOX_CONTROL_VALUE_ACCESSOR","MatCheckbox","MatCheckboxChange","MatCheckboxBase","_MatCheckboxMixinBase","_clickAction","indeterminateChange","_currentAnimationClass","_currentCheckState","TransitionCheckState","Init","_indeterminate","changed","_transitionCheckState","Indeterminate","Checked","Unchecked","_getAriaChecked","indeterminate","newState","oldState","_getAnimationClassForCheckStateTransition","animationClass_1","ripple","_onInteractionEvent","animSuffix","[class.mat-checkbox-indeterminate]","[class.mat-checkbox-checked]","[class.mat-checkbox-disabled]","[class.mat-checkbox-label-before]","MAT_CHECKBOX_REQUIRED_VALIDATOR","MatCheckboxRequiredValidator","[attr.required]","CheckboxRequiredValidator","MatCheckboxModule","MatChipSelectionChange","MatChipBase","_MatChipMixinBase","CHIP_ATTRIBUTE_NAMES","rippleConfig","chipListSelectable","_selectable","_removable","destroyed","_addHostClassName","_chipRipple","RippleRenderer","CHIP_ATTRIBUTE_NAMES_1","attr","tagName","chip","_removeTriggerEvents","selectViaInteraction","toggleSelected","removable","DELETE","BACKSPACE","[class.mat-chip-selected]","[class.mat-chip-with-avatar]","[class.mat-chip-with-trailing-icon]","[class.mat-chip-disabled]","avatar","trailingIcon","removeIcon","_parentChip","MatChipListBase","_MatChipListMixinBase","MatChipListChange","_lastDestroyedIndex","_chipSet","_tabOutSubscription","_tabIndex","_userTabIndex","_chipInput","_changeSubscription","_resetChips","_updateTabIndex","_updateFocusForDestroyedChips","_chipRemoveSubscription","_dropSubscriptions","inputElement","_focusInput","_isInputEmpty","_updateKeyManager","chipIndex","chipsArray","newFocusIndex","focusChip","_clearSelection","correspondingChip","skip","_markAsTouched","_listenToChipsFocus","_listenToChipsSelection","_listenToChipsRemoved","_chipFocusSubscription","_chipBlurSubscription","_chipSelectionSubscription","chipSelectionChanges","chipFocusChanges","chipBlurChanges","chipRemoveChanges","[class.mat-chip-list-disabled]","[class.mat-chip-list-invalid]","[class.mat-chip-list-required]","MatButton","stopImmediatePropagation","MatAnchor","MatButtonToggleGroupBase","_MatButtonToggleGroupMixinBase","MAT_BUTTON_TOGGLE_GROUP_VALUE_ACCESSOR","MatButtonToggleGroup","MatButtonToggleGroupMultiple","_uniqueIdCounter","MatButtonToggleChange","_buttonToggles","_syncButtonToggle","_isSelected","_isPrechecked","_rawValue","[class.mat-button-toggle-vertical]","MatButtonToggle","MatButtonToggleBase","_MatButtonToggleMixinBase","toggleGroup","_isSingleSelector","buttonToggleGroup","_buttonElement","_onButtonClick","newChecked","[class.mat-button-toggle-standalone]","[class.mat-button-toggle-checked]","[class.mat-button-toggle-disabled]","MatButtonToggleModule","align","[class.mat-card-actions-align-end]","MatAutocomplete","MatAutocompleteOrigin","MAT_AUTOCOMPLETE_SCROLL_STRATEGY","MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY_PROVIDER","MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY","MAT_AUTOCOMPLETE_VALUE_ACCESSOR","MatAutocompleteTrigger","_zone","_componentDestroyed","_autocompleteDisabled","_manuallyFloatingLabel","_viewportSubscription","_closeKeyEventStream","autocompleteAttribute","_overlayAttached","optionSelections","autocomplete","_destroyPanel","showPanel","openPanel","_attachOverlay","_floatLabel","closePanel","_resetLabel","_isOpen","_closingActionsSubscription","_outsideClickStream","MatOptionSelectionChange","fromEvent","clickTarget","formField","_setTriggerValue","_resetActiveItem","activeOption","prevActiveItem","TAB","_canOpen","_scrollToOption","_handleInput","_previousValue","shouldAnimate","floatLabel","_animateAndLockLabel","newScrollPosition","_getScrollTop","_setScrollTop","_subscribeToClosingActions","firstStable","optionChanges","_positionStrategy","reapplyLastPosition","_setVisibility","panelClosingActions","_setValueAndClose","toDisplay","inputValue","_control","_clearPreviousSelectedOption","_emitSelectEvent","getMatAutocompleteMissingPanelError","_getPanelWidth","wasOpen","_getConnectedElement","connectedTo","panelWidth","_getHostWidth","autoActiveFirstOption","readOnly","[attr.autocomplete]","[attr.aria-autocomplete]","(focusin)","Host","autocompleteDisabled","MatAutocompleteModule","MatBadge","_color","_overlap","val","_updateTextContent","_description","newDescription","_updateHostAriaDescription","_hidden","isAbove","isAfter","description","_badgeElement","_createBadgeElement","badgeElement","oldDescription","colorPalette","[class.mat-badge-overlap]","[class.mat-badge-above]","[class.mat-badge-below]","[class.mat-badge-before]","[class.mat-badge-after]","[class.mat-badge-small]","[class.mat-badge-medium]","[class.mat-badge-large]","[class.mat-badge-hidden]","overlap","hidden","MatBadgeModule","MAT_BOTTOM_SHEET_DATA","MatBottomSheetConfig","matBottomSheetAnimations","bottomSheetState","MatBottomSheetContainer","breakpointObserver","bottomSheetConfig","_elementFocusedBeforeOpened","_breakpointSubscription","Medium","Large","XLarge","_toggleClass","isMatched","_validatePortalAttached","_setPanelClass","(@state.start)","FocusTrapFactory","MatBottomSheetModule","MatBottomSheetRef","MatBottomSheet","_parentBottomSheet","_bottomSheetRefAtThisLevel","_openedBottomSheetRef","_attachContainer","ref","bottomSheetRef","scrollStrategies","block","DEFAULT_ROUND_BUTTON_COLOR","DEFAULT_FLAT_BUTTON_COLOR","BUTTON_HOST_ATTRIBUTES","MatButtonBase","_MatButtonMixinBase","isRoundButton","_hasHostAttributes","isIconButton","BUTTON_HOST_ATTRIBUTES_1","attributes","attribute","_active","_emitSelectionChangeEvent","setActiveStyles","setInactiveStyles","ngAfterViewChecked","_mostRecentViewValue","[class.mat-selected]","[class.mat-option-multiple]","[class.mat-active]","[class.mat-option-disabled]","MAT_LABEL_GLOBAL_OPTIONS","MatError","matFormFieldAnimations","transitionMessages","[class.mat-right]","MatHint","MatLabel","MatPlaceholder","MatPrefix","MatSuffix","MatFormFieldBase","_MatFormFieldMixinBase","MAT_FORM_FIELD_DEFAULT_OPTIONS","labelOptions","_showAlwaysAnimate","_subscriptAnimationState","_hintLabel","_hintLabelId","_outlineGapWidth","_outlineGapStart","_initialGapCalculated","_labelOptions","float","_animationsEnabled","_appearance","appearance","_hideRequiredMarker","_processHints","_connectionContainerRef","_validateControlChild","_validatePlaceholders","_syncDescribedByIds","valueChanges","_prefixChildren","_suffixChildren","_hintChildren","_errorChildren","updateOutlineGap","_shouldForward","prop","_hasPlaceholder","_placeholderChild","_hasLabel","_labelChild","_shouldLabelFloat","_canLabelFloat","shouldLabelFloat","_shouldAlwaysFloat","_hideControlPlaceholder","_hasFloatingLabel","_getDisplayedMessages","errorState","_label","getMatFormFieldPlaceholderConflictError","_validateHints","startHint_1","endHint_1","hint","hintLabel","getMatFormFieldDuplicatedHintError","startHint","endHint","getMatFormFieldMissingControlError","documentElement","containerStart","_getStartEnd","labelStart","labelWidth","outlineGapPadding","rect","[class.mat-form-field-appearance-standard]","[class.mat-form-field-appearance-fill]","[class.mat-form-field-appearance-outline]","[class.mat-form-field-appearance-legacy]","[class.mat-form-field-invalid]","[class.mat-form-field-can-float]","[class.mat-form-field-should-float]","[class.mat-form-field-hide-placeholder]","[class.mat-form-field-disabled]","[class.mat-form-field-autofilled]","[class.mat-focused]","[class.ng-untouched]","[class.ng-touched]","[class.ng-pristine]","[class.ng-dirty]","[class.ng-valid]","[class.ng-invalid]","[class.ng-pending]","hideRequiredMarker","underlineRef","_inputContainerRef","_uniqueAutocompleteIdCounter","MatAutocompleteSelectedEvent","MatAutocompleteBase","_MatAutocompleteMixinBase","MAT_AUTOCOMPLETE_DEFAULT_OPTIONS","MAT_AUTOCOMPLETE_DEFAULT_OPTIONS_FACTORY","optionSelected","_autoActiveFirstOption","__extends","d","__","constructor","extendStatics","MATERIAL_SANITY_CHECKS_FACTORY","base","class_1","defaultColor","_disableRipple","defaultTabIndex","matcher","_pendingSubscribers","Observable","subscriber","_notifySubscriber","MAT_DATE_LOCALE_FACTORY","inject","LOCALE_ID","range","valueFunction","valuesArray","enforceStyleRecalculation","window","getPropertyValue","distanceToFurthestCorner","distX","distY","sqrt","optionsArray","groups","groupCounter","optionOffset","currentScrollPosition","optionHeight","reposition","MAT_DIALOG_SCROLL_STRATEGY_FACTORY","defaultOptions","provider","exp","match","parentRegistry","httpClient","sanitizer","scrollThrottle","parentIntl","sortOrder","setPrototypeOf","__proto__","__assign","assign","s","n","SHARP_CURVE","MATERIAL_SANITY_CHECKS","_sanityChecksEnabled","_hasDoneGlobalChecks","_hasCheckedHammer","_window","_areChecksEnabled","_checkDoctypeIsDefined","_checkThemeIsPresent","_isTestEnv","doctype","testElement","body","computedStyle","_checkHammerIsAvailable","BidiModule","MAT_DATE_LOCALE","MAT_DATE_LOCALE_PROVIDER","_localeChanges","setLocale","locale","second","firstValid","secondValid","SUPPORTS_INTL_API","Intl","DEFAULT_MONTH_NAMES","short","String","DEFAULT_DATE_NAMES","DEFAULT_DAY_OF_WEEK_NAMES","ISO_8601_REGEX","NativeDateAdapter","matDateLocale","useUtcForDisplay","_clampDate","getFullYear","getDay","dtf_1","DateTimeFormat","timeZone","_stripDirectionalityCharacters","_format","Date","dtf_2","day","dtf_3","weekday","dtf","_createDateWithOverflow","clone","displayFormat","setFullYear","toDateString","years","months","newDate","days","toIso8601","getUTCFullYear","_2digit","getUTCMonth","getUTCDate","test","isNaN","getTime","NaN","UTC","getHours","getMinutes","getSeconds","getMilliseconds","MAT_NATIVE_DATE_FORMATS","NativeDateModule","MatNativeDateModule","ShowOnDirtyErrorStateMatcher","dirty","submitted","touched","MAT_HAMMER_OPTIONS","_hammerOptions","commonModule","_hammer","Hammer","events","buildHammer","mc","pan","Pan","swipe","Swipe","press","Press","slide","_createRecognizer","threshold","longpress","time","recognizeWith","inheritances","recognizer","HammerGestureConfig","MatLine","_setLineClass","count","_resetClasses","_setClass","isAdd","RippleRef","_renderer","RippleState","HIDDEN","fadeOutRipple","defaultRippleAnimationConfig","enterDuration","exitDuration","ignoreMouseEventsTimeout","_target","_isPointerDown","_triggerEvents","_activeRipples","_eventOptions","supportsPassiveEventListeners","passive","onMousedown","isSyntheticEvent","_lastTouchStartEvent","now","rippleDisabled","fadeInRipple","onTouchStart","touches","onPointerUp","VISIBLE","FADING_IN","_containerElement","containerRect","_containerRect","animationConfig","centered","radius","transitionDuration","rippleRef","_mostRecentTransientRipple","runTimeoutOutsideZone","isMostRecentTransientRipple","wasActive","rippleEl","FADING_OUT","fadeOutAll","_triggerElement","_globalOptions","_rippleRenderer","_setupTriggerEventsIfEnabled","_trigger","configOrX","[class.mat-ripple-unbounded]","unbounded","MatPseudoCheckbox","[class.mat-pseudo-checkbox-indeterminate]","[class.mat-pseudo-checkbox-checked]","[class.mat-pseudo-checkbox-disabled]","MatOptgroupBase","_MatOptgroupMixinBase","_uniqueOptgroupIdCounter","[class.mat-optgroup-disabled]","_parent"],"mappings":"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"}